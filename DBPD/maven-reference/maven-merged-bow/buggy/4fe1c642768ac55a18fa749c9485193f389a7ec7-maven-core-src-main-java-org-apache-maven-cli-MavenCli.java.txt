clean up exception handling


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163978 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.settings.Settings;
+import org.apache.maven.reactor.ReactorException;
+import org.apache.maven.settings.Settings;
+import org.codehaus.plexus.PlexusContainerException;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+import java.io.IOException;
-        throws Exception
-        CommandLine commandLine = cliManager.parse( args );
+        CommandLine commandLine;
+        try
+        {
+            commandLine = cliManager.parse( args );
+        }
+        catch ( ParseException e )
+        {
+            System.err.println( "Unable to parse command line options: " + e.getMessage() );
+            cliManager.displayHelp();
+            return 1;
+        }
+        boolean debug = commandLine.hasOption( CLIManager.DEBUG );
+
-            // TODO: is there a beter way? Maybe read the manifest?
+            showVersion();
-            String version = "unknown";
+            return 0;
+        }
+        EventDispatcher eventDispatcher = new DefaultEventDispatcher();
+
+        // ----------------------------------------------------------------------
+        // Now that we have everything that we need we will fire up plexus and
+        // bring the maven component to life for use.
+        // ----------------------------------------------------------------------
+
+        ArtifactEnabledEmbedder embedder = new ArtifactEnabledEmbedder();
+
+        try
+        {
+            embedder.start( classWorld );
+        }
+        catch ( PlexusContainerException e )
+        {
+            showFatalError( "Unable to start the embedded plexus container", e, debug );
+            return 1;
+        }
+
+        Settings settings;
+        try
+        {
+            MavenSettingsBuilder settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
+
+            settings = settingsBuilder.buildSettings();
+        }
+        catch ( IOException e )
+        {
+            showFatalError( "Unable to read settings.xml", e, debug );
+            return 1;
+        }
+        catch ( XmlPullParserException e )
+        {
+            showFatalError( "Unable to read settings.xml", e, debug );
+            return 1;
+        }
+        catch ( ComponentLookupException e )
+        {
+            showFatalError( "Unable to read settings.xml", e, debug );
+            return 1;
+        }
+
+        List projectFiles = null;
+        try
+        {
+            projectFiles = getProjectFiles( commandLine );
+        }
+        catch ( IOException e )
+        {
+            showFatalError( "Error locating project files for reactor execution", e, debug );
+            return 1;
+        }
+
+        Maven maven = null;
+        MavenExecutionRequest request = null;
+        try
+        {
+            maven = createMavenInstance( embedder );
+
+            request = createRequest( projectFiles, embedder, commandLine, settings, eventDispatcher, debug );
+        }
+        catch ( ComponentLookupException e )
+        {
+            showFatalError( "Unable to configure the Maven application", e, debug );
+            return 1;
+        }
+
+        MavenExecutionResponse response = null;
+        try
+        {
+            response = maven.execute( request );
+        }
+        catch ( ReactorException e )
+        {
+            showFatalError( "Error executing Maven for a project", e, debug );
+            return 1;
+        }
+
+        if ( response != null && response.isExecutionFailure() )
+        {
+            return 1;
+        }
+        else
+        {
+            return 0;
+        }
+    }
+
+    private static void showFatalError( String message, Exception e, boolean debug )
+    {
+        System.err.println( "FATAL ERROR: " + message );
+        if ( debug )
+        {
+            e.printStackTrace();
+        }
+        else
+        {
+            System.err.println( "For more information, run with the -X flag" );
+        }
+    }
+
+    private static MavenExecutionRequest createRequest( List files, ArtifactEnabledEmbedder embedder,
+                                                        CommandLine commandLine, Settings settings,
+                                                        EventDispatcher eventDispatcher, boolean debug )
+        throws ComponentLookupException
+    {
+        MavenExecutionRequest request = null;
+
+        ArtifactRepository localRepository = createLocalRepository( embedder, settings, commandLine );
+
+        request = new DefaultMavenExecutionRequest( localRepository, settings, eventDispatcher,
+                                                    commandLine.getArgList(), files, userDir.getPath() );
+
+        LoggerManager manager = (LoggerManager) embedder.lookup( LoggerManager.ROLE );
+        if ( debug )
+        {
+            manager.setThreshold( Logger.LEVEL_DEBUG );
+        }
+
+        // TODO [BP]: do we set one per mojo? where to do it?
+        Logger logger = manager.getLoggerForComponent( Plugin.ROLE );
+        if ( logger != null )
+        {
+            request.setLog( new DefaultLog( logger ) );
+
+            request.addEventMonitor( new DefaultEventMonitor( logger ) );
+        }
+
+        if ( commandLine.hasOption( CLIManager.NON_RECURSIVE ) )
+        {
+            request.setRecursive( false );
+        }
+        return request;
+    }
+
+    private static List getProjectFiles( CommandLine commandLine )
+        throws IOException
+    {
+        List files = Collections.EMPTY_LIST;
+        if ( commandLine.hasOption( CLIManager.REACTOR ) )
+        {
+            // TODO: should we now include the pom.xml in the current directory?
+            String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 );
+
+            String excludes = System.getProperty( "maven.reactor.excludes", POMv4 );
+
+            files = FileUtils.getFiles( userDir, includes, excludes );
+        }
+        else
+        {
+            File projectFile = new File( userDir, POMv4 );
+
+            if ( projectFile.exists() )
+            {
+                files = Collections.singletonList( projectFile );
+            }
+        }
+        return files;
+    }
+
+    private static Maven createMavenInstance( ArtifactEnabledEmbedder embedder )
+        throws ComponentLookupException
+    {
+        // TODO [BP]: doing this here as it is CLI specific, though it doesn't feel like the right place (likewise logger).
+        WagonManager wagonManager = (WagonManager) embedder.lookup( WagonManager.ROLE );
+        wagonManager.setDownloadMonitor( new ConsoleDownloadMonitor() );
+
+        return (Maven) embedder.lookup( Maven.ROLE );
+    }
+
+    private static ArtifactRepository createLocalRepository( ArtifactEnabledEmbedder embedder, Settings settings,
+                                                             CommandLine commandLine )
+        throws ComponentLookupException
+    {
+        ArtifactRepositoryLayout repositoryLayout = (ArtifactRepositoryLayout) embedder.lookup(
+            ArtifactRepositoryLayout.ROLE, "default" );
+
+        ArtifactRepositoryFactory artifactRepositoryFactory = (ArtifactRepositoryFactory) embedder.lookup(
+            ArtifactRepositoryFactory.ROLE );
+
+        ArtifactRepository localRepository = getLocalRepository( settings, artifactRepositoryFactory, repositoryLayout );
+
+        boolean snapshotPolicySet = false;
+        if ( commandLine.hasOption( CLIManager.OFFLINE ) )
+        {
+            settings.getActiveProfile().setOffline( true );
+
+            // TODO: this will still check to download if the artifact does not exist locally, instead of failing as it should in offline mode
+            artifactRepositoryFactory.setGlobalSnapshotPolicy( ArtifactRepository.SNAPSHOT_POLICY_NEVER );
+            snapshotPolicySet = true;
+        }
+
+        if ( !snapshotPolicySet && commandLine.hasOption( CLIManager.UPDATE_SNAPSHOTS ) )
+        {
+            artifactRepositoryFactory.setGlobalSnapshotPolicy( ArtifactRepository.SNAPSHOT_POLICY_ALWAYS );
+        }
+        return localRepository;
+    }
+
+    private static void showVersion()
+    {
+        // TODO: is there a beter way? Maybe read the manifest?
+
+        String version = "unknown";
+
+        try
+        {
-            return 0;
-
-        // ----------------------------------------------------------------------
-        // We will ultimately not require a flag to indicate the reactor as
-        // we should take this from the execution context i.e. what the type
-        // is stated as in the POM.
-        // ----------------------------------------------------------------------
-
-        MavenExecutionRequest request = null;
-
-        File projectFile = new File( userDir, POMv4 );
-
-        EventDispatcher eventDispatcher = new DefaultEventDispatcher();
-
-        // ----------------------------------------------------------------------
-        // Now that we have everything that we need we will fire up plexus and
-        // bring the maven component to life for use.
-        // ----------------------------------------------------------------------
-
-        ArtifactEnabledEmbedder embedder = new ArtifactEnabledEmbedder();
-
-        embedder.start( classWorld );
-
-        MavenSettingsBuilder settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
-
-        Settings settings = settingsBuilder.buildSettings();
-
-        ArtifactRepositoryFactory artifactRepositoryFactory = (ArtifactRepositoryFactory) embedder.lookup(
-            ArtifactRepositoryFactory.ROLE );
-
-        
-        boolean snapshotPolicySet = false;
-        if ( commandLine.hasOption( CLIManager.OFFLINE ) )
+        catch ( IOException e )
-            settings.getActiveProfile().setOffline(true);
-            
-            // TODO: this will still check to download if the artifact does not exist locally, instead of failing as it should in offline mode
-            artifactRepositoryFactory.setGlobalSnapshotPolicy( ArtifactRepository.SNAPSHOT_POLICY_NEVER );
-            snapshotPolicySet = true;
+            System.err.println( "Unable determine version from JAR file: " + e.getMessage() );
-        
-        if ( !snapshotPolicySet && commandLine.hasOption( CLIManager.UPDATE_SNAPSHOTS ) )
+        catch ( XmlPullParserException e )
-            artifactRepositoryFactory.setGlobalSnapshotPolicy( ArtifactRepository.SNAPSHOT_POLICY_ALWAYS );
-        }
-
-        ArtifactRepositoryLayout repositoryLayout = (ArtifactRepositoryLayout) embedder.lookup(
-            ArtifactRepositoryLayout.ROLE, "default" );
-
-        ArtifactRepository localRepository = getLocalRepository( settings, artifactRepositoryFactory, repositoryLayout );
-
-        if ( commandLine.hasOption( CLIManager.REACTOR ) )
-        {
-            // TODO: should we now include the pom.xml in the current directory?
-            String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 );
-
-            String excludes = System.getProperty( "maven.reactor.excludes", POMv4 );
-
-            request = new DefaultMavenExecutionRequest( localRepository, settings, eventDispatcher,
-                                                        commandLine.getArgList(), FileUtils.getFiles( userDir,
-                                                                                                      includes,
-                                                                                                      excludes ),
-                                                        userDir.getPath() );
-        }
-        else
-        {
-            List files = Collections.EMPTY_LIST;
-            if ( projectFile.exists() )
-            {
-                files = Collections.singletonList( projectFile );
-            }
-            request = new DefaultMavenExecutionRequest( localRepository, settings, eventDispatcher,
-                                                        commandLine.getArgList(), files, userDir.getPath() );
-
-            if ( commandLine.hasOption( CLIManager.NON_RECURSIVE ) )
-            {
-                request.setRecursive( false );
-            }
-        }
-
-        LoggerManager manager = (LoggerManager) embedder.lookup( LoggerManager.ROLE );
-        if ( commandLine.hasOption( CLIManager.DEBUG ) )
-        {
-            manager.setThreshold( Logger.LEVEL_DEBUG );
-        }
-
-        // TODO [BP]: do we set one per mojo? where to do it?
-        Logger logger = manager.getLoggerForComponent( Plugin.ROLE );
-        if ( logger != null )
-        {
-            request.setLog( new DefaultLog( logger ) );
-
-            request.addEventMonitor( new DefaultEventMonitor( logger ) );
-        }
-
-        // TODO [BP]: doing this here as it is CLI specific, though it doesn't feel like the right place (likewise logger).
-        WagonManager wagonManager = (WagonManager) embedder.lookup( WagonManager.ROLE );
-        wagonManager.setDownloadMonitor( new ConsoleDownloadMonitor() );
-
-        Maven maven = (Maven) embedder.lookup( Maven.ROLE );
-
-        // ----------------------------------------------------------------------
-        //
-        // ----------------------------------------------------------------------
-
-        MavenExecutionResponse response = maven.execute( request );
-
-        if ( response != null && response.isExecutionFailure() )
-        {
-            return 1;
-        }
-        else
-        {
-            return 0;
+            System.err.println( "Unable to parse POM in JAR file: " + e.getMessage() );
-    protected static ArtifactRepository getLocalRepository( Settings settings,
-                                                            ArtifactRepositoryFactory repoFactory,
+    protected static ArtifactRepository getLocalRepository( Settings settings, ArtifactRepositoryFactory repoFactory,
-        throws Exception

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 MOV43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS8 INS54 INS60 INS54 INS54 INS60 INS54 INS60 INS54 INS54 INS43 INS42 MOV43 INS42 INS39 INS42 INS21 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 MOV60 INS60 MOV21 MOV60 MOV25 MOV60 MOV25 MOV25 INS41 INS42 INS43 INS42 INS42 MOV60 MOV25 INS41 INS43 INS42 INS42 MOV60 MOV21 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV60 MOV60 MOV60 MOV25 MOV25 INS41 MOV60 INS54 INS8 INS12 INS39 INS59 INS8 INS8 INS12 INS8 INS12 INS12 INS12 INS43 INS59 INS8 INS12 INS43 INS43 INS59 INS8 INS12 INS8 INS12 INS42 INS32 INS42 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 INS42 INS42 MOV8 INS12 INS12 INS21 INS44 INS8 INS42 MOV32 INS21 MOV41 MOV21 INS44 INS8 MOV60 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS42 INS42 INS33 INS21 INS21 INS44 INS8 INS33 INS21 INS44 INS8 INS40 INS42 INS27 INS21 INS21 INS42 INS42 INS32 MOV60 INS44 INS8 INS44 INS8 INS7 INS43 INS42 INS21 INS21 INS41 INS32 INS43 INS42 INS21 INS41 INS7 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS41 INS7 INS43 INS42 INS21 INS41 INS7 INS7 INS43 INS42 INS21 INS41 INS7 INS43 INS42 INS21 INS41 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS42 MOV32 INS42 INS32 INS32 INS34 INS42 INS42 INS32 INS34 INS42 MOV32 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS42 INS32 INS34 INS42 INS32 INS42 INS32 INS42 INS32 INS34 INS42 MOV32 INS42 INS32 INS34 INS42 INS42 INS40 INS42 INS45 INS42 MOV32 INS42 INS32 INS42 INS32 INS40 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS27 INS40 INS42 INS27 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL42 DEL43