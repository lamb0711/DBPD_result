[MNG-3220] Allow managed dependencies to be imported into other projects

o Restored import scope for 3.x

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@795611 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.management.DependencyManagementImporter;
+    private DependencyManagementImporter dependencyManagementImporter;
+
+    @Requirement
+        importDependencyManagement( resultModel, request, problems );
+
+    private void importDependencyManagement( Model model, ModelBuildingRequest request, List<ModelProblem> problems )
+    {
+        DependencyManagement depMngt = model.getDependencyManagement();
+
+        if ( depMngt == null )
+        {
+            return;
+        }
+
+        ModelResolver modelResolver = request.getModelResolver();
+
+        ModelBuildingRequest importRequest = null;
+
+        List<Model> importModels = null;
+
+        for ( Iterator<Dependency> it = depMngt.getDependencies().iterator(); it.hasNext(); )
+        {
+            Dependency dependency = it.next();
+
+            if ( !"pom".equals( dependency.getType() ) || !"import".equals( dependency.getScope() ) )
+            {
+                continue;
+            }
+
+            it.remove();
+
+            if ( modelResolver == null )
+            {
+                throw new IllegalArgumentException( "no model resolver provided, cannot resolve import POM "
+                    + toId( dependency ) + " for POM " + toSourceHint( model ) );
+            }
+
+            ModelSource importSource;
+            try
+            {
+                importSource =
+                    modelResolver.resolveModel( dependency.getGroupId(), dependency.getArtifactId(),
+                                                dependency.getVersion() );
+            }
+            catch ( UnresolvableModelException e )
+            {
+                problems.add( new ModelProblem( "Non-resolvable import POM " + toId( dependency ) + " for POM "
+                    + toSourceHint( model ) + ": " + e.getMessage(), ModelProblem.Severity.ERROR,
+                                                toSourceHint( model ), e ) );
+                continue;
+            }
+
+            if ( importRequest == null )
+            {
+                importRequest = new DefaultModelBuildingRequest();
+                importRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
+            }
+
+            importRequest.setModelSource( importSource );
+            importRequest.setModelResolver( modelResolver.newCopy() );
+
+            ModelBuildingResult importResult;
+            try
+            {
+                importResult = build( importRequest );
+            }
+            catch ( ModelBuildingException e )
+            {
+                problems.addAll( e.getProblems() );
+                continue;
+            }
+
+            problems.addAll( importResult.getProblems() );
+
+            if ( importModels == null )
+            {
+                importModels = new ArrayList<Model>();
+            }
+
+            importModels.add( importResult.getEffectiveModel() );
+        }
+
+        dependencyManagementImporter.importManagement( model, importModels, request );
+    }
+
+    private String toId( Dependency dependency )
+    {
+        StringBuilder buffer = new StringBuilder( 64 );
+
+        buffer.append( dependency.getGroupId() );
+        buffer.append( ':' );
+        buffer.append( dependency.getArtifactId() );
+        buffer.append( ':' );
+        buffer.append( dependency.getVersion() );
+
+        return buffer.toString();
+    }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS78 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS60 INS60 INS60 INS24 INS21 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS32 INS42 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS74 INS59 INS58 INS32 INS8 INS32 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS43 INS42 INS33 INS74 INS59 INS42 INS42 INS60 INS25 INS21 INS25 INS60 INS54 INS25 INS21 INS21 INS60 INS54 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS59 INS27 INS8 INS32 INS27 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS32 INS32 INS43 INS59 INS8 INS12 INS32 INS27 INS8 INS32 INS43 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS38 INS38 INS18 INS42 INS42 INS42 INS33 INS53 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS14 INS7 INS43 INS42 INS21 INS18 INS7 INS32 INS42 INS42 INS7 INS43 INS42 INS21 INS18 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS32 INS45 INS42 INS32 INS43 INS27 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS40 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42