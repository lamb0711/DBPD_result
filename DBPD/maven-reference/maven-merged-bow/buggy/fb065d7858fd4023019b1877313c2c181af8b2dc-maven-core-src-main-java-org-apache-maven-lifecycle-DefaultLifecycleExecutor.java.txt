PR: MNG-257
- hook up the source:jar goal to packaging, but only execute for non-SNAPSHOT builds
- allow comma-delimited list of goals in phase definitions
- only register necessary phases for the goals given


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191111 13f79535-47bb-0310-9956-ffa450edef68

+        String maxPhase = null;
+
+
+            if ( tasks.contains( p ) )
+            {
+                maxPhase = p;
+            }
-        Map mappings;
-        try
+        if ( maxPhase != null )
-            LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, project.getPackaging() );
-            mappings = m.getPhases();
-        }
-        catch ( ComponentLookupException e )
-        {
-            getLogger().error( "No lifecycle mapping for type '" + project.getPackaging() + "': using defaults" );
-            mappings = defaultPhases;
-        }
-
-        for ( Iterator i = mappings.keySet().iterator(); i.hasNext(); )
-        {
-            String phase = (String) i.next();
-
-            String task = (String) mappings.get( phase );
-
-            MojoDescriptor mojoDescriptor = configureMojo( task, session, phaseMap );
-
-            addToPhaseMap( phaseMap, phase, mojoDescriptor );
-
-            List matchingGoalInstances = findMatchingGoalInstances( mojoDescriptor, project );
-
-            for ( Iterator instanceIterator = matchingGoalInstances.iterator(); instanceIterator.hasNext(); )
+            Map mappings;
+            try
-                GoalInstance goalInstance = (GoalInstance) instanceIterator.next();
+                LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, project.getPackaging() );
+                mappings = m.getPhases();
+            }
+            catch ( ComponentLookupException e )
+            {
+                getLogger().error( "No lifecycle mapping for type '" + project.getPackaging() + "': using defaults" );
+                mappings = defaultPhases;
+            }
-                addToGoalInstanceMap( goalInstanceMap, goalInstance );
+            for ( Iterator i = phases.iterator(); i.hasNext(); )
+            {
+                String phase = (String) i.next();
+
+                String phaseTasks = (String) mappings.get( phase );
+
+                if ( phaseTasks != null )
+                {
+                    for ( StringTokenizer tok = new StringTokenizer( phaseTasks, "," ); tok.hasMoreTokens(); )
+                    {
+                        String task = tok.nextToken().trim();
+
+                        MojoDescriptor mojoDescriptor = configureMojo( task, session, phaseMap );
+
+                        addToPhaseMap( phaseMap, phase, mojoDescriptor );
+
+                        List matchingGoalInstances = findMatchingGoalInstances( mojoDescriptor, project );
+
+                        for ( Iterator instanceIterator = matchingGoalInstances.iterator(); instanceIterator.hasNext(); )
+                        {
+                            GoalInstance goalInstance = (GoalInstance) instanceIterator.next();
+
+                            addToGoalInstanceMap( goalInstanceMap, goalInstance );
+                        }
+                    }
+                }
+
+                if ( phase.equals( maxPhase ) )
+                {
+                    break;
+                }

INS60 INS25 INS43 INS59 INS27 INS8 INS42 INS42 INS33 INS25 INS42 INS33 MOV60 MOV54 MOV24 INS32 INS8 INS42 INS42 INS42 INS21 INS25 INS25 INS7 INS27 INS8 INS32 INS8 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS33 INS24 INS42 INS42 INS42 INS10 INS58 INS32 INS8 INS43 INS59 INS42 INS42 INS60 MOV60 MOV21 MOV60 MOV24 INS42 INS42 INS14 INS43 INS59 INS43 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 DEL42 DEL32