Replaced interpolator code.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@694907 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.shared.model.DomainModel;
-import org.apache.maven.shared.model.ModelContainer;
-import org.apache.maven.shared.model.ModelContainerAction;
-import org.apache.maven.shared.model.ModelDataSource;
-import org.apache.maven.shared.model.ModelMarshaller;
-import org.apache.maven.shared.model.ModelProperty;
-import org.apache.maven.shared.model.ModelTransformer;
+import org.apache.maven.model.Model;
+import org.apache.maven.shared.model.*;
+import java.io.File;
+import java.io.ByteArrayInputStream;
-            if ( mp.getValue() != null && ( mp.getValue().contains( "=" ) || mp.getValue().contains( "<" ) ) )
+            if ( mp.getResolvedValue() != null && ( mp.getResolvedValue().contains( "=" ) || mp.getResolvedValue().contains( "<" ) ) )
-                props.add( new ModelProperty( mp.getUri(), "<![CDATA[" + mp.getValue() + "]]>" ) );
+                props.add( new ModelProperty( mp.getUri(), "<![CDATA[" + mp.getResolvedValue() + "]]>" ) );
-     * @see ModelTransformer#transformToModelProperties(java.util.List)
+     * @see ModelTransformer#transformToModelProperties(java.util.List, java.util.List)
-    public List<ModelProperty> transformToModelProperties( List<DomainModel> domainModels )
+    public List<ModelProperty> transformToModelProperties( List<DomainModel> domainModels, 
+                                                           List<InterpolatorProperty> interpolatorProperties)
-                    tmp.add( new ModelProperty( ProjectUri.version, parentVersion.getValue() ) );
+                    tmp.add( new ModelProperty( ProjectUri.version, parentVersion.getResolvedValue() ) );
-                    tmp.add( new ModelProperty( ProjectUri.groupId, parentGroupId.getValue() ) );
+                    tmp.add( new ModelProperty( ProjectUri.groupId, parentGroupId.getResolvedValue() ) );
-                            mp.getValue() != null && mp.getValue().equals( "false" ) )
+                            mp.getResolvedValue() != null && mp.getResolvedValue().equals( "false" ) )
-                        if ( mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.inherited ) && mp.getValue() != null &&
-                            mp.getValue().equals( "false" ) )
+                        if ( mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.inherited ) && mp.getResolvedValue() != null &&
+                            mp.getResolvedValue().equals( "false" ) )
-                scmUrl.append( scmUrlProperty.getValue() );
+                scmUrl.append( scmUrlProperty.getResolvedValue() );
-                scmConnectionUrl.append( scmUrlProperty.getValue() );
+                scmConnectionUrl.append( scmUrlProperty.getResolvedValue() );
-                scmDeveloperUrl.append( scmUrlProperty.getValue() );
+                scmDeveloperUrl.append( scmUrlProperty.getResolvedValue() );
-                projectNames.add( 0, artifactId.getValue() );
+                projectNames.add( 0, artifactId.getResolvedValue() );
-
-            if ( domainModels.indexOf( domainModel ) == 0 )
-            {
-                //cache.put( pomDomainModel.getId(), modelProperties );
-            }
-
-            //Remove Parent Info
-            /*
-            for (ModelProperty mp : tmp) {
-                if (mp.getUri().startsWith(ProjectUri.Parent.xUri)) {
-                    modelProperties.remove(mp);
-                }
-            }
-                       */
+        interpolateModelProperties( modelProperties, interpolatorProperties, ((PomClassicDomainModel) domainModels.get(0)) );
+    public static String interpolateXmlString( String xml, List<InterpolatorProperty> interpolatorProperties )
+            throws IOException
+    {
+        List<ModelProperty> modelProperties =
+            ModelMarshaller.marshallXmlToModelProperties( new ByteArrayInputStream(xml.getBytes()), ProjectUri.baseUri, uris );
+
+        Map<String, String> aliases = new HashMap<String, String>();
+        aliases.put( "project.", "pom.");
+
+        List<InterpolatorProperty> ips = new ArrayList<InterpolatorProperty>(interpolatorProperties);
+        ips.addAll(ModelTransformerContext.createInterpolatorProperties(modelProperties, ProjectUri.baseUri, aliases,
+                        false, false));
+
+        for(ModelProperty mp : modelProperties)
+        {
+            if(mp.getUri().startsWith(ProjectUri.properties) && mp.getValue() != null )
+            {
+                String uri = mp.getUri();
+                ips.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1,
+                        uri.length() ) + "}", mp.getValue() ) );
+            }
+        }
+
+        ModelTransformerContext.interpolateModelProperties( modelProperties, ips );
+        return ModelMarshaller.unmarshalModelPropertiesToXml( modelProperties, ProjectUri.baseUri );
+    }
+
+    public static String interpolateModelAsString(Model model, List<InterpolatorProperty> interpolatorProperties, File projectDirectory)
+            throws IOException
+    {
+        PomClassicDomainModel domainModel = new PomClassicDomainModel( model );
+        domainModel.setProjectDirectory( projectDirectory );
+        List<ModelProperty> modelProperties =
+                ModelMarshaller.marshallXmlToModelProperties( domainModel.getInputStream(), ProjectUri.baseUri, uris );
+        interpolateModelProperties( modelProperties, interpolatorProperties, domainModel);
+
+        return ModelMarshaller.unmarshalModelPropertiesToXml( modelProperties, ProjectUri.baseUri );
+    }
+
+    public static Model interpolateModel(Model model, List<InterpolatorProperty> interpolatorProperties, File projectDirectory)
+        throws IOException
+    {
+        String pomXml = interpolateModelAsString( model, interpolatorProperties, projectDirectory );
+        PomClassicDomainModel domainModel = new PomClassicDomainModel( new ByteArrayInputStream( pomXml.getBytes() ));
+        return domainModel.getModel();
+    }
+
+    private static void interpolateModelProperties(List<ModelProperty> modelProperties,
+                                                   List<InterpolatorProperty> interpolatorProperties,
+                                                   PomClassicDomainModel domainModel)
+    {
+        Map<String, String> aliases = new HashMap<String, String>();
+        aliases.put( "project.", "pom.");
+
+        List<InterpolatorProperty> ips = new ArrayList<InterpolatorProperty>(interpolatorProperties);
+        ips.addAll(ModelTransformerContext.createInterpolatorProperties(modelProperties, ProjectUri.baseUri, aliases,
+                        false, false));
+
+        if(domainModel.isPomInBuild())
+        {
+            ips.add(new InterpolatorProperty("${project.basedir}", domainModel.getProjectDirectory().getAbsolutePath()));
+            ips.add(new InterpolatorProperty("${basedir}", domainModel.getProjectDirectory().getAbsolutePath()));
+            ips.add(new InterpolatorProperty("${pom.basedir}", domainModel.getProjectDirectory().getAbsolutePath()));
+
+        }
+
+        for(ModelProperty mp : modelProperties)
+        {
+            if(mp.getUri().startsWith(ProjectUri.properties) && mp.getValue() != null )
+            {
+                String uri = mp.getUri();
+                ips.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1,
+                        uri.length() ) + "}", mp.getValue() ) );
+            }
+        }
+
+        ModelTransformerContext.interpolateModelProperties( modelProperties, ips );
+    }
+
-                    mp.getUri().replace( ProjectUri.DependencyManagement.xUri, ProjectUri.xUri ), mp.getValue() ) );
+                    mp.getUri().replace( ProjectUri.DependencyManagement.xUri, ProjectUri.xUri ), mp.getResolvedValue() ) );
-                    mp.getValue() ) );
+                    mp.getResolvedValue() ) );

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS44 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS74 INS42 INS21 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS21 INS60 INS21 INS70 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS41 INS74 INS42 INS74 INS42 INS43 INS42 INS60 INS21 INS60 INS21 INS25 INS70 INS21 INS43 INS43 INS32 INS42 INS43 INS43 INS74 INS59 INS74 INS59 INS32 INS74 INS59 INS32 INS44 INS42 INS8 INS32 INS32 INS42 INS43 INS43 INS42 INS43 INS59 INS32 INS74 INS59 INS32 INS32 INS42 INS43 INS43 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS43 INS43 INS43 INS42 INS74 INS59 INS32 INS74 INS59 INS32 INS32 INS8 INS44 INS42 INS8 INS32 INS69 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS45 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS45 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS40 INS42 INS9 INS9 INS42 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS40 INS42 INS9 INS9 INS32 INS32 INS32 INS42 INS27 INS8 INS40 INS43 INS32 INS43 INS32 INS43 INS43 INS43 INS43 INS43 INS32 MOV27 INS60 INS21 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS32 MOV27 INS60 INS21 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS32 INS43 INS45 INS32 INS43 INS45 INS32 INS32 INS42 INS40 INS43 INS59 INS32 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS43 INS27 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 MOV32 INS32 INS32 UPD42 UPD42 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS27 INS32 INS42 INS42 INS27 INS32 UPD42 UPD42 INS32 INS34 INS42 INS42 INS32 INS34 INS42 INS42 INS27 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS33 UPD42 INS32 INS33 UPD42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL8 DEL25