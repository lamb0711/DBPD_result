o merge of the maven-embedder-refactor branch into the trunk



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@392327 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.monitor.event.DefaultEventDispatcher;
+import org.apache.maven.monitor.event.DefaultEventMonitor;
+import org.apache.maven.plugin.Mojo;
+import org.apache.maven.profiles.DefaultProfileManager;
+import org.codehaus.plexus.logging.Logger;
+import org.codehaus.plexus.logging.LoggerManager;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
- * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
+ * @author jason van zyl
+ * @todo EventDispatcher should be a component as it is internal to maven.
-    implements Maven, Contextualizable
+    implements Maven, Contextualizable, Initializable
+    protected WagonManager wagonManager;
+
+    protected LoggerManager loggerManager;
+
+    protected MavenTools mavenTools;
+
-        EventDispatcher dispatcher = request.getEventDispatcher();
+        request.setLocalRepository( mavenTools.createLocalRepository( request.getLocalRepositoryPath() ) );
+
+        Logger logger = loggerManager.getLoggerForComponent( Mojo.ROLE );
+
+        if ( request.isDefaultEventMonitorActive() )
+        {
+            request.addEventMonitor( new DefaultEventMonitor( logger ) );
+        }
+
+        loggerManager.setThreshold( request.getLoggingLevel() );
+
+        request.setStartTime( new Date() );
+
+        wagonManager.setInteractive( request.isInteractive() );
+
+        wagonManager.setDownloadMonitor( request.getTransferListener() );
+
+        wagonManager.setOnline( !request.getSettings().isOffline() );
+
+        EventDispatcher dispatcher = new DefaultEventDispatcher( request.getEventMonitors() );
+
-        ProfileManager globalProfileManager = request.getGlobalProfileManager();
+        ProfileManager globalProfileManager = new DefaultProfileManager( container );
+        globalProfileManager.explicitlyActivate( request.getActiveProfiles() );
+
+        globalProfileManager.explicitlyDeactivate( request.getInactiveProfiles() );
+
-        MavenSession session = createSession( request, rm );
+        MavenSession session = createSession( request, rm, dispatcher );
-            projects = collectProjects( files, request.getLocalRepository(), request.isRecursive(),
-                                        request.getSettings(), globalProfileManager, !request.isReactorActive() );
+            projects = collectProjects( files,
+                                        request.getLocalRepository(),
+                                        request.isRecursive(),
+                                        request.getSettings(),
+                                        globalProfileManager,
+                                        !request.isReactorActive() );
-    protected MavenSession createSession( MavenExecutionRequest request, ReactorManager rpm )
+    protected MavenSession createSession( MavenExecutionRequest request, ReactorManager rpm, EventDispatcher dispatcher )
-        return new MavenSession( container, request.getSettings(), request.getLocalRepository(),
-                                 request.getEventDispatcher(), rpm, request.getGoals(), request.getBaseDirectory(),
-                                 request.getExecutionProperties(), request.getStartTime() );
+        return new MavenSession( container,
+                                 request.getSettings(),
+                                 request.getLocalRepository(),
+                                 dispatcher,
+                                 rpm, request.getGoals(),
+                                 request.getBaseDirectory(),
+                                 request.getProperties(),
+                                 request.getStartTime() );
+    public void initialize()
+        throws InitializationException
+    {
+        try
+        {
+            loggerManager = (LoggerManager) container.lookup( LoggerManager.ROLE );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new InitializationException( "Cannot lookup logger manager.", e );
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS31 INS65 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS43 INS8 UPD66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS43 INS42 INS42 INS54 INS32 INS43 INS59 INS32 INS8 INS32 INS32 INS32 INS32 INS32 MOV43 INS59 INS32 INS32 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS38 INS14 MOV42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS43 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS11 INS42 INS14 INS43 INS42 INS42 INS42 INS43 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32