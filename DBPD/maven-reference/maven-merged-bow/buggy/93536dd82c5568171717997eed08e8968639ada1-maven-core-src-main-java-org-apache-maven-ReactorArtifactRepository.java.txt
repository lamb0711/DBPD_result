o Fixed version resolution from reactor to match resolvable artifacts

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@951547 13f79535-47bb-0310-9956-ffa450edef68

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
-
-    private Map<String, MavenProject> reactorProjects;
-    private Map<String, List<String>> availableVersions;
+    private Map<String, MavenProject> projectsByGAV;
+
+    private Map<String, List<MavenProject>> projectsByGA;
-        this.reactorProjects = reactorProjects;
+        projectsByGAV = reactorProjects;
-        availableVersions = new HashMap<String, List<String>>( reactorProjects.size() * 2 );
+        projectsByGA = new HashMap<String, List<MavenProject>>( reactorProjects.size() * 2 );
-            List<String> versions = availableVersions.get( key );
+            List<MavenProject> projects = projectsByGA.get( key );
-            if ( versions == null )
+            if ( projects == null )
-                versions = new ArrayList<String>( 1 );
-                availableVersions.put( key, versions );
+                projects = new ArrayList<MavenProject>( 1 );
+                projectsByGA.put( key, projects );
-            versions.add( project.getVersion() );
+            projects.add( project );
-        MavenProject project = reactorProjects.get( projectKey );
+        MavenProject project = projectsByGAV.get( projectKey );
-            if ( "pom".equals( artifact.getType() ) )
+            File file = find( project, artifact );
+            if ( file != null )
-                resolve( artifact, project.getFile() );
-            }
-            else
-            {
-                //TODO Need to look for plugins
-
-                Artifact projectArtifact = findMatchingArtifact( project, artifact );
-
-                if ( hasArtifactFileFromPackagePhase( projectArtifact ) )
-                {
-
-                    resolve( artifact, projectArtifact.getFile() );
-                }
-                else
-                {
-                    if ( !project.hasCompletedPhase( "package" ) )
-                    {
-                        if ( isTestArtifact( artifact ) )
-                        {
-                            if ( project.hasCompletedPhase( "test-compile" ) )
-                            {
-                                resolve( artifact, new File( project.getBuild().getTestOutputDirectory() ) );
-                            }
-                        }
-                        else
-                        {
-                            if ( project.hasCompletedPhase( "compile" ) )
-                            {
-                                resolve( artifact, new File( project.getBuild().getOutputDirectory() ) );
-                            }
-                        }
-                    }
-                    // The fall-through indicates that the artifact cannot be found;
-                    // for instance if package produced nothing or classifier problems.
-                }
+                resolve( artifact, file );
+    private File find( MavenProject project, Artifact artifact )
+    {
+        if ( "pom".equals( artifact.getType() ) )
+        {
+            return project.getFile();
+        }
+
+        Artifact projectArtifact = findMatchingArtifact( project, artifact );
+
+        if ( hasArtifactFileFromPackagePhase( projectArtifact ) )
+        {
+            return projectArtifact.getFile();
+        }
+        else if ( !project.hasCompletedPhase( "package" ) )
+        {
+            if ( isTestArtifact( artifact ) )
+            {
+                if ( project.hasCompletedPhase( "test-compile" ) )
+                {
+                    return new File( project.getBuild().getTestOutputDirectory() );
+                }
+            }
+            else
+            {
+                if ( project.hasCompletedPhase( "compile" ) )
+                {
+                    return new File( project.getBuild().getOutputDirectory() );
+                }
+            }
+        }
+
+        // The fall-through indicates that the artifact cannot be found;
+        // for instance if package produced nothing or classifier problems.
+        return null;
+    }
+
-        List<String> versions = availableVersions.get( key );
+        List<MavenProject> projects = projectsByGA.get( key );
+        if ( projects == null || projects.isEmpty() )
+        {
+            return Collections.emptyList();
+        }
-        return ( versions != null ) ? Collections.unmodifiableList( versions ) : Collections.<String> emptyList();
+        List<String> versions = new ArrayList<String>();
+
+        for ( MavenProject project : projects )
+        {
+            if ( find( project, artifact ) != null )
+            {
+                versions.add( project.getVersion() );
+            }
+        }
+
+        return Collections.unmodifiableList( versions );
-        return eq( reactorProjects.keySet(), other.reactorProjects.keySet() );
+        return eq( projectsByGAV.keySet(), other.projectsByGAV.keySet() );

INS31 UPD74 MOV78 INS83 MOV43 INS42 INS44 INS8 UPD83 INS43 INS44 MOV8 UPD42 UPD74 UPD42 INS43 INS42 MOV60 INS60 INS25 MOV41 INS42 INS43 INS42 INS25 MOV60 INS25 INS41 INS25 INS60 INS70 INS41 UPD43 INS42 MOV43 INS59 MOV27 INS8 INS42 MOV32 MOV8 MOV32 MOV8 MOV25 INS33 INS74 INS27 INS8 MOV74 INS59 INS44 INS42 INS8 MOV32 UPD42 INS42 UPD42 INS21 INS42 INS32 INS60 INS25 INS41 INS41 INS43 INS43 UPD42 INS27 INS32 INS41 INS42 MOV14 INS43 INS42 INS25 UPD74 UPD74 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 MOV32 MOV32 INS42 INS42 UPD42 UPD42 MOV42 MOV33 INS42 INS42 INS32 UPD42 MOV42 INS27 INS8 UPD42 UPD40 UPD74 UPD43 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 MOV42 INS42 INS32 INS33 MOV21 UPD43 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS14 UPD42 UPD42 INS42 INS42 INS42 INS74 INS34 INS41 INS41 INS43 INS43 MOV14 MOV14 INS42 INS42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL34 DEL27 DEL36 DEL43 DEL42 DEL32 DEL16 DEL41