MNG-4041: maven core returns stale project state during extended use. this is a patch which provides intelligent caching and yields a very substantial performance improvement.
Submitted by: Igor Fedorenko



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@782014 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.BufferedInputStream;
+import java.io.BufferedReader;
+import java.io.FileInputStream;
-import java.io.Reader;
+import java.io.InputStream;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.HashSet;
+import java.util.jar.JarFile;
+import java.util.zip.ZipEntry;
+import org.codehaus.plexus.MutablePlexusContainer;
+import org.codehaus.plexus.classworlds.ClassWorld;
+import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;
-import org.codehaus.plexus.component.discovery.ComponentDiscoverer;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryEvent;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryListener;
-import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
-import org.codehaus.plexus.context.Context;
-import org.codehaus.plexus.context.ContextMapAdapter;
+import org.codehaus.plexus.util.xml.XmlStreamReader;
-    implements PluginManager, ComponentDiscoverer, ComponentDiscoveryListener
+    implements PluginManager
-    @Requirement
+    @Requirement(role=PlexusContainer.class)
-    private PluginClassLoaderCache pluginClassLoaderCache;
-    
-    private Map<String, PluginDescriptor> pluginDescriptors;
-
-    public DefaultPluginManager()
-    {
-        pluginDescriptors = new HashMap<String, PluginDescriptor>();
-    }
-
-    private String pluginKey( Plugin plugin )
-    {
-        return plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + plugin.getVersion();
-    }
+    private PluginCache pluginCache;
-    public PluginDescriptor loadPlugin( Plugin plugin, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    public synchronized PluginDescriptor loadPlugin( Plugin plugin, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
+//        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
-        if ( pluginDescriptor != null && pluginDescriptor.getClassRealm() != null )
+//        if ( pluginDescriptor != null && pluginDescriptor.getClassRealm() != null )
+//        {
+//            return pluginDescriptor;
+//        }
+
+        PluginDescriptor pluginDescriptor = pluginCache.getPluginDescriptor( plugin, localRepository, remoteRepositories );
+        
+        if ( pluginDescriptor != null )
-        }        
-        
+        }
+
+
-            .setRemoteRepostories( remoteRepositories );
+            .setRemoteRepostories( remoteRepositories )
+            .setResolveTransitively( false );
-        
-        ClassRealm pluginRealm = pluginClassLoaderCache.get( constructPluginKey( plugin ) );
-        
-        if ( pluginRealm != null )            
-        {
-            return getPluginDescriptor( plugin );            
-        }            
-            
-        pluginRealm = container.createChildRealm( pluginKey( plugin ) );
-
-        Set<Artifact> pluginArtifacts;
-        
-            pluginArtifacts = getPluginArtifacts( pluginArtifact, plugin, localRepository, remoteRepositories );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            throw new PluginNotFoundException( plugin, e );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new PluginResolutionException( plugin, e );
-        }
+            if ( pluginArtifact.getFile().isFile() )
+            {
+                JarFile pluginJar = new JarFile( pluginArtifact.getFile() );
+                try
+                {
+                    ZipEntry pluginDescriptorEntry = pluginJar.getEntry( getComponentDescriptorLocation() );
+    
+                    if ( pluginDescriptorEntry != null )
+                    {
+                        InputStream is = pluginJar.getInputStream( pluginDescriptorEntry );
+    
+                        pluginDescriptor = parsebuildPluginDescriptor( is );
+                    }
+                }
+                finally
+                {
+                    pluginJar.close();
+                }
+            }
+            else
+            {
+                File pluginXml = new File( pluginArtifact.getFile(), getComponentDescriptorLocation() );
-        for ( Artifact a : pluginArtifacts )
-        {
-            try
-            {
-                pluginRealm.addURL( a.getFile().toURI().toURL() );
+                if ( pluginXml.canRead() )
+                {
+                    InputStream is = new BufferedInputStream( new FileInputStream( pluginXml ) );
+                    try
+                    {
+                        pluginDescriptor = parsebuildPluginDescriptor( is );
+                    }
+                    finally
+                    {
+                        IOUtil.close( is );
+                    }
+                }
-            catch ( MalformedURLException e )
+
+            String pluginKey = constructPluginKey( plugin );
+
+            if ( pluginDescriptor == null )
-                // Not going to happen
+                throw new InvalidPluginDescriptorException( "Invalid or missing Plugin Descriptor for " + pluginKey );
+
+            // Check the internal consistent of a plugin descriptor when it is discovered. Most of the time the plugin descriptor is generated
+            // by the maven-plugin-plugin, but if you happened to have created one by hand and it's incorrect this validator will report
+            // the problem to the user.
+            //
+            MavenPluginValidator validator = new MavenPluginValidator( pluginArtifact );
+
+            validator.validate( pluginDescriptor );
+
+            if ( validator.hasErrors() )                                                                                                                        
+            {          
+                throw new InvalidPluginDescriptorException( "Invalid Plugin Descriptor for " + pluginKey, validator.getErrors() );
+            }        
+
+            pluginDescriptor.setPlugin( plugin );
+            pluginDescriptor.setPluginArtifact( pluginArtifact );
+
+            pluginCache.putPluginDescriptor( plugin, localRepository, remoteRepositories, pluginDescriptor );
+
+            return pluginDescriptor;
+        
-        
-        String pluginKey = constructPluginKey( plugin );
-        
-        // Check the internal consistent of a plugin descriptor when it is discovered. Most of the time the plugin descriptor is generated
-        // by the maven-plugin-plugin, but if you happened to have created one by hand and it's incorrect this validator will report
-        // the problem to the user.
-        //
-        MavenPluginValidator validator = new MavenPluginValidator( pluginArtifact );
-        
-        try
+        catch ( IOException e )
-            container.discoverComponents( pluginRealm, validator );
+            throw new PluginDescriptorParsingException( plugin, e );
-        catch ( CycleDetectedInComponentGraphException e )
-        {
-            throw new CycleDetectedInPluginGraphException( plugin, e );
-        }
+    }
-        if ( validator.hasErrors() )                                                                                                                        
-        {          
-            throw new InvalidPluginDescriptorException( "Invalid Plugin Descriptor for " + pluginKey, validator.getErrors() );
-        }        
-        
-        pluginClassLoaderCache.put( pluginKey, pluginRealm );
-        
-        pluginDescriptor = getPluginDescriptor( plugin );
-        pluginDescriptor.setArtifacts( new ArrayList<Artifact>( pluginArtifacts ) );
-        
+    private PluginDescriptor parsebuildPluginDescriptor( InputStream is )
+        throws IOException, PlexusConfigurationException
+    {
+        PluginDescriptor pluginDescriptor;
+        XmlStreamReader reader = ReaderFactory.newXmlReader( is );
+
+        InterpolationFilterReader interpolationFilterReader = new InterpolationFilterReader( new BufferedReader( reader ), container.getContext().getContextData() );
+
+        pluginDescriptor = builder.build( interpolationFilterReader );
-    Set<Artifact> getPluginArtifacts( Artifact pluginArtifact, Plugin pluginAsSpecifiedInPom, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    List<Artifact> getPluginArtifacts( Artifact pluginArtifact, Plugin pluginAsSpecifiedInPom, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        return result.getArtifacts();
+        return new ArrayList<Artifact>( result.getArtifacts() );
-        throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginExecutionException
-    {        
+        throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginManagerException
+    {
-        // by this time, the pluginDescriptor has had the correct realm setup from getConfiguredMojo(..)
-        ClassRealm pluginRealm = pluginClassLoaderCache.get( constructPluginKey( mojoDescriptor.getPluginDescriptor() ) );            
+        ClassRealm pluginRealm = getPluginRealm( session, mojoDescriptor.getPluginDescriptor() );            
+    /**
+     * TODO pluginDescriptor classRealm and artifacts are set as a side effect of this
+     *      call, which is not nice.
+     */
+    public synchronized ClassRealm getPluginRealm( MavenSession session, PluginDescriptor pluginDescriptor ) throws PluginManagerException
+    {
+        ClassRealm pluginRealm = pluginDescriptor.getClassRealm();
+        if ( pluginRealm != null )
+        {
+            return pluginRealm;
+        }
+
+        Plugin plugin = pluginDescriptor.getPlugin();
+        ArtifactRepository localRepository = session.getLocalRepository();
+        List<ArtifactRepository> remoteRepositories = session.getCurrentProject().getPluginArtifactRepositories();
+
+        PluginCache.CacheRecord cacheRecord = pluginCache.get( plugin, localRepository, remoteRepositories );
+
+        if ( cacheRecord != null )
+        {
+            pluginDescriptor.setClassRealm( cacheRecord.realm );
+            pluginDescriptor.setArtifacts( new ArrayList<Artifact>( cacheRecord.artifacts ) );
+
+            return pluginRealm;
+        }
+
+        pluginRealm = createPluginRealm( plugin );
+
+        Artifact pluginArtifact = pluginDescriptor.getPluginArtifact();
+
+        List<Artifact> pluginArtifacts;
+
+        try
+        {
+            pluginArtifacts = getPluginArtifacts( pluginArtifact, plugin, localRepository, remoteRepositories );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            throw new IllegalStateException( e ); // XXX
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new IllegalStateException( e ); // XXX
+        }
+
+        for ( Artifact a : pluginArtifacts )
+        {
+            try
+            {
+                pluginRealm.addURL( a.getFile().toURI().toURL() );
+            }
+            catch ( MalformedURLException e )
+            {
+                // Not going to happen
+            }
+        }
+
+        pluginDescriptor.setClassRealm( pluginRealm );
+        pluginDescriptor.setArtifacts( pluginArtifacts );
+        
+        try
+        {
+            for ( ComponentDescriptor componentDescriptor : pluginDescriptor.getComponents() )
+            {
+                componentDescriptor.setRealm( pluginRealm );
+                container.addComponentDescriptor( componentDescriptor );
+            }
+
+            container.discoverComponents( pluginRealm );
+        }
+        catch ( PlexusConfigurationException e )
+        {
+            throw new PluginManagerException( plugin, e.getMessage(), e );
+        }
+        catch ( CycleDetectedInComponentGraphException e )
+        {
+            throw new PluginManagerException( plugin, e.getMessage(), e );
+        }
+
+        pluginCache.put( plugin, localRepository, remoteRepositories, pluginRealm, pluginArtifacts );
+        
+        return pluginRealm;
+    }
+
+    /**
+     * Creates ClassRealm with unique id for the given plugin
+     */
+    private ClassRealm createPluginRealm( Plugin plugin ) 
+        throws PluginManagerException
+    {
+        ClassWorld world = ((MutablePlexusContainer) container).getClassWorld();
+
+        String baseRealmId = constructPluginKey( plugin );
+        String realmId = baseRealmId;
+
+        synchronized ( world )
+        {
+            for ( int i = 0; i < 100; i++ )
+            {
+                try
+                {
+                    ClassRealm pluginRealm = world.newRealm( realmId );
+                    pluginRealm.setParentRealm( container.getContainerRealm() );
+                    return pluginRealm;
+                }
+                catch ( DuplicateRealmException e )
+                {
+                    realmId = baseRealmId + "-" + i;
+                }
+            }
+        }
+
+        throw new PluginManagerException( plugin, "Could not create ClassRealm", (Throwable) null );
+    }
+
-        container.setLookupRealm( pluginRealm );
+        ClassRealm oldLookupRealm = container.setLookupRealm( pluginRealm );
-
-        Mojo mojo;
+        container.setLookupRealm( pluginRealm );
-            mojo = container.lookup( Mojo.class, mojoDescriptor.getRoleHint() );
-        }
-        catch ( ComponentLookupException e )
-        {
-            throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to find the mojo '" + mojoDescriptor.getRoleHint() + "' in the plugin '" + pluginDescriptor.getPluginLookupKey()
-                + "'", e );
-        }
-
-        if ( mojo instanceof ContextEnabled )
-        {
-            //TODO: find somewhere better to put the plugin context.
-            Map<String, Object> pluginContext = null;
-
-            if ( pluginContext != null )
+            Mojo mojo;
+    
+            try
-                pluginContext.put( "project", project );
-
-                pluginContext.put( "pluginDescriptor", pluginDescriptor );
-
-                ( (ContextEnabled) mojo ).setPluginContext( pluginContext );
+                mojo = container.lookup( Mojo.class, mojoDescriptor.getRoleHint() );
+            catch ( ComponentLookupException e )
+            {
+                throw new PluginContainerException( mojoDescriptor, pluginRealm, "Unable to find the mojo '" + mojoDescriptor.getRoleHint() + "' in the plugin '" + pluginDescriptor.getPluginLookupKey()
+                    + "'", e );
+            }
+    
+            if ( mojo instanceof ContextEnabled )
+            {
+                //TODO: find somewhere better to put the plugin context.
+                Map<String, Object> pluginContext = null;
+    
+                if ( pluginContext != null )
+                {
+                    pluginContext.put( "project", project );
+    
+                    pluginContext.put( "pluginDescriptor", pluginDescriptor );
+    
+                    ( (ContextEnabled) mojo ).setPluginContext( pluginContext );
+                }
+            }
+    
+            mojo.setLog( new DefaultLog( logger ) );
+    
+            Xpp3Dom dom = mojoExecution.getConfiguration();
+    
+            PlexusConfiguration pomConfiguration;
+    
+            if ( dom == null )
+            {
+                pomConfiguration = new XmlPlexusConfiguration( "configuration" );
+            }
+            else
+            {
+                pomConfiguration = new XmlPlexusConfiguration( dom );
+            }
+    
+            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution );
+    
+            populatePluginFields( mojo, mojoDescriptor, pluginRealm, pomConfiguration, expressionEvaluator );
+
+            return mojo;
-
-        mojo.setLog( new DefaultLog( logger ) );
-
-        Xpp3Dom dom = mojoExecution.getConfiguration();
-
-        PlexusConfiguration pomConfiguration;
-
-        if ( dom == null )
+        finally
-            pomConfiguration = new XmlPlexusConfiguration( "configuration" );
-        }
-        else
-        {
-            pomConfiguration = new XmlPlexusConfiguration( dom );
+            Thread.currentThread().setContextClassLoader( oldClassLoader );
+            container.setLookupRealm( oldLookupRealm );
-        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution );
-
-        populatePluginFields( mojo, mojoDescriptor, pluginRealm, pomConfiguration, expressionEvaluator );
-
-        Thread.currentThread().setContextClassLoader( oldClassLoader );
-
-        return mojo;
-    public ComponentSetDescriptor createComponentDescriptors( Reader componentDescriptorConfiguration, String source )
-        throws PlexusConfigurationException
-    {
-        return builder.build( componentDescriptorConfiguration, source );
-    }
-
-    public List<ComponentSetDescriptor> findComponents( Context context, ClassRealm realm )
-        throws PlexusConfigurationException
-    {
-        List<ComponentSetDescriptor> componentSetDescriptors = new ArrayList<ComponentSetDescriptor>();
-
-        Enumeration<URL> resources;
-        try
-        {
-            // We don't always want to scan parent realms. For plexus
-            // testcase, most components are in the root classloader so that needs to be scanned,
-            // but for child realms, we don't.
-            if ( realm.getParentRealm() != null )
-            {
-                resources = realm.findRealmResources( getComponentDescriptorLocation() );
-            }
-            else
-            {
-                resources = realm.findResources( getComponentDescriptorLocation() );
-            }
-        }
-        catch ( IOException e )
-        {
-            throw new PlexusConfigurationException( "Unable to retrieve resources for: " + getComponentDescriptorLocation() + " in class realm: " + realm.getId() );
-        }
-
-        for ( URL url : Collections.list( resources ) )
-        {
-            Reader reader = null;
-
-            try
-            {
-                URLConnection conn = url.openConnection();
-
-                conn.setUseCaches( false );
-
-                conn.connect();
-
-                reader = ReaderFactory.newXmlReader( conn.getInputStream() );
-
-                InterpolationFilterReader interpolationFilterReader = new InterpolationFilterReader( reader, new ContextMapAdapter( context ) );
-
-                ComponentSetDescriptor componentSetDescriptor = createComponentDescriptors( interpolationFilterReader, url.toString() );
-
-                if ( componentSetDescriptor.getComponents() != null )
-                {
-                    for ( ComponentDescriptor<?> cd : componentSetDescriptor.getComponents() )
-                    {
-                        cd.setComponentSetDescriptor( componentSetDescriptor );
-                        cd.setRealm( realm );
-                    }
-                }
-
-                componentSetDescriptors.add( componentSetDescriptor );
-            }
-            catch ( IOException ex )
-            {
-                throw new PlexusConfigurationException( "Error reading configuration " + url, ex );
-            }
-            finally
-            {
-                IOUtil.close( reader );
-            }
-        }
-
-        return componentSetDescriptors;
-    }
-
-    private Set pluginsInProcess = new HashSet();
-
-    public void componentDiscovered( ComponentDiscoveryEvent event )
-    {
-        ComponentSetDescriptor componentSetDescriptor = event.getComponentSetDescriptor();
-
-        if ( componentSetDescriptor instanceof PluginDescriptor )
-        {
-            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;
-
-            MavenPluginValidator validator = (MavenPluginValidator) event.getData();
-            
-            validator.validate( pluginDescriptor );
-            
-            if ( validator.hasErrors() )
-            {
-                return;
-            }
-            
-            String key = constructPluginKey( pluginDescriptor );
-
-            if ( !pluginsInProcess.contains( key ) )
-            {
-                pluginsInProcess.add( key );
-
-                pluginDescriptors.put( key, pluginDescriptor );
-            }
-        }
-    }
-
-    public PluginDescriptor getPluginDescriptor( Plugin plugin )
-    {
-        return pluginDescriptors.get( constructPluginKey( plugin ) );
-    }
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS77 MOV83 MOV43 MOV59 UPD43 INS83 INS83 MOV43 INS42 INS44 MOV43 MOV43 INS8 UPD74 UPD43 INS29 INS83 INS43 UPD42 INS43 INS8 INS29 INS83 INS43 INS42 MOV44 INS43 INS8 MOV21 INS42 INS80 UPD42 UPD42 INS54 INS43 INS42 INS60 INS60 INS60 INS21 INS41 UPD43 UPD42 INS65 UPD42 MOV42 UPD43 UPD42 MOV43 INS42 UPD42 MOV42 MOV60 MOV25 INS60 INS60 MOV60 MOV60 INS25 MOV21 INS60 MOV60 MOV54 MOV70 INS21 INS21 INS54 MOV21 MOV41 INS65 UPD42 MOV42 UPD42 MOV42 MOV60 MOV60 MOV60 INS51 INS53 INS60 INS54 INS42 INS57 MOV27 INS8 INS12 MOV12 UPD42 MOV42 MOV43 INS59 INS43 INS59 MOV43 INS59 INS7 INS42 UPD42 MOV14 INS66 INS66 UPD42 MOV43 MOV27 INS43 INS59 INS43 INS59 UPD74 MOV74 UPD43 INS27 INS8 INS43 INS59 UPD74 INS32 INS32 INS8 MOV12 INS12 UPD42 INS66 UPD43 MOV43 MOV43 INS42 INS8 INS14 MOV43 INS59 INS8 INS8 INS43 INS32 INS25 MOV60 INS25 MOV60 MOV21 MOV25 MOV21 MOV21 INS21 MOV41 MOV44 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS14 INS42 INS32 MOV32 MOV32 UPD42 MOV32 INS41 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD43 UPD42 INS32 INS40 UPD42 INS42 INS33 MOV21 MOV21 INS41 UPD42 UPD42 MOV42 INS42 INS32 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV70 MOV21 MOV44 INS8 UPD42 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 MOV32 UPD42 INS42 INS24 INS43 INS42 INS45 INS11 INS42 INS32 MOV60 MOV54 MOV25 MOV21 MOV60 MOV60 MOV25 MOV60 MOV21 MOV41 MOV21 INS21 UPD42 MOV42 INS42 INS42 INS42 MOV32 INS42 INS9 INS32 INS8 INS8 INS27 INS8 INS32 INS32 INS53 INS42 INS42 INS42 MOV43 INS14 INS32 MOV42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 MOV43 UPD42 INS53 INS36 UPD42 INS58 INS27 INS37 INS8 UPD42 MOV42 INS43 INS33 INS42 INS42 INS42 INS32 INS32 INS42 INS60 INS54 INS60 INS25 INS42 INS33 MOV53 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS40 UPD42 INS42 INS14 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 INS14 INS11 INS39 INS59 INS42 INS34 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS8 INS43 INS59 INS32 INS8 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS74 INS40 UPD43 UPD43 UPD43 INS42 INS32 INS42 INS43 INS42 INS32 INS42 INS43 INS42 INS42 INS34 INS8 INS12 INS42 INS42 INS14 MOV60 MOV25 INS21 INS42 INS42 INS14 INS42 INS42 INS60 INS54 UPD43 INS27 INS42 INS43 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS41 INS44 INS8 INS43 INS32 INS43 INS27 INS32 INS43 INS32 MOV32 INS43 INS59 INS8 MOV8 UPD42 INS45 INS42 INS42 INS42 INS43 MOV59 INS32 INS42 INS43 INS42 MOV21 INS42 INS42 INS42 INS42 UPD42 INS42 INS33 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 MOV21 INS42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS7 UPD42 UPD42 INS43 INS59 INS7 INS43 INS14 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 MOV42 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS42 UPD42 INS32 UPD42 UPD42 UPD42 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL43 DEL42 DEL78 DEL23 DEL83 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL45 DEL32 DEL45 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL33 DEL27 DEL27 DEL42 DEL32 DEL41 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL33 DEL42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL76 DEL74 DEL45 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL8 DEL45 DEL42 DEL32 DEL45 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL32 DEL33 DEL27 DEL8 DEL25 DEL8 DEL8 DEL54 DEL8 DEL70 DEL8 DEL42 DEL42 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL62 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL60 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31