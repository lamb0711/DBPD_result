Replaced old build-plan mess with a single recursive plan instance that tracks direct invocation forks as well as lifecycle forks. All unit tests run, and I'm running integration tests now, to see if this fixes it0013.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@541938 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.lifecycle.model.Phase;
-import java.util.ArrayList;
+import java.util.Stack;
- * Responsible for creating a plan of execution for a given project and list of tasks. This build plan
- * consists of MojoBinding instances that carry all the information necessary to execute a mojo,
- * including configuration from the POM and other sources. NOTE: the build plan may be constructed
- * of a main lifecycle binding-set, plus any number of lifecycle modifiers and direct-invocation
- * modifiers, to handle cases of forked execution.
+ * Responsible for creating a plan of execution for a given project and list of tasks. This build plan consists of
+ * MojoBinding instances that carry all the information necessary to execute a mojo, including configuration from the
+ * POM and other sources. NOTE: the build plan may be constructed of a main lifecycle binding-set, plus any number of
+ * lifecycle modifiers and direct-invocation modifiers, to handle cases of forked execution.
- *
+ * 
-    public BuildPlan constructBuildPlan( List tasks, MavenProject project )
+    public BuildPlan constructBuildPlan( final List tasks, final MavenProject project )
-        LifecycleBindings merged = LifecycleUtils.mergeBindings( packagingBindings, projectBindings, defaultBindings, true, false );
+        BuildPlan plan = new BuildPlan( packagingBindings, projectBindings, defaultBindings, tasks );
-        // foreach task, find the binding list from the merged lifecycle-bindings.
-        // if the binding list is a super-set of a previous task, forget the previous task/binding
-        //     list, and use the new one.
-        // if the binding list is null, treat it like a one-off mojo invocation, and parse/validate
-        //     that it can be called as such.
-        // as binding lists accumulate, push them onto an aggregated "plan" listing...
-        BuildPlan plan = new LifecycleBuildPlan( tasks, merged );
+        initializeDirectInvocations( plan, project );
-        addForkedLifecycleModifiers( plan, merged, project, tasks );
-        addReportingLifecycleModifiers( plan, merged, project, tasks );
+        addForkedLifecycleModifiers( plan, project );
+        addReportingLifecycleModifiers( plan, project );
-    public void enableLogging( Logger logger )
+    private void initializeDirectInvocations( final BuildPlan plan, final MavenProject project )
+        throws LifecycleSpecificationException, LifecycleLoaderException
+    {
+        List tasks = plan.getTasks();
+        for ( Iterator it = tasks.iterator(); it.hasNext(); )
+        {
+            String task = (String) it.next();
+
+            if ( !LifecycleUtils.isValidPhaseName( task ) )
+            {
+                MojoBinding binding = mojoBindingFactory.parseMojoBinding( task, project, true );
+                plan.addDirectInvocationBinding( task, binding );
+            }
+        }
+    }
+
+    public void enableLogging( final Logger logger )
-     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and
-     * orchestrates the process of injecting any modifiers that are necessary to accommodate forked
-     * execution.
+     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and orchestrates the
+     * process of injecting any modifiers that are necessary to accommodate forked execution.
-    private void addForkedLifecycleModifiers( ModifiablePlanElement planElement, LifecycleBindings lifecycleBindings,
-                                              MavenProject project, List tasks )
+    private void addForkedLifecycleModifiers( final BuildPlan plan, final MavenProject project )
-        List planBindings = lifecycleBindingManager.assembleMojoBindingList( tasks, lifecycleBindings, project );
+        List planBindings = plan.renderExecutionPlan( new Stack() );
+        plan.resetExecutionProgress();
-            findForkModifiers( mojoBinding, planElement, lifecycleBindings, project );
+            findForkModifiers( mojoBinding, plan, project );
-    private void findForkModifiers( MojoBinding mojoBinding, ModifiablePlanElement planElement,
-                                    LifecycleBindings lifecycleBindings, MavenProject project )
+    private void findForkModifiers( final MojoBinding mojoBinding, final BuildPlan plan, final MavenProject project )
-        PluginDescriptor pluginDescriptor;
+        PluginDescriptor pluginDescriptor = null;
-            throw new LifecyclePlannerException( e.getMessage(), e );
+            String message =
+                "Failed to load plugin: " + MojoBindingUtils.createPluginKey( mojoBinding )
+                                + ". Adding to late-bound plugins list.\nReason: " + e.getMessage();
+
+            if ( logger.isDebugEnabled() )
+            {
+                logger.debug( message, e );
+            }
+            else
+            {
+                logger.warn( message );
+            }
+
+            plan.addLateBoundMojo( mojoBinding );
+        }
+
+        if ( pluginDescriptor == null )
+        {
+            return;
-                + pluginDescriptor.getId() + "." );
+                                                 + pluginDescriptor.getId() + "." );
-        findForkModifiers( mojoBinding, pluginDescriptor, planElement, lifecycleBindings, project, new LinkedList() );
+        findForkModifiers( mojoBinding, pluginDescriptor, plan, project );
-     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and
-     * orchestrates the process of injecting any modifiers that are necessary to accommodate mojos
-     * that require access to the project's configured reports.
+     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and orchestrates the
+     * process of injecting any modifiers that are necessary to accommodate mojos that require access to the project's
+     * configured reports.
-    private void addReportingLifecycleModifiers( ModifiablePlanElement planElement, LifecycleBindings lifecycleBindings,
-                                                 MavenProject project, List tasks )
+    private void addReportingLifecycleModifiers( final BuildPlan plan, final MavenProject project )
-        List planBindings = lifecycleBindingManager.assembleMojoBindingList( tasks, lifecycleBindings, project );
+        List planBindings = plan.renderExecutionPlan( new Stack() );
+        plan.resetExecutionProgress();
-            PluginDescriptor pluginDescriptor;
+            PluginDescriptor pluginDescriptor = null;
-                throw new LifecyclePlannerException( e.getMessage(), e );
+                String message =
+                    "Failed to load plugin: " + MojoBindingUtils.createPluginKey( mojoBinding )
+                                    + ". Adding to late-bound plugins list.\nReason: " + e.getMessage();
+
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.debug( message, e );
+                }
+                else
+                {
+                    logger.warn( message );
+                }
+
+                plan.addLateBoundMojo( mojoBinding );
+            }
+
+            if ( pluginDescriptor == null )
+            {
+                continue;
-                    + pluginDescriptor.getId() + "." );
+                                                     + pluginDescriptor.getId() + "." );
-                // findForkModifiers( mojoBinding, pluginDescriptor, planElement, lifecycleBindings, 
-                //                    project, forkingBindings, tasks );
-                    
-                    PluginDescriptor pd;
+
-                        pd = pluginLoader.loadReportPlugin( mojoBinding, project );
+                        pluginLoader.loadReportPlugin( mojoBinding, project );
-                            + MojoBindingUtils.toString( reportBinding ) + ". Reason: " + e.getMessage(), e );
-                    }
-
-//                    findForkModifiers( reportBinding, planElement, lifecycleBindings, project );
-                }
-
-                Phase phase = LifecycleUtils.findPhaseForMojoBinding( mojoBinding, lifecycleBindings, true );
-
-                if ( phase == null )
-                {
-                    if ( planElement instanceof DirectInvocationOriginElement )
-                    {
-                        DirectInvocationModifier modder = new SimpleDirectInvocationModifier( mojoBinding, reportBindings );
-
-                        ( (DirectInvocationOriginElement) planElement ).addDirectInvocationModifier( modder );
-                    }
-                    else
-                    {
-                        throw new LifecyclePlannerException( "Cannot inject reports for direct invocation: "
-                            + MojoBindingUtils.toString( mojoBinding )
-                            + "; current plan element does not accept direct-invocation modifiers." );
+                                                             + MojoBindingUtils.toString( reportBinding )
+                                                             + ". Reason: " + e.getMessage(), e );
-                else
-                {
-                    BuildPlanModifier modder = new ReportingPlanModifier( mojoBinding, reportBindings );
-                    planElement.addModifier( modder );
-                }
+                plan.addForkedExecution( mojoBinding, reportBindings );
-     * Explores a single MojoBinding, and injects any necessary plan modifiers to accommodate any
-     * of the three types of forked execution, along with any new mojos/lifecycles that entails.
+     * Explores a single MojoBinding, and injects any necessary plan modifiers to accommodate any of the three types of
+     * forked execution, along with any new mojos/lifecycles that entails.
-    private void findForkModifiers( MojoBinding mojoBinding, PluginDescriptor pluginDescriptor,
-                                    ModifiablePlanElement planElement, LifecycleBindings mergedBindings, MavenProject project,
-                                    LinkedList forkingBindings )
+    private void findForkModifiers( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor,
+                                    final BuildPlan plan, final MavenProject project )
-        forkingBindings.addLast( mojoBinding );
+        String referencingGoal = mojoBinding.getGoal();
-        try
+        MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( referencingGoal );
+
+        if ( mojoDescriptor.getExecuteGoal() != null )
-            String referencingGoal = mojoBinding.getGoal();
-
-            MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( referencingGoal );
-
-            if ( mojoDescriptor.getExecuteGoal() != null )
-            {
-                recurseSingleMojoFork( mojoBinding, pluginDescriptor, planElement, mergedBindings, project, forkingBindings );
-            }
-            else if ( mojoDescriptor.getExecutePhase() != null )
-            {
-                recursePhaseMojoFork( mojoBinding, pluginDescriptor, planElement, mergedBindings, project, forkingBindings );
-            }
+            recurseSingleMojoFork( mojoBinding, pluginDescriptor, plan, project );
-        finally
+        else if ( mojoDescriptor.getExecutePhase() != null )
-            forkingBindings.removeLast();
+            recursePhaseMojoFork( mojoBinding, pluginDescriptor, plan, project );
-     * Handles exploration of a single-mojo forked execution for further forkings, and also performs
-     * the actual build-plan modification for that single-mojo forked execution.
-     */
-    private void modifyBuildPlanForForkedDirectInvocation( MojoBinding invokedBinding, MojoBinding invokedVia,
-                                                           PluginDescriptor pluginDescriptor, ModifiablePlanElement planElement,
-                                                           LifecycleBindings mergedBindings, MavenProject project,
-                                                           LinkedList forkingBindings )
-        throws LifecyclePlannerException, LifecycleSpecificationException, LifecycleLoaderException
-    {
-        if ( planElement instanceof DirectInvocationOriginElement )
-        {
-            List noTasks = Collections.EMPTY_LIST;
-
-            LifecycleBindings forkedBindings = new LifecycleBindings();
-            LifecycleBuildPlan forkedPlan = new LifecycleBuildPlan( noTasks, forkedBindings );
-
-            forkingBindings.addLast( invokedBinding );
-            try
-            {
-                findForkModifiers( invokedBinding, pluginDescriptor, forkedPlan, forkedBindings, project, forkingBindings );
-            }
-            finally
-            {
-                forkingBindings.removeLast();
-            }
-
-            List forkedMojos = new ArrayList();
-            forkedMojos.addAll( lifecycleBindingManager.assembleMojoBindingList( noTasks, forkedBindings, project ) );
-            forkedMojos.add( invokedBinding );
-
-            DirectInvocationModifier modifier = new ForkedDirectInvocationModifier( invokedVia, forkedMojos );
-
-            ( (DirectInvocationOriginElement) planElement ).addDirectInvocationModifier( modifier );
-        }
-        else
-        {
-            throw new LifecyclePlannerException( "Mojo: " + MojoBindingUtils.toString( invokedVia )
-                + " is not bound to the lifecycle; you cannot attach this mojo to a build-plan modifier." );
-        }
-    }
-
-    /**
-     * Handles exploration of a lifecycle-based forked execution for further forkings, and also performs
-     * the actual build-plan modification for that lifecycle-based forked execution.
-     */
-    private void modifyBuildPlanForForkedLifecycle( MojoBinding mojoBinding, PluginDescriptor pluginDescriptor,
-                                                    ModifiablePlanElement planElement, LifecycleBindings bindings,
-                                                    MavenProject project, LinkedList forkingBindings )
-        throws LifecycleSpecificationException, LifecyclePlannerException, LifecycleLoaderException
-    {
-        MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( mojoBinding.getGoal() );
-        String phase = mojoDescriptor.getExecutePhase();
-
-        List forkedPhaseBindingList = lifecycleBindingManager.assembleMojoBindingList( Collections.singletonList( phase ),
-                                                                                       bindings, project );
-
-        ModifiablePlanElement mpe;
-
-        // setup the ModifiablePlanElement, into which we'll recurse to find further modifications.
-        if ( LifecycleUtils.findPhaseForMojoBinding( mojoBinding, bindings, true ) != null )
-        {
-            mpe = new ForkPlanModifier( mojoBinding, forkedPhaseBindingList );
-        }
-        else if ( planElement instanceof BuildPlan )
-        {
-            mpe = new SubLifecycleBuildPlan( phase, bindings );
-        }
-        else
-        {
-            throw new LifecyclePlannerException( "Mojo: " + MojoBindingUtils.toString( mojoBinding )
-                + " is not bound to the lifecycle; you cannot attach this mojo to a build-plan modifier." );
-        }
-
-        // recurse, to find further modifications, using the ModifiablePlanElement from above, along
-        // with the modified task list (which doesn't contain the direct-invocation task that landed
-        // us here...
-        for ( Iterator it = forkedPhaseBindingList.iterator(); it.hasNext(); )
-        {
-            MojoBinding forkedBinding = (MojoBinding) it.next();
-
-            PluginDescriptor forkedPluginDescriptor;
-            try
-            {
-                forkedPluginDescriptor = pluginLoader.loadPlugin( forkedBinding, project );
-            }
-            catch ( PluginLoaderException e )
-            {
-                throw new LifecyclePlannerException( e.getMessage(), e );
-            }
-
-            findForkModifiers( forkedBinding, forkedPluginDescriptor, mpe, bindings, project, forkingBindings );
-        }
-
-        // now that we've discovered any deeper modifications, add the current MPE to the parent MPE
-        // in the appropriate location.
-        if ( LifecycleUtils.findPhaseForMojoBinding( mojoBinding, bindings, true ) != null )
-        {
-            planElement.addModifier( (BuildPlanModifier) mpe );
-        }
-        else if ( planElement instanceof DirectInvocationOriginElement )
-        {
-            List planMojoBindings = ( (BuildPlan) mpe ).getPlanMojoBindings( project, lifecycleBindingManager );
-
-            ForkedDirectInvocationModifier modifier = new ForkedDirectInvocationModifier( mojoBinding, planMojoBindings );
-
-            ( (DirectInvocationOriginElement) planElement ).addDirectInvocationModifier( modifier );
-        }
-    }
-
-    /**
-     * Constructs the lifecycle bindings used to execute a particular fork, given the forking mojo
-     * binding. If the mojo binding specifies a lifecycle overlay, this method will add that into
-     * the forked lifecycle, and calculate the bindings to inject based on the phase in that new
-     * lifecycle which should be executed.
+     * Constructs the lifecycle bindings used to execute a particular fork, given the forking mojo binding. If the mojo
+     * binding specifies a lifecycle overlay, this method will add that into the forked lifecycle, and calculate the
+     * bindings to inject based on the phase in that new lifecycle which should be executed.
-     * Hands off to the {@link DefaultBuildPlanner#modifyBuildPlanForForkedLifecycle(MojoBinding, PluginDescriptor, ModifiablePlanElement, LifecycleBindings, MavenProject, LinkedList, List)}
+     * Hands off to the
+     * {@link DefaultBuildPlanner#modifyBuildPlanForForkedLifecycle(MojoBinding, PluginDescriptor, ModifiablePlanElement, LifecycleBindings, MavenProject, LinkedList, List)}
-    private void recursePhaseMojoFork( MojoBinding mojoBinding, PluginDescriptor pluginDescriptor,
-                                       ModifiablePlanElement planElement, LifecycleBindings mergedBindings, MavenProject project,
-                                       LinkedList forkingBindings )
+    private void recursePhaseMojoFork( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor,
+                                       final BuildPlan plan, final MavenProject project )
-        if ( LifecycleUtils.findLifecycleBindingForPhase( phase, mergedBindings ) == null )
+        if ( !LifecycleUtils.isValidPhaseName( phase ) )
-        LifecycleBindings cloned;
-        if ( mojoDescriptor.getExecuteLifecycle() != null )
-        {
-            String executeLifecycle = mojoDescriptor.getExecuteLifecycle();
+        BuildPlan clonedPlan = plan.copy( Collections.singletonList( phase ) );
+        String executeLifecycle = mojoDescriptor.getExecuteLifecycle();
+        if ( executeLifecycle != null )
+        {
-                overlayBindings = lifecycleBindingManager.getPluginLifecycleOverlay( pluginDescriptor, executeLifecycle, project );
+                overlayBindings =
+                    lifecycleBindingManager.getPluginLifecycleOverlay( pluginDescriptor, executeLifecycle, project );
-                throw new LifecyclePlannerException( "Failed to load overlay lifecycle: " + executeLifecycle + ". Reason: "
-                    + e.getMessage(), e );
+                throw new LifecyclePlannerException( "Failed to load overlay lifecycle: " + executeLifecycle
+                                                     + ". Reason: " + e.getMessage(), e );
-            cloned = LifecycleUtils.cloneBindings( mergedBindings );
-            cloned = LifecycleUtils.mergeBindings( overlayBindings, cloned, null, true, true );
-        }
-        else
-        {
-            cloned = LifecycleUtils.cloneBindings( mergedBindings );
+            clonedPlan.addLifecycleOverlay( overlayBindings );
-        LifecycleUtils.removeMojoBindings( forkingBindings, cloned, false );
+        plan.addForkedExecution( mojoBinding, clonedPlan );
-        modifyBuildPlanForForkedLifecycle( mojoBinding, pluginDescriptor, planElement, cloned, project, forkingBindings );
+        addForkedLifecycleModifiers( clonedPlan, project );
-     * Retrieves the information necessary to create a new MojoBinding for a single-mojo forked
-     * execution, then hands off to the {@link DefaultBuildPlanner#modifyBuildPlanForForkedDirectInvocation(MojoBinding, MojoBinding, PluginDescriptor, ModifiablePlanElement, LifecycleBindings, MavenProject, LinkedList, List)}
+     * Retrieves the information necessary to create a new MojoBinding for a single-mojo forked execution, then hands
+     * off to the
+     * {@link DefaultBuildPlanner#modifyBuildPlanForForkedDirectInvocation(MojoBinding, MojoBinding, PluginDescriptor, ModifiablePlanElement, LifecycleBindings, MavenProject, LinkedList, List)}
-    private void recurseSingleMojoFork( MojoBinding mojoBinding, PluginDescriptor pluginDescriptor,
-                                        ModifiablePlanElement planElement, LifecycleBindings mergedBindings,
-                                        MavenProject project, LinkedList forkingBindings )
+    private void recurseSingleMojoFork( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor,
+                                        final BuildPlan plan, final MavenProject project )
-                + ") does not exist in plugin: " + pluginDescriptor.getId() + "." );
+                                                 + ") does not exist in plugin: " + pluginDescriptor.getId() + "." );
-        MojoBinding binding = mojoBindingFactory.createMojoBinding( pluginDescriptor.getGroupId(),
-                                                                    pluginDescriptor.getArtifactId(),
-                                                                    pluginDescriptor.getVersion(), executeGoal, project );
+        MojoBinding binding =
+            mojoBindingFactory.createMojoBinding( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId(),
+                                                  pluginDescriptor.getVersion(), executeGoal, project );
-        if ( !LifecycleUtils.isMojoBindingPresent( binding, forkingBindings, false ) )
-        {
-            modifyBuildPlanForForkedDirectInvocation( binding, mojoBinding, pluginDescriptor, planElement, mergedBindings,
-                                                      project, forkingBindings );
-        }
+        plan.addForkedExecution( mojoBinding, Collections.singletonList( binding ) );

MOV26 MOV31 UPD40 UPD42 MOV44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV8 MOV44 MOV44 MOV44 MOV44 UPD66 UPD66 UPD66 UPD66 INS83 INS83 INS21 INS83 UPD43 UPD42 INS83 INS24 INS83 INS83 UPD43 UPD42 INS83 INS43 INS42 UPD42 MOV42 INS21 INS83 UPD43 UPD42 INS83 UPD43 UPD42 INS83 INS25 INS83 UPD43 UPD42 INS83 INS21 INS83 INS83 INS83 UPD43 UPD42 INS83 MOV43 INS83 UPD42 INS83 INS83 UPD43 UPD42 INS83 MOV60 MOV60 INS83 MOV43 INS83 MOV43 INS83 MOV43 UPD42 INS83 MOV21 UPD43 INS32 UPD42 MOV43 MOV58 MOV32 INS8 UPD66 UPD66 UPD42 INS42 INS32 UPD42 UPD42 INS27 INS8 UPD66 UPD66 UPD66 UPD42 INS32 UPD66 UPD66 UPD42 MOV42 UPD66 UPD66 UPD66 UPD66 UPD42 INS38 MOV43 UPD66 UPD66 UPD42 UPD42 INS14 INS42 INS42 INS42 UPD42 MOV60 MOV25 INS42 INS42 INS33 INS42 INS33 INS41 UPD42 INS42 INS42 INS25 INS32 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 MOV43 INS42 INS42 INS42 INS42 UPD42 UPD42 INS43 INS38 MOV8 UPD42 UPD42 INS14 INS60 INS25 INS21 UPD42 UPD42 INS14 MOV43 INS27 INS8 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 INS32 INS43 UPD42 INS43 INS59 INS32 INS8 INS8 INS32 INS43 INS33 INS42 INS33 INS18 INS21 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD43 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 UPD42 MOV42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS60 INS25 INS21 INS32 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS45 INS32 INS45 MOV32 INS32 INS32 INS43 INS59 INS32 INS8 INS8 INS32 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 UPD42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS45 INS32 INS45 MOV32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 DEL40 DEL26 DEL66 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL9 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL62 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL66 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL44 DEL43 DEL42 DEL14 DEL53 DEL42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL43 DEL43 DEL42 DEL14 DEL53 DEL42 DEL59 DEL60 DEL42 DEL7 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL66 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL33 DEL9 DEL9 DEL32 DEL7 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL9 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL38 DEL8 DEL25