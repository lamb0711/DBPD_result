Resolving: MNG-773

o Separated profile injection logic from the inheritance assembly. While they look similar superficially, the
  merge-out vs. merge-in semantics make it pretty complex to put this logic together in the same methods. It's
  easier to understand what's going on if they remain similar but separate code...

o Added it0058 to test that application of a profile from settings.xml doesn't transport module lists from POM
  to POM inside of a reactor build.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@239918 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.ConfigurationContainer;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.DistributionManagement;
+import org.apache.maven.model.Plugin;
+import org.apache.maven.model.PluginContainer;
+import org.apache.maven.model.PluginExecution;
+import org.apache.maven.model.PluginManagement;
+import org.apache.maven.model.ReportPlugin;
+import org.apache.maven.model.ReportSet;
+import org.apache.maven.model.Reporting;
+import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+
+/**
+ * Inject profile data into a Model, using the profile as the dominant data source, and 
+ * persisting results of the injection in the Model.
+ * 
+ * This will look similar to the ModelUtils/DefaultModelInheritanceAssembler code, but 
+ * they are distinct. In model inheritance, the child provides data dominance AND persists
+ * the results of the merge...sort of a 'merge-out' system.
+ * 
+ * In this system, the profile is dominant, but the model receives the merge result...sort
+ * of a 'merge-in' system. The two pieces of code look like they could be combined with a
+ * set of flags to determine which direction to merge 'to', but there are enough differences
+ * in the code to justify the extra code involved with separating them, in order to simplify 
+ * the logic.
+ */
-        // [jc 11-aug-2005] NOTE: the following merge-then-override procedure is used to preserve proper dominance 
-        // (profile wins), while ensuring that any changes are pushed to the model.
-        ModelUtils.mergeModelBases( profile, model, true );
+        injectDependencies( profile, model );
+
+        injectModules( profile, model );
+
+        model.setRepositories( ModelUtils.mergeRepositoryLists( profile.getRepositories(), model.getRepositories() ) );
+        model.setPluginRepositories( ModelUtils.mergeRepositoryLists( profile.getPluginRepositories(), model
+            .getPluginRepositories() ) );
+
+        injectReporting( profile, model );
+
+        injectDependencyManagement( profile, model );
+
+        injectDistributionManagement( profile, model );
-        ModelUtils.overrideModelBase( model, profile );
-        
+        injectBuild( profile, model );
+    }
+
+    private void injectBuild( Profile profile, Model model )
+    {
+        Build modelBuild = model.getBuild();
+        // if the parent build is null, obviously we cannot inherit from it...
-            ModelUtils.mergeBuildBases( profile.getBuild(), model.getBuild() );
+            if ( modelBuild == null )
+            {
+                modelBuild = new Build();
+                model.setBuild( modelBuild );
+            }
-            Build modelBuild = model.getBuild();
+            if ( profileBuild.getDirectory() != null )
+            {
+                modelBuild.setDirectory( profileBuild.getDirectory() );
+            }
+
+            if ( profileBuild.getDefaultGoal() != null )
+            {
+                modelBuild.setDefaultGoal( profileBuild.getDefaultGoal() );
+            }
+
+            if ( profileBuild.getFinalName() != null )
+            {
+                modelBuild.setFinalName( profileBuild.getFinalName() );
+            }
+
+            List profileResources = profileBuild.getResources();
-            ModelUtils.overrideBuildBase( modelBuild, profileBuild );
+            if ( profileResources != null )
+            {
+                modelBuild.setResources( profileResources );
+            }
+
+            List profileTestResources = profileBuild.getTestResources();
+            
+            if ( profileTestResources != null )
+            {
+                modelBuild.setTestResources( profileTestResources );
+            }
+            
+            injectPlugins( profileBuild, modelBuild );
+
+            // Plugin management :: aggregate
+            PluginManagement profilePM = profileBuild.getPluginManagement();
+            PluginManagement modelPM = modelBuild.getPluginManagement();
+
+            if ( modelPM == null )
+            {
+                modelBuild.setPluginManagement( profilePM );
+            }
+            else
+            {
+                injectPlugins( profilePM, modelPM );
+            }
+    private void injectPlugins( PluginContainer profileContainer, PluginContainer modelContainer )
+    {
+        List modelPlugins = modelContainer.getPlugins();
+        
+        if ( modelPlugins == null )
+        {
+            modelContainer.setPlugins( profileContainer.getPlugins() );
+        }
+        else if ( profileContainer.getPlugins() != null )
+        {
+            Map mergedPlugins = new TreeMap();
+
+            Map profilePlugins = profileContainer.getPluginsAsMap();
+
+            for ( Iterator it = modelPlugins.iterator(); it.hasNext(); )
+            {
+                Plugin modelPlugin = (Plugin) it.next();
+
+                Plugin mergedPlugin = modelPlugin;
+
+                Plugin profilePlugin = (Plugin) profilePlugins.get( modelPlugin.getKey() );
+
+                if ( profilePlugin != null )
+                {
+                    mergedPlugin = profilePlugin;
+
+                    injectPluginDefinition( profilePlugin, modelPlugin );
+                }
+
+                mergedPlugins.put( mergedPlugin.getKey(), mergedPlugin );
+            }
+
+            for ( Iterator it = profilePlugins.values().iterator(); it.hasNext(); )
+            {
+                Plugin profilePlugin = (Plugin) it.next();
+
+                if ( !mergedPlugins.containsKey( profilePlugin.getKey() ) )
+                {
+                    mergedPlugins.put( profilePlugin.getKey(), profilePlugin );
+                }
+            }
+
+            modelContainer.setPlugins( new ArrayList( mergedPlugins.values() ) );
+
+            modelContainer.flushPluginMap();
+        }
+    }
+
+    private void injectPluginDefinition( Plugin profilePlugin, Plugin modelPlugin )
+    {
+        if ( profilePlugin == null || modelPlugin == null )
+        {
+            // nothing to do.
+            return;
+        }
+
+        if ( profilePlugin.isExtensions() )
+        {
+            modelPlugin.setExtensions( true );
+        }
+
+        if ( profilePlugin.getVersion() != null )
+        {
+            modelPlugin.setVersion( profilePlugin.getVersion() );
+        }
+
+        // merge the lists of goals that are not attached to an <execution/>
+        injectConfigurationContainer( profilePlugin, modelPlugin );
+
+        // from here to the end of the method is dealing with merging of the <executions/> section.
+        List modelExecutions = modelPlugin.getExecutions();
+
+        if ( modelExecutions == null || modelExecutions.isEmpty() )
+        {
+            modelPlugin.setExecutions( profilePlugin.getExecutions() );
+        }
+        else
+        {
+            Map executions = new TreeMap();
+
+            Map profileExecutions = profilePlugin.getExecutionsAsMap();
+
+            for ( Iterator it = modelExecutions.iterator(); it.hasNext(); )
+            {
+                PluginExecution modelExecution = (PluginExecution) it.next();
+
+                PluginExecution profileExecution = (PluginExecution) profileExecutions.get( modelExecution.getId() );
+
+                if ( profileExecution != null )
+                {
+                    injectConfigurationContainer( profileExecution, modelExecution );
+                    
+                    if ( profileExecution.getPhase() != null )
+                    {
+                        modelExecution.setPhase( profileExecution.getPhase() );
+                    }
+                    
+                    List profileGoals = profileExecution.getGoals();
+                    List modelGoals = modelExecution.getGoals();
+                    
+                    List goals = new ArrayList();
+                    
+                    if ( modelGoals != null && !modelGoals.isEmpty() )
+                    {
+                        goals.addAll( modelGoals );
+                    }
+                    
+                    if ( profileGoals != null )
+                    {
+                        for ( Iterator goalIterator = profileGoals.iterator(); goalIterator.hasNext(); )
+                        {
+                            String goal = (String) goalIterator.next();
+                            
+                            if ( !goals.contains( goal ) )
+                            {
+                                goals.add( goal );
+                            }
+                        }
+                    }
+                    
+                    modelExecution.setGoals( goals );
+                }
+
+                executions.put( modelExecution.getId(), modelExecution );
+            }
+
+            for ( Iterator it = profileExecutions.entrySet().iterator(); it.hasNext(); )
+            {
+                Map.Entry entry = (Map.Entry) it.next();
+
+                String id = (String) entry.getKey();
+
+                if ( !executions.containsKey( id ) )
+                {
+                    executions.put( id, entry.getValue() );
+                }
+            }
+
+            modelPlugin.setExecutions( new ArrayList( executions.values() ) );
+
+            modelPlugin.flushExecutionMap();
+        }
+
+    }
+
+    private void injectConfigurationContainer( ConfigurationContainer profileContainer,
+                                              ConfigurationContainer modelContainer )
+    {
+        Xpp3Dom configuration = (Xpp3Dom) profileContainer.getConfiguration();
+        Xpp3Dom parentConfiguration = (Xpp3Dom) modelContainer.getConfiguration();
+
+        configuration = Xpp3Dom.mergeXpp3Dom( configuration, parentConfiguration );
+
+        modelContainer.setConfiguration( configuration );
+    }
+
+    private void injectModules( Profile profile, Model model )
+    {
+        List modules = new ArrayList();
+
+        List profileModules = profile.getModules();
+
+        if ( profileModules != null && !profileModules.isEmpty() )
+        {
+            modules.addAll( profileModules );
+        }
+
+        List modelModules = model.getModules();
+
+        if ( modelModules != null )
+        {
+            for ( Iterator it = modelModules.iterator(); it.hasNext(); )
+            {
+                String module = (String) it.next();
+
+                if ( !modules.contains( module ) )
+                {
+                    modules.add( module );
+                }
+            }
+        }
+
+        model.setModules( modules );
+    }
+
+    private void injectDistributionManagement( Profile profile, Model model )
+    {
+        DistributionManagement pDistMgmt = profile.getDistributionManagement();
+        DistributionManagement mDistMgmt = model.getDistributionManagement();
+
+        if ( mDistMgmt == null )
+        {
+            model.setDistributionManagement( pDistMgmt );
+        }
+        else if ( pDistMgmt != null )
+        {
+            if ( pDistMgmt.getRepository() != null )
+            {
+                mDistMgmt.setRepository( pDistMgmt.getRepository() );
+            }
+
+            if ( pDistMgmt.getSnapshotRepository() != null )
+            {
+                mDistMgmt.setSnapshotRepository( pDistMgmt.getSnapshotRepository() );
+            }
+
+            if ( StringUtils.isNotEmpty( pDistMgmt.getDownloadUrl() ) )
+            {
+                mDistMgmt.setDownloadUrl( pDistMgmt.getDownloadUrl() );
+            }
+
+            if ( pDistMgmt.getRelocation() != null )
+            {
+                mDistMgmt.setRelocation( pDistMgmt.getRelocation() );
+            }
+
+            if ( pDistMgmt.getSite() != null )
+            {
+                mDistMgmt.setSite( pDistMgmt.getSite() );
+            }
+
+            // NOTE: We SHOULD NOT be inheriting status, since this is an assessment of the POM quality.
+        }
+    }
+
+    private void injectDependencyManagement( Profile profile, Model model )
+    {
+        DependencyManagement modelDepMgmt = model.getDependencyManagement();
+
+        DependencyManagement profileDepMgmt = profile.getDependencyManagement();
+
+        if ( profileDepMgmt != null )
+        {
+            if ( modelDepMgmt == null )
+            {
+                model.setDependencyManagement( profileDepMgmt );
+            }
+            else
+            {
+                Map depsMap = new HashMap();
+
+                List deps = modelDepMgmt.getDependencies();
+
+                if ( deps != null )
+                {
+                    for ( Iterator it = deps.iterator(); it.hasNext(); )
+                    {
+                        Dependency dependency = (Dependency) it.next();
+                        depsMap.put( dependency.getManagementKey(), dependency );
+                    }
+                }
+
+                deps = profileDepMgmt.getDependencies();
+
+                if ( deps != null )
+                {
+                    for ( Iterator it = deps.iterator(); it.hasNext(); )
+                    {
+                        Dependency dependency = (Dependency) it.next();
+                        depsMap.put( dependency.getManagementKey(), dependency );
+                    }
+                }
+
+                modelDepMgmt.setDependencies( new ArrayList( depsMap.values() ) );
+            }
+        }
+    }
+
+    private void injectReporting( Profile profile, Model model )
+    {
+        // Reports :: aggregate
+        Reporting profileReporting = profile.getReporting();
+        Reporting modelReporting = model.getReporting();
+
+        if ( profileReporting != null )
+        {
+            if ( modelReporting == null )
+            {
+                model.setReporting( profileReporting );
+            }
+            else
+            {
+                if ( StringUtils.isEmpty( modelReporting.getOutputDirectory() ) )
+                {
+                    modelReporting.setOutputDirectory( profileReporting.getOutputDirectory() );
+                }
+
+                Map mergedReportPlugins = new HashMap();
+
+                Map profileReportersByKey = profileReporting.getReportPluginsAsMap();
+
+                List modelReportPlugins = modelReporting.getPlugins();
+
+                if ( modelReportPlugins != null )
+                {
+                    for ( Iterator it = modelReportPlugins.iterator(); it.hasNext(); )
+                    {
+                        ReportPlugin modelReportPlugin = (ReportPlugin) it.next();
+
+                        String inherited = modelReportPlugin.getInherited();
+
+                        if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
+                        {
+                            ReportPlugin profileReportPlugin = (ReportPlugin) profileReportersByKey
+                                .get( modelReportPlugin.getKey() );
+
+                            ReportPlugin mergedReportPlugin = modelReportPlugin;
+
+                            if ( profileReportPlugin != null )
+                            {
+                                mergedReportPlugin = profileReportPlugin;
+
+                                mergeReportPlugins( profileReportPlugin, modelReportPlugin );
+                            }
+                            else if ( StringUtils.isEmpty( inherited ) )
+                            {
+                                mergedReportPlugin.unsetInheritanceApplied();
+                            }
+
+                            mergedReportPlugins.put( mergedReportPlugin.getKey(), mergedReportPlugin );
+                        }
+                    }
+                }
+
+                for ( Iterator it = profileReportersByKey.entrySet().iterator(); it.hasNext(); )
+                {
+                    Map.Entry entry = (Map.Entry) it.next();
+
+                    String key = (String) entry.getKey();
+
+                    if ( !mergedReportPlugins.containsKey( key ) )
+                    {
+                        mergedReportPlugins.put( key, entry.getValue() );
+                    }
+                }
+
+                profileReporting.setPlugins( new ArrayList( mergedReportPlugins.values() ) );
+
+                profileReporting.flushReportPluginMap();
+            }
+        }
+    }
+
+    private void mergeReportPlugins( ReportPlugin dominant, ReportPlugin recessive )
+    {
+        if ( StringUtils.isEmpty( recessive.getVersion() ) )
+        {
+            recessive.setVersion( dominant.getVersion() );
+        }
+
+        Xpp3Dom dominantConfig = (Xpp3Dom) dominant.getConfiguration();
+        Xpp3Dom recessiveConfig = (Xpp3Dom) recessive.getConfiguration();
+
+        recessive.setConfiguration( Xpp3Dom.mergeXpp3Dom( dominantConfig, recessiveConfig ) );
+
+        Map mergedReportSets = new HashMap();
+
+        Map dominantReportSetsById = dominant.getReportSetsAsMap();
+
+        for ( Iterator it = recessive.getReportSets().iterator(); it.hasNext(); )
+        {
+            ReportSet recessiveReportSet = (ReportSet) it.next();
+
+            ReportSet dominantReportSet = (ReportSet) dominantReportSetsById.get( recessiveReportSet.getId() );
+
+            ReportSet merged = recessiveReportSet;
+
+            if ( dominantReportSet != null )
+            {
+                merged = recessiveReportSet;
+
+                Xpp3Dom dominantRSConfig = (Xpp3Dom) dominantReportSet.getConfiguration();
+                Xpp3Dom mergedRSConfig = (Xpp3Dom) merged.getConfiguration();
+
+                merged.setConfiguration( Xpp3Dom.mergeXpp3Dom( dominantRSConfig, mergedRSConfig ) );
+
+                List mergedReports = merged.getReports();
+
+                if ( mergedReports == null )
+                {
+                    mergedReports = new ArrayList();
+
+                    merged.setReports( mergedReports );
+                }
+
+                List dominantRSReports = dominantReportSet.getReports();
+
+                if ( dominantRSReports != null )
+                {
+                    for ( Iterator reportIterator = dominantRSReports.iterator(); reportIterator.hasNext(); )
+                    {
+                        String report = (String) reportIterator.next();
+
+                        if ( !mergedReports.contains( report ) )
+                        {
+                            mergedReports.add( report );
+                        }
+                    }
+                }
+
+                mergedReportSets.put( merged.getId(), merged );
+            }
+        }
+
+        for ( Iterator rsIterator = dominantReportSetsById.entrySet().iterator(); rsIterator.hasNext(); )
+        {
+            Map.Entry entry = (Map.Entry) rsIterator.next();
+
+            String key = (String) entry.getKey();
+
+            if ( !mergedReportSets.containsKey( key ) )
+            {
+                mergedReportSets.put( key, entry.getValue() );
+            }
+        }
+
+        recessive.setReportSets( new ArrayList( mergedReportSets.values() ) );
+
+        recessive.flushReportSetMap();
+    }
+
+    private void injectDependencies( Profile profile, Model model )
+    {
+        Map depsMap = new HashMap();
+
+        List deps = model.getDependencies();
+
+        if ( deps != null )
+        {
+            for ( Iterator it = deps.iterator(); it.hasNext(); )
+            {
+                Dependency dependency = (Dependency) it.next();
+                depsMap.put( dependency.getManagementKey(), dependency );
+            }
+        }
+
+        deps = profile.getDependencies();
+
+        if ( deps != null )
+        {
+            for ( Iterator it = deps.iterator(); it.hasNext(); )
+            {
+                Dependency dependency = (Dependency) it.next();
+                depsMap.put( dependency.getManagementKey(), dependency );
+            }
+        }
+
+        model.setDependencies( new ArrayList( depsMap.values() ) );
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS44 INS44 INS83 INS39 INS42 MOV44 MOV44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS42 INS43 INS42 MOV21 MOV21 INS21 INS21 INS21 INS21 MOV60 MOV60 INS25 INS43 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS25 INS25 INS25 INS21 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS21 INS60 INS60 INS24 INS24 INS21 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS21 INS25 INS21 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 MOV27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS27 INS8 INS32 INS8 INS27 INS8 INS32 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS7 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS58 INS32 INS8 INS32 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS25 INS25 INS60 INS25 INS60 INS25 INS21 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS21 INS27 INS8 INS27 INS27 INS41 INS42 INS42 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS60 INS60 INS24 INS24 INS21 INS21 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS21 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS32 INS42 INS33 INS24 INS42 INS42 INS14 MOV42 UPD42 MOV42 MOV32 MOV32 MOV42 INS42 INS32 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS32 INS32 INS33 INS60 INS60 INS24 INS24 INS21 INS21 INS42 INS33 INS42 INS33 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS58 INS32 INS8 INS32 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS25 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS32 INS43 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS58 INS32 INS8 INS43 INS32 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS21 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS58 INS32 INS8 INS32 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS21 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS32 INS8 INS27 INS8 INS27 INS8 INS42 INS33 INS21 INS60 INS60 INS25 INS21 INS25 INS21 INS42 INS33 INS21 INS25 INS60 INS60 INS60 INS25 INS24 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS33 INS21 INS60 INS60 INS21 INS60 INS25 INS60 INS25 INS21 INS32 INS42 INS40 INS42 INS11 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS21 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS25 INS21 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS32 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS32 INS32 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS58 INS32 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS7 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS33 INS21 INS25 INS60 INS60 INS60 INS25 INS25 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS11 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS32 INS42 INS33 INS24 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS24 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS32 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS58 INS32 INS8 INS43 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS32 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS27 INS38 INS21 INS42 INS33 INS24 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS21 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS32 INS42 INS40 INS42 INS11 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS33 INS32 INS32 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS32 INS60 INS60 INS25 INS21 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS7 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL9 DEL42 DEL32 DEL32 DEL8 DEL25