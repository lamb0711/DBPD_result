[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;
+import org.apache.maven.plugin.LegacySupport;
+import org.apache.maven.settings.Mirror;
+import org.apache.maven.settings.Proxy;
+import org.apache.maven.settings.Server;
+import org.apache.maven.settings.building.SettingsProblem;
+import org.apache.maven.settings.crypto.DefaultSettingsDecryptionRequest;
+import org.apache.maven.settings.crypto.SettingsDecrypter;
+import org.apache.maven.settings.crypto.SettingsDecryptionResult;
+import org.sonatype.aether.RepositoryEvent;
+import org.sonatype.aether.RepositorySystem;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.collection.DependencyGraphTransformer;
+import org.sonatype.aether.collection.DependencyManager;
+import org.sonatype.aether.collection.DependencySelector;
+import org.sonatype.aether.collection.DependencyTraverser;
+import org.sonatype.aether.repository.Authentication;
+import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.repository.RepositoryPolicy;
+import org.sonatype.aether.repository.WorkspaceReader;
+import org.sonatype.aether.util.DefaultRepositorySystemSession;
+import org.sonatype.aether.util.graph.manager.ClassicDependencyManager;
+import org.sonatype.aether.util.graph.selector.AndDependencySelector;
+import org.sonatype.aether.util.graph.selector.ExclusionDependencySelector;
+import org.sonatype.aether.util.graph.selector.OptionalDependencySelector;
+import org.sonatype.aether.util.graph.selector.ScopeDependencySelector;
+import org.sonatype.aether.util.graph.transformer.ChainedDependencyGraphTransformer;
+import org.sonatype.aether.util.graph.transformer.NearestVersionConflictResolver;
+import org.sonatype.aether.util.graph.transformer.ConflictMarker;
+import org.sonatype.aether.util.graph.transformer.JavaDependencyContextRefiner;
+import org.sonatype.aether.util.graph.transformer.JavaEffectiveScopeCalculator;
+import org.sonatype.aether.util.graph.traverser.FatArtifactTraverser;
+import org.sonatype.aether.util.listener.AbstractRepositoryListener;
+import org.sonatype.aether.util.repository.ChainedWorkspaceReader;
+import org.sonatype.aether.util.repository.DefaultAuthenticationSelector;
+import org.sonatype.aether.util.repository.DefaultMirrorSelector;
+import org.sonatype.aether.util.repository.DefaultProxySelector;
-@Component( role = Maven.class )
+@Component(role = Maven.class)
-
+    @Requirement
+    private ArtifactHandlerManager artifactHandlerManager;
+
+    @Requirement( optional = true, hint = "ide" )
+    private WorkspaceReader workspaceRepository;
+
+    @Requirement
+    private RepositorySystem repoSystem;
+
+    @Requirement
+    private SettingsDecrypter settingsDecrypter;
+
+    @Requirement
+    private LegacySupport legacySupport;
+
+        finally
+        {
+            legacySupport.setSession( null );
+        }
-    @SuppressWarnings( { "ThrowableInstanceNeverThrown", "ThrowableResultOfMethodCallIgnored" } )
+    @SuppressWarnings({"ThrowableInstanceNeverThrown", "ThrowableResultOfMethodCallIgnored"})
-            request.getSystemProperties().put( "${build.timestamp}",
-                                               new SimpleDateFormat( "yyyyMMdd-hhmm" ).format( request.getStartTime() ) );
-        }
-
+            request.getSystemProperties().put( "${build.timestamp}", new SimpleDateFormat( "yyyyMMdd-hhmm" ).format( request.getStartTime() ) );
+        }        
+        
-
+        
+        
+        request.setLocalRepository( delegatingLocalArtifactRepository );        
-        request.setLocalRepository( delegatingLocalArtifactRepository );
+        DefaultRepositorySystemSession repoSession = (DefaultRepositorySystemSession) newRepositorySession( request );
-        MavenSession session = new MavenSession( container, request, result );
+        MavenSession session = new MavenSession( container, repoSession, request, result );
+        legacySupport.setSession( session );
-        //TODO: optimize for the single project or no project
+        request.getProjectBuildingRequest().setRepositorySession( session.getRepositorySession() );
+        //TODO: optimize for the single project or no project
+        
-            projects = getProjectsForMavenReactor( request );
+            projects = getProjectsForMavenReactor( request );                                                
-
+        
-
+    
-            delegatingLocalArtifactRepository.setBuildReactor( new ReactorArtifactRepository( projectMap ) );
+            ReactorReader reactorRepository = new ReactorReader( projectMap );
+
+            repoSession.setWorkspaceReader( ChainedWorkspaceReader.newInstance( reactorRepository,
+                                                                                repoSession.getWorkspaceReader() ) );
-        {
+        {            
-    @SuppressWarnings( { "ResultOfMethodCallIgnored" } )
+    public RepositorySystemSession newRepositorySession( MavenExecutionRequest request )
+    {
+        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();
+
+        session.setCache( request.getRepositoryCache() );
+
+        session.setIgnoreInvalidArtifactDescriptor( true ).setIgnoreMissingArtifactDescriptor( true );
+
+        session.setUserProps( request.getUserProperties() );
+        session.setSystemProps( request.getSystemProperties() );
+        session.setConfigProps( request.getSystemProperties() );
+
+        session.setOffline( request.isOffline() );
+        session.setChecksumPolicy( request.getGlobalChecksumPolicy() );
+        session.setUpdatePolicy( request.isUpdateSnapshots() ? RepositoryPolicy.UPDATE_POLICY_ALWAYS : null );
+
+        session.setNotFoundCachingEnabled( !request.isUpdateSnapshots() );
+        session.setTransferErrorCachingEnabled( !request.isUpdateSnapshots() );
+
+        session.setArtifactTypeRegistry( RepositoryUtils.newArtifactTypeRegistry( artifactHandlerManager ) );
+
+        LocalRepository localRepo = new LocalRepository( request.getLocalRepository().getBasedir() );
+        session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( localRepo ) );
+
+        session.setWorkspaceReader( workspaceRepository );
+
+        DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();
+        decrypt.setProxies( request.getProxies() );
+        decrypt.setServers( request.getServers() );
+        SettingsDecryptionResult decrypted = settingsDecrypter.decrypt( decrypt );
+
+        if ( logger.isDebugEnabled() )
+        {
+            for ( SettingsProblem problem : decrypted.getProblems() )
+            {
+                logger.debug( problem.getMessage(), problem.getException() );
+            }
+        }
+
+        DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();
+        for ( Mirror mirror : request.getMirrors() )
+        {
+            mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),
+                                mirror.getMirrorOfLayouts() );
+        }
+        session.setMirrorSelector( mirrorSelector );
+
+        DefaultProxySelector proxySelector = new DefaultProxySelector();
+        for ( Proxy proxy : decrypted.getProxies() )
+        {
+            Authentication proxyAuth = new Authentication( proxy.getUsername(), proxy.getPassword() );
+            proxySelector.add( new org.sonatype.aether.repository.Proxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(),
+                                                                proxyAuth ), proxy.getNonProxyHosts() );
+        }
+        session.setProxySelector( proxySelector );
+
+        DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();
+        for ( Server server : decrypted.getServers() )
+        {
+            Authentication auth =
+                new Authentication( server.getUsername(), server.getPassword(), server.getPrivateKey(),
+                                    server.getPassphrase() );
+            authSelector.add( server.getId(), auth );
+        }
+        session.setAuthenticationSelector( authSelector );
+
+        DependencyTraverser depTraverser = new FatArtifactTraverser();
+        session.setDependencyTraverser( depTraverser );
+
+        DependencyManager depManager = new ClassicDependencyManager();
+        session.setDependencyManager( depManager );
+
+        DependencySelector depFilter =
+            new AndDependencySelector( new ScopeDependencySelector( "test", "provided" ), new OptionalDependencySelector(),
+                                     new ExclusionDependencySelector() );
+        session.setDependencySelector( depFilter );
+
+        DependencyGraphTransformer transformer =
+            new ChainedDependencyGraphTransformer( new ConflictMarker(), new JavaEffectiveScopeCalculator(),
+                                                   new NearestVersionConflictResolver(),
+                                                   new JavaDependencyContextRefiner() );
+        session.setDependencyGraphTransformer( transformer );
+
+        session.setTransferListener( request.getTransferListener() );
+
+        session.setRepositoryListener( new AbstractRepositoryListener()
+        {
+            @Override
+            public void artifactInstalling( RepositoryEvent event )
+            {
+                logger.info( "Installing " + event.getArtifact().getFile() + " to " + event.getFile() );
+            }
+
+            @Override
+            public void metadataInstalling( RepositoryEvent event )
+            {
+                logger.debug( "Installing " + event.getMetadata() + " to " + event.getFile() );
+            }
+
+            @Override
+            public void artifactDescriptorInvalid( RepositoryEvent event )
+            {
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.warn( "The POM for " + event.getArtifact() + " is invalid"
+                        + ", transitive dependencies (if any) will not be available: "
+                        + event.getException().getMessage() );
+                }
+                else
+                {
+                    logger.warn( "The POM for " + event.getArtifact() + " is invalid"
+                        + ", transitive dependencies (if any) will not be available"
+                        + ", enable debug logging for more details" );
+                }
+            }
+
+            @Override
+            public void artifactDescriptorMissing( RepositoryEvent event )
+            {
+                logger.warn( "The POM for " + event.getArtifact() + " is missing, no dependency information available" );
+            }
+        } );
+
+        return session;
+    }
+
+    @SuppressWarnings({"ResultOfMethodCallIgnored"})
-
+    
-
-        List<File> files = Arrays.asList( request.getPom().getAbsoluteFile() );
+        
+        List<File> files = Arrays.asList( request.getPom().getAbsoluteFile() );        
-        List<ProjectBuildingResult> results =
-            projectBuilder.build( files, request.isRecursive(), projectBuildingRequest );
+        List<ProjectBuildingResult> results = projectBuilder.build( files, request.isRecursive(), projectBuildingRequest );
-                    logger.warn( problem.getMessage()
-                                 + ( StringUtils.isNotEmpty( location ) ? " @ " + location : "" ) );
+                    logger.warn( problem.getMessage() + ( StringUtils.isNotEmpty( location ) ? " @ " + location : "" ) );

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS78 INS83 INS43 INS59 INS77 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 MOV21 MOV21 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS80 INS80 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS60 INS21 INS21 INS60 INS25 INS60 INS70 INS21 INS60 INS70 INS21 INS60 INS70 INS21 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS21 INS21 INS21 INS41 INS42 INS9 INS42 INS45 INS8 INS43 INS59 MOV43 INS32 INS32 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS8 INS43 INS59 INS44 INS32 INS8 INS32 INS43 INS59 INS44 INS32 INS8 INS32 INS43 INS59 INS44 INS32 INS8 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS21 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS32 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS38 INS42 INS42 INS38 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS70 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS43 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS33 INS32 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS44 INS32 INS8 INS43 INS42 INS32 INS43 INS42 INS43 INS59 INS32 INS43 INS42 INS43 INS59 INS32 INS43 INS43 INS43 INS14 INS14 INS14 INS43 INS14 INS14 INS14 INS14 INS42 INS42 INS43 INS1 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS9 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS45 INS45 INS43 INS43 INS42 INS43 INS43 INS43 INS43 INS42 INS31 INS31 INS31 INS31 UPD43 MOV43 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS8 INS8 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS27 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS32 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS32 INS45 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL14 DEL32 DEL21