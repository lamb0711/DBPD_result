refactor maven-artifact: first pass, reduce the usage of setPath()


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163681 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+    private final ArtifactConstructionSupport artifactConstructionSupport = new ArtifactConstructionSupport();
+
-    private ArtifactConstructionSupport artifactConstructionSupport = new ArtifactConstructionSupport();
-
+    // TODO: would like to avoid the returning of a new artifact - is it ok to modify the original though?
-        // Perform any transformation on the artifacts
-        // ----------------------------------------------------------------------
-
-        // ----------------------------------------------------------------------
+        Logger logger = getLogger();
+        logger.debug( "Resolving: " + artifact.getId() + " from:\n" + "{localRepository: " + localRepository + "}\n" +
+                      "{remoteRepositories: " + remoteRepositories + "}" );
+
+        String localPath;
+
-            Logger logger = getLogger();
-            logger.debug( "Resolving: " + artifact.getId() + " from:\n" + "{localRepository: " + localRepository +
-                          "}\n" + "{remoteRepositories: " + remoteRepositories + "}" );
-
-            artifact.setPath( artifactHandlerManager.getLocalRepositoryArtifactPath( artifact, localRepository ) );
-
-            if ( artifact.exists() )
-            {
-                return artifact;
-            }
-
-            wagonManager.get( artifact, remoteRepositories, localRepository );
-        }
-        catch ( TransferFailedException e )
-        {
-            throw new ArtifactResolutionException( artifactNotFound( artifact, remoteRepositories ), e );
+            localPath = artifactHandlerManager.getLocalRepositoryArtifactPath( artifact, localRepository );
+        // TODO: what if it were a snapshot that was transformed?
+        File destination = new File( localPath );
+        artifact.setFile( destination );
+
+        if ( destination.exists() )
+        {
+            return artifact;
+        }
+
+        try
+        {
+            wagonManager.getArtifact( artifact, remoteRepositories, destination );
+        }
+        catch ( TransferFailedException e )
+        {
+            throw new ArtifactResolutionException( artifactNotFound( localPath, remoteRepositories ), e );
+        }
+
-    private String artifactNotFound( Artifact artifact, List remoteRepositories )
+    private String artifactNotFound( String path, List remoteRepositories )
-        sb.append( "The artifact is not present locally as:" ).append( LS ).append( LS ).append( artifact.getPath() ).append(
-            LS ).append( LS ).append( "or in any of the specified remote repositories:" ).append( LS ).append( LS );
+        sb.append( "The artifact is not present locally as:" );
+        sb.append( LS );
+        sb.append( LS );
+        sb.append( path );
+        sb.append( LS );
+        sb.append( LS );
+        sb.append( "or in any of the specified remote repositories:" );
+        sb.append( LS );
+        sb.append( LS );
-        for ( Iterator i = artifactResolutionResult.getArtifacts().values().iterator(); i.hasNext(); )
+        // TODO: this is unclean, but necessary as long as resolve may return a different artifact
+        Map collectedArtifacts = artifactResolutionResult.getArtifacts();
+        Map resolvedArtifacts = new HashMap( collectedArtifacts.size() );
+        for ( Iterator i = collectedArtifacts.keySet().iterator(); i.hasNext(); )
-            resolve( (Artifact) i.next(), remoteRepositories, localRepository );
+            Object key = i.next();
+            resolvedArtifacts.put( key, resolve( (Artifact) collectedArtifacts.get( key ), remoteRepositories,
+                                                 localRepository ) );
+        collectedArtifacts.clear();
+        collectedArtifacts.putAll( resolvedArtifacts );
+
+
-            try
-            {
-                artifact.setPath( artifactHandlerManager.getLocalRepositoryArtifactPath( artifact, localRepository ) );
-            }
-            catch ( ArtifactPathFormatException e )
-            {
-                throw new TransitiveArtifactResolutionException( "Error collecting artifact: ", e );
-            }
-

INS26 MOV23 INS40 INS83 MOV8 INS60 INS54 INS60 INS21 INS54 MOV41 UPD43 UPD42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS21 INS21 INS43 INS59 INS8 MOV12 INS43 INS59 INS32 INS8 INS12 UPD42 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 MOV59 INS43 INS59 INS32 INS32 INS42 INS42 MOV21 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 MOV21 MOV44 INS8 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 INS42 MOV42 MOV45 INS42 MOV42 MOV42 INS42 MOV42 MOV42 INS42 INS42 MOV32 INS42 INS42 INS14 INS59 INS60 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS43 INS32 INS42 INS32 INS43 INS59 INS32 INS42 MOV32 INS42 UPD42 UPD42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 MOV43 INS32 INS42 INS42 INS42 MOV42 MOV11 MOV42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54