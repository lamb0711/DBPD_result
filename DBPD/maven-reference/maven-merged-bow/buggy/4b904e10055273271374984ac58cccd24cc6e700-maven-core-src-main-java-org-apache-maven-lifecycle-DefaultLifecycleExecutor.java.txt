o Revised error handling

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@807736 13f79535-47bb-0310-9956-ffa450edef68

-    private void populateDefaultConfigurationForPlugin( Plugin plugin, RepositoryRequest repositoryRequest ) 
+    public void populateDefaultConfigurationForPlugin( Plugin plugin, RepositoryRequest repositoryRequest ) 
-        for( PluginExecution pluginExecution : plugin.getExecutions() )
+        try
-            for( String goal : pluginExecution.getGoals() )
+            // NOTE: Retrieve the plugin descriptor regardless whether there are any executions to verify the plugin
+            PluginDescriptor pluginDescriptor = pluginManager.loadPlugin( plugin, repositoryRequest );
+
+            for ( PluginExecution pluginExecution : plugin.getExecutions() )
-                Xpp3Dom dom = getDefaultPluginConfiguration( plugin, goal, repositoryRequest );
-                pluginExecution.setConfiguration( Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) pluginExecution.getConfiguration(), dom, Boolean.TRUE ) );
+                for ( String goal : pluginExecution.getGoals() )
+                {
+                    MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );
+
+                    if ( mojoDescriptor == null )
+                    {
+                        throw new MojoNotFoundException( goal, pluginDescriptor );
+                    }
+
+                    Xpp3Dom defaultConfiguration = getMojoConfiguration( mojoDescriptor );
+
+                    Xpp3Dom executionConfiguration =
+                        Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) pluginExecution.getConfiguration(), defaultConfiguration,
+                                              Boolean.TRUE );
+
+                    pluginExecution.setConfiguration( executionConfiguration );
+                }
+        catch ( PluginNotFoundException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( PluginResolutionException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( PluginDescriptorParsingException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( MojoNotFoundException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
+        catch ( InvalidPluginDescriptorException e )
+        {
+            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
+                + e.getMessage(), e );
+        }
-    
+
-    
-    private Xpp3Dom getDefaultPluginConfiguration( Plugin plugin, String goal, RepositoryRequest repositoryRequest ) 
-        throws LifecycleExecutionException
-    {
-        MojoDescriptor mojoDescriptor;
-        
-        try
-        {
-            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, repositoryRequest );
-        }
-        catch ( PluginNotFoundException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( PluginResolutionException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( PluginDescriptorParsingException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( MojoNotFoundException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        catch ( InvalidPluginDescriptorException e )
-        {
-            throw new LifecycleExecutionException( "Error getting default plugin information for " + plugin.getId(), e );
-        }
-        
-        return getMojoConfiguration( mojoDescriptor );
-    }
-    
+

UPD83 INS8 MOV25 INS54 MOV8 INS12 INS12 INS12 INS12 INS12 INS60 MOV44 INS8 MOV44 INS8 MOV44 INS8 MOV44 INS8 MOV44 INS8 INS43 INS59 INS53 INS53 INS53 INS53 INS53 INS42 INS42 INS32 INS14 INS14 INS14 INS14 INS14 INS42 INS42 INS42 INS42 MOV43 INS27 INS42 MOV43 INS27 INS42 MOV43 INS27 INS42 MOV43 INS27 INS42 MOV43 INS27 INS42 INS25 INS60 INS60 INS45 MOV32 INS45 INS32 INS45 MOV32 INS45 INS32 INS45 MOV32 INS45 INS32 INS45 MOV32 INS45 INS32 INS45 MOV32 INS45 INS32 MOV43 INS27 INS8 MOV43 INS59 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS33 INS53 INS42 MOV32 INS42 MOV32 INS42 UPD42 UPD42 INS14 UPD42 INS43 INS42 INS42 INS42 DEL42 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL41 DEL8 DEL31