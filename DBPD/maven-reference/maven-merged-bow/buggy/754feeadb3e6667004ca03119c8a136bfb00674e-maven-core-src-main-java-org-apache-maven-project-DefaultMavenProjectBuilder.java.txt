*** empty log message ***


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163257 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
+import org.apache.maven.MavenConstants;
-
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
-    public MavenProject build( File projectDescriptor )
+    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository )
-        return build( null, projectDescriptor, false );
+        return build( projectDescriptor, localRepository, false );
-    public MavenProject build( File mavenLocalHome, File projectDescriptor )
+    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository, boolean resolveDependencies )
-        return build( mavenLocalHome, projectDescriptor, false );
-    }
-
-    public MavenProject build( File projectDescriptor, boolean resolveDependencies )
-        throws ProjectBuildingException
-    {
-        return build( null, projectDescriptor, resolveDependencies );
-    }
-
-    /** @todo can we move the super model reading to the initialize method? what about the user/site? Is it reused?
-     *  @todo this is still not completely faithful to the "always override" method of the user POM: there is potential for settings not to be used in some rare circumstances. Some restructuring is necessary.
-     *  @todo we should be passing in some more configuration here so that maven home local can be used for user properties. Then, the new stuff should be unit tested.
-     *  @todo the user model bit overwriting the super model seems a bit gross, but is needed so that any repositories given take affect
-     */
-    public MavenProject build( File mavenLocalHome, File projectDescriptor, boolean resolveDependencies )
-        throws ProjectBuildingException
-    {
-        ArtifactRepository localRepository = getLocalRepository( mavenLocalHome );
-
+
+
-            Model userModel = getUserOverrideModel( superModel, mavenLocalHome );
-
-            if ( userModel != null )
-            {
-                modelInheritanceAssembler.assembleModelInheritance( userModel, previous );
-
-                MavenProject parent = project;
-                project = new MavenProject( userModel );
-                project.setFile( parent.getFile() );
-                project.setParent( parent );
-                project.setType( previous.getType() );
-
-                // TODO: This shouldn't be necessary
-                project.setScm( previous.getScm() );
-            }
-
+
-        catch( FileNotFoundException ex )
+        catch ( FileNotFoundException ex )
-        catch( Exception ex )
+        catch ( Exception ex )
-                parent.getGroupId() + ":" +
-                parent.getArtifactId() + "-" +
-                parent.getVersion(), e );
+                                                parent.getGroupId() + ":" +
+                                                parent.getArtifactId() + "-" +
+                                                parent.getVersion(), e );
-     *  <li>collect all the vertices for the projects that we want to build.</li>
-     *  <li>iterate through the deps of each project and if that dep is within
-     *    the set of projects we want to build then add an edge, otherwise throw
-     *    the edge away because that dependency is not within the set of projects
-     *    we are trying to build. we assume a closed set.</li>
-     *  <li>do a topo sort on the graph that remains.</li>
+     * <li>collect all the vertices for the projects that we want to build.</li>
+     * <li>iterate through the deps of each project and if that dep is within
+     * the set of projects we want to build then add an edge, otherwise throw
+     * the edge away because that dependency is not within the set of projects
+     * we are trying to build. we assume a closed set.</li>
+     * <li>do a topo sort on the graph that remains.</li>
-    /**
-     * Locate the local repository.
-     *
-     * <ol>
-     *  <li>Try ${maven.repo.local}
-     *  <li>Look in mavenHomeLocal/override.xml
-     *  <li>Set to the default value (${user.home}/.m2/repository).
-     * </ol>
-     *
-     * @param mavenHomeLocal The maven local home directory
-     * @return Returns the local repository
-     * @throws ProjectBuildingException
-     */
-    protected ArtifactRepository getLocalRepository( File mavenHomeLocal )
-        throws ProjectBuildingException
-    {
-        String localRepository = System.getProperty( "maven.repo.local" );
-
-        if ( !StringUtils.isEmpty( localRepository ) )
-        {
-            return RepositoryUtils.localRepositoryToWagonRepository( localRepository );
-        }
-
-        Model superModel = getSuperModel();
-
-        if ( superModel.getLocal() != null && superModel.getLocal().getRepository() != null )
-        {
-            localRepository = superModel.getLocal().getRepository();
-        }
-
-        if ( mavenHomeLocal != null )
-        {
-            Model userModel = getUserOverrideModel( superModel, mavenHomeLocal );
-
-            if ( userModel != null && userModel.getLocal() != null && userModel.getLocal().getRepository() != null )
-            {
-                localRepository = userModel.getLocal().getRepository();
-            }
-        }
-
-        if ( localRepository == null )
-        {
-            String userHome = System.getProperty( "user.home" );
-
-            localRepository = new File( userHome, ".m2/repository" ).getAbsolutePath();
-        }
-
-        System.setProperty( "maven.repo.local", localRepository );
-
-        return RepositoryUtils.localRepositoryToWagonRepository( localRepository );
-    }
-
-        return readModel( new InputStreamReader( DefaultMavenProjectBuilder.class.getResourceAsStream( "pom-4.0.0.xml" ) ) );
-    }
-
-    private Model getUserOverrideModel( Model superModel, File mavenHomeLocal )
-        throws ProjectBuildingException
-    {
-        File userModelFile = new File( mavenHomeLocal, "override.xml" );
-
-        if ( !userModelFile.exists() )
-        {
-            return null;
-        }
-
-        Model model = readModel( userModelFile );
-
-        if ( model.getParent() != null )
-        {
-            throw new ProjectBuildingException( "Inheritence not supported in the user override POM" );
-        }
-
-        superModel.getRepositories().addAll( model.getRepositories() );
-
-        return model;
+        return readModel( new InputStreamReader( DefaultMavenProjectBuilder.class.getResourceAsStream( "pom-" + MavenConstants.MAVEN_MODEL_VERSION + ".xml" ) ) );

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 MOV44 MOV43 MOV44 MOV43 UPD42 MOV43 UPD42 UPD42 UPD42 INS27 INS45 INS40 INS45 DEL83 DEL42 DEL42 DEL43 DEL42 DEL33 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL45 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31