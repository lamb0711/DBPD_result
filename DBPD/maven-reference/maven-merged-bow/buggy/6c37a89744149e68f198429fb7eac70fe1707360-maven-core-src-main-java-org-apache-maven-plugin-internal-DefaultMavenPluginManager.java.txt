[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Arrays;
+import java.util.Collections;
+import java.util.Iterator;
+import org.apache.maven.RepositoryUtils;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
-import org.apache.maven.artifact.resolver.filter.AndArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.graph.DependencyNode;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.util.filter.AndDependencyFilter;
+import org.sonatype.aether.util.graph.PreorderNodeListGenerator;
-    public synchronized PluginDescriptor getPluginDescriptor( Plugin plugin, RepositoryRequest repositoryRequest )
+    public synchronized PluginDescriptor getPluginDescriptor( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
-        PluginDescriptorCache.Key cacheKey = pluginDescriptorCache.createKey( plugin, repositoryRequest );
+        PluginDescriptorCache.Key cacheKey = pluginDescriptorCache.createKey( plugin, repositories, session );
-                pluginDependenciesResolver.resolve( plugin, new ArtifactResolutionRequest( repositoryRequest ) );
+                RepositoryUtils.toArtifact( pluginDependenciesResolver.resolve( plugin, repositories, session ) );
-    public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, RepositoryRequest repositoryRequest )
+    public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, List<RemoteRepository> repositories,
+                                             RepositorySystemSession session )
-        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin, repositoryRequest );
+        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin, repositories, session );
-                                               ClassLoader parent, List<String> imports, ArtifactFilter filter )
+                                               ClassLoader parent, List<String> imports, DependencyFilter filter )
-        PluginRealmCache.CacheRecord cacheRecord =
-            pluginRealmCache.get( plugin, parent, imports, filter, session.getLocalRepository(),
-                                  project.getPluginArtifactRepositories() );
+        PluginRealmCache.Key cacheKey =
+            pluginRealmCache.createKey( plugin, parent, imports, filter, project.getRemotePluginRepositories(),
+                                        session.getRepositorySession() );
+
+        PluginRealmCache.CacheRecord cacheRecord = pluginRealmCache.get( cacheKey );
-                pluginRealmCache.put( plugin, parent, imports, filter, session.getLocalRepository(),
-                                      project.getPluginArtifactRepositories(), pluginDescriptor.getClassRealm(),
-                                      pluginDescriptor.getArtifacts() );
+                pluginRealmCache.put( cacheKey, pluginDescriptor.getClassRealm(), pluginDescriptor.getArtifacts() );
-                                    List<String> imports, ArtifactFilter filter )
+                                    List<String> imports, DependencyFilter filter )
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest();
-        request.setLocalRepository( session.getLocalRepository() );
-        request.setRemoteRepositories( project.getPluginArtifactRepositories() );
-        request.setCache( session.getRepositoryCache() );
-        request.setOffline( session.isOffline() );
-        request.setForceUpdate( session.getRequest().isUpdateSnapshots() );
-        request.setServers( session.getRequest().getServers() );
-        request.setMirrors( session.getRequest().getMirrors() );
-        request.setProxies( session.getRequest().getProxies() );
-        request.setTransferListener( session.getRequest().getTransferListener() );
+        DependencyFilter dependencyFilter = project.getExtensionDependencyFilter();
+        dependencyFilter = AndDependencyFilter.newInstance( dependencyFilter, filter );
-        ArtifactFilter dependencyFilter = project.getExtensionArtifactFilter();
-        if ( dependencyFilter == null )
+        DependencyNode root =
+            pluginDependenciesResolver.resolve( plugin, RepositoryUtils.toArtifact( pluginArtifact ), dependencyFilter,
+                                                project.getRemotePluginRepositories(), session.getRepositorySession() );
+
+        PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();
+        root.accept( nlg );
+
+        List<Artifact> exposedPluginArtifacts = new ArrayList<Artifact>( nlg.getNodes().size() );
+        RepositoryUtils.toArtifacts( exposedPluginArtifacts, Collections.singleton( root ),
+                                     Collections.<String> emptyList(), null );
+        for ( Iterator<Artifact> it = exposedPluginArtifacts.iterator(); it.hasNext(); )
-            dependencyFilter = filter;
-        }
-        else if ( filter != null )
-        {
-            dependencyFilter = new AndArtifactFilter( Arrays.asList( dependencyFilter, filter ) );
-        }
-
-        List<Artifact> pluginArtifacts =
-            pluginDependenciesResolver.resolve( plugin, pluginArtifact, request, dependencyFilter );
-
-        ClassRealm pluginRealm = classRealmManager.createPluginRealm( plugin, parent, imports, pluginArtifacts );
-
-        List<Artifact> exposedPluginArtifacts = new ArrayList<Artifact>();
-
-        for ( Artifact artifact : pluginArtifacts )
-        {
-            if ( artifact.getFile() != null )
+            Artifact artifact = it.next();
+            if ( artifact.getFile() == null )
-                exposedPluginArtifacts.add( artifact );
+                it.remove();
+        List<org.sonatype.aether.artifact.Artifact> pluginArtifacts = nlg.getArtifacts( true );
+
+        ClassRealm pluginRealm = classRealmManager.createPluginRealm( plugin, parent, imports, pluginArtifacts );
+

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 UPD40 UPD40 UPD40 INS40 INS40 UPD40 INS40 INS44 INS44 MOV60 INS74 UPD42 INS43 INS42 INS74 UPD42 INS43 INS42 UPD43 INS60 UPD43 INS60 INS60 INS21 INS21 INS24 INS43 INS43 INS42 INS43 INS43 INS42 UPD42 INS43 MOV43 INS59 UPD42 UPD43 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS58 INS32 MOV8 UPD74 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS40 UPD42 INS42 INS32 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 INS33 INS74 INS59 UPD42 MOV42 UPD42 MOV42 INS60 UPD43 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV32 MOV32 INS43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS43 UPD42 INS43 INS43 UPD42 MOV42 MOV32 MOV43 INS59 UPD27 INS40 UPD42 UPD42 INS9 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV42 INS42 INS42 UPD42 UPD42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL32 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL14 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL43 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL44 DEL42 DEL70