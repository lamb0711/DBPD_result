MNG-5306 : introduce ModelProblemCollectorRequest and a new ModelProblem property - version which denotes on which validation level the error/warning applies. Additionally move the logic on failing the ModelBuilding from ModelProblemCollector to ModelBuilder's protected method to allow overriding. Default maven behaviour should stay the same.

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1357589 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.building.ModelProblem.Version;
+import org.apache.maven.model.building.ModelProblemCollectorRequest;
-            validateStringNotEmpty( "parent.groupId", problems, Severity.FATAL, parent.getGroupId(), parent );
+            validateStringNotEmpty( "parent.groupId", problems, Severity.FATAL, Version.BASE, parent.getGroupId(), parent );
-            validateStringNotEmpty( "parent.artifactId", problems, Severity.FATAL, parent.getArtifactId(), parent );
+            validateStringNotEmpty( "parent.artifactId", problems, Severity.FATAL, Version.BASE, parent.getArtifactId(), parent );
-            validateStringNotEmpty( "parent.version", problems, Severity.FATAL, parent.getVersion(), parent );
+            validateStringNotEmpty( "parent.version", problems, Severity.FATAL, Version.BASE, parent.getVersion(), parent );
-                addViolation( problems, Severity.FATAL, "parent.artifactId", null, "must be changed"
+                addViolation( problems, Severity.FATAL, Version.BASE, "parent.artifactId", null, "must be changed"
-            validateEnum( "modelVersion", problems, Severity.ERROR, model.getModelVersion(), null, model, "4.0.0" );
+            validateEnum( "modelVersion", problems, Severity.ERROR, Version.V20, model.getModelVersion(), null, model, "4.0.0" );
-            validateStringNoExpression( "groupId", problems, Severity.WARNING, model.getGroupId(), model );
+            validateStringNoExpression( "groupId", problems, Severity.WARNING, Version.V20, model.getGroupId(), model );
-                validateStringNotEmpty( "groupId", problems, Severity.FATAL, model.getGroupId(), model );
+                validateStringNotEmpty( "groupId", problems, Severity.FATAL, Version.V20, model.getGroupId(), model );
-            validateStringNoExpression( "artifactId", problems, Severity.WARNING, model.getArtifactId(), model );
-            validateStringNotEmpty( "artifactId", problems, Severity.FATAL, model.getArtifactId(), model );
+            validateStringNoExpression( "artifactId", problems, Severity.WARNING, Version.V20, model.getArtifactId(), model );
+            validateStringNotEmpty( "artifactId", problems, Severity.FATAL, Version.V20, model.getArtifactId(), model );
-            validateStringNoExpression( "version", problems, Severity.WARNING, model.getVersion(), model );
+            validateStringNoExpression( "version", problems, Severity.WARNING, Version.V20, model.getVersion(), model );
-                validateStringNotEmpty( "version", problems, Severity.FATAL, model.getVersion(), model );
+                validateStringNotEmpty( "version", problems, Severity.FATAL, Version.V20, model.getVersion(), model );
-            validateRawDependencies( problems, model.getDependencies(), "dependencies.dependency", request );
+            validate20RawDependencies( problems, model.getDependencies(), "dependencies.dependency", request );
-                validateRawDependencies( problems, model.getDependencyManagement().getDependencies(),
+                validate20RawDependencies( problems, model.getDependencyManagement().getDependencies(),
-            validateRepositories( problems, model.getRepositories(), "repositories.repository", request );
+            validateRawRepositories( problems, model.getRepositories(), "repositories.repository", request );
-            validateRepositories( problems, model.getPluginRepositories(), "pluginRepositories.pluginRepository",
+            validateRawRepositories( problems, model.getPluginRepositories(), "pluginRepositories.pluginRepository",
-                validateRawPlugins( problems, build.getPlugins(), "build.plugins.plugin", request );
+                validate20RawPlugins( problems, build.getPlugins(), "build.plugins.plugin", request );
-                    validateRawPlugins( problems, mngt.getPlugins(), "build.pluginManagement.plugins.plugin",
+                    validate20RawPlugins( problems, mngt.getPlugins(), "build.pluginManagement.plugins.plugin",
-                    addViolation( problems, errOn30, "profiles.profile.id", null,
+                    addViolation( problems, errOn30, Version.V20, "profiles.profile.id", null,
-                validateRawDependencies( problems, profile.getDependencies(), prefix + ".dependencies.dependency",
+                validate20RawDependencies( problems, profile.getDependencies(), prefix + ".dependencies.dependency",
-                    validateRawDependencies( problems, profile.getDependencyManagement().getDependencies(), prefix
+                    validate20RawDependencies( problems, profile.getDependencyManagement().getDependencies(), prefix
-                validateRepositories( problems, profile.getRepositories(), prefix + ".repositories.repository",
+                validateRawRepositories( problems, profile.getRepositories(), prefix + ".repositories.repository",
-                validateRepositories( problems, profile.getPluginRepositories(), prefix
+                validateRawRepositories( problems, profile.getPluginRepositories(), prefix
-                    validateRawPlugins( problems, buildBase.getPlugins(), prefix + ".plugins.plugin", request );
+                    validate20RawPlugins( problems, buildBase.getPlugins(), prefix + ".plugins.plugin", request );
-                        validateRawPlugins( problems, mngt.getPlugins(), prefix + ".pluginManagement.plugins.plugin",
+                        validate20RawPlugins( problems, mngt.getPlugins(), prefix + ".pluginManagement.plugins.plugin",
-    private void validateRawPlugins( ModelProblemCollector problems, List<Plugin> plugins, String prefix,
+    private void validate20RawPlugins( ModelProblemCollector problems, List<Plugin> plugins, String prefix,
-                addViolation( problems, errOn31, prefix + ".(groupId:artifactId)", null,
+                addViolation( problems, errOn31, Version.V20, prefix + ".(groupId:artifactId)", null,
-                    addViolation( problems, Severity.ERROR, prefix + "[" + plugin.getKey()
+                    addViolation( problems, Severity.ERROR, Version.V20, prefix + "[" + plugin.getKey()
-        validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, model.getModelVersion(), model );
+        validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, Version.BASE, model.getModelVersion(), model );
-        validateStringNotEmpty( "packaging", problems, Severity.ERROR, model.getPackaging(), model );
+        validateStringNotEmpty( "packaging", problems, Severity.ERROR, Version.BASE, model.getPackaging(), model );
-                addViolation( problems, Severity.ERROR, "packaging", null, "with value '" + model.getPackaging()
+                addViolation( problems, Severity.ERROR, Version.BASE,"packaging", null, "with value '" + model.getPackaging()
-                    addViolation( problems, Severity.WARNING, "modules.module[" + i + "]", null,
+                    addViolation( problems, Severity.WARNING, Version.BASE, "modules.module[" + i + "]", null,
-        validateStringNotEmpty( "version", problems, Severity.ERROR, model.getVersion(), model );
+        validateStringNotEmpty( "version", problems, Severity.ERROR, Version.BASE, model.getVersion(), model );
-                    addViolation( problems, Severity.ERROR, "modules.module[" + i + "]", null,
+                    addViolation( problems, Severity.ERROR, Version.V20, "modules.module[" + i + "]", null,
-            validateBannedCharacters( "version", problems, errOn31, model.getVersion(), null, model,
+            validateBannedCharacters( "version", problems, errOn31, Version.V20, model.getVersion(), null, model,
-            validateProperSnapshotVersion( "version", problems, errOn31, model.getVersion(), null, model );
+            validate20ProperSnapshotVersion( "version", problems, errOn31, Version.V20, model.getVersion(), null, model );
-                    validateStringNotEmpty( "build.plugins.plugin.artifactId", problems, Severity.ERROR,
+                    validateStringNotEmpty( "build.plugins.plugin.artifactId", problems, Severity.ERROR, Version.V20,
-                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, Severity.ERROR, p.getGroupId(),
+                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20, p.getGroupId(),
-                    validatePluginVersion( "build.plugins.plugin.version", problems, p.getVersion(), p.getKey(), p,
+                    validate20PluginVersion( "build.plugins.plugin.version", problems, p.getVersion(), p.getKey(), p,
-                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, p.getInherited(), p.getKey(),
+                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, Version.V20, p.getInherited(), p.getKey(),
-                    validateBoolean( "build.plugins.plugin.extensions", problems, errOn30, p.getExtensions(),
+                    validateBoolean( "build.plugins.plugin.extensions", problems, errOn30, Version.V20, p.getExtensions(),
-                    validateEffectivePluginDependencies( problems, p, request );
+                    validate20EffectivePluginDependencies( problems, p, request );
-                validateResources( problems, build.getResources(), "build.resources.resource", request );
+                validate20RawResources( problems, build.getResources(), "build.resources.resource", request );
-                validateResources( problems, build.getTestResources(), "build.testResources.testResource", request );
+                validate20RawResources( problems, build.getTestResources(), "build.testResources.testResource", request );
-                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", problems, Severity.ERROR,
+                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", problems, Severity.ERROR, Version.V20,
-                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", problems, Severity.ERROR,
+                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20,
-                    validateStringNotEmpty( "reporting.plugins.plugin.version", problems, errOn31, p.getVersion(),
+                    validateStringNotEmpty( "reporting.plugins.plugin.version", problems, errOn31, Version.V20, p.getVersion(),
-                validateRepository( problems, repository, "repositories.repository", request );
+                validate20EffectiveRepository( problems, repository, "repositories.repository", request );
-                validateRepository( problems, repository, "pluginRepositories.pluginRepository", request );
+                validate20EffectiveRepository( problems, repository, "pluginRepositories.pluginRepository", request );
-                    addViolation( problems, Severity.ERROR, "distributionManagement.status", null,
+                    addViolation( problems, Severity.ERROR, Version.V20, "distributionManagement.status", null,
-                validateRepository( problems, distMgmt.getRepository(), "distributionManagement.repository", request );
-                validateRepository( problems, distMgmt.getSnapshotRepository(),
+                validate20EffectiveRepository( problems, distMgmt.getRepository(), "distributionManagement.repository", request );
+                validate20EffectiveRepository( problems, distMgmt.getSnapshotRepository(),
-    private void validateRawDependencies( ModelProblemCollector problems, List<Dependency> dependencies, String prefix,
+    private void validate20RawDependencies( ModelProblemCollector problems, List<Dependency> dependencies, String prefix,
-                    addViolation( problems, Severity.WARNING, prefix + ".type", key,
+                    addViolation( problems, Severity.WARNING, Version.V20, prefix + ".type", key,
-                    addViolation( problems, errOn30, prefix + ".classifier", key,
+                    addViolation( problems, errOn30, Version.V20, prefix + ".classifier", key,
-                        addViolation( problems, Severity.WARNING, prefix + ".systemPath", key,
+                        addViolation( problems, Severity.WARNING, Version.V20, prefix + ".systemPath", key,
-                        addViolation( problems, Severity.WARNING, prefix + ".systemPath", key,
+                        addViolation( problems, Severity.WARNING, Version.V20, prefix + ".systemPath", key,
-                addViolation( problems, errOn31, prefix + ".(groupId:artifactId:type:classifier)", null,
+                addViolation( problems, errOn31, Version.V20, prefix + ".(groupId:artifactId:type:classifier)", null,
-                validateBoolean( prefix + "optional", problems, errOn30, d.getOptional(), d.getManagementKey(), d );
+                validateBoolean( prefix + "optional", problems, errOn30, Version.V20, d.getOptional(), d.getManagementKey(), d );
-                    validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey(), d );
+                    validateVersion( prefix + "version", problems, errOn30, Version.V20, d.getVersion(), d.getManagementKey(), d );
-                    validateEnum( prefix + "scope", problems, Severity.WARNING, d.getScope(), d.getManagementKey(), d,
+                    validateEnum( prefix + "scope", problems, Severity.WARNING, Version.V20, d.getScope(), d.getManagementKey(), d,
-    private void validateEffectivePluginDependencies( ModelProblemCollector problems, Plugin plugin,
+    private void validate20EffectivePluginDependencies( ModelProblemCollector problems, Plugin plugin,
-                validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey(), d );
+                validateVersion( prefix + "version", problems, errOn30, Version.BASE, d.getVersion(), d.getManagementKey(), d );
-                validateEnum( prefix + "scope", problems, errOn30, d.getScope(), d.getManagementKey(), d, "compile",
+                validateEnum( prefix + "scope", problems, errOn30, Version.BASE, d.getScope(), d.getManagementKey(), d, "compile",
-        validateId( prefix + "artifactId", problems, Severity.ERROR, d.getArtifactId(), d.getManagementKey(), d );
+        validateId( prefix + "artifactId", problems, Severity.ERROR, Version.BASE, d.getArtifactId(), d.getManagementKey(), d );
-        validateId( prefix + "groupId", problems, Severity.ERROR, d.getGroupId(), d.getManagementKey(), d );
+        validateId( prefix + "groupId", problems, Severity.ERROR, Version.BASE, d.getGroupId(), d.getManagementKey(), d );
-            validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, d.getType(), d.getManagementKey(), d );
+            validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, Version.BASE, d.getType(), d.getManagementKey(), d );
-            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, d.getVersion(), d.getManagementKey(),
+            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, Version.BASE, d.getVersion(), d.getManagementKey(),
-                addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "is missing.",
+                addViolation( problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "is missing.",
-                    addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(),
+                    addViolation( problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(),
-                    addViolation( problems, Severity.WARNING, prefix + "systemPath", d.getManagementKey(), msg, d );
+                    addViolation( problems, Severity.WARNING, Version.BASE, prefix + "systemPath", d.getManagementKey(), msg, d );
-            addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "must be omitted."
+            addViolation( problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "must be omitted."
-                validateId( prefix + "exclusions.exclusion.groupId", problems, Severity.WARNING,
+                validateId( prefix + "exclusions.exclusion.groupId", problems, Severity.WARNING, Version.V20,
-                validateId( prefix + "exclusions.exclusion.artifactId", problems, Severity.WARNING,
+                validateId( prefix + "exclusions.exclusion.artifactId", problems, Severity.WARNING, Version.V20,
-    private void validateRepositories( ModelProblemCollector problems, List<Repository> repositories, String prefix,
+    private void validateRawRepositories( ModelProblemCollector problems, List<Repository> repositories, String prefix,
-            validateStringNotEmpty( prefix + ".id", problems, Severity.ERROR, repository.getId(), repository );
+            validateStringNotEmpty( prefix + ".id", problems, Severity.ERROR, Version.V20, repository.getId(), repository );
-            validateStringNotEmpty( prefix + "[" + repository.getId() + "].url", problems, Severity.ERROR,
+            validateStringNotEmpty( prefix + "[" + repository.getId() + "].url", problems, Severity.ERROR, Version.V20,
-                addViolation( problems, errOn30, prefix + ".id", null, "must be unique: " + repository.getId() + " -> "
+                addViolation( problems, errOn30, Version.V20, prefix + ".id", null, "must be unique: " + repository.getId() + " -> "
-    private void validateRepository( ModelProblemCollector problems, Repository repository, String prefix,
+    private void validate20EffectiveRepository( ModelProblemCollector problems, Repository repository, String prefix,
-            validateBannedCharacters( prefix + ".id", problems, errOn31, repository.getId(), null, repository,
+            validateBannedCharacters( prefix + ".id", problems, errOn31, Version.V20, repository.getId(), null, repository,
-                addViolation( problems, errOn31, prefix + ".id", null, "must not be 'local'"
+                addViolation( problems, errOn31, Version.V20, prefix + ".id", null, "must not be 'local'"
-                addViolation( problems, Severity.WARNING, prefix + ".layout", repository.getId(),
+                addViolation( problems, Severity.WARNING, Version.V20, prefix + ".layout", repository.getId(),
-    private void validateResources( ModelProblemCollector problems, List<Resource> resources, String prefix,
+    private void validate20RawResources( ModelProblemCollector problems, List<Resource> resources, String prefix,
-            validateStringNotEmpty( prefix + ".directory", problems, Severity.ERROR, resource.getDirectory(),
+            validateStringNotEmpty( prefix + ".directory", problems, Severity.ERROR, Version.V20, resource.getDirectory(),
-            validateBoolean( prefix + ".filtering", problems, errOn30, resource.getFiltering(),
+            validateBoolean( prefix + ".filtering", problems, errOn30, Version.V20, resource.getFiltering(),
-        return validateId( fieldName, problems, Severity.ERROR, id, null, tracker );
+        return validateId( fieldName, problems, Severity.ERROR, Version.BASE, id, null, tracker );
-    private boolean validateId( String fieldName, ModelProblemCollector problems, Severity severity, String id,
+    private boolean validateId( String fieldName, ModelProblemCollector problems, Severity severity, Version version, String id,
-        if ( !validateStringNotEmpty( fieldName, problems, severity, id, sourceHint, tracker ) )
+        if ( !validateStringNotEmpty( fieldName, problems, severity, version, id, sourceHint, tracker ) )
-                addViolation( problems, severity, fieldName, sourceHint, "with value '" + id
+                addViolation( problems, severity, version, fieldName, sourceHint, "with value '" + id
-    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-        addViolation( problems, severity, fieldName, null, "contains an expression but should be a constant.",
+        addViolation( problems, severity, version, fieldName, null, "contains an expression but should be a constant.",
-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-        return validateStringNotEmpty( fieldName, problems, severity, string, null, tracker );
+        return validateStringNotEmpty( fieldName, problems, severity, version, string, null, tracker );
-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity, Version version, 
-        if ( !validateNotNull( fieldName, problems, severity, string, sourceHint, tracker ) )
+        if ( !validateNotNull( fieldName, problems, severity, version, string, sourceHint, tracker ) )
-        addViolation( problems, severity, fieldName, sourceHint, "is missing.", tracker );
+        addViolation( problems, severity, version, fieldName, sourceHint, "is missing.", tracker );
-    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-        addViolation( problems, severity, fieldName, sourceHint, "is missing.", tracker );
+        addViolation( problems, severity, version, fieldName, sourceHint, "is missing.", tracker );
-    private boolean validateBoolean( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validateBoolean( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-        addViolation( problems, severity, fieldName, sourceHint, "must be 'true' or 'false' but is '" + string + "'.",
+        addViolation( problems, severity, version, fieldName, sourceHint, "must be 'true' or 'false' but is '" + string + "'.",
-    private boolean validateEnum( String fieldName, ModelProblemCollector problems, Severity severity, String string,
+    private boolean validateEnum( String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string,
-        addViolation( problems, severity, fieldName, sourceHint, "must be one of " + values + " but is '" + string
+        addViolation( problems, severity, version, fieldName, sourceHint, "must be one of " + values + " but is '" + string
-    private boolean validateBannedCharacters( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validateBannedCharacters( String fieldName, ModelProblemCollector problems, Severity severity, Version version, 
-                    addViolation( problems, severity, fieldName, sourceHint,
+                    addViolation( problems, severity, version, fieldName, sourceHint,
-    private boolean validateVersion( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validateVersion( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-            addViolation( problems, severity, fieldName, sourceHint,
+            addViolation( problems, severity, version, fieldName, sourceHint,
-        if ( !validateBannedCharacters( fieldName, problems, severity, string, sourceHint, tracker,
+        if ( !validateBannedCharacters( fieldName, problems, severity, version, string, sourceHint, tracker,
-    private boolean validateProperSnapshotVersion( String fieldName, ModelProblemCollector problems, Severity severity,
+    private boolean validate20ProperSnapshotVersion( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-            addViolation( problems, severity, fieldName, sourceHint, "uses an unsupported snapshot version format"
+            addViolation( problems, severity, version, fieldName, sourceHint, "uses an unsupported snapshot version format"
-    private boolean validatePluginVersion( String fieldName, ModelProblemCollector problems, String string,
+    private boolean validate20PluginVersion( String fieldName, ModelProblemCollector problems, String string,
-        if ( !validateVersion( fieldName, problems, errOn30, string, sourceHint, tracker ) )
+        if ( !validateVersion( fieldName, problems, errOn30, Version.V20, string, sourceHint, tracker ) )
-            addViolation( problems, errOn30, fieldName, sourceHint, "must be a valid version but is '" + string + "'.",
+            addViolation( problems, errOn30, Version.V20, fieldName, sourceHint, "must be a valid version but is '" + string + "'.",
-    private static void addViolation( ModelProblemCollector problems, Severity severity, String fieldName,
+    private static void addViolation( ModelProblemCollector problems, Severity severity, Version version, String fieldName,
-        problems.add( severity, buffer.toString(), getLocation( fieldName, tracker ), null );
+        problems.add( new ModelProblemCollectorRequest( severity, version ).setMessage( buffer.toString() ).setLocation( getLocation( fieldName, tracker )));

INS26 INS26 INS40 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 UPD42 INS44 UPD42 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV8 INS42 MOV8 INS42 INS32 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 MOV41 MOV41 INS42 INS42 MOV32 MOV44 MOV44 INS42 INS42 INS42 INS40 INS32 INS42 INS40 INS40 INS40 INS40 INS40 MOV32 INS40 MOV32 INS40 MOV32 INS40 MOV32 UPD42 UPD42 UPD42 INS40 MOV32 UPD42 INS40 MOV32 INS40 INS40 MOV32 INS42 INS40 INS40 INS40 INS40 INS40 INS42 MOV27 INS42 INS40 MOV27 INS14 UPD42 MOV42 MOV32 INS40 INS43 INS42 INS42 INS40 INS40 MOV32 INS40 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 INS40 INS40 MOV32 INS42 INS40 MOV32 INS40 MOV27 MOV32 INS40 INS40 INS40 INS40 INS40 INS42 INS42 MOV42 UPD42 INS40 UPD42 UPD42 INS40 INS40 INS40 INS40 INS40 UPD42 INS40 INS40 UPD42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS40 INS40 MOV27 MOV32 UPD42 INS40 INS40 DEL42 DEL42 DEL33