o pull from trunky dunk dunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@767707 13f79535-47bb-0310-9956-ffa450edef68

-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
- * agreements. See the NOTICE file distributed with this work for additional information regarding
- * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance with the License. You may obtain a
- * copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+import java.util.HashMap;
+import java.util.Map;
-import org.apache.maven.toolchain.model.PersistedToolchains;
-import org.apache.maven.toolchain.model.io.xpp3.MavenToolchainsXpp3Reader;
-import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
- * 
-@Component(role = ToolchainManager.class)
+@Component( role = ToolchainManager.class )
-    implements ToolchainManager, ToolchainManagerPrivate
-{
-    @Requirement
-    private Logger logger;
-    
-    @Requirement
-    private PlexusContainer container;
+    implements ToolchainManager
-    public ToolchainPrivate[] getToolchainsForType( String type )
-        throws MisconfiguredToolchainException
-    {
-        try
-        {
-            PersistedToolchains pers = readToolchainSettings();
-            Map<String, ToolchainFactory> factories = container.lookupMap( ToolchainFactory.class );
-            List toRet = new ArrayList();
-            if ( pers != null )
-            {
-                List lst = pers.getToolchains();
-                if ( lst != null )
-                {
-                    Iterator it = lst.iterator();
-                    while ( it.hasNext() )
-                    {
-                        ToolchainModel toolchainModel = (ToolchainModel) it.next();
-                        ToolchainFactory fact = factories.get( toolchainModel.getType() );
-                        if ( fact != null )
-                        {
-                            toRet.add( fact.createToolchain( toolchainModel ) );
-                        }
-                        else
-                        {
-                            logger.error( "Missing toolchain factory for type:" + toolchainModel.getType() + ". Possibly caused by misconfigured project." );
-                        }
-                    }
-                }
-            }
-            for ( ToolchainFactory toolchainFactory : factories.values() )
-            {
-                ToolchainPrivate tool = toolchainFactory.createDefaultToolchain();
-                if ( tool != null )
-                {
-                    toRet.add( tool );
-                }
-            }
-            ToolchainPrivate[] tc = new ToolchainPrivate[toRet.size()];
-            return (ToolchainPrivate[]) toRet.toArray( tc );
-        }
-        catch ( ComponentLookupException ex )
-        {
-            logger.fatalError( "Error in component lookup", ex );
-        }
-        return new ToolchainPrivate[0];
-    }
+{
+
+    @Requirement
+    Logger logger;
+
+    @Requirement( role = ToolchainFactory.class )
+    Map<String, ToolchainFactory> factories;
-        if ( "javac".equals( type ) )
-        {
-            //HACK to make compiler plugin happy
-            type = "jdk";
-        }
-        Object obj = context.get( getStorageKey( type ) );
-        ToolchainModel model = (ToolchainModel) obj;
+
+        ToolchainModel model = (ToolchainModel) context.get( getStorageKey( type ) );
-                ToolchainFactory fact = container.lookup( ToolchainFactory.class, type );
-                return fact.createToolchain( model );
-            }
-            catch ( ComponentLookupException ex )
-            {
-                logger.fatalError( "Error in component lookup", ex );
+                ToolchainFactory fact = factories.get( type );
+                if ( fact != null )
+                {
+                    return fact.createToolchain( model );
+                }
+                else
+                {
+                    logger.error( "Missing toolchain factory for type: " + type
+                        + ". Possibly caused by misconfigured project." );
+                }
+
-    private MavenProject getCurrentProject( MavenSession session )
+    Map retrieveContext( MavenSession session )
-        //use reflection since MavenSession.getCurrentProject() is not part of 2.0.8
-        try
-        {
-            Method meth = session.getClass().getMethod( "getCurrentProject", new Class[0] );
-            return (MavenProject) meth.invoke( session );
-        }
-        catch ( Exception ex )
-        {
-            //just ignore, we're running in pre- 2.0.9
-        }
-        return null;
-    }
+        Map context = null;
-    private Map retrieveContext( MavenSession session )
-    {
-        if ( session == null )
+        if ( session != null )
-            return new HashMap();
-        }
-        PluginDescriptor desc = new PluginDescriptor();
-        desc.setGroupId( PluginDescriptor.getDefaultPluginGroupId() );
-        desc.setArtifactId( PluginDescriptor.getDefaultPluginArtifactId( "toolchains" ) );
-        MavenProject current = getCurrentProject( session );
-        if ( current != null )
-        {
-            return session.getPluginContext( desc, current );
+            PluginDescriptor desc = new PluginDescriptor();
+            desc.setGroupId( PluginDescriptor.getDefaultPluginGroupId() );
+            desc.setArtifactId( PluginDescriptor.getDefaultPluginArtifactId( "toolchains" ) );
+            MavenProject current = session.getCurrentProject();
+            if ( current != null )
+            {
+                context = session.getPluginContext( desc, current );
+            }
-        return new HashMap();
-    }
-    public void storeToolchainToBuildContext( ToolchainPrivate toolchain, MavenSession session )
-    {
-        Map context = retrieveContext( session );
-        context.put( getStorageKey( toolchain.getType() ), toolchain.getModel() );
+        return ( context != null ) ? context : new HashMap();
-        return "toolchain-" + type; //NOI18N
+        return "toolchain-" + type; // NOI18N
-    private PersistedToolchains readToolchainSettings()
-        throws MisconfiguredToolchainException
-    {
-        //TODO how to point to the local path?
-        File tch = new File( System.getProperty( "user.home" ), ".m2/toolchains.xml" );
-        if ( tch.exists() )
-        {
-            MavenToolchainsXpp3Reader reader = new MavenToolchainsXpp3Reader();
-            InputStreamReader in = null;
-            try
-            {
-                in = new InputStreamReader( new BufferedInputStream( new FileInputStream( tch ) ) );
-                return reader.read( in );
-            }
-            catch ( Exception ex )
-            {
-                throw new MisconfiguredToolchainException( "Cannot read toolchains file at " + tch.getAbsolutePath(), ex );
-            }
-            finally
-            {
-                if ( in != null )
-                {
-                    try
-                    {
-                        in.close();
-                    }
-                    catch ( IOException ex )
-                    {
-                    }
-                }
-                //                IOUtil.close( in );
-            }
-        }
-        else
-        {
-            //TODO log the fact that no toolchains file was found.
-        }
-        return null;
-    }
-}
+}

INS23 INS77 MOV74 INS59 INS8 INS42 INS80 MOV42 INS60 INS25 MOV41 INS42 MOV57 MOV43 INS43 INS59 INS27 MOV8 INS16 UPD42 INS11 INS42 INS42 INS33 INS42 INS33 INS36 INS42 MOV14 MOV43 MOV32 INS8 MOV43 INS27 MOV60 INS25 INS21 INS42 INS33 MOV43 MOV27 INS8 INS8 INS42 INS7 MOV41 MOV21 INS42 MOV32 UPD42 UPD42 UPD42 INS27 INS45 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL41 DEL8 DEL31 DEL45 DEL42 DEL42 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL45 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL33 DEL41 DEL8 DEL31 DEL83 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL41 DEL42 DEL43 DEL14 DEL41 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31