o slight lifecycle mixup with executions, temporary fix but the bootstrap works


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@771991 13f79535-47bb-0310-9956-ffa450edef68

-                System.out.println( mojoExecution.getConfiguration() );
+//                System.out.println( mojoExecution.getConfiguration() );
-        // 4. 
+        // 4.
+        
+        //TODO: need to separate the lifecycles
+        
-        {   
+        {               
-            phaseToMojoMapping.put( phase, mojos );    
-            
-            // We only want to execute up to and including the specified lifecycle phase.
-            if ( phase.equals( lifecyclePhase ) )
-            {
-                break;
-            }
+            phaseToMojoMapping.put( phase, mojos );                
-              
-        // 5. 
+         
+        // 5. Just build up the list of mojos that will execute for every phase.
-        // We are only interested in the phases that correspond to the lifecycle we are trying to run. If we are running the "clean"
-        // lifecycle we are not interested in goals -- like "generate-sources -- that belong to the default lifecycle.
+        // This will be useful for having the complete build plan and then we can filter/optimize later.
-                if ( execution.getPhase() != null && execution.getPhase().equals( lifecyclePhase ) )
+                if ( execution.getPhase() != null )
-                        phaseToMojoMapping.get( execution.getPhase() ).add( s );
+
+                        if ( phaseToMojoMapping.get( execution.getPhase() ) == null )
+                        {
+                            // This is happening because executions in the POM are getting mixed into the clean lifecycle
+                            // So for the lifecycle mapping we need a map with the phases as keys so we can easily check
+                            // if this phase belongs to the given lifecycle. this shows the system is messed up. this
+                            // shouldn't happen.
+                            System.out.println( execution.getPhase() + "?????????????");
+                            phaseToMojoMapping.put( execution.getPhase(), new ArrayList<String>() );
+                        }
+                        
+                        phaseToMojoMapping.get( execution.getPhase() ).add( s );                        
-                        // need to know if this plugin belongs to a phase in the lifecycle that's running
-                        
-                        //TODO Here we need to break when we have reached the desired phase.
-               
-        List<MojoExecution> lifecyclePlan = new ArrayList<MojoExecution>(); 
-                        
-        // We need to turn this into a set of MojoExecutions
-        for( List<String> mojos : phaseToMojoMapping.values() )
+
+        // 6. 
+        //
+        // We are only interested in the phases that correspond to the lifecycle we are trying to run. If we are running the "clean"
+        // lifecycle we are not interested in goals -- like "generate-sources -- that belong to the default lifecycle.
+        //        
+        
+        // We only want to execute up to and including the specified lifecycle phase.
+        // if ( phase.equals( lifecyclePhase ) )
+        //{
+        //    break;
+        //}
+        
+        List<String> phasesWithMojosToExecute = new ArrayList<String>();
+        
+        for( String phase : phaseToMojoMapping.keySet() )
-            for( String mojo : mojos )
+            phasesWithMojosToExecute.addAll( phaseToMojoMapping.get( phase ) );
+            
+            if ( phase.equals( lifecyclePhase ) )
-                // These are bits that look like this:
-                //
-                // org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process
-                //
-                MojoDescriptor mojoDescriptor = getMojoDescriptor( mojo, project, session.getLocalRepository() );                                
-                
-                MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
-                                
-                String g = mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId();
-                
-                String a = mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId();
-                
-                Plugin p = project.getPlugin( g + ":" + a );
-                
-                for( PluginExecution e : p.getExecutions() )
+                break;
+            }
+        }        
+        
+        
+        // 7. Now we create the correct configuration for the mojo to execute.
+        //TODO: this needs to go to the model builder.
+        
+        List<MojoExecution> lifecyclePlan = new ArrayList<MojoExecution>();
+
+        for ( String mojo : phasesWithMojosToExecute )
+        {
+            // These are bits that look like this:
+            //
+            // org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process
+            //
+            MojoDescriptor mojoDescriptor = getMojoDescriptor( mojo, project, session.getLocalRepository() );
+
+            MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
+
+            String g = mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId();
+
+            String a = mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId();
+
+            Plugin p = project.getPlugin( g + ":" + a );
+
+            for ( PluginExecution e : p.getExecutions() )
+            {
+                for ( String goal : e.getGoals() )
-                    for( String goal : e.getGoals() )
+                    if ( mojoDescriptor.getGoal().equals( goal ) )
-                        if ( mojoDescriptor.getGoal().equals( goal ) )
-                        {
-                            Xpp3Dom executionConfiguration = (Xpp3Dom) e.getConfiguration();
+                        Xpp3Dom executionConfiguration = (Xpp3Dom) e.getConfiguration();
-                            Xpp3Dom mojoConfiguration =
-                                extractMojoConfiguration( executionConfiguration, mojoDescriptor );
+                        Xpp3Dom mojoConfiguration = extractMojoConfiguration( executionConfiguration, mojoDescriptor );
-                            mojoExecution.setConfiguration( mojoConfiguration );
-                        }
+                        mojoExecution.setConfiguration( mojoConfiguration );
-                
-                lifecyclePlan.add( mojoExecution );
-        }  
+
+            lifecyclePlan.add( mojoExecution );
+        }

MOV60 INS60 MOV70 MOV74 INS59 UPD42 INS42 INS14 INS43 INS42 UPD42 INS21 MOV25 INS74 INS42 INS32 INS43 INS43 INS42 INS42 INS32 MOV27 INS42 INS42 INS42 INS42 INS42 INS25 INS27 INS8 INS32 INS33 INS21 INS21 INS42 INS42 INS32 MOV32 INS32 INS42 INS42 INS40 UPD42 INS27 INS42 INS42 INS32 INS14 MOV32 INS45 INS42 INS42 INS74 INS43 INS43 INS42 INS42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL27 DEL42 DEL42