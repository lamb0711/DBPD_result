Resolving: MNG-1021, MNG-1049

o Added check for projectArtifact.isResolved() before attempting to read the model from it within DefaultMavenProjectBuilder, otherwise, stub out a dummy model just like if an ArtifactResolutionException occurs.

o Disabled metadata handling for AttachedArtifact...attachments should be slaves to the main artifact, deriving version info and metadata from it.

o Cleaned up entry for it2003 in maven-core-it/README.txt...that test has been removed.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@295069 13f79535-47bb-0310-9956-ffa450edef68

+        // if the artifact is not a POM, we need to construct a POM artifact based on the artifact parameter given.
-            // TODO: can't assume artifact is a POM
-                model = readModel( file );
-
-                String downloadUrl = null;
-                ArtifactStatus status = ArtifactStatus.NONE;
-
-                DistributionManagement distributionManagement = model.getDistributionManagement();
-                if ( distributionManagement != null )
+                if ( projectArtifact.isResolved() )
-                    downloadUrl = distributionManagement.getDownloadUrl();
+                    model = readModel( file );
-                    status = ArtifactStatus.valueOf( distributionManagement.getStatus() );
-                }
+                    String downloadUrl = null;
+                    ArtifactStatus status = ArtifactStatus.NONE;
-                // TODO: configurable actions dependant on status
-                if ( !projectArtifact.isSnapshot() && status.compareTo( ArtifactStatus.DEPLOYED ) < 0 )
-                {
-                    // use default policy (enabled, daily update, warn on bad checksum)
-                    ArtifactRepositoryPolicy policy = new ArtifactRepositoryPolicy();
-                    // TODO: re-enable [MNG-798/865]
-                    policy.setUpdatePolicy( ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER );
-
-                    if ( policy.checkOutOfDate( new Date( file.lastModified() ) ) )
+                    DistributionManagement distributionManagement = model.getDistributionManagement();
+                    if ( distributionManagement != null )
-                        getLogger().info(
-                            projectArtifact.getArtifactId() + ": updating metadata due to status of '" + status + "'" );
-                        try
+                        downloadUrl = distributionManagement.getDownloadUrl();
+
+                        status = ArtifactStatus.valueOf( distributionManagement.getStatus() );
+                    }
+
+                    // TODO: configurable actions dependant on status
+                    if ( !projectArtifact.isSnapshot() && status.compareTo( ArtifactStatus.DEPLOYED ) < 0 )
+                    {
+                        // use default policy (enabled, daily update, warn on bad checksum)
+                        ArtifactRepositoryPolicy policy = new ArtifactRepositoryPolicy();
+                        // TODO: re-enable [MNG-798/865]
+                        policy.setUpdatePolicy( ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER );
+
+                        if ( policy.checkOutOfDate( new Date( file.lastModified() ) ) )
-                            projectArtifact.setResolved( false );
-                            artifactResolver.resolveAlways( projectArtifact, remoteArtifactRepositories,
-                                                            localRepository );
-                        }
-                        catch ( ArtifactResolutionException e )
-                        {
-                            getLogger().warn( "Error updating POM - using existing version" );
-                            getLogger().debug( "Cause", e );
+                            getLogger().info(
+                                projectArtifact.getArtifactId() + ": updating metadata due to status of '" + status + "'" );
+                            try
+                            {
+                                projectArtifact.setResolved( false );
+                                artifactResolver.resolveAlways( projectArtifact, remoteArtifactRepositories,
+                                                                localRepository );
+                            }
+                            catch ( ArtifactResolutionException e )
+                            {
+                                getLogger().warn( "Error updating POM - using existing version" );
+                                getLogger().debug( "Cause", e );
+                            }
-                }
-                // TODO: this is gross. Would like to give it the whole model, but maven-artifact shouldn't depend on that
-                // Can a maven-core implementation of the Artifact interface store it, and be used in the exceptions?
-                if ( downloadUrl != null )
-                {
-                    projectArtifact.setDownloadUrl( downloadUrl );
+                    // TODO: this is gross. Would like to give it the whole model, but maven-artifact shouldn't depend on that
+                    // Can a maven-core implementation of the Artifact interface store it, and be used in the exceptions?
+                    if ( downloadUrl != null )
+                    {
+                        projectArtifact.setDownloadUrl( downloadUrl );
+                    }
+                    else
+                    {
+                        projectArtifact.setDownloadUrl( model.getUrl() );
+                    }
-                    projectArtifact.setDownloadUrl( model.getUrl() );
+                    model = createStubModel( projectArtifact );
-
-                getLogger().warn( "\n  ***** Using defaults for missing POM " + projectArtifact.getId() + " *****\n" );
-
-                model = new Model();
-                model.setModelVersion( "4.0.0" );
-                model.setArtifactId( projectArtifact.getArtifactId() );
-                model.setGroupId( projectArtifact.getGroupId() );
-                model.setVersion( projectArtifact.getVersion() );
-                // TODO: not correct in some instances
-                model.setPackaging( projectArtifact.getType() );
-
-                model.setDistributionManagement( new DistributionManagement() );
-                model.getDistributionManagement().setStatus( ArtifactStatus.GENERATED.toString() );
-
-/* TODO: we should only do this if we can verify the existence of the JAR itself
-                File file = artifact.getFile();
-                file.getParentFile().mkdirs();
-
-                FileWriter writer = null;
-                try
-                {
-                    writer = new FileWriter( file );
-
-                    MavenXpp3Writer w = new MavenXpp3Writer();
-                    w.write( writer, model );
-                }
-                catch ( IOException ioe )
-                {
-                    getLogger().warn( "Attempted to write out a temporary generated POM, but failed", ioe );
-                }
-                finally
-                {
-                    IOUtil.close( writer );
-                }
-*/
+                model = createStubModel( projectArtifact );
+    private Model createStubModel(Artifact projectArtifact)
+    {
+        getLogger().warn( "\n  ***** Using defaults for missing POM " + projectArtifact.getId() + " *****\n" );
+
+        Model model = new Model();
+        model.setModelVersion( "4.0.0" );
+        model.setArtifactId( projectArtifact.getArtifactId() );
+        model.setGroupId( projectArtifact.getGroupId() );
+        model.setVersion( projectArtifact.getVersion() );
+        // TODO: not correct in some instances
+        model.setPackaging( projectArtifact.getType() );
+
+        model.setDistributionManagement( new DistributionManagement() );
+        model.getDistributionManagement().setStatus( ArtifactStatus.GENERATED.toString() );
+
+/* TODO: we should only do this if we can verify the existence of the JAR itself
+        File file = artifact.getFile();
+        file.getParentFile().mkdirs();
+
+        FileWriter writer = null;
+        try
+        {
+            writer = new FileWriter( file );
+
+            MavenXpp3Writer w = new MavenXpp3Writer();
+            w.write( writer, model );
+        }
+        catch ( IOException ioe )
+        {
+            getLogger().warn( "Attempted to write out a temporary generated POM, but failed", ioe );
+        }
+        finally
+        {
+            IOUtil.close( writer );
+        }
+*/
+        return model;
+    }
+

INS31 INS83 INS43 INS42 INS44 MOV8 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS59 INS42 INS42 INS42 MOV14 INS25 INS8 INS32 INS8 INS8 INS21 INS42 INS42 MOV21 MOV60 MOV60 MOV60 MOV25 MOV25 MOV25 INS21 INS7 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL7 DEL21