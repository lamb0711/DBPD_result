Reverted back previous checkin, which broke something in the assembly plugin.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@696326 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.builder.*;
+import org.apache.maven.project.builder.PomArtifactResolver;
+import org.apache.maven.project.builder.ProjectBuilder;
+import org.apache.maven.project.builder.PomInterpolatorTag;
+import org.apache.maven.project.builder.PomClassicTransformer;
-            List<Profile> activeProfiles;
-            try
-            {
-                activeProfiles = getActiveProfilesFromModel(new PomClassicDomainModel(
-                        new FileInputStream( projectDescriptor )).getModel(), config, projectDescriptor, true);
-            } catch (IOException e)
-            {
-                throw new ProjectBuildingException("", e.getMessage());
-            }
-
-            Properties activeProfileProperties = new Properties();
-            for(Profile profile : activeProfiles)
-            {
-                activeProfileProperties.putAll(profile.getProperties());
-            }
-
-                getSuperProject( config, projectDescriptor, true ).getModel() ), artifactResolver ), config,
-                    activeProfileProperties );
+                getSuperProject( config, projectDescriptor, true ).getModel() ), artifactResolver ), config );
-
-            project = buildMavenProject( project.getModel(), config, projectDescriptor, project.getParentFile(), activeProfiles);
+            project = buildInternal( project.getModel(), config, projectDescriptor, project.getParentFile(), true );
-
-            List<Profile> activeProfiles;
-            try
-            {
-                activeProfiles = this.getActiveProfilesFromModel(new PomClassicDomainModel( 
-                        new FileInputStream( artifact.getFile())).getModel(), config, artifact.getFile(), true);
-            } catch (IOException e)
-            {
-                throw new ProjectBuildingException("", e.getMessage());
-            }
-
-            Properties activeProfileProperties = new Properties();
-            for(Profile profile : activeProfiles)
-            {
-                activeProfileProperties.putAll(profile.getProperties());
-            }
-
-                config.getLocalRepository(), artifactRepositories, artifactResolver ), config, activeProfileProperties );
-            project = buildMavenProject( project.getModel(), config, artifact.getFile(), project.getParentFile(),
-                    activeProfiles);
+                config.getLocalRepository(), artifactRepositories, artifactResolver ), config );
+            project = buildInternal( project.getModel(), config, artifact.getFile(), project.getParentFile(), false );
-    private List<Profile> getActiveProfilesFromModel(Model model, ProjectBuilderConfiguration config,
-                                                     File projectDescriptor, boolean isReactorProject)
-                    throws ProjectBuildingException
+    private MavenProject buildInternal( Model model, ProjectBuilderConfiguration config, File projectDescriptor,
+                                        File parentDescriptor, boolean isReactorProject )
+        throws ProjectBuildingException
-
-        List<Profile> projectProfiles = new ArrayList<Profile>();
-        projectProfiles.addAll( profileAdvisor.applyActivatedProfiles( model, projectDescriptor,
-                                                                       isReactorProject, profileActivationContext ) );
-        projectProfiles.addAll( profileAdvisor.applyActivatedExternalProfiles( model, projectDescriptor,
-                                                                               externalProfileManager ) );
-        return projectProfiles;
-    }
-
-    private MavenProject buildMavenProject( Model model, ProjectBuilderConfiguration config, File projectDescriptor,
-                                        File parentDescriptor, List<Profile> projectProfiles )
-        throws ProjectBuildingException
-    {
-        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-
+        List<Profile> projectProfiles = new ArrayList<Profile>();
+        projectProfiles.addAll( profileAdvisor.applyActivatedProfiles( project.getModel(), project.getFile(),
+                                                                       isReactorProject, profileActivationContext ) );
+        projectProfiles.addAll( profileAdvisor.applyActivatedExternalProfiles( project.getModel(), project.getFile(),
+                                                                               externalProfileManager ) );
-        superProject.setActiveProfiles( getActiveProfilesFromModel(model, config, projectDescriptor, isReactorProject) );
+        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+
+        ProfileActivationContext profileActivationContext;
+        ProfileManager externalProfileManager = config.getGlobalProfileManager();
+        if ( externalProfileManager != null )
+        {
+            // used to trigger the caching of SystemProperties in the container context...
+            try
+            {
+                externalProfileManager.getActiveProfiles();
+            }
+            catch ( ProfileActivationException e )
+            {
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.",
+                                                    projectDescriptor, e );
+            }
+            profileActivationContext = externalProfileManager.getProfileActivationContext();
+        }
+        else
+        {
+            profileActivationContext = new DefaultProfileActivationContext( config.getExecutionProperties(), false );
+        }
+
+        List<Profile> superProjectProfiles = new ArrayList<Profile>();
+        superProjectProfiles.addAll( profileAdvisor.applyActivatedProfiles( model, projectDescriptor, isReactorProject,
+                                                                            profileActivationContext ) );
+        superProjectProfiles.addAll(
+            profileAdvisor.applyActivatedExternalProfiles( model, projectDescriptor, externalProfileManager ) );
+        superProject.setActiveProfiles( superProjectProfiles );
-                                                 ProjectBuilderConfiguration config, Properties profileProperties )
+                                                 ProjectBuilderConfiguration config )
-        if(profileProperties != null)
-        {
-            interpolatorProperties.addAll(InterpolatorProperty.toInterpolatorProperties( profileProperties,
-                    PomInterpolatorTag.SYSTEM_PROPERTIES.name()));
-        }
-        mavenProject.getProperties().putAll(profileProperties);
+

INS26 INS26 INS26 INS40 UPD40 INS40 INS40 MOV43 UPD42 MOV44 MOV44 MOV44 MOV43 MOV43 MOV42 MOV60 MOV60 MOV54 INS21 INS21 MOV21 MOV21 MOV21 MOV60 INS60 INS60 INS25 INS60 MOV21 MOV21 INS21 MOV21 MOV21 MOV42 INS32 INS32 MOV42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 MOV74 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS54 INS21 INS21 INS42 INS14 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 MOV42 INS42 INS8 INS12 INS7 INS7 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS42 INS14 INS43 MOV43 UPD42 INS9 UPD42 INS9 INS32 INS43 INS42 INS53 INS42 INS42 INS43 INS32 INS9 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL52 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL14 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL42 DEL44 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21