use directory scanner and a sane file copy routine to avoid reading the whole thing into memory first


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@178602 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.FileUtils;
-import org.codehaus.plexus.util.FileUtils;
-import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.util.DirectoryScanner;
-import java.io.ByteArrayOutputStream;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
+import java.util.Arrays;
-     * 
+     *
-     * 
+     *
+    private static final String[] EMPTY_STRING_ARRAY = {};
+
+    private static final String[] DEFAULT_INCLUDES = {"**/**"};
+
-                String source = (String) entry.getKey();
+                File source = (File) entry.getKey();
-                fileCopy( source, destinationFile.getPath() );
+                FileUtils.copyFile( source, destinationFile );
-            // If we only have a directory then we want to include
-            // everything we can find within that path.
+            DirectoryScanner scanner = new DirectoryScanner();
+            scanner.addDefaultExcludes();
-            String includesAsString = "**/**";
-
-            java.util.List includes = resource.getIncludes();
-            if ( includes != null && includes.size() > 0 )
+            scanner.setBasedir( resource.getDirectory() );
+            if ( resource.getIncludes() != null && !resource.getIncludes().isEmpty() )
-                includesAsString = StringUtils.join( includes.iterator(), "," );
-            }
-
-            List excludes = resource.getExcludes();
-
-            if ( excludes == null )
-            {
-                excludes = resource.getDefaultExcludes();
+                scanner.setIncludes( (String[]) resource.getIncludes().toArray( EMPTY_STRING_ARRAY ) );
-                excludes = new ArrayList( excludes );
-                excludes.addAll( resource.getDefaultExcludes() );
+                scanner.setIncludes( DEFAULT_INCLUDES );
+            }
+            if ( resource.getExcludes() != null && !resource.getExcludes().isEmpty() )
+            {
+                scanner.setExcludes( (String[]) resource.getExcludes().toArray( EMPTY_STRING_ARRAY ) );
-            String excludesAsString = StringUtils.join( excludes.iterator(), "," );
+            scanner.scan();
-            List files = FileUtils.getFileNames( resourceDirectory, includesAsString, excludesAsString, false );
-
-            for ( Iterator j = files.iterator(); j.hasNext(); )
+            List includedFiles = Arrays.asList( scanner.getIncludedFiles() );
+            for ( Iterator j = includedFiles.iterator(); j.hasNext(); )
-                String resourcePath = new File( resource.getDirectory(), name ).getPath();
-
-                resourceEntries.put( resourcePath, entryName );
+                resourceEntries.put( new File( resource.getDirectory(), name ), entryName );
-    public static byte[] fileRead( String fileName )
-        throws IOException
-    {
-        FileInputStream in = new FileInputStream( fileName );
-        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
-
-        int count;
-        byte[] b = new byte[512];
-        while ( ( count = in.read( b ) ) > 0 ) // blocking read
-        {
-            buffer.write( b, 0, count );
-        }
-
-        in.close();
-
-        byte[] content = buffer.toByteArray();
-
-        buffer.close();
-
-        return content;
-    }
-
-    public static void fileWrite( String fileName, byte[] data )
-        throws Exception
-    {
-        FileOutputStream out = new FileOutputStream( fileName );
-        out.write( data );
-        out.close();
-    }
-
-    public static void fileCopy( String inFileName, String outFileName )
-        throws Exception
-    {
-        byte[] content = fileRead( inFileName );
-        fileWrite( outFileName, content );
-    }
-

MOV26 UPD40 UPD40 UPD40 INS23 INS23 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 MOV43 MOV85 UPD42 MOV42 INS4 MOV43 MOV85 UPD42 MOV42 INS4 INS45 INS21 INS21 INS25 INS21 INS43 INS32 INS32 MOV27 MOV8 INS8 INS27 INS8 INS32 INS42 UPD42 INS14 INS42 INS42 INS42 INS42 INS32 INS38 INS21 INS27 INS38 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 INS43 INS43 INS42 INS42 INS32 INS32 INS32 INS32 INS32 MOV33 INS32 UPD42 UPD42 INS32 MOV32 MOV14 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 INS11 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS43 INS42 UPD42 MOV42 INS5 INS32 MOV42 UPD42 MOV42 INS5 INS32 INS42 MOV43 INS85 MOV32 UPD42 MOV42 UPD42 MOV42 MOV43 INS85 MOV32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL32 DEL45 DEL42 DEL32 DEL34 DEL27 DEL42 DEL32 DEL45 DEL32 DEL7 DEL40 DEL43 DEL42 DEL59 DEL60 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL32 DEL42 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL59 DEL60 DEL42 DEL9 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL83 DEL39 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31