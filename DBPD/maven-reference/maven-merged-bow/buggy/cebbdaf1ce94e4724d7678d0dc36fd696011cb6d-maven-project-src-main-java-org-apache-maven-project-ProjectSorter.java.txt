PR: MNG-870
MAke plugin discovery reactor aware



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@290887 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.ArtifactUtils;
+import java.util.Collections;
+import java.util.Comparator;
-    private ProjectSorter()
-    {
-        // no touchy...
-    }
+    private final DAG dag;
+
+    private final List sortedProjects;
+
+    private MavenProject topLevelProject;
-    public static List getSortedProjects( List projects )
+    public ProjectSorter( List projects )
-        DAG dag = new DAG();
+        dag = new DAG();
-            String id = getId( project.getGroupId(), project.getArtifactId() );
+            String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-            String id = getId( project.getGroupId(), project.getArtifactId() );
+            String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-                String dependencyId = getId( dependency.getGroupId(), dependency.getArtifactId() );
+                String dependencyId = ArtifactUtils.versionlessKey( dependency.getGroupId(),
+                                                                    dependency.getArtifactId() );
-                String parentId = getId( parent.getGroupId(), parent.getArtifactId() );
+                String parentId = ArtifactUtils.versionlessKey( parent.getGroupId(), parent.getArtifactId() );
-                    String pluginId = getId( plugin.getGroupId(), plugin.getArtifactId() );
+                    String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
+                        project.addProjectReference( (MavenProject) projectMap.get( pluginId ) );
+
-                    String pluginId = getId( plugin.getGroupId(), plugin.getArtifactId() );
+                    String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
+                        project.addProjectReference( (MavenProject) projectMap.get( pluginId ) );
+
-                String extensionId = getId( extension.getGroupId(), extension.getArtifactId() );
+                String extensionId = ArtifactUtils.versionlessKey( extension.getGroupId(), extension.getArtifactId() );
+                    project.addProjectReference( (MavenProject) projectMap.get( extensionId ) );
+
+        this.sortedProjects = Collections.unmodifiableList( sortedProjects );
+    }
+
+    // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
+    public MavenProject getTopLevelProject()
+    {
+        if ( topLevelProject == null )
+        {
+            List projectsByFile = new ArrayList( sortedProjects );
+
+            Collections.sort( projectsByFile, new ByProjectFileComparator() );
+
+            topLevelProject = (MavenProject) projectsByFile.get( 0 );
+        }
+
+        return topLevelProject;
+    }
+
+    public List getSortedProjects()
+    {
-    private static String getId( String groupId, String artifactId )
+    public boolean hasMultipleProjects()
-        return groupId + ":" + artifactId;
+        return sortedProjects.size() > 1;
+
+    public List getDependents( String id )
+    {
+        return dag.getParentLabels( id );
+    }
+
+    private static class ByProjectFileComparator
+        implements Comparator
+    {
+
+        public int compare( Object first, Object second )
+        {
+            MavenProject p1 = (MavenProject) first;
+            MavenProject p2 = (MavenProject) second;
+
+            String p1Path = p1.getFile().getAbsolutePath();
+            String p2Path = p2.getFile().getAbsolutePath();
+
+            int comparison = p1Path.length() - p2Path.length();
+
+            if ( comparison > 0 )
+            {
+                return 1;
+            }
+            else if ( comparison < 0 )
+            {
+                return -1;
+            }
+            else
+            {
+                return 0;
+            }
+        }
+    }
+

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS83 INS83 MOV43 INS59 INS83 INS83 MOV43 INS59 INS83 INS43 INS59 UPD42 INS83 INS43 INS42 INS8 UPD83 INS43 UPD42 INS83 INS39 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS83 INS42 INS43 INS31 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS25 INS41 INS42 MOV41 INS41 INS42 UPD42 INS41 INS42 INS83 INS39 INS42 INS44 MOV44 MOV8 INS7 INS7 INS27 INS8 INS42 INS27 INS32 INS43 INS42 INS43 UPD42 INS60 INS60 INS60 INS60 INS60 INS25 INS42 MOV14 INS22 INS32 INS42 INS33 INS60 INS21 INS21 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 MOV43 INS59 MOV43 INS59 INS39 INS59 INS27 INS8 INS25 INS52 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS7 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS34 INS41 INS27 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS11 INS43 INS42 INS43 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS34 INS42 INS34 INS41 INS41 UPD42 INS42 UPD42 INS42 INS43 INS42 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS34 INS34 UPD42 INS42 UPD42 INS42 INS8 MOV8 UPD42 INS42 INS32 INS21 MOV21 INS21 INS42 INS42 INS11 UPD42 INS42 INS32 UPD42 INS42 INS32 INS43 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL59 DEL60 DEL8 DEL42 DEL45 DEL42 DEL27 DEL41 DEL83 DEL83 DEL42 DEL31