Adding read/writeSettings() api to the maven-tools and the embedder along with unit tests in each place, and adding a cache object for the settings that is based on the build-context.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@510335 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.context.BuildContextManager;
+import org.apache.maven.settings.MavenSettingsBuilder;
+import java.io.Reader;
+    private BuildContextManager buildContextManager;
+
-
+    
+    
+    // ----------------------------------------------------------------------
+    // Settings
+    // ----------------------------------------------------------------------
+
+    public static Settings readSettingsFromFile( Reader reader )
+        throws SettingsConfigurationException, MavenEmbedderException, IOException
+    {
+        return readSettingsFromFile( reader, null );
+    }
+
+    public static Settings readSettingsFromFile( Reader reader, MavenEmbedderLogger logger )
+        throws SettingsConfigurationException, MavenEmbedderException, IOException
+    {
+        DefaultPlexusContainer container = null;
+
+        try
+        {
+            try
+            {
+                container = new DefaultPlexusContainer();
+            }
+            catch ( PlexusContainerException e )
+            {
+                throw new MavenEmbedderException( "Error starting container.", e );
+            }
+
+            if ( logger != null )
+            {
+                MavenEmbedderLoggerManager loggerManager = new MavenEmbedderLoggerManager(
+                                                                                           new PlexusLoggerAdapter(
+                                                                                                                    logger ) );
+
+                container.setLoggerManager( loggerManager );
+            }
+
+            MavenTools mavenTools;
+            try
+            {
+                mavenTools = (MavenTools) container.lookup( MavenTools.ROLE, container.getContainerRealm() );
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new MavenEmbedderException( "Error retrieving Maven tools.", e );
+            }
+
+            return mavenTools.readSettings( reader );
+        }
+        finally
+        {
+            if ( container != null )
+            {
+                container.dispose();
+            }
+        }
+    }
+
+    public static void writeSettings( Writer writer, Settings settings )
+        throws IOException, MavenEmbedderException
+    {
+        writeSettings( writer, settings, null );
+    }
+    
+    public static void writeSettings( Writer writer, Settings settings, MavenEmbedderLogger logger )
+        throws IOException, MavenEmbedderException
+    {
+        DefaultPlexusContainer container = null;
+
+        try
+        {
+            try
+            {
+                container = new DefaultPlexusContainer();
+            }
+            catch ( PlexusContainerException e )
+            {
+                throw new MavenEmbedderException( "Error starting container.", e );
+            }
+
+            if ( logger != null )
+            {
+                MavenEmbedderLoggerManager loggerManager = new MavenEmbedderLoggerManager( new PlexusLoggerAdapter( logger ) );
+
+                container.setLoggerManager( loggerManager );
+            }
+
+            MavenTools mavenTools;
+            try
+            {
+                mavenTools = (MavenTools) container.lookup( MavenTools.ROLE, container.getContainerRealm() );
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new MavenEmbedderException( "Error retrieving Maven tools.", e );
+            }
+
+            mavenTools.writeSettings( settings, writer );
+        }
+        finally
+        {
+            if ( container != null )
+            {
+                container.dispose();
+            }
+        }
+    }
-            request = defaultsPopulator.populateDefaults( request );
+            request = defaultsPopulator.populateDefaults( request, embedderRequest );
+    public static final File DEFAULT_GLOBAL_SETTINGS_FILE = MavenSettingsBuilder.DEFAULT_GLOBAL_SETTINGS_FILE;
+    
+    public static final File DEFAULT_USER_SETTINGS_FILE = MavenSettingsBuilder.DEFAULT_USER_SETTINGS_FILE;
+
+            
+            buildContextManager = (BuildContextManager) container.lookup( BuildContextManager.ROLE );
+            buildContextManager.clearBuildContext();
+            
+            container.release( buildContextManager );
+            
-                request = defaultsPopulator.populateDefaults( request );
+                request = defaultsPopulator.populateDefaults( request, embedderRequest );

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS23 INS23 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS54 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS33 INS42 INS42 INS33 INS54 INS25 INS60 INS54 INS41 INS25 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS54 INS25 INS60 INS54 INS21 INS25 INS21 INS21 INS21 INS8 INS12 INS27 INS8 INS43 INS59 INS8 INS12 INS32 INS27 INS8 INS8 INS12 INS27 INS8 INS43 INS59 INS8 INS12 INS32 INS27 INS8 INS7 INS32 INS32 INS21 INS44 INS8 INS42 INS33 INS60 INS21 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS44 INS8 INS42 INS33 INS60 INS21 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS43 INS59 INS32 INS7 INS43 INS42 INS53 INS32 INS7 INS43 INS42 INS53 INS43 INS59 INS32 INS7 INS43 INS42 INS53 INS32 INS42 INS43 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS43 INS45 INS42 INS43 INS14 INS43 INS32 INS43 INS45 INS42 INS43 INS43 INS45 INS42 INS43 INS14 INS43 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42