o Cleaning up the code style a bit:
 - removing usage of this. as a prefix for referencing local variables
 - renaming public_, private_ and protected_ to showPublic, etc.
 - removing usage of final.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@239601 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import java.util.ArrayList;
+    // ----------------------------------------------------------------------
+    // Mojo Parameters
+    // ----------------------------------------------------------------------
+
-    private boolean package_ = true;
+    private boolean showPackage = true;
+
+    /**
+     * Shows only protected and public classes and members.
+     * See <a href="http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html#protected">protected</a>.
+     *
+     * @parameter expression="${protected}"
+     * default-value="false"
+     */
+    private boolean showProtected = false;
-    private boolean private_ = false;
-
-    /**
-     * Shows only protected and public classes and members.
-     * See <a href="http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html#protected">protected</a>.
-     * 
-     * @parameter expression="${protected}"
-     * default-value="false"
-     */
-    private boolean protected_ = false;
+    private boolean showPrivate = false;
-    // End JavaDoc parameters
-
-    /** The command line built to execute Javadoc. */
-    private Commandline cmd = new Commandline();
+    // ----------------------------------------------------------------------
+    //
+    // ----------------------------------------------------------------------
-            this.cmd.setWorkingDirectory( javadocDirectory.getAbsolutePath() );
-            this.cmd.setExecutable( getJavadocPath() );
+            Commandline cmd = new Commandline();
+
+            List arguments = new ArrayList();
+
+            cmd.setWorkingDirectory( javadocDirectory.getAbsolutePath() );
+            cmd.setExecutable( getJavadocPath() );
-            addArgIf( this.breakiterator, "-breakiterator", 1.4f );
-            if ( !StringUtils.isEmpty( this.doclet ) )
+            addArgIf( arguments, breakiterator, "-breakiterator", 1.4f );
+            if ( !StringUtils.isEmpty( doclet ) )
-                addArgIfNotEmpty( "-doclet", this.doclet );
-                addArgIfNotEmpty( "-docletPath", this.docletPath );
+                addArgIfNotEmpty( arguments, "-doclet", doclet );
+                addArgIfNotEmpty( arguments, "-docletPath", docletPath );
-            addArgIfNotEmpty( "-encoding", this.encoding );
-            addArgIfNotEmpty( "-extdirs", this.extdirs );
-            addArgIfNotEmpty( "-exclude", this.excludePackageNames, 1.4f );
-            addArgIfNotEmpty( "-locale", this.locale );
-            if ( !StringUtils.isEmpty( this.maxmemory ) )
+            addArgIfNotEmpty( arguments, "-encoding", encoding );
+            addArgIfNotEmpty( arguments, "-extdirs", extdirs );
+            addArgIfNotEmpty( arguments, "-exclude", excludePackageNames, 1.4f );
+            addArgIfNotEmpty( arguments, "-locale", this.locale );
+            if ( !StringUtils.isEmpty( maxmemory ) )
-                if ( NumberUtils.isDigits( this.maxmemory ) )
+                if ( NumberUtils.isDigits( maxmemory ) )
-                    addArgIf( true, "-J-Xmx" + this.maxmemory + "m" );
+                    addArgIf( arguments, true, "-J-Xmx" + maxmemory + "m" );
-                    if ( ( NumberUtils.isDigits( this.maxmemory.substring( 0, this.maxmemory.length() - 1 ) ) )
-                        && ( this.maxmemory.toLowerCase().endsWith( "m" ) ) )
+                    if ( ( NumberUtils.isDigits( maxmemory.substring( 0, maxmemory.length() - 1 ) ) )
+                        && ( maxmemory.toLowerCase().endsWith( "m" ) ) )
-                        addArgIf( true, "-J-Xmx" + this.maxmemory );
+                        addArgIf( arguments, true, "-J-Xmx" + maxmemory );
-                        getLog().error(
-                                        "The maxmemory '" + this.maxmemory
-                                            + "' is not a valid number. Ignore this option." );
+                        getLog().error( "The maxmemory '" + maxmemory + "' is not a valid number. Ignore this option." );
-            if ( !StringUtils.isEmpty( this.minmemory ) )
+
+            if ( !StringUtils.isEmpty( minmemory ) )
-                if ( NumberUtils.isDigits( this.minmemory ) )
+                if ( NumberUtils.isDigits( minmemory ) )
-                    addArgIf( true, "-J-Xms" + this.minmemory + "m" );
+                    addArgIf( arguments, true, "-J-Xms" + minmemory + "m" );
-                    if ( ( NumberUtils.isDigits( this.minmemory.substring( 0, this.minmemory.length() - 1 ) ) )
-                        && ( this.minmemory.toLowerCase().endsWith( "m" ) ) )
+                    if ( ( NumberUtils.isDigits( minmemory.substring( 0, minmemory.length() - 1 ) ) ) && ( minmemory.toLowerCase().endsWith( "m" ) ) )
-                        addArgIf( true, "-J-Xms" + this.minmemory );
+                        addArgIf( arguments, true, "-J-Xms" + minmemory );
-                        getLog().error(
-                                        "The minmemory '" + this.minmemory
-                                            + "' is not a valid number. Ignore this option." );
+                        getLog().error( "The minmemory '" + minmemory + "' is not a valid number. Ignore this option." );
-            if ( this.old && SystemUtils.isJavaVersionAtLeast( 1.4f ) )
+
+            if ( old && SystemUtils.isJavaVersionAtLeast( 1.4f ) )
-                addArgIf( this.old, "-1.1" );
+                addArgIf( arguments, old, "-1.1" );
-            addArgIfNotEmpty( "-overview", this.overview );
-            addArgIf( this.package_, "-package" );
-            addArgIf( this.private_, "-private" );
-            addArgIf( this.protected_, "-protected" );
-            addArgIf( this.public_, "-public" );
-            addArgIf( this.quiet, "-quiet", 1.4f );
-            addArgIfNotEmpty( "-source", this.source, 1.4f );
-            addArgIf( this.verbose, "-verbose" );
-            addArgIfNotEmpty( "-additionalparam", this.additionalparam );
-            addArgIfNotEmpty( "-sourcePath", sourcePath.toString() );
-            addArgIfNotEmpty( "-classpath", classpath.toString() );
+            addArgIfNotEmpty( arguments, "-overview", overview );
+            addArgIf( arguments, showPackage, "-package" );
+            addArgIf( arguments, showPrivate, "-private" );
+            addArgIf( arguments, showProtected, "-protected" );
+            addArgIf( arguments, public_, "-public" );
+            addArgIf( arguments, quiet, "-quiet", 1.4f );
+            addArgIfNotEmpty( arguments, "-source", source, 1.4f );
+            addArgIf( arguments, verbose, "-verbose" );
+            addArgIfNotEmpty( arguments, "-additionalparam", additionalparam );
+
+            addArgIfNotEmpty( arguments, "-sourcePath", sourcePath.toString() );
+            addArgIfNotEmpty( arguments, "-classpath", classpath.toString() );
-            if ( StringUtils.isEmpty( this.doclet ) )
+            if ( StringUtils.isEmpty( doclet ) )
-                if ( this.bottom.equals( DEFAULT_BOTTOM ) )
+                if ( bottom.equals( DEFAULT_BOTTOM ) )
-                    this.bottom = "Copyright &copy; " + year + " ";
+                    bottom = "Copyright &copy; " + year + " ";
-                    if ( ( model.getOrganization() != null )
-                        && ( !StringUtils.isEmpty( model.getOrganization().getName() ) ) )
+                    if ( ( model.getOrganization() != null ) && ( !StringUtils.isEmpty( model.getOrganization().getName() ) ) )
-                        this.bottom += model.getOrganization().getName();
+                        bottom += model.getOrganization().getName();
-                        this.bottom += DEFAULT_ORGANIZATION_NAME;
+                        bottom += DEFAULT_ORGANIZATION_NAME;
-                    this.bottom += ". All Rights Reserved.";
+                    bottom += ". All Rights Reserved.";
-                if ( this.destDir.equals( DEFAULT_DESTDIR ) )
+                if ( destDir.equals( DEFAULT_DESTDIR ) )
-                    this.destDir = outputDir.getAbsolutePath();
+                    destDir = outputDir.getAbsolutePath();
-                if ( StringUtils.isEmpty( this.stylesheetfile ) )
+                if ( StringUtils.isEmpty( stylesheetfile ) )
-                    this.stylesheetfile = javadocDirectory + File.separator + DEFAULT_CSS_NAME;
+                    stylesheetfile = javadocDirectory + File.separator + DEFAULT_CSS_NAME;
-                if ( this.windowtitle.equals( DEFAULT_WINDOW_TITLE ) )
+                if ( windowtitle.equals( DEFAULT_WINDOW_TITLE ) )
-                    this.windowtitle = ( model.getName() == null ? model.getArtifactId() : model.getName() ) + " "
-                        + model.getVersion() + " API";
+                    windowtitle = ( model.getName() == null ? model.getArtifactId() : model.getName() ) + " " + model.getVersion() + " API";
-                if ( this.doctitle.equals( DEFAULT_DOCTITLE ) )
+                if ( doctitle.equals( DEFAULT_DOCTITLE ) )
-                    this.doctitle = this.windowtitle;
+                    doctitle = windowtitle;
-                addArgIf( this.author, "-author" );
-                addArgIfNotEmpty( "-bottom", this.bottom );
-                addArgIf( this.breakiterator, "-breakiterator", 1.4f );
-                addArgIfNotEmpty( "-charset", this.charset );
-                addArgIfNotEmpty( "-d", this.destDir );
-                addArgIf( this.docfilessubdirs, "-docfilessubdirs", 1.4f );
-                addArgIfNotEmpty( "-docencoding", this.docencoding );
-                addArgIfNotEmpty( "-doctitle", this.doctitle );
-                addArgIfNotEmpty( "-excludePackageNames", this.excludePackageNames );
-                addArgIfNotEmpty( "-excludedocfilessubdir", this.excludedocfilessubdir, 1.4f );
-                addArgIfNotEmpty( "-footer", this.footer );
-                addArgIfNotEmpty( "-group", this.group, true );
-                addArgIfNotEmpty( "-header", this.header );
-                addArgIfNotEmpty( "-helpfile", this.helpfile );
-                addArgIfNotEmpty( "-link", this.link, true );
-                addArgIfNotEmpty( "-linkoffline", this.linkoffline, true );
-                addArgIf( this.linksource, "-linksource", 1.4f );
-                addArgIf( this.nodeprecated, "-nodeprecated" );
-                addArgIf( this.nodeprecatedlist, "-nodeprecatedlist" );
-                addArgIf( this.nocomment, "-nocomment", 1.4f );
-                addArgIf( this.nohelp, "-nohelp" );
-                addArgIf( this.noindex, "-noindex" );
-                addArgIf( this.nonavbar, "-nonavbar" );
-                addArgIfNotEmpty( "-noqualifier", this.noqualifier, 1.4f );
-                addArgIf( this.nosince, "-nosince" );
-                addArgIf( this.notree, "-notree" );
-                addArgIf( this.serialwarn, "-serialwarn" );
-                addArgIf( this.splitindex, "-splitindex" );
-                addArgIfNotEmpty( "-stylesheetfile", this.stylesheetfile );
-                addArgIfNotEmpty( "-tag", this.tag, 1.4f, true );
-                addArgIfNotEmpty( "-taglet", this.taglet, 1.4f );
-                addArgIfNotEmpty( "-tagletpath", this.tagletpath, 1.4f );
-                addArgIf( this.use, "-use" );
-                addArgIf( this.version, "-version" );
-                addArgIfNotEmpty( "-windowtitle", this.windowtitle );
+                addArgIf( arguments, author, "-author" );
+                addArgIfNotEmpty( arguments, "-bottom", bottom );
+                addArgIf( arguments, breakiterator, "-breakiterator", 1.4f );
+                addArgIfNotEmpty( arguments, "-charset", charset );
+                addArgIfNotEmpty( arguments, "-d", destDir );
+                addArgIf( arguments, docfilessubdirs, "-docfilessubdirs", 1.4f );
+                addArgIfNotEmpty( arguments, "-docencoding", docencoding );
+                addArgIfNotEmpty( arguments, "-doctitle", doctitle );
+                addArgIfNotEmpty( arguments, "-excludePackageNames", excludePackageNames );
+                addArgIfNotEmpty( arguments, "-excludedocfilessubdir", excludedocfilessubdir, 1.4f );
+                addArgIfNotEmpty( arguments, "-footer", footer );
+                addArgIfNotEmpty( arguments, "-group", group, true );
+                addArgIfNotEmpty( arguments, "-header", header );
+                addArgIfNotEmpty( arguments, "-helpfile", helpfile );
+                addArgIfNotEmpty( arguments, "-link", link, true );
+                addArgIfNotEmpty( arguments, "-linkoffline", linkoffline, true );
+                addArgIf( arguments, linksource, "-linksource", 1.4f );
+                addArgIf( arguments, nodeprecated, "-nodeprecated" );
+                addArgIf( arguments, nodeprecatedlist, "-nodeprecatedlist" );
+                addArgIf( arguments, nocomment, "-nocomment", 1.4f );
+                addArgIf( arguments, nohelp, "-nohelp" );
+                addArgIf( arguments, noindex, "-noindex" );
+                addArgIf( arguments, nonavbar, "-nonavbar" );
+                addArgIfNotEmpty( arguments, "-noqualifier", noqualifier, 1.4f );
+                addArgIf( arguments, nosince, "-nosince" );
+                addArgIf( arguments, notree, "-notree" );
+                addArgIf( arguments, serialwarn, "-serialwarn" );
+                addArgIf( arguments, splitindex, "-splitindex" );
+                addArgIfNotEmpty( arguments, "-stylesheetfile", stylesheetfile );
+                addArgIfNotEmpty( arguments, "-tag", tag, 1.4f, true );
+                addArgIfNotEmpty( arguments, "-taglet", taglet, 1.4f );
+                addArgIfNotEmpty( arguments, "-tagletpath", tagletpath, 1.4f );
+                addArgIf( arguments, use, "-use" );
+                addArgIf( arguments, version, "-version" );
+                addArgIfNotEmpty( arguments, "-windowtitle", windowtitle );
-            final int exitCode = CommandLineUtils
-                .executeCommandLine( cmd, new DefaultConsumer(), new DefaultConsumer() );
+            int exitCode = CommandLineUtils.executeCommandLine( cmd, new DefaultConsumer(), new DefaultConsumer() );
+
-        final String javadocCommand = "javadoc" + ( SystemUtils.IS_OS_WINDOWS ? ".exe" : "" );
+        String javadocCommand = "javadoc" + ( SystemUtils.IS_OS_WINDOWS ? ".exe" : "" );
+
+        File javadocExe;
+
-        final File javadocExe = ( SystemUtils.IS_OS_AIX ? new File( SystemUtils.getJavaHome() + "/../sh",
-                                                                    javadocCommand ) : new File( SystemUtils
-            .getJavaHome()
-            + "/../bin", javadocCommand ) );
+        if ( SystemUtils.IS_OS_AIX )
+        {
+            javadocExe = new File( SystemUtils.getJavaHome() + "/../sh", javadocCommand );
+        }
+        else
+        {
+            javadocExe = new File( SystemUtils .getJavaHome() + "/../bin", javadocCommand );
+        }
+     * @param arguments
-    private void addArgIf( final boolean b, final String value )
+    private void addArgIf( List arguments, boolean b, String value )
-            this.cmd.createArgument().setValue( value );
+            arguments.add( value );
-     * @see #addArgIf(boolean, String)
+     * @see #addArgIf(java.util.List,boolean,String)
-    private void addArgIf( final boolean b, final String value, final float requiredJavaVersion )
+    private void addArgIf( List arguments, boolean b, String value, float requiredJavaVersion )
-            addArgIf( b, value );
+            addArgIf( arguments, b, value );
-     * @see #addArgIfNotEmpty(String, String, boolean)
+     * @see #addArgIfNotEmpty(java.util.List,String,String,boolean)
+     * @param arguments
-    private void addArgIfNotEmpty( final String key, final String value )
+    private void addArgIfNotEmpty( List arguments, String key, String value )
-        addArgIfNotEmpty( key, value, false );
+        addArgIfNotEmpty( arguments, key, value, false );
+     * @param arguments
-    private void addArgIfNotEmpty( final String key, final String value, final boolean repeatKey )
+    private void addArgIfNotEmpty( List arguments, String key, String value, boolean repeatKey )
-            this.cmd.createArgument().setValue( key );
+            arguments.add( key );
-                    this.cmd.createArgument().setValue( current );
+                    arguments.add( current );
-                        this.cmd.createArgument().setValue( key );
+                        arguments.add( key );
-     * @see #addArgIfNotEmpty(String, String, float, boolean)
+     * @see #addArgIfNotEmpty(List, String, String, float, boolean)
+     * @param arguments
-    private void addArgIfNotEmpty( final String key, final String value, final float requiredJavaVersion )
+    private void addArgIfNotEmpty( List arguments, String key, String value, float requiredJavaVersion )
-        addArgIfNotEmpty( key, value, requiredJavaVersion, false );
+        addArgIfNotEmpty( arguments, key, value, requiredJavaVersion, false );
-     * @see #addArgIfNotEmpty(String, String)
+     * @see #addArgIfNotEmpty(java.util.List,String,String)
-    private void addArgIfNotEmpty( final String key, final String value, final float requiredJavaVersion,
-                                  final boolean repeatKey )
+    private void addArgIfNotEmpty( List arguments, String key, String value, float requiredJavaVersion, boolean repeatKey )
-            addArgIfNotEmpty( key, value, repeatKey );
+            addArgIfNotEmpty( arguments, key, value, repeatKey );
-    private static InputStream getStream( final String resource )
+    private static InputStream getStream( String resource )
-    private void copyDefaultStylesheet( final File outputDirectory )
+    private void copyDefaultStylesheet( File outputDirectory )

INS26 INS26 MOV23 INS40 INS40 MOV44 INS44 MOV44 INS44 INS44 INS29 INS44 MOV44 MOV29 INS44 MOV44 MOV44 INS44 MOV44 MOV44 MOV44 MOV44 UPD42 UPD42 UPD42 INS60 INS25 INS65 INS43 INS42 UPD42 MOV65 INS43 INS42 INS43 INS42 MOV65 MOV65 INS65 MOV65 MOV65 INS43 INS42 UPD42 INS65 MOV65 INS43 INS42 UPD42 UPD42 INS65 INS43 INS42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 MOV43 INS59 INS40 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV69 INS42 INS42 MOV69 UPD42 INS60 INS60 MOV42 INS21 INS21 INS69 INS69 MOV69 INS42 INS69 INS42 INS69 MOV43 MOV59 INS43 INS59 INS7 INS7 INS43 INS43 UPD43 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 MOV14 UPD42 MOV42 UPD42 INS40 MOV42 INS42 INS40 UPD42 MOV42 UPD42 INS42 INS40 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL83 DEL83 DEL40 DEL16 DEL36 DEL59 DEL60 DEL83 DEL83 DEL52 DEL42 DEL22 DEL32 DEL83 DEL83 DEL83 DEL83 DEL29 DEL83 DEL83 DEL83 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83