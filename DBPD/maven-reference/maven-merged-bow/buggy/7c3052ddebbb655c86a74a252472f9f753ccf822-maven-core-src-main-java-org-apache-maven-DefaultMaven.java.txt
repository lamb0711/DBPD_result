MNG-5557: Constrain the set of projects that are passed into the ReactorReader as specified by --projects

- Add some documentation about the lifecycle within DefaultMaven
- Remove the use of DelegatingLocalArtifactRepository in DefaultMaven as it has been replaced with the use of the
  ReactorReader which is an implementation of Aether's WorkspaceReader
- Localize the manipulation of the ProjectBuildingRequest to getProjectsFromReactor()
- Deprecated getLogger()

-import org.apache.maven.repository.DelegatingLocalArtifactRepository;
-                addExceptionToResult( new DefaultMavenExecutionResult(),
-                                      new InternalErrorException( "Internal error: " + e, e ) );
+                addExceptionToResult( new DefaultMavenExecutionResult(), new InternalErrorException( "Internal error: "
+                    + e, e ) );
+    // 
+    // 1) Setup initial properties.
+    //
+    // 2) Validate local repository directory is accessible.
+    //
+    // 3) Create RepositorySystemSession.
+    //
+    // 4) Create MavenSession.
+    //
+    // 5) Execute AbstractLifecycleParticipant.afterSessionStart(session)
+    //
+    // 6) Get reactor projects looking for read errors, and duplicate declarations
+    //
+    // 7) Create ProjectDependencyGraph using trimming which takes into account --projects and reactor mode. This ensures
+    //    that the projects passed into the ReactorReader are only those specified.
+    //
+    // 8) Create ReactorReader with the project map created in 7)
+    //
+    // 9) Execute AbstractLifecycleParticipant.afterProjectsRead(session)
+    //
+    // 10) Create ProjectDependencyGraph without trimming (as trimming was done in 7). A new topological sort is required after
+    //     the execution of 9) as the AbstractLifecycleParticipants are free to mutate the MavenProject instances, which may change
+    //     dependencies which can, in turn, affect the build order.
+    // 
+    // 11) Execute LifecycleStarter.start()
+    //    
-        //TODO: Need a general way to inject standard properties
-        }        
-        
+        }
+
-        
+
-        DelegatingLocalArtifactRepository delegatingLocalArtifactRepository =
-            new DelegatingLocalArtifactRepository( request.getLocalRepository() );
-        
-        request.setLocalRepository( delegatingLocalArtifactRepository );        
-
-        request.getProjectBuildingRequest().setRepositorySession( session.getRepositorySession() );
-
-        //TODO: optimize for the single project or no project
-        
-            projects = getProjectsForMavenReactor( request );                                                
+            projects = getProjectsForMavenReactor( session );
-        session.setProjects( projects );
+        //
+        // This creates the graph and trims the projects down based on the user request using something like:
+        //
+        // -pl project0,project2 eclipse:eclipse
+        //
+        ProjectDependencyGraph projectDependencyGraph = createProjectDependencyGraph( projects, request, result, true );
-        result.setTopologicallySortedProjects( session.getProjects() );
+        session.setProjects( projectDependencyGraph.getSortedProjects() );
-        result.setProject( session.getTopLevelProject() );
+        if ( result.hasExceptions() )
+        {
+            return result;
+        }
+        //
+        // Desired order of precedence for local artifact repositories
+        //
+        // Reactor
+        // Workspace
+        // User Local Repository
+        //        
+        ReactorReader reactorRepository = null;
-            Map<String, MavenProject> projectMap;
-            projectMap = getProjectMap( session.getProjects() );
-    
-            // Desired order of precedence for local artifact repositories
-            //
-            // Reactor
-            // Workspace
-            // User Local Repository
-            ReactorReader reactorRepository = new ReactorReader( projectMap );
-
-            repoSession.setWorkspaceReader( ChainedWorkspaceReader.newInstance( reactorRepository,
-                                                                                repoSession.getWorkspaceReader() ) );
+            reactorRepository = new ReactorReader( session, getProjectMap( session.getProjects() ) );
+        repoSession.setWorkspaceReader( ChainedWorkspaceReader.newInstance( reactorRepository,
+                                                                            repoSession.getWorkspaceReader() ) );
+
-        try
-        {
-            ProjectSorter projectSorter = new ProjectSorter( session.getProjects() );
-
-            ProjectDependencyGraph projectDependencyGraph = createDependencyGraph( projectSorter, request );
-
-            session.setProjects( projectDependencyGraph.getSortedProjects() );
-
-            session.setProjectDependencyGraph( projectDependencyGraph );
-        }
-        catch ( CycleDetectedException e )
-        {            
-            String message = "The projects in the reactor contain a cyclic reference: " + e.getMessage();
-
-            ProjectCycleException error = new ProjectCycleException( message, e );
-
-            return addExceptionToResult( result, error );
-        }
-        catch ( org.apache.maven.project.DuplicateProjectException e )
-        {
-            return addExceptionToResult( result, e );
-        }
-        catch ( MavenExecutionException e )
-        {
-            return addExceptionToResult( result, e );
-        }
-
-        result.setTopologicallySortedProjects( session.getProjects() );
+        //
+        // The projects need to be topologically after the participants have run their afterProjectsRead(session)
+        // because the participant is free to change the dependencies of a project which can potentially change the
+        // topological order of the projects, and therefore can potentially change the build order.
+        //
+        // Note that participants may affect the topological order of the projects but it is
+        // not expected that a participant will add or remove projects from the session.
+        //
+        projectDependencyGraph = createProjectDependencyGraph( session.getProjects(), request, result, false );
+        
+        session.setProjects( projectDependencyGraph.getSortedProjects() );
+
+        session.setProjectDependencyGraph( projectDependencyGraph );
+
+        result.setTopologicallySortedProjects( session.getProjects() );
+
+        result.setProject( session.getTopLevelProject() );
-        return "Apache-Maven/" + getMavenVersion()
-            + " (Java " + System.getProperty( "java.version" ) + "; "
+        return "Apache-Maven/" + getMavenVersion() + " (Java " + System.getProperty( "java.version" ) + "; "
-    
-    private List<MavenProject> getProjectsForMavenReactor( MavenExecutionRequest request )
+
+    private List<MavenProject> getProjectsForMavenReactor( MavenSession session )
-        List<MavenProject> projects =  new ArrayList<MavenProject>();
+        MavenExecutionRequest request = session.getRequest();
+        
+        request.getProjectBuildingRequest().setRepositorySession( session.getRepositorySession() );
+
+        List<MavenProject> projects = new ArrayList<MavenProject>();
-        List<File> files = Arrays.asList( request.getPom().getAbsoluteFile() );        
+        List<File> files = Arrays.asList( request.getPom().getAbsoluteFile() );
-    private Map<String, MavenProject> getProjectMap( List<MavenProject> projects )
+    private void collectProjects( List<MavenProject> projects, List<File> files, MavenExecutionRequest request )
+        throws ProjectBuildingException
+    {
+        ProjectBuildingRequest projectBuildingRequest = request.getProjectBuildingRequest();
+
+        List<ProjectBuildingResult> results =
+            projectBuilder.build( files, request.isRecursive(), projectBuildingRequest );
+
+        boolean problems = false;
+
+        for ( ProjectBuildingResult result : results )
+        {
+            projects.add( result.getProject() );
+
+            if ( !result.getProblems().isEmpty() && logger.isWarnEnabled() )
+            {
+                logger.warn( "" );
+                logger.warn( "Some problems were encountered while building the effective model for "
+                    + result.getProject().getId() );
+
+                for ( ModelProblem problem : result.getProblems() )
+                {
+                    String location = ModelProblemUtils.formatLocation( problem, result.getProjectId() );
+                    logger.warn( problem.getMessage() + ( StringUtils.isNotEmpty( location ) ? " @ " + location : "" ) );
+                }
+
+                problems = true;
+            }
+        }
+
+        if ( problems )
+        {
+            logger.warn( "" );
+            logger.warn( "It is highly recommended to fix these problems"
+                + " because they threaten the stability of your build." );
+            logger.warn( "" );
+            logger.warn( "For this reason, future Maven versions might no"
+                + " longer support building such malformed projects." );
+            logger.warn( "" );
+        }
+    }
+
+    private Map<String, MavenProject> getProjectMap( Collection<MavenProject> projects )
-    private void collectProjects( List<MavenProject> projects, List<File> files, MavenExecutionRequest request )
-        throws ProjectBuildingException
-    {
-        ProjectBuildingRequest projectBuildingRequest = request.getProjectBuildingRequest();
-
-        List<ProjectBuildingResult> results = projectBuilder.build( files, request.isRecursive(), projectBuildingRequest );
-
-        boolean problems = false;
-
-        for ( ProjectBuildingResult result : results )
-        {
-            projects.add( result.getProject() );
-
-            if ( !result.getProblems().isEmpty() && logger.isWarnEnabled() )
-            {
-                logger.warn( "" );
-                logger.warn( "Some problems were encountered while building the effective model for "
-                    + result.getProject().getId() );
-
-                for ( ModelProblem problem : result.getProblems() )
-                {
-                    String location = ModelProblemUtils.formatLocation( problem, result.getProjectId() );
-                    logger.warn( problem.getMessage() + ( StringUtils.isNotEmpty( location ) ? " @ " + location : "" ) );
-                }
-
-                problems = true;
-            }
-        }
-
-        if ( problems )
-        {
-            logger.warn( "" );
-            logger.warn( "It is highly recommended to fix these problems"
-                + " because they threaten the stability of your build." );
-            logger.warn( "" );
-            logger.warn( "For this reason, future Maven versions might no"
-                + " longer support building such malformed projects." );
-            logger.warn( "" );
-        }
-    }
-
+    @Deprecated // 5 January 2014
-    private ProjectDependencyGraph createDependencyGraph( ProjectSorter sorter, MavenExecutionRequest request )
-        throws MavenExecutionException
+    private ProjectDependencyGraph createProjectDependencyGraph( Collection<MavenProject> projects, MavenExecutionRequest request,
+                                                                 MavenExecutionResult result, boolean trimming )
-        ProjectDependencyGraph graph = new DefaultProjectDependencyGraph( sorter );
+        ProjectDependencyGraph projectDependencyGraph = null;
-        List<MavenProject> activeProjects = sorter.getSortedProjects();
-
-        activeProjects = trimSelectedProjects( activeProjects, graph, request );
-        activeProjects = trimResumedProjects( activeProjects, request );
-
-        if ( activeProjects.size() != sorter.getSortedProjects().size() )
+        try
-            graph = new FilteredProjectDependencyGraph( graph, activeProjects );
+            ProjectSorter projectSorter = new ProjectSorter( projects );
+
+            projectDependencyGraph = new DefaultProjectDependencyGraph( projectSorter );
+
+            if ( trimming )
+            {
+                List<MavenProject> activeProjects = projectSorter.getSortedProjects();
+
+                activeProjects = trimSelectedProjects( activeProjects, projectDependencyGraph, request );
+                activeProjects = trimResumedProjects( activeProjects, request );
+
+                if ( activeProjects.size() != projectSorter.getSortedProjects().size() )
+                {
+                    projectDependencyGraph =
+                        new FilteredProjectDependencyGraph( projectDependencyGraph, activeProjects );
+                }
+            }
+        }
+        catch ( CycleDetectedException e )
+        {
+            String message = "The projects in the reactor contain a cyclic reference: " + e.getMessage();
+
+            ProjectCycleException error = new ProjectCycleException( message, e );
+
+            addExceptionToResult( result, error );
+        }
+        catch ( org.apache.maven.project.DuplicateProjectException e )
+        {
+            addExceptionToResult( result, e );
+        }
+        catch ( MavenExecutionException e )
+        {
+            addExceptionToResult( result, e );
-        return graph;
+        return projectDependencyGraph;

MOV31 MOV60 MOV21 MOV21 MOV21 MOV21 INS78 UPD42 INS44 INS44 INS44 INS8 MOV21 INS25 INS60 MOV21 MOV21 UPD43 UPD42 INS60 MOV21 UPD74 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS60 MOV54 MOV12 INS41 MOV43 INS59 INS32 INS8 MOV43 INS59 INS7 UPD42 INS43 INS59 UPD43 UPD43 MOV43 MOV43 INS42 MOV43 INS59 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS41 INS42 INS33 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS33 INS60 INS21 INS25 MOV44 MOV44 INS42 INS42 MOV42 UPD42 MOV42 INS9 INS42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS9 UPD42 UPD42 INS42 INS42 MOV43 INS59 INS7 INS42 INS8 INS21 INS21 INS21 UPD42 INS14 INS42 INS14 INS42 INS14 INS60 INS21 MOV21 INS25 MOV32 MOV32 MOV32 UPD42 MOV43 INS42 MOV32 MOV43 INS42 MOV43 INS42 MOV74 MOV59 INS7 INS27 INS8 MOV42 INS43 INS43 INS42 INS32 INS42 INS32 MOV32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS7 INS42 INS42 INS42 INS14 MOV43 INS42 INS42 DEL40 DEL26 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL14 DEL59 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL14 DEL59 DEL60 DEL32 DEL42 DEL44 DEL42 DEL14 DEL43 DEL60 DEL42 DEL32 DEL59 DEL60 DEL41 DEL41 DEL41 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8