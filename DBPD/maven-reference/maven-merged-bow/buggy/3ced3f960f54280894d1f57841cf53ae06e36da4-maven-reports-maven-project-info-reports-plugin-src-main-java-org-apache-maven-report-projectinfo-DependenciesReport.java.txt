MNG-411: Adding more reports: cim, issuetracking,license, scm and teamlist

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219836 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.reporting.AbstractMavenReport;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.reporting.AbstractMavenReport;
+import java.util.ArrayList;
- * Generates the dependencies report.
- *
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @author <a href="mailto:vincent.siveton@gmail.com">Vincent Siveton</a>
- * @version $Id$
+ * Generates the Project Dependencies report.
+ * 
+ * 
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
+ * @author <a href="mailto:vincent.siveton@gmail.com">Vincent Siveton </a>
+ * @version $Id$
+     * @parameter expression="${component.org.apache.maven.artifact.factory.ArtifactFactory}"
+     * @required
+     * @readonly
+     */
+    private ArtifactFactory artifactFactory;
+
+    /**
+     * @parameter expression="${component.org.apache.maven.project.MavenProjectBuilder}"
+     * @required
+     * @readonly
+     */
+    private MavenProjectBuilder mavenProjectBuilder;
+
+    /**
-     * @see AbstractMavenReport#getSiteRenderer()
+     * @see org.apache.maven.reporting.AbstractMavenReport#getSiteRenderer()
-            DependenciesRenderer r = new DependenciesRenderer( getSink(), getProject(), locale );
+            DependenciesRenderer r = new DependenciesRenderer( getSink(), getProject(), locale, mavenProjectBuilder,
+                                                               artifactFactory );
-        public DependenciesRenderer( Sink sink, MavenProject project, Locale locale )
+        private ArtifactFactory artifactFactory;
+
+        private MavenProjectBuilder mavenProjectBuilder;
+
+        public DependenciesRenderer( Sink sink, MavenProject project, Locale locale,
+                                    MavenProjectBuilder mavenProjectBuilder, ArtifactFactory artifactFactory )
+
+            this.mavenProjectBuilder = mavenProjectBuilder;
+
+            this.artifactFactory = artifactFactory;
-            startSection( getTitle() );
-
-            if ( dependencies.isEmpty() )
+            if ( ( dependencies == null ) || ( dependencies.isEmpty() ) )
+                startSection( getTitle() );
+
+
+                endSection();
+
+                return;
+            }
+
+            startSection( getTitle() );
+
+            startTable();
+
+            tableCaption( getBundle( locale ).getString( "report.dependencies.intro" ) );
+
+            String groupId = getBundle( locale ).getString( "report.dependencies.column.groupId" );
+            String artifactId = getBundle( locale ).getString( "report.dependencies.column.artifactId" );
+            String version = getBundle( locale ).getString( "report.dependencies.column.version" );
+            String description = getBundle( locale ).getString( "report.dependencies.column.description" );
+            String url = getBundle( locale ).getString( "report.dependencies.column.url" );
+
+            tableHeader( new String[] { groupId, artifactId, version, description, url } );
+
+            for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+            {
+                Dependency dependency = (Dependency) i.next();
+
+                Artifact artifact = artifactFactory.createArtifact( dependency.getGroupId(),
+                                                                    dependency.getArtifactId(),
+                                                                    dependency.getVersion(), dependency.getScope(),
+                                                                    dependency.getType() );
+                MavenProject artifactProject = null;
+                try
+                {
+                    artifactProject = getMavenProjectFromRepository( artifact );
+                }
+                catch ( ProjectBuildingException e )
+                {
+                    throw new IllegalArgumentException(
+                                                        "Can't find a valid Maven project in the repository for the artifact ["
+                                                            + artifact + "]." );
+                }
+
+                tableRow( new String[] {
+                    dependency.getGroupId(),
+                    dependency.getArtifactId(),
+                    dependency.getVersion(),
+                    artifactProject.getDescription(),
+                    createLinkPatternedText( artifactProject.getUrl(), artifactProject.getUrl() ) } );
+            }
+
+            endTable();
+
+            endSection();
+
+            // Transitive dependencies
+            Set artifacts = getTransitiveDependencies( project );
+
+            startSection( getBundle( locale ).getString( "report.transitivedependencies.title" ) );
+
+            if ( artifacts.isEmpty() )
+            {
+                paragraph( getBundle( locale ).getString( "report.transitivedependencies.nolist" ) );
-                tableCaption( getBundle( locale ).getString( "report.dependencies.intro" ) );
+                tableCaption( getBundle( locale ).getString( "report.transitivedependencies.intro" ) );
-                String groupId = getBundle( locale ).getString( "report.dependencies.column.groupId" );
-                String artifactId = getBundle( locale ).getString( "report.dependencies.column.artifactId" );
-                String version = getBundle( locale ).getString( "report.dependencies.column.version" );
+                tableHeader( new String[] { groupId, artifactId, version, description, url } );
-                tableHeader( new String[]{groupId, artifactId, version} );
-
-                for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+                for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-                    Dependency d = (Dependency) i.next();
+                    Artifact artifact = (Artifact) i.next();
-                    tableRow( new String[]{d.getGroupId(), d.getArtifactId(), d.getVersion()} );
+                    MavenProject artifactProject = null;
+                    try
+                    {
+                        artifactProject = getMavenProjectFromRepository( artifact );
+                    }
+                    catch ( ProjectBuildingException e )
+                    {
+                        throw new IllegalArgumentException(
+                                                            "Can't find a valid Maven project in the repository for the artifact ["
+                                                                + artifact + "]." );
+                    }
+                    System.out.println( "nklj-----------------------------" );
+                    System.out.println( artifactProject.getUrl() );
+                    tableRow( new String[] {
+                        artifact.getGroupId(),
+                        artifact.getArtifactId(),
+                        artifact.getVersion(),
+                        artifactProject.getDescription(),
+                        createLinkPatternedText( artifactProject.getUrl(), artifactProject.getUrl() ) } );
-
-            // Transitive dependencies
-            if ( !dependencies.isEmpty() )
-            {
-                Set artifacts = getTransitiveDependencies( project );
-
-                startSection( getBundle( locale ).getString( "report.transitivedependencies.title" ) );
-
-                if ( artifacts.isEmpty() )
-                {
-                    // TODO: should the report just be excluded?
-                    paragraph( getBundle( locale ).getString( "report.transitivedependencies.nolist" ) );
-                }
-                else
-                {
-                    startTable();
-
-                    tableCaption( getBundle( locale ).getString( "report.transitivedependencies.intro" ) );
-
-                    String groupId = getBundle( locale ).getString( "report.transitivedependencies.column.groupId" );
-                    String artifactId = getBundle( locale ).getString(
-                        "report.transitivedependencies.column.artifactId" );
-                    String version = getBundle( locale ).getString( "report.transitivedependencies.column.version" );
-
-                    tableHeader( new String[]{groupId, artifactId, version} );
-
-                    for ( Iterator i = artifacts.iterator(); i.hasNext(); )
-                    {
-                        Artifact artifact = (Artifact) i.next();
-
-                        tableRow(
-                            new String[]{artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion()} );
-                    }
-
-                    endTable();
-                }
-
-                endSection();
-            }
-
-         * Return a set of artifact which are not already present in the dependencies list.
-         *
-         * @param project a Maven project
-         * @return a set of transitive dependencies
-         * @todo check if this works with version ranges
+         * Return a set of <code>Artifacts</code> which are not already
+         * present in the dependencies list.
+         * 
+         * @param project
+         *            a Maven project
+         * @return a set of transitive dependencies as artifacts
-            Set result = new HashSet();
-
-            if ( project.getDependencies() == null || project.getArtifacts() == null )
-            {
-                return result;
-            }
+            Set transitiveDependencies = new HashSet();
+            if ( ( dependencies == null ) || ( artifacts == null ) )
+            {
+                return transitiveDependencies;
+            }
+
+            List dependenciesAsArtifacts = new ArrayList( dependencies.size() );
+            for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+            {
+                Dependency dependency = (Dependency) i.next();
+
+                Artifact artifact = artifactFactory.createArtifact( dependency.getGroupId(),
+                                                                    dependency.getArtifactId(),
+                                                                    dependency.getVersion(), dependency.getScope(),
+                                                                    dependency.getType() );
+                dependenciesAsArtifacts.add( artifact );
+            }
+
-                boolean toadd = true;
-                for ( Iterator i = dependencies.iterator(); i.hasNext(); )
+                if ( !dependenciesAsArtifacts.contains( artifact ) )
-                    Dependency dependency = (Dependency) i.next();
-                    if ( artifact.getArtifactId().equals( dependency.getArtifactId() ) &&
-                        artifact.getGroupId().equals( dependency.getGroupId() ) &&
-                        artifact.getVersion().equals( dependency.getVersion() ) )
-                    {
-                        toadd = false;
-                        break;
-                    }
-                }
-
-                if ( toadd )
-                {
-                    result.add( artifact );
+                    transitiveDependencies.add( artifact );
-            return result;
+            return transitiveDependencies;
+        }
+
+        /**
+         * Get the <code>Maven project</code> from the repository depending
+         * the <code>Artifact</code> given.
+         * 
+         * @param artifact
+         *            an artifact
+         * @return the Maven project for the given artifact
+         * @throws ProjectBuildingException
+         *             if any
+         */
+        private MavenProject getMavenProjectFromRepository( Artifact artifact )
+            throws ProjectBuildingException
+        {
+            return mavenProjectBuilder.buildFromRepository( artifact, project.getRepositories(), artifact
+                .getRepository() );
-}
+}

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV65 INS23 INS23 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS23 INS23 INS31 UPD66 UPD66 UPD66 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS44 MOV21 MOV8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS25 MOV21 MOV21 MOV60 MOV60 MOV60 MOV60 MOV60 MOV21 INS24 MOV21 MOV60 MOV21 INS25 MOV21 MOV60 MOV60 MOV60 INS25 INS24 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS40 INS42 INS42 INS7 INS7 INS27 MOV8 MOV58 MOV32 INS8 MOV32 MOV8 INS8 UPD66 INS66 UPD66 UPD66 INS27 INS8 INS43 MOV58 MOV32 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS22 INS42 INS22 INS42 INS36 INS36 INS21 INS21 INS41 UPD42 UPD42 MOV60 INS60 INS60 INS54 INS21 MOV21 MOV21 MOV21 MOV24 MOV21 UPD42 INS36 INS36 INS41 INS42 UPD42 INS14 INS60 MOV21 MOV60 MOV25 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS27 MOV32 INS32 INS32 UPD45 UPD45 MOV5 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS27 INS27 INS42 INS43 INS32 INS43 INS59 INS32 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS3 INS60 INS54 INS21 INS21 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS32 INS32 INS32 INS32 INS7 INS43 INS42 INS53 MOV5 INS4 MOV5 INS43 INS59 INS8 INS12 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 MOV32 INS32 MOV32 MOV32 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS14 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS40 INS42 INS45 INS40 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS32 INS7 INS43 INS42 INS53 INS42 INS42 MOV5 INS42 INS45 INS42 INS45 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS14 MOV32 INS32 INS32 INS42 INS42 INS43 INS27 MOV42 MOV42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL32 DEL4 DEL3 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL38 DEL43 DEL42 DEL45 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL25 DEL66 DEL65 DEL39 DEL9 DEL42 DEL9 DEL7 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL27 DEL10 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL24 DEL42 DEL41 DEL8