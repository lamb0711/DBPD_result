Resolving: MNG-250



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@226334 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.monitor.event.EventDispatcher;
+import org.apache.maven.monitor.event.MavenEvents;
-import org.apache.maven.plugin.mapping.MavenPluginMappingBuilder;
-    private MavenPluginMappingBuilder pluginMappingBuilder;
-
-    public MavenExecutionResponse execute( List tasks, MavenSession session, MavenProject project )
+    public MavenExecutionResponse execute( MavenSession session, MavenProject project, EventDispatcher dispatcher )
+        List taskSegments = segmentTaskListByAggregationNeeds( session.getGoals(), session, project );
+        
-            for ( Iterator i = tasks.iterator(); i.hasNext(); )
-            {
-                String task = (String) i.next();
-                executeGoal( task, session, project );
-            }
+            executeTaskSegments( taskSegments, session, project, dispatcher );
+    private void executeTaskSegments( List taskSegments, MavenSession session, MavenProject project,
+                                     EventDispatcher dispatcher )
+        throws PluginNotFoundException, MojoExecutionException, ArtifactResolutionException,
+        LifecycleExecutionException
+    {
+        for ( Iterator it = taskSegments.iterator(); it.hasNext(); )
+        {
+            TaskSegment segment = (TaskSegment) it.next();
+            
+            if ( segment.aggregate() )
+            {
+                line();
+
+                getLogger().info( "Building " + project.getName() );
+                
+                getLogger().info( "  " + segment );
+
+                line();
+
+                // !! This is ripe for refactoring to an aspect.
+                // Event monitoring.
+                String event = MavenEvents.PROJECT_EXECUTION;
+
+                dispatcher.dispatchStart( event, project.getId() + " ( " + segment + " )" );
+
+                try
+                {
+                    // only call once, with the top-level project (assumed to be provided as a parameter)...
+                    for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                    {
+                        String task = (String) goalIterator.next();
+
+                        executeGoal( task, session, project );
+                    }
+                    
+                    dispatcher.dispatchEnd( event, project.getId() + " ( " + segment + " )" );
+                }
+                catch ( LifecycleExecutionException e )
+                {
+                    dispatcher.dispatchError( event, project.getId() + " ( " + segment + " )", e );
+                    
+                    throw e;
+                }
+            }
+            else
+            {
+                List sortedProjects = session.getSortedProjects();
+                
+                // iterate over projects, and execute on each...
+                for ( Iterator projectIterator = sortedProjects.iterator(); projectIterator.hasNext(); )
+                {
+                    MavenProject currentProject = (MavenProject) projectIterator.next();
+                    
+                    line();
+
+                    getLogger().info( "Building " + currentProject.getName() );
+                    
+                    getLogger().info( "  " + segment );
+
+                    line();
+
+                    // !! This is ripe for refactoring to an aspect.
+                    // Event monitoring.
+                    String event = MavenEvents.PROJECT_EXECUTION;
+
+                    dispatcher.dispatchStart( event, currentProject.getId() + " ( " + segment + " )" );
+
+                    try
+                    {
+                        for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                        {
+                            String task = (String) goalIterator.next();
+
+                            executeGoal( task, session, currentProject );
+                        }
+                        
+                        dispatcher.dispatchEnd( event, currentProject.getId() + " ( " + segment + " )" );
+                    }
+                    catch ( LifecycleExecutionException e )
+                    {
+                        dispatcher.dispatchError( event, currentProject.getId() + " ( " + segment + " )", e );
+                        
+                        throw e;
+                    }
+                }
+            }
+        }
+    }
+
+    private List segmentTaskListByAggregationNeeds( List tasks, MavenSession session, MavenProject project ) 
+        throws LifecycleExecutionException
+    {
+        List segments = new ArrayList();
+        
+        TaskSegment currentSegment = null;
+        for ( Iterator it = tasks.iterator(); it.hasNext(); )
+        {
+            String task = (String) it.next();
+            
+            // if it's a phase, then we don't need to check whether it's an aggregator.
+            // simply add it to the current task partition.
+            if ( phases.contains( task ) )
+            {
+                if ( currentSegment != null && currentSegment.aggregate() )
+                {
+                    segments.add( currentSegment );
+                    currentSegment = null;
+                }
+                
+                if ( currentSegment == null )
+                {
+                    currentSegment = new TaskSegment();
+                }
+                
+                currentSegment.add( task );
+            }
+            else
+            {
+                MojoDescriptor mojo = null;
+                try
+                {
+                    mojo = getMojoDescriptor( task, session, project );
+                }
+                catch ( LifecycleExecutionException e )
+                {
+                    getLogger().info( "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
+                    getLogger().debug( "", e );
+                }
+                catch ( ArtifactResolutionException e )
+                {
+                    getLogger().info( "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
+                    getLogger().debug( "", e );
+                }
+                
+                if ( mojo != null && mojo.isAggregator() )
+                {
+                    if ( currentSegment != null && !currentSegment.aggregate() )
+                    {
+                        segments.add( currentSegment );
+                        currentSegment = null;
+                    }
+                    
+                    if ( currentSegment == null )
+                    {
+                        currentSegment = new TaskSegment( true );
+                    }
+                    
+                    currentSegment.add( task );
+                }
+                else
+                {
+                    if ( currentSegment != null && currentSegment.aggregate() )
+                    {
+                        segments.add( currentSegment );
+                        currentSegment = null;
+                    }
+                    
+                    if ( currentSegment == null )
+                    {
+                        currentSegment = new TaskSegment();
+                    }
+                    
+                    currentSegment.add( task );
+                }
+            }
+        }
+        
+        segments.add( currentSegment );
+        
+        return segments;
+    }
+
+    
+    protected void line()
+    {
+        getLogger().info( "----------------------------------------------------------------------------" );
+    }
+
+    private static class TaskSegment
+    {
+        private boolean aggregate = false;
+        private List tasks = new ArrayList();
+        
+        TaskSegment()
+        {
+            
+        }
+        
+        TaskSegment( boolean aggregate )
+        {
+            this.aggregate = aggregate;
+        }
+        
+        public String toString()
+        {
+            StringBuffer message = new StringBuffer();
+            
+            message.append( " task-segment: [" );
+            
+            for ( Iterator it = tasks.iterator(); it.hasNext(); )
+            {
+                String task = (String) it.next();
+                
+                message.append( task );
+                
+                if ( it.hasNext() )
+                {
+                    message.append( ", ");
+                }
+            }
+            
+            message.append( "]" );
+            
+            if ( aggregate )
+            {
+                message.append( " (aggregator-style)" );
+            }
+            
+            return message.toString();
+        }
+
+        boolean aggregate()
+        {
+            return aggregate;
+        }
+        
+        void add( String task )
+        {
+            tasks.add( task );
+        }
+        
+        List getTasks()
+        {
+            return tasks;
+        }
+    }

MOV26 INS26 INS40 UPD40 INS31 INS31 INS31 INS55 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS43 INS42 MOV44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS83 INS42 INS23 MOV23 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS42 INS60 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS24 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS24 INS21 INS41 INS21 INS83 INS39 INS59 UPD43 INS42 INS8 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS44 INS8 INS43 INS42 INS8 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS43 INS59 INS43 INS59 MOV58 INS32 INS8 INS32 INS42 INS32 INS42 INS9 UPD42 UPD42 INS14 INS39 INS42 INS21 INS42 INS60 INS21 INS24 INS21 INS25 INS41 INS41 INS43 INS42 INS21 INS42 INS41 INS42 INS42 INS32 INS21 MOV43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS33 INS43 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS32 INS42 INS45 INS43 INS7 INS43 INS59 INS32 INS58 INS32 INS8 INS32 INS42 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS32 INS8 INS8 INS43 INS42 UPD42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS22 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS59 INS42 INS42 INS60 INS21 INS25 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS21 INS21 INS21 INS21 INS60 INS21 INS54 INS60 INS24 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS25 INS25 INS21 INS60 INS54 INS25 INS52 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS8 INS32 INS43 INS32 INS32 INS32 INS32 INS32 MOV43 INS59 INS32 INS8 INS12 INS43 INS59 INS58 INS32 INS8 INS43 INS32 INS27 INS8 INS27 INS8 INS32 INS43 INS59 INS8 INS12 INS12 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS42 INS27 MOV24 INS21 INS44 INS8 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS60 INS21 INS54 INS42 INS42 INS42 INS27 INS32 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS27 INS32 INS25 INS25 INS21 INS25 INS25 INS21 INS43 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS32 INS45 INS42 INS45 INS58 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS8 INS12 INS42 INS33 INS42 INS42 INS32 INS7 INS7 INS7 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS21 INS42 INS33 INS42 INS42 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS59 UPD42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS27 INS24 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS14 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS27 INS38 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS27 INS32 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS43 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS32 INS45 INS42 INS45 INS58 INS32 INS8 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS42 INS45 INS42 INS32 INS42 INS27 INS32 INS42 INS45 INS42 INS42 INS33 INS32 INS32 INS7 INS7 INS42 INS33 INS42 INS42 INS32 INS7 INS7 INS32 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS14 INS42 INS42 INS42 INS42 INS33 INS42 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS43 INS9 INS43 INS42 UPD42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42