o make a separate project dependencies downloader where the scope and exclusions can be taken into account


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@779283 13f79535-47bb-0310-9956-ffa450edef68

-    //TODO: this will also cause a cycle so we need to refactor some code
-    
+
-        Artifact pomArtifact = repositorySystem.createProjectArtifact( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
-
-        if ( "pom".equals( artifact.getType() ) )
-        {
-            pomArtifact.setFile( artifact.getFile() );
-        }
-
-        Set<Artifact> artifacts = Collections.emptySet();
-
-        ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();
-        configuration.setLocalRepository( localRepository );
-        configuration.setRemoteRepositories( remoteRepositories );
-        configuration.setLenientValidation( true );
-        // We don't care about processing plugins here, all we're interested in is the dependencies.
-        configuration.setProcessPlugins( false );
-        // FIXME: We actually need the execution properties here...
-        configuration.setExecutionProperties( System.getProperties() );
-
-        try
+        Artifact pomArtifact;
+
+        //TODO: Not even sure this is really required as the project will be cached in the builder, we'll see this
+        // is currently the biggest hotspot
+        if ( artifact instanceof ProjectArtifact )
-            project = getProjectBuilder().buildFromRepository( pomArtifact, configuration );
+            pomArtifact = artifact;
-            if ( !artifact.getArtifactHandler().isIncludesDependencies() )
+            project = ((ProjectArtifact)artifact).getProject();
+        }
+        else
+        {
+            pomArtifact = repositorySystem.createProjectArtifact( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
+
+            if ( "pom".equals( artifact.getType() ) )
-                artifacts = new LinkedHashSet<Artifact>();
+                pomArtifact.setFile( artifact.getFile() );
+            }
-                for ( Dependency d : project.getDependencies() )
+            ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();
+            configuration.setLocalRepository( localRepository );
+            configuration.setRemoteRepositories( remoteRepositories );
+            configuration.setLenientValidation( true );
+            // We don't care about processing plugins here, all we're interested in is the dependencies.
+            configuration.setProcessPlugins( false );
+            // FIXME: We actually need the execution properties here...
+            configuration.setExecutionProperties( System.getProperties() );
+
+            try
+            {
+                project = getProjectBuilder().buildFromRepository( pomArtifact, configuration );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                // When this happens we have a Maven 1.x POM, or some invalid POM. There is still a pile of
+                // shit in the Maven 2.x repository that should have never found its way into the repository
+                // but it did.
+                logger.debug( "Failed to resolve artifact dependencies: " + e.getMessage() );
+                
+                return new ResolutionGroup( pomArtifact, Collections.<Artifact>emptySet(), remoteRepositories );                            
+            }            
+        }
+
+        Set<Artifact> artifacts = Collections.<Artifact>emptySet();       
+        
+        if ( !artifact.getArtifactHandler().isIncludesDependencies() )
+        {
+            artifacts = new LinkedHashSet<Artifact>();
+
+            for ( Dependency d : project.getDependencies() )
+            {
+                String effectiveScope = getEffectiveScope( d.getScope(), artifact.getScope() );
+
+                if ( effectiveScope != null )
-                    String effectiveScope = getEffectiveScope( d.getScope(), artifact.getScope() );
+                    Artifact dependencyArtifact;
-                    if ( effectiveScope != null )
+                    //TODO: deal with this in a unified way, probably just looking at the dependency.                        
+                    if ( d.getClassifier() != null )
-                        Artifact dependencyArtifact;
-                        
-                        //TODO: deal with this in a unified way, probably just looking at the dependency.                        
-                        if ( d.getClassifier() != null )
-                        {
-                            dependencyArtifact = repositorySystem.createArtifactWithClassifier( d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getType(), d.getClassifier() );                            
-                        }
-                        else
-                        {
-                            dependencyArtifact = repositorySystem.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(), effectiveScope, d.getType() );
-                        }
-
-                        dependencyArtifact.setOptional( d.isOptional() );
-
-                        if ( Artifact.SCOPE_SYSTEM.equals( effectiveScope ) )
-                        {
-                            dependencyArtifact.setFile( new File( d.getSystemPath() ) );
-                        }
-
-                        artifacts.add( dependencyArtifact );
+                        dependencyArtifact = repositorySystem.createArtifactWithClassifier( d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getType(), d.getClassifier() );
+                    else
+                    {
+                        dependencyArtifact = repositorySystem.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(), effectiveScope, d.getType() );
+                    }
+
+                    dependencyArtifact.setOptional( d.isOptional() );
+
+                    if ( Artifact.SCOPE_SYSTEM.equals( effectiveScope ) )
+                    {
+                        dependencyArtifact.setFile( new File( d.getSystemPath() ) );
+                    }                    
+                    
+                    artifacts.add( dependencyArtifact );
-        catch ( ProjectBuildingException e )
-        {
-            // When this happens we have a Maven 1.x POM, or some invalid POM. There is still a pile of
-            // shit in the Maven 2.x repository that should have never found its way into the repository
-            // but it did.
-            logger.debug( "Failed to resolve artifact dependencies: " + e.getMessage() );
-        }
-    @Deprecated                                                                                                                                                                                                                         
-    public static Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenProject project )                                                                                                                                                                 
-        throws InvalidDependencyVersionException                                                                                                                                                                                        
-    {             
+    @Deprecated
+    public static Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenProject project )
+        throws InvalidDependencyVersionException
+    {
-    
+
-        
+
-    }    
-    
+    }
+
-        
+
-        
+
-    }    
+    }

MOV8 MOV60 INS60 INS25 INS60 MOV41 MOV43 INS59 INS62 INS8 INS8 MOV74 INS59 INS42 INS42 INS43 INS21 INS21 INS21 MOV25 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 INS54 INS42 INS32 INS42 INS7 INS7 INS7 INS8 INS12 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 MOV21 MOV44 INS8 INS42 INS36 INS42 MOV21 INS41 INS11 INS14 INS43 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL12 DEL54 DEL8