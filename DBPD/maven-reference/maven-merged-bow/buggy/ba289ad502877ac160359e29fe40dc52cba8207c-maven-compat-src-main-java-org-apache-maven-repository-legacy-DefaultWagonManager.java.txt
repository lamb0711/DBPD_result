MNG-4221: First phase of changing the direction of the dependencies so that maven-compat only points toward the core. The core cannot depend on anything in maven-compat.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@789077 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.maven.artifact.manager;
+package org.apache.maven.repository.legacy;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.Set;
-import org.codehaus.plexus.component.configurator.BasicComponentConfigurator;
-import org.codehaus.plexus.component.configurator.ComponentConfigurationException;
-import org.codehaus.plexus.component.configurator.ComponentConfigurator;
-import org.codehaus.plexus.configuration.PlexusConfiguration;
-import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
+//TODO: remove the update check manager
+//TODO: separate into retriever and publisher
+//TODO: rmeove hardcoding of checksum logic
-    /** Map( String, XmlPlexusConfiguration ) with the repository id and the wagon configuration */
-    private Map<String, XmlPlexusConfiguration> serverConfigurationMap = new HashMap<String, XmlPlexusConfiguration>();
-
-    private Map<String,Wagon> wagons;
+    private Map<String, Wagon> wagons;
-    private String httpUserAgent = "Apache-Maven/3.0-alpha-1";
-
-    private TransferListener downloadMonitor;
-
-    public void setDownloadMonitor( TransferListener downloadMonitor )
-    {
-        this.downloadMonitor = downloadMonitor;
-    }
-
-    public Wagon getWagon( Repository repository )
-        throws UnsupportedProtocolException, WagonConfigurationException
-    {
-        String protocol = repository.getProtocol();
-        
-        if ( protocol == null )
-        {
-            throw new UnsupportedProtocolException( "The repository " + repository + " does not specify a protocol" );
-        }
-
-        Wagon wagon = getWagon( protocol );
-
-        configureWagon( wagon, repository.getId(), protocol );
-
-        return wagon;
-    }
-
-    public Wagon getWagon( String protocol )
-        throws UnsupportedProtocolException
-    {
-        if ( protocol == null )
-        {
-            throw new UnsupportedProtocolException( "Unspecified protocol" );
-        }
-
-        String hint = protocol.toLowerCase( java.util.Locale.ENGLISH );
-        Wagon wagon = (Wagon) wagons.get( hint );
-
-        if ( wagon == null )
-        {
-            throw new UnsupportedProtocolException( "Cannot find wagon which supports the requested protocol: " + protocol );
-        }
-
-        return wagon;
-    }
-
-    public void putArtifact( File source, Artifact artifact, ArtifactRepository deploymentRepository )
-        throws TransferFailedException
-    {
-        putRemoteFile( deploymentRepository, source, deploymentRepository.pathOf( artifact ), downloadMonitor );
-    }
-
-    public void putArtifact( File source, Artifact artifact, ArtifactRepository deploymentRepository, TransferListener downloadMonitor )
-        throws TransferFailedException
-    {
-        putRemoteFile( deploymentRepository, source, deploymentRepository.pathOf( artifact ), downloadMonitor );
-    }
-
-    public void putArtifactMetadata( File source, ArtifactMetadata artifactMetadata, ArtifactRepository repository )
-        throws TransferFailedException
-    {
-        logger.info( "Uploading " + artifactMetadata );
-        putRemoteFile( repository, source, repository.pathOfRemoteRepositoryMetadata( artifactMetadata ), null );
-    }
-
-    public void putRemoteFile( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
-        throws TransferFailedException
-    {
-        String protocol = repository.getProtocol();
-
-        Wagon wagon;
-        try
-        {
-            wagon = getWagon( protocol );
-
-            configureWagon( wagon, repository );
-        }
-        catch ( UnsupportedProtocolException e )
-        {
-            throw new TransferFailedException( "Unsupported Protocol: '" + protocol + "': " + e.getMessage(), e );
-        }
-
-        if ( downloadMonitor != null )
-        {
-            wagon.addTransferListener( downloadMonitor );
-        }
-
-        Map<String, ChecksumObserver> checksums = new HashMap<String, ChecksumObserver>( 2 );
-
-        Map<String, String> sums = new HashMap<String, String>( 2 );
-
-        // TODO: configure these on the repository
-        for ( int i = 0; i < CHECKSUM_IDS.length; i++ )
-        {
-            checksums.put( CHECKSUM_IDS[i], addChecksumObserver( wagon, CHECKSUM_ALGORITHMS[i] ) );
-        }
-
-        try
-        {
-            try
-            {                
-                wagon.connect( new Repository( repository.getId(), repository.getUrl() ) );
-
-                wagon.put( source, remotePath );
-            }
-            finally
-            {
-                if ( downloadMonitor != null )
-                {
-                    wagon.removeTransferListener( downloadMonitor );
-                }
-            }
-
-            // Pre-store the checksums as any future puts will overwrite them
-            for ( String extension : checksums.keySet() )
-            {
-                ChecksumObserver observer = checksums.get( extension );
-                sums.put( extension, observer.getActualChecksum() );
-            }
-
-            // We do this in here so we can checksum the artifact metadata too, otherwise it could be metadata itself
-            for ( String extension : checksums.keySet() )
-            {
-                // TODO: shouldn't need a file intermediatary - improve wagon to take a stream
-                File temp = File.createTempFile( "maven-artifact", null );
-                temp.deleteOnExit();
-                FileUtils.fileWrite( temp.getAbsolutePath(), "UTF-8", sums.get( extension ) );
-
-                wagon.put( temp, remotePath + "." + extension );
-            }
-        }
-        catch ( ConnectionException e )
-        {
-            throw new TransferFailedException( "Connection failed: " + e.getMessage(), e );
-        }
-        catch ( AuthenticationException e )
-        {
-            throw new TransferFailedException( "Authentication failed: " + e.getMessage(), e );
-        }
-        catch ( AuthorizationException e )
-        {
-            throw new TransferFailedException( "Authorization failed: " + e.getMessage(), e );
-        }
-        catch ( ResourceDoesNotExistException e )
-        {
-            throw new TransferFailedException( "Resource to deploy not found: " + e.getMessage(), e );
-        }
-        catch ( IOException e )
-        {
-            throw new TransferFailedException( "Error creating temporary file for deployment: " + e.getMessage(), e );
-        }
-        finally
-        {
-            // Remove every checksum listener
-            for ( String aCHECKSUM_IDS : CHECKSUM_IDS )
-            {
-                TransferListener checksumListener = checksums.get( aCHECKSUM_IDS );
-                if ( checksumListener != null )
-                {
-                    wagon.removeTransferListener( checksumListener );
-                }
-            }
-
-            disconnectWagon( wagon );
-
-            releaseWagon( protocol, wagon );
-        }
-    }
-
-    private ChecksumObserver addChecksumObserver( Wagon wagon, String algorithm )
-        throws TransferFailedException
-    {
-        try
-        {
-            ChecksumObserver checksumObserver = new ChecksumObserver( algorithm );
-            wagon.addTransferListener( checksumObserver );
-            return checksumObserver;
-        }
-        catch ( NoSuchAlgorithmException e )
-        {
-            throw new TransferFailedException( "Unable to add checksum for unsupported algorithm " + algorithm, e );
-        }
-    }
-
-    // NOTE: It is not possible that this method throws TransferFailedException under current conditions.
-    // FIXME: Change the throws clause to reflect the fact that we're never throwing TransferFailedException
-    public void getArtifact( Artifact artifact, ArtifactRepository remoteRepository, boolean force )
-        throws TransferFailedException, ResourceDoesNotExistException
-    {
-        getArtifact( artifact, remoteRepository, downloadMonitor, force );
-    }
-
-    public void getArtifact( Artifact artifact, ArtifactRepository remoteRepository )
-        throws TransferFailedException, ResourceDoesNotExistException
-    {
-        getArtifact( artifact, remoteRepository, downloadMonitor, true );
-    }
-
-    public void getArtifact( Artifact artifact, List<ArtifactRepository> remoteRepositories, TransferListener downloadMonitor )
-        throws TransferFailedException, ResourceDoesNotExistException
-    {
-        getArtifact( artifact, remoteRepositories, downloadMonitor, true );
-    }
-
-    public void getArtifact( Artifact artifact, List<ArtifactRepository> remoteRepositories, TransferListener downloadMonitor, boolean force )
-        throws TransferFailedException, ResourceDoesNotExistException
-    {
-        for ( ArtifactRepository repository : remoteRepositories )
-        {
-            try
-            {
-                getArtifact( artifact, repository, downloadMonitor, force );
-
-                if ( artifact.isResolved() )
-                {
-                    break;
-                }
-            }
-            catch ( ResourceDoesNotExistException e )
-            {
-                // This one we will eat when looking through remote repositories
-                // because we want to cycle through them all before squawking.
-
-                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " + repository.getId() + " (" + repository.getUrl() + ")", e );
-            }
-            catch ( TransferFailedException e )
-            {
-                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " + repository.getId() + " (" + repository.getUrl() + ")", e );
-            }
-        }        
-        
-        // if it already exists locally we were just trying to force it - ignore the update
-        if ( !artifact.getFile().exists() )
-        {
-            throw new ResourceDoesNotExistException( "Unable to download the artifact from any repository" );
-        }
-    }
-
+    //
+    // Retriever
+    //   
-        getArtifact( artifact, repository, downloadMonitor, true );
-    }
-
-    //TODO: all of this needs to move into the repository system
-    
-    public void getArtifact( Artifact artifact, ArtifactRepository repository, TransferListener downloadMonitor, boolean force )
-        throws TransferFailedException, ResourceDoesNotExistException
-    {
-        
+
-                
+
-        
+
-        {            
+        {
-        
+
-        else if ( artifact.isSnapshot() && ( force || updateCheckIsRequired ) )
+        else if ( artifact.isSnapshot() && updateCheckIsRequired )
-            if ( force || updateCheckManager.isPomUpdateRequired( artifact, repository ) )
+            if ( updateCheckManager.isPomUpdateRequired( artifact, repository ) )
+    public void getArtifact( Artifact artifact, List<ArtifactRepository> remoteRepositories, TransferListener downloadMonitor )
+        throws TransferFailedException, ResourceDoesNotExistException
+    {
+        for ( ArtifactRepository repository : remoteRepositories )
+        {
+            try
+            {
+                getArtifact( artifact, repository, downloadMonitor );
+
+                if ( artifact.isResolved() )
+                {
+                    break;
+                }
+            }
+            catch ( ResourceDoesNotExistException e )
+            {
+                // This one we will eat when looking through remote repositories
+                // because we want to cycle through them all before squawking.
+
+                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " + repository.getId() + " (" + repository.getUrl() + ")", e );
+            }
+            catch ( TransferFailedException e )
+            {
+                logger.debug( "Unable to get resource '" + artifact.getId() + "' from repository " + repository.getId() + " (" + repository.getUrl() + ")", e );
+            }
+        }
+
+        // if it already exists locally we were just trying to force it - ignore the update
+        if ( !artifact.getFile().exists() )
+        {
+            throw new ResourceDoesNotExistException( "Unable to download the artifact from any repository" );
+        }
+    }
+
-        
+
-
-            configureWagon( wagon, repository );
-        
+
-        {            
+        {
+    //
+    // Publisher
+    //    
+    public void putArtifact( File source, Artifact artifact, ArtifactRepository deploymentRepository, TransferListener downloadMonitor )
+        throws TransferFailedException
+    {
+        putRemoteFile( deploymentRepository, source, deploymentRepository.pathOf( artifact ), downloadMonitor );
+    }
+
+    public void putArtifactMetadata( File source, ArtifactMetadata artifactMetadata, ArtifactRepository repository )
+        throws TransferFailedException
+    {
+        logger.info( "Uploading " + artifactMetadata );
+        putRemoteFile( repository, source, repository.pathOfRemoteRepositoryMetadata( artifactMetadata ), null );
+    }
+
+    public void putRemoteFile( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
+        throws TransferFailedException
+    {
+        String protocol = repository.getProtocol();
+
+        Wagon wagon;
+        try
+        {
+            wagon = getWagon( protocol );
+        }
+        catch ( UnsupportedProtocolException e )
+        {
+            throw new TransferFailedException( "Unsupported Protocol: '" + protocol + "': " + e.getMessage(), e );
+        }
+
+        if ( downloadMonitor != null )
+        {
+            wagon.addTransferListener( downloadMonitor );
+        }
+
+        Map<String, ChecksumObserver> checksums = new HashMap<String, ChecksumObserver>( 2 );
+
+        Map<String, String> sums = new HashMap<String, String>( 2 );
+
+        // TODO: configure these on the repository
+        for ( int i = 0; i < CHECKSUM_IDS.length; i++ )
+        {
+            checksums.put( CHECKSUM_IDS[i], addChecksumObserver( wagon, CHECKSUM_ALGORITHMS[i] ) );
+        }
+
+        try
+        {
+            try
+            {
+                wagon.connect( new Repository( repository.getId(), repository.getUrl() ) );
+
+                wagon.put( source, remotePath );
+            }
+            finally
+            {
+                if ( downloadMonitor != null )
+                {
+                    wagon.removeTransferListener( downloadMonitor );
+                }
+            }
+
+            // Pre-store the checksums as any future puts will overwrite them
+            for ( String extension : checksums.keySet() )
+            {
+                ChecksumObserver observer = checksums.get( extension );
+                sums.put( extension, observer.getActualChecksum() );
+            }
+
+            // We do this in here so we can checksum the artifact metadata too, otherwise it could be metadata itself
+            for ( String extension : checksums.keySet() )
+            {
+                // TODO: shouldn't need a file intermediatary - improve wagon to take a stream
+                File temp = File.createTempFile( "maven-artifact", null );
+                temp.deleteOnExit();
+                FileUtils.fileWrite( temp.getAbsolutePath(), "UTF-8", sums.get( extension ) );
+
+                wagon.put( temp, remotePath + "." + extension );
+            }
+        }
+        catch ( ConnectionException e )
+        {
+            throw new TransferFailedException( "Connection failed: " + e.getMessage(), e );
+        }
+        catch ( AuthenticationException e )
+        {
+            throw new TransferFailedException( "Authentication failed: " + e.getMessage(), e );
+        }
+        catch ( AuthorizationException e )
+        {
+            throw new TransferFailedException( "Authorization failed: " + e.getMessage(), e );
+        }
+        catch ( ResourceDoesNotExistException e )
+        {
+            throw new TransferFailedException( "Resource to deploy not found: " + e.getMessage(), e );
+        }
+        catch ( IOException e )
+        {
+            throw new TransferFailedException( "Error creating temporary file for deployment: " + e.getMessage(), e );
+        }
+        finally
+        {
+            // Remove every checksum listener
+            for ( String aCHECKSUM_IDS : CHECKSUM_IDS )
+            {
+                TransferListener checksumListener = checksums.get( aCHECKSUM_IDS );
+                if ( checksumListener != null )
+                {
+                    wagon.removeTransferListener( checksumListener );
+                }
+            }
+
+            disconnectWagon( wagon );
+
+            releaseWagon( protocol, wagon );
+        }
+    }
+
+    private ChecksumObserver addChecksumObserver( Wagon wagon, String algorithm )
+        throws TransferFailedException
+    {
+        try
+        {
+            ChecksumObserver checksumObserver = new ChecksumObserver( algorithm );
+            wagon.addTransferListener( checksumObserver );
+            return checksumObserver;
+        }
+        catch ( NoSuchAlgorithmException e )
+        {
+            throw new TransferFailedException( "Unable to add checksum for unsupported algorithm " + algorithm, e );
+        }
+    }
+
-    /**
-     * Checks the URL to see if this repository refers to an external repository
-     * 
-     * @param originalRepository
-     * @return true if external.
-     */
-    public boolean isExternalRepo( ArtifactRepository originalRepository )
+    @Deprecated
+    public Wagon getWagon( String protocol )
+        throws UnsupportedProtocolException
-        try
+        if ( protocol == null )
-            URL url = new URL( originalRepository.getUrl() );
-            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" ) || url.getProtocol().equals( "file" ) );
+            throw new UnsupportedProtocolException( "Unspecified protocol" );
-        catch ( MalformedURLException e )
+
+        String hint = protocol.toLowerCase( java.util.Locale.ENGLISH );
+        Wagon wagon = (Wagon) wagons.get( hint );
+
+        if ( wagon == null )
-            // bad url just skip it here. It should have been validated already, but the wagon lookup will deal with it
-            return false;
+            throw new UnsupportedProtocolException( "Cannot find wagon which supports the requested protocol: " + protocol );
-    }
-    
-    /**
-     * Applies the server configuration to the wagon
-     * 
-     * @param wagon the wagon to configure
-     * @param repository the repository that has the configuration
-     * @throws WagonConfigurationException wraps any error given during configuration of the wagon
-     *             instance
-     */
-    private void configureWagon( Wagon wagon, ArtifactRepository repository )
-        throws WagonConfigurationException
-    {
-        configureWagon( wagon, repository.getId(), repository.getProtocol() );
-    }
-    private void configureWagon( Wagon wagon, String repositoryId, String protocol )
-        throws WagonConfigurationException
-    {
-        PlexusConfiguration config = (PlexusConfiguration) serverConfigurationMap.get( repositoryId );
-
-        if ( config != null )
-        {
-            ComponentConfigurator componentConfigurator = null;
-
-            try
-            {
-                componentConfigurator = new BasicComponentConfigurator();
-
-                componentConfigurator.configureComponent( wagon, config, container.getContainerRealm() );
-            }
-            catch ( ComponentConfigurationException e )
-            {
-                throw new WagonConfigurationException( repositoryId, "Unable to apply wagon configuration.", e );
-            }
-            finally
-            {
-                if ( componentConfigurator != null )
-                {
-                    try
-                    {
-                        container.release( componentConfigurator );
-                    }
-                    catch ( ComponentLifecycleException e )
-                    {
-                        logger.error( "Problem releasing configurator - ignoring: " + e.getMessage() );
-                    }
-                }
-
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void setHttpUserAgent( String userAgent )
-    {
-        this.httpUserAgent = userAgent;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public String getHttpUserAgent()
-    {
-        return httpUserAgent;
-    }
-
-    public Set<String> getSupportProtocols()
-    {
-        return wagons.keySet();
+        return wagon;

MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 INS78 MOV54 INS54 INS42 INS8 MOV12 MOV21 MOV42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL39 DEL42 DEL44 DEL42 DEL27 DEL36 DEL42 DEL27 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL27 DEL36 DEL38 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31