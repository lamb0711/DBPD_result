o scrub of the settings building, was able to reduce to the need of the build context and use the execution request
  directly. eventually i will get it to be the session, along with the profile tools, then all the tools can also 
  share a common interpolator, which can then be shared by other components instead of having 5 interpolators lying
  around causing a great deal of inconsistency.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@573494 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.context.BuildContextManager;
-import org.apache.maven.context.SystemBuildContext;
+import org.apache.maven.execution.MavenExecutionRequest;
-    private BuildContextManager manager;
-
-    /**
-     * @since 2.1
-     */
-    public Settings buildSettings( File userSettingsFile, File globalSettingsFile )
+    /** @since 2.1 */
+    public Settings buildSettings( MavenExecutionRequest request )        
+        File userSettingsFile = request.getUserSettingsFile();
+
+        File globalSettingsFile = request.getGlobalSettingsFile();
+
-                               "No settings files provided, and default locations are disabled for this request. Returning empty Settings instance." );
+                "No settings files provided, and default locations are disabled for this request. Returning empty Settings instance." );
-        validateSettings( globalSettings, globalSettingsFile );
+        validateSettings(
+            globalSettings,
+            globalSettingsFile );
-        validateSettings( userSettings, userSettingsFile );
+        validateSettings(
+            userSettings,
+            userSettingsFile );
-        SettingsUtils.merge( userSettings, globalSettings, TrackableBase.GLOBAL_LEVEL );
+        SettingsUtils.merge(
+            userSettings,
+            globalSettings,
+            TrackableBase.GLOBAL_LEVEL );
-        userSettings = interpolate( userSettings );
+        userSettings = interpolate( userSettings, request );
-    private Settings interpolate( Settings settings )
+    private Settings interpolate( Settings settings, MavenExecutionRequest request )
-        
-        new SettingsXpp3Writer().write( writer, settings );
+
+        new SettingsXpp3Writer().write(
+            writer,
+            settings );
-        SystemBuildContext sysContext = SystemBuildContext.getSystemBuildContext( manager, true );
-
-        interpolator.addValueSource( new PropertiesBasedValueSource( sysContext.getSystemProperties() ) );
+        interpolator.addValueSource( new PropertiesBasedValueSource( request.getProperties() ) );
-        serializedSettings = interpolator.interpolate( serializedSettings, "settings" );
+        serializedSettings = interpolator.interpolate(
+            serializedSettings,
+            "settings" );
+
-        if ( settingsFile.exists() && settingsFile.isFile() )
+        FileReader reader = null;
+
+        try
-            getLogger().debug( "Settings file is a proper file. Reading." );
+            reader = new FileReader( settingsFile );
-            FileReader reader = null;
-            try
-            {
-                reader = new FileReader( settingsFile );
+            SettingsXpp3Reader modelReader = new SettingsXpp3Reader();
-                SettingsXpp3Reader modelReader = new SettingsXpp3Reader();
+            settings = modelReader.read( reader );
+        }
+        catch ( XmlPullParserException e )
+        {
+            getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing XmlPullParserException..." );
-                settings = modelReader.read( reader );
+            throw e;
+        }
+        catch ( IOException e )
+        {
+            getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing IOException..." );
-                RuntimeInfo rtInfo = new RuntimeInfo( settings );
-
-                rtInfo.addLocation( settingsFile.getAbsolutePath() );
-
-                settings.setRuntimeInfo( rtInfo );
-            }
-            catch ( XmlPullParserException e )
-            {
-                getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing XmlPullParserException..." );
-
-                throw e;
-            }
-            catch ( IOException e )
-            {
-                getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing IOException..." );
-
-                throw e;
-            }
-            finally
-            {
-                IOUtil.close( reader );
-            }
+            throw e;
+        }
+        finally
+        {
+            IOUtil.close( reader );
-    private void validateSettings( Settings settings, File location )
+    private void validateSettings( Settings settings,
+                                   File location )

UPD40 INS44 MOV8 INS43 INS42 INS60 INS60 INS43 INS42 MOV25 MOV60 MOV41 UPD66 INS42 MOV43 INS59 MOV43 INS59 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL25 DEL8