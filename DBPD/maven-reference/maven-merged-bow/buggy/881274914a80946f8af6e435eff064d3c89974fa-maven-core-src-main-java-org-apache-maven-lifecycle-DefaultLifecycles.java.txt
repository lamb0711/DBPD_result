[MNG-6917] Introduce wrapper lifecycle

-import org.codehaus.plexus.util.StringUtils;
-import java.util.ArrayList;
+import java.util.Comparator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.Set;
+import java.util.Objects;
+import java.util.stream.Collectors;
-    public static final String[] STANDARD_LIFECYCLES = { "default", "clean", "site" };
+    public static final String[] STANDARD_LIFECYCLES = { "default", "clean", "site", "wrapper" };
-    @Inject
-    private Map<String, Lifecycle> lifecycles;
+    private final Map<String, Lifecycle> lifecyclesMap;
-    @Inject
-    private Logger logger;
+    private final Logger logger;
+        this.lifecyclesMap = null;
+        this.logger = null;
-    public DefaultLifecycles( Map<String, Lifecycle> lifecycles, Logger logger )
+    @Inject
+    public DefaultLifecycles( Map<String, Lifecycle> lifecyclesMap, Logger logger )
-        this.lifecycles = new LinkedHashMap<>();
+        // Must keep the lifecyclesMap as is.
+        // During initialization it only contains the default lifecycles.
+        // However, extensions might add custom lifecycles later on.
+        this.lifecyclesMap = lifecyclesMap;
-        this.lifecycles = lifecycles;
-    public Lifecycle get( String key )
+    /**
+     * Get lifecycle based on phase
+     * 
+     * @param phase
+     * @return
+     */
+    public Lifecycle get( String phase )
-        return getPhaseToLifecycleMap().get( key );
+        return getPhaseToLifecycleMap().get( phase );
-        HashMap<String, Lifecycle> phaseToLifecycleMap = new HashMap<>();
+        Map<String, Lifecycle> phaseToLifecycleMap = new HashMap<>();
-        // ensure canonical order of standard lifecycles
-        Map<String, Lifecycle> lifecycles = new LinkedHashMap<>( this.lifecycles );
-
-        LinkedHashSet<String> lifecycleNames = new LinkedHashSet<>( Arrays.asList( STANDARD_LIFECYCLES ) );
-        lifecycleNames.addAll( lifecycles.keySet() );
-
-        ArrayList<Lifecycle> result = new ArrayList<>();
-        for ( String name : lifecycleNames )
+        List<String> lifecycleIds = Arrays.asList( STANDARD_LIFECYCLES );
+        
+        Comparator<String> comparator = ( l, r ) -> 
-            Lifecycle lifecycle = lifecycles.get( name );
-            if ( lifecycle.getId() == null )
+            if ( lifecycleIds.contains( l ) ) 
-                throw new NullPointerException( "A lifecycle must have an id." );
+                return lifecycleIds.indexOf( l ) - lifecycleIds.indexOf( r );      
-            result.add( lifecycle );
-        }
-
-        return result;
+            else
+            {
+                return Integer.MAX_VALUE;
+            }
+        }; 
+        
+        // ensure canonical order of standard lifecycles
+        return lifecyclesMap.values().stream()
+                                .peek( l -> Objects.requireNonNull( l.getId(), "A lifecycle must have an id." ) )
+                                .sorted( Comparator.comparing( Lifecycle::getId, comparator ) )
+                                .collect( Collectors.toList() );
-        Set<String> phases = new LinkedHashSet<>();
-
-        for ( Lifecycle lifecycle : getLifeCycles() )
-        {
-            phases.addAll( lifecycle.getPhases() );
-        }
-
-        return StringUtils.join( phases.iterator(), ", " );
+        return getLifeCycles().stream()
+                        .flatMap( l -> l.getPhases().stream() )
+                        .collect( Collectors.joining( ", " ) );
-
+    

MOV26 MOV26 UPD40 UPD40 UPD40 INS83 INS83 MOV78 MOV21 INS29 UPD42 INS21 INS21 UPD42 INS65 INS65 INS65 UPD42 INS60 INS41 INS41 INS45 INS7 INS7 INS66 INS42 UPD74 INS74 UPD74 MOV74 INS59 INS32 INS32 INS22 INS33 INS22 INS33 UPD42 UPD42 MOV43 INS43 MOV43 UPD42 MOV32 UPD43 INS42 INS86 INS32 INS42 INS32 INS32 INS42 INS32 INS52 INS42 INS52 INS42 UPD42 UPD42 MOV42 MOV42 INS42 UPD42 INS59 INS59 INS8 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS86 UPD42 MOV42 UPD42 MOV42 MOV45 INS42 INS42 INS25 INS32 INS42 INS86 UPD42 MOV42 UPD42 MOV42 INS90 INS42 MOV32 INS42 INS59 INS32 INS32 INS8 INS8 INS32 INS42 INS59 INS32 INS42 INS42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS42 INS41 INS41 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS45 UPD42 INS27 INS40 UPD42 MOV42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL42 DEL43 DEL74 DEL14 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL32 DEL41