PR: MNG-505
enable version ranges in resolution (only default conflict resolution - nearest suggested version, fail if over-constrained)

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219844 13f79535-47bb-0310-9956-ffa450edef68

+    private final ArtifactVersion RELEASE = new DefaultArtifactVersion( "RELEASE" );
+
+
+    public ArtifactVersion getSelectedVersion()
+        throws OverConstrainedVersionException
+    {
+        ArtifactVersion version;
+        if ( recommendedVersion != null )
+        {
+            version = recommendedVersion;
+        }
+        else
+        {
+            if ( restrictions.size() == 0 )
+            {
+                throw new OverConstrainedVersionException( "The artifact has no valid ranges" );
+            }
+            else
+            {
+                Restriction restriction = (Restriction) restrictions.get( restrictions.size() - 1 );
+                // TODO: how can we find the latest release before something to facilitate ) at the end?
+                version = restriction.getUpperBound();
+                if ( version == null )
+                {
+                    version = RELEASE;
+                }
+            }
+        }
+        return version;
+    }
+
+    public String toString()
+    {
+        if ( recommendedVersion != null )
+        {
+            return recommendedVersion.toString();
+        }
+        else
+        {
+            StringBuffer buf = new StringBuffer();
+            for ( Iterator i = restrictions.iterator(); i.hasNext(); )
+            {
+                Restriction r = (Restriction) i.next();
+
+                buf.append( r.isLowerBoundInclusive() ? "[" : "(" );
+                if ( r.getLowerBound() != null )
+                {
+                    buf.append( r.getLowerBound().toString() );
+                }
+                buf.append( "," );
+                if ( r.getUpperBound() != null )
+                {
+                    buf.append( r.getUpperBound().toString() );
+                }
+                buf.append( r.isUpperBoundInclusive() ? "]" : ")" );
+
+                if ( i.hasNext() )
+                {
+                    buf.append( "," );
+                }
+            }
+            return buf.toString();
+        }
+    }

INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS41 INS42 INS25 INS43 INS45 INS43 INS59 INS27 INS8 INS8 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS33 INS21 INS25 INS42 INS33 INS41 INS60 INS24 INS41 INS7 INS27 INS8 INS8 INS32 INS43 INS59 INS58 INS32 INS8 INS32 INS42 INS42 INS32 INS34 INS53 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS21 INS25 INS21 INS25 INS21 INS25 INS42 INS42 INS42 INS42 INS14 INS43 INS59 INS7 INS27 INS8 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS32 INS8 INS43 INS45 INS42 INS42 INS11 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS16 INS32 INS33 INS21 INS42 INS42 INS45 INS32 INS33 INS21 INS42 INS42 INS16 INS42 INS42 INS21 INS42 INS43 INS32 INS42 INS42 INS7 INS43 INS32 INS32 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS45 INS45 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS34 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42