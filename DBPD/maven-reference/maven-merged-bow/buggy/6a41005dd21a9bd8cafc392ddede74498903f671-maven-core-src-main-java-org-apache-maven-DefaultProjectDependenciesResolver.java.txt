o Synced ProjectDependenciesResolver with MSHARED-126

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@809365 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.Iterator;
-import org.apache.maven.artifact.repository.RepositoryRequest;
+import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.artifact.resolver.MultipleArtifactsNotFoundException;
-import org.apache.maven.artifact.resolver.filter.OrArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
-import org.apache.maven.model.Dependency;
+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;
+import org.apache.maven.execution.MavenSession;
+
-    
+
-    
-    public Set<Artifact> resolve( MavenProject project, Collection<String> scopes, RepositoryRequest repositoryRequest )
+
+    public Set<Artifact> resolve( MavenProject project, Collection<String> scopes, MavenSession session )
-    {        
+    {
+        return resolve( Collections.singleton( project ), scopes, session );
+    }
+
+    public Set<Artifact> resolve( Collection<? extends MavenProject> projects, Collection<String> scopes,
+                                  MavenSession session )
+        throws ArtifactResolutionException, ArtifactNotFoundException
+    {
+        Set<Artifact> resolved = new LinkedHashSet<Artifact>();
+
+        if ( projects == null || projects.isEmpty() )
+        {
+            return resolved;
+        }
+
-         
+        
-        OrArtifactFilter scopeFilter = new OrArtifactFilter();
-
-        for ( String scope : scopes )
-        {
-            scopeFilter.add( new ScopeArtifactFilter( scope ) );
-        }
+        ArtifactFilter scopeFilter = new CumulativeScopeArtifactFilter( scopes );
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest( repositoryRequest )
-            .setArtifact( new ProjectArtifact( project ) )
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setManagedVersionMap( project.getManagedVersionMap() )
-            .setFilter( filter );
+            .setFilter( filter )
+            .setLocalRepository( session.getLocalRepository() )
+            .setOffline( session.isOffline() )
+            .setCache( session.getRepositoryCache() );
-        
-        ArtifactResolutionResult result = repositorySystem.resolve( request );                
-        project.setArtifacts( result.getArtifacts() );
+        Set<String> projectIds = null;
-        Set<String> directDependencies = new HashSet<String>( project.getDependencies().size() * 2 );
-        for ( Dependency dependency : project.getDependencies() )
+        for ( MavenProject project : projects )
-            directDependencies.add( dependency.getManagementKey() );
-        }
+            request.setArtifact( new ProjectArtifact( project ) );
+            request.setManagedVersionMap( project.getManagedVersionMap() );
+            request.setRemoteRepositories( project.getRemoteArtifactRepositories() );
-        Set<Artifact> dependencyArtifacts = new LinkedHashSet<Artifact>( project.getDependencies().size() * 2 );
-        for ( Artifact artifact : result.getArtifacts() )
-        {
-            if ( directDependencies.contains( artifact.getDependencyConflictId() ) )
+            ArtifactResolutionResult result = repositorySystem.resolve( request );
+
+            try
-                dependencyArtifacts.add( artifact );
+                resolutionErrorHandler.throwErrors( request, result );
+            catch ( MultipleArtifactsNotFoundException e )
+            {
+                if ( projectIds == null )
+                {
+                    projectIds = new HashSet<String>( projects.size() * 2 );
+
+                    for ( MavenProject p : projects )
+                    {
+                        String key = ArtifactUtils.key( p.getGroupId(), p.getArtifactId(), p.getVersion() );
+                        projectIds.add( key );
+                    }
+                }
+
+                Collection<Artifact> missing = new HashSet<Artifact>( e.getMissingArtifacts() );
+
+                for ( Iterator<Artifact> it = missing.iterator(); it.hasNext(); )
+                {
+                    String key = ArtifactUtils.key( it.next() );
+                    if ( projectIds.contains( key ) )
+                    {
+                        it.remove();
+                    }
+                }
+
+                if ( !missing.isEmpty() )
+                {
+                    throw e;
+                }
+            }
+
+            resolved.addAll( result.getArtifacts() );
-        project.setDependencyArtifacts( dependencyArtifacts );
-        resolutionErrorHandler.throwErrors( request, result );
-
-        return result.getArtifacts();
+        return resolved;

MOV26 INS26 INS26 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 MOV83 INS74 MOV42 MOV44 INS44 INS44 INS43 INS43 INS8 INS83 MOV74 INS42 INS44 MOV44 INS44 MOV43 MOV43 INS8 INS43 INS43 UPD43 UPD42 INS74 INS42 INS43 INS42 INS42 UPD42 MOV42 INS41 INS74 INS42 INS43 UPD42 MOV42 MOV60 INS25 INS60 MOV60 MOV60 INS60 INS70 INS41 INS42 INS42 UPD42 INS43 INS43 INS42 INS32 INS43 INS76 INS42 INS27 INS8 INS43 INS59 MOV43 MOV74 INS59 MOV44 INS42 INS8 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 UPD42 INS27 INS32 INS41 INS42 INS42 INS14 INS42 INS33 INS21 INS21 INS21 MOV60 INS54 MOV21 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 UPD43 MOV43 UPD42 MOV42 INS32 UPD42 INS32 MOV32 INS32 INS32 INS8 INS12 UPD42 MOV32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 MOV21 INS44 INS8 UPD42 UPD42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS60 INS24 INS25 MOV32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS27 INS8 INS74 INS59 INS58 INS32 INS8 INS38 INS8 INS42 INS33 INS21 MOV70 INS43 MOV43 INS42 INS14 INS74 INS59 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS32 INS53 INS14 INS7 INS42 INS8 INS42 INS74 INS32 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS42 MOV43 INS42 INS14 UPD43 UPD42 INS60 MOV21 INS43 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 MOV74 MOV27 UPD42 MOV43 INS59 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL14 DEL42 DEL32 DEL42 DEL32 DEL32 DEL8 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL44 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL70 DEL42 DEL14 DEL59 DEL60 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL32 DEL21 DEL32 DEL41 DEL8 DEL31