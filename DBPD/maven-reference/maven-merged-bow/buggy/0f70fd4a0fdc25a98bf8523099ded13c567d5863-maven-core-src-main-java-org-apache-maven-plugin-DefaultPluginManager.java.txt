o working creating a clean path of plugin resolution logic, and separting report processing from plugin processing


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@757003 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.filter.AndArtifactFilter;
+            
+            
-        {
-            Artifact pluginArtifact = resolvePluginArtifact( plugin, project, session );
-            
-            addPlugin( plugin, pluginArtifact, project, session );
+        {            
+            addPlugin( plugin, project, session );
-    protected void addPlugin( Plugin plugin, Artifact pluginArtifact, MavenProject project, MavenSession session )
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException
-    {
+    protected void addPlugin( Plugin plugin, MavenProject project, MavenSession session )
+        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException, PluginVersionResolutionException
+    {                
+        logger.debug( "Resolving plugin artifact " + plugin.getKey() + " from " + project.getRemoteArtifactRepositories() );
+
+        ArtifactRepository localRepository = session.getLocalRepository();
+
+        MavenProject pluginProject = buildPluginProject( plugin, localRepository, project.getRemoteArtifactRepositories() );
+
+        Artifact pluginArtifact = repositorySystem.createPluginArtifact( plugin );
+
+        checkRequiredMavenVersion( plugin, pluginProject, localRepository, project.getRemoteArtifactRepositories() );
+
+        checkPluginDependencySpec( plugin, pluginProject );
+
+        pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
+
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest( pluginArtifact, localRepository, project.getRemoteArtifactRepositories() );
+
+        ArtifactResolutionResult result = repositorySystem.resolve( request );
+
+        resolutionErrorHandler.throwErrors( request, result );        
+        
+        
+        // Trying to cache the version of the plugin for a project?
-                        
+                              
+    // plugin artifact
+    //   its dependencies while filtering out what's in the core
+    //   layering on the project level plugin dependencies
+    
+    
-        ArtifactFilter filter = new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM );
-
+        AndArtifactFilter filter = new AndArtifactFilter();
+        filter.add( coreArtifactFilterManager.getCoreArtifactFilter() );
+        filter.add( new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM ) );
+        
-            projectPluginDependencies = repositorySystem.createArtifacts( plugin.getDependencies(), null, coreArtifactFilterManager.getCoreArtifactFilter(), project );
+            projectPluginDependencies = repositorySystem.createArtifacts( plugin.getDependencies(), null, filter, project );
+        
-        {
+        {            
-
+            
-        return resolvePluginVersion( groupId, artifactId, project, session.getLocalRepository(), false );
-    }
+        String version = null;
+        
+        if ( project.getBuildPlugins() != null )
+        {
+            for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext() && ( version == null ); )
+            {
+                Plugin plugin = (Plugin) it.next();
-    public String resolveReportPluginVersion( String groupId, String artifactId, MavenProject project, MavenSession session )
-        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException
-    {
-        return resolvePluginVersion( groupId, artifactId, project, session.getLocalRepository(), true );
-    }
-
-    private String resolvePluginVersion( String groupId, String artifactId, MavenProject project, ArtifactRepository localRepository, boolean resolveAsReportPlugin )
-        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException
-    {
-        // first pass...if the plugin is specified in the pom, try to retrieve the version from there.
-        String version = getVersionFromPluginConfig( groupId, artifactId, project, resolveAsReportPlugin );
-
+                if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
+                {
+                    version = plugin.getVersion();
+                }
+            }
+        }
+        
-            version = resolveMetaVersion( groupId, artifactId, project, localRepository, Artifact.RELEASE_VERSION );
+            version = resolveMetaVersion( groupId, artifactId, project, session.getLocalRepository(), Artifact.RELEASE_VERSION );
-        return version;
+        return version;        
-    private String getVersionFromPluginConfig( String groupId, String artifactId, MavenProject project, boolean resolveAsReportPlugin )
+    public String resolveReportPluginVersion( String groupId, String artifactId, MavenProject project, MavenSession session )
+        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException
-
-        if ( resolveAsReportPlugin )
+        
+        if ( project.getReportPlugins() != null )
-            if ( project.getReportPlugins() != null )
+            for ( Iterator it = project.getReportPlugins().iterator(); it.hasNext() && ( version == null ); )
-                for ( Iterator it = project.getReportPlugins().iterator(); it.hasNext() && ( version == null ); )
-                {
-                    ReportPlugin plugin = (ReportPlugin) it.next();
+                ReportPlugin plugin = (ReportPlugin) it.next();
-                    if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
-                    {
-                        version = plugin.getVersion();
-                    }
+                if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
+                {
+                    version = plugin.getVersion();
-        else
+        
+        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/>
+        // in settings.xml.
+        if ( StringUtils.isEmpty( version ) || Artifact.RELEASE_VERSION.equals( version ) )
-            if ( project.getBuildPlugins() != null )
-            {
-                for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext() && ( version == null ); )
-                {
-                    Plugin plugin = (Plugin) it.next();
+            // 1. resolve the version to be used
+            version = resolveMetaVersion( groupId, artifactId, project, session.getLocalRepository(), Artifact.RELEASE_VERSION );
+            logger.debug( "Version from RELEASE metadata: " + version );
+        }
-                    if ( groupId.equals( plugin.getGroupId() ) && artifactId.equals( plugin.getArtifactId() ) )
-                    {
-                        version = plugin.getVersion();
-                    }
-                }
-            }
+        // if we still haven't found a version, then fail early before we get into the update goop.
+        if ( StringUtils.isEmpty( version ) )
+        {
+            throw new PluginVersionNotFoundException( groupId, artifactId );

INS26 MOV31 INS40 MOV43 UPD83 INS42 MOV44 MOV43 MOV43 MOV43 MOV8 MOV43 MOV44 MOV44 MOV44 MOV44 MOV43 MOV43 MOV43 MOV8 UPD42 MOV42 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS60 INS21 INS21 INS21 MOV60 MOV25 INS60 INS25 INS25 MOV41 INS32 INS43 INS59 INS43 INS59 MOV43 INS59 INS32 INS32 INS7 INS43 INS59 INS43 INS59 INS32 UPD43 INS32 INS32 MOV43 INS43 INS59 INS27 INS8 INS32 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS14 INS42 INS42 MOV32 INS42 INS42 MOV14 MOV42 INS42 INS42 INS33 INS32 INS32 INS21 INS21 INS42 INS42 INS42 INS53 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS43 UPD42 MOV42 INS42 INS42 INS42 INS40 INS42 INS42 INS7 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 MOV32 INS40 INS45 INS42 INS42 MOV42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL31 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL42 DEL44 DEL42 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8