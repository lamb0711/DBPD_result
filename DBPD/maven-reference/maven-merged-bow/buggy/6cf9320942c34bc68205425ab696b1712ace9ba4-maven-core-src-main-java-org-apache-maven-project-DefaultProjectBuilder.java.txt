MNG-5661: First step toward an immutable Maven Project. This removes all compentry from MavenProject. There's a note at the top
          of the class which describes the rest of the work.

check point

+import java.util.HashSet;
+import org.apache.maven.artifact.InvalidRepositoryException;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.bridge.MavenRepositorySystem;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.DependencyManagement;
+import org.apache.maven.model.DeploymentRepository;
+import org.apache.maven.model.Extension;
+import org.apache.maven.model.Parent;
+import org.apache.maven.model.Plugin;
+import org.apache.maven.model.ReportPlugin;
-import org.apache.maven.repository.RepositorySystem;
-    private RepositorySystem repositorySystem;
+    private MavenRepositorySystem repositorySystem;
-            ProjectBuildingRequest configuration = config.request;
+            ProjectBuildingRequest projectBuildingRequest = config.request;            
-            MavenProject project = configuration.getProject();
+            MavenProject project = projectBuildingRequest.getProject();
-                project = new MavenProject( repositorySystem, this, configuration, logger );
+                project = new MavenProject();
-                    new DefaultModelBuildingListener( project, projectBuildingHelper, configuration );
+                    new DefaultModelBuildingListener( project, projectBuildingHelper, projectBuildingRequest );
-                             new HashMap<File, Boolean>() );
+                             new HashMap<File, Boolean>(), projectBuildingRequest );
-            else if ( configuration.isResolveDependencies() )
+            else if ( projectBuildingRequest.isResolveDependencies() )
-            if ( configuration.isResolveDependencies() )
+            if ( projectBuildingRequest.isResolveDependencies() )
-        MavenProject project = new MavenProject( repositorySystem, this, config.request, logger );
+        MavenProject project = new MavenProject();
-                                + " does not exist", ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1, null );
+                                + " does not exist", ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1,
+                                                     -1, null );
-                                + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1,
-                                                     null );
+                                + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR,
+                                                     ModelProblem.Version.BASE, model, -1, -1, null );
-                initProject( project, projectIndex, result, profilesXmls );
+                initProject( project, projectIndex, result, profilesXmls, request );
-                              Map<File, Boolean> profilesXmls )
+                              Map<File, Boolean> profilesXmls, ProjectBuildingRequest projectBuildingRequest )
-
-
-        File parentPomFile = result.getRawModel( result.getModelIds().get( 1 ) ).getPomFile();
-        project.setParentFile( parentPomFile );
-
-        project.setParent( projects.get( result.getModelIds().get( 1 ) ) );
+        Parent p = model.getParent();
+        if ( p != null )
+        {
+            project.setParentArtifact( repositorySystem.createProjectArtifact( p.getGroupId(), p.getArtifactId(),
+                                                                               p.getVersion() ) );
+            // org.apache.maven.its.mng4834:parent:0.1
+            String parentModelId = result.getModelIds().get( 1 );
+            File parentPomFile = result.getRawModel( parentModelId ).getPomFile();
+            MavenProject parent = projects.get( parentModelId );
+            if ( parent == null )
+            {
+                //
+                // At this point the DefaultModelBuildingListener has fired and it populates the
+                // remote repositories with those found in the pom.xml, along with the existing externally
+                // defined repositories.
+                //
+                projectBuildingRequest.setRemoteRepositories( project.getRemoteArtifactRepositories() );
+                if ( parentPomFile != null )
+                {
+                    project.setParentFile( parentPomFile );
+                    try
+                    {
+                        parent = build( parentPomFile, projectBuildingRequest ).getProject();
+                    }
+                    catch ( ProjectBuildingException e )
+                    {
+                        // MNG-4488 where let invalid parents slide on by
+                        logger.warn( "Failed to build parent project for " + project.getId() );
+                    }
+                }
+                else
+                {
+                    Artifact parentArtifact = project.getParentArtifact();
+                    try
+                    {
+                        parent = build( parentArtifact, projectBuildingRequest ).getProject();
+                    }
+                    catch ( ProjectBuildingException e )
+                    {
+                        // MNG-4488 where let invalid parents slide on by
+                        logger.warn( "Failed to build parent project for " + project.getId() );
+                    }
+                }
+            }
+            project.setParent( parent );
+        }
+
+        //
+        // All the parts that were taken out of MavenProject for Maven 4.0.0
+        //
+        
+        project.setProjectBuildingRequest( projectBuildingRequest );
+        
+        // pluginArtifacts
+        Set<Artifact> pluginArtifacts = new HashSet<Artifact>();
+        for ( Plugin plugin : project.getBuildPlugins() )
+        {
+            Artifact artifact = repositorySystem.createPluginArtifact( plugin );
+
+            if ( artifact != null )
+            {
+                pluginArtifacts.add( artifact );
+            }
+        }
+        project.setPluginArtifacts( pluginArtifacts );
+
+        // reportArtifacts
+        Set<Artifact> reportArtifacts = new HashSet<Artifact>();
+        for ( ReportPlugin report : project.getReportPlugins() )
+        {
+            Plugin pp = new Plugin();
+            pp.setGroupId( report.getGroupId() );
+            pp.setArtifactId( report.getArtifactId() );
+            pp.setVersion( report.getVersion() );
+
+            Artifact artifact = repositorySystem.createPluginArtifact( pp );
+
+            if ( artifact != null )
+            {
+                reportArtifacts.add( artifact );
+            }
+        }
+        project.setReportArtifacts( reportArtifacts );
+
+        // extensionArtifacts
+        Set<Artifact> extensionArtifacts = new HashSet<Artifact>();
+        List<Extension> extensions = project.getBuildExtensions();
+        if ( extensions != null )
+        {
+            for ( Extension ext : extensions )
+            {
+                String version;
+                if ( StringUtils.isEmpty( ext.getVersion() ) )
+                {
+                    version = "RELEASE";
+                }
+                else
+                {
+                    version = ext.getVersion();
+                }
+
+                Artifact artifact =
+                    repositorySystem.createArtifact( ext.getGroupId(), ext.getArtifactId(), version, null, "jar" );
+
+                if ( artifact != null )
+                {
+                    extensionArtifacts.add( artifact );
+                }
+            }
+        }
+        project.setExtensionArtifacts( extensionArtifacts );
+
+        // managedVersionMap
+        Map<String, Artifact> map = null;
+        if ( repositorySystem != null )
+        {
+            List<Dependency> deps;
+            DependencyManagement dependencyManagement = project.getDependencyManagement();
+            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null )
+                && ( deps.size() > 0 ) )
+            {
+                map = new HashMap<String, Artifact>();
+                for ( Dependency d : dependencyManagement.getDependencies() )
+                {
+                    Artifact artifact = repositorySystem.createDependencyArtifact( d );
+
+                    if ( artifact == null )
+                    {
+                        map = Collections.emptyMap();
+                    }
+
+                    map.put( d.getManagementKey(), artifact );
+                }
+            }
+            else
+            {
+                map = Collections.emptyMap();
+            }
+        }
+        project.setManagedVersionMap( map );
+
+        // release artifact repository
+        if ( project.getDistributionManagement() != null && project.getDistributionManagement().getRepository() != null )
+        {
+            try
+            {
+                DeploymentRepository r = project.getDistributionManagement().getRepository();
+                if ( !StringUtils.isEmpty( r.getId() ) && !StringUtils.isEmpty( r.getUrl() ) )
+                {
+                    ArtifactRepository repo =
+                        repositorySystem.buildArtifactRepository( project.getDistributionManagement().getRepository() );
+                    repositorySystem.injectProxy( projectBuildingRequest.getRepositorySession(), Arrays.asList( repo ) );
+                    repositorySystem.injectAuthentication( projectBuildingRequest.getRepositorySession(), Arrays.asList( repo ) );
+                    project.setReleaseArtifactRepository( repo );
+                }
+            }
+            catch ( InvalidRepositoryException e )
+            {
+                throw new IllegalStateException( "Failed to create release distribution repository for "
+                    + project.getId(), e );
+            }
+        }
+
+        // snapshot artifact repository
+        if ( project.getDistributionManagement() != null
+            && project.getDistributionManagement().getSnapshotRepository() != null )
+        {
+            try
+            {
+                DeploymentRepository r = project.getDistributionManagement().getSnapshotRepository();
+                if ( !StringUtils.isEmpty( r.getId() ) && !StringUtils.isEmpty( r.getUrl() ) )
+                {
+                    ArtifactRepository repo =
+                        repositorySystem.buildArtifactRepository( project.getDistributionManagement().getSnapshotRepository() );
+                    repositorySystem.injectProxy( projectBuildingRequest.getRepositorySession(), Arrays.asList( repo ) );
+                    repositorySystem.injectAuthentication( projectBuildingRequest.getRepositorySession(), Arrays.asList( repo ) );
+                    project.setSnapshotArtifactRepository( repo );
+                }
+            }
+            catch ( InvalidRepositoryException e )
+            {
+                throw new IllegalStateException( "Failed to create snapshot distribution repository for "
+                    + project.getId(), e );
+            }
+        }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD43 INS44 INS8 UPD42 INS43 INS42 MOV60 MOV21 MOV21 MOV21 INS60 INS25 MOV60 MOV21 MOV25 MOV60 MOV21 MOV21 MOV21 MOV21 MOV70 MOV60 MOV25 INS21 INS60 INS70 INS21 INS60 INS70 INS21 INS60 INS60 INS25 INS21 INS60 INS25 INS21 INS25 INS25 MOV43 INS42 INS43 INS59 INS27 INS8 INS32 INS74 INS59 INS44 INS32 INS8 INS32 INS74 INS59 INS44 INS32 INS8 INS32 INS74 INS59 INS74 INS59 INS27 INS8 INS32 INS74 INS59 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS60 MOV60 INS60 INS25 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS60 INS25 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS33 INS42 INS33 INS60 INS60 INS25 INS42 INS42 INS42 INS27 INS27 INS54 INS27 INS27 INS54 MOV43 MOV43 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS74 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS33 INS32 INS33 INS8 INS12 INS32 INS33 INS32 INS33 INS8 INS12 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS33 MOV21 INS25 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS43 INS43 INS42 INS60 INS25 INS60 INS25 INS43 INS43 INS42 INS42 INS42 INS32 INS36 INS36 INS36 INS21 INS70 INS21 INS42 INS42 INS32 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS32 INS42 INS60 INS25 INS44 INS8 UPD42 MOV43 UPD42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS7 INS44 INS32 INS8 INS7 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS33 MOV21 INS54 INS60 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS36 INS33 INS32 INS34 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS25 INS21 INS42 INS32 INS42 INS42 INS32 INS38 INS38 INS60 INS21 INS21 INS21 INS42 INS14 INS42 INS42 INS32 INS38 INS38 INS60 INS21 INS21 INS21 INS42 INS14 MOV43 MOV43 UPD42 UPD42 UPD42 INS8 INS12 INS43 INS59 INS8 INS12 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS32 INS42 INS33 INS45 INS32 INS7 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS27 INS42 INS32 INS42 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS27 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS7 INS43 INS42 INS21 INS42 INS42 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 DEL42 DEL52 DEL42 DEL42 DEL42 DEL52 DEL40 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL8