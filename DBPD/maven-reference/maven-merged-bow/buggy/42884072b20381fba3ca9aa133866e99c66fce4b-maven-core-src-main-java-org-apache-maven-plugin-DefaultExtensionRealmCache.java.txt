o Revised extension caching to be insensitive to POM repos

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@819868 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
-import java.util.Iterator;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.Exclusion;
-import org.apache.maven.model.Plugin;
-        private final Plugin extension;
-
-        private final List<ArtifactRepository> repositories = new ArrayList<ArtifactRepository>();
+        private final List<File> files;
-        public CacheKey( Plugin extension, RepositoryRequest repositoryRequest )
+        public CacheKey( List<? extends Artifact> extensionArtifacts )
-            this.extension = extension.clone();
-            this.repositories.add( repositoryRequest.getLocalRepository() );
-            this.repositories.addAll( repositoryRequest.getRemoteRepositories() );
+            this.files = new ArrayList<File>( extensionArtifacts.size() );
+            for ( Artifact artifact : extensionArtifacts )
+            {
+                files.add( artifact.getFile() );
+            }
-            int hash = 17;
-            hash = hash * 31 + extensionHashCode( extension );
-            hash = hash * 31 + repositories.hashCode();
-            this.hashCode = hash;
+            this.hashCode = files.hashCode();
-            return extensionEquals( extension, other.extension ) && eq( repositories, other.repositories );
+            return files.equals( other.files );
-    public CacheRecord get( Plugin extension, RepositoryRequest repositoryRequest )
+    public CacheRecord get( List<? extends Artifact> extensionArtifacts )
-        return cache.get( new CacheKey( extension, repositoryRequest ) );
+        return cache.get( new CacheKey( extensionArtifacts ) );
-    public void put( Plugin extension, RepositoryRequest repositoryRequest, ClassRealm extensionRealm,
-                     List<Artifact> extensionArtifacts, ExtensionDescriptor extensionDescriptor )
+    public CacheRecord put( List<? extends Artifact> extensionArtifacts, ClassRealm extensionRealm,
+                            ExtensionDescriptor extensionDescriptor )
-        if ( extensionRealm == null || extensionArtifacts == null )
+        if ( extensionRealm == null )
-        CacheKey key = new CacheKey( extension, repositoryRequest );
+        CacheKey key = new CacheKey( extensionArtifacts );
-            throw new IllegalStateException( "Duplicate extension realm for extension " + extension.getId() );
+            throw new IllegalStateException( "Duplicate extension realm for extension " + extensionArtifacts );
-        CacheRecord record = new CacheRecord( extensionRealm, extensionArtifacts, extensionDescriptor );
+        CacheRecord record = new CacheRecord( extensionRealm, extensionDescriptor );
+
+
+        return record;
-    protected static int extensionHashCode( Plugin extension )
-    {
-        int hash = 17;
-
-        hash = hash * 31 + extension.getGroupId().hashCode();
-        hash = hash * 31 + extension.getArtifactId().hashCode();
-        hash = hash * 31 + extension.getVersion().hashCode();
-
-        for ( Dependency dependency : extension.getDependencies() )
-        {
-            hash = hash * 31 + dependency.getGroupId().hashCode();
-            hash = hash * 31 + dependency.getArtifactId().hashCode();
-            hash = hash * 31 + dependency.getVersion().hashCode();
-            hash = hash * 31 + dependency.getType().hashCode();
-            hash = hash * 31 + ( dependency.getClassifier() != null ? dependency.getClassifier().hashCode() : 0 );
-            hash = hash * 31 + ( dependency.getScope() != null ? dependency.getScope().hashCode() : 0 );
-
-            for ( Exclusion exclusion : dependency.getExclusions() )
-            {
-                hash = hash * 31 + exclusion.getGroupId().hashCode();
-                hash = hash * 31 + exclusion.getArtifactId().hashCode();
-            }
-        }
-
-        return hash;
-    }
-
-    private static boolean extensionEquals( Plugin a, Plugin b )
-    {
-        return eq( a.getGroupId(), b.getGroupId() ) //
-            && eq( a.getArtifactId(), b.getArtifactId() ) //
-            && eq( a.getVersion(), b.getVersion() ) // 
-            && a.isExtensions() == b.isExtensions() //
-            && dependenciesEquals( a.getDependencies(), b.getDependencies() );
-    }
-
-    private static boolean dependenciesEquals( List<Dependency> a, List<Dependency> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Dependency> aI = a.iterator();
-        Iterator<Dependency> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Dependency aD = aI.next();
-            Dependency bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() ) //
-                && eq( aD.getVersion(), bD.getVersion() ) // 
-                && eq( aD.getType(), bD.getType() ) //
-                && eq( aD.getClassifier(), bD.getClassifier() ) //
-                && eq( aD.getScope(), bD.getScope() );
-
-            r &= exclusionsEquals( aD.getExclusions(), bD.getExclusions() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static boolean exclusionsEquals( List<Exclusion> a, List<Exclusion> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Exclusion> aI = a.iterator();
-        Iterator<Exclusion> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Exclusion aD = aI.next();
-            Exclusion bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static <T> boolean eq( T s1, T s2 )
-    {
-        return s1 != null ? s1.equals( s2 ) : s2 == null;
-    }
-
-    public void register( MavenProject project, ClassRealm extensionRealm )
+    public void register( MavenProject project, CacheRecord record )

MOV26 UPD40 MOV44 INS43 INS42 MOV43 UPD74 UPD42 MOV42 INS74 UPD42 UPD74 INS41 MOV43 INS42 MOV43 INS43 UPD42 INS74 UPD42 INS70 MOV43 INS76 INS76 MOV27 INS43 INS42 INS42 MOV43 INS76 INS44 INS42 INS8 INS32 INS43 MOV14 MOV43 MOV14 INS42 INS43 MOV14 INS43 INS42 MOV21 INS32 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD74 INS32 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL61 DEL9 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL61 DEL9 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL73 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL16 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42