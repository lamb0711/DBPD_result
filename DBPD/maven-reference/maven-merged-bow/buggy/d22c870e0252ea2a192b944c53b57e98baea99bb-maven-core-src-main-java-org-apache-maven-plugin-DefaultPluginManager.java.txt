o coming close to something i can easily test


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@759818 13f79535-47bb-0310-9956-ffa450edef68

-//TODO: all of this needs to be translated into the RepositorySystem or removed. 
-// end
-import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
-import org.apache.maven.reporting.MavenReport;
-    protected PluginDescriptorBuilder pluginDescriptorBuilder;
-
-    public DefaultPluginManager()
-    {
-        pluginDescriptorBuilder = new PluginDescriptorBuilder();
-    }
-
-                
-        if ( pluginDescriptor != null )
+            
+        // There are cases where plugins are discovered but not actually populated. These are edge cases where you are working in the IDE on
+        // Maven itself so this speaks to a problem we have with the system not starting entirely clean.
+        if ( pluginDescriptor != null && pluginDescriptor.getClassRealm() != null )
-        {            
+        {         
-            
+
-
-    // We need to load different 
-    private Map<String,ClassRealm> pluginRealms = new HashMap<String,ClassRealm>();
-    {                
-        logger.debug( "Resolving plugin artifact " + plugin.getKey() + " from " + project.getRemoteArtifactRepositories() );
-
+    {
-        resolutionErrorHandler.throwErrors( request, result );        
-        
-        // ----------------------------------------------------------------------------
-        // Get the dependencies for the Plugin
-        // ----------------------------------------------------------------------------
+        resolutionErrorHandler.throwErrors( request, result );
-        // the only Plugin instance which will have dependencies is the one specified in the project.
-        // We need to look for a Plugin instance there, in case the instance we're using didn't come from
-        // the project.
-        
-        // Trying to cache the version of the plugin for a project?
-        Plugin projectPlugin = project.getPlugin( plugin.getKey() );
+        ClassRealm pluginRealm = container.createChildRealm( pluginKey( plugin ) );
-        if ( projectPlugin == null )
+        Set<Artifact> pluginArtifacts = getPluginArtifacts( pluginArtifact, plugin, project, session.getLocalRepository() );
+
+        for ( Artifact a : pluginArtifacts )
-            projectPlugin = plugin;
-        }
-        else if ( projectPlugin.getVersion() == null || Artifact.RELEASE_VERSION.equals( projectPlugin.getVersion() ) )
-        {
-            projectPlugin.setVersion( plugin.getVersion() );
-        }
-                
-        // associate the realm with the descriptor
-        
-        ClassRealm pluginRealm = pluginRealms.get( pluginKey( plugin ) );
-        
-        if ( pluginRealm == null )
-        {                        
-            pluginRealm = container.createChildRealm( pluginKey( plugin ) );    
-
-            Set<Artifact> pluginArtifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project, session.getLocalRepository() );
-
-            for( Artifact a : pluginArtifacts )
-            {
-                try
-                {
-                    pluginRealm.addURL( a.getFile().toURI().toURL() );
-                }
-                catch ( MalformedURLException e )
-                {
-                    // Not going to happen
-                }
-            }
-                         
-                logger.debug( "Discovering components in realm: " + pluginRealm );
-
-                container.discoverComponents( pluginRealm );                
+                pluginRealm.addURL( a.getFile().toURI().toURL() );
-            catch ( PlexusConfigurationException e )
+            catch ( MalformedURLException e )
-                throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
+                // Not going to happen
-            catch ( ComponentRepositoryException e )
-            {
-                throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
-            }
-
-            // ----------------------------------------------------------------------------
-            // The PluginCollector will now know about the plugin we are trying to load
-            // ----------------------------------------------------------------------------
-
-            logger.debug( "Checking for plugin descriptor for: " + projectPlugin.getKey() + " with version: " + projectPlugin.getVersion() + " in collector: " + pluginCollector );
-
-            PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( projectPlugin );
-            
-            if ( pluginDescriptor == null )
-            {
-                if ( ( pluginRealm != null ) && logger.isDebugEnabled() )
-                {
-                    logger.debug( "Plugin Realm: " );
-                    pluginRealm.display();
-                }
-
-                logger.debug( "Removing invalid plugin realm." );
-
-                throw new PluginManagerException( projectPlugin, "The plugin descriptor for the plugin " + projectPlugin.getKey() + " was not found. Should have been in realm: " + pluginRealm
-                    + " Please verify that the plugin JAR " + pluginArtifact.getFile() + " is intact.", project );
-            }
-
-            pluginDescriptor.setPluginArtifact( pluginArtifact ); 
-            // Make sure it's just the plugin artifacts
-            pluginDescriptor.setArtifacts( new ArrayList<Artifact>( pluginArtifacts ) );
-            pluginDescriptor.setClassRealm( pluginRealm );
-            
-            pluginRealms.put( pluginKey( plugin ), pluginRealm );
+
+        try
+        {
+            logger.debug( "Discovering components in realm: " + pluginRealm );
+
+            container.discoverComponents( pluginRealm );
+        }
+        catch ( PlexusConfigurationException e )
+        {
+            throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
+        }
+        catch ( ComponentRepositoryException e )
+        {
+            throw new PluginContainerException( plugin, pluginRealm, "Error scanning plugin realm for components.", e );
+        }
+
+        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
+        pluginDescriptor.setPluginArtifact( pluginArtifact );
+        pluginDescriptor.setArtifacts( new ArrayList<Artifact>( pluginArtifacts ) );
+        pluginDescriptor.setClassRealm( pluginRealm );
-            //dispatcher.dispatchStart( event, goalExecId );
-
-            logger.debug( "Setting context classloader for plugin to: " + pluginRealm.getId() + " (instance is: " + pluginRealm + ")" );
-
-        System.out.println( "XXX Looking for class realm " + pluginDescriptor.getArtifactId() + ":" + pluginDescriptor.getVersion() );
-            if ( mojo != null )
-            {
-                logger.debug( "Looked up - " + mojo + " - " + mojo.getClass().getClassLoader() );
-            }
-            else
-            {
-                logger.warn( "No luck." );
-            }
-
-        Map parameterMap = mojoDescriptor.getParameterMap();
+        Map<String,Parameter> parameterMap = mojoDescriptor.getParameterMap();
-            for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext() && ( version == null ); )
+            for ( Plugin p : project.getBuildPlugins() )
-                Plugin p = (Plugin) it.next();
-
-        return loadPlugin( plugin, session.getCurrentProject(), session ).getMojo( goal );
+        PluginDescriptor pluginDescriptor =  loadPlugin( plugin, session.getCurrentProject(), session );
+
+        MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );
+        
+        return mojoDescriptor;

MOV8 MOV60 MOV60 MOV60 MOV60 MOV21 MOV21 MOV21 MOV60 MOV60 MOV21 INS60 INS60 INS60 INS41 INS27 MOV43 INS43 INS59 INS74 MOV43 INS59 INS43 INS59 INS42 MOV27 INS27 INS42 MOV32 UPD42 MOV42 INS42 INS32 MOV43 MOV43 INS43 INS70 INS42 MOV32 INS42 INS42 INS32 INS32 INS33 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS44 MOV32 MOV8 INS42 MOV42 MOV42 INS42 INS42 MOV43 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL36 DEL27 DEL24 DEL32 DEL41