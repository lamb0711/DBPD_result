o Restored forking to other mojo

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@799083 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
+import org.apache.maven.plugin.PluginConfigurationException;
-                    logger.info( executionDescription( mojoExecution, currentProject ) );
-                    pluginManager.executeMojo( session, mojoExecution );
-                }                         
+                    execute( currentProject, session, mojoExecution );
+                }
-        
+
+    private void execute( MavenProject project, MavenSession session, MojoExecution mojoExecution )
+        throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginManagerException
+    {
+        MavenProject executionProject = null;
+
+        List<MojoExecution> forkedExecutions = mojoExecution.getForkedExecutions();
+
+        if ( !forkedExecutions.isEmpty() )
+        {
+            executionProject = project.clone();
+
+            session.setCurrentProject( executionProject );
+            try
+            {
+                for ( MojoExecution forkedExecution : forkedExecutions )
+                {
+                    execute( executionProject, session, forkedExecution );
+                }
+            }
+            finally
+            {
+                session.setCurrentProject( project );
+            }
+        }
+
+        project.setExecutionProject( executionProject );
+
+        logger.info( executionDescription( mojoExecution, project ) );
+
+        pluginManager.executeMojo( session, mojoExecution );
+    }
+
-            if ( StringUtils.isNotEmpty( mojoDescriptor.isDependencyResolutionRequired() ) )
-            {
-                requiredDependencyResolutionScopes.add( mojoDescriptor.isDependencyResolutionRequired() );
-            }
-
+
+            calculateForkedExecutions( mojoExecution, project, new HashSet<MojoDescriptor>() );
+
+            collectDependencyResolutionScopes( requiredDependencyResolutionScopes, mojoExecution );
-    
+
+    private void collectDependencyResolutionScopes( Collection<String> requiredDependencyResolutionScopes,
+                                                    MojoExecution mojoExecution )
+    {
+        String requiredDependencyResolutionScope = mojoExecution.getMojoDescriptor().isDependencyResolutionRequired();
+
+        if ( StringUtils.isNotEmpty( requiredDependencyResolutionScope ) )
+        {
+            requiredDependencyResolutionScopes.add( requiredDependencyResolutionScope );
+        }
+
+        for ( MojoExecution forkedExecution : mojoExecution.getForkedExecutions() )
+        {
+            collectDependencyResolutionScopes( requiredDependencyResolutionScopes, forkedExecution );
+        }
+    }
+
+    private void calculateForkedExecutions( MojoExecution mojoExecution, MavenProject project,
+                                            Collection<MojoDescriptor> alreadyForkedExecutions )
+        throws MojoNotFoundException
+    {
+        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
+
+        if ( !alreadyForkedExecutions.add( mojoDescriptor ) )
+        {
+            return;
+        }
+
+        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
+
+        if ( StringUtils.isNotEmpty( mojoDescriptor.getExecutePhase() ) )
+        {
+            // TODO
+
+        }
+        else if ( StringUtils.isNotEmpty( mojoDescriptor.getExecuteGoal() ) )
+        {
+            String forkedGoal = mojoDescriptor.getExecuteGoal();
+
+            MojoDescriptor forkedMojoDescriptor = pluginDescriptor.getMojo( forkedGoal );
+            if ( forkedMojoDescriptor == null )
+            {
+                throw new MojoNotFoundException( forkedGoal, pluginDescriptor );
+            }
+
+            MojoExecution forkedExecution = new MojoExecution( forkedMojoDescriptor, forkedGoal );
+
+            populateMojoExecutionConfiguration( project, forkedExecution, true );
+
+            calculateForkedExecutions( forkedExecution, project, alreadyForkedExecutions );
+
+            mojoExecution.addForkedExecution( forkedExecution );
+        }
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS21 INS21 MOV21 INS74 INS42 INS43 INS42 INS60 INS25 INS70 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS60 INS25 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS38 INS8 INS32 INS32 INS43 INS43 INS42 INS43 INS59 INS32 INS8 INS44 INS32 INS8 INS42 INS42 INS43 INS43 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS33 INS43 INS43 INS42 INS32 INS32 INS21 INS21 INS54 INS42 INS42 INS42 INS42 INS42 INS32 INS21 MOV21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS70 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS44 INS42 INS8 INS32 INS74 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL8 DEL25 DEL42 DEL32