Report generate directly xhtml file

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@169076 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.doxia.module.xhtml.XhtmlSink;
+import java.io.InputStream;
+import java.io.IOException;
+     * @parameter expression="${basedir}"
+     * @required
+     */
+    private String basedir;
+
+    /**
-                    report.generate();
+                    XhtmlSink sink = siteRenderer.createSink( new File( siteDirectory ), siteDirectory,
+                                                              report.getOutputName() + ".html",
+                                                              outputDirectory, getSiteDescriptor(), flavour );
+
+                    report.generate( sink );
-            File siteDescriptor = new File( siteDirectory, "site.xml" );
-            if ( !siteDescriptor.exists() )
-            {
-                throw new MojoExecutionException( "The site descriptor is not present!" );
-            }
-            String siteDescriptorContent = FileUtils.fileRead( siteDescriptor );
-            Map props = new HashMap();
-            if ( reports != null )
-            {
-                props.put( "reports", getReportsMenu() );
-            }
-            siteDescriptorContent = StringUtils.interpolate( siteDescriptorContent, props );
-            StringInputStream siteDescriptorStream = new StringInputStream( siteDescriptorContent );
-
-                                 siteDescriptorStream );
+                                 getSiteDescriptor() );
+
+
+    private InputStream getSiteDescriptor()
+        throws MojoExecutionException
+    {
+        File siteDescriptor = new File( siteDirectory, "site.xml" );
+
+        if ( !siteDescriptor.exists() )
+        {
+            throw new MojoExecutionException( "The site descriptor is not present!" );
+        }
+
+        String siteDescriptorContent = "";
+
+        try
+        {
+            siteDescriptorContent = FileUtils.fileRead( siteDescriptor );
+        }
+        catch( IOException e )
+        {
+            throw new MojoExecutionException( "The site descriptor cannot be read!", e );
+        }
+
+        Map props = new HashMap();
+
+        if ( reports != null )
+        {
+            props.put( "reports", getReportsMenu() );
+        }
+
+        siteDescriptorContent = StringUtils.interpolate( siteDescriptorContent, props );
+
+        return new StringInputStream( siteDescriptorContent );
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS29 INS83 INS43 INS59 INS83 INS43 INS42 INS43 INS8 INS65 INS65 INS42 INS42 INS42 INS42 MOV60 MOV25 INS60 INS54 MOV60 MOV25 MOV21 INS41 INS66 MOV43 INS59 INS8 INS12 MOV14 INS42 INS45 INS21 INS44 INS8 INS7 INS43 INS42 INS53 INS32 INS42 MOV32 INS42 INS14 UPD42 MOV42 INS43 INS45 INS42 INS60 INS42 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS27 INS42 INS32 INS42 INS43 INS42 INS32 INS45 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60