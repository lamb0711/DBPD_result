[MNG-4273] [regression] Internal utility classes of core leak into plugin realm

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@802041 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
-            classRealm.setParentRealm( getApiRealm() );
+            classRealm.setParentRealm( container.getContainerRealm() );
+            importMavenApi( classRealm );
+
-     * Gets the class realm that holds the Maven API classes that we intend to share with plugins and extensions. The
-     * API realm is basically a subset of the core realm and hides internal utility/implementation classes from
-     * plugins/extensions.
-     * 
-     * @return The class realm for the Maven API, never {@code null}.
-     */
-    private ClassRealm getApiRealm()
-    {
-        return container.getContainerRealm();
-
-// TODO: MNG-4273, currently non-functional because the core artifact filter wipes out transitive plugin dependencies
-//       like plexus-utils, too. We need to filter the result set of the plugin artifacts, not the graph.
-//
-//        ClassWorld world = getClassWorld();
-//
-//        String realmId = "maven.api";
-//
-//        ClassRealm apiRealm;
-//
-//        synchronized ( world )
-//        {
-//            apiRealm = world.getClassRealm( realmId );
-//
-//            if ( apiRealm == null )
-//            {
-//                try
-//                {
-//                    apiRealm = world.newRealm( realmId );
-//                }
-//                catch ( DuplicateRealmException e )
-//                {
-//                    throw new IllegalStateException( "Failed to create API realm " + realmId, e );
-//                }
-//
-//                String coreRealmId = container.getContainerRealm().getId();
-//                try
-//                {
-//                    // components.xml
-//                    apiRealm.importFrom( coreRealmId, "META-INF/plexus" );
-//
-//                    // maven-*
-//                    apiRealm.importFrom( coreRealmId, "org.apache.maven." );
-//
-//                    // plexus-classworlds
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.classworlds" );
-//
-//                    // plexus-container, plexus-component-annotations
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.component" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.configuration" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.container" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.context" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.lifecycle" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.logging" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.personality" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.ComponentRegistry" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.ContainerConfiguration" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.DefaultComponentRegistry" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.DefaultContainerConfiguration" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.DefaultPlexusContainer" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.DuplicateChildContainerException" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.MutablePlexusContainer" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.PlexusConstants" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.PlexusContainer" );
-//                    apiRealm.importFrom( coreRealmId, "org.codehaus.plexus.PlexusContainerException" );
-//                }
-//                catch ( NoSuchRealmException e )
-//                {
-//                    throw new IllegalStateException( e );
-//                }
-//
-//                try
-//                {
-//                    container.discoverComponents( apiRealm );
-//                }
-//                catch ( Exception e )
-//                {
-//                    throw new IllegalStateException( "Failed to discover components in API realm " + realmId, e );
-//                }
-//            }
-//        }
-//
-//        return apiRealm;
-    }
-
-    /**
-        String coreRealmId = container.getContainerRealm().getId();
-        try
-        {
-            importingRealm.importFrom( coreRealmId, "org.codehaus.plexus.util.xml.Xpp3Dom" );
-            importingRealm.importFrom( coreRealmId, "org.codehaus.plexus.util.xml.pull.XmlPullParser" );
-            importingRealm.importFrom( coreRealmId, "org.codehaus.plexus.util.xml.pull.XmlPullParserException" );
-            importingRealm.importFrom( coreRealmId, "org.codehaus.plexus.util.xml.pull.XmlSerializer" );
-        }
-        catch ( NoSuchRealmException e )
-        {
-            throw new IllegalStateException( e );
-        }
+        ClassRealm coreRealm = container.getContainerRealm();
+
+        importingRealm.importFrom( coreRealm, "org.codehaus.plexus.util.xml.Xpp3Dom" );
+        importingRealm.importFrom( coreRealm, "org.codehaus.plexus.util.xml.pull.XmlPullParser" );
+        importingRealm.importFrom( coreRealm, "org.codehaus.plexus.util.xml.pull.XmlPullParserException" );
+        importingRealm.importFrom( coreRealm, "org.codehaus.plexus.util.xml.pull.XmlSerializer" );
+    }
+
+    /**
+     * Imports the classes/resources constituting the Maven API into the specified realm.
+     * 
+     * @param importingRealm The realm into which to import the Maven API, must not be {@code null}.
+     */
+    private void importMavenApi( ClassRealm importingRealm )
+    {
+        // components.xml
+        importingRealm.importFromParent( "META-INF/plexus" );
+
+        // maven-*
+        importingRealm.importFromParent( "org.apache.maven" );
+
+        // plexus-classworlds
+        importingRealm.importFromParent( "org.codehaus.plexus.classworlds" );
+
+        // plexus-container, plexus-component-annotations
+        importingRealm.importFromParent( "org.codehaus.plexus.component" );
+        importingRealm.importFromParent( "org.codehaus.plexus.configuration" );
+        importingRealm.importFromParent( "org.codehaus.plexus.container" );
+        importingRealm.importFromParent( "org.codehaus.plexus.context" );
+        importingRealm.importFromParent( "org.codehaus.plexus.lifecycle" );
+        importingRealm.importFromParent( "org.codehaus.plexus.logging" );
+        importingRealm.importFromParent( "org.codehaus.plexus.personality" );
+        importingRealm.importFromParent( "org.codehaus.plexus.ComponentRegistry" );
+        importingRealm.importFromParent( "org.codehaus.plexus.ContainerConfiguration" );
+        importingRealm.importFromParent( "org.codehaus.plexus.DefaultComponentRegistry" );
+        importingRealm.importFromParent( "org.codehaus.plexus.DefaultContainerConfiguration" );
+        importingRealm.importFromParent( "org.codehaus.plexus.DefaultPlexusContainer" );
+        importingRealm.importFromParent( "org.codehaus.plexus.DuplicateChildContainerException" );
+        importingRealm.importFromParent( "org.codehaus.plexus.MutablePlexusContainer" );
+        importingRealm.importFromParent( "org.codehaus.plexus.PlexusConstants" );
+        importingRealm.importFromParent( "org.codehaus.plexus.PlexusContainer" );
+        importingRealm.importFromParent( "org.codehaus.plexus.PlexusContainerException" );

INS31 INS31 MOV29 MOV83 MOV39 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 MOV60 MOV21 MOV21 MOV21 MOV21 INS65 INS65 UPD43 MOV43 UPD42 MOV42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV43 INS66 INS42 INS66 MOV65 INS66 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS21 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 MOV42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL32 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL41 DEL8 DEL31 DEL83 DEL8 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31