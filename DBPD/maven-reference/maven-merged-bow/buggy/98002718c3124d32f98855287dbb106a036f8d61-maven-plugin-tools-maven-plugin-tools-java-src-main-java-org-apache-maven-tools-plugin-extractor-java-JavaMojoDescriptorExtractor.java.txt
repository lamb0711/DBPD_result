o Refactored mojo/plugin generation, extraction, etc. to accommodate multiple mojo languages.
o Tested with java mojos, mboot to verify nothing broken by refactor.
o TODO: Add marmalade support tests...currently only java-mojos are supported in mboot2, so this isn't going to interrupt things.
o TODO: Once marmalade support is tested, add to the list of artifacts built by mboot2.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163369 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.maven.plugin.generator;
+package org.apache.maven.tools.plugin.extractor.java;
+import org.apache.maven.plugin.MavenMojoDescriptor;
+import org.apache.maven.plugin.descriptor.MojoDescriptor;
+import org.apache.maven.plugin.descriptor.Parameter;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.tools.plugin.extractor.InvalidParameterException;
+import org.apache.maven.tools.plugin.extractor.MojoDescriptorExtractor;
+import org.apache.maven.tools.plugin.util.PluginUtils;
+
-import org.apache.maven.plugin.descriptor.MojoDescriptor;
-import org.apache.maven.plugin.descriptor.Parameter;
-import org.codehaus.plexus.util.xml.Xpp3Dom;
-import org.codehaus.plexus.util.xml.Xpp3DomBuilder;
-import java.io.FileReader;
+import java.util.HashSet;
+import java.util.Set;
- * @todo need to add validation directives so that systems embedding
- * maven2 can get validation directives to help users in IDEs.
+ * @todo need to add validation directives so that systems embedding maven2 can
+ *       get validation directives to help users in IDEs.
-public abstract class AbstractGenerator
-    implements Generator
+public class JavaMojoDescriptorExtractor
+    implements MojoDescriptorExtractor
-    public static final String DISPATCH = "dispatch";    
+    public static final String DISPATCH = "dispatch";
-    protected abstract void processPluginDescriptors( MojoDescriptor[] pluginDescriptors, String destinationDirectory, Xpp3Dom pomDom )
-        throws Exception;
-
-    protected Xpp3Dom readModel( String pom )
-        throws Exception
-    {
-        return Xpp3DomBuilder.build( new FileReader( pom ) );
-    }
-
-    public void execute( String sourceDirectory, String destinationDirectory, String pom )
-        throws Exception
-    {
-        Xpp3Dom pomDom = readModel( pom ); 
-
-        JavaDocBuilder builder = new JavaDocBuilder();
-
-        File sourceDirectoryFile = new File( sourceDirectory );
-
-        builder.addSourceTree( sourceDirectoryFile );
-
-        JavaSource[] javaSources = builder.getSources();
-
-        List mojoDescriptors = new ArrayList();
-
-        for ( int i = 0; i < javaSources.length; i++ )
-        {
-            DocletTag tag = getJavaClass( javaSources[i] ).getTagByName( GOAL );
-
-            if ( tag != null )
-            {
-                MojoDescriptor mojoDescriptor = createMojoDescriptor( javaSources[i], pomDom );
-
-                // ----------------------------------------------------------------------
-                // Validate the descriptor as best we can before allowing it
-                // to be processed.
-                // ----------------------------------------------------------------------
-
-                List parameters = mojoDescriptor.getParameters();
-
-                for ( int j = 0; j < parameters.size(); j++ )
-                {
-                    validateParameter( (Parameter) parameters.get( j ), j );
-                }
-
-                mojoDescriptors.add( mojoDescriptor );
-            }
-        }
-
-        MojoDescriptor[] mojos = (MojoDescriptor[]) mojoDescriptors.toArray( new MojoDescriptor[mojoDescriptors.size()] );
-
-        processPluginDescriptors( mojos, destinationDirectory, pomDom );
-    }
-
-    protected void validateParameter( Parameter parameter, int i )
-        throws InvalidParameterException
+    protected void validateParameter( Parameter parameter, int i ) throws InvalidParameterException
-    protected String pluginId( Xpp3Dom pomDom )
-    {
-        // ----------------------------------------------------------------------
-        // We will take the id from the artifactId of the POM. The artifactId is
-        // always of the form maven-<pluginId>-plugin so we can extract the
-        // pluginId from the artifactId.
-        // ----------------------------------------------------------------------
-
-        String artifactId = pomDom.getChild( "artifactId" ).getValue();
-
-        int firstHyphen = artifactId.indexOf( "-" );
-
-        int lastHyphen = artifactId.lastIndexOf( "-" );
-
-        String pluginId = artifactId.substring( firstHyphen + 1, lastHyphen );
-
-        return pluginId;
-    }
-
-    private MojoDescriptor createMojoDescriptor( JavaSource javaSource, Xpp3Dom pomDom )
+    private MojoDescriptor createMojoDescriptor( JavaSource javaSource, MavenProject project )
-        String pluginId = pluginId( pomDom );
+        String pluginId = PluginUtils.pluginId( project );
+
+    public Set execute( String sourceDir, MavenProject project ) throws Exception
+    {
+        JavaDocBuilder builder = new JavaDocBuilder();
+
+        File sourceDirectoryFile = new File( sourceDir );
+
+        builder.addSourceTree( sourceDirectoryFile );
+
+        JavaSource[] javaSources = builder.getSources();
+
+        Set descriptors = new HashSet();
+
+        for ( int i = 0; i < javaSources.length; i++ )
+        {
+            DocletTag tag = getJavaClass( javaSources[i] ).getTagByName( GOAL );
+
+            if ( tag != null )
+            {
+                MojoDescriptor mojoDescriptor = createMojoDescriptor( javaSources[i], project );
+
+                // ----------------------------------------------------------------------
+                // Validate the descriptor as best we can before allowing it
+                // to be processed.
+                // ----------------------------------------------------------------------
+
+                List parameters = mojoDescriptor.getParameters();
+
+                for ( int j = 0; j < parameters.size(); j++ )
+                {
+                    validateParameter( (Parameter) parameters.get( j ), j );
+                }
+                
+                MavenMojoDescriptor mmDescriptor = new MavenMojoDescriptor(mojoDescriptor);
+                
+                JavaClass javaClass = getJavaClass(javaSources[i]);
+                
+                mmDescriptor.setImplementation(javaClass.getFullyQualifiedName());
+                
+                descriptors.add( mmDescriptor );
+            }
+        }
+
+        return descriptors;
+    }
+

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 MOV31 UPD40 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS42 INS43 UPD42 MOV42 INS43 UPD66 UPD66 UPD43 UPD42 INS42 MOV43 UPD42 UPD43 UPD42 INS41 UPD42 MOV43 MOV42 UPD42 MOV43 UPD43 INS42 UPD42 UPD42 INS42 UPD42 MOV43 UPD42 UPD43 UPD42 INS60 INS60 INS21 INS43 INS59 INS43 INS59 INS32 MOV42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS43 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL39 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21