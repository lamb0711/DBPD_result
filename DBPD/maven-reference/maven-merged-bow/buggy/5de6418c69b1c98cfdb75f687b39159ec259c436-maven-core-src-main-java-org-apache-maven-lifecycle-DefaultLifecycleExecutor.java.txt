PR: MNG-122
exception clean up phase 1

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@320668 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.BuildFailureException;
-import org.apache.maven.reactor.ReactorException;
+                // TODO: delete
-            for ( Iterator i = session.getSortedProjects().iterator(); i.hasNext(); )
-            {
-                MavenProject project = (MavenProject) i.next();
-
-                for ( Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); )
-                {
-                    Extension extension = (Extension) j.next();
-                    extensionManager.addExtension( extension, project, session.getLocalRepository() );
-                }
-
-                Map handlers = findArtifactTypeHandlers( project, session.getSettings(), session.getLocalRepository() );
-                artifactHandlerManager.addHandlers( handlers );
-            }
+            findExtensions( session );
-                response.setException( new ReactorException( "One or more projects failed to build." ) );
+                response.setException( new BuildFailureException( "One or more projects failed to build." ) );
-        catch ( PlexusContainerException e )
-        {
-            throw new LifecycleExecutionException( "Unable to initialise extensions", e );
-        }
-        catch ( PluginManagerException e )
-        {
-            throw new LifecycleExecutionException( "Unable to initialise extensions", e );
-        }
-        catch ( PluginVersionResolutionException e )
-        {
-            throw new LifecycleExecutionException( "Unable to initialise extensions", e );
-        }
-        catch ( InvalidVersionSpecificationException e )
-        {
-            throw new LifecycleExecutionException( "Unable to initialise extensions", e );
-        }
+    private void findExtensions( MavenSession session )
+        throws ArtifactNotFoundException, ArtifactResolutionException, LifecycleExecutionException
+    {
+        for ( Iterator i = session.getSortedProjects().iterator(); i.hasNext(); )
+        {
+            MavenProject project = (MavenProject) i.next();
+
+            for ( Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); )
+            {
+                Extension extension = (Extension) j.next();
+                try
+                {
+                    extensionManager.addExtension( extension, project, session.getLocalRepository() );
+                }
+                catch ( PlexusContainerException e )
+                {
+                    throw new LifecycleExecutionException( "Unable to initialise extensions", e );
+                }
+            }
+
+            Map handlers = findArtifactTypeHandlers( project, session.getSettings(), session.getLocalRepository() );
+            artifactHandlerManager.addHandlers( handlers );
+        }
+    }
+
-                    dispatcher.dispatchStart( event, rootProject.getId() + " ( " + segment + " )" );
+                    String target = rootProject.getId() + " ( " + segment + " )";
+                    dispatcher.dispatchStart( event, target );
-                            try
-                            {
-                                executeGoal( task, session, rootProject, response );
-                            }
-                            catch ( MojoExecutionException e )
-                            {
-                                // TODO: should this be removed?
-                                handleExecutionFailure( rm, rootProject, e, task, buildStartTime );
-                            }
-                            catch ( ArtifactResolutionException e )
-                            {
-                                // TODO: should this be removed?
-                                handleExecutionFailure( rm, rootProject, e, task, buildStartTime );
-                            }
-                            catch ( MojoFailureException e )
-                            {
-                                handleExecutionFailure( rm, rootProject, e, task, buildStartTime );
-                            }
-                            catch ( ArtifactNotFoundException e )
-                            {
-                                handleExecutionFailure( rm, rootProject, e, task, buildStartTime );
-                            }
+                            executeGoalAndHandleFailures( task, session, rootProject, response, dispatcher, event, rm,
+                                                          buildStartTime, target );
-                        dispatcher.dispatchEnd( event, rootProject.getId() + " ( " + segment + " )" );
+                        dispatcher.dispatchEnd( event, target );
-                        dispatcher.dispatchError( event, rootProject.getId() + " ( " + segment + " )", e );
+                        dispatcher.dispatchError( event, target, e );
-                        dispatcher.dispatchStart( event, currentProject.getId() + " ( " + segment + " )" );
+                        String target = currentProject.getId() + " ( " + segment + " )";
+                        dispatcher.dispatchStart( event, target );
-                                try
-                                {
-                                    executeGoal( task, session, currentProject, response );
-                                }
-                                catch ( MojoExecutionException e )
-                                {
-                                    // TODO: should this be removed?
-                                    handleExecutionFailure( rm, currentProject, e, task, buildStartTime );
-                                }
-                                catch ( ArtifactResolutionException e )
-                                {
-                                    // TODO: should this be removed?
-                                    handleExecutionFailure( rm, currentProject, e, task, buildStartTime );
-                                }
-                                catch ( MojoFailureException e )
-                                {
-                                    handleExecutionFailure( rm, currentProject, e, task, buildStartTime );
-                                }
-                                catch ( ArtifactNotFoundException e )
-                                {
-                                    handleExecutionFailure( rm, currentProject, e, task, buildStartTime );
-                                }
+                                executeGoalAndHandleFailures( task, session, currentProject, response, dispatcher,
+                                                              event, rm, buildStartTime, target );
-                            dispatcher.dispatchEnd( event, currentProject.getId() + " ( " + segment + " )" );
+                            dispatcher.dispatchEnd( event, target );
-                            dispatcher.dispatchError( event, currentProject.getId() + " ( " + segment + " )", e );
+                            dispatcher.dispatchError( event, target, e );
+    private void executeGoalAndHandleFailures( String task, MavenSession session, MavenProject project,
+                                               MavenExecutionResponse response, EventDispatcher dispatcher,
+                                               String event, ReactorManager rm, long buildStartTime, String target )
+        throws LifecycleExecutionException, MojoExecutionException, MojoFailureException, ArtifactNotFoundException,
+        ArtifactResolutionException
+    {
+        try
+        {
+            executeGoal( task, session, project, response );
+        }
+        catch ( MojoExecutionException e )
+        {
+            dispatcher.dispatchError( event, target, e );
+
+            handleExecutionFailure( rm, project, e, task, buildStartTime );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            dispatcher.dispatchError( event, target, e );
+
+            handleExecutionFailure( rm, project, e, task, buildStartTime );
+        }
+        catch ( MojoFailureException e )
+        {
+            // TODO: should be dispatchFailure?
+            dispatcher.dispatchError( event, target, e );
+
+            handleExecutionFailure( rm, project, e, task, buildStartTime );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            // TODO: should be dispatchFailure?
+            dispatcher.dispatchError( event, target, e );
+
+            handleExecutionFailure( rm, project, e, task, buildStartTime );
+        }
+    }
+
-                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+                throw new LifecycleExecutionException(
+                    "Internal error in the plugin manager executing goal '" + mojoDescriptor.getId(), e );
-                try
+                if ( reportSets == null || reportSets.isEmpty() )
-                    if ( reportSets == null || reportSets.isEmpty() )
+                    reports.addAll( getReports( reportPlugin, null, project, session, mojoExecution ) );
+                }
+                else
+                {
+                    for ( Iterator j = reportSets.iterator(); j.hasNext(); )
-                        reports.addAll( getReports( reportPlugin, null, project, session, mojoExecution ) );
-                    }
-                    else
-                    {
-                        for ( Iterator j = reportSets.iterator(); j.hasNext(); )
-                        {
-                            ReportSet reportSet = (ReportSet) j.next();
+                        ReportSet reportSet = (ReportSet) j.next();
-                            reports.addAll( getReports( reportPlugin, reportSet, project, session, mojoExecution ) );
-                        }
+                        reports.addAll( getReports( reportPlugin, reportSet, project, session, mojoExecution ) );
-                catch ( PluginManagerException e )
-                {
-                    throw new LifecycleExecutionException( "Error getting reports", e );
-                }
-                catch ( PluginVersionResolutionException e )
-                {
-                    throw new LifecycleExecutionException( "Error getting reports", e );
-                }
-        throws PluginManagerException, PluginVersionResolutionException, ArtifactResolutionException,
-        ArtifactNotFoundException
+        throws ArtifactResolutionException, ArtifactNotFoundException, LifecycleExecutionException
-        PluginDescriptor pluginDescriptor = pluginManager.verifyReportPlugin( reportPlugin, project, session );
+        PluginDescriptor pluginDescriptor = verifyReportPlugin( reportPlugin, project, session );
-                MavenReport reportMojo = pluginManager.getReport( project, reportExecution, session );
-
-                // Comes back null if it was a plugin, not a report - these are mojos in the reporting plugins that are not reports
-                if ( reportMojo != null )
+                try
-                    reports.add( reportMojo );
-                    mojoExecution.addMojoExecution( reportExecution );
+                    MavenReport reportMojo = pluginManager.getReport( project, reportExecution, session );
+
+                    // Comes back null if it was a plugin, not a report - these are mojos in the reporting plugins that are not reports
+                    if ( reportMojo != null )
+                    {
+                        reports.add( reportMojo );
+                        mojoExecution.addMojoExecution( reportExecution );
+                    }
+                }
+                catch ( PluginManagerException e )
+                {
+                    throw new LifecycleExecutionException(
+                        "Error getting reports from the plugin '" + reportPlugin.getKey() + "'", e );
-                    throw new LifecycleExecutionException( "Unable to read lifecycle mapping file", e );
+                    throw new LifecycleExecutionException( "Unable to read lifecycle mapping file: " + e.getMessage(),
+                                                           e );
-                    throw new LifecycleExecutionException( "Unable to parse lifecycle mapping file", e );
+                    throw new LifecycleExecutionException( "Unable to parse lifecycle mapping file: " + e.getMessage(),
+                                                           e );
-            String message = "Required goal '" + goal + "' not found in plugin '" + pluginDescriptor.getGoalPrefix() +
-                "'";
+            String message =
+                "Required goal '" + goal + "' not found in plugin '" + pluginDescriptor.getGoalPrefix() + "'";
-        String mojoIdWithoutVersion = pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":" +
-            mojoDescriptor.getGoal();
+        String mojoIdWithoutVersion =
+            pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":" + mojoDescriptor.getGoal();
-        try
+        LifecycleMapping m = (LifecycleMapping) findExtension( project, LifecycleMapping.ROLE, packaging,
+                                                               session.getSettings(), session.getLocalRepository() );
+        if ( m != null )
-            LifecycleMapping m = (LifecycleMapping) findExtension( project, LifecycleMapping.ROLE, packaging,
-                                                                   session.getSettings(),
-                                                                   session.getLocalRepository() );
-            if ( m != null )
-            {
-                mappings = m.getPhases( lifecycle.getId() );
-            }
-        }
-        catch ( PluginVersionResolutionException e )
-        {
-            throw new LifecycleExecutionException(
-                "Cannot load extension plugin obtaining lifecycle mappings for: \'" + packaging + "\'.", e );
-        }
-        catch ( PluginManagerException e )
-        {
-            throw new LifecycleExecutionException(
-                "Cannot load extension plugin obtaining lifecycle mappings for: \'" + packaging + "\'.", e );
+            mappings = m.getPhases( lifecycle.getId() );
-                LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
+                m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
-        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException,
-        ArtifactNotFoundException
+        throws ArtifactResolutionException, ArtifactNotFoundException, LifecycleExecutionException
-                pluginManager.verifyPlugin( plugin, project, settings, localRepository );
+                verifyPlugin( plugin, project, settings, localRepository );
+                catch ( PluginManagerException e )
+                {
+                    throw new LifecycleExecutionException(
+                        "Error getting extensions from the plugin '" + plugin.getKey() + "'", e );
+                }
-        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException,
-        ArtifactNotFoundException
+        throws ArtifactResolutionException, ArtifactNotFoundException, LifecycleExecutionException
-                pluginManager.verifyPlugin( plugin, project, settings, localRepository );
+                verifyPlugin( plugin, project, settings, localRepository );
-
-                    // shudder...
-                    for ( Iterator j = map.values().iterator(); j.hasNext(); )
-                    {
-                        ArtifactHandler handler = (ArtifactHandler) j.next();
-                        if ( project.getPackaging().equals( handler.getPackaging() ) )
-                        {
-                            project.getArtifact().setArtifactHandler( handler );
-                        }
-                    }
+                catch ( PluginManagerException e )
+                {
+                    throw new LifecycleExecutionException( "Error looking up available components from a plugin", e );
+                }
+
+                // shudder...
+                for ( Iterator j = map.values().iterator(); j.hasNext(); )
+                {
+                    ArtifactHandler handler = (ArtifactHandler) j.next();
+                    if ( project.getPackaging().equals( handler.getPackaging() ) )
+                    {
+                        project.getArtifact().setArtifactHandler( handler );
+                    }
+                }
-        pluginDescriptor = verifyPlugin( plugin, session, project );
+        pluginDescriptor = verifyPlugin( plugin, project, session.getSettings(), session.getLocalRepository() );
-    private PluginDescriptor verifyPlugin( Plugin plugin, MavenSession session, MavenProject project )
+    private PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, Settings settings,
+                                           ArtifactRepository localRepository )
-            ArtifactRepository localRepository = session.getLocalRepository();
-            pluginDescriptor = pluginManager.verifyPlugin( plugin, project, session.getSettings(), localRepository );
+            pluginDescriptor = pluginManager.verifyPlugin( plugin, project, settings, localRepository );
+        catch ( InvalidVersionSpecificationException e )
+        {
+            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+        }
+        return pluginDescriptor;
+    }
+
+    private PluginDescriptor verifyReportPlugin( ReportPlugin plugin, MavenProject project, MavenSession session )
+        throws ArtifactResolutionException, LifecycleExecutionException, ArtifactNotFoundException
+    {
+        PluginDescriptor pluginDescriptor;
+        try
+        {
+            pluginDescriptor = pluginManager.verifyReportPlugin( plugin, project, session );
+        }
+        catch ( PluginManagerException e )
+        {
+            throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+        }
+        catch ( PluginVersionResolutionException e )
+        {
+            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+        }
+        catch ( InvalidVersionSpecificationException e )
+        {
+            throw new LifecycleExecutionException( "Error resolving plugin version", e );
+        }
-                    try
+                    PluginDescriptor desc =
+                        verifyPlugin( buildPlugin, project, session.getSettings(), session.getLocalRepository() );
+                    if ( prefix.equals( desc.getGoalPrefix() ) )
-                        PluginDescriptor desc = pluginManager.verifyPlugin( buildPlugin, project, session.getSettings(),
-                                                                            session.getLocalRepository() );
-                        if ( prefix.equals( desc.getGoalPrefix() ) )
-                        {
-                            plugin = buildPlugin;
-                        }
-                    }
-                    catch ( PluginManagerException e )
-                    {
-                        throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
-                    }
-                    catch ( PluginVersionResolutionException e )
-                    {
-                        throw new LifecycleExecutionException( "Error resolving plugin version", e );
+                        plugin = buildPlugin;
-            try
-            {
-                pluginDescriptor = pluginManager.verifyPlugin( plugin, project, session.getSettings(),
-                                                               session.getLocalRepository() );
-            }
-            catch ( PluginManagerException e )
-            {
-                throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
-            }
-            catch ( PluginVersionResolutionException e )
-            {
-                throw new LifecycleExecutionException( "Error resolving plugin version", e );
-            }
+            pluginDescriptor = verifyPlugin( plugin, project, session.getSettings(), session.getLocalRepository() );

MOV26 UPD40 INS31 INS31 MOV43 MOV43 MOV43 INS31 INS83 INS39 INS42 INS44 INS43 INS43 INS43 MOV8 INS83 INS39 INS42 INS44 MOV44 MOV44 INS44 INS44 INS44 INS44 INS44 INS44 MOV43 INS43 INS43 INS43 INS43 INS8 UPD43 UPD43 UPD43 MOV8 INS44 INS44 INS44 INS43 INS43 INS43 INS83 INS43 INS42 INS44 INS44 INS44 MOV43 MOV43 MOV43 INS8 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS54 UPD42 MOV60 MOV25 UPD42 UPD42 MOV60 INS24 MOV41 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV54 INS41 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS12 INS12 INS12 MOV8 MOV58 MOV32 MOV8 INS42 INS42 INS42 MOV12 INS42 INS42 INS42 INS43 INS59 INS8 MOV12 INS42 MOV8 MOV25 MOV60 INS21 MOV21 MOV25 INS21 MOV44 INS8 MOV44 INS8 MOV44 INS8 MOV44 INS8 INS24 MOV60 INS25 MOV21 INS42 INS42 INS21 INS32 INS32 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV58 MOV32 MOV8 MOV32 MOV8 INS42 MOV32 MOV32 INS7 INS7 UPD43 MOV8 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV44 MOV60 MOV60 INS54 INS21 INS21 INS54 UPD42 MOV42 INS42 MOV32 INS42 INS32 UPD42 INS24 INS8 MOV12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS7 INS12 INS32 INS8 MOV12 INS12 UPD45 INS42 INS42 INS42 INS42 INS42 UPD45 MOV58 MOV32 MOV8 MOV21 INS60 MOV60 MOV25 MOV44 INS8 INS42 MOV11 MOV44 INS8 INS42 INS42 INS42 INS42 INS42 MOV60 MOV21 INS44 INS8 MOV60 UPD43 INS43 INS59 MOV43 INS27 INS53 INS53 INS43 INS42 INS53 UPD42 INS42 INS42 MOV27 UPD42 MOV42 INS60 MOV42 INS45 INS32 INS14 INS14 INS42 INS14 INS43 INS59 INS42 INS42 MOV43 INS27 INS42 INS27 INS42 INS27 INS42 MOV43 INS27 INS42 MOV43 INS45 INS42 INS21 UPD42 MOV42 INS42 INS42 MOV27 UPD42 MOV42 INS45 INS32 INS45 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS21 UPD42 MOV42 INS32 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL43 DEL42 DEL44 DEL45 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL24 DEL8 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL54 DEL25 DEL24 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL24 DEL8 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8