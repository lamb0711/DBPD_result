[MNG-4335] [regression] <settings><offline>true</offline</settings> is not honored

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@811352 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.embedder.MavenEmbedder;
-import org.apache.maven.settings.MavenSettingsBuilder;
-    //TODO: this needs to be pushed up to the front-end
-    @Requirement
-    private MavenSettingsBuilder settingsBuilder;
-
+    public MavenExecutionRequest populateFromSettings( MavenExecutionRequest request, Settings settings )
+        throws MavenEmbedderException
+    {
+        request.setOffline( settings.isOffline() );
+        
+        request.setInteractiveMode( settings.isInteractiveMode() );
+
+        request.setPluginGroups( settings.getPluginGroups() );
+
+        request.setLocalRepositoryPath( settings.getLocalRepository() );
+
+        for ( Server server : settings.getServers() )
+        {
+            server = server.clone();
+
+            String password = decrypt( server.getPassword(), "password for server " + server.getId() );
+
+            server.setPassword( password );
+
+            request.addServer( server );
+        }
+
+        //  <proxies>
+        //    <proxy>
+        //      <active>true</active>
+        //      <protocol>http</protocol>
+        //      <host>proxy.somewhere.com</host>
+        //      <port>8080</port>
+        //      <username>proxyuser</username>
+        //      <password>somepassword</password>
+        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
+        //    </proxy>
+        //  </proxies>
+
+        for ( Proxy proxy : settings.getProxies() )
+        {
+            if ( !proxy.isActive() )
+            {
+                continue;
+            }
+
+            proxy = proxy.clone();
+
+            String password = decrypt( proxy.getPassword(), "password for proxy " + proxy.getId() );
+
+            proxy.setPassword( password );
+
+            request.addProxy( proxy );
+        }
+
+        // <mirrors>
+        //   <mirror>
+        //     <id>nexus</id>
+        //     <mirrorOf>*</mirrorOf>
+        //     <url>http://repository.sonatype.org/content/groups/public</url>
+        //   </mirror>
+        // </mirrors>        
+
+        for ( Mirror mirror : settings.getMirrors() )
+        {
+            mirror = mirror.clone();
+
+            request.addMirror( mirror );
+        }
+
+        request.setActiveProfiles( settings.getActiveProfiles() );
+
+        for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
+        {
+            request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );
+        }
+
+        return request;
+    }
+
+    private String decrypt( String encrypted, String source )
+    {
+        try
+        {
+            return securityDispatcher.decrypt( encrypted );
+        }
+        catch ( SecDispatcherException e )
+        {
+            logger.warn( "Not decrypting " + source + " due to exception in security handler: " + e.getMessage() );
+
+            Throwable cause = e;
+
+            while ( cause.getCause() != null )
+            {
+                cause = cause.getCause();
+            }
+
+            if ( cause instanceof FileNotFoundException )
+            {
+                logger.warn( "Ensure that you have configured your master password file (and relocation if appropriate)." );
+                logger.warn( "See the installation instructions for details." );
+            }
+
+            logger.debug( "Full stack trace follows", e );
+
+            return encrypted;
+        }
+    }
+
-    // Process plugin groups
-    // Get profile models
-    // Get active profiles
-    private void processSettings( MavenExecutionRequest request )
-        throws MavenEmbedderException
-    {
-        Settings settings = request.getSettings();
-
-        request.addPluginGroups( settings.getPluginGroups() );
-
-        populateDefaultPluginGroups( request );
-
-        // We just need to keep track of what profiles are being activated by the settings. We don't need to process
-        // them here. This should be taken care of by the project builder.
-        //
-        request.addActiveProfiles( settings.getActiveProfiles() );
-
-        // We only need to take the profiles and make sure they are available when the calculation of the active profiles
-        // is determined.
-        //
-        List<org.apache.maven.settings.Profile> settingsProfiles = settings.getProfiles();
-
-        if ( ( settingsProfiles != null ) && !settingsProfiles.isEmpty() )
-        {
-            for ( org.apache.maven.settings.Profile rawProfile : settings.getProfiles() )
-            {
-                request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );
-            }
-        }
-
-        injectDefaultRepositories( request );
-        
-        injectDefaultPluginRepositories( request );        
-
-        processRepositoriesInSettings( request );
-    }
-
-        Settings settings = request.getSettings();
-
-        //  <proxies>
-        //    <proxy>
-        //      <active>true</active>
-        //      <protocol>http</protocol>
-        //      <host>proxy.somewhere.com</host>
-        //      <port>8080</port>
-        //      <username>proxyuser</username>
-        //      <password>somepassword</password>
-        //      <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
-        //    </proxy>
-        //  </proxies>
-
-        for ( Proxy proxy : settings.getProxies() )
-        {
-            if ( !proxy.isActive() )
-            {
-                continue;
-            }
-
-            proxy = proxy.clone();
-
-            String password = decrypt( proxy.getPassword(), "password for proxy " + proxy.getId() );
-
-            proxy.setPassword( password );
-
-            request.addProxy( proxy );
-        }
-
-        for ( Server server : settings.getServers() )
-        {
-            server = server.clone();
-
-            String password = decrypt( server.getPassword(), "password for server " + server.getId() );
-
-            server.setPassword( password );
-
-            request.addServer( server );
-        }
-
-        // <mirrors>
-        //   <mirror>
-        //     <id>nexus</id>
-        //     <mirrorOf>*</mirrorOf>
-        //     <url>http://repository.sonatype.org/content/groups/public</url>
-        //   </mirror>
-        // </mirrors>        
-
-        for ( Mirror mirror : settings.getMirrors() )
-        {
-            mirror = mirror.clone();
-
-            request.addMirror( mirror );
-        }
-
-    private String decrypt( String encrypted, String source )
-    {
-        try
-        {
-            return securityDispatcher.decrypt( encrypted );
-        }
-        catch ( SecDispatcherException e )
-        {
-            logger.warn( "Not decrypting " + source + " due to exception in security handler: " + e.getMessage() );
-
-            Throwable cause = e;
-
-            while ( cause.getCause() != null )
-            {
-                cause = cause.getCause();
-            }
-
-            if ( cause instanceof FileNotFoundException )
-            {
-                logger.warn( "Ensure that you have configured your master password file (and relocation if appropriate)." );
-                logger.warn( "See the installation instructions for details." );
-            }
-
-            logger.debug( "Full stack trace follows", e );
-
-            return encrypted;
-        }
-    }
-
-    // ------------------------------------------------------------------------
-    // Settings
-    // ------------------------------------------------------------------------
-
-    private void settings( MavenExecutionRequest request )
-    {
-        // ------------------------------------------------------------------------
-        // Settings
-        //
-        // If a settings instance has been provided in the request then we use
-        // that for execution, otherwise we will look in the embedder configuration
-        // for a user/global settings file to use. The settings file should have
-        // been validated upfront but we will still catch any parsing exception
-        // ------------------------------------------------------------------------
-
-        if ( request.getSettings() == null )
-        {
-            if ( request.getGlobalSettingsFile() == null )
-            {
-                request.setGlobalSettingsFile( MavenEmbedder.DEFAULT_GLOBAL_SETTINGS_FILE );
-            }
-
-            if ( request.getUserSettingsFile() == null )
-            {
-                request.setUserSettingsFile( MavenEmbedder.DEFAULT_USER_SETTINGS_FILE );
-            }
-
-            try
-            {
-                Settings settings = settingsBuilder.buildSettings( request );
-
-                request.setSettings( settings );
-            }
-            catch ( Exception e )
-            {
-                request.setSettings( new Settings() );
-            }
-        }
-    }
-
-            request.setLocalRepository( createLocalRepository( request, request.getSettings() ) );
+            request.setLocalRepository( createLocalRepository( request ) );
-    public ArtifactRepository createLocalRepository( MavenExecutionRequest request, Settings settings )
+    public ArtifactRepository createLocalRepository( MavenExecutionRequest request )
-            localRepositoryPath = settings.getLocalRepository();
-        }
-
-        if ( StringUtils.isEmpty( localRepositoryPath ) )
-        {
-        settings( request );
-
-        processSettings( request );
+        populateDefaultPluginGroups( request );
+
+        injectDefaultRepositories( request );
+        
+        injectDefaultPluginRepositories( request );
+
+        processRepositoriesInSettings( request );
+

MOV31 MOV31 MOV31 UPD83 INS43 INS42 MOV44 MOV70 UPD42 MOV44 MOV43 INS8 MOV44 MOV43 INS42 INS21 INS21 MOV21 INS21 MOV21 MOV70 INS41 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 MOV32 UPD42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21