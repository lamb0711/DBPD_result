PR: MNG-404
add ability to have a minimum Maven version for a project build

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219473 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.versioning.ArtifactVersion;
+import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.util.IOUtil;
+import java.io.InputStream;
+import java.util.Properties;
-    
+
-    
+
+    private ArtifactVersion mavenVersion;
+
+        try
+        {
+            mavenVersion = getMavenVersion();
+        }
+        catch ( IOException e )
+        {
+            throw new ReactorException( "Unable to determine the executing version of Maven", e );
+        }
+
-            projects = collectProjects( request.getFiles(), request.getLocalRepository(), request.isRecursive(), request.getSettings() );
+            projects = collectProjects( request.getFiles(), request.getLocalRepository(), request.isRecursive(),
+                                        request.getSettings() );
-                
-                projects.add( projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(), externalProfiles ) );
+
+                projects.add(
+                    projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(), externalProfiles ) );
+    private DefaultArtifactVersion getMavenVersion()
+        throws IOException
+    {
+        InputStream resourceAsStream = null;
+        try
+        {
+            Properties properties = new Properties();
+            resourceAsStream = getClass().getClassLoader().getResourceAsStream(
+                "META-INF/maven/org.apache.maven/maven-core/pom.properties" );
+            properties.load( resourceAsStream );
+
+            return new DefaultArtifactVersion( properties.getProperty( "version" ) );
+        }
+        finally
+        {
+            IOUtil.close( resourceAsStream );
+        }
+    }
+
+            if ( project.getPrerequesites() != null && project.getPrerequesites().getMaven() != null )
+            {
+                DefaultArtifactVersion version = new DefaultArtifactVersion( project.getPrerequesites().getMaven() );
+                if ( mavenVersion.compareTo( version ) < 0 )
+                {
+                    throw new ProjectBuildingException( "Unable to build project '" + project.getFile() +
+                        "; it requires Maven version " + version.toString() );
+                }
+            }
+
-                throw new ProjectBuildingException( "The file " + pom.getAbsolutePath() + " you specified has zero length." );
+                throw new ProjectBuildingException(
+                    "The file " + pom.getAbsolutePath() + " you specified has zero length." );
-        
-        MavenProject project = projectBuilder.build( pom, localRepository, externalProfiles );
-        
-        return project;
+
+        return projectBuilder.build( pom, localRepository, externalProfiles );
-    private List getActiveExternalProfiles( File pom, Settings settings ) throws ProjectBuildingException
+    private List getActiveExternalProfiles( File pom, Settings settings )
+        throws ProjectBuildingException
-        
+
-        
-        if(settingsProfiles != null && !settingsProfiles.isEmpty())
+
+        if ( settingsProfiles != null && !settingsProfiles.isEmpty() )
-            
+
-                
+
-                
-                if( settingsActiveProfileIds.contains( rawProfile.getId() ) )
+
+                if ( settingsActiveProfileIds.contains( rawProfile.getId() ) )
-                
+
-        
-        if( pom != null )
+
+        if ( pom != null )
-                
-                if( root != null )
+
+                if ( root != null )
-                        
+
-        
+
-        
+
-        
+
-        
+
-        getLogger().info( "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/" +
-                          ( r.totalMemory() / mb ) + "M" );
+        getLogger().info(
+            "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/" + ( r.totalMemory() / mb ) + "M" );

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS43 INS59 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS54 INS42 INS42 INS60 INS54 INS8 INS12 INS43 INS59 INS8 INS8 MOV32 INS21 INS44 INS8 INS42 INS42 INS33 INS60 INS21 INS21 INS41 INS21 INS25 INS7 INS43 INS42 INS53 INS43 INS59 INS7 INS32 INS14 INS32 INS27 INS8 INS42 INS32 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS27 INS27 INS60 INS25 INS42 INS43 INS45 INS42 INS43 INS32 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS33 INS32 INS33 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS34 INS53 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42