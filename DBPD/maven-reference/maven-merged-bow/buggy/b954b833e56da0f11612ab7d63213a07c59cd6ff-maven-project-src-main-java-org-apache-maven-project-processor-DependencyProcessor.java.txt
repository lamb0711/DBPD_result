[MNG-3906] - Project-level plugin dependencies order. Fixed a lot of problems with ordering of elements. We need to assume that the processors always get the parent model first, then the child, down the line.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@757936 13f79535-47bb-0310-9956-ffa450edef68

+    private boolean isDependencyManagement;
+    public DependencyProcessor(){ }
+    
+    public DependencyProcessor(boolean isDependencyManagement)
+    {
+        this.isDependencyManagement = isDependencyManagement;
+    }
+    /*
+     * Process children first
+     */
-            copy( (Dependency) child, targetDependency, false );
-            if(isAdd) t.add( targetDependency );
+            copy( (Dependency) child, targetDependency);
+            if(!isAdd)
+            {
+                t.remove( targetDependency );               
+            }
+           
+            t.add( targetDependency );
-            //Dependency targetDependency = new Dependency();
-            copy( (Dependency) parent, targetDependency, true );
+            copy( (Dependency) parent, targetDependency);
-            Dependency targetDependency = new Dependency();
-            copy( (Dependency) child, targetDependency, false );
-            copy( (Dependency) parent, targetDependency, true );
+            Dependency targetDependency = new Dependency();          
+            
+            copy( (Dependency) child, targetDependency);
+            copy( (Dependency) parent, targetDependency );
-    private static void copy( Dependency source, Dependency targetDependency, boolean isParent )
+    
+    private boolean isMatch(Object source, Object target, boolean isDependencyManagement)
-        //IF target exists and is parent, don't override
-        if ( source.getArtifactId() != null && (targetDependency.getArtifactId() == null || !isParent) )
+        return (source != null && !isDependencyManagement) || target == null;
+    }
+    
+    private void copy( Dependency source, Dependency targetDependency)
+    {
+        if ( isMatch(source.getArtifactId(), targetDependency.getArtifactId(), isDependencyManagement) )
-        if ( source.getClassifier() != null )
+        if ( isMatch(source.getClassifier(), targetDependency.getClassifier(), isDependencyManagement)  )
-        if ( source.getGroupId() != null )
+        if ( isMatch(source.getGroupId(), targetDependency.getGroupId(), isDependencyManagement) )
-        if ( source.getScope() != null && (targetDependency.getScope() == null || !isParent) )
+        if (isMatch(source.getScope(), targetDependency.getScope(), isDependencyManagement) )
-        if ( source.getSystemPath() != null )
+        if ( isMatch(source.getSystemPath(), targetDependency.getSystemPath(), isDependencyManagement) )
-        if ( source.getType() != null && (targetDependency.getScope() == null || !isParent))
+        if ( isMatch(source.getType(), targetDependency.getType(), isDependencyManagement))
-        if ( source.getVersion() != null && (targetDependency.getVersion() == null || !isParent)  )
+        if ( isMatch(source.getVersion(), targetDependency.getVersion(), isDependencyManagement) )

INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS42 INS8 INS83 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS39 INS42 INS21 INS43 INS42 INS43 INS42 INS39 INS42 INS41 INS7 INS42 INS42 INS27 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS22 INS42 INS36 INS27 INS42 MOV32 MOV32 INS42 INS42 MOV32 INS32 INS42 INS42 MOV32 INS32 INS42 INS42 MOV32 MOV32 INS42 INS42 MOV32 INS32 INS42 INS42 MOV32 INS32 INS42 INS42 MOV32 MOV32 INS42 INS52 INS42 INS25 INS21 INS27 INS42 INS33 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 INS38 INS8 MOV32 INS21 MOV21 INS27 INS38 INS42 INS21 INS32 INS42 INS33 INS42 INS32 INS42 MOV11 INS42 INS42 INS42 INS42 DEL9 DEL42 DEL21 DEL25 DEL9 DEL9 DEL42 DEL42 DEL9 DEL32 DEL21 DEL83 DEL39 DEL42 DEL44 DEL33 DEL27 DEL33 DEL27 DEL42 DEL38 DEL27 DEL36 DEL27 DEL33 DEL27 DEL33 DEL27 DEL33 DEL27 DEL32 DEL33 DEL27 DEL42 DEL38 DEL27 DEL36 DEL27 DEL33 DEL27 DEL33 DEL27 DEL33 DEL27 DEL42 DEL38 DEL27 DEL36 DEL27 DEL33 DEL27 DEL33 DEL27 DEL42 DEL38 DEL27 DEL36 DEL27