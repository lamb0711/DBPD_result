o adding lifecycle methods to get the plugin for a packing in all lifecycles, this will interleave with the
  project builder which will populate the versions specified in plugin management, and then another method
  will retrieve and populate the default configuration information.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@769847 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-      
-    public Set<Plugin> lifecyclePlugins( String packaging )
-    {
-        Set<Plugin> plugins = new LinkedHashSet<Plugin>();
-        
-        for ( Lifecycle lifecycle : lifecycles )
-        {
-            LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( packaging );
-
-            org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration = lifecycleMappingForPackaging.getLifecycles().get( lifecycle.getId() );                                                           
-            
-            if ( lifecycleConfiguration != null )
-            {
-                Map<String, String> lifecyclePhasesForPackaging = lifecycleConfiguration.getPhases();
-
-                for ( String s : lifecyclePhasesForPackaging.values() )
-                {
-                    String[] p = StringUtils.split( s, ":" );
-                    Plugin plugin = new Plugin();
-                    plugin.setGroupId( p[0] );
-                    plugin.setArtifactId( p[1] );
-                    plugins.add( plugin );
-                }
-            }
-            else if ( lifecycle.getDefaultPhases() != null )
-            {
-                for ( String s : lifecycle.getDefaultPhases() )
-                {
-                    String[] p = StringUtils.split( s, ":" );
-                    Plugin plugin = new Plugin();
-                    plugin.setGroupId( p[0] );
-                    plugin.setArtifactId( p[1] );
-                    plugins.add( plugin );
-                }                
-            }        
-        }
-
-        return plugins;
-    }        
+    // These methods deal with construction intact Plugin object that look like they come from a standard
+    // <plugin/> block in a Maven POM. We have to do some wiggling to pull the sources of information
+    // together and this really shows the problem of constructing a sensible default configuration but
+    // it's all encapsulated here so it appears normalized to the POM builder.
+    
+    // We are going to take the project packaging and find all plugin in the default lifecycle and create
+    // fully populated Plugin objects, including executions with goals and default configuration taken
+    // from the plugin.xml inside a plugin.
+    //
+    public Set<Plugin> getPluginsBoundByDefaultToLifecycles( String packaging )
+    {
+        Set<Plugin> plugins = new LinkedHashSet<Plugin>();
+        
+        for ( Lifecycle lifecycle : lifecycles )
+        {
+            LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( packaging );
+
+            org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration = lifecycleMappingForPackaging.getLifecycles().get( lifecycle.getId() );                                                           
+            
+            if ( lifecycleConfiguration != null )
+            {
+                Map<String, String> lifecyclePhasesForPackaging = lifecycleConfiguration.getPhases();
+
+                // These are of the form:
+                //
+                // org.apache.maven.plugins:maven-compiler-plugin:compile
+                //
+                for ( String s : lifecyclePhasesForPackaging.values() )
+                {
+                    plugins.add( populatePluginWithInformationSpecifiedInLifecyclePhaseDefinition( s ) );
+                }
+            }
+            else if ( lifecycle.getDefaultPhases() != null )
+            {
+                for ( String s : lifecycle.getDefaultPhases() )
+                {
+                    plugins.add( populatePluginWithInformationSpecifiedInLifecyclePhaseDefinition( s ) );
+                }                
+            }        
+        }
+
+        return plugins;
+    }        
+    
+    private Plugin populatePluginWithInformationSpecifiedInLifecyclePhaseDefinition( String lifecyclePhaseDefinition )
+    {
+        String[] p = StringUtils.split( lifecyclePhaseDefinition, ":" );
+        Plugin plugin = new Plugin();
+        plugin.setGroupId( p[0] );
+        plugin.setArtifactId( p[1] );
+        PluginExecution execution = new PluginExecution();
+        execution.setGoals( Arrays.asList( new String[]{ p[2] } ) );
+        plugin.setExecutions( Arrays.asList( new PluginExecution[]{ execution } ) );
+        return plugin;
+    }
+    
+    public Set<Plugin> populateDefaultConfigurationForPlugins( Set<Plugin> plugins, MavenProject project, ArtifactRepository localRepository ) 
+        throws LifecycleExecutionException
+    {
+        for( Plugin p: plugins )
+        {
+            for( PluginExecution e : p.getExecutions() )
+            {
+                for( String g : e.getGoals() )
+                {
+                    Xpp3Dom dom = getDefaultPluginConfiguration( p.getGroupId(), p.getArtifactId(), p.getVersion(), g, project, localRepository );
+                    e.setConfiguration( dom );
+                }
+            }
+        }
+        
+        return plugins;
+    }    
+    

INS26 MOV31 INS40 INS31 INS31 UPD42 INS83 INS43 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS60 MOV60 MOV21 MOV21 INS60 INS21 INS21 INS41 INS43 INS43 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS70 INS41 INS42 MOV5 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS70 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS3 INS42 INS42 INS3 INS42 INS44 INS32 INS8 INS42 MOV5 INS4 INS5 INS4 INS43 INS42 INS42 INS42 INS70 INS2 INS43 INS85 INS42 INS42 INS44 INS32 INS8 INS42 INS34 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60