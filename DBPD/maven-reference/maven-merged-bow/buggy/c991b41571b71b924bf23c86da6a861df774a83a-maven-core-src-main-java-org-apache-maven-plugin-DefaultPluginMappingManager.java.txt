refactoring towards similar pattern of artifact metadata

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@264967 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.repository.metadata.InvalidRepositoryMetadataException;
-    private List mappings = new ArrayList();
-
-    private boolean refreshed;
-
-    private Map pluginDefinitionsByPrefix;
-
-    public void clear()
-    {
-        this.mappings = null;
-        clearCache();
-    }
-
-    private void clearCache()
-    {
-        this.pluginDefinitionsByPrefix = null;
-    }
+    private Map pluginDefinitionsByPrefix = new HashMap();
-        if ( pluginDefinitionsByPrefix == null )
+        // if not found, try from the remote repository
+        if ( !pluginDefinitionsByPrefix.containsKey( pluginPrefix ) )
-            // firstly, search the local repository
+            getLogger().info( "Searching repository for plugin with prefix: \'" + pluginPrefix + "\'." );
+
-
-            calculatePluginDefinitionsByPrefix();
-
-            // if not found, try from the remote repository
-            if ( !pluginDefinitionsByPrefix.containsKey( pluginPrefix ) && !refreshed )
-            {
-                getLogger().info(
-                    "Refreshing plugin mapping metadata; looking for plugin with prefix: \'" + pluginPrefix + "\'." );
-
-                refreshPluginMappingManager( pluginRepositories, localRepository );
-
-                refreshed = true;
-            }
-
-            calculatePluginDefinitionsByPrefix();
+
-    private void calculatePluginDefinitionsByPrefix()
-    {
-        pluginDefinitionsByPrefix = new HashMap();
-
-        for ( Iterator it = mappings.iterator(); it.hasNext(); )
-        {
-            Metadata pluginMap = (Metadata) it.next();
-
-            String groupId = pluginMap.getGroupId();
-
-            for ( Iterator pluginIterator = pluginMap.getPlugins().iterator(); pluginIterator.hasNext(); )
-            {
-                Plugin mapping = (Plugin) pluginIterator.next();
-
-                String prefix = mapping.getPrefix();
-
-                String artifactId = mapping.getArtifactId();
-
-                org.apache.maven.model.Plugin plugin = new org.apache.maven.model.Plugin();
-
-                plugin.setGroupId( groupId );
-
-                plugin.setArtifactId( artifactId );
-
-                pluginDefinitionsByPrefix.put( prefix, plugin );
-            }
-        }
-    }
-
-    private void refreshPluginMappingManager( List pluginRepositories, ArtifactRepository localRepository )
-        throws RepositoryMetadataManagementException
-    {
-        List groupIds = new ArrayList();
-
-        for ( Iterator it = mappings.iterator(); it.hasNext(); )
-        {
-            Metadata map = (Metadata) it.next();
-
-            String groupId = map.getGroupId();
-
-            groupIds.add( groupId );
-
-            repositoryMetadataManager.purgeLocalCopy( new PluginMappingMetadata( groupId ), localRepository );
-        }
-
-        loadPluginMappings( groupIds, pluginRepositories, localRepository );
-    }
-
-                File mappingFile = resolveMappingMetadata( repositoryMetadataManager, groupId, pluginRepositories,
-                                                           localRepository );
-
-                Metadata pluginMap = readPluginMap( mappingFile );
-
-                if ( pluginMap != null )
-                {
-                    mappings.add( pluginMap );
-                }
+                loadPluginMappings( groupId, pluginRepositories, localRepository );
-
-            clearCache();
-    private static Metadata readPluginMap( File mappingFile )
-        throws RepositoryMetadataManagementException
-    {
-        Metadata result = null;
-
-        if ( mappingFile.exists() )
-        {
-            Reader fileReader = null;
-            try
-            {
-                fileReader = new FileReader( mappingFile );
-
-                MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
-
-                result = mappingReader.read( fileReader );
-            }
-            catch ( FileNotFoundException e )
-            {
-                throw new RepositoryMetadataManagementException( "Cannot read plugin mappings from: " + mappingFile,
-                                                                 e );
-            }
-            catch ( IOException e )
-            {
-                throw new RepositoryMetadataManagementException( "Cannot read plugin mappings from: " + mappingFile,
-                                                                 e );
-            }
-            catch ( XmlPullParserException e )
-            {
-                throw new RepositoryMetadataManagementException( "Cannot parse plugin mappings from: " + mappingFile,
-                                                                 e );
-            }
-            finally
-            {
-                IOUtil.close( fileReader );
-            }
-        }
-
-        return result;
-    }
-
-    private static File resolveMappingMetadata( RepositoryMetadataManager repositoryMetadataManager, String groupId,
-                                                List pluginRepositories, ArtifactRepository localRepository )
+    private void loadPluginMappings( String groupId, List pluginRepositories, ArtifactRepository localRepository )
-        RepositoryMetadataManagementException repositoryException = null;
+        // TOOD: aggregate the results of this instead
+        repositoryMetadataManager.resolve( metadata, pluginRepositories, localRepository );
-        for ( Iterator repoIterator = pluginRepositories.iterator(); repoIterator.hasNext(); )
+        File metadataFile = new File( localRepository.getBasedir(),
+                                      localRepository.pathOfRepositoryMetadata( metadata ) );
+
+        if ( metadataFile.exists() )
-            ArtifactRepository repository = (ArtifactRepository) repoIterator.next();
+            Metadata pluginMap = readMetadata( metadataFile );
-            try
+            if ( pluginMap != null )
-                repositoryMetadataManager.resolve( metadata, repository, localRepository );
-
-                // reset this to keep it from getting in the way when we succeed but not on first repo...
-                repositoryException = null;
-
-                File metadataFile = new File( localRepository.getBasedir(),
-                                              localRepository.pathOfRepositoryMetadata( metadata ) );
-
-                if ( metadataFile.exists() )
+                for ( Iterator pluginIterator = pluginMap.getPlugins().iterator(); pluginIterator.hasNext(); )
-                    return metadataFile;
+                    Plugin mapping = (Plugin) pluginIterator.next();
+
+                    String prefix = mapping.getPrefix();
+
+                    String artifactId = mapping.getArtifactId();
+
+                    org.apache.maven.model.Plugin plugin = new org.apache.maven.model.Plugin();
+
+                    plugin.setGroupId( groupId );
+
+                    plugin.setArtifactId( artifactId );
+
+                    pluginDefinitionsByPrefix.put( prefix, plugin );
-            catch ( InvalidRepositoryMetadataException e )
-            {
-                repositoryMetadataManager.purgeLocalCopy( metadata, localRepository );
-            }
-            catch ( RepositoryMetadataManagementException e )
-            {
-                repositoryException = e;
-            }
+    }
-        if ( repositoryException != null )
+    private static Metadata readMetadata( File mappingFile )
+        throws RepositoryMetadataManagementException
+    {
+        Metadata result;
+
+        Reader fileReader = null;
+        try
-            throw repositoryException;
-        }
+            fileReader = new FileReader( mappingFile );
-        throw new RepositoryMetadataManagementException( "No repository metadata found" );
+            MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
+
+            result = mappingReader.read( fileReader );
+        }
+        catch ( FileNotFoundException e )
+        {
+            throw new RepositoryMetadataManagementException( "Cannot read plugin mappings from: " + mappingFile, e );
+        }
+        catch ( IOException e )
+        {
+            throw new RepositoryMetadataManagementException( "Cannot read plugin mappings from: " + mappingFile, e );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new RepositoryMetadataManagementException( "Cannot parse plugin mappings from: " + mappingFile, e );
+        }
+        finally
+        {
+            IOUtil.close( fileReader );
+        }
+        return result;

MOV31 UPD42 MOV44 MOV44 MOV44 MOV43 INS8 INS42 MOV8 MOV14 MOV25 MOV60 INS21 MOV60 INS25 INS60 MOV41 MOV38 INS32 MOV32 MOV8 MOV43 INS59 MOV21 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS42 MOV43 INS59 MOV27 MOV8 INS21 UPD42 MOV42 UPD42 MOV42 MOV32 UPD45 INS32 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 MOV42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL31 DEL42 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL43 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL25 DEL8 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL33 DEL27 DEL42 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL31