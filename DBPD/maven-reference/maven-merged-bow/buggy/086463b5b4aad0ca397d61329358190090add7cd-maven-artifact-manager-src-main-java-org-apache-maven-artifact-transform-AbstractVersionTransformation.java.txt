PR: MNG-456
allow separate snapshot and release repositories
deprecate existing snapshotPolicy and checksumPolicy in favour of updatePolicy and checksumPolicy within the <releases> and <snapshots> elements in the <repository> element.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@224707 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-                ArtifactRepository remoteRepository = (ArtifactRepository) i.next();
+                ArtifactRepository repository = (ArtifactRepository) i.next();
-                String snapshotPolicy = remoteRepository.getSnapshotPolicy();
-                // TODO: should be able to calculate this less often
-                boolean checkForUpdates = false;
-                if ( ArtifactRepository.SNAPSHOT_POLICY_ALWAYS.equals( snapshotPolicy ) )
+                ArtifactRepositoryPolicy policy = artifact.isSnapshot() ? repository.getSnapshots()
+                    : repository.getReleases();
+
+                if ( !policy.isEnabled() )
-                    checkForUpdates = true;
+                    getLogger().info( "Skipping disabled repository " + repository.getId() );
-                else if ( ArtifactRepository.SNAPSHOT_POLICY_DAILY.equals( snapshotPolicy ) )
+                else
-                    if ( !localMetadata.checkedSinceDate( getMidnightBoundary() ) )
+                    String updatePolicy = policy.getUpdatePolicy();
+                    // TODO: should be able to calculate this less often
+                    boolean checkForUpdates = false;
+                    if ( ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS.equals( updatePolicy ) )
-                }
-                else if ( snapshotPolicy.startsWith( ArtifactRepository.SNAPSHOT_POLICY_INTERVAL ) )
-                {
-                    String s = snapshotPolicy.substring( ArtifactRepository.SNAPSHOT_POLICY_INTERVAL.length() + 1 );
-                    int minutes = Integer.valueOf( s ).intValue();
-                    Calendar cal = Calendar.getInstance();
-                    cal.add( Calendar.MINUTE, -minutes );
-                    if ( !localMetadata.checkedSinceDate( cal.getTime() ) )
+                    else if ( ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY.equals( updatePolicy ) )
-                        checkForUpdates = true;
+                        if ( !localMetadata.checkedSinceDate( getMidnightBoundary() ) )
+                        {
+                            checkForUpdates = true;
+                        }
-                }
-                // else assume "never"
-
-                if ( checkForUpdates )
-                {
-                    getLogger().info(
-                        artifact.getArtifactId() + ": checking for updates from " + remoteRepository.getId() );
-
-                    VersionArtifactMetadata remoteMetadata;
-
-                    checkedUpdates = true;
-
-                    try
+                    else if ( updatePolicy.startsWith( ArtifactRepositoryPolicy.UPDATE_POLICY_INTERVAL ) )
-                        remoteMetadata = retrieveFromRemoteRepository( artifact, remoteRepository, localMetadata );
+                        String s = updatePolicy.substring(
+                            ArtifactRepositoryPolicy.UPDATE_POLICY_INTERVAL.length() + 1 );
+                        int minutes = Integer.valueOf( s ).intValue();
+                        Calendar cal = Calendar.getInstance();
+                        cal.add( Calendar.MINUTE, -minutes );
+                        if ( !localMetadata.checkedSinceDate( cal.getTime() ) )
+                        {
+                            checkForUpdates = true;
+                        }
-                    catch ( ResourceDoesNotExistException e )
+                    // else assume "never"
+
+                    if ( checkForUpdates )
-                        getLogger().debug( "Error resolving artifact version from metadata.", e );
+                        getLogger().info(
+                            artifact.getArtifactId() + ": checking for updates from " + repository.getId() );
-                        continue;
-                    }
+                        VersionArtifactMetadata remoteMetadata;
-                    int difference = remoteMetadata.compareTo( localMetadata );
-                    if ( difference > 0 )
-                    {
-                        // remote is newer
-                        artifact.setRepository( remoteRepository );
+                        checkedUpdates = true;
-                        localMetadata = remoteMetadata;
+                        try
+                        {
+                            remoteMetadata = retrieveFromRemoteRepository( artifact, repository, localMetadata,
+                                                                           updatePolicy );
+                        }
+                        catch ( ResourceDoesNotExistException e )
+                        {
+                            getLogger().debug( "Error resolving artifact version from metadata.", e );
+
+                            continue;
+                        }
+
+                        int difference = remoteMetadata.compareTo( localMetadata );
+                        if ( difference > 0 )
+                        {
+                            // remote is newer
+                            artifact.setRepository( repository );
+
+                            localMetadata = remoteMetadata;
+                        }
-                                                                    VersionArtifactMetadata localMetadata )
+                                                                    VersionArtifactMetadata localMetadata,
+                                                                    String updatePolicy )
-        metadata.retrieveFromRemoteRepository( remoteRepository, wagonManager );
+        metadata.retrieveFromRemoteRepository( remoteRepository, wagonManager, updatePolicy );

INS26 INS40 INS44 INS43 INS42 INS42 INS42 INS8 MOV60 INS60 INS25 INS43 INS59 INS38 INS8 MOV8 UPD42 INS42 INS42 INS16 INS32 INS21 INS32 INS32 INS32 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 UPD42 UPD40 UPD42 INS42 INS45 INS32 UPD42 UPD42 UPD40 UPD42 INS42 INS42 UPD42 UPD40 MOV43 UPD42 UPD42 UPD42 UPD42 INS42 UPD40