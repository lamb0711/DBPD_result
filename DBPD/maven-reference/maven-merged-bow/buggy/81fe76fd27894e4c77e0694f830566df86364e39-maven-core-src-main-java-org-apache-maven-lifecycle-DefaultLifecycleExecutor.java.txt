PR: MNG-471, MNG-489
- refactor project out of MavenSession so that it can be cloned
- refactor lifecycle construction out so we can clone the existing one and pass it into a new execution
- only resolve plugins that are executed (MNG-489)



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191413 13f79535-47bb-0310-9956-ffa450edef68

+     * @param project
-    public MavenExecutionResponse execute( List tasks, MavenSession session )
+    public MavenExecutionResponse execute( List tasks, MavenSession session, MavenProject project )
-                executeGoal( task, session );
+                executeGoal( task, session, project );
-    private void executeGoal( String task, MavenSession session )
+    private void executeGoal( String task, MavenSession session, MavenProject project )
-        String selectedPhase = null;
-
-
-            if ( task.equals( p ) )
-            {
-                selectedPhase = p;
-            }
-        List goals;
-
-        // Need to verify all the plugins up front, as standalone goals should use the version from the POM.
-        for ( Iterator i = session.getProject().getBuildPlugins().iterator(); i.hasNext(); )
-        {
-            Plugin plugin = (Plugin) i.next();
-
-            verifyPlugin( plugin, session );
-        }
-
-        if ( selectedPhase != null )
+        if ( phaseMap.containsKey( task ) )
-            constructLifecyclePhaseMap( session, phaseMap, selectedPhase );
+            constructLifecyclePhaseMap( session, phaseMap, task, project );
+        }
-            goals = processGoalChain( selectedPhase, phaseMap );
+        executeGoalWithLifecycle( task, session, phaseMap, project );
+    }
+
+    private void executeGoalWithLifecycle( String task, MavenSession session, Map lifecycleMappings,
+                                           MavenProject project )
+        throws ArtifactResolutionException, LifecycleExecutionException, MojoExecutionException
+    {
+        List goals;
+
+        if ( lifecycleMappings.containsKey( task ) )
+        {
+            goals = processGoalChain( task, lifecycleMappings );
-            MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session );
+            MojoDescriptor mojoDescriptor = getMojoDescriptor( task, session, project );
-            String executePhase = mojoExecution.getMojoDescriptor().getExecutePhase();
+            MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
+            String executePhase = mojoDescriptor.getExecutePhase();
-                // TODO: with introduction of cloned lifecyle, we want to avoid reconstructing some things - narrow
-                executeGoal( executePhase, session );
+                forkLifecycle( executePhase, mojoDescriptor.getExecuteLifecycle(), session, lifecycleMappings,
+                               project );
-                pluginManager.executeMojo( mojoExecution, session );
+                pluginManager.executeMojo( project, mojoExecution, session );
-    private void constructLifecyclePhaseMap( MavenSession session, Map phaseMap, String selectedPhase )
+    private void forkLifecycle( String executePhase, String executeLifecycle, MavenSession session,
+                                Map lifecycleMappings, MavenProject project )
+        throws LifecycleExecutionException, MojoExecutionException, ArtifactResolutionException
+    {
+        // Deep copy of the lifecycle
+        Map phaseMap = new HashMap();
+        for ( Iterator i = lifecycleMappings.keySet().iterator(); i.hasNext(); )
+        {
+            String phase = (String) i.next();
+            List mappings = (List) lifecycleMappings.get( phase );
+            phaseMap.put( phase, new ArrayList( mappings ) );
+        }
+
+        if ( executeLifecycle != null )
+        {
+            // TODO: overlay new lifecycle
+        }
+
+        // TODO: clone project
+        executeGoalWithLifecycle( executePhase, session, phaseMap, project );
+    }
+
+    private void constructLifecyclePhaseMap( MavenSession session, Map phaseMap, String selectedPhase,
+                                             MavenProject project )
-        bindLifecycleForPackaging( session, phaseMap, selectedPhase );
+        bindLifecycleForPackaging( session, phaseMap, selectedPhase, project );
-        for ( Iterator i = session.getProject().getBuildPlugins().iterator(); i.hasNext(); )
+        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
-            bindPluginToLifecycle( plugin, session, phaseMap );
+            bindPluginToLifecycle( plugin, session, phaseMap, project );
-    private void bindLifecycleForPackaging( MavenSession session, Map phaseMap, String selectedPhase )
+    private void bindLifecycleForPackaging( MavenSession session, Map phaseMap, String selectedPhase,
+                                            MavenProject project )
-        String packaging = session.getProject().getPackaging();
+        String packaging = project.getPackaging();
-                    MojoDescriptor mojoDescriptor = getMojoDescriptor( goal, session );
+                    MojoDescriptor mojoDescriptor = getMojoDescriptor( goal, session, project );
+     * @param project
-    private void bindPluginToLifecycle( Plugin plugin, MavenSession session, Map phaseMap )
+    private void bindPluginToLifecycle( Plugin plugin, MavenSession session, Map phaseMap, MavenProject project )
-        pluginDescriptor = verifyPlugin( plugin, session );
+        pluginDescriptor = verifyPlugin( plugin, session, project );
-    private PluginDescriptor verifyPlugin( Plugin plugin, MavenSession session )
+    private PluginDescriptor verifyPlugin( Plugin plugin, MavenSession session, MavenProject project )
-            MavenProject project = session.getProject();
-    private MojoDescriptor getMojoDescriptor( String task, MavenSession session )
+    private MojoDescriptor getMojoDescriptor( String task, MavenSession session, MavenProject project )
-            pluginDescriptor = pluginManager.verifyPlugin( prefix );
+            String id = pluginManager.getPluginIdFromPrefix( prefix );
-            if ( pluginDescriptor == null )
+            if ( id == null )
+            else
+            {
+                tok = new StringTokenizer( id, ":" );
+                groupId = tok.nextToken();
+                artifactId = tok.nextToken();
+                version = tok.nextToken();
+            }
+
+            for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+            {
+                Plugin plugin = (Plugin) i.next();
+
+                if ( plugin.getGroupId().equals( groupId ) && plugin.getArtifactId().equals( artifactId ) )
+                {
+                    version = plugin.getVersion();
+                    break;
+                }
+            }
-        MavenProject project = session.getProject();

INS31 MOV43 INS31 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS43 MOV43 INS43 INS43 INS8 UPD42 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 MOV43 INS43 INS43 INS8 INS44 INS43 INS44 INS44 INS44 INS44 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 MOV60 MOV24 INS25 INS21 INS43 INS42 INS43 INS42 MOV43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS24 INS25 INS21 INS43 INS42 INS42 INS43 INS42 INS65 MOV43 INS42 INS43 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS43 INS59 INS58 MOV32 INS8 INS27 INS8 INS32 INS42 MOV32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV21 INS60 INS42 INS42 INS14 MOV43 INS59 INS60 INS60 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS60 INS24 INS32 INS43 MOV43 INS59 INS43 INS42 INS32 INS43 INS59 INS43 INS59 INS32 UPD42 MOV42 INS42 INS43 INS59 INS8 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 UPD42 INS21 INS21 INS21 INS21 INS43 INS59 INS42 INS42 MOV60 INS25 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS43 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS7 INS7 INS7 INS7 INS42 INS42 INS32 INS27 INS8 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS21 INS10 INS42 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60