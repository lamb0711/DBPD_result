o Enabled reuse of MavenCli for embedded execution during the ITs

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@823736 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.io.PrintStream;
-    
+
+    private DefaultPlexusContainer container;
+
+    private PrintStreamLogger logger;
+
-        ClassWorld classWorld = new ClassWorld( "plexus.core", Thread.currentThread().getContextClassLoader() );
-
-        int result = main( args, classWorld );
+        int result = main( args, null );
-        MavenCli cli = new MavenCli();
+        MavenCli cli = new MavenCli( classWorld );
-        return cli.doMain( args, classWorld );
+        return cli.doMain( args, null, System.out, System.err );
-    public int doMain( String[] args, ClassWorld classWorld )
+    public MavenCli()
+        this( null );
+    }
+
+    public MavenCli( ClassWorld classWorld )
+    {
+        if ( classWorld == null )
+        {
+            classWorld = new ClassWorld( "plexus.core", Thread.currentThread().getContextClassLoader() );
+        }
+
+        try
+        {
+            ContainerConfiguration cc =
+                new DefaultContainerConfiguration().setClassWorld( classWorld ).setName( "embedder" );
+
+            container = new DefaultPlexusContainer( cc );
+        }
+        catch ( PlexusContainerException e )
+        {
+            throw new IllegalStateException( "Could not start component container: " + e.getMessage(), e );
+        }
+
+        logger = new PrintStreamLogger( System.out );
+
+        container.setLoggerManager( new MavenLoggerManager( logger ) );
+    }
+
+    public int doMain( String[] args, String workingDirectory, PrintStream stdout, PrintStream stderr )
+    {
+        if ( stdout == null )
+        {
+            stdout = System.out;
+        }
+        if ( stderr == null )
+        {
+            stderr = System.err;
+        }
+        if ( workingDirectory == null )
+        {
+            workingDirectory = System.getProperty( "user.dir" );
+        }
+
-            System.err.println( "Unable to parse command line options: " + e.getMessage() );
-            cliManager.displayHelp();
+            stderr.println( "Unable to parse command line options: " + e.getMessage() );
+            cliManager.displayHelp( stdout );
-            cliManager.displayHelp();
+            cliManager.displayHelp( stdout );
-            CLIReportingUtils.showVersion();
+            CLIReportingUtils.showVersion( stdout );
+        PrintStream fileStream = null;
+
+        if ( commandLine.hasOption( CLIManager.LOG_FILE ) )
+        {
+            File logFile = new File( commandLine.getOptionValue( CLIManager.LOG_FILE ) );
+            logFile = CLIRequestUtils.resolveFile( logFile, workingDirectory );
+
+            try
+            {
+                fileStream = new PrintStream( logFile );
+                logger.setStream( fileStream );
+            }
+            catch ( FileNotFoundException e )
+            {
+                stderr.println( e );
+                logger.setStream( stdout );
+            }
+        }
+        else
+        {
+            logger.setStream( stdout );
+        }
+
-        DefaultPlexusContainer container;
-        
-        Logger logger;
-        
-            ContainerConfiguration cc = new DefaultContainerConfiguration()
-                .setClassWorld( classWorld )
-                .setName( "embedder" );
-
-            container = new DefaultPlexusContainer( cc );
-
-            logger = container.getLogger();
-
-            if ( commandLine.hasOption( CLIManager.LOG_FILE ) )
-            {
-                File logFile = new File( commandLine.getOptionValue( CLIManager.LOG_FILE ) ).getAbsoluteFile();
-
-                logger = new FileLogger( logFile );
-
-                container.setLoggerManager( new MavenLoggerManager( logger ) );
-            }
-            
-        catch ( PlexusContainerException e )
-        {
-            CLIReportingUtils.showError( new ConsoleLogger( Logger.LEVEL_ERROR, Maven.class.getName() ), "Unable to start the embedder: ", e, showErrors );
-
-            return 1;
-        }
-        Configuration configuration = buildEmbedderConfiguration( commandLine );        
+        Configuration configuration = buildEmbedderConfiguration( commandLine, workingDirectory );        
-        CLIRequestUtils.populateRequest( request, commandLine, debug, quiet, showErrors );
+        CLIRequestUtils.populateRequest( request, commandLine, workingDirectory, debug, quiet, showErrors );
-            CLIReportingUtils.showVersion();
+            CLIReportingUtils.showVersion( stdout );
-                System.out.println( cipher.encryptAndDecorate( passwd,
-                                                               DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
+                stdout.println( cipher.encryptAndDecorate( passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
-                    System.err.println( "Master password is not set in the setting security file" );
+                    stderr.println( "Master password is not set in the setting security file" );
-                System.out.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
+                stdout.println( cipher.encryptAndDecorate( passwd, masterPasswd ) );
-            System.err.println( "FATAL ERROR: " + "Error encrypting password: " + e.getMessage() );
+            stderr.println( "FATAL ERROR: " + "Error encrypting password: " + e.getMessage() );
-        if ( result.hasExceptions() )
+        try
-            ExceptionSummary es = result.getExceptionSummary();
+            if ( result.hasExceptions() )
+            {
+                ExceptionSummary es = result.getExceptionSummary();
-            if ( es == null )
-            {
-                logger.error( "", result.getExceptions().get( 0 ) );
-            }
-            else
-            {
-                if ( showErrors )
+                if ( es == null )
-                    logger.error( es.getMessage(), es.getException() );
+                    logger.error( "", result.getExceptions().get( 0 ) );
-                    logger.error( es.getMessage() );
+                    if ( showErrors )
+                    {
+                        logger.error( es.getMessage(), es.getException() );
+                    }
+                    else
+                    {
+                        logger.error( es.getMessage() );
+                    }
-            }
-            if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( request.getReactorFailureBehavior() ) )
-            {
-                logger.info( "Build failures were ignored." );
+                if ( MavenExecutionRequest.REACTOR_FAIL_NEVER.equals( request.getReactorFailureBehavior() ) )
+                {
+                    logger.info( "Build failures were ignored." );
-                return 0;
+                    return 0;
+                }
+                else
+                {
+                    return 1;
+                }
-                return 1;
+                return 0;
-        else
+        finally
-            return 0;
+            if ( fileStream != null )
+            {
+                fileStream.close();
+            }
-    private Configuration buildEmbedderConfiguration( CommandLine commandLine )
+    private Configuration buildEmbedderConfiguration( CommandLine commandLine, String workingDirectory )
+            userSettingsFile = CLIRequestUtils.resolveFile( userSettingsFile, workingDirectory );
+            globalSettingsFile = CLIRequestUtils.resolveFile( globalSettingsFile, workingDirectory );
+

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS83 MOV43 MOV59 INS83 INS43 MOV59 INS8 INS83 INS42 INS8 INS83 INS42 MOV44 INS8 INS44 INS44 INS44 MOV60 INS44 INS42 INS60 MOV21 INS17 INS25 INS54 INS21 MOV21 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS25 INS25 INS54 INS54 INS43 INS42 INS39 INS59 MOV43 INS33 INS27 MOV8 INS8 INS12 INS7 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS27 INS8 UPD43 INS59 MOV32 INS8 INS8 INS8 MOV12 INS8 INS8 INS42 INS42 INS32 INS33 INS40 INS40 INS42 INS33 INS21 MOV60 MOV21 MOV44 INS8 INS42 INS14 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 MOV41 MOV41 UPD42 INS42 INS33 MOV60 MOV21 INS54 INS21 MOV21 INS42 MOV25 INS25 INS21 INS21 INS42 INS42 INS33 MOV43 INS42 INS7 INS53 INS43 INS40 INS7 INS7 INS7 INS8 INS12 INS32 INS42 INS27 INS8 INS7 INS7 INS42 MOV14 INS14 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS42 INS42 MOV14 UPD42 MOV21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS32 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS43 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 MOV42 INS42 INS42 UPD42 MOV42 INS42 UPD42 INS42 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL60 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL43 DEL40 DEL43 DEL57 DEL42 DEL32 DEL14 DEL45 DEL32 DEL21 DEL34 DEL41 DEL8 DEL12 DEL54 DEL40 DEL40 DEL40 DEL40