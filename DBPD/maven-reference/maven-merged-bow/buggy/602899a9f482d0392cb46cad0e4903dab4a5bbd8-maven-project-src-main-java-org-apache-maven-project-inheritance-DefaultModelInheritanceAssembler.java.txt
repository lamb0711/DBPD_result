[MNG-2006] Changed the model inheritance assembler to allow the project builder to pass in a child path adjustment String, which is the module path of the child in the parent POM. This can be used to realign the URLs of the child POM in addition to simply appending the child path to the parent.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@379247 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.StringTokenizer;
+import java.util.TreeMap;
+
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.TreeMap;
-
-        assembleModelInheritance( dest, source, false );
+        assembleModelInheritance( dest, source, null, false );
+    }
+
+    public void assembleModelInheritance( Model child, Model parent, String childPathAdjustment )
+    {
+        assembleModelInheritance( child, parent, childPathAdjustment, true );
-        assembleModelInheritance( child, parent, true );
+        assembleModelInheritance( child, parent, null, true );
-    private void assembleModelInheritance( Model child, Model parent, boolean appendPaths )
+    private void assembleModelInheritance( Model child, Model parent, String childPathAdjustment, boolean appendPaths )
-                child.setUrl( appendPath( parent.getUrl(), child.getArtifactId(), appendPaths ) );
+                child.setUrl( appendPath( parent.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths ) );
-        assembleDistributionInheritence( child, parent, appendPaths );
+        assembleDistributionInheritence( child, parent, childPathAdjustment, appendPaths );
-        assembleScmInheritance( child, parent, appendPaths );
+        assembleScmInheritance( child, parent, childPathAdjustment, appendPaths );
-    private void assembleScmInheritance( Model child, Model parent, boolean appendPaths )
+    private void assembleScmInheritance( Model child, Model parent, String childPathAdjustment, boolean appendPaths )
-                childScm.setConnection( appendPath( parentScm.getConnection(), child.getArtifactId(), appendPaths ) );
+                childScm.setConnection( appendPath( parentScm.getConnection(), child.getArtifactId(), childPathAdjustment, appendPaths ) );
-                        appendPath( parentScm.getDeveloperConnection(), child.getArtifactId(), appendPaths ) );
+                        appendPath( parentScm.getDeveloperConnection(), child.getArtifactId(), childPathAdjustment, appendPaths ) );
-                childScm.setUrl( appendPath( parentScm.getUrl(), child.getArtifactId(), appendPaths ) );
+                childScm.setUrl( appendPath( parentScm.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths ) );
-    private void assembleDistributionInheritence( Model child, Model parent, boolean appendPaths )
+    private void assembleDistributionInheritence( Model child, Model parent, String childPathAdjustment, boolean appendPaths )
-                        site.setUrl( appendPath( site.getUrl(), child.getArtifactId(), appendPaths ) );
+                        site.setUrl( appendPath( site.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths ) );
-    private String appendPath( String url, String path, boolean appendPaths )
+    protected String appendPath( String parentPath, String childPath, String pathAdjustment, boolean appendPaths )
+        List pathFragments = new ArrayList();
+        
+        String rootPath = parentPath;
+
+        String protocol = null;
+        int protocolIdx = rootPath.indexOf( "://" );
+        
+        if ( protocolIdx > -1 )
+        {
+            protocol = rootPath.substring( 0, protocolIdx + 3 );
+            rootPath = rootPath.substring( protocolIdx + 3 );
+        }
+        
+        pathFragments.add( rootPath );
+        
-            if ( url.endsWith( "/" ) )
+            if ( pathAdjustment != null )
-                return url + path;
+                pathFragments.add( pathAdjustment );
-            else
-            {
-                return url + "/" + path;
-            }
+            
+            pathFragments.add( childPath );
-        else
+        
+        StringBuffer cleanedPath = new StringBuffer();
+        
+        if ( protocol != null )
-            return url;
+            cleanedPath.append( protocol );
+        
+        if ( rootPath.startsWith( "/" ) )
+        {
+            cleanedPath.append( '/' );
+        }
+        
+        String lastToken = null;
+        String currentToken = null;
+        
+        for ( Iterator it = pathFragments.iterator(); it.hasNext(); )
+        {
+            String pathFragment = (String) it.next();
+            
+            StringTokenizer tokens = new StringTokenizer( pathFragment, "/" );
+            
+            while( tokens.hasMoreTokens() )
+            {
+                lastToken = currentToken;
+                currentToken = tokens.nextToken();
+                
+                if ( "..".equals( currentToken ) )
+                {
+                    // trim the previous path part off...
+                    cleanedPath.setLength( cleanedPath.length() - ( lastToken.length() + 1 ) );
+                }
+                else if ( !".".equals( currentToken ) )
+                {
+                    // don't worry about /./ self-references.
+                    cleanedPath.append( currentToken ).append( '/' );
+                }
+            }
+        }
+        
+        if ( !childPath.endsWith( "/" ) && appendPaths )
+        {
+            cleanedPath.setLength( cleanedPath.length() - 1 );
+        }
+        
+        return cleanedPath.toString();

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 INS31 MOV44 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS44 INS44 UPD83 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 UPD42 UPD42 INS43 INS42 INS60 INS60 INS60 INS60 INS25 INS21 INS25 INS60 INS25 INS25 INS60 INS60 INS24 INS25 MOV41 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS32 MOV42 INS8 INS43 INS59 INS27 INS8 MOV32 INS8 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS27 INS8 INS32 INS33 INS42 INS42 INS42 INS42 INS33 INS9 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS38 INS21 INS21 INS42 INS42 INS42 INS25 INS21 INS42 INS42 INS14 INS42 INS33 INS21 UPD42 UPD42 INS21 INS42 INS42 INS33 INS42 INS42 INS33 INS43 INS59 INS42 INS42 INS60 INS60 INS61 INS38 UPD42 MOV42 INS21 INS42 INS42 INS43 INS42 INS42 INS45 INS34 INS7 INS7 INS27 INS8 INS32 INS43 INS32 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS21 INS21 INS25 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS34 INS27 INS42 INS42 INS27 INS32 INS43 INS32 INS43 INS42 INS45 INS7 INS7 INS32 MOV8 INS25 INS32 INS34 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS21 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS27 INS45 INS42 INS42 INS32 INS32 INS36 INS32 INS42 INS13 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 DEL42 DEL42 DEL27 DEL41 DEL42 DEL42 DEL45 DEL27 DEL41 DEL8 DEL25 DEL8 DEL8 DEL25