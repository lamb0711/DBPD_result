Working on: MNG-576

o Implemented plan from my comments on MNG-576 for looking up lifecycle mappings within plugins.

o Fixed subtle bug in DefaultWagonManager for verifying checksums, where the destination file was being used to verify the checksum rather than the recently download temp destination.

o Fixed the DefaultRepositoryMetadataManager.resolve(..) method to allow the locally-installed metadata to be used if it is newer than the one resolved from the repository.

o Moved the lifecycle mappings for the EJB and WAR plugins out to META-INF/plexus/components.xml in the respective plugin's src/main/resources directory. it0016 and it0017 still pass.

o Changed the distributionManagement repository for maven-plugins/pom.xml to have id of 'central-plugins' and then added a normal artifact repository definition for central-plugins to that pom, to allow locally-installed repository metadata for the plugins to be put in the right place (and these builds should have access to the central plugin repo anyway).

o Changed the DefaultPluginMappingBuilder to only warn when plugins.xml for a particular plugin group is missing.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@216273 13f79535-47bb-0310-9956-ffa450edef68

-        Map mappings;
-        String packaging = project.getPackaging();
-        try
-        {
-            LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
-            mappings = m.getPhases();
-        }
-        catch ( ComponentLookupException e )
-        {
-            getLogger().error( "No lifecycle mapping for type '" + packaging + "': using defaults" );
-            mappings = defaultPhases;
-        }
+        Map mappings = findMappingsForLifecycle( session, project );
-        boolean finished = false;
-        for ( Iterator i = phases.iterator(); i.hasNext() && !finished; )
+        for ( Iterator i = phases.iterator(); i.hasNext(); )
-                finished = true;
+                break;
+    private Map findMappingsForLifecycle( MavenSession session, MavenProject project ) 
+        throws LifecycleExecutionException
+    {
+        Map mappings;
+        
+        String packaging = project.getPackaging();
+        try
+        {
+            PluginMappingManager mappingManager = getPluginMappingManager( session, project );
+
+            Plugin pluginContainingLifecycleMapping = mappingManager.getByPackaging( packaging );
+
+            LifecycleMapping m = null;
+
+            if ( pluginContainingLifecycleMapping != null )
+            {
+                try
+                {
+                    pluginManager.verifyPlugin( pluginContainingLifecycleMapping, project, session.getSettings(), session.getLocalRepository() );
+                    
+                    m = (LifecycleMapping) pluginManager.getPluginComponent( pluginContainingLifecycleMapping,
+                                                                             LifecycleMapping.ROLE, packaging );
+
+                    mappings = m.getPhases();
+                }
+                catch ( ComponentLookupException e )
+                {
+                    throw new LifecycleExecutionException( "Plugin: " + pluginContainingLifecycleMapping.getKey()
+                        + " declares lifecycle mapping for: \'" + packaging
+                        + "\', but does not appear to contain the actual mapping among its component descriptors.", e );
+                }
+            }
+            else
+            {
+                try
+                {
+                    m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
+
+                    mappings = m.getPhases();
+                }
+                catch ( ComponentLookupException e )
+                {
+                    getLogger().warn(
+                                      "Lifecycle mappings not found for packaging: \'" + packaging
+                                          + "\'. Using defaults." );
+
+                    getLogger().debug( "Lifecycle mappings not found for packaging: \'" + packaging + "\'.", e );
+
+                    mappings = defaultPhases;
+                }
+            }
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new LifecycleExecutionException( "Cannot load plugin which defines lifecycle mappings for: \'" + packaging + "\'.", e );
+        }
+        catch ( PluginVersionResolutionException e )
+        {
+            throw new LifecycleExecutionException( "Cannot load plugin which defines lifecycle mappings for: \'" + packaging + "\'.", e );
+        }
+        catch ( PluginManagerException e )
+        {
+            throw new LifecycleExecutionException( "Cannot load lifecycle mappings.", e );
+        }
+        
+        return mappings;
+    }
+
+    private PluginMappingManager getPluginMappingManager( MavenSession session, MavenProject project ) 
+        throws LifecycleExecutionException
+    {
+        PluginMappingManager mappingManager = session.getPluginMappingManager();
+
+        // don't reassemble the plugin mappings if the session has already been configured with them.
+        if ( mappingManager == null )
+        {
+            try
+            {
+                List pluginGroupIds = session.getSettings().getPluginGroups();
+                List pluginRepositories = project.getPluginArtifactRepositories();
+                ArtifactRepository localRepository = session.getLocalRepository();
+
+                mappingManager = pluginMappingBuilder.loadPluginMappings( pluginGroupIds, pluginRepositories,
+                                                                          localRepository );
+
+                // lazily configure this on the session.
+                session.setPluginMappingManager( mappingManager );
+            }
+            catch ( RepositoryMetadataManagementException e )
+            {
+                throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
+            }
+            catch ( PluginMappingManagementException e )
+            {
+                throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
+            }
+        }
+        
+        return mappingManager;
+    }
+
-            
+
-                
+
-                PluginMappingManager mappingManager = session.getPluginMappingManager();
-
-                // don't reassemble the plugin mappings if the session has already been configured with them.
-                if ( mappingManager == null )
-                {
-                    try
-                    {
-                        List pluginGroupIds = session.getSettings().getPluginGroups();
-                        List pluginRepositories = project.getPluginArtifactRepositories();
-                        ArtifactRepository localRepository = session.getLocalRepository();
-
-                        mappingManager = pluginMappingBuilder.loadPluginMappings( pluginGroupIds, pluginRepositories,
-                                                                                  localRepository );
-                        
-                        // lazily configure this on the session.
-                        session.setPluginMappingManager( mappingManager );
-                    }
-                    catch ( RepositoryMetadataManagementException e )
-                    {
-                        throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
-                    }
-                    catch ( PluginMappingManagementException e )
-                    {
-                        throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
-                    }
-                }
+                PluginMappingManager mappingManager = getPluginMappingManager( session, project );
-            
+
-        
+
-                
+

INS31 INS31 MOV60 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 MOV8 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV60 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS43 MOV32 INS42 INS42 INS8 INS12 INS12 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS60 INS60 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 MOV43 INS59 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS8 INS10 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS33 INS54 MOV54 INS42 INS14 INS42 INS14 INS42 INS14 INS60 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS43 INS27 INS42 INS43 INS27 INS42 INS43 INS45 INS42 INS43 INS59 INS21 INS21 INS21 INS44 INS8 INS21 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS7 INS7 INS43 INS42 INS53 INS7 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS11 INS42 INS32 INS42 INS14 INS42 MOV11 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS27 INS42 UPD42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS32 INS45 INS42 INS45 UPD45 UPD45 INS42 INS45 INS42 INS45 INS42 INS42 DEL39 DEL42 DEL9 DEL42 DEL38 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL59 DEL60