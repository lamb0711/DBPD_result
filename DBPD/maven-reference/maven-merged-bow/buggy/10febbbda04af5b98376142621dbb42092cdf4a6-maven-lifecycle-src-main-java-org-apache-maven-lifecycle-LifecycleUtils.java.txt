Replaced old build-plan mess with a single recursive plan instance that tracks direct invocation forks as well as lifecycle forks. All unit tests run, and I'm running integration tests now, to see if this fixes it0013.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@541938 13f79535-47bb-0310-9956-ffa450edef68

-    public static void setOrigin( LifecycleBindings bindings, String origin )
+    public static void setOrigin( final LifecycleBindings bindings, final String origin )
-    public static List getMojoBindingListForLifecycle( String stopPhase, LifecycleBindings bindings )
+    public static List getMojoBindingListForLifecycle( final String stopPhase, final LifecycleBindings bindings )
-    public static List getMojoBindingListForLifecycle( String stopPhase, LifecycleBinding lifecycle )
+    public static List getMojoBindingListForLifecycle( final String stopPhase, final LifecycleBinding lifecycle )
-            if ( phaseBindings != null && !phaseBindings.isEmpty() )
+            if ( ( phaseBindings != null ) && !phaseBindings.isEmpty() )
-    public static LifecycleBinding findLifecycleBindingForPhase( String phaseName, LifecycleBindings lifecycles )
+    public static LifecycleBinding findLifecycleBindingForPhase( final String phaseName,
+                                                                 final LifecycleBindings lifecycles )
-    public static void removeMojoBinding( String phaseName, MojoBinding mojoBinding, LifecycleBinding lifecycleBinding,
-                                          boolean considerExecutionId )
+    public static void removeMojoBinding( final String phaseName, final MojoBinding mojoBinding,
+                                          final LifecycleBinding lifecycleBinding, final boolean considerExecutionId )
-                + lifecycleBinding.getId() );
+                            + lifecycleBinding.getId() );
-            String targetKey = createMojoBindingKey( mojoBinding, considerExecutionId );
+            String targetKey = MojoBindingUtils.createMojoBindingKey( mojoBinding, considerExecutionId );
-                String candidateKey = createMojoBindingKey( candidate, considerExecutionId );
+                String candidateKey = MojoBindingUtils.createMojoBindingKey( candidate, considerExecutionId );
-    public static void addMojoBinding( String phaseName, MojoBinding mojoBinding, LifecycleBinding lifecycleBinding )
-        throws NoSuchPhaseException
+    public static void addMojoBinding( final String phaseName, final MojoBinding mojoBinding,
+                                       final LifecycleBinding lifecycleBinding ) throws NoSuchPhaseException
-                + lifecycleBinding.getId() );
+                            + lifecycleBinding.getId() );
-    public static void addMojoBinding( String phaseName, MojoBinding mojo, LifecycleBindings bindings )
+    public static void addMojoBinding( final String phaseName, final MojoBinding mojo, final LifecycleBindings bindings )
-    public static LifecycleBindings mergeBindings( LifecycleBindings existingBindings, LifecycleBindings newBindings,
-                                                   LifecycleBindings defaultBindings, boolean mergeConfigIfExecutionIdMatches )
+    public static LifecycleBindings mergeBindings( final LifecycleBindings existingBindings,
+                                                   final LifecycleBindings newBindings,
+                                                   final LifecycleBindings defaultBindings,
+                                                   final boolean mergeConfigIfExecutionIdMatches )
-    public static LifecycleBindings mergeBindings( LifecycleBindings existingBindings, LifecycleBindings newBindings,
-                                                   LifecycleBindings defaultBindings, boolean mergeConfigIfExecutionIdMatches,
-                                                   boolean reverseConfigMergeDirection )
+    public static LifecycleBindings mergeBindings( final LifecycleBindings existingBindings,
+                                                   final LifecycleBindings newBindings,
+                                                   final LifecycleBindings defaultBindings,
+                                                   final boolean mergeConfigIfExecutionIdMatches,
+                                                   final boolean reverseConfigMergeDirection )
-        if ( defaultBindings != null && isNullOrEmpty( cb ) )
+        if ( ( defaultBindings != null ) && isNullOrEmpty( cb ) )
-        if ( defaultBindings != null && isNullOrEmpty( bb ) )
+        if ( ( defaultBindings != null ) && isNullOrEmpty( bb ) )
-        if ( defaultBindings != null && isNullOrEmpty( sb ) )
+        if ( ( defaultBindings != null ) && isNullOrEmpty( sb ) )
-                    if ( phase != null && phase.getBindings() != null && !phase.getBindings().isEmpty() )
+                    if ( ( phase != null ) && ( phase.getBindings() != null ) && !phase.getBindings().isEmpty() )
-                                MojoBinding matchingBinding = findMatchingMojoBinding( mojoBinding, existingBindings, true );
+                                MojoBinding matchingBinding =
+                                    findMatchingMojoBinding( mojoBinding, existingBindings, true );
-                                    
+
-                                        configuration = Xpp3Dom.mergeXpp3Dom( existingConfig, (Xpp3Dom) mojoBinding.getConfiguration() );
+                                        configuration =
+                                            Xpp3Dom.mergeXpp3Dom( existingConfig,
+                                                                  (Xpp3Dom) mojoBinding.getConfiguration() );
-                                        configuration = Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) mojoBinding.getConfiguration(), existingConfig );
+                                        configuration =
+                                            Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) mojoBinding.getConfiguration(),
+                                                                  existingConfig );
-                                    
-                                    if ( mojoBinding.getOrigin() == null && matchingBinding.getOrigin() != null )
+
+                                    if ( ( mojoBinding.getOrigin() == null ) && ( matchingBinding.getOrigin() != null ) )
-                                    
+
-                                    
+
-                                        IllegalStateException error = new IllegalStateException(
-                                                                                                 e.getMessage()
-                                                                                                     + "\nSomething strange is going on. Merging should not encounter such inconsistencies." );
+                                        IllegalStateException error =
+                                            new IllegalStateException(
+                                                                       e.getMessage()
+                                                                                       + "\nSomething strange is going on. Merging should not encounter such inconsistencies." );
-                                IllegalArgumentException error = new IllegalArgumentException(
-                                                                                               "Project bindings are invalid. Reason: "
-                                                                                                   + e.getMessage() );
+                                IllegalArgumentException error =
+                                    new IllegalArgumentException( "Project bindings are invalid. Reason: "
+                                                    + e.getMessage() );
-    private static boolean isNullOrEmpty( LifecycleBinding binding )
+    private static boolean isNullOrEmpty( final LifecycleBinding binding )
-        
+
-            
+
-        
+
-    public static MojoBinding findMatchingMojoBinding( MojoBinding mojoBinding, LifecycleBindings inBindings,
-                                                       boolean considerExecutionId )
+    public static MojoBinding findMatchingMojoBinding( final MojoBinding mojoBinding,
+                                                       final LifecycleBindings inBindings,
+                                                       final boolean considerExecutionId )
-        String key = createMojoBindingKey( mojoBinding, considerExecutionId );
+        String key = MojoBindingUtils.createMojoBindingKey( mojoBinding, considerExecutionId );
-    private static Map mapMojoBindingsByKey( LifecycleBindings bindings, boolean considerExecutionId )
+    private static Map mapMojoBindingsByKey( final LifecycleBindings bindings, final boolean considerExecutionId )
-                            byKey.put( createMojoBindingKey( mojoBinding, considerExecutionId ), mojoBinding );
+                            byKey.put( MojoBindingUtils.createMojoBindingKey( mojoBinding, considerExecutionId ),
+                                       mojoBinding );
-    public static void removeMojoBindings( List toRemove, LifecycleBindings bindings, boolean considerExecutionId )
-        throws NoSuchPhaseException
+    public static void removeMojoBindings( final List toRemove, final LifecycleBindings bindings,
+                                           final boolean considerExecutionId ) throws NoSuchPhaseException
-    public static void removeMojoBindings( List toRemove, LifecycleBinding removeFrom, boolean considerExecutionId )
-        throws NoSuchPhaseException
+    public static void removeMojoBindings( final List toRemove, final LifecycleBinding removeFrom,
+                                           final boolean considerExecutionId ) throws NoSuchPhaseException
-            targets.add( createMojoBindingKey( binding, considerExecutionId ) );
+            targets.add( MojoBindingUtils.createMojoBindingKey( binding, considerExecutionId ) );
-                String key = createMojoBindingKey( binding, considerExecutionId );
+                String key = MojoBindingUtils.createMojoBindingKey( binding, considerExecutionId );
-    public static String createMojoBindingKey( MojoBinding mojoBinding, boolean considerExecutionId )
-    {
-        String key = mojoBinding.getGroupId() + ":" + mojoBinding.getArtifactId() + ":" + mojoBinding.getGoal();
-
-        if ( considerExecutionId )
-        {
-            key += ":" + mojoBinding.getExecutionId();
-        }
-
-        return key;
-    }
-
-    public static LifecycleBindings cloneBindings( LifecycleBindings bindings )
+    public static LifecycleBindings cloneBindings( final LifecycleBindings bindings )
-    public static LifecycleBinding cloneBinding( LifecycleBinding binding )
+    public static LifecycleBinding cloneBinding( final LifecycleBinding binding )
-                + "; cannot clone." );
+                            + "; cannot clone." );
-                    IllegalStateException error = new IllegalStateException( e.getMessage()
-                        + "\nSomething strange is going on. Cloning should not encounter such inconsistencies." );
+                    IllegalStateException error =
+                        new IllegalStateException(
+                                                   e.getMessage()
+                                                                   + "\nSomething strange is going on. Cloning should not encounter such inconsistencies." );
-    public static MojoBinding cloneMojoBinding( MojoBinding binding )
+    public static MojoBinding cloneMojoBinding( final MojoBinding binding )
-    public static Phase findPhaseForMojoBinding( MojoBinding mojoBinding, LifecycleBindings lifecycleBindings,
-                                                 boolean considerExecutionId )
+    public static Phase findPhaseForMojoBinding( final MojoBinding mojoBinding,
+                                                 final LifecycleBindings lifecycleBindings,
+                                                 final boolean considerExecutionId )
-        String targetKey = createMojoBindingKey( mojoBinding, considerExecutionId );
+        String targetKey = MojoBindingUtils.createMojoBindingKey( mojoBinding, considerExecutionId );
-                    String key = createMojoBindingKey( candidate, considerExecutionId );
+                    String key = MojoBindingUtils.createMojoBindingKey( candidate, considerExecutionId );
-    public static boolean isMojoBindingPresent( MojoBinding binding, List candidates, boolean considerExecutionId )
+    public static boolean isMojoBindingPresent( final MojoBinding binding, final List candidates,
+                                                final boolean considerExecutionId )
-        String key = createMojoBindingKey( binding, considerExecutionId );
+        String key = MojoBindingUtils.createMojoBindingKey( binding, considerExecutionId );
-            String candidateKey = createMojoBindingKey( candidate, considerExecutionId );
+            String candidateKey = MojoBindingUtils.createMojoBindingKey( candidate, considerExecutionId );
-    public static boolean isValidPhaseName( String phaseName )
+    public static boolean isValidPhaseName( final String phaseName )
-            
+
-        
+
-        
+
-            
+
-        
+
-        
+
-        
+
-        
+
-        
+
-        
+
-        
+
-        
+
-        
+
-        
+
+
+    /**
+     * @deprecated Use {@link MojoBindingUtils#createMojoBindingKey(MojoBinding, boolean)} instead.
+     */
+    public static String createMojoBindingKey( final MojoBinding mojoBinding, final boolean considerExecutionId )
+    {
+        return MojoBindingUtils.createMojoBindingKey( mojoBinding, considerExecutionId );
+    }

MOV31 MOV44 INS44 INS44 MOV44 MOV44 INS44 MOV44 INS44 MOV44 MOV44 INS29 INS44 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS43 INS42 INS83 UPD42 INS83 UPD42 INS83 MOV43 INS42 INS83 INS83 UPD42 INS83 INS83 UPD42 INS83 INS83 INS83 INS83 INS83 MOV43 INS42 INS83 INS83 UPD42 INS83 INS83 MOV43 INS42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 UPD42 INS83 INS83 INS83 MOV43 INS65 INS83 INS43 INS42 INS83 INS41 INS42 MOV42 INS27 MOV27 MOV43 INS66 INS65 INS66 INS42 INS32 INS36 MOV32 INS36 INS36 MOV32 INS68 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 MOV27 MOV27 MOV27 INS42 INS42 INS42 MOV43 INS42 INS42 INS69 INS69 INS36 INS42 INS33 MOV43 INS39 MOV27 INS42 INS42 MOV43 INS42 MOV42 INS42 MOV27 INS42 INS36 INS36 MOV38 MOV27 MOV27 INS42 INS42 INS36 INS36 MOV27 MOV27 DEL42 DEL44 DEL42 DEL44 DEL27 DEL27 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41