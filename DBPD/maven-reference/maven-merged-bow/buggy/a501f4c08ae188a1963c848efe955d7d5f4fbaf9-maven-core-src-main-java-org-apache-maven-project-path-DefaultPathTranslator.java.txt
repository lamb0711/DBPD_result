o cleaning up the path translator and adding a method to allow arbitrary
  path translation given a path and basedir

o moved the component configuration for the path translator into the
  plexus.xml so that the DefaultPluginManager can use it as a dependency

o DefaultPluginManager.createParameters() will now look for parameters with
  the type = java.io.File and translate the path to the basedir of the
  project.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163543 13f79535-47bb-0310-9956-ffa450edef68

-        // build.directory
-        // build.sourceDirectory
-        // build.unitTestSourceDirectory
-        // build.aspectSourceDirectory
-        // build.resources.resource.directory
-        // unitTest.resources.resource.directory
-
-        // build.output
-        // build.testOutput
-
+        File basedir = projectFile.getParentFile();
+
-            String s = stripBasedirToken( build.getDirectory() );
+            build.setDirectory( alignToBaseDirectory( build.getDirectory(), basedir ) );
-            if ( requiresBaseDirectoryAlignment( s ) )
-            {
-                build.setDirectory( new File( projectFile.getParentFile(), s ).getPath() );
-            }
+            build.setSourceDirectory( alignToBaseDirectory( build.getSourceDirectory(), basedir ) );
-            s = stripBasedirToken( build.getSourceDirectory() );
+            build.setTestSourceDirectory( alignToBaseDirectory( build.getTestSourceDirectory(), basedir ) );
-            if ( requiresBaseDirectoryAlignment( s ) )
-            {
-                build.setSourceDirectory( new File( projectFile.getParentFile(), s ).getPath() );
-            }
-
-            s = stripBasedirToken( build.getTestSourceDirectory() );
-
-            if ( requiresBaseDirectoryAlignment( s ) )
-            {
-                build.setTestSourceDirectory( new File( projectFile.getParentFile(), s ).getPath() );
-            }
-
-            List buildResources = build.getResources();
-
-            for ( Iterator i = buildResources.iterator(); i.hasNext(); )
+            for ( Iterator i = build.getResources().iterator(); i.hasNext(); )
-                s = stripBasedirToken( resource.getDirectory() );
-
-                if ( requiresBaseDirectoryAlignment( s ) )
-                {
-                    resource.setDirectory( new File( projectFile.getParentFile(), s ).getPath() );
-                }
+                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
-            List unitTestResources = build.getTestResources();
-
-            for ( Iterator i = unitTestResources.iterator(); i.hasNext(); )
+            for ( Iterator i = build.getTestResources().iterator(); i.hasNext(); )
-                s = stripBasedirToken( resource.getDirectory() );
-
-                if ( requiresBaseDirectoryAlignment( s ) )
-                {
-                    resource.setDirectory( new File( projectFile.getParentFile(), s ).getPath() );
-                }
+                resource.setDirectory( alignToBaseDirectory( resource.getDirectory(), basedir ) );
-            s = stripBasedirToken( build.getOutputDirectory() );
+            build.setOutputDirectory( alignToBaseDirectory( build.getOutputDirectory(), basedir ) );
-            if ( requiresBaseDirectoryAlignment( s ) )
-            {
-                build.setOutputDirectory( new File( projectFile.getParentFile(), s ).getPath() );
-            }
-
-            s = stripBasedirToken( build.getTestOutputDirectory() );
-
-            if ( requiresBaseDirectoryAlignment( s ) )
-            {
-                build.setTestOutputDirectory( new File( projectFile.getParentFile(), s ).getPath() );
-            }
+            build.setTestOutputDirectory( alignToBaseDirectory( build.getTestOutputDirectory(), basedir ) );
+    public String alignToBaseDirectory( String path, File basedir )
+    {
+        String s = stripBasedirToken( path );
+
+        if ( requiresBaseDirectoryAlignment( s ) )
+        {
+            s = new File( basedir, s ).getPath();
+        }
+
+        return s;
+    }
+

INS31 INS83 INS43 INS42 INS44 INS44 INS8 INS60 INS42 MOV43 INS42 MOV43 INS42 INS60 INS25 INS41 MOV43 INS59 MOV24 INS43 INS59 MOV32 INS8 INS42 INS42 MOV32 MOV21 INS42 INS42 INS32 INS21 INS32 INS32 INS32 INS32 INS42 INS42 INS7 MOV32 MOV42 INS42 INS42 MOV32 MOV42 INS42 INS42 MOV32 MOV42 MOV59 INS42 INS42 MOV32 MOV42 INS42 INS42 MOV32 MOV42 INS42 INS32 INS42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 INS32 INS32 INS32 INS42 UPD42 INS42 UPD42 INS14 INS42 MOV32 INS42 INS42 INS42 MOV32 MOV42 MOV32 INS42 INS42 MOV32 MOV42 MOV43 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 DEL42 DEL14 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL7 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25