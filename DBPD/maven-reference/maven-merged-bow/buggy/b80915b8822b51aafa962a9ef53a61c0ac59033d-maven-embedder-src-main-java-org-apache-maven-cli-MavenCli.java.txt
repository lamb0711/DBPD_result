[MNG-3507] added color to Maven execution output messages
+import static org.apache.maven.shared.utils.logging.MessageUtils.buffer;
+
+import org.apache.maven.shared.utils.logging.MessageBuilder;
+import org.apache.maven.shared.utils.logging.MessageUtils;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
-        return cli.doMain( new CliRequest( args, classWorld ) );
+
+        MessageUtils.systemInstall();
+        int result = cli.doMain( new CliRequest( args, classWorld ) );
+        MessageUtils.systemUninstall();
+
+        return result;
-    // This supports painless invocation by the Verifier during embedded execution of the core ITs
+    /**
+     * This supports painless invocation by the Verifier during embedded execution of the core ITs.
+     * See <a href="http://maven.apache.org/shared/maven-verifier/xref/org/apache/maven/it/Embedded3xLauncher.html">
+     * <code>Embedded3xLauncher</code> in <code>maven-verifier</code></a>
+     */
+        if ( cliRequest.commandLine.hasOption( CLIManager.BATCH_MODE ) )
+        {
+            MessageUtils.setColorEnabled( false );
+        }
+
+            MessageUtils.setColorEnabled( false );
+
+
+        if ( slf4jLogger.isDebugEnabled() )
+        {
+            slf4jLogger.debug( "Message scheme: " + ( MessageUtils.isColorEnabled() ? "color" : "plain" ) );
+            if ( MessageUtils.isColorEnabled() )
+            {
+                MessageBuilder buff = MessageUtils.buffer();
+                buff.a( "Message styles: " );
+                buff.debug( "debug" ).a( ' ' );
+                buff.info( "info" ).a( ' ' );
+                buff.warning( "warning" ).a( ' ' );
+                buff.error( "error" ).a( ' ' );
+                buff.success( "success" ).a( ' ' );
+                buff.failure( "failure" ).a( ' ' );
+                buff.strong( "strong" ).a( ' ' );
+                buff.mojo( "mojo" ).a( ' ' );
+                buff.project( "project" );
+                slf4jLogger.debug( buff.toString() );
+            }
+        }
-                slf4jLogger.error( "To see the full stack trace of the errors, re-run Maven with the -e switch." );
+                slf4jLogger.error( "To see the full stack trace of the errors, re-run Maven with the "
+                    + buffer().strong( "-e" ) + " switch." );
-                slf4jLogger.error( "Re-run Maven using the -X switch to enable full debug logging." );
+                slf4jLogger.error( "Re-run Maven using the " + buffer().strong( "-X" )
+                    + " switch to enable full debug logging." );
-                    slf4jLogger.error( entry.getValue() + " " + entry.getKey() );
+                    slf4jLogger.error( buffer().strong( entry.getValue() ) + " " + entry.getKey() );
-                slf4jLogger.error( "  mvn <goals> -rf :" + project.getArtifactId() );
+                slf4jLogger.error( buffer().a( "  " ).strong( "mvn <goals> -rf :"
+                                + project.getArtifactId() ).toString() );
-                msg += " -> " + referenceKey;
+                msg += " -> " + buffer().strong( referenceKey );
-                msg += "\n-> " + referenceKey;
+                msg += "\n-> " + buffer().strong( referenceKey );
+        String currentColor = "";
-            String line = indent + lines[i].trim();
+            // add eventual current color inherited from previous line 
+            String line = currentColor + lines[i];
+
+            // look for last ANSI escape sequence to check if nextColor
+            Matcher matcher = LAST_ANSI_SEQUENCE.matcher( line );
+            String nextColor = "";
+            if ( matcher.find() )
+            {
+                nextColor = matcher.group( 1 );
+                if ( ANSI_RESET.equals( nextColor ) )
+                {
+                    // last ANSI escape code is reset: no next color
+                    nextColor = "";
+                }
+            }
+
+            // effective line, with indent and reset if end is colored
+            line = indent + line + ( "".equals( nextColor ) ? "" : ANSI_RESET );
+
+            currentColor = nextColor;
+    private static final Pattern LAST_ANSI_SEQUENCE = Pattern.compile( "(\u001B\\[[;\\d]*[ -/]*[@-~])[^\u001B]*$" );
+
+    private static final String ANSI_RESET = "\u001B\u005Bm";
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS29 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS21 INS60 INS21 INS65 INS25 MOV25 MOV25 INS25 INS60 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS39 INS59 INS32 INS42 INS66 INS66 INS66 INS32 INS8 INS32 INS8 INS43 INS59 INS42 INS42 INS45 INS42 INS42 INS42 MOV32 INS42 INS42 INS40 INS42 INS40 INS21 INS21 INS42 INS42 INS21 INS25 INS42 INS42 INS45 INS60 INS60 INS25 INS21 INS21 INS32 INS32 INS32 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS7 INS7 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS21 INS25 INS42 INS27 INS42 INS42 INS45 INS36 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD42 MOV2 INS42 INS42 INS42 INS7 INS32 INS8 INS42 INS42 INS36 INS16 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS13 INS32 INS42 INS13 INS32 INS42 INS13 INS32 INS42 INS13 INS32 INS42 INS13 INS32 INS42 INS13 INS32 INS42 INS13 INS32 INS42 INS13 INS42 INS42 INS45 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 INS16 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 MOV32 INS42 INS32 INS32 INS42 INS42 INS34 INS7 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS45 UPD45 INS42 INS42 INS32 INS42 MOV32 UPD42 MOV42 INS42 DEL8 DEL45 DEL45 DEL42 DEL42 DEL42 DEL32