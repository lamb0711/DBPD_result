PR: MNG-729
fix artifact handler instantiation when the plugin extension is declared in a project that uses that packaging itself

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@233480 13f79535-47bb-0310-9956-ffa450edef68

-        
+
-            
+
-                                     EventDispatcher dispatcher )
+                                      EventDispatcher dispatcher )
-                    
-                    getLogger().info( "This project has been banned from further executions due to previous failures." );
+
+                    getLogger().info(
+                        "This project has been banned from further executions due to previous failures." );
-                        
-                        getLogger().info( "This project has been banned from further executions due to previous failures." );
+
+                        getLogger().info(
+                            "This project has been banned from further executions due to previous failures." );
-    private void handleExecutionFailure( ReactorManager rm, MavenProject project, Exception e, String task ) 
+    private void handleExecutionFailure( ReactorManager rm, MavenProject project, Exception e, String task )
-            
+
-                
+
-            
+
-        
+
-        
+
-        
+
-        
-        String mojoIdWithVersion = pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":"
-            + pluginDescriptor.getVersion() + ":" + mojoDescriptor.getGoal();
-        
-        String mojoIdWithoutVersion = pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":"
-            + mojoDescriptor.getGoal();
-            
+
+        String mojoIdWithVersion = pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":" +
+            pluginDescriptor.getVersion() + ":" + mojoDescriptor.getGoal();
+
+        String mojoIdWithoutVersion = pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":" +
+            mojoDescriptor.getGoal();
+
-            
+
-                getLogger().warn( "Removing: " + mojoDescriptor.getGoal() + " from forked lifecycle, to prevent recursive invocation of this mojo." );
+                getLogger().warn( "Removing: " + mojoDescriptor.getGoal() +
+                    " from forked lifecycle, to prevent recursive invocation of this mojo." );
-                    
+
-                        throw new LifecycleExecutionException( "Mojo: \'" + goal + "\' requires direct invocation. It cannot be used as part of lifecycle: \'" + project.getPackaging() + "\'." );
+                        throw new LifecycleExecutionException( "Mojo: \'" + goal +
+                            "\' requires direct invocation. It cannot be used as part of lifecycle: \'" +
+                            project.getPackaging() + "\'." );
-                    
+
-                throw new LifecycleExecutionException( "Cannot find lifecycle mapping for packaging: \'" + packaging + "\'.", e );
+                throw new LifecycleExecutionException(
+                    "Cannot find lifecycle mapping for packaging: \'" + packaging + "\'.", e );
+
+                    // shudder...
+                    for ( Iterator j = map.values().iterator(); j.hasNext(); )
+                    {
+                        ArtifactHandler handler = (ArtifactHandler) j.next();
+                        if ( project.getPackaging().equals( handler.getPackaging() ) )
+                        {
+                            project.getArtifact().setArtifactHandler( handler );
+                        }
+                    }
-                
+
-                
+
-                
+
-                        throw new LifecycleExecutionException( "Mojo: \'" + goal + "\' requires direct invocation. It cannot be used as part of the lifecycle (it was included via the POM)." );
+                        throw new LifecycleExecutionException( "Mojo: \'" + goal +
+                            "\' requires direct invocation. It cannot be used as part of the lifecycle (it was included via the POM)." );
-                    
+
-        
+
-                getLogger().warn( "DEPRECATED: Mapped-prefix lookup of mojos are only supported from direct invocation. Please use specification of the form groupId:artifactId[:version]:goal instead. (Offending mojo: \'" + task + "\', invoked via: \'" + invokedVia + "\')" );
+                getLogger().warn(
+                    "DEPRECATED: Mapped-prefix lookup of mojos are only supported from direct invocation. Please use specification of the form groupId:artifactId[:version]:goal instead. (Offending mojo: \'" +
+                        task + "\', invoked via: \'" + invokedVia + "\')" );
-            
+
-            
+

INS8 MOV60 MOV21 INS24 INS58 INS32 INS8 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS42 INS11 INS32 INS42 INS32 INS21 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL8