Replaced the old profile injector code with new profile code. Merged project builders.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@748609 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.IOException;
+import java.io.*;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.apache.maven.profiles.activation.DefaultProfileActivationContext;
-import org.apache.maven.project.builder.PomInterpolatorTag;
+import org.apache.maven.project.builder.*;
+import org.apache.maven.project.builder.profile.ProfileContext;
-import org.apache.maven.shared.model.InterpolatorProperty;
+import org.apache.maven.shared.model.*;
+import org.apache.maven.shared.model.impl.DefaultModelDataSource;
+import org.codehaus.plexus.util.WriterFactory;
+import org.codehaus.plexus.util.ReaderFactory;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
-    private ProjectBuilder projectBuilder;
+    List<ModelEventListener> listeners;
-            artifactRepositories.addAll( repositorySystem.buildArtifactRepositories( projectBuilder.getSuperModel().getRepositories() ) );
+            artifactRepositories.addAll( repositorySystem.buildArtifactRepositories( getSuperModel().getRepositories() ) );
-            artifactRepositories.addAll( repositorySystem.buildArtifactRepositories( projectBuilder.getSuperModel().getRepositories() ) );
+            artifactRepositories.addAll( repositorySystem.buildArtifactRepositories( getSuperModel().getRepositories() ) );
-        Model superModel = projectBuilder.getSuperModel();
+        Model superModel = getSuperModel();
-            profileActivationContext = new DefaultProfileActivationContext( config.getExecutionProperties(), false );
+            profileActivationContext = new ProfileActivationContext( config.getExecutionProperties(), false );
-            mavenProject = projectBuilder.buildFromLocalPath( projectDescriptor, interpolatorProperties, resolver, config, this );
+            mavenProject = buildFromLocalPath( projectDescriptor, interpolatorProperties, resolver, config, this );
+
+    public PomClassicDomainModel buildModel( File pom,
+                                             Collection<InterpolatorProperty> interpolatorProperties,
+                                             PomArtifactResolver resolver )
+        throws IOException
+    {
+        return buildModel( pom, interpolatorProperties, null, null, resolver );
+    }
+
+    private PomClassicDomainModel buildModel(File pom,
+                                             Collection<InterpolatorProperty> interpolatorProperties,
+                                             Collection<String> activeProfileIds, Collection<String> inactiveProfileIds,
+                                             PomArtifactResolver resolver)
+        throws IOException
+    {
+        if ( pom == null )
+        {
+            throw new IllegalArgumentException( "pom: null" );
+        }
+
+        if ( resolver == null )
+        {
+            throw new IllegalArgumentException( "resolver: null" );
+        }
+
+        if(activeProfileIds == null)
+        {
+            activeProfileIds = new ArrayList<String>();
+        }
+        if ( inactiveProfileIds == null )
+        {
+            inactiveProfileIds = new ArrayList<String>();
+        }
+
+        List<InterpolatorProperty> properties;
+        if ( interpolatorProperties == null )
+        {
+            properties = new ArrayList<InterpolatorProperty>();
+        }
+        else
+        {
+            properties = new ArrayList<InterpolatorProperty>( interpolatorProperties );
+        }
+
+        PomClassicDomainModel domainModel = new PomClassicDomainModel( pom );
+        domainModel.setProjectDirectory( pom.getParentFile() );
+        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        domainModels.add( domainModel );
+
+        //Process Profile on most specialized child model
+        ProfileContext profileContext = new ProfileContext(new DefaultModelDataSource(domainModel.getModelProperties(),
+                PomTransformer.MODEL_CONTAINER_FACTORIES), activeProfileIds, inactiveProfileIds, properties);
+
+        Collection<ModelContainer> profileContainers = profileContext.getActiveProfiles();
+
+        for(ModelContainer mc : profileContainers)
+        {
+            List<ModelProperty> transformed = new ArrayList<ModelProperty>();
+            //transformed.add(new ModelProperty(ProjectUri.xUri, null));
+            for(ModelProperty mp : mc.getProperties())
+            {
+                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
+                        && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri) )
+                {
+                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
+                            mp.getResolvedValue()));
+                }
+            }
+            domainModels.add(new PomClassicDomainModel(transformed));
+        }
+
+        File parentFile = null;
+        int lineageCount = 0;
+        if ( domainModel.getParentId() != null )
+        {
+            List<DomainModel> mavenParents;
+            if ( isParentLocal( domainModel.getRelativePathOfParent(), pom.getParentFile() ) )
+            {
+                mavenParents =
+                    getDomainModelParentsFromLocalPath( domainModel, resolver, pom.getParentFile(), properties,
+                                                        activeProfileIds, inactiveProfileIds );
+            }
+            else
+            {
+                mavenParents =
+                    getDomainModelParentsFromRepository( domainModel, resolver, properties, activeProfileIds,
+                                                         inactiveProfileIds );
+            }
+
+            if ( mavenParents.size() > 0 )
+            {
+                PomClassicDomainModel dm = (PomClassicDomainModel) mavenParents.get( 0 );
+                parentFile = dm.getFile();
+                domainModel.setParentFile( parentFile );
+                lineageCount = mavenParents.size();
+            }
+
+            domainModels.addAll( mavenParents );
+        }
+
+        domainModels.add( convertToDomainModel( getSuperModel() ) );
+
+        PomTransformer transformer = new PomTransformer( new PomClassicDomainModelFactory() );
+
+        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_INFOS );
+
+        PomClassicDomainModel transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( domainModels,
+                                                                                                transformer,
+                                                                                                transformer,
+                                                                                                Collections.EMPTY_LIST,
+                                                                                                properties,
+                                                                                                listeners ) );
+        // Lineage count is inclusive to add the POM read in itself.
+        transformedDomainModel.setLineageCount( lineageCount + 1 );
+        transformedDomainModel.setParentFile( parentFile );
+
+        return transformedDomainModel;
+    }
+
+    private PomClassicDomainModel convertToDomainModel(Model model) throws IOException
+    {
+        if ( model == null )
+        {
+            throw new IllegalArgumentException( "model: null" );
+        }
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        Writer out = null;
+        MavenXpp3Writer writer = new MavenXpp3Writer();
+        try
+        {
+            out = WriterFactory.newXmlWriter( baos );
+            writer.write( out, model );
+        }
+        finally
+        {
+            if ( out != null )
+            {
+                out.close();
+            }
+        }
+        return new PomClassicDomainModel(new ByteArrayInputStream(baos.toByteArray()));
+    }
+
+    public MavenProject buildFromLocalPath(File pom,
+                                           Collection<InterpolatorProperty> interpolatorProperties,
+                                           PomArtifactResolver resolver,
+                                           ProjectBuilderConfiguration projectBuilderConfiguration,
+                                           MavenProjectBuilder mavenProjectBuilder)
+        throws IOException
+    {
+
+       List<String> activeProfileIds = (projectBuilderConfiguration != null &&
+                projectBuilderConfiguration.getGlobalProfileManager() != null &&
+                projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext() != null) ?
+               projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext().getExplicitlyActiveProfileIds() : new ArrayList<String>();
+
+       List<String> inactiveProfileIds =
+           ( projectBuilderConfiguration != null && projectBuilderConfiguration.getGlobalProfileManager() != null &&
+                           projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext() != null ) ?
+                           projectBuilderConfiguration.getGlobalProfileManager().getProfileActivationContext().getExplicitlyInactiveProfileIds() : new ArrayList<String>();
+
+        PomClassicDomainModel domainModel = buildModel( pom,
+                interpolatorProperties,
+                                                        activeProfileIds, inactiveProfileIds,
+                                                        resolver );
+
+        try
+        {
+            MavenProject mavenProject = new MavenProject( convertFromInputStreamToModel(domainModel.getInputStream()),
+                                                          repositorySystem,
+                                                          mavenProjectBuilder,
+                                                          projectBuilderConfiguration );
+
+            mavenProject.setParentFile( domainModel.getParentFile() );
+
+            return mavenProject;
+        }
+        catch ( InvalidRepositoryException e )
+        {
+            throw new IOException( e.getMessage() );
+        }
+    }
+
+    private static Model convertFromInputStreamToModel(InputStream inputStream) throws IOException
+    {
+
+        try
+        {
+            return new MavenXpp3Reader().read( ReaderFactory.newXmlReader( inputStream ) );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new IOException( e.getMessage() );
+        }
+
+    }
+
+    /**
+     * Returns true if the relative path of the specified parent references a pom, otherwise returns false.
+     *
+     * @param relativePath         the parent model info
+     * @param projectDirectory the project directory of the child pom
+     * @return true if the relative path of the specified parent references a pom, otherwise returns fals
+     */
+    private boolean isParentLocal( String relativePath, File projectDirectory )
+    {
+        try
+        {
+            File f = new File( projectDirectory, relativePath ).getCanonicalFile();
+
+            if ( f.isDirectory() )
+            {
+                f = new File( f, "pom.xml" );
+            }
+
+            return f.isFile();
+        }
+        catch ( IOException e )
+        {
+            return false;
+        }
+    }
+
+    private List<DomainModel> getDomainModelParentsFromRepository( PomClassicDomainModel domainModel,
+                                                                   PomArtifactResolver artifactResolver,
+                                                                   List<InterpolatorProperty> properties,
+                                                                   Collection<String> activeProfileIds,
+                                                                   Collection<String> inactiveProfileIds )
+        throws IOException
+    {
+        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+
+        String parentId = domainModel.getParentId();
+
+        if ( parentId == null )
+        {
+            return domainModels;
+        }
+
+        Artifact artifactParent = repositorySystem.createParentArtifact( domainModel.getParentGroupId(),
+                domainModel.getParentArtifactId(), domainModel.getParentVersion() );
+
+        artifactResolver.resolve( artifactParent );
+
+        PomClassicDomainModel parentDomainModel = new PomClassicDomainModel( artifactParent.getFile() );
+
+        if ( !parentDomainModel.matchesParentOf( domainModel ) )
+        {
+            logger.debug( "Parent pom ids do not match: Parent File = " + artifactParent.getFile().getAbsolutePath() +
+                ": Child ID = " + domainModel.getId() );
+            return domainModels;
+        }
+
+        domainModels.add( parentDomainModel );
+
+        //Process Profiles
+        ProfileContext profileContext = new ProfileContext(new DefaultModelDataSource(parentDomainModel.getModelProperties(),
+                PomTransformer.MODEL_CONTAINER_FACTORIES), activeProfileIds, inactiveProfileIds, properties);
+        Collection<ModelContainer> profileContainers = profileContext.getActiveProfiles();
+
+        for(ModelContainer mc : profileContainers)
+        {
+            List<ModelProperty> transformed = new ArrayList<ModelProperty>();
+            transformed.add(new ModelProperty(ProjectUri.xUri, null));
+            for(ModelProperty mp : mc.getProperties())
+            {
+                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
+                        && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri) )
+                {
+                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
+                            mp.getResolvedValue()));
+                }
+            }
+
+            domainModels.add(new PomClassicDomainModel(transformed));
+        }
+
+        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, artifactResolver, properties,
+                                                                  activeProfileIds, inactiveProfileIds ) );
+        return domainModels;
+    }
+
+    /**
+     * Returns list of domain model parents of the specified domain model. The parent domain models are part
+     *
+     * @param domainModel
+     * @param artifactResolver
+     * @param projectDirectory
+     * @return
+     * @throws IOException
+     */
+    private List<DomainModel> getDomainModelParentsFromLocalPath( PomClassicDomainModel domainModel,
+                                                                  PomArtifactResolver artifactResolver,
+                                                                  File projectDirectory,
+                                                                  List<InterpolatorProperty> properties,
+                                                                  Collection<String> activeProfileIds,
+                                                                  Collection<String> inactiveProfileIds )
+        throws IOException
+    {
+        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+
+        String parentId = domainModel.getParentId();
+
+        if ( parentId == null )
+        {
+            return domainModels;
+        }
+
+        File parentFile = new File( projectDirectory, domainModel.getRelativePathOfParent() ).getCanonicalFile();
+        if ( parentFile.isDirectory() )
+        {
+            parentFile = new File( parentFile.getAbsolutePath(), "pom.xml" );
+        }
+
+        if ( !parentFile.isFile() )
+        {
+            throw new IOException( "File does not exist: File = " + parentFile.getAbsolutePath() );
+        }
+
+        PomClassicDomainModel parentDomainModel = new PomClassicDomainModel( parentFile );
+        parentDomainModel.setProjectDirectory( parentFile.getParentFile() );
+
+        //Process Profiles
+        ProfileContext profileContext = new ProfileContext(new DefaultModelDataSource(parentDomainModel.getModelProperties(),
+                PomTransformer.MODEL_CONTAINER_FACTORIES), activeProfileIds, inactiveProfileIds, properties);
+        Collection<ModelContainer> profileContainers = profileContext.getActiveProfiles();
+
+        for(ModelContainer mc : profileContainers)
+        {
+            List<ModelProperty> transformed = new ArrayList<ModelProperty>();
+            transformed.add(new ModelProperty(ProjectUri.xUri, null));
+            for(ModelProperty mp : mc.getProperties())
+            {
+                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
+                    && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri))
+                {
+                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
+                            mp.getResolvedValue()));
+                }
+            }
+            domainModels.add(new PomClassicDomainModel(transformed));
+        }
+
+        if ( !parentDomainModel.matchesParentOf( domainModel ) )
+        {
+            logger.info( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = "
+                    + parentDomainModel.getId() + ", Child ID = " + domainModel.getId() + ", Expected Parent ID = "
+                    + domainModel.getParentId() );
+
+            List<DomainModel> parentDomainModels =
+                getDomainModelParentsFromRepository( domainModel, artifactResolver, properties, activeProfileIds,
+                                                     inactiveProfileIds );
+
+            if(parentDomainModels.size() == 0)
+            {
+                throw new IOException("Unable to find parent pom on local path or repo: "
+                        + domainModel.getParentId());
+            }
+
+            domainModels.addAll( parentDomainModels );
+            return domainModels;
+        }
+
+        domainModels.add( parentDomainModel );
+        if ( domainModel.getParentId() != null )
+        {
+            if ( isParentLocal(parentDomainModel.getRelativePathOfParent(), parentFile.getParentFile() ) )
+            {
+                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, artifactResolver,
+                                                                         parentFile.getParentFile(), properties,
+                                                                         activeProfileIds, inactiveProfileIds ) );
+            }
+            else
+            {
+                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, artifactResolver,
+                                                                          properties, activeProfileIds,
+                                                                          inactiveProfileIds ) );
+            }
+        }
+
+        return domainModels;
+    }
+
+    private DomainModel superDomainModel;
+
+    // Super Model Handling
+
+    private static final String MAVEN_MODEL_VERSION = "4.0.0";
+
+    private MavenXpp3Reader modelReader = new MavenXpp3Reader();
+
+    private Model superModel;
+
+    public Model getSuperModel()
+    {
+        if ( superModel != null )
+        {
+            return superModel;
+        }
+
+        Reader reader = null;
+
+        try
+        {
+            reader = ReaderFactory.newXmlReader( getClass().getClassLoader().getResource( "org/apache/maven/project/pom-" + MAVEN_MODEL_VERSION + ".xml" ) );
+
+            superModel = modelReader.read( reader, true );
+        }
+        catch ( Exception e )
+        {
+            // Not going to happen we're reading the super pom embedded in the JAR
+        }
+        finally
+        {
+            IOUtil.close( reader );
+        }
+
+        return superModel;
+    }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS23 INS23 INS23 INS31 MOV78 INS74 INS59 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS43 INS43 INS42 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS42 INS25 INS25 INS25 INS25 INS60 INS25 INS60 INS21 INS60 INS21 INS60 INS60 INS70 INS60 INS60 INS25 INS21 INS60 INS60 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS60 INS54 INS41 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS54 INS42 INS43 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS54 INS43 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS42 INS60 INS60 INS25 INS60 INS21 INS60 INS25 INS21 INS60 INS60 INS70 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS25 INS60 INS21 INS60 INS60 INS70 INS25 INS21 INS25 INS41 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS42 INS25 INS60 INS54 INS41 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS74 INS59 INS27 INS8 INS8 INS43 INS59 INS32 INS74 INS59 INS32 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS14 INS42 INS43 INS43 INS42 INS42 UPD42 MOV42 INS74 INS59 INS74 INS59 INS43 INS59 INS8 INS12 INS42 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS74 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS43 INS59 INS38 INS8 INS32 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS74 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS8 INS38 INS8 INS43 INS59 INS32 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS38 INS8 INS32 INS27 INS8 INS42 INS43 INS27 INS8 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS53 INS42 INS33 INS53 INS42 INS33 INS21 INS42 INS33 INS21 INS43 INS43 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS70 INS21 INS42 INS42 INS33 INS42 INS34 INS32 INS33 INS60 INS25 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS36 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS33 INS53 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS14 INS21 INS21 INS25 INS43 INS14 INS42 INS42 INS43 INS43 INS42 INS16 INS43 INS43 INS42 INS16 INS42 INS42 INS32 INS60 INS21 INS41 INS44 INS8 INS41 INS44 INS8 INS60 INS25 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS70 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS21 INS32 INS53 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS70 INS21 INS32 INS21 INS60 INS25 INS21 INS41 INS42 INS42 INS42 INS32 INS33 INS25 INS42 INS42 INS33 INS41 INS42 INS42 INS33 INS21 INS21 INS44 INS8 INS21 INS14 INS14 INS7 INS7 INS42 INS42 INS7 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS42 INS42 INS74 INS59 INS32 INS8 INS8 INS27 INS8 INS32 INS42 INS32 INS43 INS14 INS43 INS40 INS11 INS42 INS34 INS14 INS43 INS43 INS7 INS32 INS27 INS8 INS42 INS43 INS32 INS42 INS42 INS36 INS32 INS14 INS42 INS42 INS36 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS43 INS59 INS32 INS8 INS32 INS43 INS42 INS41 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS44 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS14 INS42 INS7 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS44 INS32 INS8 INS32 INS42 INS42 INS42 INS32 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS7 INS7 INS43 INS42 INS32 INS43 INS45 INS43 INS45 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS43 INS43 INS42 INS43 INS32 INS40 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS14 INS43 INS43 INS42 INS42 INS32 INS32 INS21 INS21 INS32 INS34 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS32 INS43 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS27 INS32 INS42 INS74 INS27 INS32 INS42 INS74 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS14 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS32 INS40 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS14 INS43 INS27 INS42 INS42 INS43 INS32 INS40 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS14 INS42 INS42 INS27 INS43 INS43 INS42 INS32 INS32 INS34 INS53 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS74 INS74 INS74 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS43 INS59 INS7 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS32 INS42 INS43 INS43 INS27 INS27 INS32 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS42 INS42 INS42 INS43 INS32 INS14 INS42 INS7 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS40 INS33 INS42 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS40 INS33 INS42 INS27 INS8 INS43 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS9 UPD42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS32 INS38 INS38 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS32 INS33 INS42 INS42 INS42 INS42 INS27 INS27 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS38 INS38 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS38 INS38 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS40 INS32 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42