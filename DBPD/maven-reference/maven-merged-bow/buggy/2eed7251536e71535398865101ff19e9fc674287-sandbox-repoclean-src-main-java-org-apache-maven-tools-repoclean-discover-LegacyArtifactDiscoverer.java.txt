o Reworked the artifact parsing code for the legacy artifact discoverer.
o Getting OutOfMemoryError when running against ibiblio-v1.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163732 13f79535-47bb-0310-9956-ffa450edef68

- * ==================================================================== Copyright 2001-2004 The
- * Apache Software Foundation.
+ * Copyright 2001-2005 The Apache Software Foundation.
- * the License. ====================================================================
+ * the License.
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.LinkedList;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+import java.util.StringTokenizer;
+        throws Exception
-        scanner.setExcludes( new String[] {
-            "bin/**",
-            "reports/**",
-            ".maven/**",
-            "**/poms/*.pom",
-            "**/*.md5",
-            "**/*snapshot-version",
-            "*/website/**",
-            "*/licenses/**",
-            "**/.htaccess",
-            "**/REPOSITORY-V*.txt" } );
+        scanner.setExcludes( STANDARD_DISCOVERY_EXCLUDES );
+        throws Exception
-        Artifact result = null;
+        StringTokenizer tokens = new StringTokenizer( path, "/" );
-        // TODO: Need to add more test scenarios to the unit test for this
-        // pattern.
-        // I'm not convinced that this will catch everything.
-        Pattern pathInfoPattern = Pattern.compile( "(.+)\\/(.+)s\\/([-a-zA-Z0-9]+)-([0-9]+[-.0-9a-zA-Z]+)\\..+" );
+        int numberOfTokens = tokens.countTokens();
-        Matcher matcher = pathInfoPattern.matcher( path );
-        if ( !matcher.matches() )
+        if ( numberOfTokens != 3 )
+
+            return null;
+        }
+
+        String groupId = tokens.nextToken();
+
+        String type = tokens.nextToken();
+
+        if ( type.endsWith( "s" ) )
+        {
+            type = type.substring( 0, type.length() - 1 );
+        }
+
+        // contains artifactId, version, classifier, and extension.
+        String avceGlob = tokens.nextToken();
+
+        LinkedList avceTokenList = new LinkedList();
+
+        StringTokenizer avceTokenizer = new StringTokenizer( avceGlob, "-" );
+        while ( avceTokenizer.hasMoreTokens() )
+        {
+            avceTokenList.addLast( avceTokenizer.nextToken() );
+        }
+
+        String lastAvceToken = (String) avceTokenList.removeLast();
+
+        if ( lastAvceToken.endsWith( ".tar.gz" ) )
+        {
+            type = "distribution-tgz";
+
+            lastAvceToken = lastAvceToken.substring( 0, lastAvceToken.length() - ".tar.gz".length() );
+
+            avceTokenList.addLast( lastAvceToken );
+        }
+        else if ( lastAvceToken.endsWith( ".zip" ) )
+        {
+            type = "distribution-zip";
+
+            lastAvceToken = lastAvceToken.substring( 0, lastAvceToken.length() - ".zip".length() );
+
+            avceTokenList.addLast( lastAvceToken );
-            String groupId = matcher.group( 1 );
-            String type = matcher.group( 2 );
-            String artifactId = matcher.group( 3 );
-            String version = matcher.group( 4 );
+            int extPos = lastAvceToken.lastIndexOf( '.' );
-            // Commenting this, since the old repo style didn't have a concept
-            // of 'maven-plugin'...I've added an additional artifact handler
-            // specifically for this, with just enough functionality to get the
-            // pathing right.
-            //if ( "plugin".equals( type ) )
-            //{
-            //    type = "maven-plugin";
-            //}
+            if ( extPos > 0 )
+            {
+                lastAvceToken = lastAvceToken.substring( 0, extPos );
+            }
-            getLogger().debug(
-                               "Extracted artifact information from path:\n" + "groupId: \'" + groupId + "\'\n"
-                                   + "artifactId: \'" + artifactId + "\'\n" + "type: \'" + type + "\'\n"
-                                   + "version: \'" + version + "\'" );
-
-            result = artifactConstructionSupport.createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME,
-                                                                 type );
+            avceTokenList.addLast( lastAvceToken );
-        return result;
+        String validVersionParts = "([Dd][Ee][Vv][_.0-9]*)|" + "([Ss][Nn][Aa][Pp][Ss][Hh][Oo][Tt])|" + "([_.0-9ab]+)|"
+            + "([Gg]?[_.0-9ab]*([Pp][Rr][Ee]|[Rr][Cc]|[Gg]|[Mm])[_.0-9]*)|" + "([Aa][Ll][Pp][Hh][Aa][_.0-9]*)|"
+            + "([Bb][Ee][Tt][Aa][_.0-9]*)|" + "([Rr][Cc][_.0-9]*)|" + "([Tt][Ee][Ss][Tt][_.0-9]*)|"
+            + "([Dd][Ee][Bb][Uu][Gg][_.0-9]*)|" + "([Uu][Nn][Oo][Ff][Ff][Ii][Cc][Ii][Aa][Ll][_.0-9]*)|"
+            + "([Rr][Ee][Ll][Ee][Aa][Ss][Ee][_.0-9]*)|" + "([Nn][Ii][Gg][Hh][Tt][Ll][Yy])";
+
+        // let's discover the version, and whatever's leftover will be either
+        // a classifier, or part of the artifactId, depending on position.
+        // Since version is at the end, we have to move in from the back.
+        Collections.reverse( avceTokenList );
+
+        String classifier = null;
+        StringBuffer versionBuffer = new StringBuffer();
+
+        boolean inFirstToken = true;
+        for ( Iterator it = avceTokenList.iterator(); it.hasNext(); )
+        {
+            String token = (String) it.next();
+
+            boolean tokenIsVersionPart = token.matches( validVersionParts );
+            if ( inFirstToken && !tokenIsVersionPart )
+            {
+                classifier = token;
+            }
+            else if ( tokenIsVersionPart )
+            {
+                if ( !inFirstToken )
+                {
+                    versionBuffer.insert( 0, '-' );
+                }
+
+                versionBuffer.insert( 0, token );
+            }
+            else
+            {
+                // if we didn't find a version, but we did find a 'classifier', 
+                // then push that classifier back onto the list...chances are, 
+                // it doesn't have a version or a classifier if this is the case.
+                if ( versionBuffer.length() < 1 && classifier != null )
+                {
+                    avceTokenList.addFirst( classifier );
+                }
+
+                // we've discovered all the version parts. break the loop.
+                break;
+            }
+
+            if ( inFirstToken )
+            {
+                inFirstToken = false;
+            }
+
+            // pop the token off the list so it doesn't appear in the
+            // artifactId.
+            it.remove();
+        }
+
+        // Now, restore the proper ordering so we can build the artifactId.
+        Collections.reverse( avceTokenList );
+
+        StringBuffer artifactIdBuffer = new StringBuffer();
+
+        inFirstToken = true;
+        for ( Iterator it = avceTokenList.iterator(); it.hasNext(); )
+        {
+            String token = (String) it.next();
+
+            if ( inFirstToken )
+            {
+                inFirstToken = false;
+            }
+            else
+            {
+                artifactIdBuffer.append( '-' );
+            }
+
+            artifactIdBuffer.append( token );
+        }
+
+        String artifactId = artifactIdBuffer.toString();
+        String version = versionBuffer.toString();
+
+        getLogger().debug(
+                           "Extracted artifact information from path:\n" + "groupId: \'" + groupId + "\'\n"
+                               + "artifactId: \'" + artifactId + "\'\n" + "type: \'" + type + "\'\n" + "version: \'"
+                               + version + "\'\n" + "classifier: \'" + classifier + "\'" );
+
+        if ( classifier != null )
+        {
+            return artifactConstructionSupport.createArtifactWithClassifier( groupId, artifactId, version,
+                                                                             Artifact.SCOPE_RUNTIME, type, classifier );
+        }
+        else
+        {
+            return artifactConstructionSupport.createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME,
+                                                               type );
+        }

MOV26 INS26 INS26 INS40 UPD40 UPD40 INS40 INS43 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS61 INS60 INS25 INS60 INS21 INS60 INS60 INS60 INS24 INS21 INS60 INS21 INS24 MOV60 MOV60 MOV21 INS25 INS43 INS59 INS39 INS59 INS27 MOV8 MOV43 INS59 MOV43 INS59 INS32 INS8 MOV43 INS59 UPD43 UPD43 INS32 INS8 MOV43 INS59 INS32 INS8 INS25 INS43 INS59 INS32 INS43 INS59 UPD43 MOV43 INS59 INS39 INS59 INS58 INS32 INS8 INS32 INS43 INS59 INS7 INS58 INS32 INS8 INS43 INS43 INS27 INS8 INS8 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS34 INS41 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS21 INS42 INS32 UPD42 INS42 INS14 UPD42 UPD42 INS14 INS42 INS42 INS21 INS42 INS11 INS42 INS42 INS45 INS21 INS21 INS21 INS32 INS8 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 INS42 INS14 INS42 INS9 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS9 INS43 INS59 INS42 INS42 MOV60 INS25 INS21 INS42 INS42 INS42 INS33 MOV41 INS41 INS43 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS43 INS43 INS42 INS45 INS32 MOV43 INS32 INS7 INS7 INS32 INS42 INS42 INS45 INS21 INS21 INS21 INS60 INS25 INS21 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS43 INS42 INS42 INS32 INS43 INS59 INS39 MOV59 INS27 INS8 INS25 INS42 INS8 INS32 INS43 INS42 INS42 INS32 INS43 INS42 INS8 INS8 INS32 UPD42 UPD42 UPD42 UPD42 INS45 INS45 INS42 INS32 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS32 INS39 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS11 UPD42 INS42 INS38 INS21 INS42 INS8 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS11 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS42 INS43 INS32 UPD42 UPD42 UPD42 INS42 INS7 INS25 INS21 INS25 INS10 INS7 INS43 INS32 INS7 INS32 INS32 INS34 INS32 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS13 INS7 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS32 INS27 INS8 INS42 INS9 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS42 INS32 INS42 INS21 INS42 INS42 INS34 INS42 INS27 INS27 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS34 INS42 INS32 INS32 INS34 INS42 INS33 INS32 UPD42 MOV42 UPD42 MOV42 INS34 INS13 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 DEL85 DEL5 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL3 DEL42 DEL33 DEL42 DEL42 DEL45 DEL32 DEL34 DEL32 DEL34 DEL34 DEL42 DEL60 DEL32 DEL38 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL25