Adding read/writeSettings() api to the maven-tools and the embedder along with unit tests in each place, and adding a cache object for the settings that is based on the build-context.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@510335 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.settings.io.jdom.SettingsJDOMWriter;
+import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
+import org.apache.maven.settings.validation.SettingsValidationResult;
+import org.apache.maven.settings.validation.SettingsValidator;
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.output.Format;
+import java.io.Reader;
+import java.io.Writer;
+    
+    private SettingsValidator settingsValidator;
+
+    public void writeSettings( Settings settings, Writer w )
+        throws IOException
+    {
+        SettingsValidationResult validationResult = settingsValidator.validate( settings );
+
+        if ( validationResult.getMessageCount() > 0 )
+        {
+            throw new IOException( "Failed to validate Settings.\n" + validationResult.render("\n") );
+        }
+        
+        Element root = new Element( "settings" );
+
+        Document doc = new Document( root );
+
+        SettingsJDOMWriter writer = new SettingsJDOMWriter();
+
+        String encoding = settings.getModelEncoding() != null ? settings.getModelEncoding() : "UTF-8";
+
+        Format format = Format.getPrettyFormat().setEncoding( encoding );
+
+        writer.write( settings, doc, w, format );
+    }
+
+    public Settings readSettings( Reader r )
+        throws IOException, SettingsConfigurationException
+    {
+        SettingsXpp3Reader reader = new SettingsXpp3Reader();
+        try
+        {
+            Settings settings = reader.read( r );
+            
+            SettingsValidationResult validationResult = settingsValidator.validate( settings );
+
+            if ( validationResult.getMessageCount() > 0 )
+            {
+                throw new IOException( "Failed to validate Settings.\n" + validationResult.render("\n") );
+            }
+            
+            return settings;
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new SettingsConfigurationException( "Failed to parse settings.", e );
+        }
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS21 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS32 INS32 INS34 INS53 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS60 INS60 INS25 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS45 INS43 INS42 INS43 INS27 INS32 INS45 INS32 INS42 INS42 INS43 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS42 INS53 INS43 INS27 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS34 INS53 INS42 INS14 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS45 INS42 INS42 INS42 INS45 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS45