PR: MNG-932
add a goal for creating a jar from the test sources


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@293227 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.archiver.MavenArchiveConfiguration;
-import org.apache.maven.archiver.MavenArchiver;
-import org.apache.maven.plugin.AbstractMojo;
-import org.apache.maven.project.MavenProject;
- * @description build a jar
+ * @requiresProject
-    extends AbstractMojo
+    extends AbstractJarMojo
-
-    private static final String[] DEFAULT_EXCLUDES = new String[]{"**/package.html"};
-
-    private static final String[] DEFAULT_INCLUDES = new String[]{"**/**"};
-
-    /**
-	 * Directory containing the generated JAR.
-     *
-     * @parameter expression="${project.build.directory}"
-     * @required
-     * @readonly
-     *
-     * @todo Change type to File
-     */
-    private String basedir;
-
-    /**
-	 * Name of the generated JAR.
-	 *
-     * @parameter alias="jarName" expression="${project.build.finalName}"
-     * @required
-     */
-    private String finalName;
-
-    private String outputDirectory;
-
-    /**
-	 * The maven project.
-	 *
-     * @parameter expression="${project}"
-     * @required
-     * @readonly
-     */
-    private MavenProject project;
-
-    /**
-     * The maven archiver to use.
-     *
-     * @parameter
-     */
-    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();
+    private File outputDirectory;
-        File jarFile = new File( basedir, finalName + ".jar" );
+        File jarFile = createArchive();
+        
+        getProject().getArtifact().setFile( jarFile );
+    }
-        MavenArchiver archiver = new MavenArchiver();
-
-        archiver.setOutputFile( jarFile );
-
-        try
-        {
-            File contentDirectory = new File( outputDirectory );
-            if ( !contentDirectory.exists() )
-            {
-                getLog().warn( "JAR will be empty - no content was marked for inclusion!" );
-            }
-            else
-            {
-                archiver.getArchiver().addDirectory( contentDirectory, DEFAULT_INCLUDES, DEFAULT_EXCLUDES );
-            }
-
-            archiver.createArchive( project, archive );
-
-            project.getArtifact().setFile( jarFile );
-        }
-        catch ( Exception e )
-        {
-            // TODO: improve error handling
-            throw new MojoExecutionException( "Error assembling JAR", e );
-        }
+    /**
+     * Return the main classes directory, so it's used as the root of the jar.
+     */
+    protected File getOutputDirectory()
+    {
+        return outputDirectory;

UPD43 INS31 INS31 UPD65 UPD42 UPD43 MOV29 MOV83 MOV39 MOV42 MOV43 INS8 INS29 INS83 MOV43 INS42 INS8 MOV42 MOV60 MOV21 INS65 INS41 MOV43 INS66 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL83 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL59 DEL23 DEL66 DEL65 DEL66 DEL65 DEL65 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL14 DEL66 DEL65 DEL66 DEL65 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL45 DEL27 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31