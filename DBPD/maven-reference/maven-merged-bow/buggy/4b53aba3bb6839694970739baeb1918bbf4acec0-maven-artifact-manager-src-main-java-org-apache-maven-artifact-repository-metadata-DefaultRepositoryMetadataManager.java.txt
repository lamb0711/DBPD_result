Fixing issues related to MNG-377, where the plugins.xml metadata was being mishandled. Separated updating of this metadata into a separate mojo, bound to the 'package' phase, and put in a validator for the POM (POM has to have distributionRepository now for maven-plugin's) which is bound to the 'validate' phase. Put together an integration test that uses modello:java as a case where the pluginGroups must be consulted. Also had to change the Verifier to check a verifier.properties for failOnErrorOutput, which will suppress IT failures based on [ERROR] log output (modello outputs one of these, and kills the IT unnecessarily).

MNG-377 should be resolved at this point.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@215890 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.IOUtil;
+import java.io.FileReader;
+import java.io.Reader;
+import java.util.HashMap;
+import java.util.Map;
-    public void resolve( RepositoryMetadata metadata, ArtifactRepository remote, ArtifactRepository local, String remoteId )
+    // only resolve repository metadata once per session...
+    private Map resolved = new HashMap();
+
+    public void resolve( RepositoryMetadata metadata, ArtifactRepository remote, ArtifactRepository local )
-        String metadataPath = local.formatAsFile( metadata.getRepositoryPath() );
+        File metadataFile = (File) resolved.get( metadata.getRepositoryPath() );
-        String realignedPath = metadataPath.replace( File.separatorChar, '/' );
-
-        if ( !realignedPath.startsWith( "/" ) )
+        if ( metadataFile == null )
-            realignedPath = "/" + realignedPath;
-        }
+            metadataFile = constructLocalRepositoryFile( metadata, local, remote.getId() );
-        realignedPath = "/REPOSITORY-INF/" + remoteId + realignedPath;
-
-        File metadataFile = new File( local.getBasedir(), realignedPath );
-
-        if ( remote == null )
-        {
-            if ( metadataFile.exists() )
+            if ( remote == null )
-                getLogger().warn( "Cannot retrieve repository metadata for: " + metadataPath + ". Using locally cached version instead." );
-                
-                getLogger().debug( "Error retrieving repository metadata: " + metadataPath + ". Reason: repository is null." );
-                
-                metadata.setFile( metadataFile );
+                throw new RepositoryMetadataManagementException( metadata,
+                                                                 "Cannot retrieve repository metadata from null repository." );
-                throw new RepositoryMetadataManagementException( metadata, "Cannot retrieve repository metadata from null repository." );
-            }
-        }
-        else
-        {
-            try
-            {
-                wagonManager.getRepositoryMetadata( metadata, remote, metadataFile );
-
-                metadata.setFile( metadataFile );
-            }
-            catch ( TransferFailedException e )
-            {
-                throw new RepositoryMetadataManagementException( metadata, "Failed to download repository metadata.", e );
-            }
-            catch ( ResourceDoesNotExistException e )
-            {
-                if ( metadataFile.exists() )
+                try
-                    getLogger().warn( "Cannot find repository metadata for: " + metadataPath + ". Using locally cached version instead." );
-                    getLogger().debug( "Error retrieving repository metadata: " + metadataPath, e );
-                    
+                    wagonManager.getRepositoryMetadata( metadata, remote, metadataFile );
+
+                    verifyLocalRepositoryFile( metadataFile );
+
-                else
+                catch ( TransferFailedException e )
-                    throw new RepositoryMetadataManagementException( metadata, "Remote repository metadata not found.", e );
+                    throw new RepositoryMetadataManagementException( metadata,
+                                                                     "Failed to download repository metadata.", e );
+                }
+                catch ( ResourceDoesNotExistException e )
+                {
+                    throw new RepositoryMetadataManagementException( metadata, "Remote repository metadata not found.",
+                                                                     e );
+                }
+                catch ( IOException e )
+                {
+                    throw new RepositoryMetadataManagementException(
+                                                                     metadata,
+                                                                     "Download of repository metadata resulted in an invalid file.",
+                                                                     e );
-    throws RepositoryMetadataManagementException
+        throws RepositoryMetadataManagementException
-            
+
-            
+
-    
+
+    }
+
+    private File constructLocalRepositoryFile( RepositoryMetadata metadata, ArtifactRepository local, String remoteId )
+    {
+        String metadataPath = local.formatAsFile( metadata.getRepositoryPath() );
+
+        String realignedPath = metadataPath.replace( File.separatorChar, '/' );
+
+        if ( !realignedPath.startsWith( "/" ) )
+        {
+            realignedPath = "/" + realignedPath;
+        }
+
+        realignedPath = "/REPOSITORY-INF/" + remoteId + realignedPath;
+
+        return new File( local.getBasedir(), realignedPath );
+    }
+
+    private void verifyLocalRepositoryFile( File metadataFile )
+        throws IOException
+    {
+        Reader metadataReader = null;
+
+        try
+        {
+            metadataReader = new FileReader( metadataFile );
+
+            char[] cbuf = new char[16];
+
+            while ( metadataReader.read( cbuf ) > -1 )
+            {
+                // do nothing...just verify that it can be read.
+            }
+        }
+        finally
+        {
+            IOUtil.close( metadataReader );
+        }
+

INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 MOV44 INS44 MOV43 INS8 UPD83 MOV43 UPD42 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS14 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS42 INS60 INS54 INS43 INS42 INS42 INS43 INS59 INS27 INS8 MOV14 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS11 INS42 INS33 INS21 MOV25 INS42 INS42 INS33 INS21 INS60 INS61 INS21 INS43 INS32 INS7 MOV8 INS7 INS5 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS39 INS85 INS42 INS3 INS32 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS12 INS43 INS42 INS5 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS21 MOV44 MOV8 INS44 INS8 INS42 INS39 INS85 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS14 INS43 INS42 INS45 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL39 DEL42 DEL59 DEL60