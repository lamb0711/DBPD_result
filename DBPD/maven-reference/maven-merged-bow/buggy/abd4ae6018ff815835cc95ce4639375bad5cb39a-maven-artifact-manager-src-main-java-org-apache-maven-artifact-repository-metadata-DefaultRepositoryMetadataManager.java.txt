PR: MNG-613
make repository metadata behave more like snapshots with daily updates.
next step is to move the version checking to use that instead and fallback to the old files

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@266298 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.metadata.ArtifactMetadata;
+import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.codehaus.plexus.util.FileUtils;
-import java.io.IOException;
+import java.util.Date;
-     * @todo very primitve. Probably we can cache artifacts themselves in a central location, as well as reset the flag over time in a long running process.
+     * @todo very primitive. Probably we can cache artifacts themselves in a central location, as well as reset the flag over time in a long running process.
-    public void resolve( RepositoryMetadata metadata, List repositories, ArtifactRepository local )
-        throws RepositoryMetadataManagementException
+    public void resolve( ArtifactMetadata metadata, List remoteRepositories, ArtifactRepository localRepository )
+        throws ArtifactMetadataRetrievalException
-            for ( Iterator i = repositories.iterator(); i.hasNext(); )
+            File file = new File( localRepository.getBasedir(), localRepository.pathOfArtifactMetadata( metadata ) );
+
+            boolean checkedUpdates = false;
+            for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
-                // TODO: replace with a more general repository update mechanism like artifact metadata uses
-                // (Actually, this should now supersede artifact metadata...)
-                File metadataFile = new File( local.getBasedir(), local.pathOfRepositoryMetadata( metadata ) );
+                ArtifactRepositoryPolicy policy = metadata.isSnapshot() ? repository.getSnapshots()
+                    : repository.getReleases();
-                if ( !metadataFile.exists() )
+                if ( policy == null || !policy.isEnabled() )
-                    try
-                    {
-                        try
-                        {
-                            wagonManager.getRepositoryMetadata( metadata, repository, metadataFile );
-                        }
-                        catch ( ResourceDoesNotExistException e )
-                        {
-                            if ( !metadataFile.exists() )
-                            {
-                                throw new RepositoryMetadataManagementException( metadata,
-                                                                                 "Remote repository metadata not found.",
-                                                                                 e );
-                            }
-                            else
-                            {
-                                String message = "Cannot find " + metadata +
-                                    " in remote repository - Using local copy.";
-
-                                getLogger().info( message );
-
-                                getLogger().debug( message, e );
-                            }
-                        }
-                    }
-                    catch ( TransferFailedException e )
-                    {
-                        throw new RepositoryMetadataManagementException( metadata,
-                                                                         "Failed to download repository metadata.", e );
-                    }
+                    getLogger().debug( "Skipping disabled repository " + repository.getId() );
-                    getLogger().info( "Using local copy of " + metadata + " from: " + metadataFile );
+                    // TODO: should be able to calculate this less often
+                    boolean checkForUpdates = policy.checkOutOfDate( new Date( file.lastModified() ) );
+
+                    if ( checkForUpdates )
+                    {
+                        checkedUpdates = true;
+
+                        getLogger().info( metadata.getKey() + ": checking for updates from " + repository.getId() );
+
+                        try
+                        {
+                            wagonManager.getArtifactMetadata( metadata, repository, file, policy.getChecksumPolicy() );
+                            // TODO: ???
+//                            metadata.setRepository( repository );
+                        }
+                        catch ( ResourceDoesNotExistException e )
+                        {
+                            getLogger().info( "Repository metadata " + metadata +
+                                " could not be found on repository: " + repository.getId(), e );
+                        }
+                        catch ( TransferFailedException e )
+                        {
+                            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
+                        }
+                    }
-
-                cachedMetadata.add( metadata.getRepositoryPath() );
-        }
-    }
-    public void deploy( File source, RepositoryMetadata metadata, ArtifactRepository remote )
-        throws RepositoryMetadataManagementException
-    {
-        try
-        {
-            wagonManager.putRepositoryMetadata( source, metadata, remote );
-        }
-        catch ( TransferFailedException e )
-        {
-            throw new RepositoryMetadataManagementException( metadata, "Failed to upload repository metadata.", e );
-        }
-
-    }
-
-    public void install( File source, RepositoryMetadata metadata, ArtifactRepository local )
-        throws RepositoryMetadataManagementException
-    {
-        File metadataFile = new File( local.getBasedir(), local.pathOfRepositoryMetadata( metadata ) );
-
-        try
-        {
-            File dir = metadataFile.getParentFile();
-
-            if ( !dir.exists() )
+            // touch the file if it was checked for updates, but don't create it if it doesn't exist to avoid
+            // storing SNAPSHOT as the actual version which doesn't exist remotely.
+            if ( checkedUpdates )
-                dir.mkdirs();
+                if ( file.exists() )
+                {
+                    file.setLastModified( System.currentTimeMillis() );
+                }
-            FileUtils.copyFile( source, metadataFile );
+            cachedMetadata.add( metadata.getKey() );
-        catch ( IOException e )
-        {
-            throw new RepositoryMetadataManagementException( metadata, "Failed to install repository metadata.", e );
-        }
-
-    private boolean alreadyResolved( RepositoryMetadata metadata )
+    private boolean alreadyResolved( ArtifactMetadata metadata )
-        return cachedMetadata.contains( metadata.getRepositoryPath() );
+        return cachedMetadata.contains( metadata.getKey() );
+

MOV26 INS26 INS26 UPD40 INS40 INS40 UPD40 INS31 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 UPD43 MOV43 INS8 UPD43 UPD42 UPD42 UPD42 MOV60 INS25 UPD43 UPD66 UPD42 MOV38 INS8 UPD42 MOV60 INS60 INS24 INS25 INS21 MOV43 INS39 INS59 INS58 MOV32 INS8 INS42 INS8 INS32 UPD42 UPD42 INS42 INS9 MOV43 INS59 MOV60 INS60 INS25 INS25 INS42 INS42 INS32 MOV43 INS42 INS32 INS43 INS59 INS27 INS8 INS8 INS32 INS8 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS16 INS27 INS38 MOV21 INS60 INS25 UPD42 MOV42 MOV42 MOV21 INS32 INS32 INS32 UPD42 MOV42 INS33 INS32 INS39 INS59 INS42 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS27 INS42 INS32 INS21 MOV21 INS54 UPD42 UPD42 INS32 INS45 INS32 INS42 INS42 INS14 INS7 INS8 INS12 MOV12 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 MOV43 INS32 INS42 INS9 INS21 MOV44 INS8 UPD42 INS42 INS42 INS32 UPD45 INS32 INS32 MOV21 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV32 UPD42 INS27 UPD42 UPD43 UPD45 INS45 INS42 INS45 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL8 DEL25 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31