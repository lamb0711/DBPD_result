PR: MNG-613
Completion of the version selection from a range.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@279720 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.metadata.ArtifactMetadata;
+import org.apache.maven.artifact.repository.metadata.ArtifactRepositoryMetadata;
+import org.apache.maven.artifact.repository.metadata.Metadata;
+import org.apache.maven.artifact.repository.metadata.RepositoryMetadataManager;
+import org.apache.maven.artifact.repository.metadata.Versioning;
+import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
+import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.Reader;
- * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
+ * @author <a href="mailto:brett@apache.org">Brett Porter</a>
-
+    private RepositoryMetadataManager repositoryMetadataManager;
+
-                    project = mavenProjectBuilder
-                        .buildFromRepository( pomArtifact, remoteRepositories, localRepository );
+                    project = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories,
+                                                                       localRepository );
+
+    public List retrieveAvailableVersions( Artifact artifact, ArtifactRepository localRepository,
+                                           List remoteRepositories )
+        throws ArtifactMetadataRetrievalException
+    {
+        ArtifactMetadata metadata = new ArtifactRepositoryMetadata( artifact );
+        repositoryMetadataManager.resolve( metadata, remoteRepositories, localRepository );
+
+        // TODO: this has been ripped from AbstractVersionTransformation - stop duplication
+        Versioning versioning = null;
+        for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
+        {
+            ArtifactRepository repository = (ArtifactRepository) i.next();
+
+            versioning = loadVersioningInformation( metadata, repository, localRepository, artifact );
+            if ( versioning != null )
+            {
+                artifact.setRepository( repository );
+                // TODO: merge instead (see above)
+                break;
+            }
+        }
+        Versioning v = loadVersioningInformation( metadata, localRepository, localRepository, artifact );
+        if ( v != null )
+        {
+            versioning = v;
+            // TODO: figure out way to avoid duplicated message
+            if ( getLogger().isDebugEnabled() /*&& !alreadyResolved*/ )
+            {
+                // Locally installed file is newer, don't use the resolved version
+                getLogger().debug( artifact.getArtifactId() + ": using locally installed snapshot" );
+            }
+        }
+
+        List versions;
+        if ( versioning != null )
+        {
+            versions = new ArrayList( versioning.getVersions().size() );
+            for ( Iterator i = versioning.getVersions().iterator(); i.hasNext(); )
+            {
+                String version = (String) i.next();
+                versions.add( new DefaultArtifactVersion( version ) );
+            }
+        }
+        else
+        {
+            versions = Collections.EMPTY_LIST;
+        }
+
+        return versions;
+    }
+
+    private Versioning loadVersioningInformation( ArtifactMetadata repoMetadata, ArtifactRepository remoteRepository,
+                                                    ArtifactRepository localRepository, Artifact artifact )
+        throws ArtifactMetadataRetrievalException
+    {
+        File metadataFile = new File( localRepository.getBasedir(),
+                                      localRepository.pathOfLocalRepositoryMetadata( repoMetadata, remoteRepository ) );
+
+        Versioning versioning = null;
+        if ( metadataFile.exists() )
+        {
+            Metadata metadata = readMetadata( metadataFile );
+            versioning = metadata.getVersioning();
+        }
+        return versioning;
+    }
+
+    /**
+     * @todo share with DefaultPluginMappingManager.
+     */
+    private static Metadata readMetadata( File mappingFile )
+        throws ArtifactMetadataRetrievalException
+    {
+        Metadata result;
+
+        Reader fileReader = null;
+        try
+        {
+            fileReader = new FileReader( mappingFile );
+
+            MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
+
+            result = mappingReader.read( fileReader );
+        }
+        catch ( FileNotFoundException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
+        }
+        catch ( IOException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Cannot parse version information from: " + mappingFile, e );
+        }
+        finally
+        {
+            IOUtil.close( fileReader );
+        }
+        return result;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS65 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 UPD66 INS66 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS24 INS60 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS54 INS41 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS12 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS59 INS42 INS42 INS60 INS21 INS25 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS33 INS21 INS24 INS21 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS33 INS21 INS60 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS21 INS43 INS42 INS42 INS42 INS32 INS43 INS59 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS8 INS7 INS58 INS32 INS8 INS7 INS43 INS32 INS32 INS43 INS59 INS7 INS7 INS43 INS59 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS33 INS21 INS10 INS42 INS42 INS32 INS42 INS21 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42