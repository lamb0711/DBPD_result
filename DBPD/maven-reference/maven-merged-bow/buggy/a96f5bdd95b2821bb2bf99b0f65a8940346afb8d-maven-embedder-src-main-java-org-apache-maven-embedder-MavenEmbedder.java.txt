o settings simplication
o removing old configuration, cleaned up and moved to another package


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@512554 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.MavenTools;
+import org.apache.maven.embedder.configuration.Configuration;
+import org.apache.maven.embedder.configuration.ConfigurationValidationResult;
+import org.apache.maven.embedder.configuration.DefaultConfigurationValidationResult;
+import org.apache.maven.execution.MavenSession;
+import org.apache.maven.execution.DefaultMavenExecutionRequest;
+import org.apache.maven.settings.io.jdom.SettingsJDOMWriter;
+import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;
+import org.apache.maven.settings.validation.DefaultSettingsValidator;
+import org.apache.maven.settings.validation.SettingsValidationResult;
+import org.apache.maven.settings.validation.SettingsValidator;
-import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.StringUtils;
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.output.Format;
+import java.io.FileNotFoundException;
-import java.io.Writer;
+import java.io.Writer;
+    public static final String DEFAULT_LOCAL_REPO_ID = "local";
+
+    public static final String DEFAULT_LAYOUT_ID = "default";
+
+    public static final String userHome = System.getProperty( "user.home" );
+
+    public static final File userMavenConfigurationHome = new File( userHome, ".m2" );
+
+    public static final String mavenHome = System.getProperty( "maven.home" );
+
+    public static final File defaultUserLocalRepository = new File( userMavenConfigurationHome, "repository" );
+
+    public static final File DEFAULT_USER_SETTINGS_FILE = new File( userMavenConfigurationHome, "settings.xml" );
+
+    // ----------------------------------------------------------------------------
+    //
+    // ----------------------------------------------------------------------------
+
-    private MavenTools mavenTools;
+    private MavenSettingsBuilder settingsBuilder;
-    private MavenEmbedderConfiguration embedderRequest;
+    private Configuration configuration;
-    public MavenEmbedder( ClassWorld classWorld )
-        throws MavenEmbedderException
-    {
-        this( classWorld, null );
-    }
-
-    public MavenEmbedder( ClassWorld classWorld,
-                          MavenEmbedderLogger logger )
-        throws MavenEmbedderException
-    {
-        this( new DefaultMavenEmbedderConfiguration().setClassWorld( classWorld ).setMavenEmbedderLogger( logger ) );
-    }
-
-    public MavenEmbedder( ClassLoader classLoader )
-        throws MavenEmbedderException
-    {
-        this( classLoader, null );
-    }
-
-    public MavenEmbedder( ClassLoader classLoader,
-                          MavenEmbedderLogger logger )
-        throws MavenEmbedderException
-    {
-        this( new ClassWorld( "plexus.core", classLoader ), logger );
-    }
-
-    public MavenEmbedder( MavenEmbedderConfiguration embedderConfiguration )
+    public MavenEmbedder( Configuration embedderConfiguration )
+    public Settings getSettings()
+    {
+        return settings;
+    }
+
-    // Project
-    // ----------------------------------------------------------------------
-
-    public MavenProject readProject( File mavenProject )
-        throws ProjectBuildingException
-    {
-        return mavenProjectBuilder.build( mavenProject, localRepository, profileManager );
-    }
-
-    // ----------------------------------------------------------------------
-    public static Settings readSettings( File settingsFile )
-        throws SettingsConfigurationException, MavenEmbedderException, IOException
-    {
-        return readSettings( settingsFile, null );
-    }
-
-    public static Settings readSettings( File settingsFile,
-                                         MavenEmbedderLogger logger )
-        throws SettingsConfigurationException, MavenEmbedderException, IOException
-    {
-        DefaultPlexusContainer container = null;
-
-        FileReader reader = null;
-        try
-        {
-            reader = new FileReader( settingsFile );
-
-            try
-            {
-                container = new DefaultPlexusContainer();
-            }
-            catch ( PlexusContainerException e )
-            {
-                throw new MavenEmbedderException( "Error starting container.", e );
-            }
-
-            if ( logger != null )
-            {
-                MavenEmbedderLoggerManager loggerManager =
-                    new MavenEmbedderLoggerManager( new PlexusLoggerAdapter( logger ) );
-
-                container.setLoggerManager( loggerManager );
-            }
-
-            MavenTools mavenTools;
-            try
-            {
-                mavenTools = (MavenTools) container.lookup( MavenTools.ROLE, container.getContainerRealm() );
-            }
-            catch ( ComponentLookupException e )
-            {
-                throw new MavenEmbedderException( "Error retrieving Maven tools.", e );
-            }
-
-            return mavenTools.readSettings( reader );
-        }
-        finally
-        {
-            IOUtil.close( reader );
-
-            if ( container != null )
-            {
-                container.dispose();
-            }
-        }
-    }
-
-    public static void writeSettings( File settingsFile,
+    public static void writeSettings( File file,
-        throws IOException, MavenEmbedderException
+        throws IOException
-        writeSettings( settingsFile, settings, null );
-    }
+        Writer fileWriter = new FileWriter( file );
-    public static void writeSettings( File settingsFile,
-                                      Settings settings,
-                                      MavenEmbedderLogger logger )
-        throws IOException, MavenEmbedderException
-    {
-        DefaultPlexusContainer container = null;
+        SettingsValidator settingsValidator = new DefaultSettingsValidator();
-        FileWriter writer = null;
+        SettingsValidationResult validationResult = settingsValidator.validate( settings );
+
+        if ( validationResult.getMessageCount() > 0 )
+        {
+            throw new IOException( "Failed to validate Settings.\n" + validationResult.render( "\n" ) );
+        }
+
+        Element root = new Element( "settings" );
+
+        Document doc = new Document( root );
+
+        SettingsJDOMWriter writer = new SettingsJDOMWriter();
+
+        String encoding = settings.getModelEncoding() != null ? settings.getModelEncoding() : "UTF-8";
+
+        Format format = Format.getPrettyFormat().setEncoding( encoding );
+
-            writer = new FileWriter( settingsFile );
-
-            try
-            {
-                container = new DefaultPlexusContainer();
-            }
-            catch ( PlexusContainerException e )
-            {
-                throw new MavenEmbedderException( "Error starting container.", e );
-            }
-
-            if ( logger != null )
-            {
-                MavenEmbedderLoggerManager loggerManager =
-                    new MavenEmbedderLoggerManager( new PlexusLoggerAdapter( logger ) );
-
-                container.setLoggerManager( loggerManager );
-            }
-
-            MavenTools mavenTools;
-            try
-            {
-                mavenTools = (MavenTools) container.lookup( MavenTools.ROLE, container.getContainerRealm() );
-            }
-            catch ( ComponentLookupException e )
-            {
-                throw new MavenEmbedderException( "Error retrieving Maven tools.", e );
-            }
-
-            mavenTools.writeSettings( settings, writer );
+            writer.write( settings, doc, fileWriter, format );
-            IOUtil.close( writer );
+            fileWriter.close();
+        }
+    }
-            if ( container != null )
+    public static Settings readSettings( File file )
+        throws IOException, SettingsConfigurationException
+    {
+        Reader fileReader = new FileReader( file );
+
+        SettingsValidator settingsValidator = new DefaultSettingsValidator();
+
+        SettingsXpp3Reader reader = new SettingsXpp3Reader();
+
+        try
+        {
+            Settings settings = reader.read( fileReader );
+
+            SettingsValidationResult validationResult = settingsValidator.validate( settings );
+
+            if ( validationResult.getMessageCount() > 0 )
-                container.dispose();
+                throw new IOException( "Failed to validate Settings.\n" + validationResult.render( "\n" ) );
+
+            return settings;
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new SettingsConfigurationException( "Failed to parse settings.", e );
+        }
+        finally
+        {
+            fileReader.close();
-        pluginManager.verifyPlugin( plugin, project, settings, localRepository );
+
+        MavenExecutionRequest request = new DefaultMavenExecutionRequest()
+            .setSettings( settings )
+            .setLocalRepository( localRepository );
+
+        MavenSession session = new MavenSession( container, request, null, null );
+
+        pluginManager.verifyPlugin( plugin, project, session );
+
+
+    // ----------------------------------------------------------------------
+    // Project
+    // ----------------------------------------------------------------------
+
+    public MavenProject readProject( File mavenProject )
+        throws ProjectBuildingException
+    {
+        return mavenProjectBuilder.build( mavenProject, localRepository, profileManager );
+    }
-            request = defaultsPopulator.populateDefaults( request, embedderRequest );
-
+            request = defaultsPopulator.populateDefaults( request, this );
+            //mkleint: copied from DefaultLifecycleExecutor
-            //mkleint: copied from DefaultLifecycleExecutor    
-
-        catch ( PluginManagerException e )
-        {
-            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
-        }
-        catch ( PluginNotFoundException e )
-        {
-            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
-        }
-        catch ( MavenEmbedderException e )
-        {
-            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
-        }
-        catch ( ProjectBuildingException e )
-        {
-            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
-        }
-        //mkleint: why do we have so many various exception handlings with same result?
-    // ----------------------------------------------------------------------
-    // Local Repository
-    // ----------------------------------------------------------------------
-
-    public static final String DEFAULT_LOCAL_REPO_ID = "local";
-
-    public static final String DEFAULT_LAYOUT_ID = "default";
-
-    public static final File DEFAULT_GLOBAL_SETTINGS_FILE = MavenSettingsBuilder.DEFAULT_GLOBAL_SETTINGS_FILE;
-
-    public static final File DEFAULT_USER_SETTINGS_FILE = MavenSettingsBuilder.DEFAULT_USER_SETTINGS_FILE;
-
-    public ArtifactRepository createLocalRepository( File localRepository )
-        throws ComponentLookupException
-    {
-        return createLocalRepository( localRepository.getAbsolutePath(), DEFAULT_LOCAL_REPO_ID );
-    }
-
-    public ArtifactRepository createLocalRepository( Settings settings )
-    {
-        return createLocalRepository( mavenTools.getLocalRepositoryPath( settings ), DEFAULT_LOCAL_REPO_ID );
-    }
-
-    public ArtifactRepository createLocalRepository( String url,
-                                                     String repositoryId )
-    {
-        if ( !url.startsWith( "file:" ) )
-        {
-            url = "file://" + url;
-        }
-
-        return createRepository( url, repositoryId );
-    }
-
-    public ArtifactRepository createRepository( String url,
-                                                String repositoryId )
-    {
-        // snapshots vs releases
-        // offline = to turning the update policy off
-
-        //TODO: we'll need to allow finer grained creation of repositories but this will do for now
-
-        String updatePolicyFlag = ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS;
-
-        String checksumPolicyFlag = ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN;
-
-        ArtifactRepositoryPolicy snapshotsPolicy =
-            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
-
-        ArtifactRepositoryPolicy releasesPolicy =
-            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
-
-        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout,
-                                                                   snapshotsPolicy, releasesPolicy );
-    }
-    private void start( MavenEmbedderConfiguration req )
+    private void start( Configuration configuration )
-        this.classWorld = req.getClassWorld();
+        this.classWorld = configuration.getClassWorld();
-        this.logger = req.getMavenEmbedderLogger();
+        this.logger = configuration.getMavenEmbedderLogger();
-        this.embedderRequest = req;
+        this.configuration = configuration;
-            if ( req.getContainerCustomizer() != null )
+            if ( configuration.getContainerCustomizer() != null )
-                req.getContainerCustomizer().customize( container );
+                configuration.getContainerCustomizer().customize( container );
-            handleExtensions( req.getExtensions() );
+            handleExtensions( configuration.getExtensions() );
-            mavenTools = (MavenTools) container.lookup( MavenTools.ROLE );
+            settingsBuilder = (MavenSettingsBuilder) container.lookup( MavenSettingsBuilder.ROLE );
-            profileManager = new DefaultProfileManager( container, req.getSystemProperties() );
+            profileManager = new DefaultProfileManager( container, configuration.getSystemProperties() );
-            profileManager.explicitlyActivate( req.getActiveProfiles() );
+            profileManager.explicitlyActivate( configuration.getActiveProfiles() );
-            profileManager.explicitlyDeactivate( req.getInactiveProfiles() );
+            profileManager.explicitlyDeactivate( configuration.getInactiveProfiles() );
-            // These three things can be cached for a single session of the embedder
-            settings = mavenTools.buildSettings( req.getUserSettingsFile(), req.getGlobalSettingsFile(), false,
-                                                 req.getSettingsBuilderAdvice() );
+            try
+            {
+                if ( configuration.getUserSettingsFile() == null )
+                {
+                    configuration.setUserSettingsFile( DEFAULT_USER_SETTINGS_FILE );
+                }
+
+                settings = settingsBuilder.buildSettings( configuration.getUserSettingsFile(),
+                                                          configuration.getGlobalSettingsFile() );
+            }
+            catch ( Exception e )
+            {
+                // If something goes wrong with parsing the settings
+                settings = new Settings();
+            }
+
-        catch ( SettingsConfigurationException e )
-        {
-            throw new MavenEmbedderException( "Cannot create settings configuration", e );
-        }
+    // ----------------------------------------------------------------------------
+    // Validation
+    // ----------------------------------------------------------------------------
+
+    // ----------------------------------------------------------------------------
+    // Options for settings
+    //
+    // 1. No settings
+    // 2. User settings only
+    // 3. Global settings only
+    // 4. Both Users settings and Global settings. In the case that both are present
+    //    the User settings take priority.
+    //
+    // What we would like to provide is a way that the client code does not have
+    // to deal with settings configuration at all.
+    // ----------------------------------------------------------------------------
+
+    public static ConfigurationValidationResult validateConfiguration( Configuration configuration )
+    {
+        ConfigurationValidationResult result = new DefaultConfigurationValidationResult();
+
+        if ( configuration.getUserSettingsFile() == null )
+        {
+            configuration.setUserSettingsFile( MavenEmbedder.DEFAULT_USER_SETTINGS_FILE );
+        }
+
+        Reader fileReader;
+
+        // User settings
+
+        try
+        {
+            fileReader = new FileReader( configuration.getUserSettingsFile() );
+
+            new SettingsXpp3Reader().read( fileReader );
+        }
+        catch ( FileNotFoundException e )
+        {
+            result.setUserSettingsFilePresent( false );
+        }
+        catch ( IOException e )
+        {
+            result.setUserSettingsFileParses( false );
+        }
+        catch ( XmlPullParserException e )
+        {
+            result.setUserSettingsFileParses( false );
+        }
+
+        // Global settings
+
+        if ( configuration.getGlobalSettingsFile() != null )
+        {
+
+            try
+            {
+                fileReader = new FileReader( configuration.getGlobalSettingsFile() );
+
+                new SettingsXpp3Reader().read( fileReader );
+            }
+            catch ( FileNotFoundException e )
+            {
+                result.setGlobalSettingsFilePresent( false );
+            }
+            catch ( IOException e )
+            {
+                result.setGlobalSettingsFileParses( false );
+            }
+            catch ( XmlPullParserException e )
+            {
+                result.setGlobalSettingsFileParses( false );
+            }
+        }
+
+        return result;
+    }
+
+    // ----------------------------------------------------------------------
+    // Local Repository
+    // ----------------------------------------------------------------------
+
+    public ArtifactRepository createLocalRepository( Settings settings )
+        throws MavenEmbedderException
+    {
+        String localRepositoryPath = null;
+
+        if ( configuration.getLocalRepository() != null )
+        {
+            localRepositoryPath = configuration.getLocalRepository().getAbsolutePath();
+        }
+
+        if ( StringUtils.isEmpty( localRepositoryPath ) )
+        {
+            localRepositoryPath = settings.getLocalRepository();
+        }
+
+        if ( StringUtils.isEmpty( localRepositoryPath ) )
+        {
+            localRepositoryPath = MavenEmbedder.defaultUserLocalRepository.getAbsolutePath();
+        }
+
+        return createLocalRepository( localRepositoryPath, MavenEmbedder.DEFAULT_LOCAL_REPO_ID );
+    }
+
+    public ArtifactRepository createLocalRepository( String url,
+                                                     String repositoryId )
+        throws MavenEmbedderException
+    {
+        try
+        {
+            return createRepository( canonicalFileUrl( url ), repositoryId );
+        }
+        catch ( IOException e )
+        {
+            throw new MavenEmbedderException( "Unable to resolve canonical path for local repository " + url, e );
+        }
+    }
+
+    private String canonicalFileUrl( String url )
+        throws IOException
+    {
+        if ( !url.startsWith( "file:" ) )
+        {
+            url = "file://" + url;
+        }
+        else if ( url.startsWith( "file:" ) && !url.startsWith( "file://" ) )
+        {
+            url = "file://" + url.substring( "file:".length() );
+        }
+
+        // So now we have an url of the form file://<path>
+
+        // We want to eliminate any relative path nonsense and lock down the path so we
+        // need to fully resolve it before any sub-modules use the path. This can happen
+        // when you are using a custom settings.xml that contains a relative path entry
+        // for the local repository setting.
+
+        File localRepository = new File( url.substring( "file://".length() ) );
+
+        if ( !localRepository.isAbsolute() )
+        {
+            url = "file://" + localRepository.getCanonicalPath();
+        }
+
+        return url;
+    }
+
+    public ArtifactRepository createRepository( String url,
+                                                String repositoryId )
+    {
+        // snapshots vs releases
+        // offline = to turning the update policy off
+
+        //TODO: we'll need to allow finer grained creation of repositories but this will do for now
+
+        String updatePolicyFlag = ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS;
+
+        String checksumPolicyFlag = ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN;
+
+        ArtifactRepositoryPolicy snapshotsPolicy =
+            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
+
+        ArtifactRepositoryPolicy releasesPolicy =
+            new ArtifactRepositoryPolicy( true, updatePolicyFlag, checksumPolicyFlag );
+
+        return artifactRepositoryFactory.createArtifactRepository( repositoryId, url, defaultArtifactRepositoryLayout,
+                                                                   snapshotsPolicy, releasesPolicy );
+    }
+
+    // ----------------------------------------------------------------------------
+    // Configuration
+    // ----------------------------------------------------------------------------
+
+    public Configuration getConfiguration()
+    {
+        return configuration;
+    }
+
+
-                request = defaultsPopulator.populateDefaults( request, embedderRequest );
+                request = defaultsPopulator.populateDefaults( request, this );

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV23 MOV31 MOV31 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 UPD83 INS83 INS83 UPD43 UPD83 INS83 INS83 UPD43 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 MOV43 UPD42 MOV83 INS83 INS39 UPD42 MOV42 MOV44 MOV44 MOV43 INS8 INS83 INS83 MOV43 INS42 MOV44 MOV43 MOV43 INS8 MOV83 MOV83 INS43 INS42 MOV44 INS8 INS83 MOV43 INS42 MOV44 MOV43 INS8 MOV43 MOV44 MOV43 INS8 UPD83 INS43 UPD42 MOV44 MOV43 INS43 INS42 UPD42 UPD42 INS32 UPD42 UPD42 INS14 UPD42 MOV42 INS42 INS32 INS42 INS14 INS42 INS14 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD43 INS41 UPD42 INS60 INS60 INS60 INS25 INS60 MOV60 INS60 INS60 MOV60 INS54 UPD42 MOV60 INS60 INS60 INS54 INS60 INS60 UPD43 UPD42 INS42 UPD43 UPD42 INS60 INS25 MOV60 INS54 INS25 INS41 INS60 MOV25 INS25 INS25 INS41 INS43 INS42 INS54 INS42 MOV25 INS60 INS25 INS41 INS42 INS42 INS42 INS45 INS43 INS42 INS45 INS42 INS42 INS45 MOV43 INS42 INS45 MOV43 INS42 INS45 UPD42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 UPD43 INS43 INS59 INS43 INS59 UPD43 INS8 INS8 UPD43 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS43 INS59 INS43 INS59 UPD42 UPD42 INS43 INS59 INS27 INS8 INS43 INS8 INS12 INS12 INS12 MOV27 INS8 INS42 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS42 INS8 INS12 INS25 MOV43 INS59 INS38 INS8 INS42 INS42 INS42 UPD42 MOV42 INS42 INS14 UPD42 MOV42 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS53 UPD42 MOV42 INS42 INS14 UPD42 UPD42 INS14 INS42 INS42 INS14 UPD42 MOV42 INS42 INS16 UPD42 UPD42 INS32 MOV21 INS21 UPD42 UPD42 MOV14 UPD42 MOV42 INS42 INS14 INS42 INS42 INS14 INS60 INS60 MOV25 INS41 INS44 INS8 MOV21 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 UPD42 INS54 UPD42 MOV42 INS42 INS14 INS32 INS33 INS21 INS42 UPD42 MOV21 MOV21 INS44 INS8 MOV44 INS8 INS44 INS8 INS32 INS54 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS40 MOV41 INS44 INS8 INS27 INS8 INS42 INS14 INS32 INS21 MOV43 INS42 UPD43 MOV43 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS45 INS43 INS42 UPD43 MOV43 INS27 INS32 INS45 INS32 INS42 INS42 INS32 UPD42 INS43 INS43 INS43 INS59 INS43 INS59 UPD27 INS42 INS43 INS42 INS53 INS32 INS42 INS42 INS43 INS42 INS42 INS33 INS33 UPD42 UPD42 UPD42 INS8 INS12 INS43 INS42 INS42 INS32 INS32 INS43 INS42 INS21 UPD43 INS21 INS43 INS42 INS21 INS42 INS42 INS8 INS12 INS12 INS12 INS42 INS42 INS7 INS7 INS7 INS43 INS42 INS53 INS32 INS38 INS21 INS43 INS32 UPD42 MOV42 INS42 INS7 UPD42 MOV43 INS27 UPD42 MOV42 INS42 UPD42 INS32 MOV33 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS32 INS34 INS53 UPD42 MOV42 INS14 UPD42 UPD42 INS14 INS42 INS42 INS42 UPD42 INS25 MOV21 INS44 INS8 UPD42 MOV42 INS42 INS42 INS40 UPD42 INS14 INS42 INS42 INS42 INS32 UPD42 INS32 UPD42 MOV42 INS32 INS21 MOV21 INS44 INS8 MOV44 INS8 INS44 INS8 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 UPD42 INS42 INS14 INS42 INS42 INS45 INS32 INS7 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS27 INS45 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS14 MOV43 INS45 INS42 INS43 INS52 UPD42 UPD42 UPD43 UPD42 UPD42 INS27 INS8 INS43 INS42 INS21 MOV43 INS32 UPD43 MOV43 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS9 INS7 INS43 INS42 MOV21 UPD43 INS21 INS43 INS42 MOV21 INS32 INS42 INS42 INS42 INS40 INS42 UPD42 UPD42 MOV43 INS27 INS42 INS42 INS42 INS45 INS42 INS27 INS45 UPD42 MOV42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS43 INS27 INS42 UPD42 UPD40 UPD42 INS32 INS33 INS21 INS42 INS7 INS42 INS42 UPD42 INS42 INS14 INS14 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 UPD42 INS42 INS42 INS32 UPD42 INS42 INS14 UPD43 MOV43 INS32 INS43 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS42 INS9 UPD42 UPD42 INS9 INS42 INS42 INS32 INS52 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS42 UPD42 UPD42 INS43 UPD42 INS42 INS42 INS42 INS45 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL17 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL17 DEL8 DEL31 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL45 DEL42 DEL14 DEL42 DEL17 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL17 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL42 DEL33 DEL32 DEL21 DEL42 DEL33 DEL83 DEL83 DEL42 DEL42 DEL44 DEL42 DEL43 DEL33 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL14 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL11 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL32 DEL41 DEL8 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL43 DEL8 DEL31 DEL39 DEL42 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL8 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL8 DEL25 DEL43 DEL42 DEL59 DEL60 DEL8 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL12 DEL83 DEL83 DEL83 DEL42 DEL40 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL40 DEL59 DEL23 DEL9 DEL42 DEL42 DEL32 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL33 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL32 DEL11 DEL7 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL8 DEL42 DEL32 DEL32 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42