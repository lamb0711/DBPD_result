[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.LinkedHashSet;
-import java.util.Set;
-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
-import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.artifact.resolver.ResolutionErrorHandler;
-import org.apache.maven.artifact.resolver.filter.AndArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.artifact.resolver.filter.ScopeArtifactFilter;
+import org.apache.maven.RepositoryUtils;
-import org.apache.maven.repository.RepositorySystem;
+import org.codehaus.plexus.logging.Logger;
+import org.sonatype.aether.RepositorySystem;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.artifact.Artifact;
+import org.sonatype.aether.collection.CollectRequest;
+import org.sonatype.aether.collection.DependencyCollectionException;
+import org.sonatype.aether.collection.DependencyGraphTransformer;
+import org.sonatype.aether.collection.DependencySelector;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.graph.DependencyNode;
+import org.sonatype.aether.graph.DependencyVisitor;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.resolution.ArtifactRequest;
+import org.sonatype.aether.resolution.ArtifactResolutionException;
+import org.sonatype.aether.util.DefaultRepositorySystemSession;
+import org.sonatype.aether.util.artifact.DefaultArtifact;
+import org.sonatype.aether.util.artifact.JavaScopes;
+import org.sonatype.aether.util.filter.AndDependencyFilter;
+import org.sonatype.aether.util.filter.ExclusionsDependencyFilter;
+import org.sonatype.aether.util.filter.ScopeDependencyFilter;
+import org.sonatype.aether.util.graph.selector.AndDependencySelector;
+import org.sonatype.aether.util.graph.transformer.ChainedDependencyGraphTransformer;
-    @Requirement
-    protected RepositorySystem repositorySystem;
+    private static final String REPOSITORY_CONTEXT = "plugin";
-    private ResolutionErrorHandler resolutionErrorHandler;
+    private Logger logger;
-    public Artifact resolve( Plugin plugin, ArtifactResolutionRequest request )
+    @Requirement
+    private RepositorySystem repoSystem;
+
+    private Artifact toArtifact( Plugin plugin, RepositorySystemSession session )
+    {
+        return new DefaultArtifact( plugin.getGroupId(), plugin.getArtifactId(), null, "jar", plugin.getVersion(),
+                                    session.getArtifactTypeRegistry().get( "maven-plugin" ) );
+    }
+
+    public Artifact resolve( Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session )
-        Artifact pluginArtifact = repositorySystem.createPluginArtifact( plugin );
-
-        request.setArtifact( pluginArtifact );
-        request.setResolveRoot( true );
-        request.setResolveTransitively( false );
-
-        ArtifactResolutionResult result = repositorySystem.resolve( request );
+        Artifact pluginArtifact = toArtifact( plugin, session );
-            resolutionErrorHandler.throwErrors( request, result );
+            ArtifactRequest request = new ArtifactRequest( pluginArtifact, repositories, REPOSITORY_CONTEXT );
+            pluginArtifact = repoSystem.resolveArtifact( session, request ).getArtifact();
-    public List<Artifact> resolve( Plugin plugin, Artifact pluginArtifact, ArtifactResolutionRequest request,
-                                   ArtifactFilter dependencyFilter )
+    public DependencyNode resolve( Plugin plugin, Artifact pluginArtifact, DependencyFilter dependencyFilter,
+                                   List<RemoteRepository> repositories, RepositorySystemSession session )
-            pluginArtifact = repositorySystem.createPluginArtifact( plugin );
+            pluginArtifact = toArtifact( plugin, session );
-        Set<Artifact> overrideArtifacts = new LinkedHashSet<Artifact>();
-        for ( Dependency dependency : plugin.getDependencies() )
-        {
-	          if ( !Artifact.SCOPE_SYSTEM.equals( dependency.getScope() ) )
-	          {
-	              dependency.setScope( Artifact.SCOPE_RUNTIME );
-	          }
-            overrideArtifacts.add( repositorySystem.createDependencyArtifact( dependency ) );
-        }
+        DependencyFilter collectionFilter = new ScopeDependencyFilter( "provided", "test" );
-        ArtifactFilter collectionFilter = new ScopeArtifactFilter( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM );
+        DependencyFilter resolutionFilter =
+            new ExclusionsDependencyFilter( artifactFilterManager.getCoreArtifactExcludes() );
+        resolutionFilter = AndDependencyFilter.newInstance( resolutionFilter, dependencyFilter );
+        resolutionFilter = new AndDependencyFilter( collectionFilter, resolutionFilter );
-        ArtifactFilter resolutionFilter = artifactFilterManager.getCoreArtifactFilter();
-
-        PluginDependencyResolutionListener listener = new PluginDependencyResolutionListener( resolutionFilter );
-
-        if ( dependencyFilter != null )
-        {
-            resolutionFilter = new AndArtifactFilter( Arrays.asList( resolutionFilter, dependencyFilter ) );
-        }
-
-        request.setArtifact( pluginArtifact );
-        request.setArtifactDependencies( overrideArtifacts );
-        request.setCollectionFilter( collectionFilter );
-        request.setResolutionFilter( resolutionFilter );
-        request.setResolveRoot( true );
-        request.setResolveTransitively( true );
-        request.addListener( listener );
-
-        ArtifactResolutionResult result = repositorySystem.resolve( request );
+        DependencyNode node;
-            resolutionErrorHandler.throwErrors( request, result );
+            DependencySelector selector =
+                AndDependencySelector.newInstance( session.getDependencySelector(), new WagonExcluder() );
+
+            DependencyGraphTransformer transformer =
+                ChainedDependencyGraphTransformer.newInstance( session.getDependencyGraphTransformer(),
+                                                               new PlexusUtilsInjector() );
+
+            DefaultRepositorySystemSession pluginSession = new DefaultRepositorySystemSession( session );
+            pluginSession.setDependencySelector( selector );
+            pluginSession.setDependencyGraphTransformer( transformer );
+
+            CollectRequest request = new CollectRequest();
+            request.setRequestContext( REPOSITORY_CONTEXT );
+            request.setRepositories( repositories );
+            request.setRoot( new org.sonatype.aether.graph.Dependency( pluginArtifact, null ) );
+            for ( Dependency dependency : plugin.getDependencies() )
+            {
+                org.sonatype.aether.graph.Dependency pluginDep =
+                    RepositoryUtils.toDependency( dependency, session.getArtifactTypeRegistry() );
+                if ( !JavaScopes.SYSTEM.equals( pluginDep.getScope() ) )
+                {
+                    pluginDep = pluginDep.setScope( JavaScopes.RUNTIME );
+                }
+                request.addDependency( pluginDep );
+            }
+
+            node = repoSystem.collectDependencies( pluginSession, request ).getRoot();
+
+            if ( logger.isDebugEnabled() )
+            {
+                node.accept( new GraphLogger() );
+            }
+
+            repoSystem.resolveDependencies( session, node, resolutionFilter );
+        }
+        catch ( DependencyCollectionException e )
+        {
+            throw new PluginResolutionException( plugin, e );
-        List<Artifact> pluginArtifacts = new ArrayList<Artifact>( result.getArtifacts() );
-
-        listener.removeBannedDependencies( pluginArtifacts );
-
-        addPlexusUtils( pluginArtifacts, plugin, request );
-
-        return pluginArtifacts;
+        return node;
-    // backward-compatibility with Maven 2.x
-    private void addPlexusUtils( List<Artifact> pluginArtifacts, Plugin plugin, RepositoryRequest repositoryRequest )
-        throws PluginResolutionException
+    class GraphLogger
+        implements DependencyVisitor
-        for ( Artifact artifact : pluginArtifacts )
+
+        private String indent = "";
+
+        public boolean visitEnter( DependencyNode node )
-            if ( "org.codehaus.plexus:plexus-utils:jar".equals( artifact.getDependencyConflictId() ) )
+            StringBuilder buffer = new StringBuilder( 128 );
+            buffer.append( indent );
+            org.sonatype.aether.graph.Dependency dep = node.getDependency();
+            if ( dep != null )
-                return;
+                org.sonatype.aether.artifact.Artifact art = dep.getArtifact();
+
+                buffer.append( art );
+                buffer.append( ':' ).append( dep.getScope() );
+
+                if ( node.getPremanagedScope() != null && !node.getPremanagedScope().equals( dep.getScope() ) )
+                {
+                    buffer.append( " (scope managed from " ).append( node.getPremanagedScope() ).append( ")" );
+                }
+
+                if ( node.getPremanagedVersion() != null && !node.getPremanagedVersion().equals( art.getVersion() ) )
+                {
+                    buffer.append( " (version managed from " ).append( node.getPremanagedVersion() ).append( ")" );
+                }
+
+            logger.debug( buffer.toString() );
+            indent += "   ";
+            return true;
-        Artifact plexusUtils =
-            repositorySystem.createArtifact( "org.codehaus.plexus", "plexus-utils", "1.1", Artifact.SCOPE_RUNTIME,
-                                             "jar" );
-
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest( repositoryRequest );
-        request.setArtifact( plexusUtils );
-        request.setResolveRoot( true );
-        request.setResolveTransitively( false );
-
-        ArtifactResolutionResult result = repositorySystem.resolve( request );
-        try
+        public boolean visitLeave( DependencyNode node )
-            resolutionErrorHandler.throwErrors( request, result );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new PluginResolutionException( plugin, e );
+            indent = indent.substring( 0, indent.length() - 3 );
+            return true;
-        pluginArtifacts.add( plexusUtils );

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 UPD43 UPD83 UPD83 MOV83 MOV43 UPD42 MOV42 MOV44 MOV44 INS8 INS83 MOV43 INS42 MOV44 INS44 INS44 MOV43 INS8 MOV83 INS43 MOV42 MOV44 MOV44 MOV44 INS44 MOV44 MOV43 INS8 INS42 INS43 INS23 MOV31 INS31 INS42 INS42 INS45 UPD42 UPD42 UPD42 UPD43 UPD42 INS41 UPD74 MOV74 INS42 INS43 INS42 INS60 INS54 MOV41 INS42 UPD43 UPD42 UPD74 MOV74 INS42 UPD43 UPD42 MOV25 MOV60 INS60 MOV21 INS21 INS60 INS54 INS41 UPD42 MOV42 INS83 INS43 INS59 UPD83 UPD39 UPD42 INS8 INS83 INS39 INS42 INS44 INS8 UPD42 INS14 INS43 INS42 MOV43 INS59 INS8 MOV12 UPD42 UPD43 UPD42 INS43 INS43 INS59 INS7 INS7 INS43 INS59 INS8 MOV12 MOV12 INS42 UPD42 MOV42 INS42 INS45 INS43 INS42 INS60 INS21 MOV60 INS25 MOV21 INS21 INS41 INS43 INS42 INS21 INS41 INS43 INS32 INS32 INS33 INS45 INS32 INS32 INS42 INS42 INS32 MOV60 MOV21 UPD42 UPD42 MOV42 UPD42 INS42 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS42 MOV60 MOV60 MOV60 INS21 INS21 INS60 MOV21 MOV21 MOV21 INS70 MOV21 INS25 MOV21 UPD42 MOV42 INS43 INS59 INS32 UPD43 INS27 INS8 INS7 INS9 INS42 INS7 INS9 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 INS42 INS32 UPD42 MOV42 INS45 UPD42 MOV42 INS42 UPD42 MOV42 UPD43 INS7 INS43 INS45 INS45 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS42 UPD43 UPD43 UPD43 INS32 INS32 INS43 INS59 MOV44 MOV32 INS8 INS7 INS32 INS8 UPD43 UPD42 MOV42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 INS42 INS33 MOV60 MOV21 MOV21 INS25 INS25 UPD42 UPD42 INS32 INS42 INS45 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS14 INS42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 INS14 INS60 INS25 MOV21 INS42 INS32 INS42 INS42 INS21 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS34 UPD42 UPD42 UPD43 INS32 INS27 INS8 INS27 INS8 UPD42 MOV42 INS42 INS42 INS42 INS34 INS27 INS43 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS32 INS14 UPD42 INS42 INS32 INS14 UPD43 UPD42 INS43 INS43 INS42 INS33 INS43 INS59 INS38 INS8 INS32 INS42 INS32 MOV43 UPD42 MOV42 INS40 UPD42 INS32 UPD42 UPD42 UPD42 INS32 INS42 INS32 INS27 INS38 MOV21 INS27 INS38 MOV21 INS32 INS34 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 UPD43 MOV43 INS42 UPD42 MOV42 INS43 UPD42 INS42 INS40 INS40 INS42 INS32 INS32 MOV21 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS13 INS42 INS42 INS32 INS33 INS32 INS32 INS32 INS33 INS32 INS32 INS42 INS42 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS40 INS42 INS32 INS7 INS43 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL40 DEL32 DEL40 DEL14 DEL42 DEL9 DEL32 DEL9 DEL32 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL45 DEL45 DEL45 DEL40 DEL45 DEL42 DEL42 DEL43 DEL42 DEL14 DEL9 DEL32 DEL9 DEL32 DEL32 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL45 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL54 DEL8 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL9 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL40 DEL42 DEL32 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL54 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31