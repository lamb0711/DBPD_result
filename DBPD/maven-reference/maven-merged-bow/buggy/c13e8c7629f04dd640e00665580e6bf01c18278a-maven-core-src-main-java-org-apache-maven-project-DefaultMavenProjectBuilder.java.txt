PR: MNG-74
remove maven.properties use everywhere except classworlds conf


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163024 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Properties;
-    public static final String MAVEN_PROPERTIES = "maven.properties";
-
-    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository )
+    public MavenProject build( File projectDescriptor )
-        return build( projectDescriptor, localRepository, false );
+        return build( projectDescriptor, false );
-     *  @todo we should be passing in some more configuration here so that maven.home.local can be used for user properties. Then, the new stuff should be unit tested.
+     *  @todo this is still not completely faithful to the "always override" method of the user POM: there is potential for settings not to be used in some rare circumstances. Some restructuring is necessary.
+     *  @todo we should be passing in some more configuration here so that maven home local can be used for user properties. Then, the new stuff should be unit tested.
-    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository, boolean resolveDependencies )
+    public MavenProject build( File projectDescriptor, boolean resolveDependencies )
+        String localRepositoryValue = null;
+
+            // TODO: rename to super-pom.xml so it is not used by the reactor
-            // TODO: use maven.home.local instead of user.home/.m2
+            // TODO: use maven home local instead of user.home/.m2
+                if ( localRepositoryValue == null && userModel.getLocal() != null && userModel.getLocal().getRepository() != null )
+                {
+                    localRepositoryValue = userModel.getLocal().getRepository();
+                }
+            if ( localRepositoryValue == null && superModel.getLocal() != null && superModel.getLocal().getRepository() != null )
+            {
+                localRepositoryValue = superModel.getLocal().getRepository();
+            }
+
+            // TODO: systemProperty in modello will make this redundant
+            localRepositoryValue = System.getProperty( "maven.repo.local", localRepositoryValue );
+
+            ArtifactRepository localRepository = null;
+            if ( localRepositoryValue != null )
+            {
+                localRepository = RepositoryUtils.localRepositoryToWagonRepository( localRepositoryValue );
+            }
+            else
+            {
+                throw new ProjectBuildingException( "A local repository must be specified" );
+            }
+
-
-                // Note that we don't currently support maven.properties here: this might be a better place to do
-                // the overrides though, if it is kept. If so, would need to process this regardless of the existence
-                // of pom.xml
-                project.setProperties( parent.getProperties() );
+            project.setLocalRepository( localRepository );
+            // @todo this should be in the super POM when interpolation works
-    /** @todo loading of project properties could be handled much more effeciently as they are never loaded from
-        the repository. However, I believe they should be removedC anyway and use the POM -- Brett. */
-        Map properties = createProjectProperties( projectDescriptor.getParentFile() );
-
-        project.setProperties( properties );
-
+    private void setupMavenFinalName( MavenProject project )
+    {
+        if ( project.getModel().getBuild().getFinalName() == null )
+        {
+            project.getModel().getBuild().setFinalName( project.getArtifactId() + "-" + project.getVersion() );
+        }
+    }
+
-            throw new ProjectBuildingException( "Missing parent POM: ", e );
-
+            // @todo use parent.toString() if modello could generate it, or specify in a code segment
+            throw new ProjectBuildingException( "Missing parent POM: " + 
+                parent.getGroupId() + ":" + 
+                parent.getArtifactId() + "-" + 
+                parent.getVersion(), e );
-    private void setupMavenFinalName( MavenProject project )
-    {
-        String mavenFinalName = project.getProperty( "maven.final.name" );
-
-        if ( mavenFinalName == null || mavenFinalName.indexOf( "${" ) >= 0 )
-        {
-            project.setProperty( "maven.final.name", project.getArtifactId() + "-" + project.getVersion() );
-        }
-    }
-
-    private Map createProjectProperties( File descriptorDirectory )
-    {
-        File f;
-
-        Properties systemProperties = System.getProperties();
-
-        f = new File( System.getProperty( "user.home" ), MAVEN_PROPERTIES );
-
-        Properties mavenProperties = PropertyUtils.loadProperties( f );
-
-        // project build properties
-        Properties userOverridesMavenProperties = null;
-
-        if ( descriptorDirectory != null )
-        {
-            f = new File( descriptorDirectory, MAVEN_PROPERTIES );
-
-            userOverridesMavenProperties = PropertyUtils.loadProperties( f );
-        }
-
-        Map result = CollectionUtils.mergeMaps( new Map[]
-        {
-            systemProperties,
-            mavenProperties,
-            userOverridesMavenProperties,
-        } );
-
-        // Set the basedir value in the context.
-        result.put( "basedir", descriptorDirectory.getAbsolutePath() );
-
-        for ( Iterator i = result.keySet().iterator(); i.hasNext(); )
-        {
-            String key = (String) i.next();
-
-            String value = (String) result.get( key );
-
-            result.put( key, StringUtils.interpolate( value, result ) );
-        }
-
-        return result;
-    }
-
-    // ----------------------------------------------------------------------
-    //
-    // 1. collect all the vertices for the projects that we want to build.
-    //
-    // 2. iterate through the deps of each project and if that dep is within
-    //    the set of projects we want to build then add an edge, otherwise throw
-    //    the edge away because that dependency is not within the set of projects
-    //    we are trying to build. we assume a closed set.
-    //
-    // 3. do a topo sort on the graph that remains.
-    //
-    // ----------------------------------------------------------------------
-
+    /**
+     * Sort a list of projects.
+     * <ul>
+     *  <li>collect all the vertices for the projects that we want to build.</li>
+     *  <li>iterate through the deps of each project and if that dep is within
+     *    the set of projects we want to build then add an edge, otherwise throw
+     *    the edge away because that dependency is not within the set of projects
+     *    we are trying to build. we assume a closed set.</li>
+     *  <li>do a topo sort on the graph that remains.</li>
+     * </ul>
+     */

MOV31 INS29 INS65 INS60 INS65 INS66 UPD66 MOV43 INS59 INS27 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS33 INS25 INS21 INS60 INS25 INS21 INS32 MOV33 INS27 INS8 INS7 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS42 INS25 INS27 INS27 INS21 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS27 INS8 INS27 INS27 INS32 INS33 INS7 INS42 INS42 INS45 INS42 INS7 INS14 INS42 INS42 INS32 INS42 INS27 INS27 INS27 INS21 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS45 MOV42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS27 INS27 INS32 INS33 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL27 DEL42 DEL42 DEL45 DEL32 DEL34 DEL27 DEL27 DEL45 DEL45 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL4 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31