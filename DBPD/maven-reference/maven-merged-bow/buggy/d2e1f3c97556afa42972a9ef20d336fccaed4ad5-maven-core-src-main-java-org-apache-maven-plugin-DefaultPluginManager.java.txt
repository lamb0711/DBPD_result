o Adding support for <executions/>, which means multiple runs of the same goal/set-of-goals with different configs.
o Adding @phase declarations for those mojos that seem to be part of the main build, just for completeness
o Added two ITs, to test that <executions/> doesn't mess up the normal operation, and to test multi-execution for a goal.

Should resolve: MNG-172.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@190335 13f79535-47bb-0310-9956-ffa450edef68

-//            String key = pluginDescriptor.getId();
+            //            String key = pluginDescriptor.getId();
-//        String key = PluginDescriptor.constructPluginKey( groupId, artifactId, version );
+        //        String key = PluginDescriptor.constructPluginKey( groupId, artifactId, version );
-//        String key = PluginDescriptor.constructPluginKey( groupId, artifactId, version );
+        //        String key = PluginDescriptor.constructPluginKey( groupId, artifactId, version );
-                                          ArtifactRepository localRepository )
+                                         ArtifactRepository localRepository )
-                throw new PluginManagerException( "Error occurred in the artifact container attempting to download plugin " +
-                                                  groupId + ":" + artifactId, e );
+                throw new PluginManagerException(
+                                                  "Error occurred in the artifact container attempting to download plugin "
+                                                      + groupId + ":" + artifactId, e );
-                if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
-                    version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
+                if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() )
+                    && version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
-                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":" +
-                                                  artifactId, e );
+                throw new PluginManagerException( "Internal configuration error while retrieving " + groupId + ":"
+                    + artifactId, e );
-                              ArtifactRepository localRepository )
+                             ArtifactRepository localRepository )
-            ArtifactResolutionResult result = artifactResolver.resolveTransitively(
-                Collections.singleton( pluginArtifact ), project.getRemoteArtifactRepositories(), localRepository,
-                metadataSource, artifactFilter );
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections
+                .singleton( pluginArtifact ), project.getRemoteArtifactRepositories(), localRepository, metadataSource,
+                                                                                    artifactFilter );
-    public void executeMojo( MavenSession session, MojoDescriptor mojoDescriptor )
+    public void executeMojo( MavenSession session, GoalInstance goalInstance )
+        MojoDescriptor mojoDescriptor = goalInstance.getMojoDescriptor();
+
-                resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder,
-                                               mojoDescriptor.isDependencyResolutionRequired() );
+                resolveTransitiveDependencies( session, artifactResolver, mavenProjectBuilder, mojoDescriptor
+                    .isDependencyResolutionRequired() );
-            String goalId = mojoDescriptor.getGoal();
+            String goalId = goalInstance.getGoalId();
-            Xpp3Dom dom = session.getProject().getGoalConfiguration( pluginDescriptor.getGroupId(),
-                                                                     pluginDescriptor.getArtifactId(), goalId );
+
+            Xpp3Dom dom = goalInstance.getCalculatedConfiguration();
-            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
-                                                                          mojoDescriptor.getMojoConfiguration() );
-            
+            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration, mojoDescriptor
+                .getMojoConfiguration() );
+
-//            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
-//                                                                          mojoDescriptor.getConfiguration() );
+            //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
+            //                                                                          mojoDescriptor.getConfiguration() );
+            
+            String goalExecId = goalName;
+            
+            if ( goalInstance.getExecutionId() != null )
+            {
+                goalExecId += " {execution: " + goalInstance.getExecutionId() + "}";
+            }
-            dispatcher.dispatchStart( event, goalName );
+            dispatcher.dispatchStart( event, goalExecId );
-                dispatcher.dispatchEnd( event, goalName );
+                dispatcher.dispatchEnd( event, goalExecId );
-                session.getEventDispatcher().dispatchError( event, goalName, e );
+                session.getEventDispatcher().dispatchError( event, goalExecId, e );
+                
-                                          ExpressionEvaluator expressionEvaluator, Mojo plugin )
+                                         ExpressionEvaluator expressionEvaluator, Mojo plugin )
-                            getLogger().warn( "DEPRECATED: using default-value to set the default value of field '" +
-                                              parameter.getName() + "'" );
+                            getLogger().warn(
+                                              "DEPRECATED: using default-value to set the default value of field '"
+                                                  + parameter.getName() + "'" );
-                    StringBuffer errorMessage = new StringBuffer().append(
-                        "ERROR: Cannot override read-only parameter: " );
+                    StringBuffer errorMessage = new StringBuffer()
+                        .append( "ERROR: Cannot override read-only parameter: " );
-                                       PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
+                                      PlexusContainer pluginContainer, ExpressionEvaluator expressionEvaluator )
-                configurator =
-                    (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE, configuratorId );
+                configurator = (ComponentConfigurator) pluginContainer.lookup( ComponentConfigurator.ROLE,
+                                                                               configuratorId );
-            configurator.configureComponent( plugin, configuration, expressionEvaluator,
-                                             pluginContainer.getContainerRealm() );
+            configurator.configureComponent( plugin, configuration, expressionEvaluator, pluginContainer
+                .getContainerRealm() );
-                "Unable to retrieve component configurator for plugin configuration", e );
+                                                    "Unable to retrieve component configurator for plugin configuration",
+                                                    e );
-                                                               String expression )
+                                                              String expression )
-        artifactFilter = new ExclusionSetFilter( new String[]{"classworlds", "maven-artifact", "maven-core",
-                                                              "maven-model", "maven-monitor", "maven-plugin-api",
-                                                              "maven-plugin-descriptor", "maven-project",
-                                                              "maven-settings", "plexus-container-default",
-                                                              "plexus-utils", "wagon-provider-api", "wagon-ssh",
-                                                              "wagon-http-lightweight", "wagon-file"} );
+        artifactFilter = new ExclusionSetFilter( new String[] {
+            "classworlds",
+            "maven-artifact",
+            "maven-core",
+            "maven-model",
+            "maven-monitor",
+            "maven-plugin-api",
+            "maven-plugin-descriptor",
+            "maven-project",
+            "maven-settings",
+            "plexus-container-default",
+            "plexus-utils",
+            "wagon-provider-api",
+            "wagon-ssh",
+            "wagon-http-lightweight",
+            "wagon-file" } );
-                                                MavenProjectBuilder mavenProjectBuilder, String scope )
+                                               MavenProjectBuilder mavenProjectBuilder, String scope )
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(),
-                                                                                context.getRemoteRepositories(),
-                                                                                context.getLocalRepository(),
-                                                                                sourceReader, filter );
+        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getArtifacts(), context
+            .getRemoteRepositories(), context.getLocalRepository(), sourceReader, filter );
-        artifactResolver.resolve( context.getProject().getParentArtifact(), context.getRemoteRepositories(),
-                                  context.getLocalRepository() );
+        artifactResolver.resolve( context.getProject().getParentArtifact(), context.getRemoteRepositories(), context
+            .getLocalRepository() );

INS43 INS42 INS60 INS42 MOV43 INS59 INS42 INS32 INS60 INS60 INS25 INS42 INS42 MOV43 INS59 INS43 INS59 INS27 INS8 MOV42 INS32 INS42 INS42 INS42 INS32 INS33 INS21 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS27 UPD42 INS45 INS32 INS45 UPD42 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60