First pass at cleaning up MavenExecutionRequestPopulator and its use.

Push MavenExecutionRequestPopulator down to only operate in the MavenCli. Two of the three methods were already called from MavenCli so now all of them are. In the process I deleted a bunch of code and pursue my quest to remove Settings from the core in order to make a general configuration mechanism that can be plugged into the core via the MavenCli.

Also removed the requirement of the LegacyRepositorySystem in the DefaultMavenExecutionRequestPopulator which breaks another tie with the legacy code. I took the bits that were needed and a lot of the code, after tracing through it, is redundant so it has been deleted.

Turning off:

injectMirror( request, request.getRemoteRepositories(), request.getMirrors() );
injectMirror( request, request.getPluginArtifactRepositories(), request.getMirrors() );

in DefaultMavenExecutionRequestPopulator

Results :

Failed tests:
  MavenITmng4190MirrorRepoMergingTest>AbstractMavenIntegrationTestCase.runTest:220->testit:76 null expected:<[1]> but was:<[4]>

Tests in error:
  MavenITmng4991NonProxyHostsTest>AbstractMavenIntegrationTestCase.runTest:220->testit:89 Â» Verification
  MavenITmng4963ParentResolutionFromMirrorTest>AbstractMavenIntegrationTestCase.runTest:220->testit:58 Â» Verification

There is mirror evaluation code in DefaultMaven:newRepositorySession( MavenExecutionRequest request ) which appears to
duplicate this logic but not quite enough for the ITs to pass.

---

Turning off:

injectProxy( request.getRemoteRepositories(), request.getProxies() );
injectProxy( request.getPluginArtifactRepositories(), request.getProxies() );

in

DefaultMavenExecutionRequestPopulator

Result:

The ITs pass

So the code is not needed so it has been deleted.

---

Turning off:

injectProxy( request.getRemoteRepositories(), request.getProxies() );
injectProxy( request.getPluginArtifactRepositories(), request.getProxies() );
injectAuthentication( request.getRemoteRepositories(), request.getServers() );
injectAuthentication( request.getPluginArtifactRepositories(), request.getServers() );

in

DefaultMavenExecutionRequestPopulator

Result:

The ITs pass

The code in DefaultMaven:newRepositorySession( MavenExecutionRequest request ) appears to populate proxies and authentication correctly. The injectAuthentication code has been deleted.

---

This is also perfunctory in DefaultMavenExecutionRequestPopulator after tracing through it:

request.setRemoteRepositories( getEffectiveRepositories( request, request.getRemoteRepositories() ) );
request.setPluginArtifactRepositories( getEffectiveRepositories( request, request.getPluginArtifactRepositories() ) );

+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Collections;
+import org.apache.maven.RepositoryUtils;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.metadata.ArtifactMetadata;
+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
+import org.apache.maven.artifact.repository.MavenArtifactRepository;
+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout2;
+//
+// All of this needs to go away and be couched in terms of the execution request
+//
+//
+// Settings in core
+//
-    private final RepositorySystem repositorySystem;
+    private static final String WILDCARD = "*";
+    private static final String EXTERNAL_WILDCARD = "external:*";
+
+    private final Map<String, ArtifactRepositoryLayout> layouts;
+        
-    public DefaultMavenExecutionRequestPopulator( RepositorySystem repositorySystem )
+    public DefaultMavenExecutionRequestPopulator( RepositorySystem repositorySystem, Map<String, ArtifactRepositoryLayout> layouts )
-        this.repositorySystem = repositorySystem;
+        this.layouts = layouts;
+    @Override
+    public MavenExecutionRequest populateDefaults( MavenExecutionRequest request )
+        throws MavenExecutionRequestPopulationException
+    {
+        baseDirectory( request );
+
+        localRepository( request );
+
+        populateDefaultPluginGroups( request );
+
+        injectDefaultRepositories( request );
+
+        injectDefaultPluginRepositories( request );
+
+        processRepositoriesInSettings( request );
+
+        return request;
+    }
+    
+    //
+    //
+    //
+    
-                request.addRemoteRepository( repositorySystem.createDefaultRemoteRepository() );
+                request.addRemoteRepository( createDefaultRemoteRepository( request ) );
-            catch ( InvalidRepositoryException e )
+            catch ( Exception e )
-                request.addPluginArtifactRepository( repositorySystem.createDefaultRemoteRepository() );
+                request.addPluginArtifactRepository( createDefaultRemoteRepository( request ) );
-            catch ( InvalidRepositoryException e )
+            catch ( Exception e )
+    private ArtifactRepository createDefaultRemoteRepository( MavenExecutionRequest request )
+        throws Exception
+    {
+        return createRepository( request, RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID,
+                                 true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY,
+                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
+    }
+    
+    private ArtifactRepository createRepository( MavenExecutionRequest request, String url, String repositoryId, boolean releases,
+                                                 String releaseUpdates, boolean snapshots, String snapshotUpdates,
+                                                 String checksumPolicy ) throws Exception
+    {
+        ArtifactRepositoryPolicy snapshotsPolicy =
+            new ArtifactRepositoryPolicy( snapshots, snapshotUpdates, checksumPolicy );
+
+        ArtifactRepositoryPolicy releasesPolicy =
+            new ArtifactRepositoryPolicy( releases, releaseUpdates, checksumPolicy );
+
+        return createArtifactRepository( repositoryId, url, "default", snapshotsPolicy, releasesPolicy, request );
+    }
+        
-        repositorySystem.injectMirror( request.getRemoteRepositories(), request.getMirrors() );
-        repositorySystem.injectProxy( request.getRemoteRepositories(), request.getProxies() );
-        repositorySystem.injectAuthentication( request.getRemoteRepositories(), request.getServers() );
-
-        request.setRemoteRepositories( repositorySystem.getEffectiveRepositories( request.getRemoteRepositories() ) );
-
-        repositorySystem.injectMirror( request.getPluginArtifactRepositories(), request.getMirrors() );
-        repositorySystem.injectProxy( request.getPluginArtifactRepositories(), request.getProxies() );
-        repositorySystem.injectAuthentication( request.getPluginArtifactRepositories(), request.getServers() );
-
-        request.setPluginArtifactRepositories( repositorySystem.getEffectiveRepositories( request.getPluginArtifactRepositories() ) );
+        //
+        //    <settings>
+        //      <mirrors>
+        //        <mirror>
+        //          <id>central</id>
+        //          <!-- NOTE: We need to try and use the proper host name/ip as Java generally ignores proxies for "localhost" -->
+        //          <url>http://10.0.1.34:62247/</url>
+        //          <mirrorOf>central</mirrorOf>
+        //        </mirror>
+        //      </mirrors>
+        //      <proxies>
+        //        <proxy>
+        //          <active>true</active>
+        //          <protocol>http</protocol>
+        //          <host>localhost</host>
+        //          <port>62248</port>
+        //          <nonProxyHosts>10.0.1.34</nonProxyHosts>
+        //        </proxy>
+        //      </proxies>
+        //      <profiles>
+        //        <profile>
+        //          <id>it-defaults</id>
+        //          <!-- disable central override and use built-in values -->
+        //        </profile>
+        //      </profiles>
+        //      <activeProfiles>
+        //        <activeProfile>it-defaults</activeProfile>
+        //      </activeProfiles>
+        //    </settings>
+        //
+        // Turns
+        //
+        // http://repo1.maven.org/maven2
+        //
+        // to
+        //
+        // http://10.0.1.34:62247/
+        //
+        // Not sure why the DefaultMirrorSelector doesn't do this...
+        //
+        injectMirror( request, request.getRemoteRepositories(), request.getMirrors() );
+        injectMirror( request, request.getPluginArtifactRepositories(), request.getMirrors() );
-    public ArtifactRepository createLocalRepository( MavenExecutionRequest request )
+    private ArtifactRepository createLocalRepository( MavenExecutionRequest request )
-            return repositorySystem.createLocalRepository( new File( localRepositoryPath ) );
+            return createLocalRepository( request, new File( localRepositoryPath ) );
-        catch ( InvalidRepositoryException e )
+        catch ( Exception e )
-
-    public MavenExecutionRequest populateDefaults( MavenExecutionRequest request )
-        throws MavenExecutionRequestPopulationException
+    
+    //
+    // Code taken from LegacyRepositorySystem
+    //
+        
+    private ArtifactRepository createLocalRepository( MavenExecutionRequest request, File localRepository )
+        throws Exception
-        baseDirectory( request );
+        return createRepository( request, "file://" + localRepository.toURI().getRawPath(),
+                                 RepositorySystem.DEFAULT_LOCAL_REPO_ID, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
+                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
+    }
+    
+    private void injectMirror( MavenExecutionRequest request, List<ArtifactRepository> repositories, List<Mirror> mirrors )
+    {
+        if ( repositories != null && mirrors != null )
+        {
+            for ( ArtifactRepository repository : repositories )
+            {
+                Mirror mirror = getMirror( repository, mirrors );
+                injectMirror( request, repository, mirror );
+            }
+        }
+    }   
-        localRepository( request );
+    private void injectMirror( MavenExecutionRequest request, ArtifactRepository repository, Mirror mirror )
+    {
+        if ( mirror != null )
+        {
+            ArtifactRepository original =
+                createArtifactRepository( repository.getId(), repository.getUrl(), repository.getLayout(),
+                                          repository.getSnapshots(), repository.getReleases(), request );
-        populateDefaultPluginGroups( request );
+            repository.setMirroredRepositories( Collections.singletonList( original ) );
-        injectDefaultRepositories( request );
+            repository.setId( mirror.getId() );
+            repository.setUrl( mirror.getUrl() );
-        injectDefaultPluginRepositories( request );
+            if ( StringUtils.isNotEmpty( mirror.getLayout() ) )
+            {
+                repository.setLayout( getLayout( mirror.getLayout() ) );
+            }
+        }
+    }    
+       
+    private ArtifactRepositoryLayout getLayout( String id )
+    {
+        ArtifactRepositoryLayout layout = layouts.get( id );
-        processRepositoriesInSettings( request );
+        if ( layout == null )
+        {
+            layout = new UnknownRepositoryLayout( id, layouts.get( "default" ) );
+        }
-        return request;
+        return layout;
+    /**
+     * In the future, the legacy system might encounter repository types for which no layout components exists because
+     * the actual communication with the repository happens via a repository connector. As a minimum, the legacy system
+     * needs to retain the id of this layout so that the content type of the remote repository can still be accurately
+     * described.
+     */
+    private static class UnknownRepositoryLayout
+        implements ArtifactRepositoryLayout
+    {
+
+        private final String id;
+
+        private final ArtifactRepositoryLayout fallback;
+
+        public UnknownRepositoryLayout( String id, ArtifactRepositoryLayout fallback )
+        {
+            this.id = id;
+            this.fallback = fallback;
+        }
+
+        @Override
+        public String getId()
+        {
+            return id;
+        }
+
+        @Override
+        public String pathOf( Artifact artifact )
+        {
+            return fallback.pathOf( artifact );
+        }
+
+        @Override
+        public String pathOfLocalRepositoryMetadata( ArtifactMetadata metadata, ArtifactRepository repository )
+        {
+            return fallback.pathOfLocalRepositoryMetadata( metadata, repository );
+        }
+
+        @Override
+        public String pathOfRemoteRepositoryMetadata( ArtifactMetadata metadata )
+        {
+            return fallback.pathOfRemoteRepositoryMetadata( metadata );
+        }
+
+        @Override
+        public String toString()
+        {
+            return getId();
+        }
+    }    
+    
+    //
+    // ArtifactRepositoryFactory
+    //
+    private ArtifactRepository createArtifactRepository( String id, String url, String layoutId,
+                                                        ArtifactRepositoryPolicy snapshots,
+                                                        ArtifactRepositoryPolicy releases,
+                                                        MavenExecutionRequest request )
+        throws Exception
+    {
+        ArtifactRepositoryLayout layout = layouts.get( layoutId );
+
+        checkLayout( id, layoutId, layout );
+
+        return createArtifactRepository( id, url, layout, snapshots, releases, request );
+    }
+
+    private ArtifactRepository createArtifactRepository( String id, String url,
+                                                        ArtifactRepositoryLayout repositoryLayout,
+                                                        ArtifactRepositoryPolicy snapshots,
+                                                        ArtifactRepositoryPolicy releases,
+                                                        MavenExecutionRequest request )
+    {
+        String globalChecksumPolicy = request.getGlobalChecksumPolicy();
+      
+        if ( snapshots == null )
+        {
+            snapshots = new ArtifactRepositoryPolicy();
+        }
+
+        if ( releases == null )
+        {
+            releases = new ArtifactRepositoryPolicy();
+        }
+
+        if ( globalChecksumPolicy != null )
+        {
+            snapshots.setChecksumPolicy( globalChecksumPolicy );
+            releases.setChecksumPolicy( globalChecksumPolicy );
+        }
+
+        ArtifactRepository repository;
+        if ( repositoryLayout instanceof ArtifactRepositoryLayout2 )
+        {
+            repository =
+                ( (ArtifactRepositoryLayout2) repositoryLayout ).newMavenArtifactRepository( id, url, snapshots,
+                                                                                             releases );
+        }
+        else
+        {
+            repository = new MavenArtifactRepository( id, url, repositoryLayout, snapshots, releases );
+        }
+
+        return repository;
+    }
+    
+    private void checkLayout( String repositoryId, String layoutId, ArtifactRepositoryLayout layout )
+        throws Exception
+    {
+        if ( layout == null )
+        {
+            throw new Exception( String.format( "Cannot find ArtifactRepositoryLayout instance for: %s %s", layoutId, repositoryId ) );
+        }
+    }
+    
+    //
+    // MirrorSelector
+    //
+    private Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )
+    {
+        String repoId = repository.getId();
+
+        if ( repoId != null && mirrors != null )
+        {
+            for ( Mirror mirror : mirrors )
+            {
+                if ( repoId.equals( mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
+                {
+                    return mirror;
+                }
+            }
+
+            for ( Mirror mirror : mirrors )
+            {
+                if ( matchPattern( repository, mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
+                {
+                    return mirror;
+                }
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * This method checks if the pattern matches the originalRepository. Valid patterns: * =
+     * everything external:* = everything not on the localhost and not file based. repo,repo1 = repo
+     * or repo1 *,!repo1 = everything except repo1
+     *
+     * @param originalRepository to compare for a match.
+     * @param pattern used for match. Currently only '*' is supported.
+     * @return true if the repository is a match to this pattern.
+     */
+    private boolean matchPattern( ArtifactRepository originalRepository, String pattern )
+    {
+        boolean result = false;
+        String originalId = originalRepository.getId();
+
+        // simple checks first to short circuit processing below.
+        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
+        {
+            result = true;
+        }
+        else
+        {
+            // process the list
+            String[] repos = pattern.split( "," );
+            for ( String repo : repos )
+            {
+                repo = repo.trim();
+                // see if this is a negative match
+                if ( repo.length() > 1 && repo.startsWith( "!" ) )
+                {
+                    if ( repo.substring( 1 ).equals( originalId ) )
+                    {
+                        // explicitly exclude. Set result and stop processing.
+                        result = false;
+                        break;
+                    }
+                }
+                // check for exact match
+                else if ( repo.equals( originalId ) )
+                {
+                    result = true;
+                    break;
+                }
+                // check for external:*
+                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
+                {
+                    result = true;
+                    // don't stop processing in case a future segment explicitly excludes this repo
+                }
+                else if ( WILDCARD.equals( repo ) )
+                {
+                    result = true;
+                    // don't stop processing in case a future segment explicitly excludes this repo
+                }
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Checks the URL to see if this repository refers to an external repository
+     *
+     * @param originalRepository
+     * @return true if external.
+     */
+    private boolean isExternalRepo( ArtifactRepository originalRepository )
+    {
+        try
+        {
+            URL url = new URL( originalRepository.getUrl() );
+            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" )
+                            || url.getProtocol().equals( "file" ) );
+        }
+        catch ( MalformedURLException e )
+        {
+            // bad url just skip it here. It should have been validated already, but the wagon lookup will deal with it
+            return false;
+        }
+    }
+
+    private boolean matchesLayout( ArtifactRepository repository, Mirror mirror )
+    {
+        return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );
+    }
+
+    /**
+     * Checks whether the layouts configured for a mirror match with the layout of the repository.
+     *
+     * @param repoLayout The layout of the repository, may be {@code null}.
+     * @param mirrorLayout The layouts supported by the mirror, may be {@code null}.
+     * @return {@code true} if the layouts associated with the mirror match the layout of the original repository,
+     *         {@code false} otherwise.
+     */
+    private boolean matchesLayout( String repoLayout, String mirrorLayout )
+    {
+        boolean result = false;
+
+        // simple checks first to short circuit processing below.
+        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
+        {
+            result = true;
+        }
+        else if ( mirrorLayout.equals( repoLayout ) )
+        {
+            result = true;
+        }
+        else
+        {
+            // process the list
+            String[] layouts = mirrorLayout.split( "," );
+            for ( String layout : layouts )
+            {
+                // see if this is a negative match
+                if ( layout.length() > 1 && layout.startsWith( "!" ) )
+                {
+                    if ( layout.substring( 1 ).equals( repoLayout ) )
+                    {
+                        // explicitly exclude. Set result and stop processing.
+                        result = false;
+                        break;
+                    }
+                }
+                // check for exact match
+                else if ( layout.equals( repoLayout ) )
+                {
+                    result = true;
+                    break;
+                }
+                else if ( WILDCARD.equals( layout ) )
+                {
+                    result = true;
+                    // don't stop processing in case a future segment explicitly excludes this repo
+                }
+            }
+        }
+
+        return result;
+    }    

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS74 INS44 INS78 UPD42 MOV44 MOV43 UPD42 MOV44 MOV43 MOV83 INS43 INS42 MOV44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 MOV39 MOV42 INS44 MOV43 INS8 UPD83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS43 UPD42 INS74 INS42 INS42 MOV60 MOV60 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS41 INS43 INS42 MOV21 MOV21 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS43 INS42 INS74 INS42 INS74 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS25 INS25 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS54 INS43 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 UPD42 MOV42 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 MOV32 MOV32 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS43 INS27 INS8 INS42 INS42 INS42 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS33 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS66 INS42 INS66 INS42 INS8 INS12 INS42 INS42 INS32 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS40 INS40 INS9 INS40 INS9 INS40 INS40 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 UPD42 MOV32 INS42 INS42 INS27 INS40 INS9 INS40 INS9 INS40 INS40 INS42 INS42 INS42 INS42 INS27 INS27 INS70 INS42 INS33 INS60 INS21 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS43 INS21 INS21 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS70 INS70 INS42 INS9 INS42 INS42 INS32 INS32 INS32 INS21 INS60 INS70 INS60 INS41 INS44 INS8 INS42 INS32 INS32 INS66 INS66 INS66 INS66 INS42 INS9 INS32 INS32 INS21 INS32 INS8 INS8 UPD42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD43 INS45 INS32 INS42 INS33 INS42 INS33 INS44 INS42 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS8 INS42 INS42 INS42 INS7 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS7 INS7 INS32 INS32 INS42 INS7 INS7 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS42 INS33 INS44 INS42 INS8 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS5 INS59 INS44 INS42 INS8 INS43 INS59 INS38 INS43 INS42 INS41 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS21 INS60 INS70 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS43 INS42 INS60 INS21 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS14 INS52 INS42 INS52 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS32 INS43 INS42 INS25 INS43 INS42 INS25 INS42 INS9 INS43 INS85 INS42 INS32 INS43 INS42 INS21 INS25 INS42 INS42 INS14 INS36 INS42 INS9 INS42 INS9 INS7 INS5 INS59 INS44 INS42 INS8 UPD43 UPD43 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS32 INS32 INS32 MOV32 MOV32 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS43 INS42 INS32 INS43 INS43 INS36 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS8 INS42 INS27 INS8 INS42 INS42 INS42 INS45 INS42 INS7 INS27 INS8 INS25 INS43 INS32 INS27 INS42 INS9 INS43 INS85 INS42 INS32 INS43 INS42 INS25 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS32 INS32 INS41 INS32 INS32 INS41 INS42 INS32 INS27 INS32 INS25 INS32 INS8 INS25 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS27 INS8 INS25 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS45 INS32 INS8 INS42 INS42 INS42 INS21 INS10 INS27 INS8 INS25 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS27 INS32 INS25 INS32 INS8 INS25 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS21 INS10 INS7 INS32 INS32 INS21 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS45 INS32 INS8 INS42 INS42 INS42 INS21 INS10 INS32 INS8 UPD42 MOV42 INS42 INS34 INS7 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS21 INS10 INS7 INS42 INS42 INS42 INS21 INS42 INS9 INS42 INS9 INS7 INS42 INS42 INS34 INS7 INS42 INS9 INS7 INS42 INS9 INS42 INS9 INS42 INS9 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL31