PR: MNG-613
Completion of the version selection from a range.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@279720 13f79535-47bb-0310-9956-ffa450edef68

-                // TODO: how can we find the latest release before something to facilitate ) at the end?
-                // Also, how can we find the latest release when there no RELEASE metadata? We need to be maintaining
-                // a version list in the repository
+
+    public boolean isSelectedVersionKnown()
+        throws OverConstrainedVersionException
+    {
+        boolean value;
+        if ( recommendedVersion != null )
+        {
+            value = true;
+        }
+        else
+        {
+            if ( restrictions.size() == 0 )
+            {
+                throw new OverConstrainedVersionException( "The artifact has no valid ranges" );
+            }
+            else
+            {
+                Restriction restriction = (Restriction) restrictions.get( restrictions.size() - 1 );
+
+                if ( restriction.getUpperBound() == null )
+                {
+                    // RELEASE version, considered known
+                    value = true;
+                }
+                else
+                {
+                    value = restriction.isUpperBoundInclusive();
+                }
+            }
+        }
+        return value;
+    }
+
+
+    public ArtifactVersion matchVersion( List versions )
+    {
+        // TODO: could be more efficient by sorting the list and then moving along the restrictions in order?
+
+        ArtifactVersion matched = null;
+        for ( Iterator i = versions.iterator(); i.hasNext(); )
+        {
+            ArtifactVersion version = (ArtifactVersion) i.next();
+            if ( containsVersion( version ) )
+            {
+                // valid - check if it is greater than the currently matched version
+                if ( matched == null || version.compareTo( matched ) > 0 )
+                {
+                    matched = version;
+                }
+            }
+        }
+        return matched;
+    }
+
+    private boolean containsVersion( ArtifactVersion version )
+    {
+        boolean matched = false;
+        for ( Iterator i = restrictions.iterator(); i.hasNext() && !matched; )
+        {
+            Restriction restriction = (Restriction) i.next();
+            if ( restriction.containsVersion( version ) )
+            {
+                matched = true;
+            }
+        }
+        return matched;
+    }

INS31 INS31 INS31 INS83 INS39 INS42 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS60 INS24 INS41 INS43 INS42 INS60 INS24 INS41 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS39 INS59 INS58 INS27 INS8 INS42 INS42 INS42 INS33 INS21 INS25 INS42 INS42 INS33 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS9 INS43 INS59 INS32 INS38 INS60 INS25 INS7 INS27 INS8 INS8 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS9 INS32 INS34 INS53 INS60 INS25 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS21 INS42 INS42 INS14 INS43 INS59 INS27 INS8 INS8 INS43 INS32 INS27 INS8 INS43 INS32 INS7 INS43 INS45 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS42 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS42 INS42 INS9 INS42 INS43 INS32 INS42 INS42 INS7 INS7 INS42 INS33 INS32 INS34 INS7 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42