Adding the beginnings of a workspace to Maven, which is just a shared cache component for project, model, and POM file instances (for now). This allows fine-grained control over when such caches are cleared in environments where embedder instances may be reused multiple times, and will eventually enable new profile activators that require access to project information in the current build along with other advanced caching and cache-querying features.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@632482 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.monitor.event.EventMonitor;
+import org.apache.maven.monitor.event.MavenWorkspaceMonitor;
+import org.apache.maven.monitor.event.PerCallWorkspaceMonitor;
+import org.apache.maven.workspace.MavenWorkspaceStore;
+    private MavenWorkspaceStore workspaceManager;
+
+        eventMonitors( request, configuration );
+
+        workspaceMonitor( request, configuration );
+
+    private void workspaceMonitor( MavenExecutionRequest request,
+                                   Configuration configuration )
+    {
+        MavenWorkspaceMonitor workspaceMonitor = request.getWorkspaceMonitor();
+
+        if ( workspaceMonitor == null )
+        {
+            workspaceMonitor = configuration.getWorkspaceMonitor();
+        }
+
+        List requestEventMonitors = request.getEventMonitors();
+        if ( ( requestEventMonitors != null ) && !requestEventMonitors.isEmpty() )
+        {
+            for ( Iterator it = requestEventMonitors.iterator(); it.hasNext(); )
+            {
+                Object monitor = it.next();
+                if ( monitor instanceof MavenWorkspaceMonitor )
+                {
+                    if ( workspaceMonitor == null )
+                    {
+                        workspaceMonitor = (MavenWorkspaceMonitor) monitor;
+                    }
+                    it.remove();
+                    break;
+                }
+            }
+        }
+
+        if ( workspaceMonitor == null )
+        {
+            workspaceMonitor = new PerCallWorkspaceMonitor();
+        }
+
+        workspaceMonitor.setWorkspaceStore( workspaceManager );
+
+        request.addEventMonitor( workspaceMonitor );
+    }
+
+    private void eventMonitors( MavenExecutionRequest request,
+                                Configuration configuration )
+    {
+        List configEventMonitors = configuration.getEventMonitors();
+
+        if ( ( configEventMonitors != null ) && !configEventMonitors.isEmpty() )
+        {
+            for ( Iterator it = configEventMonitors.iterator(); it.hasNext(); )
+            {
+                EventMonitor monitor = (EventMonitor) it.next();
+                request.addEventMonitor( monitor );
+            }
+        }
+    }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS21 INS21 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS25 INS21 INS21 INS43 INS42 INS43 INS42 INS60 INS25 INS32 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS36 INS38 INS24 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS36 INS38 INS24 INS42 INS42 INS7 INS42 INS42 INS27 INS32 INS58 INS32 INS8 INS7 INS42 INS42 INS27 INS32 INS58 INS32 INS8 INS42 INS32 INS42 INS33 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS14 INS42 INS33 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS62 INS8 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS25 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS32 INS43 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS11 INS43 INS42 INS42