[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.io.IOException;
+import org.apache.maven.RepositoryUtils;
-import org.apache.maven.artifact.repository.DefaultRepositoryRequest;
-import org.apache.maven.artifact.repository.metadata.Metadata;
-import org.apache.maven.artifact.repository.metadata.Snapshot;
-import org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata;
-import org.apache.maven.artifact.repository.metadata.Versioning;
-import org.apache.maven.repository.DefaultLocalRepositoryMaintainerEvent;
-import org.apache.maven.repository.LocalRepositoryMaintainer;
-import org.apache.maven.repository.LocalRepositoryMaintainerEvent;
-import org.apache.maven.repository.legacy.TransferListenerAdapter;
-import org.apache.maven.repository.legacy.WagonManager;
-import org.apache.maven.repository.legacy.metadata.ArtifactMetadata;
-import org.apache.maven.repository.legacy.resolver.transform.ArtifactTransformationManager;
-import org.apache.maven.wagon.ResourceDoesNotExistException;
-import org.apache.maven.wagon.TransferFailedException;
-import org.codehaus.plexus.util.FileUtils;
+import org.sonatype.aether.RepositorySystem;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.resolution.ArtifactRequest;
+import org.sonatype.aether.resolution.ArtifactResult;
+import org.sonatype.aether.util.DefaultRepositorySystemSession;
-@Component( role = ArtifactResolver.class )
+@Component(role = ArtifactResolver.class)
-    @Requirement
+    @Requirement 
-    private WagonManager wagonManager;
-
-    @Requirement
-    private ArtifactTransformationManager transformationManager;
-
-    @Requirement
-
+    
-    @Requirement( optional = true )
-    private LocalRepositoryMaintainer localRepositoryMaintainer;
-
+    @Requirement
+    private RepositorySystem repoSystem;
+
+    private RepositorySystemSession getSession( ArtifactRepository localRepository )
+    {
+        MavenSession mavenSession = legacySupport.getSession();
+        DefaultRepositorySystemSession session;
+        if ( mavenSession != null )
+        {
+            session = new DefaultRepositorySystemSession( mavenSession.getRepositorySession() );
+        }
+        else
+        {
+            session = new DefaultRepositorySystemSession();
+        }
+        if ( localRepository != null && localRepository.getBasedir() != null )
+        {
+            LocalRepository localRepo = new LocalRepository( localRepository.getBasedir() );
+            session.setLocalRepositoryManager( repoSystem.newLocalRepositoryManager( localRepo ) );
+        }
+        return session;
+    }
+
-            request.setTransferListener( session.getRequest().getTransferListener() );
-    public void resolve( Artifact artifact, List<ArtifactRepository> remoteRepositories,
-                         ArtifactRepository localRepository, TransferListener resolutionListener )
+    public void resolve( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, TransferListener resolutionListener )
-        RepositoryRequest request = new DefaultRepositoryRequest();
-        injectSession1( request, legacySupport.getSession() );
-        request.setLocalRepository( localRepository );
-        request.setRemoteRepositories( remoteRepositories );
-        resolve( artifact, request, resolutionListener, false );
+        resolve( artifact, remoteRepositories, getSession( localRepository ) );
-    public void resolveAlways( Artifact artifact, List<ArtifactRepository> remoteRepositories,
-                               ArtifactRepository localRepository )
+    public void resolveAlways( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository )
-        RepositoryRequest request = new DefaultRepositoryRequest();
-        injectSession1( request, legacySupport.getSession() );
-        request.setLocalRepository( localRepository );
-        request.setRemoteRepositories( remoteRepositories );
-        resolve( artifact, request, null, true );
+        resolve( artifact, remoteRepositories, getSession( localRepository ) );
-    private void resolve( Artifact artifact, RepositoryRequest request, TransferListener downloadMonitor,
-                          boolean force )
+    private void resolve( Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session )
-
-        File destination;
-
+        
-                throw new ArtifactNotFoundException( "System artifact: " + artifact + " has no file attached",
-                                                     artifact );
+                throw new ArtifactNotFoundException( "System artifact: " + artifact + " has no file attached", artifact );
-                throw new ArtifactNotFoundException( "System artifact: " + artifact + " not found in path: "
-                    + systemFile, artifact );
+                throw new ArtifactNotFoundException( "System artifact: " + artifact + " not found in path: " + systemFile, artifact );
-                throw new ArtifactNotFoundException( "System artifact: " + artifact + " is not a file: " + systemFile,
-                                                     artifact );
+                throw new ArtifactNotFoundException( "System artifact: " + artifact + " is not a file: " + systemFile, artifact );
-
+            
-        ArtifactRepository localRepository = request.getLocalRepository();
-
-        List<ArtifactRepository> remoteRepositories = request.getRemoteRepositories();
-
-            // ----------------------------------------------------------------------
-            // Check for the existence of the artifact in the specified local
-            // ArtifactRepository. If it is present then simply return as the
-            // request for resolution has been satisfied.
-            // ----------------------------------------------------------------------
+            ArtifactResult result;
-            artifact = localRepository.find( artifact );
-
-            if ( artifact.isResolved() )
+            try
-                return;
+                ArtifactRequest artifactRequest = new ArtifactRequest();
+                artifactRequest.setArtifact( RepositoryUtils.toArtifact( artifact ) );
+                artifactRequest.setRepositories( RepositoryUtils.toRepos( remoteRepositories ) );
+                result = repoSystem.resolveArtifact( session, artifactRequest );
-
-            transformationManager.transformForResolve( artifact, request );
-
-            destination = artifact.getFile();
-
-            if ( !request.isOffline() && ( force || !destination.exists() || isMutable( artifact ) ) )
+            catch ( org.sonatype.aether.resolution.ArtifactResolutionException e )
-                try
-                {
-                    if ( artifact.getRepository() != null )
-                    {
-                        // the transformations discovered the artifact - so use it exclusively
-                        wagonManager.getArtifact( artifact, artifact.getRepository(), downloadMonitor,
-                                                  request.isForceUpdate() );
-                    }
-                    else
-                    {
-                        wagonManager.getArtifact( artifact, remoteRepositories, downloadMonitor,
-                                                  request.isForceUpdate() );
-                    }
-
-                    if ( localRepositoryMaintainer != null )
-                    {
-                        LocalRepositoryMaintainerEvent event =
-                            new DefaultLocalRepositoryMaintainerEvent( localRepository, artifact, null );
-                        localRepositoryMaintainer.artifactDownloaded( event );
-                    }
-
-                }
-                catch ( ResourceDoesNotExistException e )
+                if ( e.getCause() instanceof org.sonatype.aether.transfer.ArtifactNotFoundException )
-                catch ( TransferFailedException e )
+                else
-            if ( destination.exists() )
-            {
-                artifact.setResolved( true );
-            }
-            else
-            {
-                if ( request.isOffline() )
-                {
-                    throw new ArtifactResolutionException( "The repository system is offline"
-                        + " and the requested artifact is not locally available at " + destination, artifact,
-                                                           remoteRepositories );
-                }
-                else
-                {
-                    throw new ArtifactResolutionException( "Failed to resolve artifact, possibly due to a "
-                        + "repository list that is not appropriately equipped for this artifact's metadata.", artifact,
-                                                           remoteRepositories );
-                }
-            }
-
-            // 1.0-SNAPSHOT
-            //
-            // 1)         pom = 1.0-SNAPSHOT
-            // 2)         pom = 1.0-yyyymmdd.hhmmss
-            // 3) baseVersion = 1.0-SNAPSHOT
-            if ( artifact.isSnapshot() && isTimestamped( artifact ) )
-            {
-                String version = artifact.getVersion();
-
-                // 1.0-SNAPSHOT
-                artifact.selectVersion( artifact.getBaseVersion() );
-
-                // Make a file with a 1.0-SNAPSHOT format
-                File copy = new File( localRepository.getBasedir(), localRepository.pathOf( artifact ) );
-
-                // if the timestamped version was resolved or the copy doesn't exist then copy a version
-                // of the file like 1.0-SNAPSHOT. Even if there is a timestamped version the non-timestamped
-                // version will be created.
-                if ( !copy.exists() || copy.lastModified() != destination.lastModified()
-                    || copy.length() != destination.length() )
-                {
-                    // recopy file if it was reresolved, or doesn't exist.
-                    try
-                    {
-                        FileUtils.copyFile( destination, copy );
-
-                        copy.setLastModified( destination.lastModified() );
-                    }
-                    catch ( IOException e )
-                    {
-                        throw new ArtifactResolutionException( "Unable to copy resolved artifact for local use: "
-                            + e.getMessage(), artifact, remoteRepositories, e );
-                    }
-                }
-
-                // We are only going to use the 1.0-SNAPSHOT version
-                artifact.setFile( copy );
-
-                // Set the version to the 1.0-yyyymmdd.hhmmss version
-                artifact.selectVersion( version );
-            }
+            artifact.selectVersion( result.getArtifact().getVersion() );
+            artifact.setFile( result.getArtifact().getFile() );
+            artifact.setResolved( true );
-    private boolean isMutable( Artifact artifact )
-    {
-        return artifact.isSnapshot() && !isTimestamped( artifact ) && !isLocalCopy( artifact );
-    }
-
-    private boolean isTimestamped( Artifact artifact )
-    {
-        return !artifact.getBaseVersion().equals( artifact.getVersion() );
-    }
-
-    private boolean isLocalCopy( Artifact artifact )
-    {
-        boolean localCopy = false;
-
-        for ( ArtifactMetadata m : artifact.getMetadataList() )
-        {
-            if ( m instanceof SnapshotArtifactRepositoryMetadata )
-            {
-                SnapshotArtifactRepositoryMetadata snapshotMetadata = (SnapshotArtifactRepositoryMetadata) m;
-
-                Metadata metadata = snapshotMetadata.getMetadata();
-
-                if ( metadata != null )
-                {
-                    Versioning versioning = metadata.getVersioning();
-
-                    if ( versioning != null )
-                    {
-                        Snapshot snapshot = versioning.getSnapshot();
-
-                        if ( snapshot != null )
-                        {
-                            // TODO is it possible to have more than one SnapshotArtifactRepositoryMetadata
-                            localCopy = snapshot.isLocalCopy();
-                        }
-                    }
-                }
-            }
-        }
-
-        return localCopy;
-    }
-
-    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                                         ArtifactRepository localRepository,
-                                                         List<ArtifactRepository> remoteRepositories,
+    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-        return resolveTransitively( artifacts, originatingArtifact, Collections.EMPTY_MAP, localRepository,
-                                    remoteRepositories, source, filter );
+        return resolveTransitively( artifacts, originatingArtifact, Collections.EMPTY_MAP, localRepository, remoteRepositories, source, filter );
-    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                                         Map managedVersions, ArtifactRepository localRepository,
-                                                         List<ArtifactRepository> remoteRepositories,
-                                                         ArtifactMetadataSource source )
+    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact, Map managedVersions, ArtifactRepository localRepository,
+                                                         List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source )
-        return resolveTransitively( artifacts, originatingArtifact, managedVersions, localRepository,
-                                    remoteRepositories, source, null );
+        return resolveTransitively( artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, null );
-    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                                         Map managedVersions, ArtifactRepository localRepository,
-                                                         List<ArtifactRepository> remoteRepositories,
-                                                         ArtifactMetadataSource source, ArtifactFilter filter )
+    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact, Map managedVersions, ArtifactRepository localRepository,
+                                                         List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter )
-        return resolveTransitively( artifacts, originatingArtifact, managedVersions, localRepository,
-                                    remoteRepositories, source, filter, null );
+        return resolveTransitively( artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, null );
-    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                                         List<ArtifactRepository> remoteRepositories,
-                                                         ArtifactRepository localRepository,
+    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository,
-    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                                         List<ArtifactRepository> remoteRepositories,
-                                                         ArtifactRepository localRepository,
-                                                         ArtifactMetadataSource source,
-                                                         List<ResolutionListener> listeners )
+    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository,
+                                                         ArtifactMetadataSource source, List<ResolutionListener> listeners )
-    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                                         Map managedVersions, ArtifactRepository localRepository,
-                                                         List<ArtifactRepository> remoteRepositories,
-                                                         ArtifactMetadataSource source, ArtifactFilter filter,
-                                                         List<ResolutionListener> listeners )
+    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact, Map managedVersions, ArtifactRepository localRepository,
+                                                         List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners )
-        return resolveTransitively( artifacts, originatingArtifact, managedVersions, localRepository,
-                                    remoteRepositories, source, filter, listeners, null );
+        return resolveTransitively( artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, listeners, null );
-    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                                         Map managedVersions, ArtifactRepository localRepository,
-                                                         List<ArtifactRepository> remoteRepositories,
-                                                         ArtifactMetadataSource source, ArtifactFilter filter,
-                                                         List<ResolutionListener> listeners,
+    public ArtifactResolutionResult resolveTransitively( Set<Artifact> artifacts, Artifact originatingArtifact, Map managedVersions, ArtifactRepository localRepository,
+                                                         List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners,
-            .setArtifactDependencies( artifacts )
+            .setArtifactDependencies( artifacts )            
-        ArtifactFilter collectionFilter = request.getCollectionFilter();
+        ArtifactFilter collectionFilter = request.getCollectionFilter();                       
-        TransferListener transferListener = TransferListenerAdapter.newAdapter( request.getTransferListener() );
-
+        RepositorySystemSession session = getSession( request.getLocalRepository() );
+        
-
+                        
-        {
+        {            
-                resolve( rootArtifact, request, transferListener, false );
+                resolve( rootArtifact, request.getRemoteRepositories(), session );
-
+        
-        }
+        } 
-
+                        
-        if ( result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations()
-            || result.hasCircularDependencyExceptions() )
+        if ( result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions() )
-                    ArtifactResolutionRequest childRequest = new ArtifactResolutionRequest( request );
-                    childRequest.setRemoteRepositories( node.getRemoteRepositories() );
-
-                    executor.execute( new ResolveTask( classLoader, latch, artifact, transferListener, childRequest,
-                                                       result ) );
+                    executor.execute( new ResolveTask( classLoader, latch, artifact, session,
+                                                       node.getRemoteRepositories(), result ) );
-        {
+        {            
-        }
-
+        }                        
+                 
-    public void resolve( Artifact artifact, List<ArtifactRepository> remoteRepositories,
-                         ArtifactRepository localRepository )
+    public void resolve( Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository )
-        private final TransferListener transferListener;
+        private final RepositorySystemSession session;
-        private final ArtifactResolutionRequest request;
+        private final List<ArtifactRepository> remoteRepositories;
-        public ResolveTask( ClassLoader classLoader, CountDownLatch latch, Artifact artifact,
-                            TransferListener transferListener, ArtifactResolutionRequest request,
-                            ArtifactResolutionResult result )
+        public ResolveTask( ClassLoader classLoader, CountDownLatch latch, Artifact artifact, RepositorySystemSession session,
+                            List<ArtifactRepository> remoteRepositories, ArtifactResolutionResult result )
-            this.transferListener = transferListener;
-            this.request = request;
+            this.session = session;
+            this.remoteRepositories = remoteRepositories;
-                resolve( artifact, request, transferListener, false );
+                resolve( artifact, remoteRepositories, session );

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 MOV78 UPD43 INS83 INS43 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 INS83 INS39 INS42 MOV44 INS44 INS44 MOV43 MOV43 INS8 UPD42 UPD42 UPD42 MOV42 UPD43 UPD42 INS60 MOV60 INS25 INS25 INS41 INS21 INS74 INS42 INS43 INS42 MOV25 MOV25 INS25 MOV60 UPD43 MOV74 UPD42 INS43 INS59 UPD43 INS27 INS8 INS8 INS27 MOV8 INS42 INS32 INS43 INS43 UPD42 MOV42 MOV38 INS8 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 INS74 UPD42 UPD42 MOV42 INS42 MOV32 UPD42 UPD42 INS42 INS33 MOV21 MOV21 INS27 INS27 UPD42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS60 INS54 INS21 INS21 MOV21 UPD42 UPD42 INS32 UPD42 INS43 INS43 INS42 MOV33 INS32 MOV33 UPD43 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS8 MOV12 INS32 INS32 INS42 MOV32 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 INS14 UPD42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 INS32 INS42 INS42 MOV60 MOV21 INS21 MOV21 MOV42 MOV42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS43 INS32 INS43 UPD43 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 UPD43 INS32 INS7 UPD43 INS25 MOV32 MOV42 INS32 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS14 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS40 INS62 MOV8 MOV8 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 INS43 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS42 MOV42 UPD42 MOV42 INS40 UPD42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL9 DEL80 DEL77 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL33 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL43 DEL45 DEL32 DEL27 DEL42 DEL42 DEL42 DEL14 DEL53 DEL83 DEL39 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL9 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL27 DEL36 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL27 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL8 DEL25 DEL32 DEL8 DEL42 DEL42 DEL32 DEL43 DEL45 DEL45 DEL42 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL43 DEL45 DEL45 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL38 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL32 DEL38 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL9 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL43 DEL9