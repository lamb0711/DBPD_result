o Restored forking for aggregators

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@808219 13f79535-47bb-0310-9956-ffa450edef68

+    private static String getKey( MavenProject project )
+    {
+        return project.getGroupId() + ':' + project.getArtifactId() + ':' + project.getVersion();
+    }
+
+        ProjectIndex projectIndex;
+
+
+            projectIndex = new ProjectIndex( session.getProjects() );
-                    execute( currentProject, session, mojoExecution );
+                    execute( session, mojoExecution, projectIndex );
-    private void execute( MavenProject project, MavenSession session, MojoExecution mojoExecution )
+    private void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex )
-        MavenProject executionProject = null;
+        List<MavenProject> forkedProjects = Collections.emptyList();
-        List<MojoExecution> forkedExecutions = mojoExecution.getForkedExecutions();
+        Map<String, List<MojoExecution>> forkedExecutions = mojoExecution.getForkedExecutions();
+            MavenProject project = session.getCurrentProject();
+
+            forkedProjects = new ArrayList<MavenProject>( forkedExecutions.size() );
+
-                executionProject = project.clone();
+                for ( Map.Entry<String, List<MojoExecution>> fork : forkedExecutions.entrySet() )
+                {
+                    int index = projectIndex.indices.get( fork.getKey() );
-                session.setCurrentProject( executionProject );
-                try
-                {
-                    for ( MojoExecution forkedExecution : forkedExecutions )
+                    MavenProject forkedProject = projectIndex.projects.get( fork.getKey() );
+
+                    forkedProjects.add( forkedProject );
+
+                    MavenProject executedProject = forkedProject.clone();
+
+                    forkedProject.setExecutionProject( executedProject );
+
+                    try
-                        execute( executionProject, session, forkedExecution );
+                        session.setCurrentProject( executedProject );
+                        session.getProjects().set( index, executedProject );
+                        projectIndex.projects.put( fork.getKey(), executedProject );
+
+                        for ( MojoExecution forkedExecution : fork.getValue() )
+                        {
+                            execute( session, forkedExecution, projectIndex );
+                        }
-                }
-                finally
-                {
-                    session.setCurrentProject( project );
+                    finally
+                    {
+                        projectIndex.projects.put( fork.getKey(), forkedProject );
+                        session.getProjects().set( index, forkedProject );
+                        session.setCurrentProject( project );
+                    }
-            project.setExecutionProject( executionProject );
-
+        finally
+        {
+            for ( MavenProject forkedProject : forkedProjects )
+            {
+                forkedProject.setExecutionProject( null );
+            }
+        }
+    }
+
+    private static final class ProjectIndex
+    {
+
+        Map<String, MavenProject> projects;
+
+        Map<String, Integer> indices;
+
+        ProjectIndex( List<MavenProject> projects )
+        {
+            this.projects = new HashMap<String, MavenProject>( projects.size() * 2 );
+            this.indices = new HashMap<String, Integer>( projects.size() * 2 );
+
+            for ( int i = 0; i < projects.size(); i++ )
+            {
+                MavenProject project = projects.get( i );
+                String key = getKey( project );
+
+                this.projects.put( key, project );
+                this.indices.put( key, Integer.valueOf( i ) );
+            }
+        }
+
+    private boolean isForkingMojo( MojoDescriptor mojoDescriptor )
+    {
+        return StringUtils.isNotEmpty( mojoDescriptor.getExecuteGoal() )
+            || StringUtils.isNotEmpty( mojoDescriptor.getExecutePhase() );
+    }
+
-        for ( MojoExecution forkedExecution : mojoExecution.getForkedExecutions() )
+        for ( List<MojoExecution> forkedExecutions : mojoExecution.getForkedExecutions().values() )
-            collectDependencyResolutionScopes( requiredDependencyResolutionScopes, forkedExecution );
+            for ( MojoExecution forkedExecution : forkedExecutions )
+            {
+                collectDependencyResolutionScopes( requiredDependencyResolutionScopes, forkedExecution );
+            }
+        if ( !isForkingMojo( mojoDescriptor ) )
+        {
+            return;
+        }
+
+        List<MavenProject> forkedProjects;
+
+        if ( isAggregatorMojo( mojoDescriptor ) )
+        {
+            forkedProjects = session.getProjects();
+        }
+        else
+        {
+            forkedProjects = Collections.singletonList( project );
+        }
+
+        for ( MavenProject forkedProject : forkedProjects )
+        {
+            List<MojoExecution> forkedExecutions;
+
+            if ( StringUtils.isNotEmpty( mojoDescriptor.getExecutePhase() ) )
+            {
+                forkedExecutions =
+                    calculateForkedLifecycle( mojoExecution, session, forkedProject, alreadyForkedExecutions );
+            }
+            else
+            {
+                forkedExecutions = calculateForkedGoal( mojoExecution, session, forkedProject, alreadyForkedExecutions );
+            }
+
+            mojoExecution.addForkedExecutions( getKey( forkedProject ), forkedExecutions );
+        }
+    }
+
+    private List<MojoExecution> calculateForkedGoal( MojoExecution mojoExecution, MavenSession session,
+                                                     MavenProject project,
+                                                     Collection<MojoDescriptor> alreadyForkedExecutions )
+        throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException,
+        PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
+        LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
+    {
+        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
+
-        if ( StringUtils.isNotEmpty( mojoDescriptor.getExecutePhase() ) )
+        String forkedGoal = mojoDescriptor.getExecuteGoal();
+
+        MojoDescriptor forkedMojoDescriptor = pluginDescriptor.getMojo( forkedGoal );
+        if ( forkedMojoDescriptor == null )
-            String forkedPhase = mojoDescriptor.getExecutePhase();
+            throw new MojoNotFoundException( forkedGoal, pluginDescriptor );
+        }
-            Map<String, List<MojoExecution>> lifecycleMappings =
-                calculateLifecycleMappings( session, project, forkedPhase );
+        MojoExecution forkedExecution = new MojoExecution( forkedMojoDescriptor, forkedGoal );
-            for ( List<MojoExecution> forkedExecutions : lifecycleMappings.values() )
+        populateMojoExecutionConfiguration( project, forkedExecution, true );
+
+        extractMojoConfiguration( forkedExecution );
+
+        calculateForkedExecutions( forkedExecution, session, project, alreadyForkedExecutions );
+
+        return Collections.singletonList( forkedExecution );
+    }
+
+    private List<MojoExecution> calculateForkedLifecycle( MojoExecution mojoExecution, MavenSession session,
+                                                          MavenProject project,
+                                                          Collection<MojoDescriptor> alreadyForkedExecutions )
+        throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException,
+        PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
+        LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
+    {
+        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
+
+        String forkedPhase = mojoDescriptor.getExecutePhase();
+
+        Map<String, List<MojoExecution>> lifecycleMappings = calculateLifecycleMappings( session, project, forkedPhase );
+
+        for ( List<MojoExecution> forkedExecutions : lifecycleMappings.values() )
+        {
+            for ( MojoExecution forkedExecution : forkedExecutions )
-                for ( MojoExecution forkedExecution : forkedExecutions )
+                if ( forkedExecution.getMojoDescriptor() == null )
-                    if ( forkedExecution.getMojoDescriptor() == null )
-                    {
-                        MojoDescriptor forkedMojoDescriptor =
-                            pluginManager.getMojoDescriptor( forkedExecution.getPlugin(), forkedExecution.getGoal(),
-                                                             getRepositoryRequest( session, project ) );
+                    MojoDescriptor forkedMojoDescriptor =
+                        pluginManager.getMojoDescriptor( forkedExecution.getPlugin(), forkedExecution.getGoal(),
+                                                         getRepositoryRequest( session, project ) );
-                        forkedExecution.setMojoDescriptor( forkedMojoDescriptor );
-                    }
-
-                    populateMojoExecutionConfiguration( project, forkedExecution, false );
-                }
-            }
-
-            String forkedLifecycle = mojoDescriptor.getExecuteLifecycle();
-
-            if ( StringUtils.isNotEmpty( forkedLifecycle ) )
-            {
-                org.apache.maven.plugin.lifecycle.Lifecycle lifecycleOverlay;
-
-                try
-                {
-                    lifecycleOverlay = pluginDescriptor.getLifecycleMapping( forkedLifecycle );
-                }
-                catch ( IOException e )
-                {
-                    throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), e );
-                }
-                catch ( XmlPullParserException e )
-                {
-                    throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), e );
+                    forkedExecution.setMojoDescriptor( forkedMojoDescriptor );
-                if ( lifecycleOverlay == null )
-                {
-                    throw new LifecycleNotFoundException( forkedLifecycle );
-                }
-
-                for ( Phase phase : lifecycleOverlay.getPhases() )
-                {
-                    List<MojoExecution> forkedExecutions = lifecycleMappings.get( phase.getId() );
-                    if ( forkedExecutions != null )
-                    {
-                        for ( Execution execution : phase.getExecutions() )
-                        {
-                            for ( String goal : execution.getGoals() )
-                            {
-                                MojoDescriptor forkedMojoDescriptor;
-
-                                if ( goal.indexOf( ':' ) < 0 )
-                                {
-                                    forkedMojoDescriptor = pluginDescriptor.getMojo( goal );
-                                    if ( forkedMojoDescriptor == null )
-                                    {
-                                        throw new MojoNotFoundException( goal, pluginDescriptor );
-                                    }
-                                }
-                                else
-                                {
-                                    forkedMojoDescriptor = getMojoDescriptor( goal, session, project );
-                                }
-
-                                MojoExecution forkedExecution =
-                                    new MojoExecution( forkedMojoDescriptor, mojoExecution.getExecutionId() );
-
-                                Xpp3Dom forkedConfiguration = (Xpp3Dom) execution.getConfiguration();
-
-                                forkedExecution.setConfiguration( forkedConfiguration );
-
-                                populateMojoExecutionConfiguration( project, forkedExecution, true );
-
-                                forkedExecutions.add( forkedExecution );
-                            }
-                        }
-
-                        Xpp3Dom phaseConfiguration = (Xpp3Dom) phase.getConfiguration();
-                        if ( phaseConfiguration != null )
-                        {
-                            for ( MojoExecution forkedExecution : forkedExecutions )
-                            {
-                                Xpp3Dom forkedConfiguration = forkedExecution.getConfiguration();
-
-                                forkedConfiguration = Xpp3Dom.mergeXpp3Dom( phaseConfiguration, forkedConfiguration );
-
-                                forkedExecution.setConfiguration( forkedConfiguration );
-                            }
-                        }
-                    }
-                }
-            }
-
-            for ( List<MojoExecution> forkedExecutions : lifecycleMappings.values() )
-            {
-                for ( MojoExecution forkedExecution : forkedExecutions )
-                {
-                    extractMojoConfiguration( forkedExecution );
-
-                    calculateForkedExecutions( forkedExecution, session, project, alreadyForkedExecutions );
-
-                    mojoExecution.addForkedExecution( forkedExecution );
-                }
+                populateMojoExecutionConfiguration( project, forkedExecution, false );
-        else if ( StringUtils.isNotEmpty( mojoDescriptor.getExecuteGoal() ) )
+
+        injectLifecycleOverlay( lifecycleMappings, mojoExecution, session, project );
+
+        List<MojoExecution> mojoExecutions = new ArrayList<MojoExecution>();
+
+        for ( List<MojoExecution> forkedExecutions : lifecycleMappings.values() )
-            String forkedGoal = mojoDescriptor.getExecuteGoal();
-
-            MojoDescriptor forkedMojoDescriptor = pluginDescriptor.getMojo( forkedGoal );
-            if ( forkedMojoDescriptor == null )
+            for ( MojoExecution forkedExecution : forkedExecutions )
-                throw new MojoNotFoundException( forkedGoal, pluginDescriptor );
+                extractMojoConfiguration( forkedExecution );
+
+                calculateForkedExecutions( forkedExecution, session, project, alreadyForkedExecutions );
+
+                mojoExecutions.add( forkedExecution );
+        }
-            MojoExecution forkedExecution = new MojoExecution( forkedMojoDescriptor, forkedGoal );
+        return mojoExecutions;
+    }
-            populateMojoExecutionConfiguration( project, forkedExecution, true );
+    private void injectLifecycleOverlay( Map<String, List<MojoExecution>> lifecycleMappings,
+                                         MojoExecution mojoExecution, MavenSession session, MavenProject project )
+        throws PluginDescriptorParsingException, LifecycleNotFoundException, MojoNotFoundException,
+        PluginNotFoundException, PluginResolutionException, NoPluginFoundForPrefixException,
+        InvalidPluginDescriptorException, PluginVersionResolutionException
+    {
+        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-            extractMojoConfiguration( forkedExecution );
+        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
-            calculateForkedExecutions( forkedExecution, session, project, alreadyForkedExecutions );
+        String forkedLifecycle = mojoDescriptor.getExecuteLifecycle();
-            mojoExecution.addForkedExecution( forkedExecution );
+        if ( StringUtils.isEmpty( forkedLifecycle ) )
+        {
+            return;
+        }
+
+        org.apache.maven.plugin.lifecycle.Lifecycle lifecycleOverlay;
+
+        try
+        {
+            lifecycleOverlay = pluginDescriptor.getLifecycleMapping( forkedLifecycle );
+        }
+        catch ( IOException e )
+        {
+            throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), e );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new PluginDescriptorParsingException( pluginDescriptor.getPlugin(), e );
+        }
+
+        if ( lifecycleOverlay == null )
+        {
+            throw new LifecycleNotFoundException( forkedLifecycle );
+        }
+
+        for ( Phase phase : lifecycleOverlay.getPhases() )
+        {
+            List<MojoExecution> forkedExecutions = lifecycleMappings.get( phase.getId() );
+
+            if ( forkedExecutions != null )
+            {
+                for ( Execution execution : phase.getExecutions() )
+                {
+                    for ( String goal : execution.getGoals() )
+                    {
+                        MojoDescriptor forkedMojoDescriptor;
+
+                        if ( goal.indexOf( ':' ) < 0 )
+                        {
+                            forkedMojoDescriptor = pluginDescriptor.getMojo( goal );
+                            if ( forkedMojoDescriptor == null )
+                            {
+                                throw new MojoNotFoundException( goal, pluginDescriptor );
+                            }
+                        }
+                        else
+                        {
+                            forkedMojoDescriptor = getMojoDescriptor( goal, session, project );
+                        }
+
+                        MojoExecution forkedExecution =
+                            new MojoExecution( forkedMojoDescriptor, mojoExecution.getExecutionId() );
+
+                        Xpp3Dom forkedConfiguration = (Xpp3Dom) execution.getConfiguration();
+
+                        forkedExecution.setConfiguration( forkedConfiguration );
+
+                        populateMojoExecutionConfiguration( project, forkedExecution, true );
+
+                        forkedExecutions.add( forkedExecution );
+                    }
+                }
+
+                Xpp3Dom phaseConfiguration = (Xpp3Dom) phase.getConfiguration();
+
+                if ( phaseConfiguration != null )
+                {
+                    for ( MojoExecution forkedExecution : forkedExecutions )
+                    {
+                        Xpp3Dom forkedConfiguration = forkedExecution.getConfiguration();
+
+                        forkedConfiguration = Xpp3Dom.mergeXpp3Dom( phaseConfiguration, forkedConfiguration );
+
+                        forkedExecution.setConfiguration( forkedConfiguration );
+                    }
+                }
+            }

INS31 INS55 INS31 INS31 INS31 INS31 MOV43 MOV43 INS83 INS83 INS43 INS42 MOV44 INS8 INS44 INS83 INS83 INS83 INS42 INS23 INS23 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 MOV8 INS83 INS74 INS42 INS44 INS44 INS44 MOV44 INS43 INS43 INS43 INS43 INS43 INS43 MOV43 INS43 INS43 MOV8 INS42 INS44 MOV8 INS42 INS41 INS60 INS43 INS42 INS60 INS74 INS59 INS74 INS59 INS42 INS44 INS8 INS43 INS42 INS41 INS70 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 MOV25 INS60 INS25 INS70 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS60 INS41 INS74 INS42 MOV60 MOV60 MOV60 INS25 INS27 INS43 INS59 INS42 INS74 INS74 MOV59 INS8 INS43 INS43 INS43 INS42 INS43 INS43 INS43 INS42 INS74 INS42 INS21 INS21 INS24 INS42 INS27 INS44 INS32 INS8 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS38 INS8 INS74 INS59 INS32 INS8 INS8 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS74 INS59 INS42 INS43 INS43 INS74 INS32 INS8 INS32 INS13 INS32 INS13 INS32 INS42 INS42 INS21 INS43 INS43 UPD42 INS32 INS43 INS43 INS74 INS60 INS21 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS58 INS27 INS37 INS8 MOV32 INS32 INS74 INS42 MOV32 INS42 MOV70 INS42 INS42 INS42 INS42 INS32 INS32 INS41 INS43 INS43 INS42 INS42 INS42 INS21 INS21 INS43 INS42 MOV60 INS25 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 MOV43 INS59 INS7 INS8 INS44 INS42 INS8 INS42 INS42 INS22 INS14 INS22 INS14 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS21 INS21 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS59 MOV32 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS14 INS70 MOV21 INS43 INS42 INS21 INS52 INS42 INS74 INS27 INS52 INS42 INS74 INS27 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS74 INS32 INS44 INS32 INS8 INS42 INS32 INS43 INS43 INS43 INS32 INS34 INS43 INS43 INS43 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS74 INS42 INS42 INS42 INS60 INS60 INS21 INS60 MOV21 MOV54 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 INS42 INS42 INS43 INS43 INS74 INS39 INS59 INS43 INS59 INS32 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS40 INS42 INS32 INS40 INS42 INS32 UPD42 MOV42 MOV42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL32 DEL25 DEL42 DEL25 DEL25 DEL8