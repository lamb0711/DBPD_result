o Enabled reuse of MavenCli for embedded execution during the ITs

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@823736 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
+        private final long pomHash;
+            File file = artifact.getFile();
+            if ( "pom".equals( artifact.getType() ) && file != null )
+            {
+                pomHash = file.getPath().hashCode() + file.lastModified();
+            }
+            else
+            {
+                pomHash = 0;
+            }
-            hash = hash * 31 + repositories.hashCode();
+            hash = hash * 31 + repositoriesHashCode( repositories );
-            
-            return artifactEquals( artifact, other.artifact ) && resolveManagedVersions == other.resolveManagedVersions
-                && repositories.equals( other.repositories );
+
+            return pomHash == other.pomHash && artifactEquals( artifact, other.artifact )
+                && resolveManagedVersions == other.resolveManagedVersions
+                && repositoriesEquals( repositories, other.repositories );
-        
+
+    private static int repositoryHashCode( ArtifactRepository repository )
+    {
+        int result = 17;
+        result = 31 * result + ( repository.getId() != null ? repository.getId().hashCode() : 0 );
+        return result;
+    }
+
+    private static int repositoriesHashCode( List<ArtifactRepository> repositories )
+    {
+        int result = 17;
+        for ( ArtifactRepository repository : repositories )
+        {
+            result = 31 * result + repositoryHashCode( repository );
+        }
+        return result;
+    }
+
+    private static boolean repositoryEquals( ArtifactRepository r1, ArtifactRepository r2 )
+    {
+        if ( r1 == r2 )
+        {
+            return true;
+        }
+
+        return eq( r1.getId(), r2.getId() ) && eq( r1.getUrl(), r2.getUrl() )
+            && repositoryPolicyEquals( r1.getReleases(), r2.getReleases() )
+            && repositoryPolicyEquals( r1.getSnapshots(), r2.getSnapshots() );
+    }
+
+    private static boolean repositoryPolicyEquals( ArtifactRepositoryPolicy p1, ArtifactRepositoryPolicy p2 )
+    {
+        if ( p1 == p2 )
+        {
+            return true;
+        }
+
+        return p1.isEnabled() == p2.isEnabled() && eq( p1.getUpdatePolicy(), p2.getUpdatePolicy() );
+    }
+
+    private static boolean repositoriesEquals( List<ArtifactRepository> r1, List<ArtifactRepository> r2 )
+    {
+        if ( r1.size() != r2.size() )
+        {
+            return false;
+        }
+
+        for ( Iterator<ArtifactRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); )
+        {
+            if ( !repositoryEquals( it1.next(), it2.next() ) )
+            {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
-            if ( pomFile != null && pomFile.canRead() )
+            if ( pomFile != null )
-                return length != pomFile.length() || timestamp != pomFile.lastModified();
+                if ( pomFile.canRead() )
+                {
+                    return length != pomFile.length() || timestamp != pomFile.lastModified();
+                }
+                else
+                {
+                    // if the POM didn't exist, retry if any repo is configured to always update
+                    boolean snapshot = pomArtifact.isSnapshot();
+                    for ( ArtifactRepository repository : remoteRepositories )
+                    {
+                        ArtifactRepositoryPolicy policy =
+                            snapshot ? repository.getSnapshots() : repository.getReleases();
+                        if ( ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS.equals( policy.getUpdatePolicy() ) )
+                        {
+                            return true;
+                        }
+                    }
+                }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS23 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS59 INS43 INS42 INS60 INS21 INS41 INS74 INS42 INS60 INS70 INS41 INS43 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS43 INS42 INS25 INS41 INS74 INS42 INS74 INS42 INS25 INS24 INS41 INS42 INS60 INS25 INS42 INS39 INS59 INS7 INS42 INS43 INS43 INS39 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS27 INS8 INS27 INS42 INS42 INS27 INS8 INS27 INS43 INS43 INS43 INS43 INS27 INS8 INS58 INS32 INS8 INS9 INS43 INS59 INS27 INS8 INS8 INS42 INS34 INS42 INS27 INS42 INS42 INS42 INS34 INS43 INS42 INS21 INS42 INS42 INS41 INS32 INS32 INS32 INS32 INS42 INS42 INS41 INS27 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS41 INS74 INS59 INS59 INS42 INS42 INS25 MOV27 INS8 INS42 INS42 INS32 INS32 INS27 INS21 INS21 INS27 INS36 INS42 INS7 INS9 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS9 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS32 INS42 INS32 INS38 INS8 INS25 INS42 INS42 INS45 INS42 INS32 INS42 INS33 INS7 INS7 INS27 UPD42 UPD42 INS34 INS42 INS16 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS41 MOV32 MOV8 INS8 INS42 INS42 INS42 INS27 INS42 INS34 UPD42 UPD42 INS27 MOV32 INS27 INS32 INS34 INS27 INS32 INS42 INS32 INS32 INS9 INS60 INS70 INS32 INS32 INS42 INS40 INS32 INS33 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS16 INS40 INS42 INS32 INS41 INS42 INS32 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 DEL27