Merge of sisbell-maven-2.1-profile branch. Removes use of project lineage from builder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@693332 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.ArtifactStatus;
-import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
-import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
-import org.apache.maven.artifact.versioning.ManagedVersionMap;
-import org.apache.maven.artifact.versioning.VersionRange;
-import org.apache.maven.model.DistributionManagement;
-import org.apache.maven.model.Exclusion;
-import org.apache.maven.model.Extension;
-import org.apache.maven.model.Parent;
-import org.apache.maven.model.ReportPlugin;
-import org.apache.maven.model.Repository;
-import org.apache.maven.model.Resource;
+import org.apache.maven.model.Profile;
+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
-import org.apache.maven.project.build.model.DefaultModelLineage;
-import org.apache.maven.project.build.model.ModelLineage;
-import org.apache.maven.project.build.model.ModelLineageBuilder;
-import org.apache.maven.project.build.model.ModelLineageIterator;
-import org.apache.maven.project.inheritance.ModelInheritanceAssembler;
-import org.apache.maven.project.injection.ModelDefaultsInjector;
+import org.apache.maven.project.builder.PomArtifactResolver;
+import org.apache.maven.project.builder.ProjectBuilder;
-import org.apache.maven.project.builder.PomArtifactResolver;
-import org.apache.maven.project.builder.ProjectBuilder;
-import org.apache.maven.project.builder.PomClassicDomainModel;
+import org.codehaus.plexus.util.WriterFactory;
-import java.io.*;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.Reader;
+import java.io.StringReader;
+import java.io.Writer;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
-    implements MavenProjectBuilder,
-    Initializable, LogEnabled
+    implements MavenProjectBuilder, Initializable, LogEnabled
-    protected MavenProfilesBuilder profilesBuilder;                        
+    protected MavenProfilesBuilder profilesBuilder;
-    private ModelInheritanceAssembler modelInheritanceAssembler;
-
-    private ModelDefaultsInjector modelDefaultsInjector;
-
-    private ModelLineageBuilder modelLineageBuilder;
-
+    private RepositoryHelper repositoryHelper;
+
+    private Logger logger;
+
-// the aspect weaving seems not to work for reflection from plugin.
+    // the aspect weaving seems not to work for reflection from plugin.
+
-
-    public static final String MAVEN_MODEL_VERSION = "4.0.0";
+    private static final String MAVEN_MODEL_VERSION = "4.0.0";
-    public MavenProject build( File projectDescriptor,
-                               ArtifactRepository localRepository,
+    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository,
-        ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository )
-                                                                                     .setGlobalProfileManager( profileManager );
+        ProjectBuilderConfiguration config =
+            new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository )
+                .setGlobalProfileManager( profileManager );
-        return buildFromSourceFileInternal( projectDescriptor, config );
+        return build( projectDescriptor, config );
-    public MavenProject build( File projectDescriptor,
-                               ProjectBuilderConfiguration config )
+    public MavenProject build( File projectDescriptor, ProjectBuilderConfiguration config )
-        return buildFromSourceFileInternal( projectDescriptor, config );
+        MavenProject project = projectWorkspace.getProject( projectDescriptor );
+
+        if ( project == null )
+        {
+            project = readModelFromLocalPath( "unknown", projectDescriptor, new PomArtifactResolver(
+                config.getLocalRepository(), repositoryHelper.buildArtifactRepositories(
+                getSuperProject( config, projectDescriptor, true ).getModel() ), artifactResolver ), config );
+
+            project.setFile( projectDescriptor );
+            project = buildInternal( project.getModel(), config, projectDescriptor, project.getParentFile(), true );
+
+            Build build = project.getBuild();
+            // NOTE: setting this script-source root before path translation, because
+            // the plugin tools compose basedir and scriptSourceRoot into a single file.
+            project.addScriptSourceRoot( build.getScriptSourceDirectory() );
+            project.addCompileSourceRoot( build.getSourceDirectory() );
+            project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
+            project.setFile( projectDescriptor );
+
+            setBuildOutputDirectoryOnParent( project );
+
+        }
+        return project;
-    /** @deprecated  */
+
+    /**
+     * @deprecated
+     */
-    public MavenProject buildFromRepository( Artifact artifact,
-                                             List remoteArtifactRepositories,
-                                             ArtifactRepository localRepository,
-                                             boolean allowStub )
+    public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactRepositories,
+                                             ArtifactRepository localRepository, boolean allowStub )
-    public MavenProject buildFromRepository( Artifact artifact,
-                                             List remoteArtifactRepositories,
+    public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactRepositories,
-        String artifactKey = artifact.getId();
-
-        if ( !Artifact.LATEST_VERSION.equals( artifact.getVersion() ) && !Artifact.RELEASE_VERSION.equals( artifact.getVersion() ) )
+        if ( !Artifact.LATEST_VERSION.equals( artifact.getVersion() ) &&
+            !Artifact.RELEASE_VERSION.equals( artifact.getVersion() ) )
-//            getLogger().debug( "Checking cache for project (in buildFromRepository): " + artifactKey );
-            project = projectWorkspace.getProject( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
+            project =
+                projectWorkspace.getProject( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
-
+        File f = artifact.getFile();
-//            getLogger().debug( "Allowing buildFromRepository to proceed for: " + artifactKey );
+            repositoryHelper.findModelFromRepository( artifact, remoteArtifactRepositories, localRepository );
-            Model model = findModelFromRepository( artifact, remoteArtifactRepositories, localRepository );
+            ProjectBuilderConfiguration config =
+                new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository );
-            ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository );
+            List<ArtifactRepository> artifactRepositories =
+                new ArrayList<ArtifactRepository>( remoteArtifactRepositories );
+            artifactRepositories.addAll( repositoryHelper.buildArtifactRepositories(
+                getSuperProject( config, artifact.getFile(), false ).getModel() ) );
-            project = buildInternal( model, config, remoteArtifactRepositories, artifact.getFile(),
-                                  false, false, false );
+            project = readModelFromLocalPath( "unknown", artifact.getFile(), new PomArtifactResolver(
+                config.getLocalRepository(), artifactRepositories, artifactResolver ), config );
+            project = buildInternal( project.getModel(), config, artifact.getFile(), project.getParentFile(), false );
-//        else
-//        {
-//            getLogger().debug( "Returning cached project: " + project );
-//        }
+
+        artifact.setFile( f );
+        project.setVersion( artifact.getVersion() );
-    private Logger logger;
-
-        return buildStandaloneSuperProject( new DefaultProjectBuilderConfiguration().setGlobalProfileManager( profileManager ) );
+        return buildStandaloneSuperProject(
+            new DefaultProjectBuilderConfiguration().setGlobalProfileManager( profileManager ) );
-            List activated = profileAdvisor.applyActivatedProfiles( superModel, null, false, profileManager.getProfileActivationContext() );
+            List activated = profileAdvisor.applyActivatedProfiles( superModel, null, false,
+                                                                    profileManager.getProfileActivationContext() );
-        MavenProject project = new MavenProject( superModel );
-
-        String projectId = safeVersionlessKey( STANDALONE_SUPERPOM_GROUPID, STANDALONE_SUPERPOM_ARTIFACTID );
-
-        project.setManagedVersionMap(
-            createManagedVersionMap( projectId, superModel.getDependencyManagement(), null ) );
-
-        getLogger().debug( "Activated the following profiles for standalone super-pom: " + activeProfiles );
-        project.setActiveProfiles( activeProfiles );
-
-
+        MavenProject project;
-            processProjectLogic( project, null, config, null, true, true );
-
-            project.setRemoteArtifactRepositories( mavenTools.buildArtifactRepositories( superModel.getRepositories() ) );
-            project.setPluginArtifactRepositories( mavenTools.buildArtifactRepositories( superModel.getRepositories() ) );
+            project = new MavenProject( superModel, artifactFactory, mavenTools, repositoryHelper, this, config );
-            // we shouldn't be swallowing exceptions, no matter how unlikely.
-            // or, if we do, we should pay attention to the one coming from getSuperModel()...
-            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":"
-                                             + STANDALONE_SUPERPOM_ARTIFACTID,
-                                                "Maven super-POM contains an invalid repository!",
-                                                e );
+            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":" + STANDALONE_SUPERPOM_ARTIFACTID,
+                                                "Maven super-POM contains an invalid repository!", e );
+        }
+
+        getLogger().debug( "Activated the following profiles for standalone super-pom: " + activeProfiles );
+
+        try
+        {
+            project = interpolateModelAndInjectDefault( project.getModel(), null, null, config );
+            project.setActiveProfiles( activeProfiles );
+            project.setRemoteArtifactRepositories(
+                mavenTools.buildArtifactRepositories( superModel.getRepositories() ) );
+            project.setPluginArtifactRepositories(
+                mavenTools.buildArtifactRepositories( superModel.getRepositories() ) );
+        }
+        catch ( InvalidRepositoryException e )
+        {
+            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":" + STANDALONE_SUPERPOM_ARTIFACTID,
+                                                "Maven super-POM contains an invalid repository!", e );
-            // we shouldn't be swallowing exceptions, no matter how unlikely.
-            // or, if we do, we should pay attention to the one coming from getSuperModel()...
-            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":"
-                                             + STANDALONE_SUPERPOM_ARTIFACTID,
-                                                "Maven super-POM contains an invalid expressions!",
-                                                e );
+            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":" + STANDALONE_SUPERPOM_ARTIFACTID,
+                                                "Maven super-POM contains an invalid expressions!", e );
-        project.setOriginalModel( superModel );
-
-    /** @since 2.0.x */
-    public MavenProject buildWithDependencies( File projectDescriptor,
-                                               ArtifactRepository localRepository,
+    /**
+     * @since 2.0.x
+     */
+    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository,
-    /** @since 2.1 */
+    /**
+     * @since 2.1
+     */
-                                                             ArtifactRepository localRepository,
-                                                             ProfileManager profileManager )
+                                                                    ArtifactRepository localRepository,
+                                                                    ProfileManager profileManager )
-        ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository )
-                                                                                     .setGlobalProfileManager( profileManager );
+        ProjectBuilderConfiguration config =
+            new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository )
+                .setGlobalProfileManager( profileManager );
-               throws ProjectBuildingException
-   {
+        throws ProjectBuildingException
+    {
-        // ----------------------------------------------------------------------
-        // Typically when the project builder is being used from maven proper
-        // the transitive dependencies will not be resolved here because this
-        // requires a lot of work when we may only be interested in running
-        // something simple like 'm2 clean'. So the artifact collector is used
-        // in the dependency resolution phase if it is required by any of the
-        // goals being executed. But when used as a component in another piece
-        // of code people may just want to build maven projects and have the
-        // dependencies resolved for whatever reason: this is why we keep
-        // this snippet of code here.
-        // ----------------------------------------------------------------------
-
-        Artifact projectArtifact = project.getArtifact();
-
-        String projectId = safeVersionlessKey( project.getGroupId(), project.getArtifactId() );
-
-        Map managedVersions = project.getManagedVersionMap();
-
-            throw new ProjectBuildingException( projectId,
-                "Unable to build project due to an invalid dependency version: " +
-                    e.getMessage(), projectDescriptor, e );
+            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ),
+                                                "Unable to build project due to an invalid dependency version: " +
+                                                    e.getMessage(), projectDescriptor, e );
-            .setArtifact( projectArtifact )
+            .setArtifact( project.getArtifact() )
-            .setManagedVersionMap( managedVersions )
+            .setManagedVersionMap( project.getManagedVersionMap() )
-    // ----------------------------------------------------------------------
-    //
-    // ----------------------------------------------------------------------
-
-    private Map createManagedVersionMap( String projectId,
-                                         DependencyManagement dependencyManagement, File pomFile )
-        throws ProjectBuildingException
+    public void calculateConcreteState( MavenProject project, ProjectBuilderConfiguration config )
+        throws ModelInterpolationException
-        Map map = null;
-        List deps;
-        if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) && ( deps.size() > 0 ) )
-        {
-            map = new ManagedVersionMap( map );
-
-            if ( getLogger().isDebugEnabled() )
-            {
-                getLogger().debug( "Adding managed dependencies for " + projectId );
-            }
-
-            for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )
-            {
-                Dependency d = (Dependency) i.next();
-
-                try
-                {
-                    VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
-
-                    Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
-                        d.getClassifier(), d.getScope(), d.isOptional() );
-
-                    if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && ( d.getSystemPath() != null ) )
-                    {
-                        artifact.setFile( new File( d.getSystemPath() ) );
-                    }
-
-                    if ( getLogger().isDebugEnabled() )
-                    {
-                        getLogger().debug( "  " + artifact );
-                    }
-
-                    // If the dependencyManagement section listed exclusions,
-                    // add them to the managed artifacts here so that transitive
-                    // dependencies will be excluded if necessary.
-
-                    if ( ( null != d.getExclusions() ) && !d.getExclusions().isEmpty() )
-                    {
-                        List exclusions = new ArrayList();
-
-                        for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )
-                        {
-                            Exclusion e = (Exclusion) j.next();
-
-                            exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
-                        }
-
-                        ExcludesArtifactFilter eaf = new ExcludesArtifactFilter( exclusions );
-
-                        artifact.setDependencyFilter( eaf );
-                    }
-                    else
-                    {
-                        artifact.setDependencyFilter( null );
-                    }
-
-                    map.put( d.getManagementKey(), artifact );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-                    throw new InvalidDependencyVersionException( projectId, d, pomFile, e );
-                }
-            }
-        }
-        else if ( map == null )
-        {
-            map = Collections.EMPTY_MAP;
-        }
-        return map;
+        new MavenProjectRestorer( pathTranslator, modelInterpolator, getLogger() ).calculateConcreteState( project,
+                                                                                                           config );
-    private MavenProject buildFromSourceFileInternal( File projectDescriptor,
-                                                      ProjectBuilderConfiguration config )
-        throws ProjectBuildingException
+    public void restoreDynamicState( MavenProject project, ProjectBuilderConfiguration config )
+        throws ModelInterpolationException
-//        getLogger().debug( "Checking cache-hit on project (in build*): " + projectDescriptor );
-
-        MavenProject project = projectWorkspace.getProject( projectDescriptor );
-
-        if ( project == null )
-        {
-            Model model = readModelFromLocalPath( "unknown", projectDescriptor, new PomArtifactResolver(config.getLocalRepository(),
-                    buildArtifactRepositories( getSuperModel() ), artifactResolver) );
-            project = buildInternal(model,
-                config,
-                buildArtifactRepositories( getSuperModel() ),
-                projectDescriptor,
-                STRICT_MODEL_PARSING,
-                true,
-                true );
-        }
-        return project;
+        new MavenProjectRestorer( pathTranslator, modelInterpolator, getLogger() ).restoreDynamicState( project,
+                                                                                                        config );
-    private Model findModelFromRepository( Artifact artifact,
-                                           List remoteArtifactRepositories,
-                                           ArtifactRepository localRepository )
-        throws ProjectBuildingException
+    public void enableLogging( Logger logger )
-
-        String projectId = safeVersionlessKey( artifact.getGroupId(), artifact.getArtifactId() );
-        remoteArtifactRepositories = normalizeToArtifactRepositories( remoteArtifactRepositories, projectId );
-
-        Artifact projectArtifact;
-
-        // if the artifact is not a POM, we need to construct a POM artifact based on the artifact parameter given.
-        if ( "pom".equals( artifact.getType() ) )
-        {
-            projectArtifact = artifact;
-        }
-        else
-        {
-            getLogger().warn( "Attempting to build MavenProject instance for Artifact (" + artifact.getGroupId() + ":"
-             + artifact.getArtifactId() + ":" + artifact.getVersion() + ") of type: "
-             + artifact.getType() + "; constructing POM artifact instead." );
-
-            projectArtifact = artifactFactory.createProjectArtifact( artifact.getGroupId(),
-                artifact.getArtifactId(),
-                artifact.getVersion(),
-                artifact.getScope() );
-        }
-
-        Model legacy_model;
-        try
-        {
-            artifactResolver.resolve( projectArtifact, remoteArtifactRepositories, localRepository );
-
-            File file = projectArtifact.getFile();
-
-            legacy_model = readModelLegacy( projectId, file, STRICT_MODEL_PARSING );
-
-            String downloadUrl = null;
-
-            ArtifactStatus status = ArtifactStatus.NONE;
-
-            DistributionManagement distributionManagement = legacy_model.getDistributionManagement();
-
-            if ( distributionManagement != null )
-            {
-                downloadUrl = distributionManagement.getDownloadUrl();
-
-                status = ArtifactStatus.valueOf( distributionManagement.getStatus() );
-            }
-
-            checkStatusAndUpdate( projectArtifact, status, file, remoteArtifactRepositories, localRepository );
-
-            // TODO: this is gross. Would like to give it the whole model, but maven-artifact shouldn't depend on that
-            // Can a maven-core implementation of the Artifact interface store it, and be used in the exceptions?
-            if ( downloadUrl != null )
-            {
-                projectArtifact.setDownloadUrl( downloadUrl );
-            }
-            else
-            {
-                projectArtifact.setDownloadUrl( legacy_model.getUrl() );
-            }
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new ProjectBuildingException( projectId, "Error getting POM for '" + projectId + "' from the repository: " + e.getMessage(), e );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            throw new ProjectBuildingException( projectId, "POM '" + projectId + "' not found in repository: " + e.getMessage(), e );
-        }
-
-        return legacy_model;
+        this.logger = logger;
-    private List normalizeToArtifactRepositories( List remoteArtifactRepositories,
-                                                  String projectId )
-        throws ProjectBuildingException
+    private Logger getLogger()
-        List normalized = new ArrayList( remoteArtifactRepositories.size() );
-
-        boolean normalizationNeeded = false;
-        for ( Iterator it = remoteArtifactRepositories.iterator(); it.hasNext(); )
-        {
-            Object item = it.next();
-
-            if ( item instanceof ArtifactRepository )
-            {
-                normalized.add( item );
-            }
-            else if ( item instanceof Repository )
-            {
-                Repository repo = (Repository) item;
-                try
-                {
-                    item = mavenTools.buildArtifactRepository( repo );
-
-                    normalized.add( item );
-                    normalizationNeeded = true;
-                }
-                catch ( InvalidRepositoryException e )
-                {
-                    throw new ProjectBuildingException( projectId, "Error building artifact repository for id: " + repo.getId(), e );
-                }
-            }
-            else
-            {
-                throw new ProjectBuildingException( projectId, "Error building artifact repository from non-repository information item: " + item );
-            }
-        }
-
-        if ( normalizationNeeded )
-        {
-            return normalized;
-        }
-        else
-        {
-            return remoteArtifactRepositories;
-        }
+        return logger;
-    private void checkStatusAndUpdate( Artifact projectArtifact,
-                                       ArtifactStatus status,
-                                       File file,
-                                       List remoteArtifactRepositories,
-                                       ArtifactRepository localRepository )
-        throws ArtifactNotFoundException
-    {
-        // TODO: configurable actions dependant on status
-        if ( !projectArtifact.isSnapshot() && ( status.compareTo( ArtifactStatus.DEPLOYED ) < 0 ) )
-        {
-            // use default policy (enabled, daily update, warn on bad checksum)
-            ArtifactRepositoryPolicy policy = new ArtifactRepositoryPolicy();
-            // TODO: re-enable [MNG-798/865]
-            policy.setUpdatePolicy( ArtifactRepositoryPolicy.UPDATE_POLICY_NEVER );
-
-            if ( policy.checkOutOfDate( new Date( file.lastModified() ) ) )
-            {
-                getLogger().info(
-                    projectArtifact.getArtifactId() + ": updating metadata due to status of '" + status + "'" );
-                try
-                {
-                    projectArtifact.setResolved( false );
-                    artifactResolver.resolveAlways( projectArtifact, remoteArtifactRepositories, localRepository );
-                }
-                catch ( ArtifactResolutionException e )
-                {
-                    getLogger().warn( "Error updating POM - using existing version" );
-                    getLogger().debug( "Cause", e );
-                }
-                catch ( ArtifactNotFoundException e )
-                {
-                    getLogger().warn( "Error updating POM - not found. Removing local copy." );
-                    getLogger().debug( "Cause", e );
-                    file.delete();
-                    throw e;
-                }
-            }
-        }
-    }
-
-    // jvz:note
-    // We've got a mixture of things going in the USD and from the repository, sometimes the descriptor
-    // is a real file and sometimes null which makes things confusing.
-    private MavenProject buildInternal( Model model,
-                                        ProjectBuilderConfiguration config,
-                                        List parentSearchRepositories,
-                                        File projectDescriptor,
-                                        boolean strict,
-                                        boolean isReactorProject,
-                                        boolean fromSourceTree )
+    private MavenProject buildInternal( Model model, ProjectBuilderConfiguration config, File projectDescriptor,
+                                        File parentDescriptor, boolean isReactorProject )
-        Model superModel = getSuperModel();
-
-        MavenProject superProject = new MavenProject( superModel );
-
-        // FIXME: Find a way to pass in this context, so it's never null!
-
-                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", projectDescriptor, e );
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.",
+                                                    projectDescriptor, e );
-
-        LinkedHashSet activeInSuperPom = new LinkedHashSet();
-        List activated = profileAdvisor.applyActivatedProfiles( superModel, projectDescriptor, isReactorProject, profileActivationContext );
-        if ( !activated.isEmpty() )
-        {
-            activeInSuperPom.addAll( activated );
-        }
-
-        activated = profileAdvisor.applyActivatedExternalProfiles( superModel, projectDescriptor, externalProfileManager );
-        if ( !activated.isEmpty() )
-        {
-            activeInSuperPom.addAll( activated );
-        }
-
-        superProject.setActiveProfiles( activated );
-
-        //noinspection CollectionDeclaredAsConcreteClass
-        LinkedList lineage = new LinkedList();
-
-        LinkedHashSet aggregatedRemoteWagonRepositories = collectInitialRepositories( model, superModel,
-            parentSearchRepositories,
-            projectDescriptor,
-            isReactorProject,
-            profileActivationContext );
-
-        Model originalModel = ModelUtils.cloneModel( model );
-
-
-            project = assembleLineage( model, lineage, config, projectDescriptor, aggregatedRemoteWagonRepositories, strict, isReactorProject );
-        }
-        catch ( InvalidRepositoryException e )
-        {
-            throw new ProjectBuildingException( projectId, e.getMessage(), e );
-        }
-
-        project.setOriginalModel( originalModel );
-
-        // we don't have to force the collision exception for superModel here, it's already been done in getSuperModel()
-        MavenProject previousProject = superProject;
-
-        Model previous = superProject.getModel();
-
-        for ( Iterator i = lineage.iterator(); i.hasNext(); )
-        {
-            MavenProject currentProject = (MavenProject) i.next();
-
-            Model current = currentProject.getModel();
-
-            String pathAdjustment = null;
-
-            try
-            {
-                pathAdjustment = previousProject.getModulePathAdjustment( currentProject );
-            }
-            catch ( IOException e )
-            {
-                getLogger().debug(
-                    "Cannot determine whether " + currentProject.getId() + " is a module of " + previousProject.getId() + ". Reason: " + e.getMessage(),
-                    e );
-            }
-
-            modelInheritanceAssembler.assembleModelInheritance( current, previous, pathAdjustment );
-
-            previous = current;
-            previousProject = currentProject;
-        }
-
-        // only add the super repository if it wasn't overridden by a profile or project
-        List repositories = new ArrayList( aggregatedRemoteWagonRepositories );
-
-        List superRepositories = buildArtifactRepositories( superModel );
-
-        for ( Iterator i = superRepositories.iterator(); i.hasNext(); )
-        {
-            ArtifactRepository repository = (ArtifactRepository) i.next();
-
-            if ( !repositories.contains( repository ) )
-            {
-                repositories.add( repository );
-            }
-        }
-
-        // merge any duplicated plugin definitions together, using the first appearance as the dominant one.
-        ModelUtils.mergeDuplicatePluginDefinitions( project.getModel().getBuild() );
-
-        try
-        {
-            project = processProjectLogic( project, projectDescriptor, config, repositories, strict, false );
+            project = interpolateModelAndInjectDefault( model, projectDescriptor, parentDescriptor, config );
-        if ( fromSourceTree )
-        {
-            Build build = project.getBuild();
-
-            // NOTE: setting this script-source root before path translation, because
-            // the plugin tools compose basedir and scriptSourceRoot into a single file.
-            project.addScriptSourceRoot( build.getScriptSourceDirectory() );
-
-            project.addCompileSourceRoot( build.getSourceDirectory() );
-
-            project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
-
-            // Only track the file of a POM in the source tree
-            project.setFile( projectDescriptor );
-        }
-
-//        getLogger().debug( "Caching project: " + project.getId() + " (also keyed by file: " + project.getFile() + ")" );
-
+        List<Profile> projectProfiles = new ArrayList<Profile>();
+        projectProfiles.addAll( profileAdvisor.applyActivatedProfiles( project.getModel(), project.getFile(),
+                                                                       isReactorProject, profileActivationContext ) );
+        projectProfiles.addAll( profileAdvisor.applyActivatedExternalProfiles( project.getModel(), project.getFile(),
+                                                                               externalProfileManager ) );
+        project.setActiveProfiles( projectProfiles );
-        project.setManagedVersionMap( createManagedVersionMap( projectId, project.getDependencyManagement(), projectDescriptor ) );
-
-    /*
-     * Order is:
-     *
-     * 1. model profile repositories
-     * 2. model repositories
-     * 3. superModel profile repositories
-     * 4. superModel repositories
-     * 5. parentSearchRepositories
-     */
-    private LinkedHashSet collectInitialRepositories( Model model,
-                                                      Model superModel,
-                                                      List parentSearchRepositories,
-                                                      File pomFile,
-                                                      boolean validProfilesXmlLocation,
-                                                      ProfileActivationContext profileActivationContext )
-        throws ProjectBuildingException
-    {
-        LinkedHashSet collected = new LinkedHashSet();
-
-        collectInitialRepositoriesFromModel( collected, model, pomFile, validProfilesXmlLocation, profileActivationContext );
-
-        collectInitialRepositoriesFromModel( collected, superModel, null, validProfilesXmlLocation, profileActivationContext );
-
-        if ( ( parentSearchRepositories != null ) && !parentSearchRepositories.isEmpty() )
-        {
-            collected.addAll( parentSearchRepositories );
-        }
-
-        return collected;
-    }
-
-    private void collectInitialRepositoriesFromModel( LinkedHashSet collected,
-                                                      Model model,
-                                                      File pomFile,
-                                                      boolean validProfilesXmlLocation,
-                                                      ProfileActivationContext profileActivationContext )
-        throws ProjectBuildingException
-    {
-        Set reposFromProfiles = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, pomFile, validProfilesXmlLocation, profileActivationContext );
-
-        if ( ( reposFromProfiles != null ) && !reposFromProfiles.isEmpty() )
-        {
-            collected.addAll( reposFromProfiles );
-        }
-
-        List modelRepos = model.getRepositories();
-
-        if ( ( modelRepos != null ) && !modelRepos.isEmpty() )
-        {
-            try
-            {
-                collected.addAll( mavenTools.buildArtifactRepositories( modelRepos ) );
-            }
-            catch ( InvalidRepositoryException e )
-            {
-                throw new ProjectBuildingException( safeVersionlessKey( model.getGroupId(), model.getArtifactId() ),
-                    "Failed to construct ArtifactRepository instances for repositories declared in: " +
-                     model.getId(), e );
-            }
-        }
-    }
-
-    private String safeVersionlessKey( String groupId,
-                                       String artifactId )
-    {
-        String gid = groupId;
-
-        if ( StringUtils.isEmpty( gid ) )
-        {
-            gid = "unknown";
-        }
-
-        String aid = artifactId;
-
-        if ( StringUtils.isEmpty( aid ) )
-        {
-            aid = "unknown";
-        }
-
-        return ArtifactUtils.versionlessKey( gid, aid );
-    }
-
-    private List buildArtifactRepositories( Model model )
-        throws ProjectBuildingException
-    {
-        try
-        {
-            return mavenTools.buildArtifactRepositories( model.getRepositories() );
-        }
-        catch ( InvalidRepositoryException e )
-        {
-            String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-
-            throw new ProjectBuildingException( projectId, e.getMessage(), e );
-        }
-    }
-
-    /**
-     * @todo can this take in a model instead of a project and still be successful?
-     * @todo In fact, does project REALLY need a MavenProject as a parent? Couldn't it have just a wrapper around a
-     * model that supported parents which were also the wrapper so that inheritence was assembled. We don't really need
-     * the resolved source roots, etc for the parent - that occurs for the parent when it is constructed independently
-     * and projects are not cached or reused
-     */
-    private MavenProject processProjectLogic( MavenProject project,
-                                              File pomFile,
-                                              ProjectBuilderConfiguration config,
-                                              List remoteRepositories,
-                                              boolean strict,
-                                              boolean isSuperPom )
+    private MavenProject interpolateModelAndInjectDefault( Model model, File pomFile, File parentFile,
+                                                           ProjectBuilderConfiguration config )
-        Model model = project.getModel();
-
-        List activeProfiles = project.getActiveProfiles();
-
-
-        model.setBuild( ModelUtils.cloneBuild( dynamicBuild ) );
-
+        if ( dynamicBuild != null )
+        {
+            model.setBuild( ModelUtils.cloneBuild( dynamicBuild ) );
+        }
-        mergeDeterministicBuildElements( model.getBuild(), dynamicBuild );
-        model.setBuild( dynamicBuild );
-
-        // We must inject any imported dependencyManagement information ahead of the defaults injection.
-        if ( !isSuperPom )
+        if ( dynamicBuild != null && model.getBuild() != null )
-            // TODO: [jdcasey] This line appears to be part of the problem for MNG-3391...
-            // the same line is in 2.0.x, so this is related to caching changes too...need to figure out how the two interact.
-            mergeManagedDependencies( model, config.getLocalRepository(), remoteRepositories );
+            mergeDeterministicBuildElements( model.getBuild(), dynamicBuild );
+            model.setBuild( dynamicBuild );
-        modelDefaultsInjector.injectDefaults( model );
-
-        MavenProject parentProject = project.getParent();
-
-        Model originalModel = project.getOriginalModel();
-
-        Artifact parentArtifact = project.getParentArtifact();
+        new DefaultModelDefaultsInjector().injectDefaults( model );
-        project = new MavenProject( model );
+        MavenProject project = new MavenProject( model, artifactFactory, mavenTools, repositoryHelper, this, config );
-        project.setOriginalModel( originalModel );
-
-        project.setActiveProfiles( activeProfiles );
-
-        // TODO: such a call in MavenMetadataSource too - packaging not really the intention of type
-        // TODO: maybe not strictly correct, while we should enfore that packaging has a type handler of the same id, we don't
-            project.getVersion(), project.getPackaging() );
+                                                                        project.getVersion(), project.getPackaging() );
-
-//        project.setPluginArtifactRepositories( mavenTools.buildArtifactRepositories( model.getPluginRepositories() ) );
-
-        DistributionManagement dm = model.getDistributionManagement();
-
-        if ( dm != null )
-        {
-            ArtifactRepository repo = mavenTools.buildDeploymentArtifactRepository( dm.getRepository() );
-            project.setReleaseArtifactRepository( repo );
-
-            if ( dm.getSnapshotRepository() != null )
-            {
-                repo = mavenTools.buildDeploymentArtifactRepository( dm.getSnapshotRepository() );
-                project.setSnapshotArtifactRepository( repo );
-            }
-        }
-
-        project.setParent( parentProject );
-
-        if ( parentProject != null )
-        {
-            project.setParentArtifact( parentArtifact );
-        }
+        project.setParentFile( parentFile );
-
-        try
-        {
-            LinkedHashSet repoSet = new LinkedHashSet();
-            if ( ( model.getRepositories() != null ) && !model.getRepositories().isEmpty() )
-            {
-                repoSet.addAll( model.getRepositories() );
-            }
-
-            if ( ( model.getPluginRepositories() != null ) && !model.getPluginRepositories().isEmpty() )
-            {
-                repoSet.addAll( model.getPluginRepositories() );
-            }
-
-            project.setRemoteArtifactRepositories(
-                                                  mavenTools.buildArtifactRepositories( new ArrayList( repoSet ) ) );
-        }
-        catch( Exception e )
-        {
-            e.printStackTrace();
-        }
-
-        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-
-        // TODO: these aren't taking active project artifacts into consideration in the reactor
-        project.setPluginArtifacts( createPluginArtifacts( projectId, project.getBuildPlugins(), pomFile ) );
-
-        project.setReportArtifacts( createReportArtifacts( projectId, project.getReportPlugins(), pomFile ) );
-
-        project.setExtensionArtifacts( createExtensionArtifacts( projectId, project.getBuildExtensions(), pomFile ) );
-
-    private void mergeDeterministicBuildElements( Build interpolatedBuild,
-                                                  Build dynamicBuild )
+    private void mergeDeterministicBuildElements( Build interpolatedBuild, Build dynamicBuild )
-                
+
-                    
+
-    public void calculateConcreteState( MavenProject project, ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
+    private MavenProject getSuperProject( ProjectBuilderConfiguration config, File projectDescriptor,
+                                          boolean isReactorProject )
+        throws ProjectBuildingException
-        if ( project.isConcrete() )
+
+        MavenProject superProject;
+        Model model = getSuperModel();
+        try
-            return;
+            superProject = new MavenProject( model, artifactFactory, mavenTools, repositoryHelper, this, config );
-
-        Build build = project.getBuild();
-        if ( build != null )
+        catch ( InvalidRepositoryException e )
-            initResourceMergeIds( build.getResources() );
-            initResourceMergeIds( build.getTestResources() );
+            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":" + STANDALONE_SUPERPOM_ARTIFACTID,
+                                                "Maven super-POM contains an invalid repository!", e );
-        Model model = ModelUtils.cloneModel( project.getModel() );
-
-        File basedir = project.getBasedir();
-
-        model = modelInterpolator.interpolate( model, basedir, config, getLogger().isDebugEnabled() );
-
-        List originalInterpolatedCompileSourceRoots = interpolateListOfStrings( project.getCompileSourceRoots(),
-                                                                           model,
-                                                                           project.getBasedir(),
-                                                                           config );
-
-        project.preserveCompileSourceRoots( originalInterpolatedCompileSourceRoots );
-
-        project.setCompileSourceRoots( originalInterpolatedCompileSourceRoots == null ? null
-                        : translateListOfPaths( originalInterpolatedCompileSourceRoots, basedir ) );
-
-        List originalInterpolatedTestCompileSourceRoots = interpolateListOfStrings( project.getTestCompileSourceRoots(),
-                                                                               model,
-                                                                               project.getBasedir(),
-                                                                               config );
-
-        project.preserveTestCompileSourceRoots( originalInterpolatedTestCompileSourceRoots );
-        project.setTestCompileSourceRoots( originalInterpolatedTestCompileSourceRoots == null ? null
-                        : translateListOfPaths( originalInterpolatedTestCompileSourceRoots, basedir ) );
-
-        List originalInterpolatedScriptSourceRoots = interpolateListOfStrings( project.getScriptSourceRoots(),
-                                                                          model,
-                                                                          project.getBasedir(),
-                                                                          config );
-
-        project.preserveScriptSourceRoots( originalInterpolatedScriptSourceRoots );
-        project.setScriptSourceRoots( originalInterpolatedScriptSourceRoots == null ? null
-                        : translateListOfPaths( originalInterpolatedScriptSourceRoots, basedir ) );
-
-        Model model2 = ModelUtils.cloneModel( model );
-
-        pathTranslator.alignToBaseDirectory( model, basedir );
-
-        project.preserveBuild( model2.getBuild() );
-        project.setBuild( model.getBuild() );
-
-        calculateConcreteProjectReferences( project, config );
-
-        MavenProject executionProject = project.getExecutionProject();
-        if ( executionProject != null && executionProject != project )
-        {
-            calculateConcreteState( executionProject, config );
-        }
-
-        project.setConcrete( true );
-    }
-
-    private void initResourceMergeIds( List<Resource> resources )
-    {
-        if ( resources != null )
-        {
-            for ( Resource resource : resources )
-            {
-                resource.initMergeId();
-            }
-        }
-    }
-
-    private void calculateConcreteProjectReferences( MavenProject project,
-                                                     ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        Map projectRefs = project.getProjectReferences();
-
-        if ( projectRefs != null )
-        {
-            for ( Iterator it = projectRefs.values().iterator(); it.hasNext(); )
-            {
-                MavenProject reference = (MavenProject) it.next();
-                calculateConcreteState( reference, config );
-            }
-        }
-    }
-
-    private List translateListOfPaths( List paths, File basedir )
-    {
-        if ( paths == null )
-        {
-            return null;
-        }
-        else if ( basedir == null )
-        {
-            return paths;
-        }
-
-        List result = new ArrayList( paths.size() );
-        for ( Iterator it = paths.iterator(); it.hasNext(); )
-        {
-            String path = (String) it.next();
-
-            String aligned = pathTranslator.alignToBaseDirectory( path, basedir );
-
-            result.add( aligned );
-        }
-
-        return result;
-    }
-
-    public void restoreDynamicState( MavenProject project, ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( !project.isConcrete() )
-        {
-            return;
-        }
-
-        restoreBuildRoots( project, config );
-        restoreModelBuildSection( project, config );
-
-        restoreDynamicProjectReferences( project, config );
-
-        MavenProject executionProject = project.getExecutionProject();
-        if ( executionProject != null && executionProject != project )
-        {
-            restoreDynamicState( executionProject, config );
-        }
-
-        project.setConcrete( false );
-    }
-
-    private void restoreDynamicProjectReferences( MavenProject project,
-                                                  ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        Map projectRefs = project.getProjectReferences();
-        if ( projectRefs != null )
-        {
-            for ( Iterator it = projectRefs.values().iterator(); it.hasNext(); )
-            {
-                MavenProject projectRef = (MavenProject) it.next();
-                restoreDynamicState( projectRef, config );
-            }
-        }
-    }
-
-    private void restoreBuildRoots( MavenProject project,
-                                    ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        project.setCompileSourceRoots( restoreListOfStrings( project.getDynamicCompileSourceRoots(),
-                                                             project.getOriginalInterpolatedCompileSourceRoots(),
-                                                             project.getCompileSourceRoots(),
-                                                             project,
-                                                             config ) );
-
-        project.setTestCompileSourceRoots( restoreListOfStrings( project.getDynamicTestCompileSourceRoots(),
-                                                                 project.getOriginalInterpolatedTestCompileSourceRoots(),
-                                                                 project.getTestCompileSourceRoots(),
-                                                                 project,
-                                                                 config ) );
-
-        project.setScriptSourceRoots( restoreListOfStrings( project.getDynamicScriptSourceRoots(),
-                                                            project.getOriginalInterpolatedScriptSourceRoots(),
-                                                            project.getScriptSourceRoots(),
-                                                            project,
-                                                            config ) );
-
-        project.clearRestorableRoots();
-    }
-
-    private void restoreModelBuildSection( MavenProject project,
-                                           ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        Build changedBuild = project.getBuild();
-        Build dynamicBuild = project.getDynamicBuild();
-        Build originalInterpolatedBuild = project.getOriginalInterpolatedBuild();
-
-        dynamicBuild.setResources( restoreResources( dynamicBuild.getResources(),
-                                                         originalInterpolatedBuild.getResources(),
-                                                         changedBuild.getResources(),
-                                                         project,
-                                                         config ) );
-
-        dynamicBuild.setTestResources( restoreResources( dynamicBuild.getTestResources(),
-                                                         originalInterpolatedBuild.getTestResources(),
-                                                         changedBuild.getTestResources(),
-                                                         project,
-                                                         config ) );
-
-        dynamicBuild.setFilters( restoreListOfStrings( dynamicBuild.getFilters(),
-                                                           originalInterpolatedBuild.getFilters(),
-                                                           changedBuild.getFilters(),
-                                                           project,
-                                                           config ) );
-
-        dynamicBuild.setFinalName( restoreString( dynamicBuild.getFinalName(),
-                                                  originalInterpolatedBuild.getFinalName(),
-                                                  changedBuild.getFinalName(),
-                                                  project,
-                                                  config ) );
-
-        dynamicBuild.setDefaultGoal( restoreString( dynamicBuild.getDefaultGoal(),
-                                                  originalInterpolatedBuild.getDefaultGoal(),
-                                                  changedBuild.getDefaultGoal(),
-                                                  project,
-                                                  config ) );
-
-        dynamicBuild.setSourceDirectory( restoreString( dynamicBuild.getSourceDirectory(),
-                                                            originalInterpolatedBuild.getSourceDirectory(),
-                                                            changedBuild.getSourceDirectory(),
-                                                            project,
-                                                            config ) );
-
-        dynamicBuild.setTestSourceDirectory( restoreString( dynamicBuild.getTestSourceDirectory(),
-                                                                originalInterpolatedBuild.getTestSourceDirectory(),
-                                                                changedBuild.getTestSourceDirectory(),
-                                                                project,
-                                                                config ) );
-
-        dynamicBuild.setScriptSourceDirectory( restoreString( dynamicBuild.getScriptSourceDirectory(),
-                                                                  originalInterpolatedBuild.getScriptSourceDirectory(),
-                                                                  changedBuild.getScriptSourceDirectory(),
-                                                                  project,
-                                                                  config ) );
-
-        dynamicBuild.setOutputDirectory( restoreString( dynamicBuild.getOutputDirectory(),
-                                                            originalInterpolatedBuild.getOutputDirectory(),
-                                                            changedBuild.getOutputDirectory(),
-                                                            project,
-                                                            config ) );
-
-        dynamicBuild.setTestOutputDirectory( restoreString( dynamicBuild.getTestOutputDirectory(),
-                                                                originalInterpolatedBuild.getTestOutputDirectory(),
-                                                                changedBuild.getTestOutputDirectory(),
-                                                                project,
-                                                                config ) );
-
-        dynamicBuild.setDirectory( restoreString( dynamicBuild.getDirectory(),
-                                                      originalInterpolatedBuild.getDirectory(),
-                                                      changedBuild.getDirectory(),
-                                                      project,
-                                                      config ) );
-
-        project.setBuild( dynamicBuild );
-
-        project.clearRestorableBuild();
-    }
-
-    private List interpolateListOfStrings( List originalStrings,
-                                           Model model,
-                                           File projectDir,
-                                           ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalStrings == null )
-        {
-            return null;
-        }
-
-        List result = new ArrayList();
-
-        for ( Iterator it = originalStrings.iterator(); it.hasNext(); )
-        {
-            String original = (String) it.next();
-            String interpolated = modelInterpolator.interpolate( original, model, projectDir, config, getLogger().isDebugEnabled() );
-
-            result.add( interpolated );
-        }
-
-        return result;
-    }
-
-    private String restoreString( String originalString,
-                                      String originalInterpolatedString,
-                                      String changedString,
-                                      MavenProject project,
-                                      ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalString == null )
-        {
-            return changedString;
-        }
-        else if ( changedString == null )
-        {
-            return originalString;
-        }
-
-        Model model = project.getModel();
-
-        String relativeChangedString;
-        if ( project.getBasedir() != null )
-        {
-            relativeChangedString = pathTranslator.unalignFromBaseDirectory( changedString, project.getBasedir() );
-        }
-        else
-        {
-            relativeChangedString = changedString;
-        }
-
-        String interpolatedOriginal = modelInterpolator.interpolate( originalString, model, project.getBasedir(), config, getLogger().isDebugEnabled() );
-        String interpolatedOriginal2 = modelInterpolator.interpolate( originalInterpolatedString,
-                                                                 model,
-                                                                 project.getBasedir(), config, getLogger().isDebugEnabled() );
-
-        String interpolatedChanged = modelInterpolator.interpolate( changedString, model, project.getBasedir(), config, getLogger().isDebugEnabled() );
-        String relativeInterpolatedChanged = modelInterpolator.interpolate( relativeChangedString, model, project.getBasedir(), config, getLogger().isDebugEnabled() );
-
-        if ( interpolatedOriginal.equals( interpolatedChanged )
-             || interpolatedOriginal2.equals( interpolatedChanged ) )
-        {
-            return originalString;
-        }
-        else if ( interpolatedOriginal.equals( relativeInterpolatedChanged )
-                        || interpolatedOriginal2.equals( relativeInterpolatedChanged ) )
-       {
-           return originalString;
-       }
-
-        return relativeChangedString;
-    }
-
-    private List restoreListOfStrings( List originalStrings,
-                                           List originalInterpolatedStrings,
-                                           List changedStrings,
-                                           MavenProject project,
-                                           ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalStrings == null )
-        {
-            return changedStrings;
-        }
-        else if ( changedStrings == null )
-        {
-            return originalStrings;
-        }
-
-        List result = new ArrayList();
-
-        Map orig = new HashMap();
-        for ( int idx = 0; idx < originalStrings.size(); idx++ )
-        {
-            String[] permutations = new String[2];
-
-            permutations[0] = (String) originalInterpolatedStrings.get( idx );
-            permutations[1] = (String) originalStrings.get( idx );
-
-            orig.put( permutations[0], permutations );
-        }
-
-        for ( Iterator it = changedStrings.iterator(); it.hasNext(); )
-        {
-            String changedString = (String) it.next();
-            String relativeChangedString;
-            if ( project.getBasedir() != null )
-            {
-                relativeChangedString = pathTranslator.unalignFromBaseDirectory( changedString, project.getBasedir() );
-            }
-            else
-            {
-                relativeChangedString = changedString;
-            }
-
-            String interpolated = modelInterpolator.interpolate( changedString,
-                                                                 project.getModel(),
-                                                                 project.getBasedir(),
-                                                                 config,
-                                                                 getLogger().isDebugEnabled() );
-
-            String relativeInterpolated = modelInterpolator.interpolate( relativeChangedString,
-                                                                         project.getModel(),
-                                                                         project.getBasedir(),
-                                                                         config,
-                                                                         getLogger().isDebugEnabled() );
-
-            String[] original = (String[]) orig.get( interpolated );
-            if ( original == null )
-            {
-                original = (String[]) orig.get( relativeInterpolated );
-            }
-
-            if ( original == null )
-            {
-                result.add( relativeChangedString );
-            }
-            else
-            {
-                result.add( original[1] );
-            }
-        }
-
-        return result;
-    }
-
-    // TODO: Convert this to use the mergeId on each resource...
-    private List restoreResources( List<Resource> originalResources,
-                                       List<Resource> originalInterpolatedResources,
-                                       List<Resource> changedResources,
-                                       MavenProject project,
-                                       ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalResources == null || changedResources == null )
-        {
-            return originalResources;
-        }
-
-        List<Resource> result = new ArrayList<Resource>();
-
-        Map<String, Resource[]> originalResourcesByMergeId = new HashMap<String, Resource[]>();
-        for ( int idx = 0; idx < originalResources.size(); idx++ )
-        {
-            Resource[] permutations = new Resource[2];
-
-            permutations[0] = originalInterpolatedResources.get( idx );
-            permutations[1] = originalResources.get( idx );
-
-            originalResourcesByMergeId.put( permutations[0].getMergeId(), permutations );
-        }
-
-        for ( Resource resource : changedResources )
-        {
-            String mergeId = resource.getMergeId();
-            if ( mergeId == null || !originalResourcesByMergeId.containsKey( mergeId ) )
-            {
-                result.add( resource );
-            }
-            else
-            {
-                Resource originalInterpolatedResource = originalResourcesByMergeId.get( mergeId )[0];
-                Resource originalResource = originalResourcesByMergeId.get( mergeId )[1];
-
-                String dir = modelInterpolator.interpolate( resource.getDirectory(), project.getModel(), project.getBasedir(), config, getLogger().isDebugEnabled() );
-                String oDir = originalInterpolatedResource.getDirectory();
-
-                if ( !dir.equals( oDir ) )
-                {
-                    originalResource.setDirectory( pathTranslator.unalignFromBaseDirectory( dir, project.getBasedir() ) );
-                }
-
-                if ( resource.getTargetPath() != null )
-                {
-                    String target = modelInterpolator.interpolate( resource.getTargetPath(), project.getModel(), project.getBasedir(), config, getLogger().isDebugEnabled() );
-
-                    String oTarget = originalInterpolatedResource.getTargetPath();
-
-                    if ( !target.equals( oTarget ) )
-                    {
-                        originalResource.setTargetPath( pathTranslator.unalignFromBaseDirectory( target, project.getBasedir() ) );
-                    }
-                }
-
-                originalResource.setFiltering( resource.isFiltering() );
-
-                originalResource.setExcludes( collectRestoredListOfPatterns( resource.getExcludes(),
-                                                                             originalResource.getExcludes(),
-                                                                             originalInterpolatedResource.getExcludes() ) );
-
-                originalResource.setIncludes( collectRestoredListOfPatterns( resource.getIncludes(),
-                                                                             originalResource.getIncludes(),
-                                                                             originalInterpolatedResource.getIncludes() ) );
-
-                result.add( originalResource );
-            }
-        }
-
-        return result;
-    }
-
-    private List<String> collectRestoredListOfPatterns( List<String> patterns,
-                                                        List<String> originalPatterns,
-                                                        List<String> originalInterpolatedPatterns )
-    {
-        LinkedHashSet<String> collectedPatterns = new LinkedHashSet<String>();
-
-        collectedPatterns.addAll( originalPatterns );
-
-        for ( String pattern : patterns )
-        {
-            if ( !originalInterpolatedPatterns.contains( pattern ) )
-            {
-                collectedPatterns.add( pattern );
-            }
-        }
-
-        return (List<String>) ( collectedPatterns.isEmpty() ? Collections.emptyList()
-                        : new ArrayList<String>( collectedPatterns ) );
-    }
-
-    private void validateModel( Model model,
-                                File pomFile )
-        throws InvalidProjectModelException
-    {
-        // Must validate before artifact construction to make sure dependencies are good
-        ModelValidationResult validationResult = validator.validate( model );
-
-        if ( validationResult.getMessageCount() > 0 )
-        {
-            throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile,
-                validationResult );
-        }
-    }
-
-    /**
-     * @param isReactorProject
-     * @noinspection CollectionDeclaredAsConcreteClass
-     * @todo We need to find an effective way to unit test parts of this method!
-     * @todo Refactor this into smaller methods with discrete purposes.
-     */
-    private MavenProject assembleLineage( Model model,
-                                          LinkedList lineage,
-                                          ProjectBuilderConfiguration config,
-                                          File pomFile,
-                                          Set aggregatedRemoteWagonRepositories,
-                                          boolean strict,
-                                          boolean isReactorProject )
-        throws ProjectBuildingException, InvalidRepositoryException
-    {
-        ModelLineage modelLineage = new DefaultModelLineage();
-
-        modelLineage.setOrigin( model, pomFile, new ArrayList( aggregatedRemoteWagonRepositories ), isReactorProject );
-
-        modelLineageBuilder.resumeBuildingModelLineage( modelLineage, config, !strict, isReactorProject );
-
-        // FIXME: Find a way to pass in this context, so it's never null!
-
+            // used to trigger the caching of SystemProperties in the container context...
+            try
+            {
+                externalProfileManager.getActiveProfiles();
+            }
+            catch ( ProfileActivationException e )
+            {
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.",
+                                                    projectDescriptor, e );
+            }
-        MavenProject lastProject = null;
-        for ( ModelLineageIterator it = modelLineage.lineageIterator(); it.hasNext(); )
-        {
-            Model currentModel = (Model) it.next();
+        List<Profile> superProjectProfiles = new ArrayList<Profile>();
+        superProjectProfiles.addAll( profileAdvisor.applyActivatedProfiles( model, projectDescriptor, isReactorProject,
+                                                                            profileActivationContext ) );
+        superProjectProfiles.addAll(
+            profileAdvisor.applyActivatedExternalProfiles( model, projectDescriptor, externalProfileManager ) );
+        superProject.setActiveProfiles( superProjectProfiles );
-            File currentPom = it.getPOMFile();
-
-            MavenProject project = new MavenProject( currentModel );
-            project.setFile( currentPom );
-
-            if ( lastProject != null )
-            {
-                // TODO: Use cached parent project here, and stop looping, if possible...
-                lastProject.setParent( project );
-                project = lastProject.getParent();
-
-                lastProject.setParentArtifact( artifactFactory.createParentArtifact( project.getGroupId(), project
-                    .getArtifactId(), project.getVersion() ) );
-            }
-
-            // NOTE: the caching aspect may replace the parent project instance, so we apply profiles here.
-            // TODO: Review this...is that a good idea, to allow application of profiles when other profiles could have been applied already?
-            project.setActiveProfiles( profileAdvisor.applyActivatedProfiles( project.getModel(), project.getFile(), isReactorProject, profileActivationContext ) );
-
-            lineage.addFirst( project );
-
-            lastProject = project;
-        }
-
-        MavenProject result = (MavenProject) lineage.getLast();
-
-        if ( externalProfileManager != null )
-        {
-            LinkedHashSet active = new LinkedHashSet();
-
-            List existingActiveProfiles = result.getActiveProfiles();
-            if ( ( existingActiveProfiles != null ) && !existingActiveProfiles.isEmpty() )
-            {
-                active.addAll( existingActiveProfiles );
-            }
-
-            profileAdvisor.applyActivatedExternalProfiles( result.getModel(), pomFile, externalProfileManager );
-        }
-
-        return result;
+        return superProject;
-    private void mergeManagedDependencies(Model model, ArtifactRepository localRepository, List parentSearchRepositories)
-        throws ProjectBuildingException
-    {
-        DependencyManagement modelDepMgmt = model.getDependencyManagement();
-
-        if (modelDepMgmt != null)
-        {
-            Map depsMap = new TreeMap();
-            Iterator iter = modelDepMgmt.getDependencies().iterator();
-            boolean doInclude = false;
-            while (iter.hasNext())
-            {
-                Dependency dep = (Dependency) iter.next();
-                depsMap.put( dep.getManagementKey(), dep );
-
-                // MNG-3391: SEE BELOW.
-                if (dep.getType().equals("pom") && Artifact.SCOPE_IMPORT.equals( dep.getScope() ) )
-                {
-                    doInclude = true;
-                }
-            }
-            Map newDeps = new TreeMap(depsMap);
-            iter = modelDepMgmt.getDependencies().iterator();
-            if (doInclude)
-            {
-                while (iter.hasNext())
-                {
-                    Dependency dep = (Dependency)iter.next();
-
-                    // MNG-3391: The check for scope == 'import' to limit the StackOverflowExceptions caused
-                    // when importing from the parent and the import-target is a module that declares the
-                    // current pom as a parent.
-                    //
-                    // Also, dependencies with type == 'pom' are the best way we currently have to
-                    // aggregate multiple other dependencies without messing with the issues caused by using
-                    // an assembly (ClassCastException if a second-level dep is also part of the maven core,
-                    // for instance)
-                    if (dep.getType().equals("pom") && Artifact.SCOPE_IMPORT.equals( dep.getScope() ) )
-                    {
-                        Artifact artifact = artifactFactory.createProjectArtifact( dep.getGroupId(), dep.getArtifactId(),
-                                                                                  dep.getVersion(), dep.getScope() );
-                        MavenProject project = buildFromRepository(artifact, parentSearchRepositories, localRepository, false);
-
-                        DependencyManagement depMgmt = project.getDependencyManagement();
-
-                        if (depMgmt != null)
-                        {
-                            if ( getLogger().isDebugEnabled() )
-                            {
-                                getLogger().debug( "Importing managed dependencies for " + dep.toString() );
-                            }
-
-                            for ( Iterator it = depMgmt.getDependencies().iterator(); it.hasNext(); )
-                            {
-                                Dependency includedDep = (Dependency) it.next();
-                                String key = includedDep.getManagementKey();
-                                if (!newDeps.containsKey(key))
-                                {
-                                    newDeps.put( includedDep.getManagementKey(), includedDep );
-                                }
-                            }
-                            newDeps.remove(dep.getManagementKey());
-                        }
-                    }
-                }
-                List deps = new ArrayList(newDeps.values());
-                modelDepMgmt.setDependencies(deps);
-            }
-        }
-    }
-
-    private Model readModelLegacy( String projectId,
-                             File file,
-                             boolean strict )
-        throws ProjectBuildingException
-    {
-        Reader reader = null;
-        try
-        {
-            reader = ReaderFactory.newXmlReader( file );
-
-            String modelSource = IOUtil.toString( reader );
-
-            checkModelVersion( modelSource, projectId, file );
-
-            StringReader sReader = new StringReader( modelSource );
-
-            try
-            {
-                return modelReader.read( sReader, strict );
-            }
-            catch ( XmlPullParserException e )
-            {
-                throw new InvalidProjectModelException( projectId, "Parse error reading POM. Reason: " + e.getMessage(),
-                                                        file, e );
-            }
-        }
-        catch ( FileNotFoundException e )
-        {
-            throw new ProjectBuildingException( projectId,
-                "Could not find the model file '" + file.getAbsolutePath() + "'.", file, e );
-        }
-        catch ( IOException e )
-        {
-            throw new ProjectBuildingException( projectId, "Failed to build model from file '" +
-                file.getAbsolutePath() + "'.\nError: \'" + e.getLocalizedMessage() + "\'", file, e );
-        }
-        finally
-        {
-            IOUtil.close( reader );
-        }
-    }
-
-    private void checkModelVersion( String modelSource,
-                                    String projectId,
-                                    File file )
-        throws InvalidProjectModelException
-    {
-        if ( modelSource.indexOf( "<modelVersion>" + MAVEN_MODEL_VERSION ) < 0 )
-        {
-            throw new InvalidProjectModelException( projectId, "Not a v" + MAVEN_MODEL_VERSION + " POM.", file );
-        }
-    }
-
-    /**
-     * @deprecated use {@link #createPluginArtifacts(String, List, File)}
-     * @param projectId
-     * @param plugins
-     * @param pomLocation absolute path of pom file
-     * @return
-     * @throws ProjectBuildingException
-     */
-    @Deprecated
-    protected Set createPluginArtifacts( String projectId,
-                                         List plugins, String pomLocation )
-        throws ProjectBuildingException
-    {
-        return createPluginArtifacts( projectId, plugins, new File( pomLocation ) );
-    }
-
-    /**
-     *
-     * @param projectId
-     * @param plugins
-     * @param pomLocation pom file
-     * @return
-     * @throws ProjectBuildingException
-     */
-    protected Set createPluginArtifacts( String projectId,
-                                         List plugins, File pomLocation )
-        throws ProjectBuildingException
-    {
-        Set pluginArtifacts = new HashSet();
-
-        for ( Iterator i = plugins.iterator(); i.hasNext(); )
-        {
-            Plugin p = (Plugin) i.next();
-
-            String version;
-            if ( StringUtils.isEmpty( p.getVersion() ) )
-            {
-                version = "RELEASE";
-            }
-            else
-            {
-                version = p.getVersion();
-            }
-
-            Artifact artifact;
-            try
-            {
-                artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
-                    VersionRange.createFromVersionSpec( version ) );
-            }
-            catch ( InvalidVersionSpecificationException e )
-            {
-                throw new InvalidProjectVersionException( projectId, "Plugin: " + p.getKey(), version, pomLocation, e );
-            }
-
-            if ( artifact != null )
-            {
-                pluginArtifacts.add( artifact );
-            }
-        }
-
-        return pluginArtifacts;
-    }
-
-    /**
-     * @deprecated use {@link #createReportArtifacts(String, List, File)}
-     * @param projectId
-     * @param reports
-     * @param pomLocation absolute path of pom file
-     * @return
-     * @throws ProjectBuildingException
-     */
-    @Deprecated
-    protected Set createReportArtifacts( String projectId,
-                                         List reports, String pomLocation )
-        throws ProjectBuildingException
-    {
-        return createReportArtifacts( projectId, reports, new File( pomLocation ) );
-    }
-
-    // TODO: share with createPluginArtifacts?
-    protected Set createReportArtifacts( String projectId,
-                                         List reports, File pomLocation )
-        throws ProjectBuildingException
-    {
-        Set pluginArtifacts = new HashSet();
-
-        if ( reports != null )
-        {
-            for ( Iterator i = reports.iterator(); i.hasNext(); )
-            {
-                ReportPlugin p = (ReportPlugin) i.next();
-
-                String version;
-                if ( StringUtils.isEmpty( p.getVersion() ) )
-                {
-                    version = "RELEASE";
-                }
-                else
-                {
-                    version = p.getVersion();
-                }
-
-                Artifact artifact;
-                try
-                {
-                    artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
-                        VersionRange.createFromVersionSpec( version ) );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-                    throw new InvalidProjectVersionException( projectId, "Report plugin: " + p.getKey(), version, pomLocation, e );
-                }
-
-                if ( artifact != null )
-                {
-                    pluginArtifacts.add( artifact );
-                }
-            }
-        }
-
-        return pluginArtifacts;
-    }
-
-    /**
-     * @deprecated use {@link #createExtensionArtifacts(String, List, File)}
-     * @param projectId
-     * @param extensions
-     * @param pomLocation absolute path of pom file
-     * @return
-     * @throws ProjectBuildingException
-     */
-    @Deprecated
-    protected Set createExtensionArtifacts( String projectId,
-                                            List extensions, String pomLocation )
-        throws ProjectBuildingException
-    {
-        return createExtensionArtifacts( projectId, extensions, new File( pomLocation ) );
-    }
-
-    // TODO: share with createPluginArtifacts?
-    protected Set createExtensionArtifacts( String projectId,
-                                            List extensions, File pomFile )
-        throws ProjectBuildingException
-    {
-        Set extensionArtifacts = new HashSet();
-
-        if ( extensions != null )
-        {
-            for ( Iterator i = extensions.iterator(); i.hasNext(); )
-            {
-                Extension ext = (Extension) i.next();
-
-                String version;
-                if ( StringUtils.isEmpty( ext.getVersion() ) )
-                {
-                    version = "RELEASE";
-                }
-                else
-                {
-                    version = ext.getVersion();
-                }
-
-                Artifact artifact;
-                try
-                {
-                    VersionRange versionRange = VersionRange.createFromVersionSpec( version );
-                    artifact =
-                        artifactFactory.createExtensionArtifact( ext.getGroupId(), ext.getArtifactId(), versionRange );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-                    String key = ArtifactUtils.versionlessKey( ext.getGroupId(), ext.getArtifactId() );
-                    throw new InvalidProjectVersionException( projectId, "Extension: " + key,
-                                                              version, pomFile, e );
-                }
-
-                if ( artifact != null )
-                {
-                    extensionArtifacts.add( artifact );
-                }
-            }
-        }
-
-        return extensionArtifacts;
-    }
-
-    // ----------------------------------------------------------------------
-    //
-    // ----------------------------------------------------------------------
-
-
-            checkModelVersion( modelSource, projectId, null );
+            if ( modelSource.indexOf( "<modelVersion>" + MAVEN_MODEL_VERSION ) < 0 )
+            {
+                throw new InvalidProjectModelException( projectId, "Not a v" + MAVEN_MODEL_VERSION + " POM.",
+                                                        new File( "." ) );
+            }
-            return modelReader.read( sReader, STRICT_MODEL_PARSING );
+            superModel = modelReader.read( sReader, STRICT_MODEL_PARSING );
+            return superModel;
-            throw new InvalidProjectModelException( projectId, "Parse error reading POM. Reason: " + e.getMessage(), e );
+            throw new InvalidProjectModelException( projectId, "Parse error reading POM. Reason: " + e.getMessage(),
+                                                    e );
-    protected Logger getLogger()
+    private MavenProject readModelFromLocalPath( String projectId, File projectDescriptor, PomArtifactResolver resolver,
+                                                 ProjectBuilderConfiguration config )
+        throws ProjectBuildingException
-        return logger;
+        if ( projectDescriptor == null )
+        {
+            throw new IllegalArgumentException( "projectDescriptor: null, Project Id =" + projectId );
+        }
+
+        if ( projectBuilder == null )
+        {
+            throw new IllegalArgumentException( "projectBuilder: not initialized" );
+        }
+
+        MavenProject mavenProject;
+        try
+        {
+            mavenProject = projectBuilder.buildFromLocalPath( new FileInputStream( projectDescriptor ), Arrays.asList(
+                getSuperProject( config, projectDescriptor, true ).getModel() ), null, null, resolver,
+                                                                                 projectDescriptor.getParentFile(),
+                                                                                 config );
+        }
+        catch ( IOException e )
+        {
+            throw new ProjectBuildingException( projectId, "File = " + projectDescriptor.getAbsolutePath(), e );
+        }
+
+        return mavenProject;
+
-    public void enableLogging( Logger logger )
+    private void validateModel( Model model, File pomFile )
+        throws InvalidProjectModelException
-        this.logger = logger;
+        // Must validate before artifact construction to make sure dependencies are good
+        ModelValidationResult validationResult = validator.validate( model );
+
+        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+
+        if ( validationResult.getMessageCount() > 0 )
+        {
+            for ( String s : (List<String>) validationResult.getMessages() )
+            {
+                System.out.println( s );
+            }
+            try
+            {
+                Writer out = WriterFactory.newXmlWriter( System.out );
+                MavenXpp3Writer writer = new MavenXpp3Writer();
+                writer.write( out, model );
+                out.close();
+            }
+            catch ( IOException e )
+            {
+
+            }
+            throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile, validationResult );
+        }
-    private Model readModelFromLocalPath( String projectId,
-                            File projectDescriptor,
-                            PomArtifactResolver resolver )
-       throws ProjectBuildingException
-   {
-       if(projectDescriptor == null) {
-           throw new IllegalArgumentException("projectDescriptor: null, Project Id =" + projectId);
-       }
+    private static String safeVersionlessKey( String groupId, String artifactId )
+    {
+        String gid = groupId;
-       if(projectBuilder == null) {
-           throw new IllegalArgumentException("projectBuilder: not initialized");
-       }
+        if ( StringUtils.isEmpty( gid ) )
+        {
+            gid = "unknown";
+        }
-       MavenProject mavenProject;
-       try {
-           mavenProject = projectBuilder.buildFromLocalPath(new FileInputStream(projectDescriptor),
-                   null, null, resolver,
-                   projectDescriptor.getParentFile());
-       } catch (IOException e) {
-           e.printStackTrace();
-           throw new ProjectBuildingException(projectId, "File = " + projectDescriptor.getAbsolutePath() , e);
-       }
+        String aid = artifactId;
-      return mavenProject.getModel();
+        if ( StringUtils.isEmpty( aid ) )
+        {
+            aid = "unknown";
+        }
-   }
+        return ArtifactUtils.versionlessKey( gid, aid );
+    }
+
+    private static void setBuildOutputDirectoryOnParent( MavenProject project )
+    {
+        MavenProject parent = project.getParent();
+        if ( parent != null )
+        {
+            parent.getModel().getBuild().setDirectory( parent.getFile().getAbsolutePath() );
+            setBuildOutputDirectoryOnParent( parent );
+        }
+    }
+
+    private static class DefaultModelDefaultsInjector
+    {
+        public void injectDefaults( Model model )
+        {
+            injectDependencyDefaults( model.getDependencies(), model.getDependencyManagement() );
+            if ( model.getBuild() != null )
+            {
+                injectPluginDefaults( model.getBuild(), model.getBuild().getPluginManagement() );
+            }
+        }
+
+        private static void injectPluginDefaults( Build build, PluginManagement pluginManagement )
+        {
+            if ( pluginManagement == null )
+            {
+                // nothing to inject.
+                return;
+            }
+
+            List buildPlugins = build.getPlugins();
+
+            if ( buildPlugins != null && !buildPlugins.isEmpty() )
+            {
+                Map pmPlugins = pluginManagement.getPluginsAsMap();
+
+                if ( pmPlugins != null && !pmPlugins.isEmpty() )
+                {
+                    for ( Iterator it = buildPlugins.iterator(); it.hasNext(); )
+                    {
+                        Plugin buildPlugin = (Plugin) it.next();
+
+                        Plugin pmPlugin = (Plugin) pmPlugins.get( buildPlugin.getKey() );
+
+                        if ( pmPlugin != null )
+                        {
+                            ModelUtils.mergePluginDefinitions( buildPlugin, pmPlugin, false );
+                        }
+                    }
+                }
+            }
+
+        }
+
+        private static void injectDependencyDefaults( List dependencies, DependencyManagement dependencyManagement )
+        {
+            if ( dependencyManagement != null )
+            {
+                // a given project's dependencies should be smaller than the
+                // group-defined defaults set...
+                // in other words, the project's deps will probably be a subset of
+                // those specified in defaults.
+                Map depsMap = new TreeMap();
+                for ( Iterator it = dependencies.iterator(); it.hasNext(); )
+                {
+                    Dependency dep = (Dependency) it.next();
+                    depsMap.put( dep.getManagementKey(), dep );
+                }
+
+                List managedDependencies = dependencyManagement.getDependencies();
+
+                for ( Iterator it = managedDependencies.iterator(); it.hasNext(); )
+                {
+                    Dependency def = (Dependency) it.next();
+                    String key = def.getManagementKey();
+
+                    Dependency dep = (Dependency) depsMap.get( key );
+                    if ( dep != null )
+                    {
+                        mergeDependencyWithDefaults( dep, def );
+                    }
+                }
+            }
+        }
+
+        private static void mergeDependencyWithDefaults( Dependency dep, Dependency def )
+        {
+            if ( dep.getScope() == null && def.getScope() != null )
+            {
+                dep.setScope( def.getScope() );
+                dep.setSystemPath( def.getSystemPath() );
+            }
+
+            if ( dep.getVersion() == null && def.getVersion() != null )
+            {
+                dep.setVersion( def.getVersion() );
+            }
+
+            if ( dep.getClassifier() == null && def.getClassifier() != null )
+            {
+                dep.setClassifier( def.getClassifier() );
+            }
+
+            if ( dep.getType() == null && def.getType() != null )
+            {
+                dep.setType( def.getType() );
+            }
+
+            List exclusions = dep.getExclusions();
+            if ( exclusions == null || exclusions.isEmpty() )
+            {
+                dep.setExclusions( def.getExclusions() );
+            }
+        }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS55 UPD43 UPD83 MOV43 MOV44 MOV44 MOV43 MOV60 UPD83 INS39 UPD42 MOV44 MOV44 MOV43 UPD83 INS39 UPD42 MOV44 MOV44 MOV43 INS8 UPD83 MOV83 MOV43 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS83 MOV43 INS42 MOV44 MOV44 INS44 MOV44 MOV43 MOV43 MOV43 INS8 MOV83 MOV43 INS42 MOV44 MOV44 MOV44 MOV43 INS8 MOV43 MOV44 INS83 INS83 UPD83 UPD42 MOV44 INS83 INS83 INS42 MOV31 INS31 INS31 INS31 UPD42 UPD42 MOV60 MOV25 MOV41 INS21 INS21 INS54 INS21 INS21 MOV43 UPD42 MOV60 MOV60 MOV60 MOV25 MOV60 MOV54 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV41 MOV43 INS42 MOV60 MOV25 MOV60 MOV25 MOV21 MOV25 INS21 INS60 MOV60 MOV21 MOV21 MOV21 MOV41 MOV60 MOV60 MOV54 MOV60 MOV60 MOV60 INS25 MOV60 INS21 MOV21 MOV21 INS41 MOV60 INS25 UPD83 UPD42 MOV44 MOV83 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 INS8 MOV83 UPD83 MOV83 MOV39 INS42 MOV44 MOV44 INS8 MOV83 INS83 INS39 INS42 INS44 INS44 INS8 MOV27 UPD43 INS32 INS32 INS8 INS12 UPD66 UPD66 INS32 INS32 INS74 INS32 INS27 INS32 MOV43 INS59 MOV43 MOV43 INS27 INS8 MOV8 INS74 INS32 INS42 MOV8 INS42 INS8 MOV27 INS8 INS21 MOV43 INS42 UPD43 UPD42 MOV25 MOV60 INS25 UPD42 INS25 MOV43 INS42 MOV43 INS42 MOV25 INS25 MOV25 MOV25 MOV60 MOV25 UPD42 INS21 INS21 INS21 INS21 MOV42 UPD42 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 MOV32 INS21 INS44 INS8 MOV21 INS14 UPD42 MOV42 INS42 INS42 INS14 INS42 INS42 MOV42 MOV43 INS43 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV21 INS27 INS27 MOV21 MOV21 INS14 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 UPD42 MOV42 MOV33 MOV54 MOV21 MOV43 INS43 UPD42 UPD42 MOV42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV21 MOV60 MOV60 INS21 INS41 INS70 INS54 MOV53 UPD42 UPD42 INS21 MOV21 INS32 UPD42 INS27 MOV8 MOV43 MOV27 INS8 MOV27 INS8 INS27 MOV8 INS27 MOV8 MOV27 INS8 INS27 MOV8 MOV43 INS27 INS8 INS7 INS32 INS7 INS32 UPD42 INS32 INS74 INS59 INS32 INS7 INS42 INS42 INS7 INS43 INS42 INS53 INS7 INS43 INS42 INS42 MOV32 UPD43 MOV43 INS42 INS42 MOV32 INS42 INS74 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 UPD42 MOV42 MOV33 INS32 INS33 UPD43 MOV43 MOV43 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 INS74 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS7 INS42 INS44 INS11 INS8 INS8 INS12 INS32 INS42 INS32 MOV32 INS32 INS21 INS42 INS33 UPD42 INS38 MOV60 MOV25 MOV60 MOV24 MOV60 MOV24 MOV27 INS27 INS21 MOV21 INS27 INS27 INS27 INS27 MOV21 INS27 INS27 INS21 UPD42 INS27 INS32 MOV21 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV43 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS32 MOV32 UPD42 MOV42 UPD42 MOV43 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS14 UPD42 INS32 UPD42 INS14 MOV43 INS43 INS42 MOV32 MOV43 INS42 MOV74 INS32 INS21 INS60 INS60 INS21 INS21 MOV44 INS8 INS32 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS32 MOV43 INS27 MOV32 MOV43 MOV32 MOV32 MOV32 MOV33 INS32 MOV32 MOV33 INS32 MOV33 INS32 MOV33 INS32 INS33 MOV32 MOV33 INS32 INS33 INS32 UPD42 UPD42 UPD42 MOV42 MOV33 UPD42 MOV42 MOV42 INS32 INS42 INS45 INS42 INS14 INS42 INS42 MOV32 INS42 INS42 INS32 INS9 INS74 INS42 INS42 INS42 INS32 UPD42 MOV42 INS45 INS32 INS14 INS42 MOV32 INS32 MOV43 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS27 INS45 INS42 UPD42 MOV42 MOV32 MOV33 INS33 MOV42 MOV32 UPD42 INS42 UPD42 UPD42 INS42 MOV43 INS42 INS42 INS42 INS42 INS52 INS42 INS27 INS45 INS32 UPD43 INS42 INS42 INS43 INS32 INS9 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS32 MOV32 UPD42 MOV42 MOV32 UPD42 MOV42 INS42 MOV32 INS32 INS42 INS42 UPD42 INS27 INS38 MOV43 MOV21 UPD42 MOV32 MOV43 MOV60 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 UPD42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 MOV32 INS43 MOV32 INS32 INS42 INS42 INS42 MOV43 MOV43 INS32 INS42 MOV42 INS42 INS43 MOV32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 MOV42 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 MOV33 INS32 MOV32 MOV43 MOV43 MOV43 MOV43 UPD27 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS45 INS42 MOV43 INS45 INS32 INS42 INS42 INS42 INS40 INS43 UPD42 UPD42 INS42 INS42 MOV43 MOV60 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS9 INS42 UPD43 MOV43 INS27 INS8 UPD43 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS9 UPD42 MOV42 UPD42 UPD42 INS11 UPD42 INS42 INS33 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 MOV32 MOV43 INS32 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS9 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL66 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL9 DEL9 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL32 DEL32 DEL21 DEL33 DEL9 DEL9 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL59 DEL60 DEL36 DEL42 DEL7 DEL36 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL33 DEL42 DEL42 DEL32 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL42 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL41 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL14 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL9 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL42 DEL45 DEL32 DEL45 DEL42 DEL32 DEL45 DEL45 DEL42 DEL32 DEL45 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL27 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL62 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL24 DEL42 DEL42 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL32 DEL34 DEL27 DEL36 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL43 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL34 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL16 DEL36 DEL11 DEL41 DEL8 DEL31 DEL42 DEL65 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL38 DEL42 DEL32 DEL21 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL9 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL66 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL8 DEL42 DEL42 DEL42 DEL32 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL27 DEL42 DEL43 DEL27 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL27 DEL36 DEL32 DEL38 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL45 DEL32 DEL40 DEL42 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL32 DEL42 DEL45 DEL32 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL25 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8