o Re-introduced 2.x like inheritance assembler and profile injector components which mostly delegate to a common model merger class. First of all, the merger only deals with two models at a time, simplifying its logic compared to the current processors, hopefully allowing us to quickly/easily fix the outstanding POM tests. The ultimate goal is to generate the basic ModelMerger automatically with a new Modello plugin which could be programatically customized via a sub class like MavenModelMerger. It will be interesting to find out how much of the merging rules could be generalized via declarative options in the model. This could allow for generated documentation about how inheritance and profile injection alter the model. Last but not least, generating the merger from the MDO would ease addition of new model elements as these would automatically be considered for inheritance and profile injection.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@772827 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Set;
+import org.apache.maven.model.inheritance.DefaultInheritanceAssembler;
+import org.apache.maven.model.inheritance.InheritanceAssembler;
+import org.apache.maven.model.profile.DefaultProfileInjector;
+import org.apache.maven.model.profile.ProfileInjector;
+/*
+ *  TODO: Get rid of this class and go back to an inheritance assembler, profile injector and default injector, all
+ *  orchestrated by the model builder. The processors will also by replaced by the merger.
+ */
+
-                child = (DomainModel) domainModel;
+                child = domainModel;
-    
+
+    private static ProfileInjector profileInjector = new DefaultProfileInjector();
+
-        
+
+
+        for ( Profile profile : profiles )
+        {
+            profileInjector.injectProfile( model, profile );
+        }
+        if ( true )
+        {
+            return domainModel;
+        }
+        
-    
+
+    private static InheritanceAssembler inheritanceAssembler = new DefaultInheritanceAssembler();
+
+        Model previousModel = null;
+        for ( Model currentModel : models )
+        {
+            inheritanceAssembler.assembleModelInheritance( currentModel, previousModel, "" );
+            previousModel = currentModel;
+        }
+        if ( true )
+        {
+            return previousModel;
+        }
+

INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS42 INS14 INS70 INS25 INS42 INS42 INS14 INS60 INS70 INS25 INS43 INS44 INS42 INS8 INS9 INS8 INS43 INS43 INS59 INS44 INS42 INS8 INS9 INS8 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS42 INS33 INS43 INS42 INS21 INS21 INS41 INS42 INS32 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL11