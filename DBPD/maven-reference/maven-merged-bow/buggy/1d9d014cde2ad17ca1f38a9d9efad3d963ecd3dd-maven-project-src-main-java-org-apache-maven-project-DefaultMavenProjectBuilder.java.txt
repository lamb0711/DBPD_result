Fixing MNG-3355 and MNG-2339.

This commit introduces three changes: user-level properties that are separated from the execution properties, where execution properties contain envars, sysprops, and user-level properties...user-level properties are useful for POM interpolation for 2339 and 3355.

Second, a ProjectBuilderConfiguration interface and default implementation, to stem the proliferation of method parameters to projectBuilder methods. This was a natural place to introduce it, as user-level properties had to be passed in separately from the execution properties, for interpolation.

Finally, interpolation has been switched to use the new plexus-interpolation project, which is based on the classes in plexus-utils.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@644354 13f79535-47bb-0310-9956-ffa450edef68

-        return buildFromSourceFileInternal( projectDescriptor, localRepository, profileManager );
+        ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository )
+                                                                                     .setGlobalProfileManager( profileManager );
+
+        return buildFromSourceFileInternal( projectDescriptor, config );
+    }
+
+    public MavenProject build( File projectDescriptor,
+                               ProjectBuilderConfiguration config )
+        throws ProjectBuildingException
+    {
+        return buildFromSourceFileInternal( projectDescriptor, config );
-            project = buildInternal( model, localRepository, remoteArtifactRepositories, artifact.getFile(), null,
+            ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository );
+
+            project = buildInternal( model, config, remoteArtifactRepositories, artifact.getFile(),
-        return buildStandaloneSuperProject( null );
+        return buildStandaloneSuperProject( new DefaultProjectBuilderConfiguration() );
+        //TODO mkleint - use the (Container, Properties) constructor to make system properties embeddable
+        return buildStandaloneSuperProject( new DefaultProjectBuilderConfiguration().setGlobalProfileManager( profileManager ) );
+    }
+
+    public MavenProject buildStandaloneSuperProject( ProjectBuilderConfiguration config )
+        throws ProjectBuildingException
+    {
+        ProfileManager profileManager = config.getGlobalProfileManager();
+
-            processProjectLogic( project, null, null, null, true, false );
+            processProjectLogic( project, null, config, null, true, true );
-                                                      ArtifactRepository localRepository,
-                                                      ProfileManager profileManager )
+                                                      ProjectBuilderConfiguration config )
-                localRepository,
+                config,
-                profileManager,
-                                        ArtifactRepository localRepository,
+                                        ProjectBuilderConfiguration config,
-                                        ProfileManager externalProfileManager,
+        ProfileManager externalProfileManager = config.getGlobalProfileManager();
-            profileActivationContext = new DefaultProfileActivationContext( System.getProperties(), false );
+            profileActivationContext = new DefaultProfileActivationContext( config.getExecutionProperties(), false );
-            project = assembleLineage( model, lineage, localRepository, projectDescriptor, aggregatedRemoteWagonRepositories, externalProfileManager, strict, validProfilesXmlLocation );
+            project = assembleLineage( model, lineage, config, projectDescriptor, aggregatedRemoteWagonRepositories, strict, validProfilesXmlLocation );
-            project = processProjectLogic( project, projectDescriptor, localRepository, repositories, strict, false );
+            project = processProjectLogic( project, projectDescriptor, config, repositories, strict, false );
-                                              ArtifactRepository localRepository,
+                                              ProjectBuilderConfiguration config,
-                                              boolean superPom )
+                                              boolean isSuperPom )
-        Map context = new HashMap( System.getProperties() );
+        Map context = new HashMap();
+
+        // [MNG-2339] ensure the system properties are still interpolated for backwards compat, but the model values must win
+        if ( config.getExecutionProperties() != null && !config.getExecutionProperties().isEmpty() )
+        {
+            context.putAll( config.getExecutionProperties() );
+        }
+
+        File projectDir = null;
-            File projectDir = pomFile.getAbsoluteFile().getParentFile();
+            projectDir = pomFile.getAbsoluteFile().getParentFile();
-            context.put( "basedir", pomFile.getParentFile().getAbsolutePath() );
-
-            Build build = model.getBuild();
-
-            // MNG-1927, MNG-2124, MNG-3355:
-            // If the build section is present and the project directory is non-null, we should make
-            // sure interpolation of the directories below uses translated paths.
-            // Afterward, we'll double back and translate any paths that weren't covered during interpolation via the
-            // code below...
-            context.put( "build.directory", pathTranslator.alignToBaseDirectory( build.getDirectory(), projectDir ) );
-            context.put( "build.outputDirectory", pathTranslator.alignToBaseDirectory( build.getOutputDirectory(), projectDir ) );
-            context.put( "build.testOutputDirectory", pathTranslator.alignToBaseDirectory( build.getTestOutputDirectory(), projectDir ) );
-            context.put( "build.sourceDirectory", pathTranslator.alignToBaseDirectory( build.getSourceDirectory(), projectDir ) );
-            context.put( "build.testSourceDirectory", pathTranslator.alignToBaseDirectory( build.getTestSourceDirectory(), projectDir ) );
-        model = modelInterpolator.interpolate( model, context, strict );
+        Map overrideContext = new HashMap();
+        if ( !isSuperPom && config.getUserProperties() != null && !config.getUserProperties().isEmpty() )
+        {
+            overrideContext.putAll( config.getUserProperties() );
+        }
-        // [MNG-2339] ensure the system properties are still interpolated for backwards compat, but the model values must win
-        context.putAll( System.getProperties() );
-        model = modelInterpolator.interpolate( model, context, strict );
+        model = modelInterpolator.interpolate( model, context, overrideContext, projectDir, true );
-        if ( !superPom )
+        if ( !isSuperPom )
-            mergeManagedDependencies( model, localRepository, remoteRepositories );
+            mergeManagedDependencies( model, config.getLocalRepository(), remoteRepositories );
-                                          ArtifactRepository localRepository,
+                                          ProjectBuilderConfiguration config,
-                                          ProfileManager externalProfileManager,
-        modelLineageBuilder.resumeBuildingModelLineage( modelLineage, localRepository, externalProfileManager, !strict );
+        modelLineageBuilder.resumeBuildingModelLineage( modelLineage, config, !strict );
+        ProfileManager externalProfileManager = config.getGlobalProfileManager();
-            profileActivationContext = new DefaultProfileActivationContext( System.getProperties(), false );
+            profileActivationContext = new DefaultProfileActivationContext( config.getExecutionProperties(), false );

INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 MOV44 INS43 INS8 INS44 MOV25 MOV21 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS41 INS43 INS42 INS60 UPD43 UPD42 UPD43 UPD42 INS60 UPD43 UPD42 UPD42 INS25 INS60 INS25 INS60 INS25 UPD43 UPD42 INS21 INS60 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS42 INS43 INS59 UPD42 UPD42 MOV43 INS59 UPD42 INS27 INS8 MOV43 INS59 MOV27 INS8 INS43 INS59 INS27 INS8 UPD42 INS32 MOV43 INS59 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS27 INS38 MOV21 INS42 INS33 MOV21 MOV21 INS42 INS42 INS14 INS27 INS38 MOV21 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV38 INS42 INS32 INS32 INS42 MOV42 INS43 INS59 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS7 INS43 INS38 INS27 INS32 UPD42 INS42 INS9 INS42 INS42 INS14 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS43 INS42 UPD9 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV32 INS42 MOV32 INS42 INS42 INS32 INS33 MOV32 UPD42 MOV42 UPD42 INS32 INS43 INS14 INS42 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS43 UPD42 UPD42 UPD42 UPD42 INS42 DEL42 DEL32 DEL41 DEL33 DEL33 DEL33 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL59 DEL60 DEL45 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL44 DEL42 DEL32 DEL21