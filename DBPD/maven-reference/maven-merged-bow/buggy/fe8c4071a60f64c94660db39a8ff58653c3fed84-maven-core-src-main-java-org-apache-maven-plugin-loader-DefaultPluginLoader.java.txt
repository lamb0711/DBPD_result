Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.classworlds.ClassRealm;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import java.util.Map;
+import java.util.Set;
-     * Lookup a component with the specified role + roleHint in the plugin's {@link ClassRealm}.
-     * Load the plugin first.
-     */
-    public Object loadPluginComponent( String role, String roleHint, Plugin plugin, MavenProject project )
-        throws ComponentLookupException, PluginLoaderException
-    {
-        loadPlugin( plugin, project );
-
-        try
-        {
-            return pluginManager.getPluginComponent( plugin, role, roleHint );
-        }
-        catch ( PluginManagerException e )
-        {
-            Throwable cause = e.getCause();
-
-            if ( ( cause != null ) && ( cause instanceof ComponentLookupException ) )
-            {
-                StringBuffer message = new StringBuffer();
-                message.append( "ComponentLookupException in PluginManager while looking up a component in the realm of: " );
-                message.append( plugin.getKey() );
-                message.append( ".\nReason: " );
-                message.append( cause.getMessage() );
-                message.append( "\n\nStack-Trace inside of PluginManager was:\n\n" );
-
-                StackTraceElement[] elements = e.getStackTrace();
-                for ( int i = 0; i < elements.length; i++ )
-                {
-                    if ( elements[i].getClassName().indexOf( "PluginManager" ) < 0 )
-                    {
-                        break;
-                    }
-
-                    message.append( elements[i] );
-                }
-
-                logger.debug( message.toString() + "\n" );
-
-                throw (ComponentLookupException) cause;
-            }
-            else
-            {
-                throw new PluginLoaderException( plugin, "Failed to lookup plugin component. Reason: " + e.getMessage(), e );
-            }
-        }
-    }
-
-    /**
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptorForPrefix( prefix );
+        Set descriptors = pluginCollector.getPluginDescriptorsForPrefix( prefix );
+        Map projectPluginMap = project.getBuild().getPluginsAsMap();
+
+        PluginDescriptor pluginDescriptor = null;
+        for ( Iterator it = descriptors.iterator(); it.hasNext(); )
+        {
+            PluginDescriptor pd = (PluginDescriptor) it.next();
+
+            Plugin projectPlugin = (Plugin) projectPluginMap.get( pd.getPluginLookupKey() );
+            if ( ( projectPlugin != null ) && ( projectPlugin.getVersion() != null ) && projectPlugin.getVersion().equals( pd.getVersion() ) )
+            {
+                pluginDescriptor = pd;
+                break;
+            }
+        }
+            Plugin projectPlugin = (Plugin) project.getBuild().getPluginsAsMap().get( plugin.getKey() );
+            if ( ( projectPlugin != null ) && ( projectPlugin.getVersion() != null ) )
+            {
+                plugin.setVersion( projectPlugin.getVersion() );
+            }
+

MOV26 MOV26 UPD40 UPD40 INS60 INS60 INS24 INS25 INS43 INS43 INS59 INS43 INS59 INS58 INS32 INS8 MOV27 INS8 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS60 MOV25 MOV21 UPD42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 MOV43 INS59 INS27 INS8 INS43 INS59 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS11 INS36 INS36 INS32 INS21 INS10 INS42 INS42 INS11 INS36 INS36 INS21 MOV43 INS32 INS43 INS32 INS27 INS27 INS32 INS42 INS32 INS7 INS43 INS32 INS27 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 INS42 INS33 INS32 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL43 DEL62 DEL36 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL45 DEL32 DEL34 DEL27 DEL10 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL11 DEL53 DEL8 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31