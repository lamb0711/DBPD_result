[MPLUGIN-7] more improvements to the plugin report
Submitted by: Edwin Punzalan


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@418201 13f79535-47bb-0310-9956-ffa450edef68

+        writeGoalAttributes( mojoDescriptor, w );
+
+    private void writeGoalAttributes( MojoDescriptor mojoDescriptor, XMLWriter w )
+    {
+        w.startElement( "p" );
+        w.writeMarkup( "<b>Mojo Attributes</b>:" );
+        w.startElement( "ul" );
+
+        String value = mojoDescriptor.getDeprecated();
+        if ( StringUtils.isNotEmpty( value ) )
+        {
+            w.writeMarkup( "<li>This plugin goal has been deprecated: " + value + "</li>" );
+        }
+
+        if ( mojoDescriptor.isProjectRequired() )
+        {
+            w.writeMarkup( "<li>Requires a Maven 2.0 project to execute.</li>" );
+        }
+
+        if ( mojoDescriptor.isAggregator() )
+        {
+            w.writeMarkup( "<li>Executes as an aggregator plugin.</li>" );
+        }
+
+        if ( mojoDescriptor.isDirectInvocationOnly() )
+        {
+            w.writeMarkup( "<li>Executes by direct invocation only.</li>" );
+        }
+
+        value = mojoDescriptor.isDependencyResolutionRequired();
+        if ( StringUtils.isNotEmpty( value ) )
+        {
+            w.writeMarkup( "<li>Requires dependency resolution of artifacts in scope: <code>" + value +
+                "</code></li>" );
+        }
+
+        value = mojoDescriptor.getPhase();
+        if ( StringUtils.isNotEmpty( value ) )
+        {
+            w.writeMarkup( "<li>Automatically executes within the lifecycle phase: <code>" + value + "</code></li>" );
+        }
+
+        value = mojoDescriptor.getExecutePhase();
+        if ( StringUtils.isNotEmpty( value ) )
+        {
+            w.writeMarkup( "<li>Invokes the execution of the lifecycle phase <code>" + value +
+                "</code> prior to executing itself.</li>" );
+        }
+
+        value = mojoDescriptor.getExecuteGoal();
+        if ( StringUtils.isNotEmpty( value ) )
+        {
+            w.writeMarkup( "<li>Invokes the execution of this plugin's goal <code>" + value +
+                "</code> prior to executing itself.</li>" );
+        }
+
+        value = mojoDescriptor.getExecuteLifecycle();
+        if ( StringUtils.isNotEmpty( value ) )
+        {
+            w.writeMarkup( "<li>Executes in its own lifecycle: <code>" + value + "</code></li>" );
+        }
+
+        if ( mojoDescriptor.isOnlineRequired() )
+        {
+            w.writeMarkup( "<li>Requires that mvn runs in online mode.</li>" );
+        }
+
+        if ( !mojoDescriptor.isInheritedByDefault() )
+        {
+            w.writeMarkup( "<li>Is NOT inherited by default in multi-project builds.</li>" );
+        }
+
+        w.endElement();//ul
+        w.endElement();//p
+    }
+
-            writeParameterSummary( list, w );
+            if ( list.size() > 0 )
+            {
+                writeParameterSummary( list, w );
-            writeParameterDetails( list, w );
+                writeParameterDetails( list, w );
+            }
+            else
+            {
+                w.startElement( "" );
+            }
-        w.startElement( "section" );
+        w.startElement( "subsection" );
-            w.writeMarkup( "<p/>" );
-        List optionalParams = getParametersByRequired( false, parameterList );
+        if ( requiredParams.size() > 0 )
+        {
+            writeParameterList( "Required Parameters", requiredParams, w );
+        }
-        writeParameterList( "Required Parameters", requiredParams, w );
-        writeParameterList( "Optional Parameters", optionalParams, w );
+        List optionalParams = getParametersByRequired( false, parameterList );
+        if ( optionalParams.size() > 0 )
+        {
+            writeParameterList( "Optional Parameters", optionalParams, w );
+        }
-        w.startElement( "section" );
+        w.startElement( "subsection" );
-                w.writeText( "No description." );
+                description = "No description.";
-            else
+            if ( StringUtils.isNotEmpty( parameter.getDefaultValue() ) )
-                w.writeMarkup( parameter.getDescription() );
+                description = description + " Default value is <code>" + parameter.getDefaultValue() + "</code>.";
+            w.writeMarkup( description );

INS31 MOV21 INS83 INS39 INS42 INS44 INS44 INS8 INS21 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS60 INS25 INS25 INS25 INS25 INS21 INS25 INS21 INS25 INS21 INS25 INS21 INS25 INS21 INS25 INS25 INS25 INS21 INS21 INS25 INS25 INS32 INS42 INS42 INS32 INS32 INS32 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS7 INS32 INS8 INS32 INS8 INS38 INS8 INS32 INS32 INS8 INS27 INS8 INS27 INS8 MOV21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS32 INS21 INS42 INS42 INS42 INS42 INS25 UPD45 INS32 INS34 MOV21 INS32 INS34 MOV21 UPD45 INS25 INS25 INS21 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS27 MOV8 INS8 INS42 INS42 INS42 INS42 MOV32 MOV8 INS32 MOV8 INS32 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS34 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS32 INS7 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS45 INS42 INS27 INS42 INS45 INS32 INS45 MOV42 UPD42 MOV42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL32 DEL25