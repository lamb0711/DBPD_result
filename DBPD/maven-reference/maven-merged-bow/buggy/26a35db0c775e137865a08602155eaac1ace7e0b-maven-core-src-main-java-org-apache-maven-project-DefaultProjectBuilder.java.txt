o Introduced ModelBuilder component that now hosts most of the logic from the project builder to construct the effective model. With maven-model-builder we now should have a rather slim module that tools can re-use for building models. The project builder is simply layered on top of the model builder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@780627 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.model.Parent;
-import org.apache.maven.model.Profile;
-import org.apache.maven.model.Repository;
-import org.apache.maven.model.inheritance.InheritanceAssembler;
-import org.apache.maven.model.interpolator.Interpolator;
+import org.apache.maven.model.ModelBuilder;
+import org.apache.maven.model.ModelBuildingException;
+import org.apache.maven.model.ModelBuildingResult;
-import org.apache.maven.model.management.ManagementInjector;
-import org.apache.maven.model.normalization.ModelNormalizer;
-import org.apache.maven.model.plugin.LifecycleBindingsInjector;
-import org.apache.maven.model.plugin.PluginConfigurationExpander;
-import org.apache.maven.model.profile.ProfileActivationException;
-import org.apache.maven.model.profile.ProfileInjector;
-import org.apache.maven.model.profile.ProfileSelector;
-import org.apache.maven.model.validation.ModelValidationResult;
-import org.apache.maven.model.validation.ModelValidator;
+import org.apache.maven.model.resolver.ModelResolver;
-    private ModelReader modelReader;
+    private ModelBuilder modelBuilder;
-    private ModelValidator validator;
+    private ModelReader modelReader;
-    private ModelNormalizer normalizer;
-
-    @Requirement
-    private InheritanceAssembler inheritanceAssembler;
-
-    @Requirement
-    private Interpolator interpolator;
-
-    @Requirement
-    private ProfileSelector profileSelector;
-
-    @Requirement
-    private ProfileInjector profileInjector;
-
-    @Requirement
-    private ManagementInjector managementInjector;
-
-    @Requirement
-    private LifecycleBindingsInjector lifecycleBindingsInjector;
-
-    @Requirement
-    private PluginConfigurationExpander pluginConfigurationExpander;
-
-    @Requirement
-        List<Model> models;
-        
+        ModelResolver resolver =
+            new RepositoryModelResolver( repositorySystem, resolutionErrorHandler, configuration.getLocalRepository(),
+                                         configuration.getRemoteRepositories() );
+
+        ModelBuildingResult result;
-            models = build( "unknown", pomFile, configuration );
+            result = modelBuilder.build( pomFile, configuration.getModelBuildingRequest(), resolver );
-        catch ( IOException e )
+        catch ( ModelBuildingException e )
-            throw new ProjectBuildingException( "", "", e );
-        }
-
-        Model model = models.get(0);
-        
-        model.setProjectDirectory( projectDirectory );
-
-        //Profiles
-        //
-        // Active profiles can be contributed to the MavenExecutionRequest as well as from the POM
-
-        List<Profile> projectProfiles;
-
-        try
-        {
-            projectProfiles = new ArrayList<Profile>();
-            projectProfiles.addAll( model.getProfiles() );
-            if ( configuration.getProfiles() != null )
-            {
-                projectProfiles.addAll( configuration.getProfiles() );
-            }
-            projectProfiles = profileSelector.getActiveProfiles( projectProfiles, configuration );
-        }
-        catch ( ProfileActivationException e )
-        {
-            throw new ProjectBuildingException( model.getId(), "Failed to activate pom profiles.", e );
-        }
-
-        for ( Profile p : projectProfiles )
-        {
-            if ( !"pom".equals( p.getSource() ) )
-            {
-                logger.debug( "Merging profile into model (build): Model = " + model.getId() + ", Profile = "
-                    + p.getId() );
-                profileInjector.injectProfile( model, p );
-            }
+            throw new ProjectBuildingException( "[unknown]", "Failed to build project for " + pomFile, pomFile, e );
+        Model model = result.getEffectiveModel();
+
+        project = fromModelToMavenProject( model, result.getRawModels().get( 1 ).getPomFile(), configuration, model.getPomFile() );
+     
-            model = interpolateModel( model, configuration, pomFile );
-
-            if ( configuration.isProcessPlugins() )
-            {                
-                lifecycleBindingsInjector.injectLifecycleBindings( model );
-            }
-
-            managementInjector.injectManagement( model );
-
-            validateModel( model, pomFile, configuration.istLenientValidation() );
-
-            File parentFile = ( models.size() > 1 ) ? models.get( 1 ).getPomFile() : null;
-
-            project = fromModelToMavenProject( model, parentFile, configuration, pomFile );
-
-                pluginConfigurationExpander.expandPluginConfiguration( project.getModel() );
-
-                lifecycle.populateDefaultConfigurationForPlugins( project.getModel().getBuild().getPlugins(), configuration.getLocalRepository(), project.getRemoteArtifactRepositories() );
+                lifecycle.populateDefaultConfigurationForPlugins( model.getBuild().getPlugins(), configuration.getLocalRepository(), project.getRemoteArtifactRepositories() );
-        catch ( IOException e )
-        {
-            throw new ProjectBuildingException( "", "", e );
-        }
-        project.setActiveProfiles( projectProfiles );
+        project.setActiveProfiles( result.getActiveProfiles( result.getRawModel() ) );
-    private Model interpolateModel( Model model, ProjectBuildingRequest config, File projectDescriptor )
-        throws ProjectBuildingException
-    {
-        try
-        {
-            model = interpolator.interpolateModel( model, config.getExecutionProperties(), model.getProjectDirectory() );
-        }
-        catch ( IOException e )
-        {
-            String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-            throw new ProjectBuildingException( projectId, "", projectDescriptor, e );
-        }
-
-        return model;
-    }
-
-        throws InvalidProjectModelException, IOException
+        throws InvalidProjectModelException
-    private List<Model> build( String projectId, File pomFile, ProjectBuildingRequest projectBuilderConfiguration )
-        throws ProjectBuildingException, IOException
-    {
-        Model mainModel = readModel( projectId, pomFile, !projectBuilderConfiguration.istLenientValidation() );
-        mainModel.setProjectDirectory( pomFile.getParentFile() );
-
-        List<Model> domainModels = new ArrayList<Model>();
-
-        domainModels.add( mainModel );
-
-        ArtifactRepository localRepository = projectBuilderConfiguration.getLocalRepository();
-
-        List<ArtifactRepository> remoteRepositories = new ArrayList<ArtifactRepository>();
-        try
-        {
-            for ( Profile profile : profileSelector.getActiveProfiles( projectBuilderConfiguration.getProfiles(),
-                                                                       projectBuilderConfiguration ) )
-            {
-                for ( Repository repository : profile.getRepositories() )
-                {
-                    try
-                    {
-                        remoteRepositories.add( repositorySystem.buildArtifactRepository( repository ) );
-                    }
-                    catch ( InvalidRepositoryException e )
-                    {
-                        throw new ProjectBuildingException( projectId, "Failed to create remote repository "
-                            + repository, pomFile, e );
-                    }
-                }
-            }
-            remoteRepositories = repositorySystem.getMirrors( remoteRepositories );
-        }
-        catch ( ProfileActivationException e )
-        {
-            throw new ProjectBuildingException( projectId, "Failed to determine active profiles", pomFile, e );
-        }
-        remoteRepositories.addAll( projectBuilderConfiguration.getRemoteRepositories() );
-
-        if ( mainModel.getParent() != null )
-        {
-            List<Model> mavenParents;
-            
-            if ( isParentLocal( mainModel.getParent().getRelativePath(), pomFile.getParentFile() ) )
-            {
-                mavenParents = getDomainModelParentsFromLocalPath( mainModel, localRepository, remoteRepositories, pomFile.getParentFile(), projectBuilderConfiguration );
-            }
-            else
-            {
-                mavenParents = getDomainModelParentsFromRepository( mainModel, localRepository, remoteRepositories );
-            }
-
-            domainModels.addAll( mavenParents );
-        }
-
-        for ( Model model : domainModels )
-        {
-            normalizer.mergeDuplicates( model );
-        }
-
-        domainModels.add( getSuperModel() );
-        List<Model> profileModels = new ArrayList<Model>();
-        //Process Profiles
-        for ( Model model : domainModels )
-        {
-            if ( !model.getProfiles().isEmpty() )
-            {
-                Collection<Profile> profiles;
-                try
-                {
-                    profiles =
-                        profileSelector.getActiveProfiles( model.getProfiles(), projectBuilderConfiguration );
-                }
-                catch ( ProfileActivationException e )
-                {
-                    throw new ProjectBuildingException( projectId, "Failed to determine active profiles", pomFile, e );
-                }
-                if ( !profiles.isEmpty() )
-                {
-                    for ( Profile p : profiles )
-                    {
-                        logger.debug( "Merging profile into model: Model = " + model.getId() + ", Profile = " + p.getId() );
-                        profileInjector.injectProfile( model, p );
-                    }
-                }
-            }
-            profileModels.add( model );
-        }
-
-        processModelsForInheritance( profileModels );
-
-        return profileModels;
-    }
-
-    private Model processModelsForInheritance( List<Model> models )
-    {
-        List<Model> parentsFirst = new ArrayList<Model>( models );
-        Collections.reverse( parentsFirst );
-
-        Model previousModel = null;
-
-        for ( Model currentModel : parentsFirst )
-        {
-            inheritanceAssembler.assembleModelInheritance( currentModel, previousModel );
-            previousModel = currentModel;
-        }
-
-        return previousModel;
-    }
-
-    private void validateModel( Model model, File pomFile, boolean lenient )
-        throws InvalidProjectModelException
-    {
-        // Must validate before artifact construction to make sure dependencies are good
-        ModelValidationResult validationResult = validator.validateEffectiveModel( model, lenient );
-
-        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-
-        if ( validationResult.getMessageCount() > 0 )
-        {
-            for ( String s : validationResult.getMessages() )
-            {
-                logger.error( s );
-            }
-            throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile, validationResult );
-        }
-    }
-
-    /**
-     * Returns true if the relative path of the specified parent references a pom, otherwise returns
-     * false.
-     * 
-     * @param relativePath the parent model info
-     * @param projectDirectory the project directory of the child pom
-     * @return true if the relative path of the specified parent references a pom, otherwise returns
-     *         fals
-     */
-    private static boolean isParentLocal( String relativePath, File projectDirectory )
-    {
-        File f = new File( projectDirectory, relativePath ).getAbsoluteFile();
-
-        if ( f.isDirectory() )
-        {
-            f = new File( f, "pom.xml" );
-        }
-
-        return f.isFile();
-    }
-
-    private List<Model> getDomainModelParentsFromRepository( Model model, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        throws IOException, ProjectBuildingException
-    {
-        List<Model> models = new ArrayList<Model>();
-
-        Parent parent = model.getParent();
-
-        if ( parent == null || localRepository == null )
-        {
-            return models;
-        }
-        
-        Artifact artifactParent =
-            repositorySystem.createProjectArtifact( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
-
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setArtifact( artifactParent )
-            .setLocalRepository( localRepository )
-            .setRemoteRepostories( remoteRepositories );
-        
-        ArtifactResolutionResult result;
-        try
-        {
-            result = repositorySystem.resolve( request );
-        }
-        catch ( Exception e )
-        {
-            throw (IOException) new IOException( "The parent POM " + artifactParent + " could not be retrieved from any repository" ).initCause( e );
-        }
-
-        try
-        {
-            resolutionErrorHandler.throwErrors( request, result );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw (IOException) new IOException( "The parent POM " + artifactParent + " could not be retrieved from any repository" ).initCause( e );
-        }
-        
-        Model parentModel = readModel( parent.getId(), artifactParent.getFile(), true );
-
-        if ( !isMatchingParent( parentModel, parent ) )
-        {
-            //shane: what does this mean exactly and why does it occur
-            logger.debug( "Parent pom ids do not match: Parent File = " + artifactParent.getFile().getAbsolutePath() + ": Child ID = " + model.getId() );
-
-            // return domainModels;
-            // TODO: review the proper handling of this, can it happen at all and if should we really continue or error out?
-        }
-
-        models.add( parentModel );
-
-        models.addAll( getDomainModelParentsFromRepository( parentModel, localRepository, remoteRepositories ) );
-        return models;
-    }
-
-    /**
-     * Returns list of domain model parents of the specified domain model. The parent domain models
-     * are part
-     * 
-     * @param domainModel
-     * @param projectDirectory
-     * @return
-     * @throws IOException
-     * @throws ProjectBuildingException 
-     */
-    private List<Model> getDomainModelParentsFromLocalPath( Model model, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, File projectDirectory,
-                                                                  ProjectBuildingRequest projectBuilderConfiguration )
-        throws IOException, ProjectBuildingException
-    {
-        List<Model> models = new ArrayList<Model>();
-
-        Parent parent = model.getParent();
-
-        if ( parent == null )
-        {
-            return models;
-        }
-
-        File parentFile = new File( projectDirectory, parent.getRelativePath() ).getCanonicalFile();
-        if ( parentFile.isDirectory() )
-        {
-            parentFile = new File( parentFile.getAbsolutePath(), "pom.xml" );
-        }
-        
-        if ( !parentFile.isFile() )
-        {
-            throw new IOException( "File does not exist: File = " + parentFile.getAbsolutePath() );
-        }
-        
-        Model parentModel = readModel( parent.getId(), parentFile, true );
-        parentModel.setProjectDirectory( parentFile.getParentFile() );
-
-        if ( !isMatchingParent( parentModel, parent ) )
-        {
-            logger.info( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = " + parentModel.getId() + ", Child ID = " + model.getId()
-                + ", Expected Parent ID = " + parent.getId() );
-
-            List<Model> parentModels = getDomainModelParentsFromRepository( model, localRepository, remoteRepositories );
-
-            if ( parentModels.isEmpty() )
-            {
-                throw new IOException( "Unable to find parent pom on local path or repo: " + parent.getId() );
-            }
-
-            models.addAll( parentModels );
-            return models;
-        }
-
-        models.add( parentModel );
-
-        if ( parentModel.getParent() != null )
-        {
-            if ( isParentLocal( parentModel.getParent().getRelativePath(), parentFile.getParentFile() ) )
-            {
-                models.addAll( getDomainModelParentsFromLocalPath( parentModel, localRepository, remoteRepositories,
-                                                                   parentFile.getParentFile(),
-                                                                   projectBuilderConfiguration ) );
-            }
-            else
-            {
-                models.addAll( getDomainModelParentsFromRepository( parentModel, localRepository, remoteRepositories ) );
-            }
-        }
-
-        return models;
-    }
-
-    private boolean isMatchingParent( Model parentModel, Parent parent )
-    {
-        if ( parentModel.getGroupId() != null )
-        {
-            if ( !parent.getGroupId().equals( parentModel.getGroupId() ) )
-            {
-                return false;
-            }
-        }
-        else if ( parentModel.getParent() == null || !parent.getGroupId().equals( parentModel.getParent().getGroupId() ) )
-        {
-            return false;
-        }
-        if ( !parent.getArtifactId().equals( parentModel.getArtifactId() ) )
-        {
-            return false;
-        }
-        if ( parentModel.getVersion() != null )
-        {
-            if ( !parent.getVersion().equals( parentModel.getVersion() ) )
-            {
-                return false;
-            }
-        }
-        else if ( parentModel.getParent() == null || !parent.getVersion().equals( parentModel.getParent().getVersion() ) )
-        {
-            return false;
-        }
-        return true;
-    }
-
-    private Model readModel( String projectId, File pomFile, boolean strict )
-        throws ProjectBuildingException
-    {
-        Model model;
-
-        Map<String, Object> options =
-            Collections.<String, Object> singletonMap( ModelReader.IS_STRICT, Boolean.valueOf( strict ) );
-        try
-        {
-            model = modelReader.read( pomFile, options );
-        }
-        catch ( IOException e )
-        {
-            throw new ProjectBuildingException( projectId, "Failed to read POM for " + projectId + " from " + pomFile
-                + ": " + e.getMessage(), pomFile, e );
-        }
-
-        validator.validateRawModel( model, !strict );
-
-        return model;
-    }
-

MOV26 MOV23 UPD40 UPD40 UPD40 UPD40 INS31 MOV78 UPD43 INS83 MOV43 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 UPD42 UPD42 MOV60 MOV60 MOV25 INS60 MOV60 INS54 MOV60 INS21 INS54 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV41 INS43 INS59 UPD43 MOV8 MOV12 MOV43 INS7 INS8 MOV12 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 INS42 INS32 INS42 INS32 MOV25 UPD42 UPD42 INS43 INS42 INS42 INS32 INS32 UPD43 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS32 INS42 INS32 MOV32 UPD42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV43 INS45 MOV32 UPD42 MOV42 INS34 UPD42 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 MOV32 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL32 DEL45 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL43 DEL74 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL45 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL33 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL54 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL42 DEL42 DEL32 DEL11 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL42 DEL42 DEL32 DEL11 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL32 DEL45 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL38 DEL27 DEL9 DEL41 DEL8 DEL25 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL38 DEL27 DEL9 DEL41 DEL8 DEL25 DEL25 DEL9 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL38 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31