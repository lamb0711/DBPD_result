MNG-1323 making extensions work inside a reactor
Submitted by: Piotr Tabor


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@575987 13f79535-47bb-0310-9956-ffa450edef68

+import com.sun.jmx.remote.util.OrderClassLoaders;
+
+import java.util.SortedMap;
+import java.util.TreeMap;
+    /**
+     * Map from pluginDescriptor.getKey (groupId:artifactId) into (ordered) map from version into pluginDescriptor
+     * Internal map is ordered to make sure that builds are determinic (used pluginVersion is determined)
+     */
+    private Map/* <String,OrderedMap<String,PluginDescriptor>> */pluginDescriptors = new HashMap();
-    private Set pluginsInProcess = new HashSet();
+    private Map/* <String,OrderedMap<String,PluginDescriptor>> */pluginIdsByPrefix = new HashMap();
-    private Map pluginDescriptors = new HashMap();
-
-    private Map pluginIdsByPrefix = new HashMap();
-
+    public String getId()
+    {
+        return "maven-plugin-collector";
+    }
+    
-
-            // TODO: see comment in getPluginDescriptor
-            String key = Plugin.constructKey( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-            if ( !pluginsInProcess.contains( key ) )
-            {
-                pluginsInProcess.add( key );
-
-                getLogger().debug( this + ": Discovered plugin: " + key );
-                
-                pluginDescriptors.put( key, pluginDescriptor );
-
-                // TODO: throw an (not runtime) exception if there is a prefix overlap - means doing so elsewhere
-                // we also need to deal with multiple versions somehow - currently, first wins
-                if ( !pluginIdsByPrefix.containsKey( pluginDescriptor.getGoalPrefix() ) )
-                {
-                    pluginIdsByPrefix.put( pluginDescriptor.getGoalPrefix(), pluginDescriptor );
-                }
-            }
+            putIntoPluginDescriptors( pluginDescriptor );
+            putIntoPluginIdsByPrefix( pluginDescriptor );
-    public String getId()
-    {
-        return "maven-plugin-collector";    
-    }
-
-        // TODO: include version, but can't do this in the plugin manager as it is not resolved to the right version
-        // at that point. Instead, move the duplication check to the artifact container, or store it locally based on
-        // the unresolved version?
-        return (PluginDescriptor) pluginDescriptors.get( plugin.getKey() );
+        SortedMap/* <String,PluginDescriptor> */pluginVersions = (SortedMap) pluginDescriptors.get( plugin.getKey() );
+        if ( pluginVersions != null )
+        {
+            PluginDescriptor res;
+            if ( plugin.getVersion() != null )
+            {
+                res = (PluginDescriptor) pluginVersions.get( plugin.getVersion() );
+            }
+            else
+            {
+                res = getDefaultPluginDescriptorVersion( pluginVersions );
+            }
+           return res;
+        }
+        else
+        {
+            return null;
+        }
+    }
+
+    private PluginDescriptor getDefaultPluginDescriptorVersion( SortedMap pluginVersions )
+    {
+        if ( pluginVersions.size() > 0 )
+        {
+            return (PluginDescriptor) pluginVersions.get( pluginVersions.lastKey() );
+        }
+        else
+        {
+            return null;
+        }
-        return pluginDescriptors.containsKey( plugin.getKey() );
+        return getPluginDescriptor( plugin ) != null;
-        return (PluginDescriptor) pluginIdsByPrefix.get( prefix );
+        return getPluginDescriptorForPrefix( prefix, null );
-    public void flushPluginDescriptor( Plugin plugin )
+    public PluginDescriptor getPluginDescriptorForPrefix( String prefix, String version )
-        pluginsInProcess.remove( plugin.getKey() );
-        pluginDescriptors.remove( plugin.getKey() );
-        
-        for ( Iterator it = pluginIdsByPrefix.entrySet().iterator(); it.hasNext(); )
+        SortedMap/* <String,PluginDescriptor> */pluginVersions = (SortedMap) pluginIdsByPrefix.get( prefix );
+        if ( pluginVersions != null )
-            Map.Entry entry = (Map.Entry) it.next();
-            
-            if ( plugin.getKey().equals( entry.getValue() ) )
+            PluginDescriptor res;
+            if ( version != null )
-                it.remove();
+                res = (PluginDescriptor) pluginVersions.get( version );
+            else
+            {
+                res = getDefaultPluginDescriptorVersion( pluginVersions );
+            }
+            return res;
+        else
+        {
+            return null;
+        }
+    }
+
+//    public void flushPluginDescriptor( Plugin plugin )
+//    {
+//        getPluginDescriptor( plugin ).cleanPluginDescriptor();
+//    }
+
+    /**
+     * Puts given pluginDescriptor into pluginDescriptors map (if the map does not contains plugin for specified maven
+     * version)
+     * 
+     * @param pluginDescriptor
+     */
+    protected void putIntoPluginDescriptors( PluginDescriptor pluginDescriptor )
+    {
+        String key = Plugin.constructKey( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
+
+        SortedMap/* <String,PluginDescriptor> */descriptorsVersions = (SortedMap) pluginDescriptors.get( key );
+        if ( descriptorsVersions == null )
+        {
+            descriptorsVersions = new TreeMap();
+            pluginDescriptors.put( key, descriptorsVersions );
+        }
+
+        putIntoVersionsMap( descriptorsVersions, pluginDescriptor );
+    }
+
+    protected void putIntoVersionsMap( SortedMap/* <String(version),PluginDescriptor> */pluginVersions,
+                                       PluginDescriptor pluginDescriptor )
+    {
+        if ( !pluginVersions.containsKey( pluginDescriptor.getVersion() ) )
+        {
+            pluginVersions.put( pluginDescriptor.getVersion(), pluginDescriptor );
+        }
+    }
+
+    protected void putIntoPluginIdsByPrefix( PluginDescriptor pluginDescriptor )
+    {
+        String goalPrefix = pluginDescriptor.getGoalPrefix();
+
+        SortedMap/* <String,PluginDescriptor> */descriptorsVersions = (SortedMap) pluginIdsByPrefix.get( goalPrefix );
+        if ( descriptorsVersions == null )
+        {
+            descriptorsVersions = new TreeMap();
+            pluginIdsByPrefix.put( goalPrefix, descriptorsVersions );
+        }
+
+        putIntoVersionsMap( descriptorsVersions, pluginDescriptor );

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 MOV44 INS8 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 INS83 INS43 INS42 INS44 INS8 INS39 UPD42 MOV44 INS43 INS42 INS44 INS8 INS29 UPD83 MOV83 MOV39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS65 MOV60 INS25 INS60 INS25 INS42 INS43 INS42 INS25 INS42 UPD43 UPD42 INS43 INS42 INS60 INS25 INS65 INS65 INS43 INS42 MOV60 INS60 INS25 INS21 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS60 MOV60 INS25 MOV21 INS66 INS66 MOV62 INS8 INS43 INS59 INS27 INS8 INS8 INS42 INS27 MOV8 INS8 INS27 UPD42 INS42 INS43 INS59 INS27 INS8 INS8 INS66 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 UPD42 MOV42 INS38 INS8 INS42 INS43 INS59 UPD43 INS27 INS8 MOV60 INS21 INS21 INS42 INS42 MOV11 INS42 INS33 INS60 INS25 INS41 INS41 INS32 INS34 INS41 INS41 INS32 INS33 UPD42 UPD42 MOV42 INS33 INS42 INS42 MOV11 INS42 INS33 INS60 INS25 MOV41 INS41 INS42 INS42 INS11 INS42 INS33 INS21 MOV21 INS42 INS42 INS42 INS32 INS21 INS42 INS42 MOV32 INS42 UPD42 INS42 INS33 INS21 INS21 UPD42 UPD42 INS42 INS32 INS32 INS43 INS43 INS59 INS27 INS8 INS8 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS11 INS33 INS42 INS42 INS43 INS43 INS59 INS27 INS8 INS8 INS42 INS33 INS43 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD43 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 MOV21 INS21 MOV43 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS14 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS32 INS7 INS7 INS43 UPD42 MOV42 INS42 INS43 INS42 INS11 INS42 INS32 UPD42 MOV42 INS42 INS42 INS11 INS42 INS32 INS42 INS42 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL39 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL38 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL32 DEL52 DEL45 DEL42 DEL27 DEL32 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL8 DEL32 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL43 DEL42 DEL32 DEL32 DEL59 DEL58 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31