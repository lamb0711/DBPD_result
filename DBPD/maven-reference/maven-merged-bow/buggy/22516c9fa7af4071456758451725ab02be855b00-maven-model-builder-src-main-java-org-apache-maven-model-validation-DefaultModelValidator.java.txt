o Extended model validation to support distinction between warnings and errors

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@790131 13f79535-47bb-0310-9956-ffa450edef68

-            validateStringNotEmpty( "parent.groupId", result, parent.getGroupId() );
+            validateStringNotEmpty( "parent.groupId", result, false, parent.getGroupId() );
-            validateStringNotEmpty( "parent.artifactId", result, parent.getArtifactId() );
+            validateStringNotEmpty( "parent.artifactId", result, false, parent.getArtifactId() );
-            validateStringNotEmpty( "parent.version", result, parent.getVersion() );
+            validateStringNotEmpty( "parent.version", result, false, parent.getVersion() );
-                result.addMessage( "The parent element cannot have the same ID as the project." );
+                addViolation( result, false, "The parent element cannot have the same ID as the project." );
-        validateStringNotEmpty( "modelVersion", result, model.getModelVersion() );
+        validateStringNotEmpty( "modelVersion", result, false, model.getModelVersion() );
-        validateStringNotEmpty( "packaging", result, model.getPackaging() );
+        validateStringNotEmpty( "packaging", result, false, model.getPackaging() );
-            result.addMessage( "Packaging '" + model.getPackaging() + "' is invalid. Aggregator projects " +
+            addViolation( result, false, "Packaging '" + model.getPackaging() + "' is invalid. Aggregator projects " +
-                result.addMessage( "The parent element cannot have the same ID as the project." );
+                addViolation( result, false, "The parent element cannot have the same ID as the project." );
-        validateStringNotEmpty( "version", result, model.getVersion() );
+        validateStringNotEmpty( "version", result, false, model.getVersion() );
-            validateStringNotEmpty( "dependencies.dependency.type", result, d.getType(), d.getManagementKey() );
+            validateStringNotEmpty( "dependencies.dependency.type", result, false, d.getType(), d.getManagementKey() );
-            validateStringNotEmpty( "dependencies.dependency.version", result, d.getVersion(),
+            validateStringNotEmpty( "dependencies.dependency.version", result, false, d.getVersion(),
-                    result.addMessage( "For dependency " + d + ": system-scoped dependency must specify systemPath." );
+                    addViolation( result, false, "For dependency " + d + ": system-scoped dependency must specify systemPath." );
-                        result.addMessage( "For dependency " + d + ": system-scoped dependency must " +
+                        addViolation( result, false, "For dependency " + d + ": system-scoped dependency must " +
-                result.addMessage(
+                addViolation( result, false,
-                        result.addMessage(
+                        addViolation( result, false,
-                            result.addMessage( "For managed dependency " + d + ": system-scoped dependency must " +
+                            addViolation( result, false, "For managed dependency " + d + ": system-scoped dependency must " +
-                    result.addMessage(
+                    addViolation( result, false,
-                    validateStringNotEmpty( "build.plugins.plugin.artifactId", result, p.getArtifactId() );
+                    validateStringNotEmpty( "build.plugins.plugin.artifactId", result, false, p.getArtifactId() );
-                    validateStringNotEmpty( "build.plugins.plugin.groupId", result, p.getGroupId() );
+                    validateStringNotEmpty( "build.plugins.plugin.groupId", result, false, p.getGroupId() );
-                    validateStringNotEmpty( "build.plugins.plugin.version", result, p.getVersion(), p.getKey() );
+                    validateStringNotEmpty( "build.plugins.plugin.version", result, false, p.getVersion(), p.getKey() );
-                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", result, p.getArtifactId() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", result, false, p.getArtifactId() );
-                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", result, p.getGroupId() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", result,false, p.getGroupId() );
-                    validateStringNotEmpty( "reporting.plugins.plugin.version", result, p.getVersion(), p.getKey() );
+                    validateStringNotEmpty( "reporting.plugins.plugin.version", result, false, p.getVersion(), p.getKey() );
-        if ( !validateStringNotEmpty( fieldName, result, id ) )
+        if ( !validateStringNotEmpty( fieldName, result, false, id ) )
-                result.addMessage( "'" + fieldName + "' with value '" + id + "' does not match a valid id pattern." );
+                addViolation( result, false, "'" + fieldName + "' with value '" + id + "' does not match a valid id pattern." );
-                result.addMessage( "'" + prefix + ".(groupId:artifactId:type:classifier)' must be unique: " + key
+                addViolation( result, false, "'" + prefix + ".(groupId:artifactId:type:classifier)' must be unique: " + key
-            validateStringNotEmpty( prefix + ".id", result, repository.getId() );
+            validateStringNotEmpty( prefix + ".id", result, false, repository.getId() );
-            validateStringNotEmpty( prefix + ".url", result, repository.getUrl() );
+            validateStringNotEmpty( prefix + ".url", result, false, repository.getUrl() );
-                result.addMessage( "'" + prefix + ".id' must be unique: " + repository.getId() + " -> "
+                addViolation( result, false, "'" + prefix + ".id' must be unique: " + repository.getId() + " -> "
-            validateStringNotEmpty( prefix + ".directory", result, resource.getDirectory() );
+            validateStringNotEmpty( prefix + ".directory", result, false, resource.getDirectory() );
-                        result.addMessage( collisionException.getMessage() );
+                        addViolation( result, false, collisionException.getMessage() );
-    private boolean validateStringNotEmpty( String fieldName, ModelValidationResult result, String string )
+    private boolean validateStringNotEmpty( String fieldName, ModelValidationResult result, boolean warning, String string )
-        return validateStringNotEmpty( fieldName, result, string, null );
+        return validateStringNotEmpty( fieldName, result, warning, string, null );
-     * <li><code>string.length != null</code>
+     * <li><code>string != null</code>
-    private boolean validateStringNotEmpty( String fieldName, ModelValidationResult result, String string,
-                                            String sourceHint )
+    private boolean validateStringNotEmpty( String fieldName, ModelValidationResult result, boolean warning,
+                                            String string, String sourceHint )
-        if ( !validateNotNull( fieldName, result, string, sourceHint ) )
+        if ( !validateNotNull( fieldName, result, warning, string, sourceHint ) )
-            result.addMessage( "'" + fieldName + "' is missing for " + sourceHint );
+            addViolation( result, false, "'" + fieldName + "' is missing for " + sourceHint );
-            result.addMessage( "'" + fieldName + "' is missing." );
+            addViolation( result, false, "'" + fieldName + "' is missing." );
-     * <li><code>string.length != null</code>
+     * <li><code>string != null</code>
-        result.addMessage( "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
+        addViolation( result, false, "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
-    private boolean validateNotNull( String fieldName, ModelValidationResult result, Object object, String sourceHint )
+    private boolean validateNotNull( String fieldName, ModelValidationResult result, boolean warning, Object object, String sourceHint )
-            result.addMessage( "'" + fieldName + "' is missing for " + sourceHint );
+            addViolation( result, warning, "'" + fieldName + "' is missing for " + sourceHint );
-            result.addMessage( "'" + fieldName + "' is missing." );
+            addViolation( result, warning, "'" + fieldName + "' is missing." );
-        result.addMessage( "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
+        addViolation( result, false, "In " + subElementInstance + ":\n\n       -> '" + fieldName + "' is missing." );
+    private void addViolation( ModelValidationResult result, boolean warning, String message )
+    {
+        if ( warning )
+        {
+            result.addWarning( message );
+        }
+        else
+        {
+            result.addError( message );
+        }
+    }
+

INS31 INS44 MOV44 INS44 MOV44 MOV29 INS44 MOV44 MOV29 MOV44 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS39 INS42 INS39 INS42 INS39 INS42 MOV25 MOV41 MOV25 MOV41 INS43 INS42 INS39 INS42 INS43 INS42 INS25 UPD66 UPD66 INS42 INS42 INS42 INS8 INS8 INS9 INS9 INS9 INS42 INS42 INS9 INS42 INS9 INS21 INS21 INS9 INS42 INS32 INS32 INS9 INS9 INS9 INS42 INS9 INS9 INS9 INS9 INS9 INS9 INS42 INS9 INS42 INS9 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS9 INS9 INS9 INS9 INS9 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42