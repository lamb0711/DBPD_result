o Enabled model cache

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@799470 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.DependencyManagement;
- * Describes a tag used by the model builder to access a {@link ModelCache}. This interface simply aggregates a name and
- * a class to provide some type safety when working with the otherwise untyped cache.
+ * Describes a tag used by the model builder to access a {@link ModelCache}. This interface basically aggregates a name
+ * and a class to provide some type safety when working with the otherwise untyped cache.
+     * Creates a copy of the data suitable for storage in the cache. The original data to store can be mutated after the
+     * cache is populated but the state of the cache must not change so we need to make a copy.
+     * 
+     * @param data The data to store in the cache, must not be {@code null}.
+     * @return The data being stored in the cache, never {@code null}.
+     */
+    T intoCache( T data );
+
+    /**
+     * Creates a copy of the data suitable for retrieval from the cache. The retrieved data can be mutated after the
+     * cache is queried but the state of the cache must not change so we need to make a copy.
+     * 
+     * @param data The data to retrieve from the cache, must not be {@code null}.
+     * @return The data being retrieved from the cache, never {@code null}.
+     */
+    T fromCache( T data );
+
+    /**
+        public ModelData intoCache( ModelData data )
+        {
+            Model model = ModelUtils.cloneModel( data.getModel() );
+            return new ModelData( model, data.getGroupId(), data.getArtifactId(), data.getVersion() );
+        }
+
+        public ModelData fromCache( ModelData data )
+        {
+            return intoCache( data );
+        }
+
-     * The tag used to denote an effective model.
+     * The tag used to denote an effective dependency management section from an imported model.
-    public static final ModelCacheTag<Model> EFFECTIVE = new ModelCacheTag<Model>()
+    public static final ModelCacheTag<DependencyManagement> IMPORT = new ModelCacheTag<DependencyManagement>()
-            return "effective";
+            return "import";
-        public Class<Model> getType()
+        public Class<DependencyManagement> getType()
-            return Model.class;
+            return DependencyManagement.class;
+        public DependencyManagement intoCache( DependencyManagement data )
+        {
+            return ModelUtils.cloneDependencyManagement( data );
+        };
+
+        public DependencyManagement fromCache( DependencyManagement data )
+        {
+            return intoCache( data );
+        };
+

INS26 INS40 INS31 INS31 INS29 INS43 INS42 INS44 INS29 INS43 INS42 INS44 UPD74 MOV74 UPD66 UPD66 INS65 INS65 INS65 INS42 INS43 INS42 INS65 INS65 INS65 INS42 INS43 INS42 UPD43 UPD42 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 UPD66 UPD42 UPD74 MOV74 INS66 INS66 INS66 INS66 INS31 INS31 UPD43 INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 UPD42 UPD74 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS41 UPD43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS59 INS14 INS42 INS32 UPD45 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS32 INS32 INS32 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42