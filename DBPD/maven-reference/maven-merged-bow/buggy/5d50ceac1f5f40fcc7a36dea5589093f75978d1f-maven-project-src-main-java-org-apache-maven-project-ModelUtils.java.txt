[MNG-1891] Fixed plugin ordering in profile injection AND model inheritance, to be consistent and to preserve as much ordering information as possible, to make plugin ordering more predictable. Also added several unit tests to express the problem(s) and verify the solutions. Ordering is in javadoc comments, and should be added to the plugin-configuration documentation on the site.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@425919 13f79535-47bb-0310-9956-ffa450edef68

+    
+    /**
+     * This should be the resulting ordering of plugins after merging:
+     * 
+     * Given:
+     * 
+     *   parent: X -> A -> B -> D -> E
+     *   child: Y -> A -> C -> D -> F
+     *  
+     * Result: 
+     * 
+     *   X -> Y -> A -> B -> C -> D -> E -> F
+     */
-        List mergedPlugins = new ArrayList();
-
-
+        
-            Map assembledPlugins = new TreeMap();
+            parentPlugins = new ArrayList( parentPlugins );
+            
+            // If we're processing this merge as an inheritance, we have to build up a list of 
+            // plugins that were considered for inheritance.
+            if ( handleAsInheritance )
+            {
+                for ( Iterator it = parentPlugins.iterator(); it.hasNext(); )
+                {
+                    Plugin plugin = (Plugin) it.next();
+                    
+                    String inherited = plugin.getInherited();
+                    
+                    if ( inherited != null && !Boolean.valueOf( inherited ).booleanValue() )
+                    {
+                        it.remove();
+                    }
+                }
+            }
+            
+            List assembledPlugins = new ArrayList();
-
+            
-
-                    Plugin assembledPlugin = parentPlugin;
-
-                    if ( childPlugin != null )
+                    if ( childPlugin != null && !assembledPlugins.contains( childPlugin ) )
-                        assembledPlugin = childPlugin;
+                        Plugin assembledPlugin = childPlugin;
+                        
+                        // fix for MNG-2221 (assembly cache was not being populated for later reference):
+                        assembledPlugins.add( assembledPlugin );
-                        assembledPlugin.unsetInheritanceApplied();
+                        parentPlugin.unsetInheritanceApplied();
-
-                    mergedPlugins.add(assembledPlugin);
-
-                    // fix for MNG-2221 (assembly cache was not being populated for later reference):
-                    assembledPlugins.put(  assembledPlugin.getKey(), assembledPlugin );
+                
+                // very important to use the parentPlugins List, rather than parentContainer.getPlugins()
+                // since this list is a local one, and may have been modified during processing.
+                List results = ModelUtils.orderAfterMerge( assembledPlugins, parentPlugins,
+                                                                        childContainer.getPlugins() );
+                
+                
+                childContainer.setPlugins( results );
+
+                childContainer.flushPluginMap();
-
-            for ( Iterator it = childPlugins.values().iterator(); it.hasNext(); )
-            {
-                Plugin childPlugin = (Plugin) it.next();
-
-                if ( !assembledPlugins.containsKey( childPlugin.getKey() ) )
-                {
-                    mergedPlugins.add(childPlugin);
-                }
-            }
-
-            childContainer.setPlugins(mergedPlugins);
-
-            childContainer.flushPluginMap();
+    public static List orderAfterMerge( List merged, List highPrioritySource, List lowPrioritySource )
+    {
+        List results = new ArrayList();
+        
+        if ( !merged.isEmpty() )
+        {
+            results.addAll( merged );
+        }
+        
+        List missingFromResults = new ArrayList();
+        
+        List sources = new ArrayList();
+        
+        sources.add( highPrioritySource );
+        sources.add( lowPrioritySource );
+        
+        for ( Iterator sourceIterator = sources.iterator(); sourceIterator.hasNext(); )
+        {
+            List source = (List) sourceIterator.next();
+            
+            for ( Iterator it = source.iterator(); it.hasNext(); )
+            {
+                Object item = it.next();
+                
+                if ( results.contains( item ) )
+                {
+                    if ( !missingFromResults.isEmpty() )
+                    {
+                        int idx = results.indexOf( item );
+                        
+                        if ( idx < 0 )
+                        {
+                            idx = 0;
+                        }
+                        
+                        results.addAll( idx, missingFromResults );
+                        
+                        missingFromResults.clear();
+                    }
+                }
+                else
+                {
+                    missingFromResults.add( item );
+                }
+            }
+            
+            if ( !missingFromResults.isEmpty() )
+            {
+                results.addAll( missingFromResults );
+                
+                missingFromResults.clear();
+            }
+        }
+        
+        return results;
+    }
+

INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS21 INS21 INS24 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS32 INS32 INS58 INS32 INS8 INS42 INS21 INS25 MOV60 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS59 INS42 INS42 INS60 INS24 INS25 INS7 INS42 INS8 INS43 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS59 INS58 INS32 INS8 INS38 INS8 INS42 INS14 MOV24 UPD42 INS60 INS21 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS59 INS42 INS42 INS60 INS25 INS32 INS21 INS21 INS43 INS42 INS43 INS59 INS32 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS32 INS32 UPD42 MOV42 INS43 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS38 INS8 INS32 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS27 INS38 MOV27 INS38 INS60 MOV21 MOV21 INS42 INS42 INS32 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS33 MOV32 INS32 MOV43 INS59 INS42 INS42 INS39 INS59 INS27 INS8 INS32 INS32 INS32 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS7 INS42 INS34 DEL42 DEL32 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21