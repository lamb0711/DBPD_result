Fold back into MavenRepositorySystem and work from there to clean up all references to the legacy system and Settings.

+import java.net.MalformedURLException;
+import java.net.URL;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
+import java.util.HashSet;
+import java.util.Set;
+import org.apache.maven.execution.MavenExecutionRequest;
+import org.apache.maven.repository.RepositorySystem;
-import org.apache.maven.settings.Server;
-import org.apache.maven.settings.building.SettingsProblem;
-import org.apache.maven.settings.crypto.DefaultSettingsDecryptionRequest;
-import org.apache.maven.settings.crypto.SettingsDecryptionRequest;
-import org.apache.maven.settings.crypto.SettingsDecryptionResult;
-import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.logging.Logger;
-import org.eclipse.aether.impl.ArtifactResolver;
-
-    @Requirement
-    private Logger logger;
-
-    @Requirement
-    private ArtifactResolver artifactResolver;
-
-    private PlexusContainer plexus;
-
-    @Requirement
-    public List<ArtifactRepository> getEffectiveRepositories( List<ArtifactRepository> repositories )
-    {
-        if ( repositories == null )
-        {
-            return null;
-        }
-
-        Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<String, List<ArtifactRepository>>();
-
-        for ( ArtifactRepository repository : repositories )
-        {
-            String key = repository.getId();
-
-            List<ArtifactRepository> aliasedRepos = reposByKey.get( key );
-
-            if ( aliasedRepos == null )
-            {
-                aliasedRepos = new ArrayList<ArtifactRepository>();
-                reposByKey.put( key, aliasedRepos );
-            }
-
-            aliasedRepos.add( repository );
-        }
-
-        List<ArtifactRepository> effectiveRepositories = new ArrayList<ArtifactRepository>();
-
-        for ( List<ArtifactRepository> aliasedRepos : reposByKey.values() )
-        {
-            List<ArtifactRepository> mirroredRepos = new ArrayList<ArtifactRepository>();
-
-            List<ArtifactRepositoryPolicy> releasePolicies =
-                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );
-
-            for ( ArtifactRepository aliasedRepo : aliasedRepos )
-            {
-                releasePolicies.add( aliasedRepo.getReleases() );
-                mirroredRepos.addAll( aliasedRepo.getMirroredRepositories() );
-            }
-
-            ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy( releasePolicies );
-
-            List<ArtifactRepositoryPolicy> snapshotPolicies =
-                new ArrayList<ArtifactRepositoryPolicy>( aliasedRepos.size() );
-
-            for ( ArtifactRepository aliasedRepo : aliasedRepos )
-            {
-                snapshotPolicies.add( aliasedRepo.getSnapshots() );
-            }
-
-            ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy( snapshotPolicies );
-
-            ArtifactRepository aliasedRepo = aliasedRepos.get( 0 );
-
-            ArtifactRepository effectiveRepository =
-                createArtifactRepository( aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(),
-                                          snapshotPolicy, releasePolicy );
-
-            effectiveRepository.setAuthentication( aliasedRepo.getAuthentication() );
-
-            effectiveRepository.setProxy( aliasedRepo.getProxy() );
-
-            effectiveRepository.setMirroredRepositories( mirroredRepos );
-
-            effectiveRepositories.add( effectiveRepository );
-        }
-
-        return effectiveRepositories;
-    }
-
-    private ArtifactRepositoryPolicy getEffectivePolicy( Collection<ArtifactRepositoryPolicy> policies )
-    {
-        ArtifactRepositoryPolicy effectivePolicy = null;
-
-        for ( ArtifactRepositoryPolicy policy : policies )
-        {
-            if ( effectivePolicy == null )
-            {
-                effectivePolicy = new ArtifactRepositoryPolicy( policy );
-            }
-            else
-            {
-                effectivePolicy.merge( policy );
-            }
-        }
-
-        return effectivePolicy;
-    }
-
-    public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )
-    {
-        return MirrorSelector.getMirror( repository, mirrors );
-    }
-
-    public void injectAuthentication( List<ArtifactRepository> repositories, List<Server> servers )
-    {
-        if ( repositories != null )
-        {
-            Map<String, Server> serversById = new HashMap<String, Server>();
-
-            if ( servers != null )
-            {
-                for ( Server server : servers )
-                {
-                    if ( !serversById.containsKey( server.getId() ) )
-                    {
-                        serversById.put( server.getId(), server );
-                    }
-                }
-            }
-
-            for ( ArtifactRepository repository : repositories )
-            {
-                Server server = serversById.get( repository.getId() );
-
-                if ( server != null )
-                {
-                    SettingsDecryptionRequest request = new DefaultSettingsDecryptionRequest( server );
-                    SettingsDecryptionResult result = settingsDecrypter.decrypt( request );
-                    server = result.getServer();
-
-                    if ( logger.isDebugEnabled() )
-                    {
-                        for ( SettingsProblem problem : result.getProblems() )
-                        {
-                            logger.debug( problem.getMessage(), problem.getException() );
-                        }
-                    }
-
-                    Authentication authentication = new Authentication( server.getUsername(), server.getPassword() );
-                    authentication.setPrivateKey( server.getPrivateKey() );
-                    authentication.setPassphrase( server.getPassphrase() );
-
-                    repository.setAuthentication( authentication );
-                }
-                else
-                {
-                    repository.setAuthentication( null );
-                }
-            }
-        }
-    }
-
-    public static ArtifactRepository buildArtifactRepository( org.apache.maven.settings.Repository repo )
+    public ArtifactRepository buildArtifactRepository( org.apache.maven.settings.Repository repo )
+    }    
+    
+    public ArtifactRepository createArtifactRepository( String id, String url, String layoutId,
+                                                        ArtifactRepositoryPolicy snapshots,
+                                                        ArtifactRepositoryPolicy releases )
+        throws Exception
+    {
+        ArtifactRepositoryLayout layout = layouts.get( layoutId );
+
+        checkLayout( id, layoutId, layout );
+
+        return createArtifactRepository( id, url, layout, snapshots, releases );
+    private void checkLayout( String repositoryId, String layoutId, ArtifactRepositoryLayout layout )
+        throws Exception
+    {
+        if ( layout == null )
+        {
+            throw new Exception( String.format( "Cannot find ArtifactRepositoryLayout instance for: %s %s", layoutId,
+                                                repositoryId ) );
+        }
+    }
+    
+    
+    //
+    // Code taken from LegacyRepositorySystem
+    //
+        
+    public ArtifactRepository createDefaultRemoteRepository( MavenExecutionRequest request )
+        throws Exception
+    {
+        return createRepository( RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID,
+                                 true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY,
+                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
+    }
+    
+    public ArtifactRepository createRepository( String url, String repositoryId, boolean releases,
+                                                 String releaseUpdates, boolean snapshots, String snapshotUpdates,
+                                                 String checksumPolicy ) throws Exception
+    {
+        ArtifactRepositoryPolicy snapshotsPolicy =
+            new ArtifactRepositoryPolicy( snapshots, snapshotUpdates, checksumPolicy );
+
+        ArtifactRepositoryPolicy releasesPolicy =
+            new ArtifactRepositoryPolicy( releases, releaseUpdates, checksumPolicy );
+
+        return createArtifactRepository( repositoryId, url, "default", snapshotsPolicy, releasesPolicy );
+    }
+        
+    public Set<String> getRepoIds( List<ArtifactRepository> repositories )
+    {
+        Set<String> repoIds = new HashSet<String>();
+
+        if ( repositories != null )
+        {
+            for ( ArtifactRepository repository : repositories )
+            {
+                repoIds.add( repository.getId() );
+            }
+        }
+
+        return repoIds;
+    }
+    
+    
+    public ArtifactRepository createLocalRepository( MavenExecutionRequest request, File localRepository )
+        throws Exception
+    {
+        return createRepository( "file://" + localRepository.toURI().getRawPath(),
+                                 RepositorySystem.DEFAULT_LOCAL_REPO_ID, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
+                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
+                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
+    }    
+    
+    private static final String WILDCARD = "*";
+
+    private static final String EXTERNAL_WILDCARD = "external:*";
+
+    public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )
+    {
+        String repoId = repository.getId();
+
+        if ( repoId != null && mirrors != null )
+        {
+            for ( Mirror mirror : mirrors )
+            {
+                if ( repoId.equals( mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
+                {
+                    return mirror;
+                }
+            }
+
+            for ( Mirror mirror : mirrors )
+            {
+                if ( matchPattern( repository, mirror.getMirrorOf() ) && matchesLayout( repository, mirror ) )
+                {
+                    return mirror;
+                }
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * This method checks if the pattern matches the originalRepository. Valid patterns: * = everything external:* =
+     * everything not on the localhost and not file based. repo,repo1 = repo or repo1 *,!repo1 = everything except repo1
+     *
+     * @param originalRepository to compare for a match.
+     * @param pattern used for match. Currently only '*' is supported.
+     * @return true if the repository is a match to this pattern.
+     */
+    static boolean matchPattern( ArtifactRepository originalRepository, String pattern )
+    {
+        boolean result = false;
+        String originalId = originalRepository.getId();
+
+        // simple checks first to short circuit processing below.
+        if ( WILDCARD.equals( pattern ) || pattern.equals( originalId ) )
+        {
+            result = true;
+        }
+        else
+        {
+            // process the list
+            String[] repos = pattern.split( "," );
+            for ( String repo : repos )
+            {
+                // see if this is a negative match
+                if ( repo.length() > 1 && repo.startsWith( "!" ) )
+                {
+                    if ( repo.substring( 1 ).equals( originalId ) )
+                    {
+                        // explicitly exclude. Set result and stop processing.
+                        result = false;
+                        break;
+                    }
+                }
+                // check for exact match
+                else if ( repo.equals( originalId ) )
+                {
+                    result = true;
+                    break;
+                }
+                // check for external:*
+                else if ( EXTERNAL_WILDCARD.equals( repo ) && isExternalRepo( originalRepository ) )
+                {
+                    result = true;
+                    // don't stop processing in case a future segment explicitly excludes this repo
+                }
+                else if ( WILDCARD.equals( repo ) )
+                {
+                    result = true;
+                    // don't stop processing in case a future segment explicitly excludes this repo
+                }
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Checks the URL to see if this repository refers to an external repository
+     *
+     * @param originalRepository
+     * @return true if external.
+     */
+    static boolean isExternalRepo( ArtifactRepository originalRepository )
+    {
+        try
+        {
+            URL url = new URL( originalRepository.getUrl() );
+            return !( url.getHost().equals( "localhost" ) || url.getHost().equals( "127.0.0.1" ) || url.getProtocol().equals( "file" ) );
+        }
+        catch ( MalformedURLException e )
+        {
+            // bad url just skip it here. It should have been validated already, but the wagon lookup will deal with it
+            return false;
+        }
+    }
+
+    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )
+    {
+        return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );
+    }
+
+    /**
+     * Checks whether the layouts configured for a mirror match with the layout of the repository.
+     *
+     * @param repoLayout The layout of the repository, may be {@code null}.
+     * @param mirrorLayout The layouts supported by the mirror, may be {@code null}.
+     * @return {@code true} if the layouts associated with the mirror match the layout of the original repository,
+     *         {@code false} otherwise.
+     */
+    static boolean matchesLayout( String repoLayout, String mirrorLayout )
+    {
+        boolean result = false;
+
+        // simple checks first to short circuit processing below.
+        if ( StringUtils.isEmpty( mirrorLayout ) || WILDCARD.equals( mirrorLayout ) )
+        {
+            result = true;
+        }
+        else if ( mirrorLayout.equals( repoLayout ) )
+        {
+            result = true;
+        }
+        else
+        {
+            // process the list
+            String[] layouts = mirrorLayout.split( "," );
+            for ( String layout : layouts )
+            {
+                // see if this is a negative match
+                if ( layout.length() > 1 && layout.startsWith( "!" ) )
+                {
+                    if ( layout.substring( 1 ).equals( repoLayout ) )
+                    {
+                        // explicitly exclude. Set result and stop processing.
+                        result = false;
+                        break;
+                    }
+                }
+                // check for exact match
+                else if ( layout.equals( repoLayout ) )
+                {
+                    result = true;
+                    break;
+                }
+                else if ( WILDCARD.equals( layout ) )
+                {
+                    result = true;
+                    // don't stop processing in case a future segment explicitly excludes this repo
+                }
+            }
+        }
+
+        return result;
+    }    

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 MOV43 INS42 INS44 INS44 INS44 INS44 MOV44 INS43 INS8 UPD83 MOV83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 MOV43 INS42 INS44 INS43 INS8 INS83 MOV43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS74 INS42 MOV44 INS8 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 MOV43 INS42 MOV44 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV43 INS42 MOV43 INS42 INS43 INS42 MOV43 INS42 UPD42 INS42 INS60 INS21 INS41 INS43 INS42 INS43 INS42 INS43 UPD42 MOV42 INS42 MOV25 INS43 INS42 UPD42 MOV42 INS41 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 UPD42 MOV42 INS60 INS60 INS41 INS43 MOV43 MOV60 INS25 INS41 INS43 UPD42 MOV42 INS43 INS42 UPD42 MOV42 INS41 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS42 INS45 MOV60 INS25 MOV41 INS65 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 MOV60 MOV60 INS25 MOV41 INS65 INS65 INS65 MOV43 INS42 INS54 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 MOV60 MOV25 INS41 UPD42 MOV42 INS43 INS59 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 MOV59 MOV43 INS59 INS32 INS42 UPD74 MOV27 INS8 INS42 UPD42 MOV42 INS42 INS32 INS43 INS27 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS39 INS43 INS27 INS8 INS8 UPD42 INS66 INS42 INS66 INS8 INS12 INS42 INS32 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS39 INS27 INS8 INS25 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS53 INS42 INS40 INS40 INS9 INS40 INS9 INS40 INS40 UPD42 INS14 INS42 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 UPD43 MOV43 UPD42 INS70 INS42 INS27 INS40 INS9 INS40 INS9 INS40 INS40 INS42 UPD42 INS27 INS27 MOV70 INS70 UPD42 INS9 INS42 UPD42 INS32 INS32 INS21 INS60 INS70 MOV60 INS41 INS44 INS8 UPD42 MOV42 INS32 MOV32 INS66 INS66 INS66 INS66 UPD42 INS9 INS32 INS32 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS14 MOV43 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 UPD42 UPD74 MOV44 INS42 INS8 INS45 INS32 INS42 INS33 INS42 INS33 UPD42 INS44 INS42 INS8 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS7 INS5 INS59 INS44 INS42 INS8 INS43 INS38 UPD43 MOV43 UPD42 MOV42 INS41 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV21 INS60 INS70 INS43 INS32 UPD43 MOV43 INS21 INS32 INS42 UPD43 UPD42 INS25 INS43 INS42 INS25 INS42 INS9 INS43 INS85 INS42 INS32 INS43 INS42 INS25 UPD42 MOV42 UPD42 INS36 UPD42 INS9 INS42 INS9 INS5 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS45 INS42 INS42 UPD42 MOV32 INS42 INS42 UPD42 INS27 INS8 INS42 INS27 INS8 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS27 INS8 INS25 INS43 INS32 INS27 INS42 INS9 INS43 INS85 INS42 INS32 INS43 INS42 INS25 UPD42 UPD42 INS32 INS32 INS41 INS32 INS32 INS41 INS27 INS32 INS25 INS32 INS8 INS25 UPD42 MOV42 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS27 INS8 INS25 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS34 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 INS10 INS27 MOV8 INS25 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS27 INS32 INS25 INS32 INS8 INS25 UPD42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS21 INS10 INS7 INS32 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS45 INS32 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV21 INS10 INS32 MOV8 UPD42 UPD42 INS34 INS7 INS42 INS9 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 INS10 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS9 UPD42 INS9 INS7 INS42 UPD42 MOV42 INS34 INS7 INS42 INS9 INS7 INS42 INS9 INS42 INS9 INS42 INS9 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL83 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL43 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL44 DEL43 DEL43 DEL43 DEL74 DEL74 DEL42 DEL43 DEL43 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL43 DEL74 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL43 DEL74 DEL44 DEL42 DEL42 DEL32 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL42 DEL32 DEL21 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL33 DEL27 DEL44 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL34 DEL42 DEL14 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL33 DEL32 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL8