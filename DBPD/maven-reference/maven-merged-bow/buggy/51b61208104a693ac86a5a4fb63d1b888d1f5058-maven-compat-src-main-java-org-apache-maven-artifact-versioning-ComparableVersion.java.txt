generified code

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@819177 13f79535-47bb-0310-9956-ffa450edef68

- * @author <a href="mailto:hboutemy@apache.org">Herve Boutemy</a>
+ * @author <a href="mailto:hboutemy@apache.org">Herv√© Boutemy</a>
-    implements Comparable
+    implements Comparable<ComparableVersion>
-        private final static List _QUALIFIERS = Arrays.asList( QUALIFIERS );
+        private final static List<String> _QUALIFIERS = Arrays.asList( QUALIFIERS );
-         * A comparable for the empty-string qualifier. This one is used to determine if a given qualifier makes the
+         * A comparable value for the empty-string qualifier. This one is used to determine if a given qualifier makes the
-        private static Comparable RELEASE_VERSION_INDEX = String.valueOf( _QUALIFIERS.indexOf( "" ) );
+        private static String RELEASE_VERSION_INDEX = String.valueOf( _QUALIFIERS.indexOf( "" ) );
-         * Returns a comparable for a qualifier.
+         * Returns a comparable value for a qualifier.
-         * @return
+         * @return an equivalent value that can be used with lexical comparison
-        public static Comparable comparableQualifier( String qualifier )
+        public static String comparableQualifier( String qualifier )
-        extends ArrayList
+        extends ArrayList<Item>
-            for( ListIterator iterator = listIterator( size() ); iterator.hasPrevious(); )
+            for( ListIterator<Item> iterator = listIterator( size() ); iterator.hasPrevious(); )
-                Item item = (Item) iterator.previous();
+                Item item = iterator.previous();
-                    Iterator left = iterator();
-                    Iterator right = ( (ListItem) item ).iterator();
+                    Iterator<Item> left = iterator();
+                    Iterator<Item> right = ( (ListItem) item ).iterator();
-            for( Iterator iter = iterator(); iter.hasNext(); )
+            for( Iterator<Item> iter = iterator(); iter.hasNext(); )
-        Stack stack = new Stack();
+        Stack<Item> stack = new Stack<Item>();
-    public int compareTo( Object o )
+    public int compareTo( ComparableVersion o )
-        return items.compareTo( ( (ComparableVersion) o ).items );
+        return items.compareTo( o.items );

INS74 MOV43 INS43 INS74 UPD66 INS42 INS74 UPD43 UPD43 MOV43 INS43 MOV43 MOV43 INS43 UPD42 UPD42 INS42 INS74 INS42 UPD66 UPD66 INS66 MOV43 INS43 INS40 INS74 INS74 INS74 INS74 INS42 INS74 MOV43 MOV43 MOV43 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV32 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL22