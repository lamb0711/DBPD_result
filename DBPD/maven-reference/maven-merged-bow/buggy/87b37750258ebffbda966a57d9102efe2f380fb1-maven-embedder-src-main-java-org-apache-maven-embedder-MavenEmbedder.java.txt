MNG-2722 Create a strategy for providing sane default values in the MavenExecutionRequest 


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491468 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.classworlds.realm.ClassRealm;
-import java.io.FileNotFoundException;
-    public static final String userHome = System.getProperty( "user.home" );
-
-    private ArtifactRepositoryFactory artifactRepositoryFactory;
-
+    private ArtifactRepositoryFactory artifactRepositoryFactory;
+
-    private ClassLoader classLoader;
-
+    private ClassRealm realm;
+
-    private boolean started = false;
-
+    // ----------------------------------------------------------------------------
+    // Constructors
+    // ----------------------------------------------------------------------------
+
+    public MavenEmbedder( ClassWorld classWorld )
+        throws MavenEmbedderException
+    {
+        this( classWorld, null );
+    }
+
+    public MavenEmbedder( ClassWorld classWorld, MavenEmbedderLogger logger )
+        throws MavenEmbedderException
+    {
+        this.classWorld = classWorld;
+
+        this.logger = logger;
+
+        start();
+    }
+
+    public MavenEmbedder( ClassLoader classLoader )
+        throws MavenEmbedderException
+    {
+        this( classLoader, null );
+    }
+
+    public MavenEmbedder( ClassLoader classLoader, MavenEmbedderLogger logger )
+        throws MavenEmbedderException
+    {
+        this( new ClassWorld( "plexus.core", classLoader ), logger );
+    }
+
-    public void setClassLoader( ClassLoader classLoader )
-    {
-        this.classLoader = classLoader;
-    }
-
-    public ClassLoader getClassLoader()
-    {
-        return classLoader;
-    }
-
-    public void setClassWorld( ClassWorld classWorld )
-    {
-        this.classWorld = classWorld;
-    }
-
-        checkStarted();
-        checkStarted();
-        checkStarted();
-    /** @deprecated */
+    /** @deprecated  */
-        checkStarted();
-    /** @deprecated */
+    /** @deprecated  */
-        checkStarted();
-    private MavenExecutionRequest populateMavenExecutionRequestWithDefaults( MavenExecutionRequest request )
+    private MavenExecutionRequest populateMavenExecutionRequestWithDefaults( MavenExecutionRequest r )
+        throws MavenEmbedderException
-        // Local repository    	    	
-        if ( request.getLocalRepository() == null )
+        // Settings        
+        // Local repository  
+        // TransferListener
+        // EventMonitor
+
+        if ( r.getSettings() == null )
-            request.setLocalRepository( localRepository );
+            File userSettingsPath = mavenTools.getUserSettingsPath( r.getSettingsFile() );
-            File localRepository = new File( request.getLocalRepository().getBasedir() );
+            File globalSettingsFile = mavenTools.getGlobalSettingsPath();
-            if ( !localRepository.exists() )
+            try
-                localRepository.mkdirs();
+                r.setSettings( mavenTools.buildSettings( userSettingsPath, globalSettingsFile, r.isInteractiveMode(),
+                                                         r.isOffline(), r.isUsePluginRegistry(),
+                                                         r.isUsePluginUpdateOverride() ) );
+            }
+            catch ( SettingsConfigurationException e )
+            {
+                throw new MavenEmbedderException( "Error processing settings.xml.", e );
-        // Settings
-
-        if ( request.getSettings() == null )
+        if ( r.getLocalRepository() == null )
-            request.setSettings( settings );
+            String localRepositoryPath = mavenTools.getLocalRepositoryPath( r.getSettings() );
+
+            if ( r.getLocalRepository() == null )
+            {
+                r.setLocalRepository( mavenTools.createLocalRepository( new File( localRepositoryPath ) ) );
+            }
-        /*
-        MavenExecutionRequest request = new DefaultMavenExecutionRequest()
-            .setBasedir( baseDirectory )
-            .setGoals( goals )
-            .setLocalRepositoryPath( localRepositoryPath ) // default: ~/.m2/repository
-            .setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast
-            .setRecursive( recursive ) // default: false
-            .setUseReactor( useReactor ) // default: true
-            .setShowErrors( showErrors ) // default: false
-            .setInteractiveMode( interactive ) // default: false
-            .setLoggingLevel( loggingLevel ) // default: info
-            .setSettings( settings ) // default: ~/.m2/settings.xml
-            .setTransferListener( transferListener ) // default: batch mode which goes along with interactive
-            .setOffline( offline ) // default: false
-            .setUpdateSnapshots( updateSnapshots ) // default: false
-            .setNoSnapshotUpdates( noSnapshotUpdates ) // default: false
-            .setGlobalChecksumPolicy( globalChecksumPolicy ); // default: warn
-        */
-
-        // Classify settings as being used for the life of session or request
-
-        if ( request.getLocalRepository() == null )
-        {
-        }
-
-
-        return request;
+        return r;
-        request = populateMavenExecutionRequestWithDefaults( request );
-
+            request = populateMavenExecutionRequestWithDefaults( request );
+
+        catch ( MavenEmbedderException e )
+        {
+            return new DefaultMavenExecutionResult( project, Collections.singletonList( e ) );
+        }
-        checkStarted();
-        checkStarted();
-        checkStarted();
-                classLoader.getResourceAsStream( "/plugins/" + summaryPluginDescriptor.getArtifactId() + ".xml" );
+                realm.getResourceAsStream( "/plugins/" + summaryPluginDescriptor.getArtifactId() + ".xml" );
-        checkStarted();
-        checkStarted();
-    public void start()
+    private void start()
-        // ----------------------------------------------------------------------
-        // Set the maven.home system property which is need by components like
-        // the plugin registry builder.
-        // ----------------------------------------------------------------------
-
-        if ( classWorld == null && classLoader == null )
-        {
-            throw new IllegalStateException(
-                "A classWorld or classloader must be specified using setClassLoader|World(ClassLoader)." );
-        }
-
-        if ( classWorld == null )
-        {
-            classWorld = new ClassWorld();
-
-            try
-            {
-                classWorld.newRealm( "plexus.core", classLoader );
-            }
-            catch ( DuplicateRealmException e )
-            {
-                // won't happen
-            }
-        }
-
-            started = true;
-            
-            settings = mavenTools.buildSettings( req.getUserSettingsFile(), req.getGlobalSettingsFile(), null );
+            settings = mavenTools.buildSettings( req.getUserSettingsFile(), req.getGlobalSettingsFile(), false );
-        started = false;
-    public void execute( MavenExecutionRequest request )
+    public MavenExecutionResult execute( MavenExecutionRequest request )
-        checkStarted();
-
-        maven.execute( request );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean interactive,
-                                   boolean offline,
-                                   boolean usePluginRegistry,
-                                   Boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, interactive, offline, usePluginRegistry,
-                                         pluginUpdateOverride );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean interactive,
-                                   boolean offline,
-                                   boolean usePluginRegistry,
-                                   boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, interactive, offline, usePluginRegistry,
-                                         Boolean.valueOf( pluginUpdateOverride ) );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   Boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, pluginUpdateOverride );
-    }
-
-    public Settings buildSettings( File userSettingsPath,
-                                   File globalSettingsPath,
-                                   boolean pluginUpdateOverride )
-        throws SettingsConfigurationException
-    {
-        checkStarted();
-        return mavenTools.buildSettings( userSettingsPath, globalSettingsPath, Boolean.valueOf( pluginUpdateOverride ) );
-    }
-
-    public File getUserSettingsPath( String optionalSettingsPath )
-    {
-        checkStarted();
-        return mavenTools.getUserSettingsPath( optionalSettingsPath );
-    }
-
-    public File getGlobalSettingsPath()
-    {
-        checkStarted();
-        return mavenTools.getGlobalSettingsPath();
-    }
-
-    public String getLocalRepositoryPath( Settings settings )
-    {
-        checkStarted();
-        return mavenTools.getLocalRepositoryPath( settings );
-    }
-
-    private void checkStarted()
-    {
-        if ( !started )
+        try
-            throw new IllegalStateException(
-                "The embedder is not started, you need to call start() on the embedder prior to calling this method" );
+            request = populateMavenExecutionRequestWithDefaults( request );
+        catch ( MavenEmbedderException e )
+        {
+            throw new MavenExecutionException( "Error populating request with default values.", e );
+        }
+
+        return maven.execute( request );

MOV26 MOV23 MOV23 MOV31 UPD40 INS31 INS31 INS31 UPD83 UPD43 INS83 INS42 INS44 INS43 INS8 UPD42 INS44 INS43 INS42 INS44 INS43 INS8 INS42 MOV44 INS44 INS43 MOV83 MOV43 MOV42 MOV44 INS43 INS8 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 MOV43 INS8 UPD42 INS42 INS43 INS42 INS42 INS17 INS43 INS42 INS42 INS21 INS21 INS43 INS42 INS42 INS17 INS43 INS42 INS42 INS17 UPD42 INS42 INS25 INS25 INS41 UPD42 INS54 INS41 UPD42 MOV42 INS42 INS33 INS42 INS7 INS32 INS42 INS42 INS33 UPD42 MOV42 MOV14 INS42 UPD66 UPD66 MOV27 INS8 INS27 INS8 INS42 INS12 INS8 INS12 MOV32 INS22 INS42 INS42 INS45 INS42 INS60 INS60 INS54 INS32 INS33 INS60 INS25 MOV21 INS44 INS8 INS21 INS44 INS8 INS52 INS42 UPD42 MOV43 INS59 MOV43 INS59 INS8 INS12 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS27 INS8 INS43 INS42 INS41 INS7 INS43 INS42 MOV53 INS42 INS32 INS42 MOV32 INS21 INS44 INS8 INS42 INS32 INS32 INS33 INS21 INS42 INS14 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS32 INS32 MOV43 INS42 INS53 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS32 INS43 INS42 INS32 UPD42 INS9 UPD42 MOV42 UPD42 MOV42 UPD43 UPD45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS14 UPD42 UPD42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 INS32 INS32 INS32 MOV32 INS43 INS45 INS42 MOV42 UPD42 MOV42 INS14 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 MOV43 INS42 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL42 DEL42 DEL45 DEL32 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL39 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL43 DEL42 DEL42 DEL41 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL33 DEL42 DEL9 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL21 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL32 DEL21 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL32 DEL21 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL38 DEL8 DEL25 DEL8 DEL31