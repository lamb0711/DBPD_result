fixed errors reported by Checkstyle

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@813604 13f79535-47bb-0310-9956-ffa450edef68

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
-/** 
- * This object is tinted with ClasspathTransformation and GraphConflictResolver. 
+/**
+ * This object is tinted with ClasspathTransformation and GraphConflictResolver.
- * 
+ *
-    
-    /** 
+
+    /**
-     * explicit call of the initTreeProcessing() 
-     */ 
+     * explicit call of the initTreeProcessing()
+     */
-    
+
-        classpathTransformation = (ClasspathTransformation)plexus.lookup(ClasspathTransformation.class);
-        conflictResolver = (GraphConflictResolver)plexus.lookup(GraphConflictResolver.class);
+        classpathTransformation = (ClasspathTransformation) plexus.lookup( ClasspathTransformation.class );
+        conflictResolver = (GraphConflictResolver) plexus.lookup( GraphConflictResolver.class );
-        return treeRoot == null ? null : new MetadataGraph(treeRoot);
+        return treeRoot == null ? null : new MetadataGraph( treeRoot );
-    	if( treeRoot == null )
-    		return null;
-    	
-    	if( conflictResolver == null )
-    		return null;
-    	
+        if ( treeRoot == null )
+        {
+            return null;
+        }
+
+        if ( conflictResolver == null )
+        {
+            return null;
+        }
+
-    	if( requestType == null )
-    		return null;
-    	
-    	if( treeRoot == null )
-    		return null;
-    	
-    	if( conflictResolver == null )
-    		return null;
-    	
-    	if( requestType.equals(MetadataResolutionRequestTypeEnum.classpathCompile) )
-    		return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.compile );
-    	else if( requestType.equals(MetadataResolutionRequestTypeEnum.classpathRuntime) )
-    		return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.runtime );
-    	else if( requestType.equals(MetadataResolutionRequestTypeEnum.classpathRuntime) )
-    		return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.test );
-    	else if( requestType.equals(MetadataResolutionRequestTypeEnum.classpathRuntime) )
-    		return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.test );
-    	else if( requestType.equals(MetadataResolutionRequestTypeEnum.graph) )
-    		return getGraph();
-    	else if( requestType.equals(MetadataResolutionRequestTypeEnum.versionedGraph) ) {
-    		return new MetadataGraph( getTree(), true, false );
-    	}
-    	else if( requestType.equals(MetadataResolutionRequestTypeEnum.scopedGraph) ) {
-    		return new MetadataGraph( getTree(), true, true );
-    	}
-		return null;
+        if ( requestType == null )
+        {
+            return null;
+        }
+
+        if ( treeRoot == null )
+        {
+            return null;
+        }
+
+        if ( conflictResolver == null )
+        {
+            return null;
+        }
+
+        if ( requestType.equals( MetadataResolutionRequestTypeEnum.classpathCompile ) )
+        {
+            return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.compile );
+        }
+        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.classpathRuntime ) )
+        {
+            return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.runtime );
+        }
+        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.classpathRuntime ) )
+        {
+            return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.test );
+        }
+        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.classpathRuntime ) )
+        {
+            return conflictResolver.resolveConflicts( getGraph(), ArtifactScopeEnum.test );
+        }
+        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.graph ) )
+        {
+            return getGraph();
+        }
+        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.versionedGraph ) )
+        {
+            return new MetadataGraph( getTree(), true, false );
+        }
+        else if ( requestType.equals( MetadataResolutionRequestTypeEnum.scopedGraph ) )
+        {
+            return new MetadataGraph( getTree(), true, true );
+        }
+        return null;
-        if( classpathTransformation == null )
-        	return null;
-        
+        if ( classpathTransformation == null )
+        {
+            return null;
+        }
+
-        if( dirtyGraph == null )
-        	return null;
-        
+        if ( dirtyGraph == null )
+        {
+            return null;
+        }
+
-    
+
-        ClasspathContainer cpc = getClasspath(scope);
-        if( cpc == null )
-        	return null;
-        
+        ClasspathContainer cpc = getClasspath( scope );
+        if ( cpc == null )
+        {
+            return null;
+        }
+

UPD66 MOV25 UPD66 INS8 INS8 INS8 INS8 INS8 MOV32 INS8 INS8 INS8 INS8 MOV41 MOV41 MOV41 MOV41 MOV41 MOV41 MOV32 INS8 MOV41 MOV41 MOV41 MOV41 MOV32 INS8 INS25 MOV41 MOV32 INS8 MOV25 MOV41 INS8 MOV41 DEL25