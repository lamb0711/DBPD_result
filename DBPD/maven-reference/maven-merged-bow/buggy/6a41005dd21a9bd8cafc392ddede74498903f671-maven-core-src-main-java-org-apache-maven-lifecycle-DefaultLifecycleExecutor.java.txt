o Synced ProjectDependenciesResolver with MSHARED-126

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@809365 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashSet;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-                    repositoryRequest.setRemoteRepositories( project.getRemoteArtifactRepositories() );
-
-                    try
-                    {
-                        projectDependenciesResolver.resolve( project, executionPlan.getRequiredResolutionScopes(),
-                                                             repositoryRequest );
-                    }
-                    catch ( MultipleArtifactsNotFoundException e )
-                    {
-                        /*
-                         * MNG-2277, the check below compensates for our bad plugin support where we ended up with
-                         * aggregator plugins that require dependency resolution although they usually run in phases of
-                         * the build where project artifacts haven't been assembled yet. The prime example of this is
-                         * "mvn release:prepare".
-                         */
-                        if ( projectBuild.taskSegment.aggregating
-                            && areAllArtifactsInReactor( session.getProjects(), e.getMissingArtifacts() ) )
-                        {
-                            logger.warn( "The following artifacts could not be resolved at this point of the build"
-                                + " but seem to be part of the reactor:" );
-                            for ( Artifact artifact : e.getMissingArtifacts() )
-                            {
-                                logger.warn( "o " + artifact.getId() );
-                            }
-                            logger.warn( "Try running the build up to the lifecycle phase \"package\"" );
-                        }
-                        else
-                        {
-                            throw e;
-                        }
-                    }
+                    resolveProjectDependencies( project, executionPlan, session, projectBuild.taskSegment.aggregating );
+    private void resolveProjectDependencies( MavenProject project, MavenExecutionPlan executionPlan,
+                                             MavenSession session, boolean aggregating )
+        throws ArtifactResolutionException, ArtifactNotFoundException
+    {
+        Set<Artifact> artifacts;
+
+        try
+        {
+            Collection<String> scopesToResolve = executionPlan.getRequiredResolutionScopes();
+
+            artifacts = projectDependenciesResolver.resolve( project, scopesToResolve, session );
+        }
+        catch ( MultipleArtifactsNotFoundException e )
+        {
+            /*
+             * MNG-2277, the check below compensates for our bad plugin support where we ended up with aggregator
+             * plugins that require dependency resolution although they usually run in phases of the build where project
+             * artifacts haven't been assembled yet. The prime example of this is "mvn release:prepare".
+             */
+            if ( aggregating && areAllArtifactsInReactor( session.getProjects(), e.getMissingArtifacts() ) )
+            {
+                logger.warn( "The following artifacts could not be resolved at this point of the build"
+                    + " but seem to be part of the reactor:" );
+
+                for ( Artifact artifact : e.getMissingArtifacts() )
+                {
+                    logger.warn( "o " + artifact.getId() );
+                }
+
+                logger.warn( "Try running the build up to the lifecycle phase \"package\"" );
+
+                artifacts = new LinkedHashSet<Artifact>( e.getResolvedArtifacts() );
+            }
+            else
+            {
+                throw e;
+            }
+        }
+
+        project.setArtifacts( artifacts );
+
+        Set<String> directDependencies = new HashSet<String>( project.getDependencies().size() * 2 );
+        for ( Dependency dependency : project.getDependencies() )
+        {
+            directDependencies.add( dependency.getManagementKey() );
+        }
+
+        Set<Artifact> dependencyArtifacts = new LinkedHashSet<Artifact>( project.getDependencies().size() * 2 );
+        for ( Artifact artifact : artifacts )
+        {
+            if ( directDependencies.contains( artifact.getDependencyConflictId() ) )
+            {
+                dependencyArtifacts.add( artifact );
+            }
+        }
+        project.setDependencyArtifacts( dependencyArtifacts );
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 INS43 INS43 MOV8 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS21 INS60 INS70 INS60 INS70 INS21 INS42 INS42 INS74 INS59 INS32 INS74 INS59 INS44 INS32 INS8 INS74 INS59 INS44 INS42 INS8 INS32 INS43 INS43 INS42 INS60 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 MOV21 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS7 INS42 INS42 INS74 INS27 INS42 INS42 INS42 INS74 INS27 INS42 INS32 INS8 INS43 INS43 INS42 MOV32 INS42 INS32 INS43 INS43 INS32 INS34 UPD42 UPD42 INS43 INS43 INS32 INS34 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 MOV42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS74 INS32 INS43 INS43 INS42 INS42 INS42 INS42 DEL32 DEL40