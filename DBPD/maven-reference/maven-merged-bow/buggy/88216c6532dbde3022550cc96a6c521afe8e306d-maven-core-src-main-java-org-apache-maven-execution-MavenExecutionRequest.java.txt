o Re-introduced distinction between user properties and system properties. We have use cases like interpolation and SUREFIRE-121 where we would like to handle user-specified props specially so a single properties soup is not up to the job. However, I opted not to follow the approach from 2.x where we also collect both system properties and user properties in a combined set called execution properties. Code that embeds Maven and programmatically creates an execution request should be not required to assemble such a mixed properties instance, it would enable bad behavior from Maven by subtle API misuse. Also, for things like the lifecycle participant that wants to inject properties, it should be cristal clear whether it injects a user or a system property, the semantics of something like getExecutionProperties().setProperty() would be unclear however.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@796900 13f79535-47bb-0310-9956-ffa450edef68

-    MavenExecutionRequest setProperties( Properties properties );
-    MavenExecutionRequest setProperty( String key, String value );
-    Properties getProperties();
+
+    /**
+     * Sets the system properties to use for interpolation and profile activation. The system properties are collected
+     * from the runtime environment like {@link System#getProperties()} and environment variables.
+     * 
+     * @param systemProperties The system properties, may be {@code null}.
+     * @return This request, never {@code null}.
+     */
+    MavenExecutionRequest setSystemProperties( Properties systemProperties );
+
+    /**
+     * Gets the system properties to use for interpolation and profile activation. The system properties are collected
+     * from the runtime environment like {@link System#getProperties()} and environment variables.
+     * 
+     * @return The system properties, never {@code null}.
+     */
+    Properties getSystemProperties();
+
+    /**
+     * Sets the user properties to use for interpolation and profile activation. The user properties have been
+     * configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command
+     * line.
+     * 
+     * @param userProperties The user properties, may be {@code null}.
+     * @return This request, never {@code null}.
+     */
+    MavenExecutionRequest setUserProperties( Properties userProperties );
+
+    /**
+     * Gets the user properties to use for interpolation and profile activation. The user properties have been
+     * configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command
+     * line.
+     * 
+     * @return The user properties, never {@code null}.
+     */
+    Properties getUserProperties();

INS31 INS31 INS29 MOV43 INS42 INS44 INS29 INS43 INS42 INS29 MOV43 INS42 MOV44 INS29 INS43 UPD42 INS65 INS65 INS65 MOV43 INS42 INS65 INS65 UPD42 MOV42 INS65 INS65 INS65 UPD42 INS65 INS65 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS68 INS66 INS66 INS68 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31