[MNG-4756] Aether integration


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@988749 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.RepositoryRequest;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.Exclusion;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.artifact.Artifact;
+import org.sonatype.aether.graph.DependencyFilter;
+import org.sonatype.aether.repository.LocalRepository;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.repository.WorkspaceRepository;
+        implements Key
-        private final List<ArtifactRepository> repositories = new ArrayList<ArtifactRepository>();
+        private final WorkspaceRepository workspace;
-        private final ArtifactFilter extensionArtifactFilter;
+        private final LocalRepository localRepo;
+
+        private final List<RemoteRepository> repositories;
+
+        private final DependencyFilter filter;
-        public CacheKey( Plugin plugin, RepositoryRequest repositoryRequest, ArtifactFilter extensionArtifactFilter )
+        public CacheKey( Plugin plugin, DependencyFilter extensionFilter, List<RemoteRepository> repositories,
+                         RepositorySystemSession session )
-            this.repositories.add( repositoryRequest.getLocalRepository() );
-            this.repositories.addAll( repositoryRequest.getRemoteRepositories() );
-            this.extensionArtifactFilter = extensionArtifactFilter;
+            workspace = CacheUtils.getWorkspace( session );
+            this.localRepo = session.getLocalRepository();
+            this.repositories = new ArrayList<RemoteRepository>( repositories.size() );
+            for ( RemoteRepository repository : repositories )
+            {
+                if ( repository.isRepositoryManager() )
+                {
+                    this.repositories.addAll( repository.getMirroredRepositories() );
+                }
+                else
+                {
+                    this.repositories.add( repository );
+                }
+            }
+            this.filter = extensionFilter;
-            hash = hash * 31 + pluginHashCode( plugin );
-            hash = hash * 31 + repositories.hashCode();
-            hash = hash * 31 + ( extensionArtifactFilter != null ? extensionArtifactFilter.hashCode() : 0 );
+            hash = hash * 31 + CacheUtils.pluginHashCode( plugin );
+            hash = hash * 31 + hash( workspace );
+            hash = hash * 31 + hash( localRepo );
+            hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
+            hash = hash * 31 + hash( extensionFilter );
+        public String toString()
+        {
+            return plugin.getId();
+        }
+
+        @Override
+        private static int hash( Object obj )
+        {
+            return obj != null ? obj.hashCode() : 0;
+        }
+
-            CacheKey other = (CacheKey) o;
+            CacheKey that = (CacheKey) o;
-            return pluginEquals( plugin, other.plugin ) && eq( repositories, other.repositories )
-                && eq( extensionArtifactFilter, other.extensionArtifactFilter );
+            return CacheUtils.pluginEquals( plugin, that.plugin ) && eq( workspace, that.workspace )
+                && eq( localRepo, that.localRepo ) && CacheUtils.repositoriesEquals( repositories, that.repositories )
+                && eq( filter, that.filter );
+        }
+
+        private static <T> boolean eq( T s1, T s2 )
+        {
+            return s1 != null ? s1.equals( s2 ) : s2 == null;
-    protected final Map<CacheKey, CacheRecord> cache = new HashMap<CacheKey, CacheRecord>();
+    protected final Map<Key, CacheRecord> cache = new HashMap<Key, CacheRecord>();
-    public CacheRecord get( Plugin plugin, RepositoryRequest repositoryRequest, ArtifactFilter extensionArtifactFilter )
+    public Key createKey( Plugin plugin, DependencyFilter extensionFilter, List<RemoteRepository> repositories,
+                          RepositorySystemSession session )
-        return cache.get( new CacheKey( plugin, repositoryRequest, extensionArtifactFilter ) );
+        return new CacheKey( plugin, extensionFilter, repositories, session );
-    public CacheRecord put( Plugin plugin, RepositoryRequest repositoryRequest, ArtifactFilter extensionArtifactFilter,
-                            List<Artifact> pluginArtifacts )
+    public CacheRecord get( Key key )
+    {
+        return cache.get( key );
+    }
+
+    public CacheRecord put( Key key, List<Artifact> pluginArtifacts )
-        CacheKey key = new CacheKey( plugin, repositoryRequest, extensionArtifactFilter );
-
-            throw new IllegalStateException( "Duplicate artifact resolution result for plugin " + plugin.getId() );
+            throw new IllegalStateException( "Duplicate artifact resolution result for plugin " + key );
-        int hash = 17;
-
-        hash = hash * 31 + plugin.getGroupId().hashCode();
-        hash = hash * 31 + plugin.getArtifactId().hashCode();
-        hash = hash * 31 + plugin.getVersion().hashCode();
-
-        for ( Dependency dependency : plugin.getDependencies() )
-        {
-            hash = hash * 31 + dependency.getGroupId().hashCode();
-            hash = hash * 31 + dependency.getArtifactId().hashCode();
-            hash = hash * 31 + dependency.getVersion().hashCode();
-            hash = hash * 31 + dependency.getType().hashCode();
-            hash = hash * 31 + ( dependency.getClassifier() != null ? dependency.getClassifier().hashCode() : 0 );
-            hash = hash * 31 + ( dependency.getScope() != null ? dependency.getScope().hashCode() : 0 );
-
-            for ( Exclusion exclusion : dependency.getExclusions() )
-            {
-                hash = hash * 31 + exclusion.getGroupId().hashCode();
-                hash = hash * 31 + exclusion.getArtifactId().hashCode();
-            }
-        }
-
-        return hash;
+        return CacheUtils.pluginHashCode( plugin );
-        return eq( a.getGroupId(), b.getGroupId() ) //
-            && eq( a.getArtifactId(), b.getArtifactId() ) //
-            && eq( a.getVersion(), b.getVersion() ) // 
-            && dependenciesEquals( a.getDependencies(), b.getDependencies() );
-    }
-
-    private static boolean dependenciesEquals( List<Dependency> a, List<Dependency> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Dependency> aI = a.iterator();
-        Iterator<Dependency> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Dependency aD = aI.next();
-            Dependency bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() ) //
-                && eq( aD.getVersion(), bD.getVersion() ) // 
-                && eq( aD.getType(), bD.getType() ) //
-                && eq( aD.getClassifier(), bD.getClassifier() ) //
-                && eq( aD.getScope(), bD.getScope() );
-
-            r &= exclusionsEquals( aD.getExclusions(), bD.getExclusions() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static boolean exclusionsEquals( List<Exclusion> a, List<Exclusion> b )
-    {
-        if ( a.size() != b.size() )
-        {
-            return false;
-        }
-
-        Iterator<Exclusion> aI = a.iterator();
-        Iterator<Exclusion> bI = b.iterator();
-
-        while ( aI.hasNext() )
-        {
-            Exclusion aD = aI.next();
-            Exclusion bD = bI.next();
-
-            boolean r = eq( aD.getGroupId(), bD.getGroupId() ) //
-                && eq( aD.getArtifactId(), bD.getArtifactId() );
-
-            if ( !r )
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static <T> boolean eq( T s1, T s2 )
-    {
-        return s1 != null ? s1.equals( s2 ) : s2 == null;
+        return CacheUtils.pluginEquals( a, b );

MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS43 INS23 INS23 INS31 INS31 MOV31 UPD74 INS43 INS42 MOV44 MOV44 UPD83 MOV43 INS42 INS44 INS8 UPD39 UPD42 MOV44 UPD83 UPD42 MOV44 MOV44 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 UPD74 UPD43 INS44 MOV21 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 UPD43 UPD42 MOV42 UPD43 UPD42 UPD74 UPD42 UPD43 UPD42 UPD43 MOV43 UPD42 MOV42 INS41 UPD43 UPD42 INS41 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD42 INS43 INS42 INS74 UPD42 UPD43 UPD42 INS21 INS21 INS70 INS21 INS21 INS42 INS42 INS41 INS43 INS42 INS41 UPD42 UPD74 UPD42 UPD43 UPD42 INS14 UPD42 INS32 UPD42 INS32 INS32 UPD42 INS42 MOV43 INS43 UPD42 INS7 INS7 INS7 INS44 INS42 INS8 INS7 INS7 MOV32 INS42 INS16 UPD43 UPD42 MOV43 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 INS42 INS32 INS22 INS32 MOV22 MOV14 INS43 INS42 INS25 UPD42 INS42 INS27 INS42 INS27 INS27 INS32 INS34 UPD42 INS32 INS32 INS32 UPD42 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 MOV42 UPD74 INS32 INS42 INS32 INS8 INS8 UPD42 MOV27 INS32 MOV27 INS32 MOV27 INS32 INS42 INS33 INS42 INS42 INS42 UPD40 MOV42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 MOV42 UPD40 MOV40 UPD42 UPD40 UPD43 INS42 INS42 INS42 INS42 MOV21 INS21 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 INS32 MOV22 INS22 INS42 INS42 UPD42 UPD42 INS52 INS42 DEL40 DEL26 DEL43 DEL42 DEL32 DEL32 DEL33 DEL27 DEL32 DEL34 DEL16 DEL36 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL32 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL61 DEL9 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL61 DEL9 DEL41