Working on: MNG-377

o Normalized all references to plugins to use either o.a.m.model.Plugin or o.a.m.plugin.PluginDescriptor instances

o Changed DefaultLifecycleExecutor, PluginManager, DefaultPluginManager, MavenPluginCollector, and DoxiaMojo to reflect the above

o Added mapped-plugin resolution of goal prefixes to the DefaultLifecycleExecutor

o Added caching of PluginMappingManager instance inside of MavenSession

o Modified SettingsUtils to be more resistant to null String-Lists for pluginGroups and activeProfiles during merge.

o Added checks to MavenProject.addPlugin(..) to only add if the plugin doesn't already exist in the model.

Next step is to modify installation and deployment process for plugins to publish plugins.xml repository metadata.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@209677 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.metadata.RepositoryMetadataManagementException;
+import org.apache.maven.plugin.mapping.PluginMappingManagementException;
+import org.apache.maven.plugin.mapping.PluginMappingManager;
-    
+
-        throws LifecycleExecutionException, PluginNotFoundException, MojoExecutionException, ArtifactResolutionException
+        throws LifecycleExecutionException, PluginNotFoundException, MojoExecutionException,
+        ArtifactResolutionException
-                                           MavenProject project )
+                                          MavenProject project )
-                    addToLifecycleMappings( lifecycleMappings, phase, new MojoExecution( mojoDescriptor ),
-                                            session.getSettings() );
+                    addToLifecycleMappings( lifecycleMappings, phase, new MojoExecution( mojoDescriptor ), session
+                        .getSettings() );
-                "DEPRECATED: goal definitions for plugin '" + plugin.getKey() + "' must be in an executions element" );
+                              "DEPRECATED: goal definitions for plugin '" + plugin.getKey()
+                                  + "' must be in an executions element" );
-        String groupId = plugin.getGroupId();
-
-        String artifactId = plugin.getArtifactId();
-
-        String version = plugin.getVersion();
-
-            pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, project, session.getSettings(),
-                                                           localRepository );
+            pluginDescriptor = pluginManager.verifyPlugin( plugin, project, session.getSettings(), localRepository );
-    private void bindGoalMapToLifecycle( PluginDescriptor pluginDescriptor, Map goalMap, Map phaseMap,
-                                         Settings settings )
+    private void bindGoalMapToLifecycle( PluginDescriptor pluginDescriptor, Map goalMap, Map phaseMap, Settings settings )
-                                           Settings settings )
+                                          Settings settings )
-                                         Settings settings )
+                                        Settings settings )
-        String groupId = null;
-        String artifactId = null;
-        String version = null;
+        Plugin plugin = null;
-            String id = pluginManager.getPluginIdFromPrefix( prefix );
-
-            if ( id == null )
+            // Steps for retrieving the plugin model instance:
+            // 1. request directly from the plugin collector by prefix
+            pluginDescriptor = pluginManager.getPluginDescriptorForPrefix( prefix );
+            
+            if ( pluginDescriptor != null )
-                groupId = PluginDescriptor.getDefaultPluginGroupId();
-                artifactId = PluginDescriptor.getDefaultPluginArtifactId( prefix );
+                plugin = new Plugin();
+                
+                plugin.setGroupId( pluginDescriptor.getGroupId() );
+                plugin.setArtifactId( pluginDescriptor.getArtifactId() );
+                plugin.setVersion( pluginDescriptor.getVersion() );
-            else
+
+            // 2. use the plugin resolver to resolve the prefix in the search groups
+            if ( plugin == null )
-                tok = new StringTokenizer( id, ":" );
-                groupId = tok.nextToken();
-                artifactId = tok.nextToken();
-                version = tok.nextToken();
+                PluginMappingManager mappingManager = session.getPluginMappingManager();
+
+                // don't reassemble the plugin mappings if the session has already been configured with them.
+                if ( mappingManager == null )
+                {
+                    try
+                    {
+                        List pluginGroupIds = session.getSettings().getPluginGroups();
+                        List pluginRepositories = project.getPluginArtifactRepositories();
+                        ArtifactRepository localRepository = session.getLocalRepository();
+
+                        mappingManager = pluginMappingBuilder.loadPluginMappings( pluginGroupIds, pluginRepositories,
+                                                                                  localRepository );
+                        
+                        // lazily configure this on the session.
+                        session.setPluginMappingManager( mappingManager );
+                    }
+                    catch ( RepositoryMetadataManagementException e )
+                    {
+                        throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
+                    }
+                    catch ( PluginMappingManagementException e )
+                    {
+                        throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
+                    }
+                }
+
+                plugin = mappingManager.getByPrefix( prefix );
+            }
+
+            // 3. default to o.a.m.plugins and maven-<prefix>-plugin
+            if ( plugin == null )
+            {
+                plugin = new Plugin();
+                plugin.setGroupId( PluginDescriptor.getDefaultPluginGroupId() );
+                plugin.setArtifactId( PluginDescriptor.getDefaultPluginArtifactId( prefix ) );
-                Plugin plugin = (Plugin) i.next();
+                Plugin buildPlugin = (Plugin) i.next();
-                if ( plugin.getGroupId().equals( groupId ) && plugin.getArtifactId().equals( artifactId ) )
+                if ( buildPlugin.getKey().equals( plugin.getKey() ) )
-                    version = plugin.getVersion();
+                    plugin = buildPlugin;
-            groupId = tok.nextToken();
-            artifactId = tok.nextToken();
-            version = tok.nextToken();
+            plugin = new Plugin();
+            
+            plugin.setGroupId( tok.nextToken() );
+            plugin.setArtifactId( tok.nextToken() );
+            plugin.setVersion( tok.nextToken() );
+
-            String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or" +
-                " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
+            String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or"
+                + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
-                pluginDescriptor = pluginManager.verifyPlugin( groupId, artifactId, version, project,
-                                                               session.getSettings(), session.getLocalRepository() );
+                pluginDescriptor = pluginManager.verifyPlugin( plugin, project, session.getSettings(), session
+                    .getLocalRepository() );
-        injectHandlerPluginConfiguration( project, pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId(),
-                                          pluginDescriptor.getVersion() );
+        injectHandlerPluginConfiguration( project, plugin );
-    private void injectHandlerPluginConfiguration( MavenProject project, String groupId, String artifactId,
-                                                   String version )
+    private void injectHandlerPluginConfiguration( MavenProject project, Plugin plugin )
-        String key = Plugin.constructKey( groupId, artifactId );
-        Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get( key );
+        String key = plugin.getKey();
+        
+        Plugin buildPlugin = (Plugin) project.getBuild().getPluginsAsMap().get( key );
-        if ( plugin == null )
+        if ( buildPlugin == null )
-            plugin = new Plugin();
-            plugin.setGroupId( groupId );
-            plugin.setArtifactId( artifactId );
-            plugin.setVersion( version );
-
-                Plugin def = (Plugin) pluginManagement.getPluginsAsMap().get( key );
-                if ( def != null )
+                Plugin managedPlugin = (Plugin) pluginManagement.getPluginsAsMap().get( key );
+                
+                if ( managedPlugin != null )
-                    modelDefaultsInjector.mergePluginWithDefaults( plugin, def );
+                    modelDefaultsInjector.mergePluginWithDefaults( plugin, managedPlugin );

INS26 INS26 INS26 INS40 INS40 INS40 MOV60 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 INS21 INS25 INS25 INS25 MOV21 MOV21 UPD42 MOV42 UPD42 UPD42 INS7 UPD27 MOV27 INS8 INS27 INS8 INS27 MOV8 MOV21 UPD42 UPD42 INS42 INS32 UPD42 MOV21 MOV21 INS21 INS21 INS42 INS33 INS60 INS25 MOV21 INS42 INS33 INS21 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS7 INS32 INS32 INS32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS33 INS54 UPD42 INS42 INS14 INS42 INS42 MOV32 INS42 INS42 MOV32 UPD42 MOV32 MOV42 MOV32 UPD42 UPD42 UPD43 UPD42 MOV42 INS42 INS42 INS8 INS12 INS12 UPD42 UPD42 INS42 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 INS60 INS60 INS60 MOV21 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 UPD42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL45 DEL42 DEL32 DEL7 DEL42 DEL7 DEL42 DEL7 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL7 DEL42 DEL7 DEL42 DEL7 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21