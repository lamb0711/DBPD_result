Resolving: MNG-95

o Added --fail-fast --fail-at-end --fail-never CLI options, with appropriate summary and exclusion of dependent projects from the build when --fail-at-end is specified. Also, implemented it0046 and it1011 to test it.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@227490 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.ReactorManager;
+import org.apache.maven.reactor.ReactorException;
-    public MavenExecutionResponse execute( MavenSession session, MavenProject project, EventDispatcher dispatcher )
+    public MavenExecutionResponse execute( MavenSession session, ReactorManager rm, EventDispatcher dispatcher )
+        MavenProject project = rm.getTopLevelProject();
+        
-            executeTaskSegments( taskSegments, session, project, dispatcher );
+            executeTaskSegments( taskSegments, rm, session, project, dispatcher );
+            
+            if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) && rm.hasBuildFailures() )
+            {
+                response.setException( new ReactorException( "One or more projects failed to build." ) );
+            }
-    private void executeTaskSegments( List taskSegments, MavenSession session, MavenProject project,
-                                      EventDispatcher dispatcher )
+    private void executeTaskSegments( List taskSegments, ReactorManager rm, MavenSession session, MavenProject project,
+                                     EventDispatcher dispatcher )
-                line();
-
-                getLogger().info( "Building " + project.getName() );
-
-                getLogger().info( "  " + segment );
-
-                line();
-
-                // !! This is ripe for refactoring to an aspect.
-                // Event monitoring.
-                String event = MavenEvents.PROJECT_EXECUTION;
-
-                dispatcher.dispatchStart( event, project.getId() + " ( " + segment + " )" );
-
-                try
+                if ( !rm.isBlackListed( project.getId() ) )
-                    // only call once, with the top-level project (assumed to be provided as a parameter)...
-                    for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                    line();
+
+                    getLogger().info( "Building " + project.getName() );
+
+                    getLogger().info( "  " + segment );
+
+                    line();
+
+                    // !! This is ripe for refactoring to an aspect.
+                    // Event monitoring.
+                    String event = MavenEvents.PROJECT_EXECUTION;
+
+                    dispatcher.dispatchStart( event, project.getId() + " ( " + segment + " )" );
+
+                    try
-                        String task = (String) goalIterator.next();
+                        // only call once, with the top-level project (assumed to be provided as a parameter)...
+                        for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                        {
+                            String task = (String) goalIterator.next();
-                        executeGoal( task, session, project );
+                            try
+                            {
+                                executeGoal( task, session, project );
+                            }
+                            catch ( MojoExecutionException e )
+                            {
+                                handleExecutionFailure( rm, project, e, task );
+                            }
+                            catch ( ArtifactResolutionException e )
+                            {
+                                handleExecutionFailure( rm, project, e, task );
+                            }
+                        }
+
+                        dispatcher.dispatchEnd( event, project.getId() + " ( " + segment + " )" );
+                    catch ( LifecycleExecutionException e )
+                    {
+                        dispatcher.dispatchError( event, project.getId() + " ( " + segment + " )", e );
-                    dispatcher.dispatchEnd( event, project.getId() + " ( " + segment + " )" );
+                        throw e;
+                    }
-                catch ( LifecycleExecutionException e )
+                else
-                    dispatcher.dispatchError( event, project.getId() + " ( " + segment + " )", e );
+                    line();
-                    throw e;
+                    getLogger().info( "SKIPPING " + project.getName() );
+
+                    getLogger().info( "  " + segment );
+                    
+                    getLogger().info( "This project has been banned from further executions due to previous failures." );
+
+                    line();
-                    line();
-
-                    getLogger().info( "Building " + currentProject.getName() );
-
-                    getLogger().info( "  " + segment );
-
-                    line();
-
-                    // !! This is ripe for refactoring to an aspect.
-                    // Event monitoring.
-                    String event = MavenEvents.PROJECT_EXECUTION;
-
-                    dispatcher.dispatchStart( event, currentProject.getId() + " ( " + segment + " )" );
-
-                    try
+                    if ( !rm.isBlackListed( currentProject.getId() ) )
-                        for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                        line();
+
+                        getLogger().info( "Building " + currentProject.getName() );
+
+                        getLogger().info( "  " + segment );
+
+                        line();
+
+                        // !! This is ripe for refactoring to an aspect.
+                        // Event monitoring.
+                        String event = MavenEvents.PROJECT_EXECUTION;
+
+                        dispatcher.dispatchStart( event, currentProject.getId() + " ( " + segment + " )" );
+
+                        try
-                            String task = (String) goalIterator.next();
+                            for ( Iterator goalIterator = segment.getTasks().iterator(); goalIterator.hasNext(); )
+                            {
+                                String task = (String) goalIterator.next();
-                            executeGoal( task, session, currentProject );
+                                try
+                                {
+                                    executeGoal( task, session, currentProject );
+                                }
+                                catch ( MojoExecutionException e )
+                                {
+                                    handleExecutionFailure( rm, project, e, task );
+                                }
+                                catch ( ArtifactResolutionException e )
+                                {
+                                    handleExecutionFailure( rm, project, e, task );
+                                }
+                            }
+
+                            dispatcher.dispatchEnd( event, currentProject.getId() + " ( " + segment + " )" );
+                        catch ( LifecycleExecutionException e )
+                        {
+                            dispatcher.dispatchError( event, currentProject.getId() + " ( " + segment + " )", e );
-                        dispatcher.dispatchEnd( event, currentProject.getId() + " ( " + segment + " )" );
+                            throw e;
+                        }
-                    catch ( LifecycleExecutionException e )
+                    else
-                        dispatcher.dispatchError( event, currentProject.getId() + " ( " + segment + " )", e );
+                        line();
-                        throw e;
+                        getLogger().info( "SKIPPING " + currentProject.getName() );
+
+                        getLogger().info( "  " + segment );
+                        
+                        getLogger().info( "This project has been banned from further executions due to previous failures." );
+
+                        line();
+    private void handleExecutionFailure( ReactorManager rm, MavenProject project, Exception e, String task ) 
+        throws MojoExecutionException, ArtifactResolutionException
+    {
+        if ( ReactorManager.FAIL_FAST.equals( rm.getFailureBehavior() ) )
+        {
+            rm.registerBuildFailure( project, e, task );
+            
+            if ( e instanceof MojoExecutionException )
+            {
+                throw (MojoExecutionException) e;
+            }
+            else if ( e instanceof ArtifactResolutionException )
+            {
+                throw (ArtifactResolutionException) e;
+            }
+            else
+            {
+                getLogger().error( "Attempt to register inappropriate build-failure Exception.", e );
+                
+                throw new IllegalArgumentException( "Inappropriate build-failure Exception: " + e );
+            }
+        }
+        else if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) )
+        {
+            rm.registerBuildFailure( project, e, task );
+            
+            rm.blackList( project.getId() );
+        }
+    }
+

INS26 INS26 INS40 INS40 INS31 INS44 INS44 INS83 INS39 INS42 INS44 MOV44 INS44 INS44 INS43 INS43 INS8 INS43 INS42 INS60 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS32 INS25 INS40 INS42 INS32 INS21 INS25 INS32 INS8 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS32 INS62 INS8 INS25 INS40 INS42 INS32 INS21 INS21 INS42 INS32 INS32 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS53 INS62 INS8 INS8 INS42 INS42 INS32 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS38 MOV8 INS8 INS8 INS42 INS11 INS42 INS43 INS53 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS21 INS21 INS21 INS21 MOV60 INS25 INS43 INS42 INS42 INS11 INS32 INS14 INS42 INS42 INS43 INS45 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS38 MOV8 INS8 INS42 INS43 INS42 INS32 INS42 INS45 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS32 INS42 INS45 INS42 INS32 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS54 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS32 INS42 INS45 INS42 INS8 INS12 INS12 INS42 INS45 INS32 INS42 INS45 INS42 INS42 MOV21 INS44 INS8 INS44 INS8 INS54 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS8 INS12 INS12 INS42 INS32 INS42 INS32 MOV21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42