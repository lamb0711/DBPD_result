simplify the resolveTransitively API, and implement the new collector up to the level of functionality of the original.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191773 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.HashSet;
-        ArtifactResolutionResult result = new ArtifactResolutionResult();
+        return collect( artifacts, originatingArtifact, Collections.EMPTY_SET, localRepository, remoteRepositories,
+                        source, filter, artifactFactory );
+    }
+    public ArtifactResolutionResult collect( Set artifacts, Artifact originatingArtifact, Set managedVersions,
+                                             ArtifactRepository localRepository, List remoteRepositories,
+                                             ArtifactMetadataSource source, ArtifactFilter filter,
+                                             ArtifactFactory artifactFactory )
+        throws ArtifactResolutionException
+    {
-        List queue = new LinkedList();
+        ResolutionNode root = new ResolutionNode( originatingArtifact );
+        root.addDependencies( artifacts, filter );
-        queue.add( artifacts );
+        recurse( root, resolvedArtifacts, localRepository, remoteRepositories, source, filter, artifactFactory );
-        while ( !queue.isEmpty() )
+        Set set = new HashSet();
+
+        for ( Iterator i = resolvedArtifacts.values().iterator(); i.hasNext(); )
-            Set currentArtifacts = (Set) queue.remove( 0 );
-
-            for ( Iterator i = currentArtifacts.iterator(); i.hasNext(); )
+            ResolutionNode node = (ResolutionNode) i.next();
+            if ( node != root )
-                Artifact newArtifact = (Artifact) i.next();
-
-                String id = newArtifact.getDependencyConflictId();
-
-                if ( resolvedArtifacts.containsKey( id ) )
-                {
-                    Artifact knownArtifact = (Artifact) resolvedArtifacts.get( id );
-
-                    String newVersion = newArtifact.getVersion();
-
-                    String knownVersion = knownArtifact.getVersion();
-
-                    if ( !newVersion.equals( knownVersion ) )
-                    {
-                        addConflict( result, knownArtifact, newArtifact );
-                    }
-
-                    // TODO: scope handler
-                    boolean updateScope = false;
-                    if ( Artifact.SCOPE_RUNTIME.equals( newArtifact.getScope() ) &&
-                        Artifact.SCOPE_TEST.equals( knownArtifact.getScope() ) )
-                    {
-                        updateScope = true;
-                    }
-
-                    if ( Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) &&
-                        !Artifact.SCOPE_COMPILE.equals( knownArtifact.getScope() ) )
-                    {
-                        updateScope = true;
-                    }
-
-                    if ( updateScope )
-                    {
-                        Artifact artifact = artifactFactory.createArtifact( knownArtifact.getGroupId(),
-                                                                            knownArtifact.getArtifactId(), knownVersion,
-                                                                            newArtifact.getScope(),
-                                                                            knownArtifact.getType() );
-                        resolvedArtifacts.put( artifact.getDependencyConflictId(), artifact );
-                    }
-                }
-                else
-                {
-                    // ----------------------------------------------------------------------
-                    // It's the first time we have encountered this artifact
-                    // ----------------------------------------------------------------------
-
-                    if ( filter != null && !filter.include( newArtifact ) )
-                    {
-                        continue;
-                    }
-
-                    resolvedArtifacts.put( id, newArtifact );
-
-                    Set referencedDependencies = null;
-
-                    try
-                    {
-                        referencedDependencies = source.retrieve( newArtifact, localRepository, remoteRepositories );
-                    }
-                    catch ( ArtifactMetadataRetrievalException e )
-                    {
-                        throw new TransitiveArtifactResolutionException( e.getMessage(), newArtifact,
-                                                                         remoteRepositories, e );
-                    }
-
-                    // the pom for given dependency exisit we will add it to the
-                    // queue
-                    queue.add( referencedDependencies );
-                }
+                set.add( node.getArtifact() );
-        result.setArtifacts( new HashSet( resolvedArtifacts.values() ) );
+        ArtifactResolutionResult result = new ArtifactResolutionResult();
+
+        result.setArtifacts( set );
-    private void addConflict( ArtifactResolutionResult result, Artifact knownArtifact, Artifact newArtifact )
+    private void recurse( ResolutionNode node, Map resolvedArtifacts, ArtifactRepository localRepository,
+                          List remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter,
+                          ArtifactFactory artifactFactory )
+        throws ArtifactResolutionException
-        List conflicts;
-
-        conflicts = (List) result.getConflicts().get( newArtifact.getDependencyConflictId() );
-
-        if ( conflicts == null )
+        ResolutionNode previous = (ResolutionNode) resolvedArtifacts.get( node.getKey() );
+        if ( previous != null )
-            conflicts = new LinkedList();
+            // TODO: conflict resolvers
-            conflicts.add( knownArtifact );
+            // previous one is more dominant
+            if ( previous.getDepth() <= node.getDepth() )
+            {
+                boolean updateScope = false;
+                Artifact newArtifact = node.getArtifact();
+                Artifact previousArtifact = previous.getArtifact();
-            result.getConflicts().put( newArtifact.getDependencyConflictId(), conflicts );
+                if ( Artifact.SCOPE_RUNTIME.equals( newArtifact.getScope() ) &&
+                    ( Artifact.SCOPE_TEST.equals( previousArtifact.getScope() ) ||
+                        Artifact.SCOPE_PROVIDED.equals( previousArtifact.getScope() ) ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) &&
+                    !Artifact.SCOPE_COMPILE.equals( previousArtifact.getScope() ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( updateScope )
+                {
+                    Artifact artifact = artifactFactory.createArtifact( previousArtifact.getGroupId(),
+                                                                        previousArtifact.getArtifactId(),
+                                                                        previousArtifact.getVersion(),
+                                                                        newArtifact.getScope(),
+                                                                        previousArtifact.getType() );
+                    // TODO: can I just change the scope?
+                    previous.setArtifact( artifact );
+                }
+
+                return;
+            }
+            else
+            {
+                boolean updateScope = false;
+                Artifact previousArtifact = previous.getArtifact();
+                Artifact newArtifact = node.getArtifact();
+
+                if ( Artifact.SCOPE_RUNTIME.equals( previousArtifact.getScope() ) &&
+                    ( Artifact.SCOPE_TEST.equals( newArtifact.getScope() ) ||
+                        Artifact.SCOPE_PROVIDED.equals( newArtifact.getScope() ) ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( Artifact.SCOPE_COMPILE.equals( previousArtifact.getScope() ) &&
+                    !Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) )
+                {
+                    updateScope = true;
+                }
+
+                if ( updateScope )
+                {
+                    Artifact artifact = artifactFactory.createArtifact( newArtifact.getGroupId(),
+                                                                        newArtifact.getArtifactId(),
+                                                                        newArtifact.getVersion(),
+                                                                        previousArtifact.getScope(),
+                                                                        newArtifact.getType() );
+                    // TODO: can I just change the scope?
+                    node.setArtifact( artifact );
+                }
+
+            }
-        conflicts.add( newArtifact );
+        resolvedArtifacts.put( node.getKey(), node );
+
+        for ( Iterator i = node.getChildrenIterator(); i.hasNext(); )
+        {
+            ResolutionNode child = (ResolutionNode) i.next();
+            if ( !child.isResolved() )
+            {
+                try
+                {
+                    Set artifacts = source.retrieve( child.getArtifact(), localRepository, remoteRepositories );
+                    child.addDependencies( artifacts, filter );
+                }
+                catch ( ArtifactMetadataRetrievalException e )
+                {
+                    throw new TransitiveArtifactResolutionException( e.getMessage(), child.getArtifact(),
+                                                                     remoteRepositories, e );
+                }
+
+                recurse( child, resolvedArtifacts, localRepository, remoteRepositories, source, filter,
+                         artifactFactory );
+            }
+        }
+    }
+
+
+    private static class ResolutionNode
+    {
+        private Artifact artifact;
+
+        private final ResolutionNode parent;
+
+        private List children = null;
+
+        private final int depth;
+
+        public ResolutionNode( Artifact artifact )
+        {
+            this.artifact = artifact;
+            this.parent = null;
+            this.depth = 0;
+        }
+
+        public ResolutionNode( Artifact artifact, ResolutionNode parent )
+        {
+            this.artifact = artifact;
+            this.parent = parent;
+            this.depth = parent.depth + 1;
+        }
+
+        public Artifact getArtifact()
+        {
+            return artifact;
+        }
+
+        public Object getKey()
+        {
+            return artifact.getDependencyConflictId();
+        }
+
+        public void addDependencies( Set artifacts, ArtifactFilter filter )
+        {
+            children = new ArrayList( artifacts.size() );
+
+            for ( Iterator i = artifacts.iterator(); i.hasNext(); )
+            {
+                Artifact a = (Artifact) i.next();
+
+                if ( filter == null || filter.include( a ) )
+                {
+                    children.add( new ResolutionNode( a, this ) );
+                }
+            }
+        }
+
+        public boolean isResolved()
+        {
+            return children != null;
+        }
+
+        public Iterator getChildrenIterator()
+        {
+            return children.iterator();
+        }
+
+        public int getDepth()
+        {
+            return depth;
+        }
+
+        public void setArtifact( Artifact artifact )
+        {
+            this.artifact = artifact;
+        }

MOV26 MOV26 INS26 UPD40 INS40 INS31 INS31 INS55 UPD83 MOV83 MOV43 UPD42 MOV42 MOV44 MOV44 MOV44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 MOV43 INS42 MOV44 MOV44 INS44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 UPD83 INS39 UPD42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 MOV8 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS42 UPD42 UPD43 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS41 MOV43 INS42 MOV60 INS60 INS21 INS21 INS60 INS24 MOV60 INS21 MOV41 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS43 MOV59 INS32 INS32 MOV43 INS59 INS58 INS32 INS8 INS32 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS27 MOV8 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS42 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS41 INS42 INS41 INS43 INS42 INS43 INS42 MOV21 INS24 INS41 INS42 INS41 INS41 INS43 INS42 MOV21 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 MOV43 INS59 INS42 INS42 INS60 INS25 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS33 INS42 INS42 INS32 INS42 INS43 INS60 INS25 INS42 INS7 INS7 INS7 INS42 INS42 INS7 INS7 INS7 INS42 MOV32 INS42 INS42 INS58 INS32 INS8 INS27 INS32 INS42 INS42 INS7 INS43 INS42 INS42 MOV32 INS43 INS59 INS27 INS8 INS43 INS32 INS27 MOV60 INS8 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS22 INS42 INS22 INS33 INS22 INS34 INS22 INS42 INS22 INS42 INS22 INS27 UPD42 INS43 INS59 INS42 INS42 MOV60 INS25 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS22 INS42 INS42 MOV32 UPD42 INS42 INS42 INS11 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS41 INS60 INS60 INS60 INS25 MOV25 INS25 UPD42 UPD42 INS42 INS42 INS11 INS32 MOV54 INS21 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS40 INS34 UPD43 INS32 INS42 INS42 INS32 INS27 INS8 INS52 INS42 INS43 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV43 MOV43 INS39 INS59 INS43 INS59 MOV43 INS59 INS27 INS8 INS42 INS8 INS43 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 UPD42 INS27 INS32 MOV21 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS32 UPD42 INS36 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS32 INS36 INS21 INS32 INS21 INS60 MOV21 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS27 INS43 INS42 INS42 INS42 INS42 INS40 UPD42 MOV42 INS32 INS27 INS7 INS40 INS42 INS32 INS7 INS43 INS59 MOV43 INS59 INS32 UPD42 INS14 MOV32 INS32 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS9 INS42 INS42 INS40 UPD42 INS32 INS42 INS9 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS52 INS40 INS42 INS32 UPD42 INS32 INS40 INS42 INS32 INS40 INS42 INS32 MOV42 INS42 INS42 INS42 INS32 INS32 MOV32 INS32 INS32 MOV42 MOV42 INS32 MOV42 MOV42 INS32 INS42 UPD42 INS42 INS42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL18 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL59 DEL60 DEL8 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL61 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL39 DEL43 DEL60 DEL42 DEL32 DEL32 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL27 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31