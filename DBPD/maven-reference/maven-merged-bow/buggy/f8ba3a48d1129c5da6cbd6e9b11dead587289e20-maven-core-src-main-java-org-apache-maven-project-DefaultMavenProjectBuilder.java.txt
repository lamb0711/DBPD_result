merge from branch


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163855 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Build;
-    public MavenProject buildWithDependencies( File project, ArtifactRepository localRepository )
+    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository )
-        return build( project, localRepository, true, true );
+        return buildFromSourceFile( projectDescriptor, localRepository, true );
-    public MavenProject build( File project, ArtifactRepository localRepository )
+    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository )
-        return build( project, localRepository, false, true );
+        return buildFromSourceFile( projectDescriptor, localRepository, false );
-    public MavenProject buildFromRepository( Artifact artifact, ArtifactRepository localRepository )
+    private MavenProject buildFromSourceFile( File projectDescriptor, ArtifactRepository localRepository,
+                                              boolean resolveDependencies )
-        return build( artifact.getFile(), localRepository, false, false );
+        Model model = readModel( projectDescriptor );
+
+        // Always cache files in the source tree over those in the repository
+        modelCache.put( createCacheKey( model.getGroupId(), model.getArtifactId(), model.getVersion() ), model );
+
+        MavenProject project = build( model, localRepository, resolveDependencies );
+
+        // Only translate the base directory for files in the source tree
+        pathTranslator.alignToBaseDirectory( project.getModel(), projectDescriptor );
+
+        Build build = project.getBuild();
+        project.addCompileSourceRoot( build.getSourceDirectory() );
+        project.addScriptSourceRoot( build.getScriptSourceDirectory() );
+        project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
+
+        // Only track the file of a POM in the source tree
+        project.setFile( projectDescriptor );
+
+        return project;
-    private MavenProject build( File projectDescriptor, ArtifactRepository localRepository,
-                                boolean resolveDependencies, boolean sourceProject )
+    public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactRepositories,
+                                             ArtifactRepository localRepository )
+        Model model = findModelFromRepository( artifact, remoteArtifactRepositories, localRepository );
+
+        return build( model, localRepository, false );
+    }
+
+    private Model findModelFromRepository( Artifact artifact, List remoteArtifactRepositories,
+                                           ArtifactRepository localRepository )
+        throws ProjectBuildingException
+    {
+        Model model = getCachedModel( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
+        if ( model == null )
+        {
+            try
+            {
+                artifactResolver.resolve( artifact, remoteArtifactRepositories, localRepository );
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                throw new ProjectBuildingException( "Unable to find artifact: " + artifact.toString() );
+            }
+            model = readModel( artifact.getFile() );
+        }
+        return model;
+    }
+
+    private MavenProject build( Model model, ArtifactRepository localRepository, boolean resolveDependencies )
+        throws ProjectBuildingException
+    {
+        Model superModel = getSuperModel();
+
+        LinkedList lineage = new LinkedList();
+
+        List aggregatedRemoteWagonRepositories = buildArtifactRepositories( superModel.getRepositories() );
+
+        MavenProject project = assembleLineage( model, lineage, aggregatedRemoteWagonRepositories, localRepository );
+
+        Model previous = superModel;
+
+        for ( Iterator i = lineage.iterator(); i.hasNext(); )
+        {
+            Model current = ( (MavenProject) i.next() ).getModel();
+
+            modelInheritanceAssembler.assembleModelInheritance( current, previous );
+
+            previous = current;
+        }
+
-            Model superModel = getSuperModel();
-            
-            LinkedList lineage = new LinkedList();
-
-            List aggregatedRemoteWagonRepositories = buildArtifactRepositories( superModel.getRepositories() );
-            MavenProject project = assembleLineage( projectDescriptor, localRepository, lineage,
-                                                    aggregatedRemoteWagonRepositories );
-
-            Model previous = superModel;
-
-            for ( Iterator i = lineage.iterator(); i.hasNext(); )
-            {
-                Model current = ( (MavenProject) i.next() ).getModel();
-
-                modelInheritanceAssembler.assembleModelInheritance( current, previous );
-
-                previous = current;
-            }
-            
-                                           resolveDependencies, sourceProject );
-
-            return project;
+                                           resolveDependencies );
-        catch ( Exception e )
+        catch ( ModelInterpolationException e )
-            throw new ProjectBuildingException( "Error building project from " + projectDescriptor, e );
+            throw new ProjectBuildingException( "Error building project: " + model.getId(), e );
+        catch ( ArtifactResolutionException e )
+        {
+            throw new ProjectBuildingException( "Error building project: " + model.getId(), e );
+        }
+
+        return project;
+    /**
+     * @todo can this take in a model instead of a project and still be successful?
+     * @todo In fact, does project REALLY need a MavenProject as a parent? Couldn't it have just a wrapper around a
+     * model that supported parents which were also the wrapper so that inheritence was assembled. We don't really need
+     * the resolved source roots, etc for the parent - that occurs for the parent when it is constructed independently
+     * and projects are not cached or reused
+     */
-                                              List remoteRepositories, boolean resolveDependencies,
-                                              boolean sourceProject )
+                                              List remoteRepositories, boolean resolveDependencies )
-        
-        String cacheKey = createCacheKey( model.getGroupId(), model.getArtifactId(), model.getVersion() );
-        
-        // [jc] This needs to be moved below the interpolation and defaults
-        // injection steps, especially since the interpolator returns a different
-        // instance of the Model. HOWEVER, I cannot move this caching step to
-        // the appropriate place, since it results in inconsistent artifact 
-        // naming between the jar:jar and install:install steps for some reason.
-        // 
-        // So, instead I'm commenting out the part of the MavenMetadataSource
-        // that looks up the cached model, and leaving this caching step right
-        // here...at least until I have more time to look at why this cannot be
-        // moved down.
-        Model cachedModel = (Model) modelCache.get( cacheKey );
-        if ( cachedModel == null || sourceProject )
+        String key = createCacheKey( model.getGroupId(), model.getArtifactId(), model.getVersion() );
+        Model cachedModel = (Model) modelCache.get( key );
+        if ( cachedModel == null )
-        File projectDescriptor = project.getFile();
-        if ( sourceProject )
-        {
-            pathTranslator.alignToBaseDirectory( model, projectDescriptor );
-        }
-
-        project.setFile( projectDescriptor );
-        project.addCompileSourceRoot( project.getBuild().getSourceDirectory() );
-        project.addScriptSourceRoot( project.getBuild().getScriptSourceDirectory() );
-        project.addTestCompileSourceRoot( project.getBuild().getTestSourceDirectory() );
-
-    private MavenProject assembleLineage( File projectDescriptor, ArtifactRepository localRepository,
-                                          LinkedList lineage, List aggregatedRemoteWagonRepositories )
-        throws ProjectBuildingException
-    {
-        Model model = readModel( projectDescriptor );
-        MavenProject project = assembleLineage( model, localRepository, lineage, aggregatedRemoteWagonRepositories );
-        project.setFile( projectDescriptor );
-
-        return project;
-
-    }
-
-    private MavenProject assembleLineage( Model model, ArtifactRepository localRepository, LinkedList lineage,
-                                          List aggregatedRemoteWagonRepositories )
+    private MavenProject assembleLineage( Model model, LinkedList lineage, List aggregatedRemoteWagonRepositories,
+                                          ArtifactRepository localRepository )
-            MavenProject parent;
-            Model cachedModel = getCachedModel( parentModel.getGroupId(), parentModel.getArtifactId(),
-                                                parentModel.getVersion() );
-            if ( cachedModel == null )
-            {
-                File parentPom = findParentModel( parentModel, aggregatedRemoteWagonRepositories, localRepository );
+            Artifact artifact = artifactFactory.createArtifact( parentModel.getGroupId(), parentModel.getArtifactId(),
+                                                                parentModel.getVersion(), null, "pom", null );
-                parent = assembleLineage( parentPom, localRepository, lineage, aggregatedRemoteWagonRepositories );
-            }
-            else
-            {
-                parent = assembleLineage( cachedModel, localRepository, lineage, aggregatedRemoteWagonRepositories );
-            }
+            model = findModelFromRepository( artifact, aggregatedRemoteWagonRepositories, localRepository );
+
+            MavenProject parent = assembleLineage( model, lineage, aggregatedRemoteWagonRepositories, localRepository );
+
-                remoteRepoLayout = (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE,
-                                                                                layout );
+                remoteRepoLayout =
+                    (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE, layout );
-                throw new ProjectBuildingException( "Cannot find layout implementation corresponding to: \'" + layout + "\' for remote repository with id: \'" + mavenRepo.getId() + "\'.",
+                throw new ProjectBuildingException( "Cannot find layout implementation corresponding to: \'" + layout +
+                                                    "\' for remote repository with id: \'" + mavenRepo.getId() + "\'.",
-            
+
-        
+
-            
+
-                repositoryLayout = (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE,
-                                                                                layout );
+                repositoryLayout =
+                    (ArtifactRepositoryLayout) container.lookup( ArtifactRepositoryLayout.ROLE, layout );
-                throw new ProjectBuildingException( "Cannot find layout implementation corresponding to: \'" + layout + "\' for remote repository with id: \'" + mavenRepo.getId() + "\'.",
+                throw new ProjectBuildingException( "Cannot find layout implementation corresponding to: \'" + layout +
+                                                    "\' for remote repository with id: \'" + mavenRepo.getId() + "\'.",
-            
-            ArtifactRepository pluginRepository = artifactRepositoryFactory.createArtifactRepository( mavenRepo, settings,
+
+            ArtifactRepository pluginRepository = artifactRepositoryFactory.createArtifactRepository( mavenRepo,
+                                                                                                      settings,
-        
+
-        if(dmRepo == null)
+        if ( dmRepo == null )
-        
+
-            return modelReader.read( reader );
+            Model model = modelReader.read( reader );
+            return model;
-    private File findParentModel( Parent parent, List remoteArtifactRepositories, ArtifactRepository localRepository )
-        throws ProjectBuildingException
-    {
-        Artifact artifact = artifactFactory.createArtifact( parent.getGroupId(), parent.getArtifactId(),
-                                                            parent.getVersion(), null, "pom", null );
-
-        try
-        {
-            artifactResolver.resolve( artifact, remoteArtifactRepositories, localRepository );
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            // @todo use parent.toString() if modello could generate it, or specify in a code segment
-            throw new ProjectBuildingException( "Missing parent POM: " + parent.getGroupId() + ":" +
-                                                parent.getArtifactId() + "-" + parent.getVersion(), e );
-        }
-
-        return artifact.getFile();
-    }
-
-    public Model getCachedModel( String groupId, String artifactId, String version )
+    private Model getCachedModel( String groupId, String artifactId, String version )
-            project = processProjectLogic( project, localRepository, remoteRepositories, false, false );
+            project = processProjectLogic( project, localRepository, remoteRepositories, false );
-}
+}

INS26 MOV31 MOV31 INS40 MOV44 MOV44 UPD83 MOV43 UPD42 MOV44 MOV44 INS44 MOV43 UPD83 MOV43 UPD42 MOV44 MOV44 MOV43 UPD43 UPD42 INS44 MOV8 INS29 UPD83 UPD42 INS39 INS42 MOV60 INS21 INS60 INS21 INS60 INS21 INS21 INS21 MOV21 MOV41 UPD42 INS41 UPD42 UPD43 UPD42 INS25 INS41 UPD43 MOV43 UPD42 MOV42 INS54 INS65 INS65 INS32 MOV43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 MOV43 INS32 UPD42 MOV43 INS27 INS8 INS42 UPD42 MOV43 INS8 INS12 INS12 INS66 INS66 INS66 INS66 INS66 INS43 MOV27 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS9 UPD42 INS42 INS33 MOV54 INS21 MOV21 INS44 INS8 INS44 INS8 UPD42 INS42 MOV42 MOV21 INS60 INS60 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS7 UPD42 INS42 INS43 INS42 INS53 INS43 INS42 INS53 INS43 MOV43 MOV43 INS59 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 MOV32 INS42 INS14 INS42 INS14 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 MOV32 UPD42 INS43 INS27 INS42 MOV43 INS27 INS42 UPD42 INS42 INS33 INS45 INS33 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS45 INS32 INS45 INS32 MOV43 INS42 INS42 INS42 INS42 UPD45 UPD42 UPD42 DEL9 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL45 DEL33 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL9 DEL42 DEL42 DEL32 DEL41 DEL39 DEL42 DEL44 DEL42 DEL42 DEL44 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL39 DEL42 DEL44 DEL27 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL9