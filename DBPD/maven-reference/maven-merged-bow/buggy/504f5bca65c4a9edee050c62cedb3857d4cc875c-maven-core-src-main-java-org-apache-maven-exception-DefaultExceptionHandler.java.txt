[MNG-4186] Provide an exact pointer to documentation specific to each known exception that can occur

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@827792 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.plugin.CycleDetectedInPluginGraphException;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.maven.model.building.ModelProblem;
+import org.apache.maven.plugin.AbstractMojoExecutionException;
-import org.apache.maven.plugin.MojoNotFoundException;
-import org.apache.maven.plugin.PluginDescriptorParsingException;
-import org.apache.maven.plugin.PluginNotFoundException;
-import org.apache.maven.plugin.PluginResolutionException;
-import org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException;
+import org.apache.maven.plugin.PluginExecutionException;
+import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.project.ProjectBuildingResult;
+
-        String message;
-        
-        String reference = "http://";
-        
-        // Plugin problems
-        if ( exception instanceof PluginNotFoundException )
-        {
-            message = exception.getMessage();
-        }
-        else if ( exception instanceof PluginResolutionException )
-        {
-            message = exception.getMessage();           
-        }
-        else if ( exception instanceof PluginDescriptorParsingException )
-        {
-            message = exception.getMessage();           
-        }
-        else if ( exception instanceof CycleDetectedInPluginGraphException )
-        {
-            message = exception.getMessage();           
-        }        
-        else if ( exception instanceof NoPluginFoundForPrefixException )
-        {
-            message = exception.getMessage();                       
-        }
-        
-        // Project dependency downloading problems.
-        else if ( exception instanceof ArtifactNotFoundException )
-        {
-            message = exception.getMessage();
-        }
-        else if ( exception instanceof ArtifactResolutionException )
-        {
-            message = exception.getMessage();
-        }        
-        
-        // Mojo problems
-        else if ( exception instanceof MojoNotFoundException )
-        {
-            message = exception.getMessage();            
-        }        
-        else if ( exception instanceof MojoFailureException )
-        {
-            message = ((MojoFailureException)exception).getLongMessage();
+        return handle( "", exception );
+    }
-            if ( StringUtils.isEmpty( message ) )
-            {
-                message = exception.getMessage();
-            }
-        }
-        else if ( exception instanceof MojoExecutionException )
-        {
-            message = ((MojoExecutionException)exception).getLongMessage();
+    private ExceptionSummary handle( String message, Throwable exception )
+    {
+        String reference = getReference( exception );
-            if ( StringUtils.isEmpty( message ) )
+        List<ExceptionSummary> children = null;
+
+        if ( exception instanceof ProjectBuildingException )
+        {
+            List<ProjectBuildingResult> results = ( (ProjectBuildingException) exception ).getResults();
+
+            children = new ArrayList<ExceptionSummary>();
+
+            for ( ProjectBuildingResult result : results )
-                message = exception.getMessage();
+                ExceptionSummary child = handle( result );
+                if ( child != null )
+                {
+                    children.add( child );
+                }
+
+            message = "The build could not read " + children.size() + " project" + ( children.size() == 1 ? "" : "s" );
-        
-            message = exception.getMessage();
-        }        
-        
-        return new ExceptionSummary( exception, message, reference );
+            message = getMessage( message, exception );
+        }
+
+        return new ExceptionSummary( exception, message, reference, children );
+
+    private ExceptionSummary handle( ProjectBuildingResult result )
+    {
+        List<ExceptionSummary> children = new ArrayList<ExceptionSummary>();
+
+        for ( ModelProblem problem : result.getProblems() )
+        {
+            ExceptionSummary child = handle( problem );
+            if ( child != null )
+            {
+                children.add( child );
+            }
+        }
+
+        if ( children.isEmpty() )
+        {
+            return null;
+        }
+
+        String message =
+            "The project " + result.getProjectId() + " (" + result.getPomFile() + ") has " + children.size() + " error"
+                + ( children.size() == 1 ? "" : "s" );
+
+        return new ExceptionSummary( null, message, null, children );
+    }
+
+    private ExceptionSummary handle( ModelProblem problem )
+    {
+        if ( ModelProblem.Severity.ERROR.compareTo( problem.getSeverity() ) >= 0 )
+        {
+            return handle( problem.getMessage(), problem.getException() );
+        }
+        else
+        {
+            return null;
+        }
+    }
+
+    private String getReference( Throwable exception )
+    {
+        String reference = "";
+
+        if ( exception != null )
+        {
+            if ( exception instanceof MojoExecutionException )
+            {
+                reference = MojoExecutionException.class.getSimpleName();
+            }
+            else if ( exception instanceof MojoFailureException )
+            {
+                reference = MojoFailureException.class.getSimpleName();
+            }
+            else if ( exception instanceof LinkageError )
+            {
+                reference = LinkageError.class.getSimpleName();
+            }
+            else if ( exception instanceof PluginExecutionException )
+            {
+                reference = getReference( exception.getCause() );
+
+                if ( StringUtils.isEmpty( reference ) )
+                {
+                    reference = exception.getClass().getSimpleName();
+                }
+            }
+            else if ( !( exception instanceof RuntimeException ) )
+            {
+                reference = exception.getClass().getSimpleName();
+            }
+        }
+
+        if ( StringUtils.isNotEmpty( reference ) && !reference.startsWith( "http:" ) )
+        {
+            reference = "http://cwiki.apache.org/confluence/display/MAVEN/" + reference;
+        }
+
+        return reference;
+    }
+
+    private String getMessage( String message, Throwable exception )
+    {
+        String fullMessage = ( message != null ) ? message : "";
+
+        for ( Throwable t = exception; t != null; t = t.getCause() )
+        {
+            String exceptionMessage = t.getMessage();
+
+            if ( t instanceof AbstractMojoExecutionException )
+            {
+                String longMessage = ( (AbstractMojoExecutionException) t ).getLongMessage();
+                if ( StringUtils.isNotEmpty( longMessage ) )
+                {
+                    exceptionMessage = longMessage;
+                }
+            }
+
+            if ( t instanceof UnknownHostException && !fullMessage.contains( "host" ) )
+            {
+                if ( fullMessage.length() > 0 )
+                {
+                    fullMessage += ": ";
+                }
+                fullMessage += "Unknown host " + exceptionMessage;
+            }
+            else if ( !fullMessage.contains( exceptionMessage ) )
+            {
+                if ( fullMessage.length() > 0 )
+                {
+                    fullMessage += ": ";
+                }
+                fullMessage += exceptionMessage;
+            }
+        }
+
+        if ( StringUtils.isEmpty( fullMessage ) && exception != null )
+        {
+            fullMessage = exception.toString();
+        }
+
+        return fullMessage.trim();
+    }
+

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 MOV83 MOV43 MOV42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS43 INS42 INS41 INS42 MOV43 INS42 INS43 INS42 MOV60 MOV60 INS25 INS41 UPD42 MOV42 INS43 INS42 INS60 INS70 INS25 INS60 INS41 INS42 INS43 INS42 INS25 UPD42 MOV42 INS60 INS25 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS24 INS25 MOV41 INS42 INS32 INS42 INS74 MOV62 INS8 MOV8 INS14 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS8 INS43 INS59 INS14 INS42 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS43 INS59 INS58 INS27 INS7 INS8 INS27 MOV8 INS32 INS42 INS45 INS42 UPD42 INS32 INS43 INS43 UPD42 INS33 UPD43 INS60 INS21 INS70 INS21 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS41 INS42 INS42 INS27 INS43 INS33 INS42 INS33 INS42 INS32 INS34 INS41 INS41 INS42 INS42 INS45 INS42 INS33 INS25 INS32 INS38 INS21 UPD42 MOV42 INS42 INS16 INS43 INS59 INS42 INS33 UPD42 MOV42 MOV32 INS60 INS25 INS25 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS74 INS59 INS7 INS44 INS42 INS8 INS7 INS42 INS42 INS42 INS74 INS42 MOV43 INS59 INS27 INS8 INS33 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS36 INS42 INS40 INS42 INS32 INS32 INS33 MOV62 MOV8 INS25 INS42 INS42 INS42 INS32 INS7 INS36 INS42 INS45 INS42 INS42 INS42 UPD42 UPD42 INS43 INS59 INS62 MOV8 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS33 INS43 INS43 INS42 INS32 INS42 INS14 INS43 INS42 INS60 INS25 INS42 INS27 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS16 INS42 INS42 INS42 INS32 INS32 MOV62 INS8 INS25 INS42 INS42 INS45 INS42 INS27 INS27 INS42 INS42 INS32 INS42 INS43 INS60 INS62 INS38 INS25 MOV21 INS38 MOV8 UPD42 INS42 INS42 INS36 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS45 INS32 INS45 INS36 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS45 INS45 INS42 INS42 INS42 INS42 INS21 MOV62 MOV8 INS25 INS45 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS59 INS42 INS43 INS32 INS27 INS8 UPD7 INS32 INS25 UPD42 INS11 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS16 INS42 INS42 INS42 INS32 INS34 UPD42 INS7 UPD43 MOV62 INS8 INS25 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS45 INS32 INS34 INS21 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS8 UPD7 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS45 INS45 INS42 INS42 INS57 UPD42 INS42 INS32 UPD42 UPD43 MOV21 INS25 INS38 MOV8 MOV36 MOV42 INS42 INS42 INS7 INS45 INS42 INS32 INS34 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 MOV43 INS57 INS42 UPD42 UPD42 INS32 MOV8 INS36 INS42 INS42 INS42 INS45 INS42 INS42 INS7 INS42 INS42 MOV43 INS57 UPD42 UPD42 INS32 INS42 INS42 INS42 INS62 INS43 INS42 INS42 INS45 INS43 INS42 INS32 MOV42 UPD43 MOV43 UPD42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 INS32 UPD42 MOV42 INS42 MOV42 INS42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL62 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL62 DEL8 DEL42 DEL42 DEL43 DEL62 DEL62 DEL42 DEL43 DEL62 DEL7 DEL21 DEL8 DEL32 DEL25 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL31