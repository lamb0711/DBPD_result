[MNG-4633] Reactor artifact resolution in weave mode

Resolves artifacts from within reactor build.
No longer requires artifacts to be present in local repository before building weave mode ;)

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@935334 13f79535-47bb-0310-9956-ffa450edef68

-        final List<MojoExecution> executions =
-            calculateExecutionPlan( session, project, tasks, requiredDependencyResolutionScopes,
-                                    requiredDependencyCollectionScopes );
+        lifecyclePluginResolver.resolveMissingPluginVersions( project, session );
+
+        final List<MojoExecution> executions = calculateMojoExecutions( session, project, tasks );
+
+        setupMojoExections( session, project, requiredDependencyResolutionScopes, requiredDependencyCollectionScopes,
+                            executions );
+
-        return new MavenExecutionPlan( requiredDependencyResolutionScopes, requiredDependencyCollectionScopes,
-                                       planItem, defaultLifeCycles );
+        return new MavenExecutionPlan( requiredDependencyResolutionScopes, requiredDependencyCollectionScopes, planItem,
+                                       defaultLifeCycles );
-    public List<MojoExecution> calculateExecutionPlan( MavenSession session, MavenProject project, List<Object> tasks,
-                                                       Set<String> requiredDependencyResolutionScopes,
-                                                       Set<String> requiredDependencyCollectionScopes )
-        throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException,
-        PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException,
-        NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
+    private void setupMojoExections( MavenSession session, MavenProject project,
+                                     Set<String> requiredDependencyResolutionScopes,
+                                     Set<String> requiredDependencyCollectionScopes,
+                                     List<MojoExecution> mojoExecutions )
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
+        MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException,
+        LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
-        lifecyclePluginResolver.resolveMissingPluginVersions( project, session );
+        for ( MojoExecution mojoExecution : mojoExecutions )
+        {
+            MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-        List<MojoExecution> mojoExecutions = new ArrayList<MojoExecution>();
+            if ( mojoDescriptor == null )
+            {
+                mojoDescriptor = pluginManager.getMojoDescriptor( mojoExecution.getPlugin(), mojoExecution.getGoal(),
+                                                                  DefaultRepositoryRequest.getRepositoryRequest(
+                                                                      session, project ) );
+
+                mojoExecution.setMojoDescriptor( mojoDescriptor );
+            }
+
+            populateMojoExecutionConfiguration( project, mojoExecution,
+                                                MojoExecution.Source.CLI.equals( mojoExecution.getSource() ) );
+
+            finalizeMojoConfiguration( mojoExecution );
+
+            calculateForkedExecutions( mojoExecution, session, project, new HashSet<MojoDescriptor>() );
+
+            collectDependencyRequirements( requiredDependencyResolutionScopes, requiredDependencyCollectionScopes,
+                                           mojoExecution );
+        }
+    }
+
+    private List<MojoExecution> calculateMojoExecutions( MavenSession session, MavenProject project,
+                                                         List<Object> tasks )
+        throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException,
+        MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,
+        PluginVersionResolutionException, LifecyclePhaseNotFoundException
+    {
+        final List<MojoExecution> mojoExecutions = new ArrayList<MojoExecution>();
-
-        for ( MojoExecution mojoExecution : mojoExecutions )
-        {
-            MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-
-            if ( mojoDescriptor == null )
-            {
-                mojoDescriptor = pluginManager.getMojoDescriptor( mojoExecution.getPlugin(), mojoExecution.getGoal(),
-                                                                  DefaultRepositoryRequest.getRepositoryRequest(
-                                                                      session, project ) );
-
-                mojoExecution.setMojoDescriptor( mojoDescriptor );
-            }
-
-            populateMojoExecutionConfiguration( project, mojoExecution,
-                                                MojoExecution.Source.CLI.equals( mojoExecution.getSource() ) );
-
-            finalizeMojoConfiguration( mojoExecution );
-
-            calculateForkedExecutions( mojoExecution, session, project, new HashSet<MojoDescriptor>() );
-
-            collectDependencyRequirements( requiredDependencyResolutionScopes, requiredDependencyCollectionScopes,
-                                           mojoExecution );
-        }
-

INS31 MOV43 MOV43 INS83 INS39 INS42 INS44 INS44 MOV44 MOV44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS43 MOV43 INS43 INS8 UPD83 UPD42 MOV21 INS60 INS21 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV70 MOV83 MOV74 INS59 INS32 INS42 INS42 INS43 INS43 INS83 MOV42 INS32 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 DEL32 DEL59 DEL60