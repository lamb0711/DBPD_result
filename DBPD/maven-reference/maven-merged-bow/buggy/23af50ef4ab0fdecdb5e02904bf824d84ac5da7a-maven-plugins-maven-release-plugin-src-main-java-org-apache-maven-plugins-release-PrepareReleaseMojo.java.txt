Resolving: MNG-878, MNG-880 (again)

o Added full resolution of plugins listed in the project hierarchy
o Added better resolution of snapshots within the reactor, and resolution of ${finalName}
o Added usage of fully inherited model for release-pom.xml, to enable convergence of all POM inheritance to a single POM with no parent.
o Improved handling of SCM info in a reactored situation.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@290221 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Resource;
+import org.apache.maven.plugin.version.PluginVersionManager;
+import org.apache.maven.plugin.version.PluginVersionResolutionException;
+import org.apache.maven.settings.Settings;
-     * @parameter expression="${component.org.apache.maven.artifact.metadata.ArtifactMetadataSource}"
-     * @required
-     * @readonly
+     * @component role="org.apache.maven.artifact.metadata.ArtifactMetadataSource"
-
+    
+    /**
+     * @component role="org.apache.maven.plugin.version.PluginVersionManager"
+     */
+    private PluginVersionManager pluginVersionManager;
+    
+    
+    /**
+     * @parameter expression="${settings}"
+     * @required
+     * @readonly
+     */
+    private Settings settings;
-            removeReleasePoms();
+//            removeReleasePoms();
-                Model releaseModel = releaseProject.getOriginalModel();
-                fixNullValueInModel( releaseModel, project.getOriginalModel() );
+                Model releaseModel = releaseProject.getModel();
+                fixNullValueInModel( releaseModel, project.getModel() );
-                // Remove parent
-/* TODO: put this back after it is properly resolved again
-                if ( releaseModel.getParent() != null )
+                String projectVersion = releaseModel.getVersion();
+                if ( ArtifactUtils.isSnapshot( projectVersion ) )
-                    releaseModel.setParent( null );
+                    String snapshotVersion = projectVersion;
+                    
+                    projectVersion = getVersionResolver().getResolvedVersion( releaseModel.getGroupId(), releaseModel.getArtifactId() );
+                    
+                    if ( ArtifactUtils.isSnapshot( projectVersion ) )
+                    {
+                        throw new MojoExecutionException( "MAJOR PROBLEM!!! Cannot find resolved version to be used in releasing project: " + releaseProject.getId() );
+                    }
+                    
+                    releaseModel.setVersion( projectVersion );
+                    
+                    String finalName = releaseModel.getBuild().getFinalName();
+                    
+                    if ( finalName.equals( releaseModel.getArtifactId() + "-" + snapshotVersion ) )
+                    {
+                        releaseModel.getBuild().setFinalName( releaseModel.getArtifactId() + "-" + projectVersion );
+                    }
+                    else if ( finalName.indexOf( "SNAPSHOT" ) > -1 )
+                    {
+                        throw new MojoExecutionException( "Cannot reliably adjust the finalName of project: " + releaseProject.getId() );
+                    }
+                
+                releaseModel.setParent( null );
-*/
-
+                        
-                        newdep.setVersion( artifact.getVersion() );
+                        
+                        String version = artifact.getVersion();
+                        if ( artifact.isSnapshot() )
+                        {
+                            version = getVersionResolver().getResolvedVersion(artifact.getGroupId(), artifact.getArtifactId() );
+                            
+                            if ( ArtifactUtils.isSnapshot( version ) )
+                            {
+                                throw new MojoExecutionException( "Unresolved SNAPSHOT version of: " + artifact.getId() + ". Cannot proceed with release." );
+                            }
+                        }
+                        
+                        newdep.setVersion( version );
-                Build originalModel = releaseProject.getOriginalModel().getBuild();
-                List plugins = originalModel != null ? originalModel.getPlugins() : null;
+                Build model = releaseProject.getModel().getBuild();
+                List plugins = model != null ? model.getPlugins() : null;
-                    Map pluginArtifacts = releaseProject.getPluginArtifactMap();
-
-                        Artifact artifact = (Artifact) pluginArtifacts.get( plugin.getKey() );
-
-                        String version = resolveVersion( artifact, "plugin", releaseProject );
+                        String version;
+                        try
+                        {
+                            version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(), project, settings, localRepository );
+                        }
+                        catch ( PluginVersionResolutionException e )
+                        {
+                            throw new MojoExecutionException( "Cannot resolve version for plugin: " + plugin );
+                        }
+                        
+                        if ( ArtifactUtils.isSnapshot(version))
+                        {
+                            throw new MojoExecutionException( "Resolved version of plugin is a snapshot. Please release this plugin before releasing this project.\n\nGroupId: " + plugin.getGroupId() + "\nArtifactId: " + plugin.getArtifactId() + "\nResolved Version: " + version + "\n\n" );
+                        }
-                    Map reportArtifacts = releaseProject.getReportArtifactMap();
-                    
-                    getLog().info( "Using report-artifact map with " + reportArtifacts.size() + " entries." );
-
-                        String pluginKey = plugin.getKey();
+                        String version;
+                        try
+                        {
+                            version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(), plugin
+                                .getArtifactId(), project, settings, localRepository, true );
+                        }
+                        catch ( PluginVersionResolutionException e )
+                        {
+                            throw new MojoExecutionException( "Cannot resolve version for report plugin: " + plugin );
+                        }
-                        getLog().info( "Looking up report artifact for: \'" + pluginKey + "\'" );
-                        
-                        Artifact artifact = (Artifact) reportArtifacts.get( pluginKey );
-
-                        String version = resolveVersion( artifact, "report", releaseProject );
+                        if ( ArtifactUtils.isSnapshot(version))
+                        {
+                            throw new MojoExecutionException( "Resolved version of plugin is a snapshot. Please release this report plugin before releasing this project.\n\nGroupId: " + plugin.getGroupId() + "\nArtifactId: " + plugin.getArtifactId() + "\nResolved Version: " + version + "\n\n" );
+                        }
+                
+                try
+                {
+                    relativizeBuildPaths( model, project.getFile().getParentFile().getCanonicalPath() );
+                }
+                catch ( IOException e )
+                {
+                    throw new MojoExecutionException( "Cannot relativize build paths for: " + project.getId(), e );
+                }
-                    releaseProject.writeOriginalModel( writer );
+                    releaseProject.writeModel( writer );
+    private void relativizeBuildPaths( Build build, String canonicalBasedir )
+    {
+        int basePathLength = canonicalBasedir.length() + 1;
+        
+        String directory = build.getDirectory();
+        if ( directory.startsWith( canonicalBasedir ) )
+        {
+            build.setDirectory( directory.substring( basePathLength ) );
+        }
+        
+        String outDir = build.getOutputDirectory();
+        if ( outDir.startsWith( canonicalBasedir ) )
+        {
+            build.setOutputDirectory( outDir.substring( basePathLength ) );
+        }
+        
+        String testOutDir = build.getTestOutputDirectory();
+        if ( testOutDir.startsWith( canonicalBasedir ) )
+        {
+            build.setTestOutputDirectory( testOutDir.substring( basePathLength ) );
+        }
+        
+        String srcDir = build.getSourceDirectory();
+        if ( srcDir.startsWith( canonicalBasedir ) )
+        {
+            build.setSourceDirectory( srcDir.substring( basePathLength ) );
+        }
+        
+        String scriptSrcDir = build.getScriptSourceDirectory();
+        if ( scriptSrcDir.startsWith( canonicalBasedir ) )
+        {
+            build.setScriptSourceDirectory( scriptSrcDir.substring( basePathLength ) );
+        }
+        
+        String testSrcDir = build.getTestSourceDirectory();
+        if ( testSrcDir.startsWith( canonicalBasedir ) )
+        {
+            build.setTestSourceDirectory( testSrcDir.substring( basePathLength ) );
+        }
+        
+        List resources = build.getResources();
+        if ( resources != null )
+        {
+            for ( Iterator it = resources.iterator(); it.hasNext(); )
+            {
+                Resource resource = (Resource) it.next();
+                
+                String dir = resource.getDirectory();
+                if ( dir.startsWith( canonicalBasedir ) )
+                {
+                    resource.setDirectory( dir.substring( basePathLength ) );
+                }
+            }
+        }
+        
+        List testResources = build.getTestResources();
+        if ( testResources != null )
+        {
+            for ( Iterator it = testResources.iterator(); it.hasNext(); )
+            {
+                Resource resource = (Resource) it.next();
+                
+                String dir = resource.getDirectory();
+                if ( dir.startsWith( canonicalBasedir ) )
+                {
+                    resource.setDirectory( dir.substring( basePathLength ) );
+                }
+            }
+        }
+    }
+
-        getLog().info( "Resolving version for: " + artifact );

INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS29 INS83 MOV43 MOV59 INS29 INS83 INS43 INS59 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS65 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS66 INS66 UPD66 INS42 INS42 INS39 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS42 INS32 INS42 INS33 INS24 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS58 INS32 INS8 INS60 INS25 INS21 INS25 INS25 INS54 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS43 INS59 INS32 INS8 INS32 MOV27 INS8 MOV27 INS8 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS25 INS21 INS60 INS25 INS42 INS42 INS33 UPD42 INS24 INS24 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS21 UPD42 UPD42 INS42 INS42 INS43 INS59 INS7 INS32 INS8 INS32 MOV43 INS59 INS32 INS8 INS25 MOV58 MOV32 INS8 MOV58 MOV32 INS8 INS32 INS43 INS42 INS53 INS43 INS32 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS21 INS27 INS8 INS60 INS25 UPD42 UPD42 UPD42 MOV60 INS60 INS54 INS25 MOV21 MOV60 INS60 INS54 INS25 MOV21 INS42 INS42 INS32 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS14 INS32 INS42 INS32 INS45 INS42 INS32 INS32 INS38 INS53 INS43 INS59 INS32 INS8 MOV43 INS59 INS8 INS12 INS32 INS8 MOV43 INS59 INS8 INS12 INS32 INS8 INS32 UPD42 MOV42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS45 INS34 INS14 INS42 INS42 MOV32 INS42 INS42 INS21 INS25 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS53 MOV42 INS21 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS53 INS32 UPD42 MOV42 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS45 INS42 INS43 INS27 INS7 INS32 INS8 INS7 INS43 INS42 INS53 INS14 INS7 INS43 INS42 INS53 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS32 UPD42 MOV42 INS14 INS43 INS27 INS42 INS32 INS42 INS14 INS43 INS27 INS42 INS42 INS32 INS42 INS32 INS32 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS27 UPD42 MOV42 INS45 INS32 INS45 INS32 INS45 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS43 INS27 INS42 UPD45 MOV45 INS32 INS45 INS32 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD45 MOV45 INS42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS45 INS32 INS45 INS42 INS42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL43 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL45 DEL32 DEL59 DEL60 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL32 DEL27 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL8 DEL24 DEL8 DEL25 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21