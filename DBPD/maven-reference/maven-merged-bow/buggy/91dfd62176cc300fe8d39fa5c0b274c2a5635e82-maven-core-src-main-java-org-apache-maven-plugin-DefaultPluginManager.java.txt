Working on: MNG-377

o Normalized all references to plugins to use either o.a.m.model.Plugin or o.a.m.plugin.PluginDescriptor instances

o Changed DefaultLifecycleExecutor, PluginManager, DefaultPluginManager, MavenPluginCollector, and DoxiaMojo to reflect the above

o Added mapped-plugin resolution of goal prefixes to the DefaultLifecycleExecutor

o Added caching of PluginMappingManager instance inside of MavenSession

o Modified SettingsUtils to be more resistant to null String-Lists for pluginGroups and activeProfiles during merge.

o Added checks to MavenProject.addPlugin(..) to only add if the plugin doesn't already exist in the model.

Next step is to modify installation and deployment process for plugins to publish plugins.xml repository metadata.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@209677 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.ReportPlugin;
-    public String getPluginIdFromPrefix( String prefix )
+    public PluginDescriptor getPluginDescriptorForPrefix( String prefix )
-        return pluginCollector.getPluginIdFromPrefix( prefix );
+        return pluginCollector.getPluginDescriptorForPrefix( prefix );
-
-    public PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenProject project,
-                                          Settings settings, ArtifactRepository localRepository )
+    
+    public PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, Settings settings, 
+                                          ArtifactRepository localRepository )
-        if ( version == null )
+        if ( plugin.getVersion() == null )
-            version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,
-                                                                 localRepository );
+            String groupId = plugin.getGroupId();
+            String artifactId = plugin.getArtifactId();
+            
+            plugin.setVersion( pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,
+                                                                 localRepository ) );
-        if ( !pluginCollector.isPluginInstalled( groupId, artifactId ) )
+        if ( !pluginCollector.isPluginInstalled( plugin ) )
-                Artifact pluginArtifact = artifactFactory.createArtifact( groupId, artifactId, version,
+                Artifact pluginArtifact = artifactFactory.createArtifact( plugin.getGroupId(), 
+                                                                          plugin.getArtifactId(), 
+                                                                          plugin.getVersion(),
-                addPlugin( groupId, artifactId, version, pluginArtifact, project, localRepository );
-    
-                version = pluginArtifact.getBaseVersion();
+                // TODO: [jc; 2005-july-06] what's this for?
+                //plugin.setVersion( pluginArtifact.getBaseVersion() );
+                
+                addPlugin( plugin, pluginArtifact, project, localRepository );
+                
+                project.addPlugin( plugin );
-                    "Error occurred in the artifact container attempting to download plugin " + groupId + ":" +
-                        artifactId, e );
+                    "Error occurred in the artifact container attempting to download plugin " + plugin.getKey(), e );
+                String groupId = plugin.getGroupId();
+                String artifactId = plugin.getArtifactId();
+                String version = plugin.getVersion();
+                
-        return pluginCollector.getPluginDescriptor( groupId, artifactId, version );
+        
+        return pluginCollector.getPluginDescriptor( plugin );
-    protected void addPlugin( String groupId, String artifactId, String version, Artifact pluginArtifact, MavenProject project,
+    protected void addPlugin( Plugin plugin, Artifact pluginArtifact, MavenProject project,
-        String pluginKey = Plugin.constructKey( groupId, artifactId );
-        
-        PlexusContainer child = container.createChildContainer( pluginKey, Collections
+        PlexusContainer child = container.createChildContainer( plugin.getKey(), Collections
-        PluginDescriptor addedPlugin = pluginCollector.getPluginDescriptor( groupId, artifactId, version );
+        PluginDescriptor addedPlugin = pluginCollector.getPluginDescriptor( plugin );
-//    private void releaseComponent( Object component )
-//    {
-//        try
-//        {
-//            container.release( component );
-//        }
-//        catch ( ComponentLifecycleException e )
-//        {
-//            getLogger().error( "Error releasing component - ignoring", e );
-//        }
-//    }
-
-    public List getReports( String groupId, String artifactId, String version, ReportSet reportSet,
-                            MavenSession session, MavenProject project )
-        throws PluginManagerException, PluginVersionResolutionException, PluginConfigurationException
+    public List getReports( ReportPlugin reportPlugin, ReportSet reportSet, MavenProject project,
+                            MavenSession session, ArtifactRepository localRepository )
+        throws PluginManagerException, PluginVersionResolutionException, PluginConfigurationException,
+        ArtifactResolutionException
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( groupId, artifactId, version );
-
+        Plugin forLookup = new Plugin();
+        forLookup.setGroupId( reportPlugin.getGroupId() );
+        forLookup.setArtifactId( reportPlugin.getArtifactId() );
+        forLookup.setVersion( reportPlugin.getVersion() );
+        
+        PluginDescriptor pluginDescriptor = verifyPlugin( forLookup, project, session.getSettings(), localRepository );
+        
-                    Xpp3Dom dom = project.getReportConfiguration( groupId, artifactId, executionId );
+                    Xpp3Dom dom = project.getReportConfiguration( reportPlugin.getGroupId(), reportPlugin.getArtifactId(), executionId );

INS26 INS40 MOV44 MOV44 UPD43 UPD42 INS43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 MOV42 INS60 INS21 INS21 INS21 UPD42 UPD42 UPD42 UPD42 INS43 INS59 INS32 INS32 INS32 UPD42 INS32 INS60 INS60 UPD42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV43 INS59 MOV43 INS59 INS32 UPD42 INS32 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS60 INS60 INS60 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS59 MOV43 INS59 MOV43 INS59 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL44