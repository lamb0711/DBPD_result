implement resolution listener

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@192959 13f79535-47bb-0310-9956-ffa450edef68

-                                             ArtifactFactory artifactFactory )
+                                             ArtifactFactory artifactFactory, List listeners )
-                        source, filter, artifactFactory );
+                        source, filter, artifactFactory, listeners );
-                                             ArtifactFactory artifactFactory )
+                                             ArtifactFactory artifactFactory, List listeners )
-                 artifactFactory );
+                 artifactFactory, listeners );
-                          ArtifactFilter filter, ArtifactFactory artifactFactory )
+                          ArtifactFilter filter, ArtifactFactory artifactFactory, List listeners )
+        fireEvent( ResolutionListener.TEST_ARTIFACT, listeners, node );
+
-            // TODO: apply scope. assign whole artifact, except that the missing bits must be filled in
+
+            fireEvent( ResolutionListener.MANAGE_ARTIFACT, listeners, node, artifact );
+
+            if ( artifact.getScope() != null )
+            {
+                node.getArtifact().setScope( artifact.getScope() );
+            }
-            // TODO: conflict resolvers
+            // TODO: use as conflict resolver(s), chain and introduce version mediation
-                boolean updateScope = false;
-                Artifact newArtifact = node.getArtifact();
-                Artifact previousArtifact = previous.getArtifact();
-
-                if ( Artifact.SCOPE_RUNTIME.equals( newArtifact.getScope() ) &&
-                    ( Artifact.SCOPE_TEST.equals( previousArtifact.getScope() ) ||
-                        Artifact.SCOPE_PROVIDED.equals( previousArtifact.getScope() ) ) )
-                {
-                    updateScope = true;
-                }
-
-                if ( Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) &&
-                    !Artifact.SCOPE_COMPILE.equals( previousArtifact.getScope() ) )
-                {
-                    updateScope = true;
-                }
-
-                if ( updateScope )
-                {
-                    Artifact artifact = artifactFactory.createArtifact( previousArtifact.getGroupId(),
-                                                                        previousArtifact.getArtifactId(),
-                                                                        previousArtifact.getVersion(),
-                                                                        newArtifact.getScope(),
-                                                                        previousArtifact.getType() );
-                    // TODO: can I just change the scope?
-                    previous.setArtifact( artifact );
-                }
-
-                return;
+                checkScopeUpdate( node, previous, artifactFactory, listeners );
-                boolean updateScope = false;
-                Artifact previousArtifact = previous.getArtifact();
-                Artifact newArtifact = node.getArtifact();
+                checkScopeUpdate( previous, node, artifactFactory, listeners );
+            }
-                if ( Artifact.SCOPE_RUNTIME.equals( previousArtifact.getScope() ) &&
-                    ( Artifact.SCOPE_TEST.equals( newArtifact.getScope() ) ||
-                        Artifact.SCOPE_PROVIDED.equals( newArtifact.getScope() ) ) )
-                {
-                    updateScope = true;
-                }
-
-                if ( Artifact.SCOPE_COMPILE.equals( previousArtifact.getScope() ) &&
-                    !Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) )
-                {
-                    updateScope = true;
-                }
-
-                if ( updateScope )
-                {
-                    Artifact artifact = artifactFactory.createArtifact( newArtifact.getGroupId(),
-                                                                        newArtifact.getArtifactId(),
-                                                                        newArtifact.getVersion(),
-                                                                        previousArtifact.getScope(),
-                                                                        newArtifact.getType() );
-                    // TODO: can I just change the scope?
-                    node.setArtifact( artifact );
-                }
-
+            if ( previous.getDepth() <= node.getDepth() )
+            {
+                fireEvent( ResolutionListener.OMIT_FOR_NEARER, listeners, node, previous.getArtifact() );
+                return;
+        fireEvent( ResolutionListener.INCLUDE_ARTIFACT, listeners, node );
+
+        fireEvent( ResolutionListener.PROCESS_CHILDREN, listeners, node );
+
-                         artifactFactory );
+                         artifactFactory, listeners );
+            }
+        }
+
+        fireEvent( ResolutionListener.FINISH_PROCESSING_CHILDREN, listeners, node );
+    }
+
+    private void checkScopeUpdate( ResolutionNode node, ResolutionNode previous, ArtifactFactory artifactFactory,
+                                   List listeners )
+    {
+        boolean updateScope = false;
+        Artifact newArtifact = node.getArtifact();
+        Artifact previousArtifact = previous.getArtifact();
+
+        if ( Artifact.SCOPE_RUNTIME.equals( newArtifact.getScope() ) &&
+            ( Artifact.SCOPE_TEST.equals( previousArtifact.getScope() ) ||
+                Artifact.SCOPE_PROVIDED.equals( previousArtifact.getScope() ) ) )
+        {
+            updateScope = true;
+        }
+
+        if ( Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) &&
+            !Artifact.SCOPE_COMPILE.equals( previousArtifact.getScope() ) )
+        {
+            updateScope = true;
+        }
+
+        if ( updateScope )
+        {
+            fireEvent( ResolutionListener.UPDATE_SCOPE, listeners, previous, newArtifact );
+
+            Artifact artifact = artifactFactory.createArtifact( previousArtifact.getGroupId(),
+                                                                previousArtifact.getArtifactId(),
+                                                                previousArtifact.getVersion(), newArtifact.getScope(),
+                                                                previousArtifact.getType() );
+            // TODO: can I just change the scope?
+            previous.setArtifact( artifact );
+        }
+    }
+
+    private void fireEvent( int event, List listeners, ResolutionNode node )
+    {
+        fireEvent( event, listeners, node, null );
+    }
+
+    private void fireEvent( int event, List listeners, ResolutionNode node, Artifact replacement )
+    {
+        for ( Iterator i = listeners.iterator(); i.hasNext(); )
+        {
+            ResolutionListener listener = (ResolutionListener) i.next();
+
+            switch ( event )
+            {
+                case ResolutionListener.TEST_ARTIFACT:
+                    listener.testArtifact( node.getArtifact() );
+                    break;
+                case ResolutionListener.PROCESS_CHILDREN:
+                    listener.startProcessChildren( node.getArtifact() );
+                    break;
+                case ResolutionListener.FINISH_PROCESSING_CHILDREN:
+                    listener.endProcessChildren( node.getArtifact() );
+                    break;
+                case ResolutionListener.INCLUDE_ARTIFACT:
+                    listener.includeArtifact( node.getArtifact() );
+                    break;
+                case ResolutionListener.OMIT_FOR_NEARER:
+                    listener.omitForNearer( node.getArtifact(), replacement );
+                    break;
+                case ResolutionListener.UPDATE_SCOPE:
+                    listener.updateScope( node.getArtifact(), replacement.getScope() );
+                    break;
+                case ResolutionListener.MANAGE_ARTIFACT:
+                    listener.manageArtifact( node.getArtifact(), replacement );
+                    break;
+                default:
+                    throw new IllegalStateException( "Unknown event: " + event );

INS31 INS31 INS31 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS25 INS21 INS21 MOV21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS21 INS39 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS24 INS42 INS42 INS42 INS32 MOV27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS42 INS40 UPD42 MOV42 MOV42 INS21 INS25 MOV25 INS25 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 UPD42 MOV42 UPD42 INS40 UPD42 UPD42 INS21 INS42 INS42 INS42 INS42 INS33 INS43 INS59 INS42 INS42 INS60 INS50 INS32 INS27 INS8 MOV27 INS8 INS8 UPD27 MOV27 INS8 INS32 INS42 INS42 INS32 INS43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS42 INS40 INS42 INS42 INS42 INS32 INS33 INS21 INS21 INS21 INS32 INS32 INS21 INS41 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS14 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS43 INS27 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL40 DEL32 DEL32 DEL40 DEL32 DEL32 DEL40 DEL32 DEL32 DEL27 DEL36 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL40 DEL42 DEL32 DEL32 DEL40 DEL42 DEL32 DEL32 DEL38 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL41