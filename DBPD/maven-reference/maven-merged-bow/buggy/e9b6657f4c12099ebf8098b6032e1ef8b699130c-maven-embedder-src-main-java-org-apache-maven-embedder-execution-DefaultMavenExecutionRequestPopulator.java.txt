o scrub of the settings building, was able to reduce to the need of the build context and use the execution request
  directly. eventually i will get it to be the session, along with the profile tools, then all the tools can also 
  share a common interpolator, which can then be shared by other components instead of having 5 interpolators lying
  around causing a great deal of inconsistency.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@573494 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.settings.SettingsConfigurationException;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.embedder.Configuration;
+import org.apache.maven.settings.SettingsConfigurationException;
+import org.codehaus.plexus.util.StringUtils;
+import java.io.IOException;
-    implements MavenExecutionRequestPopulator, Contextualizable
+    implements MavenExecutionRequestPopulator,
+    Contextualizable
-                                                   MavenEmbedder embedder )
+                                                   Configuration configuration )
-            File pom = new File( request.getBaseDirectory(), Maven.RELEASE_POMv4 );
+            File pom = new File(
+                request.getBaseDirectory(),
+                Maven.RELEASE_POMv4 );
-                pom = new File( request.getBaseDirectory(), Maven.POMv4 );
+                pom = new File(
+                    request.getBaseDirectory(),
+                    Maven.POMv4 );
+        request.setGlobalSettingsFile( configuration.getGlobalSettingsFile() );
+
+        request.setUserSettingsFile( configuration.getUserSettingsFile() );
+
-                        embedder.getConfiguration().getUserSettingsFile(),
-                        embedder.getConfiguration().getGlobalSettingsFile() ) );
+                        configuration.getUserSettingsFile(),
+                        configuration.getGlobalSettingsFile() ) );
-            catch( Exception e )
+            catch ( Exception e )
-            request.setLocalRepository( embedder.createLocalRepository( request.getSettings() ) );
+            request.setLocalRepository( createLocalRepository( request.getSettings(), configuration ) );
-            throw new MavenEmbedderException( "Unable to configure Maven for execution", e );
+            throw new MavenEmbedderException(
+                "Unable to configure Maven for execution",
+                e );
-        loadSettingsProfiles( globalProfileManager, request.getSettings() );
+        loadSettingsProfiles(
+            globalProfileManager,
+            request.getSettings() );
-                wagonManager.addProxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), proxy.getUsername(),
-                                       proxy.getPassword(), proxy.getNonProxyHosts() );
+                wagonManager.addProxy(
+                    proxy.getProtocol(),
+                    proxy.getHost(),
+                    proxy.getPort(),
+                    proxy.getUsername(),
+                    proxy.getPassword(),
+                    proxy.getNonProxyHosts() );
-                wagonManager.addAuthenticationInfo( server.getId(), server.getUsername(), server.getPassword(),
-                                                    server.getPrivateKey(), server.getPassphrase() );
+                wagonManager.addAuthenticationInfo(
+                    server.getId(),
+                    server.getUsername(),
+                    server.getPassword(),
+                    server.getPrivateKey(),
+                    server.getPassphrase() );
-                wagonManager.addPermissionInfo( server.getId(), server.getFilePermissions(), server.getDirectoryPermissions() );
+                wagonManager.addPermissionInfo(
+                    server.getId(),
+                    server.getFilePermissions(),
+                    server.getDirectoryPermissions() );
-                    wagonManager.addConfiguration( server.getId(), (Xpp3Dom) server.getConfiguration() );
+                    wagonManager.addConfiguration(
+                        server.getId(),
+                        (Xpp3Dom) server.getConfiguration() );
-            
+
-                wagonManager.addMirror( mirror.getId(), mirror.getMirrorOf(), mirror.getUrl() );
+                wagonManager.addMirror(
+                    mirror.getId(),
+                    mirror.getMirrorOf(),
+                    mirror.getUrl() );
-    public void loadSettingsProfiles( ProfileManager profileManager, Settings settings )
+    public void loadSettingsProfiles( ProfileManager profileManager,
+                                      Settings settings )
+    // ----------------------------------------------------------------------
+    // Local Repository
+    // ----------------------------------------------------------------------
+
+    public ArtifactRepository createLocalRepository( Settings settings, Configuration configuration )
+        throws MavenEmbedderException
+    {
+        String localRepositoryPath = null;
+
+        if ( configuration.getLocalRepository() != null )
+        {
+            localRepositoryPath = configuration.getLocalRepository().getAbsolutePath();
+        }
+
+        if ( StringUtils.isEmpty( localRepositoryPath ) )
+        {
+            localRepositoryPath = settings.getLocalRepository();
+        }
+
+        if ( StringUtils.isEmpty( localRepositoryPath ) )
+        {
+            localRepositoryPath = MavenEmbedder.defaultUserLocalRepository.getAbsolutePath();
+        }
+
+        return createLocalRepository(
+            localRepositoryPath,
+            MavenEmbedder.DEFAULT_LOCAL_REPO_ID );
+    }
+
+    public ArtifactRepository createLocalRepository( String url,
+                                                     String repositoryId )
+        throws MavenEmbedderException
+    {
+        try
+        {
+            return createRepository(
+                canonicalFileUrl( url ),
+                repositoryId );
+        }
+        catch ( IOException e )
+        {
+            throw new MavenEmbedderException(
+                "Unable to resolve canonical path for local repository " + url,
+                e );
+        }
+    }
+
+    private String canonicalFileUrl( String url )
+        throws IOException
+    {
+        if ( !url.startsWith( "file:" ) )
+        {
+            url = "file://" + url;
+        }
+        else if ( url.startsWith( "file:" ) && !url.startsWith( "file://" ) )
+        {
+            url = "file://" + url.substring( "file:".length() );
+        }
+
+        // So now we have an url of the form file://<path>
+
+        // We want to eliminate any relative path nonsense and lock down the path so we
+        // need to fully resolve it before any sub-modules use the path. This can happen
+        // when you are using a custom settings.xml that contains a relative path entry
+        // for the local repository setting.
+
+        File localRepository = new File( url.substring( "file://".length() ) );
+
+        if ( !localRepository.isAbsolute() )
+        {
+            url = "file://" + localRepository.getCanonicalPath();
+        }
+
+        return url;
+    }
+
+    public ArtifactRepository createRepository( String url,
+                                                String repositoryId )
+    {
+        // snapshots vs releases
+        // offline = to turning the update policy off
+
+        //TODO: we'll need to allow finer grained creation of repositories but this will do for now
+
+        String updatePolicyFlag = ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS;
+
+        String checksumPolicyFlag = ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN;
+
+        ArtifactRepositoryPolicy snapshotsPolicy =
+            new ArtifactRepositoryPolicy(
+                true,
+                updatePolicyFlag,
+                checksumPolicyFlag );
+
+        ArtifactRepositoryPolicy releasesPolicy =
+            new ArtifactRepositoryPolicy(
+                true,
+                updatePolicyFlag,
+                checksumPolicyFlag );
+
+        return artifactRepositoryFactory.createArtifactRepository(
+            repositoryId,
+            url,
+            defaultArtifactRepositoryLayout,
+            snapshotsPolicy,
+            releasesPolicy );
+    }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 UPD43 UPD42 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS25 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS54 INS42 INS43 INS42 INS42 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS41 UPD42 INS32 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS8 INS32 INS8 INS32 INS42 INS42 INS8 INS12 INS42 INS38 INS8 INS25 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS33 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS42 INS42 INS40 INS41 INS44 INS8 INS32 INS21 INS27 INS8 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS32 INS43 INS42 INS53 INS42 INS42 INS45 INS7 INS32 INS38 INS21 INS43 INS32 INS42 INS42 INS7 INS43 INS9 INS42 INS42 INS43 INS9 INS42 INS42 MOV42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS27 INS42 INS42 INS45 INS32 INS7 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS27 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS42 DEL42 DEL32 DEL42 DEL32