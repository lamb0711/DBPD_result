PR: MNG-505
artifact refactoring to facilitate version ranges



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219616 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.versioning.VersionRange;
-            plugin.setVersion( pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,
-                                                                          localRepository ) );
+            plugin.setVersion(
+                pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings, localRepository ) );
-                Artifact pluginArtifact = artifactFactory.createArtifact( plugin.getGroupId(),
-                                                                          plugin.getArtifactId(),
-                                                                          plugin.getVersion(),
-                                                                          Artifact.SCOPE_RUNTIME,
-                                                                          MojoDescriptor.MAVEN_PLUGIN );
+                VersionRange versionRange = new VersionRange( plugin.getVersion() );
+                Artifact pluginArtifact = artifactFactory.createPluginArtifact( plugin.getGroupId(),
+                                                                                plugin.getArtifactId(), versionRange );
-                // TODO: [jc; 2005-july-06] what's this for?
-                //plugin.setVersion( pluginArtifact.getBaseVersion() );
+                // I think this ensures the plugin is not resolved multiple times
+                // TODO: put it back
+//                plugin.setVersion( pluginArtifact.getBaseVersion() );
-                if (
-                    ( groupId == null || artifactId == null || version == null ||
-                        ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
-                            version.equals( e.getVersion() ) ) ) && "maven-plugin".equals( e.getType() ) )
+                if ( ( groupId == null || artifactId == null || version == null || ( groupId.equals( e.getGroupId() ) &&
+                    artifactId.equals( e.getArtifactId() ) && version.equals( e.getVersion() ) ) ) &&
+                    "maven-plugin".equals( e.getType() ) )
-            .singletonList( pluginArtifact.getFile() ), Collections.EMPTY_MAP, Collections.singletonList( pluginCollector ) );
+            .singletonList( pluginArtifact.getFile() ), Collections.EMPTY_MAP,
+                                                        Collections.singletonList( pluginCollector ) );
-    public List getReports( ReportPlugin reportPlugin, ReportSet reportSet, MavenProject project,
-                            MavenSession session, ArtifactRepository localRepository )
-        throws PluginManagerException, PluginVersionResolutionException, PluginConfigurationException,
-        ArtifactResolutionException
+    public List getReports( ReportPlugin reportPlugin, ReportSet reportSet, MavenProject project, MavenSession session,
+                            ArtifactRepository localRepository )
+        throws PluginManagerException, PluginVersionResolutionException, PluginConfigurationException, ArtifactResolutionException
-                    Xpp3Dom dom = project.getReportConfiguration( reportPlugin.getGroupId(), reportPlugin.getArtifactId(), executionId );
+                    Xpp3Dom dom = project.getReportConfiguration( reportPlugin.getGroupId(),
+                                                                  reportPlugin.getArtifactId(), executionId );
-                MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,
-                                                                              artifactFactory );
+                MavenMetadataSource metadataSource = new MavenMetadataSource( mavenProjectBuilder, artifactFactory );
-                getLogger().debug(
-                    "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" +
-                        mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
+                getLogger().debug( "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" +
+                    mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
-                            getLogger().warn(
-                                "DEPRECATED: using default-value to set the default value of field '" +
-                                    parameter.getName() + "'" );
+                            getLogger().warn( "DEPRECATED: using default-value to set the default value of field '" +
+                                parameter.getName() + "'" );
-        MavenMetadataSource sourceReader = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,
-                                                                    artifactFactory );
+        MavenMetadataSource sourceReader = new MavenMetadataSource( mavenProjectBuilder, artifactFactory );
-        Artifact artifact = artifactFactory.createArtifact( project.getGroupId(), project.getArtifactId(),
-                                                            project.getVersion(), null, project.getPackaging() );
+        Artifact artifact = artifactFactory.createBuildArtifact( project.getGroupId(), project.getArtifactId(),
+                                                                 project.getVersion(), project.getPackaging() );

INS26 INS40 MOV43 MOV43 UPD42 INS60 INS43 INS59 MOV43 INS42 INS42 INS14 INS43 MOV32 UPD42 INS42 MOV43 INS42 DEL40 DEL40 DEL42 DEL42 DEL33