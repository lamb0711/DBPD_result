o delegating local repository implementation that chains the reactor and user local repository
o removal of more state from the WagonManager and pushing it into the request in an attempt to bridge the way for Mercury



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773456 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.artifact.repository.ArtifactRepository;
-    // ----------------------------------------------------------------------
-    // Project execution
-    // ----------------------------------------------------------------------
-
-    // project build
-    // artifact resolution
-    // lifecycle execution
-
-
-        MavenSession session = createMavenSession( request, result );        
+        DelegatingLocalArtifactRepository delegatingLocalArtifactRepository = new DelegatingLocalArtifactRepository();
+        delegatingLocalArtifactRepository.addLocalArtifactRepository( new UserLocalArtifactRepository( request.getLocalRepository() ) ); 
+        request.setLocalRepository( delegatingLocalArtifactRepository );        
+                
+        MavenSession session;
+        
+        Map<String,MavenProject> projects;
+
+        try
+        {
+            projects = getProjects( request );
+
+            //TODO: We really need to get rid of this requirement in here. If we know there is no project present
+            if ( projects.isEmpty() )
+            {
+                MavenProject project = projectBuilder.buildStandaloneSuperProject( request.getProjectBuildingConfiguration() ); 
+                projects.put( ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
+                request.setProjectPresent( false );
+            }
+        }
+        catch ( ProjectBuildingException e )
+        {
+            return processResult( result, e );
+        }
+        catch ( MavenExecutionException e )
+        {
+            return processResult( result, e );
+        }
+        
+        try
+        {                        
+            ProjectSorter projectSorter = new ProjectSorter( projects.values() );
+            
+            session = new MavenSession( container, request, projectSorter.getSortedProjects() );            
+        }
+        catch ( CycleDetectedException e )
+        {            
+            String message = "The projects in the reactor contain a cyclic reference: " + e.getMessage();
+
+            ProjectCycleException error = new ProjectCycleException( message, e );
+
+            return processResult( result, error );
+        }
+        catch ( DuplicateProjectException e )
+        {
+            return processResult( result, e );
+        }
+        
+        delegatingLocalArtifactRepository.addLocalArtifactRepository( new ReactorArtifactRepository( projects ) );
+        
+        if ( result.hasExceptions() )
+        {
+            return result;
+        }        
+
-            ExceptionHandler handler = new DefaultExceptionHandler();
-            
-            // This will only be more then one if we have fail at end on and we collect
-            // them per project.
-            ExceptionSummary es = handler.handleException( e );                        
-         
-            result.addException( e );
-
-            result.setExceptionSummary( es );
-            
-            return result;
+            return processResult( result, e );
-        result.setTopologicallySortedProjects( session.getSortedProjects() );
+        result.setTopologicallySortedProjects( session.getProjects() );
-    public MavenSession createMavenSession( MavenExecutionRequest request, MavenExecutionResult result )
+    private MavenExecutionResult processResult( MavenExecutionResult result, Exception e )
-        MavenSession session;
+        ExceptionHandler handler = new DefaultExceptionHandler();
-        List<MavenProject> projects;
-
-        try
-        {
-            projects = getProjects( request );
-
-            if ( projects.isEmpty() )
-            {
-                projects.add( projectBuilder.buildStandaloneSuperProject( request.getProjectBuildingConfiguration() ) );
-
-                request.setProjectPresent( false );
-            }
-        }
-        catch ( ProjectBuildingException e )
-        {
-            result.addException( e );
-            return null;
-        }
-        catch ( MavenExecutionException e )
-        {
-            result.addException( e );
-            return null;
-        }
-
-        try
-        {                        
-            ProjectSorter projectSorter = new ProjectSorter( projects );
-            
-            session = new MavenSession( container, request, projectSorter.getSortedProjects() );            
-        }
-        catch ( CycleDetectedException e )
-        {
-            String message = "The projects in the reactor contain a cyclic reference: " + e.getMessage();
-
-            ProjectCycleException error = new ProjectCycleException( projects, message, e );
-
-            result.addException( error );
-
-            return null;
-        }
-        catch ( DuplicateProjectException e )
-        {
-            result.addException( e );
-
-            return null;
-        }
-
-        return session;
+        ExceptionSummary es = handler.handleException( e );                        
+     
+        result.addException( e );
+        
+        result.setExceptionSummary( es );    
+        
+        return result;
-
-    protected List<MavenProject> getProjects( MavenExecutionRequest request )
-        throws MavenExecutionException
+    
+    protected Map<String,MavenProject> getProjects( MavenExecutionRequest request )
+        throws MavenExecutionException, ProjectBuildingException
-        List<MavenProject> projects = collectProjects( files, request );
+        Map<String,MavenProject> projects = collectProjects( files, request );
-    private List<MavenProject> collectProjects( List<File> files, MavenExecutionRequest request )
-        throws MavenExecutionException
+    private Map<String,MavenProject> collectProjects( List<File> files, MavenExecutionRequest request )
+        throws MavenExecutionException, ProjectBuildingException
-        List<MavenProject> projects = new ArrayList<MavenProject>();
+        Map<String,MavenProject> projects = new LinkedHashMap<String,MavenProject>();
-            MavenProject project;
-
-            try
-            {
-                project = projectBuilder.build( file, request.getProjectBuildingConfiguration() );
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new MavenExecutionException( "Failed to build MavenProject instance for: " + file, file, e );
-            }
-
+            MavenProject project = projectBuilder.build( file, request.getProjectBuildingConfiguration() );
+            
-                List<MavenProject> collectedProjects = collectProjects( moduleFiles, request );
+                Map<String,MavenProject> collectedProjects = collectProjects( moduleFiles, request );
-                projects.addAll( collectedProjects );
-                
-                project.setCollectedProjects( collectedProjects );
+                projects.putAll( collectedProjects );                
-            projects.add( project );
+            projects.put( ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS43 INS42 UPD83 UPD42 MOV44 MOV44 MOV8 UPD74 INS43 UPD74 INS43 MOV42 MOV25 MOV21 MOV60 INS60 INS21 INS21 INS21 INS25 INS54 INS21 MOV21 MOV41 UPD43 MOV43 UPD42 MOV42 INS43 INS43 UPD43 INS42 UPD43 UPD43 MOV43 INS42 INS43 INS59 INS32 INS32 UPD74 INS32 INS32 INS8 MOV8 INS12 INS32 UPD42 INS42 INS42 UPD42 UPD74 UPD42 UPD42 UPD74 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 UPD43 INS43 INS42 INS42 INS14 INS42 INS42 INS41 INS44 INS8 INS42 INS42 INS32 INS43 INS43 UPD43 UPD43 INS43 MOV43 INS21 INS43 INS43 INS32 UPD42 INS42 INS41 INS41 MOV43 INS41 INS41 INS43 INS42 INS42 INS43 INS42 MOV41 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD74 INS32 INS42 INS42 INS42 INS42 INS60 INS32 INS32 MOV43 INS32 INS32 INS42 INS42 INS32 UPD43 UPD43 MOV43 MOV32 INS42 INS42 INS32 MOV42 INS43 INS59 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 UPD42 UPD42 UPD74 INS42 INS42 INS32 INS32 INS32 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 MOV43 UPD43 INS43 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS32 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL32 DEL21 DEL33 DEL41 DEL32 DEL21 DEL33 DEL41 DEL42 DEL42 DEL32 DEL21 DEL33 DEL41 DEL32 DEL21 DEL33 DEL41 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21