Refactored the bootstrapper to use a proper Model
and inheritance/dependency chains so repositories defined in models
are used for metadata too. Previously they got lost because of all
the cloning.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@420408 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.bootstrap.model.Model;
-import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.ParserConfigurationException;
+
-        ModelReader reader = readModel( resolver, pom, true );
+        Model reader = readModel( resolver, pom, true );
-        for ( Iterator i = reader.getDependencies().iterator(); i.hasNext(); )
+        for ( Iterator i = reader.getAllDependencies().iterator(); i.hasNext(); )
-    private void install( ModelReader reader, File pom, File jar )
+    private void install( Model model, File pom, File jar )
-        String artifactId = reader.getArtifactId();
+        String artifactId = model.getArtifactId();
-        String version = reader.getVersion();
+        String version = model.getVersion();
-        String groupId = reader.getGroupId();
+        String groupId = model.getGroupId();
-        String type = reader.getPackaging();
+        String type = model.getPackaging();
-        installPomFile( reader, pom );
+        installPomFile( model, pom );
-    private void installPomFile( ModelReader reader, File source )
+    private void installPomFile( Model model, File source )
-        String artifactId = reader.getArtifactId();
+        String artifactId = model.getArtifactId();
-        String version = reader.getVersion();
+        String version = model.getVersion();
-        String groupId = reader.getGroupId();
+        String groupId = model.getGroupId();
-        File pom = localRepository.getMetadataFile( groupId, artifactId, version, reader.getPackaging(),
+        File pom = localRepository.getMetadataFile( groupId, artifactId, version, model.getPackaging(),
-        ModelReader reader = readModel( resolver, new File( basedir, "pom.xml" ), false );
+        Model model = readModel( resolver, new File( basedir, "pom.xml" ), false );
-        for ( Iterator i = reader.getModules().iterator(); i.hasNext(); )
+        for ( Iterator i = model.getModules().iterator(); i.hasNext(); )
-        ModelReader reader = readModel( resolver, file, true );
+        Model model = readModel( resolver, file, true );
-        String key = reader.getGroupId() + ":" + reader.getArtifactId() + ":" + reader.getPackaging();
+        String key = model.getGroupId() + ":" + model.getArtifactId() + ":" + model.getPackaging();
-        if ( reader.getPackaging().equals( "pom" ) )
+        if ( model.getPackaging().equals( "pom" ) )
-                for ( Iterator i = reader.getModules().iterator(); i.hasNext(); )
+                for ( Iterator i = model.getModules().iterator(); i.hasNext(); )
-        buildProject( reader );
+        buildProject( model );
-    private File buildProject( ModelReader reader )
+    private File buildProject( Model model )
-        File basedir = reader.getProjectFile().getParentFile();
+        File basedir = model.getProjectFile().getParentFile();
-        for ( Iterator i = reader.getDependencies().iterator(); i.hasNext(); )
+        for ( Iterator i = model.getAllDependencies().iterator(); i.hasNext(); )
-            dep.getRepositories().addAll( reader.getRemoteRepositories() );
+            dep.getRepositories().addAll( model.getRepositories() );
-        resolver.downloadDependencies( reader.getDependencies() );
+        resolver.downloadDependencies( model.getAllDependencies() );
-        if ( reader.getPlugins().containsKey( MODELLO_PLUGIN_ID ) )
+        if ( model.getPlugins().containsKey( MODELLO_PLUGIN_ID ) )
-            Plugin plugin = (Plugin) reader.getPlugins().get( MODELLO_PLUGIN_ID );
+            Plugin plugin = (Plugin) model.getPlugins().get( MODELLO_PLUGIN_ID );
-            File model = new File( basedir, (String) plugin.getConfiguration().get( "model" ) );
+            File modelFile = new File( basedir, (String) plugin.getConfiguration().get( "model" ) );
-            ModelReader pluginReader = readModel( resolver, artifactFile, true );
+            Model pluginReader = readModel( resolver, artifactFile, true );
-            for ( Iterator i = pluginReader.getDependencies().iterator(); i.hasNext(); )
+            for ( Iterator i = pluginReader.getAllDependencies().iterator(); i.hasNext(); )
-            generateModelloSources( model.getAbsolutePath(), "java", generatedSourcesDirectory, modelVersion, "false",
+            generateModelloSources( modelFile.getAbsolutePath(), "java", generatedSourcesDirectory, modelVersion, "false",
-            generateModelloSources( model.getAbsolutePath(), "xpp3-reader", generatedSourcesDirectory, modelVersion,
+            generateModelloSources( modelFile.getAbsolutePath(), "xpp3-reader", generatedSourcesDirectory, modelVersion,
-            generateModelloSources( model.getAbsolutePath(), "xpp3-writer", generatedSourcesDirectory, modelVersion,
+            generateModelloSources( modelFile.getAbsolutePath(), "xpp3-writer", generatedSourcesDirectory, modelVersion,
-        compile( reader.getDependencies(), sources, classes, null, generatedSourcesDirectory, Dependency.SCOPE_COMPILE,
+        compile( model.getAllDependencies(), sources, classes, null, generatedSourcesDirectory, Dependency.SCOPE_COMPILE,
-        File jarFile = createJar( new File( basedir, "pom.xml" ), classes, buildDir, reader );
+        File jarFile = createJar( new File( basedir, "pom.xml" ), classes, buildDir, model );
-        resolver.addBuiltArtifact( reader.getGroupId(), reader.getArtifactId(), "jar", jarFile );
+        resolver.addBuiltArtifact( model.getGroupId(), model.getArtifactId(), "jar", jarFile );
-    private ModelReader readModel( ArtifactResolver resolver, File file, boolean resolveTransitiveDependencies )
+    private Model readModel( ArtifactResolver resolver, File file, boolean resolveTransitiveDependencies )
-        reader.parse( file );
+        Model model = reader.parseModel( file, Collections.EMPTY_LIST );
-        resolver.addBuiltArtifact( reader.getGroupId(), reader.getArtifactId(), "pom", file );
+        resolver.addBuiltArtifact( model.getGroupId(), model.getArtifactId(), "pom", file );
-        String id = reader.getGroupId() + ":" + reader.getArtifactId();
+        String id = model.getGroupId() + ":" + model.getArtifactId();
-        modelCache.put( id, reader );
+        modelCache.put( id, model );
-        return reader;
+        return model;
-    private File createJar( File pomFile, String classes, String buildDir, ModelReader reader )
+    private File createJar( File pomFile, String classes, String buildDir, Model reader )
-    public ModelReader getCachedModel( String groupId, String artifactId )
+    public Model getCachedModel( String groupId, String artifactId )
-        return (ModelReader) modelCache.get( groupId + ":" + artifactId );
+        return (Model) modelCache.get( groupId + ":" + artifactId );

MOV26 INS26 INS40 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 INS60 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 INS43 INS59 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL32 DEL21