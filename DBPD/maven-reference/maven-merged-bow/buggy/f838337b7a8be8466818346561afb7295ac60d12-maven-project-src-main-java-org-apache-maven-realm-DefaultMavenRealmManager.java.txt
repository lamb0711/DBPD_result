Refactor the artifact-scanning logic from the realm manager and the plugin-artifact resolution logic in the plugin manager into two separate classes, one a component and one a static class, to allow the new PluginPrefixLoader to reuse some of both and create a lighter-weight approach to grabbing the PluginDescriptor for build-planning purposes...also avoids some needless error messages during build planning.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@617293 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.component.discovery.ComponentDiscovererManager;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryEvent;
-import org.codehaus.plexus.component.discovery.ComponentDiscoveryListener;
-import org.codehaus.plexus.configuration.PlexusConfigurationException;
-        ClassWorld discoveryWorld = new ClassWorld();
-        List componentSetDescriptors;
-        try
+        ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();
+        discoverer.setManager( RealmScanningUtils.getDummyComponentDiscovererManager() );
+
+        List componentSetDescriptors = RealmScanningUtils.scanForComponentSetDescriptors( extensionArtifact, discoverer, container.getContext(), extensionRealmId );
+
+        ClassRealm realm = getProjectRealm( projectGroupId, projectArtifactId, projectVersion, true );
+
+        for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
-            // Create an entire new ClassWorld, ClassRealm for discovering
-            // the immediate components of the extension artifact, so we don't pollute the
-            // container with component descriptors or realms that don't have any meaning beyond discovery.
-            ClassRealm discoveryRealm;
-            try
+            ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();
+            for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )
-                discoveryRealm = discoveryWorld.newRealm( "discovery: " + extensionRealmId );
-            }
-            catch ( DuplicateRealmException e )
-            {
-                throw new RealmManagementException( extensionRealmId, "Unable to create temporary ClassRealm for local-component discovery.", e );
-            }
+                // For each component in the extension artifact:
+                ComponentDescriptor comp = (ComponentDescriptor) compIt.next();
+                String implementation = comp.getImplementation();
-            try
-            {
-                discoveryRealm.addURL( extensionArtifact.getFile().toURL() );
-            }
-            catch ( MalformedURLException e )
-            {
-                throw new RealmManagementException( extensionRealmId, extensionArtifact, "Unable to generate URL from extension artifact file: " + extensionArtifact.getFile() + " for local-component discovery.", e );
-            }
-
-            ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();
-            discoverer.setManager( new DummyDiscovererManager() );
-
-            try
-            {
-                // Find the extension component descriptors that exist ONLY in the immediate extension
-                // artifact...this prevents us from adding plexus-archiver components to the mix, for instance,
-                // when the extension uses that dependency.
-                componentSetDescriptors = discoverer.findComponents( container.getContext(), discoveryRealm );
-            }
-            catch ( PlexusConfigurationException e )
-            {
-                throw new RealmManagementException( extensionRealmId, "Unable to discover components in extension artifact: " + extensionArtifact.getId(), e );
-            }
-
-            ClassRealm realm = getProjectRealm( projectGroupId, projectArtifactId, projectVersion, true );
-
-            for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
-            {
-                ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();
-                for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )
-                {
-                    // For each component in the extension artifact:
-                    ComponentDescriptor comp = (ComponentDescriptor) compIt.next();
-                    String implementation = comp.getImplementation();
-
-                    try
-                    {
-                        logger.debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealmId + "\nto project realm: " + realm.getId() );
-
-                        // Import the extension component's implementation class into the project-level
-                        // realm.
-                        realm.importFrom( extensionRealmId, implementation );
-
-                        // Set the realmId to be used in looking up this extension component to the
-                        // project-level realm, since we now have a restricted import
-                        // that allows most of the extension to stay hidden, and the
-                        // specific local extension components are still accessible
-                        // from the project-level realm.
-                        comp.setRealmId( realm.getId() );
-
-                        // Finally, add the extension component's descriptor (with projectRealm
-                        // set as the lookup realm) to the container.
-                        container.addComponentDescriptor( comp );
-                    }
-                    catch ( NoSuchRealmException e )
-                    {
-                        throw new RealmManagementException( extensionRealmId, "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealmId + " to project realm: " + realm.getId(), e );
-                    }
-                    catch ( ComponentRepositoryException e )
-                    {
-                        String projectId = RealmUtils.createProjectId( projectGroupId, projectArtifactId, projectVersion );
-                        throw new RealmManagementException( extensionRealmId, "Unable to discover components from imports to project: " + projectId + " from extension artifact: " + extensionArtifact.getId(), e );
-                    }
-                }
-            }
-        }
-        finally
-        {
-            Collection realms = discoveryWorld.getRealms();
-            for ( Iterator it = realms.iterator(); it.hasNext(); )
-            {
-                ClassRealm realm = (ClassRealm) it.next();
-                    discoveryWorld.disposeRealm( realm.getId() );
+                    logger.debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealmId + "\nto project realm: " + realm.getId() );
+
+                    // Import the extension component's implementation class into the project-level
+                    // realm.
+                    realm.importFrom( extensionRealmId, implementation );
+
+                    // Set the realmId to be used in looking up this extension component to the
+                    // project-level realm, since we now have a restricted import
+                    // that allows most of the extension to stay hidden, and the
+                    // specific local extension components are still accessible
+                    // from the project-level realm.
+                    comp.setRealmId( realm.getId() );
+
+                    // Finally, add the extension component's descriptor (with projectRealm
+                    // set as the lookup realm) to the container.
+                    container.addComponentDescriptor( comp );
+                    throw new RealmManagementException( extensionRealmId, "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealmId + " to project realm: " + realm.getId(), e );
+                }
+                catch ( ComponentRepositoryException e )
+                {
+                    String projectId = RealmUtils.createProjectId( projectGroupId, projectArtifactId, projectVersion );
+                    throw new RealmManagementException( extensionRealmId, "Unable to discover components from imports to project: " + projectId + " from extension artifact: " + extensionArtifact.getId(), e );
-
-    private static final class DummyDiscovererManager implements ComponentDiscovererManager
-    {
-
-        public void fireComponentDiscoveryEvent( ComponentDiscoveryEvent arg0 )
-        {
-        }
-
-        public List getComponentDiscoverers()
-        {
-            return null;
-        }
-
-        public Map getComponentDiscoveryListeners()
-        {
-            return null;
-        }
-
-        public List getListeners()
-        {
-            return null;
-        }
-
-        public void initialize()
-        {
-        }
-
-        public void registerComponentDiscoveryListener( ComponentDiscoveryListener l )
-        {
-        }
-
-        public void removeComponentDiscoveryListener( ComponentDiscoveryListener l )
-        {
-        }
-
-    }
-

MOV8 MOV60 MOV25 MOV21 INS60 MOV43 INS59 UPD42 UPD42 MOV32 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 MOV42 MOV32 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL32 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL54 DEL8 DEL83 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL55