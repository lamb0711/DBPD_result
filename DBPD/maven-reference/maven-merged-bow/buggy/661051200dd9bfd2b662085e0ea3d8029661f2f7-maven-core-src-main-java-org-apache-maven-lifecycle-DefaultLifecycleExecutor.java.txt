no root project in reactor

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@291251 13f79535-47bb-0310-9956-ffa450edef68

-    private void executeTaskSegments( List taskSegments, ReactorManager rm, MavenSession session, MavenProject project,
-                                      EventDispatcher dispatcher )
+    private void executeTaskSegments( List taskSegments, ReactorManager rm, MavenSession session,
+                                      MavenProject rootProject, EventDispatcher dispatcher )
-                if ( !rm.isBlackListed( project ) )
+                if ( !rm.isBlackListed( rootProject ) )
-                    getLogger().info( "Building " + project.getName() );
+                    getLogger().info( "Building " + rootProject.getName() );
-                    dispatcher.dispatchStart( event, project.getId() + " ( " + segment + " )" );
+                    dispatcher.dispatchStart( event, rootProject.getId() + " ( " + segment + " )" );
-                                executeGoal( task, session, project );
+                                executeGoal( task, session, rootProject );
-                                handleExecutionFailure( rm, project, e, task );
+                                handleExecutionFailure( rm, rootProject, e, task );
-                                handleExecutionFailure( rm, project, e, task );
+                                handleExecutionFailure( rm, rootProject, e, task );
-                        dispatcher.dispatchEnd( event, project.getId() + " ( " + segment + " )" );
+                        dispatcher.dispatchEnd( event, rootProject.getId() + " ( " + segment + " )" );
-                        dispatcher.dispatchError( event, project.getId() + " ( " + segment + " )", e );
+                        dispatcher.dispatchError( event, rootProject.getId() + " ( " + segment + " )", e );
-                    getLogger().info( "SKIPPING " + project.getName() );
+                    getLogger().info( "SKIPPING " + rootProject.getName() );
-                                    handleExecutionFailure( rm, project, e, task );
+                                    handleExecutionFailure( rm, currentProject, e, task );
-                                    handleExecutionFailure( rm, project, e, task );
+                                    handleExecutionFailure( rm, currentProject, e, task );
-        TaskSegment currentSegment = null;
-        for ( Iterator it = tasks.iterator(); it.hasNext(); )
+        if ( project != null )
-            String task = (String) it.next();
-            // if it's a phase, then we don't need to check whether it's an aggregator.
-            // simply add it to the current task partition.
-            if ( phases.contains( task ) )
+            TaskSegment currentSegment = null;
+            for ( Iterator it = tasks.iterator(); it.hasNext(); )
-                if ( currentSegment != null && currentSegment.aggregate() )
-                {
-                    segments.add( currentSegment );
-                    currentSegment = null;
-                }
+                String task = (String) it.next();
-                if ( currentSegment == null )
-                {
-                    currentSegment = new TaskSegment();
-                }
-
-                currentSegment.add( task );
-            }
-            else
-            {
-                MojoDescriptor mojo = null;
-                try
-                {
-                    // definitely a CLI goal, can use prefix
-                    mojo = getMojoDescriptor( task, session, project, task, true );
-                }
-                catch ( LifecycleExecutionException e )
-                {
-                    getLogger().info(
-                        "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
-                    getLogger().debug( "", e );
-                }
-                catch ( ArtifactResolutionException e )
-                {
-                    getLogger().info(
-                        "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
-                    getLogger().debug( "", e );
-                }
-
-                // if the mojo descriptor was found, determine aggregator status according to:
-                // 1. whether the mojo declares itself an aggregator
-                // 2. whether the mojo DOES NOT require a project to function (implicitly avoid reactor)
-                if ( mojo != null && ( mojo.isAggregator() || !mojo.isProjectRequired() ) )
-                {
-                    if ( currentSegment != null && !currentSegment.aggregate() )
-                    {
-                        segments.add( currentSegment );
-                        currentSegment = null;
-                    }
-
-                    if ( currentSegment == null )
-                    {
-                        currentSegment = new TaskSegment( true );
-                    }
-
-                    currentSegment.add( task );
-                }
-                else
+                // if it's a phase, then we don't need to check whether it's an aggregator.
+                // simply add it to the current task partition.
+                if ( phases.contains( task ) )
+                else
+                {
+                    MojoDescriptor mojo = null;
+                    try
+                    {
+                        // definitely a CLI goal, can use prefix
+                        mojo = getMojoDescriptor( task, session, project, task, true );
+                    }
+                    catch ( LifecycleExecutionException e )
+                    {
+                        getLogger().info(
+                            "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
+                        getLogger().debug( "", e );
+                    }
+                    catch ( ArtifactResolutionException e )
+                    {
+                        getLogger().info(
+                            "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator." );
+                        getLogger().debug( "", e );
+                    }
+
+                    // if the mojo descriptor was found, determine aggregator status according to:
+                    // 1. whether the mojo declares itself an aggregator
+                    // 2. whether the mojo DOES NOT require a project to function (implicitly avoid reactor)
+                    if ( mojo != null && ( mojo.isAggregator() || !mojo.isProjectRequired() ) )
+                    {
+                        if ( currentSegment != null && !currentSegment.aggregate() )
+                        {
+                            segments.add( currentSegment );
+                            currentSegment = null;
+                        }
+
+                        if ( currentSegment == null )
+                        {
+                            currentSegment = new TaskSegment( true );
+                        }
+
+                        currentSegment.add( task );
+                    }
+                    else
+                    {
+                        if ( currentSegment != null && currentSegment.aggregate() )
+                        {
+                            segments.add( currentSegment );
+                            currentSegment = null;
+                        }
+
+                        if ( currentSegment == null )
+                        {
+                            currentSegment = new TaskSegment();
+                        }
+
+                        currentSegment.add( task );
+                    }
+                }
+            }
+
+            segments.add( currentSegment );
+        }
+        else
+        {
+            TaskSegment segment = new TaskSegment( false );
+            for ( Iterator i = tasks.iterator(); i.hasNext(); )
+            {
+                segment.add( (String) i.next() );
-        segments.add( currentSegment );
-

INS8 UPD42 MOV60 INS25 MOV41 INS27 MOV8 INS8 INS42 INS33 INS60 INS24 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS21 INS43 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS11 UPD42 INS43 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42