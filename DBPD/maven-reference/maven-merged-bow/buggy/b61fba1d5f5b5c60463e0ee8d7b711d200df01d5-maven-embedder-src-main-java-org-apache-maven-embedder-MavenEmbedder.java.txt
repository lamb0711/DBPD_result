Implemented embedder extensions. You can register a set of URLs that
are scanned for components, after the container is started, that
will override any core components defined.

o Updated (Default)MavenEmbedRequest with a getter/setter for the extension list;

o Updated the MavenEmbedder to scan the extensions.

o Added testcase: dummy component implementation and components.xml to specify
  the override. 
  
o Also added pom.properties since running unit tests in an IDE
  will fail because the pom.properties is generated only inside the archive,
  and with project references inside the IDE that resource is not available.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@496904 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.MutablePlexusContainer;
+import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;
+import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
+import org.codehaus.plexus.component.repository.exception.ComponentRepositoryException;
+import java.net.URL;
+import java.util.Iterator;
-    private PlexusContainer container;
+    private MutablePlexusContainer container;
-        
+
+            handleExtensions( req.getExtensions() );
+
+    private void handleExtensions( List extensions )
+        throws MavenEmbedderException
+    {
+        ClassRealm childRealm;
+        try
+        {
+            childRealm = container.getContainerRealm().createChildRealm( "embedder-extensions" );
+        }
+        catch ( DuplicateRealmException e1 )
+        {
+            try
+            {
+                childRealm = classWorld.getRealm( "embedder-extensions" );
+            }
+            catch ( NoSuchRealmException e )
+            {
+                throw new MavenEmbedderException( "Cannot create realm 'extensions'", e );
+            }
+        }
+
+        for ( Iterator it = extensions.iterator(); it.hasNext(); )
+        {
+            childRealm.addURL( (URL) it.next() );
+        }
+
+        try
+        {
+            container.discoverComponents( childRealm, true );
+        }
+        catch ( PlexusConfigurationException e )
+        {
+            throw new MavenEmbedderException( "Configuration error while discovering extension components", e );
+        }
+        catch ( ComponentRepositoryException e )
+        {
+            throw new MavenEmbedderException( "Component repository error while discovering extension components", e );
+        }
+    }
+

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS31 UPD43 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 INS43 INS42 INS42 INS60 INS54 INS24 INS54 INS42 INS43 INS59 INS8 INS12 INS58 INS32 INS8 INS8 INS12 INS12 INS21 INS42 INS42 INS21 INS44 INS8 INS43 INS59 INS42 INS42 INS21 INS21 INS44 INS8 INS44 INS8 INS32 INS7 INS43 INS42 INS54 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS32 INS42 INS32 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS9 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS45 INS21 INS44 INS8 INS43 INS32 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS45 INS43 INS45 INS42 INS42