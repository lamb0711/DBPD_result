Cleaning up exception wrapping to allow better reporting of errors to end users. Also implementing the beginnings of a new error reporter, and bumping the version of plexus-container-default up to 1.0-alpha-33-SNAPSHOT to improve the accessibility to ClassRealm info for ComponentLookupException.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@584343 13f79535-47bb-0310-9956-ffa450edef68

-        ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException,
+        ArtifactNotFoundException, InvalidPluginException,
-        ArtifactResolutionException, InvalidVersionSpecificationException, InvalidPluginException,
+        ArtifactResolutionException, InvalidPluginException,
-        ArtifactResolutionException, InvalidVersionSpecificationException, InvalidPluginException,
+        ArtifactResolutionException, InvalidPluginException,
-                VersionRange versionRange = VersionRange.createFromVersionSpec( plugin.getVersion() );
+                VersionRange versionRange;
+                try
+                {
+                    versionRange = VersionRange.createFromVersionSpec( plugin.getVersion() );
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+                    throw new PluginManagerException( plugin, e );
+                }
-                throw new PluginNotFoundException( e );
+                throw new PluginNotFoundException( plugin, e );
-                throw new PluginNotFoundException( e );
+                throw new PluginNotFoundException( plugin, e );
+            String parentRealmId = componentRealm.getParentRealm().getId();
+
-            componentRealm.importFrom( componentRealm.getParentRealm().getId(),
-                                       Xpp3Dom.class.getName() );
-            componentRealm.importFrom( componentRealm.getParentRealm().getId(),
-                                       "org.codehaus.plexus.util.xml.pull" );
+            componentRealm.importFrom( parentRealmId, Xpp3Dom.class.getName() );
+            componentRealm.importFrom( parentRealmId, "org.codehaus.plexus.util.xml.pull" );
-            componentRealm.importFrom( componentRealm.getParentRealm().getId(), "/default-report.xml" );
+            componentRealm.importFrom( parentRealmId, "/default-report.xml" );
-            throw new PluginManagerException( "Failed to create realm for plugin '" + projectPlugin
+            throw new PluginContainerException( plugin, componentRealm, "Failed to create realm for plugin '" + projectPlugin
-            throw new PluginManagerException(
-                                              "Failed to import Xpp3Dom from parent realm for plugin: '"
+            throw new PluginContainerException( plugin, componentRealm,
+                                              "Failed to import Xpp3Dom from core realm for plugin: '"
-        ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException,
+        ArtifactNotFoundException, InvalidPluginException,
-        try
+        ClassRealm realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+
+        // We are forcing the use of the plugin realm for all lookups that might occur during
+        // the lifecycle that is part of the lookup. Here we are specifically trying to keep
+        // lookups that occur in contextualize calls in line with the right realm.
+
+        if ( realm != null )
-            ClassRealm realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
+            ClassRealm oldRealm = container.setLookupRealm( realm );
-            // We are forcing the use of the plugin realm for all lookups that might occur during
-            // the lifecycle that is part of the lookup. Here we are specifically trying to keep
-            // lookups that occur in contextualize calls in line with the right realm.
+            getLogger().debug(
+                               "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm "
+                                               + realm.getId() + " - descRealmId="
+                                               + mojoDescriptor.getRealmId() );
-            if ( realm != null )
+            try
-                ClassRealm oldRealm = container.setLookupRealm( realm );
-
-                getLogger().debug(
-                                   "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm "
-                                                   + realm.getId() + " - descRealmId="
-                                                   + mojoDescriptor.getRealmId() );
-
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new PluginContainerException( mojoDescriptor, realm, "Unable to find the mojo '"
+                                                  + mojoDescriptor.getRoleHint() + "' in the plugin '"
+                                                  + pluginDescriptor.getPluginLookupKey() + "'", e );
+            }
-                if ( plugin != null )
-                {
-                    getLogger().debug(
-                                       "Looked up - " + plugin + " - "
-                                                       + plugin.getClass().getClassLoader() );
-                }
-                else
-                {
-                    getLogger().warn( "No luck." );
-                }
-
-                container.setLookupRealm( oldRealm );
+            if ( plugin != null )
+            {
+                getLogger().debug(
+                                   "Looked up - " + plugin + " - "
+                                                   + plugin.getClass().getClassLoader() );
-                getLogger().info(
-                                  "Looking up mojo " + mojoDescriptor.getRoleHint()
-                                                  + " in default realm "
-                                                  + container.getLookupRealm() + " - descRealmId="
-                                                  + mojoDescriptor.getRealmId() );
-
-                plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
-
-                if ( plugin != null )
-                {
-                    getLogger().info(
-                                      "Looked up - " + plugin + " - "
-                                                      + plugin.getClass().getClassLoader() );
-                }
-                else
-                {
-                    getLogger().warn( "No luck." );
-                }
-
+                getLogger().warn( "No luck." );
-            if ( report && !( plugin instanceof MavenReport ) )
-            {
-                // TODO: the mojoDescriptor should actually capture this information so we don't get this far
-                return null;
-            }
+            container.setLookupRealm( oldRealm );
-        catch ( ComponentLookupException e )
+        else
-            throw new PluginManagerException( "Unable to find the mojo '"
-                                              + mojoDescriptor.getRoleHint() + "' in the plugin '"
-                                              + pluginDescriptor.getPluginLookupKey() + "'", e );
+            getLogger().info(
+                              "Looking up mojo " + mojoDescriptor.getRoleHint()
+                                              + " in default realm "
+                                              + container.getLookupRealm() + " - descRealmId="
+                                              + mojoDescriptor.getRealmId() );
+
+            try
+            {
+                plugin = (Mojo) container.lookup( Mojo.ROLE, mojoDescriptor.getRoleHint() );
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new PluginContainerException( mojoDescriptor, container.getContainerRealm(), "Unable to find the mojo '"
+                                                  + mojoDescriptor.getRoleHint() + "' in the plugin '"
+                                                  + pluginDescriptor.getPluginLookupKey() + "' (using core class realm)", e );
+            }
+
+            if ( plugin != null )
+            {
+                getLogger().info(
+                                  "Looked up - " + plugin + " - "
+                                                  + plugin.getClass().getClassLoader() );
+            }
+            else
+            {
+                getLogger().warn( "No luck." );
+            }
+
+        }
+
+        if ( report && !( plugin instanceof MavenReport ) )
+        {
+            // TODO: the mojoDescriptor should actually capture this information so we don't get this far
+            return null;

MOV8 MOV60 MOV60 MOV60 MOV25 MOV21 MOV60 MOV25 MOV21 MOV60 MOV60 MOV25 MOV60 MOV60 MOV21 MOV21 MOV41 INS60 INS54 INS54 INS43 INS59 INS8 INS12 INS8 INS12 INS54 INS42 INS42 MOV32 UPD42 MOV42 INS42 UPD42 MOV42 MOV21 MOV44 INS8 MOV21 INS44 INS8 INS8 INS12 UPD43 INS42 INS42 UPD43 INS42 INS42 INS53 INS43 INS42 INS53 INS21 INS44 INS8 UPD42 UPD42 UPD45 INS14 INS42 INS14 INS7 MOV43 INS42 INS53 INS42 INS43 INS42 INS42 MOV27 INS42 INS43 INS42 INS32 INS27 INS42 INS42 MOV32 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8