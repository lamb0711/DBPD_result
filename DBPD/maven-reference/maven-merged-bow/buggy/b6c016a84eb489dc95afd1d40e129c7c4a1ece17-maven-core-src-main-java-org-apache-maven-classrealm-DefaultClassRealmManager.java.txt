[MNG-4541] Extend class realm manager delegate to allow conditional behavior

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@901852 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.net.MalformedURLException;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.classrealm.ClassRealmRequest.RealmType;
+import org.codehaus.plexus.util.StringUtils;
+     * @param type The type of the class realm, must not be {@code null}.
+     * @param artifacts The artifacts to add to the realm, may be {@code null}. Unresolved artifacts (i.e. with a
+     *            missing file) will automatically be excluded from the realm.
-    private ClassRealm createRealm( String baseRealmId, ClassLoader parent, List<String> imports, boolean importXpp3Dom )
+    private ClassRealm createRealm( String baseRealmId, RealmType type, ClassLoader parent, List<String> imports,
+                                    boolean importXpp3Dom, List<Artifact> artifacts )
+        Set<String> artifactIds = new HashSet<String>();
+
+        List<ClassRealmConstituent> constituents = new ArrayList<ClassRealmConstituent>();
+
+        if ( artifacts != null )
+        {
+            for ( Artifact artifact : artifacts )
+            {
+                artifactIds.add( artifact.getId() );
+                if ( artifact.getFile() != null )
+                {
+                    constituents.add( new ArtifactClassRealmConstituent( artifact ) );
+                }
+            }
+        }
+
+        if ( imports != null )
+        {
+            imports = new ArrayList<String>( imports );
+        }
+        else
+        {
+            imports = new ArrayList<String>();
+        }
+
+        ClassRealmRequest request = new DefaultClassRealmRequest( type, parent, imports, constituents );
+
+        ClassRealm classRealm;
+
-        String realmId = baseRealmId;
-
-        Random random = new Random();
-
-            ClassRealm classRealm;
+            String realmId = baseRealmId;
+
+            Random random = new Random();
-
-            if ( parent != null )
-            {
-                classRealm.setParentClassLoader( parent );
-            }
-            else
-            {
-                classRealm.setParentRealm( getCoreRealm() );
-                importMavenApi( classRealm );
-            }
-
-            if ( importXpp3Dom )
-            {
-                importXpp3Dom( classRealm );
-            }
-
-            if ( imports != null && !imports.isEmpty() )
-            {
-                ClassLoader importedRealm = classRealm.getParentClassLoader();
-
-                for ( String imp : imports )
-                {
-                    classRealm.importFrom( importedRealm, imp );
-                }
-            }
-
-            for ( ClassRealmManagerDelegate delegate : getDelegates() )
-            {
-                delegate.setupRealm( classRealm );
-            }
-
-            return classRealm;
+
+        if ( parent != null )
+        {
+            classRealm.setParentClassLoader( parent );
+        }
+        else
+        {
+            classRealm.setParentRealm( getCoreRealm() );
+            importMavenApi( classRealm );
+        }
+
+        for ( ClassRealmManagerDelegate delegate : getDelegates() )
+        {
+            delegate.setupRealm( classRealm, request );
+        }
+
+        if ( importXpp3Dom )
+        {
+            importXpp3Dom( classRealm );
+        }
+
+        if ( !imports.isEmpty() )
+        {
+            ClassLoader importedRealm = classRealm.getParentClassLoader();
+
+            if ( logger.isDebugEnabled() )
+            {
+                logger.debug( "Importing packages into class realm " + classRealm.getId() );
+            }
+
+            for ( String imp : imports )
+            {
+                if ( logger.isDebugEnabled() )
+                {
+                    logger.debug( "  Imported: " + imp );
+                }
+
+                classRealm.importFrom( importedRealm, imp );
+            }
+        }
+
+        if ( logger.isDebugEnabled() )
+        {
+            logger.debug( "Populating class realm " + classRealm.getId() );
+        }
+
+        for ( ClassRealmConstituent constituent : constituents )
+        {
+            File file = constituent.getFile();
+
+            String id = getId( constituent );
+            artifactIds.remove( id );
+
+            if ( logger.isDebugEnabled() )
+            {
+                logger.debug( "  Included: " + id );
+            }
+
+            try
+            {
+                classRealm.addURL( file.toURI().toURL() );
+            }
+            catch ( MalformedURLException e )
+            {
+                // Not going to happen
+            }
+        }
+
+        if ( logger.isDebugEnabled() )
+        {
+            for ( String id : artifactIds )
+            {
+                logger.debug( "  Excluded: " + id );
+            }
+        }
+
+        return classRealm;
-    public ClassRealm createProjectRealm( Model model )
+    public ClassRealm createProjectRealm( Model model, List<Artifact> artifacts )
-        return createRealm( getKey( model ), null, null, false );
+        return createRealm( getKey( model ), RealmType.Project, null, null, false, artifacts );
-    private String getKey( Model model )
+    private static String getKey( Model model )
-    public ClassRealm createExtensionRealm( Plugin plugin )
+    public ClassRealm createExtensionRealm( Plugin plugin, List<Artifact> artifacts )
-        return createRealm( getKey( plugin, true ), null, null, true );
+        return createRealm( getKey( plugin, true ), RealmType.Extension, null, null, true, artifacts );
-    public ClassRealm createPluginRealm( Plugin plugin, ClassLoader parent, List<String> imports )
+    public ClassRealm createPluginRealm( Plugin plugin, ClassLoader parent, List<String> imports,
+                                         List<Artifact> artifacts )
-        return createRealm( getKey( plugin, false ), parent, imports, true );
+        return createRealm( getKey( plugin, false ), RealmType.Plugin, parent, imports, true, artifacts );
-    private String getKey( Plugin plugin, boolean extension )
+    private static String getKey( Plugin plugin, boolean extension )
+    private static String getId( ClassRealmConstituent constituent )
+    {
+        return constituent.getGroupId() + ':' + constituent.getArtifactId() + ':' + constituent.getType()
+            + ( StringUtils.isNotEmpty( constituent.getClassifier() ) ? ':' + constituent.getClassifier() : "" ) + ':'
+            + constituent.getVersion();
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS44 INS44 MOV8 MOV70 INS44 INS83 INS44 INS44 INS83 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS43 INS42 INS74 INS42 INS60 INS60 INS25 INS25 INS60 MOV60 INS51 INS25 INS70 INS25 INS74 INS42 INS74 INS42 INS74 INS42 INS42 INS43 INS42 INS41 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS43 INS43 INS74 INS59 INS74 INS59 INS27 INS8 MOV27 INS8 INS8 INS43 INS59 INS42 INS8 MOV38 INS32 INS8 INS44 INS42 INS8 INS32 INS8 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS27 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS33 INS70 INS21 INS21 INS42 INS42 INS14 MOV60 MOV60 MOV61 INS25 INS42 INS42 INS21 INS43 INS42 INS60 INS60 INS21 INS25 INS54 INS42 INS42 INS70 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS32 INS13 INS32 INS13 INS32 INS36 INS13 INS32 INS42 INS42 INS74 INS42 INS42 INS74 INS44 INS42 INS8 INS7 INS7 INS43 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS8 INS8 INS12 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS42 INS21 INS25 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS21 INS25 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS43 INS42 INS21 INS32 INS27 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS74 INS42 INS74 INS32 INS32 INS8 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS13 INS32 INS42 INS42 INS32 INS32 INS33 INS21 INS43 INS43 INS43 INS43 INS42 INS42 INS27 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS45 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS42 INS45 INS42 INS42 DEL27 DEL42 DEL51 DEL8