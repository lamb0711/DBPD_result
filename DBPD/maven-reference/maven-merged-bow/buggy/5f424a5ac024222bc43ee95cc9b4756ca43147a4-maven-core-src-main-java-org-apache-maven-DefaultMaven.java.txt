multi-module support


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163528 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.execution.MavenProjectExecutionRequest;
-import org.apache.maven.execution.MavenReactorExecutionRequest;
+import org.codehaus.plexus.util.FileUtils;
+import org.codehaus.plexus.util.StringUtils;
+import java.util.Collections;
-    public MavenExecutionResponse execute( MavenExecutionRequest request ) throws GoalNotFoundException, Exception
+    public MavenExecutionResponse execute( MavenExecutionRequest request )
+        throws GoalNotFoundException, Exception
-        // TODO: not happy about this:
-        if ( request instanceof MavenReactorExecutionRequest )
+        EventDispatcher dispatcher = request.getEventDispatcher();
+        String event = MavenEvents.REACTOR_EXECUTION;
+
+        // TODO: goals are outer loop
+        dispatcher.dispatchStart( event, request.getBaseDirectory() );
+        try
-            return handleReactor( (MavenReactorExecutionRequest) request );
+            List projects = new ArrayList();
+
+            try
+            {
+                List files = request.getProjectFiles();
+
+                for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
+                {
+                    File file = (File) iterator.next();
+
+                    MavenProject project = getProject( file, request.getLocalRepository() );
+
+                    projects.add( project );
+                }
+
+                projects = projectBuilder.getSortedProjects( projects );
+
+                if ( projects.isEmpty() )
+                {
+                    projects.add( projectBuilder.buildSuperProject( request.getLocalRepository() ) );
+                }
+            }
+            catch ( IOException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+            catch ( CycleDetectedException e )
+            {
+                throw new ReactorException( "Error processing projects for the reactor: ", e );
+            }
+
+            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
+            {
+                MavenProject project = (MavenProject) iterator.next();
+
+                line();
+
+                getLogger().info( "Building " + project.getName() );
+
+                line();
+
+                try
+                {
+                    boolean isPom = "pom".equals( project.getPackaging() );
+                    if ( isPom )
+                    {
+                        // TODO: not required if discovered and cached
+                        MavenExecutionResponse response = processProject( request, project, dispatcher,
+                                                                          Collections.singletonList( "pom:install" ) );
+                        if ( response.isExecutionFailure() )
+                        {
+                            return response;
+                        }
+                    }
+
+                    if ( project.getModules() != null && !project.getModules().isEmpty() )
+                    {
+                        String includes = StringUtils.join( project.getModules().iterator(), "/pom.xml," ) +
+                            "/pom.xml";
+                        File baseDir = project.getFile().getParentFile();
+                        MavenExecutionRequest reactorRequest = new DefaultMavenExecutionRequest(
+                            request.getLocalRepository(), request.getUserModel(), request.getEventDispatcher(),
+                            request.getGoals(), FileUtils.getFiles( baseDir, includes, null ), baseDir.getPath() );
+                        MavenExecutionResponse response = execute( reactorRequest );
+                        if ( response != null && response.isExecutionFailure() )
+                        {
+                            return response;
+                        }
+
+                    }
+
+                    if ( !isPom )
+                    {
+                        MavenExecutionResponse response = processProject( request, project, dispatcher,
+                                                                          request.getGoals() );
+
+                        if ( response.isExecutionFailure() )
+                        {
+                            return response;
+                        }
+                    }
+                }
+                catch ( Exception e )
+                {
+                    throw new ReactorException( "Error executing project within the reactor", e );
+                }
+            }
+
+            dispatcher.dispatchEnd( event, request.getBaseDirectory() );
+
+            // TODO: not really satisfactory
+            return null;
-        else
+        catch ( ReactorException e )
-            return handleProject( request );
+            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+
+            throw e;
-    // TODO: don't throw generic exception
-    public MavenExecutionResponse handleProject( MavenExecutionRequest request ) throws Exception
+    private MavenExecutionResponse processProject( MavenExecutionRequest request, MavenProject project,
+                                                   EventDispatcher dispatcher, List goals )
+        throws ComponentLookupException
-        List projectFiles = request.getProjectFiles();
-        
-        MavenProject project = null;
-        if(projectFiles != null && !projectFiles.isEmpty())
-        {
-            project = getProject( (File) request.getProjectFiles().get( 0 ), request.getLocalRepository() );
-        }
-        else
-        {
-            project = projectBuilder.buildSuperProject( request.getLocalRepository() );
-        }
-
-        EventDispatcher dispatcher = request.getEventDispatcher();
-            response = lifecycleExecutor.execute( request.getGoals(), session );
+            response = lifecycleExecutor.execute( goals, session );
-    // ----------------------------------------------------------------------
-    // Reactor
-    // ----------------------------------------------------------------------
-
-    public MavenExecutionResponse handleReactor( MavenReactorExecutionRequest request ) throws ReactorException
-    {
-        EventDispatcher dispatcher = request.getEventDispatcher();
-        String event = MavenEvents.REACTOR_EXECUTION;
-
-        dispatcher.dispatchStart( event, request.getBaseDirectory().getPath() );
-        try
-        {
-            List projects = new ArrayList();
-
-            getLogger().info( "Starting the reactor..." );
-
-            try
-            {
-                List files = request.getProjectFiles();
-
-                for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
-                {
-                    File file = (File) iterator.next();
-
-                    MavenProject project = getProject( file, request.getLocalRepository() );
-
-                    projects.add( project );
-                }
-
-                projects = projectBuilder.getSortedProjects( projects );
-
-            }
-            catch ( IOException e )
-            {
-                throw new ReactorException( "Error processing projects for the reactor: ", e );
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new ReactorException( "Error processing projects for the reactor: ", e );
-            }
-            catch ( CycleDetectedException e )
-            {
-                throw new ReactorException( "Error processing projects for the reactor: ", e );
-            }
-
-            getLogger().info( "Our processing order:" );
-
-            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
-            {
-                MavenProject project = (MavenProject) iterator.next();
-
-                getLogger().info( project.getName() );
-            }
-
-            for ( Iterator iterator = projects.iterator(); iterator.hasNext(); )
-            {
-                MavenProject project = (MavenProject) iterator.next();
-
-                System.out.println( "\n\n\n" );
-
-                line();
-
-                getLogger().info( "Building " + project.getName() );
-
-                line();
-
-                MavenProjectExecutionRequest projectExecutionRequest = request.createProjectExecutionRequest( project );
-
-                try
-                {
-                    MavenExecutionResponse response = handleProject( projectExecutionRequest );
-
-                    if ( response.isExecutionFailure() )
-                    {
-                        return response;
-                    }
-                }
-                catch ( Exception e )
-                {
-                    throw new ReactorException( "Error executing project within the reactor", e );
-                }
-
-            }
-
-            dispatcher.dispatchEnd( event, request.getBaseDirectory().getPath() );
-
-            // TODO: not really satisfactory
-            return null;
-        }
-        catch ( ReactorException e )
-        {
-            dispatcher.dispatchError( event, request.getBaseDirectory().getPath(), e );
-
-            throw e;
-        }
-    }
-
-    public MavenProject getProject( File pom, ArtifactRepository localRepository ) throws ProjectBuildingException
+    public MavenProject getProject( File pom, ArtifactRepository localRepository )
+        throws ProjectBuildingException
-     *       them in. It doesn't feel quite right.
+     * them in. It doesn't feel quite right.
-    private void resolveParameters( MavenExecutionRequest request ) throws ComponentLookupException
+    private void resolveParameters( MavenExecutionRequest request )
+        throws ComponentLookupException
-    public void contextualize( Context context ) throws ContextException
+    public void contextualize( Context context )
+        throws ContextException
-        getLogger().info(
-                          "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/"
-                              + ( r.totalMemory() / mb ) + "M" );
+        getLogger().info( "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/" +
+                          ( r.totalMemory() / mb ) + "M" );
-    public List getSortedProjects( List projects ) throws CycleDetectedException
+    public List getSortedProjects( List projects )
+        throws CycleDetectedException

MOV26 MOV26 INS26 INS26 MOV31 UPD40 UPD40 INS40 INS40 INS42 MOV44 MOV43 MOV43 UPD83 INS42 INS44 INS44 INS44 INS43 MOV21 MOV43 INS42 INS43 INS42 MOV43 INS42 INS42 MOV32 MOV32 INS42 UPD42 INS42 INS42 MOV21 INS8 MOV32 MOV32 MOV21 INS25 MOV60 MOV21 MOV21 MOV21 INS54 UPD42 INS42 INS42 MOV32 MOV32 INS32 MOV8 INS8 MOV12 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS25 INS25 INS32 INS39 INS59 INS42 INS8 INS27 INS8 INS38 MOV8 INS42 INS42 MOV32 INS42 INS32 INS60 INS25 INS27 INS38 INS60 INS60 MOV60 INS60 INS25 INS42 INS45 INS42 INS32 MOV43 INS59 INS32 INS8 INS32 INS33 INS32 INS43 INS59 MOV43 INS59 UPD43 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS32 UPD42 INS42 INS14 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS43 MOV32 INS32 INS32 MOV32 INS32 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 UPD45 MOV45 INS42 INS42 INS42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL7 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL32 DEL40 DEL32 DEL21 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL11 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60