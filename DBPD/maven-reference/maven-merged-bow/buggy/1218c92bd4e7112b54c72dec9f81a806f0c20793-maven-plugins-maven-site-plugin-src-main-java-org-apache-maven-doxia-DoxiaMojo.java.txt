o Internationalize site plugin generation.
o Add french translation

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@180168 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.i18n.I18N;
+import java.util.StringTokenizer;
+     * @parameter expression="${locales}
+     */
+    private String locales;
+
+    /**
+     * @parameter expression="${component.org.codehaus.plexus.i18n.I18N}"
+     * @required
+     * @readonly
+     */
+    private I18N i18n;
+
+    /**
+    private Locale defaultLocale = Locale.ENGLISH;
+
+    private List localesList = new ArrayList();
+
-            catch( MalformedURLException e )
+            catch ( MalformedURLException e )
-            MavenReportConfiguration config = new MavenReportConfiguration();
-
-            config.setProject( project );
-
-            config.setReportOutputDirectory( new File( outputDirectory ) );
-
-            //Generate reports
-            if ( reports != null )
+            if ( locales == null )
-                for ( Iterator i = reports.keySet().iterator(); i.hasNext(); )
+                localesList.add( defaultLocale );
+            }
+            else
+            {
+                StringTokenizer st = new StringTokenizer( locales, "," );
+
+                while ( st.hasMoreTokens() )
-                    String reportKey = (String) i.next();
+                    localesList.add( new Locale( st.nextToken().trim() ) );
+                }
+            }
-                    getLog().info( "Generate " + reportKey + " report." );
+            for ( Iterator i = localesList.iterator(); i.hasNext(); )
+            {
+                Locale locale = (Locale) i.next();
-                    MavenReport report = (MavenReport) reports.get( reportKey );
+                MavenReportConfiguration config = new MavenReportConfiguration();
-                    report.setConfiguration( config );
+                config.setProject( project );
-                    String outputFileName = report.getOutputName() + ".html";
+                File localeOutputDirectory = getOuputDirectory( locale );
-                    SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName,
-                                                                     getSiteDescriptor() );
+                config.setReportOutputDirectory( localeOutputDirectory );
-                    //TODO: Use multiple locale with a loop
-                    report.generate( sink, Locale.ENGLISH );
-
-                    File outputFile = new File( outputDirectory, outputFileName );
-
-                    if ( !outputFile.getParentFile().exists() )
+                //Generate reports
+                if ( reports != null )
+                {
+                    for ( Iterator j = reports.keySet().iterator(); j.hasNext(); )
-                        outputFile.getParentFile().mkdirs();
+                        String reportKey = (String) j.next();
+
+                        getLog().info( "Generate " + reportKey + " report." );
+
+                        MavenReport report = (MavenReport) reports.get( reportKey );
+
+                        report.setConfiguration( config );
+
+                        String outputFileName = report.getOutputName() + ".html";
+
+                        SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName,
+                                                                         getSiteDescriptor( locale ) );
+
+                        report.generate( sink, locale );
+
+                        File outputFile = new File( localeOutputDirectory, outputFileName );
+
+                        if ( !outputFile.getParentFile().exists() )
+                        {
+                            outputFile.getParentFile().mkdirs();
+                        }
+
+                        siteRenderer
+                            .generateDocument( new FileWriter( outputFile ), template, attributes, sink, locale );
-
-                    siteRenderer.generateDocument( new FileWriter( outputFile ), template, attributes, sink, Locale.ENGLISH );
-            }
-            //Generate overview pages
-            if ( projectInfos.size() > 0 )
-            {
-                try
+                //Generate overview pages
+                if ( projectInfos.size() > 0 )
-                    generateProjectInfoPage( getSiteDescriptor() );
+                    try
+                    {
+                        generateProjectInfoPage( getSiteDescriptor( locale ), locale );
+                    }
+                    catch ( Exception e )
+                    {
+                        throw new MojoExecutionException( "An error is occurred in project info page generation.", e );
+                    }
-                catch ( Exception e )
+
+                if ( projectReports.size() > 0 )
-                    throw new MojoExecutionException( "An error is occurred in project info page generation.", e );
+                    try
+                    {
+                        generateProjectReportsPage( getSiteDescriptor( locale ), locale );
+                    }
+                    catch ( Exception e )
+                    {
+                        throw new MojoExecutionException( "An error is occurred in project reports page generation.", e );
+                    }
-            }
-            if ( projectReports.size() > 0 )
-            {
-                try
+                // Generate static site
+                siteRenderer.render( new File( siteDirectory ), localeOutputDirectory, getSiteDescriptor( locale ),
+                                     template, attributes );
+                siteRenderer.render( new File( generatedSiteDirectory ), localeOutputDirectory,
+                                     getSiteDescriptor( locale ), template, attributes );
+
+                File cssDirectory = new File( siteDirectory, "css" );
+                File imagesDirectory = new File( siteDirectory, "images" );
+
+                // special case for backwards compatibility
+                if ( cssDirectory.exists() || imagesDirectory.exists() )
-                    generateProjectReportsPage( getSiteDescriptor() );
+                    getLog().warn( "DEPRECATED: the css and images directories are deprecated, please use resources" );
+
+                    copyDirectory( cssDirectory, new File( localeOutputDirectory, "css" ) );
+
+                    copyDirectory( imagesDirectory, new File( localeOutputDirectory, "images" ) );
-                catch ( Exception e )
+
+                // Copy site resources
+                if ( resourcesDirectory != null && resourcesDirectory.exists() )
-                    throw new MojoExecutionException( "An error is occurred in project reports page generation.", e );
+                    copyDirectory( resourcesDirectory, localeOutputDirectory );
+
+                copyResources( localeOutputDirectory );
-
-            File cssDirectory = new File( siteDirectory, "css" );
-            File imagesDirectory = new File( siteDirectory, "images" );
-
-            // special case for backwards compatibility
-            if ( cssDirectory.exists() || imagesDirectory.exists() )
-            {
-                getLog().warn( "DEPRECATED: the css and images directories are deprecated, please use resources" );
-
-                copyDirectory( cssDirectory, new File( outputDirectory, "css" ) );
-
-                copyDirectory( imagesDirectory, new File( outputDirectory, "images" ) );
-            }
-
-            // Generate static site
-            siteRenderer.render( new File( siteDirectory ), new File( outputDirectory ), getSiteDescriptor(), template,
-                                 attributes );
-            siteRenderer.render( new File( generatedSiteDirectory ), new File( outputDirectory ), getSiteDescriptor(),
-                                 template, attributes );
-
-            // Copy site resources
-            if ( resourcesDirectory != null && resourcesDirectory.exists() )
-            {
-                copyDirectory( resourcesDirectory, new File( outputDirectory ) );
-            }
-
-            copyResources( outputDirectory );
-                                                  + report.getName() + " mojo isn't valid." );
+                                                  + report.getName( defaultLocale ) + " mojo isn't valid." );
-    private String getReportsMenu()
+    private String getReportsMenu( Locale locale )
-        buffer.append( "    <item name=\"About " + project.getName() + "\" href=\"/index.html\"/>\n" );
+        buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.about") + " " + project.getName() + "\" href=\"/index.html\"/>\n" );
-            buffer.append( "    <item name=\"" + MavenReport.CATEGORY_PROJECT_INFORMATION
+            buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectinformation")
-                buffer.append( "        <item name=\"" + report.getName() + "\" href=\"/" + report.getOutputName()
-                               + ".html\"/>\n" );
+                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/"
+                               + report.getOutputName() + ".html\"/>\n" );
-            buffer.append( "    <item name=\"" + MavenReport.CATEGORY_PROJECT_REPORTS
+            buffer.append( "    <item name=\"" + i18n.getString( "site-plugin", locale, "report.menu.projectreports")
-                buffer.append( "        <item name=\"" + report.getName() + "\" href=\"/" + report.getOutputName()
-                               + ".html\"/>\n" );
+                buffer.append( "        <item name=\"" + report.getName( locale ) + "\" href=\"/"
+                               + report.getOutputName() + ".html\"/>\n" );
-    private InputStream getSiteDescriptor()
+    private InputStream getSiteDescriptor( Locale locale )
-            props.put( "reports", getReportsMenu() );
+            props.put( "reports", getReportsMenu( locale ) );
-    private void generateProjectInfoPage( InputStream siteDescriptor )
+    private void generateProjectInfoPage( InputStream siteDescriptor, Locale locale )
-        SiteRendererSink sink = siteRenderer
-            .createSink( new File( siteDirectory ), outputFileName, getSiteDescriptor() );
+        SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName,
+                                                         getSiteDescriptor( locale ) );
-        String title = "General Project Information";
+        String title = i18n.getString( "site-plugin", locale, "report.information.title");
-        sink.text( "This document provides an overview of the various documents and links that are part "
-                   + "of this project's general information. All of this content is automatically generated by " );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.description1") + " " );
-        sink.text( " on behalf of the project." );
+        sink.text( " " + i18n.getString( "site-plugin", locale, "report.information.description2") );
-        sink.text( "Overview" );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.sectionTitle") );
-        sink.text( "Document" );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.column.document") );
-        sink.text( "Description" );
+        sink.text( i18n.getString( "site-plugin", locale, "report.information.column.description") );
-            sink.text( report.getName() );
+            sink.text( report.getName( locale ) );
-            sink.text( report.getDescription() );
+            sink.text( report.getDescription( locale ) );
-        siteRenderer.generateDocument( new FileWriter( new File( outputDirectory, outputFileName ) ), template,
-                                       attributes, sink, Locale.ENGLISH );
+        siteRenderer.generateDocument( new FileWriter( new File( getOuputDirectory( locale ), outputFileName ) ),
+                                       template, attributes, sink, locale );
-    private void generateProjectReportsPage( InputStream siteDescriptor )
+    private void generateProjectReportsPage( InputStream siteDescriptor, Locale locale )
-        SiteRendererSink sink = siteRenderer
-            .createSink( new File( siteDirectory ), outputFileName, getSiteDescriptor() );
+        SiteRendererSink sink = siteRenderer.createSink( new File( siteDirectory ), outputFileName,
+                                                         getSiteDescriptor( locale ) );
-        String title = "Maven Generated Reports";
+        String title = i18n.getString( "site-plugin", locale, "report.project.title");
-        sink.text( "This document provides an overview of the various reports that are automatically generated by " );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.description1") + " " );
-        sink.text( ". Each report is briefly described below." );
+        sink.text( ". " + i18n.getString( "site-plugin", locale, "report.project.description2") );
-        sink.text( "Overview" );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.sectionTitle") );
-        sink.text( "Document" );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.column.document") );
-        sink.text( "Description" );
+        sink.text( i18n.getString( "site-plugin", locale, "report.project.column.description") );
-            sink.text( report.getName() );
+            sink.text( report.getName( locale ) );
-            sink.text( report.getDescription() );
+            sink.text( report.getDescription( locale ) );
-        siteRenderer.generateDocument( new FileWriter( new File( outputDirectory, outputFileName ) ), template,
-                                       attributes, sink, Locale.ENGLISH );
+        siteRenderer.generateDocument( new FileWriter( new File( getOuputDirectory( locale ), outputFileName ) ),
+                                       template, attributes, sink, locale );
-    private void copyResources( String outputDirectory )
+    private void copyResources( File outputDirectory )
+
+    private File getOuputDirectory( Locale locale )
+    {
+        if ( localesList.size() == 1 )
+        {
+            return new File( outputDirectory );
+        }
+        else
+        {
+            Locale firstLocale = (Locale) localesList.get( 0 );
+            if ( locale.equals( firstLocale ) )
+            {
+                return new File( outputDirectory );
+            }
+            else
+            {
+                return new File( outputDirectory, locale.getLanguage() );
+            }
+        }
+    }

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS29 INS83 MOV43 INS59 INS29 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS44 MOV25 INS44 INS44 INS44 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS65 INS65 INS65 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS43 INS42 INS43 INS42 INS43 INS42 INS24 INS21 INS43 INS42 INS60 INS21 MOV21 MOV21 MOV21 INS21 MOV24 MOV21 UPD43 INS42 INS43 INS42 INS25 INS66 INS66 INS43 INS8 INS42 MOV27 MOV27 INS42 INS42 MOV58 MOV32 INS8 INS32 INS42 INS43 INS59 INS32 INS32 MOV58 UPD42 INS42 INS27 INS8 INS8 INS42 MOV21 INS25 INS24 INS32 INS27 INS32 INS32 INS32 MOV60 MOV21 MOV21 INS21 INS21 MOV21 MOV21 MOV21 INS21 MOV21 MOV21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 MOV42 INS32 MOV42 MOV42 INS27 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS34 INS41 INS60 INS25 INS27 INS8 INS8 INS58 MOV32 MOV8 MOV60 MOV60 UPD45 INS32 INS45 MOV58 MOV58 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS45 INS32 INS42 INS42 UPD45 MOV45 INS42 INS45 INS42 INS42 INS45 INS42 UPD45 MOV45 INS42 INS42 INS45 INS42 UPD45 MOV45 INS32 INS32 INS32 MOV43 INS14 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 INS32 INS45 INS45 INS32 UPD42 UPD42 INS45 INS42 INS45 UPD42 UPD42 INS45 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS42 INS42 MOV14 INS43 INS59 INS32 INS8 INS8 INS42 INS33 INS21 INS60 INS61 INS43 INS59 MOV60 INS60 MOV21 INS25 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV43 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS41 INS41 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS43 MOV43 INS59 MOV27 INS8 INS32 UPD45 INS32 UPD45 INS42 MOV32 MOV45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 MOV14 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS21 INS42 INS42 INS42 UPD42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 MOV21 INS21 INS21 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS32 INS43 INS42 INS45 INS32 INS43 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS60 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS32 UPD42 MOV43 INS59 MOV43 MOV43 INS42 INS45 INS43 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 MOV43 UPD42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL45 DEL14 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL40 DEL40 DEL42 DEL42 DEL45 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL40 DEL40 DEL45 DEL45 DEL45 DEL45 DEL45 DEL59 DEL60 DEL32 DEL21 DEL42 DEL32 DEL21 DEL45 DEL32 DEL21 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL40 DEL42 DEL42 DEL14 DEL14 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21