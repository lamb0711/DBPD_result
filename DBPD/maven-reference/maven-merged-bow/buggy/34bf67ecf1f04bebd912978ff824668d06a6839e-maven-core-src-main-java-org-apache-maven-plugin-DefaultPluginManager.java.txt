Merging revIds: 515814:520600 from 2.1-lifecycle-refactor branch to trunk.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@520609 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.context.BuildContextManager;
+import org.apache.maven.lifecycle.LifecycleExecutionContext;
+import org.apache.maven.lifecycle.statemgmt.StateManagementUtils;
+    private static final List RESERVED_GROUP_IDS;
+    
+    static
+    {
+        List rgids = new ArrayList();
+        
+        rgids.add( StateManagementUtils.GROUP_ID );
+        
+        RESERVED_GROUP_IDS = rgids;
+    }
+
+    private BuildContextManager buildContextManager;
+
+            getLogger().debug( "Resolving version for plugin: " + plugin.getKey() );
-            VersionRange versionRange = VersionRange.createFromVersionSpec( plugin.getVersion() );
+            // if the groupId is internal, don't try to resolve it...
+            if ( !RESERVED_GROUP_IDS.contains( plugin.getGroupId() ) )
+            {
+                VersionRange versionRange = VersionRange.createFromVersionSpec( plugin.getVersion() );
-            List remoteRepositories = new ArrayList();
+                List remoteRepositories = new ArrayList();
-            remoteRepositories.addAll( project.getPluginArtifactRepositories() );
+                remoteRepositories.addAll( project.getPluginArtifactRepositories() );
-            remoteRepositories.addAll( project.getRemoteArtifactRepositories() );
+                remoteRepositories.addAll( project.getRemoteArtifactRepositories() );
-            checkRequiredMavenVersion( plugin, localRepository, remoteRepositories );
+                checkRequiredMavenVersion( plugin, localRepository, remoteRepositories );
-            Artifact pluginArtifact =
-                artifactFactory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
+                Artifact pluginArtifact =
+                    artifactFactory.createPluginArtifact( plugin.getGroupId(), plugin.getArtifactId(), versionRange );
-            pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
+                pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
-            artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
+                artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
-//            if ( !pluginCollector.isPluginInstalled( plugin ) )
-//            {
-//            }
-            addPlugin( plugin, pluginArtifact, project, localRepository );
+//                if ( !pluginCollector.isPluginInstalled( plugin ) )
+//                {
+//                }
+                addPlugin( plugin, pluginArtifact, project, localRepository );
+            }
+            else
+            {
+                getLogger().debug( "Skipping resolution for Maven built-in plugin: " + plugin.getKey() );
+                
+                PluginDescriptor pd = pluginCollector.getPluginDescriptor( plugin );
+                pd.setClassRealm( container.getContainerRealm() );
+            }
-        return pluginCollector.getPluginDescriptor( plugin );
+        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
+        
+        return pluginDescriptor;
-        String goalId = mojoDescriptor.getGoal();
-
-        String groupId = pluginDescriptor.getGroupId();
-
-        String artifactId = pluginDescriptor.getArtifactId();
-
-        String executionId = mojoExecution.getExecutionId();
-
-        Xpp3Dom dom = project.getGoalConfiguration( groupId, artifactId, executionId, goalId );
-
-        Xpp3Dom reportDom = project.getReportConfiguration( groupId, artifactId, executionId );
-
-        dom = Xpp3Dom.mergeXpp3Dom( dom, reportDom );
-
-        if ( mojoExecution.getConfiguration() != null )
+        Xpp3Dom dom = (Xpp3Dom) mojoExecution.getConfiguration();
+        if ( dom != null )
-            dom = Xpp3Dom.mergeXpp3Dom( dom, mojoExecution.getConfiguration() );
+            // make a defensive copy, to keep things from getting polluted.
+            dom = new Xpp3Dom( dom );
-
+        
-
+            
+            // NEW: If the mojo that just executed is a report, store it in the LifecycleExecutionContext
+            // for reference by future mojos.
+            if ( plugin instanceof MavenReport )
+            {
+                LifecycleExecutionContext ctx = LifecycleExecutionContext.read( buildContextManager );
+                if ( ctx == null )
+                {
+                    ctx = new LifecycleExecutionContext( project );
+                }
+                
+                ctx.addReport( mojoDescriptor, (MavenReport) plugin );
+                ctx.store( buildContextManager );
+            }
+            
-
+        
-        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution,
-                                                                                          pathTranslator, getLogger(),
-                                                                                          project,
+        // NEW: Pass in the LifecycleExecutionContext so we have access to the current project, 
+        // forked project stack (future), and reports.
+        LifecycleExecutionContext ctx = LifecycleExecutionContext.read( buildContextManager );
+        if ( ctx == null )
+        {
+            ctx = new LifecycleExecutionContext( project );
+        }
+        
+        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution, pathTranslator,
+                                                                                          ctx, getLogger(),
-    // Lifecycle
+    // LegacyLifecycle

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS28 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS8 INS83 INS43 INS59 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS60 INS41 INS60 INS25 INS43 INS59 INS32 INS7 INS8 INS43 INS59 INS42 MOV43 INS43 INS59 INS27 INS8 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS21 INS25 MOV21 INS42 INS42 INS32 INS11 INS42 INS25 INS42 INS42 INS32 INS42 INS33 INS21 MOV32 INS43 INS32 INS38 MOV8 INS8 MOV42 MOV42 MOV42 MOV43 MOV32 INS62 INS8 INS42 INS42 INS42 INS7 UPD42 INS42 INS32 INS42 INS27 INS32 INS21 INS60 INS21 INS14 INS42 INS43 INS60 INS25 INS21 INS21 INS42 INS14 INS42 INS45 INS32 INS42 INS42 INS32 INS32 INS43 INS59 INS32 INS43 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32