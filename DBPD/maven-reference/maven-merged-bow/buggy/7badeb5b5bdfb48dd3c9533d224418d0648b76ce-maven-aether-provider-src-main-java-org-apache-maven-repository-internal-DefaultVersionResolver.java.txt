Upgraded to java7 language features

-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.inject.Inject;
-import javax.inject.Named;
-
-import org.eclipse.aether.RepositoryEvent.EventType;
+import org.eclipse.aether.RepositoryEvent.EventType;
+import javax.inject.Inject;
+import javax.inject.Named;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
-                result.setRepository( CacheUtils.getRepository( session, request.getRepositories(), record.repoClass,
-                                                                record.repoId ) );
+                result.setRepository(
+                    CacheUtils.getRepository( session, request.getRepositories(), record.repoClass, record.repoId ) );
-            metadata =
-                new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
-                                     Metadata.Nature.RELEASE );
+            metadata = new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
+                                            Metadata.Nature.RELEASE );
-            metadata =
-                new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
-                                     Metadata.Nature.RELEASE_OR_SNAPSHOT );
+            metadata = new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
+                                            Metadata.Nature.RELEASE_OR_SNAPSHOT );
-            List<MetadataRequest> metadataReqs = new ArrayList<MetadataRequest>( request.getRepositories().size() );
+            List<MetadataRequest> metadataReqs = new ArrayList<>( request.getRepositories().size() );
-            Map<String, VersionInfo> infos = new HashMap<String, VersionInfo>();
+            Map<String, VersionInfo> infos = new HashMap<>();
-                SyncContext syncContext = syncContextFactory.newInstance( session, true );
-                try
+                try ( SyncContext syncContext = syncContextFactory.newInstance( session, true ) )
-                                    + ", please verify that no remote repository uses the id '" + repository.getId()
-                                    + "'" );
+                                                           + ", please verify that no remote repository uses the id '"
+                                                           + repository.getId() + "'" );
-                finally
-                {
-                    syncContext.close();
-                }
-        if ( dstInfo == null
-            || ( srcInfo != null && dstInfo.isOutdated( srcInfo.timestamp )
-                 && srcInfo.repository != dstInfo.repository ) )
+        if ( dstInfo == null || ( srcInfo != null && dstInfo.isOutdated( srcInfo.timestamp )
+            && srcInfo.repository != dstInfo.repository ) )
-            repositories = new ArrayList<RemoteRepository>( request.getRepositories().size() );
+            repositories = new ArrayList<>( request.getRepositories().size() );
-            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
-                && classifier.equals( that.classifier ) && extension.equals( that.extension )
-                && version.equals( that.version ) && context.equals( that.context )
-                && localRepo.equals( that.localRepo ) && CacheUtils.eq( workspace, that.workspace )
+            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId ) && classifier.equals(
+                that.classifier ) && extension.equals( that.extension ) && version.equals( that.version )
+                && context.equals( that.context ) && localRepo.equals( that.localRepo )
+                && CacheUtils.eq( workspace, that.workspace )

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD74 UPD74 UPD74 INS58 MOV43 MOV59 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43