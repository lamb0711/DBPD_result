Resolving: MNG-773

o Separated profile injection logic from the inheritance assembly. While they look similar superficially, the
  merge-out vs. merge-in semantics make it pretty complex to put this logic together in the same methods. It's
  easier to understand what's going on if they remain similar but separate code...

o Added it0058 to test that application of a profile from settings.xml doesn't transport module lists from POM
  to POM inside of a reactor build.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@239918 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Build;
-import org.apache.maven.model.BuildBase;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.DependencyManagement;
-import org.apache.maven.model.DistributionManagement;
-import org.apache.maven.model.ModelBase;
-import org.apache.maven.model.PluginManagement;
-import org.apache.maven.model.Profile;
-import org.apache.maven.model.ReportPlugin;
-import org.apache.maven.model.ReportSet;
-import org.apache.maven.model.Reporting;
-import org.codehaus.plexus.util.StringUtils;
-import java.util.HashMap;
-        List parentGoals = parent.getGoals();
-
-        // if the supplemental goals are non-existent, then nothing related to goals changes.
-        if ( parentGoals != null && !parentGoals.isEmpty() )
+        if ( child.getPhase() == null )
-            List goals = new ArrayList( parentGoals );
-            if ( child.getGoals() != null )
-            {
-                goals.addAll( child.getGoals() );
-            }
-
-            child.setGoals( goals );
+            child.setPhase( parent.getPhase() );
+        
+        List parentGoals = parent.getGoals();
+        List childGoals = child.getGoals();
+        
+        List goals = new ArrayList();
+        
+        if ( childGoals != null && !childGoals.isEmpty() )
+        {
+            goals.addAll( childGoals );
+        }
+        
+        if ( parentGoals != null )
+        {
+            for ( Iterator goalIterator = parentGoals.iterator(); goalIterator.hasNext(); )
+            {
+                String goal = (String) goalIterator.next();
+                
+                if ( !goals.contains( goal ) )
+                {
+                    goals.add( goal );
+                }
+            }
+        }
+        
+        child.setGoals( goals );
-    public static void mergeModelBases( ModelBase dominant, ModelBase recessive, boolean mergePathStructures )
-    {
-        mergeDependencies( dominant, recessive );
-        
-        if ( mergePathStructures )
-        {
-            mergeModules( dominant, recessive );
-        }
-        
-        dominant.setRepositories( mergeRepositoryLists( dominant.getRepositories(), recessive.getRepositories() ) );
-        dominant.setPluginRepositories( mergeRepositoryLists( dominant.getPluginRepositories(), recessive.getPluginRepositories() ) );
-        
-        mergeReporting( dominant, recessive );
-        
-        mergeDependencyManagementSections( dominant, recessive );
-        
-        mergeDistributionManagementSections( dominant, recessive );
-    }
-    
-    private static void mergeModules( ModelBase dominant, ModelBase recessive )
-    {
-        List modules = new ArrayList();
-        
-        List dominantModules = dominant.getModules();
-        
-        if ( dominantModules != null && !dominantModules.isEmpty() )
-        {
-            modules.addAll( dominantModules );
-        }
-        
-        List recessiveModules = recessive.getModules();
-        
-        if ( recessiveModules != null )
-        {
-            for ( Iterator it = recessiveModules.iterator(); it.hasNext(); )
-            {
-                String module = (String) it.next();
-                
-                if ( !modules.contains( module ) )
-                {
-                    modules.add( module );
-                }
-            }
-        }
-        
-        dominant.setModules( modules );
-    }
-
-    private static void mergeDistributionManagementSections( ModelBase dominant, ModelBase recessive )
-    {
-        DistributionManagement dDistMgmt = dominant.getDistributionManagement();
-        DistributionManagement rDistMgmt = recessive.getDistributionManagement();
-        
-        if ( dDistMgmt == null )
-        {
-            dominant.setDistributionManagement( rDistMgmt );
-        }
-        else if ( rDistMgmt != null )
-        {
-            if ( dDistMgmt.getRepository() == null )
-            {
-                dDistMgmt.setRepository( rDistMgmt.getRepository() );
-            }
-            
-            if ( dDistMgmt.getSnapshotRepository() == null )
-            {
-                dDistMgmt.setSnapshotRepository( rDistMgmt.getSnapshotRepository() );
-            }
-            
-            if ( StringUtils.isEmpty( dDistMgmt.getDownloadUrl() ) )
-            {
-                dDistMgmt.setDownloadUrl( rDistMgmt.getDownloadUrl() );
-            }
-            
-            if ( dDistMgmt.getRelocation() == null )
-            {
-                dDistMgmt.setRelocation( rDistMgmt.getRelocation() );
-            }
-            
-            if ( dDistMgmt.getSite() == null )
-            {
-                dDistMgmt.setSite( rDistMgmt.getSite() );
-            }
-            
-            // NOTE: We SHOULD NOT be inheriting status, since this is an assessment of the POM quality.
-        }
-    }
-
-    private static List mergeRepositoryLists( List dominantRepositories, List recessiveRepositories )
-    {
-        List repositories = new ArrayList();
-        
-        for ( Iterator it = dominantRepositories.iterator(); it.hasNext(); )
-        {
-            Repository repository = (Repository) it.next();
-            
-            repositories.add( repository );
-        }
-        
-        for ( Iterator it = recessiveRepositories.iterator(); it.hasNext(); )
-        {
-            Repository repository = (Repository) it.next();
-            
-            if ( !repositories.contains( repository ) )
-            {
-                repositories.add( repository );
-            }
-        }
-        
-        return repositories;
-    }
-
-    private static void mergeDependencies( ModelBase dominant, ModelBase recessive )
-    {
-        Map depsMap = new HashMap();
-        
-        List deps = recessive.getDependencies();
-        
-        if ( deps != null )
-        {
-            for ( Iterator it = deps.iterator(); it.hasNext(); )
-            {
-                Dependency dependency = (Dependency) it.next();
-                depsMap.put( dependency.getManagementKey(), dependency );
-            }
-        }
-        
-        deps = dominant.getDependencies();
-        
-        if ( deps != null )
-        {
-            for ( Iterator it = deps.iterator(); it.hasNext(); )
-            {
-                Dependency dependency = (Dependency) it.next();
-                depsMap.put( dependency.getManagementKey(), dependency );
-            }
-        }
-        
-        dominant.setDependencies( new ArrayList( depsMap.values() ) );
-    }
-
-    public static void mergeReporting( ModelBase dominant, ModelBase recessive )
-    {
-        // Reports :: aggregate
-        Reporting dominantReporting = dominant.getReporting();
-        Reporting modelReporting = recessive.getReporting();
-
-        if ( dominantReporting != null && modelReporting != null )
-        {
-            if ( StringUtils.isEmpty( dominantReporting.getOutputDirectory() ) )
-            {
-                dominantReporting.setOutputDirectory( modelReporting.getOutputDirectory() );
-            }
-
-            Map mergedReportPlugins = new HashMap();
-
-            Map dominantReportersByKey = dominantReporting.getReportPluginsAsMap();
-
-            List parentReportPlugins = modelReporting.getPlugins();
-
-            if ( parentReportPlugins != null )
-            {
-                for ( Iterator it = parentReportPlugins.iterator(); it.hasNext(); )
-                {
-                    ReportPlugin recessiveReportPlugin = (ReportPlugin) it.next();
-
-                    String inherited = recessiveReportPlugin.getInherited();
-
-                    if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
-                    {
-                        ReportPlugin dominantReportPlugin = (ReportPlugin) dominantReportersByKey.get(
-                            recessiveReportPlugin.getKey() );
-
-                        ReportPlugin mergedReportPlugin = recessiveReportPlugin;
-
-                        if ( dominantReportPlugin != null )
-                        {
-                            mergedReportPlugin = dominantReportPlugin;
-
-                            mergeReportPlugins( dominantReportPlugin, recessiveReportPlugin );
-                        }
-                        else if ( StringUtils.isEmpty( inherited ) )
-                        {
-                            mergedReportPlugin.unsetInheritanceApplied();
-                        }
-
-                        mergedReportPlugins.put( mergedReportPlugin.getKey(), mergedReportPlugin );
-                    }
-                }
-            }
-
-            for ( Iterator it = dominantReportersByKey.entrySet().iterator(); it.hasNext(); )
-            {
-                Map.Entry entry = (Map.Entry) it.next();
-
-                String key = (String) entry.getKey();
-
-                if ( !mergedReportPlugins.containsKey( key ) )
-                {
-                    mergedReportPlugins.put( key, entry.getValue() );
-                }
-            }
-
-            dominantReporting.setPlugins( new ArrayList( mergedReportPlugins.values() ) );
-
-            dominantReporting.flushReportPluginMap();
-        }
-    }
-
-    public static void mergeDependencyManagementSections( ModelBase dominant, ModelBase recessive )
-    {
-        DependencyManagement recessiveDepMgmt = recessive.getDependencyManagement();
-
-        DependencyManagement dominantDepMgmt = dominant.getDependencyManagement();
-
-        if ( recessiveDepMgmt != null )
-        {
-            if ( dominantDepMgmt == null )
-            {
-                dominant.setDependencyManagement( recessiveDepMgmt );
-            }
-            else
-            {
-                List dominantDeps = dominantDepMgmt.getDependencies();
-
-                Map mappedDominantDeps = new TreeMap();
-                for ( Iterator it = dominantDeps.iterator(); it.hasNext(); )
-                {
-                    Dependency dep = (Dependency) it.next();
-                    mappedDominantDeps.put( dep.getManagementKey(), dep );
-                }
-
-                for ( Iterator it = recessiveDepMgmt.getDependencies().iterator(); it.hasNext(); )
-                {
-                    Dependency dep = (Dependency) it.next();
-                    if ( !mappedDominantDeps.containsKey( dep.getManagementKey() ) )
-                    {
-                        dominantDepMgmt.addDependency( dep );
-                    }
-                }
-            }
-        }
-    }
-
-    public static void mergeReportPlugins( ReportPlugin dominant, ReportPlugin recessive )
-    {
-        if ( StringUtils.isEmpty( dominant.getVersion() ) )
-        {
-            dominant.setVersion( recessive.getVersion() );
-        }
-
-        Xpp3Dom dominantConfig = (Xpp3Dom) dominant.getConfiguration();
-        Xpp3Dom recessiveConfig = (Xpp3Dom) recessive.getConfiguration();
-
-        dominant.setConfiguration( Xpp3Dom.mergeXpp3Dom( dominantConfig, recessiveConfig ) );
-
-        Map mergedReportSets = new HashMap();
-
-        Map dominantReportSetsById = dominant.getReportSetsAsMap();
-
-        for ( Iterator it = recessive.getReportSets().iterator(); it.hasNext(); )
-        {
-            ReportSet recessiveReportSet = (ReportSet) it.next();
-
-            String inherited = recessiveReportSet.getInherited();
-
-            if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
-            {
-                ReportSet dominantReportSet = (ReportSet) dominantReportSetsById.get( recessiveReportSet.getId() );
-
-                ReportSet merged = recessiveReportSet;
-
-                if ( dominantReportSet != null )
-                {
-                    merged = dominantReportSet;
-
-                    Xpp3Dom recessiveRSConfig = (Xpp3Dom) recessiveReportSet.getConfiguration();
-                    Xpp3Dom mergedRSConfig = (Xpp3Dom) merged.getConfiguration();
-
-                    merged.setConfiguration( Xpp3Dom.mergeXpp3Dom( mergedRSConfig, recessiveRSConfig ) );
-
-                    List mergedReports = merged.getReports();
-
-                    if ( mergedReports == null )
-                    {
-                        mergedReports = new ArrayList();
-
-                        merged.setReports( mergedReports );
-                    }
-
-                    List recessiveRSReports = recessiveReportSet.getReports();
-
-                    if ( recessiveRSReports != null )
-                    {
-                        for ( Iterator reportIterator = recessiveRSReports.iterator(); reportIterator.hasNext(); )
-                        {
-                            String report = (String) reportIterator.next();
-
-                            if ( !mergedReports.contains( report ) )
-                            {
-                                mergedReports.add( report );
-                            }
-                        }
-                    }
-                }
-                else if ( StringUtils.isEmpty( inherited ) )
-                {
-                    merged.unsetInheritanceApplied();
-                }
-
-                mergedReportSets.put( merged.getId(), merged );
-            }
-        }
-
-        for ( Iterator rsIterator = dominantReportSetsById.entrySet().iterator(); rsIterator.hasNext(); )
-        {
-            Map.Entry entry = (Map.Entry) rsIterator.next();
-
-            String key = (String) entry.getKey();
-
-            if ( !mergedReportSets.containsKey( key ) )
-            {
-                mergedReportSets.put( key, entry.getValue() );
-            }
-        }
-
-        dominant.setReportSets( new ArrayList( mergedReportSets.values() ) );
-
-        dominant.flushReportSetMap();
-    }
-
-    public static void mergeBuildBases( BuildBase dominant, BuildBase recessive )
-    {
-        // NOTE: This assumes that the dominant build is not null.
-        //If it is null, the action taken should have been external to this method.
-        
-        // if the parent build is null, obviously we cannot inherit from it...
-        if ( recessive != null )
-        {
-            if ( dominant.getDirectory() == null )
-            {
-                dominant.setDirectory( recessive.getDirectory() );
-            }
-
-            if ( dominant.getDefaultGoal() == null )
-            {
-                dominant.setDefaultGoal( recessive.getDefaultGoal() );
-            }
-
-            if ( dominant.getFinalName() == null )
-            {
-                dominant.setFinalName( recessive.getFinalName() );
-            }
-
-            List resources = dominant.getResources();
-            if ( resources == null || resources.isEmpty() )
-            {
-                dominant.setResources( recessive.getResources() );
-            }
-
-            resources = dominant.getTestResources();
-            if ( resources == null || resources.isEmpty() )
-            {
-                dominant.setTestResources( recessive.getTestResources() );
-            }
-
-            // Plugins are aggregated if Plugin.inherit != false
-            ModelUtils.mergePluginLists( dominant, recessive, true );
-
-            // Plugin management :: aggregate
-            PluginManagement dominantPM = dominant.getPluginManagement();
-            PluginManagement recessivePM = recessive.getPluginManagement();
-
-            if ( dominantPM == null && recessivePM != null )
-            {
-                dominant.setPluginManagement( recessivePM );
-            }
-            else
-            {
-                ModelUtils.mergePluginLists( dominant.getPluginManagement(), recessive.getPluginManagement(),
-                                             false );
-            }
-        }
-    }
-    
-    public static void overrideModelBase( Model target, ModelBase overrides )
+    public static List mergeRepositoryLists( List dominant, List recessive )
-        target.setDependencies( overrides.getDependencies() );
-        target.setDependencyManagement( overrides.getDependencyManagement() );
-        target.setDistributionManagement( overrides.getDistributionManagement() );
-        target.setModules( overrides.getModules() );
-        target.setPluginRepositories( overrides.getPluginRepositories() );
-        target.setReporting( overrides.getReporting() );
-        target.setRepositories( overrides.getRepositories() );
-    }
-
-    public static void overrideBuildBase( Build target, BuildBase overrides )
-    {
-        target.setDefaultGoal( overrides.getDefaultGoal() );
-        target.setFinalName( overrides.getFinalName() );
-        target.setPluginManagement( overrides.getPluginManagement() );
+        List repositories = new ArrayList();
-        target.setPlugins( overrides.getPlugins() );
-        target.flushPluginMap();
+        for ( Iterator it = dominant.iterator(); it.hasNext(); )
+        {
+            Repository repository = (Repository) it.next();
+            
+            repositories.add( repository );
+        }
-        target.setResources( overrides.getResources() );
-        target.setTestResources( overrides.getTestResources() );
+        for ( Iterator it = recessive.iterator(); it.hasNext(); )
+        {
+            Repository repository = (Repository) it.next();
+            
+            if ( !repositories.contains( repository ) )
+            {
+                repositories.add( repository );
+            }
+        }
+        
+        return repositories;

MOV31 UPD83 INS25 INS60 INS60 INS25 INS25 MOV21 MOV43 UPD42 MOV43 UPD42 INS27 INS8 MOV43 INS59 MOV43 INS59 MOV27 INS8 MOV27 INS8 INS32 INS33 INS21 INS42 MOV32 INS42 MOV14 INS27 INS21 INS24 MOV43 INS42 INS42 INS32 INS42 INS33 INS32 INS58 INS32 INS8 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 MOV43 INS59 INS42 INS42 MOV60 MOV25 UPD42 UPD42 INS42 INS42 INS42 INS32 MOV43 INS38 INS42 INS42 UPD42 INS11 INS32 MOV43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL14 DEL32 DEL33 DEL27 DEL8 DEL25 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31