PR: MNG-625
allow a plugin to specify the minimum Maven version (will apply for both building and its execution - this should be separated later).

If you are running an older version then it will not prompt to update when found, and will fail if it is encountered with a hardcoded version.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@220239 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.metadata.ResolutionGroup;
+import org.apache.maven.artifact.metadata.ResolutionGroup;
+import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.apache.maven.execution.RuntimeInformation;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+import java.io.IOException;
+
+    protected RuntimeInformation runtimeInformation;
+
+    protected MavenProjectBuilder mavenProjectBuilder;
-                mappingManager = pluginMappingBuilder.refreshPluginMappingManager( session
-                    .getPluginMappingManager(), project.getPluginArtifactRepositories(), session
-                    .getLocalRepository() );
+                mappingManager = pluginMappingBuilder.refreshPluginMappingManager( session.getPluginMappingManager(),
+                                                                                   project.getPluginArtifactRepositories(),
+                                                                                   session.getLocalRepository() );
-        // [HTTP-301] All version-resolution logic has been moved to DefaultPluginVersionManager. :)
+        // All version-resolution logic has been moved to DefaultPluginVersionManager.
-            String groupId = plugin.getGroupId();
-            String artifactId = plugin.getArtifactId();
-
-            plugin.setVersion(
-                pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings, localRepository ) );
+            String version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(),
+                                                                        project, settings, localRepository );
+            plugin.setVersion( version );
+
+                checkRequiredMavenVersion( plugin, localRepository, project.getPluginArtifactRepositories() );
+
-
-                // I think this ensures the plugin is not resolved multiple times
-                // TODO: put it back
-//                plugin.setVersion( pluginArtifact.getBaseVersion() );
-
+    /**
+     * @todo would be better to store this in the plugin descriptor, but then it won't be available to the version
+     * manager which executes before the plugin is instantiated
+     */
+    private void checkRequiredMavenVersion( Plugin plugin, ArtifactRepository localRepository, List remoteRepositories )
+        throws PluginVersionResolutionException, PluginManagerException
+    {
+        try
+        {
+            Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(), plugin.getArtifactId(),
+                                                                       plugin.getVersion() );
+            MavenProject project = mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories,
+                                                                            localRepository );
+            // if we don't have the required Maven version, then ignore an update
+            if ( project.getPrerequesites() != null && project.getPrerequesites().getMaven() != null )
+            {
+                DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
+                    project.getPrerequesites().getMaven() );
+                if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                {
+                    throw new PluginVersionResolutionException( plugin.getGroupId(), plugin.getArtifactId(),
+                                                                "Plugin requires Maven version " + requiredVersion );
+                }
+            }
+        }
+        catch ( ProjectBuildingException e )
+        {
+            throw new PluginVersionResolutionException( plugin.getGroupId(), plugin.getArtifactId(),
+                                                        "Unable to build project for plugin", e );
+        }
+        catch ( IOException e )
+        {
+            throw new PluginManagerException( "Unable to determine Maven version for comparison", e );
+        }
+    }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS42 INS42 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS54 INS66 INS66 INS42 INS42 INS42 INS8 INS12 INS12 INS60 INS21 INS60 INS60 INS25 INS44 INS8 INS44 INS8 MOV43 INS59 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS60 INS25 INS42 INS14 INS42 INS14 MOV42 MOV42 INS32 INS32 MOV42 MOV42 MOV42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS33 INS43 INS59 INS27 INS8 INS43 INS32 MOV32 INS45 INS42 INS43 INS45 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS34 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS43 MOV32 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21