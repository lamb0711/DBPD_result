All tests pass on my localhost...committing to see how it works on hudson.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@672782 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.project.interpolation.ModelInterpolationException;
-        else if ( projectPlugin.getVersion() == null || 
-                  Artifact.RELEASE_VERSION.equals(projectPlugin.getVersion()) || 
+        else if ( projectPlugin.getVersion() == null ||
+                  Artifact.RELEASE_VERSION.equals(projectPlugin.getVersion()) ||
-        List artifacts = getPluginArtifacts( pluginArtifact, projectPlugin, project,
-                                            session.getLocalRepository() );
+        Set<Artifact> artifactSet = getPluginArtifacts( pluginArtifact, projectPlugin, project, session.getLocalRepository() );
+
+        List<Artifact> artifacts = ( artifactSet == null || artifactSet.isEmpty() )
+                        ? new ArrayList<Artifact>() : new ArrayList<Artifact>( artifactSet );
-            List managedPluginArtifacts = realmManager.getPluginArtifacts( projectPlugin );
+            List<Artifact> managedPluginArtifacts = realmManager.getPluginArtifacts( projectPlugin );
-    private List getPluginArtifacts( Artifact pluginArtifact,
+    private Set<Artifact> getPluginArtifacts( Artifact pluginArtifact,
-        Set projectPluginDependencies;
+        Set<Artifact> projectPluginDependencies;
-        Set dependencies = new LinkedHashSet();
+        Set<Artifact> dependencies = new LinkedHashSet<Artifact>();
-        List resolved = new ArrayList( result.getArtifacts() );
+        Set<Artifact> resolved = new HashSet<Artifact>();
-        for ( Iterator it = resolved.iterator(); it.hasNext(); )
+        for ( Iterator<Artifact> it = result.getArtifacts().iterator(); it.hasNext(); )
-            Artifact artifact = (Artifact) it.next();
+            Artifact artifact = it.next();
+
+            resolved.add( artifact );
+        if ( !project.isConcrete() )
+        {
+            try
+            {
+                mavenProjectBuilder.calculateConcreteState( project, session.getProjectBuilderConfiguration() );
+            }
+            catch ( ModelInterpolationException e )
+            {
+                throw new PluginManagerException( mojoDescriptor, project, "Failed to calculate concrete state for project.", e );
+            }
+        }
+
+
+        try
+        {
+            mavenProjectBuilder.restoreDynamicState( project, session.getProjectBuilderConfiguration() );
+        }
+        catch ( ModelInterpolationException e )
+        {
+            throw new PluginManagerException( mojoDescriptor, project, "Failed to restore dynamic state for project.", e );
+        }

INS26 INS40 INS74 INS60 MOV43 INS43 INS25 INS54 INS74 INS74 INS59 UPD42 MOV42 INS74 INS74 INS74 INS59 INS38 INS8 INS8 INS12 INS43 INS43 UPD42 MOV43 INS43 INS42 INS16 INS43 INS43 MOV43 INS43 INS43 MOV43 INS42 INS14 INS74 MOV59 INS21 INS32 INS54 INS21 INS44 INS8 INS42 INS42 INS42 INS36 INS14 INS14 INS74 INS42 INS42 INS42 INS74 UPD42 MOV42 INS74 MOV43 INS43 UPD42 INS32 MOV43 INS32 INS42 INS42 INS8 INS12 INS32 INS43 INS42 INS53 INS27 INS74 INS74 INS42 MOV43 INS43 MOV43 INS43 INS43 INS43 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS14 INS27 INS32 INS43 INS43 MOV43 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42 DEL43 DEL43 DEL14 DEL42 DEL42 DEL42 DEL32 DEL59 DEL11