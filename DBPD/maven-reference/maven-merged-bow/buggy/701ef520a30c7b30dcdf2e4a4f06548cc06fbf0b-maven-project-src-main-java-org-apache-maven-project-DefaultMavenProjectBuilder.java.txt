Working on MNG-607

o Changed MavenMetadataSource to a component, to avoid having to lookup artifactFactory and projectBuilder in order to 
  construct it.

o Added add(..) method to ScmBean in the release plugin to allow addition of release-pom.xml

o Changed the PrepareReleaseMojo to resolve ONLY version and parent-version for the normal pom.xml, and fully resolve all
  artifacts used in the release-pom.xml, including version, parent-version, dependency closure (given by project.getArtifacts()), plugins, and reports. It will then add the release-pom.xml, and (attempt to) delete it before performing the final commit for next development version.

o Added some mapping methods to ArtifactUtils, to key by artifact.getId, and to create an Artifact.getId()-compatible string from parameters.

o Added TestProjectBuilder to remove the requirement in ProjectClasspathTest to modify the fields of the project builder directly.

o Cleaned up the AbstractReleaseMojo and PrepareReleaseMojo to avoid container lookups...they're now mojo parameters with the 'component.' prefix.

NOTE: Next step is to figure out how to use maven-scm to remove an SCM resource, to enable the prepare mojo to take the release-pom.xml back out of HEAD after the tag is complete.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@224413 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.ReportPlugin;
-    private ArtifactResolver artifactResolver;
+    protected ArtifactResolver artifactResolver;
+    
+    protected ArtifactMetadataSource artifactMetadataSource;
-
+    
-        ArtifactMetadataSource source;
-        try
-        {
-            source = (ArtifactMetadataSource) container.lookup( ArtifactMetadataSource.ROLE );
-        }
-        catch ( ComponentLookupException e )
-        {
-            throw new ProjectBuildingException( "Unable to get the artifact metadata source component", e );
-        }
-        return buildWithDependencies( projectDescriptor, localRepository, source, externalProfiles );
-    }
-
-    public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepository localRepository,
-                                               ArtifactMetadataSource artifactMetadataSource, List externalProfiles )
-        throws ProjectBuildingException, ArtifactResolutionException
-    {
+        
+        ensureMetadataSourceIsInitialized();
+        
+    
+    private void ensureMetadataSourceIsInitialized() 
+        throws ProjectBuildingException
+    {
+        if ( artifactMetadataSource == null )
+        {
+            try
+            {
+                artifactMetadataSource = (ArtifactMetadataSource) container.lookup( ArtifactMetadataSource.ROLE );
+            }
+            catch ( ComponentLookupException e )
+            {
+                throw new ProjectBuildingException( "Cannot lookup metadata source for building the project.", e );
+            }
+        }
+    }
+        Model originalModel = ModelUtils.cloneModel( model );
+        
-
+        
+        project.setOriginalModel( originalModel );
+
+    protected Set createReportArtifacts( List reports )
+    throws ProjectBuildingException
+    {
+        Set pluginArtifacts = new HashSet();
+        
+        if ( reports != null )
+        {
+            for ( Iterator i = reports.iterator(); i.hasNext(); )
+            {
+                ReportPlugin p = (ReportPlugin) i.next();
+
+                String version;
+                if ( StringUtils.isEmpty( p.getVersion() ) )
+                {
+                    version = "RELEASE";
+                }
+                else
+                {
+                    version = p.getVersion();
+                }
+
+                Artifact artifact = null;
+                try
+                {
+                    artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(), VersionRange
+                        .createFromVersionSpec( version ) );
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+                    throw new ProjectBuildingException( "Unable to parse plugin version", e );
+                }
+
+                if ( artifact != null )
+                {
+                    pluginArtifacts.add( artifact );
+                }
+            }
+        }
+
+        return pluginArtifacts;
+    }
+

INS26 MOV31 INS40 INS23 INS31 UPD83 INS83 MOV43 INS59 MOV29 UPD83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS21 INS25 INS60 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS32 INS27 MOV8 INS43 INS59 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS24 INS42 INS42 INS42 INS43 INS58 INS32 INS8 INS42 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS25 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS8 INS12 INS27 INS8 UPD42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS21 UPD45 INS43 INS32 INS42 INS42 INS7 INS7 INS7 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL43