o slowly (and safely) trying to make bits extractable from here so that i
can integration it into the embedder and then use the embedder for the

 o it-plugin
 o maven cli
 o ant tasks
 o eclipse m2 plugin
 


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@291435 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.settings.RuntimeInfo;
-import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+    private static Embedder embedder;
+
-        Embedder embedder = new Embedder();
+        embedder = new Embedder();
+
-        String userSettingsPath = null;
-
-        if ( commandLine.hasOption( CLIManager.ALTERNATE_USER_SETTINGS ) )
-        {
-            userSettingsPath = commandLine.getOptionValue( CLIManager.ALTERNATE_USER_SETTINGS );
-        }
-
+
-            MavenSettingsBuilder settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
-
-            if ( userSettingsPath != null )
-            {
-                File userSettingsFile = new File( userSettingsPath );
-
-                if ( userSettingsFile.exists() && !userSettingsFile.isDirectory() )
-                {
-                    settings = settingsBuilder.buildSettings( userSettingsFile );
-                }
-                else
-                {
-                    System.out.println( "WARNING: Alternate user settings file: " + userSettingsPath +
-                        " is invalid. Using default path." );
-                }
-            }
-
-            if ( settings == null )
-            {
-                settings = settingsBuilder.buildSettings();
-            }
+            settings = buildSettings( commandLine );
-        catch ( IOException e )
+        catch ( Exception e )
+
-        catch ( XmlPullParserException e )
-        {
-            showFatalError( "Unable to read settings.xml", e, showErrors );
-            return 1;
-        }
-        catch ( ComponentLookupException e )
-        {
-            showFatalError( "Unable to read settings.xml", e, showErrors );
-            return 1;
-        }
-
-        if ( commandLine.hasOption( CLIManager.BATCH_MODE ) )
-        {
-            settings.setInteractiveMode( false );
-        }
-
-        if ( commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES ) ||
-            commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES2 ) )
-        {
-            settings.getRuntimeInfo().setPluginUpdateOverride( Boolean.TRUE );
-        }
-        else if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_UPDATES ) )
-        {
-            settings.getRuntimeInfo().setPluginUpdateOverride( Boolean.FALSE );
-        }
-
-        if ( commandLine.hasOption( CLIManager.FORCE_PLUGIN_LATEST_CHECK ) )
-        {
-            settings.getRuntimeInfo().setCheckLatestPluginVersion( Boolean.TRUE );
-        }
-        else if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_LATEST_CHECK ) )
-        {
-            settings.getRuntimeInfo().setCheckLatestPluginVersion( Boolean.FALSE );
-        }
-
-        if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_REGISTRY ) )
-        {
-            settings.setUsePluginRegistry( false );
-        }
+
+
+
+
-            request = createRequest( embedder, commandLine, settings, eventDispatcher, loggerManager, profileManager );
+            request = createRequest( commandLine, settings, eventDispatcher, loggerManager, profileManager );
-            maven = createMavenInstance( embedder, settings.isInteractiveMode() );
+            maven = createMavenInstance( settings.isInteractiveMode() );
+
+    private static Settings buildSettings( CommandLine commandLine )
+        throws Exception
+    {
+        String userSettingsPath = null;
+
+        if ( commandLine.hasOption( CLIManager.ALTERNATE_USER_SETTINGS ) )
+        {
+            userSettingsPath = commandLine.getOptionValue( CLIManager.ALTERNATE_USER_SETTINGS );
+        }
+
+        Settings settings = null;
+
+        MavenSettingsBuilder settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
+
+        if ( userSettingsPath != null )
+        {
+            File userSettingsFile = new File( userSettingsPath );
+
+            if ( userSettingsFile.exists() && !userSettingsFile.isDirectory() )
+            {
+                settings = settingsBuilder.buildSettings( userSettingsFile );
+            }
+            else
+            {
+                System.out.println( "WARNING: Alternate user settings file: " + userSettingsPath +
+                    " is invalid. Using default path." );
+            }
+        }
+
+        if ( settings == null )
+        {
+            settings = settingsBuilder.buildSettings();
+        }
+
+        // why aren't these part of the runtime info? jvz.
+
+        if ( commandLine.hasOption( CLIManager.BATCH_MODE ) )
+        {
+            settings.setInteractiveMode( false );
+        }
+
+        if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_REGISTRY ) )
+        {
+            settings.setUsePluginRegistry( false );
+        }
+
+        // Create settings runtime info
+
+        settings.setRuntimeInfo( createRuntimeInfo( commandLine, settings ) );
+
+        return settings;
+    }
+
+    private static RuntimeInfo createRuntimeInfo( CommandLine commandLine, Settings settings )
+    {
+        RuntimeInfo runtimeInfo = new RuntimeInfo( settings );
+
+        if ( commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES ) ||
+            commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES2 ) )
+        {
+            runtimeInfo.setPluginUpdateOverride( Boolean.TRUE );
+        }
+        else if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_UPDATES ) )
+        {
+            runtimeInfo.setPluginUpdateOverride( Boolean.FALSE );
+        }
+
+        if ( commandLine.hasOption( CLIManager.FORCE_PLUGIN_LATEST_CHECK ) )
+        {
+            runtimeInfo.setCheckLatestPluginVersion( Boolean.TRUE );
+        }
+        else if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_LATEST_CHECK ) )
+        {
+            runtimeInfo.setCheckLatestPluginVersion( Boolean.FALSE );
+        }
+
+        return runtimeInfo;
+    }
+
+
-    private static MavenExecutionRequest createRequest( Embedder embedder, CommandLine commandLine, Settings settings,
-                                                        EventDispatcher eventDispatcher, LoggerManager loggerManager,
+    private static MavenExecutionRequest createRequest( CommandLine commandLine,
+                                                        Settings settings,
+                                                        EventDispatcher eventDispatcher,
+                                                        LoggerManager loggerManager,
-    private static Maven createMavenInstance( Embedder embedder, boolean interactive )
+    private static Maven createMavenInstance( boolean interactive )
-        
+
+
-            
+

MOV26 UPD40 INS23 INS31 INS31 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS42 INS44 INS43 MOV8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS42 MOV21 INS54 INS42 INS43 INS42 INS42 MOV60 MOV25 INS60 MOV25 MOV25 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS60 MOV25 INS25 INS41 INS7 INS8 MOV12 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 MOV32 INS8 INS25 INS42 INS42 MOV14 MOV21 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS14 INS21 MOV32 INS8 INS7 UPD43 INS42 INS42 INS42 INS43 INS42 INS32 INS21 INS42 INS32 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS40 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL32 DEL40 DEL32 DEL42 DEL43 DEL42 DEL44 DEL34 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL34 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44