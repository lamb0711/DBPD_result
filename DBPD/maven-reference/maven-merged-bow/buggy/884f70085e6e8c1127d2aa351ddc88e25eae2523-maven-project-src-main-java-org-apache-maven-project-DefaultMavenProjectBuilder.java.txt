o integrate changes made in maven-artifact for non fail-fast and request/result usage in the embedder for
  use in IDE integration to provide as much feedback as possible.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@571862 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.manager.WagonManager;
+import org.apache.maven.artifact.manager.WagonManager;
+import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
-    public MavenProject build( File projectDescriptor, ArtifactRepository localRepository, ProfileManager profileManager )
+    public MavenProject build( File projectDescriptor,
+                               ArtifactRepository localRepository,
+                               ProfileManager profileManager )
-    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository, ProfileManager profileManager )
+    public MavenProject buildStandaloneSuperProject( ArtifactRepository localRepository,
+                                                     ProfileManager profileManager )
-        project.setManagedVersionMap(createManagedVersionMap(projectId, superModel.getDependencyManagement(), null));
+        project.setManagedVersionMap( createManagedVersionMap( projectId, superModel.getDependencyManagement(), null ) );
-    public MavenProject buildWithDependencies( File projectDescriptor,
-                                               ArtifactRepository localRepository,
-                                               ProfileManager profileManager )
-        throws ProjectBuildingException, ArtifactResolutionException, ArtifactNotFoundException
+    public MavenProjectBuildingResult buildWithDependencies( File projectDescriptor,
+                                                             ArtifactRepository localRepository,
+                                                             ProfileManager profileManager )
+        throws ProjectBuildingException
-    /**
-     * @todo move to metadatasource itself?
-     */
-    public MavenProject buildWithDependencies( File projectDescriptor,
-                                               ArtifactRepository localRepository,
-                                               ProfileManager profileManager,
-                                               TransferListener transferListener )
-        throws ProjectBuildingException, ArtifactResolutionException, ArtifactNotFoundException
+    /** @todo move to metadatasource itself? */
+    public MavenProjectBuildingResult buildWithDependencies( File projectDescriptor,
+                                                             ArtifactRepository localRepository,
+                                                             ProfileManager profileManager,
+                                                             TransferListener transferListener )
+        throws ProjectBuildingException
-                                                "Unable to build project due to an invalid dependency version: " +
-                                                    e.getMessage(), e );
+                "Unable to build project due to an invalid dependency version: " +
+                    e.getMessage(), e );
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( project.getDependencyArtifacts(),
-                                                                                projectArtifact, managedVersions,
-                                                                                localRepository,
-                                                                                project.getRemoteArtifactRepositories(),
-                                                                                artifactMetadataSource );
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
+            .setArtifact( projectArtifact )
+            .setArtifactDependencies( project.getDependencyArtifacts() )
+            .setLocalRepository( localRepository )
+            .setRemoteRepostories( project.getRemoteArtifactRepositories() )
+            .setManagedVersionMap( managedVersions )
+            .setMetadataSource( artifactMetadataSource );
+
+        ArtifactResolutionResult result = artifactResolver.resolve( request );
-        return project;
+        return new MavenProjectBuildingResult( project, result );
-                                                    e );
+                    e );
-    private Map createManagedVersionMap( String projectId, DependencyManagement dependencyManagement, MavenProject parent )
+    private Map createManagedVersionMap( String projectId,
+                                         DependencyManagement dependencyManagement,
+                                         MavenProject parent )
-        if ( ( dependencyManagement != null ) && ( (deps = dependencyManagement.getDependencies()) != null ) && ( deps.size() > 0 ))
+        if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) && ( deps.size() > 0 ) )
-                                                                                  versionRange, d.getType(),
-                                                                                  d.getClassifier(), d.getScope(),
-                                                                                  d.isOptional() );
+                        versionRange, d.getType(),
+                        d.getClassifier(), d.getScope(),
+                        d.isOptional() );
-            container.addContextValue("SystemProperties", System.getProperties());
+            container.addContextValue( "SystemProperties", System.getProperties() );
-                                              model,
-                                              localRepository,
-                                              buildArtifactRepositories( getSuperModel() ),
-                                              projectDescriptor,
-                                              profileManager,
-                                              STRICT_MODEL_PARSING );
+            model,
+            localRepository,
+            buildArtifactRepositories( getSuperModel() ),
+            projectDescriptor,
+            profileManager,
+            STRICT_MODEL_PARSING );
-                                                    "Invalid project file: distribution status must not be specified for a project outside of the repository" );
+                    "Invalid project file: distribution status must not be specified for a project outside of the repository" );
-                              + artifact.getArtifactId() + ":" + artifact.getVersion() + ") of type: "
-                              + artifact.getType() + "; constructing POM artifact instead." );
+                + artifact.getArtifactId() + ":" + artifact.getVersion() + ") of type: "
+                + artifact.getType() + "; constructing POM artifact instead." );
-                                                                     artifact.getArtifactId(),
-                                                                     artifact.getVersion(),
-                                                                     artifact.getScope() );
+                artifact.getArtifactId(),
+                artifact.getVersion(),
+                artifact.getScope() );
-                                       ArtifactStatus status, File file,
+                                       ArtifactStatus status,
+                                       File file,
-                                                                                      parentSearchRepositories,
-                                                                                      projectDir, explicitlyActive,
-                                                                                      explicitlyInactive );
+            parentSearchRepositories,
+            projectDir, explicitlyActive,
+            explicitlyInactive );
-                                       lineage,
-                                       localRepository,
-                                       projectDir,
-                                       parentSearchRepositories,
-                                       aggregatedRemoteWagonRepositories,
-                                       externalProfileManager,
-                                       strict );
+                lineage,
+                localRepository,
+                projectDir,
+                parentSearchRepositories,
+                aggregatedRemoteWagonRepositories,
+                externalProfileManager,
+                strict );
-                                                               project.getParent() ) );
+            project.getParent() ) );
-    private LinkedHashSet collectInitialRepositories( Model model, Model superModel, List parentSearchRepositories,
-                                                      File projectDir, List explicitlyActive, List explicitlyInactive )
+    private LinkedHashSet collectInitialRepositories( Model model,
+                                                      Model superModel,
+                                                      List parentSearchRepositories,
+                                                      File projectDir,
+                                                      List explicitlyActive,
+                                                      List explicitlyInactive )
-    private void collectInitialRepositoriesFromModel( LinkedHashSet collected, Model model, File projectDir,
-                                                      List explicitlyActive, List explicitlyInactive )
+    private void collectInitialRepositoriesFromModel( LinkedHashSet collected,
+                                                      Model model,
+                                                      File projectDir,
+                                                      List explicitlyActive,
+                                                      List explicitlyInactive )
-                                                                                          explicitlyActive,
-                                                                                          explicitlyInactive );
+            explicitlyActive,
+            explicitlyInactive );
-                                                    "Failed to construct ArtifactRepository instances for repositories declared in: "
-                                                        + model.getId(), e );
+                    "Failed to construct ArtifactRepository instances for repositories declared in: "
+                        + model.getId(), e );
-    private String safeVersionlessKey( String groupId, String artifactId )
+    private String safeVersionlessKey( String groupId,
+                                       String artifactId )
-                                                                        project.getVersion(), project.getPackaging() );
+            project.getVersion(), project.getPackaging() );
-                                                    validationResult );
+                validationResult );
-                                                                              explicitlyInactive ) );
+                explicitlyInactive ) );
-    private Model readModel( String projectId, File file, boolean strict )
+    private Model readModel( String projectId,
+                             File file,
+                             boolean strict )
-                                                "Could not find the model file '" + file.getAbsolutePath() + "'.", e );
+                "Could not find the model file '" + file.getAbsolutePath() + "'.", e );
-    private Model readModel( String projectId, String pomLocation, Reader reader, boolean strict )
+    private Model readModel( String projectId,
+                             String pomLocation,
+                             Reader reader,
+                             boolean strict )
-                                                    "Parse error reading POM. Reason: " + e.getMessage(), e );
+                "Parse error reading POM. Reason: " + e.getMessage(), e );
-    private Model readModel( String projectId, URL url, boolean strict )
+    private Model readModel( String projectId,
+                             URL url,
+                             boolean strict )
-    private static String createCacheKey( String groupId, String artifactId, String version )
+    private static String createCacheKey( String groupId,
+                                          String artifactId,
+                                          String version )
-    protected Set createPluginArtifacts( String projectId, List plugins )
+    protected Set createPluginArtifacts( String projectId,
+                                         List plugins )
-                                                                 VersionRange.createFromVersionSpec( version ) );
+                    VersionRange.createFromVersionSpec( version ) );
-    protected Set createReportArtifacts( String projectId, List reports )
+    protected Set createReportArtifacts( String projectId,
+                                         List reports )
-                                                                     VersionRange.createFromVersionSpec( version ) );
+                        VersionRange.createFromVersionSpec( version ) );
-    protected Set createExtensionArtifacts( String projectId, List extensions )
+    protected Set createExtensionArtifacts( String projectId,
+                                            List extensions )

MOV26 INS26 INS40 UPD43 UPD43 UPD42 UPD42 INS60 UPD66 INS43 MOV43 INS59 INS14 INS42 UPD42 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV32 INS32 INS42 MOV42 INS32 UPD42 MOV42 MOV32 INS14 UPD42 MOV42 MOV42 INS43 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42