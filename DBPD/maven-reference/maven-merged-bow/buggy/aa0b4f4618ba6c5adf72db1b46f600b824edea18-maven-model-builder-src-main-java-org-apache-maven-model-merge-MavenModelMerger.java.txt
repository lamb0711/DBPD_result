[MNG-3133] DefaultModelInheritence::appendPath assumes it is operating on interpolated/literal paths

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@930411 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedList;
-import java.util.StringTokenizer;
-        String uncleanPath = parentPath;
-
-        if ( pathAdjustment != null && pathAdjustment.length() > 0 )
-        {
-            uncleanPath += "/" + pathAdjustment;
-        }
-
-        if ( childPath != null )
-        {
-            uncleanPath += "/" + childPath;
-        }
-
-        String cleanedPath = "";
-
-        int protocolIdx = uncleanPath.indexOf( "://" );
-
-        if ( protocolIdx > -1 )
-        {
-            cleanedPath = uncleanPath.substring( 0, protocolIdx + 3 );
-            uncleanPath = uncleanPath.substring( protocolIdx + 3 );
-        }
-
-        if ( uncleanPath.startsWith( "//" ) )
-        {
-            // preserve leading double slash for UNC paths like "file:////host/pom.xml"
-            cleanedPath += "//";
-        }
-        else if ( uncleanPath.startsWith( "/" ) )
-        {
-            cleanedPath += "/";
-        }
-
-        return cleanedPath + resolvePath( uncleanPath );
+        String path = parentPath;
+        path = concatPath( path, pathAdjustment );
+        path = concatPath( path, childPath );
+        return path;
-    private String resolvePath( String uncleanPath )
+    private String concatPath( String base, String path )
-        LinkedList<String> pathElements = new LinkedList<String>();
+        String result = base;
-        StringTokenizer tokenizer = new StringTokenizer( uncleanPath, "/" );
-
-        while ( tokenizer.hasMoreTokens() )
+        if ( path != null && path.length() > 0 )
-            String token = tokenizer.nextToken();
-
-            if ( token.equals( "" ) )
+            if ( ( result.endsWith( "/" ) && !path.startsWith( "/" ) )
+                || ( !result.endsWith( "/" ) && path.startsWith( "/" ) ) )
-                // Empty path entry ("...//.."), remove.
+                result += path;
-            else if ( token.equals( ".." ) )
+            else if ( result.endsWith( "/" ) && path.startsWith( "/" ) )
-                if ( !pathElements.isEmpty() )
-                {
-                    pathElements.removeLast();
-                }
+                result += path.substring( 1 );
-                pathElements.addLast( token );
+                result += '/';
+                result += path;
-        }
-
-        StringBuilder cleanedPath = new StringBuilder( 128 );
-
-        while ( !pathElements.isEmpty() )
-        {
-            cleanedPath.append( pathElements.removeFirst() );
-            if ( !pathElements.isEmpty() )
+            if ( base.endsWith( "/" ) && !result.endsWith( "/" ) )
-                cleanedPath.append( '/' );
+                result += '/';
-        return cleanedPath.toString();
+        return result;

INS31 INS31 MOV83 MOV43 MOV42 MOV44 MOV44 MOV44 INS8 INS83 MOV43 INS42 INS44 MOV44 INS8 MOV60 INS21 MOV21 INS41 MOV43 INS42 UPD42 MOV60 INS25 MOV41 INS7 UPD7 INS42 MOV43 INS27 INS8 INS42 UPD42 INS42 INS32 INS42 INS32 UPD42 INS42 INS27 INS27 INS25 INS25 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS33 INS32 INS34 INS27 MOV8 INS25 INS27 MOV8 INS42 UPD42 MOV42 INS36 INS36 INS27 MOV8 MOV8 INS32 INS38 INS27 INS27 INS32 INS32 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS45 MOV32 INS7 INS32 INS38 INS38 INS32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS7 INS7 INS7 UPD42 UPD42 INS45 INS42 INS13 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS32 UPD42 MOV42 MOV42 MOV45 INS42 INS32 INS42 INS13 INS42 INS42 UPD42 MOV42 MOV42 UPD45 MOV45 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS34 DEL40 DEL26 DEL40 DEL26 DEL42 DEL45 DEL42 DEL27 DEL39 DEL42 DEL42 DEL45 DEL32 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL59 DEL60 DEL34 DEL38 DEL27 DEL42 DEL42 DEL34 DEL42 DEL34 DEL27 DEL32 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL32 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL8 DEL32 DEL42 DEL42 DEL32 DEL38 DEL25 DEL8 DEL25 DEL25 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL32 DEL21 DEL38 DEL25 DEL8 DEL61 DEL8 DEL31