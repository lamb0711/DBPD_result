o push all pom format specific handling up to the front-end, internally inside maven we do not care what the source of POM information is


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@824098 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Properties;
+import java.util.StringTokenizer;
+import java.util.Map.Entry;
+import org.apache.maven.model.locator.ModelLocator;
+import org.apache.maven.repository.ArtifactTransferListener;
+import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.util.cli.CommandLineUtils;
+    private ModelLocator modelLocator;
+    
-            logFile = CLIRequestUtils.resolveFile( logFile, workingDirectory );
+            logFile = resolveFile( logFile, workingDirectory );
+            
+            modelLocator = container.lookup( ModelLocator.class );
-        CLIRequestUtils.populateProperties( request, commandLine );
+        populateProperties( request, commandLine );
-        CLIRequestUtils.populateRequest( request, commandLine, workingDirectory, debug, quiet, showErrors );
+        populateRequest( request, commandLine, workingDirectory, debug, quiet, showErrors );
-            userSettingsFile = CLIRequestUtils.resolveFile( userSettingsFile, workingDirectory );
+            userSettingsFile = resolveFile( userSettingsFile, workingDirectory );
-            globalSettingsFile = CLIRequestUtils.resolveFile( globalSettingsFile, workingDirectory );
+            globalSettingsFile = resolveFile( globalSettingsFile, workingDirectory );
+    public void populateProperties( MavenExecutionRequest request, CommandLine commandLine )
+    {
+        Properties systemProperties = new Properties();
+        Properties userProperties = new Properties();
+        populateProperties( commandLine, systemProperties, userProperties );
+        request.setUserProperties( userProperties );
+        request.setSystemProperties( systemProperties );
+    }
+    
+    public MavenExecutionRequest populateRequest( MavenExecutionRequest request, CommandLine commandLine,
+                                                  String workingDirectory, boolean debug, boolean quiet, boolean showErrors )
+    {
+        // ----------------------------------------------------------------------
+        // Now that we have everything that we need we will fire up plexus and
+        // bring the maven component to life for use.
+        // ----------------------------------------------------------------------
+
+        if ( commandLine.hasOption( CLIManager.BATCH_MODE ) )
+        {
+            request.setInteractiveMode( false );
+        }
+
+        boolean pluginUpdateOverride = false;
+
+        if ( commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES )
+            || commandLine.hasOption( CLIManager.FORCE_PLUGIN_UPDATES2 ) )
+        {
+            pluginUpdateOverride = true;
+        }
+        else if ( commandLine.hasOption( CLIManager.SUPPRESS_PLUGIN_UPDATES ) )
+        {
+            pluginUpdateOverride = false;
+        }
+
+        boolean noSnapshotUpdates = false;
+        if ( commandLine.hasOption( CLIManager.SUPRESS_SNAPSHOT_UPDATES ) )
+        {
+            noSnapshotUpdates = true;
+        }
+
+        // ----------------------------------------------------------------------
+        //
+        // ----------------------------------------------------------------------
+
+        List<String> goals = commandLine.getArgList();
+
+        boolean recursive = true;
+
+        // this is the default behavior.
+        String reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_FAST;
+
+        if ( commandLine.hasOption( CLIManager.NON_RECURSIVE ) )
+        {
+            recursive = false;
+        }
+
+        if ( commandLine.hasOption( CLIManager.FAIL_FAST ) )
+        {
+            reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_FAST;
+        }
+        else if ( commandLine.hasOption( CLIManager.FAIL_AT_END ) )
+        {
+            reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_AT_END;
+        }
+        else if ( commandLine.hasOption( CLIManager.FAIL_NEVER ) )
+        {
+            reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_NEVER;
+        }
+
+        if ( commandLine.hasOption( CLIManager.OFFLINE ) )
+        {
+            request.setOffline( true );
+        }
+
+        boolean updateSnapshots = false;
+
+        if ( commandLine.hasOption( CLIManager.UPDATE_SNAPSHOTS ) )
+        {
+            updateSnapshots = true;
+        }
+
+        String globalChecksumPolicy = null;
+
+        if ( commandLine.hasOption( CLIManager.CHECKSUM_FAILURE_POLICY ) )
+        {
+            globalChecksumPolicy = MavenExecutionRequest.CHECKSUM_POLICY_FAIL;
+        }
+        else if ( commandLine.hasOption( CLIManager.CHECKSUM_WARNING_POLICY ) )
+        {
+            globalChecksumPolicy = MavenExecutionRequest.CHECKSUM_POLICY_WARN;
+        }
+
+        File baseDirectory = new File( workingDirectory, "" ).getAbsoluteFile();
+
+        // ----------------------------------------------------------------------
+        // Profile Activation
+        // ----------------------------------------------------------------------
+
+        List<String> activeProfiles = new ArrayList<String>();
+
+        List<String> inactiveProfiles = new ArrayList<String>();
+
+        if ( commandLine.hasOption( CLIManager.ACTIVATE_PROFILES ) )
+        {
+            String [] profileOptionValues = commandLine.getOptionValues( CLIManager.ACTIVATE_PROFILES );
+            if ( profileOptionValues != null )
+            {
+                for ( int i = 0; i < profileOptionValues.length; ++i )
+                {
+                    StringTokenizer profileTokens = new StringTokenizer( profileOptionValues[i] , "," );
+
+                    while ( profileTokens.hasMoreTokens() )
+                    {
+                        String profileAction = profileTokens.nextToken().trim();
+
+                        if ( profileAction.startsWith( "-" ) || profileAction.startsWith( "!" ) )
+                        {
+                            inactiveProfiles.add( profileAction.substring( 1 ) );
+                        }
+                        else if ( profileAction.startsWith( "+" ) )
+                        {
+                            activeProfiles.add( profileAction.substring( 1 ) );
+                        }
+                        else
+                        {
+                            activeProfiles.add( profileAction );
+                        }
+                    }
+                }
+            }
+        }
+
+        ArtifactTransferListener transferListener;
+
+        if ( request.isInteractiveMode() )
+        {
+            transferListener = new ConsoleMavenTransferListener();
+        }
+        else
+        {
+            transferListener = new BatchModeMavenTransferListener();
+        }
+
+        transferListener.setShowChecksumEvents( false );
+
+        String alternatePomFile = null;
+        if ( commandLine.hasOption( CLIManager.ALTERNATE_POM_FILE ) )
+        {
+            alternatePomFile = commandLine.getOptionValue( CLIManager.ALTERNATE_POM_FILE );
+        }
+
+        int loggingLevel;
+
+        if ( debug )
+        {
+            loggingLevel = MavenExecutionRequest.LOGGING_LEVEL_DEBUG;
+        }
+        else if ( quiet )
+        {
+            // TODO: we need to do some more work here. Some plugins use sys out or log errors at info level.
+            // Ideally, we could use Warn across the board
+            loggingLevel = MavenExecutionRequest.LOGGING_LEVEL_ERROR;
+            // TODO:Additionally, we can't change the mojo level because the component key includes the version and it isn't known ahead of time. This seems worth changing.
+        }
+        else
+        {
+            loggingLevel = MavenExecutionRequest.LOGGING_LEVEL_INFO;
+        }
+
+        Properties systemProperties = new Properties();
+        Properties userProperties = new Properties();
+        populateProperties( commandLine, systemProperties, userProperties );
+
+        File userToolchainsFile;
+        if ( commandLine.hasOption( CLIManager.ALTERNATE_USER_TOOLCHAINS ) )
+        {
+            userToolchainsFile = new File( commandLine.getOptionValue( CLIManager.ALTERNATE_USER_TOOLCHAINS ) );
+            userToolchainsFile = resolveFile( userToolchainsFile, workingDirectory );
+        }
+        else
+        {
+            userToolchainsFile = MavenCli.DEFAULT_USER_TOOLCHAINS_FILE;
+        }
+
+        request
+            .setBaseDirectory( baseDirectory )
+            .setGoals( goals )
+            .setSystemProperties( systemProperties )
+            .setUserProperties( userProperties )
+            .setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast
+            .setRecursive( recursive ) // default: true
+            .setShowErrors( showErrors ) // default: false
+            .setUsePluginUpdateOverride( pluginUpdateOverride )
+            .addActiveProfiles( activeProfiles ) // optional
+            .addInactiveProfiles( inactiveProfiles ) // optional
+            .setLoggingLevel( loggingLevel ) // default: info
+            .setTransferListener( transferListener ) // default: batch mode which goes along with interactive
+            .setUpdateSnapshots( updateSnapshots ) // default: false
+            .setNoSnapshotUpdates( noSnapshotUpdates ) // default: false
+            .setGlobalChecksumPolicy( globalChecksumPolicy ) // default: warn
+            .setUserToolchainsFile( userToolchainsFile );
+
+        if ( alternatePomFile != null )
+        {
+            request.setPom( resolveFile( new File( alternatePomFile ), workingDirectory ) );
+        }
+        else if ( request.getPom() != null && !request.getPom().isAbsolute() )
+        {
+            request.setPom( request.getPom().getAbsoluteFile() );
+        }
+
+        if ( ( request.getPom() != null ) && ( request.getPom().getParentFile() != null ) )
+        {
+            request.setBaseDirectory( request.getPom().getParentFile() );
+        }
+        else if ( ( request.getPom() == null ) && ( request.getBaseDirectory() != null ) )
+        {
+            File pom = modelLocator.locatePom( new File( request.getBaseDirectory() ) );
+
+            request.setPom( pom );
+        }
+        // TODO: Is this correct?
+        else if ( request.getBaseDirectory() == null )
+        {
+            request.setBaseDirectory( new File( System.getProperty( "user.dir" ) ) );
+        }        
+        
+        if ( commandLine.hasOption( CLIManager.RESUME_FROM ) )
+        {
+            request.setResumeFrom( commandLine.getOptionValue( CLIManager.RESUME_FROM ) );
+        }
+
+        if ( commandLine.hasOption( CLIManager.PROJECT_LIST ) )
+        {
+            String projectList = commandLine.getOptionValue( CLIManager.PROJECT_LIST );
+            String[] projects = StringUtils.split( projectList, "," );
+            request.setSelectedProjects( Arrays.asList( projects ) );
+        }
+
+        if ( commandLine.hasOption( CLIManager.ALSO_MAKE ) && !commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        {
+            request.setMakeBehavior( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM );
+        }
+        else if ( !commandLine.hasOption( CLIManager.ALSO_MAKE )
+            && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        {
+            request.setMakeBehavior( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM );
+        }
+        else if ( commandLine.hasOption( CLIManager.ALSO_MAKE )
+            && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        {
+            request.setMakeBehavior( MavenExecutionRequest.REACTOR_MAKE_BOTH );
+        }
+
+        String localRepoProperty = request.getUserProperties().getProperty( MavenCli.LOCAL_REPO_PROPERTY );
+
+        if ( localRepoProperty == null )
+        {
+            localRepoProperty = request.getSystemProperties().getProperty( MavenCli.LOCAL_REPO_PROPERTY );
+        }
+
+        if ( localRepoProperty != null )
+        {
+            request.setLocalRepositoryPath( localRepoProperty );
+        }
+
+        return request;
+    }
+
+    static File resolveFile( File file, String workingDirectory )
+    {
+        if ( file == null )
+        {
+            return null;
+        }
+        else if ( file.isAbsolute() )
+        {
+            return file;
+        }
+        else if ( file.getPath().startsWith( File.separator ) )
+        {
+            // drive-relative Windows path
+            return file.getAbsoluteFile();
+        }
+        else
+        {
+            return new File( workingDirectory, file.getPath() );
+        }
+    }
+
+    // ----------------------------------------------------------------------
+    // System properties handling
+    // ----------------------------------------------------------------------
+
+    static void populateProperties( CommandLine commandLine, Properties systemProperties, Properties userProperties )
+    {
+        // add the env vars to the property set, with the "env." prefix
+        // XXX support for env vars should probably be removed from the ModelInterpolator
+        try
+        {
+            Properties envVars = CommandLineUtils.getSystemEnvVars();
+            for ( Entry<Object, Object> e : envVars.entrySet() )
+            {
+                systemProperties.setProperty( "env." + e.getKey().toString(), e.getValue().toString() );
+            }
+        }
+        catch ( IOException e )
+        {
+            System.err.println( "Error getting environment vars for profile activation: " + e );
+        }
+
+        // ----------------------------------------------------------------------
+        // Options that are set on the command line become system properties
+        // and therefore are set in the session properties. System properties
+        // are most dominant.
+        // ----------------------------------------------------------------------
+
+        if ( commandLine.hasOption( CLIManager.SET_SYSTEM_PROPERTY ) )
+        {
+            String[] defStrs = commandLine.getOptionValues( CLIManager.SET_SYSTEM_PROPERTY );
+
+            if ( defStrs != null )
+            {
+                for ( int i = 0; i < defStrs.length; ++i )
+                {
+                    setCliProperty( defStrs[i], userProperties );
+                }
+            }
+        }
+
+        systemProperties.putAll( System.getProperties() );
+    }
+
+    private static void setCliProperty( String property, Properties properties )
+    {
+        String name;
+
+        String value;
+
+        int i = property.indexOf( "=" );
+
+        if ( i <= 0 )
+        {
+            name = property.trim();
+
+            value = "true";
+        }
+        else
+        {
+            name = property.substring( 0, i ).trim();
+
+            value = property.substring( i + 1 ).trim();
+        }
+
+        properties.setProperty( name, value );
+
+        // ----------------------------------------------------------------------
+        // I'm leaving the setting of system properties here as not to break
+        // the SystemPropertyProfileActivator. This won't harm embedding. jvz.
+        // ----------------------------------------------------------------------
+
+        System.setProperty( name, value );
+    }    

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS25 INS60 INS25 INS60 INS25 INS60 INS60 INS60 INS25 INS25 INS25 INS60 INS25 INS60 INS25 INS60 INS60 INS60 INS25 INS60 INS25 INS21 INS60 INS25 INS60 INS25 INS60 INS60 INS21 INS60 INS25 INS21 INS25 INS25 INS25 INS25 INS25 INS60 INS25 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS54 INS25 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS21 INS21 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS8 INS39 INS59 INS27 INS8 INS25 INS39 INS59 INS32 INS8 INS74 INS59 INS39 INS59 INS43 INS59 INS32 INS8 INS32 INS8 INS25 INS32 INS8 INS39 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS25 INS43 INS59 INS74 INS59 INS74 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS8 INS32 INS43 INS59 INS32 INS8 INS39 INS59 INS42 INS8 INS25 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS8 INS8 INS32 INS27 INS8 INS25 INS27 INS8 INS25 INS32 INS8 INS32 INS8 INS27 INS8 INS25 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS27 INS8 INS25 INS42 INS42 INS42 INS8 INS12 INS32 INS8 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS32 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS42 INS9 INS32 INS32 INS21 INS32 INS8 INS42 INS9 INS42 INS42 INS40 INS21 INS43 INS43 INS42 INS32 INS42 INS9 INS42 INS42 INS40 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS40 INS21 INS42 INS9 INS42 INS42 INS40 INS21 INS42 INS42 INS33 INS42 INS42 INS40 INS21 INS32 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS60 INS25 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS9 INS42 INS42 INS33 INS42 INS42 INS40 INS21 INS42 INS21 INS42 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS21 INS21 INS32 INS42 INS42 INS42 INS33 INS21 INS27 INS8 INS36 INS36 INS21 INS27 INS8 INS25 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS60 INS60 INS21 INS32 INS38 INS21 INS27 INS8 INS25 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS41 INS32 INS8 INS25 INS60 INS70 INS44 INS8 INS42 INS42 INS40 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS43 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS7 INS42 INS42 INS40 INS21 INS7 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS40 INS21 INS32 INS8 INS32 INS7 INS7 INS42 INS42 INS40 INS21 INS14 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS5 INS59 INS27 INS8 INS7 INS7 INS7 INS7 INS21 INS21 INS43 INS43 INS7 INS7 INS7 INS32 INS42 INS42 INS32 INS27 INS38 INS21 INS27 INS27 INS32 INS36 INS36 INS60 INS21 INS27 INS8 INS32 INS43 INS59 INS5 INS59 INS32 INS42 INS42 INS40 INS32 INS32 INS38 INS32 INS21 INS27 INS8 INS32 INS42 INS40 INS7 INS32 INS33 INS42 INS42 INS41 INS32 INS8 INS8 INS43 INS59 INS44 INS32 INS8 INS43 INS42 INS21 INS5 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS45 INS7 INS7 INS7 INS7 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS9 INS7 INS42 INS9 INS42 INS9 INS42 INS40 INS7 INS42 INS42 INS40 INS21 INS42 INS42 INS9 INS42 INS9 INS42 INS40 INS7 INS43 INS42 INS45 INS43 INS43 INS43 INS43 INS43 INS85 INS42 INS32 INS42 INS33 INS24 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS40 INS7 INS7 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS32 INS32 INS32 INS33 INS32 INS33 INS42 INS42 INS32 INS27 INS27 INS43 INS59 INS32 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS32 INS32 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS41 INS41 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS33 INS24 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS57 INS42 INS9 INS42 INS40 INS7 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS58 INS27 INS38 INS8 INS43 INS43 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS33 INS32 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS32 INS42 INS40 INS42 INS42 INS32 INS14 INS42 INS42 INS43 INS43 INS43 INS32 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS58 INS27 INS38 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS42 INS40 INS39 INS59 INS42 INS40 INS42 INS60 INS61 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS45 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS34 INS32 INS42 INS34 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS43 INS2 INS45 INS43 INS59 INS27 INS8 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS21 INS32 INS8 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42