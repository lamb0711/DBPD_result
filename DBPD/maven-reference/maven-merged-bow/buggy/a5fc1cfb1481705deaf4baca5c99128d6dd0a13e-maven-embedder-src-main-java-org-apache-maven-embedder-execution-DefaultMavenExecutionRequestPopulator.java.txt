o fix the mirroring code
o restore ArtifactResolver.resolve( artifact, remotes, local ) for the rr plugin


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@749784 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+import java.util.Set;
-import org.apache.maven.project.ProfileManager;
+import org.apache.maven.project.ProfileManager;
-import org.apache.maven.settings.SettingsConfigurationException;
-import org.apache.maven.wagon.repository.RepositoryPermissions;
-import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
- * Things that we deal with in this populator to ensure that we have a valid {@MavenExecutionRequest}
+ * Things that we deal with in this populator to ensure that we have a valid
+ * {@MavenExecutionRequest}
- * - POM
- * - Settings
- * - Local Repository
- * - Snapshot update policies
- * - Repository checksum policies
- * - Artifact transfer mechanism configuration
- * - Eventing/Logging configuration
- * - Profile manager configuration
+ * - POM - Settings - Local Repository - Snapshot update policies - Repository checksum policies -
+ * Artifact transfer mechanism configuration - Eventing/Logging configuration - Profile manager
+ * configuration
-    @Requirement( hint = "maven" )
+    @Requirement(hint = "maven")
-    public MavenExecutionRequest populateDefaults( MavenExecutionRequest request,
-                                                   Configuration configuration )
+    public MavenExecutionRequest populateDefaults( MavenExecutionRequest request, Configuration configuration )
-                
+
-    private void reporter( MavenExecutionRequest request,
-                           Configuration configuration )
+    private void reporter( MavenExecutionRequest request, Configuration configuration )
-    private void executionProperties( MavenExecutionRequest request,
-                                      Configuration configuration )
+    private void executionProperties( MavenExecutionRequest request, Configuration configuration )
-                
+
+
+        processRepositoriesInSettings( request, configuration );
+    }
+
+    private void processRepositoriesInSettings( MavenExecutionRequest request, Configuration configuration )
+        throws MavenEmbedderException
+    {
+        Settings settings = request.getSettings();
+
+        Proxy proxy = settings.getActiveProxy();
+
+        if ( proxy != null )
+        {
+            if ( proxy.getHost() == null )
+            {
+                throw new MavenEmbedderException( "Proxy in settings.xml has no host" );
+            }
+
+            repositorySystem.addProxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), proxy.getUsername(), proxy.getPassword(), proxy.getNonProxyHosts() );
+        }
+
+        for ( Iterator i = settings.getServers().iterator(); i.hasNext(); )
+        {
+            Server server = (Server) i.next();
+
+            String pass;
+            String phrase;
+            try
+            {
+                pass = securityDispatcher.decrypt( server.getPassword() );
+                phrase = securityDispatcher.decrypt( server.getPassphrase() );
+            }
+            catch ( SecDispatcherException e )
+            {
+                throw new MavenEmbedderException( "Error decrypting server password/passphrase.", e );
+            }
+
+            repositorySystem.addAuthenticationInfo( server.getId(), server.getUsername(), pass, server.getPrivateKey(), phrase );
+
+            repositorySystem.addPermissionInfo( server.getId(), server.getFilePermissions(), server.getDirectoryPermissions() );
+        }
+
+        for ( Iterator<Mirror> i = settings.getMirrors().iterator(); i.hasNext(); )
+        {
+            Mirror mirror = i.next();
+
+            repositorySystem.addMirror( mirror.getId(), mirror.getMirrorOf(), mirror.getUrl() );
+        }
+
+        // <mirrors>
+        //   <mirror>
+        //     <id>nexus</id>
+        //     <mirrorOf>*</mirrorOf>
+        //     <url>http://repository.sonatype.org/content/groups/public</url>
+        //   </mirror>
+        // </mirrors>        
+
+        if ( request.getRemoteRepositories() != null )
+        {
+            Set<ArtifactRepository> remoteRepositoriesWithMirrors = new LinkedHashSet<ArtifactRepository>();
+            
+            for ( ArtifactRepository repository : request.getRemoteRepositories() )
+            {                
+                // Check to see if we have a valid mirror for this repository
+                ArtifactRepository mirror = repositorySystem.getMirror( repository );
+                
+                if ( mirror != null )
+                {
+                    // If there is a valid mirror for this repository then we'll enter the mirror as a replacement for this repository.
+                    remoteRepositoriesWithMirrors.add( mirror );
+                }
+                else
+                {
+                    // If we have no valid mirrors for this repository we will keep this repository in the list.
+                    remoteRepositoriesWithMirrors.add( repository );
+                }
+            }
+
+            request.setRemoteRepositories( new ArrayList<ArtifactRepository>( remoteRepositoriesWithMirrors ) );
+        }
-                
+
-    private void localRepository( MavenExecutionRequest request,
-                                  Configuration configuration )
+    private void localRepository( MavenExecutionRequest request, Configuration configuration )
-    
+
-    private void snapshotPolicy( MavenExecutionRequest request,
-                                 Configuration configuration )
+    private void snapshotPolicy( MavenExecutionRequest request, Configuration configuration )
-    private void checksumPolicy( MavenExecutionRequest request,
-                                 Configuration configuration )
+    private void checksumPolicy( MavenExecutionRequest request, Configuration configuration )
-        } 
-
-        try
-        {
-            resolveParameters( request.getSettings() );
-        catch ( Exception e )
-        {
-            throw new MavenEmbedderException( "Unable to configure Maven for execution", e );
-        }
-    }
-
-    private void resolveParameters( Settings settings )
-        throws ComponentLookupException, ComponentLifecycleException, SettingsConfigurationException
-    {
-            Proxy proxy = settings.getActiveProxy();
-
-            if ( proxy != null )
-            {
-                if ( proxy.getHost() == null )
-                {
-                    throw new SettingsConfigurationException( "Proxy in settings.xml has no host" );
-                }
-
-                repositorySystem.addProxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), proxy.getUsername(), proxy.getPassword(), proxy.getNonProxyHosts() );
-            }
-
-            for ( Iterator<Server> i = settings.getServers().iterator(); i.hasNext(); )
-            {
-                Server server = i.next();
-                
-                String pass;
-                String phrase;
-				try 
-				{
-					pass = securityDispatcher.decrypt( server.getPassword() );					
-					phrase = securityDispatcher.decrypt( server.getPassphrase() );					
-				} 
-				catch (SecDispatcherException e) 
-				{
-					throw new SettingsConfigurationException( "Error decrypting server password/passphrase.", e );
-				}
-                
-                repositorySystem.addAuthenticationInfo( server.getId(), server.getUsername(), pass, server.getPrivateKey(), phrase );
-
-                repositorySystem.addPermissionInfo( server.getId(), server.getFilePermissions(), server.getDirectoryPermissions() );
-            }
-
-            RepositoryPermissions defaultPermissions = new RepositoryPermissions();
-            
-            for ( Iterator<Mirror> i = settings.getMirrors().iterator(); i.hasNext(); )
-            {
-                Mirror mirror = i.next();
-
-                repositorySystem.addMirror( mirror.getId(), mirror.getMirrorOf(), mirror.getUrl() );
-            }
-     * @throws IOException 
+     * @throws IOException
-    	throws IOException
+        throws IOException
-        
+
-    public ArtifactRepository createLocalRepository( MavenExecutionRequest request, Settings settings, Configuration configuration ) 
+    public ArtifactRepository createLocalRepository( MavenExecutionRequest request, Settings settings, Configuration configuration )
-    
+
-    private void eventing( MavenExecutionRequest request,
-                           Configuration configuration )
+    private void eventing( MavenExecutionRequest request, Configuration configuration )

MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD42 INS44 UPD43 UPD66 UPD66 UPD66 UPD66 INS21 UPD43 UPD42 INS43 INS42 UPD42 INS60 INS25 INS32 UPD42 UPD42 MOV42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 MOV43 MOV54 INS32 INS33 MOV60 INS70 INS21 INS42 INS42 MOV43 MOV8 INS42 INS42 INS74 INS44 INS32 INS8 INS32 INS11 MOV21 INS43 INS43 UPD42 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS14 MOV43 MOV32 MOV7 MOV43 INS42 UPD42 MOV42 INS74 INS42 INS43 INS59 INS27 INS8 INS8 INS74 INS42 UPD43 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS43 INS43 UPD42 UPD45 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL43 DEL42 DEL43 DEL74 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL43 DEL43 DEL66