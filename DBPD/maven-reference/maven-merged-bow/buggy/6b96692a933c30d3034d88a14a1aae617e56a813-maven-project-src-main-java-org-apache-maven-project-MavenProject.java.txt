Merge of sisbell-maven-2.1-profile branch. Removes use of project lineage from builder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@693332 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.MavenTools;
+import org.apache.maven.artifact.InvalidRepositoryException;
+import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.artifact.versioning.VersionRange;
+import org.apache.maven.model.Exclusion;
+import org.apache.maven.model.Extension;
+import org.apache.maven.model.Parent;
+import org.codehaus.plexus.util.StringUtils;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+    private ArtifactFactory artifactFactory;
+
+    private MavenTools mavenTools;
+
+    private RepositoryHelper repositoryHelper;
+
+    private MavenProjectBuilder mavenProjectBuilder;
+
+    private ProjectBuilderConfiguration projectBuilderConfiguration;
+
+    private File parentFile;
+
+    public File getParentFile()
+    {
+        return parentFile;
+    }
+
+    public void setParentFile( File parentFile )
+    {
+        this.parentFile = parentFile;
+    }
+
+    public MavenProject( Model model, ArtifactFactory artifactFactory, MavenTools mavenTools,
+                         RepositoryHelper repositoryHelper, MavenProjectBuilder mavenProjectBuilder,
+                         ProjectBuilderConfiguration projectBuilderConfiguration )
+        throws InvalidRepositoryException
+    {
+        setModel( model );
+        this.artifactFactory = artifactFactory;
+        this.mavenTools = mavenTools;
+        this.repositoryHelper = repositoryHelper;
+        this.mavenProjectBuilder = mavenProjectBuilder;
+        this.projectBuilderConfiguration = projectBuilderConfiguration;
+        originalModel = ModelUtils.cloneModel( model );
+        DistributionManagement dm = model.getDistributionManagement();
+
+        if ( dm != null )
+        {
+            ArtifactRepository repo = mavenTools.buildDeploymentArtifactRepository( dm.getRepository() );
+            setReleaseArtifactRepository( repo );
+
+            if ( dm.getSnapshotRepository() != null )
+            {
+                repo = mavenTools.buildDeploymentArtifactRepository( dm.getSnapshotRepository() );
+                setSnapshotArtifactRepository( repo );
+            }
+        }
+
+        try
+        {
+            LinkedHashSet repoSet = new LinkedHashSet();
+            if ( ( model.getRepositories() != null ) && !model.getRepositories().isEmpty() )
+            {
+                repoSet.addAll( model.getRepositories() );
+            }
+
+            if ( ( model.getPluginRepositories() != null ) && !model.getPluginRepositories().isEmpty() )
+            {
+                repoSet.addAll( model.getPluginRepositories() );
+            }
+
+            setRemoteArtifactRepositories( mavenTools.buildArtifactRepositories( new ArrayList( repoSet ) ) );
+        }
+        catch ( Exception e )
+        {
+            e.printStackTrace();
+        }
+    }
+
-    private final void deepCopy(MavenProject project){
+    private final void deepCopy( MavenProject project )
+    {
-        if ( project.getPluginArtifacts() != null )
+        if ( project.getParentFile() != null )
-            setPluginArtifacts( Collections.unmodifiableSet( project.getPluginArtifacts() ) );
+            parentFile = new File( project.getParentFile().getAbsolutePath() );
+        //    if ( project.getPluginArtifacts() != null )
+        //    {
+        // setPluginArtifacts( Collections.unmodifiableSet( project.getPluginArtifacts() ) );
+        //  }
+
-            setPluginArtifactRepositories( ( Collections.unmodifiableList( project.getPluginArtifactRepositories() ) ) );
+            setPluginArtifactRepositories(
+                ( Collections.unmodifiableList( project.getPluginArtifactRepositories() ) ) );
-                setOriginalInterpolatedCompileSourceRoots( new ArrayList(
-                                                                          project.getOriginalInterpolatedCompileSourceRoots() ) );
+                setOriginalInterpolatedCompileSourceRoots(
+                    new ArrayList( project.getOriginalInterpolatedCompileSourceRoots() ) );
-                setOriginalInterpolatedTestCompileSourceRoots( new ArrayList(
-                                                                              project.getOriginalInterpolatedTestCompileSourceRoots() ) );
+                setOriginalInterpolatedTestCompileSourceRoots(
+                    new ArrayList( project.getOriginalInterpolatedTestCompileSourceRoots() ) );
-                setOriginalInterpolatedScriptSourceRoots( new ArrayList(
-                                                                         project.getOriginalInterpolatedScriptSourceRoots() ) );
+                setOriginalInterpolatedScriptSourceRoots(
+                    new ArrayList( project.getOriginalInterpolatedScriptSourceRoots() ) );
-    public String getModulePathAdjustment( MavenProject moduleProject ) throws IOException
+    public String getModulePathAdjustment( MavenProject moduleProject )
+        throws IOException
+        if ( parent == null )
+        {
+            if ( parentFile != null )
+            {
+                try
+                {
+                    parent = mavenProjectBuilder.build( parentFile, projectBuilderConfiguration );
+                }
+                catch ( ProjectBuildingException e )
+                {
+                    e.printStackTrace();
+                }
+            }
+            else if ( model.getParent() != null )
+            {
+                try
+                {
+                    parent = mavenProjectBuilder.buildFromRepository( getParentArtifact(),
+                                                                      this.remoteArtifactRepositories,
+                                                                      projectBuilderConfiguration.getLocalRepository() );
+                }
+                catch ( ProjectBuildingException e )
+                {
+                    e.printStackTrace();
+                }
+            }
+            /*
+            else
+            {
+                try {
+                    parent = mavenProjectBuilder.buildStandaloneSuperProject(projectBuilderConfiguration);
+                } catch (ProjectBuildingException e) {
+                    e.printStackTrace();  
+                }
+            }
+            */
+        }
+     *
-    public void setPluginArtifacts( Set pluginArtifacts )
-    {
-        this.pluginArtifacts = pluginArtifacts;
-
-        pluginArtifactMap = null;
-    }
-
+        if ( pluginArtifacts != null )
+        {
+            return pluginArtifacts;
+        }
+        Set pa = new HashSet();
+        if ( artifactFactory != null )
+        {
+            List plugins = getBuildPlugins();
+            for ( Iterator i = plugins.iterator(); i.hasNext(); )
+            {
+                Plugin p = (Plugin) i.next();
+
+                String version;
+                if ( StringUtils.isEmpty( p.getVersion() ) )
+                {
+                    version = "RELEASE";
+                }
+                else
+                {
+                    version = p.getVersion();
+                }
+
+                Artifact artifact;
+                try
+                {
+                    artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
+                                                                     VersionRange.createFromVersionSpec( version ) );
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+                    return pa;
+                }
+
+                if ( artifact != null )
+                {
+                    pa.add( artifact );
+                }
+            }
+        }
+        pluginArtifacts = pa;
+        pluginArtifactMap = null;
-        if ( pluginArtifactMap == null )
-        {
-            pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getPluginArtifacts() );
-        }
-
+        pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getPluginArtifacts() );
+        Set pluginArtifacts = new HashSet();
+        List reports = getReportPlugins();
+        if ( reports != null )
+        {
+            for ( Iterator i = reports.iterator(); i.hasNext(); )
+            {
+                ReportPlugin p = (ReportPlugin) i.next();
+
+                String version;
+                if ( StringUtils.isEmpty( p.getVersion() ) )
+                {
+                    version = "RELEASE";
+                }
+                else
+                {
+                    version = p.getVersion();
+                }
+
+                Artifact artifact = null;
+                try
+                {
+                    artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
+                                                                     VersionRange.createFromVersionSpec( version ) );
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+                    //throw new InvalidProjectVersionException( projectId, "Report plugin: " + p.getKey(), version, pomLocation, e );
+                }
+
+                if ( artifact != null )
+                {
+                    pluginArtifacts.add( artifact );
+                }
+            }
+        }
+        reportArtifactMap = null;
+        Set extensionArtifacts = new HashSet();
+        List extensions = getBuildExtensions();
+        if ( extensions != null )
+        {
+            for ( Iterator i = extensions.iterator(); i.hasNext(); )
+            {
+                Extension ext = (Extension) i.next();
+
+                String version;
+                if ( StringUtils.isEmpty( ext.getVersion() ) )
+                {
+                    version = "RELEASE";
+                }
+                else
+                {
+                    version = ext.getVersion();
+                }
+
+                Artifact artifact = null;
+                try
+                {
+                    VersionRange versionRange = VersionRange.createFromVersionSpec( version );
+                    artifact =
+                        artifactFactory.createExtensionArtifact( ext.getGroupId(), ext.getArtifactId(), versionRange );
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+
+                }
+
+                if ( artifact != null )
+                {
+                    extensionArtifacts.add( artifact );
+                }
+            }
+        }
+        extensionArtifactMap = null;
+        if ( parentArtifact == null && model.getParent() != null )
+        {
+            Parent p = model.getParent();
+            parentArtifact = artifactFactory.createParentArtifact( p.getGroupId(), p.getArtifactId(), p.getVersion() );
+        }
-        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null ) ? getSnapshotArtifactRepository()
+        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null )
+            ? getSnapshotArtifactRepository()
+     *
+        if ( managedVersionMap != null )
+        {
+            return managedVersionMap;
+        }
+
+        Map map = null;
+        if ( artifactFactory != null )
+        {
+
+            List deps;
+            DependencyManagement dependencyManagement = getDependencyManagement();
+            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) &&
+                ( deps.size() > 0 ) )
+            {
+                map = new ManagedVersionMap( map );
+                for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )
+                {
+                    Dependency d = (Dependency) i.next();
+
+                    try
+                    {
+                        VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
+
+                        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
+                                                                                      versionRange, d.getType(),
+                                                                                      d.getClassifier(), d.getScope(),
+                                                                                      d.isOptional() );
+
+                        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && ( d.getSystemPath() != null ) )
+                        {
+                            artifact.setFile( new File( d.getSystemPath() ) );
+                        }
+
+                        // If the dependencyManagement section listed exclusions,
+                        // add them to the managed artifacts here so that transitive
+                        // dependencies will be excluded if necessary.
+
+                        if ( ( null != d.getExclusions() ) && !d.getExclusions().isEmpty() )
+                        {
+                            List exclusions = new ArrayList();
+
+                            for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )
+                            {
+                                Exclusion e = (Exclusion) j.next();
+
+                                exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
+                            }
+
+                            ExcludesArtifactFilter eaf = new ExcludesArtifactFilter( exclusions );
+
+                            artifact.setDependencyFilter( eaf );
+                        }
+                        else
+                        {
+                            artifact.setDependencyFilter( null );
+                        }
+
+                        map.put( d.getManagementKey(), artifact );
+                    }
+                    catch ( InvalidVersionSpecificationException e )
+                    {
+                        map = Collections.EMPTY_MAP;
+                    }
+                }
+            }
+            else if ( map == null )
+            {
+                map = Collections.EMPTY_MAP;
+            }
+        }
+        managedVersionMap = map;
-     * @todo the lazy initialisation of this makes me uneasy.
+     * @todo the lazy initialisation of this makes me uneasy.
-        projectReferences.put( getProjectReferenceId( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
+        projectReferences.put(
+            getProjectReferenceId( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
-            String refId = getProjectReferenceId( pluginArtifact.getGroupId(), pluginArtifact.getArtifactId(), pluginArtifact.getVersion() );
+            String refId = getProjectReferenceId( pluginArtifact.getGroupId(), pluginArtifact.getArtifactId(),
+                                                  pluginArtifact.getVersion() );
-                while(itr.hasNext()) {
+                while ( itr.hasNext() )
+                {
-                    if( attached.getDependencyConflictId().equals(pluginArtifact.getDependencyConflictId()) ) {
+                    if ( attached.getDependencyConflictId().equals( pluginArtifact.getDependencyConflictId() ) )
+                    {
-                        Artifact resultArtifact=ArtifactUtils.copyArtifact(attached);
-                        resultArtifact.setScope(pluginArtifact.getScope());
+                        Artifact resultArtifact = ArtifactUtils.copyArtifact( attached );
+                        resultArtifact.setScope( pluginArtifact.getScope() );
-                    pluginArtifact = new ActiveProjectArtifact(
-                        ref,
-                        pluginArtifact );
+                    pluginArtifact = new ActiveProjectArtifact( ref, pluginArtifact );
-	private void addArtifactPath(Artifact a, List list) throws DependencyResolutionRequiredException
+    private void addArtifactPath( Artifact a, List list )
+        throws DependencyResolutionRequiredException
-            if (a.getType().equals("test-jar"))
+            if ( a.getType().equals( "test-jar" ) )
-        if ( ! projectDirFound )
+        if ( !projectDirFound )
+
-        StringBuffer sb = new StringBuffer(30);
+        StringBuffer sb = new StringBuffer( 30 );
-        catch (NullPointerException e)
+        catch ( NullPointerException e )

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS43 UPD42 UPD42 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 MOV43 INS42 INS8 INS8 MOV8 INS8 INS8 INS8 INS8 MOV65 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS43 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS54 INS25 MOV41 INS25 INS60 INS25 INS21 MOV21 INS41 MOV41 INS60 INS60 INS25 INS21 MOV41 INS60 INS60 INS25 INS21 MOV41 INS25 MOV41 INS25 INS60 INS25 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS7 INS7 INS7 INS7 INS43 INS59 INS27 INS8 INS8 INS12 INS27 INS8 INS27 MOV8 MOV43 INS59 INS27 INS8 INS7 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS27 MOV8 INS43 INS59 INS27 INS8 INS7 INS42 UPD42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS25 INS60 INS25 INS25 INS21 INS44 INS8 INS42 INS33 INS25 INS42 INS33 INS42 INS14 INS42 INS33 INS60 INS24 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS24 INS42 INS33 INS27 INS27 INS60 INS21 INS42 INS33 INS42 INS42 INS33 INS42 INS33 INS60 INS60 INS25 INS42 INS42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS43 INS42 INS21 UPD42 INS7 INS27 INS8 INS25 INS43 INS43 INS59 INS58 INS32 INS8 INS43 INS42 INS58 INS32 INS8 INS43 INS42 INS58 INS32 INS8 INS42 INS33 INS32 INS33 INS43 INS59 INS7 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS21 INS21 INS42 INS42 INS14 INS36 INS38 INS21 INS36 INS38 INS21 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS33 INS54 INS27 INS8 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS25 INS42 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS25 INS42 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS36 INS36 INS36 INS21 INS24 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS7 INS32 INS43 INS27 INS32 INS32 INS27 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS8 INS12 INS32 INS33 INS54 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS27 INS27 INS27 INS7 INS58 INS32 INS8 INS42 INS33 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS32 INS42 INS42 INS42 INS32 INS32 INS33 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS42 MOV32 INS42 INS21 INS44 INS8 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS33 INS60 INS21 INS44 INS8 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS36 INS33 INS32 INS34 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS54 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS7 INS43 INS42 INS21 INS21 INS44 INS8 INS43 INS32 INS42 INS42 INS7 INS7 INS7 INS43 INS42 INS41 INS32 INS43 INS32 INS42 INS42 INS7 INS7 INS7 INS43 INS42 INS32 INS43 INS32 INS42 INS42 INS7 INS7 INS43 INS59 INS7 INS43 INS42 INS32 INS7 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS11 INS60 INS60 INS25 INS25 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS36 INS21 INS36 INS38 INS60 INS24 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS40 INS42 INS32 INS27 INS32 INS27 INS32 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS14 INS33 INS32 INS32 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS32 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL33 DEL27 DEL25 DEL8 DEL8 DEL8 DEL8