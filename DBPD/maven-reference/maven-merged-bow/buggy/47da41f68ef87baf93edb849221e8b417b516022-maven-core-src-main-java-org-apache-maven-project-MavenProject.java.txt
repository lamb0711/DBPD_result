refactor source roots to be lists


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163470 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.StringUtils;
-    //!!! Refactor, collect the list of compile source roots and create a
-    // path1:path2
-    // type construct from the list instead of the other way around. jvz.
+    private List compileSourceRoots = new ArrayList();
-    private String compileSourceRoots = "";
-
-    private String testCompileSourceRoots = "";
+    private List testCompileSourceRoots = new ArrayList();
-        if ( path != null || path.trim().length() != 0 )
+        if ( path != null )
-            if ( compileSourceRoots.length() > 0 )
+            path = path.trim();
+            if ( path.length() != 0 )
-                compileSourceRoots += File.pathSeparator;
+                if ( !compileSourceRoots.contains( path ) )
+                {
+                    compileSourceRoots.add( path );
+                }
-            compileSourceRoots += path;
-    public String getCompileSourceRoots()
-    {
-        // Get rid of any trailing path separators.
-        if ( compileSourceRoots.endsWith( File.pathSeparator ) )
-        {
-            compileSourceRoots = compileSourceRoots.substring( 0, compileSourceRoots.length() - 1 );
-        }
-
-        // Always add the build.sourceDirectory
-        return getBuild().getSourceDirectory() + File.pathSeparator + compileSourceRoots;
-    }
-
-    public List getCompileSourceRootsList()
-    {
-        String[] s = StringUtils.split( getCompileSourceRoots(), File.pathSeparator );
-
-        List list = new ArrayList();
-
-        for ( int i = 0; i < s.length; i++ )
-        {
-            list.add( s[i] );
-        }
-
-        return list;
-    }
-
-        if ( path != null || path.trim().length() != 0 )
+        if ( path != null )
-            if ( testCompileSourceRoots.length() > 0 )
+            path = path.trim();
+            if ( path.length() != 0 )
-                testCompileSourceRoots += File.pathSeparator;
+                if ( !testCompileSourceRoots.contains( path ) )
+                {
+                    testCompileSourceRoots.add( path );
+                }
-            testCompileSourceRoots += path;
-    public String getTestCompileSourceRoots()
+    public List getCompileSourceRoots()
-        // Get rid of any trailing path separators.
-        if ( testCompileSourceRoots.endsWith( File.pathSeparator ) )
-        {
-            testCompileSourceRoots = testCompileSourceRoots.substring( 0, testCompileSourceRoots.length() - 1 );
-        }
-
-        // Always add the build.unitTestSourceDirectory
-        return getBuild().getUnitTestSourceDirectory() + File.pathSeparator + testCompileSourceRoots;
+        return compileSourceRoots;
-    public List getTestCompileSourceRootsList()
+    public List getTestCompileSourceRoots()
-        String[] s = StringUtils.split( getTestCompileSourceRoots(), File.pathSeparator );
-
-        List list = new ArrayList();
-
-        for ( int i = 0; i < s.length; i++ )
-        {
-            list.add( s[i] );
-        }
-
-        return list;
+        return testCompileSourceRoots;
-            if ( a.getScope() == null || "compile".equals( a.getScope() ) )
+            if ( a.getScope() == null || Artifact.SCOPE_COMPILE.equals( a.getScope() ) )
-                if ( a.getScope() == null || "test".equals( a.getScope() ) || "compile".equals( a.getScope() )
-                    || "runtime".equals( a.getScope() ) )
+                if ( a.getScope() == null || Artifact.SCOPE_TEST.equals( a.getScope() ) || Artifact.SCOPE_COMPILE.equals( a.getScope() )
+                    || Artifact.SCOPE_RUNTIME.equals( a.getScope() ) )

INS31 MOV43 MOV59 MOV43 MOV59 MOV83 MOV39 MOV42 MOV44 INS8 INS8 MOV43 UPD42 UPD42 UPD42 UPD42 INS25 INS25 MOV27 INS8 MOV27 INS8 INS42 UPD42 INS8 INS8 MOV21 INS25 INS21 MOV25 MOV60 INS25 MOV60 MOV25 UPD7 INS27 INS8 INS7 INS27 INS27 MOV8 MOV32 MOV8 MOV32 MOV32 UPD34 MOV34 INS25 INS42 MOV32 MOV32 MOV34 MOV27 INS32 UPD42 INS38 INS8 INS42 INS38 INS40 INS42 MOV32 INS32 MOV21 INS32 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 INS32 INS27 INS32 INS40 UPD42 INS42 INS42 INS42 INS42 MOV27 INS32 INS40 INS42 MOV32 INS40 INS42 MOV32 DEL40 DEL26 DEL42 DEL43 DEL42 DEL45 DEL59 DEL42 DEL43 DEL42 DEL45 DEL59 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL40 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL27 DEL27 DEL32 DEL34 DEL27 DEL42 DEL40 DEL7 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL40 DEL42 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL45 DEL45 DEL42 DEL32 DEL27 DEL45 DEL42 DEL32 DEL27 DEL45 DEL42 DEL32 DEL27 DEL8 DEL25 DEL8