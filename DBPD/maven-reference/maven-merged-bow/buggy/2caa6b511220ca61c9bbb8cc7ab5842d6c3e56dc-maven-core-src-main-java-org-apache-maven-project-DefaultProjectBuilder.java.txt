o Introduced project realm to host build extensions

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@793844 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+    private ProjectBuildingHelper projectBuildingHelper;
+
+    @Requirement
-        ModelBuildingResult result;
+        DefaultModelBuildingListener listener = new DefaultModelBuildingListener( projectBuildingHelper, configuration );
+        request.setModelBuildingListeners( Arrays.asList( listener ) );
+
+        ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();
+
-            if ( localProject )
+            ModelBuildingResult result;
+            try
-                result = modelBuilder.build( pomFile, request );
+                if ( localProject )
+                {
+                    result = modelBuilder.build( pomFile, request );
+                }
+                else
+                {
+                    result = modelBuilder.build( new FileModelSource( pomFile ), request );
+                }
-            else
+            catch ( ModelBuildingException e )
-                result = modelBuilder.build( new FileModelSource( pomFile ), request );
-            }
-        }
-        catch ( ModelBuildingException e )
-        {
-            throw new ProjectBuildingException( "[unknown]", "Failed to build project for " + pomFile, pomFile, e );
-        }
-        
-        if ( localProject && !result.getProblems().isEmpty() && logger.isWarnEnabled() )
-        {
-            logger.warn( "" );
-            logger.warn( "One or more problems were encountered while building the effective model:" );
-
-            for ( ModelProblem problem : result.getProblems() )
-            {
-                logger.warn( problem.getMessage() );
+                throw new ProjectBuildingException( "[unknown]", "Failed to build project for " + pomFile, pomFile, e );
-            logger.warn( "" );
-            logger.warn( "It is highly recommended to fix these problems"
-                + " because they threaten the stability of your build." );
-            logger.warn( "" );
-            logger.warn( "For this reason, future Maven versions will no"
-                + " longer support building such malformed projects." );
-            logger.warn( "" );
-        }
-
-        Model model = result.getEffectiveModel();
-
-        File parentPomFile = result.getRawModel( result.getModelIds().get( 1 ) ).getPomFile();
-        MavenProject project = fromModelToMavenProject( model, parentPomFile, configuration, model.getPomFile() );
-
-        project.setOriginalModel( result.getRawModel() );
-     
-        try
-        {
-            if ( configuration.isProcessPlugins() )
+            if ( localProject && !result.getProblems().isEmpty() && logger.isWarnEnabled() )
-                lifecycle.populateDefaultConfigurationForPlugins( model.getBuild().getPlugins(), configuration.getLocalRepository(), project.getPluginArtifactRepositories() );
+                logger.warn( "" );
+                logger.warn( "One or more problems were encountered while building the project's effective model:" );
+
+                for ( ModelProblem problem : result.getProblems() )
+                {
+                    logger.warn( problem.getMessage() );
+                }
+
+                logger.warn( "" );
+                logger.warn( "It is highly recommended to fix these problems"
+                    + " because they threaten the stability of your build." );
+                logger.warn( "" );
+                logger.warn( "For this reason, future Maven versions will no"
+                    + " longer support building such malformed projects." );
+                logger.warn( "" );
+
+            Model model = result.getEffectiveModel();
+
+            File parentPomFile = result.getRawModel( result.getModelIds().get( 1 ) ).getPomFile();
+            MavenProject project = fromModelToMavenProject( model, parentPomFile, configuration, model.getPomFile() );
+
+            project.setOriginalModel( result.getRawModel() );
+
+            project.setRemoteArtifactRepositories( listener.getRemoteRepositories() );
+            project.setPluginArtifactRepositories( listener.getPluginRepositories() );
+
+            try
+            {
+                if ( configuration.isProcessPlugins() )
+                {
+                    lifecycle.populateDefaultConfigurationForPlugins( model.getBuild().getPlugins(),
+                                                                      configuration.getLocalRepository(),
+                                                                      project.getPluginArtifactRepositories() );
+                }
+            }
+            catch ( LifecycleExecutionException e )
+            {
+                throw new ProjectBuildingException( project.getId(), e.getMessage(), e );
+            }
+
+            Build build = project.getBuild();
+            // NOTE: setting this script-source root before path translation, because
+            // the plugin tools compose basedir and scriptSourceRoot into a single file.
+            project.addScriptSourceRoot( build.getScriptSourceDirectory() );
+            project.addCompileSourceRoot( build.getSourceDirectory() );
+            project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
+            project.setFile( pomFile );
+
+            List<Profile> activeProfiles = new ArrayList<Profile>();
+            activeProfiles.addAll( result.getActivePomProfiles( result.getModelIds().get( 0 ) ) );
+            activeProfiles.addAll( result.getActiveExternalProfiles() );
+            project.setActiveProfiles( activeProfiles );
+
+            project.setInjectedProfileIds( "external", getProfileIds( result.getActiveExternalProfiles() ) );
+            for ( String modelId : result.getModelIds() )
+            {
+                project.setInjectedProfileIds( modelId, getProfileIds( result.getActivePomProfiles( modelId ) ) );
+            }
+
+            return project;
-        catch ( LifecycleExecutionException e )
+        finally
-            throw new ProjectBuildingException( "", e.getMessage(), e );
+            Thread.currentThread().setContextClassLoader( oldContextClassLoader );
-
-        Build build = project.getBuild();
-        // NOTE: setting this script-source root before path translation, because
-        // the plugin tools compose basedir and scriptSourceRoot into a single file.
-        project.addScriptSourceRoot( build.getScriptSourceDirectory() );
-        project.addCompileSourceRoot( build.getSourceDirectory() );
-        project.addTestCompileSourceRoot( build.getTestSourceDirectory() );
-        project.setFile( pomFile );
-
-        List<Profile> activeProfiles = new ArrayList<Profile>();
-        activeProfiles.addAll( result.getActivePomProfiles( result.getModelIds().get( 0 ) ) );
-        activeProfiles.addAll( result.getActiveExternalProfiles() );
-        project.setActiveProfiles( activeProfiles );
-
-        project.setInjectedProfileIds( "external", getProfileIds( result.getActiveExternalProfiles() ) );
-        for ( String modelId : result.getModelIds() )
-        {
-            project.setInjectedProfileIds( modelId, getProfileIds( result.getActivePomProfiles( modelId ) ) );
-        }
-
-        return project;
+

INS26 INS40 INS23 INS78 INS83 INS43 INS59 INS8 INS42 INS42 INS42 MOV60 INS60 INS21 INS60 INS54 INS43 INS59 INS32 INS43 INS59 MOV8 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS32 INS42 INS42 DEL45