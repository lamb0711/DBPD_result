PR: MNG-1525
Submitted By: Edwin Punzalan
Reviewed By: John Casey

NOT applying this patch. I found a better solution that will factor the interpolation of the POM into a flexible utility in plexus-utils, and will allow introduction of envar resolution to the POM. It will also make interpolating the settings.xml and profiles.xml using any of a number of expression resolvers (using envar resolution only for now).

BTW, I tried using System.getenv(..) in JDK1.4, and it fails with java.lang.Error and a deprecation message. So, I'm using Edwin's code to extract the envars into a Properties object. We can improve this later.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@354462 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.logging.Logger;
-import org.codehaus.plexus.util.StringUtils;
-import org.codehaus.plexus.util.introspection.ReflectionValueExtractor;
+import org.codehaus.plexus.util.interpolation.EnvarBasedValueSource;
+import org.codehaus.plexus.util.interpolation.MapBasedValueSource;
+import org.codehaus.plexus.util.interpolation.ObjectBasedValueSource;
+import org.codehaus.plexus.util.interpolation.RegexBasedInterpolator;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-    private static final Pattern EXPRESSION_PATTERN = Pattern.compile( "\\$\\{(pom\\.|project\\.)?([^}]+)\\}" );
-
-        serializedModel = interpolateInternal( serializedModel, model, context );
+        
+        RegexBasedInterpolator interpolator = new RegexBasedInterpolator();
+        
+        interpolator.addValueSource( new MapBasedValueSource( context ) );
+        interpolator.addValueSource( new MapBasedValueSource( model.getProperties() ) );
+        interpolator.addValueSource( new ObjectBasedValueSource( model ) );
+        
+        try
+        {
+            interpolator.addValueSource( new EnvarBasedValueSource() );
+        }
+        catch ( IOException e )
+        {
+            getLogger().warn( "Cannot initialize environment variables resolver. Skipping environmental resolution." );
+            getLogger().debug( "Failed to initialize envar resolver. Skipping environmental resolution.", e );
+        }
+        
+        serializedModel = interpolator.interpolate(serializedModel, "pom|project" );
-    private String interpolateInternal( String src, Model model, Map context )
-        throws ModelInterpolationException
-    {
-        String result = src;
-        Matcher matcher = EXPRESSION_PATTERN.matcher( result );
-        while ( matcher.find() )
-        {
-            String wholeExpr = matcher.group( 0 );
-            String realExpr = matcher.group( 2 );
-
-            Object value = context.get( realExpr );
-
-            if ( value == null )
-            {
-                value = model.getProperties().getProperty( realExpr );
-            }
-
-            try
-            {
-                if ( value == null )
-                {
-                    value = ReflectionValueExtractor.evaluate( realExpr, model );
-                }
-            }
-            catch ( Exception e )
-            {
-                Logger logger = getLogger();
-                if ( logger != null )
-                {
-                    logger.debug( "POM interpolation cannot proceed with expression: " + wholeExpr + ". Skipping...",
-                                  e );
-                }
-            }
-
-            // if the expression refers to itself, skip it.
-            if ( wholeExpr.equals( value ) )
-            {
-                throw new ModelInterpolationException( wholeExpr, model.getId() + " references itself." );
-            }
-
-            if ( value != null )
-            {
-                result = StringUtils.replace( result, wholeExpr, String.valueOf( value ) );
-                // could use:
-                // result = matcher.replaceFirst( stringValue );
-                // but this could result in multiple lookups of stringValue, and replaceAll is not correct behaviour
-                matcher.reset( result );
-            }
-/*
-        // This is the desired behaviour, however there are too many crappy poms in the repo and an issue with the
-        // timing of executing the interpolation
-        
-            else
-            {
-                throw new ModelInterpolationException(
-                    "Expression '" + wholeExpr + "' did not evaluate to anything in the model" );
-            }
-*/
-        }
-
-        return result;
-    }

MOV26 UPD40 UPD40 UPD40 UPD40 INS60 INS21 INS21 INS21 INS54 INS43 INS59 INS32 INS32 INS32 INS8 INS12 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS44 INS8 INS43 INS43 INS42 INS43 MOV32 INS43 INS42 INS32 INS43 INS42 INS21 INS21 UPD42 UPD42 UPD42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS32 INS43 INS32 INS42 INS45 MOV32 INS42 INS45 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31