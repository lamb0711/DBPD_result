o integrate changes made in maven-artifact for non fail-fast and request/result usage in the embedder for
  use in IDE integration to provide as much feedback as possible.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@571862 13f79535-47bb-0310-9956-ffa450edef68

+    // project build
+    // artifact resolution
+    // lifecycle execution
+
-        MavenExecutionResult result;
+        MavenExecutionResult result = new DefaultMavenExecutionResult();
-        result = doExecute( request, dispatcher );
+        // old doExecute
+        
+        ProfileManager globalProfileManager = new DefaultProfileManager( container, request.getProperties() );
+
+        globalProfileManager.loadSettingsProfiles( request.getSettings() );
+
+        globalProfileManager.explicitlyActivate( request.getActiveProfiles() );
+
+        globalProfileManager.explicitlyDeactivate( request.getInactiveProfiles() );
+
+        getLogger().info( "Scanning for projects..." );
+
+        boolean foundProjects = true;
+
+        List projects;
+
+        try
+        {
+            projects = getProjects( request, globalProfileManager );
+
+            if ( projects.isEmpty() )
+            {
+                projects.add( getSuperProject( request ) );
+
+                foundProjects = false;
+            }
+        }
+        catch ( Exception e )
+        {
+            result.addException( e );
+
+            return result;
+        }
+
+        ReactorManager reactorManager;
+
+        try
+        {
+            reactorManager = new ReactorManager( projects, request.getReactorFailureBehavior() );
+        }
+        catch ( CycleDetectedException e )
+        {
+            result.addException( new BuildFailureException(
+                "The projects in the reactor contain a cyclic reference: " + e.getMessage(), e ) );
+
+            return result;
+        }
+        catch ( DuplicateProjectException e )
+        {
+            result.addException( new BuildFailureException( e.getMessage(), e ) );
+
+            return result;
+        }
+
+        if ( reactorManager.hasMultipleProjects() )
+        {
+            getLogger().info( "Reactor build order: " );
+
+            for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
+            {
+                MavenProject project = (MavenProject) i.next();
+
+                getLogger().info( "  " + project.getName() );
+            }
+        }
+
+        MavenSession session = createSession( request, reactorManager, dispatcher );
+
+        session.setUsingPOMsFromFilesystem( foundProjects );
+
+        try
+        {
+            lifecycleExecutor.execute( session, reactorManager, dispatcher );
+        }
+        catch ( Exception e )
+        {
+            result.addException( new BuildFailureException( e.getMessage(), e ) );
+        }
+
+        // old doExecute
-        ReactorManager reactorManager = result.getReactorManager();
-
-                return new DefaultMavenExecutionResult(
-                    Collections.singletonList( new MavenExecutionException( "Some builds failed" ) ) );
+                result.addException( new MavenExecutionException( "Some builds failed" ) );
+
+                return result;
-        return new DefaultMavenExecutionResult( result.getReactorManager() );
+        result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
+
+        result.setProject( reactorManager.getTopLevelProject() );
+
+        return result;
-    private MavenExecutionResult doExecute( MavenExecutionRequest request, EventDispatcher dispatcher )
-    {
-        List executionExceptions = new ArrayList();
-
-        ProfileManager globalProfileManager = new DefaultProfileManager( container, request.getProperties() );
-
-        globalProfileManager.loadSettingsProfiles( request.getSettings() );
-
-        globalProfileManager.explicitlyActivate( request.getActiveProfiles() );
-
-        globalProfileManager.explicitlyDeactivate( request.getInactiveProfiles() );
-
-        getLogger().info( "Scanning for projects..." );
-
-        boolean foundProjects = true;
-
-        List projects;
-
-        try
-        {
-            projects = getProjects( request, globalProfileManager );
-
-            if ( projects.isEmpty() )
-            {
-                projects.add( getSuperProject( request ) );
-
-                foundProjects = false;
-            }
-        }
-        catch ( Exception e )
-        {
-            executionExceptions.add( e );
-
-            return new DefaultMavenExecutionResult( executionExceptions );
-        }
-
-        ReactorManager rm;
-
-        try
-        {
-            rm = new ReactorManager( projects, request.getReactorFailureBehavior() );
-        }
-        catch ( CycleDetectedException e )
-        {
-            executionExceptions.add( new BuildFailureException(
-                "The projects in the reactor contain a cyclic reference: " + e.getMessage(), e ) );
-
-            return new DefaultMavenExecutionResult( executionExceptions );
-        }
-        catch ( DuplicateProjectException e )
-        {
-            executionExceptions.add( new BuildFailureException( e.getMessage(), e ) );
-
-            return new DefaultMavenExecutionResult( executionExceptions );
-        }
-
-        if ( rm.hasMultipleProjects() )
-        {
-            getLogger().info( "Reactor build order: " );
-
-            for ( Iterator i = rm.getSortedProjects().iterator(); i.hasNext(); )
-            {
-                MavenProject project = (MavenProject) i.next();
-
-                getLogger().info( "  " + project.getName() );
-            }
-        }
-
-        MavenSession session = createSession( request, rm, dispatcher );
-
-        session.setUsingPOMsFromFilesystem( foundProjects );
-
-        try
-        {
-            lifecycleExecutor.execute( session, rm, dispatcher );
-        }
-        catch ( Exception e )
-        {
-            executionExceptions.add( new BuildFailureException( e.getMessage(), e ) );
-        }
-
-        return new DefaultMavenExecutionResult( executionExceptions, rm );
-    }
-

MOV25 MOV60 MOV21 MOV21 MOV21 MOV21 MOV60 MOV60 INS54 INS60 INS54 INS25 MOV21 INS54 INS21 INS21 INS41 MOV8 INS12 MOV43 INS59 INS8 INS12 INS12 INS32 INS8 MOV43 INS8 INS12 INS32 INS32 INS42 INS14 MOV21 MOV44 INS8 INS42 INS21 MOV44 INS8 MOV44 INS8 INS42 INS42 MOV21 INS24 UPD42 INS21 MOV44 INS8 MOV42 INS42 INS32 INS42 INS42 INS32 MOV43 INS21 INS41 INS7 INS21 INS41 INS21 INS41 INS58 MOV32 MOV8 INS42 UPD42 UPD42 INS42 INS32 INS21 UPD42 MOV42 INS42 INS42 INS42 MOV42 MOV32 INS32 INS42 INS42 MOV14 INS32 INS42 INS32 INS42 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 MOV14 INS42 INS32 INS42 INS42 MOV14 MOV32 INS42 INS32 INS42 UPD42 UPD42 INS42 INS42 DEL14 DEL43 DEL32 DEL14 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31