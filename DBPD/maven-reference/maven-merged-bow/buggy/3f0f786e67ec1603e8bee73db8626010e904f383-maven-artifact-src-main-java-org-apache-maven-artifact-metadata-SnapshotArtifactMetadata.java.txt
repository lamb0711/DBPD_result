transform deployment of SNAPSHOT.
Currently, the POM and artifact are deployed separately, causing an inconsistent version to be written out.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163684 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.manager.WagonManager;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.wagon.ResourceDoesNotExistException;
+import org.apache.maven.wagon.TransferFailedException;
+import org.codehaus.plexus.util.StringUtils;
+import java.io.File;
-    private int buildNumber = 1;
+    private int buildNumber = 0;
-    public static ArtifactMetadata createRemoteSnapshotMetadata( Artifact artifact )
+    public static SnapshotArtifactMetadata createRemoteSnapshotMetadata( Artifact artifact )
-        throws IOException, ArtifactPathFormatException
+        throws ArtifactMetadataRetrievalException
-        FileUtils.fileWrite( localRepository.getBasedir() + "/" + localRepository.pathOfMetadata( this ),
-                             getTimestamp() + "-" + buildNumber );
+        try
+        {
+            if ( timestamp == null )
+            {
+                timestamp = getUtcDateFormatter().format( new Date() );
+            }
+            String path = new File( localRepository.getBasedir(), localRepository.pathOfMetadata( this ) ).getPath();
+            FileUtils.fileWrite( path, getVersion() );
+        }
+        catch ( IOException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
+        }
+        catch ( ArtifactPathFormatException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
+        }
-    public void retrieveFromRemoteRepository( ArtifactRepository remoteRepository, ArtifactRepository localRepository )
-        throws IOException, ArtifactResolutionException
+    public String getVersion()
-/*
-// TODO: this is getting the artifact - needs to get the version.txt
-        resolver.resolve( artifact, Collections.singletonList( remoteRepository ), localRepository );
+        String version = artifact.getVersion();
+        if ( version != null )
+        {
+            version = StringUtils.replace( version, "SNAPSHOT", timestamp );
+        }
+        else
+        {
+            version = timestamp;
+        }
+        return version + "-" + buildNumber;
+    }
-        String version = FileUtils.fileRead( artifact.getPath() );
+    public void retrieveFromRemoteRepository( ArtifactRepository remoteRepository, WagonManager wagonManager )
+        throws ArtifactMetadataRetrievalException
+    {
+        try
+        {
+            File destination = File.createTempFile( "maven-artifact", null );
+            destination.deleteOnExit();
-        int index = UTC_TIMESTAMP_PATTERN.length();
-        timestamp = version.substring( 0, index );
+            try
+            {
+                wagonManager.getArtifactMetadata( this, remoteRepository, destination );
+            }
+            catch ( ResourceDoesNotExistException e )
+            {
+                // this just means that there is no snapshot version file, so we keep timestamp = null, build = 0
+                return;
+            }
-        buildNumber = Integer.valueOf( version.substring( index + 1 ) ).intValue();
-*/
+            String version = FileUtils.fileRead( destination );
+
+            int index = version.lastIndexOf( "-" );
+            timestamp = version.substring( 0, index );
+            buildNumber = Integer.valueOf( version.substring( index + 1 ) ).intValue();
+            index = version.indexOf( "-" );
+            if ( index >= 0 )
+            {
+                // ignore starting version part, will be prepended later
+                timestamp = timestamp.substring( index + 1 );
+            }
+        }
+        catch ( TransferFailedException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
+        }
+        catch ( IOException e )
+        {
+            throw new ArtifactMetadataRetrievalException( "Unable to retrieve metadata", e );
+        }
-        if ( timestamp == null )
-        {
-            timestamp = getUtcDateFormatter().format( new Date() );
-        }
+
+    public void update()
+    {
+        this.buildNumber++;
+        timestamp = getUtcDateFormatter().format( new Date() );
+    }

MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 UPD43 MOV83 MOV39 MOV42 MOV44 INS43 INS8 INS83 INS43 INS42 INS8 INS44 INS43 INS8 INS8 INS83 INS39 INS42 INS8 UPD34 UPD42 INS42 INS54 INS42 INS60 INS25 INS41 INS43 INS42 UPD42 MOV42 INS54 MOV41 INS21 INS21 MOV8 INS12 INS12 INS43 INS59 INS27 INS8 INS8 INS27 INS42 INS8 INS12 INS12 INS37 INS7 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS33 MOV21 INS21 INS42 INS45 INS42 INS60 INS21 INS54 INS60 INS60 INS21 INS21 INS21 INS25 INS44 INS8 INS44 INS8 INS22 INS42 INS32 INS43 INS59 INS32 MOV43 INS42 INS53 MOV43 INS42 INS53 INS42 INS42 INS7 INS7 INS43 INS59 INS32 INS8 INS12 INS43 INS59 INS39 INS59 INS7 INS7 INS7 INS27 INS8 INS43 INS42 INS53 MOV43 INS42 INS53 INS52 INS42 INS32 INS42 INS14 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS14 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS42 INS14 INS14 INS42 INS43 INS14 UPD42 MOV42 INS42 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS33 INS32 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS45 INS7 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS43 MOV32 MOV32 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS34 INS42 INS34 DEL42 DEL42 DEL45 DEL27 DEL32 DEL45 DEL42 DEL27 DEL8 DEL31 DEL43 DEL42 DEL44 DEL43 DEL8