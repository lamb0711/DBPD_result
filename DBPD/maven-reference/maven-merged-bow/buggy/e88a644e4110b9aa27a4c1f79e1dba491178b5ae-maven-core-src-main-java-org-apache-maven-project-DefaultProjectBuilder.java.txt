o Restored MavenProject.getCollectedProjects()

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@816681 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-        boolean errors =
+        boolean noErrors =
-        for ( InterimResult interimResult : interimResults )
-        {
-            Model model = interimResult.result.getEffectiveModel();
-            reactorModelPool.put( model.getGroupId(), model.getArtifactId(), model.getVersion(), model.getPomFile() );
-        }
+        populateReactorModelPool( reactorModelPool, interimResults );
-            for ( InterimResult interimResult : interimResults )
-            {
-                try
-                {
-                    ModelBuildingResult result = modelBuilder.build( interimResult.request, interimResult.result );
-
-                    MavenProject project = toProject( result, config, interimResult.listener );
-                    project.setExecutionRoot( interimResult.root );
-
-                    results.add( new DefaultProjectBuildingResult( project, result.getProblems(), null ) );
-                }
-                catch ( ModelBuildingException e )
-                {
-                    results.add( new DefaultProjectBuildingResult( e.getModelId(), interimResult.pomFile,
-                                                                   e.getProblems() ) );
-
-                    errors = true;
-                }
-            }
+            noErrors = build( results, new ArrayList<MavenProject>(), interimResults, config ) && noErrors;
-        if ( errors )
+        if ( !noErrors )
-        boolean errors = false;
+        boolean noErrors = true;
-                interimResults.add( new InterimResult( pomFile, request, result, listener, isRoot ) );
+                InterimResult interimResult = new InterimResult( pomFile, request, result, listener, isRoot );
+                interimResults.add( interimResult );
-                            errors = true;
+                            noErrors = false;
-                    if ( build( results, interimResults, moduleFiles, false, recursive, config, reactorModelPool,
-                                 modelCache ) )
+                    interimResult.modules = new ArrayList<InterimResult>();
+
+                    if ( !build( results, interimResult.modules, moduleFiles, false, recursive, config,
+                                reactorModelPool, modelCache ) )
-                        errors = true;
+                        noErrors = false;
-                errors = true;
+                noErrors = false;
-        return errors;
+        return noErrors;
+        List<InterimResult> modules = Collections.emptyList();
+
+    private void populateReactorModelPool( ReactorModelPool reactorModelPool, List<InterimResult> interimResults )
+    {
+        for ( InterimResult interimResult : interimResults )
+        {
+            Model model = interimResult.result.getEffectiveModel();
+            reactorModelPool.put( model.getGroupId(), model.getArtifactId(), model.getVersion(), model.getPomFile() );
+
+            populateReactorModelPool( reactorModelPool, interimResult.modules );
+        }
+    }
+
+    private boolean build( List<ProjectBuildingResult> results, List<MavenProject> projects,
+                           List<InterimResult> interimResults, ProjectBuildingRequest config )
+    {
+        boolean noErrors = true;
+
+        for ( InterimResult interimResult : interimResults )
+        {
+            try
+            {
+                ModelBuildingResult result = modelBuilder.build( interimResult.request, interimResult.result );
+
+                MavenProject project = toProject( result, config, interimResult.listener );
+
+                projects.add( project );
+
+                results.add( new DefaultProjectBuildingResult( project, result.getProblems(), null ) );
+
+                project.setExecutionRoot( interimResult.root );
+
+                List<MavenProject> modules = new ArrayList<MavenProject>();
+                noErrors = build( results, modules, interimResult.modules, config ) && noErrors;
+
+                projects.addAll( modules );
+
+                project.setCollectedProjects( modules );
+            }
+            catch ( ModelBuildingException e )
+            {
+                results.add( new DefaultProjectBuildingResult( e.getModelId(), interimResult.pomFile, e.getProblems() ) );
+
+                noErrors = false;
+            }
+        }
+
+        return noErrors;
+    }
+

INS26 INS40 INS31 INS31 INS23 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 MOV8 INS21 INS74 INS59 INS43 INS42 INS74 INS42 MOV70 INS74 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS60 INS41 INS32 INS8 INS38 UPD42 INS43 INS43 INS42 INS32 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS39 INS59 INS42 UPD42 INS42 INS42 INS42 INS21 INS42 UPD42 UPD9 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS7 INS32 MOV21 INS42 INS27 INS60 INS42 INS42 INS40 INS21 INS60 INS21 INS21 INS21 INS32 INS42 INS43 INS59 INS32 INS74 INS59 INS7 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 MOV14 INS42 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS7 INS38 UPD42 UPD9 INS42 INS42 INS74 INS32 INS42 UPD42 UPD9 INS43 INS43 INS40 INS14 INS32 INS43 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS74 MOV42 MOV42 INS40 MOV42 MOV9 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS43 INS43 UPD42 UPD9 INS42 INS42 UPD42 UPD9 DEL42 DEL42 DEL32