- Externalize archiver methods
- Update JarMojo
- Implements WarMojo (Not tested yet)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163458 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.io.File;
+import java.util.Iterator;
+import java.util.Set;
+
+import org.apache.maven.archiver.MavenArchiver;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.codehaus.plexus.archiver.war.WarArchiver;
+import org.codehaus.plexus.util.FileUtils;
+
- * @description build a jar
+ * @description build a war/webapp
- *  name="jarName"
+ *  name="warName"
- *  name="mainClass"
- *  type="String"
- *  required="false"
- *  validator=""
- *  expression="#maven.jar.mainClass"
- *  description=""
- * @parameter
- *  name="addClasspath"
- *  type="String"
- *  required="false"
- *  validator=""
- *  expression="#maven.jar.addClasspath"
- *  default="false"
- *  description=""
- * @parameter
+ *  name="warSourceDirectory"
+ *  type="String"
+ *  required="true"
+ *  validator=""
+ *  expression="#maven.war.src"
+ *  default="#basedir/src/webapp"
+ *  description=""
+ * @parameter
+ *  name="warSourceIncludes"
+ *  type="String"
+ *  required="false"
+ *  validator=""
+ *  expression="#maven.war.src.includes"
+ *  default="**"
+ *  description=""
+ * @parameter
+ *  name="warSourceIncludes"
+ *  type="String"
+ *  required="false"
+ *  validator=""
+ *  expression="#maven.war.src.excludes"
+ *  description=""
+ * @parameter
+ *  name="webXml"
+ *  type="String"
+ *  required="false"
+ *  validator=""
+ *  expression="#maven.war.webxml"
+ *  description=""
+ * @parameter
+ *  name="webappDirectory"
+ *  type="String"
+ *  required="true"
+ *  validator=""
+ *  expression="#maven.war.webapp.dir"
+ *  default="#project.build.output/#project.build.finalName"
+ *  description=""
+ * @parameter
+ *  name="mode"
+ *  type="String"
+ *  required="true"
+ *  validator=""
+ *  expression="#maven.war.mode"
+ *  default="war"
+ *  description=""
+ * @parameter
- *  expression="#project.build.output"
+ *  expression="#maven.war.build.dir"
+ *  default="#project.build.output"
+ * @parameter name="localRepository"
+ *  type="org.apache.maven.artifact.repository.ArtifactRepository"
+ *  required="true"
+ *  validator=""
+ *  expression="#localRepository"
+ *  description=""
+    public static final String WEB_INF = "WEB_INF";
+
+    private PluginExecutionRequest request;
+
+    private String mode;
+
+    private MavenProject project;
+
+    private ArtifactRepository localRepository;
+
+    private String outputDirectory;
+
+    private File webappDirectory;
+
+    private File warSourceDirectory;
+
+    private String warSourceIncludes;
+
+    private String warSourceExcludes;
+
+    private String webXml;
+
+    private File warFile;
+
+    public void copyResources( File sourceDirectory, File webappDirectory, String includes, String excludes, String webXml )
+        throws IOException
+    {
+        if ( sourceDirectory != webappDirectory )
+        {
+            request.getLog().info( "Copy webapp resources to " + webappDirectory.getAbsolutePath() );
+
+            if ( warSourceDirectory.exists() )
+            {
+                FileUtils.copyDirectory( sourceDirectory, webappDirectory, includes, excludes );
+            }
+
+            if ( webXml != null && ! "".equals( webXml ) )
+            {
+                FileUtils.copyFileToDirectory( new File( webXml ), new File( webappDirectory, WEB_INF ) );
+            }
+        }
+    }
+
+    /**
+     * @todo properties 'war.bundle' and 'war.target.path'
+     * @todo copy classes to classes webapp directory
+     */
+    public void buildWebapp( MavenProject project )
+        throws IOException
+    {
+        request.getLog().info( "Assembling webapp " + project.getArtifactId() );
+
+        File libDirectory = new File( webappDirectory, WEB_INF + "/lib" );
+
+        File tldDirectory = new File( webappDirectory, WEB_INF + "/tld" );
+
+        File classesDirectory = new File( webappDirectory, WEB_INF + "/classes" );
+
+        Set artifacts = project.getArtifacts();
+
+        for ( Iterator iter = artifacts.iterator(); iter.hasNext(); )
+        {
+            Artifact artifact = (Artifact) iter.next();
+            if ( "jar".equals( artifact.getType() ) )
+            {
+                FileUtils.copyFileToDirectory( new File( localRepository.getBasedir(), artifact.toString() ) , libDirectory );
+            }
+            if ( "tld".equals( artifact.getType() ) )
+            {
+                FileUtils.copyFileToDirectory( new File( localRepository.getBasedir(), artifact.toString() ) , tldDirectory );
+            }
+        }
+    }
+
+    public void generateExplodedWebapp()
+        throws IOException
+    {
+        webappDirectory.mkdirs();
+
+        File webinfDir = new File( webappDirectory, WEB_INF );
+
+        webinfDir.mkdirs();
+
+        copyResources( warSourceDirectory, webappDirectory, warSourceIncludes, warSourceExcludes, webXml );
+
+        //buildWebapp( project );
+    }
+
+    public void generateInPlaceWebapp()
+        throws IOException
+    {
+        webappDirectory = warSourceDirectory;
+
+        generateExplodedWebapp();
+    }
+
-        request.getLog().info("war");
+        parseRequest( request );
+
+        // ----------------------------------------------------------------------
+        //
+        // ----------------------------------------------------------------------
+
+        if ( "inplace".equals( mode ) )
+        {
+            generateInPlaceWebapp();
+        }
+        else
+        {
+            generateExplodedWebapp();
+
+            if ( ! "exploded".equals( mode ) )
+            {
+                //generate war file
+                request.getLog().info( "Generating war " + warFile.getAbsolutePath() );
+
+                MavenArchiver archiver = new MavenArchiver();
+
+                //archiver.setArchiver( new WarArchiver() );
+
+                archiver.setOutputFile( warFile );
+
+                archiver.getArchiver().addDirectory( webappDirectory, new String[] { "**/**" }, null );
+
+                // create archive
+                archiver.createArchive( request );
+            }
+        }
+    }
+
+    public void parseRequest( PluginExecutionRequest request )
+    {
+        this.request = request;
+
+        project = (MavenProject) request.getParameter( "project" );
+
+        localRepository = (ArtifactRepository) request.getParameter( "localRepository" );
+
+        outputDirectory = (String) request.getParameter( "outputDirectory" );
+
+        webappDirectory = new File( (String) request.getParameter( "webappDirectory" ) );
+
+        warSourceDirectory = new File( (String) request.getParameter( "warSourceDirectory" ) );
+
+        warSourceIncludes = (String) request.getParameter( "warSourceIncludes" );
+
+        warSourceExcludes = (String) request.getParameter( "warSourceExcludes" );
+
+        webXml = (String) request.getParameter( "webXml" );
+
+        mode = (String) request.getParameter( "mode" );
+
+        warFile = new File( outputDirectory, (String) request.getParameter( "warName" ) + ".war" );

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 MOV65 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS65 INS65 INS65 INS65 INS65 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS8 INS83 INS39 INS42 INS44 INS8 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS65 INS65 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS24 INS42 INS21 INS60 INS21 INS21 INS42 INS21 INS21 INS21 INS25 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS66 INS66 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS32 INS43 INS59 INS32 INS32 INS7 INS32 INS32 INS32 INS8 INS8 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS21 INS25 INS25 INS32 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS21 INS21 INS25 INS22 INS42 INS42 INS11 INS42 INS11 INS42 INS11 INS42 INS14 INS42 INS14 INS42 INS11 INS42 INS11 INS42 INS11 INS42 INS11 INS42 INS14 INS32 INS32 INS8 INS27 INS8 INS42 INS42 INS45 INS32 INS43 INS42 INS27 INS43 INS42 INS27 INS43 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS32 INS8 INS43 INS42 INS42 INS32 INS32 INS38 INS8 INS52 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS11 INS43 INS11 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS42 INS27 MOV32 INS42 INS27 INS42 INS42 INS21 INS27 INS38 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS11 INS45 INS42 INS32 INS21 INS45 INS42 INS32 INS21 INS42 INS42 INS42 INS32 MOV21 INS60 INS21 INS21 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS11 INS45 INS45 INS32 INS32 INS42 INS33 INS32 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS32 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS3 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS43 INS42 INS42 INS43 INS32 INS32 INS43 INS32 INS32 INS42 INS42 INS45 INS32 INS43 INS42 INS42 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS45 INS42 DEL45 DEL8