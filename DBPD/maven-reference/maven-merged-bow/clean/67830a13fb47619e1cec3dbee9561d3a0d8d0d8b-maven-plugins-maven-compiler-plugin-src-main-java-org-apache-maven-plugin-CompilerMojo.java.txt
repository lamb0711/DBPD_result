o Adding source-scanner support, for selectively including source files to be compiled, or processed in some way. This is going to be a core-plugin facility, so it's in maven-plugin.
o Added support to maven-compiler-plugin for a source scanner to determine the files that actually need recompiling...currently based on lastModification date.
o All of this stuff needs a good integration test, but it shouldn't mess any existing functionality up for now. Unit tests for the scanner stuff are included.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163698 13f79535-47bb-0310-9956-ffa450edef68

- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.maven.plugin.util.scan.InclusionScanException;
+import org.apache.maven.plugin.util.scan.SourceInclusionScanner;
+import org.apache.maven.plugin.util.scan.StaleSourceScanner;
+import org.apache.maven.plugin.util.scan.mapping.SuffixMapping;
+import java.util.HashSet;
+import java.util.Set;
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
- * @parameter name="compileSourceRoots"
- * type="java.util.List"
- * required="true"
- * validator=""
- * expression="#project.compileSourceRoots"
- * description=""
- * @parameter name="outputDirectory"
- * type="String"
- * required="true"
- * validator=""
- * expression="#project.build.outputDirectory"
- * description=""
- * @parameter name="classpathElements"
- * type="List"
- * required="true"
- * validator=""
- * expression="#project.compileClasspathElements"
- * description=""
- * @parameter name="debug"
- * type="boolean"
- * required="false"
- * validator=""
- * expression="#maven.compiler.debug"
- * description="Whether to include debugging information in the compiled class files; the default value is false"
+ * @parameter name="compileSourceRoots" type="java.util.List" required="true" validator=""
+ *            expression="#project.compileSourceRoots" description=""
+ * @parameter name="outputDirectory" type="String" required="true" validator=""
+ *            expression="#project.build.outputDirectory" description=""
+ * @parameter name="classpathElements" type="List" required="true" validator=""
+ *            expression="#project.compileClasspathElements" description=""
+ * @parameter name="debug" type="boolean" required="false" validator=""
+ *            expression="#maven.compiler.debug" description="Whether to include debugging
+ *            information in the compiled class files; the default value is false"
- * @parameter name="source" type="String" required="false" expression="#source" validator="" description="The -source argument for the Java compiler"
- * @parameter name="target" type="String" required="false" expression="#target" validator="" description="The -target argument for the Java compiler"
+ * @parameter name="source" type="String" required="false" expression="#source" validator=""
+ *            description="The -source argument for the Java compiler"
+ * @parameter name="target" type="String" required="false" expression="#target" validator=""
+ *            description="The -target argument for the Java compiler"
+ * @parameter name="staleMillis" type="long" required="false" expression="#lastModGranularityMs"
+ *            validator="" description="The granularity in milliseconds of the last modification
+ *            date for testing whether a source needs recompilation"
+ * @todo change staleMillis parameter type to Long
+    // TODO: Use long when supported
+    private String staleMillis = "0";
+
+        Set staleSources = computeStaleSources();
+
+        if ( staleSources != null && !staleSources.isEmpty() )
+        {
+            compilerConfiguration.setSourceFiles( staleSources );
+        }
+
-        
+
+    private Set computeStaleSources()
+        throws PluginExecutionException
+    {
+        long staleTime = 0;
+
+        if ( staleMillis != null && staleMillis.length() > 0 )
+        {
+            try
+            {
+                staleTime = Long.parseLong( staleMillis );
+            }
+            catch ( NumberFormatException e )
+            {
+                throw new PluginExecutionException( "Invalid staleMillis plugin parameter value: \'" + staleMillis
+                    + "\'", e );
+            }
+
+        }
+        SuffixMapping mapping = new SuffixMapping( ".java", ".class" );
+
+        SourceInclusionScanner scanner = new StaleSourceScanner( staleTime );
+
+        File outDir = new File( outputDirectory );
+
+        Set staleSources = new HashSet();
+
+        for ( Iterator it = compileSourceRoots.iterator(); it.hasNext(); )
+        {
+            String sourceRoot = (String) it.next();
+
+            File rootFile = new File( sourceRoot );
+
+            try
+            {
+                staleSources.addAll( scanner.getIncludedSources( rootFile, outDir ) );
+            }
+            catch ( InclusionScanException e )
+            {
+                throw new PluginExecutionException( "Error scanning source root: \'" + sourceRoot
+                    + "\' for stale files to recompile.", e );
+            }
+        }
+
+        return staleSources;
+    }
+
-     * @todo also in ant plugin. This should be resolved at some point so that it does not need to be calculated continuously - or should the plugins accept empty source roots as is?
+     * @todo also in ant plugin. This should be resolved at some point so that it does not need to
+     *       be calculated continuously - or should the plugins accept empty source roots as is?
-}
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS65 INS65 INS83 INS43 INS59 INS83 INS43 INS42 INS43 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS45 INS60 INS25 INS42 INS42 INS60 INS25 INS60 INS60 INS60 INS60 INS24 INS41 INS43 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS42 UPD66 INS66 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS34 INS27 INS27 INS54 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS54 INS42 INS42 INS33 INS32 INS32 INS42 INS33 INS32 INS34 INS8 INS12 INS43 INS45 INS45 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS21 INS44 INS8 INS7 INS43 INS42 INS53 INS43 INS32 INS43 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66