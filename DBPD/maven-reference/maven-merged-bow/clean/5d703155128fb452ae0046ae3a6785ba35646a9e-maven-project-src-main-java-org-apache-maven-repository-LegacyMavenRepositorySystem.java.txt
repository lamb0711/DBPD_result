o remove static method from MavenMetadataSource


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@747910 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashSet;
+import org.apache.maven.artifact.resolver.filter.AndArtifactFilter;
+import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
+import org.apache.maven.model.Exclusion;
-import org.apache.maven.project.artifact.MavenMetadataSource;
-    public Set<Artifact> createArtifacts( List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenRepositoryWrapper project )
+    /**
+     * @return {@link Set} &lt; {@link Artifact} >
+     * @todo desperately needs refactoring. It's just here because it's implementation is maven-project specific
+     */
+    public Set<Artifact> createArtifacts( List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenRepositoryWrapper reactor )
-        return MavenMetadataSource.createArtifacts( artifactFactory, dependencies, inheritedScope, dependencyFilter, project );
-    }
+        Set<Artifact> projectArtifacts = new LinkedHashSet<Artifact>( dependencies.size() );
-    //
+        for ( Iterator<Dependency> i = dependencies.iterator(); i.hasNext(); )
+        {
+            Dependency d = i.next();
+            String scope = d.getScope();
+
+            if ( StringUtils.isEmpty( scope ) )
+            {
+                scope = Artifact.SCOPE_COMPILE;
+
+                d.setScope( scope );
+            }
+
+            VersionRange versionRange;
+            try
+            {
+                versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
+            }
+            catch ( InvalidVersionSpecificationException e )
+            {
+                throw new InvalidDependencyVersionException( reactor.getId(), d, reactor.getFile(), e );
+            }
+            Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
+                                                                          versionRange, d.getType(), d.getClassifier(),
+                                                                          scope, inheritedScope, d.isOptional() );
+
+            if ( Artifact.SCOPE_SYSTEM.equals( scope ) )
+            {
+                artifact.setFile( new File( d.getSystemPath() ) );
+            }
+
+            ArtifactFilter artifactFilter = dependencyFilter;
+
+            if ( ( artifact != null ) && ( ( artifactFilter == null ) || artifactFilter.include( artifact ) ) )
+            {
+                if ( ( d.getExclusions() != null ) && !d.getExclusions().isEmpty() )
+                {
+                    List<String> exclusions = new ArrayList<String>();
+                    for ( Iterator<Exclusion> j = d.getExclusions().iterator(); j.hasNext(); )
+                    {
+                        Exclusion e = j.next();
+                        exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
+                    }
+
+                    ArtifactFilter newFilter = new ExcludesArtifactFilter( exclusions );
+
+                    if ( artifactFilter != null )
+                    {
+                        AndArtifactFilter filter = new AndArtifactFilter();
+                        filter.add( artifactFilter );
+                        filter.add( newFilter );
+                        artifactFilter = filter;
+                    }
+                    else
+                    {
+                        artifactFilter = newFilter;
+                    }
+                }
+
+                artifact.setDependencyFilter( artifactFilter );
+
+                if ( reactor != null )
+                {
+                    artifact = reactor.find( artifact );
+                }
+
+                projectArtifacts.add( artifact );
+            }
+        }
+
+        return projectArtifacts;
+    }    
+    

MOV26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS29 INS65 INS65 UPD42 INS60 INS24 INS41 INS66 INS65 INS66 INS65 INS66 INS66 INS74 INS59 INS58 INS32 INS8 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS74 INS59 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS25 INS42 INS42 INS74 INS32 INS43 INS43 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS43 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS40 INS42 INS42 INS21 INS42 INS42 INS42 INS36 INS36 INS25 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS7 INS43 INS42 INS53 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 MOV42 INS32 INS32 INS27 INS27 INS27 INS8 INS32 INS27 INS8 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS36 INS32 INS36 INS38 INS60 INS24 INS60 INS25 INS42 INS42 INS42 INS42 INS33 INS21 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS43 INS32 INS27 INS42 INS42 INS42 INS27 INS32 INS74 INS59 INS58 INS32 INS8 INS43 INS59 INS27 INS8 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS43 INS43 INS42 INS14 INS74 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS14 INS42 INS33 INS60 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS43 INS42 INS43 INS59 INS32 INS32 INS7 INS7 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41