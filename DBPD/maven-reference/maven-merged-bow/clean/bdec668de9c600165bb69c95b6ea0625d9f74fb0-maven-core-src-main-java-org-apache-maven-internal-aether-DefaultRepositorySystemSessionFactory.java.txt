[MNG-6656] Introduce base for build/consumer pom

+import org.apache.maven.feature.Features;
+import org.apache.maven.model.building.TransformerContext;
+import org.apache.maven.model.building.TransformerException;
+import org.eclipse.aether.SessionData;
+import org.eclipse.aether.artifact.Artifact;
+import org.eclipse.aether.transform.FileTransformer;
+import org.eclipse.aether.transform.TransformException;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
-
-
+        if ( Features.buildConsumer().isActive() )
+        {
+            session.setFileTransformerManager( a -> getTransformersForArtifact( a, session.getData() ) );
+        }
+
+    
+    private Collection<FileTransformer> getTransformersForArtifact( final Artifact artifact,
+                                                                    final SessionData sessionData )
+    {
+        TransformerContext context = (TransformerContext) sessionData.get( TransformerContext.KEY );
+        Collection<FileTransformer> transformers = new ArrayList<>();
+        
+        // In case of install:install-file there's no transformer context, as the goal is unrelated to the lifecycle. 
+        if ( "pom".equals( artifact.getExtension() ) && context != null )
+        {
+            transformers.add( new FileTransformer()
+            {
+                @Override
+                public InputStream transformData( File pomFile )
+                    throws IOException, TransformException
+                {
+                    try
+                    {
+                        return new ConsumerModelSourceTransformer().transform( pomFile.toPath(), context );
+                    }
+                    catch ( TransformerException e )
+                    {
+                        throw new TransformException( e );
+                    }
+                }
+                
+                @Override
+                public Artifact transformArtifact( Artifact artifact )
+                {
+                    return artifact;
+                }
+            } );
+        }
+        return Collections.unmodifiableCollection( transformers );
+    }
-}
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS83 INS74 INS42 INS44 INS44 INS8 INS25 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS60 INS25 INS41 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS32 INS42 INS21 INS42 INS42 INS11 INS43 INS43 INS42 INS14 INS32 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS74 INS45 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS86 INS42 INS42 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS14 INS59 INS32 INS42 INS43 INS1 INS42 INS42 INS42 INS32 INS42 INS31 INS31 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS54 INS42 INS42 INS43 INS42 INS41 INS42 INS8 INS12 INS42 INS42 INS41 INS44 INS8 INS32 INS43 INS42 INS53 INS14 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS42 INS43 INS42 INS42 INS42