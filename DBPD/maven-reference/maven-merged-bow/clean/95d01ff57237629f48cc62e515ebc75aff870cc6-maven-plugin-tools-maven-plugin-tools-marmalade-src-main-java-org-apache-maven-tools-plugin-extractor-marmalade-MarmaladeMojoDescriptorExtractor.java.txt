o Completed marmalade-mojo support, tested with m2 bootstrap with empty local repo and maven-core pegged at 2/26/2005.

  Will resolve CI issues as soon as lifecycle is fixed for IT0013.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163430 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.script.marmalade.tags.MojoTag;
+import org.codehaus.marmalade.metamodel.ScriptBuilder;
+import org.codehaus.marmalade.model.MarmaladeScript;
+import org.codehaus.marmalade.model.MarmaladeTag;
+import org.codehaus.marmalade.parsing.DefaultParsingContext;
+import org.codehaus.marmalade.parsing.MarmaladeParsingContext;
-import org.codehaus.marmalade.util.LazyMansAccess;
+import org.codehaus.marmalade.runtime.DefaultContext;
+import org.codehaus.marmalade.runtime.MarmaladeExecutionContext;
+import java.io.BufferedReader;
+import java.io.FileReader;
-    private ScriptParser scriptParser = new ScriptParser();
-
-        String[] files = PluginUtils.findSources( sourceDir, "**/*.mmld" );
-
-        Set descriptors = new HashSet();
-
-        File dir = new File( sourceDir );
-        for ( int i = 0; i < files.length; i++ )
+        ClassLoader oldCl = Thread.currentThread().getContextClassLoader();
+        try
-            String file = files[i];
+            Thread.currentThread().setContextClassLoader(MarmaladeMojoDescriptorExtractor.class.getClassLoader());
+            
+            String[] files = PluginUtils.findSources( sourceDir, "**/*.mmld" );
-            Map context = new TreeMap();
-            context.put( MarmaladeMojoExecutionDirectives.SCRIPT_BASEPATH_INVAR, sourceDir );
+            Set descriptors = new HashSet();
-            File scriptFile = new File( dir, file );
+            File dir = new File( sourceDir );
+            for ( int i = 0; i < files.length; i++ )
+            {
+                String file = files[i];
-            context = LazyMansAccess.executeFromFile( scriptFile, context );
+                File scriptFile = new File( dir, file );
+                
+                MarmaladeScript script = parse(scriptFile);
+                
+                MarmaladeTag rootTag = script.getRoot();
+                if(rootTag instanceof MojoTag)
+                {
+                    Map contextMap = new TreeMap();
+                    contextMap.put( MarmaladeMojoExecutionDirectives.SCRIPT_BASEPATH_INVAR, sourceDir );
+                    
+                    MarmaladeExecutionContext context = new DefaultContext(contextMap);
+                    
+                    script.execute(context);
+                    
+                    contextMap = context.getExternalizedVariables();
-            MojoDescriptor descriptor = (MojoDescriptor) context.get( MarmaladeMojoExecutionDirectives.METADATA_OUTVAR );
+                    MojoDescriptor descriptor = (MojoDescriptor) contextMap.get( MarmaladeMojoExecutionDirectives.METADATA_OUTVAR );
-            descriptor.setImplementation( file );
+                    descriptors.add( descriptor );
+                }
+                else
+                {
+                    System.out.println("This script is not a mojo. Its root tag is {element: " + rootTag.getTagInfo().getElement() + ", class: " + rootTag.getClass().getName() + "}");
+                }
+            }
-            descriptors.add( descriptor );
+            return descriptors;
+        finally
+        {
+            Thread.currentThread().setContextClassLoader(oldCl);
+        }
+    }
-        return descriptors;
+    private MarmaladeScript parse( File scriptFile ) throws Exception
+    {
+        BufferedReader reader = null;
+        
+        try
+        {
+            reader = new BufferedReader(new FileReader(scriptFile));
+            
+            MarmaladeParsingContext parsingContext = new DefaultParsingContext();
+            
+            parsingContext.setInputLocation(scriptFile.getPath());
+            parsingContext.setInput(reader);
+            
+            ScriptParser parser = new ScriptParser();
+            
+            ScriptBuilder builder = parser.parse(parsingContext);
+            
+            MarmaladeScript script = builder.build();
+            
+            return script;
+        }
+        finally
+        {
+            if(reader != null)
+            {
+                try
+                {
+                    reader.close();
+                }
+                catch(Exception e)
+                {
+                }
+            }
+        }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS43 INS59 MOV8 INS8 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS33 INS21 INS60 INS21 INS21 INS60 INS60 INS60 INS41 INS25 INS32 INS42 INS32 INS32 INS7 INS43 INS59 INS32 INS32 MOV43 MOV59 INS43 INS59 INS43 INS59 INS42 INS27 INS8 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS25 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS57 INS42 INS43 INS59 INS43 INS59 INS62 INS8 INS8 INS42 INS42 INS43 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 MOV60 MOV21 INS60 INS21 MOV21 MOV60 MOV21 MOV21 INS42 INS43 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 MOV43 INS42 INS32 INS43 INS42 UPD42 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 INS40 UPD42 INS27 INS42 INS42 INS42 INS43 INS42 UPD42 UPD42 MOV43 INS45 INS32 INS45 INS32 INS45 INS42 UPD42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL83 DEL23 DEL42 DEL42