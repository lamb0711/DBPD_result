start to clean up the plugin vs. goal name handling so the hardcoding can be reduced, and eventually removed


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168040 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Goal;
+import java.util.Collections;
-import java.util.Collections;
- * @todo there is some duplication between this and the plugin manager
+ * @todo there is some duplication between this and the plugin manager
-                verifyMojoPhase( artifactHandler.packageGoal(), session, phaseMap );
+                configureMojo( artifactHandler.packageGoal(), session, phaseMap );
-        processPluginConfiguration( session.getProject(), session, phaseMap );
+        processPluginConfiguration( project, session, phaseMap );
+        // TODO: use the model injector, or just lookup the versions from the project?
+        // They need to be injected, but we should track the required plugins first, then just sweep through.
+
-                plugin.setVersion( "1.0-SNAPSHOT" );
+                plugin.setVersion( PluginDescriptor.getDefaultPluginVersion() );
+
-        if ( plugin.getGoals().size() > 0 )
+        for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )
-            String pluginId = pluginDescriptor.getArtifactId();
+            MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
-            // TODO: Right now this maven-foo-plugin so this is a hack right now.
-
-            pluginId = PluginDescriptor.getPluginIdFromArtifactId( pluginId );
-
-            for ( Iterator i = plugin.getGoals().iterator(); i.hasNext(); )
+            // TODO: remove later
+            if ( mojoDescriptor.getGoal() == null )
-                Goal goal = (Goal) i.next();
-
-                String mojoId = pluginId + ":" + goal.getId();
-
-                MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( mojoId );
-
-                if ( mojoDescriptor == null )
-                {
-                    throw new LifecycleExecutionException( "A goal '" + mojoId +
-                                                           "' was declared in pom.xml, but does not exist" );
-                }
-
-                configureMojo( mojoDescriptor, phaseMap, session.getSettings() );
+                throw new LifecycleExecutionException( "The plugin " + artifactId + " was built with an older version of Maven" );
-        }
-        else
-        {
-            for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )
-            {
-                MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();
-                configureMojo( mojoDescriptor, phaseMap, session.getSettings() );
+            if ( plugin.getGoals().isEmpty() || plugin.getGoalsAsMap().containsKey( mojoDescriptor.getGoal() ) )
+            {
+                configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
-    private void configureMojo( MojoDescriptor mojoDescriptor, Map phaseMap, Settings settings )
+    private void configureMojoPhaseBinding( MojoDescriptor mojoDescriptor, Map phaseMap, Settings settings )
-                    throw new LifecycleExecutionException( "Required phase '" + mojoDescriptor.getPhase() + "' not found" );
+                    throw new LifecycleExecutionException(
+                        "Required phase '" + mojoDescriptor.getPhase() + "' not found" );
-                        verifyMojoPhase( goal, session, phaseMap );
+                        configureMojo( goal, session, phaseMap );
-            verifyMojoPhase( task, session, phaseMap );
+            configureMojo( task, session, phaseMap );
-    private void verifyMojoPhase( String task, MavenSession session, Map phaseMap )
+    private void configureMojo( String task, MavenSession session, Map phaseMap )
-            String pluginId = task;
-
-            if ( pluginId.indexOf( ":" ) > 0 )
-            {
-                pluginId = pluginId.substring( 0, pluginId.indexOf( ":" ) );
-            }
-
-            String artifactId = PluginDescriptor.getDefaultPluginArtifactId( pluginId );
+            String artifactId = PluginDescriptor.getPluginArtifactIdFromGoal( task );
-                pluginManager.verifyPluginForGoal( task, session );
+                pluginManager.verifyPlugin( groupId, artifactId, session );
-        configureMojo( mojoDescriptor, phaseMap, session.getSettings() );
+        configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );
-        // ----------------------------------------------------------------------
-        // We have something of the form <pluginId>:<mojoId>, so this might be
-        // something like:
-        //
-        // clean:clean
-        // idea:idea
-        // archetype:create
-        // ----------------------------------------------------------------------
-

MOV26 MOV65 UPD42 UPD42 MOV24 UPD42 MOV42 INS25 INS25 UPD42 INS27 INS8 INS27 INS8 MOV43 INS32 INS33 INS53 MOV32 INS32 MOV21 UPD42 INS42 INS42 INS14 UPD42 INS32 UPD42 MOV42 MOV32 UPD42 UPD42 UPD42 INS32 MOV43 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS45 INS42 INS45 UPD42 DEL40 DEL26 DEL42 DEL32 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL8 DEL8 DEL25 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL45 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43