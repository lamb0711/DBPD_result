code simplification
+import java.io.InputStream;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
-        RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
-
+            RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
+
-        FileInputStream fis = null;
+        SyncContext syncContext = syncContextFactory.newInstance( session, true );
+
-            if ( metadata != null )
+            syncContext.acquire( null, Collections.singleton( metadata ) );
+
+            versioning = readMavenRepositoryMetadataVersioning( metadata.getFile() );
+
+            /*
+             * NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
+             * of the local repository. This is especially troublesome during snapshot resolution so we try
+             * to handle that gracefully.
+             */
+            if ( versioning != null && repository instanceof LocalRepository )
-                SyncContext syncContext = syncContextFactory.newInstance( session, true );
-
-                try
+                Snapshot snapshot = versioning.getSnapshot();
+                if ( snapshot != null && snapshot.getBuildNumber() > 0 )
-                    syncContext.acquire( null, Collections.singleton( metadata ) );
+                    Versioning repaired = new Versioning();
+                    repaired.setLastUpdated( versioning.getLastUpdated() );
+                    snapshot = new Snapshot();
+                    snapshot.setLocalCopy( true );
+                    repaired.setSnapshot( snapshot );
-                    if ( metadata.getFile() != null && metadata.getFile().exists() )
-                    {
-                        fis = new FileInputStream( metadata.getFile() );
-                        org.apache.maven.artifact.repository.metadata.Metadata m =
-                            new MetadataXpp3Reader().read( fis, false );
-                        versioning = m.getVersioning();
+                    versioning = repaired;
-                        /*
-                         * NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
-                         * of the local repository. This is especially troublesome during snapshot resolution so we try
-                         * to handle that gracefully.
-                         */
-                        if ( versioning != null && repository instanceof LocalRepository )
-                        {
-                            if ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 )
-                            {
-                                Versioning repaired = new Versioning();
-                                repaired.setLastUpdated( versioning.getLastUpdated() );
-                                Snapshot snapshot = new Snapshot();
-                                snapshot.setLocalCopy( true );
-                                repaired.setSnapshot( snapshot );
-                                versioning = repaired;
-
-                                throw new IOException( "Snapshot information corrupted with remote repository data"
-                                    + ", please verify that no remote repository uses the id '" + repository.getId()
-                                    + "'" );
-                            }
-                        }
-                    }
-                }
-                finally
-                {
-                    syncContext.release();
+                    throw new IOException( "Snapshot information corrupted with remote repository data"
+                        + ", please verify that no remote repository uses the id '" + repository.getId()
+                        + "'" );
-            IOUtil.close( fis );
+            syncContext.release();
+    private Versioning readMavenRepositoryMetadataVersioning( File metadataFile )
+        throws IOException, XmlPullParserException
+    {
+        if ( metadataFile == null ||! metadataFile.exists() )
+        {
+            return null;
+        }
+
+        InputStream is = null;
+        try
+        {
+            is = new FileInputStream( metadataFile );
+
+            MetadataXpp3Reader reader = new MetadataXpp3Reader();
+            org.apache.maven.artifact.repository.metadata.Metadata m = reader.read( is, false );
+
+            return m.getVersioning();
+        }
+        finally
+        {
+            IOUtil.close( is );
+        }
+    }
+

INS26 INS26 INS40 INS40 INS31 MOV8 INS83 INS43 INS42 INS44 INS43 INS43 INS8 MOV60 MOV60 INS54 MOV41 INS42 INS43 INS42 INS42 INS42 INS25 INS60 INS54 MOV8 MOV12 MOV8 INS42 INS27 INS8 INS43 INS59 INS8 INS8 MOV60 MOV21 INS27 INS38 INS41 INS42 INS42 INS33 MOV21 INS60 INS60 INS41 INS21 INS42 INS33 INS32 INS33 INS43 MOV59 MOV43 INS59 MOV32 INS32 INS32 INS60 INS42 INS42 UPD42 INS42 INS42 MOV14 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 MOV43 INS59 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS9 INS42 MOV32 INS21 INS42 INS7 UPD42 MOV42 INS42 MOV14 DEL60 DEL42 DEL32 DEL42 DEL59 DEL60 DEL32 DEL33 DEL27 DEL32 DEL32 DEL27 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL54 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL42 DEL42 DEL9 DEL32