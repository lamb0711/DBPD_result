Fix MAVEN-1113. Support CSV remote repositories in build.properties


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162537 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.util.StringTokenizer;
+    public static final String SNAPSHOT_SIGNATURE = "-SNAPSHOT";
+    
-    private String baseUrl;
+    private List remoteRepos = new ArrayList();
-        baseUrl = properties.getProperty( "maven.repo.remote" );
-
-        if ( baseUrl == null )
-        {
-            baseUrl = "http://www.ibiblio.org/maven/";
-        }
+        setRemoteRepo(properties.getProperty( "maven.repo.remote" ));
-                if ( destinationFile.exists() )
+                if ( destinationFile.exists() && !file.endsWith(SNAPSHOT_SIGNATURE))
-                log( "Downloading dependency: " + baseUrl + file );
-
-                int numRetries = 3;
-
-                while ( numRetries >= 0 )
-                {
-                    try
-                    {
-                        HttpUtils.getFile( baseUrl + file,
-                                           destinationFile,
-                                           ignoreErrors,
-                                           useTimestamp,
-                                           proxyHost,
-                                           proxyPort,
-                                           proxyUserName,
-                                           proxyPassword );
-                        break;
-                    }
-                    catch ( Exception e )
-                    {
-                        numRetries--;
-
-                        continue;
-                    }
-                }
+                log( "Downloading dependency: " + file );
+                
+                getRemoteArtifact(file, destinationFile);
+                
-                    throw new Exception( "Failed to download " + baseUrl + file );
+                    throw new Exception( "Failed to download " + file );
+    
+    private void setRemoteRepo(String repos)
+    {
+        remoteRepos = new ArrayList();
+        
+        if (repos == null)
+        {
+            remoteRepos.add("http://www.ibiblio.org/maven/");
+            return;
+        }
+        
+        StringTokenizer st = new StringTokenizer(repos, ",");
+        while (st.hasMoreTokens())
+        {
+            remoteRepos.add((String)st.nextToken().trim());
+        }
+    }
+    
+    private List getRemoteRepo()
+    {
+        return remoteRepos;
+    }
+    /**
+     * Retrieve a <code>remoteFile</code> from the maven remote repositories
+     * and store it at <code>localFile</code>
+     * @param artifact the artifact to retrieve from the repositories.
+     * @return true if the retrieval succeeds, false otherwise.
+     */
+    private boolean getRemoteArtifact( String file, File destinationFile )
+    {
+        boolean fileFound = false;
+
+        for ( Iterator i = getRemoteRepo().iterator(); i.hasNext();)
+        {
+            String remoteRepo = (String) i.next();
+
+            // The username and password parameters are not being
+            // used here. Those are the "" parameters you see below.
+            String url = remoteRepo + "/" + file;
+
+            if ( !url.startsWith( "file" ) )
+            {
+                url = replace( url, "//", "/" );
+                if ( url.startsWith( "https" ) )
+                {
+                    url = replace( url, "https:/", "https://" );
+                }
+                else
+                {
+                    url = replace( url, "http:/", "http://" );
+                }
+            }
+
+            // Attempt to retrieve the artifact and set the checksum if retrieval
+            // of the checksum file was successful.
+            try
+            {
+                HttpUtils.getFile( url,
+                                   destinationFile,
+                                   ignoreErrors,
+                                   useTimestamp,
+                                   proxyHost,
+                                   proxyPort,
+                                   proxyUserName,
+                                   proxyPassword,
+                                   true );
+
+                // Artifact was found, continue checking additional remote repos (if any)
+                // in case there is a newer version (i.e. snapshots) in another repo
+                fileFound = true;
+            }
+            catch (FileNotFoundException e)
+            {
+                // Ignore
+            }
+            catch ( Exception e )
+            {
+                // If there are additional remote repos, then ignore exception
+                // as artifact may be found in another remote repo. If there
+                // are no more remote repos to check and the artifact wasn't found in
+                // a previous remote repo, then artifactFound is false indicating
+                // that the artifact could not be found in any of the remote repos
+                //
+                // arguably, we need to give the user better control (another command-
+                // line switch perhaps) of what to do in this case? Maven already has
+                // a command-line switch to work in offline mode, but what about when
+                // one of two or more remote repos is unavailable? There may be multiple
+                // remote repos for redundancy, in which case you probably want the build
+                // to continue. There may however be multiple remote repos because some
+                // artifacts are on one, and some are on another. In this case, you may
+                // want the build to break.
+                //
+                // print a warning, in any case, so user catches on to mistyped
+                // hostnames, or other snafus
+                log("Error retrieving artifact from [" + url + "]: ");
+            }
+        }
+
+        return fileFound;
+    }
+    
+    /**
+     * <p>Replaces all occurrences of a String within another String.</p>
+     *
+     * This methods comes from Commons Lang
+     *
+     * <p>A <code>null</code> reference passed to this method is a no-op.</p>
+     *
+     * <pre>
+     * StringUtils.replace(null, *, *)        = null
+     * StringUtils.replace("", *, *)          = ""
+     * StringUtils.replace("any", null, *)    = "any"
+     * StringUtils.replace("any", *, null)    = "any"
+     * StringUtils.replace("any", "", *)      = "any"
+     * StringUtils.replace("aba", "a", null)  = "aba"
+     * StringUtils.replace("aba", "a", "")    = "b"
+     * StringUtils.replace("aba", "a", "z")   = "zbz"
+     * </pre>
+     *
+     * @param text  text to search and replace in, may be null
+     * @param repl  the String to search for, may be null
+     * @param with  the String to replace with, may be null
+     * @return the text with any replacements processed,
+     *  <code>null</code> if null String input
+     */
+    private String replace(String text, String repl, String with)
+    {
+        StringBuffer buf = new StringBuffer(text.length());
+        int start = 0, end = 0;
+        while ((end = text.indexOf(repl, start)) != -1)
+        {
+            buf.append(text.substring(start, end)).append(with);
+            start = end + repl.length();
+        }
+        buf.append(text.substring(start));
+        return buf.toString();
+    }
+    

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS43 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS45 INS42 UPD42 INS14 INS43 INS42 INS21 INS25 INS60 INS61 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS24 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS61 INS21 INS41 INS43 INS32 INS42 INS7 INS27 INS8 INS43 INS59 INS32 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS39 INS59 INS58 INS32 INS8 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS59 INS27 INS8 INS32 INS32 INS42 INS42 MOV32 INS42 INS14 INS42 INS33 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS21 INS42 INS9 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS54 INS42 INS42 INS14 INS42 INS34 INS42 INS34 INS36 INS38 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS43 INS42 INS45 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS8 INS12 INS12 INS43 INS32 INS7 INS34 INS32 INS7 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS11 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS32 INS21 INS25 INS21 INS21 INS44 INS8 MOV44 INS8 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS27 INS27 INS43 INS32 INS42 INS43 INS32 INS42 INS45 INS42 INS42 INS42 INS45 INS7 INS32 INS8 INS8 INS32 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 MOV32 INS38 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS7 INS7 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 DEL42 DEL7 DEL42 DEL33 DEL27 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL34 DEL27 DEL10 DEL8 DEL42 DEL37 DEL21 DEL18 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42