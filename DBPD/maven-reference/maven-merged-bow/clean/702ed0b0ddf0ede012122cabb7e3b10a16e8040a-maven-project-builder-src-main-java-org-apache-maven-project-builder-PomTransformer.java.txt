Fixed various ordering of element problems during plugin management joins.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@737812 13f79535-47bb-0310-9956-ffa450edef68

-        boolean joinedContainer = false;
+        List<ModelProperty> joinedContainers = new ArrayList<ModelProperty>();
-                    joinedContainer = true;
-                    source.join( pluginContainer, new ArtifactModelContainerFactory().create(managementPropertiesWithoutExecutions) );
+                    source.joinWithOriginalOrder( pluginContainer, new ArtifactModelContainerFactory().create(managementPropertiesWithoutExecutions) );
-                            if(b.containerAction(c).equals(ModelContainerAction.JOIN)) //----
+                            if(b.containerAction(c).equals(ModelContainerAction.JOIN))
-                                source.join(b, c);
+                                joinedContainers.addAll(source.join(b, c).getProperties());
+              // ExecutionRule rule = new ExecutionRule();
+               // List<ModelProperty> x = rule.execute(d.getProperties());
+               // List<ModelProperty> x = (!joinedContainer) ? rule.execute(es.getProperties()) :
+               //         ModelTransformerContext.sort(rule.execute(es.getProperties()),
+               //                 ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
+
+             //   source.replace(d, d.createNewInstance(x));
-                                joinedExecutionContainers.add(a);//-----
-                     //           Collections.reverse(joinedExecutionContainers);
+                                joinedExecutionContainers.add(a);
-                List<ModelProperty> x = rule.execute(es.getProperties());
-               // List<ModelProperty> x = (!joinedContainer) ? rule.execute(es.getProperties()) :
-               //         ModelTransformerContext.sort(rule.execute(es.getProperties()),
-               //                 ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
+               // List<ModelProperty> x = rule.execute(es.getProperties());
+                List<ModelProperty> x = !aContainsAnyOfB(es.getProperties(), joinedContainers) ? rule.execute(es.getProperties()) :
+                        ModelTransformerContext.sort(rule.execute(es.getProperties()),
+                                ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri);
-        props = joinedContainer ? ModelTransformerContext.sort(dataSource.getModelProperties(), ProjectUri.baseUri)
-                : dataSource.getModelProperties();
+        props =// false ? ModelTransformerContext.sort(dataSource.getModelProperties(), ProjectUri.baseUri)
+                dataSource.getModelProperties();
+    private static boolean aContainsAnyOfB(List<ModelProperty> a, List<ModelProperty> b) {
+        for(ModelProperty mpA : a )
+        {
+            for(ModelProperty mpB : b)
+            {
+                if(mpA.equals(mpB))
+                {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+

INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS74 INS42 INS74 INS42 INS70 INS41 INS74 INS43 INS43 INS43 INS43 INS44 INS42 INS8 INS9 INS43 INS43 UPD42 INS14 MOV32 INS42 INS42 INS42 INS42 INS43 INS42 INS70 INS42 INS42 INS74 INS42 INS44 INS42 INS8 INS43 INS43 INS43 INS42 INS25 INS42 INS42 INS42 INS32 INS8 INS16 INS42 INS42 INS42 INS41 INS38 MOV32 INS32 INS9 UPD42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV32 INS42 DEL39 DEL9 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL16