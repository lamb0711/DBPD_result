Fixing problem with using distributionManagement repository definition for download of plugins.xml metadata.

Now, in order to build a maven plugin, you need two things:

1. a repository defined in distributionManagment
2. a repository defined in <repositories/> which has the same id as the one in distributionManagement.

This is necessary, since in most cases SSH will be used in the distributionManagement definition for uploading the plugin...which means that the download of the existing plugins.xml file might not be available for users trying to run an install. SSH requires authentication information, and users (particularly those running the bootstrap) might not have this auth info.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@216013 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import java.util.List;
+
-            ArtifactRepository distributionRepository = project.getDistributionManagementArtifactRepository();
-            
-            if ( distributionRepository == null )
+        ArtifactRepository distributionRepository = project.getDistributionManagementArtifactRepository();
+
+        if ( distributionRepository == null )
+        {
+            throw new MojoExecutionException(
+                                              "You must provide a distributionManagement section with a repository element in your POM." );
+        }
+
+        String distributionRepositoryId = distributionRepository.getId();
+
+        List remoteArtifactRepositories = project.getRemoteArtifactRepositories();
+
+        ArtifactRepository remote = null;
+
+        for ( Iterator it = remoteArtifactRepositories.iterator(); it.hasNext(); )
+        {
+            ArtifactRepository remoteRepository = (ArtifactRepository) it.next();
+
+            if ( distributionRepositoryId.equals( remoteRepository.getId() ) )
-                throw new MojoExecutionException( "You must provide a distributionManagement section with a repository element in your POM." );
+                remote = remoteRepository;
+                break;
+        }
+
+        if ( remote == null )
+        {
+            StringBuffer message = new StringBuffer();
+            
+            message.append( "You must provide a artifact repository definition in <repositories/> that matches " +
+                    "the id of the repository specified in <distributionManagement/>: \'"
+                                                  + distributionRepositoryId + "\'." );
+            
+            throw new MojoExecutionException( message.toString() );
+        }

INS26 INS26 INS40 INS40 INS8 MOV60 MOV25 INS60 INS60 INS60 INS24 INS25 INS43 INS59 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS33 INS60 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS21 INS10 INS42 INS42 INS14 INS42 INS42 INS27 INS43 INS32 INS43 INS32 INS42 INS42 INS7 INS43 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 DEL8