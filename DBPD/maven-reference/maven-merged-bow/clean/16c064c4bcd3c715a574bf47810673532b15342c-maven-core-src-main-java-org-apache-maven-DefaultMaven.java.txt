Cleaning up extension and plugin realms for a project once the build completes.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@588029 13f79535-47bb-0310-9956-ffa450edef68

-        for ( Iterator i = request.getGoals().iterator(); i.hasNext(); )
-        {
-            String goal = (String) i.next();
-
-            TaskValidationResult tvr = lifecycleExecutor.isTaskValid( goal, session, reactorManager.getTopLevelProject() );
-
-            if ( !tvr.isTaskValid() )
-            {
-                result.addBuildFailureException( new InvalidTaskException( tvr ) );
-
-                return result;
-            }
-        }
-
-        getLogger().info( "Scanning for projects..." );
-
-        if ( reactorManager.hasMultipleProjects() )
-        {
-            getLogger().info( "Reactor build order: " );
-
-            for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
-            {
-                MavenProject project = (MavenProject) i.next();
-
-                getLogger().info( "  " + project.getName() );
-            }
-        }
-
-        initializeBuildContext( request );
-
-            lifecycleExecutor.execute(
-                session,
-                reactorManager,
-                dispatcher );
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            result.addLifecycleExecutionException( e );
+            for ( Iterator i = request.getGoals().iterator(); i.hasNext(); )
+            {
+                String goal = (String) i.next();
+
+                TaskValidationResult tvr = lifecycleExecutor.isTaskValid( goal, session, reactorManager.getTopLevelProject() );
+
+                if ( !tvr.isTaskValid() )
+                {
+                    result.addBuildFailureException( new InvalidTaskException( tvr ) );
+
+                    return result;
+                }
+            }
+
+            getLogger().info( "Scanning for projects..." );
+
+            if ( reactorManager.hasMultipleProjects() )
+            {
+                getLogger().info( "Reactor build order: " );
+
+                for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
+                {
+                    MavenProject project = (MavenProject) i.next();
+
+                    getLogger().info( "  " + project.getName() );
+                }
+            }
+
+            initializeBuildContext( request );
+
+            try
+            {
+                lifecycleExecutor.execute(
+                    session,
+                    reactorManager,
+                    dispatcher );
+            }
+            catch ( LifecycleExecutionException e )
+            {
+                result.addLifecycleExecutionException( e );
+                return result;
+            }
+            catch ( BuildFailureException e )
+            {
+                result.addBuildFailureException( e );
+                return result;
+            }
+
+            result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
+
+            result.setProject( reactorManager.getTopLevelProject() );
+
-        catch ( BuildFailureException e )
+        finally
-            result.addBuildFailureException( e );
-            return result;
+            session.dispose();
-
-        result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
-
-        result.setProject( reactorManager.getTopLevelProject() );
-
-        return result;

INS54 INS8 INS8 MOV24 MOV21 MOV25 MOV21 MOV54 MOV21 MOV21 MOV41 INS21 INS32 INS42 INS42