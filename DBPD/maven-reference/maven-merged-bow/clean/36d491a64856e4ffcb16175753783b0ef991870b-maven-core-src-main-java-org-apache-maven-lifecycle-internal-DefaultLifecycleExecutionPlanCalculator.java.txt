MNG-5753: Allow plugin implementors to choose how they want the configuration created for a particular MojoExecution

+import org.apache.maven.lifecycle.MojoExecutionConfigurator;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.model.PluginExecution;
+import com.google.common.collect.ImmutableMap;
+
+    @Requirement
+    private Map<String, MojoExecutionConfigurator> mojoExecutionConfigurators;
+
+    // Only used for testing
+        this.mojoExecutionConfigurators =
+            ImmutableMap.of( "default", (MojoExecutionConfigurator) new DefaultMojoExecutionConfigurator() );
-    public MavenExecutionPlan calculateExecutionPlan( MavenSession session, MavenProject project, List<Object> tasks, boolean setup )
+    @Override
+    public MavenExecutionPlan calculateExecutionPlan( MavenSession session, MavenProject project, List<Object> tasks,
+                                                      boolean setup )
+    @Override
+    @Override
-                                                 project.getRemotePluginRepositories(),
-                                                 session.getRepositorySession() );
+                                                 project.getRemotePluginRepositories(), session.getRepositorySession() );
-        populateMojoExecutionConfiguration( project, mojoExecution,
-                                            MojoExecution.Source.CLI.equals( mojoExecution.getSource() ) );
+        mojoExecutionConfigurator( mojoExecution ).configure( project,
+                                                              mojoExecution,
+                                                              MojoExecution.Source.CLI.equals( mojoExecution.getSource() ) );
-    public List<MojoExecution> calculateMojoExecutions( MavenSession session, MavenProject project,
-                                                         List<Object> tasks )
+    public List<MojoExecution> calculateMojoExecutions( MavenSession session, MavenProject project, List<Object> tasks )
-    private void populateMojoExecutionConfiguration( MavenProject project, MojoExecution mojoExecution,
-                                                     boolean allowPluginLevelConfig )
-    {
-        String g = mojoExecution.getGroupId();
-
-        String a = mojoExecution.getArtifactId();
-
-        Plugin plugin = findPlugin( g, a, project.getBuildPlugins() );
-
-        if ( plugin == null && project.getPluginManagement() != null )
-        {
-            plugin = findPlugin( g, a, project.getPluginManagement().getPlugins() );
-        }
-
-        if ( plugin != null )
-        {
-            PluginExecution pluginExecution =
-                findPluginExecution( mojoExecution.getExecutionId(), plugin.getExecutions() );
-
-            Xpp3Dom pomConfiguration = null;
-
-            if ( pluginExecution != null )
-            {
-                pomConfiguration = (Xpp3Dom) pluginExecution.getConfiguration();
-            }
-            else if ( allowPluginLevelConfig )
-            {
-                pomConfiguration = (Xpp3Dom) plugin.getConfiguration();
-            }
-
-            Xpp3Dom mojoConfiguration = ( pomConfiguration != null ) ? new Xpp3Dom( pomConfiguration ) : null;
-
-            mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoExecution.getConfiguration(), mojoConfiguration );
-
-            mojoExecution.setConfiguration( mojoConfiguration );
-        }
-    }
-
-    private Plugin findPlugin( String groupId, String artifactId, Collection<Plugin> plugins )
-    {
-        for ( Plugin plugin : plugins )
-        {
-            if ( artifactId.equals( plugin.getArtifactId() ) && groupId.equals( plugin.getGroupId() ) )
-            {
-                return plugin;
-            }
-        }
-
-        return null;
-    }
-
-    private PluginExecution findPluginExecution( String executionId, Collection<PluginExecution> executions )
-    {
-        if ( StringUtils.isNotEmpty( executionId ) )
-        {
-            for ( PluginExecution execution : executions )
-            {
-                if ( executionId.equals( execution.getId() ) )
-                {
-                    return execution;
-                }
-            }
-        }
-
-        return null;
-    }
-
-                parameterConfiguration =
-                    Xpp3Dom.mergeXpp3Dom( parameterConfiguration, parameterDefaults, Boolean.TRUE );
+                parameterConfiguration = Xpp3Dom.mergeXpp3Dom( parameterConfiguration, parameterDefaults, Boolean.TRUE );
+    @Override
-                forkedExecutions =
-                    calculateForkedGoal( mojoExecution, session, forkedProject, alreadyForkedExecutions );
+                forkedExecutions = calculateForkedGoal( mojoExecution, session, forkedProject, alreadyForkedExecutions );
-        Map<String, List<MojoExecution>> lifecycleMappings =
-            calculateLifecycleMappings( session, project, forkedPhase );
+        Map<String, List<MojoExecution>> lifecycleMappings = calculateLifecycleMappings( session, project, forkedPhase );
-                populateMojoExecutionConfiguration( project, forkedExecution, false );
+                mojoExecutionConfigurator( forkedExecution ).configure( project, forkedExecution, false );
-                        populateMojoExecutionConfiguration( project, forkedExecution, true );
+                        mojoExecutionConfigurator( forkedExecution ).configure( project, forkedExecution, true );
+
-    //TODO: take repo mans into account as one may be aggregating prefixes of many
-    //TODO: collect at the root of the repository, read the one at the root, and fetch remote if something is missing
-    //      or the user forces the issue
+    // TODO: take repo mans into account as one may be aggregating prefixes of many
+    // TODO: collect at the root of the repository, read the one at the root, and fetch remote if something is missing
+    // or the user forces the issue
-        populateMojoExecutionConfiguration( project, forkedExecution, true );
+        mojoExecutionConfigurator( forkedExecution ).configure( project, forkedExecution, true );
+    private MojoExecutionConfigurator mojoExecutionConfigurator( MojoExecution mojoExecution )
+    {
+        String configuratorId = mojoExecution.getMojoDescriptor().getComponentConfigurator();
+        if ( configuratorId == null )
+        {
+            configuratorId = "default";
+        }
+        MojoExecutionConfigurator mojoExecutionConfigurator = mojoExecutionConfigurators.get( configuratorId );
+
+        if ( mojoExecutionConfigurator == null )
+        {
+            //
+            // The plugin has a custom component configurator but does not have a custom mojo execution configurator
+            // so fall back to the default mojo execution configurator.
+            //
+            mojoExecutionConfigurator = mojoExecutionConfigurators.get( "default" );
+        }
+        return mojoExecutionConfigurator;
+    }

MOV26 MOV26 UPD40 UPD40 INS23 INS31 INS78 INS83 INS74 INS59 INS78 INS78 INS78 INS78 INS83 INS43 INS42 MOV44 INS8 INS42 INS43 MOV43 INS43 INS42 INS21 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV60 MOV25 MOV60 MOV25 MOV41 UPD42 MOV42 INS42 INS7 MOV43 INS27 UPD43 UPD27 UPD42 INS22 INS32 INS32 INS42 INS32 INS42 UPD42 UPD42 MOV42 MOV33 UPD42 UPD42 UPD42 INS52 INS42 INS42 INS42 INS45 INS11 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 INS45 UPD42 INS32 INS42 INS43 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 INS42 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL43 DEL42 DEL14 DEL33 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL33 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL32 DEL11 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25