Working on: MNG-377

o Normalized all references to plugins to use either o.a.m.model.Plugin or o.a.m.plugin.PluginDescriptor instances

o Changed DefaultLifecycleExecutor, PluginManager, DefaultPluginManager, MavenPluginCollector, and DoxiaMojo to reflect the above

o Added mapped-plugin resolution of goal prefixes to the DefaultLifecycleExecutor

o Added caching of PluginMappingManager instance inside of MavenSession

o Modified SettingsUtils to be more resistant to null String-Lists for pluginGroups and activeProfiles during merge.

o Added checks to MavenProject.addPlugin(..) to only add if the plugin doesn't already exist in the model.

Next step is to modify installation and deployment process for plugins to publish plugins.xml repository metadata.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@209677 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
-        for ( Iterator it = recessiveActiveProfiles.iterator(); it.hasNext(); )
+        if ( recessiveActiveProfiles != null )
-            String profileId = (String) it.next();
-
-            if ( !dominantActiveProfiles.contains( profileId ) )
+            if ( dominantActiveProfiles == null )
-                dominantActiveProfiles.add( profileId );
+                dominantActiveProfiles = new ArrayList();
+                dominant.setActiveProfiles( dominantActiveProfiles );
+            }
+            
+            for ( Iterator it = recessiveActiveProfiles.iterator(); it.hasNext(); )
+            {
+                String profileId = (String) it.next();
-                dominant.getRuntimeInfo().setActiveProfileSourceLevel( profileId, recessiveSourceLevel );
+                if ( !dominantActiveProfiles.contains( profileId ) )
+                {
+                    dominantActiveProfiles.add( profileId );
+
+                    dominant.getRuntimeInfo().setActiveProfileSourceLevel( profileId, recessiveSourceLevel );
+                }
-        for ( Iterator it = recessivePluginGroupIds.iterator(); it.hasNext(); )
+        if( recessivePluginGroupIds != null )
-            String pluginGroupId = (String) it.next();
-
-            if ( !dominantPluginGroupIds.contains( pluginGroupId ) )
+            if( dominantPluginGroupIds == null )
-                dominantPluginGroupIds.add( pluginGroupId );
+                dominantPluginGroupIds = new ArrayList();
+                dominant.setPluginGroups( dominantPluginGroupIds );
+            }
+            
+            for ( Iterator it = recessivePluginGroupIds.iterator(); it.hasNext(); )
+            {
+                String pluginGroupId = (String) it.next();
-                dominant.getRuntimeInfo().setPluginGroupIdSourceLevel( pluginGroupId, recessiveSourceLevel );
+                if ( !dominantPluginGroupIds.contains( pluginGroupId ) )
+                {
+                    dominantPluginGroupIds.add( pluginGroupId );
+
+                    dominant.getRuntimeInfo().setPluginGroupIdSourceLevel( pluginGroupId, recessiveSourceLevel );
+                }

INS26 INS40 INS25 INS25 INS27 INS8 INS27 INS8 INS42 INS33 INS25 MOV24 INS42 INS33 INS25 MOV24 INS27 INS8 INS27 INS8 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS7 INS32 INS7 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS43 INS42 INS42