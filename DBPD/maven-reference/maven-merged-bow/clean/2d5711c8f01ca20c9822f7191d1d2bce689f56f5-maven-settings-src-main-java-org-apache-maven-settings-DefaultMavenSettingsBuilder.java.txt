Adding SettingsBuilderAdvice, to enable skipping default locations for settings files. Also, removing the settings cache, to enable call-by-call synchronization of settings between Maven embedder instances that share the same settings files. Next step is to refresh settings per-call to the embedder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@511172 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.context.BuildContextManager;
-import org.apache.maven.settings.cache.SettingsCache;
+import org.apache.maven.settings.validation.SettingsValidationResult;
+import org.apache.maven.settings.validation.SettingsValidator;
+
-import org.apache.maven.settings.validation.SettingsValidationResult;
-import org.apache.maven.settings.validation.SettingsValidator;
-    
+
-    
-    private BuildContextManager buildContextManager;
-    
+
-        SettingsCache cache = SettingsCache.read( buildContextManager, userSettingsFile, globalSettingsFile );
-        
-        if ( cache != null )
-        {
-            return cache.getSettings();
-        }
-        
-        // NOTE: We're allowing users to hang themselves here...if the global settings file is null,
-        // the default location is NOT read.
-        Settings globalSettings = readSettings( globalSettingsFile );
-        
-        if ( userSettingsFile == null )
+        return buildSettings( userSettingsFile, globalSettingsFile, new SettingsBuilderAdvice() );
+    }
+
+    /**
+     * @since 2.1
+     */
+    public Settings buildSettings( File userSettingsFile, File globalSettingsFile, SettingsBuilderAdvice advice )
+        throws IOException, XmlPullParserException
+    {
+        if ( advice.isDefaultUserLocationEnabled() && userSettingsFile == null )
-        Settings userSettings = readSettings( userSettingsFile );
+        if ( advice.isDefaultGlobalLocationEnabled() && globalSettingsFile == null )
+        {
+            globalSettingsFile = DEFAULT_GLOBAL_SETTINGS_FILE;
+        }
+
+        if ( globalSettingsFile == null && userSettingsFile == null )
+        {
+            getLogger().debug(
+                               "No settings files provided, and default locations are disabled for this request. Returning empty Settings instance." );
+            return new Settings();
+        }
+
+        Settings globalSettings = readSettings( globalSettingsFile );
+        Settings userSettings = readSettings( userSettingsFile );
+
-
-            userSettings.setRuntimeInfo( new RuntimeInfo( userSettings ) );
-        
+
-        
+
-        
-        cache = new SettingsCache( userSettingsFile, globalSettingsFile, userSettings );
-        cache.store( buildContextManager );
-
-                        "Failed to initialize environment variable resolver. Skipping environment substitution in settings." );
+                                      "Failed to initialize environment variable resolver. Skipping environment substitution in settings." );
+                    
-                rtInfo.setFile( settingsFile );
+                rtInfo.addLocation( settingsFile.getAbsolutePath() );
+            catch ( XmlPullParserException e )
+            {
+                getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing XmlPullParserException..." );
+                
+                throw e;
+            }
+            catch ( IOException e )
+            {
+                getLogger().error( "Failed to read settings from: " + settingsFile + ". Throwing IOException..." );
+                
+                throw e;
+            }
-    
-    private void validateSettings(Settings settings, File location) throws IOException {
+
+    private void validateSettings( Settings settings, File location )
+        throws IOException
+    {
-            throw new IOException( "Failed to validate Settings file at " + location + 
-                                    "\n" + validationResult.render("\n") );
+            throw new IOException( "Failed to validate Settings file at " + location + "\n" + validationResult.render( "\n" ) );
-        
+

MOV26 MOV26 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS44 MOV60 MOV60 INS65 UPD42 MOV42 INS43 INS42 INS43 INS42 INS42 INS42 INS41 INS43 INS42 INS25 INS25 INS66 INS42 INS42 INS32 INS42 INS27 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS14 INS32 MOV27 INS32 INS27 INS21 INS27 INS27 INS21 INS41 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS7 INS42 INS33 UPD42 MOV42 MOV33 INS32 INS14 INS12 INS12 INS42 INS42 INS42 INS32 INS42 INS45 UPD43 MOV43 INS44 INS8 INS44 INS8 UPD42 MOV42 UPD42 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 UPD42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 MOV42 INS42 INS32 INS42 INS27 INS32 INS42 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL83 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21