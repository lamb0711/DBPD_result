[MNG-4633] Weave mode operational.

Replaced approximation-based algorithm for detecting upstream-mojo dependencies with
a proper phase based solution. Revised re-resolution strategy of reactor artifacts

There are a few minor performance inefficiencies (only in weave mode), that will be
sorted for beta-2.

Improved logging, and also added initial graphviz-format log output support

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@934425 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
-    final List<String> phases;
+    final List<String> phasesInExecutionPlan;
-        lastMojoExecutionForAllPhases = new HashMap<String, ExecutionPlanItem>();
+        lastMojoExecutionForAllPhases = new LinkedHashMap<String, ExecutionPlanItem>();
-        String firstPhasePreset = getFirstPhasePresentInPlan();
-
-        List<String> phases = null;
+        LinkedHashSet<String> totalPhaseSet = new LinkedHashSet<String>();
-            final Lifecycle lifecycle = defaultLifecycles.get( firstPhasePreset );
-            if ( lifecycle != null )
+            for ( String phase : getDistinctPhasesInOrderOfExecutionPlanAppearance( planItem ) )
-                phases = lifecycle.getPhases();
+                final Lifecycle lifecycle = defaultLifecycles.get( phase );
+                if ( lifecycle != null )
+                {
+                    totalPhaseSet.addAll( lifecycle.getPhases() );
+                }
-        this.phases = phases;
+        this.phasesInExecutionPlan = new ArrayList<String>( totalPhaseSet );
-            final String phaseName = executionPlanItem.getLifecyclePhase();
-            if ( phaseName != null )
-            {
-                lastInExistingPhases.put( phaseName, executionPlanItem );
-            }
+            lastInExistingPhases.put( executionPlanItem.getLifecyclePhase(), executionPlanItem );
-        ExecutionPlanItem forThis;
+        ExecutionPlanItem forThisPhase;
-        if ( phases != null )
+        for ( String phase : totalPhaseSet )
-            for ( String phase : phases )
+            forThisPhase = lastInExistingPhases.get( phase );
+            if ( forThisPhase != null )
-                forThis = lastInExistingPhases.get( phase );
-                if ( forThis != null )
-                {
-                    lastSeenExecutionPlanItem = forThis;
-                }
-                lastMojoExecutionForAllPhases.put( phase, lastSeenExecutionPlanItem );
-
+                lastSeenExecutionPlanItem = forThisPhase;
+            lastMojoExecutionForAllPhases.put( phase, lastSeenExecutionPlanItem );
+
-    }
-    private String getFirstPhasePresentInPlan()
-    {
-        for ( ExecutionPlanItem executionPlanItem : getExecutionPlanItems() )
-        {
-            final String phase = executionPlanItem.getLifecyclePhase();
-            if ( phase != null )
-            {
-                return phase;
-            }
-        }
-        return null;
-        ExecutionPlanItem result = lastMojoExecutionForAllPhases.get( requestedPhase );
-        int i = phases.indexOf( requestedPhase );
-        while ( result == null && i > 0 )
-        {
-            final String previousPhase = phases.get( --i );
-            result = lastMojoExecutionForAllPhases.get( previousPhase );
-
-        }
-        return result;
+        return lastMojoExecutionForAllPhases.get( requestedPhase );
+
+    private static Iterable<String> getDistinctPhasesInOrderOfExecutionPlanAppearance(
+        List<ExecutionPlanItem> planItems )
+    {
+        LinkedHashSet<String> result = new LinkedHashSet<String>();
+        for ( ExecutionPlanItem executionPlanItem : planItems )
+        {
+            final String phase = executionPlanItem.getLifecyclePhase();
+            if ( !result.contains( phase ) )
+            {
+                result.add( phase );
+            }
+        }
+        return result;
+    }
+
+    public void waitUntilAllDone()
+        throws InterruptedException
+    {
+        for ( ExecutionPlanItem executionPlanItem : getExecutionPlanItems() )
+        {
+            executionPlanItem.waitUntilDone();
+        }
+    }
+
+    public boolean containsPhase( String phase )
+    {
+        return phasesInExecutionPlan.contains( phase );
+    }
+
+

INS26 INS26 MOV31 INS40 INS40 INS31 INS31 INS31 MOV29 MOV83 MOV43 MOV42 MOV44 INS8 INS83 INS74 UPD42 INS44 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS8 UPD42 INS60 MOV70 INS41 INS43 MOV43 INS74 INS42 INS60 MOV41 INS42 INS70 INS43 INS42 INS41 INS74 INS59 INS8 INS8 UPD42 MOV32 INS42 INS43 MOV43 INS74 INS59 INS42 INS44 MOV32 INS8 MOV42 INS32 INS43 MOV43 INS42 INS14 INS70 INS14 MOV21 UPD42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD74 INS42 INS74 INS44 INS32 MOV8 UPD42 INS74 INS42 INS42 INS42 INS74 INS38 MOV42 INS32 UPD43 UPD43 MOV43 MOV43 INS43 INS42 INS42 INS42 INS43 MOV43 MOV32 UPD42 UPD42 INS43 MOV43 INS32 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 MOV32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL42 DEL42 DEL83 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL34 DEL27 DEL27 DEL83 DEL42 DEL42 DEL42 DEL42 DEL38 DEL32 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL41 DEL33