check super classes for fields to set


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163655 13f79535-47bb-0310-9956-ffa450edef68

-            boolean newMojoTechnique = false;
-            try
-            {
-                plugin.getClass().getDeclaredMethod( "execute", new Class[0] );
-                newMojoTechnique = true;
-            }
-            catch ( NoSuchMethodException e )
-            {
-                // intentionally ignored
-            }
+            boolean newMojoTechnique = checkMojoTechnique( plugin.getClass() );
+    /**
+     * @deprecated
+     */
+    private static boolean checkMojoTechnique( Class aClass )
+    {
+        boolean newMojoTechnique = false;
+        try
+        {
+            aClass.getDeclaredMethod( "execute", new Class[0] );
+            newMojoTechnique = true;
+        }
+        catch ( NoSuchMethodException e )
+        {
+            // intentionally ignored
+
+            Class superclass = aClass.getSuperclass();
+            if ( superclass != AbstractPlugin.class )
+            {
+                return checkMojoTechnique( superclass );
+            }
+        }
+        return newMojoTechnique;
+    }
+
-        // TODO: we don't have converters, so something things that -are- strings are not configured properly (eg String -> File from an expression)
+        // TODO: we don't have converters, so "primitives" that -are- strings are not configured properly (eg String -> File from an expression)
-                Field f = clazz.getDeclaredField( key );
+                Field f = findPluginField( clazz, key );
-            catch ( NoSuchFieldException e1 )
+            catch ( NoSuchFieldException e )
-            catch ( IllegalAccessException e11 )
+            catch ( IllegalAccessException e )
+    private Field findPluginField( Class clazz, String key )
+        throws NoSuchFieldException
+    {
+        try
+        {
+            return clazz.getDeclaredField( key );
+        }
+        catch ( NoSuchFieldException e )
+        {
+            Class superclass = clazz.getSuperclass();
+            if ( superclass != Object.class )
+            {
+                return findPluginField( superclass, key );
+            }
+            else
+            {
+                throw e;
+            }
+        }
+    }
+

INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 INS65 INS43 INS42 MOV60 MOV54 INS41 INS43 INS42 INS43 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS8 INS12 INS60 INS8 INS41 INS44 INS8 INS39 INS59 INS60 INS25 MOV32 INS43 INS42 INS60 INS25 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS8 INS42 MOV32 INS42 INS42 INS32 INS42 INS57 INS41 INS43 UPD42 UPD42 INS42 INS42 INS32 INS42 INS57 INS41 INS53 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL8