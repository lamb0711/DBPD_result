o Updating to the latest Plexus compiler API.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@231478 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.compiler.CompilerOutputStyle;
+import org.codehaus.plexus.compiler.CompilerException;
+import org.codehaus.plexus.compiler.util.scan.mapping.SourceMapping;
+import org.codehaus.plexus.compiler.util.scan.mapping.SingleTargetSourceMapping;
+import java.util.Map;
+/**
+ * @author others
+ * @author <a href="mailto:trygvis@inamo.no">Trygve Laugst&oslash;l</a>
+ * @version $Id: StaleSourceScannerTest.java 2393 2005-08-08 22:32:59Z kenney $
+ */
-    private List compilerArguements;
+    private Map compilerArguments;
+        // Look up the compiler. This is done before other code than can
+        // cause the mojo to return before the lookup is done possibly resulting
+        // in misconfigured POMs still building.
+        // ----------------------------------------------------------------------
+
+        Compiler compiler;
+
+        try
+        {
+            compiler = compilerManager.getCompiler( compilerId );
+        }
+        catch ( NoSuchCompilerException e )
+        {
+            throw new MojoExecutionException( "No such compiler '" + e.getCompilerId() + "'." );
+        }
+
+        // ----------------------------------------------------------------------
+
+
-        // TODO: have an option to always compile (without need to clean)
-        Set staleSources = computeStaleSources();
-
-        if ( staleSources.isEmpty() )
-        {
-            getLog().info( "Nothing to compile - all classes are up to date" );
-
-            return;
-        }
-        else
-        {
-            compilerConfiguration.setSourceFiles( staleSources );
-        }
-
-        compilerConfiguration.setCustomCompilerArguments( compilerArguements );
+        compilerConfiguration.setCustomCompilerArguments( compilerArguments );
+        // TODO: have an option to always compile (without need to clean)
+        Set staleSources;
+
+        try
+        {
+            staleSources = computeStaleSources( compilerConfiguration, compiler );
+        }
+        catch ( CompilerException e )
+        {
+            throw new MojoExecutionException( "Error while computing stale sources.", e );
+        }
+
+        if ( staleSources.isEmpty() )
+        {
+            getLog().info( "Nothing to compile - all classes are up to date" );
+
+            return;
+        }
+        else
+        {
+            compilerConfiguration.setSourceFiles( staleSources );
+        }
+
-        Compiler compiler;
-
-        try
-        {
-            compiler = compilerManager.getCompiler( compilerId );
-        }
-        catch ( NoSuchCompilerException e )
-        {
-            throw new MojoExecutionException( "No such compiler '" + e.getCompilerId() + "'." );
-        }
-
-    private Set computeStaleSources()
-        throws MojoExecutionException
+    private Set computeStaleSources( CompilerConfiguration compilerConfiguration, Compiler compiler )
+        throws MojoExecutionException, CompilerException
-        SuffixMapping mapping = new SuffixMapping( ".java", ".class" );
+        CompilerOutputStyle outputStyle = compiler.getCompilerOutputStyle();
+
+        SourceMapping mapping;
+
+        if ( outputStyle == CompilerOutputStyle.ONE_OUTPUT_FILE_PER_INPUT_FILE )
+        {
+            mapping = new SuffixMapping( compiler.getInputFileEnding( compilerConfiguration ),
+                                         compiler.getOutputFileEnding( compilerConfiguration ) );
+        }
+        else if ( outputStyle == CompilerOutputStyle.ONE_OUTPUT_FILE_FOR_ALL_INPUT_FILES )
+        {
+            mapping = new SingleTargetSourceMapping( compiler.getOutputFile( compilerConfiguration ) );
+        }
+        else
+        {
+            throw new MojoExecutionException( "Unknown compiler output style: '" + outputStyle + "'." );
+        }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS29 INS65 INS65 INS65 UPD43 MOV60 MOV25 MOV60 MOV54 INS44 INS44 INS43 INS66 INS66 INS66 UPD42 UPD42 INS21 INS54 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS32 INS8 INS12 INS42 INS42 INS43 INS59 UPD43 MOV43 INS59 INS27 INS8 INS25 INS42 INS42 INS42 MOV21 INS44 INS8 INS42 INS42 INS32 UPD42 MOV42 INS42 INS40 INS21 INS27 INS8 INS8 INS7 INS43 INS42 INS53 INS42 INS42 INS7 INS42 INS40 INS21 INS53 INS42 INS32 INS42 INS14 INS42 INS14 INS7 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS45 INS42 MOV43 INS32 INS32 INS42 INS14 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL32 DEL45 DEL45 DEL14 DEL59 DEL60