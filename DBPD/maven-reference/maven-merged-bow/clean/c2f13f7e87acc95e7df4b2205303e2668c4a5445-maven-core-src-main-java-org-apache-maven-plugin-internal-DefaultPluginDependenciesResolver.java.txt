[MNG-6675] Make Resolver debug log messages for projects and plugins consistent

This closes #124 and closes #253

+import java.util.Collection;
+import org.codehaus.plexus.util.StringUtils;
+import org.eclipse.aether.util.graph.manager.DependencyManagerUtils;
+    // Keep this class in sync with org.apache.maven.project.DefaultProjectDependenciesResolver.GraphLogger
-                Artifact art = dep.getArtifact();
+                org.eclipse.aether.artifact.Artifact art = dep.getArtifact();
-                buffer.append( ':' ).append( dep.getScope() );
+                if ( StringUtils.isNotEmpty( dep.getScope() ) )
+                {
+                    buffer.append( ':' ).append( dep.getScope() );
+                }
+
+                if ( dep.isOptional() )
+                {
+                    buffer.append( " (optional)" );
+                }
+
+                // TODO We currently cannot tell which <dependencyManagement> section contained the management
+                //      information. When the resolver provides this information, these log messages should be updated
+                //      to contain it.
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_SCOPE ) == DependencyNode.MANAGED_SCOPE )
+                {
+                    final String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );
+                    buffer.append( " (scope managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedScope, "default" ) );
+                    buffer.append( ')' );
+                }
+
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_VERSION ) == DependencyNode.MANAGED_VERSION )
+                {
+                    final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );
+                    buffer.append( " (version managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedVersion, "default" ) );
+                    buffer.append( ')' );
+                }
+
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_OPTIONAL ) == DependencyNode.MANAGED_OPTIONAL )
+                {
+                    final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional( node );
+                    buffer.append( " (optionality managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedOptional, "default" ) );
+                    buffer.append( ')' );
+                }
+
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_EXCLUSIONS )
+                         == DependencyNode.MANAGED_EXCLUSIONS )
+                {
+                    final Collection<org.eclipse.aether.graph.Exclusion> premanagedExclusions =
+                        DependencyManagerUtils.getPremanagedExclusions( node );
+
+                    buffer.append( " (exclusions managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedExclusions, "default" ) );
+                    buffer.append( ')' );
+                }
+
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_PROPERTIES )
+                         == DependencyNode.MANAGED_PROPERTIES )
+                {
+                    final Map<String, String> premanagedProperties =
+                        DependencyManagerUtils.getPremanagedProperties( node );
+
+                    buffer.append( " (properties managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedProperties, "default" ) );
+                    buffer.append( ')' );
+                }

INS26 INS26 INS26 INS40 INS40 INS40 INS8 MOV60 MOV21 MOV60 INS25 MOV21 MOV21 MOV41 MOV27 INS8 MOV60 MOV21 MOV25 INS25 INS25 INS25 INS25 INS25 INS25 UPD43 INS32 INS32 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS40 INS42 INS42 INS32 INS42 INS42 INS21 INS36 INS40 INS60 INS21 INS21 INS21 INS36 INS40 INS60 INS21 INS21 INS21 INS36 INS40 INS60 INS21 INS21 INS21 INS36 INS40 INS60 INS21 INS21 INS21 INS36 INS40 INS60 INS21 INS21 INS21 INS42 INS42 INS32 INS27 INS83 INS43 INS59 INS32 INS32 INS32 INS27 INS83 INS43 INS59 INS32 INS32 INS32 INS27 INS83 INS43 INS59 INS32 INS32 INS32 INS27 INS83 INS74 INS59 INS32 INS32 INS32 INS27 INS83 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS45 INS32 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS13 INS32 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS13 INS32 INS40 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS13 INS32 INS40 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS13 INS32 INS40 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 DEL42 DEL8