[MNG-6656] Introduce base for build/consumer pom

-import java.io.File;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Objects;
+import java.util.Set;
+
+import org.apache.maven.model.Model;
- * Holds all POM files that are known to the reactor. This allows the project builder to resolve imported POMs from the
+ * Holds all Models that are known to the reactor. This allows the project builder to resolve imported Models from the
+ * @author Robert Scholte
+    private final Map<GAKey, Set<Model>> modelsByGa = new HashMap<>();
-    private final Map<CacheKey, File> pomFiles = new HashMap<>();
+    private final Map<Path, Model> modelsByPath = new HashMap<>();
-    public File get( String groupId, String artifactId, String version )
+    /**
+     * Get the model by its GAV or (since 3.7.0) by its GA if there is only one.
+     *  
+     * @param groupId, never {@code null}
+     * @param artifactId, never {@code null}
+     * @param version, can be {@code null}
+     * @return the matching model or {@code null}
+     * @throws IllegalStateException if version was null and multiple modules share the same groupId + artifactId
+     */
+    public Model get( String groupId, String artifactId, String version )
-        return pomFiles.get( new CacheKey( groupId, artifactId, version ) );
+        return modelsByGa.getOrDefault( new GAKey( groupId, artifactId ), Collections.emptySet() ).stream()
+                        .filter( m -> version == null || version.equals( getVersion( m ) ) )
+                        .reduce( ( a, b ) -> 
+                        {
+                            throw new IllegalStateException( "Multiple modules with key "
+                                + a.getGroupId() + ':' + a.getArtifactId() );
+                        } ).orElse( null );
-    public void put( String groupId, String artifactId, String version, File pomFile )
+    /**
+     * Find model by path, useful when location the parent by relativePath
+     * 
+     * @param path
+     * @return the matching model or {@code null}
+     * @since 3.7.0
+     */
+    public Model get( Path path )
-        pomFiles.put( new CacheKey( groupId, artifactId, version ), pomFile );
+        final Path pomFile;
+        if ( Files.isDirectory( path ) )
+        {
+            pomFile = path.resolve( "pom.xml" );
+        }
+        else
+        {
+            pomFile = path;
+        }
+        return modelsByPath.get( pomFile );
+    }
+    
+    private String getVersion( Model model )
+    {
+        String version = model.getVersion();
+        if ( version == null && model.getParent() != null )
+        {
+            version = model.getParent().getVersion();
+        }
+        return version;
-    private static final class CacheKey
+    static class Builder
+    {
+        private ReactorModelPool pool = new ReactorModelPool();
+        
+        Builder put( Path pomFile, Model model )
+        {
+            pool.modelsByPath.put( pomFile, model );
+            pool.modelsByGa.computeIfAbsent( new GAKey( getGroupId( model ), model.getArtifactId() ),
+                                             k -> new HashSet<Model>() ).add( model );
+            return this;
+        }
+        
+        ReactorModelPool build() 
+        {
+            return pool;
+        }
+
+        private static String getGroupId( Model model )
+        {
+            String groupId = model.getGroupId();
+            if ( groupId == null && model.getParent() != null )
+            {
+                groupId = model.getParent().getGroupId();
+            }
+            return groupId;
+        }
+    }
+
+    private static final class GAKey
-        private final String version;
-
-        CacheKey( String groupId, String artifactId, String version )
+        GAKey( String groupId, String artifactId )
-            this.version = ( version != null ) ? version : "";
-            int hash = 17;
-            hash = hash * 31 + this.groupId.hashCode();
-            hash = hash * 31 + this.artifactId.hashCode();
-            hash = hash * 31 + this.version.hashCode();
-            hashCode = hash;
+            hashCode = Objects.hash( this.groupId, this.artifactId );
-            if ( !( obj instanceof CacheKey ) )
-            {
-                return false;
-            }
+            GAKey that = (GAKey) obj;
-            CacheKey that = (CacheKey) obj;
-
-            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId )
-                && version.equals( that.version );
+            return artifactId.equals( that.artifactId ) && groupId.equals( that.groupId );
-            buffer.append( groupId ).append( ':' ).append( artifactId ).append( ':' ).append( version );
+            buffer.append( groupId ).append( ':' ).append( artifactId );
-

INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS55 INS65 UPD74 INS83 INS83 INS74 INS59 INS29 MOV83 UPD43 MOV43 MOV42 MOV44 MOV44 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS42 INS23 INS31 INS31 INS31 UPD42 UPD66 INS66 UPD43 INS74 UPD42 INS43 INS43 INS43 INS42 INS14 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS41 MOV42 UPD43 UPD42 INS60 INS25 INS41 INS83 INS43 INS59 INS43 MOV42 MOV44 INS44 MOV8 INS43 INS42 INS8 INS83 INS83 MOV43 INS42 INS44 INS8 UPD42 UPD42 UPD43 MOV43 INS43 INS42 INS42 INS42 INS74 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS42 INS66 INS32 INS66 INS42 INS66 INS65 INS66 INS42 INS83 INS43 INS59 INS32 INS8 INS8 INS32 UPD42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS14 INS42 UPD43 INS43 INS42 INS21 INS41 INS42 INS41 INS43 INS42 INS60 INS25 INS41 UPD42 INS42 INS43 INS66 INS66 INS66 INS66 INS32 INS42 INS33 INS66 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 MOV42 INS42 INS32 INS27 INS27 INS21 INS43 UPD42 INS42 INS32 INS32 INS52 INS42 INS42 INS43 INS59 INS27 INS8 INS42 UPD43 MOV32 INS42 INS32 INS42 INS86 INS7 INS7 UPD42 MOV42 INS42 INS42 INS33 INS32 INS33 INS7 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS21 UPD42 MOV32 MOV22 UPD42 INS32 INS42 INS86 INS59 INS59 INS8 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS40 UPD42 MOV42 MOV14 INS86 INS42 INS42 INS42 INS33 INS32 INS33 INS7 INS42 UPD42 MOV22 UPD43 INS32 INS42 INS59 INS27 INS42 INS42 INS53 INS42 INS42 INS45 INS32 INS42 UPD43 INS32 INS32 INS59 INS14 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS14 INS32 INS42 INS27 INS32 INS14 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS43 INS27 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS13 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL31 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL36 DEL42 DEL45 DEL16 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32