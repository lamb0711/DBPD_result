Fix: MNG3747 - Added three phases to interpolation: (1) interpolate properties not using build/directory(s); (2) set absolute paths; (3) interpolate using build/directories.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@695110 13f79535-47bb-0310-9956-ffa450edef68

-     * @see ModelTransformer#transformToModelProperties(java.util.List, java.util.List)
+     * @see ModelTransformer#transformToModelProperties(java.util.List
-    public List<ModelProperty> transformToModelProperties( List<DomainModel> domainModels, 
-                                                           List<InterpolatorProperty> interpolatorProperties)
+    public List<ModelProperty> transformToModelProperties(List<DomainModel> domainModels
+    )
-        interpolateModelProperties( modelProperties, interpolatorProperties, ((PomClassicDomainModel) domainModels.get(0)) );
-        
+    public void interpolateModelProperties(List<ModelProperty> modelProperties,
+                                           List<InterpolatorProperty> interpolatorProperties,
+                                           DomainModel domainModel)
+            throws IOException
+    {
+        interpolateModelProperties( modelProperties, interpolatorProperties, (PomClassicDomainModel) domainModel);
+    }
+
-        //RULE: No Self-Referential Properties
-        /*
-        for(ModelProperty mp : modelProperties)
-        {
-            if(mp.getUri().startsWith( ProjectUri.properties ) && mp.getValue() != null)
-            {
-                String name = mp.getUri().substring( mp.getUri().lastIndexOf( "/" ) + 1, mp.getUri().length() );
-                if( mp.getValue().equals( "${" + name + "}") )
-                {
-                    throw new IOException( "Self-Referential reference in pom: Name = " + name );
-                }
-            }
-        }
-        */
+
-        List<InterpolatorProperty> ips = new ArrayList<InterpolatorProperty>(interpolatorProperties);
-        ips.addAll(ModelTransformerContext.createInterpolatorProperties(modelProperties, ProjectUri.baseUri, aliases,
-                        false, false));
+        List<ModelProperty> firstPassModelProperties = new ArrayList<ModelProperty>();
+        List<ModelProperty> secondPassModelProperties = new ArrayList<ModelProperty>();
+        ModelProperty buildProperty = new ModelProperty(ProjectUri.Build.xUri, null);
+        for(ModelProperty mp : modelProperties)
+        {
+            if( mp.getValue() != null && !mp.getUri().contains( "#property" ) && !mp.getUri().contains( "#collection" ))
+            {
+                if( !buildProperty.isParentOf( mp ) || mp.getUri().equals(ProjectUri.Build.finalName ) )
+                {
+                    firstPassModelProperties.add(mp);
+                }
+                else
+                {
+                    secondPassModelProperties.add(mp);
+                }
+            }
+        }
+
+        String basedir = domainModel.getProjectDirectory().getAbsolutePath();
+        List<InterpolatorProperty> standardInterpolatorProperties = new ArrayList<InterpolatorProperty>();
-            ips.add(new InterpolatorProperty("${project.basedir}", domainModel.getProjectDirectory().getAbsolutePath()));
-            ips.add(new InterpolatorProperty("${basedir}", domainModel.getProjectDirectory().getAbsolutePath()));
-            ips.add(new InterpolatorProperty("${pom.basedir}", domainModel.getProjectDirectory().getAbsolutePath()));
+            standardInterpolatorProperties.add(new InterpolatorProperty("${project.basedir}", basedir ));
+            standardInterpolatorProperties.add(new InterpolatorProperty("${basedir}", basedir ));
+            standardInterpolatorProperties.add(new InterpolatorProperty("${pom.basedir}", basedir ));
-                ips.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1,
+                standardInterpolatorProperties.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1,
-        ModelTransformerContext.interpolateModelProperties( modelProperties, ips );
+        //FIRST PASS - Withhold using build directories as interpolator properties
+        List<InterpolatorProperty> ips1 = new ArrayList<InterpolatorProperty>(interpolatorProperties);
+        ips1.addAll(ModelTransformerContext.createInterpolatorProperties(firstPassModelProperties, ProjectUri.baseUri, aliases,
+                        false, false));
+        ips1.addAll(standardInterpolatorProperties);
+
+        ModelTransformerContext.interpolateModelProperties( modelProperties, ips1 );
+
+        //SECOND PASS - Set absolute paths on build directories
+        if( domainModel.isPomInBuild() )
+        {
+            Map<ModelProperty, ModelProperty> buildDirectories = new HashMap<ModelProperty, ModelProperty>();
+            for(ModelProperty mp : secondPassModelProperties)
+            {
+                if(mp.getUri().equals( ProjectUri.Build.directory ))
+                {
+                    File file = new File(mp.getResolvedValue());
+                    if( !file.isAbsolute() )
+                    {
+                        buildDirectories.put(mp, new ModelProperty(mp.getUri(), new File(basedir, file.getPath()).getAbsolutePath()));
+                    }
+                }
+            }
+
+            for ( Map.Entry<ModelProperty, ModelProperty> e : buildDirectories.entrySet() )
+            {
+                secondPassModelProperties.remove( e.getKey() );
+                secondPassModelProperties.add(e.getValue() );
+            }
+        }
+
+        //THIRD PASS - Use build directories as interpolator properties
+        List<InterpolatorProperty> ips2 = new ArrayList<InterpolatorProperty>(interpolatorProperties);
+        ips2.addAll(ModelTransformerContext.createInterpolatorProperties(secondPassModelProperties, ProjectUri.baseUri, aliases,
+                        false, false));
+        ips2.addAll(standardInterpolatorProperties);
+
+        ModelTransformerContext.interpolateModelProperties( modelProperties, ips2 );

INS31 INS83 INS39 INS42 INS44 MOV44 INS44 INS43 INS8 MOV70 INS74 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS70 INS60 INS60 INS25 INS21 INS21 INS60 INS21 INS21 INS43 INS43 INS42 INS32 INS74 INS59 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS43 INS59 MOV74 INS59 MOV32 INS8 INS74 INS32 INS32 INS32 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS25 INS42 INS42 MOV32 INS42 INS14 INS21 INS21 INS21 INS43 INS43 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS70 INS70 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV43 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS43 INS40 INS33 INS42 INS27 INS8 INS74 INS32 INS32 INS32 INS42 INS42 UPD42 INS74 INS59 INS44 INS42 INS8 INS44 INS32 INS8 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS40 INS42 INS9 INS9 INS43 INS43 INS43 INS43 INS42 INS27 INS38 INS25 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS74 INS42 INS42 INS42 MOV21 MOV21 INS43 INS43 INS42 INS42 INS42 INS42 INS27 INS38 INS32 INS27 INS8 INS8 INS42 INS42 MOV43 INS45 INS42 MOV43 INS45 INS42 MOV43 INS45 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS8 INS43 INS43 INS43 INS42 INS42 INS32 INS33 INS32 INS32 INS42 INS45 INS38 INS32 INS21 INS21 UPD42 INS43 INS43 INS43 INS32 INS42 INS40 INS60 INS25 INS40 INS42 INS42 UPD42 UPD42 MOV32 UPD42 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS32 INS42 INS40 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS8 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 MOV21 INS43 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS43 INS32 INS42 INS42 INS42 INS14 INS43 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL40 DEL43 DEL69 DEL40 DEL43 DEL69 DEL68 DEL65 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL11 DEL36 DEL32 DEL21 DEL45 DEL32 DEL45 DEL42 DEL32 DEL14 DEL45 DEL14