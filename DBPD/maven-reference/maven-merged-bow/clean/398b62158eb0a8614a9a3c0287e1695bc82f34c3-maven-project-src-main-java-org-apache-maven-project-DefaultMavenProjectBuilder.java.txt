Merge of branch: sisbell-maven-2.1-profile.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@685443 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
-import org.apache.maven.artifact.versioning.ManagedVersionMap;
-import org.apache.maven.model.Exclusion;
-import org.apache.maven.model.Parent;
-import org.apache.maven.model.Resource;
-import org.apache.maven.project.builder.PomClassicDomainModel;
-        String artifactKey = artifact.getId();
-
-//            getLogger().debug( "Checking cache for project (in buildFromRepository): " + artifactKey );
-//            getLogger().debug( "Allowing buildFromRepository to proceed for: " + artifactKey );
-
-//        else
-//        {
-//            getLogger().debug( "Returning cached project: " + project );
-//        }
-        MavenProject project = new MavenProject( superModel );
-
-        String projectId = safeVersionlessKey( STANDALONE_SUPERPOM_GROUPID, STANDALONE_SUPERPOM_ARTIFACTID );
-
-        project.setManagedVersionMap(
-            createManagedVersionMap( projectId, superModel.getDependencyManagement(), null ) );
+        MavenProject project = new MavenProject( superModel, artifactFactory );
-
-    // ----------------------------------------------------------------------
-    //
-    // ----------------------------------------------------------------------
-
-    private Map createManagedVersionMap( String projectId,
-                                         DependencyManagement dependencyManagement, File pomFile )
-        throws ProjectBuildingException
-    {
-        Map map = null;
-        List deps;
-        if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) && ( deps.size() > 0 ) )
-        {
-            map = new ManagedVersionMap( map );
-
-            if ( getLogger().isDebugEnabled() )
-            {
-                getLogger().debug( "Adding managed dependencies for " + projectId );
-            }
-
-            for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )
-            {
-                Dependency d = (Dependency) i.next();
-
-                try
-                {
-                    VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
-
-                    Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
-                        d.getClassifier(), d.getScope(), d.isOptional() );
-
-                    if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && ( d.getSystemPath() != null ) )
-                    {
-                        artifact.setFile( new File( d.getSystemPath() ) );
-                    }
-
-                    if ( getLogger().isDebugEnabled() )
-                    {
-                        getLogger().debug( "  " + artifact );
-                    }
-
-                    // If the dependencyManagement section listed exclusions,
-                    // add them to the managed artifacts here so that transitive
-                    // dependencies will be excluded if necessary.
-
-                    if ( ( null != d.getExclusions() ) && !d.getExclusions().isEmpty() )
-                    {
-                        List exclusions = new ArrayList();
-
-                        for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )
-                        {
-                            Exclusion e = (Exclusion) j.next();
-
-                            exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
-                        }
-
-                        ExcludesArtifactFilter eaf = new ExcludesArtifactFilter( exclusions );
-
-                        artifact.setDependencyFilter( eaf );
-                    }
-                    else
-                    {
-                        artifact.setDependencyFilter( null );
-                    }
-
-                    map.put( d.getManagementKey(), artifact );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-                    throw new InvalidDependencyVersionException( projectId, d, pomFile, e );
-                }
-            }
-        }
-        else if ( map == null )
-        {
-            map = Collections.EMPTY_MAP;
-        }
-        return map;
-    }
-
-//        getLogger().debug( "Checking cache-hit on project (in build*): " + projectDescriptor );
-
-        MavenProject project = projectWorkspace.getProject( projectDescriptor );
+        MavenProject project = null;//projectWorkspace.getProject( projectDescriptor );
-        MavenProject superProject = new MavenProject( superModel );
+        MavenProject superProject = new MavenProject( superModel, artifactFactory );
-//        getLogger().debug( "Caching project: " + project.getId() + " (also keyed by file: " + project.getFile() + ")" );
-
-
-        project.setManagedVersionMap( createManagedVersionMap( projectId, project.getDependencyManagement(), projectDescriptor ) );
-
-        project = new MavenProject( model );
+        project = new MavenProject( model, artifactFactory );
-        // TODO: these aren't taking active project artifacts into consideration in the reactor
-        project.setPluginArtifacts( createPluginArtifacts( projectId, project.getBuildPlugins(), pomFile ) );
-
-        if ( project.isConcrete() )
-        {
-            return;
-        }
-
-        Build build = project.getBuild();
-        if ( build != null )
-        {
-            initResourceMergeIds( build.getResources() );
-            initResourceMergeIds( build.getTestResources() );
-        }
-
-        Model model = ModelUtils.cloneModel( project.getModel() );
-
-        File basedir = project.getBasedir();
-
-        model = modelInterpolator.interpolate( model, basedir, config, getLogger().isDebugEnabled() );
-
-        List originalInterpolatedCompileSourceRoots = interpolateListOfStrings( project.getCompileSourceRoots(),
-                                                                           model,
-                                                                           project.getBasedir(),
-                                                                           config );
-
-        project.preserveCompileSourceRoots( originalInterpolatedCompileSourceRoots );
-
-        project.setCompileSourceRoots( originalInterpolatedCompileSourceRoots == null ? null
-                        : translateListOfPaths( originalInterpolatedCompileSourceRoots, basedir ) );
-
-        List originalInterpolatedTestCompileSourceRoots = interpolateListOfStrings( project.getTestCompileSourceRoots(),
-                                                                               model,
-                                                                               project.getBasedir(),
-                                                                               config );
-
-        project.preserveTestCompileSourceRoots( originalInterpolatedTestCompileSourceRoots );
-        project.setTestCompileSourceRoots( originalInterpolatedTestCompileSourceRoots == null ? null
-                        : translateListOfPaths( originalInterpolatedTestCompileSourceRoots, basedir ) );
-
-        List originalInterpolatedScriptSourceRoots = interpolateListOfStrings( project.getScriptSourceRoots(),
-                                                                          model,
-                                                                          project.getBasedir(),
-                                                                          config );
-
-        project.preserveScriptSourceRoots( originalInterpolatedScriptSourceRoots );
-        project.setScriptSourceRoots( originalInterpolatedScriptSourceRoots == null ? null
-                        : translateListOfPaths( originalInterpolatedScriptSourceRoots, basedir ) );
-
-        Model model2 = ModelUtils.cloneModel( model );
-
-        pathTranslator.alignToBaseDirectory( model, basedir );
-
-        project.preserveBuild( model2.getBuild() );
-        project.setBuild( model.getBuild() );
-
-        calculateConcreteProjectReferences( project, config );
-
-        MavenProject executionProject = project.getExecutionProject();
-        if ( executionProject != null && executionProject != project )
-        {
-            calculateConcreteState( executionProject, config );
-        }
-
-        project.setConcrete( true );
-    }
-
-    private void initResourceMergeIds( List<Resource> resources )
-    {
-        if ( resources != null )
-        {
-            for ( Resource resource : resources )
-            {
-                resource.initMergeId();
-            }
-        }
-    }
-
-    private void calculateConcreteProjectReferences( MavenProject project,
-                                                     ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        Map projectRefs = project.getProjectReferences();
-
-        if ( projectRefs != null )
-        {
-            for ( Iterator it = projectRefs.values().iterator(); it.hasNext(); )
-            {
-                MavenProject reference = (MavenProject) it.next();
-                calculateConcreteState( reference, config );
-            }
-        }
-    }
-
-    private List translateListOfPaths( List paths, File basedir )
-    {
-        if ( paths == null )
-        {
-            return null;
-        }
-        else if ( basedir == null )
-        {
-            return paths;
-        }
-
-        List result = new ArrayList( paths.size() );
-        for ( Iterator it = paths.iterator(); it.hasNext(); )
-        {
-            String path = (String) it.next();
-
-            String aligned = pathTranslator.alignToBaseDirectory( path, basedir );
-
-            result.add( aligned );
-        }
-
-        return result;
+        new MavenProjectRestorer(pathTranslator, modelInterpolator, getLogger()).calculateConcreteState(project, config);
-        if ( !project.isConcrete() )
-        {
-            return;
-        }
-
-        restoreBuildRoots( project, config );
-        restoreModelBuildSection( project, config );
-
-        restoreDynamicProjectReferences( project, config );
-
-        MavenProject executionProject = project.getExecutionProject();
-        if ( executionProject != null && executionProject != project )
-        {
-            restoreDynamicState( executionProject, config );
-        }
-
-        project.setConcrete( false );
-    }
-
-    private void restoreDynamicProjectReferences( MavenProject project,
-                                                  ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        Map projectRefs = project.getProjectReferences();
-        if ( projectRefs != null )
-        {
-            for ( Iterator it = projectRefs.values().iterator(); it.hasNext(); )
-            {
-                MavenProject projectRef = (MavenProject) it.next();
-                restoreDynamicState( projectRef, config );
-            }
-        }
-    }
-
-    private void restoreBuildRoots( MavenProject project,
-                                    ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        project.setCompileSourceRoots( restoreListOfStrings( project.getDynamicCompileSourceRoots(),
-                                                             project.getOriginalInterpolatedCompileSourceRoots(),
-                                                             project.getCompileSourceRoots(),
-                                                             project,
-                                                             config ) );
-
-        project.setTestCompileSourceRoots( restoreListOfStrings( project.getDynamicTestCompileSourceRoots(),
-                                                                 project.getOriginalInterpolatedTestCompileSourceRoots(),
-                                                                 project.getTestCompileSourceRoots(),
-                                                                 project,
-                                                                 config ) );
-
-        project.setScriptSourceRoots( restoreListOfStrings( project.getDynamicScriptSourceRoots(),
-                                                            project.getOriginalInterpolatedScriptSourceRoots(),
-                                                            project.getScriptSourceRoots(),
-                                                            project,
-                                                            config ) );
-
-        project.clearRestorableRoots();
-    }
-
-    private void restoreModelBuildSection( MavenProject project,
-                                           ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        Build changedBuild = project.getBuild();
-        Build dynamicBuild = project.getDynamicBuild();
-        Build originalInterpolatedBuild = project.getOriginalInterpolatedBuild();
-
-        dynamicBuild.setResources( restoreResources( dynamicBuild.getResources(),
-                                                         originalInterpolatedBuild.getResources(),
-                                                         changedBuild.getResources(),
-                                                         project,
-                                                         config ) );
-
-        dynamicBuild.setTestResources( restoreResources( dynamicBuild.getTestResources(),
-                                                         originalInterpolatedBuild.getTestResources(),
-                                                         changedBuild.getTestResources(),
-                                                         project,
-                                                         config ) );
-
-        dynamicBuild.setFilters( restoreListOfStrings( dynamicBuild.getFilters(),
-                                                           originalInterpolatedBuild.getFilters(),
-                                                           changedBuild.getFilters(),
-                                                           project,
-                                                           config ) );
-
-        dynamicBuild.setFinalName( restoreString( dynamicBuild.getFinalName(),
-                                                  originalInterpolatedBuild.getFinalName(),
-                                                  changedBuild.getFinalName(),
-                                                  project,
-                                                  config ) );
-
-        dynamicBuild.setDefaultGoal( restoreString( dynamicBuild.getDefaultGoal(),
-                                                  originalInterpolatedBuild.getDefaultGoal(),
-                                                  changedBuild.getDefaultGoal(),
-                                                  project,
-                                                  config ) );
-
-        dynamicBuild.setSourceDirectory( restoreString( dynamicBuild.getSourceDirectory(),
-                                                            originalInterpolatedBuild.getSourceDirectory(),
-                                                            changedBuild.getSourceDirectory(),
-                                                            project,
-                                                            config ) );
-
-        dynamicBuild.setTestSourceDirectory( restoreString( dynamicBuild.getTestSourceDirectory(),
-                                                                originalInterpolatedBuild.getTestSourceDirectory(),
-                                                                changedBuild.getTestSourceDirectory(),
-                                                                project,
-                                                                config ) );
-
-        dynamicBuild.setScriptSourceDirectory( restoreString( dynamicBuild.getScriptSourceDirectory(),
-                                                                  originalInterpolatedBuild.getScriptSourceDirectory(),
-                                                                  changedBuild.getScriptSourceDirectory(),
-                                                                  project,
-                                                                  config ) );
-
-        dynamicBuild.setOutputDirectory( restoreString( dynamicBuild.getOutputDirectory(),
-                                                            originalInterpolatedBuild.getOutputDirectory(),
-                                                            changedBuild.getOutputDirectory(),
-                                                            project,
-                                                            config ) );
-
-        dynamicBuild.setTestOutputDirectory( restoreString( dynamicBuild.getTestOutputDirectory(),
-                                                                originalInterpolatedBuild.getTestOutputDirectory(),
-                                                                changedBuild.getTestOutputDirectory(),
-                                                                project,
-                                                                config ) );
-
-        dynamicBuild.setDirectory( restoreString( dynamicBuild.getDirectory(),
-                                                      originalInterpolatedBuild.getDirectory(),
-                                                      changedBuild.getDirectory(),
-                                                      project,
-                                                      config ) );
-
-        project.setBuild( dynamicBuild );
-
-        project.clearRestorableBuild();
-    }
-
-    private List interpolateListOfStrings( List originalStrings,
-                                           Model model,
-                                           File projectDir,
-                                           ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalStrings == null )
-        {
-            return null;
-        }
-
-        List result = new ArrayList();
-
-        for ( Iterator it = originalStrings.iterator(); it.hasNext(); )
-        {
-            String original = (String) it.next();
-            String interpolated = modelInterpolator.interpolate( original, model, projectDir, config, getLogger().isDebugEnabled() );
-
-            result.add( interpolated );
-        }
-
-        return result;
-    }
-
-    private String restoreString( String originalString,
-                                      String originalInterpolatedString,
-                                      String changedString,
-                                      MavenProject project,
-                                      ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalString == null )
-        {
-            return changedString;
-        }
-        else if ( changedString == null )
-        {
-            return originalString;
-        }
-
-        Model model = project.getModel();
-
-        String relativeChangedString;
-        if ( project.getBasedir() != null )
-        {
-            relativeChangedString = pathTranslator.unalignFromBaseDirectory( changedString, project.getBasedir() );
-        }
-        else
-        {
-            relativeChangedString = changedString;
-        }
-
-        String interpolatedOriginal = modelInterpolator.interpolate( originalString, model, project.getBasedir(), config, getLogger().isDebugEnabled() );
-        String interpolatedOriginal2 = modelInterpolator.interpolate( originalInterpolatedString,
-                                                                 model,
-                                                                 project.getBasedir(), config, getLogger().isDebugEnabled() );
-
-        String interpolatedChanged = modelInterpolator.interpolate( changedString, model, project.getBasedir(), config, getLogger().isDebugEnabled() );
-        String relativeInterpolatedChanged = modelInterpolator.interpolate( relativeChangedString, model, project.getBasedir(), config, getLogger().isDebugEnabled() );
-
-        if ( interpolatedOriginal.equals( interpolatedChanged )
-             || interpolatedOriginal2.equals( interpolatedChanged ) )
-        {
-            return originalString;
-        }
-        else if ( interpolatedOriginal.equals( relativeInterpolatedChanged )
-                        || interpolatedOriginal2.equals( relativeInterpolatedChanged ) )
-       {
-           return originalString;
-       }
-
-        return relativeChangedString;
-    }
-
-    private List restoreListOfStrings( List originalStrings,
-                                           List originalInterpolatedStrings,
-                                           List changedStrings,
-                                           MavenProject project,
-                                           ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalStrings == null )
-        {
-            return changedStrings;
-        }
-        else if ( changedStrings == null )
-        {
-            return originalStrings;
-        }
-
-        List result = new ArrayList();
-
-        Map orig = new HashMap();
-        for ( int idx = 0; idx < originalStrings.size(); idx++ )
-        {
-            String[] permutations = new String[2];
-
-            permutations[0] = (String) originalInterpolatedStrings.get( idx );
-            permutations[1] = (String) originalStrings.get( idx );
-
-            orig.put( permutations[0], permutations );
-        }
-
-        for ( Iterator it = changedStrings.iterator(); it.hasNext(); )
-        {
-            String changedString = (String) it.next();
-            String relativeChangedString;
-            if ( project.getBasedir() != null )
-            {
-                relativeChangedString = pathTranslator.unalignFromBaseDirectory( changedString, project.getBasedir() );
-            }
-            else
-            {
-                relativeChangedString = changedString;
-            }
-
-            String interpolated = modelInterpolator.interpolate( changedString,
-                                                                 project.getModel(),
-                                                                 project.getBasedir(),
-                                                                 config,
-                                                                 getLogger().isDebugEnabled() );
-
-            String relativeInterpolated = modelInterpolator.interpolate( relativeChangedString,
-                                                                         project.getModel(),
-                                                                         project.getBasedir(),
-                                                                         config,
-                                                                         getLogger().isDebugEnabled() );
-
-            String[] original = (String[]) orig.get( interpolated );
-            if ( original == null )
-            {
-                original = (String[]) orig.get( relativeInterpolated );
-            }
-
-            if ( original == null )
-            {
-                result.add( relativeChangedString );
-            }
-            else
-            {
-                result.add( original[1] );
-            }
-        }
-
-        return result;
-    }
-
-    // TODO: Convert this to use the mergeId on each resource...
-    private List restoreResources( List<Resource> originalResources,
-                                       List<Resource> originalInterpolatedResources,
-                                       List<Resource> changedResources,
-                                       MavenProject project,
-                                       ProjectBuilderConfiguration config )
-        throws ModelInterpolationException
-    {
-        if ( originalResources == null || changedResources == null )
-        {
-            return originalResources;
-        }
-
-        List<Resource> result = new ArrayList<Resource>();
-
-        Map<String, Resource[]> originalResourcesByMergeId = new HashMap<String, Resource[]>();
-        for ( int idx = 0; idx < originalResources.size(); idx++ )
-        {
-            Resource[] permutations = new Resource[2];
-
-            permutations[0] = originalInterpolatedResources.get( idx );
-            permutations[1] = originalResources.get( idx );
-
-            originalResourcesByMergeId.put( permutations[0].getMergeId(), permutations );
-        }
-
-        for ( Resource resource : changedResources )
-        {
-            String mergeId = resource.getMergeId();
-            if ( mergeId == null || !originalResourcesByMergeId.containsKey( mergeId ) )
-            {
-                result.add( resource );
-            }
-            else
-            {
-                Resource originalInterpolatedResource = originalResourcesByMergeId.get( mergeId )[0];
-                Resource originalResource = originalResourcesByMergeId.get( mergeId )[1];
-
-                String dir = modelInterpolator.interpolate( resource.getDirectory(), project.getModel(), project.getBasedir(), config, getLogger().isDebugEnabled() );
-                String oDir = originalInterpolatedResource.getDirectory();
-
-                if ( !dir.equals( oDir ) )
-                {
-                    originalResource.setDirectory( pathTranslator.unalignFromBaseDirectory( dir, project.getBasedir() ) );
-                }
-
-                if ( resource.getTargetPath() != null )
-                {
-                    String target = modelInterpolator.interpolate( resource.getTargetPath(), project.getModel(), project.getBasedir(), config, getLogger().isDebugEnabled() );
-
-                    String oTarget = originalInterpolatedResource.getTargetPath();
-
-                    if ( !target.equals( oTarget ) )
-                    {
-                        originalResource.setTargetPath( pathTranslator.unalignFromBaseDirectory( target, project.getBasedir() ) );
-                    }
-                }
-
-                originalResource.setFiltering( resource.isFiltering() );
-
-                originalResource.setExcludes( collectRestoredListOfPatterns( resource.getExcludes(),
-                                                                             originalResource.getExcludes(),
-                                                                             originalInterpolatedResource.getExcludes() ) );
-
-                originalResource.setIncludes( collectRestoredListOfPatterns( resource.getIncludes(),
-                                                                             originalResource.getIncludes(),
-                                                                             originalInterpolatedResource.getIncludes() ) );
-
-                result.add( originalResource );
-            }
-        }
-
-        return result;
-    }
-
-    private List<String> collectRestoredListOfPatterns( List<String> patterns,
-                                                        List<String> originalPatterns,
-                                                        List<String> originalInterpolatedPatterns )
-    {
-        LinkedHashSet<String> collectedPatterns = new LinkedHashSet<String>();
-
-        collectedPatterns.addAll( originalPatterns );
-
-        for ( String pattern : patterns )
-        {
-            if ( !originalInterpolatedPatterns.contains( pattern ) )
-            {
-                collectedPatterns.add( pattern );
-            }
-        }
-
-        return (List<String>) ( collectedPatterns.isEmpty() ? Collections.emptyList()
-                        : new ArrayList<String>( collectedPatterns ) );
-    }
-
-    private void validateModel( Model model,
-                                File pomFile )
-        throws InvalidProjectModelException
-    {
-        // Must validate before artifact construction to make sure dependencies are good
-        ModelValidationResult validationResult = validator.validate( model );
-
-        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-
-        if ( validationResult.getMessageCount() > 0 )
-        {
-            throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile,
-                validationResult );
-        }
+        new MavenProjectRestorer(pathTranslator, modelInterpolator, getLogger()).restoreDynamicState(project, config);
-            MavenProject project = new MavenProject( currentModel );
+            MavenProject project = new MavenProject( currentModel, artifactFactory );
-     * @deprecated use {@link #createPluginArtifacts(String, List, File)}
-     * @param projectId
-     * @param plugins
-     * @param pomLocation absolute path of pom file
-     * @return
-     * @throws ProjectBuildingException
-     */
-    @Deprecated
-    protected Set createPluginArtifacts( String projectId,
-                                         List plugins, String pomLocation )
-        throws ProjectBuildingException
-    {
-        return createPluginArtifacts( projectId, plugins, new File( pomLocation ) );
-    }
-
-    /**
-     *
-     * @param projectId
-     * @param plugins
-     * @param pomLocation pom file
-     * @return
-     * @throws ProjectBuildingException
-     */
-    protected Set createPluginArtifacts( String projectId,
-                                         List plugins, File pomLocation )
-        throws ProjectBuildingException
-    {
-        Set pluginArtifacts = new HashSet();
-
-        for ( Iterator i = plugins.iterator(); i.hasNext(); )
-        {
-            Plugin p = (Plugin) i.next();
-
-            String version;
-            if ( StringUtils.isEmpty( p.getVersion() ) )
-            {
-                version = "RELEASE";
-            }
-            else
-            {
-                version = p.getVersion();
-            }
-
-            Artifact artifact;
-            try
-            {
-                artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
-                    VersionRange.createFromVersionSpec( version ) );
-            }
-            catch ( InvalidVersionSpecificationException e )
-            {
-                throw new InvalidProjectVersionException( projectId, "Plugin: " + p.getKey(), version, pomLocation, e );
-            }
-
-            if ( artifact != null )
-            {
-                pluginArtifacts.add( artifact );
-            }
-        }
-
-        return pluginArtifacts;
-    }
-
-    /**
-                   null, null, resolver,
+                   null, null, null, resolver,
+
+    private void validateModel( Model model,
+                                File pomFile )
+        throws InvalidProjectModelException
+    {
+        // Must validate before artifact construction to make sure dependencies are good
+        ModelValidationResult validationResult = validator.validate( model );
+
+        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+
+        if ( validationResult.getMessageCount() > 0 )
+        {
+            throw new InvalidProjectModelException( projectId, "Failed to validate POM", pomFile,
+                validationResult );
+        }
+    }

MOV31 MOV44 MOV44 MOV43 MOV44 MOV44 MOV43 INS60 INS21 INS21 MOV43 INS43 INS59 MOV43 INS59 INS32 INS32 INS42 INS42 INS33 MOV42 INS14 MOV14 INS14 UPD42 MOV42 MOV42 MOV42 INS14 MOV42 UPD42 MOV42 MOV42 MOV43 INS42 MOV43 INS42 INS42 UPD42 INS42 INS43 INS42 INS42 MOV32 INS43 INS42 INS42 MOV32 MOV43 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 INS33 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL32 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL33 DEL42 DEL42 DEL32 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL42 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL27 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL34 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL16 DEL36 DEL11 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL66 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL65 DEL42 DEL65 DEL42 DEL66 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31