multi-module support


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163528 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.DefaultMavenExecutionRequest;
-import org.apache.maven.execution.MavenInitializingExecutionRequest;
-import org.apache.maven.execution.MavenProjectExecutionRequest;
-import org.apache.maven.execution.MavenReactorExecutionRequest;
+import org.codehaus.plexus.util.FileUtils;
+import java.util.Collections;
+import java.util.List;
-    public static int main( String[] args, ClassWorld classWorld ) throws Exception
+    public static int main( String[] args, ClassWorld classWorld )
+        throws Exception
-        if ( projectFile.exists() )
+        if ( commandLine.hasOption( CLIManager.REACTOR ) )
-            if ( commandLine.hasOption( CLIManager.REACTOR ) )
-            {
-                String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 );
+            String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 );
-                String excludes = System.getProperty( "maven.reactor.excludes", POMv4 );
+            String excludes = System.getProperty( "maven.reactor.excludes", POMv4 );
-                request = new MavenReactorExecutionRequest( localRepository, userModel, eventDispatcher,
-                                                            commandLine.getArgList(), includes, excludes, userDir );
-            }
-            else
-            {
-                request = new MavenProjectExecutionRequest( localRepository, userModel, eventDispatcher,
-                                                            commandLine.getArgList(), projectFile );
-            }
+            request =
+                new DefaultMavenExecutionRequest( localRepository, userModel, eventDispatcher,
+                                                  commandLine.getArgList(),
+                                                  FileUtils.getFiles( userDir, includes, excludes ), userDir.getPath() );
-            request = new MavenInitializingExecutionRequest( localRepository, userModel, eventDispatcher,
-                                                             commandLine.getArgList() );
+            List files = Collections.EMPTY_LIST;
+            if ( projectFile.exists() )
+            {
+                files = Collections.singletonList( projectFile );
+            }
+            request = new DefaultMavenExecutionRequest( localRepository, userModel, eventDispatcher,
+                                                        commandLine.getArgList(), files, userDir.getPath() );
-    // ----------------------------------------------------------------------
-    // System properties handling
-    // ----------------------------------------------------------------------
+// ----------------------------------------------------------------------
+// System properties handling
+// ----------------------------------------------------------------------
-    // ----------------------------------------------------------------------
-    // Command line manager
-    // ----------------------------------------------------------------------
+// ----------------------------------------------------------------------
+// Command line manager
+// ----------------------------------------------------------------------
-            options.addOption( OptionBuilder.withLongOpt( "nobanner" ).withDescription( "Suppress logo banner" )
-                                            .create( NO_BANNER ) );
-            options
-                   .addOption( OptionBuilder.withLongOpt( "define" ).hasArg()
-                                            .withDescription( "Define a system property" ).create( SET_SYSTEM_PROPERTY ) );
-            options.addOption( OptionBuilder.withLongOpt( "offline" ).hasArg().withDescription( "Work offline" )
-                                            .create( WORK_OFFLINE ) );
-            options
-                   .addOption( OptionBuilder.withLongOpt( "mojoDescriptors" )
-                                            .withDescription( "Display available mojoDescriptors" ).create( LIST_GOALS ) );
-            options.addOption( OptionBuilder.withLongOpt( "help" ).withDescription( "Display help information" )
-                                            .create( HELP ) );
-            options.addOption( OptionBuilder.withLongOpt( "offline" ).withDescription( "Build is happening offline" )
-                                            .create( WORK_OFFLINE ) );
-            options.addOption( OptionBuilder.withLongOpt( "version" ).withDescription( "Display version information" )
-                                            .create( VERSION ) );
-            options.addOption( OptionBuilder.withLongOpt( "debug" ).withDescription( "Produce execution debug output" )
-                                            .create( DEBUG ) );
-            options.addOption( OptionBuilder.withLongOpt( "reactor" )
-                                            .withDescription( "Execute goals for project found in the reactor" )
-                                            .create( REACTOR ) );
+            options.addOption( OptionBuilder.withLongOpt( "nobanner" ).withDescription( "Suppress logo banner" ).create(
+                NO_BANNER ) );
+            options.addOption( OptionBuilder.withLongOpt( "define" ).hasArg().withDescription(
+                "Define a system property" ).create( SET_SYSTEM_PROPERTY ) );
+            options.addOption( OptionBuilder.withLongOpt( "offline" ).hasArg().withDescription( "Work offline" ).create(
+                WORK_OFFLINE ) );
+            options.addOption( OptionBuilder.withLongOpt( "mojoDescriptors" ).withDescription(
+                "Display available mojoDescriptors" ).create( LIST_GOALS ) );
+            options.addOption( OptionBuilder.withLongOpt( "help" ).withDescription( "Display help information" ).create(
+                HELP ) );
+            options.addOption( OptionBuilder.withLongOpt( "offline" ).withDescription( "Build is happening offline" ).create(
+                WORK_OFFLINE ) );
+            options.addOption( OptionBuilder.withLongOpt( "version" ).withDescription( "Display version information" ).create(
+                VERSION ) );
+            options.addOption( OptionBuilder.withLongOpt( "debug" ).withDescription( "Produce execution debug output" ).create(
+                DEBUG ) );
+            options.addOption( OptionBuilder.withLongOpt( "reactor" ).withDescription(
+                "Execute goals for project found in the reactor" ).create( REACTOR ) );
-        public CommandLine parse( String[] args ) throws ParseException
+        public CommandLine parse( String[] args )
+            throws ParseException
-    // ----------------------------------------------------------------------
-    //
-    // ----------------------------------------------------------------------
+// ----------------------------------------------------------------------
+//
+// ----------------------------------------------------------------------
-                //throw a configuration exception
+//throw a configuration exception
-    protected static ArtifactRepository getLocalRepository() throws Exception
+    protected static ArtifactRepository getLocalRepository()
+        throws Exception
-            localRepository = new File( userConfigurationDirectory, MavenConstants.MAVEN_REPOSITORY ).getAbsolutePath();
+            localRepository =
+                new File( userConfigurationDirectory, MavenConstants.MAVEN_REPOSITORY ).getAbsolutePath();
-        // TODO [BP]: this should not be necessary - grep for and remove
+// TODO [BP]: this should not be necessary - grep for and remove

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 INS40 UPD40 MOV25 INS60 INS25 INS43 INS59 MOV32 INS8 INS42 INS42 INS40 INS21 UPD43 INS32 INS32 INS7 UPD43 UPD42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25