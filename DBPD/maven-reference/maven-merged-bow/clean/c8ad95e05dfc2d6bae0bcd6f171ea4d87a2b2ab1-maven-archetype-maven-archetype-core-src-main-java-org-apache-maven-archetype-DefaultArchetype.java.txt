PR: MNG-490
Submitted by: Rahul Thakur
Reviewed by:  Brett Porter
Creating an archetype with a different folder structure for java and test sources still results in default (src/main/java) folder being generated.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@240227 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Build;
+import org.apache.maven.model.Model;
+import org.apache.maven.model.Resource;
+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import java.io.FileReader;
+    private static final String DEFAULT_TEST_RESOURCE_DIR = "/src/test/resources";
+
+    private static final String DEFAULT_TEST_SOURCE_DIR = "/src/test/java";
+
+    private static final String DEFAULT_RESOURCE_DIR = "/src/main/resources";
+
+    private static final String DEFAULT_SOURCE_DIR = "/src/main/java";
+    
+    
-                                 ArtifactRepository localRepository, List remoteRepositories, Map parameters )
+                                ArtifactRepository localRepository, List remoteRepositories, Map parameters )
-                getLogger().info( "Using following parameters for creating Archetype: " + archetypeArtifactId + ":" + archetypeVersion );
+                getLogger().info(
+                                  "Using following parameters for creating Archetype: " + archetypeArtifactId + ":"
+                                      + archetypeVersion );
-        
-        
+
+            // ---------------------------------------------------------------------
+            // Model generated for the new archetype, so process it now
+            // ---------------------------------------------------------------------
+            File pomFile = new File( outputDirectory + "/" + ARCHETYPE_POM );
+            FileReader pomReader = new FileReader( pomFile );
+            MavenXpp3Reader reader = new MavenXpp3Reader();
+            Model generatedModel = reader.read( pomReader );
+
+            // XXX: Following POM processing block may be a candidate for 
+            // refactoring out into service methods or moving to 
+            // createProjectDirectoryStructure(outputDirectory)
+            Build build = null;
+            boolean bOverrideSrcDir = false;
+            boolean bOverrideScriptSrcDir = false;
+            boolean bOverrideResourceDir = false;
+            boolean bOverrideTestSrcDir = false;
+            boolean bOverrideTestResourceDir = false;
+            boolean bFoundBuildElement = ( null != ( build = generatedModel.getBuild() ) );
+
+            if ( getLogger().isDebugEnabled() )
+                getLogger()
+                    .debug(
+                            "********************* Debug info for resources created from generated Model ***********************" );
+
+            if ( getLogger().isDebugEnabled() )
+                getLogger().debug( "Was build element found in generated POM?: " + bFoundBuildElement );
+            
+            // create source directory if specified in POM
+            if ( bFoundBuildElement && null != build.getSourceDirectory() )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default source directory " );
+                bOverrideSrcDir = true;
+                String srcDirectory = build.getSourceDirectory();
+                srcDirectory = StringUtils.replace( srcDirectory, "\\", "/" );
+                FileUtils.mkdir( outputDirectory
+                    + ( srcDirectory.startsWith( "/" ) ? srcDirectory : ( "/" + srcDirectory ) ) );
+            }
+
+            // create script source directory if specified in POM
+            if ( bFoundBuildElement && null != build.getScriptSourceDirectory() )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default script source directory " );
+                bOverrideScriptSrcDir = true;
+                String scriptSourceDirectory = build.getScriptSourceDirectory();
+                scriptSourceDirectory = StringUtils.replace( scriptSourceDirectory, "\\", "/" );
+                FileUtils.mkdir( outputDirectory
+                    + ( scriptSourceDirectory.startsWith( "/" ) ? scriptSourceDirectory
+                                                               : ( "/" + scriptSourceDirectory ) ) );
+
+            }
+
+            // create resource director(y/ies) if specified in POM
+            if ( bFoundBuildElement && build.getResources().size() > 0 )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().info( "Overriding default resource directory " );
+                bOverrideResourceDir = true;
+                Iterator resourceItr = build.getResources().iterator();
+                while ( resourceItr.hasNext() )
+                {
+                    Resource resource = (Resource) resourceItr.next();
+                    String resourceDirectory = resource.getDirectory();
+                    resourceDirectory = StringUtils.replace( resourceDirectory, "\\", "/" );
+                    FileUtils.mkdir( outputDirectory
+                        + ( resourceDirectory.startsWith( "/" ) ? resourceDirectory : ( "/" + resourceDirectory ) ) );
+                }
+            }
+            // create test source directory if specified in POM
+            if ( bFoundBuildElement && null != build.getTestSourceDirectory() )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default test directory " );
+                bOverrideTestSrcDir = true;
+                String testDirectory = build.getTestSourceDirectory();
+                testDirectory = StringUtils.replace( testDirectory, "\\", "/" );
+                FileUtils.mkdir( outputDirectory
+                    + ( testDirectory.startsWith( "/" ) ? testDirectory : ( "/" + testDirectory ) ) );
+            }
+
+            // create test resource directory if specified in POM
+            if ( bFoundBuildElement && build.getTestResources().size() > 0 )
+            {
+                if ( getLogger().isDebugEnabled() )
+                    getLogger().debug( "Overriding default test resource directory " );
+                bOverrideTestResourceDir = true;
+                Iterator testResourceItr = build.getTestResources().iterator();
+                while ( testResourceItr.hasNext() )
+                {
+                    Resource resource = (Resource) testResourceItr.next();
+                    String testResourceDirectory = resource.getDirectory();
+                    testResourceDirectory = StringUtils.replace( testResourceDirectory, "\\", "/" );
+                    FileUtils.mkdir( outputDirectory
+                        + ( testResourceDirectory.startsWith( "/" ) ? testResourceDirectory
+                                                                   : ( "/" + testResourceDirectory ) ) );
+                }
+            }
+
+            getLogger()
+                .info(
+                       "********************* End of debug info from resources from generated POM ***********************" );
+
-                FileUtils.mkdir( outputDirectory + "/src/main/java" );
-
+                if ( !bOverrideSrcDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_SOURCE_DIR );
+                }
-                FileUtils.mkdir( outputDirectory + "/src/main/resources" );
-
+                if ( !bOverrideResourceDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_RESOURCE_DIR );
+                }
-                FileUtils.mkdir( outputDirectory + "/src/test/java" );
+                if ( !bOverrideTestSrcDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_TEST_SOURCE_DIR );
+                }
-                FileUtils.mkdir( outputDirectory + "/src/test/resources" );
-
+                if ( !bOverrideTestResourceDir )
+                {
+                    FileUtils.mkdir( outputDirectory + DEFAULT_TEST_RESOURCE_DIR );
+                }
-        
+
-                                    boolean packageInFileName, String packageName )
+                                   boolean packageInFileName, String packageName )
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS8 MOV21 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS21 MOV25 MOV25 MOV25 MOV25 MOV25 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS21 INS32 INS21 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS36 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS27 INS25 INS21 INS60 INS21 INS21 INS42 INS27 INS25 INS21 INS60 INS21 INS21 INS42 INS27 INS25 INS21 INS60 INS61 INS42 INS27 INS25 INS21 INS60 INS21 INS21 INS42 INS27 INS25 INS21 INS60 INS61 INS32 INS42 INS45 INS25 INS25 INS25 INS25 INS43 INS27 INS43 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS27 INS33 INS32 INS32 INS21 INS7 INS43 INS59 INS7 INS32 INS33 INS32 INS32 INS21 INS7 INS43 INS59 INS7 INS32 INS32 INS34 INS32 INS21 INS7 INS43 INS59 INS32 INS8 INS33 INS32 INS32 INS21 INS7 INS43 INS59 INS7 INS32 INS32 INS34 INS32 INS21 INS7 INS43 INS59 INS32 INS8 INS42 INS38 INS8 INS38 INS8 INS38 INS8 INS38 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS36 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS21 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS42 MOV21 INS7 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS36 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS43 INS59 INS43 INS59 INS7 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS43 INS59 INS43 INS59 INS7 INS32 INS42 INS32 INS42 INS16 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS36 INS32 INS42 INS36 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS36 INS32 INS42 INS36 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 INS42 INS42 INS42 INS16 INS42 INS42 INS45 INS27 INS42 INS42 INS42 INS16 INS45 INS42 INS45 INS42 INS32 INS42 INS36 INS45 INS42 INS32 INS42 INS36 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 INS45 INS42 INS45 INS42 DEL45 DEL45 DEL45 DEL45 DEL8