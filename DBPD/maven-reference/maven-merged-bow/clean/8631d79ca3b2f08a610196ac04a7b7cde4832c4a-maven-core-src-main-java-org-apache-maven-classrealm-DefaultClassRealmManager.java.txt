MNG-5771 use extension.xml to define core exported artifacts and packages

Signed-off-by: Igor Fedorenko <ifedorenko@apache.org>

+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.apache.maven.extension.internal.DefaultCoreExports;
-import org.codehaus.plexus.component.annotations.Component;
-import org.codehaus.plexus.component.annotations.Requirement;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import com.google.common.collect.ImmutableMap;
+
-@Component( role = ClassRealmManager.class )
+@Named
+@Singleton
-    @Requirement
-    private Logger logger;
+    private final Logger logger;
-    @Requirement
-    protected PlexusContainer container;
+    private final ClassWorld world;
+
+    private final ClassRealm containerRealm;
+
+    // this is a live injected collection
+    private final List<ClassRealmManagerDelegate> delegates;
+
+    private final Map<String, ClassLoader> coreImports;
-    private ClassWorld getClassWorld()
+    @Inject
+    public DefaultClassRealmManager( Logger logger, PlexusContainer container,
+                                     List<ClassRealmManagerDelegate> delegates, DefaultCoreExports coreExtensions )
-        return ( (MutablePlexusContainer) container ).getClassWorld();
+        this.logger = logger;
+        this.world = ( (MutablePlexusContainer) container ).getClassWorld();
+        this.containerRealm = container.getContainerRealm();
+        this.delegates = delegates;
+
+        Map<String, ClassLoader> coreImports = new HashMap<String, ClassLoader>();
+        for ( String corePackage : coreExtensions.getExportedPackages() )
+        {
+            coreImports.put( corePackage, containerRealm );
+        }
+        this.coreImports = ImmutableMap.copyOf( coreImports );
-        ClassWorld world = getClassWorld();
-
-            Map<String, ClassLoader> foreignImports = new HashMap<String, ClassLoader>();
-            importMavenApi( foreignImports );
+            Map<String, ClassLoader> foreignImports = new HashMap<String, ClassLoader>( coreImports );
-    private void importMavenApi( Map<String, ClassLoader> imports )
-    {
-        ClassRealm coreRealm = getCoreRealm();
-
-        // maven-*
-        imports.put( "org.apache.maven.*", coreRealm );
-        imports.put( "org.apache.maven.artifact", coreRealm );
-        imports.put( "org.apache.maven.classrealm", coreRealm );
-        imports.put( "org.apache.maven.cli", coreRealm );
-        imports.put( "org.apache.maven.configuration", coreRealm );
-        imports.put( "org.apache.maven.exception", coreRealm );
-        imports.put( "org.apache.maven.execution", coreRealm );
-        imports.put( "org.apache.maven.execution.scope", coreRealm );
-        imports.put( "org.apache.maven.lifecycle", coreRealm );
-        imports.put( "org.apache.maven.model", coreRealm );
-        imports.put( "org.apache.maven.monitor", coreRealm );
-        imports.put( "org.apache.maven.plugin", coreRealm );
-        imports.put( "org.apache.maven.profiles", coreRealm );
-        imports.put( "org.apache.maven.project", coreRealm );
-        imports.put( "org.apache.maven.reporting", coreRealm );
-        imports.put( "org.apache.maven.repository", coreRealm );
-        imports.put( "org.apache.maven.rtinfo", coreRealm );
-        imports.put( "org.apache.maven.settings", coreRealm );
-        imports.put( "org.apache.maven.toolchain", coreRealm );
-        imports.put( "org.apache.maven.usability", coreRealm );
-
-        // wagon-api
-        imports.put( "org.apache.maven.wagon.*", coreRealm );
-        imports.put( "org.apache.maven.wagon.authentication", coreRealm );
-        imports.put( "org.apache.maven.wagon.authorization", coreRealm );
-        imports.put( "org.apache.maven.wagon.events", coreRealm );
-        imports.put( "org.apache.maven.wagon.observers", coreRealm );
-        imports.put( "org.apache.maven.wagon.proxy", coreRealm );
-        imports.put( "org.apache.maven.wagon.repository", coreRealm );
-        imports.put( "org.apache.maven.wagon.resource", coreRealm );
-
-        // aether-api, aether-spi, aether-impl
-        imports.put( "org.eclipse.aether.*", coreRealm );
-        imports.put( "org.eclipse.aether.artifact", coreRealm );
-        imports.put( "org.eclipse.aether.collection", coreRealm );
-        imports.put( "org.eclipse.aether.deployment", coreRealm );
-        imports.put( "org.eclipse.aether.graph", coreRealm );
-        imports.put( "org.eclipse.aether.impl", coreRealm );
-        imports.put( "org.eclipse.aether.internal.impl", coreRealm );
-        imports.put( "org.eclipse.aether.installation", coreRealm );
-        imports.put( "org.eclipse.aether.metadata", coreRealm );
-        imports.put( "org.eclipse.aether.repository", coreRealm );
-        imports.put( "org.eclipse.aether.resolution", coreRealm );
-        imports.put( "org.eclipse.aether.spi", coreRealm );
-        imports.put( "org.eclipse.aether.transfer", coreRealm );
-        imports.put( "org.eclipse.aether.version", coreRealm );
-
-        // plexus-classworlds
-        imports.put( "org.codehaus.plexus.classworlds", coreRealm );
-
-        // classworlds (for legacy code)
-        imports.put( "org.codehaus.classworlds", coreRealm );
-
-        // plexus-utils (for DOM-type fields in maven-model)
-        imports.put( "org.codehaus.plexus.util.xml.Xpp3Dom", coreRealm );
-        imports.put( "org.codehaus.plexus.util.xml.pull.XmlPullParser", coreRealm );
-        imports.put( "org.codehaus.plexus.util.xml.pull.XmlPullParserException", coreRealm );
-        imports.put( "org.codehaus.plexus.util.xml.pull.XmlSerializer", coreRealm );
-
-        // plexus-container, plexus-component-annotations
-        imports.put( "org.codehaus.plexus.*", coreRealm );
-        imports.put( "org.codehaus.plexus.component", coreRealm );
-        imports.put( "org.codehaus.plexus.configuration", coreRealm );
-        imports.put( "org.codehaus.plexus.container", coreRealm );
-        imports.put( "org.codehaus.plexus.context", coreRealm );
-        imports.put( "org.codehaus.plexus.lifecycle", coreRealm );
-        imports.put( "org.codehaus.plexus.logging", coreRealm );
-        imports.put( "org.codehaus.plexus.personality", coreRealm );
-
-        // javax.inject (JSR-330)
-        imports.put( "javax.inject.*", coreRealm );
-        // javax.enterprise.inject (JSR-299)
-        imports.put( "javax.enterprise.util.*", coreRealm );
-        imports.put( "javax.enterprise.inject.*", coreRealm );
-
-        // com.google
-        //
-        // We may potentially want to export these, but right now I'm not sure that anything Guice specific needs
-        // to be made available to plugin authors. If we find people are getting fancy and want to take advantage
-        // of Guice specifics we can expose that later. Really some testing needs to be done to see full hiding
-        // of Guice has any impact on what we may categorize as a standard JSR-330 based Tesla/Maven plugin.
-        //
-        // imports.put( "com.google.inject.*", coreRealm );
-        // imports.put( "com.google.inject.binder.*", coreRealm );
-        // imports.put( "com.google.inject.matcher.*", coreRealm );
-        // imports.put( "com.google.inject.name.*", coreRealm );
-        // imports.put( "com.google.inject.spi.*", coreRealm );
-        // imports.put( "com.google.inject.util.*", coreRealm );
-
-        // SLF4J
-        imports.put( "org.slf4j.*", coreRealm );
-    }
-
-        return container.getContainerRealm();
+        return containerRealm;
-    private List<ClassRealmManagerDelegate> getDelegates()
-    {
-        try
-        {
-            return container.lookupList( ClassRealmManagerDelegate.class );
-        }
-        catch ( ComponentLookupException e )
-        {
-            logger.error( "Failed to lookup class realm delegates: " + e.getMessage(), e );
-
-            return Collections.emptyList();
-        }
-    }
-
-        List<ClassRealmManagerDelegate> delegates = getDelegates();
+        List<ClassRealmManagerDelegate> delegates = new ArrayList<ClassRealmManagerDelegate>( this.delegates );

MOV26 MOV26 MOV26 INS26 INS26 UPD40 INS40 INS40 UPD40 UPD40 INS78 INS78 INS23 INS23 INS23 INS31 INS31 INS42 INS42 INS83 UPD83 INS83 MOV43 INS83 INS83 MOV43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS78 INS83 INS42 INS44 INS44 INS44 INS44 INS8 MOV83 MOV43 MOV42 INS8 UPD42 INS42 INS43 INS43 INS42 MOV43 MOV43 MOV43 UPD42 MOV42 INS42 INS43 INS42 MOV43 INS42 MOV74 INS42 INS43 INS42 MOV21 MOV21 MOV21 MOV21 MOV60 INS70 INS21 MOV41 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS44 INS32 INS8 INS7 INS42 MOV74 INS22 INS42 INS22 MOV32 INS22 MOV32 INS22 INS42 UPD42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV21 INS22 INS32 INS60 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV74 INS59 INS74 INS22 UPD42 INS42 UPD42 INS43 INS43 INS43 INS42 INS14 INS43 MOV43 INS52 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL80 DEL77 DEL42 DEL78 DEL42 DEL78 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL45 DEL83 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL57 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL32