Building maven projects works; it runs all integration test projects,
and when one fails (FAIL_AT_END) the build of this project fails too.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@279336 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.repository.ArtifactRepositoryFactory;
-import org.apache.maven.artifact.repository.DefaultArtifactRepository;
-import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
+import org.apache.maven.execution.MavenExecutionResponse;
+import org.apache.maven.execution.ReactorManager;
+import org.apache.maven.lifecycle.LifecycleExecutionException;
+import org.apache.maven.lifecycle.LifecycleExecutor;
+import org.codehaus.plexus.util.dag.CycleDetectedException;
+     * @parameter expression="${component.org.apache.maven.lifecycle.LifecycleExecutor}"
+     */
+    private LifecycleExecutor lifecycleExecutor;
+
+    /**
-
-    private File projectsDir;
-
-
-    private ArtifactRepository artifactRepo;
-
-    private MavenProjectBuilder projectBuilder;
+    private File integrationTestsDirectory;
-        initComponents();
-
-        buildProjects( listITPoms() );
-    }
-
-    private void initComponents()
-        throws MojoExecutionException
-    {
-            artifactRepo = createLocalRepository();
-
-            projectBuilder = (MavenProjectBuilder)
-                session.getContainer().lookup( MavenProjectBuilder.ROLE );
-
-            if ( projectBuilder == null )
-                throw new MojoExecutionException( "Lookup for MavenProjectBuilder returned null" );
+            buildProjects();
-        catch (ComponentLookupException e)
+        catch ( CycleDetectedException e )
-            throw new MojoExecutionException( "Cannot get a MavenProjectBuilder", e);
+            throw new MojoExecutionException( "Error building projects", e );
+        }
+        catch ( LifecycleExecutionException e )
+        {
+            throw new MojoExecutionException( "Error building projects", e );
-    private void buildProjects( List poms )
+    private void buildProjects()
+        throws CycleDetectedException, LifecycleExecutionException, MojoExecutionException
-        getLog().info( "Building " + poms.size() + " integration test projects.." );
+        List projects = collectProjects();
+
+        ReactorManager rm = new ReactorManager( projects );
+
+        rm.setFailureBehavior( ReactorManager.FAIL_AT_END );
+
+        List goals = Collections.singletonList( "package" );
+
+        MavenSession forkedSession = new MavenSession(
+            session.getContainer(), session.getSettings(),
+            session.getLocalRepository(),
+            session.getEventDispatcher(),
+            rm, goals, integrationTestsDirectory.toString()
+        );
+
+        MavenExecutionResponse response = lifecycleExecutor.execute( forkedSession,
+            rm, forkedSession.getEventDispatcher()
+        );
+
+        if ( response.isExecutionFailure() )
+        {
+            throw new MojoExecutionException(
+                "Integration test failed" );
+        }
+    }
+
+    private List collectProjects()
+        throws MojoExecutionException
+    {
+        List projects = new ArrayList();
+
+        MavenProjectBuilder projectBuilder;
+
+        try
+        {
+            projectBuilder = (MavenProjectBuilder)
+                session.getContainer().lookup( MavenProjectBuilder.ROLE );
+        }
+        catch ( ComponentLookupException e )
+        {
+            throw new MojoExecutionException( "Cannot get a MavenProjectBuilder", e );
+        }
+
+        List poms = listITPoms();
+
+            File pom = (File) i.next();
+
-                MavenProject p = buildProject( (File) i.next() );
+                MavenProject p = projectBuilder.build(
+                    pom, session.getLocalRepository(),
+                    new DefaultProfileManager( session.getContainer() ) );
-                getLog().info("Building " + p.getId() );
+                getLog().debug( "Adding project " + p.getId() );
+
+                projects.add( p );
+
-                getLog().error("Build Error", e);
+                throw new MojoExecutionException( "Error loading " + pom, e );
-    }
-    private MavenProject buildProject( File pom )
-        throws ProjectBuildingException
-    {
-        return projectBuilder.build( pom, artifactRepo, new DefaultProfileManager(
-            session.getContainer() ) );
+        return projects;
-        File [] children = projectsDir.listFiles();
+        File [] children = integrationTestsDirectory.listFiles();
-
-
-    // Duplicate code from MavenCli, slightly modified.
-
-    private ArtifactRepository createLocalRepository()
-        throws ComponentLookupException
-    {
-        ArtifactRepositoryLayout repositoryLayout = (ArtifactRepositoryLayout)
-            session.getContainer().lookup( ArtifactRepositoryLayout.ROLE, "default" );
-
-        ArtifactRepositoryFactory artifactRepositoryFactory = (ArtifactRepositoryFactory)
-            session.getContainer().lookup(
-        ArtifactRepositoryFactory.ROLE );
-
-        String url = "file://" + settings.getLocalRepository();
-        ArtifactRepository localRepository = new DefaultArtifactRepository( "local", url, repositoryLayout );
-
-        boolean snapshotPolicySet = false;
-
-        if ( settings.isOffline() )
-        {
-            artifactRepositoryFactory.setGlobalEnable( false );
-            snapshotPolicySet = true;
-        }
-
-        /* can't do this here.. :(
-        if ( !snapshotPolicySet && commandLine.hasOption( CLIManager.UPDATE_SNAPSHOTS ) )
-        {
-            artifactRepositoryFactory.setGlobalUpdatePolicy( ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS );
-        }
-
-        if ( commandLine.hasOption( CLIManager.CHECKSUM_FAILURE_POLICY ) )
-        {
-            artifactRepositoryFactory.setGlobalChecksumPolicy( ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL );
-        }
-        else if ( commandLine.hasOption( CLIManager.CHECKSUM_WARNING_POLICY ) )
-        {
-            artifactRepositoryFactory.setGlobalChecksumPolicy( ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN );
-        }
-        */
-
-        return localRepository;
-    }
-

MOV26 INS26 INS26 MOV23 INS40 UPD40 UPD40 UPD40 UPD40 INS40 INS31 INS31 INS31 INS29 UPD43 MOV83 MOV39 MOV42 MOV43 INS8 MOV83 INS39 UPD42 MOV42 INS43 INS43 UPD43 MOV43 INS8 INS83 INS43 INS42 MOV43 INS8 INS65 UPD42 UPD42 UPD42 INS54 UPD42 MOV42 INS42 UPD42 INS60 INS60 INS21 MOV60 MOV60 MOV60 INS25 INS42 INS60 INS60 MOV54 INS60 MOV24 MOV41 INS66 INS8 INS12 INS12 INS43 INS59 INS43 INS59 INS32 MOV43 UPD43 UPD43 INS32 INS8 INS43 INS59 MOV43 MOV59 INS43 INS59 MOV8 UPD42 MOV21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS40 UPD42 INS32 UPD42 UPD42 INS14 UPD42 UPD42 INS32 INS42 INS42 INS53 INS42 INS42 INS14 INS42 INS42 MOV32 INS54 INS43 UPD42 MOV42 INS53 INS43 INS42 MOV53 UPD42 MOV42 UPD43 MOV43 INS42 INS42 UPD42 MOV42 UPD45 MOV45 INS43 MOV32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS14 INS43 UPD43 INS8 INS12 UPD42 INS42 INS14 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD43 MOV43 UPD45 MOV45 INS42 UPD42 UPD42 MOV11 INS60 MOV21 INS21 MOV44 INS8 INS43 INS45 INS42 UPD45 INS42 UPD42 MOV43 INS59 INS32 INS53 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 MOV14 UPD45 INS43 INS27 INS42 INS42 INS42 INS43 INS42 INS45 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL40 DEL32 DEL11 DEL43 DEL32 DEL42 DEL40 DEL32 DEL11 DEL45 DEL32 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL83 DEL23 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL31 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31