PR: MNG-1060, 1061
corrections to the model used for the release plugin

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@293076 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
-                    getVersionResolver().resolveVersion( project );
-
-                    getScmRewriter().rewriteScmInfo( project, getTagLabel() );
-                }
-
-                for ( Iterator it = reactorProjects.iterator(); it.hasNext(); )
-                {
-                    MavenProject project = (MavenProject) it.next();
-
-                    transformPomToReleaseVersionPom( project );
+                    String projectId = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
+
+                    if ( !ArtifactUtils.isSnapshot( project.getVersion() ) )
+                    {
+                        throw new MojoExecutionException( "The project " + project.getGroupId() + ":" +
+                            project.getArtifactId() + " isn't a snapshot (" + project.getVersion() + ")." );
+                    }
+
+                    getVersionResolver().resolveVersion( project.getOriginalModel(), projectId );
+
+                    MavenProject clonedProject = new MavenProject( project );
+
+                    Model model = clonedProject.getOriginalModel();
+
+                    transformPomToReleaseVersionPom( model, projectId, project.getFile(), project.getParentArtifact(),
+                                                     project.getPluginArtifactRepositories() );
-                    getVersionResolver().incrementVersion( project );
+                    // TODO: use clone model instead... (requires beta-3)
+                    project = new MavenProject( project );
-                    getScmRewriter().restoreScmInfo( project );
-                }
+                    Model model = project.getOriginalModel();
-                for ( Iterator it = reactorProjects.iterator(); it.hasNext(); )
-                {
-                    MavenProject project = (MavenProject) it.next();
+                    String projectId = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
+                    getVersionResolver().incrementVersion( model, projectId );
-                    transformPomToSnapshotVersionPom( project );
+                    getScmRewriter().restoreScmInfo( model );
+
+                    transformPomToSnapshotVersionPom( model, project.getFile() );
-    private void transformPomToSnapshotVersionPom( MavenProject project )
+    private void transformPomToSnapshotVersionPom( Model model, File file )
-        Model model = project.getOriginalModel();
-
-        Writer writer = null;
-        File file = new File( project.getFile().getParentFile(), POM );
+        File pomFile = new File( file.getParentFile(), POM );
+        Writer writer = null;
-            writer = new FileWriter( file );
+            writer = new FileWriter( pomFile );
-            project.writeOriginalModel( writer );
+            MavenXpp3Writer pomWriter = new MavenXpp3Writer();
+
+            pomWriter.write( writer, model );
-            throw new MojoExecutionException( "Cannot write development version of pom to: " + file, e );
+            throw new MojoExecutionException( "Cannot write development version of pom to: " + pomFile, e );
-                    "Cannot prepare the release because you have local modifications : \n" + message.toString() );
+                    "Cannot prepare the release because you have local modifications : \n" + message );
-            String parentVersion = null;
+            String parentVersion;
-            throw new MojoExecutionException(
-                "Can't release project due to non released dependencies :\n" + message.toString() );
+            throw new MojoExecutionException( "Can't release project due to non released dependencies :\n" + message );
-    private void transformPomToReleaseVersionPom( MavenProject project )
+    private void transformPomToReleaseVersionPom( Model model, String projectId, File file, Artifact parentArtifact,
+                                                  List pluginArtifactRepositories )
-        if ( !ArtifactUtils.isSnapshot( project.getVersion() ) )
-        {
-            throw new MojoExecutionException( "The project " + project.getGroupId() + ":" + project.getArtifactId() +
-                " isn't a snapshot (" + project.getVersion() + ")." );
-        }
-
-        Model model = project.getOriginalModel();
+        getScmRewriter().rewriteScmInfo( model, projectId, getTagLabel() );
-            Artifact parentArtifact = project.getParentArtifact();
-
-                String version = resolveVersion( parentArtifact, "parent", project );
+                String version = resolveVersion( parentArtifact, "parent", pluginArtifactRepositories );
-        File file = new File( project.getFile().getParentFile(), POM );
+        File pomFile = new File( file.getParentFile(), POM );
-            writer = new FileWriter( file );
+            writer = new FileWriter( pomFile );
-            project.writeOriginalModel( writer );
+            MavenXpp3Writer pomWriter = new MavenXpp3Writer();
+
+            pomWriter.write( writer, model );
-            throw new MojoExecutionException( "Cannot write released version of pom to: " + file, e );
+            throw new MojoExecutionException( "Cannot write released version of pom to: " + pomFile, e );
-                releaseModel.getBuild().setPluginManagement( null );
+                releaseProject.getBuild().setPluginManagement( null );
-                    projectVersion = getVersionResolver().getResolvedVersion( releaseModel.getGroupId(),
-                                                                              releaseModel.getArtifactId() );
+                    projectVersion = getVersionResolver().getResolvedVersion( project.getGroupId(),
+                                                                              project.getArtifactId() );
-                                                                                 plugin.getArtifactId(), project,
+                                                                                 plugin.getArtifactId(), releaseProject,
-                            throw new MojoExecutionException( "Cannot resolve version for plugin: " + plugin );
+                            throw new MojoExecutionException( "Cannot resolve version for plugin: " + plugin, e );
-                List reports = releaseProject.getReportPlugins();
+                Reporting reporting = releaseModel.getReporting();
+                List reports = reporting != null ? reporting.getPlugins() : null;
-                            version = pluginVersionManager.resolvePluginVersion( plugin.getGroupId(), plugin
-                                .getArtifactId(), project, settings, localRepository, true );
+                            version = pluginVersionManager.resolveReportPluginVersion( plugin.getGroupId(),
+                                                                                       plugin.getArtifactId(),
+                                                                                       releaseProject, settings,
+                                                                                       localRepository );
-                            throw new MojoExecutionException( "Cannot resolve version for report plugin: " + plugin );
+                            throw new MojoExecutionException( "Cannot resolve version for report plugin: " + plugin,
+                                                              e );
-                List extensions = releaseProject.getBuildExtensions();
+                List extensions = build != null ? build.getExtensions() : null;
-                        String version = resolveVersion( artifact, "extension", releaseProject );
+                        String version = resolveVersion( artifact, "extension",
+                                                         releaseProject.getPluginArtifactRepositories() );
-    private String resolveVersion( Artifact artifact, String artifactUsage, MavenProject project )
+    private String resolveVersion( Artifact artifact, String artifactUsage, List pluginArtifactRepositories )
-                    artifactMetadataSource.retrieve( artifact, localRepository,
-                                                     project.getPluginArtifactRepositories() );
+                    artifactMetadataSource.retrieve( artifact, localRepository, pluginArtifactRepositories );
+        ScmHelper scm = getScm( basedir );
+
+        String tag = scm.getTag();
+
+        // No tag here - we suppose user works on correct branch
+        scm.setTag( null );
+
-            ScmHelper scm = getScm( basedir );
-
-            String tag = scm.getTag();
-
-            // No tag here - we suppose user works on correct branch
-            scm.setTag( null );
-
-
-            scm.setTag( tag );
-        catch ( Exception e )
+        catch ( ScmException e )
+
+        scm.setTag( tag );
-            catch ( Exception e )
+            catch ( IOException e )
-            catch ( Exception e )
+            catch ( ScmException e )

INS26 INS40 INS44 MOV60 INS44 INS44 INS44 INS44 MOV8 UPD43 UPD42 INS43 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 MOV43 INS42 UPD43 UPD42 MOV21 UPD43 UPD42 INS54 UPD42 INS42 MOV43 INS42 INS42 UPD42 MOV43 UPD42 INS8 INS12 UPD42 INS60 INS42 UPD42 UPD42 INS60 MOV21 INS44 MOV8 INS8 MOV43 INS43 INS59 MOV43 INS43 INS59 INS43 INS42 INS12 MOV12 INS24 MOV54 INS24 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS60 INS42 INS44 MOV8 MOV58 MOV32 INS8 MOV58 MOV32 INS8 UPD42 INS43 INS42 INS43 UPD42 INS43 INS43 INS59 INS43 INS42 UPD43 MOV60 MOV21 INS60 MOV25 INS21 MOV60 INS60 MOV21 MOV60 INS21 MOV60 MOV60 MOV21 MOV21 MOV21 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS32 INS16 INS16 INS42 UPD42 INS43 INS59 INS32 INS43 INS59 INS7 UPD43 INS42 UPD42 UPD42 INS42 INS42 INS27 INS32 INS33 INS27 INS32 INS33 UPD42 MOV42 INS42 INS32 MOV32 INS42 INS32 INS42 UPD42 INS14 INS42 INS42 INS32 INS42 INS42 MOV32 MOV32 MOV32 INS42 INS14 UPD42 UPD42 INS32 INS42 UPD42 UPD42 INS42 MOV32 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 MOV42 INS42 UPD42 INS42 UPD42 UPD42 INS42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL43 DEL42 DEL32 DEL59 DEL58 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL24 DEL8 DEL42 DEL43 DEL32 DEL11 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL32 DEL8 DEL24 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL32 DEL9 DEL32 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12