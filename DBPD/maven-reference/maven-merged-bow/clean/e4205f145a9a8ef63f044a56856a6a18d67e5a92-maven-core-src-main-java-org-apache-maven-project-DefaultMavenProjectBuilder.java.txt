o starting to collapse the methods in the project builder
o rebuilder the maven metadata source 

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@772728 13f79535-47bb-0310-9956-ffa450edef68

-import java.text.SimpleDateFormat;
-import org.apache.maven.project.artifact.InvalidDependencyVersionException;
-import org.apache.maven.repository.VersionNotFoundException;
-        }   
-        catch(IOException e)
-        {
-        	throw new ProjectBuildingException( "", "Failed to activate pom profiles.");	
-            domainModel = ProcessorContext.mergeProfilesIntoModel( externalProfiles, domainModel );
-    
-            
+            domainModel = ProcessorContext.mergeProfilesIntoModel( externalProfiles, domainModel );                
-
-    private static void printPlugin(Plugin plugin, String tag)
-    {
-    	System.out.println(tag + ":" + plugin);
-    	System.out.println("CONFIG:" + plugin.getConfiguration());
-    	for(PluginExecution pe : plugin.getExecutions())
-    	{
-    		System.out.println("PE:" + pe.getConfiguration());
-    	}
-    }
-    public MavenProject buildFromRepository(Artifact artifact, ProjectBuilderConfiguration configuration )
-    	throws ProjectBuildingException
+    public MavenProject buildFromRepository( Artifact artifact, ProjectBuilderConfiguration configuration )
+        throws ProjectBuildingException
-     
-        
-        if(configuration.getRemoteRepositories() == null)
-        {
-        	throw new IllegalArgumentException("configuration.getRemoteRepositories(): null");
-        }
-        
+
-        
+
-                
+
-        try 
-        {
-			domainModel = build( "unknown", artifact.getFile(), configuration );
-		} 
-        catch (IOException e) 
-        {
-			throw new ProjectBuildingException(artifact.getId(), "Error reading project artifact.", e);
-		}
-        
-        List<Profile> projectProfiles;
-	    Properties props = new Properties();
-	    props.putAll(configuration.getExecutionProperties());
-	   // props.putAll(configuration.getUserProperties());
-	    
-        	projectProfiles = DefaultProfileManager.getActiveProfilesFrom(configuration.getGlobalProfileManager(), props, domainModel.getModel() );
+            domainModel = build( "unknown", artifact.getFile(), configuration );
+        }
+        catch ( IOException e )
+        {
+            throw new ProjectBuildingException( artifact.getId(), "Error reading project artifact.", e );
+        }
+
+        List<Profile> projectProfiles;
+        Properties props = new Properties();
+        props.putAll( configuration.getExecutionProperties() );
+        // props.putAll(configuration.getUserProperties());
+
+        try
+        {
+            projectProfiles = DefaultProfileManager.getActiveProfilesFrom( configuration.getGlobalProfileManager(), props, domainModel.getModel() );
-            throw new ProjectBuildingException( "", "Failed to activate pom profiles.");
-        }   
-        catch(IOException e)
-        {
-        	throw new ProjectBuildingException( "", "Failed to activate pom profiles.");	
+            throw new ProjectBuildingException( "", "Failed to activate pom profiles." );
-        
+
-            for(Profile p : projectProfiles)
-    		{
-    			logger.debug("Merging profile into model (buildFromRepository): Model = " + domainModel.getId() + ", Profile = " + p.getId() );
-    		}
-    		           	
+            for ( Profile p : projectProfiles )
+            {
+                logger.debug( "Merging profile into model (buildFromRepository): Model = " + domainModel.getId() + ", Profile = " + p.getId() );
+            }
+
-            throw new ProjectBuildingException("", "");
+            throw new ProjectBuildingException( "", "" );
-       
-        
-    		try {
-    			Model model = ProcessorContext.processManagementNodes(interpolateDomainModel( domainModel, configuration, artifact.getFile() ));
-    			project = this.fromDomainModelToMavenProject(model, domainModel.getParentFile(), configuration, artifact.getFile());
-    		} catch (IOException e) {
-    			throw new ProjectBuildingException("", "");
-    		}
+
+        try
+        {
+            Model model = ProcessorContext.processManagementNodes( interpolateDomainModel( domainModel, configuration, artifact.getFile() ) );
+            project = this.fromDomainModelToMavenProject( model, domainModel.getParentFile(), configuration, artifact.getFile() );
+        }
+        catch ( IOException e )
+        {
+            throw new ProjectBuildingException( "", "" );
+        }
-        return project;   	
+        return project;
-
-        try
-        {
-            project.setDependencyArtifacts( repositorySystem.createArtifacts( project.getDependencies(), null, null, project ) );
-        }
-        catch ( VersionNotFoundException e )
-        {
-            InvalidDependencyVersionException ee = new InvalidDependencyVersionException( e.getProjectId(), e.getDependency(), e.getPomFile(), e.getCauseException() );
-            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ), "Unable to build project due to an invalid dependency version: " + e.getMessage(),
-                                                pomFile, ee );
-        }
-
-            .setArtifact( pomArtifact ).setArtifactDependencies( project.getDependencyArtifacts() )
+            .setArtifact( pomArtifact )
+            .setArtifactDependencies( project.getDependencyArtifacts() )
-        
-        
-        if(request.getRemoteRepostories() == null)
-        {
-            request.setRemoteRepostories( new ArrayList<ArtifactRepository>() );
-        }
-
+               
-            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ), "Unable to build project due to an invalid dependency version: " + e.getMessage(),
-                                                pomFile, e );
+            throw new ProjectBuildingException( safeVersionlessKey( project.getGroupId(), project.getArtifactId() ), "Unable to build project due to an invalid dependency version: " + e.getMessage(), pomFile, e );
-        Model model;
-        try
-        {
-            model = domainModel.getModel();
-        }
-        catch ( IOException e )
-        {
-            throw new ProjectBuildingException( "", e.getMessage() );
-        }
+        Model model = domainModel.getModel();
-        Properties props = new Properties( config.getExecutionProperties() );
-
-            model = interpolator.interpolateModel( model, props, domainModel.getProjectDirectory() );
+            model = interpolator.interpolateModel( model, config.getExecutionProperties(), domainModel.getProjectDirectory() );

MOV32 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL45 DEL14 DEL53 DEL8 DEL12 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL45 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL33 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42