merge from branch maven-2.0.x, up to rev 365776


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@365790 13f79535-47bb-0310-9956-ffa450edef68

-        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), forkEntryPoints, session, project );
+        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), forkEntryPoints, session,
+                      project );
-    private void forkLifecycle( MojoDescriptor mojoDescriptor, Stack ancestorLifecycleForkers, MavenSession session, MavenProject project )
+    private void forkLifecycle( MojoDescriptor mojoDescriptor, Stack ancestorLifecycleForkers, MavenSession session,
+                                MavenProject project )
-    private void forkProjectLifecycle( MojoDescriptor mojoDescriptor, Stack forkEntryPoints, MavenSession session, MavenProject project )
+    private void forkProjectLifecycle( MojoDescriptor mojoDescriptor, Stack forkEntryPoints, MavenSession session,
+                                       MavenProject project )
-                        Execution e = (Execution) j.next();
+                        Execution exec = (Execution) j.next();
-                        for ( Iterator k = e.getGoals().iterator(); k.hasNext(); )
+                        for ( Iterator k = exec.getGoals().iterator(); k.hasNext(); )
-                                String externalGoal = s[2];
-                                lifecycleGoal = externalGoal;
+                                lifecycleGoal = s[2];
-                                try
+                                Plugin plugin = new Plugin();
+                                plugin.setGroupId( groupId );
+                                plugin.setArtifactId( artifactId );
+                                lifecyclePluginDescriptor = verifyPlugin( plugin, project, session.getSettings(),
+                                                                          session.getLocalRepository() );
+                                if ( lifecyclePluginDescriptor == null )
-                                    lifecyclePluginDescriptor = pluginManager.getPluginDescriptor( groupId,
-                                                                                                   artifactId,
-                                                                                                   project,
-                                                                                                   session.getSettings(),
-                                                                                                   session.getLocalRepository() );
-                                }
-                                catch ( Exception ex )
-                                {
-                                    throw new LifecycleExecutionException( ex );
+                                    throw new LifecycleExecutionException(
+                                        "Unable to find plugin " + groupId + ":" + artifactId );
-                            MojoExecution mojoExecution = new MojoExecution( desc, (Xpp3Dom) e.getConfiguration() );
-                            addToLifecycleMappings( lifecycleMappings, phase.getId(), mojoExecution, session.getSettings() );
+                            MojoExecution mojoExecution = new MojoExecution( desc, (Xpp3Dom) exec.getConfiguration() );
+                            addToLifecycleMappings( lifecycleMappings, phase.getId(), mojoExecution,
+                                                    session.getSettings() );
-            executeGoalWithLifecycle( targetPhase, forkEntryPoints, session, lifecycleMappings, executionProject, lifecycle );
+            executeGoalWithLifecycle( targetPhase, forkEntryPoints, session, lifecycleMappings, executionProject,
+                                      lifecycle );
-            executeGoals( Collections.singletonList( new MojoExecution( desc ) ), forkEntryPoints, session, executionProject );
+            executeGoals( Collections.singletonList( new MojoExecution( desc ) ), forkEntryPoints, session,
+                          executionProject );
-                    getLogger().warn(
-                                      "Removing: " + mojoDescriptor.getGoal()
-                                          + " from forked lifecycle, to prevent recursive invocation." );
+                    getLogger().warn( "Removing: " + mojoDescriptor.getGoal() +
+                        " from forked lifecycle, to prevent recursive invocation." );
-        PluginDescriptor pluginDescriptor;
-        pluginDescriptor = verifyPlugin( plugin, project, session.getSettings(), session.getLocalRepository() );
+        PluginDescriptor pluginDescriptor =
+            verifyPlugin( plugin, project, session.getSettings(), session.getLocalRepository() );
-    private void addToLifecycleMappings( Map lifecycleMappings, String phase, MojoExecution mojoExecution, Settings settings )
+    private void addToLifecycleMappings( Map lifecycleMappings, String phase, MojoExecution mojoExecution,
+                                         Settings settings )

MOV60 MOV32 UPD42 INS21 INS21 MOV21 INS25 UPD42 INS7 UPD43 INS32 INS32 INS27 INS8 INS42 MOV2 UPD42 UPD42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 MOV53 INS43 UPD42 UPD42 UPD42 INS42 INS27 INS45 INS42 INS45 INS42 DEL42 DEL42 DEL7 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL7 DEL21