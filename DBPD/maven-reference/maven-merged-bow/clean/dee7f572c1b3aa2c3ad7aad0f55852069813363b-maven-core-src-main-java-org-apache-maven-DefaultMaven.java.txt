Adding support for pre-scanning POMs for build extensions. NOTE: Plugins-as-extensions is not yet supported in this way.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@497993 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.extension.ExtensionManager;
+import org.apache.maven.model.Build;
+import org.apache.maven.model.Extension;
+import org.apache.maven.model.Model;
+import org.apache.maven.project.build.model.ModelLineage;
+import org.apache.maven.project.build.model.ModelLineageBuilder;
+import org.apache.maven.project.build.model.ModelLineageIterator;
+import org.codehaus.plexus.PlexusContainerException;
+import java.util.HashMap;
+import java.util.Map;
+    protected ExtensionManager extensionManager;
+    
+    protected ModelLineageBuilder modelLineageBuilder;
+    
+        scanProjectsForExtensions( files, request, globalProfileManager );
+        
+    // TODO: We should probably do this discovery just-in-time, if we can move to building project
+    // instances just-in-time.
+    private void scanProjectsForExtensions( List files, MavenExecutionRequest request,
+                                            ProfileManager globalProfileManager )
+        throws MavenExecutionException
+    {
+        MavenProject superProject;
+        try
+        {
+            superProject = projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(),
+                                                                                    globalProfileManager );
+        }
+        catch ( ProjectBuildingException e )
+        {
+            throw new MavenExecutionException( "Error building super-POM for retrieving the default remote repository list: " + e.getMessage(), e );
+        }
+        
+        List originalRemoteRepositories = superProject.getRemoteArtifactRepositories();
+        Map cache = new HashMap();
+        
+        for ( Iterator it = files.iterator(); it.hasNext(); )
+        {
+            File pom = (File) it.next();
+            
+            ModelLineage lineage;
+            try
+            {
+                lineage = modelLineageBuilder.buildModelLineage( pom, request.getLocalRepository(), originalRemoteRepositories, globalProfileManager, cache );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new MavenExecutionException( "Error building model lineage in order to pre-scan for extensions: " + e.getMessage(), e );
+            }
+            
+            for ( ModelLineageIterator lineageIterator = lineage.lineageIterator(); lineageIterator.hasNext(); )
+            {
+                Model model = (Model) lineageIterator.next();
+                
+                Build build = model.getBuild();
+                
+                if ( build != null )
+                {
+                    List extensions = build.getExtensions();
+                    
+                    if ( extensions != null && !extensions.isEmpty() )
+                    {
+                        List remoteRepositories = lineageIterator.getArtifactRepositories();
+                        
+                        // thankfully, we don't have to deal with dependencyManagement here, yet.
+                        // TODO Revisit if/when extensions are made to use the info in dependencyManagement
+                        for ( Iterator extensionIterator = extensions.iterator(); extensionIterator.hasNext(); )
+                        {
+                            Extension extension = (Extension) extensionIterator.next();
+                            
+                            try
+                            {
+                                extensionManager.addExtension( extension, model, remoteRepositories, request.getLocalRepository() );
+                            }
+                            catch ( ArtifactResolutionException e )
+                            {
+                                throw new MavenExecutionException( "Cannot resolve pre-scanned extension artifact: "
+                                    + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(),
+                                                                   e );
+                            }
+                            catch ( ArtifactNotFoundException e )
+                            {
+                                throw new MavenExecutionException( "Cannot find pre-scanned extension artifact: "
+                                                                   + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(),
+                                                                                                  e );
+                            }
+                            catch ( PlexusContainerException e )
+                            {
+                                throw new MavenExecutionException( "Failed to add pre-scanned extension: "
+                                                                   + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(),
+                                                                                                  e );
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        
+        extensionManager.registerWagons();
+    }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS60 INS60 INS24 INS21 INS32 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS54 INS24 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS58 INS32 INS8 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS21 INS44 INS8 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS43 INS27 INS42 INS43 INS32 INS7 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS38 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS54 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS12 INS12 INS42 INS42 INS42 INS42 INS11 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS43 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42