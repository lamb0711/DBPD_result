refactoring towards similar pattern of artifact metadata

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@264967 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.IOUtil;
-import java.io.FileInputStream;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
-/**
- * @todo try to crop all, particularly plugin stuff
- * @todo check caching?
- */
-    // only resolve repository metadata once per session...
-    private Map cachedMetadata = new HashMap();
+    /**
+     * @todo very primitve. Probably we can cache artifacts themselves in a central location, as well as reset the flag over time in a long running process.
+     */
+    private Set cachedMetadata = new HashSet();
-    public void resolveLocally( RepositoryMetadata metadata, ArtifactRepository local )
+    public void resolve( RepositoryMetadata metadata, List repositories, ArtifactRepository local )
-        resolve( metadata, null, local );
-    }
-
-    public void resolve( RepositoryMetadata metadata, ArtifactRepository remote, ArtifactRepository local )
-        throws RepositoryMetadataManagementException
-    {
-        File metadataFile = (File) cachedMetadata.get( metadata.getRepositoryPath() );
-
-        if ( metadataFile == null )
+        boolean alreadyResolved = alreadyResolved( metadata );
+        if ( !alreadyResolved )
-            metadataFile = constructLocalRepositoryFile( metadata, local );
-
-            if ( !metadataFile.exists() && remote != null )
+            for ( Iterator i = repositories.iterator(); i.hasNext(); )
-                try
+                ArtifactRepository repository = (ArtifactRepository) i.next();
+
+                // TODO: replace with a more general repository update mechanism like artifact metadata uses
+                // (Actually, this should now supersede artifact metadata...)
+                File metadataFile = new File( local.getBasedir(), local.pathOfRepositoryMetadata( metadata ) );
+
+                if ( !metadataFile.exists() )
-                        wagonManager.getRepositoryMetadata( metadata, remote, metadataFile );
+                        try
+                        {
+                            wagonManager.getRepositoryMetadata( metadata, repository, metadataFile );
+                        }
+                        catch ( ResourceDoesNotExistException e )
+                        {
+                            if ( !metadataFile.exists() )
+                            {
+                                throw new RepositoryMetadataManagementException( metadata,
+                                                                                 "Remote repository metadata not found.",
+                                                                                 e );
+                            }
+                            else
+                            {
+                                String message = "Cannot find " + metadata +
+                                    " in remote repository - Using local copy.";
+
+                                getLogger().info( message );
+
+                                getLogger().debug( message, e );
+                            }
+                        }
-                    catch ( ResourceDoesNotExistException e )
+                    catch ( TransferFailedException e )
-                        if ( !metadataFile.exists() )
-                        {
-                            throw new RepositoryMetadataManagementException( metadata,
-                                                                             "Remote repository metadata not found.",
-                                                                             e );
-                        }
-                        else
-                        {
-                            String message = "Cannot find " + metadata + " in remote repository - Using local copy.";
-
-                            getLogger().info( message );
-
-                            getLogger().debug( message, e );
-                        }
+                        throw new RepositoryMetadataManagementException( metadata,
+                                                                         "Failed to download repository metadata.", e );
-                catch ( TransferFailedException e )
+                else
-                    throw new RepositoryMetadataManagementException( metadata,
-                                                                     "Failed to download repository metadata.", e );
-                }
-            }
-            else
-            {
-                getLogger().info( "Using local copy of " + metadata + " from: " + metadataFile );
-            }
-
-            if ( metadataFile.exists() )
-            {
-                if ( !verifyFileNotEmpty( metadataFile ) )
-                {
-                    throw new InvalidRepositoryMetadataException( metadata, "Metadata located in file: " +
-                        metadataFile + " appears to be corrupt (file is empty). DOWNLOAD FAILED." );
+                    getLogger().info( "Using local copy of " + metadata + " from: " + metadataFile );
-                cachedMetadata.put( metadata.getRepositoryPath(), metadataFile );
+                cachedMetadata.add( metadata.getRepositoryPath() );
-    private boolean verifyFileNotEmpty( File metadataFile )
-    {
-        InputStream verifyInputStream = null;
-
-        try
-        {
-            verifyInputStream = new FileInputStream( metadataFile );
-
-            return verifyInputStream.available() > 0;
-        }
-        catch ( IOException e )
-        {
-            return false;
-        }
-        finally
-        {
-            IOUtil.close( verifyInputStream );
-        }
-    }
-
-        File metadataFile = constructLocalRepositoryFile( metadata, local );
+        File metadataFile = new File( local.getBasedir(), local.pathOfRepositoryMetadata( metadata ) );
-    public void purgeLocalCopy( RepositoryMetadata metadata, ArtifactRepository local )
-        throws RepositoryMetadataManagementException
+    private boolean alreadyResolved( RepositoryMetadata metadata )
-        File metadataFile = constructLocalRepositoryFile( metadata, local );
-
-        if ( metadataFile.exists() )
-        {
-            if ( !metadataFile.delete() )
-            {
-                throw new RepositoryMetadataManagementException( metadata,
-                                                                 "Failed to purge local copy from: " + metadataFile );
-            }
-        }
+        return cachedMetadata.contains( metadata.getRepositoryPath() );
-
-    private static File constructLocalRepositoryFile( RepositoryMetadata metadata, ArtifactRepository local )
-    {
-        return new File( local.getBasedir(), local.pathOfRepositoryMetadata( metadata ) );
-    }
-

MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 INS29 UPD43 INS42 MOV44 INS8 INS65 UPD42 INS43 UPD42 MOV41 INS66 UPD43 INS42 INS39 INS59 INS38 INS8 MOV43 INS59 MOV32 UPD42 INS42 INS32 INS42 INS24 INS42 MOV14 UPD42 INS42 INS42 INS58 INS32 MOV8 INS43 INS59 INS42 INS42 INS60 INS60 MOV21 MOV42 UPD42 MOV42 INS42 INS42 INS32 MOV43 INS59 MOV43 INS59 MOV38 INS42 INS42 INS42 INS11 INS42 INS14 UPD42 INS43 INS32 INS43 INS32 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL11 DEL59 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL43 DEL42 DEL32 DEL59 DEL9 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL34 DEL27 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL31