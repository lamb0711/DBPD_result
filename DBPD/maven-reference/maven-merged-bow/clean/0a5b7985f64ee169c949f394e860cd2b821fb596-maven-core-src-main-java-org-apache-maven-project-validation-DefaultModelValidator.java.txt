[MNG-4173] Remove automatic version resolution for POM plugins

o Strengthended model validator to bark with a nice error message before down stream code bubbles up with ugly exceptions. The new validation step applies only to local builds and not to dependency resolution via the metadata source to accept existing POMs

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@778426 13f79535-47bb-0310-9956-ffa450edef68

-        Build build = model.getBuild();
-        if ( build != null )
+        if ( !lenient )
-            for ( Plugin p : build.getPlugins() )
+            Build build = model.getBuild();
+            if ( build != null )
-                validateStringNotEmpty( "build.plugins.plugin.artifactId", result, p.getArtifactId() );
+                for ( Plugin p : build.getPlugins() )
+                {
+                    validateStringNotEmpty( "build.plugins.plugin.artifactId", result, p.getArtifactId() );
-                validateStringNotEmpty( "build.plugins.plugin.groupId", result, p.getGroupId() );
-                
-                /*
-                 * FIXME: Enforce the existence of a version, no more guessing but reproducibility. We can't do this
-                 * right now as it would affect dependency resolution via the metadata source. As a prerequisite, we
-                 * need to tell the validator which level of strictness we want or alternatively disable validation
-                 * completely for the metadata source.
-                 */
+                    validateStringNotEmpty( "build.plugins.plugin.groupId", result, p.getGroupId() );
+
+                    validateStringNotEmpty( "build.plugins.plugin.version", result, p.getVersion(), p.getKey() );
+                }
+
+                for ( Resource r : build.getResources() )
+                {
+                    validateStringNotEmpty( "build.resources.resource.directory", result, r.getDirectory() );
+                }
+
+                for ( Resource r : build.getTestResources() )
+                {
+                    validateStringNotEmpty( "build.testResources.testResource.directory", result, r.getDirectory() );
+                }
-            for ( Resource r : build.getResources() )
+            Reporting reporting = model.getReporting();
+            if ( reporting != null )
-                validateStringNotEmpty( "build.resources.resource.directory", result, r.getDirectory() );
+                for ( ReportPlugin p : reporting.getPlugins() )
+                {
+                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", result, p.getArtifactId() );
+
+                    validateStringNotEmpty( "reporting.plugins.plugin.groupId", result, p.getGroupId() );
+
+                    validateStringNotEmpty( "reporting.plugins.plugin.version", result, p.getVersion(), p.getKey() );
+                }
-            for ( Resource r : build.getTestResources() )
-            {
-                validateStringNotEmpty( "build.testResources.testResource.directory", result, r.getDirectory() );
-            }
+            validateRepositories( result, model.getRepositories(), "repositories.repository" );
+
+            // validateRepositories( result, model.getPluginRepositories(), "pluginRepositories.pluginRepository" );
+
+            forcePluginExecutionIdCollision( model, result );
-        Reporting reporting = model.getReporting();
-        if ( reporting != null )
-        {
-            for ( ReportPlugin p : reporting.getPlugins())
-            {
-                validateStringNotEmpty( "reporting.plugins.plugin.artifactId", result, p.getArtifactId() );
-
-                validateStringNotEmpty( "reporting.plugins.plugin.groupId", result, p.getGroupId() );
-            }
-        }
-
-        validateRepositories( result, model.getRepositories(), "repositories.repository" );
-
-//        validateRepositories( result, model.getPluginRepositories(), "pluginRepositories.pluginRepository" );
-
-        forcePluginExecutionIdCollision( model, result );
-

INS25 INS38 INS8 INS42 MOV60 MOV25 MOV60 MOV25 MOV21 MOV21 INS21 INS21 INS32 INS32 INS42 INS45 INS42 INS32 INS32 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42