o Refactored settings validation to support more extensive problem descriptor

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@928934 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import org.apache.maven.settings.validation.SettingsValidationResult;
-        List<SettingsProblem> problems = new ArrayList<SettingsProblem>();
+        DefaultSettingsProblemCollector problems = new DefaultSettingsProblemCollector( null );
+        problems.setSource( "" );
+
-        if ( hasErrors( problems ) )
+        if ( hasErrors( problems.getProblems() ) )
-            throw new SettingsBuildingException( problems );
+            throw new SettingsBuildingException( problems.getProblems() );
-        return new DefaultSettingsBuildingResult( userSettings, problems );
+        return new DefaultSettingsBuildingResult( userSettings, problems.getProblems() );
-    private Settings readSettings( File settingsFile, SettingsBuildingRequest request, List<SettingsProblem> problems )
+    private Settings readSettings( File settingsFile, SettingsBuildingRequest request,
+                                   DefaultSettingsProblemCollector problems )
+        problems.setSource( settingsFile.getAbsolutePath() );
+
-                problems.add( new DefaultSettingsProblem( e.getMessage(), SettingsProblem.Severity.WARNING,
-                                                          settingsFile.getAbsolutePath(), e.getLineNumber(),
-                                                          e.getColumnNumber(), e ) );
+                problems.add( SettingsProblem.Severity.WARNING, e.getMessage(), e.getLineNumber(), e.getColumnNumber(),
+                              e );
-            problems.add( new DefaultSettingsProblem( "Non-parseable settings " + settingsFile + ": " + e.getMessage(),
-                                                      SettingsProblem.Severity.FATAL, settingsFile.getAbsolutePath(),
-                                                      e.getLineNumber(), e.getColumnNumber(), e ) );
+            problems.add( SettingsProblem.Severity.FATAL, "Non-parseable settings " + settingsFile + ": "
+                + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e );
-            problems.add( new DefaultSettingsProblem( "Non-readable settings " + settingsFile + ": " + e.getMessage(),
-                                                      SettingsProblem.Severity.FATAL, settingsFile.getAbsolutePath(),
-                                                      -1, -1, e ) );
+            problems.add( SettingsProblem.Severity.FATAL, "Non-readable settings " + settingsFile + ": "
+                + e.getMessage(), -1, -1, e );
-        SettingsValidationResult result = settingsValidator.validate( settings );
-
-        for ( String error : result.getMessages() )
-        {
-            problems.add( new DefaultSettingsProblem( error, SettingsProblem.Severity.ERROR,
-                                                      settingsFile.getAbsolutePath(), -1, -1, null ) );
-        }
+        settingsValidator.validate( settings, problems );
-    private Settings interpolate( Settings settings, SettingsBuildingRequest request, List<SettingsProblem> problems )
+    private Settings interpolate( Settings settings, SettingsBuildingRequest request, SettingsProblemCollector problems )
-            problems.add( new DefaultSettingsProblem( "Failed to use environment variables for interpolation: "
-                + e.getMessage(), SettingsProblem.Severity.WARNING, "", -1, -1, e ) );
+            problems.add( SettingsProblem.Severity.WARNING, "Failed to use environment variables for interpolation: "
+                + e.getMessage(), -1, -1, e );
-            problems.add( new DefaultSettingsProblem( "Failed to interpolate settings: " + e.getMessage(),
-                                                      SettingsProblem.Severity.ERROR, "", -1, -1, e ) );
+            problems.add( SettingsProblem.Severity.ERROR, "Failed to interpolate settings: " + e.getMessage(), -1, -1,
+                          e );
-            problems.add( new DefaultSettingsProblem( "Failed to interpolate settings: " + e.getMessage(),
-                                                      SettingsProblem.Severity.ERROR, "", -1, -1, e ) );
+            problems.add( SettingsProblem.Severity.ERROR, "Failed to interpolate settings: " + e.getMessage(), -1, -1,
+                          e );

INS21 INS43 INS21 MOV21 INS43 INS43 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS12 MOV12 UPD42 MOV42 INS42 INS42 INS45 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV44 INS8 MOV44 INS43 INS33 MOV42 INS42 INS42 INS42 INS21 MOV41 UPD42 MOV42 INS32 INS32 INS42 INS42 INS40 MOV27 MOV32 MOV32 INS42 INS40 MOV27 MOV38 MOV38 INS42 INS40 MOV27 MOV38 MOV38 INS42 INS42 INS42 INS40 MOV27 MOV38 MOV38 INS42 INS40 MOV27 MOV38 MOV38 INS42 INS40 MOV32 MOV32 MOV32 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL42 DEL42 DEL43 DEL42 DEL40 DEL32 DEL33 DEL14 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL40 DEL45 DEL42 DEL14 DEL42 DEL43 DEL40 DEL45 DEL42 DEL14 DEL42 DEL42 DEL42 DEL43 DEL40 DEL45 DEL34 DEL38 DEL34 DEL38 DEL42 DEL14 DEL32 DEL21 DEL8 DEL12