Collapased Transformers into one. Extracted out some rules. Removed some references to Maven model in DomainModels to generalize. Removed Plugin mixins, which are no longer needed. Extension loading appears to be broken from refactoring. Need to fix this.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@745712 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.builder.rules.ExecutionRule;
-import org.apache.maven.project.builder.rules.DependencyRule;
+import org.apache.maven.project.builder.rules.*;
+import org.apache.maven.project.builder.factories.PluginExecutionIdModelContainerFactory;
+import org.apache.maven.project.builder.factories.AlwaysJoinModelContainerFactory;
+import org.apache.maven.project.builder.factories.ArtifactModelContainerFactory;
+import org.apache.maven.project.builder.factories.IdModelContainerFactory;
-                //Join Duplicate Exclusions Rule (MNG-4010)
+                //Join Duplicate Exclusions TransformerRule (MNG-4010)
-        //Rule: Do not join plugin executions without ids
+        //TransformerRule: Do not join plugin executions without ids
-        //Execution Rule - extension for this needs to be pushed into model-builder
+        //Execution TransformerRule - extension for this needs to be pushed into model-builder
+
+    List<TransformerRule> transformerRules = Arrays.asList(new MissingVersionTransformerRule(),
+            new DefaultDependencyScopeTransformerRule());
+
+    List<TransformerRemovalRule> transformerRemovalRules = Arrays.asList(new DefaultExecutionIdTransformerRule(),
+            new ModulesNotInheritedTransformerRule());
-            
-            //Default Dependency Scope Rule
-            if(domainModelIndex == 0)
-            {
-                ModelDataSource s = new DefaultModelDataSource( tmp, Arrays.asList( new ArtifactModelContainerFactory()) );
-                for(ModelContainer mc : s.queryFor(ProjectUri.Dependencies.Dependency.xUri))
-                {
-                    boolean containsScope = false;
-                    for(ModelProperty mp :mc.getProperties())
-                    {
-                        if(mp.getUri().equals(ProjectUri.Dependencies.Dependency.scope)) {
-                            containsScope = true;
-                            break;
-                        }
-                    }
-                    if(!containsScope)
-                    {
-                        tmp.add(tmp.indexOf(mc.getProperties().get(0)) + 1, new ModelProperty(ProjectUri.Dependencies.Dependency.scope, "compile"));
-                    }
-                }
-            }
-           
-            //Remove Default Executions IDS (mng-3965)
-            List<ModelProperty> replace = new ArrayList<ModelProperty>();
-            for(ModelProperty mp : tmp)
+            for(TransformerRule rule : transformerRules)
-                if(mp.getUri().equals(ProjectUri.Build.Plugins.Plugin.Executions.Execution.id)
-                        && mp.getResolvedValue() != null && mp.getResolvedValue().equals("default-execution-id")) {
-                    replace.add(mp);
-                }
+                rule.execute(tmp, domainModelIndex);
-            tmp.removeAll(replace);
-                
-            //Missing Version Rule
-            if ( getPropertyFor( ProjectUri.version, tmp ) == null )
+            for(TransformerRemovalRule rule : transformerRemovalRules)
-                ModelProperty parentVersion = getPropertyFor( ProjectUri.Parent.version, tmp );
-                if ( parentVersion != null )
-                {
-                    tmp.add( new ModelProperty( ProjectUri.version, parentVersion.getResolvedValue() ) );
-                }
+                tmp.removeAll(rule.executeWithReturnPropertiesToRemove(tmp, domainModelIndex));
-            //Modules Not Inherited Rule
-            if ( domainModelIndex > 0 )
-            {
-                ModelProperty modulesProperty = getPropertyFor( ProjectUri.Modules.xUri, tmp );
-                if ( modulesProperty != null )
-                {
-                    tmp.remove( modulesProperty );
-                    tmp.removeAll( getPropertiesFor( ProjectUri.Modules.module, tmp ) );
-                }
-            }
-            //Missing groupId, use parent one Rule
+            //Missing groupId, use parent one TransformerRule
+            
-            // Project URL Rule
+            // Project URL TransformerRule
-            // Site Rule
+            // Site TransformerRule
-            // SCM Rule
+            // SCM TransformerRule
-            // SCM Connection Rule
+            // SCM Connection TransformerRule
-            // SCM Developer Rule
+            // SCM Developer TransformerRule
-            // Project Name Rule: not inherited
-            // Packaging Rule: not inherited
-            // Profiles Rule: not inherited
-            // Parent.relativePath Rule: not inherited
-            // Prerequisites Rule: not inherited
-            // DistributionManagent.Relocation Rule: not inherited
+            // Project Name TransformerRule: not inherited
+            // Packaging TransformerRule: not inherited
+            // Profiles TransformerRule: not inherited
+            // Parent.relativePath TransformerRule: not inherited
+            // Prerequisites TransformerRule: not inherited
+            // DistributionManagent.Relocation TransformerRule: not inherited
-            // Remove Plugin Repository Inheritance Rule
-            // License Rule: only inherited if not specified in child
-            // Organization Rule: only inherited if not specified in child
-            // Developers Rule: only inherited if not specified in child
-            // Contributors Rule: only inherited if not specified in child
-            // Mailing Lists Rule: only inherited if not specified in child
-            // Build Resources Rule: only inherited if not specified in child
-            // Build Test Resources Rule: only inherited if not specified in child
-            // CI Management Rule: only inherited if not specified in child
-            // Issue Management Rule: only inherited if not specified in child
-            // Distribution Management Repository Rule: only inherited if not specified in child
-            // Distribution Management Snapshot Repository Rule: only inherited if not specified in child
-            // Distribution Management Site Rule: only inherited if not specified in child
+            // Remove Plugin Repository Inheritance TransformerRule
+            // License TransformerRule: only inherited if not specified in child
+            // Organization TransformerRule: only inherited if not specified in child
+            // Developers TransformerRule: only inherited if not specified in child
+            // Contributors TransformerRule: only inherited if not specified in child
+            // Mailing Lists TransformerRule: only inherited if not specified in child
+            // Build Resources TransformerRule: only inherited if not specified in child
+            // Build Test Resources TransformerRule: only inherited if not specified in child
+            // CI Management TransformerRule: only inherited if not specified in child
+            // Issue Management TransformerRule: only inherited if not specified in child
+            // Distribution Management Repository TransformerRule: only inherited if not specified in child
+            // Distribution Management Snapshot Repository TransformerRule: only inherited if not specified in child
+            // Distribution Management Site TransformerRule: only inherited if not specified in child
-        //Rule: Remove duplicate filters
+        //TransformerRule: Remove duplicate filters
-        //Rule: Build plugin config overrides reporting plugin config
+        //TransformerRule: Build plugin config overrides reporting plugin config
-    public void interpolateModelProperties(List<ModelProperty> modelProperties,
-                                           List<InterpolatorProperty> interpolatorProperties,
-                                           DomainModel domainModel)
-            throws IOException
+     private static final Map<String, String> aliases = new HashMap<String, String>();
+
+    private static void addProjectAlias( String element, boolean leaf )
+        String suffix = leaf ? "\\}" : "\\.";
+        aliases.put( "\\$\\{project\\." + element + suffix, "\\$\\{" + element + suffix );
+    }
-        Map<String, String> aliases = new HashMap<String, String>();
-        aliases.put( "project.", "pom.");
-        aliases.put( "\\$\\{project.build.", "\\$\\{build.");
+    static
+    {
+        aliases.put( "\\$\\{project\\.", "\\$\\{pom\\." );
+        addProjectAlias( "modelVersion", true );
+        addProjectAlias( "groupId", true );
+        addProjectAlias( "artifactId", true );
+        addProjectAlias( "version", true );
+        addProjectAlias( "packaging", true );
+        addProjectAlias( "name", true );
+        addProjectAlias( "description", true );
+        addProjectAlias( "inceptionYear", true );
+        addProjectAlias( "url", true );
+        addProjectAlias( "parent", false );
+        addProjectAlias( "prerequisites", false );
+        addProjectAlias( "organization", false );
+        addProjectAlias( "build", false );
+        addProjectAlias( "reporting", false );
+        addProjectAlias( "scm", false );
+        addProjectAlias( "distributionManagement", false );
+        addProjectAlias( "issueManagement", false );
+        addProjectAlias( "ciManagement", false );
+    }
-        if(!containsProjectVersion(interpolatorProperties))
+    public void interpolateModelProperties( List<ModelProperty> modelProperties,
+                                                   List<InterpolatorProperty> interpolatorProperties,
+                                                   DomainModel domainModel )
+        throws IOException
+    {
+        IPomClassicDomainModel dm = (IPomClassicDomainModel) domainModel;
+
+        if ( !containsProjectVersion( interpolatorProperties ) )
-            aliases.put("\\$\\{project.version\\}", "\\$\\{version\\}");
+            aliases.put( "\\$\\{project.version\\}", "\\$\\{version\\}" );
-        ModelProperty buildProperty = new ModelProperty(ProjectUri.Build.xUri, null);
-        for(ModelProperty mp : modelProperties)
+        ModelProperty buildProperty = new ModelProperty( ProjectUri.Build.xUri, null );
+        for ( ModelProperty mp : modelProperties )
-            if( mp.getValue() != null && !mp.getUri().contains( "#property" ) && !mp.getUri().contains( "#collection" ))
+            if ( mp.getValue() != null && !mp.getUri().contains( "#property" ) && !mp.getUri().contains( "#collection" ) )
-                if( !buildProperty.isParentOf( mp ) || mp.getUri().equals(ProjectUri.Build.finalName ) )
+                if ( ( !buildProperty.isParentOf( mp ) && !mp.getUri().equals( ProjectUri.Reporting.outputDirectory ) || mp.getUri().equals( ProjectUri.Build.finalName ) ) )
-                    firstPassModelProperties.add(mp);
+                    firstPassModelProperties.add( mp );
-                    secondPassModelProperties.add(mp);
+                    secondPassModelProperties.add( mp );
-
-
-        for(ModelProperty mp : modelProperties)
+        if ( dm.isPomInBuild() )
-            if(mp.getUri().startsWith(ProjectUri.properties) && mp.getValue() != null )
+            String basedir = dm.getProjectDirectory().getAbsolutePath();
+            standardInterpolatorProperties.add( new InterpolatorProperty( "${project.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+            standardInterpolatorProperties.add( new InterpolatorProperty( "${basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+            standardInterpolatorProperties.add( new InterpolatorProperty( "${pom.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+
+        }
+
+        for ( ModelProperty mp : modelProperties )
+        {
+            if ( mp.getUri().startsWith( ProjectUri.properties ) && mp.getValue() != null )
-                standardInterpolatorProperties.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1,
-                        uri.length() ) + "}", mp.getValue(), PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+                standardInterpolatorProperties.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1, uri.length() ) + "}", mp.getValue(),
+                                                                              PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-        List<InterpolatorProperty> ips1 = new ArrayList<InterpolatorProperty>(interpolatorProperties);
-        ips1.addAll(standardInterpolatorProperties);
-        ips1.addAll(ModelTransformerContext.createInterpolatorProperties(firstPassModelProperties, ProjectUri.baseUri, aliases,
-                        PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false));
-        Collections.sort(ips1, new Comparator<InterpolatorProperty>()
+        List<InterpolatorProperty> ips1 = new ArrayList<InterpolatorProperty>( interpolatorProperties );
+        ips1.addAll( standardInterpolatorProperties );
+        ips1.addAll( ModelTransformerContext.createInterpolatorProperties( firstPassModelProperties, ProjectUri.baseUri, aliases, PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false ) );
+        Collections.sort( ips1, new Comparator<InterpolatorProperty>()
-            public int compare(InterpolatorProperty o, InterpolatorProperty o1) {
+            public int compare( InterpolatorProperty o, InterpolatorProperty o1 )
+            {
-    }
+        //SECOND PASS - Set absolute paths on build directories
+        if ( dm.isPomInBuild() )
+        {
+            String basedir = dm.getProjectDirectory().getAbsolutePath();
+            Map<ModelProperty, ModelProperty> buildDirectories = new HashMap<ModelProperty, ModelProperty>();
+            for ( ModelProperty mp : secondPassModelProperties )
+            {
+                if ( mp.getUri().startsWith( ProjectUri.Build.xUri ) || mp.getUri().equals( ProjectUri.Reporting.outputDirectory ) )
+                {
+                    File file = new File(mp.getResolvedValue());
+                    if( !file.isAbsolute() && !mp.getResolvedValue().startsWith("${project.build.")
+                            && !mp.getResolvedValue().equals("${project.basedir}"))
+                    {
+                        buildDirectories.put( mp, new ModelProperty( mp.getUri(), new File( basedir, file.getPath() ).getAbsolutePath() ) );
+                    }
+                }
+            }
+
+            for ( Map.Entry<ModelProperty, ModelProperty> e : buildDirectories.entrySet() )
+            {
+                secondPassModelProperties.remove( e.getKey() );
+                secondPassModelProperties.add( e.getValue() );
+            }
+        }
+
+        //THIRD PASS - Use build directories as interpolator properties
+        List<InterpolatorProperty> ips2 = new ArrayList<InterpolatorProperty>( interpolatorProperties );
+        ips2.addAll( standardInterpolatorProperties );
+        ips2.addAll( ModelTransformerContext.createInterpolatorProperties( secondPassModelProperties, ProjectUri.baseUri, aliases, PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false ) );
+        ips2.addAll( interpolatorProperties );
+        Collections.sort( ips2, new Comparator<InterpolatorProperty>()
+        {
+            public int compare( InterpolatorProperty o, InterpolatorProperty o1 )
+            {
+                if(o.getTag() == null || o1.getTag() == null)
+                {
+                    return 0;
+                }
+
+                return PomInterpolatorTag.valueOf( o.getTag() ).compareTo( PomInterpolatorTag.valueOf( o1.getTag() ) );
+            }
+        } );
+
+        ModelTransformerContext.interpolateModelProperties( modelProperties, ips2 );
+    }
-    private static List<ModelProperty> getPropertiesFor( String uri, List<ModelProperty> properties )
+    public static List<ModelProperty> getPropertiesFor( String uri, List<ModelProperty> properties )
-    private static ModelProperty getPropertyFor( String uri, List<ModelProperty> properties )
+    public static ModelProperty getPropertyFor( String uri, List<ModelProperty> properties )

INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD40 INS23 INS23 INS23 INS31 INS28 INS74 INS59 INS74 INS59 MOV29 INS83 INS83 INS83 MOV74 MOV59 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS8 UPD83 UPD83 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS39 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS8 INS32 INS8 INS74 MOV59 INS32 INS32 INS32 INS32 INS32 INS43 INS43 INS43 INS43 MOV70 INS70 INS42 INS42 INS16 INS42 INS42 INS27 INS27 INS42 INS42 INS45 INS45 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS45 INS9 INS42 INS42 INS11 INS42 INS42 MOV60 MOV21 MOV21 INS21 INS42 INS42 INS60 INS60 INS70 INS70 INS43 INS43 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS44 INS42 INS8 INS42 INS45 INS45 INS45 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS43 INS59 INS32 INS43 INS59 INS74 INS59 MOV44 INS42 INS8 INS44 INS32 INS8 INS42 INS42 UPD74 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS9 INS9 INS74 INS1 UPD43 UPD42 MOV21 INS43 INS42 MOV21 INS42 INS42 INS42 INS32 INS42 UPD42 INS14 INS42 UPD42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS43 MOV43 MOV43 INS42 INS14 INS25 INS74 INS42 INS42 INS42 INS21 INS21 INS43 INS40 INS42 INS43 INS43 INS31 UPD42 UPD42 MOV42 INS36 INS32 INS42 INS43 INS45 INS42 INS32 INS43 INS45 INS42 INS32 INS43 INS45 INS42 INS32 INS32 INS42 INS42 INS74 INS27 INS8 INS43 MOV43 INS43 INS32 INS32 INS42 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 MOV27 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS43 MOV43 INS43 MOV32 INS32 INS60 INS25 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS25 INS41 INS42 UPD42 INS42 MOV27 INS42 INS42 UPD42 UPD40 INS32 INS42 INS40 INS43 INS59 MOV27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS32 MOV38 INS38 INS42 INS42 INS42 INS42 INS14 INS38 INS38 INS38 INS21 INS27 INS27 INS41 INS32 INS42 INS32 MOV32 INS43 INS32 INS32 MOV32 INS32 INS32 INS32 INS33 INS32 INS33 INS34 INS42 INS42 INS32 INS42 INS42 INS32 UPD40 INS42 INS42 INS42 INS42 INS42 UPD42 UPD45 MOV32 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 INS32 INS42 INS42 INS14 INS42 INS43 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL32 DEL34 DEL27 DEL40 DEL45 DEL14 DEL42 DEL42 DEL40 DEL32 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL38 DEL8 DEL25 DEL8 DEL40 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL14 DEL59 DEL60 DEL8 DEL25 DEL43 DEL42 DEL43 DEL74 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL33 DEL27 DEL42 DEL45 DEL45 DEL42 DEL45 DEL45