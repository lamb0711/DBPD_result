Use model directly for aligning paths.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@764846 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Build;
+import org.apache.maven.model.Reporting;
-    /**
-     * The URIs that denote file/directory paths and need their basedir alignment or normalization.
-     */
-    private static final Collection<String> PATH_URIS =
-        Collections.unmodifiableSet( new HashSet<String>(
-                                                          Arrays.asList(
-                                                                         ProjectUri.Build.directory,
-                                                                         ProjectUri.Build.outputDirectory,
-                                                                         ProjectUri.Build.testOutputDirectory,
-                                                                         ProjectUri.Build.sourceDirectory,
-                                                                         ProjectUri.Build.testSourceDirectory,
-                                                                         ProjectUri.Build.scriptSourceDirectory,
-                                                                         ProjectUri.Build.Resources.Resource.directory,
-                                                                         ProjectUri.Build.TestResources.TestResource.directory,
-                                                                         ProjectUri.Build.Filters.filter,
-                                                                         ProjectUri.Reporting.outputDirectory ) ) );   
-
-    public static List<ModelProperty> alignPaths( Collection<ModelProperty> modelProperties, File basedir )
+    private static void alignPaths( Model model, File basedir )
-        List<ModelProperty> mps = new ArrayList<ModelProperty>( modelProperties.size() );
-
-        for ( ModelProperty mp : modelProperties )
+    	Build build = model.getBuild();
+    	if(build != null)
+    	{
+    		build.setDirectory(getAlignedPathFor(build.getDirectory(), basedir));
+    		build.setOutputDirectory(getAlignedPathFor(build.getOutputDirectory(), basedir));	
+    		build.setTestOutputDirectory(getAlignedPathFor(build.getTestOutputDirectory(), basedir));
+    		build.setSourceDirectory(getAlignedPathFor(build.getSourceDirectory(), basedir));
+    		build.setScriptSourceDirectory(getAlignedPathFor(build.getScriptSourceDirectory(), basedir));
+    		
+    		for( Resource r : build.getResources() )
+    		{
+    			r.setDirectory(getAlignedPathFor(r.getDirectory(), basedir));
+    		}  	
+    		
+    		for( Resource r : build.getTestResources() )
+    		{
+    			r.setDirectory(getAlignedPathFor(r.getDirectory(), basedir));
+    		}  	
+    		
+    		List<String> filters = new ArrayList<String>();
+    		for( String f : build.getFilters() )
+    		{
+    			filters.add(getAlignedPathFor(f, basedir));
+    		}  
+    		build.setFilters(filters);
+    	}
+    	
+    	Reporting reporting = model.getReporting();
+    	if(reporting != null)
+    	{
+    		reporting.setOutputDirectory(getAlignedPathFor(reporting.getOutputDirectory(), basedir));	
+    	}
+          
+    }
+    
+    private static String getAlignedPathFor(String path, File basedir)
+    {
+        if ( path != null )
-            String value = mp.getResolvedValue();
-            if ( value != null && PATH_URIS.contains( mp.getUri() ) )
+            File file = new File( path );
+            if ( file.isAbsolute() )
-                File file = new File( value );
-                if ( file.isAbsolute() )
-                {
-                    // path was already absolute, just normalize file separator and we're done
-                    value = file.getPath();
-                }
-                else if ( file.getPath().startsWith( File.separator ) )
-                {
-                    // drive-relative Windows path, don't align with project directory but with drive root
-                    value = file.getAbsolutePath();
-                }
-                else
-                {
-                    // an ordinary relative path, align with project directory
-                    value = new File( new File( basedir, value ).toURI().normalize() ).getAbsolutePath();
-                }
-                mp = new ModelProperty( mp.getUri(), value );
+                // path was already absolute, just normalize file separator and we're done
+                path = file.getPath();
-            mps.add( mp );
-        }
-
-        return mps;
+            else if ( file.getPath().startsWith( File.separator ) )
+            {
+                // drive-relative Windows path, don't align with project directory but with drive root
+                path = file.getAbsolutePath();
+            }
+            else
+            {
+                // an ordinary relative path, align with project directory
+                path = new File( new File( basedir, path ).toURI().normalize() ).getAbsolutePath();
+            }
+        }   
+        return path;
-
-        
-    	if ( dm.getProjectDirectory() != null )
-    	{
-    		modelProperties = ProcessorContext.alignPaths( modelProperties, dm.getProjectDirectory() );
-    	}
-            return new PomClassicDomainModel( new ByteArrayInputStream ( xml.getBytes( "UTF-8" )));
+            PomClassicDomainModel domainModel = new PomClassicDomainModel( new ByteArrayInputStream ( xml.getBytes( "UTF-8" )));
+        	if ( dm.getProjectDirectory() != null )
+        	{
+        		alignPaths(domainModel.getModel(), dm.getProjectDirectory());
+        	}
+        	return domainModel;

INS26 INS26 INS40 INS40 INS31 INS31 MOV29 INS83 INS83 INS39 INS42 INS44 MOV44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 MOV8 INS43 INS42 INS60 INS25 MOV60 MOV25 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS59 INS27 INS8 INS43 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS21 INS21 INS70 INS70 INS60 INS70 INS21 INS42 UPD42 UPD42 MOV42 MOV33 INS21 INS42 INS33 INS60 INS25 INS60 MOV25 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS44 INS32 INS8 MOV44 INS32 INS8 UPD74 MOV74 INS59 INS44 INS32 INS8 INS32 UPD42 UPD42 INS32 MOV43 INS59 MOV32 MOV8 MOV25 INS43 INS59 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS21 UPD43 UPD42 INS42 INS42 INS21 UPD43 INS42 INS14 MOV43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS14 INS42 INS42 MOV14 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 INS32 UPD42 INS32 UPD42 UPD74 MOV74 INS32 INS42 MOV32 INS42 MOV43 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD43 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV43 MOV43 UPD42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL14 DEL32 DEL59 DEL23 DEL27 DEL32 DEL27 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL7 DEL21 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL7