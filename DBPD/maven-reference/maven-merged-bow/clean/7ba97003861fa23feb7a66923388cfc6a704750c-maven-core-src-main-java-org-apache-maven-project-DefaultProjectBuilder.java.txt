[MNG-6698] Lazily compute the ManagedVersionMap

This map is not used by Maven and the computation can be quite heavy, so lazily
compute it. In addition, do not clone the map as it's an unmodifiable one already.

This closes #263

+import java.util.AbstractMap;
+import java.util.Collection;
-            DependencyManagement dependencyManagement = project.getDependencyManagement();
+            final DependencyManagement dependencyManagement = project.getDependencyManagement();
-                map = new HashMap<>();
-                for ( Dependency d : dependencyManagement.getDependencies() )
+                map = new AbstractMap<String, Artifact>()
-                    Artifact artifact = repositorySystem.createDependencyArtifact( d );
+                    HashMap<String, Artifact> delegate;
-                    if ( artifact != null )
+                    @Override
+                    public Set<Entry<String, Artifact>> entrySet()
-                        map.put( d.getManagementKey(), artifact );
+                        return Collections.unmodifiableSet( compute().entrySet() );
-                }
-                map = Collections.unmodifiableMap( map );
+
+                    @Override
+                    public Set<String> keySet()
+                    {
+                        return Collections.unmodifiableSet( compute().keySet() );
+                    }
+
+                    @Override
+                    public Collection<Artifact> values()
+                    {
+                        return Collections.unmodifiableCollection( compute().values() );
+                    }
+
+                    @Override
+                    public boolean containsValue( Object value )
+                    {
+                        return compute().containsValue( value );
+                    }
+
+                    @Override
+                    public boolean containsKey( Object key )
+                    {
+                        return compute().containsKey( key );
+                    }
+
+                    @Override
+                    public Artifact get( Object key )
+                    {
+                        return compute().get( key );
+                    }
+
+                    HashMap<String, Artifact> compute()
+                    {
+                        if ( delegate == null )
+                        {
+                            delegate = new HashMap<>();
+                            for ( Dependency d : dependencyManagement.getDependencies() )
+                            {
+                                Artifact artifact = repositorySystem.createDependencyArtifact( d );
+
+                                if ( artifact != null )
+                                {
+                                    delegate.put( d.getManagementKey(), artifact );
+                                }
+                            }
+                        }
+
+                        return delegate;
+                    }
+                };

INS26 INS26 INS40 INS40 INS8 MOV60 INS25 INS83 MOV27 INS8 MOV8 INS21 INS7 INS42 INS14 INS74 INS1 INS43 INS43 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS74 INS59 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS74 INS42 MOV8 INS43 INS43 INS43 INS42 INS42 INS43 INS74 INS41 INS42 INS43 INS43 INS41 INS42 INS43 INS43 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS43 INS43 INS43 INS41 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21