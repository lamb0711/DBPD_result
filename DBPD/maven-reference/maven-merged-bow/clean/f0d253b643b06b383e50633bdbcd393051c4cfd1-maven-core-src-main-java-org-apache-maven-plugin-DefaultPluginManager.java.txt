o aligning the plugin parameter expression evaluator with the new test code


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@760975 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Model;
-import org.apache.maven.project.path.PathTranslator;
-    @Requirement
-    protected PathTranslator pathTranslator;
+    //@Requirement
+    //protected PathTranslator pathTranslator;
+        /*
+        */
-                downloadDependencies( session, mojoDescriptor.isDependencyResolutionRequired() );
+                downloadProjectDependencies( session, mojoDescriptor.isDependencyResolutionRequired() );
-            // TODO: plexus changes to make this more like the component descriptor so this can be used instead
-            //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
-            //                                                                          mojoDescriptor.getConfiguration() );
-
-            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution, pathTranslator, logger, session.getExecutionProperties() );
+            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoExecution );
-    private void downloadDependencies( MavenSession session, String scope )
+    //TODO: This needs to be moved out of here, and there needs to be some interplay between the lifecycle executor and the plugin manager.   
+    private void downloadProjectDependencies( MavenSession session, String scope )
-    {        
-        resolveTransitiveDependencies( session, scope );
+    {                
+        MavenProject project = session.getCurrentProject();
+        
+        // TODO: such a call in MavenMetadataSource too - packaging not really the intention of type
+        Artifact artifact = repositorySystem.createArtifact( project.getGroupId(), project.getArtifactId(), project.getVersion(), null, project.getPackaging() );
+
+        // TODO: we don't need to resolve over and over again, as long as we are sure that the parameters are the same
+        // check this with yourkit as a hot spot.
+        // Don't recreate if already created - for effeciency, and because clover plugin adds to it
+        if ( project.getDependencyArtifacts() == null )
+        {
+            // NOTE: Don't worry about covering this case with the error-reporter bindings...it's already handled by the project error reporter.
+            try
+            {
+                project.setDependencyArtifacts( repositorySystem.createArtifacts( project.getDependencies(), null, null, project ) );
+            }
+            catch ( VersionNotFoundException e )
+            {
+                throw new InvalidDependencyVersionException( e.getProjectId(), e.getDependency(), e.getPomFile(), e.getCauseException() );
+            }
+        }
+
+        ArtifactFilter filter = new ScopeArtifactFilter( scope );
+
+        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
+            .setArtifact( artifact )
+            .setResolveRoot( false )
+            .setArtifactDependencies( project.getDependencyArtifacts() )
+            .setLocalRepository( session.getLocalRepository() )
+            .setRemoteRepostories( project.getRemoteArtifactRepositories() )
+            .setManagedVersionMap( project.getManagedVersionMap() )
+            .setFilter( filter );
+
+        ArtifactResolutionResult result = repositorySystem.resolve( request );
+        
+        resolutionErrorHandler.throwErrors( request, result );
+
+        project.setArtifacts( result.getArtifacts() );                
-        for ( Artifact artifact : session.getCurrentProject().getArtifacts() )
+        for ( Artifact projectArtifact : session.getCurrentProject().getArtifacts() )
-            repositorySystem.resolve( new ArtifactResolutionRequest( artifact, localRepository, remoteArtifactRepositories ) );
+            repositorySystem.resolve( new ArtifactResolutionRequest( projectArtifact, localRepository, remoteArtifactRepositories ) );

UPD42 INS60 INS60 INS25 INS60 INS60 INS60 INS21 INS21 INS43 INS59 MOV43 INS59 INS27 INS8 INS43 INS59 MOV43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS33 INS54 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS32 INS42 INS42 INS8 INS12 INS43 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS42 INS32 INS32 INS43 INS42 INS53 INS32 INS42 INS32 INS42 INS42 INS43 UPD42 UPD42 INS42 INS42 INS32 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS33 INS42 INS43 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS14 INS42 INS42 INS43 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42