only test the expressions if the field is required


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@188656 13f79535-47bb-0310-9956-ffa450edef68

-            // the key for the configuration map we're building.
-            String key = parameter.getName();
-
-            Object fieldValue = null;
-            String expression = null;
-            PlexusConfiguration value = configuration.getChild( key, false );
-            try
+            if ( parameter.isRequired() )
-                if ( value != null )
-                {
-                    expression = value.getValue( null );
-                    fieldValue = expressionEvaluator.evaluate( expression );
-                    if ( fieldValue == null )
-                    {
-                        fieldValue = value.getAttribute( "default-value", null );
-                    }
-                }
+                // the key for the configuration map we're building.
+                String key = parameter.getName();
-                if ( fieldValue == null && StringUtils.isNotEmpty( parameter.getAlias() ) )
+                Object fieldValue = null;
+                String expression = null;
+                PlexusConfiguration value = configuration.getChild( key, false );
+                try
-                    value = configuration.getChild( parameter.getAlias(), false );
-                }
-            }
-            catch ( ExpressionEvaluationException e )
-            {
-                throw new PluginConfigurationException( "Bad expression", e );
-            }
-            if ( fieldValue == null && goal.getComponentConfigurator() == null )
-            {
-                try
-                {
-                    // TODO: remove in beta-1
-                    Field field = findPluginField( plugin.getClass(), parameter.getName() );
-                    boolean accessible = field.isAccessible();
-                    if ( !accessible )
+                    if ( fieldValue == null && StringUtils.isNotEmpty( parameter.getAlias() ) )
-                        field.setAccessible( true );
-                    }
-                    fieldValue = field.get( plugin );
-                    if ( !accessible )
-                    {
-                        field.setAccessible( false );
-                    }
-                    if ( fieldValue != null )
-                    {
-                        getLogger().warn( "DEPRECATED: using default-value to set the default value of field '" +
-                                          parameter.getName() + "'" );
+                        value = configuration.getChild( parameter.getAlias(), false );
+                        if ( value != null )
+                        {
+                            expression = value.getValue( null );
+                            fieldValue = expressionEvaluator.evaluate( expression );
+                            if ( fieldValue == null )
+                            {
+                                fieldValue = value.getAttribute( "default-value", null );
+                            }
+                        }
-                catch ( NoSuchFieldException e )
+                catch ( ExpressionEvaluationException e )
-                    throw new PluginConfigurationException( "Unable to find field to check default value", e );
+                    throw new PluginConfigurationException( "Bad expression", e );
-                catch ( IllegalAccessException e )
-                {
-                    throw new PluginConfigurationException( "Unable to read field to check default value", e );
-                }
-            }
-            if ( parameter.isRequired() && fieldValue == null )
-            {
-                parameter.setExpression( expression );
-                invalidParameters.add( parameter );
+                if ( fieldValue == null && goal.getComponentConfigurator() == null )
+                {
+                    try
+                    {
+                        // TODO: remove in beta-1
+                        Field field = findPluginField( plugin.getClass(), parameter.getName() );
+                        boolean accessible = field.isAccessible();
+                        if ( !accessible )
+                        {
+                            field.setAccessible( true );
+                        }
+                        fieldValue = field.get( plugin );
+                        if ( !accessible )
+                        {
+                            field.setAccessible( false );
+                        }
+                        if ( fieldValue != null )
+                        {
+                            getLogger().warn( "DEPRECATED: using default-value to set the default value of field '" +
+                                              parameter.getName() + "'" );
+                        }
+                    }
+                    catch ( NoSuchFieldException e )
+                    {
+                        throw new PluginConfigurationException( "Unable to find field to check default value", e );
+                    }
+                    catch ( IllegalAccessException e )
+                    {
+                        throw new PluginConfigurationException( "Unable to read field to check default value", e );
+                    }
+                }
+
+                if ( fieldValue == null )
+                {
+                    parameter.setExpression( expression );
+                    invalidParameters.add( parameter );
+                }

INS25 MOV32 INS8 MOV60 MOV60 MOV60 MOV60 MOV54 MOV25 MOV25 MOV27 DEL27