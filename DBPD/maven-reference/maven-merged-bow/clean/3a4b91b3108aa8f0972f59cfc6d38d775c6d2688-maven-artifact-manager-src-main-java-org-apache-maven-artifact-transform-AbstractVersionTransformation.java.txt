PR: MNG-613
push shared code into metadata manager

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280232 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.metadata.ArtifactMetadata;
+import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
-import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
-import org.codehaus.plexus.util.IOUtil;
-import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.Reader;
-        ArtifactMetadata metadata;
+        RepositoryMetadata metadata;
-/*
-        // TODO: can this go directly into the manager? At least share with DefaultPluginMappingManager
-        // TODO: use this, cache the output, select from that list instead of the next set
-        Versioning versioning = new Versioning();
-        for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
-        {
-            ArtifactRepository repository = (ArtifactRepository) i.next();
-
-            mergeVersioning( versioning, loadVersioningInformation( metadata, repository, localRepository ) );
-        }
-        mergeVersioning( versioning, loadVersioningInformation( metadata, localRepository, localRepository ) );
-
-        String version = selectVersion( versioning, artifact.getVersion() );
-*/
-        Versioning versioning = null;
-        for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
-        {
-            ArtifactRepository repository = (ArtifactRepository) i.next();
-
-            versioning = loadVersioningInformation( metadata, repository, localRepository, artifact );
-            if ( versioning != null )
-            {
-                artifact.setRepository( repository );
-                // TODO: merge instead (see above)
-                break;
-            }
-        }
-        Versioning v = loadVersioningInformation( metadata, localRepository, localRepository, artifact );
-        if ( v != null )
-        {
-            versioning = v;
-            // TODO: figure out way to avoid duplicated message
-            if ( getLogger().isDebugEnabled() /*&& !alreadyResolved*/ )
-            {
-                // Locally installed file is newer, don't use the resolved version
-                getLogger().debug( artifact.getArtifactId() + ": using locally installed snapshot" );
-            }
-        }
-
+        Metadata repoMetadata = metadata.getMetadata();
-        if ( versioning != null )
+        if ( repoMetadata != null && repoMetadata.getVersioning() != null )
-            version = constructVersion( versioning, artifact.getBaseVersion() );
+            version = constructVersion( repoMetadata.getVersioning(), artifact.getBaseVersion() );
+        // TODO: figure out way to avoid duplicated message
-            if ( version != null && !version.equals( artifact.getBaseVersion() ) )
+            if ( !version.equals( artifact.getBaseVersion() ) )
+            else
+            {
+                // Locally installed file is newer, don't use the resolved version
+                getLogger().debug( artifact.getArtifactId() + ": using locally installed snapshot" );
+            }
-/* TODO
-    private void mergeVersioning( Versioning dest, Versioning source )
-    {
-        // TODO: currently, it is first wins. We should probably compare the versions, or check timestamping?
-        // This could also let us choose the newer of the locally installed version and the remotely built version
-        if ( dest.getLatest() == null )
-        {
-            dest.setLatest( source.getLatest() );
-        }
-        if ( dest.getRelease() == null )
-        {
-            dest.setRelease( source.getRelease() );
-        }
-        if ( dest.getSnapshot() == null )
-        {
-            dest.setSnapshot( source.getSnapshot() );
-        }
-        for ( Iterator i = source.getVersions().iterator(); i.hasNext(); )
-        {
-            String version = (String) i.next();
-            if ( !dest.getVersions().contains( version ) )
-            {
-                dest.getVersions().add( version );
-            }
-        }
-    }
-*/
-
-
-    protected Versioning loadVersioningInformation( ArtifactMetadata repoMetadata, ArtifactRepository remoteRepository,
-                                                    ArtifactRepository localRepository, Artifact artifact )
-        throws ArtifactMetadataRetrievalException
-    {
-        File metadataFile = new File( localRepository.getBasedir(),
-                                      localRepository.pathOfLocalRepositoryMetadata( repoMetadata, remoteRepository ) );
-
-        Versioning versioning = null;
-        if ( metadataFile.exists() )
-        {
-            Metadata metadata = readMetadata( metadataFile );
-            versioning = metadata.getVersioning();
-        }
-        return versioning;
-    }
-
-    /**
-     * @todo share with DefaultPluginMappingManager.
-     */
-    private static Metadata readMetadata( File mappingFile )
-        throws ArtifactMetadataRetrievalException
-    {
-        Metadata result;
-
-        Reader fileReader = null;
-        try
-        {
-            fileReader = new FileReader( mappingFile );
-
-            MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();
-
-            result = mappingReader.read( fileReader );
-        }
-        catch ( FileNotFoundException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
-        }
-        catch ( IOException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Cannot read version information from: " + mappingFile, e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new ArtifactMetadataRetrievalException( "Cannot parse version information from: " + mappingFile, e );
-        }
-        finally
-        {
-            IOUtil.close( fileReader );
-        }
-        return result;
-    }

MOV26 UPD40 UPD43 UPD43 INS27 UPD42 MOV42 UPD42 INS27 INS27 UPD42 INS42 INS33 INS32 MOV33 MOV38 MOV8 INS42 INS42 INS32 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL25 DEL8 DEL25 DEL42 DEL27 DEL42 DEL33 DEL27 DEL27 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL41 DEL8 DEL31