Adding project-level ClassRealm, which serves as a nexus for extensions. Extensions are loaded into separate ClassRealm instances, then scanned for components. These ComponentDescriptors are then used to add an import from the extension realm back to the project-session realm, and then the descriptor is added to the container with the project realm as its RealmId. From here, the registerWagons() method has been changed to use the map of projectSessions, and iterates through each project-level realm, setting the lookup-realm, then calling findAndRegisterWagons(..) for each. Also, the plugin manager has been changed to use the project-realm for loading plugins if it exists (the plugin realm becomes a child of the project realm, which should allow plugins to vary by project within a single reactor, though I haven't tested that yet).

Also, shading the embedder to hide the jdom classes, and adjusting the assembly appropriately.

Final thing: I'm rolling back some changes I accidentally made to the CLIManager the other day, which breaks the release plugin because the long options were removed for some reason (save action in Eclipse; don't ask).


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@585012 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.codehaus.plexus.PlexusContainerException;
-    public void scanForBuildExtensions( List files, ArtifactRepository localRepository,
-                                        ProfileManager globalProfileManager )
+    public void scanForBuildExtensions( List files,
+                                        ArtifactRepository localRepository,
+                                        ProfileManager globalProfileManager,
+                                        Map projectSessions )
-            scanInternal( pom, localRepository, globalProfileManager, visited, files );
+            scanInternal( pom, localRepository, globalProfileManager, visited, files, projectSessions );
-    public void scanForBuildExtensions( File pom, ArtifactRepository localRepository,
-                                        ProfileManager globalProfileManager )
+    public void scanForBuildExtensions( File pom,
+                                        ArtifactRepository localRepository,
+                                        ProfileManager globalProfileManager,
+                                        Map projectSessions )
-        scanInternal( pom, localRepository, globalProfileManager, new ArrayList(), Collections.singletonList( pom ) );
+        scanInternal( pom, localRepository, globalProfileManager, new ArrayList(), Collections.singletonList( pom ), projectSessions );
-    private void scanInternal( File pom, ArtifactRepository localRepository, ProfileManager globalProfileManager,
-                               List visitedModelIds, List reactorFiles )
+    private void scanInternal( File pom,
+                               ArtifactRepository localRepository,
+                               ProfileManager globalProfileManager,
+                               List visitedModelIds,
+                               List reactorFiles,
+                               Map projectSessions )
-                checkModelBuildForExtensions( model, localRepository, inheritedRemoteRepositories );
+                checkModelBuildForExtensions( model, localRepository, inheritedRemoteRepositories, projectSessions );
-                    checkModulesForExtensions( modelPom, model, localRepository, originalRemoteRepositories,
-                                               globalProfileManager, visitedModelIds, reactorFiles );
+                    checkModulesForExtensions( modelPom,
+                                               model,
+                                               localRepository,
+                                               originalRemoteRepositories,
+                                               globalProfileManager,
+                                               visitedModelIds,
+                                               reactorFiles,
+                                               projectSessions );
-            extensionManager.registerWagons();
+            extensionManager.registerWagons( projectSessions );
-                + " prior to scanning for extensions.", e );
+                + " prior to scanning for extensions.", pom, e );
-    private void checkModulesForExtensions( File containingPom, Model model, ArtifactRepository localRepository,
-                                            List originalRemoteRepositories, ProfileManager globalProfileManager,
-                                            List visitedModelIds, List reactorFiles )
+    private void checkModulesForExtensions( File containingPom,
+                                            Model model,
+                                            ArtifactRepository localRepository,
+                                            List originalRemoteRepositories,
+                                            ProfileManager globalProfileManager,
+                                            List visitedModelIds,
+                                            List reactorFiles,
+                                            Map projectSessions )
-                    throw new ExtensionScanningException( "Error getting canonical path for modulePomDirectory.", e );
+                    throw new ExtensionScanningException( "Error getting canonical path for modulePomDirectory.", containingPom, moduleSubpath, e );
-                scanInternal( modulePomDirectory, localRepository, globalProfileManager, visitedModelIds, reactorFiles );
+                scanInternal( modulePomDirectory, localRepository, globalProfileManager, visitedModelIds, reactorFiles, projectSessions );
-    private void checkModelBuildForExtensions( Model model, ArtifactRepository localRepository, List remoteRepositories )
+    private void checkModelBuildForExtensions( Model model, ArtifactRepository localRepository, List remoteRepositories, Map projectSessions )
-                        extensionManager.addExtension( extension, model, remoteRepositories, localRepository );
+                        extensionManager.addExtension( extension, model, remoteRepositories, localRepository, projectSessions );
-                    catch ( ArtifactResolutionException e )
+                    catch ( ExtensionManagerException e )
-                            + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(), e );
-                    }
-                    catch ( ArtifactNotFoundException e )
-                    {
-                        throw new ExtensionScanningException( "Cannot find pre-scanned extension artifact: "
-                            + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(), e );
-                    }
-                    catch ( PlexusContainerException e )
-                    {
-                        throw new ExtensionScanningException( "Failed to add pre-scanned extension: "
-                            + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(), e );
+                            + extension.getGroupId() + ":" + extension.getArtifactId() + ": " + e.getMessage(), model, extension, e );
-                + e.getMessage(), e );
+                + e.getMessage(), pom, e );

INS44 INS44 INS44 INS44 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 INS42 UPD42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12