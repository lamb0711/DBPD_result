try-with-resources

Reformatted to code style by me. This fixes #53

-import java.io.BufferedInputStream;
-import java.io.Console;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.PrintStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Properties;
-import java.util.Set;
-import java.util.StringTokenizer;
-
+import com.google.common.base.Charsets;
+import com.google.common.io.Files;
+import com.google.inject.AbstractModule;
-import org.codehaus.plexus.util.IOUtil;
-import com.google.common.base.Charsets;
-import com.google.common.io.Files;
-import com.google.inject.AbstractModule;
+import java.io.BufferedInputStream;
+import java.io.Console;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Properties;
+import java.util.Set;
+import java.util.StringTokenizer;
- * @noinspection UseOfSystemOutOrSystemErr,ACCESS_STATIC_VIA_INSTANCE
+ * @noinspection UseOfSystemOutOrSystemErr, ACCESS_STATIC_VIA_INSTANCE
-    public static final File DEFAULT_GLOBAL_TOOLCHAINS_FILE = 
-       new File( System.getProperty( "maven.home", System.getProperty( "user.dir", "" ) ), "conf/toolchains.xml" );
+    public static final File DEFAULT_GLOBAL_TOOLCHAINS_FILE =
+        new File( System.getProperty( "maven.home", System.getProperty( "user.dir", "" ) ), "conf/toolchains.xml" );
-    
+
-    /** @noinspection ConfusingMainMethod */
+    /**
+     * @noinspection ConfusingMainMethod
+     */
-                System.err.format( "-D%s system property is not set."
-                    + " Check $M2_HOME environment variable and mvn script match.", MULTIMODULE_PROJECT_DIRECTORY );
+                System.err.format(
+                    "-D%s system property is not set." + " Check $M2_HOME environment variable and mvn script match.",
+                    MULTIMODULE_PROJECT_DIRECTORY );
-        ContainerConfiguration cc = new DefaultContainerConfiguration()
-            .setClassWorld( cliRequest.classWorld )
-            .setRealm( containerRealm )
-            .setClassPathScanning( PlexusConstants.SCANNING_INDEX )
-            .setAutoWiring( true )
-            .setName( "maven" );
+        ContainerConfiguration cc = new DefaultContainerConfiguration().setClassWorld( cliRequest.classWorld ).setRealm(
+            containerRealm ).setClassPathScanning( PlexusConstants.SCANNING_INDEX ).setAutoWiring( true ).setName(
+            "maven" );
-        
+
-                
+
-                
+
-                
+
-                
+
-                
+
-        InputStream is = null;
-        try
+
+        try ( InputStream is = new BufferedInputStream( new FileInputStream( extensionsFile ) ) )
-            is = new BufferedInputStream( new FileInputStream( extensionsFile ) );
+
-        finally
-        {
-            IOUtil.close( is );
-        }
+
-            System.out.println( cipher.encryptAndDecorate( passwd,
-                                                           DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
+            System.out.println(
+                cipher.encryptAndDecorate( passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION ) );
-        if ( cliRequest.commandLine.hasOption( CLIManager.LEGACY_LOCAL_REPOSITORY )
-            || Boolean.getBoolean( "maven.legacyLocalRepo" ) )
+        if ( cliRequest.commandLine.hasOption( CLIManager.LEGACY_LOCAL_REPOSITORY ) || Boolean.getBoolean(
+            "maven.legacyLocalRepo" ) )
-           cliRequest.request.setUseLegacyLocalRepository( true );
+            cliRequest.request.setUseLegacyLocalRepository( true );
-    private int execute( CliRequest cliRequest ) throws MavenExecutionRequestPopulationException
+    private int execute( CliRequest cliRequest )
+        throws MavenExecutionRequestPopulationException
-      
+
-                              + ", please read the following articles:" );
+                                       + ", please read the following articles:" );
-            if ( ( i == lines.length - 1 )
-                && ( showErrors || ( summary.getException() instanceof InternalErrorException ) ) )
+            if ( ( i == lines.length - 1 ) && ( showErrors
+                || ( summary.getException() instanceof InternalErrorException ) ) )
-        
+
-        
+
-            configurationProcessors.get( SettingsXmlConfigurationProcessor.HINT ).process( cliRequest );            
-        }        
+            configurationProcessors.get( SettingsXmlConfigurationProcessor.HINT ).process( cliRequest );
+        }
-            }            
+            }
-                String.format( "\nThere can only be one user supplied ConfigurationProcessor, there are %s:\n\n", 
+                String.format( "\nThere can only be one user supplied ConfigurationProcessor, there are %s:\n\n",
-        }                
+        }
-    
+
-                throw new FileNotFoundException( "The specified user toolchains file does not exist: "
-                    + userToolchainsFile );
+                throw new FileNotFoundException(
+                    "The specified user toolchains file does not exist: " + userToolchainsFile );
-                throw new FileNotFoundException( "The specified global toolchains file does not exist: "
-                    + globalToolchainsFile );
+                throw new FileNotFoundException(
+                    "The specified global toolchains file does not exist: " + globalToolchainsFile );
-        slf4jLogger.debug( "Reading global toolchains from "
-            + getLocation( toolchainsRequest.getGlobalToolchainsSource(), globalToolchainsFile ) );
-        slf4jLogger.debug( "Reading user toolchains from "
-            + getLocation( toolchainsRequest.getUserToolchainsSource(), userToolchainsFile ) );
+        slf4jLogger.debug(
+            "Reading global toolchains from " + getLocation( toolchainsRequest.getGlobalToolchainsSource(),
+                                                             globalToolchainsFile ) );
+        slf4jLogger.debug( "Reading user toolchains from " + getLocation( toolchainsRequest.getUserToolchainsSource(),
+                                                                          userToolchainsFile ) );
-                    + " is deprecated and will be removed in future Maven versions." );
+                                      + " is deprecated and will be removed in future Maven versions." );
-        @SuppressWarnings( "unchecked" )
-        List<String> goals = commandLine.getArgList();
+        @SuppressWarnings( "unchecked" ) List<String> goals = commandLine.getArgList();
-        request.setBaseDirectory( baseDirectory ).setGoals( goals )
-            .setSystemProperties( cliRequest.systemProperties )
-            .setUserProperties( cliRequest.userProperties )
-            .setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast
+        request.setBaseDirectory( baseDirectory ).setGoals( goals ).setSystemProperties(
+            cliRequest.systemProperties ).setUserProperties( cliRequest.userProperties ).setReactorFailureBehavior(
+            reactorFailureBehaviour ) // default: fail fast
-            .setExecutionListener( executionListener )
-            .setTransferListener( transferListener ) // default: batch mode which goes along with interactive
+            .setExecutionListener( executionListener ).setTransferListener(
+            transferListener ) // default: batch mode which goes along with interactive
-        if ( commandLine.hasOption( CLIManager.ALSO_MAKE )
-                        && !commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        if ( commandLine.hasOption( CLIManager.ALSO_MAKE ) && !commandLine.hasOption(
+            CLIManager.ALSO_MAKE_DEPENDENTS ) )
-        else if ( !commandLine.hasOption( CLIManager.ALSO_MAKE )
-                        && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        else if ( !commandLine.hasOption( CLIManager.ALSO_MAKE ) && commandLine.hasOption(
+            CLIManager.ALSO_MAKE_DEPENDENTS ) )
-        else if ( commandLine.hasOption( CLIManager.ALSO_MAKE )
-                        && commandLine.hasOption( CLIManager.ALSO_MAKE_DEPENDENTS ) )
+        else if ( commandLine.hasOption( CLIManager.ALSO_MAKE ) && commandLine.hasOption(
+            CLIManager.ALSO_MAKE_DEPENDENTS ) )
-        }        
-        
+        }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV8 UPD66 MOV60 INS54 UPD66 INS58 INS8 MOV43 INS59 MOV41 INS42 MOV14 DEL40 DEL26 DEL42 DEL7 DEL21 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8