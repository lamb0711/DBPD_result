Improving the use of project sessions in the embedder, and exporting control over the project session map to the embedder instead of Maven.execute().

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@588144 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-    public MavenExecutionResult execute( MavenExecutionRequest request )
+    public MavenExecutionResult execute( MavenExecutionRequest request, Map projectSessions )
-        Map projectSessions = new HashMap();
-
+        for ( Iterator i = request.getGoals().iterator(); i.hasNext(); )
+        {
+            String goal = (String) i.next();
+
+            TaskValidationResult tvr = lifecycleExecutor.isTaskValid( goal, session, reactorManager.getTopLevelProject() );
+
+            if ( !tvr.isTaskValid() )
+            {
+                result.addBuildFailureException( new InvalidTaskException( tvr ) );
+
+                return result;
+            }
+        }
+
+        getLogger().info( "Scanning for projects..." );
+
+        if ( reactorManager.hasMultipleProjects() )
+        {
+            getLogger().info( "Reactor build order: " );
+
+            for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
+            {
+                MavenProject project = (MavenProject) i.next();
+
+                getLogger().info( "  " + project.getName() );
+            }
+        }
+
+        initializeBuildContext( request );
+
-            for ( Iterator i = request.getGoals().iterator(); i.hasNext(); )
-            {
-                String goal = (String) i.next();
-
-                TaskValidationResult tvr = lifecycleExecutor.isTaskValid( goal, session, reactorManager.getTopLevelProject() );
-
-                if ( !tvr.isTaskValid() )
-                {
-                    result.addBuildFailureException( new InvalidTaskException( tvr ) );
-
-                    return result;
-                }
-            }
-
-            getLogger().info( "Scanning for projects..." );
-
-            if ( reactorManager.hasMultipleProjects() )
-            {
-                getLogger().info( "Reactor build order: " );
-
-                for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
-                {
-                    MavenProject project = (MavenProject) i.next();
-
-                    getLogger().info( "  " + project.getName() );
-                }
-            }
-
-            initializeBuildContext( request );
-
-            try
-            {
-                lifecycleExecutor.execute(
-                    session,
-                    reactorManager,
-                    dispatcher );
-            }
-            catch ( LifecycleExecutionException e )
-            {
-                result.addLifecycleExecutionException( e );
-                return result;
-            }
-            catch ( BuildFailureException e )
-            {
-                result.addBuildFailureException( e );
-                return result;
-            }
-
-            result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
-
-            result.setProject( reactorManager.getTopLevelProject() );
-
+            lifecycleExecutor.execute(
+                session,
+                reactorManager,
+                dispatcher );
+        }
+        catch ( LifecycleExecutionException e )
+        {
+            result.addLifecycleExecutionException( e );
-        finally
+        catch ( BuildFailureException e )
-            session.dispose();
+            result.addBuildFailureException( e );
+            return result;
+
+        result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
+
+        result.setProject( reactorManager.getTopLevelProject() );
+
+        return result;

INS44 MOV8 MOV43 INS42 MOV21 MOV60 MOV60 MOV25 MOV60 MOV60 MOV21 MOV60 DEL40 DEL26 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8