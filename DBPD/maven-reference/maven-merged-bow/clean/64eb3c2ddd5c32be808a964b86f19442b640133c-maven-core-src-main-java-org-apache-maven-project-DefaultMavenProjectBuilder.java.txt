project sorting can be a static method


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163575 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Dependency;
-import org.codehaus.plexus.util.dag.CycleDetectedException;
-import org.codehaus.plexus.util.dag.DAG;
-import org.codehaus.plexus.util.dag.TopologicalSorter;
-    /**
-     * Sort a list of projects.
-     * <ul>
-     * <li>collect all the vertices for the projects that we want to build.</li>
-     * <li>iterate through the deps of each project and if that dep is within
-     * the set of projects we want to build then add an edge, otherwise throw
-     * the edge away because that dependency is not within the set of projects
-     * we are trying to build. we assume a closed set.</li>
-     * <li>do a topo sort on the graph that remains.</li>
-     * </ul>
-     */
-    public List getSortedProjects( List projects )
-        throws CycleDetectedException
-    {
-        DAG dag = new DAG();
-
-        Map projectMap = new HashMap();
-
-        for ( Iterator i = projects.iterator(); i.hasNext(); )
-        {
-            MavenProject project = (MavenProject) i.next();
-
-            String artifactId = project.getArtifactId();
-
-            dag.addVertex( artifactId );
-
-            projectMap.put( artifactId, project );
-        }
-
-        for ( Iterator i = projects.iterator(); i.hasNext(); )
-        {
-            MavenProject project = (MavenProject) i.next();
-
-            String artifactId = project.getArtifactId();
-
-            for ( Iterator j = project.getDependencies().iterator(); j.hasNext(); )
-            {
-                Dependency dependency = (Dependency) j.next();
-
-                String dependencyArtifactId = dependency.getArtifactId();
-
-                if ( dag.getVertex( dependencyArtifactId ) != null )
-                {
-                    dag.addEdge( artifactId, dependencyArtifactId );
-                }
-            }
-
-            MavenProject parent = project.getParent();
-            if ( parent != null )
-            {
-                if ( dag.getVertex( parent.getArtifactId() ) != null )
-                {
-                    dag.addEdge( artifactId, parent.getArtifactId() );
-                }
-            }
-        }
-
-        List sortedProjects = new ArrayList();
-
-        for ( Iterator i = TopologicalSorter.sort( dag ).iterator(); i.hasNext(); )
-        {
-            String artifactId = (String) i.next();
-
-            sortedProjects.add( projectMap.get( artifactId ) );
-        }
-
-        return sortedProjects;
-    }
-

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31