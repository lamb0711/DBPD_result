Improve phase-tracking, event dispatching, and align build headers as events dispatched to the default event monitor...also, add debug-level enter/exit phase output in the default event monitor. Finally, refactored code that actually renders the build plan and executes the mojos for each task-segment in the lifecycle executor, to eliminate all the duplication.

This lays the ground work for improving cache management, since I also added event types for embedder control (keep in mind that event monitors can be used to control when the project/model cache is flushed, for example).


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@631455 13f79535-47bb-0310-9956-ffa450edef68

-    private static final String[] START_EVENTS = {MavenEvents.MOJO_EXECUTION};
+    private static final String[] START_EVENTS = {
+        MavenEvents.PROJECT_EXECUTION,
+        MavenEvents.PHASE_EXECUTION,
+        MavenEvents.MOJO_EXECUTION
+    };
+
+    private static final String[] END_EVENTS = {
+        MavenEvents.PHASE_EXECUTION
+    };
-        super( START_EVENTS, MavenEvents.NO_EVENTS, MavenEvents.NO_EVENTS );
+        super( START_EVENTS, END_EVENTS, MavenEvents.NO_EVENTS );
-        logger.info( "[" + target + "]" );
+        if ( MavenEvents.MOJO_EXECUTION.equals( event ) )
+        {
+            logger.info( "[" + target + "]" );
+        }
+        else if ( MavenEvents.PHASE_EXECUTION.equals( event ) )
+        {
+            logger.debug( line() );
+            logger.debug( "Entering lifecycle phase: " + target );
+            logger.debug( line() );
+        }
+        else if ( MavenEvents.PROJECT_EXECUTION.equals( event ) )
+        {
+            logger.info( line() );
+            String[] targetParts = target.split( "\n" );
+            logger.info( "Building " + targetParts[0] );
+            if ( targetParts.length > 0 )
+            {
+                logger.info( "" );
+                for ( int i = 1; i < targetParts.length; i++ )
+                {
+                    logger.info( targetParts[i] );
+                }
+            }
+            logger.info( line() );
+        }
+    }
+
+    protected void doEndEvent( String event,
+                               String target,
+                               long timestamp )
+    {
+        logger.debug( line() );
+        logger.debug( "Completed lifecycle phase: " + target );
+        logger.debug( line() );
+    }
+
+    private String line()
+    {
+        return "------------------------------------------------------------------------";

INS23 INS31 INS31 INS83 INS83 INS83 INS5 INS59 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS43 INS85 INS42 INS4 INS25 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS21 INS42 INS41 INS40 INS40 INS42 INS40 INS42 INS32 MOV8 INS25 INS42 INS42 INS32 INS32 INS32 INS45 INS40 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS40 INS42 INS42 INS21 INS21 INS21 INS32 INS8 INS42 INS45 INS42 INS42 INS32 INS32 INS32 INS40 INS42 INS42 INS21 INS60 INS21 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS5 INS59 INS32 INS27 INS8 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS27 INS40 INS34 INS21 INS24 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS2 INS32 INS58 INS27 INS37 INS8 INS42 INS42 INS34 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS34 INS32 INS42 INS42 INS2 INS42 INS42 DEL40