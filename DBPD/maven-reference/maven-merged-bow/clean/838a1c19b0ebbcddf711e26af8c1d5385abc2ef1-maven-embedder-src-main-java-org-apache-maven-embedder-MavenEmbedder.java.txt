o restore the functionality that m2eclipse needs to read projects with dependencies

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@772675 13f79535-47bb-0310-9956-ffa450edef68

+//TODO: just turn this into a component
+    
+    // currently in m2eclipse each project is read read a single project for dependencies
+    // Project
+    // Exceptions
+    // explicit for exceptions where coordinate are involved.
+    // m2eclipse is not using the topological sorting at all because it keeps track itself.
+    
-
-            readProject( request.getPom(), request );
-        catch ( ProjectBuildingException e )
-        {
-            return result.addException( e );
-        }
-        catch ( MissingModuleException e )
-        {
-            return result.addException( e );
-        }
-
-        //TODO: need to check for circularity problems here even though this is purely downloading and for IDEs they will take care of circularity problems.
-        
-        /*
-        ReactorManager reactorManager = maven.createReactorManager( request, result );
-
-        if ( result.hasExceptions() )
-        {
-            return result;
-        }
-        */
-
-        MavenProjectBuildingResult projectBuildingResult;
-            projectBuildingResult = mavenProjectBuilder.buildProjectWithDependencies( request.getPom(), request.getProjectBuildingConfiguration() );
+            MavenProjectBuildingResult projectBuildingResult = mavenProjectBuilder.buildProjectWithDependencies( request.getPom(), request.getProjectBuildingConfiguration() );
+            
+            result.setProject( projectBuildingResult.getProject() );
+
+            result.setArtifactResolutionResult( projectBuildingResult.getArtifactResolutionResult() );
+
+            return result;
-
-        /*
-        if ( reactorManager.hasMultipleProjects() )
-        {
-            result.setProject( projectBuildingResult.getProject() );
-
-            result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
-        }
-        else
-        {
-            result.setProject( projectBuildingResult.getProject() );
-
-            result.setTopologicallySortedProjects( Arrays.asList( new MavenProject[]{ projectBuildingResult.getProject()} ) );
-        }
-        */
-
-        result.setArtifactResolutionResult( projectBuildingResult.getArtifactResolutionResult() );
-
-        // From this I could produce something that would help IDE integrators create importers:
-        // - topo sorted list of projects
-        // - binary dependencies
-        // - source dependencies (projects in the reactor)
-        //
-        // We could create a layer approach here. As to do anything you must resolve a projects artifacts,
-        // and with that set you could then subsequently execute goals for each of those project.
-
-        return result;

INS60 MOV21 MOV41 MOV43 INS59 INS32 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL42 DEL59 DEL60 DEL42 DEL7