Merge of branch: sisbell-maven-2.1-profile.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@685443 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
-import org.apache.maven.model.Build;
-import org.apache.maven.model.CiManagement;
-import org.apache.maven.model.Contributor;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.DependencyManagement;
-import org.apache.maven.model.Developer;
-import org.apache.maven.model.DistributionManagement;
-import org.apache.maven.model.IssueManagement;
-import org.apache.maven.model.License;
-import org.apache.maven.model.MailingList;
-import org.apache.maven.model.Model;
-import org.apache.maven.model.Organization;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.model.PluginExecution;
-import org.apache.maven.model.PluginManagement;
-import org.apache.maven.model.Prerequisites;
-import org.apache.maven.model.ReportPlugin;
-import org.apache.maven.model.ReportSet;
-import org.apache.maven.model.Reporting;
-import org.apache.maven.model.Resource;
-import org.apache.maven.model.Scm;
+import org.apache.maven.artifact.versioning.VersionRange;
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.model.*;
+import org.codehaus.plexus.util.StringUtils;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-import java.util.Stack;
+import java.util.*;
+    private ArtifactFactory artifactFactory;
+
+    public MavenProject(Model model, ArtifactFactory artifactFactory) {
+        setModel( model );
+        this.artifactFactory = artifactFactory;
+    }
+
-        if ( project.getPluginArtifacts() != null )
-        {
-            setPluginArtifacts( Collections.unmodifiableSet( project.getPluginArtifacts() ) );
-        }
+    //    if ( project.getPluginArtifacts() != null )
+    //    {
+           // setPluginArtifacts( Collections.unmodifiableSet( project.getPluginArtifacts() ) );
+      //  }
-    public void setPluginArtifacts( Set pluginArtifacts )
-    {
-        this.pluginArtifacts = pluginArtifacts;
-
-        pluginArtifactMap = null;
-    }
-
+        if(pluginArtifacts != null) {
+            return pluginArtifacts;
+        }
+        Set pa = new HashSet();
+        if(artifactFactory != null) {
+            List plugins = getBuildPlugins();
+            for ( Iterator i = plugins.iterator(); i.hasNext(); )
+            {
+                Plugin p = (Plugin) i.next();
+
+                String version;
+                if ( StringUtils.isEmpty( p.getVersion() ) )
+                {
+                    version = "RELEASE";
+                }
+                else
+                {
+                    version = p.getVersion();
+                }
+
+                Artifact artifact;
+                try
+                {
+                    artifact = artifactFactory.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
+                        VersionRange.createFromVersionSpec( version ) );
+                }
+                catch ( InvalidVersionSpecificationException e )
+                {
+                    return pa;
+                }
+
+                if ( artifact != null )
+                {
+                    pa.add( artifact );
+                }
+            }
+        }
+        pluginArtifacts = pa;
+        pluginArtifactMap = null;
-        if ( pluginArtifactMap == null )
-        {
-            pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getPluginArtifacts() );
-        }
-
+        pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId( getPluginArtifacts() );
+        if(managedVersionMap != null) {
+            return managedVersionMap;
+        }
+        
+        Map map = null;
+        if( artifactFactory != null ) {
+
+            List deps;
+            DependencyManagement dependencyManagement = getDependencyManagement();
+            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) && ( deps.size() > 0 ) )
+            {
+                map = new ManagedVersionMap( map );
+                for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )
+                {
+                    Dependency d = (Dependency) i.next();
+
+                    try
+                    {
+                        VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
+
+                        Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), versionRange, d.getType(),
+                            d.getClassifier(), d.getScope(), d.isOptional() );
+
+                        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && ( d.getSystemPath() != null ) )
+                        {
+                            artifact.setFile( new File( d.getSystemPath() ) );
+                        }
+
+                        // If the dependencyManagement section listed exclusions,
+                        // add them to the managed artifacts here so that transitive
+                        // dependencies will be excluded if necessary.
+
+                        if ( ( null != d.getExclusions() ) && !d.getExclusions().isEmpty() )
+                        {
+                            List exclusions = new ArrayList();
+
+                            for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )
+                            {
+                                Exclusion e = (Exclusion) j.next();
+
+                                exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
+                            }
+
+                            ExcludesArtifactFilter eaf = new ExcludesArtifactFilter( exclusions );
+
+                            artifact.setDependencyFilter( eaf );
+                        }
+                        else
+                        {
+                            artifact.setDependencyFilter( null );
+                        }
+
+                        map.put( d.getManagementKey(), artifact );
+                    }
+                    catch ( InvalidVersionSpecificationException e )
+                    {
+                        map = Collections.EMPTY_MAP;
+                    }
+                }
+            }
+            else if ( map == null )
+            {
+                map = Collections.EMPTY_MAP;
+            }
+        }
+        managedVersionMap = map;

MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS83 INS43 INS59 UPD42 INS44 INS8 MOV8 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS25 INS60 INS25 INS21 MOV21 INS41 MOV41 INS25 INS60 INS25 INS21 INS41 INS42 INS42 INS32 INS27 MOV8 MOV43 INS59 INS27 INS8 INS7 INS42 INS27 MOV8 INS43 INS59 INS27 INS8 INS7 INS42 INS42 INS42 UPD42 INS42 INS33 INS42 INS14 INS42 INS33 INS60 INS24 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS33 INS60 INS60 INS25 INS42 INS42 UPD42 INS43 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS60 INS54 INS25 INS42 INS42 INS42 INS42 INS32 INS36 INS36 INS36 INS21 INS24 INS27 INS8 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS27 INS27 INS27 INS7 INS58 INS32 INS8 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS21 INS42 INS33 INS36 INS33 INS32 INS34 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS54 INS7 INS43 INS32 INS42 INS42 INS7 INS7 INS7 INS43 INS42 INS41 INS32 INS7 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS42 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS11 INS60 INS60 INS25 INS25 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS36 INS21 INS36 INS38 INS60 INS24 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS40 INS42 INS32 INS27 INS32 INS27 INS32 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS14 INS33 INS32 INS32 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS32 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL39 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL25 DEL8