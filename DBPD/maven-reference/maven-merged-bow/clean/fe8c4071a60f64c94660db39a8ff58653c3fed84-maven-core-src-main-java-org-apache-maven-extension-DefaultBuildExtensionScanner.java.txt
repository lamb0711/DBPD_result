Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.execution.MavenExecutionRequest;
-import org.apache.maven.profiles.ProfileManager;
-                                        ArtifactRepository localRepository,
-                                        ProfileManager globalProfileManager )
+                                        MavenExecutionRequest request )
-            scanInternal( pom, localRepository, globalProfileManager, visited, files );
+            scanInternal( pom, request, visited, files );
-                                        ArtifactRepository localRepository,
-                                        ProfileManager globalProfileManager )
+                                        MavenExecutionRequest request )
-        scanInternal( pom, localRepository, globalProfileManager, new ArrayList(), Collections.singletonList( pom ) );
+        scanInternal( pom, request, new ArrayList(), Collections.singletonList( pom ) );
-                               ArtifactRepository localRepository,
-                               ProfileManager globalProfileManager,
+                               MavenExecutionRequest request,
-            ModelLineage lineage = buildModelLineage( pom, localRepository, originalRemoteRepositories,
-                                                      globalProfileManager );
+            ModelLineage lineage = buildModelLineage( pom, request, originalRemoteRepositories );
-                checkModelBuildForExtensions( model, localRepository, inheritedRemoteRepositories );
+                checkModelBuildForExtensions( model, request, inheritedRemoteRepositories );
-                                               localRepository,
+                                               request,
-                                               globalProfileManager,
-                                            ArtifactRepository localRepository,
+                                            MavenExecutionRequest request,
-                                            ProfileManager globalProfileManager,
-                scanInternal( modulePomDirectory, localRepository, globalProfileManager, visitedModelIds, reactorFiles );
+                scanInternal( modulePomDirectory, request, visitedModelIds, reactorFiles );
-    private void checkModelBuildForExtensions( Model model, ArtifactRepository localRepository, List remoteRepositories )
+    private void checkModelBuildForExtensions( Model model, MavenExecutionRequest request, List remoteRepositories )
-                        extensionManager.addExtension( extension, model, remoteRepositories, localRepository );
+                        extensionManager.addExtension( extension, model, remoteRepositories, request );
-    private ModelLineage buildModelLineage( File pom, ArtifactRepository localRepository,
-                                            List originalRemoteRepositories, ProfileManager globalProfileManager )
+    private ModelLineage buildModelLineage( File pom, MavenExecutionRequest request,
+                                            List originalRemoteRepositories )
-            lineage = modelLineageBuilder.buildModelLineage( pom, localRepository, originalRemoteRepositories,
-                                                             globalProfileManager, false, true );
+            lineage = modelLineageBuilder.buildModelLineage( pom, request.getLocalRepository(), originalRemoteRepositories,
+                                                             request.getProfileManager(), false, true );

MOV26 UPD40 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 UPD42 UPD42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44