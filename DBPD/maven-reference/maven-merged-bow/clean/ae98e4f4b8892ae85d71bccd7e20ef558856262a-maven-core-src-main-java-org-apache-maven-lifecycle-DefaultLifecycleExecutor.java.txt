PR: MNG-971
add clean and site lifecycles for short names and possible bindings

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@307237 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.lifecycle.Lifecycle;
-    private List phases;
+    private List lifecycles;
+    private Map phaseToLifecycleMap;
+
-                if ( phases.contains( task ) )
+                if ( getPhaseToLifecycleMap().containsKey( task ) )
-        if ( phases.contains( task ) )
+        if ( getPhaseToLifecycleMap().containsKey( task ) )
+            Lifecycle lifecycle = getLifecycleForPhase( task );
+
-            Map lifecycleMappings = constructLifecycleMappings( session, task, project );
-            executeGoalWithLifecycle( task, session, lifecycleMappings, project, response );
+            Map lifecycleMappings = constructLifecycleMappings( session, task, project, lifecycle );
+            executeGoalWithLifecycle( task, session, lifecycleMappings, project, response, lifecycle );
-                                           MavenProject project, MavenExecutionResponse response )
+                                           MavenProject project, MavenExecutionResponse response, Lifecycle lifecycle )
-        List goals = processGoalChain( task, lifecycleMappings );
+        List goals = processGoalChain( task, lifecycleMappings, lifecycle );
+            Lifecycle lifecycle = getLifecycleForPhase( targetPhase );
+
-            lifecycleMappings = constructLifecycleMappings( session, targetPhase, project );
+            lifecycleMappings = constructLifecycleMappings( session, targetPhase, project, lifecycle );
-                Lifecycle lifecycleOverlay;
+                org.apache.maven.plugin.lifecycle.Lifecycle lifecycleOverlay;
-            executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject, response );
+            Lifecycle lifecycle = getLifecycleForPhase( targetPhase );
+
+            executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject, response, lifecycle );
+    private Lifecycle getLifecycleForPhase( String phase )
+        throws LifecycleExecutionException
+    {
+        Lifecycle lifecycle = (Lifecycle) getPhaseToLifecycleMap().get( phase );
+
+        if ( lifecycle == null )
+        {
+            throw new LifecycleExecutionException( "Unable to find lifecycle for phase '" + phase + "'" );
+        }
+        return lifecycle;
+    }
+
-    private Map constructLifecycleMappings( MavenSession session, String selectedPhase, MavenProject project )
+    private Map constructLifecycleMappings( MavenSession session, String selectedPhase, MavenProject project,
+                                            Lifecycle lifecycle )
-        Map lifecycleMappings = bindLifecycleForPackaging( session, selectedPhase, project );
+        Map lifecycleMappings = bindLifecycleForPackaging( session, selectedPhase, project, lifecycle );
-    private Map bindLifecycleForPackaging( MavenSession session, String selectedPhase, MavenProject project )
+    private Map bindLifecycleForPackaging( MavenSession session, String selectedPhase, MavenProject project,
+                                           Lifecycle lifecycle )
-        Map mappings = findMappingsForLifecycle( session, project );
+        Map mappings = findMappingsForLifecycle( session, project, lifecycle );
-        for ( Iterator i = phases.iterator(); i.hasNext(); )
+        for ( Iterator i = lifecycle.getPhases().iterator(); i.hasNext(); )
-    private Map findMappingsForLifecycle( MavenSession session, MavenProject project )
+    private Map findMappingsForLifecycle( MavenSession session, MavenProject project, Lifecycle lifecycle )
-        LifecycleMapping m;
+        Map mappings = null;
-            m = (LifecycleMapping) findExtension( project, LifecycleMapping.ROLE, packaging, session.getSettings(),
-                                                  session.getLocalRepository() );
+            LifecycleMapping m = (LifecycleMapping) findExtension( project, LifecycleMapping.ROLE, packaging,
+                                                                   session.getSettings(),
+                                                                   session.getLocalRepository() );
+            if ( m != null )
+            {
+                mappings = m.getPhases( lifecycle.getId() );
+            }
-        if ( m == null )
+        Map defaultMappings = lifecycle.getDefaultPhases();
+
+        if ( mappings == null )
-                m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
+                LifecycleMapping m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
+                mappings = m.getPhases( lifecycle.getId() );
-                throw new LifecycleExecutionException(
-                    "Cannot find lifecycle mapping for packaging: \'" + packaging + "\'.", e );
+                if ( defaultMappings == null )
+                {
+                    throw new LifecycleExecutionException(
+                        "Cannot find lifecycle mapping for packaging: \'" + packaging + "\'.", e );
+                }
-        return m.getPhases();
+        if ( mappings == null )
+        {
+            if ( defaultMappings == null )
+            {
+                throw new LifecycleExecutionException(
+                    "Cannot find lifecycle mapping for packaging: \'" + packaging + "\', and there is no default" );
+            }
+            else
+            {
+                mappings = defaultMappings;
+            }
+        }
+
+        return mappings;
-    private List processGoalChain( String task, Map phaseMap )
+    private List processGoalChain( String task, Map phaseMap, Lifecycle lifecycle )
-        int index = phases.indexOf( task );
+        int index = lifecycle.getPhases().indexOf( task );
-            String p = (String) phases.get( i );
+            String p = (String) lifecycle.getPhases().get( i );
-        Plugin plugin = null;
+        Plugin plugin;
+    public Map getPhaseToLifecycleMap()
+        throws LifecycleExecutionException
+    {
+        if ( phaseToLifecycleMap == null )
+        {
+            phaseToLifecycleMap = new HashMap();
+
+            for ( Iterator i = lifecycles.iterator(); i.hasNext(); )
+            {
+                Lifecycle lifecycle = (Lifecycle) i.next();
+
+                for ( Iterator p = lifecycle.getPhases().iterator(); p.hasNext(); )
+                {
+                    String phase = (String) p.next();
+
+                    if ( phaseToLifecycleMap.containsKey( phase ) )
+                    {
+                        Lifecycle prevLifecycle = (Lifecycle) phaseToLifecycleMap.get( phase );
+                        throw new LifecycleExecutionException( "Phase '" + phase +
+                            "' is defined in more than one lifecycle: '" + lifecycle.getId() + "' and '" +
+                            prevLifecycle.getId() + "'" );
+                    }
+                    else
+                    {
+                        phaseToLifecycleMap.put( phase, lifecycle );
+                    }
+                }
+            }
+        }
+        return phaseToLifecycleMap;
+    }
+

MOV23 INS23 INS31 INS31 INS83 MOV43 INS59 INS43 INS44 INS83 INS43 INS42 INS44 INS43 INS8 INS44 INS44 INS44 INS44 INS83 INS43 INS42 INS43 INS8 INS42 INS42 UPD42 INS43 INS42 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS42 INS42 INS25 INS41 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 MOV43 INS42 MOV43 INS42 INS43 INS43 INS59 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS32 UPD42 INS60 INS60 INS60 INS42 INS42 INS11 INS42 INS33 INS53 INS42 UPD42 INS33 INS60 INS25 INS42 INS42 INS32 UPD42 INS42 INS33 INS25 INS42 INS33 INS21 INS24 UPD42 MOV42 INS43 INS59 INS42 MOV43 INS59 INS43 INS59 INS43 INS32 INS14 INS42 INS42 MOV43 INS59 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS27 INS8 INS8 INS32 MOV43 INS7 INS58 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS27 INS32 INS42 MOV11 INS42 INS33 MOV21 INS60 INS8 INS42 INS33 INS53 INS21 INS42 UPD42 MOV42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 UPD42 MOV42 INS43 INS59 INS25 INS14 INS7 MOV43 INS43 INS42 INS42 INS32 INS43 INS59 INS58 INS32 INS8 INS32 UPD42 INS40 INS42 INS32 INS42 INS42 MOV11 INS42 INS32 INS27 MOV8 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS59 INS42 INS42 INS60 INS25 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS45 INS42 INS45 INS42 UPD42 MOV42 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS60 INS53 INS21 INS42 INS42 INS43 INS32 INS43 INS59 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL41 DEL33