o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
-import org.codehaus.plexus.logging.LogEnabled;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
- * Default implementation of the artifact collector.
- *
- * @version $Id$
- * @todo This needs to collect all errors and not die on the first error. If there are problems retrieving the metadata
- *       then we need all the information so that we can tell users about what we attempted to do.
- * @todo there 8 places where we can can range exceptions which is bad, again the result of not using a graph.
-    implements ArtifactCollector, LogEnabled
+    implements ArtifactCollector
-    /**
-     * The conflict resolver to use when none is specified.
-     */
+	@Requirement
-    public ArtifactResolutionResult collect( Set<Artifact> artifacts, Artifact originatingArtifact,
+    public ArtifactResolutionResult collect( Set<Artifact> artifacts, 
+                                             Artifact originatingArtifact,
+                                             Map managedVersions, 
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
-                                             List<ResolutionListener> listeners )
-    {
-        return collect( artifacts, originatingArtifact, Collections.EMPTY_MAP, localRepository, remoteRepositories,
-                        source, filter, listeners );
-    }
-
-    public ArtifactResolutionResult collect( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                             Map managedVersions, ArtifactRepository localRepository,
-                                             List<ArtifactRepository> remoteRepositories,
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
-                                             List<ResolutionListener> listeners )
-    {
-        return collect( artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source,
-                        filter, listeners, null );
-    }
-
-    public ArtifactResolutionResult collect( Set<Artifact> artifacts, Artifact originatingArtifact,
-                                             Map managedVersions, ArtifactRepository localRepository,
-                                             List<ArtifactRepository> remoteRepositories,
-                                             ArtifactMetadataSource source, ArtifactFilter filter,
+                                             ArtifactMetadataSource source, 
+                                             ArtifactFilter filter,
-            // TODO: warn that we're using the default conflict resolver
-
-            recurse( result, root, resolvedArtifacts, versionMap, localRepository, remoteRepositories, source, filter,
-                     listeners, conflictResolvers );
+            recurse( result, root, resolvedArtifacts, versionMap, localRepository, remoteRepositories, source, filter, listeners, conflictResolvers );
-    private void recurse( ArtifactResolutionResult result, ResolutionNode node,
-                          Map<Object, List<ResolutionNode>> resolvedArtifacts, ManagedVersionMap managedVersions,
-                          ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories,
-                          ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners,
+    private void recurse( ArtifactResolutionResult result, 
+                          ResolutionNode node,
+                          Map<Object, List<ResolutionNode>> resolvedArtifacts, 
+                          ManagedVersionMap managedVersions,
+                          ArtifactRepository localRepository, 
+                          List<ArtifactRepository> remoteRepositories,
+                          ArtifactMetadataSource source, 
+                          ArtifactFilter filter, 
+                          List<ResolutionListener> listeners,
-                                            versions =
-                                                source.retrieveAvailableVersions( resetArtifact, localRepository,
-                                                                                  remoteRepositories );
+                                            versions = source.retrieveAvailableVersions( resetArtifact, localRepository, remoteRepositories );
-                                            throw new ArtifactResolutionException(
-                                                                                   "Unable to get dependency information: "
-                                                                                       + e.getMessage(), resetArtifact,
-                                                                                   remoteRepositories, e );
+                                            throw new ArtifactResolutionException( "Unable to get dependency information: " + e.getMessage(), resetArtifact, remoteRepositories, e );
-                                    ArtifactVersion selectedVersion =
-                                        resetArtifact.getVersionRange().matchVersion(
-                                                                                      resetArtifact.getAvailableVersions() );
+                                    ArtifactVersion selectedVersion = resetArtifact.getVersionRange().matchVersion( resetArtifact.getAvailableVersions() );
-                            result.addVersionRangeViolation( new ArtifactResolutionException(
-                                                                                              "Cannot resolve artifact version conflict between "
-                                                                                                  + previous.getArtifact().getVersion()
-                                                                                                  + " and "
-                                                                                                  + node.getArtifact().getVersion(),
-                                                                                              previous.getArtifact() ) );
+                            ArtifactResolutionException are = new ArtifactResolutionException( "Cannot resolve artifact version conflict between " + previous.getArtifact().getVersion()
+                                                                                              + " and " + node.getArtifact().getVersion(), previous.getArtifact() ); 
+                            result.addVersionRangeViolation( are );
-                            result.addVersionRangeViolation( new ArtifactResolutionException(
-                                                                                              "Conflict resolver returned unknown resolution node: ",
-                                                                                              resolved.getArtifact() ) );
+                            result.addVersionRangeViolation( new ArtifactResolutionException( "Conflict resolver returned unknown resolution node: ", resolved.getArtifact() ) );
-
-                                Artifact relocated = source.retrieveRelocatedArtifact( artifact, localRepository, childRemoteRepositories );
-                                if ( !artifact.equals( relocated ) )
-                                {
-                                    artifact = relocated;
-                                    child.setArtifact( artifact );
-                                }
-    private void manageArtifact( ResolutionNode node, ManagedVersionMap managedVersions,
-                                 List<ResolutionListener> listeners )
+    private void manageArtifact( ResolutionNode node, ManagedVersionMap managedVersions, List<ResolutionListener> listeners )
-
-    public void enableLogging( Logger logger )
-    {
-        this.logger = logger;
-    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS78 INS42 INS60 INS43 INS59 INS42 INS42 MOV14 INS42 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31