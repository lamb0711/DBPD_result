o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
+import java.io.File;
-import java.util.Set;
-import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
-import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
-import org.apache.maven.artifact.metadata.ResolutionGroup;
-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.artifact.versioning.ArtifactVersion;
+import org.apache.maven.wagon.ResourceDoesNotExistException;
+import org.apache.maven.wagon.TransferFailedException;
+    static final String DEFAULT_LOCAL_REPO_ID = "local";
+    
+    static final String userHome = System.getProperty( "user.home" );
+    
+    static final File userMavenConfigurationHome = new File( userHome, ".m2" );
+    
+    static final File defaultUserLocalRepository = new File( userMavenConfigurationHome, "repository" );
+    
+    static final String DEFAULT_REMOTE_REPO_ID = "central";
+
+    static final String DEFAULT_REMOTE_REPO_URL = "http://repo1.maven.org/maven2";
+
+    Artifact createArtifact( String groupId, String artifactId, String version, String packaging );
+
-    Artifact createProjectArtifact( String groupId, String artifactId, String metaVersionId );
+    Artifact createProjectArtifact( String groupId, String artifactId, String version );
+    Artifact createArtifactWithClassifier( String groupId, String artifactId, String version, String type, String classifier );
+    
-    
-    //REMOVE
-    // This will disappear when we actually deal with resolving a root dependency and its dependencies. This is used everywhere because of that
-    // deficiency
-    Set<Artifact> createArtifacts( List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenRepositoryWrapper reactor )
-        throws VersionNotFoundException;
-
-    // Repository creation
-
-    // maven model
+        
-    ArtifactRepository createLocalRepository( String url, String repositoryId )
-        throws IOException;
-
+    ArtifactRepository createDefaultRemoteRepository()
+        throws InvalidRepositoryException;    
+    
+    ArtifactRepository createDefaultLocalRepository()
+        throws InvalidRepositoryException;
+    
+    ArtifactRepository createLocalRepository( File localRepository )
+        throws InvalidRepositoryException;
+    
-    /**
-     * this is the new metadata-based entry point into repository system. By default - it will transitively resolve metadata
-     * for the supplied root GAV and return a flat set of dependency metadatas. Tweaking the request allows user to ask for 
-     * various formats of the response - resolved tree, resolved graph or dirty tree. Only the resolved tree is implemented now
-     * in MercuryRepositorySystem, LegacyRepositorySystem ignores this call for now.  
-     * 
-     * @param request - supplies all necessary details for the resolution configuration
-     * @return
-     */
-       
-    //REMOVE
-    // Network enablement: this needs to go as we will know at a higher level from the embedder if the system is offline or not, we should not have to
-    // deal with this here.
-    void setOnline( boolean online );
-    boolean isOnline();
-    
-    //REMOVE
-    // These should be associated with repositories and the repositories should be examine as part of metadatda and
-    // artifact resolution. So these methods should also not be here.
-    void addProxy( String protocol, String host, int port, String username, String password, String nonProxyHosts );
-    void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey, String passphrase );
-    void addPermissionInfo( String repositoryId, String filePermissions, String directoryPermissions );
-    
-    // Mirrors
-    
+           
+    //TODO: remove the request should already be processed to select the mirror for the request instead of the processing happen internally.
+    // Mirrors    
-    List<ArtifactRepository> getMirrors( List<ArtifactRepository> repositories );    
+    List<ArtifactRepository> getMirrors( List<ArtifactRepository> repositories );  
+    
+    // Install
+    
+    // Deploy
+    
+    // Map types of artifacts
+    
+    // Raw file transfers
+    void publish( ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor )
+        throws TransferFailedException;
+    
+    void retrieve( ArtifactRepository repository, File destination, String remotePath, TransferListener downloadMonitor )
+        throws TransferFailedException, ResourceDoesNotExistException;        

MOV26 MOV26 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 MOV43 INS59 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 MOV43 INS59 INS83 INS83 MOV43 INS59 UPD42 INS44 INS43 INS42 MOV44 MOV44 MOV44 MOV43 INS42 MOV44 INS44 MOV44 MOV44 MOV44 UPD42 UPD43 INS43 INS42 INS43 INS43 INS42 INS43 UPD42 MOV44 INS43 UPD42 INS44 INS44 INS43 INS43 INS42 INS45 INS42 INS32 UPD42 MOV42 INS42 INS14 UPD42 MOV42 INS42 INS14 INS42 INS45 INS42 INS45 UPD42 INS43 INS42 INS42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 INS43 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS43 INS42 INS42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 MOV42 UPD43 UPD42 INS43 INS42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS45 INS43 INS42 INS45 INS42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL42 DEL44 DEL43 DEL31 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL31 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL44 DEL42 DEL44 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL65 DEL29 DEL42 DEL44 DEL43 DEL42 DEL44