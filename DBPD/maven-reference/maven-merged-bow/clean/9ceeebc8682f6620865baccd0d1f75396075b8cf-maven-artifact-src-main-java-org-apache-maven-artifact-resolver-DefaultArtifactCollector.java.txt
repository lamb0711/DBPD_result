PR: MNG-1363

o Disabled version-range checking for system-scoped dependencies...will use recommendedVersion where available, if a concrete version is not available.

o Disabled collection of the transitive deps of a system-scoped dep.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@332220 13f79535-47bb-0310-9956-ffa450edef68

-                            // set the recommended version
-                            // TODO: maybe its better to just pass the range through to retrieval and use a transformation?
-                            ArtifactVersion version;
-                            if ( !artifact.isSelectedVersionKnown() )
+                            if ( Artifact.SCOPE_SYSTEM.equals( artifact.getScope() ) )
-                                List versions = artifact.getAvailableVersions();
-                                if ( versions == null )
-                                {
-                                    versions = source.retrieveAvailableVersions( artifact, localRepository,
-                                                                                 remoteRepositories );
-                                    artifact.setAvailableVersions( versions );
-                                }
-
+                                String selectedVersion = "unknown";
-
-                                version = versionRange.matchVersion( versions );
-
-                                if ( version == null )
+                                
+                                if ( versionRange != null )
-                                    if ( versions.isEmpty() )
+                                    ArtifactVersion version = ( versionRange != null ) ? ( versionRange.getRecommendedVersion() ) : null;
+                                    
+                                    if ( version != null )
-                                        throw new OverConstrainedVersionException(
-                                            "No versions are present in the repository for the artifact with a range " +
-                                                versionRange, artifact, remoteRepositories );
-                                    }
-                                    else
-                                    {
-                                        throw new OverConstrainedVersionException( "Couldn't find a version in " +
-                                            versions + " to match range " + versionRange, artifact,
-                                                                                          remoteRepositories );
+                                        selectedVersion = version.toString();
+                                
+                                artifact.selectVersion( selectedVersion );
-                                version = artifact.getSelectedVersion();
-                            }
+                                // set the recommended version
+                                // TODO: maybe its better to just pass the range through to retrieval and use a transformation?
+                                ArtifactVersion version;
+                                if ( !artifact.isSelectedVersionKnown() )
+                                {
+                                    List versions = artifact.getAvailableVersions();
+                                    if ( versions == null )
+                                    {
+                                        versions = source.retrieveAvailableVersions( artifact, localRepository,
+                                                                                     remoteRepositories );
+                                        artifact.setAvailableVersions( versions );
+                                    }
-                            artifact.selectVersion( version.toString() );
-                            fireEvent( ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, child );
+                                    VersionRange versionRange = artifact.getVersionRange();
+
+                                    version = versionRange.matchVersion( versions );
+
+                                    if ( version == null )
+                                    {
+                                        if ( versions.isEmpty() )
+                                        {
+                                            throw new OverConstrainedVersionException(
+                                                                                       "No versions are present in the repository for the artifact with a range "
+                                                                                           + versionRange, artifact,
+                                                                                       remoteRepositories );
+                                        }
+                                        else
+                                        {
+                                            throw new OverConstrainedVersionException( "Couldn't find a version in "
+                                                + versions + " to match range " + versionRange, artifact,
+                                                                                       remoteRepositories );
+                                        }
+                                    }
+                                }
+                                else
+                                {
+                                    version = artifact.getSelectedVersion();
+                                }
+
+                                artifact.selectVersion( version.toString() );
+                                fireEvent( ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, child );
+                            }
-                    recurse( child, resolvedArtifacts, managedVersions, localRepository, remoteRepositories, source,
-                             filter, listeners );
+                    // don't pull in the transitive deps of a system-scoped dependency.
+                    if ( !Artifact.SCOPE_SYSTEM.equals( artifact.getScope() ) )
+                    {
+                        recurse( child, resolvedArtifacts, managedVersions, localRepository, remoteRepositories,
+                                 source, filter, listeners );
+                    }

INS25 INS38 INS8 INS32 MOV21 INS8 INS40 INS42 INS32 INS25 INS42 INS42 INS32 INS8 MOV8 INS40 INS42 INS32 INS60 INS60 INS25 INS21 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS16 INS42 INS33 INS21 INS36 INS36 INS33 INS7 INS27 INS32 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42