MNG-3976 - Raw Pom Retreival for Mercury.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@740434 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
+import java.util.*;
+import org.apache.maven.mercury.PomProcessor;
+import org.apache.maven.mercury.PomProcessorException;
+import org.apache.maven.mercury.MavenDomainModel;
+import org.apache.maven.mercury.MavenDomainModelFactory;
+import org.apache.maven.mercury.builder.api.MetadataReader;
+import org.apache.maven.mercury.builder.api.MetadataReaderException;
+import org.apache.maven.mercury.builder.api.DependencyProcessorException;
+import org.apache.maven.mercury.artifact.ArtifactBasicMetadata;
-    implements ProjectBuilder, Mixer, LogEnabled
+    implements ProjectBuilder, Mixer, PomProcessor, LogEnabled
+    public List<ModelProperty> getRawPom(ArtifactBasicMetadata bmd, MetadataReader mdReader, Map system, Map user)
+            throws MetadataReaderException, PomProcessorException {
+        if ( bmd == null )
+        {
+            throw new IllegalArgumentException( "bmd: null" );
+        }
+
+        if ( mdReader == null )
+        {
+            throw new IllegalArgumentException( "mdReader: null" );
+        }
+
+        List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
+        interpolatorProperties.add( new InterpolatorProperty( "${mavenVersion}", "3.0-SNAPSHOT",
+                                                              PomInterpolatorTag.EXECUTION_PROPERTIES.name() ) );
+
+        if ( system != null )
+        {
+            interpolatorProperties.addAll(
+                InterpolatorProperty.toInterpolatorProperties( system, PomInterpolatorTag.EXECUTION_PROPERTIES.name() ) );
+        }
+        if ( user != null )
+        {
+            interpolatorProperties.addAll(
+                InterpolatorProperty.toInterpolatorProperties( user, PomInterpolatorTag.USER_PROPERTIES.name() ) );
+        }
+
+       List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        try
+        {
+            // MavenDomainModel superPom =
+            //     new MavenDomainModel(MavenDependencyProcessor.class.getResourceAsStream( "pom-4.0.0.xml" ));
+            // domainModels.add(superPom);
+
+            byte[] superBytes = mdReader.readMetadata( bmd );
+
+            if ( superBytes == null || superBytes.length < 1 )
+                throw new PomProcessorException( "cannot read metadata for " + bmd.getGAV() );
+
+            MavenDomainModel domainModel = new MavenDomainModel( superBytes );
+            domainModels.add( domainModel );
+
+            Collection<ModelContainer> activeProfiles = domainModel.getActiveProfileContainers( interpolatorProperties );
+
+            for ( ModelContainer mc : activeProfiles )
+            {
+                domainModels.add( new MavenDomainModel( transformProfiles( mc.getProperties() ) ) );
+            }
+
+            List<DomainModel> parentModels = getParentsOfDomainModel( domainModel, mdReader );
+
+            if( parentModels == null )
+                throw new PomProcessorException( "cannot read parent for " + bmd.getGAV() );
+
+            domainModels.addAll( parentModels );
+        }
+        catch ( IOException e )
+        {
+            throw new MetadataReaderException( "Failed to create domain model. Message = " + e.getMessage() );
+        }
+
+        PomTransformer transformer = new PomTransformer( new MavenDomainModelFactory() );
+        ModelTransformerContext ctx =
+            new ModelTransformerContext( PomTransformer.MODEL_CONTAINER_INFOS );
+
+        try
+        {
+            MavenDomainModel model =
+                ( (MavenDomainModel) ctx.transform( domainModels, transformer, transformer, null,
+                                                    interpolatorProperties, null ) );
+            return model.getModelProperties();
+        }
+        catch ( IOException e )
+        {
+            throw new MetadataReaderException( "Unable to transform model" );
+        }
+    }
+
+
+    private static List<DomainModel> getParentsOfDomainModel( MavenDomainModel domainModel, MetadataReader mdReader )
+        throws IOException, MetadataReaderException, PomProcessorException
+    {
+        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        if ( domainModel.hasParent() )
+        {
+            byte[] b = mdReader.readMetadata( domainModel.getParentMetadata() );
+
+            if ( b == null || b.length < 1 )
+                throw new PomProcessorException( "cannot read metadata for " + domainModel.getParentMetadata() );
+
+            MavenDomainModel parentDomainModel =
+                new MavenDomainModel( b );
+            domainModels.add( parentDomainModel );
+            domainModels.addAll( getParentsOfDomainModel( parentDomainModel, mdReader ) );
+        }
+        return domainModels;
+    }
+
+    private static List<ModelProperty> transformProfiles( List<ModelProperty> modelProperties )
+    {
+        List<ModelProperty> properties = new ArrayList<ModelProperty>();
+        for ( ModelProperty mp : modelProperties )
+        {
+            if ( mp.getUri().startsWith( ProjectUri.Profiles.Profile.xUri )
+                && !mp.getUri().equals( ProjectUri.Profiles.Profile.id )
+                && !mp.getUri().startsWith( ProjectUri.Profiles.Profile.Activation.xUri ) )
+            {
+                properties.add( new ModelProperty( mp.getUri().replace( ProjectUri.Profiles.Profile.xUri,
+                                                                        ProjectUri.xUri ), mp.getResolvedValue() ) );
+            }
+        }
+        return properties;
+    }

MOV26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 UPD40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS43 INS31 INS31 INS31 INS42 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS25 INS60 INS21 INS25 INS25 INS60 INS54 INS60 INS60 INS54 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS74 INS59 INS32 INS27 INS8 INS27 INS8 INS74 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS33 INS53 INS42 INS33 INS53 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS33 INS21 INS42 INS33 INS21 INS43 INS43 INS42 INS14 INS60 INS25 INS60 INS21 INS60 INS70 INS60 INS25 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS14 INS60 INS41 INS44 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS60 INS25 INS60 INS21 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS14 INS14 INS42 INS42 INS74 INS43 INS45 INS45 INS32 INS32 INS32 INS42 INS42 INS74 INS5 INS59 INS27 INS53 INS43 INS59 INS32 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS27 INS53 INS32 INS43 INS42 INS53 INS43 INS14 INS43 INS40 INS43 INS59 INS32 INS43 INS42 INS53 INS42 INS42 INS74 INS5 INS59 INS27 INS53 INS43 INS59 INS32 INS32 INS42 INS42 INS74 INS42 INS27 INS8 INS43 INS45 INS43 INS45 INS43 INS43 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS39 INS85 INS42 INS32 INS27 INS27 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS43 INS43 INS42 INS32 INS42 INS33 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS14 INS43 INS43 INS39 INS85 INS42 INS32 INS27 INS27 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS32 INS38 INS38 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS11 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS40 INS34 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS32 INS32 INS40 INS42 INS40 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS14 INS42 INS45 INS32 INS42 INS45 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42