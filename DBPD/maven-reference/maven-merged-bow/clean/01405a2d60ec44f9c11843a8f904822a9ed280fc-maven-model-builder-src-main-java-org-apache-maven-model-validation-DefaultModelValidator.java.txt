[MNG-6667] Enhance the error reporting when trying to build a modelVersion that the current Maven doesn't understand

-import java.io.File;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
+import java.io.File;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
-            validateEnum( "modelVersion", problems, Severity.ERROR, Version.V20, m.getModelVersion(), null, m,
-                          "4.0.0" );
+            validateModelVersion( problems, m.getModelVersion(), m, "4.0.0" );
+    private boolean validateModelVersion( ModelProblemCollector problems, String string, InputLocationTracker tracker,
+                                          String... validVersions )
+    {
+        if ( string == null || string.length() <= 0 )
+        {
+            return true;
+        }
+
+        List<String> values = Arrays.asList( validVersions );
+
+        if ( values.contains( string ) )
+        {
+            return true;
+        }
+
+        boolean newerThanAll = true;
+        boolean olderThanAll = true;
+        for ( String validValue : validVersions )
+        {
+            final int comparison = compareModelVersions( validValue, string );
+            newerThanAll = newerThanAll && comparison < 0;
+            olderThanAll = olderThanAll && comparison > 0;
+        }
+
+        if ( newerThanAll )
+        {
+            addViolation( problems, Severity.FATAL, Version.V20, "modelVersion", null,
+                          "of '" + string + "' is newer than the versions supported by this version of Maven: " + values
+                              + ". Building this project requires a newer version of Maven.", tracker );
+
+        }
+        else if ( olderThanAll )
+        {
+            // note this will not be hit for Maven 1.x project.xml as it is an incompatible schema
+            addViolation( problems, Severity.FATAL, Version.V20, "modelVersion", null,
+                          "of '" + string + "' is older than the versions supported by this version of Maven: " + values
+                              + ". Building this project requires an older version of Maven.", tracker );
+
+        }
+        else
+        {
+            addViolation( problems, Severity.ERROR, Version.V20, "modelVersion", null,
+                          "must be one of " + values + " but is '" + string + "'.", tracker );
+        }
+
+        return false;
+    }
+
+    /**
+     * Compares two model versions.
+     *
+     * @param first the first version.
+     * @param second the second version.
+     * @return negative if the first version is newer than the second version, zero if they are the same or positive if
+     * the second version is the newer.
+     */
+    private static int compareModelVersions( String first, String second )
+    {
+        // we use a dedicated comparator because we control our model version scheme.
+        String[] firstSegments = StringUtils.split( first, "." );
+        String[] secondSegments = StringUtils.split( second, "." );
+        for ( int i = 0; i < Math.min( firstSegments.length, secondSegments.length ); i++ )
+        {
+            int result = Long.valueOf( firstSegments[i] ).compareTo( Long.valueOf( secondSegments[i] ) );
+            if ( result != 0 )
+            {
+                return result;
+            }
+        }
+        if ( firstSegments.length == secondSegments.length )
+        {
+            return 0;
+        }
+        return firstSegments.length > secondSegments.length ? -1 : 1;
+    }
+
+    @SuppressWarnings( "checkstyle:parameternumber" )

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS31 INS31 INS79 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS45 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS25 INS60 INS60 INS70 INS25 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS60 INS24 INS25 INS41 INS42 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS32 INS8 INS39 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS8 INS25 INS9 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS16 INS27 INS27 INS41 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS9 INS42 INS9 INS43 INS42 INS60 INS21 INS21 INS21 INS42 INS8 INS8 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS40 INS40 INS41 INS27 INS38 INS34 INS42 INS33 INS32 INS34 INS9 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS83 INS39 INS59 INS7 INS7 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS40 INS40 INS39 INS59 INS27 INS8 INS34 INS40 INS40 INS34 UPD42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS42 INS40 INS40 INS45 INS33 INS27 INS42 INS32 INS32 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS42 INS42 INS27 INS42 INS27 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS40 INS40 INS45 INS33 INS27 INS42 INS42 INS42 INS40 INS40 INS45 INS33 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS34 INS42 INS34 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS42 INS42 DEL45 DEL40 DEL40 DEL33