Added methods to repeat arguments (for group, tag, link and linkoffline options provided by the Javadoc standard doclet). Added plexus-utils as transitive dep.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@230549 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.lang.StringUtils;
+import org.codehaus.plexus.util.StringUtils;
-    private static final String RESOURCE_DIR = ClassUtils.getPackageName(JavadocReport.class).replace('.', '/');
+    private static final String RESOURCE_DIR = ClassUtils.getPackageName( JavadocReport.class ).replace( '.', '/' );
+
-    
+
+
+
+
+
-   
+
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="true"
+     * default-value="true"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="true"
+     * default-value="true"
-     *            default-value="Copyright ${project.inceptionYear-currentYear} ${project.organization.name}. All Rights Reserved."
+     * default-value="Copyright ${project.inceptionYear-currentYear} ${project.organization.name}. All Rights Reserved."
-     *            default-value="ISO-8859-1"
+     * default-value="ISO-8859-1"
-     *            default-value="${project.build.directory}/site/apidocs"
+     * default-value="${project.build.directory}/site/apidocs"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="${windowtitle}"
+     * default-value="${windowtitle}"
+     * It is a comma separated String.
+     * It is a comma separated String.
+     * It is a comma separated String.
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     * See <a href="http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html#linksource">nodeprecated</a>.
+     * See <a href="http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html#nodeprecated">nodeprecated</a>.
-     *            default-value="false"
+     * default-value="false"
-    
+
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
-     *            default-value="false"
+     * default-value="false"
+     * It is a comma separated String.
-     *            default-value="true"
+     * default-value="true"
-     *            default-value="true"
+     * default-value="true"
-     *            default-value="${project.name} ${project.version} API"
+     * default-value="${project.name} ${project.version} API"
+
-                    if ( ( NumberUtils.isDigits( this.maxmemory.substring( 0, this.maxmemory.length() - 1) ) ) 
-                        && ( this.maxmemory.toLowerCase().endsWith( "m" ) ) ) 
+                    if ( ( NumberUtils.isDigits( this.maxmemory.substring( 0, this.maxmemory.length() - 1 ) ) )
+                        && ( this.maxmemory.toLowerCase().endsWith( "m" ) ) )
-
-                        getLog().error( "The maxmemory '" + this.maxmemory + "' is not a valid number. Ignore this option." );
+                        getLog().error(
+                                        "The maxmemory '" + this.maxmemory
+                                            + "' is not a valid number. Ignore this option." );
-                    if ( ( NumberUtils.isDigits( this.minmemory.substring( 0, this.minmemory.length() - 1) ) ) 
-                        && ( this.minmemory.toLowerCase().endsWith( "m" ) ) ) 
+                    if ( ( NumberUtils.isDigits( this.minmemory.substring( 0, this.minmemory.length() - 1 ) ) )
+                        && ( this.minmemory.toLowerCase().endsWith( "m" ) ) )
-
-                        getLog().error( "The minmemory '" + this.minmemory + "' is not a valid number. Ignore this option." );
+                        getLog().error(
+                                        "The minmemory '" + this.minmemory
+                                            + "' is not a valid number. Ignore this option." );
-                    if ( ( model.getOrganization() != null ) && ( !StringUtils.isEmpty( model.getOrganization().getName() ) ) )
+                    if ( ( model.getOrganization() != null )
+                        && ( !StringUtils.isEmpty( model.getOrganization().getName() ) ) )
-                addArgIfNotEmpty( "-group", this.group );
+                addArgIfNotEmpty( "-group", this.group, true );
-                addArgIfNotEmpty( "-link", this.link );
-                addArgIfNotEmpty( "-linkoffline", this.linkoffline );
+                addArgIfNotEmpty( "-link", this.link, true );
+                addArgIfNotEmpty( "-linkoffline", this.linkoffline, true );
-                addArgIfNotEmpty( "-tag", this.tag, 1.4f );
+                addArgIfNotEmpty( "-tag", this.tag, 1.4f, true );
-            final int exitCode = CommandLineUtils.executeCommandLine( cmd, new DefaultConsumer(), new DefaultConsumer() );
+            final int exitCode = CommandLineUtils
+                .executeCommandLine( cmd, new DefaultConsumer(), new DefaultConsumer() );
-        final File javadocExe = ( SystemUtils.IS_OS_AIX ? new File( SystemUtils.getJavaHome() + "/../sh", javadocCommand )
-                                                  : new File( SystemUtils.getJavaHome() + "/../bin", javadocCommand ) );
+        final File javadocExe = ( SystemUtils.IS_OS_AIX ? new File( SystemUtils.getJavaHome() + "/../sh",
+                                                                    javadocCommand ) : new File( SystemUtils
+            .getJavaHome()
+            + "/../bin", javadocCommand ) );
-        
+
+     * @see #addArgIfNotEmpty(String, String, boolean)
+     * 
+        addArgIfNotEmpty( key, value, false );
+    }
+
+    /**
+     * Convenience method to add an argument to the <code>command line</code>
+     * if the the value is not null or empty.
+     * <p>
+     * Moreover, the value could be comma separated.
+     * 
+     * @param key the argument name.
+     * @param value the argument value to be added.
+     * @param repeatKey repeat or not the key in the command line
+     */
+    private void addArgIfNotEmpty( final String key, final String value, final boolean repeatKey )
+    {
-                this.cmd.createArgument().setValue( current );
+
+                if ( !StringUtils.isEmpty( current ) )
+                {
+                    this.cmd.createArgument().setValue( current );
+
+                    if ( token.hasMoreTokens() && repeatKey )
+                    {
+                        this.cmd.createArgument().setValue( key );
+                    }
+                }
+     * @see #addArgIfNotEmpty(String, String, float, boolean)
+     * 
+     * @param key the argument name.
+     * @param value the argument value to be added.
+     * @param requiredJavaVersion the required Java version, for example 1.31f or 1.4f
+     */
+    private void addArgIfNotEmpty( final String key, final String value, final float requiredJavaVersion )
+    {
+        addArgIfNotEmpty( key, value, requiredJavaVersion, false );
+    }
+
+    /**
+     * Convenience method to add an argument to the <code>command line</code>
+     * regarding the requested Java version.
+     * 
-     * @param key
-     *            the argument name.
-     * @param value
-     *            the argument value to be added.
-     * @param requiredJavaVersion  
-     *            the required Java version, for example 1.31f or 1.4f
+     * @param key the argument name.
+     * @param value the argument value to be added.
+     * @param requiredJavaVersion the required Java version, for example 1.31f or 1.4f
+     * @param repeatKey repeat or not the key in the command line
-    private void addArgIfNotEmpty( final String key, final String value, final float requiredJavaVersion )
+    private void addArgIfNotEmpty( final String key, final String value, final float requiredJavaVersion,
+                                  final boolean repeatKey )
-            addArgIfNotEmpty( key, value );
+            addArgIfNotEmpty( key, value, repeatKey );
-    
+

MOV26 UPD40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS44 MOV65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS65 INS65 INS83 INS39 INS42 INS65 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS21 INS65 INS83 INS39 INS42 INS66 INS66 INS66 UPD66 INS66 INS68 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS68 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS69 INS69 INS69 INS42 INS42 INS42 INS9 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS42 INS42 INS9 INS43 INS43 INS39 INS43 INS43 INS39 INS39 INS42 INS42 INS25 INS42 INS42 INS42 INS38 INS8 INS9 INS9 INS9 INS9 INS32 MOV21 INS25 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS22 INS42 INS52 INS42 DEL66