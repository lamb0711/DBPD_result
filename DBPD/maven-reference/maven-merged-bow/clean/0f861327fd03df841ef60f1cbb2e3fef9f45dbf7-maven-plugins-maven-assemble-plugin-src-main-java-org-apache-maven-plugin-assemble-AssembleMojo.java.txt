standard assemly - bin


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163721 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.IOUtil;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+ * @parameter name="basedir" type="String" required="true" validator="" expression="#basedir" description=""
- * @parameter name="descriptor" type="java.io.File" required="true" validator="" expression="#maven.assemble.descriptor" description=""
+ * @parameter name="descriptor" type="java.io.File" required="false" validator="" expression="#maven.assemble.descriptor" description=""
+ * @parameter name="descriptorId" type="String" required="false" validator="" expression="#maven.assemble.descriptorId" description=""
-    private File outputDirectory;
+    private String basedir;
+
+    /**
+     * @todo use java.io.File
+     */
+    private String outputDirectory;
+    private String descriptorId;
+
-        AssemblyXpp3Reader reader = new AssemblyXpp3Reader();
-        Assembly assembly = reader.read( new FileReader( descriptor ) );
+        Reader r = null;
-        // TODO: include dependencies marked for distribution under certain formats
-        // TODO: have a default set of descriptors that can be used instead of the file
-        // TODO: how, might we plugin this into an installer, such as NSIS?
-        // TODO: allow file mode specifications?
-
-        String fullName = finalName + "-" + assembly.getId();
-
-        for ( Iterator i = assembly.getFormats().iterator(); i.hasNext(); )
+        if ( descriptor != null )
-            String format = (String) i.next();
-
-            String filename = fullName + "." + format;
-
-            // TODO: use component roles? Can we do that in a mojo?
-            Archiver archiver;
-            if ( format.startsWith( "tar" ) )
+            r = new FileReader( descriptor );
+        }
+        else if ( descriptorId != null )
+        {
+            InputStream resourceAsStream = getClass().getResourceAsStream( "/assemblies/" + descriptorId + ".xml" );
+            if ( resourceAsStream == null )
-                TarArchiver tarArchiver = new TarArchiver();
-                archiver = tarArchiver;
-                int index = format.indexOf( '.' );
-                if ( index >= 0 )
+                // TODO: better exception
+                throw new Exception( "Descriptor with ID '" + descriptorId + "' not found" );
+            }
+            r = new InputStreamReader( resourceAsStream );
+        }
+        else
+        {
+            // TODO: better exception
+            throw new Exception( "You must specify descriptor or descriptorId" );
+        }
+
+        try
+        {
+            AssemblyXpp3Reader reader = new AssemblyXpp3Reader();
+            Assembly assembly = reader.read( r );
+
+            // TODO: include dependencies marked for distribution under certain formats
+            // TODO: how, might we plugin this into an installer, such as NSIS?
+            // TODO: allow file mode specifications?
+
+            String fullName = finalName + "-" + assembly.getId();
+
+            for ( Iterator i = assembly.getFormats().iterator(); i.hasNext(); )
+            {
+                String format = (String) i.next();
+
+                String filename = fullName + "." + format;
+
+                // TODO: use component roles? Can we do that in a mojo?
+                Archiver archiver;
+                if ( format.startsWith( "tar" ) )
-                    // TODO: this needs a cleanup in plexus archiver - use a real typesafe enum
-                    TarArchiver.TarCompressionMethod tarCompressionMethod = new TarArchiver.TarCompressionMethod();
-                    // TODO: this should accept gz and bz2 as well so we can skip over the switch
-                    String compression = format.substring( index + 1 );
-                    if ( compression.equals( "gz" ) )
+                    TarArchiver tarArchiver = new TarArchiver();
+                    archiver = tarArchiver;
+                    int index = format.indexOf( '.' );
+                    if ( index >= 0 )
-                        tarCompressionMethod.setValue( "gzip" );
+                        // TODO: this needs a cleanup in plexus archiver - use a real typesafe enum
+                        TarArchiver.TarCompressionMethod tarCompressionMethod = new TarArchiver.TarCompressionMethod();
+                        // TODO: this should accept gz and bz2 as well so we can skip over the switch
+                        String compression = format.substring( index + 1 );
+                        if ( compression.equals( "gz" ) )
+                        {
+                            tarCompressionMethod.setValue( "gzip" );
+                        }
+                        else if ( compression.equals( "bz2" ) )
+                        {
+                            tarCompressionMethod.setValue( "bzip2" );
+                        }
+                        else
+                        {
+                            // TODO: better handling
+                            throw new IllegalArgumentException( "Unknown compression format: " + compression );
+                        }
+                        tarArchiver.setCompression( tarCompressionMethod );
-                    else if ( compression.equals( "bz2" ) )
+                }
+                else if ( format.startsWith( "zip" ) )
+                {
+                    archiver = new ZipArchiver();
+                }
+                else if ( format.startsWith( "jar" ) )
+                {
+                    // TODO: use MavenArchiver for manifest?
+                    archiver = new JarArchiver();
+                }
+                else
+                {
+                    // TODO: better handling
+                    throw new IllegalArgumentException( "Unknown format: " + format );
+                }
+
+                for ( Iterator j = assembly.getFilesets().iterator(); j.hasNext(); )
+                {
+                    FileSet fileset = (FileSet) j.next();
+                    String directory = fileset.getDirectory();
+                    String output = fileset.getOutputDirectory();
+                    if ( directory == null )
-                        tarCompressionMethod.setValue( "bzip2" );
+                        directory = basedir;
+                        if ( output == null )
+                        {
+                            output = "/";
+                        }
-                        // TODO: better handling
-                        throw new IllegalArgumentException( "Unknown compression format: " + compression );
+                        if ( output == null )
+                        {
+                            output = directory;
+                        }
-                    tarArchiver.setCompression( tarCompressionMethod );
-                }
-            }
-            else if ( format.startsWith( "zip" ) )
-            {
-                archiver = new ZipArchiver();
-            }
-            else if ( format.startsWith( "jar" ) )
-            {
-                // TODO: use MavenArchiver for manifest?
-                archiver = new JarArchiver();
-            }
-            else
-            {
-                // TODO: better handling
-                throw new IllegalArgumentException( "Unknown format: " + format );
-            }
+                    if ( !output.endsWith( "/" ) && !output.endsWith( "\\" ) )
+                    {
+                        // TODO: shouldn't archiver do this?
+                        output += '/';
+                    }
-            for ( Iterator j = assembly.getFilesets().iterator(); j.hasNext(); )
-            {
-                FileSet fileset = (FileSet) j.next();
-                String directory = fileset.getDirectory();
-                String output = fileset.getOutputDirectory();
-                if ( output == null )
-                {
-                    output = directory;
-                }
-                if ( !output.endsWith( "/" ) && !output.endsWith( "\\" ) )
-                {
-                    // TODO: shouldn't archiver do this?
-                    output += '/';
+                    String[] includes = (String[]) fileset.getIncludes().toArray( EMPTY_STRING_ARRAY );
+                    if ( includes.length == 0 )
+                    {
+                        includes = null;
+                    }
+                    String[] excludes = (String[]) fileset.getExcludes().toArray( EMPTY_STRING_ARRAY );
+                    archiver.addDirectory( new File( directory ), output, includes, excludes );
-                String[] includes = (String[]) fileset.getIncludes().toArray( EMPTY_STRING_ARRAY );
-                if ( includes.length == 0 )
-                {
-                    includes = null;
-                }
-                String[] excludes = (String[]) fileset.getExcludes().toArray( EMPTY_STRING_ARRAY );
-                archiver.addDirectory( new File( directory ), output, includes, excludes );
+                archiver.setDestFile( new File( outputDirectory, filename ) );
+                archiver.createArchive();
-
-            archiver.setDestFile( new File( outputDirectory, filename ) );
-            archiver.createArchive();
+        }
+        finally
+        {
+            IOUtil.close( r );

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS65 INS65 UPD43 INS59 INS29 INS83 INS43 MOV59 INS83 INS43 INS59 INS8 INS66 UPD66 INS66 UPD42 INS42 INS65 INS42 INS42 INS42 INS60 INS25 INS54 INS66 INS43 INS59 INS27 INS8 INS25 MOV8 INS8 INS42 INS42 INS33 INS42 INS33 INS21 INS27 INS8 INS8 INS21 INS7 INS42 INS33 INS60 INS25 INS21 INS53 INS32 INS42 MOV14 INS43 INS59 INS27 INS8 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS14 INS43 INS45 INS42 INS32 INS42 INS27 INS14 INS43 INS42 INS42 INS25 INS42 INS45 INS42 INS45 INS43 INS27 INS42 INS27 INS8 INS8 INS42 INS45 INS42 INS45 INS42 INS33 INS21 INS25 MOV25 INS7 INS27 INS8 INS42 INS42 INS42 INS33 INS21 INS7 INS42 INS45