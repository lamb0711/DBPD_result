o Adding support for selecting the Plexus compiler implementation. Configure
  the compiler plugin with <compilerId>, both "javac" and "eclipse" will work.
  The default value is still "javac" so this shouldn't break anything.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@227494 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.compiler.javac.JavacCompiler;
+import org.codehaus.plexus.compiler.manager.CompilerManager;
+import org.codehaus.plexus.compiler.manager.NoSuchCompilerException;
-
-    private Compiler compiler = new JavacCompiler();
-    
-     * 
+     *
-    
+
-     * 
+     *
-    
+
-     * 
+     *
-   
+
-    
+
-     * 
+     *
-    
+
+    /**
+     * @parameter default-value="javac"
+     */
+    private String compilerId;
+
+    /**
+     * @parameter expression="${component.org.codehaus.plexus.compiler.manager.CompilerManager}"
+     * @required
+     * @readonly
+     */
+    private CompilerManager compilerManager;
+
+        // ----------------------------------------------------------------------
+        // Create the compiler configuration
+        // ----------------------------------------------------------------------
+
+
+
-        
+
+        // ----------------------------------------------------------------------
+        // Dump configuration
+        // ----------------------------------------------------------------------
+
+        if ( getLog().isDebugEnabled() )
+        {
+            getLog().debug( "Classpath:" );
+
+            for ( Iterator it = getClasspathElements().iterator(); it.hasNext(); )
+            {
+                String s = (String) it.next();
+
+                getLog().debug( " " + s );
+            }
+
+            getLog().debug( "Source roots:" );
+
+            for ( Iterator it = getCompileSourceRoots().iterator(); it.hasNext(); )
+            {
+                String root = (String) it.next();
+
+                getLog().debug( " " + root );
+            }
+        }
+
+        // ----------------------------------------------------------------------
+        // Compile!
+        // ----------------------------------------------------------------------
+
+
+        Compiler compiler;
+
+        try
+        {
+            compiler = compilerManager.getCompiler( compilerId );
+        }
+        catch ( NoSuchCompilerException e )
+        {
+            throw new MojoExecutionException( "No such compiler '" + e.getCompilerId() + "'." );
+        }
+
+        getLog().info( "Using compiler '" + compilerId + "'." );
+

INS26 UPD40 INS40 INS23 INS23 INS29 MOV83 INS43 INS59 INS29 INS83 INS43 INS59 INS65 INS42 UPD42 MOV42 INS65 INS65 INS65 UPD42 MOV42 INS42 INS25 INS60 INS54 INS21 INS66 INS66 INS32 INS8 MOV43 INS59 INS8 INS12 INS32 INS32 INS42 INS21 INS24 INS21 INS24 INS42 INS21 INS44 INS8 INS32 INS42 INS27 INS42 INS32 INS58 INS32 INS8 INS32 INS58 INS32 INS8 INS7 INS43 INS42 INS53 INS42 INS45 INS42 INS45 INS32 INS42 INS45 INS43 INS59 INS42 INS42 INS60 INS21 INS32 INS42 INS45 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS27 INS32 INS42 INS42 INS42 INS11 INS32 INS42 INS27 INS32 INS42 INS42 INS42 INS11 INS32 INS42 INS27 INS42 INS45 INS32 INS45 INS42 INS43 INS32 INS42 INS45 INS42 INS42 INS43 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL14 DEL59 DEL23