o another pass the the plugin manager


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@774487 13f79535-47bb-0310-9956-ffa450edef68

-        catch ( PluginVersionResolutionException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginVersionResolutionException, PluginContainerException, PluginVersionNotFoundException
+        throws ArtifactNotFoundException, ArtifactResolutionException, PluginContainerException, PluginVersionNotFoundException
-        ClassRealm pluginRealm = container.createChildRealm( pluginKey( plugin ) );
+        ClassRealm pluginRealm = pluginClassLoaderCache.get( constructPluginKey( plugin ) );
+        
+        if ( pluginRealm != null )            
+        {
+            return getPluginDescriptor( plugin );            
+        }            
+            
+        pluginRealm = container.createChildRealm( pluginKey( plugin ) );
-        
-        //pluginRealm.display();
-        
+                
-            logger.debug( "Discovering components in realm: " + pluginRealm );
-
-        
-        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
-        
-        // We just need to keep track of the realm, if we need to augment we will wrap the realm
-        pluginDescriptor.setPluginArtifact( pluginArtifact );
-        pluginDescriptor.setArtifacts( new ArrayList<Artifact>( pluginArtifacts ) );
-        pluginDescriptor.setClassRealm( pluginRealm );
-
-        return pluginDescriptor;
+                
+        return getPluginDescriptor( plugin );
-    // plugin artifact
-    //   its dependencies while filtering out what's in the core
-    //   layering on the project level plugin dependencies
-
-        if ( mojoDescriptor.isProjectRequired() && !session.isUsingPOMsFromFilesystem() )
-        {
-            throw new PluginExecutionException( mojoExecution, project, "Cannot execute mojo: " + mojoDescriptor.getGoal()
-                + ". It requires a project with an existing pom.xml, but the build is not using one." );
-        }
-
-        if ( mojoDescriptor.isOnlineRequired() && session.isOffline() )
-        {
-            // TODO: Should we error out, or simply warn and skip??
-            throw new PluginExecutionException( mojoExecution, project, "Mojo: " + mojoDescriptor.getGoal() + " requires online mode for execution. Maven is currently offline." );
-        }
-
-        if ( mojoDescriptor.getDeprecated() != null )
-        {
-            logger.warn( "Mojo: " + mojoDescriptor.getGoal() + " is deprecated.\n" + mojoDescriptor.getDeprecated() );
-        }
-
-        ClassRealm pluginRealm;
+        ClassRealm pluginRealm = pluginClassLoaderCache.get( constructPluginKey( mojoDescriptor.getPluginDescriptor() ) );            
-        {
-            mojo = getConfiguredMojo( session, mojoExecution, project, false, mojoExecution );
-
-            pluginRealm = pluginClassLoaderCache.get( constructPluginKey( mojoDescriptor.getPluginDescriptor() ) );            
+        {                        
+            mojo = getConfiguredMojo( session, project, mojoExecution, pluginRealm );
-    private Mojo getConfiguredMojo( MavenSession session, MojoExecution MojoExecution, MavenProject project, boolean report, MojoExecution mojoExecution )
+    private Mojo getConfiguredMojo( MavenSession session, MavenProject project, MojoExecution mojoExecution, ClassRealm pluginRealm )
-        ClassRealm pluginRealm = pluginDescriptor.getClassRealm();
-
-        logger.debug( "Looking up mojo " + mojoDescriptor.getRoleHint() + " in realm " + pluginRealm.getId() + " - descRealmId=" + mojoDescriptor.getRealm() );
-
-        populatePluginFields( mojo, mojoDescriptor, pomConfiguration, expressionEvaluator );
+        populatePluginFields( mojo, mojoDescriptor, pluginRealm, pomConfiguration, expressionEvaluator );
-    private void populatePluginFields( Mojo plugin, MojoDescriptor mojoDescriptor, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator )
+    private void populatePluginFields( Mojo mojo, MojoDescriptor mojoDescriptor, ClassRealm realm, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator )
-        // TODO: What is the point in using the plugin realm here instead of the core realm?
-        ClassRealm realm = mojoDescriptor.getPluginDescriptor().getClassRealm();
-
-            configurator.configureComponent( plugin, configuration, expressionEvaluator, realm, listener );
+            configurator.configureComponent( mojo, configuration, expressionEvaluator, realm, listener );

MOV44 MOV21 INS44 INS60 INS25 INS60 MOV43 INS42 UPD42 MOV43 INS42 MOV43 INS59 INS27 INS8 INS7 INS32 MOV43 MOV59 MOV42 INS32 INS42 INS33 INS41 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL60 DEL42 DEL9 DEL42 DEL7 DEL21 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60