[MNG-5073] ProjectBuilder.build(File,ProjectBuildingRequest) returns null project if dependency version info is missing

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1176414 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+            Throwable error = null;
-                    throw new ProjectBuildingException( e.getModelId(), e.getMessage(), pomFile, e );
+                    result = e.getResult();
+                    if ( result == null || result.getEffectiveModel() == null )
+                    {
+                        throw new ProjectBuildingException( e.getModelId(), e.getMessage(), pomFile, e );
+                    }
+                    // validation error, continue project building and delay failing to help IDEs
+                    error = e;
-                try
-                {
-                    DefaultDependencyResolutionRequest resolution =
-                        new DefaultDependencyResolutionRequest( project, config.session );
-                    resolutionResult = dependencyResolver.resolve( resolution );
-                }
-                catch ( DependencyResolutionException e )
-                {
-                    resolutionResult = e.getResult();
-                }
-
-                Set<Artifact> artifacts = new LinkedHashSet<Artifact>();
-                if ( resolutionResult.getDependencyGraph() != null )
-                {
-                    RepositoryUtils.toArtifacts( artifacts, resolutionResult.getDependencyGraph().getChildren(),
-                                                 Collections.singletonList( project.getArtifact().getId() ), null );
-
-                    // Maven 2.x quirk: an artifact always points at the local repo, regardless whether resolved or not
-                    LocalRepositoryManager lrm = config.session.getLocalRepositoryManager();
-                    for ( Artifact artifact : artifacts )
-                    {
-                        if ( !artifact.isResolved() )
-                        {
-                            String path = lrm.getPathForLocalArtifact( RepositoryUtils.toArtifact( artifact ) );
-                            artifact.setFile( new File( lrm.getRepository().getBasedir(), path ) );
-                        }
-                    }
-                }
-                project.setResolvedArtifacts( artifacts );
-                project.setArtifacts( artifacts );
+                resolutionResult = resolveDependencies( project, config.session );
-            return new DefaultProjectBuildingResult( project, modelProblems, resolutionResult );
+            ProjectBuildingResult result = new DefaultProjectBuildingResult( project, modelProblems, resolutionResult );
+
+            if ( error != null )
+            {
+                ProjectBuildingException e = new ProjectBuildingException( Arrays.asList( result ) );
+                e.initCause( error );
+                throw e;
+            }
+
+            return result;
+    private DependencyResolutionResult resolveDependencies( MavenProject project, RepositorySystemSession session )
+    {
+        DependencyResolutionResult resolutionResult = null;
+
+        try
+        {
+            DefaultDependencyResolutionRequest resolution = new DefaultDependencyResolutionRequest( project, session );
+            resolutionResult = dependencyResolver.resolve( resolution );
+        }
+        catch ( DependencyResolutionException e )
+        {
+            resolutionResult = e.getResult();
+        }
+
+        Set<Artifact> artifacts = new LinkedHashSet<Artifact>();
+        if ( resolutionResult.getDependencyGraph() != null )
+        {
+            RepositoryUtils.toArtifacts( artifacts, resolutionResult.getDependencyGraph().getChildren(),
+                                         Collections.singletonList( project.getArtifact().getId() ), null );
+
+            // Maven 2.x quirk: an artifact always points at the local repo, regardless whether resolved or not
+            LocalRepositoryManager lrm = session.getLocalRepositoryManager();
+            for ( Artifact artifact : artifacts )
+            {
+                if ( !artifact.isResolved() )
+                {
+                    String path = lrm.getPathForLocalArtifact( RepositoryUtils.toArtifact( artifact ) );
+                    artifact.setFile( new File( lrm.getRepository().getBasedir(), path ) );
+                }
+            }
+        }
+        project.setResolvedArtifacts( artifacts );
+        project.setArtifacts( artifacts );
+
+        return resolutionResult;
+    }
+

INS26 INS40 INS31 INS83 INS43 INS42 INS44 INS44 MOV8 INS42 INS43 INS42 INS43 INS42 INS60 INS41 INS42 INS42 INS43 INS59 INS42 INS60 INS60 INS25 INS42 INS42 INS33 INS43 INS59 INS8 INS43 INS59 INS27 INS8 INS42 MOV43 INS42 INS42 INS33 INS21 INS42 INS42 MOV14 INS42 INS33 INS60 INS21 INS53 INS7 INS43 INS59 INS32 INS42 MOV43 INS42 INS42 INS8 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS21 INS25 INS21 INS42 INS42 INS40 INS43 INS32 INS7 INS27 MOV8 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS42 INS42 DEL40 DEL40