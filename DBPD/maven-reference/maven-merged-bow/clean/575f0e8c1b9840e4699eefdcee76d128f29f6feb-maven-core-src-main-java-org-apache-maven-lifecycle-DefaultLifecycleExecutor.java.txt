PR: MNG-844, MNG-1073
o aggregating goal that forks a lifecycle should run reactor over projects
o don't show reactor summary if an aggregation goal was run that didn't fork a lifecycle.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@293235 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.MojoFailureException;
-import org.apache.maven.plugin.MojoFailureException;
+ * @todo because of aggregation, we ended up with cli-ish stuff in here (like line() and the project logging, without much of the event handling)
-            executeTaskSegments( taskSegments, rm, session, rootProject, dispatcher );
+            executeTaskSegments( taskSegments, rm, session, rootProject, dispatcher, response );
-                                      MavenProject rootProject, EventDispatcher dispatcher )
+                                      MavenProject rootProject, EventDispatcher dispatcher,
+                                      MavenExecutionResponse response )
-                                executeGoal( task, session, rootProject );
+                                executeGoal( task, session, rootProject, response );
+                response.setExecutedMultipleProjects( true );
+
-                                    executeGoal( task, session, currentProject );
+                                    executeGoal( task, session, currentProject, response );
-    private void executeGoal( String task, MavenSession session, MavenProject project )
+    private void executeGoal( String task, MavenSession session, MavenProject project, MavenExecutionResponse response )
-            executeGoalWithLifecycle( task, session, lifecycleMappings, project );
+            executeGoalWithLifecycle( task, session, lifecycleMappings, project, response );
-            executeStandaloneGoal( task, session, project );
+            executeStandaloneGoal( task, session, project, response );
-                                           MavenProject project )
+                                           MavenProject project, MavenExecutionResponse response )
-        executeGoals( goals, session, project );
+        executeGoals( goals, session, project, response );
-    private void executeStandaloneGoal( String task, MavenSession session, MavenProject project )
+    private void executeStandaloneGoal( String task, MavenSession session, MavenProject project,
+                                        MavenExecutionResponse response )
-        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), session, project );
+        executeGoals( Collections.singletonList( new MojoExecution( mojoDescriptor ) ), session, project, response );
-    private void executeGoals( List goals, MavenSession session, MavenProject project )
+    private void executeGoals( List goals, MavenSession session, MavenProject project, MavenExecutionResponse response )
-                forkLifecycle( mojoDescriptor, session, project );
+                forkLifecycle( mojoDescriptor, session, project, response );
-                        forkLifecycle( descriptor, session, project );
+                        forkLifecycle( descriptor, session, project, response );
-    private void forkLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project )
+    private void forkLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project,
+                                MavenExecutionResponse response )
+        if ( mojoDescriptor.isAggregator() )
+        {
+            response.setExecutedMultipleProjects( true );
+
+            for ( Iterator i = session.getSortedProjects().iterator(); i.hasNext(); )
+            {
+                MavenProject reactorProject = (MavenProject) i.next();
+
+                line();
+
+                getLogger().info( "Building " + reactorProject.getName() );
+
+                line();
+
+                forkProjectLifecycle( mojoDescriptor, session, reactorProject, response );
+            }
+        }
+        else
+        {
+            forkProjectLifecycle( mojoDescriptor, session, project, response );
+        }
+    }
+
+    private void forkProjectLifecycle( MojoDescriptor mojoDescriptor, MavenSession session, MavenProject project,
+                                       MavenExecutionResponse response )
+        throws ArtifactResolutionException, LifecycleExecutionException, MojoExecutionException, MojoFailureException
+    {
+        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
+
-            executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject );
+            executeGoalWithLifecycle( targetPhase, session, lifecycleMappings, executionProject, response );
-            executeGoals( Collections.singletonList( new MojoExecution( desc ) ), session, executionProject );
+            executeGoals( Collections.singletonList( new MojoExecution( desc ) ), session, executionProject, response );

MOV26 INS31 MOV43 INS65 INS44 INS44 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 UPD42 INS44 INS66 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS60 MOV21 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS24 INS21 INS42 INS42 INS32 INS58 INS32 INS8 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS9 INS43 INS59 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42