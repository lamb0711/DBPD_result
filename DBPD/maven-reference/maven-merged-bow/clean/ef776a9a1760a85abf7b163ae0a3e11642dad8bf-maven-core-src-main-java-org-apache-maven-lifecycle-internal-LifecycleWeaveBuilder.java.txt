[MNG-4633] Adjusted upstream reactor artifact resolution to resolve on every phase change

Changed build summary time to show effective mojo time in weave mode, it's the only thing that made sense.
Removed uneccessary synchronized block in DefaultMavenPluginManager because now everything JustWorks(TM)

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@938149 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
-                Set<String> projectArtifacts = new HashSet<String>();
-                Set<Artifact> projectArtifactsA = new HashSet<Artifact>();
+                Set<Artifact> projectArtifacts = new HashSet<Artifact>();
-                        projectArtifacts.add( ArtifactUtils.key( artifact ) );
-                        projectArtifactsA.add( artifact );
+                        projectArtifacts.add( artifact );
-                                                            projectBuild.getTaskSegment(), projectArtifactsA );
-                        for ( Artifact dependency : projectBuild.getProject().getDependencyArtifacts() )
-                        {
-                            String s = ArtifactUtils.key( dependency );
-                            if ( projectArtifacts.contains( s ) )
-                            {
-                                dependency.setFile( null );
-                                dependency.setResolved( false );
-                                dependency.setRepository( null );
-                            }
-                        }
+                                                            projectBuild.getTaskSegment(), projectArtifacts );
+                Collection<ArtifactLink> dependencyLinks = getUpstreamReactorDependencies( projectBuild );
+
+                    PhaseRecorder phaseRecorder = new PhaseRecorder( projectBuild.getProject() );
+                    long totalMojoTime = 0;
+                    long mojoStart;
-                        PhaseRecorder phaseRecorder = new PhaseRecorder( projectBuild.getProject() );
+                        mojoStart = System.currentTimeMillis();
+                        totalMojoTime += ( System.currentTimeMillis() - mojoStart );
-                            reResolveReactorDependencies( nextPlanItem, projectBuild );
+
+                            if ( phaseRecorder.isDifferentPhase( nextPlanItem.getMojoExecution() ) )
+                            {
+                                for ( ArtifactLink dependencyLink : dependencyLinks )
+                                {
+                                    dependencyLink.resolveFromUpstream();
+                                }
+                            }
-                    final long wallClockTime = System.currentTimeMillis() - buildStartTime;
-                        new BuildSuccess( projectBuild.getProject(), wallClockTime ); // - waitingTime
+                        new BuildSuccess( projectBuild.getProject(), totalMojoTime ); // - waitingTime
-    private void reResolveReactorDependencies( ExecutionPlanItem nextPlanItem, ProjectSegment projectBuild )
-    {
-        if ( requiresReResolutionOfUpstreamReactorArtifacts( nextPlanItem ) )
-        {
-            reresolveUpstreamProjectArtifacts( projectBuild );
-        }
-        else if ( requiresReResolutionOfUpstreamTestScopedReactorArtifacts( nextPlanItem ) )
-        {
-            reresolveUpstreamTestScopedArtifacts( projectBuild );
-        }
-    }
-
-    private void reresolveUpstreamProjectArtifacts( ProjectSegment projectBuild )
+    private Collection<ArtifactLink> getUpstreamReactorDependencies( ProjectSegment projectBuild )
+        Collection<ArtifactLink> result = new ArrayList<ArtifactLink>();
-            Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
-            if ( dependencyArtifact != null )
+            if ( upStreamArtifact != null )
-                dependencyArtifact.setFile( upStreamArtifact.getFile() );
-                dependencyArtifact.setResolved( true );
-                dependencyArtifact.setRepository( upStreamArtifact.getRepository() );
+                Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
+                if ( dependencyArtifact != null )
+                {
+                    result.add( new ArtifactLink( dependencyArtifact, upStreamArtifact ) );
+                }
-        }
-    }
-
-    private void reresolveUpstreamTestScopedArtifacts( ProjectSegment projectBuild )
-    {
-        for ( MavenProject upstreamProject : projectBuild.getTransitiveUpstreamProjects() )
-        {
-            Artifact upStreamArtifact = findTestScopedArtifact( upstreamProject );
-            Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
-            if ( dependencyArtifact != null )
+            Artifact upStreamTestScopedArtifact = findTestScopedArtifact( upstreamProject );
+            if ( upStreamTestScopedArtifact != null )
-                dependencyArtifact.setFile( upStreamArtifact.getFile() );
-                dependencyArtifact.setResolved( upStreamArtifact.isResolved() );
-                dependencyArtifact.setRepository( upStreamArtifact.getRepository() );
+                Artifact dependencyArtifact = findDependency( projectBuild.getProject(), upStreamArtifact );
+                if ( dependencyArtifact != null )
+                {
+                    result.add( new ArtifactLink( dependencyArtifact, upStreamTestScopedArtifact ) );
+                }
-
+        return result;
+
-    private boolean requiresReResolutionOfUpstreamReactorArtifacts( ExecutionPlanItem nextExecutionPlanItem )
-    {
-        final String phase = nextExecutionPlanItem.getLifecyclePhase();
-        return "package".equals( phase ) || "install".equals( phase ) || "compile".equals( phase );
-    }
-
-    private boolean requiresReResolutionOfUpstreamTestScopedReactorArtifacts( ExecutionPlanItem nextExecutionPlanItem )
-    {
-        final String phase = nextExecutionPlanItem.getLifecyclePhase();
-        return "package".equals( phase ) || "install".equals( phase ) || "compile".equals( phase ) ||
-            "test-compile".equals( phase );
-    }
-
+
+    static class ArtifactLink
+    {
+        private final Artifact artifactInThis;
+
+        private final Artifact upstream;
+
+        ArtifactLink( Artifact artifactInThis, Artifact upstream )
+        {
+            this.artifactInThis = artifactInThis;
+            this.upstream = upstream;
+        }
+
+        public void resolveFromUpstream()
+        {
+            artifactInThis.setFile( upstream.getFile() );
+            artifactInThis.setRepository( upstream.getRepository() );
+            artifactInThis.setResolved( true ); // Or maybe upstream.isResolved()....
+
+        }
+    }
+

INS26 INS40 INS31 INS55 MOV83 INS74 INS42 MOV44 INS8 INS83 INS42 INS23 INS23 INS31 MOV31 INS43 INS43 INS60 INS70 INS41 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 MOV44 INS44 INS8 UPD83 UPD39 UPD42 UPD42 MOV42 UPD42 MOV42 INS74 INS59 MOV44 MOV32 INS8 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS43 INS43 INS42 INS14 MOV60 INS25 MOV60 INS25 INS42 INS7 INS7 INS32 INS32 INS32 INS42 INS42 INS74 INS27 INS8 INS27 INS8 INS22 INS42 INS22 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS9 INS43 INS43 INS42 INS33 MOV60 MOV25 UPD42 INS42 INS33 MOV60 MOV25 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS60 INS42 INS42 MOV27 MOV27 UPD42 INS74 INS59 MOV61 INS21 INS21 INS43 INS43 INS42 INS32 MOV60 INS60 INS32 INS32 INS42 INS42 INS42 INS42 INS39 INS59 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 INS34 INS42 INS21 INS21 INS43 INS42 INS42 INS43 INS42 INS42 MOV42 INS7 INS7 UPD42 INS42 INS42 UPD42 INS42 INS32 INS42 INS36 INS25 INS42 INS42 INS27 INS32 INS8 MOV32 INS42 UPD42 MOV42 INS42 INS32 INS70 MOV42 UPD42 MOV42 INS44 INS42 INS8 INS43 INS42 INS21 INS42 INS32 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL83 DEL42 DEL27 DEL32 DEL21 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL83 DEL39 DEL42 DEL8 DEL70 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL83 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL45 DEL32 DEL45 DEL32 DEL45 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL41