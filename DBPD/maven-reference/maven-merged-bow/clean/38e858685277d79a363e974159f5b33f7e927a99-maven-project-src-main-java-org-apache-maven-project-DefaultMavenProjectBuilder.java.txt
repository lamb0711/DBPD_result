Collapsed methods, moved logic for active profiles from ProjectBuilder to ProfileContext.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@761121 13f79535-47bb-0310-9956-ffa450edef68

-        List<Profile> projectProfiles = new ArrayList<Profile>();
-        ProfileManager externalProfileManager = config.getGlobalProfileManager();
-        
-        ProfileActivationContext profileActivationContext = (externalProfileManager == null) ? new ProfileActivationContext( config.getExecutionProperties(), false ):
-            externalProfileManager.getProfileActivationContext();
-     
-        if(externalProfileManager != null)
-        {           
-        	//System.out.println("PROFILES = " + externalProfileManager.getProfilesById().toString());
-        
-            try
-            {
-                projectProfiles.addAll( externalProfileManager.getActiveProfiles() );
-            }
-            catch ( ProfileActivationException e )
-            {
-                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", projectDescriptor,
-                                                    e );
-            }         
-        }
-
-        ProfileManager profileManager = new DefaultProfileManager( container, profileActivationContext );
-        profileManager.addProfiles( model.getProfiles() );
-        //System.out.println("PROFILE POM: COUNT = " + model.getProfiles().size());
+        List<Profile> projectProfiles;
-            //System.out.println("PROFILE POM - ACTIVE: COUNT = " + profileManager.getActiveProfiles( model ).size() +"," + projectProfiles.size());
-            projectProfiles.addAll( profileManager.getActiveProfiles() );
+        	projectProfiles = ProfileContext.getActiveProfilesFrom(config, model, container);
-
-        {
-
+    {
-            
-        return buildModel( pomFile, new ProfileContextInfo(null, activeProfileIds, inactiveProfileIds), projectBuilderConfiguration );
+
+            ProfileContextInfo profileInfo = new ProfileContextInfo(null, activeProfileIds, inactiveProfileIds);
+            PomClassicDomainModel domainModel = new PomClassicDomainModel( pomFile );
+            domainModel.setProjectDirectory( pomFile.getParentFile() );
+            domainModel.setMostSpecialized( true );
+
+            List<DomainModel> domainModels = new ArrayList<DomainModel>();
+
+            domainModels.add( domainModel );
+            ArtifactRepository localRepository = projectBuilderConfiguration.getLocalRepository();
+            List<ArtifactRepository> remoteRepositories = projectBuilderConfiguration.getRemoteRepositories();
+
+            File parentFile = null;
+            int lineageCount = 0;
+            if ( domainModel.getParentId() != null )
+            {
+            	List<DomainModel> mavenParents;
+            	if ( isParentLocal( domainModel.getRelativePathOfParent(), pomFile.getParentFile() ) )
+            	{
+            		mavenParents = getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pomFile.getParentFile() );
+            	}
+            	else
+            	{
+            		mavenParents = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories );
+            	}
+
+            	if ( mavenParents.size() > 0 )
+            	{
+            		PomClassicDomainModel dm = (PomClassicDomainModel) mavenParents.get( 0 );
+            		parentFile = dm.getFile();
+            		domainModel.setParentFile( parentFile );
+            		lineageCount = mavenParents.size();
+            	}
+
+            	domainModels.addAll( mavenParents );
+            }
+
+            domainModels.add( convertToDomainModel( getSuperModel(), false ) );
+            List<DomainModel> profileModels = new ArrayList<DomainModel>();
+            //Process Profiles
+            for(DomainModel domain : domainModels)
+            {
+            	PomClassicDomainModel dm = (PomClassicDomainModel) domain;
+
+            	if(!dm.getModel().getProfiles().isEmpty())
+            	{
+            		ProfileContext profileContext1 = new ProfileContext( dm.getModel().getProfiles(), profileInfo );
+            		Collection<Profile> profiles = profileContext1.getActiveProfiles();
+            		if(!profiles.isEmpty())
+            		{
+            			profileModels.add(ProcessorContext.mergeProfilesIntoModel( profileContext1.getActiveProfiles(), dm ));  
+            		}
+            		else
+            		{
+            			profileModels.add( dm );   
+            		}
+            	}
+            	else
+            	{
+            		profileModels.add( dm );
+            	}                
+            }
+
+            PomClassicDomainModel transformedDomainModel = ProcessorContext.build( profileModels, null );
+
+            // Lineage count is inclusive to add the POM read in itself.
+            transformedDomainModel.setLineageCount( lineageCount + 1 );
+            transformedDomainModel.setParentFile( parentFile );
+
+            return transformedDomainModel;
-    private PomClassicDomainModel buildModel( File pom, ProfileContextInfo profileInfo, ProjectBuilderConfiguration config )
-        throws IOException
-    {
-        if ( pom == null )
-        {
-            throw new IllegalArgumentException( "pom: null" );
-        }
-
-        PomClassicDomainModel domainModel = new PomClassicDomainModel( pom );
-        domainModel.setProjectDirectory( pom.getParentFile() );
-        domainModel.setMostSpecialized( true );
-
-        List<DomainModel> domainModels = new ArrayList<DomainModel>();
-
-        domainModels.add( domainModel );
-        ArtifactRepository localRepository = config.getLocalRepository();
-        List<ArtifactRepository> remoteRepositories = config.getRemoteRepositories();
-        
-        File parentFile = null;
-        int lineageCount = 0;
-        if ( domainModel.getParentId() != null )
-        {
-            List<DomainModel> mavenParents;
-            if ( isParentLocal( domainModel.getRelativePathOfParent(), pom.getParentFile() ) )
-            {
-                mavenParents = getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pom.getParentFile() );
-            }
-            else
-            {
-                mavenParents = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories );
-            }
-
-            if ( mavenParents.size() > 0 )
-            {
-                PomClassicDomainModel dm = (PomClassicDomainModel) mavenParents.get( 0 );
-                parentFile = dm.getFile();
-                domainModel.setParentFile( parentFile );
-                lineageCount = mavenParents.size();
-            }
-
-            domainModels.addAll( mavenParents );
-        }
-
-        domainModels.add( convertToDomainModel( getSuperModel(), false ) );
-        List<DomainModel> profileModels = new ArrayList<DomainModel>();
-        //Process Profiles
-        for(DomainModel domain : domainModels)
-        {
-            PomClassicDomainModel dm = (PomClassicDomainModel) domain;
-            
-            if(!dm.getModel().getProfiles().isEmpty())
-            {
-                 ProfileContext profileContext1 = new ProfileContext( dm.getModel().getProfiles(), profileInfo );
-                 Collection<Profile> profiles = profileContext1.getActiveProfiles();
-                 if(!profiles.isEmpty())
-                 {
-                    profileModels.add(ProcessorContext.mergeProfilesIntoModel( profileContext1.getActiveProfiles(), dm ));  
-                 }
-                 else
-                 {
-                     profileModels.add( dm );   
-                 }
-            }
-            else
-            {
-                profileModels.add( dm );
-            }                
-        }
-
-        PomClassicDomainModel transformedDomainModel = ProcessorContext.build( profileModels, null );
-
-        // Lineage count is inclusive to add the POM read in itself.
-        transformedDomainModel.setLineageCount( lineageCount + 1 );
-        transformedDomainModel.setParentFile( parentFile );
-
-        return transformedDomainModel;
-    }
-
-    private PomClassicDomainModel convertToDomainModel( Model model, boolean isMostSpecialized )
+    private static PomClassicDomainModel convertToDomainModel( Model model, boolean isMostSpecialized )
-    private boolean isParentLocal( String relativePath, File projectDirectory )
+    private static boolean isParentLocal( String relativePath, File projectDirectory )

MOV31 UPD42 MOV44 MOV44 MOV44 MOV43 INS83 INS83 MOV60 MOV60 INS60 MOV43 INS59 MOV43 INS42 MOV14 INS7 MOV43 UPD42 UPD42 UPD42 UPD42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL43 DEL42 DEL42 DEL32 DEL9 DEL14 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31