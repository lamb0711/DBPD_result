PR: MNG-2006

Replaced appendPath with a more robust implementation,
after discussing it with jdcasey.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@382881 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
-        List pathFragments = new ArrayList();
-
-        String rootPath = parentPath;
-
-        String protocol = null;
-        int protocolIdx = rootPath.indexOf( "://" );
-
-        if ( protocolIdx > -1 )
-        {
-            protocol = rootPath.substring( 0, protocolIdx + 3 );
-            rootPath = rootPath.substring( protocolIdx + 3 );
-        }
-
-        pathFragments.add( rootPath );
+        String uncleanPath = parentPath;
-            {
-                pathFragments.add( pathAdjustment );
-            }
+                uncleanPath += "/" + pathAdjustment;
-            {
-                pathFragments.add( childPath );
-            }            
+                uncleanPath += "/" + childPath;
+        String cleanedPath = "";
+
+        int protocolIdx = uncleanPath.indexOf( "://" );
+
+        if ( protocolIdx > -1 )
+        {
+            cleanedPath = uncleanPath.substring( 0, protocolIdx + 3 );
+            uncleanPath = uncleanPath.substring( protocolIdx + 3 );
+        }
+
+        if ( uncleanPath.startsWith( "/" ) )
+            cleanedPath += "/";
+
+        return cleanedPath + resolvePath( uncleanPath );
+    }
+
+    // TODO: Move this to plexus-utils' PathTool.
+    private static String resolvePath( String uncleanPath )
+    {
+        LinkedList pathElements = new LinkedList();
+
+        StringTokenizer tokenizer = new StringTokenizer( uncleanPath, "/" );
+
+        while ( tokenizer.hasMoreTokens() )
+        {
+            String token = (String) tokenizer.nextToken();
+
+            if ( token.equals( "" ) )
+            {
+                // Empty path entry ("...//.."), remove.
+            }
+            else if ( token.equals( ".." ) )
+            {
+                if ( pathElements.isEmpty() )
+                {
+                    // FIXME: somehow report to the user
+                    // that there are too many '..' elements.
+                    // For now, ignore the extra '..'.
+                }
+                else
+                {
+                    pathElements.removeLast();
+                }
+            }
+            else
+            {
+                pathElements.addLast( token );
+            }
+        }
+
+
-        if ( protocol != null )
+        while ( !pathElements.isEmpty() )
-            cleanedPath.append( protocol );
-        }
-
-        if ( rootPath.startsWith( "/" ) )
-        {
-            cleanedPath.append( '/' );
-        }
-
-        String lastToken = null;
-        String currentToken = null;
-
-        for ( Iterator it = pathFragments.iterator(); it.hasNext(); )
-        {
-            String pathFragment = (String) it.next();
-
-            StringTokenizer tokens = new StringTokenizer( pathFragment, "/" );
-
-            while ( tokens.hasMoreTokens() )
-            {
-                lastToken = currentToken;
-                currentToken = tokens.nextToken();
-
-                if ( "..".equals( currentToken ) && lastToken != null )
-                {
-                    int cleanedPathLen = cleanedPath.length();
-                    int lastTokenLen = lastToken.length();
-                    
-                    if ( cleanedPathLen > lastTokenLen )
-                    {
-                        // trim the previous path part off...
-                        cleanedPath.setLength( cleanedPath.length() - ( lastToken.length() + 1 ) );
-                    }
-                }
-                else if ( !".".equals( currentToken ) )
-                {
-                    // don't worry about /./ self-references.
-                    cleanedPath.append( currentToken ).append( '/' );
-                }
-            }
-        }
-
-        String lastPathPart = childPath;
-        if ( lastPathPart == null )
-        {
-            lastPathPart = pathAdjustment;
-        }
-        
-        if ( lastPathPart == null )
-        {
-            lastPathPart = parentPath;
-        }
-        
-        if ( appendPaths && lastPathPart != null && !lastPathPart.endsWith( "/" ) )
-        {
-            int cleanedPathLen = cleanedPath.length();
-            
-            if ( cleanedPathLen > 0 )
-            {
-                cleanedPath.setLength( cleanedPathLen - 1 );
-            }            
+            cleanedPath.append( pathElements.removeFirst() );
+            if ( !pathElements.isEmpty() )
+                cleanedPath.append( '/' );

INS26 INS40 INS31 INS31 MOV83 MOV43 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 INS83 INS83 MOV43 INS42 INS44 INS8 MOV60 INS25 MOV60 MOV60 MOV25 MOV25 INS41 MOV43 INS42 INS60 MOV60 MOV61 MOV60 INS61 MOV41 MOV43 INS42 INS8 INS32 INS21 INS27 INS43 INS59 MOV43 INS38 INS8 UPD42 INS42 INS25 INS25 UPD42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS7 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS14 UPD42 UPD42 INS60 MOV32 INS21 MOV25 MOV27 INS21 MOV27 INS21 UPD42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS43 MOV43 UPD42 MOV43 INS59 INS32 INS8 INS25 UPD42 UPD42 INS32 INS38 MOV21 INS7 INS7 UPD42 UPD42 INS42 INS42 INS11 INS42 MOV42 INS45 INS32 INS8 MOV8 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS27 INS42 INS27 UPD42 UPD42 MOV43 INS32 UPD42 MOV42 UPD42 MOV42 INS45 MOV25 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS42 UPD42 MOV42 MOV42 INS32 INS8 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL33 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL36 DEL27 DEL32 DEL42 DEL13 DEL32 DEL45 DEL42 DEL32 DEL42 DEL33 DEL27 DEL27 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL32 DEL59 DEL60 DEL8 DEL45 DEL42 DEL42 DEL32 DEL38 DEL25 DEL45 DEL45 DEL32 DEL8 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL27 DEL38 DEL27 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31