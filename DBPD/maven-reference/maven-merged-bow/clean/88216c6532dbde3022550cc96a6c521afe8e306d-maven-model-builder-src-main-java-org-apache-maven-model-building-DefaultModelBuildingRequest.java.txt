o Re-introduced distinction between user properties and system properties. We have use cases like interpolation and SUREFIRE-121 where we would like to handle user-specified props specially so a single properties soup is not up to the job. However, I opted not to follow the approach from 2.x where we also collect both system properties and user properties in a combined set called execution properties. Code that embeds Maven and programmatically creates an execution request should be not required to assemble such a mixed properties instance, it would enable bad behavior from Maven by subtle API misuse. Also, for things like the lifecycle participant that wants to inject properties, it should be cristal clear whether it injects a user or a system property, the semantics of something like getExecutionProperties().setProperty() would be unclear however.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@796900 13f79535-47bb-0310-9956-ffa450edef68

-    private Properties executionProperties;
+    private Properties systemProperties;
+
+    private Properties userProperties;
-    public Properties getExecutionProperties()
+    public Properties getSystemProperties()
-        if ( executionProperties == null )
+        if ( systemProperties == null )
-            executionProperties = new Properties();
+            systemProperties = new Properties();
-        return executionProperties;
+        return systemProperties;
-    public DefaultModelBuildingRequest setExecutionProperties( Properties executionProperties )
+    public DefaultModelBuildingRequest setSystemProperties( Properties systemProperties )
-        if ( executionProperties != null )
+        if ( systemProperties != null )
-            this.executionProperties = new Properties();
-            this.executionProperties.putAll( executionProperties );
+            this.systemProperties = new Properties();
+            this.systemProperties.putAll( systemProperties );
-            this.executionProperties = null;
+            this.systemProperties = null;
+        }
+
+        return this;
+    }
+
+    public Properties getUserProperties()
+    {
+        if ( userProperties == null )
+        {
+            userProperties = new Properties();
+        }
+
+        return userProperties;
+    }
+
+    public DefaultModelBuildingRequest setUserProperties( Properties userProperties )
+    {
+        if ( userProperties != null )
+        {
+            this.userProperties = new Properties();
+            this.userProperties.putAll( userProperties );
+        }
+        else
+        {
+            this.userProperties = null;

INS23 INS31 INS31 INS83 MOV43 INS59 INS43 UPD42 UPD42 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 UPD42 UPD42 INS42 INS25 INS41 INS42 INS43 INS42 INS25 INS41 UPD42 INS27 INS8 INS42 INS42 INS27 INS8 INS8 INS52 UPD42 UPD42 INS42 INS33 INS21 INS42 INS33 INS21 INS21 INS21 INS7 INS7 INS32 INS7 UPD42 UPD42 INS42 INS14 INS22 INS14 INS22 INS42 INS42 INS22 INS33 UPD42 UPD42 UPD42 INS43 INS52 INS42 INS43 INS52 INS42 INS52 INS42 INS42 INS42