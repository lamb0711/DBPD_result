o Reworked the artifact parsing code for the legacy artifact discoverer.
o Getting OutOfMemoryError when running against ibiblio-v1.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163732 13f79535-47bb-0310-9956-ffa450edef68

-            Reporter repoReporter = new Reporter( reportsBase, "repository.report.txt" );
-
-            ArtifactDiscoverer artifactDiscoverer = (ArtifactDiscoverer) container.lookup(
-                                                                                           ArtifactDiscoverer.ROLE,
-                                                                                           configuration.getSourceRepositoryLayout() );
-
-            logger.info( "Discovering artifacts." );
-            List artifacts = null;
+            Reporter repoReporter = null;
-                artifacts = artifactDiscoverer.discoverArtifacts( sourceRepositoryBase, repoReporter );
-            }
-            catch ( Exception e )
-            {
-                repoReporter.error( "Error discovering artifacts in source repository.", e );
-            }
+                repoReporter = new Reporter( reportsBase, "repository.report.txt" );
-            if ( artifacts != null )
-            {
-                ArtifactRepositoryLayout sourceLayout = (ArtifactRepositoryLayout) container.lookup(
-                                                                                                     ArtifactRepositoryLayout.ROLE,
-                                                                                                     configuration.getSourceRepositoryLayout() );
+                ArtifactDiscoverer artifactDiscoverer = null;
-                ArtifactRepository sourceRepo = new ArtifactRepository( "source",
-                                                                        "file://" + sourceRepositoryBase.getAbsolutePath(),
-                                                                        sourceLayout );
-
-                ArtifactRepositoryLayout targetLayout = (ArtifactRepositoryLayout) container.lookup(
-                                                                                                     ArtifactRepositoryLayout.ROLE,
-                                                                                                     configuration.getTargetRepositoryLayout() );
-
-                ArtifactRepository targetRepo = new ArtifactRepository( "target",
-                                                                        "file://" + targetRepositoryBase.getAbsolutePath(),
-                                                                        targetLayout );
-
-                logger.info( "Rewriting POMs and artifact files." );
-                for ( Iterator it = artifacts.iterator(); it.hasNext(); )
+                List artifacts = null;
+                try
-                    Artifact artifact = (Artifact) it.next();
+                    artifactDiscoverer = (ArtifactDiscoverer) container.lookup( ArtifactDiscoverer.ROLE,
+                                                                                configuration.getSourceRepositoryLayout() );
+
+                    if ( logger.isInfoEnabled() )
+                    {
+                        logger.info( "Discovering artifacts." );
+                    }
-                    Reporter artifactReporter = new Reporter( reportsBase, artifact.getGroupId() + "_"
-                                                              + artifact.getArtifactId() + "_" + artifact.getVersion() + ".report.txt" );
+                    try
+                    {
+                        artifacts = artifactDiscoverer.discoverArtifacts( sourceRepositoryBase, repoReporter );
+                    }
+                    catch ( Exception e )
+                    {
+                        repoReporter.error( "Error discovering artifacts in source repository.", e );
+                    }
+
+                }
+                finally
+                {
+                    if ( artifactDiscoverer != null )
+                    {
+                        container.release( artifactDiscoverer );
+                    }
+                }
+
+                if ( artifacts != null )
+                {
+                    ArtifactRepositoryLayout sourceLayout = null;
+                    ArtifactRepositoryLayout targetLayout = null;
+                    try
+                    {
+                        sourceLayout = (ArtifactRepositoryLayout) container.lookup(
+                                                                                    ArtifactRepositoryLayout.ROLE,
+                                                                                    configuration.getSourceRepositoryLayout() );
+
+                        ArtifactRepository sourceRepo = new ArtifactRepository( "source", "file://"
+                            + sourceRepositoryBase.getAbsolutePath(), sourceLayout );
+
+                        targetLayout = (ArtifactRepositoryLayout) container.lookup(
+                                                                                    ArtifactRepositoryLayout.ROLE,
+                                                                                    configuration.getTargetRepositoryLayout() );
+
+                        ArtifactRepository targetRepo = new ArtifactRepository( "target", "file://"
+                            + targetRepositoryBase.getAbsolutePath(), targetLayout );
+
+                        if ( logger.isInfoEnabled() )
+                        {
+                            logger.info( "Rewriting POMs and artifact files." );
+                        }
+                        
+                        rewriteArtifactsAndPoms( artifacts, sourceRepo, targetRepo, configuration, reportsBase,
+                                                 sourceRepositoryBase, targetRepositoryBase, repoReporter );
+                    }
+                    finally
+                    {
+                        if ( sourceLayout != null )
+                        {
+                            container.release( sourceLayout );
+                        }
+
+                        if ( targetLayout != null )
+                        {
+                            container.release( targetLayout );
+                        }
+                    }
+                }
+
+                if ( repoReporter.hasError() && logger.isErrorEnabled() )
+                {
+                    logger.error( "Error encountered while converting source repository to target repository." );
+                }
+
+                if ( repoReporter.hasWarning() && logger.isWarnEnabled() )
+                {
+                    logger.warn( "Warning encountered while rewriting one or more artifacts from source repository to target repository." );
+                }
+            }
+            finally
+            {
+                if(repoReporter != null)
+                {
+                    repoReporter.close();
+                }
+            }
+        }
+    }
+
+    private void rewriteArtifactsAndPoms( List artifacts, ArtifactRepository sourceRepo, ArtifactRepository targetRepo,
+                                         RepositoryCleanerConfiguration configuration, File reportsBase,
+                                         File sourceRepositoryBase, File targetRepositoryBase, Reporter repoReporter )
+        throws Exception
+    {
+        Logger logger = getLogger();
+
+        ArtifactPomRewriter artifactPomRewriter = null;
+
+        try
+        {
+            for ( Iterator it = artifacts.iterator(); it.hasNext(); )
+            {
+                Artifact artifact = (Artifact) it.next();
+
+                Reporter artifactReporter = null;
+                try
+                {
+                    artifactReporter = new Reporter( reportsBase, artifact.getId().replace(':', '_') + ".report.txt" );
-                    
+
-                            logger.debug("sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'");
-                            logger.debug("targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'");
-                            
+                            if(logger.isDebugEnabled())
+                            {
+                                logger.debug( "sourceRepo basedir is: \'" + sourceRepo.getBasedir() + "\'" );
+                                logger.debug( "targetRepo basedir is: \'" + targetRepo.getBasedir() + "\'" );
+                            }
+
-                            logger.debug( "Copying artifact[" + artifact.getId() + "] from \'"
-                                + artifactSource + "\' to \'" + artifactTarget + "\'." );
-                            
+                            if ( logger.isDebugEnabled() )
+                            {
+                                logger.debug( "Copying artifact[" + artifact.getId() + "] from \'" + artifactSource
+                                    + "\' to \'" + artifactTarget + "\'." );
+                            }
+
-                        repoReporter.error("Error transferring artifact[" + artifact.getId() + "] to the target repository.", e);
-                        
+                        repoReporter.error( "Error transferring artifact[" + artifact.getId()
+                            + "] to the target repository.", e );
+
-                        logger.debug( "working on digest for artifact[" + artifact.getId() + "] with groupId: \'"
-                            + artifact.getGroupId() + "\'" );
+                        if ( logger.isDebugEnabled() )
+                        {
+                            logger.debug( "working on digest for artifact[" + artifact.getId() + "] with groupId: \'"
+                                + artifact.getGroupId() + "\'" );
+                        }
-                        ArtifactPomRewriter artifactPomRewriter = (ArtifactPomRewriter) container.lookup(
-                                                                                                          ArtifactPomRewriter.ROLE,
-                                                                                                          configuration.getSourcePomVersion() );
+                        artifactPomRewriter = (ArtifactPomRewriter) container.lookup( ArtifactPomRewriter.ROLE,
+                                                                                      configuration.getSourcePomVersion() );
-                    try
+                    if ( artifactReporter.hasError() )
-                        artifactReporter.writeReport();
+                        repoReporter.warn( "Error(s) occurred while rewriting artifact: \'" + artifact.getId()
+                            + "\' or its POM." );
-                    catch ( IOException e )
+
+                    if ( artifactReporter.hasWarning() )
-                        logger.error( "Error writing report for artifact \'" + artifact.getId() + "\'", e );
+                        repoReporter.info( "Warning(s) occurred while rewriting artifact: \'" + artifact.getId()
+                            + "\' or its POM." );
+                    }
+                }
+                finally
+                {
+                    if ( artifactReporter != null )
+                    {
+                        artifactReporter.close();
-
-            try
+        }
+        finally
+        {
+            if ( artifactPomRewriter != null )
-                repoReporter.writeReport();
-            }
-            catch ( IOException e )
-            {
-                logger.error( "Error writing report for repository", e );
+                container.release( artifactPomRewriter );
-    private void copyArtifact( File artifactSource, File artifactTarget, Reporter reporter ) throws IOException
+    private void copyArtifact( File artifactSource, File artifactTarget, Reporter reporter )
+        throws IOException
-            if(!targetParent.exists())
+            if ( !targetParent.exists() )
-                reporter.info("Creating directory \'" + targetParent + "\'.");
+                reporter.info( "Creating directory \'" + targetParent + "\'." );
-            
-            inStream = new BufferedInputStream(new FileInputStream(artifactSource));
-            outStream = new BufferedOutputStream(new FileOutputStream(artifactTarget));
-            
+
+            inStream = new BufferedInputStream( new FileInputStream( artifactSource ) );
+            outStream = new BufferedOutputStream( new FileOutputStream( artifactTarget ) );
+
-            
-            while((read = inStream.read(buffer)) > -1)
+
+            while ( ( read = inStream.read( buffer ) ) > -1 )
-                outStream.write(buffer, 0, read);
+                outStream.write( buffer, 0, read );
-            
+
-            IOUtil.close(inStream);
-            IOUtil.close(outStream);
+            IOUtil.close( inStream );
+            IOUtil.close( outStream );
-        
-        logger.info("Target repository is at: \'" + targetRepositoryBase + "\'");
+
+        logger.info( "Target repository is at: \'" + targetRepositoryBase + "\'" );
-        logger.info("Source repository is at: \'" + sourceRepositoryBase + "\'");
+        logger.info( "Source repository is at: \'" + sourceRepositoryBase + "\'" );

INS31 INS83 INS39 INS42 INS44 INS43 INS8 UPD83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 MOV8 INS43 INS42 INS42 MOV60 MOV60 MOV60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS42 MOV27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV8 INS8 INS60 INS60 INS54 UPD42 INS33 INS25 INS43 INS59 MOV43 INS59 INS8 INS8 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS60 MOV60 INS54 INS25 INS25 INS25 INS25 INS60 INS54 INS42 INS33 MOV21 INS42 INS7 MOV43 INS59 INS8 INS8 MOV27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 MOV43 INS59 INS8 INS8 INS42 MOV14 INS42 INS33 INS21 INS25 MOV54 INS25 INS60 INS60 INS54 INS32 INS32 INS21 INS32 INS32 INS21 INS42 INS33 INS21 MOV42 INS33 INS21 MOV60 MOV54 MOV25 MOV25 INS25 INS25 INS25 UPD42 UPD42 UPD42 INS7 INS32 INS8 INS27 INS8 MOV43 INS59 MOV43 INS59 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS32 MOV8 INS32 INS8 INS27 INS8 INS42 MOV11 INS42 INS42 MOV21 INS42 INS33 INS21 INS42 INS33 INS42 INS33 INS21 MOV60 INS21 MOV60 INS25 INS21 INS25 INS25 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS25 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS21 INS42 INS33 MOV21 INS32 INS7 INS7 INS32 INS8 INS32 INS27 INS8 INS27 INS8 INS43 MOV42 INS27 INS32 INS8 INS7 INS32 INS42 INS42 INS42 INS42 MOV11 INS42 MOV11 INS42 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS32 UPD45 MOV45 INS25 INS25 INS42 INS42 MOV21 INS42 MOV11 UPD42 UPD42 INS42 INS42 INS27 UPD42 INS32 INS32 INS32 INS42 INS13 INS13 INS32 INS8 INS32 INS8 UPD45 UPD45 UPD45 MOV45 MOV32 UPD45 MOV45 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 MOV21 MOV21 INS42 INS42 MOV21 UPD42 DEL42 DEL42 DEL59 DEL60 DEL25 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL32 DEL32 DEL27 DEL14 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL25 DEL8