Cleaning up exception wrapping to allow better reporting of errors to end users. Also implementing the beginnings of a new error reporter, and bumping the version of plexus-container-default up to 1.0-alpha-33-SNAPSHOT to improve the accessibility to ClassRealm info for ComponentLookupException.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@584343 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.PlexusConstants;
-import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-import org.codehaus.plexus.context.Context;
-import org.codehaus.plexus.context.ContextException;
-import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
-    Initializable,
-    Contextualizable
+    Initializable
-    protected PlexusContainer container;
-
-        if ( this.superProject != null )
+        if ( superProject != null )
-            return this.superProject;
+            return superProject;
-            // This will never happen with the repositories in the SuperPOM
+            // we shouldn't be swallowing exceptions, no matter how unlikely.
+            // or, if we do, we should pay attention to the one coming from getSuperModel()...
+            throw new ProjectBuildingException( STANDALONE_SUPERPOM_GROUPID + ":"
+                                                + STANDALONE_SUPERPOM_ARTIFACTID,
+                                                "Maven super-POM contains an invalid repository!",
+                                                e );
-        ensureMetadataSourceIsInitialized();
-
-                    e.getMessage(), e );
+                    e.getMessage(), projectDescriptor.getAbsolutePath(), e );
-    private void ensureMetadataSourceIsInitialized()
-        throws ProjectBuildingException
-    {
-        if ( artifactMetadataSource == null )
-        {
-            try
-            {
-                artifactMetadataSource = (ArtifactMetadataSource) container.lookup( ArtifactMetadataSource.ROLE );
-            }
-            catch ( ComponentLookupException e )
-            {
-                throw new ProjectBuildingException( "all", "Cannot lookup metadata source for building the project.",
-                    e );
-            }
-        }
-    }
-
-                                         DependencyManagement dependencyManagement )
+                                         DependencyManagement dependencyManagement, File pomFile )
-                        "' for dependency '" + d.getManagementKey() + "': " + e.getMessage(), e );
+                        "' for dependency '" + d.getManagementKey() + "': " + e.getMessage(), pomFile.getAbsolutePath(), e );
-        File projectDir = null;
-
-        if ( projectDescriptor != null )
-        {
-            projectDir = projectDescriptor.getAbsoluteFile().getParentFile();
-        }
-
-                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", e );
+                throw new ProjectBuildingException( projectId, "Failed to activate external profiles.", projectDescriptor.getAbsolutePath(), e );
-        superProject.setActiveProfiles( profileAdvisor.applyActivatedProfiles( superModel, null, explicitlyActive, explicitlyInactive ) );
+        superProject.setActiveProfiles( profileAdvisor.applyActivatedProfiles( superModel, projectDescriptor, explicitlyActive, explicitlyInactive ) );
-            projectDir, explicitlyActive,
+            projectDescriptor, explicitlyActive,
-            project = assembleLineage( model, lineage, localRepository, projectDir, aggregatedRemoteWagonRepositories, externalProfileManager, strict );
+            project = assembleLineage( model, lineage, localRepository, projectDescriptor, aggregatedRemoteWagonRepositories, externalProfileManager, strict );
-            project = processProjectLogic( pomLocation, project, projectDir, strict );
+            project = processProjectLogic( pomLocation, project, projectDescriptor, strict );
-        project.setManagedVersionMap( createManagedVersionMap( projectId, project.getDependencyManagement() ) );
+        project.setManagedVersionMap( createManagedVersionMap( projectId, project.getDependencyManagement(), projectDescriptor ) );
-                                                      File projectDir,
+                                                      File pomFile,
-        collectInitialRepositoriesFromModel( collected, model, projectDir, explicitlyActive, explicitlyInactive );
+        collectInitialRepositoriesFromModel( collected, model, pomFile, explicitlyActive, explicitlyInactive );
-        collectInitialRepositoriesFromModel( collected, superModel, projectDir, explicitlyActive, explicitlyInactive );
+        collectInitialRepositoriesFromModel( collected, superModel, null, explicitlyActive, explicitlyInactive );
-                                                      File projectDir,
+                                                      File pomFile,
-        Set reposFromProfiles = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, projectDir, explicitlyActive, explicitlyInactive );
+        Set reposFromProfiles = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, pomFile, explicitlyActive, explicitlyInactive );
-                                              File projectDir,
+                                              File pomFile,
-        if ( projectDir != null )
+        if ( pomFile != null )
-            context.put( "basedir", projectDir.getAbsolutePath() );
+            context.put( "basedir", pomFile.getParentFile().getAbsolutePath() );
-        project.setPluginArtifacts( createPluginArtifacts( projectId, project.getBuildPlugins() ) );
+        project.setPluginArtifacts( createPluginArtifacts( projectId, project.getBuildPlugins(), pomLocation ) );
-        project.setReportArtifacts( createReportArtifacts( projectId, project.getReportPlugins() ) );
+        project.setReportArtifacts( createReportArtifacts( projectId, project.getReportPlugins(), pomLocation ) );
-        project.setExtensionArtifacts( createExtensionArtifacts( projectId, project.getBuildExtensions() ) );
+        project.setExtensionArtifacts( createExtensionArtifacts( projectId, project.getBuildExtensions(), pomLocation ) );
-                                          File projectDir,
+                                          File pomFile,
-        modelLineage.setOrigin( model, new File( projectDir, "pom.xml" ), new ArrayList( aggregatedRemoteWagonRepositories ) );
+        modelLineage.setOrigin( model, pomFile, new ArrayList( aggregatedRemoteWagonRepositories ) );
-            project.setActiveProfiles( profileAdvisor.applyActivatedProfiles( currentModel, projectDir, explicitlyActive,
+            project.setActiveProfiles( profileAdvisor.applyActivatedProfiles( currentModel, currentPom, explicitlyActive,
-            profileAdvisor.applyActivatedExternalProfiles( result.getModel(), projectDir, externalProfileManager );
+            profileAdvisor.applyActivatedExternalProfiles( result.getModel(), pomFile, externalProfileManager );
-                "Could not find the model file '" + file.getAbsolutePath() + "'.", e );
+                "Could not find the model file '" + file.getAbsolutePath() + "'.", file.getAbsolutePath(), e );
-                file.getAbsolutePath() + "'.\nError: \'" + e.getLocalizedMessage() + "\'", e );
+                file.getAbsolutePath() + "'.\nError: \'" + e.getLocalizedMessage() + "\'", file.getAbsolutePath(), e );
-                "\'\nError: \'" + e.getLocalizedMessage() + "\'", e );
+                "\'\nError: \'" + e.getLocalizedMessage() + "\'", url.toExternalForm(), e );
-    private static String createCacheKey( String groupId,
-                                          String artifactId,
-                                          String version )
-    {
-        return groupId + ":" + artifactId + ":" + version;
-    }
-
-                                         List plugins )
+                                         List plugins, String pomLocation )
-                    e.getMessage(), e );
+                    e.getMessage(), pomLocation, e );
-                                         List reports )
+                                         List reports, String pomLocation )
-                        e.getMessage(), e );
+                        e.getMessage(), pomLocation, e );
-                                            List extensions )
+                                            List extensions, String pomLocation )
-                        "': " + e.getMessage(), e );
+                        "': " + e.getMessage(), pomLocation, e );
-
-    public void contextualize( Context context )
-        throws ContextException
-    {
-        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
-    }

INS44 INS44 MOV44 INS44 INS44 INS44 MOV43 INS42 MOV43 INS42 UPD42 UPD42 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 INS33 UPD42 INS42 INS42 INS53 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS14 UPD42 MOV43 INS27 INS45 INS42 INS32 UPD42 UPD42 INS32 UPD42 INS32 INS32 INS32 INS42 INS45 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL33 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL14 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL11 DEL7 DEL21 DEL8 DEL31