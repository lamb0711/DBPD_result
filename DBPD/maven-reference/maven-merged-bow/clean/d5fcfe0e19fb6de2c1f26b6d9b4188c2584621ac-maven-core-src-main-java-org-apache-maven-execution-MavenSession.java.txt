o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.LinkedHashMap;
+import java.util.Arrays;
+import java.util.HashMap;
-import java.util.Set;
-import java.util.Stack;
-import org.apache.maven.monitor.event.EventDispatcher;
-import org.apache.maven.plugin.descriptor.MojoDescriptor;
-import org.apache.maven.realm.MavenRealmManager;
-import org.apache.maven.reporting.MavenReport;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.util.dag.CycleDetectedException;
-
-    private EventDispatcher eventDispatcher;
-
-    private ReactorManager reactorManager;
-
-    private boolean usingPOMsFromFilesystem = true;
-
+    
+    private MavenExecutionResult result;
+    
+        
+    /**
+     * These projects have already been topologically sorted in the {@link org.apache.maven.Maven} component before
+     * being passed into the session.
+     */
+    private List<MavenProject> projects;
+    
+    private MavenProject topLevelProject;
+    
+    public MavenSession( PlexusContainer container, MavenExecutionRequest request, MavenExecutionResult result, MavenProject project )
+        throws CycleDetectedException, DuplicateProjectException
+    {
+        this( container, request, result, Arrays.asList( new MavenProject[]{ project } ) );        
+    }    
-    private Stack forkedProjectStack = new Stack();
-
-    private Map reports = new LinkedHashMap();
-
-    public MavenSession( PlexusContainer container, MavenExecutionRequest request, EventDispatcher eventDispatcher, ReactorManager reactorManager )
+    public MavenSession( PlexusContainer container, MavenExecutionRequest request, MavenExecutionResult result, List<MavenProject> projects )
+        throws CycleDetectedException, DuplicateProjectException
-
-
-        this.eventDispatcher = eventDispatcher;
-
-        this.reactorManager = reactorManager;
-    }
-
-    public MavenRealmManager getRealmManager()
-    {
-        return request.getRealmManager();
-    }
-
-    public Map getPluginContext( PluginDescriptor pluginDescriptor,
-                                 MavenProject project )
-    {
-        return reactorManager.getPluginContext( pluginDescriptor, project );
-    }
-
+        this.result = result;
+        //TODO: Current for testing classes creating the session
+        if ( projects.size() > 0 )
+        {
+            this.currentProject = projects.get( 0 );
+            this.topLevelProject = projects.get(  0 );
+        }
+        this.projects = projects;     
+    }    
+        
+    @Deprecated
-    public List getGoals()
+    public List<String> getGoals()
-    // ----------------------------------------------------------------------
-    //
-    // ----------------------------------------------------------------------
-
-    public Object lookup( String role )
-        throws ComponentLookupException
-    {
-        return container.lookup( role );
-    }
-
-    public Object lookup( String role,
-                          String roleHint )
-        throws ComponentLookupException
-    {
-        return container.lookup( role, roleHint );
-    }
-
-    public <T> T lookup( Class<T> type )
-        throws ComponentLookupException
-    {
-        return container.lookup( type );
-    }
-
-    public <T> T lookup( Class<T> type, String roleHint )
-        throws ComponentLookupException
-    {
-        return container.lookup( type, roleHint );
-    }
-
-    public List lookupList( String role )
-        throws ComponentLookupException
-    {
-        return container.lookupList( role );
-    }
-
-    public Map lookupMap( String role )
-        throws ComponentLookupException
-    {
-        return container.lookupMap( role );
-    }
-
-    public EventDispatcher getEventDispatcher()
-    {
-        return eventDispatcher;
-    }
-
-
-    public List<MavenProject> getSortedProjects()
+    
+    public List<MavenProject> getProjects()
-        return reactorManager.getSortedProjects();
+        return projects;
-    public Date getStartTime()
-    {
-        return request.getStartTime();
-    }
-
-    /**
-     * Push the existing currentProject onto the forked-project stack, and set the specified project
-     * as the new current project. This signifies the beginning of a new forked-execution context.
-     */
-    public void addForkedProject( MavenProject project )
-    {
-        forkedProjectStack.push( currentProject );
-        currentProject = project;
-    }
-
-    /**
-     * Peel off the last forked project from the stack, and restore it as the currentProject. This
-     * signifies the cleanup of a completed forked-execution context.
-     */
-    public MavenProject removeForkedProject()
-    {
-        if ( !forkedProjectStack.isEmpty() )
-        {
-            MavenProject lastCurrent = currentProject;
-            currentProject = (MavenProject) forkedProjectStack.pop();
-
-            return lastCurrent;
-        }
-
-        return null;
-    }
-
-    /**
-     * Return the current project for use in a mojo execution.
-     */
-    /**
-     * Retrieve the list of reports ({@link MavenReport} instances) that have been executed against
-     * this project, for use in another mojo's execution.
-     */
-    public List getReports()
-    {
-        if ( reports == null )
-        {
-            return Collections.EMPTY_LIST;
-        }
-
-        return new ArrayList( reports.values() );
-    }
-
-    /**
-     * Clear the reports for this project
-     */
-    public void clearReports()
-    {
-        reports.clear();
-    }
-
-    /**
-     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for
-     * future reference.
-     */
-    public void addReport( MojoDescriptor mojoDescriptor, MavenReport report )
-    {
-        reports.put( mojoDescriptor, report );
-    }
-
-    public Set getReportMojoDescriptors()
-    {
-        if ( reports == null )
-        {
-            return Collections.EMPTY_SET;
-        }
-
-        return reports.keySet();
-    }
-
+    }        
+
+    public MavenProject getTopLevelProject()
+    {
+        return topLevelProject;
+
+    public MavenExecutionResult getResult()
+    {
+        return result;
+    }        
+    
+    // Backward compat
+    public Map<String,Map<String,Object>> getPluginContext( PluginDescriptor pluginDescriptor, MavenProject project )
+    {
+        return new HashMap<String,Map<String,Object>>();
+    }    
+
+    /*
+    private Map pluginContextsByProjectAndPluginKey = new HashMap();
+    
+    public Map getPluginContext( PluginDescriptor plugin, MavenProject project )
+    {
+        Map pluginContextsByKey = (Map) pluginContextsByProjectAndPluginKey.get( project.getId() );
+
+        if ( pluginContextsByKey == null )
+        {
+            pluginContextsByKey = new HashMap();
+
+            pluginContextsByProjectAndPluginKey.put( project.getId(), pluginContextsByKey );
+        }
+
+        Map pluginContext = (Map) pluginContextsByKey.get( plugin.getPluginLookupKey() );
+
+        if ( pluginContext == null )
+        {
+            pluginContext = new HashMap();
+            pluginContextsByKey.put( plugin.getPluginLookupKey(), pluginContext );
+        }
+
+        return pluginContext;
+    }
+    */
+    

MOV23 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 INS23 INS31 INS31 UPD43 INS29 MOV83 INS74 MOV59 MOV43 MOV83 MOV42 MOV44 INS44 MOV44 MOV44 UPD43 MOV43 UPD43 MOV43 INS8 MOV83 INS42 MOV44 MOV44 MOV44 INS44 UPD43 MOV43 UPD43 MOV43 INS8 INS78 INS74 MOV74 UPD42 MOV43 UPD42 INS43 INS42 INS74 UPD42 MOV44 MOV44 UPD42 UPD42 INS65 INS43 INS43 UPD42 UPD42 UPD43 UPD42 INS43 INS42 UPD43 UPD42 UPD42 UPD42 INS17 INS43 INS42 INS74 INS42 UPD42 UPD42 MOV21 MOV21 INS21 INS25 MOV21 INS42 MOV43 INS43 INS41 UPD42 MOV42 INS41 MOV43 MOV43 INS74 INS66 INS65 INS66 INS66 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS43 INS43 INS7 INS27 INS8 MOV42 INS42 INS42 INS42 INS42 MOV43 MOV43 MOV43 INS14 INS40 UPD42 MOV42 UPD42 MOV42 INS3 MOV42 UPD42 MOV42 INS22 INS42 INS32 INS34 MOV21 INS21 INS22 INS42 INS74 INS5 INS4 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS7 INS52 INS42 INS43 MOV43 INS74 MOV43 INS85 INS42 INS22 INS32 INS22 INS32 INS42 MOV43 MOV43 MOV43 INS52 INS42 INS42 INS42 INS34 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS34 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL43 DEL14 DEL83 DEL43 DEL23 DEL42 DEL43 DEL14 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL43 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL33 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL83 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL32 DEL38 DEL42 DEL42 DEL59 DEL60 DEL42 DEL41 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL32 DEL21 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL33 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32