allow version spec/release version of an extension

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225480 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.artifact.versioning.VersionRange;
+import org.codehaus.plexus.util.StringUtils;
-        throws ArtifactResolutionException, PlexusContainerException
+        throws ArtifactResolutionException, PlexusContainerException, InvalidVersionSpecificationException
-        // TODO: version may be null
-        Artifact artifact = artifactFactory.createExtensionArtifact( extension.getGroupId(), extension.getArtifactId(),
-                                                                     extension.getVersion() );
+        // TODO: this is duplicated with DefaultMavenProjectBuilder. Push into artifact factory.
+        String version;
-        ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections.singleton( artifact ),
-                                                                                project.getArtifact(),
-                                                                                project.getRemoteArtifactRepositories(),
-                                                                                localRepository,
-                                                                                artifactMetadataSource );
-        for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )
+        if ( StringUtils.isEmpty( extension.getVersion() ) )
-            Artifact a = (Artifact) i.next();
-            container.addJarResource( a.getFile() );
+            version = "RELEASE";
+        }
+        else
+        {
+            version = extension.getVersion();
+        }
+
+        VersionRange versionRange = VersionRange.createFromVersionSpec( version );
+        Artifact artifact = artifactFactory.createExtensionArtifact( extension.getGroupId(), extension.getArtifactId(),
+                                                                     versionRange );
+
+        if ( artifact != null )
+        {
+            ArtifactResolutionResult result = artifactResolver.resolveTransitively( Collections.singleton( artifact ),
+                                                                                    project.getArtifact(),
+                                                                                    project.getRemoteArtifactRepositories(),
+                                                                                    localRepository,
+                                                                                    artifactMetadataSource );
+            for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )
+            {
+                Artifact a = (Artifact) i.next();
+                container.addJarResource( a.getFile() );
+            }

INS26 INS26 INS26 INS40 INS40 INS40 INS43 INS8 INS42 INS60 INS25 INS60 MOV60 INS25 INS43 INS59 INS32 INS8 INS8 INS43 INS59 INS27 MOV8 INS42 INS42 INS42 INS42 MOV32 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42