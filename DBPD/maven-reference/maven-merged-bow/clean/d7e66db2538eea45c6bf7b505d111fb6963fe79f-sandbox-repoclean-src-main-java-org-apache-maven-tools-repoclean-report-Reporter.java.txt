Implemented list items #2 and #3 from the main issue (scope from m1, and plugin entry translation in POMs). Tests included.


PR: MNG-309


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163974 13f79535-47bb-0310-9956-ffa450edef68

-/* ====================================================================
- *   Copyright 2001-2004 The Apache Software Foundation.
+/*
+ * Copyright 2001-2005 The Apache Software Foundation.
- *   Licensed under the Apache License, Version 2.0 (the "License");
- *   you may not use this file except in compliance with the License.
- *   You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
- *       http://www.apache.org/licenses/LICENSE-2.0
+ *      http://www.apache.org/licenses/LICENSE-2.0
- *   Unless required by applicable law or agreed to in writing, software
- *   distributed under the License is distributed on an "AS IS" BASIS,
- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *   See the License for the specific language governing permissions and
- *   limitations under the License.
- * ====================================================================
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import org.codehaus.plexus.util.IOUtil;
-
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * @author jdcasey
- */
-public class Reporter
+public interface Reporter
-    private static final String WARN_LEVEL = "[WARNING] ";
+    public void close();
-    private static final String ERROR_LEVEL = "[ERROR] ";
+    public boolean hasWarning();
-    private File reportsFile;
-
-    private List messages = new ArrayList();
-
-    private boolean hasError = false;
-
-    private boolean hasWarning = false;
-
-    private Writer writer;
-    
-    public Reporter( File reportsBase, String reportPath )
-    {
-        this.reportsFile = new File( reportsBase, reportPath );
-
-        File parentDir = reportsFile.getParentFile();
-        if ( !parentDir.exists() )
-        {
-            parentDir.mkdirs();
-        }
-
-        if ( !parentDir.isDirectory() )
-        {
-            throw new IllegalArgumentException( "path: \'" + parentDir.getAbsolutePath()
-                + "\' refers to a file, not a directory.\n" + "Cannot write report file: \'"
-                + reportsFile.getAbsolutePath() + "\'." );
-        }
-    }
-    
-    public File getReportFile()
-    {
-        return reportsFile;
-    }
-
-    private void open()
-        throws IOException
-    {
-        this.writer = new FileWriter( reportsFile );
-    }
-
-    public void close()
-    {
-        IOUtil.close( writer );
-    }
-
-    private void write( Object message )
-        throws IOException
-    {
-        if ( writer == null )
-        {
-            open();
-        }
-
-        if ( message instanceof List )
-        {
-            writer.write( format( (List) message ).toString() );
-        }
-        else
-        {
-            writer.write( String.valueOf( message ) );
-        }
-
-        writer.write( '\n' );
-        
-        writer.flush();
-    }
-
-    public boolean hasWarning()
-    {
-        return hasWarning;
-    }
-
-    public boolean hasError()
-    {
-        return hasError;
-    }
+    public boolean hasError();
-        throws IOException
-    {
-        hasWarning = true;
-        write( new AppendingList( 2 ).append( WARN_LEVEL ).append( message ) );
-    }
+        throws ReportWriteException;
-        throws IOException
-    {
-        hasError = true;
-        write( new AppendingList( 3 ).append( ERROR_LEVEL ).append( message ).append( error ) );
-    }
+        throws ReportWriteException;
-        throws IOException
-    {
-        hasError = true;
-        write( new AppendingList( 2 ).append( ERROR_LEVEL ).append( message ) );
-    }
-
-    private CharSequence format( List messageParts )
-    {
-        StringBuffer buffer = new StringBuffer();
-        for ( Iterator it = messageParts.iterator(); it.hasNext(); )
-        {
-            Object part = it.next();
-            if ( part instanceof Throwable )
-            {
-                part = formatThrowable( (Throwable) part );
-            }
-
-            buffer.append( part );
-        }
-
-        return buffer;
-    }
-
-    private String formatThrowable( Throwable throwable )
-    {
-        StringWriter sWriter = new StringWriter();
-        PrintWriter pWriter = new PrintWriter( sWriter );
-
-        throwable.printStackTrace( pWriter );
-
-        return sWriter.toString();
-    }
-
-    private static class AppendingList
-        extends ArrayList
-    {
-        public AppendingList()
-        {
-        }
-
-        public AppendingList( int size )
-        {
-            super( size );
-        }
-
-        public AppendingList append( Object item )
-        {
-            super.add( item );
-            return this;
-        }
-    }
+        throws ReportWriteException;

MOV44 UPD43 UPD43 MOV44 UPD43 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL41 DEL8 DEL42 DEL41 DEL8 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL43 DEL34 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL43 DEL34 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL43 DEL34 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL8 DEL31 DEL83 DEL42 DEL39 DEL42 DEL44 DEL42 DEL46 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL48 DEL21 DEL52 DEL41 DEL8 DEL31 DEL55