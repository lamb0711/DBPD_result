PR: MNG-760
Submitted by: Fabrizio Giustina
Reviewed by:  Brett Porter
m2 eclipse plugin improvements (source download and attachment, customization of natures/builders/conclasspath, flexible project dupport) and refactoring
(applied with modifications)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280259 13f79535-47bb-0310-9956-ffa450edef68

- * 
+ *
- * 
+ *
- * 
+ *
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.artifact.resolver.ArtifactResolver;
+import org.apache.maven.model.Resource;
-
-import java.io.File;
-import java.util.List;
+import org.codehaus.plexus.util.StringUtils;
-    protected EclipseWriter eclipseWriter;
+
+    /**
+     * Separator used for natures, builders, etc. (can't use space since conclasspath entries can contain spaces).
+     */
+    private static final String LIST_SEPARATOR = ","; //$NON-NLS-1$
-     *
+     * The currently executed project (can be a reactor project).
+     * Local maven repository.
+     * If the executed project is a reactor project, this will contains the full list of projects in the reactor.
+     * Artifact resolver, needed to download source jars for inclusion in classpath.
+     * @parameter expression="${component.org.apache.maven.artifact.resolver.ArtifactResolver}"
+     * @required
+     * @readonly
+     * @todo waiting for the component tag
+     */
+    private ArtifactResolver artifactResolver;
+
+    /**
+     * Artifact factory, needed to download source jars for inclusion in classpath.
+     * @parameter expression="${component.org.apache.maven.artifact.factory.ArtifactFactory}"
+     * @required
+     * @readonly
+     * @todo waiting for the component tag
+     */
+    private ArtifactFactory artifactFactory;
+
+    /**
+     * Remote repositories which will be searched for source attachments.
+     * @parameter expression="${project.remoteArtifactRepositories}"
+     * @required
+     * @readonly
+     */
+    private List remoteArtifactRepositories;
+
+    /**
+     * List of eclipse project natures. By default the <code>org.eclipse.jdt.core.javanature</code> nature is added.
+     * Configuration example:
+     * <pre>
+     *    &lt;projectnatures>
+     *      &lt;java.lang.String>org.eclipse.jdt.core.javanature&lt;/java.lang.String>
+     *      &lt;java.lang.String>org.eclipse.wst.common.modulecore.ModuleCoreNature&lt;/java.lang.String>
+     *    &lt;/projectnatures>
+     * </pre>
+     * @parameter
+     * @todo default-value="<java.lang.String>org.eclipse.jdt.core.javanature</java.lang.String>"
+     */
+    private List projectnatures;
+
+    /**
+     * List of eclipse build commands. By default the <code>org.eclipse.jdt.core.javabuilder</code> nature is added.
+     * Configuration example:
+     * <pre>
+     *    &lt;buildcommands>
+     *      &lt;java.lang.String>org.eclipse.wst.common.modulecore.ComponentStructuralBuilder&lt;/java.lang.String>
+     *      &lt;java.lang.String>org.eclipse.jdt.core.javabuilder&lt;/java.lang.String>
+     *      &lt;java.lang.String>org.eclipse.wst.common.modulecore.ComponentStructuralBuilderDependencyResolver&lt;/java.lang.String>
+     *    &lt;/buildcommands>
+     * </pre>
+     * @parameter
+     * @todo default-value="org.eclipse.jdt.core.javabuilder"
+     */
+    private List buildcommands;
+
+    /**
+     * List of container classpath entries. No classpath container is added by default.
+     * Configuration example:
+     * <pre>
+     *    &lt;classpathContainers>
+     *      &lt;java.lang.String>org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v5.5&lt;/java.lang.String>
+     *      &lt;java.lang.String>org.eclipse.jst.j2ee.internal.web.container/artifact&lt;/java.lang.String>
+     *    &lt;/classpathContainers>
+     * </pre>
+     * @parameter
+     * @todo default-value=empty list
+     */
+    private List classpathContainers;
+
+    /**
+     * Eclipse workspace directory.
-    public EclipsePlugin()
-    {
-        eclipseWriter = new EclipseWriter();
-    }
-
-    public void setProject( MavenProject project )
+    /**
+     * Setter for <code>project</code>. Needed for tests.
+     * @param project The MavenProject to set.
+     */
+    protected void setProject( MavenProject project )
-    public void setLocalRepository( ArtifactRepository localRepository )
+    /**
+     * Setter for <code>localRepository</code>. Needed for tests.
+     * @param localRepository The ArtifactRepository to set.
+     */
+    protected void setLocalRepository( ArtifactRepository localRepository )
+    /**
+     * Setter for <code>artifactFactory</code>. Needed for tests.
+     * @param artifactFactory The artifactFactory to set.
+     */
+    protected void setArtifactFactory( ArtifactFactory artifactFactory )
+    {
+        this.artifactFactory = artifactFactory;
+    }
+
+    /**
+     * Setter for <code>artifactResolver</code>. Needed for tests.
+     * @param artifactResolver The artifactResolver to set.
+     */
+    protected void setArtifactResolver( ArtifactResolver artifactResolver )
+    {
+        this.artifactResolver = artifactResolver;
+    }
+
+    /**
+     * Setter for <code>remoteArtifactRepositories</code>. Needed for tests.
+     * @param remoteArtifactRepositories The remoteArtifactRepositories to set.
+     */
+    protected void setRemoteArtifactRepositories( List remoteArtifactRepositories )
+    {
+        this.remoteArtifactRepositories = remoteArtifactRepositories;
+    }
+
+    /**
+     * Setter for <code>buildcommands</code>. Needed for tests.
+     * @param buildcommands The buildcommands to set.
+     */
+    protected void setBuildcommands( List buildcommands )
+    {
+        this.buildcommands = buildcommands;
+    }
+
+    /**
+     * Setter for <code>classpathContainers</code>. Needed for tests.
+     * @param classpathContainers The classpathContainers to set.
+     */
+    protected void setClasspathContainers( List classpathContainers )
+    {
+        this.classpathContainers = classpathContainers;
+    }
+
+    /**
+     * Setter for <code>projectnatures</code>. Needed for tests.
+     * @param projectnatures The projectnatures to set.
+     */
+    protected void setProjectnatures( List projectnatures )
+    {
+        this.projectnatures = projectnatures;
+    }
+
+    /**
+     * Setter for <code>outputDir</code>. Needed for tests.
+     * @param outputDir The outputDir to set.
+     */
+    /**
+     * @see org.apache.maven.plugin.Mojo#execute()
+     */
+
+        assertNotEmpty( project.getGroupId(), "groupId" ); //$NON-NLS-1$
+        assertNotEmpty( project.getArtifactId(), "artifactId" ); //$NON-NLS-1$
+
+        // defaults
+        // @todo how set List values in @default-value??
+        if ( projectnatures == null )
+        {
+            projectnatures = new ArrayList();
+            projectnatures.add( "org.eclipse.jdt.core.javanature" );
+        }
+        if ( buildcommands == null )
+        {
+            buildcommands = new ArrayList();
+            buildcommands.add( "org.eclipse.jdt.core.javabuilder" );
+        }
+        if ( classpathContainers == null )
+        {
+            classpathContainers = new ArrayList();
+        }
+        // end defaults
+
-            throw new MojoExecutionException( "There must be a POM in the current working directory for the Eclipse plugin to work." );
+            throw new MojoExecutionException( Messages.getString( "EclipsePlugin.missingpom" ) ); //$NON-NLS-1$
-        if ( "pom".equals( project.getPackaging() ) )
+        if ( "pom".equals( project.getPackaging() ) ) //$NON-NLS-1$
-            getLog().info( "Don't generate Eclipse project for pom project" );
-
+            getLog().info( Messages.getString( "EclipsePlugin.pompackaging" ) ); //$NON-NLS-1$
-                throw new MojoExecutionException( "Not a directory: '" + outputDir + "'" );
+                throw new MojoExecutionException( Messages.getString( "EclipsePlugin.notadir", outputDir ) ); //$NON-NLS-1$
-                throw new MojoExecutionException( "Can't create directory '" + outputDir + "'" );
+                throw new MojoExecutionException( Messages.getString( "EclipsePlugin.cantcreatedir", outputDir ) ); //$NON-NLS-1$
-        try
+        if ( executedProject == null )
-            eclipseWriter.setLocalRepositoryFile( new File ( localRepository.getBasedir() ) );
-
-            eclipseWriter.setLog( getLog() );
-
-            if ( executedProject == null )
-            {
-                // backwards compat with alpha-2 only
-                executedProject = project;
-            }
-
-            eclipseWriter.write( outputDir, project, executedProject, reactorProjects );
+            // backwards compat with alpha-2 only
+            executedProject = project;
-        catch ( EclipsePluginException e )
+
+        // ready to start
+        write();
+
+    }
+
+    public void write()
+        throws EclipsePluginException
+    {
+
+        File projectBaseDir = project.getFile().getParentFile();
+
+        // build the list of referenced ARTIFACTS produced by reactor projects
+        List reactorArtifacts = resolveReactorArtifacts();
+
+        // build a list of UNIQUE source dirs (both src and resources) to be used in classpath and wtpmodules
+        EclipseSourceDir[] sourceDirs = buildDirectoryList( project, outputDir );
+
+        new EclipseClasspathWriter( getLog() ).write( projectBaseDir, outputDir, project, reactorArtifacts, sourceDirs,
+                                                      classpathContainers, localRepository, artifactResolver,
+                                                      artifactFactory, remoteArtifactRepositories );
+
+        new EclipseProjectWriter( getLog() ).write( projectBaseDir, outputDir, project, executedProject,
+                                                    reactorArtifacts, projectnatures, buildcommands );
+
+        new EclipseSettingsWriter( getLog() ).write( projectBaseDir, outputDir, project, executedProject );
+
+        new EclipseWtpmodulesWriter( getLog() ).write( outputDir, project, reactorArtifacts, sourceDirs,
+                                                       localRepository );
+
+        getLog().info( Messages.getString( "EclipsePlugin.wrote", //$NON-NLS-1$
+                                           new Object[] { project.getArtifactId(), outputDir.getAbsolutePath() } ) );
+    }
+
+    private void assertNotEmpty( String string, String elementName )
+        throws EclipsePluginException
+    {
+        if ( string == null )
-            throw new MojoExecutionException( "Error writing eclipse files.", e );
+            throw new EclipsePluginException( Messages.getString( "EclipsePlugin.missingelement", elementName ) ); //$NON-NLS-1$
+
+    private EclipseSourceDir[] buildDirectoryList( MavenProject project, File basedir )
+    {
+        File projectBaseDir = project.getFile().getParentFile();
+
+        // avoid duplicated entries
+        Set directories = new TreeSet();
+
+        extractSourceDirs( directories, executedProject.getCompileSourceRoots(), basedir, projectBaseDir, false, null );
+
+        extractResourceDirs( directories, project.getBuild().getResources(), project, basedir, projectBaseDir, false,
+                             null );
+
+        extractSourceDirs( directories, executedProject.getTestCompileSourceRoots(), basedir, projectBaseDir, true,
+                           EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, project.getBuild()
+                               .getTestOutputDirectory(), false ) );
+
+        extractResourceDirs( directories, project.getBuild().getTestResources(), project, basedir, projectBaseDir,
+                             true, EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, project.getBuild()
+                                 .getTestOutputDirectory(), false ) );
+
+        return (EclipseSourceDir[]) directories.toArray( new EclipseSourceDir[directories.size()] );
+    }
+
+    private void extractSourceDirs( Set directories, List sourceRoots, File basedir, File projectBaseDir, boolean test,
+                                   String output )
+    {
+        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )
+        {
+            String sourceRoot = (String) it.next();
+
+            if ( new File( sourceRoot ).isDirectory() )
+            {
+                sourceRoot = EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, sourceRoot, !projectBaseDir
+                    .equals( basedir ) );
+
+                directories.add( new EclipseSourceDir( sourceRoot, output, test, null, null ) );
+            }
+        }
+    }
+
+    private void extractResourceDirs( Set directories, List resources, MavenProject project, File basedir,
+                                     File projectBaseDir, boolean test, String output )
+    {
+        for ( Iterator it = resources.iterator(); it.hasNext(); )
+        {
+
+            Resource resource = (Resource) it.next();
+            String includePattern = null;
+            String excludePattern = null;
+
+            if ( resource.getIncludes().size() != 0 )
+            {
+                // @todo includePattern = ?
+                getLog().warn( Messages.getString( "EclipsePlugin.includenotsupported" ) ); //$NON-NLS-1$
+            }
+
+            if ( resource.getExcludes().size() != 0 )
+            {
+                // @todo excludePattern = ?
+                getLog().warn( Messages.getString( "EclipsePlugin.excludenotsupported" ) ); //$NON-NLS-1$
+            }
+
+            //          Example of setting include/exclude patterns for future reference.
+            //
+            //          TODO: figure out how to merge if the same dir is specified twice
+            //          with different in/exclude patterns. We can't write them now,
+            //                      since only the the first one would be included.
+            //
+            //          if ( resource.getIncludes().size() != 0 )
+            //          {
+            //              writer.addAttribute(
+            //                      "including", StringUtils.join( resource.getIncludes().iterator(), "|" )
+            //                      );
+            //          }
+            //
+            //          if ( resource.getExcludes().size() != 0 )
+            //          {
+            //              writer.addAttribute(
+            //                      "excluding", StringUtils.join( resource.getExcludes().iterator(), "|" )
+            //              );
+            //          }
+
+            if ( !StringUtils.isEmpty( resource.getTargetPath() ) )
+            {
+                output = resource.getTargetPath();
+            }
+
+            File resourceDirectory = new File( resource.getDirectory() );
+
+            if ( !resourceDirectory.exists() || !resourceDirectory.isDirectory() )
+            {
+                continue;
+            }
+
+            String resourceDir = resource.getDirectory();
+            resourceDir = EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, resourceDir, !projectBaseDir
+                .equals( basedir ) );
+
+            if ( output != null )
+            {
+                output = EclipseUtils.toRelativeAndFixSeparator( projectBaseDir, output, false );
+            }
+
+            directories.add( new EclipseSourceDir( resourceDir, output, test, includePattern, excludePattern ) );
+        }
+    }
+
+    /**
+     * Returns the list of referenced artifacts produced by reactor projects.
+     * @return List of Artifacts
+     */
+    private List resolveReactorArtifacts()
+    {
+        List referencedProjects = new ArrayList();
+
+        Set artifacts = project.getArtifacts();
+
+        for ( Iterator it = artifacts.iterator(); it.hasNext(); )
+        {
+            Artifact artifact = (Artifact) it.next();
+
+            MavenProject refProject = findReactorProject( reactorProjects, artifact );
+
+            if ( refProject != null )
+            {
+                referencedProjects.add( artifact );
+            }
+        }
+
+        return referencedProjects;
+    }
+
+    /**
+     * Utility method that locates a project producing the given artifact.
+     *
+     * @param reactorProjects a list of projects to search.
+     * @param artifact the artifact a project should produce.
+     * @return null or the first project found producing the artifact.
+     */
+    private static MavenProject findReactorProject( List reactorProjects, Artifact artifact )
+    {
+        if ( reactorProjects == null )
+        {
+            return null; // we're a single project
+        }
+
+        for ( Iterator it = reactorProjects.iterator(); it.hasNext(); )
+        {
+            MavenProject project = (MavenProject) it.next();
+
+            if ( project.getGroupId().equals( artifact.getGroupId() )
+                && project.getArtifactId().equals( artifact.getArtifactId() )
+                && project.getVersion().equals( artifact.getVersion() ) )
+            {
+                return project;
+            }
+        }
+
+        return null;
+    }
+

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS29 UPD83 UPD43 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 UPD83 INS29 UPD83 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS29 INS39 INS42 INS43 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS42 INS42 INS45 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 UPD42 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 MOV21 MOV21 INS25 INS25 INS25 MOV25 INS21 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS42 INS25 INS43 INS85 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS24 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS24 INS65 INS65 INS42 INS60 INS60 INS24 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS25 INS24 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS68 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS32 MOV43 INS59 INS43 INS59 INS5 INS59 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS11 INS42 INS42 INS42 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS58 INS32 INS8 INS66 INS66 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS27 INS8 INS58 INS32 INS8 INS33 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS40 INS42 UPD42 INS32 INS45 INS42 INS32 INS45 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS9 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS33 INS42 INS42 INS32 INS42 INS42 INS9 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS32 INS5 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS25 INS60 INS25 INS60 INS21 INS25 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS33 INS41 INS43 INS59 INS42 INS42 INS60 INS25 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS32 INS7 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV32 INS43 INS32 INS43 INS32 UPD43 MOV43 INS32 INS42 INS42 INS42 INS45 INS3 INS14 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS32 INS42 INS42 INS42 INS42 INS32 INS9 INS43 INS85 INS42 INS42 INS3 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS7 INS27 INS8 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS33 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS14 INS42 INS42 INS45 INS42 INS14 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS5 INS4 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS11 INS14 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS33 INS42 INS42 INS33 INS32 INS34 INS21 INS32 INS34 INS21 INS32 INS21 INS42 INS42 INS14 INS38 INS38 INS18 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS11 INS32 INS32 INS32 INS41 INS43 UPD43 MOV43 INS43 INS42 INS42 INS45 INS42 INS42 UPD45 MOV45 INS43 INS85 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS32 INS43 INS42 INS7 INS32 INS43 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS7 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 MOV43 INS32 INS42 INS42 INS42 INS42 INS38 INS43 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL14 DEL32 DEL45 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL14 DEL7 DEL21