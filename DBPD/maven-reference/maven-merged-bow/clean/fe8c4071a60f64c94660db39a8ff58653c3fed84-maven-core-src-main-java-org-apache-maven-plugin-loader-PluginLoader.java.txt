Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.classworlds.ClassRealm;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
- * 
+ *
-     * Lookup a component with the specified role + roleHint in the plugin's {@link ClassRealm}.
-     * Load the plugin first.
-     */
-    Object loadPluginComponent( String role, String roleHint, Plugin plugin, MavenProject project )
-        throws ComponentLookupException, PluginLoaderException;
-
-    /**
-     * Load the {@link PluginDescriptor} instance for the plugin implied by the specified MojoBinding, 
-     * using the project for {@link ArtifactRepository} and other supplemental plugin information as 
+     * Load the {@link PluginDescriptor} instance for the plugin implied by the specified MojoBinding,
+     * using the project for {@link ArtifactRepository} and other supplemental plugin information as
-     * Load the {@link PluginDescriptor} instance for the report plugin implied by the specified MojoBinding, 
-     * using the project for {@link ArtifactRepository} and other supplemental report/plugin information as 
+     * Load the {@link PluginDescriptor} instance for the report plugin implied by the specified MojoBinding,
+     * using the project for {@link ArtifactRepository} and other supplemental report/plugin information as
-    
+

MOV31 MOV31 UPD42 UPD42 UPD66 UPD66 UPD66 UPD66 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL31