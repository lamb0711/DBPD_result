make integration tests run under java


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163065 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
-import java.io.FileInputStream;
+import java.io.PrintStream;
+import java.lang.reflect.Method;
-import java.util.Properties;
+import java.net.URLClassLoader;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+ * @author <a href="mailto:brett@apache.org">Brett Porter</a>
-    private String basedir;
+    private static String localRepo;
-    private File homeDir;
+    private final String basedir;
-    private String localRepo;
+    private final ByteArrayOutputStream outStream = new ByteArrayOutputStream();
+    private final ByteArrayOutputStream errStream = new ByteArrayOutputStream();
-    public Verifier( String basedir, String homeDir )
+    private final PrintStream originalOut;
+    private final PrintStream originalErr;
+
+    public Verifier( String basedir )
-        this.homeDir = new File( homeDir );
+
+        originalOut = System.out;
+        System.setOut( new PrintStream( outStream ) );
+            
+        originalErr = System.err;
+        System.setErr( new PrintStream( errStream ) );
+    }
+
+    public void resetStreams()
+    {
+        System.setOut( originalOut );
+        System.setErr( originalErr );
+    }
+
+    public void displayStreamBuffers()
+    {
+        String out = outStream.toString();
+        if ( out != null && out.trim().length() > 0 )
+        {
+            System.out.println( "----- Standard Out -----" );
+            System.out.println( out );
+        }
+
+        String err = errStream.toString();
+        if ( err != null && err.trim().length() > 0 )
+        {
+            System.err.println( "----- Standard Error -----" );
+            System.err.println( err );
+        }
+        List lines = loadFile( basedir, "expected-results.txt" );
+        for ( Iterator i = lines.iterator(); i.hasNext(); )
+        {
+            String line = ( String ) i.next();
+            verifyExpectedResult( line );
+        }
+    }
+
+    private static List loadFile( String basedir, String filename ) throws VerificationException
+    {
+        return loadFile( new File( basedir, filename ) );
+    }
+
+    private static List loadFile( File file ) throws VerificationException
+    {
+        List lines = new ArrayList();
+
-            retrieveLocalRepo();
-
-            BufferedReader reader = new BufferedReader( new FileReader( new File( basedir, "expected-results.txt" ) ) );
+            BufferedReader reader = new BufferedReader( new FileReader( file ) );
-                verifyExpectedResult( line );
+                line = line.trim();
+                if ( line.startsWith( "#" ) || line.length() == 0 )
+                {
+                    continue;
+                }
+
+                line = replace( line, "${localRepository}", localRepo );
+                lines.add( line );
-
-        System.out.println( "-----------------------------------------------------------------------------------> OK" );
+        return lines;
-    private void retrieveLocalRepo() throws Exception
+    public void executeHook( String filename ) throws VerificationException
-        localRepo = System.getProperty( "maven.repo.local" );
-        if ( localRepo == null )
+        try
-            // parse ~/.m2/pom.xml for it...
-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-            DocumentBuilder builder = factory.newDocumentBuilder();
+            File f = new File( basedir, filename );
+            if ( !f.exists() )
+            {
+                return;
+            }
-            File pom = new File( homeDir, ".m2/pom.xml" );
-            Document dom = builder.parse( pom );
-
-            localRepo = XPathAPI.selectSingleNode( dom, "/project/local/repository/text()" ).getNodeValue();
+            List lines = loadFile( f );
+ 
+            for ( Iterator i = lines.iterator(); i.hasNext(); )
+            {
+                String line = ( String ) i.next();
+                executeCommand( line );
+            }
+        catch ( VerificationException e )
+        {
+            throw e;
+        }
+        catch ( Exception e )
+        {
+            throw new VerificationException( e );
+        }
+    }
+
+    private static void executeCommand( String line ) throws VerificationException
+    {
+        int index = line.indexOf( " " );
+        String cmd;
+        String args = null;
+        if ( index >= 0 )
+        {
+            cmd = line.substring( 0, index );
+            args = line.substring( index + 1 );
+        }
+        else
+        {
+            cmd = line;
+        }
+
+        if ( cmd.equals( "rm" ) )
+        {
+            System.out.println( "Removing file: " + args );
+            File f = new File( args );
+            if ( f.exists() && !f.delete() )
+            {
+                throw new VerificationException( "Error removing file - delete failed" );
+            }
+        }
+        else
+        {
+            throw new VerificationException( "unknown command: " + cmd );
+        }
+    }
+
+    private static String retrieveLocalRepo()
+    {
+        String repo = System.getProperty( "maven.repo.local" );
+        if ( repo == null )
+        {
+            try
+            {
+                // parse ~/.m2/pom.xml for it...
+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+                DocumentBuilder builder = factory.newDocumentBuilder();
+    
+                File pom = new File( System.getProperty( "user.home" ), ".m2/pom.xml" );
+                Document dom = builder.parse( pom );
+    
+                repo = XPathAPI.selectSingleNode( dom, "/project/local/repository/text()" ).getNodeValue();
+            }
+            catch ( Exception e )
+            {
+                System.err.println( "WARNING: failed to parse user pom (ignoring): " + e.getMessage() );
+            }
+        }
+        if ( repo == null )
+        {
+            repo = System.getProperty( "user.home" ) + "/.m2/repository";
+        }
+        return repo;
-        line = replace( line, "${localRepository}", localRepo );
-
-            String urlString = "jar:file:" + line;
+            String urlString = "jar:file:" + basedir + "/" + line;
-            File expectedFile;
-
-            if ( line.startsWith( "/" ) )
+            File expectedFile = new File( line );
+            if ( !expectedFile.isAbsolute() && !line.startsWith( "/" ) )
-                expectedFile = new File( line );
-            }
-            else
-            {
-                if ( line.indexOf( ":" ) > 0 ) //windows
-                {
-                    expectedFile = new File( line );
-                }
-                else
-                {
-                    expectedFile = new File( basedir, line );
-                }
-            }
+                expectedFile = new File( basedir, line );
+            } 
+    public void executeGoals( String filename ) throws VerificationException
+    {
+        String mavenHome = System.getProperty( "maven.home" );
+        if ( mavenHome == null )
+        {
+            throw new VerificationException( "maven.home has not been specified" );
+        }
+
+        List goals = loadFile( basedir, filename );
+        if ( goals.size() == 0 )
+        {
+            throw new VerificationException( "No goals specified" );
+        }
+        List allGoals = new ArrayList();
+        allGoals.add( "clean:clean" );
+        allGoals.addAll( goals );
+
+        try 
+        {
+            String prevUserDir = System.getProperty( "user.dir" );
+            System.setProperty( "user.dir", basedir );
+            System.setProperty( "classworlds.conf", mavenHome + "/bin/classworlds.conf" );
+            URL classWorldsUrl = new URL( "file:" + mavenHome + "/core/classworlds-1.1-SNAPSHOT.jar" );
+            ClassLoader cl = URLClassLoader.newInstance( new URL[] { classWorldsUrl } );
+            Class c = Class.forName( "org.codehaus.classworlds.Launcher", true, cl );
+            Method m = c.getMethod( "main", new Class[] { String[].class } );
+            m.invoke( null, new Object[] { allGoals.toArray( new String[0] ) } );
+            System.setProperty( "user.dir", prevUserDir );
+        }
+        catch ( Exception e )
+        {
+            throw new VerificationException( e );
+        }
+    }
+
-        Verifier verifier = new Verifier( args[0], args[1] );
+        String basedir = System.getProperty( "user.dir" );
+        localRepo = retrieveLocalRepo();
-        try
+        List tests = null;
+        try 
-            verifier.verify();
+            tests = loadFile( basedir, "integration-tests.txt" );
-            System.out.println( e.getMessage() );
-
-            System.exit( 1 );
+            System.err.println( "Unable to load integration tests file" );
+            System.err.println( e.getMessage() );
+            System.exit( 2 );
-        System.exit( 0 );
+        if ( tests.size() == 0 )
+        {
+            System.out.println( "No tests to run" );
+        }
+
+        int exitCode = 0;
+
+        for ( Iterator i = tests.iterator(); i.hasNext(); )
+        {
+            String test = ( String ) i.next(); 
+
+            System.out.print( test + "... " );
+
+            Verifier verifier = new Verifier( basedir + "/" + test );
+
+            try
+            {
+                verifier.executeHook( "prebuild-hook.txt" );
+                verifier.executeGoals( "goals.txt" );
+                verifier.executeHook( "postbuild-hook.txt" );
+    
+                verifier.verify();
+
+                verifier.resetStreams();
+
+                System.out.println( "OK" );
+            }
+            catch ( VerificationException e )
+            {
+                verifier.resetStreams();
+
+                System.out.println( "FAILED" );
+
+                verifier.displayStreamBuffers();
+
+                e.printStackTrace();
+                exitCode = 1;
+            }
+        }
+        System.exit( exitCode );
-}
+}
+

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS83 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 MOV83 MOV42 MOV44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS83 INS43 INS42 MOV44 INS44 INS43 INS8 INS83 UPD83 INS43 INS42 INS44 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS83 INS39 INS42 INS44 INS43 INS8 INS66 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 MOV21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS60 INS25 INS42 INS60 INS24 INS42 INS43 UPD42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS60 INS41 INS43 INS42 INS42 INS54 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS42 INS60 INS25 INS41 INS43 INS42 INS42 INS60 INS25 INS60 INS25 INS60 INS21 INS21 INS54 INS60 MOV21 INS60 INS25 INS60 INS24 INS43 INS43 INS7 INS32 INS7 INS32 INS32 INS32 MOV43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS32 INS42 INS43 INS59 INS42 INS42 INS8 INS12 INS12 INS42 INS39 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS8 INS8 INS43 INS59 INS8 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS8 INS12 INS43 INS59 INS7 INS43 INS59 INS27 INS8 INS39 INS59 INS58 INS32 INS8 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS21 INS42 INS42 INS32 INS27 INS27 INS21 INS21 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 MOV21 INS42 INS14 INS42 INS42 INS14 INS60 INS25 INS60 INS24 MOV44 INS8 INS44 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS34 MOV21 INS21 INS21 INS42 INS42 INS45 INS21 INS60 INS25 INS53 INS42 INS42 MOV32 UPD42 INS54 INS42 INS33 MOV21 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS32 INS34 INS53 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS60 INS21 INS21 INS60 INS60 INS60 INS60 INS21 INS21 INS44 INS8 INS42 UPD42 MOV42 INS32 INS42 MOV32 INS42 INS42 INS33 INS21 INS44 INS32 INS34 INS21 INS42 INS34 INS43 INS59 INS42 INS42 INS60 INS21 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS32 INS32 INS42 INS42 INS42 INS33 INS32 INS34 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS32 MOV43 INS59 MOV43 INS42 INS42 INS43 INS8 MOV43 INS59 INS38 INS8 INS43 INS59 INS58 INS32 INS8 INS53 INS43 INS42 INS53 INS42 INS42 INS45 INS7 INS7 INS32 MOV43 INS59 INS27 INS8 INS14 MOV8 INS12 INS43 INS43 UPD27 MOV27 MOV8 INS42 INS42 INS45 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS45 INS7 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 MOV43 INS59 INS8 INS12 INS42 INS42 INS32 INS42 INS40 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS40 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS21 INS25 MOV21 INS21 INS42 MOV14 INS32 INS41 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS21 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS14 INS32 INS38 INS53 INS43 INS27 INS44 INS8 UPD42 INS27 INS42 INS42 MOV14 INS38 INS38 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS27 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS3 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS40 INS42 INS45 INS42 INS42 INS42 INS42 INS11 INS40 INS42 INS27 INS42 INS14 INS21 INS21 INS21 MOV21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS32 INS7 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS45 INS42 MOV43 INS42 INS42 INS42 INS32 INS14 INS42 INS45 INS42 INS43 MOV43 INS42 INS21 INS32 INS45 INS42 INS45 INS32 MOV32 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS43 INS27 INS42 INS42 INS3 INS42 INS42 INS45 INS9 INS42 INS42 INS42 INS45 INS3 INS5 INS4 INS43 INS42 INS42 INS42 INS45 INS40 INS42 INS45 UPD40 UPD34 INS43 INS32 INS42 INS45 MOV43 INS27 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS18 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS45 INS42 UPD42 INS32 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS45 INS5 INS4 INS5 INS4 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS45 INS42 INS32 INS32 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS45 INS32 INS34 INS43 INS32 INS42 INS32 INS40 INS42 INS27 INS43 INS85 INS42 INS43 INS85 INS57 INS42 INS42 INS42 INS3 INS42 INS42 INS40 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS5 INS5 INS34 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS42 DEL8 DEL31 DEL39 DEL42 DEL8 DEL40 DEL42 DEL45 DEL32 DEL21 DEL45 DEL52 DEL42 DEL22 DEL42 DEL14 DEL39 DEL42 DEL45 DEL32 DEL34 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL14 DEL59 DEL60 DEL34