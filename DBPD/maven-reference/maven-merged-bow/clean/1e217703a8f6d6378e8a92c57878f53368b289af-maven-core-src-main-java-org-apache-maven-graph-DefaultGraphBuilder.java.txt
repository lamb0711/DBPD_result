[MNG-6863] Support --also-make flag in combination with --resume-from.

Author: Martin Kanters <Martin.Kanters@infosupport.com>

+import java.util.HashSet;
+import java.util.Set;
+import static java.util.Comparator.comparing;
+
-            result = new ArrayList<>( projects.size() );
+            File reactorDirectory = getReactorDirectory( request );
-            File reactorDirectory = null;
-            if ( request.getBaseDirectory() != null )
-            {
-                reactorDirectory = new File( request.getBaseDirectory() );
-            }
-
-            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( projects.size() );
+            Collection<MavenProject> selectedProjects = new LinkedHashSet<>( request.getSelectedProjects().size(), 1 );
-                MavenProject selectedProject = null;
-
-                for ( MavenProject project : projects )
-                {
-                    if ( isMatchingProject( project, selector, reactorDirectory ) )
-                    {
-                        selectedProject = project;
-                        break;
-                    }
-                }
-
-                if ( selectedProject != null )
-                {
-                    selectedProjects.add( selectedProject );
-                }
-                else
-                {
-                    throw new MavenExecutionException( "Could not find the selected project in the reactor: "
-                        + selector, request.getPom() );
-                }
+                MavenProject selectedProject = projects.stream()
+                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )
+                        .findFirst()
+                        .orElseThrow( () -> new MavenExecutionException(
+                                "Could not find the selected project in the reactor: " + selector, request.getPom() ) );
+                selectedProjects.add( selectedProject );
-            result.addAll( selectedProjects );
+            result = new ArrayList<>( selectedProjects );
+
+            // Order the new list in the original order
+            List<MavenProject> sortedProjects = graph.getSortedProjects();
+            result.sort( comparing( sortedProjects::indexOf ) );
-            File reactorDirectory = null;
-            if ( request.getBaseDirectory() != null )
-            {
-                reactorDirectory = new File( request.getBaseDirectory() );
-            }
+            File reactorDirectory = getReactorDirectory( request );
-            result = new ArrayList<>( projects.size() );
+            MavenProject resumingFromProject = projects.stream()
+                    .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )
+                    .findFirst()
+                    .orElseThrow( () -> new MavenExecutionException(
+                            "Could not find project to resume reactor build from: " + selector + " vs "
+                            + formatProjects( projects ), request.getPom() ) );
+            int resumeFromProjectIndex = projects.indexOf( resumingFromProject );
+            List<MavenProject> retainingProjects = result.subList( resumeFromProjectIndex, projects.size() );
-            boolean resumed = false;
-
-            for ( MavenProject project : projects )
-            {
-                if ( !resumed && isMatchingProject( project, selector, reactorDirectory ) )
-                {
-                    resumed = true;
-                }
-
-                if ( resumed )
-                {
-                    result.add( project );
-                }
-            }
-
-            if ( !resumed )
-            {
-                throw new MavenExecutionException( "Could not find project to resume reactor build from: " + selector
-                        + " vs " + formatProjects( projects ), request.getPom() );
-            }
-
-            result = includeAlsoMakeTransitively( result, request, graph );
+            result = includeAlsoMakeTransitively( retainingProjects, request, graph );
-            File reactorDirectory = null;
+            File reactorDirectory = getReactorDirectory( request );
-            if ( request.getBaseDirectory() != null )
-            {
-                reactorDirectory = new File( request.getBaseDirectory() );
-            }
-
-            Collection<MavenProject> excludedProjects = new LinkedHashSet<>( projects.size() );
+            result = new ArrayList<>( projects );
-                MavenProject excludedProject = null;
-
-                for ( MavenProject project : projects )
-                {
-                    if ( isMatchingProject( project, selector, reactorDirectory ) )
-                    {
-                        excludedProject = project;
-                        break;
-                    }
-                }
-
-                if ( excludedProject != null )
-                {
-                    excludedProjects.add( excludedProject );
-                }
-                else
-                {
-                    throw new MavenExecutionException( "Could not find the selected project in the reactor: "
-                        + selector, request.getPom() );
-                }
-            }
-
-            result = new ArrayList<>( projects.size() );
-            for ( MavenProject project : projects )
-            {
-                if ( !excludedProjects.contains( project ) )
-                {
-                    result.add( project );
-                }
+                MavenProject excludedProject = projects.stream()
+                        .filter( project -> isMatchingProject( project, selector, reactorDirectory ) )
+                        .findFirst()
+                        .orElseThrow( () -> new MavenExecutionException( "Could not find the selected project in "
+                                + "the reactor: " + selector, request.getPom() ) );
+                result.remove( excludedProject );
-        List<MavenProject> result;
+        List<MavenProject> result = projects;
-        boolean makeUpstream = false;
-        boolean makeDownstream = false;
+        String makeBehavior = request.getMakeBehavior();
+        boolean makeBoth = MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( makeBehavior );
-        if ( MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( request.getMakeBehavior() ) )
+        boolean makeUpstream = makeBoth || MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals( makeBehavior );
+        boolean makeDownstream = makeBoth || MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( makeBehavior );
+
+        if ( StringUtils.isNotEmpty( makeBehavior ) && !makeUpstream && !makeDownstream )
-            makeUpstream = true;
-        }
-        else if ( MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals( request.getMakeBehavior() ) )
-        {
-            makeDownstream = true;
-        }
-        else if ( MavenExecutionRequest.REACTOR_MAKE_BOTH.equals( request.getMakeBehavior() ) )
-        {
-            makeUpstream = true;
-            makeDownstream = true;
-        }
-        else if ( StringUtils.isNotEmpty( request.getMakeBehavior() ) )
-        {
-            throw new MavenExecutionException( "Invalid reactor make behavior: " + request.getMakeBehavior(),
+            throw new MavenExecutionException( "Invalid reactor make behavior: " + makeBehavior,
+            Set<MavenProject> projectsSet = new HashSet<>( projects );
-            for ( MavenProject project : new ArrayList<>( projects ) )
+            for ( MavenProject project : projects )
-                    projects.addAll( graph.getUpstreamProjects( project, true ) );
+                    projectsSet.addAll( graph.getUpstreamProjects( project, true ) );
-                    projects.addAll( graph.getDownstreamProjects( project, true ) );
+                    projectsSet.addAll( graph.getDownstreamProjects( project, true ) );
-        }
-        result = new ArrayList<>( projects.size() );
+            result = new ArrayList<>( projectsSet );
-        for ( MavenProject project : graph.getSortedProjects() )
-        {
-            if ( projects.contains( project ) )
-            {
-                result.add( project );
-            }
+            // Order the new list in the original order
+            List<MavenProject> sortedProjects = graph.getSortedProjects();
+            result.sort( comparing( sortedProjects::indexOf ) );
+    private File getReactorDirectory( MavenExecutionRequest request )
+    {
+        if ( request.getBaseDirectory() != null )
+        {
+            return new File( request.getBaseDirectory() );
+        }
+
+        return null;
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 MOV83 MOV74 MOV42 MOV44 MOV44 MOV43 INS8 INS83 INS43 INS42 INS44 INS8 MOV60 INS25 MOV41 INS60 INS60 INS60 INS60 MOV25 UPD42 MOV42 INS43 INS42 MOV25 INS41 MOV21 MOV21 MOV38 INS8 INS74 INS59 INS43 MOV39 INS59 INS39 INS59 INS39 INS59 INS27 INS42 INS33 INS60 INS60 INS60 INS60 MOV60 MOV21 INS70 INS43 INS43 INS42 INS42 INS42 UPD42 MOV32 UPD42 MOV42 INS32 INS42 INS27 INS42 INS27 INS32 INS38 INS38 INS60 INS21 MOV60 INS21 INS41 MOV43 INS59 INS74 INS59 INS43 INS59 UPD39 INS74 INS59 MOV43 MOV44 MOV32 INS8 INS42 INS42 UPD40 MOV40 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS74 INS59 INS42 INS7 INS32 MOV14 MOV42 INS32 INS60 MOV21 INS43 INS43 INS42 INS32 UPD42 INS32 INS32 INS42 INS42 INS32 UPD42 INS32 INS43 INS43 INS42 INS32 UPD42 INS32 UPD42 MOV14 INS60 MOV21 UPD40 MOV40 MOV42 UPD42 MOV42 UPD40 MOV40 MOV42 UPD42 MOV42 INS43 INS43 INS42 INS14 INS42 INS14 UPD42 MOV32 INS42 INS42 INS32 INS42 MOV42 INS34 MOV43 INS59 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS90 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS32 INS42 INS42 INS42 INS74 INS42 MOV74 INS42 INS42 INS90 INS32 MOV42 INS32 INS42 INS42 INS32 INS42 MOV14 INS42 INS32 INS42 INS42 UPD42 MOV42 INS43 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS86 INS32 UPD42 MOV42 INS86 INS32 INS42 INS86 INS42 INS32 INS42 MOV14 INS42 INS42 INS59 MOV32 INS32 INS42 INS14 UPD42 UPD42 INS32 INS42 INS86 INS42 INS32 INS42 INS86 MOV43 MOV27 MOV32 INS42 INS42 INS59 MOV32 UPD42 MOV42 UPD42 MOV42 INS59 MOV32 UPD45 INS45 INS42 INS42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL8 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL33 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL9 DEL43 DEL42 DEL44 DEL42 DEL42 DEL38 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL38 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL32 DEL14 DEL42 DEL42 DEL42 DEL43 DEL74 DEL42 DEL32 DEL14 DEL7 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL14 DEL53 DEL8 DEL25 DEL8 DEL70 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31 DEL39 DEL9 DEL42 DEL32 DEL32 DEL9 DEL59 DEL60 DEL42 DEL32 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL32 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL32 DEL32 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL7 DEL21