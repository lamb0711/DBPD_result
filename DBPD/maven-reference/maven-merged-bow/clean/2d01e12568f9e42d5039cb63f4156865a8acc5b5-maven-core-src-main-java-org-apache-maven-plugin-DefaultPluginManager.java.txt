o reduce the signature of executeMojo in the pluginManager and propagate


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@751512 13f79535-47bb-0310-9956-ffa450edef68

-        throws ArtifactResolutionException, MojoFailureException, ArtifactNotFoundException, InvalidDependencyVersionException, PluginManagerException, PluginConfigurationException
+        throws MojoFailureException, PluginExecutionException, PluginConfigurationException
-            for ( Iterator i = projects.iterator(); i.hasNext(); )
+            //!!jvz What is this? We resolveTransitiveDependencies() and then a line later downDependencies()? That can't be right. We should also already
+            // know at this point that what we need to execute can't be found. This is the wrong time to find this out.
+            
+            try
-                MavenProject p = (MavenProject) i.next();
+                for ( Iterator i = projects.iterator(); i.hasNext(); )
+                {
+                    MavenProject p = (MavenProject) i.next();
-                resolveTransitiveDependencies( session, repositorySystem, mojoDescriptor.isDependencyResolutionRequired(), p, mojoDescriptor.isAggregator() );
+                    resolveTransitiveDependencies( session, repositorySystem, mojoDescriptor.isDependencyResolutionRequired(), p, mojoDescriptor.isAggregator() );
+                }
+
+                downloadDependencies( project, session, repositorySystem );
-
-            downloadDependencies( project, session, repositorySystem );
+            catch ( ArtifactResolutionException e )
+            {
+                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );                
+            }
+            catch ( InvalidDependencyVersionException e )
+            {
+                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );                
+            }
+            catch ( ArtifactNotFoundException e )
+            {
+                throw new PluginExecutionException( mojoExecution, project, e.getMessage() );                
+            }
-                throw new PluginManagerException( mojoDescriptor, project, "Failed to calculate concrete state for configuration of: " + mojoDescriptor.getHumanReadableKey(), e );
+                throw new PluginExecutionException( mojoExecution, project, "Failed to calculate concrete state for configuration of: " + mojoDescriptor.getHumanReadableKey() );
-                throw new PluginManagerException( mojoDescriptor, project, "Failed to calculate concrete state for configuration of: " + mojoDescriptor.getHumanReadableKey(), e );
+                throw new PluginExecutionException( mojoExecution, project, "Failed to calculate concrete state for configuration of: " + mojoDescriptor.getHumanReadableKey() );
+        catch ( PluginManagerException e )
+        {
+            session.getEventDispatcher().dispatchError( event, goalExecId, e );
+
+            throw new PluginExecutionException( mojoExecution, project, e.getMessage() );            
+        }

UPD43 UPD42 INS8 INS12 MOV60 MOV25 INS54 MOV12 INS44 INS8 MOV8 INS12 INS12 INS12 MOV43 INS42 INS21 INS53 INS44 INS8 INS44 INS8 INS44 INS8 MOV44 MOV44 INS32 INS14 MOV43 INS42 INS53 MOV43 INS42 INS53 MOV43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS14 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS43 UPD42 UPD43 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL42