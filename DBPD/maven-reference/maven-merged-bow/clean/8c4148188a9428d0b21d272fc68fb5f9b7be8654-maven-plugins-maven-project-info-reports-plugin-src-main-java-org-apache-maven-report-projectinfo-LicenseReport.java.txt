PR: MNG-903
Submitted by: Matthew Pocock
Reviewed by: Brett Porter
correctly include HTML licenses in the page

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@293240 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
- * 
- * @goal license
- * 
+ *
+ * @goal license
-     * 
+     *
-     * 
+     *
-     * 
+     *
-                        throw new MissingResourceException( "The license url [" + url + "] seems to be invalid: "
-                            + e.getMessage(), null, null );
+                        throw new MissingResourceException(
+                            "The license url [" + url + "] seems to be invalid: " + e.getMessage(), null, null );
-                        throw new MissingResourceException( "Maven can't find the file " + licenseFile
-                            + " on the system.", null, null );
+                        throw new MissingResourceException(
+                            "Maven can't find the file " + licenseFile + " on the system.", null, null );
-                        throw new MissingResourceException( "The license url [" + url + "] seems to be invalid: "
-                            + e.getMessage(), null, null );
+                        throw new MissingResourceException(
+                            "The license url [" + url + "] seems to be invalid: " + e.getMessage(), null, null );
-                verbatimText( licenseContent );
+                // TODO: we should check for a text/html mime type instead, and possibly use a html parser to do this a bit more cleanly/reliably.
+                String licenseContentLC = licenseContent.toLowerCase();
+                int bodyStart = licenseContentLC.indexOf( "<body" );
+                int bodyEnd = licenseContentLC.indexOf( "</body>" );
+                if ( ( licenseContentLC.startsWith( "<!doctype html" ) || licenseContentLC.startsWith( "<html>" ) ) &&
+                    bodyStart >= 0 && bodyEnd >= 0 )
+                {
+                    bodyStart = licenseContentLC.indexOf( ">", bodyStart ) + 1;
+                    String body = licenseContent.substring( bodyStart, bodyEnd );
+                    link( "[Original text]", licenseUrl.toExternalForm() );
+                    paragraph( "Copy of the license follows." );
+
+                    body = replaceRelativeLinks( body, baseURL( licenseUrl ).toExternalForm() );
+                    sink.rawText( body );
+                }
+                else
+                {
+                    verbatimText( licenseContent );
+                }
+
+    private static URL baseURL( URL aUrl )
+    {
+        String urlTxt = aUrl.toExternalForm();
+        int lastSlash = urlTxt.lastIndexOf( '/' );
+        if ( lastSlash > -1 )
+        {
+            try
+            {
+                return new URL( urlTxt.substring( 0, lastSlash + 1 ) );
+            }
+            catch ( MalformedURLException e )
+            {
+                throw new AssertionError( e );
+            }
+        }
+        else
+        {
+            return aUrl;
+        }
+    }
+
+    private static String replaceRelativeLinks( String html, String baseURL )
+    {
+        if ( !baseURL.endsWith( "/" ) )
+        {
+            baseURL += "/";
+        }
+
+        String serverURL = baseURL.substring( 0, baseURL.indexOf( '/', baseURL.indexOf( "//" ) + 2 ) );
+
+        html = replaceParts( html, baseURL, serverURL, "[aA]", "[hH][rR][eE][fF]" );
+        html = replaceParts( html, baseURL, serverURL, "[iI][mM][gG]", "[sS][rR][cC]" );
+        return html;
+    }
+
+    private static String replaceParts( String html, String baseURL, String serverURL, String tagPattern,
+                                        String attributePattern )
+    {
+        Pattern anchor = Pattern
+            .compile( "(<\\s*" + tagPattern + "\\s+[^>]*" + attributePattern + "\\s*=\\s*\")([^\"]*)\"([^>]*>)" );
+        StringBuilder sb = new StringBuilder( html );
+
+        int indx = 0;
+        do
+        {
+            Matcher mAnchor = anchor.matcher( sb );
+            mAnchor.region( indx, sb.length() );
+            if ( !mAnchor.find() )
+            {
+                System.err.println( "No more matches" );
+                break; // no more matches
+            }
+
+            indx = mAnchor.end( 3 );
+
+            if ( mAnchor.group( 2 ).startsWith( "#" ) )
+            {
+                // relative link - don't want to alter this one!
+            }
+            if ( mAnchor.group( 2 ).startsWith( "/" ) )
+            {
+                // root link
+                sb.insert( mAnchor.start( 2 ), serverURL );
+                indx += serverURL.length();
+            }
+            else if ( mAnchor.group( 2 ).indexOf( ':' ) < 0 )
+            {
+                // relative link
+                sb.insert( mAnchor.start( 2 ), baseURL );
+                indx += baseURL.length();
+            }
+        }
+        while ( true );
+
+        return sb.toString();
+    }

INS26 INS26 INS40 INS40 MOV65 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS42 INS43 INS42 INS60 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS19 INS41 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS38 INS8 INS43 INS59 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS9 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS38 INS54 INS41 INS32 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS34 INS60 INS21 INS25 INS21 INS25 INS25 INS42 INS42 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS13 INS34 INS8 INS12 INS42 INS42 INS42 INS45 INS7 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS27 INS43 INS42 INS43 INS59 INS32 INS38 INS8 INS7 INS32 INS8 INS32 INS8 INS25 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS41 INS44 INS8 INS42 INS45 INS42 INS42 INS13 INS27 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS21 INS10 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS21 INS21 INS27 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS27 INS21 INS60 INS21 INS21 INS21 INS21 MOV21 INS14 INS43 INS42 INS53 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS32 INS7 INS32 INS34 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS36 INS27 INS42 INS34 INS7 INS43 INS59 INS32 INS32 INS7 INS32 INS43 INS32 INS42 INS14 INS42 INS42 INS45 INS40 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS13 INS32 INS7 INS27 INS42 INS34 INS42 INS27 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS27 INS43 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42