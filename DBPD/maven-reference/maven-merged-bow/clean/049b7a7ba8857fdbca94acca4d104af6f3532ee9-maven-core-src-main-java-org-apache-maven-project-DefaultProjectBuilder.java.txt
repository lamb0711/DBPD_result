refactoring: reduced try/catch scope
+        ModelBuildingResult result;
-            ModelBuildingResult result = modelBuilder.build( request );
-
-            Model model = result.getEffectiveModel();
-
-            projectIndex.put( result.getModelIds().get( 0 ), project );
-
-            InterimResult interimResult = new InterimResult( pomFile, request, result, listener, isRoot );
-            interimResults.add( interimResult );
-
-            if ( recursive && !model.getModules().isEmpty() )
-            {
-                File basedir = pomFile.getParentFile();
-
-                List<File> moduleFiles = new ArrayList<>();
-
-                for ( String module : model.getModules() )
-                {
-                    if ( StringUtils.isEmpty( module ) )
-                    {
-                        continue;
-                    }
-
-                    module = module.replace( '\\', File.separatorChar ).replace( '/', File.separatorChar );
-
-                    File moduleFile = new File( basedir, module );
-
-                    if ( moduleFile.isDirectory() )
-                    {
-                        moduleFile = modelProcessor.locatePom( moduleFile );
-                    }
-
-                    if ( !moduleFile.isFile() )
-                    {
-                        ModelProblem problem =
-                            new DefaultModelProblem( "Child module " + moduleFile + " of " + pomFile
-                                + " does not exist", ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1,
-                                                     -1, null );
-                        result.getProblems().add( problem );
-
-                        noErrors = false;
-
-                        continue;
-                    }
-
-                    if ( Os.isFamily( Os.FAMILY_WINDOWS ) )
-                    {
-                        // we don't canonicalize on unix to avoid interfering with symlinks
-                        try
-                        {
-                            moduleFile = moduleFile.getCanonicalFile();
-                        }
-                        catch ( IOException e )
-                        {
-                            moduleFile = moduleFile.getAbsoluteFile();
-                        }
-                    }
-                    else
-                    {
-                        moduleFile = new File( moduleFile.toURI().normalize() );
-                    }
-
-                    if ( aggregatorFiles.contains( moduleFile ) )
-                    {
-                        StringBuilder buffer = new StringBuilder( 256 );
-                        for ( File aggregatorFile : aggregatorFiles )
-                        {
-                            buffer.append( aggregatorFile ).append( " -> " );
-                        }
-                        buffer.append( moduleFile );
-
-                        ModelProblem problem =
-                            new DefaultModelProblem( "Child module " + moduleFile + " of " + pomFile
-                                + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR,
-                                                     ModelProblem.Version.BASE, model, -1, -1, null );
-                        result.getProblems().add( problem );
-
-                        noErrors = false;
-
-                        continue;
-                    }
-
-                    moduleFiles.add( moduleFile );
-                }
-
-                interimResult.modules = new ArrayList<>();
-
-                if ( !build( results, interimResult.modules, projectIndex, moduleFiles, aggregatorFiles, false,
-                             recursive, config ) )
-                {
-                    noErrors = false;
-                }
-            }
+            result = modelBuilder.build( request );
-            noErrors = false;
+            return false;
+        }
+
+        Model model = result.getEffectiveModel();
+
+        projectIndex.put( result.getModelIds().get( 0 ), project );
+
+        InterimResult interimResult = new InterimResult( pomFile, request, result, listener, isRoot );
+        interimResults.add( interimResult );
+
+        if ( recursive && !model.getModules().isEmpty() )
+        {
+            File basedir = pomFile.getParentFile();
+
+            List<File> moduleFiles = new ArrayList<>();
+
+            for ( String module : model.getModules() )
+            {
+                if ( StringUtils.isEmpty( module ) )
+                {
+                    continue;
+                }
+
+                module = module.replace( '\\', File.separatorChar ).replace( '/', File.separatorChar );
+
+                File moduleFile = new File( basedir, module );
+
+                if ( moduleFile.isDirectory() )
+                {
+                    moduleFile = modelProcessor.locatePom( moduleFile );
+                }
+
+                if ( !moduleFile.isFile() )
+                {
+                    ModelProblem problem =
+                        new DefaultModelProblem( "Child module " + moduleFile + " of " + pomFile
+                            + " does not exist", ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1,
+                                                 -1, null );
+                    result.getProblems().add( problem );
+
+                    noErrors = false;
+
+                    continue;
+                }
+
+                if ( Os.isFamily( Os.FAMILY_WINDOWS ) )
+                {
+                    // we don't canonicalize on unix to avoid interfering with symlinks
+                    try
+                    {
+                        moduleFile = moduleFile.getCanonicalFile();
+                    }
+                    catch ( IOException e )
+                    {
+                        moduleFile = moduleFile.getAbsoluteFile();
+                    }
+                }
+                else
+                {
+                    moduleFile = new File( moduleFile.toURI().normalize() );
+                }
+
+                if ( aggregatorFiles.contains( moduleFile ) )
+                {
+                    StringBuilder buffer = new StringBuilder( 256 );
+                    for ( File aggregatorFile : aggregatorFiles )
+                    {
+                        buffer.append( aggregatorFile ).append( " -> " );
+                    }
+                    buffer.append( moduleFile );
+
+                    ModelProblem problem =
+                        new DefaultModelProblem( "Child module " + moduleFile + " of " + pomFile
+                            + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR,
+                                                 ModelProblem.Version.BASE, model, -1, -1, null );
+                    result.getProblems().add( problem );
+
+                    noErrors = false;
+
+                    continue;
+                }
+
+                moduleFiles.add( moduleFile );
+            }
+
+            interimResult.modules = new ArrayList<>();
+
+            if ( !build( results, interimResult.modules, projectIndex, moduleFiles, aggregatorFiles, false,
+                         recursive, config ) )
+            {
+                noErrors = false;
+            }

MOV8 MOV60 MOV60 MOV60 MOV21 MOV21 MOV21 MOV60 MOV21 INS54 MOV41 INS8 INS12 INS21 MOV44 INS8 INS7 MOV21 INS41 INS42 MOV32 INS9 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8