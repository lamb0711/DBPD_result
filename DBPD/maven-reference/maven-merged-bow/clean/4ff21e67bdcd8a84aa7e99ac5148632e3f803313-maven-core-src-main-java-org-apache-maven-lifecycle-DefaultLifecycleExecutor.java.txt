o Filtered non-applicable parameters when converting from plugin execution to mojo execution

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@771298 13f79535-47bb-0310-9956-ffa450edef68

-                        if( mojoDescriptor.getGoal().equals( goal ) )
+                        if ( mojoDescriptor.getGoal().equals( goal ) )
-                            mojoExecution.setConfiguration( (Xpp3Dom) e.getConfiguration() );
+                            Xpp3Dom executionConfiguration = (Xpp3Dom) e.getConfiguration();
+
+                            Xpp3Dom mojoConfiguration =
+                                extractMojoConfiguration( executionConfiguration, mojoDescriptor );
+
+                            mojoExecution.setConfiguration( mojoConfiguration );
-           
+
+    /**
+     * Extracts the configuration for a single mojo from the specified execution configuration by discarding any
+     * non-applicable parameters. This is necessary because a plugin execution can have multiple goals with different
+     * parametes whose default configurations are all aggregated into the execution configuration. However, the
+     * underlying configurator will error out when trying to configure a mojo parameter that is specified in the
+     * configuration but not present in the mojo instance.
+     * 
+     * @param executionConfiguration The configuration from the plugin execution, must not be {@code null}.
+     * @param mojoDescriptor The descriptor for the mojo being configured, must not be {@code null}.
+     * @return The configuration for the mojo, never {@code null}.
+     */
+    private Xpp3Dom extractMojoConfiguration( Xpp3Dom executionConfiguration, MojoDescriptor mojoDescriptor )
+    {
+        Xpp3Dom mojoConfiguration = new Xpp3Dom( executionConfiguration );
+
+        Collection<String> mojoParameters = mojoDescriptor.getParameterMap().keySet();
+
+        for ( int i = mojoConfiguration.getChildCount() - 1; i >= 0; i-- )
+        {
+            String mojoParameter = mojoConfiguration.getChild( i ).getName();
+            if ( !mojoParameters.contains( mojoParameter ) )
+            {
+                mojoConfiguration.removeChild( i );
+            }
+        }
+
+        return mojoConfiguration;
+    }
+
-                return (List<String>) lifecycle.getPhases();
+                return lifecycle.getPhases();

INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS24 INS41 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS42 INS43 INS59 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS66 INS66 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS43 INS59 INS43 INS59 INS42 INS42 MOV11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL11