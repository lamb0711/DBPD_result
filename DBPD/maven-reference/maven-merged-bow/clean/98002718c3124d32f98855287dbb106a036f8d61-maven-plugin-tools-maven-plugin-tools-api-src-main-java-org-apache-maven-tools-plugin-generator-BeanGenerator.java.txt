o Refactored mojo/plugin generation, extraction, etc. to accommodate multiple mojo languages.
o Tested with java mojos, mboot to verify nothing broken by refactor.
o TODO: Add marmalade support tests...currently only java-mojos are supported in mboot2, so this isn't going to interrupt things.
o TODO: Once marmalade support is tested, add to the list of artifacts built by mboot2.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163369 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.maven.plugin.generator;
+package org.apache.maven.tools.plugin.generator;
+import org.apache.maven.plugin.MavenMojoDescriptor;
+import org.apache.maven.project.MavenProject;
-import org.codehaus.plexus.util.xml.Xpp3Dom;
+import java.util.Iterator;
+import java.util.Set;
- * @todo use the descriptions in the descriptor for the javadoc pushed into
- * the source code.
+ * @todo use the descriptions in the descriptor for the javadoc pushed into the
+ *       source code.
-    extends AbstractGenerator
+    implements Generator
-    protected void processPluginDescriptors( MojoDescriptor[] pluginDescriptors, String destinationDirectory, Xpp3Dom pomDom )
-        throws Exception
+    public void execute( String destinationDirectory, Set mavenMojoDescriptors, MavenProject project ) throws Exception
-        for ( int i = 0; i < pluginDescriptors.length; i++ )
+        for ( Iterator it = mavenMojoDescriptors.iterator(); it.hasNext(); )
-            processPluginDescriptor( pluginDescriptors[i], destinationDirectory );
+            MavenMojoDescriptor descriptor = (MavenMojoDescriptor) it.next();
+            processPluginDescriptor( descriptor, destinationDirectory );
-    protected void processPluginDescriptor( MojoDescriptor pluginDescriptor, String destinationDirectory )
+    protected void processPluginDescriptor( MavenMojoDescriptor descriptor, String destinationDirectory )
-        String implementation = pluginDescriptor.getImplementation();
+        String implementation = descriptor.getImplementation();
-        List parameters = pluginDescriptor.getParameters();
+        MojoDescriptor mojoDescriptor = descriptor.getMojoDescriptor();
+        List parameters = mojoDescriptor.getParameters();
-        setter.getSourceCode().add( "addParameter( " + "\"" + parameter.getName() + "\", " + parameter.getName() + " );" );
+        setter.getSourceCode().add(
+            "addParameter( " + "\"" + parameter.getName() + "\", " + parameter.getName() + " );" );
-        return new StringBuffer( str.length() )
-            .append( Character.toTitleCase( str.charAt( 0 ) ) )
-            .append( str.substring( 1 ) )
-            .toString();
+        return new StringBuffer( str.length() ).append( Character.toTitleCase( str.charAt( 0 ) ) ).append(
+            str.substring( 1 ) ).toString();
-        while ( ( end = text.indexOf( repl, start ) ) != -1 )
+        while ( (end = text.indexOf( repl, start )) != -1 )

MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD40 UPD43 MOV44 UPD42 UPD83 UPD42 UPD66 UPD66 INS43 UPD42 UPD43 UPD42 INS43 UPD42 INS60 UPD42 MOV42 UPD42 INS32 INS42 MOV43 INS59 INS43 INS42 INS42 INS60 INS42 INS32 INS42 UPD42 INS32 INS43 INS59 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS32 INS42 INS42 INS42 DEL43 DEL85 DEL5 DEL39 DEL34 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2