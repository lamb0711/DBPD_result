utilise the container for populating all mojo configuration, including expressions


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163947 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+        Map configuration = new HashMap( parameters.size() );
+            String value = null;
-                element( w, "expression", parameter.getExpression() );
+                value = parameter.getExpression();
-            element( w, "default", parameter.getDefaultValue() );
+            if ( value == null || value.length() == 0 )
+            {
+                value = parameter.getDefaultValue();
+            }
+
+            if ( value != null && value.length() > 0 )
+            {
+                configuration.put( parameter, value );
+            }
+        // Coinfiguration
+        // ----------------------------------------------------------------------
+
+        if ( !configuration.isEmpty() )
+        {
+            w.startElement( "configuration" );
+
+            for ( Iterator i = configuration.keySet().iterator(); i.hasNext(); )
+            {
+                Parameter parameter = (Parameter) i.next();
+
+                w.startElement( parameter.getName() );
+
+                String type = convertType( parameter.getType() );
+                if ( type != null )
+                {
+                    w.addAttribute( "implementation", type );
+                }
+
+                w.writeText( (String) configuration.get( parameter ) );
+
+                w.endElement();
+            }
+
+            w.endElement();
+        }
+
+        // ----------------------------------------------------------------------
+    /**
+     * @param type
+     * @return
+     * @deprecated - should force proper class specification
+     */
+    private static String convertType( String type )
+    {
+        if ( "String".equals( type ) )
+        {
+            return "java.lang.String";
+        }
+        else if ( "File".equals( type ) )
+        {
+            return "java.io.File";
+        }
+        else if ( "List".equals( type ) )
+        {
+            return "java.util.List";
+        }
+        else if ( "".equals( type ) )
+        {
+            return null;
+        }
+        else
+        {
+            return type;
+        }
+    }
+

INS26 INS26 INS40 INS40 INS31 MOV21 MOV25 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS60 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS43 INS59 INS38 INS8 INS42 INS66 INS42 INS32 INS8 INS25 INS42 INS42 INS14 INS60 INS25 INS25 INS32 INS21 INS24 INS21 INS45 INS42 INS42 INS41 INS32 INS8 INS25 INS43 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS32 INS58 INS32 INS8 INS32 INS45 INS45 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS33 INS27 INS27 MOV21 INS27 INS27 INS21 INS42 INS42 INS45 INS43 INS59 INS42 INS42 INS60 INS21 INS60 INS25 INS21 INS21 INS42 INS42 INS45 INS45 INS42 INS42 INS41 INS32 INS8 INS8 INS7 INS42 INS33 INS32 INS34 INS7 INS42 INS33 INS32 INS34 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS32 INS32 INS45 INS45 INS42 INS42 INS41 INS41 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS11 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32