Merge branch 'eclipse-aether' of github.com:tesla/tesla-build into eclipse-aether

Conflicts:
	.gitignore
	pom.xml

-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.repository.AuthenticationSelector;
-import org.sonatype.aether.repository.ProxySelector;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.repository.AuthenticationContext;
+import org.eclipse.aether.repository.AuthenticationSelector;
+import org.eclipse.aether.repository.ProxySelector;
+import org.eclipse.aether.repository.RemoteRepository;
-            org.sonatype.aether.repository.MirrorSelector selector = session.getMirrorSelector();
+            org.eclipse.aether.repository.MirrorSelector selector = session.getMirrorSelector();
-                org.sonatype.aether.repository.Authentication auth =
-                    selector.getAuthentication( RepositoryUtils.toRepo( repository ) );
+                RemoteRepository repo = RepositoryUtils.toRepo( repository );
+                org.eclipse.aether.repository.Authentication auth = selector.getAuthentication( repo );
-                    Authentication result = new Authentication( auth.getUsername(), auth.getPassword() );
-                    result.setPrivateKey( auth.getPrivateKeyFile() );
-                    result.setPassphrase( auth.getPassphrase() );
+                    repo = new RemoteRepository.Builder( repo ).setAuthentication( auth ).build();
+                    AuthenticationContext authCtx = AuthenticationContext.forRepository( session, repo );
+                    Authentication result =
+                        new Authentication( authCtx.get( AuthenticationContext.USERNAME ),
+                                            authCtx.get( AuthenticationContext.PASSWORD ) );
+                    result.setPrivateKey( authCtx.get( AuthenticationContext.PRIVATE_KEY_PATH ) );
+                    result.setPassphrase( authCtx.get( AuthenticationContext.PRIVATE_KEY_PASSPHRASE ) );
+                    authCtx.close();
-                org.sonatype.aether.repository.Proxy proxy = selector.getProxy( RepositoryUtils.toRepo( repository ) );
+                RemoteRepository repo = RepositoryUtils.toRepo( repository );
+                org.eclipse.aether.repository.Proxy proxy = selector.getProxy( repo );
-                        p.setUserName( proxy.getAuthentication().getUsername() );
-                        p.setPassword( proxy.getAuthentication().getPassword() );
+                        repo = new RemoteRepository.Builder( repo ).setProxy( proxy ).build();
+                        AuthenticationContext authCtx = AuthenticationContext.forProxy( session, repo );
+                        p.setUserName( authCtx.get( AuthenticationContext.USERNAME ) );
+                        p.setPassword( authCtx.get( AuthenticationContext.PASSWORD ) );
+                        p.setNtlmDomain( authCtx.get( AuthenticationContext.NTLM_DOMAIN ) );
+                        p.setNtlmHost( authCtx.get( AuthenticationContext.NTLM_WORKSTATION ) );
+                        authCtx.close();

INS26 UPD40 INS40 UPD40 UPD40 UPD40 UPD43 UPD40 INS60 INS60 UPD43 INS43 INS59 UPD43 INS43 INS59 INS42 UPD42 MOV32 INS40 INS42 INS32 INS21 INS60 INS21 INS42 UPD42 MOV32 INS40 INS42 INS32 INS42 INS42 INS42 INS7 INS43 INS59 MOV43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS60 INS21 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 UPD42 UPD42 INS40 UPD42 UPD42 INS40 INS7 INS43 INS59 INS32 INS32 INS32 INS14 INS42 INS42 UPD42 UPD42 INS40 UPD42 UPD42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS40 UPD42 MOV42 UPD42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS40 INS14 INS42 INS42 INS43 INS42 INS40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32