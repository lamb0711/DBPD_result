o Added user.xml as the central point of config for local repository, both in MBoot2 and maven proper.
o Added proxy-profile support to user.xml


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163510 13f79535-47bb-0310-9956-ffa450edef68

-import compile.CompilerConfiguration;
-import compile.JavacCompiler;
-import download.ArtifactDownloader;
-import jar.JarMojo;
+
+import compile.CompilerConfiguration;
+import compile.JavacCompiler;
+
+import download.ArtifactDownloader;
+import jar.JarMojo;
+
+
+import java.util.Collections;
-import java.util.Properties;
+import java.util.Map;
+import java.util.TreeMap;
+    
+    private static final Map MODELLO_TARGET_VERSIONS;
+    
+    private static final Map MODELLO_MODEL_FILES;
+    
+    static
+    {
+        Map targetVersions = new TreeMap();
+        targetVersions.put( "maven-model", "4.0.0" );
+        targetVersions.put( "maven-user-model", "1.0.0" );
+        
+        MODELLO_TARGET_VERSIONS = Collections.unmodifiableMap( targetVersions );
+        
+        Map modelFiles = new TreeMap();
+        modelFiles.put( "maven-model", "maven.mdo" );
+        modelFiles.put( "maven-user-model", "maven-user.mdo" );
+        
+        MODELLO_MODEL_FILES = Collections.unmodifiableMap( modelFiles );
+    }
-
+    
-            
-            if(target instanceof RuntimeException)
+
+            if ( target instanceof RuntimeException )
-                throw (RuntimeException)target;
+                throw (RuntimeException) target;
-            else if(target instanceof Exception)
+            else if ( target instanceof Exception )
-                throw (Exception)target;
+                throw (Exception) target;
-                throw new RuntimeException(target);
+                throw new RuntimeException( target );
-            Properties p = new Properties();
+            UserModelReader userModelReader = new UserModelReader();
-                p.load( new FileInputStream( new File( userHome, ".m2/maven.properties" ) ) );
+                userModelReader.parse( new File( userHome, ".m2/user.xml" ) );
+                
+                MavenProfile activeProfile = userModelReader.getActiveMavenProfile();
-                mavenRepoLocal = new File( p.getProperty( "maven.repo.local" ) ).getAbsolutePath();
+                mavenRepoLocal = new File( activeProfile.getLocalRepo() ).getAbsolutePath();
+                e.printStackTrace();
-            System.out.println( "You must have a ~/.m2/maven.properties file and must contain the following entries:" );
+            System.out.println( "You must have a ~/.m2/user.xml file and must contain at least the following information:\n" );
-            System.out.println( "maven.repo.local = /path/to/your/repository" );
+            System.out.println( "<userModel>\n  " +
+                    "<mavenProfiles>\n    " +
+                    "<mavenProfile>\n      " +
+                    "<id>someId</id>\n      " +
+                    "<localRepository>/path/to/your/repository</localRepository>\n    " +
+                    "</mavenProfile>\n  " +
+                    "</mavenProfiles>\n  " +
+                    "<defaultProfiles>\n    " +
+                    "<mavenProfileId>someId</mavenProfileId>\n  " +
+                    "</defaultProfiles>\n" +
+                    "</userModel>\n" );
+            
+            System.out.println("where \'someId\' is just an id for matching within the file.");
-            buildProject( directory );
+            buildProject( directory, builds[i] );
-            buildProject( directory );
+            buildProject( directory, pluginBuilds[i] );
-    public void buildProject( String basedir ) throws Exception
+    public void buildProject( String basedir, String projectId ) throws Exception
-        File base = new File(basedir);
+        File base = new File( basedir );
-        String[] basedirFiles = base.list();
+        String modelFileName = (String)MODELLO_MODEL_FILES.get( projectId );
-        for ( int i = 0; i < basedirFiles.length; i++ )
+        if(modelFileName != null && modelFileName.trim().length() > 0)
-            if(basedirFiles[i].endsWith(".mdo"))
-            {
-                model = new File(base, basedirFiles[i]);
-                break;
-            }
+            model = new File(base, modelFileName);
-
+        
+            String modelVersion = (String)MODELLO_TARGET_VERSIONS.get( projectId );
+            if(modelVersion == null || modelVersion.trim().length() < 1)
+            {
+                System.out.println("No model version configured. Using \'1.0.0\'...");
+                modelVersion = "1.0.0";
+            }
+            
-
-            generateSources( model.getAbsolutePath(), "java", generatedSources, "4.0.0", "false" );
+            
+            System.out.println("Generating model bindings for version \'" + modelVersion + "\' in project: " + projectId);
+            
+            generateSources( model.getAbsolutePath(), "java", generatedSources, modelVersion, "false" );
-            generateSources( model.getAbsolutePath(), "xpp3-reader", generatedSources, "4.0.0", "false" );
+            generateSources( model.getAbsolutePath(), "xpp3-reader", generatedSources, modelVersion, "false" );
-            generateSources( model.getAbsolutePath(), "xpp3-writer", generatedSources, "4.0.0", "false" );
+            generateSources( model.getAbsolutePath(), "xpp3-writer", generatedSources, modelVersion, "false" );
-            generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, "4.0.0", "false" );
+            generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, modelVersion, "false" );
-            generatePluginDescriptor( sources,
-                                      new File( classes, "META-INF/maven" ).getAbsolutePath(),
+            generatePluginDescriptor( sources, new File( classes, "META-INF/maven" ).getAbsolutePath(),
-                    + (!online ? "; run again online" : "; there was a problem downloading it earlier") );
+                    + ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
-                    + (!online ? "; run again online" : "; there was a problem downloading it earlier") );
+                    + ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
-                    + (!online ? "; run again online" : "; there was a problem downloading it earlier") );
+                    + ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
-        boolean success = testRunner.execute( repoLocal,
-                                              basedir,
-                                              classes,
-                                              testClasses,
-                                              includes,
-                                              excludes,
+        boolean success = testRunner.execute( repoLocal, basedir, classes, testClasses, includes, excludes,
-        String generatedSources ) throws Exception
+                         String generatedSources ) throws Exception
+    
+    abstract class AbstractReader extends DefaultHandler
+    {
+        private File file;
+        private SAXParserFactory saxFactory;
+
+        public abstract void reset();
+        
+        public boolean parse( File file )
+        {
+            this.file = file;
+
+            try
+            {
+                saxFactory = SAXParserFactory.newInstance();
+
+                SAXParser parser = saxFactory.newSAXParser();
+
+                InputSource is = new InputSource( new FileInputStream( file ) );
+
+                parser.parse( is, this );
+
+                return true;
+            }
+            catch ( Exception e )
+            {
+                e.printStackTrace();
+
+                return false;
+            }
+        }
+
+        public void warning( SAXParseException spe )
+        {
+            printParseError( "Warning", spe );
+        }
+
+        public void error( SAXParseException spe )
+        {
+            printParseError( "Error", spe );
+        }
+
+        public void fatalError( SAXParseException spe )
+        {
+            printParseError( "Fatal Error", spe );
+        }
+
+        private final void printParseError( String type, SAXParseException spe )
+        {
+            System.err.println( type + " [line " + spe.getLineNumber() + ", row " + spe.getColumnNumber() + "]: "
+                + spe.getMessage() );
+        }
+    }
-        extends DefaultHandler
+        extends AbstractReader
-        private SAXParserFactory saxFactory;
-
-        private File file;
-
-        public boolean parse( File file )
-        {
-            this.file = file;
-
-            try
-            {
-                saxFactory = SAXParserFactory.newInstance();
-
-                SAXParser parser = saxFactory.newSAXParser();
-
-                InputSource is = new InputSource( new FileInputStream( file ) );
-
-                parser.parse( is, this );
-
-                return true;
-            }
-            catch ( Exception e )
-            {
-                e.printStackTrace();
-
-                return false;
-            }
-        }
-
-            depth ++;
+            depth++;
-            depth --;
+            depth--;
+        }
+    }
+
+    class UserModelReader
+        extends AbstractReader
+    {
+
+        private Map mavenProfiles = new TreeMap();
+
+        private MavenProfile currentProfile = null;
+
+        private StringBuffer currentBody = new StringBuffer();
+
+        private String activeProfileId = null;
+
+        private MavenProfile activeMavenProfile = null;
+
+        public MavenProfile getActiveMavenProfile()
+        {
+            return activeMavenProfile;
-        public void warning( SAXParseException spe )
+        public void characters( char[] ch, int start, int length ) throws SAXException
-            printParseError( "Warning", spe );
+            currentBody.append( ch, start, length );
-        public void error( SAXParseException spe )
+        public void endElement( String uri, String localName, String rawName ) throws SAXException
-            printParseError( "Error", spe );
+            if ( "mavenProfile".equals( rawName ) )
+            {
+                if ( notEmpty( currentProfile.getId() ) && notEmpty( currentProfile.getLocalRepo() ) )
+                {
+                    mavenProfiles.put( currentProfile.getId(), currentProfile );
+                    currentProfile = null;
+                }
+                else
+                {
+                    throw new SAXException( "Invalid mavenProfile entry. Missing one or more "
+                        + "fields: {id,localRepository}." );
+                }
+            }
+            else if ( currentProfile != null )
+            {
+                if ( "id".equals( rawName ) )
+                {
+                    currentProfile.setId( currentBody.toString().trim() );
+                }
+                else if ( "localRepository".equals( rawName ) )
+                {
+                    currentProfile.setLocalRepo( currentBody.toString().trim() );
+                }
+                else
+                {
+                    throw new SAXException( "Illegal element inside mavenProfile: \'" + rawName + "\'" );
+                }
+            }
+            else if ( "userModel".equals( rawName ) )
+            {
+                this.activeMavenProfile = (MavenProfile) mavenProfiles.get( activeProfileId );
+            }
+            else if ( "mavenProfileId".equals( rawName ) )
+            {
+                this.activeProfileId = currentBody.toString().trim();
+            }
+            
+            currentBody = new StringBuffer();
-        public void fatalError( SAXParseException spe )
+        private boolean notEmpty( String test )
-            printParseError( "Fatal Error", spe );
+            return test != null && test.trim().length() > 0;
-        private final void printParseError( String type, SAXParseException spe )
+        public void startElement( String uri, String localName, String rawName, Attributes attributes )
+            throws SAXException
-            System.err.println( type + " [line " + spe.getLineNumber() + ", row " + spe.getColumnNumber() + "]: "
-                + spe.getMessage() );
+            if ( "mavenProfile".equals( rawName ) )
+            {
+                currentProfile = new MavenProfile();
+            }
+
+        public void reset()
+        {
+            this.currentBody = null;
+            this.activeMavenProfile = null;
+            this.activeProfileId = null;
+            this.currentProfile = null;
+            this.mavenProfiles.clear();
+        }
+    }
+
+    public static class MavenProfile
+    {
+
+        private String localRepo;
+
+        private String id;
+
+        public void setLocalRepo( String localRepo )
+        {
+            this.localRepo = localRepo;
+        }
+
+        public String getLocalRepo()
+        {
+            return localRepo;
+        }
+
+        public void setId( String id )
+        {
+            this.id = id;
+        }
+
+        public String getId()
+        {
+            return id;
+        }
+
-}
+}

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 UPD40 INS40 INS23 INS23 INS28 INS55 INS55 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS8 INS44 INS83 INS42 MOV43 MOV23 MOV23 INS31 MOV31 MOV31 MOV31 MOV31 MOV31 INS43 INS42 INS43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 MOV43 INS42 INS25 INS83 INS83 INS39 INS42 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS43 INS59 INS32 INS32 INS7 INS43 INS59 INS32 INS32 INS7 INS43 INS27 MOV8 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS41 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS43 INS42 INS21 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS32 INS21 INS42 UPD42 INS11 INS27 INS27 INS60 INS25 INS21 INS43 INS43 INS42 INS39 INS85 INS32 INS42 INS42 INS42 INS32 INS8 INS25 INS7 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS8 INS7 INS7 INS7 INS7 INS32 INS42 INS7 INS42 INS42 INS7 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 UPD43 INS32 INS43 INS32 UPD42 MOV42 INS33 INS32 INS34 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS25 INS27 INS8 INS25 INS42 INS14 INS27 INS27 INS45 INS42 INS42 INS21 INS22 INS33 INS22 INS33 INS22 INS33 INS22 INS33 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 UPD42 UPD42 INS60 UPD45 INS27 INS40 INS42 INS45 INS2 INS2 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS11 INS27 INS27 INS21 INS21 INS40 INS42 INS27 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS27 INS8 INS8 INS42 INS33 INS25 INS32 INS8 INS25 INS43 INS42 INS33 INS32 INS34 INS7 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD43 INS43 INS59 INS21 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS33 INS32 INS34 INS32 INS7 INS45 INS42 INS45 INS42 INS32 INS32 INS21 INS21 INS53 INS32 INS8 INS25 INS45 INS42 INS42 INS21 INS32 INS8 INS42 INS32 INS42 INS42 INS14 UPD42 UPD42 UPD42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS32 INS32 INS7 INS14 INS45 INS42 INS42 INS21 INS32 INS8 INS8 INS7 INS45 INS42 INS42 INS21 INS42 INS42 INS43 MOV43 MOV42 UPD45 MOV45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS27 INS32 INS45 INS42 INS42 INS21 INS53 INS22 INS11 INS7 INS42 MOV43 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS14 INS52 INS42 INS43 INS32 INS22 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL14 DEL14 DEL45 DEL45 DEL85 DEL5 DEL32 DEL42 DEL42 DEL2 DEL10 DEL39 DEL42 DEL34 DEL59 DEL58 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL45 DEL32 DEL25 DEL8 DEL24 DEL45 DEL45 DEL45 DEL45