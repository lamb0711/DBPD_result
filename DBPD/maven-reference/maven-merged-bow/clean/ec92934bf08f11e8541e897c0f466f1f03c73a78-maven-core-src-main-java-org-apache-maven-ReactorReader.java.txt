[MNG-4660] --resume-from flag resolves inter-module dependencies

Co-authored-by: Martin Kanters <Martin.Kanters@infosupport.com>
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Iterator;
+import java.util.stream.Stream;
+import org.codehaus.plexus.logging.Logger;
+    private Logger logger;
+
+    private MavenSession session;
+
-    ReactorReader( MavenSession session )
+    ReactorReader( MavenSession session, Logger logger )
-        projectsByGAV = session.getProjectMap();
+        this.logger = logger;
+        this.session = session;
+        this.projectsByGAV = new HashMap<>( session.getAllProjects().size() * 2 );
+        session.getAllProjects().forEach( project ->
+        {
+            String projectId = ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() );
+            this.projectsByGAV.put( projectId, project );
+        } );
+        File packagedArtifactFile = determinePreviouslyPackagedArtifactFile( project, projectArtifact );
-        else if ( !hasBeenPackaged( project ) )
+        // Check whether an earlier Maven run might have produced an artifact that is still on disk.
+        else if ( packagedArtifactFile != null && packagedArtifactFile.exists()
+                && isPackagedArtifactUpToDate( project, packagedArtifactFile ) )
+        {
+            return packagedArtifactFile;
+        }
+        else if ( !hasBeenPackagedDuringThisSession( project ) )
-                if ( project.hasLifecyclePhase( "compile" ) && COMPILE_PHASE_TYPES.contains( type ) )
+                File outputDirectory = new File( project.getBuild().getOutputDirectory() );
+
+                // Check if the project is being built during this session, and if we can expect any output.
+                // There is no need to check if the build has created any outputs, see MNG-2222.
+                boolean projectCompiledDuringThisSession
+                        = project.hasLifecyclePhase( "compile" ) && COMPILE_PHASE_TYPES.contains( type );
+
+                // Check if the project is part of the session (not filtered by -pl, -rf, etc). If so, we check
+                // if a possible earlier Maven invocation produced some output for that project which we can use.
+                boolean projectHasOutputFromPreviousSession
+                        = !session.getProjects().contains( project ) && outputDirectory.exists();
+
+                if ( projectHasOutputFromPreviousSession || projectCompiledDuringThisSession )
-                    return new File( project.getBuild().getOutputDirectory() );
+                    return outputDirectory;
+    private File determinePreviouslyPackagedArtifactFile( MavenProject project, Artifact artifact )
+    {
+        if ( artifact == null )
+        {
+            return null;
+        }
+
+        String fileName = String.format( "%s.%s", project.getBuild().getFinalName(), artifact.getExtension() );
+        return new File( project.getBuild().getDirectory(), fileName );
+    }
+
-    private boolean hasBeenPackaged( MavenProject project )
+    private boolean isPackagedArtifactUpToDate( MavenProject project, File packagedArtifactFile )
+    {
+        Path outputDirectory = Paths.get( project.getBuild().getOutputDirectory() );
+        if ( !outputDirectory.toFile().exists() )
+        {
+            return true;
+        }
+
+        try ( Stream<Path> outputFiles = Files.walk( outputDirectory ) )
+        {
+            // Not using File#lastModified() to avoid a Linux JDK8 milliseconds precision bug: JDK-8177809.
+            long artifactLastModified = Files.getLastModifiedTime( packagedArtifactFile.toPath() ).toMillis();
+
+            if ( session.getProjectBuildingRequest().getBuildStartTime() != null )
+            {
+                long buildStartTime = session.getProjectBuildingRequest().getBuildStartTime().getTime();
+                if ( artifactLastModified > buildStartTime )
+                {
+                    return true;
+                }
+            }
+
+            Iterator<Path> iterator = outputFiles.iterator();
+            while ( iterator.hasNext() )
+            {
+                Path outputFile = iterator.next();
+                long outputFileLastModified = Files.getLastModifiedTime( outputFile ).toMillis();
+                if ( outputFileLastModified > artifactLastModified )
+                {
+                    logger.warn( "Packaged artifact is not up-to-date compared to the build output directory" );
+                    return false;
+                }
+            }
+
+            return true;
+        }
+        catch ( IOException e )
+        {
+            logger.warn( "An I/O error occurred while checking if the packaged artifact is up-to-date "
+                    + "against the build output directory. "
+                    + "Continuing with the assumption that it is up-to-date.", e );
+            return true;
+        }
+    }
+
+    private boolean hasBeenPackagedDuringThisSession( MavenProject project )

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS60 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS41 INS43 INS42 INS43 INS42 INS60 INS25 INS54 INS42 INS7 INS7 INS32 INS43 INS59 INS25 INS42 INS42 INS27 INS8 INS43 INS59 INS14 INS42 INS42 INS43 INS59 INS38 INS8 INS58 INS8 INS12 INS22 INS42 INS22 INS42 INS22 INS14 INS32 INS42 INS86 INS42 INS42 INS32 INS27 INS8 MOV25 INS42 INS33 INS41 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS32 INS32 INS41 INS74 INS59 INS60 INS25 INS60 INS61 INS41 INS44 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS74 INS27 INS42 INS42 INS59 INS8 INS42 INS42 INS42 INS27 INS32 INS41 INS33 INS42 INS42 INS45 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS9 INS43 INS43 INS42 INS32 INS39 INS59 INS27 INS8 INS74 INS59 INS32 INS8 INS9 INS43 INS42 INS21 INS41 INS43 INS32 INS34 INS42 INS60 INS21 INS27 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS60 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS42 INS32 INS9 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS33 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS27 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS60 INS60 INS60 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS41 INS45 INS45 INS45 INS42 INS42 INS32 INS32 INS32 INS52 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 MOV27 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS38 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL32