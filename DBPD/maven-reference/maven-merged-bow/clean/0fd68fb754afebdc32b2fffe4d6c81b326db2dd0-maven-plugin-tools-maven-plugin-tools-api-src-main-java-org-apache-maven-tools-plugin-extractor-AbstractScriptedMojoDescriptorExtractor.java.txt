Ant support is working. I want to revisit the testing before I let it go, though.

o Added maven-script-ant to wrapper Ant-based Plexus components in a Mojo-compliant shell

o Added maven-plugin-tools-ant to extract plugin descriptor metadata from Ant-based plugin sources

o Revised the maven-plugin-tools-model, which can be used as a generic companion metadata file for things like Ant-based mojos. It now includes an analogy to @parameter default-value=""

o Added javadoc format for DefaultWagonManager, correcting the name of an exception thrown by the configureWagon() method.

o Changed the required version of maven-plugin-tools-api in the plugin-plugin to 2.0.1-SNAPSHOT, to accommodate changes in the script-based mojo descriptor extractor API. This allows companion metadata files for mojo scripts, as in the case of Ant.

o Removed maven-plugin-tools-beanshell from the plugin-plugin's dependencies. It can be included as a plugin-dependency in the plugin projects that need it, in similar fashion to Ant's extractors.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@326372 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.StringUtils;
+        String metadataExtension = getMetadataFileExtension();
+        String scriptExtension = getScriptFileExtension();
+        
-            gatherScriptSourcesByBasedir( project.getScriptSourceRoots(), getScriptFileExtension() );
+            gatherFilesByBasedir( project.getScriptSourceRoots(), scriptExtension );
-        List mojoDescriptors = extractMojoDescriptors( scriptFilesKeyedByBasedir, pluginDescriptor );
+        List mojoDescriptors;
+        if ( !StringUtils.isEmpty( metadataExtension ) )
+        {
+            Map metadataFilesKeyedByBasedir =
+                gatherFilesByBasedir( project.getScriptSourceRoots(), metadataExtension );
+            
+            mojoDescriptors = extractMojoDescriptorsFromMetadata( metadataFilesKeyedByBasedir, pluginDescriptor );
+        }
+        else
+        {
+            mojoDescriptors = extractMojoDescriptors( scriptFilesKeyedByBasedir, pluginDescriptor );
+        }
-    private void copyScriptsToOutputDirectory( Map scriptFilesKeyedByBasedir, String outputDirectory )
+    protected void copyScriptsToOutputDirectory( Map scriptFilesKeyedByBasedir, String outputDirectory )
-    protected abstract List extractMojoDescriptors( Map scriptFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
-        throws ExtractionException, InvalidPluginDescriptorException;
-
-    protected abstract String getScriptFileExtension();
-
-    protected Map gatherScriptSourcesByBasedir( List directories, String scriptFileExtension )
+    protected Map gatherFilesByBasedir( List directories, String scriptFileExtension )
+    protected List extractMojoDescriptorsFromMetadata( Map metadataFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
+        throws ExtractionException, InvalidPluginDescriptorException
+    {
+        return null;
+    }
+
+    protected String getMetadataFileExtension()
+    {
+        return null;
+    }
+
+    protected List extractMojoDescriptors( Map scriptFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
+        throws ExtractionException, InvalidPluginDescriptorException
+    {
+        return null;
+    }
+
+    protected abstract String getScriptFileExtension();
+

INS26 MOV31 INS40 INS31 INS31 UPD83 UPD42 UPD42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 MOV44 INS44 INS43 INS43 INS8 INS60 INS60 INS25 INS43 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS42 INS42 INS41 INS43 INS59 INS43 INS59 INS38 INS8 INS8 INS42 INS33 INS33 INS42 INS33 INS42 INS42 INS32 INS42 INS42 MOV32 INS32 INS60 INS21 INS21 INS42 UPD42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL83