[MNG-4795] [regression] Dependencies in forked reactor projects are not resolved when aggregator bound to lifecycle forks

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@996206 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.execution.MavenSession;
-import org.apache.maven.lifecycle.MavenExecutionPlan;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.TreeSet;
- * Context of dependency artifacts for the entire build.
+ * Context of dependency artifacts for a particular project.
-    private final Collection<String> scopesToCollect;
+    private static final Collection<?> UNRESOLVED = Arrays.asList();
-    private final Collection<String> scopesToResolve;
+    private final MavenProject project;
-    private final boolean aggregating;
+    private final Collection<String> scopesToCollectForCurrentProject;
-    private volatile MavenProject lastProject;
+    private final Collection<String> scopesToResolveForCurrentProject;
-    private volatile Collection<?> lastDependencyArtifacts;
+    private final Collection<String> scopesToCollectForAggregatedProjects;
-    private volatile int lastDependencyArtifactCount;
+    private final Collection<String> scopesToResolveForAggregatedProjects;
-    public DependencyContext( Collection<String> scopesToCollect, Collection<String> scopesToResolve,
-                              boolean aggregating )
+    private volatile Collection<?> lastDependencyArtifacts = UNRESOLVED;
+
+    private volatile int lastDependencyArtifactCount = -1;
+
+    public DependencyContext( MavenProject project, Collection<String> scopesToCollect,
+                              Collection<String> scopesToResolve )
-        this.scopesToCollect = scopesToCollect;
-        this.scopesToResolve = scopesToResolve;
-        this.aggregating = aggregating;
+        this.project = project;
+        scopesToCollectForCurrentProject = scopesToCollect;
+        scopesToResolveForCurrentProject = scopesToResolve;
+        scopesToCollectForAggregatedProjects = Collections.synchronizedSet( new TreeSet<String>() );
+        scopesToResolveForAggregatedProjects = Collections.synchronizedSet( new TreeSet<String>() );
-    public DependencyContext( MavenExecutionPlan executionPlan, boolean aggregating )
+    public MavenProject getProject()
-        this( executionPlan.getRequiredCollectionScopes(), executionPlan.getRequiredResolutionScopes(), aggregating );
+        return project;
-    public void setLastDependencyArtifacts( Collection<?> lastDependencyArtifacts )
+    public Collection<String> getScopesToCollectForCurrentProject()
-        this.lastDependencyArtifacts = lastDependencyArtifacts;
-        lastDependencyArtifactCount = ( lastDependencyArtifacts != null ) ? lastDependencyArtifacts.size() : 0;
+        return scopesToCollectForCurrentProject;
-    public MavenProject getLastProject()
+    public Collection<String> getScopesToResolveForCurrentProject()
-        return lastProject;
+        return scopesToResolveForCurrentProject;
-    public void setLastProject( MavenProject lastProject )
+    public Collection<String> getScopesToCollectForAggregatedProjects()
-        this.lastProject = lastProject;
+        return scopesToCollectForAggregatedProjects;
-    public Collection<String> getScopesToCollect()
+    public Collection<String> getScopesToResolveForAggregatedProjects()
-        return scopesToCollect;
+        return scopesToResolveForAggregatedProjects;
-    public Collection<String> getScopesToResolve()
+    public boolean isResolutionRequiredForCurrentProject()
-        return scopesToResolve;
-    }
-
-    public boolean isAggregating()
-    {
-        return aggregating;
-    }
-
-    public DependencyContext clone()
-    {
-        return new DependencyContext( scopesToCollect, scopesToResolve, aggregating );
-    }
-
-    public boolean isSameProject( MavenSession session )
-    {
-        return ( lastProject == session.getCurrentProject() );
-    }
-
-    public boolean isSameButUpdatedProject( MavenSession session )
-    {
-        if ( isSameProject( session ) )
+        if ( lastDependencyArtifacts != project.getDependencyArtifacts()
+            || ( lastDependencyArtifacts != null && lastDependencyArtifactCount != lastDependencyArtifacts.size() ) )
-            if ( lastDependencyArtifacts != lastProject.getDependencyArtifacts()
-                || ( lastDependencyArtifacts != null && lastDependencyArtifactCount != lastDependencyArtifacts.size() ) )
-            {
-                return true;
+            return true;
-            }
+    public boolean isResolutionRequiredForAggregatedProjects( Collection<String> scopesToCollect,
+                                                              Collection<String> scopesToResolve )
+    {
+        boolean required =
+            scopesToCollectForAggregatedProjects.addAll( scopesToCollect )
+                || scopesToResolveForAggregatedProjects.addAll( scopesToResolve );
+        return required;
+    }
+
+    public void synchronizeWithProjectState()
+    {
+        lastDependencyArtifacts = project.getDependencyArtifacts();
+        lastDependencyArtifactCount = ( lastDependencyArtifacts != null ) ? lastDependencyArtifacts.size() : 0;
+    }
+

MOV26 MOV26 INS26 MOV23 MOV23 MOV31 MOV31 INS40 UPD40 UPD40 INS23 INS23 INS31 INS31 INS83 MOV74 UPD83 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 MOV83 MOV42 MOV44 MOV44 MOV44 INS8 UPD42 MOV83 INS74 INS42 MOV8 UPD42 UPD42 INS74 INS42 INS8 INS42 MOV8 UPD42 INS44 UPD42 UPD66 INS42 INS32 UPD42 UPD42 UPD42 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS38 UPD42 MOV21 MOV21 MOV21 INS21 INS21 INS43 INS43 INS43 INS43 INS41 MOV41 INS74 UPD42 INS74 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS7 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS43 INS43 INS43 INS39 INS59 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 UPD42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS14 INS32 MOV32 INS42 INS42 INS74 INS74 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL39 DEL42 DEL44 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL42 DEL17 DEL8 DEL31 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL31 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL25 DEL8 DEL43 DEL42 DEL27 DEL36 DEL41 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42