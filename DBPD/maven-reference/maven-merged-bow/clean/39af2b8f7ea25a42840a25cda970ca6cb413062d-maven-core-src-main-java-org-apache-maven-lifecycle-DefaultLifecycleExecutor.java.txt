o bootstrap working on my branch with all the changes. i need to pull from trunk and spend a few more hours on adding tests that need to be written that never were. the
  guts of the plugin manager and lifecycle executor internals are not really covered much.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@751989 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.logging.AbstractLogEnabled;
+    extends AbstractLogEnabled
-    @Requirement
-    private Logger logger;
+    //@Requirement
+    //private getLogger() getLogger();
-    // ----------------------------------------------------------------------
-    //
-    // ----------------------------------------------------------------------
-
+    public List<Lifecycle> getLifecyclePhases()
+    {
+        return lifecycles;
+    }
+    
-                    logger.info( "Building " + rootProject.getName() );
+                    getLogger().info( "Building " + rootProject.getName() );
-                    logger.info( "  " + segment );
+                    getLogger().info( "  " + segment );
-                    logger.info( "SKIPPING " + rootProject.getName() );
+                    getLogger().info( "SKIPPING " + rootProject.getName() );
-                    logger.info( "  " + segment );
+                    getLogger().info( "  " + segment );
-                    logger.info( "This project has been banned from further executions due to previous failures." );
+                    getLogger().info( "This project has been banned from further executions due to previous failures." );
-                        logger.info( "Building " + currentProject.getName() );
+                        getLogger().info( "Building " + currentProject.getName() );
-                        logger.info( "  " + segment );
+                        getLogger().info( "  " + segment );
-                        logger.info( "SKIPPING " + currentProject.getName() );
+                        getLogger().info( "SKIPPING " + currentProject.getName() );
-                        logger.info( "  " + segment );
+                        getLogger().info( "  " + segment );
-                        logger.info( "This project has been banned from further executions due to previous failures." );
+                        getLogger().info( "This project has been banned from further executions due to previous failures." );
-            logger.info( "No goals needed for project - skipping" );
+            getLogger().info( "No goals needed for project - skipping" );
-            logger.error( "Plugin contains a <reports/> section: this is IGNORED - please use <reporting/> instead." );
+            getLogger().error( "Plugin contains a <reports/> section: this is IGNORED - please use <reporting/> instead." );
-                    logger.warn( "Invalid default report ignored: '" + report + "' (must be groupId:artifactId[:version])" );
+                    getLogger().warn( "Invalid default report ignored: '" + report + "' (must be groupId:artifactId[:version])" );
-                logger.debug( "Omitting report: " + mojoDescriptor.getFullGoalName() + " from reports list. It initiated part of the fork currently executing." );
+                getLogger().debug( "Omitting report: " + mojoDescriptor.getFullGoalName() + " from reports list. It initiated part of the fork currently executing." );
-        logger.info( "Preparing " + pluginDescriptor.getGoalPrefix() + ":" + mojoDescriptor.getGoal() );
+        getLogger().info( "Preparing " + pluginDescriptor.getGoalPrefix() + ":" + mojoDescriptor.getGoal() );
-                logger.info( "Building " + reactorProject.getName() );
+                getLogger().info( "Building " + reactorProject.getName() );
-                    logger.warn( "Removing: " + execution.getMojoDescriptor().getGoal() + " from forked lifecycle, to prevent recursive invocation." );
+                    getLogger().warn( "Removing: " + execution.getMojoDescriptor().getGoal() + " from forked lifecycle, to prevent recursive invocation." );
-                logger.debug( "Error looking up lifecycle mapping to retrieve optional mojos. Lifecycle ID: " + lifecycle.getId() + ". Error: " + e.getMessage(), e );
+                getLogger().debug( "Error looking up lifecycle mapping to retrieve optional mojos. Lifecycle ID: " + lifecycle.getId() + ". Error: " + e.getMessage(), e );
-                    logger.error( "Plugin contains a <goals/> section: this is IGNORED - please use <executions/> instead." );
+                    getLogger().error( "Plugin contains a <goals/> section: this is IGNORED - please use <executions/> instead." );
-            logger.warn( goal + " requires online mode, but maven is currently offline. Disabling " + goal + "." );
+            getLogger().warn( goal + " requires online mode, but maven is currently offline. Disabling " + goal + "." );
-
+    
-        String[] taskSegments = StringUtils.split( task, ":" );
-        if ( taskSegments.length == 2 )
+        StringTokenizer tok = new StringTokenizer( task, ":" );
+        int numTokens = tok.countTokens();        
+        
+        if ( numTokens == 2 )
-            String prefix = taskSegments[0];
-            goal = taskSegments[1];
+            String prefix = tok.nextToken();
+            goal = tok.nextToken();
-        else if ( taskSegments.length == 3 || taskSegments.length == 4 )
+        else if ( numTokens == 3 || numTokens == 4 )
-            plugin.setGroupId( taskSegments[0] );
-            plugin.setArtifactId( taskSegments[1] );
+            plugin.setGroupId( tok.nextToken() );
+            plugin.setArtifactId( tok.nextToken() );
-            if ( taskSegments.length == 4 )
+            if ( numTokens == 4 )
-                plugin.setVersion( taskSegments[3] );
+                plugin.setVersion( tok.nextToken() );
-            goal = taskSegments[4];
+            goal = tok.nextToken();
-        logger.info( "------------------------------------------------------------------------" );
+        getLogger().info( "------------------------------------------------------------------------" );

INS26 INS40 INS43 INS31 INS42 INS83 INS74 INS42 INS8 INS43 INS43 INS41 INS60 UPD42 MOV42 INS42 INS42 INS43 INS39 INS59 INS32 UPD42 MOV42 UPD42 INS14 INS42 INS32 INS42 INS32 UPD42 MOV42 INS43 INS42 INS45 INS42 INS42 UPD42 MOV42 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL78 DEL83 DEL43 DEL42 DEL59 DEL23 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL40 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL40 DEL40 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL40 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2