o hide the creation of default event dispatcher and reactor manager inside the session
o the lifecycle executor test is now starting to look sane


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@757635 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
-import org.apache.maven.execution.DuplicateProjectException;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.Plugin;
-import org.apache.maven.model.ReportPlugin;
-import org.apache.maven.model.Extension;
-import org.codehaus.plexus.util.dag.DAG;
-import org.codehaus.plexus.util.dag.TopologicalSorter;
-
-import java.util.*;
-
-    protected static class ProjectSorter
-    {
-        private final DAG dag;
-
-        private final List<MavenProject> sortedProjects;
-
-        private MavenProject topLevelProject;
-
-        /**
-         * Sort a list of projects.
-         * <ul>
-         * <li>collect all the vertices for the projects that we want to build.</li>
-         * <li>iterate through the deps of each project and if that dep is within
-         * the set of projects we want to build then add an edge, otherwise throw
-         * the edge away because that dependency is not within the set of projects
-         * we are trying to build. we assume a closed set.</li>
-         * <li>do a topo sort on the graph that remains.</li>
-         * </ul>
-         * @throws DuplicateProjectException if any projects are duplicated by id
-         */
-        // MAVENAPI FIXME: the DAG used is NOT only used to represent the dependency relation,
-        // but also for <parent>, <build><plugin>, <reports>. We need multiple DAG's
-        // since a DAG can only handle 1 type of relationship properly.
-        // Usecase:  This is detected as a cycle:
-        // org.apache.maven:maven-plugin-api                -(PARENT)->
-        // org.apache.maven:maven                           -(inherited REPORTING)->
-        // org.apache.maven.plugins:maven-checkstyle-plugin -(DEPENDENCY)->
-        // org.apache.maven:maven-plugin-api
-        // In this case, both the verify and the report goals are called
-        // in a different lifecycle. Though the compiler-plugin has a valid usecase, although
-        // that seems to work fine. We need to take versions and lifecycle into account.
-        public ProjectSorter( List<MavenProject> projects )
-            throws CycleDetectedException, DuplicateProjectException
-        {
-            dag = new DAG();
-
-            Map projectMap = new HashMap();
-
-            for ( Iterator i = projects.iterator(); i.hasNext(); )
-            {
-                MavenProject project = (MavenProject) i.next();
-
-                String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-
-                if ( dag.getVertex( id ) != null )
-                {
-                    MavenProject conflictingProject = (MavenProject) projectMap.get( id );
-
-                    throw new DuplicateProjectException( id,
-                                                         conflictingProject.getFile(),
-                                                         project.getFile(),
-                                                         "Project '"
-                                                         + id
-                                                         + "' is duplicated in the reactor" );
-                }
-
-                dag.addVertex( id );
-
-                projectMap.put( id, project );
-            }
-
-            for ( Iterator i = projects.iterator(); i.hasNext(); )
-            {
-                MavenProject project = (MavenProject) i.next();
-
-                String id = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-
-                for ( Iterator j = project.getDependencies().iterator(); j.hasNext(); )
-                {
-                    Dependency dependency = (Dependency) j.next();
-
-                    String dependencyId = ArtifactUtils
-                        .versionlessKey( dependency.getGroupId(), dependency.getArtifactId() );
-
-                    if ( dag.getVertex( dependencyId ) != null )
-                    {
-                        project.addProjectReference( (MavenProject) projectMap.get( dependencyId ) );
-
-                        dag.addEdge( id, dependencyId );
-                    }
-                }
-
-                MavenProject parent = project.getParent();
-                if ( parent != null )
-                {
-                    String parentId = ArtifactUtils.versionlessKey( parent.getGroupId(), parent.getArtifactId() );
-                    if ( dag.getVertex( parentId ) != null )
-                    {
-                        // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
-                        if ( dag.hasEdge( parentId, id ) )
-                        {
-                            dag.removeEdge( parentId, id );
-                        }
-                        dag.addEdge( id, parentId );
-                    }
-                }
-
-                List buildPlugins = project.getBuildPlugins();
-                if ( buildPlugins != null )
-                {
-                    for ( Iterator j = buildPlugins.iterator(); j.hasNext(); )
-                    {
-                        Plugin plugin = (Plugin) j.next();
-                        String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
-                        if ( ( dag.getVertex( pluginId ) != null ) && !pluginId.equals( id ) )
-                        {
-                            addEdgeWithParentCheck( projectMap, pluginId, project, id );
-                        }
-                    }
-                }
-
-                List reportPlugins = project.getReportPlugins();
-                if ( reportPlugins != null )
-                {
-                    for ( Iterator j = reportPlugins.iterator(); j.hasNext(); )
-                    {
-                        ReportPlugin plugin = (ReportPlugin) j.next();
-                        String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
-                        if ( ( dag.getVertex( pluginId ) != null ) && !pluginId.equals( id ) )
-                        {
-                            addEdgeWithParentCheck( projectMap, pluginId, project, id );
-                        }
-                    }
-                }
-
-                for ( Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); )
-                {
-                    Extension extension = (Extension) j.next();
-                    String extensionId = ArtifactUtils.versionlessKey( extension.getGroupId(), extension.getArtifactId() );
-                    if ( dag.getVertex( extensionId ) != null )
-                    {
-                        addEdgeWithParentCheck( projectMap, extensionId, project, id );
-                    }
-                }
-            }
-
-            List sortedProjects = new ArrayList();
-
-            for ( Iterator i = TopologicalSorter.sort( dag ).iterator(); i.hasNext(); )
-            {
-                String id = (String) i.next();
-
-                sortedProjects.add( projectMap.get( id ) );
-            }
-
-            this.sortedProjects = Collections.unmodifiableList( sortedProjects );
-        }
-
-        private void addEdgeWithParentCheck( Map projectMap, String projectRefId, MavenProject project, String id )
-            throws CycleDetectedException
-        {
-            MavenProject extProject = (MavenProject) projectMap.get( projectRefId );
-
-            if ( extProject == null )
-            {
-                return;
-            }
-
-            project.addProjectReference( extProject );
-
-            MavenProject extParent = extProject.getParent();
-            if ( extParent != null )
-            {
-                String parentId = ArtifactUtils.versionlessKey( extParent.getGroupId(), extParent.getArtifactId() );
-                // Don't add edge from parent to extension if a reverse edge already exists
-                if ( !dag.hasEdge( projectRefId, id ) || !parentId.equals( id ) )
-                {
-                    dag.addEdge( id, projectRefId );
-                }
-            }
-        }
-
-        // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
-        public MavenProject getTopLevelProject()
-        {
-            if ( topLevelProject == null )
-            {
-                for ( Iterator i = sortedProjects.iterator(); i.hasNext() && ( topLevelProject == null ); )
-                {
-                    MavenProject project = (MavenProject) i.next();
-                    if ( project.isExecutionRoot() )
-                    {
-                        topLevelProject = project;
-                    }
-                }
-            }
-
-            return topLevelProject;
-        }
-
-        public List<MavenProject> getSortedProjects()
-        {
-            return sortedProjects;
-        }
-
-        public boolean hasMultipleProjects()
-        {
-            return sortedProjects.size() > 1;
-        }
-
-        private List getDependents( String id )
-        {
-            return dag.getParentLabels( id );
-        }
-    }

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL36 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55