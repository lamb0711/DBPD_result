[MNG-5977] Improve output readability of our MavenTransferListener implementations

* Applied a general decimal formatter which automatically scales file sizes between [0,10) (one decimal digit) and [10,1000) (whole numbers) along with proper size and time units
* The progress meter will now properly
** tell the amount of transfers along with file names (in debug mode) and absolute progress by size
** visually seperate parallel transfers with " | "
* Optimized and reduced padding to the cases where it actually is necessary
* Padding has to be applied to every event which can succeed with progress update
* Synchronize all calls to console to avoid race conditions where output is terminated by a carriage return only. If no sync is done, SLF4J or INIT/SUCCEEDED update can interleave and overwrite the progress while being shorter as the progress itself.
* Replaced the concurrent hash map with a synchronized linked hash map to retain order of the progress meter. It will behave now like a queue.
* Work around a rounding bug existed upto Java 7
  See http://stackoverflow.com/q/22797964/696632 and Oracle's bugfix
  Announcement: http://www.oracle.com/technetwork/java/javase/8-compatibility-guide-2156366.html

Race conditions cannot be avoided if -T is employed since one does not have access to the output stream of a SLF4J backend to synchronize on.

+import java.util.Collections;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Locale;
-import java.util.concurrent.ConcurrentHashMap;
+import org.apache.commons.lang3.StringUtils;
-    private Map<TransferResource, Long> downloads = new ConcurrentHashMap<>();
+    private Map<TransferResource, Long> transfers = Collections.synchronizedMap(
+                                                        new LinkedHashMap<TransferResource, Long>() );
+    private boolean printResourceNames;
-    public ConsoleMavenTransferListener( PrintStream out )
+    public ConsoleMavenTransferListener( PrintStream out, boolean printResourceNames )
+        this.printResourceNames = printResourceNames;
-    public void transferProgressed( TransferEvent event )
+    public synchronized void transferInitiated( TransferEvent event )
+    {
+        overridePreviousTransfer( event );
+
+        super.transferInitiated( event );
+    }
+
+    @Override
+    public synchronized void transferCorrupted( TransferEvent event )
+        throws TransferCancelledException
+    {
+        overridePreviousTransfer( event );
+
+        super.transferCorrupted( event );
+    }
+
+    @Override
+    public synchronized void transferProgressed( TransferEvent event )
-        downloads.put( resource, event.getTransferredBytes() );
+        transfers.put( resource, event.getTransferredBytes() );
-        StringBuilder buffer = new StringBuilder( 64 );
+        StringBuilder buffer = new StringBuilder( 128 );
+        buffer.append( "Progress (" ).append(  transfers.size() ).append( "): " );
-        for ( Map.Entry<TransferResource, Long> entry : downloads.entrySet() )
+        synchronized ( transfers )
-            long total = entry.getKey().getContentLength();
-            Long complete = entry.getValue();
-            // NOTE: This null check guards against http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6312056
-            if ( complete != null )
+            Iterator<Map.Entry<TransferResource, Long>> entries = transfers.entrySet().iterator();
+            while ( entries.hasNext() )
-                buffer.append( getStatus( complete, total ) ).append( "  " );
+                Map.Entry<TransferResource, Long> entry = entries.next();
+                long total = entry.getKey().getContentLength();
+                Long complete = entry.getValue();
+                buffer.append( getStatus( entry.getKey().getResourceName(), complete, total ) );
+                if ( entries.hasNext() )
+                {
+                    buffer.append( " | " );
+                }
-
-        out.print( buffer.toString() );
+        out.print( buffer );
+        out.flush();
-    private String getStatus( long complete, long total )
+    private String getStatus( String resourceName, long complete, long total )
-        if ( total >= 1024 )
+        FileSizeFormat format = new FileSizeFormat( Locale.ENGLISH );
+        StringBuilder status = new StringBuilder();
+
+        if ( printResourceNames )
-            return toKB( complete ) + "/" + toKB( total ) + " KB ";
+            status.append( StringUtils.substringAfterLast( resourceName,  "/" ) );
+            status.append( " (" );
-        else if ( total >= 0 )
+
+        status.append( format.formatProgress( complete, total ) );
+
+        if ( printResourceNames )
-            return complete + "/" + total + " B ";
+            status.append( ")" );
-        else if ( complete >= 1024 )
-        {
-            return toKB( complete ) + " KB ";
-        }
-        else
-        {
-            return complete + " B ";
-        }
+
+        return status.toString();
-    public void transferSucceeded( TransferEvent event )
+    public synchronized void transferSucceeded( TransferEvent event )
-        transferCompleted( event );
+        transfers.remove( event.getResource() );
+        overridePreviousTransfer( event );
-    public void transferFailed( TransferEvent event )
+    public synchronized void transferFailed( TransferEvent event )
-        transferCompleted( event );
+        transfers.remove( event.getResource() );
+        overridePreviousTransfer( event );
-    private void transferCompleted( TransferEvent event )
+    private void overridePreviousTransfer( TransferEvent event )
-        downloads.remove( event.getResource() );
-
-        StringBuilder buffer = new StringBuilder( 64 );
-        pad( buffer, lastLength );
-        buffer.append( '\r' );
-        out.print( buffer.toString() );
+        if ( lastLength > 0 )
+        {
+            StringBuilder buffer = new StringBuilder( 128 );
+            pad( buffer, lastLength );
+            buffer.append( '\r' );
+            out.print( buffer );
+            out.flush();
+            lastLength = 0;
+        }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS23 INS31 INS31 INS83 INS39 INS59 INS44 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS44 INS83 INS83 UPD42 INS8 UPD42 INS32 INS42 INS39 INS42 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS51 INS21 INS43 INS42 INS60 MOV60 INS25 INS21 INS25 MOV41 MOV21 INS21 INS25 INS42 INS42 INS14 INS7 INS42 INS32 INS48 INS42 INS32 INS48 MOV43 INS32 INS42 INS8 INS32 INS42 INS43 INS59 MOV43 INS42 MOV8 INS32 INS42 MOV8 INS32 INS32 INS27 INS8 UPD74 MOV74 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS45 INS60 INS61 MOV42 INS42 INS42 INS42 INS42 INS14 UPD42 INS21 INS21 INS42 INS42 INS32 INS21 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS34 INS60 MOV21 MOV21 MOV21 INS21 INS21 UPD43 INS43 INS43 INS52 INS42 MOV43 UPD34 INS32 INS42 INS32 INS74 INS59 INS32 INS8 INS43 INS40 MOV43 INS32 INS32 INS42 INS42 INS42 INS42 INS32 MOV42 INS42 INS43 INS59 INS32 INS7 UPD42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS74 INS42 INS32 INS42 INS42 INS60 MOV60 MOV60 INS21 INS25 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS14 MOV42 INS42 INS42 INS42 INS34 INS42 INS43 INS43 INS43 INS32 INS42 MOV74 INS59 INS32 INS32 INS8 INS42 INS42 UPD42 MOV42 INS45 INS43 INS34 INS40 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS32 MOV42 MOV42 MOV32 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 MOV42 UPD45 MOV45 INS42 INS42 DEL14 DEL42 DEL44 DEL32 DEL42 DEL33 DEL27 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL32 DEL34 DEL32 DEL45 DEL32 DEL45 DEL27 DEL41 DEL32 DEL45 DEL27 DEL41 DEL42 DEL45 DEL27 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL42 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL42 DEL34 DEL27 DEL8 DEL25 DEL25 DEL25 DEL42 DEL32 DEL8