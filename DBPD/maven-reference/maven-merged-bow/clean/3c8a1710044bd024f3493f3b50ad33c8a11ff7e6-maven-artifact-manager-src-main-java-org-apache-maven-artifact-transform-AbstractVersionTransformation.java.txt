remove legacy metadata handling

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292155 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.metadata.LegacyArtifactMetadata;
-import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;
-import org.apache.maven.wagon.ResourceDoesNotExistException;
-import java.io.File;
-import java.io.IOException;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
-    /**
-     * @todo remove in beta-2 - used for legacy handling
-     */
-    private static Set resolvedArtifactCache = new HashSet();
-
-            version = resolveLegacyVersion( artifact, localRepository, remoteRepositories );
-            if ( version == null )
-            {
-                version = artifact.getBaseVersion();
-            }
+            // use the local copy, or if it doesn't exist - go to the remote repo for it
+            version = artifact.getBaseVersion();
-
-    /**
-     * @todo remove in beta-2 - used for legacy handling
-     */
-    private String resolveLegacyVersion( Artifact artifact, ArtifactRepository localRepository,
-                                         List remoteRepositories )
-        throws ArtifactMetadataRetrievalException
-    {
-        LegacyArtifactMetadata localMetadata = createLegacyMetadata( artifact );
-        File f = new File( localRepository.getBasedir(),
-                           localRepository.pathOfLocalRepositoryMetadata( localMetadata, null ) );
-        if ( f.exists() )
-        {
-            try
-            {
-                localMetadata.readFromFile( f );
-            }
-            catch ( IOException e )
-            {
-                throw new ArtifactMetadataRetrievalException( "Error reading local metadata", e );
-            }
-        }
-        else
-        {
-            localMetadata = null;
-        }
-
-        boolean alreadyResolved = alreadyResolved( artifact );
-        if ( !alreadyResolved )
-        {
-            if ( !wagonManager.isOnline() )
-            {
-                LegacyArtifactMetadata metadata = createLegacyMetadata( artifact );
-                getLogger().debug(
-                    "System is offline. Cannot resolve metadata:\n" + metadata.extendedToString() + "\n\n" );
-
-                return null;
-            }
-
-            boolean checkedUpdates = false;
-            for ( Iterator i = remoteRepositories.iterator(); i.hasNext(); )
-            {
-                ArtifactRepository repository = (ArtifactRepository) i.next();
-
-                ArtifactRepositoryPolicy policy = artifact.isSnapshot() ? repository.getSnapshots()
-                    : repository.getReleases();
-
-                if ( !policy.isEnabled() )
-                {
-                    getLogger().debug( "Legacy metadata: " + artifact.getId() + ": Skipping disabled repository " +
-                        repository.getId() + " (" + repository.getUrl() + ")" );
-                }
-                else
-                {
-                    boolean checkForUpdates = localMetadata == null ||
-                        policy.checkOutOfDate( localMetadata.getLastModified() );
-
-                    if ( checkForUpdates )
-                    {
-                        checkedUpdates = true;
-
-                        LegacyArtifactMetadata remoteMetadata;
-
-                        try
-                        {
-                            remoteMetadata = createLegacyMetadata( artifact );
-
-                            remoteMetadata.retrieveFromRemoteRepository( repository, wagonManager,
-                                                                         policy.getChecksumPolicy() );
-
-                            getLogger().warn( "Using old-style versioning metadata from remote repo for " + artifact );
-
-                            if ( localMetadata == null || remoteMetadata.compareTo( localMetadata ) > 0 )
-                            {
-                                // remote is newer
-                                artifact.setRepository( repository );
-                                localMetadata = remoteMetadata;
-                                getLogger().debug( "Found repository for the artifact." );
-                            }
-                        }
-                        catch ( ResourceDoesNotExistException e )
-                        {
-                            getLogger().debug( "Legacy metadata for: " + artifact.getId() +
-                                " could not be found on repository: " + repository.getId() );
-                        }
-                        catch ( ArtifactMetadataRetrievalException e )
-                        {
-                            getLogger().warn( "Legacy metadata for: " + artifact.getId() +
-                                " could not be found on repository: " + repository.getId(), e );
-                        }
-                    }
-                    else
-                    {
-                        getLogger().debug( "resolveMetaData: " + artifact.getId() + ": NOT checking for updates from " +
-                            repository.getId() + " (" + repository.getUrl() + ")" );
-                    }
-                }
-            }
-
-            // touch the file if it was checked for updates, but don't create it if it did't exist to avoid
-            // storing SNAPSHOT as the actual version which doesn't exist remotely.
-            if ( checkedUpdates && localMetadata != null && localMetadata.getLastModified().getTime() > 0 )
-            {
-                localMetadata.storeInLocalRepository( localRepository );
-            }
-
-            resolvedArtifactCache.add( getCacheKey( artifact ) );
-        }
-
-        if ( localMetadata != null && artifact.getFile().exists() &&
-            !localMetadata.newerThanFile( artifact.getFile() ) )
-        {
-            if ( getLogger().isDebugEnabled() && !alreadyResolved )
-            {
-                // Locally installed file is newer, don't use the resolved version
-                getLogger().debug( artifact.getArtifactId() + ": using locally installed snapshot" );
-            }
-            localMetadata = null;
-        }
-
-        return localMetadata != null ? localMetadata.constructVersion() : null;
-    }
-
-    protected abstract LegacyArtifactMetadata createLegacyMetadata( Artifact artifact );
-
-    /**
-     * @todo remove in beta-2 - used for legacy handling
-     */
-    private boolean alreadyResolved( Artifact artifact )
-    {
-        return resolvedArtifactCache.contains( getCacheKey( artifact ) );
-    }
-
-    /**
-     * @todo remove in beta-2 - used for legacy handling
-     */
-    private static String getCacheKey( Artifact artifact )
-    {
-        // No type - one per POM
-        return artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getBaseVersion();
-    }

MOV25 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL33 DEL41 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL9 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL27 DEL42 DEL32 DEL42 DEL32 DEL42 DEL38 DEL27 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL16 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31