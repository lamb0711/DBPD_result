[MNG-5760] Several fixes for the --resume feature.

BuildResumptionDataRepository is not used in MavenCli

Make setResume() on MavenExecutionRequest a traditional setter

Fix resolution of resume.properties file

Add unit test for DefaultBuildResumptionDataRepository#applyResumptionData

Avoid storing and using an empty excludedProjects field in the resume.properties file.

Avoid star imports

Don't create a unneeded Path when resolving resume.properties

Support the scenario where the first project was failed, but subsequent projects succeeded. (e.g. by fail-at-end or parallel builds)

Maven invocations without project shouldn't fail

+import org.codehaus.plexus.util.StringUtils;
+        final String resumeFromSelector;
+        final List<String> projectsToSkip;
-            LOGGER.info( "The first module in the build failed, resuming the build would not make sense." );
-            return Optional.empty();
+            // As the first module in the build failed, there is no need to specify this as the resumeFrom project.
+            resumeFromSelector = null;
+            projectsToSkip = determineProjectsToSkip( result, failedProjects, 0 );
+        }
+        else
+        {
+            resumeFromSelector = resumeFromProject.getGroupId() + ":" + resumeFromProject.getArtifactId();
+            List<MavenProject> allProjects = result.getTopologicallySortedProjects();
+            int resumeFromProjectIndex = allProjects.indexOf( resumeFromProject );
+            projectsToSkip = determineProjectsToSkip( result, failedProjects, resumeFromProjectIndex + 1 );
-        final String resumeFromSelector = resumeFromProject.getGroupId() + ":" + resumeFromProject.getArtifactId();
-        final List<String> projectsToSkip = determineProjectsToSkip( result, failedProjects, resumeFromProject );
-
-        return Optional.of( new BuildResumptionData( resumeFromSelector, projectsToSkip ) );
+        boolean canBuildBeResumed = StringUtils.isNotEmpty( resumeFromSelector ) || !projectsToSkip.isEmpty();
+        if ( canBuildBeResumed )
+        {
+            return Optional.of( new BuildResumptionData( resumeFromSelector, projectsToSkip ) );
+        }
+        else
+        {
+            return Optional.empty();
+        }
+                .filter( Objects::nonNull )
-     * @param resumeFromProject The project where the build will be resumed with in the next run.
+     * @param startFromProjectIndex Start looking for projects which can be skipped from a certain index.
-                                                  MavenProject resumeFromProject )
+                                                  int startFromProjectIndex )
-        int resumeFromProjectIndex = allProjects.indexOf( resumeFromProject );
-        List<MavenProject> remainingProjects = allProjects.subList( resumeFromProjectIndex + 1, allProjects.size() );
+        List<MavenProject> remainingProjects = allProjects.subList( startFromProjectIndex, allProjects.size() );

INS26 INS40 INS25 INS60 INS25 INS39 UPD42 MOV32 INS8 INS8 INS39 INS59 INS42 INS8 MOV8 UPD42 UPD66 INS21 INS21 INS21 INS60 MOV60 INS21 INS42 INS27 MOV41 INS7 INS7 INS7 INS74 INS59 INS7 INS32 INS38 INS32 INS42 INS42 INS33 INS42 INS32 INS42 MOV27 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 MOV32 INS42 INS90 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS42 INS42 INS42 INS42 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43