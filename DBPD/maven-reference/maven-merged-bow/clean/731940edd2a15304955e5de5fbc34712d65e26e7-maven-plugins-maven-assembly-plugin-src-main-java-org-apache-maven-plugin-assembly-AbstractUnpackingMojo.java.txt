PR: MNG-940
Submitted by: Dan Tran
Reviewed by:  Brett Porter
use the plexus archiver manager for unpacking and packing to simplify and expose all archivers

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@295006 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.util.IOUtil;
+import org.apache.maven.plugin.MojoExecutionException;
+import org.codehaus.plexus.archiver.ArchiverException;
+import org.codehaus.plexus.archiver.UnArchiver;
+import org.codehaus.plexus.archiver.manager.ArchiverManager;
+import org.codehaus.plexus.archiver.manager.NoSuchArchiverException;
+import org.codehaus.plexus.util.FileUtils;
-import java.io.FileOutputStream;
-import java.util.Enumeration;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
+
+    /**
+     * To look up Archiver/UnArchiver implementations
+     *
+     * @parameter expression="${component.org.codehaus.plexus.archiver.manager.ArchiverManager}"
+     * @required
+     */
+
+    protected ArchiverManager archiverManager;
+
+
-     * @throws IOException
+
-        throws IOException
+        throws MojoExecutionException
-        String fileName = file.getAbsolutePath().toLowerCase().trim();
-        // Should be checking for '.' too?
-        // Not doing this to be consistent with existing code
-        if ( fileName.endsWith( "jar" ) )
+        String archiveExt = FileUtils.getExtension( file.getAbsolutePath() ).toLowerCase();
+
+        this.getLog().info( "Look up archiver type: " + archiveExt );
+
+        UnArchiver unArchiver;
+
+        try
-            unpackJar( file, location );
+            unArchiver = this.archiverManager.getUnArchiver( archiveExt );
-        else if ( fileName.endsWith( "zip" ) )
+        catch ( NoSuchArchiverException e )
-            unpackZip( file, location );
+            throw new MojoExecutionException( "Unknown archive file: " + file );
+        }
+
+        try
+        {
+            unArchiver.setSourceFile( file );
+
+            unArchiver.setDestDirectory( location );
+
+            unArchiver.extract();
+        }
+        catch ( IOException ioe )
+        {
+            throw new MojoExecutionException( "Error unpacking file: " + file + "to: " + location );
+        }
+        catch ( ArchiverException e )
+        {
+            throw new MojoExecutionException( "Error unpacking file: " + file + "to: " + location );
-    /**
-     * Unpacks the Jar file.
-     *
-     * @param file File to be unpack/unjar.
-     * @param tempLocation Location where to put the unpacked files.
-     * @throws IOException
-     */
-    private void unpackJar( File file, File tempLocation )
-        throws IOException
-    {
-        if ( !file.getAbsolutePath().toLowerCase().trim().endsWith( "jar" ) )
-        {
-            getLog().warn( "Trying to unpack a non-jar file " + file.getAbsolutePath() + " - IGNORING" );
-            return;
-        }
-
-        JarFile jar = new JarFile( file );
-        for ( Enumeration e = jar.entries(); e.hasMoreElements(); )
-        {
-            JarEntry entry = (JarEntry) e.nextElement();
-
-            if ( !entry.isDirectory() )
-            {
-                File outFile = new File( tempLocation, entry.getName() );
-                outFile.getParentFile().mkdirs();
-                IOUtil.copy( jar.getInputStream( entry ), new FileOutputStream( outFile ) );
-            }
-        }
-    }
-
-    /**
-     * Unpacks the Zip file.
-     *
-     * @param file Zip file to be unpacked.
-     * @param tempLocation Location where to unpack the files.
-     * @throws IOException
-     */
-    private void unpackZip( File file, File tempLocation )
-        throws IOException
-    {
-        if ( !file.getAbsolutePath().toLowerCase().trim().endsWith( "zip" ) )
-        {
-            getLog().warn( "Trying to unpack a non-zip file " + file.getAbsolutePath() + " - IGNORING" );
-            return;
-        }
-
-        ZipFile zip = new ZipFile( file );
-        for ( Enumeration e = zip.entries(); e.hasMoreElements(); )
-        {
-            ZipEntry entry = (ZipEntry) e.nextElement();
-
-            if ( !entry.isDirectory() )
-            {
-                File outFile = new File( tempLocation, entry.getName() );
-                outFile.getParentFile().mkdirs();
-                IOUtil.copy( zip.getInputStream( entry ), new FileOutputStream( outFile ) );
-            }
-        }
-    }
-
-

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS29 INS83 INS43 INS59 MOV29 INS83 MOV39 UPD42 MOV42 MOV44 MOV44 INS43 INS8 MOV65 UPD65 MOV65 UPD65 MOV65 INS42 INS42 UPD42 MOV42 INS60 MOV21 MOV60 INS54 INS54 UPD66 UPD66 MOV43 INS59 UPD43 INS8 INS12 INS8 INS12 INS12 INS42 INS32 UPD42 UPD42 UPD42 INS21 INS44 INS8 MOV21 MOV21 INS21 INS44 INS8 INS44 INS8 MOV32 MOV42 INS52 UPD45 INS42 INS7 INS43 INS42 INS53 INS32 MOV43 INS42 INS53 INS43 INS42 INS53 UPD42 UPD42 MOV32 INS42 INS32 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS14 INS22 UPD42 MOV42 UPD42 MOV42 UPD43 MOV43 INS27 INS43 INS27 INS43 INS27 INS52 INS42 UPD42 INS45 INS42 UPD42 MOV42 UPD45 MOV45 INS42 UPD45 MOV45 INS42 UPD42 MOV42 INS45 INS42 INS45 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL65 DEL45 DEL42 DEL43 DEL42 DEL14 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL32 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL38 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31