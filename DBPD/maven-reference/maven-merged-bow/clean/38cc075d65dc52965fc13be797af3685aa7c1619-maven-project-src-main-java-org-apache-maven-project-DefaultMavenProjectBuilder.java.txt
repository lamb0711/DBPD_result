Removed default injection of model.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@694022 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.DependencyManagement;
-import java.util.Iterator;
-import java.util.TreeMap;
-            project = interpolateModelAndInjectDefault( project.getModel(), null, null, config );
+            project = interpolateModel( project.getModel(), null, null, config );
-            project = interpolateModelAndInjectDefault( model, projectDescriptor, parentDescriptor, config );
+            project = interpolateModel( model, projectDescriptor, parentDescriptor, config );
-    private MavenProject interpolateModelAndInjectDefault( Model model, File pomFile, File parentFile,
+    private MavenProject interpolateModel( Model model, File pomFile, File parentFile,
-        // interpolation is before injection, because interpolation is off-limits in the injected variables
-        new DefaultModelDefaultsInjector().injectDefaults( model );
-
-
-    private static class DefaultModelDefaultsInjector
-    {
-        public void injectDefaults( Model model )
-        {
-            injectDependencyDefaults( model.getDependencies(), model.getDependencyManagement() );
-            if ( model.getBuild() != null )
-            {
-                injectPluginDefaults( model.getBuild(), model.getBuild().getPluginManagement() );
-            }
-        }
-
-        private static void injectPluginDefaults( Build build, PluginManagement pluginManagement )
-        {
-            if ( pluginManagement == null )
-            {
-                // nothing to inject.
-                return;
-            }
-
-            List buildPlugins = build.getPlugins();
-
-            if ( buildPlugins != null && !buildPlugins.isEmpty() )
-            {
-                Map pmPlugins = pluginManagement.getPluginsAsMap();
-
-                if ( pmPlugins != null && !pmPlugins.isEmpty() )
-                {
-                    for ( Iterator it = buildPlugins.iterator(); it.hasNext(); )
-                    {
-                        Plugin buildPlugin = (Plugin) it.next();
-
-                        Plugin pmPlugin = (Plugin) pmPlugins.get( buildPlugin.getKey() );
-
-                        if ( pmPlugin != null )
-                        {
-                            ModelUtils.mergePluginDefinitions( buildPlugin, pmPlugin, false );
-                        }
-                    }
-                }
-            }
-
-        }
-
-        private static void injectDependencyDefaults( List dependencies, DependencyManagement dependencyManagement )
-        {
-            if ( dependencyManagement != null )
-            {
-                // a given project's dependencies should be smaller than the
-                // group-defined defaults set...
-                // in other words, the project's deps will probably be a subset of
-                // those specified in defaults.
-                Map depsMap = new TreeMap();
-                for ( Iterator it = dependencies.iterator(); it.hasNext(); )
-                {
-                    Dependency dep = (Dependency) it.next();
-                    depsMap.put( dep.getManagementKey(), dep );
-                }
-
-                List managedDependencies = dependencyManagement.getDependencies();
-
-                for ( Iterator it = managedDependencies.iterator(); it.hasNext(); )
-                {
-                    Dependency def = (Dependency) it.next();
-                    String key = def.getManagementKey();
-
-                    Dependency dep = (Dependency) depsMap.get( key );
-                    if ( dep != null )
-                    {
-                        mergeDependencyWithDefaults( dep, def );
-                    }
-                }
-            }
-        }
-
-        private static void mergeDependencyWithDefaults( Dependency dep, Dependency def )
-        {
-            if ( dep.getScope() == null && def.getScope() != null )
-            {
-                dep.setScope( def.getScope() );
-                dep.setSystemPath( def.getSystemPath() );
-            }
-
-            if ( dep.getVersion() == null && def.getVersion() != null )
-            {
-                dep.setVersion( def.getVersion() );
-            }
-
-            if ( dep.getClassifier() == null && def.getClassifier() != null )
-            {
-                dep.setClassifier( def.getClassifier() );
-            }
-
-            if ( dep.getType() == null && def.getType() != null )
-            {
-                dep.setType( def.getType() );
-            }
-
-            List exclusions = dep.getExclusions();
-            if ( exclusions == null || exclusions.isEmpty() )
-            {
-                dep.setExclusions( def.getExclusions() );
-            }
-        }
-    }

UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL21 DEL83 DEL83 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL55