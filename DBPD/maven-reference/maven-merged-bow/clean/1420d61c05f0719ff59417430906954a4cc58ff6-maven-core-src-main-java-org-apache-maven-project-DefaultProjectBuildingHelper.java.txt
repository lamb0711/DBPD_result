MNG-5742 fixed duplicate plugin realms when extensions=true

Consolidated plugin realm setup logic in DefaultMavenPluginManager.
Extensions realm is fully setup during project loading and the same
realm is used to both load extensions and execute plugin goals now.

Signed-off-by: Igor Fedorenko <ifedorenko@apache.org>

-import java.io.IOException;
+import org.apache.maven.RepositoryUtils;
+import org.apache.maven.artifact.Artifact;
-import org.apache.maven.execution.scope.internal.MojoExecutionScopeModule;
-import org.apache.maven.plugin.PluginArtifactsCache;
+import org.apache.maven.plugin.MavenPluginManager;
+import org.apache.maven.plugin.PluginManagerException;
-import org.apache.maven.plugin.internal.PluginDependenciesResolver;
-import org.apache.maven.plugin.version.DefaultPluginVersionRequest;
-import org.apache.maven.plugin.version.PluginVersionRequest;
-import org.apache.maven.plugin.version.PluginVersionResolver;
-import org.apache.maven.session.scope.internal.SessionScopeModule;
-import org.codehaus.plexus.DefaultPlexusContainer;
-import org.eclipse.aether.artifact.Artifact;
-import org.eclipse.aether.graph.DependencyNode;
-import org.eclipse.aether.repository.RemoteRepository;
-import org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;
-    private PluginArtifactsCache pluginArtifactsCache;
-
-    @Requirement
-    private ExtensionRealmCache extensionRealmCache;
-
-    @Requirement
-    private PluginVersionResolver pluginVersionResolver;
-
-    @Requirement
-    private PluginDependenciesResolver pluginDependenciesResolver;
-
-    private ExtensionDescriptorBuilder extensionDescriptorBuilder = new ExtensionDescriptorBuilder();
+    private MavenPluginManager pluginManager;
-        throws PluginResolutionException, PluginVersionResolutionException
+        throws PluginResolutionException, PluginVersionResolutionException, PluginManagerException
-            if ( plugin.getVersion() == null )
-            {
-                PluginVersionRequest versionRequest =
-                    new DefaultPluginVersionRequest( plugin, request.getRepositorySession(),
-                                                     project.getRemotePluginRepositories() );
-                plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );
-            }
+            ExtensionRealmCache.CacheRecord recordRealm =
+                pluginManager.setupExtensionsRealm( project, plugin, request.getRepositorySession() );
-            List<Artifact> artifacts;
-
-            PluginArtifactsCache.Key cacheKey =
-                pluginArtifactsCache.createKey( plugin, null, project.getRemotePluginRepositories(),
-                                                request.getRepositorySession() );
-
-            PluginArtifactsCache.CacheRecord recordArtifacts = pluginArtifactsCache.get( cacheKey );
-
-            if ( recordArtifacts != null )
-            {
-                artifacts = recordArtifacts.artifacts;
-            }
-            else
-            {
-                try
-                {
-                    artifacts = resolveExtensionArtifacts( plugin, project.getRemotePluginRepositories(), request );
-
-                    recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );
-                }
-                catch ( PluginResolutionException e )
-                {
-                    pluginArtifactsCache.put( cacheKey, e );
-
-                    pluginArtifactsCache.register( project, cacheKey, recordArtifacts );
-
-                    throw e;
-                }
-            }
-
-            pluginArtifactsCache.register( project, cacheKey, recordArtifacts );
-
-            ClassRealm extensionRealm;
-            ExtensionDescriptor extensionDescriptor = null;
-
-            final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey( artifacts );
-
-            ExtensionRealmCache.CacheRecord recordRealm = extensionRealmCache.get( extensionKey );
-
-            if ( recordRealm != null )
-            {
-                extensionRealm = recordRealm.realm;
-                extensionDescriptor = recordRealm.desciptor;
-            }
-            else
-            {
-                extensionRealm = classRealmManager.createExtensionRealm( plugin, artifacts );
-
-                try
-                {
-                    ( (DefaultPlexusContainer) container ).discoverComponents( extensionRealm,
-                                                                               new SessionScopeModule( container ),
-                                                                               new MojoExecutionScopeModule( container ) );
-                }
-                catch ( Exception e )
-                {
-                    throw new IllegalStateException( "Failed to discover components in extension realm "
-                        + extensionRealm.getId(), e );
-                }
-
-                Artifact extensionArtifact = artifacts.get( 0 );
-                try
-                {
-                    extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );
-                }
-                catch ( IOException e )
-                {
-                    String message = "Invalid extension descriptor for " + plugin.getId() + ": " + e.getMessage();
-                    if ( logger.isDebugEnabled() )
-                    {
-                        logger.error( message, e );
-                    }
-                    else
-                    {
-                        logger.error( message );
-                    }
-                }
-
-                recordRealm = extensionRealmCache.put( extensionKey, extensionRealm, extensionDescriptor );
-            }
-
-            extensionRealmCache.register( project, extensionKey, recordRealm );
+            final ClassRealm extensionRealm = recordRealm.realm;
+            final ExtensionDescriptor extensionDescriptor = recordRealm.desciptor;
+            final List<Artifact> artifacts = recordRealm.artifacts;
-            projectRealm = classRealmManager.createProjectRealm( model, publicArtifacts );
+            projectRealm = classRealmManager.createProjectRealm( model, toAetherArtifacts( publicArtifacts ) );
-    private List<Artifact> resolveExtensionArtifacts( Plugin extensionPlugin, List<RemoteRepository> repositories,
-                                                      ProjectBuildingRequest request )
-        throws PluginResolutionException
-    {
-        DependencyNode root =
-            pluginDependenciesResolver.resolve( extensionPlugin, null, null, repositories,
-                                                request.getRepositorySession() );
-
-        PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();
-        root.accept( nlg );
-        return nlg.getArtifacts( false );
-    }
-
+    private List<org.eclipse.aether.artifact.Artifact> toAetherArtifacts( final List<Artifact> pluginArtifacts )
+    {
+        return new ArrayList<org.eclipse.aether.artifact.Artifact>( RepositoryUtils.toArtifacts( pluginArtifacts ) );
+    }
+

MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 MOV78 UPD43 INS43 UPD74 MOV74 UPD42 UPD42 UPD42 INS42 UPD43 INS83 MOV74 INS42 INS41 MOV60 INS40 INS14 INS60 INS74 INS32 MOV43 INS83 MOV83 MOV43 INS59 INS83 INS43 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 INS42 INS40 INS40 UPD42 MOV42 INS40 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL78 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL40 DEL43 DEL42 DEL33 DEL32 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL33 DEL33 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL41