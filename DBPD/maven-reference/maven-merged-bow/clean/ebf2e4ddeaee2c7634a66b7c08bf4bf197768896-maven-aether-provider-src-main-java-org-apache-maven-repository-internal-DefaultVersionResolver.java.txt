Merge branch 'eclipse-aether' of github.com:tesla/tesla-build into eclipse-aether

Conflicts:
	.gitignore
	pom.xml

+import java.io.FileInputStream;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
+import org.codehaus.plexus.util.IOUtil;
-import org.sonatype.aether.RepositoryCache;
-import org.sonatype.aether.RepositoryEvent.EventType;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.RequestTrace;
-import org.sonatype.aether.SyncContext;
-import org.sonatype.aether.artifact.Artifact;
-import org.sonatype.aether.impl.MetadataResolver;
-import org.sonatype.aether.impl.RepositoryEventDispatcher;
-import org.sonatype.aether.impl.SyncContextFactory;
-import org.sonatype.aether.impl.VersionResolver;
-import org.sonatype.aether.impl.internal.CacheUtils;
-import org.sonatype.aether.metadata.Metadata;
-import org.sonatype.aether.repository.ArtifactRepository;
-import org.sonatype.aether.repository.LocalRepository;
-import org.sonatype.aether.repository.RemoteRepository;
-import org.sonatype.aether.repository.WorkspaceReader;
-import org.sonatype.aether.repository.WorkspaceRepository;
-import org.sonatype.aether.resolution.MetadataRequest;
-import org.sonatype.aether.resolution.MetadataResult;
-import org.sonatype.aether.resolution.VersionRequest;
-import org.sonatype.aether.resolution.VersionResolutionException;
-import org.sonatype.aether.resolution.VersionResult;
-import org.sonatype.aether.spi.locator.Service;
-import org.sonatype.aether.spi.locator.ServiceLocator;
-import org.sonatype.aether.spi.log.Logger;
-import org.sonatype.aether.spi.log.NullLogger;
-import org.sonatype.aether.util.ConfigUtils;
-import org.sonatype.aether.util.DefaultRequestTrace;
-import org.sonatype.aether.util.listener.DefaultRepositoryEvent;
-import org.sonatype.aether.util.metadata.DefaultMetadata;
+import org.eclipse.aether.RepositoryCache;
+import org.eclipse.aether.RepositoryEvent.EventType;
+import org.eclipse.aether.RepositoryEvent;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.RequestTrace;
+import org.eclipse.aether.SyncContext;
+import org.eclipse.aether.artifact.Artifact;
+import org.eclipse.aether.impl.MetadataResolver;
+import org.eclipse.aether.impl.RepositoryEventDispatcher;
+import org.eclipse.aether.impl.SyncContextFactory;
+import org.eclipse.aether.impl.VersionResolver;
+import org.eclipse.aether.internal.impl.CacheUtils;
+import org.eclipse.aether.metadata.DefaultMetadata;
+import org.eclipse.aether.metadata.Metadata;
+import org.eclipse.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.LocalRepository;
+import org.eclipse.aether.repository.RemoteRepository;
+import org.eclipse.aether.repository.WorkspaceReader;
+import org.eclipse.aether.repository.WorkspaceRepository;
+import org.eclipse.aether.resolution.MetadataRequest;
+import org.eclipse.aether.resolution.MetadataResult;
+import org.eclipse.aether.resolution.VersionRequest;
+import org.eclipse.aether.resolution.VersionResolutionException;
+import org.eclipse.aether.resolution.VersionResult;
+import org.eclipse.aether.spi.locator.Service;
+import org.eclipse.aether.spi.locator.ServiceLocator;
+import org.eclipse.aether.spi.log.Logger;
+import org.eclipse.aether.spi.log.LoggerFactory;
+import org.eclipse.aether.spi.log.NullLoggerFactory;
+import org.eclipse.aether.util.ConfigUtils;
- * Maven meta-version resolver: supports <code>*-SNAPSHOT</code>, <code>RELEASE</code> and <code>LATEST</code>
- * meta-version resolution from
- * <a href="../maven-repository-metadata/repository-metadata.html#class_versioning"><code>versioning</code>
- * element in repositories' <code>maven-metadata.xml</code></a>.
- * 
- * @see Versioning
+@Named
+    private static final String MAVEN_METADATA_XML = "maven-metadata.xml";
+
-    @Requirement
-    private Logger logger = NullLogger.INSTANCE;
+    @SuppressWarnings( "unused" )
+    @Requirement( role = LoggerFactory.class )
+    private Logger logger = NullLoggerFactory.LOGGER;
+    public DefaultVersionResolver()
+    {
+        // enable no-arg constructor
+    }
+
+    @Inject
+    DefaultVersionResolver( MetadataResolver metadataResolver, SyncContextFactory syncContextFactory,
+                            RepositoryEventDispatcher repositoryEventDispatcher, LoggerFactory loggerFactory )
+    {
+        setMetadataResolver( metadataResolver );
+        setSyncContextFactory( syncContextFactory );
+        setLoggerFactory( loggerFactory );
+        setRepositoryEventDispatcher( repositoryEventDispatcher );
+    }
+
-        setLogger( locator.getService( Logger.class ) );
+        setLoggerFactory( locator.getService( LoggerFactory.class ) );
-    public DefaultVersionResolver setLogger( Logger logger )
+    public DefaultVersionResolver setLoggerFactory( LoggerFactory loggerFactory )
-        this.logger = ( logger != null ) ? logger : NullLogger.INSTANCE;
+        this.logger = NullLoggerFactory.getSafeLogger( loggerFactory, getClass() );
+    void setLogger( LoggerFactory loggerFactory )
+    {
+        // plexus support
+        setLoggerFactory( loggerFactory );
+    }
+
+        RequestTrace trace = RequestTrace.newChild( request.getTrace(), request );
+
-
+        Metadata metadata;
+
-            Map<String, VersionInfo> infos = readVersionInfoMap( session, result, Metadata.Nature.RELEASE, null );
-
-            resolve( result, infos, RELEASE );
+            metadata =
+                new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
+                                     Metadata.Nature.RELEASE );
-            Map<String, VersionInfo> infos =
-                readVersionInfoMap( session, result, Metadata.Nature.RELEASE_OR_SNAPSHOT, null );
-
-            if ( !resolve( result, infos, LATEST ) )
-            {
-                resolve( result, infos, RELEASE );
-            }
-
-            if ( result.getVersion() != null && result.getVersion().endsWith( SNAPSHOT ) )
-            {
-                VersionRequest subRequest = new VersionRequest();
-                subRequest.setArtifact( artifact.setVersion( result.getVersion() ) );
-                if ( result.getRepository() instanceof RemoteRepository )
-                {
-                    subRequest.setRepositories( Collections.singletonList( (RemoteRepository) result.getRepository() ) );
-                }
-                else
-                {
-                    subRequest.setRepositories( request.getRepositories() );
-                }
-                VersionResult subResult = resolveVersion( session, subRequest );
-                result.setVersion( subResult.getVersion() );
-                result.setRepository( subResult.getRepository() );
-                for ( Exception exception : subResult.getExceptions() )
-                {
-                    result.addException( exception );
-                }
-            }
+            metadata =
+                new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
+                                     Metadata.Nature.RELEASE_OR_SNAPSHOT );
-                result.setVersion( version );
+                metadata = null;
-
-                return result;
-                Map<String, VersionInfo> infos =
-                                readVersionInfoMap( session, result, Metadata.Nature.SNAPSHOT, version );
+                metadata =
+                    new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), version, MAVEN_METADATA_XML,
+                                         Metadata.Nature.SNAPSHOT );
+            }
+        }
+        else
+        {
+            metadata = null;
+        }
+        if ( metadata == null )
+        {
+            result.setVersion( version );
+        }
+        else
+        {
+            List<MetadataRequest> metadataRequests = new ArrayList<MetadataRequest>( request.getRepositories().size() );
+
+            metadataRequests.add( new MetadataRequest( metadata, null, request.getRequestContext() ) );
+
+            for ( RemoteRepository repository : request.getRepositories() )
+            {
+                MetadataRequest metadataRequest =
+                    new MetadataRequest( metadata, repository, request.getRequestContext() );
+                metadataRequest.setDeleteLocalCopyIfMissing( true );
+                metadataRequest.setFavorLocalRepository( true );
+                metadataRequest.setTrace( trace );
+                metadataRequests.add( metadataRequest );
+            }
+
+            List<MetadataResult> metadataResults = metadataResolver.resolveMetadata( session, metadataRequests );
+
+            Map<String, VersionInfo> infos = new HashMap<String, VersionInfo>();
+
+            for ( MetadataResult metadataResult : metadataResults )
+            {
+                result.addException( metadataResult.getException() );
+
+                ArtifactRepository repository = metadataResult.getRequest().getRepository();
+                if ( repository == null )
+                {
+                    repository = session.getLocalRepository();
+                }
+
+                Versioning versioning = readVersions( session, trace, metadataResult.getMetadata(), repository, result );
+                merge( artifact, infos, versioning, repository );
+            }
+
+            if ( RELEASE.equals( version ) )
+            {
+                resolve( result, infos, RELEASE );
+            }
+            else if ( LATEST.equals( version ) )
+            {
+                if ( !resolve( result, infos, LATEST ) )
+                {
+                    resolve( result, infos, RELEASE );
+                }
+
+                if ( result.getVersion() != null && result.getVersion().endsWith( SNAPSHOT ) )
+                {
+                    VersionRequest subRequest = new VersionRequest();
+                    subRequest.setArtifact( artifact.setVersion( result.getVersion() ) );
+                    if ( result.getRepository() instanceof RemoteRepository )
+                    {
+                        subRequest.setRepositories( Collections.singletonList( (RemoteRepository) result.getRepository() ) );
+                    }
+                    else
+                    {
+                        subRequest.setRepositories( request.getRepositories() );
+                    }
+                    VersionResult subResult = resolveVersion( session, subRequest );
+                    result.setVersion( subResult.getVersion() );
+                    result.setRepository( subResult.getRepository() );
+                    for ( Exception exception : subResult.getExceptions() )
+                    {
+                        result.addException( exception );
+                    }
+                }
+            }
+            else
+            {
-
-
-        }
-        else
-        {
-            result.setVersion( version );
-            return result;
+            if ( StringUtils.isEmpty( result.getVersion() ) )
+            {
+                throw new VersionResolutionException( result );
+            }
-        if ( StringUtils.isEmpty( result.getVersion() ) )
-        {
-            throw new VersionResolutionException( result );
-        }
-
-        if ( cacheKey != null && isSafelyCacheable( session, artifact ) )
+        if ( cacheKey != null && metadata != null && isSafelyCacheable( session, artifact ) )
-    private Map<String, VersionInfo> readVersionInfoMap( RepositorySystemSession session, VersionResult result,
-                                                         Metadata.Nature nature, String version )
-    {
-        VersionRequest request = result.getRequest();
-        Artifact artifact = request.getArtifact();
-
-        Metadata metadata =
-            new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), version,
-                                 MavenMetadata.MAVEN_METADATA_XML, nature );
-
-        RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
-
-        List<MetadataRequest> metadataRequests = new ArrayList<MetadataRequest>( request.getRepositories().size() + 1 );
-
-        metadataRequests.add( new MetadataRequest( metadata, null, request.getRequestContext() ) );
-
-        for ( RemoteRepository repository : request.getRepositories() )
-        {
-            MetadataRequest metadataRequest = new MetadataRequest( metadata, repository, request.getRequestContext() );
-            metadataRequest.setDeleteLocalCopyIfMissing( true );
-            metadataRequest.setFavorLocalRepository( true );
-            metadataRequest.setTrace( trace );
-
-            metadataRequests.add( metadataRequest );
-        }
-
-        List<MetadataResult> metadataResults = metadataResolver.resolveMetadata( session, metadataRequests );
-
-        Map<String, VersionInfo> infos = new HashMap<String, VersionInfo>();
-
-        for ( MetadataResult metadataResult : metadataResults )
-        {
-            result.addException( metadataResult.getException() );
-
-            ArtifactRepository repository = metadataResult.getRequest().getRepository();
-            if ( repository == null )
-            {
-                repository = session.getLocalRepository();
-            }
-
-            Versioning versioning = readVersions( session, trace, metadataResult.getMetadata(), repository, result );
-
-            merge( request.getArtifact(), infos, versioning, repository );
-        }
-
-        return infos;
-    }
-
-
-        if ( metadata == null )
-        {
-            return new Versioning();
-        }
-
-        SyncContext syncContext = syncContextFactory.newInstance( session, true );
-
+        FileInputStream fis = null;
-            syncContext.acquire( null, Collections.singleton( metadata ) );
-
-            versioning = MavenMetadata.read( metadata.getFile() ).getVersioning();
-
-            /*
-             * NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
-             * of the local repository. This is especially troublesome during snapshot resolution so we try
-             * to handle that gracefully.
-             */
-            if ( versioning != null && repository instanceof LocalRepository )
+            if ( metadata != null )
-                Snapshot snapshot = versioning.getSnapshot();
-                if ( snapshot != null && snapshot.getBuildNumber() > 0 )
+                SyncContext syncContext = syncContextFactory.newInstance( session, true );
+
+                try
-                    Versioning repaired = new Versioning();
-                    repaired.setLastUpdated( versioning.getLastUpdated() );
-                    snapshot = new Snapshot();
-                    snapshot.setLocalCopy( true );
-                    repaired.setSnapshot( snapshot );
+                    syncContext.acquire( null, Collections.singleton( metadata ) );
-                    versioning = repaired;
+                    if ( metadata.getFile() != null && metadata.getFile().exists() )
+                    {
+                        fis = new FileInputStream( metadata.getFile() );
+                        org.apache.maven.artifact.repository.metadata.Metadata m =
+                            new MetadataXpp3Reader().read( fis, false );
+                        versioning = m.getVersioning();
-                    throw new IOException( "Snapshot information corrupted with remote repository data"
-                        + ", please verify that no remote repository uses the id '" + repository.getId()
-                        + "'" );
+                        /*
+                         * NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata
+                         * of the local repository. This is especially troublesome during snapshot resolution so we try
+                         * to handle that gracefully.
+                         */
+                        if ( versioning != null && repository instanceof LocalRepository )
+                        {
+                            if ( versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0 )
+                            {
+                                Versioning repaired = new Versioning();
+                                repaired.setLastUpdated( versioning.getLastUpdated() );
+                                Snapshot snapshot = new Snapshot();
+                                snapshot.setLocalCopy( true );
+                                repaired.setSnapshot( snapshot );
+                                versioning = repaired;
+
+                                throw new IOException( "Snapshot information corrupted with remote repository data"
+                                    + ", please verify that no remote repository uses the id '" + repository.getId()
+                                    + "'" );
+                            }
+                        }
+                    }
+                }
+                finally
+                {
+                    syncContext.close();
-            syncContext.release();
+            IOUtil.close( fis );
-        DefaultRepositoryEvent event = new DefaultRepositoryEvent( EventType.METADATA_INVALID, session, trace );
+        RepositoryEvent.Builder event = new RepositoryEvent.Builder( session, EventType.METADATA_INVALID );
+        event.setTrace( trace );
-        repositoryEventDispatcher.dispatch( event );
+        repositoryEventDispatcher.dispatch( event.build() );
-}
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS29 INS78 INS23 INS31 INS31 INS31 INS31 MOV65 INS42 INS83 INS83 MOV43 INS79 INS77 INS83 MOV43 INS59 UPD83 MOV83 INS42 INS8 INS78 INS42 MOV44 MOV44 MOV44 INS44 INS8 INS83 MOV43 INS42 INS44 INS8 INS39 INS42 INS44 INS8 UPD42 INS45 INS42 INS45 INS42 INS80 INS42 INS40 INS42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 MOV43 UPD42 MOV42 MOV21 MOV21 MOV21 MOV21 UPD43 MOV43 UPD42 MOV42 MOV21 MOV41 INS43 INS42 MOV21 INS60 INS60 INS25 INS25 INS60 INS60 INS21 INS42 INS57 UPD42 UPD42 UPD42 UPD42 UPD42 INS7 UPD42 MOV42 INS32 MOV43 INS59 MOV43 INS59 INS32 INS8 INS25 MOV27 INS8 INS8 INS43 INS59 INS8 INS8 UPD43 MOV43 INS59 INS32 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV22 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS32 INS8 INS25 MOV21 INS60 MOV21 MOV70 MOV60 MOV60 INS70 MOV25 MOV25 INS27 UPD42 MOV42 INS42 INS33 INS25 INS21 INS40 MOV42 INS14 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 MOV32 INS42 INS7 INS42 INS42 INS42 INS21 MOV32 INS8 INS8 MOV74 INS59 MOV44 INS42 INS8 MOV27 INS27 INS27 INS8 INS32 UPD43 MOV43 INS42 MOV40 MOV42 INS42 UPD43 UPD42 MOV42 INS42 INS14 INS7 MOV60 INS25 INS21 INS42 INS14 INS43 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS21 MOV60 MOV25 MOV60 INS21 MOV8 INS42 INS33 INS42 INS33 MOV60 INS54 INS42 INS42 INS42 INS40 UPD42 INS43 INS32 INS32 INS42 INS40 INS42 INS14 MOV27 MOV8 INS8 INS7 MOV74 MOV32 INS42 INS32 INS32 INS32 INS32 INS42 MOV32 INS32 MOV8 MOV8 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS40 INS21 INS21 INS42 INS33 INS42 INS42 MOV9 INS42 INS42 MOV9 MOV42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 MOV7 INS27 INS8 INS42 INS33 INS42 INS14 INS27 INS32 INS21 INS60 MOV21 MOV25 UPD42 MOV43 MOV32 MOV32 INS42 INS42 INS40 INS42 INS42 INS32 INS33 INS32 INS42 INS7 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS32 INS43 MOV32 INS14 INS42 INS42 INS9 UPD42 MOV42 INS42 INS43 INS60 INS42 MOV32 MOV43 INS59 INS32 INS42 MOV14 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL78 DEL40 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL36 DEL42 DEL40 DEL16 DEL7 DEL21 DEL8 DEL31 DEL42 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL40 DEL33 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL40 DEL33 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL43 DEL14 DEL41 DEL8 DEL25 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60