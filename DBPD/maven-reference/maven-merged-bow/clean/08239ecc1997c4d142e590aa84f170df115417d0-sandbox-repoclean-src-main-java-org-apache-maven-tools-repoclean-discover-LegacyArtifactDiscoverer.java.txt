- put back to model.v3_0_0 and generate a new JAR from maven-model (M 1.1's version includes a v3 under the o.a.m.model directory as well as o.a.m.project)
- update to 2.0-beta-1 JARs and resulting cleanup
- don't copy snapshots by default

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@226756 13f79535-47bb-0310-9956-ffa450edef68

-                                  PathLister excludeLister, PathLister kickoutLister )
+                                   PathLister excludeLister, PathLister kickoutLister, boolean includeSnapshots )
-                artifacts.add( artifact );
+                if ( includeSnapshots || !artifact.isSnapshot() )
+                {
+                    artifacts.add( artifact );
+                }
-            String validVersionParts = "([Dd][Ee][Vv][_.0-9]*)|" + "([Ss][Nn][Aa][Pp][Ss][Hh][Oo][Tt])|"
-                + "([0-9][_.0-9a-zA-Z]*)|" + "([Gg]?[_.0-9ab]*([Pp][Rr][Ee]|[Rr][Cc]|[Gg]|[Mm])[_.0-9]*)|"
-                + "([Aa][Ll][Pp][Hh][Aa][_.0-9]*)|" + "([Bb][Ee][Tt][Aa][_.0-9]*)|" + "([Rr][Cc][_.0-9]*)|"
-                + "([Tt][Ee][Ss][Tt][_.0-9]*)|" + "([Dd][Ee][Bb][Uu][Gg][_.0-9]*)|"
-                + "([Uu][Nn][Oo][Ff][Ff][Ii][Cc][Ii][Aa][Ll][_.0-9]*)|" + "([Cc][Uu][Rr][Rr][Ee][Nn][Tt])|"
-                + "([Ll][Aa][Tt][Ee][Ss][Tt])|" + "([Ff][Cc][Ss])|" + "([Rr][Ee][Ll][Ee][Aa][Ss][Ee][_.0-9]*)|"
-                + "([Nn][Ii][Gg][Hh][Tt][Ll][Yy])|" + "([AaBb][_.0-9]*)";
+            String validVersionParts = "([Dd][Ee][Vv][_.0-9]*)|" + "([Ss][Nn][Aa][Pp][Ss][Hh][Oo][Tt])|" +
+                "([0-9][_.0-9a-zA-Z]*)|" + "([Gg]?[_.0-9ab]*([Pp][Rr][Ee]|[Rr][Cc]|[Gg]|[Mm])[_.0-9]*)|" +
+                "([Aa][Ll][Pp][Hh][Aa][_.0-9]*)|" + "([Bb][Ee][Tt][Aa][_.0-9]*)|" + "([Rr][Cc][_.0-9]*)|" +
+                "([Tt][Ee][Ss][Tt][_.0-9]*)|" + "([Dd][Ee][Bb][Uu][Gg][_.0-9]*)|" +
+                "([Uu][Nn][Oo][Ff][Ff][Ii][Cc][Ii][Aa][Ll][_.0-9]*)|" + "([Cc][Uu][Rr][Rr][Ee][Nn][Tt])|" +
+                "([Ll][Aa][Tt][Ee][Ss][Tt])|" + "([Ff][Cc][Ss])|" + "([Rr][Ee][Ll][Ee][Aa][Ss][Ee][_.0-9]*)|" +
+                "([Nn][Ii][Gg][Hh][Tt][Ll][Yy])|" + "([AaBb][_.0-9]*)";
-                StringBuffer bufferToUpdate = null;
+                StringBuffer bufferToUpdate;
-            getLogger().debug(
-                               "After parsing loop, state of buffers:\no  Version Buffer: \'" + versionBuffer
-                                   + "\'\no  Classifier Buffer: \'" + classifierBuffer
-                                   + "\'\no Number of Tokens Iterated: " + tokensIterated );
+            getLogger().debug( "After parsing loop, state of buffers:\no  Version Buffer: \'" + versionBuffer +
+                "\'\no  Classifier Buffer: \'" + classifierBuffer + "\'\no Number of Tokens Iterated: " +
+                tokensIterated );
-                               "Before repairing bad version and/or cleaning up used tokens, avce token list is:\n"
-                                   + avceTokenList );
+                "Before repairing bad version and/or cleaning up used tokens, avce token list is:\n" + avceTokenList );
-                                       "artifact-version-classifier-extension remaining tokens is: \'" + avceTokenList
-                                           + "\'" );
+                        "artifact-version-classifier-extension remaining tokens is: \'" + avceTokenList + "\'" );
-                avceTokenList = new LinkedList( avceTokenList.subList( 0, avceTokenList.size() - ( tokensIterated ) ) );
+                avceTokenList = new LinkedList( avceTokenList.subList( 0, avceTokenList.size() - tokensIterated ) );
-            getLogger().debug(
-                               "Extracted artifact information from path:\n" + "groupId: \'" + groupId + "\'\n"
-                                   + "artifactId: \'" + artifactId + "\'\n" + "type: \'" + type + "\'\n"
-                                   + "version: \'" + version + "\'\n" + "classifier: \'" + classifierBuffer.toString()
-                                   + "\'" );
+            getLogger().debug( "Extracted artifact information from path:\n" + "groupId: \'" + groupId + "\'\n" +
+                "artifactId: \'" + artifactId + "\'\n" + "type: \'" + type + "\'\n" + "version: \'" + version + "\'\n" +
+                "classifier: \'" + classifierBuffer + "\'" );
-                                                                       Artifact.SCOPE_RUNTIME, type, classifierBuffer
-                                                                           .toString() );
+                                                                       Artifact.SCOPE_RUNTIME, type,
+                                                                       classifierBuffer.toString() );
-                if ( StringUtils.isNotEmpty( groupId ) && StringUtils.isNotEmpty( artifactId )
-                    && StringUtils.isNotEmpty( version ) && StringUtils.isNotEmpty( type ) )
+                if ( StringUtils.isNotEmpty( groupId ) && StringUtils.isNotEmpty( artifactId ) &&
+                    StringUtils.isNotEmpty( version ) && StringUtils.isNotEmpty( type ) )
-                    result = artifactFactory
-                        .createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME, type );
+                    result = artifactFactory.createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME,
+                                                             type );

INS44 INS39 INS42 INS8 INS25 INS27 MOV8 INS42 INS42 INS38 INS32 INS42 INS42 INS42 DEL33 DEL42 DEL36 DEL42 DEL42 DEL32