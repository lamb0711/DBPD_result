Adding system scope...uses scope == 'system' and systemPath in dependency. SystemPath was chosen over mappings inside the setings.xml for scalability, heritability, and injectability (via managed deps).



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@264960 13f79535-47bb-0310-9956-ffa450edef68

-        // skip artifacts with a file - they are already resolved
-        if ( artifact != null && artifact.getFile() == null )
+        if ( artifact != null )
-            // ----------------------------------------------------------------------
-            // Check for the existence of the artifact in the specified local
-            // ArtifactRepository. If it is present then simply return as the
-            // request for resolution has been satisfied.
-            // ----------------------------------------------------------------------
-
-            String localPath = localRepository.pathOf( artifact );
-
-            artifact.setFile( new File( localRepository.getBasedir(), localPath ) );
-
-            try
+            if ( Artifact.SCOPE_SYSTEM.equals( artifact.getScope() ) )
-                transformationManager.transformForResolve( artifact, remoteRepositories, localRepository );
+                File systemFile = artifact.getFile();
+
+                if ( !systemFile.exists() )
+                {
+                    throw new ArtifactResolutionException( "System artifact: " + artifact.getId()
+                        + " not found in path: " + systemFile, artifact );
+                }
+                else
+                {
+                    artifact.setResolved( true );
+                }
-            catch ( ArtifactMetadataRetrievalException e )
+            // skip artifacts with a file - they are already resolved
+            else if ( artifact.getFile() == null )
-                throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
-            }
+                // ----------------------------------------------------------------------
+                // Check for the existence of the artifact in the specified local
+                // ArtifactRepository. If it is present then simply return as the
+                // request for resolution has been satisfied.
+                // ----------------------------------------------------------------------
-            File destination = artifact.getFile();
-            if ( !destination.exists() || force )
-            {
+                String localPath = localRepository.pathOf( artifact );
+
+                artifact.setFile( new File( localRepository.getBasedir(), localPath ) );
+
-                    if ( artifact.getRepository() != null )
-                    {
-                        // the transformations discovered the artifact - so use it exclusively
-                        wagonManager.getArtifact( artifact, artifact.getRepository() );
-                    }
-                    else
-                    {
-                        wagonManager.getArtifact( artifact, remoteRepositories );
-                    }
-
-                    if ( !artifact.isResolved() )
-                    {
-                        throw new ArtifactResolutionException(
-                            "Failed to resolve artifact, possibly due to a repository list that is not appropriately equipped for this artifact's metadata.",
-                            artifact, remoteRepositories );
-                    }
-
-                    // must be after the artifact is downloaded
-                    for ( Iterator i = artifact.getMetadataList().iterator(); i.hasNext(); )
-                    {
-                        ArtifactMetadata metadata = (ArtifactMetadata) i.next();
-                        metadata.storeInLocalRepository( localRepository );
-                    }
-                }
-                catch ( ResourceDoesNotExistException e )
-                {
-                    throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
-                }
-                catch ( TransferFailedException e )
-                {
-                    throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                    transformationManager.transformForResolve( artifact, remoteRepositories, localRepository );
-            }
-            else if ( destination.exists() )
-            {
-                // locally resolved...no need to hit the remote repo.
-                artifact.setResolved( true );
+
+                File destination = artifact.getFile();
+                if ( !destination.exists() || force )
+                {
+                    try
+                    {
+                        if ( artifact.getRepository() != null )
+                        {
+                            // the transformations discovered the artifact - so use it exclusively
+                            wagonManager.getArtifact( artifact, artifact.getRepository() );
+                        }
+                        else
+                        {
+                            wagonManager.getArtifact( artifact, remoteRepositories );
+                        }
+
+                        if ( !artifact.isResolved() )
+                        {
+                            throw new ArtifactResolutionException(
+                                                                   "Failed to resolve artifact, possibly due to a repository list that is not appropriately equipped for this artifact's metadata.",
+                                                                   artifact, remoteRepositories );
+                        }
+
+                        // must be after the artifact is downloaded
+                        for ( Iterator i = artifact.getMetadataList().iterator(); i.hasNext(); )
+                        {
+                            ArtifactMetadata metadata = (ArtifactMetadata) i.next();
+                            metadata.storeInLocalRepository( localRepository );
+                        }
+                    }
+                    catch ( ResourceDoesNotExistException e )
+                    {
+                        throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                    }
+                    catch ( TransferFailedException e )
+                    {
+                        throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                    }
+                    catch ( ArtifactMetadataRetrievalException e )
+                    {
+                        throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                    }
+                }
+                else if ( destination.exists() )
+                {
+                    // locally resolved...no need to hit the remote repo.
+                    artifact.setResolved( true );
+                }

INS25 MOV27 INS8 INS25 INS32 INS8 MOV25 INS40 INS42 INS32 INS60 INS25 MOV27 INS42 INS42 INS43 INS59 INS38 INS8 INS8 INS42 INS42 INS32 INS32 INS53 INS21 INS42 INS42 INS42 INS42 INS14 INS32 INS43 INS27 INS42 INS42 INS42 INS9 INS42 INS45 INS32 INS45 INS42 INS42 INS42 DEL27