don't die if a license URL is not defined

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@343969 13f79535-47bb-0310-9956-ffa450edef68

-                String licenseContent = null;
-
-                URL licenseUrl = null;
-                UrlValidator urlValidator = new UrlValidator( UrlValidator.ALLOW_ALL_SCHEMES );
-                // UrlValidator does not accept file URLs because the file
-                // URLs do not contain a valid authority (no hostname).
-                // As a workaround accept license URLs that start with the 
-                // file scheme.
-                if ( urlValidator.isValid( url ) || url.startsWith( "file://" ) )
-                {
-                    try
-                    {
-                        licenseUrl = new URL( url );
-                    }
-                    catch ( MalformedURLException e )
-                    {
-                        throw new MissingResourceException(
-                            "The license url [" + url + "] seems to be invalid: " + e.getMessage(), null, null );
-                    }
-                }
-                else
-                {
-                    File licenseFile = new File( project.getBasedir(), url );
-                    if ( !licenseFile.exists() )
-                    {
-                        // Workaround to allow absolute path names while
-                        // staying compatible with the way it was...
-                        licenseFile = new File( url );
-                    }
-                    if ( !licenseFile.exists() )
-                    {
-                        throw new MissingResourceException(
-                            "Maven can't find the file " + licenseFile + " on the system.", null, null );
-                    }
-                    try
-                    {
-                        licenseUrl = licenseFile.toURL();
-                    }
-                    catch ( MalformedURLException e )
-                    {
-                        throw new MissingResourceException(
-                            "The license url [" + url + "] seems to be invalid: " + e.getMessage(), null, null );
-                    }
-                }
-
-                InputStream in = null;
-                try
-                {
-                    in = licenseUrl.openStream();
-                    // All licenses are supposed in English...
-                    licenseContent = IOUtil.toString( in, "ISO-8859-1" );
-                }
-                catch ( IOException e )
-                {
-                    throw new MissingResourceException( "Can't read the url [" + url + "] : " + e.getMessage(), null,
-                                                        null );
-                }
-                finally
-                {
-                    IOUtil.close( in );
-                }
-
-                // TODO: we should check for a text/html mime type instead, and possibly use a html parser to do this a bit more cleanly/reliably.
-                String licenseContentLC = licenseContent.toLowerCase();
-                int bodyStart = licenseContentLC.indexOf( "<body" );
-                int bodyEnd = licenseContentLC.indexOf( "</body>" );
-                if ( ( licenseContentLC.startsWith( "<!doctype html" ) || licenseContentLC.startsWith( "<html>" ) ) &&
-                    bodyStart >= 0 && bodyEnd >= 0 )
+                if ( url != null )
-                    bodyStart = licenseContentLC.indexOf( ">", bodyStart ) + 1;
-                    String body = licenseContent.substring( bodyStart, bodyEnd );
+                    String licenseContent = null;
-                    link( "[Original text]", licenseUrl.toExternalForm() );
-                    paragraph( "Copy of the license follows." );
+                    URL licenseUrl = null;
+                    UrlValidator urlValidator = new UrlValidator( UrlValidator.ALLOW_ALL_SCHEMES );
+                    // UrlValidator does not accept file URLs because the file
+                    // URLs do not contain a valid authority (no hostname).
+                    // As a workaround accept license URLs that start with the 
+                    // file scheme.
+                    if ( urlValidator.isValid( url ) || url.startsWith( "file://" ) )
+                    {
+                        try
+                        {
+                            licenseUrl = new URL( url );
+                        }
+                        catch ( MalformedURLException e )
+                        {
+                            throw new MissingResourceException( "The license url [" + url + "] seems to be invalid: "
+                                + e.getMessage(), null, null );
+                        }
+                    }
+                    else
+                    {
+                        File licenseFile = new File( project.getBasedir(), url );
+                        if ( !licenseFile.exists() )
+                        {
+                            // Workaround to allow absolute path names while
+                            // staying compatible with the way it was...
+                            licenseFile = new File( url );
+                        }
+                        if ( !licenseFile.exists() )
+                        {
+                            throw new MissingResourceException( "Maven can't find the file " + licenseFile
+                                + " on the system.", null, null );
+                        }
+                        try
+                        {
+                            licenseUrl = licenseFile.toURL();
+                        }
+                        catch ( MalformedURLException e )
+                        {
+                            throw new MissingResourceException( "The license url [" + url + "] seems to be invalid: "
+                                + e.getMessage(), null, null );
+                        }
+                    }
-                    body = replaceRelativeLinks( body, baseURL( licenseUrl ).toExternalForm() );
-                    sink.rawText( body );
+                    InputStream in = null;
+                    try
+                    {
+                        in = licenseUrl.openStream();
+                        // All licenses are supposed in English...
+                        licenseContent = IOUtil.toString( in, "ISO-8859-1" );
+                    }
+                    catch ( IOException e )
+                    {
+                        throw new MissingResourceException( "Can't read the url [" + url + "] : " + e.getMessage(),
+                                                            null, null );
+                    }
+                    finally
+                    {
+                        IOUtil.close( in );
+                    }
+
+                    // TODO: we should check for a text/html mime type instead, and possibly use a html parser to do this a bit more cleanly/reliably.
+                    String licenseContentLC = licenseContent.toLowerCase();
+                    int bodyStart = licenseContentLC.indexOf( "<body" );
+                    int bodyEnd = licenseContentLC.indexOf( "</body>" );
+                    if ( ( licenseContentLC.startsWith( "<!doctype html" ) || licenseContentLC.startsWith( "<html>" ) )
+                        && bodyStart >= 0 && bodyEnd >= 0 )
+                    {
+                        bodyStart = licenseContentLC.indexOf( ">", bodyStart ) + 1;
+                        String body = licenseContent.substring( bodyStart, bodyEnd );
+
+                        link( "[Original text]", licenseUrl.toExternalForm() );
+                        paragraph( "Copy of the license follows." );
+
+                        body = replaceRelativeLinks( body, baseURL( licenseUrl ).toExternalForm() );
+                        sink.rawText( body );
+                    }
+                    else
+                    {
+                        verbatimText( licenseContent );
+                    }
-                else
-                {
-                    verbatimText( licenseContent );
-                }
+
-                                        String attributePattern )
+                                       String attributePattern )
-        Pattern anchor = Pattern.compile(
-            "(<\\s*" + tagPattern + "\\s+[^>]*" + attributePattern + "\\s*=\\s*\")([^\"]*)\"([^>]*>)" );
+        Pattern anchor = Pattern.compile( "(<\\s*" + tagPattern + "\\s+[^>]*" + attributePattern
+            + "\\s*=\\s*\")([^\"]*)\"([^>]*>)" );

INS25 INS27 INS8 INS42 INS33 MOV60 MOV60 MOV60 MOV25 MOV60 MOV54 MOV60 MOV60 MOV60 MOV25