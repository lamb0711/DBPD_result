PR: MNG-1057
look for command line goals in the project declared plugins

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@292935 13f79535-47bb-0310-9956-ffa450edef68

-        // TODO: Add "&& canUsePrefix" to this boolean expression, and remove deprecation warning in next release.
-                getLogger().warn(
-                    "DEPRECATED: Mapped-prefix lookup of mojos are only supported from direct invocation. Please use specification of the form groupId:artifactId[:version]:goal instead. (Offending mojo: \'" +
-                        task + "\', invoked via: \'" + invokedVia + "\')" );
+                String msg = "DEPRECATED: Mapped-prefix lookup of mojos are only supported from direct invocation. " +
+                    "Please use specification of the form groupId:artifactId[:version]:goal instead. " +
+                    "(Offending mojo: \'" + task + "\', invoked via: \'" + invokedVia + "\')";
+                throw new LifecycleExecutionException( msg );
-            try
-            {
-                pluginDescriptor = pluginManager.getPluginDescriptorForPrefix( prefix );
-            }
-            catch ( PluginManagerException e )
-            {
-                throw new LifecycleExecutionException(
-                    "Cannot resolve plugin-prefix: \'" + prefix + "\' from plugin collector.", e );
-            }
+            pluginDescriptor = pluginManager.getPluginDescriptorForPrefix( prefix );
+            // 2. look in the repository via search groups
-
-            if ( pluginDescriptor != null )
+            else
-            // 2. default to o.a.m.plugins and maven-<prefix>-plugin
+            // 3. search plugins in the current POM
+            if ( plugin == null )
+            {
+                for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+                {
+                    Plugin buildPlugin = (Plugin) i.next();
+
+                    try
+                    {
+                        PluginDescriptor desc = pluginManager.verifyPlugin( buildPlugin, project, session.getSettings(),
+                                                                            session.getLocalRepository() );
+                        if ( prefix.equals( desc.getGoalPrefix() ) )
+                        {
+                            plugin = buildPlugin;
+                        }
+                    }
+                    catch ( PluginManagerException e )
+                    {
+                        throw new LifecycleExecutionException( "Internal error in the plugin manager", e );
+                    }
+                    catch ( PluginVersionResolutionException e )
+                    {
+                        throw new LifecycleExecutionException( "Error resolving plugin version", e );
+                    }
+                }
+            }
+
+            // 4. default to o.a.m.plugins and maven-<prefix>-plugin

INS25 MOV21 MOV38 INS8 MOV8 UPD27 INS8 INS60 MOV53 UPD42 INS24 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS54 INS27 MOV42 MOV45 MOV42 MOV45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS12 UPD45 MOV45 INS45 INS45 INS42 INS32 INS42 INS42 INS42 INS11 INS60 INS25 MOV44 INS8 INS44 INS8 INS42 INS42 INS43 INS32 INS43 INS59 INS32 INS8 INS53 INS43 INS42 INS53 MOV42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS21 INS14 INS42 INS14 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV32 UPD42 UPD42 INS7 INS43 INS45 INS42 INS43 INS45 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL8 DEL12 DEL54