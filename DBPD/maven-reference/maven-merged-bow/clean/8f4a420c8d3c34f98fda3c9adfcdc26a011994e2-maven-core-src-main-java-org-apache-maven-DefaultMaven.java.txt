MNG-2728 return a MavenExecutionResult from Maven.execute( request )


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491512 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.lifecycle.LifecycleExecutionException;
-import org.apache.maven.settings.Mirror;
-import org.apache.maven.settings.Proxy;
-import org.apache.maven.settings.Server;
-import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
-import org.codehaus.plexus.util.xml.Xpp3Dom;
-    
+
-        throws MavenExecutionException
-    {        
+    {
-                
+
-                
+
-        ReactorManager rm;
+        MavenExecutionResult result;
-        try
+        result = doExecute( request, dispatcher );
+
+        if ( result.hasExceptions() )
-            rm = doExecute( request, dispatcher );
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
+            for ( Iterator i = result.getExceptions().iterator(); i.hasNext(); )
+            {
+                Exception e = (Exception) i.next();
-            logError( e, request.isShowErrors() );
+                dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-            stats( request.getStartTime() );
+                logError( e, request.isShowErrors() );
-            line();
+                stats( request.getStartTime() );
-            throw new MavenExecutionException( e.getMessage(), e );
-        }
-        catch ( BuildFailureException e )
-        {
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            logFailure( e, request.isShowErrors() );
-
-            stats( request.getStartTime() );
-
-            line();
-
-            throw new MavenExecutionException( e.getMessage(), e );
-        }
-        catch ( Throwable t )
-        {
-            dispatcher.dispatchError( event, request.getBaseDirectory(), t );
-
-            logFatal( t );
-
-            stats( request.getStartTime() );
-
-            line();
-
-            throw new MavenExecutionException( "Error executing project within the reactor", t );
+                line();
+            }
-        logReactorSummary( rm );
+        logReactorSummary( result.getReactorManager() );
-        if ( rm.hasBuildFailures() )
+        if ( result.getReactorManager().hasBuildFailures() )
-            logErrors( rm, request.isShowErrors() );
+            logErrors( result.getReactorManager(), request.isShowErrors() );
-            if ( !ReactorManager.FAIL_NEVER.equals( rm.getFailureBehavior() ) )
+            if ( !result.getReactorManager().FAIL_NEVER.equals( result.getReactorManager().getFailureBehavior() ) )
-                throw new MavenExecutionException( "Some builds failed" );
+                return new DefaultMavenExecutionResult( Collections.singletonList( new MavenExecutionException( "Some builds failed" ) ) );
-        logSuccess( rm );
+        logSuccess( result.getReactorManager() );
-        dispatcher.dispatchEnd( event, request.getBaseDirectory() );                
+        dispatcher.dispatchEnd( event, request.getBaseDirectory() );
-        return new DefaultMavenExecutionResult( rm.getTopLevelProject(), null );
+        return new DefaultMavenExecutionResult( result.getReactorManager() );
-    private void logErrors( ReactorManager rm, boolean showErrors )
+    private void logErrors( ReactorManager rm,
+                            boolean showErrors )
-    private ReactorManager doExecute( MavenExecutionRequest request, EventDispatcher dispatcher )
-        throws MavenExecutionException, BuildFailureException, LifecycleExecutionException
+    private MavenExecutionResult doExecute( MavenExecutionRequest request,
+                                            EventDispatcher dispatcher )
+        List executionExceptions = new ArrayList();
+
-        List projects = getProjects( request, globalProfileManager );
-        if ( projects.isEmpty() )
+
+        List projects;
+
+        try
-            projects.add( getSuperProject( request ) );
-            foundProjects = false;
+            projects = getProjects( request, globalProfileManager );
+
+            if ( projects.isEmpty() )
+            {
+                projects.add( getSuperProject( request ) );
+
+                foundProjects = false;
+            }
+        }
+        catch ( Exception e )
+        {
+            executionExceptions.add( e );
+
+            return new DefaultMavenExecutionResult( executionExceptions );
+
-            throw new BuildFailureException(
-                "The projects in the reactor contain a cyclic reference: " + e.getMessage(), e );
+            executionExceptions.add( new BuildFailureException(
+                "The projects in the reactor contain a cyclic reference: " + e.getMessage(), e ) );
+
+            return new DefaultMavenExecutionResult( executionExceptions );
-            throw new BuildFailureException( e.getMessage(), e );
+            executionExceptions.add( new BuildFailureException( e.getMessage(), e ) );
+
+            return new DefaultMavenExecutionResult( executionExceptions );
+
-        lifecycleExecutor.execute( session, rm, dispatcher );
+        try
+        {
+            lifecycleExecutor.execute( session, rm, dispatcher );
+        }
+        catch ( Exception e )
+        {
+            executionExceptions.add( new BuildFailureException( e.getMessage(), e ) );
+        }
-        return rm;
+        return new DefaultMavenExecutionResult( executionExceptions, rm );
-            superProject = projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(), 
-                                                   new DefaultProfileManager( container, request.getProperties()) );
+            superProject = projectBuilder.buildStandaloneSuperProject( request.getLocalRepository(),
+                                                                       new DefaultProfileManager( container,
+                                                                                                  request.getProperties() ) );
-    private List getProjects( MavenExecutionRequest request, ProfileManager globalProfileManager )
+    private List getProjects( MavenExecutionRequest request,
+                              ProfileManager globalProfileManager )
-            projects = collectProjects( files,
-                                        request.getLocalRepository(),
-                                        request.isRecursive(),
-                                        request.getSettings(),
-                                        globalProfileManager,
-                                        !request.useReactor() );
+            projects = collectProjects( files, request.getLocalRepository(), request.isRecursive(),
+                                        request.getSettings(), globalProfileManager, !request.useReactor() );
-    private void logReactorSummaryLine( String name, String status )
+    private void logReactorSummaryLine( String name,
+                                        String status )
-    private void logReactorSummaryLine( String name, String status, long time )
+    private void logReactorSummaryLine( String name,
+                                        String status,
+                                        long time )
-    private List collectProjects( List files, ArtifactRepository localRepository, boolean recursive, Settings settings,
-                                  ProfileManager globalProfileManager, boolean isRoot )
+    private List collectProjects( List files,
+                                  ArtifactRepository localRepository,
+                                  boolean recursive,
+                                  Settings settings,
+                                  ProfileManager globalProfileManager,
+                                  boolean isRoot )
-    public MavenProject getProject( File pom, ArtifactRepository localRepository, Settings settings,
+    public MavenProject getProject( File pom,
+                                    ArtifactRepository localRepository,
+                                    Settings settings,
-    protected MavenSession createSession( MavenExecutionRequest request, ReactorManager rpm, EventDispatcher dispatcher )
+    protected MavenSession createSession( MavenExecutionRequest request,
+                                          ReactorManager rpm,
+                                          EventDispatcher dispatcher )
-        return new MavenSession( container,
-                                 request.getSettings(),
-                                 request.getLocalRepository(),
-                                 dispatcher,
-                                 rpm, request.getGoals(),
-                                 request.getBaseDirectory(),
-                                 request.getProperties(),
+        return new MavenSession( container, request.getSettings(), request.getLocalRepository(), dispatcher, rpm,
+                                 request.getGoals(), request.getBaseDirectory(), request.getProperties(),
-    
+
-    protected void logError( Exception e, boolean showErrors )
+    protected void logError( Exception e,
+                             boolean showErrors )
-    protected void logFailure( BuildFailureException e, boolean showErrors )
+    protected void logFailure( BuildFailureException e,
+                               boolean showErrors )
-    private void logTrace( Throwable t, boolean showErrors )
+    private void logTrace( Throwable t,
+                           boolean showErrors )
-    
+

MOV43 UPD43 INS42 MOV21 INS25 MOV21 MOV21 UPD42 INS60 INS54 INS54 UPD43 INS32 INS8 INS43 INS59 INS8 INS12 INS8 INS12 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS24 UPD42 INS32 MOV21 UPD42 INS42 INS42 INS14 INS21 MOV25 INS44 INS8 MOV21 INS44 INS8 INS43 INS42 INS42 INS58 INS32 MOV8 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS7 INS43 INS42 INS21 INS41 INS21 INS41 INS21 INS41 INS43 INS42 INS21 INS42 INS43 INS59 UPD42 MOV42 UPD42 MOV42 INS60 UPD42 INS32 INS41 INS42 INS42 MOV32 INS42 INS32 INS14 INS32 INS14 INS32 INS14 INS42 INS32 UPD42 MOV42 INS42 INS32 INS43 INS59 UPD42 MOV42 INS42 INS22 INS14 INS42 INS42 INS42 INS43 INS42 INS42 INS42 MOV14 INS43 INS42 INS42 INS42 MOV14 INS43 INS42 INS42 INS42 INS14 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 INS11 INS32 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 UPD42 UPD42 INS43 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL42 DEL42 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL40 DEL53 DEL42 DEL42 DEL32 DEL21 DEL33 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL53 DEL53 DEL42