o remove the build planner from visibility
o fix a method in the project builder to protect against an error coming from the remote resources plugin, it's asking to resolve a POM from a JAR artifact and the old project building code was doing that for whatever not-right reason


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@751021 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.logging.LogEnabled;
- * Responsible for creating a plan of execution for a given project and list of tasks. This build plan consists of
- * MojoBinding instances that carry all the information necessary to execute a mojo, including configuration from the
- * POM and other sources. NOTE: the build plan may be constructed of a main lifecycle binding-set, plus any number of
- * lifecycle modifiers and direct-invocation modifiers, to handle cases of forked execution.
- *
+ * Responsible for creating a plan of execution for a given project and list of tasks. This build
+ * plan consists of MojoBinding instances that carry all the information necessary to execute a
+ * mojo, including configuration from the POM and other sources. NOTE: the build plan may be
+ * constructed of a main lifecycle binding-set, plus any number of lifecycle modifiers and
+ * direct-invocation modifiers, to handle cases of forked execution.
+ * 
- *
+ * 
-    implements BuildPlanner, LogEnabled
+    implements BuildPlanner
+    @Requirement
-    public void constructInitialProjectBuildPlans( final MavenSession session )
+    public void constructInitialProjectBuildPlans( MavenSession session )
-    public BuildPlan constructInitialProjectBuildPlan( final MavenProject project,
-                                                       final MavenSession session )
+    public BuildPlan constructInitialProjectBuildPlan( MavenProject project, MavenSession session )
-        BuildPlan plan = session.getBuildPlan( project );
-        if ( plan == null )
-        {
-            plan = constructBuildPlan( Collections.EMPTY_LIST, project, session, true );
-
-            session.setBuildPlan( project, plan );
-        }
+        BuildPlan plan = constructBuildPlan( Collections.EMPTY_LIST, project, session, true );
-     * Orchestrates construction of the build plan which will be used by the user of LifecycleExecutor.
+     * Orchestrates construction of the build plan which will be used by the user of
+     * LifecycleExecutor.
-    public BuildPlan constructBuildPlan( List tasks,
-                                         MavenProject project,
-                                         MavenSession session,
-                                         boolean allowUnbindableMojos )
+    public BuildPlan constructBuildPlan( List tasks, MavenProject project, MavenSession session, boolean allowUnbindableMojos )
-        BuildPlan plan = session.getBuildPlan( project );
-
-        if ( plan != null )
-        {
-            plan = plan.copy( tasks );
-        }
-        else
-        {
-            LifecycleBindings defaultBindings = lifecycleBindingManager.getDefaultBindings( project );
-            LifecycleBindings packagingBindings = lifecycleBindingManager.getBindingsForPackaging( project,
-                                                                                                   session );
+        LifecycleBindings defaultBindings = lifecycleBindingManager.getDefaultBindings( project );
-            Set unbindableMojos = new HashSet();
-            LifecycleBindings projectBindings = lifecycleBindingManager.getProjectCustomBindings( project,
-                                                                                                  session,
-                                                                                                  unbindableMojos );
+        LifecycleBindings packagingBindings = lifecycleBindingManager.getBindingsForPackaging( project, session );
-            plan = new BuildPlan( packagingBindings, projectBindings, defaultBindings, unbindableMojos, tasks );
-            pluginResolutionAttempted = true;
-        }
+        Set unbindableMojos = new HashSet();
+        LifecycleBindings projectBindings = lifecycleBindingManager.getProjectCustomBindings( project, session, unbindableMojos );
+
+        BuildPlan plan = new BuildPlan( packagingBindings, projectBindings, defaultBindings, unbindableMojos, tasks );
+        
+        pluginResolutionAttempted = true;
-    private void initializeDirectInvocations( final BuildPlan plan,
-                                              final MavenProject project,
-                                              final MavenSession session )
+    private void initializeDirectInvocations( final BuildPlan plan, final MavenProject project, final MavenSession session )
+        
-                MojoBinding binding = mojoBindingFactory.parseMojoBinding( task,
-                                                                           project,
-                                                                           session,
-                                                                           true );
+                MojoBinding binding = mojoBindingFactory.parseMojoBinding( task, project, session, true );
-    public void enableLogging( final Logger logger )
-    {
-        this.logger = logger;
-    }
-
-     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and orchestrates the
-     * process of injecting any modifiers that are necessary to accommodate forked execution.
+     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and
+     * orchestrates the process of injecting any modifiers that are necessary to accommodate forked
+     * execution.
+     * 
-    private void addForkedLifecycleModifiers( final BuildPlan plan,
-                                              final MavenProject project,
-                                              final MavenSession session,
-                                              LinkedList callStack,
-                                              final boolean allowUnbindableMojos )
+    private void addForkedLifecycleModifiers( final BuildPlan plan, final MavenProject project, final MavenSession session, LinkedList callStack, final boolean allowUnbindableMojos )
-    private void findForkModifiers( final MojoBinding mojoBinding,
-                                    final BuildPlan plan,
-                                    final MavenProject project,
-                                    MavenSession session,
-                                    LinkedList callStack,
-                                    final boolean allowUnbindableMojos )
+    private void findForkModifiers( final MojoBinding mojoBinding, final BuildPlan plan, final MavenProject project, MavenSession session, LinkedList callStack, final boolean allowUnbindableMojos )
-            throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal()
-                                                 + " does not exist in plugin: "
-                                                 + pluginDescriptor.getId() + "." );
+            throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal() + " does not exist in plugin: " + pluginDescriptor.getId() + "." );
-     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and orchestrates the
-     * process of injecting any modifiers that are necessary to accommodate mojos that require access to the project's
-     * configured reports.
+     * Traverses all MojoBinding instances discovered from the POM and its packaging-mappings, and
+     * orchestrates the process of injecting any modifiers that are necessary to accommodate mojos
+     * that require access to the project's configured reports.
-    private void addReportingLifecycleModifiers( final BuildPlan plan,
-                                                 final MavenProject project,
-                                                 final MavenSession session,
-                                                 LinkedList callStack,
-                                                 final boolean allowUnbindableMojos )
+    private void addReportingLifecycleModifiers( final BuildPlan plan, final MavenProject project, final MavenSession session, LinkedList callStack, final boolean allowUnbindableMojos )
-            PluginDescriptor pluginDescriptor = loadPluginDescriptor( mojoBinding,
-                                                                      plan,
-                                                                      project,
-                                                                      session,
-                                                                      allowUnbindableMojos );
+            PluginDescriptor pluginDescriptor = loadPluginDescriptor( mojoBinding, plan, project, session, allowUnbindableMojos );
-                throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal()
-                                                     + " does not exist in plugin: "
-                                                     + pluginDescriptor.getId() + "." );
+                throw new LifecyclePlannerException( "Mojo: " + mojoBinding.getGoal() + " does not exist in plugin: " + pluginDescriptor.getId() + "." );
-                        PluginDescriptor pd = loadPluginDescriptor( reportBinding,
-                                                                    plan,
-                                                                    project,
-                                                                    session,
-                                                                    allowUnbindableMojos );
+                        PluginDescriptor pd = loadPluginDescriptor( reportBinding, plan, project, session, allowUnbindableMojos );
-                            findForkModifiers( reportBinding,
-                                               pd,
-                                               plan,
-                                               project,
-                                               session,
-                                               callStack,
-                                               true,
-                                               allowUnbindableMojos );
+                            findForkModifiers( reportBinding, pd, plan, project, session, callStack, true, allowUnbindableMojos );
-        
+
-     * Explores a single MojoBinding, and injects any necessary plan modifiers to accommodate any of the three types of
-     * forked execution, along with any new mojos/lifecycles that entails.
+     * Explores a single MojoBinding, and injects any necessary plan modifiers to accommodate any of
+     * the three types of forked execution, along with any new mojos/lifecycles that entails.
+     * 
-    private void findForkModifiers( final MojoBinding mojoBinding,
-                                    final PluginDescriptor pluginDescriptor,
-                                    final BuildPlan plan,
-                                    final MavenProject project,
-                                    final MavenSession session,
-                                    LinkedList callStack,
-                                    final boolean includeReportConfig,
-                                    final boolean allowUnbindableMojos )
+    private void findForkModifiers( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor, final BuildPlan plan, final MavenProject project, final MavenSession session,
+                                    LinkedList callStack, final boolean includeReportConfig, final boolean allowUnbindableMojos )
-            throw new LifecyclePlannerException( "Cannot find mojo descriptor for: "
-                                                 + referencingGoal + " in plugin: "
-                                                 + pluginDescriptor.getId() );
+            throw new LifecyclePlannerException( "Cannot find mojo descriptor for: " + referencingGoal + " in plugin: " + pluginDescriptor.getId() );
-            recurseSingleMojoFork( mojoBinding,
-                                   pluginDescriptor,
-                                   plan,
-                                   project,
-                                   includeReportConfig );
+            recurseSingleMojoFork( mojoBinding, pluginDescriptor, plan, project, includeReportConfig );
-            recursePhaseMojoFork( mojoBinding,
-                                  pluginDescriptor,
-                                  plan,
-                                  project,
-                                  session,
-                                  callStack,
-                                  includeReportConfig,
-                                  allowUnbindableMojos );
+            recursePhaseMojoFork( mojoBinding, pluginDescriptor, plan, project, session, callStack, includeReportConfig, allowUnbindableMojos );
-     * Constructs the lifecycle bindings used to execute a particular fork, given the forking mojo binding. If the mojo
-     * binding specifies a lifecycle overlay, this method will add that into the forked lifecycle, and calculate the
-     * bindings to inject based on the phase in that new lifecycle which should be executed.
-     *
+     * Constructs the lifecycle bindings used to execute a particular fork, given the forking mojo
+     * binding. If the mojo binding specifies a lifecycle overlay, this method will add that into
+     * the forked lifecycle, and calculate the bindings to inject based on the phase in that new
+     * lifecycle which should be executed.
+     * 
+     * 
-    private void recursePhaseMojoFork( final MojoBinding mojoBinding,
-                                       final PluginDescriptor pluginDescriptor,
-                                       final BuildPlan plan,
-                                       final MavenProject project,
-                                       final MavenSession session,
-                                       LinkedList callStack,
-                                       final boolean includeReportConfig,
-                                       final boolean allowUnbindableMojos )
+    private void recursePhaseMojoFork( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor, final BuildPlan plan, final MavenProject project, final MavenSession session,
+                                       LinkedList callStack, final boolean includeReportConfig, final boolean allowUnbindableMojos )
-                    overlayBindings = lifecycleBindingManager.getPluginLifecycleOverlay( pluginDescriptor,
-                                                                                         executeLifecycle,
-                                                                                         project );
+                    overlayBindings = lifecycleBindingManager.getPluginLifecycleOverlay( pluginDescriptor, executeLifecycle, project );
-                    throw new LifecyclePlannerException( "Failed to load overlay lifecycle: "
-                                                         + executeLifecycle + ". Reason: "
-                                                         + e.getMessage(), e );
+                    throw new LifecyclePlannerException( "Failed to load overlay lifecycle: " + executeLifecycle + ". Reason: " + e.getMessage(), e );
-     * Retrieves the information necessary to create a new MojoBinding for a single-mojo forked execution, then hands
-     * off to the
+     * Retrieves the information necessary to create a new MojoBinding for a single-mojo forked
+     * execution, then hands off to the
+     * 
-    private void recurseSingleMojoFork( final MojoBinding mojoBinding,
-                                        final PluginDescriptor pluginDescriptor,
-                                        final BuildPlan plan,
-                                        final MavenProject project,
-                                        final boolean includeReportConfig )
+    private void recurseSingleMojoFork( final MojoBinding mojoBinding, final PluginDescriptor pluginDescriptor, final BuildPlan plan, final MavenProject project, final boolean includeReportConfig )
-            throw new LifecyclePlannerException( "Mojo: " + executeGoal + " (referenced by: "
-                                                 + referencingGoal + ") does not exist in plugin: "
-                                                 + pluginDescriptor.getId() + "." );
+            throw new LifecyclePlannerException( "Mojo: " + executeGoal + " (referenced by: " + referencingGoal + ") does not exist in plugin: " + pluginDescriptor.getId() + "." );
-        MojoBinding binding = mojoBindingFactory.createMojoBinding( pluginDescriptor.getGroupId(),
-                                                                    pluginDescriptor.getArtifactId(),
-                                                                    pluginDescriptor.getVersion(),
-                                                                    executeGoal,
-                                                                    project );
+        MojoBinding binding = mojoBindingFactory.createMojoBinding( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId(), pluginDescriptor.getVersion(), executeGoal, project );

INS78 MOV43 MOV8 UPD66 UPD66 INS66 UPD66 UPD66 INS42 MOV60 INS60 MOV25 MOV21 MOV21 MOV21 MOV21 MOV41 MOV43 UPD66 INS66 MOV43 INS59 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 MOV32 INS42 MOV14 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31