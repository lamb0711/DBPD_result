Merge branch 'trunk' into eclipse-aether

Conflicts:
	maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java
	maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java
	maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java
	maven-aether-provider/src/test/java/org/apache/maven/repository/internal/AbstractRepositoryTestCase.java
	maven-aether-provider/src/test/java/org/apache/maven/repository/internal/DefaultVersionResolverTest.java
	maven-core/src/main/java/org/apache/maven/DefaultMaven.java
	maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultLegacySupport.java
	maven-core/src/main/java/org/apache/maven/plugin/prefix/PluginPrefixResult.java
	maven-embedder/src/main/java/org/apache/maven/cli/transfer/Slf4jMavenTransferListener.java
	pom.xml
	src/site/site.xml

+import org.apache.maven.cli.logging.Slf4jConfiguration;
+import org.apache.maven.cli.logging.Slf4jConfigurationFactory;
+import org.apache.maven.cli.logging.Slf4jStdoutLogger;
+            repository( cliRequest );
-            if (localContainer != null)
+            if ( localContainer != null )
+        //
+        // Parsing errors can happen during the processing of the arguments and we prefer not having to check if the logger is null
+        // and construct this so we can use an SLF4J logger everywhere.
+        //
+        slf4jLogger = new Slf4jStdoutLogger();
+
-    //
-    // All logging is handled by SFL4J
-    //
+    /**
+     * configure logging
+     */
+        slf4jLoggerFactory = LoggerFactory.getILoggerFactory();
+        Slf4jConfiguration slf4jConfiguration = Slf4jConfigurationFactory.getConfiguration( slf4jLoggerFactory );
+
-            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "debug" );            
+            slf4jConfiguration.setRootLoggerLevel( Slf4jConfiguration.Level.DEBUG );
-            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "error" );            
+            slf4jConfiguration.setRootLoggerLevel( Slf4jConfiguration.Level.ERROR );
-            System.setProperty( "org.slf4j.simpleLogger.defaultLogLevel", "info" );
+            slf4jConfiguration.setRootLoggerLevel( Slf4jConfiguration.Level.INFO );
-            System.setProperty( "org.slf4j.simpleLogger.logFile", logFile.getAbsolutePath() );
+
+            // redirect stdout and stderr to file
+        slf4jConfiguration.activate();
+
-        slf4jLoggerFactory = LoggerFactory.getILoggerFactory();
-            ContainerConfiguration cc = new DefaultContainerConfiguration()
-                .setClassWorld( cliRequest.classWorld )
-                .setRealm( setupContainerRealm( cliRequest ) )
-                .setClassPathScanning( PlexusConstants.SCANNING_INDEX )
-                .setAutoWiring( true )
-                .setName( "maven" );
+        ContainerConfiguration cc = new DefaultContainerConfiguration()
+            .setClassWorld( cliRequest.classWorld )
+            .setRealm( setupContainerRealm( cliRequest ) )
+            .setClassPathScanning( PlexusConstants.SCANNING_INDEX )
+            .setAutoWiring( true )
+            .setName( "maven" );
-            container = new DefaultPlexusContainer( cc, new AbstractModule()
+        container = new DefaultPlexusContainer( cc, new AbstractModule()
+        {
+            protected void configure()
+                bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );
+            }
+        } );
-                protected void configure()
-                {
-                    bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );
-                }
+        // NOTE: To avoid inconsistencies, we'll use the TCCL exclusively for lookups
+        container.setLookupRealm( null );
-            } );
+        container.setLoggerManager( plexusLoggerManager );
-            // NOTE: To avoid inconsistencies, we'll use the TCCL exclusively for lookups
-            container.setLookupRealm( null );
-
-            container.setLoggerManager( plexusLoggerManager );
-
-            customizeContainer( container );
+        customizeContainer( container );
+    private void repository( CliRequest cliRequest )
+        throws Exception
+    {
+        if ( cliRequest.commandLine.hasOption( CLIManager.LEGACY_LOCAL_REPOSITORY ) || Boolean.getBoolean( "maven.legacyLocalRepo" ) )
+        {
+           cliRequest.request.setUseLegacyLocalRepository( true );
+        }
+    }
+
-        ExecutionListener executionListener = new ExecutionEventLogger( slf4jLogger );
+        ExecutionListener executionListener = new ExecutionEventLogger();
-        return new Slf4jMavenTransferListener( slf4jLogger );
+        return new Slf4jMavenTransferListener();

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 MOV21 INS83 INS39 INS42 INS44 INS43 INS8 INS21 INS65 INS60 INS21 INS43 INS42 INS42 INS25 INS7 INS66 INS43 INS59 INS32 INS42 INS27 INS8 INS21 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS32 INS43 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS45 INS32 INS42 INS42 INS42 UPD42 UPD42 INS40 INS40 INS42 INS9 UPD42 UPD42 INS40 UPD42 UPD42 INS40 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42