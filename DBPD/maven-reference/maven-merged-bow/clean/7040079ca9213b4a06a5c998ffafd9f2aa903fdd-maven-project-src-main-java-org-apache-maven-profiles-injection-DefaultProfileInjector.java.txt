Replaced the old profile injector code with new profile code. Merged project builders.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@748609 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.ModelUtils;
+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
+import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import org.apache.maven.project.builder.*;
+import org.apache.maven.shared.model.ModelProperty;
+import org.apache.maven.shared.model.ModelMarshaller;
+import org.apache.maven.shared.model.ModelTransformerContext;
-import org.codehaus.plexus.util.StringUtils;
-import org.codehaus.plexus.util.xml.Xpp3Dom;
+import org.codehaus.plexus.util.xml.pull.XmlSerializer;
+import org.codehaus.plexus.util.xml.pull.MXSerializer;
+import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+import org.codehaus.plexus.util.WriterFactory;
+import org.codehaus.plexus.util.ReaderFactory;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
+import java.util.*;
+import java.io.*;
+import java.lang.reflect.Method;
- * <p/>
- * This will look similar to the ModelUtils/DefaultModelInheritanceAssembler code, but
- * they are distinct. In model inheritance, the child provides data dominance AND persists
- * the results of the merge...sort of a 'merge-out' system.
- * <p/>
- * In this system, the profile is dominant, but the model receives the merge result...sort
- * of a 'merge-in' system. The two pieces of code look like they could be combined with a
- * set of flags to determine which direction to merge 'to', but there are enough differences
- * in the code to justify the extra code involved with separating them, in order to simplify
- * the logic.
-    public void inject( Profile profile, Model model )
+    public Model inject( Profile profile, Model model )
-
-        model.setDependencies( injectDependencies( profile.getDependencies(), model.getDependencies() ) );
-
-        injectModules( profile, model );
-
-        model.setRepositories( ModelUtils.mergeRepositoryLists( profile.getRepositories(), model.getRepositories() ) );
-        model.setPluginRepositories( ModelUtils.mergeRepositoryLists( profile.getPluginRepositories(), model.getPluginRepositories() ) );
-
-        injectReporting( profile, model );
-
-        injectDependencyManagement( profile, model );
-
-        injectDistributionManagement( profile, model );
-
-        injectBuild( profile, model );
-
-        Properties props = new Properties();
-        props.putAll( model.getProperties() );
-        props.putAll( profile.getProperties() );
-
-        model.setProperties( props );
-    }
-
-    private void injectBuild( Profile profile, Model model )
-    {
-        BuildBase profileBuild = profile.getBuild();
-        Build modelBuild = model.getBuild();
-
-        // if the parent build is null, obviously we cannot inherit from it...
-        if ( profileBuild != null )
+        //TODO: Using reflection now. Need to replace with custom mapper
+        StringWriter writer = new StringWriter();
+        XmlSerializer serializer = new MXSerializer();
+        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
+        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
+        try
-            if ( modelBuild == null )
-            {
-                modelBuild = new Build();
-                model.setBuild( modelBuild );
-            }
+            serializer.setOutput( writer );
+            serializer.startDocument("UTF-8", null );
+        } catch (IOException e) {
-            if ( profileBuild.getDirectory() != null )
-            {
-                modelBuild.setDirectory( profileBuild.getDirectory() );
-            }
-
-            if ( profileBuild.getDefaultGoal() != null )
-            {
-                modelBuild.setDefaultGoal( profileBuild.getDefaultGoal() );
-            }
-
-            if ( profileBuild.getFinalName() != null )
-            {
-                modelBuild.setFinalName( profileBuild.getFinalName() );
-            }
-
-            ModelUtils.mergeFilterLists( modelBuild.getFilters(), profileBuild.getFilters() );
-            mergeResourceLists( modelBuild.getResources(), profileBuild.getResources() );
-            mergeResourceLists( modelBuild.getTestResources(), profileBuild.getTestResources() );
-
-            injectPlugins( profileBuild, modelBuild );
-
-            // Plugin management :: aggregate
-            PluginManagement profilePM = profileBuild.getPluginManagement();
-            PluginManagement modelPM = modelBuild.getPluginManagement();
-
-            if ( modelPM == null )
-            {
-                modelBuild.setPluginManagement( profilePM );
-            }
-            else
-            {
-                injectPlugins( profilePM, modelPM );
-            }
-        }
-    }
-
-    /**
-     * This should be the resulting ordering of plugins after injection:
-     * <p/>
-     * Given:
-     * <p/>
-     * model: X -> A -> B -> D -> E
-     * profile: Y -> A -> C -> D -> F
-     * <p/>
-     * Result:
-     * <p/>
-     * X -> Y -> A -> B -> C -> D -> E -> F
-     */
-    protected void injectPlugins( PluginContainer profileContainer, PluginContainer modelContainer )
-    {
-        if ( ( profileContainer == null ) || ( modelContainer == null ) )
-        {
-            // nothing to do...
-            return;
-        List modelPlugins = modelContainer.getPlugins();
+        try {
+            MavenXpp3Writer w = new MavenXpp3Writer();
+            Class c = Class.forName("org.apache.maven.model.io.xpp3.MavenXpp3Writer");
-        if ( modelPlugins == null )
-        {
-            modelContainer.setPlugins( profileContainer.getPlugins() );
+            Class partypes[] = new Class[3];
+            partypes[0] = Profile.class;
+            partypes[1] = String.class;
+            partypes[2] = XmlSerializer.class;
+
+            Method meth = c.getDeclaredMethod(
+                         "writeProfile", partypes);
+            meth.setAccessible(true);
+
+            Object arglist[] = new Object[3];
+            arglist[0] = profile;
+            arglist[1] = "profile";
+            arglist[2] = serializer;
+
+            meth.invoke(w, arglist);
+            serializer.endDocument();
-        else if ( profileContainer.getPlugins() != null )
+        catch (Exception e)
-            List mergedPlugins = new ArrayList();
+            return null;
+        }
+        Set<String> uris = new HashSet(PomTransformer.URIS);
+        uris.add(ProjectUri.Profiles.Profile.Build.Plugins.Plugin.configuration);
-            Map profilePlugins = profileContainer.getPluginsAsMap();
+        List<ModelProperty> p;
+        try
+        {
+            p = ModelMarshaller.marshallXmlToModelProperties(new ByteArrayInputStream(writer.getBuffer().toString().getBytes()),
+                    ProjectUri.Profiles.xUri, uris);
+        } catch (IOException e) {
+            return null;
+        }
-            for ( Iterator it = modelPlugins.iterator(); it.hasNext(); )
+            List<ModelProperty> transformed = new ArrayList<ModelProperty>();
+            for(ModelProperty mp : p)
-                Plugin modelPlugin = (Plugin) it.next();
-
-                Plugin profilePlugin = (Plugin) profilePlugins.get( modelPlugin.getKey() );
-
-                if ( ( profilePlugin != null ) && !mergedPlugins.contains( profilePlugin ) )
+                if(mp.getUri().startsWith(ProjectUri.Profiles.Profile.xUri) && !mp.getUri().equals(ProjectUri.Profiles.Profile.id)
+                        && !mp.getUri().startsWith(ProjectUri.Profiles.Profile.Activation.xUri) )
-                    Plugin mergedPlugin = modelPlugin;
-
-                    injectPluginDefinition( profilePlugin, modelPlugin );
-
-                    mergedPlugins.add( mergedPlugin );
+                    transformed.add(new ModelProperty(mp.getUri().replace(ProjectUri.Profiles.Profile.xUri, ProjectUri.xUri),
+                            mp.getResolvedValue()));
-            List results = ModelUtils.orderAfterMerge( mergedPlugins, modelPlugins, profileContainer.getPlugins() );
+        PomTransformer transformer = new PomTransformer( new PomClassicDomainModelFactory() );
+        ModelTransformerContext ctx = new ModelTransformerContext(PomTransformer.MODEL_CONTAINER_INFOS );
-            modelContainer.setPlugins( results );
-
-            modelContainer.flushPluginMap();
+        PomClassicDomainModel transformedDomainModel;
+        try {
+            transformedDomainModel = ( (PomClassicDomainModel) ctx.transform( Arrays.asList(  new PomClassicDomainModel(transformed), convertToDomainModel(model)), 
+                                                                                                    transformer,
+                                                                                                    transformer,
+                                                                                                    Collections.EMPTY_LIST,
+                                                                                                    null,
+                                                                                                    null ) );
+            return convertFromInputStreamToModel(transformedDomainModel.getInputStream());
+        } catch (IOException e) {
+            e.printStackTrace();
+            return null;
+
+
-    private void injectPluginDefinition( Plugin profilePlugin, Plugin modelPlugin )
+    private PomClassicDomainModel convertToDomainModel(Model model) throws IOException
-        if ( ( profilePlugin == null ) || ( modelPlugin == null ) )
+        if ( model == null )
-            // nothing to do.
-            return;
+            throw new IllegalArgumentException( "model: null" );
-
-        if ( profilePlugin.isExtensions() )
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        Writer out = null;
+        MavenXpp3Writer writer = new MavenXpp3Writer();
+        try
-            modelPlugin.setExtensions( true );
+            out = WriterFactory.newXmlWriter( baos );
+            writer.write( out, model );
-
-        if ( profilePlugin.getVersion() != null )
+        finally
-            modelPlugin.setVersion( profilePlugin.getVersion() );
-        }
-
-        modelPlugin.setDependencies(
-            injectDependencies( profilePlugin.getDependencies(), modelPlugin.getDependencies() ) );
-
-        // merge the lists of goals that are not attached to an <execution/>
-        injectConfigurationContainer( profilePlugin, modelPlugin );
-
-        // from here to the end of the method is dealing with merging of the <executions/> section.
-        List modelExecutions = modelPlugin.getExecutions();
-
-        if ( ( modelExecutions == null ) || modelExecutions.isEmpty() )
-        {
-            modelPlugin.setExecutions( profilePlugin.getExecutions() );
-        }
-        else
-        {
-            Map executions = new LinkedHashMap();
-
-            Map profileExecutions = profilePlugin.getExecutionsAsMap();
-
-            for ( Iterator it = modelExecutions.iterator(); it.hasNext(); )
+            if ( out != null )
-                PluginExecution modelExecution = (PluginExecution) it.next();
-
-                PluginExecution profileExecution = (PluginExecution) profileExecutions.get( modelExecution.getId() );
-
-                if ( profileExecution != null )
-                {
-                    injectConfigurationContainer( profileExecution, modelExecution );
-
-                    if ( profileExecution.getPhase() != null )
-                    {
-                        modelExecution.setPhase( profileExecution.getPhase() );
-                    }
-
-                    List profileGoals = profileExecution.getGoals();
-                    List modelGoals = modelExecution.getGoals();
-
-                    List goals = new ArrayList();
-
-                    if ( ( modelGoals != null ) && !modelGoals.isEmpty() )
-                    {
-                        goals.addAll( modelGoals );
-                    }
-
-                    if ( profileGoals != null )
-                    {
-                        for ( Iterator goalIterator = profileGoals.iterator(); goalIterator.hasNext(); )
-                        {
-                            String goal = (String) goalIterator.next();
-
-                            if ( !goals.contains( goal ) )
-                            {
-                                goals.add( goal );
-                            }
-                        }
-                    }
-
-                    modelExecution.setGoals( goals );
-                }
-
-                executions.put( modelExecution.getId(), modelExecution );
+                out.close();
-
-            for ( Iterator it = profileExecutions.entrySet().iterator(); it.hasNext(); )
-            {
-                Map.Entry entry = (Map.Entry) it.next();
-
-                String id = (String) entry.getKey();
-
-                if ( !executions.containsKey( id ) )
-                {
-                    executions.put( id, entry.getValue() );
-                }
-            }
-
-            modelPlugin.setExecutions( new ArrayList( executions.values() ) );
-
-            modelPlugin.flushExecutionMap();
-
+        return new PomClassicDomainModel(new ByteArrayInputStream(baos.toByteArray()));
-    /**
-     * Merge two DOMs. Copy the dominant DOM so the original one is left unchanged.
-     * <p/>
-     * Use this method instead of a direct call to {@link Xpp3Dom#mergeXpp3Dom(Xpp3Dom, Xpp3Dom)}.
-     * Profiles are dominant, thus they are merge targets, but they may be merged in several times
-     * (e.g. if they are inherited). So with the second merge, you don't get the profile's original
-     * DOM, but an already merged one.
-     *
-     * @param dominant  Dominant DOM
-     * @param recessive Recessive DOM
-     * @return Merged DOM
-     */
-    private Xpp3Dom merge( Xpp3Dom dominant, Xpp3Dom recessive )
+    private static Model convertFromInputStreamToModel(InputStream inputStream) throws IOException
-        Xpp3Dom dominantCopy = ( dominant == null ) ? null : new Xpp3Dom( dominant );
-        return Xpp3Dom.mergeXpp3Dom( dominantCopy, recessive );
+
+        try
+        {
+            return new MavenXpp3Reader().read( ReaderFactory.newXmlReader( inputStream ) );
+        }
+        catch ( XmlPullParserException e )
+        {
+            throw new IOException( e.getMessage() );
+        }
+
-    private void injectConfigurationContainer( ConfigurationContainer profileContainer,
-                                               ConfigurationContainer modelContainer )
-    {
-        Xpp3Dom configuration = (Xpp3Dom) profileContainer.getConfiguration();
-        Xpp3Dom parentConfiguration = (Xpp3Dom) modelContainer.getConfiguration();
-
-        configuration = merge( configuration, parentConfiguration );
-
-        modelContainer.setConfiguration( configuration );
-    }
-
-    /**
-     * Append modules specified in the profile to the end of the list supplied by the model, if
-     * they don't already exist.
-     */
-    private void injectModules( Profile profile, Model model )
-    {
-        List modules = new ArrayList();
-
-        List modelModules = model.getModules();
-
-        if ( ( modelModules != null ) && !modelModules.isEmpty() )
-        {
-            modules.addAll( modelModules );
-        }
-
-        List profileModules = profile.getModules();
-
-        if ( profileModules != null )
-        {
-            for ( Iterator it = profileModules.iterator(); it.hasNext(); )
-            {
-                String module = (String) it.next();
-
-                if ( !modules.contains( module ) )
-                {
-                    modules.add( module );
-                }
-            }
-        }
-
-        model.setModules( modules );
-    }
-
-    private void injectDistributionManagement( Profile profile, Model model )
-    {
-        DistributionManagement pDistMgmt = profile.getDistributionManagement();
-        DistributionManagement mDistMgmt = model.getDistributionManagement();
-
-        if ( mDistMgmt == null )
-        {
-            model.setDistributionManagement( pDistMgmt );
-        }
-        else if ( pDistMgmt != null )
-        {
-            if ( pDistMgmt.getRepository() != null )
-            {
-                mDistMgmt.setRepository( pDistMgmt.getRepository() );
-            }
-
-            if ( pDistMgmt.getSnapshotRepository() != null )
-            {
-                mDistMgmt.setSnapshotRepository( pDistMgmt.getSnapshotRepository() );
-            }
-
-            if ( StringUtils.isNotEmpty( pDistMgmt.getDownloadUrl() ) )
-            {
-                mDistMgmt.setDownloadUrl( pDistMgmt.getDownloadUrl() );
-            }
-
-            if ( pDistMgmt.getRelocation() != null )
-            {
-                mDistMgmt.setRelocation( pDistMgmt.getRelocation() );
-            }
-
-            if ( pDistMgmt.getSite() != null )
-            {
-                mDistMgmt.setSite( pDistMgmt.getSite() );
-            }
-
-            // NOTE: We SHOULD NOT be inheriting status, since this is an assessment of the POM quality.
-        }
-    }
-
-    private void injectDependencyManagement( Profile profile, Model model )
-    {
-        DependencyManagement modelDepMgmt = model.getDependencyManagement();
-
-        DependencyManagement profileDepMgmt = profile.getDependencyManagement();
-
-        if ( profileDepMgmt != null )
-        {
-            if ( modelDepMgmt == null )
-            {
-                model.setDependencyManagement( profileDepMgmt );
-            }
-            else
-            {
-                Map depsMap = new LinkedHashMap();
-
-                List deps = modelDepMgmt.getDependencies();
-
-                if ( deps != null )
-                {
-                    for ( Iterator it = deps.iterator(); it.hasNext(); )
-                    {
-                        Dependency dependency = (Dependency) it.next();
-                        depsMap.put( dependency.getManagementKey(), dependency );
-                    }
-                }
-
-                deps = profileDepMgmt.getDependencies();
-
-                if ( deps != null )
-                {
-                    for ( Iterator it = deps.iterator(); it.hasNext(); )
-                    {
-                        Dependency dependency = (Dependency) it.next();
-                        depsMap.put( dependency.getManagementKey(), dependency );
-                    }
-                }
-
-                modelDepMgmt.setDependencies( new ArrayList( depsMap.values() ) );
-            }
-        }
-    }
-
-    private void injectReporting( Profile profile, Model model )
-    {
-        // Reports :: aggregate
-        Reporting profileReporting = profile.getReporting();
-        Reporting modelReporting = model.getReporting();
-
-        if ( profileReporting != null )
-        {
-            if ( modelReporting == null )
-            {
-                model.setReporting( profileReporting );
-            }
-            else
-            {
-                if ( StringUtils.isEmpty( modelReporting.getOutputDirectory() ) )
-                {
-                    modelReporting.setOutputDirectory( profileReporting.getOutputDirectory() );
-                }
-
-                Map mergedReportPlugins = new LinkedHashMap();
-
-                Map profileReportersByKey = profileReporting.getReportPluginsAsMap();
-
-                List modelReportPlugins = modelReporting.getPlugins();
-
-                if ( modelReportPlugins != null )
-                {
-                    for ( Iterator it = modelReportPlugins.iterator(); it.hasNext(); )
-                    {
-                        ReportPlugin modelReportPlugin = (ReportPlugin) it.next();
-
-                        String inherited = modelReportPlugin.getInherited();
-
-                        if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
-                        {
-                            ReportPlugin profileReportPlugin = (ReportPlugin) profileReportersByKey
-                                .get( modelReportPlugin.getKey() );
-
-                            ReportPlugin mergedReportPlugin = modelReportPlugin;
-
-                            if ( profileReportPlugin != null )
-                            {
-                                mergedReportPlugin = profileReportPlugin;
-
-                                mergeReportPlugins( profileReportPlugin, modelReportPlugin );
-                            }
-                            else if ( StringUtils.isEmpty( inherited ) )
-                            {
-                                mergedReportPlugin.unsetInheritanceApplied();
-                            }
-
-                            mergedReportPlugins.put( mergedReportPlugin.getKey(), mergedReportPlugin );
-                        }
-                    }
-                }
-
-                for ( Iterator it = profileReportersByKey.entrySet().iterator(); it.hasNext(); )
-                {
-                    Map.Entry entry = (Map.Entry) it.next();
-
-                    String key = (String) entry.getKey();
-
-                    if ( !mergedReportPlugins.containsKey( key ) )
-                    {
-                        mergedReportPlugins.put( key, entry.getValue() );
-                    }
-                }
-
-                modelReporting.setPlugins( new ArrayList( mergedReportPlugins.values() ) );
-
-                modelReporting.flushReportPluginMap();
-            }
-        }
-    }
-
-    private void mergeReportPlugins( ReportPlugin dominant, ReportPlugin recessive )
-    {
-        if ( StringUtils.isEmpty( recessive.getVersion() ) )
-        {
-            recessive.setVersion( dominant.getVersion() );
-        }
-
-        Xpp3Dom dominantConfig = (Xpp3Dom) dominant.getConfiguration();
-        Xpp3Dom recessiveConfig = (Xpp3Dom) recessive.getConfiguration();
-
-        recessive.setConfiguration( merge( dominantConfig, recessiveConfig ) );
-
-        Map mergedReportSets = new LinkedHashMap();
-
-        Map dominantReportSetsById = dominant.getReportSetsAsMap();
-
-        for ( Iterator it = recessive.getReportSets().iterator(); it.hasNext(); )
-        {
-            ReportSet recessiveReportSet = (ReportSet) it.next();
-
-            ReportSet dominantReportSet = (ReportSet) dominantReportSetsById.get( recessiveReportSet.getId() );
-
-            ReportSet merged = recessiveReportSet;
-
-            if ( dominantReportSet != null )
-            {
-                merged = recessiveReportSet;
-
-                Xpp3Dom dominantRSConfig = (Xpp3Dom) dominantReportSet.getConfiguration();
-                Xpp3Dom mergedRSConfig = (Xpp3Dom) merged.getConfiguration();
-
-                merged.setConfiguration( merge( dominantRSConfig, mergedRSConfig ) );
-
-                List mergedReports = merged.getReports();
-
-                if ( mergedReports == null )
-                {
-                    mergedReports = new ArrayList();
-
-                    merged.setReports( mergedReports );
-                }
-
-                List dominantRSReports = dominantReportSet.getReports();
-
-                if ( dominantRSReports != null )
-                {
-                    for ( Iterator reportIterator = dominantRSReports.iterator(); reportIterator.hasNext(); )
-                    {
-                        String report = (String) reportIterator.next();
-
-                        if ( !mergedReports.contains( report ) )
-                        {
-                            mergedReports.add( report );
-                        }
-                    }
-                }
-
-                mergedReportSets.put( merged.getId(), merged );
-            }
-        }
-
-        for ( Iterator rsIterator = dominantReportSetsById.entrySet().iterator(); rsIterator.hasNext(); )
-        {
-            Map.Entry entry = (Map.Entry) rsIterator.next();
-
-            String key = (String) entry.getKey();
-
-            if ( !mergedReportSets.containsKey( key ) )
-            {
-                mergedReportSets.put( key, entry.getValue() );
-            }
-        }
-
-        recessive.setReportSets( new ArrayList( mergedReportSets.values() ) );
-
-        recessive.flushReportSetMap();
-    }
-
-    private List injectDependencies( List profileDeps, List modelDeps )
-    {
-        Map depsMap = new LinkedHashMap();
-
-        if ( modelDeps != null )
-        {
-            for ( Iterator it = modelDeps.iterator(); it.hasNext(); )
-            {
-                Dependency dependency = (Dependency) it.next();
-                depsMap.put( dependency.getManagementKey(), dependency );
-            }
-        }
-
-        if ( profileDeps != null )
-        {
-            for ( Iterator it = profileDeps.iterator(); it.hasNext(); )
-            {
-                Dependency dependency = (Dependency) it.next();
-                depsMap.put( dependency.getManagementKey(), dependency );
-            }
-        }
-
-        return new ArrayList( depsMap.values() );
-    }
-
-    private static void mergeResourceLists( List childResources, List parentResources )
-    {
-        for ( Iterator i = parentResources.iterator(); i.hasNext(); )
-        {
-            Resource r = (Resource) i.next();
-            if ( !childResources.contains( r ) )
-            {
-                childResources.add( r );
-            }
-        }
-    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 MOV83 INS43 INS42 MOV44 MOV44 INS8 INS43 INS42 MOV44 INS43 INS83 UPD43 UPD42 INS43 INS42 MOV60 MOV60 MOV21 MOV21 INS54 INS54 MOV60 MOV21 MOV60 INS54 MOV60 INS70 INS60 MOV60 MOV60 INS54 UPD42 MOV42 UPD42 MOV42 INS54 INS41 UPD42 UPD43 UPD42 UPD42 MOV42 INS54 UPD43 UPD43 INS8 INS12 INS8 INS12 INS74 INS74 INS8 INS12 INS74 INS44 INS42 INS8 INS43 INS59 UPD43 UPD43 INS8 INS12 INS27 UPD43 UPD43 UPD43 INS8 INS8 INS14 UPD42 INS8 INS12 UPD42 UPD42 UPD42 UPD42 INS14 UPD42 UPD42 INS45 INS45 UPD42 UPD42 INS45 INS45 MOV21 MOV21 INS44 INS8 MOV60 MOV60 MOV60 INS21 MOV21 MOV21 MOV60 INS21 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 INS44 INS8 INS43 MOV43 UPD42 UPD42 UPD42 INS40 MOV43 INS43 INS42 INS21 INS44 INS8 MOV43 INS43 UPD42 UPD43 MOV43 UPD42 MOV42 MOV25 UPD42 MOV42 INS42 INS14 UPD42 UPD42 UPD42 INS42 INS21 INS41 INS44 INS8 INS42 INS33 INS53 UPD42 UPD42 INS14 UPD42 UPD42 INS33 UPD42 UPD42 INS21 MOV21 MOV25 INS43 INS14 INS41 INS44 INS8 UPD43 INS43 UPD43 MOV43 UPD42 MOV42 UPD43 UPD43 UPD43 INS7 INS7 INS7 UPD43 INS32 UPD43 INS7 INS7 INS7 UPD43 MOV43 UPD42 MOV42 INS41 UPD42 MOV42 UPD43 INS40 UPD42 MOV42 INS7 UPD43 MOV43 UPD42 MOV42 INS41 INS42 INS74 UPD42 INS27 INS8 INS43 INS14 UPD43 INS40 INS7 INS32 INS43 INS42 MOV21 INS41 INS14 INS43 UPD43 INS7 MOV8 UPD42 MOV42 UPD43 MOV43 MOV32 INS32 INS43 INS42 INS53 UPD42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 INS45 INS33 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS85 INS3 INS2 INS57 INS2 INS57 INS2 INS57 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS9 UPD42 UPD42 INS85 INS3 INS2 INS42 INS2 INS45 INS2 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 INS33 UPD42 INS42 INS32 UPD42 INS33 MOV43 INS43 INS32 INS38 INS38 INS21 UPD42 MOV42 INS43 UPD42 INS42 INS36 UPD42 MOV42 MOV32 UPD42 MOV42 INS32 INS33 INS43 INS45 UPD42 MOV42 UPD42 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS14 INS42 INS32 UPD42 MOV42 INS14 UPD43 UPD42 UPD42 INS45 INS5 INS34 INS42 INS34 INS43 INS42 INS34 MOV43 INS42 INS34 INS43 UPD42 UPD42 INS45 INS42 INS5 INS34 INS42 INS34 INS42 INS34 INS42 INS34 UPD42 MOV42 INS42 INS14 INS40 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS40 INS32 INS32 INS32 UPD42 MOV42 INS11 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 UPD42 INS43 INS85 UPD42 MOV42 INS42 INS43 INS85 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS40 MOV32 UPD42 MOV42 INS40 INS42 UPD42 MOV42 INS14 INS43 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS43 INS32 MOV32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS40 INS33 INS33 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 INS40 INS40 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS14 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL43 DEL14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL36 DEL42 DEL33 DEL27 DEL36 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL36 DEL42 DEL33 DEL27 DEL36 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL33 DEL42 DEL43 DEL42 DEL14 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL25 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL33 DEL27 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31