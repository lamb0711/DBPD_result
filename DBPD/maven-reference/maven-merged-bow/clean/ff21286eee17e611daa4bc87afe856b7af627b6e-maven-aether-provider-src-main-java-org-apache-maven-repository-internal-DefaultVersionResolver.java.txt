extracted readVersionInfoMap method
-        Metadata metadata;
-
-            metadata =
-                new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
-                                     Metadata.Nature.RELEASE );
+            Map<String, VersionInfo> infos = readVersionInfoMap( session, result, Metadata.Nature.RELEASE, null );
+
+            resolve( result, infos, RELEASE );
-            metadata =
-                new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML,
-                                     Metadata.Nature.RELEASE_OR_SNAPSHOT );
+            Map<String, VersionInfo> infos =
+                readVersionInfoMap( session, result, Metadata.Nature.RELEASE_OR_SNAPSHOT, null );
+
+            if ( !resolve( result, infos, LATEST ) )
+            {
+                resolve( result, infos, RELEASE );
+            }
+
+            if ( result.getVersion() != null && result.getVersion().endsWith( SNAPSHOT ) )
+            {
+                VersionRequest subRequest = new VersionRequest();
+                subRequest.setArtifact( artifact.setVersion( result.getVersion() ) );
+                if ( result.getRepository() instanceof RemoteRepository )
+                {
+                    subRequest.setRepositories( Collections.singletonList( (RemoteRepository) result.getRepository() ) );
+                }
+                else
+                {
+                    subRequest.setRepositories( request.getRepositories() );
+                }
+                VersionResult subResult = resolveVersion( session, subRequest );
+                result.setVersion( subResult.getVersion() );
+                result.setRepository( subResult.getRepository() );
+                for ( Exception exception : subResult.getExceptions() )
+                {
+                    result.addException( exception );
+                }
+            }
-                metadata = null;
+                result.setVersion( version );
+
+                return result;
-                metadata =
-                    new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), version, MAVEN_METADATA_XML,
-                                         Metadata.Nature.SNAPSHOT );
-            }
-        }
-        else
-        {
-            metadata = null;
-        }
+                Map<String, VersionInfo> infos =
+                                readVersionInfoMap( session, result, Metadata.Nature.SNAPSHOT, version );
-        if ( metadata == null )
-        {
-            result.setVersion( version );
-        }
-        else
-        {
-            List<MetadataRequest> metadataRequests = new ArrayList<MetadataRequest>( request.getRepositories().size() );
-
-            metadataRequests.add( new MetadataRequest( metadata, null, request.getRequestContext() ) );
-
-            RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
-
-            for ( RemoteRepository repository : request.getRepositories() )
-            {
-                MetadataRequest metadataRequest =
-                    new MetadataRequest( metadata, repository, request.getRequestContext() );
-                metadataRequest.setDeleteLocalCopyIfMissing( true );
-                metadataRequest.setFavorLocalRepository( true );
-                metadataRequest.setTrace( trace );
-                metadataRequests.add( metadataRequest );
-            }
-
-            List<MetadataResult> metadataResults = metadataResolver.resolveMetadata( session, metadataRequests );
-
-            Map<String, VersionInfo> infos = new HashMap<String, VersionInfo>();
-
-            for ( MetadataResult metadataResult : metadataResults )
-            {
-                result.addException( metadataResult.getException() );
-
-                ArtifactRepository repository = metadataResult.getRequest().getRepository();
-                if ( repository == null )
-                {
-                    repository = session.getLocalRepository();
-                }
-
-                Versioning versioning = readVersions( session, trace, metadataResult.getMetadata(), repository, result );
-                merge( artifact, infos, versioning, repository );
-            }
-
-            if ( RELEASE.equals( version ) )
-            {
-                resolve( result, infos, RELEASE );
-            }
-            else if ( LATEST.equals( version ) )
-            {
-                if ( !resolve( result, infos, LATEST ) )
-                {
-                    resolve( result, infos, RELEASE );
-                }
-
-                if ( result.getVersion() != null && result.getVersion().endsWith( SNAPSHOT ) )
-                {
-                    VersionRequest subRequest = new VersionRequest();
-                    subRequest.setArtifact( artifact.setVersion( result.getVersion() ) );
-                    if ( result.getRepository() instanceof RemoteRepository )
-                    {
-                        subRequest.setRepositories( Collections.singletonList( (RemoteRepository) result.getRepository() ) );
-                    }
-                    else
-                    {
-                        subRequest.setRepositories( request.getRepositories() );
-                    }
-                    VersionResult subResult = resolveVersion( session, subRequest );
-                    result.setVersion( subResult.getVersion() );
-                    result.setRepository( subResult.getRepository() );
-                    for ( Exception exception : subResult.getExceptions() )
-                    {
-                        result.addException( exception );
-                    }
-                }
-            }
-            else
-            {
+
+
+        }
+        else
+        {
+            result.setVersion( version );
-            if ( StringUtils.isEmpty( result.getVersion() ) )
-            {
-                throw new VersionResolutionException( result );
-            }
+            return result;
+        }
-            if ( cacheKey != null && isSafelyCacheable( session, artifact ) )
-            {
-                cache.put( session, cacheKey, new Record( result.getVersion(), result.getRepository() ) );
-            }
+        if ( StringUtils.isEmpty( result.getVersion() ) )
+        {
+            throw new VersionResolutionException( result );
+        }
+
+        if ( cacheKey != null && isSafelyCacheable( session, artifact ) )
+        {
+            cache.put( session, cacheKey, new Record( result.getVersion(), result.getRepository() ) );
+    private Map<String, VersionInfo> readVersionInfoMap( RepositorySystemSession session, VersionResult result,
+                                                         Metadata.Nature nature, String version )
+    {
+        VersionRequest request = result.getRequest();
+        Artifact artifact = request.getArtifact();
+
+        Metadata metadata =
+            new DefaultMetadata( artifact.getGroupId(), artifact.getArtifactId(), version, MAVEN_METADATA_XML, nature );
+
+        RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
+
+        List<MetadataRequest> metadataRequests = new ArrayList<MetadataRequest>( request.getRepositories().size() + 1 );
+
+        metadataRequests.add( new MetadataRequest( metadata, null, request.getRequestContext() ) );
+
+        for ( RemoteRepository repository : request.getRepositories() )
+        {
+            MetadataRequest metadataRequest = new MetadataRequest( metadata, repository, request.getRequestContext() );
+            metadataRequest.setDeleteLocalCopyIfMissing( true );
+            metadataRequest.setFavorLocalRepository( true );
+            metadataRequest.setTrace( trace );
+
+            metadataRequests.add( metadataRequest );
+        }
+
+        List<MetadataResult> metadataResults = metadataResolver.resolveMetadata( session, metadataRequests );
+
+        Map<String, VersionInfo> infos = new HashMap<String, VersionInfo>();
+
+        for ( MetadataResult metadataResult : metadataResults )
+        {
+            result.addException( metadataResult.getException() );
+
+            ArtifactRepository repository = metadataResult.getRequest().getRepository();
+            if ( repository == null )
+            {
+                repository = session.getLocalRepository();
+            }
+
+            Versioning versioning = readVersions( session, trace, metadataResult.getMetadata(), repository, result );
+
+            merge( request.getArtifact(), infos, versioning, repository );
+        }
+
+        return infos;
+    }
+

INS31 INS83 INS74 INS42 INS44 INS44 INS44 INS44 MOV8 MOV60 MOV25 MOV25 MOV25 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS59 INS43 INS59 MOV43 INS59 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV14 INS74 INS59 INS60 MOV32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS43 INS42 INS32 INS74 INS59 MOV60 INS25 INS21 INS41 MOV32 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS43 INS43 INS43 INS42 INS32 MOV27 MOV8 MOV8 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS33 INS41 INS60 INS42 INS42 INS42 MOV32 INS42 INS74 INS59 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 DEL42 DEL33 DEL7 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL14 DEL7 DEL21 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL40