various straightening up

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@220244 13f79535-47bb-0310-9956-ffa450edef68

-        if ( artifact == null )
+        if ( artifact != null )
-            return;
-        }
+            // ----------------------------------------------------------------------
+            // Check for the existence of the artifact in the specified local
+            // ArtifactRepository. If it is present then simply return as the
+            // request for resolution has been satisfied.
+            // ----------------------------------------------------------------------
-        // ----------------------------------------------------------------------
-        // Check for the existence of the artifact in the specified local
-        // ArtifactRepository. If it is present then simply return as the
-        // request for resolution has been satisfied.
-        // ----------------------------------------------------------------------
+            String localPath = localRepository.pathOf( artifact );
-        String localPath = localRepository.pathOf( artifact );
+            artifact.setFile( new File( localRepository.getBasedir(), localPath ) );
-        artifact.setFile( new File( localRepository.getBasedir(), localPath ) );
-
-        // TODO: better to have a transform manager, or reuse the handler manager again so we don't have these requirements duplicated all over?
-        for ( Iterator i = artifactTransformations.iterator(); i.hasNext(); )
-        {
-            ArtifactTransformation transform = (ArtifactTransformation) i.next();
-            try
+            // TODO: better to have a transform manager, or reuse the handler manager again so we don't have these requirements duplicated all over?
+            for ( Iterator i = artifactTransformations.iterator(); i.hasNext(); )
-                transform.transformForResolve( artifact, remoteRepositories, localRepository );
-            }
-            catch ( ArtifactMetadataRetrievalException e )
-            {
-                throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
-            }
-        }
-
-        File destination = artifact.getFile();
-        if ( !destination.exists() )
-        {
-            try
-            {
-                if ( artifact.getRepository() != null )
+                ArtifactTransformation transform = (ArtifactTransformation) i.next();
+                try
-                    // the transformations discovered the artifact - so use it exclusively
-                    wagonManager.getArtifact( artifact, artifact.getRepository(), destination );
+                    transform.transformForResolve( artifact, remoteRepositories, localRepository );
-                else
+                catch ( ArtifactMetadataRetrievalException e )
-                    wagonManager.getArtifact( artifact, remoteRepositories, destination );
-                }
-
-                // must be after the artifact is downloaded
-                for ( Iterator i = artifact.getMetadataList().iterator(); i.hasNext(); )
-                {
-                    ArtifactMetadata metadata = (ArtifactMetadata) i.next();
-                    metadata.storeInLocalRepository( localRepository );
+                    throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
-            catch ( ResourceDoesNotExistException e )
+
+            File destination = artifact.getFile();
+            if ( !destination.exists() )
-                throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
-            }
-            catch ( TransferFailedException e )
-            {
-                throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
-            }
-            catch ( ArtifactMetadataRetrievalException e )
-            {
-                throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                try
+                {
+                    if ( artifact.getRepository() != null )
+                    {
+                        // the transformations discovered the artifact - so use it exclusively
+                        wagonManager.getArtifact( artifact, artifact.getRepository(), destination );
+                    }
+                    else
+                    {
+                        wagonManager.getArtifact( artifact, remoteRepositories, destination );
+                    }
+
+                    // must be after the artifact is downloaded
+                    for ( Iterator i = artifact.getMetadataList().iterator(); i.hasNext(); )
+                    {
+                        ArtifactMetadata metadata = (ArtifactMetadata) i.next();
+                        metadata.storeInLocalRepository( localRepository );
+                    }
+                }
+                catch ( ResourceDoesNotExistException e )
+                {
+                    throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                }
+                catch ( TransferFailedException e )
+                {
+                    throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                }
+                catch ( ArtifactMetadataRetrievalException e )
+                {
+                    throw new ArtifactResolutionException( e.getMessage(), artifact, remoteRepositories, e );
+                }

INS8 INS25 INS27 MOV8 INS42 INS33 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25