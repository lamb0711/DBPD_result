o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.util.Properties;
+
-import java.io.File;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Properties;
-
- * @version $Id$
- * @todo belong in MavenSession, so it only gets created once?
-    private static final Map BANNED_EXPRESSIONS;
+    private MavenSession session;
-    private static final Map DEPRECATED_EXPRESSIONS;
+    private MojoExecution mojoExecution;
-    static
+    private MavenProject project;
+
+    private String basedir;
+
+    private Properties properties;    
+
+    @Deprecated //TODO: used by the Enforcer plugin
+    public PluginParameterExpressionEvaluator( MavenSession session, MojoExecution mojoExecution, PathTranslator pathTranslator, Logger logger, MavenProject project, Properties properties )    
-        Map deprecated = new HashMap();
-
-        deprecated.put( "project.build.resources", "project.resources" );
-        deprecated.put( "project.build.testResources", "project.testResources" );
-
-        DEPRECATED_EXPRESSIONS = deprecated;
-
-        Map banned = new HashMap();
-
-        BANNED_EXPRESSIONS = banned;
+        this( session, mojoExecution );
+    }
+    
+    public PluginParameterExpressionEvaluator( MavenSession session )
+    {
+        this( session, null );
-    private final PathTranslator pathTranslator;
-
-    private final MavenSession context;
-
-    private final Logger logger;
-
-    private final MojoExecution mojoExecution;
-
-    private final MavenProject project;
-
-    private final String basedir;
-
-    private final Properties properties;
-
-    public PluginParameterExpressionEvaluator( MavenSession context,
-                                               MojoExecution mojoExecution,
-                                               PathTranslator pathTranslator,
-                                               Logger logger,
-                                               Properties properties )
+    public PluginParameterExpressionEvaluator( MavenSession session, MojoExecution mojoExecution )
-        this.context = context;
+        this.session = session;
-        this.pathTranslator = pathTranslator;
-        this.logger = logger;
-        this.properties = properties;
-        project = context.getCurrentProject();
-
+        this.properties = session.getExecutionProperties();
+        this.project = session.getCurrentProject();
+        
-        if ( ( basedir == null ) && ( context != null ) )
+        if ( ( basedir == null ) && ( session != null ) )
-            basedir = context.getExecutionRootDirectory();
-        }
-
-        if ( basedir == null )
-        {
-            basedir = System.getProperty( "user.dir" );
-        }
-
-        this.basedir = basedir;
-    }
-
-    /**
-     * @deprecated Use {@link PluginParameterExpressionEvaluator#PluginParameterExpressionEvaluator(MavenSession, MojoExecution, PathTranslator, LifecycleExecutionContext, Logger, Properties)}
-     * instead.
-     */
-    @Deprecated
-    public PluginParameterExpressionEvaluator( MavenSession context,
-                                               MojoExecution mojoExecution,
-                                               PathTranslator pathTranslator,
-                                               Logger logger,
-                                               MavenProject project,
-                                               Properties properties )
-    {
-        this.context = context;
-        this.mojoExecution = mojoExecution;
-        this.pathTranslator = pathTranslator;
-        this.logger = logger;
-        this.properties = properties;
-
-        this.project = project;
-
-        String basedir = null;
-
-        if ( project != null )
-        {
-            File projectFile = project.getFile();
-
-            // this should always be the case for non-super POM instances...
-            if ( projectFile != null )
-            {
-                basedir = projectFile.getParentFile().getAbsolutePath();
-            }
+            basedir = session.getExecutionRootDirectory();
-        if ( BANNED_EXPRESSIONS.containsKey( expression ) )
-        {
-            throw new ExpressionEvaluationException( "The parameter expression: \'" + expression +
-                "\' used in mojo: \'" + mojoDescriptor.getGoal() + "\' is banned. Use \'" +
-                BANNED_EXPRESSIONS.get( expression ) + "\' instead." );
-        }
-        else if ( DEPRECATED_EXPRESSIONS.containsKey( expression ) )
-        {
-            logger.warn( "The parameter expression: \'" + expression + "\' used in mojo: \'" +
-                mojoDescriptor.getGoal() + "\' has been deprecated. Use \'" + DEPRECATED_EXPRESSIONS.get( expression ) +
-                "\' instead." );
-        }
-            value = context.getLocalRepository();
+            value = session.getLocalRepository();
-            value = context;
+            value = session;
-            value = context.getSortedProjects();
-        }
-        else if ( "reports".equals( expression ) )
-        {
-            value = context.getReports();
+            value = session.getProjects();
-        {
+        {            
-            }
+            }            
-                }
+                }                
-                // TODO: don't catch exception
-                throw new ExpressionEvaluationException( "Error evaluating plugin parameter expression: " + expression,
-                                                         e );
+                e.printStackTrace();
+                throw new ExpressionEvaluationException( "Error evaluating plugin parameter expression: " + expression, e );
-        }
+        }       
-            value = context.getSettings();
+            value = session.getSettings();
-                    value = ReflectionValueExtractor.evaluate( pathExpression, context.getSettings() );
+                    value = ReflectionValueExtractor.evaluate( pathExpression, session.getSettings() );
-                    value = ReflectionValueExtractor.evaluate( expression.substring( 1 ), context.getSettings() );
+                    value = ReflectionValueExtractor.evaluate( expression.substring( 1 ), session.getSettings() );
-            else
-            {
-                logger.error( "Got expression '" + expression + "' that was not recognised" );
-            }
-        File basedir;
-
-        if ( ( project != null ) && ( project.getFile() != null ) )
+        // TODO: Copied from the DefaultInterpolator. We likely want to resurrect the PathTranslator or at least a
+        // similar component for re-usage
+        if ( file != null )
-            basedir = project.getFile().getParentFile();
+            if ( file.isAbsolute() )
+            {
+                // path was already absolute, just normalize file separator and we're done
+            }
+            else if ( file.getPath().startsWith( File.separator ) )
+            {
+                // drive-relative Windows path, don't align with project directory but with drive root
+                file = file.getAbsoluteFile();
+            }
+            else
+            {
+                // an ordinary relative path, align with project directory
+                file = new File( new File( basedir, file.getPath() ).toURI().normalize() ).getAbsoluteFile();
+            }
-        else if ( ( context != null ) && ( context.getExecutionRootDirectory() != null ) )
-        {
-            basedir = new File( context.getExecutionRootDirectory() ).getAbsoluteFile();
-        }
-        else
-        {
-            basedir = new File( "." ).getAbsoluteFile().getParentFile();
-        }
-
-        return new File( pathTranslator.alignToBaseDirectory( file.getPath(), basedir ) );
+        return file;

MOV26 MOV26 MOV31 INS31 MOV43 MOV78 INS83 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 INS44 INS8 UPD42 UPD42 INS17 MOV43 INS42 INS17 UPD42 MOV25 INS42 INS42 INS42 INS33 MOV32 INS27 INS8 INS42 UPD42 INS32 MOV22 MOV32 UPD42 MOV42 MOV33 INS25 UPD42 INS42 INS42 UPD42 MOV32 INS32 INS8 INS25 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 MOV8 MOV8 UPD42 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS14 UPD42 MOV43 INS32 INS32 UPD42 MOV42 MOV14 INS42 MOV43 INS42 MOV32 INS21 INS32 UPD42 INS42 INS42 MOV43 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65 DEL83 DEL83 DEL42 DEL43 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL8 DEL28 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL83 DEL66 DEL42 DEL42 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL32 DEL14 DEL42 DEL43 DEL45 DEL32 DEL27 DEL36 DEL32 DEL33 DEL27 DEL36 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL33 DEL27 DEL36 DEL27 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14