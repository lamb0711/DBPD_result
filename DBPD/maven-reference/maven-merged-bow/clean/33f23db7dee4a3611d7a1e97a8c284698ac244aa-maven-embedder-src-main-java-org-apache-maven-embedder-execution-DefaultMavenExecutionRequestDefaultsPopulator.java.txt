* Migrating to wagon-manager 1.0-beta-3-SNAPSHOT
* Created org.apache.maven.artifact.manager.ArtifactManager
* Deprecated org.apache.maven.artifact.manager.WagonManager in favor of new ArtifactManager
* Updated the rest of maven to utilize this new ArtifactManager.
* The default wagon providers list is now managed from within wagon-manager's dependency list.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@505520 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.util.Iterator;
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
-import org.apache.maven.monitor.event.DefaultEventMonitor;
-import org.apache.maven.plugin.Mojo;
-import org.apache.maven.settings.Settings;
-import org.apache.maven.settings.Proxy;
-import org.apache.maven.settings.Server;
-import org.apache.maven.settings.Mirror;
-import org.apache.maven.usability.SystemWarnings;
-import org.apache.maven.artifact.manager.WagonManager;
+import org.apache.maven.monitor.event.DefaultEventMonitor;
+import org.apache.maven.plugin.Mojo;
+import org.apache.maven.settings.Mirror;
+import org.apache.maven.settings.Proxy;
+import org.apache.maven.settings.Server;
+import org.apache.maven.settings.Settings;
+import org.apache.maven.usability.SystemWarnings;
+import org.apache.maven.wagon.manager.RepositorySettings;
+import org.apache.maven.wagon.manager.WagonManager;
+import org.apache.maven.wagon.repository.Repository;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.context.ContextException;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
-import org.codehaus.plexus.context.ContextException;
-import org.codehaus.plexus.context.Context;
-import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.util.StringUtils;
+import java.io.File;
+import java.util.Iterator;
+
+/**
+ * DefaultMavenExecutionRequestDefaultsPopulator 
+ *
+ * @version $Id$
+ */
-	implements MavenExecutionRequestDefaultsPopulator, Contextualizable
+    implements MavenExecutionRequestDefaultsPopulator, Contextualizable
-	private MavenTools mavenTools;
-	
-	private ArtifactRepositoryFactory artifactRepositoryFactory;
+    private MavenTools mavenTools;
+
+    private ArtifactRepositoryFactory artifactRepositoryFactory;
-    public MavenExecutionRequest populateDefaults(MavenExecutionRequest request)
+    private WagonManager wagonManager;
+
+    public MavenExecutionRequest populateDefaults( MavenExecutionRequest request )
-		// Settings
+        // Settings
-                request.setSettings( mavenTools.buildSettings( userSettingsPath, globalSettingsFile, request.isInteractiveMode(),
-                                                         request.isOffline(), request.isUsePluginRegistry(),
-                                                         request.isUsePluginUpdateOverride() ) );
+                request.setSettings( mavenTools.buildSettings( userSettingsPath, globalSettingsFile, request
+                    .isInteractiveMode(), request.isOffline(), request.isUsePluginRegistry(), request
+                    .isUsePluginUpdateOverride() ) );
-        
+
-            }                        
+            }
-        
+
-        
+
-        if ( !snapshotPolicySet ) {
+        if ( !snapshotPolicySet )
+        {
-                getLogger().info( "+ Supressing SNAPSHOT updates.");
+                getLogger().info( "+ Supressing SNAPSHOT updates." );
-        artifactRepositoryFactory.setGlobalChecksumPolicy( request.getGlobalChecksumPolicy() );        
+        artifactRepositoryFactory.setGlobalChecksumPolicy( request.getGlobalChecksumPolicy() );
-        // Wagon        
+        // Wagon
+
+        wagonManager.setOnline( !request.isOffline() );
-            WagonManager wagonManager = null;
-
-            try
+            if ( request.isOffline() )
-                wagonManager = (WagonManager) container.lookup( WagonManager.ROLE );
-
-                if ( request.isOffline() )
-                {
-                    wagonManager.setOnline( false );
-                }
-                else
-                {
-                    wagonManager.setInteractive( request.isInteractiveMode() );
-
-                    wagonManager.setDownloadMonitor( request.getTransferListener() );
-
-                    wagonManager.setOnline( true );
-                }
+                wagonManager.setOnline( false );
-            catch ( ComponentLookupException e )
+            else
-                throw new MavenEmbedderException( "Cannot retrieve WagonManager in order to set offline mode.", e );
-            }
-            finally
-            {
-                try
-                {
-                    container.release( wagonManager );
-                }
-                catch ( ComponentLifecycleException e )
-                {
-                    getLogger().warn( "Cannot release WagonManager.", e );
-                }
+                wagonManager.setInteractive( request.isInteractiveMode() );
+
+                wagonManager.addTransferListener( request.getTransferListener() );
+
+                wagonManager.setOnline( true );
-        catch ( ComponentLookupException e )
-        {
-            throw new MavenEmbedderException( "Unable to configure Maven for execution", e );
-        }
-        catch ( ComponentLifecycleException e )
-        {
-            throw new MavenEmbedderException( "Unable to configure Maven for execution", e );
-        }
-        throws ComponentLookupException, ComponentLifecycleException, SettingsConfigurationException
+        throws SettingsConfigurationException
-        WagonManager wagonManager = (WagonManager) container.lookup( WagonManager.ROLE );
+        Proxy proxy = settings.getActiveProxy();
-        try
+        if ( proxy != null )
-            Proxy proxy = settings.getActiveProxy();
-
-            if ( proxy != null )
+            if ( proxy.getHost() == null )
-                if ( proxy.getHost() == null )
-                {
-                    throw new SettingsConfigurationException( "Proxy in settings.xml has no host" );
-                }
-
-                wagonManager.addProxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), proxy.getUsername(),
-                                       proxy.getPassword(), proxy.getNonProxyHosts() );
+                throw new SettingsConfigurationException( "Proxy in settings.xml has no host" );
-            for ( Iterator i = settings.getServers().iterator(); i.hasNext(); )
+            wagonManager.addProxy( proxy.getProtocol(), proxy.getHost(), proxy.getPort(), proxy.getUsername(), proxy
+                .getPassword(), proxy.getNonProxyHosts() );
+        }
+
+        for ( Iterator i = settings.getServers().iterator(); i.hasNext(); )
+        {
+            Server server = (Server) i.next();
+
+            RepositorySettings repoSetting = wagonManager.getRepositorySettings( server.getId() );
+
+            repoSetting.setAuthentication( server.getUsername(), server.getPassword(), server.getPrivateKey(), server
+                .getPassphrase() );
+
+            repoSetting
+                .setPermissions( /* group */null, server.getFilePermissions(), server.getDirectoryPermissions() );
+
+            if ( server.getConfiguration() != null )
-                Server server = (Server) i.next();
-
-                wagonManager.addAuthenticationInfo( server.getId(), server.getUsername(), server.getPassword(),
-                                                    server.getPrivateKey(), server.getPassphrase() );
-
-                wagonManager.addPermissionInfo( server.getId(), server.getFilePermissions(),
-                                                server.getDirectoryPermissions() );
-
-                if ( server.getConfiguration() != null )
-                {
-                    wagonManager.addConfiguration( server.getId(), (Xpp3Dom) server.getConfiguration() );
-                }
-            }
-
-            for ( Iterator i = settings.getMirrors().iterator(); i.hasNext(); )
-            {
-                Mirror mirror = (Mirror) i.next();
-
-                wagonManager.addMirror( mirror.getId(), mirror.getMirrorOf(), mirror.getUrl() );
+                repoSetting.setConfiguration( new XmlPlexusConfiguration( (Xpp3Dom) server.getConfiguration() ) );
-        finally
+
+        for ( Iterator i = settings.getMirrors().iterator(); i.hasNext(); )
-            container.release( wagonManager );
+            Mirror mirror = (Mirror) i.next();
+            
+            try
+            {
+                wagonManager.addRepositoryMirror( mirror.getMirrorOf(), mirror.getId(), mirror.getUrl() );
+            }
+            catch ( IllegalArgumentException e )
+            {
+                throw new SettingsConfigurationException( "Unable to configure mirror " + mirror + ": "
+                    + e.getMessage(), e );
+            }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 UPD40 INS40 UPD40 UPD40 INS29 INS23 INS65 INS65 INS83 MOV43 INS59 MOV8 INS66 INS66 INS42 INS21 INS32 MOV8 INS42 INS42 INS38 MOV21 INS60 INS54 INS32 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS33 MOV21 INS44 INS8 INS42 INS42 MOV32 MOV32 INS43 INS42 INS53 UPD42 UPD42 UPD42 INS14 UPD42 INS42 INS14 INS43 MOV11 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8