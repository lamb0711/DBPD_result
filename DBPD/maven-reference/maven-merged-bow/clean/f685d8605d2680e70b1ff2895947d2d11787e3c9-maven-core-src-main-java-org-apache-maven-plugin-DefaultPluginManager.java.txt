Resolving: MNG-449, MNG-152, MNG-1090, MNG-1089, MNG-1122

o Removed -cpl and related command line switches for controlling use of LATEST metadata for resolving plugin versions
o Made LATEST the only metadata used to resolve plugin versions, since this is also available when releases are performed
o Added various error diagnostics for project build exceptions
o Enhanced artifact not found error diagnostics
o Removed maven-project and added maven-artifact to maven-surefire-plugin's pom
o Removed the stanza that added pluginArtifacts to the test-booter's classpath...they are already covered by the classpathElements
o Fixed ITs in connection to the removal of -cpl
o Changed the plugin manager to detect whether a plugin's artifact file has changed since the plugin container was created...if so, reload it.
o Took the projecthelp plugin out of the build until I can diagnose the problems with its build (probably tomorrow).



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312827 13f79535-47bb-0310-9956-ffa450edef68

-        if ( !pluginCollector.isPluginInstalled( plugin ) || container.getChildContainer( plugin.getKey() ) == null )
+        try
-            try
+            VersionRange versionRange = VersionRange.createFromVersionSpec( plugin.getVersion() );
+
+            List remoteRepositories = new ArrayList();
+            remoteRepositories.addAll( project.getPluginArtifactRepositories() );
+            remoteRepositories.addAll( project.getRemoteArtifactRepositories() );
+
+            checkRequiredMavenVersion( plugin, localRepository, remoteRepositories );
+            
+            Artifact pluginArtifact = artifactFactory.createPluginArtifact( plugin.getGroupId(),
+                                                                            plugin.getArtifactId(), versionRange );
+            
+            pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
+
+            artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
+
+            if ( !pluginArtifact.isResolved() )
-                VersionRange versionRange = VersionRange.createFromVersionSpec( plugin.getVersion() );
+                throw new PluginContainerException( plugin, "Cannot resolve artifact for plugin." );
+            }
-                List remoteRepositories = new ArrayList();
-                remoteRepositories.addAll( project.getPluginArtifactRepositories() );
-                remoteRepositories.addAll( project.getRemoteArtifactRepositories() );
-
-                checkRequiredMavenVersion( plugin, localRepository, remoteRepositories );
-
-                Artifact pluginArtifact = artifactFactory.createPluginArtifact( plugin.getGroupId(),
-                                                                                plugin.getArtifactId(), versionRange );
+            PlexusContainer pluginContainer = container.getChildContainer( plugin.getKey() );
+            
+            File pluginFile = pluginArtifact.getFile();
+            
+            if ( !pluginCollector.isPluginInstalled( plugin ) || pluginContainer == null )
+            {
-
-                project.addPlugin( plugin );
-            catch ( ArtifactNotFoundException e )
+            else if ( pluginFile.lastModified() > pluginContainer.getCreationDate().getTime() )
-                String groupId = plugin.getGroupId();
-                String artifactId = plugin.getArtifactId();
-                String version = plugin.getVersion();
-
-                if ( groupId == null || artifactId == null || version == null )
-                {
-                    throw new PluginNotFoundException( e );
-                }
-                else if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
-                    version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
-                {
-                    throw new PluginNotFoundException( e );
-                }
-                else
-                {
-                    throw e;
-                }
+                getLogger().info( "Reloading plugin container for: " + plugin.getKey() + ". The plugin artifact has changed." );
+                
+                pluginContainer.dispose();
+                
+                addPlugin( plugin, pluginArtifact, project, localRepository );
-            catch ( InvalidVersionSpecificationException e )
+
+            project.addPlugin( plugin );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            String groupId = plugin.getGroupId();
+            String artifactId = plugin.getArtifactId();
+            String version = plugin.getVersion();
+
+            if ( groupId == null || artifactId == null || version == null )
-                throw new PluginVersionResolutionException( plugin.getGroupId(), plugin.getArtifactId(),
-                                                            "Invalid version specification", e );
+                throw new PluginNotFoundException( e );
+            }
+            else if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&
+                version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
+            {
+                throw new PluginNotFoundException( e );
+            }
+            else
+            {
+                throw e;
-
+        catch ( InvalidVersionSpecificationException e )
+        {
+            throw new PluginVersionResolutionException( plugin.getGroupId(), plugin.getArtifactId(),
+                                                        "Invalid version specification", e );
+        }
+        
-        pluginArtifact = project.replaceWithActiveArtifact( pluginArtifact );
-
-        artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );
-
-        if ( !pluginArtifact.isResolved() )
-        {
-            throw new PluginContainerException( plugin, "Cannot resolve artifact for plugin." );
-        }
-
-            throw new MojoExecutionException( "Error looking up plugin: ", e );
+            throw new MojoExecutionException( "Error looking up mojo: " + goalName, e );
+        

MOV8 MOV41 MOV21 MOV21 MOV25 INS60 INS60 INS25 INS43 INS59 INS43 INS59 MOV27 INS8 INS25 INS42 INS42 MOV32 INS42 INS42 INS32 INS21 INS27 INS8 INS42 INS42 INS42 INS32 INS32 INS32 INS21 INS21 MOV21 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 DEL25 DEL8 DEL45