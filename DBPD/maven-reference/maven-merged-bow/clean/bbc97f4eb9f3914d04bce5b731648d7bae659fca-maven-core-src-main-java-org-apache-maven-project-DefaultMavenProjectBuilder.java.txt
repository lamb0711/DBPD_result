o Removed static processor context and move its remaining bits into the project builder

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@778441 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-import org.apache.maven.model.ProcessorContext;
+import org.apache.maven.model.inheritance.InheritanceAssembler;
+import org.apache.maven.model.management.ManagementInjector;
+import org.apache.maven.model.profile.ProfileInjector;
+    private InheritanceAssembler inheritanceAssembler;
+
+    @Requirement
+    private ProfileInjector profileInjector;
+
+    @Requirement
+    private ManagementInjector managementInjector;
+
+    @Requirement
-            List<Profile> externalProfiles = new ArrayList<Profile>();
-                    logger.debug( "Merging profile into model (build): Model = " + domainModel.getId() + ", Profile = " + p.getId() );
-                    externalProfiles.add( p );
+                    logger.debug( "Merging profile into model (build): Model = " + domainModel.getId() + ", Profile = "
+                        + p.getId() );
+                    profileInjector.injectProfile( domainModel.getModel(), p );
-
-            domainModel = ProcessorContext.mergeProfilesIntoModel( externalProfiles, domainModel );
-            ProcessorContext.processManagementNodes( model );
+            managementInjector.injectManagement( model );
+                        profileInjector.injectProfile( dm.getModel(), p );
-                    profileModels.add( ProcessorContext.mergeProfilesIntoModel( profiles, dm ) );
-                }
-                else
-                {
-                    profileModels.add( dm );
-            else
-            {
-                profileModels.add( dm );
-            }
+            profileModels.add( dm );
-        DomainModel transformedDomainModel = ProcessorContext.build( profileModels, listeners );
+        DomainModel transformedDomainModel = build( profileModels, listeners );
+    /**
+     * Parent domain models on bottom.
+     * 
+     * @param domainModels
+     * @param listeners
+     * @return
+     * @throws IOException
+     */
+    private DomainModel build( List<DomainModel> domainModels, List<ModelEventListener> listeners )
+        throws IOException
+    {
+        DomainModel child = null;
+        for ( DomainModel domainModel : domainModels )
+        {
+            if ( domainModel.isMostSpecialized() )
+            {
+                child = domainModel;
+            }
+        }
+        if ( child == null )
+        {
+            throw new IOException( "Could not find child model" );
+        }
+
+        Model target = processModelsForInheritance( convertDomainModelsToMavenModels( domainModels ) );
+        if ( listeners != null )
+        {
+            for ( ModelEventListener listener : listeners )
+            {
+                listener.fire( target );
+            }
+        }
+        DomainModel domainModel = new DomainModel( target, child.isMostSpecialized() );
+        domainModel.setProjectDirectory( child.getProjectDirectory() );
+        domainModel.setParentFile( child.getParentFile() );
+
+        return domainModel;
+    }
+
+    private List<Model> convertDomainModelsToMavenModels( List<DomainModel> domainModels )
+        throws IOException
+    {
+        List<Model> models = new ArrayList<Model>();
+        for ( DomainModel domainModel : domainModels )
+        {
+            DomainModel dm = domainModel;
+            if ( dm.getModel() != null )
+            {
+                if ( dm.isMostSpecialized() )
+                {
+                    models.add( 0, dm.getModel() );
+                }
+                else
+                {
+                    models.add( dm.getModel() );
+                }
+
+            }
+            else
+            {
+                throw new IOException( "model: null" );
+            }
+
+        }
+
+        return models;
+    }
+
+    private Model processModelsForInheritance( List<Model> models )
+    {
+        Collections.reverse( models );
+
+        Model previousModel = null;
+
+        for ( Model currentModel : models )
+        {
+            inheritanceAssembler.assembleModelInheritance( currentModel, previousModel );
+            previousModel = currentModel;
+        }
+
+        return previousModel;
+    }
+

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS23 INS23 INS23 INS31 INS31 INS31 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS42 UPD74 MOV74 INS42 INS74 INS42 INS42 INS60 INS70 INS25 INS60 INS25 INS60 INS21 INS21 INS41 INS43 INS43 INS74 INS42 INS42 MOV60 INS70 INS41 INS42 INS74 INS42 INS21 INS60 INS70 INS41 INS66 INS42 INS42 INS42 UPD43 INS43 INS43 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS43 INS43 INS74 INS44 INS42 INS8 INS42 INS43 INS43 INS32 INS43 INS59 INS44 INS42 INS8 INS42 MOV21 UPD42 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS25 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS43 UPD42 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS21 INS21 INS42 INS32 INS8 INS14 INS42 INS32 INS44 INS42 INS8 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS32 INS7 UPD42 UPD42 INS42 INS42 INS21 INS43 INS45 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS32 INS33 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS8 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS43 INS45 INS32 INS32 INS42 INS42 UPD42 INS32 INS21 INS42 INS42 INS34 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL42