o prepare to bring the project dependency downloading in directly after calculating the build plan

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773646 13f79535-47bb-0310-9956-ffa450edef68

+        logger.info(  "Build Order:" );
+        logger.info( "" );
+        for( MavenProject project : session.getProjects() )
+        {
+            logger.info( project.getName() );
+        }
+        logger.info( "" );
+        
-            long buildStartTime = System.currentTimeMillis();
-
-                    String target = currentProject.getId() + " ( " + goal + " )";
-                    executeGoalAndHandleFailures( goal, session, currentProject, buildStartTime, target );
+                    
+                    List<MojoExecution> lifecyclePlan = calculateLifecyclePlan( goal, session );        
+
+                    //TODO: once we have calculated the build plan then we should accurately be able to download
+                    // the project dependencies. Having it happen in the plugin manager is a tangled mess.
+                    
+                    if ( logger.isDebugEnabled() )
+                    {
+                        logger.debug( "=== BUILD PLAN ===" );
+                        logger.debug( "Project:       " + currentProject );
+                        for ( MojoExecution mojoExecution : lifecyclePlan )
+                        {
+                            MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
+                            PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
+                            logger.debug( "------------------" );
+                            logger.debug( "Goal:          " + pluginDescriptor.getGroupId() + ':' + pluginDescriptor.getArtifactId() + ':'
+                                + pluginDescriptor.getVersion() + ':' + mojoDescriptor.getGoal() + ':'
+                                + mojoExecution.getExecutionId() );
+                            logger.debug( "Configuration: " + String.valueOf( mojoExecution.getConfiguration() ) );
+                        }
+                        logger.debug( "==================" );
+                    }
+
+                    for ( MojoExecution mojoExecution : lifecyclePlan )
+                    {            
+                        try
+                        {                
+                            logger.info( executionDescription( mojoExecution, currentProject ) );
+                            pluginManager.executeMojo( session, mojoExecution );
+                        }
+                        catch ( PluginExecutionException e )
+                        {
+                            // This looks like a duplicate
+                            throw new LifecycleExecutionException( "Error executing goal.", e );                                        
+                        }
+                        catch ( PluginConfigurationException e )
+                        {
+                            // If the mojo can't actually be configured
+                            throw new LifecycleExecutionException( "Error executing goal.", e );                                        
+                        }
+                    }                         
-    }
-
-    private void executeGoalAndHandleFailures( String task, MavenSession session, MavenProject project, long buildStartTime, String target )
-        throws LifecycleExecutionException, MojoFailureException
-    {
-        try
-        {
-            executeGoal( task, session, project );
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            //TODO: Look at the reactor manager failure behavior
-            throw e;
-        }
-    }
-    
-    private void executeGoal( String task, MavenSession session, MavenProject project )
-        throws LifecycleExecutionException, MojoFailureException
-    {
-        List<MojoExecution> lifecyclePlan = calculateLifecyclePlan( task, session );        
-
-        if ( logger.isDebugEnabled() )
-        {
-            logger.debug( "=== BUILD PLAN ===" );
-            logger.debug( "Project:       " + project );
-            for ( MojoExecution mojoExecution : lifecyclePlan )
-            {
-                MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-                PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
-                logger.debug( "------------------" );
-                logger.debug( "Goal:          " + pluginDescriptor.getGroupId() + ':' + pluginDescriptor.getArtifactId() + ':'
-                    + pluginDescriptor.getVersion() + ':' + mojoDescriptor.getGoal() + ':'
-                    + mojoExecution.getExecutionId() );
-                logger.debug( "Configuration: " + String.valueOf( mojoExecution.getConfiguration() ) );
-            }
-            logger.debug( "==================" );
-        }
-
-        for ( MojoExecution mojoExecution : lifecyclePlan )
-        {            
-            try
-            {                
-                logger.info( executionDescription( mojoExecution, project ) );
-//                mojoExecution.getMojoDescriptor().getRealm().display();
-//                System.out.println( "!!!");
-//                System.out.println( mojoExecution.getConfiguration() );
-                pluginManager.executeMojo( session, mojoExecution );
-            }
-            catch ( PluginExecutionException e )
-            {
-                // This looks like a duplicate
-                throw new LifecycleExecutionException( "Error executing goal.", e );                                        
-            }
-            catch ( PluginConfigurationException e )
-            {
-                // If the mojo can't actually be configured
-                throw new LifecycleExecutionException( "Error executing goal.", e );                                        
-            }
-        }         
-    }
+    }    

UPD83 UPD42 INS8 INS21 INS21 INS70 INS21 MOV60 MOV60 MOV25 MOV25 INS70 INS32 INS32 MOV44 INS32 INS8 INS32 MOV44 MOV32 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS21 INS42 INS42 INS45 MOV21 INS54 INS32 INS8 MOV8 INS42 INS42 INS32 MOV21 INS70 INS42 INS42 MOV44 INS42 MOV8 UPD42 UPD42 UPD42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL54 DEL8 DEL70 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44