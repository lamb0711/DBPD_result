Resolving: MNG-449, MNG-152, MNG-1090, MNG-1089, MNG-1122

o Removed -cpl and related command line switches for controlling use of LATEST metadata for resolving plugin versions
o Made LATEST the only metadata used to resolve plugin versions, since this is also available when releases are performed
o Added various error diagnostics for project build exceptions
o Enhanced artifact not found error diagnostics
o Removed maven-project and added maven-artifact to maven-surefire-plugin's pom
o Removed the stanza that added pluginArtifacts to the test-booter's classpath...they are already covered by the classpathElements
o Fixed ITs in connection to the removal of -cpl
o Changed the plugin manager to detect whether a plugin's artifact file has changed since the plugin container was created...if so, reload it.
o Took the projecthelp plugin out of the build until I can diagnose the problems with its build (probably tomorrow).



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312827 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-    // calculated.
+    // TODO: [jc] Revisit to remove this piece of state. PLUGIN REGISTRY MAY BE UPDATED ON DISK OUT-OF-PROCESS!
-        // before we do anything else, if this is a self-reference we need to short-circuit the resolution process.
-        String projectKey = constructPluginKey( project.getGroupId(), project.getArtifactId() );
-
-        if ( projectKey.equals( constructPluginKey( groupId, artifactId ) ) )
-        {
-            return project.getVersion();
-        }
-
-                    updatedVersion = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(),
-                                                         localRepository, Artifact.RELEASE_VERSION );
+                    updatedVersion = resolveMetaVersion( groupId, artifactId, project,
+                                                         localRepository, Artifact.LATEST_VERSION );
-        // are we using the LATEST metadata to resolve plugin version?
-        Boolean rtCheckLatest = settingsRTInfo.getCheckLatestPluginVersion();
-
-        boolean checkLatestMetadata = Boolean.TRUE.equals( rtCheckLatest ) || (
-            !Boolean.FALSE.equals( rtCheckLatest ) &&
-                Boolean.valueOf( getPluginRegistry( groupId, artifactId ).getCheckLatest() )
-                    .booleanValue() );
-
-        // third pass...if we're checking for latest install/deploy, retrieve the version for LATEST metadata and also
-        // set that resolved version as the <useVersion/> in settings.xml.
-        if ( StringUtils.isEmpty( version ) && checkLatestMetadata )
+        // third pass...we're always checking for latest install/deploy, so retrieve the version for LATEST metadata and
+        // also set that resolved version as the <useVersion/> in settings.xml.
+        if ( StringUtils.isEmpty( version ) )
-            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(), localRepository,
+            version = resolveMetaVersion( groupId, artifactId, project, localRepository,
+        // TODO: Remove this...it shouldn't be needed anymore.
+        
-        if ( StringUtils.isEmpty( version ) )
-        {
-            // 1. resolve the version to be used
-            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(), localRepository,
-                                          Artifact.RELEASE_VERSION );
-
-            if ( version != null )
-            {
-                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.
-                updatedVersion = version;
-
-                // 3. Persist this version without prompting.
-                forcePersist = true;
-                promptToPersist = false;
-            }
-        }
+//        if ( StringUtils.isEmpty( version ) )
+//        {
+//            // 1. resolve the version to be used
+//            version = resolveMetaVersion( groupId, artifactId, project.getPluginArtifactRepositories(), localRepository,
+//                                          Artifact.RELEASE_VERSION );
+//
+//            if ( version != null )
+//            {
+//                // 2. Set the updatedVersion so the user will be prompted whether to make this version permanent.
+//                updatedVersion = version;
+//
+//                // 3. Persist this version without prompting.
+//                forcePersist = true;
+//                promptToPersist = false;
+//            }
+//        }
-    private String resolveMetaVersion( String groupId, String artifactId, List remoteRepositories,
+    private String resolveMetaVersion( String groupId, String artifactId, MavenProject project,
+        project.replaceWithActiveArtifact( artifact );
+        
-        try
+        if ( artifact.isResolved() )
-            ResolutionGroup resolutionGroup = artifactMetadataSource.retrieve( artifact, localRepository,
-                                                                               remoteRepositories );
-
-            // switching this out with the actual resolved artifact instance, since the MMSource re-creates the pom
-            // artifact.
-            artifact = resolutionGroup.getPomArtifact();
-
-            // make sure this artifact was actually resolved to a file in the repo...
-            if ( artifact.getFile() != null )
+            version = artifact.getVersion();
+        }
+        else
+        {
+            try
-                MavenProject project = mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories,
-                                                                                localRepository, false );
+                ResolutionGroup resolutionGroup = artifactMetadataSource.retrieve( artifact, localRepository,
+                                                                                   project.getPluginArtifactRepositories() );
-                boolean pluginValid = true;
+                // switching this out with the actual resolved artifact instance, since the MMSource re-creates the pom
+                // artifact.
+                artifact = resolutionGroup.getPomArtifact();
-                // if we don't have the required Maven version, then ignore an update
-                if ( project.getPrerequisites() != null && project.getPrerequisites().getMaven() != null )
+                // make sure this artifact was actually resolved to a file in the repo...
+                if ( artifact.getFile() != null )
-                    DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
-                        project.getPrerequisites().getMaven() );
+                    MavenProject pluginProject = mavenProjectBuilder.buildFromRepository( artifact, project
+                        .getPluginArtifactRepositories(), localRepository, false );
-                    if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                    boolean pluginValid = true;
+
+                    // if we don't have the required Maven version, then ignore an update
+                    if ( pluginProject.getPrerequisites() != null && pluginProject.getPrerequisites().getMaven() != null )
-                        getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
-                            " as it requires Maven version " + requiredVersion );
-                        pluginValid = false;
+                        DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
+                            pluginProject.getPrerequisites().getMaven() );
+
+                        if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+                        {
+                            getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
+                                " as it requires Maven version " + requiredVersion );
+                            pluginValid = false;
+                        }
+                    }
+
+                    String artifactVersion = artifact.getVersion();
+
+                    if ( pluginValid && !metaVersionId.equals( artifactVersion ) )
+                    {
+                        version = artifactVersion;
-
-                String artifactVersion = artifact.getVersion();
-
-                if ( pluginValid && !metaVersionId.equals( artifactVersion ) )
-                {
-                    version = artifactVersion;
-                }
-        }
-        catch ( ArtifactMetadataRetrievalException e )
-        {
-            getLogger().debug( "Failed to resolve " + metaVersionId + " version", e );
-        }
-        catch ( ProjectBuildingException e )
-        {
-            throw new PluginVersionResolutionException( groupId, artifactId,
-                                                        "Unable to build resolve plugin project information", e );
-        }
-        catch ( IOException e )
-        {
-            throw new PluginVersionResolutionException( groupId, artifactId,
-                                                        "Unable to determine Maven version for comparison", e );
+            catch ( ArtifactMetadataRetrievalException e )
+            {
+                getLogger().debug( "Failed to resolve " + metaVersionId + " version", e );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new PluginVersionResolutionException( groupId, artifactId,
+                                                            "Unable to build resolve plugin project information", e );
+            }
+            catch ( IOException e )
+            {
+                throw new PluginVersionResolutionException( groupId, artifactId,
+                                                            "Unable to determine Maven version for comparison", e );
+            }

UPD43 UPD42 INS21 INS25 MOV32 UPD42 INS32 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS21 MOV54 INS7 INS42 INS32 INS42 INS42 INS42 MOV32 UPD42 MOV42 UPD40 MOV32 MOV43 UPD42 UPD42 MOV43 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL27 DEL36 DEL27 DEL59 DEL60 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42