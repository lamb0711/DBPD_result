[MNG-5937] Split wrapper jar from assemblies
Remove unused cli package
Reformat code

-import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
-public class DefaultDownloader implements Downloader {
-  private static final int PROGRESS_CHUNK = 500000;
+public class DefaultDownloader
+    implements Downloader
+{
+    private static final int PROGRESS_CHUNK = 500000;
-  private static final int BUFFER_SIZE = 10000;
+    private static final int BUFFER_SIZE = 10000;
-  private final String applicationName;
+    private final String applicationName;
-  private final String applicationVersion;
+    private final String applicationVersion;
-  public DefaultDownloader(String applicationName, String applicationVersion) {
-    this.applicationName = applicationName;
-    this.applicationVersion = applicationVersion;
-    configureProxyAuthentication();
-    configureAuthentication();
-  }
-
-  private void configureProxyAuthentication() {
-    if (System.getProperty("http.proxyUser") != null) {
-      Authenticator.setDefault(new SystemPropertiesProxyAuthenticator());
+    public DefaultDownloader( String applicationName, String applicationVersion )
+    {
+        this.applicationName = applicationName;
+        this.applicationVersion = applicationVersion;
+        configureProxyAuthentication();
+        configureAuthentication();
-  }
-  
-  private void configureAuthentication() {
-    if (System.getProperty("MVNW_USERNAME") != null && System.getProperty("MVNW_PASSWORD") != null && System.getProperty("http.proxyUser") == null) {
-      Authenticator.setDefault(new Authenticator() {
-            protected PasswordAuthentication getPasswordAuthentication() {
-                return new PasswordAuthentication(System.getProperty("MVNW_USERNAME"), System.getProperty("MVNW_PASSWORD").toCharArray());
-            }
-        });
-    }
-  }
-  public void download(URI address, File destination) throws Exception {
-    if (destination.exists()) {
-      return;
-    }
-    destination.getParentFile().mkdirs();
-
-    downloadInternal(address, destination);
-  }
-
-  private void downloadInternal(URI address, File destination) throws Exception {
-    OutputStream out = null;
-    URLConnection conn;
-    InputStream in = null;
-    try {
-      URL url = address.toURL();
-      out = new BufferedOutputStream(new FileOutputStream(destination));
-      conn = url.openConnection();
-      addBasicAuthentication(address, conn);
-      final String userAgentValue = calculateUserAgent();
-      conn.setRequestProperty("User-Agent", userAgentValue);
-      in = conn.getInputStream();
-      byte[] buffer = new byte[BUFFER_SIZE];
-      int numRead;
-      long progressCounter = 0;
-      while ((numRead = in.read(buffer)) != -1) {
-        progressCounter += numRead;
-        if (progressCounter / PROGRESS_CHUNK > 0) {
-          Logger.info(".");
-          progressCounter = progressCounter - PROGRESS_CHUNK;
+    private void configureProxyAuthentication()
+    {
+        if ( System.getProperty( "http.proxyUser" ) != null )
+        {
+            Authenticator.setDefault( new SystemPropertiesProxyAuthenticator() );
-        out.write(buffer, 0, numRead);
-      }
-    } finally {
-      Logger.info("");
-      if (in != null) {
-        in.close();
-      }
-      if (out != null) {
-        out.close();
-      }
-  }
-  private void addBasicAuthentication(URI address, URLConnection connection) throws IOException {
-    String userInfo = calculateUserInfo(address);
-    if (userInfo == null) {
-        return;
+    private void configureAuthentication()
+    {
+        if ( System.getProperty( "MVNW_USERNAME" ) != null && System.getProperty( "MVNW_PASSWORD" ) != null
+            && System.getProperty( "http.proxyUser" ) == null )
+        {
+            Authenticator.setDefault( new Authenticator()
+            {
+                protected PasswordAuthentication getPasswordAuthentication()
+                {
+                    return new PasswordAuthentication( System.getProperty( "MVNW_USERNAME" ),
+                                                       System.getProperty( "MVNW_PASSWORD" ).toCharArray() );
+                }
+            } );
+        }
-    if (!"https".equals(address.getScheme())) {
-       Logger.warn("WARNING Using HTTP Basic Authentication over an insecure connection to download the Maven distribution. Please consider using HTTPS.");
-    }
-    connection.setRequestProperty("Authorization", "Basic " + base64Encode(userInfo));
-  }
-  /**
+    public void download( URI address, File destination )
+        throws Exception
+    {
+        if ( destination.exists() )
+        {
+            return;
+        }
+        destination.getParentFile().mkdirs();
+
+        downloadInternal( address, destination );
+    }
+
+    private void downloadInternal( URI address, File destination )
+        throws Exception
+    {
+        OutputStream out = null;
+        URLConnection conn;
+        InputStream in = null;
+        try
+        {
+            URL url = address.toURL();
+            out = new BufferedOutputStream( new FileOutputStream( destination ) );
+            conn = url.openConnection();
+            addBasicAuthentication( address, conn );
+            final String userAgentValue = calculateUserAgent();
+            conn.setRequestProperty( "User-Agent", userAgentValue );
+            in = conn.getInputStream();
+            byte[] buffer = new byte[BUFFER_SIZE];
+            int numRead;
+            long progressCounter = 0;
+            while ( ( numRead = in.read( buffer ) ) != -1 )
+            {
+                progressCounter += numRead;
+                if ( progressCounter / PROGRESS_CHUNK > 0 )
+                {
+                    Logger.info( "." );
+                    progressCounter = progressCounter - PROGRESS_CHUNK;
+                }
+                out.write( buffer, 0, numRead );
+            }
+        }
+        finally
+        {
+            Logger.info( "" );
+            if ( in != null )
+            {
+                in.close();
+            }
+            if ( out != null )
+            {
+                out.close();
+            }
+        }
+    }
+
+    private void addBasicAuthentication( URI address, URLConnection connection )
+        throws IOException
+    {
+        String userInfo = calculateUserInfo( address );
+        if ( userInfo == null )
+        {
+            return;
+        }
+        if ( !"https".equals( address.getScheme() ) )
+        {
+            Logger.warn( "WARNING Using HTTP Basic Authentication over an insecure connection"
+                + " to download the Maven distribution. Please consider using HTTPS." );
+        }
+        connection.setRequestProperty( "Authorization", "Basic " + base64Encode( userInfo ) );
+    }
+
+    /**
-     * Try to use {@literal java.util.Base64} encoder which is available starting with Java 8.
-     * Fallback to {@literal javax.xml.bind.DatatypeConverter} from JAXB which is available starting with Java 6 but is not anymore in Java 9.
-     * Fortunately, both of these two Base64 encoders implement the right Base64 flavor, the one that does not split the output in multiple lines.
-     *
-    private String base64Encode(String userInfo) {
-      ClassLoader loader = getClass().getClassLoader();
-      try {
-          Method getEncoderMethod = loader.loadClass("java.util.Base64").getMethod("getEncoder");
-          Method encodeMethod = loader.loadClass("java.util.Base64$Encoder").getMethod("encodeToString", byte[].class);
-          Object encoder = getEncoderMethod.invoke(null);
-          return (String) encodeMethod.invoke(encoder, new Object[]{userInfo.getBytes("UTF-8")});
-      } catch (Exception java7OrEarlier) {
-          try {
-              Method encodeMethod = loader.loadClass("javax.xml.bind.DatatypeConverter").getMethod("printBase64Binary", byte[].class);
-              return (String) encodeMethod.invoke(null, new Object[]{userInfo.getBytes("UTF-8")});
-          } catch (Exception java5OrEarlier) {
-              throw new RuntimeException("Downloading Maven distributions with HTTP Basic Authentication is not supported on your JVM.", java5OrEarlier);
-          }
-      }
-  }
-
-  private String calculateUserInfo(URI uri) {
-    String username = System.getenv(MVNW_USERNAME);
-    String password = System.getenv(MVNW_PASSWORD);
-    if (username != null && password != null) {
-        return username + ':' + password;
+    private String base64Encode( String userInfo )
+    {
+        return Base64.getEncoder().encodeToString( userInfo.getBytes( StandardCharsets.UTF_8 ) );
-    return uri.getUserInfo();
-}
-  private String calculateUserAgent() {
-    String appVersion = applicationVersion;
-
-    String javaVendor = System.getProperty("java.vendor");
-    String javaVersion = System.getProperty("java.version");
-    String javaVendorVersion = System.getProperty("java.vm.version");
-    String osName = System.getProperty("os.name");
-    String osVersion = System.getProperty("os.version");
-    String osArch = System.getProperty("os.arch");
-    return String.format("%s/%s (%s;%s;%s) (%s;%s;%s)", applicationName, appVersion, osName, osVersion, osArch, javaVendor, javaVersion, javaVendorVersion);
-  }
-
-  private static class SystemPropertiesProxyAuthenticator extends Authenticator {
-    @Override
-    protected PasswordAuthentication getPasswordAuthentication() {
-      return new PasswordAuthentication(System.getProperty("http.proxyUser"), System.getProperty("http.proxyPassword", "").toCharArray());
+    private String calculateUserInfo( URI uri )
+    {
+        String username = System.getenv( MVNW_USERNAME );
+        String password = System.getenv( MVNW_PASSWORD );
+        if ( username != null && password != null )
+        {
+            return username + ':' + password;
+        }
+        return uri.getUserInfo();
-  }
+
+    private String calculateUserAgent()
+    {
+        String appVersion = applicationVersion;
+
+        String javaVendor = System.getProperty( "java.vendor" );
+        String javaVersion = System.getProperty( "java.version" );
+        String javaVendorVersion = System.getProperty( "java.vm.version" );
+        String osName = System.getProperty( "os.name" );
+        String osVersion = System.getProperty( "os.version" );
+        String osArch = System.getProperty( "os.arch" );
+        return String.format( "%s/%s (%s;%s;%s) (%s;%s;%s)", applicationName, appVersion, osName, osVersion, osArch,
+                              javaVendor, javaVersion, javaVendorVersion );
+    }
+
+    private static class SystemPropertiesProxyAuthenticator
+        extends Authenticator
+    {
+        @Override
+        protected PasswordAuthentication getPasswordAuthentication()
+        {
+            return new PasswordAuthentication( System.getProperty( "http.proxyUser" ),
+                                               System.getProperty( "http.proxyPassword", "" ).toCharArray() );
+        }
+    }

MOV26 INS26 INS40 UPD40 INS8 MOV41 INS32 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS40 INS27 INS45 INS45 DEL45 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL42 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL32 DEL4 DEL3 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL39 DEL85 DEL5 DEL57 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL39 DEL85 DEL5 DEL57 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL33 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL45 DEL32 DEL4 DEL3 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL12 DEL54 DEL8