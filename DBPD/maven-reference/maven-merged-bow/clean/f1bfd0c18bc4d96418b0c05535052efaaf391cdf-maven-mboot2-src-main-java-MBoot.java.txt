read plugin deps from pluggy pom


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163748 13f79535-47bb-0310-9956-ffa450edef68

-    String[] pluginGeneratorDeps = new String[]{"plexus/jars/plexus-container-default-1.0-alpha-2.jar",
-                                                "qdox/jars/qdox-1.2.jar",
-                                                "org.apache.maven/jars/maven-core-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-artifact-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-model-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-tools-api-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-tools-java-2.0-SNAPSHOT.jar",
-                                                "org.apache.maven/jars/maven-plugin-tools-pluggy-2.0-SNAPSHOT.jar"};
-
-    private IsolatedClassLoader bootstrapClassLoader;
-
-        bootstrapClassLoader = createClassloaderFromDependencies( reader.getDependencies() );
+
+        ClassLoader bootstrapClassLoader = createClassloaderFromDependencies( reader.getDependencies(), null );
-            reader = buildProject( directory, builds[i] );
+            reader = buildProject( directory, builds[i], bootstrapClassLoader );
-        addPluginGeneratorDependencies( bootstrapClassLoader );
+        reader = new ModelReader( downloader );
+        reader.parse( new File( basedir, "maven-plugin-tools/maven-plugin-tools-pluggy/pom.xml" ) );
+        List dependencies = new ArrayList( reader.getDependencies() );
+        dependencies.add( new Dependency( reader.getGroupId(), reader.getArtifactId(), reader.getVersion() ) );
+        IsolatedClassLoader cl = createClassloaderFromDependencies( dependencies, bootstrapClassLoader );
-            reader = buildProject( directory, pluginBuilds[i] );
+            reader = buildProject( directory, pluginBuilds[i], cl );
-    public ModelReader buildProject( String basedir, String projectId )
+    public ModelReader buildProject( String basedir, String projectId, ClassLoader classLoader )
-            generateSources( model.getAbsolutePath(), "java", generatedSources, modelVersion, "false",
-                             bootstrapClassLoader );
+            generateSources( model.getAbsolutePath(), "java", generatedSources, modelVersion, "false", classLoader );
-                             bootstrapClassLoader );
+                             classLoader );
-                             bootstrapClassLoader );
-            generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, modelVersion, "false",
-                             bootstrapClassLoader );
+                             classLoader );
+            generateSources( model.getAbsolutePath(), "xdoc", generatedDocs, modelVersion, "false", classLoader );
-                                      new File( basedir, "pom.xml" ).getAbsolutePath(), bootstrapClassLoader );
+                                      new File( basedir, "pom.xml" ).getAbsolutePath(), classLoader );
-    private void addPluginGeneratorDependencies( IsolatedClassLoader cl )
-        throws Exception
-    {
-        // TODO: create a separate class loader
-
-        for ( int i = 0; i < pluginGeneratorDeps.length; i++ )
-        {
-            String dependency = pluginGeneratorDeps[i];
-
-            File f = new File( repoLocal, dependency );
-            if ( !f.exists() )
-            {
-                throw new FileNotFoundException(
-                    "Missing dependency: " + dependency +
-                    ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
-            }
-
-            cl.addURL( f.toURL() );
-        }
-    }
-
-    private IsolatedClassLoader createClassloaderFromDependencies( List dependencies )
+    private IsolatedClassLoader createClassloaderFromDependencies( List dependencies, ClassLoader parent )
-        IsolatedClassLoader cl = new IsolatedClassLoader();
+        IsolatedClassLoader cl;
+        if ( parent == null )
+        {
+            cl = new IsolatedClassLoader();
+        }
+        else
+        {
+            cl = new IsolatedClassLoader( parent );
+        }

MOV21 MOV21 MOV21 INS44 INS44 INS60 INS21 INS60 INS60 INS43 INS42 INS43 INS42 INS25 INS43 INS59 INS32 INS43 INS59 MOV43 INS59 INS42 INS42 MOV43 INS27 INS8 INS8 INS42 INS42 MOV32 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 UPD42 INS42 INS14 INS42 INS32 INS42 INS33 INS21 INS21 INS33 INS43 INS42 MOV43 INS42 INS45 INS43 INS32 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 MOV32 UPD42 UPD42 INS42 MOV14 INS42 INS14 INS42 INS42 MOV43 INS42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL3 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL42 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL38 DEL45 DEL45 DEL16 DEL36 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31