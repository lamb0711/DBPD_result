parse system properties from the command line

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@321328 13f79535-47bb-0310-9956-ffa450edef68

-    private static String retrieveLocalRepo( String[] args )
+    private static String retrieveLocalRepo( String settingsXmlPath )
+        throws VerificationException
-        String repo = System.getProperty( "maven.repo.local" );
+        UserModelReader userModelReader = new UserModelReader();
-        if ( repo == null )
+        String userHome = System.getProperty( "user.home" );
+
+        File userXml;
+
+        String repo = null;
+
+        if ( settingsXmlPath != null )
-            UserModelReader userModelReader = new UserModelReader();
-
-            try
-            {
-                String userHome = System.getProperty( "user.home" );
-
-                String settingsXmlPath = getSettingsPath( args );
-
-                File userXml;
-
-                if ( settingsXmlPath != null )
-                {
-                     System.out.println( "Using settings from " + settingsXmlPath );
-                     userXml = new File( settingsXmlPath );
-                } else
-                {
-                     userXml = new File( userHome, ".m2/settings.xml" );
-                }
-
-                if ( userXml.exists() )
-                {
-                    userModelReader.parse( userXml );
-
-                    String localRepository = userModelReader.getLocalRepository();
-                    if ( localRepository != null )
-                    {
-                        repo = new File( localRepository ).getAbsolutePath();
-                    }
-                }
-            }
-            catch ( Exception e )
-            {
-                e.printStackTrace();
-            }
+            System.out.println( "Using settings from " + settingsXmlPath );
+            userXml = new File( settingsXmlPath );
+        }
+        else
+        {
+            userXml = new File( userHome, ".m2/settings.xml" );
-        if ( repo == null )
+        if ( userXml.exists() )
-            String userHome = System.getProperty( "user.home" );
-            String m2LocalRepoPath = "/.m2/repository";
+            userModelReader.parse( userXml );
-            File repoDir = new File( userHome, m2LocalRepoPath );
-            if ( !repoDir.exists() )
+            String localRepository = userModelReader.getLocalRepository();
+            if ( localRepository != null )
-                repoDir.mkdirs();
+                repo = new File( localRepository ).getAbsolutePath();
-
-            repo = repoDir.getAbsolutePath();
-
-            System.out.println( "Using default local repository: " + repoDir.getAbsolutePath() );
-            
+
-                
+
-                    
+
-                    
+
-                    
+
-                        throw new VerificationException( "Expected file pattern was not found: " + expectedFile.getPath() );
+                        throw new VerificationException(
+                            "Expected file pattern was not found: " + expectedFile.getPath() );
-                
+
-                
+
-            boolean useMavenRepoLocal = Boolean.valueOf( controlProperties.getProperty( "use.mavenRepoLocal", "true" ) ).booleanValue();
+            boolean useMavenRepoLocal =
+                Boolean.valueOf( controlProperties.getProperty( "use.mavenRepoLocal", "true" ) ).booleanValue();
-        
+
-
-    private static String getSettingsPath( String[] args )
-        throws Exception
-    {
-        for ( int i = 0; i < args.length; i++ ) {
-            if ( args[ i ].equals( "-s" ) )
-            {
-                if ( i == args.length - 1 )
-                {
-                    throw new Exception( "missing argument to -s" );
-                }
-                return args[ i + 1 ];
-            }
-        }
-        return null;
-    }
-
+        throws VerificationException
-        localRepo = retrieveLocalRepo( args );
-
+        String settingsFile = null;
+
-        for ( int i = 0; i < args.length; i++ ) {
-            if ( args[ i ].equals( "-s" ) )
+        for ( int i = 0; i < args.length; i++ )
+        {
+            if ( args[i].startsWith( "-D" ) )
+            {
+                int index = args[i].indexOf( "=" );
+                if ( index >= 0 )
+                {
+                    System.setProperty( args[i].substring( 2, index ), args[i].substring( index + 1 ) );
+                }
+                else
+                {
+                    System.setProperty( args[i].substring( 2 ), "true" );
+                }
+            }
+            else if ( "-s".equals( args[i] ) || "--settings".equals( args[i] ) )
-                i +=1;
-                continue;
+                i += 1;
+
+                settingsFile = args[i];
-            argsList.add( args[ i ] );
+            else
+            {
+                argsList.add( args[i] );
+            }
-        
+
+        if ( localRepo == null )
+        {
+            localRepo = retrieveLocalRepo( settingsFile );
+        }
+
+        if ( localRepo == null )
+        {
+            localRepo = System.getProperty( "maven.repo.local", System.getProperty( "user.home" ) + "/.m2/repository" );
+        }
+
+        File repoDir = new File( localRepo );
+        if ( !repoDir.exists() )
+        {
+            repoDir.mkdirs();
+        }
+
+        System.out.println( "Using default local repository: " + localRepo );
+
-                boolean chokeOnErrorOutput = Boolean.valueOf(
-                    controlProperties.getProperty( "failOnErrorOutput", "true" ) ).booleanValue();
+                boolean chokeOnErrorOutput =
+                    Boolean.valueOf( controlProperties.getProperty( "failOnErrorOutput", "true" ) ).booleanValue();

INS43 MOV8 MOV60 INS43 MOV43 UPD42 UPD42 MOV42 MOV60 MOV41 INS42 INS60 INS25 INS25 MOV60 MOV25 INS21 MOV43 INS59 INS8 INS27 INS8 INS27 INS8 MOV43 INS32 UPD42 INS33 INS42 INS33 INS25 INS42 INS33 MOV21 INS42 INS33 INS21 INS40 INS42 INS27 INS32 INS8 MOV25 INS7 MOV43 UPD42 INS45 INS42 INS2 INS42 INS45 INS60 INS25 INS27 INS8 INS42 INS32 INS42 INS42 INS39 INS59 INS27 INS8 INS8 INS32 INS32 INS21 INS21 UPD42 INS42 INS42 INS45 INS27 INS42 INS32 INS42 INS34 MOV21 INS21 INS45 INS42 INS2 INS45 INS42 INS2 INS7 INS32 INS32 INS45 INS2 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS45 INS42 INS42 UPD42 UPD42 INS32 MOV32 INS42 INS42 MOV32 INS45 INS42 INS42 INS42 INS42 MOV2 INS42 INS34 INS42 UPD42 INS27 UPD42 INS34 INS42 INS34 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL83 DEL83 DEL42 DEL43 DEL42 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL40 DEL34 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL34 DEL27 DEL2 DEL41 DEL8 DEL25 DEL8 DEL24 DEL33 DEL41 DEL8 DEL31 DEL45 DEL45 DEL18 DEL8 DEL42