updated parent pom (and fixed issues...)
-    public void validateRawModel( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
+    public void validateRawModel( Model m, ModelBuildingRequest request, ModelProblemCollector problems )
-        Parent parent = model.getParent();
+        Parent parent = m.getParent();
-            if ( equals( parent.getGroupId(), model.getGroupId() )
-                && equals( parent.getArtifactId(), model.getArtifactId() ) )
+            if ( equals( parent.getGroupId(), m.getGroupId() )
+                && equals( parent.getArtifactId(), m.getArtifactId() ) )
-            validateEnum( "modelVersion", problems, Severity.ERROR, Version.V20, model.getModelVersion(), null, model,
+            validateEnum( "modelVersion", problems, Severity.ERROR, Version.V20, m.getModelVersion(), null, m,
-            validateStringNoExpression( "groupId", problems, Severity.WARNING, Version.V20, model.getGroupId(), model );
+            validateStringNoExpression( "groupId", problems, Severity.WARNING, Version.V20, m.getGroupId(), m );
-                validateStringNotEmpty( "groupId", problems, Severity.FATAL, Version.V20, model.getGroupId(), model );
+                validateStringNotEmpty( "groupId", problems, Severity.FATAL, Version.V20, m.getGroupId(), m );
-            validateStringNoExpression( "artifactId", problems, Severity.WARNING, Version.V20, model.getArtifactId(),
-                                        model );
-            validateStringNotEmpty( "artifactId", problems, Severity.FATAL, Version.V20, model.getArtifactId(), model );
+            validateStringNoExpression( "artifactId", problems, Severity.WARNING, Version.V20, m.getArtifactId(), m );
+            validateStringNotEmpty( "artifactId", problems, Severity.FATAL, Version.V20, m.getArtifactId(), m );
-            validateVersionNoExpression( "version", problems, Severity.WARNING, Version.V20, model.getVersion(), model );
+            validateVersionNoExpression( "version", problems, Severity.WARNING, Version.V20, m.getVersion(), m );
-                validateStringNotEmpty( "version", problems, Severity.FATAL, Version.V20, model.getVersion(), model );
+                validateStringNotEmpty( "version", problems, Severity.FATAL, Version.V20, m.getVersion(), m );
-            validate20RawDependencies( problems, model.getDependencies(), "dependencies.dependency", request );
+            validate20RawDependencies( problems, m.getDependencies(), "dependencies.dependency", request );
-            if ( model.getDependencyManagement() != null )
+            if ( m.getDependencyManagement() != null )
-                validate20RawDependencies( problems, model.getDependencyManagement().getDependencies(),
+                validate20RawDependencies( problems, m.getDependencyManagement().getDependencies(),
-            validateRawRepositories( problems, model.getRepositories(), "repositories.repository", request );
+            validateRawRepositories( problems, m.getRepositories(), "repositories.repository", request );
-            validateRawRepositories( problems, model.getPluginRepositories(), "pluginRepositories.pluginRepository",
+            validateRawRepositories( problems, m.getPluginRepositories(), "pluginRepositories.pluginRepository",
-            Build build = model.getBuild();
+            Build build = m.getBuild();
-                    validate20RawPlugins( problems, mngt.getPlugins(), "build.pluginManagement.plugins.plugin", request );
+                    validate20RawPlugins( problems, mngt.getPlugins(), "build.pluginManagement.plugins.plugin",
+                                          request );
-            for ( Profile profile : model.getProfiles() )
+            for ( Profile profile : m.getProfiles() )
-                validate30RawProfileActivation( problems, profile.getActivation(), profile.getId(), prefix + ".activation", request );
+                validate30RawProfileActivation( problems, profile.getActivation(), profile.getId(), prefix
+                    + ".activation", request );
-                              "Failed to interpolate file location "
-                                  + path
-                                  + " for profile "
-                                  + sourceHint
-                                  + ": ${project.basedir} expression not supported during profile activation, use ${basedir} instead",
+                              "Failed to interpolate file location " + path + " for profile " + sourceHint
+                                  + ": ${project.basedir} expression not supported during profile activation, "
+                                  + "use ${basedir} instead",
-    public void validateEffectiveModel( Model model, ModelBuildingRequest request, ModelProblemCollector problems )
+    public void validateEffectiveModel( Model m, ModelBuildingRequest request, ModelProblemCollector problems )
-        validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, Version.BASE, model.getModelVersion(), model );
+        validateStringNotEmpty( "modelVersion", problems, Severity.ERROR, Version.BASE, m.getModelVersion(), m );
-        validateId( "groupId", problems, model.getGroupId(), model );
+        validateId( "groupId", problems, m.getGroupId(), m );
-        validateId( "artifactId", problems, model.getArtifactId(), model );
+        validateId( "artifactId", problems, m.getArtifactId(), m );
-        validateStringNotEmpty( "packaging", problems, Severity.ERROR, Version.BASE, model.getPackaging(), model );
+        validateStringNotEmpty( "packaging", problems, Severity.ERROR, Version.BASE, m.getPackaging(), m );
-        if ( !model.getModules().isEmpty() )
+        if ( !m.getModules().isEmpty() )
-            if ( !"pom".equals( model.getPackaging() ) )
+            if ( !"pom".equals( m.getPackaging() ) )
-                              "with value '" + model.getPackaging() + "' is invalid. Aggregator projects "
-                                  + "require 'pom' as packaging.", model );
+                              "with value '" + m.getPackaging() + "' is invalid. Aggregator projects "
+                                  + "require 'pom' as packaging.", m );
-            for ( int i = 0, n = model.getModules().size(); i < n; i++ )
+            for ( int i = 0, n = m.getModules().size(); i < n; i++ )
-                String module = model.getModules().get( i );
+                String module = m.getModules().get( i );
-                                  model.getLocation( "modules" ) );
+                                  m.getLocation( "modules" ) );
-        validateStringNotEmpty( "version", problems, Severity.ERROR, Version.BASE, model.getVersion(), model );
+        validateStringNotEmpty( "version", problems, Severity.ERROR, Version.BASE, m.getVersion(), m );
-        validateEffectiveDependencies( problems, model.getDependencies(), false, request );
+        validateEffectiveDependencies( problems, m.getDependencies(), false, request );
-        DependencyManagement mgmt = model.getDependencyManagement();
+        DependencyManagement mgmt = m.getDependencyManagement();
-            for ( int i = 0, n = model.getModules().size(); i < n; i++ )
+            for ( int i = 0, n = m.getModules().size(); i < n; i++ )
-                String module = model.getModules().get( i );
+                String module = m.getModules().get( i );
-                                  "specifies duplicate child module " + module, model.getLocation( "modules" ) );
+                                  "specifies duplicate child module " + module, m.getLocation( "modules" ) );
-            validateBannedCharacters( "version", problems, errOn31, Version.V20, model.getVersion(), null, model,
+            validateBannedCharacters( "version", problems, errOn31, Version.V20, m.getVersion(), null, m,
-            validate20ProperSnapshotVersion( "version", problems, errOn31, Version.V20, model.getVersion(), null, model );
+            validate20ProperSnapshotVersion( "version", problems, errOn31, Version.V20, m.getVersion(), null, m );
-            Build build = model.getBuild();
+            Build build = m.getBuild();
-                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20, p.getGroupId(),
-                                            p );
+                    validateStringNotEmpty( "build.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20,
+                                            p.getGroupId(), p );
-                                           request );
+                                             request );
-                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, Version.V20, p.getInherited(), p.getKey(),
-                                     p );
+                    validateBoolean( "build.plugins.plugin.inherited", problems, errOn30, Version.V20,
+                                     p.getInherited(), p.getKey(), p );
-                    validateBoolean( "build.plugins.plugin.extensions", problems, errOn30, Version.V20, p.getExtensions(),
-                                     p.getKey(), p );
+                    validateBoolean( "build.plugins.plugin.extensions", problems, errOn30, Version.V20,
+                                     p.getExtensions(), p.getKey(), p );
-                validate20RawResources( problems, build.getTestResources(), "build.testResources.testResource", request );
+                validate20RawResources( problems, build.getTestResources(), "build.testResources.testResource",
+                                        request );
-            Reporting reporting = model.getReporting();
+            Reporting reporting = m.getReporting();
-                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", problems, Severity.ERROR, Version.V20,
-                                            p.getArtifactId(), p );
+                    validateStringNotEmpty( "reporting.plugins.plugin.artifactId", problems, Severity.ERROR,
+                                            Version.V20, p.getArtifactId(), p );
-            for ( Repository repository : model.getRepositories() )
+            for ( Repository repository : m.getRepositories() )
-            for ( Repository repository : model.getPluginRepositories() )
+            for ( Repository repository : m.getPluginRepositories() )
-            DistributionManagement distMgmt = model.getDistributionManagement();
+            DistributionManagement distMgmt = m.getDistributionManagement();
-                validate20EffectiveRepository( problems, distMgmt.getRepository(), "distributionManagement.repository", request );
+                validate20EffectiveRepository( problems, distMgmt.getRepository(), "distributionManagement.repository",
+                                               request );
-    private void validate20RawDependencies( ModelProblemCollector problems, List<Dependency> dependencies, String prefix,
-                                          ModelBuildingRequest request )
+    private void validate20RawDependencies( ModelProblemCollector problems, List<Dependency> dependencies,
+                                            String prefix, ModelBuildingRequest request )
-                validateBoolean( prefix + "optional", problems, errOn30, Version.V20, d.getOptional(), d.getManagementKey(), d );
+                validateBoolean( prefix + "optional", problems, errOn30, Version.V20, d.getOptional(),
+                                 d.getManagementKey(), d );
-                    validateVersion( prefix + "version", problems, errOn30, Version.V20, d.getVersion(), d.getManagementKey(), d );
+                    validateVersion( prefix + "version", problems, errOn30, Version.V20, d.getVersion(),
+                                     d.getManagementKey(), d );
-                    validateEnum( prefix + "scope", problems, Severity.WARNING, Version.V20, d.getScope(), d.getManagementKey(), d,
-                                  "provided", "compile", "runtime", "test", "system" );
+                    validateEnum( prefix + "scope", problems, Severity.WARNING, Version.V20, d.getScope(),
+                                  d.getManagementKey(), d, "provided", "compile", "runtime", "test", "system" );
-                                                      ModelBuildingRequest request )
+                                                        ModelBuildingRequest request )
-                validateVersion( prefix + "version", problems, errOn30, Version.BASE, d.getVersion(), d.getManagementKey(), d );
+                validateVersion( prefix + "version", problems, errOn30, Version.BASE, d.getVersion(),
+                                 d.getManagementKey(), d );
-                validateEnum( prefix + "scope", problems, errOn30, Version.BASE, d.getScope(), d.getManagementKey(), d, "compile",
-                              "runtime", "system" );
+                validateEnum( prefix + "scope", problems, errOn30, Version.BASE, d.getScope(), d.getManagementKey(), d,
+                              "compile", "runtime", "system" );
-        validateId( prefix + "artifactId", problems, Severity.ERROR, Version.BASE, d.getArtifactId(), d.getManagementKey(), d );
+        validateId( prefix + "artifactId", problems, Severity.ERROR, Version.BASE, d.getArtifactId(),
+                    d.getManagementKey(), d );
-        validateId( prefix + "groupId", problems, Severity.ERROR, Version.BASE, d.getGroupId(), d.getManagementKey(), d );
+        validateId( prefix + "groupId", problems, Severity.ERROR, Version.BASE, d.getGroupId(), d.getManagementKey(),
+                    d );
-            validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, Version.BASE, d.getType(), d.getManagementKey(), d );
+            validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, Version.BASE, d.getType(),
+                                    d.getManagementKey(), d );
-            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, Version.BASE, d.getVersion(), d.getManagementKey(),
-                                    d );
+            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, Version.BASE, d.getVersion(),
+                                    d.getManagementKey(), d );
-                addViolation( problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "is missing.",
-                              d );
+                addViolation( problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(),
+                              "is missing.", d );
-                    addViolation( problems, Severity.WARNING, Version.BASE, prefix + "systemPath", d.getManagementKey(), msg, d );
+                    addViolation( problems, Severity.WARNING, Version.BASE, prefix + "systemPath",
+                                  d.getManagementKey(), msg, d );
-            addViolation( problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "must be omitted."
-                + " This field may only be specified for a dependency with system scope.", d );
+            addViolation( problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(),
+                          "must be omitted." + " This field may only be specified for a dependency with system scope.",
+                          d );
-                    validateIdWithWildcards( prefix + "exclusions.exclusion.groupId", problems, Severity.WARNING, Version.V30,
-                                exclusion.getGroupId(), d.getManagementKey(), exclusion );
+                    validateIdWithWildcards( prefix + "exclusions.exclusion.groupId", problems, Severity.WARNING,
+                                             Version.V30, exclusion.getGroupId(), d.getManagementKey(), exclusion );
-                    validateIdWithWildcards( prefix + "exclusions.exclusion.artifactId", problems, Severity.WARNING, Version.V30,
-                                exclusion.getArtifactId(), d.getManagementKey(), exclusion );
+                    validateIdWithWildcards( prefix + "exclusions.exclusion.artifactId", problems, Severity.WARNING,
+                                             Version.V30, exclusion.getArtifactId(), d.getManagementKey(), exclusion );
-            validateStringNotEmpty( prefix + ".id", problems, Severity.ERROR, Version.V20, repository.getId(), repository );
+            validateStringNotEmpty( prefix + ".id", problems, Severity.ERROR, Version.V20, repository.getId(),
+                                    repository );
-                addViolation( problems, errOn30, Version.V20, prefix + ".id", null, "must be unique: " + repository.getId() + " -> "
-                    + existing.getUrl() + " vs " + repository.getUrl(), repository );
+                addViolation( problems, errOn30, Version.V20, prefix + ".id", null,
+                              "must be unique: " + repository.getId() + " -> " + existing.getUrl() + " vs "
+                                  + repository.getUrl(), repository );
-            validateBannedCharacters( prefix + ".id", problems, errOn31, Version.V20, repository.getId(), null, repository,
-                                      ILLEGAL_REPO_ID_CHARS );
+            validateBannedCharacters( prefix + ".id", problems, errOn31, Version.V20, repository.getId(), null,
+                                      repository, ILLEGAL_REPO_ID_CHARS );
-            validateStringNotEmpty( prefix + ".directory", problems, Severity.ERROR, Version.V20, resource.getDirectory(),
-                                    resource );
+            validateStringNotEmpty( prefix + ".directory", problems, Severity.ERROR, Version.V20,
+                                    resource.getDirectory(), resource );
-    private boolean validateId( String fieldName, ModelProblemCollector problems, Severity severity, Version version, String id,
-                                String sourceHint, InputLocationTracker tracker )
+    private boolean validateId( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
+                                String id, String sourceHint, InputLocationTracker tracker )
-    private boolean validateIdWithWildcards( String fieldName, ModelProblemCollector problems, Severity severity, Version version, String id,
-                                String sourceHint, InputLocationTracker tracker )
+    private boolean validateIdWithWildcards( String fieldName, ModelProblemCollector problems, Severity severity,
+                                             Version version, String id, String sourceHint,
+                                             InputLocationTracker tracker )
-    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-                                                String string, InputLocationTracker tracker )
+    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, Severity severity,
+                                                Version version, String string, InputLocationTracker tracker )
-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-                                            String string, InputLocationTracker tracker )
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,
+                                            Version version, String string, InputLocationTracker tracker )
-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity, Version version, 
-                                            String string, String sourceHint, InputLocationTracker tracker )
+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,
+                                            Version version, String string, String sourceHint,
+                                            InputLocationTracker tracker )
-    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, Severity severity, Version version,
-                                     Object object, String sourceHint, InputLocationTracker tracker )
+    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, Severity severity,
+                                     Version version, Object object, String sourceHint, InputLocationTracker tracker )
-                                  String string, String sourceHint, InputLocationTracker tracker, String... validValues )
+                                  String string, String sourceHint, InputLocationTracker tracker,
+                                  String... validValues )
-        addViolation( problems, severity, version, fieldName, sourceHint, "must be one of " + values + " but is '" + string
-            + "'.", tracker );
+        addViolation( problems, severity, version, fieldName, sourceHint, "must be one of " + values + " but is '"
+            + string + "'.", tracker );
-                          "uses an unsupported snapshot version format" + ", should be '*-SNAPSHOT' instead.", tracker );
+                          "uses an unsupported snapshot version format, should be '*-SNAPSHOT' instead.", tracker );
-                                      String fieldName, String sourceHint, String message, InputLocationTracker tracker )
+                                      String fieldName, String sourceHint, String message,
+                                      InputLocationTracker tracker )

UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL45 DEL45 DEL27