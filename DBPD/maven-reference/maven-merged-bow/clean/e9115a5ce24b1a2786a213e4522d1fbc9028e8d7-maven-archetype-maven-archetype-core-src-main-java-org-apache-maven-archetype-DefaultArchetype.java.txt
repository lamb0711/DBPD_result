o archetypes can now specify whether they can be partial projects. my
particular use case was the need to lay down a template site within an
existing project so i could easily document how to quickly get a site
up and running for an existing project.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@294979 13f79535-47bb-0310-9956-ffa450edef68

-    public void createArchetype( String archetypeGroupId, String archetypeArtifactId, String archetypeVersion,
-                                ArtifactRepository localRepository, List remoteRepositories, Map parameters )
+    public void createArchetype( String archetypeGroupId,
+                                 String archetypeArtifactId,
+                                 String archetypeVersion,
+                                 ArtifactRepository localRepository,
+                                 List remoteRepositories,
+                                 Map parameters )
-
-
-                getLogger().info(
-                                  "Using following parameters for creating Archetype: " + archetypeArtifactId + ":"
-                                      + archetypeVersion );
+                getLogger().info( "Using following parameters for creating Archetype: " + archetypeArtifactId + ":" + archetypeVersion );
-
-
-
-
-
-
-        String outputDirectory = (String) parameters.get( "outputDirectory" );
-
-        String packageName = (String) parameters.get( "package" );
-
+        //
+        // ----------------------------------------------------------------------
+
+        String basedir = (String) parameters.get( "basedir" );
+
+        String artifactId = (String) parameters.get( "artifactId" );
+
+        File pomFile = new File( basedir, ARCHETYPE_POM );
+
+        File outputDirectoryFile;
+
+        if ( pomFile.exists() && descriptor.isAllowPartial() )
+        {
+            outputDirectoryFile = new File( basedir );
+        }
+        else
+        {
+            outputDirectoryFile = new File( basedir, artifactId );
+
+            if ( outputDirectoryFile.exists() )
+            {
+                throw new ArchetypeTemplateProcessingException( outputDirectoryFile.getName() + " already exists - please run from a clean directory" );
+            }
+
+            pomFile = new File( outputDirectoryFile, ARCHETYPE_POM );
+        }
+
+        String outputDirectory = outputDirectoryFile.getAbsolutePath();
+
+        String packageName = (String) parameters.get( "package" );
+
+        // ----------------------------------------------------------------------
-            processTemplate( outputDirectory, context, ARCHETYPE_POM, false, null );
+            if ( !pomFile.exists() )
+            {
+                processTemplate( outputDirectory, context, ARCHETYPE_POM, false, null );
+            }
-            File pomFile = new File( outputDirectory + "/" + ARCHETYPE_POM );
+
+
+
-            boolean bOverrideSrcDir = false;
-            boolean bOverrideScriptSrcDir = false;
-            boolean bOverrideResourceDir = false;
-            boolean bOverrideTestSrcDir = false;
-            boolean bOverrideTestResourceDir = false;
-            boolean bFoundBuildElement = ( null != ( build = generatedModel.getBuild() ) );
+
+            boolean overrideSrcDir = false;
+
+            boolean overrideScriptSrcDir = false;
+
+            boolean overrideResourceDir = false;
+
+            boolean overrideTestSrcDir = false;
+
+            boolean overrideTestResourceDir = false;
+
+            boolean foundBuildElement = ( null != ( build = generatedModel.getBuild() ) );
-                getLogger()
-                    .debug(
-                            "********************* Debug info for resources created from generated Model ***********************" );
+            {
+                getLogger().debug( "********************* Debug info for resources created from generated Model ***********************" );
+            }
-                getLogger().debug( "Was build element found in generated POM?: " + bFoundBuildElement );
+            {
+                getLogger().debug( "Was build element found in generated POM?: " + foundBuildElement );
+            }
-            if ( bFoundBuildElement && null != build.getSourceDirectory() )
+            if ( foundBuildElement && null != build.getSourceDirectory() )
+                {
-                bOverrideSrcDir = true;
+                }
+
+                overrideSrcDir = true;
+
+
-                FileUtils.mkdir( outputDirectory
-                    + ( srcDirectory.startsWith( "/" ) ? srcDirectory : ( "/" + srcDirectory ) ) );
+
+                FileUtils.mkdir( outputDirectory + ( srcDirectory.startsWith( "/" ) ? srcDirectory : ( "/" + srcDirectory ) ) );
-            if ( bFoundBuildElement && null != build.getScriptSourceDirectory() )
+            if ( foundBuildElement && null != build.getScriptSourceDirectory() )
+                {
-                bOverrideScriptSrcDir = true;
-                String scriptSourceDirectory = build.getScriptSourceDirectory();
-                scriptSourceDirectory = StringUtils.replace( scriptSourceDirectory, "\\", "/" );
-                FileUtils.mkdir( outputDirectory
-                    + ( scriptSourceDirectory.startsWith( "/" ) ? scriptSourceDirectory
-                                                               : ( "/" + scriptSourceDirectory ) ) );
+                }
+                overrideScriptSrcDir = true;
+
+                String scriptSourceDirectory = build.getScriptSourceDirectory();
+
+                scriptSourceDirectory = StringUtils.replace( scriptSourceDirectory, "\\", "/" );
+
+                FileUtils.mkdir( outputDirectory + ( scriptSourceDirectory.startsWith( "/" ) ? scriptSourceDirectory
+                                                               : ( "/" + scriptSourceDirectory ) ) );
-            if ( bFoundBuildElement && build.getResources().size() > 0 )
+            if ( foundBuildElement && build.getResources().size() > 0 )
+                {
-                bOverrideResourceDir = true;
+                }
+
+                overrideResourceDir = true;
+
+
+
+
-                    FileUtils.mkdir( outputDirectory
-                        + ( resourceDirectory.startsWith( "/" ) ? resourceDirectory : ( "/" + resourceDirectory ) ) );
+
+                    FileUtils.mkdir( outputDirectory + ( resourceDirectory.startsWith( "/" ) ? resourceDirectory : ( "/" + resourceDirectory ) ) );
-            if ( bFoundBuildElement && null != build.getTestSourceDirectory() )
+            if ( foundBuildElement && null != build.getTestSourceDirectory() )
+                {
-                bOverrideTestSrcDir = true;
+                }
+
+                overrideTestSrcDir = true;
+
+
-                FileUtils.mkdir( outputDirectory
-                    + ( testDirectory.startsWith( "/" ) ? testDirectory : ( "/" + testDirectory ) ) );
+
+                FileUtils.mkdir( outputDirectory + ( testDirectory.startsWith( "/" ) ? testDirectory : ( "/" + testDirectory ) ) );
-            if ( bFoundBuildElement && build.getTestResources().size() > 0 )
+            if ( foundBuildElement && build.getTestResources().size() > 0 )
+                {
-                bOverrideTestResourceDir = true;
+                }
+
+                overrideTestResourceDir = true;
+
+
+
+
-                    FileUtils.mkdir( outputDirectory
-                        + ( testResourceDirectory.startsWith( "/" ) ? testResourceDirectory
+
+                    FileUtils.mkdir( outputDirectory + ( testResourceDirectory.startsWith( "/" ) ? testResourceDirectory
-            getLogger()
-                .info(
-                       "********************* End of debug info from resources from generated POM ***********************" );
+            getLogger().info( "********************* End of debug info from resources from generated POM ***********************" );
-                if ( !bOverrideSrcDir )
+                if ( !overrideSrcDir )
-                if ( !bOverrideResourceDir )
+                if ( !overrideResourceDir )
-                if ( !bOverrideTestSrcDir )
+                if ( !overrideTestSrcDir )
-                if ( !bOverrideTestResourceDir )
+                if ( !overrideTestResourceDir )

MOV60 MOV60 INS60 INS60 INS60 INS25 INS60 MOV43 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS59 UPD42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS21 INS21 INS25 INS21 INS42 INS42 INS32 INS25 MOV43 INS43 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS8 INS7 INS42 INS42 INS38 INS8 INS8 INS8 UPD45 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS53 INS42 INS14 INS32 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV21 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 MOV43 INS42 INS42 INS14 MOV43 INS42 INS42 INS42 INS42 MOV32 INS8 INS8 INS8 INS8 INS8 INS42 INS43 INS27 MOV21 UPD42 MOV21 UPD42 MOV21 UPD42 MOV21 UPD42 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS45 UPD42 INS42 INS42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL21