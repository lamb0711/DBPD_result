[MNG-6631] - Make DefaultArtifactVersion faster

Use if-statements instead of exception-based control flow.
Throwing exceptions is very expensive and should not be used
for normal flow.

-import java.util.regex.Pattern;
-import java.util.NoSuchElementException;
+
+import static org.apache.commons.lang3.math.NumberUtils.isDigits;
-            try
+            if ( part2.length() == 1  || !part2.startsWith( "0" ) )
-                if ( ( part2.length() == 1 ) || !part2.startsWith( "0" ) )
-                {
-                    buildNumber = Integer.valueOf( part2 );
-                }
-                else
+                buildNumber = tryParseInt( part2 );
+                if ( buildNumber == null )
-            catch ( NumberFormatException e )
+            else
-            try
-            {
-                majorVersion = Integer.valueOf( part1 );
-            }
-            catch ( NumberFormatException e )
+            majorVersion = tryParseInt( part1 );
+            if ( majorVersion == null )
-            try
+            if ( tok.hasMoreTokens() )
-                if ( tok.hasMoreTokens() )
-                {
-                    minorVersion = getNextIntegerToken( tok );
-                }
-                if ( tok.hasMoreTokens() )
-                {
-                    incrementalVersion = getNextIntegerToken( tok );
-                }
-                if ( tok.hasMoreTokens() )
-                {
-                    qualifier = tok.nextToken();
-                    fallback = Pattern.compile( "\\d+" ).matcher( qualifier ).matches();
-                }
-
-                // string tokenizer won't detect these and ignores them
-                if ( part1.contains( ".." ) || part1.startsWith( "." ) || part1.endsWith( "." ) )
+                if ( majorVersion == null )
-            catch ( NumberFormatException e )
+            else
+            {
+                fallback = true;
+            }
+            if ( tok.hasMoreTokens() )
+            {
+                minorVersion = getNextIntegerToken( tok );
+                if ( minorVersion == null )
+                {
+                    fallback = true;
+                }
+            }
+            if ( tok.hasMoreTokens() )
+            {
+                incrementalVersion = getNextIntegerToken( tok );
+                if ( incrementalVersion == null )
+                {
+                    fallback = true;
+                }
+            }
+            if ( tok.hasMoreTokens() )
+            {
+                qualifier = tok.nextToken();
+                fallback = isDigits( qualifier );
+            }
+
+            // string tokenizer won't detect these and ignores them
+            if ( part1.contains( ".." ) || part1.startsWith( "." ) || part1.endsWith( "." ) )
+        String s = tok.nextToken();
+        if ( ( s.length() > 1 ) && s.startsWith( "0" ) )
+        {
+            return null;
+        }
+        return tryParseInt( s );
+    }
+
+    private static Integer tryParseInt( String s )
+    {
-            String s = tok.nextToken();
-            if ( ( s.length() > 1 ) && s.startsWith( "0" ) )
+            if ( !isDigits( s ) )
-                throw new NumberFormatException( "Number part has a leading 0: '" + s + "'" );
+                return null;
-            return Integer.valueOf( s );
+            long longValue = Long.parseLong( s );
+            if ( longValue > Integer.MAX_VALUE )
+            {
+                return null;
+            }
+            return (int) longValue;
-        catch ( NoSuchElementException e )
+        catch ( NumberFormatException e )
-            throw new NumberFormatException( "Number is invalid" );
+            return null;

UPD40 INS31 MOV8 MOV8 INS83 INS83 INS43 INS42 INS44 INS8 MOV21 MOV60 MOV60 MOV60 MOV25 MOV25 INS42 INS43 INS42 INS54 MOV8 MOV27 MOV8 INS42 INS8 MOV12 INS25 MOV60 MOV60 INS25 INS25 INS41 UPD42 INS25 INS60 INS25 INS41 INS27 MOV8 INS32 INS8 INS8 MOV42 INS8 INS33 INS38 INS8 INS39 INS59 INS27 INS8 INS11 INS41 MOV27 INS25 UPD42 INS32 INS42 INS33 INS42 INS42 MOV21 INS25 INS21 INS25 INS25 INS21 MOV21 MOV21 MOV21 MOV21 INS32 INS41 INS42 INS32 INS42 INS40 INS41 INS39 INS42 INS33 INS27 MOV8 INS42 INS42 INS27 INS8 INS7 INS27 INS8 INS27 INS8 INS7 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS21 INS42 INS9 INS42 INS33 INS21 INS42 INS33 MOV21 INS32 INS42 MOV42 UPD42 INS7 INS7 UPD42 MOV42 MOV42 INS42 INS9 INS42 INS9 DEL40 DEL26 DEL36 DEL42 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL8 DEL54 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL8 DEL25 DEL8 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8