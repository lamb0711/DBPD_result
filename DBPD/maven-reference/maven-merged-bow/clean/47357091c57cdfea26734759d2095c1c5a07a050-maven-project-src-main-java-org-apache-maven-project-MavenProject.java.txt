o remove VersionRange from everywhere except the legacy repository system implementation


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@747662 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
-import org.apache.maven.artifact.versioning.VersionRange;
- * The concern of the project is provide runtime values based on the model. <p/>
- * The values in the model remain untouched but during the process of building a
- * project notions like inheritance and interpolation can be added. This allows
- * to have an entity which is useful in a runtime while preserving the model so
- * that it can be marshalled and unmarshalled without being tainted by runtime
- * requirements. <p/>We need to leave the model intact because we don't want
- * the following:
+ * The concern of the project is provide runtime values based on the model.
+ * <p/>
+ * The values in the model remain untouched but during the process of building a project notions
+ * like inheritance and interpolation can be added. This allows to have an entity which is useful in
+ * a runtime while preserving the model so that it can be marshalled and unmarshalled without being
+ * tainted by runtime requirements.
+ * <p/>
+ * We need to leave the model intact because we don't want the following:
-    
+
-        if(model == null)
+        if ( model == null )
-            throw new IllegalArgumentException("model: null");
+            throw new IllegalArgumentException( "model: null" );
-     *
+     * 
-        if(model == null)
+        if ( model == null )
-            throw new IllegalArgumentException("model: null");
+            throw new IllegalArgumentException( "model: null" );
-        if(repositorySystem == null)
+        if ( repositorySystem == null )
-            throw new IllegalArgumentException("mavenTools: null");
+            throw new IllegalArgumentException( "mavenTools: null" );
-                    parent = mavenProjectBuilder.buildFromRepository( getParentArtifact(),
-                                                                      this.remoteArtifactRepositories,
-                                                                      projectBuilderConfiguration.getLocalRepository() );
+                    parent = mavenProjectBuilder.buildFromRepository( getParentArtifact(), this.remoteArtifactRepositories, projectBuilderConfiguration.getLocalRepository() );
-                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) ||
-                    Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
+                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
-                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) ||
-                    Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
+                if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
-            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) ||
-                Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
+            if ( Artifact.SCOPE_COMPILE.equals( a.getScope() ) || Artifact.SCOPE_PROVIDED.equals( a.getScope() ) || Artifact.SCOPE_SYSTEM.equals( a.getScope() ) )
-     * All dependencies that this project has, including transitive ones.
-     * Contents are lazily populated, so depending on what phases have run dependencies in some scopes won't be included.
-     * eg. if only compile phase has run, dependencies with scope test won't be included.
-     *
+     * All dependencies that this project has, including transitive ones. Contents are lazily
+     * populated, so depending on what phases have run dependencies in some scopes won't be
+     * included. eg. if only compile phase has run, dependencies with scope test won't be included.
+     * 
-                Artifact artifact;
-                try
-                {
-                    artifact = repositorySystem.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
-                                                                VersionRange.createFromVersionSpec( version ) );
-                }
-                catch ( InvalidVersionSpecificationException e )
+                Artifact artifact = repositorySystem.createPluginArtifact( p.getGroupId(), p.getArtifactId(), version );
+
+                if ( artifact == null )
-
-                if ( artifact != null )
+                else
-        if( reportArtifacts != null )
+        if ( reportArtifacts != null )
-                Artifact artifact = null;
-                try
-                {
-                    artifact = repositorySystem.createPluginArtifact( p.getGroupId(), p.getArtifactId(),
-                                                                     VersionRange.createFromVersionSpec( version ) );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-                    //throw new InvalidProjectVersionException( projectId, "Report plugin: " + p.getKey(), version, pomLocation, e );
-                }
+                Artifact artifact = repositorySystem.createPluginArtifact( p.getGroupId(), p.getArtifactId(), version );
-        if( extensionArtifacts != null )
+        if ( extensionArtifacts != null )
-                Artifact artifact = null;
-                try
-                {
-                    VersionRange versionRange = VersionRange.createFromVersionSpec( version );
-                    artifact = repositorySystem.createExtensionArtifact( ext.getGroupId(), ext.getArtifactId(), versionRange );
-                }
-                catch ( InvalidVersionSpecificationException e )
-                {
-
-                }
+                Artifact artifact = repositorySystem.createExtensionArtifact( ext.getGroupId(), ext.getArtifactId(), version );
-     * @return a list of ArtifactRepository objects constructed
-     *         from the Repository objects returned by getPluginRepositories.
+     * @return a list of ArtifactRepository objects constructed from the Repository objects returned
+     *         by getPluginRepositories.
-        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null )
-            ? getSnapshotArtifactRepository()
-            : getReleaseArtifactRepository();
+        return getArtifact().isSnapshot() && ( getSnapshotArtifactRepository() != null ) ? getSnapshotArtifactRepository() : getReleaseArtifactRepository();
-//        return model.getPluginRepositories();
+        //        return model.getPluginRepositories();
-             //should add logger to this class:
-             System.out.println("[Warning] Duplicate artifact: " + artifact.toString());
-             return;
+            //should add logger to this class:
+            System.out.println( "[Warning] Duplicate artifact: " + artifact.toString() );
+            return;
-
-     *
+     * 
-            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) &&
-                ( deps.size() > 0 ) )
+            if ( ( dependencyManagement != null ) && ( ( deps = dependencyManagement.getDependencies() ) != null ) && ( deps.size() > 0 ) )
-                    try
-                    {
-                        VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );
+                    Artifact artifact = repositorySystem.createDependencyArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getType(), d.getClassifier(), d.getScope(), d.isOptional() );
-                        Artifact artifact = repositorySystem.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),
-                                                                                      versionRange, d.getType(),
-                                                                                      d.getClassifier(), d.getScope(),
-                                                                                      d.isOptional() );
-
-                        if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && ( d.getSystemPath() != null ) )
-                        {
-                            artifact.setFile( new File( d.getSystemPath() ) );
-                        }
-
-                        // If the dependencyManagement section listed exclusions,
-                        // add them to the managed artifacts here so that transitive
-                        // dependencies will be excluded if necessary.
-
-                        if ( ( null != d.getExclusions() ) && !d.getExclusions().isEmpty() )
-                        {
-                            List<String> exclusions = new ArrayList<String>();
-
-                            for ( Iterator<Exclusion> j = d.getExclusions().iterator(); j.hasNext(); )
-                            {
-                                Exclusion e = j.next();
-
-                                exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
-                            }
-
-                            ExcludesArtifactFilter eaf = new ExcludesArtifactFilter( exclusions );
-
-                            artifact.setDependencyFilter( eaf );
-                        }
-                        else
-                        {
-                            artifact.setDependencyFilter( null );
-                        }
-
-                        map.put( d.getManagementKey(), artifact );
-                    }
-                    catch ( InvalidVersionSpecificationException e )
+                    if ( artifact == null )
+
+                    if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) && ( d.getSystemPath() != null ) )
+                    {
+                        artifact.setFile( new File( d.getSystemPath() ) );
+                    }
+
+                    // If the dependencyManagement section listed exclusions,
+                    // add them to the managed artifacts here so that transitive
+                    // dependencies will be excluded if necessary.
+
+                    if ( ( null != d.getExclusions() ) && !d.getExclusions().isEmpty() )
+                    {
+                        List<String> exclusions = new ArrayList<String>();
+
+                        for ( Iterator<Exclusion> j = d.getExclusions().iterator(); j.hasNext(); )
+                        {
+                            Exclusion e = j.next();
+
+                            exclusions.add( e.getGroupId() + ":" + e.getArtifactId() );
+                        }
+
+                        ExcludesArtifactFilter eaf = new ExcludesArtifactFilter( exclusions );
+
+                        artifact.setDependencyFilter( eaf );
+                    }
+                    else
+                    {
+                        artifact.setDependencyFilter( null );
+                    }
+
+                    map.put( d.getManagementKey(), artifact );
-    public Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, String inheritedScope,
-                                ArtifactFilter dependencyFilter )
+    public Set<Artifact> createArtifacts( ArtifactFactory artifactFactory, String inheritedScope, ArtifactFilter dependencyFilter )
-        projectReferences.put(
-            getProjectReferenceId( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
+        projectReferences.put( getProjectReferenceId( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
-            String refId = getProjectReferenceId( pluginArtifact.getGroupId(), pluginArtifact.getArtifactId(),
-                                                  pluginArtifact.getVersion() );
+            String refId = getProjectReferenceId( pluginArtifact.getGroupId(), pluginArtifact.getArtifactId(), pluginArtifact.getVersion() );
-/* TODO...
-                        logger.warn( "Artifact found in the reactor has not been built when it's use was " +
-                            "attempted - resolving from the repository instead" );
-*/
+                        /* TODO...
+                                                logger.warn( "Artifact found in the reactor has not been built when it's use was " +
+                                                    "attempted - resolving from the repository instead" );
+                        */
-                 *
-                 * We want to use orginal artifact (packaging:ejb) when we are
-                 * resolving ejb-client package and we didn't manage to find
-                 * attached to project one.
-                 *
-                 * The scenario is such that somebody run "mvn test" in composity project,
-                 * and ejb-client.jar will not be attached to ejb.jar (because it is done in package phase)
-                 *
+                 * 
+                 * We want to use orginal artifact (packaging:ejb) when we are resolving ejb-client
+                 * package and we didn't manage to find attached to project one.
+                 * 
+                 * The scenario is such that somebody run "mvn test" in composity project, and
+                 * ejb-client.jar will not be attached to ejb.jar (because it is done in package
+                 * phase)
+                 * 
-                if ( ( ref.getArtifactId().equals( pluginArtifact.getArtifactId() ) ) &&
-                    ( ref.getGroupId().equals( pluginArtifact.getGroupId() ) ) &&
-                    ( ref.getArtifact().getType().equals( "ejb" ) ) &&
-                    ( pluginArtifact.getType().equals( "ejb-client" ) ) &&
-                    ( ( ref.getArtifact().getFile() != null ) && ref.getArtifact().getFile().exists() ) )
+                if ( ( ref.getArtifactId().equals( pluginArtifact.getArtifactId() ) ) && ( ref.getGroupId().equals( pluginArtifact.getGroupId() ) ) && ( ref.getArtifact().getType().equals( "ejb" ) )
+                    && ( pluginArtifact.getType().equals( "ejb-client" ) ) && ( ( ref.getArtifact().getFile() != null ) && ref.getArtifact().getFile().exists() ) )
-           throws IOException
+        throws IOException
-
-            setPluginArtifactRepositories(
-                ( Collections.unmodifiableList( project.getPluginArtifactRepositories() ) ) );
+            setPluginArtifactRepositories( ( Collections.unmodifiableList( project.getPluginArtifactRepositories() ) ) );
-        setModel(  project.getModel() );
+        setModel( project.getModel() );

MOV8 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV25 MOV60 MOV21 MOV41 UPD66 UPD66 UPD66 UPD66 UPD66 MOV27 MOV60 MOV60 INS25 MOV27 MOV8 MOV8 MOV21 INS24 UPD27 MOV8 MOV58 MOV32 MOV8 MOV32 MOV32 MOV32 MOV60 INS25 MOV42 MOV42 UPD42 INS27 MOV8 INS42 INS33 MOV32 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL42 DEL42 DEL32 DEL33 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL33 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL24 DEL25 DEL8