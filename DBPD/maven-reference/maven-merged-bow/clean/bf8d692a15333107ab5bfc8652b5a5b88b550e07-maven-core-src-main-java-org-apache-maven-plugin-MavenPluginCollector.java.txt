o reverting fix for MNG-1323, breaks trunk horribly when everything is clean. I ran the ITs after Piotr did but doing so with everything clean  doesn't work. Time for Hudson.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@578582 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.SortedMap;
-import java.util.TreeMap;
-    /**
-     * Map from pluginDescriptor.getKey (groupId:artifactId) into (ordered) map from version into pluginDescriptor
-     * Internal map is ordered to make sure that builds are determinic (used pluginVersion is determined)
-     */
-    private Map/* <String,OrderedMap<String,PluginDescriptor>> */pluginDescriptors = new HashMap();
-    private Map/* <String,OrderedMap<String,PluginDescriptor>> */pluginIdsByPrefix = new HashMap();
+    private Set pluginsInProcess = new HashSet();
-    public String getId()
-    {
-        return "maven-plugin-collector";
-    }
-    
+    private Map pluginDescriptors = new HashMap();
+
+    private Map pluginIdsByPrefix = new HashMap();
+
+
+            // TODO: see comment in getPluginDescriptor
+            String key = Plugin.constructKey( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-            putIntoPluginDescriptors( pluginDescriptor );
-            putIntoPluginIdsByPrefix( pluginDescriptor );
+            if ( !pluginsInProcess.contains( key ) )
+            {
+                pluginsInProcess.add( key );
+
+                getLogger().debug( this + ": Discovered plugin: " + key );
+                
+                pluginDescriptors.put( key, pluginDescriptor );
+
+                // TODO: throw an (not runtime) exception if there is a prefix overlap - means doing so elsewhere
+                // we also need to deal with multiple versions somehow - currently, first wins
+                if ( !pluginIdsByPrefix.containsKey( pluginDescriptor.getGoalPrefix() ) )
+                {
+                    pluginIdsByPrefix.put( pluginDescriptor.getGoalPrefix(), pluginDescriptor );
+                }
+            }
+    public String getId()
+    {
+        return "maven-plugin-collector";    
+    }
+
-        SortedMap/* <String,PluginDescriptor> */pluginVersions = (SortedMap) pluginDescriptors.get( plugin.getKey() );
-        if ( pluginVersions != null )
-        {
-            PluginDescriptor res;
-            if ( plugin.getVersion() != null )
-            {
-                res = (PluginDescriptor) pluginVersions.get( plugin.getVersion() );
-            }
-            else
-            {
-                res = getDefaultPluginDescriptorVersion( pluginVersions );
-            }
-           return res;
-        }
-        else
-        {
-            return null;
-        }
-    }
-
-    private PluginDescriptor getDefaultPluginDescriptorVersion( SortedMap pluginVersions )
-    {
-        if ( pluginVersions.size() > 0 )
-        {
-            return (PluginDescriptor) pluginVersions.get( pluginVersions.lastKey() );
-        }
-        else
-        {
-            return null;
-        }
+        // TODO: include version, but can't do this in the plugin manager as it is not resolved to the right version
+        // at that point. Instead, move the duplication check to the artifact container, or store it locally based on
+        // the unresolved version?
+        return (PluginDescriptor) pluginDescriptors.get( plugin.getKey() );
-        return getPluginDescriptor( plugin ) != null;
+        return pluginDescriptors.containsKey( plugin.getKey() );
-        return getPluginDescriptorForPrefix( prefix, null );
+        return (PluginDescriptor) pluginIdsByPrefix.get( prefix );
-    public PluginDescriptor getPluginDescriptorForPrefix( String prefix, String version )
+    public void flushPluginDescriptor( Plugin plugin )
-        SortedMap/* <String,PluginDescriptor> */pluginVersions = (SortedMap) pluginIdsByPrefix.get( prefix );
-        if ( pluginVersions != null )
+        pluginsInProcess.remove( plugin.getKey() );
+        pluginDescriptors.remove( plugin.getKey() );
+        
+        for ( Iterator it = pluginIdsByPrefix.entrySet().iterator(); it.hasNext(); )
-            PluginDescriptor res;
-            if ( version != null )
+            Map.Entry entry = (Map.Entry) it.next();
+            
+            if ( plugin.getKey().equals( entry.getValue() ) )
-                res = (PluginDescriptor) pluginVersions.get( version );
+                it.remove();
-            else
-            {
-                res = getDefaultPluginDescriptorVersion( pluginVersions );
-            }
-            return res;
-        else
-        {
-            return null;
-        }
-    }
-
-//    public void flushPluginDescriptor( Plugin plugin )
-//    {
-//        getPluginDescriptor( plugin ).cleanPluginDescriptor();
-//    }
-
-    /**
-     * Puts given pluginDescriptor into pluginDescriptors map (if the map does not contains plugin for specified maven
-     * version)
-     * 
-     * @param pluginDescriptor
-     */
-    protected void putIntoPluginDescriptors( PluginDescriptor pluginDescriptor )
-    {
-        String key = Plugin.constructKey( pluginDescriptor.getGroupId(), pluginDescriptor.getArtifactId() );
-
-        SortedMap/* <String,PluginDescriptor> */descriptorsVersions = (SortedMap) pluginDescriptors.get( key );
-        if ( descriptorsVersions == null )
-        {
-            descriptorsVersions = new TreeMap();
-            pluginDescriptors.put( key, descriptorsVersions );
-        }
-
-        putIntoVersionsMap( descriptorsVersions, pluginDescriptor );
-    }
-
-    protected void putIntoVersionsMap( SortedMap/* <String(version),PluginDescriptor> */pluginVersions,
-                                       PluginDescriptor pluginDescriptor )
-    {
-        if ( !pluginVersions.containsKey( pluginDescriptor.getVersion() ) )
-        {
-            pluginVersions.put( pluginDescriptor.getVersion(), pluginDescriptor );
-        }
-    }
-
-    protected void putIntoPluginIdsByPrefix( PluginDescriptor pluginDescriptor )
-    {
-        String goalPrefix = pluginDescriptor.getGoalPrefix();
-
-        SortedMap/* <String,PluginDescriptor> */descriptorsVersions = (SortedMap) pluginIdsByPrefix.get( goalPrefix );
-        if ( descriptorsVersions == null )
-        {
-            descriptorsVersions = new TreeMap();
-            pluginIdsByPrefix.put( goalPrefix, descriptorsVersions );
-        }
-
-        putIntoVersionsMap( descriptorsVersions, pluginDescriptor );

INS23 INS31 INS31 INS31 INS83 INS43 INS59 MOV83 MOV39 MOV42 MOV44 INS8 UPD83 MOV43 INS42 MOV44 INS8 MOV83 MOV39 MOV42 MOV44 MOV8 INS8 UPD83 MOV83 MOV39 INS42 MOV44 INS8 INS42 INS42 INS14 MOV60 INS25 MOV41 UPD43 UPD42 MOV41 INS21 MOV21 INS24 INS43 MOV62 INS8 MOV11 UPD42 MOV11 INS32 INS58 INS32 INS8 INS42 MOV60 MOV60 INS25 UPD43 UPD42 INS42 INS32 MOV43 INS42 INS42 INS32 UPD42 INS32 INS43 INS59 UPD42 MOV42 UPD42 MOV42 MOV60 INS25 INS38 INS8 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD43 INS32 INS8 INS32 MOV21 INS21 INS21 INS25 INS32 UPD42 MOV42 INS40 UPD42 INS32 INS42 INS32 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 INS38 MOV8 UPD42 MOV42 UPD42 MOV42 UPD43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS32 INS42 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS40 UPD42 UPD42 UPD42 UPD42 INS42 INS52 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 UPD42 UPD42 UPD42 MOV42 INS42 MOV32 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL42 DEL32 DEL7 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL33 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL32 DEL33 DEL27 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL34 DEL27 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL33 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31