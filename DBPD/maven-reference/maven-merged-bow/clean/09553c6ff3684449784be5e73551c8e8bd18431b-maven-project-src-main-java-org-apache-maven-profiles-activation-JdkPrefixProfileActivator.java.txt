REOPENED - issue MNG-1910: Allow jdk 1.4+ as profile requirement 
http://jira.codehaus.org/browse/MNG-1910

Applied.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@543579 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+
-    
+
-        
-        boolean reverse = false;
-        
-        if ( jdk.startsWith( "!" ) )
-        {
-            reverse = true;
-            jdk = jdk.substring( 1 );
-        }
-        
+
+        return isActive( javaVersion, jdk );
+    }
+
+    public boolean isActive( String jdkVersion, String expression )
+    {
+        boolean reverse = false;
+
+        if ( expression.startsWith( "!" ) )
+        {
+            reverse = true;
+            expression = expression.substring( 1 );
+        }
+
-        boolean result = javaVersion.startsWith( jdk );
-        
+        boolean result = false;
+        if ( expression.endsWith( "+" ) )
+        {
+            result = compareTo( asIntArray( jdkVersion ), asIntArray( expression ) ) >= 0;
+        }
+        else if ( expression.endsWith( "-" ) )
+        {
+            result = compareTo( asIntArray( jdkVersion ), asIntArray( expression ) ) <= 0;
+        }
+        else
+        {
+            // null case is covered by canDetermineActivation(), so we can do a straight startsWith() here.
+            result = jdkVersion.startsWith( expression );
+        }
+
-        return profile.getActivation() != null && StringUtils.isNotEmpty( profile.getActivation().getJdk() );
+        return ( profile.getActivation() != null ) && StringUtils.isNotEmpty( profile.getActivation().getJdk() );
+    private static void parseNum( List pList, StringBuffer pBuffer )
+    {
+        if ( pBuffer.length() > 0 )
+        {
+            pList.add( new Integer( pBuffer.toString() ) );
+            pBuffer.setLength( 0 );
+        }
+    }
+
+    /** This method transforms a string like "1.5.0_06" into
+     * new int[]{1, 5, 0, 6}.
+     */
+    private static int[] asIntArray( String pVersion )
+    {
+        List nums = new ArrayList();
+        StringBuffer sb = new StringBuffer();
+        while ( pVersion.length() > 0 )
+        {
+            char c = pVersion.charAt( 0 );
+            pVersion = pVersion.substring( 1 );
+            if ( Character.isDigit( c ) )
+            {
+                sb.append( c );
+            }
+            else
+            {
+                parseNum( nums, sb );
+            }
+        }
+        parseNum( nums, sb );
+        int[] result = new int[nums.size()];
+        for ( int i = 0; i < result.length; i++ )
+        {
+            result[i] = ( (Integer) nums.get( i ) ).intValue();
+        }
+        return result;
+    }
+
+    /** This method compares to integer arrays, as created
+     * by {@link #asIntArray(String)}.
+     */
+    private static int compareTo( int[] pVersion1, int[] pVersion2 )
+    {
+        int len = Math.max( pVersion1.length, pVersion2.length );
+        for ( int i = 0; i < len; i++ )
+        {
+            int n1 = pVersion1.length > i ? pVersion1[i] : 0;
+            int n2 = pVersion2.length > i ? pVersion2[i] : 0;
+            int result = n1 - n2;
+            if ( result != 0 )
+            {
+                return result;
+            }
+        }
+        return 0;
+    }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS41 INS43 INS42 INS43 INS42 MOV60 INS25 INS60 INS25 MOV25 INS43 INS42 INS43 INS42 INS25 INS65 INS39 INS85 INS43 INS42 INS60 INS60 INS61 INS21 INS60 INS24 INS41 INS65 INS5 INS42 INS5 INS42 INS60 INS24 INS41 INS32 INS42 INS42 INS32 INS8 INS39 INS59 INS32 INS8 INS25 INS42 INS42 INS27 INS8 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS66 INS65 INS66 INS39 INS85 INS39 INS85 INS39 INS59 INS58 INS27 INS37 INS8 INS34 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS45 MOV21 INS21 INS42 INS9 INS42 INS42 INS45 INS21 INS32 INS8 INS8 INS36 INS32 INS34 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS34 INS60 INS21 INS25 INS42 INS42 INS42 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS68 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS7 INS7 INS42 INS42 INS45 INS21 INS21 MOV27 INS42 INS42 INS32 INS32 INS43 INS43 INS42 INS42 INS39 INS59 INS7 INS32 INS8 INS8 INS5 INS32 INS42 INS34 INS7 INS42 INS69 INS42 INS42 INS40 INS40 INS42 INS34 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS32 INS42 INS27 INS7 INS7 INS42 INS42 INS14 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS39 INS85 INS42 INS42 INS2 INS32 INS43 INS42 INS16 INS42 INS16 INS42 INS27 INS42 INS34 INS41 INS42 INS42 INS34 INS32 INS34 INS42 INS27 INS42 INS32 INS43 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS32 INS32 INS42 INS42 INS36 INS42 INS42 INS27 INS2 INS34 INS27 INS2 INS34 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60