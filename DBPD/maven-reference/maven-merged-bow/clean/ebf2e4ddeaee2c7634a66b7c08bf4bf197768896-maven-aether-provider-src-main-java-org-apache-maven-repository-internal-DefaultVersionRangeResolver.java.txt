Merge branch 'eclipse-aether' of github.com:tesla/tesla-build into eclipse-aether

Conflicts:
	.gitignore
	pom.xml

+import java.io.FileInputStream;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
-import org.sonatype.aether.RepositoryEvent.EventType;
-import org.sonatype.aether.RepositorySystemSession;
-import org.sonatype.aether.RequestTrace;
-import org.sonatype.aether.SyncContext;
-import org.sonatype.aether.util.DefaultRequestTrace;
-import org.sonatype.aether.util.listener.DefaultRepositoryEvent;
-import org.sonatype.aether.util.metadata.DefaultMetadata;
-import org.sonatype.aether.util.version.GenericVersionScheme;
-import org.sonatype.aether.version.InvalidVersionSpecificationException;
-import org.sonatype.aether.version.Version;
-import org.sonatype.aether.version.VersionConstraint;
-import org.sonatype.aether.version.VersionScheme;
-import org.sonatype.aether.impl.MetadataResolver;
-import org.sonatype.aether.impl.RepositoryEventDispatcher;
-import org.sonatype.aether.impl.SyncContextFactory;
-import org.sonatype.aether.impl.VersionRangeResolver;
-import org.sonatype.aether.metadata.Metadata;
-import org.sonatype.aether.repository.ArtifactRepository;
-import org.sonatype.aether.repository.RemoteRepository;
-import org.sonatype.aether.repository.WorkspaceReader;
-import org.sonatype.aether.resolution.MetadataRequest;
-import org.sonatype.aether.resolution.MetadataResult;
-import org.sonatype.aether.resolution.VersionRangeRequest;
-import org.sonatype.aether.resolution.VersionRangeResolutionException;
-import org.sonatype.aether.resolution.VersionRangeResult;
-import org.sonatype.aether.spi.locator.Service;
-import org.sonatype.aether.spi.locator.ServiceLocator;
-import org.sonatype.aether.spi.log.Logger;
-import org.sonatype.aether.spi.log.NullLogger;
+import org.codehaus.plexus.util.IOUtil;
+import org.eclipse.aether.RepositoryEvent.EventType;
+import org.eclipse.aether.RepositoryEvent;
+import org.eclipse.aether.RepositorySystemSession;
+import org.eclipse.aether.RequestTrace;
+import org.eclipse.aether.SyncContext;
+import org.eclipse.aether.impl.MetadataResolver;
+import org.eclipse.aether.impl.RepositoryEventDispatcher;
+import org.eclipse.aether.impl.SyncContextFactory;
+import org.eclipse.aether.impl.VersionRangeResolver;
+import org.eclipse.aether.metadata.DefaultMetadata;
+import org.eclipse.aether.metadata.Metadata;
+import org.eclipse.aether.repository.ArtifactRepository;
+import org.eclipse.aether.repository.RemoteRepository;
+import org.eclipse.aether.repository.WorkspaceReader;
+import org.eclipse.aether.resolution.MetadataRequest;
+import org.eclipse.aether.resolution.MetadataResult;
+import org.eclipse.aether.resolution.VersionRangeRequest;
+import org.eclipse.aether.resolution.VersionRangeResolutionException;
+import org.eclipse.aether.resolution.VersionRangeResult;
+import org.eclipse.aether.spi.locator.Service;
+import org.eclipse.aether.spi.locator.ServiceLocator;
+import org.eclipse.aether.spi.log.Logger;
+import org.eclipse.aether.spi.log.LoggerFactory;
+import org.eclipse.aether.spi.log.NullLoggerFactory;
+import org.eclipse.aether.util.version.GenericVersionScheme;
+import org.eclipse.aether.version.InvalidVersionSpecificationException;
+import org.eclipse.aether.version.Version;
+import org.eclipse.aether.version.VersionConstraint;
+import org.eclipse.aether.version.VersionScheme;
+@Named
-    @Requirement
-    private Logger logger = NullLogger.INSTANCE;
+    private static final String MAVEN_METADATA_XML = "maven-metadata.xml";
+
+    @SuppressWarnings( "unused" )
+    @Requirement( role = LoggerFactory.class )
+    private Logger logger = NullLoggerFactory.LOGGER;
+    public DefaultVersionRangeResolver()
+    {
+        // enable default constructor
+    }
+
+    @Inject
+    DefaultVersionRangeResolver( MetadataResolver metadataResolver, SyncContextFactory syncContextFactory,
+                                 RepositoryEventDispatcher repositoryEventDispatcher, LoggerFactory loggerFactory )
+    {
+        setMetadataResolver( metadataResolver );
+        setSyncContextFactory( syncContextFactory );
+        setLoggerFactory( loggerFactory );
+        setRepositoryEventDispatcher( repositoryEventDispatcher );
+    }
+
-        setLogger( locator.getService( Logger.class ) );
+        setLoggerFactory( locator.getService( LoggerFactory.class ) );
-    public DefaultVersionRangeResolver setLogger( Logger logger )
+    public DefaultVersionRangeResolver setLoggerFactory( LoggerFactory loggerFactory )
-        this.logger = ( logger != null ) ? logger : NullLogger.INSTANCE;
+        this.logger = NullLoggerFactory.getSafeLogger( loggerFactory, getClass() );
+    void setLogger( LoggerFactory loggerFactory )
+    {
+        // plexus support
+        setLoggerFactory( loggerFactory );
+    }
+
-        if ( versionConstraint.getRanges().isEmpty() )
+        if ( versionConstraint.getRange() == null )
-        RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
+        RequestTrace trace = RequestTrace.newChild( request.getTrace(), request );
-                                 MavenMetadata.MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT );
+                                 MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT );
-        if ( metadata != null )
+        FileInputStream fis = null;
+        try
-            SyncContext syncContext = syncContextFactory.newInstance( session, true );
+            if ( metadata != null )
+            {
+                SyncContext syncContext = syncContextFactory.newInstance( session, true );
-            try
-            {
-                syncContext.acquire( null, Collections.singleton( metadata ) );
+                try
+                {
+                    syncContext.acquire( null, Collections.singleton( metadata ) );
-                versioning = MavenMetadata.read( metadata.getFile() ).getVersioning();
+                    if ( metadata.getFile() != null && metadata.getFile().exists() )
+                    {
+                        fis = new FileInputStream( metadata.getFile() );
+                        org.apache.maven.artifact.repository.metadata.Metadata m =
+                            new MetadataXpp3Reader().read( fis, false );
+                        versioning = m.getVersioning();
+                    }
+                }
+                finally
+                {
+                    syncContext.close();
+                }
-            catch ( Exception e )
-            {
-                invalidMetadata( session, trace, metadata, repository, e );
-                result.addException( e );
-            }
-            finally
-            {
-                syncContext.release();
-            }
+        }
+        catch ( Exception e )
+        {
+            invalidMetadata( session, trace, metadata, repository, e );
+            result.addException( e );
+        }
+        finally
+        {
+            IOUtil.close( fis );
-        DefaultRepositoryEvent event = new DefaultRepositoryEvent( EventType.METADATA_INVALID, session, trace );
+        RepositoryEvent.Builder event = new RepositoryEvent.Builder( session, EventType.METADATA_INVALID );
+        event.setTrace( trace );
-        repositoryEventDispatcher.dispatch( event );
+        repositoryEventDispatcher.dispatch( event.build() );
-}
+}

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS78 INS23 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS43 INS59 INS79 INS77 INS83 INS42 INS8 INS78 INS42 INS44 INS44 INS44 INS44 INS8 UPD42 INS39 INS42 INS44 INS8 MOV8 INS42 INS42 INS45 INS42 INS45 INS42 INS80 UPD40 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 UPD43 UPD42 INS43 INS42 INS21 MOV60 INS60 INS54 MOV41 INS60 INS21 INS42 INS57 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 UPD42 INS42 INS32 INS27 INS43 INS59 INS8 MOV12 INS8 UPD43 MOV43 INS59 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS32 INS33 INS42 INS42 INS33 INS25 INS21 INS40 MOV42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 MOV42 UPD42 MOV42 UPD42 INS42 MOV27 INS8 INS32 UPD43 MOV43 INS42 MOV40 MOV42 INS42 UPD43 INS42 MOV60 MOV54 INS42 INS42 INS42 INS40 UPD42 INS8 MOV21 INS25 INS27 INS8 INS27 INS32 INS21 INS60 MOV21 UPD42 INS32 INS33 INS32 INS42 INS7 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS32 INS43 MOV32 INS14 INS42 INS42 INS9 UPD42 MOV42 INS42 INS43 INS42 DEL40 DEL26 DEL42 DEL78 DEL42 DEL33 DEL27 DEL36 DEL42 DEL40 DEL16 DEL32 DEL42 DEL32 DEL40 DEL42 DEL32 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60