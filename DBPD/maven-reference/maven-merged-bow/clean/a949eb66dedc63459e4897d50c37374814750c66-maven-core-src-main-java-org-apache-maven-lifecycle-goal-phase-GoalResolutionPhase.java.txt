o Removed GoalDecorationPhase, since goal decoration is now a part of the model
o Removed PluginDownloadPhase, since plugin resolution/download has to be a part of the prereq and pre/postGoal resolution, too
o Changed DefaultMaven to execute the session lifecycle, and the component wiring to likewise wire the DefaultMaven with a session lifecycle manager
o Removed the org.apache.maven.decoration package and its contents, since this is all in the model now
o Fixed the GoalResolutionPhase to verify each goal's plugin in turn as it resolves prereqs, preGoals and postGoals
o Fixed the GoalResolutionPhaseTest to work with the new resolution model
o Added a new createGoalExecutionContext to the MavenTestCase base class, to allow me to inject a MavenProject directly rather than a pom file
o Fixed the MavenLifecycleManagerTest to only expect 4 lifecycle phases, now than the plugin resolution and goal decoration phases are obsoleted
o All builds on local machine, but will depend on plexus-0.17.jar/pom and plexus-artifact-container-1.0-alpha-1.jar/pom to build on beaver
o I uploaded plexus-artifact-container-1.0-alpha-1.jar to ${plexus.home}/dist, but cannot upload POMs due to priveleges problem in poms dir.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163007 13f79535-47bb-0310-9956-ffa450edef68

-
-import org.apache.maven.decoration.GoalDecorator;
-import org.apache.maven.decoration.GoalDecoratorBindings;
+import org.apache.maven.model.GoalDecorator;
+import org.apache.maven.model.PostGoal;
+import org.apache.maven.model.PreGoal;
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
-public class GoalResolutionPhase extends AbstractMavenGoalPhase
+public class GoalResolutionPhase
+    extends AbstractMavenGoalPhase
-    public void execute( MavenGoalExecutionContext context )
-        throws GoalExecutionException
+    public void execute( MavenGoalExecutionContext context ) throws GoalExecutionException
-            MojoDescriptor goalDescriptor = context.getMojoDescriptor();
-
-            if ( goalDescriptor == null )
-            {
-                throw new GoalNotFoundException( context.getGoalName() );
-            }
-
-            String goal = goalDescriptor.getId();
+            String goal = context.getGoalName();
+
+            if ( goal.indexOf( ":" ) < 0 )
+            {
+                goal = context.getProject().getType() + ":" + goal;
+            }
+
+            MojoDescriptor md = pluginManager.getMojoDescriptor( goal );
+
+            context.setMojoDescriptor( md );
+        }
+        catch ( Exception e )
+        {
+            throw new GoalExecutionException( "Error resolving goals: ", e );
-    private List resolveTopLevel( String goal, Set includedGoals, List results, MavenGoalExecutionContext context, PluginManager pluginManager )
+    private List resolveTopLevel( String goal, Set includedGoals, List results, MavenGoalExecutionContext context,
+        PluginManager pluginManager ) throws Exception
-        // Retrieve the prereqs-driven execution path for this goal, using the DAG.
+        // Ensure that the plugin for this goal is installed.
+        pluginManager.verifyPluginForGoal( goal );
+
+        // Retrieve the prereqs-driven execution path for this goal, using the
+        // DAG.
-        // Reverse the original goals list to preserve encapsulation while decorating.
+        // Reverse the original goals list to preserve encapsulation while
+        // decorating.
-    private List resolveWithPrereqs( List work, Set includedGoals, List results, MavenGoalExecutionContext context, PluginManager pluginManager )
+    private List resolveWithPrereqs( List work, Set includedGoals, List results, MavenGoalExecutionContext context,
+        PluginManager pluginManager ) throws Exception
-                GoalDecoratorBindings bindings = context.getGoalDecoratorBindings();
-                if ( bindings != null )
+                List preGoals = new LinkedList();
+                List allPreGoals = context.getProject().getModel().getPreGoals();
+                for ( Iterator it = allPreGoals.iterator(); it.hasNext(); )
-                    List preGoals = bindings.getPreGoals( goal );
-
-                    results = resolveGoalDecorators( preGoals, includedGoals, results, context, pluginManager );
+                    PreGoal preGoal = (PreGoal) it.next();
+                    if ( goal.equals( preGoal.getName() ) )
+                    {
+                        preGoals.add( preGoal.getAttain() );
+                    }
+                results = resolveGoalDecorators( goal, true, includedGoals, results, context, pluginManager );
+
-                if ( bindings != null )
-                {
-                    List postGoals = bindings.getPostGoals( goal );
-                    results = resolveGoalDecorators( postGoals, includedGoals, results, context, pluginManager );
-                }
+                results = resolveGoalDecorators( goal, false, includedGoals, results, context, pluginManager );
-    private List resolveGoalDecorators( List preGoals, Set includedGoals, List results, MavenGoalExecutionContext context, PluginManager pluginManager )
+    private List resolveGoalDecorators( String baseGoal, boolean usePreGoals, Set includedGoals, List results,
+        MavenGoalExecutionContext context, PluginManager pluginManager ) throws Exception
-        for ( Iterator it = preGoals.iterator(); it.hasNext(); )
+        List decorators = null;
+        if ( usePreGoals )
+        {
+            decorators = context.getProject().getModel().getPreGoals();
+        }
+        else
+        {
+            decorators = context.getProject().getModel().getPostGoals();
+        }
+
+        for ( Iterator it = decorators.iterator(); it.hasNext(); )
-            String goal = decorator.getDecoratorGoal();
-            resolveTopLevel( goal, includedGoals, results, context, pluginManager );
+            if ( baseGoal.equals( decorator.getName() ) )
+            {
+                String goal = decorator.getAttain();
+                resolveTopLevel( goal, includedGoals, results, context, pluginManager );
+            }
-}
+}

MOV26 MOV26 MOV26 INS26 UPD40 INS40 UPD40 INS43 INS43 INS44 INS43 UPD66 INS42 INS21 INS42 MOV43 INS42 INS39 UPD42 INS42 INS60 INS25 MOV25 MOV60 INS12 INS32 MOV43 INS59 INS42 INS8 INS8 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS25 MOV43 UPD27 MOV43 INS32 INS43 INS42 INS53 INS7 INS7 INS32 INS8 UPD42 MOV32 INS32 INS34 INS21 UPD42 INS42 INS42 INS42 INS42 INS14 INS60 INS60 INS24 MOV21 MOV21 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS32 MOV60 MOV21 INS42 INS42 INS45 INS7 INS42 UPD42 UPD42 INS43 INS45 INS42 MOV43 INS59 MOV43 MOV59 INS58 INS32 INS8 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS27 INS42 INS42 INS14 UPD42 INS43 INS59 INS42 INS42 MOV60 INS25 INS32 INS42 INS32 INS42 INS42 INS32 INS45 INS42 INS43 INS32 UPD42 INS42 INS42 INS32 INS43 INS32 INS8 UPD42 INS9 UPD42 INS9 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD42 INS11 INS42 INS42 INS32 INS21 INS42 INS42 MOV42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL42 DEL43 DEL14 DEL53 DEL42 DEL32 DEL43 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25