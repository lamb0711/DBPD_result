Refactored out more uses of modello and moved classes from maven-project to maven-project-builder. Doing this so that maven-mercury will not have direct dependency on modello or maven model.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@746002 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Model;
-import org.apache.maven.model.Parent;
-import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
-import org.apache.maven.shared.model.InputStreamDomainModel;
+import org.apache.maven.shared.model.InputStreamDomainModel;
-import org.codehaus.plexus.util.WriterFactory;
-import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
-import java.io.ByteArrayOutputStream;
-import java.io.Writer;
-public final class PomClassicDomainModel
-    implements IPomClassicDomainModel
+public class PomClassicDomainModel implements InputStreamDomainModel
-    /**
-     * Maven model
-     */
-    private Model model;
-
-    public PomClassicDomainModel( List<ModelProperty> modelProperties)
+    private String parentGroupId = null, parentArtifactId = null, parentVersion = null, parentId = null, parentRelativePath;
+
+    public PomClassicDomainModel( List<ModelProperty> modelProperties )
+
-    }
-    /**
-     * Constructor
-     *
-     * @param model maven model
-     * @throws IOException if there is a problem constructing the model
-     */
-    public PomClassicDomainModel( Model model )
-        throws IOException
-    {
-        if ( model == null )
-        {
-            throw new IllegalArgumentException( "model: null" );
-        }
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        Writer out = null;
-        MavenXpp3Writer writer = new MavenXpp3Writer();
-        try
-        {
-            out = WriterFactory.newXmlWriter( baos );
-            writer.write( out, model );
-        }
-        finally
-        {
-            if ( out != null )
-            {
-                out.close();
-            }
-        }
-        inputBytes = baos.toByteArray();
+        initializeProperties( modelProperties );
+        modelProperties = getModelProperties();
+        initializeProperties( modelProperties );
+    }
+
+    private void initializeProperties(List<ModelProperty> modelProperties)
+    {
+        String groupId = null, artifactId = null, version = null;
+        for(ModelProperty mp : modelProperties)
+        {
+            if(mp.getUri().equals(ProjectUri.groupId))
+            {
+                groupId = mp.getResolvedValue();
+            }
+            else if(mp.getUri().equals(ProjectUri.artifactId))
+            {
+                artifactId = mp.getResolvedValue();
+            }
+            else if(mp.getUri().equals(ProjectUri.version))
+            {
+                version = mp.getResolvedValue();
+            }
+            else if(mp.getUri().equals(ProjectUri.Parent.artifactId))
+            {
+                parentArtifactId = mp.getResolvedValue();
+            }
+            else if(mp.getUri().equals(ProjectUri.Parent.groupId))
+            {
+                parentGroupId = mp.getResolvedValue();
+            }
+            else if(mp.getUri().equals(ProjectUri.Parent.version))
+            {
+                parentVersion = mp.getResolvedValue();
+            }
+            else if(mp.getUri().equals(ProjectUri.Parent.relativePath))
+            {
+                parentRelativePath = mp.getResolvedValue();
+            }
+
+
+
+            if(groupId != null && artifactId != null && version != null && parentGroupId != null &&
+                    parentArtifactId != null && parentVersion != null & parentRelativePath != null)
+            {
+                break;
+            }
+        }
+            if( groupId == null && parentGroupId != null)
+            {
+                groupId = parentGroupId;
+            }
+            if( artifactId == null && parentArtifactId != null)
+            {
+                artifactId = parentArtifactId;
+            }
+            if( version == null && parentVersion != null )
+            {
+                version = parentVersion;
+            }
+
+        if(parentGroupId != null && parentArtifactId != null && parentVersion != null)
+        {
+            parentId = parentGroupId + ":" + parentArtifactId + ":" + parentVersion;
+        }
+        
+        if(parentRelativePath == null)
+        {
+            parentRelativePath = ".." + File.separator + "pom.xml";
+        }
+
+        id = groupId + ":" + artifactId + ":" + version;
-    
+
+    public String getParentGroupId() {
+        return parentGroupId;
+    }
+
+    public String getParentArtifactId() {
+        return parentArtifactId;
+    }
+
+    public String getParentVersion() {
+        return parentVersion;
+    }
+
-    /**
-     * Returns true if groupId.equals(a.groupId) && artifactId.equals(a.artifactId) && version.equals(a.version),
-     * otherwise returns false.
-     *
-     * @param a model to compare
-     * @return true if groupId.equals(a.groupId) && artifactId.equals(a.artifactId) && version.equals(a.version),
-     *         otherwise returns false.
-     */
-    public boolean matchesModel( Model a )
+    public String getParentId() throws IOException
-        if ( a == null )
-        {
-            throw new IllegalArgumentException( "a: null" );
-        }
-        if ( model == null )
-        {
-            try
-            {
-                model = getModel();
-            }
-            catch ( IOException e )
-            {
-                return false;
-            }
-        }
-        return a.getId().equals( this.getId() );
+        return parentId;
-    public String getId()
+    public String getRelativePathOfParent()
-        if ( id == null )
-        {
-            if ( model == null )
-            {
-                try
-                {
-                    model = getModel();
-                }
-                catch ( IOException e )
-                {
-                    return "";
-                }
-            }
-            String groupId = ( model.getGroupId() == null && model.getParent() != null )
-                ? model.getParent().getGroupId()
-                : model.getGroupId();
-            String artifactId = ( model.getArtifactId() == null && model.getParent() != null )
-                ? model.getParent().getArtifactId()
-                : model.getArtifactId();
-            String version = ( model.getVersion() == null && model.getParent() != null )
-                ? model.getParent().getVersion()
-                : model.getVersion();
+        return parentRelativePath;
+    }
-            id = groupId + ":" + artifactId + ":" + version;
-        }
+    public String getId() throws IOException
+    {
-    public boolean matchesParent( Parent parent )
+    public boolean matchesParentOf( PomClassicDomainModel domainModel ) throws IOException
-        if ( parent == null )
+        if ( domainModel == null )
-            throw new IllegalArgumentException( "parent: null" );
+            throw new IllegalArgumentException( "domainModel: null" );
-        return getId().equals( parent.getGroupId() + ":" + parent.getArtifactId() + ":" + parent.getVersion() );
+
+        return getId().equals(domainModel.getParentId());
-     * Returns maven model
-     *
-     * @return maven model
-     */
-    public Model getModel()
-        throws IOException
-    {
-        if ( model != null )
-        {
-            return model;
-        }
-        try
-        {
-            model = new MavenXpp3Reader().read( ReaderFactory.newXmlReader( new ByteArrayInputStream( inputBytes ) ) );
-            return model;
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new IOException( e.getMessage() );
-        }
-    }
-
-    /**
-        return o instanceof PomClassicDomainModel && getId().equals( ( (PomClassicDomainModel) o ).getId() );
+        try {
+            return o instanceof PomClassicDomainModel && getId().equals( ( (PomClassicDomainModel) o ).getId() );
+        } catch (IOException e) {
+            return false;
+        }

MOV26 UPD43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 MOV83 MOV43 INS59 MOV59 INS59 INS59 INS59 UPD83 MOV83 INS39 UPD42 MOV42 MOV44 INS8 MOV83 UPD43 MOV43 UPD42 MOV42 INS8 INS83 UPD43 MOV43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 MOV43 INS42 MOV43 INS8 INS83 INS43 INS42 INS8 INS83 MOV43 INS42 MOV43 INS8 UPD42 INS43 INS8 INS42 INS33 UPD42 INS33 INS42 INS33 INS42 INS33 INS42 INS21 INS21 INS21 INS74 UPD42 INS60 INS70 INS25 INS25 INS25 INS25 INS25 MOV21 UPD42 INS41 UPD42 MOV41 UPD42 MOV42 INS41 MOV41 UPD42 MOV42 INS41 MOV41 UPD43 UPD42 INS42 INS54 INS32 INS7 INS32 INS43 INS43 MOV43 INS59 MOV59 MOV59 INS44 INS42 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 UPD42 INS42 UPD42 INS42 UPD42 MOV8 MOV12 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS33 UPD42 INS33 UPD42 INS43 INS42 INS25 INS25 INS27 INS27 INS21 MOV27 MOV27 INS21 INS27 INS27 INS21 UPD27 MOV27 MOV27 INS21 INS42 INS33 INS21 UPD42 INS32 INS42 UPD42 MOV42 INS32 INS8 INS25 INS27 INS8 INS42 INS33 INS42 INS33 INS7 INS42 INS42 INS7 INS42 INS33 INS42 INS33 INS7 INS27 INS27 INS42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS40 MOV21 INS32 MOV8 INS25 INS27 INS27 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 MOV33 INS42 INS27 INS42 INS27 UPD45 INS42 INS42 INS32 UPD42 MOV42 INS40 INS32 INS8 INS25 INS27 MOV27 INS27 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS40 INS45 UPD42 UPD42 MOV42 UPD42 MOV42 INS7 INS32 INS42 INS40 MOV21 INS32 INS8 INS25 INS27 UPD27 MOV27 INS42 INS42 INS33 INS42 INS33 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS21 INS32 INS8 INS25 INS27 INS27 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS7 INS32 INS42 INS40 MOV21 INS32 INS8 INS25 INS27 INS27 INS42 INS33 UPD42 UPD42 INS42 INS32 INS42 INS42 MOV32 MOV42 INS40 INS21 INS32 INS8 INS42 INS33 INS42 INS33 INS42 INS42 UPD42 UPD42 UPD42 INS7 INS32 INS42 INS40 MOV21 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL66 DEL65 DEL29 DEL42 DEL43 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL60 DEL42 DEL43 DEL60 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL42 DEL33 DEL27 DEL25 DEL8 DEL54 DEL8 DEL31 DEL43 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL54 DEL8 DEL25 DEL52 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL45 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31