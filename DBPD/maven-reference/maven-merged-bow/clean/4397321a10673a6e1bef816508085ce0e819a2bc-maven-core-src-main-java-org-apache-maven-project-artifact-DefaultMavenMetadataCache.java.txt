o Extended metadata resolution group to also hold managed version map. This can save us another trip through the project builder when transitively resolving say plugin dependencies. We already need to build the project to grab the direct dependencies so we can as well grab the managed ones while we're there

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@801738 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+        private final boolean resolveManagedVersions;
-        public CacheKey( Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+        public CacheKey( Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository,
+                         List<ArtifactRepository> remoteRepositories )
+            this.resolveManagedVersions = resolveManagedVersions;
+            hash = hash * 31 + ( resolveManagedVersions ? 1 : 2 );
-            return artifactEquals( artifact, other.artifact ) && repositories.equals( other.repositories );
+            return artifactEquals( artifact, other.artifact ) && resolveManagedVersions == other.resolveManagedVersions
+                && repositories.equals( other.repositories );
+        private Map<String, Artifact> managedVersions;
-        CacheRecord(Artifact pomArtifact, Set<Artifact> artifacts, List<ArtifactRepository> remoteRepositories)
+        CacheRecord(Artifact pomArtifact, Set<Artifact> artifacts, Map<String, Artifact> managedVersions, List<ArtifactRepository> remoteRepositories)
+            this.managedVersions = managedVersions;
+            if ( managedVersions != null )
+            {
+                this.managedVersions =
+                    ArtifactUtils.copyArtifacts( managedVersions, new LinkedHashMap<String, Artifact>() );
+            }
+        public Map<String, Artifact> getManagedVersions()
+        {
+            return managedVersions;
+        }
+
-    public ResolutionGroup get( Artifact artifact, ArtifactRepository localRepository,
+    public ResolutionGroup get( Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository,
-        CacheKey cacheKey = new CacheKey( artifact, localRepository, remoteRepositories );
+        CacheKey cacheKey = new CacheKey( artifact, resolveManagedVersions, localRepository, remoteRepositories );
-            Set<Artifact> artifacts = ArtifactUtils.copyArtifacts( cacheRecord.getArtifacts(), new LinkedHashSet<Artifact>() );
-            return new ResolutionGroup( pomArtifact, artifacts , cacheRecord.getRemoteRepositories() );
+            Set<Artifact> artifacts =
+                ArtifactUtils.copyArtifacts( cacheRecord.getArtifacts(), new LinkedHashSet<Artifact>() );
+            Map<String, Artifact> managedVersions = cacheRecord.getManagedVersions();
+            if ( managedVersions != null )
+            {
+                managedVersions = ArtifactUtils.copyArtifacts( managedVersions, new LinkedHashMap<String, Artifact>() );
+            }
+            return new ResolutionGroup( pomArtifact, artifacts, managedVersions, cacheRecord.getRemoteRepositories() );
-    public void put( Artifact artifact, ArtifactRepository localRepository,
+    public void put( Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository,
-        CacheKey cacheKey = new CacheKey( artifact, localRepository, remoteRepositories );
-        CacheRecord cacheRecord = new CacheRecord( result.getPomArtifact(), result.getArtifacts(), result.getResolutionRepositories() );
+        CacheKey cacheKey = new CacheKey( artifact, resolveManagedVersions, localRepository, remoteRepositories );
+        CacheRecord cacheRecord =
+            new CacheRecord( result.getPomArtifact(), result.getArtifacts(), result.getManagedVersions(),
+                             result.getResolutionRepositories() );

INS26 INS40 INS23 INS23 INS31 INS44 INS44 INS83 INS83 INS39 INS59 INS44 INS83 INS74 INS59 INS44 INS83 INS74 INS42 INS8 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS21 INS21 INS43 INS43 INS43 INS42 INS74 INS42 INS21 INS25 INS43 INS43 INS43 INS41 MOV43 MOV43 INS7 INS7 INS42 INS42 INS42 INS43 INS43 INS43 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS60 INS25 INS22 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS22 INS42 INS42 INS33 INS21 MOV43 INS42 INS74 INS59 INS27 INS8 MOV43 INS42 INS32 INS52 INS42 INS27 INS36 MOV32 INS27 INS52 INS42 INS7 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS34 INS16 INS42 INS40 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS34 INS34 INS52 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS74 INS42 INS42 INS42 INS14 INS43 INS43 INS43 INS74 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42