o Finished MNG-632.
  Note: I'm not sure wheter my tmpDir approach is the best.
  It's certain to work all the time (depending on FileUtils.createTempFile),
  but it may leave a lot of 'garbage' in target/.

o Updated maven-core's assembly descriptor to make use
  of new line endings functionality.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@267344 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.DirectoryScanner;
+import org.codehaus.plexus.util.FileUtils;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+    /**
+     * @parameter expression="${project.build.directory}/archive-tmp"
+     * @required
+     * @readonly
+     */
+    private File tempRoot;
+
+            String lineEnding = getLineEndingCharacters( fileSet.getLineEnding() );
+            
+            File tmpDir = null;
+                
+            if ( lineEnding != null )
+            {
+                tmpDir = FileUtils.createTempFile( "", "", tempRoot );
+                tmpDir.mkdirs();
+            }
+            
-                " file perms: " + Integer.toString( archiver.getDefaultFileMode(), 8 ) );
+                " file perms: " + Integer.toString( archiver.getDefaultFileMode(), 8 ) +
+                ( fileSet.getLineEnding() == null ? "" : " lineEndings: " + fileSet.getLineEnding() ) );
-    
+
+            // TODO: default excludes should be in the archiver?
-            // TODO: default excludes should be in the archiver?
-            archiver.addDirectory( new File( directory ), output, includes, excludes );
+            
+            File archiveBaseDir = new File( directory );
+            
+            if ( lineEnding != null )
+            {
+                copySetReplacingLineEndings( archiveBaseDir, tmpDir, includes, excludes, lineEnding );
+
+                archiveBaseDir = tmpDir;
+            }
+
+            archiver.addDirectory( archiveBaseDir, output, includes, excludes );
-    
+
+    private void copyReplacingLineEndings( File source, File dest, String lineEndings )
+        throws IOException
+    {
+        getLog().debug( "Copying while replacing line endings: " + source + " to " + dest );
+
+        BufferedReader in = new BufferedReader( new FileReader ( source ) );
+        BufferedWriter out = new BufferedWriter ( new FileWriter( dest ) );
+        
+        String line;
+        
+        while ( ( line = in.readLine()) != null )
+        {
+            out.write( line );
+            out.write( lineEndings );
+        }
+        out.flush();
+        out.close();
+    }
+
+    
+    private void copySetReplacingLineEndings( File archiveBaseDir, File tmpDir, String[] includes, String[] excludes, String lineEnding )
+        throws ArchiverException
+    {
+        DirectoryScanner scanner = new DirectoryScanner();
+        scanner.setBasedir( archiveBaseDir.getAbsolutePath() );
+        scanner.setIncludes( includes );
+        scanner.setExcludes( excludes );
+        scanner.scan();
+        
+        String [] dirs = scanner.getIncludedDirectories();
+        
+        for ( int j = 0; j < dirs.length; j ++)
+        {
+            new File( tempRoot, dirs[j] ).mkdirs();
+        }
+    
+        String [] files = scanner.getIncludedFiles();
+    
+        for ( int j = 0; j < files.length; j ++)
+        {
+            File targetFile = new File( tmpDir, files[j] );
+    
+            try
+            {
+                targetFile.getParentFile().mkdirs();
+
+                copyReplacingLineEndings( new File( archiveBaseDir, files[j] ), targetFile, lineEnding );
+            }
+            catch (IOException e)
+            {
+                throw new ArchiverException("Error copying file '" +
+                    files[j] + "' to '" + targetFile + "'", e);
+            }
+        }
+
+    }	
+
+    
+    private static String getLineEndingCharacters( String lineEnding )
+        throws ArchiverException
+    {
+        if ( lineEnding != null )
+        {
+            if ( lineEnding.equals( "keep" ) )
+            {
+                lineEnding = null;
+            }
+            else if ( lineEnding.equals( "dos" ) || lineEnding.equals( "crlf" ) )
+            {
+                lineEnding = "\r\n";
+            }
+            else if ( lineEnding.equals( "unix" ) || lineEnding.equals( "lf" ) )
+            {
+                lineEnding = "\n";
+            }
+            else
+            {
+                throw new ArchiverException( "Illlegal lineEnding specified: '" +
+                    lineEnding + "'");
+            }
+        }
+        
+        return lineEnding;
+    }
+
+    

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS61 INS21 INS21 INS43 INS42 INS43 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS60 INS24 INS60 INS24 INS42 INS43 INS42 INS42 INS25 INS41 INS66 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS27 INS8 INS42 INS60 INS60 INS25 INS60 INS25 INS32 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS36 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS54 INS42 INS33 INS25 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS45 INS42 INS45 INS42 INS43 INS14 INS43 INS14 INS7 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS8 INS12 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS21 INS42 INS42 MOV14 INS42 INS33 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS21 INS21 INS44 INS8 INS42 INS42 INS45 INS21 INS27 INS8 INS25 INS42 INS32 INS7 INS32 INS36 INS32 INS7 INS42 INS42 INS42 INS42 INS43 INS42 INS2 INS43 INS42 INS2 INS32 INS32 INS43 INS42 INS53 INS7 INS32 INS32 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS32 INS32 INS21 INS53 INS42 INS42 INS45 INS45 INS42 INS27 INS45 INS27 INS42 INS42 INS43 INS42 INS2 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS14 INS32 INS33 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS2 INS45 INS42 INS45 INS42 INS45 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45