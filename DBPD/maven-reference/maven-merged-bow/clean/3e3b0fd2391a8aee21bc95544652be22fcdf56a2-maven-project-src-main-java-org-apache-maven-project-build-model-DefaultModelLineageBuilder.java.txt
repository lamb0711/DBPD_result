Fixing caching of Model files, in case it's brought in via reactor and the current relativePath of a parent is wrong...it can still be found, as required by IT0103.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@497554 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
-                                           ProfileManager profileManager )
+                                           ProfileManager profileManager, Map cachedPomFilesByModelId )
-            Model model = readModel( pomFile );
+            Model model = readModel( pomFile, cachedPomFilesByModelId );
-            pomFile = resolveParentPom( model, currentRemoteRepositories, localRepository, pomFile );
+            pomFile = resolveParentPom( model, currentRemoteRepositories, localRepository, pomFile,
+                                        cachedPomFilesByModelId );
-                                            ProfileManager profileManager )
+                                            ProfileManager profileManager, Map cachedPomFilesByModelId )
-        pomFile = resolveParentPom( model, currentRemoteRepositories, localRepository, pomFile );
+        pomFile = resolveParentPom( model, currentRemoteRepositories, localRepository, pomFile, cachedPomFilesByModelId );
-            model = readModel( pomFile );
+            model = readModel( pomFile, cachedPomFilesByModelId );
-            pomFile = resolveParentPom( model, currentRemoteRepositories, localRepository, pomFile );
+            pomFile = resolveParentPom( model, currentRemoteRepositories, localRepository, pomFile,
+                                        cachedPomFilesByModelId );
-     * Read the Model instance from the given POM file.
+     * Read the Model instance from the given POM file. Skip caching the Model on this call, since
+     * it's meant for diagnostic purposes (to determine a parent match).
+        return readModel( pomFile, null, true );
+    }
+
+    /**
+     * Read the Model instance from the given POM file, and cache it in the given Map before 
+     * returning it.
+     */
+    private Model readModel( File pomFile, Map cachedPomFilesByModelId )
+        throws ProjectBuildingException
+    {
+        return readModel( pomFile, cachedPomFilesByModelId, false );
+    }
+
+    /**
+     * Read the Model instance from the given POM file. Optionally (in normal cases) cache the
+     * Model instance in the given Map before returning it. The skipCache flag controls whether the
+     * Model instance is actually cached.
+     */
+    private Model readModel( File pomFile, Map cachedPomFilesByModelId, boolean skipCache )
+        throws ProjectBuildingException
+    {
+        if ( !skipCache )
+        {
+            cachedPomFilesByModelId.put( createCacheKey( model, pomFile ), pomFile );
+        }
+
-        
+
-        
-        LinkedHashSet profileRepos = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, projectDir, explicitlyActive, explicitlyInactive );
+
+        LinkedHashSet profileRepos = profileAdvisor.getArtifactRepositoriesFromActiveProfiles( model, projectDir,
+                                                                                               explicitlyActive,
+                                                                                               explicitlyInactive );
+     * @param cachedModelsById 
-                                   File modelPomFile )
+                                   File modelPomFile, Map cachedModelsById )
-            pomFile = resolveParentWithRelativePath( modelParent, modelPomFile );
+            String cacheKey = createCacheKey( modelParent );
+            
+            getLogger().debug( "Looking for cached parent POM under: " + cacheKey );
+            
+            pomFile = (File) cachedModelsById.get( cacheKey );
+
+            if ( pomFile == null )
+            {
+                pomFile = resolveParentWithRelativePath( modelParent, modelPomFile );
+            }
+    private String createCacheKey( Parent modelParent )
+    {
+        return modelParent.getGroupId() + ":" + modelParent.getArtifactId() + ":" + modelParent.getVersion();
+    }
+
+    private String createCacheKey( Model model, File pomFile )
+        throws ProjectBuildingException
+    {
+        Parent modelParent = model.getParent();
+
+        String groupId = model.getGroupId();
+
+        if ( groupId == null && modelParent != null )
+        {
+            groupId = modelParent.getGroupId();
+        }
+
+        String artifactId = model.getArtifactId();
+
+        String version = model.getVersion();
+
+        if ( version == null && modelParent != null )
+        {
+            version = modelParent.getVersion();
+        }
+
+        if ( groupId == null || version == null )
+        {
+            throw new ProjectBuildingException( model.getId(),
+                                                "Invalid model. Must either specify groupId and version directly, or specify a parent groupId and version.\nIn POM: "
+                                                    + pomFile );
+        }
+
+        return groupId + ":" + artifactId + ":" + version;
+    }
+
-        
+
-            throw new ProjectBuildingException( "Parent: " + modelParent.getId(), "Cannot find parent: " + parentPomArtifact.getId() + " of: "
-                + pomFile, e );
+            throw new ProjectBuildingException( "Parent: " + modelParent.getId(), "Cannot find parent: "
+                + parentPomArtifact.getId() + " of: " + pomFile, e );
-        
+
-        
+
-        
+

INS26 INS40 INS31 INS31 INS31 INS31 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS44 INS44 INS44 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS43 INS42 INS39 INS42 INS25 INS65 INS43 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS25 INS41 INS42 INS42 INS66 INS66 INS42 INS32 INS66 INS66 INS42 INS42 INS32 UPD66 INS66 INS66 INS42 INS38 INS8 INS42 INS66 INS42 INS42 INS27 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS42 INS42 INS33 INS9 INS42 INS42 INS42 INS9 INS42 INS21 INS60 INS21 INS21 INS25 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS27 INS27 INS53 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS43 INS59 INS32 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS7 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS7 INS42 INS33 INS42 INS33 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS27 INS42 INS11 INS42 INS33 MOV21 INS42 INS32 INS42 INS32 INS43 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42