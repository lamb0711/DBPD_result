disable project-specific loading of extensions and plugins until we can figure out how to do it without causing OOME's.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@589904 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.PlexusContainerException;
-                              ArtifactRepository localRepository,
-                              Map projectSessions )
+                              ArtifactRepository localRepository )
-                      projectSessions,
-                              ArtifactRepository localRepository,
-                              Map projectSessions )
+                              ArtifactRepository localRepository )
-                      projectSessions,
+    private String createExtensionRealmId( Artifact realmArtifact )
+    {
+        return "/extensions/" + ArtifactUtils.versionlessKey( realmArtifact );
+    }
+
-                               Map projectSessions,
-        // create a new MavenProjectSession instance for the current project.
-        // This session instance will house the plugin and extension realms that
-        // pertain to this specific project, along with containing the project-level
-        // realm to use as a lookupRealm in the lifecycle executor and plugin manager.
-        MavenProjectSession projectSession = (MavenProjectSession) projectSessions.get( projectId );
-        if ( projectSession == null )
-        {
-            try
-            {
-                projectSession = new MavenProjectSession( projectId, container );
-            }
-            catch ( PlexusContainerException e )
-            {
-                throw new ExtensionManagerException( "Failed to create project realm for: " + projectId, projectId, e );
-            }
-
-            projectSessions.put( projectId, projectSession );
-        }
-
-             && !projectSession.containsExtensionRealm( extensionArtifact )
+            String realmId = createExtensionRealmId( extensionArtifact );
+            try
+            {
+                container.getClassWorld().getRealm( realmId );
+
+                // if we find the realm, we don't need to proceed, we've already added this extension.
+                return;
+            }
+            catch ( NoSuchRealmException e )
+            {
+                // proceed.
+            }
+
-                extensionRealm = projectSession.createExtensionRealm( extensionArtifact );
+                extensionRealm = container.getContainerRealm().createChildRealm( realmId );
-            importLocalExtensionComponents( extensionRealm, projectSession, extensionArtifact );
+            importLocalExtensionComponents( extensionRealm, projectId, extensionArtifact );
-                                                 MavenProjectSession projectSession,
+                                                 String projectId,
-        String projectId = projectSession.getProjectId();
-
-            ClassRealm projectRealm = projectSession.getProjectRealm();
+            ClassRealm realm = container.getContainerRealm();
-                            getLogger().debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealm.getId() + "\nto project realm: " + projectRealm.getId() );
+                            getLogger().debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealm.getId() + "\nto container realm: " + realm.getId() );
-                            projectRealm.importFrom( extensionRealm.getId(), implementation );
+                            realm.importFrom( extensionRealm.getId(), implementation );
-                            comp.setRealmId( projectRealm.getId() );
+                            comp.setRealmId( realm.getId() );
-                            throw new ExtensionManagerException( "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + projectRealm.getId(), extensionArtifact, projectId, e );
+                            throw new ExtensionManagerException( "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + realm.getId(), extensionArtifact, projectId, e );
-    public void registerWagons( Map projectSessions )
+    public void registerWagons()
-        for ( Iterator it = projectSessions.values().iterator(); it.hasNext(); )
-        {
-            MavenProjectSession projectSession = (MavenProjectSession) it.next();
-
-            ClassRealm oldRealm = container.setLookupRealm( projectSession.getProjectRealm() );
-
-            wagonManager.findAndRegisterWagons( container );
-
-            container.setLookupRealm( oldRealm );
-        }
+        wagonManager.findAndRegisterWagons( container );

MOV31 INS31 UPD83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS8 UPD42 MOV42 INS43 INS42 INS41 UPD43 UPD42 MOV21 UPD42 MOV42 INS27 UPD42 INS45 INS32 INS60 INS54 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS8 INS12 INS42 INS32 INS21 INS41 INS44 INS8 UPD42 UPD42 INS42 INS42 INS32 INS43 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 UPD45 UPD42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60