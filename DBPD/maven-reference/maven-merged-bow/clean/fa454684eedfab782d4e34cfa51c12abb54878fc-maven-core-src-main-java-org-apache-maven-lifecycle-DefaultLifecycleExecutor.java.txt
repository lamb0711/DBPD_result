o Fixed handling of parameter alias in combination with default value

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@816755 13f79535-47bb-0310-9956-ffa450edef68

-        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-
-        if ( plugin != null && StringUtils.isNotEmpty( mojoExecution.getExecutionId() ) )
+        if ( plugin != null )
-            for ( PluginExecution e : plugin.getExecutions() )
+            PluginExecution pluginExecution =
+                findPluginExecution( mojoExecution.getExecutionId(), plugin.getExecutions() );
+
+            Xpp3Dom pomConfiguration = null;
+
+            if ( pluginExecution != null )
-                if ( mojoExecution.getExecutionId().equals( e.getId() ) )
-                {
-                    Xpp3Dom executionConfiguration = (Xpp3Dom) e.getConfiguration();
-
-                    Xpp3Dom mojoConfiguration =
-                        ( executionConfiguration != null ) ? new Xpp3Dom( executionConfiguration ) : null;
-
-                    mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoExecution.getConfiguration(), mojoConfiguration );
-
-                    mojoExecution.setConfiguration( mojoConfiguration );
-
-                    return;
-                }
+                pomConfiguration = (Xpp3Dom) pluginExecution.getConfiguration();
-        }
-
-        if ( allowPluginLevelConfig )
-        {
-            Xpp3Dom defaultConfiguration = getMojoConfiguration( mojoDescriptor );
-
-            Xpp3Dom mojoConfiguration = defaultConfiguration;
-
-            if ( plugin != null && plugin.getConfiguration() != null )
+            else if ( allowPluginLevelConfig )
-                Xpp3Dom pluginConfiguration = (Xpp3Dom) plugin.getConfiguration();
-                pluginConfiguration = new Xpp3Dom( pluginConfiguration );
-                mojoConfiguration = Xpp3Dom.mergeXpp3Dom( pluginConfiguration, defaultConfiguration, Boolean.TRUE );
+                pomConfiguration = (Xpp3Dom) plugin.getConfiguration();
+            Xpp3Dom mojoConfiguration = ( pomConfiguration != null ) ? new Xpp3Dom( pomConfiguration ) : null;
+
-        Xpp3Dom mojoConfiguration = mojoExecution.getConfiguration();
+        Xpp3Dom executionConfiguration = mojoExecution.getConfiguration();
+        if ( executionConfiguration == null )
+        {
+            executionConfiguration = new Xpp3Dom( "configuration" );
+        }
-        mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoConfiguration, defaultConfiguration, Boolean.TRUE );
+        Xpp3Dom finalConfiguration = new Xpp3Dom( "configuration" );
-        mojoConfiguration = extractMojoConfiguration( mojoConfiguration, mojoDescriptor );
-
-        mojoExecution.setConfiguration( mojoConfiguration );
-    }
-
-    /**
-     * Extracts the configuration for a single mojo from the specified execution configuration by discarding any
-     * non-applicable parameters. This is necessary because a plugin execution can have multiple goals with different
-     * parametes whose default configurations are all aggregated into the execution configuration. However, the
-     * underlying configurator will error out when trying to configure a mojo parameter that is specified in the
-     * configuration but not present in the mojo instance.
-     * 
-     * @param executionConfiguration The configuration from the plugin execution, may be {@code null}.
-     * @param mojoDescriptor The descriptor for the mojo being configured, must not be {@code null}.
-     * @return The configuration for the mojo, never {@code null}.
-     */
-    private Xpp3Dom extractMojoConfiguration( Xpp3Dom executionConfiguration, MojoDescriptor mojoDescriptor )
-    {
-        Xpp3Dom mojoConfiguration = null;
-
-        if ( executionConfiguration != null )
+        if ( mojoDescriptor.getParameters() != null )
-            mojoConfiguration = new Xpp3Dom( executionConfiguration.getName() );
-
-            if ( mojoDescriptor.getParameters() != null )
+            for ( Parameter parameter : mojoDescriptor.getParameters() )
-                for ( Parameter parameter : mojoDescriptor.getParameters() )
+                Xpp3Dom parameterConfiguration = executionConfiguration.getChild( parameter.getName() );
+
+                if ( parameterConfiguration == null )
-                    Xpp3Dom parameterConfiguration = executionConfiguration.getChild( parameter.getName() );
+                    parameterConfiguration = executionConfiguration.getChild( parameter.getAlias() );
+                }
-                    if ( parameterConfiguration == null )
+                Xpp3Dom parameterDefaults = defaultConfiguration.getChild( parameter.getName() );
+
+                parameterConfiguration = Xpp3Dom.mergeXpp3Dom( parameterConfiguration, parameterDefaults, Boolean.TRUE );
+
+                if ( parameterConfiguration != null )
+                {
+                    parameterConfiguration = new Xpp3Dom( parameterConfiguration, parameter.getName() );
+
+                    if ( StringUtils.isEmpty( parameterConfiguration.getAttribute( "implementation" ) )
+                        && StringUtils.isNotEmpty( parameter.getImplementation() ) )
-                        parameterConfiguration = executionConfiguration.getChild( parameter.getAlias() );
+                        parameterConfiguration.setAttribute( "implementation", parameter.getImplementation() );
-                    if ( parameterConfiguration != null )
-                    {
-                        parameterConfiguration = new Xpp3Dom( parameterConfiguration, parameter.getName() );
-
-                        if ( StringUtils.isNotEmpty( parameter.getImplementation() ) )
-                        {
-                            parameterConfiguration.setAttribute( "implementation", parameter.getImplementation() );
-                        }
-
-                        mojoConfiguration.addChild( parameterConfiguration );
-                    }
+                    finalConfiguration.addChild( parameterConfiguration );
-        return mojoConfiguration;
+        mojoExecution.setConfiguration( finalConfiguration );
-   
+
+    private PluginExecution findPluginExecution( String executionId, Collection<PluginExecution> executions )
+    {
+        if ( StringUtils.isNotEmpty( executionId ) )
+        {
+            for ( PluginExecution execution : executions )
+            {
+                if ( executionId.equals( execution.getId() ) )
+                {
+                    return execution;
+                }
+            }
+        }
+
+        return null;
+    }
+

MOV31 MOV29 INS39 INS42 MOV44 MOV8 INS43 INS42 INS44 INS44 INS8 INS25 MOV60 MOV60 INS25 MOV60 INS60 INS21 INS42 INS43 INS42 INS74 INS42 INS25 INS41 MOV27 INS8 INS27 INS8 MOV43 INS59 INS32 INS42 INS43 INS43 INS32 INS8 INS33 MOV60 MOV60 INS25 INS60 MOV21 MOV21 UPD42 INS42 INS33 MOV21 INS42 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS70 MOV43 MOV43 INS27 INS8 INS25 MOV43 INS59 MOV43 INS45 INS44 INS42 INS8 INS42 MOV32 INS42 INS33 UPD42 MOV42 MOV33 MOV21 MOV42 INS8 MOV42 INS16 UPD42 INS60 INS21 INS43 INS42 INS25 INS42 MOV32 INS21 INS36 INS14 INS33 INS45 MOV43 INS59 INS7 INS42 INS32 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 INS11 INS7 INS27 MOV43 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS32 INS41 MOV43 INS32 INS42 MOV11 UPD42 MOV42 MOV33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS27 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS32 MOV32 UPD42 INS42 INS42 INS32 INS42 INS42 INS45 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL27 DEL36 DEL42 DEL14 DEL33 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL42 DEL42 DEL43 DEL32 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL41 DEL8 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL32 DEL21 DEL8