Resolving: MNG-698, MNG-1081

Describe mojo is finished. Just need to finish documenting the projecthelp plugin.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@315022 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.descriptor.Parameter;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+import org.codehaus.plexus.component.repository.ComponentRequirement;
+ * Describes the attributes of a plugin and/or plugin mojo.
+ * 
+ * @requiresProject false
-     * @parameter expression="${plugin}"
+     * The plugin/mojo to describe. This must be specified in one of three ways:
+     * 
+     * 1. plugin-prefix
+     * 2. groupId:artifactId
+     * 3. groupId:artifactId:version
+     * 
+     * @parameter expression="${plugin}" alias="prefix"
-     * @parameter
+     * The plugin groupId to describe.
+     * <br/>
+     * (Used with artifactId specification).
+     * 
+     * @parameter expression="${groupId}"
-     * @parameter
+     * The plugin artifactId to describe. 
+     * <br/>
+     * (Used with groupId specification).
+     * 
+     * @parameter expression="${artifactId}"
-     * @parameter
+     * The plugin version to describe. 
+     * <br/>
+     * (Used with groupId/artifactId specification).
+     * 
+     * @parameter expression="${version}"
-     * @parameter
+     * The goal name of a mojo to describe within the specified plugin.
+     * <br/>
+     * If this parameter is specified, only the corresponding mojo will
+     * <br/>
+     * be described, rather than the whole plugin.  
+     * 
+     * @parameter expression="${mojo}"
+     * The plugin manager instance used to resolve plugin descriptors.
+     * 
+     * The project builder instance used to retrieve the super-project instance
+     * <br/>
+     * in the event there is no current MavenProject instance. Some MavenProject
+     * <br/>
+     * instance has to be present to use in the plugin manager APIs.
+     * 
+     * @component role="org.apache.maven.project.MavenProjectBuilder"
+     */
+    private MavenProjectBuilder projectBuilder;
+
+    /**
+     * The current project, if there is one. This is listed as optional, since
+     * <br/>
+     * the projecthelp plugin should be able to function on its own. If this
+     * <br/>
+     * parameter is empty at execution time, this mojo will instead use the
+     * <br/>
+     * super-project.
+     * 
-     * @required
+     * The current user system settings for use in Maven. This is used for 
+     * <br/>
+     * plugin manager API calls.
+     * 
+     * The current build session instance. This is used for 
+     * <br/>
+     * plugin manager API calls.
+     * 
+     * The local repository ArtifactRepository instance. This is used
+     * <br/>
+     * for plugin manager API calls.
+     * 
-     * @parameter
+     * If specified, this parameter will cause the plugin/mojo descriptions
+     * <br/>
+     * to be written to the path specified, instead of writing to the console.
+     * 
+     * @parameter expression="${output}"
+    
+    /**
+     * This flag specifies that full (verbose) information should be
+     * <br/>
+     * given. Use true/false.
+     * 
+     * @parameter expression="${full}" default-value="false"
+     */
+    private boolean full;
+        if ( project == null )
+        {
+            try
+            {
+                project = projectBuilder.buildStandaloneSuperProject( localRepository );
+            }
+            catch ( ProjectBuildingException e )
+            {
+                throw new MojoExecutionException( "Error while retrieving the super-project.", e );
+            }
+        }
+        
+            
+            getLog().info( "Wrote descriptions to: " + output );
-        buffer.append( "Plugin: \'" ).append( pd.getName() ).append( '\'' );
+        String name = pd.getName();
+        if ( name == null )
+        {
+            name = pd.getId();
+        }
+        
+        buffer.append( "Plugin: \'" ).append( name ).append( '\'' );
-        buffer.append( "\nDescription:\n\n" ).append( pd.getDescription() ).append( "\n" );
-        buffer.append( "\nMojos:\n" );
-
-        for ( Iterator it = pd.getMojos().iterator(); it.hasNext(); )
+        
+        buffer.append( "\nDescription:\n\n" );
+        prettyAppend( formatDescription( pd.getDescription() ), buffer );
+        buffer.append( "\n" );
+        
+        if ( full )
-            MojoDescriptor md = (MojoDescriptor) it.next();
+            buffer.append( "\nMojos:\n" );
-            buffer.append( "\nGoal: \'" ).append( md.getGoal() ).append( '\'' );
-            buffer.append( "\n========================================" );
+            String line = "\n===============================================";
-            describeMojoGuts( md, buffer );
-            
-            buffer.append( "\n\n" );
+            for ( Iterator it = pd.getMojos().iterator(); it.hasNext(); )
+            {
+                MojoDescriptor md = (MojoDescriptor) it.next();
+
+                buffer.append( line );
+                buffer.append( "\nGoal: \'" ).append( md.getGoal() ).append( '\'' );
+                buffer.append( line );
+                
+                describeMojoGuts( md, buffer, true );
+                
+                buffer.append( line );
+                buffer.append( "\n\n" );
+            }
+        }
+    }
+
+    private String formatDescription( String description )
+    {
+        if ( description == null )
+        {
+            return null;
+        }
+        
+        String result = description.replaceAll( " ?\\<br\\/?\\> ?", "\n" );
+        
+        result = result.replaceAll(" ?\\<p\\> ?", "" );
+        result = result.replaceAll(" ?\\</p\\> ?", "\n\n" );
+        
+        return result;
+    }
+
+    private void prettyAppend( String messagePart, StringBuffer buffer )
+    {
+        if ( messagePart != null && messagePart.length() > 0 )
+        {
+            buffer.append( messagePart );
+        }
+        else
+        {
+            buffer.append( "Unknown" );
+        String line = "\n===============================================";
+        
-        buffer.append( "\n-----------------------------------------------" );
+        buffer.append( line );
-        describeMojoGuts( md, buffer );
+        describeMojoGuts( md, buffer, full );
+        buffer.append( line );
-    private void describeMojoGuts( MojoDescriptor md, StringBuffer buffer )
+    private void describeMojoGuts( MojoDescriptor md, StringBuffer buffer, boolean fullDescription )
-        buffer.append( "\nDescription:\n\n" ).append( md.getDescription() ).append( "\n" );
+        buffer.append( "\nDescription:\n\n" );
+        prettyAppend( formatDescription( md.getDescription() ), buffer );
+        buffer.append( "\n" );
-        buffer.append( "\nImplementation: " ).append( md.getImplementation() );
-        buffer.append( "\nLanguage: " ).append( md.getLanguage() );
-        
-        String phase = md.getPhase();
-        if ( phase != null )
+        if ( fullDescription )
-            buffer.append( "\nBound to Phase: " ).append( phase );
-        }
-        
-        String eGoal = md.getExecuteGoal();
-        String eLife = md.getExecuteLifecycle();
-        String ePhase = md.getExecutePhase();
-        
-        if ( eGoal != null || ePhase != null )
-        {
-            buffer.append( "\n\nBefore this mojo executes, it will call:\n" );
-            
-            if ( eGoal != null )
+            buffer.append( "\nImplementation: " ).append( md.getImplementation() );
+            buffer.append( "\nLanguage: " ).append( md.getLanguage() );
+
+            String phase = md.getPhase();
+            if ( phase != null )
-                buffer.append( "\nSingle mojo: \'" ).append( eGoal ).append( "\'" );
+                buffer.append( "\nBound to Phase: " ).append( phase );
-            
-            if ( ePhase != null )
+
+            String eGoal = md.getExecuteGoal();
+            String eLife = md.getExecuteLifecycle();
+            String ePhase = md.getExecutePhase();
+
+            if ( eGoal != null || ePhase != null )
-                buffer.append( "\nPhase: \'" ).append( ePhase ).append( "\'" );
-                
-                if ( eLife != null )
+                buffer.append( "\n\nBefore this mojo executes, it will call:\n" );
+
+                if ( eGoal != null )
-                    buffer.append( " in Lifecycle Overlay: \'" ).append( eLife ).append( "\'" );
+                    buffer.append( "\nSingle mojo: \'" ).append( eGoal ).append( "\'" );
+                }
+
+                if ( ePhase != null )
+                {
+                    buffer.append( "\nPhase: \'" ).append( ePhase ).append( "\'" );
+
+                    if ( eLife != null )
+                    {
+                        buffer.append( " in Lifecycle Overlay: \'" ).append( eLife ).append( "\'" );
+                    }
+
+            describeMojoParameters( md, buffer );
+
+            describeMojoRequirements( md, buffer );
+    }
+
+    private void describeMojoRequirements( MojoDescriptor md, StringBuffer buffer )
+    {
+        buffer.append( "\n" );
-        List parameters = md.getParameters();
+        List reqs = md.getRequirements();
-        List requirements = md.getRequirements();
+        if ( reqs == null || reqs.isEmpty() )
+        {
+            buffer.append( "\nThis mojo doesn't have any component requirements." );
+        }
+        else
+        {
+            buffer.append( "\nComponent Requirements:\n" );
+            
+            String line = "\n-----------------------------------------------";
+            
+            int idx = 0;
+            for ( Iterator it = reqs.iterator(); it.hasNext(); )
+            {
+                ComponentRequirement req = (ComponentRequirement) it.next();
+                
+                buffer.append( line );
+                
+                buffer.append( "\n[" ).append( idx++ ).append( "] " );
+                buffer.append( "Role: " ).append( req.getRole() );
+                
+                String hint = req.getRoleHint();
+                if ( hint != null )
+                {
+                    buffer.append( "\nRole-Hint: " ).append( hint );
+                }
+                
+                buffer.append( "\n" );
+            }
+            
+            buffer.append( line );
+        }
+    }
+
+    private void describeMojoParameters( MojoDescriptor md, StringBuffer buffer )
+    {
+        buffer.append( "\n" );
+        
+        List params = md.getParameters();
+        
+        if ( params == null || params.isEmpty() )
+        {
+            buffer.append( "\nThis mojo doesn't use any parameters." );
+        }
+        else
+        {
+            buffer.append( "\nParameters:" );
+            
+            String line = "\n-----------------------------------------------";
+            
+            int idx = 0;
+            for ( Iterator it = params.iterator(); it.hasNext(); )
+            {
+                Parameter parameter = (Parameter) it.next();
+                
+                buffer.append( line );
+                buffer.append( "\n\n[" ).append( idx++ ).append( "] " );
+                buffer.append( "Name: " );
+                prettyAppend( parameter.getName(), buffer );
+                
+                String alias = parameter.getAlias();
+                if ( alias != null )
+                {
+                    buffer.append( " (Alias: " ).append( alias ).append( ")" );
+                }
+                
+                buffer.append( "\nType: " );
+                prettyAppend( parameter.getType(), buffer );
+                
+                String expression = parameter.getExpression();
+                if ( expression != null )
+                {
+                    buffer.append( "\nExpression: " ).append( expression );
+                }
+                
+                String defaultVal = parameter.getDefaultValue();
+                if ( defaultVal != null )
+                {
+                    buffer.append( "\nDefault value: \'" ).append( defaultVal );
+                }
+                
+                buffer.append( "\nRequired: " ).append( parameter.isRequired() );
+                buffer.append( "\nDirectly editable: " ).append( parameter.isEditable() );
+                
+                buffer.append( "\nDescription:\n\n" );
+                prettyAppend( formatDescription( parameter.getDescription() ), buffer );
+                
+                String deprecation = parameter.getDeprecated();
+                
+                if ( deprecation != null )
+                {
+                    buffer.append( "\n\nNOTE: This parameter is deprecated.\n" ).append( deprecation ).append( "\n" );
+                }
+                
+                buffer.append( "\n" );
+            }
+            
+            buffer.append( line );
+        }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS65 INS65 INS29 INS83 INS43 INS59 MOV65 INS29 INS83 INS39 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 UPD65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS25 INS60 INS25 INS21 INS21 INS25 INS42 INS43 INS42 INS25 INS60 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS25 INS60 INS21 INS39 INS42 INS21 INS21 INS25 INS43 INS42 INS43 INS42 INS21 MOV60 INS25 INS43 INS42 INS43 INS42 INS21 MOV60 INS25 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS27 INS8 INS43 INS59 INS27 INS8 MOV32 MOV32 INS32 INS42 INS8 INS42 INS27 INS8 INS43 INS59 INS7 INS7 INS42 INS42 INS42 INS27 INS8 INS8 INS43 INS59 INS32 MOV32 MOV32 INS32 INS42 INS8 INS42 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS32 INS27 INS8 INS8 INS42 INS33 INS54 INS21 INS42 INS42 MOV32 INS42 INS33 INS21 INS42 UPD42 INS42 INS42 INS42 INS45 MOV21 INS60 MOV24 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS27 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS45 MOV21 MOV21 MOV60 MOV25 MOV60 MOV60 MOV60 MOV25 INS21 INS21 INS42 INS42 INS45 UPD42 INS27 INS32 INS21 INS21 INS60 INS60 INS24 INS21 INS42 INS42 INS45 UPD42 INS27 INS32 INS21 INS21 INS60 INS60 INS24 INS21 INS8 INS12 INS32 INS7 INS42 UPD42 INS43 INS59 MOV21 INS33 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS33 INS32 INS34 INS32 INS32 UPD42 MOV42 INS32 INS32 INS42 INS33 INS42 INS42 INS32 INS32 INS43 INS59 INS39 INS59 INS58 INS32 INS8 INS32 INS42 INS33 INS42 INS42 INS32 INS32 INS43 INS59 INS39 INS59 INS58 INS32 INS8 INS32 INS21 INS44 INS8 INS32 INS42 INS27 INS42 INS32 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS43 INS59 INS42 INS42 INS60 INS21 INS21 INS21 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS43 INS59 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS60 INS25 INS21 INS21 INS60 INS25 INS60 INS25 INS21 INS21 INS21 INS21 INS60 INS25 INS21 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS32 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS45 INS42 INS43 INS32 INS32 INS42 INS37 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS32 INS42 INS37 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 DEL45 DEL45 DEL45 DEL42 DEL45