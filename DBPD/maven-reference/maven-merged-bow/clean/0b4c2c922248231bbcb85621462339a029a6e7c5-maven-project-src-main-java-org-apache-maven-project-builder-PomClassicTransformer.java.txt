PomClassicTransformer now inheriting from PomTransformer. Removed some of the duplicate methods.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@720281 13f79535-47bb-0310-9956-ffa450edef68

-    implements ModelTransformer
+    extends PomTransformer
-    private final DomainModelFactory factory;
-
-        this.factory = factory;
+        super(factory);
-     * @see ModelTransformer#transformToDomainModel(java.util.List, java.util.List)
-     */
-    public DomainModel transformToDomainModel( List<ModelProperty> properties, List<ModelEventListener> eventListeners)
-        throws IOException
-    {
-        if ( properties == null )
-        {
-            throw new IllegalArgumentException( "properties: null" );
-        }
-
-        if( eventListeners == null )
-        {
-            eventListeners = new ArrayList<ModelEventListener>();
-        }
-        else
-        {
-            eventListeners = new ArrayList<ModelEventListener>(eventListeners);
-        }
-
-        List<ModelProperty> props = new ArrayList<ModelProperty>( properties );
-
-        //dependency management
-        ModelDataSource source = new DefaultModelDataSource();
-        source.init( props, Arrays.asList( new ArtifactModelContainerFactory(), new IdModelContainerFactory() ) );
-
-        for ( ModelContainer dependencyContainer : source.queryFor( ProjectUri.Dependencies.Dependency.xUri ) )
-        {
-            for ( ModelContainer managementContainer : source.queryFor(
-                ProjectUri.DependencyManagement.Dependencies.Dependency.xUri ) )
-            {
-                managementContainer = new ArtifactModelContainerFactory().create(
-                    transformDependencyManagement( managementContainer.getProperties() ) );
-                ModelContainerAction action = dependencyContainer.containerAction( managementContainer );
-                if ( action.equals( ModelContainerAction.JOIN ) || action.equals( ModelContainerAction.DELETE ) )
-                {
-                    source.join( dependencyContainer, managementContainer );
-                }
-            }
-        }
-
-        for ( ModelContainer dependencyContainer : source.queryFor( ProjectUri.Build.Plugins.Plugin.xUri ) )
-        {
-            for ( ModelContainer managementContainer : source.queryFor(
-                ProjectUri.Build.PluginManagement.Plugins.Plugin.xUri ) )
-            {
-                managementContainer = new ArtifactModelContainerFactory().create(
-                    transformPluginManagement( managementContainer.getProperties() ) );
-
-                //Remove duplicate executions tags
-                boolean hasExecutionsTag = false;
-                for ( ModelProperty mp : dependencyContainer.getProperties() )
-                {
-                    if ( mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.Executions.xUri ) )
-                    {
-                        hasExecutionsTag = true;
-                        break;
-                    }
-                }
-                List<ModelProperty> pList = new ArrayList<ModelProperty>();
-                if ( !hasExecutionsTag )
-                {
-                    pList = managementContainer.getProperties();
-                }
-                else
-                {
-                    for ( ModelProperty mp : managementContainer.getProperties() )
-                    {
-                        if ( !mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.Executions.xUri ) )
-                        {
-                            pList.add( mp );
-                        }
-                    }
-                }
-                managementContainer = new ArtifactModelContainerFactory().create( pList );
-
-                ModelContainerAction action = dependencyContainer.containerAction( managementContainer );
-                if ( action.equals( ModelContainerAction.JOIN ) || action.equals( ModelContainerAction.DELETE ) )
-                {
-                   // ModelContainer reverseSortedContainer = new ArtifactModelContainerFactory().create(
-                   //     ModelTransformerContext.sort(dependencyContainer.getProperties(), ProjectUri.Build.Plugins.Plugin.xUri) );
-                    source.join( dependencyContainer, managementContainer );
-                }
-            }
-        }
-
-        props = source.getModelProperties();
-
-        //Rule: Do not join plugin executions without ids
-        Set<ModelProperty> removeProperties = new HashSet<ModelProperty>();
-        ModelDataSource dataSource = new DefaultModelDataSource();
-        dataSource.init( props, Arrays.asList( new ArtifactModelContainerFactory(), new IdModelContainerFactory() ) );
-        List<ModelContainer> containers = dataSource.queryFor( ProjectUri.Build.Plugins.Plugin.xUri );
-        for ( ModelContainer pluginContainer : containers )
-        {
-            ModelDataSource executionSource = new DefaultModelDataSource();
-            executionSource.init( pluginContainer.getProperties(),
-                                  Arrays.asList( new ArtifactModelContainerFactory(), new PluginExecutionIdModelContainerFactory() ) );
-            List<ModelContainer> executionContainers =
-                executionSource.queryFor( ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri );
-            if ( executionContainers.size() < 2 )
-            {
-                continue;
-            }
-
-            boolean hasAtLeastOneWithoutId = true;
-            for ( ModelContainer executionContainer : executionContainers )
-            {
-                if ( hasAtLeastOneWithoutId )
-                {
-                    hasAtLeastOneWithoutId = hasExecutionId( executionContainer );
-                }
-                if ( !hasAtLeastOneWithoutId && !hasExecutionId( executionContainer ) &&
-                    executionContainers.indexOf( executionContainer ) > 0 )
-                {
-                    removeProperties.addAll( executionContainer.getProperties() );
-                }
-            }
-        }
-        props.removeAll( removeProperties );
-
-        for(ModelEventListener listener : eventListeners)
-        {
-            ModelDataSource ds = new DefaultModelDataSource();
-            ds.init( props, listener.getModelContainerFactories() );
-            for(String uri : listener.getUris() )
-            {
-                listener.fire(ds.queryFor(uri));
-            }
-        }
-
-        return factory.createDomainModel( props );
-    }
-
-    /**
-    private static boolean hasExecutionId( ModelContainer executionContainer )
-    {
-        for ( ModelProperty mp : executionContainer.getProperties() )
-        {
-            if ( mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.Executions.Execution.id ) )
-            {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    private static List<ModelProperty> transformDependencyManagement( List<ModelProperty> modelProperties )
-    {
-        List<ModelProperty> transformedProperties = new ArrayList<ModelProperty>();
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().startsWith( ProjectUri.DependencyManagement.xUri ) )
-            {
-                transformedProperties.add( new ModelProperty(
-                    mp.getUri().replace( ProjectUri.DependencyManagement.xUri, ProjectUri.xUri ), mp.getResolvedValue() ) );
-            }
-        }
-        return transformedProperties;
-    }
-
-    private static List<ModelProperty> transformPluginManagement( List<ModelProperty> modelProperties )
-    {
-        List<ModelProperty> transformedProperties = new ArrayList<ModelProperty>();
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().startsWith( ProjectUri.Build.PluginManagement.xUri ) )
-            {
-                transformedProperties.add( new ModelProperty(
-                    mp.getUri().replace( ProjectUri.Build.PluginManagement.xUri, ProjectUri.Build.xUri ),
-                    mp.getResolvedValue() ) );
-            }
-        }
-        return transformedProperties;
-    }
-

UPD43 UPD42 INS46 INS42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL40 DEL43 DEL69 DEL40 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL7 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL18 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL38 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31