Adding a couple unit tests for the project-level session, and fixing potential NPE when an extension is declared that already exists in the core distribution.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@588136 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
-import java.util.Collections;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
-        // if the extension is null, or if it's already been added to the current project-session, skip it.
-        if ( ( extensionArtifact != null ) && !projectSession.containsExtensionRealm( extensionArtifact ) )
+        ArtifactFilter coreFilter = artifactFilterManager.getArtifactFilter();
+
+        // if the extension is null,
+        // if it's already been added to the current project-session,
+        // or if it's excluded by the core filter,
+        //
+        // skip it.
+        if ( ( extensionArtifact != null )
+             && !projectSession.containsExtensionRealm( extensionArtifact )
+             && coreFilter.include( extensionArtifact ) )
-                new ProjectArtifactExceptionFilter( artifactFilterManager.getArtifactFilter(), projectArtifact );
+                new ProjectArtifactExceptionFilter( coreFilter, projectArtifact );
-            Set dependencies = new HashSet( resolutionGroup.getArtifacts() );
+            Set dependencies = new LinkedHashSet();
+            dependencies.addAll( resolutionGroup.getArtifacts() );
+
+            ArtifactResolutionRequest dependencyReq = new ArtifactResolutionRequest().setArtifact( projectArtifact )
+                                                                           .setArtifactDependencies( dependencies )
+                                                                           .setFilter( filter )
+                                                                           .setLocalRepository( localRepository )
+                                                                           .setRemoteRepostories( remoteRepositories )
+                                                                           .setMetadataSource( artifactMetadataSource );
-            ArtifactResolutionResult result;
-            try
+            ArtifactResolutionResult result = artifactResolver.resolve( dependencyReq );
+
+            if ( result.hasCircularDependencyExceptions() || result.hasErrorArtifactExceptions()
+                 || result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() )
-                result = artifactResolver.resolveTransitively( dependencies, projectArtifact,
-                                                      Collections.EMPTY_MAP, localRepository, remoteRepositories,
-                                                      artifactMetadataSource, filter );
+                throw new ExtensionManagerException( "Failed to resolve extension: " + extensionArtifact, extensionArtifact, projectId, result );
-            catch ( ArtifactResolutionException e )
+
+            Set resultArtifacts = result.getArtifacts();
+
+            if ( !extensionArtifact.isResolved() || ( extensionArtifact.getFile() == null ) )
-                throw new ExtensionManagerException( "Unable to resolve one or more extension artifacts for: " + extensionArtifact.getId(), extensionArtifact, projectId, e );
-            }
-            catch ( ArtifactNotFoundException e )
-            {
-                throw new ExtensionManagerException( "One or more extension artifacts is missing for: " + extensionArtifact.getId(), extensionArtifact, projectId, e );
+                throw new ExtensionManagerException( "Extension artifact was not resolved, or has no file associated with it.", extensionArtifact, projectId );
-            for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )
+            for ( Iterator i = resultArtifacts.iterator(); i.hasNext(); )

MOV26 UPD40 UPD40 MOV60 UPD42 MOV32 INS32 INS60 INS21 INS60 INS25 INS60 INS25 INS42 INS42 INS42 INS43 INS59 INS32 INS43 MOV43 INS59 INS27 INS8 INS43 MOV59 INS27 INS8 INS42 INS42 INS14 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS32 MOV53 UPD42 MOV42 UPD42 MOV32 INS38 INS36 INS53 INS59 MOV43 INS42 INS42 UPD43 INS32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS27 INS14 INS42 INS32 UPD42 INS32 INS42 INS42 MOV43 UPD42 INS42 INS42 MOV32 INS33 MOV43 INS45 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 UPD45 INS42 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS43 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL43 DEL42 DEL44 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54