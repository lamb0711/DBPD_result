Support for build extensions. Updated maven-mercury to use latest project builder code. Dumped all references to model-builder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@765684 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Collection;
-import org.apache.maven.project.builder.ProjectUri;
-import org.apache.maven.project.builder.factories.ArtifactModelContainerFactory;
-import org.apache.maven.project.builder.factories.ExclusionModelContainerFactory;
-import org.apache.maven.project.builder.legacy.PomClassicDomainModel;
-import org.apache.maven.project.builder.legacy.PomTransformer;
-import org.apache.maven.project.builder.profile.ProfileContext;
-import org.apache.maven.shared.model.DataSourceException;
-import org.apache.maven.shared.model.InterpolatorProperty;
-import org.apache.maven.shared.model.ModelContainer;
-import org.apache.maven.shared.model.ModelDataSource;
-import org.apache.maven.shared.model.ModelMarshaller;
-import org.apache.maven.shared.model.ModelProperty;
-import org.apache.maven.shared.model.impl.DefaultModelDataSource;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.Exclusion;
+import org.apache.maven.model.Parent;
+import org.apache.maven.project.builder.PomClassicDomainModel;
-/**
- * Provides a wrapper for the maven model.
- */
-    /**
-     * Bytes containing the underlying model
-     */
-    private final List<ModelProperty> modelProperties;
-
-    /**
-     * History of joins and deletes of model properties
-     */
-    private String eventHistory;
-
-        this( new ByteArrayInputStream( bytes ) );
+        super( new ByteArrayInputStream( bytes ) );
-    /**
-     * Constructor
-     *
-     * @throws IOException if there is a problem constructing the model
-     */
-    public MavenDomainModel( InputStream inputStream )
-        throws IOException
-    {
-        this( ModelMarshaller.marshallXmlToModelProperties( inputStream, ProjectUri.baseUri, PomTransformer.URIS ) );
-    }
-
-    /**
-     * Constructor
-     *
-     * @throws IOException if there is a problem constructing the model
-     */
-    public MavenDomainModel( List<ModelProperty> modelProperties )
-        throws IOException
-    {
-        super(modelProperties);
-        this.modelProperties = new ArrayList<ModelProperty>( modelProperties );
-    }
-    	this(model.getInputStream());
+    	super(model.getModel());
-        // TODO: Expensive call if no parent
-        throws DataSourceException
-        ModelDataSource source = new DefaultModelDataSource( modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
-        for ( ModelContainer modelContainer : source.queryFor( ProjectUri.Dependencies.Dependency.xUri ) )
+        for(Dependency d: model.getDependencies())
-            metadatas.add( transformContainerToMetadata( modelContainer ) );
+        	ArtifactMetadata metadata = new ArtifactMetadata();
+        	metadata.setArtifactId(d.getArtifactId());
+        	metadata.setClassifier(d.getClassifier());
+        	metadata.setGroupId(d.getGroupId());
+        	metadata.setScope( (d.getScope() == null) ? "runtime" : d.getScope());
+        	metadata.setVersion(d.getVersion());
+        	metadata.setOptional(d.isOptional());
+        	
+        	 if( "test-jar".equals( d.getType() ) )
+             {
+                 metadata.setType( "jar" );
+                 metadata.setClassifier( "tests" );
+             }
+             else
+             {
+            	 metadata.setType( d.getType() );	 
+             }
+                      	 
+            List<ArtifactMetadata> exclusions = new ArrayList<ArtifactMetadata>();
+            for( Exclusion e : d.getExclusions() ) 
+            {
+            	ArtifactMetadata md = new ArtifactMetadata();
+            	md.setArtifactId(e.getArtifactId());
+            	md.setGroupId(e.getGroupId());
+            	exclusions.add(md);
+            }
+            metadata.setExclusions(exclusions);
+            metadatas.add(metadata);
-
+        
-    public Collection<ModelContainer> getActiveProfileContainers( List<InterpolatorProperty> properties )
-        throws DataSourceException
-    {
-        ModelDataSource dataSource = new DefaultModelDataSource( modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
-
-        return new ProfileContext( dataSource, null, null, properties ).getActiveProfiles();
-    }
-
-        if ( parentMetadata != null )
+        if(parentMetadata == null)
-            return copyArtifactBasicMetadata( parentMetadata );
+            Parent parent = model.getParent();
+            if(parent != null)
+            {
+                parentMetadata = new ArtifactMetadata();
+                parentMetadata.setArtifactId( parent.getArtifactId() );
+                parentMetadata.setVersion( parent.getVersion() );
+                parentMetadata.setGroupId( parent.getGroupId() );        	
+            }       	
-
-        String groupId = null, artifactId = null, version = null;
-
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().equals( ProjectUri.Parent.version ) )
-            {
-                version = mp.getResolvedValue();
-            }
-            else if ( mp.getUri().equals( ProjectUri.Parent.artifactId ) )
-            {
-                artifactId = mp.getResolvedValue();
-            }
-            else if ( mp.getUri().equals( ProjectUri.Parent.groupId ) )
-            {
-                groupId = mp.getResolvedValue();
-            }
-            if ( groupId != null && artifactId != null && version != null )
-            {
-                break;
-            }
-        }
-
-        if ( groupId == null || artifactId == null || version == null )
-        {
-            return null;
-        }
-        parentMetadata = new ArtifactMetadata();
-        parentMetadata.setArtifactId( artifactId );
-        parentMetadata.setVersion( version );
-        parentMetadata.setGroupId( groupId );
-
-        return copyArtifactBasicMetadata( parentMetadata );
+        return (parentMetadata != null) ? copyArtifactBasicMetadata( parentMetadata ) : null;
-
-    /**
-     * @see org.apache.maven.shared.model.DomainModel#getEventHistory()
-     */
-    public String getEventHistory()
-    {
-        return eventHistory;
-    }
-
-    /**
-     * @see org.apache.maven.shared.model.DomainModel#setEventHistory(String)
-     */
-    public void setEventHistory( String eventHistory )
-    {
-        if ( eventHistory == null )
-        {
-            throw new IllegalArgumentException( "eventHistory: null" );
-        }
-        this.eventHistory = eventHistory;
-    }
-
-    public List<ModelProperty> getModelProperties()
-        throws IOException
-    {
-        return new ArrayList<ModelProperty>( modelProperties );
-    }
-
-    private ArtifactMetadata transformContainerToMetadata( ModelContainer container )
-        throws DataSourceException
-    {
-        List<ModelProperty> modelProperties = container.getProperties();
-
-        ArtifactMetadata metadata = new ArtifactMetadata();
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.groupId ) )
-            {
-                metadata.setGroupId( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.artifactId ) )
-            {
-                metadata.setArtifactId( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.version ) )
-            {
-                metadata.setVersion( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.classifier ) )
-            {
-                metadata.setClassifier( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.scope ) )
-            {
-                metadata.setScope( mp.getResolvedValue() );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.type ) )
-            {
-                String val = mp.getResolvedValue();
-                // 2009-03-23 Oleg: TODO ask Shane where this really belongs?
-                if( "test-jar".equals( val ) )
-                {
-                    metadata.setType( "jar" );
-                    metadata.setClassifier( "tests" );
-                }
-                else
-                    metadata.setType( val );
-            }
-            else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.optional ) )
-            {
-                metadata.setOptional( mp.getResolvedValue() );
-            }
-        }
-
-        if ( metadata.getScope() == null )
-        {
-            metadata.setScope( "runtime" );
-        }
-
-        ModelDataSource dataSource = new DefaultModelDataSource( container.getProperties(), Arrays.asList( new ArtifactModelContainerFactory(),
-                                                                   new ExclusionModelContainerFactory() ) );
-        List<ArtifactMetadata> exclusions = new ArrayList<ArtifactMetadata>();
-
-        for ( ModelContainer exclusion : dataSource.queryFor( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.xUri ) )
-        {
-            ArtifactMetadata meta = new ArtifactMetadata();
-            exclusions.add( meta );
-
-            for ( ModelProperty mp : exclusion.getProperties() )
-            {
-                if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.artifactId ) )
-                {
-                    meta.setArtifactId( mp.getResolvedValue() );
-                }
-                else if ( mp.getUri().equals( ProjectUri.Dependencies.Dependency.Exclusions.Exclusion.groupId ) )
-                {
-                    meta.setGroupId( mp.getResolvedValue() );
-                }
-            }
-
-        }
-        metadata.setExclusions( exclusions );
-
-        return metadata;
-    }

UPD40 UPD40 UPD40 UPD40 INS31 INS31 MOV83 MOV74 MOV42 INS8 INS83 MOV43 INS42 INS8 INS46 INS46 MOV60 INS70 MOV41 INS25 MOV41 MOV14 INS32 MOV44 MOV32 INS8 MOV27 INS8 INS16 MOV42 UPD42 MOV42 UPD43 UPD42 UPD42 UPD42 MOV60 MOV21 MOV21 MOV21 INS21 MOV21 MOV21 MOV25 MOV60 INS70 MOV21 MOV21 INS42 MOV60 INS25 INS36 MOV32 INS33 UPD42 INS32 INS8 INS44 INS32 INS8 UPD43 INS27 INS8 MOV27 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 INS32 UPD42 MOV42 INS42 INS16 UPD42 UPD42 INS32 INS21 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV60 MOV21 MOV21 INS21 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS33 MOV21 INS21 MOV21 MOV21 UPD42 UPD42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS36 INS45 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 MOV32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS27 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 UPD42 UPD42 INS32 MOV33 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL17 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL17 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL8 DEL31 DEL32 DEL17 DEL40 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL32 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL32 DEL14 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL8 DEL70 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL33 DEL42 DEL14 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL42 DEL33 DEL59 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL27 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL41 DEL8 DEL31 DEL40 DEL42 DEL68 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL40 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL32 DEL40 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL70 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL25 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31