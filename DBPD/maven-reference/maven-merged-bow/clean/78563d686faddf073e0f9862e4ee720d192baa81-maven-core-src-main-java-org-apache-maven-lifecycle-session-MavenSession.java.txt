o Refactored the goal/plugin resolution part of the lifecycle.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163132 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.PostGoal;
+import org.apache.maven.model.PreGoal;
+import org.codehaus.plexus.util.dag.CycleDetectedException;
+import org.codehaus.plexus.util.dag.DAG;
+import org.codehaus.plexus.util.dag.TopologicalSorter;
+import org.codehaus.plexus.util.dag.Vertex;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.Map;
+import java.util.TreeMap;
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
+ * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
+    private DAG dag;
+
-    public MavenSession( PlexusContainer container,
-                         PluginManager pluginManager,
-                         MavenProject project,
-                         ArtifactRepository localRepository,
-                         List goals )
+    private Map preGoalMappings;
+
+    private Map postGoalMappings;
+
+    public MavenSession( PlexusContainer container, PluginManager pluginManager, MavenProject project,
+        ArtifactRepository localRepository, List goals )
+        this.dag = new DAG();
+
+
+        this.preGoalMappings = new TreeMap();
+
+        this.postGoalMappings = new TreeMap();
+
+        initGoalDecoratorMappings();
-    public Object lookup( String role )
-        throws ComponentLookupException
+    public Object lookup( String role ) throws ComponentLookupException
-    public Object lookup( String role, String roleHint )
-        throws ComponentLookupException
+    public Object lookup( String role, String roleHint ) throws ComponentLookupException
-}
+
+    public List getPreGoals( String goal )
+    {
+        List result = (List) preGoalMappings.get( goal );
+        return result;
+    }
+
+    public List getPostGoals( String goal )
+    {
+        List result = (List) postGoalMappings.get( goal );
+        return result;
+    }
+
+    private void initGoalDecoratorMappings()
+    {
+        List allPreGoals = project.getModel().getPreGoals();
+        for ( Iterator it = allPreGoals.iterator(); it.hasNext(); )
+        {
+            PreGoal preGoal = (PreGoal) it.next();
+
+            List preGoalList = (List) preGoalMappings.get( preGoal.getName() );
+            if ( preGoalList == null )
+            {
+                preGoalList = new LinkedList();
+                preGoalMappings.put( preGoal.getName(), preGoalList );
+            }
+
+            preGoalList.add( preGoal.getAttain() );
+        }
+
+        List allPostGoals = project.getModel().getPostGoals();
+        for ( Iterator it = allPostGoals.iterator(); it.hasNext(); )
+        {
+            PostGoal postGoal = (PostGoal) it.next();
+
+            List postGoalList = (List) postGoalMappings.get( postGoal.getName() );
+            if ( postGoalList == null )
+            {
+                postGoalList = new LinkedList();
+                postGoalMappings.put( postGoal.getName(), postGoalList );
+            }
+
+            postGoalList.add( postGoal.getAttain() );
+        }
+    }
+
+    public void addImpliedExecution( String goal, String implied ) throws CycleDetectedException
+    {
+        dag.addEdge( goal, implied );
+    }
+    
+    public void addSingleExecution( String goal )
+    {
+        dag.addVertex( goal );
+    }
+
+    public List getExecutionChain( String goal )
+    {
+        Vertex vertex = dag.getVertex( goal );
+        
+        List sorted = TopologicalSorter.sort( vertex );
+        
+        int goalIndex = sorted.indexOf( goal );
+        
+        List chainToHere = sorted.subList( 0, goalIndex + 1 );
+        
+        return chainToHere;
+    }
+
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS60 INS41 INS60 INS24 INS60 INS24 INS43 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS21 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS41 INS7 INS7 INS7 INS32 INS42 INS43 INS59 INS42 INS42 INS43 INS59 INS42 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS42 INS22 INS14 INS22 INS14 INS22 INS14 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS21 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS52 INS42 INS43 INS52 INS42 INS43 INS52 INS42 INS43 INS43 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS34 INS43 INS32 INS43 INS32 INS7 INS32 INS42 INS42 INS43 INS32 INS43 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42