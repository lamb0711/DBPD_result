Working on issue: MNG-469

o Changed <reports/> in the Model to <reporting/>, to accommodate the <reports/> inside of <reportSet/>.

o Changed the report-plugin class <plugins/> inside of <report[ing]/> to <reporters/>, which means using a new class called Reporter (this is meant to be a Plugin-like model for reports, with reportSets rather than executions...)

o Changed the MavenProject to reflect these two model changes

o Added support to the inheritance assembler to perform deep inheritance of the reporting model (complete with calculations based on the <inherit/> attributes on Reporter and ReportSet).

o Updated DoxiaMojo, Pom, and DefaultPluginVersionManager to reflect the new model classes and MavenProject methods.

This is only round one of the changes for this issue. The next step is to start binding report configuration to the plugin manager via the lifecycle executor (it will traverse the reporting section, and verifyPlugin() to enable direct calls to the report's mojo).



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191239 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.model.Plugin;
+import org.apache.maven.model.ReportSet;
+import org.apache.maven.model.Reporter;
+import org.apache.maven.model.Reporting;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
+import java.util.ArrayList;
+import java.util.HashMap;
-        if ( child.getReports() != null && parent.getReports() != null )
+        Reporting childReporting = child.getReporting();
+        Reporting parentReporting = parent.getReporting();
+
+        if ( childReporting != null && parentReporting != null )
-            if ( child.getReports().getOutputDirectory() == null )
+            if ( StringUtils.isEmpty( childReporting.getOutputDirectory() ) )
-                child.getReports().setOutputDirectory( parent.getReports().getOutputDirectory() );
+                childReporting.setOutputDirectory( parentReporting.getOutputDirectory() );
-            List parentReports = parent.getReports().getPlugins();
+            Map mergedReporters = new HashMap();
-            List childReports = child.getReports().getPlugins();
+            Map childReportersByKey = childReporting.getReportersAsMap();
-            for ( Iterator iterator = parentReports.iterator(); iterator.hasNext(); )
+            List parentReporters = parentReporting.getReporters();
+
+            if ( parentReporters != null )
-                Plugin plugin = (Plugin) iterator.next();
-
-                if ( !childReports.contains( plugin ) )
+                for ( Iterator it = parentReporters.iterator(); it.hasNext(); )
-                    child.getReports().addPlugin( plugin );
+                    Reporter parentReporter = (Reporter) it.next();
+
+                    String inherited = parentReporter.getInherited();
+
+                    if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
+                    {
+                        Reporter childReporter = (Reporter) childReportersByKey.get( parentReporter.getKey() );
+
+                        Reporter mergedReporter = parentReporter;
+
+                        if ( childReporter != null )
+                        {
+                            mergedReporter = childReporter;
+
+                            mergeReporters( childReporter, parentReporter );
+                        }
+                        else if ( StringUtils.isEmpty( inherited ) )
+                        {
+                            mergedReporter.unsetInheritanceApplied();
+                        }
+
+                        mergedReporters.put( mergedReporter.getKey(), mergedReporter );
+                    }
+
+            for ( Iterator it = childReportersByKey.entrySet().iterator(); it.hasNext(); )
+            {
+                Map.Entry entry = (Map.Entry) it.next();
+
+                String key = (String) entry.getKey();
+
+                if ( !mergedReporters.containsKey( key ) )
+                {
+                    mergedReporters.put( key, entry.getValue() );
+                }
+            }
+
+            childReporting.setReporters( new ArrayList( mergedReporters.values() ) );
+        }
+        
+        assembleDependencyManagementInheritance( child, parent );
+    }
+
+    private void mergeReporters( Reporter dominant, Reporter recessive )
+    {
+        if ( StringUtils.isEmpty( dominant.getVersion() ) )
+        {
+            dominant.setVersion( recessive.getVersion() );
+        }
+
+        Xpp3Dom dominantConfig = (Xpp3Dom) dominant.getConfiguration();
+        Xpp3Dom recessiveConfig = (Xpp3Dom) recessive.getConfiguration();
+
+        dominant.setConfiguration( Xpp3Dom.mergeXpp3Dom( dominantConfig, recessiveConfig ) );
+
+        Map mergedReportSets = new HashMap();
+
+        Map dominantReportSetsById = dominant.getReportSetsAsMap();
+
+        for ( Iterator it = recessive.getReportSets().iterator(); it.hasNext(); )
+        {
+            ReportSet recessiveReportSet = (ReportSet) it.next();
+
+            String inherited = recessiveReportSet.getInherited();
+
+            if ( StringUtils.isEmpty( inherited ) || Boolean.valueOf( inherited ).booleanValue() )
+            {
+                ReportSet dominantReportSet = (ReportSet) dominantReportSetsById.get( recessiveReportSet.getId() );
+
+                ReportSet merged = recessiveReportSet;
+
+                if ( dominantReportSet != null )
+                {
+                    merged = dominantReportSet;
+
+                    Xpp3Dom recessiveRSConfig = (Xpp3Dom) recessiveReportSet.getConfiguration();
+                    Xpp3Dom mergedRSConfig = (Xpp3Dom) merged.getConfiguration();
+
+                    merged.setConfiguration( Xpp3Dom.mergeXpp3Dom( mergedRSConfig, recessiveRSConfig ) );
+
+                    List mergedReports = merged.getReports();
+
+                    if ( mergedReports == null )
+                    {
+                        mergedReports = new ArrayList();
+
+                        merged.setReports( mergedReports );
+                    }
+
+                    List recessiveRSReports = recessiveReportSet.getReports();
+
+                    if ( recessiveRSReports != null )
+                    {
+                        for ( Iterator reportIterator = recessiveRSReports.iterator(); reportIterator.hasNext(); )
+                        {
+                            String report = (String) reportIterator.next();
+
+                            if ( !mergedReports.contains( report ) )
+                            {
+                                mergedReports.add( report );
+                            }
+                        }
+                    }
+                }
+                else if ( StringUtils.isEmpty( inherited ) )
+                {
+                    merged.unsetInheritanceApplied();
+                }
+
+                mergedReportSets.put( merged.getId(), merged );
+            }
-        assembleDependencyManagementInheritance( child, parent );
+        for ( Iterator rsIterator = dominantReportSetsById.entrySet().iterator(); rsIterator.hasNext(); )
+        {
+            Map.Entry entry = (Map.Entry) rsIterator.next();
+
+            String key = (String) entry.getKey();
+
+            if ( !mergedReportSets.containsKey( key ) )
+            {
+                mergedReportSets.put( key, entry.getValue() );
+            }
+        }
+
+        dominant.setReportSets( new ArrayList( mergedReportSets.values() ) );

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS60 INS60 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS21 INS60 INS60 INS24 INS24 INS21 INS43 INS59 INS43 INS59 INS42 INS42 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS58 INS32 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS25 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 MOV43 INS27 INS8 INS32 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS43 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 UPD42 INS32 INS42 INS33 INS24 INS43 UPD42 INS60 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS32 INS60 INS60 INS25 INS21 INS32 INS42 INS40 INS42 INS11 INS42 INS42 INS11 INS32 INS21 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS58 INS32 INS8 INS42 UPD42 INS43 INS59 UPD43 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS32 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 MOV43 INS59 INS42 INS42 INS60 INS60 INS25 INS32 INS40 INS42 INS11 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS33 INS21 INS60 INS60 INS21 INS60 INS25 INS60 INS25 INS32 INS8 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 UPD42 MOV42 INS42 INS43 INS32 UPD43 UPD42 UPD42 UPD42 INS43 INS32 INS7 INS43 INS59 INS43 INS59 INS32 MOV43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS32 MOV60 INS60 INS25 INS21 INS40 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS24 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS59 INS27 INS8 INS25 INS32 UPD42 MOV42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS11 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS32 INS7 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS38 INS8 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL33 DEL27 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL32 DEL32