cleaning up NPE in the realm manager, and adding clear() method calls to the embedder to cleanup the realm manager after it's used, to try to keep the number of open realms to a minimum...

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@592222 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import java.util.Set;
-    private Map extensionComponents = new HashMap();
+    private Set managedRealmIds = new HashSet();
-        extensionComponents.clear();
-        pluginArtifacts.clear();
+        Collection realms = new HashSet( world.getRealms() );
+        for ( Iterator it = realms.iterator(); it.hasNext(); )
+        {
+            ClassRealm realm = (ClassRealm) it.next();
+            String id = realm.getId();
+
+            if ( managedRealmIds.contains( id ) )
+            {
+                try
+                {
+                    world.disposeRealm( id );
+                }
+                catch ( NoSuchRealmException e )
+                {
+                    // cannot happen.
+                }
+            }
+        }
+
+        managedRealmIds.clear();
+//        pluginArtifacts.clear();
+            managedRealmIds.add( id );
-        List componentSetDescriptors = (List) extensionComponents.get( extensionRealmId );
-        // don't re-discover components once this is done once.
-        if ( componentSetDescriptors == null )
+        if ( extensionArtifact.getFile() == null )
-            ClassWorld discoveryWorld = new ClassWorld();
+            throw new RealmManagementException( extensionRealmId, "Cannot import project extensions; extension artifact has no associated file that can be scanned for extension components (extension: " + extensionArtifact.getId() + ")" );
+        }
+
+        ClassWorld discoveryWorld = new ClassWorld();
+
+        List componentSetDescriptors;
+        try
+        {
+            // Create an entire new ClassWorld, ClassRealm for discovering
+            // the immediate components of the extension artifact, so we don't pollute the
+            // container with component descriptors or realms that don't have any meaning beyond discovery.
+            ClassRealm discoveryRealm;
-                // Create an entire new ClassWorld, ClassRealm for discovering
-                // the immediate components of the extension artifact, so we don't pollute the
-                // container with component descriptors or realms that don't have any meaning beyond discovery.
-                ClassRealm discoveryRealm = new ClassRealm( discoveryWorld, "discovery" );
-                try
-                {
-                    discoveryRealm.addURL( extensionArtifact.getFile().toURL() );
-                }
-                catch ( MalformedURLException e )
-                {
-                    throw new RealmManagementException( extensionRealmId, extensionArtifact, "Unable to generate URL from extension artifact file: " + extensionArtifact.getFile() + " for local-component discovery.", e );
-                }
-
-                ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();
-                discoverer.setManager( new DummyDiscovererManager() );
-
-                try
-                {
-                    // Find the extension component descriptors that exist ONLY in the immediate extension
-                    // artifact...this prevents us from adding plexus-archiver components to the mix, for instance,
-                    // when the extension uses that dependency.
-                    componentSetDescriptors = discoverer.findComponents( container.getContext(), discoveryRealm );
-                    extensionComponents.put( extensionRealmId, componentSetDescriptors );
-                }
-                catch ( PlexusConfigurationException e )
-                {
-                    throw new RealmManagementException( extensionRealmId, "Unable to discover components in extension artifact: " + extensionArtifact.getId(), e );
-                }
+                discoveryRealm = discoveryWorld.newRealm( "discovery: " + extensionRealmId );
-            finally
+            catch ( DuplicateRealmException e )
-                Collection realms = discoveryWorld.getRealms();
-                for ( Iterator it = realms.iterator(); it.hasNext(); )
+                throw new RealmManagementException( extensionRealmId, "Unable to create temporary ClassRealm for local-component discovery.", e );
+            }
+
+            try
+            {
+                discoveryRealm.addURL( extensionArtifact.getFile().toURL() );
+            }
+            catch ( MalformedURLException e )
+            {
+                throw new RealmManagementException( extensionRealmId, extensionArtifact, "Unable to generate URL from extension artifact file: " + extensionArtifact.getFile() + " for local-component discovery.", e );
+            }
+
+            ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();
+            discoverer.setManager( new DummyDiscovererManager() );
+
+            try
+            {
+                // Find the extension component descriptors that exist ONLY in the immediate extension
+                // artifact...this prevents us from adding plexus-archiver components to the mix, for instance,
+                // when the extension uses that dependency.
+                componentSetDescriptors = discoverer.findComponents( container.getContext(), discoveryRealm );
+            }
+            catch ( PlexusConfigurationException e )
+            {
+                throw new RealmManagementException( extensionRealmId, "Unable to discover components in extension artifact: " + extensionArtifact.getId(), e );
+            }
+
+            ClassRealm realm = getProjectRealm( projectGroupId, projectArtifactId, projectVersion, true );
+
+            for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
+            {
+                ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();
+                for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )
-                    ClassRealm realm = (ClassRealm) it.next();
+                    // For each component in the extension artifact:
+                    ComponentDescriptor comp = (ComponentDescriptor) compIt.next();
+                    String implementation = comp.getImplementation();
+
-                        discoveryWorld.disposeRealm( realm.getId() );
+                        logger.debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealmId + "\nto project realm: " + realm.getId() );
+
+                        // Import the extension component's implementation class into the project-level
+                        // realm.
+                        realm.importFrom( extensionRealmId, implementation );
+
+                        // Set the realmId to be used in looking up this extension component to the
+                        // project-level realm, since we now have a restricted import
+                        // that allows most of the extension to stay hidden, and the
+                        // specific local extension components are still accessible
+                        // from the project-level realm.
+                        comp.setRealmId( realm.getId() );
+
+                        // Finally, add the extension component's descriptor (with projectRealm
+                        // set as the lookup realm) to the container.
+                        container.addComponentDescriptor( comp );
+                        throw new RealmManagementException( extensionRealmId, "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealmId + " to project realm: " + realm.getId(), e );
+                    }
+                    catch ( ComponentRepositoryException e )
+                    {
+                        String projectId = RealmUtils.createProjectId( projectGroupId, projectArtifactId, projectVersion );
+                        throw new RealmManagementException( extensionRealmId, "Unable to discover components from imports to project: " + projectId + " from extension artifact: " + extensionArtifact.getId(), e );
-
-        ClassRealm realm = getProjectRealm( projectGroupId, projectArtifactId, projectVersion, true );
-
-        for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
+        finally
-            ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();
-            for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )
+            Collection realms = discoveryWorld.getRealms();
+            for ( Iterator it = realms.iterator(); it.hasNext(); )
-                // For each component in the extension artifact:
-                ComponentDescriptor comp = (ComponentDescriptor) compIt.next();
-                String implementation = comp.getImplementation();
-
+                ClassRealm realm = (ClassRealm) it.next();
-                    logger.debug( "Importing: " + implementation + "\nwith role: " + comp.getRole() + "\nand hint: " + comp.getRoleHint() + "\nfrom extension realm: " + extensionRealmId + "\nto project realm: " + realm.getId() );
-
-                    // Import the extension component's implementation class into the project-level
-                    // realm.
-                    realm.importFrom( extensionRealmId, implementation );
-
-                    // Set the realmId to be used in looking up this extension component to the
-                    // project-level realm, since we now have a restricted import
-                    // that allows most of the extension to stay hidden, and the
-                    // specific local extension components are still accessible
-                    // from the project-level realm.
-                    comp.setRealmId( realm.getId() );
-
-                    // Finally, add the extension component's descriptor (with projectRealm
-                    // set as the lookup realm) to the container.
-                    container.addComponentDescriptor( comp );
+                    discoveryWorld.disposeRealm( realm.getId() );
-                    throw new RealmManagementException( extensionRealmId, "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealmId + " to project realm: " + realm.getId(), e );
-                }
-                catch ( ComponentRepositoryException e )
-                {
-                    String projectId = RealmUtils.createProjectId( projectGroupId, projectArtifactId, projectVersion );
-                    throw new RealmManagementException( extensionRealmId, "Unable to discover components from imports to project: " + projectId + " from extension artifact: " + extensionArtifact.getId(), e );
+
+                    managedRealmIds.add( id );
+//            managedRealmIds.add( id );

INS26 INS26 MOV23 INS40 INS40 UPD43 MOV8 UPD42 UPD42 INS60 INS24 MOV60 INS25 INS60 UPD43 INS43 INS59 INS58 INS32 INS8 INS27 INS8 MOV43 INS59 INS8 UPD42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS25 UPD42 INS21 INS32 INS33 INS53 INS42 INS60 INS54 MOV54 MOV60 MOV21 MOV54 MOV60 MOV24 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS14 MOV43 INS59 MOV8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS54 INS42 INS42 INS42 INS43 INS42 INS27 INS42 INS21 INS44 INS8 MOV43 INS32 INS42 INS42 INS8 INS12 INS42 INS45 INS32 INS45 INS7 INS43 INS42 INS53 INS42 INS42 MOV21 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS14 INS43 INS42 INS42 INS42 INS27 INS43 INS42 INS45 INS42 INS21 UPD42 UPD42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8