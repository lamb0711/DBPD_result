PR: MNG-484
allow using any directory copy enabled wagon for site


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312774 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.wagon.ResourceDoesNotExistException;
+import org.apache.maven.wagon.TransferFailedException;
+import org.apache.maven.wagon.UnsupportedProtocolException;
+import org.apache.maven.wagon.Wagon;
-import org.apache.maven.wagon.providers.ssh.SshCommandExecutor;
+import org.apache.maven.wagon.authentication.AuthenticationException;
+import org.apache.maven.wagon.authorization.AuthorizationException;
-import org.codehaus.plexus.util.FileUtils;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.List;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipOutputStream;
-     * @parameter
-     */
-    private String unzipCommand = "unzip -o";
-
-    /**
-     * @parameter expression="${component.org.apache.maven.artifact.manager.WagonManager}"
-     * @required
-     * @readonly
+     * @component
-        File zipFile;
-
-        try
-        {
-            zipFile = File.createTempFile( "site", ".zip" );
-        }
-        catch ( IOException e )
-        {
-            throw new MojoExecutionException( "Cannot create site archive!", e );
-        }
-
-        String siteProtocol = repository.getProtocol();
+        // TODO: work on moving this into the deployer like the other deploy methods
-        if ( "scp".equals( siteProtocol ) )
+        Wagon wagon = null;
+        try
-            scpDeploy( zipFile, id, repository );
+            wagon = wagonManager.getWagon( repository.getProtocol() );
-        else if ( "file".equals( siteProtocol ) )
+        catch ( UnsupportedProtocolException e )
-            File toDir = new File( repository.getBasedir() );
-            fileDeploy( toDir );
+            throw new MojoExecutionException( "Unsupported protocol: '" + repository.getProtocol() + "'", e );
-        else
+
+        if ( !wagon.supportsDirectoryCopy() )
-                "The deploy mojo currently only supports site deployment using the 'scp' and 'file' protocols." );
+                "Wagon protocol '" + repository.getProtocol() + "' doesn't support directory copying" );
-    }
-
-
-    /**
-     * @throws MojoExecutionException
-     */
-    private void fileDeploy( File toDir )
-        throws MojoExecutionException
-    {
-        try
-        {
-            FileUtils.copyDirectoryStructure( inputDirectory, toDir );
-        }
-        catch ( IOException e )
-        {
-            throw new MojoExecutionException( "Error transfering site!", e );
-        }
-    }
-
-
-    /**
-     * @param zipFile
-     * @param id
-     * @param repository
-     * @throws MojoExecutionException
-     */
-    private void scpDeploy( File zipFile, String id, Repository repository )
-        throws MojoExecutionException
-    {
-        SshCommandExecutor commandExecutor = null;
-            commandExecutor = (SshCommandExecutor) wagonManager.getWagon( "scp" );
-
-            commandExecutor.connect( repository, wagonManager.getAuthenticationInfo( id ) );
-
-            String basedir = repository.getBasedir();
-
-            List files = FileUtils.getFileNames( inputDirectory, "**/**", "", false );
-
-            createZip( files, zipFile, inputDirectory );
-
-            commandExecutor.addSessionListener( debug );
+            wagon.addSessionListener( debug );
-            commandExecutor.addTransferListener( debug );
+            wagon.addTransferListener( debug );
-            String cmd = " mkdir -p " + basedir;
+            wagon.connect( repository, wagonManager.getAuthenticationInfo( id ) );
-            commandExecutor.executeCommand( cmd );
-
-            commandExecutor.put( zipFile, zipFile.getName() );
-
-            // TODO: cat to file is temporary until the ssh executor is fixed to deal with output
-            cmd = " cd " + basedir + ";" + unzipCommand + " " + zipFile.getName() + " >scpdeploymojo.log";
-
-            commandExecutor.executeCommand( cmd );
-
-            if ( !basedir.endsWith( "/" ) )
-            {
-                basedir = basedir + "/";
-            }
-
-            commandExecutor.executeCommand( "rm -f " + basedir + zipFile.getName() + " scpdeploymojo.log" );
+            wagon.putDirectory( inputDirectory, "." );
-        catch ( Exception e )
+        catch ( ResourceDoesNotExistException e )
-            throw new MojoExecutionException( "Error transfering site archive!", e );
+            throw new MojoExecutionException( "Error uploading site", e );
+        }
+        catch ( TransferFailedException e )
+        {
+            throw new MojoExecutionException( "Error uploading site", e );
+        }
+        catch ( AuthorizationException e )
+        {
+            throw new MojoExecutionException( "Error uploading site", e );
+        }
+        catch ( ConnectionException e )
+        {
+            throw new MojoExecutionException( "Error uploading site", e );
+        }
+        catch ( AuthenticationException e )
+        {
+            throw new MojoExecutionException( "Error uploading site", e );
-            if ( commandExecutor != null )
+            try
-                try
-                {
-                    commandExecutor.disconnect();
-                }
-                catch ( ConnectionException e )
-                {
-                    //what to to here?
-                }
+                wagon.disconnect();
-
-            if ( !zipFile.delete() )
+            catch ( ConnectionException e )
-                zipFile.deleteOnExit();
+                getLog().error( "Error disconnecting wagon - ignored", e );
-
-
-    public void createZip( List files, File zipName, File basedir )
-        throws Exception
-    {
-        ZipOutputStream zos = new ZipOutputStream( new FileOutputStream( zipName ) );
-
-        try
-        {
-            for ( int i = 0; i < files.size(); i++ )
-            {
-                String file = (String) files.get( i );
-
-                writeZipEntry( zos, new File( basedir, file ), file );
-            }
-        }
-        finally
-        {
-            zos.close();
-        }
-    }
-
-    private void writeZipEntry( ZipOutputStream jar, File source, String entryName )
-        throws Exception
-    {
-        byte[] buffer = new byte[1024];
-
-        int bytesRead;
-
-        FileInputStream is = new FileInputStream( source );
-
-        try
-        {
-            ZipEntry entry = new ZipEntry( entryName );
-
-            jar.putNextEntry( entry );
-
-            while ( ( bytesRead = is.read( buffer ) ) != -1 )
-            {
-                jar.write( buffer, 0, bytesRead );
-            }
-        }
-
-        finally
-        {
-            is.close();
-        }
-    }

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 MOV60 MOV54 UPD65 INS25 INS54 UPD43 INS38 INS8 INS8 INS12 INS12 INS12 INS12 INS12 INS8 UPD42 UPD42 INS33 INS32 INS53 MOV60 INS21 INS21 MOV21 INS21 INS44 MOV8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS54 UPD43 INS42 INS42 INS14 MOV43 INS32 INS32 INS32 INS43 INS42 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS8 INS12 UPD42 INS32 UPD42 INS43 INS27 UPD42 MOV42 MOV42 MOV14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 INS42 INS42 INS42 UPD45 MOV45 INS42 INS42 INS14 UPD42 MOV42 INS14 INS42 INS14 INS42 INS14 INS21 MOV44 INS8 INS42 INS42 INS32 INS27 INS42 INS45 MOV32 INS45 UPD42 MOV42 MOV42 UPD45 INS42 MOV43 INS45 INS42 MOV43 INS45 INS42 MOV43 INS45 INS42 MOV43 INS45 INS42 INS32 MOV21 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS45 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL65 DEL45 DEL45 DEL32 DEL45 DEL42 DEL45 DEL32 DEL8 DEL42 DEL42 DEL32 DEL43 DEL42 DEL43 DEL32 DEL14 DEL59 DEL60 DEL8 DEL25 DEL25 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL45 DEL45 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL42 DEL45 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31