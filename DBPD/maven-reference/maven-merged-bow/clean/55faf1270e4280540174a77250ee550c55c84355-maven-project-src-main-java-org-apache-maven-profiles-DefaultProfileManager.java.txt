Replaced old profile code with new.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@747993 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
-import org.apache.maven.profiles.activation.ProfileActivator;
+import org.apache.maven.shared.model.ModelContainer;
+import org.apache.maven.shared.model.ModelProperty;
+import org.apache.maven.shared.model.ModelMarshaller;
+import org.apache.maven.shared.model.InterpolatorProperty;
+import org.apache.maven.project.builder.factories.IdModelContainerFactory;
+import org.apache.maven.project.builder.ProjectUri;
+import org.apache.maven.project.builder.PomTransformer;
+import org.apache.maven.project.builder.PomInterpolatorTag;
+import org.apache.maven.project.builder.profile.*;
-import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+import org.codehaus.plexus.util.xml.pull.XmlSerializer;
+import org.codehaus.plexus.util.xml.pull.MXSerializer;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
+import java.io.*;
+import java.lang.reflect.Method;
+
+    private static List<ActiveProfileMatcher> matchers = Arrays.asList(new FileMatcher(),
+        new JdkMatcher(), new OperatingSystemMatcher(), new PropertyMatcher());
+
-        List<ProfileActivator> activators = null;
-
+        //TODO: Using reflection now. Need to replace with custom mapper
+        StringWriter writer = new StringWriter();
+        XmlSerializer serializer = new MXSerializer();
+        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
+        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
-            activators = container.lookupList( ProfileActivator.class );
-
-            for ( ProfileActivator activator : activators )
-            {
-                if ( activator.canDetermineActivation( profile, context ) )
-                {
-                    if ( activator.isActive( profile, context ) )
-                    {
-                        container.getLogger().debug(
-                            "Profile: " + profile.getId() + " is active. (source: " + profile.getSource() + ")" );
-                        return true;
-                    }
-                }
-            }
-
-            return false;
+            serializer.setOutput( writer );
+            serializer.startDocument("UTF-8", null );
+        } catch (IOException e) {
+            
-        catch ( ComponentLookupException e )
+
+        try {
+            MavenXpp3Writer w = new MavenXpp3Writer();
+            Class c = Class.forName("org.apache.maven.model.io.xpp3.MavenXpp3Writer");
+
+            Class partypes[] = new Class[3];
+            partypes[0] = Profile.class;
+            partypes[1] = String.class;
+            partypes[2] = XmlSerializer.class;
+
+            Method meth = c.getDeclaredMethod(
+                         "writeProfile", partypes);
+            meth.setAccessible(true);
+            
+            Object arglist[] = new Object[3];
+            arglist[0] = profile;
+            arglist[1] = "profile";
+            arglist[2] = serializer;
+
+            meth.invoke(w, arglist);
+            serializer.endDocument();
+        } catch (Exception e)
-            throw new ProfileActivationException( "Cannot retrieve list of profile activators.", e );
+            throw new ProfileActivationException(e.getMessage(), e);
-        finally
+
+        List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
+        interpolatorProperties.addAll(InterpolatorProperty.toInterpolatorProperties(
+                context.getExecutionProperties(),
+                PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
+
+        List<ModelProperty> p;
+        try
+        {                                                                   
+            p = ModelMarshaller.marshallXmlToModelProperties(new ByteArrayInputStream(writer.getBuffer().toString().getBytes()),
+                    ProjectUri.Profiles.Profile.xUri, PomTransformer.URIS);
+        } catch (IOException e) {
+            throw new ProfileActivationException(e.getMessage());
+        }
+        //Serializer adds in extra node, strip it out
+        List<ModelProperty> p2 = new ArrayList<ModelProperty>();
+        for(ModelProperty mp : p)
-            container.getContext().put( "SystemProperties", null );
-            if ( activators != null )
+            p2.add(new ModelProperty(mp.getUri().replaceFirst("profile/", ""), mp.getResolvedValue()));
+        }
+        
+        ModelContainer mc = new IdModelContainerFactory(ProjectUri.Profiles.Profile.xUri).create(p2);
+        for(ActiveProfileMatcher matcher : matchers)
+        {
+            if(matcher.isMatch(mc, interpolatorProperties))
-                try
-                {
-                    container.releaseAll( activators );
-                }
-                catch ( ComponentLifecycleException e )
-                {
-                    container.getLogger().debug( "Error releasing profile activators - ignoring.", e );
-                }
+                return true;
+        return false;
-    private static String getVersion( Model model )
-    {
-        Parent parent = model.getParent();
-
-        String version = model.getVersion();
-        if ( ( parent != null ) && ( version == null ) )
-        {
-            version = parent.getVersion();
-        }
-
-        return version;
-    }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS83 INS83 UPD74 MOV74 INS59 INS83 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 UPD43 INS42 INS32 MOV60 INS60 INS21 INS21 INS54 INS54 INS60 MOV21 INS60 MOV54 INS60 INS70 MOV60 INS70 MOV41 UPD42 INS42 INS42 INS14 INS14 INS14 INS14 INS43 INS43 INS59 INS32 INS32 INS8 INS12 MOV8 MOV12 INS74 INS59 INS32 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS43 INS44 INS42 INS8 INS43 INS43 INS43 INS43 INS42 UPD42 INS14 INS42 INS42 INS14 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS21 INS21 INS44 INS8 INS60 INS60 INS60 INS21 INS21 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS43 INS42 INS43 INS43 INS42 INS14 UPD43 MOV43 UPD42 MOV42 INS21 INS42 UPD42 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS32 INS43 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS7 INS43 INS59 INS32 INS43 INS59 INS7 INS7 INS7 INS32 INS32 UPD43 INS42 INS42 INS74 INS42 INS42 MOV32 INS32 INS42 INS42 INS7 UPD43 INS53 UPD42 MOV42 INS42 INS74 UPD42 INS32 INS14 UPD42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS33 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS85 INS3 INS2 INS57 INS2 INS57 INS2 INS57 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS42 INS85 INS3 INS2 INS42 INS2 INS45 INS2 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS43 INS43 UPD42 UPD42 INS40 UPD42 MOV42 INS42 INS32 UPD42 INS14 INS43 INS43 INS42 INS42 INS14 INS43 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV41 INS43 INS42 INS42 INS45 INS5 INS34 INS42 INS34 UPD43 MOV43 INS42 INS34 MOV43 INS42 INS34 INS43 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS5 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS40 INS43 INS32 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS43 INS85 UPD42 UPD42 MOV42 INS43 INS85 INS42 INS42 INS43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS45 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL33 DEL42 DEL42 DEL42 DEL57 DEL32 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL45 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL45 DEL42 DEL45 DEL33 DEL32 DEL32 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL83 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL43 DEL42 DEL44 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL42 DEL33 DEL27 DEL36 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31