o more separation of plugins from reporting
o more sequencing of plugin resolution and execution


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@757109 13f79535-47bb-0310-9956-ffa450edef68

-    public PluginDescriptor verifyPlugin( Plugin plugin, MavenProject project, MavenSession session )
-        throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
+    public PluginDescriptor loadPlugin( Plugin plugin, MavenProject project, MavenSession session )
+        throws PluginLoaderException
-        String pluginVersion = plugin.getVersion();
-
-        // TODO: this should be possibly outside
-        // All version-resolution logic has been moved to DefaultPluginVersionManager.
-        logger.debug( "Resolving plugin: " + plugin.getKey() + " with version: " + pluginVersion );
-        
-        if ( ( pluginVersion == null ) || Artifact.LATEST_VERSION.equals( pluginVersion ) || Artifact.RELEASE_VERSION.equals( pluginVersion ) )
+        if ( plugin.getGroupId() == null )
-            logger.debug( "Resolving version for plugin: " + plugin.getKey() );
-            
-            pluginVersion = resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(), project, session );
-            
-            plugin.setVersion( pluginVersion );
-
-            logger.debug( "Resolved to version: " + pluginVersion );
+            plugin.setGroupId( PluginDescriptor.getDefaultPluginGroupId() );
-        
-        return verifyVersionedPlugin( plugin, project, session );
-    }
-    private PluginDescriptor verifyVersionedPlugin( Plugin plugin, MavenProject project, MavenSession session )
-        throws PluginVersionResolutionException, ArtifactNotFoundException, ArtifactResolutionException, InvalidPluginException, PluginManagerException, PluginNotFoundException
-    {
-        logger.debug( "In verifyVersionedPlugin for: " + plugin.getKey() );
-
-        // TODO: this might result in an artifact "RELEASE" being resolved continuously
-        // FIXME: need to find out how a plugin gets marked as 'installed'
-        // and no ChildContainer exists. The check for that below fixes
-        // the 'Can't find plexus container for plugin: xxx' error.
-        {            
-            addPlugin( plugin, project, session );
+        {
+            
+            String pluginVersion = plugin.getVersion();
+            logger.debug( "Resolving plugin: " + plugin.getKey() + " with version: " + pluginVersion );
+            
+            if ( ( pluginVersion == null ) || Artifact.LATEST_VERSION.equals( pluginVersion ) || Artifact.RELEASE_VERSION.equals( pluginVersion ) )
+            {
+                logger.debug( "Resolving version for plugin: " + plugin.getKey() );
+                
+                pluginVersion = resolvePluginVersion( plugin.getGroupId(), plugin.getArtifactId(), project, session );
+                
+                plugin.setVersion( pluginVersion );
+
+                logger.debug( "Resolved to version: " + pluginVersion );
+            }
+             
+            System.out.println( "XXXXXXXXXXXXXXXXXXXXXXX " + plugin.getArtifactId() + ":" + plugin.getVersion() );
+            
+            addPlugin( plugin, project, session );
+            
+            PluginDescriptor result = pluginCollector.getPluginDescriptor( plugin );
+            
+            
+
+            return result;
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-            String groupId = plugin.getGroupId();
-
-            String artifactId = plugin.getArtifactId();
-
-            String version = plugin.getVersion();
-
-            if ( ( groupId == null ) || ( artifactId == null ) || ( version == null ) )
-            {
-                throw new PluginNotFoundException( plugin, e );
-            }
-            else if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) && version.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
-            {
-                throw new PluginNotFoundException( plugin, e );
-            }
-            else
-            {
-                throw e;
-            }
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
-
-        return pluginDescriptor;
-    }
+        catch ( PluginVersionResolutionException e )
+        {
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
+        }
+        catch ( InvalidPluginException e )
+        {
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
+        }
+        catch ( PluginManagerException e )
+        {
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
+        }
+        catch ( PluginVersionNotFoundException e )
+        {
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
+        }
+    }        
-                              
+             
+            pluginRealm.display();
+            
-                for ( Iterator i = projects.iterator(); i.hasNext(); )
+                for ( MavenProject p : projects )
-                    MavenProject p = (MavenProject) i.next();
-
-        Plugin forLookup = new Plugin();
+        Plugin plugin = new Plugin();
-        forLookup.setGroupId( reportPlugin.getGroupId() );
-        forLookup.setArtifactId( reportPlugin.getArtifactId() );
-        forLookup.setVersion( version );
+        plugin.setGroupId( reportPlugin.getGroupId() );
+        plugin.setArtifactId( reportPlugin.getArtifactId() );
+        plugin.setVersion( version );
+        
+        try
+        {            
+            addPlugin( plugin, project, session );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            String groupId = plugin.getGroupId();
-        return verifyVersionedPlugin( forLookup, project, session );
+            String artifactId = plugin.getArtifactId();
+
+            String pluginVersion = plugin.getVersion();
+
+            if ( ( groupId == null ) || ( artifactId == null ) || ( pluginVersion == null ) )
+            {
+                throw new PluginNotFoundException( plugin, e );
+            }
+            else if ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) && pluginVersion.equals( e.getVersion() ) && "maven-plugin".equals( e.getType() ) )
+            {
+                throw new PluginNotFoundException( plugin, e );
+            }
+            else
+            {
+                throw e;
+            }
+        }
+
+        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
+
+        return pluginDescriptor;        
-                Map pluginContext = session.getPluginContext( pluginDescriptor, project );
+                Map<String,Object> pluginContext = session.getPluginContext( pluginDescriptor, project );
-    }   
-    
-    // Plugin Loader
-    
-    /**
-     * Load the {@link PluginDescriptor} instance for the specified plugin, using the project for
-     * the {@link ArtifactRepository} and other supplemental plugin information as necessary.
-     */
-    public PluginDescriptor loadPlugin( Plugin plugin, MavenProject project, MavenSession session )
-        throws PluginLoaderException
-    {               
-        if ( plugin.getGroupId() == null )
-        {
-            plugin.setGroupId( PluginDescriptor.getDefaultPluginGroupId() );
-        }
-
-        try
-        {
-            PluginDescriptor result = verifyPlugin( plugin, project, session );
-
-            // this has been simplified from the old code that injected the plugin management stuff, since
-            // pluginManagement injection is now handled by the project method.
-            project.addPlugin( plugin );
-
-            return result;
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( ArtifactNotFoundException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginNotFoundException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginVersionResolutionException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( InvalidPluginException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginManagerException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginVersionNotFoundException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-    }
+    }           

MOV31 MOV31 MOV43 UPD83 UPD42 MOV44 MOV43 UPD43 MOV43 UPD42 MOV42 MOV60 MOV25 INS60 INS21 INS21 MOV8 MOV42 MOV43 INS59 INS32 INS32 INS21 INS21 INS60 MOV21 MOV41 INS21 INS42 MOV14 UPD42 UPD42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS32 MOV43 INS59 INS32 UPD42 MOV42 INS40 INS42 INS27 UPD42 MOV42 MOV42 MOV42 MOV42 INS42 INS32 INS42 INS42 INS70 INS43 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS44 INS42 MOV8 INS42 UPD42 INS74 INS42 INS42 INS42 INS42 MOV43 INS42 MOV43 MOV43 INS43 UPD42 UPD42 INS42 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL32 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL31 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL45 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31