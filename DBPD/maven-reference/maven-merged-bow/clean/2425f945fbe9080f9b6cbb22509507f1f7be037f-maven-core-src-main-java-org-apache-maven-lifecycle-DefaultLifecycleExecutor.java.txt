o adding a validation method to the lifecycle executor so that I can tell users what is wrong before actually trying
  to execute the lifecycle. Trying to do this validation shows in detail how tangled some of our code is as I need
  to create the dispatcher in order to create the session which is required to make the reactorManager which 
  is required to get the project required to validate the goal name ... yah.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@572214 13f79535-47bb-0310-9956-ffa450edef68

+    
+    public TaskValidationResult isTaskValid( String task, MavenSession session, MavenProject rootProject )
+    {
+        if ( LifecycleUtils.isValidPhaseName( task ) )
+        {
+            return new TaskValidationResult();
+        }
+        else
+        {
+            MojoDescriptor mojo = null;
+            // definitely a CLI goal, can use prefix
+            try
+            {
+                mojo = getMojoDescriptorForDirectInvocation(
+                    task,
+                    session,
+                    rootProject );
+
+                return new TaskValidationResult();
+            }
+            catch ( PluginLoaderException e )
+            {
+                // TODO: shouldn't hit this, investigate using the same resolution logic as
+                // others for plugins in the reactor
+
+                return new TaskValidationResult( task, "Cannot find mojo descriptor for: \'" + task
+                        + "\' - Treating as non-aggregator." );
+            }
+            catch ( LifecycleSpecificationException e )
+            {
+                String message =
+                    "Invalid task '"
+                        + task
+                        + "': you must specify a valid lifecycle phase, or"
+                        + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
+
+                return new TaskValidationResult( task, message );
+
+            }
+            catch ( LifecycleLoaderException e )
+            {
+                String message = "Cannot find plugin to match task '" + task + "'.";
+
+                return new TaskValidationResult( task, message );
+            }
+        }
+    }
-
+
-                    // definitely a CLI goal, can use prefix
+
-                    catch ( PluginLoaderException e )
+                    catch ( Exception e )
-                        // TODO: shouldn't hit this, investigate using the same resolution logic as
-                        // others for plugins in the reactor
-                        getLogger().info(
-                            "Cannot find mojo descriptor for: \'" + task
-                                + "\' - Treating as non-aggregator." );
-
-                        getLogger().debug(
-                            "",
-                            e );
-                    }
-                    catch ( LifecycleSpecificationException e )
-                    {
-                        String message =
-                            "Invalid task '"
-                                + task
-                                + "': you must specify a valid lifecycle phase, or"
-                                + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
-
-                        throw new BuildFailureException(
-                            message,
-                            e );
-                    }
-                    catch ( LifecycleLoaderException e )
-                    {
-                        String message = "Cannot find plugin to match task '" + task + "'.";
-
-                        throw new BuildFailureException(
-                            message,
-                            e );
+                        // Won't happen as we've validated. So we need to change the code so that
+                        // we don't have to do this.

INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS41 INS60 MOV54 INS14 INS43 INS59 INS8 INS12 INS43 INS42 INS42 INS33 MOV21 INS41 MOV44 INS8 INS42 INS7 INS14 INS41 INS41 INS41 INS42 INS32 INS43 INS14 INS14 INS14 INS54 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS42 MOV27 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 MOV8 INS12 INS42 UPD42 UPD42 INS44 INS8 INS43 INS42 INS42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL14 DEL53 DEL14 DEL53