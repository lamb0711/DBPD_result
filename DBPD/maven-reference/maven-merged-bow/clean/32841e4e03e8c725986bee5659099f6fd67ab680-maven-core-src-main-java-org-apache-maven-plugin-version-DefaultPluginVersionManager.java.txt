Fixing standalone maven-core build...fixing metadata merge where lastUpdated == "null" (null-string)...and finally, disabling plugin resolution from referencing the current project, since this will really screw up builds of plugins that are referenced in the plugin lifecycle mapping...like maven-surefire-plugin.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312948 13f79535-47bb-0310-9956-ffa450edef68

+        // NOTE: [jc; 11-Oct-2005] We CANNOT have this type of code in here. It will prevent plugins from building themselves,
+        // if they are part of the lifecycle mapping. For example, try the following:
+        //
+        // 1. Uncomment the remainder of the following code block and rebuild the core jar; put it in the m2 distro
+        // 2. rm -Rf <local-repo>/org/apache/maven/plugins/maven-surefire-plugin
+        // 3. go to <maven>/maven-plugins/maven-surefire-plugin, and try to build it.
+        //
+        // In the above example, the surefire plugin fails to build because the version used for testing is
+        // resolved to the version currently being built...which obviously doesn't exist yet.
+        
-            if ( project.getGroupId().equals( groupId ) && project.getArtifactId().equals( artifactId ) )
-            {
-                version = project.getVersion();
-            }
-            else if ( project.getProjectReferences() != null )
-            {
+//            if ( project.getGroupId().equals( groupId ) && project.getArtifactId().equals( artifactId ) )
+//            {
+//                version = project.getVersion();
+//            }
+//            else if ( project.getProjectReferences() != null )
+//            {
-            }
+//            }
-        project.replaceWithActiveArtifact( artifact );
-
-        if ( artifact.isResolved() )
+        try
-            version = artifact.getVersion();
-        }
-        else
-        {
-            try
+            ResolutionGroup resolutionGroup = artifactMetadataSource.retrieve( artifact, localRepository,
+                                                                               project.getPluginArtifactRepositories() );
+
+            // switching this out with the actual resolved artifact instance, since the MMSource re-creates the pom
+            // artifact.
+            artifact = resolutionGroup.getPomArtifact();
+
+            // make sure this artifact was actually resolved to a file in the repo...
+            if ( artifact.getFile() != null )
-                ResolutionGroup resolutionGroup = artifactMetadataSource.retrieve( artifact, localRepository,
-                                                                                   project.getPluginArtifactRepositories() );
+                MavenProject pluginProject = mavenProjectBuilder.buildFromRepository( artifact, project
+                    .getPluginArtifactRepositories(), localRepository, false );
-                // switching this out with the actual resolved artifact instance, since the MMSource re-creates the pom
-                // artifact.
-                artifact = resolutionGroup.getPomArtifact();
+                boolean pluginValid = true;
-                // make sure this artifact was actually resolved to a file in the repo...
-                if ( artifact.getFile() != null )
+                // if we don't have the required Maven version, then ignore an update
+                if ( pluginProject.getPrerequisites() != null &&
+                    pluginProject.getPrerequisites().getMaven() != null )
-                    MavenProject pluginProject = mavenProjectBuilder.buildFromRepository( artifact, project
-                        .getPluginArtifactRepositories(), localRepository, false );
+                    DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
+                        pluginProject.getPrerequisites().getMaven() );
-                    boolean pluginValid = true;
-
-                    // if we don't have the required Maven version, then ignore an update
-                    if ( pluginProject.getPrerequisites() != null &&
-                        pluginProject.getPrerequisites().getMaven() != null )
+                    if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
-                        DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
-                            pluginProject.getPrerequisites().getMaven() );
-
-                        if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
-                        {
-                            getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
-                                " as it requires Maven version " + requiredVersion );
-                            pluginValid = false;
-                        }
-                    }
-
-                    String artifactVersion = artifact.getVersion();
-
-                    if ( pluginValid && !metaVersionId.equals( artifactVersion ) )
-                    {
-                        version = artifactVersion;
+                        getLogger().info( "Ignoring available plugin update: " + artifact.getVersion() +
+                            " as it requires Maven version " + requiredVersion );
+                        pluginValid = false;
+
+                String artifactVersion = artifact.getVersion();
+
+                if ( pluginValid && !metaVersionId.equals( artifactVersion ) )
+                {
+                    version = artifactVersion;
+                }
-            catch ( ArtifactMetadataRetrievalException e )
-            {
-                getLogger().debug( "Failed to resolve " + metaVersionId + " version", e );
-            }
-            catch ( ProjectBuildingException e )
-            {
-                throw new PluginVersionResolutionException( groupId, artifactId,
-                                                            "Unable to build resolve plugin project information", e );
-            }
-            catch ( IOException e )
-            {
-                throw new PluginVersionResolutionException( groupId, artifactId,
-                                                            "Unable to determine Maven version for comparison", e );
-            }
+        }
+        catch ( ArtifactMetadataRetrievalException e )
+        {
+            getLogger().debug( "Failed to resolve " + metaVersionId + " version", e );
+        }
+        catch ( ProjectBuildingException e )
+        {
+            throw new PluginVersionResolutionException( groupId, artifactId,
+                                                        "Unable to build resolve plugin project information", e );
+        }
+        catch ( IOException e )
+        {
+            throw new PluginVersionResolutionException( groupId, artifactId,
+                                                        "Unable to determine Maven version for comparison", e );

MOV8 MOV25 MOV60 MOV60 MOV41 MOV27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8