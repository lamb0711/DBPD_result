o roll up all the plugin manager capability into one class. having a manager, a component discoverer, and component discovery listener is too complicated.
o using the a looking to set the discoverer and discovery listener. in plexus this can be rolled into one extender



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@762142 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.io.Reader;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashSet;
+import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;
+import org.codehaus.plexus.component.discovery.ComponentDiscoverer;
+import org.codehaus.plexus.component.discovery.ComponentDiscovererManager;
+import org.codehaus.plexus.component.discovery.ComponentDiscoveryEvent;
+import org.codehaus.plexus.component.discovery.ComponentDiscoveryListener;
+import org.codehaus.plexus.component.repository.ComponentDescriptor;
+import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.context.ContextMapAdapter;
+import org.codehaus.plexus.util.IOUtil;
+import org.codehaus.plexus.util.InterpolationFilterReader;
+import org.codehaus.plexus.util.ReaderFactory;
+//TODO: get plugin groups
+//TODO: merge the plugin collector into the plugin manager
+//TODO: merge the plugin discovery listener into the plugin manager
-    implements PluginManager
+    implements PluginManager, ComponentDiscoverer, ComponentDiscoveryListener
-    protected MavenPluginCollector pluginCollector;
-
-    @Requirement
+    private Map<String, PluginDescriptor> pluginDescriptors;    
+    
+    public DefaultPluginManager()
+    {
+        System.out.println( "hello!!!!");
+        pluginDescriptors = new HashMap<String,PluginDescriptor>();        
+    }
+
+        //Use the plugin managers capabilities to get information to augement the request
+        
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
+        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
+        System.out.println( "XXX plugin: " + plugin );
+        
-        {         
-            resolvePluginVersion( plugin, project, session );
-                                     
+        {                                              
-        catch ( PluginVersionResolutionException e )
-        {
-            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
-        }
-        catch ( PluginManagerException e )
+        catch ( PluginVersionResolutionException e )
+        {
+            throw new PluginLoaderException( plugin, "Failed to load plugin. Reason: " + e.getMessage(), e );
+        }
+        catch ( PluginContainerException e )
-        throws ArtifactNotFoundException, ArtifactResolutionException, PluginManagerException, InvalidPluginException, PluginVersionResolutionException
+        throws ArtifactNotFoundException, ArtifactResolutionException, InvalidPluginException, PluginVersionResolutionException, PluginContainerException, PluginVersionNotFoundException
+        resolvePluginVersion( plugin, project, session );
+        
+        System.out.println( "plugin: " + pluginArtifact );
+        
-        PluginDescriptor pluginDescriptor = pluginCollector.getPluginDescriptor( plugin );
+        PluginDescriptor pluginDescriptor = getPluginDescriptor( plugin );
+        
+        // We just need to keep track of the realm, if we need to augment we will wrap the realm
-                    try
+                        
+                    if ( ( child != null ) && ( child.getValue() != null ) )
+                        warnOfDeprecation = true;
+                    }
+                    else if ( param.getAlias() != null )
+                    {
+                        child = extractedMojoConfiguration.getChild( param.getAlias() );
-                        else if ( param.getAlias() != null )
-                        {
-                            child = extractedMojoConfiguration.getChild( param.getAlias() );
-                            if ( ( child != null ) && ( child.getValue() != null ) )
-                            {
-                                warnOfDeprecation = true;
-                            }
-                        }
-                    }
-                    catch ( PlexusConfigurationException e )
-                    {
-                        // forget it, this is just for deprecation checking, after all...
-            else
-            {
-                // TODO: I defy anyone to find these messages in the '-X' output! Do we need a new log level?
-                // ideally, this would be elevated above the true debug output, but below the default INFO level...
-                // [BP] (2004-07-18): need to understand the context more but would prefer this could be either WARN or
-                // removed - shouldn't need DEBUG to diagnose a problem most of the time.
-                logger.debug( "*** WARNING: Configuration \'" + child.getName() + "\' is not used in goal \'" + mojoDescriptor.getFullGoalName() + "; this may indicate a typo... ***" );
-            }
-    public void resolvePluginVersion( Plugin plugin, MavenProject project, MavenSession session )
-        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException
+    public void resolvePluginVersion( Plugin plugin, MavenProject project, MavenSession session ) 
+        throws PluginVersionNotFoundException
-        // final pass...retrieve the version for RELEASE and also set that resolved version as the <useVersion/>
-        // in settings.xml.
+ 
+    // ----------------------------------------------------------------------
+    // Component Discovery
+    // ----------------------------------------------------------------------
+    private PluginDescriptorBuilder builder = new PluginDescriptorBuilder();
+
+    public String getComponentDescriptorLocation()
+    {
+        return "META-INF/maven/plugin.xml";
+    }
+
+    public ComponentSetDescriptor createComponentDescriptors( Reader componentDescriptorConfiguration, String source )
+        throws PlexusConfigurationException
+    {
+        return builder.build( componentDescriptorConfiguration, source );
+    }    
+
+    public List<ComponentSetDescriptor> findComponents( Context context, ClassRealm realm )
+        throws PlexusConfigurationException
+    {
+        System.out.println( "realm: " + realm );
+        
+        List<ComponentSetDescriptor> componentSetDescriptors = new ArrayList<ComponentSetDescriptor>();
+
+        Enumeration<URL> resources;
+        try
+        {
+            // We don't always want to scan parent realms. For plexus
+            // testcase, most components are in the root classloader so that needs to be scanned,
+            // but for child realms, we don't.
+            if ( realm.getParentRealm() != null )
+            {
+                resources = realm.findRealmResources( getComponentDescriptorLocation() );
+            }
+            else
+            {
+                resources = realm.findResources( getComponentDescriptorLocation() );
+            }
+        }
+        catch ( IOException e )
+        {
+            throw new PlexusConfigurationException( "Unable to retrieve resources for: " + getComponentDescriptorLocation() + " in class realm: " + realm.getId() );
+        }
+
+        for ( URL url : Collections.list( resources ) )
+        {
+            Reader reader = null;
+
+            try
+            {
+                URLConnection conn = url.openConnection();
+
+                conn.setUseCaches( false );
+
+                conn.connect();
+
+                reader = ReaderFactory.newXmlReader( conn.getInputStream() );
+
+                InterpolationFilterReader interpolationFilterReader = new InterpolationFilterReader( reader, new ContextMapAdapter( context ) );
+
+                ComponentSetDescriptor componentSetDescriptor = createComponentDescriptors( interpolationFilterReader, url.toString() );
+
+                if ( componentSetDescriptor.getComponents() != null )
+                {
+                    for ( ComponentDescriptor<?> cd : componentSetDescriptor.getComponents() )
+                    {
+                        cd.setComponentSetDescriptor( componentSetDescriptor );
+                        cd.setRealm( realm );
+                    }
+                }
+
+                componentSetDescriptors.add( componentSetDescriptor );
+
+                // Fire the event
+                ComponentDiscoveryEvent event = new ComponentDiscoveryEvent( componentSetDescriptor );
+
+                manager.fireComponentDiscoveryEvent( event );
+            }
+            catch ( IOException ex )
+            {
+                throw new PlexusConfigurationException( "Error reading configuration " + url, ex );
+            }
+            finally
+            {
+                IOUtil.close( reader );
+            }
+        }
+
+        return componentSetDescriptors;
+    }
+
+    public void setManager( ComponentDiscovererManager manager )
+    {
+        this.manager = manager;
+    }
+    
+    // ----------------------------------------------------------------------
+    // Component Discovery Listener
+    // ----------------------------------------------------------------------
+    
+    private Set pluginsInProcess = new HashSet();
+
+    private Map pluginIdsByPrefix = new HashMap();
+    
+    private ComponentDiscovererManager manager;
+    
+    public void componentDiscovered( ComponentDiscoveryEvent event )
+    {        
+        ComponentSetDescriptor componentSetDescriptor = event.getComponentSetDescriptor();
+
+        if ( componentSetDescriptor instanceof PluginDescriptor )
+        {
+            PluginDescriptor pluginDescriptor = (PluginDescriptor) componentSetDescriptor;            
+
+            String key = constructPluginKey( pluginDescriptor );
+            
+            if ( !pluginsInProcess.contains( key ) )
+            {
+                pluginsInProcess.add( key );
+
+                pluginDescriptors.put( key, pluginDescriptor );                
+            }
+        }
+    }
+
+    public String getId()
+    {
+        return "maven-plugin-collector";
+    }
+
+    public PluginDescriptor getPluginDescriptor( Plugin plugin )
+    {
+        return pluginDescriptors.get( constructPluginKey( plugin ) );
+    }
+
+    public Collection<PluginDescriptor> getPluginDescriptors()
+    {
+        return pluginDescriptors.values();    
+    }
+
+    private String constructPluginKey( Plugin plugin )
+    {
+        String version = ArtifactUtils.toSnapshotVersion( plugin.getVersion() );
+        return plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + version;
+    }
+
+    private String constructPluginKey( PluginDescriptor pluginDescriptor )
+    {
+        String version = ArtifactUtils.toSnapshotVersion( pluginDescriptor.getVersion() );
+        return pluginDescriptor.getGroupId() + ":" + pluginDescriptor.getArtifactId() + ":" + version;
+    }
+
+    public boolean isPluginInstalled( Plugin plugin )
+    {
+        String key = constructPluginKey( plugin );
+        return pluginDescriptors.containsKey( key );
+    }
+
+    public Set<PluginDescriptor> getPluginDescriptorsForPrefix( String prefix )
+    {
+        Set result = new HashSet();
+        for ( Iterator it = pluginDescriptors.values().iterator(); it.hasNext(); )
+        {
+            PluginDescriptor pd = (PluginDescriptor) it.next();
+            if ( pd.getGoalPrefix().equals( prefix ) )
+            {
+                result.add( pd );
+            }
+        }
+
+        return result;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS43 INS23 INS31 MOV43 INS23 INS31 INS31 INS31 INS31 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS83 INS74 INS59 INS83 INS42 INS8 UPD43 INS43 MOV8 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 UPD83 MOV83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS21 INS21 INS21 MOV12 UPD42 INS42 MOV21 INS21 MOV25 MOV60 INS42 INS42 INS14 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS54 INS70 INS41 INS43 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS60 INS25 INS42 INS41 INS42 INS43 INS42 INS41 INS43 INS43 INS41 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS60 INS41 INS43 INS42 INS60 INS41 INS43 INS43 INS43 INS42 INS60 INS24 INS41 INS42 INS42 INS42 INS32 INS7 INS32 INS32 MOV27 INS8 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS74 INS59 INS74 INS59 INS8 INS12 INS44 INS32 INS8 INS42 INS42 INS7 INS43 INS43 INS42 INS43 INS59 INS62 INS8 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS42 INS43 INS59 INS27 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS42 INS40 INS42 INS45 INS42 INS14 INS40 INS42 INS27 INS40 INS42 INS27 INS70 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS25 INS44 INS8 INS43 INS42 INS42 INS42 INS42 INS60 INS54 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS25 INS74 INS45 INS42 UPD43 INS45 INS42 MOV44 INS42 MOV8 INS45 INS42 INS42 INS42 INS74 INS42 INS42 INS27 INS8 INS8 INS43 INS42 INS53 INS42 INS43 INS59 INS8 INS12 INS8 INS52 INS42 INS42 INS42 UPD42 MOV42 INS43 INS59 INS43 INS59 INS38 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS43 INS43 INS43 UPD42 INS43 INS43 INS32 INS33 INS21 INS21 INS42 INS14 INS42 INS42 INS33 INS60 INS21 INS21 INS21 INS60 INS60 INS25 INS21 INS60 INS21 INS44 INS8 INS21 INS42 UPD42 MOV42 INS11 INS42 INS42 INS32 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS32 INS42 INS42 INS21 INS42 INS42 INS42 MOV27 MOV8 INS42 INS42 INS42 INS42 INS7 INS7 MOV43 INS27 INS43 INS59 INS32 INS32 INS7 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS32 MOV60 MOV60 INS25 INS42 INS32 INS42 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS33 INS70 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS44 INS32 INS8 INS43 INS42 INS43 INS27 INS42 MOV60 MOV21 INS25 MOV21 MOV21 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS45 INS42 MOV27 MOV8 INS42 INS43 INS76 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL78 DEL43 DEL59 DEL23 DEL42 DEL42 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43