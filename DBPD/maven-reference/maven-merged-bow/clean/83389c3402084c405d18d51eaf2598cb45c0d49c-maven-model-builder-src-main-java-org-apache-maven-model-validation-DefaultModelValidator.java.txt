[MNG-4648] NullPointerException thrown from DefaultPluginRealmCache#pluginHashCode method if project-level plugin dependency misses version


git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@938410 13f79535-47bb-0310-9956-ffa450edef68

-                    for ( Dependency d : p.getDependencies() )
-                    {
-                        validateEnum( "build.plugins.plugin[" + p.getKey() + "].dependencies.dependency.scope",
-                                      problems, errOn30, d.getScope(), d.getManagementKey(),
-                                      "compile", "runtime", "system" );
-                    }
+                    validateEffectivePluginDependencies( problems, p, request );
-                                                boolean managed, ModelBuildingRequest request )
+                                                boolean management, ModelBuildingRequest request )
-        String prefix = managed ? "dependencyManagement.dependencies.dependency." : "dependencies.dependency.";
+        String prefix = management ? "dependencyManagement.dependencies.dependency." : "dependencies.dependency.";
-            validateId( prefix + "artifactId", problems, d.getArtifactId(), d.getManagementKey() );
-
-            validateId( prefix + "groupId", problems, d.getGroupId(), d.getManagementKey() );
-
-            if ( !managed )
-            {
-                validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, d.getType(), d.getManagementKey() );
-
-                validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, d.getVersion(),
-                                        d.getManagementKey() );
-            }
-
-            if ( "system".equals( d.getScope() ) )
-            {
-                String systemPath = d.getSystemPath();
-
-                if ( StringUtils.isEmpty( systemPath ) )
-                {
-                    addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "is missing." );
-                }
-                else
-                {
-                    File sysFile = new File( systemPath );
-                    if ( !sysFile.isAbsolute() )
-                    {
-                        addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(),
-                                      "must specify an absolute path but is " + systemPath );
-                    }
-                    else if ( !sysFile.isFile() )
-                    {
-                        String msg = "refers to a non-existing file " + sysFile.getAbsolutePath();
-                        systemPath = systemPath.replace( '/', File.separatorChar ).replace( '\\', File.separatorChar );
-                        String jdkHome =
-                            request.getSystemProperties().getProperty( "java.home", "" ) + File.separator + "..";
-                        if ( systemPath.startsWith( jdkHome ) )
-                        {
-                            msg += ". Please verify that you run Maven using a JDK and not just a JRE.";
-                        }
-                        addViolation( problems, Severity.WARNING, prefix + "systemPath", d.getManagementKey(), msg );
-                    }
-                }
-            }
-            else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )
-            {
-                addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "must be omitted."
-                    + " This field may only be specified for a dependency with system scope." );
-            }
+            validateEffectiveDependency( problems, d, management, prefix, request );
-                if ( !managed )
+                if ( !management )
+    private void validateEffectivePluginDependencies( ModelProblemCollector problems, Plugin plugin,
+                                                      ModelBuildingRequest request )
+    {
+        List<Dependency> dependencies = plugin.getDependencies();
+
+        if ( !dependencies.isEmpty() )
+        {
+            String prefix = "build.plugins.plugin[" + plugin.getKey() + "].dependencies.dependency.";
+
+            Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );
+
+            for ( Dependency d : dependencies )
+            {
+                validateEffectiveDependency( problems, d, false, prefix, request );
+
+                validateVersion( prefix + "version", problems, errOn30, d.getVersion(), d.getManagementKey() );
+
+                validateEnum( prefix + "scope", problems, errOn30, d.getScope(), d.getManagementKey(), "compile",
+                              "runtime", "system" );
+            }
+        }
+    }
+
+    private void validateEffectiveDependency( ModelProblemCollector problems, Dependency d, boolean management,
+                                              String prefix, ModelBuildingRequest request )
+    {
+        validateId( prefix + "artifactId", problems, d.getArtifactId(), d.getManagementKey() );
+
+        validateId( prefix + "groupId", problems, d.getGroupId(), d.getManagementKey() );
+
+        if ( !management )
+        {
+            validateStringNotEmpty( prefix + "type", problems, Severity.ERROR, d.getType(), d.getManagementKey() );
+
+            validateStringNotEmpty( prefix + "version", problems, Severity.ERROR, d.getVersion(), d.getManagementKey() );
+        }
+
+        if ( "system".equals( d.getScope() ) )
+        {
+            String systemPath = d.getSystemPath();
+
+            if ( StringUtils.isEmpty( systemPath ) )
+            {
+                addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "is missing." );
+            }
+            else
+            {
+                File sysFile = new File( systemPath );
+                if ( !sysFile.isAbsolute() )
+                {
+                    addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(),
+                                  "must specify an absolute path but is " + systemPath );
+                }
+                else if ( !sysFile.isFile() )
+                {
+                    String msg = "refers to a non-existing file " + sysFile.getAbsolutePath();
+                    systemPath = systemPath.replace( '/', File.separatorChar ).replace( '\\', File.separatorChar );
+                    String jdkHome =
+                        request.getSystemProperties().getProperty( "java.home", "" ) + File.separator + "..";
+                    if ( systemPath.startsWith( jdkHome ) )
+                    {
+                        msg += ". Please verify that you run Maven using a JDK and not just a JRE.";
+                    }
+                    addViolation( problems, Severity.WARNING, prefix + "systemPath", d.getManagementKey(), msg );
+                }
+            }
+        }
+        else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )
+        {
+            addViolation( problems, Severity.ERROR, prefix + "systemPath", d.getManagementKey(), "must be omitted."
+                + " This field may only be specified for a dependency with system scope." );
+        }
+    }
+

INS31 INS31 INS83 INS39 INS42 INS44 MOV44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD42 MOV44 INS44 MOV8 INS43 INS42 INS39 INS42 INS43 INS42 MOV60 INS60 INS70 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 UPD42 INS43 INS42 INS42 INS42 MOV43 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS74 INS59 INS38 INS8 INS42 INS42 INS16 INS43 INS42 INS21 MOV25 INS43 INS43 INS42 INS32 INS32 INS60 INS60 INS70 UPD42 INS42 INS45 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 MOV44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS21 INS21 INS21 INS45 INS32 INS45 INS42 INS42 INS40 INS32 INS32 INS32 MOV21 UPD42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS27 INS42 INS42 MOV32 MOV32 INS45 INS45 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 UPD42 MOV42 UPD42 UPD42 DEL45 DEL42 DEL32 DEL45 DEL27 DEL45 DEL45 DEL45 DEL42 DEL42 DEL32 DEL8 DEL70 DEL42 DEL42 DEL45 DEL45 DEL16 DEL59 DEL60 DEL42 DEL70 DEL8