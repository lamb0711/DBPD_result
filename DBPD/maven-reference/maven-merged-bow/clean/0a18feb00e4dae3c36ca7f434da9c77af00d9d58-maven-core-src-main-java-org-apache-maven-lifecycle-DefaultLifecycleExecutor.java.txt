o the dispatcher is available in the session so remove the dispatcher from the signature of the lifecycle executor, now the
  lifecycle execution only requires a session.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@757426 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.monitor.event.EventDispatcher;
-import org.apache.maven.plugin.InvalidPluginException;
-    /**
-     * Execute a task. Each task may be a phase in the lifecycle or the execution of a mojo.
-     * 
-     * @param session
-     * @param rm
-     * @param dispatcher
-     */
-    public void execute( MavenSession session, ReactorManager rm, EventDispatcher dispatcher )
+    public void execute( MavenSession session )
-        MavenProject rootProject = rm.getTopLevelProject();
+        MavenProject rootProject = session.getReactorManager().getTopLevelProject();
-        executeTaskSegments( goals, rm, session, rootProject, dispatcher );
+        executeTaskSegments( goals, session, rootProject );
-    public static boolean isValidPhaseName( final String phaseName )
-    {
-        return true;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public TaskValidationResult isTaskValid( String task, MavenSession session, MavenProject rootProject )
-    {
-        //jvz: have to investigate plugins that are run without a root project or using Maven in reactor mode. Looks like we
-        // were never validating these anyway if you look in the execution code.
-
-        if ( rootProject != null )
-        {
-            if ( !isValidPhaseName( task ) )
-            {
-                // definitely a CLI goal, can use prefix
-                try
-                {
-                    getMojoDescriptorForDirectInvocation( task, session, rootProject );
-
-                    return new TaskValidationResult();
-                }
-                catch ( PluginLoaderException e )
-                {
-                    // TODO: shouldn't hit this, investigate using the same resolution logic as
-                    // others for plugins in the reactor
-
-                    return new TaskValidationResult( task, "Cannot find mojo descriptor for: \'" + task + "\' - Treating as non-aggregator.", e );
-                }
-                catch ( LifecycleExecutionException e )
-                {
-                    String message = "Invalid task '" + task + "': you must specify a valid lifecycle phase, or"
-                        + " a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal";
-
-                    return new TaskValidationResult( task, message, e );
-                }
-                catch ( InvalidPluginException e )
-                {
-                    return new TaskValidationResult( task, e.getMessage(), e );
-                }
-            }
-        }
-
-        return new TaskValidationResult();
-    }
-
-    /**
-     * Retrieve the {@link MojoDescriptor} that corresponds to a given direct mojo invocation. This
-     * is used during the fail-fast method isTaskValid(..), and also during task-segmentation, to
-     * allow the lifecycle executor to determine whether the mojo is an aggregator.
-     * 
-     * @throws PluginLoaderException
-     */
-    private MojoDescriptor getMojoDescriptorForDirectInvocation( String task, MavenSession session, MavenProject project )
-        throws InvalidPluginException, PluginLoaderException, LifecycleExecutionException
-    {
-        MojoDescriptor descriptor;
-
-        try
-        {
-            descriptor = getMojoDescriptor( task, session, project );
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            throw new LifecycleExecutionException( "Cannot find the specified goal.", e );
-        }
-
-        return descriptor;
-    }
-
-    private void executeTaskSegments( List<String> goals, ReactorManager rm, MavenSession session, MavenProject rootProject, EventDispatcher dispatcher )
+    private void executeTaskSegments( List<String> goals, MavenSession session, MavenProject rootProject )
-            if ( !rm.isBlackListed( currentProject ) )
+            if ( !session.getReactorManager().isBlackListed( currentProject ) )
-                        dispatcher.dispatchStart( event, target );
-                        executeGoalAndHandleFailures( goal, session, currentProject, dispatcher, event, rm, buildStartTime, target );
-                        dispatcher.dispatchEnd( event, target );
+                        session.getEventDispatcher().dispatchStart( event, target );
+                        executeGoalAndHandleFailures( goal, session, currentProject, event, session.getReactorManager(), buildStartTime, target );
+                        session.getEventDispatcher().dispatchEnd( event, target );
-                rm.registerBuildSuccess( currentProject, System.currentTimeMillis() - buildStartTime );
+                session.getReactorManager().registerBuildSuccess( currentProject, System.currentTimeMillis() - buildStartTime );
-    private void executeGoalAndHandleFailures( String task, MavenSession session, MavenProject project, EventDispatcher dispatcher, String event, ReactorManager rm, long buildStartTime, String target )
+    private void executeGoalAndHandleFailures( String task, MavenSession session, MavenProject project, String event, ReactorManager rm, long buildStartTime, String target )
-            dispatcher.dispatchError( event, target, e );
+            session.getEventDispatcher().dispatchError( event, target, e );
-            dispatcher.dispatchError( event, target, e );
+            session.getEventDispatcher().dispatchError( event, target, e );

MOV12 MOV44 INS32 MOV43 UPD42 MOV42 INS42 INS32 INS32 INS32 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL31 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL14 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44