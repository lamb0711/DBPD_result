isolate path generation in Repository class


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163753 13f79535-47bb-0310-9956-ffa450edef68

+import model.Repository;
+import java.io.IOException;
-    private String repoLocal;
-
-    private List coreDeps;
-
-        ModelReader reader = new ModelReader( downloader );
-
-        repoLocal = mavenRepoLocal;
+
+        File repoLocalFile = new File( mavenRepoLocal );
+        repoLocalFile.mkdirs();
+
+        if ( !repoLocalFile.canWrite() )
+        {
+            System.err.println( "Can't write to " + mavenRepoLocal );
+
+            System.exit( 1 );
+        }
+        Repository localRepository = new Repository( mavenRepoLocal, Repository.LAYOUT_LEGACY );
+
+        ModelReader reader = new ModelReader( localRepository );
+
-            downloader = new ArtifactDownloader( repoLocal, reader.getRemoteRepositories() );
+            downloader = new ArtifactDownloader( localRepository, reader.getRemoteRepositories() );
-        reader = new ModelReader( downloader );
+        reader = new ModelReader( localRepository );
-        ClassLoader bootstrapClassLoader = createClassloaderFromDependencies( reader.getDependencies(), null );
+        ClassLoader bootstrapClassLoader = createClassloaderFromDependencies( reader.getDependencies(), null,
+                                                                              localRepository );
-        reader = new ModelReader( downloader );
+        reader = new ModelReader( localRepository );
-        reader = new ModelReader( downloader );
+        reader = new ModelReader( localRepository );
-        installPomFile( repoLocal, new File( basedir, "pom.xml" ) );
+        installPomFile( localRepository, new File( basedir, "pom.xml" ) );
-        installPomFile( repoLocal, new File( basedir, "maven-plugins/pom.xml" ) );
+        installPomFile( localRepository, new File( basedir, "maven-plugins/pom.xml" ) );
-        installPomFile( repoLocal, new File( basedir, "maven-plugin-tools/pom.xml" ) );
+        installPomFile( localRepository, new File( basedir, "maven-plugin-tools/pom.xml" ) );
-        installPomFile( repoLocal, new File( basedir, "maven-script/pom.xml" ) );
+        installPomFile( localRepository, new File( basedir, "maven-script/pom.xml" ) );
-        installPomFile( repoLocal, new File( basedir, "maven-core-it-support/pom.xml" ) );
+        installPomFile( localRepository, new File( basedir, "maven-core-it-support/pom.xml" ) );
+
+        List coreDeps = null;
+        Dependency corePom = null;
-            reader = buildProject( directory, builds[i], bootstrapClassLoader, surefireDependencies );
+            reader = buildProject( directory, builds[i], bootstrapClassLoader, surefireDependencies, localRepository );
+                corePom = new Dependency( reader.getGroupId(), reader.getArtifactId(), reader.getVersion(),
+                                          reader.getPackaging() );
-        reader = new ModelReader( downloader );
+        reader = new ModelReader( localRepository );
-        dependencies.add( new Dependency( reader.getGroupId(), reader.getArtifactId(), reader.getVersion() ) );
-        IsolatedClassLoader cl = createClassloaderFromDependencies( dependencies, bootstrapClassLoader );
+        dependencies.add(
+            new Dependency( reader.getGroupId(), reader.getArtifactId(), reader.getVersion(), reader.getPackaging() ) );
+        IsolatedClassLoader cl = createClassloaderFromDependencies( dependencies, bootstrapClassLoader,
+                                                                    localRepository );
-            reader = buildProject( directory, pluginBuilds[i], cl, surefireDependencies );
+            reader = buildProject( directory, pluginBuilds[i], cl, surefireDependencies, localRepository );
-            File source = new File( repoLocal, d.getRepositoryPath() );
+            File source = localRepository.getArtifactFile( d );
-
-        // TODO: create a dependency object
-        FileUtils.copyFileToDirectory( new File( repoLocal, "org.apache.maven/jars/maven-core-2.0-SNAPSHOT.jar" ), lib );
+        FileUtils.copyFileToDirectory( localRepository.getArtifactFile( corePom ), lib );
-    public ModelReader buildProject( String basedir, String projectId, ClassLoader classLoader,
-                                     List surefireDependencies )
+    private ModelReader buildProject( String basedir, String projectId, ClassLoader classLoader,
+                                      List surefireDependencies, Repository localRepository )
-        ModelReader reader = new ModelReader( downloader );
+        ModelReader reader = new ModelReader( localRepository );
-            compile( reader.getDependencies(), sources, classes, null, generatedSources, SCOPE_COMPILE );
+            compile( reader.getDependencies(), sources, classes, null, generatedSources, SCOPE_COMPILE,
+                     localRepository );
-            compile( reader.getDependencies(), sources, classes, null, null, SCOPE_COMPILE );
+            compile( reader.getDependencies(), sources, classes, null, null, SCOPE_COMPILE, localRepository );
-                                      new File( basedir, "pom.xml" ).getAbsolutePath(), classLoader );
+                                      new File( basedir, "pom.xml" ).getAbsolutePath(), classLoader, localRepository );
-        compile( testDependencies, testSources, testClasses, classes, null, SCOPE_TEST );
+        compile( testDependencies, testSources, testClasses, classes, null, SCOPE_TEST, localRepository );
-        runTests( basedir, classes, testClasses, reader, surefireDependencies );
+        runTests( basedir, classes, testClasses, reader, surefireDependencies, localRepository );
-        installPom( basedir, repoLocal, reader );
+        installPom( basedir, localRepository, reader );
-            install( basedir, repoLocal, reader, "maven-plugin" );
+            install( basedir, localRepository, reader, "maven-plugin" );
-            install( basedir, repoLocal, reader, "jar" );
+            install( basedir, localRepository, reader, "jar" );
-    private void generatePluginDescriptor( String sourceDirectory, String outputDirectory, String pom, ClassLoader cl )
+    private void generatePluginDescriptor( String sourceDirectory, String outputDirectory, String pom, ClassLoader cl,
+                                           Repository localRepository )
-        String[] args = {"descriptor", sourceDirectory, outputDirectory, pom, repoLocal};
+        // Can pluggy really cope with the layout?
+        String[] args = {"descriptor", sourceDirectory, outputDirectory, pom, localRepository.getBasedir()};
-    private IsolatedClassLoader createClassloaderFromDependencies( List dependencies, ClassLoader parent )
+    private IsolatedClassLoader createClassloaderFromDependencies( List dependencies, ClassLoader parent,
+                                                                   Repository localRepository )
-            File f = new File( repoLocal, dependency.getRepositoryPath() );
+            File f = localRepository.getArtifactFile( dependency );
-    private void installPomFile( String repoLocal, File pomIn )
+    private void installPomFile( Repository localRepository, File pomIn )
-        ModelReader reader = new ModelReader( downloader );
+        ModelReader reader = new ModelReader( localRepository );
-        String artifactId = reader.getArtifactId();
-
-        String version = reader.getVersion();
-
-        String groupId = reader.getGroupId();
-
-        File pom = new File( repoLocal, "/" + groupId + "/poms/" + artifactId + "-" + version + ".pom" );
-
-        System.out.println( "Installing POM: " + pom );
-
-        FileUtils.copyFile( pomIn, pom );
+        installPomFile( reader, localRepository, pomIn );
-    private void installPom( String basedir, String repoLocal, ModelReader reader )
+    private void installPom( String basedir, Repository localRepository, ModelReader reader )
+        installPomFile( reader, localRepository, new File( basedir, "pom.xml" ) );
+
+    }
+
+    private void installPomFile( ModelReader reader, Repository localRepository, File source )
+        throws IOException
+    {
-        File pom = new File( repoLocal, "/" + groupId + "/poms/" + artifactId + "-" + version + ".pom" );
+        File pom = localRepository.getArtifactFile( groupId, artifactId, version, "pom" );
-        FileUtils.copyFile( new File( basedir, "pom.xml" ), pom );
+        FileUtils.copyFile( source, pom );
-    private void install( String basedir, String repoLocal, ModelReader reader, String type )
+    private void install( String basedir, Repository localRepository, ModelReader reader, String type )
-        File file = new File( repoLocal, "/" + groupId + "/" + type + "s/" + finalName + ".jar" );
+        File file = localRepository.getArtifactFile( groupId, artifactId, version, type );
-        FileUtils.copyFile( new File( basedir, BUILD_DIR + "/" + finalName + ".jar" ), file );
-
-            File metadata = new File( repoLocal, "/" + groupId + "/poms/" + finalName + ".version.txt" );
+            File metadata = localRepository.getMetadataFile( groupId, artifactId, version, type,
+                                                             finalName + ".version.txt" );
+
+        FileUtils.copyFile( new File( basedir, BUILD_DIR + "/" + finalName + ".jar" ), file );
+
-                           List surefireDependencies )
+                           List surefireDependencies, Repository localRepository )
-        List classpath = classpath( depList, null, SCOPE_TEST );
+        List classpath = classpath( depList, null, SCOPE_TEST, localRepository );
-    private List classpath( List dependencies, String extraClasspath, String scope )
+    private List classpath( List dependencies, String extraClasspath, String scope, Repository localRepository )
-            String element = repoLocal + "/" + d.getRepositoryPath();
+            String element = localRepository.getArtifactFile( d ).getAbsolutePath();
-                          String generatedSources, String scope )
+                          String generatedSources, String scope, Repository localRepository )
-            compilerConfiguration.setClasspathEntries( classpath( dependencies, extraClasspath, scope ) );
+            compilerConfiguration.setClasspathEntries(
+                classpath( dependencies, extraClasspath, scope, localRepository ) );

INS26 INS26 INS40 INS40 INS31 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 UPD83 INS44 INS44 INS44 INS83 INS39 INS42 MOV44 INS44 MOV44 MOV43 INS8 UPD42 INS44 INS44 INS43 MOV21 INS44 INS44 INS44 INS21 INS25 INS60 INS60 INS60 INS60 INS43 INS42 INS43 INS42 INS43 INS42 UPD43 UPD42 INS43 INS42 MOV21 INS43 INS42 UPD43 UPD42 MOV43 INS42 INS42 INS21 UPD43 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 MOV43 INS32 INS38 INS8 INS43 INS59 MOV43 INS59 MOV43 INS59 INS43 INS59 INS42 MOV43 INS42 INS42 UPD42 MOV43 UPD42 MOV42 MOV14 INS42 UPD42 MOV43 INS32 UPD42 MOV43 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 MOV21 INS21 INS42 INS42 INS14 INS42 MOV14 INS14 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS33 INS42 INS42 INS33 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS32 MOV43 UPD42 INS42 INS42 INS32 INS32 INS43 INS42 INS40 UPD42 UPD42 INS42 UPD42 MOV43 INS42 UPD42 INS32 INS42 MOV43 INS42 INS42 INS42 MOV43 UPD42 INS32 MOV43 MOV43 UPD42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS34 INS42 INS21 INS42 INS42 INS32 MOV32 INS42 MOV32 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS32 INS32 INS45 INS42 UPD42 INS42 INS7 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 UPD42 MOV42 INS42 INS42 INS14 MOV42 MOV45 INS42 INS42 MOV42 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL7 DEL42 DEL42 DEL32 DEL14 DEL42 DEL45 DEL14 DEL42 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL59 DEL60 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL42 DEL45 DEL32 DEL27