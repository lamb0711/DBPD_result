o Removed GoalDecorationPhase, since goal decoration is now a part of the model
o Removed PluginDownloadPhase, since plugin resolution/download has to be a part of the prereq and pre/postGoal resolution, too
o Changed DefaultMaven to execute the session lifecycle, and the component wiring to likewise wire the DefaultMaven with a session lifecycle manager
o Removed the org.apache.maven.decoration package and its contents, since this is all in the model now
o Fixed the GoalResolutionPhase to verify each goal's plugin in turn as it resolves prereqs, preGoals and postGoals
o Fixed the GoalResolutionPhaseTest to work with the new resolution model
o Added a new createGoalExecutionContext to the MavenTestCase base class, to allow me to inject a MavenProject directly rather than a pom file
o Fixed the MavenLifecycleManagerTest to only expect 4 lifecycle phases, now than the plugin resolution and goal decoration phases are obsoleted
o All builds on local machine, but will depend on plexus-0.17.jar/pom and plexus-artifact-container-1.0-alpha-1.jar/pom to build on beaver
o I uploaded plexus-artifact-container-1.0-alpha-1.jar to ${plexus.home}/dist, but cannot upload POMs due to priveleges problem in poms dir.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163007 13f79535-47bb-0310-9956-ffa450edef68

- * Copyright 2001-2004 The Apache Software Foundation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Copyright 2001-2004 The Apache Software Foundation. Licensed under the Apache
+ * License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
+ * or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the specific language
+ * governing permissions and limitations under the License.
+import org.apache.maven.lifecycle.session.MavenSessionPhaseManager;
-    private MavenGoalPhaseManager lifecycleManager;
+    private MavenSessionPhaseManager lifecycleManager;
-    public ExecutionResponse execute( List goals )
-        throws GoalNotFoundException
+    public ExecutionResponse execute( List goals ) throws GoalNotFoundException
-    public ExecutionResponse execute( File projectFile, List goals )
-        throws ProjectBuildingException, GoalNotFoundException
+    public ExecutionResponse execute( File projectFile, List goals ) throws ProjectBuildingException,
+        GoalNotFoundException
-    public ExecutionResponse execute( MavenProject project, List goals )
-        throws GoalNotFoundException
+    public ExecutionResponse execute( MavenProject project, List goals ) throws GoalNotFoundException
-        MavenSession session = new MavenSession( container,
-                                                 pluginManager,
-                                                 project,
-                                                 getLocalRepository(),
-                                                 goals );
+        MavenSession session = new MavenSession( container, pluginManager, project, getLocalRepository(), goals );
-        for ( Iterator iterator = goals.iterator(); iterator.hasNext(); )
+        try
-            String goal = (String) iterator.next();
+            lifecycleManager.execute( session );
+        }
+        catch ( Exception e )
+        {
+            response.setException( e );
-            MavenGoalExecutionContext context;
-
-            try
+            if ( logResults )
-                context = new MavenGoalExecutionContext( session, getMojoDescriptor( goal ) );
+                line();
-                context.setGoalName( goal );
+                getLogger().error( "BUILD ERROR" );
-                lifecycleManager.execute( context );
+                line();
-                if ( context.isExecutionFailure() )
-                {
-                    response.setExecutionFailure( context.getMojoDescriptor().getId(), context.getFailureResponse() );
+                getLogger().error( "Cause: ", e );
-                    break;
-                }
+                line();
+
+                stats( fullStart, new Date() );
+
+                line();
-            catch ( Exception e )
-            {
-                response.setException( e );
-                if ( logResults )
-                {
-                    line();
-
-                    getLogger().error( "BUILD ERROR" );
-
-                    line();
-
-                    getLogger().error( "Cause: ", e );
-
-                    line();
-
-                    stats( fullStart, new Date() );
-
-                    line();
-                }
-
-                // An exception is a failure
-                return response;
-            }
+            // An exception is a failure
+            return response;
-        getLogger().info( "Final Memory: " + ( ( r.totalMemory() - r.freeMemory() ) / mb ) + "M/" + ( r.totalMemory() / mb ) + "M" );
+        getLogger().info(
+            "Final Memory: " + ((r.totalMemory() - r.freeMemory()) / mb) + "M/" + (r.totalMemory() / mb) + "M" );
-    public ExecutionResponse executeReactor( String goals, String includes, String excludes )
-        throws ReactorException, GoalNotFoundException
+    public ExecutionResponse executeReactor( String goals, String includes, String excludes ) throws ReactorException,
+        GoalNotFoundException
-    public MavenProject getProject( File project )
-        throws ProjectBuildingException
+    public MavenProject getProject( File project ) throws ProjectBuildingException
-    public List getSortedProjects( List projects )
-        throws Exception
+    public List getSortedProjects( List projects ) throws Exception
-    public void contextualize( Context context )
-        throws ContextException
+    public void contextualize( Context context ) throws ContextException
-    public void booty()
-        throws Exception
+    public void booty() throws Exception
-}
+}

INS26 INS40 UPD43 UPD42 MOV54 UPD42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL10 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL24