project sorting can be a static method


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163575 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Dependency;
+import org.codehaus.plexus.util.dag.CycleDetectedException;
+import org.codehaus.plexus.util.dag.DAG;
+import org.codehaus.plexus.util.dag.TopologicalSorter;
+import java.util.HashMap;
+import java.util.Map;
+
+    /**
+     * Sort a list of projects.
+     * <ul>
+     * <li>collect all the vertices for the projects that we want to build.</li>
+     * <li>iterate through the deps of each project and if that dep is within
+     * the set of projects we want to build then add an edge, otherwise throw
+     * the edge away because that dependency is not within the set of projects
+     * we are trying to build. we assume a closed set.</li>
+     * <li>do a topo sort on the graph that remains.</li>
+     * </ul>
+     */
+    public static List getSortedProjects( List projects )
+        throws CycleDetectedException
+    {
+        DAG dag = new DAG();
+
+        Map projectMap = new HashMap();
+
+        for ( Iterator i = projects.iterator(); i.hasNext(); )
+        {
+            MavenProject project = (MavenProject) i.next();
+
+            String artifactId = project.getArtifactId();
+
+            dag.addVertex( artifactId );
+
+            projectMap.put( artifactId, project );
+        }
+
+        for ( Iterator i = projects.iterator(); i.hasNext(); )
+        {
+            MavenProject project = (MavenProject) i.next();
+
+            String artifactId = project.getArtifactId();
+
+            for ( Iterator j = project.getDependencies().iterator(); j.hasNext(); )
+            {
+                Dependency dependency = (Dependency) j.next();
+
+                String dependencyArtifactId = dependency.getArtifactId();
+
+                if ( dag.getVertex( dependencyArtifactId ) != null )
+                {
+                    dag.addEdge( artifactId, dependencyArtifactId );
+                }
+            }
+
+            MavenProject parent = project.getParent();
+            if ( parent != null )
+            {
+                if ( dag.getVertex( parent.getArtifactId() ) != null )
+                {
+                    dag.addEdge( artifactId, parent.getArtifactId() );
+                }
+            }
+        }
+
+        List sortedProjects = new ArrayList();
+
+        for ( Iterator i = TopologicalSorter.sort( dag ).iterator(); i.hasNext(); )
+        {
+            String artifactId = (String) i.next();
+
+            sortedProjects.add( projectMap.get( artifactId ) );
+        }
+
+        return sortedProjects;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS24 INS24 INS60 INS24 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS58 INS32 INS8 INS43 INS59 INS58 INS32 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS60 INS21 INS21 INS43 INS59 INS42 INS42 INS60 INS60 INS24 INS60 INS25 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS21 INS43 INS43 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42