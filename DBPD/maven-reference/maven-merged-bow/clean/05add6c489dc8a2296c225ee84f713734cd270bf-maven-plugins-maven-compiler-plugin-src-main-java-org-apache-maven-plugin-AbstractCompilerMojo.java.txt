PR: MNG-976
Submitted by: Lester Ecarma
Reviewed by:  Brett Porter
add meminitial and maxmem settings to the forking compiler

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@327878 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.util.StringUtils;
+     * Initial size, in megabytes, of the memory allocation pool, ex. "64", "64m".
+     *
+     * @parameter
+     */
+    private String meminitial;
+
+    /**
+     * maximum size, in megabytes, of the memory allocation pool, ex. "128", "128m".
+     *
+     * @parameter
+     */
+    private String maxmem;
+
+    /**
+        if( fork )
+        {
+            if ( !StringUtils.isEmpty( meminitial ) )
+            {
+                String value = getMemoryValue( meminitial );
+                
+                if ( value != null )
+                {
+                    compilerConfiguration.setMeminitial( value );
+                }
+                else
+                {
+                    getLog().info( "Invalid value for meminitial '" + meminitial + "'. Ignoring this option." );                    
+                }
+            }
+
+            if ( !StringUtils.isEmpty( maxmem ) )
+            {
+                String value = getMemoryValue( maxmem );
+                
+                if ( value != null )
+                {
+                    compilerConfiguration.setMaxmem( value );
+                }
+                else
+                {
+                    getLog().info( "Invalid value for maxmem '" + maxmem + "'. Ignoring this option." );                    
+                }
+            }
+        }
+
+    private String getMemoryValue( String setting )
+    {
+        String value = null;
+        
+        // Allow '128' or '128m'
+        if ( isDigits( setting ) )
+        {
+            value = setting + "m";
+        }
+        else
+        {
+            if ( ( isDigits( setting.substring( 0, setting.length() - 1 ) ) ) &&
+                ( setting.toLowerCase().endsWith( "m" ) ) )
+            {
+                value = setting;
+            }
+        }
+        return value;
+    }
+
+    private boolean isDigits( String string )
+    {
+        for ( int i = 0; i < string.length(); i++ )
+        {
+            if ( !Character.isDigit( string.charAt( i ) ) )
+            {
+                return false;
+            }
+        }
+        return true;
+    }
+

INS26 INS40 INS23 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS42 INS42 INS65 INS65 INS42 INS42 INS25 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS24 INS41 INS66 INS66 INS42 INS8 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS58 INS27 INS37 INS8 INS9 INS25 INS25 INS42 INS42 INS33 INS42 INS42 INS21 INS25 INS39 INS59 INS42 INS32 INS42 INS25 INS38 INS8 INS38 INS8 INS7 INS27 INS8 INS42 INS34 INS42 INS42 INS38 INS8 INS32 INS60 INS25 INS32 INS60 INS25 INS42 INS27 INS36 INS36 INS21 INS32 INS41 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS45 INS32 INS32 INS7 INS42 INS42 INS32 INS9 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS34 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42