o Decoupled project builder from DomainModel, we will directly use the model to keep track of the bits

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@778495 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.Reader;
-import org.apache.maven.model.DomainModel;
+import org.apache.maven.model.Parent;
-import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import org.apache.maven.model.io.ModelReader;
-import org.codehaus.plexus.util.IOUtil;
-import org.codehaus.plexus.util.ReaderFactory;
+    private ModelReader modelReader;
+
+    @Requirement
+        return build( pomFile, pomFile.getParentFile(), configuration );
+    }
+
+    private MavenProject build( File pomFile, File projectDirectory, ProjectBuilderConfiguration configuration )
+        throws ProjectBuildingException
+    {
-        DomainModel domainModel;
+        List<Model> models;
-            domainModel = build( "unknown", pomFile, configuration );
+            models = build( "unknown", pomFile, configuration );
+        Model model = models.get(0);
+        
+        model.setProjectDirectory( projectDirectory );
+
-            projectProfiles.addAll( domainModel.getModel().getProfiles() );
+            projectProfiles.addAll( model.getProfiles() );
-            throw new ProjectBuildingException( "", "Failed to activate pom profiles.", e );
+            throw new ProjectBuildingException( model.getId(), "Failed to activate pom profiles.", e );
-        try
+        for ( Profile p : projectProfiles )
-            for ( Profile p : projectProfiles )
+            if ( !"pom".equals( p.getSource() ) )
-                if ( !"pom".equals( p.getSource() ) )
-                {
-                    logger.debug( "Merging profile into model (build): Model = " + domainModel.getId() + ", Profile = "
-                        + p.getId() );
-                    profileInjector.injectProfile( domainModel.getModel(), p );
-                }
+                logger.debug( "Merging profile into model (build): Model = " + model.getId() + ", Profile = "
+                    + p.getId() );
+                profileInjector.injectProfile( model, p );
-        catch ( IOException e )
-        {
-            throw new ProjectBuildingException( "", "", e );
-        }
-            Model model = interpolateDomainModel( domainModel, configuration, pomFile );
+            model = interpolateModel( model, configuration, pomFile );
-            project = this.fromDomainModelToMavenProject( model, domainModel.getParentFile(), configuration, pomFile );
+            validateModel( model, pomFile, configuration.istLenientValidation() );
+
+            File parentFile = ( models.size() > 1 ) ? models.get( 1 ).getPomFile() : null;
+
+            project = fromModelToMavenProject( model, parentFile, configuration, pomFile );
-        return build( artifact.getFile(), configuration );
+        return build( artifact.getFile(), null, configuration );
-    private Model interpolateDomainModel( DomainModel domainModel, ProjectBuilderConfiguration config, File projectDescriptor )
+    private Model interpolateModel( Model model, ProjectBuilderConfiguration config, File projectDescriptor )
-        Model model = domainModel.getModel();
-
-        String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-
-            model = interpolator.interpolateModel( model, config.getExecutionProperties(), domainModel.getProjectDirectory() );
+            model = interpolator.interpolateModel( model, config.getExecutionProperties(), model.getProjectDirectory() );
+            String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
-    private MavenProject fromDomainModelToMavenProject( Model model, File parentFile, ProjectBuilderConfiguration config, File projectDescriptor )
+    private MavenProject fromModelToMavenProject( Model model, File parentFile, ProjectBuilderConfiguration config, File projectDescriptor )
-        validateModel( model, projectDescriptor, config.istLenientValidation() );
-
-    private DomainModel build( String projectId, File pomFile, ProjectBuilderConfiguration projectBuilderConfiguration )
+    private List<Model> build( String projectId, File pomFile, ProjectBuilderConfiguration projectBuilderConfiguration )
-        DomainModel domainModel = new DomainModel( pomFile );
-        domainModel.setProjectDirectory( pomFile.getParentFile() );
-        domainModel.setMostSpecialized( true );
+        Model mainModel = modelReader.read( pomFile, null );
+        mainModel.setProjectDirectory( pomFile.getParentFile() );
-        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        List<Model> domainModels = new ArrayList<Model>();
-        domainModels.add( domainModel );
+        domainModels.add( mainModel );
-        File parentFile = null;
-        int lineageCount = 0;
-        if ( domainModel.getParentId() != null )
+        if ( mainModel.getParent() != null )
-            List<DomainModel> mavenParents;
+            List<Model> mavenParents;
-            if ( isParentLocal( domainModel.getRelativePathOfParent(), pomFile.getParentFile() ) )
+            if ( isParentLocal( mainModel.getParent().getRelativePath(), pomFile.getParentFile() ) )
-                mavenParents = getDomainModelParentsFromLocalPath( domainModel, localRepository, remoteRepositories, pomFile.getParentFile(), projectBuilderConfiguration );
+                mavenParents = getDomainModelParentsFromLocalPath( mainModel, localRepository, remoteRepositories, pomFile.getParentFile(), projectBuilderConfiguration );
-                mavenParents = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories );
-            }
-
-            if ( mavenParents.size() > 0 )
-            {
-                DomainModel dm = mavenParents.get( 0 );
-                parentFile = dm.getFile();
-                domainModel.setParentFile( parentFile );
-                lineageCount = mavenParents.size();
+                mavenParents = getDomainModelParentsFromRepository( mainModel, localRepository, remoteRepositories );
-        for ( DomainModel domain : domainModels )
+        for ( Model model : domainModels )
-            normalizer.mergeDuplicates( domain.getModel() );
+            normalizer.mergeDuplicates( model );
-        domainModels.add( new DomainModel( getSuperModel(), false ) );
-        List<DomainModel> profileModels = new ArrayList<DomainModel>();
+        domainModels.add( getSuperModel() );
+        List<Model> profileModels = new ArrayList<Model>();
-        for ( DomainModel domain : domainModels )
+        for ( Model model : domainModels )
-            DomainModel dm = domain;
-
-            if ( !dm.getModel().getProfiles().isEmpty() )
+            if ( !model.getProfiles().isEmpty() )
-                        profileSelector.getActiveProfiles( dm.getModel().getProfiles(), projectBuilderConfiguration );
+                        profileSelector.getActiveProfiles( model.getProfiles(), projectBuilderConfiguration );
-                        logger.debug( "Merging profile into model: Model = " + dm.getId() + ", Profile = " + p.getId() );
-                        profileInjector.injectProfile( dm.getModel(), p );
+                        logger.debug( "Merging profile into model: Model = " + model.getId() + ", Profile = " + p.getId() );
+                        profileInjector.injectProfile( model, p );
-            profileModels.add( dm );
+            profileModels.add( model );
-        DomainModel transformedDomainModel = build( profileModels, listeners );
+        processModelsForInheritance( profileModels );
-        // Lineage count is inclusive to add the POM read in itself.
-        transformedDomainModel.setLineageCount( lineageCount + 1 );
-        transformedDomainModel.setParentFile( parentFile );
-
-        return transformedDomainModel;
-    }
-
-    /**
-     * Parent domain models on bottom.
-     * 
-     * @param domainModels
-     * @param listeners
-     * @return
-     * @throws IOException
-     */
-    private DomainModel build( List<DomainModel> domainModels, List<ModelEventListener> listeners )
-        throws IOException
-    {
-        DomainModel child = null;
-        for ( DomainModel domainModel : domainModels )
-        {
-            if ( domainModel.isMostSpecialized() )
-            {
-                child = domainModel;
-            }
-        }
-        if ( child == null )
-        {
-            throw new IOException( "Could not find child model" );
-        }
-
-        Model target = processModelsForInheritance( convertDomainModelsToMavenModels( domainModels ) );
-        if ( listeners != null )
-        {
-            for ( ModelEventListener listener : listeners )
-            {
-                listener.fire( target );
-            }
-        }
-        DomainModel domainModel = new DomainModel( target, child.isMostSpecialized() );
-        domainModel.setProjectDirectory( child.getProjectDirectory() );
-        domainModel.setParentFile( child.getParentFile() );
-
-        return domainModel;
-    }
-
-    private List<Model> convertDomainModelsToMavenModels( List<DomainModel> domainModels )
-        throws IOException
-    {
-        List<Model> models = new ArrayList<Model>();
-        for ( DomainModel domainModel : domainModels )
-        {
-            DomainModel dm = domainModel;
-            if ( dm.getModel() != null )
-            {
-                if ( dm.isMostSpecialized() )
-                {
-                    models.add( 0, dm.getModel() );
-                }
-                else
-                {
-                    models.add( dm.getModel() );
-                }
-
-            }
-            else
-            {
-                throw new IOException( "model: null" );
-            }
-
-        }
-
-        return models;
+        return profileModels;
-        Collections.reverse( models );
+        List<Model> parentsFirst = new ArrayList<Model>( models );
+        Collections.reverse( parentsFirst );
-        for ( Model currentModel : models )
+        for ( Model currentModel : parentsFirst )
-        try
-        {
-            File f = new File( projectDirectory, relativePath ).getCanonicalFile();
+        File f = new File( projectDirectory, relativePath ).getAbsoluteFile();
-            if ( f.isDirectory() )
-            {
-                f = new File( f, "pom.xml" );
-            }
-
-            return f.isFile();
-        }
-        catch ( IOException e )
+        if ( f.isDirectory() )
-            return false;
+            f = new File( f, "pom.xml" );
+
+        return f.isFile();
-    private List<DomainModel> getDomainModelParentsFromRepository( DomainModel domainModel, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
+    private List<Model> getDomainModelParentsFromRepository( Model model, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )
-        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        List<Model> models = new ArrayList<Model>();
-        String parentId = domainModel.getParentId();
+        Parent parent = model.getParent();
-        if ( parentId == null || localRepository == null )
+        if ( parent == null || localRepository == null )
-            return domainModels;
+            return models;
-        Artifact artifactParent = repositorySystem.createProjectArtifact( domainModel.getParentGroupId(), domainModel.getParentArtifactId(), domainModel.getParentVersion() );
+        // FIXME: Validate the parent coordinate and throw proper exceptions
+        
+        Artifact artifactParent =
+            repositorySystem.createProjectArtifact( parent.getGroupId(), parent.getArtifactId(), parent.getVersion() );
+        
+        Model parentModel = modelReader.read( artifactParent.getFile(), null );
-        DomainModel parentDomainModel = new DomainModel( artifactParent.getFile() );
-
-        if ( !parentDomainModel.matchesParentOf( domainModel ) )
+        if ( !isMatchingParent( parentModel, parent ) )
-            logger.debug( "Parent pom ids do not match: Parent File = " + artifactParent.getFile().getAbsolutePath() + ": Child ID = " + domainModel.getId() );
+            logger.debug( "Parent pom ids do not match: Parent File = " + artifactParent.getFile().getAbsolutePath() + ": Child ID = " + model.getId() );
+            // TODO: review the proper handling of this, can it happen at all and if should we really continue or error out?
-        domainModels.add( parentDomainModel );
+        models.add( parentModel );
-        domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories ) );
-        return domainModels;
+        models.addAll( getDomainModelParentsFromRepository( parentModel, localRepository, remoteRepositories ) );
+        return models;
-    private List<DomainModel> getDomainModelParentsFromLocalPath( DomainModel domainModel, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, File projectDirectory,
+    private List<Model> getDomainModelParentsFromLocalPath( Model model, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, File projectDirectory,
-        List<DomainModel> domainModels = new ArrayList<DomainModel>();
+        List<Model> models = new ArrayList<Model>();
-        String parentId = domainModel.getParentId();
+        Parent parent = model.getParent();
-        if ( parentId == null )
+        if ( parent == null )
-            return domainModels;
+            return models;
-        File parentFile = new File( projectDirectory, domainModel.getRelativePathOfParent() ).getCanonicalFile();
+        File parentFile = new File( projectDirectory, parent.getRelativePath() ).getCanonicalFile();
-        DomainModel parentDomainModel = null;
-        parentDomainModel = new DomainModel( parentFile );
-        parentDomainModel.setProjectDirectory( parentFile.getParentFile() );
+        
+        Model parentModel = modelReader.read( parentFile, null );
+        parentModel.setProjectDirectory( parentFile.getParentFile() );
-        if ( !parentDomainModel.matchesParentOf( domainModel ) )
+        if ( !isMatchingParent( parentModel, parent ) )
-            logger.info( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = " + parentDomainModel.getId() + ", Child ID = " + domainModel.getId()
-                + ", Expected Parent ID = " + domainModel.getParentId() );
+            logger.info( "Parent pom ids do not match: Parent File = " + parentFile.getAbsolutePath() + ", Parent ID = " + parentModel.getId() + ", Child ID = " + model.getId()
+                + ", Expected Parent ID = " + parent.getId() );
-            List<DomainModel> parentDomainModels = getDomainModelParentsFromRepository( domainModel, localRepository, remoteRepositories );
+            List<Model> parentModels = getDomainModelParentsFromRepository( model, localRepository, remoteRepositories );
-            if ( parentDomainModels.size() == 0 )
+            if ( parentModels.isEmpty() )
-                throw new IOException( "Unable to find parent pom on local path or repo: " + domainModel.getParentId() );
+                throw new IOException( "Unable to find parent pom on local path or repo: " + parent.getId() );
-            domainModels.addAll( parentDomainModels );
-            return domainModels;
+            models.addAll( parentModels );
+            return models;
-        domainModels.add( parentDomainModel );
-        if ( domainModel.getParentId() != null )
-        {            
-            if ( isParentLocal( parentDomainModel.getRelativePathOfParent(), parentFile.getParentFile() ) )
+        models.add( parentModel );
+
+        if ( parentModel.getParent() != null )
+        {
+            if ( isParentLocal( parentModel.getParent().getRelativePath(), parentFile.getParentFile() ) )
-                domainModels.addAll( getDomainModelParentsFromLocalPath( parentDomainModel, localRepository, remoteRepositories, parentFile.getParentFile(), projectBuilderConfiguration ) );
+                models.addAll( getDomainModelParentsFromLocalPath( parentModel, localRepository, remoteRepositories,
+                                                                   parentFile.getParentFile(),
+                                                                   projectBuilderConfiguration ) );
-                domainModels.addAll( getDomainModelParentsFromRepository( parentDomainModel, localRepository, remoteRepositories ) );
+                models.addAll( getDomainModelParentsFromRepository( parentModel, localRepository, remoteRepositories ) );
-        return domainModels;
+        return models;
+    }
+
+    private boolean isMatchingParent( Model parentModel, Parent parent )
+    {
+        if ( parentModel.getGroupId() != null )
+        {
+            if ( !parent.getGroupId().equals( parentModel.getGroupId() ) )
+            {
+                return false;
+            }
+        }
+        else if ( parentModel.getParent() == null || !parent.getGroupId().equals( parentModel.getParent().getGroupId() ) )
+        {
+            return false;
+        }
+        if ( !parent.getArtifactId().equals( parentModel.getArtifactId() ) )
+        {
+            return false;
+        }
+        if ( parentModel.getVersion() != null )
+        {
+            if ( !parent.getVersion().equals( parentModel.getVersion() ) )
+            {
+                return false;
+            }
+        }
+        else if ( parentModel.getParent() == null || !parent.getVersion().equals( parentModel.getParent().getVersion() ) )
+        {
+            return false;
+        }
+        return true;
-    private MavenXpp3Reader modelReader = new MavenXpp3Reader();
-
-        Reader reader = null;
+        String superPomResource = "/org/apache/maven/project/pom-" + MAVEN_MODEL_VERSION + ".xml";
-            reader = ReaderFactory.newXmlReader( getClass().getClassLoader().getResource( "org/apache/maven/project/pom-" + MAVEN_MODEL_VERSION + ".xml" ) );
-
-            superModel = modelReader.read( reader, true );
+            superModel = modelReader.read( getClass().getResourceAsStream( superPomResource ), null );
-        catch ( Exception e )
+        catch ( IOException e )
-            // Not going to happen we're reading the super pom embedded in the JAR
-        }
-        finally
-        {
-            IOUtil.close( reader );
+            throw new IllegalStateException( "The super POM is damaged"
+                + ", please verify the integrity of your Maven installation", e );
+

MOV26 UPD40 UPD40 INS23 INS31 INS31 INS78 INS83 INS43 INS59 INS83 INS43 INS42 INS44 MOV44 UPD43 MOV43 INS8 UPD83 INS44 UPD42 UPD42 INS74 MOV8 MOV74 UPD74 INS83 INS39 INS42 INS44 INS44 INS8 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 INS43 INS42 UPD42 INS41 INS43 INS42 INS60 INS21 MOV70 UPD43 UPD42 INS43 INS43 INS60 UPD43 UPD42 MOV60 UPD43 UPD43 UPD42 INS60 INS43 INS42 INS43 INS42 INS25 INS25 INS25 INS41 UPD42 UPD42 MOV42 INS32 INS42 INS74 MOV43 INS59 INS32 UPD42 INS42 UPD42 MOV42 MOV43 INS59 UPD74 UPD74 UPD42 INS74 INS59 UPD42 UPD42 UPD43 MOV43 UPD42 UPD42 UPD42 UPD74 INS43 MOV43 UPD43 MOV43 INS59 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 INS27 INS8 INS25 INS38 INS8 INS27 INS8 INS25 INS9 MOV43 INS59 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS43 INS43 UPD42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS60 INS33 INS42 INS32 UPD42 UPD43 UPD42 UPD43 UPD42 MOV32 UPD43 UPD43 UPD42 UPD42 UPD42 INS43 INS43 INS42 INS14 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD43 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV41 UPD42 UPD42 INS32 INS33 INS25 INS27 INS8 INS32 INS41 INS32 INS33 INS25 INS27 INS8 INS42 INS27 MOV44 INS8 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS34 INS7 INS32 MOV43 INS59 MOV60 INS42 INS42 INS42 INS33 UPD42 UPD74 UPD42 UPD42 UPD74 UPD42 UPD42 UPD74 UPD42 INS42 INS42 INS74 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 MOV32 INS33 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS33 UPD42 UPD42 UPD42 UPD74 INS32 UPD42 UPD42 INS32 INS42 INS42 INS38 MOV8 INS27 INS38 INS41 INS32 INS42 INS32 INS9 INS42 INS42 INS38 INS8 INS27 INS38 INS41 INS45 INS42 INS45 INS53 UPD42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS16 UPD43 UPD43 UPD42 MOV42 UPD43 UPD42 MOV43 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 MOV43 UPD43 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS32 MOV32 INS32 INS32 INS33 INS32 INS9 INS42 INS42 INS42 INS42 INS32 INS41 INS32 INS33 INS32 INS9 UPD42 MOV32 MOV32 INS14 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS36 INS32 INS33 UPD42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS9 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS33 INS43 INS27 INS42 INS42 INS42 UPD42 MOV42 INS27 INS32 INS42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 UPD42 MOV42 INS45 INS45 INS32 INS34 INS42 INS42 INS34 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL32 DEL45 DEL42 DEL32 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL43 DEL9 DEL14 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL21 DEL42 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL33 DEL59 DEL60 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL34 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL14 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL34 DEL27 DEL42 DEL41 DEL83 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL43 DEL42 DEL33 DEL59 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL7 DEL21 DEL43 DEL42 DEL44 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8