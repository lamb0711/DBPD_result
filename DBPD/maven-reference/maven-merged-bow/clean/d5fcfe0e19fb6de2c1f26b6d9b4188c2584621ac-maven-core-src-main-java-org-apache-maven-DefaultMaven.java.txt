o swapping the branch to trunk


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@779660 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-
+import java.text.SimpleDateFormat;
-import java.util.Collections;
+import java.util.Arrays;
-import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.artifact.DependencyResolutionRequiredException;
+import org.apache.maven.exception.DefaultExceptionHandler;
+import org.apache.maven.exception.ExceptionHandler;
+import org.apache.maven.exception.ExceptionSummary;
-import org.apache.maven.execution.ReactorManager;
+import org.apache.maven.execution.ProjectSorter;
-import org.apache.maven.lifecycle.LifecycleExecutionException;
-import org.apache.maven.lifecycle.TaskValidationResult;
-import org.apache.maven.monitor.event.DeprecationEventDispatcher;
-import org.apache.maven.monitor.event.EventDispatcher;
-import org.apache.maven.monitor.event.MavenEvents;
-import org.apache.maven.reactor.MavenExecutionException;
-import org.apache.maven.reactor.MissingModuleException;
+import org.apache.maven.repository.DelegatingLocalArtifactRepository;
-import org.codehaus.plexus.logging.Logger;
-import org.codehaus.plexus.util.FileUtils;
- * @version $Id$
- * @todo EventDispatcher should be a component as it is internal to maven.
-    
+
-
-    @Requirement
-    private Logger logger;
-
-    // ----------------------------------------------------------------------
-    // Project execution
-    // ----------------------------------------------------------------------
-
-    // project build
-    // artifact resolution
-    // lifecycle execution
+    
+    public List<String> getLifecyclePhases()
+    {
+        return lifecycleExecutor.getLifecyclePhases();
+    }
+        //TODO: Need a general way to inject standard properties
+        if ( request.getStartTime() != null )
+        {
+            request.getProperties().put( "${build.timestamp}", new SimpleDateFormat( "yyyyMMdd-hhmm" ).format( request.getStartTime() ) );
+        }        
+        
-
+        
-
-        ReactorManager reactorManager = createReactorManager( request, result );
-
-        if ( result.hasExceptions() )
-        {
-            return result;
-        }
-
-        EventDispatcher dispatcher = new DeprecationEventDispatcher( MavenEvents.DEPRECATIONS, request.getEventMonitors() );
-
-        String event = MavenEvents.MAVEN_EXECUTION;
-
-        dispatcher.dispatchStart( event, request.getBaseDirectory() );
-
-        MavenSession session = createSession( request, reactorManager, dispatcher );
-
-        if ( request.getGoals() != null )
-        {
-            for ( Iterator i = request.getGoals().iterator(); i.hasNext(); )
-            {
-                String goal = (String) i.next();
-
-                if ( goal == null )
-                {
-                    i.remove();
-                    continue;
-                }
-
-                TaskValidationResult tvr = lifecycleExecutor.isTaskValid( goal, session, reactorManager.getTopLevelProject() );
-
-                if ( !tvr.isTaskValid() )
-                {
-                    Exception e = tvr.generateInvalidTaskException();
-                    result.addException( e );
-                    dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-                    return result;
-                }
-            }
-        }
-
-        logger.info( "Scanning for projects..." );
-
-        if ( reactorManager.hasMultipleProjects() )
-        {
-            logger.info( "Reactor build order: " );
-
-            for ( Iterator i = reactorManager.getSortedProjects().iterator(); i.hasNext(); )
-            {
-                MavenProject project = (MavenProject) i.next();
-
-                logger.info( "  " + project.getName() );
-            }
-        }
+        
+        DelegatingLocalArtifactRepository delegatingLocalArtifactRepository = new DelegatingLocalArtifactRepository( request.getLocalRepository() );
+        
+        request.setLocalRepository( delegatingLocalArtifactRepository );        
+                
+        MavenSession session;
+        
+        Map<String,MavenProject> projects;
-            lifecycleExecutor.execute( session, reactorManager, dispatcher );
-        }
-        catch ( LifecycleExecutionException e )
-        {
-            result.addException( e );
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            return result;
-        }
-        catch ( BuildFailureException e )
-        {
-            result.addException( e );
-            dispatcher.dispatchError( event, request.getBaseDirectory(), e );
-
-            return result;
-        }
-
-        result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );
-
-        result.setProject( reactorManager.getTopLevelProject() );
-
-        dispatcher.dispatchEnd( event, request.getBaseDirectory() );
-
-        return result;
-    }    
-    
-    public ReactorManager createReactorManager( MavenExecutionRequest request, MavenExecutionResult result )
-    {
-        List projects;
-        try
-        {            
-
+                                                
+            //TODO: We really need to get rid of this requirement in here. If we know there is no project present
-                projects.add( projectBuilder.buildStandaloneSuperProject( request.getProjectBuildingConfiguration() ) );
-
+                MavenProject project = projectBuilder.buildStandaloneSuperProject( request.getProjectBuildingConfiguration() ); 
+                projects.put( ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
-            result.addException( e );
-            return null;
+            return processResult( result, e );
-            result.addException( e );
-            return null;
+            return processResult( result, e );
-
-        ReactorManager reactorManager;
-
+        
-        {
-            reactorManager = new ReactorManager( projects, request.getReactorFailureBehavior() );
-
-            result.setReactorManager( reactorManager );
+        {                        
+            ProjectSorter projectSorter = new ProjectSorter( projects.values() );
+                                    
+            session = new MavenSession( container, request, result, projectSorter.getSortedProjects() );            
-        {
+        {            
-            ProjectCycleException error = new ProjectCycleException( projects, message, e );
+            ProjectCycleException error = new ProjectCycleException( message, e );
-            result.addException( error );
-
-            return null;
+            return processResult( result, error );
-            result.addException( e );
+            return processResult( result, e );
+        }
+       
+        // Desired order of precedence for local artifact repositories
+        //
+        // Reactor
+        // Workspace
+        // User Local Repository
+                
+        delegatingLocalArtifactRepository.setBuildReactor( new ReactorArtifactRepository( projects ) );
+        
+        if ( result.hasExceptions() )
+        {
+            return result;
+        }        
-            return null;
+        lifecycleExecutor.execute( session );
+        
+        if ( session.getResult().hasExceptions() )
+        {        
+            return processResult( result, session.getResult().getExceptions().get( 0 ) );
-        return reactorManager;
+        result.setTopologicallySortedProjects( session.getProjects() );
+        
+        result.setProject( session.getTopLevelProject() );
+
+        return result;
-    protected List getProjects( MavenExecutionRequest request )
-        throws MavenExecutionException
+    private MavenExecutionResult processResult( MavenExecutionResult result, Exception e )
-        List projects;
+        ExceptionHandler handler = new DefaultExceptionHandler();
+        
+        ExceptionSummary es = handler.handleException( e );                        
+     
+        result.addException( e );
+        
+        result.setExceptionSummary( es );    
+        
+        return result;
+    }
+    
+    protected Map<String,MavenProject> getProjects( MavenExecutionRequest request )
+        throws MavenExecutionException, ProjectBuildingException
+    {
+        List<File> files = Arrays.asList( request.getPom().getAbsoluteFile() );
-        List files;
-        try
-        {
-            files = getProjectFiles( request );
-        }
-        catch ( IOException e )
-        {
-            throw new MavenExecutionException( "Error selecting project files for the reactor: " + e.getMessage(), e );
-        }
-
-        projects = collectProjects( files, request, !request.useReactor() );
+        Map<String,MavenProject> projects = collectProjects( files, request );
-    private List collectProjects( List files, MavenExecutionRequest request, boolean isRoot )
-        throws MavenExecutionException
+    private Map<String,MavenProject> collectProjects( List<File> files, MavenExecutionRequest request )
+        throws MavenExecutionException, ProjectBuildingException
-        List projects = new ArrayList( files.size() );
+        Map<String,MavenProject> projects = new LinkedHashMap<String,MavenProject>();
-        if ( !files.isEmpty() )
+        for ( File file : files )
-            for ( Iterator iterator = files.iterator(); iterator.hasNext(); )
+            MavenProject project = projectBuilder.build( file, request.getProjectBuildingConfiguration() );
+            
+            if ( ( project.getPrerequisites() != null ) && ( project.getPrerequisites().getMaven() != null ) )
-                File file = (File) iterator.next();
+                DefaultArtifactVersion version = new DefaultArtifactVersion( project.getPrerequisites().getMaven() );
-                boolean usingReleasePom = false;
-
-                if ( RELEASE_POMv4.equals( file.getName() ) )
+                if ( runtimeInformation.getApplicationInformation().getVersion().compareTo( version ) < 0 )
-                    logger.info( "NOTE: Using release-pom: " + file + " in reactor build." );
-
-                    usingReleasePom = true;
+                    throw new MavenExecutionException( "Unable to build project '" + file + "; it requires Maven version " + version.toString(), file );
-
-                MavenProject project;
-                try
-                {
-                    project = projectBuilder.build( file, request.getProjectBuildingConfiguration() );
-                }
-                catch ( ProjectBuildingException e )
-                {
-                    throw new MavenExecutionException( "Failed to build MavenProject instance for: " + file, file, e );
-                }
-
-                if ( isRoot )
-                {
-                    project.setExecutionRoot( true );
-                    request.getProjectBuildingConfiguration().setTopLevelProjectForReactor(project);
-                }
-
-                if ( ( project.getPrerequisites() != null ) && ( project.getPrerequisites().getMaven() != null ) )
-                {
-                    DefaultArtifactVersion version = new DefaultArtifactVersion( project.getPrerequisites().getMaven() );
-
-                    if ( runtimeInformation.getApplicationInformation().getVersion().compareTo( version ) < 0 )
-                    {
-                        throw new MavenExecutionException(
-                            "Unable to build project '" + file +
-                                "; it requires Maven version " + version.toString(), file );
-                    }
-                }
-
-                if ( ( project.getModules() != null ) && !project.getModules().isEmpty() && request.isRecursive() )
-                {
-                    // TODO: Really should fail if it was not? What if it is aggregating - eg "ear"?
-                    project.setPackaging( "pom" );
-
-                    File basedir = file.getParentFile();
-
-                    // Initial ordering is as declared in the modules section
-                    List moduleFiles = new ArrayList( project.getModules().size() );
-
-                    for ( Iterator i = project.getModules().iterator(); i.hasNext(); )
-                    {
-                        String name = (String) i.next();
-
-                        if ( StringUtils.isEmpty( StringUtils.trim( name ) ) )
-                        {
-                            logger.warn( "Empty module detected. Please check you don't have any empty module definitions in your POM." );
-
-                            continue;
-                        }
-
-                        File moduleFile = new File( basedir, name );
-                        if ( !moduleFile.exists() )
-                        {
-                            throw new MissingModuleException( name, moduleFile, file );
-                        }
-                        else if ( moduleFile.isDirectory() )
-                        {
-                            if ( usingReleasePom )
-                            {
-                                moduleFile = new File( basedir, name + "/" + Maven.RELEASE_POMv4 );
-                            }
-                            else
-                            {
-                                moduleFile = new File( basedir, name + "/" + Maven.POMv4 );
-                            }
-                        }
-
-                        if ( Os.isFamily( Os.FAMILY_WINDOWS ) )
-                        {
-                            // we don't canonicalize on unix to avoid interfering with symlinks
-
-                            try
-                            {
-                                moduleFile = moduleFile.getCanonicalFile();
-                            }
-                            catch ( IOException e )
-                            {
-                                throw new MavenExecutionException( "Unable to canonicalize file name " + moduleFile, e );
-                            }
-                        }
-                        else
-                        {
-                            moduleFile = new File( moduleFile.toURI().normalize() );
-                        }
-
-                        moduleFiles.add( moduleFile );
-                    }
-
-                    List collectedProjects = collectProjects( moduleFiles, request, false );
-
-                    projects.addAll( collectedProjects );
-                    project.setCollectedProjects( collectedProjects );
-                }
-                projects.add( project );
+
+            if ( ( project.getModules() != null ) && !project.getModules().isEmpty() && request.isRecursive() )
+            {
+                File basedir = file.getParentFile();
+
+                List<File> moduleFiles = new ArrayList<File>();
+                
+                for ( String name : project.getModules() )
+                {
+                    if ( StringUtils.isEmpty( StringUtils.trim( name ) ) )
+                    {
+                        continue;
+                    }
+
+                    File moduleFile = new File( basedir, name );
+                    
+                    if ( !moduleFile.exists() )
+                    {
+                        throw new MissingModuleException( name, moduleFile, file );
+                    }
+                    else if ( moduleFile.isDirectory() )
+                    {
+                        moduleFile = new File( basedir, name + "/" + Maven.POMv4 );
+                    }
+
+                    if ( Os.isFamily( Os.FAMILY_WINDOWS ) )
+                    {
+                        // we don't canonicalize on unix to avoid interfering with symlinks
+                        try
+                        {
+                            moduleFile = moduleFile.getCanonicalFile();
+                        }
+                        catch ( IOException e )
+                        {
+                            throw new MavenExecutionException( "Unable to canonicalize file name " + moduleFile, e );
+                        }
+                    }
+                    else
+                    {
+                        moduleFile = new File( moduleFile.toURI().normalize() );
+                    }
+
+                    moduleFiles.add( moduleFile );
+                }
+
+                Map<String,MavenProject> collectedProjects = collectProjects( moduleFiles, request );
+
+                projects.putAll( collectedProjects );                
+            }
+            
+            projects.put( ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() ), project );
-
-    // ----------------------------------------------------------------------
-    // Methods used by all execution request handlers
-    // ----------------------------------------------------------------------
-
-    //!! We should probably have the execution request handler create the
-    // session as
-    // the session type would be specific to the request i.e. having a project
-    // or not.
-
-    protected MavenSession createSession( MavenExecutionRequest request,
-                                          ReactorManager reactorManager,
-                                          EventDispatcher dispatcher )
-    {
-        MavenSession session = new MavenSession( container, request, dispatcher, reactorManager );
-
-        return session;
-    }
-
-    private List getProjectFiles( MavenExecutionRequest request )
-        throws IOException
-    {
-        List files = Collections.EMPTY_LIST;
-
-        File userDir = new File( request.getBaseDirectory() );
-
-        if ( request.useReactor() )
-        {
-            String includes = System.getProperty( "maven.reactor.includes", "**/" + POMv4 + ",**/" + RELEASE_POMv4 );
-
-            String excludes = System.getProperty( "maven.reactor.excludes", POMv4 + "," + RELEASE_POMv4 );
-
-            files = FileUtils.getFiles( userDir, includes, excludes );
-
-            filterOneProjectFilePerDirectory( files );
-
-            // make sure there is consistent ordering on all platforms, rather than using the filesystem ordering
-            Collections.sort( files );
-        }
-        else if ( request.getPom() != null )
-        {
-            File projectFile = request.getPom().getAbsoluteFile();
-
-            if ( projectFile.exists() )
-            {
-                files = Collections.singletonList( projectFile );
-            }
-        }
-        else
-        {
-            File projectFile = new File( userDir, RELEASE_POMv4 );
-
-            if ( !projectFile.exists() )
-            {
-                projectFile = new File( userDir, POMv4 );
-            }
-
-            if ( projectFile.exists() )
-            {
-                files = Collections.singletonList( projectFile );
-            }
-        }
-
-        return files;
-    }
-
-    private void filterOneProjectFilePerDirectory( List files )
-    {
-        List releaseDirs = new ArrayList();
-
-        for ( Iterator it = files.iterator(); it.hasNext(); )
-        {
-            File projectFile = (File) it.next();
-
-            if ( RELEASE_POMv4.equals( projectFile.getName() ) )
-            {
-                releaseDirs.add( projectFile.getParentFile() );
-            }
-        }
-
-        for ( Iterator it = files.iterator(); it.hasNext(); )
-        {
-            File projectFile = (File) it.next();
-
-            // remove pom.xml files where there is a sibling release-pom.xml file...
-            if ( !RELEASE_POMv4.equals( projectFile.getName() ) && releaseDirs.contains( projectFile.getParentFile() ) )
-            {
-                it.remove();
-            }
-        }
-    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS74 INS42 INS8 MOV43 INS42 MOV54 UPD83 MOV83 INS43 INS42 MOV44 INS44 MOV8 UPD83 INS74 INS42 MOV44 MOV43 INS43 INS8 INS74 INS42 INS44 INS43 MOV8 MOV43 INS43 INS41 INS25 MOV21 MOV60 INS21 INS60 INS60 INS21 MOV25 INS21 INS25 INS21 INS21 MOV41 UPD42 MOV42 MOV43 MOV42 MOV60 MOV21 MOV21 MOV41 INS43 MOV43 INS43 UPD42 MOV42 MOV60 INS60 MOV41 INS43 INS43 INS43 INS74 INS42 INS42 INS60 INS70 MOV41 UPD42 MOV42 INS32 INS27 INS8 UPD43 INS32 MOV43 INS59 INS74 MOV59 INS32 INS32 INS32 INS8 INS32 INS32 UPD43 UPD43 UPD42 MOV42 UPD42 MOV42 INS74 INS74 INS59 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 MOV43 INS74 INS59 INS44 INS42 MOV8 MOV42 UPD42 MOV42 INS32 INS33 INS21 UPD42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 MOV43 MOV43 INS60 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 MOV41 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 MOV43 UPD42 INS32 INS43 MOV43 INS43 INS42 INS32 INS43 INS43 INS43 UPD42 MOV42 INS14 MOV43 INS42 INS21 INS42 INS42 INS32 INS43 INS32 INS42 INS41 INS41 INS43 INS59 INS7 INS41 INS41 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD42 INS42 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS74 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS60 INS32 INS32 INS42 INS42 INS14 INS42 INS14 MOV43 INS32 INS32 INS42 INS42 INS42 INS32 UPD42 INS43 MOV43 INS43 MOV32 INS70 INS60 INS42 INS42 INS32 MOV42 INS42 INS42 INS14 INS42 INS32 MOV43 INS59 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD43 MOV43 INS32 MOV43 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS34 INS42 INS42 INS74 INS44 MOV32 MOV8 INS74 MOV59 INS42 INS42 INS32 MOV32 INS32 INS43 INS45 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS32 INS42 MOV43 MOV43 MOV43 INS42 MOV25 INS43 MOV43 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS74 MOV38 MOV8 MOV25 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV43 MOV43 MOV32 DEL40 DEL26 DEL66 DEL65 DEL66 DEL65 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL60 DEL42 DEL32 DEL21 DEL33 DEL41 DEL32 DEL21 DEL33 DEL41 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL21 DEL33 DEL41 DEL32 DEL21 DEL33 DEL41 DEL42 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL42 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL31 DEL42 DEL43 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL43 DEL42 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL9 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL40 DEL27 DEL14 DEL7 DEL21 DEL8 DEL8 DEL25 DEL9 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL43 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL25 DEL8