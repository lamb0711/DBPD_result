Formatting

-public class DefaultDownloader
-    implements Downloader
-{
-    private static final int PROGRESS_CHUNK = 20000;
+public class DefaultDownloader implements Downloader {
+  private static final int PROGRESS_CHUNK = 20000;
-    private static final int BUFFER_SIZE = 10000;
+  private static final int BUFFER_SIZE = 10000;
-    private final String applicationName;
+  private final String applicationName;
-    private final String applicationVersion;
+  private final String applicationVersion;
-    public DefaultDownloader( String applicationName, String applicationVersion )
-    {
-        this.applicationName = applicationName;
-        this.applicationVersion = applicationVersion;
-        configureProxyAuthentication();
+  public DefaultDownloader(String applicationName, String applicationVersion) {
+    this.applicationName = applicationName;
+    this.applicationVersion = applicationVersion;
+    configureProxyAuthentication();
+  }
+
+  private void configureProxyAuthentication() {
+    if (System.getProperty("http.proxyUser") != null) {
+      Authenticator.setDefault(new SystemPropertiesProxyAuthenticator());
+  }
-    private void configureProxyAuthentication()
-    {
-        if ( System.getProperty( "http.proxyUser" ) != null )
-        {
-            Authenticator.setDefault( new SystemPropertiesProxyAuthenticator() );
+  public void download(URI address, File destination) throws Exception {
+    if (destination.exists()) {
+      return;
+    }
+    destination.getParentFile().mkdirs();
+
+    downloadInternal(address, destination);
+  }
+
+  private void downloadInternal(URI address, File destination) throws Exception {
+    OutputStream out = null;
+    URLConnection conn;
+    InputStream in = null;
+    try {
+      URL url = address.toURL();
+      out = new BufferedOutputStream(new FileOutputStream(destination));
+      conn = url.openConnection();
+      final String userAgentValue = calculateUserAgent();
+      conn.setRequestProperty("User-Agent", userAgentValue);
+      in = conn.getInputStream();
+      byte[] buffer = new byte[BUFFER_SIZE];
+      int numRead;
+      long progressCounter = 0;
+      while ((numRead = in.read(buffer)) != -1) {
+        progressCounter += numRead;
+        if (progressCounter / PROGRESS_CHUNK > 0) {
+          System.out.print(".");
+          progressCounter = progressCounter - PROGRESS_CHUNK;
+        out.write(buffer, 0, numRead);
+      }
+    } finally {
+      System.out.println("");
+      if (in != null) {
+        in.close();
+      }
+      if (out != null) {
+        out.close();
+      }
+  }
-    public void download( URI address, File destination )
-        throws Exception
-    {
-        if ( destination.exists() )
-        {
-            return;
-        }
-        destination.getParentFile().mkdirs();
+  private String calculateUserAgent() {
+    String appVersion = applicationVersion;
-        downloadInternal( address, destination );
+    String javaVendor = System.getProperty("java.vendor");
+    String javaVersion = System.getProperty("java.version");
+    String javaVendorVersion = System.getProperty("java.vm.version");
+    String osName = System.getProperty("os.name");
+    String osVersion = System.getProperty("os.version");
+    String osArch = System.getProperty("os.arch");
+    return String.format("%s/%s (%s;%s;%s) (%s;%s;%s)", applicationName, appVersion, osName, osVersion, osArch, javaVendor, javaVersion, javaVendorVersion);
+  }
+
+  private static class SystemPropertiesProxyAuthenticator extends Authenticator {
+    @Override
+    protected PasswordAuthentication getPasswordAuthentication() {
+      return new PasswordAuthentication(System.getProperty("http.proxyUser"), System.getProperty("http.proxyPassword", "").toCharArray());
-
-    private void downloadInternal( URI address, File destination )
-        throws Exception
-    {
-        OutputStream out = null;
-        URLConnection conn;
-        InputStream in = null;
-        try
-        {
-            URL url = address.toURL();
-            out = new BufferedOutputStream( new FileOutputStream( destination ) );
-            conn = url.openConnection();
-            final String userAgentValue = calculateUserAgent();
-            conn.setRequestProperty( "User-Agent", userAgentValue );
-            in = conn.getInputStream();
-            byte[] buffer = new byte[BUFFER_SIZE];
-            int numRead;
-            long progressCounter = 0;
-            while ( ( numRead = in.read( buffer ) ) != -1 )
-            {
-                progressCounter += numRead;
-                if ( progressCounter / PROGRESS_CHUNK > 0 )
-                {
-                    System.out.print( "." );
-                    progressCounter = progressCounter - PROGRESS_CHUNK;
-                }
-                out.write( buffer, 0, numRead );
-            }
-        }
-        finally
-        {
-            System.out.println( "" );
-            if ( in != null )
-            {
-                in.close();
-            }
-            if ( out != null )
-            {
-                out.close();
-            }
-        }
-    }
-
-    private String calculateUserAgent()
-    {
-        String appVersion = applicationVersion;
-
-        String javaVendor = System.getProperty( "java.vendor" );
-        String javaVersion = System.getProperty( "java.version" );
-        String javaVendorVersion = System.getProperty( "java.vm.version" );
-        String osName = System.getProperty( "os.name" );
-        String osVersion = System.getProperty( "os.version" );
-        String osArch = System.getProperty( "os.arch" );
-        return String.format( "%s/%s (%s;%s;%s) (%s;%s;%s)", applicationName, appVersion, osName, osVersion, osArch,
-                              javaVendor, javaVersion, javaVendorVersion );
-    }
-
-    private static class SystemPropertiesProxyAuthenticator
-        extends Authenticator
-    {
-        @Override
-        protected PasswordAuthentication getPasswordAuthentication()
-        {
-            return new PasswordAuthentication( System.getProperty( "http.proxyUser" ),
-                                               System.getProperty( "http.proxyPassword", "" ).toCharArray() );
-        }
-    }
+  }

