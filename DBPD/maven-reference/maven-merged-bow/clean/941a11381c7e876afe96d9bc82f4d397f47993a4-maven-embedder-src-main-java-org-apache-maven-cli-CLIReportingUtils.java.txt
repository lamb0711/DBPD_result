Adding aspect-bound error reporting for BuildFailureException descendants.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@598900 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.AggregatedBuildFailureException;
-import org.apache.maven.InvalidTaskException;
-import org.apache.maven.NoGoalsSpecifiedException;
-import org.apache.maven.ProjectBuildFailureException;
-import org.apache.maven.ProjectCycleException;
-import org.apache.maven.lifecycle.MojoBindingUtils;
-import org.apache.maven.plugin.MojoFailureException;
-import org.apache.maven.plugin.loader.PluginLoaderException;
-import java.util.List;
+    // NOTE: This method is an aspect target.
-        // =====================================================================
-        // Cases covered:
-        // =====================================================================
-        //
-        // ProjectBuildingException(String, String, File, XmlPullParserException)
-        //
-        // ProjectBuildingException(String, String, IOException)
-        // ProjectBuildingException(String, String, File, IOException)
-        //
-        // ProjectBuildingException(String, String, ArtifactNotFoundException)
-        // ProjectBuildingException(String, String, File, ArtifactNotFoundException)
-        //
-        // ProjectBuildingException(String, String, ArtifactResolutionException)
-        // ProjectBuildingException(String, String, File, ArtifactResolutionException)
-        //
-        // ProjectBuildingException(String, String, File, ProfileActivationException)
-        //
-        // ProjectBuildingException(String, String, InvalidRepositoryException)
-        // ProjectBuildingException(String, String, File, InvalidRepositoryException)
-        //
-        // =====================================================================
-        // Subclass cases:
-        // =====================================================================
-        //
-        // InvalidProjectModelException(all)
-        // InvalidProjectVersionException(all)
-        // InvalidDependencyVersionException(all)
-
-        // Start by looking at whether we can handle the PBE as a specific sub-class of ProjectBuildingException...
-//        if ( e instanceof InvalidProjectModelException )
-//        {
-//            InvalidProjectModelException error = (InvalidProjectModelException) e;
-//
-//            writer.write( error.getMessage() );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "The following POM validation errors were detected:" );
-//            writer.write( NEWLINE );
-//
-//            for ( Iterator it = error.getValidationResult().getMessages().iterator(); it.hasNext(); )
-//            {
-//                String message = (String) it.next();
-//                writer.write( NEWLINE );
-//                writer.write( " - " );
-//                writer.write( message );
-//            }
-//
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//
-//            result = true;
-//        }
-//        else if ( e instanceof InvalidDependencyVersionException )
-//        {
-//            writer.write( NEWLINE );
-//            writer.write( "Your project declares a dependency with an invalid version." );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//
-//            Dependency dep = ((InvalidDependencyVersionException)e).getDependency();
-//            writer.write( "Dependency:" );
-//            writer.write( NEWLINE );
-//            writer.write( "Group-Id: " );
-//            writer.write( dep.getGroupId() );
-//            writer.write( NEWLINE );
-//            writer.write( "Artifact-Id: " );
-//            writer.write( dep.getArtifactId() );
-//            writer.write( NEWLINE );
-//            writer.write( "Version: " );
-//            writer.write( dep.getVersion() );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//
-//            writer.write( "Reason: " );
-//            writer.write( cause.getMessage() );
-//            writer.write( NEWLINE );
-//
-//            result = true;
-//        }
-        // InvalidDependencyVersionException extends from InvalidProjectVersionException, so it comes first.
-//        else if ( e instanceof InvalidProjectVersionException )
-//        {
-//            writer.write( NEWLINE );
-//            writer.write( "You have an invalid version in your POM:" );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "Location: " );
-//            writer.write( ((InvalidProjectVersionException)e).getLocationInPom() );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "Reason: " );
-//            writer.write( cause.getMessage() );
-//            writer.write( NEWLINE );
-//
-//            result = true;
-//        }
-        // now that we've sorted through all the sub-classes of ProjectBuildingException,
-        // let's look at causes of a basic PBE instance.
-//        else if ( ( cause instanceof ArtifactNotFoundException )
-//                  || ( cause instanceof ArtifactResolutionException ) )
-//        {
-//            writer.write( NEWLINE );
-//            writer.write( e.getMessage() );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "Reason: " );
-//            writer.write( cause.getMessage() );
-//            writer.write( NEWLINE );
-//
-//            result = true;
-//        }
-        // handled by aspect binding to ProjectErrorReporter now.
-//        else if ( cause instanceof ProfileActivationException )
-//        {
-//            writer.write( NEWLINE );
-//            writer.write( "Profile activation failed. One or more named profile activators may be missing." );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "Reason: " );
-//            writer.write( cause.getMessage() );
-//            writer.write( NEWLINE );
-//
-//            result = true;
-//        }
-//        else if ( cause instanceof IOException )
-//        {
-//            writer.write( NEWLINE );
-//            if ( e.getPomFile() == null )
-//            {
-//                writer.write( "Error reading built-in super POM!" );
-//            }
-//            else
-//            {
-//                writer.write( "Error reading POM." );
-//            }
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( cause.getMessage() );
-//            writer.write( NEWLINE );
-//        }
-//        else if ( cause instanceof XmlPullParserException )
-//        {
-//            writer.write( NEWLINE );
-//            if ( e.getPomFile() == null )
-//            {
-//                writer.write( "Error parsing built-in super POM!" );
-//            }
-//            else
-//            {
-//                writer.write( "Error parsing POM." );
-//            }
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( cause.getMessage() );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "Line: " );
-//            writer.write( "" + ( (XmlPullParserException) cause ).getLineNumber() );
-//            writer.write( NEWLINE );
-//            writer.write( "Column: " );
-//            writer.write( "" + ( (XmlPullParserException) cause ).getColumnNumber() );
-//            writer.write( NEWLINE );
-//
-//            result = true;
-//        }
-//        else if ( cause instanceof InvalidRepositoryException )
-//        {
-//            writer.write( NEWLINE );
-//            writer.write( "You have an invalid repository/pluginRepository declaration in your POM:" );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "Repository-Id: " );
-//            writer.write( ((InvalidRepositoryException)cause).getRepositoryId() );
-//            writer.write( NEWLINE );
-//            writer.write( NEWLINE );
-//            writer.write( "Reason: " );
-//            writer.write( cause.getMessage() );
-//            writer.write( NEWLINE );
-//
-//            result = true;
-//        }
-
+    // NOTE: This method is an aspect target.
-        // =====================================================================
-        // Cases covered (listed exceptions extend BuildFailureException):
-        // =====================================================================
-        //
-        // AggregatedBuildFailureException(String, MojoBinding, MojoFailureException)
-        //
-        // InvalidTaskException(TaskValidationResult, LifecycleLoaderException)
-        // InvalidTaskException(TaskValidationResult, LifecycleSpecificationException)
-        // InvalidTaskException(TaskValidationResult, PluginLoaderException)
-        //
-        // NoGoalsSpecifiedException(String)
-        //
-        // ProjectBuildFailureException(String, MojoBinding, MojoFailureException)
-        //
-        // ProjectCycleException(List, String, CycleDetectedException)
-
-        if ( e instanceof NoGoalsSpecifiedException )
-        {
-            writer.write( NEWLINE );
-            writer.write( "You have not specified any goals or lifecycle phases for Maven to execute." );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "Please, either specify a goal or lifecycle phase on the command line" );
-            writer.write( NEWLINE );
-            writer.write( "(you may want to try \'package\' to get started), or configure the " );
-            writer.write( NEWLINE );
-            writer.write( "<defaultGoal/> element in the build section of your project POM." );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "NOTE: You can also chain multiple goals/phases together, as in the following example:" );
-            writer.write( NEWLINE );
-            writer.write( "mvn clean package" );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "For more information about which goals and phases are available, see the following:" );
-            writer.write( NEWLINE );
-            writer.write( "- Maven in 5 Minutes guide (http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)" );
-            writer.write( NEWLINE );
-            writer.write( "- Maven User's documentation (http://maven.apache.org/users/)" );
-            writer.write( NEWLINE );
-            writer.write( "- Maven Plugins page (http://maven.apache.org/plugins/)" );
-            writer.write( NEWLINE );
-            writer.write( "- CodeHaus Mojos Project page (http://mojo.codehaus.org/plugins.html)" );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-
-            return true;
-        }
-        else if ( e instanceof AggregatedBuildFailureException )
-        {
-            writer.write( NEWLINE );
-            writer.write( "Mojo (aggregator): " );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "    " );
-            writer.write( MojoBindingUtils.toString( ( (AggregatedBuildFailureException) e ).getBinding() ) );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "FAILED while executing in directory:" );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "    " );
-            writer.write( ( (AggregatedBuildFailureException) e ).getExecutionRootDirectory() );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "Reason:" );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-
-            handleMojoFailureException( ( (AggregatedBuildFailureException) e ).getMojoFailureException(),
-                                        writer );
-
-            return true;
-        }
-        else if ( e instanceof ProjectBuildFailureException )
-        {
-            writer.write( NEWLINE );
-            writer.write( "Mojo: " );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "    " );
-            writer.write( MojoBindingUtils.toString( ( (ProjectBuildFailureException) e ).getBinding() ) );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "FAILED for project: " );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "    " );
-            writer.write( ( (ProjectBuildFailureException) e ).getProjectId() );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-            writer.write( "Reason:" );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-
-            handleMojoFailureException( ( (ProjectBuildFailureException) e ).getMojoFailureException(),
-                                        writer );
-
-            return true;
-        }
-        else if ( e instanceof InvalidTaskException )
-        {
-            String task = ( (InvalidTaskException) e ).getTask();
-            Throwable cause = e.getCause();
-
-            writer.write( NEWLINE );
-            writer.write( "Invalid mojo or lifecycle phase: " );
-            writer.write( task );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-
-            if ( cause instanceof PluginLoaderException )
-            {
-                writer.write( "Failed to load plugin: " );
-                writer.write( ( (PluginLoaderException) cause ).getPluginKey() );
-                writer.write( NEWLINE );
-                writer.write( NEWLINE );
-            }
-            else
-            {
-                writer.write( "Error message was: " );
-                writer.write( e.getMessage() );
-                writer.write( NEWLINE );
-                writer.write( NEWLINE );
-
-            }
-
-            if ( showStackTraces )
-            {
-                writer.write( "Original error:" );
-                writer.write( NEWLINE );
-                writer.write( NEWLINE );
-                handleGenericException( cause, showStackTraces, writer );
-            }
-            else
-            {
-                writer.write( "Original error message was: " );
-                writer.write( cause.getMessage() );
-                writer.write( NEWLINE );
-                writer.write( NEWLINE );
-            }
-
-            return true;
-        }
-        else if ( e instanceof ProjectCycleException )
-        {
-            writer.write( NEWLINE );
-            writer.write( "Maven has detected a cyclic relationship among a set of projects in the current build." );
-            writer.write( NEWLINE );
-            writer.write( "The projects involved are:" );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-
-            List projects = ( (ProjectCycleException) e ).getProjects();
-            for ( Iterator it = projects.iterator(); it.hasNext(); )
-            {
-                MavenProject project = (MavenProject) it.next();
-                writer.write( "- " );
-                writer.write( project.getId() );
-                writer.write( " (path: " );
-                writer.write( project.getFile().getPath() );
-                writer.write( ")" );
-                writer.write( NEWLINE );
-            }
-
-            writer.write( NEWLINE );
-            writer.write( "NOTE: This cycle usually indicates two projects listing one another as dependencies, but" );
-            writer.write( NEWLINE );
-            writer.write( "may also indicate one project using another as a parent, plugin, or extension." );
-            writer.write( NEWLINE );
-            writer.write( NEWLINE );
-
-            if ( showStackTraces )
-            {
-                writer.write( "Original error:" );
-                writer.write( NEWLINE );
-                writer.write( NEWLINE );
-
-                handleGenericException( ( (ProjectCycleException) e ).getCause(),
-                                        showStackTraces,
-                                        writer );
-
-                writer.write( NEWLINE );
-                writer.write( NEWLINE );
-            }
-
-            return true;
-        }
-
-        return false;
-    }
-
-    private static boolean handleMojoFailureException( MojoFailureException error,
-                                                       StringWriter writer )
-    {
-        String message = error.getLongMessage();
-        if ( message == null )
-        {
-            message = error.getMessage();
-        }
-
-        writer.write( message );
-        writer.write( NEWLINE );
-
+        handleGenericException( e, showStackTraces, writer );

INS8 MOV21 MOV41 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL9 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL9 DEL41 DEL8 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31