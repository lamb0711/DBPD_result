o Fixed model building to account for default values that can't be set in the MDO. The use case we have for this is the scope for dependencies: Setting this in the MDO would cause injection of the default in the raw model and would interfere with the superposition of dependency management. The 2.x code handles this via a side effect of MavenMetadataSource.createArtifact() which doesn't look like a clean way to go.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@782376 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Dependency;
+import org.codehaus.plexus.util.StringUtils;
+    public void injectDefaultValues( Model model, ModelBuildingRequest request )
+    {
+        injectDependencyDefaults( model.getDependencies() );
+
+        Build build = model.getBuild();
+        if ( build != null )
+        {
+            for ( Plugin plugin : build.getPlugins() )
+            {
+                injectDependencyDefaults( plugin.getDependencies() );
+            }
+        }
+    }
+
+    private void injectDependencyDefaults( List<Dependency> dependencies )
+    {
+        for ( Dependency dependency : dependencies )
+        {
+            if ( StringUtils.isEmpty( dependency.getScope() ) )
+            {
+                // we cannot set this directly in the MDO due to the interactions with dependency management
+                dependency.setScope( "compile" );
+            }
+        }
+    }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS43 INS42 INS21 INS60 INS25 INS74 INS42 INS70 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS43 INS44 INS42 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS44 INS32 INS8 INS42 INS32 INS8 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42