always use the nearest as that is the defined strategy for now. If we change the strategy to newest, a different approach is needed than just adjusting the node range as it doesn't take into account the right children.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@280489 13f79535-47bb-0310-9956-ffa450edef68

-        ArtifactVersion version = max( recommendedVersion, restriction.getRecommendedVersion() );
-
-        if ( version != null && restrictions.size() > 0 )
+        ArtifactVersion version = null;
+        if ( restrictions.size() > 0 )
-                if ( r.containsVersion( version ) )
+                if ( recommendedVersion != null && r.containsVersion( recommendedVersion ) )
+                    // if we find the original, use that
+                    version = recommendedVersion;
+                else if ( version == null && restriction.getRecommendedVersion() != null &&
+                    r.containsVersion( restriction.getRecommendedVersion() ) )
+                {
+                    // use this if we can, but prefer the original if possible
+                    version = restriction.getRecommendedVersion();
+                }
-
-            if ( !found )
-            {
-                version = null;
-            }
+        }
+        else
+        {
+            // no range, so the recommended version is valid
+            version = recommendedVersion;
-    private boolean containsVersion( ArtifactVersion version )
+    public boolean containsVersion( ArtifactVersion version )

MOV60 UPD83 MOV27 INS8 INS33 INS21 INS7 INS42 INS42 INS27 INS25 INS27 INS32 INS21 INS27 INS8 INS42 INS33 MOV42 MOV42 UPD42 MOV42 INS7 INS27 MOV32 INS21 INS42 INS42 INS27 INS27 UPD42 UPD42 INS7 INS42 INS33 INS32 INS33 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL27 DEL32 DEL42 DEL38 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25