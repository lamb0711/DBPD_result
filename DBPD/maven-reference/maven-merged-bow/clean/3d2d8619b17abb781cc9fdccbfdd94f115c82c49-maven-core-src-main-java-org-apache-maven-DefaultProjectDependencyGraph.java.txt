[MNG-5687] Parallel Builds can build in wrong order

Fixed JDK8 IT failure for MavenITmng3004ReactorFailureBehaviorMultithreadedTest#testitFailFastSingleThread

It turns out the execution order of the modules in the build can be incorrect, in some cases severely incorrect.
For parallel builds this can have all sorts of interesting side effects such as classpath
appearing to be intermittently incorrect, missing jars/resources and similar.

The -am options and -amd options may simply fail with the incorrect build order
because expected dependencies have not been built and actual dependencies may not have been built.

The underlying problem was that ProjectDependencyGraph#getDownstreamProjects and getUpstreamProjects
did not actually obey the reactor build order as defined by ProjectDependencyGraph#getSortedProjects,
even though the javadoc claims they should.

This has only worked by accident on earlier JDK's and might not have worked at all (basically
depends on Set iteration order being equal to insertion order). JDK8 has slightly different
iteration order, which caused the IT failure.

This problem may be the root cause of MNG-4996 and any other issue where the modules build
in incorrect order.

The bug affects:

parallel builds
command line -am (--also-make) option
command line -amd (also-make-dependents) option

On all java versions, although visibility might be somewhat different on different jdks.

Added simple unit test that catches the problem.

+import java.util.Set;
- * 
+ *
-     * 
+     *
-     * @throws DuplicateProjectException 
-     * @throws CycleDetectedException 
+     * @throws DuplicateProjectException
+     * @throws CycleDetectedException
-    public DefaultProjectDependencyGraph( Collection<MavenProject> projects ) throws CycleDetectedException, DuplicateProjectException
+    public DefaultProjectDependencyGraph( Collection<MavenProject> projects )
+        throws CycleDetectedException, DuplicateProjectException
-        Collection<String> projectIds = new HashSet<String>();
+        Set<String> projectIds = new HashSet<String>();
-        return getProjects( projectIds );
+        return getSortedProjects( projectIds );
-    private void getDownstreamProjects( String projectId, Collection<String> projectIds, boolean transitive )
+    private void getDownstreamProjects( String projectId, Set<String> projectIds, boolean transitive )
-        Collection<String> projectIds = new HashSet<String>();
+        Set<String> projectIds = new HashSet<String>();
-        return getProjects( projectIds );
+        return getSortedProjects( projectIds );
-    private List<MavenProject> getProjects( Collection<String> projectIds )
+    private List<MavenProject> getSortedProjects( Set<String> projectIds )
-        List<MavenProject> projects = new ArrayList<MavenProject>( projectIds.size() );
+        List<MavenProject> result = new ArrayList<MavenProject>( projectIds.size() );
-        for ( String projectId : projectIds )
+        for ( MavenProject mavenProject : sorter.getSortedProjects() )
-            MavenProject project = sorter.getProjectMap().get( projectId );
-
-            if ( project != null )
+            if ( projectIds.contains( ProjectSorter.getId( mavenProject ) ) )
-                projects.add( project );
+                result.add( mavenProject );
-        return projects;
+        return result;

INS26 INS40 UPD42 UPD74 UPD74 UPD74 UPD43 UPD74 UPD43 INS32 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 MOV43 UPD42 INS42 INS42 INS25 UPD42 UPD42 INS32 MOV8 INS42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 DEL66 DEL66 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25