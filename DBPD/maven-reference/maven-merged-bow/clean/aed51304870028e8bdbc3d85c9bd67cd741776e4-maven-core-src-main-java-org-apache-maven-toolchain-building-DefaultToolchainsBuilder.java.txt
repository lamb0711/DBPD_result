[MNG-6665] toolchain.xml file should support environment variables



-import java.io.IOException;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-import javax.inject.Inject;
-import javax.inject.Named;
-import javax.inject.Singleton;
-
+import org.apache.maven.toolchain.io.ToolchainsWriter;
+import org.codehaus.plexus.interpolation.EnvarBasedValueSource;
+import org.codehaus.plexus.interpolation.InterpolationException;
+import org.codehaus.plexus.interpolation.InterpolationPostProcessor;
+import org.codehaus.plexus.interpolation.RegexBasedInterpolator;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import java.io.IOException;
+import java.io.StringReader;
+import java.io.StringWriter;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
-    
+
+    @Inject
+    private ToolchainsWriter toolchainsWriter;
+
-        
+
+        userToolchains = interpolate( userToolchains, problems );
+
-        
-        
+
+
+    private PersistedToolchains interpolate( PersistedToolchains toolchains, ProblemCollector problems )
+    {
+
+        StringWriter stringWriter = new StringWriter( 1024 * 4 );
+        try
+        {
+            toolchainsWriter.write( stringWriter, null, toolchains );
+        }
+        catch ( IOException e )
+        {
+            throw new IllegalStateException( "Failed to serialize toolchains to memory", e );
+        }
+
+        String serializedToolchains = stringWriter.toString();
+
+        RegexBasedInterpolator interpolator = new RegexBasedInterpolator();
+
+        try
+        {
+            interpolator.addValueSource( new EnvarBasedValueSource() );
+        }
+        catch ( IOException e )
+        {
+            problems.add( Problem.Severity.WARNING, "Failed to use environment variables for interpolation: "
+                    + e.getMessage(), -1, -1, e );
+        }
+
+        interpolator.addPostProcessor( new InterpolationPostProcessor()
+        {
+            @Override
+            public Object execute( String expression, Object value )
+            {
+                if ( value != null )
+                {
+                    // we're going to parse this back in as XML so we need to escape XML markup
+                    value = value.toString().replace( "&", "&amp;" ).replace( "<", "&lt;" ).replace( ">", "&gt;" );
+                    return value;
+                }
+                return null;
+            }
+        } );
+
+        try
+        {
+            serializedToolchains = interpolator.interpolate( serializedToolchains );
+        }
+        catch ( InterpolationException e )
+        {
+            problems.add( Problem.Severity.ERROR, "Failed to interpolate toolchains: " + e.getMessage(), -1, -1, e );
+            return toolchains;
+        }
+
+        PersistedToolchains result;
+        try
+        {
+            Map<String, ?> options = Collections.singletonMap( ToolchainsReader.IS_STRICT, Boolean.FALSE );
+
+            result = toolchainsReader.read( new StringReader( serializedToolchains ), options );
+        }
+        catch ( IOException e )
+        {
+            problems.add( Problem.Severity.ERROR, "Failed to interpolate toolchains: " + e.getMessage(), -1, -1, e );
+            return toolchains;
+        }
+
+        return result;
+    }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS78 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS60 INS54 INS60 INS60 INS54 INS21 INS54 INS60 INS54 INS41 INS7 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS8 INS12 INS43 INS59 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS60 INS21 INS44 INS8 INS42 INS42 INS42 INS43 INS27 INS32 INS43 INS42 INS53 INS42 INS42 INS43 INS32 INS43 INS42 INS21 INS43 INS1 INS7 INS43 INS42 INS21 INS41 INS74 INS59 INS7 INS43 INS42 INS21 INS41 INS42 INS34 INS34 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS31 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS76 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS43 INS45 INS42 INS43 INS42 INS42 INS40 INS27 INS38 INS38 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS38 INS38 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS27 INS38 INS38 INS42 INS42 INS42 INS45 INS32 INS34 INS34 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS45 INS32 INS34 INS34 INS43 INS42 INS45 INS32 INS34 INS34 INS42 INS42 INS42 INS42 INS27 INS8 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS41 INS7 INS42 INS42 INS32 INS32 INS42 INS45 INS45 INS32 INS42 INS45 INS45 INS32 INS42 INS45 INS45 INS42 INS42