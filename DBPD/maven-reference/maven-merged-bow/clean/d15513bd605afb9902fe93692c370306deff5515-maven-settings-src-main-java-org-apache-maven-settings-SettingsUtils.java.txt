o Added sourceLevel (meaning global vs. user) to most base classes in the model, to track for the purposes of rewriting the user-level settings ONLY.

o Added an identity base class for many of these same base classes, to allow sorting/merging based on id (shallow merging) using a common piece of code.

o Added support for pluginUpdates (first pass) within the settings.xml, and support for merging this new section based on plugin key (g:a)

Working toward: MNG-379



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@190704 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.HashMap;
-
-    public static void merge( Settings dominant, Settings recessive )
+    
+    public static void merge( Settings dominant, Settings recessive, String recessiveSourceLevel )
+        
+        recessive.setSourceLevel( recessiveSourceLevel );
+                
+                dominant.setActiveProfileSourceLevel( profileId, recessiveSourceLevel );
+            
+            dominant.setLocalRepositorySourceLevel( recessiveSourceLevel );
-        List mergedMirrors = new ArrayList( dominant.getMirrors() );
+        shallowMergeById( dominant.getMirrors(), recessive.getMirrors(), recessiveSourceLevel );
+        shallowMergeById( dominant.getServers(), recessive.getServers(), recessiveSourceLevel );
+        shallowMergeById( dominant.getProxies(), recessive.getProxies(), recessiveSourceLevel );
+        shallowMergeById( dominant.getProfiles(), recessive.getProfiles(), recessiveSourceLevel );
-        List recessiveMirrors = recessive.getMirrors();
-
-        Map dominantMirrors = dominant.getMirrorsAsMap();
-
-        for ( Iterator it = recessiveMirrors.iterator(); it.hasNext(); )
+        shallowMergePluginUpdates( dominant, recessive.getPluginUpdates(), recessiveSourceLevel );
+    }
+    
+    private static void shallowMergePluginUpdates( Settings dominant, List recessive, String recessiveSourceLevel )
+    {
+        Map dominantByKey = dominant.getPluginUpdatesByKey();
+        
+        List dominantPluginUpdates = dominant.getPluginUpdates();
+        
+        for ( Iterator it = recessive.iterator(); it.hasNext(); )
-            Mirror recessiveMirror = (Mirror) it.next();
-
-            Mirror dominantMirror = (Mirror) dominantMirrors.get( recessiveMirror.getId() );
-
-            if ( dominantMirror == null )
+            PluginUpdate recessivePluginUpdate = (PluginUpdate) it.next();
+            
+            if( !dominantByKey.containsKey( recessivePluginUpdate.getKey() ) )
-                mergedMirrors.add( recessiveMirror );
+                recessivePluginUpdate.setSourceLevel( recessiveSourceLevel );
+                
+                dominantPluginUpdates.add( recessivePluginUpdate );
+        
+        dominant.flushPluginUpdatesByKey();
+    }
-        dominant.setMirrors( mergedMirrors );
-
-        List mergedServers = new ArrayList( dominant.getServers() );
-
-        List recessiveServers = recessive.getServers();
-
-        Map dominantServers = dominant.getServersAsMap();
-
-        for ( Iterator it = recessiveServers.iterator(); it.hasNext(); )
+    private static void shallowMergeById( List dominant, List recessive, String recessiveSourceLevel )
+    {
+        Map dominantById = mapById( dominant );
+        
+        for ( Iterator it = recessive.iterator(); it.hasNext(); )
-            Server recessiveServer = (Server) it.next();
-
-            if ( !dominantServers.containsKey( recessiveServer.getId() ) )
+            IdentifiableBase identifiable = (IdentifiableBase) it.next();
+            
+            if( !dominantById.containsKey(identifiable.getId()))
-                mergedServers.add( recessiveServer );
+                identifiable.setSourceLevel( recessiveSourceLevel );
+                
+                dominant.add( identifiable );
-
-        dominant.setServers( mergedServers );
-
-        List mergedProxies = new ArrayList( dominant.getProxies() );
-
-        List recessiveProxies = recessive.getProxies();
-
-        Map dominantProxies = dominant.getProxiesAsMap();
-
-        for ( Iterator it = recessiveProxies.iterator(); it.hasNext(); )
+    }
+    
+    private static Map mapById( List identifiables )
+    {
+        Map byId = new HashMap();
+        
+        for ( Iterator it = identifiables.iterator(); it.hasNext(); )
-            Proxy recessiveProxy = (Proxy) it.next();
-
-            if ( !dominantProxies.containsKey( recessiveProxy ) )
-            {
-                mergedProxies.add( recessiveProxy );
-            }
+            IdentifiableBase identifiable = (IdentifiableBase) it.next();
+            
+            byId.put( identifiable.getId(), identifiable );
-
-        dominant.setProxies( mergedProxies );
-
-        List mergedProfiles = new ArrayList( dominant.getProfiles() );
-
-        List recessiveProfiles = recessive.getProfiles();
-
-        Map dominantProfiles = dominant.getProfilesAsMap();
-
-        for ( Iterator it = recessiveProfiles.iterator(); it.hasNext(); )
-        {
-            Profile recessiveProfile = (Profile) it.next();
-
-            if ( !dominantProfiles.containsKey( recessiveProfile.getId() ) )
-            {
-                mergedProfiles.add( recessiveProfile );
-            }
-        }
-
-        dominant.setProfiles( mergedProfiles );
-
+        
+        return byId;

UPD40 INS31 INS31 INS31 INS31 MOV83 MOV83 MOV39 MOV42 MOV44 MOV44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 MOV43 INS42 INS44 INS8 INS43 INS42 MOV25 INS21 MOV60 MOV60 MOV24 MOV25 INS21 INS21 INS21 INS21 INS21 INS43 INS42 MOV43 INS42 INS43 INS42 INS60 MOV60 MOV24 MOV21 MOV43 INS42 MOV43 INS42 INS43 INS42 MOV60 MOV24 MOV43 INS42 MOV60 MOV24 INS41 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 INS42 MOV43 INS59 MOV43 UPD42 MOV42 MOV43 INS42 INS42 INS42 INS42 INS21 UPD42 MOV42 MOV32 MOV32 UPD42 MOV42 INS42 MOV32 MOV32 INS42 UPD42 MOV42 MOV32 MOV32 UPD42 MOV42 UPD42 MOV42 MOV32 MOV32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS21 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD43 INS42 UPD43 UPD43 UPD43 INS32 INS21 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS21 UPD42 UPD42 UPD42 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 INS32 UPD43 UPD42 INS32 UPD43 UPD42 INS32 INS32 UPD43 UPD42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 DEL42 DEL42 DEL42 DEL43 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL58 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31