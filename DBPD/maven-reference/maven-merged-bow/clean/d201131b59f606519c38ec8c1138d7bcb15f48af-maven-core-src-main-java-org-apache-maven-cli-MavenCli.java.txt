(merged from 382460.) [MNG-1415] Added quoted-argument reconstruction to MavenCLI, and quote preservation to the shell scripts. Both are necessary to fix this issue. Test is it0098.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@382461 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+            // We need to eat any quotes surrounding arguments...
+            String[] cleanArgs = cleanArgs( args );
+            
-            return parser.parse( options, args );
+            return parser.parse( options, cleanArgs );
+        }
+        
+        private String[] cleanArgs( String[] args )
+        {
+            List cleaned = new ArrayList();
+            
+            StringBuffer currentArg = null;
+            
+            for ( int i = 0; i < args.length; i++ )
+            {
+                String arg = args[i];
+                
+//                System.out.println( "Processing raw arg: " + arg );
+                
+                boolean addedToBuffer = false;
+                
+                if ( arg.startsWith( "\"" ) )
+                {
+                    // if we're in the process of building up another arg, push it and start over.
+                    // this is for the case: "-Dfoo=bar "-Dfoo2=bar two" (note the first unterminated quote)
+                    if ( currentArg != null )
+                    {
+//                        System.out.println( "Flushing last arg buffer: \'" + currentArg + "\' to cleaned list." );
+                        cleaned.add( currentArg.toString() );
+                    }
+                    
+                    // start building an argument here.
+                    currentArg = new StringBuffer( arg.substring( 1 ) );
+                    addedToBuffer = true;
+                }
+                
+                // this has to be a separate "if" statement, to capture the case of: "-Dfoo=bar"
+                if ( arg.endsWith( "\"" ) )
+                {
+                    String cleanArgPart = arg.substring( 0, arg.length() - 1 );
+                    
+                    // if we're building an argument, keep doing so.
+                    if ( currentArg != null )
+                    {
+                        // if this is the case of "-Dfoo=bar", then we need to adjust the buffer.
+                        if ( addedToBuffer )
+                        {
+//                            System.out.println( "Adjusting argument already appended to the arg buffer." );
+                            currentArg.setLength( currentArg.length() - 1 );
+                        }
+                        // otherwise, we trim the trailing " and append to the buffer.
+                        else
+                        {
+//                            System.out.println( "Appending arg part: \'" + cleanArgPart + "\' with preceding space to arg buffer." );
+                            // TODO: introducing a space here...not sure what else to do but collapse whitespace
+                            currentArg.append( ' ' ).append( cleanArgPart );
+                        }
+                        
+//                        System.out.println( "Flushing completed arg buffer: \'" + currentArg + "\' to cleaned list." );
+                        
+                        // we're done with this argument, so add it.
+                        cleaned.add( currentArg.toString() );
+                    }
+                    else
+                    {
+//                        System.out.println( "appending cleaned arg: \'" + cleanArgPart + "\' directly to cleaned list." );
+                        // this is a simple argument...just add it.
+                        cleaned.add( cleanArgPart );
+                    }
+                    
+//                    System.out.println( "Clearing arg buffer." );
+                    // the currentArg MUST be finished when this completes.
+                    currentArg = null;
+                    continue;
+                }
+                
+                // if we haven't added this arg to the buffer, and we ARE building an argument
+                // buffer, then append it with a preceding space...again, not sure what else to
+                // do other than collapse whitespace.
+                // NOTE: The case of a trailing quote is handled by nullifying the arg buffer.
+                if ( !addedToBuffer )
+                {
+                    // append to the argument we're building, collapsing whitespace to a single space.
+                    if ( currentArg != null )
+                    {
+//                        System.out.println( "Append unquoted arg part: \'" + arg + "\' to arg buffer." );
+                        currentArg.append( ' ' ).append( arg );
+                    }
+                    // this is a loner, just add it directly.
+                    else
+                    {
+//                        System.out.println( "Append unquoted arg part: \'" + arg + "\' directly to cleaned list." );
+                        cleaned.add( arg );
+                    }
+                }
+            }
+            
+            // clean up.
+            if ( currentArg != null )
+            {
+//                System.out.println( "Adding unterminated arg buffer: \'" + currentArg + "\' to cleaned list." );
+                cleaned.add( currentArg.toString() );
+            }
+            
+            int cleanedSz = cleaned.size();
+            String[] cleanArgs = null;
+            
+            if ( cleanedSz == 0 )
+            {
+                // if we didn't have any arguments to clean, simply pass the original array through
+                cleanArgs = args;
+            }
+            else
+            {
+//                System.out.println( "Cleaned argument list:\n" + cleaned );
+                cleanArgs = (String[]) cleaned.toArray( new String[cleanedSz] );
+            }
+            
+            return cleanArgs;

INS26 INS26 INS40 INS40 INS31 INS83 INS5 INS42 INS44 INS8 INS60 INS43 INS85 INS5 INS42 INS60 INS60 INS24 INS25 INS60 INS60 INS25 INS41 INS5 INS59 INS42 INS43 INS85 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS39 INS59 INS5 INS59 INS27 INS8 INS8 INS42 INS43 INS85 INS42 INS32 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 INS33 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS25 INS25 INS42 INS33 INS21 INS42 INS32 INS43 INS85 INS42 INS33 INS42 INS34 INS21 INS21 INS42 INS42 INS42 INS43 INS42 INS34 INS43 INS59 INS39 INS59 INS32 INS8 INS32 INS8 INS38 INS8 INS32 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS2 INS42 INS9 INS42 INS42 INS45 INS25 INS21 INS21 INS42 INS42 INS45 INS60 INS25 INS21 INS18 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS8 INS7 INS7 INS43 INS59 INS27 INS8 INS8 INS7 INS27 INS8 INS8 INS42 INS42 INS5 INS32 INS42 INS33 INS21 INS42 INS14 INS42 INS9 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS21 INS42 INS33 INS42 INS33 INS21 INS21 INS43 INS85 INS42 INS42 INS3 INS32 INS43 INS32 INS42 INS42 INS34 INS27 INS42 INS8 INS8 INS32 INS32 INS32 INS32 INS42 INS5 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS34 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS34 INS42 INS42 INS13 INS42 INS42