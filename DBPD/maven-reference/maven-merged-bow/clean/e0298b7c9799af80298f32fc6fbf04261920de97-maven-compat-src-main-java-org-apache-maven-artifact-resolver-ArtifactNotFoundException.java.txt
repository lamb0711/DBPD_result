o first pass at setting up error handling for each possible error condition
 - this resulted in cleaning up some exceptions in plexus so that they might message could be surfaced in Maven
o move the plugin prefix searching to the lifecycle executor and get it out of the plugin manager
o add capability to the RepositorySystem to get plain resources from a repository. I'm going simple with the repository group
  metadata and I will just get the file directly as the only implementation is the plugin group metadata. the system is 
  not easily or generally extensible so i'll just take what I need



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@776412 13f79535-47bb-0310-9956-ffa450edef68

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @author <a href="mailto:jason@maven.org">Jason van Zyl</a>
- * @version $Id$
+ * @author Jason van Zyl
-    protected ArtifactNotFoundException( String message,
-                                         Artifact artifact,
-                                         List<ArtifactRepository> remoteRepositories )
+    protected ArtifactNotFoundException( String message, Artifact artifact, List<ArtifactRepository> remoteRepositories )
-    public ArtifactNotFoundException( String message,
-                                      Artifact artifact )
+    public ArtifactNotFoundException( String message, Artifact artifact )
-        this( message, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(),
-            artifact.getClassifier(), null, artifact.getDownloadUrl(), artifact.getDependencyTrail() );
+        this( message, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(), artifact.getClassifier(), null, artifact.getDownloadUrl(), artifact
+            .getDependencyTrail() );
-    protected ArtifactNotFoundException( String message,
-                                         Artifact artifact,
-                                         List<ArtifactRepository> remoteRepositories,
-                                         ResourceDoesNotExistException cause )
+    protected ArtifactNotFoundException( String message, Artifact artifact, List<ArtifactRepository> remoteRepositories, ResourceDoesNotExistException cause )
-        this( message, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(),
-            artifact.getClassifier(),
-            remoteRepositories, artifact.getDownloadUrl(), artifact.getDependencyTrail(), cause );
+        this( message, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(), artifact.getClassifier(), remoteRepositories, artifact.getDownloadUrl(), artifact
+            .getDependencyTrail(), cause );
-    @Deprecated
-    protected ArtifactNotFoundException( String message,
-                                         Artifact artifact,
-                                         List<ArtifactRepository> remoteRepositories,
-                                         Throwable cause )
+    public ArtifactNotFoundException( String message, String groupId, String artifactId, String version, String type, String classifier, List<ArtifactRepository> remoteRepositories,
+                                      String downloadUrl, List path, ResourceDoesNotExistException cause )
-        this( message, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(),
-            artifact.getClassifier(),
-            remoteRepositories, artifact.getDownloadUrl(), artifact.getDependencyTrail(), cause );
-    }
-
-    @Deprecated
-    public ArtifactNotFoundException( String message,
-                                      String groupId,
-                                      String artifactId,
-                                      String version,
-                                      String type,
-                                      String classifier,
-                                      List<ArtifactRepository> remoteRepositories,
-                                      String downloadUrl,
-                                      List path,
-                                      Throwable cause )
-    {
-        super( constructMissingArtifactMessage( message, "", groupId, artifactId, version, type, classifier,
-            downloadUrl, path ), groupId, artifactId,
-            version, type, classifier, remoteRepositories, null, cause );
+        super( constructMissingArtifactMessage( message, "", groupId, artifactId, version, type, classifier, downloadUrl, path ), groupId, artifactId, version, type, classifier, remoteRepositories,
+               null, cause );
-    public ArtifactNotFoundException( String message,
-                                      String groupId,
-                                      String artifactId,
-                                      String version,
-                                      String type,
-                                      String classifier,
-                                      List<ArtifactRepository> remoteRepositories,
-                                      String downloadUrl,
-                                      List path,
-                                      ResourceDoesNotExistException cause )
+    private ArtifactNotFoundException( String message, String groupId, String artifactId, String version, String type, String classifier, List<ArtifactRepository> remoteRepositories,
+                                       String downloadUrl, List path )
-        super( constructMissingArtifactMessage( message, "", groupId, artifactId, version, type, classifier,
-            downloadUrl, path ), groupId, artifactId,
-            version, type, classifier, remoteRepositories, null, cause );
-
-        this.downloadUrl = downloadUrl;
-    }
-
-    private ArtifactNotFoundException( String message,
-                                       String groupId,
-                                       String artifactId,
-                                       String version,
-                                       String type,
-                                       String classifier,
-                                       List<ArtifactRepository> remoteRepositories,
-                                       String downloadUrl,
-                                       List path )
-    {
-        super( constructMissingArtifactMessage( message, "", groupId, artifactId, version, type, classifier,
-            downloadUrl, path ), groupId, artifactId,
-            version, type, classifier, remoteRepositories, null );
+        super( constructMissingArtifactMessage( message, "", groupId, artifactId, version, type, classifier, downloadUrl, path ), groupId, artifactId, version, type, classifier, remoteRepositories,
+               null );

UPD66 DEL66 DEL65 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL17 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31