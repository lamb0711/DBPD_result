More model builder classes and tests.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@751503 13f79535-47bb-0310-9956-ffa450edef68

-public abstract class BaseProcessor {
-	
-	Object parent;
-	
-	Object child;
-	
-	Collection<Processor> processors;
-	
-	public BaseProcessor(Collection<Processor> processors) 
-	{
-		if(processors == null)
-		{
-			throw new IllegalArgumentException("processors: null");
-		}
-		
-		this.processors = processors;
-	}	
-	
-	public BaseProcessor()
-	{
-		this.processors = new ArrayList<Processor>();
-	}
-	
-	public void process(Object parent, Object child, Object target, boolean isChildMostSpecialized)
-	{
-		if(child == null)
-		{
-			throw new IllegalArgumentException("child: null");
-		}
-		
-		if(target == null)
-		{
-			throw new IllegalArgumentException("target: null");
-		}
-		
-		this.parent = parent;
-		this.child = child;
-		
-		for(Processor processor : processors)
-		{
-			processor.process(parent, child, target, isChildMostSpecialized);	
-		}		
-		
-	}
-	
-	public Object getChild() {
-		return child;
-	}
+public abstract class BaseProcessor
+{
-	public Object getParent() {
-		return parent;
-	}	
+    Object parent;
+
+    Object child;
+
+    Collection<Processor> processors;
+
+    public BaseProcessor( Collection<Processor> processors )
+    {
+        if ( processors == null )
+        {
+            throw new IllegalArgumentException( "processors: null" );
+        }
+
+        this.processors = processors;
+    }
+
+    public BaseProcessor()
+    {
+        this.processors = new ArrayList<Processor>();
+    }
+
+    public void process( Object parent, Object child, Object target, boolean isChildMostSpecialized )
+    {
+        if ( target == null )
+        {
+            throw new IllegalArgumentException( "target: null" );
+        }
+
+        this.parent = parent;
+        this.child = child;
+
+        for ( Processor processor : processors )
+        {
+            processor.process( parent, child, target, isChildMostSpecialized );
+        }
+
+    }
+
+    public Object getChild()
+    {
+        return child;
+    }
+
+    public Object getParent()
+    {
+        return parent;
+    }

DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25