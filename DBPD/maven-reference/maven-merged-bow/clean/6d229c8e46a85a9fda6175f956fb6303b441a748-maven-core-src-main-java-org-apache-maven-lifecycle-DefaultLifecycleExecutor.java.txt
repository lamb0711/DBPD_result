o giving shane a handle on how to grab default plugin information as i've removed all the diddling in the plugin manager itself


git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@769637 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.codehaus.plexus.configuration.PlexusConfiguration;
+import org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;
+import org.codehaus.plexus.util.xml.Xpp3Dom;
-                        MojoDescriptor md = getMojoDescriptor( s, session, project );
+                        MojoDescriptor md = getMojoDescriptor( s, session.getCurrentProject(), session.getLocalRepository() );
-                lifecyclePlan.add( getMojoDescriptor( mojo, session, project ) );
+                lifecyclePlan.add( getMojoDescriptor( mojo, project, session.getLocalRepository() ) );
-    MojoDescriptor getMojoDescriptor( String task, MavenSession session, MavenProject project )
+    MojoDescriptor getMojoDescriptor( String task, MavenProject project, ArtifactRepository localRepository )
+    //MojoDescriptor getMojoDescriptor( String groupId, String artifactId, String version, String goal, MavenProject project, ArtifactRepository localRepository )
-            plugin = pluginManager.findPluginForPrefix( prefix, project, session );
+            plugin = pluginManager.findPluginForPrefix( prefix, project );
-                        desc = pluginManager.loadPlugin( buildPlugin, project, session );
+                        desc = pluginManager.loadPlugin( buildPlugin, project, localRepository );
-            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, session );
+            mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, project, localRepository );
-    }    
+    }   
+    
+    public Xpp3Dom getDefaultPluginConfiguration( String groupId, String artifactId, String version, String goal, MavenProject project, ArtifactRepository localRepository ) 
+        throws LifecycleExecutionException
+    {
+        return convert( getMojoDescriptor( groupId+":"+artifactId+":"+version+":"+goal, project, localRepository ).getMojoConfiguration() );
+    }
+    
+    public Xpp3Dom getMojoConfiguration( MojoDescriptor mojoDescriptor )
+    {
+        PlexusConfiguration configuration = mojoDescriptor.getConfiguration();
+        
+        return convert( configuration );
+    }
+    
+    public Xpp3Dom convert( PlexusConfiguration c )
+    {
+        Xpp3Dom dom = new Xpp3Dom( "configuration" );
+        
+        PlexusConfiguration[] ces = c.getChildren();
+        
+        for( PlexusConfiguration ce : ces )
+        {
+            Xpp3Dom e = new Xpp3Dom( ce.getName() );
+            e.setValue( ce.getValue( ce.getAttribute( "default-value", null ) ) );
+            dom.addChild( e );            
+        }
+
+        return dom;
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV44 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 UPD43 UPD42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS42 INS60 INS60 INS70 INS41 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS5 INS59 INS44 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS43 INS85 INS42 INS32 INS43 INS42 INS60 INS21 INS21 INS32 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS33 INS42 INS32 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL42