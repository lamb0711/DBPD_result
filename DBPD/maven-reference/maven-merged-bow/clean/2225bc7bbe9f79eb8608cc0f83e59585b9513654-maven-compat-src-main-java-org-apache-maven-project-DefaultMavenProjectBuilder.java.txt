[MNG-4765] Failing to determine java version for profile....

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@987335 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Properties;
+import org.apache.maven.properties.internal.EnvironmentUtils;
-    public MavenProject build( File pomFile, ProjectBuilderConfiguration configuration )
-        throws ProjectBuildingException
+    private ProjectBuildingRequest toRequest( ProjectBuilderConfiguration configuration )
-        return projectBuilder.build( pomFile, configuration ).getProject();
+        DefaultProjectBuildingRequest request = new DefaultProjectBuildingRequest();
+
+        request.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 );
+        request.setResolveDependencies( false );
+
+        request.setLocalRepository( configuration.getLocalRepository() );
+        request.setBuildStartTime( configuration.getBuildStartTime() );
+        request.setUserProperties( configuration.getUserProperties() );
+        request.setSystemProperties( configuration.getExecutionProperties() );
+
+        ProfileManager profileManager = configuration.getGlobalProfileManager();
+        if ( profileManager != null )
+        {
+            request.setActiveProfileIds( profileManager.getExplicitlyActivatedIds() );
+            request.setInactiveProfileIds( profileManager.getExplicitlyDeactivatedIds() );
+        }
+
+        return request;
-    public MavenProject buildFromRepository( Artifact artifact, ProjectBuilderConfiguration configuration, boolean allowStubModel )
-        throws ProjectBuildingException
+    private ProjectBuildingRequest injectSession( ProjectBuildingRequest request )
-        normalizeToArtifactRepositories( configuration );
+        MavenSession session = legacySupport.getSession();
+        if ( session != null )
+        {
+            request.setOffline( session.isOffline() );
+            request.setSystemProperties( session.getSystemProperties() );
+            if ( request.getUserProperties().isEmpty() )
+            {
+                request.setUserProperties( session.getUserProperties() );
+            }
-        return projectBuilder.build( artifact, allowStubModel, configuration ).getProject();
+            MavenExecutionRequest req = session.getRequest();
+            if ( req != null )
+            {
+                request.setServers( req.getServers() );
+                request.setMirrors( req.getMirrors() );
+                request.setProxies( req.getProxies() );
+                request.setRemoteRepositories( req.getRemoteRepositories() );
+                request.setTransferListener( req.getTransferListener() );
+                request.setForceUpdate( req.isUpdateSnapshots() );
+            }
+        }
+        else
+        {
+            Properties props = new Properties();
+            EnvironmentUtils.addEnvVars( props );
+            props.putAll( System.getProperties() );
+            request.setSystemProperties( props );
+        }
+
+        return request;
-    private void normalizeToArtifactRepositories( ProjectBuilderConfiguration configuration )
+    @SuppressWarnings( "unchecked" )
+    private List<ArtifactRepository> normalizeToArtifactRepositories( List<?> repositories,
+                                                                      ProjectBuildingRequest request )
-        List<?> repositories = configuration.getRemoteRepositories();
-
-                        repositorySystem.injectMirror( Arrays.asList( repo ), configuration.getMirrors() );
-                        repositorySystem.injectProxy( Arrays.asList( repo ), configuration.getProxies() );
-                        repositorySystem.injectAuthentication( Arrays.asList( repo ), configuration.getServers() );
+                        repositorySystem.injectMirror( Arrays.asList( repo ), request.getMirrors() );
+                        repositorySystem.injectProxy( Arrays.asList( repo ), request.getProxies() );
+                        repositorySystem.injectAuthentication( Arrays.asList( repo ), request.getServers() );
-                configuration.setRemoteRepositories( repos );
+                return repos;
+
+        return (List<ArtifactRepository>) repositories;
+    }
+
+    private ProjectBuildingException transformError( ProjectBuildingException e )
+    {
+        if ( e.getCause() instanceof ModelBuildingException )
+        {
+            return new InvalidProjectModelException( e.getProjectId(), e.getMessage(), e.getPomFile() );
+        }
+
+        return e;
+    }
+
+    public MavenProject build( File pom, ProjectBuilderConfiguration configuration )
+        throws ProjectBuildingException
+    {
+        ProjectBuildingRequest request = injectSession( toRequest( configuration ) );
+
+        try
+        {
+            return projectBuilder.build( pom, request ).getProject();
+        }
+        catch ( ProjectBuildingException e )
+        {
+            throw transformError( e );
+        }
-    public MavenProject build( File project, ArtifactRepository localRepository, ProfileManager profileManager )
+    public MavenProject build( File pom, ArtifactRepository localRepository, ProfileManager profileManager )
-        ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration()
-            .setLocalRepository( localRepository );
+        ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();
+        configuration.setLocalRepository( localRepository );
+        configuration.setGlobalProfileManager( profileManager );
-        return build( project, configuration );
+        return build( pom, configuration );
+    }
+
+    public MavenProject buildFromRepository( Artifact artifact, List<ArtifactRepository> remoteRepositories,
+                                             ProjectBuilderConfiguration configuration, boolean allowStubModel )
+        throws ProjectBuildingException
+    {
+        ProjectBuildingRequest request = injectSession( toRequest( configuration ) );
+        request.setRemoteRepositories( normalizeToArtifactRepositories( remoteRepositories, request ) );
+        request.setProcessPlugins( false );
+        request.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
+
+        try
+        {
+            return projectBuilder.build( artifact, allowStubModel, request ).getProject();
+        }
+        catch ( ProjectBuildingException e )
+        {
+            throw transformError( e );
+        }
-        configuration.setRemoteRepositories( remoteRepositories );
-        configuration.setProcessPlugins( false );
-        configuration.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
-        MavenSession session = legacySupport.getSession();
-        if ( session != null )
-        {
-            MavenExecutionRequest request = session.getRequest();
-            if ( request != null )
-            {
-                configuration.setServers( request.getServers() );
-                configuration.setMirrors( request.getMirrors() );
-                configuration.setProxies( request.getProxies() );
-                configuration.setTransferListener( request.getTransferListener() );
-                configuration.setForceUpdate( request.isUpdateSnapshots() );
-            }
-            configuration.setOffline( session.isOffline() );
-            configuration.setSystemProperties( session.getSystemProperties() );
-            configuration.setUserProperties( session.getUserProperties() );
-        }
-        else
-        {
-            configuration.setSystemProperties( System.getProperties() );
-        }
-
-        try
-        {
-            return buildFromRepository( artifact, configuration, allowStubModel );
-        }
-        catch ( ProjectBuildingException e )
-        {
-            if ( e.getCause() instanceof ModelBuildingException )
-            {
-                throw new InvalidProjectModelException( e.getProjectId(), e.getMessage(), e.getPomFile() );
-            }
-
-            throw e;
-        }
+        return buildFromRepository( artifact, remoteRepositories, configuration, allowStubModel );
-     * This is used for pom-less execution like running archetype:generate.
-     *
-     * I am taking out the profile handling and the interpolation of the base directory until we
-     * spec this out properly.
+     * This is used for pom-less execution like running archetype:generate. I am taking out the profile handling and the
+     * interpolation of the base directory until we spec this out properly.
-    public MavenProject buildStandaloneSuperProject( ProjectBuilderConfiguration config )
+    public MavenProject buildStandaloneSuperProject( ProjectBuilderConfiguration configuration )
+        ProjectBuildingRequest request = injectSession( toRequest( configuration ) );
+        request.setProcessPlugins( false );
+        request.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
+
-        MavenProject project = projectBuilder.build( modelSource, config ).getProject();
+
+        MavenProject project = projectBuilder.build( modelSource, request ).getProject();
-        configuration.setProcessPlugins( false );
-        configuration.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
-
-        if ( profileManager != null )
-        {
-            configuration.setActiveProfileIds( profileManager.getExplicitlyActivatedIds() );
-            configuration.setInactiveProfileIds( profileManager.getExplicitlyDeactivatedIds() );
-        }
+        configuration.setGlobalProfileManager( profileManager );
-    public MavenProject buildWithDependencies( File project, ArtifactRepository localRepository,
+    public MavenProject buildWithDependencies( File pom, ArtifactRepository localRepository,
-
+        configuration.setGlobalProfileManager( profileManager );
-        if ( profileManager != null )
+        ProjectBuildingRequest request = injectSession( toRequest( configuration ) );
+
+        request.setResolveDependencies( true );
+
+        try
-            configuration.setActiveProfileIds( profileManager.getExplicitlyActivatedIds() );
-            configuration.setInactiveProfileIds( profileManager.getExplicitlyDeactivatedIds() );
+            return projectBuilder.build( pom, request ).getProject();
-
-        configuration.setResolveDependencies( true );
-
-        return build( project, configuration );
+        catch ( ProjectBuildingException e )
+        {
+            throw transformError( e );
+        }
-    public MavenProject buildWithDependencies( File project, ArtifactRepository localRepository,
+    public MavenProject buildWithDependencies( File pom, ArtifactRepository localRepository,
-        return buildWithDependencies( project, localRepository, profileManager, null );
+        return buildWithDependencies( pom, localRepository, profileManager, null );

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 MOV83 INS43 INS42 MOV44 INS8 UPD83 MOV83 INS43 INS42 INS44 INS8 INS79 INS74 INS44 INS44 INS83 MOV43 INS42 MOV44 MOV8 INS83 MOV43 INS42 MOV44 MOV44 MOV43 INS8 INS83 MOV43 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS83 MOV43 INS42 MOV44 MOV44 INS44 MOV44 MOV43 INS8 INS83 MOV43 INS42 MOV44 INS44 MOV44 MOV44 INS43 INS8 MOV44 MOV44 MOV43 MOV44 MOV44 MOV44 MOV43 INS42 INS60 INS21 INS21 MOV21 INS21 INS21 INS21 MOV60 MOV25 MOV41 INS42 INS43 INS42 MOV60 INS25 INS41 INS42 INS45 INS43 INS43 MOV74 INS42 INS43 INS42 INS41 INS41 UPD42 INS60 INS54 UPD42 MOV60 MOV21 INS21 INS41 INS43 INS42 INS60 INS21 INS21 INS21 INS54 INS74 INS42 INS42 MOV60 MOV21 MOV41 INS60 INS21 INS21 UPD42 INS60 MOV21 MOV21 INS60 INS54 UPD42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 UPD43 INS42 INS42 MOV27 INS8 MOV8 INS42 INS42 INS42 INS42 INS11 INS42 INS43 INS59 INS8 INS12 INS32 INS32 INS42 INS43 INS59 INS32 INS32 INS32 INS8 INS12 INS43 INS43 UPD66 UPD66 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS9 INS42 UPD42 INS32 INS42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV21 MOV21 INS25 MOV60 MOV25 INS60 INS21 INS21 INS74 INS42 INS41 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS40 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS40 UPD42 INS42 INS42 INS42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV41 INS44 INS8 UPD42 INS43 MOV42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS32 INS8 INS43 INS59 INS32 INS32 INS43 INS43 MOV14 INS42 INS32 INS32 INS43 INS42 INS53 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS43 INS42 INS32 INS32 INS43 INS42 INS53 INS42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 MOV21 UPD42 UPD42 INS21 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 MOV32 MOV32 UPD42 UPD42 UPD42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL53 DEL42 DEL53 DEL83 DEL42 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL32 DEL21 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL42 DEL43 DEL42 DEL44 DEL9 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL25 DEL32