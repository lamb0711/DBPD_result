try-with-resources

Reformatted to code style by me. This fixes #53

-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.Reader;
-import java.io.Writer;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.codehaus.plexus.util.IOUtil;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
-                        getLogger().debug(
-                                           "Skipping update check for " + metadata.getKey() + " (" + file
+                        getLogger().debug( "Skipping update check for " + metadata.getKey() + " (" + file
-                                           "Skipping update check for " + metadata.getKey() + " (" + file
-                                               + ") from repository " + repository.getId() + " (" + repository.getUrl()
-                                               + ") in favor of local copy" );
+                            "Skipping update check for " + metadata.getKey() + " (" + file + ") from repository "
+                                + repository.getId() + " (" + repository.getUrl() + ") in favor of local copy" );
-            throw new RepositoryMetadataResolutionException( "Unable to store local copy of metadata: "
-                + e.getMessage(), e );
+            throw new RepositoryMetadataResolutionException(
+                "Unable to store local copy of metadata: " + e.getMessage(), e );
-                                  ArtifactRepository localRepository, Map<ArtifactRepository,
-                                  Metadata> previousMetadata )
+                                  ArtifactRepository localRepository,
+                                  Map<ArtifactRepository, Metadata> previousMetadata )
-        File metadataFile =
-            new File( localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata( repoMetadata,
-                                                                                                   remoteRepository ) );
+        File metadataFile = new File( localRepository.getBasedir(),
+                                      localRepository.pathOfLocalRepositoryMetadata( repoMetadata, remoteRepository ) );
-    /** @todo share with DefaultPluginMappingManager. */
+    /**
+     * @todo share with DefaultPluginMappingManager.
+     */
-        Reader reader = null;
-        try
+        try ( Reader reader = ReaderFactory.newXmlReader( mappingFile ) )
-            reader = ReaderFactory.newXmlReader( mappingFile );
-
-            throw new RepositoryMetadataReadException( "Cannot read metadata from '" + mappingFile + "': "
-                + e.getMessage(), e );
+            throw new RepositoryMetadataReadException(
+                "Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e );
-        finally
-        {
-            IOUtil.close( reader );
-        }
-
-                                      "The last updated timestamp in " + metadataFile + " refers to the future (now = "
-                                          + now + ", lastUpdated = " + lastUpdated
-                                          + "). Please verify that the clocks of all"
-                                          + " deploying machines are reasonably synchronized." );
+                        "The last updated timestamp in " + metadataFile + " refers to the future (now = " + now
+                            + ", lastUpdated = " + lastUpdated + "). Please verify that the clocks of all"
+                            + " deploying machines are reasonably synchronized." );
-            Writer writer = null;
-            try
+            try ( Writer writer = WriterFactory.newXmlWriter( metadataFile ) )
-                writer = WriterFactory.newXmlWriter( metadataFile );
-            finally
-            {
-                IOUtil.close( writer );
-            }
-            throw new RepositoryMetadataResolutionException( metadata + " could not be retrieved from repository: "
-                + remoteRepository.getId() + " due to an error: " + e.getMessage(), e );
+            throw new RepositoryMetadataResolutionException(
+                metadata + " could not be retrieved from repository: " + remoteRepository.getId() + " due to an error: "
+                    + e.getMessage(), e );
-    private File getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metadata,
-                                                              ArtifactRepository localRepo,
+    private File getArtifactMetadataFromDeploymentRepository( ArtifactMetadata metadata, ArtifactRepository localRepo,
-            getLogger().info( metadata + " could not be found on repository: " + remoteRepository.getId()
-                                  + ", so will be created" );
+            getLogger().info(
+                metadata + " could not be found on repository: " + remoteRepository.getId() + ", so will be created" );
-                throw new RepositoryMetadataDeploymentException( metadata + " could not be retrieved from repository: "
-                    + deploymentRepository.getId() + " due to an error: " + e.getMessage(), e );
+                throw new RepositoryMetadataDeploymentException(
+                    metadata + " could not be retrieved from repository: " + deploymentRepository.getId()
+                        + " due to an error: " + e.getMessage(), e );
-            file =
-                new File( localRepository.getBasedir(),
-                          localRepository.pathOfLocalRepositoryMetadata( metadata, deploymentRepository ) );
+            file = new File( localRepository.getBasedir(),
+                             localRepository.pathOfLocalRepositoryMetadata( metadata, deploymentRepository ) );

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD66 INS58 MOV43 INS59 INS42 MOV32 INS58 MOV43 INS59 INS42 MOV32 DEL40 DEL26 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8