Cleaned up rules. Removed mercury dependencies.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@747378 13f79535-47bb-0310-9956-ffa450edef68

-        //dependency management
+
-        for ( ModelContainer dependencyContainer : source.queryFor( ProjectUri.Dependencies.Dependency.xUri ) )
-        {
-            for ( ModelContainer managementContainer : source.queryFor(
-                ProjectUri.DependencyManagement.Dependencies.Dependency.xUri ) )
-            {
-                //Join Duplicate Exclusions TransformerRule (MNG-4010)
-                ModelDataSource exclusionSource = new DefaultModelDataSource(managementContainer.getProperties(),
-                        Collections.unmodifiableList(Arrays.asList(new ArtifactModelContainerFactory(ProjectUri.DependencyManagement.Dependencies.Dependency.Exclusions.Exclusion.xUri))));
-                List<ModelContainer> exclusionContainers =
-                        exclusionSource.queryFor(ProjectUri.DependencyManagement.Dependencies.Dependency.Exclusions.Exclusion.xUri);
+        //Dependency Management
+        new DependencyManagementDataSourceRule().execute( source );
-                for(ModelContainer mc : exclusionContainers)
-                {
-                    for(ModelContainer mc1 : exclusionContainers)
-                    {
-                        if(!mc.equals(mc1)  && mc.containerAction(mc1).equals(ModelContainerAction.JOIN))
-                        {
-                            exclusionSource.joinWithOriginalOrder(mc1, mc);       
-                        }
-                    }
-                }
-
-                managementContainer = new ArtifactModelContainerFactory().create(
-                    transformDependencyManagement( exclusionSource.getModelProperties() ) );
-                ModelContainerAction action = dependencyContainer.containerAction( managementContainer );
-                if ( action.equals( ModelContainerAction.JOIN ) || action.equals( ModelContainerAction.DELETE ) )
-                {
-                    source.join( dependencyContainer, managementContainer );
-                }
-            }
-        }
-
+        //Plugin Management
+                //Transform from plugin management to plugins
-                        transformedProperties.add( new ModelProperty( mp.getUri().replace( ProjectUri.Build.PluginManagement.xUri, ProjectUri.Build.xUri ), mp.getResolvedValue() ) );
+                        transformedProperties.add( new ModelProperty( mp.getUri().replace( ProjectUri.Build.PluginManagement.xUri,
+                                ProjectUri.Build.xUri ), mp.getResolvedValue() ) );
-
-    private static List<ModelProperty> transformDependencyManagement( List<ModelProperty> modelProperties )
-    {
-        List<ModelProperty> transformedProperties = new ArrayList<ModelProperty>();
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().startsWith( ProjectUri.DependencyManagement.xUri ) )
-            {
-                transformedProperties.add( new ModelProperty(
-                    mp.getUri().replace( ProjectUri.DependencyManagement.xUri, ProjectUri.xUri ), mp.getResolvedValue() ) );
-            }
-        }
-        return transformedProperties;
-    }
+
-            new DefaultDependencyScopeTransformerRule());
+            new DefaultDependencyScopeTransformerRule(), new MissingGroupIdTransformerRule());
-            new ModulesNotInheritedTransformerRule());
+            new ModulesNotInheritedTransformerRule(), new NotInheritedPluginExecutionTransformerRule(),
+            new NotInheritedPluginTransformerRule(), new RelativePathNotInheritedTransformerRule(),
+            new PackagingNotInheritedTransformerRule(), new NameNotInheritedTransformerRule());
-
-            //Missing groupId, use parent one TransformerRule
-            if ( getPropertyFor( ProjectUri.groupId, tmp ) == null )
-            {
-                ModelProperty parentGroupId = getPropertyFor( ProjectUri.Parent.groupId, tmp );
-                if ( parentGroupId != null )
-                {
-                    tmp.add( new ModelProperty( ProjectUri.groupId, parentGroupId.getResolvedValue() ) );
-                }
-
-            }
-
-            //Not inherited plugin execution rule
-            if ( domainModelIndex > 0 )
-            {
-                List<ModelProperty> removeProperties = new ArrayList<ModelProperty>();
-                ModelDataSource source = new DefaultModelDataSource( tmp, Arrays.asList( new ArtifactModelContainerFactory(), new PluginExecutionIdModelContainerFactory() ));
-                List<ModelContainer> containers =
-                    source.queryFor( ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri );
-                for ( ModelContainer container : containers )
-                {
-                    for ( ModelProperty mp : container.getProperties() )
-                    {
-                        if ( mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.Executions.Execution.inherited ) &&
-                            mp.getResolvedValue() != null && mp.getResolvedValue().equals( "false" ) )
-                        {
-                            removeProperties.addAll( container.getProperties() );
-                            for ( int j = tmp.indexOf( mp ); j >= 0; j-- )
-                            {
-                                if ( tmp.get( j ).getUri().equals( ProjectUri.Build.Plugins.Plugin.Executions.xUri ) )
-                                {
-                                    removeProperties.add( tmp.get( j ) );
-                                    break;
-                                }
-                            }
-                            break;
-                        }
-                    }
-                }
-                tmp.removeAll( removeProperties );
-            }
-            
-            //Not inherited plugin rule
-            if ( domainModelIndex > 0 )
-            {
-                List<ModelProperty> removeProperties = new ArrayList<ModelProperty>();
-                ModelDataSource source = new DefaultModelDataSource( tmp, PomTransformer.MODEL_CONTAINER_FACTORIES );
-                List<ModelContainer> containers = source.queryFor( ProjectUri.Build.Plugins.Plugin.xUri );
-                for ( ModelContainer container : containers )
-                {
-                    for ( ModelProperty mp : container.getProperties() )
-                    {
-                        if ( mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.inherited ) && mp.getResolvedValue() != null &&
-                            mp.getResolvedValue().equals( "false" ) )
-                        {
-                            removeProperties.addAll( container.getProperties() );
-                            for ( int j = tmp.indexOf( mp ); j >= 0; j-- )
-                            {
-                                if ( tmp.get( j ).getUri().equals( ProjectUri.Build.Plugins.Plugin.xUri ) )
-                                {
-                                    removeProperties.add( tmp.get( j ) );
-                                    break;
-                                }
-                            }
-                            break;
-                        }
-                    }
-                }
-                tmp.removeAll( removeProperties );
-            }
-
-            // Project Name TransformerRule: not inherited
-            // Packaging TransformerRule: not inherited
-            // Parent.relativePath TransformerRule: not inherited
-                    if ( uri.equals( ProjectUri.name ) || uri.equals( ProjectUri.packaging )
-                        || uri.startsWith( ProjectUri.Profiles.xUri )
-                        || uri.startsWith( ProjectUri.Parent.relativePath )
+                    if ( uri.startsWith( ProjectUri.Profiles.xUri )
-        List<ModelProperty> removedProperties = new ArrayList<ModelProperty>();
-        List<String> filters = new ArrayList<String>();
-        for(ModelProperty mp : modelProperties)
-        {
-            if(mp.getUri().equals(ProjectUri.Build.Filters.filter))
-            {
-                if(filters.contains(mp.getResolvedValue()))
-                {
-                    removedProperties.add(mp);
-                }
-                else
-                {
-                    filters.add(mp.getResolvedValue());   
-                }
-            }
-        }
-        modelProperties.removeAll(removedProperties);
+        modelProperties.removeAll(new DuplicateFiltersTransformerRule().executeWithReturnPropertiesToRemove( modelProperties , 0));
-        ModelDataSource source = new DefaultModelDataSource( modelProperties, PomTransformer.MODEL_CONTAINER_FACTORIES );
-
-        List<ModelContainer> reportContainers = source.queryFor( ProjectUri.Reporting.Plugins.Plugin.xUri );
-        for ( ModelContainer pluginContainer : source.queryFor( ProjectUri.Build.Plugins.Plugin.xUri ) )
-        {
-            ModelContainer transformedReportContainer = new ArtifactModelContainerFactory().create(
-                    transformPlugin( pluginContainer.getProperties() ) );
-
-            for(ModelContainer reportContainer : reportContainers) {
-                ModelContainerAction action = transformedReportContainer.containerAction( reportContainer );
-                if ( action.equals( ModelContainerAction.JOIN ) )
-                {
-                    source.join( transformedReportContainer, reportContainer );
-                    break;
-                }
-            }
-        }
-
-        modelProperties = source.getModelProperties();
-
-        return modelProperties;
+        return new OverideConfigTransformerRule().execute( modelProperties );
-    private static List<ModelProperty> transformPlugin( List<ModelProperty> modelProperties )
-    {
-        List<ModelProperty> transformedProperties = new ArrayList<ModelProperty>();
-        for ( ModelProperty mp : modelProperties )
-        {
-            if ( mp.getUri().startsWith( ProjectUri.Build.Plugins.xUri ) )
-            {   if(mp.getUri().startsWith(ProjectUri.Build.Plugins.Plugin.configuration)
-                    || mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.groupId)
-                    || mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.artifactId)
-                    || mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.version)
-                    || mp.getUri().equals( ProjectUri.Build.Plugins.Plugin.xUri ) )
-                {
-                transformedProperties.add( new ModelProperty(
-                    mp.getUri().replace( ProjectUri.Build.Plugins.xUri, ProjectUri.Reporting.Plugins.xUri ),
-                    mp.getResolvedValue() ) );
-                }
-            }
-        }
-        return transformedProperties;
-    }

MOV21 INS21 INS41 INS32 INS14 INS14 INS14 INS14 INS14 INS14 INS32 INS32 MOV14 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS32 MOV14 UPD42 MOV42 UPD42 MOV42 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 MOV42 INS34 UPD43 UPD42 INS43 UPD42 UPD42 MOV42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL7 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL40 DEL14 DEL32 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL42 DEL40 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL10 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL10 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL40 DEL40 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31