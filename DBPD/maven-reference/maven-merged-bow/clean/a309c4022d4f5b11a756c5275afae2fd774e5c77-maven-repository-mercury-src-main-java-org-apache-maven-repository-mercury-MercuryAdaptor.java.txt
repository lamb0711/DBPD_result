switched to mercury-alpha-7-SN dependency to enable managed version maps, the lifecycle UTs pass

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@763438 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
+import org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter;
-                                                   List<ArtifactRepository> remoteRepositories,
+                                                   List<?> remoteRepositories,
-            for ( ArtifactRepository ar : remoteRepositories )
+            for ( Object o : remoteRepositories )
-                String url = ar.getUrl();
+                String url;
+                String id;
+                
+                if( ArtifactRepository.class.isAssignableFrom( o.getClass() ))
+                {
+                    ArtifactRepository ar = (ArtifactRepository) o;
+                    url = ar.getUrl();
+                    id = ar.getId();
+                }
+                else if( org.apache.maven.model.Repository.class.isAssignableFrom( o.getClass() ))
+                {
+                    org.apache.maven.model.Repository ar = (org.apache.maven.model.Repository) o;
+                    url = ar.getUrl();
+                    id = ar.getId();
+                }
+                else
+                    throw new IllegalArgumentException( "found illegal class in the remote repository list - " + o.getClass().getName() );
-                        server = new Server( ar.getId(), new URL( url ) );
+                        server = new Server( id, new URL( url ) );
-    public static ArtifactMetadata toMercuryBasicMetadata( Artifact a )
+    private static void setInExClusion( ArtifactMetadata md, List<String> patterns, boolean inc )
-        ArtifactMetadata md = new ArtifactMetadata();
-        md.setGroupId( a.getGroupId() );
-        md.setArtifactId( a.getArtifactId() );
-        md.setVersion( a.getVersion() );
-        md.setType( a.getType() );
-        md.setScope( a.getScope() );
-
-        return md;
+        if( Util.isEmpty( patterns ) )
+            return;
+        
+        List<ArtifactMetadata> lusions = new ArrayList<ArtifactMetadata>( patterns.size() );
+        
+        for( String pattern : patterns )
+            lusions.add( new ArtifactMetadata(pattern) );
+        
+        if( inc )
+            md.setInclusions( lusions );
+        else
+            md.setExclusions( lusions );
-
+    
-
+        
+        if( "test-jar".equals( a.getType() ) )
+        {
+            md.setType( "jar" );
+            md.setClassifier( "tests" );
+        }
+        
+        ArtifactFilter af = a.getDependencyFilter();
+        
+        if( af != null )
+        {
+            if( ExcludesArtifactFilter.class.isAssignableFrom( af.getClass() ) )
+            {
+                setInExClusion( md, ((ExcludesArtifactFilter)af).getPatterns(), false );
+            }
+            else if( IncludesArtifactFilter.class.isAssignableFrom( af.getClass() ) )
+                {
+                    setInExClusion( md, ((IncludesArtifactFilter)af).getPatterns(), true );
+                }
+        }
-        Artifact ma = a.getClassifier() == null 
-                        ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), a.getType() )
-                        : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getType(), a.getClassifier() )
+        boolean isTestJar = "test-jar".equals( a.getType() );
+        
+        String type = isTestJar ? "jar" : a.getType();
+        
+        String classifier = isTestJar ? "tests" : a.getType();
+        
+        Artifact ma = classifier == null 
+                        ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), type )
+                        : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), type, classifier )
-        ma.setResolved( true );
+        ma.setResolved( a.getFile() != null );
-        Artifact ma = a.getClassifier() == null 
-                                ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), a.getType() )
-                                : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getType(), a.getClassifier() )
+        boolean isTestJar = "test-jar".equals( a.getType() );
+        
+        String type = isTestJar ? "jar" : a.getType();
+        
+        String classifier = isTestJar ? "tests" : a.getType();
+        
+        Artifact ma = classifier == null 
+                                ? af.createArtifact( a.getGroupId(), a.getArtifactId(), a.getVersion(), a.getScope(), type )
+                                : af.createArtifactWithClassifier( a.getGroupId(), a.getArtifactId(), a.getVersion(), type, classifier )
+        
+        if( "test-jar".equals( md.getType() ) )
+        {
+            mmd.setType( "jar" );
+            mmd.setClassifier( "tests" );
+        }
+        
+        if( "test-jar".equals( md.getType() ) )
+        {
+            mmd.setType( "jar" );
+            mmd.setClassifier( "tests" );
+        }
+        
+        if( "test-jar".equals( md.getType() ) )
+        {
+            mmd.setType( "jar" );
+            mmd.setClassifier( "tests" );
+        }
-        if( "org.apache.maven.plugins:maven-remote-resources-plugin".equals( 
-                                                      reqArtifact.getGroupId()+":"+reqArtifact.getArtifactId() 
-                                                                           )
-        ) scopeStr = null;
+//        if( "org.apache.maven.plugins:maven-remote-resources-plugin".equals( 
+//                                                      reqArtifact.getGroupId()+":"+reqArtifact.getArtifactId() 
+//                                                                           )
+//        ) scopeStr = null;
+            else if( Artifact.SCOPE_RUNTIME_PLUS_SYSTEM.equals( scopeStr ) )
+                return ArtifactScopeEnum.runtime;
+    
+    public static Map<String,ArtifactMetadata> toMercuryVersionMap(Map<String,Artifact> map  )
+    {
+        if( Util.isEmpty( map ) )
+            return null;
+        
+        Map<String,ArtifactMetadata> res = new HashMap<String, ArtifactMetadata>( map.size() );
+        
+        for( Entry<String, Artifact> e : map.entrySet() )
+        {
+            res.put( e.getKey(), toMercuryMetadata( e.getValue() ) );
+        }
+        
+        return res;
+    }

INS26 INS26 MOV31 INS40 INS40 INS31 INS31 INS31 UPD83 MOV83 MOV83 INS39 UPD42 MOV42 MOV44 INS44 INS44 INS8 MOV43 MOV44 MOV44 INS83 INS83 MOV43 INS42 MOV44 MOV44 MOV8 MOV43 MOV44 MOV43 MOV44 INS83 INS83 INS74 INS42 INS44 INS8 UPD74 UPD43 UPD42 INS74 INS42 INS39 INS42 INS25 MOV60 INS70 INS25 INS25 INS60 INS25 INS60 INS60 INS60 MOV21 MOV21 MOV21 MOV41 INS60 INS60 INS60 MOV41 INS25 INS25 INS25 INS43 INS43 MOV43 INS74 INS42 INS25 INS60 INS70 MOV41 INS76 UPD42 INS43 INS43 INS32 INS41 INS74 INS44 INS42 INS21 INS42 INS21 INS21 INS32 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS8 INS42 INS42 INS43 INS43 INS43 INS32 INS41 INS74 INS59 INS44 INS32 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 UPD42 INS43 INS42 MOV32 MOV32 MOV32 INS45 INS42 MOV32 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS16 MOV32 UPD42 INS27 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS16 MOV32 UPD42 MOV32 INS45 INS42 INS32 INS21 INS21 INS45 INS42 INS32 INS21 INS21 INS45 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS43 INS43 INS42 INS14 INS74 INS42 UPD42 MOV42 UPD42 MOV42 MOV21 INS42 MOV42 INS74 INS32 INS42 UPD42 UPD42 INS14 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS32 INS32 INS42 INS42 INS32 INS8 INS25 INS45 INS42 MOV32 INS42 INS45 MOV32 INS42 INS45 MOV32 INS32 INS33 INS45 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS74 INS32 INS43 INS43 INS43 INS43 INS42 INS60 INS25 INS43 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS57 INS42 INS32 INS21 INS32 INS8 INS42 UPD42 MOV32 UPD42 MOV42 UPD42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS43 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS43 INS59 INS32 INS8 INS25 INS42 MOV42 INS42 INS43 INS42 INS42 INS32 INS57 INS42 INS32 INS21 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 INS32 INS42 INS42 INS57 INS42 INS32 INS60 INS21 INS21 INS32 INS8 INS53 INS42 INS42 INS42 INS32 INS9 INS43 INS42 INS42 INS32 INS25 INS42 UPD42 MOV42 MOV43 INS42 INS42 MOV43 INS59 INS7 INS7 INS57 INS42 INS32 INS60 INS21 INS21 INS14 INS36 INS42 INS42 INS42 INS42 INS32 INS9 INS32 INS41 MOV25 INS42 INS11 INS42 MOV32 INS42 MOV32 INS43 INS42 INS42 INS43 INS59 INS7 INS7 INS43 INS27 INS11 INS36 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS40 INS40 INS42 INS11 INS42 INS32 INS42 INS32 INS42 INS45 INS32 INS43 INS42 INS11 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL21 DEL21 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL42 DEL31 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL9 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL42 DEL33 DEL7 DEL21 DEL25