Fixing problem where release:prepare was only going to add the top-level release-pom.xml...

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@227234 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.scm.ScmFileStatus;
-                generateReleasePom( project );
+            generateReleasePoms();
+            
-    private void generateReleasePom( MavenProject project )
+    private void generateReleasePoms()
-            MavenProject releaseProject = new MavenProject( project );
-            Model releaseModel = releaseProject.getModel();
-
-            //Rewrite parent version
-            if ( project.hasParent() )
-            {
-                Artifact parentArtifact = project.getParentArtifact();
-
-                if ( isSnapshot( parentArtifact.getBaseVersion() ) )
-                {
-                    String version = resolveVersion( parentArtifact, "parent", releaseProject );
-
-                    releaseModel.getParent().setVersion( version );
-                }
-            }
-
-            Set artifacts = releaseProject.getArtifacts();
-
-            if ( artifacts != null )
-            {
-                //Rewrite dependencies section
-                List newdeps = new ArrayList();
-
-                for ( Iterator i = releaseProject.getArtifacts().iterator(); i.hasNext(); )
-                {
-                    Artifact artifact = (Artifact) i.next();
-
-                    Dependency newdep = new Dependency();
-
-                    newdep.setArtifactId( artifact.getArtifactId() );
-                    newdep.setGroupId( artifact.getGroupId() );
-                    newdep.setVersion( artifact.getVersion() );
-                    newdep.setType( artifact.getType() );
-                    newdep.setScope( artifact.getScope() );
-                    newdep.setClassifier( artifact.getClassifier() );
-
-                    newdeps.add( newdep );
-                }
-
-                releaseModel.setDependencies( newdeps );
-            }
-
-            List plugins = releaseProject.getBuildPlugins();
-
-            if ( plugins != null )
-            {
-                //Rewrite plugins version
-                Map pluginArtifacts = releaseProject.getPluginArtifactMap();
-
-                for ( Iterator i = plugins.iterator(); i.hasNext(); )
-                {
-                    Plugin plugin = (Plugin) i.next();
-
-                    Artifact artifact = (Artifact) pluginArtifacts.get( plugin.getKey() );
-
-                    String version = resolveVersion( artifact, "plugin", releaseProject );
-
-                    plugin.setVersion( version );
-                }
-            }
-
-            List reports = releaseProject.getReportPlugins();
-
-            if ( reports != null )
-            {
-                //Rewrite report version
-                Map reportArtifacts = releaseProject.getReportArtifactMap();
-
-                for ( Iterator i = reports.iterator(); i.hasNext(); )
-                {
-                    ReportPlugin plugin = (ReportPlugin) i.next();
-
-                    Artifact artifact = (Artifact) reportArtifacts.get( plugin.getKey() );
-
-                    String version = resolveVersion( artifact, "report", releaseProject );
-
-                    plugin.setVersion( version );
-                }
-            }
-
-            List extensions = releaseProject.getBuildExtensions();
-
-            if ( extensions != null )
-            {
-                //Rewrite extension version
-                Map extensionArtifacts = releaseProject.getExtensionArtifactMap();
-
-                for ( Iterator i = extensions.iterator(); i.hasNext(); )
-                {
-                    Extension ext = (Extension) i.next();
-
-                    String extensionId = ArtifactUtils.versionlessKey( ext.getGroupId(), ext.getArtifactId() );
-
-                    Artifact artifact = (Artifact) extensionArtifacts.get( extensionId );
-
-                    String version = resolveVersion( artifact, "extension", releaseProject );
-
-                    ext.setVersion( version );
-                }
-            }
-
-            File releasePomFile = new File( basedir, RELEASE_POM );
-
-            Writer writer = null;
+            String canonicalBasedir;
-                writer = new FileWriter( releasePomFile );
-
-                releaseProject.writeModel( writer );
+                canonicalBasedir = trimPathForScmCalculation( new File( basedir ) );
-                throw new MojoExecutionException( "Cannot write release-pom to: " + releasePomFile, e );
-            }
-            finally
-            {
-                IOUtil.close( writer );
+                throw new MojoExecutionException( "Cannot canonicalize basedir: " + basedir, e );
-            try
+            for ( Iterator it = reactorProjects.iterator(); it.hasNext(); )
-                ScmHelper scm = getScm();
+                MavenProject project = (MavenProject) it.next();
+                
+                MavenProject releaseProject = new MavenProject( project );
+                Model releaseModel = releaseProject.getModel();
-                scm.setWorkingDirectory( basedir );
-
-                List scmChanges = scm.getStatus();
-
-                for ( Iterator i = scmChanges.iterator(); i.hasNext(); )
+                //Rewrite parent version
+                if ( project.hasParent() )
-                    ScmFile f = (ScmFile) i.next();
+                    Artifact parentArtifact = project.getParentArtifact();
-                    if ( f.getPath().equals( "release-pom.xml" ) && f.getStatus() != ScmFileStatus.MODIFIED )
+                    if ( isSnapshot( parentArtifact.getBaseVersion() ) )
-                        getScm().add( RELEASE_POM );
+                        String version = resolveVersion( parentArtifact, "parent", releaseProject );
+
+                        releaseModel.getParent().setVersion( version );
-            }
-            catch ( ScmException e )
-            {
-                throw new MojoExecutionException( "Error updating the release-pom.xml.", e );
-            }
-            catch ( IOException e )
-            {
-                throw new MojoExecutionException( "Error updating the release-pom.xml.", e );
-            }
-            try
-            {
-                getReleaseProgress().checkpoint( basedir, ReleaseProgressTracker.CP_GENERATED_RELEASE_POM );
-            }
-            catch ( IOException e )
-            {
-                getLog().warn( "Error writing checkpoint.", e );
+                Set artifacts = releaseProject.getArtifacts();
+
+                if ( artifacts != null )
+                {
+                    //Rewrite dependencies section
+                    List newdeps = new ArrayList();
+
+                    for ( Iterator i = releaseProject.getArtifacts().iterator(); i.hasNext(); )
+                    {
+                        Artifact artifact = (Artifact) i.next();
+
+                        Dependency newdep = new Dependency();
+
+                        newdep.setArtifactId( artifact.getArtifactId() );
+                        newdep.setGroupId( artifact.getGroupId() );
+                        newdep.setVersion( artifact.getVersion() );
+                        newdep.setType( artifact.getType() );
+                        newdep.setScope( artifact.getScope() );
+                        newdep.setClassifier( artifact.getClassifier() );
+
+                        newdeps.add( newdep );
+                    }
+
+                    releaseModel.setDependencies( newdeps );
+                }
+
+                List plugins = releaseProject.getBuildPlugins();
+
+                if ( plugins != null )
+                {
+                    //Rewrite plugins version
+                    Map pluginArtifacts = releaseProject.getPluginArtifactMap();
+
+                    for ( Iterator i = plugins.iterator(); i.hasNext(); )
+                    {
+                        Plugin plugin = (Plugin) i.next();
+
+                        Artifact artifact = (Artifact) pluginArtifacts.get( plugin.getKey() );
+
+                        String version = resolveVersion( artifact, "plugin", releaseProject );
+
+                        plugin.setVersion( version );
+                    }
+                }
+
+                List reports = releaseProject.getReportPlugins();
+
+                if ( reports != null )
+                {
+                    //Rewrite report version
+                    Map reportArtifacts = releaseProject.getReportArtifactMap();
+
+                    for ( Iterator i = reports.iterator(); i.hasNext(); )
+                    {
+                        ReportPlugin plugin = (ReportPlugin) i.next();
+
+                        Artifact artifact = (Artifact) reportArtifacts.get( plugin.getKey() );
+
+                        String version = resolveVersion( artifact, "report", releaseProject );
+
+                        plugin.setVersion( version );
+                    }
+                }
+
+                List extensions = releaseProject.getBuildExtensions();
+
+                if ( extensions != null )
+                {
+                    //Rewrite extension version
+                    Map extensionArtifacts = releaseProject.getExtensionArtifactMap();
+
+                    for ( Iterator i = extensions.iterator(); i.hasNext(); )
+                    {
+                        Extension ext = (Extension) i.next();
+
+                        String extensionId = ArtifactUtils.versionlessKey( ext.getGroupId(), ext.getArtifactId() );
+
+                        Artifact artifact = (Artifact) extensionArtifacts.get( extensionId );
+
+                        String version = resolveVersion( artifact, "extension", releaseProject );
+
+                        ext.setVersion( version );
+                    }
+                }
+
+                File releasePomFile = new File( basedir, RELEASE_POM );
+
+                Writer writer = null;
+
+                try
+                {
+                    writer = new FileWriter( releasePomFile );
+
+                    releaseProject.writeModel( writer );
+                }
+                catch ( IOException e )
+                {
+                    throw new MojoExecutionException( "Cannot write release-pom to: " + releasePomFile, e );
+                }
+                finally
+                {
+                    IOUtil.close( writer );
+                }
+
+                try
+                {
+                    String releasePomPath = trimPathForScmCalculation( releasePomFile );
+                    
+                    releasePomPath = releasePomPath.substring( canonicalBasedir.length() );
+                    
+                    ScmHelper scm = getScm();
+
+                    scm.setWorkingDirectory( basedir );
+
+                    scm.add( releasePomPath );
+                }
+                catch ( ScmException e )
+                {
+                    throw new MojoExecutionException( "Error adding the release-pom.xml: " + releasePomFile, e );
+                }
+                catch ( IOException e )
+                {
+                    throw new MojoExecutionException( "Error adding the release-pom.xml: " + releasePomFile, e );
+                }
+
+                try
+                {
+                    getReleaseProgress().checkpoint( basedir, ReleaseProgressTracker.CP_GENERATED_RELEASE_POM );
+                }
+                catch ( IOException e )
+                {
+                    getLog().warn( "Error writing checkpoint.", e );
+                }

UPD42 INS8 INS21 INS60 INS54 INS24 INS32 INS43 INS59 INS8 INS12 INS58 INS32 MOV8 INS42 INS42 INS42 INS21 INS44 INS8 INS43 INS59 INS42 INS42 INS60 INS54 INS7 INS43 INS42 INS53 INS42 INS42 INS32 UPD43 MOV43 INS59 INS8 MOV12 MOV12 INS42 INS32 INS42 INS14 INS42 INS42 UPD42 UPD42 MOV42 INS11 MOV60 INS21 MOV60 MOV21 MOV21 INS42 INS14 INS43 INS27 INS42 INS43 INS32 UPD43 INS7 INS43 INS42 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS32 UPD42 MOV42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS27 MOV43 INS27 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS42 DEL40 DEL26 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL32 DEL11 DEL32 DEL45 DEL45 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL32 DEL42 DEL32 DEL45 DEL32 DEL32 DEL40 DEL27 DEL27 DEL8 DEL25 DEL8 DEL24 DEL8 DEL54