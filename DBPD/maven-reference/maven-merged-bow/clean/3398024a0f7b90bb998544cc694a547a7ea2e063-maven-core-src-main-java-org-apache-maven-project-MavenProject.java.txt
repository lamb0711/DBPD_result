o delegating local repository implementation that chains the reactor and user local repository
o removal of more state from the WagonManager and pushing it into the request in an attempt to bridge the way for Mercury



git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@773456 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.project.artifact.ActiveProjectArtifact;
-import org.apache.maven.repository.MavenRepositoryWrapper;
-    implements Cloneable, MavenRepositoryWrapper
+    implements Cloneable
-    private List<MavenProject> collectedProjects = Collections.emptyList();
-
-    private List<ArtifactRepository> pluginArtifactRepositories;
-
-            System.out.println( "++> " + a.getArtifactId() );
-                    System.out.println( "--> " + a.getArtifactId() );
-    public List<MavenProject> getCollectedProjects()
-    {
-        return collectedProjects;
-    }
-
-    public void setCollectedProjects( List<MavenProject> collectedProjects )
-    {
-        this.collectedProjects = collectedProjects;
-    }
-
-        this.pluginArtifactRepositories = pluginArtifactRepositories;
-    
-    public Artifact find( Artifact artifact )
-    {
-        return replaceWithActiveArtifact( artifact );
-    }
-
-    public Artifact replaceWithActiveArtifact( Artifact pluginArtifact )
-    {
-        if ( ( getProjectReferences() != null ) && !getProjectReferences().isEmpty() )
-        {
-            String refId = getProjectReferenceId( pluginArtifact.getGroupId(), pluginArtifact.getArtifactId(), pluginArtifact.getVersion() );
-            MavenProject ref = getProjectReferences().get( refId );
-            if ( ref != null )
-            {
-                if ( ref.getArtifact() != null
-                    && ref.getArtifact().getDependencyConflictId().equals( pluginArtifact.getDependencyConflictId() ) )
-                {
-                    // if the project artifact doesn't exist, don't use it. We haven't built that far.
-                    if ( ref.getArtifact().getFile() != null && ref.getArtifact().getFile().exists() )
-                    {
-                        // FIXME: Why aren't we using project.getArtifact() for the second parameter here??
-                        Artifact resultArtifact = new ActiveProjectArtifact( ref, pluginArtifact );
-                        return resultArtifact;
-                    }
-                    else
-                    {
-                        logMissingSiblingProjectArtifact( pluginArtifact );
-                    }
-                }
-
-                Artifact attached = findMatchingArtifact( ref.getAttachedArtifacts(), pluginArtifact );
-                if ( attached != null )
-                {
-                    if ( attached.getFile() != null && attached.getFile().exists() )
-                    {
-                        Artifact resultArtifact = ArtifactUtils.copyArtifact( attached );
-                        resultArtifact.setScope( pluginArtifact.getScope() );
-                        return resultArtifact;
-                    }
-                    else
-                    {
-                        logMissingSiblingProjectArtifact( pluginArtifact );
-                    }
-                }
-
-                /**
-                 * Patch/workaround for: MNG-2871
-                 * 
-                 * We want to use orginal artifact (packaging:ejb) when we are resolving ejb-client
-                 * package and we didn't manage to find attached to project one.
-                 * 
-                 * The scenario is such that somebody run "mvn test" in composity project, and
-                 * ejb-client.jar will not be attached to ejb.jar (because it is done in package
-                 * phase)
-                 * 
-                 * We prefer in such a case use orginal sources (of ejb.jar) instead of failure
-                 */
-                if ( ( ref.getArtifactId().equals( pluginArtifact.getArtifactId() ) ) && ( ref.getGroupId().equals( pluginArtifact.getGroupId() ) ) && ( ref.getArtifact().getType().equals( "ejb" ) )
-                    && ( pluginArtifact.getType().equals( "ejb-client" ) ) && ( ( ref.getArtifact().getFile() != null ) && ref.getArtifact().getFile().exists() ) )
-                {
-                    pluginArtifact = new ActiveProjectArtifact( ref, pluginArtifact );
-                    return pluginArtifact;
-                }
-            }
-        }
-        return pluginArtifact;
-    }
-
-    /**
-     * Tries to resolve the specified artifact from the given collection of attached project artifacts.
-     * 
-     * @param artifacts The attached artifacts, may be <code>null</code>.
-     * @param requestedArtifact The artifact to resolve, must not be <code>null</code>.
-     * @return The matching artifact or <code>null</code> if not found.
-     */
-    private Artifact findMatchingArtifact( List<Artifact> artifacts, Artifact requestedArtifact )
-    {
-        if ( artifacts != null && !artifacts.isEmpty() )
-        {
-            // first try matching by dependency conflict id
-            String requestedId = requestedArtifact.getDependencyConflictId();
-            for ( Artifact artifact : artifacts )
-            {
-                if ( requestedId.equals( artifact.getDependencyConflictId() ) )
-                {
-                    return artifact;
-                }
-            }
-
-            // next try matching by repository conflict id
-            requestedId = getRepositoryConflictId( requestedArtifact );
-            for ( Artifact artifact : artifacts )
-            {
-                if ( requestedId.equals( getRepositoryConflictId( artifact ) ) )
-                {
-                    return artifact;
-                }
-            }
-        }
-
-        return null;
-    }
-
-    /**
-     * Gets the repository conflict id of the specified artifact. Unlike the dependency conflict id, the repository
-     * conflict id uses the artifact file extension instead of the artifact type. Hence, the repository conflict id more
-     * closely reflects the identity of artifacts as perceived by a repository.
-     * 
-     * @param artifact The artifact, must not be <code>null</code>.
-     * @return The repository conflict id, never <code>null</code>.
-     */
-    private String getRepositoryConflictId( Artifact artifact )
-    {
-        StringBuffer buffer = new StringBuffer( 128 );
-        buffer.append( artifact.getGroupId() );
-        buffer.append( ':' ).append( artifact.getArtifactId() );
-        if ( artifact.getArtifactHandler() != null )
-        {
-            buffer.append( ':' ).append( artifact.getArtifactHandler().getExtension() );
-        }
-        else
-        {
-            buffer.append( ':' ).append( artifact.getType() );
-        }
-        if ( artifact.hasClassifier() )
-        {
-            buffer.append( ':' ).append( artifact.getClassifier() );
-        }
-        return buffer.toString();
-    }
-
-    private void logMissingSiblingProjectArtifact( Artifact artifact )
-    {
-        /* TODO
-        if ( logger == null )
-        {
-            return;
-        }
-        
-        StringBuffer message = new StringBuffer();
-        message.append( "A dependency of the current project (or of one the plugins used in its build) was found in the reactor, " );
-        message.append( "\nbut had not been built at the time it was requested. It will be resolved from the repository instead." );
-        message.append( "\n\nCurrent Project: " ).append( getName() );
-        message.append( "\nRequested Dependency: " ).append( artifact.getId() );
-        message.append( "\n\nNOTE: You may need to run this build to the 'compile' lifecycle phase, or farther, in order to build the dependency artifact." );
-        message.append( "\n" );
-        
-        logger.warn( message.toString() );
-        */
-    }
-
+   
-        if ( project.getCollectedProjects() != null )
-        {
-            setCollectedProjects( ( Collections.unmodifiableList( project.getCollectedProjects() ) ) );
-        }
-

DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL33 DEL27 DEL36 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL36 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL36 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL13 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL36 DEL32 DEL21 DEL8 DEL25