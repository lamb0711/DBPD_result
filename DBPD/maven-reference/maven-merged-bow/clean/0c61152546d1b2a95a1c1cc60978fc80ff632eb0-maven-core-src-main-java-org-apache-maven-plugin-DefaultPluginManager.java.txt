More unit tests, this time for plugin-related error messages.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@612592 13f79535-47bb-0310-9956-ffa450edef68

-                checkRequiredMavenVersion( plugin, localRepository, remoteRepositories );
+                MavenProject pluginProject = buildPluginProject( plugin, localRepository, remoteRepositories );
+
+                checkRequiredMavenVersion( plugin, pluginProject, localRepository, remoteRepositories );
+
+                checkPluginDependencySpec( plugin, pluginProject );
-    /**
-     * @todo would be better to store this in the plugin descriptor, but then it won't be available to the version
-     * manager which executes before the plugin is instantiated
-     */
-    private void checkRequiredMavenVersion( Plugin plugin,
-                                            ArtifactRepository localRepository,
-                                            List remoteRepositories )
-        throws PluginVersionResolutionException, InvalidPluginException
+    private void checkPluginDependencySpec( Plugin plugin,
+                                            MavenProject pluginProject )
+        throws InvalidPluginException
+        ArtifactFilter filter = new ScopeArtifactFilter( "runtime" );
-            Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(),
-                                                                       plugin.getArtifactId(),
-                                                                       plugin.getVersion() );
-            MavenProject project = mavenProjectBuilder.buildFromRepository( artifact,
-                                                                            remoteRepositories,
-                                                                            localRepository );
-            // if we don't have the required Maven version, then ignore an update
-            if ( ( project.getPrerequisites() != null )
-                 && ( project.getPrerequisites().getMaven() != null ) )
-            {
-                DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion(
-                                                                                     project.getPrerequisites()
-                                                                                            .getMaven() );
-                if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
-                {
-                    throw new PluginVersionResolutionException( plugin.getGroupId(),
-                                                                plugin.getArtifactId(),
-                                                                "Plugin requires Maven version "
-                                                                                + requiredVersion );
-                }
-            }
+            pluginProject.createArtifacts( artifactFactory, null, filter );
+        }
+        catch ( InvalidDependencyVersionException e )
+        {
+            throw new InvalidPluginException( "Plugin: " + plugin.getKey() + " has a dependency with an invalid version.", e );
+        }
+    }
+
+    private MavenProject buildPluginProject( Plugin plugin,
+                                             ArtifactRepository localRepository,
+                                             List remoteRepositories )
+        throws InvalidPluginException
+    {
+        Artifact artifact = artifactFactory.createProjectArtifact( plugin.getGroupId(),
+                                                                   plugin.getArtifactId(),
+                                                                   plugin.getVersion() );
+
+        try
+        {
+            return mavenProjectBuilder.buildFromRepository( artifact,
+                                                            remoteRepositories,
+                                                            localRepository );
+    /**
+     * @param pluginProject
+     * @todo would be better to store this in the plugin descriptor, but then it won't be available to the version
+     * manager which executes before the plugin is instantiated
+     */
+    private void checkRequiredMavenVersion( Plugin plugin,
+                                            MavenProject pluginProject,
+                                            ArtifactRepository localRepository,
+                                            List remoteRepositories )
+        throws PluginVersionResolutionException, InvalidPluginException
+    {
+        // if we don't have the required Maven version, then ignore an update
+        if ( ( pluginProject.getPrerequisites() != null )
+             && ( pluginProject.getPrerequisites().getMaven() != null ) )
+        {
+            DefaultArtifactVersion requiredVersion = new DefaultArtifactVersion( pluginProject.getPrerequisites().getMaven() );
+
+            if ( runtimeInformation.getApplicationVersion().compareTo( requiredVersion ) < 0 )
+            {
+                throw new PluginVersionResolutionException( plugin.getGroupId(),
+                                                            plugin.getArtifactId(),
+                                                            "Plugin requires Maven version "
+                                                                            + requiredVersion );
+            }
+        }
+    }
+

INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS43 INS8 MOV43 UPD42 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 MOV43 INS43 MOV8 INS43 INS42 INS43 INS42 INS42 INS60 INS54 MOV60 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS21 INS44 INS8 INS41 INS43 INS45 INS32 INS43 INS42 INS53 MOV32 MOV43 INS60 INS21 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS43 INS59 INS32 INS43 INS27 INS42 UPD42 MOV43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL39 DEL42 DEL59 DEL60