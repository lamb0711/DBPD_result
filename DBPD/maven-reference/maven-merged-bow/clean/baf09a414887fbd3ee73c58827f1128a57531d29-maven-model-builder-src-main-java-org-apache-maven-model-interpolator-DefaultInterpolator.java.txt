Cleanup of interpolator, removing references to PomClassicDomainModel, these aren't needed anymore.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@769827 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayOutputStream;
+import java.io.Writer;
+import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
+import org.codehaus.plexus.util.WriterFactory;
-    public PomClassicDomainModel interpolateDomainModel( PomClassicDomainModel dm, Properties properties )
+    public Model interpolateModel( Model model, Properties properties, File projectDirectory )
-        List<InterpolatorProperty> props = new ArrayList<InterpolatorProperty>();
+        if ( model == null )
+        {
+            throw new IllegalArgumentException( "model: null" );
+        }
+        
+        if(properties == null)
+        {
+        	return model;
+        }
+        
+        List<InterpolatorProperty>  interpolatorProperties = new ArrayList<InterpolatorProperty>();
-            props.add( new InterpolatorProperty( (String) e.getKey(), (String) e.getValue(), PomInterpolatorTag.EXECUTION_PROPERTIES.toString() ) );
+        	 interpolatorProperties.add( new InterpolatorProperty( (String) e.getKey(), (String) e.getValue(), PomInterpolatorTag.EXECUTION_PROPERTIES.toString() ) );
-        return interpolateDomainModel( dm, props );
-    }
-    public PomClassicDomainModel interpolateDomainModel( PomClassicDomainModel dm, List<InterpolatorProperty> interpolatorProperties )
-        throws IOException
-    {
-
-        if ( dm == null )
-        {
-            throw new IllegalArgumentException( "dm: null" );
-        }
-        List<ModelProperty> modelProperties = getModelProperties( dm.getInputStream() );
+        List<ModelProperty> modelProperties = getModelProperties( model );
-        if ( "jar".equals( dm.getModel().getPackaging() ) )
+        if ( "jar".equals( model.getPackaging() ) )
-        if ( dm.isPomInBuild() )
-        {
-            String basedir = dm.getProjectDirectory().getAbsolutePath();
-            standardInterpolatorProperties.add( new InterpolatorProperty( "${project.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-            standardInterpolatorProperties.add( new InterpolatorProperty( "${basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-            standardInterpolatorProperties.add( new InterpolatorProperty( "${pom.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+        String basedir = projectDirectory.getAbsolutePath();
+        standardInterpolatorProperties.add( new InterpolatorProperty( "${project.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+        standardInterpolatorProperties.add( new InterpolatorProperty( "${basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+        standardInterpolatorProperties.add( new InterpolatorProperty( "${pom.basedir}", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-            String baseuri = dm.getProjectDirectory().toURI().toString();
-            standardInterpolatorProperties.add( new InterpolatorProperty( "${project.baseUri}", baseuri, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-            standardInterpolatorProperties.add( new InterpolatorProperty( "${pom.baseUri}", baseuri, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-        }
+        String baseuri = projectDirectory.toURI().toString();
+        standardInterpolatorProperties.add( new InterpolatorProperty( "${project.baseUri}", baseuri, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
+        standardInterpolatorProperties.add( new InterpolatorProperty( "${pom.baseUri}", baseuri, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );
-        // SECOND PASS - Set absolute paths on build directories
-        if ( dm.isPomInBuild() )
+        Map<ModelProperty, ModelProperty> buildDirectories = new HashMap<ModelProperty, ModelProperty>();
+        for ( ModelProperty mp : secondPassModelProperties )
-            String basedir = dm.getProjectDirectory().getAbsolutePath();
-            Map<ModelProperty, ModelProperty> buildDirectories = new HashMap<ModelProperty, ModelProperty>();
-            for ( ModelProperty mp : secondPassModelProperties )
-            {
-                if ( mp.getUri().startsWith( ProjectUri.Build.xUri ) || mp.getUri().equals( ProjectUri.Reporting.outputDirectory ) )
-                {
-                    File file = new File( mp.getResolvedValue() );
-                    if ( !file.isAbsolute() && !mp.getResolvedValue().startsWith( "${project.build." ) && !mp.getResolvedValue().equals( "${project.basedir}" ) )
-                    {
-                        buildDirectories.put( mp, new ModelProperty( mp.getUri(), new File( basedir, file.getPath() ).getAbsolutePath() ) );
-                    }
-                }
-            }
-            for ( Map.Entry<ModelProperty, ModelProperty> e : buildDirectories.entrySet() )
-            {
-                secondPassModelProperties.remove( e.getKey() );
-                secondPassModelProperties.add( e.getValue() );
-            }
+        	if ( mp.getUri().startsWith( ProjectUri.Build.xUri ) || mp.getUri().equals( ProjectUri.Reporting.outputDirectory ) )
+        	{
+        		File file = new File( mp.getResolvedValue() );
+        		if ( !file.isAbsolute() && !mp.getResolvedValue().startsWith( "${project.build." ) && !mp.getResolvedValue().equals( "${project.basedir}" ) )
+        		{
+        			buildDirectories.put( mp, new ModelProperty( mp.getUri(), new File( basedir, file.getPath() ).getAbsolutePath() ) );
+        		}
+        	}
+        for ( Map.Entry<ModelProperty, ModelProperty> e : buildDirectories.entrySet() )
+        {
+        	secondPassModelProperties.remove( e.getKey() );
+        	secondPassModelProperties.add( e.getValue() );
+        }
+
-            PomClassicDomainModel domainModel = new PomClassicDomainModel( new ByteArrayInputStream( xml.getBytes( "UTF-8" ) ) );
-            if ( dm.getProjectDirectory() != null )
+            Model m = new PomClassicDomainModel( new ByteArrayInputStream( xml.getBytes( "UTF-8" ) ) ).getModel();
+            if ( projectDirectory != null )
-                alignPaths( domainModel.getModel(), dm.getProjectDirectory() );
+                alignPaths( m, projectDirectory );
-            return domainModel;
+            return m;
-
-        /*
-        for(ModelProperty mp : modelProperties)
-        {
-        	if((mp.getValue() != null) && !mp.getValue().equals(mp.getResolvedValue()))
-        	{
-        		if(mp.getUri().equals(ProjectUri.version))
-        		{
-        			
-        		}
-        	}
-        }
-        */
-    private static List<ModelProperty> getModelProperties( InputStream is )
+    
+    private static List<ModelProperty> getModelProperties( Model model )
+    	
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        Writer out = null;
+        MavenXpp3Writer writer = new MavenXpp3Writer();
+        try
+        {
+            out = WriterFactory.newXmlWriter( baos );
+            writer.write( out, model );
+        }
+        finally
+        {
+            if ( out != null )
+            {
+                out.close();
+            }
+        }
+  	
-        return new ArrayList<ModelProperty>( marshallXmlToModelProperties( is, ProjectUri.baseUri, s ) );
+        return new ArrayList<ModelProperty>( marshallXmlToModelProperties(  new ByteArrayInputStream(baos.toByteArray()), ProjectUri.baseUri, s ) );
-            //String val = (mp.getResolvedValue() != null) ? "\"" + mp.getResolvedValue() + "\"" : null;
-            //   System.out.println("new ModelProperty(\"" + mp.getUri() +"\" , " + val +"),");

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD43 UPD42 MOV44 UPD42 UPD43 UPD42 INS43 INS42 INS25 MOV60 MOV70 MOV60 MOV21 MOV21 MOV21 MOV60 MOV21 MOV21 MOV60 MOV70 MOV70 UPD43 UPD42 INS60 INS60 INS60 INS54 UPD42 UPD42 MOV42 INS27 INS8 UPD42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 UPD42 INS42 INS33 INS41 UPD42 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS14 INS21 INS21 INS25 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 UPD42 INS43 INS43 INS7 INS32 INS27 INS8 INS14 UPD45 UPD42 UPD42 MOV42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS43 INS32 MOV14 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32