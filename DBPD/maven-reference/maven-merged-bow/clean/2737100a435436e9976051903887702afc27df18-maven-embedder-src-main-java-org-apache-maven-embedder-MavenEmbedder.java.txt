o creating a mode for aligning the the embedder with a user installation


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@370406 13f79535-47bb-0310-9956-ffa450edef68

-    private boolean pluginUpdateOverride;
-
-    private boolean checkLatestPluginVersion;
-
+    // release plugin uses this but in IDE there will probably always be some form of interaction.
-    private boolean usePluginRegistry;
-
-    private boolean updateSnapshots;
-
+    /**
+     * This option determines whether the embedder is to be aligned to the user
+     * installation.
+     */
+    private boolean alignWithUserInstallation;
+
-    public void setPluginUpdateOverride( boolean pluginUpdateOverride )
-    {
-        this.pluginUpdateOverride = pluginUpdateOverride;
-    }
-
-    public boolean isPluginUpdateOverride()
-    {
-        return pluginUpdateOverride;
-    }
-
-    public void setCheckLatestPluginVersion( boolean checkLatestPluginVersion )
-    {
-        this.checkLatestPluginVersion = checkLatestPluginVersion;
-    }
-
-    public boolean isCheckLatestPluginVersion()
-    {
-        return checkLatestPluginVersion;
-    }
-
-    public void setUsePluginRegistry( boolean usePluginRegistry )
-    {
-        this.usePluginRegistry = usePluginRegistry;
-    }
-
-    public boolean isUsePluginRegistry()
-    {
-        return usePluginRegistry;
-    }
-
-    public void setUpdateSnapshots( boolean updateSnapshots )
-    {
-        this.updateSnapshots = updateSnapshots;
-    }
-
-    public boolean isUpdateSnapshots()
-    {
-        return updateSnapshots;
-    }
-
+    public boolean isAlignWithUserInstallation()
+    {
+        return alignWithUserInstallation;
+    }
+
+    public void setAlignWithUserInstallation( boolean alignWithUserInstallation )
+    {
+        this.alignWithUserInstallation = alignWithUserInstallation;
+    }
+
-
-        if ( pluginUpdateOverride )
-        {
-            runtimeInfo.setPluginUpdateOverride( Boolean.TRUE );
-        }
-        else
-        {
-            runtimeInfo.setPluginUpdateOverride( Boolean.FALSE );
-        }
+        runtimeInfo.setPluginUpdateOverride( Boolean.FALSE );
+        detectUserInstallation();
+
+            // ----------------------------------------------------------------------
+            // Artifact related components
+            // ----------------------------------------------------------------------
+
-            lifecycleExecutor = (LifecycleExecutor) embedder.lookup( LifecycleExecutor.ROLE );
-
-            wagonManager = (WagonManager) embedder.lookup( WagonManager.ROLE );
-
-            // ----------------------------------------------------------------------
-            // If an explicit local repository has not been set then we will use the
-            // setting builder to use the maven defaults to help us find one.
-            // ----------------------------------------------------------------------
+            lifecycleExecutor = (LifecycleExecutor) embedder.lookup( LifecycleExecutor.ROLE );
-            if ( localRepositoryDirectory == null )
-            {
-                settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
+            wagonManager = (WagonManager) embedder.lookup( WagonManager.ROLE );
-                try
-                {
-                    settings = settingsBuilder.buildSettings();
-                }
-                catch ( IOException e )
-                {
-                    throw new MavenEmbedderException( "Error creating settings.", e );
-                }
-                catch ( XmlPullParserException e )
-                {
-                    throw new MavenEmbedderException( "Error creating settings.", e );
-                }
-            }
-            else
-            {
-                settings = new Settings();
-
-                settings.setLocalRepository( localRepositoryDirectory.getAbsolutePath() );
-            }
-
-            settings.setRuntimeInfo( createRuntimeInfo( settings ) );
-
-            settings.setOffline( offline );
-
-            settings.setUsePluginRegistry( usePluginRegistry );
-
-            settings.setInteractiveMode( interactiveMode );
+            createMavenSettings();
+    // ----------------------------------------------------------------------
+    //
+    // ----------------------------------------------------------------------
+
+    private void detectUserInstallation()
+    {
+        if ( new File( userHome, ".m2" ).exists() )
+        {
+            alignWithUserInstallation = true;
+        }
+    }
+
+    /**
+     * Create the Settings that will be used with the embedder. If we are aligning with the user
+     * installation then we lookup the standard settings builder and use that to create our
+     * settings. Otherwise we constructs a settings object and populate the information
+     * ourselves.
+     *
+     * @throws MavenEmbedderException
+     * @throws ComponentLookupException
+     */
+    private void createMavenSettings()
+        throws MavenEmbedderException, ComponentLookupException
+    {
+        if ( alignWithUserInstallation )
+        {
+            // ----------------------------------------------------------------------
+            // We will use the standard method for creating the settings. This
+            // method reproduces the method of building the settings from the CLI
+            // mode of operation.
+            // ----------------------------------------------------------------------
+
+            settingsBuilder = (MavenSettingsBuilder) embedder.lookup( MavenSettingsBuilder.ROLE );
+
+            try
+            {
+                settings = settingsBuilder.buildSettings();
+            }
+            catch ( IOException e )
+            {
+                throw new MavenEmbedderException( "Error creating settings.", e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new MavenEmbedderException( "Error creating settings.", e );
+            }
+        }
+        else
+        {
+            if ( localRepository == null )
+            {
+                throw new IllegalArgumentException( "When not aligning with a user install you must specify a local repository location using the setLocalRepositoryDirectory( File ) method." );
+            }
+
+            settings = new Settings();
+
+            settings.setLocalRepository( localRepositoryDirectory.getAbsolutePath() );
+
+            settings.setRuntimeInfo( createRuntimeInfo( settings ) );
+
+            settings.setOffline( offline );
+
+            settings.setInteractiveMode( interactiveMode );
+        }
+    }
+
+    // ----------------------------------------------------------------------
+    // Lifecycle
+    // ----------------------------------------------------------------------
+

MOV23 MOV31 MOV31 MOV31 INS31 INS29 UPD42 UPD42 MOV8 UPD83 UPD42 INS8 INS29 UPD83 MOV83 MOV39 INS42 INS43 INS43 MOV8 INS65 UPD42 UPD42 MOV60 MOV41 INS21 INS25 INS65 INS65 INS65 INS42 INS42 MOV25 INS66 INS66 UPD42 INS32 MOV21 MOV21 INS32 INS8 INS66 INS66 INS66 INS66 INS42 INS42 INS42 UPD42 INS42 INS14 INS42 MOV21 INS25 INS21 MOV21 MOV21 UPD42 INS32 INS43 INS42 INS45 INS27 INS8 MOV32 UPD42 MOV42 INS42 INS42 INS9 INS42 INS33 INS53 INS14 INS42 INS43 INS45 INS42 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL31 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL39 DEL42 DEL44 DEL8 DEL42 DEL33 DEL27 DEL42 DEL41