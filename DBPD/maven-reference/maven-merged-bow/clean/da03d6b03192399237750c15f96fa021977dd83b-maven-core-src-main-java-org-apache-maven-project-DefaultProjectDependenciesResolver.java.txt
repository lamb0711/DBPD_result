[MNG-6183] Dependency management debug message corrections.

-import org.apache.maven.model.InputLocation;
-import org.apache.maven.model.InputSource;
-import org.eclipse.aether.artifact.ArtifactProperties;
-        private Map<String, Dependency> managed;
-
-                String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );
-                if ( premanagedScope != null && !premanagedScope.equals( dep.getScope() ) )
+                // TODO We currently cannot tell which <dependencyManagement> section contained the management
+                //      information. When resolver 1.1 provides this information, these log messages should be updated
+                //      to contain it.
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_SCOPE ) == DependencyNode.MANAGED_SCOPE )
-                    buffer.append( " (scope managed from " ).append( premanagedScope );
-                    appendManagementSource( buffer, art, "scope" );
+                    final String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );
+                    buffer.append( " (scope managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedScope, "default" ) );
-                String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );
-                if ( premanagedVersion != null && !premanagedVersion.equals( art.getVersion() ) )
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_VERSION ) == DependencyNode.MANAGED_VERSION )
-                    buffer.append( " (version managed from " ).append( premanagedVersion );
-                    appendManagementSource( buffer, art, "version" );
+                    final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );
+                    buffer.append( " (version managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedVersion, "default" ) );
-                Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional( node );
-                if ( premanagedOptional != null && !premanagedOptional.equals( dep.getOptional() ) )
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_OPTIONAL ) == DependencyNode.MANAGED_OPTIONAL )
-                    buffer.append( " (optionality managed from " ).append( premanagedOptional );
-                    appendManagementSource( buffer, art, "optional" );
+                    final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional( node );
+                    buffer.append( " (optionality managed from " );
+                    buffer.append( StringUtils.defaultString( premanagedOptional, "default" ) );
+
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_EXCLUSIONS )
+                        == DependencyNode.MANAGED_EXCLUSIONS )
+                {
+                    // TODO As of resolver 1.1, use DependencyManagerUtils.getPremanagedExclusions( node ).
+                    //      The resolver 1.0.x releases do not record premanaged state of exclusions.
+                    buffer.append( " (exclusions managed)" );
+                }
+
+                if ( ( node.getManagedBits() & DependencyNode.MANAGED_PROPERTIES )
+                        == DependencyNode.MANAGED_PROPERTIES )
+                {
+                    // TODO As of resolver 1.1, use DependencyManagerUtils.getPremanagedProperties( node ).
+                    //      The resolver 1.0.x releases do not record premanaged state of properties.
+                    buffer.append( " (properties managed)" );
+                }
-        private void appendManagementSource( StringBuilder buffer, org.eclipse.aether.artifact.Artifact artifact,
-                                             String field )
-        {
-            if ( managed == null )
-            {
-                managed = new HashMap<>();
-                if ( project.getDependencyManagement() != null )
-                {
-                    for ( Dependency dep : project.getDependencyManagement().getDependencies() )
-                    {
-                        managed.put( dep.getManagementKey(), dep );
-                    }
-                }
-            }
-
-            String key =
-                ArtifactIdUtils.toVersionlessId( artifact.getGroupId(), artifact.getArtifactId(),
-                                                artifact.getProperty( ArtifactProperties.TYPE, "jar" ),
-                                                artifact.getClassifier() );
-
-            Dependency dependency = managed.get( key );
-            if ( dependency != null )
-            {
-                InputLocation location = dependency.getLocation( field );
-                if ( location != null )
-                {
-                    InputSource source = location.getSource();
-                    if ( source != null )
-                    {
-                        buffer.append( " by " ).append( source.getModelId() );
-                    }
-                }
-            }
-        }
-

INS25 INS25 INS25 INS25 INS27 INS8 INS27 MOV8 INS27 INS8 INS27 MOV8 INS27 INS36 INS40 MOV60 MOV21 INS21 MOV21 INS36 INS40 MOV60 MOV21 MOV21 INS36 INS40 MOV60 MOV21 INS21 MOV21 INS36 INS40 INS36 INS40 INS27 INS83 MOV32 INS32 INS27 INS83 MOV32 INS27 INS83 MOV32 INS32 INS27 INS27 INS32 INS40 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 INS40 INS42 UPD42 INS32 INS32 INS40 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 INS40 UPD42 UPD45 INS32 INS40 UPD42 UPD45 INS42 INS42 INS42 UPD42 UPD42 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD45 MOV45 INS42 INS42 UPD42 INS42 UPD42 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL25 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL38 DEL27 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL45 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31