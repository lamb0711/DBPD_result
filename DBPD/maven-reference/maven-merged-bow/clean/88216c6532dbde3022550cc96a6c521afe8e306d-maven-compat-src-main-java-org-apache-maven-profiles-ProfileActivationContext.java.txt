o Re-introduced distinction between user properties and system properties. We have use cases like interpolation and SUREFIRE-121 where we would like to handle user-specified props specially so a single properties soup is not up to the job. However, I opted not to follow the approach from 2.x where we also collect both system properties and user properties in a combined set called execution properties. Code that embeds Maven and programmatically creates an execution request should be not required to assemble such a mixed properties instance, it would enable bad behavior from Maven by subtle API misuse. Also, for things like the lifecycle participant that wants to inject properties, it should be cristal clear whether it injects a user or a system property, the semantics of something like getExecutionProperties().setProperty() would be unclear however.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@796900 13f79535-47bb-0310-9956-ffa450edef68

-    public Properties getExecutionProperties()
+    public Properties getSystemProperties()
+    {
+        return executionProperties;
+    }
+
+    public Properties getUserProperties()
-    public org.apache.maven.model.profile.ProfileActivationContext setExecutionProperties(
-                                                                                           Properties executionProperties )
+    public org.apache.maven.model.profile.ProfileActivationContext setSystemProperties( Properties systemProperties )
-        this.executionProperties.putAll( executionProperties );
+        this.executionProperties.putAll( systemProperties );
+    public org.apache.maven.model.profile.ProfileActivationContext setUserProperties( Properties userProperties )
+    {
+        return setSystemProperties( userProperties );
+    }
+

INS31 INS31 UPD42 INS83 INS43 INS42 INS8 UPD42 INS83 INS43 INS42 INS44 INS8 INS42 INS41 UPD42 INS40 INS43 INS42 INS41 INS42 INS42 INS32 UPD42 INS42 INS42