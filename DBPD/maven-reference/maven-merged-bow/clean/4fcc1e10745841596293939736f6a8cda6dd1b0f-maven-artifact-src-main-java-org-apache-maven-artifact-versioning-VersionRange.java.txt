PR: MNG-505
parse ranges

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219625 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
-    private String version;
+    private final String recommendedVersion;
-    public VersionRange( String spec )
+    private final List restrictions;
+
+    private VersionRange( String recommendedVersion, List restrictions )
-        if ( spec != null )
+        this.recommendedVersion = recommendedVersion;
+        this.restrictions = restrictions;
+    }
+
+    public String getRecommendedVersion()
+    {
+        return recommendedVersion;
+    }
+
+    public List getRestrictions()
+    {
+        return restrictions;
+    }
+
+    public static VersionRange createFromVersionSpec( String spec )
+        throws InvalidVersionSpecificationException
+    {
+        List exclusions = new ArrayList();
+        String process = spec;
+        String version = null;
+
+        while ( process.startsWith( "[" ) || process.startsWith( "(" ) )
-            // temporary!
-            if ( spec.startsWith( "[" ) )
+            int index1 = process.indexOf( ")" );
+            int index2 = process.indexOf( "]" );
+
+            int index = index2;
+            if ( index2 < 0 || index1 < index2 )
-                spec = spec.substring( 1, spec.length() - 1 );
+                if ( index1 >= 0 )
+                {
+                    index = index1;
+                }
+            }
+
+            if ( index < 0 )
+            {
+                throw new InvalidVersionSpecificationException( "Unbounded range: " + spec );
+            }
+
+            exclusions.add( parseRestriction( process.substring( 0, index + 1 ) ) );
+
+            process = process.substring( index + 1 ).trim();
+
+            if ( process.length() > 0 && process.startsWith( "," ) )
+            {
+                process = process.substring( 1 ).trim();
-        this.version = spec;
+        if ( process.length() > 0 )
+        {
+            if ( exclusions.size() > 0 )
+            {
+                throw new InvalidVersionSpecificationException(
+                    "Only fully-qualified sets allowed in multiple set scenario: " + spec );
+            }
+            else
+            {
+                version = process;
+            }
+        }
+
+        return new VersionRange( version, exclusions );
-    public String getVersion()
+    private static Restriction parseRestriction( String spec )
+        throws InvalidVersionSpecificationException
-        return version;
+        boolean lowerBoundInclusive = spec.startsWith( "[" );
+        boolean upperBoundInclusive = spec.endsWith( "]" );
+
+        String process = spec.substring( 1, spec.length() - 1 ).trim();
+
+        Restriction restriction;
+
+        int index = process.indexOf( "," );
+
+        if ( index < 0 )
+        {
+            if ( !lowerBoundInclusive || !upperBoundInclusive )
+            {
+                throw new InvalidVersionSpecificationException( "Single version must be surrounded by []: " + spec );
+            }
+            restriction = new Restriction( process, lowerBoundInclusive, process, upperBoundInclusive );
+        }
+        else
+        {
+            String lowerBound = process.substring( 0, index ).trim();
+            String upperBound = process.substring( index + 1 ).trim();
+            if ( lowerBound.equals( upperBound ) )
+            {
+                throw new InvalidVersionSpecificationException( "Range cannot have identical boundaries: " + spec );
+            }
+
+            if ( lowerBound.length() == 0 )
+            {
+                lowerBound = null;
+            }
+            if ( upperBound.length() == 0 )
+            {
+                upperBound = null;
+            }
+
+            restriction = new Restriction( lowerBound, lowerBoundInclusive, upperBound, upperBoundInclusive );
+        }
+
+        return restriction;
+    }
+
+    public static VersionRange createFromVersion( String version )
+    {
+        return new VersionRange( version, Collections.EMPTY_LIST );

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS43 INS83 INS83 INS43 INS42 MOV44 INS43 INS8 INS83 INS43 INS42 INS44 UPD42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS41 INS42 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS61 INS25 INS41 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS14 INS39 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS14 INS22 INS42 INS22 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS60 INS60 INS60 INS25 INS25 INS21 INS21 MOV25 INS32 INS34 INS25 INS43 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS34 INS25 INS21 INS60 INS60 INS25 INS25 INS25 INS21 INS43 INS42 INS40 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS45 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS32 INS7 INS27 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS45 MOV32 INS42 INS42 INS42 INS45 INS27 INS8 INS7 INS43 INS59 INS43 INS59 INS32 INS8 INS27 INS8 INS27 INS8 INS7 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS27 INS25 INS42 INS34 INS53 INS42 INS42 INS32 INS42 INS32 INS27 INS32 INS32 INS34 INS53 MOV21 INS38 INS38 INS53 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS32 INS34 INS21 INS32 INS34 INS21 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS27 INS8 INS14 INS42 INS32 INS32 INS42 INS32 INS34 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS7 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS43 INS27 INS42 INS42 INS34 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS43 INS27 INS42 UPD42 INS43 INS27 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS43 INS27 INS42 INS33 INS42 INS33 INS42 INS7 INS42 INS45 INS42 INS42 INS34 INS42 INS34 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS34 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42