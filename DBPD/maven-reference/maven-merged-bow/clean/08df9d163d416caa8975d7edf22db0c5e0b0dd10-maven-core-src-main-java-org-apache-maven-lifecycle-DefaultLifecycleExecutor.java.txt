PR: MNG-209
re-initialise lifecycle on each execution. Make it threadsafe.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163586 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
-    implements LifecycleExecutor, Initializable
+    implements LifecycleExecutor
-    private Map phaseMap;
-
+        Map phaseMap = new HashMap();
+
+        for ( Iterator i = phases.iterator(); i.hasNext(); )
+        {
+            Phase p = (Phase) i.next();
+
+            // Make a copy of the phase as we will modify it
+            phaseMap.put( p.getId(), new Phase( p ) );
+        }
+
-                    verifyMojoPhase( artifactHandler.packageGoal(), session );
+                    verifyMojoPhase( artifactHandler.packageGoal(), session, phaseMap );
-                    processPluginPhases( plugin, session );
+                    processPluginPhases( plugin, session, phaseMap );
-            processPluginConfiguration( session.getProject(), session );
+            processPluginConfiguration( session.getProject(), session, phaseMap );
-                processGoalChain( task, session );
+                processGoalChain( task, session, phaseMap );
-                    executePhase( task, session, response );
+                    executePhase( task, session, response, phaseMap );
-    private void processPluginConfiguration( MavenProject project, MavenSession mavenSession )
+    private void processPluginConfiguration( MavenProject project, MavenSession mavenSession, Map phaseMap )
-            processPluginPhases( plugin, mavenSession );
+            processPluginPhases( plugin, mavenSession, phaseMap );
-    private void processPluginPhases( Plugin plugin, MavenSession mavenSession )
+    private void processPluginPhases( Plugin plugin, MavenSession mavenSession, Map phaseMap )
-            // Right now this maven-foo-plugin so this is a hack right now.
+            // TODO: Right now this maven-foo-plugin so this is a hack right now.
-                configureMojo( mojoDescriptor );
+                configureMojo( mojoDescriptor, phaseMap );
-                configureMojo( mojoDescriptor );
+                configureMojo( mojoDescriptor, phaseMap );
-    private void configureMojo( MojoDescriptor mojoDescriptor )
+    private void configureMojo( MojoDescriptor mojoDescriptor, Map phaseMap )
-    private void processGoalChain( String task, MavenSession session )
+    private void processGoalChain( String task, MavenSession session, Map phaseMap )
+                // TODO: phases should just be strings...
+                p = (Phase) phaseMap.get( p.getId() );
+
-                        verifyMojoPhase( goal, session );
+                        verifyMojoPhase( goal, session, phaseMap );
-            verifyMojoPhase( task, session );
+            verifyMojoPhase( task, session, phaseMap );
-    private void verifyMojoPhase( String task, MavenSession session )
+    private void verifyMojoPhase( String task, MavenSession session, Map phaseMap )
-    private void executePhase( String phase, MavenSession session, MavenExecutionResponse response )
+    private void executePhase( String phase, MavenSession session, MavenExecutionResponse response, Map phaseMap )
+            p = (Phase) phaseMap.get( p.getId() );
+
-            logger.debug( "Resolving artifacts from:\n" + "\t{localRepository: " + session.getLocalRepository() + "}\n" + "\t{remoteRepositories: " + session.getRemoteRepositories() + "}" );
+            logger.debug(
+                "Resolving artifacts from:\n" + "\t{localRepository: " + session.getLocalRepository() + "}\n" +
+                "\t{remoteRepositories: " +
+                session.getRemoteRepositories() +
+                "}" );
-
-    public Phase getPhase( String id )
-    {
-        return (Phase) phaseMap.get( id );
-    }
-
-    // ----------------------------------------------------------------------
-    // Lifecylce Management
-    // ----------------------------------------------------------------------
-
-    public void initialize()
-        throws Exception
-    {
-        phaseMap = new HashMap();
-
-        for ( Iterator i = phases.iterator(); i.hasNext(); )
-        {
-            Phase p = (Phase) i.next();
-
-            phaseMap.put( p.getId(), p );
-        }
-    }

INS44 INS44 INS44 INS44 INS44 INS44 INS60 INS24 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 MOV43 INS59 MOV58 MOV32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 MOV60 INS21 INS21 INS32 INS7 INS42 INS42 INS32 INS14 INS42 INS42 INS21 INS42 INS42 INS11 INS42 INS42 INS43 INS42 INS7 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 MOV32 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL31