Switching back to selectively import extensions into a project-specific ClassRealm, except this time extension realms will be shared (the origin of the aforementioned imports) to conserve memory tied up by classloading. Similarly, plugin realms are managed using a key produced from g:a:v of the plugin, plus the hashcode of all g:a:v of the plugin-level dependencies aggregated into one string, to distinguish the deploy plugin 2.0 with no deps from the deploy plugin 2.0 with a plugin-level dep on wagon-webdav. Plugin realms have their parent realms managed by the pluginManager now prior to lookup or execution of the mojo instance, and PluginDescriptor.(classRealm|artifacts) attributes are set for each execution. Likewise, the MavenPluginCollector now tracks plugin descriptors with their version information included, instead of just using g:a.

Had to bump the plexus-container-default version up to alpha-36 to fix a problem in ClassicSingletonComponentManager. All realms for extensions, plugins, and projects (which contain only imports from extensions) are now managed by the MavenRealmManager.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591391 13f79535-47bb-0310-9956-ffa450edef68

-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
-        if ( bindings == null )
-        {
-            bindings = searchPluginsWithExtensions( project );
-        }
-        else
+        if ( bindings != null )
-     * Search all plugins configured in the POM that have extensions == true, looking for either a
-     * {@link LifecycleBindingLoader} instance, or a {@link LifecycleMapping} instance that matches the project's
-     * packaging. For the first match found, construct the corresponding LifecycleBindings instance and return it after
-     * POM configurations have been injected into any appropriate MojoBinding instances contained within.
-     */
-    private LifecycleBindings searchPluginsWithExtensions( final MavenProject project )
-        throws LifecycleLoaderException, LifecycleSpecificationException
-    {
-        List plugins = project.getBuildPlugins();
-        String packaging = project.getPackaging();
-
-        LifecycleBindings bindings = null;
-
-        for ( Iterator it = plugins.iterator(); it.hasNext(); )
-        {
-            Plugin plugin = (Plugin) it.next();
-            if ( plugin.isExtensions() )
-            {
-                LifecycleBindingLoader loader = null;
-
-                try
-                {
-                    loader =
-                        (LifecycleBindingLoader) pluginLoader.loadPluginComponent( LifecycleBindingLoader.ROLE,
-                                                                                   packaging, plugin, project );
-                }
-                catch ( ComponentLookupException e )
-                {
-                    logger.debug( LifecycleBindingLoader.ROLE + " for packaging: " + packaging
-                                    + " could not be retrieved from plugin: " + plugin.getKey() + ".\nReason: "
-                                    + e.getMessage(), e );
-                }
-                catch ( PluginLoaderException e )
-                {
-                    throw new LifecycleLoaderException( "Failed to load plugin: " + plugin.getKey() + ". Reason: "
-                                    + e.getMessage(), e );
-                }
-
-                if ( loader != null )
-                {
-                    bindings = loader.getBindings();
-                }
-
-                // TODO: Remove this once we no longer have to support legacy-style lifecycle mappings
-                if ( bindings == null )
-                {
-                    LifecycleMapping mapping = null;
-                    try
-                    {
-                        mapping =
-                            (LifecycleMapping) pluginLoader.loadPluginComponent( LifecycleMapping.ROLE, packaging,
-                                                                                 plugin, project );
-                    }
-                    catch ( ComponentLookupException e )
-                    {
-                        logger.debug( LifecycleMapping.ROLE + " for packaging: " + packaging
-                                        + " could not be retrieved from plugin: " + plugin.getKey() + ".\nReason: "
-                                        + e.getMessage(), e );
-                    }
-                    catch ( PluginLoaderException e )
-                    {
-                        throw new LifecycleLoaderException( "Failed to load plugin: " + plugin.getKey() + ". Reason: "
-                                        + e.getMessage(), e );
-                    }
-
-                    if ( mapping != null )
-                    {
-                        bindings = legacyLifecycleMappingParser.parseMappings( mapping, packaging );
-                    }
-                }
-
-                if ( bindings != null )
-                {
-                    break;
-                }
-            }
-        }
-
-        if ( bindings != null )
-        {
-            BindingUtils.injectProjectConfiguration( bindings, project );
-        }
-
-        return bindings;
-    }
-
-    /**
-        String projectId = project.getId();
-

MOV25 MOV42 MOV33 MOV21 MOV42 MOV42 MOV42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL10 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60