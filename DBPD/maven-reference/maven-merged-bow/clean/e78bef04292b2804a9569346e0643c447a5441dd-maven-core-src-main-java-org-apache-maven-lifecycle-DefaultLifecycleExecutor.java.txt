PR: MNG-598
implement ability to retrieve packaging handlers (lifecycle mappings) from extension plugins. Remove plugin mapping
metadata for the same
integration tests are in place for type handlers but commented out until implemented (41)


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@225263 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.artifact.repository.metadata.RepositoryMetadataManagementException;
-import org.apache.maven.plugin.mapping.PluginMappingManagementException;
-import org.apache.maven.plugin.mapping.PluginMappingManager;
-        throws LifecycleExecutionException
+        throws ArtifactResolutionException, LifecycleExecutionException
-        Map mappings;
-
+        LifecycleMapping m;
+
-            PluginMappingManager mappingManager = getPluginMappingManager( session, project );
-
-            Plugin pluginContainingLifecycleMapping = mappingManager.getByPackaging( packaging );
-
-            LifecycleMapping m;
-
-            if ( pluginContainingLifecycleMapping != null )
-            {
-                try
-                {
-                    pluginManager.verifyPlugin( pluginContainingLifecycleMapping, project, session.getSettings(),
-                                                session.getLocalRepository() );
-
-                    m = (LifecycleMapping) pluginManager.getPluginComponent( pluginContainingLifecycleMapping,
-                                                                             LifecycleMapping.ROLE, packaging );
-
-                    mappings = m.getPhases();
-                }
-                catch ( ComponentLookupException e )
-                {
-                    throw new LifecycleExecutionException( "Plugin: " + pluginContainingLifecycleMapping.getKey() +
-                        " declares lifecycle mapping for: \'" + packaging +
-                        "\', but does not appear to contain the actual mapping among its component descriptors.", e );
-                }
-            }
-            else
-            {
-                try
-                {
-                    m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
-
-                    mappings = m.getPhases();
-                }
-                catch ( ComponentLookupException e )
-                {
-                    getLogger().warn(
-                        "Lifecycle mappings not found for packaging: \'" + packaging + "\'. Using defaults." );
-
-                    getLogger().debug( "Lifecycle mappings not found for packaging: \'" + packaging + "\'.", e );
-
-                    mappings = defaultPhases;
-                }
-            }
-        }
-        catch ( ArtifactResolutionException e )
-        {
-            throw new LifecycleExecutionException(
-                "Cannot load plugin which defines lifecycle mappings for: \'" + packaging + "\'.", e );
+            m = (LifecycleMapping) findExtension( project, LifecycleMapping.ROLE, packaging, session.getSettings(),
+                                                  session.getLocalRepository() );
-                "Cannot load plugin which defines lifecycle mappings for: \'" + packaging + "\'.", e );
+                "Cannot load extension plugin obtaining lifecycle mappings for: \'" + packaging + "\'.", e );
-            throw new LifecycleExecutionException( "Cannot load lifecycle mappings.", e );
+            throw new LifecycleExecutionException(
+                "Cannot load extension plugin obtaining lifecycle mappings for: \'" + packaging + "\'.", e );
-        return mappings;
-    }
-
-    private PluginMappingManager getPluginMappingManager( MavenSession session, MavenProject project )
-        throws LifecycleExecutionException
-    {
-        PluginMappingManager mappingManager = session.getPluginMappingManager();
-
-        // don't reassemble the plugin mappings if the session has already been configured with them.
-        if ( mappingManager == null )
+        if ( m == null )
-                List pluginGroupIds = session.getSettings().getPluginGroups();
-                List pluginRepositories = project.getPluginArtifactRepositories();
-                ArtifactRepository localRepository = session.getLocalRepository();
-
-                mappingManager = pluginMappingBuilder.loadPluginMappings( pluginGroupIds, pluginRepositories,
-                                                                          localRepository );
-
-                // lazily configure this on the session.
-                session.setPluginMappingManager( mappingManager );
+                m = (LifecycleMapping) session.lookup( LifecycleMapping.ROLE, packaging );
-            catch ( RepositoryMetadataManagementException e )
+            catch ( ComponentLookupException e )
-                throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
-            }
-            catch ( PluginMappingManagementException e )
-            {
-                throw new LifecycleExecutionException( "Cannot load plugin mappings.", e );
+                getLogger().warn(
+                    "Lifecycle mappings not found for packaging: \'" + packaging + "\'. Using defaults." );
+
+                getLogger().debug( "Lifecycle mappings not found for packaging: \'" + packaging + "\'.", e );
+
+                return defaultPhases;
-        return mappingManager;
+        return m.getPhases();
+    }
+
+    private Object findExtension( MavenProject project, String role, String roleHint, Settings settings,
+                                  ArtifactRepository localRepository )
+        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException
+    {
+        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )
+        {
+            Plugin plugin = (Plugin) i.next();
+
+            if ( plugin.isExtensions() )
+            {
+                pluginManager.verifyPlugin( plugin, project, settings, localRepository );
+
+                // TODO: if moved to the plugin manager we already have the descriptor from above and so do can lookup the container directly
+                try
+                {
+                    return pluginManager.getPluginComponent( plugin, role, roleHint );
+                }
+                catch ( ComponentLookupException e )
+                {
+                    getLogger().debug( "Unable to find the lifecycle component in the extension", e );
+                }
+            }
+        }
+        return null;

MOV44 MOV43 MOV8 UPD43 UPD42 INS44 INS44 INS44 INS43 INS43 INS43 INS8 MOV60 INS54 INS41 UPD42 UPD43 UPD42 INS43 INS42 INS43 INS42 MOV43 INS42 INS42 INS42 INS42 INS24 INS41 MOV8 INS12 INS12 UPD27 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 INS58 INS32 INS8 INS33 MOV44 INS8 MOV44 INS8 UPD42 INS43 INS59 INS42 INS42 INS60 INS25 INS7 INS53 INS53 UPD42 MOV42 UPD42 MOV42 MOV32 MOV43 MOV59 INS32 INS8 INS42 INS11 UPD42 MOV42 INS14 INS14 UPD42 UPD42 INS11 UPD42 MOV42 UPD42 MOV42 MOV21 INS54 MOV43 MOV32 MOV43 INS27 INS42 MOV43 INS27 INS42 INS41 UPD42 UPD42 INS43 INS32 INS32 INS8 MOV12 UPD42 UPD42 INS40 UPD42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS41 MOV44 INS8 INS32 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL44 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL32 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL43 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL43 DEL59 DEL60 DEL42 DEL43 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8