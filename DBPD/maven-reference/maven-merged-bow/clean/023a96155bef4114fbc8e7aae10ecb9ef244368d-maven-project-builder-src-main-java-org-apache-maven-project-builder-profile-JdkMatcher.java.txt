Support for jdk activation ranges.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@750099 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
-public class JdkMatcher implements ActiveProfileMatcher {
-    //TODO: Ranges
-    public boolean isMatch(ModelContainer modelContainer, List<InterpolatorProperty> properties) {
-        if(modelContainer == null )
+public class JdkMatcher
+    implements ActiveProfileMatcher
+{
+    // TODO: Ranges
+    public boolean isMatch( ModelContainer modelContainer, List<InterpolatorProperty> properties )
+    {
+        if ( modelContainer == null )
-            throw new IllegalArgumentException("modelContainer: null");
+            throw new IllegalArgumentException( "modelContainer: null" );
-        if(properties == null)
+        if ( properties == null )
-        for(InterpolatorProperty property : properties)
+        for ( InterpolatorProperty property : properties )
-            if(property.getKey().equals("${java.specification.version}"))
+            if ( property.getKey().equals( "${java.specification.version}" ) )
-                for(ModelProperty modelProperty : modelContainer.getProperties())
+                for ( ModelProperty modelProperty : modelContainer.getProperties() )
-                    if(modelProperty.getUri().equals(ProjectUri.Profiles.Profile.Activation.jdk))
+                    if ( modelProperty.getUri().equals( ProjectUri.Profiles.Profile.Activation.jdk ) )
-                        if(modelProperty.getValue().startsWith("!"))
+                        if ( modelProperty.getResolvedValue().startsWith( "!" ) )
-                            return !version.equals(modelProperty.getValue().replaceFirst("!", ""));
+                            return !version.equals( modelProperty.getResolvedValue().replaceFirst( "!", "" ) );
+                        }
+                        else if ( isRange( modelProperty.getResolvedValue()) )
+                        {
+                            return isInRange( version, getRange( modelProperty.getResolvedValue()));
-                            return version.equals(modelProperty.getValue());
+                            return version.equals( modelProperty.getResolvedValue() );
-                return false;   
+                return false;
-}
+    private static boolean isInRange( String value, List<RangeValue> range )
+    {
+            int leftRelation = getRelationOrder(value, range.get( 0 ), true);
+            
+            if( leftRelation == 0)
+            {
+                return true;
+            }
+            
+            if(leftRelation < 0)
+            {
+                return false;
+            }
+            
+            return getRelationOrder(value, range.get( 1 ), false) <= 0;
+    }
+    
+    private static int getRelationOrder(String value, RangeValue rangeValue, boolean isLeft)
+    {
+        List<String> valueTokens = Arrays.asList(value.split( "." ));
+        List<String> rangeValueTokens = Arrays.asList(rangeValue.value.split( "." ));
+        
+        int max = Math.max( valueTokens.size(), rangeValueTokens.size() );
+        addZeroTokens(valueTokens, max);
+        addZeroTokens(rangeValueTokens, max);
+       
+        if(value.equals( rangeValue.value ) )
+        {
+            return (rangeValue.isClosed()) ? 0 : -1;
+        }
+
+        for( int i = 0; i < valueTokens.size() ; i++)
+        {
+            int x = Integer.getInteger( valueTokens.get( i ) );
+            int y = Integer.getInteger( rangeValueTokens.get( i ) );
+            if( x < y)
+            {
+                return -1;
+            }
+            else if( x > y)
+            {
+                return 1;
+            }
+        }
+        return 0;            
+    }
+    
+    private static void addZeroTokens(List<String> tokens, int max)
+    {
+        if(tokens.size() < max)
+        {
+            for(int i = 0; i < (max - tokens.size()) ; i++){
+                tokens.add( "0" );
+            }
+        }        
+    }
+    
+    private static boolean isRange(String value)
+    {
+        return value.contains( "," );
+    }
+
+    private static List<RangeValue> getRange( String range )
+    {
+        List<RangeValue> ranges = new ArrayList<RangeValue>();
+
+        for ( String token : range.split( "," ) )
+        {
+            if ( token.startsWith( "[" ) )
+            {
+                ranges.add( new RangeValue( token.replace( "[", "" ), true ) );
+            }
+            else if ( token.startsWith( "(" ) )
+            {
+                ranges.add( new RangeValue( token.replace( "(", "" ), false ) );
+            }
+            else if ( token.endsWith( "]" ) )
+            {
+                ranges.add( new RangeValue( token.replace( "]", "" ), true ) );
+            }
+            else if ( token.endsWith( ")" ) )
+            {
+                ranges.add( new RangeValue( token.replace( ")", "" ), false ) );
+            } 
+            
+        }
+        if(ranges.size() < 2)
+        {
+                ranges.add( new RangeValue("99999999", false));
+        }
+        return ranges;
+    }
+
+    private static class RangeValue
+    {
+        private String value;
+
+        private boolean isClosed;
+
+        RangeValue( String value, boolean isClosed )
+        {
+            this.value = value.trim();
+            this.isClosed = isClosed;
+        }
+
+        public String getValue()
+        {
+            return value;
+        }
+
+        public boolean isClosed()
+        {
+            return isClosed;
+        }
+    }
+}

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS43 INS42 INS74 INS42 INS60 INS25 INS25 INS41 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS60 INS60 INS21 INS21 INS25 INS24 INS41 INS74 INS42 INS39 INS42 INS25 INS43 INS42 INS41 INS43 INS43 INS43 INS42 INS60 INS70 INS25 INS41 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS43 INS43 INS39 INS59 INS27 INS8 INS27 INS8 INS27 INS42 INS42 INS74 INS59 INS74 INS59 INS39 INS59 INS32 INS32 INS32 INS8 INS58 INS27 INS37 INS8 INS34 INS43 INS43 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS42 INS41 INS41 INS42 INS42 INS42 INS32 INS42 INS34 INS41 INS42 INS34 INS41 INS32 INS34 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS41 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS24 INS42 INS42 INS45 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS25 INS32 INS34 INS21 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS9 INS9 INS9 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS16 INS42 INS34 INS42 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS42 INS42 INS58 INS27 INS37 INS8 INS42 INS42 INS74 INS42 INS32 INS8 INS25 INS42 INS42 INS32 INS22 INS32 INS22 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS45 INS40 INS42 INS45 INS42 INS42 INS42 INS42 INS36 INS34 INS38 INS42 INS32 INS42 INS32 INS42 INS42 INS41 INS27 INS8 INS39 INS59 INS42 INS36 INS42 INS21 INS43 INS43 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS42 INS42 INS14 INS52 INS42 INS42 INS42 INS52 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS38 INS42 INS42 INS41 INS42 INS34 INS27 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS43 INS45 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS14 INS32 INS42 INS42 INS45 INS21 INS32 INS8 INS42 INS42 INS42 INS43 INS32 INS9 INS42 INS42 INS14 INS32 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS45 INS45 INS43 INS32 INS9 INS42 INS42 INS14 INS32 INS25 INS42 INS42 INS42 INS45 INS45 INS43 INS32 INS9 INS42 INS42 INS14 INS32 INS8 MOV8 INS42 INS42 INS42 INS45 INS45 INS43 INS32 INS9 UPD42 INS42 INS32 INS41 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 INS42 INS42