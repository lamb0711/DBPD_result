Refactored out more uses of modello and moved classes from maven-project to maven-project-builder. Doing this so that maven-mercury will not have direct dependency on modello or maven model.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@746002 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
-import org.apache.maven.project.DuplicateArtifactAttachmentException;
-import org.apache.maven.project.MavenProject;
-import org.apache.maven.project.MavenProjectBuilder;
-import org.apache.maven.project.ProjectBuildingException;
+import org.apache.maven.project.*;
+import org.apache.maven.project.builder.*;
+import org.apache.maven.project.ProjectBuilder;
-import org.apache.maven.project.builder.Interpolator;
-import org.apache.maven.project.builder.PomInterpolatorTag;
-import org.apache.maven.project.builder.ProjectBuilder;
+import org.apache.maven.shared.model.ModelProperty;
+import org.apache.maven.shared.model.ModelMarshaller;
+import org.apache.maven.shared.model.ModelTransformerContext;
-                        Interpolator.interpolateXmlString( String.valueOf( dom ), interpolatorProperties );
+                        interpolateXmlString( String.valueOf( dom ), interpolatorProperties );
+
+    private static String interpolateXmlString( String xml, List<InterpolatorProperty> interpolatorProperties )
+        throws IOException
+    {
+        List<ModelProperty> modelProperties = ModelMarshaller.marshallXmlToModelProperties( new ByteArrayInputStream( xml.getBytes() ), ProjectUri.baseUri, PomTransformer.URIS );
+
+        Map<String, String> aliases = new HashMap<String, String>();
+        aliases.put( "project.", "pom." );
+
+        List<InterpolatorProperty> ips = new ArrayList<InterpolatorProperty>( interpolatorProperties );
+        ips.addAll( ModelTransformerContext.createInterpolatorProperties( modelProperties, ProjectUri.baseUri, aliases, PomInterpolatorTag.PROJECT_PROPERTIES.name(), false, false ) );
+
+        for ( ModelProperty mp : modelProperties )
+        {
+            if ( mp.getUri().startsWith( ProjectUri.properties ) && mp.getValue() != null )
+            {
+                String uri = mp.getUri();
+                ips.add( new InterpolatorProperty( "${" + uri.substring( uri.lastIndexOf( "/" ) + 1, uri.length() ) + "}", mp.getValue() ) );
+            }
+        }
+
+        ModelTransformerContext.interpolateModelProperties( modelProperties, ips );
+        return ModelMarshaller.unmarshalModelPropertiesToXml( modelProperties, ProjectUri.baseUri );
+    }

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS21 INS60 INS21 INS70 INS21 INS41 INS42 INS43 INS43 INS74 INS59 INS74 INS59 INS32 INS74 INS59 INS32 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS45 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS40 INS40 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS9 INS9 INS42 INS27 INS8 INS43 INS32 INS43 INS43 INS43 INS43 INS43 INS40 INS42 INS32 INS27 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS33 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS43 INS27 INS32 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS45 DEL42