[MNG-4107] ser settings can't override properties used for POM interpolation. Cleaned up the interpolation code and the MavenProjectBuilder impl. Building and interpolation is now more clearly separated.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@761104 13f79535-47bb-0310-9956-ffa450edef68

-    public static PomClassicDomainModel mergeProfilesIntoModel(Collection<Profile> profiles, Model model, boolean isMostSpecialized) throws IOException
+    public static PomClassicDomainModel mergeProfilesIntoModel(Collection<Profile> profiles, PomClassicDomainModel domainModel) throws IOException
+        Model model = domainModel.getModel();
-        return convertToDomainModel( target, isMostSpecialized );
+        PomClassicDomainModel targetModel = convertToDomainModel( target, domainModel.isMostSpecialized());
+        targetModel.setParentFile(domainModel.getParentFile());
+        targetModel.setProjectDirectory(domainModel.getProjectDirectory());
+        return targetModel;
-        PomClassicDomainModel model = convertToDomainModel( target, false );
-        List<ModelProperty> props = new ArrayList<ModelProperty>( model.getModelProperties());
-        
-        //Seem to lose packaging here if it is a default jar value
-        if("jar".equals( target.getPackaging() ) )
-        {
-            props.add( new ModelProperty(ProjectUri.packaging, "jar") );
-        }
-        
-        interpolateModelProperties( props, interpolationProperties, child );
-        List<ModelProperty> modelProperties;
-        if ( child.getProjectDirectory() != null )
-        {
-            modelProperties = alignPaths( model.getModelProperties(), child.getProjectDirectory() );
-        }
-        else
-        {
-            modelProperties = model.getModelProperties();
-        }
-        return new PomClassicDomainModel( modelProperties );	    	
+        PomClassicDomainModel domainModel = new PomClassicDomainModel( convertToDomainModel( target, child.isMostSpecialized() ).getModelProperties(), child.isMostSpecialized() );
+        domainModel.setProjectDirectory(child.getProjectDirectory());
+        domainModel.setParentFile(child.getParentFile());
+        return domainModel;
-
+        
+        if("jar".equals( dm.getModel().getPackaging() ) )
+        {
+            modelProperties.add( new ModelProperty(ProjectUri.packaging, "jar") );
+        }  
+        
-
+        
+            
+        if ( dm.getProjectDirectory() != null )
+        {
+            modelProperties = alignPaths( modelProperties, dm.getProjectDirectory() );
+        }
+        

INS43 UPD42 INS60 INS60 INS21 INS21 INS41 INS60 MOV21 MOV21 MOV25 INS25 INS42 MOV43 INS59 INS43 INS59 INS32 INS32 INS42 MOV43 INS59 MOV32 INS32 INS42 INS27 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 MOV42 MOV42 INS32 INS42 INS42 INS42 INS42 MOV43 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS7 INS42 MOV42 INS32 INS42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 INS42 INS32 MOV42 MOV42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL39 DEL42 DEL44 DEL32 DEL41 DEL42 DEL32 DEL42 DEL7 DEL42 DEL32 DEL7 DEL9 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL32 DEL33 DEL27 DEL8 DEL8 DEL25 DEL42 DEL14