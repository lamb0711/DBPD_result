[MNG-4035] - Removing plugin manager changes. This is breaking tycho build and also causes a hefty performance hit. Using mixins is over-generalizing this solution. Only need to cleanup config merging.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@745040 13f79535-47bb-0310-9956-ffa450edef68

-        //
+        String goalName = mojoDescriptor.getFullGoalName();
+
+        Mojo mojo = null;
+
+        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
+
+        Xpp3Dom dom = mojoExecution.getConfiguration();
+
+        if ( dom != null )
+        {
+            try
+            {
+                List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
+                interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties(
+                        session.getProjectBuilderConfiguration().getExecutionProperties(),
+                        PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
+                interpolatorProperties.addAll( InterpolatorProperty.toInterpolatorProperties( session.getProjectBuilderConfiguration().getUserProperties(),
+                        PomInterpolatorTag.USER_PROPERTIES.name()));
+                String interpolatedDom  =
+                        Interpolator.interpolateXmlString( String.valueOf( dom ), interpolatorProperties );
+                dom = Xpp3DomBuilder.build( new StringReader( interpolatedDom ) );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new PluginManagerException(
+                                                  mojoDescriptor,
+                                                  project,
+                                                  "Failed to calculate concrete state for configuration of: "
+                                                                  + mojoDescriptor.getHumanReadableKey(),
+                                                  e );
+            }
+            catch ( IOException e )
+            {
+                throw new PluginManagerException(
+                                                  mojoDescriptor,
+                                                  project,
+                                                  "Failed to calculate concrete state for configuration of: "
+                                                                  + mojoDescriptor.getHumanReadableKey(),
+                                                  e );
+            }
+        }
-        String goalName = mojoDescriptor.getFullGoalName();
-        
-        Mojo mojo = null;
-        PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();
-            mojo = getConfiguredMojo( session, project, false, mojoExecution, realmActions );
+            mojo = getConfiguredMojo( session, dom, project, false, mojoExecution, realmActions );
-    {   /*
+    {
-        */
-        return (MavenReport) getConfiguredMojo( session, project, true, mojoExecution, new ArrayList() );
+
+        return (MavenReport) getConfiguredMojo( session, dom, project, true, mojoExecution, new ArrayList() );
+                                    Xpp3Dom dom,
+        XmlPlexusConfiguration pomConfiguration;
+
+        if ( dom == null )
+        {
+            pomConfiguration = new XmlPlexusConfiguration( "configuration" );
+        }
+        else
+        {
+            pomConfiguration = new XmlPlexusConfiguration( dom );
+        }
+
+        // Validate against non-editable (@readonly) parameters, to make sure users aren't trying to
+        // override in the POM.
+        validatePomConfiguration( mojoDescriptor, pomConfiguration );
+
+        PlexusConfiguration mergedConfiguration = mergeMojoConfiguration( pomConfiguration,
+                                                                          mojoDescriptor );
+
+        // TODO: plexus changes to make this more like the component descriptor so this can be used instead
+        //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
+        //                                                                          mojoDescriptor.getConfiguration() );
+
-            List<InterpolatorProperty> interpolatorProperties = new ArrayList<InterpolatorProperty>();
+        PlexusConfiguration extractedMojoConfiguration = extractMojoConfiguration(
+                                                                                   mergedConfiguration,
+                                                                                   mojoDescriptor );
-            interpolatorProperties.addAll(InterpolatorProperty.toInterpolatorProperties(session.getProjectBuilderConfiguration().getExecutionProperties(),
-                    PomInterpolatorTag.EXECUTION_PROPERTIES.name()));
+        checkDeprecatedParameters( mojoDescriptor, pomConfiguration );
-            interpolatorProperties.addAll(InterpolatorProperty.toInterpolatorProperties(session.getProjectBuilderConfiguration().getUserProperties(),
-                    PomInterpolatorTag.USER_PROPERTIES.name()));
+        checkRequiredParameters( mojoDescriptor, extractedMojoConfiguration, expressionEvaluator );
-            Plugin plugin = null;
-            try {
-                plugin = pluginRepository.findPluginById(pluginDescriptor.getId(), mojoDescriptor.getId());
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
+        populatePluginFields( mojo, mojoDescriptor, extractedMojoConfiguration, expressionEvaluator );
-
-            PlexusConfiguration mojoConfiguration = null;
-            try {
-                mojoConfiguration = ((Mixer) projectBuilder).mixPluginAndReturnConfig(plugin, mojoExecution.getConfiguration(), project.getModel(),
-                        interpolatorProperties);
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-            if(mojoConfiguration == null)
-            {
-                mojoConfiguration = new XmlPlexusConfiguration( "configuration" );
-            }
-
-        checkRequiredParameters( mojoDescriptor, mojoConfiguration, expressionEvaluator );
-
-        populatePluginFields( mojo, mojoDescriptor, mojoConfiguration, expressionEvaluator );
-            
+    private void checkDeprecatedParameters( MojoDescriptor mojoDescriptor,
+                                            PlexusConfiguration extractedMojoConfiguration )
+    {
+        if ( ( extractedMojoConfiguration == null ) || ( extractedMojoConfiguration.getChildCount() < 1 ) )
+        {
+            return;
+        }
+
+        List parameters = mojoDescriptor.getParameters();
+        if ( ( parameters != null ) && !parameters.isEmpty() )
+        {
+            for ( Iterator it = parameters.iterator(); it.hasNext(); )
+            {
+                Parameter param = (Parameter) it.next();
+
+                if ( param.getDeprecated() != null )
+                {
+                    boolean warnOfDeprecation = false;
+                    PlexusConfiguration child = extractedMojoConfiguration.getChild( param.getName() );
+                    try
+                    {
+                        if ( ( child != null ) && ( child.getValue() != null ) )
+                        {
+                            warnOfDeprecation = true;
+                        }
+                        else if ( param.getAlias() != null)
+                        {
+                            child = extractedMojoConfiguration.getChild( param.getAlias() );
+                            if ( ( child != null ) && ( child.getValue() != null ) )
+                            {
+                                warnOfDeprecation = true;
+                            }
+                        }
+                    }
+                    catch ( PlexusConfigurationException e )
+                    {
+                        // forget it, this is just for deprecation checking, after all...
+                    }
+
+                    if ( warnOfDeprecation )
+                    {
+                        StringBuffer buffer = new StringBuffer();
+                        buffer.append( "In mojo: " ).append( mojoDescriptor.getGoal() ).append( ", parameter: " ).append( param.getName() );
+
+                        if ( param.getAlias() != null )
+                        {
+                            buffer.append( " (alias: " ).append( param.getAlias() ).append( ")" );
+                        }
+
+                        buffer.append( " is deprecated:" ).append( "\n\n" ).append( param.getDeprecated() ).append( "\n" );
+
+                        getLogger().warn( buffer.toString() );
+                    }
+                }
+            }
+        }
+    }
+    private PlexusConfiguration extractMojoConfiguration( PlexusConfiguration mergedConfiguration,
+                                                          MojoDescriptor mojoDescriptor )
+    {
+        Map parameterMap = mojoDescriptor.getParameterMap();
+
+        PlexusConfiguration[] mergedChildren = mergedConfiguration.getChildren();
+
+        XmlPlexusConfiguration extractedConfiguration = new XmlPlexusConfiguration( "configuration" );
+
+        for ( int i = 0; i < mergedChildren.length; i++ )
+        {
+            PlexusConfiguration child = mergedChildren[i];
+
+            if ( parameterMap.containsKey( child.getName() ) )
+            {
+                extractedConfiguration.addChild( copyConfiguration( child ) );
+            }
+            else
+            {
+                // TODO: I defy anyone to find these messages in the '-X' output! Do we need a new log level?
+                // ideally, this would be elevated above the true debug output, but below the default INFO level...
+                // [BP] (2004-07-18): need to understand the context more but would prefer this could be either WARN or
+                // removed - shouldn't need DEBUG to diagnose a problem most of the time.
+                getLogger().debug(
+                                   "*** WARNING: Configuration \'" + child.getName()
+                                                   + "\' is not used in goal \'"
+                                                   + mojoDescriptor.getFullGoalName()
+                                                   + "; this may indicate a typo... ***" );
+            }
+        }
+
+        return extractedConfiguration;
+    }
+
+
+    private void validatePomConfiguration( MojoDescriptor goal,
+                                           PlexusConfiguration pomConfiguration )
+        throws PluginConfigurationException
+    {
+        List parameters = goal.getParameters();
+
+        if ( parameters == null )
+        {
+            return;
+        }
+
+        for ( int i = 0; i < parameters.size(); i++ )
+        {
+            Parameter parameter = (Parameter) parameters.get( i );
+
+            // the key for the configuration map we're building.
+            String key = parameter.getName();
+
+            PlexusConfiguration value = pomConfiguration.getChild( key, false );
+
+            if ( ( value == null ) && StringUtils.isNotEmpty( parameter.getAlias() ) )
+            {
+                key = parameter.getAlias();
+                value = pomConfiguration.getChild( key, false );
+            }
+
+            if ( value != null )
+            {
+                // Make sure the parameter is either editable/configurable, or else is NOT specified in the POM
+                if ( !parameter.isEditable() )
+                {
+                    StringBuffer errorMessage = new StringBuffer().append( "ERROR: Cannot override read-only parameter: " );
+                    errorMessage.append( key );
+                    errorMessage.append( " in goal: " ).append( goal.getFullGoalName() );
+
+                    throw new PluginConfigurationException( goal.getPluginDescriptor(),
+                                                            errorMessage.toString() );
+                }
+
+                String deprecated = parameter.getDeprecated();
+                if ( StringUtils.isNotEmpty( deprecated ) )
+                {
+                    getLogger().warn( "DEPRECATED [" + parameter.getName() + "]: " + deprecated );
+                }
+            }
+        }
+    }
+
+    private PlexusConfiguration mergeMojoConfiguration( XmlPlexusConfiguration fromPom,
+                                                        MojoDescriptor mojoDescriptor )
+    {
+        XmlPlexusConfiguration result = new XmlPlexusConfiguration( fromPom.getName() );
+        result.setValue( fromPom.getValue( null ) );
+
+        if ( mojoDescriptor.getParameters() != null )
+        {
+            PlexusConfiguration fromMojo = mojoDescriptor.getMojoConfiguration();
+
+            for ( Iterator it = mojoDescriptor.getParameters().iterator(); it.hasNext(); )
+            {
+                Parameter parameter = (Parameter) it.next();
+
+                String paramName = parameter.getName();
+                String alias = parameter.getAlias();
+                String implementation = parameter.getImplementation();
+
+                PlexusConfiguration pomConfig = fromPom.getChild( paramName );
+                PlexusConfiguration aliased = null;
+
+                if ( alias != null )
+                {
+                    aliased = fromPom.getChild( alias );
+                }
+
+                PlexusConfiguration mojoConfig = fromMojo.getChild( paramName, false );
+
+                // first we'll merge configurations from the aliased and real params.
+                // TODO: Is this the right thing to do?
+                if ( aliased != null )
+                {
+                    if ( pomConfig == null )
+                    {
+                        pomConfig = new XmlPlexusConfiguration( paramName );
+                    }
+
+                    pomConfig = buildTopDownMergedConfiguration( pomConfig, aliased );
+                }
+
+                PlexusConfiguration toAdd = null;
+
+                if ( pomConfig != null )
+                {
+                    pomConfig = buildTopDownMergedConfiguration( pomConfig, mojoConfig );
+
+                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) )
+                         || ( pomConfig.getChildCount() > 0 ) )
+                    {
+                        toAdd = pomConfig;
+                    }
+                }
+
+                if ( ( toAdd == null ) && ( mojoConfig != null ) )
+                {
+                    toAdd = copyConfiguration( mojoConfig );
+                }
+
+                if ( toAdd != null )
+                {
+                    if ( ( implementation != null )
+                         && ( toAdd.getAttribute( "implementation", null ) == null ) )
+                    {
+
+                        XmlPlexusConfiguration implementationConf = new XmlPlexusConfiguration(
+                                                                                                paramName );
+
+                        implementationConf.setAttribute( "implementation",
+                                                         parameter.getImplementation() );
+
+                        toAdd = buildTopDownMergedConfiguration( toAdd, implementationConf );
+                    }
+
+                    result.addChild( toAdd );
+                }
+            }
+        }
+        return result;
+    }
+
+    private XmlPlexusConfiguration buildTopDownMergedConfiguration( PlexusConfiguration dominant,
+                                                                    PlexusConfiguration recessive )
+    {
+        XmlPlexusConfiguration result = new XmlPlexusConfiguration( dominant.getName() );
+
+        String value = dominant.getValue( null );
+
+        if ( StringUtils.isEmpty( value ) && ( recessive != null ) )
+        {
+            value = recessive.getValue( null );
+        }
+
+        if ( StringUtils.isNotEmpty( value ) )
+        {
+            result.setValue( value );
+        }
+
+        String[] attributeNames = dominant.getAttributeNames();
+
+        for ( int i = 0; i < attributeNames.length; i++ )
+        {
+            String attributeValue = dominant.getAttribute( attributeNames[i], null );
+
+            result.setAttribute( attributeNames[i], attributeValue );
+        }
+
+        if ( recessive != null )
+        {
+            attributeNames = recessive.getAttributeNames();
+
+            for ( int i = 0; i < attributeNames.length; i++ )
+            {
+                String attributeValue = recessive.getAttribute( attributeNames[i], null );
+                // TODO: recessive seems to be dominant here?
+                result.setAttribute( attributeNames[i], attributeValue );
+            }
+        }
+
+        PlexusConfiguration[] children = dominant.getChildren();
+
+        for ( int i = 0; i < children.length; i++ )
+        {
+            PlexusConfiguration childDom = children[i];
+            PlexusConfiguration childRec = recessive == null ? null
+                            : recessive.getChild( childDom.getName(), false );
+
+            if ( childRec != null )
+            {
+                result.addChild( buildTopDownMergedConfiguration( childDom, childRec ) );
+            }
+            else
+            { // FIXME: copy, or use reference?
+                result.addChild( copyConfiguration( childDom ) );
+            }
+        }
+
+        return result;
+    }
+
+    public static PlexusConfiguration copyConfiguration( PlexusConfiguration src )
+    {
+        // TODO: shouldn't be necessary
+        XmlPlexusConfiguration dom = new XmlPlexusConfiguration( src.getName() );
+        dom.setValue( src.getValue( null ) );
+
+        String[] attributeNames = src.getAttributeNames();
+        for ( int i = 0; i < attributeNames.length; i++ )
+        {
+            String attributeName = attributeNames[i];
+            dom.setAttribute( attributeName, src.getAttribute( attributeName, null ) );
+        }
+
+        PlexusConfiguration[] children = src.getChildren();
+        for ( int i = 0; i < children.length; i++ )
+        {
+            dom.addChild( copyConfiguration( children[i] ) );
+        }
+
+        return dom;
+    }
+

INS31 INS31 INS31 INS31 INS31 INS31 MOV60 MOV60 MOV60 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS60 INS25 INS60 INS60 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS24 INS41 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS24 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS25 INS60 INS24 INS25 INS60 INS24 INS41 INS42 INS43 INS42 INS60 INS21 INS60 INS24 INS60 INS24 INS41 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 MOV60 MOV21 INS42 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS5 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS59 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS21 INS60 INS60 MOV21 INS36 INS36 INS41 INS42 INS42 INS32 INS36 INS38 INS24 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS42 INS42 INS32 INS42 INS33 INS41 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS60 INS25 INS25 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS33 INS60 INS24 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS36 INS21 INS42 INS42 INS42 INS21 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS42 INS33 INS21 INS24 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS8 INS12 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS7 INS42 INS43 INS8 MOV43 INS59 UPD43 MOV43 INS59 INS32 INS27 INS27 INS42 INS42 INS27 INS32 INS58 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS34 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS32 INS42 INS42 INS33 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS43 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS27 INS7 INS32 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS7 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS60 INS21 MOV21 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 UPD42 INS21 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS33 INS32 INS34 INS42 INS33 INS42 INS42 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS36 INS32 INS21 INS21 INS42 INS33 INS25 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS25 INS60 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS42 INS42 INS2 INS42 INS42 INS16 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV74 INS59 INS32 INS43 INS59 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 MOV32 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS27 INS42 INS42 INS32 INS7 INS7 INS38 INS8 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS33 INS42 INS42 INS2 INS33 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS42 INS42 INS27 INS33 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS2 INS42 MOV14 INS42 MOV42 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS14 UPD42 INS42 INS14 INS42 INS42 INS42 INS42 INS11 INS32 INS33 INS60 INS60 INS54 INS25 INS42 INS42 INS32 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS60 INS21 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS42 INS42 INS33 INS42 INS33 INS21 INS25 INS36 INS36 INS21 INS42 INS33 INS25 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS33 INS42 INS42 INS32 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS27 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS39 INS59 INS43 INS59 INS8 INS12 INS42 INS8 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS43 INS59 INS32 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS9 INS27 INS8 INS7 INS7 INS27 INS8 INS27 INS27 INS7 INS27 INS8 INS32 INS42 INS42 INS2 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS25 INS44 INS8 INS60 INS21 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS32 INS32 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS32 INS32 INS36 INS21 INS42 INS33 INS42 INS33 INS42 INS32 INS36 INS36 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS25 INS43 INS42 INS43 INS59 INS32 INS27 INS8 INS32 INS32 INS14 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS7 INS42 INS42 INS27 INS27 INS43 INS59 INS32 INS7 INS42 INS42 INS36 INS36 INS21 INS27 INS8 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS32 INS33 INS21 INS32 INS42 INS45 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS33 INS32 INS34 INS42 INS42 INS42 INS33 INS32 INS33 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS32 INS27 INS27 INS7 INS32 INS33 INS21 INS25 INS43 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS42 INS9 INS42 INS42 INS7 INS27 INS8 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS36 INS36 INS21 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS27 INS27 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS42 INS9 INS42 INS42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL33 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7