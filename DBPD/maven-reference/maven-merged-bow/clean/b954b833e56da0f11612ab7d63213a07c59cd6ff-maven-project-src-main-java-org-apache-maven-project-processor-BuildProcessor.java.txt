[MNG-3906] - Project-level plugin dependencies order. Fixed a lot of problems with ordering of elements. We need to assume that the processors always get the parent model first, then the child, down the line.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@757936 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.SortedSet;
-import java.util.TreeSet;
+            copyResources(p.getBuild(), t.getBuild());
-            copy(build, t.getBuild(), isProfile);
+            
-
+            copy(build, t.getBuild(), isProfile);
+                    
+            copyResources(build, t.getBuild());
+            copyResources(p.getBuild(), t.getBuild());
+            
+            copyResources(build, t.getBuild());
-        } 
-        
+        }       
-
-    private static void copy(BuildBase source, Build target, boolean isProfile)    
+    
+    private static void copyResources(BuildBase source, Build target)
-        if(target.getFinalName() == null)
-        {
-            target.setFinalName( source.getFinalName() );    
-        }
-        
-        if(target.getDefaultGoal() == null)
-        {
-            target.setDefaultGoal( source.getDefaultGoal() );   
-        }
-        
-        if(target.getDirectory() == null)
-        {
-            target.setDirectory( source.getDirectory() );    
-        }    
-        
-        List<String> filters = new ArrayList<String>(target.getFilters());
-        for(String filter : source.getFilters())
-        {
-            if(!filters.contains( filter ))
-            {
-                filters.add( filter );
-            }
-        }
-
-       // SortedSet<String> s = new TreeSet<String>( new ArrayList<String>( target.getFilters() ) );
-       // s.addAll( source.getFilters() );
-       // List<String> l = Arrays.asList(s.toArray( new String[s.size()]) );
-        
-        target.setFilters( filters );
-             
+        } 
+        
+        List<String> filters = new ArrayList<String>(target.getFilters());
+        for(String filter : source.getFilters())
+        {
+            if(!filters.contains( filter ))
+            {
+                filters.add( filter );
+            }
+        }
+
+       // SortedSet<String> s = new TreeSet<String>( new ArrayList<String>( target.getFilters() ) );
+       // s.addAll( source.getFilters() );
+       // List<String> l = Arrays.asList(s.toArray( new String[s.size()]) );
+        
+        target.setFilters( filters );        
+    }
+
+    private static void copy(BuildBase source, Build target, boolean isProfile)    
+    {
+        if(source.getFinalName() != null)
+        {
+            target.setFinalName( source.getFinalName() );    
+        }
+        
+        if(source.getDefaultGoal() != null)
+        {
+            target.setDefaultGoal( source.getDefaultGoal() );   
+        }
+        
+        if(source.getDirectory() != null)
+        {
+            target.setDirectory( source.getDirectory() );    
+
-        if(target.getOutputDirectory() == null)
+        if(source.getOutputDirectory() != null)
-        if(target.getScriptSourceDirectory() == null)
+        if(source.getScriptSourceDirectory() != null)
-        if(target.getSourceDirectory() == null)
+        if(source.getSourceDirectory() != null)
-        if(target.getTestOutputDirectory() == null)
+        if(source.getTestOutputDirectory() != null)
-        if(target.getTestSourceDirectory() == null)
+        if(source.getTestSourceDirectory() != null)

INS31 UPD42 MOV25 MOV25 INS83 INS83 INS39 INS42 INS44 INS44 MOV44 INS8 INS43 INS42 INS43 INS42 MOV25 MOV25 MOV25 MOV25 INS42 INS42 UPD27 UPD27 UPD27 UPD27 UPD27 UPD27 UPD27 UPD27 INS21 MOV21 INS32 INS21 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS32 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26