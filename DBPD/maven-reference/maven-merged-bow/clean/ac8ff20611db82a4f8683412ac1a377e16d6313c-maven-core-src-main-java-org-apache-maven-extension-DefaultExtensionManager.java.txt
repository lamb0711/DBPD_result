Adding project-level ClassRealm, which serves as a nexus for extensions. Extensions are loaded into separate ClassRealm instances, then scanned for components. These ComponentDescriptors are then used to add an import from the extension realm back to the project-session realm, and then the descriptor is added to the container with the project realm as its RealmId. From here, the registerWagons() method has been changed to use the map of projectSessions, and iterates through each project-level realm, setting the lookup-realm, then calling findAndRegisterWagons(..) for each. Also, the plugin manager has been changed to use the project-realm for loading plugins if it exists (the plugin realm becomes a child of the project realm, which should allow plugins to vary by project within a single reactor, though I haven't tested that yet).

Also, shading the embedder to hide the jdom classes, and adjusting the assembly appropriately.

Final thing: I'm rolling back some changes I accidentally made to the CLIManager the other day, which breaks the release plugin because the long options were removed for some reason (save action in Eclipse; don't ask).


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@585012 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.DefaultPluginManager;
-import org.apache.maven.artifact.versioning.VersionRange;
-import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
-import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
-import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
+import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.artifact.versioning.VersionRange;
+import org.apache.maven.execution.MavenProjectSession;
+import org.apache.maven.plugin.DefaultPluginManager;
+import org.codehaus.plexus.MutablePlexusContainer;
-import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.classworlds.realm.ClassRealm;
+import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;
+import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;
+import org.codehaus.plexus.component.discovery.ComponentDiscoverer;
+import org.codehaus.plexus.component.discovery.ComponentDiscovererManager;
+import org.codehaus.plexus.component.discovery.ComponentDiscoveryEvent;
+import org.codehaus.plexus.component.discovery.ComponentDiscoveryListener;
+import org.codehaus.plexus.component.discovery.DefaultComponentDiscoverer;
+import org.codehaus.plexus.component.repository.ComponentDescriptor;
+import org.codehaus.plexus.component.repository.ComponentSetDescriptor;
+import org.codehaus.plexus.component.repository.exception.ComponentRepositoryException;
+import org.codehaus.plexus.configuration.PlexusConfigurationException;
+import java.net.MalformedURLException;
+import java.util.HashSet;
+import java.util.Map;
-import java.util.HashSet;
-    private PlexusContainer container;
+    private MutablePlexusContainer container;
-                              ArtifactRepository localRepository )
-        throws ArtifactResolutionException, PlexusContainerException, ArtifactNotFoundException
+                              ArtifactRepository localRepository, Map projectSessions )
+        throws ExtensionManagerException
-        addExtension( extensionArtifact, projectArtifact, remoteRepositories, localRepository, null );
+        addExtension( extensionArtifact,
+                      projectArtifact,
+                      remoteRepositories,
+                      localRepository,
+                      null,
+                      projectSessions,
+                      MavenProjectSession.createProjectId( groupId, artifactId, version ) );
-                              ArtifactRepository localRepository )
-        throws ArtifactResolutionException, PlexusContainerException, ArtifactNotFoundException
+                              ArtifactRepository localRepository, Map projectSessions )
+        throws ExtensionManagerException
-        addExtension( artifact, project.getArtifact(), project.getRemoteArtifactRepositories(),
-                      localRepository, new ActiveArtifactResolver( project ) );
+        addExtension( artifact,
+                      project.getArtifact(),
+                      project.getRemoteArtifactRepositories(),
+                      localRepository,
+                      new ActiveArtifactResolver( project ),
+                      projectSessions,
+                      MavenProjectSession.createProjectId( project.getGroupId(), project.getArtifactId(), project.getVersion() )  );
-                               ArtifactRepository localRepository, ActiveArtifactResolver activeArtifactResolver )
-        throws ArtifactResolutionException, PlexusContainerException, ArtifactNotFoundException
+                               ArtifactRepository localRepository,
+                               ActiveArtifactResolver activeArtifactResolver,
+                               Map projectSessions,
+                               String projectId )
+        throws ExtensionManagerException
-        if ( extensionArtifact != null )
+        MavenProjectSession projectSession = (MavenProjectSession) projectSessions.get( projectId );
+        if ( projectSession == null )
+        {
+            try
+            {
+                projectSession = new MavenProjectSession( projectId, container );
+            }
+            catch ( PlexusContainerException e )
+            {
+                throw new ExtensionManagerException( "Failed to create project realm for: " + projectId, projectId, e );
+            }
+
+            projectSessions.put( projectId, projectSession );
+        }
+
+        // if the extension is null, or if it's already been added to the current project-session, skip it.
+        if ( ( extensionArtifact != null ) && !projectSession.containsRealm( extensionArtifact ) )
-
-                throw new ArtifactResolutionException( "Unable to download metadata from repository for plugin '" +
-                    extensionArtifact.getId() + "': " + e.getMessage(), extensionArtifact, e );
+                throw new ExtensionManagerException( "Unable to download metadata from repository for extension artifact '" +
+                    extensionArtifact.getId() + "': " + e.getMessage(), extensionArtifact, projectId, e );
-            ArtifactResolutionResult result =
-                artifactResolver.resolveTransitively( dependencies, projectArtifact,
+            ArtifactResolutionResult result;
+            try
+            {
+                result = artifactResolver.resolveTransitively( dependencies, projectArtifact,
+            }
+            catch ( ArtifactResolutionException e )
+            {
+                throw new ExtensionManagerException( "Unable to resolve one or more extension artifacts for: " + extensionArtifact.getId(), extensionArtifact, projectId, e );
+            }
+            catch ( ArtifactNotFoundException e )
+            {
+                throw new ExtensionManagerException( "One or more extension artifacts is missing for: " + extensionArtifact.getId(), extensionArtifact, projectId, e );
+            }
+
+            ClassRealm extensionRealm;
+            try
+            {
+                extensionRealm = projectSession.createExtensionRealm( extensionArtifact );
+            }
+            catch ( DuplicateRealmException e )
+            {
+                throw new ExtensionManagerException( "Unable to create extension ClassRealm for extension: " + extensionArtifact.getId() + " within session for project: " + projectId, extensionArtifact, projectId, e );
+            }
+
+            projectSession.addComponentRealm( extensionRealm );
-                getLogger().debug( "Adding to extension classpath: " + a.getFile() + " in classRealm: " + container.getContainerRealm().getId() );
+                getLogger().debug( "Adding to extension classpath: " + a.getFile() + " in classRealm: " + extensionRealm.getId() );
-                container.addJarResource( a.getFile() );
+                try
+                {
+                    extensionRealm.addURL( a.getFile().toURL() );
+                }
+                catch ( MalformedURLException e )
+                {
+                    throw new ExtensionManagerException( "Unable to generate URL from extension artifact file: " + a.getFile(), extensionArtifact, projectId, e );
+                }
+            }
-                artifactFilterManager.excludeArtifact( a.getArtifactId() );
+            ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();
+            discoverer.setManager( new DummyDiscovererManager() );
+
+            ClassRealm projectRealm = projectSession.getProjectRealm();
+            try
+            {
+                List componentSetDescriptors = discoverer.findComponents( container.getContext(), extensionRealm );
+                for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )
+                {
+                    ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();
+                    for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )
+                    {
+                        ComponentDescriptor comp = (ComponentDescriptor) compIt.next();
+                        String implementation = comp.getImplementation();
+
+                        try
+                        {
+                            getLogger().debug( "Importing: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + projectRealm.getId() );
+
+                            projectRealm.importFrom( extensionRealm.getId(), implementation );
+
+                            comp.setRealmId( projectRealm.getId() );
+                            container.addComponentDescriptor( comp );
+                        }
+                        catch ( NoSuchRealmException e )
+                        {
+                            throw new ExtensionManagerException( "Failed to create import for component: " + implementation + " from extension realm: " + extensionRealm.getId() + " to project realm: " + projectRealm.getId(), extensionArtifact, projectId, e );
+                        }
+                    }
+                }
+            }
+            catch ( PlexusConfigurationException e )
+            {
+                throw new ExtensionManagerException( "Unable to discover extension components.", extensionArtifact, projectId, e );
+            }
+            catch ( ComponentRepositoryException e )
+            {
+                throw new ExtensionManagerException( "Unable to discover extension components from imports added to project-session realm.", extensionArtifact, projectId, e );
-    public void registerWagons()
+    public void registerWagons( Map projectSessions )
-        wagonManager.findAndRegisterWagons( container );
+        for ( Iterator it = projectSessions.values().iterator(); it.hasNext(); )
+        {
+            MavenProjectSession projectSession = (MavenProjectSession) it.next();
+
+            ClassRealm oldRealm = container.setLookupRealm( projectSession.getProjectRealm() );
+
+            wagonManager.findAndRegisterWagons( container );
+
+            container.setLookupRealm( oldRealm );
+        }
-        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+        container = (MutablePlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
-    }    
+    }
+
+    private static final class DummyDiscovererManager implements ComponentDiscovererManager
+    {
+
+        public void fireComponentDiscoveryEvent( ComponentDiscoveryEvent arg0 )
+        {
+        }
+
+        public List getComponentDiscoverers()
+        {
+            return null;
+        }
+
+        public Map getComponentDiscoveryListeners()
+        {
+            return null;
+        }
+
+        public List getListeners()
+        {
+            return null;
+        }
+
+        public void initialize()
+        {
+        }
+
+        public void registerComponentDiscoveryListener( ComponentDiscoveryListener arg0 )
+        {
+        }
+
+        public void removeComponentDiscoveryListener( ComponentDiscoveryListener arg0 )
+        {
+        }
+
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 UPD43 INS44 UPD43 INS44 UPD43 INS44 INS44 UPD43 INS44 INS8 INS83 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS43 INS42 UPD42 INS43 INS42 UPD42 INS43 INS42 INS43 INS42 UPD42 INS60 INS25 INS43 INS42 INS24 INS42 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS27 INS8 INS27 INS42 INS58 INS32 INS8 INS43 INS42 INS42 INS41 INS42 INS41 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS11 INS42 INS33 INS54 INS21 INS36 INS38 INS54 INS60 INS54 INS21 INS60 INS21 INS60 INS54 INS43 INS59 INS42 INS42 INS60 INS60 MOV21 INS21 INS42 INS33 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS32 INS8 INS12 INS32 MOV27 INS32 INS8 INS12 INS12 INS43 INS59 INS8 INS12 INS32 INS43 INS59 INS32 INS43 INS59 INS8 INS12 INS12 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS54 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS60 INS24 INS44 INS8 INS44 INS8 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS7 MOV43 INS42 INS53 INS7 MOV43 INS42 INS53 MOV43 INS42 INS53 INS7 INS43 INS42 INS53 INS8 INS12 INS43 INS43 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS14 INS14 INS42 MOV32 INS14 INS14 INS42 INS32 INS42 INS14 MOV21 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS24 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS59 INS58 INS32 INS8 INS43 INS45 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 UPD45 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS45 INS42 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS59 INS42 INS42 INS60 INS60 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS45 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 DEL43 DEL42 DEL43 DEL43 DEL43 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8