[MNG-5176] Print build times in an ISO 8601-style manner

+import java.util.TimeZone;
-    public static final int MS_PER_SEC = 1000;
+    private static final long ONE_SECOND = 1000L;
+    private static final long ONE_MINUTE = 60 * ONE_SECOND;
+    private static final long ONE_HOUR = 60 * ONE_MINUTE;
+    private static final long ONE_DAY = 24 * ONE_HOUR;
-    public static final int SEC_PER_MIN = 60;
-    
-     * 
+     *
-                SimpleDateFormat fmt = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ssZ" );
-                String ts = fmt.format( new Date( Long.valueOf( timestamp ) ) );
+                String ts = formatTimestamp( Long.valueOf( timestamp ) );
+    public static String formatTimestamp( long timestamp )
+    {
+        // Manual construction of the tz offset because only Java 7 understands 'ZZ' replacement
+        TimeZone tz = TimeZone.getDefault();
+        int offset = tz.getRawOffset();
+
+        long m = Math.abs( ( offset / ONE_MINUTE ) % 60 );
+        long h = Math.abs( ( offset / ONE_HOUR ) % 24 );
+
+        int offsetDir = (int) Math.signum( (float) offset );
+        char offsetSign = offsetDir >= 0 ? '+' : '-';
+        return String.format( "%tFT%<tT%s%02d:%02d", timestamp, offsetSign, h, m );
+    }
+
+    public static String formatDuration( long duration )
+    {
+        long ms = duration % 1000;
+        long s = ( duration / ONE_SECOND ) % 60;
+        long m = ( duration / ONE_MINUTE ) % 60;
+        long h = ( duration / ONE_HOUR ) % 24;
+        long d = duration / ONE_DAY;
+
+        String format;
+        if ( d > 0 )
+        {
+            format = "%d d %02d:%02d h";
+        }
+        else if ( h > 0 )
+        {
+            format = "%2$02d:%3$02d h";
+        }
+        else if ( m > 0 )
+        {
+            format = "%3$02d:%4$02d min";
+        }
+        else
+        {
+            format = "%4$d.%5$03d s";
+        }
+
+        return String.format( format, d, h, m, s, ms );
+    }
+

INS26 INS40 INS23 INS23 INS23 INS31 INS31 UPD83 UPD39 INS83 UPD83 MOV83 INS83 INS39 INS59 INS83 MOV83 MOV83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 UPD34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS39 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS41 INS42 INS39 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS34 INS42 INS34 INS42 INS34 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS25 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS11 INS42 INS16 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS34 INS21 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS39 INS32 INS27 INS13 INS13 INS42 INS34 INS36 INS34 INS36 INS34 INS36 INS34 INS42 INS42 INS7 INS42 INS34 INS21 INS27 INS8 INS8 INS36 INS34 INS36 INS34 INS42 INS42 INS11 INS42 INS34 INS27 INS27 INS27 INS42 INS45 INS7 INS42 INS34 INS21 INS21 INS27 INS27 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 UPD42 MOV32 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL14