[MNG-4342] [regression] Multiple goals within single execution with equally named parameter get configured with wrong default values

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@812869 13f79535-47bb-0310-9956-ffa450edef68

-                populateDefaultConfigurationForPlugins( currentProject.getBuild().getPlugins(), repositoryRequest );
+                resolveMissingPluginVersions( currentProject.getBuildPlugins(), repositoryRequest );
-            extractMojoConfiguration( mojoExecution );
+            finalizeMojoConfiguration( mojoExecution );
-        extractMojoConfiguration( forkedExecution );
+        finalizeMojoConfiguration( forkedExecution );
-            for ( Iterator<MojoExecution> it = forkedExecutions.iterator(); it.hasNext(); )
+            for ( MojoExecution forkedExecution : forkedExecutions )
-                MojoExecution forkedExecution = it.next();
-
-                    extractMojoConfiguration( forkedExecution );
+                    finalizeMojoConfiguration( forkedExecution );
-        boolean managedPlugin = false;
-
-
-            managedPlugin = true;
-                    /*
-                     * The model only contains the default configuration for those goals that are present in the plugin
-                     * execution. For goals invoked from the CLI or a forked execution, we need to grab the default
-                     * parameter values explicitly.
-                     */
-                    if ( managedPlugin || !e.getGoals().contains( mojoExecution.getGoal() ) )
-                    {
-                        Xpp3Dom defaultConfiguration = getMojoConfiguration( mojoDescriptor );
-
-                        mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoConfiguration, defaultConfiguration );
-                    }
-
-    private void extractMojoConfiguration( MojoExecution mojoExecution )
+    /**
+     * Post-processes the effective configuration for the specified mojo execution. This step discards all parameters
+     * from the configuration that are not applicable to the mojo and injects the default values for any missing
+     * parameters.
+     * 
+     * @param mojoExecution The mojo execution whose configuration should be finalized, must not be {@code null}.
+     */
+    private void finalizeMojoConfiguration( MojoExecution mojoExecution )
-        Xpp3Dom configuration = mojoExecution.getConfiguration();
+        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();
-        configuration = extractMojoConfiguration( configuration, mojoExecution.getMojoDescriptor() );
+        Xpp3Dom mojoConfiguration = mojoExecution.getConfiguration();
-        mojoExecution.setConfiguration( configuration );
+        mojoConfiguration = extractMojoConfiguration( mojoConfiguration, mojoDescriptor );
+
+        Xpp3Dom defaultConfiguration = getMojoConfiguration( mojoDescriptor );
+
+        mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoConfiguration, defaultConfiguration, Boolean.TRUE );
+
+        mojoExecution.setConfiguration( mojoConfiguration );
-    
-    public void populateDefaultConfigurationForPlugin( Plugin plugin, RepositoryRequest repositoryRequest ) 
+
+    private void resolveMissingPluginVersions( Collection<Plugin> plugins, RepositoryRequest repositoryRequest )
-        if ( plugin.getVersion() == null )
+        for ( Plugin plugin : plugins )
-            try
+            if ( plugin.getVersion() == null )
-                resolvePluginVersion( plugin, repositoryRequest );
-            }
-            catch ( PluginVersionResolutionException e )
-            {
-                throw new LifecycleExecutionException( "Error resolving version for plugin " + plugin.getKey(), e );
-            }
-        }
-
-        try
-        {
-            // NOTE: Retrieve the plugin descriptor regardless whether there are any executions to verify the plugin
-            PluginDescriptor pluginDescriptor = pluginManager.loadPlugin( plugin, repositoryRequest );
-
-            for ( PluginExecution pluginExecution : plugin.getExecutions() )
-            {
-                for ( String goal : pluginExecution.getGoals() )
+                try
-                    MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );
-
-                    if ( mojoDescriptor == null )
-                    {
-                        throw new MojoNotFoundException( goal, pluginDescriptor );
-                    }
-
-                    Xpp3Dom defaultConfiguration = getMojoConfiguration( mojoDescriptor );
-
-                    Xpp3Dom executionConfiguration =
-                        Xpp3Dom.mergeXpp3Dom( (Xpp3Dom) pluginExecution.getConfiguration(), defaultConfiguration,
-                                              Boolean.TRUE );
-
-                    pluginExecution.setConfiguration( executionConfiguration );
+                    resolvePluginVersion( plugin, repositoryRequest );
+                }
+                catch ( PluginVersionResolutionException e )
+                {
+                    throw new LifecycleExecutionException( "Error resolving version for plugin " + plugin.getKey()
+                        + ": " + e.getMessage(), e );
-        catch ( PluginNotFoundException e )
-        {
-            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
-                + e.getMessage(), e );
-        }
-        catch ( PluginResolutionException e )
-        {
-            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
-                + e.getMessage(), e );
-        }
-        catch ( PluginDescriptorParsingException e )
-        {
-            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
-                + e.getMessage(), e );
-        }
-        catch ( MojoNotFoundException e )
-        {
-            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
-                + e.getMessage(), e );
-        }
-        catch ( InvalidPluginDescriptorException e )
-        {
-            throw new LifecycleExecutionException( "Error getting plugin information for " + plugin.getId() + ": "
-                + e.getMessage(), e );
-        }
-    }
-
-    public void populateDefaultConfigurationForPlugins( Collection<Plugin> plugins, RepositoryRequest repositoryRequest ) 
-        throws LifecycleExecutionException
-    {
-        for( Plugin plugin : plugins )
-        {            
-            populateDefaultConfigurationForPlugin( plugin, repositoryRequest );
-        }

INS31 INS29 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 UPD83 UPD42 INS65 INS65 MOV60 MOV60 INS21 MOV60 INS21 MOV21 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS7 INS7 MOV44 UPD42 INS70 INS66 UPD42 INS42 INS32 INS42 INS32 UPD42 UPD42 MOV25 INS44 INS42 MOV8 UPD42 UPD42 INS42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV40 UPD42 MOV43 INS42 UPD42 MOV42 UPD42 UPD42 INS45 MOV32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL32 DEL59 DEL60 DEL8 DEL70 DEL8 DEL70 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21