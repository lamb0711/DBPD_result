[MNG-6824] ModelMerger is broken
Fix modules
Apply Java 8 Functions

+import java.util.function.BinaryOperator;
+import java.util.function.Function;
+import java.util.stream.Collectors;
-                                    sourceDominant, new LicenseKeyComputer() ) );
+                                    sourceDominant, getLicenseKey() ) );
-                                       sourceDominant, new MailingListKeyComputer() ) );
+                                       sourceDominant, getMailingListKey() ) );
-                sourceDominant, new DeveloperKeyComputer() ) );
+                sourceDominant, getDeveloperKey() ) );
-                sourceDominant, new ContributorKeyComputer() ) );
+                sourceDominant, getContributorKey() ) );
-                sourceDominant, new ProfileKeyComputer() ) );
+                sourceDominant, getProfileKey() ) );
-        List<String> src = source.getModules();
-        if ( !src.isEmpty() )
-        {
-            List<String> tgt = target.getModules();
-            List<String> merged = new ArrayList<>( tgt.size() + src.size() );
-            merged.addAll( tgt );
-            merged.addAll( src );
-            target.setModules( merged );
-        }
+        target.setModules( merge( target.getModules(), source.getModules(), sourceDominant, e -> e ) );
-                sourceDominant, new DependencyKeyComputer() ) );
+                sourceDominant, getDependencyKey() ) );
-                sourceDominant, new RepositoryKeyComputer() ) );
+                sourceDominant, getRepositoryKey() ) );
-                sourceDominant, new RepositoryKeyComputer() ) );
+                sourceDominant, getRepositoryKey() ) );
-                sourceDominant, new ExclusionKeyComputer() ) );
+                sourceDominant, getExclusionKey() ) );
-                sourceDominant, new ReportPluginKeyComputer() ) );
+                sourceDominant, getReportPluginKey() ) );
-                sourceDominant, new ReportSetKeyComputer() ) );
+                sourceDominant, getReportSetKey() ) );
-                                       sourceDominant, new DependencyKeyComputer() ) );
+                                       sourceDominant, getDependencyKey() ) );
-                                    sourceDominant, new NotifierKeyComputer() ) );
+                                    sourceDominant, getNotifierKey() ) );
-                                     sourceDominant, new ExtensionKeyComputer() ) );
+                                     sourceDominant, getExtensionKey() ) );
-                                    sourceDominant, new ResourceKeyComputer() ) );
+                                    sourceDominant, getResourceKey() ) );
-                                        sourceDominant, new ResourceKeyComputer() ) );
+                                        sourceDominant, getResourceKey() ) );
-                                  sourceDominant, new PluginKeyComputer() ) );
+                                  sourceDominant, getPluginKey() ) );
-                                       sourceDominant, new DependencyKeyComputer() ) );
+                                       sourceDominant, getDependencyKey() ) );
-                                     sourceDominant, new ExecutionKeyComputer() ) );
+                                     sourceDominant, getPluginExecutionKey() ) );
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    @Deprecated
+    
+    protected KeyComputer<Dependency> getDependencyKey()
+    {
+        return d -> d;
+    }
+
+    protected KeyComputer<Plugin> getPluginKey()
+    {
+        return p -> p;
+    }
+
+    protected KeyComputer<PluginExecution> getPluginExecutionKey()
+    {
+        return e -> e;
+    }
+
+    protected KeyComputer<ReportPlugin> getReportPluginKey()
+    {
+        return p -> p;
+    }
+
+    protected KeyComputer<ReportSet> getReportSetKey()
+    {
+        return s -> s;
+    }
+
+    protected KeyComputer<License> getLicenseKey()
+    {
+        return l -> l;
+    }
+
+    protected KeyComputer<MailingList> getMailingListKey()
+    {
+        return l -> l;
+    }
+
+    protected KeyComputer<Developer> getDeveloperKey()
+    {
+        return d -> d;
+    }
+
+    protected KeyComputer<Contributor> getContributorKey()
+    {
+        return c -> c;
+    }
+
+    protected KeyComputer<Profile> getProfileKey()
+    {
+        return p -> p;
+    }
+
+    protected KeyComputer<Repository> getRepositoryKey()
+    {
+        return r -> r;
+    }
+
+    protected KeyComputer<RepositoryBase> getRepositoryBaseKey()
+    {
+        return r -> r;
+    }
+
+    protected KeyComputer<Notifier> getNotifierKey()
+    {
+        return n -> n;
+    }
+
+    protected KeyComputer<Resource> getResourceKey()
+    {
+        return r -> r;
+    }
+
+    protected KeyComputer<Extension> getExtensionKey()
+    {
+        return e -> e;
+    }
+
+    protected KeyComputer<Exclusion> getExclusionKey()
+    {
+        return e -> e;
+    }
-    private interface KeyComputer<T>
+    @FunctionalInterface
+    public interface KeyComputer<T> extends Function<T, Object>
-        Object key( T t );
-    }
-
-    /**
-     * Remapping function
-     * @param <T>
-     */
-    private interface Remapping<T>
-    {
-        T merge( T u, T v );
-    }
-
-    /**
-     * KeyComputer for Dependency
-     */
-    private final class DependencyKeyComputer implements KeyComputer<Dependency>
-    {
-        @Override
-        public Object key( Dependency dependency )
-        {
-            return getDependencyKey( dependency );
-        }
-    }
-
-    /**
-     * KeyComputer for License
-     */
-    private class LicenseKeyComputer implements KeyComputer<License>
-    {
-        @Override
-        public Object key( License license )
-        {
-            return getLicenseKey( license );
-        }
-    }
-
-    /**
-     * KeyComputer for MailingList
-     */
-    private class MailingListKeyComputer implements KeyComputer<MailingList>
-    {
-        @Override
-        public Object key( MailingList mailingList )
-        {
-            return getMailingListKey( mailingList );
-        }
-    }
-
-    /**
-     * KeyComputer for Developer
-     */
-    private class DeveloperKeyComputer implements KeyComputer<Developer>
-    {
-        @Override
-        public Object key( Developer developer )
-        {
-            return getDeveloperKey( developer );
-        }
-    }
-
-    /**
-     * KeyComputer for Contributor
-     */
-    private class ContributorKeyComputer implements KeyComputer<Contributor>
-    {
-        @Override
-        public Object key( Contributor contributor )
-        {
-            return getContributorKey( contributor );
-        }
-    }
-
-    /**
-     * KeyComputer for Profile
-     */
-    private class ProfileKeyComputer implements KeyComputer<Profile>
-    {
-        @Override
-        public Object key( Profile profile )
-        {
-            return getProfileKey( profile );
-        }
-    }
-
-    /**
-     * KeyComputer for Repository
-     */
-    private class RepositoryKeyComputer implements KeyComputer<Repository>
-    {
-        @Override
-        public Object key( Repository repository )
-        {
-            return getRepositoryKey( repository );
-        }
-    }
-
-    /**
-     * KeyComputer for ReportPlugin
-     */
-    private class ReportPluginKeyComputer implements KeyComputer<ReportPlugin>
-    {
-        @Override
-        public Object key( ReportPlugin plugin )
-        {
-            return getReportPluginKey( plugin );
-        }
-    }
-
-    /**
-     * KeyComputer for Plugin
-     */
-    private class PluginKeyComputer implements KeyComputer<Plugin>
-    {
-        @Override
-        public Object key( Plugin plugin )
-        {
-            return getPluginKey( plugin );
-        }
-    }
-
-    /**
-     * KeyComputer for ReportSet
-     */
-    private class ReportSetKeyComputer implements KeyComputer<ReportSet>
-    {
-        @Override
-        public Object key( ReportSet reportSet )
-        {
-            return getReportSetKey( reportSet );
-        }
-    }
-
-    /**
-     * KeyComputer for Notifier
-     */
-    private class NotifierKeyComputer implements KeyComputer<Notifier>
-    {
-        @Override
-        public Object key( Notifier notifier )
-        {
-            return getNotifierKey( notifier );
-        }
-    }
-
-    /**
-     * KeyComputer for Extension
-     */
-    private class ExtensionKeyComputer implements KeyComputer<Extension>
-    {
-        @Override
-        public Object key( Extension extension )
-        {
-            return getExtensionKey( extension );
-        }
-    }
-
-    /**
-     * KeyComputer for Resource
-     */
-    private class ResourceKeyComputer implements KeyComputer<Resource>
-    {
-        @Override
-        public Object key( Resource resource )
-        {
-            return getResourceKey( resource );
-        }
-    }
-
-    /**
-     * KeyComputer for PluginExecution
-     */
-    private class ExecutionKeyComputer implements KeyComputer<PluginExecution>
-    {
-        @Override
-        public Object key( PluginExecution pluginExecution )
-        {
-            return getPluginExecutionKey( pluginExecution );
-        }
-    }
-
-    /**
-     * KeyComputer for Exclusion
-     */
-    private class ExclusionKeyComputer implements KeyComputer<Exclusion>
-    {
-        @Override
-        public Object key( Exclusion exclusion )
-        {
-            return getExclusionKey( exclusion );
-        }
-    }
-
-    /**
-     * Return the second value if <code>sourceDominant</code> is true, the first one otherwise.
-     * @param <T>
-     */
-    private static class SourceDominant<T> implements Remapping<T>
-    {
-        private final boolean sourceDominant;
-
-        SourceDominant( boolean sourceDominant )
-        {
-            this.sourceDominant = sourceDominant;
-        }
-
-        @Override
-        public T merge( T u, T v )
-        {
-            return sourceDominant ? v : u;
-        }
-        return merge( tgt, src, computer, new SourceDominant<T>( sourceDominant ) );
+        return merge( tgt, src, computer, ( t, s ) -> sourceDominant ? s : t );
-    private static <T> List<T> merge( List<T> tgt, List<T> src, KeyComputer<T> computer, Remapping<T> remapping )
+    private static <T> List<T> merge( List<T> tgt, List<T> src, KeyComputer<T> computer, BinaryOperator<T> remapping )
-            list.mergeAll( tgt, new SourceDominant<T>( true ) );
+            list.mergeAll( tgt, ( t, s ) -> s );
-        void mergeAll( Collection<V> vs, Remapping<V> remapping )
+        void mergeAll( Collection<V> vs, BinaryOperator<V> remapping )
-                map = new LinkedHashMap<>( list.size() + vs.size() );
-                for ( V v : list )
-                {
-                    map.put( keyComputer.key( v ), v );
-                }
+                map = list.stream().collect( Collectors.toMap( keyComputer, 
+                                                               Function.identity(), 
+                                                               null,
+                                                               LinkedHashMap::new ) );
+
-            if ( vs instanceof MergingList && ( (MergingList) vs ).map != null )
+
+            if ( vs instanceof MergingList && ( (MergingList<V>) vs ).map != null )
-                    V oldValue = map.get( key );
-                    // JDK8: this should be a call to map.merge( key, v, remapping )
-                    V newValue = ( oldValue == null ) ? e.getValue() : remapping.merge( oldValue, e.getValue() );
-                    if ( newValue == null )
-                    {
-                        remove( key );
-                    }
-                    else if ( newValue != oldValue )
-                    {
-                        map.put( key, newValue );
-                    }
+                    V v = e.getValue();
+                    map.merge( key, v, remapping );
-                    Object key = keyComputer.key( v );
-                    // JDK8: this should be a call to map.merge( key, v, remapping )
-                    V oldValue = map.get( key );
-                    V newValue = ( oldValue == null ) ? v : remapping.merge( oldValue, v );
-                    if ( newValue == null )
-                    {
-                        remove( key );
-                    }
-                    else
-                    {
-                        map.put( key, newValue );
-                    }
+                    Object key = keyComputer.apply( v );
+                    
+                    map.merge( key, v, remapping );

INS26 INS26 INS26 INS40 INS40 INS40 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 INS8 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 UPD83 MOV74 INS42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 INS74 INS42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 UPD42 UPD83 MOV74 INS42 INS78 UPD83 INS74 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS43 MOV43 MOV43 UPD74 MOV74 INS86 INS86 INS86 INS86 INS86 INS86 INS86 INS86 INS86 INS86 INS86 UPD42 MOV42 UPD42 MOV42 INS86 INS86 INS86 INS86 INS86 UPD42 MOV42 UPD43 INS74 INS32 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS59 INS42 INS86 UPD42 INS43 MOV43 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 MOV32 MOV32 INS42 INS86 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS59 INS16 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS7 MOV44 INS42 INS59 INS59 INS42 MOV42 INS32 MOV21 INS21 INS42 INS42 INS32 INS42 INS32 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS33 INS89 UPD74 MOV74 UPD42 MOV32 UPD42 UPD42 INS42 MOV42 UPD42 MOV42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 UPD43 UPD42 MOV42 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL43 DEL14 DEL42 DEL78 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL16 DEL43 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL66 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31 DEL55 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL29 DEL83 DEL42 DEL55 DEL66 DEL65 DEL66 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL73 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55 DEL42 DEL43 DEL74 DEL42 DEL14 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL9 DEL14 DEL74 DEL32 DEL42 DEL42 DEL32 DEL27 DEL14 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL16 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL27 DEL8 DEL25 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL42 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25