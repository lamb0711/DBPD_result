Merge of sisbell-maven-2.1-profile branch. Removes use of project lineage from builder.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@693332 13f79535-47bb-0310-9956-ffa450edef68

-    private static final List<String> PROJECT_PREFIXES = Arrays.asList( new String[]{ "pom.", "project." } );
+    private static final List<String> PROJECT_PREFIXES = Arrays.asList( new String[]{"pom.", "project."} );
+
-    
+
-        return interpolate( model,
-                            null,
-                            new DefaultProjectBuilderConfiguration().setExecutionProperties( props ),
+        return interpolate( model, null, new DefaultProjectBuilderConfiguration().setExecutionProperties( props ),
-        return interpolate( model,
-                            null,
-                            new DefaultProjectBuilderConfiguration().setExecutionProperties( props ),
+        return interpolate( model, null, new DefaultProjectBuilderConfiguration().setExecutionProperties( props ),
-     * @param model   The inbound Model instance, to serialize and reference for expression resolution
-     * @param context The other context map to be used during resolution
+     * @param model           The inbound Model instance, to serialize and reference for expression resolution
+     * @param context         The other context map to be used during resolution
-     * @param projectDir The directory from which the current model's pom was read.
-     * @param strict  This parameter is ignored!
-     * @param debugMessages If true, print any feedback from the interpolator out to the DEBUG log-level.
+     * @param projectDir      The directory from which the current model's pom was read.
+     * @param strict          This parameter is ignored!
+     * @param debugMessages   If true, print any feedback from the interpolator out to the DEBUG log-level.
-     * <p>
+     * <p/>
-     *   <li>If it starts with either "pom." or "project.", the expression is evaluated against the model.</li>
-     *   <li>If the value is null, get the value from the context.</li>
-     *   <li>If the value is null, but the context contains the expression, don't replace the expression string
-     *       with the value, and continue to find other expressions.</li>
-     *   <li>If the value is null, get it from the model properties.</li>
-     *   <li>
+     * <li>If it starts with either "pom." or "project.", the expression is evaluated against the model.</li>
+     * <li>If the value is null, get the value from the context.</li>
+     * <li>If the value is null, but the context contains the expression, don't replace the expression string
+     * with the value, and continue to find other expressions.</li>
+     * <li>If the value is null, get it from the model properties.</li>
+     * <li>
+     *
-    public String interpolate( String src,
-                                        Model model,
-                                        final File projectDir,
-                                        ProjectBuilderConfiguration config,
-                                        boolean debugMessages )
+    public String interpolate( String src, Model model, final File projectDir, ProjectBuilderConfiguration config,
+                               boolean debugMessages )
-        ValueSource basedirValueSource = new PrefixedValueSourceWrapper( new ValueSource(){
+        ValueSource basedirValueSource = new PrefixedValueSourceWrapper( new ValueSource()
+        {
-        },
-        PROJECT_PREFIXES, true );
+        }, PROJECT_PREFIXES, true );
-        interpolator.addValueSource( new PrefixedValueSourceWrapper( new MapBasedValueSource( modelProperties ), PROJECT_PREFIXES, true ) );
+        interpolator.addValueSource(
+            new PrefixedValueSourceWrapper( new MapBasedValueSource( modelProperties ), PROJECT_PREFIXES, true ) );
-        
+
-        
+
-        catch( InterpolationException e )
+        catch ( InterpolationException e )

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66