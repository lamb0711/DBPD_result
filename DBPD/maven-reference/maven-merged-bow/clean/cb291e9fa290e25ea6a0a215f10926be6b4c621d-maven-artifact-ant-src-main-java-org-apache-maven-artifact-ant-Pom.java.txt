PR: MNG-460
Submitted by: Nicola Ken Barozzi
Reviewed by:  Brett Porter
(applied with modifications)

Replace setProperty by a chained property helper, set up automatically when the POM is first declared.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@189873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.resolver.ArtifactResolver;
-import org.apache.tools.ant.ProjectComponent;
+import org.apache.tools.ant.PropertyHelper;
+import org.apache.tools.ant.Task;
+import org.apache.tools.ant.Project;
+import org.codehaus.plexus.util.introspection.ReflectionValueExtractor;
+import java.util.Collections;
- * A POM.
+ * A POM typedef.
+ *
+ * Also an Ant Task that registers a handler called POMPropertyHelper
+ * that intercepts all calls to property value resolution and replies instead
+ * of Ant to properties that start with the id of the pom.
+ *
+ * Example:
+ * ${maven.project:artifactId}
+ * @author <a href="mailto:nicolaken@apache.org">Nicola Ken Barozzi</a>
-    extends ProjectComponent
+    extends AbstractArtifactTask
+    private String antId;
+
+    /**
+     * The property interceptor.
+     */
+    private final POMPropertyHelper helper = new POMPropertyHelper();
+
+    public void setId( String id )
+    {
+        this.antId = id;
+    }
+
+        // TODO: should this be in execute() too? Would that work when it is used as a type?
-                mavenProject = builder.build( file, localRepository );
+                // TODO: should the profiles be constructed and passed in here? From Ant, or perhaps settings?
+                mavenProject = builder.build( file, localRepository, Collections.EMPTY_LIST );
+    /**
+     * Registers POMPropertyHelper as a property interceptor
+     */
+    public void execute()
+    {
+        ArtifactRepository localRepo = createLocalArtifactRepository();
+        MavenProjectBuilder projectBuilder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );
+        initialise( projectBuilder, localRepo );
+
+        Project project = getProject();
+
+        // Add a reference to this task/type
+        project.addReference( antId, this );
+
+        // Register the property interceptor
+        PropertyHelper phelper = PropertyHelper.getPropertyHelper( project );
+        helper.setNext( phelper.getNext() );
+        helper.setProject( project );
+        phelper.setNext( helper );
+    }
+
+    /**
+     * The property interceptor that handles the calls for "pom." properties
+     */
+    private class POMPropertyHelper
+        extends PropertyHelper
+    {
+        /**
+         * The method that gets called by Ant with every request of property
+         */
+        public Object getPropertyHook( String ns, String name, boolean user )
+        {
+
+            String prefix = antId + ":";
+
+            if ( !name.startsWith( prefix ) )
+            {
+                // pass on to next interceptor
+                return super.getPropertyHook( ns, name, user );
+            }
+            try
+            {
+                // else handle the property resolution
+                String expression = name.substring( prefix.length() );
+                return getPOMValue( "project." + expression );
+
+            }
+            catch ( Exception ex )
+            {
+                ex.printStackTrace();
+                return null;
+            }
+        }
+
+        private Object getPOMValue( String expression )
+        {
+            Object value = null;
+
+            try
+            {
+                value = ReflectionValueExtractor.evaluate( expression, getMavenProject() );
+            }
+            catch ( Exception e )
+            {
+                throw new BuildException( "Error extracting expression from POM", e );
+            }
+
+            return value;
+        }
+
+    }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS55 INS65 INS42 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS42 INS43 INS31 INS31 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS65 INS42 INS42 INS14 INS43 INS42 INS21 INS65 INS60 INS60 INS21 INS60 INS21 INS60 INS21 INS21 INS21 INS65 INS42 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS66 INS43 INS42 INS7 INS66 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS66 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS54 INS42 INS43 INS42 INS60 INS54 INS41 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS43 INS59 INS38 INS8 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS42 INS52 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS41 INS60 INS41 INS44 INS8 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS40 INS42 INS45 INS42 INS42 INS42 INS48 INS43 INS59 INS32 INS43 INS42 INS21 INS41 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS32 INS33 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS45 INS42 INS40 INS42 INS42 INS42 INS42 DEL43