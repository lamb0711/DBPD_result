handle scope


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163747 13f79535-47bb-0310-9956-ffa450edef68

+    private static final String[] EMPTY_STRING_ARRAY = new String[0];
+
+    private static final String SCOPE_TEST = "test";
+
+    private static final String SCOPE_COMPILE = "compile";
+
+    private static final String SCOPE_RUNTIME = "runtime";
+
-        // ----------------------------------------------------------------------
-        // Download bootstrapDeps
-        // ----------------------------------------------------------------------
-
-            System.out.println( "Downloading dependencies ..." );
+            System.out.println( "Downloading project dependencies ..." );
-            compile( reader.getDependencies(), sources, classes, null, generatedSources );
+            compile( reader.getDependencies(), sources, classes, null, generatedSources, SCOPE_COMPILE );
-            compile( reader.getDependencies(), sources, classes, null, null );
+            compile( reader.getDependencies(), sources, classes, null, null, SCOPE_COMPILE );
-        Dependency junitDep = new Dependency();
-
-        junitDep.setGroupId( "junit" );
-
-        junitDep.setArtifactId( "junit" );
-
-        junitDep.setVersion( "3.8.1" );
-
-        testDependencies.add( junitDep );
-
-        compile( testDependencies, testSources, testClasses, classes, null );
+        compile( testDependencies, testSources, testClasses, classes, null, SCOPE_TEST );
-                throw new FileNotFoundException( "Missing dependency: " + dependency + ( !online
-                                                                                         ? "; run again online"
-                                                                                         : "; there was a problem downloading it earlier" ) );
+                throw new FileNotFoundException(
+                    "Missing dependency: " + dependency +
+                    ( !online ? "; run again online" : "; there was a problem downloading it earlier" ) );
-        IsolatedClassLoader modelloClassLoader = new IsolatedClassLoader();
+        IsolatedClassLoader cl = new IsolatedClassLoader();
-            modelloClassLoader.addURL( f.toURL() );
+            cl.addURL( f.toURL() );
-        return modelloClassLoader;
+        return cl;
-        boolean success = testRunner.execute( repoLocal, basedir, classes, testClasses, includes, excludes,
-                                              classpath( reader.getDependencies(), null ), reportsDir );
+        String[] cp = (String[]) classpath( reader.getDependencies(), null, SCOPE_TEST ).toArray( EMPTY_STRING_ARRAY );
+        boolean success = testRunner.execute( repoLocal, basedir, classes, testClasses, includes, excludes, cp,
+                                              reportsDir );
-    private String[] classpath( List dependencies, String extraClasspath )
+    private List classpath( List dependencies, String extraClasspath, String scope )
-        String classpath[] = new String[dependencies.size() + 1];
+        List classpath = new ArrayList( dependencies.size() + 1 );
-            classpath[i] = repoLocal + "/" + d.getRepositoryPath();
+            String element = repoLocal + "/" + d.getRepositoryPath();
+
+            if ( SCOPE_COMPILE.equals( scope ) )
+            {
+                if ( d.getScope().equals( SCOPE_COMPILE ) )
+                {
+                    classpath.add( element );
+                }
+            }
+            else if ( SCOPE_RUNTIME.equals( scope ) )
+            {
+                if ( d.getScope().equals( SCOPE_COMPILE ) || d.getScope().equals( SCOPE_RUNTIME ) )
+                {
+                    classpath.add( element );
+                }
+            }
+            else if ( SCOPE_TEST.equals( scope ) )
+            {
+                classpath.add( element );
+            }
-        classpath[classpath.length - 1] = extraClasspath;
+        classpath.add( extraClasspath );
-                          String generatedSources )
+                          String generatedSources, String scope )
-            compilerConfiguration.setClasspathEntries( Arrays.asList( classpath( dependencies, extraClasspath ) ) );
+            compilerConfiguration.setClasspathEntries( classpath( dependencies, extraClasspath, scope ) );

INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS43 INS44 INS44 INS43 INS85 INS42 INS3 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS60 UPD42 MOV42 MOV43 INS42 INS43 INS42 INS42 INS5 INS34 UPD42 MOV5 INS39 INS59 INS43 INS8 INS32 INS42 INS43 INS85 INS42 UPD42 UPD42 INS11 INS42 INS32 INS42 INS14 MOV60 INS60 INS25 INS42 INS42 INS42 INS42 INS42 MOV5 MOV32 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV27 INS43 INS59 INS32 INS8 INS25 UPD45 MOV32 INS42 MOV32 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS42 MOV27 INS42 INS42 INS42 INS25 INS32 INS8 INS25 MOV32 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS25 INS32 INS8 INS42 INS32 INS42 INS42 MOV21 INS27 INS8 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS32 INS32 INS21 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL85 DEL3 DEL42 DEL42 DEL2 DEL7 DEL8 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL7 DEL42 DEL42 DEL32