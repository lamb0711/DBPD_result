Fixing it0112 and it0115, and cleaning up extension isolation further. Also, adding a flag to tell whether an accompanying profiles.xml file is valid for any given POM file...when loaded from a repository (or stubbed), this flag should always be false.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@586061 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.execution.MavenProjectSession;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.classworlds.realm.ClassRealm;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.context.ContextException;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
-    implements LifecycleExecutor
+    implements LifecycleExecutor, Contextualizable
+    // this is needed for setting the lookup realm before we start building a project.
+    private PlexusContainer container;
+
-                    // NEW: To support forked execution under the new lifecycle architecture, the current project
-                    // is stored in a build-context managed data type. This context type holds the current project
-                    // for the fork being executed, plus a stack of projects used in the ancestor execution contexts.
-                    LifecycleExecutionContext ctx = new LifecycleExecutionContext( rootProject );
-                    ctx.store( buildContextManager );
+                    ClassRealm oldLookupRealm = setProjectLookupRealm( session, rootProject );
-                    // NEW: Build up the execution plan, including configuration.
-                    List mojoBindings = getLifecycleBindings(
-                        segment.getTasks(),
-                        rootProject,
-                        target );
-
-                    // NEW: Then, iterate over each binding in that plan, and execute the associated mojo.
-                    // only call once, with the top-level project (assumed to be provided as a parameter)...
-                    for ( Iterator mojoIterator = mojoBindings.iterator(); mojoIterator.hasNext(); )
+                    try
-                        MojoBinding binding = (MojoBinding) mojoIterator.next();
+                        // NEW: To support forked execution under the new lifecycle architecture, the current project
+                        // is stored in a build-context managed data type. This context type holds the current project
+                        // for the fork being executed, plus a stack of projects used in the ancestor execution contexts.
+                        LifecycleExecutionContext ctx = new LifecycleExecutionContext( rootProject );
+                        ctx.store( buildContextManager );
-                        try
+                        // NEW: Build up the execution plan, including configuration.
+                        List mojoBindings = getLifecycleBindings(
+                            segment.getTasks(),
+                            rootProject,
+                            target );
+
+                        // NEW: Then, iterate over each binding in that plan, and execute the associated mojo.
+                        // only call once, with the top-level project (assumed to be provided as a parameter)...
+                        for ( Iterator mojoIterator = mojoBindings.iterator(); mojoIterator.hasNext(); )
-                            executeGoalAndHandleFailures(
-                                binding,
-                                session,
-                                dispatcher,
-                                event,
-                                reactorManager,
-                                buildStartTime,
-                                target );
-                        }
-                        catch ( MojoFailureException e )
-                        {
-                            AggregatedBuildFailureException error = new AggregatedBuildFailureException(
-                                                                                                         session.getExecutionRootDirectory(),
-                                                                                                         binding,
-                                                                                                         e );
+                            MojoBinding binding = (MojoBinding) mojoIterator.next();
-                            dispatcher.dispatchError( event, target, error );
-
-                            if ( handleExecutionFailure( reactorManager, rootProject, error, binding, buildStartTime ) )
+                            try
-                                throw error;
+                                executeGoalAndHandleFailures(
+                                    binding,
+                                    session,
+                                    dispatcher,
+                                    event,
+                                    reactorManager,
+                                    buildStartTime,
+                                    target );
+                            }
+                            catch ( MojoFailureException e )
+                            {
+                                AggregatedBuildFailureException error = new AggregatedBuildFailureException(
+                                                                                                             session.getExecutionRootDirectory(),
+                                                                                                             binding,
+                                                                                                             e );
+
+                                dispatcher.dispatchError( event, target, error );
+
+                                if ( handleExecutionFailure( reactorManager, rootProject, error, binding, buildStartTime ) )
+                                {
+                                    throw error;
+                                }
+                    finally
+                    {
+                        // clean up the execution context, so we don't pollute for future project-executions.
+                        LifecycleExecutionContext.delete( buildContextManager );
-                    // clean up the execution context, so we don't pollute for future project-executions.
-                    LifecycleExecutionContext.delete( buildContextManager );
+                        restoreLookupRealm( oldLookupRealm );
+                    }
+
-                        LifecycleExecutionContext ctx = new LifecycleExecutionContext( currentProject );
-                        ctx.store( buildContextManager );
+                        ClassRealm oldLookupRealm = setProjectLookupRealm( session, currentProject );
-                        List mojoBindings = getLifecycleBindings(
-                            segment.getTasks(),
-                            currentProject,
-                            target );
-
-                        for ( Iterator mojoIterator = mojoBindings.iterator(); mojoIterator.hasNext(); )
+                        try
-                            MojoBinding binding = (MojoBinding) mojoIterator.next();
+                            LifecycleExecutionContext ctx = new LifecycleExecutionContext( currentProject );
+                            ctx.store( buildContextManager );
-                            getLogger().debug(
-                                "Mojo: " + binding.getGoal() + " has config:\n"
-                                    + binding.getConfiguration() );
+                            List mojoBindings = getLifecycleBindings(
+                                segment.getTasks(),
+                                currentProject,
+                                target );
-                            try
+                            for ( Iterator mojoIterator = mojoBindings.iterator(); mojoIterator.hasNext(); )
-                                executeGoalAndHandleFailures( binding, session, dispatcher,
-                                                              event, reactorManager,
-                                                              buildStartTime, target );
-                            }
-                            catch ( MojoFailureException e )
-                            {
-                                ProjectBuildFailureException error = new ProjectBuildFailureException(
-                                                                                                       currentProject.getId(),
-                                                                                                       binding,
-                                                                                                       e );
+                                MojoBinding binding = (MojoBinding) mojoIterator.next();
-                                dispatcher.dispatchError( event, target, error );
+                                getLogger().debug(
+                                    "Mojo: " + binding.getGoal() + " has config:\n"
+                                        + binding.getConfiguration() );
-                                if ( handleExecutionFailure( reactorManager, currentProject, error, binding, buildStartTime ) )
+                                try
-                                    throw error;
+                                    executeGoalAndHandleFailures( binding, session, dispatcher,
+                                                                  event, reactorManager,
+                                                                  buildStartTime, target );
+                                }
+                                catch ( MojoFailureException e )
+                                {
+                                    ProjectBuildFailureException error = new ProjectBuildFailureException(
+                                                                                                           currentProject.getId(),
+                                                                                                           binding,
+                                                                                                           e );
+
+                                    dispatcher.dispatchError( event, target, error );
+
+                                    if ( handleExecutionFailure( reactorManager, currentProject, error, binding, buildStartTime ) )
+                                    {
+                                        throw error;
+                                    }
+                        finally
+                        {
+                            LifecycleExecutionContext.delete( buildContextManager );
-                        LifecycleExecutionContext.delete( buildContextManager );
+                            restoreLookupRealm( oldLookupRealm );
+                        }
+    private void restoreLookupRealm( ClassRealm oldLookupRealm )
+    {
+        if ( oldLookupRealm != null )
+        {
+            container.setLookupRealm( oldLookupRealm );
+        }
+    }
+
+    private ClassRealm setProjectLookupRealm( MavenSession session,
+                                              MavenProject rootProject )
+    {
+        MavenProjectSession projectSession = session.getProjectSession( rootProject );
+        if ( projectSession != null )
+        {
+            return container.setLookupRealm( projectSession.getProjectRealm() );
+        }
+        else
+        {
+            return null;
+        }
+    }
+
-                    getLogger().debug( "Skipping optional mojo execution: " + MojoBindingUtils.toString( mojoBinding ) );
+                    getLogger().debug( "Skipping optional mojo execution: " + MojoBindingUtils.toString( mojoBinding ), e );
+                    return;
+
+    public void contextualize( Context context )
+        throws ContextException
+    {
+        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS42 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS42 INS21 INS42 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS7 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS11 INS32 INS42 INS42 INS42 INS32 INS33 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS60 INS54 INS43 INS59 INS8 INS8 INS41 INS42 INS42 INS32 MOV60 MOV21 MOV60 MOV24 MOV21 INS21 INS60 INS54 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 MOV60 MOV21 MOV60 MOV24 MOV21 INS21 INS42 INS42 INS42 INS32 INS42 INS42