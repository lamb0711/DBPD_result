MNG-3905: merged all the artifact/repository handling bits into MavenTools
o clean up hand-written component descriptors



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@726584 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.ArtifactUtils;
+import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
+import org.apache.maven.artifact.resolver.ArtifactResolutionException;
+import org.apache.maven.artifact.resolver.ArtifactResolver;
+import org.apache.maven.model.Model;
+import org.apache.maven.project.ProjectBuildingException;
+import org.codehaus.plexus.logging.LogEnabled;
+import org.codehaus.plexus.logging.Logger;
+import org.codehaus.plexus.util.StringUtils;
-    implements MavenTools
+    implements MavenTools, LogEnabled
+    private ArtifactFactory artifactFactory;
+
+    @Requirement
+    private ArtifactResolver artifactResolver;
+    
+    @Requirement
+        
+    @Requirement
+    private Logger logger;
+    
+    private static HashMap<String, Artifact> cache = new HashMap<String, Artifact>();
-    }    
+    }
+    
+    // Taken from RepositoryHelper
+    
+    public void findModelFromRepository( Artifact artifact, List remoteArtifactRepositories, ArtifactRepository localRepository )
+        throws ProjectBuildingException
+    {
+
+        if ( cache.containsKey( artifact.getId() ) )
+        {
+            artifact.setFile( cache.get( artifact.getId() ).getFile() );
+        }
+
+        String projectId = safeVersionlessKey( artifact.getGroupId(), artifact.getArtifactId() );
+        remoteArtifactRepositories = normalizeToArtifactRepositories( remoteArtifactRepositories, projectId );
+
+        Artifact projectArtifact;
+
+        // if the artifact is not a POM, we need to construct a POM artifact based on the artifact parameter given.
+        if ( "pom".equals( artifact.getType() ) )
+        {
+            projectArtifact = artifact;
+        }
+        else
+        {
+            logger.debug( "Attempting to build MavenProject instance for Artifact (" + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() + ") of type: "
+                          + artifact.getType() + "; constructing POM artifact instead." );
+
+            projectArtifact = artifactFactory.createProjectArtifact( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getScope() );
+        }
+
+        try
+        {
+            artifactResolver.resolve( projectArtifact, remoteArtifactRepositories, localRepository );
+
+            File file = projectArtifact.getFile();
+            artifact.setFile( file );
+            cache.put( artifact.getId(), artifact );
+        }
+        catch ( ArtifactResolutionException e )
+        {
+            throw new ProjectBuildingException( projectId, "Error getting POM for '" + projectId + "' from the repository: " + e.getMessage(), e );
+        }
+        catch ( ArtifactNotFoundException e )
+        {
+            throw new ProjectBuildingException( projectId, "POM '" + projectId + "' not found in repository: " + e.getMessage(), e );
+        }
+    }
+
+    public List buildArtifactRepositories( Model model )
+        throws ProjectBuildingException
+    {
+        try
+        {
+            return buildArtifactRepositories( model.getRepositories() );
+        }
+        catch ( InvalidRepositoryException e )
+        {
+            String projectId = safeVersionlessKey( model.getGroupId(), model.getArtifactId() );
+
+            throw new ProjectBuildingException( projectId, e.getMessage(), e );
+        }
+    }
+
+    private List normalizeToArtifactRepositories( List remoteArtifactRepositories, String projectId )
+        throws ProjectBuildingException
+    {
+        List normalized = new ArrayList( remoteArtifactRepositories.size() );
+
+        boolean normalizationNeeded = false;
+        for ( Iterator it = remoteArtifactRepositories.iterator(); it.hasNext(); )
+        {
+            Object item = it.next();
+
+            if ( item instanceof ArtifactRepository )
+            {
+                normalized.add( item );
+            }
+            else if ( item instanceof Repository )
+            {
+                Repository repo = (Repository) item;
+                try
+                {
+                    item = buildArtifactRepository( repo );
+
+                    normalized.add( item );
+                    normalizationNeeded = true;
+                }
+                catch ( InvalidRepositoryException e )
+                {
+                    throw new ProjectBuildingException( projectId, "Error building artifact repository for id: " + repo.getId(), e );
+                }
+            }
+            else
+            {
+                throw new ProjectBuildingException( projectId, "Error building artifact repository from non-repository information item: " + item );
+            }
+        }
+
+        if ( normalizationNeeded )
+        {
+            return normalized;
+        }
+        else
+        {
+            return remoteArtifactRepositories;
+        }
+    }
+
+    private String safeVersionlessKey( String groupId, String artifactId )
+    {
+        String gid = groupId;
+
+        if ( StringUtils.isEmpty( gid ) )
+        {
+            gid = "unknown";
+        }
+
+        String aid = artifactId;
+
+        if ( StringUtils.isEmpty( aid ) )
+        {
+            aid = "unknown";
+        }
+
+        return ArtifactUtils.versionlessKey( gid, aid );
+    }
+
+    public void enableLogging( Logger logger )
+    {
+        this.logger = logger;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS60 INS21 INS60 INS25 INS54 INS42 INS43 INS42 INS42 INS54 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS24 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS41 INS43 INS42 INS21 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS32 INS8 INS43 INS59 INS7 INS43 INS59 INS32 INS8 INS8 INS8 INS12 INS12 INS42 INS8 INS12 INS42 INS42 INS43 INS59 INS39 INS59 INS58 INS32 INS8 INS42 INS8 INS8 INS42 INS42 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS32 INS42 INS7 INS43 INS43 INS43 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS44 INS8 INS44 INS8 INS41 INS44 INS8 INS42 INS42 INS14 INS42 INS9 INS43 INS59 INS42 INS42 INS60 INS25 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS7 INS32 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS43 INS42 INS60 INS53 INS43 INS32 INS42 INS42 INS32 INS43 INS59 INS62 INS8 INS25 INS42 INS42 INS7 INS7 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS43 INS59 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS21 INS62 INS8 INS8 INS42 INS45 INS42 INS45 INS32 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS27 INS42 INS43 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS60 INS54 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS45 INS42 INS45 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS21 INS21 INS21 INS44 INS8 INS43 INS42 INS27 INS43 INS42 INS7 INS32 INS7 INS43 INS42 INS53 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS14 INS42 INS42 INS43 INS42 INS27 INS42 INS42 INS45 INS32 INS42 INS42