o Revised exception handling of model builder to collect as much as possible in ModelProblem instances that are stored in the ModelBuildingException when it eventually bails out. This should enable IDE integrators to provide more extensive error feedback.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@782282 13f79535-47bb-0310-9956-ffa450edef68

+        List<ModelProblem> problems = new ArrayList<ModelProblem>();
+
-        List<Profile> activeExternalProfiles = getActiveExternalProfiles( request, profileActivationContext );
+        List<Profile> activeExternalProfiles = getActiveExternalProfiles( request, profileActivationContext, problems );
-        Model model = readModel( modelSource, request );
+        Model model = readModel( modelSource, request, problems );
-        for ( Model current = model; current != null; current = readParent( current, request ) )
+        for ( Model current = model; current != null; current = readParent( current, request, problems ) )
-            List<Profile> activeProjectProfiles = getActiveProjectProfiles( rawModel, profileActivationContext );
+            List<Profile> activeProjectProfiles =
+                getActiveProjectProfiles( rawModel, profileActivationContext, problems );
-            configureResolver( request.getModelResolver(), resultModel );
+            configureResolver( request.getModelResolver(), resultModel, problems );
-        resultModel = interpolateModel( resultModel, request );
+        resultModel = interpolateModel( resultModel, request, problems );
-        validateModel( resultModel, false, request );
+        validateModel( resultModel, false, request, problems );
+
+        if ( !problems.isEmpty() )
+        {
+            throw new ModelBuildingException( problems );
+        }
-    private Model readModel( ModelSource modelSource, ModelBuildingRequest request )
+    private Model readModel( ModelSource modelSource, ModelBuildingRequest request, List<ModelProblem> problems )
-            throw new UnparseableModelException( "Failed to parse POM " + modelSource.getLocation() + ": "
-                + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e );
+            problems.add( new ModelProblem( "Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage(),
+                                            modelSource.getLocation(), e ) );
+            throw new ModelBuildingException( problems );
-            throw new UnparseableModelException( "Failed to read POM " + modelSource.getLocation(), -1, -1, e );
+            problems.add( new ModelProblem( "Non-readable POM " + modelSource.getLocation() + ": " + e.getMessage(),
+                                            modelSource.getLocation(), e ) );
+            throw new ModelBuildingException( problems );
-        validateModel( model, true, request );
+        validateModel( model, true, request, problems );
-    private void validateModel( Model model, boolean raw, ModelBuildingRequest request )
-        throws ModelBuildingException
+    private void validateModel( Model model, boolean raw, ModelBuildingRequest request, List<ModelProblem> problems )
-            throw new InvalidModelException( "Failed to validate POM " + toSourceHint( model ), result );
+            String source = toSourceHint( model );
+
+            for ( int i = 0; i < result.getMessageCount(); i++ )
+            {
+                problems.add( new ModelProblem( "Invalid POM " + source + ": " + result.getMessage( i ), source ) );
+            }
-    private List<Profile> getActiveExternalProfiles( ModelBuildingRequest request, ProfileActivationContext context )
-        throws ModelBuildingException
+    private List<Profile> getActiveExternalProfiles( ModelBuildingRequest request, ProfileActivationContext context,
+                                                     List<ModelProblem> problems )
-            throw new InvalidProfileException( "Failed to determine activation status of external profile "
-                + e.getProfile(), e.getProfile(), e );
+            problems.add( new ModelProblem( "Invalid activation condition for external profile "
+                + e.getProfile().getId() + ": " + e.getMessage(), "(external profiles)", e ) );
+
+            // FIXME: Update profile selector to integrate better with the problem reporting
+            return new ArrayList<Profile>();
-    private List<Profile> getActiveProjectProfiles( Model model, ProfileActivationContext context )
+    private List<Profile> getActiveProjectProfiles( Model model, ProfileActivationContext context,
+                                                    List<ModelProblem> problems )
-            throw new InvalidProfileException( "Failed to determine activation status of project profile "
-                + e.getProfile() + " for POM " + toSourceHint( model ), e.getProfile(), e );
+            problems.add( new ModelProblem( "Invalid activation condition for project profile "
+                + e.getProfile().getId() + " in POM " + toSourceHint( model ) + ": " + e.getMessage(),
+                                            toSourceHint( model ), e ) );
+
+            // FIXME: Update profile selector to integrate better with the problem reporting
+            return new ArrayList<Profile>();
-    private void configureResolver( ModelResolver modelResolver, Model model )
-        throws ModelBuildingException
+    private void configureResolver( ModelResolver modelResolver, Model model, List<ModelProblem> problems )
-                throw new InvalidModelException( "Failed to validate repository " + repository.getId() + " for POM "
-                    + toSourceHint( model ), e );
+                problems.add( new ModelProblem( "Invalid repository " + repository.getId() + " in POM "
+                    + toSourceHint( model ) + ": " + e.getMessage(), toSourceHint( model ), e ) );
-    private Model interpolateModel( Model model, ModelBuildingRequest request )
-        throws ModelBuildingException
+    private Model interpolateModel( Model model, ModelBuildingRequest request, List<ModelProblem> problems )
-            throw new ModelBuildingException( "Failed to interpolate model " + toSourceHint( model ), e );
+            problems.add( new ModelProblem( "Invalid expression in POM " + toSourceHint( model ) + ": "
+                + e.getMessage(), toSourceHint( model ), e ) );
+
+            return model;
-    private Model readParent( Model childModel, ModelBuildingRequest request )
+    private Model readParent( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )
-            parentModel = readParentLocally( childModel, request );
+            parentModel = readParentLocally( childModel, request, problems );
-                parentModel = readParentExternally( childModel, request );
+                parentModel = readParentExternally( childModel, request, problems );
-    private Model readParentLocally( Model childModel, ModelBuildingRequest request )
+    private Model readParentLocally( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )
-        Model candidateModel = readModel( new FileModelSource( pomFile ), request );
+        Model candidateModel = readModel( new FileModelSource( pomFile ), request, problems );
-    private Model readParentExternally( Model childModel, ModelBuildingRequest request )
+    private Model readParentExternally( Model childModel, ModelBuildingRequest request, List<ModelProblem> problems )
-            Exception e = new IllegalArgumentException( "No model resolver provided" );
-            throw new UnresolvableParentException( "Failed to resolve parent POM " + toId( parent ) + " for POM "
-                + toSourceHint( childModel ), e );
+            problems.add( new ModelProblem( "Non-resolvable parent POM " + toId( parent ) + " for POM "
+                + toSourceHint( childModel ) + ": " + "No model resolver provided", toSourceHint( childModel ) ) );
+            throw new ModelBuildingException( problems );
-            throw new UnresolvableParentException( "Failed to resolve parent POM " + toId( parent ) + " for POM "
-                + toSourceHint( childModel ), e );
+            problems.add( new ModelProblem( "Non-resolvable parent POM " + toId( parent ) + " for POM "
+                + toSourceHint( childModel ) + ": " + e.getMessage(), toSourceHint( childModel ), e ) );
+            throw new ModelBuildingException( problems );
-        return readModel( modelSource, request );
+        return readModel( modelSource, request, problems );

INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS60 INS25 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS59 INS38 INS8 INS43 INS43 INS12 INS12 INS43 INS43 INS8 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 MOV8 INS43 INS43 INS42 INS14 INS42 INS32 INS53 INS42 INS42 MOV44 INS8 MOV44 INS8 INS42 INS42 INS42 INS60 INS24 INS42 UPD42 MOV42 MOV44 INS42 INS42 MOV44 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 MOV8 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS21 INS53 INS21 MOV53 INS43 INS59 INS58 INS27 INS37 INS8 INS21 INS41 INS21 INS41 INS21 INS41 INS42 INS32 INS14 INS21 INS53 INS43 INS43 INS42 MOV43 INS42 INS32 INS14 INS32 INS42 INS42 MOV32 INS39 INS59 INS42 INS32 INS42 INS21 INS32 INS14 INS32 INS14 INS32 INS42 INS42 INS42 MOV14 MOV43 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 MOV43 INS42 INS42 INS42 INS14 UPD43 UPD42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS14 INS74 INS42 INS42 INS14 INS74 INS21 INS42 INS42 INS14 INS42 UPD43 INS32 INS42 INS42 MOV14 MOV43 INS42 INS43 MOV27 INS32 INS42 INS42 UPD43 MOV43 INS27 MOV32 MOV42 UPD42 INS42 INS42 INS14 UPD43 MOV43 MOV27 INS45 INS42 INS43 INS43 UPD43 MOV43 MOV27 INS32 MOV42 INS43 INS43 INS32 UPD43 MOV43 MOV27 MOV45 INS32 MOV42 UPD42 UPD45 INS45 INS45 INS42 INS42 UPD43 INS32 INS42 UPD45 INS45 MOV32 INS42 INS42 UPD42 UPD45 MOV45 MOV32 MOV45 INS32 UPD42 UPD42 UPD43 MOV43 MOV27 UPD42 MOV42 UPD42 UPD45 INS32 INS45 INS42 INS42 UPD42 UPD45 INS32 UPD45 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 UPD42 INS45 UPD45 INS32 INS42 INS42 INS42 UPD42 UPD45 INS45 INS32 INS42 INS42 MOV42 UPD42 MOV42 UPD42 UPD45 INS42 INS45 INS32 MOV32 INS42 UPD42 MOV32 INS42 INS42 INS42 UPD43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD45 UPD45 INS45 INS32 INS42 INS42 INS42 INS42 DEL34 DEL38 DEL34 DEL38 DEL27 DEL32 DEL14 DEL53 DEL8 DEL12 DEL8 DEL12 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL14 DEL53 DEL53 DEL14 DEL53 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL53