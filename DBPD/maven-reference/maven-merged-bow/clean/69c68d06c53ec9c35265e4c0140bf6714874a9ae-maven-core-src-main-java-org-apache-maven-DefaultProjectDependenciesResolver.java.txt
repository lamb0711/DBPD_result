[MNG-4633] Reactor artifact resolution in weave mode

Resolves artifacts from within reactor build.
No longer requires artifacts to be present in local repository before building weave mode ;)

git-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@935334 13f79535-47bb-0310-9956-ffa450edef68

-@Component(role=ProjectDependenciesResolver.class)
+@Component(role = ProjectDependenciesResolver.class)
-        return resolve( Collections.singleton( project ), scopesToCollect, scopesToResolve, session );
+        Set<MavenProject> mavenProjects = Collections.singleton( project );
+        return resolveImpl( mavenProjects, scopesToCollect, scopesToResolve, session,
+                            getIgnorableArtifacts( mavenProjects ) );
-        return resolve( projects, null, scopesToResolve, session );
+        return resolveImpl( projects, null, scopesToResolve, session, getIgnorableArtifacts( projects ) );
-    public Set<Artifact> resolve( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,
-                                  Collection<String> scopesToResolve, MavenSession session )
+    public Set<Artifact> resolve( MavenProject project, Collection<String> scopesToCollect,
+                                  Collection<String> scopesToResolve, MavenSession session,
+                                  Set<Artifact> ignoreableArtifacts )
+        throws ArtifactResolutionException, ArtifactNotFoundException
+    {
+        return resolveImpl( Collections.singleton( project ), scopesToCollect, scopesToResolve, session,
+                            getIgnorableArtifacts( ignoreableArtifacts ) );
+    }
+
+
+    private Set<Artifact> resolveImpl( Collection<? extends MavenProject> projects, Collection<String> scopesToCollect,
+                                       Collection<String> scopesToResolve, MavenSession session,
+                                       Set<String> projectIds )
-        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() )
-            && ( scopesToResolve == null || scopesToResolve.isEmpty() ) )
+        if ( ( scopesToCollect == null || scopesToCollect.isEmpty() ) &&
+            ( scopesToResolve == null || scopesToResolve.isEmpty() ) )
-        
+
-         
+
-        
+
-        
+
-        
-        ArtifactFilter filter; 
+
+        ArtifactFilter filter;
-        }        
+        }
-        ArtifactResolutionRequest request = new ArtifactResolutionRequest()
-            .setResolveRoot( false )
-            .setResolveTransitively( true )
-            .setCollectionFilter( collectionScopeFilter )
-            .setResolutionFilter( resolutionScopeFilter )
-            .setLocalRepository( session.getLocalRepository() )
-            .setOffline( session.isOffline() )
-            .setForceUpdate( session.getRequest().isUpdateSnapshots() )
-            .setCache( session.getRepositoryCache() );
+        ArtifactResolutionRequest request =
+            new ArtifactResolutionRequest().setResolveRoot( false ).setResolveTransitively( true ).setCollectionFilter(
+                collectionScopeFilter ).setResolutionFilter( resolutionScopeFilter ).setLocalRepository(
+                session.getLocalRepository() ).setOffline( session.isOffline() ).setForceUpdate(
+                session.getRequest().isUpdateSnapshots() ).setCache( session.getRepositoryCache() );
-        Set<String> projectIds = null;
-
-                if ( projectIds == null )
-                {
-                    projectIds = new HashSet<String>( projects.size() * 2 );
-
-                    for ( MavenProject p : projects )
-                    {
-                        String key = ArtifactUtils.key( p.getGroupId(), p.getArtifactId(), p.getVersion() );
-                        projectIds.add( key );
-                    }
-                }
+
+    private Set<String> getIgnorableArtifacts( Collection<? extends MavenProject> projects )
+    {
+        Set<String> projectIds = new HashSet<String>( projects.size() * 2 );
+
+        for ( MavenProject p : projects )
+        {
+            String key = ArtifactUtils.key( p.getGroupId(), p.getArtifactId(), p.getVersion() );
+            projectIds.add( key );
+        }
+        return projectIds;
+    }
+
+    private Set<String> getIgnorableArtifacts( Iterable<Artifact> artifactIterable )
+    {
+        Set<String> projectIds = new HashSet<String>();
+
+        for ( Artifact artifact : artifactIterable )
+        {
+            String key = ArtifactUtils.key( artifact );
+            projectIds.add( key );
+        }
+        return projectIds;
+    }
+

INS31 INS31 INS31 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 UPD83 UPD42 INS44 INS83 INS74 INS42 INS44 MOV8 INS83 INS74 INS42 INS44 INS8 INS60 INS43 INS43 INS43 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS41 MOV74 INS42 INS43 INS43 INS74 INS42 INS60 INS41 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS74 INS59 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS43 INS43 INS32 INS42 INS42 INS43 INS76 INS74 INS59 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS43 INS42 MOV32 UPD42 INS42 INS32 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS42 MOV14 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL7 DEL21