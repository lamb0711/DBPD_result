Added debug option to compiler configuration.
Copied compiler classes from plexus compiler.
Allow bootstrapping with debug info.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163301 13f79535-47bb-0310-9956-ffa450edef68

-package compile;
+/**
+ *
+ * Copyright 2004 The Apache Software Foundation
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
-import util.IsolatedClassLoader;
+package compile;
+import java.util.Iterator;
+import java.util.Map;
+import util.IsolatedClassLoader;
+
-    public List compile( String[] classpathElements, String[] sourceDirectories, String destinationDirectory )
-        throws Exception
+    public List compile( CompilerConfiguration config ) throws Exception
-        /*
-        for ( int i = 0; i < classpathElements.length; i++ )
-        {
-            System.out.println( "classpathElement = " + classpathElements[i] );
-        }
-        */
-
-        File destinationDir = new File( destinationDirectory );
+        File destinationDir = new File( config.getOutputLocation() );
-        String[] sources = getSourceFiles( sourceDirectories );
+        String[] sources = getSourceFiles( config );
-        int j = 5;
+        Map compilerOptions = config.getCompilerOptions();
-        String[] args = new String[sources.length + j];
+        List args = new ArrayList( sources.length + 5 + compilerOptions.size() * 2 );
-        args[0] = "-d";
+        args.add( "-d" );
-        args[1] = destinationDir.getAbsolutePath();
+        args.add( destinationDir.getAbsolutePath() );
-        args[2] = "-nowarn";
+        args.add( "-nowarn" );
-        args[3] = "-classpath";
+        args.add( "-classpath" );
-        args[4] = getClasspathString( classpathElements );
+        args.add( getClasspathString( config.getClasspathEntries() ) );
+
+        Iterator it = compilerOptions.entrySet().iterator();
+
+        while ( it.hasNext() )
+        {
+            Map.Entry entry = (Map.Entry) it.next();
+            args.add( entry.getKey() );
+            if ( (entry.getValue() != null) )
+                args.add( entry.getValue() );
+        }
-            args[i + j] = sources[i];
+            args.add( sources[i] );
-        Constructor cons = c.getConstructor( new Class[]{OutputStream.class, String.class} );
+        Constructor cons = c.getConstructor( new Class[] { OutputStream.class, String.class } );
-        Object compiler = cons.newInstance( new Object[]{err, "javac"} );
+        Object compiler = cons.newInstance( new Object[] { err, "javac" } );
-        Method compile = c.getMethod( "compile", new Class[]{String[].class} );
+        Method compile = c.getMethod( "compile", new Class[] { String[].class } );
-        Boolean ok = (Boolean) compile.invoke( compiler, new Object[]{args} );
+        Boolean ok = (Boolean) compile.invoke( compiler, new Object[] { args.toArray( new String[0] ) } );
-    protected List parseModernStream( BufferedReader input )
-        throws IOException
+    protected List parseModernStream( BufferedReader input ) throws IOException
-                if ( ( line = input.readLine() ) == null )
+                if ( (line = input.readLine()) == null )
-            }
-            while ( !line.endsWith( "^" ) );
+            } while ( !line.endsWith( "^" ) );
-}
+}

MOV26 INS26 INS26 INS29 INS40 INS40 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 UPD42 INS60 INS61 UPD42 MOV42 MOV43 INS43 INS43 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS8 INS42 UPD42 INS32 UPD42 MOV42 INS14 INS42 INS42 INS45 INS42 INS42 MOV32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS25 MOV43 INS32 UPD42 INS42 INS42 INS43 INS27 MOV42 INS32 INS32 INS42 INS43 INS59 INS32 INS36 INS21 INS32 INS42 INS42 INS42 INS40 INS34 INS27 INS42 UPD42 MOV42 INS42 INS42 INS40 INS42 INS11 INS42 INS42 INS32 INS27 INS32 INS42 INS42 MOV2 INS32 INS34 INS43 INS32 INS42 INS42 INS32 INS33 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV3 INS34 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL34 DEL43 DEL85 DEL5 DEL42 DEL34 DEL2 DEL45 DEL7 DEL42 DEL34 DEL2 DEL7 DEL42 DEL34 DEL2 DEL45 DEL7 DEL42 DEL34 DEL2 DEL45 DEL7 DEL42 DEL34 DEL2 DEL32 DEL7 DEL42 DEL42 DEL42 DEL27 DEL2 DEL7 DEL40 DEL42 DEL27 DEL42