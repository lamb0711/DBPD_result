convert deploy mojo to new execute()


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163658 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.DefaultArtifact;
+import org.apache.maven.artifact.deployer.ArtifactDeployer;
+import org.apache.maven.artifact.deployer.ArtifactDeploymentException;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.plugin.AbstractPlugin;
+import org.apache.maven.plugin.PluginExecutionException;
+import org.apache.maven.project.MavenProject;
+
+import java.io.File;
+
-    extends AbstractDeployMojo
+    extends AbstractPlugin
+    private MavenProject project;
+
+    private ArtifactDeployer deployer;
+
+    private ArtifactRepository deploymentRepository;
+
+    public void execute()
+        throws PluginExecutionException
+    {
+        if ( deploymentRepository == null )
+        {
+            String msg = "Deployment failed: repository element was not specified in the pom inside"
+                + " distributionManagement element";
+            throw new PluginExecutionException( msg );
+        }
+
+        if ( deploymentRepository.getAuthenticationInfo() == null )
+        {
+            getLog().warn(
+                           "Deployment repository {id: \'" + deploymentRepository.getId()
+                               + "\'} has no associated authentication info!" );
+        }
+
+        // Deploy the POM
+        Artifact pomArtifact = new DefaultArtifact( project.getGroupId(), project.getArtifactId(),
+                                                    project.getVersion(), "pom" );
+
+        File pom = new File( project.getFile().getParentFile(), "pom.xml" );
+
+        try
+        {
+            deployer.deploy( pom, pomArtifact, deploymentRepository );
+
+            //Deploy artifact
+            if ( !"pom".equals( project.getPackaging() ) )
+            {
+                Artifact artifact = new DefaultArtifact( project.getGroupId(), project.getArtifactId(),
+                                                         project.getVersion(), project.getPackaging() );
+
+                deployer.deploy( project.getBuild().getDirectory(), artifact, deploymentRepository );
+            }
+        }
+        catch ( ArtifactDeploymentException e )
+        {
+            // TODO: deployment exception that does not give a trace
+            throw new PluginExecutionException( "Error deploying artifact", e );
+        }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD43 INS23 INS23 INS23 INS31 UPD42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS60 INS60 INS54 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS33 INS60 INS53 INS32 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS25 INS44 INS8 INS43 INS59 INS14 INS42 INS42 INS32 INS43 INS32 INS32 INS32 INS45 INS43 INS32 INS45 INS32 INS38 INS8 INS43 INS42 INS53 INS42 INS42 INS27 INS43 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS21 INS42 INS14 INS45 INS45 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42