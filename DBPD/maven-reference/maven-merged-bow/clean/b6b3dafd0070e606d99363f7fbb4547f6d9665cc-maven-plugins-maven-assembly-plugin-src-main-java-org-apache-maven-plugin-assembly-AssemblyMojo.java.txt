add ability to build a JAR with its dependencies unpacked inside.
Currently ignores META-INF in dependencies, though should probably merge things like components.xml


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163966 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Enumeration;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+ * @parameter name="workDirectory" type="java.io.File" required="true" validator="" expression="#project.build.directory/assembly/work" description="Directory to unpack JARs into if needed"
-    /**
-     * @todo use java.io.File
-     */
-    private String outputDirectory;
+    private File outputDirectory;
+    private File workDirectory;
+
-                processFileSets( archiver, assembly.getFileSets() );
-                processDependencySets( archiver, assembly.getDependencySets() );
+                processFileSets( archiver, assembly.getFileSets(), assembly.isIncludeBaseDirectory() );
+                processDependencySets( archiver, assembly.getDependencySets(), assembly.isIncludeBaseDirectory() );
-    private void processDependencySets( Archiver archiver, List dependencySets )
-        throws ArchiverException
+    private void processDependencySets( Archiver archiver, List dependencySets, boolean includeBaseDirectory )
+        throws ArchiverException, IOException
-            output = getOutputDirectory( output );
+            output = getOutputDirectory( output, includeBaseDirectory );
-                    archiver.addFile( artifact.getFile(), output + artifact.getFile().getName() );
+                    String name = artifact.getFile().getName();
+                    if ( depedencySet.isUnpack() )
+                    {
+                        // TODO: something like zipfileset in plexus-archiver
+//                        archiver.addJar(  )
+
+                        File tempLocation = new File( workDirectory, name.substring( 0, name.length() - 4 ) );
+                        boolean process = false;
+                        if ( !tempLocation.exists() )
+                        {
+                            tempLocation.mkdirs();
+                            process = true;
+                        }
+                        else if ( artifact.getFile().lastModified() > tempLocation.lastModified() )
+                        {
+                            process = true;
+                        }
+
+                        if ( process )
+                        {
+                            unpackJar( artifact.getFile(), tempLocation );
+                        }
+                        archiver.addDirectory( tempLocation, null,
+                                               (String[]) getJarExcludes().toArray( EMPTY_STRING_ARRAY ) );
+                    }
+                    else
+                    {
+                        archiver.addFile( artifact.getFile(), output + name );
+                    }
-    private String getOutputDirectory( String output )
+    private void unpackJar( File file, File tempLocation )
+        throws IOException
+    {
+        JarFile jar = new JarFile( file );
+        for ( Enumeration e = jar.entries(); e.hasMoreElements(); )
+        {
+            JarEntry entry = (JarEntry) e.nextElement();
+
+            if ( entry.isDirectory() )
+            {
+                new File( tempLocation, entry.getName() ).mkdir();
+            }
+            else
+            {
+                IOUtil.copy( jar.getInputStream( entry ),
+                             new FileOutputStream( new File( tempLocation, entry.getName() ) ) );
+            }
+        }
+    }
+
+    private List getJarExcludes()
+    {
+        List l = new ArrayList( getDefaultExcludes() );
+        l.add( "META-INF/**" );
+        return l;
+    }
+
+    private String getOutputDirectory( String output, boolean includeBaseDirectory )
-        if ( output.startsWith( "/" ) )
+        if ( includeBaseDirectory )
-            output = finalName + output;
+            if ( output.startsWith( "/" ) )
+            {
+                output = finalName + output;
+            }
+            else
+            {
+                output = finalName + "/" + output;
+            }
-            output = finalName + "/" + output;
+            if ( output.startsWith( "/" ) )
+            {
+                output = output.substring( 1 );
+            }
-            archiver = new JarArchiver();
+            JarArchiver jarArchiver = new JarArchiver();
+            jarArchiver.setCompress( true );
+            archiver = jarArchiver;
+
-    private void processFileSets( Archiver archiver, java.util.List fileSets )
+    private void processFileSets( Archiver archiver, List fileSets, boolean includeBaseDirecetory )
-            output = getOutputDirectory( output );
+            output = getOutputDirectory( output, includeBaseDirecetory );

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS65 INS43 INS83 INS43 INS59 INS44 INS43 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS8 INS44 INS44 INS66 INS42 INS42 INS42 INS39 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS24 INS42 INS60 INS21 INS41 INS39 INS42 INS25 UPD43 INS39 INS42 INS42 INS42 INS43 INS59 INS58 INS32 INS8 INS43 INS59 INS32 INS42 INS42 INS8 INS8 INS42 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS45 MOV25 INS25 INS8 INS43 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS8 INS43 INS32 INS32 INS8 MOV60 INS25 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS21 INS60 INS21 INS42 MOV32 INS8 INS43 INS32 INS32 INS32 INS7 INS43 INS59 INS32 INS42 INS32 INS32 INS60 MOV25 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS14 INS42 INS32 INS42 INS42 MOV14 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 MOV43 INS59 INS32 INS8 INS43 INS42 INS32 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS34 INS42 MOV32 INS42 INS42 INS60 INS60 INS25 INS25 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS59 INS39 INS59 INS38 INS8 INS25 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS9 INS32 INS21 INS21 INS27 INS8 INS21 INS42 INS42 INS42 INS33 INS11 INS43 INS42 INS32 INS42 INS42 INS32 INS7 INS32 INS32 INS21 INS32 INS5 INS32 INS42 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS7 INS42 INS32 INS42 INS43 INS85 INS32 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL8 DEL40