Solving MRM-4. If the source pom doesn't exist, it'll check for the existence of the target pom before writing the skeleton.

It'll always try to verify/patch the MD5/SHA1 for the target pom.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@189785 13f79535-47bb-0310-9956-ffa450edef68

+        if ( artifactFile == null || !artifactFile.exists() )
+        {
+            throw new DigestException( "Cannot generate digest for missing file: " + artifactFile );
+        }
+
-        if ( artifactFile.exists() && digestFile.exists() )
-        {
-            byte[] generatedDigest = generateArtifactDigest( artifactFile, algorithm );
-
-            InputStream in = null;
-            try
-            {
-                in = new FileInputStream( artifactFile );
-
-                int digestLen = generatedDigest.length;
-                int currentIdx = 0;
-
-                boolean matched = true;
-
-                int read = -1;
-                while ( ( read = in.read() ) > -1 )
-                {
-                    if ( currentIdx >= digestLen || read != generatedDigest[currentIdx] )
-                    {
-                        return false;
-                    }
-                }
-            }
-            catch ( IOException e )
-            {
-                throw new DigestException( "Cannot verify digest for artifact file: \'" + artifactFile
-                    + "\' against digest file: \'" + digestFile + "\' using algorithm: \'" + algorithm + "\'", e );
-            }
-            finally
-            {
-                IOUtil.close( in );
-            }
-
-        }
-        else
+        if ( digestFile == null || !digestFile.exists() || artifactFile == null || !artifactFile.exists() )
+        byte[] generatedDigest = generateArtifactDigest( artifactFile, algorithm );
+
+        InputStream in = null;
+        try
+        {
+            in = new FileInputStream( artifactFile );
+
+            int digestLen = generatedDigest.length;
+            int currentIdx = 0;
+
+            boolean matched = true;
+
+            int read = -1;
+            while ( ( read = in.read() ) > -1 )
+            {
+                if ( currentIdx >= digestLen || read != generatedDigest[currentIdx] )
+                {
+                    return false;
+                }
+            }
+        }
+        catch ( IOException e )
+        {
+            throw new DigestException( "Cannot verify digest for artifact file: \'" + artifactFile
+                + "\' against digest file: \'" + digestFile + "\' using algorithm: \'" + algorithm + "\'", e );
+        }
+        finally
+        {
+            IOUtil.close( in );
+        }
+
+        if ( artifactFile == null || !artifactFile.exists() )
+        {
+            throw new DigestException( "Cannot generate digest for missing file: " + artifactFile );
+        }
+

MOV8 INS25 INS25 MOV41 INS25 INS27 INS8 UPD27 MOV27 MOV8 INS27 INS8 INS27 INS38 INS53 INS27 INS38 INS27 INS38 INS53 INS42 INS33 INS32 INS14 INS27 INS27 MOV32 INS42 INS33 INS32 INS14 INS42 INS42 INS43 INS27 INS27 INS38 INS42 INS33 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS42 INS33 MOV32 INS42 INS45 INS42 DEL25 DEL8