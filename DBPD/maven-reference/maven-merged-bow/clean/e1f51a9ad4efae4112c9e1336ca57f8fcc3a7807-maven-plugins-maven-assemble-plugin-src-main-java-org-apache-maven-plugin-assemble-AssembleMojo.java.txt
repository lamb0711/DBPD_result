make the assembly mojo work, and use field type


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163637 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.plugin.PluginExecutionRequest;
-import org.apache.maven.plugin.PluginExecutionResponse;
+import org.apache.maven.plugin.PluginExecutionException;
-import org.codehaus.plexus.archiver.zip.ZipArchiver;
+import org.codehaus.plexus.archiver.zip.ZipArchiver;
- * @parameter name="outputDirectory" type="String" required="true" validator="" expression="#project.build.directory" description=""
- * @parameter name="descriptor" type="String" required="true" validator="" expression="#maven.assemble.descriptor" description=""
+ * @parameter name="outputDirectory" type="java.io.File" required="true" validator="" expression="#project.build.directory" description=""
+ * @parameter name="descriptor" type="java.io.File" required="true" validator="" expression="#maven.assemble.descriptor" description=""
-    public void execute( PluginExecutionRequest request, PluginExecutionResponse response )
+    private File outputDirectory;
+
+    private File descriptor;
+
+    private String finalName;
+
+    public void execute()
+        throws PluginExecutionException
+    {
+        try
+        {
+            doExecute();
+        }
+        catch ( Exception e )
+        {
+            // TODO: don't catch exception
+            throw new PluginExecutionException( "Error creating assembly", e );
+        }
+    }
+
+    private void doExecute()
-        // TODO: align all to basedir
-        String outputDirectory = (String) request.getParameter( "outputDirectory" );
-        String descriptor = (String) request.getParameter( "descriptor" );
-        String finalName = (String) request.getParameter( "finalName" );
-
-        Assembly assembly = reader.read( new FileReader( new File( descriptor ) ) );
+        Assembly assembly = reader.read( new FileReader( descriptor ) );
-                    tarCompressionMethod.setValue( format.substring( index + 1 ) );
+                    // TODO: this should accept gz and bz2 as well so we can skip over the switch
+                    String compression = format.substring( index + 1 );
+                    if ( compression.equals( "gz" ) )
+                    {
+                        tarCompressionMethod.setValue( "gzip" );
+                    }
+                    else if ( compression.equals( "bz2" ) )
+                    {
+                        tarCompressionMethod.setValue( "bzip2" );
+                    }
+                    else
+                    {
+                        // TODO: better handling
+                        throw new IllegalArgumentException( "Unknown compression format: " + compression );
+                    }
+                if ( !output.endsWith( "/" ) && !output.endsWith( "\\" ) )
+                {
+                    // TODO: shouldn't archiver do this?
+                    output += '/';
+                }
+                if ( includes.length == 0 )
+                {
+                    includes = null;
+                }

MOV26 UPD40 INS23 INS23 INS23 INS31 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 INS83 INS39 INS42 INS43 INS8 UPD83 UPD42 UPD66 UPD66 INS42 INS42 INS42 INS42 INS42 INS54 INS8 INS12 INS21 INS44 INS8 INS32 INS43 INS42 INS53 INS14 INS42 INS42 INS14 MOV43 MOV42 INS25 INS25 INS43 INS45 INS42 INS27 INS8 INS27 INS8 INS42 INS60 INS25 INS38 INS38 INS21 INS40 INS34 INS21 MOV43 INS59 INS32 INS8 INS25 INS32 INS32 INS7 INS7 INS42 MOV32 INS42 INS42 INS45 MOV21 INS32 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS13 INS42 INS33 INS42 INS42 INS45 INS21 INS53 INS45 INS32 INS14 INS42 INS42 INS45 INS43 INS27 INS42 INS45 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL11 DEL59 DEL60 DEL14 DEL14