o Why would a plugin be executing in its own POM. I think this is a far out case and you shouldn't be testing your plugin with its own POM. The comment is "I guess...". I don't think this is right.

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@572868 13f79535-47bb-0310-9956-ffa450edef68

-    /**
-     * @deprecated
-     */
-    public String resolvePluginVersion( String groupId, String artifactId, MavenProject project, ArtifactRepository localRepository )
-        throws PluginVersionResolutionException, InvalidPluginException, PluginVersionNotFoundException
-    {
-        return resolvePluginVersion( groupId, artifactId, project, localRepository, false );
-    }
-
-        // if we're still empty here, and the current project matches the plugin in question, use the current project's
-        // version, I guess...
-        if ( StringUtils.isEmpty( version ) && project.getGroupId().equals( groupId ) &&
-            project.getArtifactId().equals( artifactId ) )
-        {
-            version = project.getVersion();
-            getLogger().debug( "Version from POM itself (this project IS the plugin project): " + version );
-        }
-

DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25