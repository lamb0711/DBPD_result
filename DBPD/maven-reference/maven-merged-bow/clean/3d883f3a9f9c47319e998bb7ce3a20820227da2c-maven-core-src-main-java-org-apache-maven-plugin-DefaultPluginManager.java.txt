o inject the logger	
o formatting

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@749825 13f79535-47bb-0310-9956-ffa450edef68

+import org.codehaus.plexus.logging.Logger;
-    extends AbstractLogEnabled
+    @Requirement
+    private Logger logger;
+    
-        getLogger().debug( "Resolving plugin: " + plugin.getKey() + " with version: " + pluginVersion );
+        logger.debug( "Resolving plugin: " + plugin.getKey() + " with version: " + pluginVersion );
-            getLogger().debug( "Resolving version for plugin: " + plugin.getKey() );
+            logger.debug( "Resolving version for plugin: " + plugin.getKey() );
-            getLogger().debug( "Resolved to version: " + pluginVersion );
+            logger.debug( "Resolved to version: " + pluginVersion );
-        getLogger().debug( "In verifyVersionedPlugin for: " + plugin.getKey() );
+        logger.debug( "In verifyVersionedPlugin for: " + plugin.getKey() );
-                getLogger().debug(
+                logger.debug(
-        List<Artifact> artifacts = ( artifactSet == null || artifactSet.isEmpty() )
-                        ? new ArrayList<Artifact>() : new ArrayList<Artifact>( artifactSet );
+        List<Artifact> artifacts = ( artifactSet == null || artifactSet.isEmpty() ) ? new ArrayList<Artifact>() : new ArrayList<Artifact>( artifactSet );
-        getLogger().debug( "Got plugin artifacts:\n\n" + artifacts );
+        logger.debug( "Got plugin artifacts:\n\n" + artifacts );
-                pluginRealm = realmManager.createPluginRealm( projectPlugin,
-                                                              pluginArtifact,
-                                                              artifacts,
-                                                              coreArtifactFilterManager.getArtifactFilter() );
+                pluginRealm = realmManager.createPluginRealm( projectPlugin, pluginArtifact, artifacts, coreArtifactFilterManager.getArtifactFilter() );
-                getLogger().debug( "Created realm: " + pluginRealm + " for plugin: " + projectPlugin.getKey() );
+                logger.debug( "Created realm: " + pluginRealm + " for plugin: " + projectPlugin.getKey() );
-                getLogger().debug( "Discovering components in realm: " + pluginRealm );
+                logger.debug( "Discovering components in realm: " + pluginRealm );
-            getLogger().debug(
+            logger.debug(
-                if ( ( pluginRealm != null ) && getLogger().isDebugEnabled() )
+                if ( ( pluginRealm != null ) && logger.isDebugEnabled() )
-                    getLogger().debug( "Plugin Realm: " );
+                    logger.debug( "Plugin Realm: " );
-                getLogger().debug( "Removing invalid plugin realm." );
+                logger.debug( "Removing invalid plugin realm." );
-            getLogger().debug( "Realm for plugin: " + plugin.getKey() + ":\n" + pluginRealm );
+            logger.debug( "Realm for plugin: " + plugin.getKey() + ":\n" + pluginRealm );
-        getLogger().debug( "Using the following artifacts for classpath of: " + pluginArtifact.getId() + ":\n\n" + resolved.toString().replace( ',', '\n' ) );
+        logger.debug( "Using the following artifacts for classpath of: " + pluginArtifact.getId() + ":\n\n" + resolved.toString().replace( ',', '\n' ) );
-            getLogger().warn( "Mojo: " + mojoDescriptor.getGoal() + " is deprecated.\n" + mojoDescriptor.getDeprecated() );
+            logger.warn( "Mojo: " + mojoDescriptor.getGoal() + " is deprecated.\n" + mojoDescriptor.getDeprecated() );
-            getLogger().debug( "Setting context classloader for plugin to: " + pluginRealm.getId() + " (instance is: " + pluginRealm + ")" );
+            logger.debug( "Setting context classloader for plugin to: " + pluginRealm.getId() + " (instance is: " + pluginRealm + ")" );
-            if ( getLogger().isFatalErrorEnabled() )
+            if ( logger.isFatalErrorEnabled() )
-                getLogger().fatalError(
+                logger.fatalError(
-                    getLogger().debug( "Error releasing mojo for: " + goalExecId, e );
+                    logger.debug( "Error releasing mojo for: " + goalExecId, e );
-        getLogger().debug(
+        logger.debug(
-            getLogger().debug(
+            logger.debug(
-            getLogger().warn( "No luck." );
+            logger.warn( "No luck." );
-        mojo.setLog( new DefaultLog( getLogger() ) );
+        mojo.setLog( new DefaultLog( logger ) );
-                                                                                          getLogger(),
+                                                                                          logger,
-                        getLogger().warn( buffer.toString() );
+                        logger.warn( buffer.toString() );
-            getLogger().debug( "Realm for project: " + project.getId() + " not found. Using container realm instead." );
+            logger.debug( "Realm for project: " + project.getId() + " not found. Using container realm instead." );
-            getLogger().debug( "Realm for plugin: " + pluginDescriptor.getId() + " not found. Using project realm instead." );
+            logger.debug( "Realm for plugin: " + pluginDescriptor.getId() + " not found. Using project realm instead." );
-        getLogger().debug( "Setting realm for plugin descriptor: " + pluginDescriptor.getId() + " to: " + pluginRealm );
+        logger.debug( "Setting realm for plugin descriptor: " + pluginDescriptor.getId() + " to: " + pluginRealm );
-                getLogger().debug(
+                logger.debug(
-                    getLogger().warn( "DEPRECATED [" + parameter.getName() + "]: " + deprecated );
+                    logger.warn( "DEPRECATED [" + parameter.getName() + "]: " + deprecated );
-            ConfigurationListener listener = new DebugConfigurationListener( getLogger() );
+            ConfigurationListener listener = new DebugConfigurationListener( logger );
-            getLogger().debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with "
+            logger.debug( "Configuring mojo '" + mojoDescriptor.getId() + "' with "
-            getLogger().debug( "-- end configuration --" );
+            logger.debug( "-- end configuration --" );
-            if ( getLogger().isFatalErrorEnabled() )
+            if ( logger.isFatalErrorEnabled() )
-                getLogger().fatalError(
+                logger.fatalError(
-                getLogger().fatalError( sb.toString() );
+                logger.fatalError( sb.toString() );
-                getLogger().fatalError( sb.toString() );
+                logger.fatalError( sb.toString() );
-                    getLogger().debug( "Failed to release plugin container - ignoring." );
+                    logger.debug( "Failed to release plugin container - ignoring." );
-                    getLogger().warn( "The dependency: "
+                    logger.warn( "The dependency: "

INS26 INS40 INS23 INS78 INS83 INS43 INS59 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL43 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL42 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32 DEL32