MNG-2722 Create a strategy for providing sane default values in the MavenExecutionRequest 


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491468 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.maven.SettingsConfigurationException;
-import org.apache.maven.settings.Settings;
-        System.exit(result);
+        System.exit( result );
-    /**
-     * @noinspection ConfusingMainMethod
-     */
-    public static int main( String[] args, ClassWorld classWorld )
+    /** @noinspection ConfusingMainMethod */
+    public static int main( String[] args,
+                            ClassWorld classWorld )
-            System.err.println( "Sorry, but JDK 1.4 or above is required to execute Maven. You appear to be using "
-                + "Java:" );
-            System.err.println( "java version \"" + System.getProperty( "java.version", "<unknown java version>" )
-                + "\"" );
-            System.err.println( System.getProperty( "java.runtime.name", "<unknown runtime name>" ) + " (build "
-                + System.getProperty( "java.runtime.version", "<unknown runtime version>" ) + ")" );
-            System.err.println( System.getProperty( "java.vm.name", "<unknown vm name>" ) + " (build "
-                + System.getProperty( "java.vm.version", "<unknown vm version>" ) + ", "
-                + System.getProperty( "java.vm.info", "<unknown vm info>" ) + ")" );
+            System.err.println(
+                "Sorry, but JDK 1.4 or above is required to execute Maven. You appear to be using " + "Java:" );
+            System.err.println(
+                "java version \"" + System.getProperty( "java.version", "<unknown java version>" ) + "\"" );
+            System.err.println( System.getProperty( "java.runtime.name", "<unknown runtime name>" ) + " (build " +
+                System.getProperty( "java.runtime.version", "<unknown runtime version>" ) + ")" );
+            System.err.println( System.getProperty( "java.vm.name", "<unknown vm name>" ) + " (build " +
+                System.getProperty( "java.vm.version", "<unknown vm version>" ) + ", " +
+                System.getProperty( "java.vm.info", "<unknown vm info>" ) + ")" );
-        MavenEmbedder mavenEmbedder = new MavenEmbedder();
+        MavenEmbedder mavenEmbedder;
-            mavenEmbedder.setClassWorld( classWorld );
-
-            mavenEmbedder.start();
+            mavenEmbedder = new MavenEmbedder( classWorld );            
-        Boolean pluginUpdateOverride = Boolean.FALSE;
+        boolean pluginUpdateOverride = false;
-            pluginUpdateOverride = Boolean.TRUE;
+            pluginUpdateOverride = true;
-            pluginUpdateOverride = Boolean.FALSE;
+            pluginUpdateOverride = false;
-        if (commandLine.hasOption(CLIManager.SUPRESS_SNAPSHOT_UPDATES)) {
+        if ( commandLine.hasOption( CLIManager.SUPRESS_SNAPSHOT_UPDATES ) )
+        {
-            File userSettingsPath = mavenEmbedder.getUserSettingsPath( commandLine.getOptionValue( CLIManager.ALTERNATE_USER_SETTINGS ) );
-
-            File globalSettingsFile = mavenEmbedder.getGlobalSettingsPath();
-
-            Settings settings = mavenEmbedder.buildSettings( userSettingsPath,
-                                                             globalSettingsFile,
-                                                             interactive,
-                                                             offline,
-                                                             usePluginRegistry,
-                                                             pluginUpdateOverride );
-
-            String localRepositoryPath = mavenEmbedder.getLocalRepositoryPath( settings );
-
-            // @todo we either make Settings the official configuration mechanism or allow the indiviaul setting in the request
-            // for each of the things in the settings object. Seems redundant to configure some things via settings and
-            // some via the request. The Settings object is used in about 16 different places in the core so something
-            // to consider.
-
-                .setLocalRepositoryPath( localRepositoryPath ) // default: ~/.m2/repository
-                .setRecursive( recursive ) // default: false
-                .setUseReactor( useReactor ) // default: true
+                .setRecursive( recursive ) // default: true
+                .setUseReactor( useReactor ) // default: false
+                    // Settings
+                .setSettingsFile( commandLine.getOptionValue( CLIManager.ALTERNATE_USER_SETTINGS ) )
+                    //.setLocalRepositoryPath( localRepositoryPath ) // default: ~/.m2/repository
+                .setUsePluginRegistry( usePluginRegistry )
+                .setOffline( offline ) // default: false
+                .setUsePluginUpdateOverride( pluginUpdateOverride )
+                    //
-                .setSettings( settings ) // default: ~/.m2/settings.xml
-                .setOffline( offline ) // default: false
-        catch ( SettingsConfigurationException e )
-        {
-            showError( "Error reading settings.xml: " + e.getMessage(), e, showErrors );
-
-            return 1;
-        }
-    private static void showFatalError( String message, Exception e, boolean show )
+    private static void showFatalError( String message,
+                                        Exception e,
+                                        boolean show )
-    private static void showError( String message, Exception e, boolean show )
+    private static void showError( String message,
+                                   Exception e,
+                                   boolean show )
-                System.out.println( "Maven version: " + properties.getProperty( "version", "unknown" )
-                    + " built on " + properties.getProperty( "builtOn" ) );
+                System.out.println( "Maven version: " + properties.getProperty( "version", "unknown" ) + " built on " +
+                    properties.getProperty( "builtOn" ) );
-    private static void setCliProperty( String property, Properties executionProperties )
+    private static void setCliProperty( String property,
+                                        Properties executionProperties )

UPD66 INS39 INS9 INS7 INS42 MOV14 INS9 INS32 INS42 INS9 MOV32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL40 DEL40 DEL40 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL21 DEL34 DEL41 DEL8 DEL12