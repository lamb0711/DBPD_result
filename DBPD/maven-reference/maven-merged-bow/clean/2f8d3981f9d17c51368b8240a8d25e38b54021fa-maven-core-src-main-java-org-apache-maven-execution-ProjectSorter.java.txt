[MNG-3814] Reactor builds fail due to erroneous cycle in project sorting which does not consider versions

git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@798906 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.model.Extension;
+import org.apache.maven.model.Parent;
+import org.apache.maven.model.Plugin;
+import org.codehaus.plexus.util.StringUtils;
+import org.codehaus.plexus.util.dag.Vertex;
-        Map<String,MavenProject> projectMap = new HashMap<String,MavenProject>();
+        // groupId:artifactId:version -> project
+        Map<String, MavenProject> projectMap = new HashMap<String, MavenProject>( projects.size() * 2 );
+
+        // groupId:artifactId -> (version -> vertex)
+        Map<String, Map<String, Vertex>> vertexMap = new HashMap<String, Map<String, Vertex>>( projects.size() * 2 );
-            String id = getId( project );
+            String projectId = getId( project );
-            if ( dag.getVertex( id ) != null )
+            MavenProject conflictingProject = projectMap.put( projectId, project );
+
+            if ( conflictingProject != null )
-                MavenProject conflictingProject = projectMap.get( id );
-
-                throw new DuplicateProjectException( id, conflictingProject.getFile(), project.getFile(), "Project '" + id + "' is duplicated in the reactor" );
+                throw new DuplicateProjectException( projectId, conflictingProject.getFile(), project.getFile(),
+                                                     "Project '" + projectId + "' is duplicated in the reactor" );
-            dag.addVertex( id );
+            String projectKey = ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
-            projectMap.put( id, project );
+            Map<String, Vertex> vertices = vertexMap.get( projectKey );
+            if ( vertices == null )
+            {
+                vertices = new HashMap<String, Vertex>( 2, 1 );
+                vertexMap.put( projectKey, vertices );
+            }
+            vertices.put( project.getVersion(), dag.addVertex( projectId ) );
-        for ( MavenProject project : projects )
+        for ( Vertex projectVertex : (List<Vertex>) dag.getVerticies() )
-            String id = getId( project );
+            String projectId = projectVertex.getLabel();
-            for( Dependency dependency : project.getDependencies() )
+            MavenProject project = projectMap.get( projectId );
+
+            for ( Dependency dependency : project.getDependencies() )
-                String dependencyId = ArtifactUtils.versionlessKey( dependency.getGroupId(), dependency.getArtifactId() );
-
-                if ( dag.getVertex( dependencyId ) != null )
-                {
-                    project.addProjectReference( projectMap.get( dependencyId ) );
-
-                    dag.addEdge( id, dependencyId );
-                }
+                addEdge( projectMap, vertexMap, project, projectVertex, dependency.getGroupId(),
+                         dependency.getArtifactId(), dependency.getVersion(), false, false );
-            MavenProject parent = project.getParent();
-            
+            Parent parent = project.getModel().getParent();
+
-                String parentId = ArtifactUtils.versionlessKey( parent.getGroupId(), parent.getArtifactId() );
-                if ( dag.getVertex( parentId ) != null )
-                {
-                    // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
-                    if ( dag.hasEdge( parentId, id ) )
-                    {
-                        dag.removeEdge( parentId, id );
-                    }
-                    
-                    dag.addEdge( id, parentId );
-                }
+                // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
+                addEdge( projectMap, vertexMap, null, projectVertex, parent.getGroupId(), parent.getArtifactId(),
+                         parent.getVersion(), true, false );
-            
-            /*
-            
-            TODO: Now that the build plan is fully fleshed out we have cycles
-            
-            if ( project.getBuildPlugins() != null )
+
+            List<Plugin> buildPlugins = project.getBuildPlugins();
+            if ( buildPlugins != null )
-                for( Plugin plugin : project.getBuildPlugins() )
+                for ( Plugin plugin : buildPlugins )
-                    String pluginId = ArtifactUtils.versionlessKey( plugin.getGroupId(), plugin.getArtifactId() );
-                    
-                    if ( ( dag.getVertex( pluginId ) != null ) && !pluginId.equals( id ) )
+                    addEdge( projectMap, vertexMap, project, projectVertex, plugin.getGroupId(),
+                             plugin.getArtifactId(), plugin.getVersion(), false, true );
+
+                    for ( Dependency dependency : plugin.getDependencies() )
-                        addEdgeWithParentCheck( projectMap, pluginId, project, id );
+                        addEdge( projectMap, vertexMap, project, projectVertex, dependency.getGroupId(),
+                                 dependency.getArtifactId(), dependency.getVersion(), false, true );
-            */
+
+            List<Extension> buildExtensions = project.getBuildExtensions();
+            if ( buildExtensions != null )
+            {
+                for ( Extension extension : buildExtensions )
+                {
+                    addEdge( projectMap, vertexMap, project, projectVertex, extension.getGroupId(),
+                             extension.getArtifactId(), extension.getVersion(), false, true );
+                }
+            }
-        List<MavenProject> sortedProjects = new ArrayList<MavenProject>();
+        List<MavenProject> sortedProjects = new ArrayList<MavenProject>( projects.size() );
-         
-        for( String id : sortedProjectLabels )
+
+        for ( String id : sortedProjectLabels )
-    private void addEdgeWithParentCheck( Map<String,MavenProject> projectMap, String projectRefId, MavenProject project, String id )
+    private void addEdge( Map<String, MavenProject> projectMap, Map<String, Map<String, Vertex>> vertexMap,
+                          MavenProject project, Vertex projectVertex, String groupId, String artifactId,
+                          String version, boolean force, boolean safe )
-        MavenProject extProject = projectMap.get( projectRefId );
+        String projectKey = ArtifactUtils.versionlessKey( groupId, artifactId );
-        if ( extProject == null )
+        Map<String, Vertex> vertices = vertexMap.get( projectKey );
+
+        if ( vertices != null )
+        {
+            if ( isSpecificVersion( version ) )
+            {
+                Vertex vertex = vertices.get( version );
+                if ( vertex != null )
+                {
+                    addEdge( projectVertex, vertex, project, projectMap, force, safe );
+                }
+            }
+            else
+            {
+                for ( Vertex vertex : vertices.values() )
+                {
+                    addEdge( projectVertex, vertex, project, projectMap, force, safe );
+                }
+            }
+        }
+    }
+
+    private void addEdge( Vertex fromVertex, Vertex toVertex, MavenProject fromProject,
+                          Map<String, MavenProject> projectMap, boolean force, boolean safe )
+        throws CycleDetectedException
+    {
+        if ( fromVertex.equals( toVertex ) )
-        project.addProjectReference( extProject );
-
-        MavenProject extParent = extProject.getParent();
-        if ( extParent != null )
+        if ( fromProject != null )
-            String parentId = ArtifactUtils.versionlessKey( extParent.getGroupId(), extParent.getArtifactId() );
-            // Don't add edge from parent to extension if a reverse edge already exists
-            if ( !dag.hasEdge( projectRefId, id ) || !parentId.equals( id ) )
+            MavenProject toProject = projectMap.get( toVertex.getLabel() );
+            fromProject.addProjectReference( toProject );
+        }
+
+        if ( force && toVertex.getChildren().contains( fromVertex ) )
+        {
+            dag.removeEdge( toVertex, fromVertex );
+        }
+
+        try
+        {
+            dag.addEdge( fromVertex, toVertex );
+        }
+        catch ( CycleDetectedException e )
+        {
+            if ( !safe )
-                dag.addEdge( id, projectRefId );
+                throw e;
+    private boolean isSpecificVersion( String version )
+    {
+        return !( StringUtils.isEmpty( version ) || version.startsWith( "[" ) || version.startsWith( "(" ) );
+    }
+
-        return ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() );
+        return ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() );

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 MOV44 INS44 INS44 MOV44 MOV44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 MOV43 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS60 INS74 INS42 INS43 INS42 MOV43 INS42 UPD42 UPD42 INS39 INS42 INS39 INS42 INS42 INS60 MOV60 INS25 INS43 INS42 INS43 INS42 MOV43 INS42 INS74 INS42 INS39 INS42 INS39 INS42 INS25 INS25 INS25 INS54 MOV43 INS42 INS41 INS42 INS74 INS59 INS11 INS43 INS43 INS74 INS42 MOV43 INS59 INS74 INS27 INS8 INS42 INS42 INS43 INS43 INS43 INS32 MOV8 MOV27 INS8 INS27 INS8 INS8 INS12 INS38 INS32 INS43 INS43 INS74 INS42 INS14 MOV60 INS60 INS60 INS25 UPD43 UPD42 INS74 INS32 MOV60 INS60 INS70 INS60 INS25 INS60 INS25 MOV25 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 UPD42 INS42 INS33 INS25 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV60 INS21 INS42 INS32 INS21 MOV21 INS44 INS8 INS36 INS42 INS42 INS32 INS32 INS32 INS27 INS42 INS42 INS43 INS43 INS43 INS74 INS27 MOV43 MOV43 INS59 INS74 INS59 INS27 INS8 UPD42 INS43 INS43 INS42 INS42 MOV43 MOV43 INS59 MOV44 MOV32 INS8 INS43 INS59 MOV27 INS8 INS74 INS59 INS27 INS8 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS8 INS8 MOV43 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS42 INS25 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS43 INS43 INS74 INS32 INS34 UPD42 UPD42 INS42 INS42 MOV32 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS21 MOV21 UPD42 INS32 INS32 INS42 INS42 UPD42 INS32 INS42 INS32 INS21 INS42 INS42 INS32 INS21 INS43 INS43 INS42 INS32 INS42 MOV33 INS70 INS43 INS43 UPD42 INS42 INS70 INS42 INS42 INS42 INS42 INS60 MOV25 INS70 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS38 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 UPD42 INS44 INS42 INS8 INS43 INS59 UPD27 INS8 INS44 INS32 INS8 UPD42 UPD42 MOV42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 UPD42 INS42 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS9 INS9 INS43 INS42 MOV21 INS70 INS43 INS42 INS21 INS42 INS42 INS32 UPD42 INS21 INS43 INS42 INS42 INS42 MOV21 UPD42 UPD42 INS42 UPD42 INS74 INS34 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS44 INS32 INS8 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS42 UPD42 INS42 UPD42 UPD42 MOV42 INS32 INS32 INS32 INS9 INS9 INS43 INS42 INS42 INS42 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS9 INS9 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL32 DEL27 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL32 DEL21 DEL42 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL32 DEL38 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31