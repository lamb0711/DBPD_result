[MNG-6572] use int or long instead of BigIntegers for little numbers in
ComparableVersion

- Added class IntItem and LongItem for handling numbers lower than 2^31
and 2^63.
- Renamed IntegerItem to BigIntegerItem for handling larger numbers.
- Changed old Stack implementation to LinkedList.
- Changed LinkedList to ArrayDeque.
- Changed thrown RuntimeException by IllegalStateException.
- Ensure numeric values don't have leading zeroes, therefore ensuring
that IntItem, LongItem and BigIntItem represent bigger numeric values,
respectively.
- Only compare item value when the other Item is of the same type.
Otherwise infer comparison result from the quantity of digits of the
numerical value representing the other Item.
- Added tests.
+import java.util.ArrayDeque;
+import java.util.Deque;
-import java.util.Stack;
+
+import org.apache.commons.lang3.StringUtils;
+    private static final int MAX_INTITEM_LENGTH = 9;
+
+    private static final int MAX_LONGITEM_LENGTH = 18;
+
-        int INTEGER_ITEM = 0;
+        int INT_ITEM = 3;
+        int LONG_ITEM = 4;
+        int BIGINTEGER_ITEM = 0;
-     * Represents a numeric item in the version item list.
+     * Represents a numeric item in the version item list that can be represented with an int.
-    private static class IntegerItem
+    private static class IntItem
-        private static final BigInteger BIG_INTEGER_ZERO = new BigInteger( "0" );
+        private final int value;
-        private final BigInteger value;
+        public static final IntItem ZERO = new IntItem();
-        public static final IntegerItem ZERO = new IntegerItem();
-
-        private IntegerItem()
+        private IntItem()
-            this.value = BIG_INTEGER_ZERO;
+            this.value = 0;
-        IntegerItem( String str )
+        IntItem( String str )
-            this.value = new BigInteger( str );
+            this.value = Integer.parseInt( str );
+        @Override
-            return INTEGER_ITEM;
+            return INT_ITEM;
+        @Override
-            return BIG_INTEGER_ZERO.equals( value );
+            return value == 0;
+        @Override
-                return BIG_INTEGER_ZERO.equals( value ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
+                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
-                case INTEGER_ITEM:
-                    return value.compareTo( ( (IntegerItem) item ).value );
+                case INT_ITEM:
+                    int itemValue = ( (IntItem) item ).value;
+                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
+                case LONG_ITEM:
+                case BIGINTEGER_ITEM:
+                    return -1;
-                    throw new RuntimeException( "invalid item: " + item.getClass() );
+                    throw new IllegalStateException( "invalid item: " + item.getClass() );
+        @Override
+        public String toString()
+        {
+            return Integer.toString( value );
+        }
+    }
+
+    /**
+     * Represents a numeric item in the version item list that can be represented with a long.
+     */
+    private static class LongItem
+        implements Item
+    {
+        private final long value;
+
+        LongItem( String str )
+        {
+            this.value = Long.parseLong( str );
+        }
+
+        @Override
+        public int getType()
+        {
+            return LONG_ITEM;
+        }
+
+        @Override
+        public boolean isNull()
+        {
+            return value == 0;
+        }
+
+        @Override
+        public int compareTo( Item item )
+        {
+            if ( item == null )
+            {
+                return ( value == 0 ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
+            }
+
+            switch ( item.getType() )
+            {
+                case INT_ITEM:
+                    return 1;
+                case LONG_ITEM:
+                    long itemValue = ( (LongItem) item ).value;
+                    return ( value < itemValue ) ? -1 : ( ( value == itemValue ) ? 0 : 1 );
+                case BIGINTEGER_ITEM:
+                    return -1;
+
+                case STRING_ITEM:
+                    return 1; // 1.1 > 1-sp
+
+                case LIST_ITEM:
+                    return 1; // 1.1 > 1-1
+
+                default:
+                    throw new IllegalStateException( "invalid item: " + item.getClass() );
+            }
+        }
+
+        @Override
+        public String toString()
+        {
+            return Long.toString( value );
+        }
+    }
+
+    /**
+     * Represents a numeric item in the version item list.
+     */
+    private static class BigIntegerItem
+        implements Item
+    {
+        private final BigInteger value;
+
+        BigIntegerItem( String str )
+        {
+            this.value = new BigInteger( str );
+        }
+
+        @Override
+        public int getType()
+        {
+            return BIGINTEGER_ITEM;
+        }
+
+        @Override
+        public boolean isNull()
+        {
+            return BigInteger.ZERO.equals( value );
+        }
+
+        @Override
+        public int compareTo( Item item )
+        {
+            if ( item == null )
+            {
+                return BigInteger.ZERO.equals( value ) ? 0 : 1; // 1.0 == 1, 1.1 > 1
+            }
+
+            switch ( item.getType() )
+            {
+                case INT_ITEM:
+                case LONG_ITEM:
+                    return 1;
+
+                case BIGINTEGER_ITEM:
+                    return value.compareTo( ( (BigIntegerItem) item ).value );
+
+                case STRING_ITEM:
+                    return 1; // 1.1 > 1-sp
+
+                case LIST_ITEM:
+                    return 1; // 1.1 > 1-1
+
+                default:
+                    throw new IllegalStateException( "invalid item: " + item.getClass() );
+            }
+        }
+
+        @Override
-        private String value;
+        private final String value;
+        @Override
+        @Override
+        @Override
-                case INTEGER_ITEM:
+                case INT_ITEM:
+                case LONG_ITEM:
+                case BIGINTEGER_ITEM:
-                    throw new RuntimeException( "invalid item: " + item.getClass() );
+                    throw new IllegalStateException( "invalid item: " + item.getClass() );
+        @Override
+        @Override
+        @Override
+        @Override
-                case INTEGER_ITEM:
+                case INT_ITEM:
+                case LONG_ITEM:
+                case BIGINTEGER_ITEM:
-                    throw new RuntimeException( "invalid item: " + item.getClass() );
+                    throw new IllegalStateException( "invalid item: " + item.getClass() );
+        @Override
-        Stack<Item> stack = new Stack<>();
+        Deque<Item> stack = new ArrayDeque<>();
-                    list.add( IntegerItem.ZERO );
+                    list.add( IntItem.ZERO );
-                    list.add( IntegerItem.ZERO );
+                    list.add( IntItem.ZERO );
-        return isDigit ? new IntegerItem( buf ) : new StringItem( buf, false );
+        if ( isDigit )
+        {
+            buf = stripLeadingZeroes( buf );
+            if ( buf.length() <= MAX_INTITEM_LENGTH )
+            {
+                // lower than 2^31
+                return new IntItem( buf );
+            }
+            else if ( buf.length() <= MAX_LONGITEM_LENGTH )
+            {
+                // lower than 2^63
+                return new LongItem( buf );
+            }
+            return new BigIntegerItem( buf );
+        }
+        return new StringItem( buf, false );
+    private static String stripLeadingZeroes( String buf )
+    {
+        String strippedBuf = StringUtils.stripStart( buf, "0" );
+        if ( strippedBuf.isEmpty() )
+        {
+            return "0";
+        }
+        return strippedBuf;
+    }
+
+    @Override
+    @Override
+    @Override
+    @Override

MOV26 INS26 INS26 MOV31 INS40 UPD40 INS40 INS23 INS23 INS55 INS55 INS55 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS23 INS23 INS29 INS83 INS83 UPD42 MOV42 INS43 INS23 MOV23 MOV31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 MOV29 INS83 INS83 INS42 MOV43 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 INS8 INS83 UPD83 INS42 INS44 INS78 INS78 INS83 INS43 INS42 MOV8 INS78 INS78 INS42 INS34 INS42 INS34 INS39 INS59 INS39 INS59 INS65 INS42 INS83 INS83 INS39 INS59 UPD83 UPD43 UPD42 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 MOV44 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS83 MOV83 INS39 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 MOV43 INS42 INS8 UPD42 INS78 INS78 INS78 INS44 INS78 INS83 INS78 INS78 INS78 INS78 INS43 INS8 INS78 INS78 INS78 INS78 INS25 MOV41 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 UPD42 INS66 INS42 UPD42 UPD42 INS43 INS42 INS21 INS42 INS41 INS42 INS41 INS42 INS25 INS50 INS42 INS42 INS41 INS66 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS25 INS50 INS42 INS41 INS42 INS42 INS42 INS43 INS42 MOV41 MOV49 INS42 INS42 INS42 INS42 MOV41 MOV41 INS42 INS42 INS41 INS42 INS42 INS42 INS42 UPD74 INS42 INS8 MOV14 INS42 INS43 INS59 INS32 INS8 UPD42 UPD43 INS42 INS7 INS42 INS27 MOV27 INS8 MOV32 INS49 INS60 INS41 INS49 INS49 INS41 INS49 INS41 INS49 INS41 INS49 MOV53 INS32 INS42 INS7 INS42 INS27 UPD42 MOV42 INS27 INS8 INS32 INS49 INS41 INS49 INS60 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS53 INS32 UPD42 INS42 INS27 INS32 INS49 INS49 INS41 MOV53 INS49 INS49 INS53 INS42 INS49 INS49 UPD43 MOV25 INS21 INS25 INS41 INS42 INS42 INS32 INS42 INS42 INS41 UPD42 INS34 INS22 INS32 INS42 INS34 INS41 INS42 INS39 INS59 INS16 INS42 INS42 INS38 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS22 INS32 INS42 INS34 INS42 INS33 INS41 INS42 INS42 INS42 INS34 INS42 INS39 INS59 INS16 INS42 INS38 INS42 INS34 INS42 INS34 INS14 INS42 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS42 INS42 UPD42 INS34 INS42 INS42 UPD42 INS14 INS42 INS42 UPD42 UPD42 UPD74 MOV27 INS25 INS7 INS27 INS8 INS25 INS14 INS42 INS42 INS42 INS45 INS45 INS52 INS42 INS42 INS42 INS42 INS16 INS42 INS22 INS36 INS38 INS36 INS34 UPD43 INS52 INS42 INS42 INS42 INS42 INS16 UPD42 MOV42 INS22 INS36 INS38 INS36 INS34 INS43 INS27 UPD43 INS43 INS27 UPD43 UPD43 MOV21 MOV27 MOV8 MOV25 INS42 INS32 INS32 INS42 INS41 INS27 INS8 INS43 INS42 INS36 INS34 INS34 INS36 INS42 INS27 INS34 INS16 UPD42 INS36 INS34 INS34 INS36 INS42 INS27 INS34 INS16 INS42 INS45 INS32 UPD42 INS42 INS45 INS32 UPD42 UPD42 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS41 INS42 INS27 INS11 INS42 INS42 INS36 INS34 INS34 INS27 INS11 INS42 INS42 INS36 INS34 INS34 INS42 INS42 INS40 INS42 INS42 INS43 INS42 INS42 INS42 INS14 INS42 INS34 INS43 INS42 INS27 INS42 INS34 INS43 INS42 INS27 UPD43 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 UPD40 INS42 UPD40 DEL45 DEL42 DEL42 DEL42 DEL83 DEL83 DEL83 DEL83 DEL43 DEL43 DEL14 DEL59 DEL23 DEL55 DEL25 DEL42 DEL42 DEL43 DEL42 DEL14 DEL16 DEL8 DEL42