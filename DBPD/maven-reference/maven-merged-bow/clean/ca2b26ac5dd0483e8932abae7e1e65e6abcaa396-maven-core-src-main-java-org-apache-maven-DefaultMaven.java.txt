fix a lot of checkstyle violations for future m-checkstyle-p 2.13, as
proof of concept for misc violations suppressions strategies
-    private LocalRepositoryManagerFactory simpleLocalRepositoryManagerFactory;
+    private LocalRepositoryManagerFactory simpleLocalRepoMgrFactory;
-    // 7) Create ProjectDependencyGraph using trimming which takes into account --projects and reactor mode. This ensures
-    //    that the projects passed into the ReactorReader are only those specified.
+    // 7) Create ProjectDependencyGraph using trimming which takes into account --projects and reactor mode.
+    //    This ensures that the projects passed into the ReactorReader are only those specified.
-    //    checks for duplicate projects definitions in the build. Ideally this type of duplicate checking should be part of
-    //    getting the reactor projects in 6). The duplicate checking is conflated with getProjectMap(projects).
+    //    checks for duplicate projects definitions in the build. Ideally this type of duplicate checking should be
+    //    part of getting the reactor projects in 6). The duplicate checking is conflated with getProjectMap(projects).
-    // 10) Create ProjectDependencyGraph without trimming (as trimming was done in 7). A new topological sort is required after
-    //     the execution of 9) as the AbstractLifecycleParticipants are free to mutate the MavenProject instances, which may change
-    //     dependencies which can, in turn, affect the build order.
-    // 
+    // 10) Create ProjectDependencyGraph without trimming (as trimming was done in 7). A new topological sort is
+    //     required after the execution of 9) as the AbstractLifecycleParticipants are free to mutate the MavenProject
+    //     instances, which may change dependencies which can, in turn, affect the build order.
+    //
-    //    
+    //
+    @SuppressWarnings( "checkstyle:methodlength" )
-            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants( Collections.<MavenProject> emptyList() ) )
+            for ( AbstractMavenLifecycleParticipant listener : getLifecycleParticipants( Collections.<MavenProject>emptyList() ) )
-            logger.warn( "Disabling enhanced local repository: using legacy is strongly discouraged to ensure build reproducibility." );
+            logger.warn( "Disabling enhanced local repository: using legacy is strongly discouraged to ensure"
+                + " build reproducibility." );
-                session.setLocalRepositoryManager( simpleLocalRepositoryManagerFactory.newInstance( session, localRepo ) );
+                session.setLocalRepositoryManager( simpleLocalRepoMgrFactory.newInstance( session, localRepo ) );
-                    String location = ModelProblemUtils.formatLocation( problem, result.getProjectId() );
-                    logger.warn( problem.getMessage() + ( StringUtils.isNotEmpty( location ) ? " @ " + location : "" ) );
+                    String loc = ModelProblemUtils.formatLocation( problem, result.getProjectId() );
+                    logger.warn( problem.getMessage() + ( StringUtils.isNotEmpty( loc ) ? " @ " + loc : "" ) );
-        for ( MavenProject project : projects )
+        for ( MavenProject p : projects )
-            String projectKey = ArtifactUtils.key( project.getGroupId(), project.getArtifactId(), project.getVersion() );
+            String projectKey = ArtifactUtils.key( p.getGroupId(), p.getArtifactId(), p.getVersion() );
-            projectsMap.put( projectKey, project );
+            projectsMap.put( projectKey, p );
-                            + " as extensions, which is not possible within the same reactor build. This plugin was pulled from the local repository!" );
+                            + " as extensions, which is not possible within the same reactor build. "
+                            + "This plugin was pulled from the local repository!" );
-    private ProjectDependencyGraph createProjectDependencyGraph( Collection<MavenProject> projects, MavenExecutionRequest request,
+    private ProjectDependencyGraph createProjectDependencyGraph( Collection<MavenProject> projects,
+                                                                 MavenExecutionRequest request,

INS79 UPD42 INS42 INS45 UPD42 INS27 UPD42 INS45 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 INS45 UPD42 UPD42 DEL45