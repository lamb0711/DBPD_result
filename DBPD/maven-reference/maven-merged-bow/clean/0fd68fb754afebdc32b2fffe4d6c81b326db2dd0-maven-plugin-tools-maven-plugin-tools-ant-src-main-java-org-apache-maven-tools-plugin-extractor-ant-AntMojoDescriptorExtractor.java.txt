Ant support is working. I want to revisit the testing before I let it go, though.

o Added maven-script-ant to wrapper Ant-based Plexus components in a Mojo-compliant shell

o Added maven-plugin-tools-ant to extract plugin descriptor metadata from Ant-based plugin sources

o Revised the maven-plugin-tools-model, which can be used as a generic companion metadata file for things like Ant-based mojos. It now includes an analogy to @parameter default-value=""

o Added javadoc format for DefaultWagonManager, correcting the name of an exception thrown by the configureWagon() method.

o Changed the required version of maven-plugin-tools-api in the plugin-plugin to 2.0.1-SNAPSHOT, to accommodate changes in the script-based mojo descriptor extractor API. This allows companion metadata files for mojo scripts, as in the case of Ant.

o Removed maven-plugin-tools-beanshell from the plugin-plugin's dependencies. It can be included as a plugin-dependency in the plugin projects that need it, in similar fashion to Ant's extractors.



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@326372 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.maven.plugin.descriptor.Parameter;
-    private static final String METADATA_FILE_EXTENSION = ".plugin.xml";
-    private static final String SCRIPT_FILE_EXTENSION = ".xml";
+    private static final String METADATA_FILE_EXTENSION = ".mojos.xml";
-    protected List extractMojoDescriptors( Map scriptFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
+    private static final String SCRIPT_FILE_EXTENSION = ".build.xml";
+
+    protected List extractMojoDescriptorsFromMetadata( Map metadataFilesKeyedByBasedir, PluginDescriptor pluginDescriptor )
-        
-        for ( Iterator mapIterator = scriptFilesKeyedByBasedir.entrySet().iterator(); mapIterator.hasNext(); )
+
+        for ( Iterator mapIterator = metadataFilesKeyedByBasedir.entrySet().iterator(); mapIterator.hasNext(); )
-            Set scriptFiles = (Set) entry.getValue();
+            Set metadataFiles = (Set) entry.getValue();
-            for ( Iterator it = scriptFiles.iterator(); it.hasNext(); )
+            for ( Iterator it = metadataFiles.iterator(); it.hasNext(); )
-                File scriptMetadataFile = (File) it.next();
-                
-                String basename = scriptMetadataFile.getName();
+                File metadataFile = (File) it.next();
+
+                String basename = metadataFile.getName();
-                
-                File scriptFile = new File( scriptMetadataFile.getParentFile(), basename + SCRIPT_FILE_EXTENSION );
-                
+
+                File scriptFile = new File( metadataFile.getParentFile(), basename + SCRIPT_FILE_EXTENSION );
+
-                    throw new InvalidPluginDescriptorException( "Found orphaned plugin metadata file: " + scriptMetadataFile );
+                    throw new InvalidPluginDescriptorException( "Found orphaned plugin metadata file: "
+                        + metadataFile );
-                
+
-                
+
-                
+
-                    Set mojoDescriptors = parser.parseMojoDescriptors( scriptMetadataFile );
-                    
-                    for ( Iterator discoveredMojoIterator = mojoDescriptors.iterator(); discoveredMojoIterator.hasNext(); )
+                    Set mojoDescriptors = parser.parseMojoDescriptors( metadataFile );
+
+                    for ( Iterator discoveredMojoIterator = mojoDescriptors.iterator(); discoveredMojoIterator
+                        .hasNext(); )
-                        
+
+                        Map paramMap = descriptor.getParameterMap();
+
+                        if ( !paramMap.containsKey( "basedir" ) )
+                        {
+                            Parameter param = new Parameter();
+                            param.setName( "basedir" );
+                            param.setAlias( "ant.basedir" );
+                            param.setExpression( "${antBasedir}" );
+                            param.setDefaultValue( "${basedir}" );
+                            param.setType( "java.io.File" );
+                            param.setDescription( "The base directory from which to execute the Ant script." );
+                            param.setEditable( true );
+                            param.setRequired( true );
+
+                            descriptor.addParameter( param );
+                        }
+
+                        if ( !paramMap.containsKey( "antMessageLevel" ) )
+                        {
+                            Parameter param = new Parameter();
+                            param.setName( "messageLevel" );
+                            param.setAlias( "ant.messageLevel" );
+                            param.setExpression( "${antMessageLevel}" );
+                            param.setDefaultValue( "info" );
+                            param.setType( "java.lang.String" );
+                            param.setDescription( "The message-level used to tune the verbosity of Ant logging." );
+                            param.setEditable( true );
+                            param.setRequired( false );
+
+                            descriptor.addParameter( param );
+                        }
-                        
-                        if ( StringUtils.isNotEmpty( descriptor.getImplementation() ) )
+
+                        String dImpl = descriptor.getImplementation();
+                        if ( StringUtils.isNotEmpty( dImpl ) )
-                            implementation += ":" + descriptor.getImplementation();
+                            implementation = relativePath + dImpl.substring( PluginMetadataParser.IMPL_BASE_PLACEHOLDER.length() );
-                        descriptor.setLanguage( "ant" );
+                        descriptor.setLanguage( "ant-mojo" );
-                        
+
+                        descriptor.setPluginDescriptor( pluginDescriptor );
+
-                    throw new ExtractionException( "Error extracting mojo descriptor from script: " + scriptMetadataFile, e );
+                    throw new ExtractionException( "Error extracting mojo descriptor from script: "
+                        + metadataFile, e );
+        return SCRIPT_FILE_EXTENSION;
+    }
+    
+    protected String getMetadataFileExtension()
+    {
-

INS26 INS40 INS31 UPD42 INS83 INS43 INS42 INS8 UPD42 UPD45 UPD45 UPD42 INS42 INS41 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS60 INS25 INS25 INS60 INS21 UPD42 UPD42 INS43 INS59 INS38 INS8 INS38 INS8 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 MOV32 UPD42 MOV42 UPD45 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS45 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD7 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS40 INS42 DEL42 DEL32 DEL45