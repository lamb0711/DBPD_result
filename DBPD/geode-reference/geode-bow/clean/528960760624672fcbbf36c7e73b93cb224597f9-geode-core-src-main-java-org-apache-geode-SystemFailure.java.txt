GEODE-5780: remove LoggingThreadGroup

GEODE-5783: have a single source for ThreadFactory

LoggingThreadGroup is no longer used and has been removed.

LoggingUnhandledExceptionHandler creates a single handler that logs
to a static logger. All geode threads should use this singleton.

LoggingThread should be used when creating a Thread.
It will automatically set a LoggingUnhandledExceptionHandler on the thread.

LoggingThreadFactory makes it easy to create a ThreadFactory instance that
uses LoggingThread and gives each thread a unique name.

LoggingExecutors should be used in place of Executors.
Each executor it creates will have a LoggingThreadFactory.

All the places geode used Thread, ThreadGroup, ThreadFactory, and Executors have
been changed to use these classes. The only exception is some of the add on modules
(like redis, and memcached) were not changed so that they would not use new internal
geode APIs.
This checkin uses these new classes in every place the previously used
LoggingThreadGroup. The code should also be reviewed for other places
we create Thread or ThreadFactory instances without using the LoggingThreadGroup.

+import org.apache.geode.internal.logging.LoggingThread;
- * <h2>Create Logging ThreadGroups</h2> If you create any Thread, a best practice is to catch severe
- * errors and signal failure appropriately. One trick to do this is to create a ThreadGroup that
- * handles uncaught exceptions by overriding
- * {@link ThreadGroup#uncaughtException(Thread, Throwable)} and to declare your thread as a member
- * of that {@link ThreadGroup}. This also has a significant side-benefit in that most uncaught
- * exceptions can be detected:
- * <p>
- *
- * <pre>
-    ThreadGroup tg = new ThreadGroup("Worker Threads") {
-        public void uncaughtException(Thread t, Throwable e) {
-          // Do this *before* any object allocation in case of
-          // OutOfMemoryError (for instance)
-          if (e instanceof VirtualMachineError) {
-            SystemFailure.{@link #setFailure(Error) setFailure}((VirtualMachineError)e); // don't throw
-          }
-          String s = "Uncaught exception in thread " + t;
-          system.getLogWriter().severe(s, e);
-        }
-        Thread t = new Thread(myRunnable, tg, "My Thread");
-        t.start();
-      }; *
- * </pre>
-   * This is a logging ThreadGroup, created only once.
-   */
-  private static final ThreadGroup tg;
-  static {
-    tg = new ThreadGroup("SystemFailure Watchdog Threads") {
-      @Override
-      public void uncaughtException(Thread t, Throwable e) {
-        System.err.println("Internal error in SystemFailure watchdog:" + e);
-        e.printStackTrace();
-      }
-    };
-  }
-
-  /**
-      watchDog = new Thread(tg, SystemFailure::runWatchDog, "SystemFailure WatchDog");
-      watchDog.setDaemon(true);
+      watchDog = new LoggingThread("SystemFailure WatchDog", SystemFailure::runWatchDog);
-      proctor = new Thread(tg, SystemFailure::runProctor, "SystemFailure Proctor");
-      proctor.setDaemon(true);
+      proctor = new LoggingThread("SystemFailure Proctor", SystemFailure::runProctor);
