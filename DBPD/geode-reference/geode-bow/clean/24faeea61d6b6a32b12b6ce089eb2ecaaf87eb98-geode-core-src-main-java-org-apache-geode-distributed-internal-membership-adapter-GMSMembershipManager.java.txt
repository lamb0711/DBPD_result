GEODE-7196 Simplify ClusterDistributionManage

remove distribution ID collections from ClusterDistributionManager

move Executors out of DistributionManager implementations

make membership views immutable - we shouldn't install a new view
and then modify it because it's now used directly by other code.

+import java.util.function.Function;
+import java.util.stream.Collectors;
+import org.apache.geode.distributed.internal.OperationExecutors;
-  private MembershipView latestView = new MembershipView();
+  private volatile MembershipView latestView = new MembershipView();
-      if (newViewId < latestViewId) {
+      // Save previous view, for delta analysis
+      MembershipView priorView = latestView;
+
+      if (newViewId < priorView.getViewId()) {
-      // Save previous view, for delta analysis
-      MembershipView priorView = latestView;
-
-      latestViewId = newViewId;
-      latestView = new MembershipView(newView, newView.getViewId());
+      long newlatestViewId = newViewId;
+      MembershipView newlatestView = new MembershipView(newView, newView.getViewId());
-          if (!latestView.contains(entry.getKey())) {
-            latestView.add(entry.getKey());
+          if (!newlatestView.contains(entry.getKey())) {
+            newlatestView.add(entry.getKey());
-      /*
-       * the timeout interval for suspected members
-       */
+
+      // the view is complete - let's install it
+      newlatestView.makeUnmodifiable();
+      latestView = newlatestView;
+  @Override
+  public <V> V doWithViewLocked(Function<MembershipManager, V> function) {
+    latestViewReadLock.lock();
+    try {
+      return (V) function.apply(this);
+    } finally {
+      latestViewReadLock.unlock();
+    }
+  }
+
+        latestView.makeUnmodifiable();
-    return createGeodeView(view.getCreator(), view.getViewId(), view.getMembers(),
+    MembershipView result = createGeodeView(view.getCreator(), view.getViewId(), view.getMembers(),
+    result.makeUnmodifiable();
+    return result;
+        newMembers.makeUnmodifiable();
-  @Override
-  public ReadWriteLock getViewLock() {
-    return this.latestViewLock;
-  }
-
-    MembershipView v;
-
-    latestViewReadLock.lock();
-    v = latestView;
-    latestViewReadLock.unlock();
-
+    MembershipView v = latestView;
-
-    v.getMembers().stream().filter(this::isShunned).forEachOrdered(result::remove);
-
+  public Set<InternalDistributedMember> getMembersNotShuttingDown() {
+    latestViewReadLock.lock();
+    try {
+      return latestView.getMembers().stream().filter(id -> !shutdownMembers.containsKey(id))
+          .collect(
+              Collectors.toSet());
+    } finally {
+      latestViewReadLock.unlock();
+    }
+  }
+
+  @Override
+        newView.makeUnmodifiable();
-    OverflowQueueWithDMStats<Runnable> serialQueue = dm.getSerialQueue(idm);
+    OverflowQueueWithDMStats<Runnable> serialQueue = dm.getExecutors().getSerialQueue(idm);
-      return ClusterDistributionManager.SERIAL_EXECUTOR;
+      return OperationExecutors.SERIAL_EXECUTOR;
-      if (latestViewId < 0 && !isConnected()) {
-        latestViewId = v.getViewId();
+      MembershipView currentView = latestView;
+      if (currentView.getViewId() < 0 && !isConnected()) {
