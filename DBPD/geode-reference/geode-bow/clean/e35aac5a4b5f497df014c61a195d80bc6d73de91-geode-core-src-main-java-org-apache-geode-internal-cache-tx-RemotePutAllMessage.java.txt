Merge branch 'release/1.5.0'

-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.tx;
-import java.util.Iterator;
+import org.apache.geode.cache.RegionDestroyedException;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.internal.cache.DistributedPutAllOperation;
+import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.cache.EventID;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.RemoteOperationException;
+import org.apache.geode.internal.cache.TXManagerImpl;
- * data.
+ * data. It is also used to implement non-transactional putAlls, see:
+ * DistributedPutAllOperation.initMessage
-  // private boolean useOriginRemote;
-
-  @Override
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-    Collection replicates = r.getCacheDistributionAdvisor().adviseInitializedReplicates();
+    Collection<InternalDistributedMember> replicates =
+        r.getCacheDistributionAdvisor().adviseInitializedReplicates();
-      ArrayList l = new ArrayList(replicates);
+      ArrayList<InternalDistributedMember> l = new ArrayList<>(replicates);
-    for (Iterator<InternalDistributedMember> it = replicates.iterator(); it.hasNext();) {
-      InternalDistributedMember replicate = it.next();
+    for (InternalDistributedMember replicate : replicates) {
-        PutAllResponse response = send(replicate, event, data, dataCount, false,
-            DistributionManager.SERIAL_EXECUTOR, posDup);
-        response.waitForCacheException();
+        PutAllResponse response = send(replicate, event, data, dataCount, false, posDup);
+        response.waitForRemoteResponse();
-        List successfulKeys = result.getKeys();
+        List<Object> successfulKeys = result.getKeys();
+        @SuppressWarnings("rawtypes")
-          logger.debug("RemotePutMessage caught CacheException during distribution", e);
+          logger.debug("RemotePutAllMessage caught CacheException during distribution", e);
-      } catch (RemoteOperationException e) {
+      } catch (RegionDestroyedException | RemoteOperationException e) {
-              "RemotePutMessage caught an unexpected exception during distribution", e);
+              "RemotePutAllMessage caught an exception during distribution; retrying to another member",
+              e);
-  RemotePutAllMessage(EntryEventImpl event, Set recipients, DirectReplyProcessor p,
-      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote, int processorType,
+  RemotePutAllMessage(EntryEventImpl event, DistributedMember recipient, DirectReplyProcessor p,
+      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote,
-    super(recipients, event.getRegion().getFullPath(), p);
-    this.resetRecipients();
-    if (recipients != null) {
-      setRecipients(recipients);
-    }
+    super((InternalDistributedMember) recipient, event.getRegion().getFullPath(), p);
-    // this.useOriginRemote = useOriginRemote;
-    // this.processorType = processorType;
-   * @throws ForceReattemptException if the peer is no longer available
+   * @throws RemoteOperationException if the peer is no longer available
-      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote, int processorType,
+      PutAllEntryData[] putAllData, int putAllDataCount, boolean useOriginRemote,
-    // Assert.assertTrue(recipient != null, "RemotePutAllMessage NULL recipient"); recipient can be
-    // null for event notifications
-    Set recipients = Collections.singleton(recipient);
-    PutAllResponse p = new PutAllResponse(event.getRegion().getSystem(), recipients);
-    RemotePutAllMessage msg =
-        new RemotePutAllMessage(event, recipients, p, putAllData, putAllDataCount, useOriginRemote,
-            processorType, possibleDuplicate, !event.isGenerateCallbacks());
-    msg.setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());
-    Set failures = event.getRegion().getDistributionManager().putOutgoing(msg);
+    PutAllResponse p = new PutAllResponse(event.getRegion().getSystem(), recipient);
+    RemotePutAllMessage msg = new RemotePutAllMessage(event, recipient, p, putAllData,
+        putAllDataCount, useOriginRemote, possibleDuplicate, !event.isGenerateCallbacks());
+    Set<?> failures = event.getRegion().getDistributionManager().putOutgoing(msg);
-  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+  protected boolean operateOnRegion(ClusterDistributionManager dm, LocalRegion r, long startTime)
-  /* we need a event with content for waitForNodeOrCreateBucket() */
-   * @param r partitioned region eventSender the endpoint server who received request from client
-   *        lastModified timestamp for last modification
+   * @param r region
+   * @param eventSender the endpoint server who received request from client
+   * @param lastModified timestamp for last modification
-    // create a base event and a DPAO for PutAllMessage distributed btw redundant buckets
-            new VersionedObjectList(putAllDataCount, true, dr.concurrencyChecksEnabled);
+            new VersionedObjectList(putAllDataCount, true, dr.getConcurrencyChecksEnabled());
-            // final boolean requiresRegionContext = dr.keyRequiresRegionContext();
-                  versions.addKeyAndVersion(putAllData[i].key, ev.getVersionTag());
+                  versions.addKeyAndVersion(putAllData[i].getKey(), ev.getVersionTag());
-
-  // override reply processor type from PartitionMessage
-  RemoteOperationResponse createReplyProcessor(LocalRegion r, Set recipients, Object key) {
-    return new PutAllResponse(r.getSystem(), recipients);
-  }
-
-  // override reply message type from PartitionMessage
-  @Override
-  protected void sendReply(InternalDistributedMember member, int procId, DM dm, ReplyException ex,
-      LocalRegion r, long startTime) {
-    ReplyMessage.send(member, procId, ex, getReplySender(dm), r != null && r.isInternalRegion());
-  }
-
-
-    /** Result of the PutAll operation */
-    // private PutAllResponseData[] responseData;
-    public void process(final DM dm, final ReplyProcessor21 rp) {
+    public void process(final DistributionManager dm, final ReplyProcessor21 rp) {
-    // private volatile PutAllResponseData[] returnValue;
-    public PutAllResponse(InternalDistributedSystem ds, Set recipients) {
-      super(ds, recipients, false);
+    public PutAllResponse(InternalDistributedSystem ds, DistributedMember recipient) {
+      super(ds, (InternalDistributedMember) recipient, false);
