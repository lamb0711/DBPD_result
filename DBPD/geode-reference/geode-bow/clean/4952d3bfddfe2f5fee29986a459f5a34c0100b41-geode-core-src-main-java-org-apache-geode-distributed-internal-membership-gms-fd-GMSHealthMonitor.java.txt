GEODE-6883: Removing some dependencies on core from membership

* Removing some direct dependencies on classes outside of membership.
* Replaced the pattern having each Service implement MessageHandler and
  have a single processMessage method with a switch statement. Instead
  we install individual MessageHandlers for each message.
* Removed GMSAuthenticator from Services. Instead we inject the
  Authenticator when we create a MembershipManager.

Key-Gripped-By: Bill Burcham <bburcham@pivotal.io>
Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
Co-Authored-By: Ernest Burghardt <eburghardt@pivotal.io>

-import static org.apache.geode.internal.DataSerializableFixedID.FINAL_CHECK_PASSED_MESSAGE;
-import static org.apache.geode.internal.DataSerializableFixedID.HEARTBEAT_REQUEST;
-import static org.apache.geode.internal.DataSerializableFixedID.HEARTBEAT_RESPONSE;
-import static org.apache.geode.internal.DataSerializableFixedID.SUSPECT_MEMBERS_MESSAGE;
-import org.apache.geode.distributed.internal.membership.gms.interfaces.MessageHandler;
-public class GMSHealthMonitor implements HealthMonitor, MessageHandler {
+public class GMSHealthMonitor implements HealthMonitor {
-    services.getMessenger().addHandler(HeartbeatRequestMessage.class, this);
-    services.getMessenger().addHandler(HeartbeatMessage.class, this);
-    services.getMessenger().addHandler(SuspectMembersMessage.class, this);
-    services.getMessenger().addHandler(FinalCheckPassedMessage.class, this);
+
+    services.getMessenger().addHandler(HeartbeatRequestMessage.class,
+        this::processMessage);
+    services.getMessenger().addHandler(HeartbeatMessage.class,
+        this::processMessage);
+    services.getMessenger().addHandler(SuspectMembersMessage.class,
+        this::processMessage);
+    services.getMessenger().addHandler(FinalCheckPassedMessage.class,
+        this::processMessage);
-  @Override
-  public void processMessage(DistributionMessage m) {
+  void processMessage(HeartbeatRequestMessage m) {
-
-    logger.trace("processing {}", m);
-
-    switch (m.getDSFID()) {
-      case HEARTBEAT_REQUEST:
-        if (beingSick || playingDead) {
-          logger.debug("sick member is ignoring check request");
-        } else {
-          processHeartbeatRequest((HeartbeatRequestMessage) m);
-        }
-        break;
-      case HEARTBEAT_RESPONSE:
-        if (beingSick || playingDead) {
-          logger.debug("sick member is ignoring check response");
-        } else {
-          processHeartbeat((HeartbeatMessage) m);
-        }
-        break;
-      case SUSPECT_MEMBERS_MESSAGE:
-        if (beingSick || playingDead) {
-          logger.debug("sick member is ignoring suspect message");
-        } else {
-          processSuspectMembersRequest((SuspectMembersMessage) m);
-        }
-        break;
-      case FINAL_CHECK_PASSED_MESSAGE:
-        contactedBy(((FinalCheckPassedMessage) m).getSuspect());
-        break;
-      default:
-        throw new IllegalArgumentException("unknown message type: " + m);
+    if (beingSick || playingDead) {
+      logger.debug("sick member is ignoring check request");
+      return;
-  }
-
-  private void processHeartbeatRequest(HeartbeatRequestMessage m) {
-    if (this.isStopping || this.playingDead) {
+    if (this.isStopping) {
-  private void processHeartbeat(HeartbeatMessage m) {
+
+
+  void processMessage(HeartbeatMessage m) {
+    if (isStopping) {
+      return;
+    }
+    if (beingSick || playingDead) {
+      logger.debug("sick member is ignoring check response");
+      return;
+    }
+
-  private void processSuspectMembersRequest(SuspectMembersMessage incomingRequest) {
+  void processMessage(SuspectMembersMessage incomingRequest) {
+    if (isStopping) {
+      return;
+    }
+    if (beingSick || playingDead) {
+      logger.debug("sick member is ignoring suspect message");
+      return;
+    }
-    if (!playingDead) {
-      for (Iterator<SuspectRequest> it = incomingRequest.getMembers().iterator(); it.hasNext();) {
-        SuspectRequest req = it.next();
-        if (req.getSuspectMember().equals(localAddress)) {
-          HeartbeatMessage message = new HeartbeatMessage(-1);
-          message.setRecipient(sender);
-          try {
-            services.getMessenger().send(message);
-            this.stats.incHeartbeatsSent();
-            it.remove();
-          } catch (CancelException e) {
-            return;
-          }
+    for (Iterator<SuspectRequest> it = incomingRequest.getMembers().iterator(); it.hasNext();) {
+      SuspectRequest req = it.next();
+      if (req.getSuspectMember().equals(localAddress)) {
+        HeartbeatMessage message = new HeartbeatMessage(-1);
+        message.setRecipient(sender);
+        try {
+          services.getMessenger().send(message);
+          this.stats.incHeartbeatsSent();
+          it.remove();
+        } catch (CancelException e) {
+          return;
+  void processMessage(FinalCheckPassedMessage m) {
+    if (isStopping) {
+      return;
+    }
+    contactedBy(m.getSuspect());
+  }
+
+
+
-              processSuspectMembersRequest(suspectMembersMessage);
+              processMessage(suspectMembersMessage);
