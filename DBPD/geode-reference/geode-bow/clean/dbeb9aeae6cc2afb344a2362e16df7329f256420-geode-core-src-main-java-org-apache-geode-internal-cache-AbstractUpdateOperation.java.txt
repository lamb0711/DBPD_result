Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public abstract class AbstractUpdateOperation extends DistributedCacheOperation  {
+public abstract class AbstractUpdateOperation extends DistributedCacheOperation {
-  
+
-  
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD",
-      justification="test hook that is unset normally")
+
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+      value = "UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD",
+      justification = "test hook that is unset normally")
-  
+
-  
+
-      
+
-    AbstractUpdateMessage m = (AbstractUpdateMessage)msg;
+    AbstractUpdateMessage m = (AbstractUpdateMessage) msg;
-  private static final boolean ALWAYS_REPLICATE_UPDATES = Boolean.getBoolean("GemFire.ALWAYS_REPLICATE_UPDATES");
-  
+  private static final boolean ALWAYS_REPLICATE_UPDATES =
+      Boolean.getBoolean("GemFire.ALWAYS_REPLICATE_UPDATES");
+
-    if (!rgn.isAllEvents()
-        || (dp.withReplication()
-            && rgn.isInitialized()
-            && ev.getOperation().isUpdate()
-            && !rgn.concurrencyChecksEnabled // misordered CREATE and UPDATE messages can cause inconsistencies
-            && !ALWAYS_REPLICATE_UPDATES))
-    {
+    if (!rgn.isAllEvents() || (dp.withReplication() && rgn.isInitialized()
+        && ev.getOperation().isUpdate() && !rgn.concurrencyChecksEnabled // misordered CREATE and
+                                                                         // UPDATE messages can
+                                                                         // cause inconsistencies
+        && !ALWAYS_REPLICATE_UPDATES)) {
+
-   * Does a remote update (could be create or put).
-   * This code was factored into a static for QueuedOperation.
+   * Does a remote update (could be create or put). This code was factored into a static for
+   * QueuedOperation.
+   * 
-          BucketRegion br = (BucketRegion)rgn;
+          BucketRegion br = (BucketRegion) rgn;
-        // if the oldValue is the DESTROYED token and overwrite is disallowed,
-        // then basicPut will set the blockedDestroyed flag in the event
-        boolean overwriteDestroyed = ev.getOperation().isCreate();
-        if (rgn.basicUpdate(ev, true /*ifNew*/, false/*ifOld*/, lastMod, overwriteDestroyed)) {
-          rgn.getCachePerfStats().endPut(startPut, ev.isOriginRemote());
-          // we did a create, or replayed a create event
-          doUpdate = false;
-          updated = true;
-        }
-        else { // already exists. If it was blocked by the DESTROYED token, then
-          // do no update.
-          if (ev.oldValueIsDestroyedToken()) {
-            if (rgn.getVersionVector() != null && ev.getVersionTag() != null) {
-                rgn.getVersionVector().recordVersion(
-                    (InternalDistributedMember) ev.getDistributedMember(),
-                    ev.getVersionTag());
-            }
+          // if the oldValue is the DESTROYED token and overwrite is disallowed,
+          // then basicPut will set the blockedDestroyed flag in the event
+          boolean overwriteDestroyed = ev.getOperation().isCreate();
+          if (rgn.basicUpdate(ev, true /* ifNew */, false/* ifOld */, lastMod,
+              overwriteDestroyed)) {
+            rgn.getCachePerfStats().endPut(startPut, ev.isOriginRemote());
+            // we did a create, or replayed a create event
+            updated = true;
+          } else { // already exists. If it was blocked by the DESTROYED token, then
+            // do no update.
+            if (ev.oldValueIsDestroyedToken()) {
+              if (rgn.getVersionVector() != null && ev.getVersionTag() != null) {
+                rgn.getVersionVector().recordVersion(
+                    (InternalDistributedMember) ev.getDistributedMember(), ev.getVersionTag());
+              }
+              doUpdate = false;
+            }
-        }
-            BucketRegion br = (BucketRegion)rgn;
+            BucketRegion br = (BucketRegion) rgn;
-            BucketRegion br = (BucketRegion)rgn;
+            BucketRegion br = (BucketRegion) rgn;
-          if (rgn.basicUpdate(ev, false/*ifNew*/, true/*ifOld*/, lastMod, overwriteDestroyed)) {
-            rgn.getCachePerfStats().endPut(startPut, ev.isOriginRemote());
-            if (logger.isTraceEnabled()) {
-              logger.trace("Processing put key {} in region {}", ev.getKey(), rgn.getFullPath());
-            }
-            updated = true;
-          }
-          else { // key not here or blocked by DESTROYED token
-            if (rgn.isUsedForPartitionedRegionBucket()
-                || (rgn.dataPolicy.withReplication() && rgn.getConcurrencyChecksEnabled())) {
-              overwriteDestroyed = true;
-              ev.makeCreate();
-              rgn.basicUpdate(ev, true /*ifNew*/, false/*ifOld*/, lastMod, overwriteDestroyed);
+            if (rgn.basicUpdate(ev, false/* ifNew */, true/* ifOld */, lastMod,
+                overwriteDestroyed)) {
-              updated = true;
-            } else {
-              if (rgn.getVersionVector() != null && ev.getVersionTag() != null) {
-                rgn.getVersionVector().recordVersion((InternalDistributedMember) ev.getDistributedMember(), ev.getVersionTag());
+              if (logger.isTraceEnabled()) {
+                logger.trace("Processing put key {} in region {}", ev.getKey(), rgn.getFullPath());
-              if (logger.isDebugEnabled()) {
-                logger.debug("While processing Update message, update not performed because this key is {}",
-                  (ev.oldValueIsDestroyedToken() ? "blocked by DESTROYED/TOMBSTONE token" : "not defined"));
+              updated = true;
+            } else { // key not here or blocked by DESTROYED token
+              if (rgn.isUsedForPartitionedRegionBucket()
+                  || (rgn.dataPolicy.withReplication() && rgn.getConcurrencyChecksEnabled())) {
+                overwriteDestroyed = true;
+                ev.makeCreate();
+                rgn.basicUpdate(ev, true /* ifNew */, false/* ifOld */, lastMod,
+                    overwriteDestroyed);
+                rgn.getCachePerfStats().endPut(startPut, ev.isOriginRemote());
+                updated = true;
+              } else {
+                if (rgn.getVersionVector() != null && ev.getVersionTag() != null) {
+                  rgn.getVersionVector().recordVersion(
+                      (InternalDistributedMember) ev.getDistributedMember(), ev.getVersionTag());
+                }
+                if (logger.isDebugEnabled()) {
+                  logger.debug(
+                      "While processing Update message, update not performed because this key is {}",
+                      (ev.oldValueIsDestroyedToken() ? "blocked by DESTROYED/TOMBSTONE token"
+                          : "not defined"));
+                }
-          }
-              BucketRegion br = (BucketRegion)rgn;
+              BucketRegion br = (BucketRegion) rgn;
-        }
-        else { // supplied null, must be a create operation
+        } else { // supplied null, must be a create operation
-      }
-      else {
-        if (rgn.getVersionVector() != null && ev.getVersionTag() != null && !ev.getVersionTag().isRecorded()) {
-          rgn.getVersionVector().recordVersion((InternalDistributedMember) ev.getDistributedMember(), ev.getVersionTag());
+      } else {
+        if (rgn.getVersionVector() != null && ev.getVersionTag() != null
+            && !ev.getVersionTag().isRecorded()) {
+          rgn.getVersionVector().recordVersion(
+              (InternalDistributedMember) ev.getDistributedMember(), ev.getVersionTag());
-            logger.debug("While processing Update message, update not performed because key was created but mirroring keys only and value not in update message, OR key was not new for sender and has been destroyed here");
+            logger.debug(
+                "While processing Update message, update not performed because key was created but mirroring keys only and value not in update message, OR key was not new for sender and has been destroyed here");
-    }
-    catch (CacheWriterException e) {
-      throw new Error(LocalizedStrings.AbstractUpdateOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED.toLocalizedString(), e);
-    }
-    catch (TimeoutException e) {
-      throw new Error(LocalizedStrings.AbstractUpdateOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED.toLocalizedString(), e);
+    } catch (CacheWriterException e) {
+      throw new Error(LocalizedStrings.AbstractUpdateOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED
+          .toLocalizedString(), e);
+    } catch (TimeoutException e) {
+      throw new Error(
+          LocalizedStrings.AbstractUpdateOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED
+              .toLocalizedString(),
+          e);
-  public static abstract class AbstractUpdateMessage extends CacheOperationMessage  {
+  public static abstract class AbstractUpdateMessage extends CacheOperationMessage {
-    protected boolean operateOnRegion(CacheEvent event, DistributionManager dm) throws EntryNotFoundException {
-      EntryEventImpl ev = (EntryEventImpl)event;
-      DistributedRegion rgn = (DistributedRegion)ev.region;
+    protected boolean operateOnRegion(CacheEvent event, DistributionManager dm)
+        throws EntryNotFoundException {
+      EntryEventImpl ev = (EntryEventImpl) event;
+      DistributedRegion rgn = (DistributedRegion) ev.region;
-      
-//      if (!rgn.hasSeenEvent((InternalCacheEvent)event)) {
-        if (!rgn.isCacheContentProxy()) {
-          basicOperateOnRegion(ev, rgn);
-        }
-//      }
+
+      // if (!rgn.hasSeenEvent((InternalCacheEvent)event)) {
+      if (!rgn.isCacheContentProxy()) {
+        basicOperateOnRegion(ev, rgn);
+      }
+      // }
-      
+
-     * Do the actual update after operationOnRegion has confirmed work needs to be done
-     * Note this is the default implementation used by UpdateOperation.
-     *   DistributedPutAllOperation overrides and then calls back using super
-     *   to this implementation.
-     * NOTE: be careful to not use methods like getEvent(); defer to
-     *   the ev passed as a parameter instead.
+     * Do the actual update after operationOnRegion has confirmed work needs to be done Note this is
+     * the default implementation used by UpdateOperation. DistributedPutAllOperation overrides and
+     * then calls back using super to this implementation. NOTE: be careful to not use methods like
+     * getEvent(); defer to the ev passed as a parameter instead.
-      }
-      catch (ConcurrentCacheModificationException e) {
+      } catch (ConcurrentCacheModificationException e) {
-      buff.append(this.lastModified);      
+      buff.append(this.lastModified);
+
-      if (attr.getConcurrencyChecksEnabled() 
-          && attr.getDataPolicy().withPersistence() 
+      if (attr.getConcurrencyChecksEnabled() && attr.getDataPolicy().withPersistence()
-        
-        String msg = LocalizedStrings.DistributedPutAllOperation_MISSING_VERSION
-            .toLocalizedString(tag);
-        RuntimeException ex = (sender.getVersionObject().compareTo(Version.GFE_80) < 0) 
-            ? new InternalGemFireException(msg) 
-            : new InvalidVersionException(msg);
+
+        String msg =
+            LocalizedStrings.DistributedPutAllOperation_MISSING_VERSION.toLocalizedString(tag);
+        RuntimeException ex = (sender.getVersionObject().compareTo(Version.GFE_80) < 0)
+            ? new InternalGemFireException(msg) : new InvalidVersionException(msg);
-    
+
