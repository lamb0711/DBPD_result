Merge branch 'release/1.5.0'

-import org.apache.geode.annotations.Experimental;
-
-   * Setting this to "true" enables a new asynchronous eviction algorithm. For more details see
-   * {@link org.apache.geode.internal.cache.eviction.LRUListWithSyncSorting}.
+   * When set to "true" enables asynchronous eviction algorithm (defaults to true). For more details
+   * see {@link org.apache.geode.internal.cache.eviction.LRUListWithAsyncSorting}.
-  @Experimental
-   * For more details see {@link org.apache.geode.internal.cache.eviction.LRUListWithSyncSorting}.
+   * For more details see {@link org.apache.geode.internal.cache.eviction.LRUListWithAsyncSorting}.
-  @Experimental
-   * For more details see {@link org.apache.geode.internal.cache.eviction.LRUListWithSyncSorting}.
+   * For more details see {@link org.apache.geode.internal.cache.eviction.LRUListWithAsyncSorting}.
-  @Experimental
-   * @return a boolean value of the system property
+   * @return an Optional containing the Boolean value of the system property
-  public static boolean getProductBooleanProperty(String name) {
-    String property = System.getProperty(GEODE_PREFIX + name);
-    if (property != null) {
-      return Boolean.getBoolean(GEODE_PREFIX + name);
-    }
-    return Boolean.getBoolean(GEMFIRE_PREFIX + name);
+  public static Optional<Boolean> getProductBooleanProperty(String name) {
+    String property = getProperty(name);
+    return property != null ? Optional.of(Boolean.parseBoolean(property)) : Optional.empty();
+  private static String getProperty(String name) {
+    String property = getGeodeProperty(name);
+    return property != null ? property : getGemfireProperty(name);
+  }
+
+  private static String getGeodeProperty(String name) {
+    return System.getProperty(GEODE_PREFIX + name);
+  }
+
+  private static String getGemfireProperty(String name) {
+    return System.getProperty(GEMFIRE_PREFIX + name);
+  }
+
-    return getProductBooleanProperty("restoreSetOperationTransactionBehavior");
+    return getProductBooleanProperty("restoreSetOperationTransactionBehavior").orElse(false);
-    return getProductBooleanProperty("restoreIdleExpirationBehavior");
+    return getProductBooleanProperty("restoreIdleExpirationBehavior").orElse(false);
