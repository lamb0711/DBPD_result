Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

+import org.apache.geode.internal.lang.SystemUtils;
+
+ * <p>
- * 
- *
-  public static final String EXIT_MARKER = "Exit Functions";
-  private static final ScriptGenerator UNIX_GENERATOR = new UnixScriptGenerator();
-  private static final ScriptGenerator WINDOWS_GENERATOR = new WindowsScriptGenerator();
+  static final String INCREMENTAL_MARKER_COMMENT =
+      "Incremental backup.  Restore baseline originals from previous backups.";
-  private Map<File, File> baselineFiles = new HashMap<File, File>();
+  static final String REFUSE_TO_OVERWRITE_MESSAGE = "Backup not restored. Refusing to overwrite ";
+
+  private static final String[] ABOUT_SCRIPT_COMMENT =
+      {"Restore a backup of gemfire persistent data to the location it was backed up",
+          "from. This script will refuse to restore if the original data still exists.",
+          "This script was automatically generated by the gemfire backup utility.",};
+
+  private static final String EXISTENCE_CHECK_COMMENT =
+      "Test for existing originals.  If they exist, do not restore the backup.";
+
+  private static final String RESTORE_DATA_COMMENT = "Restore data";
+
+  private final ScriptGenerator generator;
+  private final Map<File, File> baselineFiles = new HashMap<File, File>();
-  public void addBaselineFiles(Map<File, File> baselineFiles) {
+  private PrintWriter writer;
+  private File outputDir;
+
+  public RestoreScript() {
+    this(SystemUtils.isWindows() ? new WindowsScriptGenerator() : new UnixScriptGenerator());
+  }
+
+  RestoreScript(final ScriptGenerator generator) {
+    this.generator = generator;
+  }
+
+  public void addBaselineFiles(final Map<File, File> baselineFiles) {
-  public void addFile(File originalFile, File backupFile) {
+  public void addFile(final File originalFile, final File backupFile) {
-  public void addExistenceTest(File originalFile) {
+  public void addExistenceTest(final File originalFile) {
-  public void generate(File outputDir) throws FileNotFoundException {
-    if (isWindows()) {
-      generateWindowsScript(outputDir);
-    } else {
-      generateUnixScript(outputDir);
-    }
-
+  public void generate(final File outputDir) throws FileNotFoundException {
+    this.outputDir = outputDir;
+    File outputFile = new File(outputDir, generator.getScriptName());
+    generateScript(outputFile);
-  private void generateWindowsScript(File outputDir) throws FileNotFoundException {
-    File outputFile = new File(outputDir, "restore.bat");
-    generateScript(outputDir, outputFile, WINDOWS_GENERATOR);
-  }
-
-  private void generateUnixScript(File outputDir) throws FileNotFoundException {
-    File outputFile = new File(outputDir, "restore.sh");
-    generateScript(outputDir, outputFile, UNIX_GENERATOR);
-  }
-
-  private void generateScript(File outputDir, File outputFile, ScriptGenerator osGenerator)
-      throws FileNotFoundException {
-    PrintWriter writer = new PrintWriter(outputFile);
+  private void generateScript(final File outputFile) throws FileNotFoundException {
+    writer = new PrintWriter(outputFile);
-      osGenerator.writePreamble(writer);
-      writer.println();
-      osGenerator.writeComment(writer,
-          "Restore a backup of gemfire persistent data to the location it was backed up");
-      osGenerator.writeComment(writer, "from.");
-      osGenerator.writeComment(writer,
-          "This script will refuse to restore if the original data still exists.");
-      writer.println();
-      osGenerator.writeComment(writer,
-          "This script was automatically generated by the gemfire backup utility.");
-      writer.println();
-      osGenerator.writeComment(writer,
-          "Test for existing originals. If they exist, do not restore the backup.");
-      for (File file : existenceTests) {
-        osGenerator.writeExistenceTest(writer, file);
-      }
-      writer.println();
-      osGenerator.writeComment(writer, "Restore data");
-      for (Map.Entry<File, File> entry : backedUpFiles.entrySet()) {
-        File backup = entry.getKey();
-        boolean backupHasFiles = backup.isDirectory() && backup.list().length != 0;
-        backup = outputDir.toPath().relativize(backup.toPath()).toFile();
-        File original = entry.getValue();
-        if (original.isDirectory()) {
-          osGenerator.writeCopyDirectoryContents(writer, backup, original, backupHasFiles);
-        } else {
-          osGenerator.writeCopyFile(writer, backup, original);
-        }
-      }
-      // Write out baseline file copies in restore script (if there are any) if this is a restore
-      // for an incremental backup
-      if (!this.baselineFiles.isEmpty()) {
-        writer.println();
-        osGenerator.writeComment(writer,
-            "Incremental backup.  Restore baseline originals from previous backups.");
-        for (Map.Entry<File, File> entry : this.baselineFiles.entrySet()) {
-          osGenerator.writeCopyFile(writer, entry.getKey(), entry.getValue());
-        }
-      }
-
-      if (isWindows()) {
-        osGenerator.writeExit(writer);
-      }
+      writePreamble();
+      writeAbout();
+      writeExistenceTest();
+      writeRestoreData();
+      writeIncrementalData();
+      generator.writeExit(writer);
+
-  // TODO prpersist - We've got this code replicated
-  // in 10 different places in our product. Maybe we
-  // need to put this method somewhere :)
-  private boolean isWindows() {
-    String os = System.getProperty("os.name");
-    if (os != null) {
-      if (os.contains("Windows")) {
-        return true;
+  private void writePreamble() {
+    generator.writePreamble(writer);
+    writer.println();
+  }
+
+  private void writeAbout() {
+    for (String comment : ABOUT_SCRIPT_COMMENT) {
+      generator.writeComment(writer, comment);
+    }
+    writer.println();
+  }
+
+  private void writeExistenceTest() {
+    generator.writeComment(writer, EXISTENCE_CHECK_COMMENT);
+    for (File file : existenceTests) {
+      generator.writeExistenceTest(writer, file);
+    }
+    writer.println();
+  }
+
+  private void writeRestoreData() {
+    generator.writeComment(writer, RESTORE_DATA_COMMENT);
+    for (Map.Entry<File, File> entry : backedUpFiles.entrySet()) {
+      File backup = entry.getKey();
+      boolean backupHasFiles = backup.isDirectory() && backup.list().length != 0;
+      backup = outputDir.toPath().relativize(backup.toPath()).toFile();
+      File original = entry.getValue();
+      if (original.isDirectory()) {
+        generator.writeCopyDirectoryContents(writer, backup, original, backupHasFiles);
+      } else {
+        generator.writeCopyFile(writer, backup, original);
-    return false;
-  private static interface ScriptGenerator {
-
-    void writePreamble(PrintWriter writer);
-
-    void writeExit(PrintWriter writer);
-
-    void writeCopyFile(PrintWriter writer, File backup, File original);
-
-    void writeCopyDirectoryContents(PrintWriter writer, File backup, File original,
-        boolean backupHasFiles);
-
-    void writeExistenceTest(PrintWriter writer, File file);
-
-    void writeComment(PrintWriter writer, String string);
-
-  };
-
-  private static class WindowsScriptGenerator implements ScriptGenerator {
-    final String ERROR_CHECK = "IF %ERRORLEVEL% GEQ 4 GOTO Exit_Bad";
-
-    public void writePreamble(PrintWriter writer) {
-      writer.println("echo off");
+  private void writeIncrementalData() {
+    // Write out baseline file copies in restore script (if there are any) if this is a restore
+    // for an incremental backup
+    if (this.baselineFiles.isEmpty()) {
+      return;
-    public void writeComment(PrintWriter writer, String string) {
-      writer.println("rem " + string);
-    }
-
-    public void writeCopyDirectoryContents(PrintWriter writer, File backup, File original,
-        boolean backupHasFiles) {
-      writer.println("mkdir \"" + original + "\"");
-      writer.println("C:\\Windows\\System32\\Robocopy.exe \"" + backup + "\" \"" + original
-          + "\" /e /njh /njs");
-      writer.println(ERROR_CHECK);
-    }
-
-    public void writeCopyFile(PrintWriter writer, File source, File destination) {
-      String fileName = source.getName();
-      String sourcePath = source.getParent() == null ? "." : source.getParent();
-      String destinationPath = destination.getParent() == null ? "." : destination.getParent();
-      writer.println("C:\\Windows\\System32\\Robocopy.exe \"" + sourcePath + "\" \""
-          + destinationPath + "\" " + fileName + " /njh /njs");
-      writer.println(ERROR_CHECK);
-    }
-
-    public void writeExistenceTest(PrintWriter writer, File file) {
-      writer.println("IF EXIST \"" + file + "\" echo \"Backup not restored. Refusing to overwrite "
-          + file + "\" && exit /B 1 ");
-    }
-
-    public void writeExit(PrintWriter writer) {
-      writeComment(writer, EXIT_MARKER);
-      writer.println(":Exit_Good\nexit /B 0\n\n:Exit_Bad\nexit /B 1");
+    writer.println();
+    generator.writeComment(writer, INCREMENTAL_MARKER_COMMENT);
+    for (Map.Entry<File, File> entry : this.baselineFiles.entrySet()) {
+      generator.writeCopyFile(writer, entry.getKey(), entry.getValue());
-
-  private static class UnixScriptGenerator implements ScriptGenerator {
-    public void writePreamble(PrintWriter writer) {
-      writer.println("#!/bin/bash -e");
-      writer.println("cd `dirname $0`");
-    }
-
-    public void writeComment(PrintWriter writer, String string) {
-      writer.println("#" + string);
-    }
-
-    public void writeCopyDirectoryContents(PrintWriter writer, File backup, File original,
-        boolean backupHasFiles) {
-      writer.println("mkdir -p '" + original + "'");
-      if (backupHasFiles) {
-        writer.println("cp -rp '" + backup + "'/* '" + original + "'");
-      }
-    }
-
-    public void writeCopyFile(PrintWriter writer, File backup, File original) {
-      writer.println("cp -p '" + backup + "' '" + original + "'");
-    }
-
-    public void writeExistenceTest(PrintWriter writer, File file) {
-      writer.println("test -e '" + file + "' && echo 'Backup not restored. Refusing to overwrite "
-          + file + "' && exit 1 ");
-    }
-
-    public void writeExit(PrintWriter writer) {}
-  }
-
