GEODE-7869: Cleanup warnings in geode-serialization

-    this.MIN_CHUNK_SIZE = INITIAL_CAPACITY;
-    this.buffer = ByteBuffer.allocate(maxStrBytes);
-    this.doNotCopy = false;
+    MIN_CHUNK_SIZE = INITIAL_CAPACITY;
+    buffer = ByteBuffer.allocate(maxStrBytes);
+    doNotCopy = false;
-    if (allocSize < SMALLEST_CHUNK_SIZE) {
-      this.MIN_CHUNK_SIZE = SMALLEST_CHUNK_SIZE;
-    } else {
-      this.MIN_CHUNK_SIZE = allocSize;
-    }
-    this.buffer = ByteBuffer.allocate(allocSize);
+    MIN_CHUNK_SIZE = Math.max(allocSize, SMALLEST_CHUNK_SIZE);
+    buffer = ByteBuffer.allocate(allocSize);
-    if (allocSize < 32) {
-      this.MIN_CHUNK_SIZE = 32;
-    } else {
-      this.MIN_CHUNK_SIZE = allocSize;
-    }
-    this.buffer = initialBuffer;
+    MIN_CHUNK_SIZE = Math.max(allocSize, 32);
+    buffer = initialBuffer;
-    if (len > 32) {
-      this.MIN_CHUNK_SIZE = len;
-    } else {
-      this.MIN_CHUNK_SIZE = 32;
-    }
-    this.buffer = ByteBuffer.wrap(bytes);
-    this.doNotCopy = false;
+    MIN_CHUNK_SIZE = Math.max(len, 32);
+    buffer = ByteBuffer.wrap(bytes);
+    doNotCopy = false;
-    boolean result = this.doNotCopy;
+    boolean result = doNotCopy;
-      this.doNotCopy = v;
+      doNotCopy = v;
-    this.disallowExpansion = true;
-    this.expansionException = ee;
-    this.memoPosition = this.buffer.position();
+    disallowExpansion = true;
+    expansionException = ee;
+    memoPosition = buffer.position();
-    this.disallowExpansion = true;
+    disallowExpansion = true;
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    int remainingSpace = this.buffer.capacity() - this.buffer.position();
+    int remainingSpace = buffer.capacity() - buffer.position();
-    if (this.disallowExpansion) {
-      if (this.expansionException != null) {
-        this.ignoreWrites = true;
-        this.buffer.position(this.memoPosition);
-        throw this.expansionException;
+    if (disallowExpansion) {
+      if (expansionException != null) {
+        ignoreWrites = true;
+        buffer.position(memoPosition);
+        throw expansionException;
-    final ByteBuffer oldBuffer = this.buffer;
-    if (this.chunks == null) {
-      this.chunks = new LinkedList<ByteBuffer>();
+    final ByteBuffer oldBuffer = buffer;
+    if (chunks == null) {
+      chunks = new LinkedList<>();
-    this.size += oldBuffer.remaining();
-    this.chunks.add(oldBuffer);
+    size += oldBuffer.remaining();
+    chunks.add(oldBuffer);
-    this.buffer = ByteBuffer.allocate(amount);
+    buffer = ByteBuffer.allocate(amount);
-    if (!this.writeMode) {
+    if (!writeMode) {
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.doNotCopy && len > MIN_TO_COPY) {
+    if (doNotCopy && len > MIN_TO_COPY) {
-      int remainingSpace = this.buffer.capacity() - this.buffer.position();
+      int remainingSpace = buffer.capacity() - buffer.position();
-        this.buffer.put(source, offset, remainingSpace);
+        buffer.put(source, offset, remainingSpace);
-      this.buffer.put(source, offset, len);
+      buffer.put(source, offset, len);
-    this.size += bb.remaining();
-    this.chunks.add(bb);
+    size += bb.remaining();
+    chunks.add(bb);
-      this.size += remaining;
+      size += remaining;
-      this.chunks.add(bb);
+      chunks.add(bb);
-    if (this.chunks != null) {
-      result += this.chunks.size();
+    if (chunks != null) {
+      result += chunks.size();
-    if (this.buffer.remaining() > 0) {
+    if (buffer.remaining() > 0) {
-    if (this.chunks != null) {
-      for (ByteBuffer bb : this.chunks) {
+    if (chunks != null) {
+      for (ByteBuffer bb : chunks) {
-    if (this.buffer.remaining() > 0) {
-      bbArray[offset] = this.buffer;
+    if (buffer.remaining() > 0) {
+      bbArray[offset] = buffer;
-    final ByteBuffer oldBuffer = this.buffer;
-    if (this.chunks == null) {
-      this.chunks = new LinkedList<ByteBuffer>();
+    final ByteBuffer oldBuffer = buffer;
+    if (chunks == null) {
+      chunks = new LinkedList<>();
-    this.size += oldBuffer.remaining();
+    size += oldBuffer.remaining();
-    this.chunks.add(bufToAdd);
+    chunks.add(bufToAdd);
-      this.buffer = ByteBuffer.allocate(MIN_CHUNK_SIZE);
+      buffer = ByteBuffer.allocate(MIN_CHUNK_SIZE);
-      this.buffer = oldBuffer.slice();
+      buffer = oldBuffer.slice();
-    if (this.writeMode) {
-      return this.size + this.buffer.position();
+    if (writeMode) {
+      return size + buffer.position();
-      return this.size;
+      return size;
-    if (this.chunks != null) {
+    if (chunks != null) {
-      for (ByteBuffer bb : this.chunks) {
+      for (ByteBuffer bb : chunks) {
-      this.chunks = null;
-      newBuffer.put(this.buffer);
-      this.buffer = newBuffer;
-      this.buffer.flip(); // now ready for reading
+      chunks = null;
+      newBuffer.put(buffer);
+      buffer = newBuffer;
+      buffer.flip(); // now ready for reading
-    if (this.chunks != null) {
-      this.chunks.getFirst().position(startPosition);
-      for (ByteBuffer bb : this.chunks) {
+    if (chunks != null) {
+      chunks.getFirst().position(startPosition);
+      for (ByteBuffer bb : chunks) {
-      this.chunks = null;
+      chunks = null;
-      this.buffer.position(startPosition);
+      buffer.position(startPosition);
-    newBuffer.put(this.buffer);
+    newBuffer.put(buffer);
-    this.buffer = newBuffer;
+    buffer = newBuffer;
-    this.size = 0;
-    if (this.chunks != null) {
-      for (ByteBuffer bb : this.chunks) {
+    size = 0;
+    if (chunks != null) {
+      for (ByteBuffer bb : chunks) {
-    this.buffer.rewind();
-    size += this.buffer.remaining();
+    buffer.rewind();
+    size += buffer.remaining();
-    this.size = 0;
-    if (this.chunks != null) {
-      this.chunks.clear();
-      this.chunks = null;
+    size = 0;
+    if (chunks != null) {
+      chunks.clear();
+      chunks = null;
-    this.buffer.clear();
-    this.writeMode = true;
-    this.ignoreWrites = false;
-    this.disallowExpansion = false;
-    this.expansionException = null;
+    buffer.clear();
+    writeMode = true;
+    ignoreWrites = false;
+    disallowExpansion = false;
+    expansionException = null;
-    if (this.writeMode) {
-      this.ignoreWrites = false;
-      this.writeMode = false;
-      this.buffer.flip();
-      this.size += this.buffer.remaining();
+    if (writeMode) {
+      ignoreWrites = false;
+      writeMode = false;
+      buffer.flip();
+      size += buffer.remaining();
-    ByteBuffer result = this.buffer.duplicate();
+    ByteBuffer result = buffer.duplicate();
-    return this.buffer;
+    return buffer;
-    return this.buffer;
+    return buffer;
-      this.buffer = tmp;
-      return this.buffer.array();
+      buffer = tmp;
+      return buffer.array();
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    LongUpdater result = new LongUpdater(this.buffer);
+    LongUpdater result = new LongUpdater(buffer);
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.ignoreWrites)
+    if (ignoreWrites)
+  @SuppressWarnings("deprecation")
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-      if (this.buffer.hasArray()) {
+      if (buffer.hasArray()) {
-        int pos = this.buffer.position();
-        str.getBytes(0, strlen, this.buffer.array(), this.buffer.arrayOffset() + pos);
-        this.buffer.position(pos + strlen);
+        int pos = buffer.position();
+        str.getBytes(0, strlen, buffer.array(), buffer.arrayOffset() + pos);
+        buffer.position(pos + strlen);
-        this.buffer.put(bytes);
+        buffer.put(bytes);
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-        this.buffer.putChar(s.charAt(i));
+        buffer.putChar(s.charAt(i));
-    if (this.ignoreWrites)
+    if (ignoreWrites)
+  @SuppressWarnings("deprecation")
-      this.buffer.putShort((short) strlen);
+      buffer.putShort((short) strlen);
-    if (this.buffer.hasArray()) {
+    if (buffer.hasArray()) {
-      int pos = this.buffer.position();
-      str.getBytes(0, strlen, this.buffer.array(), this.buffer.arrayOffset() + pos);
-      this.buffer.position(pos + strlen);
+      int pos = buffer.position();
+      str.getBytes(0, strlen, buffer.array(), buffer.arrayOffset() + pos);
+      buffer.position(pos + strlen);
-        this.buffer.put((byte) str.charAt(i));
+        buffer.put((byte) str.charAt(i));
-      // byte[] bytes = new byte[strlen];
-      // str.getBytes(0, strlen, bytes, 0);
-      // this.buffer.put(bytes);
-    int utfSizeIdx = this.buffer.position();
+    int utfSizeIdx = buffer.position();
-      this.buffer.position(utfSizeIdx + 2);
+      buffer.position(utfSizeIdx + 2);
-        this.buffer.put((byte) c);
+        buffer.put((byte) c);
-        this.buffer.put((byte) (0xE0 | ((c >> 12) & 0x0F)));
-        this.buffer.put((byte) (0x80 | ((c >> 6) & 0x3F)));
-        this.buffer.put((byte) (0x80 | ((c >> 0) & 0x3F)));
+        buffer.put((byte) (0xE0 | ((c >> 12) & 0x0F)));
+        buffer.put((byte) (0x80 | ((c >> 6) & 0x3F)));
+        buffer.put((byte) (0x80 | ((c >> 0) & 0x3F)));
-        this.buffer.put((byte) (0xC0 | ((c >> 6) & 0x1F)));
-        this.buffer.put((byte) (0x80 | ((c >> 0) & 0x3F)));
+        buffer.put((byte) (0xC0 | ((c >> 6) & 0x1F)));
+        buffer.put((byte) (0x80 | ((c >> 0) & 0x3F)));
-    int utflen = this.buffer.position() - utfSizeIdx;
+    int utflen = buffer.position() - utfSizeIdx;
-        this.buffer.position(utfSizeIdx);
+        buffer.position(utfSizeIdx);
-      this.buffer.putShort(utfSizeIdx, (short) utflen);
+      buffer.putShort(utfSizeIdx, (short) utflen);
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.ignoreWrites)
+    if (ignoreWrites)
-    if (this.doNotCopy && remaining > MIN_TO_COPY) {
+    if (doNotCopy && remaining > MIN_TO_COPY) {
-      int remainingSpace = this.buffer.remaining();
+      int remainingSpace = buffer.remaining();
-        this.buffer.put(bb);
+        buffer.put(bb);
-      this.buffer.put(bb);
+      buffer.put(bb);
-      this.pos = bb.position();
+      pos = bb.position();
-      this.bb.putLong(this.pos, v);
+      bb.putLong(pos, v);
-      if (BufferDataOutputStream.this.chunks != null) {
-        this.chunkIt = BufferDataOutputStream.this.chunks.iterator();
+      if (chunks != null) {
+        chunkIt = chunks.iterator();
-        this.chunkIt = null;
-        this.bb = BufferDataOutputStream.this.buffer;
+        chunkIt = null;
+        bb = buffer;
-      if (this.chunkIt != null) {
-        if (this.chunkIt.hasNext()) {
-          this.bb = this.chunkIt.next();
+      if (chunkIt != null) {
+        if (chunkIt.hasNext()) {
+          bb = chunkIt.next();
-          this.chunkIt = null;
-          this.bb = BufferDataOutputStream.this.buffer;
+          chunkIt = null;
+          bb = buffer;
-        this.bb = null; // EOF
+        bb = null; // EOF
-        int remaining = this.bb.limit() - this.bb.position();
+        int remaining = bb.limit() - bb.position();
-          remaining = this.bb.limit() - this.bb.position();
+          remaining = bb.limit() - bb.position();
-        return this.bb.get() & 0xFF; // fix for bug 37068
+        return bb.get() & 0xFF; // fix for bug 37068
-        while (len > 0 && this.bb != null) {
-          if (this.bb.limit() == this.bb.position()) {
+        while (len > 0 && bb != null) {
+          if (bb.limit() == bb.position()) {
-            int remaining = this.bb.limit() - this.bb.position();
+            int remaining = bb.limit() - bb.position();
-            this.bb.get(dst, off, bytesToRead);
+            bb.get(dst, off, bytesToRead);
-        this.chunkIt = null;
-        this.bb = null;
+        chunkIt = null;
+        bb = null;
-      int remaining = this.bb.limit() - this.bb.position();
+      int remaining = bb.limit() - bb.position();
-        this.bb.position(this.bb.limit());
+        bb.position(bb.limit());
-        this.bb.position(this.bb.position() + (int) n);
+        bb.position(bb.position() + (int) n);
-      BufferDataOutputStream.this.size -= c;
+      size -= c;
