GEODE-8337: git mv Version.java->KnownVersion.java

+import org.apache.geode.internal.serialization.KnownVersion;
-import org.apache.geode.internal.serialization.Version;
-  private static final Version[] dsfidVersions = new Version[] {
-      Version.GFE_71, Version.GFE_90};
+  private static final KnownVersion[] dsfidVersions = new KnownVersion[] {
+      KnownVersion.GFE_71, KnownVersion.GFE_90};
-      if (version != Version.CURRENT.ordinal()) {
+      if (version != KnownVersion.CURRENT.ordinal()) {
-      Version v = StaticSerialization.getVersionForDataStreamOrNull(in);
+      KnownVersion v = StaticSerialization.getVersionForDataStreamOrNull(in);
-      return Version.CURRENT_ORDINAL;
+      return KnownVersion.CURRENT_ORDINAL;
-    if (version >= Version.GFE_90.ordinal()) {
+    if (version >= KnownVersion.GFE_90.ordinal()) {
-    if (memberData.getVersionOrdinal() >= Version.GFE_90.ordinal()) {
+    if (memberData.getVersionOrdinal() >= KnownVersion.GFE_90.ordinal()) {
-    if (memberData.getVersionOrdinal() >= Version.GFE_90.ordinal()) {
+    if (memberData.getVersionOrdinal() >= KnownVersion.GFE_90.ordinal()) {
-    if (StaticSerialization.getVersionForDataStream(in) == Version.GFE_90) {
+    if (StaticSerialization.getVersionForDataStream(in) == KnownVersion.GFE_90) {
-    Version outputVersion = StaticSerialization.getVersionForDataStream(out);
-    if (outputVersion.isOlderThan(Version.GEODE_1_1_0)
-        && outputVersion.isNotOlderThan(Version.GFE_90)) {
+    KnownVersion outputVersion = StaticSerialization.getVersionForDataStream(out);
+    if (outputVersion.isOlderThan(KnownVersion.GEODE_1_1_0)
+        && outputVersion.isNotOlderThan(KnownVersion.GFE_90)) {
-    if (version != Version.CURRENT.ordinal()) {
+    if (version != KnownVersion.CURRENT.ordinal()) {
-  public void setVersionObjectForTest(Version v) {
+  public void setVersionObjectForTest(KnownVersion v) {
-  public Version[] getSerializationVersions() {
+  public KnownVersion[] getSerializationVersions() {
