GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-            LocalizedStrings.Oplog_PreAllocate_Failure_Init.toLocalizedString(this.dirHolder,
+            String.format("Could not create and pre grow file in dir %s with size=%s",
+                this.dirHolder,
-          LocalizedStrings.Oplog_FAILED_CREATING_OPERATION_LOG_BECAUSE_0.toLocalizedString(ex),
+          String.format("Failed creating operation log because:  %s", ex),
-          LocalizedStrings.Oplog_FAILED_CREATING_OPERATION_LOG_BECAUSE_0.toLocalizedString(ex),
+          String.format("Failed creating operation log because:  %s", ex),
-          LocalizedStrings.Oplog_FAILED_CREATING_OPERATION_LOG_BECAUSE_0.toLocalizedString(ex),
+          String.format("Failed creating operation log because:  %s", ex),
-        logger.warn(
-            LocalizedMessage.create(LocalizedStrings.Oplog_Close_Failed, olf.f.getAbsolutePath()),
+        logger.warn(String.format("Failed to close file %s", olf.f.getAbsolutePath()),
-          LocalizedStrings.Oplog_COULD_NOT_DELETE__0_.toLocalizedString(olf.f.getAbsolutePath()),
+          String.format("Could not delete %s.", olf.f.getAbsolutePath()),
-         * (LocalizedStrings.Oplog_COULD_NOT_DELETE__0_.toLocalizedString (olf.f.getAbsolutePath()),
+         * (String.format("Could not delete %s.",.toLocalizedString (olf.f.getAbsolutePath()),
-        throw new DiskAccessException(LocalizedStrings.Oplog_PreAllocate_Failure
-            .toLocalizedString(olf.f.getAbsolutePath(), maxSize), ioe, getParent());
+        throw new DiskAccessException(String.format("Could not pre-allocate file %s with size=%s",
+            olf.f.getAbsolutePath(), maxSize), ioe, getParent());
-          LocalizedStrings.Oplog_PreAllocate_Failure.toLocalizedString(olf.f.getAbsolutePath(),
+          String.format("Could not pre-allocate file %s with size=%s", olf.f.getAbsolutePath(),
-    logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_CREATE_0_1_2,
-        new Object[] {toString(), getFileType(this.crf), getParent().getName()}));
+    logger.info("Created {} {} for disk store {}.",
+        new Object[] {toString(), getFileType(this.crf), getParent().getName()});
-    logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_CREATE_0_1_2,
-        new Object[] {toString(), getFileType(this.drf), getParent().getName()}));
+    logger.info("Created {} {} for disk store {}.",
+        new Object[] {toString(), getFileType(this.drf), getParent().getName()});
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.Oplog_OPLOGBASICGET_ERROR_IN_READING_THE_DATA_FROM_DISK_FOR_DISK_ID_HAVING_DATA_AS_0,
-          id), dae);
+      logger.error("Oplog::basicGet: Error in reading the data from disk for Disk ID " +
+          id,
+          dae);
-          LocalizedStrings.Oplog_NO_VALUE_WAS_FOUND_FOR_ENTRY_WITH_DISK_ID_0_ON_A_REGION_WITH_SYNCHRONOUS_WRITING_SET_TO_1
-              .toLocalizedString(new Object[] {id, dr.isSync()}));
+          String.format(
+              "No value was found for entry with disk Id  %s on a region  with synchronous writing set to %s",
+              new Object[] {id, dr.isSync()}));
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.Oplog_OPLOGGETNOBUFFEREXCEPTION_IN_RETRIEVING_VALUE_FROM_DISK_FOR_DISKID_0,
-          id), dae);
+      logger.error("Oplog::getNoBuffer:Exception in retrieving value from disk for diskId=" +
+          id,
+          dae);
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.Oplog_OPLOGGETNOBUFFEREXCEPTION_IN_RETRIEVING_VALUE_FROM_DISK_FOR_DISKID_0,
-          id), ise);
+      logger.error("Oplog::getNoBuffer:Exception in retrieving value from disk for diskId=" +
+          id,
+          ise);
-      logger.info(LocalizedMessage.create(LocalizedStrings.DiskRegion_RECOVERING_OPLOG_0_1_2,
-          new Object[] {toString(), drfFile.getAbsolutePath(), getParent().getName()}));
+      logger.info("Recovering {} {} for disk store {}.",
+          new Object[] {toString(), drfFile.getAbsolutePath(), getParent().getName()});
-                    LocalizedStrings.Oplog_UNKNOWN_OPCODE_0_FOUND_IN_DISK_OPERATION_LOG
-                        .toLocalizedString(opCode),
+                    String.format("Unknown opCode  %s  found in disk operation log.",
+                        opCode),
-            LocalizedStrings.Oplog_FAILED_READING_FILE_DURING_RECOVERY_FROM_0
-                .toLocalizedString(drfFile.getPath()),
+            String.format("Failed to read file during recovery from %s",
+                drfFile.getPath()),
-      logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_REMOVING_INCOMPLETE_KRF,
-          new Object[] {f.getName(), this.oplogId, getParent().getName()}));
+      logger.info("Removing incomplete krf {} for oplog {}, disk store {}",
+          new Object[] {f.getName(), this.oplogId, getParent().getName()});
-      logger.info(LocalizedMessage.create(LocalizedStrings.DiskRegion_RECOVERING_OPLOG_0_1_2,
-          new Object[] {toString(), f.getAbsolutePath(), getParent().getName()}));
+      logger.info("Recovering {} {} for disk store {}.",
+          new Object[] {toString(), f.getAbsolutePath(), getParent().getName()});
-                    LocalizedStrings.Oplog_DUPLICATE_CREATE.toLocalizedString(oplogKeyId));
+                    String.format(
+                        "Oplog::readNewEntry: Create is present in more than one Oplog. This should not be possible. The Oplog Key ID for this entry is {0,number,#}.",
+                        oplogKeyId));
-                  LocalizedStrings.Oplog_UNKNOWN_OPCODE_0_FOUND_IN_DISK_OPERATION_LOG
-                      .toLocalizedString(opCode),
+                  String.format("Unknown opCode  %s  found in disk operation log.",
+                      opCode),
-          LocalizedStrings.Oplog_FAILED_READING_FILE_DURING_RECOVERY_FROM_0
-              .toLocalizedString(this.crf.f.getPath()),
+          String.format("Failed to read file during recovery from %s",
+              this.crf.f.getPath()),
-            LocalizedStrings.Oplog_UNKNOWN_OPCODE_0_FOUND_IN_DISK_OPERATION_LOG
-                .toLocalizedString(opCode),
+            String.format("Unknown opCode  %s  found in disk operation log.",
+                opCode),
-            LocalizedStrings.Oplog_UNKNOWN_OPCODE_0_FOUND_IN_DISK_OPERATION_LOG
-                .toLocalizedString(opCode),
+            String.format("Unknown opCode  %s  found in disk operation log.",
+                opCode),
-          LocalizedStrings.Oplog_UNEXPECTED_PRODUCT_VERSION_0.toLocalizedString(ver), e,
+          String.format("Unknown version ordinal %s found when recovering Oplogs", ver), e,
-        logger.info(LocalizedMessage.create(LocalizedStrings.DiskRegion_RECOVERING_OPLOG_0_1_2,
-            new Object[] {toString(), crfFile.getAbsolutePath(), getParent().getName()}));
+        logger.info("Recovering {} {} for disk store {}.",
+            new Object[] {toString(), crfFile.getAbsolutePath(), getParent().getName()});
-        logger.warn(LocalizedMessage.create(LocalizedStrings.Oplog_PARTIAL_RECORD));
+        logger.warn(
+            "Detected a partial record in oplog file. Partial records can be caused by an abnormal shutdown in which case this warning can be safely ignored. They can also be caused by the oplog file being corrupted.");
-                  LocalizedStrings.Oplog_DUPLICATE_CREATE.toLocalizedString(oplogKeyId));
+                  String.format(
+                      "Oplog::readNewEntry: Create is present in more than one Oplog. This should not be possible. The Oplog Key ID for this entry is {0,number,#}.",
+                      oplogKeyId));
-              LocalizedStrings.Oplog_DUPLICATE_CREATE.toLocalizedString(oplogKeyId));
+              String.format(
+                  "Oplog::readNewEntry: Create is present in more than one Oplog. This should not be possible. The Oplog Key ID for this entry is {0,number,#}.",
+                  oplogKeyId));
-        throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0
-            .toLocalizedString(this.diskFile.getPath()), ex, region.getFullPath());
+        throw new DiskAccessException(String.format("Failed writing key to %s",
+            this.diskFile.getPath()), ex, region.getFullPath());
-            LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING
-                .toLocalizedString(this.diskFile.getPath()),
+            String.format(
+                "Failed writing key to %s due to failure in acquiring read lock for asynch writing",
+                this.diskFile.getPath()),
-          LocalizedStrings.Oplog_OPERATION_SIZE_CANNOT_EXCEED_THE_MAXIMUM_DIRECTORY_SIZE_SWITCHING_PROBLEM_FOR_ENTRY_HAVING_DISKID_0
-              .toLocalizedString((entryCausingSwitch != null
+          String.format(
+              "Operation size cannot exceed the maximum directory size. Switching problem for entry having DiskID=%s",
+              (entryCausingSwitch != null
-        logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_CREATE_0_1_2,
-            new Object[] {toString(), "krf", getParent().getName()}));
+        logger.info("Created {} {} for disk store {}.",
+            new Object[] {toString(), "krf", getParent().getName()});
-            throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0
-                .toLocalizedString(this.diskFile.getPath()), ex, dr.getName());
+            throw new DiskAccessException(String.format("Failed writing key to %s",
+                this.diskFile.getPath()), ex, dr.getName());
-                LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING
-                    .toLocalizedString(this.diskFile.getPath()),
+                String.format(
+                    "Failed writing key to %s due to failure in acquiring read lock for asynch writing",
+                    this.diskFile.getPath()),
-        throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0
-            .toLocalizedString(this.diskFile.getPath()), ex, region.getFullPath());
+        throw new DiskAccessException(String.format("Failed writing key to %s",
+            this.diskFile.getPath()), ex, region.getFullPath());
-            LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING
-                .toLocalizedString(this.diskFile.getPath()),
+            String.format(
+                "Failed writing key to %s due to failure in acquiring read lock for asynch writing",
+                this.diskFile.getPath()),
-          LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0.toLocalizedString(this.diskFile.getPath()),
+          String.format("Failed writing key to %s", this.diskFile.getPath()),
-          LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING
-              .toLocalizedString(this.diskFile.getPath()),
+          String.format(
+              "Failed writing key to %s due to failure in acquiring read lock for asynch writing",
+              this.diskFile.getPath()),
-        throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_CONFLICT_VERSION_TAG_0
-            .toLocalizedString(this.diskFile.getPath()), ex, region.getFullPath());
+        throw new DiskAccessException(String.format("Failed writing conflict version tag to %s",
+            this.diskFile.getPath()), ex, region.getFullPath());
-        throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_CONFLICT_VERSION_TAG_0
-            .toLocalizedString(this.diskFile.getPath()), ie, region.getFullPath());
+        throw new DiskAccessException(String.format("Failed writing conflict version tag to %s",
+            this.diskFile.getPath()), ie, region.getFullPath());
-          LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0.toLocalizedString(this.diskFile.getPath()),
+          String.format("Failed writing key to %s", this.diskFile.getPath()),
-          LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING
-              .toLocalizedString(this.diskFile.getPath()),
+          String.format(
+              "Failed writing key to %s due to failure in acquiring read lock for asynch writing",
+              this.diskFile.getPath()),
-        throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0
-            .toLocalizedString(this.diskFile.getPath()), ex, getParent());
+        throw new DiskAccessException(String.format("Failed writing key to %s",
+            this.diskFile.getPath()), ex, getParent());
-            LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING
-                .toLocalizedString(this.diskFile.getPath()),
+            String.format(
+                "Failed writing key to %s due to failure in acquiring read lock for asynch writing",
+                this.diskFile.getPath()),
-        throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0
-            .toLocalizedString(this.diskFile.getPath()), ex, dr.getName());
+        throw new DiskAccessException(String.format("Failed writing key to %s",
+            this.diskFile.getPath()), ex, dr.getName());
-            LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0_DUE_TO_FAILURE_IN_ACQUIRING_READ_LOCK_FOR_ASYNCH_WRITING
-                .toLocalizedString(this.diskFile.getPath()),
+            String.format(
+                "Failed writing key to %s due to failure in acquiring read lock for asynch writing",
+                this.diskFile.getPath()),
-            throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_RECORDING_RVV_BECAUSE_OF_0
-                .toLocalizedString(this.diskFile.getPath()), ex, dr.getName());
+            throw new DiskAccessException(String.format(
+                "Failed in persisting the garbage collection of entries because of: %s",
+                this.diskFile.getPath()), ex, dr.getName());
-            throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_RECORDING_RVV_BECAUSE_OF_0
-                .toLocalizedString(this.diskFile.getPath()), ex, dr.getName());
+            throw new DiskAccessException(String.format(
+                "Failed in persisting the garbage collection of entries because of: %s",
+                this.diskFile.getPath()), ex, dr.getName());
-          LocalizedStrings.Oplog_FAILED_WRITING_KEY_TO_0.toLocalizedString(this.diskFile.getPath()),
+          String.format("Failed writing key to %s", this.diskFile.getPath()),
-                  LocalizedStrings.Oplog_TRIED_TO_SEEK_TO_0_BUT_THE_FILE_LENGTH_IS_1_OPLOG_FILE_OBJECT_USED_FOR_READING_2
-                      .toLocalizedString(offsetInOplog + valueLength, writePosition, this.crf.raf),
+                  String.format(
+                      "Tried to seek to %s, but the file length is %s. Oplog File object used for reading=%s",
+                      offsetInOplog + valueLength, writePosition, this.crf.raf),
-                  LocalizedStrings.Oplog_CANNOT_FIND_RECORD_0_WHEN_READING_FROM_1
-                      .toLocalizedString(offsetInOplog, this.diskFile.getPath()),
+                  String.format("Cannot find record  %s  when reading from %s",
+                      offsetInOplog, this.diskFile.getPath()),
-            LocalizedStrings.Oplog_FAILED_READING_FROM_0_OPLOGID_1_OFFSET_BEING_READ_2_CURRENT_OPLOG_SIZE_3_ACTUAL_FILE_SIZE_4_IS_ASYNCH_MODE_5_IS_ASYNCH_WRITER_ALIVE_6
-                .toLocalizedString(this.diskFile.getPath(), this.oplogId, offsetInOplog,
-                    this.crf.currSize, this.crf.bytesFlushed, !dr.isSync(), Boolean.FALSE),
+            String.format(
+                "Failed reading from %s.  oplogID, %s  Offset being read= %s Current Oplog Size= %s Actual File Size, %s IS ASYNCH MODE, %s IS ASYNCH WRITER ALIVE= %s",
+                this.diskFile.getPath(), this.oplogId, offsetInOplog,
+                this.crf.currSize, this.crf.bytesFlushed, !dr.isSync(), Boolean.FALSE),
-                LocalizedStrings.Oplog_TRIED_TO_SEEK_TO_0_BUT_THE_FILE_LENGTH_IS_1_OPLOG_FILE_OBJECT_USED_FOR_READING_2
-                    .toLocalizedString(offsetInOplog + valueLength, writePosition, this.crf.raf),
+                String.format(
+                    "Tried to seek to %s, but the file length is %s. Oplog File object used for reading=%s",
+                    offsetInOplog + valueLength, writePosition, this.crf.raf),
-                LocalizedStrings.Oplog_CANNOT_FIND_RECORD_0_WHEN_READING_FROM_1
-                    .toLocalizedString(offsetInOplog, this.diskFile.getPath()),
+                String.format("Cannot find record  %s  when reading from %s",
+                    offsetInOplog, this.diskFile.getPath()),
-            LocalizedStrings.Oplog_FAILED_READING_FROM_0_OPLOG_DETAILS_1_2_3_4_5_6
-                .toLocalizedString(this.diskFile.getPath(), this.oplogId, offsetInOplog,
-                    this.crf.currSize, this.crf.bytesFlushed, Boolean.FALSE, Boolean.FALSE),
+            String.format(
+                "Failed reading from %s.  oplogID, %s Offset being read=%s Current Oplog Size=%s  Actual File Size,%s IS ASYNCH MODE,%s IS ASYNCH WRITER ALIVE=%s",
+                this.diskFile.getPath(), this.oplogId, offsetInOplog,
+                this.crf.currSize, this.crf.bytesFlushed, Boolean.FALSE, Boolean.FALSE),
-              logger.warn(LocalizedMessage.create(LocalizedStrings.Oplog_DELETE_FAIL_0_1_2,
-                  new Object[] {Oplog.this.toString(), "krf", getParent().getName()}));
+              logger.warn("Could not delete the file {} {} for disk store {}.",
+                  new Object[] {Oplog.this.toString(), "krf", getParent().getName()});
-            logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_DELETE_0_1_2,
-                new Object[] {Oplog.this.toString(), "krf", getParent().getName()}));
+            logger.info("Deleted {} {} for disk store {}.",
+                new Object[] {Oplog.this.toString(), "krf", getParent().getName()});
-            logger.warn(LocalizedMessage.create(LocalizedStrings.Oplog_DELETE_FAIL_0_1_2,
-                new Object[] {Oplog.this.toString(), getFileType(olf), getParent().getName()}));
+            logger.warn("Could not delete the file {} {} for disk store {}.",
+                Oplog.this.toString(), getFileType(olf),
+                getParent().getName());
-            logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_DELETE_0_1_2,
-                new Object[] {Oplog.this.toString(), getFileType(olf), getParent().getName()}));
+            logger.info("Deleted {} {} for disk store {}.",
+                Oplog.this.toString(), getFileType(olf), getParent().getName());
-        logger.info(LocalizedMessage.create(LocalizedStrings.Oplog_CLOSING_EMPTY_OPLOG_0_1,
-            new Object[] {getParent().getName(), toString()}));
+        logger.info("Closing {} early since it is empty. It is for disk store {}.",
+            new Object[] {getParent().getName(), toString()});
