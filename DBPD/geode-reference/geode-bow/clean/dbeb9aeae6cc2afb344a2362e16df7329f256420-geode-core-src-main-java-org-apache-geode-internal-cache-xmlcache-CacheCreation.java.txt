Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Represents a {@link Cache} that is created declaratively.  Notice
- * that it implements the {@link Cache} interface so that this class
- * must be updated when {@link Cache} is modified.  This class is
- * public for testing purposes.
+ * Represents a {@link Cache} that is created declaratively. Notice that it implements the
+ * {@link Cache} interface so that this class must be updated when {@link Cache} is modified. This
+ * class is public for testing purposes.
-  
+
-  
+
-  private final Map<Declarable, Properties> declarablePropertiesMap = new HashMap<Declarable, Properties>();
-  
-  private Set<GatewaySender> gatewaySenders = new HashSet<GatewaySender>(); 
-  
+  private final Map<Declarable, Properties> declarablePropertiesMap =
+      new HashMap<Declarable, Properties>();
+
+  private Set<GatewaySender> gatewaySenders = new HashSet<GatewaySender>();
+
-  
+
-  
+
-  
+
-//  private static Context ctx;
+  // private static Context ctx;
-  /** The names of the region attributes in the order in which they
-   * were added.  Keeping track of this ensures that named region
-   * attributes are processed in the correct order.  That is, "parent"
-   * named region attributes will be processed before "children" named
-   * region attributes. */
+  /**
+   * The names of the region attributes in the order in which they were added. Keeping track of this
+   * ensures that named region attributes are processed in the correct order. That is, "parent"
+   * named region attributes will be processed before "children" named region attributes.
+   */
-  /** The named disk store attributes associated with this cache.
-   * Made this linked so its iteration would be in insert order.
-   * This is important for unit testing 44914.
+  /**
+   * The named disk store attributes associated with this cache. Made this linked so its iteration
+   * would be in insert order. This is important for unit testing 44914.
-  private InternalLogWriter logWriter =
-    new LocalLogWriter(InternalLogWriter.ALL_LEVEL, System.out);
+  private InternalLogWriter logWriter = new LocalLogWriter(InternalLogWriter.ALL_LEVEL, System.out);
-  private InternalLogWriter securityLogWriter =
-      LogWriterFactory.toSecurityLogWriter(logWriter);
-  
+  private InternalLogWriter securityLogWriter = LogWriterFactory.toSecurityLogWriter(logWriter);
+
+   * 
-  ////////////////////////  Constructors  ////////////////////////
+  //////////////////////// Constructors ////////////////////////
-  
+
-   * @param forParsing if true then this creation is used for parsing xml;
-   *   if false then it is used for generating xml.
+   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
+   *        for generating xml.
+
-  
-  //////////////////////  Instance Methods  //////////////////////
+
+  ////////////////////// Instance Methods //////////////////////
-    
+
-   * @throws RegionExistsException
-   *         If this cache already contains a region with the same
-   *         name as <code>root</code>.
+   * @throws RegionExistsException If this cache already contains a region with the same name as
+   *         <code>root</code>.
-  void addRootRegion(RegionCreation root)
-    throws RegionExistsException {
+  void addRootRegion(RegionCreation root) throws RegionExistsException {
-  public int getMessageSyncInterval()
-  {
+  public int getMessageSyncInterval() {
-  public void setMessageSyncInterval(int seconds)
-  {
+  public void setMessageSyncInterval(int seconds) {
-      throw new IllegalArgumentException(LocalizedStrings.CacheCreation_THE_MESSAGESYNCINTERVAL_PROPERTY_FOR_CACHE_CANNOT_BE_NEGATIVE.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.CacheCreation_THE_MESSAGESYNCINTERVAL_PROPERTY_FOR_CACHE_CANNOT_BE_NEGATIVE
+              .toLocalizedString());
-  boolean hasMessageSyncInterval()
-  {
+  boolean hasMessageSyncInterval() {
-  
+
-   * Store the current CacheCreation that is doing a create.
-   * Used from PoolManager to defer to CacheCreation as a manager of pools.
+   * Store the current CacheCreation that is doing a create. Used from PoolManager to defer to
+   * CacheCreation as a manager of pools.
+   * 
-   * Returns null if the current thread is not doing a CacheCreation create.
-   * Otherwise returns the PoolManagerImpl of the CacheCreation of the
-   * create being invoked.
+   * Returns null if the current thread is not doing a CacheCreation create. Otherwise returns the
+   * PoolManagerImpl of the CacheCreation of the create being invoked.
+   * 
-    return (PoolManagerImpl)createInProgress.get();
+    return (PoolManagerImpl) createInProgress.get();
-  
+
-   * Fills in the contents of a {@link Cache} based on this creation
-   * object's state.
+   * Fills in the contents of a {@link Cache} based on this creation object's state.
-    throws TimeoutException, CacheWriterException,
-           GatewayException,
-           RegionExistsException {
+      throws TimeoutException, CacheWriterException, GatewayException, RegionExistsException {
-    
+
-      throw new IllegalStateException("You must use client-cache in the cache.xml when ClientCacheFactory is used.");
+      throw new IllegalStateException(
+          "You must use client-cache in the cache.xml when ClientCacheFactory is used.");
-//    if (this.hasCopyOnRead()) {
-//      cache.setCopyOnRead(this.copyOnRead);
-//    }
+    // if (this.hasCopyOnRead()) {
+    // cache.setCopyOnRead(this.copyOnRead);
+    // }
-          Pool cp = (Pool)it.next();
+          Pool cp = (Pool) it.next();
-          f = (PoolFactoryImpl)PoolManager.createFactory();
+          f = (PoolFactoryImpl) PoolManager.createFactory();
-          PoolImpl p = (PoolImpl)f.create(cp.getName());
+          PoolImpl p = (PoolImpl) f.create(cp.getName());
-    
+
-    
+
-    
+
-    if (this.txMgrCreation != null &&
-        this.txMgrCreation.getListeners().length > 0 &&
-        cache.getCacheTransactionManager()!=null) {
+    if (this.txMgrCreation != null && this.txMgrCreation.getListeners().length > 0
+        && cache.getCacheTransactionManager() != null) {
-    if (this.txMgrCreation != null &&
-        cache.getCacheTransactionManager()!=null) {
+    if (this.txMgrCreation != null && cache.getCacheTransactionManager() != null) {
-    
+
-      GatewaySenderFactory factory = (GatewaySenderFactory)cache
-          .createGatewaySenderFactory();
-      ((InternalGatewaySenderFactory)factory).configureGatewaySender(senderCreation);
-      GatewaySender gatewaySender = factory.create(senderCreation.getId(),
-          senderCreation.getRemoteDSId());
+      GatewaySenderFactory factory = (GatewaySenderFactory) cache.createGatewaySenderFactory();
+      ((InternalGatewaySenderFactory) factory).configureGatewaySender(senderCreation);
+      GatewaySender gatewaySender =
+          factory.create(senderCreation.getId(), senderCreation.getRemoteDSId());
-        cache
-            .getLoggerI18n()
-            .info(
-                LocalizedStrings.CacheCreation_0_IS_NOT_BEING_STARTED_SINCE_IT_IS_CONFIGURED_FOR_MANUAL_START,
-                gatewaySender);
+        cache.getLoggerI18n().info(
+            LocalizedStrings.CacheCreation_0_IS_NOT_BEING_STARTED_SINCE_IT_IS_CONFIGURED_FOR_MANUAL_START,
+            gatewaySender);
-    
+
-      AsyncEventQueueFactoryImpl asyncQueueFactory = 
-        (AsyncEventQueueFactoryImpl) cache.createAsyncEventQueueFactory();
+      AsyncEventQueueFactoryImpl asyncQueueFactory =
+          (AsyncEventQueueFactoryImpl) cache.createAsyncEventQueueFactory();
-      
+
-//      AsyncEventQueue asyncEventQueue = 
-//        asyncQueueFactory.create(asyncEventQueueCreation.getId(), asyncEventQueueCreation.getAsyncEventListener());
+      // AsyncEventQueue asyncEventQueue =
+      // asyncQueueFactory.create(asyncEventQueueCreation.getId(),
+      // asyncEventQueueCreation.getAsyncEventListener());
-        asyncQueueFactory.create(asyncEventQueueCreation.getId(), asyncEventQueueCreation.getAsyncEventListener());
+        asyncQueueFactory.create(asyncEventQueueCreation.getId(),
+            asyncEventQueueCreation.getAsyncEventListener());
-    
+
-    
-    for (Iterator iter = this.regionAttributesNames.iterator();
-         iter.hasNext(); ) {
+
+    for (Iterator iter = this.regionAttributesNames.iterator(); iter.hasNext();) {
-      RegionAttributesCreation creation =
-        (RegionAttributesCreation) getRegionAttributes(id);
+      RegionAttributesCreation creation = (RegionAttributesCreation) getRegionAttributes(id);
-    startCacheServers(this.getCacheServers(), cache, serverPort, serverBindAdd, disableDefaultServer);
+    startCacheServers(this.getCacheServers(), cache, serverPort, serverBindAdd,
+        disableDefaultServer);
-      factory.setMaximumTimeBetweenPings(receiverCreation
-          .getMaximumTimeBetweenPings());
+      factory.setMaximumTimeBetweenPings(receiverCreation.getMaximumTimeBetweenPings());
-      for (GatewayTransportFilter filter : receiverCreation
-          .getGatewayTransportFilters()) {
+      for (GatewayTransportFilter filter : receiverCreation.getGatewayTransportFilters()) {
-        cache
-            .getLoggerI18n()
-            .info(
-                LocalizedStrings.CacheCreation_0_IS_NOT_BEING_STARTED_SINCE_IT_IS_CONFIGURED_FOR_MANUAL_START,
-                receiver);
+        cache.getLoggerI18n().info(
+            LocalizedStrings.CacheCreation_0_IS_NOT_BEING_STARTED_SINCE_IT_IS_CONFIGURED_FOR_MANUAL_START,
+            receiver);
-    
+
-      RegionCreation r = (RegionCreation)it.next();
+      RegionCreation r = (RegionCreation) it.next();
-   * starts declarative cache servers if a server is not running on the port already.
-   * Also adds a default server to the param declarativeCacheServers if a serverPort is specified.
+   * starts declarative cache servers if a server is not running on the port already. Also adds a
+   * default server to the param declarativeCacheServers if a serverPort is specified.
-  protected void startCacheServers(List declarativeCacheServers, Cache cache, Integer serverPort, String serverBindAdd, Boolean disableDefaultServer) {
+  protected void startCacheServers(List declarativeCacheServers, Cache cache, Integer serverPort,
+      String serverBindAdd, Boolean disableDefaultServer) {
-    
-    if (declarativeCacheServers.size() > 1
-        && (serverPort != null || serverBindAdd != null)) {
+
+    if (declarativeCacheServers.size() > 1 && (serverPort != null || serverBindAdd != null)) {
-    if (declarativeCacheServers.isEmpty()
-        && (serverPort != null || serverBindAdd != null)
+    if (declarativeCacheServers.isEmpty() && (serverPort != null || serverBindAdd != null)
-        for(CacheServer cacheServer : cacheServers) {
+        for (CacheServer cacheServer : cacheServers) {
-      
+
-        defaultServer = new CacheServerCreation((GemFireCacheImpl)cache, false);
+        defaultServer = new CacheServerCreation((GemFireCacheImpl) cache, false);
-    
+
-      CacheServerCreation declaredCacheServer = (CacheServerCreation)iter.next();
+      CacheServerCreation declaredCacheServer = (CacheServerCreation) iter.next();
-      CacheServerImpl impl = (CacheServerImpl)cache.addCacheServer();
+      CacheServerImpl impl = (CacheServerImpl) cache.addCacheServer();
-      
+
-      }
-      catch (IOException ex) {
+      } catch (IOException ex) {
-            LocalizedStrings.CacheCreation_WHILE_STARTING_CACHE_SERVER_0
-                .toLocalizedString(impl), ex);
+            LocalizedStrings.CacheCreation_WHILE_STARTING_CACHE_SERVER_0.toLocalizedString(impl),
+            ex);
-      pdxRegDSC = (DiskStoreAttributesCreation)this.diskStores.get(pdxRegDsName);
+      pdxRegDSC = (DiskStoreAttributesCreation) this.diskStores.get(pdxRegDsName);
-  
+
-   * Returns whether or not this <code>CacheCreation</code> is
-   * equivalent to another <code>Cache</code>.
+   * Returns whether or not this <code>CacheCreation</code> is equivalent to another
+   * <code>Cache</code>.
-    boolean sameConfig =
-      other.getLockLease() == this.getLockLease() &&
-      other.getLockTimeout() == this.getLockTimeout() &&
-      other.getSearchTimeout() == this.getSearchTimeout() &&
-      other.getMessageSyncInterval() == this.getMessageSyncInterval() &&
-      other.getCopyOnRead() == this.getCopyOnRead() &&
-      other.isServer() == this.isServer();
+    boolean sameConfig = other.getLockLease() == this.getLockLease()
+        && other.getLockTimeout() == this.getLockTimeout()
+        && other.getSearchTimeout() == this.getSearchTimeout()
+        && other.getMessageSyncInterval() == this.getMessageSyncInterval()
+        && other.getCopyOnRead() == this.getCopyOnRead() && other.isServer() == this.isServer();
-          drc2 = ((CacheCreation)other).getDynamicRegionFactoryConfig();
+          drc2 = ((CacheCreation) other).getDynamicRegionFactoryConfig();
-          if (((CacheCreation)other).getDynamicRegionFactoryConfig() != null) {
+          if (((CacheCreation) other).getDynamicRegionFactoryConfig() != null) {
-        throw new RuntimeException(LocalizedStrings.CacheCreation_CACHESERVERS_SIZE.toLocalizedString());
+        throw new RuntimeException(
+            LocalizedStrings.CacheCreation_CACHESERVERS_SIZE.toLocalizedString());
-      for (Iterator myIter = myBridges.iterator(); myIter.hasNext(); ) {
-        CacheServerCreation myBridge =
-          (CacheServerCreation) myIter.next();
+      for (Iterator myIter = myBridges.iterator(); myIter.hasNext();) {
+        CacheServerCreation myBridge = (CacheServerCreation) myIter.next();
-        for (Iterator otherIter = otherBridges.iterator();
-             otherIter.hasNext(); ) {
+        for (Iterator otherIter = otherBridges.iterator(); otherIter.hasNext();) {
-          throw new RuntimeException(LocalizedStrings.CacheCreation_CACHE_SERVER_0_NOT_FOUND.toLocalizedString(myBridge));
+          throw new RuntimeException(
+              LocalizedStrings.CacheCreation_CACHE_SERVER_0_NOT_FOUND.toLocalizedString(myBridge));
-        Map m2 = (other instanceof CacheCreation)
-          ? ((CacheCreation)other).getPools()
-          : PoolManager.getAll();
+        Map m2 = (other instanceof CacheCreation) ? ((CacheCreation) other).getPools()
+            : PoolManager.getAll();
-            Pool cp = (Pool)it1.next();
-            if (((PoolImpl)cp).isUsedByGateway()) {
+            Pool cp = (Pool) it1.next();
+            if (((PoolImpl) cp).isUsedByGateway()) {
-            Pool cp = (Pool)it2.next();
-            if (((PoolImpl)cp).isUsedByGateway()) {
+            Pool cp = (Pool) it2.next();
+            if (((PoolImpl) cp).isUsedByGateway()) {
-          Pool p = (Pool)m2.values().iterator().next();
+          Pool p = (Pool) m2.values().iterator().next();
-        
+
-          throw new RuntimeException("pool sizes differ m1Size=" + m1Size
-                                     + " m2Size=" + m2Size
-                                     + " m1=" + m1.values()
-                                     + " m2=" + m2.values());
+          throw new RuntimeException("pool sizes differ m1Size=" + m1Size + " m2Size=" + m2Size
+              + " m1=" + m1.values() + " m2=" + m2.values());
-        
+
-            PoolImpl cp = (PoolImpl)it1.next();
+            PoolImpl cp = (PoolImpl) it1.next();
-      for (Iterator myIter = diskStores.values().iterator(); myIter.hasNext(); ) {
-        DiskStoreAttributesCreation dsac = (DiskStoreAttributesCreation)myIter.next();
+      for (Iterator myIter = diskStores.values().iterator(); myIter.hasNext();) {
+        DiskStoreAttributesCreation dsac = (DiskStoreAttributesCreation) myIter.next();
-          getLogger().fine("Disk store " + name+" not found.");
-          throw new RuntimeException(LocalizedStrings.CacheCreation_DISKSTORE_NOTFOUND_0.toLocalizedString(name));
+          getLogger().fine("Disk store " + name + " not found.");
+          throw new RuntimeException(
+              LocalizedStrings.CacheCreation_DISKSTORE_NOTFOUND_0.toLocalizedString(name));
-            throw new RuntimeException(LocalizedStrings.CacheCreation_ATTRIBUTES_FOR_DISKSTORE_0_DO_NOT_MATCH.toLocalizedString(name));
+            throw new RuntimeException(
+                LocalizedStrings.CacheCreation_ATTRIBUTES_FOR_DISKSTORE_0_DO_NOT_MATCH
+                    .toLocalizedString(name));
-        throw new RuntimeException(LocalizedStrings.CacheCreation_NAMEDATTRIBUTES_SIZE.toLocalizedString());
+        throw new RuntimeException(
+            LocalizedStrings.CacheCreation_NAMEDATTRIBUTES_SIZE.toLocalizedString());
-      for (Iterator myIter = myNamedAttributes.entrySet().iterator();
-           myIter.hasNext(); ) {
+      for (Iterator myIter = myNamedAttributes.entrySet().iterator(); myIter.hasNext();) {
-                          "Entry value is a " + myEntry.getValue().getClass().getName());
-        RegionAttributesCreation myAttrs =
-          (RegionAttributesCreation) myEntry.getValue();
+            "Entry value is a " + myEntry.getValue().getClass().getName());
+        RegionAttributesCreation myAttrs = (RegionAttributesCreation) myEntry.getValue();
-          throw new RuntimeException(LocalizedStrings.CacheCreation_NO_ATTRIBUTES_FOR_0.toLocalizedString(myId));
+          throw new RuntimeException(
+              LocalizedStrings.CacheCreation_NO_ATTRIBUTES_FOR_0.toLocalizedString(myId));
-            getLogger().fine("Attributes for " + myId +
-                             " do not match");
-            throw new RuntimeException(LocalizedStrings.CacheCreation_ATTRIBUTES_FOR_0_DO_NOT_MATCH.toLocalizedString(myId));
+            getLogger().fine("Attributes for " + myId + " do not match");
+            throw new RuntimeException(LocalizedStrings.CacheCreation_ATTRIBUTES_FOR_0_DO_NOT_MATCH
+                .toLocalizedString(myId));
-        RegionCreation r = (RegionCreation)it.next();
+        RegionCreation r = (RegionCreation) it.next();
-          throw new RuntimeException(LocalizedStrings.CacheCreation_NO_ROOT_0.toLocalizedString(r.getName()));
+          throw new RuntimeException(
+              LocalizedStrings.CacheCreation_NO_ROOT_0.toLocalizedString(r.getName()));
-          throw new RuntimeException(LocalizedStrings.CacheCreation_REGIONS_DIFFER.toLocalizedString());
+          throw new RuntimeException(
+              LocalizedStrings.CacheCreation_REGIONS_DIFFER.toLocalizedString());
-        List otherTxListeners =
-          Arrays.asList(other.getCacheTransactionManager().getListeners());
-        List thisTxListeners =
-          Arrays.asList(getCacheTransactionManager().getListeners());
+        List otherTxListeners = Arrays.asList(other.getCacheTransactionManager().getListeners());
+        List thisTxListeners = Arrays.asList(getCacheTransactionManager().getListeners());
-  //////////  Inherited methods that don't do anything  //////////
+  ////////// Inherited methods that don't do anything //////////
-//  public Region createRootRegion(RegionAttributes aRegionAttributes)
-//    throws RegionExistsException, TimeoutException  {
-//
-//    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-//  }
+  // public Region createRootRegion(RegionAttributes aRegionAttributes)
+  // throws RegionExistsException, TimeoutException {
+  //
+  // throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  // }
-  
+
-  
+
-  
+
-  
+
-  
+
-  public boolean isClosed(){
+  public boolean isClosed() {
-  
+
-    
+
-  public <K,V> RegionFactory<K,V> createRegionFactory(RegionShortcut atts) {
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  }
-  /**
-   * @since GemFire 6.5
-   */
-  public <K,V> RegionFactory<K,V> createRegionFactory() {
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  }
-  /**
-   * @since GemFire 6.5
-   */
-  public <K,V> RegionFactory<K,V> createRegionFactory(String regionAttributesId) {
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  }
-  /**
-   * @since GemFire 6.5
-   */
-  public <K,V> RegionFactory<K,V> createRegionFactory(RegionAttributes<K,V> regionAttributes) {
+  public <K, V> RegionFactory<K, V> createRegionFactory(RegionShortcut atts) {
-  public Region createVMRegion(String name, RegionAttributes attrs) throws RegionExistsException, TimeoutException {
+  /**
+   * @since GemFire 6.5
+   */
+  public <K, V> RegionFactory<K, V> createRegionFactory() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  /**
+   * @since GemFire 6.5
+   */
+  public <K, V> RegionFactory<K, V> createRegionFactory(String regionAttributesId) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  /**
+   * @since GemFire 6.5
+   */
+  public <K, V> RegionFactory<K, V> createRegionFactory(RegionAttributes<K, V> regionAttributes) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  public Region createVMRegion(String name, RegionAttributes attrs)
+      throws RegionExistsException, TimeoutException {
-  public Region createRegion(String name, RegionAttributes attrs) throws RegionExistsException, TimeoutException {
+
+  public Region createRegion(String name, RegionAttributes attrs)
+      throws RegionExistsException, TimeoutException {
-  public Region createRegion(String name, String refid) throws RegionExistsException, TimeoutException {
+
+  public Region createRegion(String name, String refid)
+      throws RegionExistsException, TimeoutException {
-    return (Region)this.roots.get(path);
+    return (Region) this.roots.get(path);
-  
+
-  
+
-  
-  public GatewaySender addGatewaySender(GatewaySender sender){
+
+  public GatewaySender addGatewaySender(GatewaySender sender) {
-  
-  public GatewayReceiver addGatewayReceiver(GatewayReceiver receiver){
+
+  public GatewayReceiver addGatewayReceiver(GatewayReceiver receiver) {
-  
+
-  
-  public Set<GatewaySender> getGatewaySenders(){
+
+  public Set<GatewaySender> getGatewaySenders() {
-      if (!((AbstractGatewaySender)sender).isForInternalUse()) {
+      if (!((AbstractGatewaySender) sender).isForInternalUse()) {
-  
+
-  
-//  public GatewayReceiver addGatewayReceiver(){
-//    GatewayReceiverCreation receiver = new GatewayReceiverCreation();
-//    this.gatewayReceivers.add(receiver);
-//    return receiver;
-//  }
-//  
-  public Set<GatewayReceiver>  getGatewayReceivers(){
+
+  // public GatewayReceiver addGatewayReceiver(){
+  // GatewayReceiverCreation receiver = new GatewayReceiverCreation();
+  // this.gatewayReceivers.add(receiver);
+  // return receiver;
+  // }
+  //
+  public Set<GatewayReceiver> getGatewayReceivers() {
-  
+
-  
+
-	if (!this.isServer) {  
-	  return (this.bridgeServers.size() > 0);
-	}
-	else {
-	  return true;	
-	}
+    if (!this.isServer) {
+      return (this.bridgeServers.size() > 0);
+    } else {
+      return true;
+    }
-  
+
+   * 
+   * 
-   * Adds a CacheTransactionManagerCreation for this Cache (really just a
-   * placeholder since a CacheTransactionManager is really a Cache singleton)
+   * Adds a CacheTransactionManagerCreation for this Cache (really just a placeholder since a
+   * CacheTransactionManager is really a Cache singleton)
+   * 
-  public void
-    addCacheTransactionManagerCreation(CacheTransactionManagerCreation txm) {
+  public void addCacheTransactionManagerCreation(CacheTransactionManagerCreation txm) {
-/**
- * @return Context jndi context associated with the Cache.
- */
+  /**
+   * @return Context jndi context associated with the Cache.
+   */
-  
+
-    return (DiskStore)this.diskStores.get(s);
+    return (DiskStore) this.diskStores.get(s);
+
-  
+
-//    Assert.assertTrue(ds instanceof DiskStoreAttributesCreation,
-//                      "Attributes are a " + ds.getClass().getName());
+    // Assert.assertTrue(ds instanceof DiskStoreAttributesCreation,
+    // "Attributes are a " + ds.getClass().getName());
-    throws TimeoutException, CacheWriterException,
-           RegionExistsException {
+      throws TimeoutException, CacheWriterException, RegionExistsException {
-  
+
+
+
+
+
-  
+
+
+
+
-  public FunctionService getFunctionService(){
+
+  public FunctionService getFunctionService() {
-  
+
-  
-  public GatewaySenderFactory createGatewaySenderFactory(){
+
+  public GatewaySenderFactory createGatewaySenderFactory() {
-  
+
-  
+
+
- public void setPdxSerializer(PdxSerializer serializer) {
-   cacheConfig.setPdxSerializer(serializer);
- }
+  public void setPdxSerializer(PdxSerializer serializer) {
+    cacheConfig.setPdxSerializer(serializer);
+  }
- public void setPdxDiskStore(String diskStore) {
-   cacheConfig.setPdxDiskStore(diskStore);
- }
+  public void setPdxDiskStore(String diskStore) {
+    cacheConfig.setPdxDiskStore(diskStore);
+  }
- public void setPdxPersistent(boolean persistent) {
-   cacheConfig.setPdxPersistent(persistent);
- }
-  
+  public void setPdxPersistent(boolean persistent) {
+    cacheConfig.setPdxPersistent(persistent);
+  }
+
+   * 
-     return cacheConfig.isPdxReadSerialized();
+    return cacheConfig.isPdxReadSerialized();
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  
+
+
-  
+
-  
+
-    
+
+
+
-  
+
-  
+
-    
+
-    public Index createHashIndex(String indexName, String indexedExpression,
-        String regionPath) throws IndexInvalidException,
-        IndexNameConflictException, IndexExistsException,
+    public Index createHashIndex(String indexName, String indexedExpression, String regionPath)
+        throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-    public Index createHashIndex(String indexName, String indexedExpression,
-        String regionPath, String imports) throws IndexInvalidException,
-        IndexNameConflictException, IndexExistsException,
-        RegionNotFoundException, UnsupportedOperationException {
+    public Index createHashIndex(String indexName, String indexedExpression, String regionPath,
+        String imports) throws IndexInvalidException, IndexNameConflictException,
+        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-    public Index createIndex(String indexName, IndexType indexType,
-        String indexedExpression, String fromClause)
-        throws IndexInvalidException, IndexNameConflictException,
-        IndexExistsException, RegionNotFoundException,
-        UnsupportedOperationException {
+    public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+        String fromClause) throws IndexInvalidException, IndexNameConflictException,
+        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-    /** 
-     * Due to not having the full implementation to determine region names etc
-     * this implementation will only match a single region with no alias at this time
+    /**
+     * Due to not having the full implementation to determine region names etc this implementation
+     * will only match a single region with no alias at this time
-    public Index createIndex(String indexName, IndexType indexType,
-        String indexedExpression, String fromClause, String imports)
-        throws IndexInvalidException, IndexNameConflictException,
-        IndexExistsException, RegionNotFoundException,
-        UnsupportedOperationException {
+    public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+        String fromClause, String imports) throws IndexInvalidException, IndexNameConflictException,
+        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
-    public Index createIndex(String indexName, String indexedExpression,
-        String regionPath) throws IndexInvalidException,
-        IndexNameConflictException, IndexExistsException,
+    public Index createIndex(String indexName, String indexedExpression, String regionPath)
+        throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-    public Index createIndex(String indexName, String indexedExpression,
-        String regionPath, String imports) throws IndexInvalidException,
-        IndexNameConflictException, IndexExistsException,
-        RegionNotFoundException, UnsupportedOperationException {
-       return createIndex(indexName, IndexType.FUNCTIONAL, indexedExpression, regionPath, imports);
+    public Index createIndex(String indexName, String indexedExpression, String regionPath,
+        String imports) throws IndexInvalidException, IndexNameConflictException,
+        IndexExistsException, RegionNotFoundException, UnsupportedOperationException {
+      return createIndex(indexName, IndexType.FUNCTIONAL, indexedExpression, regionPath, imports);
-    public Index createKeyIndex(String indexName, String indexedExpression,
-        String regionPath) throws IndexInvalidException,
-        IndexNameConflictException, IndexExistsException,
+    public Index createKeyIndex(String indexName, String indexedExpression, String regionPath)
+        throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
-    public Collection<Index> getIndexes(Region<?, ?> region,
-        IndexType indexType) {
+    public Collection<Index> getIndexes(Region<?, ?> region, IndexType indexType) {
-      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());        
+      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());        
+      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());        
+      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-    public CqQuery newCq(String queryString, CqAttributes cqAttr,
-        boolean isDurable) throws QueryInvalidException, CqException {
+    public CqQuery newCq(String queryString, CqAttributes cqAttr, boolean isDurable)
+        throws QueryInvalidException, CqException {
-    public CqQuery newCq(String name, String queryString,
-        CqAttributes cqAttr, boolean isDurable) throws QueryInvalidException,
-        CqExistsException, CqException {
+    public CqQuery newCq(String name, String queryString, CqAttributes cqAttr, boolean isDurable)
+        throws QueryInvalidException, CqExistsException, CqException {
-      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());        
+      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-    public void defineKeyIndex(String indexName, String indexedExpression,
-        String fromClause) throws RegionNotFoundException {
+    public void defineKeyIndex(String indexName, String indexedExpression, String fromClause)
+        throws RegionNotFoundException {
-    public void defineHashIndex(String indexName, String indexedExpression,
-        String regionPath) throws RegionNotFoundException {
+    public void defineHashIndex(String indexName, String indexedExpression, String regionPath)
+        throws RegionNotFoundException {
-    public void defineHashIndex(String indexName, String indexedExpression,
-        String regionPath, String imports) throws RegionNotFoundException {
+    public void defineHashIndex(String indexName, String indexedExpression, String regionPath,
+        String imports) throws RegionNotFoundException {
-    public void defineIndex(String indexName, String indexedExpression,
-        String regionPath) throws RegionNotFoundException {
+    public void defineIndex(String indexName, String indexedExpression, String regionPath)
+        throws RegionNotFoundException {
-    public void defineIndex(String indexName, String indexedExpression,
-        String regionPath, String imports) throws RegionNotFoundException {
+    public void defineIndex(String indexName, String indexedExpression, String regionPath,
+        String imports) throws RegionNotFoundException {
-    
+
