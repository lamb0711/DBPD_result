GEODE-3283: Expose parallel import and export in gfsh (#753)

* GEODE-3283: Expose parallel import and export in gfsh

Allow users to make use of parallel import and export of snapshots
in gfsh.

+import java.util.Optional;
-      @CliOption(key = CliStrings.IMPORT_DATA__FILE, mandatory = true,
+      @CliOption(key = CliStrings.IMPORT_DATA__FILE,
+      @CliOption(key = CliStrings.IMPORT_DATA__DIR,
+          help = CliStrings.IMPORT_DATA__DIR__HELP) String dirPath,
-          help = CliStrings.IMPORT_DATA__INVOKE_CALLBACKS__HELP) boolean invokeCallbacks) {
+          help = CliStrings.IMPORT_DATA__INVOKE_CALLBACKS__HELP) boolean invokeCallbacks,
+      @CliOption(key = CliStrings.IMPORT_DATA__PARALLEL, unspecifiedDefaultValue = "false",
+          specifiedDefaultValue = "true",
+          help = CliStrings.IMPORT_DATA__PARALLEL_HELP) boolean parallel) {
+    final DistributedMember targetMember = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
+    if (targetMember == null) {
+      return ResultBuilder.createUserErrorResult(
+          CliStrings.format(CliStrings.IMPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
+    }
+
+    Optional<Result> validationResult = validatePath(filePath, dirPath, parallel);
+    if (validationResult.isPresent()) {
+      return validationResult.get();
+    }
+
-
-      final DistributedMember targetMember = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
+      String path = dirPath != null ? dirPath : filePath;
+      final Object args[] = {regionName, path, invokeCallbacks, parallel};
-      if (!filePath.endsWith(CliStrings.GEODE_DATA_FILE_EXTENSION)) {
-        return ResultBuilder.createUserErrorResult(CliStrings
-            .format(CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION));
-      }
-      if (targetMember != null) {
-        final Object args[] = {regionName, filePath, invokeCallbacks};
-        ResultCollector<?, ?> rc = CliUtil.executeFunction(importDataFunction, args, targetMember);
-        List<Object> results = (List<Object>) rc.getResult();
-
-        if (results != null) {
-          Object resultObj = results.get(0);
-
-          if (resultObj instanceof String) {
-            result = ResultBuilder.createInfoResult((String) resultObj);
-          } else if (resultObj instanceof Exception) {
-            result = ResultBuilder.createGemFireErrorResult(((Exception) resultObj).getMessage());
-          } else {
-            result = ResultBuilder.createGemFireErrorResult(
-                CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
-          }
-        } else {
-          result = ResultBuilder.createGemFireErrorResult(
-              CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
-        }
-      } else {
-        result = ResultBuilder.createUserErrorResult(
-            CliStrings.format(CliStrings.IMPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
-      }
+      ResultCollector<?, ?> rc = CliUtil.executeFunction(importDataFunction, args, targetMember);
+      result = DataCommandUtil.getFunctionResult(rc, CliStrings.IMPORT_DATA);
+
+  private Optional<Result> validatePath(String filePath, String dirPath, boolean parallel) {
+    if (filePath == null && dirPath == null) {
+      return Optional
+          .of(ResultBuilder.createUserErrorResult("Must specify a location to load snapshot from"));
+    } else if (filePath != null && dirPath != null) {
+      return Optional.of(ResultBuilder.createUserErrorResult(
+          "Options \"file\" and \"dir\" cannot be specified at the same time"));
+    } else if (parallel && dirPath == null) {
+      return Optional.of(ResultBuilder
+          .createUserErrorResult("Must specify a directory to load snapshot files from"));
+    }
+
+    if (dirPath == null && !filePath.endsWith(CliStrings.GEODE_DATA_FILE_EXTENSION)) {
+      return Optional.of(ResultBuilder.createUserErrorResult(CliStrings
+          .format(CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION)));
+    }
+    return Optional.empty();
+  }
