GEODE-1723 Merge from 82 for performance improvement.

Other improvement:We take lock on key while doing op on BucketRegion.
In that case we notify to other thread only when there is a thread
waiting for it. Modified one condition to log message to reduce garbage.

+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+  
+  private static final byte[] TRUE;
+  private static final byte[] FALSE;
+
+  static {
+    try {
+      HeapDataOutputStream hdos = new HeapDataOutputStream(10, null);
+      BlobHelper.serializeTo(Boolean.TRUE, hdos);
+      TRUE = hdos.toByteArray();
+    } catch (Exception e) {
+      throw new IllegalStateException(e);
+    }
+
+    try {
+      HeapDataOutputStream hdos = new HeapDataOutputStream(10, null);
+      BlobHelper.serializeTo(Boolean.FALSE, hdos);
+      FALSE = hdos.toByteArray();
+    } catch (Exception e) {
+      throw new IllegalStateException(e);
+    }
+  }
+    addStringPart(str, false);
+  }
+  
+  private static final Map<String,byte[]> CACHED_STRINGS = new ConcurrentHashMap<String,byte[]>();
+  
+  public void addStringPart(String str, boolean enableCaching) {
-      HeapDataOutputStream hdos = new HeapDataOutputStream(str);
-      this.messageModified = true;
-      part.setPartState(hdos, false);
+      if (enableCaching) {
+        byte[] bytes = CACHED_STRINGS.get(str);
+        if (bytes == null) {
+          HeapDataOutputStream hdos = new HeapDataOutputStream(str);
+          bytes = hdos.toByteArray();
+          CACHED_STRINGS.put(str, bytes);
+        }
+        part.setPartState(bytes, false);
+      } else {
+        HeapDataOutputStream hdos = new HeapDataOutputStream(str);
+        this.messageModified = true;
+        part.setPartState(hdos, false);
+      }
-
+  
+
-      addRawPart((byte[])o, false);
+      addRawPart((byte[]) o, false);
+    } else if (o instanceof Boolean) {
+      addRawPart((Boolean) o ? TRUE : FALSE, true);
