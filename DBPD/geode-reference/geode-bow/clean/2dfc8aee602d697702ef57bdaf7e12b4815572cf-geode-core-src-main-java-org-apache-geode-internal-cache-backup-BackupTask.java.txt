GEODE-4407 (#1499): Refactoring incremental backup logic

Removed dependency on target location while fetching backup files from source.

+import java.nio.file.Path;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Set;
-import org.apache.commons.io.FileUtils;
-import org.apache.geode.internal.cache.DirectoryHolder;
-import org.apache.geode.internal.cache.DiskStoreBackup;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-  static final String INCOMPLETE_BACKUP_FILE = "INCOMPLETE_BACKUP_FILE";
-
-  private static final String BACKUP_DIR_PREFIX = "dir";
-  private static final String DATA_STORES_DIRECTORY = "diskstores";
-  private static final String USER_FILES = "user";
-
+  private final BackupWriter backupWriter;
+    backupWriter = createBackupWriter();
-  HashSet<PersistentID> awaitLockAcquisition() throws InterruptedException {
+  private BackupWriter createBackupWriter() {
+    BackupWriter writer;
+    Path backupDirectory = targetDir.toPath().resolve(memberId);
+    if (baselineDir == null) {
+      writer = new FileSystemBackupWriter(backupDirectory);
+    } else {
+      FileSystemIncrementalBackupLocation incrementalBaselineLocation =
+          new FileSystemIncrementalBackupLocation(baselineDir, memberId);
+      writer = new FileSystemBackupWriter(backupDirectory, incrementalBaselineLocation);
+    }
+    return writer;
+  }
+
+  HashSet<PersistentID> getPreparedDiskStores() throws InterruptedException {
+      Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
-      File memberBackupDir = new File(targetDir, memberId);
-      // Make sure our baseline is okay for this member, then create inspector for baseline backup
-      File checkedBaselineDir = checkBaseline(baselineDir);
-      BackupInspector inspector =
-          (checkedBaselineDir == null ? null : BackupInspector.createInspector(checkedBaselineDir));
-      File storesDir = new File(memberBackupDir, DATA_STORES_DIRECTORY);
-      Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
+      Map<DiskStoreImpl, DiskStoreBackup> backupByDiskStores = startDiskStoreBackups(diskStores);
-      Map<DiskStoreImpl, DiskStoreBackup> backupByDiskStores =
-          startDiskStoreBackups(inspector, storesDir, diskStores);
+
-        // TODO: allow different strategies...
+        backupAdditionalFiles();
-        backupAdditionalFiles(memberBackupDir);
-        BackupDestination backupDestination =
-            new FileSystemBackupDestination(memberBackupDir.toPath());
-        backupDestination.backupFiles(backupDefinition);
+        backupWriter.backupFiles(backupDefinition);
-
-  private Map<DiskStoreImpl, DiskStoreBackup> startDiskStoreBackups(BackupInspector inspector,
-      File storesDir, Collection<DiskStore> diskStores) throws IOException {
+  private Map<DiskStoreImpl, DiskStoreBackup> startDiskStoreBackups(
+      Collection<DiskStore> diskStores) throws IOException {
-          File diskStoreDir = new File(storesDir, getBackupDirName(diskStore));
-          DiskStoreBackup backup = startDiskStoreBackup(diskStore, diskStoreDir, inspector);
+          DiskStoreBackup backup = startDiskStoreBackup(diskStore);
-  /**
-   * Returns the memberId directory for this member in the baseline. The memberId may have changed
-   * if this member has been restarted since the last backup.
-   *
-   * @param baselineParentDir parent directory of last backup.
-   * @return null if the baseline for this member could not be located.
-   */
-  private File findBaselineForThisMember(File baselineParentDir) {
-    File baselineDir = null;
-
-    // Find the first matching DiskStoreId directory for this member.
-    for (DiskStore diskStore : cache.listDiskStoresIncludingRegionOwned()) {
-      File[] matchingFiles = baselineParentDir
-          .listFiles((file, name) -> name.endsWith(getBackupDirName((DiskStoreImpl) diskStore)));
-      // We found it? Good. Set this member's baseline to the backed up disk store's member dir (two
-      // levels up).
-      if (null != matchingFiles && matchingFiles.length > 0)
-        baselineDir = matchingFiles[0].getParentFile().getParentFile();
-    }
-    return baselineDir;
-  }
-
-  /**
-   * Performs a sanity check on the baseline directory for incremental backups. If a baseline
-   * directory exists for the member and there is no INCOMPLETE_BACKUP_FILE file then return the
-   * data stores directory for this member.
-   *
-   * @param baselineParentDir a previous backup directory. This is used with the incremental backup
-   *        option. May be null if the user specified a full backup.
-   * @return null if the backup is to be a full backup otherwise return the data store directory in
-   *         the previous backup for this member (if incremental).
-   */
-  private File checkBaseline(File baselineParentDir) {
-    File baselineDir = null;
-
-    if (null != baselineParentDir) {
-      // Start by looking for this memberId
-      baselineDir = new File(baselineParentDir, memberId);
-
-      if (!baselineDir.exists()) {
-        // hmmm, did this member have a restart?
-        // Determine which member dir might be a match for us
-        baselineDir = findBaselineForThisMember(baselineParentDir);
-      }
-
-      if (null != baselineDir) {
-        // check for existence of INCOMPLETE_BACKUP_FILE file
-        File incompleteBackup = new File(baselineDir, INCOMPLETE_BACKUP_FILE);
-        if (incompleteBackup.exists()) {
-          baselineDir = null;
-        }
-      }
-    }
-
-    return baselineDir;
-  }
-
-  private void backupAdditionalFiles(File backupDir) throws IOException {
+  private void backupAdditionalFiles() throws IOException {
-
-    Set<File> userFiles = fileCopier.copyUserFiles();
-    File userBackupDir = new File(backupDir, USER_FILES);
-    for (File file : userFiles) {
-      File restoreScriptDestination = new File(userBackupDir, file.getName());
-      restoreScript.addUserFile(file, restoreScriptDestination);
-    }
-
-    Set<File> jars = fileCopier.copyDeployedJars();
-    for (File file : jars) {
-      File restoreScriptDestination = new File(userBackupDir, file.getName());
-      restoreScript.addFile(file, restoreScriptDestination);
-    }
+    fileCopier.copyUserFiles();
+    fileCopier.copyDeployedJars();
-   * Returns the dir name used to back up this DiskStore's directories under. The name is a
-   * concatenation of the disk store name and id.
-   */
-  private String getBackupDirName(DiskStoreImpl diskStore) {
-    String name = diskStore.getName();
-
-    if (name == null) {
-      name = GemFireCacheImpl.getDefaultDiskStoreName();
-    }
-
-    return (name + "_" + diskStore.getDiskStoreID().toString());
-  }
-
-  /**
-  private DiskStoreBackup startDiskStoreBackup(DiskStoreImpl diskStore, File targetDir,
-      BackupInspector baselineInspector) throws IOException {
+  private DiskStoreBackup startDiskStoreBackup(DiskStoreImpl diskStore) throws IOException {
-          backup = new DiskStoreBackup(new Oplog[0], targetDir);
+          backup = new DiskStoreBackup(new Oplog[0]);
-          addDiskStoreDirectoriesToRestoreScript(diskStore, targetDir);
-
-
-          // Incremental backup so filter out oplogs that have already been
-          // backed up
-          Oplog[] allOplogs;
-          if (null != baselineInspector) {
-            allOplogs = filterBaselineOplogs(diskStore, baselineInspector);
-          } else {
-            allOplogs = diskStore.getAllOplogsForBackup();
-          }
-
-          // mark all oplogs as being backed up. This will
-          // prevent the oplogs from being deleted
-          backup = new DiskStoreBackup(allOplogs, targetDir);
+          Oplog[] allOplogs = diskStore.getAllOplogsForBackup();
+          backup = new DiskStoreBackup(allOplogs);
-  private void addDiskStoreDirectoriesToRestoreScript(DiskStoreImpl diskStore, File targetDir) {
-    DirectoryHolder[] directories = diskStore.getDirectoryHolders();
-    for (int i = 0; i < directories.length; i++) {
-      File backupDir = getBackupDirForCurrentMember(targetDir, i);
-      restoreScript.addFile(directories[i].getDir(), backupDir);
-    }
-  }
-
-  /**
-   * Filters and returns the current set of oplogs that aren't already in the baseline for
-   * incremental backup
-   *
-   * @param baselineInspector the inspector for the previous backup.
-   * @return an array of Oplogs to be copied for an incremental backup.
-   */
-  private Oplog[] filterBaselineOplogs(DiskStoreImpl diskStore, BackupInspector baselineInspector) {
-    File baselineDir = new File(baselineInspector.getBackupDir(), DATA_STORES_DIRECTORY);
-    baselineDir = new File(baselineDir, getBackupDirName(diskStore));
-
-    // Find all of the member's diskstore oplogs in the member's baseline
-    // diskstore directory structure (*.crf,*.krf,*.drf)
-    Collection<File> baselineOplogFiles =
-        FileUtils.listFiles(baselineDir, new String[] {"krf", "drf", "crf"}, true);
-    // Our list of oplogs to copy (those not already in the baseline)
-    List<Oplog> oplogList = new LinkedList<>();
-
-    // Total list of member oplogs
-    Oplog[] allOplogs = diskStore.getAllOplogsForBackup();
-
-    // Loop through operation logs and see if they are already part of the baseline backup.
-    for (Oplog log : allOplogs) {
-      // See if they are backed up in the current baseline
-      Map<File, File> oplogMap = log.mapBaseline(baselineOplogFiles);
-
-      // No? Then see if they were backed up in previous baselines
-      if (oplogMap.isEmpty() && baselineInspector.isIncremental()) {
-        oplogMap = addBaselineOplogToRestoreScript(baselineInspector, log);
-      }
-
-      if (oplogMap.isEmpty()) {
-        // These are fresh operation log files so lets back them up.
-        oplogList.add(log);
-      } else {
-        /*
-         * These have been backed up before so lets just add their entries from the previous backup
-         * or restore script into the current one.
-         */
-        restoreScript.addBaselineFiles(oplogMap);
-      }
-    }
-
-    // Convert the filtered oplog list to an array
-    return oplogList.toArray(new Oplog[oplogList.size()]);
-  }
-
-  private Map<File, File> addBaselineOplogToRestoreScript(BackupInspector baselineInspector,
-      Oplog log) {
-    Map<File, File> oplogMap = new HashMap<>();
-    Set<String> matchingOplogs =
-        log.gatherMatchingOplogFiles(baselineInspector.getIncrementalOplogFileNames());
-    for (String matchingOplog : matchingOplogs) {
-      oplogMap.put(new File(baselineInspector.getCopyFromForOplogFile(matchingOplog)),
-          new File(baselineInspector.getCopyToForOplogFile(matchingOplog)));
-    }
-    return oplogMap;
-  }
-
-  private File getBackupDirForCurrentMember(File targetDir, int index) {
-    return new File(targetDir, BACKUP_DIR_PREFIX + index);
-  }
-
+
