GEODE-5971: refactor StartJvisualvm command to use new ResultModel (#2974)


+import java.io.IOException;
+import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.GemFireException;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.internal.lang.StringUtils;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.InfoResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-  public Result startJVisualVM(
+  public ResultModel startJVisualVM(
-          help = CliStrings.START_JCONSOLE__J__HELP) final String[] jvmArgs) {
-    try {
-      String[] jvisualvmCommandLine = createJVisualVMCommandLine(jvmArgs);
+          help = CliStrings.START_JCONSOLE__J__HELP) final String[] jvmArgs)
+      throws IOException {
-      if (isDebugging()) {
-        getGfsh().printAsInfo(
-            String.format("JVisualVM command-line (%1$s)", Arrays.toString(jvisualvmCommandLine)));
-      }
+    String jvisualvmProcessOutput = getProcessOutput(jvmArgs);
-      Process jvisualvmProcess = Runtime.getRuntime().exec(jvisualvmCommandLine);
+    ResultModel result = new ResultModel();
+    InfoResultModel infoResultModel = result.addInfo();
-      getGfsh().printAsInfo(CliStrings.START_JVISUALVM__RUN);
-
-      String jvisualvmProcessOutput = waitAndCaptureProcessStandardErrorStream(jvisualvmProcess);
-
-      InfoResultData infoResultData = ResultBuilder.createInfoResultData();
-
-      if (StringUtils.isNotBlank(jvisualvmProcessOutput)) {
-        infoResultData.addLine(StringUtils.LINE_SEPARATOR);
-        infoResultData.addLine(jvisualvmProcessOutput);
-      }
-
-      return ResultBuilder.buildResult(infoResultData);
-    } catch (GemFireException | IllegalStateException | IllegalArgumentException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createShellClientErrorResult(
-          String.format(CliStrings.START_JVISUALVM__ERROR_MESSAGE, t.getMessage()));
+    if (StringUtils.isNotBlank(jvisualvmProcessOutput)) {
+      infoResultModel.addLine(System.lineSeparator());
+      infoResultModel.addLine(jvisualvmProcessOutput);
+
+    return result;
+
-  protected String[] createJVisualVMCommandLine(final String[] jvmArgs) {
+  String getProcessOutput(String[] jvmArgs) throws IOException {
+    String[] jvisualvmCommandLine = createJVisualVMCommandLine(jvmArgs);
+
+    if (isDebugging()) {
+      getGfsh().printAsInfo(
+          String.format("JVisualVM command-line (%1$s)", Arrays.toString(jvisualvmCommandLine)));
+    }
+
+    Process jvisualvmProcess = Runtime.getRuntime().exec(jvisualvmCommandLine);
+    getGfsh().printAsInfo(CliStrings.START_JVISUALVM__RUN);
+    return waitAndCaptureProcessStandardErrorStream(jvisualvmProcess);
+  }
+
+  String[] createJVisualVMCommandLine(final String[] jvmArgs) {
