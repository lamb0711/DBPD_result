Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Maintains configuration information for a PartitionedRegion. Instances are
- * stored in the allPartitionedRegion.
+ * Maintains configuration information for a PartitionedRegion. Instances are stored in the
+ * allPartitionedRegion.
-public class PartitionRegionConfig extends ExternalizableDSFID implements Versionable
-{
+public class PartitionRegionConfig extends ExternalizableDSFID implements Versionable {
-  
-  /** Flag to indicate whether the PartitionedRegion's destruction responsibility is taken up by someone */
+
+  /**
+   * Flag to indicate whether the PartitionedRegion's destruction responsibility is taken up by
+   * someone
+   */
-  
-  /** Flag to indicate whether this region has been created on all of the members that host the region
-   * that this region is colocated with. Once a region is in this state, new members will have to create
-   * this region before they can host any data for the colocated regions
+
+  /**
+   * Flag to indicate whether this region has been created on all of the members that host the
+   * region that this region is colocated with. Once a region is in this state, new members will
+   * have to create this region before they can host any data for the colocated regions
-  
-  private volatile boolean firstDataStoreCreated = false ;
-  
+
+  private volatile boolean firstDataStoreCreated = false;
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    this.pAttrs = (PartitionAttributesImpl)prAtt;
+    this.pAttrs = (PartitionAttributesImpl) prAtt;
-    this.nodes = new VersionedArrayList();    
+    this.nodes = new VersionedArrayList();
-    }    
+    }
-      EvictionAttributes ea,
-      final ExpirationAttributes regionIdleTimeout,
-      final ExpirationAttributes regionTimeToLive,      
-      final ExpirationAttributes entryIdleTimeout,
-      final ExpirationAttributes entryTimeToLive,
-      Set<String> gatewaySenderIds) {
+      EvictionAttributes ea, final ExpirationAttributes regionIdleTimeout,
+      final ExpirationAttributes regionTimeToLive, final ExpirationAttributes entryIdleTimeout,
+      final ExpirationAttributes entryTimeToLive, Set<String> gatewaySenderIds) {
-    this.pAttrs = (PartitionAttributesImpl)prAtt;
+    this.pAttrs = (PartitionAttributesImpl) prAtt;
-    this.nodes = new VersionedArrayList();    
+    this.nodes = new VersionedArrayList();
-    if(prAtt.getLocalMaxMemory() > 0){
+    if (prAtt.getLocalMaxMemory() > 0) {
-    this.regionTimeToLive = regionTimeToLive ;
+    this.regionTimeToLive = regionTimeToLive;
-    this.entryTimeToLive = entryTimeToLive ;
+    this.entryTimeToLive = entryTimeToLive;
-    }   
+    }
-   * @return a copy of the list of nodes that the caller is free to modify 
+   * 
+   * @return a copy of the list of nodes that the caller is free to modify
-  Set<Node> getNodes()
-  {
+  Set<Node> getNodes() {
+   * 
-    } 
-    else {
+    } else {
-  
+
-   * Safely checks to see if the provided Node participates in the PartitionedRegion
-   * return true if the Node participates in the PartitionedRegion 
+   * Safely checks to see if the provided Node participates in the PartitionedRegion return true if
+   * the Node participates in the PartitionedRegion
-     return nodes.contains(check);
+      return nodes.contains(check);
-  
+
-   * Safely checks to see if the provided Node participates in the PartitionedRegion
-   * return true if the Node participates in the PartitionedRegion 
+   * Safely checks to see if the provided Node participates in the PartitionedRegion return true if
+   * the Node participates in the PartitionedRegion
-      for(Node node : this.nodes) {
-        if(memberId.equals(node.getMemberId())) {
+      for (Node node : this.nodes) {
+        if (memberId.equals(node.getMemberId())) {
-    
+
-  
+
-  void addNode(Node newNode)
-  {
-    if(nodes != null) {
-    	nodes.add(newNode);
+  void addNode(Node newNode) {
+    if (nodes != null) {
+      nodes.add(newNode);
-  void removeNode(Node targetNode)
-  {
-   if(nodes != null) {
-   	nodes.remove(targetNode);
-   }
+  void removeNode(Node targetNode) {
+    if (nodes != null) {
+      nodes.remove(targetNode);
+    }
-  public int getPRId()
-  {
+  public int getPRId() {
-  PartitionAttributes getPartitionAttrs()
-  {
+  PartitionAttributes getPartitionAttrs() {
-  Scope getScope()
-  {
+  Scope getScope() {
-  public String toString()
-  {
-    String ret = 
-    "PartitionRegionConfig@" + System.identityHashCode(this)
-    + ";prId=" + this.prId
-    + ";scope=" + this.scope
-    + ";partition attributes=" + this.pAttrs  
-    + ";partitionResolver=" + this.partitionResolver 
-    + ";colocatedWith=" + this.colocatedWith 
-    + ";eviction attributes=" + this.ea
-    + ";regionIdleTimeout= " + this.regionIdleTimeout
-    + ";regionTimeToLive= " + this.regionTimeToLive 
-    + ";entryIdleTimeout= " + this.entryIdleTimeout 
-    + ";entryTimeToLive= " + this.entryTimeToLive 
-    + "'elderFPAs=" +elderFPAs
-    + "'gatewaySenderIds=" +gatewaySenderIds
-    + ";nodes=";
+  public String toString() {
+    String ret = "PartitionRegionConfig@" + System.identityHashCode(this) + ";prId=" + this.prId
+        + ";scope=" + this.scope + ";partition attributes=" + this.pAttrs + ";partitionResolver="
+        + this.partitionResolver + ";colocatedWith=" + this.colocatedWith + ";eviction attributes="
+        + this.ea + ";regionIdleTimeout= " + this.regionIdleTimeout + ";regionTimeToLive= "
+        + this.regionTimeToLive + ";entryIdleTimeout= " + this.entryIdleTimeout
+        + ";entryTimeToLive= " + this.entryTimeToLive + "'elderFPAs=" + elderFPAs
+        + "'gatewaySenderIds=" + gatewaySenderIds + ";nodes=";
-      return ret + "null"; 
+      return ret + "null";
-    }
-    else {
-      DataSerializer.writeObject(
-          this.gatewaySenderIds, out);
+    } else {
+      DataSerializer.writeObject(this.gatewaySenderIds, out);
-    if(this.elderFPAs == null){
+    if (this.elderFPAs == null) {
-    if(this.gatewaySenderIds == null){
+    if (this.gatewaySenderIds == null) {
-  
+
-   * This method returns true is a node has taken a responsibility of destroying
-   * the PartitionedRegion globally
+   * This method returns true is a node has taken a responsibility of destroying the
+   * PartitionedRegion globally
-   * @return true, if a node has taken a responsibility of destroying the
-   *         PartitionedRegion globally else it returns false
+   * @return true, if a node has taken a responsibility of destroying the PartitionedRegion globally
+   *         else it returns false
-  boolean getIsDestroying(){
+  boolean getIsDestroying() {
+
-   * This method sets the isDestroying flag to true, to indicate that the PartitionedRegion's destruction responsibility is taken up by a node. 
+   * This method sets the isDestroying flag to true, to indicate that the PartitionedRegion's
+   * destruction responsibility is taken up by a node.
-  void setIsDestroying(){
+  void setIsDestroying() {
-  
+
-  public boolean isGreaterNodeListVersion(final PartitionRegionConfig other)
-  {
+  public boolean isGreaterNodeListVersion(final PartitionRegionConfig other) {
-  public Comparable getVersion()
-  {
+  public Comparable getVersion() {
-  public boolean isNewerThan(Versionable other)
-  {
+  public boolean isNewerThan(Versionable other) {
-  public boolean isSame(Versionable other)
-  {
+  public boolean isSame(Versionable other) {
-  public boolean isOlderThan(Versionable other)
-  {
+  public boolean isOlderThan(Versionable other) {
-  
+
-  
+
-  
+
-  
+
-    if(this.elderFPAs != null) {
+    if (this.elderFPAs != null) {
-  public Set<FixedPartitionAttributesImpl> getElderFPAs(){
+  public Set<FixedPartitionAttributesImpl> getElderFPAs() {
-  
-  public ArrayList<String> getPartitionListenerClassNames(){
-    return partitionListenerClassNames ;
+
+  public ArrayList<String> getPartitionListenerClassNames() {
+    return partitionListenerClassNames;
-          && ((node.getPRType() == Node.ACCESSOR_DATASTORE) || (node
-              .getPRType() == Node.FIXED_PR_DATASTORE))) {
+          && ((node.getPRType() == Node.ACCESSOR_DATASTORE)
+              || (node.getPRType() == Node.FIXED_PR_DATASTORE))) {
-      if (!this.containsMember(node.getMemberId())
-          && ((node.getPRType() == Node.ACCESSOR_DATASTORE) || (node
-              .getPRType() == Node.FIXED_PR_DATASTORE))) {
+      if (!this.containsMember(node.getMemberId()) && ((node.getPRType() == Node.ACCESSOR_DATASTORE)
+          || (node.getPRType() == Node.FIXED_PR_DATASTORE))) {
-    
+
