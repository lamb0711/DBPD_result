Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * This is the original type of the blob that we deserialized
-   * and did not read some of its fields.
+   * This is the original type of the blob that we deserialized and did not read some of its fields.
-  
+
-  
+
-    for (int idx: indexes) {
-      
+    for (int idx : indexes) {
+
-     
-      //Copy the unread data into a new byte array
+
+      // Copy the unread data into a new byte array
-  
+
-   * Returns the PdxType to use when serializing this unread data.
-   * Returns null if we don't know what this type is yet.
+   * Returns the PdxType to use when serializing this unread data. Returns null if we don't know
+   * what this type is yet.
+   * 
-  
+
- }
+  }
-    if (isEmpty()) return;
-    int [] indexes = this.unreadType.getUnreadFieldIndexes();
+    if (isEmpty())
+      return;
+    int[] indexes = this.unreadType.getUnreadFieldIndexes();
-        throw new PdxFieldAlreadyExistsException("Check the toData and fromData for " + this.unreadType.getClassName() + " to see if the field \"" + ft.getFieldName() + "\" is spelled differently.");
+        throw new PdxFieldAlreadyExistsException(
+            "Check the toData and fromData for " + this.unreadType.getClassName()
+                + " to see if the field \"" + ft.getFieldName() + "\" is spelled differently.");
-    // This method is only called by CopyHelper which is public and does not require that a Cache exists.
+    // This method is only called by CopyHelper which is public and does not require that a Cache
+    // exists.
-    if (gfc == null) return;
+    if (gfc == null)
+      return;
