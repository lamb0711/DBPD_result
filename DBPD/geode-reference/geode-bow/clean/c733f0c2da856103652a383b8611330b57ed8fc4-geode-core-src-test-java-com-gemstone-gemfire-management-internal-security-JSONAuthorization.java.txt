GEODE-17: Shiro Integration

GEODE-17: associate async request with correct shiro user

GEODE-17

GEODE-17: fix shiro dependency

-import com.gemstone.gemfire.LogWriter;
-import com.gemstone.gemfire.cache.Cache;
-import com.gemstone.gemfire.cache.operations.OperationContext;
-import com.gemstone.gemfire.cache.operations.OperationContext.OperationCode;
-import com.gemstone.gemfire.distributed.DistributedMember;
-import com.gemstone.gemfire.internal.logging.LogService;
-import com.gemstone.gemfire.security.AccessControl;
-import com.gemstone.gemfire.security.AuthenticationFailedException;
-import com.gemstone.gemfire.security.Authenticator;
-import com.gemstone.gemfire.security.NotAuthorizedException;
-import com.gemstone.gemfire.util.test.TestUtil;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import javax.management.remote.JMXPrincipal;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import static com.gemstone.gemfire.cache.operations.OperationContext.Resource;
+import javax.management.remote.JMXPrincipal;
+
+import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.operations.OperationContext;
+import com.gemstone.gemfire.cache.operations.OperationContext.OperationCode;
+import com.gemstone.gemfire.cache.operations.OperationContext.Resource;
+import com.gemstone.gemfire.distributed.DistributedMember;
+import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.security.AccessControl;
+import com.gemstone.gemfire.security.AuthenticationFailedException;
+import com.gemstone.gemfire.security.Authenticator;
+import com.gemstone.gemfire.security.NotAuthorizedException;
+import com.gemstone.gemfire.util.test.TestUtil;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
-  public boolean authorizeOperation(String arg0, OperationContext context) {
+  public boolean authorizeOperation(String region, OperationContext context) {
-          //if this is only for JMX aurthorization, we've found the permission needed, i.e, this operation is authorized
-          if(!(context instanceof CLIOperationContext)){
+          //no need to further check the rgionName
+          if(context.getRegionName()==null){
-          // If this is a Command operation context, we need to further check if the region is allowed in this role
-          CLIOperationContext ctx = (CLIOperationContext) context;
-
-          String region = ctx.getCommandOptions().get("region");
-          if(region==null) {
-            region = ctx.getCommandOptions().get("include-region");
-          }
-          if(region==null) {
-            String query = ctx.getCommandOptions().get("query");
-            if(query!=null) {
-              Matcher matcher = Pattern.compile("/\\s*(\\w+)").matcher(query);
-              if (matcher.find())
-                region = matcher.group(1);
-            }
-          }
-
-          if(role.regionNames == null || region == null || role.regionNames.contains(region)){
+          if(role.regionNames == null || role.regionNames.contains(context.getRegionName())){
-    LogService.getLogger().info("Authentication successful!! for " + user);
