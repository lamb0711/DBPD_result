GEODE-7089: Each client registration thread uses its own queue

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Donal Evans <doevans@pivotal.io>
-import java.util.concurrent.locks.ReentrantLock;
-  private final ClientRegistrationEventQueueManager registrationQueueManager =
-      new ClientRegistrationEventQueueManager();
+  private final ClientRegistrationEventQueueManager clientRegistrationEventQueueManager;
+   * @param clientRegistrationEventQueueManager Manages temporary registration queues for clients
-      StatisticsClock statisticsClock, CacheServerStats acceptorStats, int maximumMessageCount,
-      int messageTimeToLive, ConnectionListener listener, OverflowAttributes overflowAttributes,
+      ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+      StatisticsClock statisticsClock,
+      CacheServerStats acceptorStats,
+      int maximumMessageCount,
+      int messageTimeToLive,
+      ConnectionListener listener,
+      OverflowAttributes overflowAttributes,
-      ccnSingleton = new CacheClientNotifier(cache, statisticsClock, acceptorStats,
+      ccnSingleton = new CacheClientNotifier(cache, clientRegistrationEventQueueManager,
+          statisticsClock, acceptorStats,
-        registrationQueueManager.create(clientProxyMembershipID, new ConcurrentLinkedQueue<>(),
-            new ReentrantReadWriteLock(), new ReentrantLock());
+        ClientRegistrationEventQueueManager.ClientRegistrationEventQueue clientRegistrationEventQueue =
+            clientRegistrationEventQueueManager.create(clientProxyMembershipID,
+                new ConcurrentLinkedQueue<>(),
+                new ReentrantReadWriteLock());
-          if (isProxyInitialized(clientProxyMembershipID)) {
-            registrationQueueManager.drain(clientProxyMembershipID, this);
-          }
+          clientRegistrationEventQueueManager.drain(clientRegistrationEventQueue, this);
-    registrationQueueManager.add(event, conflatable, filterClients, this);
+    clientRegistrationEventQueueManager.add(event, conflatable, filterClients, this);
-   * Determines whether a client proxy has been initialized
-   *
-   * @param clientProxyMembershipID The client proxy membership ID
-   * @return Whether the client proxy is initialized
-   */
-  private boolean isProxyInitialized(final ClientProxyMembershipID clientProxyMembershipID) {
-    return getClientProxy(clientProxyMembershipID) != null;
-  }
-
-  /**
-  private CacheClientNotifier(InternalCache cache, StatisticsClock statisticsClock,
-      CacheServerStats acceptorStats, int maximumMessageCount, int messageTimeToLive,
+  private CacheClientNotifier(InternalCache cache,
+      ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+      StatisticsClock statisticsClock,
+      CacheServerStats acceptorStats, int maximumMessageCount,
+      int messageTimeToLive,
+    this.clientRegistrationEventQueueManager = clientRegistrationEventQueueManager;
-    CacheClientNotifier get(InternalCache cache, StatisticsClock statisticsClock,
+    CacheClientNotifier get(InternalCache cache,
+        ClientRegistrationEventQueueManager clientRegistrationEventQueueManager,
+        StatisticsClock statisticsClock,
