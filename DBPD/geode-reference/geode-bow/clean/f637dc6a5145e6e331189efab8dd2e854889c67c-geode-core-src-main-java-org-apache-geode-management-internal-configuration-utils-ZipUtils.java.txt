GEODE-2430: Refactor ZipUtils

(cherry picked from commit 50aebcc)

+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
- * Utilities class to zip/unzip folder
+ * Utilities class to zip/unzip directory
-  public static void zip(String sourceFolderPath, String targetFilePath) throws Exception {
-    File sourceFolder = new File(sourceFolderPath);
-    File targetFile = new File(targetFilePath);
-
-    if (!sourceFolder.exists()) {
-      throw new Exception("Source folder does not exist");
-    }
-
-    FileOutputStream fos = new FileOutputStream(targetFile);
-    ZipOutputStream zos = new ZipOutputStream(fos);
-    URI baseURI = sourceFolder.toURI();
-
-    Stack<File> fileStack = new Stack<File>();
-    fileStack.push(sourceFolder);
-
-    while (!fileStack.isEmpty()) {
-      File directory = fileStack.pop();
-
-      for (File child : directory.listFiles()) {
-        String name = baseURI.relativize(child.toURI()).getPath();
-
-        if (child.isDirectory()) {
-          fileStack.push(child);
-          zos.putNextEntry(new ZipEntry(name));
-        } else {
-          if (!name.endsWith("zip")) {
-            ZipEntry zipEntry = new ZipEntry(name);
-            zos.putNextEntry(zipEntry);
-            InputStream in = new FileInputStream(child);
-            IOUtils.copy(in, zos);
-            IOUtils.closeQuietly(in);
-          }
+  public static void zipDirectory(Path sourceDirectory, Path targetFile) throws IOException {
+    Path p = Files.createFile(targetFile);
+    try (ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))) {
+      Files.walk(sourceDirectory).filter(path -> !Files.isDirectory(path)).forEach(path -> {
+        ZipEntry zipEntry = new ZipEntry(sourceDirectory.relativize(path).toString());
+        try {
+          zs.putNextEntry(zipEntry);
+          zs.write(Files.readAllBytes(path));
+          zs.closeEntry();
+        } catch (Exception e) {
+          throw new RuntimeException("Unable to write zip file", e);
-      }
+      });
-    IOUtils.closeQuietly(zos);
+  public static void zipDirectory(String sourceDirectoryPath, String targetFilePath)
+      throws IOException {
+    Path sourceDirectory = Paths.get(sourceDirectoryPath);
+    Path targetFile = Paths.get(targetFilePath);
-  public static void unzip(String zipFilePath, String outputFolderPath) throws IOException {
+    zipDirectory(sourceDirectory, targetFile);
+  }
+
+  public static void unzip(String zipFilePath, String outputDirectoryPath) throws IOException {
-        String fileName = outputFolderPath + File.separator + zipEntry.getName();
+        String fileName = outputDirectoryPath + File.separator + zipEntry.getName();
