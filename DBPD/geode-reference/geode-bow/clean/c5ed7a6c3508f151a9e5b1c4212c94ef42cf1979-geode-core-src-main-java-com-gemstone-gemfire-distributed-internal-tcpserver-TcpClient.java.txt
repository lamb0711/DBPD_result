GEODE-420: Clean up of SocketCreator code in tests.
SocketCreatorFactory currently singleton, to amend at later stage

-import com.gemstone.gemfire.internal.SocketCreator;
+import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
+import com.gemstone.gemfire.internal.net.SocketCreatorFactory;
- * because they are required for the server regardess of whether we are using the 
+ * because they are required for the server regardless of whether we are using the
- * 
+ * <p>
- *
-  private static final Logger logger = LogService.getLogger();
-  
-  private static final int REQUEST_TIMEOUT = 60 * 2 * 1000;
+  private static final Logger logger = LogService.getLogger();
+  private static final int REQUEST_TIMEOUT = 60 * 2 * 1000;
-  
-      ShutdownRequest request =new ShutdownRequest();
+      ShutdownRequest request = new ShutdownRequest();
-    } 
-    catch (java.net.ConnectException ce) {
+    } catch (java.net.ConnectException ce) {
-    }
-    catch(Exception ex) {
+    } catch (Exception ex) {
-  /** Contacts the gossip server running on the given host,
-  * and port and gets information about it.  Two <code>String</code>s
-  * are returned: the first string is the working directory of the
-  * locator and the second string is the product directory of the
-  * locator.
-  */
+  /**
+   * Contacts the gossip server running on the given host,
+   * and port and gets information about it.  Two <code>String</code>s
+   * are returned: the first string is the working directory of the
+   * locator and the second string is the product directory of the
+   * locator.
+   */
-    } catch(Exception ex) {
+    } catch (Exception ex) {
-  
+
-  
-  public static Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected) throws IOException, ClassNotFoundException {
+
+  public static Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected)
+    throws IOException, ClassNotFoundException {
-    
+
-    
+
-    
+
-    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), (int)newTimeout, null, false);
-    sock.setSoTimeout((int)newTimeout);
+    Socket sock = SocketCreatorFactory.getClusterSSLSocketCreator().connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
+    sock.setSoTimeout((int) newTimeout);
-      out=new DataOutputStream(sock.getOutputStream());
-      
+      out = new DataOutputStream(sock.getOutputStream());
+
-      
+
-        in = new VersionedDataInputStream(in, Version.fromOrdinal(serverVersion, false)); 
+        in = new VersionedDataInputStream(in, Version.fromOrdinal(serverVersion, false));
-      }
-      else {
+      } else {
-        logger.debug("Remote TcpServer version: " + serverVersion
-                + " is higher than local version: " + Version.CURRENT_ORDINAL
-                + ". This is never expected as remoteVersion");
+        logger.debug("Remote TcpServer version: " + serverVersion + " is higher than local version: " + Version.CURRENT_ORDINAL + ". This is never expected as remoteVersion");
-      } catch(Exception e) {
+      } catch (Exception e) {
-    synchronized(serverVersions) {
+    synchronized (serverVersions) {
-    
+
-    
-    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
+
+    Socket sock = SocketCreatorFactory.getClusterSSLSocketCreator().connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
-    
+
-      DataOutputStream out=new DataOutputStream(sock.getOutputStream());
+      DataOutputStream out = new DataOutputStream(sock.getOutputStream());
-      
+
-      in = new VersionedDataInputStream(in, Version.GFE_57); 
+      in = new VersionedDataInputStream(in, Version.GFE_57);
-          synchronized(serverVersions) {
+          synchronized (serverVersions) {
-      } catch(Exception e) {
+      } catch (Exception e) {
-    synchronized(serverVersions) {
+    synchronized (serverVersions) {
-  
+
-    synchronized(serverVersions) {
+    synchronized (serverVersions) {
