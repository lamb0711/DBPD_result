GEODE-5041: Post processing results from the experimental protocol

Invoking the user's post processor before returning results from the
experimental protobuf protocol.

+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.query.SelectResults;
+import org.apache.geode.cache.query.Struct;
+import org.apache.geode.cache.query.internal.ResultsCollectionWrapper;
+import org.apache.geode.cache.query.internal.StructImpl;
+import org.apache.geode.cache.query.internal.types.StructTypeImpl;
+        value = (V) authorizer.postProcess(regionName, key, value);
-    return region.get(key);
+    Object value = region.get(key);
+    return (V) authorizer.postProcess(regionName, key, value);
-    return region.remove(key);
+    Object oldValue = region.remove(key);
+    return (V) authorizer.postProcess(regionName, key, oldValue);
-    return region.putIfAbsent(key, value);
+    Object oldValue = region.putIfAbsent(key, value);
+
+    return (V) authorizer.postProcess(regionName, key, oldValue);
-    return query.execute(bindParameters);
+    Object result = query.execute(bindParameters);
+
+    if (authorizer.needsPostProcessing()) {
+      return postProcessQueryResults(result);
+    } else {
+      return result;
+    }
+  }
+
+  private Object postProcessQueryResults(Object value) {
+    // The result is a single value
+    if (!(value instanceof SelectResults)) {
+      // For query results, we don't have the region or the key
+      return authorizer.postProcess(null, null, value);
+    }
+
+    SelectResults<?> selectResults = (SelectResults<?>) value;
+
+    // The result is a list of objects
+    if (!selectResults.getCollectionType().getElementType().isStructType()) {
+      List<Object> postProcessed = selectResults.stream()
+          .map(element -> authorizer.postProcess(null, null, element)).collect(Collectors.toList());
+      return new ResultsCollectionWrapper(selectResults.getCollectionType().getElementType(),
+          postProcessed);
+    }
+
+    // The result is a list of structs
+    SelectResults<Struct> structResults = (SelectResults<Struct>) selectResults;
+
+    List<Struct> postProcessed =
+        structResults.stream().map(this::postProcessStruct).collect(Collectors.toList());
+
+
+    return new ResultsCollectionWrapper(selectResults.getCollectionType().getElementType(),
+        postProcessed);
+  }
+
+  private Struct postProcessStruct(Struct struct) {
+    List<Object> newValues = Arrays.stream(struct.getFieldValues())
+        .map(element -> authorizer.postProcess(null, null, element)).collect(Collectors.toList());
+    StructImpl newStruct =
+        new StructImpl((StructTypeImpl) struct.getStructType(), newValues.toArray());
+
+    return newStruct;
