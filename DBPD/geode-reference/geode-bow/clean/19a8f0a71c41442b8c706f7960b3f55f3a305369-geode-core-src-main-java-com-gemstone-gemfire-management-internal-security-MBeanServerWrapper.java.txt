GEODE-17: WIP adding JMX security

+import java.util.HashSet;
+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.*;
+/**
+ * This class intercepts all MBean requests for GemFire MBeans and passed it to
+ * ManagementInterceptor for authorization
+ *
+ *
+ * @author tushark
+ * @since 9.0
+ *
+ */
-  private void doAuthorization(ObjectName name, String methodName, Object[] methodParams){
-    interceptor.authorize(name,methodName, methodParams);
+  private ResourceOperationContext doAuthorization(ObjectName name, String methodName, Object[] methodParams){
+    return interceptor.authorize(name,methodName, methodParams);
+  }
+
+  private void doAuthorizationPost(ObjectName name, String methodName, ResourceOperationContext context, Object result){
+    interceptor.postAuthorize(name,methodName,context,result);
-    doAuthorization(name, "createMBean", new Object[]{name});
-    return mbs.createMBean(className, name);
+    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name});
+    ObjectInstance result = mbs.createMBean(className, name);
+    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
+    return result;
-    doAuthorization(name, "createMBean", new Object[]{name});
-    return mbs.createMBean(className, name, loaderName);
+    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name});
+    ObjectInstance result = mbs.createMBean(className, name, loaderName);
+    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
+    return result;
-    doAuthorization(name, "createMBean", new Object[]{name, params});
-    return mbs.createMBean(className,name,params,signature);
+    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name, params});
+    ObjectInstance result = mbs.createMBean(className,name,params,signature);
+    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
+    return result;
-    doAuthorization(name, "createMBean", new Object[]{name});
-    return mbs.createMBean(className, name, loaderName, params, signature);
+    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name});
+    ObjectInstance result = mbs.createMBean(className, name, loaderName, params, signature);
+    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
+    return result;
-    doAuthorization(name, "registerMBean", new Object[]{name});
-    return mbs.registerMBean(object, name);
+    ResourceOperationContext ctx = doAuthorization(name, REGISTER_MBEAN, new Object[]{name});
+    ObjectInstance result = mbs.registerMBean(object, name);
+    doAuthorizationPost(name, REGISTER_MBEAN, ctx, result);
+    return result;
-    doAuthorization(name, "registerMBean", new Object[]{});
+    ResourceOperationContext ctx = doAuthorization(name, UNREGISTER_MBEAN, new Object[]{});
+    doAuthorizationPost(name, UNREGISTER_MBEAN, ctx, null);
-    return mbs.queryMBeans(name, query);
+    return filterAccessControlMBeanInstance(mbs.queryMBeans(name, query));
+  }
+
+  private Set<ObjectInstance> filterAccessControlMBeanInstance(Set<ObjectInstance> queryMBeans) {
+    Set<ObjectInstance> set = new HashSet<ObjectInstance>();
+    for(ObjectInstance oi : queryMBeans) {
+      if(!oi.getObjectName().equals(interceptor.getAccessControlMBeanON())){
+        set.add(oi);
+      }
+    }
+    return set;
-    return mbs.queryNames(name, query);
+    return filterAccessControlMBean(mbs.queryNames(name, query));
+  }
+
+  private Set<ObjectName> filterAccessControlMBean(Set<ObjectName> queryNames) {
+    Set<ObjectName> set = new HashSet<ObjectName>();
+    for(ObjectName oi : queryNames) {
+      if(!oi.equals(interceptor.getAccessControlMBeanON())){
+        set.add(oi);
+      }
+    }
+    return set;
-    doAuthorization(name, "getAttribute",  new Object[]{attribute});
-    return mbs.getAttribute(name, attribute);
+    ResourceOperationContext ctx = doAuthorization(name, GET_ATTRIBUTE,  new Object[]{attribute});
+    Object result = mbs.getAttribute(name, attribute);
+    doAuthorizationPost(name, GET_ATTRIBUTE, ctx, result);
+    return result;
-    doAuthorization(name, "getAttributes", new Object[]{attributes});
-    return mbs.getAttributes(name, attributes);
+    ResourceOperationContext ctx = doAuthorization(name, GET_ATTRIBUTES, new Object[]{attributes});
+    AttributeList result = mbs.getAttributes(name, attributes);
+    doAuthorizationPost(name,GET_ATTRIBUTES, ctx, result);
+    return result;
-    doAuthorization(name, "setAttribute", new Object[]{attribute});
+    ResourceOperationContext ctx = doAuthorization(name, SET_ATTRIBUTE, new Object[]{attribute});
+    doAuthorizationPost(name, SET_ATTRIBUTE, ctx, null);
-    doAuthorization(name, "setAttributes", new Object[]{attributes});
-    return mbs.setAttributes(name, attributes);
+    ResourceOperationContext ctx = doAuthorization(name, SET_ATTRIBUTES, new Object[]{attributes});
+    AttributeList result = mbs.setAttributes(name, attributes);
+    doAuthorizationPost(name, SET_ATTRIBUTES, ctx, result);
+    return result;
-    doAuthorization(name, operationName, new Object[]{params, signature});
-    return mbs.invoke(name, operationName, params, signature);
+    ResourceOperationContext ctx = doAuthorization(name, operationName, new Object[]{params, signature});
+    Object result = mbs.invoke(name, operationName, params, signature);
+    doAuthorizationPost(name, operationName, ctx, result);
+    return result;
+  @SuppressWarnings("deprecation")
