GEODE-130: Cleanup internal API warnings. (#3872)

* Isolate API warnings to unsafe module.
* Ignore API warnings on unsafe module only.
-package org.apache.geode.pdx.internal.unsafe;
+
+package org.apache.geode.unsafe.internal.sun.misc;
-import sun.misc.Unsafe;
-
-public class UnsafeWrapper {
+public class Unsafe {
-  private final Unsafe unsafe;
+  private final sun.misc.Unsafe unsafe;
-    Unsafe tmp = null;
+    sun.misc.Unsafe tmp;
-      Field field = Unsafe.class.getDeclaredField("theUnsafe");
+      Field field = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
-      tmp = (Unsafe) field.get(null);
+      tmp = (sun.misc.Unsafe) field.get(null);
-    return this.unsafe.objectFieldOffset(f);
+    return unsafe.objectFieldOffset(f);
-    return this.unsafe.getInt(o, offset);
+    return unsafe.getInt(o, offset);
-    return this.unsafe.getIntVolatile(o, offset);
+    return unsafe.getIntVolatile(o, offset);
-    return this.unsafe.addressSize();
+    return unsafe.addressSize();
-    this.unsafe.putInt(o, offset, v);
+    unsafe.putInt(o, offset, v);
-    this.unsafe.putIntVolatile(o, offset, v);
+    unsafe.putIntVolatile(o, offset, v);
-    return this.unsafe.compareAndSwapInt(o, offset, expected, v);
+    return unsafe.compareAndSwapInt(o, offset, expected, v);
-    return this.unsafe.getBoolean(o, offset);
+    return unsafe.getBoolean(o, offset);
-    this.unsafe.putBoolean(o, offset, v);
+    unsafe.putBoolean(o, offset, v);
-    return this.unsafe.getByte(o, offset);
+    return unsafe.getByte(o, offset);
-    this.unsafe.putByte(o, offset, v);
+    unsafe.putByte(o, offset, v);
-    return this.unsafe.getShort(o, offset);
+    return unsafe.getShort(o, offset);
-    this.unsafe.putShort(o, offset, v);
+    unsafe.putShort(o, offset, v);
-    return this.unsafe.getChar(o, offset);
+    return unsafe.getChar(o, offset);
-    this.unsafe.putChar(o, offset, v);
+    unsafe.putChar(o, offset, v);
-    return this.unsafe.getLong(o, offset);
+    return unsafe.getLong(o, offset);
-    return this.unsafe.getLongVolatile(o, offset);
+    return unsafe.getLongVolatile(o, offset);
-    this.unsafe.putLong(o, offset, v);
+    unsafe.putLong(o, offset, v);
-    this.unsafe.putLongVolatile(o, offset, v);
+    unsafe.putLongVolatile(o, offset, v);
-    return this.unsafe.compareAndSwapLong(o, offset, expected, v);
+    return unsafe.compareAndSwapLong(o, offset, expected, v);
-    return this.unsafe.getFloat(o, offset);
+    return unsafe.getFloat(o, offset);
-    this.unsafe.putFloat(o, offset, v);
+    unsafe.putFloat(o, offset, v);
-    return this.unsafe.getDouble(o, offset);
+    return unsafe.getDouble(o, offset);
-    this.unsafe.putDouble(o, offset, v);
+    unsafe.putDouble(o, offset, v);
-    return this.unsafe.getObject(o, offset);
+    return unsafe.getObject(o, offset);
-    this.unsafe.putObject(o, offset, v);
+    unsafe.putObject(o, offset, v);
-    return this.unsafe.allocateInstance(c);
+    return unsafe.allocateInstance(c);
-    return this.unsafe.allocateMemory(size);
+    return unsafe.allocateMemory(size);
-    return this.unsafe.getByte(addr);
+    return unsafe.getByte(addr);
-    this.unsafe.putByte(addr, value);
+    unsafe.putByte(addr, value);
-    this.unsafe.copyMemory(o1, addr1, o2, addr2, size);
+    unsafe.copyMemory(o1, addr1, o2, addr2, size);
-    this.unsafe.copyMemory(src, dst, size);
+    unsafe.copyMemory(src, dst, size);
-    this.unsafe.freeMemory(addr);
+    unsafe.freeMemory(addr);
-    return this.unsafe.arrayBaseOffset(c);
+    return unsafe.arrayBaseOffset(c);
-    return this.unsafe.arrayIndexScale(c);
+    return unsafe.arrayIndexScale(c);
-    return this.unsafe.objectFieldOffset(f);
+    return unsafe.objectFieldOffset(f);
-    return this.unsafe.pageSize();
+    return unsafe.pageSize();
-    this.unsafe.setMemory(addr, size, v);
+    unsafe.setMemory(addr, size, v);
+  }
+
+  public int arrayIndexScale(Class<?> arrayClass) {
+    return unsafe.arrayIndexScale(arrayClass);
+  }
+
+  public Object getObjectVolatile(Object o, long offset) {
+    return unsafe.getObjectVolatile(o, offset);
+  }
+
+  public boolean compareAndSwapObject(Object o, long offset, Object expected, Object x) {
+    return unsafe.compareAndSwapObject(o, offset, expected, x);
+  }
+
+  public void putOrderedObject(Object o, long offset, Object x) {
+    unsafe.putOrderedObject(o, offset, x);
