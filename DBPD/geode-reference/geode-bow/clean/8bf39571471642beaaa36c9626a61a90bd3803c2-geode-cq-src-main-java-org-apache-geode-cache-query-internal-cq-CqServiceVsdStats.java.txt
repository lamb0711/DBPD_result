Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class tracks GemFire statistics related to CqService.
- * Specifically the following statistics are tracked:
- *      Number of CQs created
- *      Number of active CQs
- *      Number of CQs suspended or stopped
- *      Number of CQs closed
- *      Number of CQs on a client 
+ * This class tracks GemFire statistics related to CqService. Specifically the following statistics
+ * are tracked: Number of CQs created Number of active CQs Number of CQs suspended or stopped Number
+ * of CQs closed Number of CQs on a client
-public class CqServiceVsdStats
-{
+public class CqServiceVsdStats {
-  
+
-  
+
-  
+
-  
+
-  
+
-    _type = f.createType(statName, statName, new StatisticDescriptor[] {
-        f.createLongCounter(CQS_CREATED, "Number of CQs created.", "operations"),
-        f.createLongCounter(CQS_ACTIVE, "Number of CQS actively executing.", "operations"),
-        f.createLongCounter(CQS_STOPPED, "Number of CQs stopped.", "operations"),
-        f.createLongCounter(CQS_CLOSED, "Number of CQs closed.", "operations"),
-        f.createLongCounter(CQS_ON_CLIENT, "Number of CQs on the client.", "operations"),
-        f.createLongCounter(CLIENTS_WITH_CQS, "Number of Clients with CQs.", "operations"),
-        f.createLongCounter(CQ_QUERY_EXECUTION_TIME, "Time taken for CQ Query Execution.", "nanoseconds"),
-        f.createLongCounter(CQ_QUERY_EXECUTIONS_COMPLETED, "Number of CQ Query Executions.", "operations"),
-        f.createIntGauge(CQ_QUERY_EXECUTION_IN_PROGRESS, "CQ Query Execution In Progress.", "operations"),
-        f.createIntGauge(UNIQUE_CQ_QUERY, "Number of Unique CQ Querys.", "Queries"),
+    _type = f.createType(statName, statName,
+        new StatisticDescriptor[] {
+            f.createLongCounter(CQS_CREATED, "Number of CQs created.", "operations"),
+            f.createLongCounter(CQS_ACTIVE, "Number of CQS actively executing.", "operations"),
+            f.createLongCounter(CQS_STOPPED, "Number of CQs stopped.", "operations"),
+            f.createLongCounter(CQS_CLOSED, "Number of CQs closed.", "operations"),
+            f.createLongCounter(CQS_ON_CLIENT, "Number of CQs on the client.", "operations"),
+            f.createLongCounter(CLIENTS_WITH_CQS, "Number of Clients with CQs.", "operations"),
+            f.createLongCounter(CQ_QUERY_EXECUTION_TIME, "Time taken for CQ Query Execution.",
+                "nanoseconds"),
+            f.createLongCounter(CQ_QUERY_EXECUTIONS_COMPLETED, "Number of CQ Query Executions.",
+                "operations"),
+            f.createIntGauge(CQ_QUERY_EXECUTION_IN_PROGRESS, "CQ Query Execution In Progress.",
+                "operations"),
+            f.createIntGauge(UNIQUE_CQ_QUERY, "Number of Unique CQ Querys.", "Queries"),
-    });
+        });
-    _cqQueryExecutionTimeId = _type.nameToId(CQ_QUERY_EXECUTION_TIME);    
+    _cqQueryExecutionTimeId = _type.nameToId(CQ_QUERY_EXECUTION_TIME);
-    
+
-   * @param factory
-   *          The <code>StatisticsFactory</code> which creates the
-   *          <code>Statistics</code> instance
+   * @param factory The <code>StatisticsFactory</code> which creates the <code>Statistics</code>
+   *        instance
-  public void close()
-  {
+  public void close() {
-  public long getNumCqsCreated()
-  {
+  public long getNumCqsCreated() {
-  public void incCqsCreated()
-  {
+  public void incCqsCreated() {
-  public long getNumCqsActive()
-  {
+  public long getNumCqsActive() {
-  public void incCqsActive()
-  {
+  public void incCqsActive() {
-  
+
-  public void decCqsActive()
-  {
+  public void decCqsActive() {
-  
+
-  public long getNumCqsStopped()
-  {
+  public long getNumCqsStopped() {
-  public void incCqsStopped()
-  {
+  public void incCqsStopped() {
-  public void decCqsStopped()
-  {
+  public void decCqsStopped() {
-  public long getNumCqsClosed()
-  {
+  public long getNumCqsClosed() {
-  public void incCqsClosed()
-  {
+  public void incCqsClosed() {
-  public long getNumCqsOnClient()
-  {
+  public long getNumCqsOnClient() {
-  public void incCqsOnClient()
-  {
+  public void incCqsOnClient() {
-  
+
-  public void decCqsOnClient()
-  {
+  public void decCqsOnClient() {
-  
+
-  public long getNumClientsWithCqs()
-  {
+  public long getNumClientsWithCqs() {
-  public void incClientsWithCqs()
-  {
+  public void incClientsWithCqs() {
-  
+
-  public void decClientsWithCqs()
-  {
+  public void decClientsWithCqs() {
-  
+
-    return NanoTimer.getTime(); 
+    return NanoTimer.getTime();
+   * 
-    long ts = NanoTimer.getTime(); 
-    this._stats.incLong(_cqQueryExecutionTimeId, ts-start);
+    long ts = NanoTimer.getTime();
+    this._stats.incLong(_cqQueryExecutionTimeId, ts - start);
-  
+
+   * 
-  public long getCqQueryExecutionTime(){
+  public long getCqQueryExecutionTime() {
-  public void incUniqueCqQuery()
-  {
+  public void incUniqueCqQuery() {
-  public void decUniqueCqQuery()
-  {
+  public void decUniqueCqQuery() {
-  
-  
+
+
-   * This is a test method.  It silently ignores exceptions and should not be
-   * used outside of unit tests.<p>
+   * This is a test method. It silently ignores exceptions and should not be used outside of unit
+   * tests.
+   * <p>
+   * 
-  public long numCqsOnRegion(String regionName){
+  public long numCqsOnRegion(String regionName) {
-    DefaultQueryService queryService = (DefaultQueryService)cache.getQueryService();
+    DefaultQueryService queryService = (DefaultQueryService) cache.getQueryService();
-    }
-    catch (CqException e) {
+    } catch (CqException e) {
-      //If we are on the server, look at the number of CQs in the filter profile.
+      // If we are on the server, look at the number of CQs in the filter profile.
-      }
-      catch (Exception ex) {
+      } catch (Exception ex) {
-          logger.debug("Failed to get serverside CQ count for region: {} {}", regionName, ex.getLocalizedMessage());
+          logger.debug("Failed to get serverside CQ count for region: {} {}", regionName,
+              ex.getLocalizedMessage());
-    }
-    else {
+    } else {
-        
+
-      } catch(Exception ex) {
+      } catch (Exception ex) {
-  } 
+  }
