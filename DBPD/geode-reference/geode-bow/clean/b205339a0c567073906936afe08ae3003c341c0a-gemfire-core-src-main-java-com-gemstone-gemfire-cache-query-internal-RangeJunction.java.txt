Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.cache.query.Struct;
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false;   
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1;
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-        if (useLinkedSet) {
-          set = new LinkedStructSet((StructTypeImpl)resultType) ;
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+          : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-          set = (SelectResults)new StructBag((StructTypeImpl)resultType,
-                                           context.getCachePerfStats());
+          set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-        if (useLinkedSet) {
-          set = new LinkedResultSet(resultType); 
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,
+              nullValuesAtStart); 
-          set = new ResultsBag(resultType, context.getCachePerfStats());
+          set = QueryUtils.createResultCollection(context, resultType);
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false;
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1; 
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-        if (useLinkedSet) {
-          set = new LinkedStructSet((StructTypeImpl)resultType);
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+          : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-          set = (SelectResults)new StructBag((StructTypeImpl)resultType,
-              context.getCachePerfStats());
+          set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-        if (useLinkedSet) {
-          set = new LinkedResultSet(resultType); 
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,
+              nullValuesAtStart); 
-          set = new ResultsBag(resultType, context.getCachePerfStats());
+          set = QueryUtils.createResultCollection(context, resultType);
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false; 
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1;
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-        if(useLinkedSet) {
-          set = new LinkedStructSet((StructTypeImpl)resultType);
+        if(useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+          : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-          set = new StructBag((StructTypeImpl)resultType,
-                                           context.getCachePerfStats());
+          set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-        if (useLinkedSet) {
-          set = new  LinkedResultSet(resultType); 
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new  LinkedResultSet(resultType): 
+            new SortedResultsBag(resultType, nullValuesAtStart); 
-          set = new ResultsBag(resultType, context.getCachePerfStats());
+          set = QueryUtils.createResultCollection(context, resultType);
