Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Bridge to collect data from all the proxies from a named region.
- * MBeanAggregator will create this bridge and inject it into a
- * DistributedRegionMBean
+ * Bridge to collect data from all the proxies from a named region. MBeanAggregator will create this
+ * bridge and inject it into a DistributedRegionMBean
-  
+
-  
+
-   * @param objectName
-   *          Name of the MBean
-   * @param proxy
-   *          reference to the actual proxy
+   * @param objectName Name of the MBean
+   * @param proxy reference to the actual proxy
-   * @param objectName
-   *          name of the MBean
-   * @param proxy
-   *          reference to the actual proxy
+   * @param objectName name of the MBean
+   * @param proxy reference to the actual proxy
-  public void addProxyToMap(ObjectName objectName, RegionMXBean proxy,  FederationComponent newState) {
+  public void addProxyToMap(ObjectName objectName, RegionMXBean proxy,
+      FederationComponent newState) {
-   * @param objectName
-   *          name of the MBean
-   * @param proxy
-   *          reference to the actual proxy
+   * @param objectName name of the MBean
+   * @param proxy reference to the actual proxy
-  public boolean removeProxyFromMap(ObjectName objectName, RegionMXBean proxy, FederationComponent oldState) {
+  public boolean removeProxyFromMap(ObjectName objectName, RegionMXBean proxy,
+      FederationComponent oldState) {
-  
-  public void updateRegion(FederationComponent newState,
-      FederationComponent oldState) {
+
+  public void updateRegion(FederationComponent newState, FederationComponent oldState) {
-          try{
+          try {
-          }catch(Exception e){
+          } catch (Exception e) {
-          if(evictionAttributesData != null){
+          if (evictionAttributesData != null) {
-          
+
-   * @return fixed partition attributes of a partition region if its fixed
-   *         partitioned
+   * @return fixed partition attributes of a partition region if its fixed partitioned
-            this.fixedPartitionAttributesTable = it.next()
-                .listFixedPartitionAttributes();
+            this.fixedPartitionAttributesTable = it.next().listFixedPartitionAttributes();
-    Iterator<ObjectName> it = mapOfProxy.keySet().iterator();    
+    Iterator<ObjectName> it = mapOfProxy.keySet().iterator();
-     String[] members = new String[memberList.size()];
-     return memberList.toArray(members);
+      String[] members = new String[memberList.size()];
+      return memberList.toArray(members);
-          try{
+          try {
-          }catch(Exception e){
+          } catch (Exception e) {
-          if(membershipAttributesData != null){
+          if (membershipAttributesData != null) {
-          
+
-   * {@link DistributedRegionMXBean}. If <code>recursive</code> is
-   * <code>true</code>, will return sub-regions by traversing recursively.
+   * {@link DistributedRegionMXBean}. If <code>recursive</code> is <code>true</code>, will return
+   * sub-regions by traversing recursively.
-   * @param recursive
-   *          if <code>true</code>, recursively traverses to find sub regions.
+   * @param recursive if <code>true</code>, recursively traverses to find sub regions.
-    
+
-        subRegionPaths.addAll(Arrays.asList(listSubRegionPaths)); // Little cosly, but how can it be avoided?
+        subRegionPaths.addAll(Arrays.asList(listSubRegionPaths)); // Little cosly, but how can it be
+                                                                  // avoided?
-          try{
+          try {
-          }catch(Exception e){
+          } catch (Exception e) {
-          if(partitionAttributesData != null){
+          if (partitionAttributesData != null) {
-          
+
-          try{
+          try {
-          }catch(Exception e){
+          } catch (Exception e) {
-          if(regionAttributesData != null){
+          if (regionAttributesData != null) {
-          
+
-    return MetricsCalculator.getAverage(monitor
-        .getCacheListenerCallsAvgLatency(), setSize);
+    return MetricsCalculator.getAverage(monitor.getCacheListenerCallsAvgLatency(), setSize);
-    return MetricsCalculator.getAverage(monitor
-        .getCacheWriterCallsAvgLatency(), setSize);
+    return MetricsCalculator.getAverage(monitor.getCacheWriterCallsAvgLatency(), setSize);
- 
+
-    if(isPartionedRegion()){
+    if (isPartionedRegion()) {
-    if(isPartionedRegion()){
+    if (isPartionedRegion()) {
-    if(isPartionedRegion()){
+    if (isPartionedRegion()) {
-    if(isPartionedRegion()){
+    if (isPartionedRegion()) {
-   * @return entries destroyed rate in the region through both destroy cache
-   *         operations and eviction.
+   * @return entries destroyed rate in the region through both destroy cache operations and
+   *         eviction.
-    if(isPartionedRegion()){
+    if (isPartionedRegion()) {
-    return MetricsCalculator.getAverage(monitor
-        .getPutRemoteAvgLatency(), setSize);
+    return MetricsCalculator.getAverage(monitor.getPutRemoteAvgLatency(), setSize);
-    return MetricsCalculator.getAverage(monitor
-        .getPutRemoteLatency(), setSize);
+    return MetricsCalculator.getAverage(monitor.getPutRemoteLatency(), setSize);
- 
+
-    if (isPartionedRegion()) {      
+    if (isPartionedRegion()) {
-   * @return The current number of entries whose value resides in the VM. The
-   *         value may also have been written to disk.
+   * @return The current number of entries whose value resides in the VM. The value may also have
+   *         been written to disk.
-   * @return The current number of entries whose value is on disk and is not in
-   *         memory. This is true of overflowed entries. It is also true of
-   *         recovered entries that have not yet been faulted in.
+   * @return The current number of entries whose value is on disk and is not in memory. This is true
+   *         of overflowed entries. It is also true of recovered entries that have not yet been
+   *         faulted in.
-  
+
+
+
-  
+
-  
+
-  private boolean isPartionedRegion(){
-    if(getPartitionAttributes() != null){
+  private boolean isPartionedRegion() {
+    if (getPartitionAttributes() != null) {
-    }else{
+    } else {
