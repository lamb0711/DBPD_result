Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The MiscellaneousCommandsController class implements GemFire Management REST API web service endpoints for the
- * Gfsh Miscellaneous Commands.
+ * The MiscellaneousCommandsController class implements GemFire Management REST API web service
+ * endpoints for the Gfsh Miscellaneous Commands.
+ * 
-  public Callable<ResponseEntity<String>> exportLogs(@RequestParam(CliStrings.EXPORT_LOGS__DIR) final String directory,
-                                                     @RequestParam(value = CliStrings.EXPORT_LOGS__GROUP, required = false) final String[] groups,
-                                                     @RequestParam(value = CliStrings.EXPORT_LOGS__MEMBER, required = false) final String memberNameId,
-                                                     @RequestParam(value = CliStrings.EXPORT_LOGS__LOGLEVEL, required = false) final String logLevel,
-                                                     @RequestParam(value = CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL, defaultValue = "false") final Boolean onlyLogLevel,
-                                                     @RequestParam(value = CliStrings.EXPORT_LOGS__MERGELOG, defaultValue = "false") final Boolean mergeLog,
-                                                     @RequestParam(value = CliStrings.EXPORT_LOGS__STARTTIME, required = false) final String startTime,
-                                                     @RequestParam(value = CliStrings.EXPORT_LOGS__ENDTIME, required = false) final String endTime)
-  {
+  public Callable<ResponseEntity<String>> exportLogs(
+      @RequestParam(CliStrings.EXPORT_LOGS__DIR) final String directory,
+      @RequestParam(value = CliStrings.EXPORT_LOGS__GROUP, required = false) final String[] groups,
+      @RequestParam(value = CliStrings.EXPORT_LOGS__MEMBER,
+          required = false) final String memberNameId,
+      @RequestParam(value = CliStrings.EXPORT_LOGS__LOGLEVEL,
+          required = false) final String logLevel,
+      @RequestParam(value = CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL,
+          defaultValue = "false") final Boolean onlyLogLevel,
+      @RequestParam(value = CliStrings.EXPORT_LOGS__MERGELOG,
+          defaultValue = "false") final Boolean mergeLog,
+      @RequestParam(value = CliStrings.EXPORT_LOGS__STARTTIME,
+          required = false) final String startTime,
+      @RequestParam(value = CliStrings.EXPORT_LOGS__ENDTIME,
+          required = false) final String endTime) {
-      command.addOption(CliStrings.EXPORT_LOGS__GROUP, StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.EXPORT_LOGS__GROUP,
+          StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
-    command.addOption(CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL, String.valueOf(Boolean.TRUE.equals(onlyLogLevel)));
-    command.addOption(CliStrings.EXPORT_LOGS__MERGELOG, String.valueOf(Boolean.TRUE.equals(mergeLog)));
+    command.addOption(CliStrings.EXPORT_LOGS__UPTO_LOGLEVEL,
+        String.valueOf(Boolean.TRUE.equals(onlyLogLevel)));
+    command.addOption(CliStrings.EXPORT_LOGS__MERGELOG,
+        String.valueOf(Boolean.TRUE.equals(mergeLog)));
-  public String exportStackTraces(@RequestParam(value = CliStrings.EXPORT_STACKTRACE__FILE) final String file,
-                                  @RequestParam(value = CliStrings.EXPORT_STACKTRACE__GROUP, required = false) final String groupName,
-                                  @RequestParam(value = CliStrings.EXPORT_STACKTRACE__MEMBER, required = false) final String memberNameId) {
+  public String exportStackTraces(
+      @RequestParam(value = CliStrings.EXPORT_STACKTRACE__FILE) final String file,
+      @RequestParam(value = CliStrings.EXPORT_STACKTRACE__GROUP,
+          required = false) final String groupName,
+      @RequestParam(value = CliStrings.EXPORT_STACKTRACE__MEMBER,
+          required = false) final String memberNameId) {
-  public String gc(@RequestParam(value = CliStrings.GC__GROUP, required = false) final String[] groups) {
+  public String gc(
+      @RequestParam(value = CliStrings.GC__GROUP, required = false) final String[] groups) {
-      command.addOption(CliStrings.GC__GROUP, StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.GC__GROUP,
+          StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
-  public String netstat(@RequestParam(value = CliStrings.NETSTAT__MEMBER, required= false) final String[] members,
-                        @RequestParam(value = CliStrings.NETSTAT__GROUP, required = false) final String group,
-                        @RequestParam(value = CliStrings.NETSTAT__FILE, required = false) final String file,
-                        @RequestParam(value = CliStrings.NETSTAT__WITHLSOF, defaultValue = "false") final Boolean withLsof)
-  {
+  public String netstat(
+      @RequestParam(value = CliStrings.NETSTAT__MEMBER, required = false) final String[] members,
+      @RequestParam(value = CliStrings.NETSTAT__GROUP, required = false) final String group,
+      @RequestParam(value = CliStrings.NETSTAT__FILE, required = false) final String file,
+      @RequestParam(value = CliStrings.NETSTAT__WITHLSOF,
+          defaultValue = "false") final Boolean withLsof) {
-  public String showDeadLock(@RequestParam(CliStrings.SHOW_DEADLOCK__DEPENDENCIES__FILE) final String dependenciesFile) {
+  public String showDeadLock(
+      @RequestParam(CliStrings.SHOW_DEADLOCK__DEPENDENCIES__FILE) final String dependenciesFile) {
-                        @RequestParam(value = CliStrings.SHOW_LOG_LINE_NUM, defaultValue = "0") final Integer lines)
-  {
+      @RequestParam(value = CliStrings.SHOW_LOG_LINE_NUM, defaultValue = "0") final Integer lines) {
-  public String showMetrics(@RequestParam(value = CliStrings.SHOW_METRICS__MEMBER, required = false) final String memberNameId,
-                            @RequestParam(value = CliStrings.SHOW_METRICS__REGION, required = false) final String regionNamePath,
-                            @RequestParam(value = CliStrings.SHOW_METRICS__FILE, required = false) final String file,
-                            @RequestParam(value = CliStrings.SHOW_METRICS__CACHESERVER__PORT, required = false) final String cacheServerPort,
-                            @RequestParam(value = CliStrings.SHOW_METRICS__CATEGORY, required = false) final String[] categories)
-  {
+  public String showMetrics(
+      @RequestParam(value = CliStrings.SHOW_METRICS__MEMBER,
+          required = false) final String memberNameId,
+      @RequestParam(value = CliStrings.SHOW_METRICS__REGION,
+          required = false) final String regionNamePath,
+      @RequestParam(value = CliStrings.SHOW_METRICS__FILE, required = false) final String file,
+      @RequestParam(value = CliStrings.SHOW_METRICS__CACHESERVER__PORT,
+          required = false) final String cacheServerPort,
+      @RequestParam(value = CliStrings.SHOW_METRICS__CATEGORY,
+          required = false) final String[] categories) {
-      command.addOption(CliStrings.SHOW_METRICS__CATEGORY, StringUtils.concat(categories, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.SHOW_METRICS__CATEGORY,
+          StringUtils.concat(categories, StringUtils.COMMA_DELIMITER));
-  public String shutdown(@RequestParam(value = CliStrings.SHUTDOWN__TIMEOUT, defaultValue = "-1") final Integer timeout,
-                         @RequestParam(value = CliStrings.INCLUDE_LOCATORS, defaultValue = "false") final boolean includeLocators) {
+  public String shutdown(
+      @RequestParam(value = CliStrings.SHUTDOWN__TIMEOUT,
+          defaultValue = "-1") final Integer timeout,
+      @RequestParam(value = CliStrings.INCLUDE_LOCATORS,
+          defaultValue = "false") final boolean includeLocators) {
-  // TODO determine whether the {groups} and {members} path variables corresponding to the --groups and --members
-  // command-line options in the 'change loglevel' Gfsh command actually accept multiple values, and...
+  // TODO determine whether the {groups} and {members} path variables corresponding to the --groups
+  // and --members
+  // command-line options in the 'change loglevel' Gfsh command actually accept multiple values,
+  // and...
-                                        @RequestParam(value = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL, required = true) final String logLevel)
-  {
+      @RequestParam(value = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL,
+          required = true) final String logLevel) {
-                                         @RequestParam(value = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL, required = true) final String logLevel)
-  {
+      @RequestParam(value = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL,
+          required = true) final String logLevel) {
-  @RequestMapping(method = RequestMethod.POST, value = "/members/{members}/groups/{groups}/loglevel")
+  @RequestMapping(method = RequestMethod.POST,
+      value = "/members/{members}/groups/{groups}/loglevel")
-                                                  @PathVariable("groups") final String groups,
-                                                  @RequestParam(value = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL) final String logLevel)
-  {
+      @PathVariable("groups") final String groups,
+      @RequestParam(value = CliStrings.CHANGE_LOGLEVEL__LOGLEVEL) final String logLevel) {
-  private String internalChangeLogLevel(final String groups, final String members, final String logLevel) {
+  private String internalChangeLogLevel(final String groups, final String members,
+      final String logLevel) {
