Merge branch 'develop' into feature/GEODE-17-2

# Conflicts:
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/CreateAlterDestroyRegionCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/DiskStoreCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/GemfireDataCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/IndexCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ListAndDescribeRegionDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsExportLogsPart3DUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ShellCommandsDUnitTest.java

-package io.pivotal.gemfire.spark.connector.javaapi;
+package io.pivotal.geode.spark.connector.javaapi;
-import io.pivotal.gemfire.spark.connector.package$;
+import io.pivotal.geode.spark.connector.package$;
- * The main entry point to Spark GemFire Connector Java API.
+ * The main entry point to Spark Geode Connector Java API.
-public final class GemFireJavaUtil {
+public final class GeodeJavaUtil {
-  public static String GemFireLocatorPropKey = package$.MODULE$.GemFireLocatorPropKey();
+  public static String GeodeLocatorPropKey = package$.MODULE$.GeodeLocatorPropKey();
-  private GemFireJavaUtil() { }
+  private GeodeJavaUtil() { }
-   * A static factory method to create a {@link GemFireJavaSparkContextFunctions} based
+   * A static factory method to create a {@link GeodeJavaSparkContextFunctions} based
-  public static GemFireJavaSparkContextFunctions javaFunctions(SparkContext sc) {
-    return new GemFireJavaSparkContextFunctions(sc);
+  public static GeodeJavaSparkContextFunctions javaFunctions(SparkContext sc) {
+    return new GeodeJavaSparkContextFunctions(sc);
-   * A static factory method to create a {@link GemFireJavaSparkContextFunctions} based
+   * A static factory method to create a {@link GeodeJavaSparkContextFunctions} based
-  public static GemFireJavaSparkContextFunctions javaFunctions(JavaSparkContext jsc) {
-    return new GemFireJavaSparkContextFunctions(JavaSparkContext.toSparkContext(jsc));
+  public static GeodeJavaSparkContextFunctions javaFunctions(JavaSparkContext jsc) {
+    return new GeodeJavaSparkContextFunctions(JavaSparkContext.toSparkContext(jsc));
-   * A static factory method to create a {@link GemFireJavaPairRDDFunctions} based on an
+   * A static factory method to create a {@link GeodeJavaPairRDDFunctions} based on an
-  public static <K, V> GemFireJavaPairRDDFunctions<K, V> javaFunctions(JavaPairRDD<K, V> rdd) {
-    return new GemFireJavaPairRDDFunctions<K, V>(rdd);
+  public static <K, V> GeodeJavaPairRDDFunctions<K, V> javaFunctions(JavaPairRDD<K, V> rdd) {
+    return new GeodeJavaPairRDDFunctions<K, V>(rdd);
-   * A static factory method to create a {@link GemFireJavaRDDFunctions} based on an
+   * A static factory method to create a {@link GeodeJavaRDDFunctions} based on an
-  public static <T> GemFireJavaRDDFunctions<T> javaFunctions(JavaRDD<T> rdd) {
-    return new GemFireJavaRDDFunctions<T>(rdd);
+  public static <T> GeodeJavaRDDFunctions<T> javaFunctions(JavaRDD<T> rdd) {
+    return new GeodeJavaRDDFunctions<T>(rdd);
-   * A static factory method to create a {@link GemFireJavaPairDStreamFunctions} based on an
+   * A static factory method to create a {@link GeodeJavaPairDStreamFunctions} based on an
-  public static <K, V> GemFireJavaPairDStreamFunctions<K, V> javaFunctions(JavaPairDStream<K, V> ds) {
-    return new GemFireJavaPairDStreamFunctions<>(ds);
+  public static <K, V> GeodeJavaPairDStreamFunctions<K, V> javaFunctions(JavaPairDStream<K, V> ds) {
+    return new GeodeJavaPairDStreamFunctions<>(ds);
-   * A static factory method to create a {@link GemFireJavaDStreamFunctions} based on an
+   * A static factory method to create a {@link GeodeJavaDStreamFunctions} based on an
-  public static <T> GemFireJavaDStreamFunctions<T> javaFunctions(JavaDStream<T> ds) {
-    return new GemFireJavaDStreamFunctions<>(ds);
+  public static <T> GeodeJavaDStreamFunctions<T> javaFunctions(JavaDStream<T> ds) {
+    return new GeodeJavaDStreamFunctions<>(ds);
-   * A static factory method to create a {@link GemFireJavaSQLContextFunctions} based
+   * A static factory method to create a {@link GeodeJavaSQLContextFunctions} based
-  public static GemFireJavaSQLContextFunctions javaFunctions(SQLContext sqlContext) {
-    return new GemFireJavaSQLContextFunctions(sqlContext);
+  public static GeodeJavaSQLContextFunctions javaFunctions(SQLContext sqlContext) {
+    return new GeodeJavaSQLContextFunctions(sqlContext);
