GEODE-6853: Do not request region sync during message processing. (#3696)

* Move schedule region synchronize message to DistriubtedRegion.
 * Use the time task to request region sync with no deplay when processing reion sync message.
-import org.apache.geode.internal.SystemTimer;
-    final long delay = dr.getGemFireCache().getCacheServers().stream()
-        .mapToLong(CacheServer::getMaximumTimeBetweenPings).max().orElse(0L);
-    dr.getGemFireCache().getCCPTimer().schedule(new SystemTimer.SystemTimerTask() {
-      @Override
-      public void run2() {
-        while (!dr.isInitialized()) {
-          if (dr.isDestroyed()) {
-            return;
-          } else {
-            try {
-              if (isDebugEnabled) {
-                logger.debug(
-                    "da.syncForCrashedMember waiting for region to finish initializing: {}", dr);
-              }
-              Thread.sleep(100);
-            } catch (InterruptedException e) {
-              return;
-            }
-          }
-        }
-        if (dr.getDataPolicy().withPersistence() && persistentId == null) {
-          // Fix for 46704. The lost member may be a replicate
-          // or an empty accessor. We don't need to do a synchronization
-          // in that case, because those members send their writes to
-          // a persistent member.
-          if (isDebugEnabled) {
-            logger.debug(
-                "da.syncForCrashedMember skipping sync because crashed member is not persistent: {}",
-                id);
-          }
-          return;
-        }
-        dr.synchronizeForLostMember(id, lostVersionID);
-      }
-    }, delay);
+    final long delay = getDelay(dr);
+    dr.scheduleSynchronizeForLostMember(id, lostVersionID, delay);
-  private PersistentMemberID getPersistentID(CacheProfile cp) {
+  PersistentMemberID getPersistentID(CacheProfile cp) {
+  long getDelay(DistributedRegion dr) {
+    return dr.getGemFireCache().getCacheServers().stream()
+        .mapToLong(CacheServer::getMaximumTimeBetweenPings).max().orElse(0L);
+  }
+
