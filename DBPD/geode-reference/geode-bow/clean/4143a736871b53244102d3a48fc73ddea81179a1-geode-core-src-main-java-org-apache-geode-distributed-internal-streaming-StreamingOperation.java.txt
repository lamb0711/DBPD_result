GEODE-4685: Moving of static DefaultQuery.setPdxReadSerialized to the TypeRegistry.
Cleaned up the overriding of readSerialized to reset to previous value.
Added cache to AbstractJdbcCallback.java so that children classes can access it.
Replaced AtomicLong with LongAdder.

+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.pdx.internal.TypeRegistry;
- *
-  /** Creates a new instance of StreamingOperation */
+  /**
+   * Creates a new instance of StreamingOperation
+   */
-    if (Thread.interrupted())
+    if (Thread.interrupted()) {
-    if (recipients.isEmpty())
+    }
+    if (recipients.isEmpty()) {
+    }
-  /** Override in subclass to instantiate request message */
+  /**
+   * Override in subclass to instantiate request message
+   */
-      StreamingReplyMessage m = new StreamingReplyMessage();
-      m.processorId = processorId;
+      StreamingReplyMessage replyMessage = new StreamingReplyMessage();
+      replyMessage.processorId = processorId;
-        m.setException(exception);
-        logger.debug("Replying with exception: {}", m, exception);
+        replyMessage.setException(exception);
+        logger.debug("Replying with exception: {}", replyMessage, exception);
-      m.chunkStream = chunkStream;
-      m.numObjects = numObjects;
-      m.setRecipient(recipient);
-      m.msgNum = msgNum;
-      m.lastMsg = lastMsg;
-      m.pdxReadSerialized = pdxReadSerialized;
-      dm.putOutgoing(m);
+      replyMessage.chunkStream = chunkStream;
+      replyMessage.numObjects = numObjects;
+      replyMessage.setRecipient(recipient);
+      replyMessage.msgNum = msgNum;
+      replyMessage.lastMsg = lastMsg;
+      replyMessage.pdxReadSerialized = pdxReadSerialized;
+      dm.putOutgoing(replyMessage);
+      InternalCache cache = null;
+      Boolean initialPdxReadSerialized = false;
+      try {
+        cache =
+            (InternalCache) GemFireCacheImpl.getForPdx("fromData invocation in StreamingOperation");
+        initialPdxReadSerialized = cache.getPdxReadSerializedOverride();
+      } catch (CacheClosedException e) {
+        logger.debug("Cache is closed. PdxReadSerializedOverride set to false");
+      }
-        if (this.pdxReadSerialized) {
-          DefaultQuery.setPdxReadSerialized(true);
+        if (this.pdxReadSerialized && cache != null) {
+          cache.setPdxReadSerializedOverride(true);
-          if (this.pdxReadSerialized) {
-            DefaultQuery.setPdxReadSerialized(false);
+          if (this.pdxReadSerialized && cache != null) {
+            cache.setPdxReadSerializedOverride(initialPdxReadSerialized);
