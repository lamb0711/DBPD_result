Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A class which monitors the load on a bridge server and 
- * periodically sends updates to the locator.
+ * A class which monitors the load on a bridge server and periodically sends updates to the locator.
-  
+
-  public LoadMonitor(ServerLoadProbe probe, int maxConnections,
-      long pollInterval, int forceUpdateFrequency, CacheServerAdvisor advisor) {
+  public LoadMonitor(ServerLoadProbe probe, int maxConnections, long pollInterval,
+      int forceUpdateFrequency, CacheServerAdvisor advisor) {
- 
+
-   * Start the load monitor. Starts the background thread which
-   * polls the load monitor and sends updates about load.
+   * Start the load monitor. Starts the background thread which polls the load monitor and sends
+   * updates about load.
-      logger.warn(LocalizedMessage.create(LocalizedStrings.LoadMonitor_INTERRUPTED_WAITING_FOR_POLLING_THREAD_TO_FINISH));
+      logger.warn(LocalizedMessage
+          .create(LocalizedStrings.LoadMonitor_INTERRUPTED_WAITING_FOR_POLLING_THREAD_TO_FINISH));
-    if(communicationMode == Acceptor.CLIENT_TO_SERVER) {
+    if (communicationMode == Acceptor.CLIENT_TO_SERVER) {
-    if(lastConnection) {
+    if (lastConnection) {
-  
+
-    //ignore all other types of client connections.
-    if(communicationMode == Acceptor.CLIENT_TO_SERVER) {
+    // ignore all other types of client connections.
+    if (communicationMode == Acceptor.CLIENT_TO_SERVER) {
-    if(firstConnection) {
+    if (firstConnection) {
-   * Keeps track of the clients that have added a queue since the
-   * last load was sent to the server-locator.
+   * Keeps track of the clients that have added a queue since the last load was sent to the
+   * server-locator.
+   * 
-  
+
-    if(load == null) {
+    if (load == null) {
-  
+
-    
+
-      super("BridgeServer-LoadPollingThread");
+      super("Cache Server Load Polling Thread");
-    
+
-      synchronized(signal) {
+      synchronized (signal) {
-      while(alive) {
+      while (alive) {
-          synchronized(signal) {
+          synchronized (signal) {
-            while(alive && remaining > 0) {
+            while (alive && remaining > 0) {
-          
-          if(!alive) {
+
+          if (!alive) {
-          
+
-          
+
-          if (!previousLoad.equals(load)
-              || myClientIds != null
+          if (!previousLoad.equals(load) || myClientIds != null
-            
+
-              logger.debug("Bridge Server Load Monitor Transmitting load {} to locators {}", load, locators);
+              logger.debug("Bridge Server Load Monitor Transmitting load {} to locators {}", load,
+                  locators);
-            
+
-                new CacheServerLoadMessage(load, location, myClientIds);
+                  new CacheServerLoadMessage(load, location, myClientIds);
-              //Update any local locators
+              // Update any local locators
-          }
-          else {
+          } else {
-              logger.debug("Bridge Server Load Monitor Load {} hasn't changed, not transmitting. skippedLoadUpdates={}", load, skippedLoadUpdates);
+              logger.debug(
+                  "Bridge Server Load Monitor Load {} hasn't changed, not transmitting. skippedLoadUpdates={}",
+                  load, skippedLoadUpdates);
-        }
-        catch(InterruptedException e) {
+        } catch (InterruptedException e) {
-        }
-        catch(VirtualMachineError e) {
+        } catch (VirtualMachineError e) {
-        }
-        catch (CancelException e) {
+        } catch (CancelException e) {
-        }
-        catch(Throwable t) {
+        } catch (Throwable t) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.LoadMonitor_CACHESERVER_LOAD_MONITOR_ERROR_IN_POLLING_THREAD), t);
+          logger.warn(
+              LocalizedMessage.create(
+                  LocalizedStrings.LoadMonitor_CACHESERVER_LOAD_MONITOR_ERROR_IN_POLLING_THREAD),
+              t);
