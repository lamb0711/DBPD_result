Merge branch 'release/1.0.0-incubating.M3'

+import java.util.Iterator;
+import java.util.Map.Entry;
+import com.gemstone.gemfire.security.AuthenticationFailedException;
+import com.gemstone.gemfire.security.NotAuthorizedException;
- * 
- * @since 8.0
+ * @since GemFire 8.0
+
+  protected Map<String, String> securityProperties;
+
-   * Default, public, no-arg constructor to create an instance of the AbstractHttpOperationInvoker class 
+   * Default, public, no-arg constructor to create an instance of the AbstractHttpOperationInvoker class
-   * 
-   * @see #AbstractHttpOperationInvoker(com.gemstone.gemfire.management.internal.cli.shell.Gfsh, String)
+   * @see #AbstractHttpOperationInvoker(com.gemstone.gemfire.management.internal.cli.shell.Gfsh, String, Map)
-  public AbstractHttpOperationInvoker(final Gfsh gfsh) {
-    this(gfsh, REST_API_URL);
+  public AbstractHttpOperationInvoker(final Gfsh gfsh, Map<String, String> securityProperties) {
+    this(gfsh, REST_API_URL, securityProperties);
-   * 
-  public AbstractHttpOperationInvoker(final Gfsh gfsh, final String baseUrl) {
+  public AbstractHttpOperationInvoker(final Gfsh gfsh, final String baseUrl, Map<String, String> securityProperties) {
+    this.securityProperties = securityProperties;
-        final String message = String.format("The HTTP request failed with: %1$d - %2$s", response.getRawStatusCode(),
-          response.getStatusText());
-
-        gfsh.logSevere(message, null);
+        String body = readBody(response);
+        final String message = String.format("The HTTP request failed with: %1$d - %2$s.", response.getRawStatusCode(), body);
-          gfsh.logSevere(readBody(response), null);
+          gfsh.logSevere(body, null);
+        }
+
+        if (response.getRawStatusCode() == 401) {
+          throw new AuthenticationFailedException(message);
+        }
+        else if (response.getRawStatusCode() == 403) {
+          throw new NotAuthorizedException(message);
+        }
+        else {
+          throw new RuntimeException(message);
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-        getClass().getName());
+      getClass().getName());
-   * 
-   * 
-   * 
+
+    if (this.securityProperties != null) {
+      Iterator<Entry<String, String>> it = this.securityProperties.entrySet().iterator();
+      while (it.hasNext()) {
+        Entry<String, String> entry = it.next();
+        request.addHeaderValues(entry.getKey(), entry.getValue());
+      }
+    }
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-      + "Please try reconnecting or see the GemFire Manager's log file for further details.",
+        + "Please try reconnecting or see the GemFire Manager's log file for further details.",
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
+
+      printInfo("HTTP response body: ", response.getBody());
-   * 
-   * 
+
-   * 
-            resourceName, attributeName), e);
+          resourceName, attributeName), e);
-            resourceName, attributeName), e);
+          resourceName, attributeName), e);
-   * 
-   * 
-   * 
-   * 
-            resourceName, operationName), e);
+          resourceName, operationName), e);
-            resourceName, operationName), e);
+          resourceName, operationName), e);
-   * 
-            objectName, queryExpression), e);
+          objectName, queryExpression), e);
-      printSevere("Running a query to get the ObjectNames of all MBeans matching the ObjectName pattern (%1$s) and Query expression (%2$s) is currently unsupported!",
+      printSevere(
+        "Running a query to get the ObjectNames of all MBeans matching the ObjectName pattern (%1$s) and Query expression (%2$s) is currently unsupported!",
