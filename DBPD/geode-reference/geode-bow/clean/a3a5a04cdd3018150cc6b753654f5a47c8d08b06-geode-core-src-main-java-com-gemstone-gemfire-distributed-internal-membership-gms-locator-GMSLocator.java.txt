Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/test/java/com/gemstone/gemfire/cache30/DistributedMulticastRegionDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java

+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import com.gemstone.gemfire.distributed.internal.membership.InternalDistributedMember.InternalDistributedMemberWrapper;
+  private final String securityUDPDHAlgo; 
+  public Map<InternalDistributedMemberWrapper, byte[]> registerMbrVsPK = new ConcurrentHashMap<>();
+   * @param securityUDPDHAlgo DF algorithm 
-                      boolean networkPartitionDetectionEnabled, LocatorStats stats) {
+                      boolean networkPartitionDetectionEnabled, LocatorStats stats, String securityUDPDHAlgo) {
+    this.securityUDPDHAlgo = securityUDPDHAlgo;
-  public boolean setMembershipManager(MembershipManager mgr) {
+  public synchronized boolean setMembershipManager(MembershipManager mgr) {
+      this.notifyAll();
-  private void findServices() {
+  private synchronized void findServices() {
-  }
+    if(services == null) {
+      try {
+        wait(2000);
+      } catch (InterruptedException e) {
+      }
+    }
+  }  
+      findServices();
-      
+      if(!findRequest.getDHAlgo().equals(securityUDPDHAlgo)) {
+        return new FindCoordinatorResponse("Rejecting findCoordinatorRequest, as member not configured same udp security(" + findRequest.getDHAlgo() + " )as locator (" + securityUDPDHAlgo + ")");
+      }
+      if(services != null) {
+        services.getMessenger().setPublicKey(findRequest.getMyPublicKey(), findRequest.getMemberID());
+      } else {
+        //GMSEncrypt.registerMember(findRequest.getMyPublicKey(), findRequest.getMemberID());
+        registerMbrVsPK.put(new InternalDistributedMemberWrapper(findRequest.getMemberID()), findRequest.getMyPublicKey());
+      }
+          byte[] coordPk = null; 
+          if(view != null) {
+            coordPk = (byte[])view.getPublicKey(coord);            
+          }
+          if (coordPk == null) {
+            if(services != null){
+              coordPk = services.getMessenger().getPublicKey(coord);
+            } else {
+              //coordPk = GMSEncrypt.getRegisteredPublicKey(coord);
+              coordPk = registerMbrVsPK.get(new InternalDistributedMemberWrapper(coord));
+            }
+          }
-              fromView, view, new HashSet<>(registrants),
-              this.networkPartitionDetectionEnabled, this.usePreferredCoordinators);
+              fromView, view, new HashSet<InternalDistributedMember>(registrants),
+              this.networkPartitionDetectionEnabled, this.usePreferredCoordinators, 
+              coordPk);
+  public byte[] getPublicKey(InternalDistributedMember mbr) {
+    return registerMbrVsPK.get(new InternalDistributedMemberWrapper(mbr));
+  }
+  
+    registerMbrVsPK.clear();
