Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Take no chances on char to byte conversions with default charsets on jvms, 
-   * so we'll hard code the UTF-8 symbol values as bytes here
+   * Take no chances on char to byte conversions with default charsets on jvms, so we'll hard code
+   * the UTF-8 symbol values as bytes here
-  public static final ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc, List<String> items) {
+  public static final ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc,
+      List<String> items) {
-    while(it.hasNext()) {
+    while (it.hasNext()) {
-  public static final ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc, Collection<ByteArrayWrapper> items) {
+  public static final ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc,
+      Collection<ByteArrayWrapper> items) {
-    while(it.hasNext()) {
+    while (it.hasNext()) {
-  public static final ByteBuf getKeyValArrayResponse(ByteBufAllocator alloc, Collection<Entry<ByteArrayWrapper, ByteArrayWrapper>> items) {
-    Iterator<Map.Entry<ByteArrayWrapper,ByteArrayWrapper>> it = items.iterator();
+  public static final ByteBuf getKeyValArrayResponse(ByteBufAllocator alloc,
+      Collection<Entry<ByteArrayWrapper, ByteArrayWrapper>> items) {
+    Iterator<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> it = items.iterator();
-    while(it.hasNext()) {
-      Map.Entry<ByteArrayWrapper,ByteArrayWrapper> next = it.next();
+    while (it.hasNext()) {
+      Map.Entry<ByteArrayWrapper, ByteArrayWrapper> next = it.next();
-    response.writeBytes(intToBytes(size*2));
+    response.writeBytes(intToBytes(size * 2));
-    while(it.hasNext()) {
+    while (it.hasNext()) {
-  public static ByteBuf getBulkStringArrayResponseOfValues(ByteBufAllocator alloc, Collection<?> items) {
+  public static ByteBuf getBulkStringArrayResponseOfValues(ByteBufAllocator alloc,
+      Collection<?> items) {
-    while(it.hasNext()) {
+    while (it.hasNext()) {
-  public static ByteBuf zRangeResponse(ByteBufAllocator alloc, Collection<?> list, boolean withScores) {
+  public static ByteBuf zRangeResponse(ByteBufAllocator alloc, Collection<?> list,
+      boolean withScores) {
-    for(Object entry: list) {
+    for (Object entry : list) {
-   * These toByte methods convert to byte arrays of the
-   * string representation of the input, not literal to byte
+   * These toByte methods convert to byte arrays of the string representation of the input, not
+   * literal to byte
-   * A conversion where the byte array actually represents a string,
-   * so it is converted as a string not as a literal double
+   * A conversion where the byte array actually represents a string, so it is converted as a string
+   * not as a literal double
+   * 
+   * 
