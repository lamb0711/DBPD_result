GEODE-6990: Add xml persistence for OQL authorization (#4161)

- Added new cache.xml infrastructure for query-config-service including the
method authorizer
- Added a new CacheService QueryConfigurationService to store long
lasting configuration details for the QueryService
- Added testing for both of the above

Co-authored-by: Benjamin Ross <bross@pivotal.io>
Co-authored-by: Donal Evans <doevans@pivotal.io>
-import org.apache.geode.annotations.Immutable;
-import org.apache.geode.cache.query.security.RestrictedMethodAuthorizer;
-  @Immutable
-  static final MethodInvocationAuthorizer NO_OP_AUTHORIZER = (method, target) -> true;
-      .valueOf(System.getProperty(
-          GEMFIRE_PREFIX + "QueryService.QueryHeterogeneousObjects", "true"))
-      .booleanValue();
+      .parseBoolean(System.getProperty(
+          GEMFIRE_PREFIX + "QueryService.QueryHeterogeneousObjects", "true"));
-      .valueOf(System.getProperty(
-          GEMFIRE_PREFIX + "QueryService.CopyOnReadAtEntryLevel", "false"))
-      .booleanValue();
-
-  /**
-   * Instead of the below property, please use the UnrestrictedMethodAuthorizer
-   * implementation of MethodInvocationAuthorizer, which provides the same functionality.
-   */
-  @Deprecated
-  public static final boolean ALLOW_UNTRUSTED_METHOD_INVOCATION;
-
-  public static final String DEPRECATION_WARNING = "The property " + GEMFIRE_PREFIX +
-      "QueryService.allowUntrustedMethodInvocation is deprecated. " +
-      "Please use the UnrestrictedMethodAuthorizer implementation of MethodInvocationAuthorizer " +
-      "instead";
-
-  static {
-    String deprecatedValue =
-        System.getProperty(GEMFIRE_PREFIX + "QueryService.allowUntrustedMethodInvocation");
-    if (deprecatedValue != null) {
-      logger.warn(DEPRECATION_WARNING);
-    }
-    ALLOW_UNTRUSTED_METHOD_INVOCATION = Boolean.valueOf(deprecatedValue);
-  }
+      .parseBoolean(System.getProperty(
+          GEMFIRE_PREFIX + "QueryService.CopyOnReadAtEntryLevel", "false"));
-      Collections.synchronizedMap(new HashMap<Region, HashSet<IndexCreationData>>());
+      Collections.synchronizedMap(new HashMap<>());
-      throw new IllegalArgumentException(
-          "cache must not be null");
+      throw new IllegalArgumentException("cache must not be null");
-    if (!cache.getSecurityService().isIntegratedSecurity() || ALLOW_UNTRUSTED_METHOD_INVOCATION) {
-      // A no-op authorizer, allow method invocation
-      this.methodInvocationAuthorizer = NO_OP_AUTHORIZER;
-    } else {
-      this.methodInvocationAuthorizer = new RestrictedMethodAuthorizer(cache);
-    }
+    QueryConfigurationService queryConfigurationService =
+        cache.getService(QueryConfigurationService.class);
+    this.methodInvocationAuthorizer = queryConfigurationService.getMethodAuthorizer();
