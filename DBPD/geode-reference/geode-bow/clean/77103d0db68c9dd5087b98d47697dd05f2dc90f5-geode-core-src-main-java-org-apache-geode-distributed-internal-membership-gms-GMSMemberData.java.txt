GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test

+import org.apache.geode.distributed.internal.membership.gms.api.MemberData;
-import org.apache.geode.internal.serialization.DataSerializableFixedID;
-public class GMSMember implements DataSerializableFixedID {
+public class GMSMemberData implements MemberData, Comparable<GMSMemberData> {
-  // Used only by Externalization
-  public GMSMember() {}
+  public GMSMemberData() {}
-  public GMSMember(String localhost, int udpPort, Version version) {
+  public GMSMemberData(String localhost, int udpPort, Version version) {
-  public GMSMember(String i, int p) {
+  public GMSMemberData(String i, int p) {
-   * @param p the membership listening port
+   * @param membershipPort the membership listening port
-  public GMSMember(InetAddress i, String hostName, int p, int processId, byte vmKind,
+  public GMSMemberData(InetAddress i, String hostName, int membershipPort, int processId,
+      byte vmKind,
-      boolean networkPartitionDetectionEnabled, boolean preferredForCoordinator, short version,
-      long msbs, long lsbs) {
+      boolean networkPartitionDetectionEnabled, boolean preferredForCoordinator,
+      short version,
+      long msbs, long lsbs, byte memberWeight) {
-    this.udpPort = p;
+    this.udpPort = membershipPort;
+    this.memberWeight = memberWeight;
-  public GMSMember(InetAddress i, int p, short version, long msbs, long lsbs, int viewId) {
+  public GMSMemberData(InetAddress i, int p, short version, long msbs, long lsbs, int viewId) {
-   * Clone a GMSMember
+   * Clone a GMSMemberInfo
-  public GMSMember(GMSMember other) {
+  public GMSMemberData(GMSMemberData other) {
-  public int getPort() {
+  @Override
+  public int getMembershipPort() {
-  public boolean preferredForCoordinator() {
+  @Override
+  public boolean isPreferredForCoordinator() {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    this.uuidLSBs = u.getLeastSignificantBits();
-    this.uuidMSBs = u.getMostSignificantBits();
+    if (u == null) {
+      this.uuidLSBs = 0;
+      this.uuidMSBs = 0;
+    } else {
+      this.uuidLSBs = u.getLeastSignificantBits();
+      this.uuidMSBs = u.getMostSignificantBits();
+    }
+  @Override
-  public long getUuidMSBs() {
+  @Override
+  public long getUuidMostSignificantBits() {
-  public long getUuidLSBs() {
+  @Override
+  public long getUuidLeastSignificantBits() {
-  public int compareTo(GMSMember o) {
+  @Override
+  public int compareTo(GMSMemberData o) {
-  public int compareTo(GMSMember o, boolean compareUUIDs) {
+  @Override
+  public int compareTo(MemberData o, boolean compareUUIDs) {
+    return compareTo(o, compareUUIDs, true);
+  }
+
+  @Override
+  public int compareTo(MemberData o, boolean compareUUIDs, boolean compareViewIds) {
-    GMSMember his = o;
+    GMSMemberData his = (GMSMemberData) o;
-    if (this.vmViewId >= 0 && his.vmViewId >= 0) {
+    if (compareViewIds && this.vmViewId >= 0 && his.vmViewId >= 0) {
-  public int compareAdditionalData(GMSMember his) {
+  @Override
+  public int compareAdditionalData(MemberData o) {
+    GMSMemberData his = (GMSMemberData) o;
+  public int getVmPid() {
+    return processId;
+  }
+
+  @Override
-    if ((obj == null) || !(obj instanceof GMSMember)) {
+    if ((obj == null) || !(obj instanceof GMSMemberData)) {
-    return compareTo((GMSMember) obj) == 0;
+    return compareTo((GMSMemberData) obj) == 0;
-    sb.append("GMSMember[");
+    sb.append("MemberData[");
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  public int getDirectPort() {
+  @Override
+  public int getDirectChannelPort() {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  public void setBirthViewId(int birthViewId) {
-    this.vmViewId = birthViewId;
-  }
-
-
-  public void setDirectPort(int directPort) {
+  @Override
+  public void setDirectChannelPort(int directPort) {
+  @Override
+  @Override
-
+  @Override
+  @Override
+  @Override
-  @Override
-  public Version[] getSerializationVersions() {
-    return null;
-  }
-
-  @Override
-  public int getDSFID() {
-    return GMSMEMBER;
-  }
-
-  static final int LONER_VM_TYPE = 13; // from ClusterDistributionManager
-
-  public void toData(DataOutput out,
-      SerializationContext context) throws IOException {
-    StaticSerialization.writeInetAddress(getInetAddress(), out);
-    out.writeInt(getPort());
-
-    StaticSerialization.writeString(hostName, out);
-
-    int flags = 0;
-    if (isNetworkPartitionDetectionEnabled())
-      flags |= NPD_ENABLED_BIT;
-    if (preferredForCoordinator())
-      flags |= PREFERRED_FOR_COORD_BIT;
-    // always write product version but enable reading from older versions
-    // that do not have it
-    flags |= VERSION_BIT;
-
-    out.writeByte((byte) (flags & 0xff));
-
-    out.writeInt(getDirectPort());
-    out.writeInt(getProcessId());
-    int vmKind = getVmKind();
-    out.writeByte(vmKind);
-    StaticSerialization.writeStringArray(getGroups(), out);
-
-    StaticSerialization.writeString(getName(), out);
-    if (vmKind == LONER_VM_TYPE) {
-      StaticSerialization.writeString("", out);
-    } else { // added in 6.5 for unique identifiers in P2P
-      StaticSerialization.writeString(String.valueOf(getVmViewId()), out);
-    }
-    StaticSerialization
-        .writeString(durableId == null ? "" : durableId, out);
-    out.writeInt(durableId == null ? 300 : durableTimeout);
-
-    Version.writeOrdinal(out, versionOrdinal, true);
-
-    if (versionOrdinal >= Version.GFE_90.ordinal()) {
-      writeAdditionalData(out);
-    }
-  }
-
-  public void fromData(DataInput in,
-      DeserializationContext context) throws IOException, ClassNotFoundException {
-    inetAddr = StaticSerialization.readInetAddress(in);
-    udpPort = in.readInt();
-
-    this.hostName = StaticSerialization.readString(in);
-
-    int flags = in.readUnsignedByte();
-    preferredForCoordinator = (flags & PREFERRED_FOR_COORD_BIT) != 0;
-    this.networkPartitionDetectionEnabled = (flags & NPD_ENABLED_BIT) != 0;
-
-    directPort = in.readInt();
-    processId = in.readInt();
-    vmKind = (byte) in.readUnsignedByte();
-    groups = StaticSerialization.readStringArray(in);
-    vmViewId = -1;
-
-    name = StaticSerialization.readString(in);
-    if (vmKind == LONER_DM_TYPE) {
-      StaticSerialization.readString(in);
-    } else {
-      String str = StaticSerialization.readString(in);
-      if (str != null) { // backward compatibility from earlier than 6.5
-        vmViewId = Integer.parseInt(str);
-      }
-    }
-
-    durableId = StaticSerialization.readString(in);
-    durableTimeout = in.readInt();
-
-    versionOrdinal = readVersion(flags, in, context);
-
-    if (versionOrdinal >= Version.GFE_90.ordinal()) {
-      readAdditionalData(in);
-    }
-  }
-
-  private short readVersion(int flags, DataInput in,
-      DeserializationContext context) throws IOException {
-    if ((flags & VERSION_BIT) != 0) {
-      return Version.readOrdinal(in);
-    } else {
-      // prior to 7.1 member IDs did not serialize their version information
-      Version v = context.getSerializationVersion();
-      return v.ordinal();
-    }
-  }
-
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  private String formatUUID() {
-    UUID uuid = getUUID();
-    return ";uuid=" + (uuid == null ? "none" : getUUID().toStringLong());
-  }
-
+  @Override
+  @Override
-
-
-  public static class GMSMemberWrapper {
-    GMSMember mbr;
-
-    public GMSMemberWrapper(GMSMember m) {
-      this.mbr = m;
-    }
-
-    public GMSMember getMbr() {
-      return mbr;
-    }
-
-    @Override
-    public int hashCode() {
-      return mbr.hashCode();
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      if (obj == null || !(obj instanceof GMSMemberWrapper)) {
-        return false;
-      }
-      GMSMember other = ((GMSMemberWrapper) obj).mbr;
-      return mbr.compareTo(other) == 0;
-    }
-
-    @Override
-    public String toString() {
-      return "GMSMemberWrapper [mbr=" + mbr + "]";
-    }
-  }
-
-
