Merge branch 'release/1.3.0'

+import static org.apache.commons.lang.Validate.isTrue;
+import static org.apache.commons.lang.Validate.notEmpty;
+import static org.apache.commons.lang.Validate.notNull;
+
-import java.io.FilenameFilter;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.apache.geode.internal.util.IOUtils;
-import org.apache.geode.internal.util.StopWatch;
-  private static final long SLEEP_INTERVAL_MILLIS = 10;
-
-   * @throws FileNotFoundException if the specified file name is not found within the directory
+   * @throws IllegalArgumentException if the specified file is null or does not exist
-  public PidFile(final File file) throws FileNotFoundException {
-    if (!file.exists() || !file.isFile()) {
-      throw new FileNotFoundException("Unable to find PID file '" + file + "'");
-    }
-    this.pidFile = file;
-  }
+  public PidFile(final File file) {
+    notNull(file, "Invalid file '" + file + "' specified");
+    isTrue(file.exists(), "Nonexistent file '" + file + "' specified");
-  File getFile() {
-    return this.pidFile;
+    this.pidFile = file;
-   * @throws FileNotFoundException if the specified file name is not found within the directory
-   * @throws IllegalStateException if dir is not an existing directory
+   * @throws FileNotFoundException if the specified filename is not found within the directory
+   * @throws IllegalArgumentException if directory is null, does not exist or is not a directory
-    if (!directory.isDirectory() && directory.exists()) {
-      throw new IllegalArgumentException(
-          "Argument '" + directory + "' must be an existing directory!");
-    }
+    notNull(directory, "Invalid directory '" + directory + "' specified");
+    notEmpty(filename, "Invalid filename '" + filename + "' specified");
+    isTrue(directory.isDirectory() && directory.exists(),
+        "Nonexistent directory '" + directory + "' specified");
-    final File file = new File(directory, filename);
+    File file = new File(directory, filename);
-          "Unable to find PID file '" + filename + "' in directory " + directory);
+          "Unable to find PID file '" + filename + "' in directory '" + directory + "'");
-    BufferedReader fileReader = null;
-
-    try {
-      fileReader = new BufferedReader(new FileReader(this.pidFile));
+    try (BufferedReader fileReader = new BufferedReader(new FileReader(pidFile))) {
-      final int pid = Integer.parseInt(pidValue);
+      int pid = Integer.parseInt(pidValue);
-            "Invalid pid '" + pid + "' found in " + this.pidFile.getCanonicalPath());
+            "Invalid pid '" + pid + "' found in " + pidFile.getCanonicalPath());
-    } catch (NumberFormatException e) {
+    } catch (NumberFormatException ignored) {
-          "Invalid pid '" + pidValue + "' found in " + this.pidFile.getCanonicalPath());
-    } finally {
-      IOUtils.close(fileReader);
+          "Invalid pid '" + pidValue + "' found in " + pidFile.getCanonicalPath());
-  /**
-   * Reads in the pid from the specified file, retrying until the specified timeout.
-   * 
-   * @param timeout the maximum time to spend trying to read the pidFile
-   * @param unit the unit of timeout
-   * 
-   * @return the process id (pid) contained within the pidFile
-   * 
-   * @throws IllegalArgumentException if the pid in the pidFile is not a positive integer
-   * @throws IOException if unable to read from the specified file
-   * @throws InterruptedException if interrupted
-   * @throws TimeoutException if operation times out
-   */
-  public int readPid(final long timeout, final TimeUnit unit)
-      throws IOException, InterruptedException, TimeoutException {
-    IllegalArgumentException iae = null;
-    IOException ioe = null;
-    int pid = 0;
-
-    final long timeoutMillis = unit.toMillis(timeout);
-    final StopWatch stopWatch = new StopWatch(true);
-
-    while (pid <= 0) {
-      try {
-        pid = readPid();
-      } catch (IllegalArgumentException e) {
-        iae = e;
-      } catch (IOException e) {
-        ioe = e;
-      }
-      if (stopWatch.elapsedTimeMillis() > timeoutMillis) {
-        if (iae != null) {
-          throw new TimeoutException(iae.getMessage());
-        }
-        if (ioe != null) {
-          throw new TimeoutException(ioe.getMessage());
-        }
-      } else {
-        try {
-          Thread.sleep(SLEEP_INTERVAL_MILLIS);
-        } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          if (iae != null) {
-            throw new InterruptedException(iae.getMessage());
-          }
-          if (ioe != null) {
-            throw new InterruptedException(ioe.getMessage());
-          }
-          throw e;
-        }
-      }
-    }
-    return pid;
+  File getFile() {
+    return pidFile;
+
