GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

+
-  private final String ERROR_VALUE_NOT_USABLE =
-      "The value at this key cannot be incremented numerically";
-
-  private final String ERROR_OVERFLOW = "This incrementation cannot be performed due to overflow";
-
-    /*
-     * Try increment
-     */
-
-    /*
-     * Value does not exist
-     */
-
-    ByteArrayWrapper valueWrapper = stringCommands.get(key);
-    if (valueWrapper == null) {
-      stringCommands.set(key, new ByteArrayWrapper(incrArray), null);
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), increment));
-      return;
-    }
-
-    /*
-     * Value exists
-     */
-
-    String stringValue = Coder.bytesToString(valueWrapper.toBytes());
-    long value;
-    try {
-      value = Long.parseLong(stringValue);
-    } catch (NumberFormatException e) {
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_VALUE_NOT_USABLE));
-      return;
-    }
-
-    /*
-     * Check for overflow
-     */
-    if (value >= 0 && increment > (Long.MAX_VALUE - value)) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-      return;
-    }
-
-    value += increment;
-
-    stringValue = "" + value;
-    stringCommands.set(key, new ByteArrayWrapper(Coder.stringToBytes(stringValue)), null);
-
+    long value = stringCommands.incrby(key, increment);
-
-
