GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.

-import java.util.Iterator;
-  protected EnumListenerEvent _operation;
+  EnumListenerEvent _operation;
-  protected byte _valueIsObject;
+  private byte _valueIsObject;
-  protected Object _callbackArgument;
+  private Object _callbackArgument;
-  protected ClientProxyMembershipID _membershipId;
+  ClientProxyMembershipID _membershipId;
-  protected EventID _eventIdentifier;
+  EventID _eventIdentifier;
-  public boolean isInvalidateRegion() {
+  private boolean isInvalidateRegion() {
-  public boolean isClientCompatible() {
-    return false;
-  }
-
-    Message message = null;
-    boolean conflation = false;
+    Message message;
+    boolean conflation;
-      /**
+      /*
-    Message message = null;
+    Message message;
-        message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
+        message.addObjPart(isClientInterested(proxyId));
-        message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
-        message.addObjPart(Boolean.valueOf(clientHasCq));
+        message.addObjPart(isClientInterested(proxyId));
+        message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(isClientInterested(proxyId));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-  protected Message getGFE61Message(CacheClientProxy proxy, byte[] latestValue, boolean conflation,
+  private Message getGFE61Message(CacheClientProxy proxy, byte[] latestValue, boolean conflation,
-    Message message = null;
+    Message message;
-        message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
+        message.addObjPart(isClientInterested(proxyId));
-        message.addObjPart(Boolean.valueOf(isClientInterested));
+        message.addObjPart(isClientInterested);
-        message.addObjPart(Boolean.valueOf(clientHasCq));
+        message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(isClientInterested(proxyId));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-  protected Message getGFE65Message(CacheClientProxy proxy, byte[] p_latestValue,
+  private Message getGFE65Message(CacheClientProxy proxy, byte[] p_latestValue,
-    Message message = null;
+    Message message;
-      message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(isClientInterested(proxyId));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(isClientInterested(proxyId));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-  protected Message getGFE70Message(CacheClientProxy proxy, byte[] p_latestValue,
+  private Message getGFE70Message(CacheClientProxy proxy, byte[] p_latestValue,
-    Message message = null;
+
+    Message message;
-      message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(isClientInterested(proxyId));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(isClientInterested(proxyId)));
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(isClientInterested(proxyId));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      message.addObjPart(Boolean.valueOf(clientHasCq));
+      message.addObjPart(clientHasCq);
-      new ThreadLocal<Map<Integer, Message>>() {
-        @Override
-        protected Map<Integer, Message> initialValue() {
-          return new HashMap<Integer, Message>();
-        };
-      };
+      ThreadLocal.withInitial(HashMap::new);
-      if (cqs != null && !cqs.isEmpty()) {
-        return true;
-      }
+      return cqs != null && !cqs.isEmpty();
-  public String[] getCqs(ClientProxyMembershipID clientId) {
+  private String[] getCqs(ClientProxyMembershipID clientId) {
-  public void addClientCq(ClientProxyMembershipID clientId, String cqName, Integer cqEvent) {
+  void addClientCq(ClientProxyMembershipID clientId, String cqName, Integer cqEvent) {
-   * @see HAEventWrapper#fromData(DataInput)
+   * @see HAEventWrapper#fromData(DataInput, DeserializationContext)
-   * @see HAEventWrapper#fromData(DataInput)
+   * @see HAEventWrapper#fromData(DataInput, DeserializationContext)
-  protected Object deserialize(byte[] serializedBytes) {
+  private Object deserialize(byte[] serializedBytes) {
-    } catch (Exception e) {
+    } catch (Exception ignored) {
-    StringBuffer buffer = new StringBuffer();
+    StringBuilder buffer = new StringBuilder();
-    public ClientCqConcurrentMap() {
+    ClientCqConcurrentMap() {
-    public CqNameToOpSingleEntry(String name, Integer op) {
+    CqNameToOpSingleEntry(String name, Integer op) {
-      this.op = op.intValue();
+      this.op = op;
-        DataSerializer.writeObject(Integer.valueOf(this.op), out);
+        DataSerializer.writeObject(this.op, out);
-        this.op = op.intValue();
+        this.op = op;
-        this.op = op.intValue();
+        this.op = op;
-    public CqNameToOpHashMap(CqNameToOpSingleEntry se) {
+    CqNameToOpHashMap(CqNameToOpSingleEntry se) {
-      Iterator<Entry<String, Integer>> entries = entrySet().iterator();
-      while (entries.hasNext()) {
-        Entry<String, Integer> entry = entries.next();
+      for (Entry<String, Integer> entry : entrySet()) {
-        int op = entry.getValue().intValue();
+        int op = entry.getValue();
