GEODE-8240: Member Identifier Future Versions

Inability of member identifiers to hold future versions caused 
problems in rolling upgrades. Now member identifiers hang on 
to a VersionOrdinal which is a base type for Version "enum".
-public class Version implements Comparable<Version> {
+public class Version extends VersionOrdinalImpl {
-  /** byte used as ordinal to represent this <code>Version</code> */
-  private final short ordinal;
-
+    super(ordinal);
-    this.ordinal = ordinal;
-  public short ordinal() {
-    return this.ordinal;
-  }
-
-
-   * Finds the Version instance corresponding to the given ordinal and returns the result of
-   * compareTo(Version)
-   *
-   * @param other the ordinal of the other Version object
-   * @return negative if this version is older, positive if this version is newer, 0 if this is the
-   *         same version
-   */
-  public int compareTo(short other) {
-    // first try to find the actual Version object
-    Version v = fromOrdinalNoThrow(other, false);
-    if (v == null) {
-      // failing that we use the old method of comparing Versions:
-      return this.ordinal() - other;
-    }
-    return compareTo(v);
-  }
-
-  /**
-   * {@inheritDoc}
-   */
-  @Override
-  public int compareTo(Version other) {
-    if (other != null) {
-      // byte min/max can't overflow int, so use (a-b)
-      final int thisOrdinal = this.ordinal;
-      final int otherOrdinal = other.ordinal;
-      return (thisOrdinal - otherOrdinal);
-    } else {
-      return 1;
-    }
-  }
-
-  /**
-  public static String toString(short ordinal) {
-    if (ordinal <= CURRENT.ordinal) {
-      try {
-        return fromOrdinal(ordinal).toString();
-      } catch (UnsupportedSerializationVersionException uve) {
-        // ignored in toString()
-      }
-    }
-    return "UNKNOWN[ordinal=" + ordinal + ']';
-  }
-
-  @Override
-  public boolean equals(Object other) {
-    if (other == this)
-      return true;
-    if (other != null && other.getClass() == Version.class) {
-      return this.ordinal == ((Version) other).ordinal;
-    } else {
-      return false;
-    }
-  }
-
-  public boolean equals(Version other) {
-    return other != null && this.ordinal == other.ordinal;
-  }
-
-  @Override
-  public int hashCode() {
-    int result = 17;
-    final int mult = 37;
-    result = mult * result + this.ordinal;
-    return result;
-  }
-
-  public boolean isCurrentVersion() {
-    return this.ordinal == CURRENT.ordinal;
-  }
-
-  /**
-   * Test if this version is older than given version.
-   *
-   * @param version to compare to this version
-   * @return true if this is older than version, otherwise false.
-   */
-  public final boolean isOlderThan(final Version version) {
-    return compareTo(version) < 0;
-  }
-
-  /**
-   * Test if this version is not older than given version.
-   *
-   * @param version to compare to this version
-   * @return true if this is the same version or newer, otherwise false.
-   */
-  public final boolean isNotOlderThan(final Version version) {
-    return compareTo(version) >= 0;
-  }
-
-  /**
-   * Test if this version is newer than given version.
-   *
-   * @param version to compare to this version
-   * @return true if this is newer than version, otherwise false.
-   */
-  public final boolean isNewerThan(final Version version) {
-    return compareTo(version) > 0;
-  }
-
-  /**
-   * Test if this version is not newer than given version.
-   *
-   * @param version to compare to this version
-   * @return true if this is the same version or older, otherwise false.
-   */
-  public final boolean isNotNewerThan(final Version version) {
-    return compareTo(version) <= 0;
-  }
-
