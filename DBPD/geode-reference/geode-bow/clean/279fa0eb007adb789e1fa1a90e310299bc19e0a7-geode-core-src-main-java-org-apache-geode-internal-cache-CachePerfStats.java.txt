GEODE-7001: Add region entry count gauge (#3850)

* GEODE-7001: Add region entry count gauge

Add 'member.region.entries' gauge in RegionPerfStats
- Add region.name and data.policy tags
- Add an AtomicLong to track the entry count
- Configure the member.region.entries gauge to fetch from new
  getLocalSize() method (see below).
- Configure the 'entryCount' stat to be supplied by new getLocalSize()
  method.

Add getLocalSize() method to InternalRegion, and implement it in
LocalRegion and PartitionedRegion
- In LocalRegion, the method returns the region map size minus the
  number of tombstones.
- In PartitionedRegion, the method sums the local sizes of all local
  bucket regions.

Also refactored the following:
- Reorganize CachePerfStats/RegionPerfStats constructors
- Remove CachePerfStats.getEntries()
- Remove use of CachePerfStats.getEntries() from
  PartitionedRegionStatus.
- Add @Override to ValidatingStatisticsType methods in StatisticsTypeImpl
- Extracted invokeSuppliers() to new SuppliableStatistics interface and
  rename as updateSuppliedValues()
- Move responsibility to prepend 'RegionStats-' onto region statistics
  textID into the classes that create RegionPerfStats and
  CachePerfStats.

Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>
Co-Authored-By: Aaron Lindsey <alindsey@pivotal.io>

* empty commit to trigger precheckin

* Remove leftover atMost

* Spotless found unused import

-  /**
-   * Created specially for bug 39348. Should not be invoked in any other case.
-   */
-  public CachePerfStats() {
-    this(null);
-  }
-
-  /**
-   * Creates a new <code>CachePerfStats</code> and registers itself with the given statistics
-   * factory.
-   */
-    this(factory, "cachePerfStats", enableClockStats ? NanoTimer::getTime : () -> 0);
-  }
-
-  /**
-   * Creates a new <code>CachePerfStats</code> and registers itself with the given statistics
-   * factory.
-   */
-  public CachePerfStats(StatisticsFactory factory, String regionName) {
-    this(factory, "RegionStats-" + regionName, enableClockStats ? NanoTimer::getTime : () -> 0);
+    this(factory, "cachePerfStats");
-  public CachePerfStats(StatisticsFactory factory, String textId, LongSupplier clock) {
-    stats = factory == null ? null : factory.createAtomicStatistics(type, textId);
+  public CachePerfStats(StatisticsFactory factory, LongSupplier clock) {
+    this(factory, "cachePerfStats", clock);
+  }
+
+  public CachePerfStats(StatisticsFactory factory, String textId) {
+    this(factory, textId, createClock());
+  }
+
+  CachePerfStats(StatisticsFactory factory, String textId, LongSupplier clock) {
+    this(createStatistics(factory, textId), clock);
+  }
+
+  private CachePerfStats(Statistics stats, LongSupplier clock) {
+    this.stats = stats;
+  private static Statistics createStatistics(StatisticsFactory factory, String textId) {
+    if (factory == null) {
+      return null;
+    }
+    return factory.createAtomicStatistics(type, textId);
+  }
+
+  private static LongSupplier createClock() {
+    return enableClockStats ? NanoTimer::getTime : () -> 0;
+  }
+
+  /**
+   * Returns the Statistics instance that stores the cache perf stats.
+   *
+   * @since GemFire 3.5
+   */
+  public Statistics getStats() {
+    return stats;
+  }
+
-  void close() {
+  protected void close() {
-  public long getEntries() {
-    return stats.getLong(entryCountId);
-  }
-
-   * Returns the Statistics instance that stores the cache perf stats.
-   *
-   * @since GemFire 3.5
-   */
-  public Statistics getStats() {
-    return stats;
-  }
-
-  /**
