GEODE-5231: Fix timeout in PersistentRVVRecoveryDUnitTest

Pass GeodeAwaitility timeout to testHook_forceExpiredTombstoneGC
in TombstoneService. Overload testHook_forceExpiredTombstoneGC
to accept timeout and time unit.

+import static java.util.concurrent.TimeUnit.SECONDS;
+   * @param count Number of tombstones to expire
+   *
-    return this.replicatedTombstoneSweeper.testHook_forceExpiredTombstoneGC(count);
+    return this.replicatedTombstoneSweeper.testHook_forceExpiredTombstoneGC(count, 30, SECONDS);
+  }
+
+  /**
+   * For test purposes only, force the expiration of a number of tombstones for replicated regions.
+   *
+   * @param count Number of tombstones to expire
+   * @param timeout the maximum time to wait
+   * @param unit the time unit of the {@code timeout} argument
+   *
+   * @return true if the expiration occurred
+   */
+  public boolean forceBatchExpirationForTests(int count, long timeout, TimeUnit unit)
+      throws InterruptedException {
+    return this.replicatedTombstoneSweeper.testHook_forceExpiredTombstoneGC(count, timeout, unit);
-    boolean testHook_forceExpiredTombstoneGC(int count) throws InterruptedException {
+    boolean testHook_forceExpiredTombstoneGC(int count, long timeout, TimeUnit unit)
+        throws InterruptedException {
-    boolean testHook_forceExpiredTombstoneGC(int count) throws InterruptedException {
+    boolean testHook_forceExpiredTombstoneGC(int count, long timeout, TimeUnit unit)
+        throws InterruptedException {
-        // Wait for 30 seconds. If we wait longer, we risk hanging the tests if
-        // something goes wrong.
-        return testHook_forceBatchExpireCall.await(30, TimeUnit.SECONDS);
+        return testHook_forceBatchExpireCall.await(timeout, unit);
-    abstract boolean testHook_forceExpiredTombstoneGC(int count) throws InterruptedException;
+    abstract boolean testHook_forceExpiredTombstoneGC(int count, long timeout, TimeUnit unit)
+        throws InterruptedException;
