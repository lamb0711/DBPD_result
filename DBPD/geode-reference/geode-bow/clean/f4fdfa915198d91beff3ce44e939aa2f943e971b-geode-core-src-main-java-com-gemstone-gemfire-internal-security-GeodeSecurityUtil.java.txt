GEODE-1571: revert previous two changes

-import java.lang.reflect.Method;
-import org.apache.commons.lang.NullArgumentException;
-import org.apache.geode.security.GeodePermission;
-import org.apache.geode.security.GeodePermission.Operation;
-import org.apache.geode.security.GeodePermission.Resource;
-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.SecurityManager;
+import org.apache.shiro.UnavailableSecurityManagerException;
+import org.apache.geode.security.GeodePermission;
+import org.apache.geode.security.GeodePermission.Operation;
+import org.apache.geode.security.GeodePermission.Resource;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.SecurityManager;
-    if (!isIntegratedSecure) {
+    if (!isSecured()) {
-    if (!isIntegratedSecure) {
+    if (!isSecured()) {
+  private static boolean isSecured() {
+    try {
+      SecurityUtils.getSecurityManager();
+    }
+    catch (UnavailableSecurityManagerException e) {
+      return false;
+    }
+    return true;
+  }
+
-  private static boolean isSecure;
-  private static boolean isIntegratedSecure;
-    String clientAuthenticatorConfig = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
-      isSecure = true;
-      isIntegratedSecure = true;
+
-      securityManager = getObjectOfTypeFromClassName(securityConfig, SecurityManager.class);
+      securityManager = getObjectOfType(securityConfig, SecurityManager.class);
-      isSecure = true;
-      isIntegratedSecure = true;
-    }
-    else if( !StringUtils.isBlank(clientAuthenticatorConfig)) {
-      isSecure = true;
-      isIntegratedSecure = false;
-      isSecure = false;
-      isIntegratedSecure = false;
-      postProcessor = getObjectOfTypeFromClassName(customPostProcessor, PostProcessor.class);
+      postProcessor = getObjectOfType(customPostProcessor, PostProcessor.class);
-    isSecure = false;
-    isIntegratedSecure = false;
-    return (isIntegratedSecure && postProcessor != null);
+    Subject subject = getSubject();
+    return (subject != null && postProcessor != null);
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   * @param className
-   * @param expectedClazz
-   * @param <T>
-   * @return
-   */
-  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
+  public static <T> T getObjectOfType(String className, Class<T> expectedClazz) {
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   * @param factoryMethodName
-   * @param expectedClazz
-   * @param <T>
-   * @return
-   */
-  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
-    try {
-      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
-      T actualObject = (T)factoryMethod.invoke(null, (Object[])null);
-
-      if(actualObject == null){
-        throw new NullArgumentException("Factory method "+ factoryMethodName + " should not return null.");
-      }
-
-      return actualObject;
-    } catch (Exception e) {
-      throw new GemFireSecurityException(e.toString(), e);
-    }
-  }
-
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   * @param classOrMethod
-   * @param expectedClazz
-   * @param <T>
-   * @return an object of type expectedClazz. This method would never return null. It either returns an non-null
-   * object or throws exception.
-   */
-  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
-    T object = null;
-    try{
-      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
-    }
-    catch (Exception e){
-      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
-    }
-    return object;
-  }
-
-  public static boolean isSecurityRequired(){
-    return isSecure;
+  public static boolean isSecurityRequired(Properties securityProps){
+    String authenticator = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
+    String securityManager = securityProps.getProperty(SECURITY_MANAGER);
+    return !StringUtils.isEmpty(authenticator) || !StringUtils.isEmpty(securityManager);
-  public static boolean isIntegratedSecurity(){
-    return isIntegratedSecure;
+  public static boolean isIntegratedSecurity(Properties securityProps){
+    String securityManager = securityProps.getProperty(SECURITY_MANAGER);
+    return !StringUtils.isEmpty(securityManager);
