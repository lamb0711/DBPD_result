Merge branch 'develop' into feature/GEODE-7049

+import static org.apache.geode.security.SecurityManager.PASSWORD;
+import static org.apache.geode.security.SecurityManager.TOKEN;
+import static org.apache.geode.security.SecurityManager.USER_NAME;
+
- * Intended for implementation testing, this class authenticates a user when the username matches
+ * Intended for example and demo purpose, this class authenticates a user when the username matches
+ *
+ * It also validate an auth token if it's present
+  /**
+   * the valid token string that will be authenticated. Any other token string will be rejected.
+   */
+  public static final String VALID_TOKEN = "FOO_BAR";
+  /**
+   * these following users will be authenticated:
+   * 1. auth token defined as SimpleSecurityManager.VALID_TOKEN
+   * 2. username and password that are the same
+   */
-    String username = credentials.getProperty("security-username");
-    String password = credentials.getProperty("security-password");
+    String token = credentials.getProperty(TOKEN);
+    if (token != null) {
+      if (VALID_TOKEN.equals(token)) {
+        return "Bearer " + token;
+      } else {
+        throw new AuthenticationFailedException("Invalid token");
+      }
+    }
+    String username = credentials.getProperty(USER_NAME);
+    String password = credentials.getProperty(PASSWORD);
+  /**
+   * these following users will be authorized for the permission:
+   * 1. All authtoken users will be authorized
+   * 2. users with passwords, if the permission string (without the :) starts with the username,
+   * then it will be authorized, e.g. if the permission string cluster:manage, then username
+   * "cluster" or "clusterManage" will be authorized
+   */
+    if (principal.toString().startsWith("Bearer ")) {
+      return true;
+    }
