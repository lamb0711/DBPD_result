Merge branch 'release/1.4.0'

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.Properties;
+import org.apache.geode.DataSerializable;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.distributed.ConfigurationProperties;
+
+  @Override
+  public Properties getDistributedSystemProperties() {
+    Properties result = super.getDistributedSystemProperties();
+    result.put(ConfigurationProperties.SERIALIZABLE_OBJECT_FILTER,
+        "org.apache.geode.internal.cache.execute.**;org.apache.geode.test.dunit.**");
+    return result;
+  }
+
+
+
+  /**
+   * Test the a result collector will timeout using the timeout provided
+   */
+  @Test
+  public void resultCollectorHonorsFunctionTimeout() throws InterruptedException {
+    Function sleepingFunction = context -> {
+      try {
+        long endTime = System.nanoTime() + TimeUnit.SECONDS.toNanos(30);
+        while (!context.getCache().isClosed() && System.nanoTime() < endTime) {
+          Thread.sleep(10);
+        }
+      } catch (InterruptedException e) {
+        // exit
+      }
+      context.getResultSender().sendResult("FAILED");
+    };
+
+    ResultCollector collector = getExecution().execute(sleepingFunction);
+    thrown.expect(FunctionException.class);
+    collector.getResult(1, TimeUnit.SECONDS);
+  }
+
-  private class CacheClosingNonHAFunction implements Function {
+  public static class CacheClosingNonHAFunction implements Function, DataSerializable {
-    private final InternalDistributedMember member;
+    private InternalDistributedMember member;
+
+    public CacheClosingNonHAFunction() {} // for serialization
-        getCache().close();
+        CacheFactory.getAnyInstance().close();
+
+    @Override
+    public void toData(DataOutput out) throws IOException {
+      DataSerializer.writeObject(member, out);
+    }
+
+    @Override
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+      member = DataSerializer.readObject(in);
+    }
