GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.

-import org.apache.geode.management.internal.cli.CliUtil;
-  public Result listClient() {
+  public Result listClient() throws Exception {
+    CompositeResultData compositeResultData = ResultBuilder.createCompositeResultData();
+    CompositeResultData.SectionResultData section = compositeResultData.addSection("section1");
-    try {
-      CompositeResultData compositeResultData = ResultBuilder.createCompositeResultData();
-      CompositeResultData.SectionResultData section = compositeResultData.addSection("section1");
+    TabularResultData resultTable = section.addTable("TableForClientList");
+    String headerText = "ClientList";
+    resultTable = resultTable.setHeader(headerText);
-      TabularResultData resultTable = section.addTable("TableForClientList");
-      String headerText = "ClientList";
-      resultTable = resultTable.setHeader(headerText);
+    InternalCache cache = getCache();
+    ManagementService service = ManagementService.getExistingManagementService(cache);
+    ObjectName[] cacheServers = service.getDistributedSystemMXBean().listCacheServerObjectNames();
-      InternalCache cache = getCache();
-      ManagementService service = ManagementService.getExistingManagementService(cache);
-      ObjectName[] cacheServers = service.getDistributedSystemMXBean().listCacheServerObjectNames();
-
-      if (cacheServers.length == 0) {
-        return ResultBuilder.createGemFireErrorResult(
-            CliStrings.format(CliStrings.LIST_CLIENT_COULD_NOT_RETRIEVE_SERVER_LIST));
-      }
-
-      Map<String, List<String>> clientServerMap = new HashMap<>();
-
-      for (ObjectName objName : cacheServers) {
-        CacheServerMXBean serverMbean = service.getMBeanInstance(objName, CacheServerMXBean.class);
-        String[] listOfClient = serverMbean.getClientIds();
-
-        if (listOfClient == null || listOfClient.length == 0) {
-          continue;
-        }
-
-
-        for (String clientName : listOfClient) {
-          String serverDetails = "member=" + objName.getKeyProperty("member") + ",port="
-              + objName.getKeyProperty("port");
-          if (clientServerMap.containsKey(clientName)) {
-            List<String> listServers = clientServerMap.get(clientName);
-            listServers.add(serverDetails);
-          } else {
-            List<String> listServer = new ArrayList<>();
-            listServer.add(serverDetails);
-            clientServerMap.put(clientName, listServer);
-          }
-        }
-      }
-
-      if (clientServerMap.size() == 0) {
-        return ResultBuilder.createGemFireErrorResult(
-            CliStrings.format(CliStrings.LIST_COULD_NOT_RETRIEVE_CLIENT_LIST));
-      }
-
-      String memberSeparator = ";  ";
-
-      for (Map.Entry<String, List<String>> pairs : clientServerMap.entrySet()) {
-        String client = pairs.getKey();
-        List<String> servers = pairs.getValue();
-        StringBuilder serverListForClient = new StringBuilder();
-        int serversSize = servers.size();
-        int i = 0;
-        for (String server : servers) {
-          serverListForClient.append(server);
-          if (i < serversSize - 1) {
-            serverListForClient.append(memberSeparator);
-          }
-          i++;
-        }
-        resultTable.accumulate(CliStrings.LIST_CLIENT_COLUMN_Clients, client);
-        resultTable.accumulate(CliStrings.LIST_CLIENT_COLUMN_SERVERS,
-            serverListForClient.toString());
-      }
-      result = ResultBuilder.buildResult(compositeResultData);
-
-    } catch (Exception e) {
-      LogWrapper.getInstance()
-          .warning("Error in list clients. stack trace" + CliUtil.stackTraceAsString(e));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.LIST_CLIENT_COULD_NOT_RETRIEVE_CLIENT_LIST_0, e.getMessage()));
+    if (cacheServers.length == 0) {
+      return ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.LIST_CLIENT_COULD_NOT_RETRIEVE_SERVER_LIST));
+    Map<String, List<String>> clientServerMap = new HashMap<>();
+
+    for (ObjectName objName : cacheServers) {
+      CacheServerMXBean serverMbean = service.getMBeanInstance(objName, CacheServerMXBean.class);
+      String[] listOfClient = serverMbean.getClientIds();
+
+      if (listOfClient == null || listOfClient.length == 0) {
+        continue;
+      }
+
+
+      for (String clientName : listOfClient) {
+        String serverDetails = "member=" + objName.getKeyProperty("member") + ",port="
+            + objName.getKeyProperty("port");
+        if (clientServerMap.containsKey(clientName)) {
+          List<String> listServers = clientServerMap.get(clientName);
+          listServers.add(serverDetails);
+        } else {
+          List<String> listServer = new ArrayList<>();
+          listServer.add(serverDetails);
+          clientServerMap.put(clientName, listServer);
+        }
+      }
+    }
+
+    if (clientServerMap.size() == 0) {
+      return ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.LIST_COULD_NOT_RETRIEVE_CLIENT_LIST));
+    }
+
+    String memberSeparator = ";  ";
+
+    for (Map.Entry<String, List<String>> pairs : clientServerMap.entrySet()) {
+      String client = pairs.getKey();
+      List<String> servers = pairs.getValue();
+      StringBuilder serverListForClient = new StringBuilder();
+      int serversSize = servers.size();
+      int i = 0;
+      for (String server : servers) {
+        serverListForClient.append(server);
+        if (i < serversSize - 1) {
+          serverListForClient.append(memberSeparator);
+        }
+        i++;
+      }
+      resultTable.accumulate(CliStrings.LIST_CLIENT_COLUMN_Clients, client);
+      resultTable.accumulate(CliStrings.LIST_CLIENT_COLUMN_SERVERS, serverListForClient.toString());
+    }
+    result = ResultBuilder.buildResult(compositeResultData);
+
+
+
