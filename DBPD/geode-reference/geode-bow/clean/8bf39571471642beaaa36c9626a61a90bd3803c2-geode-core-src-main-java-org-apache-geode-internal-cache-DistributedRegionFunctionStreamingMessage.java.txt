Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class DistributedRegionFunctionStreamingMessage extends DistributionMessage implements TransactionMessage {
+public class DistributedRegionFunctionStreamingMessage extends DistributionMessage
+    implements TransactionMessage {
-  
+
-  
+
-  
-  private String functionName; 
-  
+
+  private String functionName;
+
-  
+
-  
+
-  
+
-  
+
-  static final ForceReattemptException UNHANDLED_EXCEPTION = (ForceReattemptException)new ForceReattemptException(
-      "Unknown exception").fillInStackTrace();
+  static final ForceReattemptException UNHANDLED_EXCEPTION =
+      (ForceReattemptException) new ForceReattemptException("Unknown exception").fillInStackTrace();
-  public DistributedRegionFunctionStreamingMessage() {
-  }
+  public DistributedRegionFunctionStreamingMessage() {}
-  public DistributedRegionFunctionStreamingMessage(final String regionPath,
-      Function function, int procId, final Set filter, Object args,
-      boolean isReExecute, boolean isFnSerializationReqd) {
+  public DistributedRegionFunctionStreamingMessage(final String regionPath, Function function,
+      int procId, final Set filter, Object args, boolean isReExecute,
+      boolean isFnSerializationReqd) {
-    if(txState!=null && txState.isMemberIdForwardingRequired()) {
+    if (txState != null && txState.isMemberIdForwardingRequired()) {
-      if(cache==null) {
+      if (cache == null) {
-      if(cache==null) {
+      if (cache == null) {
-        thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0.toLocalizedString(dm.getId()));
+        thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
+            .toLocalizedString(dm.getId()));
-      dr = (DistributedRegion)GemFireCacheImpl.getInstance().getRegion(
-          this.regionPath);
+      dr = (DistributedRegion) GemFireCacheImpl.getInstance().getRegion(this.regionPath);
-        thr = new ForceReattemptException(dm.getDistributionManagerId()
-            .toString()
+        thr = new ForceReattemptException(dm.getDistributionManagerId().toString()
-    }
-    catch (CancelException se) {
+    } catch (CancelException se) {
-    }
-    catch (RegionDestroyedException rde) {
+    } catch (RegionDestroyedException rde) {
-        thr = new ForceReattemptException("Region is destroyed in "
-            + dm.getDistributionManagerId(), rde);
+        thr = new ForceReattemptException("Region is destroyed in " + dm.getDistributionManagerId(),
+            rde);
-    }
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-        }
-        else {
+        } else {
-          thr = new ForceReattemptException(
-              "Distributed system is disconnecting");
+          thr = new ForceReattemptException("Distributed system is disconnecting");
-      }
-      else if (logger.isTraceEnabled(LogMarker.DM) && (t instanceof RuntimeException)) {
+      } else if (logger.isTraceEnabled(LogMarker.DM) && (t instanceof RuntimeException)) {
-    }
-    finally {
+    } finally {
-            excludeException = (thr instanceof CacheClosedException || (thr instanceof ForceReattemptException));
-          }
-          else {
+            excludeException =
+                (thr instanceof CacheClosedException || (thr instanceof ForceReattemptException));
+          } else {
-  protected final boolean operateOnDistributedRegion(
-      final DistributionManager dm, DistributedRegion r)
-      throws ForceReattemptException {
+  protected final boolean operateOnDistributedRegion(final DistributionManager dm,
+      DistributedRegion r) throws ForceReattemptException {
-      ReplyMessage.send(getSender(), this.processorId, new ReplyException(
-          new FunctionException(LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
-            .toLocalizedString(this.functionName))), dm, r.isInternalRegion());
+      ReplyMessage.send(getSender(), this.processorId,
+          new ReplyException(new FunctionException(
+              LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
+                  .toLocalizedString(this.functionName))),
+          dm, r.isInternalRegion());
-    
-    
+
+
-      r.executeOnRegion(this, this.functionObject, this.args, this.processorId,
-          this.filter, this.isReExecute);
+      r.executeOnRegion(this, this.functionObject, this.args, this.processorId, this.filter,
+          this.isReExecute);
-        ReplyMessage
-            .send(
-                getSender(),
-                this.processorId,
-                new ReplyException(
-                    new FunctionException(
-                        LocalizedStrings.ExecuteFunction_THE_FUNCTION_0_DID_NOT_SENT_LAST_RESULT
-                            .toString(functionObject.getId()))), dm, r.isInternalRegion());
+        ReplyMessage.send(getSender(), this.processorId,
+            new ReplyException(new FunctionException(
+                LocalizedStrings.ExecuteFunction_THE_FUNCTION_0_DID_NOT_SENT_LAST_RESULT
+                    .toString(functionObject.getId()))),
+            dm, r.isInternalRegion());
-      ReplyMessage.send(getSender(), this.processorId, new ReplyException(
-          "Operation got interrupted due to shutdown in progress on remote VM",
-          e), dm, r.isInternalRegion());
+      ReplyMessage
+          .send(getSender(), this.processorId,
+              new ReplyException(
+                  "Operation got interrupted due to shutdown in progress on remote VM", e),
+              dm, r.isInternalRegion());
-      ReplyMessage
-          .send(
-              getSender(),
-              this.processorId,
-              new ReplyException(
-                  new ForceReattemptException(
-                      "Operation got interrupted due to shutdown in progress on remote VM",
-                      sde)), dm, r.isInternalRegion());
+      ReplyMessage.send(getSender(), this.processorId,
+          new ReplyException(new ForceReattemptException(
+              "Operation got interrupted due to shutdown in progress on remote VM", sde)),
+          dm, r.isInternalRegion());
-    if ((flags & HAS_TX_ID) != 0) this.txUniqId = in.readInt();
+    if ((flags & HAS_TX_ID) != 0)
+      this.txUniqId = in.readInt();
-      this.isFnSerializationReqd = false; 
-      this.functionObject = FunctionService.getFunction((String)object);
+      this.isFnSerializationReqd = false;
+      this.functionObject = FunctionService.getFunction((String) object);
-       this.functionName = (String)object;
+        this.functionName = (String) object;
-    }
-    else {
-      this.functionObject = (Function)object;
+    } else {
+      this.functionObject = (Function) object;
-    this.args = (Serializable)DataSerializer.readObject(in);
-    this.filter = (HashSet)DataSerializer.readHashSet(in);
+    this.args = (Serializable) DataSerializer.readObject(in);
+    this.filter = (HashSet) DataSerializer.readHashSet(in);
-    if (this.processorId != 0) flags |= HAS_PROCESSOR_ID;
-    if (this.txUniqId != TXManagerImpl.NOTX) flags |= HAS_TX_ID;
-    if (this.txMemberId != null) flags |= HAS_TX_MEMBERID;
-    if (this.isReExecute) flags |= IS_REEXECUTE;
+    if (this.processorId != 0)
+      flags |= HAS_PROCESSOR_ID;
+    if (this.txUniqId != TXManagerImpl.NOTX)
+      flags |= HAS_TX_ID;
+    if (this.txMemberId != null)
+      flags |= HAS_TX_MEMBERID;
+    if (this.isReExecute)
+      flags |= IS_REEXECUTE;
-    if (this.processorId != 0) out.writeInt(this.processorId);
-    if (this.txUniqId != TXManagerImpl.NOTX) out.writeInt(this.txUniqId);
+    if (this.processorId != 0)
+      out.writeInt(this.processorId);
+    if (this.txUniqId != TXManagerImpl.NOTX)
+      out.writeInt(this.txUniqId);
-    if(this.isFnSerializationReqd){
+    if (this.isFnSerializationReqd) {
-    }
-    else{
-      DataSerializer.writeObject(functionObject.getId(),out);
+    } else {
+      DataSerializer.writeObject(functionObject.getId(), out);
-    DataSerializer.writeHashSet((HashSet)this.filter, out);
+    DataSerializer.writeHashSet((HashSet) this.filter, out);
-  public synchronized boolean sendReplyForOneResult(DM dm,
-      Object oneResult, boolean lastResult, boolean sendResultsInOrder)
-      throws CacheException, ForceReattemptException,
-      InterruptedException {
-    if(this.replyLastMsg) {
+  public synchronized boolean sendReplyForOneResult(DM dm, Object oneResult, boolean lastResult,
+      boolean sendResultsInOrder)
+      throws CacheException, ForceReattemptException, InterruptedException {
+    if (this.replyLastMsg) {
-    sendReply(getSender(), this.processorId, dm, null, oneResult,
-        msgNum, lastResult, sendResultsInOrder);
-    
+    sendReply(getSender(), this.processorId, dm, null, oneResult, msgNum, lastResult,
+        sendResultsInOrder);
+
-  protected void sendReply(InternalDistributedMember member, int procId, DM dm,
-      ReplyException ex, Object result, int msgNum, boolean lastResult,
-      boolean sendResultsInOrder) {
+  protected void sendReply(InternalDistributedMember member, int procId, DM dm, ReplyException ex,
+      Object result, int msgNum, boolean lastResult, boolean sendResultsInOrder) {
-      FunctionStreamingOrderedReplyMessage.send(member, procId, ex, dm, result,
-          msgNum, lastResult);
-    }
-    else {
-      FunctionStreamingReplyMessage.send(member, procId, ex, dm, result,
-          msgNum, lastResult);
+      FunctionStreamingOrderedReplyMessage.send(member, procId, ex, dm, result, msgNum, lastResult);
+    } else {
+      FunctionStreamingReplyMessage.send(member, procId, ex, dm, result, msgNum, lastResult);
-  
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-	  if(txMemberId==null) {
-		  return getSender();
-	  } else {
-		  return txMemberId;
-	  }
+    if (txMemberId == null) {
+      return getSender();
+    } else {
+      return txMemberId;
+    }
-  
+
-  
+
