Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class DistributedClearOperation extends DistributedCacheOperation
-{
+public class DistributedClearOperation extends DistributedCacheOperation {
-    OP_LOCK_FOR_CLEAR,
-    OP_CLEAR,
+    OP_LOCK_FOR_CLEAR, OP_CLEAR,
+
-  
+
-  private static final ConcurrentHashMap<LockKey, DistributedRegion> lockedRegions = new ConcurrentHashMap<LockKey, DistributedRegion>();
-  
-  public static void regionLocked(InternalDistributedMember locker, String regionPath, DistributedRegion region) {
+  private static final ConcurrentHashMap<LockKey, DistributedRegion> lockedRegions =
+      new ConcurrentHashMap<LockKey, DistributedRegion>();
+
+  public static void regionLocked(InternalDistributedMember locker, String regionPath,
+      DistributedRegion region) {
-  
-  public static DistributedRegion regionUnlocked(InternalDistributedMember locker, String regionPath) {
+
+  public static DistributedRegion regionUnlocked(InternalDistributedMember locker,
+      String regionPath) {
-  
-  /** distribute a clear() to other members 
+
+  /**
+   * distribute a clear() to other members
-  public static void clear(RegionEventImpl regionEvent, RegionVersionVector rvv, Set<InternalDistributedMember> recipients) {
-    new DistributedClearOperation(
-        DistributedClearOperation.OperationType.OP_CLEAR,
-        regionEvent, rvv, recipients).distribute();
+  public static void clear(RegionEventImpl regionEvent, RegionVersionVector rvv,
+      Set<InternalDistributedMember> recipients) {
+    new DistributedClearOperation(DistributedClearOperation.OperationType.OP_CLEAR, regionEvent,
+        rvv, recipients).distribute();
-  
-  /** obtain locks on version generation in other members have them do a state-flush back to this member 
-   * @param recipients */
-  public static void lockAndFlushToOthers(RegionEventImpl regionEvent, Set<InternalDistributedMember> recipients) {
+
+  /**
+   * obtain locks on version generation in other members have them do a state-flush back to this
+   * member
+   * 
+   * @param recipients
+   */
+  public static void lockAndFlushToOthers(RegionEventImpl regionEvent,
+      Set<InternalDistributedMember> recipients) {
-        DistributedClearOperation.OperationType.OP_LOCK_FOR_CLEAR,
-        regionEvent, null, recipients);
+        DistributedClearOperation.OperationType.OP_LOCK_FOR_CLEAR, regionEvent, null, recipients);
-    String cname = getClass().getName().substring(
-        getClass().getPackage().getName().length() + 1);
-    return cname + "(op=" + this.operation + ", tag=" + this.operationTag + "event=" + this.event + ")";
+    String cname = getClass().getName().substring(getClass().getPackage().getName().length() + 1);
+    return cname + "(op=" + this.operation + ", tag=" + this.operationTag + "event=" + this.event
+        + ")";
-  public static void releaseLocks(RegionEventImpl regionEvent, Set<InternalDistributedMember> recipients) {
-    DistributedRegion region =  (DistributedRegion) regionEvent.getRegion();
+  public static void releaseLocks(RegionEventImpl regionEvent,
+      Set<InternalDistributedMember> recipients) {
+    DistributedRegion region = (DistributedRegion) regionEvent.getRegion();
-  
+
-  
-  /** Creates new instance of DistributedClearOperation 
-   * @param recipients */
-  private DistributedClearOperation(OperationType op, RegionEventImpl event, RegionVersionVector rvv, Set<InternalDistributedMember> recipients) {
+
+  /**
+   * Creates new instance of DistributedClearOperation
+   * 
+   * @param recipients
+   */
+  private DistributedClearOperation(OperationType op, RegionEventImpl event,
+      RegionVersionVector rvv, Set<InternalDistributedMember> recipients) {
-  protected void initProcessor(CacheOperationReplyProcessor p,
-      CacheOperationMessage msg) {
+  protected void initProcessor(CacheOperationReplyProcessor p, CacheOperationMessage msg) {
- 
+
- 
+
-  protected CacheOperationMessage createMessage()
-  {
+  protected CacheOperationMessage createMessage() {
-      ((ClearRegionWithContextMessage)mssg).context = ((ClientRegionEventImpl)this.event)
-          .getContext();
+      ((ClearRegionWithContextMessage) mssg).context =
+          ((ClientRegionEventImpl) this.event).getContext();
-    }
-    else {
+    } else {
-  
+
-  protected Set getRecipients()
-  {
+  protected Set getRecipients() {
-  
-  
-  public static class ClearRegionMessage extends CacheOperationMessage
-  {
+
+
+  public static class ClearRegionMessage extends CacheOperationMessage {
-    
+
-      /* since clear() can block for a while we don't want to run it in a reader
-       * thread.  It is also okay to run this in a non-ordered executor since
-       * the operation contains its own ordering information.
+      /*
+       * since clear() can block for a while we don't want to run it in a reader thread. It is also
+       * okay to run this in a non-ordered executor since the operation contains its own ordering
+       * information.
-    protected InternalCacheEvent createEvent(DistributedRegion rgn)
-        throws EntryNotFoundException
-    {
+    protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {
-        event.setLocalFilterInfo(this.filterRouting
-            .getFilterInfo(rgn.getMyId()));
+        event.setLocalFilterInfo(this.filterRouting.getFilterInfo(rgn.getMyId()));
-    
-    protected RegionEventImpl createRegionEvent(DistributedRegion rgn)
-    {     
-      RegionEventImpl event = new RegionEventImpl(rgn, getOperation(),
-          this.callbackArg, true /* originRemote */, getSender());
+
+    protected RegionEventImpl createRegionEvent(DistributedRegion rgn) {
+      RegionEventImpl event = new RegionEventImpl(rgn, getOperation(), this.callbackArg,
+          true /* originRemote */, getSender());
-    
+
-        throws EntryNotFoundException
-    {
-      
-      DistributedRegion region = (DistributedRegion)event.getRegion();
+        throws EntryNotFoundException {
+
+      DistributedRegion region = (DistributedRegion) event.getRegion();
-      case OP_CLEAR:
-        region.clearRegionLocally((RegionEventImpl)event, false, this.rvv);
-        region.notifyBridgeClients((RegionEventImpl)event);
-        this.appliedOperation = true;
-        break;
-      case OP_LOCK_FOR_CLEAR:
-        if (region.getDataPolicy().withStorage()) {
-          DistributedClearOperation.regionLocked(this.getSender(), region.getFullPath(), region);
-          region.lockLocallyForClear(dm, this.getSender(), event);
-        }
-        this.appliedOperation = true;
-        break;
+        case OP_CLEAR:
+          region.clearRegionLocally((RegionEventImpl) event, false, this.rvv);
+          region.notifyBridgeClients((RegionEventImpl) event);
+          this.appliedOperation = true;
+          break;
+        case OP_LOCK_FOR_CLEAR:
+          if (region.getDataPolicy().withStorage()) {
+            DistributedClearOperation.regionLocked(this.getSender(), region.getFullPath(), region);
+            region.lockLocallyForClear(dm, this.getSender(), event);
+          }
+          this.appliedOperation = true;
+          break;
-    
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.eventID = (EventID)DataSerializer.readObject(in);
-      this.rvv = (RegionVersionVector)DataSerializer.readObject(in);
-      this.operationTag = (VersionTag<?>)DataSerializer.readObject(in);
+      this.eventID = (EventID) DataSerializer.readObject(in);
+      this.rvv = (RegionVersionVector) DataSerializer.readObject(in);
+      this.operationTag = (VersionTag<?>) DataSerializer.readObject(in);
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-    protected void appendFields(StringBuilder buff)
-    {
+    protected void appendFields(StringBuilder buff) {
-  public static final class ClearRegionWithContextMessage extends ClearRegionMessage
-  {
+  public static final class ClearRegionWithContextMessage extends ClearRegionMessage {
-    
+
-    final public RegionEventImpl createRegionEvent(DistributedRegion rgn)
-    {
-      
-      ClientRegionEventImpl event = new ClientRegionEventImpl(rgn,
-          getOperation(), this.callbackArg, true /* originRemote */,
-          getSender(), (ClientProxyMembershipID)this.context);
+    final public RegionEventImpl createRegionEvent(DistributedRegion rgn) {
+
+      ClientRegionEventImpl event = new ClientRegionEventImpl(rgn, getOperation(), this.callbackArg,
+          true /* originRemote */, getSender(), (ClientProxyMembershipID) this.context);
-    protected void appendFields(StringBuilder buff)
-    {
+    protected void appendFields(StringBuilder buff) {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-  
+
-      result = prime * result
-          + ((regionPath == null) ? 0 : regionPath.hashCode());
+      result = prime * result + ((regionPath == null) ? 0 : regionPath.hashCode());
-    
+
