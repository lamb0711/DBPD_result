Merge remote-tracking branch 'upstream/develop' into develop

+import static org.apache.geode.internal.Banner.BannerHeader.CLASS_PATH;
+import static org.apache.geode.internal.Banner.BannerHeader.COMMAND_LINE_PARAMETERS;
+import static org.apache.geode.internal.Banner.BannerHeader.COMMUNICATIONS_VERSION;
+import static org.apache.geode.internal.Banner.BannerHeader.CURRENT_DIR;
+import static org.apache.geode.internal.Banner.BannerHeader.HOME_DIR;
+import static org.apache.geode.internal.Banner.BannerHeader.LIBRARY_PATH;
+import static org.apache.geode.internal.Banner.BannerHeader.LICENSE_START;
+import static org.apache.geode.internal.Banner.BannerHeader.LOG4J2_CONFIGURATION;
+import static org.apache.geode.internal.Banner.BannerHeader.PROCESS_ID;
+import static org.apache.geode.internal.Banner.BannerHeader.SYSTEM_PROPERTIES;
+import static org.apache.geode.internal.Banner.BannerHeader.USER;
+
-import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.logging.ConfigurationInfo;
+  public static final String SEPARATOR =
+      "---------------------------------------------------------------------------";
+
-    final String SEPARATOR =
-        "---------------------------------------------------------------------------";
-    out.println("Communications version: " + currentOrdinal);
-    out.println("Process ID: " + processId);
-    out.println("User: " + userName);
-    out.println("Current dir: " + userDir);
-    out.println("Home dir: " + userHome);
+    out.println(COMMUNICATIONS_VERSION.displayValue() + ": " + currentOrdinal);
+    out.println(PROCESS_ID.displayValue() + ": " + processId);
+    out.println(USER.displayValue() + ": " + userName);
+    out.println(CURRENT_DIR.displayValue() + ": " + userDir);
+    out.println(HOME_DIR.displayValue() + ": " + userHome);
-      out.println("Command Line Parameters:");
+      out.println(COMMAND_LINE_PARAMETERS.displayValue() + ":");
-    out.println("Class Path:");
+    out.println(CLASS_PATH.displayValue() + ":");
-    out.println("Library Path:");
+    out.println(LIBRARY_PATH.displayValue() + ":");
-      out.println("System Properties:");
+      out.println(SYSTEM_PROPERTIES.displayValue() + ":");
-      out.println("Log4J 2 Configuration:");
-      out.println("    " + LogService.getConfigurationInfo());
+      out.println(LOG4J2_CONFIGURATION.displayValue() + ":");
+      out.println("    " + ConfigurationInfo.getConfigurationInfo());
-    out.println("  Licensed to the Apache Software Foundation (ASF) under one or more");
+    out.println("  " + LICENSE_START.displayValue());
-  public static String getString(String args[]) {
+  public static String getString(String[] args) {
+
+  /**
+   * The headers of the log {@link Banner}.
+   */
+  public enum BannerHeader {
+
+    LICENSE_START("Licensed to the Apache Software Foundation (ASF) under one or more"),
+    BUILD_DATE(VersionDescription.BUILD_DATE),
+    BUILD_ID(VersionDescription.BUILD_ID),
+    BUILD_JAVA_VERSION(VersionDescription.BUILD_JAVA_VERSION),
+    BUILD_PLATFORM(VersionDescription.BUILD_PLATFORM),
+    PRODUCT_NAME(VersionDescription.PRODUCT_NAME),
+    PRODUCT_VERSION(VersionDescription.PRODUCT_VERSION),
+    SOURCE_DATE(VersionDescription.SOURCE_DATE),
+    SOURCE_REPOSITORY(VersionDescription.SOURCE_REPOSITORY),
+    SOURCE_REVISION(VersionDescription.SOURCE_REVISION),
+    NATIVE_VERSION(VersionDescription.NATIVE_VERSION),
+    RUNNING_ON(VersionDescription.RUNNING_ON),
+    COMMUNICATIONS_VERSION("Communications version"),
+    PROCESS_ID("Process ID"),
+    USER("User"),
+    CURRENT_DIR("Current dir"),
+    HOME_DIR("Home dir"),
+    COMMAND_LINE_PARAMETERS("Command Line Parameters"),
+    CLASS_PATH("Class Path"),
+    LIBRARY_PATH("Library Path"),
+    SYSTEM_PROPERTIES("System Properties"),
+    LOG4J2_CONFIGURATION("Log4J 2 Configuration");
+
+    private final String displayValue;
+
+    BannerHeader(String displayValue) {
+      this.displayValue = displayValue;
+    }
+
+    public String displayValue() {
+      return displayValue;
+    }
+
+    public static String[] displayValues() {
+      String[] headerValues = new String[BannerHeader.values().length];
+      int i = 0;
+      for (BannerHeader bannerHeader : BannerHeader.values()) {
+        headerValues[i] = bannerHeader.displayValue();
+        i++;
+      }
+      return headerValues;
+    }
+  }
