Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-package org.apache.geode.protocol.protobuf.utilities;
+package org.apache.geode.internal.protocol.protobuf.utilities;
-import org.apache.geode.protocol.protobuf.EncodingTypeTranslator;
-import org.apache.geode.protocol.protobuf.ProtobufSerializationService;
+import org.apache.geode.internal.protocol.protobuf.EncodingTypeTranslator;
+import org.apache.geode.internal.protocol.protobuf.ProtobufSerializationService;
-import org.apache.geode.protocol.protobuf.utilities.exception.UnknownProtobufPrimitiveType;
-import org.apache.geode.serialization.SerializationService;
-import org.apache.geode.serialization.exception.UnsupportedEncodingTypeException;
-import org.apache.geode.serialization.registry.exception.CodecNotRegisteredForTypeException;
+import org.apache.geode.internal.protocol.protobuf.utilities.exception.UnknownProtobufPrimitiveType;
+import org.apache.geode.internal.serialization.SerializationService;
+import org.apache.geode.internal.serialization.exception.UnsupportedEncodingTypeException;
+import org.apache.geode.internal.serialization.registry.exception.CodecNotRegisteredForTypeException;
-   * unset in the {@link BasicTypes.Entry}.
+   * unset in the BasicTypes.Entry.
-   * @param messageHeader - The header for the message
-  public static ClientProtocol.Message createProtobufResponse(
-      ClientProtocol.MessageHeader messageHeader, ClientProtocol.Response response) {
-    return ClientProtocol.Message.newBuilder().setMessageHeader(messageHeader).setResponse(response)
-        .build();
+  public static ClientProtocol.Message createProtobufResponse(ClientProtocol.Response response) {
+    return ClientProtocol.Message.newBuilder().setResponse(response).build();
-   * @param messageHeader - The header for the message
-  public static ClientProtocol.Message createProtobufMessage(
-      ClientProtocol.MessageHeader messageHeader, ClientProtocol.Request request) {
-    return ClientProtocol.Message.newBuilder().setMessageHeader(messageHeader).setRequest(request)
-        .build();
+  public static ClientProtocol.Message createProtobufMessage(ClientProtocol.Request request) {
+    return ClientProtocol.Message.newBuilder().setRequest(request).build();
-   * This builds the MessageHeader for a response which matches an incoming request
-   *
-   * @param request - The request message that we're responding to.
-   * @return the MessageHeader the response to the passed request
-   */
-  public static ClientProtocol.MessageHeader createMessageHeaderForRequest(
-      ClientProtocol.Message request) {
-    return createMessageHeader(request.getMessageHeader().getCorrelationId());
-  }
-
-  /**
-   * This creates a MessageHeader
-   *
-   * @param correlationId - An identifier used to correlate requests and responses
-   * @return a MessageHeader containing the above parameters
-   */
-  public static ClientProtocol.MessageHeader createMessageHeader(int correlationId) {
-    return ClientProtocol.MessageHeader.newBuilder().setCorrelationId(correlationId).build();
-  }
-
-  /**
