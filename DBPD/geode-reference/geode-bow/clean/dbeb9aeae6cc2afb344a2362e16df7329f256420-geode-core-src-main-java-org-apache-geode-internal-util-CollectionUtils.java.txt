Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The CollectionUtils class is a utility class for working with the Java Collections framework of classes, data
- * structures and algorithms.
+ * The CollectionUtils class is a utility class for working with the Java Collections framework of
+ * classes, data structures and algorithms.
+ * 
+   * 
+   * 
+   * 
-   * Null-safe implementation for method invocations that return a List Collection.  If the returned List is null,
-   * then this method will return an empty List in it's place.
+   * Null-safe implementation for method invocations that return a List Collection. If the returned
+   * List is null, then this method will return an empty List in it's place.
+   * 
-   * Null-safe implementation for method invocations that return a Set Collection.  If the returned Set is null,
-   * then this method will return an empty Set in it's place.
+   * Null-safe implementation for method invocations that return a Set Collection. If the returned
+   * Set is null, then this method will return an empty Set in it's place.
+   * 
+   * 
-   * @param filter the Filter applied to the Collection of elements in search of all matching elements.
-   * @return a List of elements from the Collection matching the criteria of the Filter in the order in which they were
-   * found.  If no elements match the Filter criteria, then an empty List is returned.
+   * @param filter the Filter applied to the Collection of elements in search of all matching
+   *        elements.
+   * @return a List of elements from the Collection matching the criteria of the Filter in the order
+   *         in which they were found. If no elements match the Filter criteria, then an empty List
+   *         is returned.
+   * 
-   * @param filter the Filter applied to the Collection of elements in search of the matching element.
-   * @return a single element from the Collection that match the criteria of the Filter.  If multiple elements match
-   * the Filter criteria, then this method will return the first one.  If no element of the Collection matches
-   * the criteria of the Filter, then this method returns null.
+   * @param filter the Filter applied to the Collection of elements in search of the matching
+   *        element.
+   * @return a single element from the Collection that match the criteria of the Filter. If multiple
+   *         elements match the Filter criteria, then this method will return the first one. If no
+   *         element of the Collection matches the criteria of the Filter, then this method returns
+   *         null.
+   * 
-  public static <K, V> Map<K, V> removeKeys(final Map<K, V> map, final Filter<Map.Entry<K, V>> filter) {
-    for (final Iterator<Map.Entry<K, V>> mapEntries = map.entrySet().iterator(); mapEntries.hasNext(); ) {
+  public static <K, V> Map<K, V> removeKeys(final Map<K, V> map,
+      final Filter<Map.Entry<K, V>> filter) {
+    for (final Iterator<Map.Entry<K, V>> mapEntries = map.entrySet().iterator(); mapEntries
+        .hasNext();) {
+   * 
-      @Override public boolean accept(final Map.Entry<K, V> entry) {
+      @Override
+      public boolean accept(final Map.Entry<K, V> entry) {
-   * @param collection
-   *          to add from enumeration.
-   * @param enumeration
-   *          to add to collection.
+   * @param collection to add from enumeration.
+   * @param enumeration to add to collection.
-  public static final <T> boolean addAll(final Collection<T> collection, final Enumeration<T> enumeration) {
+  public static final <T> boolean addAll(final Collection<T> collection,
+      final Enumeration<T> enumeration) {
-   * Construct a new unmodifiable {@link Iterable} backed by the supplied
-   * <code>iterable</code>.
+   * Construct a new unmodifiable {@link Iterable} backed by the supplied <code>iterable</code>.
-   * {@link Iterable#iterator()} will return an umodifiable {@link Iterator} on
-   * which calling {@link Iterator#remove()} will throw
-   * {@link UnsupportedOperationException}.
+   * {@link Iterable#iterator()} will return an umodifiable {@link Iterator} on which calling
+   * {@link Iterator#remove()} will throw {@link UnsupportedOperationException}.
-   * @param iterable
-   *          to wrap as unmodifiable
+   * @param iterable to wrap as unmodifiable
