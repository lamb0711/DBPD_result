Merge branch 'release/1.3.0'

+import java.util.Optional;
+import java.util.Properties;
-import java.util.concurrent.CancellationException;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.execute.FunctionException;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.security.SecurityService;
- * 
-      Cache cache = CacheFactory.getAnyInstance();
+      Cache cache = context.getCache();
-      if (args != null) {
-        String functionId = ((String) args[0]);
-        String filterString = ((String) args[1]);
-        String resultCollectorName = ((String) args[2]);
-        String argumentsString = ((String) args[3]);
-        String onRegion = ((String) args[4]);
-
-        try {
-          if (argumentsString != null && argumentsString.length() > 0) {
-            functionArgs = argumentsString.split(",");
-          }
-          Set<String> filters = new HashSet<String>();
-          ResultCollector resultCollectorInstance = null;
-          if (resultCollectorName != null && resultCollectorName.length() > 0) {
-            resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
-                .forName(resultCollectorName).newInstance();
-          }
-          if (filterString != null && filterString.length() > 0) {
-            filters.add(filterString);
-          }
-          Function function = FunctionService.getFunction(functionId);
-
-          if (function == null) {
-            context.getResultSender().lastResult(CliStrings.format(
-                CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED, functionId));
-          } else {
-            Execution execution = null;
-            if (onRegion != null && onRegion.length() > 0) {
-              Region region = cache.getRegion(onRegion);
-              if (region != null) {
-                execution = FunctionService.onRegion(region);
-              }
-            } else {
-              execution = FunctionService.onMember(member);
-            }
-
-            if (execution != null) {
-              if (resultCollectorInstance != null) {
-                execution = execution.withCollector(resultCollectorInstance);
-              }
-
-              if (functionArgs != null && functionArgs.length > 0) {
-                execution = execution.setArguments(functionArgs);
-              }
-              if (filters != null && filters.size() > 0) {
-                execution = execution.withFilter(filters);
-              }
-
-              List<Object> results = (List<Object>) execution.execute(function).getResult();
-
-              StringBuilder resultMessege = new StringBuilder();
-              if (results != null) {
-                for (Object resultObj : results) {
-                  if (resultObj != null) {
-                    if (resultObj instanceof String) {
-                      resultMessege.append(((String) resultObj));
-                      resultMessege.append(GfshParser.LINE_SEPARATOR);
-                    } else if (resultObj instanceof Exception) {
-                      resultMessege.append(((IllegalArgumentException) resultObj).getMessage());
-                    } else {
-                      resultMessege.append(resultObj);
-                      resultMessege.append(GfshParser.LINE_SEPARATOR);
-                    }
-                  }
-                }
-              }
-              context.getResultSender().lastResult(resultMessege);
-            } else {
-              context.getResultSender()
-                  .lastResult(CliStrings.format(
-                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
-                      functionId, member.getId(), onRegion,
-                      CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
-            }
-          }
-
-        } catch (ClassNotFoundException e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                  resultCollectorName, e.getMessage()));
-        } catch (FunctionException e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                  functionId, member.getId(), e.getMessage()));
-        } catch (CancellationException e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                  functionId, member.getId(), e.getMessage()));
-        } catch (InstantiationException e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                  resultCollectorName, e.getMessage()));
-        } catch (IllegalAccessException e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                  resultCollectorName, e.getMessage()));
-        } catch (Exception e) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                  functionId, member.getId(), e.getMessage()));
-        }
-      } else {
+      if (args == null) {
+        return;
+      }
+
+      String functionId = ((String) args[0]);
+      String filterString = ((String) args[1]);
+      String resultCollectorName = ((String) args[2]);
+      String argumentsString = ((String) args[3]);
+      String onRegion = ((String) args[4]);
+      Properties credentials = (Properties) args[5];
+
+      SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
+
+      try {
+        securityService.login(credentials);
+
+        if (argumentsString != null && argumentsString.length() > 0) {
+          functionArgs = argumentsString.split(",");
+        }
+        Set<String> filters = new HashSet<>();
+        ResultCollector resultCollectorInstance = null;
+        if (resultCollectorName != null && resultCollectorName.length() > 0) {
+          resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
+              .forName(resultCollectorName).newInstance();
+        }
+        if (filterString != null && filterString.length() > 0) {
+          filters.add(filterString);
+        }
+
+        Function<?> function = FunctionService.getFunction(functionId);
+        if (function == null) {
+          context.getResultSender().lastResult(CliStrings.format(
+              CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED, functionId));
+          return;
+        }
+
+        // security check
+        function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
+
+        Execution execution = null;
+        if (onRegion != null && onRegion.length() > 0) {
+          Region region = cache.getRegion(onRegion);
+          if (region == null) {
+            context.getResultSender().lastResult(onRegion + "does not exist.");
+            return;
+          }
+          execution = FunctionService.onRegion(region);
+        } else {
+          execution = FunctionService.onMember(member);
+        }
+
+        if (execution == null) {
+          context.getResultSender()
+              .lastResult(CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
+                  functionId, member.getId(), onRegion,
+                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
+          return;
+        }
+
+        if (resultCollectorInstance != null) {
+          execution = execution.withCollector(resultCollectorInstance);
+        }
+
+        if (functionArgs != null && functionArgs.length > 0) {
+          execution = execution.setArguments(functionArgs);
+        }
+        if (filters.size() > 0) {
+          execution = execution.withFilter(filters);
+        }
+
+        List<Object> results = (List<Object>) execution.execute(function).getResult();
+
+        StringBuilder resultMessage = new StringBuilder();
+        if (results != null) {
+          for (Object resultObj : results) {
+            if (resultObj != null) {
+              if (resultObj instanceof String) {
+                resultMessage.append(((String) resultObj));
+                resultMessage.append(GfshParser.LINE_SEPARATOR);
+              } else if (resultObj instanceof Exception) {
+                resultMessage.append(((IllegalArgumentException) resultObj).getMessage());
+              } else {
+                resultMessage.append(resultObj);
+                resultMessage.append(GfshParser.LINE_SEPARATOR);
+              }
+            }
+          }
+        }
+        context.getResultSender().lastResult(resultMessage);
+
+      } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
+        context.getResultSender()
+            .lastResult(CliStrings.format(
+                CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
+                resultCollectorName, e.getMessage()));
+      } catch (Exception e) {
+        context.getResultSender()
+            .lastResult(CliStrings.format(
+                CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
+                functionId, member.getId(), e.getMessage()));
+      } finally {
+        securityService.logout();
-  public boolean hasResult() {
-    return true;
-  }
-
-  @Override
-  public boolean optimizeForWrite() {
-    // no need of optimization since read-only.
-    return false;
-  }
-
-  @Override
