Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  protected Parser                  parser;  
-  private   CommandManager          commandManager;
-  private   int                     lastExecutionStatus;
-  private   LogWrapper              logWrapper;
-  
+  protected Parser parser;
+  private CommandManager commandManager;
+  private int lastExecutionStatus;
+  private LogWrapper logWrapper;
+
-  
+
-  
+
-    this.commandManager    = CommandManager.getInstance(cacheProperties);
+    this.commandManager = CommandManager.getInstance(cacheProperties);
-    this.parser            = new GfshParser(commandManager);
-    this.logWrapper        = LogWrapper.getInstance();
+    this.parser = new GfshParser(commandManager);
+    this.logWrapper = LogWrapper.getInstance();
-  
+
-////stripped down AbstractShell.executeCommand
-  public ParseResult parseCommand(String commentLessLine) throws CommandProcessingException, IllegalStateException {
+  //// stripped down AbstractShell.executeCommand
+  public ParseResult parseCommand(String commentLessLine)
+      throws CommandProcessingException, IllegalStateException {
-  
+
-    Object result        = null;
+    Object result = null;
-        ParseResult parseResult = ((CommandStatementImpl)cmdStmt).getParseResult();
+        ParseResult parseResult = ((CommandStatementImpl) cmdStmt).getParseResult();
-          if (parseResult == null) {//TODO-Abhishek: Handle this in GfshParser Implementation
+          if (parseResult == null) {// TODO-Abhishek: Handle this in GfshParser Implementation
-          ((CommandStatementImpl)cmdStmt).setParseResult(parseResult);
+          ((CommandStatementImpl) cmdStmt).setParseResult(parseResult);
-        //do general authorization check here
+        // do general authorization check here
-            logWrapper.fine("Unknown result type, using toString : "+String.valueOf(result));
+            logWrapper.fine("Unknown result type, using toString : " + String.valueOf(result));
-      } catch (CommandProcessingException e) { //expected from Parser
+      } catch (CommandProcessingException e) { // expected from Parser
-          logWrapper.info("Could not parse \""+cmdStmt.getCommandString()+"\".", e);
+          logWrapper.info("Could not parse \"" + cmdStmt.getCommandString() + "\".", e);
-          logWrapper.info("Could not execute \""+cmdStmt.getCommandString()+"\".", e);
+          logWrapper.info("Could not execute \"" + cmdStmt.getCommandString() + "\".", e);
-      }catch (RuntimeException e) {
+      } catch (RuntimeException e) {
-          logWrapper.info("Could not execute \""+cmdStmt.getCommandString()+"\".", e);
+          logWrapper.info("Could not execute \"" + cmdStmt.getCommandString() + "\".", e);
-        return ResultBuilder.createGemFireErrorResult("Error while processing command <" +cmdStmt.getCommandString()+"> Reason : " + e.getMessage());
+        return ResultBuilder.createGemFireErrorResult("Error while processing command <"
+            + cmdStmt.getCommandString() + "> Reason : " + e.getMessage());
-          logWrapper.warning("Could not execute \""+cmdStmt.getCommandString()+"\".", e);
+          logWrapper.warning("Could not execute \"" + cmdStmt.getCommandString() + "\".", e);
-        return ResultBuilder.createGemFireErrorResult("Unexpected error while processing command <" +cmdStmt.getCommandString()+"> Reason : " + e.getMessage());
+        return ResultBuilder.createGemFireErrorResult("Unexpected error while processing command <"
+            + cmdStmt.getCommandString() + "> Reason : " + e.getMessage());
-  
+
-      this.commandManager    = null;
+      this.commandManager = null;
-      this.parser            = null;
-      this.isStopped         = true;
+      this.parser = null;
+      this.isStopped = true;
