GEODE-3915: use ClassName type for cache-loader, writer and listeners (#1327)

* GEODE-3915: use ClassName type for cache-loader, writer and listeners

* use json string to specify the init properties
* make sure the parser works when multiple ClassNames are specified in the command line.
* rework AlterRegionCommandDUnitTest
* make sure AnalyzeSerializableJunitTest works in IDEA.

Signed-off-by: Patrick Rhomberg <prhomberg@pivotal.io>

-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-  // pattern used to split the user input with whitespaces except those in quotes (single or double)
-  private static Pattern PATTERN =
-      Pattern.compile("\\s*([^\\s']*)'([^']*)'\\s+|\\s*([^\\s\"]*)\"([^\"]*)\"\\s+|\\S+");
-
-  static List<String> splitUserInput(String userInput) {
-    // make sure the userInput ends with a white space, because our regex expects the the quotes
-    // ends with at least one white space. We will trim the results after we found it.
-    userInput = userInput + " ";
-    // first split with whitespaces except in quotes
-    List<String> splitWithWhiteSpaces = new ArrayList<>();
-    Matcher m = PATTERN.matcher(userInput);
-    while (m.find()) {
-      splitWithWhiteSpaces.add(m.group().trim());
+  /**
+   * it's assumed that the quoted string should not have escaped quotes inside it.
+   */
+  public static List<String> splitWithWhiteSpace(String input) {
+    List<String> tokensList = new ArrayList<>();
+    StringBuilder token = new StringBuilder();
+    char insideQuoteOf = Character.MIN_VALUE;
+
+    for (char c : input.toCharArray()) {
+      if (Character.isWhitespace(c)) {
+        // if we are in the quotes
+        if (insideQuoteOf != Character.MIN_VALUE) {
+          token.append(c);
+        }
+        // if we are not in the quotes, terminate this token and add it to the list
+        else {
+          if (token.length() > 0) {
+            tokensList.add(token.toString());
+          }
+          token = new StringBuilder();
+        }
+      }
+      // not a white space
+      else {
+        token.append(c);
+        // if encountering a quote
+        if (c == '\'' || c == '\"') {
+          // if this is the beginning of quote
+          if (insideQuoteOf == Character.MIN_VALUE) {
+            insideQuoteOf = c;
+          }
+          // this is the ending of quote
+          else if (insideQuoteOf == c) {
+            insideQuoteOf = Character.MIN_VALUE;
+          }
+        }
+      }
+    if (token.length() > 0) {
+      tokensList.add(token.toString());
+    }
+    return tokensList;
+  }
+
+  static List<String> splitUserInput(String userInput) {
+    // first split with whitespaces except in quotes
+    List<String> splitWithWhiteSpaces = splitWithWhiteSpace(userInput);
