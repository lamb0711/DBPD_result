Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-        EvictionAttributesData evictionAttributesData = new EvictionAttributesData(algorithm, null,
-            EvictionAlgorithm.NONE.toString());
+        EvictionAttributesData evictionAttributesData =
+            new EvictionAttributesData(algorithm, null, EvictionAlgorithm.NONE.toString());
-    EvictionAttributesData evictionAttributesData = new EvictionAttributesData(algorithm, maximum, action);
+    EvictionAttributesData evictionAttributesData =
+        new EvictionAttributesData(algorithm, maximum, action);
-    MembershipAttributesData membershipAttributesData = new MembershipAttributesData(requiredRoles, lossAction,
-        resumptionAction);
+    MembershipAttributesData membershipAttributesData =
+        new MembershipAttributesData(requiredRoles, lossAction, resumptionAction);
-        partitionListeners[i] = (partAttrs.getPartitionListeners())[i].getClass().getCanonicalName();
+        partitionListeners[i] =
+            (partAttrs.getPartitionListeners())[i].getClass().getCanonicalName();
-    PartitionAttributesData partitionAttributesData = new PartitionAttributesData(redundantCopies, totalMaxMemory,
-        totalNumBuckets, localMaxMemory, colocatedWith, partitionResolver, recoveryDelay, startupRecoveryDelay,
-        partitionListeners);
+    PartitionAttributesData partitionAttributesData = new PartitionAttributesData(redundantCopies,
+        totalMaxMemory, totalNumBuckets, localMaxMemory, colocatedWith, partitionResolver,
+        recoveryDelay, startupRecoveryDelay, partitionListeners);
-  public static FixedPartitionAttributesData[] getFixedPartitionAttributesData(PartitionAttributes partAttrs) {
+  public static FixedPartitionAttributesData[] getFixedPartitionAttributesData(
+      PartitionAttributes partAttrs) {
-    FixedPartitionAttributesData[] fixedPartitionAttributesTable = new FixedPartitionAttributesData[partAttrs
-        .getFixedPartitionAttributes().size()];
+    FixedPartitionAttributesData[] fixedPartitionAttributesTable =
+        new FixedPartitionAttributesData[partAttrs.getFixedPartitionAttributes().size()];
-      FixedPartitionAttributesData data = new FixedPartitionAttributesData(fa.getPartitionName(), fa.isPrimary(), fa
-          .getNumBuckets());
+      FixedPartitionAttributesData data = new FixedPartitionAttributesData(fa.getPartitionName(),
+          fa.isPrimary(), fa.getNumBuckets());
-    
+
-    if(listeners != null && listeners.length > 0){
+    if (listeners != null && listeners.length > 0) {
-      for(CacheListener l : listeners){
+      for (CacheListener l : listeners) {
-    }else{
+    } else {
-    
+
-    RegionAttributesData regionAttributesData = new RegionAttributesData(cacheLoaderClassName, cacheWriteClassName, keyConstraintClassName,
-        valueContstraintClassName, regionTimeToLive, regionIdleTimeout, entryTimeToLive, entryIdleTimeout, customEntryTimeToLive,
-        customEntryIdleTimeout, ignoreJTA, dataPolicy, scope, initialCapacity, loadFactor, lockGrantor, multicastEnabled, concurrencyLevel,
-        indexMaintenanceSynchronous, statisticsEnabled, subsciptionConflationEnabled,
-        asyncConflationEnabled, poolName, isCloningEnabled, diskStoreName, interestPolicy, diskSynchronus, cacheListeners,
-        compressorClassName, offheap);
+    RegionAttributesData regionAttributesData =
+        new RegionAttributesData(cacheLoaderClassName, cacheWriteClassName, keyConstraintClassName,
+            valueContstraintClassName, regionTimeToLive, regionIdleTimeout, entryTimeToLive,
+            entryIdleTimeout, customEntryTimeToLive, customEntryIdleTimeout, ignoreJTA, dataPolicy,
+            scope, initialCapacity, loadFactor, lockGrantor, multicastEnabled, concurrencyLevel,
+            indexMaintenanceSynchronous, statisticsEnabled, subsciptionConflationEnabled,
+            asyncConflationEnabled, poolName, isCloningEnabled, diskStoreName, interestPolicy,
+            diskSynchronus, cacheListeners, compressorClassName, offheap);
