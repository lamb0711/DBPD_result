Merge branch 'release/1.5.0'

-import org.apache.geode.cache.TransactionDataNotColocatedException;
-import org.apache.geode.cache.TransactionException;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.cache.RemoteFetchVersionMessage.FetchVersionResponse;
-import org.apache.geode.internal.cache.partitioned.RemoteSizeMessage;
+import org.apache.geode.internal.cache.tx.RemoteClearMessage;
+import org.apache.geode.internal.cache.tx.RemoteDestroyMessage;
+import org.apache.geode.internal.cache.tx.RemoteFetchVersionMessage;
+import org.apache.geode.internal.cache.tx.RemoteFetchVersionMessage.FetchVersionResponse;
+import org.apache.geode.internal.cache.tx.RemoteInvalidateMessage;
+import org.apache.geode.internal.cache.tx.RemotePutMessage;
-    return this.concurrencyChecksEnabled && (this.serverRegionProxy == null) && !isTX()
-        && this.scope.isDistributed() && !this.dataPolicy.withReplication();
+    return this.getConcurrencyChecksEnabled() && (this.serverRegionProxy == null) && !isTX()
+        && this.scope.isDistributed() && !this.getDataPolicy().withReplication();
-            if (!event.isBulkOpInProgress() || this.dataPolicy.withStorage()) {
+            if (!event.isBulkOpInProgress() || this.getDataPolicy().withStorage()) {
-      if (event.isPossibleDuplicate() && event.getRegion().concurrencyChecksEnabled
+      if (event.isPossibleDuplicate() && event.getRegion().getConcurrencyChecksEnabled()
-    if (concurrencyChecksEnabled && event.getVersionTag() == null) {
+    if (getConcurrencyChecksEnabled() && event.getVersionTag() == null) {
-          this.generateVersionTag, this.concurrencyChecksEnabled, this.dataPolicy, event);
+          this.generateVersionTag, this.getConcurrencyChecksEnabled(), this.getDataPolicy(), event);
-    if (!this.concurrencyChecksEnabled || this.dataPolicy == DataPolicy.EMPTY
+    if (!this.getConcurrencyChecksEnabled() || this.getDataPolicy() == DataPolicy.EMPTY
-    if (!event.isOriginRemote() && this.dataPolicy.withReplication()) {
+    if (!event.isOriginRemote() && this.getDataPolicy().withReplication()) {
-    if (!this.dataPolicy.withReplication() && !this.dataPolicy.withPersistence()) {
+    if (!this.getDataPolicy().withReplication() && !this.getDataPolicy().withPersistence()) {
-  protected void checkForLimitedOrNoAccess() {
+  public void checkForLimitedOrNoAccess() {
-  protected void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
+  public void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
-    // if we're versioning entries we need a region-level version vector
-    if (this.scope.isDistributed() && this.concurrencyChecksEnabled) {
-      createVersionVector();
-    }
-
-    if (this.dataPolicy.withPersistence()) {
+    if (this.getDataPolicy().withPersistence()) {
-    if (this.dataPolicy.withPersistence()) {
+    if (this.getDataPolicy().withPersistence()) {
-          || this.dataPolicy.withPreloaded() && !advice.preloaded.isEmpty() // this is a preloaded
-                                                                            // region
+          || this.getDataPolicy().withPreloaded() && !advice.preloaded.isEmpty() // this is a
+                                                                                 // preloaded
+          // region
-          if (this.dataPolicy.isPreloaded()) {
+          if (this.getDataPolicy().isPreloaded()) {
-    if (!this.concurrencyChecksEnabled) {
+    if (!this.getConcurrencyChecksEnabled()) {
-  protected void basicDestroy(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
+  public void basicDestroy(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
-            Assert.assertTrue(!this.dataPolicy.withReplication() || !this.generateVersionTag);
+            Assert.assertTrue(!this.getDataPolicy().withReplication() || !this.generateVersionTag);
-          if (!event.isBulkOpInProgress() || this.dataPolicy.withStorage()) {
+          if (!event.isBulkOpInProgress() || this.getDataPolicy().withStorage()) {
-  void basicDestroyPart3(RegionEntry re, EntryEventImpl event, boolean inTokenMode,
+  public void basicDestroyPart3(RegionEntry re, EntryEventImpl event, boolean inTokenMode,
-  void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
+  public void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
-            Assert.assertTrue(!this.dataPolicy.withReplication() || !this.generateVersionTag);
+            Assert.assertTrue(!this.getDataPolicy().withReplication() || !this.generateVersionTag);
-    LocalRegion localRegion = event.getLocalRegion();
+    LocalRegion localRegion = event.getRegion();
-    if (this.concurrencyChecksEnabled && !this.dataPolicy.withReplication()) {
+    if (this.getConcurrencyChecksEnabled() && !this.getDataPolicy().withReplication()) {
-          RemoteRegionOperation op = RemoteRegionOperation.clear(mbr, this);
+          RemoteClearMessage op = RemoteClearMessage.create(mbr, this);
-          } catch (CancelException e) {
-            this.stopper.checkCancelInProgress(e);
-            retry = true;
-          } catch (RemoteOperationException e) {
+          } catch (CancelException | RegionDestroyedException | RemoteOperationException e) {
-    boolean enableRVV = useRVV && this.dataPolicy.withReplication() && this.concurrencyChecksEnabled
-        && !getDistributionManager().isLoner();
+    boolean enableRVV = useRVV && this.getDataPolicy().withReplication()
+        && this.getConcurrencyChecksEnabled() && !getDistributionManager().isLoner();
-  void lockLocallyForClear(DM dm, InternalDistributedMember locker, CacheEvent event) {
+  void lockLocallyForClear(DistributionManager dm, InternalDistributedMember locker,
+      CacheEvent event) {
-    cacheProfile.requiresOldValueInEvents = this.dataPolicy.withReplication()
+    cacheProfile.requiresOldValueInEvents = this.getDataPolicy().withReplication()
-  protected void postCreateRegion() {
+  public void postCreateRegion() {
-  void cleanupFailedInitialization() {
+  public void cleanupFailedInitialization() {
-  void handleCacheClose(Operation operation) {
+  public void handleCacheClose(Operation operation) {
-      final DM dm = getDistributionManager();
+      final DistributionManager dm = getDistributionManager();
-    public void quorumLost(Set<InternalDistributedMember> failures,
-        List<InternalDistributedMember> remaining) {
+    public void quorumLost(DistributionManager distributionManager,
+        Set<InternalDistributedMember> failures, List<InternalDistributedMember> remaining) {
-    public void memberSuspect(InternalDistributedMember id, InternalDistributedMember whoSuspected,
-        String reason) {
+    public void memberSuspect(DistributionManager distributionManager, InternalDistributedMember id,
+        InternalDistributedMember whoSuspected, String reason) {
-    public synchronized void memberJoined(InternalDistributedMember id) {
+    public synchronized void memberJoined(DistributionManager distributionManager,
+        InternalDistributedMember id) {
-    public synchronized void memberDeparted(InternalDistributedMember id, boolean crashed) {
+    public synchronized void memberDeparted(DistributionManager distributionManager,
+        InternalDistributedMember id, boolean crashed) {
-    if (!this.getAttributes().getDataPolicy().withStorage() || (this.concurrencyChecksEnabled
+    if (!this.getAttributes().getDataPolicy().withStorage() || (this.getConcurrencyChecksEnabled()
-    if (this.concurrencyChecksEnabled && !generateVersionTag) {
+    if (this.getConcurrencyChecksEnabled() && !generateVersionTag) {
-
-  /**
-   * Returns the size in this region.
-   *
-   * This is used in a transaction to find the size of the region on the transaction hosting node.
-   *
-   * @param target the host of the transaction TXState
-   * @return the number of entries in this region
-   */
-  public int getRegionSize(DistributedMember target) {
-    try {
-      RemoteSizeMessage.SizeResponse response =
-          RemoteSizeMessage.send(Collections.singleton(target), this);
-      return response.waitForSize();
-    } catch (RegionDestroyedException rde) {
-      throw new TransactionDataNotColocatedException(
-          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-              .toLocalizedString(rde.getRegionFullPath()),
-          rde);
-    } catch (Exception e) {
-      throw new TransactionException(e);
-    }
-  }
-
-    final DM dm = getDistributionManager();
+    final DistributionManager dm = getDistributionManager();
-    final DM dm = getDistributionManager();
+    final DistributionManager dm = getDistributionManager();
-    assert this.dataPolicy != DataPolicy.REPLICATE;
+    assert this.getDataPolicy() != DataPolicy.REPLICATE;
-      if (tx != null) {
-        cache.getTXMgr().unpauseTransaction(tx);
-      }
+      cache.getTXMgr().unpauseTransaction(tx);
