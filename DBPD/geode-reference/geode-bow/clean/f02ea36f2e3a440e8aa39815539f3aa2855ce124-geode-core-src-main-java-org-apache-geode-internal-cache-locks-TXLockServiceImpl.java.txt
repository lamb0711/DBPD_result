GEODE-2024 Deadlock creating a new lock service Grantor

This change-set causes the code in TXLockServiceImpl.release() to
perform periodic checks to see if grantor recovery is being performed.
If so it skips releaseTryLocks, which requires a recovered grantor to
function.  This is in line with the previous attempts to fix this
problem.  The recovery message that is trying to obtain the recovery
write-lock now sets the "recovering" state in TXLockServiceImpl prior
to attempting to get the lock so that it is set when
TXLockServiceImpl.release() checks its state.

-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Set;
-
-import org.apache.logging.log4j.Logger;
-
+import org.apache.logging.log4j.Logger;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
-  /** List of active txLockIds */
+  /**
+   * List of active txLockIds
+   */
-   * grantor. TODO: this boolean can probably be removed... it was insufficient and new fixes for
-   * bug 38763 have the side effect of making this boolean obsolete (verify before removal!)
+   * grantor.
-      // only release w/ dlock if not in middle of recovery...
-      if (!this.recovering) {
-        this.dlock.releaseTryLocks(txLockId, true);
-      }
+
+      this.dlock.releaseTryLocks(txLockId, () -> {
+        return this.recovering;
+      });
+
+  boolean isRecovering() {
+    return this.recovering;
+  }
+
-    this.recoveryLock.writeLock().lockInterruptibly();
+    this.recoveryLock.writeLock().lockInterruptibly();
