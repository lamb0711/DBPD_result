Merge branch 'develop' into feature/GEODE-7049

-import static org.apache.geode.distributed.internal.membership.gms.ServiceConfig.MEMBER_REQUEST_COLLECTION_INTERVAL;
-import static org.apache.geode.internal.DataSerializableFixedID.JOIN_REQUEST;
-import static org.apache.geode.internal.DataSerializableFixedID.LEAVE_REQUEST_MESSAGE;
-import static org.apache.geode.internal.DataSerializableFixedID.REMOVE_MEMBER_REQUEST;
+import static org.apache.geode.distributed.internal.membership.gms.api.MembershipConfig.MEMBER_REQUEST_COLLECTION_INTERVAL;
+import static org.apache.geode.internal.serialization.DataSerializableFixedID.JOIN_REQUEST;
+import static org.apache.geode.internal.serialization.DataSerializableFixedID.LEAVE_REQUEST_MESSAGE;
+import static org.apache.geode.internal.serialization.DataSerializableFixedID.REMOVE_MEMBER_REQUEST;
-import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.annotations.VisibleForTesting;
-import org.apache.geode.distributed.internal.DistributionMessage;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.NetMember;
-import org.apache.geode.distributed.internal.membership.NetView;
+import org.apache.geode.distributed.internal.membership.gms.GMSMembershipView;
-import org.apache.geode.distributed.internal.membership.gms.ServiceConfig;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfig;
+import org.apache.geode.distributed.internal.membership.gms.messages.AbstractGMSMessage;
-import org.apache.geode.internal.Version;
+import org.apache.geode.internal.serialization.Version;
-  private InternalDistributedMember localAddress;
+  private GMSMember localAddress;
-  private volatile NetView currentView;
+  private volatile GMSMembershipView currentView;
-  private volatile NetView previousView;
+  private volatile GMSMembershipView previousView;
-  private final Set<InternalDistributedMember> removedMembers = new HashSet<>();
+  private final Set<GMSMember> removedMembers = new HashSet<>();
-  private final Set<InternalDistributedMember> leftMembers = new HashSet<>();
+  private final Set<GMSMember> leftMembers = new HashSet<>();
-  private volatile NetView preparedView;
+  private volatile GMSMembershipView preparedView;
-  private NetView lastConflictingView;
+  private GMSMembershipView lastConflictingView;
-  private final List<DistributionMessage> viewRequests = new LinkedList<DistributionMessage>();
+  private final List<AbstractGMSMessage> viewRequests = new LinkedList<>();
-  private int viewAckTimeout;
+  private long viewAckTimeout;
-  NetView quorumLostView;
+  GMSMembershipView quorumLostView;
-    Set<InternalDistributedMember> alreadyTried = new HashSet<>();
-    Set<InternalDistributedMember> registrants = new HashSet<>();
-    InternalDistributedMember possibleCoordinator;
+    Set<GMSMember> alreadyTried = new HashSet<>();
+    Set<GMSMember> registrants = new HashSet<>();
+    GMSMember possibleCoordinator;
-    NetView view;
+    GMSMembershipView view;
-          if (localAddress.getNetMember().preferredForCoordinator()
+          if (localAddress.preferredForCoordinator()
-    InternalDistributedMember coord = state.possibleCoordinator;
+    GMSMember coord = state.possibleCoordinator;
-      if (services.getConfig().getDistributionConfig().getSecurityUDPDHAlgo().length() > 0) {
+      if (services.getConfig().getSecurityUDPDHAlgo().length() > 0) {
-          NetView v = response.getCurrentView();
-          InternalDistributedMember coord = v.getCoordinator();
+          GMSMembershipView v = response.getCurrentView();
+          GMSMember coord = v.getCoordinator();
-  public boolean isMemberLeaving(DistributedMember mbr) {
+  public boolean isMemberLeaving(GMSMember mbr) {
-        && incomingRequest.getMemberID().getVersionObject().compareTo(Version.CURRENT) < 0) {
+        && incomingRequest.getMemberID().getVersionOrdinal() < Version.getCurrentVersion()
+            .ordinal()) {
-    NetView v = currentView;
+    GMSMembershipView v = currentView;
-    InternalDistributedMember mbr = incomingRequest.getMemberID();
+    GMSMember mbr = incomingRequest.getMemberID();
-      logger.info("Checking to see if I should become coordinator");
-      NetView check = new NetView(v, v.getViewId() + 1);
+      logger.info("Checking to see if I should become coordinator.  My address is {}",
+          localAddress);
+      GMSMembershipView check = new GMSMembershipView(v, v.getViewId() + 1);
-      Collection<InternalDistributedMember> suspectMembers =
-          services.getHealthMonitor().getMembersFailingAvailabilityCheck();
-      check.removeAll(suspectMembers);
-      logger.info("View with removed and left members removed is {}", check);
-      if (check.getCoordinator().equals(localAddress)) {
-        for (InternalDistributedMember suspect : suspectMembers) {
-          recordViewRequest(
-              new RemoveMemberMessage(localAddress, suspect, "Failed availability check"));
-        }
+      GMSMember coordinator = check.getCoordinator();
+      logger.info("View with removed and left members removed is {} and coordinator would be {}",
+          check, coordinator);
+      if (coordinator.equals(localAddress)) {
-    NetView v = currentView;
+    GMSMembershipView v = currentView;
-    InternalDistributedMember mbr = incomingRequest.getMemberID();
+    GMSMember mbr = incomingRequest.getMemberID();
-      NetView check = new NetView(v, v.getViewId() + 1);
+      GMSMembershipView check = new GMSMembershipView(v, v.getViewId() + 1);
-  private void recordViewRequest(DistributionMessage request) {
+  @VisibleForTesting
+  void recordViewRequest(AbstractGMSMessage request) {
-  List<DistributionMessage> getViewRequests() {
+  List<AbstractGMSMessage> getViewRequests() {
-      return new LinkedList<DistributionMessage>(viewRequests);
+      return new LinkedList<>(viewRequests);
-  private void becomeCoordinator(InternalDistributedMember oldCoordinator) {
+  private void becomeCoordinator(GMSMember oldCoordinator) {
-      NetView newView = new NetView(this.localAddress);
+      GMSMembershipView newView = new GMSMembershipView(this.localAddress);
-      NetView newView = copyCurrentViewAndAddMyAddress(oldCoordinator);
+      GMSMembershipView newView = copyCurrentViewAndAddMyAddress(oldCoordinator);
-  private void createAndStartViewCreator(NetView newView) {
+  private void createAndStartViewCreator(GMSMembershipView newView) {
-        viewCreator.setInitialView(newView, newView.getNewMembers(), newView.getShutdownMembers(),
+        viewCreator.setInitialView(newView, newView.getNewMembers(),
+            newView.getShutdownMembers(),
-  private NetView copyCurrentViewAndAddMyAddress(InternalDistributedMember oldCoordinator) {
+  private GMSMembershipView copyCurrentViewAndAddMyAddress(GMSMember oldCoordinator) {
-    NetView newView;
-    Set<InternalDistributedMember> leaving = new HashSet<>();
-    Set<InternalDistributedMember> removals;
+    GMSMembershipView newView;
+    Set<GMSMember> leaving = new HashSet<>();
+    Set<GMSMember> removals;
-      int rand = testing ? 0 : NetView.RANDOM.nextInt(10);
+      int rand = testing ? 0 : GMSMembershipView.RANDOM.nextInt(10);
-      List<InternalDistributedMember> mbrs = new ArrayList<>(currentView.getMembers());
+      List<GMSMember> mbrs = new ArrayList<>(currentView.getMembers());
-      newView = new NetView(this.localAddress, viewNumber, mbrs, leaving, removals);
+      newView = new GMSMembershipView(this.localAddress, viewNumber, mbrs, leaving, removals);
-  private void sendRemoveMessages(List<InternalDistributedMember> removals, List<String> reasons,
-      Set<InternalDistributedMember> oldIds) {
+  private void sendRemoveMessages(List<GMSMember> removals, List<String> reasons,
+      Set<GMSMember> oldIds) {
-    for (InternalDistributedMember mbr : removals) {
+    for (GMSMember mbr : removals) {
-  boolean prepareView(NetView view, List<InternalDistributedMember> newMembers)
+  boolean prepareView(GMSMembershipView view, List<GMSMember> newMembers)
-  void sendView(NetView view, List<InternalDistributedMember> newMembers)
+  void sendView(GMSMembershipView view, List<GMSMember> newMembers)
-  private boolean sendView(NetView view, boolean preparing, ViewReplyProcessor viewReplyProcessor)
+  private boolean sendView(GMSMembershipView view, boolean preparing,
+      ViewReplyProcessor viewReplyProcessor)
-    Set<InternalDistributedMember> recips = new HashSet<>(view.getMembers());
+    List<GMSMember> recips = new ArrayList<>(view.getMembers());
-    Set<InternalDistributedMember> responders = recips;
+    List<GMSMember> responders = recips;
-      recips = new HashSet<>(recips);
+      recips = new ArrayList<>(recips);
-      installView(new NetView(view, view.getViewId()));
+      installView(new GMSMembershipView(view, view.getViewId()));
-    Set<InternalDistributedMember> pendingLeaves = getPendingRequestIDs(LEAVE_REQUEST_MESSAGE);
-    Set<InternalDistributedMember> pendingRemovals = getPendingRequestIDs(REMOVE_MEMBER_REQUEST);
+    Set<GMSMember> pendingLeaves = getPendingRequestIDs(LEAVE_REQUEST_MESSAGE);
+    Set<GMSMember> pendingRemovals = getPendingRequestIDs(REMOVE_MEMBER_REQUEST);
-    viewReplyProcessor.initialize(id, responders);
+    viewReplyProcessor.initialize(id, new HashSet(responders));
-      Set<InternalDistributedMember> failedToRespond = viewReplyProcessor.waitForResponses();
+      Set<GMSMember> failedToRespond = viewReplyProcessor.waitForResponses();
-      InternalDistributedMember conflictingViewSender =
+      GMSMember conflictingViewSender =
-      NetView conflictingView = viewReplyProcessor.getConflictingView();
+      GMSMembershipView conflictingView = viewReplyProcessor.getConflictingView();
-  private void addPublicKeysToView(NetView view) {
-    String sDHAlgo = services.getConfig().getDistributionConfig().getSecurityUDPDHAlgo();
+  private void addPublicKeysToView(GMSMembershipView view) {
+    String sDHAlgo = services.getConfig().getSecurityUDPDHAlgo();
-      for (InternalDistributedMember mbr : view.getMembers()) {
+      for (GMSMember mbr : view.getMembers()) {
-    NetView view = m.getView();
+    GMSMembershipView view = m.getView();
-    // If our current view doesn't contaion sender then we wanrt to ignore that view.
+    // If our current view doesn't contain sender then we wanrt to ignore that view.
-      for (InternalDistributedMember mbr : view.getMembers()) {
+      for (GMSMember mbr : view.getMembers()) {
-        for (InternalDistributedMember mbr : view.getMembers()) {
+        for (GMSMember mbr : view.getMembers()) {
-            GMSMember me = (GMSMember) this.localAddress.getNetMember();
+            GMSMember me = this.localAddress;
-    String dhalgo = services.getConfig().getDistributionConfig().getSecurityUDPDHAlgo();
+    String dhalgo = services.getConfig().getSecurityUDPDHAlgo();
-    Set<InternalDistributedMember> possibleCoordinators = new HashSet<InternalDistributedMember>();
-    Set<InternalDistributedMember> coordinatorsWithView = new HashSet<InternalDistributedMember>();
+    Set<GMSMember> possibleCoordinators = new HashSet<GMSMember>();
+    Set<GMSMember> coordinatorsWithView = new HashSet<GMSMember>();
-            InternalDistributedMember responseCoordinator = response.getCoordinator();
+            GMSMember responseCoordinator = response.getCoordinator();
-              NetView v = response.getView();
+              GMSMembershipView v = response.getView();
-    Iterator<InternalDistributedMember> it = possibleCoordinators.iterator();
+    Iterator<GMSMember> it = possibleCoordinators.iterator();
-      InternalDistributedMember oldest = it.next();
+      GMSMember oldest = it.next();
-        InternalDistributedMember candidate = it.next();
+        GMSMember candidate = it.next();
-    InternalDistributedMember coord = null;
+    GMSMember coord = null;
-      InternalDistributedMember mbr = it.next();
+      GMSMember mbr = it.next();
-    NetView v = state.view;
-    List<InternalDistributedMember> recipients = new ArrayList<>(v.getMembers());
+    GMSMembershipView v = state.view;
+    List<GMSMember> recipients = new ArrayList(v.getMembers());
-      String dhalgo = services.getConfig().getDistributionConfig().getSecurityUDPDHAlgo();
+      String dhalgo = services.getConfig().getSecurityUDPDHAlgo();
-        for (InternalDistributedMember mbr : recipients) {
-          Set<InternalDistributedMember> r = new HashSet<>();
+        for (GMSMember mbr : recipients) {
+          List<GMSMember> r = new ArrayList<>();
-    InternalDistributedMember bestGuessCoordinator = null;
-    if (localAddress.getNetMember().preferredForCoordinator()) {
+    GMSMember bestGuessCoordinator = null;
+    if (localAddress.preferredForCoordinator()) {
-      InternalDistributedMember suggestedCoordinator = resp.getCoordinator();
+      GMSMember suggestedCoordinator = resp.getCoordinator();
-      NetView v = currentView;
+      GMSMembershipView v = currentView;
-  public NetView getView() {
+  public GMSMembershipView getView() {
-  public NetView getPreviousView() {
+  public GMSMembershipView getPreviousView() {
-  public InternalDistributedMember getMemberID() {
+  public GMSMember getMemberID() {
-  public void installView(NetView newView) {
+  public void installView(GMSMembershipView newView) {
-        for (InternalDistributedMember mbr : newView.getMembers()) {
+        for (GMSMember mbr : newView.getMembers()) {
-            GMSMember me = (GMSMember) this.localAddress.getNetMember();
+            GMSMember me = (GMSMember) this.localAddress;
-          Set<InternalDistributedMember> crashes = newView.getActualCrashedMembers(currentView);
+          Set<GMSMember> crashes = newView.getActualCrashedMembers(currentView);
-        NetView check = new NetView(newView, newView.getViewId() + 1);
+        GMSMembershipView check = new GMSMembershipView(newView, newView.getViewId() + 1);
-          for (Iterator<DistributionMessage> it = viewRequests.iterator(); it.hasNext();) {
-            DistributionMessage m = it.next();
+          for (Iterator<AbstractGMSMessage> it = viewRequests.iterator(); it.hasNext();) {
+            AbstractGMSMessage m = it.next();
-  private void removeMembersFromCollectionIfNotInView(Collection<InternalDistributedMember> members,
-      NetView currentView) {
-    Iterator<InternalDistributedMember> iterator = members.iterator();
+  private void removeMembersFromCollectionIfNotInView(Collection<GMSMember> members,
+      GMSMembershipView currentView) {
+    Iterator<GMSMember> iterator = members.iterator();
-  void sendNetworkPartitionMessage(NetView view) {
-    List<InternalDistributedMember> recipients = new ArrayList<>(view.getMembers());
+  void sendNetworkPartitionMessage(GMSMembershipView view) {
+    List<GMSMember> recipients = new ArrayList<>(view.getMembers());
-  public NetView getPreparedView() {
+  public GMSMembershipView getPreparedView() {
-  private boolean isNetworkPartition(NetView newView, boolean logWeights) {
+  private boolean isNetworkPartition(GMSMembershipView newView, boolean logWeights) {
-  public void setLocalAddress(InternalDistributedMember address) {
+  public void setLocalAddress(GMSMember address) {
-    GMSMember mbr = (GMSMember) this.localAddress.getNetMember();
+    GMSMember mbr = (GMSMember) this.localAddress;
-          || !services.getConfig().getDistributionConfig().getStartLocator().isEmpty()
-          || localAddress.getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE) {
+          || !services.getConfig().getStartLocator().isEmpty()
+          || localAddress.getVmKind() == GMSMember.LOCATOR_DM_TYPE) {
-  public void memberSuspected(InternalDistributedMember initiator,
-      InternalDistributedMember suspect, String reason) {
+  public void memberSuspected(GMSMember initiator,
+      GMSMember suspect, String reason) {
-      NetView view = currentView;
+      GMSMembershipView view = currentView;
-          List<InternalDistributedMember> coords =
+          List<GMSMember> coords =
-  public void remove(InternalDistributedMember m, String reason) {
-    NetView v = this.currentView;
+  public void remove(GMSMember m, String reason) {
+    GMSMembershipView v = this.currentView;
-      Set<InternalDistributedMember> filter = new HashSet<>();
+      Set<GMSMember> filter = new HashSet<>();
-        msg.resetRecipients();
-            ServiceConfig.SMALL_CLUSTER_SIZE + 1));
+            MembershipConfig.SMALL_CLUSTER_SIZE + 1));
-  public void memberShutdown(DistributedMember mbr, String reason) {
-    LeaveRequestMessage msg = new LeaveRequestMessage(Collections.singleton(this.localAddress),
-        (InternalDistributedMember) mbr, reason);
-    msg.setSender((InternalDistributedMember) mbr);
+  public void memberShutdown(GMSMember mbr, String reason) {
+    LeaveRequestMessage msg = new LeaveRequestMessage(Collections.singletonList(this.localAddress),
+        mbr, reason);
+    msg.setSender(mbr);
-  boolean checkIfAvailable(InternalDistributedMember fmbr) {
+  boolean checkIfAvailable(GMSMember fmbr) {
-  private InternalDistributedMember getMemId(NetMember jgId,
-      List<InternalDistributedMember> members) {
-    for (InternalDistributedMember m : members) {
-      if (m.getNetMember().equals(jgId)) {
+  private GMSMember getMemId(GMSMember jgId,
+      List<GMSMember> members) {
+    for (GMSMember m : members) {
+      if (m.equals(jgId)) {
-  public InternalDistributedMember getMemberID(NetMember jgId) {
-    NetView v = currentView;
-    InternalDistributedMember ret = null;
+  public GMSMember getMemberID(GMSMember member) {
+    GMSMembershipView v = currentView;
+    GMSMember ret = null;
-      ret = getMemId(jgId, v.getMembers());
+      ret = getMemId(member, v.getMembers());
-        ret = getMemId(jgId, v.getMembers());
+        ret = getMemId(member, v.getMembers());
-      return new InternalDistributedMember(jgId);
+      return member;
-    DistributionConfig dc = services.getConfig().getDistributionConfig();
-    if (dc.getMcastPort() != 0 && StringUtils.isBlank(dc.getLocators())
-        && StringUtils.isBlank(dc.getStartLocator())) {
+    MembershipConfig config = services.getConfig();
+    if (config.getMcastPort() != 0 && StringUtils.isBlank(config.getLocators())
+        && StringUtils.isBlank(config.getStartLocator())) {
-    int ackCollectionTimeout = dc.getMemberTimeout() * 2 * 12437 / 10000;
+    long ackCollectionTimeout = config.getMemberTimeout() * 2 * 12437 / 10000;
-    ackCollectionTimeout = Integer
-        .getInteger(DistributionConfig.GEMFIRE_PREFIX + "VIEW_ACK_TIMEOUT", ackCollectionTimeout)
-        .intValue();
+    ackCollectionTimeout = Long
+        .getLong(DistributionConfig.GEMFIRE_PREFIX + "VIEW_ACK_TIMEOUT", ackCollectionTimeout)
+        .longValue();
-        services.getConfig().getDistributionConfig().getEnableNetworkPartitionDetection();
+        config.getEnableNetworkPartitionDetection();
-    DistributionConfig dconfig = services.getConfig().getDistributionConfig();
-    String bindAddr = dconfig.getBindAddress();
-    locators = GMSUtil.parseLocators(dconfig.getLocators(), bindAddr);
+    String bindAddr = config.getBindAddress();
+    locators = GMSUtil.parseLocators(config.getLocators(), bindAddr);
-  Set<InternalDistributedMember> getPendingRequestIDs(int theDSFID) {
-    Set<InternalDistributedMember> result = new HashSet<>();
+  Set<GMSMember> getPendingRequestIDs(int theDSFID) {
+    Set<GMSMember> result = new HashSet<>();
-      for (DistributionMessage msg : viewRequests) {
+      for (AbstractGMSMessage msg : viewRequests) {
-    final Set<InternalDistributedMember> notRepliedYet = new HashSet<>();
-    NetView conflictingView;
-    InternalDistributedMember conflictingViewSender;
+    final Set<GMSMember> notRepliedYet = new HashSet<>();
+    GMSMembershipView conflictingView;
+    GMSMember conflictingViewSender;
-    final Set<InternalDistributedMember> pendingRemovals = new HashSet<>();
+    final Set<GMSMember> pendingRemovals = new HashSet<>();
-    synchronized void initialize(int viewId, Set<InternalDistributedMember> recips) {
+    synchronized void initialize(int viewId, Set<GMSMember> recips) {
-    synchronized void processPendingRequests(Set<InternalDistributedMember> pendingLeaves,
-        Set<InternalDistributedMember> pendingRemovals) {
+    synchronized void processPendingRequests(Set<GMSMember> pendingLeaves,
+        Set<GMSMember> pendingRemovals) {
-      for (InternalDistributedMember mbr : pendingLeaves) {
+      for (GMSMember mbr : pendingLeaves) {
-      for (InternalDistributedMember mbr : pendingRemovals) {
+      for (GMSMember mbr : pendingRemovals) {
-    synchronized void memberSuspected(InternalDistributedMember suspect) {
+    synchronized void memberSuspected(GMSMember suspect) {
-    synchronized void processLeaveRequest(InternalDistributedMember mbr) {
+    synchronized void processLeaveRequest(GMSMember mbr) {
-    synchronized void processRemoveRequest(InternalDistributedMember mbr) {
+    synchronized void processRemoveRequest(GMSMember mbr) {
-    synchronized void processViewResponse(int viewId, InternalDistributedMember sender,
-        NetView conflictingView) {
+    synchronized void processViewResponse(int viewId, GMSMember sender,
+        GMSMembershipView conflictingView) {
-    private void stopWaitingFor(InternalDistributedMember mbr) {
+    private void stopWaitingFor(GMSMember mbr) {
-    Set<InternalDistributedMember> waitForResponses() throws InterruptedException {
-      Set<InternalDistributedMember> result;
+    Set<GMSMember> waitForResponses() throws InterruptedException {
+      Set<GMSMember> result;
-    NetView getConflictingView() {
+    GMSMembershipView getConflictingView() {
-    InternalDistributedMember getConflictingViewSender() {
+    GMSMember getConflictingViewSender() {
-    synchronized Set<InternalDistributedMember> getUnresponsiveMembers() {
+    synchronized Set<GMSMember> getUnresponsiveMembers() {
-      NetView v = currentView;
+      GMSMembershipView v = currentView;
-        Collection<InternalDistributedMember> recips =
+        List<GMSMember> recips =
-    NetView initialView;
+    GMSMembershipView initialView;
-    List<InternalDistributedMember> initialJoins = Collections.emptyList();
+    List<GMSMember> initialJoins = Collections.emptyList();
-    Set<InternalDistributedMember> initialLeaving;
+    Set<GMSMember> initialLeaving;
-    Set<InternalDistributedMember> initialRemovals;
+    Set<GMSMember> initialRemovals;
-    synchronized void setInitialView(NetView newView, List<InternalDistributedMember> newMembers,
-        Set<InternalDistributedMember> leaving, Set<InternalDistributedMember> removals) {
+    synchronized void setInitialView(GMSMembershipView newView, List<GMSMember> newMembers,
+        Set<GMSMember> leaving, Set<GMSMember> removals) {
-          NetView v = preparedView;
+          GMSMembershipView v = preparedView;
-            NetView iView;
-            List<InternalDistributedMember> iJoins;
-            Set<InternalDistributedMember> iLeaves;
-            Set<InternalDistributedMember> iRemoves;
+            GMSMembershipView iView;
+            List<GMSMember> iJoins;
+            Set<GMSMember> iLeaves;
+            Set<GMSMember> iRemoves;
-    private void markViewCreatorForShutdown(InternalDistributedMember viewCreator) {
+    private void markViewCreatorForShutdown(GMSMember viewCreator) {
-          viewCreator, localAddress, viewCreator.getNetMember(), localAddress.getNetMember());
+          viewCreator, localAddress, viewCreator, localAddress);
-    private void processPreparedView(NetView v) {
+    private void processPreparedView(GMSMembershipView v) {
-        NetView newView = new NetView(initialView, viewId);
+        GMSMembershipView newView = new GMSMembershipView(initialView, viewId);
-        List<InternalDistributedMember> newMembers;
+        List<GMSMember> newMembers;
-        for (InternalDistributedMember newMember : newMembers) {
+        for (GMSMember newMember : newMembers) {
-      List<DistributionMessage> requests = null;
+      List<AbstractGMSMessage> requests = null;
-                  requests = new ArrayList<DistributionMessage>(viewRequests);
+                  requests = new ArrayList<AbstractGMSMessage>(viewRequests);
-      NetView v = currentView;
+      GMSMembershipView v = currentView;
-        for (Iterator<DistributionMessage> iterator = viewRequests.iterator(); iterator
+        for (Iterator<AbstractGMSMessage> iterator = viewRequests.iterator(); iterator
-          DistributionMessage msg = iterator.next();
+          AbstractGMSMessage msg = iterator.next();
-    void createAndSendView(List<DistributionMessage> requests)
+    void createAndSendView(List<AbstractGMSMessage> requests)
-      List<InternalDistributedMember> joinReqs = new ArrayList<>(10);
-      Map<InternalDistributedMember, Integer> joinPorts = new HashMap<>(10);
-      Set<InternalDistributedMember> leaveReqs = new HashSet<>(10);
-      List<InternalDistributedMember> removalReqs = new ArrayList<>(10);
+      List<GMSMember> joinReqs = new ArrayList<>(10);
+      Map<GMSMember, Integer> joinPorts = new HashMap<>(10);
+      Set<GMSMember> leaveReqs = new HashSet<>(10);
+      List<GMSMember> removalReqs = new ArrayList<>(10);
-      NetView oldView = currentView;
-      List<InternalDistributedMember> oldMembers;
+      GMSMembershipView oldView = currentView;
+      List<GMSMember> oldMembers;
-      Set<InternalDistributedMember> oldIDs = new HashSet<>();
+      Set<GMSMember> oldIDs = new HashSet<>();
-      for (DistributionMessage msg : requests) {
+      for (AbstractGMSMessage msg : requests) {
-        InternalDistributedMember mbr;
+        GMSMember mbr;
-      for (DistributionMessage msg : requests) {
+      for (AbstractGMSMessage msg : requests) {
-            InternalDistributedMember mbr = ((RemoveMemberMessage) msg).getMemberID();
+            GMSMember mbr = ((RemoveMemberMessage) msg).getMemberID();
-      for (InternalDistributedMember mbr : oldIDs) {
+      for (GMSMember mbr : oldIDs) {
-      NetView newView;
+      GMSMembershipView newView;
-        List<InternalDistributedMember> mbrs;
+        List<GMSMember> mbrs;
-          mbrs = new ArrayList<InternalDistributedMember>();
+          mbrs = new ArrayList<GMSMember>();
-          mbrs = new ArrayList<InternalDistributedMember>(oldMembers);
+          mbrs = new ArrayList<GMSMember>(oldMembers);
-        newView = new NetView(localAddress, viewNumber, mbrs, leaveReqs,
-            new HashSet<InternalDistributedMember>(removalReqs));
-        for (InternalDistributedMember mbr : joinReqs) {
+        newView = new GMSMembershipView(localAddress, viewNumber, mbrs, leaveReqs,
+            new HashSet<GMSMember>(removalReqs));
+        for (GMSMember mbr : joinReqs) {
-      for (InternalDistributedMember mbr : joinReqs) {
+      for (GMSMember mbr : joinReqs) {
-    void prepareAndSendView(NetView newView, List<InternalDistributedMember> joinReqs,
-        Set<InternalDistributedMember> leaveReqs, Set<InternalDistributedMember> removalReqs)
+    void prepareAndSendView(GMSMembershipView newView, List<GMSMember> joinReqs,
+        Set<GMSMember> leaveReqs, Set<GMSMember> removalReqs)
-          Set<InternalDistributedMember> crashes = newView.getActualCrashedMembers(currentView);
+          Set<GMSMember> crashes = newView.getActualCrashedMembers(currentView);
-        NetView conflictingView = prepareProcessor.getConflictingView();
+        GMSMembershipView conflictingView = prepareProcessor.getConflictingView();
-        Set<InternalDistributedMember> unresponsive = prepareProcessor.getUnresponsiveMembers();
+        Set<GMSMember> unresponsive = prepareProcessor.getUnresponsiveMembers();
-        List<InternalDistributedMember> failures =
+        List<GMSMember> failures =
-            failures.addAll(conflictingView.getCrashedMembers());
+            failures.addAll((Set<GMSMember>) (Set<?>) conflictingView.getCrashedMembers());
-            List<InternalDistributedMember> newMembers = conflictingView.getNewMembers();
+            List<GMSMember> newMembers = conflictingView.getNewMembers();
-              for (InternalDistributedMember mbr : newMembers) {
+              for (GMSMember mbr : newMembers) {
-              newView = new NetView(newView, conflictingView.getViewId() + 1);
+              newView = new GMSMembershipView(newView, conflictingView.getViewId() + 1);
-          List<InternalDistributedMember> newMembers = new ArrayList<>(newView.getMembers());
+          List<GMSMember> newMembers = new ArrayList<>(newView.getMembers());
-          NetView tempView = new NetView(localAddress, newView.getViewId() + 1, newMembers,
-              leaveReqs, removalReqs);
-          for (InternalDistributedMember mbr : newView.getMembers()) {
+          GMSMembershipView tempView =
+              new GMSMembershipView(localAddress, newView.getViewId() + 1, newMembers,
+                  leaveReqs, removalReqs);
+          for (GMSMember mbr : newView.getMembers()) {
-          sendRemoveMessages(failures, reasons, new HashSet<InternalDistributedMember>());
+          sendRemoveMessages(failures, reasons, new HashSet<>());
-    private void removeHealthyMembers(final Set<InternalDistributedMember> suspects)
+    private void removeHealthyMembers(final Set<GMSMember> suspects)
-      List<Callable<InternalDistributedMember>> checkers =
-          new ArrayList<Callable<InternalDistributedMember>>(suspects.size());
+      List<Callable<GMSMember>> checkers =
+          new ArrayList<>(suspects.size());
-      Set<InternalDistributedMember> newRemovals = new HashSet<>();
-      Set<InternalDistributedMember> newLeaves = new HashSet<>();
+      Set<GMSMember> newRemovals = new HashSet<>();
+      Set<GMSMember> newLeaves = new HashSet<>();
-      for (InternalDistributedMember mbr : suspects) {
+      for (GMSMember mbr : suspects) {
-        checkers.add(new Callable<InternalDistributedMember>() {
+        checkers.add(new Callable<GMSMember>() {
-          public InternalDistributedMember call() throws Exception {
+          public GMSMember call() throws Exception {
-    protected void filterMembers(Collection<InternalDistributedMember> mbrs,
-        Set<InternalDistributedMember> matchingMembers, short requestType) {
-      Set<InternalDistributedMember> requests = getPendingRequestIDs(requestType);
+    protected void filterMembers(Collection<GMSMember> mbrs,
+        Set<GMSMember> matchingMembers, short requestType) {
+      Set<GMSMember> requests = getPendingRequestIDs(requestType);
-        Iterator<InternalDistributedMember> itr = requests.iterator();
+        Iterator<GMSMember> itr = requests.iterator();
-          InternalDistributedMember memberID = itr.next();
+          GMSMember memberID = itr.next();
