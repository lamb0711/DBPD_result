Revert GEODE-2644 because offline diskstore commands generate info level logs

GFSH forks the offline diskstore commands in a JVM using log4j2-cli.xml
which sets the log level to WARN. However, the forked JVM creates a
Cache which then starts generating info level statements to STDOUT.

Revert "GEODE-2644: Remove log level from MonitorQueryUnderContentionBenchmark"
This reverts commit 6691d310e1263966991e584f712156d919dabecf.

Revert "GEODE-2644: Update session state caching dependencies for logging"
This reverts commit 688f58a4a75cc1297faa1dda201b971346c3a9fe.

Revert "GEODE-5637: Fix flaky SingleHopClientExecutorWithLoggingIntegrationTest"
This reverts commit 0a8f3dffa1ebaa618fafecc15bbc92ba8ba83696.

Revert "GEODE-2644: Make LogWriterAppender optional and support log4j2.xml"
This reverts commit 591f3f7840ce38c6100bff2040f396ad2469175e.

Revert "GEODE-2644: Expand DistributedSystemMXBean tests"
This reverts commit cd2bba13e2fb7e79f7634053a6c612050b328e11.

Revert "GEODE-2644: Make AlertAppender optional and support log4j2.xml"
This reverts commit 02c3cae1d38098259ff6aa4635c6e74f795bdc50.

Revert "GEODE-2644: Add LogConfig and StatisticsConfig for logging"
This reverts commit a77c94b349b3ed7fc873fc29f6852f9936843790.

Revert "GEODE-2644: Add AlertingTest JUnit Category"
This reverts commit 731cd2a7d35b086d34f8bbcb94a83c40739ae8ee.

Revert "GEODE-2644: Add LogFileAssert and LogLevelAssert assertions"
This reverts commit 5e61da5301469cdbd71ac186573f56c38e9a6cf0.

Revert "GEODE-2644: Cleanup logging related files"
This reverts commit 763e4177f201eff9b140654e6858152a1a184b8c.

Revert "GEODE-2644: Define interfaces for new Log4j2 Appenders"
This reverts commit efd8a14027195b6dae1dd3e4d53a33696ed318bb.

-import java.util.Optional;
+import org.apache.geode.admin.AlertLevel;
-import org.apache.geode.internal.alerting.AlertLevel;
-import org.apache.geode.internal.alerting.AlertMessaging;
-import org.apache.geode.internal.alerting.AlertingService;
-import org.apache.geode.internal.alerting.AlertingSession;
-import org.apache.geode.internal.logging.LogConfig;
-import org.apache.geode.internal.logging.LogConfigListener;
-import org.apache.geode.internal.logging.LogConfigSupplier;
-import org.apache.geode.internal.logging.LogFile;
-import org.apache.geode.internal.logging.LoggingSession;
-import org.apache.geode.internal.logging.NullLoggingSession;
+import org.apache.geode.internal.logging.log4j.AlertAppender;
+import org.apache.geode.internal.logging.log4j.LogWriterAppender;
+import org.apache.geode.internal.logging.log4j.LogWriterAppenders;
-import org.apache.geode.internal.statistics.StatisticsConfig;
-    implements OsStatisticsFactory, StatisticsManager, LogConfigSupplier {
+    implements OsStatisticsFactory, StatisticsManager {
+  // /** The log writer was provided by an external entity */
+  // private boolean externalLogWriterProvided = false;
+  //
+  private LogWriterAppender logWriterAppender = null;
+
+  private LogWriterAppender securityLogWriterAppender = null;
+
-  private final AlertingSession alertingSession;
-  private final AlertingService alertingService;
-
-  private final LoggingSession loggingSession;
-  private final Set<LogConfigListener> logConfigListeners = new HashSet<>();
-
-    alertingSession = AlertingSession.create();
-    alertingService = new AlertingService();
-    loggingSession = LoggingSession.create();
-      boolean logBanner = !attemptingToReconnect;
-      boolean logConfiguration = !attemptingToReconnect;
-      loggingSession.createSession(this, logBanner, logConfiguration);
+      AlertAppender.getInstance().onConnect(this);
+
+      // LOG: create LogWriterAppender(s) if log-file or security-log-file is specified
+      final boolean hasLogFile =
+          this.config.getLogFile() != null && !this.config.getLogFile().equals(new File(""));
+      final boolean hasSecurityLogFile = this.config.getSecurityLogFile() != null
+          && !this.config.getSecurityLogFile().equals(new File(""));
+      LogService.configureLoggers(hasLogFile, hasSecurityLogFile);
+      if (hasLogFile || hasSecurityLogFile) {
+
+        // main log file
+        if (hasLogFile) {
+          // if log-file then create logWriterAppender
+          this.logWriterAppender = LogWriterAppenders.getOrCreateAppender(
+              LogWriterAppenders.Identifier.MAIN, this.isLoner, this.config, true);
+        }
+
+        // security log file
+        if (hasSecurityLogFile) {
+          // if security-log-file then create securityLogWriterAppender
+          this.securityLogWriterAppender = LogWriterAppenders.getOrCreateAppender(
+              LogWriterAppenders.Identifier.SECURITY, this.isLoner, this.config, false);
+        } else {
+          // let security route to regular log-file or stdout
+        }
+      }
-            LogWriterFactory.createLogWriterLogger(this.config, false);
+            LogWriterFactory.createLogWriterLogger(this.isLoner, false, this.config, true);
-            LogWriterFactory.createLogWriterLogger(this.config, true);
+            LogWriterFactory.createLogWriterLogger(this.isLoner, true, this.config, false);
-      loggingSession.startSession();
-
-        Optional<LogFile> logFile = loggingSession.getLogFile();
-        if (logFile.isPresent()) {
-          sampler = new GemFireStatSampler(this, logFile.get());
-        } else {
-          sampler = new GemFireStatSampler(this);
-        }
+        this.sampler = new GemFireStatSampler(this);
-      alertingSession.createSession(new AlertMessaging(this));
-      alertingSession.startSession();
+      if (this.logWriterAppender != null) {
+        LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.MAIN);
+      }
+      if (this.securityLogWriterAppender != null) {
+        LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.SECURITY);
+      }
-      this.startedLocator =
-          InternalLocator.createLocator(locId.getPort(), NullLoggingSession.create(), null,
-              logWriter, securityLogWriter, locId.getHost().getAddress(),
-              locId.getHostnameForClients(), originalConfig.toProperties(), false);
+      this.startedLocator = InternalLocator.createLocator(locId.getPort(), null, this.logWriter,
+          this.securityLogWriter, locId.getHost().getAddress(), locId.getHostnameForClients(),
+          this.originalConfig.toProperties(), false);
-          alertingSession.stopSession();
+          if (this.logWriterAppender != null) {
+            LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
+          }
+          if (this.securityLogWriterAppender != null) {
+            // LOG:SECURITY: old code did NOT invoke this
+            LogWriterAppenders.stop(LogWriterAppenders.Identifier.SECURITY);
+          }
+        AlertAppender.getInstance().shuttingDown();
+
-        loggingSession.stopSession();
+        if (this.logWriterAppender != null) {
+          LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
+        }
+        if (this.securityLogWriterAppender != null) {
+          LogWriterAppenders.destroy(LogWriterAppenders.Identifier.SECURITY);
+        }
-          if (!this.attemptingToReconnect) {
-            loggingSession.shutdown();
-          }
-          alertingSession.shutdown();
-  public AlertingService getAlertingService() {
-    return alertingService;
-  }
-
-  @Override
-  public LogConfig getLogConfig() {
-    return config;
-  }
-
-  @Override
-  public StatisticsConfig getStatisticsConfig() {
-    return config;
-  }
-
-  @Override
-  public void addLogConfigListener(LogConfigListener logConfigListener) {
-    logConfigListeners.add(logConfigListener);
-  }
-
-  @Override
-  public void removeLogConfigListener(LogConfigListener logConfigListener) {
-    logConfigListeners.remove(logConfigListener);
-  }
-
-  public Optional<LogFile> getLogFile() {
-    return loggingSession.getLogFile();
-  }
-
-  void logConfigChanged() {
-    for (LogConfigListener listener : logConfigListeners) {
-      listener.configChanged();
-    }
-  }
-
-    return hasAlertListenerFor(member, AlertLevel.WARNING.intLevel());
+    return hasAlertListenerFor(member, AlertLevel.WARNING.getSeverity());
+
-    return alertingService.hasAlertListener(member, AlertLevel.find(severity));
+    return AlertAppender.getInstance().hasAlertListener(member, severity);
