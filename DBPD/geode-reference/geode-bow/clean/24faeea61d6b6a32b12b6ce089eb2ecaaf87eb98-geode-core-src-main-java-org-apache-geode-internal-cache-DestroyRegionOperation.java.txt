GEODE-7196 Simplify ClusterDistributionManage

remove distribution ID collections from ClusterDistributionManager

move Executors out of DistributionManager implementations

make membership views immutable - we shouldn't install a new view
and then modify it because it's now used directly by other code.

-        dm.getWaitingThreadPool().execute(destroyOp(dm, lclRgn, sendReply));
+        dm.getExecutors().getWaitingThreadPool().execute(destroyOp(dm, lclRgn, sendReply));
-          rgn.getDistributionManager().getWaitingThreadPool().execute(new Runnable() {
-            @Override
-            public void run() {
-              try {
-                rgn.reinitializeFromImageTarget(getSender());
-              } catch (TimeoutException e) {
-                // dlock timed out, log message
-                logger.warn(String.format(
-                    "Got timeout when trying to recreate region during re-initialization: %s",
-                    rgn.getFullPath()),
-                    e);
-              } catch (IOException e) {
-                // only if loading snapshot, not here
-                InternalGemFireError assErr = new InternalGemFireError(
-                    "unexpected exception");
-                assErr.initCause(e);
-                throw assErr;
-              } catch (ClassNotFoundException e) {
-                // only if loading snapshot, not here
-                InternalGemFireError assErr = new InternalGemFireError(
-                    "unexpected exception");
-                assErr.initCause(e);
-                throw assErr;
-              } finally {
-                if (loc_lockRoot != null)
-                  loc_lockRoot.releaseDestroyLock();
-              }
-            }
-          });
+          rgn.getDistributionManager().getExecutors().getWaitingThreadPool()
+              .execute(new Runnable() {
+                @Override
+                public void run() {
+                  try {
+                    rgn.reinitializeFromImageTarget(getSender());
+                  } catch (TimeoutException e) {
+                    // dlock timed out, log message
+                    logger.warn(String.format(
+                        "Got timeout when trying to recreate region during re-initialization: %s",
+                        rgn.getFullPath()),
+                        e);
+                  } catch (IOException e) {
+                    // only if loading snapshot, not here
+                    InternalGemFireError assErr = new InternalGemFireError(
+                        "unexpected exception");
+                    assErr.initCause(e);
+                    throw assErr;
+                  } catch (ClassNotFoundException e) {
+                    // only if loading snapshot, not here
+                    InternalGemFireError assErr = new InternalGemFireError(
+                        "unexpected exception");
+                    assErr.initCause(e);
+                    throw assErr;
+                  } finally {
+                    if (loc_lockRoot != null)
+                      loc_lockRoot.releaseDestroyLock();
+                  }
+                }
+              });
