GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

-import org.apache.geode.internal.cache.lru.LRUClockNode;
-import org.apache.geode.internal.cache.lru.NewLRUClockHand;
+import org.apache.geode.internal.cache.eviction.EvictionList;
-  public void setRecentlyUsed() {
+  public void setRecentlyUsed(RegionEntryContext context) {
-      setRecentlyUsed();
+      setRecentlyUsed(region);
-      setRecentlyUsed();
+      setRecentlyUsed(context);
-      setRecentlyUsed();
+      setRecentlyUsed(context);
-      setRecentlyUsed();
+      setRecentlyUsed(context);
-  public boolean isInUseByTransaction() {
+  public synchronized boolean isInUseByTransaction() {
-  @Override
-  public void setInUseByTransaction(final boolean v) {
+  private void setInUseByTransaction(final boolean v) {
-  public synchronized void decRefCount(NewLRUClockHand lruList, InternalRegion region) {
+  public synchronized void decRefCount(EvictionList evictionList, InternalRegion region) {
-        if (lruList != null) {
-          // No more transactions, place in lru list
-          lruList.appendEntry((LRUClockNode) this);
-        }
+        appendToEvictionList(evictionList);
-  public synchronized void resetRefCount(NewLRUClockHand lruList) {
+  public synchronized void resetRefCount(EvictionList evictionList) {
-      if (lruList != null) {
-        lruList.appendEntry((LRUClockNode) this);
-      }
+      appendToEvictionList(evictionList);
+  protected void appendToEvictionList(EvictionList evictionList) {
+    // nothing
+  }
+
