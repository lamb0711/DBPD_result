Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Gathers snapshot data from the server using a proxy function.  If PRSingleHop
- * is enabled, the proxy function will use a {@link LocalExporter} to forward results
- * directly back to the client.  This relies on TCP queuing to provide back pressure
- * on the senders.  If PRSingleHop is not enabled, the proxy function will use a
- * {@link WindowedExporter} to rate the data gathering prior to forwarding back
- * to the client.  The client uses a custom {@link ResultCollector} to write
+ * Gathers snapshot data from the server using a proxy function. If PRSingleHop is enabled, the
+ * proxy function will use a {@link LocalExporter} to forward results directly back to the client.
+ * This relies on TCP queuing to provide back pressure on the senders. If PRSingleHop is not
+ * enabled, the proxy function will use a {@link WindowedExporter} to rate the data gathering prior
+ * to forwarding back to the client. The client uses a custom {@link ResultCollector} to write
-  
+
-  
+
-  public long export(Region<K, V> region, ExportSink sink, SnapshotOptions<K, V> options) throws IOException {
+  public long export(Region<K, V> region, ExportSink sink, SnapshotOptions<K, V> options)
+      throws IOException {
-      ClientArgs<K, V> args = new ClientArgs<K, V>(region.getFullPath(), pool.getPRSingleHopEnabled(), options);
+      ClientArgs<K, V> args =
+          new ClientArgs<K, V>(region.getFullPath(), pool.getPRSingleHopEnabled(), options);
-      
+
-      // we allow the WindowedExporter to provide back pressure. 
-      Execution exec = pool.getPRSingleHopEnabled() 
-          ? FunctionService.onRegion(region) 
+      // we allow the WindowedExporter to provide back pressure.
+      Execution exec = pool.getPRSingleHopEnabled() ? FunctionService.onRegion(region)
-          
-      ResultCollector<?, ?> rc = exec
-          .withArgs(args)
-          .withCollector(results)
-          .execute(new ProxyExportFunction<K, V>());
-      
+
+      ResultCollector<?, ?> rc =
+          exec.withArgs(args).withCollector(results).execute(new ProxyExportFunction<K, V>());
+
-  
+
-    
+
-    
+
-    
+
-    
+
-    
+
-  
+
-      
-      Region<K, V> region = GemFireCacheImpl.getExisting("Exporting snapshot").getRegion(args.getRegion());
-      Exporter<K, V> exp = args.isPRSingleHop() 
-          ? new LocalExporter<K, V>() 
+
+      Region<K, V> region =
+          GemFireCacheImpl.getExisting("Exporting snapshot").getRegion(args.getRegion());
+      Exporter<K, V> exp = args.isPRSingleHop() ? new LocalExporter<K, V>()
-      
+
-        
+
-  
+
-   * Streams snapshot data into the supplied {@link ExportSink}.  Since
-   * {@link Execution#execute(Function)} is a blocking call on clients, we need 
-   * to write immediately.
+   * Streams snapshot data into the supplied {@link ExportSink}. Since
+   * {@link Execution#execute(Function)} is a blocking call on clients, we need to write
+   * immediately.
-    
+
-    
+
-    
+
-    
+
-      if (result instanceof Long)  {
+      if (result instanceof Long) {
-        
+
-        
+
-    public void endResults() {
-    }
+    public void endResults() {}
-    public void clearResults() {
-    }
+    public void clearResults() {}
