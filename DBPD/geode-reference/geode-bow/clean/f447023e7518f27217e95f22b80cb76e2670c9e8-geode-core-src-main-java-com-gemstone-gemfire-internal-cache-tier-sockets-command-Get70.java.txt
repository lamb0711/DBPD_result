GEODE-17: used new security interface for integrated security.

* Create new interface for integrated security
* separate jmx and cli from client-server security
* client-server security using integrated security

+import java.io.IOException;
+
+import com.gemstone.gemfire.i18n.StringId;
-import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-import com.gemstone.gemfire.i18n.StringId;
-
-import java.io.IOException;
-      // responded = true;
+      return;
-    else {
-      Region region = crHelper.getRegion(regionName);
-      if (region == null) {
-        String reason = LocalizedStrings.Request__0_WAS_NOT_FOUND_DURING_GET_REQUEST.toLocalizedString(regionName);
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
+
+    // for integrated security
+    GeodeSecurityUtil.authorizeRegionRead(regionName);
+
+    Region region = crHelper.getRegion(regionName);
+    if (region == null) {
+      String reason = LocalizedStrings.Request__0_WAS_NOT_FOUND_DURING_GET_REQUEST.toLocalizedString(regionName);
+      writeRegionDestroyedEx(msg, regionName, reason, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    GetOperationContext getContext = null;
+    try {
+      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+      if (authzRequest != null) {
+        getContext = authzRequest
+          .getAuthorize(regionName, key, callbackArg);
+        callbackArg = getContext.getCallbackArg();
-      else {
-        
-        GetOperationContext getContext = null;
-        
+    }
+    catch (NotAuthorizedException ex) {
+      writeException(msg, ex, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    // Get the value and update the statistics. Do not deserialize
+    // the value if it is a byte[].
+    Entry entry;
+    try {
+      entry = getEntry(region, key, callbackArg, servConn);
+    }
+    catch (Exception e) {
+      writeException(msg, e, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    @Retained final Object originalData = entry.value;
+    Object data = originalData;
+    try {
+      boolean isObject = entry.isObject;
+      VersionTag versionTag = entry.versionTag;
+      boolean keyNotPresent = entry.keyNotPresent;
+
+
+      try {
+        AuthorizeRequestPP postAuthzRequest = servConn.getPostAuthzRequest();
+        if (postAuthzRequest != null) {
-            AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-              if (authzRequest != null) {
-              getContext = authzRequest
-                  .getAuthorize(regionName, key, callbackArg);
-              callbackArg = getContext.getCallbackArg();
+            getContext = postAuthzRequest.getAuthorize(regionName, key, data,
+              isObject, getContext);
+            GetOperationContextImpl gci = (GetOperationContextImpl) getContext;
+            Object newData = gci.getRawValue();
+            if (newData != data) {
+              // user changed the value
+              isObject = getContext.isObject();
+              data = newData;
-          catch (NotAuthorizedException ex) {
-            writeException(msg, ex, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-            return;
-          }
-
-        // Get the value and update the statistics. Do not deserialize
-        // the value if it is a byte[].
-        Entry entry;
-        try {
-          entry = getEntry(region, key, callbackArg, servConn);
-        }
-        catch (Exception e) {
-          writeException(msg, e, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-
-        @Retained final Object originalData = entry.value;
-        Object data = originalData;
-        try {
-        boolean isObject = entry.isObject;
-        VersionTag versionTag = entry.versionTag;
-        boolean keyNotPresent = entry.keyNotPresent;
-        
-        
-        try {
-          AuthorizeRequestPP postAuthzRequest = servConn.getPostAuthzRequest();
-          if (postAuthzRequest != null) {
-            try {
-              getContext = postAuthzRequest.getAuthorize(regionName, key, data,
-                  isObject, getContext);
-              GetOperationContextImpl gci = (GetOperationContextImpl) getContext;
-              Object newData = gci.getRawValue();
-              if (newData != data) {
-                // user changed the value
-                isObject = getContext.isObject();
-                data = newData;
-              }
-            } finally {
-              if (getContext != null) {
-                ((GetOperationContextImpl)getContext).release();
-              }
+          finally {
+            if (getContext != null) {
+              ((GetOperationContextImpl) getContext).release();
-        catch (NotAuthorizedException ex) {
-          writeException(msg, ex, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-        {
-          long oldStart = start;
-          start = DistributionStats.getStatTime();
-          stats.incProcessGetTime(start - oldStart);
-        }
-        
-        if (region instanceof PartitionedRegion) {
-          PartitionedRegion pr = (PartitionedRegion)region;
-          if (pr.isNetworkHop() != (byte)0) {
-            writeResponseWithRefreshMetadata(data, callbackArg, msg, isObject,
-                servConn, pr, pr.isNetworkHop(), versionTag, keyNotPresent);
-            pr.setIsNetworkHop((byte)0);
-            pr.setMetadataVersion(Byte.valueOf((byte)0));
-          }
-          else {
-            writeResponse(data, callbackArg, msg, isObject, versionTag, keyNotPresent, servConn);
-          }
+      }
+      catch (NotAuthorizedException ex) {
+        writeException(msg, ex, false, servConn);
+        servConn.setAsTrue(RESPONDED);
+        return;
+      }
+      {
+        long oldStart = start;
+        start = DistributionStats.getStatTime();
+        stats.incProcessGetTime(start - oldStart);
+      }
+
+      if (region instanceof PartitionedRegion) {
+        PartitionedRegion pr = (PartitionedRegion) region;
+        if (pr.isNetworkHop() != (byte) 0) {
+          writeResponseWithRefreshMetadata(data, callbackArg, msg, isObject,
+            servConn, pr, pr.isNetworkHop(), versionTag, keyNotPresent);
+          pr.setIsNetworkHop((byte) 0);
+          pr.setMetadataVersion(Byte.valueOf((byte) 0));
-        } finally {
-          OffHeapHelper.release(originalData);
-        }
-        
-        servConn.setAsTrue(RESPONDED);
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Wrote get response back to {} for region {} {}", servConn.getName(), servConn.getSocketString(), regionName, entry);
-        }
-        stats.incWriteGetResponseTime(DistributionStats.getStatTime() - start);
+      }
+      else {
+        writeResponse(data, callbackArg, msg, isObject, versionTag, keyNotPresent, servConn);
+    finally {
+      OffHeapHelper.release(originalData);
+    }
+
+    servConn.setAsTrue(RESPONDED);
+    if (logger.isDebugEnabled()) {
+      logger.debug("{}: Wrote get response back to {} for region {} {}", servConn.getName(), servConn.getSocketString(), regionName, entry);
+    }
+    stats.incWriteGetResponseTime(DistributionStats.getStatTime() - start);
+
