GEODE-6626: Separate CacheServer and GatewayReceiver

Introduce new interfaces and then have GatewayReceiverServer extend
CacheServerImpl to override behavior.

-import org.apache.geode.internal.cache.CacheServerImpl;
-import org.apache.geode.internal.cache.tier.sockets.AcceptorImpl;
+import org.apache.geode.internal.cache.InternalCacheServer;
+import org.apache.geode.management.membership.ClientMembership;
- * Handles registration and event notification duties for <code>ClientMembershipListener</code>s.
- * The public counterpart for this class is
- * {@link org.apache.geode.management.membership.ClientMembership}.
+ * Handles registration and event notification duties for {@code ClientMembershipListener}s.
+ * The public counterpart for this class is {@link ClientMembership}.
-  /** List of connected <code>DistributedSystem</code>s */
+  /** List of connected {@code DistributedSystem}s */
-   * Returns an array of all the currently registered <code>ClientMembershipListener</code>s.
+   * Returns an array of all the currently registered {@code ClientMembershipListener}s.
-   * @return the registered <code>ClientMembershipListener</code>s; an empty array if no listeners
+   * @return the registered {@code ClientMembershipListener}s; an empty array if no listeners
-   * Removes registration of all currently registered <code>ClientMembershipListener<code>s. and
-   * <code>ClientMembershipListener<code>s.
+   * Removes registration of all currently registered {@code ClientMembershipListener}s. and
+   * {@code ClientMembershipListener}s.
-        CacheServerImpl bsi = (CacheServerImpl) bsii.next();
-        AcceptorImpl ai = bsi.getAcceptor();
-        if (ai != null && ai.getCacheClientNotifier() != null) {
+        InternalCacheServer cacheServer = (InternalCacheServer) bsii.next();
+        Acceptor acceptor = cacheServer.getAcceptor();
+        if (acceptor != null && acceptor.getCacheClientNotifier() != null) {
-            filterProxyIDs.addAll(ai.getCacheClientNotifier().getActiveClients());
+            filterProxyIDs.addAll(acceptor.getCacheClientNotifier().getActiveClients());
-            filterProxyIDs = ai.getCacheClientNotifier().getActiveClients();
+            filterProxyIDs = acceptor.getCacheClientNotifier().getActiveClients();
-      CacheServerImpl bsi = (CacheServerImpl) bsii.next();
-      AcceptorImpl ai = bsi.getAcceptor();
-      if (ai != null && ai.getCacheClientNotifier() != null) {
-        allClients.putAll(ai.getCacheClientNotifier().getAllClients());
+      InternalCacheServer cacheServer = (InternalCacheServer) bsii.next();
+      Acceptor acceptor = cacheServer.getAcceptor();
+      if (acceptor != null && acceptor.getCacheClientNotifier() != null) {
+        allClients.putAll(acceptor.getCacheClientNotifier().getAllClients());
-      CacheServerImpl cacheServerImpl = (CacheServerImpl) cacheServer;
-      AcceptorImpl acceptor = cacheServerImpl.getAcceptor();
+      InternalCacheServer internalCacheServer = (InternalCacheServer) cacheServer;
+      Acceptor acceptor = internalCacheServer.getAcceptor();
-   * @param member the <code>DistributedMember</code>
+   * @param member the {@code DistributedMember}
