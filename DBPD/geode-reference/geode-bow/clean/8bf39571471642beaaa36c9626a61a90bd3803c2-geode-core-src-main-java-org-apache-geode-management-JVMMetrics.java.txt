Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Composite data type used to distribute metrics for the JVM running
- * a GemFire member.
+ * Composite data type used to distribute metrics for the JVM running a GemFire member.
-   * Initial memory the vm requested from the operating system for this area in
-   * bytes
+   * Initial memory the vm requested from the operating system for this area in bytes
-   * represents the maximum amount of memory (in bytes) that can be used for memory
-   * management
+   * represents the maximum amount of memory (in bytes) that can be used for memory management
-   * This constructor is to be used by internal JMX framework only. User
-   * should not try to create an instance of this class.
+   * This constructor is to be used by internal JMX framework only. User should not try to create an
+   * instance of this class.
-  @ConstructorProperties( { "gcCount", "gcTimeMillis", "initMemory",
-      "committedMemory", "usedMemory", "maxMemory", "totalThreads"
-  })
-  public JVMMetrics(long gcCount, long gcTimeMillis, long initMemory,
-      long committedMemory, long usedMemory, long maxMemory,
-      int totalThreads) {
+  @ConstructorProperties({"gcCount", "gcTimeMillis", "initMemory", "committedMemory", "usedMemory",
+      "maxMemory", "totalThreads"})
+  public JVMMetrics(long gcCount, long gcTimeMillis, long initMemory, long committedMemory,
+      long usedMemory, long maxMemory, int totalThreads) {
-   * Returns the initial number of megabytes of memory requested from the
-   * operating system.
+   * Returns the initial number of megabytes of memory requested from the operating system.
-  
+
-   * Returns the maximum number of megabytes of memory available from the
-   * operating system.
+   * Returns the maximum number of megabytes of memory available from the operating system.
-    return "{JVMMetrics : gcCount = " + gcCount + " gcTimeMillis = "
-        + gcTimeMillis + " initMemory = " + initMemory + " committedMemory = "
-        + committedMemory + " usedMemory = " + usedMemory + " maxMemory = "
-        + maxMemory + " totalThreads = " + totalThreads + "}";
+    return "{JVMMetrics : gcCount = " + gcCount + " gcTimeMillis = " + gcTimeMillis
+        + " initMemory = " + initMemory + " committedMemory = " + committedMemory + " usedMemory = "
+        + usedMemory + " maxMemory = " + maxMemory + " totalThreads = " + totalThreads + "}";
