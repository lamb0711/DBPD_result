Merge branch 'release/1.0.0-incubating.M3'

- * A Filesystem like interface that stores file data in gemfire regions.
+ * A Filesystem like interface that stores file data in geode regions.
+ *
+  private final FileSystemStats stats;
-  public FileSystem(ConcurrentMap<String, File> fileRegion, ConcurrentMap<ChunkKey, byte[]> chunkRegion) {
-    super();
+  /**
+   * Create filesystem that will store data in the two provided regions. The fileRegion contains
+   * metadata about the files, and the chunkRegion contains the actual data. If data from either region is missing
+   * or inconsistent, no guarantees are made about what this class will do, so it's best if these regions are colocated
+   * and in the same disk store to ensure the data remains together.
+   * @param fileRegion the region to store metadata about the files
+   * @param chunkRegion the region to store actual file data.
+   */
+  public FileSystem(ConcurrentMap<String, File> fileRegion, ConcurrentMap<ChunkKey, byte[]> chunkRegion, FileSystemStats stats) {
+    this.stats = stats;
+    stats.incFileCreates(1);
+
+  public File createTemporaryFile(final String name) throws IOException {
+    final File file = new File(this, name);
+    stats.incTemporaryFileCreates(1);
+    return file;
+  }
-    
+
+
+    stats.incFileDeletes(1);
+
+    stats.incFileRenames(1);
+    stats.incReadBytes(chunk.length);
+    stats.incWrittenBytes(chunk.length);
+
+  /**
+   * Export all of the files in the filesystem to the provided directory
+   */
+  public void export(final java.io.File exportLocation) {
+
+    listFileNames().stream().forEach(fileName-> {
+      try {
+        getFile(fileName).export(exportLocation);
+      }
+      catch (FileNotFoundException e) {
+        //ignore this, it was concurrently removed
+      }
+
+    });
+  }
+
