change more string commands to have CommandFunction support (#5184)

* CommandFunction now supports getrange, setrange, bitcount, bitop, bitpos, getbit, setbit, incrbyfloat, mget, and strlen.

Added integration test coverage for untested string commands.

-  private final String ERROR_NOT_INT = "The numbers provided must be numeric values";
+  private static final String ERROR_NOT_INT = "The numbers provided must be numeric values";
-  private final String ERROR_BIT = "The bit must either be a 0 or 1";
+  private static final String ERROR_BIT = "The bit must either be a 0 or 1";
-    ByteArrayWrapper string = getRedisStringCommands(context).get(key);
-    int bitPosition = -1;
-    boolean endSet = false;
+    int start = 0;
+    Integer end = null;
-    if (string == null || string.length() == 0) {
-      // Redis returns 0 when key does not exists for this command
-      return RedisResponse.integer(-bit);
-    }
-    byte[] bytes = string.toBytes();
-    int start = 0;
-    int end = bytes.length - 1;
-        endSet = true;
-    if (start < 0) {
-      start += bytes.length;
-    }
-    if (end < 0) {
-      end += bytes.length;
-    }
-
-    if (start < 0) {
-      start = 0;
-    }
-    if (end < 0) {
-      end = 0;
-    }
-
-    if (start > bytes.length) {
-      start = bytes.length - 1;
-    }
-    if (end > bytes.length) {
-      end = bytes.length - 1;
-    }
-
-    if (end < start) {
-      return RedisResponse.integer(-1);
-    }
-
-    outerLoop: for (int i = start; i <= end; i++) {
-      int cBit;
-      byte cByte = bytes[i];
-      for (int j = 0; j < 8; j++) {
-        cBit = (cByte & (0x80 >> j)) >> (7 - j);
-        if (cBit == bit) {
-          bitPosition = 8 * i + j;
-          break outerLoop;
-        }
-      }
-    }
-
-    if (bit == 0 && bitPosition == -1 && !endSet) {
-      bitPosition = bytes.length * 8;
-    }
-
+    int bitPosition = getRedisStringCommands(context).bitpos(key, bit, start, end);
