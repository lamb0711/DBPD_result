Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  private RegisterInstantiators() {
-  }
+  private RegisterInstantiators() {}
-      logger.debug("{}: Received register instantiator request ({} parts) from {}", servConn.getName(), msg.getNumberOfParts(), servConn.getSocketString());
+      logger.debug("{}: Received register instantiator request ({} parts) from {}",
+          servConn.getName(), msg.getNumberOfParts(), servConn.getSocketString());
-    ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(msg.getPart(noOfParts - 1)
-        .getSerializedForm());
-    long threadId = EventID
-        .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-    long sequenceId = EventID
-        .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-    EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId,
-        sequenceId);
+    ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(msg.getPart(noOfParts - 1).getSerializedForm());
+    long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
-        String instantiatorClassName = (String)CacheServerHelper
-            .deserialize(serializedInstantiators[i]);
+        String instantiatorClassName =
+            (String) CacheServerHelper.deserialize(serializedInstantiators[i]);
-        String instantiatedClassName = (String)CacheServerHelper
-            .deserialize(serializedInstantiators[i + 1]);
+        String instantiatedClassName =
+            (String) CacheServerHelper.deserialize(serializedInstantiators[i + 1]);
-          InternalInstantiator.register(instantiatorClass, instantiatedClass,
-            id, true, eventId, servConn.getProxyID());
-        }
-        catch (ClassNotFoundException e) {
+          InternalInstantiator.register(instantiatorClass, instantiatedClass, id, true, eventId,
+              servConn.getProxyID());
+        } catch (ClassNotFoundException e) {
-    }
-    catch (Exception e) {
-      logger.warn(LocalizedMessage.create(LocalizedStrings.RegisterInstantiators_BAD_CLIENT, new Object[] {servConn.getMembershipID(), e.getLocalizedMessage()}));
+    } catch (Exception e) {
+      logger.warn(LocalizedMessage.create(LocalizedStrings.RegisterInstantiators_BAD_CLIENT,
+          new Object[] {servConn.getMembershipID(), e.getLocalizedMessage()}));
-    
+
-      //Send the instantiators on to other clients if we hit an error
-      //due to a missing class, because they were not distributed
-      //in InternalInstantiator.register. Otherwise they will have
-      //been distributed if successfully registered.
-      ClientInstantiatorMessage clientInstantiatorMessage = new ClientInstantiatorMessage(
-          EnumListenerEvent.AFTER_REGISTER_INSTANTIATOR, serializedInstantiators,
-          servConn.getProxyID(), eventId);
+      // Send the instantiators on to other clients if we hit an error
+      // due to a missing class, because they were not distributed
+      // in InternalInstantiator.register. Otherwise they will have
+      // been distributed if successfully registered.
+      ClientInstantiatorMessage clientInstantiatorMessage =
+          new ClientInstantiatorMessage(EnumListenerEvent.AFTER_REGISTER_INSTANTIATOR,
+              serializedInstantiators, servConn.getProxyID(), eventId);
-    
+
