Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Map for valueOf(indexedExpression)=>RegionEntries. SortedMap<Object,
-   * (RegionEntry | List<RegionEntry>)>. Package access for unit tests.
+   * Map for valueOf(indexedExpression)=>RegionEntries. SortedMap<Object, (RegionEntry |
+   * List<RegionEntry>)>. Package access for unit tests.
-  final ConcurrentNavigableMap valueToEntriesMap = new ConcurrentSkipListMap(TypeUtils.getExtendedNumericComparator());
+  final ConcurrentNavigableMap valueToEntriesMap =
+      new ConcurrentSkipListMap(TypeUtils.getExtendedNumericComparator());
-  
-  //Used as a place holder for an indexkey collection for when a thread is about to change
-  //the collection from index elem to concurrent hash set.  Solution for #47475 where
-  //we could be missing removes due to different threads grabbing occurences of the same
-  //index elem (or collection), one would transition and addAll to a new collection,
-  //while the other would execute a remove on the index elem.
-  //both would complete but the remove would have been lost because we had already added it to the new collection
+
+  // Used as a place holder for an indexkey collection for when a thread is about to change
+  // the collection from index elem to concurrent hash set. Solution for #47475 where
+  // we could be missing removes due to different threads grabbing occurences of the same
+  // index elem (or collection), one would transition and addAll to a new collection,
+  // while the other would execute a remove on the index elem.
+  // both would complete but the remove would have been lost because we had already added it to the
+  // new collection
-  
-  public MemoryIndexStore(Region region,
-      InternalIndexStatistics internalIndexStats) {
+
+  public MemoryIndexStore(Region region, InternalIndexStatistics internalIndexStats) {
-  
-  public MemoryIndexStore(Region region,
-	      InternalIndexStatistics internalIndexStats, Cache cache) {
-	    this.region = region;
-	    RegionAttributes ra = region.getAttributes();
-	    // Initialize the reverse-map if in-place modification is set by the
-	    // application.
-	    if (IndexManager.isObjectModificationInplace()) {
-	      this.entryToValuesMap = new ConcurrentHashMap(ra.getInitialCapacity(),
-	          ra.getLoadFactor(), ra.getConcurrencyLevel());
-	    }
-	    this.internalIndexStats = internalIndexStats;
-	    this.cache = cache;
-	  }
+
+  public MemoryIndexStore(Region region, InternalIndexStatistics internalIndexStats, Cache cache) {
+    this.region = region;
+    RegionAttributes ra = region.getAttributes();
+    // Initialize the reverse-map if in-place modification is set by the
+    // application.
+    if (IndexManager.isObjectModificationInplace()) {
+      this.entryToValuesMap = new ConcurrentHashMap(ra.getInitialCapacity(), ra.getLoadFactor(),
+          ra.getConcurrencyLevel());
+    }
+    this.internalIndexStats = internalIndexStats;
+    this.cache = cache;
+  }
-      //Check if reverse-map is present.
+      // Check if reverse-map is present.
-      } else { 
+      } else {
-      
+
-        Object regionEntries = this.valueToEntriesMap
-            .putIfAbsent(newKey, entry);
+        Object regionEntries = this.valueToEntriesMap.putIfAbsent(newKey, entry);
-        }
-        else if (regionEntries == null) {
+        } else if (regionEntries == null) {
-	  IndexElemArray elemArray = new IndexElemArray();
+          IndexElemArray elemArray = new IndexElemArray();
-          } 
+          }
-              IndexConcurrentHashSet set = new IndexConcurrentHashSet(
-                  IndexManager.INDEX_ELEMARRAY_THRESHOLD + 20, 0.75f, 1);
+              IndexConcurrentHashSet set =
+                  new IndexConcurrentHashSet(IndexManager.INDEX_ELEMARRAY_THRESHOLD + 20, 0.75f, 1);
-    
+
-                DefaultQuery.testHook.doTestHook("BEGIN_TRANSITION_FROM_ELEMARRAY_TO_CONCURRENT_HASH_SET");
+                DefaultQuery.testHook
+                    .doTestHook("BEGIN_TRANSITION_FROM_ELEMARRAY_TO_CONCURRENT_HASH_SET");
-              //on a remove from the elem array, another thread could start and complete his remove 
-              //at this point, that is why we need to replace before adding the elem array elements
-              //once we put this set into the forward map, we know any future removes are either captured
-              //by our instance of the elem array, or the remove operations will need to do a retry?
+              // on a remove from the elem array, another thread could start and complete his remove
+              // at this point, that is why we need to replace before adding the elem array elements
+              // once we put this set into the forward map, we know any future removes are either
+              // captured
+              // by our instance of the elem array, or the remove operations will need to do a
+              // retry?
-              }
-              else {
+              } else {
-                  //This should never happen.  If we see this in the log, then something is wrong with the TRANSITIONING TOKEN and synchronization of changing collection types
-                  //we should then just go from RE to CHS and completely remove the Elem Array.
-                  region.getCache().getLogger().warning("Unable to transition from index elem to concurrent hash set.  Index needs to be recreated");
-                  throw new IndexMaintenanceException("Unable to transition from index elem to concurrent hash set.  Index needs to be recreated");
+                  // This should never happen. If we see this in the log, then something is wrong
+                  // with the TRANSITIONING TOKEN and synchronization of changing collection types
+                  // we should then just go from RE to CHS and completely remove the Elem Array.
+                  region.getCache().getLogger().warning(
+                      "Unable to transition from index elem to concurrent hash set.  Index needs to be recreated");
+                  throw new IndexMaintenanceException(
+                      "Unable to transition from index elem to concurrent hash set.  Index needs to be recreated");
-                  DefaultQuery.testHook.doTestHook("COMPLETE_TRANSITION_FROM_ELEMARRAY_TO_CONCURRENT_HASH_SET");
+                  DefaultQuery.testHook
+                      .doTestHook("COMPLETE_TRANSITION_FROM_ELEMARRAY_TO_CONCURRENT_HASH_SET");
-          
+
-          
+
-      throw new IMQException("Could not add object of type "
-          + newKey.getClass().getName(), ex);
+      throw new IMQException("Could not add object of type " + newKey.getClass().getName(), ex);
-   * Find the old key by traversing the forward map in case of in-place update
-   * modification
-   * If not found it means the value object was modified with same value. So
-   * oldKey is same as newKey.
-   * @param newKey
-   * @param entry
+   * Find the old key by traversing the forward map in case of in-place update modification If not
+   * found it means the value object was modified with same value. So oldKey is same as newKey.
+   * 
-   * @throws TypeMismatchException
-  private Object getOldKey(Object newKey, RegionEntry entry)
-      throws TypeMismatchException {
+  private Object getOldKey(Object newKey, RegionEntry entry) throws TypeMismatchException {
-      if (TypeUtils.compare(indexKey, newKey, CompiledComparison.TOK_NE)
-          .equals(Boolean.TRUE)) {
+      if (TypeUtils.compare(indexKey, newKey, CompiledComparison.TOK_NE).equals(Boolean.TRUE)) {
-        }
-        else if (regionEntries != null) {
+        } else if (regionEntries != null) {
-                //is another thread has since done an add and shifted us into a collection
+                // is another thread has since done an add and shifted us into a collection
-              synchronized(entries) {
+              synchronized (entries) {
-      throw new IMQException("Could not add object of type "
-          + key.getClass().getName(), ex);
+      throw new IMQException("Could not add object of type " + key.getClass().getName(), ex);
-          throw new IMQException("Could not find old key: "
-              + key.getClass().getName(), e);
+          throw new IMQException("Could not find old key: " + key.getClass().getName(), e);
-      //if (!found) {
-      //  throw new IMQException("index maintenance error: "
-      //      + "entry not found for " + key + " entry: " + entry);
-      //}
+      // if (!found) {
+      // throw new IMQException("index maintenance error: "
+      // + "entry not found for " + key + " entry: " + entry);
+      // }
-private Object convertToIndexKey(Object key, RegionEntry entry)
-		throws TypeMismatchException {
-	Object newKey;
-	if (IndexManager.isObjectModificationInplace()
-          && this.entryToValuesMap.containsKey(entry)) {
-        newKey = this.entryToValuesMap.get(entry);
-      }
-      else {
-        newKey = TypeUtils.indexKeyFor(key);
-      }
-	return newKey;
-}
+  private Object convertToIndexKey(Object key, RegionEntry entry) throws TypeMismatchException {
+    Object newKey;
+    if (IndexManager.isObjectModificationInplace() && this.entryToValuesMap.containsKey(entry)) {
+      newKey = this.entryToValuesMap.get(entry);
+    } else {
+      newKey = TypeUtils.indexKeyFor(key);
+    }
+    return newKey;
+  }
-   * Convert a RegionEntry or THashSet<RegionEntry> to be consistently a
-   * Collection
+   * Convert a RegionEntry or THashSet<RegionEntry> to be consistently a Collection
-  /*private Collection regionEntryCollection(Object regionEntries) {
-    if (regionEntries instanceof RegionEntry) {
-      return Collections.singleton(regionEntries);
-    }
-    return (Collection) regionEntries;
-  }*/
-
+  /*
+   * private Collection regionEntryCollection(Object regionEntries) { if (regionEntries instanceof
+   * RegionEntry) { return Collections.singleton(regionEntries); } return (Collection)
+   * regionEntries; }
+   */
-    return new MemoryIndexStoreIterator(this.valueToEntriesMap
-            .subMap(indexKey, true, indexKey, true), indexKey, null);
+    return new MemoryIndexStoreIterator(
+        this.valueToEntriesMap.subMap(indexKey, true, indexKey, true), indexKey, null);
-  public CloseableIterator<IndexStoreEntry> iterator(Object start,
-      boolean startInclusive, Object end, boolean endInclusive,
-      Collection keysToRemove) {
+  public CloseableIterator<IndexStoreEntry> iterator(Object start, boolean startInclusive,
+      Object end, boolean endInclusive, Collection keysToRemove) {
-      return new MemoryIndexStoreIterator(this.valueToEntriesMap
-          .headMap(end, endInclusive),
-          null, keysToRemove);
+      return new MemoryIndexStoreIterator(this.valueToEntriesMap.headMap(end, endInclusive), null,
+          keysToRemove);
-    return new MemoryIndexStoreIterator(this.valueToEntriesMap
-        .subMap(start, startInclusive, end, endInclusive), null, keysToRemove);
+    return new MemoryIndexStoreIterator(
+        this.valueToEntriesMap.subMap(start, startInclusive, end, endInclusive), null,
+        keysToRemove);
-  public CloseableIterator<IndexStoreEntry> iterator(Object start,
-      boolean startInclusive, Collection keysToRemove) {
-    return new MemoryIndexStoreIterator(this.valueToEntriesMap
-        .tailMap(start, startInclusive), null, keysToRemove);
+  public CloseableIterator<IndexStoreEntry> iterator(Object start, boolean startInclusive,
+      Collection keysToRemove) {
+    return new MemoryIndexStoreIterator(this.valueToEntriesMap.tailMap(start, startInclusive), null,
+        keysToRemove);
-  public CloseableIterator<IndexStoreEntry> descendingIterator(Object start,
-      boolean startInclusive, Object end, boolean endInclusive,
-      Collection keysToRemove) {
+  public CloseableIterator<IndexStoreEntry> descendingIterator(Object start, boolean startInclusive,
+      Object end, boolean endInclusive, Collection keysToRemove) {
-      return new MemoryIndexStoreIterator(this.valueToEntriesMap
-          .headMap(end, endInclusive).descendingMap(), null, keysToRemove);
+      return new MemoryIndexStoreIterator(
+          this.valueToEntriesMap.headMap(end, endInclusive).descendingMap(), null, keysToRemove);
-    return new MemoryIndexStoreIterator(this.valueToEntriesMap
-        .subMap(start, startInclusive, end, endInclusive).descendingMap(), null, keysToRemove);
+    return new MemoryIndexStoreIterator(
+        this.valueToEntriesMap.subMap(start, startInclusive, end, endInclusive).descendingMap(),
+        null, keysToRemove);
-  public CloseableIterator<IndexStoreEntry> descendingIterator(Object start,
-      boolean startInclusive, Collection keysToRemove) {
-    return new MemoryIndexStoreIterator(this.valueToEntriesMap
-        .tailMap(start, startInclusive).descendingMap(), null, keysToRemove);
-  }
-
-  @Override
-  public CloseableIterator<IndexStoreEntry> descendingIterator(
+  public CloseableIterator<IndexStoreEntry> descendingIterator(Object start, boolean startInclusive,
-    return new MemoryIndexStoreIterator(this.valueToEntriesMap
-        .descendingMap(), null, keysToRemove);
+    return new MemoryIndexStoreIterator(
+        this.valueToEntriesMap.tailMap(start, startInclusive).descendingMap(), null, keysToRemove);
+  }
+
+  @Override
+  public CloseableIterator<IndexStoreEntry> descendingIterator(Collection keysToRemove) {
+    return new MemoryIndexStoreIterator(this.valueToEntriesMap.descendingMap(), null, keysToRemove);
-   * Get the object of interest from the region entry. For now it always gets
-   * the deserialized value.
+   * Get the object of interest from the region entry. For now it always gets the deserialized
+   * value.
-      Object o = entry.getValue((LocalRegion)this.region);
+      Object o = entry.getValue((LocalRegion) this.region);
-          return ((CachedDeserializable) o).getDeserializedValue(
-              this.region, entry);
+          return ((CachedDeserializable) o).getDeserializedValue(this.region, entry);
-      Object o = entry.getValueInVM((LocalRegion)this.region);
+      Object o = entry.getValueInVM((LocalRegion) this.region);
-          return ((CachedDeserializable) o).getDeserializedValue(
-              this.region, entry);
+          return ((CachedDeserializable) o).getDeserializedValue(this.region, entry);
-  
+
-      Object o = entry.getValue((LocalRegion)this.region);
+      Object o = entry.getValue((LocalRegion) this.region);
-          return ((CachedDeserializable) o).getDeserializedValue(
-              this.region, entry);
+          return ((CachedDeserializable) o).getDeserializedValue(this.region, entry);
-   * A bi-directional iterator over the CSL. Iterates over the entries of CSL
-   * where entry is a mapping (value -> Collection) as well as over the
-   * Collection.
-   * 
+   * A bi-directional iterator over the CSL. Iterates over the entries of CSL where entry is a
+   * mapping (value -> Collection) as well as over the Collection.
-  private class MemoryIndexStoreIterator implements
-      CloseableIterator<IndexStoreEntry> {
+  private class MemoryIndexStoreIterator implements CloseableIterator<IndexStoreEntry> {
-    protected Object currValue; //RegionEntry
+    protected Object currValue; // RegionEntry
-    
-    private MemoryIndexStoreIterator(Map submap,
-                                     Object indexKey, Collection keysToRemove) {
-      this (submap, indexKey, keysToRemove, GemFireCacheImpl.getInstance().cacheTimeMillis());
+
+    private MemoryIndexStoreIterator(Map submap, Object indexKey, Collection keysToRemove) {
+      this(submap, indexKey, keysToRemove, GemFireCacheImpl.getInstance().cacheTimeMillis());
-    
-    private MemoryIndexStoreIterator(Map submap,
-            Object indexKey, Collection keysToRemove, long iteratorStartTime) {
-		this.map = submap;
-		this.indexKey = indexKey;
-		this.keysToRemove = keysToRemove == null? null : new HashSet(keysToRemove);
-		this.iteratorStartTime = iteratorStartTime;
-		currentEntry = new MemoryIndexStoreEntry(iteratorStartTime);
-	}
+
+    private MemoryIndexStoreIterator(Map submap, Object indexKey, Collection keysToRemove,
+        long iteratorStartTime) {
+      this.map = submap;
+      this.indexKey = indexKey;
+      this.keysToRemove = keysToRemove == null ? null : new HashSet(keysToRemove);
+      this.iteratorStartTime = iteratorStartTime;
+      currentEntry = new MemoryIndexStoreEntry(iteratorStartTime);
+    }
-     * This iterator iterates over the CSL map as well as on the collection of
-     * values for each entry in the map. If the map has next element, check if
-     * the previous valuesIterator (iterator on the Collection) has been created
-     * or has finished iterating. If not created, create an iterator on the
-     * Collection. If created and not finished, return, so that the next() call
-     * would create a new InMemoryIndexStorageEntry for the current key and next
-     * RE from the collection of values.
+     * This iterator iterates over the CSL map as well as on the collection of values for each entry
+     * in the map. If the map has next element, check if the previous valuesIterator (iterator on
+     * the Collection) has been created or has finished iterating. If not created, create an
+     * iterator on the Collection. If created and not finished, return, so that the next() call
+     * would create a new InMemoryIndexStorageEntry for the current key and next RE from the
+     * collection of values.
-        if (currKey != indexKey && (currKey == QueryService.UNDEFINED
-                || currKey == IndexManager.NULL
-                || keysToRemove != null && removeFromKeysToRemove(keysToRemove,
-                currKey))) {
+        if (currKey != indexKey
+            && (currKey == QueryService.UNDEFINED || currKey == IndexManager.NULL
+                || keysToRemove != null && removeFromKeysToRemove(keysToRemove, currKey))) {
-        return values != null &&
-                (values instanceof RegionEntry
-                        || this.valuesIterator.hasNext());
+        return values != null && (values instanceof RegionEntry || this.valuesIterator.hasNext());
-     * returns a new InMemoryIndexStorageEntry with current index key and its
-     * next value which is the next RE in the collection. Make sure hasNext()
-     * has been called before calling this method
+     * returns a new InMemoryIndexStorageEntry with current index key and its next value which is
+     * the next RE in the collection. Make sure hasNext() has been called before calling this method
-      RegionEntry  re = (RegionEntry) valuesIterator.next();
-      if (re == null) throw new NoSuchElementException();
+      RegionEntry re = (RegionEntry) valuesIterator.next();
+      if (re == null) {
+        throw new NoSuchElementException();
+      }
-          if (TypeUtils
-              .compare(key, iterator.next(), OQLLexerTokenTypes.TOK_EQ).equals(
-                  Boolean.TRUE)) {
+          if (TypeUtils.compare(key, iterator.next(), OQLLexerTokenTypes.TOK_EQ)
+              .equals(Boolean.TRUE)) {
-  
+
-      Map.Entry mapEntry = (Map.Entry)iterator.next();
+      Map.Entry mapEntry = (Map.Entry) iterator.next();
-          sb.append( " Value:" + getTargetObject((RegionEntry)entriesIterator.next()));
+          sb.append(" Value:" + getTargetObject((RegionEntry) entriesIterator.next()));
+      } else {
+        sb.append(" Value:" + getTargetObject((RegionEntry) value));
-      else {
-        sb.append( " Value:" + getTargetObject((RegionEntry)value));
-      }
-      
+
-      
+
-   * A wrapper over the entry in the CSL index map. It maps IndexKey ->
-   * RegionEntry
-   * 
+   * A wrapper over the entry in the CSL index map. It maps IndexKey -> RegionEntry
-    private long iteratorStartTime;    
+    private long iteratorStartTime;
-    	this.iteratorStartTime = iteratorStartTime;
+      this.iteratorStartTime = iteratorStartTime;
-    public void setMemoryIndexStoreEntry(Object deserializedIndexKey,
-        RegionEntry regionEntry) {
+    public void setMemoryIndexStoreEntry(Object deserializedIndexKey, RegionEntry regionEntry) {
-    
+
-      return updateInProgress
-          || regionEntry.isUpdateInProgress()
-          // The index update could have started just before the iterator was created. The entry still
-          // needs to be re-evaluated in this case.
-          ||  IndexManager.needsRecalculation(iteratorStartTime, regionEntry.getLastModified());
+      return updateInProgress || regionEntry.isUpdateInProgress()
+      // The index update could have started just before the iterator was created. The entry still
+      // needs to be re-evaluated in this case.
+          || IndexManager.needsRecalculation(iteratorStartTime, regionEntry.getLastModified());
-  
+
+      if (IndexManager.testHook != null) {
+        IndexManager.testHook.hook(201);
+      }
-      return new StringBuilder("CachedEntryWrapper@").append(
-          Integer.toHexString(System.identityHashCode(this))).append(' ')
-          .append(this.key).append(' ').append(this.value).toString();
+      return new StringBuilder("CachedEntryWrapper@")
+          .append(Integer.toHexString(System.identityHashCode(this))).append(' ').append(this.key)
+          .append(' ').append(this.value).toString();
