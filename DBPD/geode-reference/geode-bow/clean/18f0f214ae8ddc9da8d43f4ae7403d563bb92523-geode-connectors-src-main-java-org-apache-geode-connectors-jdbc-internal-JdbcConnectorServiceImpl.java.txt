GEODE-6461: Report errors when table metadata and region mapping do not match (#3256)

Co-authored-by: Ben Ross <bross@pivotal.io>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>

+import java.sql.Connection;
+import java.sql.SQLException;
+import javax.sql.DataSource;
+
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.connectors.jdbc.JdbcConnectorException;
+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;
+import org.apache.geode.internal.jndi.JNDIInvoker;
+import org.apache.geode.internal.logging.LogService;
+  private static final Logger logger = LogService.getLogger();
+  public void validateMapping(RegionMapping regionMapping) {
+
+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());
+    if (dataSource == null) {
+      throw new JdbcConnectorException("No datasource \"" + regionMapping.getDataSourceName()
+          + "\" found when creating mapping \"" + regionMapping.getRegionName() + "\"");
+    }
+    validateMapping(regionMapping, dataSource);
+  }
+
+  @Override
+  public void validateMapping(RegionMapping regionMapping, DataSource dataSource) {
+    TableMetaDataView metaDataView = getTableMetaDataView(regionMapping, dataSource);
+    boolean foundDifference = false;
+
+    if (regionMapping.getFieldMappings().size() != metaDataView.getColumnNames().size()) {
+      foundDifference = true;
+    } else {
+      for (FieldMapping fieldMapping : regionMapping.getFieldMappings()) {
+        String jdbcName = fieldMapping.getJdbcName();
+        if (!metaDataView.getColumnNames().contains(jdbcName)) {
+          foundDifference = true;
+          break;
+        }
+        if (!metaDataView.getColumnDataType(jdbcName).getName()
+            .equals(fieldMapping.getJdbcType())) {
+          foundDifference = true;
+          break;
+        }
+        if (metaDataView.isColumnNullable(jdbcName) != fieldMapping.isJdbcNullable()) {
+          foundDifference = true;
+          break;
+        }
+      }
+    }
+
+    if (!foundDifference) {
+      if (!regionMapping.getSpecifiedIds()
+          && !regionMapping.getIds().equals(String.join(",", metaDataView.getKeyColumnNames()))) {
+        foundDifference = true;
+      }
+    }
+
+    if (foundDifference) {
+      StringBuilder sb = new StringBuilder();
+      sb.append(
+          "Error detected when comparing mapping for region \"" + regionMapping.getRegionName()
+              + "\" with table definition: \n");
+
+      if (!regionMapping.getSpecifiedIds()) {
+        sb.append("\nId fields in Field Mappings: " + regionMapping.getIds());
+        sb.append(
+            "\nId fields in Table MetaData: " + String.join(",", metaDataView.getKeyColumnNames()));
+      }
+
+      sb.append("\n\nDefinition from Field Mappings (" + regionMapping.getFieldMappings().size()
+          + " field mappings found):");
+
+      for (FieldMapping fieldMapping : regionMapping.getFieldMappings()) {
+        sb.append("\n" + fieldMapping.getJdbcName() + " - " + fieldMapping.getJdbcType());
+      }
+
+      sb.append("\n\nDefinition from Table Metadata (" + metaDataView.getColumnNames().size()
+          + " columns found):");
+
+      for (String name : metaDataView.getColumnNames()) {
+        sb.append("\n" + name + " - " + metaDataView.getColumnDataType(name));
+      }
+
+      sb.append("\n\nDestroy and recreate the JDBC mapping for \"" + regionMapping.getRegionName()
+          + "\" to resolve this error.");
+
+      logger.error(sb.toString());
+
+      throw new JdbcConnectorException("Jdbc mapping for \"" + regionMapping.getRegionName()
+          + "\" does not match table definition, check logs for more details.");
+    }
+  }
+
+
+  @Override
+
+
+  // The following helper method is to allow for proper mocking in unit tests
+  DataSource getDataSource(String dataSourceName) {
+    return JNDIInvoker.getDataSource(dataSourceName);
+  }
+
+  // The following helper method is to allow for proper mocking in unit tests
+  TableMetaDataManager getTableMetaDataManager() {
+    return new TableMetaDataManager();
+  }
+
+  private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,
+      DataSource dataSource) {
+    TableMetaDataManager manager = getTableMetaDataManager();
+    try (Connection connection = dataSource.getConnection()) {
+      return manager.getTableMetaDataView(connection, regionMapping);
+    } catch (SQLException ex) {
+      throw JdbcConnectorException
+          .createException("Exception thrown while connecting to datasource \""
+              + regionMapping.getDataSourceName() + "\": ", ex);
+    }
+  }
