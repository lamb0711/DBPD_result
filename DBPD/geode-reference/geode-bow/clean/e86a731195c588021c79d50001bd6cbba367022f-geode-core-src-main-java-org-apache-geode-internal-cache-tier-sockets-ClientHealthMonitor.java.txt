Merge branch 'release/1.3.0'

+import org.apache.commons.lang.StringUtils;
-import org.apache.geode.internal.cache.tier.Acceptor;
+  public static final String CLIENT_HEALTH_MONITOR_INTERVAL_PROPERTY =
+      "geode.client-health-monitor-interval";
+  public int getMaximumTimeBetweenPings() {
+    return maximumTimeBetweenPings;
+  }
+
+  private final int maximumTimeBetweenPings;
+
-  final protected static long CLIENT_MONITOR_INTERVAL = 1000;
+  private final static long DEFAULT_CLIENT_MONITOR_INTERVAL_IN_MILLIS = 1000;
-  final private CacheClientNotifierStats stats;
+  private final CacheClientNotifierStats stats;
+  public long getMonitorInterval() {
+    return monitorInterval;
+  }
+
+  private long monitorInterval;
+
-            byte communicationMode = sc.getCommunicationMode();
-            /* Check for all modes that could be used for Client-Server communication */
-            if (communicationMode == Acceptor.CLIENT_TO_SERVER
-                || communicationMode == Acceptor.PRIMARY_SERVER_TO_CLIENT
-                || communicationMode == Acceptor.SECONDARY_SERVER_TO_CLIENT
-                || communicationMode == Acceptor.CLIENT_TO_SERVER_FOR_QUEUE) {
+            if (sc.isClientServerConnection()) {
-          if (sc.getCommunicationMode() == Acceptor.GATEWAY_TO_GATEWAY) {
+          if (sc.getCommunicationMode().isWAN()) {
-        // logger.warning("Terminating " + serverConnections.size() + "
-        // connections");
+        // logger.warn("Terminating " + serverConnections.size() + " connections");
-          // logger.warning("Terminating " + serverConnection);
+          // logger.warn("Terminating " + serverConnection);
+    this.maximumTimeBetweenPings = maximumTimeBetweenPings;
+    this.monitorInterval = Long.getLong(CLIENT_HEALTH_MONITOR_INTERVAL_PROPERTY,
+        DEFAULT_CLIENT_MONITOR_INTERVAL_IN_MILLIS);
+    logger.debug("Setting monitorInterval to {}", this.monitorInterval);
+
-          Thread.sleep(CLIENT_MONITOR_INTERVAL);
+          Thread.sleep(monitorInterval);
