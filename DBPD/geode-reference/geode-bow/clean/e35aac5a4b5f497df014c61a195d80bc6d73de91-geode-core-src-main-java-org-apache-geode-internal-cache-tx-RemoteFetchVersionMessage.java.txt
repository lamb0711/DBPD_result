Merge branch 'release/1.5.0'

-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.tx;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.RegionEntry;
+import org.apache.geode.internal.cache.RemoteOperationException;
- * DistributedRegions with DataPolicy EMPTY, NORMAL, PRELOADED, can use this message to fetch
- * VersionTag for a key.
+ * DistributedRegions with DataPolicy NORMAL, PRELOADED, use this message to fetch VersionTag for a
+ * key when a tx is in progress (see TXEntryState.fetchRemoteVersionTag).
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-  @Override
-  public int getProcessorType() {
-    return DistributionManager.SERIAL_EXECUTOR;
-  }
-
-  @Override
-  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+  protected boolean operateOnRegion(ClusterDistributionManager dm, LocalRegion r, long startTime)
-    if (!(r instanceof PartitionedRegion)) {
-      r.waitOnInitialization();
-    }
-    VersionTag tag;
+    r.waitOnInitialization();
+    VersionTag<?> tag;
-    private VersionTag tag;
+    private VersionTag<?> tag;
-    private FetchVersionReplyMessage(int processorId, VersionTag tag) {
+    private FetchVersionReplyMessage(int processorId, VersionTag<?> tag) {
-    public static void send(InternalDistributedMember recipient, int processorId, VersionTag tag,
-        DM dm) {
+    public static void send(InternalDistributedMember recipient, int processorId, VersionTag<?> tag,
+        DistributionManager dm) {
-    public void process(DM dm, ReplyProcessor21 processor) {
+    public void process(DistributionManager dm, ReplyProcessor21 processor) {
-    private volatile VersionTag tag;
+    private volatile VersionTag<?> tag;
-    public VersionTag waitForResponse() throws RemoteOperationException {
+    public VersionTag<?> waitForResponse() throws RemoteOperationException {
-        waitForCacheException();
+        waitForRemoteResponse();
