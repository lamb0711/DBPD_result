Merge remote-tracking branch 'origin/develop' into feature/GEODE-917

+import com.gemstone.gemfire.cache.wan.*;
-import com.gemstone.gemfire.cache.wan.GatewayEventFilter;
-import com.gemstone.gemfire.cache.wan.GatewayReceiver;
-import com.gemstone.gemfire.cache.wan.GatewaySender;
-import com.gemstone.gemfire.cache.wan.GatewayTransportFilter;
+      if (this.version.compareTo(CacheXmlVersion.VERSION_8_0) >= 0) {
+        if (sender.getGatewayEventSubstitutionFilter() != null) {
+          generateGatewayEventSubstitutionFilter(sender.getGatewayEventSubstitutionFilter());
+        }
+      }
+
-      
+
+      if (this.version.compareTo(CacheXmlVersion.VERSION_8_0) >= 0) {
+        if (asyncEventQueue.getGatewayEventSubstitutionFilter() != null) {
+          generateGatewayEventSubstitutionFilter(asyncEventQueue.getGatewayEventSubstitutionFilter());
+        }
+      }
+
+
+  private void generateGatewayEventSubstitutionFilter(GatewayEventSubstitutionFilter filter)
+      throws SAXException {
+
+    handler.startElement("", GATEWAY_EVENT_SUBSTITUTION_FILTER, GATEWAY_EVENT_SUBSTITUTION_FILTER,
+        EMPTY);
+    String className = filter.getClass().getName();
+
+    handler.startElement("", CLASS_NAME, CLASS_NAME, EMPTY);
+    handler.characters(className.toCharArray(), 0, className.length());
+    handler.endElement("", CLASS_NAME, CLASS_NAME);
+    Properties props = null;
+    if (filter instanceof Declarable2) {
+      props = ((Declarable2)filter).getConfig();
+      generate(props, null);
+    }
+    handler.endElement("", GATEWAY_EVENT_SUBSTITUTION_FILTER, GATEWAY_EVENT_SUBSTITUTION_FILTER);
+  }
