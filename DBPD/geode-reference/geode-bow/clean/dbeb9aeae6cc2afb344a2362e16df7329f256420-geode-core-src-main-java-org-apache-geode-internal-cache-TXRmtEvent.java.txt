Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The internal implementation of the {@link TransactionEvent}interface used by
- * the remote commit code.
+ * The internal implementation of the {@link TransactionEvent}interface used by the remote commit
+ * code.
- *  
+ * 
-public class TXRmtEvent implements TransactionEvent
-{
+public class TXRmtEvent implements TransactionEvent {
-  
+
-  
-  public TransactionId getTransactionId()
-  {
+
+  public TransactionId getTransactionId() {
-    return BucketRegion.FORCE_LOCAL_LISTENERS_INVOCATION || !(ce.getRegion() instanceof PartitionedRegion);  
+    return BucketRegion.FORCE_LOCAL_LISTENERS_INVOCATION
+        || !(ce.getRegion() instanceof PartitionedRegion);
-  
-  public List getEvents()
-  {
+
+  public List getEvents() {
-    }
-    else {
+    } else {
-        CacheEvent ce = (CacheEvent)it.next();
+        CacheEvent ce = (CacheEvent) it.next();
-      }
-      else {
+      } else {
-  
+
-   * Do all operations touch internal regions?
-   * Returns false if the transaction is empty
-   * or if any events touch non-internal regions.
+   * Do all operations touch internal regions? Returns false if the transaction is empty or if any
+   * events touch non-internal regions.
-    Iterator<CacheEvent<?,?>> it = this.events.iterator();
+    Iterator<CacheEvent<?, ?>> it = this.events.iterator();
-      CacheEvent<?,?> event = it.next();
+      CacheEvent<?, ?> event = it.next();
-        LocalRegion region = (LocalRegion)event.getRegion();
-        if (region != null
-            && !region.isPdxTypesRegion()
-            && !region.isInternalRegion()) {
+        LocalRegion region = (LocalRegion) event.getRegion();
+        if (region != null && !region.isPdxTypesRegion() && !region.isInternalRegion()) {
-  public List getCreateEvents()
-  {
+  public List getCreateEvents() {
-    }
-    else {
+    } else {
-        CacheEvent ce = (CacheEvent)it.next();
+        CacheEvent ce = (CacheEvent) it.next();
-      }
-      else {
+      } else {
-  public List getPutEvents()
-  {
+  public List getPutEvents() {
-    }
-    else {
+    } else {
-        CacheEvent ce = (CacheEvent)it.next();
+        CacheEvent ce = (CacheEvent) it.next();
-      }
-      else {
+      } else {
-  public List getInvalidateEvents()
-  {
+  public List getInvalidateEvents() {
-    }
-    else {
+    } else {
-        CacheEvent ce = (CacheEvent)it.next();
+        CacheEvent ce = (CacheEvent) it.next();
-      }
-      else {
+      } else {
-  public List getDestroyEvents()
-  {
+  public List getDestroyEvents() {
-    }
-    else {
+    } else {
-        CacheEvent ce = (CacheEvent)it.next();
+        CacheEvent ce = (CacheEvent) it.next();
-      }
-      else {
+      } else {
-  
+
-  private EntryEventImpl createEvent(LocalRegion r, Operation op,
-      RegionEntry re, Object key, Object newValue,Object aCallbackArgument)
-  {
-    DistributedMember originator = ((TXId)this.txId).getMemberId();
-    //TODO:ASIF :EventID will not be generated with this constructor . Check if
+  private EntryEventImpl createEvent(LocalRegion r, Operation op, RegionEntry re, Object key,
+      Object newValue, Object aCallbackArgument) {
+    DistributedMember originator = ((TXId) this.txId).getMemberId();
+    // TODO:ASIF :EventID will not be generated with this constructor . Check if
-    @Retained EntryEventImpl event = EntryEventImpl.create(
-        eventRegion, op, key, newValue,
-        aCallbackArgument, // callbackArg
+    @Retained
+    EntryEventImpl event = EntryEventImpl.create(eventRegion, op, key, newValue, aCallbackArgument, // callbackArg
-  private void addEvent(EntryEventImpl e)
-  {
+  private void addEvent(EntryEventImpl e) {
-  void addDestroy(LocalRegion r, RegionEntry re, Object key,Object aCallbackArgument)
-  {
-    addEvent(createEvent(r, Operation.DESTROY, re, key, null,aCallbackArgument));
+  void addDestroy(LocalRegion r, RegionEntry re, Object key, Object aCallbackArgument) {
+    addEvent(createEvent(r, Operation.DESTROY, re, key, null, aCallbackArgument));
-  void addInvalidate(LocalRegion r, RegionEntry re, Object key, Object newValue,Object aCallbackArgument)
-  {
-    addEvent(createEvent(r, Operation.INVALIDATE, re, key, newValue,aCallbackArgument));
+  void addInvalidate(LocalRegion r, RegionEntry re, Object key, Object newValue,
+      Object aCallbackArgument) {
+    addEvent(createEvent(r, Operation.INVALIDATE, re, key, newValue, aCallbackArgument));
-  void addPut(Operation putOp, LocalRegion r, RegionEntry re, Object key,
-      Object newValue,Object aCallbackArgument)
-  {
-    addEvent(createEvent(r, putOp, re, key, newValue,aCallbackArgument));
+  void addPut(Operation putOp, LocalRegion r, RegionEntry re, Object key, Object newValue,
+      Object aCallbackArgument) {
+    addEvent(createEvent(r, putOp, re, key, newValue, aCallbackArgument));
-  public Cache getCache()
-  {
+  public Cache getCache() {
-      for (EntryEventImpl e: (List<EntryEventImpl>)this.events) {
+      for (EntryEventImpl e : (List<EntryEventImpl>) this.events) {
