Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-    return this.queue.take();
+    throw new UnsupportedOperationException();
+    // No code currently calls this method.
+    // To implement it we need to make sure that the callers
+    // call freeOffHeapResources on the returned GatewaySenderEventImpl.
+    //return this.queue.take();
+                continue;
-          EntryEventImpl event = new EntryEventImpl(
+          EntryEventImpl event = EntryEventImpl.create(
-              EnumListenerEvent.AFTER_UPDATE, event, null);
+              EnumListenerEvent.AFTER_UPDATE, event, null); // OFFHEAP: event for pdx type meta data so it should never be off-heap
-                ge.getDeserializedValue(), currentTime - ge.getCreationTime() }));
+                ge.getValueAsString(true), currentTime - ge.getCreationTime() }));
+    
+    closeProcessor();
+    
+  
+  public void closeProcessor() {
+    if (logger.isDebugEnabled()) {
+      logger.debug("Closing dispatcher");
+    }
+    try {
+      if (this.sender.isPrimary() && this.queue.size() > 0) {
+        logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayImpl_DESTROYING_GATEWAYEVENTDISPATCHER_WITH_ACTIVELY_QUEUED_DATA));
+      }
+    } catch (RegionDestroyedException ignore) {
+    } catch (CancelException ignore) {
+    } catch (CacheException ignore) {
+      // just checking in case we should log a warning
+    } finally {
+      this.queue.close();
+      if (logger.isDebugEnabled()) {
+        logger.debug("Closed dispatcher");
+      }
+    }
+  }
-        buffer.append(ge.deserialize(ge.getValue()));
+        buffer.append(ge.getValueAsString(true)).append(",");
