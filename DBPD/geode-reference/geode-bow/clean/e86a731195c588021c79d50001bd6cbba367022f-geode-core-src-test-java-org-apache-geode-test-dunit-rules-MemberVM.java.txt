Merge branch 'release/1.3.0'

+import java.io.File;
+import java.util.Arrays;
+
+import org.apache.commons.io.FileUtils;
+
-
-import java.io.File;
-import java.nio.file.Paths;
+import org.apache.geode.test.junit.rules.Locator;
+import org.apache.geode.test.junit.rules.Member;
+import org.apache.geode.test.junit.rules.Server;
+  private boolean tempWorkingDir;
+    this(member, vm, false);
+  }
+
+  public MemberVM(T member, VM vm, boolean tempWorkingDir) {
+    this.tempWorkingDir = tempWorkingDir;
-    return (T) member;
+    return member;
-    return member.getWorkingDir();
+    if (tempWorkingDir)
+      return member.getWorkingDir();
+    return vm.getWorkingDirectory();
-  public void stopMember() {
-
-    this.invoke(LocatorServerStartupRule::stopMemberInThisVM);
-    /**
-     * The LocatorServerStarterRule may dynamically change the "user.dir" system property to point
-     * to a temporary folder. The Path API caches the first value of "user.dir" that it sees, and
-     * this can result in a stale cached value of "user.dir" which points to a directory that no
-     * longer exists.
-     */
-    boolean vmIsClean = this.getVM().invoke(() -> Paths.get("").toAbsolutePath().toFile().exists());
-    if (!vmIsClean) {
-      this.getVM().bounce();
+  public int getEmbeddedLocatorPort() {
+    if (!(member instanceof Server)) {
+      throw new RuntimeException("member needs to be a server");
+    return ((Server) member).getEmbeddedLocatorPort();
+  }
+
+  public void stopMember() {
+    this.invoke(LocatorServerStartupRule::stopMemberInThisVM);
+    if (tempWorkingDir) {
+      /*
+       * this temporary workingDir will dynamically change the "user.dir". system property to point
+       * to a temporary folder. The Path API caches the first value of "user.dir" that it sees, and
+       * this can result in a stale cached value of "user.dir" which points to a directory that no
+       * longer exists.
+       */
+      vm.bounce();
+    } else
+      // if using the dunit/vm dir as the preset working dir, need to cleanup dir except
+      // the locator0view* file, so that regions/indexes won't get persisted across tests
+      Arrays.stream(getWorkingDir().listFiles((dir, name) -> {
+        return !name.startsWith("locator0view");
+      })).forEach(FileUtils::deleteQuietly);
