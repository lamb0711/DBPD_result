Merge branch 'develop' into feature/GEODE-6187

+import java.util.Arrays;
+import java.util.Objects;
+import java.util.Properties;
+import java.util.Set;
+import java.util.stream.Collectors;
+import org.apache.commons.lang3.StringUtils;
+
+import org.apache.geode.cache.ExpirationAction;
+   * turn the comma separated ids into a set of id
+   */
+  public Set<String> getGatewaySenderIdsAsSet() {
+    if (gatewaySenderIds == null) {
+      return null;
+    }
+    return Arrays.stream(gatewaySenderIds.split(","))
+        .filter(StringUtils::isNotBlank)
+        .collect(Collectors.toSet());
+  }
+
+  /**
+   * turn the comma separated id into a set of ids
+   */
+  public Set<String> getAsyncEventQueueIdsAsSet() {
+    if (asyncEventQueueIds == null) {
+      return null;
+    }
+    return Arrays.stream(asyncEventQueueIds.split(","))
+        .filter(StringUtils::isNotBlank)
+        .collect(Collectors.toSet());
+  }
+
+  /**
-  public static class DiskWriteAttributes {
+  public static class DiskWriteAttributes implements Serializable {
+    public ExpirationAttributesType() {}
+
+    public ExpirationAttributesType(Integer timeout, ExpirationAction action, String expiry,
+        Properties iniProps) {
+      expirationAttributes.setTimeout(Objects.toString(timeout, null));
+      if (action != null) {
+        expirationAttributes.setAction(action.toXmlString());
+      }
+      if (expiry != null) {
+        expirationAttributes.setCustomExpiry(new DeclarableType(expiry, iniProps));
+      }
+    }
+
+    /**
+     * @return true if timeout or action is specified
+     */
+    public boolean hasTimoutOrAction() {
+      return (getTimeout() != null || getAction() != null);
+    }
+
+    /**
+     * @return true if custom expiry class is specified
+     */
+    public boolean hasCustomExpiry() {
+      return getCustomExpiry() != null;
+    }
+
+    /**
+     * @return the custom expiry declarable
+     */
