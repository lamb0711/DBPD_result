GEODE-420: Fixing locators property configuration

-import static com.gemstone.gemfire.distributed.ConfigurationProperties.ENABLE_CLUSTER_CONFIGURATION;
-import static com.gemstone.gemfire.distributed.ConfigurationProperties.LOCATORS;
-import static com.gemstone.gemfire.distributed.ConfigurationProperties.MCAST_PORT;
-import static com.gemstone.gemfire.internal.AvailablePortHelper.getRandomAvailableTCPPorts;
-import static com.gemstone.gemfire.test.dunit.Host.getHost;
-import static com.gemstone.gemfire.test.dunit.internal.JUnit4DistributedTestCase.disconnectAllFromDS;
-import static com.gemstone.gemfire.test.dunit.internal.JUnit4DistributedTestCase.disconnectFromDS;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+import static com.gemstone.gemfire.internal.AvailablePortHelper.*;
+import static com.gemstone.gemfire.test.dunit.Host.*;
+import static com.gemstone.gemfire.test.dunit.internal.JUnit4DistributedTestCase.*;
+import static org.junit.Assert.*;
+import com.jayway.awaitility.Awaitility;
-import com.jayway.awaitility.Awaitility;
-public class LocatorServerConfigurationRule extends ExternalResource implements
-    Serializable {
+public class LocatorServerConfigurationRule extends ExternalResource implements Serializable {
-  
+
-  
+
-   * 
+   *
+   *
-   * 
-   * @param index
-   *          valid 1 to 3 (returns getHist(0).getVM(index)
+   * @param index valid 1 to 3 (returns getHist(0).getVM(index)
+   *
-      InternalLocator locator = (InternalLocator)Locator.startLocatorAndDS(0,
-          null, locatorProperties);
+      InternalLocator locator = (InternalLocator) Locator.startLocatorAndDS(0, null, locatorProperties);
-        Awaitility.await().atMost(65, TimeUnit.SECONDS)
-            .until(() -> assertTrue(locator.isSharedConfigurationRunning()));
+        Awaitility.await().atMost(65, TimeUnit.SECONDS).until(() -> assertTrue(locator.isSharedConfigurationRunning()));
-    props.setProperty(LOCATORS, getHostName() + ":" + locatorPort);
+    props.setProperty(LOCATORS, getHostName() + "[" + locatorPort + "]");
-    }
-    catch (UnknownHostException ignore) {
+    } catch (UnknownHostException ignore) {
