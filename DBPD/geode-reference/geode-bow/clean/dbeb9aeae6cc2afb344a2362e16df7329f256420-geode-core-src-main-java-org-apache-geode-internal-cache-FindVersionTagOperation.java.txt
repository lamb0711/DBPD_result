Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-      recipients = ((DistributedRegion)r).getDistributionAdvisor().adviseCacheOp();
+      recipients = ((DistributedRegion) r).getDistributionAdvisor().adviseCacheOp();
-      recipients = ((PartitionedRegion)r).getRegionAdvisor().adviseDataStore();
+      recipients = ((PartitionedRegion) r).getRegionAdvisor().adviseDataStore();
-    FindVersionTagMessage msg = new FindVersionTagMessage(recipients, processor.getProcessorId(), r.getFullPath(), eventId, isBulkOp);
+    FindVersionTagMessage msg = new FindVersionTagMessage(recipients, processor.getProcessorId(),
+        r.getFullPath(), eventId, isBulkOp);
-  
+
-    
+
-    
+
-    
+
-   * operation.  If we don't have version information the op may be applied by
-   * this cache as a new event.  When the event is then propagated to other servers
-   * that have already seen the event it will be ignored, causing an inconsistency.
+   * operation. If we don't have version information the op may be applied by this cache as a new
+   * event. When the event is then propagated to other servers that have already seen the event it
+   * will be ignored, causing an inconsistency.
-  public static class FindVersionTagMessage extends HighPriorityDistributionMessage 
-     implements MessageWithReply {
-    
+  public static class FindVersionTagMessage extends HighPriorityDistributionMessage
+      implements MessageWithReply {
+
-    
-    protected FindVersionTagMessage(Collection recipients, int processorId, String regionName, EventID eventId, boolean isBulkOp) {
+
+    protected FindVersionTagMessage(Collection recipients, int processorId, String regionName,
+        EventID eventId, boolean isBulkOp) {
-    public FindVersionTagMessage() {
-    }
+    public FindVersionTagMessage() {}
-    /* (non-Javadoc)
-     * @see org.apache.geode.distributed.internal.DistributionMessage#process(org.apache.geode.distributed.internal.DistributionManager)
+    /*
+     * (non-Javadoc)
+     * 
+     * @see org.apache.geode.distributed.internal.DistributionMessage#process(org.apache.geode.
+     * distributed.internal.DistributionManager)
-        if(isBulkOp) {
+        if (isBulkOp) {
-          
+
- 
-      }
-      catch (RuntimeException e) {
+
+      } catch (RuntimeException e) {
-      }
-      finally {
+      } finally {
-    
+
-    
+
-      return this.getShortClassName() + "(processorId=" + this.processorId
-      + ";region=" + this.regionName
-      + ";eventId=" + this.eventId
-      + ";isBulkOp=" + this.isBulkOp
-      + ")";
+      return this.getShortClassName() + "(processorId=" + this.processorId + ";region="
+          + this.regionName + ";eventId=" + this.eventId + ";isBulkOp=" + this.isBulkOp + ")";
-    
+
-    public VersionTagReply() {
-    }
-    
+    public VersionTagReply() {}
+
-      return "VersionTagReply("+this.versionTag+")";
+      return "VersionTagReply(" + this.versionTag + ")";
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.versionTag = (VersionTag)DataSerializer.readObject(in);
+      this.versionTag = (VersionTag) DataSerializer.readObject(in);
