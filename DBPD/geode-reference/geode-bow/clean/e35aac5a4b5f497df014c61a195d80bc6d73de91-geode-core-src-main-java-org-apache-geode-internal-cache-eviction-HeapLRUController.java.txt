Merge branch 'release/1.5.0'

-import org.apache.geode.StatisticDescriptor;
-import org.apache.geode.StatisticsFactory;
-import org.apache.geode.StatisticsType;
-import org.apache.geode.StatisticsTypeFactory;
+import org.apache.geode.cache.EvictionAlgorithm;
-import org.apache.geode.internal.statistics.StatisticsTypeFactoryImpl;
- * memory that is currently being used. If the percentage of memory in use exceeds the given
- * percentage, then the least recently used entry of the region is evicted.
+ * the JVM heap that is currently being used. If the percentage of heap in use exceeds the given
+ * percentage, then one or more entries are evicted from the region.
-  private static final long serialVersionUID = 4970685814429530675L;
-
-  private static final int PER_ENTRY_OVERHEAD = 250;
-
-  private int perEntryOverhead = PER_ENTRY_OVERHEAD;
-
-  private static final StatisticsType statType;
-
-  static {
-    // create the stats type for MemLRU.
-    StatisticsTypeFactory f = StatisticsTypeFactoryImpl.singleton();
-
-    final String entryBytesDesc =
-        "The amount of memory currently used by regions configured for eviction.";
-    final String lruEvictionsDesc = "Number of total entry evictions triggered by LRU.";
-    final String lruDestroysDesc =
-        "Number of entries destroyed in the region through both destroy cache operations and eviction. Reset to zero each time it exceeds lruDestroysLimit.";
-    final String lruDestroysLimitDesc =
-        "Maximum number of entry destroys triggered by LRU before scan occurs.";
-    final String lruEvaluationsDesc = "Number of entries evaluated during LRU operations.";
-    final String lruGreedyReturnsDesc = "Number of non-LRU entries evicted during LRU operations";
-
-    statType = f.createType("HeapLRUStatistics",
-        "Statistics about byte based Least Recently Used region entry disposal",
-        new StatisticDescriptor[] {f.createLongGauge("entryBytes", entryBytesDesc, "bytes"),
-            f.createLongCounter("lruEvictions", lruEvictionsDesc, "entries"),
-            f.createLongCounter("lruDestroys", lruDestroysDesc, "entries"),
-            f.createLongGauge("lruDestroysLimit", lruDestroysLimitDesc, "entries"),
-            f.createLongCounter("lruEvaluations", lruEvaluationsDesc, "entries"),
-            f.createLongCounter("lruGreedyReturns", lruGreedyReturnsDesc, "entries"),});
-  }
-
-  public HeapLRUController(EvictionAction evictionAction, Region region, ObjectSizer sizer) {
-    super(evictionAction, region, sizer);
+  public HeapLRUController(EvictionCounters evictionCounters, EvictionAction evictionAction,
+      ObjectSizer sizer, EvictionAlgorithm algorithm) {
+    super(evictionCounters, evictionAction, sizer, algorithm);
-  /**
-   * Indicate what kind of {@code AbstractEvictionController} this helper implements
-   */
-  public org.apache.geode.cache.EvictionAlgorithm getEvictionAlgorithm() {
-    return org.apache.geode.cache.EvictionAlgorithm.LRU_HEAP;
-  }
-
-  /**
-   * As far as we're concerned all entries have the same size
-   */
-  @Override
-  public int entrySize(Object key, Object value) throws IllegalArgumentException {
+  public int entrySize(Object key, Object value) {
-    int size = HeapLRUController.this.getPerEntryOverhead();
+    int size = getPerEntryOverhead();
-  @Override
-  public EvictionStatistics initStats(Object region, StatisticsFactory statsFactory) {
-    setRegionName(region);
-    InternalEvictionStatistics stats =
-        new EvictionStatisticsImpl(statsFactory, getRegionName(), this);
-    setStatistics(stats);
-    return stats;
-  }
-
-  @Override
-  public StatisticsType getStatisticsType() {
-    return statType;
-  }
-
-  @Override
-  public String getStatisticsName() {
-    return "HeapLRUStatistics";
-  }
-
-  @Override
-  public int getLimitStatId() {
-    throw new UnsupportedOperationException("Limit not used with this LRU type");
-  }
-
-  @Override
-  public int getCountStatId() {
-    return statType.nameToId("entryBytes");
-  }
-
-  @Override
-  public int getEvictionsStatId() {
-    return statType.nameToId("lruEvictions");
-  }
-
-  @Override
-  public int getDestroysStatId() {
-    return statType.nameToId("lruDestroys");
-  }
-
-  @Override
-  public int getDestroysLimitStatId() {
-    return statType.nameToId("lruDestroysLimit");
-  }
-
-  @Override
-  public int getEvaluationsStatId() {
-    return statType.nameToId("lruEvaluations");
-  }
-
-  @Override
-  public int getGreedyReturnsStatId() {
-    return statType.nameToId("lruGreedyReturns");
-  }
-
-  public boolean mustEvict(EvictionStatistics stats, InternalRegion region, int delta) {
+  public boolean mustEvict(EvictionCounters stats, InternalRegion region, int delta) {
-  public boolean lruLimitExceeded(EvictionStatistics stats, DiskRegionView diskRegionView) {
+  public boolean lruLimitExceeded(EvictionCounters stats, DiskRegionView diskRegionView) {
-
-  public int getPerEntryOverhead() {
-    return perEntryOverhead;
-  }
-
-  public void setEntryOverHead(int entryOverHead) {
-    this.perEntryOverhead = entryOverHead;
-  }
