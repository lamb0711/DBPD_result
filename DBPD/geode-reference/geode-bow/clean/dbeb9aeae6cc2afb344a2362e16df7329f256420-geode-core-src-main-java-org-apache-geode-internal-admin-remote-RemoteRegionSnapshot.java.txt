Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    this.name = r.getName();    
+    this.name = r.getName();
-  public long getLastModifiedTime() {     
+  public long getLastModifiedTime() {
-  
+
-//     if (rUserAttributes != null) {
-//       Iterator it = rUserAttributes.entrySet().iterator();
-//       while (it.hasNext()) {
-//         Map.Entry me = (Map.Entry)it.next();
-//         result.setUserAttribute(me.getKey(), me.getValue());
-//       }
-//     }
+    // if (rUserAttributes != null) {
+    // Iterator it = rUserAttributes.entrySet().iterator();
+    // while (it.hasNext()) {
+    // Map.Entry me = (Map.Entry)it.next();
+    // result.setUserAttribute(me.getKey(), me.getValue());
+    // }
+    // }
-//  private String getDesc(Object o) {
-//    if (o == null) {
-//      return "";
-//    } else {
-//      return o.getClass().getName();
-//    }
-//  }
+  // private String getDesc(Object o) {
+  // if (o == null) {
+  // return "";
+  // } else {
+  // return o.getClass().getName();
+  // }
+  // }
-    if (other == this) return true;
+    if (other == this)
+      return true;
-      RemoteRegionSnapshot snap = (RemoteRegionSnapshot)other;
+      RemoteRegionSnapshot snap = (RemoteRegionSnapshot) other;
-    return false;    
+    return false;
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.stats = (RemoteCacheStatistics)DataSerializer.readObject(in);
-    this.attributes = (RemoteRegionAttributes)DataSerializer.readObject(in);
+    this.stats = (RemoteCacheStatistics) DataSerializer.readObject(in);
+    this.attributes = (RemoteRegionAttributes) DataSerializer.readObject(in);
