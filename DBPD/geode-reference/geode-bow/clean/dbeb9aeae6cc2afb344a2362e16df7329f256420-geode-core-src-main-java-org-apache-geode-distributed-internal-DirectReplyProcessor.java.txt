Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A reply processor optimized for direct ack responses (It skips synchronization,
- * doesn't register with the processor keeper, etc.)
+ * A reply processor optimized for direct ack responses (It skips synchronization, doesn't register
+ * with the processor keeper, etc.)
-   * Creates a new <code>ReplyProcessor</code> that wants replies from
-   * a single member of a distributed system.
+   * Creates a new <code>ReplyProcessor</code> that wants replies from a single member of a
+   * distributed system.
-  public DirectReplyProcessor(InternalDistributedSystem system,
-                          InternalDistributedMember member) {
+  public DirectReplyProcessor(InternalDistributedSystem system, InternalDistributedMember member) {
-   * Creates a new <code>ReplyProcessor</code> that wants replies from
-   * a single member of a distributed system.
+   * Creates a new <code>ReplyProcessor</code> that wants replies from a single member of a
+   * distributed system.
-   * @param cancelCriterion optional CancelCriterion to use; will use the 
-   *  DistributionManager if null
+   * @param cancelCriterion optional CancelCriterion to use; will use the DistributionManager if
+   *        null
-  public DirectReplyProcessor(InternalDistributedSystem system,
-                          InternalDistributedMember member,
-                          CancelCriterion cancelCriterion) {
+  public DirectReplyProcessor(InternalDistributedSystem system, InternalDistributedMember member,
+      CancelCriterion cancelCriterion) {
-   * Creates a new <code>ReplyProcessor</code> that wants replies from
-   * a single member of a distributed system.
+   * Creates a new <code>ReplyProcessor</code> that wants replies from a single member of a
+   * distributed system.
-  public DirectReplyProcessor(DM dm, 
-                          InternalDistributedMember member) {
+  public DirectReplyProcessor(DM dm, InternalDistributedMember member) {
-  
+
-   * Creates a new <code>ReplyProcessor</code> that wants replies from
-   * some number of members of a distributed system. Call this method
-   * with {@link DistributionManager#getDistributionManagerIds} if
-   * you want replies from all DMs including the one hosted in this
-   * VM.
+   * Creates a new <code>ReplyProcessor</code> that wants replies from some number of members of a
+   * distributed system. Call this method with {@link DistributionManager#getDistributionManagerIds}
+   * if you want replies from all DMs including the one hosted in this VM.
-  public DirectReplyProcessor(DM dm,
-                          Collection initMembers) {
+  public DirectReplyProcessor(DM dm, Collection initMembers) {
-  
+
-   * Creates a new <code>ReplyProcessor</code> that wants replies from
-   * some number of members of a distributed system. Call this method
-   * with {@link DistributionManager#getDistributionManagerIds} if
-   * you want replies from all DMs including the one hosted in this
-   * VM.
+   * Creates a new <code>ReplyProcessor</code> that wants replies from some number of members of a
+   * distributed system. Call this method with {@link DistributionManager#getDistributionManagerIds}
+   * if you want replies from all DMs including the one hosted in this VM.
-  public DirectReplyProcessor(InternalDistributedSystem system,
-                          Collection initMembers) {
+  public DirectReplyProcessor(InternalDistributedSystem system, Collection initMembers) {
-  
+
-   * Creates a new <code>ReplyProcessor</code> that wants replies from
-   * some number of members of a distributed system. Call this method
-   * with {@link DistributionManager#getDistributionManagerIds} if
-   * you want replies from all DMs including the one hosted in this
-   * VM.
+   * Creates a new <code>ReplyProcessor</code> that wants replies from some number of members of a
+   * distributed system. Call this method with {@link DistributionManager#getDistributionManagerIds}
+   * if you want replies from all DMs including the one hosted in this VM.
-   * @param cancelCriterion optional CancelCriterion to use; will use the 
-   * DistributedSystem's DistributionManager if null
+   * @param cancelCriterion optional CancelCriterion to use; will use the DistributedSystem's
+   *        DistributionManager if null
-  public DirectReplyProcessor(InternalDistributedSystem system,
-                          Collection initMembers,
-                          CancelCriterion cancelCriterion) {
+  public DirectReplyProcessor(InternalDistributedSystem system, Collection initMembers,
+      CancelCriterion cancelCriterion) {
-  
+
-  public DirectReplyProcessor(DM dm, InternalDistributedSystem system,
-      Collection initMembers, CancelCriterion cancelCriterion) {
+  public DirectReplyProcessor(DM dm, InternalDistributedSystem system, Collection initMembers,
+      CancelCriterion cancelCriterion) {
-  
+
-    if(processorId != 0) {
+    if (processorId != 0) {
-    if(isExpectingDirectReply()) {
+    if (isExpectingDirectReply()) {
-    if(isExpectingDirectReply()) {
+    if (isExpectingDirectReply()) {
-  
+
-    if(processorId != 0) {
+    if (processorId != 0) {
-  
-  
-  
-  
+
+
