GEODE-7592: Simplify startManager() precondition checks (#4510)

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* LGTM complained about a possible NPE in startManager(). There was no
possibility of an NPE, but precondition-checking code was overly
complex, and difficult for LGTM and humans to analyze.

* Adding the tests required injecting several dependencies.
+import java.util.function.BiFunction;
+import java.util.function.Function;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
+  private final Function<SystemManagementService, LocalManager> localManagerFactory;
-    return new SystemManagementService(cache).init();
+    return newSystemManagementService(cache, NotificationHub::new,
+        SystemManagementService::createLocalManager,
+        createFederatingManagerFactory(), ManagementAgent::new);
-  private SystemManagementService(InternalCacheForClientAccess cache) {
+  @VisibleForTesting
+  static BaseManagementService newSystemManagementService(InternalCacheForClientAccess cache,
+      Function<ManagementResourceRepo, NotificationHub> notificationHubFactory,
+      Function<SystemManagementService, LocalManager> localManagerFactory,
+      FederatingManagerFactory federatingManagerFactory,
+      BiFunction<DistributionConfig, InternalCacheForClientAccess, ManagementAgent> managementAgentFactory) {
+    return new SystemManagementService(cache, notificationHubFactory, localManagerFactory,
+        federatingManagerFactory, managementAgentFactory).init();
+  }
+
+  private SystemManagementService(InternalCacheForClientAccess cache,
+      Function<ManagementResourceRepo, NotificationHub> notificationHubFactory,
+      Function<SystemManagementService, LocalManager> localManagerFactory,
+      FederatingManagerFactory federatingManagerFactory,
+      BiFunction<DistributionConfig, InternalCacheForClientAccess, ManagementAgent> managementAgentFactory) {
+    this.localManagerFactory = localManagerFactory;
-    notificationHub = new NotificationHub(repo);
+    notificationHub = notificationHubFactory.apply(repo);
-      agent = new ManagementAgent(system.getConfig(), cache);
+      agent = managementAgentFactory.apply(system.getConfig(), cache);
-    federatingManagerFactory = createFederatingManagerFactory();
+    this.federatingManagerFactory = federatingManagerFactory;
-      boolean needsToBeStarted = false;
-        needsToBeStarted = true;
-      } else if (!federatingManager.isRunning()) {
-        needsToBeStarted = true;
-      if (needsToBeStarted) {
-        boolean started = false;
-        try {
-          system.handleResourceEvent(ResourceEvent.MANAGER_START, null);
-          federatingManager.startManager();
-          if (agent != null) {
-            agent.startAgent();
+      boolean started = false;
+      try {
+        system.handleResourceEvent(ResourceEvent.MANAGER_START, null);
+        federatingManager.startManager();
+        if (agent != null) {
+          agent.startAgent();
+        }
+        cache.getJmxManagerAdvisor().broadcastChange();
+        started = true;
+      } catch (RuntimeException | Error e) {
+        logger.error("Jmx manager could not be started because {}", e.getMessage(), e);
+        throw e;
+      } finally {
+        if (!started) {
+          if (federatingManager != null) {
+            federatingManager.stopManager();
-          cache.getJmxManagerAdvisor().broadcastChange();
-          started = true;
-        } catch (RuntimeException | Error e) {
-          logger.error("Jmx manager could not be started because {}", e.getMessage(), e);
-          throw e;
-        } finally {
-          if (!started) {
-            if (federatingManager != null) {
-              federatingManager.stopManager();
-            }
-            system.handleResourceEvent(ResourceEvent.MANAGER_STOP, null);
-          }
+          system.handleResourceEvent(ResourceEvent.MANAGER_STOP, null);
-      localManager =
-          new LocalManager(repo, system, this, cache, statisticsFactory, statisticsClock);
+      localManager = localManagerFactory.apply(this);
+  private static LocalManager createLocalManager(SystemManagementService service) {
+    return service.newLocalManager();
+  }
+
+  private LocalManager newLocalManager() {
+    return new LocalManager(repo, system, this, cache, statisticsFactory, statisticsClock);
+  }
+
