GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicReference;
+
-    return assertSuccessful(transport
-        .submitMessage(config, CommandType.CREATE, ClusterManagementRealizationResult.class));
+    ClusterManagementRealizationResult result = transport.submitMessage(config, CommandType.CREATE);
+    assertSuccessful(result);
+    return result;
-    return assertSuccessful(transport.submitMessage(config, CommandType.DELETE,
-        ClusterManagementRealizationResult.class));
+    ClusterManagementRealizationResult result = transport.submitMessage(config, CommandType.DELETE);
+    assertSuccessful(result);
+    return result;
-    return assertSuccessful(
-        transport.submitMessageForList(config, ClusterManagementListResult.class));
+    ClusterManagementListResult<T, R> result = transport.submitMessageForList(config);
+    assertSuccessful(result);
+    return result;
-    return assertSuccessful(
-        transport.submitMessageForGet(config, ClusterManagementGetResult.class));
+    ClusterManagementGetResult<T, R> result = transport.submitMessageForGet(config);
+    assertSuccessful(result);
+    return result;
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> start(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> start(
-    return transport.submitMessageForStart(op);
+    ClusterManagementOperationResult<A, V> result = transport.submitMessageForStart(op);
+    assertSuccessful(result);
+    return result;
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> list(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<A, V> get(
+      A opType, String opId) {
+    ClusterManagementOperationResult<A, V> result =
+        transport.submitMessageForGetOperation(opType, opId);
+    assertSuccessful(result);
+    return result;
+  }
+
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> CompletableFuture<ClusterManagementOperationResult<A, V>> getFuture(
+      A opType, String opId) {
+    AtomicReference<CompletableFuture<ClusterManagementOperationResult<A, V>>> futureAtomicReference =
+        new AtomicReference<>();
+    futureAtomicReference.set(CompletableFuture.supplyAsync(() -> {
+      while (futureAtomicReference.get() == null || !futureAtomicReference.get().isCancelled()) {
+        ClusterManagementOperationResult<A, V> result = this.get(opType, opId);
+        if (result.getOperationEnd() != null) {
+          return result;
+        }
+        try {
+          Thread.sleep(1000L);
+        } catch (InterruptedException e) {
+          throw new ClusterManagementException(result, e);
+        }
+      }
+      return null;
+    }));
+    return futureAtomicReference.get();
+  }
+
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<A, V> list(
-    return transport.submitMessageForListOperation(opType,
-        ClusterManagementListOperationsResult.class);
+    ClusterManagementListOperationsResult<A, V> result =
+        transport.submitMessageForListOperation(opType);
+    assertSuccessful(result);
+    return result;
-  private <T extends ClusterManagementResult> T assertSuccessful(T result) {
+  private void assertSuccessful(ClusterManagementResult result) {
-    return result;
