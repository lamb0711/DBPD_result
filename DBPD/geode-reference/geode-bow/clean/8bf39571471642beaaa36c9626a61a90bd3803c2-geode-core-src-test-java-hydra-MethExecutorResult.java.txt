Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-*
-* The result of a MethExecutor execute method.
-*
-*/
+ *
+ * The result of a MethExecutor execute method.
+ *
+ */
-  /** A "result" object that indicates that an exception occurred
-   * while invoking the method */
-  public static final Serializable EXCEPTION_OCCURRED = new
-    Serializable() {
-      public boolean equals(Object o) {
-        // Allows instances to be compared across VMs
-        return o != null && this.getClass().equals(o.getClass());
-      }
+  /**
+   * A "result" object that indicates that an exception occurred while invoking the method
+   */
+  public static final Serializable EXCEPTION_OCCURRED = new Serializable() {
+    public boolean equals(Object o) {
+      // Allows instances to be compared across VMs
+      return o != null && this.getClass().equals(o.getClass());
+    }
-      public String toString() {
-        return "EXCEPTION_OCCURRED";
-      }
-    };
+    public String toString() {
+      return "EXCEPTION_OCCURRED";
+    }
+  };
-  /** A "exception" object that indicates that an exception could not
-   * be serialized. */
-  public static final Throwable NONSERIALIZABLE_EXCEPTION = new
-    Throwable() {
-      public boolean equals(Object o) {
-        // Allows instances to be compared across VMs
-        return o != null && this.getClass().equals(o.getClass());
-      }
+  /**
+   * A "exception" object that indicates that an exception could not be serialized.
+   */
+  public static final Throwable NONSERIALIZABLE_EXCEPTION = new Throwable() {
+    public boolean equals(Object o) {
+      // Allows instances to be compared across VMs
+      return o != null && this.getClass().equals(o.getClass());
+    }
-      public String toString() {
-        return "NONSERIALIZABLE_EXCEPTION";
-      }
-    };
+    public String toString() {
+      return "NONSERIALIZABLE_EXCEPTION";
+    }
+  };
-  ////////////////////  Instance Methods  ///////////////////////////
+  //////////////////// Instance Methods ///////////////////////////
-  public MethExecutorResult( Object result ) {
+  public MethExecutorResult(Object result) {
-   * This constructor is invoked when invoking a method resulted in an
-   * exception being thrown.  The "result" is set to {@link
-   * #EXCEPTION_OCCURRED}.  If the exception could not be serialized,
-   * {@link #getException()} will return IOException with the exception
-   * stack as the message.
+   * This constructor is invoked when invoking a method resulted in an exception being thrown. The
+   * "result" is set to {@link #EXCEPTION_OCCURRED}. If the exception could not be serialized,
+   * {@link #getException()} will return IOException with the exception stack as the message.
-    s.append( this.getResult() );
-    s.append( "\n" );
-    if ( this.getStackTrace() != null ) {
-      s.append( this.getStackTrace() );
+    s.append(this.getResult());
+    s.append("\n");
+    if (this.getStackTrace() != null) {
+      s.append(this.getStackTrace());
-   * Returns the result of the method call.  If an exception was
-   * thrown during the method call, {@link #EXCEPTION_OCCURRED} is
-   * returned.
+   * Returns the result of the method call. If an exception was thrown during the method call,
+   * {@link #EXCEPTION_OCCURRED} is returned.
-   * Returns the name of the exception class of the exception that
-   * was thrown while invoking a method.  If no exception was thrown,
-   * <code>null</code> is returned.
+   * Returns the name of the exception class of the exception that was thrown while invoking a
+   * method. If no exception was thrown, <code>null</code> is returned.
-   * Returns the message of the exception that was thrown while
-   * invoking a method.  If no exception was thrown, <code>null</code>
-   * is returned.
+   * Returns the message of the exception that was thrown while invoking a method. If no exception
+   * was thrown, <code>null</code> is returned.
-   * Returns the stack trace of the exception that was thrown while
-   * invoking a method.  If no exception was thrown, <code>null</code>
-   * is returned.
+   * Returns the stack trace of the exception that was thrown while invoking a method. If no
+   * exception was thrown, <code>null</code> is returned.
-   * Returns the exception that was thrown while invoking a method.
-   * If the exception could not be serialized, then {@link
-   * #NONSERIALIZABLE_EXCEPTION} is returned.  If no exception was
-   * thrown, <code>null</code> is returned.
+   * Returns the exception that was thrown while invoking a method. If the exception could not be
+   * serialized, then {@link #NONSERIALIZABLE_EXCEPTION} is returned. If no exception was thrown,
+   * <code>null</code> is returned.
-   * Returns whether or not an exception occurred while invoking the
-   * method 
+   * Returns whether or not an exception occurred while invoking the method
