Merge branch 'release/1.5.0'

-import java.util.Arrays;
-import java.util.List;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.cache.DistributedPutAllOperation.PutAllEntryData;
-import org.apache.geode.internal.cache.DistributedRemoveAllOperation.RemoveAllEntryData;
-  protected HashMap<DistributedMember, DistTXCoordinatorInterface> target2realDeals =
+  private final HashMap<DistributedMember, DistTXCoordinatorInterface> target2realDeals =
-  private HashMap<LocalRegion, DistributedMember> rrTargets;
-  private Set<DistributedMember> txRemoteParticpants = null; // other than local
-  protected HashMap<String, ArrayList<DistTxThinEntryState>> txEntryEventMap = null;
-  public DistTXStateProxyImplOnCoordinator(TXManagerImpl managerImpl, TXId id,
+  private HashMap<LocalRegion, DistributedMember> rrTargets;
+
+  private Set<DistributedMember> txRemoteParticpants = null; // other than local
+
+  private HashMap<String, ArrayList<DistTxThinEntryState>> txEntryEventMap = null;
+
+  public DistTXStateProxyImplOnCoordinator(InternalCache cache, TXManagerImpl managerImpl, TXId id,
-    super(managerImpl, id, clientMember);
+    super(cache, managerImpl, id, clientMember);
-  public DistTXStateProxyImplOnCoordinator(TXManagerImpl managerImpl, TXId id, boolean isjta) {
-    super(managerImpl, id, isjta);
+  public DistTXStateProxyImplOnCoordinator(InternalCache cache, TXManagerImpl managerImpl, TXId id,
+      boolean isjta) {
+    super(cache, managerImpl, id, isjta);
-        // [DISTTX] TODO Handle this exception well
-    } catch (CommitConflictException e) {
-      throw e;
-      // [DISTTX] TODO What about rollback exceptions?
-    final GemFireCacheImpl cache =
-        GemFireCacheImpl.getExisting("getSecondariesAndReplicasForTxOps");
-        cache.getInternalDistributedSystem().getDistributedMember();
+        getCache().getInternalDistributedSystem().getDistributedMember();
-    final GemFireCacheImpl cache = GemFireCacheImpl.getExisting("Applying Dist TX Rollback");
-    final DM dm = cache.getDistributionManager();
+    final DistributionManager dm = getCache().getDistributionManager();
-          this.realDeal = new DistClientTXStateStub(this, target, r);
+          this.realDeal =
+              new DistClientTXStateStub(r.getCache(), r.getDistributionManager(), this, target, r);
-  private Set<DistributedMember> getTxRemoteParticpants(final DM dm) {
+  private Set<DistributedMember> getTxRemoteParticpants(final DistributionManager dm) {
-    final GemFireCacheImpl cache = GemFireCacheImpl.getExisting("Applying Dist TX Precommit");
-    final DM dm = cache.getDistributionManager();
+    final DistributionManager dm = getCache().getDistributionManager();
-    final GemFireCacheImpl cache = GemFireCacheImpl.getExisting("Applying Dist TX Commit");
-    final DM dm = cache.getDistributionManager();
+    final DistributionManager dm = getCache().getDistributionManager();
-              Operation.PUTALL_CREATE, key, putallOp.putAllData[i].getValue());
+              Operation.PUTALL_CREATE, key, putallOp.putAllData[i].getValue(region.getCache()));
-      GemFireCacheImpl cache = GemFireCacheImpl.getExisting("getOwnerForKey");
-      m = cache.getDistributedSystem().getDistributedMember();
+      m = getCache().getDistributedSystem().getDistributedMember();
