Merge branch 'release/1.0.0-incubating.M1'

- * =========================================================================
- *  Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- *  This product is protected by U.S. and international copyright
- *  and intellectual property laws. Pivotal products are covered by
- *  more patents listed at http://www.pivotal.io/patents.
- * ========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import jline.ConsoleReader;
+import jline.console.ConsoleReader;
+  private       boolean           supressScriptCmdOutput;
+  private       boolean           isScriptRunning;
+          instance.executeInitFileIfPresent();
+  /* If an init file is provided, as a system property or in the default
+   * location, run it as a command script.
+   */
+  private void executeInitFileIfPresent() {
+
+    String initFileName = this.gfshConfig.getInitFileName();
+    if (initFileName != null) {
+      this.gfshFileLogger.info("Using " + initFileName);
+      try {
+        File gfshInitFile = new File(initFileName);
+        boolean continueOnError = false;
+        this.executeScript(gfshInitFile, isQuietMode(), continueOnError);
+      } catch (Exception exception) {
+        this.gfshFileLogger.severe(initFileName, exception);
+        setLastExecutionStatus(-1);
+      }
+    }
+
+  }
+
-  @Override
-  public boolean executeCommand(final String line) {
+  public boolean executeScriptLine(final String line) {
-      success = super.executeCommand(withPropsExpanded);
+      success = super.executeScriptLine(withPropsExpanded);
-          while (commandResult.hasNextLine()) {
-            write(commandResult.nextLine(), isError);
+          if (!isScriptRunning) {
+            // Normal Command
+            while (commandResult.hasNextLine()) {
+              write(commandResult.nextLine(), isError);
+            }
+          } else if (!supressScriptCmdOutput) {
+            // Command is part of script. Show output only when quite=false
+            while (commandResult.hasNextLine()) {
+              write(commandResult.nextLine(), isError);
+            }
-        } 
+        }
-    return terminal != null ? terminal.getTerminalHeight() : DEFAULT_HEIGHT;
+    return terminal != null ? terminal.getHeight() : DEFAULT_HEIGHT;
-      return terminal.getTerminalWidth();
+      return terminal.getWidth();
+      this.isScriptRunning = true;  
+      } else if (!scriptFile.exists()) {
+        throw new IllegalArgumentException("Given script file does not exist.");
+        this.supressScriptCmdOutput = quiet;
-                boolean executeSuccess = executeCommand(cmdLet);
+                boolean executeSuccess = executeScriptLine(cmdLet);
+      this.isScriptRunning = false;
-        reader.printNewline();
+        reader.println();
+      if (commandAndStatus.status.equals("FAILED")) {
+        compositeResultData.setStatus(com.gemstone.gemfire.management.cli.Result.Status.ERROR);
+      }
