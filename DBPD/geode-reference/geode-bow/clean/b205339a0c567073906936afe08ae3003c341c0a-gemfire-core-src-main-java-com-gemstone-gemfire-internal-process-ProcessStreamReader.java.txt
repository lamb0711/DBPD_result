Merge branch 'feature/GEODE-8' into develop

-import com.gemstone.gemfire.LogWriter;
-import com.gemstone.gemfire.internal.logging.InternalLogWriter;
-import com.gemstone.gemfire.internal.logging.LocalLogWriter;
-public final class ProcessStreamReader implements Runnable {
+public abstract class ProcessStreamReader implements Runnable {
-  private final InputStream inputStream;
-  private final InputListener listener;
+  protected final Process process;
+  protected final InputStream inputStream;
+  protected final InputListener inputListener;
-  public ProcessStreamReader(final InputStream inputStream) {
-    this.inputStream = inputStream;
-    this.listener = new InputListener() {
-      @Override
-      public void notifyInputLine(String line) {
-        // do nothing
-      }
-      @Override
-      public String toString() {
-        return "NullInputListener";
-      }
-    };
+  protected ProcessStreamReader(final Builder builder) {
+    this.process = builder.process;
+    this.inputStream = builder.inputStream;
+    if (builder.inputListener == null) {
+      this.inputListener = new InputListener() {
+        @Override
+        public void notifyInputLine(String line) {
+          // do nothing
+        }
+        @Override
+        public String toString() {
+          return "NullInputListener";
+        }
+      };
+    } else {
+      this.inputListener = builder.inputListener;
+    }
-
-  public ProcessStreamReader(final InputStream inputStream, final InputListener listener) {
-    this.inputStream = inputStream;
-    this.listener = listener;
-  }
-
+  
-        this.listener.notifyInputLine(line);
+        this.inputListener.notifyInputLine(line);
+        this.thread.setDaemon(true);
+
+  public ProcessStreamReader stopAsync(final long delayMillis) {
+    Runnable delayedStop = new Runnable() {
+      @Override
+      public void run() {
+        try {
+          Thread.sleep(delayMillis);
+        } catch (InterruptedException e) {
+        } finally {
+          stop();
+        }
+      }
+    };
+    String threadName = getClass().getSimpleName() + " stopAfterDelay Thread @" + Integer.toHexString(hashCode());
+    Thread thread = new Thread(delayedStop, threadName);
+    thread.setDaemon(true);
+    thread.start();
+    return this;
+  }
-    sb.append(" listener=").append(this.listener);
+    sb.append(" listener=").append(this.inputListener);
+
+  /** Default ReadingMode is BLOCKING */
+  public static enum ReadingMode {
+    BLOCKING,
+    NON_BLOCKING;
+  }
+  
+  /**
+   * Builds a ProcessStreamReader.
+   * 
+   * @author Kirk Lund
+   * @since 8.2
+   */
+  public static class Builder {
+    protected Process process;
+    protected InputStream inputStream;
+    protected InputListener inputListener;
+    protected long continueReadingMillis = 0;
+    protected ReadingMode readingMode = ReadingMode.BLOCKING;
+    
+    public Builder(final Process process) {
+      this.process = process;
+    }
+    
+    public Builder inputStream(final InputStream inputStream) {
+      this.inputStream = inputStream;
+      return this;
+    }
+    
+    /** InputListener callback to invoke with read data */
+    public Builder inputListener(final InputListener inputListener) {
+      this.inputListener = inputListener;
+      return this;
+    }
+    
+    /** millis to continue reading InputStream after Process terminates */
+    public Builder continueReadingMillis(final long continueReadingMillis) {
+      this.continueReadingMillis = continueReadingMillis;
+      return this;
+    }
+    
+    /** ReadingMode to use for reading InputStream */
+    public Builder readingMode(final ReadingMode readingMode) {
+      this.readingMode = readingMode;
+      return this;
+    }
+    
+    public ProcessStreamReader build() {
+      if (process == null) {
+        throw new NullPointerException("process may not be null");
+      }
+      if (inputStream == null) {
+        throw new NullPointerException("inputStream may not be null");
+      }
+      if (continueReadingMillis < 0) {
+        throw new IllegalArgumentException("continueReadingMillis must zero or positive");
+      }
+      switch (this.readingMode) {
+        case NON_BLOCKING: return new NonBlockingProcessStreamReader(this);
+        default: return new BlockingProcessStreamReader(this);
+      }
+    }
+  }
