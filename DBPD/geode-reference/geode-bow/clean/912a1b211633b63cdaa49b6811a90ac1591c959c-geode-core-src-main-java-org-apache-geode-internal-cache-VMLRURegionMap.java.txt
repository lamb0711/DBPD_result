GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-import org.apache.geode.cache.EvictionAlgorithm;
-import org.apache.geode.cache.Region;
-import org.apache.geode.internal.cache.RegionMap.Attributes;
-import org.apache.geode.internal.size.ReflectionSingleObjectSizer;
-          if (logger.isTraceEnabled(LogMarker.LRU)) {
-            logger.trace(LogMarker.LRU, "No eviction of transactional entry for key={}",
+          if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+            logger.trace(LogMarker.LRU_VERBOSE, "No eviction of transactional entry for key={}",
-          if (logger.isTraceEnabled(LogMarker.LRU)) {
-            logger.trace(LogMarker.LRU, "no need to evict already evicted key={}", entry.getKey());
+          if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+            logger.trace(LogMarker.LRU_VERBOSE, "no need to evict already evicted key={}",
+                entry.getKey());
-          if (logger.isTraceEnabled(LogMarker.LRU)) {
-            logger.trace(LogMarker.LRU, "no need to evict {} token for key={}", entryVal,
+          if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+            logger.trace(LogMarker.LRU_VERBOSE, "no need to evict {} token for key={}", entryVal,
-          // if(bucketRegion.getBucketAdvisor().isPrimary()){
-          // }
-        if (logger.isTraceEnabled(LogMarker.LRU)) {
-          logger.trace(LogMarker.LRU,
+        if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+          logger.trace(LogMarker.LRU_VERBOSE,
-      if (logger.isTraceEnabled(LogMarker.LRU)) {
-        logger.trace(LogMarker.LRU, "total lru size is now: {}", getTotalEntrySize());
+      if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+        logger.trace(LogMarker.LRU_VERBOSE, "total lru size is now: {}", getTotalEntrySize());
-    final boolean isDebugEnabled_LRU = logger.isTraceEnabled(LogMarker.LRU);
+    final boolean isDebugEnabled_LRU = logger.isTraceEnabled(LogMarker.LRU_VERBOSE);
-      logger.trace(LogMarker.LRU,
+      logger.trace(LogMarker.LRU_VERBOSE,
-                  logger.trace(LogMarker.LRU,
+                  logger.trace(LogMarker.LRU_VERBOSE,
-                  logger.trace(LogMarker.LRU, "evictions={}", stats.getEvictions());
+                  logger.trace(LogMarker.LRU_VERBOSE, "evictions={}", stats.getEvictions());
-                  logger.trace(LogMarker.LRU, "leaving evict loop early");
+                  logger.trace(LogMarker.LRU_VERBOSE, "leaving evict loop early");
-          logger.trace(LogMarker.LRU, "exception ={}", e.getCause().getMessage(), e.getCause());
+          logger.trace(LogMarker.LRU_VERBOSE, "exception ={}", e.getCause().getMessage(),
+              e.getCause());
-                logger.trace(LogMarker.LRU,
+                logger.trace(LogMarker.LRU_VERBOSE,
-                logger.trace(LogMarker.LRU, "evictions={}", stats.getEvictions());
+                logger.trace(LogMarker.LRU_VERBOSE, "evictions={}", stats.getEvictions());
-                logger.trace(LogMarker.LRU, "leaving evict loop early");
+                logger.trace(LogMarker.LRU_VERBOSE, "leaving evict loop early");
-      logger.trace(LogMarker.LRU, "callback complete.  LRU size is now {}",
+      logger.trace(LogMarker.LRU_VERBOSE, "callback complete.  LRU size is now {}",
-    final boolean isDebugEnabled_LRU = logger.isTraceEnabled(LogMarker.LRU);
+    final boolean isDebugEnabled_LRU = logger.isTraceEnabled(LogMarker.LRU_VERBOSE);
-      logger.trace(LogMarker.LRU, "centralLruUpdateCallback: lru size is now {}, limit is: {}",
-          getTotalEntrySize(), getLimit());
+      logger.trace(LogMarker.LRU_VERBOSE,
+          "centralLruUpdateCallback: lru size is now {}, limit is: {}", getTotalEntrySize(),
+          getLimit());
-              logger.trace(LogMarker.LRU, "leaving evict loop early");
+              logger.trace(LogMarker.LRU_VERBOSE, "leaving evict loop early");
-        logger.trace(LogMarker.LRU, "exception ={}", e.getCause().getMessage(), e.getCause());
+        logger.trace(LogMarker.LRU_VERBOSE, "exception ={}", e.getCause().getMessage(),
+            e.getCause());
-      logger.trace(LogMarker.LRU, "callback complete");
+      logger.trace(LogMarker.LRU_VERBOSE, "callback complete");
-    if (logger.isTraceEnabled(LogMarker.LRU)) {
-      logger.trace(LogMarker.LRU, "updateStats - delta is: {} total is: {} limit is: {}", delta,
-          getTotalEntrySize(), getLimit());
+    if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+      logger.trace(LogMarker.LRU_VERBOSE, "updateStats - delta is: {} total is: {} limit is: {}",
+          delta, getTotalEntrySize(), getLimit());
-    // Assert.assertFalse(e._getValue() instanceof DiskEntry.RecoveredEntry)
-    if (logger.isTraceEnabled(LogMarker.LRU)) {
-      logger.trace(LogMarker.LRU,
+    if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+      logger.trace(LogMarker.LRU_VERBOSE,
-    // this.lruCreatedKey = re.getKey(); // [ bruce ] for DEBUGGING only
-    if (logger.isTraceEnabled(LogMarker.LRU)) {
-      logger.trace(LogMarker.LRU,
+    if (logger.isTraceEnabled(LogMarker.LRU_VERBOSE)) {
+      logger.trace(LogMarker.LRU_VERBOSE,
-    // if (this.lruCreatedKey == re.getKey()) {
-    // String method = Thread.currentThread().getStackTrace()[5].getMethodName();
-    // }
-    // boolean wasEvicted = e.testEvicted();
-    /* boolean removed = */
-    // if (removed || wasEvicted) { // evicted entries have already been removed from the list
-    // } else if (debug) {
-    // debugLogging("entry not removed from LRU list");
-    // }
-
