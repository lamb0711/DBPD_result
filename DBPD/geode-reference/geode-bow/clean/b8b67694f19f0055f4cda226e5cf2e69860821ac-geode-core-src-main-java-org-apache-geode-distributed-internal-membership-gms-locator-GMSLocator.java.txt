Merge branch 'develop' into feature/GEODE-7049

+import java.io.DataInputStream;
+import java.io.DataOutputStream;
-import java.io.ObjectInput;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.cache.GemFireCache;
-import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.InternalConfigurationPersistenceService;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember.InternalDistributedMemberWrapper;
-import org.apache.geode.distributed.internal.membership.MembershipManager;
-import org.apache.geode.distributed.internal.membership.NetView;
+import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.GMSMembershipView;
-import org.apache.geode.distributed.internal.membership.gms.NetLocator;
-import org.apache.geode.distributed.internal.membership.gms.mgr.GMSMembershipManager;
-import org.apache.geode.distributed.internal.tcpserver.TcpServer;
-import org.apache.geode.internal.Version;
-import org.apache.geode.internal.VersionedObjectInput;
+import org.apache.geode.internal.InternalDataSerializer;
+import org.apache.geode.internal.serialization.Version;
+import org.apache.geode.internal.serialization.VersionedDataInputStream;
-public class GMSLocator implements Locator, NetLocator {
+public class GMSLocator implements Locator {
-  private final Set<InternalDistributedMember> registrants = new HashSet<>();
-  private final Map<InternalDistributedMemberWrapper, byte[]> publicKeys =
+  private final Set<GMSMember> registrants = new HashSet<>();
+  private final Map<GMSMember.GMSMemberWrapper, byte[]> publicKeys =
-  private InternalDistributedMember localAddress;
+  private GMSMember localAddress;
-  private NetView view;
+  private GMSMembershipView view;
-  private NetView recoveredView;
+  private GMSMembershipView recoveredView;
-  @Override
-  public synchronized boolean setMembershipManager(MembershipManager mgr) {
+  public synchronized boolean setServices(Services pservices) {
-      services = ((GMSMembershipManager) mgr).getServices();
+      services = pservices;
-      NetView newView = services.getJoinLeave().getView();
+      GMSMembershipView newView = services.getJoinLeave().getView();
-  @Override
-  public void init(TcpServer server) throws InternalGemFireException {
+  public void init(String persistentFileIdentifier) throws InternalGemFireException {
-      viewFile = workingDirectory.resolve("locator" + server.getPort() + "view.dat").toFile();
+      viewFile =
+          workingDirectory.resolve("locator" + persistentFileIdentifier + "view.dat").toFile();
-  public void installView(NetView view) {
+  public void installView(GMSMembershipView view) {
-  @Override
-        publicKeys.put(new InternalDistributedMemberWrapper(findRequest.getMemberID()),
+        publicKeys.put(new GMSMember.GMSMemberWrapper(findRequest.getMemberID()),
-    NetView responseView = view;
+    GMSMembershipView responseView = view;
-    InternalDistributedMember coordinator = null;
+    GMSMember coordinator = null;
-      InternalDistributedMember requestingMemberID = findRequest.getMemberID();
-      for (InternalDistributedMember id : responseView.getMembers()) {
+      GMSMember requestingMemberID = findRequest.getMemberID();
+      for (GMSMember id : responseView.getMembers()) {
-          NetView newView = new NetView(responseView, responseView.getViewId());
+          GMSMembershipView newView = new GMSMembershipView(responseView, responseView.getViewId());
-      Collection<InternalDistributedMember> rejections = findRequest.getRejectedCoordinators();
+      Collection<GMSMember> rejections = findRequest.getRejectedCoordinators();
-        for (InternalDistributedMember mbr : registrants) {
+        for (GMSMember mbr : registrants) {
-            if (!rejections.contains(mbr) && (mbr.getNetMember().preferredForCoordinator()
-                || !mbr.getNetMember().isNetworkPartitionDetectionEnabled())) {
+            if (!rejections.contains(mbr) && (mbr.preferredForCoordinator()
+                || !mbr.isNetworkPartitionDetectionEnabled())) {
-  private void saveView(NetView view) {
+  private void saveView(GMSMembershipView view) {
-    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(viewFile))) {
+    try (FileOutputStream fileStream = new FileOutputStream(viewFile);
+        ObjectOutputStream oos = new ObjectOutputStream(fileStream)) {
-      oos.writeInt(Version.CURRENT_ORDINAL);
-      DataSerializer.writeObject(view, oos);
+      oos.writeInt(Version.getCurrentVersion().ordinal());
+      oos.flush();
+      DataOutputStream dataOutputStream = new DataOutputStream(fileStream);
+      services.getSerializer().getObjectSerializer().writeObject(view, dataOutputStream);
-  @Override
-  @Override
-  public byte[] getPublicKey(InternalDistributedMember member) {
-    return publicKeys.get(new InternalDistributedMemberWrapper(member));
+  public byte[] getPublicKey(GMSMember member) {
+    return publicKeys.get(new GMSMember.GMSMemberWrapper(member));
-  @Override
-  public List<InternalDistributedMember> getMembers() {
+  public List<GMSMember> getMembers() {
-  @Override
-  public void restarting(DistributedSystem ds, GemFireCache cache,
-      InternalConfigurationPersistenceService sharedConfig) {
-    setMembershipManager(((InternalDistributedSystem) ds).getDM().getMembershipManager());
-  }
-
-    try (ObjectInput ois = new ObjectInputStream(new FileInputStream(file))) {
-      if (ois.readInt() != LOCATOR_FILE_STAMP) {
+    try (FileInputStream fileInputStream = new FileInputStream(file);
+        ObjectInputStream ois = new ObjectInputStream(fileInputStream)) {
+      int stamp = ois.readInt();
+      if (stamp != LOCATOR_FILE_STAMP) {
-      ObjectInput input = ois;
-      int version = input.readInt();
-      if (version != Version.CURRENT_ORDINAL) {
+      int version = ois.readInt();
+      int currentVersion = Version.getCurrentVersion().ordinal();
+      DataInputStream input = new DataInputStream(fileInputStream);
+      if (version != currentVersion) {
-        logger.info("Peer locator found that persistent view was written with {}", geodeVersion);
-        input = new VersionedObjectInput(input, geodeVersion);
+        logger.info("Peer locator found that persistent view was written with version {}",
+            geodeVersion);
+        if (version > currentVersion) {
+          return false;
+        }
+        input = new VersionedDataInputStream(ois, geodeVersion);
-      recoveredView = DataSerializer.readObject(input);
+      // TBD - services isn't available when we recover from disk so this will throw an NPE
+      // recoveredView = (GMSMembershipView) services.getSerializer().readDSFID(input);
+      recoveredView = (GMSMembershipView) InternalDataSerializer.readObject(input);
+
-      List<InternalDistributedMember> members = new ArrayList<>(recoveredView.getMembers());
+      List<GMSMember> members = new ArrayList<>(recoveredView.getMembers());
-      for (InternalDistributedMember member : members) {
-        if (member.getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE) {
+      for (GMSMember member : members) {
+        if (member.getVmKind() == GMSMember.LOCATOR_DM_TYPE) {
-    } catch (Exception e) {
+    } catch (Throwable e) {
