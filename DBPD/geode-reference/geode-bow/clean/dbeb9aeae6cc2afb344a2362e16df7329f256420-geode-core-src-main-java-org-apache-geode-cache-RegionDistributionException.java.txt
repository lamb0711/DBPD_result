Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * {@link MembershipAttributes#getRequiredRoles required roles} may have
- * failed.  Failure may be caused by departure of one or more required roles
- * while sending the message to them.  If the region scope is {@linkplain 
- * org.apache.geode.cache.Scope#DISTRIBUTED_NO_ACK DISTRIBUTED_NO_ACK} or
- * {@linkplain org.apache.geode.cache.Scope#GLOBAL GLOBAL} then failure
- * may be caused by one or more required roles not acknowledging receipt of
- * the message.
+ * {@link MembershipAttributes#getRequiredRoles required roles} may have failed. Failure may be
+ * caused by departure of one or more required roles while sending the message to them. If the
+ * region scope is {@linkplain org.apache.geode.cache.Scope#DISTRIBUTED_NO_ACK DISTRIBUTED_NO_ACK}
+ * or {@linkplain org.apache.geode.cache.Scope#GLOBAL GLOBAL} then failure may be caused by one or
+ * more required roles not acknowledging receipt of the message.
-private static final long serialVersionUID = -5950359426786805646L;
-  
-  /** 
-   * Set of missing required roles causing access to the region to fail.
-   * failedRoles is transient to avoid NotSerializableException. See {@link
-   * #writeObject} and {@link #readObject} for custom serialization.
+  private static final long serialVersionUID = -5950359426786805646L;
+
+  /**
+   * Set of missing required roles causing access to the region to fail. failedRoles is transient to
+   * avoid NotSerializableException. See {@link #writeObject} and {@link #readObject} for custom
+   * serialization.
-  
-  /** 
+
+  /**
+   * 
-  
-  /** 
-   * Constructs a <code>RegionDistributionException</code> with a message and
-   * a cause.
+
+  /**
+   * Constructs a <code>RegionDistributionException</code> with a message and a cause.
+   * 
-  public RegionDistributionException(String s,  String regionFullPath, Set failedRoles, Throwable ex) {
+  public RegionDistributionException(String s, String regionFullPath, Set failedRoles,
+      Throwable ex) {
-  
-  /** 
-   * Returns the required roles that caused this exception. One or more
-   * roles failed to receive a cache distribution message or acknowledge
-   * receipt of that message.
+
+  /**
+   * Returns the required roles that caused this exception. One or more roles failed to receive a
+   * cache distribution message or acknowledge receipt of that message.
+   * 
-  
-  /** 
-   * Override writeObject which is used in serialization. Customize 
-   * serialization of this exception to avoid escape of InternalRole
-   * which is not Serializable. 
+
+  /**
+   * Override writeObject which is used in serialization. Customize serialization of this exception
+   * to avoid escape of InternalRole which is not Serializable.
-  private void writeObject(java.io.ObjectOutputStream out)
-  throws IOException {
+  private void writeObject(java.io.ObjectOutputStream out) throws IOException {
-      String name = ((Role)iter.next()).getName();
+      String name = ((Role) iter.next()).getName();
-  
-  /** 
-   * Override readObject which is used in serialization. Customize 
-   * serialization of this exception to avoid escape of InternalRole
-   * which is not Serializable. 
+
+  /**
+   * Override readObject which is used in serialization. Customize serialization of this exception
+   * to avoid escape of InternalRole which is not Serializable.
-  private void readObject(java.io.ObjectInputStream in)
-  throws IOException, ClassNotFoundException {
+  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
-    Set roleNames = (Set)in.readObject();
+    Set roleNames = (Set) in.readObject();
-     
+
