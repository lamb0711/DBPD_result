Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start)
+      throws IOException, InterruptedException {
-      buffer.append(servConn.getName())
-            .append(": Received getAll request (")
-            .append(msg.getPayloadLength())
-            .append(" bytes) from ")
-            .append(servConn.getSocketString())
-            .append(" for region ")
-            .append(regionName)
-            .append(" keys ");
+      buffer.append(servConn.getName()).append(": Received getAll request (")
+          .append(msg.getPayloadLength()).append(" bytes) from ").append(servConn.getSocketString())
+          .append(" for region ").append(regionName).append(" keys ");
-      //      if (regionName == null) (can only be null)
+      // if (regionName == null) (can only be null)
-        message = LocalizedStrings.GetAll_THE_INPUT_REGION_NAME_FOR_THE_GETALL_REQUEST_IS_NULL.toLocalizedString();
+        message = LocalizedStrings.GetAll_THE_INPUT_REGION_NAME_FOR_THE_GETALL_REQUEST_IS_NULL
+            .toLocalizedString();
-  private void fillAndSendGetAllResponseChunks(Region region,
-                                               String regionName,
-                                               Object[] keys,
-                                               ServerConnection servConn,
-                                               boolean requestSerializedValues) throws IOException {
+  private void fillAndSendGetAllResponseChunks(Region region, String regionName, Object[] keys,
+      ServerConnection servConn, boolean requestSerializedValues) throws IOException {
-    // Note that the current implementation of client/server getAll the "keys" will always be non-null.
+    // Note that the current implementation of client/server getAll the "keys" will always be
+    // non-null.
-    // When the client receives the server's "values" it calls setKeys using the key list the client already has.
-    // So the only reason we would tell the VersionedObjectList that it needs to track keys is if we are running
-    // in the old mode (which may be impossible since we only used that mode pre 7.0) in which the client told us
+    // When the client receives the server's "values" it calls setKeys using the key list the client
+    // already has.
+    // So the only reason we would tell the VersionedObjectList that it needs to track keys is if we
+    // are running
+    // in the old mode (which may be impossible since we only used that mode pre 7.0) in which the
+    // client told us
-    VersionedObjectList values = new VersionedObjectList(maximumChunkSize, keys == null, region.getAttributes()
-                                                                                               .getConcurrencyChecksEnabled(), requestSerializedValues);
+    VersionedObjectList values = new VersionedObjectList(maximumChunkSize, keys == null,
+        region.getAttributes().getConcurrencyChecksEnabled(), requestSerializedValues);
-            logger.warn(LocalizedMessage.create(LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1, new Object[] {
-              servConn.getName(),
-              key
-            }), ex);
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1,
+                new Object[] {servConn.getName(), key}), ex);
-          logger.warn(LocalizedMessage.create(LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1, new Object[] {
-            servConn.getName(),
-            key
-          }), ex);
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1,
+              new Object[] {servConn.getName(), key}), ex);
-              getContext = postAuthzRequest.getAuthorize(regionName, key, data, isObject, getContext);
+              getContext =
+                  postAuthzRequest.getAuthorize(regionName, key, data, isObject, getContext);
-              logger.warn(LocalizedMessage.create(LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1, new Object[] {
-                servConn.getName(),
-                key
-              }), ex);
+              logger.warn(LocalizedMessage.create(
+                  LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1,
+                  new Object[] {servConn.getName(), key}), ex);
-  private static void sendGetAllResponseChunk(Region region,
-                                              ObjectPartList list,
-                                              boolean lastChunk,
-                                              ServerConnection servConn) throws IOException {
+  private static void sendGetAllResponseChunk(Region region, ObjectPartList list, boolean lastChunk,
+      ServerConnection servConn) throws IOException {
-      logger.debug("{}: Sending {} getAll response chunk for region={}{}", servConn.getName(), (lastChunk ? " last " : " "), region
-        .getFullPath(), (logger.isTraceEnabled() ? " values=" + list + " chunk=<" + chunkedResponseMsg + ">" : ""));
+      logger.debug("{}: Sending {} getAll response chunk for region={}{}", servConn.getName(),
+          (lastChunk ? " last " : " "), region.getFullPath(), (logger.isTraceEnabled()
+              ? " values=" + list + " chunk=<" + chunkedResponseMsg + ">" : ""));
