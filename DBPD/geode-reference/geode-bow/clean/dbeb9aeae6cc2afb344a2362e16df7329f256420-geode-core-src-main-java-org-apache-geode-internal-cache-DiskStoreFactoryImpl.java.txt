Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Implementation of DiskStoreFactory 
+ * Implementation of DiskStoreFactory
-public class DiskStoreFactoryImpl implements DiskStoreFactory
-{
+public class DiskStoreFactoryImpl implements DiskStoreFactory {
-  private final DiskStoreAttributes attrs = new DiskStoreAttributes(); 
+  private final DiskStoreAttributes attrs = new DiskStoreAttributes();
-  
+
+
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_POSITIVE_NUMBER_AND_THE_VALUE_GIVEN_1_IS_NOT_ACCEPTABLE.toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD, Integer.valueOf(compactionThreshold)}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_POSITIVE_NUMBER_AND_THE_VALUE_GIVEN_1_IS_NOT_ACCEPTABLE
+              .toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD,
+                  Integer.valueOf(compactionThreshold)}));
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_LESS_THAN_2_BUT_WAS_1.toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD, Integer.valueOf(compactionThreshold), Integer.valueOf(100)}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_LESS_THAN_2_BUT_WAS_1
+              .toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD,
+                  Integer.valueOf(compactionThreshold), Integer.valueOf(100)}));
-  
+
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_TIME_INTERVAL_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Long.valueOf(timeInterval)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_TIME_INTERVAL_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Long.valueOf(timeInterval)));
-      GemFireCacheImpl gfc = (GemFireCacheImpl)this.cache;
-      DiskStoreImpl ds = new DiskStoreImpl(gfc, this.attrs,
-          true/*ownedByRegion*/, internalRegionArgs);
+      GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
+      DiskStoreImpl ds =
+          new DiskStoreImpl(gfc, this.attrs, true/* ownedByRegion */, internalRegionArgs);
-          GemFireCacheImpl gfc = (GemFireCacheImpl)this.cache;
+          GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-          if(registry != null) {
+          if (registry != null) {
-          CacheCreation creation = (CacheCreation)this.cache;
+          CacheCreation creation = (CacheCreation) this.cache;
-    
-    //Don't allow this disk store to be created
-    //until an in progress backup is completed. This
-    //ensures that nothing that is backed up on another
-    //member depends on state that goes into this disk store
-    //that isn't backed up.
+
+    // Don't allow this disk store to be created
+    // until an in progress backup is completed. This
+    // ensures that nothing that is backed up on another
+    // member depends on state that goes into this disk store
+    // that isn't backed up.
-      GemFireCacheImpl gfc = (GemFireCacheImpl)this.cache;
+      GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-      if(backup != null) {
+      if (backup != null) {
-      GemFireCacheImpl gfc = (GemFireCacheImpl)this.cache;
+      GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-        if (((DiskStoreImpl)existing).sameAs(this.attrs)) {
+        if (((DiskStoreImpl) existing).sameAs(this.attrs)) {
-  public DiskStoreFactory setDiskDirsAndSizes(File[] diskDirs,int[] diskDirSizes) {
+  public DiskStoreFactory setDiskDirsAndSizes(File[] diskDirs, int[] diskDirSizes) {
-      throw new IllegalArgumentException(LocalizedStrings.AttributesFactory_NUMBER_OF_DISKSIZES_IS_0_WHICH_IS_NOT_EQUAL_TO_NUMBER_OF_DISK_DIRS_WHICH_IS_1.toLocalizedString(new Object[] {Integer.valueOf(diskDirSizes.length), Integer.valueOf(diskDirs.length)}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AttributesFactory_NUMBER_OF_DISKSIZES_IS_0_WHICH_IS_NOT_EQUAL_TO_NUMBER_OF_DISK_DIRS_WHICH_IS_1
+              .toLocalizedString(new Object[] {Integer.valueOf(diskDirSizes.length),
+                  Integer.valueOf(diskDirs.length)}));
-    for (int i=0; i < diskDirs.length; i++) {
-      if (! diskDirs[i].isDirectory()) {
+    for (int i = 0; i < diskDirs.length; i++) {
+      if (!diskDirs[i].isDirectory()) {
-          throw new GemFireIOException(LocalizedStrings.AttributesFactory_UNABLE_TO_CREATE_DISK_STORE_DIRECTORY_0.toLocalizedString(diskDirs[i]));
-        } 
+          throw new GemFireIOException(
+              LocalizedStrings.AttributesFactory_UNABLE_TO_CREATE_DISK_STORE_DIRECTORY_0
+                  .toLocalizedString(diskDirs[i]));
+        }
-  
-  
+
+
+   * 
-    for(int i=0; i< sizes.length; i++){
-      if(sizes[i]<0){
-        throw new IllegalArgumentException(LocalizedStrings.AttributesFactory_DIR_SIZE_CANNOT_BE_NEGATIVE_0.toLocalizedString(Integer.valueOf(sizes[i])));
+    for (int i = 0; i < sizes.length; i++) {
+      if (sizes[i] < 0) {
+        throw new IllegalArgumentException(
+            LocalizedStrings.AttributesFactory_DIR_SIZE_CANNOT_BE_NEGATIVE_0
+                .toLocalizedString(Integer.valueOf(sizes[i])));
-    long MAX = Long.MAX_VALUE/(1024*1024);
+    long MAX = Long.MAX_VALUE / (1024 * 1024);
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_LESS_THAN_2_BUT_WAS_1.toLocalizedString(new Object[] {"max oplog size", maxOplogSize, MAX}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_LESS_THAN_2_BUT_WAS_1
+              .toLocalizedString(new Object[] {"max oplog size", maxOplogSize, MAX}));
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Long.valueOf(maxOplogSize)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Long.valueOf(maxOplogSize)));
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Long.valueOf(maxOplogSizeInBytes)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Long.valueOf(maxOplogSizeInBytes)));
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_QUEUE_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Integer.valueOf(queueSize)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_QUEUE_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Integer.valueOf(queueSize)));
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_QUEUE_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Integer.valueOf(writeBufferSize)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_QUEUE_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Integer.valueOf(writeBufferSize)));
+
