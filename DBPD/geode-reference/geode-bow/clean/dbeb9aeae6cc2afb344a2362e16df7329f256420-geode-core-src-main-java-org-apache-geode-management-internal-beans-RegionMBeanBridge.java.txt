Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class acts as a bridge between a Region and RegionMBean This also
- * listens for statistics changes and update its value accordingly
+ * This class acts as a bridge between a Region and RegionMBean This also listens for statistics
+ * changes and update its value accordingly
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  
+
+
-        DiskRegionBridge diskRegionBridge = new DiskRegionBridge(localRegion.getDiskRegion().getStats());
+        DiskRegionBridge diskRegionBridge =
+            new DiskRegionBridge(localRegion.getDiskRegion().getStats());
-  
-  
-  protected void addDiskRegionBridge(DiskRegionBridge diskRegionBridge){
-   this.diskRegionBridge = diskRegionBridge; 
+
+
+  protected void addDiskRegionBridge(DiskRegionBridge diskRegionBridge) {
+    this.diskRegionBridge = diskRegionBridge;
-  
+
-    
+
-    
+
-    this.membershipAttributesData = RegionMBeanCompositeDataFactory.getMembershipAttributesData(regAttrs);
-    this.evictionAttributesData = RegionMBeanCompositeDataFactory.getEvictionAttributesData(regAttrs);   
-  
-    this.regionMonitor = new MBeanStatsMonitor(ManagementStrings.REGION_MONITOR
-        .toLocalizedString());
-    
+    this.membershipAttributesData =
+        RegionMBeanCompositeDataFactory.getMembershipAttributesData(regAttrs);
+    this.evictionAttributesData =
+        RegionMBeanCompositeDataFactory.getEvictionAttributesData(regAttrs);
+
+    this.regionMonitor =
+        new MBeanStatsMonitor(ManagementStrings.REGION_MONITOR.toLocalizedString());
+
-    this.persistentEnabled = region.getAttributes().getDataPolicy()
-        .withPersistence();
-    
-    
-   
-    
-    this.regionStats = ((LocalRegion)region).getRegionPerfStats();
-      if (regionStats != null) {
-        regionMonitor.addStatisticsToMonitor(regionStats.getStats()); // fixes 46692
-      }
+    this.persistentEnabled = region.getAttributes().getDataPolicy().withPersistence();
+
+
+
+    this.regionStats = ((LocalRegion) region).getRegionPerfStats();
+    if (regionStats != null) {
+      regionMonitor.addStatisticsToMonitor(regionStats.getStats()); // fixes 46692
+    }
-    if(l.getEvictionController() != null){
+    if (l.getEvictionController() != null) {
-    if(regAttrs.getGatewaySenderIds() != null &&  regAttrs.getGatewaySenderIds().size() > 0){
+    if (regAttrs.getGatewaySenderIds() != null && regAttrs.getGatewaySenderIds().size() > 0) {
-    
-    this.member = GemFireCacheImpl.getInstance().getDistributedSystem()
-        .getMemberId();
+
+    this.member = GemFireCacheImpl.getInstance().getDistributedSystem().getMemberId();
-  
+
-  public String getFullPath() {   
+  public String getFullPath() {
-  
+
-  
-  
-  
+
+
+
-    this.regionMonitor = new MBeanStatsMonitor(ManagementStrings.REGION_MONITOR
-        .toLocalizedString());
+    this.regionMonitor =
+        new MBeanStatsMonitor(ManagementStrings.REGION_MONITOR.toLocalizedString());
-  
+
-  public RegionMBeanBridge() {
-  }
-  
+  public RegionMBeanBridge() {}
-  public void stopMonitor(){
+
+  public void stopMonitor() {
-    if(diskRegionBridge != null){
+    if (diskRegionBridge != null) {
-  
+
-    listenerCallsAvgLatency = new StatsAverageLatency(StatsKey.CACHE_LISTENER_CALLS_COMPLETED, StatType.INT_TYPE,
-        StatsKey.CACHE_LISTENR_CALL_TIME, regionMonitor);
+    listenerCallsAvgLatency = new StatsAverageLatency(StatsKey.CACHE_LISTENER_CALLS_COMPLETED,
+        StatType.INT_TYPE, StatsKey.CACHE_LISTENR_CALL_TIME, regionMonitor);
-    writerCallsAvgLatency = new StatsAverageLatency(StatsKey.CACHE_WRITER_CALLS_COMPLETED, StatType.INT_TYPE,
-        StatsKey.CACHE_WRITER_CALL_TIME, regionMonitor);
+    writerCallsAvgLatency = new StatsAverageLatency(StatsKey.CACHE_WRITER_CALLS_COMPLETED,
+        StatType.INT_TYPE, StatsKey.CACHE_WRITER_CALL_TIME, regionMonitor);
-    
-    String[] writesRates = new String[] { StatsKey.PUT_ALLS, StatsKey.PUTS, StatsKey.CREATES };
+
+    String[] writesRates = new String[] {StatsKey.PUT_ALLS, StatsKey.PUTS, StatsKey.CREATES};
-  
+
-    return  getRequestRate.getRate();
+    return getRequestRate.getRate();
-  
-  public boolean isPersistenceEnabled(){
+
+  public boolean isPersistenceEnabled() {
-  
+
-  
+
-  
+
-  
+
-  
+
