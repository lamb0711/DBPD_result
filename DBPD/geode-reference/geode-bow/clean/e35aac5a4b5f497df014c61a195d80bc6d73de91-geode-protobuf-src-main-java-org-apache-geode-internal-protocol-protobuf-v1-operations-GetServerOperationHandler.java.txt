Merge branch 'release/1.5.0'

-import static org.apache.geode.internal.protocol.ProtocolErrorCode.NO_AVAILABLE_SERVER;
+
+import static org.apache.geode.internal.protocol.protobuf.v1.BasicTypes.ErrorCode.NO_AVAILABLE_SERVER;
+import java.util.Objects;
-import org.apache.geode.internal.protocol.Failure;
-import org.apache.geode.internal.protocol.MessageExecutionContext;
-import org.apache.geode.internal.protocol.Result;
-import org.apache.geode.internal.protocol.Success;
-import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol;
+import org.apache.geode.internal.protocol.protobuf.v1.Failure;
+import org.apache.geode.internal.protocol.protobuf.v1.MessageExecutionContext;
-import org.apache.geode.internal.protocol.protobuf.v1.utilities.ProtobufResponseUtilities;
-import org.apache.geode.internal.protocol.state.ConnectionTerminatingStateProcessor;
+import org.apache.geode.internal.protocol.protobuf.v1.Result;
+import org.apache.geode.internal.protocol.protobuf.v1.Success;
+import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionTerminatingStateProcessor;
-  public Result<LocatorAPI.GetServerResponse, ClientProtocol.ErrorResponse> process(
+  public Result<LocatorAPI.GetServerResponse> process(
-    messageExecutionContext.setConnectionStateProcessor(new ConnectionTerminatingStateProcessor());
+    messageExecutionContext
+        .setConnectionStateProcessor(new ProtobufConnectionTerminatingStateProcessor());
-    if (connectionResponse != null) {
+    if (connectionResponse != null && connectionResponse.hasResult()) {
-      return Failure.of(ProtobufResponseUtilities.makeErrorResponse(NO_AVAILABLE_SERVER,
-          "Unable to find a server for you"));
-
+      StringBuilder builder = new StringBuilder("Unable to find a server");
+      if (!Objects.isNull(serverGroup) && !serverGroup.isEmpty()) {
+        builder.append(" in server group ");
+        builder.append(serverGroup);
+      }
+      return Failure.of(NO_AVAILABLE_SERVER, builder.toString());
