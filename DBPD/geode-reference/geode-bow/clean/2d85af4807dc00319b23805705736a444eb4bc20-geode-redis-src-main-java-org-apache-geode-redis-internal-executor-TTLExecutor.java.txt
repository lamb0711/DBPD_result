GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+
-import org.apache.geode.redis.internal.RegionProvider;
-  public static final int NOT_EXISTS = -2;
-
-  public static final int NO_TIMEOUT = -1;
-
-    RegionProvider rC = context.getRegionProvider();
-    boolean exists = getDataRegion(context).containsKey(key);
-    if (!exists) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_EXISTS));
-      return;
+    RedisKeyCommands redisKeyCommands = getRedisKeyCommands(context);
+    long result = redisKeyCommands.pttl(key);
+    if (result > 0 && !timeUnitMillis()) {
+      result = MILLISECONDS.toSeconds(result);
-
-    long ttl = rC.getExpirationDelayMillis(key);
-    if (ttl == 0L) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NO_TIMEOUT));
-      return;
-    }
-
-    if (!timeUnitMillis()) {
-      ttl = ttl / millisInSecond;
-    }
-
-    command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), ttl));
+    command.setResponse(
+        Coder.getIntegerResponse(
+            context.getByteBufAllocator(),
+            result));
