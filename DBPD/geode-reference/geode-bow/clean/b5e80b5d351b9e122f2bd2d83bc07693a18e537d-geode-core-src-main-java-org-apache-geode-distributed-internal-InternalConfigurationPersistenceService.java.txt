Merge remote-tracking branch 'origin/develop' into geode-5600

-import java.text.SimpleDateFormat;
-import java.util.Date;
+import joptsimple.internal.Strings;
+    clusterConfigRootDir = new File(clusterConfigRootDir).getAbsolutePath();
-        loadSharedConfigurationFromDisk();
+        loadSharedConfigurationFromDir(new File(this.configDirPath));
+  public void setConfiguration(String groupName, Configuration configuration) {
+    getConfigurationRegion().put(groupName, configuration);
+  }
+
+  public boolean hasXmlConfiguration() {
+    Region<String, Configuration> configRegion = getConfigurationRegion();
+    return configRegion.values().stream().anyMatch(c -> c.getCacheXmlContent() != null);
+  }
+
+  public Map<String, Configuration> getEntireConfiguration() {
+    Set<String> keys = getConfigurationRegion().keySet();
+    return getConfigurationRegion().getAll(keys);
+  }
+
+  public Path getClusterConfigDirPath() {
+    return Paths.get(configDirPath);
+  }
+
-  /**
-   * Loads the internal region with the configuration in the configDirPath
-   */
-  public void loadSharedConfigurationFromDisk()
+  // configDir is the dir that has all the groups structure underneath it.
+  public void loadSharedConfigurationFromDir(File configDir)
-    File[] groupNames =
-        new File(this.configDirPath).listFiles((FileFilter) DirectoryFileFilter.INSTANCE);
-
+      File[] groupNames = configDir.listFiles((FileFilter) DirectoryFileFilter.INSTANCE);
+      boolean needToCopyJars = true;
+      if (configDir.getAbsolutePath().equals(getSharedConfigurationDirPath())) {
+        needToCopyJars = false;
+      }
+
+      logger.info("loading the cluster configuration: ");
+        logger.info(configuration.getConfigName() + " xml content: \n"
+            + configuration.getCacheXmlContent());
+        logger.info(configuration.getConfigName() + " properties: "
+            + configuration.getGemfireProperties().size());
+        logger.info(configuration.getConfigName() + " jars: "
+            + Strings.join(configuration.getJarNames(), ", "));
+        if (needToCopyJars && configuration.getJarNames().size() > 0) {
+          Path groupDirPath = createConfigDirIfNecessary(configuration.getConfigName()).toPath();
+          for (String jarName : configuration.getJarNames()) {
+            Files.copy(groupName.toPath().resolve(jarName), groupDirPath.resolve(jarName));
+          }
+        }
-  public void renameExistingSharedConfigDirectory() {
-    File configDirFile = new File(this.configDirPath);
-    if (configDirFile.exists()) {
-      String configDirFileName2 = CLUSTER_CONFIG_ARTIFACTS_DIR_NAME
-          + new SimpleDateFormat("yyyyMMddhhmm").format(new Date()) + '.' + System.nanoTime();
-      try {
-        File configDirFile2 = new File(configDirFile.getParent(), configDirFileName2);
-        FileUtils.moveDirectory(configDirFile, configDirFile2);
-      } catch (IOException e) {
-        logger.info(e);
-      }
-    }
-  }
-
-
-  public void writeConfigToFile(final Configuration configuration) throws IOException {
-    File configDir = createConfigDirIfNecessary(configuration.getConfigName());
+  public void writeConfigToFile(final Configuration configuration, File rootDir)
+      throws IOException {
+    File configDir = createConfigDirIfNecessary(rootDir, configuration.getConfigName());
+
+    // copy the jars if the rootDir is different than the configDirPath
+    if (rootDir.getAbsolutePath().equals(getSharedConfigurationDirPath())) {
+      return;
+    }
+
+    File locatorConfigDir =
+        new File(getSharedConfigurationDirPath(), configuration.getConfigName());
+    if (locatorConfigDir.exists()) {
+      File[] jarFiles = locatorConfigDir.listFiles(x -> x.getName().endsWith(".jar"));
+      for (File file : jarFiles) {
+        Files.copy(file.toPath(), configDir.toPath().resolve(file.getName()));
+      }
+    }
-    File clusterConfigDir = new File(getSharedConfigurationDirPath());
+    return createConfigDirIfNecessary(new File(getSharedConfigurationDirPath()), configName);
+  }
+
+  private File createConfigDirIfNecessary(File clusterConfigDir, final String configName)
+      throws IOException {
