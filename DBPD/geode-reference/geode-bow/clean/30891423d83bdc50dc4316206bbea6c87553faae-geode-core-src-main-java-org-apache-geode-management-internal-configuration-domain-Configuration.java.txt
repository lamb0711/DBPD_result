GEODE-2197: refactor cluster config and fix the test failures

+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import org.apache.geode.management.internal.configuration.utils.XmlUtils;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.TransformerException;
-  private Properties gemfireProperties = new Properties();
-  Set<String> jarNames = new HashSet<String>();
+  private Properties gemfireProperties;
+  Set<String> jarNames;
+  public Configuration(Configuration that) {
+    this.configName = that.configName;
+    this.cacheXmlContent = that.cacheXmlContent;
+    this.cacheXmlFileName = that.cacheXmlFileName;
+    this.propertiesFileName = that.propertiesFileName;
+    this.gemfireProperties = new Properties();
+    this.gemfireProperties.putAll(that.gemfireProperties);
+    this.jarNames = new HashSet<>(that.jarNames);
+  }
+
-    this.setPropertiesFileName(configName + ".properties");
+    this.propertiesFileName = configName + ".properties";
+    this.gemfireProperties = new Properties();
+    this.jarNames = new HashSet<String>();
-  public String getCacheXmlFileName() {
-    return cacheXmlFileName;
+  public void setCacheXmlFile(File cacheXmlFile)
+      throws TransformerException, ParserConfigurationException, IOException, SAXException {
+    if (cacheXmlFile.length() == 0) {
+      this.cacheXmlContent = "";
+    } else {
+      Document doc = XmlUtils.getDocumentBuilder().parse(cacheXmlFile);
+      this.cacheXmlContent = XmlUtils.elementToString(doc);
+    }
-  public void setCacheXmlFileName(String cacheXmlFileName) {
-    this.cacheXmlFileName = cacheXmlFileName;
+  public void setPropertiesFile(File propertiesFile) throws IOException {
+    if (!propertiesFile.exists())
+      return;
+
+    FileInputStream fis = null;
+    try {
+      fis = new FileInputStream(propertiesFile);
+      this.gemfireProperties.load(fis);
+    } finally {
+      if (fis != null) {
+        fis.close();
+      }
+    }
+  }
+
+  public String getCacheXmlFileName() {
+    return cacheXmlFileName;
-  public String getConfigName() {
-    return configName;
+  public void addGemfireProperties(Properties gemfireProperties) {
+    this.gemfireProperties.putAll(gemfireProperties);
-  public void setConfigName(String configName) {
-    this.configName = configName;
+  public String getConfigName() {
+    return configName;
-  public void setPropertiesFileName(String propertiesFileName) {
-    this.propertiesFileName = propertiesFileName;
+  public void addJarNames(Set<String> jarNames) {
+    this.jarNames.addAll(jarNames);
-    if (jarNames != null) {
-      for (String jarName : jarNames) {
-        this.jarNames.add(jarName);
-      }
-    }
+    if (jarNames == null)
+      return;
+
+    this.jarNames.addAll(Stream.of(jarNames).collect(Collectors.toSet()));
+
-      for (String jarName : jarNames) {
-        this.jarNames.remove(jarName);
-      }
+      this.jarNames.removeAll(Stream.of(jarNames).collect(Collectors.toSet()));
