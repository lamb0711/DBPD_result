GEODE-6825: Add workingDirectory field to GMSLocator

Add workingDirectory parameter to the following:
* InternalLocator.startLocator
* MemberFactory.newLocatorHandler
* GMSMemberFactory.newLocatorHandler

Update some tests to use TemporaryFolder for Locator workingDirectory.

-
+  private final File workingDirectory;
+    return createLocator(port, loggingSession, logFile, logWriter, securityLogWriter, bindAddress,
+        hostnameForClients, distributedSystemProperties, startDistributedSystem,
+        new File(System.getProperty("user.dir")));
+  }
+
+  /**
+   * Create a locator that listens on a given port. This locator will not have peer or server
+   * location services available until they are started by calling startServerLocation or
+   * startPeerLocation on the locator object.
+   *
+   * @param port the tcp/ip port to listen on
+   * @param loggingSession the LoggingSession to use, may be a NullLoggingSession which does
+   *        nothing
+   * @param logFile the file that log messages should be written to
+   * @param logWriter a log writer that should be used (logFile parameter is ignored)
+   * @param securityLogWriter the logWriter to be used for security related log messages
+   * @param distributedSystemProperties optional properties to configure the distributed system
+   *        (e.g., mcast addr/port, other locators)
+   * @param startDistributedSystem if true then this locator will also start its own ds
+   * @param workingDirectory the working directory to use for any files
+   */
+  public static InternalLocator createLocator(int port, LoggingSession loggingSession, File logFile,
+      InternalLogWriter logWriter, InternalLogWriter securityLogWriter, InetAddress bindAddress,
+      String hostnameForClients, Properties distributedSystemProperties,
+      boolean startDistributedSystem, File workingDirectory) {
-              bindAddress,
-              hostnameForClients, distributedSystemProperties, null, startDistributedSystem);
+              bindAddress, hostnameForClients, distributedSystemProperties, null,
+              startDistributedSystem, workingDirectory);
-   * Creates a distribution locator that runs in this VM on the given port and bind address.
+   * Creates a distribution locator that runs in this VM on the given port and bind address in the
+   * default working directory (Java "user.dir" System Property).
-      Properties distributedSystemProperties, String hostnameForClients) throws IOException {
+      Properties distributedSystemProperties, String hostnameForClients)
+      throws IOException {
+    return startLocator(port, logFile, logWriter, securityLogWriter, bindAddress,
+        startDistributedSystem, distributedSystemProperties, hostnameForClients,
+        new File(System.getProperty("user.dir")));
+  }
+
+  /**
+   * Creates a distribution locator that runs in this VM on the given port and bind address in the
+   * specified working directory.
+   *
+   * <p>
+   * This is for internal use only as it does not create a distributed system unless told to do so.
+   *
+   * @param port the tcp/ip port to listen on
+   * @param logFile the file that log messages should be written to
+   * @param logWriter a log writer that should be used (logFile parameter is ignored)
+   * @param securityLogWriter the logWriter to be used for security related log messages
+   * @param startDistributedSystem if true, a distributed system is started
+   * @param distributedSystemProperties optional properties to configure the distributed system
+   *        (e.g., mcast
+   *        addr/port, other locators)
+   * @param hostnameForClients the name to give to clients for connecting to this locator
+   * @param workingDirectory the working directory to use for any files
+   */
+  public static InternalLocator startLocator(int port, File logFile, InternalLogWriter logWriter,
+      InternalLogWriter securityLogWriter, InetAddress bindAddress, boolean startDistributedSystem,
+      Properties distributedSystemProperties, String hostnameForClients, File workingDirectory)
+      throws IOException {
-      newLocator =
-          createLocator(port, loggingSession, logFile, logWriter, securityLogWriter, bindAddress,
-              hostnameForClients, distributedSystemProperties, startDistributedSystem);
+      newLocator = createLocator(port, loggingSession, logFile, logWriter, securityLogWriter,
+          bindAddress, hostnameForClients, distributedSystemProperties, startDistributedSystem,
+          workingDirectory);
-      DistributionConfigImpl distributionConfig, boolean startDistributedSystem) {
+      DistributionConfigImpl distributionConfig, boolean startDistributedSystem,
+      File workingDirectory) {
+    this.workingDirectory = workingDirectory;
+
-        locatorsAreCoordinators, networkPartitionDetectionEnabled, locatorStats, securityUDPDHAlgo);
+        locatorsAreCoordinators, networkPartitionDetectionEnabled, locatorStats, securityUDPDHAlgo,
+        workingDirectory);
-    File productUseFile = new File("locator" + boundPort + "views.log");
+    File productUseFile = new File(workingDirectory, "locator" + boundPort + "views.log");
