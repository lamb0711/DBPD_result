Revert "[GEODE-77] TCP check for health monitor"

This reverts commit e267c88b134155eea6dab935a7a549c041e3e77e.

The revert is due to some test failures.

-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.ServerSocket;
-import java.net.Socket;
-import com.gemstone.gemfire.SystemConnectException;
-import com.gemstone.gemfire.internal.AvailablePort;
-  
-  // For TCP check
-  private ExecutorService serverSocketExecutor;
-  private static final int PING = 0x01;
-  private static final int PONG = 0x02;
-  private InetAddress ip;
-  private int socketPort;
-  private ServerSocket serverSocket;
-  private Map<InternalDistributedMember, InetSocketAddress> socketInfo = new ConcurrentHashMap<InternalDistributedMember, InetSocketAddress>();
-  /**
-   * During final check, establish TCP connection between current member and suspect member.
-   * And exchange PING/PONG message to see if the suspect member is still alive.
-   * 
-   * @param suspectMember member that does not respond to CheckRequestMessage
-   * @return true if successfully exchanged PING/PONG with TCP connection, otherwise false.
-   */
-  private boolean doTCPCheckMember(InternalDistributedMember suspectMember) {
-    logger.trace("Checking member {} with TCP socket connection.", suspectMember);
-    Socket clientSocket = new Socket();
-    try {
-      // establish TCP connection
-      InetSocketAddress addr = socketInfo.get(suspectMember);
-      if (addr != null) {
-        logger.trace("Checking member {} with TCP socket connection {}:{}.", suspectMember, addr.getAddress(), addr.getPort());
-        clientSocket.connect(addr, (int) services.getConfig().getMemberTimeout());
-      }
-      if (clientSocket.isConnected()) {
-        clientSocket.setSoTimeout((int) services.getConfig().getMemberTimeout());
-        InputStream in = clientSocket.getInputStream();
-        OutputStream out = clientSocket.getOutputStream();
-        out.write(PING);
-        out.flush();
-        clientSocket.shutdownOutput();
-        logger.trace("Send {} to member {} with TCP socket connection.", PING, suspectMember);
-        int b = in.read();
-        logger.trace("Received {} from member {} with TCP socket connection.", b, suspectMember);
-        if (b == PONG) {
-          CustomTimeStamp ts = memberVsLastMsgTS.get(suspectMember);
-          if (ts != null) {
-            ts.setTimeStamp(System.currentTimeMillis());
-          }
-          return true;
-        } else {
-          // TODO: Received something other than PONG. Is it possible?
-          return false;
-        }
-      } else {// cannot establish TCP connection with suspect member
-        return false;
-      }
-    } catch (IOException e) {
-      logger.trace("Unexpected exception", e);
-    } finally {
-      try {
-        if (clientSocket != null) {
-          clientSocket.close();
-        }
-      } catch (IOException e) {
-        logger.trace("Unexpected exception", e);
-      }
-    }
-
-    return false;
-  }
-  
-    {      
+    {
-    
-    {
-      serverSocketExecutor = Executors.newCachedThreadPool(new ThreadFactory() {
-        AtomicInteger threadIdx = new AtomicInteger();
-
-        @Override
-        public Thread newThread(Runnable r) {
-          int id = threadIdx.getAndIncrement();
-          Thread th = new Thread(Services.getThreadGroup(), r, "TCP Check ServerSocket Thread " + id);
-          th.setDaemon(true);
-          return th;
-        }
-      });
-
-      serverSocketExecutor.execute(new Runnable() {
-        @Override
-        public void run() {
-          Socket socket = null;
-          try {
-            // start server socket for TCP check
-            localAddress = services.getMessenger().getMemberID();            
-            ip = localAddress.getInetAddress();
-            int[] portRange = services.getConfig().getMembershipPortRange();
-            socketPort = AvailablePort.getAvailablePortInRange(portRange[0], portRange[1], AvailablePort.SOCKET);
-            if (socketPort == -1) {
-              throw new SystemConnectException("Unable to find a free port in the membership port range");
-            }
-            serverSocket = new ServerSocket(socketPort);
-            logger.debug("GMSHealthMonitor started server socket on {}:{}.", ip, socketPort);
-            socketInfo.put(localAddress, new InetSocketAddress(ip, socketPort));
-            while (!services.getCancelCriterion().isCancelInProgress() 
-                && !GMSHealthMonitor.this.isStopping && !GMSHealthMonitor.this.playingDead) {
-              try {
-                socket = serverSocket.accept();
-                if (GMSHealthMonitor.this.playingDead) {
-                  continue;
-                }
-                socket.setSoTimeout((int) services.getConfig().getMemberTimeout());
-                new ClientSocketHandler(socket).start();
-              } catch (IOException e) {
-                logger.trace("Unexpected exception", e);
-                try {
-                  if (socket != null) {
-                    socket.close();
-                  }
-                } catch (IOException ioe) {
-                  logger.trace("Unexpected exception", ioe);
-                }
-              }
-            }
-          } catch (IOException e) {
-            logger.trace("Unexpected exception", e);
-          } finally {
-            // close the server socket
-            if (serverSocket != null) {
-              try {
-                serverSocket.close();
-                logger.debug("GMSHealthMonitor server socket closed.");
-              } catch (IOException e) {
-                logger.debug("Unexpected exception", e);
-              }
-            }
-          }
-        }
-      });
-    }
-  }
-
-  class ClientSocketHandler extends Thread {
-
-    private Socket socket;
-
-    public ClientSocketHandler(Socket socket) {
-      super(services.getThreadGroup(), "ClientSocketHandler");
-      this.socket = socket;
-      setDaemon(true);
-    }
-
-    public void run() {
-      try {
-        InputStream in = socket.getInputStream();
-        OutputStream out = socket.getOutputStream();
-        int b = in.read();
-        logger.debug("GMSHealthMonitor server socket received {}.", b);
-        if (b == PING) {
-          out.write(PONG);
-          out.flush();
-          socket.shutdownOutput();
-          logger.debug("GMSHealthMonitor server socket replied {}.", PONG);
-        }
-      } catch (IOException e) {
-        logger.trace("Unexpected exception", e);
-      } finally {
-        if (socket != null) {
-          try {
-            socket.close();
-          } catch (IOException e) {
-            logger.info("Unexpected exception", e);
-          }
-        }
-      }
-    }
-    if (serverSocketExecutor != null) {
-      if (serverSocket != null) {
-        try {
-          serverSocket.close();
-        }
-        catch (IOException e) {
-          logger.trace("Unexpected exception", e);
-        }
-      }      
-      serverSocketExecutor.shutdownNow();
-    }
-    
-    return scheduler.isShutdown() && checkExecutor.isShutdown() && serverSocketExecutor.isShutdown() && !suspectRequestCollectorThread.isAlive();
+    return scheduler.isShutdown() && checkExecutor.isShutdown() && !suspectRequestCollectorThread.isAlive();
-              boolean pinged;
-              if (socketInfo.get(mbr) == null || socketInfo.get(mbr).getPort() < 0) {
-                pinged = GMSHealthMonitor.this.doCheckMember(mbr);
-              } else {
-                pinged = GMSHealthMonitor.this.doTCPCheckMember(mbr);
-              }
+              boolean pinged = GMSHealthMonitor.this.doCheckMember(mbr);
-  
-  public Map<InternalDistributedMember, InetSocketAddress> getSocketInfo() {
-    return this.socketInfo;
-  }
-
-  public void installSocketInfo(List<InternalDistributedMember> members, List<Integer> portsForMembers) {
-    logger.info("members=" + members + " portsForMembers=" + portsForMembers);
-    logger.info("members.size()=" + members.size() + " portsForMembers.size()=" + portsForMembers.size());
-    for (int i = 0; i < members.size(); i++) {
-      if (portsForMembers.get(i) == -1) {
-        continue;
-      }
-      InetSocketAddress addr = new InetSocketAddress(members.get(i).getInetAddress(), portsForMembers.get(i));
-      socketInfo.put(members.get(i), addr);
-    }
-  }
-
