GEODE-4092 New protocol does not have an API to get the best server to connect to

GetAllAvailableServers has been replaced by GetServer.  The handler uses
the ServerLocator's processRequest API to ensure we have the same
functionality as existing non-protobuf locator request handling.

If a server isn't found we are returning Success with a null server
location.  Should this be changed to return an error code?

-import java.util.ArrayList;
-import java.util.Collection;
-    Collection<InetSocketAddress> servers = getAvailableServers();
-    InetSocketAddress anyServer = servers.iterator().next();
-    socket = new Socket(anyServer.getAddress(), anyServer.getPort());
+    InetSocketAddress server = findAServer();
+    socket = new Socket(server.getAddress(), server.getPort());
-   * Queries a locator for the GemFire servers that have Protobuf enabled.
+   * Queries locators for a Geode server that has Protobuf enabled.
-   * @return Set of Internet-address-or-host-name/port pairs of the GemFire servers that have
-   *         Protobuf enabled.
+   * @return The server chosen by the Locator service for this client
-  private Collection<InetSocketAddress> getAvailableServers() throws IOException {
+  private InetSocketAddress findAServer() throws IOException {
-                .setGetAvailableServersRequest(LocatorAPI.GetAvailableServersRequest.newBuilder()))
+                .setGetServerRequest(LocatorAPI.GetServerRequest.newBuilder()))
-        LocatorAPI.GetAvailableServersResponse getAvailableServersResponse = ClientProtocol.Message
-            .parseDelimitedFrom(inputStream).getResponse().getGetAvailableServersResponse();
-        if (getAvailableServersResponse.getServersCount() < 1) {
+        LocatorAPI.GetServerResponse getServerResponse = ClientProtocol.Message
+            .parseDelimitedFrom(inputStream).getResponse().getGetServerResponse();
+        if (!getServerResponse.hasServer()) {
-        ArrayList<InetSocketAddress> availableServers =
-            new ArrayList<>(getAvailableServersResponse.getServersCount());
-        for (int i = 0; i < getAvailableServersResponse.getServersCount(); ++i) {
-          final BasicTypes.Server server = getAvailableServersResponse.getServers(i);
-          availableServers.add(new InetSocketAddress(server.getHostname(), server.getPort()));
-        }
-        return availableServers;
+        BasicTypes.Server server = getServerResponse.getServer();
+        return new InetSocketAddress(server.getHostname(), server.getPort());
