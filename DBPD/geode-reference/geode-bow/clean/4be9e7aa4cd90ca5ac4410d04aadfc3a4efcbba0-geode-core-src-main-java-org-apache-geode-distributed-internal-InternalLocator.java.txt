GEODE-2644: Make LogWriterAppender optional and support log4j2.xml

LogWriterAppender is now configured in log4j2.xml and it supports
sessions that correspond with Cache lifecycle. This allows Geode to
pause and resume LogWriterAppender and GeodeConsoleAppender without
resorting to dynamically adding and removing appenders.

When the Cache exists, log events stop going to the Console and instead
go to the Geode log file. Whenever the Cache does not exist, log events
go only to the Console.

These changes remove as much of the Log4j2 Core manipulation as
possible.

Also fixed:
* GEODE-5789: Geode now updates log level of all Geode loggers.

List of changes:
* Change LogWriterAppender to be pausable and session-oriented
* Add GeodeConsoleAppender which is pausable
* Log4j2 Core dependency is now optional
* Internal Logging interfaces allow Logging service to be pluggable
* Log4j2 xml integration testing now uses JUnit Rule from Log4j2
* Reduce coupling between Logging and the rest of Geode
* Greatly increase test coverage for Logging

+import java.util.Set;
+import org.apache.geode.internal.logging.LogConfig;
+import org.apache.geode.internal.logging.LogConfigListener;
+import org.apache.geode.internal.logging.LogConfigSupplier;
+import org.apache.geode.internal.logging.LoggingSession;
-import org.apache.geode.internal.logging.log4j.LogWriterAppenders;
+import org.apache.geode.internal.logging.NullLoggingSession;
+import org.apache.geode.internal.statistics.StatisticsConfig;
-public class InternalLocator extends Locator implements ConnectListener {
+public class InternalLocator extends Locator implements ConnectListener, LogConfigSupplier {
+  private final LoggingSession loggingSession;
+
+  private final Set<LogConfigListener> logConfigListeners = new HashSet<>();
+
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.SECURITY);
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.SECURITY);
+      locator.loggingSession.stopSession();
+      locator.loggingSession.shutdown();
+   * @param loggingSession the LoggingSession to use, may be a NullLoggingSession which does nothing
-  public static InternalLocator createLocator(int port, File logFile, InternalLogWriter logger,
+  public static InternalLocator createLocator(int port, LoggingSession loggingSession, File logFile,
+      InternalLogWriter logger,
-          new InternalLocator(port, logFile, logger, securityLogger, bindAddress,
+          new InternalLocator(port, loggingSession, logFile, logger, securityLogger, bindAddress,
-      newLocator = createLocator(port, logFile, logger, securityLogger, bindAddress,
+      // if startDistributedSystem is true then Locator uses a NullLoggingSession (does nothing)
+      LoggingSession loggingSession =
+          startDistributedSystem ? NullLoggingSession.create() : LoggingSession.create();
+
+      newLocator = createLocator(port, loggingSession, logFile, logger, securityLogger, bindAddress,
+      loggingSession.createSession(newLocator);
+      loggingSession.startSession();
+
-   * @param logF the file that log messages should be written to
+   * @param logFile the file that log messages should be written to
-  private InternalLocator(int port, File logF, InternalLogWriter logWriter,
-      // LOG: 3 non-null sources: GemFireDistributionLocator, InternalDistributedSystem,
-      // LocatorLauncher
-      InternalLogWriter securityLogWriter,
-      // LOG: 1 non-null source: GemFireDistributionLocator(same instance as logWriter),
-      // InternalDistributedSystem
+  private InternalLocator(int port, LoggingSession loggingSession, File logFile,
+      InternalLogWriter logWriter, InternalLogWriter securityLogWriter,
-    this.logFile = logF;
+    this.logFile = logFile;
-    // LOG: create LogWriterAppenders (these are closed at shutdown)
-    final boolean hasLogFile =
-        this.config.getLogFile() != null && !this.config.getLogFile().equals(new File(""));
-    final boolean hasSecurityLogFile = this.config.getSecurityLogFile() != null
-        && !this.config.getSecurityLogFile().equals(new File(""));
-    LogService.configureLoggers(hasLogFile, hasSecurityLogFile);
-    if (hasLogFile || hasSecurityLogFile) {
-
-      if (hasLogFile) {
-        // if log-file then create logWriterAppender
-        LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.MAIN, true, false,
-            this.config, !startDistributedSystem);
-      }
-
-      if (hasSecurityLogFile) {
-        // if security-log-file then create securityLogWriterAppender
-        LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.SECURITY, true, false,
-            this.config, false);
-      }
-      // do not create a LogWriterAppender for security -- let it go through to logWriterAppender
+    if (loggingSession == null) {
+      throw new Error("LoggingSession must not be null");
+    } else {
+      this.loggingSession = loggingSession;
-      logWriter = LogWriterFactory.createLogWriterLogger(false, false, this.config, false);
+      logWriter = LogWriterFactory.createLogWriterLogger(this.config, false);
-      securityLogWriter = LogWriterFactory.createLogWriterLogger(false, true, this.config, false);
-      logWriter.setLogWriterLevel(this.config.getSecurityLogLevel());
+      securityLogWriter = LogWriterFactory.createLogWriterLogger(this.config, true);
+  @Override
+  public LogConfig getLogConfig() {
+    return config;
+  }
+
+  @Override
+  public StatisticsConfig getStatisticsConfig() {
+    return config;
+  }
+
+  @Override
+  public void addLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.add(logConfigListener);
+  }
+
+  @Override
+  public void removeLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.remove(logConfigListener);
+  }
+
+  /**
+   * Apparently nothing provides RuntimeDistributionConfigImpl behavior in a stand-alone locator
+   * (without DS), so there are currently no callers of {@code logConfigChanged()}. Keep it?
+   */
+  @SuppressWarnings("unused")
+  void logConfigChanged() {
+    for (LogConfigListener listener : logConfigListeners) {
+      listener.configChanged();
+    }
+  }
+
