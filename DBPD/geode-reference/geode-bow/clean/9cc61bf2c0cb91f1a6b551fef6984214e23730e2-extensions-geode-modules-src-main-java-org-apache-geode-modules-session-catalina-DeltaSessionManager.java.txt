GEODE-8217: Deserialize attribute before update and remove. (#5256)

When preferDeserializedForm is true we deserialize the previous attributes before update or remove.

Deprecates preferDeserializedForm since when false it's unclear when you will get serialized or unserialized forms of attributes.

+import static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;
+import javax.servlet.http.HttpSession;
+
-public abstract class DeltaSessionManager<CommitSessionValveT extends AbstractCommitSessionValve>
+public abstract class DeltaSessionManager<CommitSessionValveT extends AbstractCommitSessionValve<?>>
-    implements Lifecycle, PropertyChangeListener, SessionManager {
+    implements Lifecycle, PropertyChangeListener, SessionManager, DeltaSessionManagerConfiguration {
-  private AtomicInteger rejectedSessions;
+  private final AtomicInteger rejectedSessions;
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
-                                     // peer-to-peer
+  // peer-to-peer
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
-    this.rejectedSessions = new AtomicInteger(0);
+    rejectedSessions = new AtomicInteger(0);
-    this.sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<>());
+    sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<>());
-    return this.regionName;
+    return regionName;
+  @Override
-    if (this.regionAttributesId == null) {
-      this.regionAttributesId = getSessionCache().getDefaultRegionAttributesId();
+    if (regionAttributesId == null) {
+      regionAttributesId = getSessionCache().getDefaultRegionAttributesId();
-    return this.regionAttributesId;
+    return regionAttributesId;
-  @SuppressWarnings("unused")
+  @Override
-    this.regionAttributesId = regionType;
+    regionAttributesId = regionType;
-    if (this.enableLocalCache == null) {
-      this.enableLocalCache = getSessionCache().getDefaultEnableLocalCache();
+    if (enableLocalCache == null) {
+      enableLocalCache = getSessionCache().getDefaultEnableLocalCache();
-    return this.enableLocalCache;
+    return enableLocalCache;
-  @SuppressWarnings("unused")
+  @Override
-  @SuppressWarnings("unused")
+  @Override
-    return this.maxActiveSessions;
+    return maxActiveSessions;
-  @SuppressWarnings("unused")
+  @Override
-  @SuppressWarnings("unused")
+  @Override
-    return this.enableGatewayReplication;
+    return enableGatewayReplication;
-  @SuppressWarnings("unused")
+  @Override
-    return this.enableDebugListener;
+    return enableDebugListener;
-  @SuppressWarnings("unused")
+  @Override
-    return this.enableCommitValve;
+    return enableCommitValve;
+  @Override
-    this.enableCommitValve = enable;
+    enableCommitValve = enable;
-    return this.enableCommitValveFailfast;
+    return enableCommitValveFailfast;
-  @SuppressWarnings("unused")
+  @Override
-    this.enableCommitValveFailfast = enable;
+    enableCommitValveFailfast = enable;
-  @SuppressWarnings("unused")
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
+  @Override
-    this.preferDeserializedForm = enable;
+    log.warn("Use of deprecated preferDeserializedForm property to be removed in future release.");
+    if (!enable) {
+      log.warn(
+          "Use of HttpSessionAttributeListener may result in serialized form in HttpSessionBindingEvent.");
+    }
+    preferDeserializedForm = enable;
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
-    return this.preferDeserializedForm;
+    return preferDeserializedForm;
-    return this.sessionCache;
+    return sessionCache;
-  @SuppressWarnings("unused")
-  public Session findSession(String id) throws IOException {
+  public Session findSession(String id) {
-    this.sessionCache = cache.isClient() ? new ClientServerSessionCache(this, cache)
+    sessionCache = cache.isClient() ? new ClientServerSessionCache(this, cache)
-    this.sessionCache.initialize();
+    sessionCache.initialize();
-    remove(session, false);
-  }
-
-  public void remove(Session session, @SuppressWarnings("unused") boolean update) {
-    // super.remove(session);
-    return this.rejectedSessions.get();
+    return rejectedSessions.get();
-    this.sessionsToTouch.add(sessionId);
+    sessionsToTouch.add(sessionId);
-    return this.sessionsToTouch;
+    return sessionsToTouch;
-  boolean removeTouchedSession(String sessionId) {
-    return this.sessionsToTouch.remove(sessionId);
+  void removeTouchedSession(String sessionId) {
+    sessionsToTouch.remove(sessionId);
-    this.timer = new Timer("Timer for " + toString(), true);
+    timer = new Timer("Timer for " + toString(), true);
-    this.timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
+    timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
-      this.timer.cancel();
+      timer.cancel();
-    this.timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
+    timer.schedule(task, TIMER_TASK_DELAY, TIMER_TASK_PERIOD);
-    SelectResults results;
+    SelectResults<String> results;
-      results = (SelectResults) query.execute();
+      results = uncheckedCast(query.execute());
-    ObjectOutputStream oos = null;
+    final ObjectOutputStream oos;
-        if (oos != null) {
-          try {
-            oos.close();
-          } catch (IOException ioe) {
-            // Ignore
-          }
-        }
-    @SuppressWarnings("unchecked")
-    Iterator<String> elements = (Iterator<String>) results.iterator();
-    while (elements.hasNext()) {
-      String id = elements.next();
+    for (final String id : results) {
-    if (getLogger().isDebugEnabled())
+    if (getLogger().isDebugEnabled()) {
+    }
-   * mechanism, if any. If persistence is not supported, this method returns without doing anything.
+   * mechanism, if any. If persistence is not supported, this method returns without doing
+   * anything.
-        Region region = getSessionCache().getOperatingRegion();
-        DeltaSessionInterface existingSession = (DeltaSessionInterface) region.get(session.getId());
+        final Region<String, HttpSession> region = getSessionCache().getOperatingRegion();
+        final DeltaSessionInterface existingSession =
+            (DeltaSessionInterface) region.get(session.getId());
-  void writeToObjectOutputStream(ObjectOutputStream oos, List listToWrite) throws IOException {
+  void writeToObjectOutputStream(ObjectOutputStream oos, List<?> listToWrite) throws IOException {
-        + getTheContext() + "; regionName=" + this.regionName
-        + "; regionAttributesId=" + this.regionAttributesId + "]";
+        + getTheContext() + "; regionName=" + regionName
+        + "; regionAttributesId=" + regionAttributesId + "]";
