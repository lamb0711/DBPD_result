Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfigImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/StartupMessage.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/SystemAdmin.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheServerStats.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatHelper.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatSampler.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/StatArchiveWriter.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/GemFireStatSamplerIntegrationTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/SimpleStatSamplerIntegrationTest.java

+import org.apache.geode.security.SecurableComponents;
-  /**
-   * "off-heap-memory-size" with value of "" or "<size>[g|m]"
-   */
+  private String securityEnabledComponents = DEFAULT_SECURITY_ENABLED_COMPONENTS;
+
+  /** "off-heap-memory-size" with value of "" or "<size>[g|m]" */
+
+
+    this.securityEnabledComponents = ((DistributionConfigImpl) other).securityEnabledComponents;
+    if(security.containsKey(SECURITY_MANAGER) && !security.containsKey(SECURITY_ENABLED_COMPONENTS)){
+      security.setProperty(SECURITY_ENABLED_COMPONENTS, SecurableComponents.ALL);
+    }
+  public String getSecurityEnabledComponents() {
+    return securityEnabledComponents;
+  }
+
+  @Override
+  public void setSecurityEnabledComponents(final String securityEnabledComponents) {
+    this.securityEnabledComponents = (String) checkAttribute(SECURITY_ENABLED_COMPONENTS, securityEnabledComponents);
+  }
+
+  @Override
+    if (sslProtocols == null) {
+      if (other.sslProtocols != null)
+        return false;
+    } else if (!sslProtocols.equals(other.sslProtocols))
+      return false;
+    if (sslRequireAuthentication != other.sslRequireAuthentication)
+      return false;
+    if (startDevRestApi != other.startDevRestApi)
+      return false;
+    if (startLocator == null) {
+      if (other.startLocator != null)
+        return false;
+    } else if (!startLocator.equals(other.startLocator))
+      return false;
+    if (startLocatorPort != other.startLocatorPort)
+      return false;
+    if (statisticArchiveFile == null) {
+      if (other.statisticArchiveFile != null)
+        return false;
+    } else if (!statisticArchiveFile.equals(other.statisticArchiveFile))
+      return false;
+    if (statisticSampleRate != other.statisticSampleRate)
+      return false;
+    if (statisticSamplingEnabled != other.statisticSamplingEnabled)
+      return false;
+    if (tcpPort != other.tcpPort)
+      return false;
+    if (udpFragmentSize != other.udpFragmentSize)
+      return false;
+    if (udpRecvBufferSize != other.udpRecvBufferSize)
+      return false;
+    if (udpSendBufferSize != other.udpSendBufferSize)
+      return false;
+    if (useSharedConfiguration != other.useSharedConfiguration)
+      return false;
+    if (userCommandPackages == null) {
+      if (other.userCommandPackages != null)
+        return false;
+    } else if (!userCommandPackages.equals(other.userCommandPackages))
+      return false;
+    if (userDefinedProps == null) {
+      if (other.userDefinedProps != null)
+        return false;
+    } else if (!userDefinedProps.equals(other.userDefinedProps))
+      return false;
+    if (!StringUtils.equals(securityEnabledComponents, other.securityEnabledComponents)) {
+      return false;
+    }
+    result = prime * result
+        + ((userCommandPackages == null) ? 0 : userCommandPackages.hashCode());
+    result = prime * result
+        + ((userDefinedProps == null) ? 0 : userDefinedProps.hashCode());
+    result = prime * result + ((securityEnabledComponents == null) ? 0 : securityEnabledComponents.hashCode());
