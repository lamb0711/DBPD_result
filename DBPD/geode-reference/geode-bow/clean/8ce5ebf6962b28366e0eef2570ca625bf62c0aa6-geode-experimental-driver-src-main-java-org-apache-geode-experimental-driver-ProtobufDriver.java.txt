Refactoring request/response into a common class in protobuf driver

Refactoring the logic to actually interact with a socket to a common
class in the geode-experimental-driver. This reduces duplicate code and
will also make it easier to plugin in connection pooling and failover at
a later time.

+import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol.Message;
+import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol.Message.MessageTypeCase;
+import org.apache.geode.internal.protocol.protobuf.v1.RegionAPI.GetRegionNamesRequest;
-  /**
-   * Socket to a GemFire locator that has Protobuf enabled.
-   */
-  private final Socket socket;
+  private final ProtobufChannel channel;
-    InetSocketAddress server = findAServer();
-    socket = new Socket(server.getAddress(), server.getPort());
-    socket.setTcpNoDelay(true);
-    socket.setSendBufferSize(65535);
-    socket.setReceiveBufferSize(65535);
-    final OutputStream outputStream = socket.getOutputStream();
-    ProtocolVersion.NewConnectionClientVersion.newBuilder()
-        .setMajorVersion(ProtocolVersion.MajorVersions.CURRENT_MAJOR_VERSION_VALUE)
-        .setMinorVersion(ProtocolVersion.MinorVersions.CURRENT_MINOR_VERSION_VALUE).build()
-        .writeDelimitedTo(outputStream);
-    final InputStream inputStream = socket.getInputStream();
-    if (!ProtocolVersion.VersionAcknowledgement.parseDelimitedFrom(inputStream)
-        .getVersionAccepted()) {
-      throw new IOException("Failed protocol version verification.");
-    }
+    this.channel = new ProtobufChannel(locators);
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder()
-        .setGetRegionNamesRequest(RegionAPI.GetRegionNamesRequest.newBuilder()).build()
-        .writeDelimitedTo(outputStream);
+    final Message request =
+        Message.newBuilder().setGetRegionNamesRequest(GetRegionNamesRequest.newBuilder()).build();
-    final InputStream inputStream = socket.getInputStream();
-    final RegionAPI.GetRegionNamesResponse getRegionNamesResponse =
-        ClientProtocol.Message.parseDelimitedFrom(inputStream).getGetRegionNamesResponse();
+    final RegionAPI.GetRegionNamesResponse getRegionNamesResponse = channel
+        .sendRequest(request, MessageTypeCase.GETREGIONNAMESRESPONSE).getGetRegionNamesResponse();
-    return new ProtobufRegion(regionName, socket);
+    return new ProtobufRegion(regionName, channel);
-      this.socket.close();
+      this.channel.close();
-    return !this.socket.isClosed();
+    return !this.channel.isClosed();
-  /**
-   * Queries locators for a Geode server that has Protobuf enabled.
-   *
-   * @return The server chosen by the Locator service for this client
-   * @throws IOException
-   */
-  private InetSocketAddress findAServer() throws IOException {
-    IOException lastException = null;
-
-    for (InetSocketAddress locator : locators) {
-      try {
-        final Socket locatorSocket = new Socket(locator.getAddress(), locator.getPort());
-
-        final OutputStream outputStream = locatorSocket.getOutputStream();
-        final InputStream inputStream = locatorSocket.getInputStream();
-        ProtocolVersion.NewConnectionClientVersion.newBuilder()
-            .setMajorVersion(ProtocolVersion.MajorVersions.CURRENT_MAJOR_VERSION_VALUE)
-            .setMinorVersion(ProtocolVersion.MinorVersions.CURRENT_MINOR_VERSION_VALUE).build()
-            .writeDelimitedTo(outputStream);
-
-        // The locator does not currently send a reply to the ProtocolVersion...
-        if (!ProtocolVersion.VersionAcknowledgement.parseDelimitedFrom(inputStream)
-            .getVersionAccepted()) {
-          throw new IOException("Failed ProtocolVersion.");
-        }
-
-        ClientProtocol.Message.newBuilder()
-            .setGetServerRequest(LocatorAPI.GetServerRequest.newBuilder()).build()
-            .writeDelimitedTo(outputStream);
-
-        ClientProtocol.Message response = ClientProtocol.Message.parseDelimitedFrom(inputStream);
-        ClientProtocol.ErrorResponse errorResponse = response.getErrorResponse();
-
-        if (errorResponse != null && errorResponse.hasError()) {
-          throw new IOException(
-              "Error finding server: error code= " + errorResponse.getError().getErrorCode()
-                  + "; error message=" + errorResponse.getError().getMessage());
-        }
-
-        LocatorAPI.GetServerResponse getServerResponse = response.getGetServerResponse();
-
-        BasicTypes.Server server = getServerResponse.getServer();
-        return new InetSocketAddress(server.getHostname(), server.getPort());
-      } catch (IOException e) {
-        lastException = e;
-      }
-    }
-
-    if (lastException != null) {
-      throw lastException;
-    } else {
-      throw new IllegalStateException("No locators");
-    }
-  }
