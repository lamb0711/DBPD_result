Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
-public class GemfireHttpSession implements
-    HttpSession, DataSerializable, Delta {
+public class GemfireHttpSession implements HttpSession, DataSerializable, Delta {
-   * A session becomes invalid if it is explicitly invalidated or if it
-   * expires.
+   * A session becomes invalid if it is explicitly invalidated or if it expires.
-   * This is set during serialization and then reset by the SessionManager when
-   * it is retrieved from the attributes.
+   * This is set during serialization and then reset by the SessionManager when it is retrieved from
+   * the attributes.
-  private GemfireHttpSession() {
-  }
+  private GemfireHttpSession() {}
-        LOG.debug(
-            "Attribute '{}' needs to be reconstructed with a new classloader",
-            name);
+        LOG.debug("Attribute '{}' needs to be reconstructed with a new classloader", name);
-              new ByteArrayInputStream(baos.toByteArray()),
-              loader);
+              new ByteArrayInputStream(baos.toByteArray()), loader);
-          LOG.error("Exception while recreating attribute '" + name +
-              "'", e);
+          LOG.error("Exception while recreating attribute '" + name + "'", e);
-          LOG.error("Exception while recreating attribute '" + name +
-              "'", e);
+          LOG.error("Exception while recreating attribute '" + name + "'", e);
-      LOG.debug("Session {} setting attribute {} = '{}'",
-          new Object[]{id, name, value});
+      LOG.debug("Session {} setting attribute {} = '{}'", new Object[] {id, name, value});
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-   * These three methods handle delta propagation and are deferred to the
-   * attribute object.
+   * These three methods handle delta propagation and are deferred to the attribute object.
-  public void fromDelta(DataInput in) throws IOException,
-      InvalidDeltaException {
+  public void fromDelta(DataInput in) throws IOException, InvalidDeltaException {
-        throw new IOException("Unable to forward fromDelta() call "
-            + "to fromData()", cex);
+        throw new IOException("Unable to forward fromDelta() call " + "to fromData()", cex);
-    builder.append("[id=").append(id)
-        .append(", isNew=").append(isNew)
-        .append(", isValid=").append(isValid)
-        .append(", hasDelta=").append(hasDelta())
-        .append(", lastAccessedTime=").append(attributes.getLastAccessedTime())
-        .append(", jvmOwnerId=").append(attributes.getJvmOwnerId());
+    builder.append("[id=").append(id).append(", isNew=").append(isNew).append(", isValid=")
+        .append(isValid).append(", hasDelta=").append(hasDelta()).append(", lastAccessedTime=")
+        .append(attributes.getLastAccessedTime()).append(", jvmOwnerId=")
+        .append(attributes.getJvmOwnerId());
-   * Handle the process of failing over the session to a new native session
-   * object.
+   * Handle the process of failing over the session to a new native session object.
-   * This is called on deserialization. You can only call it once to get a
-   * meaningful value as it resets the serialized state. In other words, this
-   * call is not idempotent.
+   * This is called on deserialization. You can only call it once to get a meaningful value as it
+   * resets the serialized state. In other words, this call is not idempotent.
-   * Called when the session is about to go out of scope. If the session has
-   * been defined to use async queued attributes then they will be written out
-   * at this point.
+   * Called when the session is about to go out of scope. If the session has been defined to use
+   * async queued attributes then they will be written out at this point.
