Merge branch 'release/1.5.0'

+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.versions.RegionVersionVector;
+    setEventSeqNum();
-  protected void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
+  public void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
-      if (this.partitionedRegion.isShadowPR()
-          && this.partitionedRegion.getColocatedWith() != null) {
-        PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
-        BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
-        // needs to be set only once.
-        if (parentBucket.eventSeqNum == null) {
-          parentBucket.eventSeqNum = new AtomicLong5(getId());
-        }
-      }
-      if (this.partitionedRegion.getColocatedWith() == null) {
-        this.eventSeqNum = new AtomicLong5(getId());
-      } else {
-        PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
-        BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
-        if (parentBucket == null && logger.isDebugEnabled()) {
-          logger.debug("The parentBucket of region {} bucketId {} is NULL",
-              this.partitionedRegion.getFullPath(), getId());
-        }
-        Assert.assertTrue(parentBucket != null);
-        this.eventSeqNum = parentBucket.eventSeqNum;
-      }
-
+  private void setEventSeqNum() {
+    if (this.partitionedRegion.isShadowPR() && this.partitionedRegion.getColocatedWith() != null) {
+      PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
+      // needs to be set only once.
+      if (parentBucket.eventSeqNum == null) {
+        parentBucket.eventSeqNum = new AtomicLong5(getId());
+      }
+    }
+    if (this.partitionedRegion.getColocatedWith() == null) {
+      this.eventSeqNum = new AtomicLong5(getId());
+    } else {
+      PartitionedRegion parentPR = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      BucketRegion parentBucket = parentPR.getDataStore().getLocalBucketById(getId());
+      if (parentBucket == null && logger.isDebugEnabled()) {
+        logger.debug("The parentBucket of region {} bucketId {} is NULL",
+            this.partitionedRegion.getFullPath(), getId());
+      }
+      Assert.assertTrue(parentBucket != null);
+      this.eventSeqNum = parentBucket.eventSeqNum;
+    }
+  }
-      throw new CacheClosedException("Cache is shutting down");
+      throw cache.getCacheClosedException("Cache is shutting down");
-        throw new CacheClosedException("Cache is shutting down");
+        throw cache.getCacheClosedException("Cache is shutting down");
-  void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
+  public void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
-    return this.concurrencyChecksEnabled
+    return this.getConcurrencyChecksEnabled()
-  protected void basicDestroy(final EntryEventImpl event, final boolean cacheWrite,
+  public void basicDestroy(final EntryEventImpl event, final boolean cacheWrite,
-  protected void basicDestroyBeforeRemoval(RegionEntry entry, EntryEventImpl event) {
+  public void basicDestroyBeforeRemoval(RegionEntry entry, EntryEventImpl event) {
-    LocalRegion lr = event.getLocalRegion();
+    LocalRegion lr = event.getRegion();
-      arm.releaseCacheModificationLock(event.getLocalRegion(), event);
+      arm.releaseCacheModificationLock(event.getRegion(), event);
-  public int getRegionSize(DistributedMember target) {
-    // GEODE-3679. Do not forward the request again.
-    return getRegionSize();
-  }
-
-  @Override
-  void updateSizeOnRemove(Object key, int oldSize) {
+  public void updateSizeOnRemove(Object key, int oldSize) {
-    closeCacheCallback(getEvictionController());
+    EvictionController evictionController = getEvictionController();
+    if (evictionController != null) {
+      evictionController.closeBucket(this);
+    }
-  public void incEvictions(long delta) {
-    this.evictions.getAndAdd(delta);
+  @Override
+  public void incBucketEvictions() {
+    this.evictions.getAndAdd(1);
-  public long getEvictions() {
+  public long getBucketEvictions() {
+
+  @Override
+  public EvictionController getExistingController(InternalRegionArguments internalArgs) {
+    return internalArgs.getPartitionedRegion().getEvictionController();
+  }
+
+  @Override
+  public String getNameForStats() {
+    return this.getPartitionedRegion().getFullPath();
+  }
+
+  @Override
+  public void closeEntries() {
+    this.entries.close(this);
+  }
+
+  @Override
+  public Set<VersionSource> clearEntries(RegionVersionVector rvv) {
+    return this.entries.clear(rvv, this);
+  }
+
