Geode 7812: Changes to PutAllClientServerDistributionTest (#5076)

Fixed issues causing testEventIdOutOfOrderInPartitionRegionSingleHop to fail

Co-authored-by: Mark Hanson <agingade@vmware.com>
-      List futures = null;
+      List futures;
-      if (futures != null) {
-        Iterator itr = futures.iterator();
-        while (itr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
-          Future fut = (Future) itr.next();
-          try {
-            fut.get();
-          } catch (InterruptedException e) {
-            throw new InternalGemFireException(e.getMessage());
-          } catch (ExecutionException ee) {
-            if (ee.getCause() instanceof FunctionException) {
-              throw (FunctionException) ee.getCause();
-            } else if (ee.getCause() instanceof ServerOperationException) {
-              throw (ServerOperationException) ee.getCause();
-            } else if (ee.getCause() instanceof ServerConnectivityException) {
-              throw (ServerConnectivityException) ee.getCause();
-            } else {
-              throw executionThrowable(ee.getCause());
-            }
+      Iterator itr = futures.iterator();
+      while (itr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+        Future fut = (Future) itr.next();
+        try {
+          fut.get();
+        } catch (InterruptedException e) {
+          throw new InternalGemFireException(e.getMessage());
+        } catch (ExecutionException ee) {
+          if (ee.getCause() instanceof FunctionException) {
+            throw (FunctionException) ee.getCause();
+          } else if (ee.getCause() instanceof ServerOperationException) {
+            throw (ServerOperationException) ee.getCause();
+          } else if (ee.getCause() instanceof ServerConnectivityException) {
+            throw (ServerConnectivityException) ee.getCause();
+          } else {
+            throw executionThrowable(ee.getCause());
-      List futures = null;
+      List futures;
-      if (futures != null) {
-        GemFireException functionExecutionException = null;
-        Iterator futureItr = futures.iterator();
-        Iterator taskItr = callableTasks.iterator();
-        final boolean isDebugEnabled = logger.isDebugEnabled();
-        while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
-          Future fut = (Future) futureItr.next();
-          SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
-          ServerLocation server = task.getServer();
-          try {
-            fut.get();
+      GemFireException functionExecutionException = null;
+      Iterator futureItr = futures.iterator();
+      Iterator taskItr = callableTasks.iterator();
+      final boolean isDebugEnabled = logger.isDebugEnabled();
+      while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+        Future fut = (Future) futureItr.next();
+        SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
+        ServerLocation server = task.getServer();
+        try {
+          fut.get();
+          if (isDebugEnabled) {
+            logger.debug("ExecuteRegionFunctionSingleHopOp#got result from {}", server);
+          }
+        } catch (InterruptedException e) {
+          throw new InternalGemFireException(e.getMessage());
+        } catch (ExecutionException ee) {
+
+          if (maxRetryAttempts == MAX_RETRY_INITIAL_VALUE) {
+            maxRetryAttempts = pool.calculateRetryAttempts(ee.getCause());
+          }
+
+          if (ee.getCause() instanceof InternalFunctionInvocationTargetException) {
-              logger.debug("ExecuteRegionFunctionSingleHopOp#got result from {}", server);
+              logger.debug(
+                  "ExecuteRegionFunctionSingleHopOp#ExecutionException.InternalFunctionInvocationTargetException : Caused by :{}",
+                  ee.getCause());
-          } catch (InterruptedException e) {
-            throw new InternalGemFireException(e.getMessage());
-          } catch (ExecutionException ee) {
-
-            if (maxRetryAttempts == MAX_RETRY_INITIAL_VALUE) {
-              maxRetryAttempts = pool.calculateRetryAttempts(ee.getCause());
+            try {
+              cms = region.getCache().getClientMetadataService();
+            } catch (CacheClosedException e) {
+              return 0;
+            cms.removeBucketServerLocation(server);
+            cms.scheduleGetPRMetaData(region, false);
-            if (ee.getCause() instanceof InternalFunctionInvocationTargetException) {
-              if (isDebugEnabled) {
-                logger.debug(
-                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.InternalFunctionInvocationTargetException : Caused by :{}",
-                    ee.getCause());
-              }
-              try {
-                cms = region.getCache().getClientMetadataService();
-              } catch (CacheClosedException e) {
-                return 0;
-              }
-              cms.removeBucketServerLocation(server);
-              cms.scheduleGetPRMetaData(region, false);
-
-              failedNodes.addAll(
-                  ((InternalFunctionInvocationTargetException) ee.getCause()).getFailedNodeSet());
-              // Clear the results only if isHA so that partial results can be returned.
-              if (isHA && maxRetryAttempts != 0) {
-                rc.clearResults();
-              } else {
-                if (ee.getCause().getCause() != null) {
-                  functionExecutionException =
-                      new FunctionInvocationTargetException(ee.getCause().getCause());
-                } else {
-                  functionExecutionException =
-                      new FunctionInvocationTargetException(new BucketMovedException(
-                          "Bucket migrated to another node. Please retry."));
-                }
-              }
-            } else if (ee.getCause() instanceof FunctionException) {
-              if (isDebugEnabled) {
-                logger.debug(
-                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.FunctionException : Caused by :{}",
-                    ee.getCause());
-              }
-              FunctionException fe = (FunctionException) ee.getCause();
-              if (isHA) {
-                throw fe;
-              } else {
-                functionExecutionException = fe;
-              }
-            } else if (ee.getCause() instanceof ServerOperationException) {
-              if (isDebugEnabled) {
-                logger.debug(
-                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerOperationException : Caused by :{}",
-                    ee.getCause());
-              }
-              ServerOperationException soe = (ServerOperationException) ee.getCause();
-              if (isHA) {
-                throw soe;
-              } else {
-                functionExecutionException = soe;
-              }
-            } else if (ee.getCause() instanceof ServerConnectivityException) {
-              if (isDebugEnabled) {
-                logger.debug(
-                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}",
-                    ee.getCause(), server);
-              }
-              try {
-                cms = region.getCache().getClientMetadataService();
-              } catch (CacheClosedException e) {
-                return 0;
-              }
-              cms.removeBucketServerLocation(server);
-              cms.scheduleGetPRMetaData(region, false);
-              // Clear the results only if isHA so that partial results can be returned.
-              if (isHA && maxRetryAttempts != 0) {
-                rc.clearResults();
-              } else {
-                functionExecutionException = (ServerConnectivityException) ee.getCause();
-              }
+            failedNodes.addAll(
+                ((InternalFunctionInvocationTargetException) ee.getCause()).getFailedNodeSet());
+            // Clear the results only if isHA so that partial results can be returned.
+            if (isHA && maxRetryAttempts != 0) {
+              rc.clearResults();
-              throw executionThrowable(ee.getCause());
+              if (ee.getCause().getCause() != null) {
+                functionExecutionException =
+                    new FunctionInvocationTargetException(ee.getCause().getCause());
+              } else {
+                functionExecutionException =
+                    new FunctionInvocationTargetException(new BucketMovedException(
+                        "Bucket migrated to another node. Please retry."));
+              }
+          } else if (ee.getCause() instanceof FunctionException) {
+            if (isDebugEnabled) {
+              logger.debug(
+                  "ExecuteRegionFunctionSingleHopOp#ExecutionException.FunctionException : Caused by :{}",
+                  ee.getCause());
+            }
+            FunctionException fe = (FunctionException) ee.getCause();
+            if (isHA) {
+              throw fe;
+            } else {
+              functionExecutionException = fe;
+            }
+          } else if (ee.getCause() instanceof ServerOperationException) {
+            if (isDebugEnabled) {
+              logger.debug(
+                  "ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerOperationException : Caused by :{}",
+                  ee.getCause());
+            }
+            ServerOperationException soe = (ServerOperationException) ee.getCause();
+            if (isHA) {
+              throw soe;
+            } else {
+              functionExecutionException = soe;
+            }
+          } else if (ee.getCause() instanceof ServerConnectivityException) {
+            if (isDebugEnabled) {
+              logger.debug(
+                  "ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}",
+                  ee.getCause(), server);
+            }
+            try {
+              cms = region.getCache().getClientMetadataService();
+            } catch (CacheClosedException e) {
+              return 0;
+            }
+            cms.removeBucketServerLocation(server);
+            cms.scheduleGetPRMetaData(region, false);
+            // Clear the results only if isHA so that partial results can be returned.
+            if (isHA && maxRetryAttempts != 0) {
+              rc.clearResults();
+            } else {
+              functionExecutionException = (ServerConnectivityException) ee.getCause();
+            }
+          } else {
+            throw executionThrowable(ee.getCause());
-        if (functionExecutionException != null) {
-          throw functionExecutionException;
-        }
+      }
+      if (functionExecutionException != null) {
+        throw functionExecutionException;
-      Map<ServerLocation, Object> resultMap = new HashMap<ServerLocation, Object>();
+      Map<ServerLocation, Object> resultMap = new HashMap<>();
-      List futures = null;
+      List futures;
-      if (futures != null) {
-        Iterator futureItr = futures.iterator();
-        Iterator taskItr = callableTasks.iterator();
-        RuntimeException rte = null;
-        while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
-          Future fut = (Future) futureItr.next();
-          SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
-          ServerLocation server = task.getServer();
-          try {
-            VersionedObjectList versions = (VersionedObjectList) fut.get();
+      Iterator futureItr = futures.iterator();
+      Iterator taskItr = callableTasks.iterator();
+      RuntimeException rte = null;
+      while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+        Future fut = (Future) futureItr.next();
+        SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
+        ServerLocation server = task.getServer();
+        try {
+          VersionedObjectList versions = (VersionedObjectList) fut.get();
+          if (logger.isDebugEnabled()) {
+            logger.debug("submitBulkOp#got result from {}:{}", server, versions);
+          }
+          resultMap.put(server, versions);
+        } catch (InterruptedException e) {
+          InternalGemFireException ige = new InternalGemFireException(e);
+          // only to make this server as failed server, not to throw right now
+          failedServers.put(server, ige);
+          if (rte == null) {
+            rte = ige;
+          }
+        } catch (ExecutionException ee) {
+          if (ee.getCause() instanceof ServerOperationException) {
-              logger.debug("submitBulkOp#got result from {}:{}", server, versions);
+              logger.debug("submitBulkOp#ExecutionException from server {}", server, ee);
-            resultMap.put(server, versions);
-          } catch (InterruptedException e) {
-            InternalGemFireException ige = new InternalGemFireException(e);
+            ServerOperationException soe = (ServerOperationException) ee.getCause();
-            failedServers.put(server, ige);
+            failedServers.put(server, soe);
-              rte = ige;
+              rte = soe;
-          } catch (ExecutionException ee) {
-            if (ee.getCause() instanceof ServerOperationException) {
-              if (logger.isDebugEnabled()) {
-                logger.debug("submitBulkOp#ExecutionException from server {}", server, ee);
-              }
-              ServerOperationException soe = (ServerOperationException) ee.getCause();
-              // only to make this server as failed server, not to throw right now
-              failedServers.put(server, soe);
-              if (rte == null) {
-                rte = soe;
-              }
-            } else if (ee.getCause() instanceof ServerConnectivityException) {
-              if (logger.isDebugEnabled()) {
-                logger.debug("submitBulkOp#ExecutionException for server {}", server, ee);
-              }
-              cms = region.getCache().getClientMetadataService();
-              cms.removeBucketServerLocation(server);
-              cms.scheduleGetPRMetaData(region, false);
-              failedServers.put(server, (ServerConnectivityException) ee.getCause());
+          } else if (ee.getCause() instanceof ServerConnectivityException) {
+            if (logger.isDebugEnabled()) {
+              logger.debug("submitBulkOp#ExecutionException for server {}", server, ee);
+            }
+            cms = region.getCache().getClientMetadataService();
+            cms.removeBucketServerLocation(server);
+            cms.scheduleGetPRMetaData(region, false);
+            failedServers.put(server, (ServerConnectivityException) ee.getCause());
+          } else {
+            Throwable t = ee.getCause();
+            if (t instanceof PutAllPartialResultException) {
+              resultMap.put(server, t);
+              anyPartialResults = true;
+              failedServers.put(server, (PutAllPartialResultException) t);
-              Throwable t = ee.getCause();
-              if (t instanceof PutAllPartialResultException) {
-                resultMap.put(server, t);
-                anyPartialResults = true;
-                failedServers.put(server, (PutAllPartialResultException) t);
-              } else {
-                RuntimeException other_rte = executionThrowable(ee.getCause());
-                failedServers.put(server, other_rte);
-                if (rte == null) {
-                  rte = other_rte;
-                }
+              RuntimeException other_rte = executionThrowable(ee.getCause());
+              failedServers.put(server, other_rte);
+              if (rte == null) {
+                rte = other_rte;
-          } // catch
-        } // while
-        // if there are any partial results we suppress throwing an exception
-        // so the partial results can be processed
-        if (rte != null && !anyPartialResults) {
-          throw rte;
-        }
+          }
+        } // catch
+      } // while
+      // if there are any partial results we suppress throwing an exception
+      // so the partial results can be processed
+      if (rte != null && !anyPartialResults) {
+        throw rte;
-      List futures = null;
+      List futures;
-      if (futures != null) {
-        Iterator futureItr = futures.iterator();
-        Iterator taskItr = callableTasks.iterator();
-        while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
-          Future fut = (Future) futureItr.next();
-          SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
-          List keys = ((GetAllOpImpl) task.getOperation()).getKeyList();
-          ServerLocation server = task.getServer();
-          try {
+      Iterator futureItr = futures.iterator();
+      Iterator taskItr = callableTasks.iterator();
+      while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+        Future fut = (Future) futureItr.next();
+        SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
+        List keys = ((GetAllOpImpl) task.getOperation()).getKeyList();
+        ServerLocation server = task.getServer();
+        try {
-            VersionedObjectList valuesFromServer = (VersionedObjectList) fut.get();
-            valuesFromServer.setKeys(keys);
+          VersionedObjectList valuesFromServer = (VersionedObjectList) fut.get();
+          valuesFromServer.setKeys(keys);
-            for (VersionedObjectList.Iterator it = valuesFromServer.iterator(); it.hasNext();) {
-              VersionedObjectList.Entry entry = it.next();
-              Object key = entry.getKey();
-              Object value = entry.getValue();
-              if (!entry.isKeyNotOnServer()) {
-                if (value instanceof Throwable) {
-                  logger.warn(String.format(
-                      "%s: Caught the following exception attempting to get value for key=%s",
-                      new Object[] {value, key}),
-                      (Throwable) value);
-                }
+          for (VersionedObjectList.Iterator it = valuesFromServer.iterator(); it.hasNext();) {
+            VersionedObjectList.Entry entry = it.next();
+            Object key = entry.getKey();
+            Object value = entry.getValue();
+            if (!entry.isKeyNotOnServer()) {
+              if (value instanceof Throwable) {
+                logger.warn(String.format(
+                    "%s: Caught the following exception attempting to get value for key=%s",
+                    value, key),
+                    (Throwable) value);
-            if (logger.isDebugEnabled()) {
-              logger.debug("GetAllOp#got result from {}: {}", server, valuesFromServer);
-            }
-            resultMap.put(server, valuesFromServer);
-          } catch (InterruptedException e) {
-            throw new InternalGemFireException(e.getMessage());
-          } catch (ExecutionException ee) {
-            if (ee.getCause() instanceof ServerOperationException) {
-              if (logger.isDebugEnabled()) {
-                logger.debug("GetAllOp#ExecutionException.ServerOperationException : Caused by :{}",
-                    ee.getCause());
-              }
-              throw (ServerOperationException) ee.getCause();
-            } else if (ee.getCause() instanceof ServerConnectivityException) {
-              if (logger.isDebugEnabled()) {
-                logger.debug(
-                    "GetAllOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}",
-                    ee.getCause(), server);
-              }
-              try {
-                cms = region.getCache().getClientMetadataService();
-              } catch (CacheClosedException e) {
-                return null;
-              }
-              cms.removeBucketServerLocation(server);
-              cms.scheduleGetPRMetaData((LocalRegion) region, false);
-              resultMap.put(server, ee.getCause());
-            } else {
-              throw executionThrowable(ee.getCause());
-            }
+          if (logger.isDebugEnabled()) {
+            logger.debug("GetAllOp#got result from {}: {}", server, valuesFromServer);
+          }
+          resultMap.put(server, valuesFromServer);
+        } catch (InterruptedException e) {
+          throw new InternalGemFireException(e.getMessage());
+        } catch (ExecutionException ee) {
+          if (ee.getCause() instanceof ServerOperationException) {
+            if (logger.isDebugEnabled()) {
+              logger.debug("GetAllOp#ExecutionException.ServerOperationException : Caused by :{}",
+                  ee.getCause());
+            }
+            throw (ServerOperationException) ee.getCause();
+          } else if (ee.getCause() instanceof ServerConnectivityException) {
+            if (logger.isDebugEnabled()) {
+              logger.debug(
+                  "GetAllOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}",
+                  ee.getCause(), server);
+            }
+            try {
+              cms = region.getCache().getClientMetadataService();
+            } catch (CacheClosedException e) {
+              return null;
+            }
+            cms.removeBucketServerLocation(server);
+            cms.scheduleGetPRMetaData(region, false);
+            resultMap.put(server, ee.getCause());
+          } else {
+            throw executionThrowable(ee.getCause());
+          }
-        return resultMap;
+      return resultMap;
