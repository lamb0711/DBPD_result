Merge pull request #3229 from upthewaterspout/feature/make-immutable-GEODE-6380

GEODE-6380: Fixing a number of static fields to be immutable
-import org.apache.geode.annotations.internal.MakeImmutable;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsReceivedId;
+  private static final int eventsReceivedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsQueuedId;
+  private static final int eventsQueuedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsNotQueuedConflatedId;
+  private static final int eventsNotQueuedConflatedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventQueueTimeId;
+  private static final int eventQueueTimeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventQueueSizeId;
+  private static final int eventQueueSizeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int secondaryEventQueueSizeId;
+  private static final int secondaryEventQueueSizeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsProcessedByPQRMId;
+  private static final int eventsProcessedByPQRMId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventTmpQueueSizeId;
+  private static final int eventTmpQueueSizeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsDistributedId;
+  private static final int eventsDistributedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsExceedingAlertThresholdId;
+  private static final int eventsExceedingAlertThresholdId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int batchDistributionTimeId;
+  private static final int batchDistributionTimeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int batchesDistributedId;
+  private static final int batchesDistributedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int batchesRedistributedId;
+  private static final int batchesRedistributedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static final int batchesResizedId;
+  private static final int batchesResizedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedTokensAddedByPrimaryId;
+  private static final int unprocessedTokensAddedByPrimaryId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedEventsAddedBySecondaryId;
+  private static final int unprocessedEventsAddedBySecondaryId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedEventsRemovedByPrimaryId;
+  private static final int unprocessedEventsRemovedByPrimaryId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedTokensRemovedBySecondaryId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedEventsRemovedByTimeoutId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedTokensRemovedByTimeoutId;
+  private static final int unprocessedTokensRemovedBySecondaryId;
+  private static final int unprocessedEventsRemovedByTimeoutId;
+  private static final int unprocessedTokensRemovedByTimeoutId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedEventMapSizeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int unprocessedTokenMapSizeId;
+  private static final int unprocessedEventMapSizeId;
+  private static final int unprocessedTokenMapSizeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int conflationIndexesMapSizeId;
+  private static final int conflationIndexesMapSizeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsFilteredId;
+  private static final int eventsFilteredId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int notQueuedEventsId;
+  private static final int notQueuedEventsId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsDroppedDueToPrimarySenderNotRunningId;
+  private static final int eventsDroppedDueToPrimarySenderNotRunningId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int eventsConflatedFromBatchesId;
+  private static final int eventsConflatedFromBatchesId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int loadBalancesCompletedId;
+  private static final int loadBalancesCompletedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int loadBalancesInProgressId;
+  private static final int loadBalancesInProgressId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int loadBalanceTimeId;
+  private static final int loadBalanceTimeId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int synchronizationEventsEnqueuedId;
+  private static final int synchronizationEventsEnqueuedId;
-  @MakeImmutable("This field is also set by AsyncEventQUeueStats???")
-  protected static int synchronizationEventsProvidedId;
+  private static final int synchronizationEventsProvidedId;
-    type = f.createType(typeName, "Stats for activity in the GatewaySender",
+    type = createType(f, typeName, "Stats for activity in the GatewaySender");
+
+    // Initialize id fields
+    eventsReceivedId = type.nameToId(EVENTS_RECEIVED);
+    eventsQueuedId = type.nameToId(EVENTS_QUEUED);
+    eventsNotQueuedConflatedId = type.nameToId(EVENTS_NOT_QUEUED_CONFLATED);
+    eventQueueTimeId = type.nameToId(EVENT_QUEUE_TIME);
+    eventQueueSizeId = type.nameToId(EVENT_QUEUE_SIZE);
+    secondaryEventQueueSizeId = type.nameToId(SECONDARY_EVENT_QUEUE_SIZE);
+    eventsProcessedByPQRMId = type.nameToId(EVENTS_PROCESSED_BY_PQRM);
+    eventTmpQueueSizeId = type.nameToId(TMP_EVENT_QUEUE_SIZE);
+    eventsDistributedId = type.nameToId(EVENTS_DISTRIBUTED);
+    eventsExceedingAlertThresholdId = type.nameToId(EVENTS_EXCEEDING_ALERT_THRESHOLD);
+    batchDistributionTimeId = type.nameToId(BATCH_DISTRIBUTION_TIME);
+    batchesDistributedId = type.nameToId(BATCHES_DISTRIBUTED);
+    batchesRedistributedId = type.nameToId(BATCHES_REDISTRIBUTED);
+    batchesResizedId = type.nameToId(BATCHES_RESIZED);
+    unprocessedTokensAddedByPrimaryId = type.nameToId(UNPROCESSED_TOKENS_ADDED_BY_PRIMARY);
+    unprocessedEventsAddedBySecondaryId = type.nameToId(UNPROCESSED_EVENTS_ADDED_BY_SECONDARY);
+    unprocessedEventsRemovedByPrimaryId = type.nameToId(UNPROCESSED_EVENTS_REMOVED_BY_PRIMARY);
+    unprocessedTokensRemovedBySecondaryId = type.nameToId(UNPROCESSED_TOKENS_REMOVED_BY_SECONDARY);
+    unprocessedEventsRemovedByTimeoutId = type.nameToId(UNPROCESSED_EVENTS_REMOVED_BY_TIMEOUT);
+    unprocessedTokensRemovedByTimeoutId = type.nameToId(UNPROCESSED_TOKENS_REMOVED_BY_TIMEOUT);
+    unprocessedEventMapSizeId = type.nameToId(UNPROCESSED_EVENT_MAP_SIZE);
+    unprocessedTokenMapSizeId = type.nameToId(UNPROCESSED_TOKEN_MAP_SIZE);
+    conflationIndexesMapSizeId = type.nameToId(CONFLATION_INDEXES_MAP_SIZE);
+    notQueuedEventsId = type.nameToId(NOT_QUEUED_EVENTS);
+    eventsDroppedDueToPrimarySenderNotRunningId =
+        type.nameToId(EVENTS_DROPPED_DUE_TO_PRIMARY_SENDER_NOT_RUNNING);
+    eventsFilteredId = type.nameToId(EVENTS_FILTERED);
+    eventsConflatedFromBatchesId = type.nameToId(EVENTS_CONFLATED_FROM_BATCHES);
+    loadBalancesCompletedId = type.nameToId(LOAD_BALANCES_COMPLETED);
+    loadBalancesInProgressId = type.nameToId(LOAD_BALANCES_IN_PROGRESS);
+    loadBalanceTimeId = type.nameToId(LOAD_BALANCE_TIME);
+    synchronizationEventsEnqueuedId = type.nameToId(SYNCHRONIZATION_EVENTS_ENQUEUED);
+    synchronizationEventsProvidedId = type.nameToId(SYNCHRONIZATION_EVENTS_PROVIDED);
+  }
+
+  protected static StatisticsType createType(final StatisticsTypeFactory f, final String typeName,
+      final String description) {
+    return f.createType(typeName, description,
-            f.createIntCounter(EVENTS_RECEIVED, "Number of events received by this Sender.",
+            f.createIntCounter(EVENTS_RECEIVED, "Number of events received by this queue.",
-            f.createIntGauge(SECONDARY_EVENT_QUEUE_SIZE, "Size of secondary event queue.",
+            f.createIntGauge(SECONDARY_EVENT_QUEUE_SIZE, "Size of the secondary event queue.",
-            f.createIntGauge(TMP_EVENT_QUEUE_SIZE, "Size of the temporary events.", "operations",
-                false),
+            f.createIntGauge(TMP_EVENT_QUEUE_SIZE, "Size of the temporary events queue.",
+                "operations", false),
-                "Total time spent distributing batches of events to other gateway receivers.",
-                "nanoseconds"),
+                "Total time spent distributing batches of events to receivers.", "nanoseconds"),
-
-    // Initialize id fields
-    eventsReceivedId = type.nameToId(EVENTS_RECEIVED);
-    eventsQueuedId = type.nameToId(EVENTS_QUEUED);
-    eventsNotQueuedConflatedId = type.nameToId(EVENTS_NOT_QUEUED_CONFLATED);
-    eventQueueTimeId = type.nameToId(EVENT_QUEUE_TIME);
-    eventQueueSizeId = type.nameToId(EVENT_QUEUE_SIZE);
-    secondaryEventQueueSizeId = type.nameToId(SECONDARY_EVENT_QUEUE_SIZE);
-    eventsProcessedByPQRMId = type.nameToId(EVENTS_PROCESSED_BY_PQRM);
-    eventTmpQueueSizeId = type.nameToId(TMP_EVENT_QUEUE_SIZE);
-    eventsDistributedId = type.nameToId(EVENTS_DISTRIBUTED);
-    eventsExceedingAlertThresholdId = type.nameToId(EVENTS_EXCEEDING_ALERT_THRESHOLD);
-    batchDistributionTimeId = type.nameToId(BATCH_DISTRIBUTION_TIME);
-    batchesDistributedId = type.nameToId(BATCHES_DISTRIBUTED);
-    batchesRedistributedId = type.nameToId(BATCHES_REDISTRIBUTED);
-    batchesResizedId = type.nameToId(BATCHES_RESIZED);
-    unprocessedTokensAddedByPrimaryId = type.nameToId(UNPROCESSED_TOKENS_ADDED_BY_PRIMARY);
-    unprocessedEventsAddedBySecondaryId = type.nameToId(UNPROCESSED_EVENTS_ADDED_BY_SECONDARY);
-    unprocessedEventsRemovedByPrimaryId = type.nameToId(UNPROCESSED_EVENTS_REMOVED_BY_PRIMARY);
-    unprocessedTokensRemovedBySecondaryId = type.nameToId(UNPROCESSED_TOKENS_REMOVED_BY_SECONDARY);
-    unprocessedEventsRemovedByTimeoutId = type.nameToId(UNPROCESSED_EVENTS_REMOVED_BY_TIMEOUT);
-    unprocessedTokensRemovedByTimeoutId = type.nameToId(UNPROCESSED_TOKENS_REMOVED_BY_TIMEOUT);
-    unprocessedEventMapSizeId = type.nameToId(UNPROCESSED_EVENT_MAP_SIZE);
-    unprocessedTokenMapSizeId = type.nameToId(UNPROCESSED_TOKEN_MAP_SIZE);
-    conflationIndexesMapSizeId = type.nameToId(CONFLATION_INDEXES_MAP_SIZE);
-    notQueuedEventsId = type.nameToId(NOT_QUEUED_EVENTS);
-    eventsDroppedDueToPrimarySenderNotRunningId =
-        type.nameToId(EVENTS_DROPPED_DUE_TO_PRIMARY_SENDER_NOT_RUNNING);
-    eventsFilteredId = type.nameToId(EVENTS_FILTERED);
-    eventsConflatedFromBatchesId = type.nameToId(EVENTS_CONFLATED_FROM_BATCHES);
-    loadBalancesCompletedId = type.nameToId(LOAD_BALANCES_COMPLETED);
-    loadBalancesInProgressId = type.nameToId(LOAD_BALANCES_IN_PROGRESS);
-    loadBalanceTimeId = type.nameToId(LOAD_BALANCE_TIME);
-    synchronizationEventsEnqueuedId = type.nameToId(SYNCHRONIZATION_EVENTS_ENQUEUED);
-    synchronizationEventsProvidedId = type.nameToId(SYNCHRONIZATION_EVENTS_PROVIDED);
