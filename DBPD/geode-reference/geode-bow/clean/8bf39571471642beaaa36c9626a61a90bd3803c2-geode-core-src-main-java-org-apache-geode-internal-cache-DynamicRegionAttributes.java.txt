Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class <code>DynamicRegionAttributes</code> encapsulates the
- * <code>RegionAttributes</code> for dynamically-created regions.
+ * Class <code>DynamicRegionAttributes</code> encapsulates the <code>RegionAttributes</code> for
+ * dynamically-created regions.
-//   public Scope scope = null;
-//   public MirrorType mirror_type = null;
+  // public Scope scope = null;
+  // public MirrorType mirror_type = null;
-  public void toData( DataOutput out ) throws IOException {
-    DataSerializer.writeString( this.name, out );
-    DataSerializer.writeString( this.rootRegionName, out );
-//     DataSerializer.writeObject( this.scope, out );
-//     DataSerializer.writeObject( this.mirror_type, out );
+  public void toData(DataOutput out) throws IOException {
+    DataSerializer.writeString(this.name, out);
+    DataSerializer.writeString(this.rootRegionName, out);
+    // DataSerializer.writeObject( this.scope, out );
+    // DataSerializer.writeObject( this.mirror_type, out );
-  public void fromData( DataInput in ) throws IOException, ClassNotFoundException {
-    this.name = DataSerializer.readString( in );
-    this.rootRegionName = DataSerializer.readString( in );
-//     this.scope = ( Scope ) DataSerializer.readObject( in );
-//     this.mirror_type = ( MirrorType ) DataSerializer.readObject( in );
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    this.name = DataSerializer.readString(in);
+    this.rootRegionName = DataSerializer.readString(in);
+    // this.scope = ( Scope ) DataSerializer.readObject( in );
+    // this.mirror_type = ( MirrorType ) DataSerializer.readObject( in );
