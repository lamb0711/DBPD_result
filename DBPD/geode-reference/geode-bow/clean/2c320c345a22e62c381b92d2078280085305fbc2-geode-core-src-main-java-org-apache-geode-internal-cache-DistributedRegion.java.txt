GEODE-5748: Hold a write lock during cleanUpAfterFailedGII (#2501)

 * Hold write lock when cleanUpAfterFailedGII.
 * Hold read lock when cache operation is performed on the farside if region is not yet initialized.
 * Also hold read lock when transaction is performed on the farside if region not initialized yet.

+import java.util.concurrent.locks.ReentrantReadWriteLock;
+  private final ReentrantReadWriteLock failedInitialImageLock = new ReentrantReadWriteLock(true);
-      RegionVersionVector rvv = getVersionVector();
-      if (rvv != null) {
-        rvv.lockForClear(getFullPath(), getDistributionManager(), getMyId());
-      }
+      lockFailedInitialImageWriteLock();
-        if (rvv != null) {
-          rvv.unlockForClear(getMyId());
-        }
+        unlockFailedInitialImageWriteLock();
+  void lockFailedInitialImageWriteLock() {
+    failedInitialImageLock.writeLock().lock();
+  }
+
+  void unlockFailedInitialImageWriteLock() {
+    failedInitialImageLock.writeLock().unlock();
+  }
+
+  void lockFailedInitialImageReadLock() {
+    failedInitialImageLock.readLock().lock();
+  }
+
+  void unlockFailedInitialImageReadLock() {
+    failedInitialImageLock.readLock().unlock();
+  }
+
+  @Override
+  public boolean lockWhenRegionIsInitializing() {
+    if (!isInitialized()) {
+      lockFailedInitialImageReadLock();
+      return true;
+    }
+    return false;
+  }
+
+  @Override
+  public void unlockWhenRegionIsInitializing() {
+    unlockFailedInitialImageReadLock();
+  }
+
+    regionMap.lockForCacheModification(internalRegion, event);
+    final boolean locked = internalRegion.lockWhenRegionIsInitializing();
-      regionMap.lockForCacheModification(internalRegion, event);
+      if (locked) {
+        internalRegion.unlockWhenRegionIsInitializing();
+      }
