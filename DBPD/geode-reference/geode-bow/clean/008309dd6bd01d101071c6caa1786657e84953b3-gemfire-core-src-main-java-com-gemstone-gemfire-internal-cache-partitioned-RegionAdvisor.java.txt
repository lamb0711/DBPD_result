Merge branch 'release/1.0.0-incubating.M1'

- * ========================================================================= 
- * (c)Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved. 
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * =========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
-import com.gemstone.gemfire.internal.cache.control.InternalResourceManager;
+import com.gemstone.gemfire.internal.cache.control.MemoryThresholds;
+import com.gemstone.gemfire.internal.cache.control.ResourceAdvisor;
-      InternalResourceManager irm = getPartitionedRegion().
-                                getCache().getResourceManager();
-      boolean sick = irm.getHeapCriticalMembers().contains(member);
+      ResourceAdvisor advisor = getPartitionedRegion().
+                                getCache().getResourceAdvisor();
+      boolean sick = advisor.adviseCritialMembers().contains(member);
-    if (InternalResourceManager.isLowMemoryExceptionDisabled()) {
+    if (MemoryThresholds.isLowMemoryExceptionDisabled()) {
+  public boolean waitForLocalBucketStorage(int bucketId)
+  {
+    Assert.assertTrue(this.buckets != null);
+    return this.buckets[bucketId].getBucketAdvisor()
+         .waitForStorage();
+  }
+  
