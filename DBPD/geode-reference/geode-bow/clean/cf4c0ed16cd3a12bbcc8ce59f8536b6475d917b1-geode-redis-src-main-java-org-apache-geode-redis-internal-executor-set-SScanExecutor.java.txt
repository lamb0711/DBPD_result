GEODE-8089: change redis set ops to use functions (#5058)

* scard now uses function
* sismember now uses function
* srandmember now uses a function
* spop now uses a function
* sscan now uses a function
-import java.util.ArrayList;
-import java.util.Collection;
+
-import java.util.Set;
-import org.apache.geode.cache.Region;
-    Region<ByteArrayWrapper, RedisSet> region = getRegion(context);
-    Set<ByteArrayWrapper> set = RedisSet.members(region, key);
-
-    if (set == null) {
-      command.setResponse(
-          Coder.getScanResponse(context.getByteBufAllocator(), new ArrayList<String>()));
-      return;
-    }
-    @SuppressWarnings("unchecked")
-    List<ByteArrayWrapper> returnList =
-        (List<ByteArrayWrapper>) getIteration(new ArrayList<>(set), matchPattern,
-            count, cursor);
-
+    RedisSetCommands redisSetCommands =
+        new RedisSetCommandsFunctionExecutor(context.getRegionProvider().getSetRegion());
+    List<Object> returnList = redisSetCommands.sscan(key, matchPattern, count, cursor);
-
-  private Region<ByteArrayWrapper, RedisSet> getRegion(
-      ExecutionHandlerContext context) {
-    return context.getRegionProvider().getSetRegion();
-  }
-
-  @SuppressWarnings("unchecked")
-  @Override
-  protected List<?> getIteration(Collection<?> list, Pattern matchPattern, int count, int cursor) {
-    List<Object> returnList = new ArrayList<>();
-    int size = list.size();
-    int beforeCursor = 0;
-    int numElements = 0;
-    int i = -1;
-    for (ByteArrayWrapper value : (Collection<ByteArrayWrapper>) list) {
-      String key = Coder.bytesToString(value.toBytes());
-      i++;
-      if (beforeCursor < cursor) {
-        beforeCursor++;
-        continue;
-      } else if (numElements < count) {
-        if (matchPattern != null) {
-          if (matchPattern.matcher(key).matches()) {
-            returnList.add(value);
-            numElements++;
-          }
-        } else {
-          returnList.add(value);
-          numElements++;
-        }
-      } else {
-        break;
-      }
-    }
-
-    if (i == size - 1) {
-      returnList.add(0, String.valueOf(0));
-    } else {
-      returnList.add(0, String.valueOf(i));
-    }
-    return returnList;
-  }
