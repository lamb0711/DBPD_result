GEODE-420: Initial Alias defintion and removal of deprecated SSL-ENABLED properties

- *
- * <P>
- *
+ * <p>
+ * <p>
+ * <p>
- *
- *
- *
-public class DistributionConfigImpl
-  extends AbstractDistributionConfig
-  implements Serializable {
+public class DistributionConfigImpl extends AbstractDistributionConfig implements Serializable {
-  /** The name of the distribution manager/shared memory connection */
+  /**
+   * The name of the distribution manager/shared memory connection
+   */
-  /** The tcp/ip port used for distribution */
+  /**
+   * The tcp/ip port used for distribution
+   */
-  /** The multicast port used for distribution */
+  /**
+   * The multicast port used for distribution
+   */
-  /** The multicast ttl used for distribution */
+  /**
+   * The multicast ttl used for distribution
+   */
-  /** Comma-delimited list of the application roles performed by this member. */
+  /**
+   * Comma-delimited list of the application roles performed by this member.
+   */
-  /** The multicast address used for distribution */
+  /**
+   * The multicast address used for distribution
+   */
-  /** The address server socket's should listen on */
+  /**
+   * The address server socket's should listen on
+   */
-  /** The address server socket's in a  client-server topology should listen on */
+  /**
+   * The address server socket's in a  client-server topology should listen on
+   */
-  /** The locations of the distribution locators */
+  /**
+   * The locations of the distribution locators
+   */
-  
-  /** The amount of time to wait for a locator to appear when starting up */
+
+  /**
+   * The amount of time to wait for a locator to appear when starting up
+   */
-  
-  /** The name of the log file */
+
+  /**
+   * The name of the log file
+   */
-  
+
-  
-  /** The level at which log messages are logged
-   *
+
+  /**
+   * The level at which log messages are logged
-  /** bind-address and host of locator to start */
+  /**
+   * bind-address and host of locator to start
+   */
-  /** port of locator to start.  use bind-address as host name */
+  /**
+   * port of locator to start.  use bind-address as host name
+   */
-  /** Is statistic sampling enabled? */
+  /**
+   * Is statistic sampling enabled?
+   */
-  /** The rate (in milliseconds) at which statistics are sampled */
+  /**
+   * The rate (in milliseconds) at which statistics are sampled
+   */
-  /** The name of the file to which statistics should be archived */
+  /**
+   * The name of the file to which statistics should be archived
+   */
-  /** The amount of time to wait for a ACK message */
+  /**
+   * The amount of time to wait for a ACK message
+   */
-  /** The name of an XML file used to initialize the cache */
+  /**
+   * The name of an XML file used to initialize the cache
+   */
-  protected boolean sslEnabled = DEFAULT_SSL_ENABLED;
-  protected String sslProtocols = DEFAULT_SSL_PROTOCOLS;
-  protected String sslCiphers = DEFAULT_SSL_CIPHERS;
-  protected boolean sslRequireAuthentication = DEFAULT_SSL_REQUIRE_AUTHENTICATION;
+  private boolean clusterSSLEnabled = DEFAULT_CLUSTER_SSL_ENABLED;
+  private String clusterSSLProtocols = DEFAULT_CLUSTER_SSL_PROTOCOLS;
+  private String clusterSSLCiphers = DEFAULT_CLUSTER_SSL_CIPHERS;
+  private boolean clusterSSLRequireAuthentication = DEFAULT_CLUSTER_SSL_REQUIRE_AUTHENTICATION;
+  private String clusterSSLKeyStore = DEFAULT_CLUSTER_SSL_KEYSTORE;
+  private String clusterSSLKeyStoreType = DEFAULT_CLUSTER_SSL_KEYSTORE_TYPE;
+  private String clusterSSLKeyStorePassword = DEFAULT_CLUSTER_SSL_KEYSTORE_PASSWORD;
+  private String clusterSSLTrustStore = DEFAULT_CLUSTER_SSL_TRUSTSTORE;
+  private String clusterSSLTrustStorePassword = DEFAULT_CLUSTER_SSL_TRUSTSTORE_PASSWORD;
+  private String clusterSSLAlias = DEFAULT_CLUSTER_SSL_ALIAS;
-  protected boolean clusterSSLEnabled = DEFAULT_CLUSTER_SSL_ENABLED;
-  protected String clusterSSLProtocols = DEFAULT_CLUSTER_SSL_PROTOCOLS;
-  protected String clusterSSLCiphers = DEFAULT_CLUSTER_SSL_CIPHERS;
-  protected boolean clusterSSLRequireAuthentication = DEFAULT_CLUSTER_SSL_REQUIRE_AUTHENTICATION;
-  protected String clusterSSLKeyStore = DEFAULT_CLUSTER_SSL_KEYSTORE;
-  protected String clusterSSLKeyStoreType = DEFAULT_CLUSTER_SSL_KEYSTORE_TYPE;
-  protected String clusterSSLKeyStorePassword = DEFAULT_CLUSTER_SSL_KEYSTORE_PASSWORD;
-  protected String clusterSSLTrustStore = DEFAULT_CLUSTER_SSL_TRUSTSTORE;
-  protected String clusterSSLTrustStorePassword = DEFAULT_CLUSTER_SSL_TRUSTSTORE_PASSWORD;
-  
-  /** multicast send buffer size, in bytes */
+  /**
+   * multicast send buffer size, in bytes
+   */
-  /** multicast receive buffer size, in bytes */
+  /**
+   * multicast receive buffer size, in bytes
+   */
-  /** flow-of-control parameters for multicast messaging */
+  /**
+   * flow-of-control parameters for multicast messaging
+   */
-  /** datagram socket send buffer size, in bytes */
+  /**
+   * datagram socket send buffer size, in bytes
+   */
-  /** datagram socket receive buffer size, in bytes */
+  /**
+   * datagram socket receive buffer size, in bytes
+   */
-  /** max datagram message size, in bytes.  This should be < 64k */
+  /**
+   * max datagram message size, in bytes.  This should be < 64k
+   */
-  /** whether tcp/ip sockets should be disabled */
+  /**
+   * whether tcp/ip sockets should be disabled
+   */
-  /** whether time statistics should be enabled for the distributed system */
+  /**
+   * whether time statistics should be enabled for the distributed system
+   */
-  /** member contact timeout, in milliseconds, for failure detection */
+  /**
+   * member contact timeout, in milliseconds, for failure detection
+   */
-  
-  /** the Jgroups port ranges allowed */
+
+  /**
+   * the Jgroups port ranges allowed
+   */
-  
+
-   * */
+   */
-   * */
+   */
-  /** @since GemFire 5.7 */
+  /**
+   * @since GemFire 5.7
+   */
-  /** The id of the durable client */
+  /**
+   * The id of the durable client
+   */
-  /** The timeout of the durable client */
+  /**
+   * The timeout of the durable client
+   */
-  /** The client authentication initialization method name*/
+  /**
+   * The client authentication initialization method name
+   */
-  /** The client authenticating method name*/
+  /**
+   * The client authenticating method name
+   */
-  /** The peer authentication initialization method name*/
+  /**
+   * The peer authentication initialization method name
+   */
-  /** The peer authenticating method name*/
+  /**
+   * The peer authenticating method name
+   */
-  /** The client authorization method name*/
+  /**
+   * The client authorization method name
+   */
-  /** The post-processing client authorization method name*/
+  /**
+   * The post-processing client authorization method name
+   */
-   *
-  /** whether network partition detection algorithms are enabled */
+  /**
+   * whether network partition detection algorithms are enabled
+   */
-  
-  /** whether auto reconnect after network partition is disabled */
+
+  /**
+   * whether auto reconnect after network partition is disabled
+   */
-  /** The security log file */
+  /**
+   * The security log file
+   */
-  /** The p2p membership check timeout */
+  /**
+   * The p2p membership check timeout
+   */
-  /** The member security credentials */
+  /**
+   * The member security credentials
+   */
-  /** The User defined properties to be used for cache.xml replacements */
+  /**
+   * The User defined properties to be used for cache.xml replacements
+   */
-  /** whether to remove unresponsive client or not */
+  /**
+   * whether to remove unresponsive client or not
+   */
-  /** Is delta propagation enabled or not **/
+  /**
+   * Is delta propagation enabled or not
+   **/
-  
+
-  
+
-  /** The locations of the remote distribution locators */
+  /**
+   * The locations of the remote distribution locators
+   */
-  
+
-  
+
-  /** holds the ssl properties specified in gfsecurity.properties */
+  /**
+   * holds the ssl properties specified in gfsecurity.properties
+   */
-  
-  /** holds the ssl properties specified in gfsecurity.properties */
+
+  /**
+   * holds the ssl properties specified in gfsecurity.properties
+   */
-  
+
-  
+
-  
-  /** Are distributed transactions enabled or not */
+
+  /**
+   * Are distributed transactions enabled or not
+   */
-  
+
-  
+
-  
+
-  
+
-  private int jmxManagerHttpPort = DEFAULT_HTTP_SERVICE_PORT; 
+  private int jmxManagerHttpPort = DEFAULT_HTTP_SERVICE_PORT;
- 
-  private boolean jmxManagerSSL = DEFAULT_JMX_MANAGER_SSL;
+
-  
-  protected String jmxManagerSSLKeyStore = DEFAULT_JMX_MANAGER_SSL_KEYSTORE;
-  protected String jmxManagerSSLKeyStoreType = DEFAULT_JMX_MANAGER_SSL_KEYSTORE_TYPE;
-  protected String jmxManagerSSLKeyStorePassword = DEFAULT_JMX_MANAGER_SSL_KEYSTORE_PASSWORD;
-  protected String jmxManagerSSLTrustStore = DEFAULT_JMX_MANAGER_SSL_TRUSTSTORE;
-  protected String jmxManagerSSLTrustStorePassword = DEFAULT_JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD;
-  
+
+  private String jmxManagerSSLKeyStore = DEFAULT_JMX_MANAGER_SSL_KEYSTORE;
+  private String jmxManagerSSLKeyStoreType = DEFAULT_JMX_MANAGER_SSL_KEYSTORE_TYPE;
+  private String jmxManagerSSLKeyStorePassword = DEFAULT_JMX_MANAGER_SSL_KEYSTORE_PASSWORD;
+  private String jmxManagerSSLTrustStore = DEFAULT_JMX_MANAGER_SSL_TRUSTSTORE;
+  private String jmxManagerSSLTrustStorePassword = DEFAULT_JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD;
+
+  private String jmxManagerSSLAlias = clusterSSLAlias;
+
-  
-  protected String serverSSLKeyStore = DEFAULT_SERVER_SSL_KEYSTORE;
-  protected String serverSSLKeyStoreType = DEFAULT_SERVER_SSL_KEYSTORE_TYPE;
-  protected String serverSSLKeyStorePassword = DEFAULT_SERVER_SSL_KEYSTORE_PASSWORD;
-  protected String serverSSLTrustStore = DEFAULT_SERVER_SSL_TRUSTSTORE;
-  protected String serverSSLTrustStorePassword = DEFAULT_SERVER_SSL_TRUSTSTORE_PASSWORD;
+
+  private String serverSSLKeyStore = DEFAULT_SERVER_SSL_KEYSTORE;
+  private String serverSSLKeyStoreType = DEFAULT_SERVER_SSL_KEYSTORE_TYPE;
+  private String serverSSLKeyStorePassword = DEFAULT_SERVER_SSL_KEYSTORE_PASSWORD;
+  private String serverSSLTrustStore = DEFAULT_SERVER_SSL_TRUSTSTORE;
+  private String serverSSLTrustStorePassword = DEFAULT_SERVER_SSL_TRUSTSTORE_PASSWORD;
+
+  private String serverSSLAlias = clusterSSLAlias;
-  
-  protected String gatewaySSLKeyStore = DEFAULT_GATEWAY_SSL_KEYSTORE;
-  protected String gatewaySSLKeyStoreType = DEFAULT_GATEWAY_SSL_KEYSTORE_TYPE;
-  protected String gatewaySSLKeyStorePassword = DEFAULT_GATEWAY_SSL_KEYSTORE_PASSWORD;
-  protected String gatewaySSLTrustStore = DEFAULT_GATEWAY_SSL_TRUSTSTORE;
-  protected String gatewaySSLTrustStorePassword = DEFAULT_GATEWAY_SSL_TRUSTSTORE_PASSWORD;
-  
-  
+
+  private String gatewaySSLKeyStore = DEFAULT_GATEWAY_SSL_KEYSTORE;
+  private String gatewaySSLKeyStoreType = DEFAULT_GATEWAY_SSL_KEYSTORE_TYPE;
+  private String gatewaySSLKeyStorePassword = DEFAULT_GATEWAY_SSL_KEYSTORE_PASSWORD;
+  private String gatewaySSLTrustStore = DEFAULT_GATEWAY_SSL_TRUSTSTORE;
+  private String gatewaySSLTrustStorePassword = DEFAULT_GATEWAY_SSL_TRUSTSTORE_PASSWORD;
+
+  private String gatewaySSLAlias = clusterSSLAlias;
+
+
-  
-  protected String httpServiceSSLKeyStore = DEFAULT_HTTP_SERVICE_SSL_KEYSTORE;
-  protected String httpServiceSSLKeyStoreType = DEFAULT_HTTP_SERVICE_SSL_KEYSTORE_TYPE;
-  protected String httpServiceSSLKeyStorePassword = DEFAULT_HTTP_SERVICE_SSL_KEYSTORE_PASSWORD;
-  protected String httpServiceSSLTrustStore = DEFAULT_HTTP_SERVICE_SSL_TRUSTSTORE;
-  protected String httpServiceSSLTrustStorePassword = DEFAULT_HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD;
-  
+
+  private String httpServiceSSLKeyStore = DEFAULT_HTTP_SERVICE_SSL_KEYSTORE;
+  private String httpServiceSSLKeyStoreType = DEFAULT_HTTP_SERVICE_SSL_KEYSTORE_TYPE;
+  private String httpServiceSSLKeyStorePassword = DEFAULT_HTTP_SERVICE_SSL_KEYSTORE_PASSWORD;
+  private String httpServiceSSLTrustStore = DEFAULT_HTTP_SERVICE_SSL_TRUSTSTORE;
+  private String httpServiceSSLTrustStorePassword = DEFAULT_HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD;
+
+  private String httpServiceSSLAlias = clusterSSLAlias;
+
-  
+
-  
-  /** "off-heap-memory-size" with value of "" or "<size>[g|m]" */
+
+  /**
+   * "off-heap-memory-size" with value of "" or "<size>[g|m]"
+   */
-  
-  /** Whether pages should be locked into memory or allowed to swap to disk */
+
+  /**
+   * Whether pages should be locked into memory or allowed to swap to disk
+   */
-  
+
-    this.locators = ((DistributionConfigImpl)other).locators; 
+    this.locators = ((DistributionConfigImpl) other).locators;
-    this.startLocatorPort = ((DistributionConfigImpl)other).startLocatorPort;
+    this.startLocatorPort = ((DistributionConfigImpl) other).startLocatorPort;
-    this.sslEnabled = other.getSSLEnabled();
-    this.sslProtocols = other.getSSLProtocols();
-    this.sslCiphers = other.getSSLCiphers();
-    this.sslRequireAuthentication = other.getSSLRequireAuthentication();
-    this.clusterSSLKeyStoreType= other.getClusterSSLKeyStoreType();
-    this.clusterSSLKeyStorePassword= other.getClusterSSLKeyStorePassword();
-    this.clusterSSLTrustStore= other.getClusterSSLTrustStore();
-    this.clusterSSLTrustStorePassword= other.getClusterSSLTrustStorePassword();
+    this.clusterSSLKeyStoreType = other.getClusterSSLKeyStoreType();
+    this.clusterSSLKeyStorePassword = other.getClusterSSLKeyStorePassword();
+    this.clusterSSLTrustStore = other.getClusterSSLTrustStore();
+    this.clusterSSLTrustStorePassword = other.getClusterSSLTrustStorePassword();
-    
+
-    this.jmxManagerSSL = other.getJmxManagerSSL();
-    this.jmxManagerSSLKeyStoreType= other.getJmxManagerSSLKeyStoreType();
-    this.jmxManagerSSLKeyStorePassword= other.getJmxManagerSSLKeyStorePassword();
-    this.jmxManagerSSLTrustStore= other.getJmxManagerSSLTrustStore();
-    this.jmxManagerSSLTrustStorePassword= other.getJmxManagerSSLTrustStorePassword();
+    this.jmxManagerSSLKeyStoreType = other.getJmxManagerSSLKeyStoreType();
+    this.jmxManagerSSLKeyStorePassword = other.getJmxManagerSSLKeyStorePassword();
+    this.jmxManagerSSLTrustStore = other.getJmxManagerSSLTrustStore();
+    this.jmxManagerSSLTrustStorePassword = other.getJmxManagerSSLTrustStorePassword();
-    
+
-    this.serverSSLKeyStoreType= other.getServerSSLKeyStoreType();
-    this.serverSSLKeyStorePassword= other.getServerSSLKeyStorePassword();
-    this.serverSSLTrustStore= other.getServerSSLTrustStore();
-    this.serverSSLTrustStorePassword= other.getServerSSLTrustStorePassword();
+    this.serverSSLKeyStoreType = other.getServerSSLKeyStoreType();
+    this.serverSSLKeyStorePassword = other.getServerSSLKeyStorePassword();
+    this.serverSSLTrustStore = other.getServerSSLTrustStore();
+    this.serverSSLTrustStorePassword = other.getServerSSLTrustStorePassword();
-    
+
-    this.gatewaySSLKeyStoreType= other.getGatewaySSLKeyStoreType();
-    this.gatewaySSLKeyStorePassword= other.getGatewaySSLKeyStorePassword();
-    this.gatewaySSLTrustStore= other.getGatewaySSLTrustStore();
-    this.gatewaySSLTrustStorePassword= other.getGatewaySSLTrustStorePassword();
+    this.gatewaySSLKeyStoreType = other.getGatewaySSLKeyStoreType();
+    this.gatewaySSLKeyStorePassword = other.getGatewaySSLKeyStorePassword();
+    this.gatewaySSLTrustStore = other.getGatewaySSLTrustStore();
+    this.gatewaySSLTrustStorePassword = other.getGatewaySSLTrustStorePassword();
-    
+
-    
+
-    
+
-    
-    Map<String, ConfigSource> otherSources = ((DistributionConfigImpl)other).sourceMap;
+
+    Map<String, ConfigSource> otherSources = ((DistributionConfigImpl) other).sourceMap;
-    
+
+    this.clusterSSLAlias = other.getClusterSSLAlias();
+    this.gatewaySSLAlias = other.getGatewaySSLAlias();
+    this.httpServiceSSLAlias = other.getHTTPServiceSSLAlias();
+    this.jmxManagerSSLAlias = other.getJMXManagerSSLAlias();
+    this.serverSSLAlias = other.getServerSSLAlias();
-   *
-   * @param nonDefault
-   *        The configuration properties specified by the caller
+   * @param nonDefault The configuration properties specified by the caller
-   * 
-   * @param nonDefault
-   *          The configuration properties specified by the caller
-   * @param ignoreGemFirePropsFile
-   *          whether to skip loading distributed system properties from
-   *          gemfire.properties file
-   *          
+   * @param nonDefault The configuration properties specified by the caller
+   * @param ignoreGemFirePropsFile whether to skip loading distributed system properties from
+   * gemfire.properties file
+   *
-  
-  public DistributionConfigImpl(Properties nonDefault, 
-      boolean ignoreGemFirePropsFile) {
+
+  public DistributionConfigImpl(Properties nonDefault, boolean ignoreGemFirePropsFile) {
-  
+
-   * 
-   * @param nonDefault
-   *          The configuration properties specified by the caller
-   * @param ignoreGemFirePropsFile
-   *          whether to skip loading distributed system properties from
-   *          gemfire.properties file
-   * @param isConnected
-   *          whether to skip Validation for SSL properties and copy of ssl
-   *          properties to other ssl properties. This parameter will be used
-   *          till we provide support for ssl-* properties.
-   * 
+   * @param nonDefault The configuration properties specified by the caller
+   * @param ignoreGemFirePropsFile whether to skip loading distributed system properties from
+   * gemfire.properties file
+   * @param isConnected whether to skip Validation for SSL properties and copy of ssl
+   * properties to other ssl properties. This parameter will be used
+   * till we provide support for ssl-* properties.
+   *
-  public DistributionConfigImpl(Properties nonDefault, 
-                                boolean ignoreGemFirePropsFile, boolean isConnected) {
+  public DistributionConfigImpl(Properties nonDefault, boolean ignoreGemFirePropsFile, boolean isConnected) {
-      Map.Entry<String, String> ent = (Map.Entry<String, String>)entry; 
-      if (((String)ent.getKey()).startsWith(USERDEFINED_PREFIX_NAME)){
+      Map.Entry<String, String> ent = (Map.Entry<String, String>) entry;
+      if (((String) ent.getKey()).startsWith(USERDEFINED_PREFIX_NAME)) {
-      Map.Entry sysEntry = (Map.Entry)sysPropsIter.next();
-      String sysName = (String)sysEntry.getKey();
-      if (attNameSet.contains(sysName)
-          || sysName.startsWith(GEMFIRE_PREFIX + SECURITY_PREFIX_NAME)
-          || sysName.startsWith(GEMFIRE_PREFIX + SSL_SYSTEM_PROPS_NAME)) {
-        String sysValue = (String)sysEntry.getValue();
+      Map.Entry sysEntry = (Map.Entry) sysPropsIter.next();
+      String sysName = (String) sysEntry.getKey();
+      if (attNameSet.contains(sysName) || sysName.startsWith(GEMFIRE_PREFIX + SECURITY_PREFIX_NAME) || sysName.startsWith(GEMFIRE_PREFIX + SSL_SYSTEM_PROPS_NAME)) {
+        String sysValue = (String) sysEntry.getValue();
-    
+
-    
-    // this is case of locator and DS is started through
-    // Locator.startLocatorAndDS, In this case I don't need to validate SSL
-    // properties. This fix is till the time we support SSL properties. Once SSl
-    // properties is depprecated, boolean isConnected will be removed
-    if (!isConnected) {
-      validateOldSSLVsNewSSLProperties(props);
-    }
+
-      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT,
-          securityPeerAuthInit);
+      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT, securityPeerAuthInit);
-    if (securityPeerAuthenticator != null
-        && securityPeerAuthenticator.length() > 0) {
-      System.setProperty(SECURITY_SYSTEM_PREFIX
-          + SECURITY_PEER_AUTHENTICATOR, securityPeerAuthenticator);
+    if (securityPeerAuthenticator != null && securityPeerAuthenticator.length() > 0) {
+      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR, securityPeerAuthenticator);
-      Map.Entry entry = (Map.Entry)iter.next();
-      System.setProperty(SECURITY_SYSTEM_PREFIX + (String)entry.getKey(),
-          (String)entry.getValue());
+      Map.Entry entry = (Map.Entry) iter.next();
+      System.setProperty(SECURITY_SYSTEM_PREFIX + (String) entry.getKey(), (String) entry.getValue());
-      copySSLPropsToClusterSSLProps();
-  
-  private void validateOldSSLVsNewSSLProperties(Map props) {
-    String sslEnabledString = (String)props.get(SSL_ENABLED);
-    String clusterSSLEnabledString =(String)props.get(CLUSTER_SSL_ENABLED);
-    if(sslEnabledString != null && clusterSSLEnabledString != null){
-      boolean sslEnabled = new Boolean(sslEnabledString).booleanValue();
-      boolean clusterSSLEnabled =new Boolean(clusterSSLEnabledString).booleanValue();
-      if (sslEnabled != clusterSSLEnabled) {
-        throw new IllegalArgumentException(
-            "GemFire properties \'ssl-enabled\' and \'cluster-ssl-enabled\' can not be used at the same time and have different values. The preferred way is to use all \'cluster-ssl*\' properties instead of \'ssl-*\'.");
-      }
-    }
-    
-    String sslCipher = (String)props.get(SSL_CIPHERS);
-    String clusterSSLCipher = (String)props.get(CLUSTER_SSL_CIPHERS);
-    if (sslCipher != null && clusterSSLCipher != null) {
-      if ( !sslCipher.equals(clusterSSLCipher) ) {
-        throw new IllegalArgumentException(
-          "GemFire properties \'ssl-cipher\' and \'cluster-ssl-cipher\' can not be used at the same time and have different values. The preferred way is to use all \'cluster-ssl*\' properties instead of \'ssl-*\'.");
-      }
-    }
-    String sslProtocol = (String)props.get(SSL_PROTOCOLS);
-    String clusterSSLProtocol = (String)props.get(CLUSTER_SSL_PROTOCOLS);
-    if (sslProtocol != null && clusterSSLProtocol != null) {
-      if ( !sslProtocol.equals(clusterSSLProtocol) ) {
-        throw new IllegalArgumentException(
-          "GemFire properties \'ssl-protocols\' and \'cluster-ssl-protocols\' can not be used at the same time and have different values. The preferred way is to use all \'cluster-ssl*\' properties instead of \'ssl-*\'.");
-      }
-    }
-    
-    String sslReqAuthString = (String)props.get(SSL_REQUIRE_AUTHENTICATION);
-    String clusterReqAuthString =(String)props.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION);
-    if(sslReqAuthString != null && clusterReqAuthString != null){
-      boolean sslReqAuth = new Boolean(sslReqAuthString).booleanValue();
-      boolean clusterSSLReqAuth =new Boolean(clusterReqAuthString).booleanValue();
-      if (sslReqAuth != clusterSSLReqAuth) {
-        throw new IllegalArgumentException(
-            "GemFire properties \'ssl-require-authentication\' and \'cluster-ssl-require-authentication\' can not be used at the same time and have different values. The preferred way is to use all \'cluster-ssl*\' properties instead of \'ssl-*\'.");
-      }
-    }
-    
-    String jmxSSLString = (String)props.get(JMX_MANAGER_SSL);
-    String jmxSSLEnabledString =(String)props.get(JMX_MANAGER_SSL_ENABLED);
-    if(jmxSSLString != null && jmxSSLEnabledString != null){
-      boolean jmxSSL = new Boolean(jmxSSLString).booleanValue();
-      boolean jmxSSLEnabled =new Boolean(jmxSSLEnabledString).booleanValue();
-      if (jmxSSL != jmxSSLEnabled) {
-        throw new IllegalArgumentException(
-            "GemFire properties \'jmx-manager-ssl\' and \'jmx-manager-ssl-enabled\' can not be used at the same time and have different values and have different values. The preferred way is to use \'jmx-manager-ssl-enabled\' instead of \'jmx-manager-ssl\'.");
-      }
-    }
-  }
-  
-  /*
-   * ssl-* properties will be copied in cluster-ssl-* properties. Socket is using cluster-ssl-* properties
-   */
-  private void copySSLPropsToClusterSSLProps() {
-    boolean clusterSSLOverriden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
-    boolean p2pSSLOverRidden = this.sourceMap.get(SSL_ENABLED)!=null;
-    
-    if(p2pSSLOverRidden && !clusterSSLOverriden) {
-      this.clusterSSLEnabled  = this.sslEnabled;
-      this.sourceMap.put(CLUSTER_SSL_ENABLED,this.sourceMap.get(SSL_ENABLED));
-      
-      if(this.sourceMap.get(SSL_CIPHERS)!=null) {
-        this.clusterSSLCiphers = this.sslCiphers;
-        this.sourceMap.put(CLUSTER_SSL_CIPHERS,this.sourceMap.get(SSL_CIPHERS));
-      }
-      
-      if(this.sourceMap.get(SSL_PROTOCOLS)!=null) {
-        this.clusterSSLProtocols = this.sslProtocols;
-        this.sourceMap.put(CLUSTER_SSL_PROTOCOLS,this.sourceMap.get(SSL_PROTOCOLS));
-      }
-      
-      if(this.sourceMap.get(SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.clusterSSLRequireAuthentication = this.sslRequireAuthentication;
-        this.sourceMap.put(CLUSTER_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(SSL_REQUIRE_AUTHENTICATION));
-      }      
-      this.clusterSSLProperties.putAll(this.sslProperties);
-    }  
-  }
-  
-    boolean jmxSSLEnabledOverriden = this.sourceMap.get(JMX_MANAGER_SSL_ENABLED)!=null;
-    boolean jmxSSLOverriden = this.sourceMap.get(JMX_MANAGER_SSL)!=null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
-    
-    if(jmxSSLOverriden && !jmxSSLEnabledOverriden) {
-      this.jmxManagerSSLEnabled  = this.jmxManagerSSL;
-      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED,this.sourceMap.get(JMX_MANAGER_SSL));
-    }
-    
-    if(clusterSSLOverRidden && !jmxSSLOverriden && !jmxSSLEnabledOverriden) {
-      this.jmxManagerSSLEnabled  = this.clusterSSLEnabled;
-      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED,this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS)!=null) {
-        this.jmxManagerSslCiphers = this.clusterSSLCiphers;
-        this.sourceMap.put(JMX_MANAGER_SSL_CIPHERS,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-      }
-      
-      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS)!=null) {
-        this.jmxManagerSslProtocols = this.clusterSSLProtocols;
-        this.sourceMap.put(JMX_MANAGER_SSL_PROTOCOLS,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      }
-      
-      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.jmxManagerSslRequireAuthentication = this.clusterSSLRequireAuthentication;
-        this.sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      }      
+    boolean jmxSSLEnabledOverriden = this.sourceMap.get(JMX_MANAGER_SSL_ENABLED) != null;
+    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE)!=null) {
+    if (clusterSSLOverRidden && !jmxSSLEnabledOverriden) {
+      this.jmxManagerSSLEnabled = this.clusterSSLEnabled;
+      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
+        this.jmxManagerSslCiphers = this.clusterSSLCiphers;
+        this.sourceMap.put(JMX_MANAGER_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
+        this.jmxManagerSslProtocols = this.clusterSSLProtocols;
+        this.sourceMap.put(JMX_MANAGER_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
+        this.jmxManagerSslRequireAuthentication = this.clusterSSLRequireAuthentication;
+        this.sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE)!=null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD)!=null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!=null) {
-        this.jmxManagerSSLTrustStore= this.clusterSSLTrustStore;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        this.jmxManagerSSLTrustStore = this.clusterSSLTrustStore;
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD)!=null) {
-        this.jmxManagerSSLTrustStorePassword= this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        this.jmxManagerSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    }   
-    
-    if(jmxSSLOverriden || jmxSSLEnabledOverriden){
-      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+    }
+
+    if (jmxSSLEnabledOverriden) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.jmxManagerSSLTrustStore= this.clusterSSLTrustStore;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        this.jmxManagerSSLTrustStore = this.clusterSSLTrustStore;
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.jmxManagerSSLTrustStorePassword= this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        this.jmxManagerSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-  
-  
+
-        this.sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION,
-            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+        this.sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-  
+
-    boolean cacheServerSSLOverriden = this.sourceMap.get(SERVER_SSL_ENABLED)!=null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
-    
-    if(clusterSSLOverRidden && !cacheServerSSLOverriden) {
-      this.serverSSLEnabled  = this.clusterSSLEnabled;
-      this.sourceMap.put(SERVER_SSL_ENABLED,this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS)!=null) {
-        this.serverSslCiphers = this.clusterSSLCiphers;
-        this.sourceMap.put(SERVER_SSL_CIPHERS,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-      }
-      
-      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS)!=null) {
-        this.serverSslProtocols = this.clusterSSLProtocols;
-        this.sourceMap.put(SERVER_SSL_PROTOCOLS,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      }
-      
-      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.serverSslRequireAuthentication = this.clusterSSLRequireAuthentication;
-        this.sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      }      
+    boolean cacheServerSSLOverriden = this.sourceMap.get(SERVER_SSL_ENABLED) != null;
+    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE)!=null) {
+    if (clusterSSLOverRidden && !cacheServerSSLOverriden) {
+      this.serverSSLEnabled = this.clusterSSLEnabled;
+      this.sourceMap.put(SERVER_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
+        this.serverSslCiphers = this.clusterSSLCiphers;
+        this.sourceMap.put(SERVER_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
+        this.serverSslProtocols = this.clusterSSLProtocols;
+        this.sourceMap.put(SERVER_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
+        this.serverSslRequireAuthentication = this.clusterSSLRequireAuthentication;
+        this.sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE)!=null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD)!=null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!=null) {
-        this.serverSSLTrustStore= this.clusterSSLTrustStore;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        this.serverSSLTrustStore = this.clusterSSLTrustStore;
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD)!=null) {
-        this.serverSSLTrustStorePassword= this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        this.serverSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    }   
-    
-    if(cacheServerSSLOverriden){
-      if(this.sourceMap.get(SERVER_SSL_KEYSTORE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+    }
+
+    if (cacheServerSSLOverriden) {
+      if (this.sourceMap.get(SERVER_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(SERVER_SSL_KEYSTORE_TYPE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(SERVER_SSL_TRUSTSTORE)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.serverSSLTrustStore= this.clusterSSLTrustStore;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        this.serverSSLTrustStore = this.clusterSSLTrustStore;
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.serverSSLTrustStorePassword= this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        this.serverSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    boolean gatewaySSLOverriden = this.sourceMap.get(GATEWAY_SSL_ENABLED)!=null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
-    
-    if(clusterSSLOverRidden && !gatewaySSLOverriden) {
-      this.gatewaySSLEnabled  = this.clusterSSLEnabled;
-      this.sourceMap.put(GATEWAY_SSL_ENABLED,this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS)!=null) {
-        this.gatewaySslCiphers = this.clusterSSLCiphers;
-        this.sourceMap.put(GATEWAY_SSL_CIPHERS,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-      }
-      
-      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS)!=null) {
-        this.gatewaySslProtocols = this.clusterSSLProtocols;
-        this.sourceMap.put(GATEWAY_SSL_PROTOCOLS,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      }
-      
-      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.gatewaySslRequireAuthentication = this.clusterSSLRequireAuthentication;
-        this.sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      }      
+    boolean gatewaySSLOverriden = this.sourceMap.get(GATEWAY_SSL_ENABLED) != null;
+    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE)!=null) {
+    if (clusterSSLOverRidden && !gatewaySSLOverriden) {
+      this.gatewaySSLEnabled = this.clusterSSLEnabled;
+      this.sourceMap.put(GATEWAY_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
+        this.gatewaySslCiphers = this.clusterSSLCiphers;
+        this.sourceMap.put(GATEWAY_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
+        this.gatewaySslProtocols = this.clusterSSLProtocols;
+        this.sourceMap.put(GATEWAY_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
+        this.gatewaySslRequireAuthentication = this.clusterSSLRequireAuthentication;
+        this.sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION, this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+      }
+
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE)!=null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD)!=null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!=null) {
-        this.gatewaySSLTrustStore= this.clusterSSLTrustStore;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        this.gatewaySSLTrustStore = this.clusterSSLTrustStore;
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD)!=null) {
-        this.gatewaySSLTrustStorePassword= this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        this.gatewaySSLTrustStorePassword = this.clusterSSLTrustStorePassword;
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    }   
-    
-    if(gatewaySSLOverriden){
-      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+    }
+
+    if (gatewaySSLOverriden) {
+      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!= null) {
-        this.gatewaySSLTrustStore= this.clusterSSLTrustStore;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        this.gatewaySSLTrustStore = this.clusterSSLTrustStore;
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.gatewaySSLTrustStorePassword= this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD) == null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        this.gatewaySSLTrustStorePassword = this.clusterSSLTrustStorePassword;
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-  
-  
+
+
-//    if (cs == null) {
-//      String locators = getLocators();
-//      if (locators != null && !locators.isEmpty()) {
-//        this.mcastPort = 0; // fixes 46308
-//      }
-//    }
+    //    if (cs == null) {
+    //      String locators = getLocators();
+    //      if (locators != null && !locators.isEmpty()) {
+    //        this.mcastPort = 0; // fixes 46308
+    //      }
+    //    }
-  
+
-  
+
-        Map.Entry me = (Map.Entry)it.next();
-        String propName = (String)me.getKey();
+        Map.Entry me = (Map.Entry) it.next();
+        String propName = (String) me.getKey();
-        String propVal = (String)me.getValue();
+        String propVal = (String) me.getValue();
-  
+
-    return propName.equalsIgnoreCase(SSL_ENABLED) ||
-        propName.equalsIgnoreCase(CLUSTER_SSL_ENABLED) ||
-        propName.equals(SECURITY_PEER_AUTH_INIT) ||
-        propName.equals(SECURITY_PEER_AUTHENTICATOR) ||
-        propName.equals(LOG_WRITER_NAME) ||
-        propName.equals(DS_CONFIG_NAME) ||
-        propName.equals(SECURITY_LOG_WRITER_NAME) ||
-        propName.equals(LOG_OUTPUTSTREAM_NAME) ||
-        propName.equals(SECURITY_LOG_OUTPUTSTREAM_NAME);
+    return propName.equalsIgnoreCase(CLUSTER_SSL_ENABLED) ||
+           propName.equals(SECURITY_PEER_AUTH_INIT) ||
+           propName.equals(SECURITY_PEER_AUTHENTICATOR) ||
+           propName.equals(LOG_WRITER_NAME) ||
+           propName.equals(DS_CONFIG_NAME) ||
+           propName.equals(SECURITY_LOG_WRITER_NAME) ||
+           propName.equals(LOG_OUTPUTSTREAM_NAME) ||
+           propName.equals(SECURITY_LOG_OUTPUTSTREAM_NAME);
-  
+
-   * 
-   * @param p
-   *          the Properties to fill in
-   * @throws GemFireIOException
-   *           when error occurs while reading properties file
+   * @param p the Properties to fill in
+   *
+   * @throws GemFireIOException when error occurs while reading properties file
-  
+
-   * 
-   * @param p
-   *          the Properties to fill in
-   * @param ignoreGemFirePropsFile
-   *          whether to ignore properties from gemfire.properties
-   * @throws GemFireIOException
-   *           when error occurs while reading properties file
+   * @param p the Properties to fill in
+   * @param ignoreGemFirePropsFile whether to ignore properties from gemfire.properties
+   *
+   * @throws GemFireIOException when error occurs while reading properties file
-  public static void loadGemFireProperties(Properties p, 
-                    boolean ignoreGemFirePropsFile) throws GemFireIOException {
+  public static void loadGemFireProperties(Properties p, boolean ignoreGemFirePropsFile) throws GemFireIOException {
-    for (Object k: p.keySet()) {
-      this.sourceMap.put((String)k, source);
+    for (Object k : p.keySet()) {
+      this.sourceMap.put((String) k, source);
-  
+
-  
+
-  
+
-      Map.Entry me = (Map.Entry)it.next();
-      String propName = (String)me.getKey();
+      Map.Entry me = (Map.Entry) it.next();
+      String propName = (String) me.getKey();
-      if (propVal != null  &&  (propVal instanceof String)) { // weed out extraneous non-string properties
-        this.setAttribute(propName, ((String)propVal).trim(), this.sourceMap.get(propName));
+      if (propVal != null && (propVal instanceof String)) { // weed out extraneous non-string properties
+        this.setAttribute(propName, ((String) propVal).trim(), this.sourceMap.get(propName));
-    // now set ssl-enabled if needed...
-    if ( props.containsKey(SSL_ENABLED) ) {
-      this.setAttribute(SSL_ENABLED, (String) props.get( SSL_ENABLED ), this.sourceMap.get(SSL_ENABLED) );
-    }
-    if ( props.containsKey(CLUSTER_SSL_ENABLED) ) {
-      this.setAttribute(CLUSTER_SSL_ENABLED, (String) props.get( CLUSTER_SSL_ENABLED ), this.sourceMap.get(CLUSTER_SSL_ENABLED) );
+    if (props.containsKey(CLUSTER_SSL_ENABLED)) {
+      this.setAttribute(CLUSTER_SSL_ENABLED, (String) props.get(CLUSTER_SSL_ENABLED), this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      this.setAttribute(SECURITY_PEER_AUTH_INIT, (String)props
-          .get(SECURITY_PEER_AUTH_INIT),
-          this.sourceMap.get(SECURITY_PEER_AUTH_INIT));
+      this.setAttribute(SECURITY_PEER_AUTH_INIT, (String) props.get(SECURITY_PEER_AUTH_INIT), this.sourceMap.get(SECURITY_PEER_AUTH_INIT));
-      this.setAttribute(SECURITY_PEER_AUTHENTICATOR, (String)props
-          .get(SECURITY_PEER_AUTHENTICATOR),
-          this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
+      this.setAttribute(SECURITY_PEER_AUTHENTICATOR, (String) props.get(SECURITY_PEER_AUTHENTICATOR), this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
-      props.remove(SECURITY_SYSTEM_PREFIX + (String)iter.next());
+      props.remove(SECURITY_SYSTEM_PREFIX + (String) iter.next());
+
+
+
+
+
-  public int getMaxWaitTimeForReconnect(){
-  return this.maxWaitTimeForReconnect;
+  public int getMaxWaitTimeForReconnect() {
+    return this.maxWaitTimeForReconnect;
-  public int getMaxNumReconnectTries(){
+  public int getMaxNumReconnectTries() {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-        return this.bindAddress + "["+this.startLocatorPort+"]";
+        return this.bindAddress + "[" + this.startLocatorPort + "]";
-        return SocketCreator.getHostName(SocketCreator.getLocalHost()) + "["+this.startLocatorPort+"]";
-      }
-      catch (UnknownHostException e) {
+        return SocketCreator.getHostName(SocketCreator.getLocalHost()) + "[" + this.startLocatorPort + "]";
+      } catch (UnknownHostException e) {
-  public boolean getSSLEnabled( ) {
-    return this.sslEnabled;
-  }
-
-  public String getSSLProtocols( ) {
-    return this.sslProtocols;
-  }
-
-  public String getSSLCiphers( ) {
-    return this.sslCiphers;
-  }
-
-  public boolean getSSLRequireAuthentication( ) {
-    return this.sslRequireAuthentication;
-  }
-
-  public boolean getClusterSSLEnabled( ) {
+  public boolean getClusterSSLEnabled() {
-  public String getClusterSSLProtocols( ) {
+  public String getClusterSSLProtocols() {
-  public String getClusterSSLCiphers( ) {
+  public String getClusterSSLCiphers() {
-  public boolean getClusterSSLRequireAuthentication( ) {
+  public boolean getClusterSSLRequireAuthentication() {
-  
-  public String getClusterSSLKeyStore( ){
+
+  public String getClusterSSLKeyStore() {
-  public String getClusterSSLKeyStoreType( ){
+
+  public String getClusterSSLKeyStoreType() {
-  
-  public String getClusterSSLKeyStorePassword( ){
+
+  public String getClusterSSLKeyStorePassword() {
-  
-  public String getClusterSSLTrustStore( ){
+
+  public String getClusterSSLTrustStore() {
-  
-  public String getClusterSSLTrustStorePassword( ){
+
+  public String getClusterSSLTrustStorePassword() {
-  
+
+
+
-    
+
-    this.httpServicePort = (Integer)checkAttribute(HTTP_SERVICE_PORT, value);
+    this.httpServicePort = (Integer) checkAttribute(HTTP_SERVICE_PORT, value);
-  
+
-  
+
-    this.httpServiceBindAddress = (String)checkAttribute(HTTP_SERVICE_BIND_ADDRESS, value);
+    this.httpServiceBindAddress = (String) checkAttribute(HTTP_SERVICE_BIND_ADDRESS, value);
-  
-  public boolean getStartDevRestApi(){
+
+  public boolean getStartDevRestApi() {
-  
-  public void setStartDevRestApi(boolean value){
+
+  public void setStartDevRestApi(boolean value) {
- 
+
-    this.userCommandPackages = (String)checkAttribute(USER_COMMAND_PACKAGES, value);
+    this.userCommandPackages = (String) checkAttribute(USER_COMMAND_PACKAGES, value);
-    this.deltaPropagation = (Boolean)checkAttribute(DELTA_PROPAGATION, value);
+    this.deltaPropagation = (Boolean) checkAttribute(DELTA_PROPAGATION, value);
+
+
+
+
-    this.socketLeaseTime = (Integer)checkAttribute(SOCKET_LEASE_TIME, value);
-  }
-  public void setSocketBufferSize(int value) {
-    this.socketBufferSize = (Integer)checkAttribute(SOCKET_BUFFER_SIZE, value);
-  }
-  public void setConserveSockets(boolean value) {
-    this.conserveSockets = (Boolean)checkAttribute(CONSERVE_SOCKETS, value);
-  }
-  public void setRoles(String value) {
-    this.roles = (String)checkAttribute(ROLES, value);
+    this.socketLeaseTime = (Integer) checkAttribute(SOCKET_LEASE_TIME, value);
-  public void setMaxWaitTimeForReconnect(int value){
+  public void setSocketBufferSize(int value) {
+    this.socketBufferSize = (Integer) checkAttribute(SOCKET_BUFFER_SIZE, value);
+  }
+
+  public void setConserveSockets(boolean value) {
+    this.conserveSockets = (Boolean) checkAttribute(CONSERVE_SOCKETS, value);
+  }
+
+  public void setRoles(String value) {
+    this.roles = (String) checkAttribute(ROLES, value);
+  }
+
+  public void setMaxWaitTimeForReconnect(int value) {
-  public void setMaxNumReconnectTries(int value){
+  public void setMaxNumReconnectTries(int value) {
+
+
+
-  
+
-  
+
-  
+
-    this.deployWorkingDir = (File)checkAttribute(DEPLOY_WORKING_DIR, value);
+    this.deployWorkingDir = (File) checkAttribute(DEPLOY_WORKING_DIR, value);
+
-    this.logFile = (File)checkAttribute(LOG_FILE, value);
+    this.logFile = (File) checkAttribute(LOG_FILE, value);
+
-    this.logLevel = (Integer)checkAttribute(LOG_LEVEL, value);
+    this.logLevel = (Integer) checkAttribute(LOG_LEVEL, value);
+
+
-    }
-    else {
+    } else {
-      for (int i=0; i<value.length(); i++) {
+      for (int i = 0; i < value.length(); i++) {
-        }
-        catch (NumberFormatException e) {
+        } catch (NumberFormatException e) {
-      }
-      else {
+      } else {
+
-    this.statisticSamplingEnabled = (Boolean)checkAttribute(STATISTIC_SAMPLING_ENABLED, value);
+    this.statisticSamplingEnabled = (Boolean) checkAttribute(STATISTIC_SAMPLING_ENABLED, value);
+
-    value = (Integer)checkAttribute(STATISTIC_SAMPLE_RATE, value);
+    value = (Integer) checkAttribute(STATISTIC_SAMPLE_RATE, value);
-        ids.getLogWriter().info("Setting statistic-sample-rate to " + DEFAULT_STATISTIC_SAMPLE_RATE + " instead of the requested " + value + " because VSD does not work with sub-second sampling.");
+        ids.getLogWriter()
+           .info("Setting statistic-sample-rate to " + DEFAULT_STATISTIC_SAMPLE_RATE + " instead of the requested " + value + " because VSD does not work with sub-second sampling.");
+
-    this.statisticArchiveFile = (File)checkAttribute(STATISTIC_ARCHIVE_FILE, value);
+    this.statisticArchiveFile = (File) checkAttribute(STATISTIC_ARCHIVE_FILE, value);
+
-    this.cacheXmlFile = (File)checkAttribute(CACHE_XML_FILE, value);
+    this.cacheXmlFile = (File) checkAttribute(CACHE_XML_FILE, value);
+
-    this.ackWaitThreshold = (Integer)checkAttribute(ACK_WAIT_THRESHOLD, value);
+    this.ackWaitThreshold = (Integer) checkAttribute(ACK_WAIT_THRESHOLD, value);
-    this.ackForceDisconnectThreshold = (Integer)checkAttribute(ACK_SEVERE_ALERT_THRESHOLD, value);
+    this.ackForceDisconnectThreshold = (Integer) checkAttribute(ACK_SEVERE_ALERT_THRESHOLD, value);
+
-    this.archiveDiskSpaceLimit = (Integer)checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
+    this.archiveDiskSpaceLimit = (Integer) checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
+
+
-    this.archiveFileSizeLimit = (Integer)checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
+    this.archiveFileSizeLimit = (Integer) checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
+
+
-    this.logDiskSpaceLimit = (Integer)checkAttribute(LOG_DISK_SPACE_LIMIT, value);
+    this.logDiskSpaceLimit = (Integer) checkAttribute(LOG_DISK_SPACE_LIMIT, value);
+
+
-    this.logFileSizeLimit = (Integer)checkAttribute(LOG_FILE_SIZE_LIMIT, value);
-  }
-  public void setSSLEnabled( boolean value ) {
-    this.sslEnabled = (Boolean)checkAttribute(SSL_ENABLED, value);
-  }
-  public void setSSLProtocols( String value ) {
-    this.sslProtocols = (String)checkAttribute(SSL_PROTOCOLS, value);
-  }
-  public void setSSLCiphers( String value ) {
-    this.sslCiphers = (String)checkAttribute(SSL_CIPHERS, value);
-  }
-  public void setSSLRequireAuthentication( boolean value ){
-    this.sslRequireAuthentication = (Boolean)checkAttribute(SSL_REQUIRE_AUTHENTICATION, value);
+    this.logFileSizeLimit = (Integer) checkAttribute(LOG_FILE_SIZE_LIMIT, value);
-  public void setClusterSSLEnabled( boolean value ) {
-    this.clusterSSLEnabled = (Boolean)checkAttribute(CLUSTER_SSL_ENABLED, value);
+  public void setClusterSSLEnabled(boolean value) {
+    this.clusterSSLEnabled = (Boolean) checkAttribute(CLUSTER_SSL_ENABLED, value);
-  public void setClusterSSLProtocols( String value ) {
-    this.clusterSSLProtocols = (String)checkAttribute(CLUSTER_SSL_PROTOCOLS, value);
+
+  public void setClusterSSLProtocols(String value) {
+    this.clusterSSLProtocols = (String) checkAttribute(CLUSTER_SSL_PROTOCOLS, value);
-  public void setClusterSSLCiphers( String value ) {
-    this.clusterSSLCiphers = (String)checkAttribute(CLUSTER_SSL_CIPHERS, value);
+
+  public void setClusterSSLCiphers(String value) {
+    this.clusterSSLCiphers = (String) checkAttribute(CLUSTER_SSL_CIPHERS, value);
-  public void setClusterSSLRequireAuthentication( boolean value ){
-    this.clusterSSLRequireAuthentication = (Boolean)checkAttribute(CLUSTER_SSL_REQUIRE_AUTHENTICATION, value);
+
+  public void setClusterSSLRequireAuthentication(boolean value) {
+    this.clusterSSLRequireAuthentication = (Boolean) checkAttribute(CLUSTER_SSL_REQUIRE_AUTHENTICATION, value);
-  
-  public void setClusterSSLKeyStore( String value ) {
-    value = (String)checkAttribute(CLUSTER_SSL_KEYSTORE, value);
-   this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-   this.clusterSSLKeyStore = value;
+
+  public void setClusterSSLKeyStore(String value) {
+    value = (String) checkAttribute(CLUSTER_SSL_KEYSTORE, value);
+    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
+    this.clusterSSLKeyStore = value;
-  public void setClusterSSLKeyStoreType( String value ) {
-    value =  (String)checkAttribute(CLUSTER_SSL_KEYSTORE_TYPE, value);
+
+  public void setClusterSSLKeyStoreType(String value) {
+    value = (String) checkAttribute(CLUSTER_SSL_KEYSTORE_TYPE, value);
-  public void setClusterSSLKeyStorePassword( String value ) {
-    value = (String)checkAttribute(CLUSTER_SSL_KEYSTORE_PASSWORD, value);
+
+  public void setClusterSSLKeyStorePassword(String value) {
+    value = (String) checkAttribute(CLUSTER_SSL_KEYSTORE_PASSWORD, value);
-    this.clusterSSLKeyStorePassword =value;
+    this.clusterSSLKeyStorePassword = value;
-  public void setClusterSSLTrustStore( String value ) {
-    value = (String)checkAttribute(CLUSTER_SSL_TRUSTSTORE, value);
+
+  public void setClusterSSLTrustStore(String value) {
+    value = (String) checkAttribute(CLUSTER_SSL_TRUSTSTORE, value);
-  public void setClusterSSLTrustStorePassword( String value ) {
-    value = (String)checkAttribute(CLUSTER_SSL_TRUSTSTORE_PASSWORD, value);
+
+  public void setClusterSSLTrustStorePassword(String value) {
+    value = (String) checkAttribute(CLUSTER_SSL_TRUSTSTORE_PASSWORD, value);
-  
+
-    mcastSendBufferSize = (Integer)checkAttribute(MCAST_SEND_BUFFER_SIZE, value);
+    mcastSendBufferSize = (Integer) checkAttribute(MCAST_SEND_BUFFER_SIZE, value);
-    mcastRecvBufferSize = (Integer)checkAttribute(MCAST_RECV_BUFFER_SIZE, value);
+    mcastRecvBufferSize = (Integer) checkAttribute(MCAST_RECV_BUFFER_SIZE, value);
+
-    this.asyncDistributionTimeout = (Integer)checkAttribute(ASYNC_DISTRIBUTION_TIMEOUT, value);
+    this.asyncDistributionTimeout = (Integer) checkAttribute(ASYNC_DISTRIBUTION_TIMEOUT, value);
+
-    this.asyncQueueTimeout = (Integer)checkAttribute(ASYNC_QUEUE_TIMEOUT, value);
+    this.asyncQueueTimeout = (Integer) checkAttribute(ASYNC_QUEUE_TIMEOUT, value);
+
-    this.asyncMaxQueueSize = (Integer)checkAttribute(ASYNC_MAX_QUEUE_SIZE, value);
+    this.asyncMaxQueueSize = (Integer) checkAttribute(ASYNC_MAX_QUEUE_SIZE, value);
-    mcastFlowControl = (FlowControlParams)checkAttribute(MCAST_FLOW_CONTROL, values);
+    mcastFlowControl = (FlowControlParams) checkAttribute(MCAST_FLOW_CONTROL, values);
-    udpFragmentSize = (Integer)checkAttribute(UDP_FRAGMENT_SIZE, value);
+    udpFragmentSize = (Integer) checkAttribute(UDP_FRAGMENT_SIZE, value);
-    udpSendBufferSize = (Integer)checkAttribute(UDP_SEND_BUFFER_SIZE, value);
+    udpSendBufferSize = (Integer) checkAttribute(UDP_SEND_BUFFER_SIZE, value);
-    udpRecvBufferSize = (Integer)checkAttribute(UDP_RECV_BUFFER_SIZE, value);
+    udpRecvBufferSize = (Integer) checkAttribute(UDP_RECV_BUFFER_SIZE, value);
-    memberTimeout = (Integer)checkAttribute(MEMBER_TIMEOUT, value);
+    memberTimeout = (Integer) checkAttribute(MEMBER_TIMEOUT, value);
-  /** @since GemFire 5.7 */
+  /**
+   * @since GemFire 5.7
+   */
-  /** @since GemFire 5.7 */
+  /**
+   * @since GemFire 5.7
+   */
-    this.clientConflation = (String)checkAttribute(CONFLATE_EVENTS, value);
+    this.clientConflation = (String) checkAttribute(CONFLATE_EVENTS, value);
-    durableClientId = (String)checkAttribute(DURABLE_CLIENT_ID, value);
+    durableClientId = (String) checkAttribute(DURABLE_CLIENT_ID, value);
-    durableClientTimeout = (Integer)checkAttribute(DURABLE_CLIENT_TIMEOUT, value);
+    durableClientTimeout = (Integer) checkAttribute(DURABLE_CLIENT_TIMEOUT, value);
-    securityClientAuthInit = (String)checkAttribute(SECURITY_CLIENT_AUTH_INIT, value);
+    securityClientAuthInit = (String) checkAttribute(SECURITY_CLIENT_AUTH_INIT, value);
+
-  
+
+
-    securityClientAuthenticator = (String)checkAttribute(SECURITY_CLIENT_AUTHENTICATOR, value);
+    securityClientAuthenticator = (String) checkAttribute(SECURITY_CLIENT_AUTHENTICATOR, value);
-    securityClientDHAlgo = (String)checkAttribute(SECURITY_CLIENT_DHALGO, value);
+    securityClientDHAlgo = (String) checkAttribute(SECURITY_CLIENT_DHALGO, value);
-    securityPeerAuthInit = (String)checkAttribute(SECURITY_PEER_AUTH_INIT, value);
+    securityPeerAuthInit = (String) checkAttribute(SECURITY_PEER_AUTH_INIT, value);
-    securityPeerAuthenticator = (String)checkAttribute(SECURITY_PEER_AUTHENTICATOR, value);
+    securityPeerAuthenticator = (String) checkAttribute(SECURITY_PEER_AUTHENTICATOR, value);
-    securityClientAccessor = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR, value);
+    securityClientAccessor = (String) checkAttribute(SECURITY_CLIENT_ACCESSOR, value);
-    securityClientAccessorPP = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR_PP, value);
+    securityClientAccessorPP = (String) checkAttribute(SECURITY_CLIENT_ACCESSOR_PP, value);
-    securityLogLevel = (Integer)checkAttribute(SECURITY_LOG_LEVEL, value);
+    securityLogLevel = (Integer) checkAttribute(SECURITY_LOG_LEVEL, value);
-    securityLogFile = (File)checkAttribute(SECURITY_LOG_FILE, value);
+    securityLogFile = (File) checkAttribute(SECURITY_LOG_FILE, value);
-    securityPeerMembershipTimeout = (Integer)checkAttribute(SECURITY_PEER_VERIFY_MEMBER_TIMEOUT, value);
+    securityPeerMembershipTimeout = (Integer) checkAttribute(SECURITY_PEER_VERIFY_MEMBER_TIMEOUT, value);
-  public boolean getRemoveUnresponsiveClient(){
+  public boolean getRemoveUnresponsiveClient() {
-  public void setRemoveUnresponsiveClient(boolean value){
+  public void setRemoveUnresponsiveClient(boolean value) {
-  
+
-    this.distributedSystemId = (Integer)checkAttribute(DISTRIBUTED_SYSTEM_ID, distributedSystemId);
-    
+    this.distributedSystemId = (Integer) checkAttribute(DISTRIBUTED_SYSTEM_ID, distributedSystemId);
+
-    this.enforceUniqueHost = (Boolean)checkAttribute(ENFORCE_UNIQUE_HOST, enforceUniqueHost);
-    
+    this.enforceUniqueHost = (Boolean) checkAttribute(ENFORCE_UNIQUE_HOST, enforceUniqueHost);
+
-    this.redundancyZone = (String)checkAttribute(REDUNDANCY_ZONE, redundancyZone);
-    
+    this.redundancyZone = (String) checkAttribute(REDUNDANCY_ZONE, redundancyZone);
+
-      
+
-      
+
-  
+
+
-    this.groups = (String)checkAttribute(GROUPS, value);
+    this.groups = (String) checkAttribute(GROUPS, value);
+
+
+
-  @Override
-  public boolean getJmxManagerSSL() {
-    return this.jmxManagerSSL;
-  }
-  @Override
-  public void setJmxManagerSSL(boolean value) {
-    this.jmxManagerSSL= value;
-  }
+
+
+
+
+
+
+
+
-  
-  public void setJmxManagerSSLKeyStore( String value ) {
-    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE, value);
-   this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-   this.jmxManagerSSLKeyStore = value;
+
+  public void setJmxManagerSSLKeyStore(String value) {
+    value = (String) checkAttribute(JMX_MANAGER_SSL_KEYSTORE, value);
+    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
+    this.jmxManagerSSLKeyStore = value;
-  public void setJmxManagerSSLKeyStoreType( String value ) {
-    value =(String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_TYPE, value);
+
+  public void setJmxManagerSSLKeyStoreType(String value) {
+    value = (String) checkAttribute(JMX_MANAGER_SSL_KEYSTORE_TYPE, value);
-  public void setJmxManagerSSLKeyStorePassword( String value ) {
-    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, value);
+
+  public void setJmxManagerSSLKeyStorePassword(String value) {
+    value = (String) checkAttribute(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, value);
-  public void setJmxManagerSSLTrustStore( String value ) {
-    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE, value);
+
+  public void setJmxManagerSSLTrustStore(String value) {
+    value = (String) checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE, value);
-  public void setJmxManagerSSLTrustStorePassword( String value ) {
-    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, value);
+
+  public void setJmxManagerSSLTrustStorePassword(String value) {
+    value = (String) checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, value);
-    this.jmxManagerSSLTrustStorePassword =value;
+    this.jmxManagerSSLTrustStorePassword = value;
-  public String getJmxManagerSSLKeyStore( ){
+  public String getJmxManagerSSLKeyStore() {
-  public String getJmxManagerSSLKeyStoreType( ){
+
+  public String getJmxManagerSSLKeyStoreType() {
-  
-  public String getJmxManagerSSLKeyStorePassword( ){
+
+  public String getJmxManagerSSLKeyStorePassword() {
-  
-  public String getJmxManagerSSLTrustStore( ){
+
+  public String getJmxManagerSSLTrustStore() {
-  
-  public String getJmxManagerSSLTrustStorePassword( ){
+
+  public String getJmxManagerSSLTrustStorePassword() {
-  
+
+
-    this.jmxManagerPort = (Integer)checkAttribute(JMX_MANAGER_PORT, value);
+    this.jmxManagerPort = (Integer) checkAttribute(JMX_MANAGER_PORT, value);
+
+
-    this.jmxManagerBindAddress = (String)checkAttribute(JMX_MANAGER_BIND_ADDRESS, value);
+    this.jmxManagerBindAddress = (String) checkAttribute(JMX_MANAGER_BIND_ADDRESS, value);
+
+
-    this.jmxManagerHostnameForClients = (String)checkAttribute(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, value);
+    this.jmxManagerHostnameForClients = (String) checkAttribute(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, value);
+
+
-    this.jmxManagerPasswordFile = (String)checkAttribute(JMX_MANAGER_PASSWORD_FILE, value);
+    this.jmxManagerPasswordFile = (String) checkAttribute(JMX_MANAGER_PASSWORD_FILE, value);
+
+
-    this.jmxManagerAccessFile = (String)checkAttribute(JMX_MANAGER_ACCESS_FILE, value);
+    this.jmxManagerAccessFile = (String) checkAttribute(JMX_MANAGER_ACCESS_FILE, value);
-  
+
-    this.jmxManagerUpdateRate = (Integer)checkAttribute(JMX_MANAGER_UPDATE_RATE, value);
+    this.jmxManagerUpdateRate = (Integer) checkAttribute(JMX_MANAGER_UPDATE_RATE, value);
+  @Override
+  public String getClusterSSLAlias() {
+    return clusterSSLAlias;
+  }
+
+  @Override
+  public void setClusterSSLAlias(final String alias) {
+    clusterSSLAlias = alias;
+  }
+
+  @Override
+  public String getGatewaySSLAlias() {
+    return gatewaySSLAlias;
+  }
+
+  @Override
+  public void setGatewaySSLAlias(final String alias) {
+    gatewaySSLAlias = alias;
+  }
+
+  @Override
+  public String getHTTPServiceSSLAlias() {
+    return httpServiceSSLAlias;
+  }
+
+  @Override
+  public void setHTTPServiceSSLAlias(final String alias) {
+    httpServiceSSLAlias = alias;
+  }
+
+  @Override
+  public String getJMXManagerSSLAlias() {
+    return jmxManagerSSLAlias;
+  }
+
+  @Override
+  public void setJMXManagerSSLAlias(final String alias) {
+    jmxManagerSSLAlias = alias;
+  }
+
+  @Override
+  public String getServerSSLAlias() {
+    return serverSSLAlias;
+  }
+
+  @Override
+  public void setServerSSLAlias(final String alias) {
+    serverSSLAlias = alias;
+  }
+
+
-   * Two instances of <code>DistributedConfigImpl</code> are equal if all of 
+   * Two instances of <code>DistributedConfigImpl</code> are equal if all of
-    if (this == obj)
+    if (this == obj) {
-    if (!super.equals(obj))
+    }
+    if (!super.equals(obj)) {
-    if (getClass() != obj.getClass())
+    }
+    if (getClass() != obj.getClass()) {
+    }
-    if (ackForceDisconnectThreshold != other.ackForceDisconnectThreshold)
+    if (ackForceDisconnectThreshold != other.ackForceDisconnectThreshold) {
-    if (ackWaitThreshold != other.ackWaitThreshold)
+    }
+    if (ackWaitThreshold != other.ackWaitThreshold) {
-    if (archiveDiskSpaceLimit != other.archiveDiskSpaceLimit)
+    }
+    if (archiveDiskSpaceLimit != other.archiveDiskSpaceLimit) {
-    if (archiveFileSizeLimit != other.archiveFileSizeLimit)
+    }
+    if (archiveFileSizeLimit != other.archiveFileSizeLimit) {
-    if (asyncDistributionTimeout != other.asyncDistributionTimeout)
+    }
+    if (asyncDistributionTimeout != other.asyncDistributionTimeout) {
-    if (asyncMaxQueueSize != other.asyncMaxQueueSize)
+    }
+    if (asyncMaxQueueSize != other.asyncMaxQueueSize) {
-    if (asyncQueueTimeout != other.asyncQueueTimeout)
+    }
+    if (asyncQueueTimeout != other.asyncQueueTimeout) {
+    }
-      if (other.bindAddress != null)
+      if (other.bindAddress != null) {
-    } else if (!bindAddress.equals(other.bindAddress))
+      }
+    } else if (!bindAddress.equals(other.bindAddress)) {
+    }
-      if (other.cacheXmlFile != null)
+      if (other.cacheXmlFile != null) {
-    } else if (!cacheXmlFile.equals(other.cacheXmlFile))
+      }
+    } else if (!cacheXmlFile.equals(other.cacheXmlFile)) {
+    }
-      if (other.clientConflation != null)
+      if (other.clientConflation != null) {
-    } else if (!clientConflation.equals(other.clientConflation))
+      }
+    } else if (!clientConflation.equals(other.clientConflation)) {
+    }
-      if (other.clusterSSLCiphers != null)
+      if (other.clusterSSLCiphers != null) {
-    } else if (!clusterSSLCiphers.equals(other.clusterSSLCiphers))
+      }
+    } else if (!clusterSSLCiphers.equals(other.clusterSSLCiphers)) {
-    if (clusterSSLEnabled != other.clusterSSLEnabled)
+    }
+    if (clusterSSLEnabled != other.clusterSSLEnabled) {
+    }
-      if (other.clusterSSLKeyStore != null)
+      if (other.clusterSSLKeyStore != null) {
-    } else if (!clusterSSLKeyStore.equals(other.clusterSSLKeyStore))
+      }
+    } else if (!clusterSSLKeyStore.equals(other.clusterSSLKeyStore)) {
+    }
-      if (other.clusterSSLKeyStorePassword != null)
+      if (other.clusterSSLKeyStorePassword != null) {
-    } else if (!clusterSSLKeyStorePassword
-        .equals(other.clusterSSLKeyStorePassword))
+      }
+    } else if (!clusterSSLKeyStorePassword.equals(other.clusterSSLKeyStorePassword)) {
+    }
-      if (other.clusterSSLKeyStoreType != null)
+      if (other.clusterSSLKeyStoreType != null) {
-    } else if (!clusterSSLKeyStoreType.equals(other.clusterSSLKeyStoreType))
+      }
+    } else if (!clusterSSLKeyStoreType.equals(other.clusterSSLKeyStoreType)) {
+    }
-      if (other.clusterSSLProperties != null)
+      if (other.clusterSSLProperties != null) {
-    } else if (!clusterSSLProperties.equals(other.clusterSSLProperties))
+      }
+    } else if (!clusterSSLProperties.equals(other.clusterSSLProperties)) {
+    }
-      if (other.clusterSSLProtocols != null)
+      if (other.clusterSSLProtocols != null) {
-    } else if (!clusterSSLProtocols.equals(other.clusterSSLProtocols))
+      }
+    } else if (!clusterSSLProtocols.equals(other.clusterSSLProtocols)) {
-    if (clusterSSLRequireAuthentication != other.clusterSSLRequireAuthentication)
+    }
+    if (clusterSSLRequireAuthentication != other.clusterSSLRequireAuthentication) {
+    }
-      if (other.clusterSSLTrustStore != null)
+      if (other.clusterSSLTrustStore != null) {
-    } else if (!clusterSSLTrustStore.equals(other.clusterSSLTrustStore))
+      }
+    } else if (!clusterSSLTrustStore.equals(other.clusterSSLTrustStore)) {
+    }
-      if (other.clusterSSLTrustStorePassword != null)
+      if (other.clusterSSLTrustStorePassword != null) {
-    } else if (!clusterSSLTrustStorePassword
-        .equals(other.clusterSSLTrustStorePassword))
+      }
+    } else if (!clusterSSLTrustStorePassword.equals(other.clusterSSLTrustStorePassword)) {
-    if (conserveSockets != other.conserveSockets)
+    }
+    if (conserveSockets != other.conserveSockets) {
-    if (deltaPropagation != other.deltaPropagation)
+    }
+    if (deltaPropagation != other.deltaPropagation) {
+    }
-      if (other.deployWorkingDir != null)
+      if (other.deployWorkingDir != null) {
-    } else if (!deployWorkingDir.equals(other.deployWorkingDir))
+      }
+    } else if (!deployWorkingDir.equals(other.deployWorkingDir)) {
-    if (disableAutoReconnect != other.disableAutoReconnect)
+    }
+    if (disableAutoReconnect != other.disableAutoReconnect) {
-    if (disableTcp != other.disableTcp)
+    }
+    if (disableTcp != other.disableTcp) {
-    if (distributedSystemId != other.distributedSystemId)
+    }
+    if (distributedSystemId != other.distributedSystemId) {
+    }
-      if (other.durableClientId != null)
+      if (other.durableClientId != null) {
-    } else if (!durableClientId.equals(other.durableClientId))
+      }
+    } else if (!durableClientId.equals(other.durableClientId)) {
-    if (durableClientTimeout != other.durableClientTimeout)
+    }
+    if (durableClientTimeout != other.durableClientTimeout) {
-    if (enableNetworkPartitionDetection != other.enableNetworkPartitionDetection)
+    }
+    if (enableNetworkPartitionDetection != other.enableNetworkPartitionDetection) {
-    if (enableSharedConfiguration != other.enableSharedConfiguration)
+    }
+    if (enableSharedConfiguration != other.enableSharedConfiguration) {
-    if (enableTimeStatistics != other.enableTimeStatistics)
+    }
+    if (enableTimeStatistics != other.enableTimeStatistics) {
-    if (enforceUniqueHost != other.enforceUniqueHost)
+    }
+    if (enforceUniqueHost != other.enforceUniqueHost) {
-    if (gatewaySSLEnabled != other.gatewaySSLEnabled)
+    }
+    if (gatewaySSLEnabled != other.gatewaySSLEnabled) {
+    }
-      if (other.gatewaySSLKeyStore != null)
+      if (other.gatewaySSLKeyStore != null) {
-    } else if (!gatewaySSLKeyStore.equals(other.gatewaySSLKeyStore))
+      }
+    } else if (!gatewaySSLKeyStore.equals(other.gatewaySSLKeyStore)) {
+    }
-      if (other.gatewaySSLKeyStorePassword != null)
+      if (other.gatewaySSLKeyStorePassword != null) {
-    } else if (!gatewaySSLKeyStorePassword
-        .equals(other.gatewaySSLKeyStorePassword))
+      }
+    } else if (!gatewaySSLKeyStorePassword.equals(other.gatewaySSLKeyStorePassword)) {
+    }
-      if (other.gatewaySSLKeyStoreType != null)
+      if (other.gatewaySSLKeyStoreType != null) {
-    } else if (!gatewaySSLKeyStoreType.equals(other.gatewaySSLKeyStoreType))
+      }
+    } else if (!gatewaySSLKeyStoreType.equals(other.gatewaySSLKeyStoreType)) {
+    }
-      if (other.gatewaySSLTrustStore != null)
+      if (other.gatewaySSLTrustStore != null) {
-    } else if (!gatewaySSLTrustStore.equals(other.gatewaySSLTrustStore))
+      }
+    } else if (!gatewaySSLTrustStore.equals(other.gatewaySSLTrustStore)) {
+    }
-      if (other.gatewaySSLTrustStorePassword != null)
+      if (other.gatewaySSLTrustStorePassword != null) {
-    } else if (!gatewaySSLTrustStorePassword
-        .equals(other.gatewaySSLTrustStorePassword))
+      }
+    } else if (!gatewaySSLTrustStorePassword.equals(other.gatewaySSLTrustStorePassword)) {
+    }
-      if (other.gatewaySslCiphers != null)
+      if (other.gatewaySslCiphers != null) {
-    } else if (!gatewaySslCiphers.equals(other.gatewaySslCiphers))
+      }
+    } else if (!gatewaySslCiphers.equals(other.gatewaySslCiphers)) {
+    }
-      if (other.gatewaySslProperties != null)
+      if (other.gatewaySslProperties != null) {
-    } else if (!gatewaySslProperties.equals(other.gatewaySslProperties))
+      }
+    } else if (!gatewaySslProperties.equals(other.gatewaySslProperties)) {
+    }
-      if (other.gatewaySslProtocols != null)
+      if (other.gatewaySslProtocols != null) {
-    } else if (!gatewaySslProtocols.equals(other.gatewaySslProtocols))
+      }
+    } else if (!gatewaySslProtocols.equals(other.gatewaySslProtocols)) {
-    if (gatewaySslRequireAuthentication != other.gatewaySslRequireAuthentication)
+    }
+    if (gatewaySslRequireAuthentication != other.gatewaySslRequireAuthentication) {
+    }
-      if (other.groups != null)
+      if (other.groups != null) {
-    } else if (!groups.equals(other.groups))
+      }
+    } else if (!groups.equals(other.groups)) {
+    }
-      if (other.httpServiceBindAddress != null)
+      if (other.httpServiceBindAddress != null) {
-    } else if (!httpServiceBindAddress.equals(other.httpServiceBindAddress))
+      }
+    } else if (!httpServiceBindAddress.equals(other.httpServiceBindAddress)) {
-    if (httpServicePort != other.httpServicePort)
+    }
+    if (httpServicePort != other.httpServicePort) {
-    if (jmxManager != other.jmxManager)
+    }
+    if (jmxManager != other.jmxManager) {
+    }
-      if (other.jmxManagerAccessFile != null)
+      if (other.jmxManagerAccessFile != null) {
-    } else if (!jmxManagerAccessFile.equals(other.jmxManagerAccessFile))
+      }
+    } else if (!jmxManagerAccessFile.equals(other.jmxManagerAccessFile)) {
+    }
-      if (other.jmxManagerBindAddress != null)
+      if (other.jmxManagerBindAddress != null) {
-    } else if (!jmxManagerBindAddress.equals(other.jmxManagerBindAddress))
+      }
+    } else if (!jmxManagerBindAddress.equals(other.jmxManagerBindAddress)) {
+    }
-      if (other.jmxManagerHostnameForClients != null)
+      if (other.jmxManagerHostnameForClients != null) {
-    } else if (!jmxManagerHostnameForClients
-        .equals(other.jmxManagerHostnameForClients))
+      }
+    } else if (!jmxManagerHostnameForClients.equals(other.jmxManagerHostnameForClients)) {
-    if (jmxManagerHttpPort != other.jmxManagerHttpPort)
+    }
+    if (jmxManagerHttpPort != other.jmxManagerHttpPort) {
+    }
-      if (other.jmxManagerPasswordFile != null)
+      if (other.jmxManagerPasswordFile != null) {
-    } else if (!jmxManagerPasswordFile.equals(other.jmxManagerPasswordFile))
+      }
+    } else if (!jmxManagerPasswordFile.equals(other.jmxManagerPasswordFile)) {
-    if (jmxManagerPort != other.jmxManagerPort)
+    }
+    if (jmxManagerPort != other.jmxManagerPort) {
-    if (jmxManagerSSL != other.jmxManagerSSL)
+    }
+    if (jmxManagerSSLEnabled != other.jmxManagerSSLEnabled) {
-    if (jmxManagerSSLEnabled != other.jmxManagerSSLEnabled)
-      return false;
+    }
-      if (other.jmxManagerSSLKeyStore != null)
+      if (other.jmxManagerSSLKeyStore != null) {
-    } else if (!jmxManagerSSLKeyStore.equals(other.jmxManagerSSLKeyStore))
+      }
+    } else if (!jmxManagerSSLKeyStore.equals(other.jmxManagerSSLKeyStore)) {
+    }
-      if (other.jmxManagerSSLKeyStorePassword != null)
+      if (other.jmxManagerSSLKeyStorePassword != null) {
-    } else if (!jmxManagerSSLKeyStorePassword
-        .equals(other.jmxManagerSSLKeyStorePassword))
+      }
+    } else if (!jmxManagerSSLKeyStorePassword.equals(other.jmxManagerSSLKeyStorePassword)) {
+    }
-      if (other.jmxManagerSSLKeyStoreType != null)
+      if (other.jmxManagerSSLKeyStoreType != null) {
-    } else if (!jmxManagerSSLKeyStoreType
-        .equals(other.jmxManagerSSLKeyStoreType))
+      }
+    } else if (!jmxManagerSSLKeyStoreType.equals(other.jmxManagerSSLKeyStoreType)) {
+    }
-      if (other.jmxManagerSSLTrustStore != null)
+      if (other.jmxManagerSSLTrustStore != null) {
-    } else if (!jmxManagerSSLTrustStore.equals(other.jmxManagerSSLTrustStore))
+      }
+    } else if (!jmxManagerSSLTrustStore.equals(other.jmxManagerSSLTrustStore)) {
+    }
-      if (other.jmxManagerSSLTrustStorePassword != null)
+      if (other.jmxManagerSSLTrustStorePassword != null) {
-    } else if (!jmxManagerSSLTrustStorePassword
-        .equals(other.jmxManagerSSLTrustStorePassword))
+      }
+    } else if (!jmxManagerSSLTrustStorePassword.equals(other.jmxManagerSSLTrustStorePassword)) {
+    }
-      if (other.jmxManagerSslCiphers != null)
+      if (other.jmxManagerSslCiphers != null) {
-    } else if (!jmxManagerSslCiphers.equals(other.jmxManagerSslCiphers))
+      }
+    } else if (!jmxManagerSslCiphers.equals(other.jmxManagerSslCiphers)) {
+    }
-      if (other.jmxManagerSslProperties != null)
+      if (other.jmxManagerSslProperties != null) {
-    } else if (!jmxManagerSslProperties.equals(other.jmxManagerSslProperties))
+      }
+    } else if (!jmxManagerSslProperties.equals(other.jmxManagerSslProperties)) {
+    }
-      if (other.jmxManagerSslProtocols != null)
+      if (other.jmxManagerSslProtocols != null) {
-    } else if (!jmxManagerSslProtocols.equals(other.jmxManagerSslProtocols))
+      }
+    } else if (!jmxManagerSslProtocols.equals(other.jmxManagerSslProtocols)) {
-    if (jmxManagerSslRequireAuthentication != other.jmxManagerSslRequireAuthentication)
+    }
+    if (jmxManagerSslRequireAuthentication != other.jmxManagerSslRequireAuthentication) {
-    if (jmxManagerStart != other.jmxManagerStart)
+    }
+    if (jmxManagerStart != other.jmxManagerStart) {
-    if (jmxManagerUpdateRate != other.jmxManagerUpdateRate)
+    }
+    if (jmxManagerUpdateRate != other.jmxManagerUpdateRate) {
-    if (loadSharedConfigurationFromDir != other.loadSharedConfigurationFromDir)
+    }
+    if (loadSharedConfigurationFromDir != other.loadSharedConfigurationFromDir) {
+    }
-      if (other.locators != null)
+      if (other.locators != null) {
-    } else if (!locators.equals(other.locators))
+      }
+    } else if (!locators.equals(other.locators)) {
+    }
-    if (logDiskSpaceLimit != other.logDiskSpaceLimit)
+    if (logDiskSpaceLimit != other.logDiskSpaceLimit) {
+    }
-      if (other.logFile != null)
+      if (other.logFile != null) {
-    } else if (!logFile.equals(other.logFile))
+      }
+    } else if (!logFile.equals(other.logFile)) {
-    if (logFileSizeLimit != other.logFileSizeLimit)
+    }
+    if (logFileSizeLimit != other.logFileSizeLimit) {
-    if (logLevel != other.logLevel)
+    }
+    if (logLevel != other.logLevel) {
-    if (maxNumReconnectTries != other.maxNumReconnectTries)
+    }
+    if (maxNumReconnectTries != other.maxNumReconnectTries) {
-    if (maxWaitTimeForReconnect != other.maxWaitTimeForReconnect)
+    }
+    if (maxWaitTimeForReconnect != other.maxWaitTimeForReconnect) {
+    }
-      if (other.mcastAddress != null)
+      if (other.mcastAddress != null) {
-    } else if (!mcastAddress.equals(other.mcastAddress))
+      }
+    } else if (!mcastAddress.equals(other.mcastAddress)) {
+    }
-      if (other.mcastFlowControl != null)
+      if (other.mcastFlowControl != null) {
-    } else if (!mcastFlowControl.equals(other.mcastFlowControl))
+      }
+    } else if (!mcastFlowControl.equals(other.mcastFlowControl)) {
-    if (mcastPort != other.mcastPort)
+    }
+    if (mcastPort != other.mcastPort) {
-    if (mcastRecvBufferSize != other.mcastRecvBufferSize)
+    }
+    if (mcastRecvBufferSize != other.mcastRecvBufferSize) {
-    if (mcastSendBufferSize != other.mcastSendBufferSize)
+    }
+    if (mcastSendBufferSize != other.mcastSendBufferSize) {
-    if (mcastTtl != other.mcastTtl)
+    }
+    if (mcastTtl != other.mcastTtl) {
-    if (memberTimeout != other.memberTimeout)
+    }
+    if (memberTimeout != other.memberTimeout) {
-    if (!Arrays.equals(membershipPortRange, other.membershipPortRange))
+    }
+    if (!Arrays.equals(membershipPortRange, other.membershipPortRange)) {
-    if (memcachedPort != other.memcachedPort)
+    }
+    if (memcachedPort != other.memcachedPort) {
+    }
-      if (other.memcachedProtocol != null)
+      if (other.memcachedProtocol != null) {
-    } else if (!memcachedProtocol.equals(other.memcachedProtocol))
+      }
+    } else if (!memcachedProtocol.equals(other.memcachedProtocol)) {
-    if (modifiable != other.modifiable)
+    }
+    if (modifiable != other.modifiable) {
+    }
-      if (other.name != null)
+      if (other.name != null) {
-    } else if (!name.equals(other.name))
+      }
+    } else if (!name.equals(other.name)) {
+    }
-      if (other.props != null)
+      if (other.props != null) {
-    } else if (!props.equals(other.props))
+      }
+    } else if (!props.equals(other.props)) {
+    }
-      if (other.redundancyZone != null)
+      if (other.redundancyZone != null) {
-    } else if (!redundancyZone.equals(other.redundancyZone))
+      }
+    } else if (!redundancyZone.equals(other.redundancyZone)) {
+    }
-      if (other.remoteLocators != null)
+      if (other.remoteLocators != null) {
-    } else if (!remoteLocators.equals(other.remoteLocators))
+      }
+    } else if (!remoteLocators.equals(other.remoteLocators)) {
-    if (removeUnresponsiveClient != other.removeUnresponsiveClient)
+    }
+    if (removeUnresponsiveClient != other.removeUnresponsiveClient) {
+    }
-      if (other.roles != null)
+      if (other.roles != null) {
-    } else if (!roles.equals(other.roles))
+      }
+    } else if (!roles.equals(other.roles)) {
+    }
-      if (other.security != null)
+      if (other.security != null) {
-    } else if (!security.equals(other.security))
+      }
+    } else if (!security.equals(other.security)) {
+    }
-      if (other.securityClientAccessor != null)
+      if (other.securityClientAccessor != null) {
-    } else if (!securityClientAccessor.equals(other.securityClientAccessor))
+      }
+    } else if (!securityClientAccessor.equals(other.securityClientAccessor)) {
+    }
-      if (other.securityClientAccessorPP != null)
+      if (other.securityClientAccessorPP != null) {
-    } else if (!securityClientAccessorPP.equals(other.securityClientAccessorPP))
+      }
+    } else if (!securityClientAccessorPP.equals(other.securityClientAccessorPP)) {
+    }
-      if (other.securityClientAuthInit != null)
+      if (other.securityClientAuthInit != null) {
-    } else if (!securityClientAuthInit.equals(other.securityClientAuthInit))
+      }
+    } else if (!securityClientAuthInit.equals(other.securityClientAuthInit)) {
+    }
-      if (other.securityClientAuthenticator != null)
+      if (other.securityClientAuthenticator != null) {
-    } else if (!securityClientAuthenticator
-        .equals(other.securityClientAuthenticator))
+      }
+    } else if (!securityClientAuthenticator.equals(other.securityClientAuthenticator)) {
+    }
-      if (other.securityClientDHAlgo != null)
+      if (other.securityClientDHAlgo != null) {
-    } else if (!securityClientDHAlgo.equals(other.securityClientDHAlgo))
+      }
+    } else if (!securityClientDHAlgo.equals(other.securityClientDHAlgo)) {
+    }
-      if (other.securityLogFile != null)
+      if (other.securityLogFile != null) {
-    } else if (!securityLogFile.equals(other.securityLogFile))
+      }
+    } else if (!securityLogFile.equals(other.securityLogFile)) {
-    if (securityLogLevel != other.securityLogLevel)
+    }
+    if (securityLogLevel != other.securityLogLevel) {
+    }
-      if (other.securityPeerAuthInit != null)
+      if (other.securityPeerAuthInit != null) {
-    } else if (!securityPeerAuthInit.equals(other.securityPeerAuthInit))
+      }
+    } else if (!securityPeerAuthInit.equals(other.securityPeerAuthInit)) {
+    }
-      if (other.securityPeerAuthenticator != null)
+      if (other.securityPeerAuthenticator != null) {
-    } else if (!securityPeerAuthenticator
-        .equals(other.securityPeerAuthenticator))
+      }
+    } else if (!securityPeerAuthenticator.equals(other.securityPeerAuthenticator)) {
-    if (securityPeerMembershipTimeout != other.securityPeerMembershipTimeout)
+    }
+    if (securityPeerMembershipTimeout != other.securityPeerMembershipTimeout) {
+    }
-      if (other.serverBindAddress != null)
+      if (other.serverBindAddress != null) {
-    } else if (!serverBindAddress.equals(other.serverBindAddress))
+      }
+    } else if (!serverBindAddress.equals(other.serverBindAddress)) {
-    if (serverSSLEnabled != other.serverSSLEnabled)
+    }
+    if (serverSSLEnabled != other.serverSSLEnabled) {
+    }
-      if (other.serverSSLKeyStore != null)
+      if (other.serverSSLKeyStore != null) {
-    } else if (!serverSSLKeyStore.equals(other.serverSSLKeyStore))
+      }
+    } else if (!serverSSLKeyStore.equals(other.serverSSLKeyStore)) {
+    }
-      if (other.serverSSLKeyStorePassword != null)
+      if (other.serverSSLKeyStorePassword != null) {
-    } else if (!serverSSLKeyStorePassword
-        .equals(other.serverSSLKeyStorePassword))
+      }
+    } else if (!serverSSLKeyStorePassword.equals(other.serverSSLKeyStorePassword)) {
+    }
-      if (other.serverSSLKeyStoreType != null)
+      if (other.serverSSLKeyStoreType != null) {
-    } else if (!serverSSLKeyStoreType.equals(other.serverSSLKeyStoreType))
+      }
+    } else if (!serverSSLKeyStoreType.equals(other.serverSSLKeyStoreType)) {
+    }
-      if (other.serverSSLTrustStore != null)
+      if (other.serverSSLTrustStore != null) {
-    } else if (!serverSSLTrustStore.equals(other.serverSSLTrustStore))
+      }
+    } else if (!serverSSLTrustStore.equals(other.serverSSLTrustStore)) {
+    }
-      if (other.serverSSLTrustStorePassword != null)
+      if (other.serverSSLTrustStorePassword != null) {
-    } else if (!serverSSLTrustStorePassword
-        .equals(other.serverSSLTrustStorePassword))
+      }
+    } else if (!serverSSLTrustStorePassword.equals(other.serverSSLTrustStorePassword)) {
+    }
-      if (other.serverSslCiphers != null)
+      if (other.serverSslCiphers != null) {
-    } else if (!serverSslCiphers.equals(other.serverSslCiphers))
+      }
+    } else if (!serverSslCiphers.equals(other.serverSslCiphers)) {
+    }
-      if (other.serverSslProperties != null)
+      if (other.serverSslProperties != null) {
-    } else if (!serverSslProperties.equals(other.serverSslProperties))
+      }
+    } else if (!serverSslProperties.equals(other.serverSslProperties)) {
+    }
-      if (other.serverSslProtocols != null)
+      if (other.serverSslProtocols != null) {
-    } else if (!serverSslProtocols.equals(other.serverSslProtocols))
+      }
+    } else if (!serverSslProtocols.equals(other.serverSslProtocols)) {
-    if (serverSslRequireAuthentication != other.serverSslRequireAuthentication)
+    }
+    if (serverSslRequireAuthentication != other.serverSslRequireAuthentication) {
-    if (socketBufferSize != other.socketBufferSize)
+    }
+    if (socketBufferSize != other.socketBufferSize) {
-    if (socketLeaseTime != other.socketLeaseTime)
+    }
+    if (socketLeaseTime != other.socketLeaseTime) {
+    }
-      if (other.sourceMap != null)
+      if (other.sourceMap != null) {
-    } else if (!sourceMap.equals(other.sourceMap))
+      }
+    } else if (!sourceMap.equals(other.sourceMap)) {
-    if (sslCiphers == null) {
-      if (other.sslCiphers != null)
-        return false;
-    } else if (!sslCiphers.equals(other.sslCiphers))
-      return false;
-    if (sslEnabled != other.sslEnabled)
-      return false;
+    }
-      if (other.sslProperties != null)
+      if (other.sslProperties != null) {
-    } else if (!sslProperties.equals(other.sslProperties))
+      }
+    } else if (!sslProperties.equals(other.sslProperties)) {
-    if (sslProtocols == null) {
-      if (other.sslProtocols != null)
-        return false;
-    } else if (!sslProtocols.equals(other.sslProtocols))
+    }
+    if (startDevRestApi != other.startDevRestApi) {
-    if (sslRequireAuthentication != other.sslRequireAuthentication)
-      return false;
-    if (startDevRestApi != other.startDevRestApi)
-      return false;
+    }
-      if (other.startLocator != null)
+      if (other.startLocator != null) {
-    } else if (!startLocator.equals(other.startLocator))
+      }
+    } else if (!startLocator.equals(other.startLocator)) {
-    if (startLocatorPort != other.startLocatorPort)
+    }
+    if (startLocatorPort != other.startLocatorPort) {
+    }
-      if (other.statisticArchiveFile != null)
+      if (other.statisticArchiveFile != null) {
-    } else if (!statisticArchiveFile.equals(other.statisticArchiveFile))
+      }
+    } else if (!statisticArchiveFile.equals(other.statisticArchiveFile)) {
-    if (statisticSampleRate != other.statisticSampleRate)
+    }
+    if (statisticSampleRate != other.statisticSampleRate) {
-    if (statisticSamplingEnabled != other.statisticSamplingEnabled)
+    }
+    if (statisticSamplingEnabled != other.statisticSamplingEnabled) {
-    if (tcpPort != other.tcpPort)
+    }
+    if (tcpPort != other.tcpPort) {
-    if (udpFragmentSize != other.udpFragmentSize)
+    }
+    if (udpFragmentSize != other.udpFragmentSize) {
-    if (udpRecvBufferSize != other.udpRecvBufferSize)
+    }
+    if (udpRecvBufferSize != other.udpRecvBufferSize) {
-    if (udpSendBufferSize != other.udpSendBufferSize)
+    }
+    if (udpSendBufferSize != other.udpSendBufferSize) {
-    if (useSharedConfiguration != other.useSharedConfiguration)
+    }
+    if (useSharedConfiguration != other.useSharedConfiguration) {
+    }
-      if (other.userCommandPackages != null)
+      if (other.userCommandPackages != null) {
-    } else if (!userCommandPackages.equals(other.userCommandPackages))
+      }
+    } else if (!userCommandPackages.equals(other.userCommandPackages)) {
+    }
-      if (other.userDefinedProps != null)
+      if (other.userDefinedProps != null) {
-    } else if (!userDefinedProps.equals(other.userDefinedProps))
+      }
+    } else if (!userDefinedProps.equals(other.userDefinedProps)) {
+    }
-   * The hash code of a <code>DistributionConfigImpl</code> is based on the 
+   * The hash code of a <code>DistributionConfigImpl</code> is based on the
-    result = prime * result
-        + ((bindAddress == null) ? 0 : bindAddress.hashCode());
-    result = prime * result
-        + ((cacheXmlFile == null) ? 0 : cacheXmlFile.hashCode());
-    result = prime * result
-        + ((clientConflation == null) ? 0 : clientConflation.hashCode());
-    result = prime * result
-        + ((clusterSSLCiphers == null) ? 0 : clusterSSLCiphers.hashCode());
+    result = prime * result + ((bindAddress == null) ? 0 : bindAddress.hashCode());
+    result = prime * result + ((cacheXmlFile == null) ? 0 : cacheXmlFile.hashCode());
+    result = prime * result + ((clientConflation == null) ? 0 : clientConflation.hashCode());
+    result = prime * result + ((clusterSSLCiphers == null) ? 0 : clusterSSLCiphers.hashCode());
-    result = prime * result
-        + ((clusterSSLKeyStore == null) ? 0 : clusterSSLKeyStore.hashCode());
-    result = prime
-        * result
-        + ((clusterSSLKeyStorePassword == null) ? 0
-            : clusterSSLKeyStorePassword.hashCode());
-    result = prime
-        * result
-        + ((clusterSSLKeyStoreType == null) ? 0 : clusterSSLKeyStoreType
-            .hashCode());
-    result = prime
-        * result
-        + ((clusterSSLProperties == null) ? 0 : clusterSSLProperties.hashCode());
-    result = prime * result
-        + ((clusterSSLProtocols == null) ? 0 : clusterSSLProtocols.hashCode());
+    result = prime * result + ((clusterSSLKeyStore == null) ? 0 : clusterSSLKeyStore.hashCode());
+    result = prime * result + ((clusterSSLKeyStorePassword == null) ? 0 : clusterSSLKeyStorePassword.hashCode());
+    result = prime * result + ((clusterSSLKeyStoreType == null) ? 0 : clusterSSLKeyStoreType.hashCode());
+    result = prime * result + ((clusterSSLProperties == null) ? 0 : clusterSSLProperties.hashCode());
+    result = prime * result + ((clusterSSLProtocols == null) ? 0 : clusterSSLProtocols.hashCode());
-    result = prime
-        * result
-        + ((clusterSSLTrustStore == null) ? 0 : clusterSSLTrustStore.hashCode());
-    result = prime
-        * result
-        + ((clusterSSLTrustStorePassword == null) ? 0
-            : clusterSSLTrustStorePassword.hashCode());
+    result = prime * result + ((clusterSSLTrustStore == null) ? 0 : clusterSSLTrustStore.hashCode());
+    result = prime * result + ((clusterSSLTrustStorePassword == null) ? 0 : clusterSSLTrustStorePassword.hashCode());
-    result = prime * result
-        + ((deployWorkingDir == null) ? 0 : deployWorkingDir.hashCode());
+    result = prime * result + ((deployWorkingDir == null) ? 0 : deployWorkingDir.hashCode());
-    result = prime * result
-        + ((durableClientId == null) ? 0 : durableClientId.hashCode());
+    result = prime * result + ((durableClientId == null) ? 0 : durableClientId.hashCode());
-    result = prime * result
-        + ((gatewaySSLKeyStore == null) ? 0 : gatewaySSLKeyStore.hashCode());
-    result = prime
-        * result
-        + ((gatewaySSLKeyStorePassword == null) ? 0
-            : gatewaySSLKeyStorePassword.hashCode());
-    result = prime
-        * result
-        + ((gatewaySSLKeyStoreType == null) ? 0 : gatewaySSLKeyStoreType
-            .hashCode());
-    result = prime
-        * result
-        + ((gatewaySSLTrustStore == null) ? 0 : gatewaySSLTrustStore.hashCode());
-    result = prime
-        * result
-        + ((gatewaySSLTrustStorePassword == null) ? 0
-            : gatewaySSLTrustStorePassword.hashCode());
-    result = prime * result
-        + ((gatewaySslCiphers == null) ? 0 : gatewaySslCiphers.hashCode());
-    result = prime
-        * result
-        + ((gatewaySslProperties == null) ? 0 : gatewaySslProperties.hashCode());
-    result = prime * result
-        + ((gatewaySslProtocols == null) ? 0 : gatewaySslProtocols.hashCode());
+    result = prime * result + ((gatewaySSLKeyStore == null) ? 0 : gatewaySSLKeyStore.hashCode());
+    result = prime * result + ((gatewaySSLKeyStorePassword == null) ? 0 : gatewaySSLKeyStorePassword.hashCode());
+    result = prime * result + ((gatewaySSLKeyStoreType == null) ? 0 : gatewaySSLKeyStoreType.hashCode());
+    result = prime * result + ((gatewaySSLTrustStore == null) ? 0 : gatewaySSLTrustStore.hashCode());
+    result = prime * result + ((gatewaySSLTrustStorePassword == null) ? 0 : gatewaySSLTrustStorePassword.hashCode());
+    result = prime * result + ((gatewaySslCiphers == null) ? 0 : gatewaySslCiphers.hashCode());
+    result = prime * result + ((gatewaySslProperties == null) ? 0 : gatewaySslProperties.hashCode());
+    result = prime * result + ((gatewaySslProtocols == null) ? 0 : gatewaySslProtocols.hashCode());
-    result = prime
-        * result
-        + ((httpServiceBindAddress == null) ? 0 : httpServiceBindAddress
-            .hashCode());
+    result = prime * result + ((httpServiceBindAddress == null) ? 0 : httpServiceBindAddress.hashCode());
-    result = prime
-        * result
-        + ((jmxManagerAccessFile == null) ? 0 : jmxManagerAccessFile.hashCode());
-    result = prime
-        * result
-        + ((jmxManagerBindAddress == null) ? 0 : jmxManagerBindAddress
-            .hashCode());
-    result = prime
-        * result
-        + ((jmxManagerHostnameForClients == null) ? 0
-            : jmxManagerHostnameForClients.hashCode());
+    result = prime * result + ((jmxManagerAccessFile == null) ? 0 : jmxManagerAccessFile.hashCode());
+    result = prime * result + ((jmxManagerBindAddress == null) ? 0 : jmxManagerBindAddress.hashCode());
+    result = prime * result + ((jmxManagerHostnameForClients == null) ? 0 : jmxManagerHostnameForClients.hashCode());
-    result = prime
-        * result
-        + ((jmxManagerPasswordFile == null) ? 0 : jmxManagerPasswordFile
-            .hashCode());
+    result = prime * result + ((jmxManagerPasswordFile == null) ? 0 : jmxManagerPasswordFile.hashCode());
-    result = prime * result + (jmxManagerSSL ? 1231 : 1237);
-    result = prime
-        * result
-        + ((jmxManagerSSLKeyStore == null) ? 0 : jmxManagerSSLKeyStore
-            .hashCode());
-    result = prime
-        * result
-        + ((jmxManagerSSLKeyStorePassword == null) ? 0
-            : jmxManagerSSLKeyStorePassword.hashCode());
-    result = prime
-        * result
-        + ((jmxManagerSSLKeyStoreType == null) ? 0 : jmxManagerSSLKeyStoreType
-            .hashCode());
-    result = prime
-        * result
-        + ((jmxManagerSSLTrustStore == null) ? 0 : jmxManagerSSLTrustStore
-            .hashCode());
-    result = prime
-        * result
-        + ((jmxManagerSSLTrustStorePassword == null) ? 0
-            : jmxManagerSSLTrustStorePassword.hashCode());
-    result = prime
-        * result
-        + ((jmxManagerSslCiphers == null) ? 0 : jmxManagerSslCiphers.hashCode());
-    result = prime
-        * result
-        + ((jmxManagerSslProperties == null) ? 0 : jmxManagerSslProperties
-            .hashCode());
-    result = prime
-        * result
-        + ((jmxManagerSslProtocols == null) ? 0 : jmxManagerSslProtocols
-            .hashCode());
-    result = prime * result
-        + (jmxManagerSslRequireAuthentication ? 1231 : 1237);
+    result = prime * result + ((jmxManagerSSLKeyStore == null) ? 0 : jmxManagerSSLKeyStore.hashCode());
+    result = prime * result + ((jmxManagerSSLKeyStorePassword == null) ? 0 : jmxManagerSSLKeyStorePassword.hashCode());
+    result = prime * result + ((jmxManagerSSLKeyStoreType == null) ? 0 : jmxManagerSSLKeyStoreType.hashCode());
+    result = prime * result + ((jmxManagerSSLTrustStore == null) ? 0 : jmxManagerSSLTrustStore.hashCode());
+    result = prime * result + ((jmxManagerSSLTrustStorePassword == null) ? 0 : jmxManagerSSLTrustStorePassword.hashCode());
+    result = prime * result + ((jmxManagerSslCiphers == null) ? 0 : jmxManagerSslCiphers.hashCode());
+    result = prime * result + ((jmxManagerSslProperties == null) ? 0 : jmxManagerSslProperties.hashCode());
+    result = prime * result + ((jmxManagerSslProtocols == null) ? 0 : jmxManagerSslProtocols.hashCode());
+    result = prime * result + (jmxManagerSslRequireAuthentication ? 1231 : 1237);
-    result = prime * result
-        + ((mcastAddress == null) ? 0 : mcastAddress.hashCode());
-    result = prime * result
-        + ((mcastFlowControl == null) ? 0 : mcastFlowControl.hashCode());
+    result = prime * result + ((mcastAddress == null) ? 0 : mcastAddress.hashCode());
+    result = prime * result + ((mcastFlowControl == null) ? 0 : mcastFlowControl.hashCode());
-    result = prime * result
-        + ((memcachedProtocol == null) ? 0 : memcachedProtocol.hashCode());
+    result = prime * result + ((memcachedProtocol == null) ? 0 : memcachedProtocol.hashCode());
-    result = prime * result
-        + ((redundancyZone == null) ? 0 : redundancyZone.hashCode());
-    result = prime * result
-        + ((remoteLocators == null) ? 0 : remoteLocators.hashCode());
+    result = prime * result + ((redundancyZone == null) ? 0 : redundancyZone.hashCode());
+    result = prime * result + ((remoteLocators == null) ? 0 : remoteLocators.hashCode());
-    result = prime
-        * result
-        + ((securityPeerAuthInit == null) ? 0 : securityPeerAuthInit.hashCode());
-    result = prime
-        * result
-        + ((securityPeerAuthenticator == null) ? 0 : securityPeerAuthenticator
-            .hashCode());
+    result = prime * result + ((securityPeerAuthInit == null) ? 0 : securityPeerAuthInit.hashCode());
+    result = prime * result + ((securityPeerAuthenticator == null) ? 0 : securityPeerAuthenticator.hashCode());
-    result = prime * result
-        + ((serverBindAddress == null) ? 0 : serverBindAddress.hashCode());
+    result = prime * result + ((serverBindAddress == null) ? 0 : serverBindAddress.hashCode());
-    result = prime * result
-        + ((serverSSLKeyStore == null) ? 0 : serverSSLKeyStore.hashCode());
-    result = prime
-        * result
-        + ((serverSSLKeyStorePassword == null) ? 0 : serverSSLKeyStorePassword
-            .hashCode());
-    result = prime
-        * result
-        + ((serverSSLKeyStoreType == null) ? 0 : serverSSLKeyStoreType
-            .hashCode());
-    result = prime * result
-        + ((serverSSLTrustStore == null) ? 0 : serverSSLTrustStore.hashCode());
-    result = prime
-        * result
-        + ((serverSSLTrustStorePassword == null) ? 0
-            : serverSSLTrustStorePassword.hashCode());
-    result = prime * result
-        + ((serverSslCiphers == null) ? 0 : serverSslCiphers.hashCode());
-    result = prime * result
-        + ((serverSslProperties == null) ? 0 : serverSslProperties.hashCode());
-    result = prime * result
-        + ((serverSslProtocols == null) ? 0 : serverSslProtocols.hashCode());
+    result = prime * result + ((serverSSLKeyStore == null) ? 0 : serverSSLKeyStore.hashCode());
+    result = prime * result + ((serverSSLKeyStorePassword == null) ? 0 : serverSSLKeyStorePassword.hashCode());
+    result = prime * result + ((serverSSLKeyStoreType == null) ? 0 : serverSSLKeyStoreType.hashCode());
+    result = prime * result + ((serverSSLTrustStore == null) ? 0 : serverSSLTrustStore.hashCode());
+    result = prime * result + ((serverSSLTrustStorePassword == null) ? 0 : serverSSLTrustStorePassword.hashCode());
+    result = prime * result + ((serverSslCiphers == null) ? 0 : serverSslCiphers.hashCode());
+    result = prime * result + ((serverSslProperties == null) ? 0 : serverSslProperties.hashCode());
+    result = prime * result + ((serverSslProtocols == null) ? 0 : serverSslProtocols.hashCode());
-    result = prime * result
-        + ((sslCiphers == null) ? 0 : sslCiphers.hashCode());
-    result = prime * result + (sslEnabled ? 1231 : 1237);
-    result = prime * result
-        + ((sslProperties == null) ? 0 : sslProperties.hashCode());
-    result = prime * result
-        + ((sslProtocols == null) ? 0 : sslProtocols.hashCode());
-    result = prime * result + (sslRequireAuthentication ? 1231 : 1237);
+    result = prime * result + ((sslProperties == null) ? 0 : sslProperties.hashCode());
-    result = prime * result
-        + ((startLocator == null) ? 0 : startLocator.hashCode());
+    result = prime * result + ((startLocator == null) ? 0 : startLocator.hashCode());
-    result = prime
-        * result
-        + ((statisticArchiveFile == null) ? 0 : statisticArchiveFile.hashCode());
+    result = prime * result + ((statisticArchiveFile == null) ? 0 : statisticArchiveFile.hashCode());
-    result = prime * result
-        + ((userCommandPackages == null) ? 0 : userCommandPackages.hashCode());
-    result = prime * result
-        + ((userDefinedProps == null) ? 0 : userDefinedProps.hashCode());
+    result = prime * result + ((userCommandPackages == null) ? 0 : userCommandPackages.hashCode());
+    result = prime * result + ((userDefinedProps == null) ? 0 : userDefinedProps.hashCode());
-  
+
-      if (getMcastAddress().equals(DistributionConfig.DEFAULT_MCAST_ADDRESS)
-          && getMcastPort() == DistributionConfig.DEFAULT_MCAST_PORT) {
-        throw new IllegalStateException(
-            DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults set and default address and port are being used");
-      }
+        if (getMcastAddress().equals(DistributionConfig.DEFAULT_MCAST_ADDRESS) && getMcastPort() == DistributionConfig.DEFAULT_MCAST_PORT) {
+          throw new IllegalStateException(DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults set and default address and port are being used");
+        }
-    membershipPortRange = (int[])checkAttribute(MEMBERSHIP_PORT_RANGE, range);
-  }
-  
-  /**
-   * Set the host-port information of remote site locator 
-   */
-  public void setRemoteLocators(String value) {
-    this.remoteLocators = (String)checkAttribute(REMOTE_LOCATORS, value);
+    membershipPortRange = (int[]) checkAttribute(MEMBERSHIP_PORT_RANGE, range);
-   * get the host-port information of remote site locator 
+   * Set the host-port information of remote site locator
+   */
+  public void setRemoteLocators(String value) {
+    this.remoteLocators = (String) checkAttribute(REMOTE_LOCATORS, value);
+  }
+
+  /**
+   * get the host-port information of remote site locator
-    this.memcachedPort = (Integer)checkAttribute(MEMCACHED_PORT, value);
+    this.memcachedPort = (Integer) checkAttribute(MEMCACHED_PORT, value);
-    this.memcachedProtocol = (String)checkAttribute(MEMCACHED_PROTOCOL, protocol);
+    this.memcachedProtocol = (String) checkAttribute(MEMCACHED_PROTOCOL, protocol);
-  
+
-  
+
-    this.redisPort = (Integer)checkAttribute(REDIS_PORT, value);
+    this.redisPort = (Integer) checkAttribute(REDIS_PORT, value);
-  
+
-    this.redisBindAddress = (String)checkAttribute(REDIS_BIND_ADDRESS, bindAddress);
+    this.redisBindAddress = (String) checkAttribute(REDIS_BIND_ADDRESS, bindAddress);
-  
+
-  
+
-  
+
-  
-  @Override 
+
+  @Override
-    this.offHeapMemorySize = (String)checkAttribute(OFF_HEAP_MEMORY_SIZE, value);
+    this.offHeapMemorySize = (String) checkAttribute(OFF_HEAP_MEMORY_SIZE, value);
-    this.memcachedBindAddress = (String)checkAttribute(MEMCACHED_BIND_ADDRESS, bindAddress);
+    this.memcachedBindAddress = (String) checkAttribute(MEMCACHED_BIND_ADDRESS, bindAddress);
-    this.enableSharedConfiguration = (Boolean)checkAttribute(ENABLE_CLUSTER_CONFIGURATION, value);
+    this.enableSharedConfiguration = (Boolean) checkAttribute(ENABLE_CLUSTER_CONFIGURATION, value);
-  
+
-    this.useSharedConfiguration = (Boolean)checkAttribute(USE_CLUSTER_CONFIGURATION, newValue);
+    this.useSharedConfiguration = (Boolean) checkAttribute(USE_CLUSTER_CONFIGURATION, newValue);
-  
+
+
-    this.loadSharedConfigurationFromDir = (Boolean)checkAttribute(LOAD_CLUSTER_CONFIGURATION_FROM_DIR, newValue);
+    this.loadSharedConfigurationFromDir = (Boolean) checkAttribute(LOAD_CLUSTER_CONFIGURATION_FROM_DIR, newValue);
-  
+
-  
+
-    this.clusterConfigDir = (String)checkAttribute(CLUSTER_CONFIGURATION_DIR, clusterConfigDir);
-  }  
-  
+    this.clusterConfigDir = (String) checkAttribute(CLUSTER_CONFIGURATION_DIR, clusterConfigDir);
+  }
+
+
-  public boolean getServerSSLEnabled() {    
+  public boolean getServerSSLEnabled() {
-    this.serverSSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED, value);
-    
+    this.serverSSLEnabled = (Boolean) checkAttribute(SERVER_SSL_ENABLED, value);
+
-    this.serverSslRequireAuthentication = (Boolean)checkAttribute(SERVER_SSL_REQUIRE_AUTHENTICATION, value);
+    this.serverSslRequireAuthentication = (Boolean) checkAttribute(SERVER_SSL_REQUIRE_AUTHENTICATION, value);
-    this.serverSslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
+    this.serverSslProtocols = (String) checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
-    this.serverSslCiphers = (String)checkAttribute(SERVER_SSL_CIPHERS, ciphers);
+    this.serverSslCiphers = (String) checkAttribute(SERVER_SSL_CIPHERS, ciphers);
-  public void setServerSSLKeyStore( String value ) {
-    value = (String)checkAttribute(SERVER_SSL_KEYSTORE, value);
-   this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-   this.serverSSLKeyStore = value;
+  public void setServerSSLKeyStore(String value) {
+    value = (String) checkAttribute(SERVER_SSL_KEYSTORE, value);
+    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
+    this.serverSSLKeyStore = value;
-  public void setServerSSLKeyStoreType( String value ) {
-    value = (String)checkAttribute(SERVER_SSL_KEYSTORE_TYPE, value);
+
+  public void setServerSSLKeyStoreType(String value) {
+    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_TYPE, value);
-  public void setServerSSLKeyStorePassword( String value ) {
-    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_PASSWORD,  value );
+
+  public void setServerSSLKeyStorePassword(String value) {
+    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_PASSWORD, value);
-  public void setServerSSLTrustStore( String value ) {
-    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE, value);
+
+  public void setServerSSLTrustStore(String value) {
+    value = (String) checkAttribute(SERVER_SSL_TRUSTSTORE, value);
-  public void setServerSSLTrustStorePassword( String value ) {
-    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE_PASSWORD, value);
+
+  public void setServerSSLTrustStorePassword(String value) {
+    value = (String) checkAttribute(SERVER_SSL_TRUSTSTORE_PASSWORD, value);
-  public String getServerSSLKeyStore( ){
+  public String getServerSSLKeyStore() {
-  public String getServerSSLKeyStoreType( ){
+
+  public String getServerSSLKeyStoreType() {
-  
-  public String getServerSSLKeyStorePassword( ){
+
+  public String getServerSSLKeyStorePassword() {
-  
-  public String getServerSSLTrustStore( ){
+
+  public String getServerSSLTrustStore() {
-  
-  public String getServerSSLTrustStorePassword( ){
+
+  public String getServerSSLTrustStorePassword() {
-  
+
-  
+
-  public boolean getGatewaySSLEnabled() {    
+  public boolean getGatewaySSLEnabled() {
-    this.gatewaySSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED, value);
-    
+    this.gatewaySSLEnabled = (Boolean) checkAttribute(SERVER_SSL_ENABLED, value);
+
-    this.gatewaySslRequireAuthentication = (Boolean)checkAttribute(GATEWAY_SSL_REQUIRE_AUTHENTICATION, value);
+    this.gatewaySslRequireAuthentication = (Boolean) checkAttribute(GATEWAY_SSL_REQUIRE_AUTHENTICATION, value);
-    this.gatewaySslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
+    this.gatewaySslProtocols = (String) checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
-    this.gatewaySslCiphers = (String)checkAttribute(GATEWAY_SSL_CIPHERS, ciphers);
+    this.gatewaySslCiphers = (String) checkAttribute(GATEWAY_SSL_CIPHERS, ciphers);
-  public void setGatewaySSLKeyStore( String value ) {
+  public void setGatewaySSLKeyStore(String value) {
-   this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-   this.gatewaySSLKeyStore = value;
+    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
+    this.gatewaySSLKeyStore = value;
-  public void setGatewaySSLKeyStoreType( String value ) {
+
+  public void setGatewaySSLKeyStoreType(String value) {
-  public void setGatewaySSLKeyStorePassword( String value ) {
+
+  public void setGatewaySSLKeyStorePassword(String value) {
-  public void setGatewaySSLTrustStore( String value ) {
+
+  public void setGatewaySSLTrustStore(String value) {
-  public void setGatewaySSLTrustStorePassword( String value ) {
+
+  public void setGatewaySSLTrustStorePassword(String value) {
-  public String getGatewaySSLKeyStore( ){
+  public String getGatewaySSLKeyStore() {
-  public String getGatewaySSLKeyStoreType( ){
+
+  public String getGatewaySSLKeyStoreType() {
-  
-  public String getGatewaySSLKeyStorePassword( ){
+
+  public String getGatewaySSLKeyStorePassword() {
-  
-  public String getGatewaySSLTrustStore( ){
+
+  public String getGatewaySSLTrustStore() {
-  
-  public String getGatewaySSLTrustStorePassword( ){
+
+  public String getGatewaySSLTrustStorePassword() {
+
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
-        httpServiceSSLKeyStorePassword);
+    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME, httpServiceSSLKeyStorePassword);
-  
+
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
-        httpServiceSSLTrustStorePassword);
+    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, httpServiceSSLTrustStorePassword);
-  
+
-  
+
-
