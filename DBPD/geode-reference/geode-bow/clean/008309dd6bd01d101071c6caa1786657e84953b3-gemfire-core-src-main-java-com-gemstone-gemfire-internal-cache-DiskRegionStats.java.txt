Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  private static final int numOverflowBytesOnDiskId;
+    final String numOverflowBytesOnDiskDesc =
+        "The current number bytes on disk and not in memory. This is true of overflowed entries. It is also true of recovered entries that have not yet been faulted in.";
+         f.createLongGauge("bytesOnlyOnDisk", numOverflowBytesOnDiskDesc, "bytes"),
+    numOverflowBytesOnDiskId = type.nameToId("bytesOnlyOnDisk");
+  
+  /**
+   * Returns the current number of entries whose value has been
+   * overflowed to disk.  This value will decrease when a value is
+   * faulted in. 
+   */
+  public long getNumOverflowBytesOnDisk() {
+    return this.stats.getLong(numOverflowBytesOnDiskId);
+  }
+  
+  /**
+   * Increments the current number of entries whose value has been
+   * overflowed to disk by a given amount.
+   */
+  public void incNumOverflowBytesOnDisk(long delta) {
+    this.stats.incLong(numOverflowBytesOnDiskId, delta);
+  }
