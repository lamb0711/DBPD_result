GEODE-1902 - Add GEMFIRE_VERBOSE LogMarker as alias of GEODE_VERBOSE for backwards compatibility

This closes #247

+
+
-  
-  public static final String GEMFIRE_VERBOSE_FILTER = "{GEODE_VERBOSE}";
-  
-  protected static final String STDOUT = "STDOUT";
-  private static final PropertyChangeListener propertyChangeListener = new PropertyChangeListenerImpl();
-  
+  public static final String GEODE_VERBOSE_FILTER = "{GEODE_VERBOSE}";
+  public static final String GEMFIRE_VERBOSE_FILTER = "{GEMFIRE_VERBOSE}";
-
+  protected static final String STDOUT = "STDOUT";
+  private static final PropertyChangeListener propertyChangeListener = new PropertyChangeListenerImpl();
-  
-  /** Protected by static synchronization. Used for removal and adding stdout back in. */
+
+  /**
+   * Protected by static synchronization. Used for removal and adding stdout back in.
+   */
-  
+
+
+  private LogService() {
+    // do not instantiate
+  }
+
-    LoggerContext context = ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(BASE_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext();
+    LoggerContext context = ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(BASE_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE))
+      .getContext();
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    final Configuration config = ((org.apache.logging.log4j.core.Logger)
-        LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
-    
+    final Configuration config = ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE))
+      .getContext()
+      .getConfiguration();
+
-    
+
-    
+
-  
+
-   * 
-  public static File findLog4jConfigInCurrentDir() {    
+  public static File findLog4jConfigInCurrentDir() {
-  
+
-   * 
+   * <p>
-   * 
-  public static LogWriterLogger createLogWriterLogger(final String name, final String connectionName, final boolean isSecure) {
+  public static LogWriterLogger createLogWriterLogger(final String name,
+                                                      final String connectionName,
+                                                      final boolean isSecure) {
-  
+
-   * 
-   * @param intLevel
-   *          The int value of the Level to return.
+   * @param intLevel The int value of the Level to return.
+   *
+   *
-   *
+   *
-    final Configuration config = ((org.apache.logging.log4j.core.Logger)
-        LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
+    final Configuration config = ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE))
+      .getContext()
+      .getConfiguration();
-  
+
-    final Configuration config = ((org.apache.logging.log4j.core.Logger)
-        LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
-    
-    if (Configurator.hasContextWideFilter(config) || 
-        Configurator.hasAppenderFilter(config) || 
-        Configurator.hasDebugOrLower(config) || 
-        Configurator.hasLoggerFilter(config) || 
-        Configurator.hasAppenderRefFilter(config)) {
+    final Configuration config = ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE))
+      .getContext()
+      .getConfiguration();
+
+    if (Configurator.hasContextWideFilter(config) || Configurator.hasAppenderFilter(config) || Configurator.hasDebugOrLower(config) || Configurator
+      .hasLoggerFilter(config) || Configurator.hasAppenderRefFilter(config)) {
-  
-  private static class PropertyChangeListenerImpl implements PropertyChangeListener {
-    @SuppressWarnings("synthetic-access")
-    @Override
-    public void propertyChange(final PropertyChangeEvent evt) {
-      StatusLogger.getLogger().debug("LogService responding to a property change event. Property name is {}.",
-          evt.getPropertyName());
-      
-      if (evt.getPropertyName().equals(LoggerContext.PROPERTY_CONFIG)) {
-        configureFastLoggerDelegating();
-      }
-    }
+
+  public static void setSecurityLogLevel(Level level) {
+    Configurator.setLevel(SECURITY_LOGGER_NAME, level);
-  
+
+  public static Level getBaseLogLevel() {
+    return Configurator.getLevel(BASE_LOGGER_NAME);
+  }
+
-  
-  public static void setSecurityLogLevel(Level level) {
-    Configurator.setLevel(SECURITY_LOGGER_NAME, level);
-  }
-  
-  public static Level getBaseLogLevel() {
-    return Configurator.getLevel(BASE_LOGGER_NAME);
-  }
-  
+
-  
+
-   * LogWriterAppender for log-file. The Appender instance is stored in 
+   * LogWriterAppender for log-file. The Appender instance is stored in
-  
+
-   * the log4j2-default.xml configuration. This is done when the 
-   * LogWriterAppender for log-file is destroyed. The Appender instance stored 
+   * the log4j2-default.xml configuration. This is done when the
+   * LogWriterAppender for log-file is destroyed. The Appender instance stored
-  
-  private LogService() {
-    // do not instantiate
+
+  private static class PropertyChangeListenerImpl implements PropertyChangeListener {
+
+    @SuppressWarnings("synthetic-access")
+    @Override
+    public void propertyChange(final PropertyChangeEvent evt) {
+      StatusLogger.getLogger()
+                  .debug("LogService responding to a property change event. Property name is {}.", evt.getPropertyName());
+
+      if (evt.getPropertyName().equals(LoggerContext.PROPERTY_CONFIG)) {
+        configureFastLoggerDelegating();
+      }
+    }
