GEODE-4876: Move VM APIs from Host to VM

Deprecate Host.

+import static org.apache.geode.test.dunit.standalone.DUnitLauncher.NUM_VMS;
+
+import java.util.List;
- * This class represents a Java Virtual Machine that runs on a host.
+ * This class represents a Java Virtual Machine that runs in a DistributedTest.
-@SuppressWarnings("serial")
+@SuppressWarnings("serial,unused")
+  public static final int CONTROLLER_VM = -1;
+
+  public static final int DEFAULT_VM_COUNT = NUM_VMS;
+
-   * restart an unavailable VM
+   * Returns true if executed from the main JUnit VM.
-  public synchronized void makeAvailable() {
-    if (!available) {
-      available = true;
-      bounce();
-    }
+  public static boolean isControllerVM() {
+    return getCurrentVMNum() == CONTROLLER_VM;
-   * Returns the total number of {@code VM}s on all {@code Host}s (note that DUnit currently only
-   * supports one {@code Host}).
+   * Returns true if executed from a DUnit VM. Returns false if executed from the main JUnit VM.
+   */
+  public static boolean isVM() {
+    return getCurrentVMNum() != CONTROLLER_VM;
+  }
+
+  /**
+   * Returns a VM that runs in this DistributedTest.
+   *
+   * @param whichVM A zero-based identifier of the VM
+   */
+  public static VM getVM(int whichVM) {
+    return Host.getHost(0).getVM(whichVM);
+  }
+
+  /**
+   * Returns a collection of all DistributedTest VMs.
+   */
+  public static List<VM> getAllVMs() {
+    return Host.getHost(0).getAllVMs();
+  }
+
+  /**
+   * Returns the number of VMs that run in this DistributedTest.
-    int count = 0;
-    for (int h = 0; h < Host.getHostCount(); h++) {
-      Host host = Host.getHost(h);
-      count += host.getVMCount();
-    }
-    return count;
+    return Host.getHost(0).getVMCount();
+  }
+
+  /**
+   * Returns the DistributedTest Locator VM.
+   */
+  public static VM getLocator() {
+    return Host.getLocator();
+  }
+
+  /**
+   * Returns the machine name hosting this DistributedTest.
+   */
+  public static String getHostName() {
+    return Host.getHost(0).getHostName();
+   * Restart an unavailable VM
+   */
+  public synchronized void makeAvailable() {
+    if (!available) {
+      available = true;
+      bounce();
+    }
+  }
+
+  /**
+  public File getWorkingDirectory() {
+    return DUnitEnv.get().getWorkingDirectory(getVersion(), getId());
+  }
+
-  public File getWorkingDirectory() {
-    return DUnitEnv.get().getWorkingDirectory(getVersion(), getId());
-  }
-
