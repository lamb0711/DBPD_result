GEODE-7165: Remove networking dependency from GatewayReceiverImplTest (#4071)

The test was failing on machines with ports 2000 or 2001 in use.

This change replaces GatewayReceiverImpl's dependency on AvailablePort
with functions that are now injected by the unit tests.

+import static org.apache.geode.internal.AvailablePort.isPortAvailable;
+import java.util.function.Function;
+import org.apache.geode.annotations.VisibleForTesting;
-import org.apache.geode.internal.AvailablePort;
+  private final Function<Integer, Boolean> isPortAvailableFunction;
+  private final Function<PortRange, Integer> getRandomAvailablePortInRangeFunction;
+    this(cache, startPort, endPort, maximumTimeBetweenPings, socketBufferSize, bindAddress,
+        gatewayTransportFilters, hostnameForSenders, manualStart,
+        port -> isPortAvailable(port, SOCKET, getAddress(SOCKET)),
+        portRange -> getRandomAvailablePortInRange(portRange.startPort, portRange.endPort, SOCKET));
+  }
+
+  @VisibleForTesting
+  GatewayReceiverImpl(final InternalCache cache, final int startPort, final int endPort,
+      final int maximumTimeBetweenPings, final int socketBufferSize, final String bindAddress,
+      final List<GatewayTransportFilter> gatewayTransportFilters, final String hostnameForSenders,
+      final boolean manualStart, final boolean isPortAvailableResult,
+      final int getRandomAvailablePortInRangeResult) {
+    this(cache, startPort, endPort, maximumTimeBetweenPings, socketBufferSize, bindAddress,
+        gatewayTransportFilters, hostnameForSenders, manualStart, port -> isPortAvailableResult,
+        portRange -> getRandomAvailablePortInRangeResult);
+  }
+
+  private GatewayReceiverImpl(final InternalCache cache, final int startPort, final int endPort,
+      final int maximumTimeBetweenPings, final int socketBufferSize, final String bindAddress,
+      final List<GatewayTransportFilter> gatewayTransportFilters, final String hostnameForSenders,
+      final boolean manualStart, final Function<Integer, Boolean> isPortAvailableFunction,
+      final Function<PortRange, Integer> getRandomAvailablePortInRangeFunction) {
+    this.isPortAvailableFunction = isPortAvailableFunction;
+    this.getRandomAvailablePortInRangeFunction = getRandomAvailablePortInRangeFunction;
-    if (!AvailablePort.isPortAvailable(port, SOCKET, getAddress(SOCKET))) {
+    if (!isPortAvailableFunction.apply(port)) {
-      randomPort = getRandomAvailablePortInRange(startPort, endPort, SOCKET);
+      randomPort = getRandomAvailablePortInRangeFunction.apply(new PortRange(startPort, endPort));
+
+  private static class PortRange {
+
+    private final int startPort;
+    private final int endPort;
+
+    private PortRange(int startPort, int endPort) {
+      this.startPort = startPort;
+      this.endPort = endPort;
+    }
+  }
