Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public final class IdentityUpdateMessage extends DistributionMessage implements MessageWithReply
-{
+public final class IdentityUpdateMessage extends DistributionMessage implements MessageWithReply {
-  
+
-  
+
-  public IdentityUpdateMessage() {
-  }
-  
+  public IdentityUpdateMessage() {}
+
-  public int getProcessorType()
-  {
+  public int getProcessorType() {
-  protected void process(DistributionManager dm)
-  {
+  protected void process(DistributionManager dm) {
-      
+
-      
-      ReplyMessage.send(getSender(), getProcessorId(), null, dm);        
-    }
-    catch (VirtualMachineError err) {
+
+      ReplyMessage.send(getSender(), getProcessorId(), null, dm);
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-  public int getProcessorId()
-  {
+  public int getProcessorId() {
-  public static IdentityUpdateResponse send(Set recipients, InternalDistributedSystem is, int currentPRId)
-  {
+  public static IdentityUpdateResponse send(Set recipients, InternalDistributedSystem is,
+      int currentPRId) {
-    IdentityRequestMessage.setLatestId(currentPRId); // set local value 
+    IdentityRequestMessage.setLatestId(currentPRId); // set local value
-    IdentityUpdateMessage m = new IdentityUpdateMessage(recipients, p.getProcessorId(), currentPRId);
-    is.getDistributionManager().putOutgoing(m);  // set remote values
+    IdentityUpdateMessage m =
+        new IdentityUpdateMessage(recipients, p.getProcessorId(), currentPRId);
+    is.getDistributionManager().putOutgoing(m); // set remote values
-  
+
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  
+
-  public String toString()
-  {
-    return new StringBuffer()
-      .append(getClass().getName())
-      .append("(sender=")
-      .append(getSender())
-      .append("; processorId=")
-      .append(this.processorId)
-      .append("; newPRId=")
-      .append(this.newId)
-      .append(")")
-      .toString();
+  public String toString() {
+    return new StringBuffer().append(getClass().getName()).append("(sender=").append(getSender())
+        .append("; processorId=").append(this.processorId).append("; newPRId=").append(this.newId)
+        .append(")").toString();
-  
+
+   * 
-    
+
-    /** 
-     * The IdentityResponse processor ignores remote exceptions by implmenting this method.  Ignoring remote exceptions is acceptable
-     * since the response is only meant to wait for all healthy recipients to receive their {@link IdentityUpdateMessage}
+    /**
+     * The IdentityResponse processor ignores remote exceptions by implmenting this method. Ignoring
+     * remote exceptions is acceptable since the response is only meant to wait for all healthy
+     * recipients to receive their {@link IdentityUpdateMessage}
-    protected synchronized void processException(ReplyException ex)
-    {
+    protected synchronized void processException(ReplyException ex) {
