GEODE-8170: change all hash and set commands to use function (#5125)

All hash and set commands now use the new function+delta data model.
This allowed the synchronized keyword to be removed from RedisHash and RedisSet.

-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-  private static final int FIELD_INDEX = 2;
-
-  private static final int INCREMENT_INDEX = 3;
+  private static final int INCREMENT_INDEX = FIELD_INDEX + 1;
+    ByteArrayWrapper key = command.getKey();
+    byte[] byteField = commandElems.get(FIELD_INDEX);
+    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-    ByteArrayWrapper key = command.getKey();
+    RedisHashCommands redisHashCommands = createRedisHashCommands(context);
-    long value;
-
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      RedisHash redisHash = getModifiableRedisHash(context, key);
-
-      byte[] byteField = commandElems.get(FIELD_INDEX);
-      ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-      /*
-       * Put increment as value if field doesn't exist
-       */
-
-      ByteArrayWrapper oldValue = redisHash.get(field);
-
-      if (oldValue == null) {
-        ByteArrayWrapper newValue = new ByteArrayWrapper(incrArray);
-        redisHash.put(field, newValue);
-
-        saveRedishHash(redisHash, context, key);
-
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), increment));
-
-        return;
-      }
-
-      /*
-       * If the field did exist then increment the field
-       */
-      try {
-        value = Long.parseLong(oldValue.toString());
-      } catch (NumberFormatException e) {
-        command.setResponse(
-            Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
-        return;
-      }
-
-      /*
-       * Check for overflow
-       */
-      if ((value >= 0 && increment > (Long.MAX_VALUE - value))
-          || (value <= 0 && increment < (Long.MIN_VALUE - value))) {
-        command
-            .setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-        return;
-      }
-
-      value += increment;
-
-      redisHash.put(field, new ByteArrayWrapper(Coder.longToBytes(value)));
-
-      saveRedishHash(redisHash, context, key);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
+    try {
+      long value = redisHashCommands.hincrby(key, field, increment);
+      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), value));
+    } catch (NumberFormatException ex) {
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
-      return;
+          Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
+    } catch (ArithmeticException ex) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-    command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), value));
-
