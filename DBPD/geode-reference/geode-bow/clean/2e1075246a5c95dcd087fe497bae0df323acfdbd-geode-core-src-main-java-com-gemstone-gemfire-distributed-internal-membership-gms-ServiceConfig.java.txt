Merge branch 'release/1.0.0-incubating.M3'

-import java.net.InetAddress;
-
-import com.gemstone.gemfire.distributed.internal.membership.gms.membership.GMSJoinLeave;
+import com.gemstone.gemfire.distributed.internal.InternalLocator;
+import java.net.InetAddress;
+
-  public static final long MEMBER_REQUEST_COLLECTION_INTERVAL = Long.getLong("gemfire.member-request-collection-interval", 300);
+  public static final long MEMBER_REQUEST_COLLECTION_INTERVAL = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "member-request-collection-interval", 300);
+
+  public boolean areLocatorsPreferredAsCoordinators() {
+    boolean locatorsAreCoordinators = false;
+
+    if (networkPartitionDetectionEnabled) {
+      locatorsAreCoordinators = true;
+    }
+    else {
+      // check if security is enabled
+      String prop = dconfig.getSecurityPeerAuthInit();
+      locatorsAreCoordinators =  (prop != null && prop.length() > 0);
+      if (!locatorsAreCoordinators) {
+        locatorsAreCoordinators = Boolean.getBoolean(InternalLocator.LOCATORS_PREFERRED_AS_COORDINATORS);
+      }
+    }
+    return locatorsAreCoordinators;
+  }
-    ackCollectionTimeout = Integer.getInteger("gemfire.VIEW_ACK_TIMEOUT", ackCollectionTimeout).intValue();
+    ackCollectionTimeout = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "VIEW_ACK_TIMEOUT", ackCollectionTimeout).intValue();
-    lossThreshold = Integer.getInteger("gemfire.network-partition-threshold", 51);
+    lossThreshold = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "network-partition-threshold", 51);
-    
-    memberWeight = Integer.getInteger("gemfire.member-weight", 0);
+
+    memberWeight = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "member-weight", 0);
