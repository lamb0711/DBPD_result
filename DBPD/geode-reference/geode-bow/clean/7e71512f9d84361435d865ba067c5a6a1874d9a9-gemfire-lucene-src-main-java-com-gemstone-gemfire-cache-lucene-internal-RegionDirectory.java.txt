Fixing failure from RegionDirectoryJUnitTest.testCopyBytesWithThreads

The underlying issue was that the FileIndexInputClass extended
BufferedIndexInput, which looks like has an issue in the clone method.
In FileIndexInput.clone. We were cloning the input stream to start
at the position that it left off (which I think is correct), but the
BufferedIndexInput.clone dropped the buffer, so the next read would miss
some of the bytes that where in that buffer.

After some thought, I don't think we want the BufferedIndexInput because
the data is already stored in memory in a byte array in FileInputStream.
So I removed the dependency on BufferedIndexInput. As part of that work,
I added seek() to the FileInputStream to make seek operations more
efficient.

-import java.io.InputStream;
+/**
+ * An implementation of Directory that stores data in geode regions.
+ * 
+ * Directory is an interface to file/RAM storage for lucene. This class uses
+ * the {@link FileSystem} class to store the data in the provided geode
+ * regions.
+ */
-  private static final class FileIndexInput extends BufferedIndexInput {
-    private final File file;
-    InputStream in;
-
-    private FileIndexInput(String resourceDesc, File file) {
-      super(resourceDesc);
-      this.file = file;
-      in = file.getInputStream();
-    }
-
-    @Override
-    public long length() {
-      return file.getLength();
-    }
-
-    @Override
-    public void close() throws IOException {
-      in.close();
-    }
-
-    @Override
-    protected void seekInternal(long pos) throws IOException {
-      in.close();
-      in = file.getInputStream();
-      in.skip(pos);
-    }
-
-    @Override
-    protected void readInternal(byte[] b, int offset, int length) throws IOException {
-      in.read(b, offset, length);
-    }
-  }
-
