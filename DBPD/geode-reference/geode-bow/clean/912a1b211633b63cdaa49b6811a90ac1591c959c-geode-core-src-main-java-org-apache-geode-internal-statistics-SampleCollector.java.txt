GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#sample nanosTimeStamp={}",
+      logger.trace(LogMarker.STATISTICS_VERBOSE, "SampleCollector#sample nanosTimeStamp={}",
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#sample handlers={}", handlers);
+      logger.trace(LogMarker.STATISTICS_VERBOSE, "SampleCollector#sample handlers={}", handlers);
-      logger.warn(LogMarker.STATISTICS,
+      logger.warn(LogMarker.STATISTICS_MARKER,
-        if (logger.isTraceEnabled(LogMarker.STATISTICS)) {
-          logger.trace(LogMarker.STATISTICS, "SampleCollector#close");
+        if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+          logger.trace(LogMarker.STATISTICS_VERBOSE, "SampleCollector#close");
-          logger.warn(LogMarker.STATISTICS,
+          logger.warn(LogMarker.STATISTICS_MARKER,
-      if (logger.isTraceEnabled(LogMarker.STATISTICS)) {
-        logger.trace(LogMarker.STATISTICS,
+      if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+        logger.trace(LogMarker.STATISTICS_VERBOSE,
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#sampleResources handlers={}", handlers);
+      logger.trace(LogMarker.STATISTICS_VERBOSE, "SampleCollector#sampleResources handlers={}",
+          handlers);
-    if (this.statResourcesModCount != newModCount) { // TODO: what if one is deleted and one is
-                                                     // added?
+    // TODO: what if one is deleted and one is added
+    if (this.statResourcesModCount != newModCount) {
-        logger.trace(LogMarker.STATISTICS,
+        logger.trace(LogMarker.STATISTICS_VERBOSE,
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#getResourceType statistics={}",
+      logger.trace(LogMarker.STATISTICS_VERBOSE, "SampleCollector#getResourceType statistics={}",
-        logger.trace(LogMarker.STATISTICS,
+        logger.trace(LogMarker.STATISTICS_VERBOSE,
-        logger.trace(LogMarker.STATISTICS,
+        logger.trace(LogMarker.STATISTICS_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.STATISTICS)) {
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#allocateResourceType type={}", type);
+    if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+      logger.trace(LogMarker.STATISTICS_VERBOSE, "SampleCollector#allocateResourceType type={}",
+          type);
-    if (logger.isTraceEnabled(LogMarker.STATISTICS)) {
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#allocateResourceInstance type={}, s={}",
-          type, s);
+    if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
+          "SampleCollector#allocateResourceInstance type={}, s={}", type, s);
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS,
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#cleanupResources resourcesToDelete={}",
-          resourcesToDelete);
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
+          "SampleCollector#cleanupResources resourcesToDelete={}", resourcesToDelete);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#cleanupResources resourcesRemoved={}",
-          resourcesRemoved);
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
+          "SampleCollector#cleanupResources resourcesRemoved={}", resourcesRemoved);
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#notifyAllHandlersOfSample timeStamp={}",
-          nanosTimeStamp);
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
+          "SampleCollector#notifyAllHandlersOfSample timeStamp={}", nanosTimeStamp);
-    // List<ResourceInstance> ri = new ArrayList<ResourceInstance>();
-    // for (ResourceInstance resource : this.resourceInstMap.values()) {
-    // if (!ri.contains(resource)) {
-    // ri.add(resource);
-    // }
-    // }
-      logger.trace(LogMarker.STATISTICS,
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS,
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
-      logger.trace(LogMarker.STATISTICS,
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#notifyOldHandlersOfResource resource={}",
-          resource);
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
+          "SampleCollector#notifyOldHandlersOfResource resource={}", resource);
-      logger.trace(LogMarker.STATISTICS,
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#notifyOldHandlersOfResourceType type={}",
-          type);
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
+          "SampleCollector#notifyOldHandlersOfResourceType type={}", type);
-      logger.trace(LogMarker.STATISTICS,
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
-    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS);
+    final boolean isDebugEnabled_STATISTICS = logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE);
-      logger.trace(LogMarker.STATISTICS, "SampleCollector#notifyOldHandlers ri={}", ri);
+      logger.trace(LogMarker.STATISTICS_VERBOSE, "SampleCollector#notifyOldHandlers ri={}", ri);
-      logger.trace(LogMarker.STATISTICS,
+      logger.trace(LogMarker.STATISTICS_VERBOSE,
-      if (logger.isTraceEnabled(LogMarker.STATISTICS)) {
-        logger.trace(LogMarker.STATISTICS, "MarkableSampleHandler#isMarked returning {} for {}",
-            this.mark, this);
+      if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+        logger.trace(LogMarker.STATISTICS_VERBOSE,
+            "MarkableSampleHandler#isMarked returning {} for {}", this.mark, this);
-      if (logger.isTraceEnabled(LogMarker.STATISTICS)) {
-        logger.trace(LogMarker.STATISTICS, "MarkableSampleHandler#mark marking {}", this);
+      if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+        logger.trace(LogMarker.STATISTICS_VERBOSE, "MarkableSampleHandler#mark marking {}", this);
-          logger.trace(LogMarker.STATISTICS,
-              "SampleHandlers#addSampleHandler adding markableHandler to {}", this);
+          if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+            logger.trace(LogMarker.STATISTICS_VERBOSE,
+                "SampleHandlers#addSampleHandler adding markableHandler to {}", this);
+          }
-          if (logger.isTraceEnabled(LogMarker.STATISTICS)) {
-            logger.trace(LogMarker.STATISTICS,
+          if (logger.isTraceEnabled(LogMarker.STATISTICS_VERBOSE)) {
+            logger.trace(LogMarker.STATISTICS_VERBOSE,
