GEODE-7024: raise a Java exception on non-success response from REST API (#3861)

* GEODE-7024: raise a Java exception on non-success response from REST call
-
+import org.apache.geode.management.api.ClusterManagementException;
+import org.apache.geode.management.api.ClusterManagementRealizationException;
+import org.apache.geode.management.api.ClusterManagementRealizationResult;
-import org.apache.geode.management.internal.exceptions.EntityExistsException;
-import org.apache.geode.management.internal.exceptions.EntityNotFoundException;
+import org.apache.geode.management.api.ClusterManagementResult.StatusCode;
-        new ClusterManagementResult(ClusterManagementResult.StatusCode.ERROR,
+        new ClusterManagementResult(StatusCode.ERROR,
-  @ExceptionHandler(EntityExistsException.class)
-  public ResponseEntity<ClusterManagementResult> entityExists(final Exception e) {
-    return new ResponseEntity<>(
-        new ClusterManagementResult(ClusterManagementResult.StatusCode.ENTITY_EXISTS,
-            e.getMessage()),
-        HttpStatus.CONFLICT);
+  @ExceptionHandler(ClusterManagementException.class)
+  public ResponseEntity<ClusterManagementResult> clusterManagementException(final Exception e) {
+    ClusterManagementResult result = ((ClusterManagementException) e).getResult();
+    return new ResponseEntity<>(result, mapToHttpStatus(result.getStatusCode()));
-  @ExceptionHandler(EntityNotFoundException.class)
-  public ResponseEntity<ClusterManagementResult> entityNotFound(final Exception e) {
-    return new ResponseEntity<>(
-        new ClusterManagementResult(ClusterManagementResult.StatusCode.ENTITY_NOT_FOUND,
-            e.getMessage()),
-        HttpStatus.NOT_FOUND);
+  @ExceptionHandler(ClusterManagementRealizationException.class)
+  public ResponseEntity<ClusterManagementRealizationResult> clusterManagementRealizationException(
+      final Exception e) {
+    ClusterManagementRealizationResult result =
+        (ClusterManagementRealizationResult) ((ClusterManagementException) e).getResult();
+    return new ResponseEntity<>(result, mapToHttpStatus(result.getStatusCode()));
+  }
+
+  private HttpStatus mapToHttpStatus(StatusCode statusCode) {
+    switch (statusCode) {
+      case ENTITY_EXISTS:
+        return HttpStatus.CONFLICT;
+      case ENTITY_NOT_FOUND:
+        return HttpStatus.NOT_FOUND;
+      case ILLEGAL_ARGUMENT:
+        return HttpStatus.BAD_REQUEST;
+      default:
+        return HttpStatus.INTERNAL_SERVER_ERROR;
+    }
-        new ClusterManagementResult(ClusterManagementResult.StatusCode.UNAUTHENTICATED,
+        new ClusterManagementResult(StatusCode.UNAUTHENTICATED,
-        ClusterManagementResult.StatusCode.UNAUTHORIZED, e.getMessage()),
+        StatusCode.UNAUTHORIZED, e.getMessage()),
-        new ClusterManagementResult(ClusterManagementResult.StatusCode.ILLEGAL_ARGUMENT,
+        new ClusterManagementResult(StatusCode.ILLEGAL_ARGUMENT,
-
-        new ClusterManagementResult(ClusterManagementResult.StatusCode.UNAUTHORIZED,
+        new ClusterManagementResult(StatusCode.UNAUTHORIZED,
-
