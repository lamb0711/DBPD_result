GEODE-2632: refactor code to use InternalCache and InternalResourceManager

* add operations to InternalCache interface
* rename getter for InternalResourceManager getInternalResourceManager
* add @Override annotations
* fixup TODO comments
* delete superfluous comments and dead-code
* filed GEODE-2789 and will follow-up with fix for that ticket

+import org.apache.geode.cache.control.ResourceManager;
-// @todo somebody Come up with more reasonable values for {@link #DEFAULT_LOCK_TIMEOUT}, etc.
+// TODO: somebody Come up with more reasonable values for {@link #DEFAULT_LOCK_TIMEOUT}, etc.
- *
-    // sb.append("; rootRegions = (" + this.rootRegions + ")");
-    // sb.append("; cacheServers = (" + this.cacheServers + ")");
-    // sb.append("; regionAttributes = (" + this.listRegionAttributes());
-    // sb.append("; gatewayHub = " + gatewayHub);
-  // ////////////////////// Constructors /////////////////////////
-
+          @Override
+              @Override
-      getResourceManager().addResourceListener(ResourceType.HEAP_MEMORY, getHeapEvictor());
+      getInternalResourceManager().addResourceListener(ResourceType.HEAP_MEMORY, getHeapEvictor());
-        getResourceManager().addResourceListener(ResourceType.OFFHEAP_MEMORY, getOffHeapEvictor());
+        getInternalResourceManager().addResourceListener(ResourceType.OFFHEAP_MEMORY,
+            getOffHeapEvictor());
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  static public void loadEmergencyClasses() {
+  public static void loadEmergencyClasses() {
-  static public void emergencyClose() {
+  public static void emergencyClose() {
+  @Override
+              @Override
+      @Override
+  @Override
+  @Override
-  protected DistributedLockService getPartitionedRegionLockService() {
+  @Override
+  public DistributedLockService getPartitionedRegionLockService() {
+  @Override
+  @Override
+  @Override
+  @Override
-  // see Cache.stopReconnecting()
+  @Override
-  // see Cache.getReconnectedCache()
+  @Override
+  @Override
+  @Override
+  @Override
-  public Collection<DiskStoreImpl> listDiskStoresIncludingDefault() {
-    return Collections.unmodifiableCollection(listDiskStores());
-  }
-
+  @Override
-  /*
-   * private static class DiskStoreFuture extends FutureTask { private DiskStoreTask task;
-   * 
-   * public DiskStoreFuture(DiskStoreTask r) { super(r, null); this.task = r; }
-   * 
-   * @Override public boolean cancel(boolean mayInterruptIfRunning) { boolean result =
-   * super.cancel(mayInterruptIfRunning); if (result) { task.taskCancelled(); } return result; }
-   * 
-   * }
-   */
-
+  @Override
+  @Override
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.Cache#getMembers()
-   */
+  @Override
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.Cache#getAdminMembers()
-   */
+  @Override
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.Cache#getMembers(org.apache.geode.cache.Region)
-   */
+  @Override
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.client.ClientCache#getCurrentServers()
-   */
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  void setRegionByPath(String path, LocalRegion r) {
+  @Override
+  public void setRegionByPath(String path, LocalRegion r) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  LocalRegion getReinitializingRegion(String fullPath) {
+  @Override
+  public LocalRegion getReinitializingRegion(String fullPath) {
-  void regionReinitializing(String fullPath) {
+  @Override
+  public void regionReinitializing(String fullPath) {
-  void regionReinitialized(Region region) {
+  @Override
+  public void regionReinitialized(Region region) {
-  void unregisterReinitializingRegion(String fullPath) {
-    /* Object previous = */this.reinitializingRegions.remove(fullPath);
-    // if (previous == null) {
-    // throw new IllegalStateException("Could not find a reinitializing region
-    // named " +
-    // fullPath);
-    // }
+  @Override
+  public void unregisterReinitializingRegion(String fullPath) {
+    this.reinitializingRegions.remove(fullPath);
-  // /////////////////////////////////////////////////////////////
-
-  final boolean isCopyOnRead() {
+  @Override
+  public boolean isCopyOnRead() {
+  @Override
-  final public boolean getCopyOnRead() {
+  @Override
+  public boolean getCopyOnRead() {
-  boolean removeRoot(LocalRegion rootRgn) {
+  @Override
+  public boolean removeRoot(LocalRegion rootRgn) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  TXManagerImpl getTXMgr() {
+  @Override
+  public TXManagerImpl getTXMgr() {
-  Executor getEventThreadPool() {
+  @Override
+  public Executor getEventThreadPool() {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  protected boolean requiresNotificationFromPR(PartitionedRegion r) {
+  @Override
+  public boolean requiresNotificationFromPR(PartitionedRegion r) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    // if (isClient()) {
-    // throw new UnsupportedOperationException("operation is not supported on a client cache");
-    // }
+  @Override
-    // if (isClient()) {
-    // throw new UnsupportedOperationException("operation is not supported on a client cache");
-    // }
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  public InternalResourceManager getResourceManager() {
-    return getResourceManager(true);
+  @Override
+  public ResourceManager getResourceManager() {
+    return getInternalResourceManager(true);
-  public InternalResourceManager getResourceManager(boolean checkCancellationInProgress) {
+  @Override
+  public InternalResourceManager getInternalResourceManager() {
+    return getInternalResourceManager(true);
+  }
+
+  @Override
+  public InternalResourceManager getInternalResourceManager(boolean checkCancellationInProgress) {
+  @Override
+  @Override
-  // //////////////////// Inner Classes //////////////////////
-
+  @Override
+  @Override
-   * update stats for initiation of a registerInterest operation
-   */
-  /**
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
