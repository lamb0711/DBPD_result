Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Defines the interface for a container that gathers results from function
- * execution.<br>
- * GemFire provides a default implementation for ResultCollector. Applications
- * can choose to implement their own custom ResultCollector. A custom
- * ResultCollector facilitates result sorting or aggregation. Aggregation
- * functions like sum, minimum, maximum and average can also be applied to the
- * result using a custom ResultCollector. Results arrive as they are sent using
- * the {@link ResultSender#sendResult(Object)} and can be used as they arrive.
- * To indicate that all results have been received {@link #endResults()} is
- * called.
+ * Defines the interface for a container that gathers results from function execution.<br>
+ * GemFire provides a default implementation for ResultCollector. Applications can choose to
+ * implement their own custom ResultCollector. A custom ResultCollector facilitates result sorting
+ * or aggregation. Aggregation functions like sum, minimum, maximum and average can also be applied
+ * to the result using a custom ResultCollector. Results arrive as they are sent using the
+ * {@link ResultSender#sendResult(Object)} and can be used as they arrive. To indicate that all
+ * results have been received {@link #endResults()} is called.
- * GemFire provides default implementation of ResultCollector which collects
- * results in Arraylist. There is no need to provide a synchronization mechanism
- * in the user implementations of ResultCollector
+ * GemFire provides default implementation of ResultCollector which collects results in Arraylist.
+ * There is no need to provide a synchronization mechanism in the user implementations of
+ * ResultCollector
-public interface ResultCollector<T,S> {
+public interface ResultCollector<T, S> {
-   * Method used to pull results from the ResultCollector. It returns the result
-   * of function execution, potentially blocking until {@link #endResults() all
-   * the results are available} has been called.
+   * Method used to pull results from the ResultCollector. It returns the result of function
+   * execution, potentially blocking until {@link #endResults() all the results are available} has
+   * been called.
-   * @throws FunctionException
-   *           if result retrieval fails
+   * @throws FunctionException if result retrieval fails
-   * Method used to pull results from the ResultCollector. It returns the result
-   * of function execution, blocking for the timeout period until
-   * {@link #endResults() all the results are available}. If all the results are
-   * not received in provided time a FunctionException is thrown.
+   * Method used to pull results from the ResultCollector. It returns the result of function
+   * execution, blocking for the timeout period until {@link #endResults() all the results are
+   * available}. If all the results are not received in provided time a FunctionException is thrown.
-   * @param timeout
-   *          the maximum time to wait
-   * @param unit
-   *          the time unit of the timeout argument
+   * @param timeout the maximum time to wait
+   * @param unit the time unit of the timeout argument
-   * @throws FunctionException
-   *           if result retrieval fails within timeout provided
-   * @throws InterruptedException
-   *           if the current thread was interrupted while waiting
+   * @throws FunctionException if result retrieval fails within timeout provided
+   * @throws InterruptedException if the current thread was interrupted while waiting
-  public S getResult(long timeout, TimeUnit unit)
-      throws FunctionException, InterruptedException;
+  public S getResult(long timeout, TimeUnit unit) throws FunctionException, InterruptedException;
-   * Method used to feed result to the ResultCollector. It adds a single
-   * function execution result to the ResultCollector It is invoked every time a
-   * result is sent using ResultSender.
+   * Method used to feed result to the ResultCollector. It adds a single function execution result
+   * to the ResultCollector It is invoked every time a result is sent using ResultSender.
-   * @param memberID
-   *          DistributedMember ID to which result belongs
+   * @param memberID DistributedMember ID to which result belongs
-   * GemFire will invoke this method when function execution has completed and
-   * all results for the execution have been obtained and
-   * {@link #addResult(DistributedMember, Object) added to the ResultCollector}
-   * Unless the {@link ResultCollector} has received
-   * {@link ResultSender#lastResult(Object) last result} from all the
-   * executing nodes, it keeps waiting for more results to come.
+   * GemFire will invoke this method when function execution has completed and all results for the
+   * execution have been obtained and {@link #addResult(DistributedMember, Object) added to the
+   * ResultCollector} Unless the {@link ResultCollector} has received
+   * {@link ResultSender#lastResult(Object) last result} from all the executing nodes, it keeps
+   * waiting for more results to come.
-  
+
-   * GemFire will invoke this method before re-executing function (in case of
-   * Function Execution HA). This is to clear the previous execution results from
-   * the result collector
+   * GemFire will invoke this method before re-executing function (in case of Function Execution
+   * HA). This is to clear the previous execution results from the result collector
