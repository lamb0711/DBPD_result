Merge branch 'release/1.4.0'

-import java.util.concurrent.atomic.AtomicReference;
-import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.cache.wan.GatewaySender.OrderPolicy;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.LogWrapper;
+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+import org.apache.geode.management.internal.cli.result.CommandResult;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
-  public CreateGatewaySenderCommand() {}
-
-  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_WAN)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_WAN,
+      interceptor = "org.apache.geode.management.internal.cli.commands.CreateGatewaySenderCommand$Interceptor")
-      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__PARALLEL,
-          help = CliStrings.CREATE_GATEWAYSENDER__PARALLEL__HELP) Boolean parallel,
+      @CliOption(key = CliStrings.CREATE_GATEWAYSENDER__PARALLEL, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.CREATE_GATEWAYSENDER__PARALLEL__HELP) boolean parallel,
-          help = CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY__HELP) String orderPolicy,
+          help = CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY__HELP) OrderPolicy orderPolicy,
-    Result result;
+    GatewaySenderFunctionArgs gatewaySenderFunctionArgs =
+        new GatewaySenderFunctionArgs(id, remoteDistributedSystemId, parallel, manualStart,
+            socketBufferSize, socketReadTimeout, enableBatchConflation, batchSize,
+            batchTimeInterval, enablePersistence, diskStoreName, diskSynchronous, maxQueueMemory,
+            alertThreshold, dispatcherThreads, orderPolicy == null ? null : orderPolicy.name(),
+            gatewayEventFilters, gatewayTransportFilter);
-    AtomicReference<XmlEntity> xmlEntity = new AtomicReference<XmlEntity>();
-    try {
-      GatewaySenderFunctionArgs gatewaySenderFunctionArgs = new GatewaySenderFunctionArgs(id,
-          remoteDistributedSystemId, parallel, manualStart, socketBufferSize, socketReadTimeout,
-          enableBatchConflation, batchSize, batchTimeInterval, enablePersistence, diskStoreName,
-          diskSynchronous, maxQueueMemory, alertThreshold, dispatcherThreads, orderPolicy,
-          gatewayEventFilters, gatewayTransportFilter);
+    Set<DistributedMember> membersToCreateGatewaySenderOn = getMembers(onGroups, onMember);
-      Set<DistributedMember> membersToCreateGatewaySenderOn =
-          CliUtil.findMembers(onGroups, onMember);
+    List<CliFunctionResult> gatewaySenderCreateResults =
+        executeAndGetFunctionResult(GatewaySenderCreateFunction.INSTANCE, gatewaySenderFunctionArgs,
+            membersToCreateGatewaySenderOn);
-      if (membersToCreateGatewaySenderOn.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
+    CommandResult result = ResultBuilder.buildResult(gatewaySenderCreateResults);
+    XmlEntity xmlEntity = findXmlEntity(gatewaySenderCreateResults);
-      ResultCollector<?, ?> resultCollector =
-          CliUtil.executeFunction(GatewaySenderCreateFunction.INSTANCE, gatewaySenderFunctionArgs,
-              membersToCreateGatewaySenderOn);
-      @SuppressWarnings("unchecked")
-      List<CliFunctionResult> gatewaySenderCreateResults =
-          (List<CliFunctionResult>) resultCollector.getResult();
-
-      TabularResultData tabularResultData = ResultBuilder.createTabularResultData();
-      final String errorPrefix = "ERROR: ";
-      for (CliFunctionResult gatewaySenderCreateResult : gatewaySenderCreateResults) {
-        boolean success = gatewaySenderCreateResult.isSuccessful();
-        tabularResultData.accumulate("Member", gatewaySenderCreateResult.getMemberIdOrName());
-        tabularResultData.accumulate("Status",
-            (success ? "" : errorPrefix) + gatewaySenderCreateResult.getMessage());
-
-        if (success && xmlEntity.get() == null) {
-          xmlEntity.set(gatewaySenderCreateResult.getXmlEntity());
-        }
-      }
-      result = ResultBuilder.buildResult(tabularResultData);
-    } catch (IllegalArgumentException e) {
-      LogWrapper.getInstance().info(e.getMessage());
-      result = ResultBuilder.createUserErrorResult(e.getMessage());
+    // no xml needs to be updated, simply return
+    if (xmlEntity == null) {
+      return result;
-    if (xmlEntity.get() != null) {
-      persistClusterConfiguration(result,
-          () -> getSharedConfiguration().addXmlEntity(xmlEntity.get(), onGroups));
+    // has xml but unable to persist to cluster config, need to print warning message and return
+    if (onMember != null || getSharedConfiguration() == null) {
+      result.setCommandPersisted(false);
+      return result;
+
+    // update cluster config
+    getSharedConfiguration().addXmlEntity(xmlEntity, onGroups);
+
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      Integer dispatcherThreads =
+          (Integer) parseResult.getParamValue(CliStrings.CREATE_GATEWAYSENDER__DISPATCHERTHREADS);
+      OrderPolicy orderPolicy =
+          (OrderPolicy) parseResult.getParamValue(CliStrings.CREATE_GATEWAYSENDER__ORDERPOLICY);
+      Boolean parallel =
+          (Boolean) parseResult.getParamValue(CliStrings.CREATE_GATEWAYSENDER__PARALLEL);
+      if (dispatcherThreads != null && dispatcherThreads > 1 && orderPolicy == null) {
+        return ResultBuilder.createUserErrorResult(
+            "Must specify --order-policy when --dispatcher-threads is larger than 1.");
+      }
+
+      if (parallel && orderPolicy == OrderPolicy.THREAD) {
+        return ResultBuilder.createUserErrorResult(
+            "Parallel Gateway Sender can not be created with THREAD OrderPolicy");
+      }
+
+      return ResultBuilder.createInfoResult("");
+    }
+  }
