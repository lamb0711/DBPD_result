Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
-public class TrackedReference<T> {
+public final class TrackedReference<T> {
+  
+  /** list of users using this reference. Mainly for debugging */
+  final ConcurrentHashMap<String, AtomicInteger> users;
+    users = new ConcurrentHashMap<String, AtomicInteger>();
-  public T get() {
+  public final T get() {
+    return increment(null);
+  }
+  
+  /**
+   * Increments the use counter and returns the current count.
+   * @return the current uses
+   */
+  public int increment(String user) {
+    if (user != null) {
+      AtomicInteger counter = users.get(user);
+      if (counter == null) {
+        counter = new AtomicInteger();
+        users.putIfAbsent(user, counter);
+        counter = users.get(user);
+      }
+      counter.incrementAndGet();
+    }
+    return decrement(null);
+  }
+  
+  /**
+   * Decrements the use counter and returns the current count.
+   * @return the current uses
+   */
+  public int decrement(String user) {
-
+    if (user != null) {
+      AtomicInteger counter = users.get(user);
+      if (counter != null) {
+        counter.decrementAndGet();
+      }
+    }
+    
+    if (users != null) {
+      StringBuffer sb = new StringBuffer();
+      sb.append(ref.toString()).append(": ").append(uses());
+      for (Entry<String, AtomicInteger> user : users.entrySet()) {
+        sb.append(" ").append(user.getKey()).append(":").append(user.getValue().intValue());
+      }
+      return sb.toString();
+    }
