GEODE-6176: Make FunctionService testable with internal delegates

Introduce new internal FunctionExecutionService API interfaces:
* FunctionExecutionService
* InternalFunctionExecutionService

Implement interfaces with:
* InternalFunctionExecutionServiceImpl

Collapse FunctionServiceManager into InternalFunctionExecutionServiceImpl

Change the two static API classes to delegate to an instance of
InternalFunctionExecutionServiceImpl:
* FunctionService (User API) -- only has private internal changes
* InternalFunctionService -- now extends FunctionService

Geode classes that use the static API classes directly can now be
changed to depend on one of the two interfaces using constructor
injection to facilitate unit testing without PowerMock.

-import org.apache.geode.cache.execute.internal.FunctionServiceManager;
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.cache.execute.FunctionService;
- *
- *
- *
-public class InternalFunctionService {
+public class InternalFunctionService extends FunctionService {
+
+  private static final InternalFunctionService INSTANCE =
+      new InternalFunctionService(new InternalFunctionExecutionServiceImpl());
+
+  private final InternalFunctionExecutionService internalFunctionExecutionService;
+
+  private InternalFunctionService(
+      InternalFunctionExecutionService internalFunctionExecutionService) {
+    super(internalFunctionExecutionService);
+    this.internalFunctionExecutionService = internalFunctionExecutionService;
+  }
-   *
-   *
-    if (regions == null) {
-      throw new IllegalArgumentException(
-          String.format("The input %s for the execute function request is null",
-              "regions set"));
-    }
-    if (regions.contains(null)) {
-      throw new IllegalArgumentException(
-          "One or more region references added to the regions set is(are) null");
-    }
-    if (regions.isEmpty()) {
-      throw new IllegalArgumentException(
-          "Regions set is empty for onRegions function execution");
-    }
-    for (Region region : regions) {
-      if (isClientRegion(region)) {
-        throw new UnsupportedOperationException(
-            "FunctionService#onRegions() is not supported for cache clients in client server mode");
-      }
-    }
-    return new MultiRegionFunctionExecutor(regions);
+    return getInternalFunctionExecutionService().onRegions(regions);
-   * @return true if the method is called on a region has a {@link Pool}.
-   * @since GemFire 6.0
-   */
-  private static boolean isClientRegion(Region region) {
-    LocalRegion localRegion = (LocalRegion) region;
-    return localRegion.hasServerProxy();
-  }
-
-  private static final FunctionServiceManager funcServiceManager = new FunctionServiceManager();
-
-  /**
-    return funcServiceManager.onServers(regionService, groups);
+    return getInternalFunctionExecutionService().onServers(regionService, groups);
-    return funcServiceManager.onServer(regionService, groups);
+    return getInternalFunctionExecutionService().onServer(regionService, groups);
-    return funcServiceManager.onServers(pool, groups);
+    return getInternalFunctionExecutionService().onServers(pool, groups);
-    return funcServiceManager.onServer(pool, groups);
+    return getInternalFunctionExecutionService().onServer(pool, groups);
+  }
+
+  /**
+   * Unregisters all functions.
+   */
+  public static void unregisterAllFunctions() {
+    getInternalFunctionExecutionService().unregisterAllFunctions();
+  }
+
+  private static InternalFunctionExecutionService getInternalFunctionExecutionService() {
+    return INSTANCE.internalFunctionExecutionService;
