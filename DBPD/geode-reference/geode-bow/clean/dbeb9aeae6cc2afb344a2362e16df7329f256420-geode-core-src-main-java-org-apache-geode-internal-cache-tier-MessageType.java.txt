Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//   public static final int DATANOTFOUNDERROR = 4;
+  // public static final int DATANOTFOUNDERROR = 4;
-  /** Put data into the cache
+  /**
+   * Put data into the cache
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** The put request data was bad (null key or value, for example)
+  /**
+   * The put request data was bad (null key or value, for example)
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** Destroy an entry from the cache
+  /**
+   * Destroy an entry from the cache
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** The destroy request data was bad (null key, for example)
+  /**
+   * The destroy request data was bad (null key, for example)
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** Destroy a region from the cache
+  /**
+   * Destroy a region from the cache
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** The destroy region request data was bad (null region name, for example)
+  /**
+   * The destroy region request data was bad (null region name, for example)
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** A client wished to be notified of updates
+  /**
+   * A client wished to be notified of updates
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** Information about a client receiving updates has changed
+  /**
+   * Information about a client receiving updates has changed
-  /** The receiver (which is an edge client in this case) should
-   * locally invalidate a piece of data
+  /**
+   * The receiver (which is an edge client in this case) should locally invalidate a piece of data
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** The receiver (which is an edge client in this case) should
-   * locally destroy a piece of data
+  /**
+   * The receiver (which is an edge client in this case) should locally destroy a piece of data
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** The receiver (which is an edge client in this case) should
-   * locally destroy a region
+  /**
+   * The receiver (which is an edge client in this case) should locally destroy a region
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** A message to close the client connection
+  /**
+   * A message to close the client connection
-   * @since GemFire 3.5 */
+   * @since GemFire 3.5
+   */
-  /** A message to process a batch of messages
+  /**
+   * A message to process a batch of messages
-   * @since GemFire 4.1.1 */
+   * @since GemFire 4.1.1
+   */
-  /** A message to register interest in a specific key
+  /**
+   * A message to register interest in a specific key
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** The register interest request data was bad (null region name, for example)
+  /**
+   * The register interest request data was bad (null region name, for example)
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** A message to unregister interest in a specific key
+  /**
+   * A message to unregister interest in a specific key
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** The unregister interest request data was bad (null region name, for example)
+  /**
+   * The unregister interest request data was bad (null region name, for example)
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** A message to register interest in a specific list of keys
+  /**
+   * A message to register interest in a specific list of keys
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** A message to unregister interest in a specific list of keys
+  /**
+   * A message to unregister interest in a specific list of keys
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** An unknown message type. This is being used for responses.
+  /**
+   * An unknown message type. This is being used for responses.
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** The receiver (which is an edge client in this case) should
-   * locally create a piece of data
+  /**
+   * The receiver (which is an edge client in this case) should locally create a piece of data
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
-  /** The receiver (which is an edge client in this case) should
-   * locally update a piece of data
+  /**
+   * The receiver (which is an edge client in this case) should locally update a piece of data
-   * @since GemFire 4.1.2 */
+   * @since GemFire 4.1.2
+   */
+   * 
-  /** Response message type from primary server
+  /**
+   * Response message type from primary server
+   * 
-  /** Response message type from secondary server
+  /**
+   * Response message type from secondary server
+   * 
-   * <p>author gregp
+   * <p>
+   * author gregp
+   * 
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  /** A message to register the Instantiators. 
+
+  /**
+   * A message to register the Instantiators.
-   */ 
-  public static final int REGISTER_INSTANTIATORS = 51; 
+   */
+  public static final int REGISTER_INSTANTIATORS = 51;
-  public static final int PERIODIC_ACK = 52;  
+  public static final int PERIODIC_ACK = 52;
-  
+
-   
+
-   
+
-  
+
-  
+
-  
-  public static final int REGISTER_DATASERIALIZERS = 67; 
+
+  public static final int REGISTER_DATASERIALIZERS = 67;
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  public static final int GET_ALL_FOR_RI = 95;  // this message type is not used after 6.x
-  
+
+  public static final int GET_ALL_FOR_RI = 95; // this message type is not used after 6.x
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    //logger.warning("Message type is valid: " + valid);
+    // logger.warning("Message type is valid: " + valid);
-    case INVALID:
-      return "INVALID";
-    case REQUEST:
-      return "REQUEST";
-    case RESPONSE:
-      return "RESPONSE";
-    case EXCEPTION:
-      return "EXCEPTION";
-    case REQUESTDATAERROR:
-      return "REQUESTDATAERROR";
-    case PING:
-      return "PING";
-    case REPLY:
-      return "REPLY";
-    case PUT:
-      return "PUT";
-    case PUTALL:
-      return "PUTALL";
-    case PUT_DATA_ERROR:
-      return "PUT_DATA_ERROR";
-    case DESTROY:
-      return "DESTROY";
-    case DESTROY_DATA_ERROR:
-      return "DESTROY_DATA_ERROR";
-    case DESTROY_REGION:
-      return "DESTROY_REGION";
-    case DESTROY_REGION_DATA_ERROR:
-      return "DESTROY_REGION_DATA_ERROR";
-    case CLIENT_NOTIFICATION:
-      return "CLIENT_NOTIFICATION";
-    case UPDATE_CLIENT_NOTIFICATION:
-      return "UPDATE_CLIENT_NOTIFICATION";
-    case LOCAL_INVALIDATE:
-      return "LOCAL_INVALIDATE";
-    case LOCAL_DESTROY:
-      return "LOCAL_DESTROY";
-    case LOCAL_DESTROY_REGION:
-      return "LOCAL_DESTROY_REGION";
-    case CLOSE_CONNECTION:
-      return "CLOSE_CONNECTION";
-    case PROCESS_BATCH:
-      return "PROCESS_BATCH";
-    case REGISTER_INTEREST:
-      return "REGISTER_INTEREST";
-    case REGISTER_INTEREST_DATA_ERROR:
-      return "REGISTER_INTEREST_DATA_ERROR";
-    case UNREGISTER_INTEREST:
-      return "UNREGISTER_INTEREST";
-    case REGISTER_INTEREST_LIST:
-      return "REGISTER_INTEREST_LIST";
-    case UNREGISTER_INTEREST_LIST:
-      return "UNREGISTER_INTEREST_LIST";
-    case UNKNOWN_MESSAGE_TYPE_ERROR:
-      return "UNKNOWN_MESSAGE_TYPE_ERROR";
-    case LOCAL_CREATE:
-      return "LOCAL_CREATE";
-    case CREATE_REGION:
-      return "CREATE_REGION";
-    case CREATE_REGION_DATA_ERROR:
-      return "CREATE_REGION_DATA_ERROR";
-    case MAKE_PRIMARY:
-       return "MAKE_PRIMARY" ;
-    case RESPONSE_FROM_PRIMARY :
-      return "RESPONSE_FROM_PRIMARY" ;
-    case RESPONSE_FROM_SECONDARY :
-      return "RESPONSE_FROM_SECONDARY" ;
-    case QUERY:
-      return "QUERY";
-    case QUERY_WITH_PARAMETERS:
-      return "QUERY_WITH_PARAMETERS";
-    case EXECUTECQ_MSG_TYPE:
-    	return "EXECUTECQ";
-    case EXECUTECQ_WITH_IR_MSG_TYPE:
-    	return "EXECUTECQ_WITH_IR";
-    case STOPCQ_MSG_TYPE:
-    	return "STOPCQ";
-    case CLOSECQ_MSG_TYPE:
-    	return "CLOSECQ";
-    case CLOSECLIENTCQS_MSG_TYPE:
-    	return "CLOSECLIENTCQS";
-    case CQDATAERROR_MSG_TYPE:
-    	return "CQDATAERROR";
-    case GETCQSTATS_MSG_TYPE:
-    	return "GETCQSTATS";
-    case MONITORCQ_MSG_TYPE:
-    	return "MONITORCQ";
-    case CQ_EXCEPTION_TYPE:
-    	return "CQ_EXCEPTION_TYPE";
-    case QUERY_DATA_ERROR:
-      return "QUERY_DATA_ERROR";
-    case CLEAR_REGION:
-      return "CLEAR_REGION";
-    case CLEAR_REGION_DATA_ERROR:
-      return "CLEAR_REGION_DATA_ERROR";
-    case CONTAINS_KEY:
-      return "CONTAINS_KEY";
-    case CONTAINS_KEY_DATA_ERROR:
-      return "CONTAINS_KEY_DATA_ERROR";
-    case KEY_SET:
-      return "KEY_SET";
-    case KEY_SET_DATA_ERROR:
-      return "KEY_SET_DATA_ERROR";
-    case REGISTER_INSTANTIATORS:
-      return "REGISTER_INSTANTIATORS";
-    case PERIODIC_ACK:
-      return "PERIODIC_ACK";
-    case CLIENT_READY:
-      return "CLIENT_READY";
-    case CLIENT_MARKER:
-      return "CLIENT_MARKER";
-    case INVALIDATE_REGION:
-      return "INVALIDATE_REGION";
-    case EXECUTE_REGION_FUNCTION:
-      return "EXECUTE_REGION_FUNCTION";
-    case EXECUTE_REGION_FUNCTION_RESULT:
-      return "EXECUTE_REGION_FUNCTION_RESULT";
-    case EXECUTE_REGION_FUNCTION_ERROR:
-      return "EXECUTE_REGION_FUNCTION_ERROR";
-    case EXECUTE_FUNCTION:
-      return "EXECUTE_FUNCTION";
-    case EXECUTE_FUNCTION_RESULT:
-      return "EXECUTE_FUNCTION_RESULT";
-    case EXECUTE_FUNCTION_ERROR:
-      return "EXECUTE_FUNCTION_ERROR";     
-    case CLIENT_REGISTER_INTEREST:
-      return "CLIENT_REGISTER_INTEREST";
-    case CLIENT_UNREGISTER_INTEREST:
-      return "CLIENT_UNREGISTER_INTEREST";
-    case REGISTER_DATASERIALIZERS:
-      return "REGISTER_DATASERIALIZERS";
-    case GET_CLIENT_PR_METADATA:
-      return "GET_CLIENT_PR_METADATA";
-    case RESPONSE_CLIENT_PR_METADATA:
-      return "RESPONSE_CLIENT_PR_METADATA";
-    case GET_CLIENT_PARTITION_ATTRIBUTES:
-      return "GET_CLIENT_PARTITION_ATTRIBUTES";
-    case RESPONSE_CLIENT_PARTITION_ATTRIBUTES:
-      return "RESPONSE_CLIENT_PARTITION_ATTRIBUTES";
-    case GET_CLIENT_PR_METADATA_ERROR:
-      return "GET_CLIENT_PR_METADATA_ERROR";
-    case GET_CLIENT_PARTITION_ATTRIBUTES_ERROR:
-      return "GET_CLIENT_PARTITION_ATTRIBUTES_ERROR";
-    case USER_CREDENTIAL_MESSAGE:
-      return "USER_CREDENTIAL_MESSAGE";
-    case REMOVE_USER_AUTH:
-      return "REMOVE_USER_AUTH";
-    case EXECUTE_REGION_FUNCTION_SINGLE_HOP:
-      return "EXECUTE_REGION_FUNCTION_SINGLE_HOP";
-    case GET_PDX_ID_FOR_TYPE:
-      return "GET_PDX_ID_FOR_TYPE";
-    case GET_PDX_TYPE_BY_ID:
-      return "GET_PDX_TYPE_BY_ID";
-    case ADD_PDX_TYPE:
-      return "ADD_PDX_TYPE";
-    case ADD_PDX_ENUM:
-      return "ADD_PDX_ENUM";
-    case GET_PDX_ID_FOR_ENUM:
-      return "GET_PDX_ID_FOR_ENUM";
-    case GET_PDX_ENUM_BY_ID:
-      return "GET_PDX_ENUM_BY_ID";
-    case SIZE:
-      return "SIZE";
-    case SIZE_ERROR:
-      return "SIZE_ERROR";
-    case INVALIDATE:
-      return "INVALIDATE";
-    case INVALIDATE_ERROR:
-      return "INVALIDATE_ERROR";
-    case COMMIT:
-      return "COMMIT";
-    case COMMIT_ERROR:
-      return "COMMIT_ERROR";
-    case ROLLBACK:
-      return "ROLLBACK";
-    case TX_FAILOVER:
-      return "TX_FAILOVER";
-    case GET_ENTRY:
-      return "GET_ENTRY";
-    case TX_SYNCHRONIZATION:
-      return "TX_SYNCHRONIZATION";
-    case GET_FUNCTION_ATTRIBUTES:
-      return "GET_FUNCTION_ATTRIBUTES";
-    case GET_ALL_FOR_RI:
-      return "GET_ALL_FOR_RI";
-    case SERVER_TO_CLIENT_PING:
-      return "SERVER_TO_CLIENT_PING";
-    case GATEWAY_RECEIVER_COMMAND:
-      return "GATEWAY_RECEIVER_COMMAND";
-    case TOMBSTONE_OPERATION:
-      return "TOMBSTONE_OPERATION";
-    case GET_PDX_TYPES:
-      return "GET_PDX_TYPES";
-    case GET_PDX_ENUMS:
-      return "GET_PDX_ENUMS";
-    case GET_ALL_70:
-      return "GET_ALL_70";
-    case GETDURABLECQS_MSG_TYPE:
-      return "GETDURABLECQS_MSG_TYPE";
-    case GET_DURABLE_CQS_DATA_ERROR:
-      return "GET_DURABLE_CQS_DATA_ERROR";
-    case GET_ALL_WITH_CALLBACK:
-      return "GET_ALL_WITH_CALLBACK";
-    case PUT_ALL_WITH_CALLBACK:
-      return "PUT_ALL_WITH_CALLBACK";
-    case REMOVE_ALL:
-      return "REMOVE_ALL";
-    default:
-      return Integer.toString(type);
+      case INVALID:
+        return "INVALID";
+      case REQUEST:
+        return "REQUEST";
+      case RESPONSE:
+        return "RESPONSE";
+      case EXCEPTION:
+        return "EXCEPTION";
+      case REQUESTDATAERROR:
+        return "REQUESTDATAERROR";
+      case PING:
+        return "PING";
+      case REPLY:
+        return "REPLY";
+      case PUT:
+        return "PUT";
+      case PUTALL:
+        return "PUTALL";
+      case PUT_DATA_ERROR:
+        return "PUT_DATA_ERROR";
+      case DESTROY:
+        return "DESTROY";
+      case DESTROY_DATA_ERROR:
+        return "DESTROY_DATA_ERROR";
+      case DESTROY_REGION:
+        return "DESTROY_REGION";
+      case DESTROY_REGION_DATA_ERROR:
+        return "DESTROY_REGION_DATA_ERROR";
+      case CLIENT_NOTIFICATION:
+        return "CLIENT_NOTIFICATION";
+      case UPDATE_CLIENT_NOTIFICATION:
+        return "UPDATE_CLIENT_NOTIFICATION";
+      case LOCAL_INVALIDATE:
+        return "LOCAL_INVALIDATE";
+      case LOCAL_DESTROY:
+        return "LOCAL_DESTROY";
+      case LOCAL_DESTROY_REGION:
+        return "LOCAL_DESTROY_REGION";
+      case CLOSE_CONNECTION:
+        return "CLOSE_CONNECTION";
+      case PROCESS_BATCH:
+        return "PROCESS_BATCH";
+      case REGISTER_INTEREST:
+        return "REGISTER_INTEREST";
+      case REGISTER_INTEREST_DATA_ERROR:
+        return "REGISTER_INTEREST_DATA_ERROR";
+      case UNREGISTER_INTEREST:
+        return "UNREGISTER_INTEREST";
+      case REGISTER_INTEREST_LIST:
+        return "REGISTER_INTEREST_LIST";
+      case UNREGISTER_INTEREST_LIST:
+        return "UNREGISTER_INTEREST_LIST";
+      case UNKNOWN_MESSAGE_TYPE_ERROR:
+        return "UNKNOWN_MESSAGE_TYPE_ERROR";
+      case LOCAL_CREATE:
+        return "LOCAL_CREATE";
+      case CREATE_REGION:
+        return "CREATE_REGION";
+      case CREATE_REGION_DATA_ERROR:
+        return "CREATE_REGION_DATA_ERROR";
+      case MAKE_PRIMARY:
+        return "MAKE_PRIMARY";
+      case RESPONSE_FROM_PRIMARY:
+        return "RESPONSE_FROM_PRIMARY";
+      case RESPONSE_FROM_SECONDARY:
+        return "RESPONSE_FROM_SECONDARY";
+      case QUERY:
+        return "QUERY";
+      case QUERY_WITH_PARAMETERS:
+        return "QUERY_WITH_PARAMETERS";
+      case EXECUTECQ_MSG_TYPE:
+        return "EXECUTECQ";
+      case EXECUTECQ_WITH_IR_MSG_TYPE:
+        return "EXECUTECQ_WITH_IR";
+      case STOPCQ_MSG_TYPE:
+        return "STOPCQ";
+      case CLOSECQ_MSG_TYPE:
+        return "CLOSECQ";
+      case CLOSECLIENTCQS_MSG_TYPE:
+        return "CLOSECLIENTCQS";
+      case CQDATAERROR_MSG_TYPE:
+        return "CQDATAERROR";
+      case GETCQSTATS_MSG_TYPE:
+        return "GETCQSTATS";
+      case MONITORCQ_MSG_TYPE:
+        return "MONITORCQ";
+      case CQ_EXCEPTION_TYPE:
+        return "CQ_EXCEPTION_TYPE";
+      case QUERY_DATA_ERROR:
+        return "QUERY_DATA_ERROR";
+      case CLEAR_REGION:
+        return "CLEAR_REGION";
+      case CLEAR_REGION_DATA_ERROR:
+        return "CLEAR_REGION_DATA_ERROR";
+      case CONTAINS_KEY:
+        return "CONTAINS_KEY";
+      case CONTAINS_KEY_DATA_ERROR:
+        return "CONTAINS_KEY_DATA_ERROR";
+      case KEY_SET:
+        return "KEY_SET";
+      case KEY_SET_DATA_ERROR:
+        return "KEY_SET_DATA_ERROR";
+      case REGISTER_INSTANTIATORS:
+        return "REGISTER_INSTANTIATORS";
+      case PERIODIC_ACK:
+        return "PERIODIC_ACK";
+      case CLIENT_READY:
+        return "CLIENT_READY";
+      case CLIENT_MARKER:
+        return "CLIENT_MARKER";
+      case INVALIDATE_REGION:
+        return "INVALIDATE_REGION";
+      case EXECUTE_REGION_FUNCTION:
+        return "EXECUTE_REGION_FUNCTION";
+      case EXECUTE_REGION_FUNCTION_RESULT:
+        return "EXECUTE_REGION_FUNCTION_RESULT";
+      case EXECUTE_REGION_FUNCTION_ERROR:
+        return "EXECUTE_REGION_FUNCTION_ERROR";
+      case EXECUTE_FUNCTION:
+        return "EXECUTE_FUNCTION";
+      case EXECUTE_FUNCTION_RESULT:
+        return "EXECUTE_FUNCTION_RESULT";
+      case EXECUTE_FUNCTION_ERROR:
+        return "EXECUTE_FUNCTION_ERROR";
+      case CLIENT_REGISTER_INTEREST:
+        return "CLIENT_REGISTER_INTEREST";
+      case CLIENT_UNREGISTER_INTEREST:
+        return "CLIENT_UNREGISTER_INTEREST";
+      case REGISTER_DATASERIALIZERS:
+        return "REGISTER_DATASERIALIZERS";
+      case GET_CLIENT_PR_METADATA:
+        return "GET_CLIENT_PR_METADATA";
+      case RESPONSE_CLIENT_PR_METADATA:
+        return "RESPONSE_CLIENT_PR_METADATA";
+      case GET_CLIENT_PARTITION_ATTRIBUTES:
+        return "GET_CLIENT_PARTITION_ATTRIBUTES";
+      case RESPONSE_CLIENT_PARTITION_ATTRIBUTES:
+        return "RESPONSE_CLIENT_PARTITION_ATTRIBUTES";
+      case GET_CLIENT_PR_METADATA_ERROR:
+        return "GET_CLIENT_PR_METADATA_ERROR";
+      case GET_CLIENT_PARTITION_ATTRIBUTES_ERROR:
+        return "GET_CLIENT_PARTITION_ATTRIBUTES_ERROR";
+      case USER_CREDENTIAL_MESSAGE:
+        return "USER_CREDENTIAL_MESSAGE";
+      case REMOVE_USER_AUTH:
+        return "REMOVE_USER_AUTH";
+      case EXECUTE_REGION_FUNCTION_SINGLE_HOP:
+        return "EXECUTE_REGION_FUNCTION_SINGLE_HOP";
+      case GET_PDX_ID_FOR_TYPE:
+        return "GET_PDX_ID_FOR_TYPE";
+      case GET_PDX_TYPE_BY_ID:
+        return "GET_PDX_TYPE_BY_ID";
+      case ADD_PDX_TYPE:
+        return "ADD_PDX_TYPE";
+      case ADD_PDX_ENUM:
+        return "ADD_PDX_ENUM";
+      case GET_PDX_ID_FOR_ENUM:
+        return "GET_PDX_ID_FOR_ENUM";
+      case GET_PDX_ENUM_BY_ID:
+        return "GET_PDX_ENUM_BY_ID";
+      case SIZE:
+        return "SIZE";
+      case SIZE_ERROR:
+        return "SIZE_ERROR";
+      case INVALIDATE:
+        return "INVALIDATE";
+      case INVALIDATE_ERROR:
+        return "INVALIDATE_ERROR";
+      case COMMIT:
+        return "COMMIT";
+      case COMMIT_ERROR:
+        return "COMMIT_ERROR";
+      case ROLLBACK:
+        return "ROLLBACK";
+      case TX_FAILOVER:
+        return "TX_FAILOVER";
+      case GET_ENTRY:
+        return "GET_ENTRY";
+      case TX_SYNCHRONIZATION:
+        return "TX_SYNCHRONIZATION";
+      case GET_FUNCTION_ATTRIBUTES:
+        return "GET_FUNCTION_ATTRIBUTES";
+      case GET_ALL_FOR_RI:
+        return "GET_ALL_FOR_RI";
+      case SERVER_TO_CLIENT_PING:
+        return "SERVER_TO_CLIENT_PING";
+      case GATEWAY_RECEIVER_COMMAND:
+        return "GATEWAY_RECEIVER_COMMAND";
+      case TOMBSTONE_OPERATION:
+        return "TOMBSTONE_OPERATION";
+      case GET_PDX_TYPES:
+        return "GET_PDX_TYPES";
+      case GET_PDX_ENUMS:
+        return "GET_PDX_ENUMS";
+      case GET_ALL_70:
+        return "GET_ALL_70";
+      case GETDURABLECQS_MSG_TYPE:
+        return "GETDURABLECQS_MSG_TYPE";
+      case GET_DURABLE_CQS_DATA_ERROR:
+        return "GET_DURABLE_CQS_DATA_ERROR";
+      case GET_ALL_WITH_CALLBACK:
+        return "GET_ALL_WITH_CALLBACK";
+      case PUT_ALL_WITH_CALLBACK:
+        return "PUT_ALL_WITH_CALLBACK";
+      case REMOVE_ALL:
+        return "REMOVE_ALL";
+      default:
+        return Integer.toString(type);
