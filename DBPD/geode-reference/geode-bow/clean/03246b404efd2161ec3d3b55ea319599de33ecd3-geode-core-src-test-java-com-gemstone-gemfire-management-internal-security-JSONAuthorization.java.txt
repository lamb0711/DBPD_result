GEODE-1454: Have "region" attribute, in JSONAuthorization json file be an array

- Also converted to Jackson. Be gone org.json!!

-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.security.Principal;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-import javax.management.remote.JMXPrincipal;
-
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
+import javax.management.remote.JMXPrincipal;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.security.Principal;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
-  public static JSONAuthorization create() throws IOException, JSONException {
+  public static JSONAuthorization create() throws IOException {
-  public JSONAuthorization() throws IOException, JSONException {}
+  public JSONAuthorization() throws IOException {
+  }
-  public JSONAuthorization(String jsonFileName) throws IOException, JSONException {
+  public JSONAuthorization(String jsonFileName) throws IOException {
-  public static void setUpWithJsonFile(String jsonFileName) throws IOException, JSONException {
+  public static void setUpWithJsonFile(String jsonFileName) throws IOException {
-  private static void readSecurityDescriptor(String json) throws IOException, JSONException {
-    JSONObject jsonBean = new JSONObject(json);
+  private static void readSecurityDescriptor(String json) throws IOException {
+    ObjectMapper mapper = new ObjectMapper();
+    JsonNode jsonNode = mapper.readTree(json);
-    Map<String, Role> roleMap = readRoles(jsonBean);
-    readUsers(acl, jsonBean, roleMap);
+    Map<String, Role> roleMap = readRoles(jsonNode);
+    readUsers(acl, jsonNode, roleMap);
-  private static void readUsers(Map<String, User> acl, JSONObject jsonBean, Map<String, Role> roleMap)
-      throws JSONException {
-    JSONArray array = jsonBean.getJSONArray("users");
-    for (int i = 0; i < array.length(); i++) {
-      JSONObject obj = array.getJSONObject(i);
+  private static void readUsers(Map<String, User> acl, JsonNode node, Map<String, Role> roleMap) {
+    for (JsonNode u : node.get("users")) {
-      user.name = obj.getString("name");
-      if (obj.has("password")) {
-        user.pwd = obj.getString("password");
+      user.name = u.get("name").asText();
+      if (u.has("password")) {
+        user.pwd = u.get("password").asText();
-      JSONArray ops = obj.getJSONArray("roles");
-      for (int j = 0; j < ops.length(); j++) {
-        String roleName = ops.getString(j);
-        user.roles.add(roleMap.get(roleName));
+      for (JsonNode r : u.get("roles")) {
+        user.roles.add(roleMap.get(r.asText()));
-  private static Map<String, Role> readRoles(JSONObject jsonBean) throws JSONException {
+  private static Map<String, Role> readRoles(JsonNode jsonNode) {
-    JSONArray array = jsonBean.getJSONArray("roles");
-    for (int i = 0; i < array.length(); i++) {
-      JSONObject obj = array.getJSONObject(i);
+    for (JsonNode r : jsonNode.get("roles")) {
-      role.name = obj.getString("name");
+      role.name = r.get("name").asText();
-      if(obj.has("regions")) {
-        regionNames = obj.getString("regions");
+
+      JsonNode regions = r.get("regions");
+      if (regions != null) {
+        if (regions.isArray()) {
+          regionNames = StreamSupport.stream(regions.spliterator(), false)
+              .map(JsonNode::asText)
+              .collect(Collectors.joining(","));
+        } else {
+          regionNames = regions.asText();
+        }
-      JSONArray ops = obj.getJSONArray("operationsAllowed");
-      for (int j = 0; j < ops.length(); j++) {
-        String[] parts = ops.getString(j).split(":");
-        if(regionNames!=null) {
+
+      for (JsonNode op : r.get("operationsAllowed")) {
+        String[] parts = op.asText().split(":");
+        if (regionNames == null) {
+          role.permissions.add(new ResourceOperationContext(parts[0], parts[1], "*"));
+        } else {
-        else
-          role.permissions.add(new ResourceOperationContext(parts[0], parts[1], "*"));
-      if (obj.has("serverGroup")) {
-        role.serverGroup = obj.getString("serverGroup");
+      if (r.has("serverGroup")) {
+        role.serverGroup = r.get("serverGroup").asText();
-    if (principal == null)
-      return false;
+    if (principal == null) return false;
-    if(user == null)
-      return false; // this user is not authorized to do anything
+    if (user == null) return false; // this user is not authorized to do anything
-    for(Role role:acl.get(user.name).roles) {
+    for (Role role : acl.get(user.name).roles) {
-    if (user != null && !userObj.pwd.equals(pwd) && !"".equals(user))
+    if (user != null && !userObj.pwd.equals(pwd) && !"".equals(user)) {
+    }
-  private static String readFile(String name) throws IOException, JSONException {
+  private static String readFile(String name) throws IOException {
