Implementing LuceneQueryImpl.search

Implementing search by invoking the LuceneFunction from within
LuceneQueryImpl.search and building a result set. Adding unit tests for
the same.

-import org.apache.lucene.search.Query;
-
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.execute.FunctionService;
+import com.gemstone.gemfire.cache.execute.ResultCollector;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.LuceneFunction;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.LuceneFunctionContext;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntries;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntriesCollector;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntriesCollectorManager;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntriesFunctionCollector;
-public class LuceneQueryImpl implements LuceneQuery {
+public class LuceneQueryImpl<K, V> implements LuceneQuery<K, V> {
-  private String regionName;
-  
-  private Set<String> projectedFieldNames;
-  
+  private String[] projectedFieldNames;
+  private Region<K, V> region;
-  LuceneQueryImpl(String indexName, String regionName, LuceneQueryProvider provider, Set<String> projectionFields, 
+  public LuceneQueryImpl(String indexName, Region<K, V> region, LuceneQueryProvider provider, String[] projectionFields, 
-    this.regionName = regionName;
+    this.region = region;
-  public LuceneQueryResults search() {
-    // TODO Auto-generated method stub
-    return null;
+  public LuceneQueryResults<K, V> search() {
+    LuceneFunctionContext<TopEntriesCollector> context = new LuceneFunctionContext<>(query, indexName,
+        new TopEntriesCollectorManager());
+    TopEntriesFunctionCollector collector = new TopEntriesFunctionCollector();
+
+    ResultCollector<TopEntriesCollector, TopEntries> rc = (ResultCollector<TopEntriesCollector, TopEntries>) FunctionService.onRegion(region)
+        .withArgs(context)
+        .withCollector(collector)
+        .execute(LuceneFunction.ID);
+    
+    //TODO provide a timeout to the user?
+    TopEntries entries = rc.getResult();
+    
+    return new LuceneQueryResultsImpl<K, V>(entries.getHits(), region, pageSize);
-    return (String[])this.projectedFieldNames.toArray();
+    return this.projectedFieldNames;
