Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  /*package*/CompositeResultData() {
+  /* package */ CompositeResultData() {
-  
-  /*package*/CompositeResultData(GfJsonObject gfJsonObject) {
+
+  /* package */ CompositeResultData(GfJsonObject gfJsonObject) {
-  
+
-   * @throws ResultDataException
-   *           If the value is non-finite number or if the key is null.
+   * @throws ResultDataException If the value is non-finite number or if the key is null.
-  
+
-   * @throws ResultDataException
-   *           If the value is non-finite number or if the key is null.
+   * @throws ResultDataException If the value is non-finite number or if the key is null.
-  
+
-  
+
-  
+
-  }  
-  
+  }
+
-    
+
-  
+
-    
+
-      GfJsonObject sectionData = contentObject.getJSONObject(SectionResultData.generateSectionKey(keyToRetrieve));
+      GfJsonObject sectionData =
+          contentObject.getJSONObject(SectionResultData.generateSectionKey(keyToRetrieve));
-  
+
-  public static class SectionResultData /*extends AbstractResultData*/ {
+  public static class SectionResultData /* extends AbstractResultData */ {
-    
+
-    private int tablesCount     = 0;
-    
-    /*package*/SectionResultData() {
+    private int tablesCount = 0;
+
+    /* package */ SectionResultData() {
-    
+
-    
+
-    
+
-    
+
-      
+
-    
+
-      
+
-      
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-      
+
-    
+
-        GfJsonObject sectionData = sectionGfJsonObject.getJSONObject(generateSectionKey(keyToRetrieve));
+        GfJsonObject sectionData =
+            sectionGfJsonObject.getJSONObject(generateSectionKey(keyToRetrieve));
-    
+
-      
+
-    
+
-    
+
-      
+
-        GfJsonArray.toStringArray(((GfJsonArray)retrievedObject));
+        GfJsonArray.toStringArray(((GfJsonArray) retrievedObject));
-      
+
-    
+
-    
+
-      
+
-        stringArray = GfJsonArray.toStringArray(((GfJsonArray)retrievedObject));
+        stringArray = GfJsonArray.toStringArray(((GfJsonArray) retrievedObject));
-    
+
-    
+
-//    @Override
-//    public String getType() {
-//      return TYPE_SECTION;
-//    }
+    // @Override
+    // public String getType() {
+    // return TYPE_SECTION;
+    // }
-  
+
-    
+
-    r1Section.addData("Region", "R1").addData("IsPartitioned", false).addData("IsPersistent", true).addData("Disk Store", "DiskStore1").addData("Group", "Group1");
+    r1Section.addData("Region", "R1").addData("IsPartitioned", false).addData("IsPersistent", true)
+        .addData("Disk Store", "DiskStore1").addData("Group", "Group1");
-    r1Table.accumulate("Member Id", "host1(3467):12435:12423").accumulate("PrimaryEntryCount", 20000).accumulate("BackupEntryCount", 20000).accumulate("Memory(MB)", "100").accumulate("NumOfCopies", 1);
-    r1Table.accumulate("Member Id", "host3(5756):57665:90923").accumulate("PrimaryEntryCount", 25000).accumulate("BackupEntryCount", 10000).accumulate("Memory(MB)", "200").accumulate("NumOfCopies", 1);
-    
+    r1Table.accumulate("Member Id", "host1(3467):12435:12423")
+        .accumulate("PrimaryEntryCount", 20000).accumulate("BackupEntryCount", 20000)
+        .accumulate("Memory(MB)", "100").accumulate("NumOfCopies", 1);
+    r1Table.accumulate("Member Id", "host3(5756):57665:90923")
+        .accumulate("PrimaryEntryCount", 25000).accumulate("BackupEntryCount", 10000)
+        .accumulate("Memory(MB)", "200").accumulate("NumOfCopies", 1);
+
-    r3Section.addData("Region", "R3").addData("IsPartitioned", true).addData("IsPersistent", true).addData("Disk Store", "DiskStore2").addData("Group", "Group2").addData("ColocatedWith", "-");
+    r3Section.addData("Region", "R3").addData("IsPartitioned", true).addData("IsPersistent", true)
+        .addData("Disk Store", "DiskStore2").addData("Group", "Group2")
+        .addData("ColocatedWith", "-");
-    r3Table.accumulate("Member Id", "host1(3467):12435:12423").accumulate("PrimaryEntryCount", 20000).accumulate("BackupEntryCount", 20000).accumulate("Memory(MB)", "100").accumulate("NumOfCopies", 1).accumulate("NumOfBuckets", 100);
-    r3Table.accumulate("Member Id", "host2(3353):23545:14723").accumulate("PrimaryEntryCount", 20000).accumulate("BackupEntryCount", 20000).accumulate("Memory(MB)", "100").accumulate("NumOfCopies", 1).accumulate("NumOfBuckets", 100);
-    r3Table.accumulate("Member Id", "host3(5756):57665:90923").accumulate("PrimaryEntryCount", 25000).accumulate("BackupEntryCount", 10000).accumulate("Memory(MB)", "200").accumulate("NumOfCopies", 1).accumulate("NumOfBuckets", 100);
+    r3Table.accumulate("Member Id", "host1(3467):12435:12423")
+        .accumulate("PrimaryEntryCount", 20000).accumulate("BackupEntryCount", 20000)
+        .accumulate("Memory(MB)", "100").accumulate("NumOfCopies", 1)
+        .accumulate("NumOfBuckets", 100);
+    r3Table.accumulate("Member Id", "host2(3353):23545:14723")
+        .accumulate("PrimaryEntryCount", 20000).accumulate("BackupEntryCount", 20000)
+        .accumulate("Memory(MB)", "100").accumulate("NumOfCopies", 1)
+        .accumulate("NumOfBuckets", 100);
+    r3Table.accumulate("Member Id", "host3(5756):57665:90923")
+        .accumulate("PrimaryEntryCount", 25000).accumulate("BackupEntryCount", 10000)
+        .accumulate("Memory(MB)", "200").accumulate("NumOfCopies", 1)
+        .accumulate("NumOfBuckets", 100);
-      System.out.println(crd.getGfJsonObject().toIndentedString(/*2*/0));
-      
+      System.out.println(crd.getGfJsonObject().toIndentedString(/* 2 */0));
+
