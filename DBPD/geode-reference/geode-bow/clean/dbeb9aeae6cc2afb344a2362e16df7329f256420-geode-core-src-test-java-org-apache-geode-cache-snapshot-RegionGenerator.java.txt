Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    REPLICATE,
-    REPLICATE_PERSISTENT,
-    REPLICATE_PERSISTENT_OVERFLOW,
-    PARTITION,
-    PARTITION_PERSISTENT,
-    PARTITION_PERSISTENT_OVERFLOW;
-    
+    REPLICATE, REPLICATE_PERSISTENT, REPLICATE_PERSISTENT_OVERFLOW, PARTITION, PARTITION_PERSISTENT, PARTITION_PERSISTENT_OVERFLOW;
+
-      return new RegionType[] { 
-          REPLICATE_PERSISTENT, 
-          REPLICATE_PERSISTENT_OVERFLOW, 
-          PARTITION_PERSISTENT, 
-          PARTITION_PERSISTENT_OVERFLOW
-      };
+      return new RegionType[] {REPLICATE_PERSISTENT, REPLICATE_PERSISTENT_OVERFLOW,
+          PARTITION_PERSISTENT, PARTITION_PERSISTENT_OVERFLOW};
-  
+
-    SERIALIZABLE,
-    DATA_SERIALIZABLE,
-    DATA_SERIALIZER,
-    PDX,
-    PDX_SERIALIZER;
-    
+    SERIALIZABLE, DATA_SERIALIZABLE, DATA_SERIALIZER, PDX, PDX_SERIALIZER;
+
-      return new SerializationType[] {
-          SERIALIZABLE,
-          DATA_SERIALIZABLE,
-          DATA_SERIALIZER
-      };
+      return new SerializationType[] {SERIALIZABLE, DATA_SERIALIZABLE, DATA_SERIALIZER};
-  
+
-  
+
-    case REPLICATE:
-      return c.<K, V>createRegionFactory(RegionShortcut.REPLICATE).create(name);
-      
-    case REPLICATE_PERSISTENT:
-      return c.<K, V>createRegionFactory(RegionShortcut.REPLICATE_PERSISTENT)
-        .setDiskStoreName(diskStore)
-        .create(name);
-      
-    case REPLICATE_PERSISTENT_OVERFLOW:
-      return c.<K, V>createRegionFactory(RegionShortcut.REPLICATE_PERSISTENT_OVERFLOW)
-          .setEvictionAttributes(EvictionAttributes.createLIFOEntryAttributes(1, EvictionAction.OVERFLOW_TO_DISK))
-          .setDiskStoreName(diskStore)
-          .create(name);
-      
-    case PARTITION:
-      return c.<K, V>createRegionFactory(RegionShortcut.PARTITION).create(name);
+      case REPLICATE:
+        return c.<K, V>createRegionFactory(RegionShortcut.REPLICATE).create(name);
-    case PARTITION_PERSISTENT:
-      return c.<K, V>createRegionFactory(RegionShortcut.PARTITION_PERSISTENT)
-          .setDiskStoreName(diskStore)
-          .create(name);
-      
-    case PARTITION_PERSISTENT_OVERFLOW:
-      return c.<K, V>createRegionFactory(RegionShortcut.PARTITION_PERSISTENT_OVERFLOW)
-          .setEvictionAttributes(EvictionAttributes.createLIFOEntryAttributes(5, EvictionAction.OVERFLOW_TO_DISK))
-          .setDiskStoreName(diskStore)
-          .create(name);
+      case REPLICATE_PERSISTENT:
+        return c.<K, V>createRegionFactory(RegionShortcut.REPLICATE_PERSISTENT)
+            .setDiskStoreName(diskStore).create(name);
+
+      case REPLICATE_PERSISTENT_OVERFLOW:
+        return c.<K, V>createRegionFactory(RegionShortcut.REPLICATE_PERSISTENT_OVERFLOW)
+            .setEvictionAttributes(
+                EvictionAttributes.createLIFOEntryAttributes(1, EvictionAction.OVERFLOW_TO_DISK))
+            .setDiskStoreName(diskStore).create(name);
+
+      case PARTITION:
+        return c.<K, V>createRegionFactory(RegionShortcut.PARTITION).create(name);
+
+      case PARTITION_PERSISTENT:
+        return c.<K, V>createRegionFactory(RegionShortcut.PARTITION_PERSISTENT)
+            .setDiskStoreName(diskStore).create(name);
+
+      case PARTITION_PERSISTENT_OVERFLOW:
+        return c.<K, V>createRegionFactory(RegionShortcut.PARTITION_PERSISTENT_OVERFLOW)
+            .setEvictionAttributes(
+                EvictionAttributes.createLIFOEntryAttributes(5, EvictionAction.OVERFLOW_TO_DISK))
+            .setDiskStoreName(diskStore).create(name);
-  
+
-    case SERIALIZABLE:
-      return new MyObject(f1, f2);
+      case SERIALIZABLE:
+        return new MyObject(f1, f2);
-    case DATA_SERIALIZABLE:
-      return new MyObjectDataSerializable(f1, f2);
-      
-    case DATA_SERIALIZER:
-      return new MyObjectDataSerializable2(f1, f2);
+      case DATA_SERIALIZABLE:
+        return new MyObjectDataSerializable(f1, f2);
-    case PDX:
-      return new MyObjectPdx(f1, f2, MyEnumPdx.const1);
-    
-    case PDX_SERIALIZER:
-      return new MyObjectPdx2(f1, f2);
+      case DATA_SERIALIZER:
+        return new MyObjectDataSerializable2(f1, f2);
+
+      case PDX:
+        return new MyObjectPdx(f1, f2, MyEnumPdx.const1);
+
+      case PDX_SERIALIZER:
+        return new MyObjectPdx2(f1, f2);
