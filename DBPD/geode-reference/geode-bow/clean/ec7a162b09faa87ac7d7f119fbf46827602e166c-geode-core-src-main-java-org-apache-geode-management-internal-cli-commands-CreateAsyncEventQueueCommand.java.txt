GEODE-4858: CreateAsyncEventQueue and tests refactor. (#1969)

* Unsupported ModelCommandResult methods failedToPersist, setCommandPersisted, and setFileToDownload now throw exceptions to avoid accidental use in testing.
* Extracted cluster configuration messages in CommandExecutor to public class fields, for test consumption.
* Extracted several message strings in ModelCommandResult to public class fields, for test consumption
* Serialized necessary AsyncEventQueue configuration classes and updated sanctioned-geode-core-serializables

+import java.util.Arrays;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.DeclarableType;
-import org.apache.geode.distributed.internal.InternalConfigurationPersistenceService;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.functions.AsyncEventQueueFunctionArgs;
+import org.apache.geode.management.cli.SingleGfshCommand;
-import org.apache.geode.management.internal.cli.result.CommandResult;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class CreateAsyncEventQueueCommand extends InternalGfshCommand {
+public class CreateAsyncEventQueueCommand extends SingleGfshCommand {
-  public Result createAsyncEventQueue(
+  public ResultModel createAsyncEventQueue(
-
-    AsyncEventQueueFunctionArgs aeqArgs = new AsyncEventQueueFunctionArgs(id, parallel,
-        enableBatchConflation, batchSize, batchTimeInterval, persistent, diskStore, diskSynchronous,
-        maxQueueMemory, dispatcherThreads, orderPolicy, gatewayEventFilters,
-        gatewaySubstitutionListener, listener, listenerProperties, forwardExpirationDestroy);
+    CacheConfig.AsyncEventQueue config = new CacheConfig.AsyncEventQueue();
+    config.setAsyncEventListener(new DeclarableType(listener, listenerProperties));
+    config.setBatchSize(String.valueOf(batchSize));
+    config.setBatchTimeInterval(String.valueOf(batchTimeInterval));
+    config.setDiskStoreName(diskStore);
+    config.setDiskSynchronous(diskSynchronous);
+    config.setDispatcherThreads(String.valueOf(dispatcherThreads));
+    config.setEnableBatchConflation(enableBatchConflation);
+    config.setForwardExpirationDestroy(forwardExpirationDestroy);
+    if (gatewayEventFilters != null) {
+      config.getGatewayEventFilter().addAll(Arrays.stream(gatewayEventFilters)
+          .map(classname -> new DeclarableType((classname))).collect(Collectors.toList()));
+    }
+    if (gatewaySubstitutionListener != null) {
+      config.setGatewayEventSubstitutionFilter(new DeclarableType(gatewaySubstitutionListener));
+    }
+    config.setId(id);
+    config.setMaximumQueueMemory(String.valueOf(maxQueueMemory));
+    config.setOrderPolicy(orderPolicy);
+    config.setParallel(parallel);
+    config.setPersistent(persistent);
-    List<CliFunctionResult> results = executeAndGetFunctionResult(function, aeqArgs, targetMembers);
+    List<CliFunctionResult> results = executeAndGetFunctionResult(function, config, targetMembers);
-    if (results.size() == 0) {
-      throw new RuntimeException("No results received.");
-    }
-
-    CommandResult commandResult = ResultBuilder.buildResult(results);
-    XmlEntity xmlEntity = findXmlEntity(results);
-    if (xmlEntity != null) {
-      persistClusterConfiguration(commandResult,
-          () -> ((InternalConfigurationPersistenceService) getConfigurationPersistenceService())
-              .addXmlEntity(xmlEntity, groups));
-    }
+    ResultModel commandResult = ResultModel.createMemberStatusResult(results);
+    commandResult.setConfigObject(config);
+  @Override
+  public void updateClusterConfig(String group, CacheConfig config, Object configObject) {
+    config.getAsyncEventQueue().add((CacheConfig.AsyncEventQueue) configObject);
+  }
