GEODE-8205: feature flag unsupported Redis commands (#5185)

- In order to enable unsupported Redis commands, set the Java
  system parameter `enable-unsupported-redis-commands=true`.
- The list of un/supported commands can be seen in `RedisCommandType`.

* Introduce RedisClusterStartupRule

Removes boiler plate code for starting a Redis server. By default starts
on an ephemeral port.
- Expose getRedisPort()
- Expose setEnableUnsupported()

Authored-by: Jens Deppe <jdeppe@vmware.com>
Co-authored-by: john Hutchison <hutchisonjo@vmware.com>
- * command. It provides access to the {@link RegionProvider} and anything
- * else an executing {@link Command} may need.
+ * command. It provides access to the {@link RegionProvider} and anything else an executing {@link
+ * Command} may need.
+  private static final boolean RUN_UNSUPPORTED_COMMANDS = true;
-    if (isAuthenticated) {
-      if (command.isOfType(RedisCommandType.SHUTDOWN)) {
-        this.server.shutdown();
-        return;
-      }
-      response = command.execute(this);
-
-    } else if (command.isOfType(RedisCommandType.AUTH)) {
-      response = command.execute(this);
-    } else {
-      response = RedisResponse.error(RedisConstants.ERROR_NOT_AUTH);
+    if (!isAuthenticated) {
+      response = handleUnAuthenticatedCommand(command);
+      writeToChannel(response);
+      return;
-    logResponse(response);
+    if (!(command.isSupported() || allowUnsupportedCommands())) {
+      writeToChannel(RedisResponse.error(RedisConstants.ERROR_UNSUPPORTED_COMMAND));
+      return;
+    }
+    if (command.isOfType(RedisCommandType.SHUTDOWN)) {
+      this.server.shutdown();
+      return;
+    }
+
+    response = command.execute(this);
+
+    logResponse(response);
+  private boolean allowUnsupportedCommands() {
+    return this.server.allowUnsupportedCommands();
+  }
+
+
+  private RedisResponse handleUnAuthenticatedCommand(Command command) {
+    RedisResponse response;
+    if (command.isOfType(RedisCommandType.AUTH)) {
+      response = command.execute(this);
+    } else {
+      response = RedisResponse.error(RedisConstants.ERROR_NOT_AUTH);
+    }
+    return response;
+  }
+
+
