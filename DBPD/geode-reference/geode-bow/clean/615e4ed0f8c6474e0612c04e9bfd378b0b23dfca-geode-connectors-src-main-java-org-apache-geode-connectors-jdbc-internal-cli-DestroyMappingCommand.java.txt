GEODE-6068: change destroy jdbc-mapping to undo create (#2905)

All the changes made by create jdbc-mapping are now undone
by destroy jdbc-mapping. This includes the cluster config changes
and the changes to the live regions and caches on servers.

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import org.apache.geode.cache.configuration.CacheConfig.AsyncEventQueue;
+import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.cache.configuration.DeclarableType;
+import org.apache.geode.cache.configuration.RegionAttributesType;
+import org.apache.geode.cache.configuration.RegionConfig;
+import org.apache.geode.connectors.jdbc.JdbcLoader;
+import org.apache.geode.connectors.jdbc.JdbcWriter;
-  private static final String ERROR_PREFIX = "ERROR: ";
-
-    String region = (String) configObject;
-    RegionMapping existingCacheElement = cacheConfig.findCustomRegionElement("/" + region,
-        RegionMapping.ELEMENT_ID, RegionMapping.class);
+    String regionName = (String) configObject;
+    RegionConfig regionConfig = findRegionConfig(cacheConfig, regionName);
+    if (regionConfig == null) {
+      return false;
+    }
+    boolean modified = false;
+    modified |= removeJdbcMappingFromRegion(regionConfig);
+    modified |= removeJdbcQueueFromCache(cacheConfig, regionName);
+    RegionAttributesType attributes = getRegionAttributes(regionConfig);
+    modified |= removeJdbcLoader(attributes);
+    modified |= removeJdbcWriter(attributes);
+    modified |= removeJdbcAsyncEventQueueId(attributes, regionName);
+    return modified;
+  }
-    if (existingCacheElement != null) {
-      cacheConfig
-          .getRegions()
-          .stream()
-          .filter(regionConfig -> regionConfig.getName().equals(region))
-          .forEach(
-              regionConfig -> regionConfig.getCustomRegionElements().remove(existingCacheElement));
+  private boolean removeJdbcLoader(RegionAttributesType attributes) {
+    DeclarableType cacheLoader = attributes.getCacheLoader();
+    if (cacheLoader != null) {
+      if (JdbcLoader.class.getName().equals(cacheLoader.getClassName())) {
+        attributes.setCacheLoader(null);
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean removeJdbcWriter(RegionAttributesType attributes) {
+    DeclarableType cacheWriter = attributes.getCacheWriter();
+    if (cacheWriter != null) {
+      if (JdbcWriter.class.getName().equals(cacheWriter.getClassName())) {
+        attributes.setCacheWriter(null);
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean removeJdbcAsyncEventQueueId(RegionAttributesType attributes, String regionName) {
+    String queueName = CreateMappingCommand.createAsyncEventQueueName(regionName);
+    String queueIds = attributes.getAsyncEventQueueIds();
+    if (queueIds == null) {
+      return false;
+    }
+    List<String> queues = new ArrayList<>(Arrays.asList(queueIds.split(",")));
+    if (queues.contains(queueName)) {
+      queues.remove(queueName);
+      String newQueueIds = String.join(",", queues);
+      attributes.setAsyncEventQueueIds(newQueueIds);
+  private boolean removeJdbcQueueFromCache(CacheConfig cacheConfig, String regionName) {
+    String queueName = CreateMappingCommand.createAsyncEventQueueName(regionName);
+    Iterator<AsyncEventQueue> iterator = cacheConfig.getAsyncEventQueues().iterator();
+    while (iterator.hasNext()) {
+      AsyncEventQueue queue = iterator.next();
+      if (queueName.equals(queue.getId())) {
+        iterator.remove();
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean removeJdbcMappingFromRegion(RegionConfig regionConfig) {
+    Iterator<CacheElement> iterator = regionConfig.getCustomRegionElements().iterator();
+    while (iterator.hasNext()) {
+      CacheElement element = iterator.next();
+      if (element instanceof RegionMapping) {
+        iterator.remove();
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private RegionConfig findRegionConfig(CacheConfig cacheConfig, String regionName) {
+    return cacheConfig.getRegions().stream()
+        .filter(region -> region.getName().equals(regionName)).findFirst().orElse(null);
+  }
+
+  private RegionAttributesType getRegionAttributes(RegionConfig regionConfig) {
+    RegionAttributesType attributes;
+    List<RegionAttributesType> attributesList = regionConfig.getRegionAttributes();
+    if (attributesList.isEmpty()) {
+      attributes = new RegionAttributesType();
+      attributesList.add(attributes);
+    } else {
+      attributes = attributesList.get(0);
+    }
+    return attributes;
+  }
+
