GEODE-5955 CacheClientUpdater statistics are created and never closed on failed initialization

Close statistics if construction of a CacheClientUpdater fails.

I had to introduce a StatisticsProvider in order to inject a mock
statistics object into the CacheClientUpdater.  I also reworked the
"finally" block in the constructor to use the updater's close()
method.

-  private final InternalDistributedSystem system;
+  private final DistributedSystem system;
+    this(name, location, primary, ids, handshake, qManager, eManager, endpoint, handshakeTimeout,
+        socketCreator, new StatisticsProvider());
+  }
+
+  /**
+   * alternative constructor for unit tests. This constructor allows you to pass a
+   * mock StatisticsProvider
+   */
+  public CacheClientUpdater(String name, ServerLocation location, boolean primary,
+      DistributedSystem distributedSystem, ClientSideHandshake handshake, QueueManager qManager,
+      EndpointManager eManager, Endpoint endpoint, int handshakeTimeout,
+      SocketCreator socketCreator, StatisticsProvider statisticsProvider)
+      throws AuthenticationRequiredException,
+      AuthenticationFailedException, ServerRefusedConnectionException {
-    this.system = (InternalDistributedSystem) ids;
-    this.isDurableClient = handshake.getMembershipId().isDurable();
+    this.system = distributedSystem;
+    this.isDurableClient = handshake.isDurable();
-    this.stats = new CCUStats(this.system, this.location);
+    this.stats = statisticsProvider.createStatistics(distributedSystem, location);
-      if (mySock != null) {
-        try {
-          mySock.setSoTimeout(0);
-        } catch (SocketException ignore) {
-          // ignore: nothing we can do about this
-        }
-      }
-
+      this.socket = mySock;
+      this.commBuffer = cb;
+      this.out = tmpOut;
+      this.in = tmpIn;
+      this.serverId = sid;
-        this.socket = mySock;
-        this.out = tmpOut;
-        this.in = tmpIn;
-        this.serverId = sid;
-        this.commBuffer = cb;
-
-      } else {
-        this.socket = null;
-        this.serverId = null;
-        this.commBuffer = null;
-        this.out = null;
-        this.in = null;
-
-            mySock.close();
-          } catch (IOException ioe) {
-            logger.warn("Closing socket in {} failed", this, ioe);
+            mySock.setSoTimeout(0);
+          } catch (SocketException ignore) {
+            // ignore: nothing we can do about this
+      } else {
+        close();
-      this.system.addDisconnectListener(this);
-      addedListener = true;
+      if (system instanceof InternalDistributedSystem) {
+        ((InternalDistributedSystem) system).addDisconnectListener(this);
+        addedListener = true;
+      }
-        this.system.removeDisconnectListener(this);
+        ((InternalDistributedSystem) system).removeDisconnectListener(this);
-    this.stats.close();
-
-    // close the helper
+
+    this.stats.close();
+  public static class StatisticsProvider {
+    public CCUStats createStatistics(DistributedSystem system, ServerLocation location) {
+      return new CCUStats(system, location);
+    }
+  }
+
