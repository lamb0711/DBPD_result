Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final GetRegionDescriptionFunction getRegionDescription = new GetRegionDescriptionFunction();
+  private static final GetRegionDescriptionFunction getRegionDescription =
+      new GetRegionDescriptionFunction();
-  @CliCommand(value = { CliStrings.LIST_REGION }, help = CliStrings.LIST_REGION__HELP)
+  @CliCommand(value = {CliStrings.LIST_REGION}, help = CliStrings.LIST_REGION__HELP)
-      @CliOption(key = { CliStrings.LIST_REGION__GROUP },
-      optionContext = ConverterHint.MEMBERGROUP,
-      help = CliStrings.LIST_REGION__GROUP__HELP)
-      String group,
-      @CliOption(key = { CliStrings.LIST_REGION__MEMBER },
-      optionContext = ConverterHint.MEMBERIDNAME,
-      help = CliStrings.LIST_REGION__MEMBER__HELP)
-      String memberNameOrId) {
+      @CliOption(key = {CliStrings.LIST_REGION__GROUP}, optionContext = ConverterHint.MEMBERGROUP,
+          help = CliStrings.LIST_REGION__GROUP__HELP) String group,
+      @CliOption(key = {CliStrings.LIST_REGION__MEMBER}, optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.LIST_REGION__MEMBER__HELP) String memberNameOrId) {
-        targetMembers = CliUtil.findAllMatchingMembers(group, memberNameOrId);
+        targetMembers = CliUtil.findMembersOrThrow(group, memberNameOrId);
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.LIST_REGION));
-    }
-    catch (Exception e) {
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.LIST_REGION__MSG__ERROR + " : " + e.getMessage());
+      result = ResultBuilder.createGemFireErrorResult(CliStrings
+          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.LIST_REGION));
+    } catch (Exception e) {
+      result = ResultBuilder
+          .createGemFireErrorResult(CliStrings.LIST_REGION__MSG__ERROR + " : " + e.getMessage());
-  @CliCommand(value = { CliStrings.DESCRIBE_REGION }, help = CliStrings.DESCRIBE_REGION__HELP)
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_CONFIG } )
+  @CliCommand(value = {CliStrings.DESCRIBE_REGION}, help = CliStrings.DESCRIBE_REGION__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_CONFIG})
-      @CliOption(key = CliStrings.DESCRIBE_REGION__NAME,
-      optionContext = ConverterHint.REGIONPATH,
-      help = CliStrings.DESCRIBE_REGION__NAME__HELP,
-      mandatory = true)
-      String regionName) {
+      @CliOption(key = CliStrings.DESCRIBE_REGION__NAME, optionContext = ConverterHint.REGIONPATH,
+          help = CliStrings.DESCRIBE_REGION__NAME__HELP, mandatory = true) String regionName) {
-      
+
-      
+
-      ResultCollector <?, ?> rc = CliUtil.executeFunction(getRegionDescription, regionName, CliUtil.getAllMembers(cache));
+      ResultCollector<?, ?> rc =
+          CliUtil.executeFunction(getRegionDescription, regionName, CliUtil.getAllMembers(cache));
-      // The returned result could be a region description with per member and /or single local region
+      // The returned result could be a region description with per member and /or single local
+      // region
-                RegionDescriptionPerMember preyRegionDescPerMember = (RegionDescriptionPerMember) results[j];
+                RegionDescriptionPerMember preyRegionDescPerMember =
+                    (RegionDescriptionPerMember) results[j];
-        return ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.REGION_NOT_FOUND, regionName));
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.format(CliStrings.REGION_NOT_FOUND, regionName));
-        
-        //No point in displaying the scope for PR's 
+
+        // No point in displaying the scope for PR's
-          String scope = regionDescription.getCndRegionAttributes().get(RegionAttributesNames.SCOPE);
+          String scope =
+              regionDescription.getCndRegionAttributes().get(RegionAttributesNames.SCOPE);
-        String dataPolicy = regionDescription.getDataPolicy().toString().toLowerCase().replace('_', ' ');
+        String dataPolicy =
+            regionDescription.getDataPolicy().toString().toLowerCase().replace('_', ' ');
-        regionSection.addData(memberType, CliUtil.convertStringSetToString(regionDescription.getHostingMembers(), '\n'));
+        regionSection.addData(memberType,
+            CliUtil.convertStringSetToString(regionDescription.getHostingMembers(), '\n'));
-        commonNonDefaultAttrTable.setHeader(CliStrings.format(CliStrings.DESCRIBE_REGION__NONDEFAULT__COMMONATTRIBUTES__HEADER, memberType));
+        commonNonDefaultAttrTable.setHeader(CliStrings
+            .format(CliStrings.DESCRIBE_REGION__NONDEFAULT__COMMONATTRIBUTES__HEADER, memberType));
-        writeCommonAttributesToTable(commonNonDefaultAttrTable, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, cndRegionAttrsMap);
-        writeCommonAttributesToTable(commonNonDefaultAttrTable, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION, cndEvictionAttrsMap);
-        writeCommonAttributesToTable(commonNonDefaultAttrTable, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION, cndPartitionAttrsMap);
+        writeCommonAttributesToTable(commonNonDefaultAttrTable,
+            CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, cndRegionAttrsMap);
+        writeCommonAttributesToTable(commonNonDefaultAttrTable,
+            CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION, cndEvictionAttrsMap);
+        writeCommonAttributesToTable(commonNonDefaultAttrTable,
+            CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION, cndPartitionAttrsMap);
-        Map<String, RegionDescriptionPerMember> regDescPerMemberMap = regionDescription.getRegionDescriptionPerMemberMap();
+        Map<String, RegionDescriptionPerMember> regDescPerMemberMap =
+            regionDescription.getRegionDescriptionPerMemberMap();
-        //table.setHeader(CliStrings.format(CliStrings.DESCRIBE_REGION__NONDEFAULT__PERMEMBERATTRIBUTES__HEADER, memberType));
+        // table.setHeader(CliStrings.format(CliStrings.DESCRIBE_REGION__NONDEFAULT__PERMEMBERATTRIBUTES__HEADER,
+        // memberType));
-        boolean setHeader = false; 
+        boolean setHeader = false;
-          
-          //Scope is not valid for PR's
+
+          // Scope is not valid for PR's
-          
+
-            memberNameAdded = writeAttributesToTable(table, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, ndRa, member, memberNameAdded);
-            memberNameAdded = writeAttributesToTable(table, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION, ndEa, member, memberNameAdded);
-            memberNameAdded = writeAttributesToTable(table, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION, ndPa, member, memberNameAdded);
+            memberNameAdded = writeAttributesToTable(table,
+                CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__REGION, ndRa, member, memberNameAdded);
+            memberNameAdded =
+                writeAttributesToTable(table, CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__EVICTION,
+                    ndEa, member, memberNameAdded);
+            memberNameAdded = writeAttributesToTable(table,
+                CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE__PARTITION, ndPa, member,
+                memberNameAdded);
-            //Fix for #46767 
-            //writeAttributeToTable(table, "", "", "", "");
+            // Fix for #46767
+            // writeAttributeToTable(table, "", "", "", "");
-          table.setHeader(CliStrings.format(CliStrings.DESCRIBE_REGION__NONDEFAULT__PERMEMBERATTRIBUTES__HEADER, memberType));
+          table.setHeader(CliStrings.format(
+              CliStrings.DESCRIBE_REGION__NONDEFAULT__PERMEMBERATTRIBUTES__HEADER, memberType));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.DESCRIBE_REGION));
-    }
-    catch (Exception e) {
-      String errorMessage = CliStrings.format(CliStrings.EXCEPTION_CLASS_AND_MESSAGE, e.getClass().getName(), e.getMessage());
+      result = ResultBuilder.createGemFireErrorResult(CliStrings
+          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.DESCRIBE_REGION));
+    } catch (Exception e) {
+      String errorMessage = CliStrings.format(CliStrings.EXCEPTION_CLASS_AND_MESSAGE,
+          e.getClass().getName(), e.getMessage());
-  private void writeCommonAttributesToTable(TabularResultData table, String attributeType, Map<String, String> attributesMap) {
+  private void writeCommonAttributesToTable(TabularResultData table, String attributeType,
+      Map<String, String> attributesMap) {
-  private boolean writeFixedPartitionAttributesToTable(TabularResultData table, String attributeType,
-      List<FixedPartitionAttributesInfo> fpaList, String member, boolean isMemberNameAdded) {
+  private boolean writeFixedPartitionAttributesToTable(TabularResultData table,
+      String attributeType, List<FixedPartitionAttributesInfo> fpaList, String member,
+      boolean isMemberNameAdded) {
-  private boolean writeAttributesToTable(TabularResultData table, String attributeType, Map<String, String> attributesMap,
-      String member, boolean isMemberNameAdded) {
+  private boolean writeAttributesToTable(TabularResultData table, String attributeType,
+      Map<String, String> attributesMap, String member, boolean isMemberNameAdded) {
-        
+
-  
-  public void writeAttributeToTable(TabularResultData table, String member, String attributeType, String attributeName,
-      String attributeValue) {
-    
+
+  public void writeAttributeToTable(TabularResultData table, String member, String attributeType,
+      String attributeName, String attributeValue) {
+
-    //Tokenize the attributeValue
-    String[] attributeValues = attributeValue.split(",");
-    boolean isFirstValue = true;
-    
-    for (String value : attributeValues) {
-      if (isFirstValue) {
-        table.accumulate(CliStrings.DESCRIBE_REGION__MEMBER, member);
-        table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE, attributeType);
-        table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__NAME, attributeName);
-        table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__VALUE, value);
-        isFirstValue = false;
-      } else {
-        table.accumulate(CliStrings.DESCRIBE_REGION__MEMBER, blank);
-        table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE, blank);
-        table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__NAME, blank);
-        table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__VALUE, value);
+      // Tokenize the attributeValue
+      String[] attributeValues = attributeValue.split(",");
+      boolean isFirstValue = true;
+
+      for (String value : attributeValues) {
+        if (isFirstValue) {
+          table.accumulate(CliStrings.DESCRIBE_REGION__MEMBER, member);
+          table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE, attributeType);
+          table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__NAME, attributeName);
+          table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__VALUE, value);
+          isFirstValue = false;
+        } else {
+          table.accumulate(CliStrings.DESCRIBE_REGION__MEMBER, blank);
+          table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__TYPE, blank);
+          table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__NAME, blank);
+          table.accumulate(CliStrings.DESCRIBE_REGION__ATTRIBUTE__VALUE, value);
+        }
-   }
-  
-  
-  private void writeCommonAttributeToTable(TabularResultData table, String attributeType, String attributeName,
-      String attributeValue) {
+
+
+  private void writeCommonAttributeToTable(TabularResultData table, String attributeType,
+      String attributeName, String attributeValue) {
-    
+
-     
+
-  public void addChildSection(SectionResultData parentSection, Map<String, String> map, String header) {
+  public void addChildSection(SectionResultData parentSection, Map<String, String> map,
+      String header) {
-  @CliAvailabilityIndicator({ CliStrings.LIST_REGION, CliStrings.DESCRIBE_REGION })
+  @CliAvailabilityIndicator({CliStrings.LIST_REGION, CliStrings.DESCRIBE_REGION})
