GEODE-6529: Use EntryEventFactory instead of factory methods (#3334)

- rename previous EntryEventFactory as TxCallbackEventFactory
- create new EntryEventFactory for LocalRegion to use when
creating EntryEventImpl instances
- allows easier testing

Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Kirk Lund <klund@pivotal.io>

- * Implementation of {@link EntryEventFactory}
+ * Implementation of {@link TxCallbackEventFactory}
-public class EntryEventFactoryImpl implements EntryEventFactory {
+public class TxCallbackEventFactoryImpl implements TxCallbackEventFactory {
-      if (EntryEventFactoryImpl.logger.isTraceEnabled()) {
-        EntryEventFactoryImpl.logger.trace(
+      if (TxCallbackEventFactoryImpl.logger.isTraceEnabled()) {
+        TxCallbackEventFactoryImpl.logger.trace(
-            if (EntryEventFactoryImpl.logger.isTraceEnabled()) {
-              EntryEventFactoryImpl.logger
+            if (TxCallbackEventFactoryImpl.logger.isTraceEnabled()) {
+              TxCallbackEventFactoryImpl.logger
-        if (EntryEventFactoryImpl.logger.isTraceEnabled()) {
-          EntryEventFactoryImpl.logger.trace("createCBEvent computing routing for non-bucket");
+        if (TxCallbackEventFactoryImpl.logger.isTraceEnabled()) {
+          TxCallbackEventFactoryImpl.logger.trace("createCBEvent computing routing for non-bucket");
