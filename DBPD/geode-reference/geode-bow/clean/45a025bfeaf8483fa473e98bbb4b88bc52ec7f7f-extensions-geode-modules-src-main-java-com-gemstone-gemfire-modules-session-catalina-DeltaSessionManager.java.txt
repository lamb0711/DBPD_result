Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.Pipeline;
-import org.apache.catalina.util.LifecycleSupport;
-   * The <code>LifecycleSupport</code> for this component.
-   */
-  protected LifecycleSupport lifecycle = new LifecycleSupport(this);
-
-  /**
+  public void setMaxInactiveInterval(final int interval) {
+    super.setMaxInactiveInterval(interval);
+  }
+
+  @Override
-    return getContainer().getName().replace("/", "");
+    return getContextName().replace("/", "");
-    DeltaSession session = (DeltaSession) getSessionCache().getSession(id);
+    DeltaSessionInterface session = (DeltaSessionInterface) getSessionCache().getSession(id);
-        !getContainer().getName().equals(session.getContextName())) {
+        !getContextName().equals(session.getContextName())) {
-          getContainer().getName() + " != " + session.getContextName());
+          getContextName() + " != " + session.getContextName());
-        DeltaSession ds = (DeltaSession) session;
+        DeltaSessionInterface ds = (DeltaSessionInterface) session;
-    DeltaSession ds = (DeltaSession) session;
+    DeltaSessionInterface ds = (DeltaSessionInterface) session;
-    ContextMapper.addContext(getContainer().getName(), this);
+    ContextMapper.addContext(getContextName(), this);
-    ContextMapper.removeContext(getContainer().getName());
+    ContextMapper.removeContext(getContextName());
-    getContainer().getPipeline().addValve(jvmRouteBinderValve);
+    getPipeline().addValve(jvmRouteBinderValve);
+  }
+
+  protected Pipeline getPipeline() {
+    return getContainer().getPipeline();
-      getContainer().getPipeline().removeValve(jvmRouteBinderValve);
+      getPipeline().removeValve(jvmRouteBinderValve);
-    getContainer().getPipeline().addValve(commitSessionValve);
+    getPipeline().addValve(commitSessionValve);
-      getContainer().getPipeline().removeValve(commitSessionValve);
+      getPipeline().removeValve(commitSessionValve);
-   * Add a lifecycle event listener to this component.
-   *
-   * @param listener The listener to add
-   */
-  @Override
-  public void addLifecycleListener(LifecycleListener listener) {
-    this.lifecycle.addLifecycleListener(listener);
-  }
-
-  /**
-   * Get the lifecycle listeners associated with this lifecycle. If this Lifecycle has no listeners registered, a
-   * zero-length array is returned.
-   */
-  @Override
-  public LifecycleListener[] findLifecycleListeners() {
-    return this.lifecycle.findLifecycleListeners();
-  }
-
-  /**
-   * Remove a lifecycle event listener from this component.
-   *
-   * @param listener The listener to remove
-   */
-  @Override
-  public void removeLifecycleListener(LifecycleListener listener) {
-    this.lifecycle.removeLifecycleListener(listener);
-  }
-
-  /**
-    Context context;
-    if (getContainer() instanceof Context) {
-      context = (Context) getContainer();
-    } else {
-      getLogger().error("Unable to unload sessions - container is of type " +
-          getContainer().getClass().getName() + " instead of StandardContext");
+    Context context = getTheContext();
+    if (context == null) {
-    ArrayList<StandardSession> list = new ArrayList<StandardSession>();
+    ArrayList<DeltaSessionInterface> list = new ArrayList<DeltaSessionInterface>();
-      DeltaSession session = (DeltaSession) findSession(id);
+      DeltaSessionInterface session = (DeltaSessionInterface) findSession(id);
-      for (StandardSession session : list) {
-        session.passivate();
-        session.writeObjectData(oos);
+      for (DeltaSessionInterface session : list) {
+        if (session instanceof StandardSession) {
+          StandardSession standardSession = (StandardSession) session;
+          standardSession.passivate();
+          standardSession.writeObjectData(oos);
+        }
+        else {
+          //All DeltaSessionInterfaces as of Geode 1.0 should be based on StandardSession
+          throw new IOException("Session should be of type StandardSession");
+        }
-      for (StandardSession session : list) {
+      for (DeltaSessionInterface session : list) {
-    Context context;
-    if (getContainer() instanceof Context) {
-      context = (Context) getContainer();
-    } else {
-      getLogger().error("Unable to unload sessions - container is of type " +
-          getContainer().getClass().getName() + " instead of StandardContext");
+    Context context = getTheContext();
+    if (context == null) {
-      if (container != null) {
-        loader = container.getLoader();
+      if (getTheContext() != null) {
+        loader = getTheContext().getLoader();
-        DeltaSession existingSession = (DeltaSession) region.get(session.getId());
+        DeltaSessionInterface existingSession = (DeltaSessionInterface) region.get(session.getId());
-        .append(getContainer())
+        .append(getTheContext())
+
+  protected String getContextName() {
+    return getTheContext().getName();
+  }
+
+  public Context getTheContext() {
+    if (getContainer() instanceof Context) {
+      return  (Context) getContainer();
+    } else {
+      getLogger().error("Unable to unload sessions - container is of type " +
+                        getContainer().getClass().getName() + " instead of StandardContext");
+      return null;
+    }
+  }
