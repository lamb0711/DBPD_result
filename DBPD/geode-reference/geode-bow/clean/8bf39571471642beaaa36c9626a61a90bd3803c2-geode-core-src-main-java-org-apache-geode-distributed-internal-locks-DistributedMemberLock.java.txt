Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Distributed lock which is owned by a member rather than a single thread.
- * Any thread within the {@link 
- * org.apache.geode.distributed.DistributedMember} may unlock a held
+ * Distributed lock which is owned by a member rather than a single thread. Any thread within the
+ * {@link org.apache.geode.distributed.DistributedMember} may unlock a held
- * While this member holds the lock, another member will not be able to
- * acquire it. Any thread within this member may reenter or unlock the
- * lock.
+ * While this member holds the lock, another member will not be able to acquire it. Any thread
+ * within this member may reenter or unlock the lock.
- * Operations delegate to {@link 
- * org.apache.geode.distributed.DistributedLockService} and may throw
+ * Operations delegate to {@link org.apache.geode.distributed.DistributedLockService} and may throw
-  
+
-    
+
-    
+
-  
+
-  /** The lease in milliseconds to hold the lock*/
+  /** The lease in milliseconds to hold the lock */
-  
+
-  
+
+   * 
-  
+
+   * 
-   * @param leaseTimeout number of milliseconds to hold a lock before 
-   * automatically releasing it
+   * @param leaseTimeout number of milliseconds to hold a lock before automatically releasing it
-  public DistributedMemberLock(DistributedLockService dls, Serializable key, 
-  long leaseTimeout, LockReentryPolicy reentryPolicy) {
+  public DistributedMemberLock(DistributedLockService dls, Serializable key, long leaseTimeout,
+      LockReentryPolicy reentryPolicy) {
-    this.dls = (DLockService)dls;
+    this.dls = (DLockService) dls;
-    RemoteThread rThread = 
-      new RemoteThread(getDM().getId(), this.dls.incThreadSequence()); 
-    this.threadState = 
-        new ThreadRequestState(rThread.getThreadId(), true);
+    RemoteThread rThread = new RemoteThread(getDM().getId(), this.dls.incThreadSequence());
+    this.threadState = new ThreadRequestState(rThread.getThreadId(), true);
-        if (holdsLock() && 
-            reentryPolicy.preventReentry(DistributedMemberLock.this)) {
+        if (holdsLock() && reentryPolicy.preventReentry(DistributedMemberLock.this)) {
-  public synchronized void lockInterruptibly() 
-  throws InterruptedException {
+  public synchronized void lockInterruptibly() throws InterruptedException {
-        if (holdsLock() && 
-            reentryPolicy.preventReentry(DistributedMemberLock.this)) {
+        if (holdsLock() && reentryPolicy.preventReentry(DistributedMemberLock.this)) {
-        if (holdsLock() && 
-            reentryPolicy.preventReentry(DistributedMemberLock.this)) {
+        if (holdsLock() && reentryPolicy.preventReentry(DistributedMemberLock.this)) {
-  throws InterruptedException {
+      throws InterruptedException {
-        if (holdsLock() && 
-            reentryPolicy.preventReentry(DistributedMemberLock.this)) {
+        if (holdsLock() && reentryPolicy.preventReentry(DistributedMemberLock.this)) {
-        return dls.lockInterruptibly(
-            key, getLockTimeoutForLock(time, unit), leaseTimeout);
+        return dls.lockInterruptibly(key, getLockTimeoutForLock(time, unit), leaseTimeout);
-  
+
-  
-  private boolean executeOperationInterruptibly(Operation lockOp) 
-  throws InterruptedException {
+
+  private boolean executeOperationInterruptibly(Operation lockOp) throws InterruptedException {
-  
+
-      }
-      catch (InterruptedException e) {
+      } catch (InterruptedException e) {
-      }
-      finally {
+      } finally {
-  
-  private boolean doExecuteOperation(Operation lockOp, boolean interruptible) 
-  throws InterruptedException {
-    
-    ThreadRequestState oldThreadState = (ThreadRequestState) 
-      this.dls.getThreadRequestState().get();
-  
+
+  private boolean doExecuteOperation(Operation lockOp, boolean interruptible)
+      throws InterruptedException {
+
+    ThreadRequestState oldThreadState = (ThreadRequestState) this.dls.getThreadRequestState().get();
+
-    }
-    finally {
+    } finally {
-  
+
-  
+
-  
+
-    identity = identity.substring(identity.lastIndexOf(".")+1);
+    identity = identity.substring(identity.lastIndexOf(".") + 1);
-  
+
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedMemberLock_NOT_IMPLEMENTED.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedMemberLock_NOT_IMPLEMENTED.toLocalizedString());
