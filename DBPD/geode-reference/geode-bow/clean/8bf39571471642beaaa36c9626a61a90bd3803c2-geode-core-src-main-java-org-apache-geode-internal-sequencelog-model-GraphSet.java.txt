Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
-  public void addEdge(long timestamp, GraphType graphType,
-      String graphName, String edgeName, String state, String source, String dest) {
+
+  public void addEdge(long timestamp, GraphType graphType, String graphName, String edgeName,
+      String state, String source, String dest) {
-  private void addEdge(long timestamp, GraphType graphType,
-      String graphName, String edgeName, String state, String source, String dest, boolean isFromPattern) {
-    if(source == null) {
+  private void addEdge(long timestamp, GraphType graphType, String graphName, String edgeName,
+      String state, String source, String dest, boolean isFromPattern) {
+    if (source == null) {
-    if(dest == null) {
+    if (dest == null) {
-    if(graph == null) {
+    if (graph == null) {
-    if(timestamp < minTime) {
+    if (timestamp < minTime) {
-    if(timestamp > maxTime) {
+    if (timestamp > maxTime) {
-    
-    if(source != null) {
+
+    if (source != null) {
-    if(dest != null) {
+    if (dest != null) {
-    
-  }
-  
-  private void updateLocations(String location, long timestamp) {
-    Long time = locations.get(location);
-    if(time == null || time.longValue() > timestamp) {
-      locations.put(location, timestamp);
-    }
-    
+
-  public void addEdgePattern(long timestamp, GraphType graphType,
-      Pattern graphNamePattern, String edgeName, String state, String source,
-      String dest) {
-    edgePatterns.add(new EdgePattern(timestamp, graphType, graphNamePattern, edgeName, state, source, dest));
-    
+  private void updateLocations(String location, long timestamp) {
+    Long time = locations.get(location);
+    if (time == null || time.longValue() > timestamp) {
+      locations.put(location, timestamp);
+    }
+
-  
+
+  public void addEdgePattern(long timestamp, GraphType graphType, Pattern graphNamePattern,
+      String edgeName, String state, String source, String dest) {
+    edgePatterns.add(
+        new EdgePattern(timestamp, graphType, graphNamePattern, edgeName, state, source, dest));
+
+  }
+
-        if (edgePattern.graphNamePattern.matcher(graphId.getGraphName())
-            .matches() && edgePattern.graphType.equals(graphId.getType())) {
-          addEdge(edgePattern.timestamp, graphId.getType(),
-              graphId.getGraphName(), edgePattern.edgeName, edgePattern.state,
-              edgePattern.source, edgePattern.dest, true);
+        if (edgePattern.graphNamePattern.matcher(graphId.getGraphName()).matches()
+            && edgePattern.graphType.equals(graphId.getType())) {
+          addEdge(edgePattern.timestamp, graphId.getType(), graphId.getGraphName(),
+              edgePattern.edgeName, edgePattern.state, edgePattern.source, edgePattern.dest, true);
-  
+
-    Collections.<String>sort(result, new Comparator<String> () {
+    Collections.<String>sort(result, new Comparator<String>() {
-  
+
-    private final long timestamp; 
+    private final long timestamp;
-    private final  String source;
+    private final String source;
-    
-    public EdgePattern(long timestamp, GraphType graphType,
-        Pattern graphNamePattern, String edgeName, String state, String source,
-        String dest) {
+
+    public EdgePattern(long timestamp, GraphType graphType, Pattern graphNamePattern,
+        String edgeName, String state, String source, String dest) {
-      if(timeDifference != 0) {
+      if (timeDifference != 0) {
-        //don't really care about the order, but want to make them unique in the set.
+        // don't really care about the order, but want to make them unique in the set.
