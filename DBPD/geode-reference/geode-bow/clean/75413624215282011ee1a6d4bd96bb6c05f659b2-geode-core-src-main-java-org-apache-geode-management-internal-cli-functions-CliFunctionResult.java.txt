GEODE-5206: Add an 'ignoreFailure' flag to CliFunctionResult (#1957)

- The intention of this is to avoid needing to pass 'skip-if-exists' or
  'if-not-exists' flags to any command function. The function should set this
  flag if it determines that the construct it is dealing with either already
  exists or does not exist depending on the action. The calling command will
  then be able to use this information do display and set status appropriately.
- Collapse the state of successful and ignoreable into a single enum - OK,
  ERROR or IGNORED.
-  private boolean successful;
+  private StatusState state;
+
+  public enum StatusState {
+    OK, ERROR, IGNORED
+  }
-    this.successful = true;
+    this.state = StatusState.OK;
-    this.successful = true;
+    this.state = StatusState.OK;
-    this.successful = true;
+    this.state = StatusState.OK;
-    this.successful = true;
+    this.state = StatusState.OK;
-    this.successful = true;
+    this.state = StatusState.OK;
+  /**
+   * @deprecated Use {@code CliFunctionResult(String, StatusState, String)} instead
+   */
+  @Deprecated
+    this(memberIdOrName, successful ? StatusState.OK : StatusState.ERROR, message);
+  }
+
+  public CliFunctionResult(final String memberIdOrName, final StatusState state,
+      final String message) {
-    this.successful = successful;
+    this.state = state;
-      this.successful = false;
+      this.state = StatusState.ERROR;
-      this.successful = true;
+      this.state = StatusState.OK;
+    if (isIgnorableFailure()) {
+      return "IGNORED";
+    }
+
+    return isSuccessful() ? "OK" : "ERROR";
+  }
+
+  public String getStatusMessage() {
-    if (successful) {
+    if (isSuccessful()) {
+      return message;
+    }
+
+    String errorMessage = "";
+    if (message != null
+        && (resultObject == null || !((Throwable) resultObject).getMessage().contains(message))) {
+      errorMessage = message;
+    }
+
+    if (resultObject != null) {
+      errorMessage = errorMessage.trim() + " " + ((Throwable) resultObject).getClass().getName()
+          + ": " + ((Throwable) resultObject).getMessage();
+    }
+
+    return errorMessage;
+  }
+
+  /**
+   * This can be removed once all commands are using ResultModel.
+   */
+  @Deprecated
+  public String getLegacyStatus() {
+    String message = getMessage();
+
+    if (isSuccessful()) {
-    if (successful) {
+    if (isSuccessful()) {
+    toDataPre_GEODE_1_6_0_0(out);
+    DataSerializer.writeEnum(this.state, out);
+  }
+
+  public void toDataPre_GEODE_1_6_0_0(DataOutput out) throws IOException {
-    DataSerializer.writePrimitiveBoolean(this.successful, out);
+    DataSerializer.writePrimitiveBoolean(this.isSuccessful(), out);
+    fromDataPre_GEODE_1_6_0_0(in);
+    this.state = DataSerializer.readEnum(StatusState.class, in);
+  }
+
+  public void fromDataPre_GEODE_1_6_0_0(DataInput in) throws IOException, ClassNotFoundException {
-    this.successful = DataSerializer.readPrimitiveBoolean(in);
+    this.state = DataSerializer.readPrimitiveBoolean(in) ? StatusState.OK : StatusState.ERROR;
-    return this.successful;
+    return this.state == StatusState.OK;
+  }
+
+  public boolean isIgnorableFailure() {
+    return this.state == StatusState.IGNORED;
+  }
+
+  /**
+   * Use this to signal that an operation failed but it might be OK to ignore. This is intended to
+   * obviate the need to send a 'skip-if-exists' or 'if-not-exists' flag to any relevant function
+   * and allows the caller to now decide how to handle the result.
+   * <p/>
+   * An {@code IllegalStateException} will be thrown if the state of this {@code CliFunctionResult}
+   * is not already error.
+   */
+  public void setIgnorableFailure() {
+    if (isSuccessful()) {
+      throw new IllegalStateException("Cannot call setIgnorableFailure when state == OK");
+    }
+    this.state = StatusState.IGNORED;
-    return "CliFunctionResult [memberId=" + this.memberIdOrName + ", successful=" + this.successful
-        + ", xmlEntity=" + this.xmlEntity + ", serializables=" + Arrays.toString(this.serializables)
-        + ", throwable=" + this.resultObject + ", byteData=" + Arrays.toString(this.byteData) + "]";
+    return "CliFunctionResult [memberId=" + this.memberIdOrName + ", successful="
+        + this.isSuccessful() + ", xmlEntity=" + this.xmlEntity + ", serializables="
+        + Arrays.toString(this.serializables) + ", throwable=" + this.resultObject + ", byteData="
+        + Arrays.toString(this.byteData) + "]";
