Merge branch 'feature/GEODE-8' into develop

-    classesToSerializers.put("java.util.concurrent.TimeUnit",
-                             new WellKnownDS() {
-      @Override
-                               public final boolean toData(Object o, DataOutput out)
-                                 throws IOException {
-                                 TimeUnit unit = (TimeUnit) o;
-                                 out.writeByte(TIME_UNIT);
-                                 writeTimeUnit(unit, out);
-                                 return true;
-                               }});
+    classesToSerializers.put(TimeUnit.NANOSECONDS.getClass().getName(),
+        new WellKnownDS() {
+          @Override public final boolean toData(Object o, DataOutput out)
+            throws IOException {
+            out.writeByte(TIME_UNIT);
+            out.writeByte(TIME_UNIT_NANOSECONDS);
+            return true;
+          }});
+    classesToSerializers.put(TimeUnit.MICROSECONDS.getClass().getName(),
+        new WellKnownDS() {
+          @Override public final boolean toData(Object o, DataOutput out)
+            throws IOException {
+            out.writeByte(TIME_UNIT);
+            out.writeByte(TIME_UNIT_MICROSECONDS);
+            return true;
+          }});
+    classesToSerializers.put(TimeUnit.MILLISECONDS.getClass().getName(),
+        new WellKnownDS() {
+          @Override public final boolean toData(Object o, DataOutput out)
+            throws IOException {
+            out.writeByte(TIME_UNIT);
+            out.writeByte(TIME_UNIT_MILLISECONDS);
+            return true;
+          }});
+    classesToSerializers.put(TimeUnit.SECONDS.getClass().getName(),
+        new WellKnownDS() {
+          @Override public final boolean toData(Object o, DataOutput out)
+            throws IOException {
+            out.writeByte(TIME_UNIT);
+            out.writeByte(TIME_UNIT_SECONDS);
+            return true;
+          }});
-    } else if (is662SerializationEnabled() && o.getClass().isEnum()) {
+    } else if (is662SerializationEnabled() && (o.getClass().isEnum()
+        /* for bug 52271 */ || (o.getClass().getSuperclass() != null && o.getClass().getSuperclass().isEnum()))) {
-   * Writes a <code>TimeUnit</code> to a <code>DataOutput</code>.
-   *
-   * @throws IOException
-   *         A problem occurs while writing to <code>out</code>
-   *
-   * @see #readTimeUnit
-   */
-  public static void writeTimeUnit(TimeUnit unit, DataOutput out)
-    throws IOException {
-
-    InternalDataSerializer.checkOut(out);
-
-    if (logger.isTraceEnabled(LogMarker.SERIALIZER)) {
-      logger.trace(LogMarker.SERIALIZER, "Writing TimeUnit: {}", unit);
-    }
-
-    if (unit.equals(TimeUnit.NANOSECONDS)) {
-      out.writeByte(TIME_UNIT_NANOSECONDS);
-
-    } else if (unit.equals(TimeUnit.MICROSECONDS)) {
-      out.writeByte(TIME_UNIT_MICROSECONDS);
-
-    } else if (unit.equals(TimeUnit.MILLISECONDS)) {
-      out.writeByte(TIME_UNIT_MILLISECONDS);
-
-    } else if (unit.equals(TimeUnit.SECONDS)) {
-      out.writeByte(TIME_UNIT_SECONDS);
-
-    } else {
-      throw new InternalGemFireException(LocalizedStrings.DataSerializer_UNSUPPORTED_TIMEUNIT_0.toLocalizedString(unit));
-    }
-  }
-
-  /**
+      boolean wasDoNotCopy = false;
+      if (out instanceof HeapDataOutputStream) {
+        // To fix bug 52197 disable doNotCopy mode
+        // while serialize with an ObjectOutputStream.
+        // The problem is that ObjectOutputStream keeps
+        // an internal byte array that it reuses while serializing.
+        wasDoNotCopy = ((HeapDataOutputStream) out).setDoNotCopy(false);
+      }
+      try {
+      } finally {
+        if (wasDoNotCopy) {
+          ((HeapDataOutputStream) out).setDoNotCopy(true);
+        }
+      }
-      logger.fatal("exception in deserialization", ex);
-  /**
-   * Interface to implement if your class supports sending itself directly to a DataOutput
-   * during serialization.
-   * Note that you are responsable for sending all the bytes that represent your instance,
-   * even bytes describing your class name if those are required.
-   * 
-   * @author darrel
-   * @since 6.6
-   */
-  public static interface Sendable {
-    /**
-     * Take all the bytes in the object and write them to the data output. It needs
-     * to be written in the GemFire wire format so that it will deserialize correctly.
-     * 
-     * @param out
-     *          the data output to send this object to
-     * @throws IOException
-     */
-    void sendTo(DataOutput out) throws IOException;
-  }
-
