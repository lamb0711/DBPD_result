GEODE-6103 RegionCreateFunction takes RegionConfig in argument (#2998)

* reduce dependence on RegionFunctionArgs
* Also clean up CreateRegionCommand to achieve a clean separation between validations and calling RegionCreateFunction

Signed-off-by: Aditya Anchuri <aanchuri@pivotal.io>
Signed-off-by: Peter Tran <ptran@pivotal.io>
Signed-off-by: Ken Howe <khowe@pivotal.io>
+import org.apache.geode.cache.Declarable;
+import org.apache.geode.cache.configuration.RegionAttributesType;
+import org.apache.geode.internal.ClassPathLoader;
+  public static EvictionAttributesImpl fromConfig(
+      RegionAttributesType.EvictionAttributes configAttributes)
+      throws ClassCastException, InstantiationException,
+      IllegalAccessException {
+    EvictionAttributesImpl evictionAttributes = new EvictionAttributesImpl();
+    if (configAttributes.getLruHeapPercentage() != null) {
+      evictionAttributes.setAlgorithm(EvictionAlgorithm.LRU_HEAP);
+    } else if (configAttributes.getLruEntryCount() != null) {
+      evictionAttributes.setAlgorithm(EvictionAlgorithm.LRU_ENTRY);
+    } else if (configAttributes.getLruMemorySize() != null) {
+      evictionAttributes.setAlgorithm(EvictionAlgorithm.LRU_MEMORY);
+    } else {
+      evictionAttributes.setAlgorithm(EvictionAlgorithm.NONE);
+    }
+
+    String sizerClassName = null;
+    if (configAttributes.getLruHeapPercentage() != null) {
+      sizerClassName = configAttributes.getLruHeapPercentage().getClassName();
+    } else if (configAttributes.getLruMemorySize() != null) {
+      sizerClassName = configAttributes.getLruMemorySize().getClassName();
+    }
+
+    if (sizerClassName != null) {
+      ObjectSizer sizer;
+      try {
+        sizer = (ObjectSizer) ClassPathLoader.getLatest().forName(sizerClassName).newInstance();
+      } catch (ClassNotFoundException e) {
+        sizer = ObjectSizer.DEFAULT;
+      }
+      if (sizer != null && !(sizer instanceof Declarable)) {
+        throw new ClassCastException();
+      }
+      evictionAttributes.setObjectSizer(sizer);
+    }
+
+    if (configAttributes.getLruMemorySize() != null) {
+      evictionAttributes
+          .setMaximum(Integer.valueOf(configAttributes.getLruMemorySize().getMaximum()));
+    } else if (configAttributes.getLruEntryCount() != null) {
+      evictionAttributes
+          .setMaximum(Integer.valueOf(configAttributes.getLruEntryCount().getMaximum()));
+    } else {
+      evictionAttributes.setMaximum(0);
+    }
+
+    if (configAttributes.getLruMemorySize() != null) {
+      evictionAttributes
+          .setAction(EvictionAction.parseAction(configAttributes.getLruMemorySize().getAction()
+              .value()));
+    } else if (configAttributes.getLruEntryCount() != null) {
+      evictionAttributes
+          .setAction(EvictionAction.parseAction(configAttributes.getLruEntryCount().getAction()
+              .value()));
+    } else if (configAttributes.getLruHeapPercentage() != null) {
+      evictionAttributes
+          .setAction(EvictionAction.parseAction(configAttributes.getLruHeapPercentage().getAction()
+              .value()));
+    } else {
+      evictionAttributes.setAction(EvictionAction.NONE);
+    }
+
+    return evictionAttributes;
+  }
