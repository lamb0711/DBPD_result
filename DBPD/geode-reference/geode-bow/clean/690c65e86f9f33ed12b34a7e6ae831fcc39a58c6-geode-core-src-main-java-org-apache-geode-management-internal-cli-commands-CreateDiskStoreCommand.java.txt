GEODE-6749: Prevent gfsh from creating duplicate named disk stores (#3562)


+import java.util.Collections;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.cache.execute.Execution;
+import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.internal.cache.execute.AbstractExecution;
+import org.apache.geode.management.internal.cli.domain.DiskStoreDetails;
+import org.apache.geode.management.internal.cli.functions.ListDiskStoresFunction;
+    Pair<Boolean, String> validationResult =
+        validateDiskstoreAttributes(diskStoreAttributes, targetMembers);
+    if (validationResult.getLeft().equals(Boolean.FALSE)) {
+      return ResultModel.createError(validationResult.getRight());
+    }
+
+  @VisibleForTesting
+  Pair<Boolean, String> validateDiskstoreAttributes(
+      DiskStoreAttributes diskStoreAttributes,
+      Set<DistributedMember> targetMembers) {
+    List<DiskStoreDetails> currentDiskstores = getDiskStoreListing(targetMembers);
+
+    for (DiskStoreDetails detail : currentDiskstores) {
+      if (detail.getName().equals(diskStoreAttributes.getName())) {
+        return Pair.of(Boolean.FALSE,
+            String.format("Error: Disk store %s already exists", diskStoreAttributes.getName()));
+      }
+    }
+
+    return Pair.of(Boolean.TRUE, null);
+  }
+
+  @SuppressWarnings("unchecked")
+  List<DiskStoreDetails> getDiskStoreListing(Set<DistributedMember> members) {
+    final Execution membersFunctionExecutor = getMembersFunctionExecutor(members);
+    if (membersFunctionExecutor instanceof AbstractExecution) {
+      ((AbstractExecution) membersFunctionExecutor).setIgnoreDepartedMembers(true);
+    }
+
+    final ResultCollector<?, ?> resultCollector =
+        membersFunctionExecutor.execute(new ListDiskStoresFunction());
+
+    final List<?> results = (List<?>) resultCollector.getResult();
+    final List<DiskStoreDetails> distributedSystemMemberDiskStores =
+        new ArrayList<>(results.size());
+
+    for (final Object result : results) {
+      if (result instanceof Set) {
+        distributedSystemMemberDiskStores.addAll((Set<DiskStoreDetails>) result);
+      }
+    }
+
+    Collections.sort(distributedSystemMemberDiskStores);
+
+    return distributedSystemMemberDiskStores;
+  }
+
+
