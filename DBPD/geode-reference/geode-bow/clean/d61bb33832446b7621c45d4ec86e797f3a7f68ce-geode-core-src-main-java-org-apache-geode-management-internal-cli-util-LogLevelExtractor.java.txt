GEODE-2634: use log4j levels for auto-completion

* change the auto complete to use log4j levels.
* be able to handle both log4j levels and logwriter levels in the commands
* add validation of log level whenever possible for these commands
* Move the conversion between the two to a LogLevel class and add unit tests

+import org.apache.geode.internal.logging.log4j.LogLevel;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-      this.logLevel = LogLevelExtractor.getLevel(logLevel);
+      this.logLevel = LogLevel.resolveLevel(logLevel);
-
-  private static Map<String, Level> LEVELS = new HashMap<>();
-  static {
-    // put all the log4j levels in the map first
-    Arrays.stream(Level.values()).forEach(level -> {
-      LEVELS.put(level.name(), level);
-    });
-    // put all the other levels geode has been using and map them to log4j levels
-    LEVELS.put("SEVERE", Level.FATAL);
-    LEVELS.put("WARNING", Level.WARN);
-    LEVELS.put("CONFIG", Level.DEBUG);
-    LEVELS.put("FINE", Level.DEBUG);
-    LEVELS.put("FINER", Level.TRACE);
-    LEVELS.put("FINEST", Level.TRACE);
-  }
-
-  public static Level getLevel(String level) {
-    Level log4jLevel = LEVELS.get(level.toUpperCase());
-    // make sure any unrecognizable log level is assigned a most specific level
-    return log4jLevel == null ? Level.OFF : log4jLevel;
-  }
