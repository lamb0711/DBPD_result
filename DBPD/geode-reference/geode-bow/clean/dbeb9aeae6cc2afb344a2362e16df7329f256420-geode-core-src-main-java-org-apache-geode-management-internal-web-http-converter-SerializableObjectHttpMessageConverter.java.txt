Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The SerializableObjectHttpMessageConverter class is a Spring HttpMessageConverter for converting bytes streams to/from
- * Serializable Objects.
+ * The SerializableObjectHttpMessageConverter class is a Spring HttpMessageConverter for converting
+ * bytes streams to/from Serializable Objects.
+ * 
-public class SerializableObjectHttpMessageConverter extends AbstractHttpMessageConverter<Serializable> {
+public class SerializableObjectHttpMessageConverter
+    extends AbstractHttpMessageConverter<Serializable> {
-  @Override
-  public boolean canRead(final Class<?> clazz, final MediaType mediaType) {
-    return canRead(mediaType);
-  }
-  */
+   * @Override public boolean canRead(final Class<?> clazz, final MediaType mediaType) { return
+   * canRead(mediaType); }
+   */
-        new Throwable());
+          new Throwable());
-    logger.warn(String.format("%1$s.supports(%2$s)", getClass().getName(), type.getName()));
-    final StringWriter writer = new StringWriter();
-    new Throwable().printStackTrace(new PrintWriter(writer));
-    logger.warn(writer.toString());
-    */
+     * logger.warn(String.format("%1$s.supports(%2$s)", getClass().getName(), type.getName()));
+     * final StringWriter writer = new StringWriter(); new Throwable().printStackTrace(new
+     * PrintWriter(writer)); logger.warn(writer.toString());
+     */
-  protected Serializable readInternal(final Class<? extends Serializable> type, final HttpInputMessage inputMessage)
-    throws IOException, HttpMessageNotReadableException
-  {
+  protected Serializable readInternal(final Class<? extends Serializable> type,
+      final HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {
-        ObjectUtils.defaultIfNull(type.getClassLoader(), getClass().getClassLoader())));
-    }
-    catch (ClassNotFoundException e) {
-      throw new HttpMessageNotReadableException(String.format(
-        "Unable to convert the HTTP message body into an Object of type (%1$s)", type.getName()), e);
+          ObjectUtils.defaultIfNull(type.getClassLoader(), getClass().getClassLoader())));
+    } catch (ClassNotFoundException e) {
+      throw new HttpMessageNotReadableException(
+          String.format("Unable to convert the HTTP message body into an Object of type (%1$s)",
+              type.getName()),
+          e);
-  protected void writeInternal(final Serializable serializableObject, final HttpOutputMessage outputMessage)
-    throws IOException, HttpMessageNotWritableException
-  {
+  protected void writeInternal(final Serializable serializableObject,
+      final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {
