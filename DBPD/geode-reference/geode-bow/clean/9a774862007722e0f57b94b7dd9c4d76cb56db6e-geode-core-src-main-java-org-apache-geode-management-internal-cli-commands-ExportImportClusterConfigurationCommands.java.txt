GEODE-2369: Remove --dir option from export cluster-config

This closes #374

+import java.nio.file.Files;
+import java.nio.file.Path;
+
-      mandatory = true, help = CliStrings.EXPORT_SHARED_CONFIG__FILE__HELP) String zipFileName,
-
-      @CliOption(key = {CliStrings.EXPORT_SHARED_CONFIG__DIR},
-          help = CliStrings.EXPORT_SHARED_CONFIG__DIR__HELP) String dir) {
+      mandatory = true, help = CliStrings.EXPORT_SHARED_CONFIG__FILE__HELP) String zipFileName) {
+    Path tempDir;
+    try {
+      tempDir = Files.createTempDirectory("clusterConfig");
+    } catch (IOException e) {
+      logSevere(e);
+      ErrorResultData errorData =
+          ResultBuilder.createErrorResultData().addLine("Unable to create temp directory");
+      return ResultBuilder.buildResult(errorData);
+    }
+
+    File zipFile = tempDir.resolve("exportedCC.zip").toFile();
-    File zipFile = new File(zipFileName);
-    zipFile.getParentFile().mkdirs();
+
-          Map<String, String> paramValueMap = parseResult.getParamValueStrings();
-          String dir = paramValueMap.get(CliStrings.EXPORT_SHARED_CONFIG__DIR);
-          dir = (dir == null) ? null : dir.trim();
-
-          File saveDirFile = new File(".");
-
-          if (dir != null && !dir.isEmpty()) {
-            saveDirFile = new File(dir);
-            if (saveDirFile.exists()) {
-              if (!saveDirFile.isDirectory()) {
-                return ResultBuilder.createGemFireErrorResult(
-                    CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__NOT_A_DIRECTORY, dir));
-              }
-            } else if (!saveDirFile.mkdirs()) {
-              return ResultBuilder.createGemFireErrorResult(
-                  CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__CANNOT_CREATE_DIR, dir));
-            }
-          }
-          if (!saveDirFile.canWrite()) {
-            return ResultBuilder.createGemFireErrorResult(
-                CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__MSG__NOT_WRITEABLE,
-                    saveDirFile.getCanonicalPath()));
-          }
-          saveDirString = saveDirFile.getAbsolutePath();
-          commandResult.saveIncomingFiles(saveDirString);
+          commandResult.saveIncomingFiles(System.getProperty("user.dir"));
