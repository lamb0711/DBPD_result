Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/incubator-geode into develop

-import java.lang.reflect.Method;
+import org.apache.geode.GemFireIOException;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.security.shiro.CustomAuthRealm;
+import org.apache.geode.internal.security.shiro.GeodeAuthenticationToken;
+import org.apache.geode.internal.security.shiro.ShiroPrincipal;
+import org.apache.geode.internal.util.BlobHelper;
+import org.apache.geode.management.internal.security.ResourceConstants;
+import org.apache.geode.management.internal.security.ResourceOperation;
+import org.apache.geode.security.AuthenticationFailedException;
+import org.apache.geode.security.GemFireSecurityException;
+import org.apache.geode.security.NotAuthorizedException;
-import org.apache.geode.security.SecurableComponents;
-import org.apache.geode.GemFireIOException;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.ClassLoadUtil;
-import org.apache.geode.internal.cache.EntryEventImpl;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.security.shiro.CustomAuthRealm;
-import org.apache.geode.internal.security.shiro.GeodeAuthenticationToken;
-import org.apache.geode.internal.security.shiro.ShiroPrincipal;
-import org.apache.geode.internal.util.BlobHelper;
-import org.apache.geode.management.internal.security.ResourceConstants;
-import org.apache.geode.management.internal.security.ResourceOperation;
-import org.apache.geode.security.AuthenticationFailedException;
-import org.apache.geode.security.GemFireSecurityException;
-import org.apache.geode.security.NotAuthorizedException;
-
-  private boolean isJmxSecurityRequired;
-  private boolean isHttpSecurityRequired;
-  private boolean isGatewaySecurityRequired;
-  private boolean isClusterSecurityRequired;
-  private boolean isServerSecurityRequired;
-
-   * @param username
-   * @param password
-   * @return
-    String enabledComponentsString = securityProps.getProperty(SECURITY_ENABLED_COMPONENTS);
-    if (enabledComponentsString == null) {
-      enabledComponentsString = DistributionConfig.DEFAULT_SECURITY_ENABLED_COMPONENTS;
-    }
-
-    boolean isClusterSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.CLUSTER);
-    boolean isGatewaySecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.GATEWAY);
-    boolean isHttpSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.HTTP_SERVICE);
-    boolean isJmxSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.JMX);
-    boolean isServerSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.SERVER);
-
-      securityManager = getObjectOfTypeFromClassName(securityConfig, SecurityManager.class);
+      securityManager = SecurityService.getObjectOfTypeFromClassName(securityConfig, SecurityManager.class);
-    isServerSecurityRequired = isClientAuthenticator || (isIntegratedSecurity && isServerSecured);
-    isClusterSecurityRequired = isPeerAuthenticator || (isIntegratedSecurity && isClusterSecured);
-
-    isGatewaySecurityRequired = isClientAuthenticator || (isIntegratedSecurity && isGatewaySecured);
-    isHttpSecurityRequired = isIntegratedSecurity && isHttpSecured;
-    isJmxSecurityRequired = isIntegratedSecurity && isJmxSecured;
-
-      postProcessor = getObjectOfTypeFromClassName(customPostProcessor, PostProcessor.class);
+      postProcessor = SecurityService.getObjectOfTypeFromClassName(customPostProcessor, PostProcessor.class);
-  private static void checkSameClass(Object obj1, Object obj2){
-
-  }
-
-  /**
-   * this method would never return null, it either throws an exception or
-   * returns an object
-   */
-  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
-    Class actualClass = null;
-    try {
-      actualClass = ClassLoadUtil.classFromName(className);
-    }
-    catch (Exception ex) {
-      throw new GemFireSecurityException("Instance could not be obtained, "+ex.toString(), ex);
-    }
-
-    if(!expectedClazz.isAssignableFrom(actualClass)){
-      throw new GemFireSecurityException("Instance could not be obtained. Expecting a "+expectedClazz.getName()+" class.");
-    }
-
-    T actualObject = null;
-    try {
-      actualObject =  (T)actualClass.newInstance();
-    } catch (Exception e) {
-      throw new GemFireSecurityException("Instance could not be obtained. Error instantiating "+actualClass.getName(), e);
-    }
-    return actualObject;
-  }
-
-  /**
-   * this method would never return null, it either throws an exception or
-   * returns an object
-   */
-  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
-    T actualObject = null;
-    try {
-      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
-      actualObject = (T)factoryMethod.invoke(null, (Object[])null);
-    } catch (Exception e) {
-      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName, e);
-    }
-
-    if(actualObject == null){
-      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName);
-    }
-
-    return actualObject;
-  }
-
-  /**
-   * this method would never return null, it either throws an exception or
-   * returns an object
-   *
-   * @return an object of type expectedClazz. This method would never return
-   * null. It either returns an non-null object or throws exception.
-   */
-  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
-    T object = null;
-    try{
-      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
-    }
-    catch (Exception e){
-      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
-    }
-    return object;
-  }
-
-  public boolean isClientSecurityRequired() { // TODO: rename as isServerSecurityRequired
-    return isServerSecurityRequired;
+  public boolean isClientSecurityRequired() {
+    return isClientAuthenticator || isIntegratedSecurity;
-  public boolean isPeerSecurityRequired() { // TODO: rename as isClusterSecurityRequired
-    return isClusterSecurityRequired;
-  }
-
-  public boolean isJmxSecurityRequired() {
-    return isJmxSecurityRequired;
-  }
-
-  public boolean isGatewaySecurityRequired() {
-    return isGatewaySecurityRequired;
-  }
-
-  public boolean isHttpSecurityRequired() {
-    return isHttpSecurityRequired;
+  public boolean isPeerSecurityRequired() {
+    return isPeerAuthenticator || isIntegratedSecurity;
