GEODE-7186: Move HttpService implementation into its own module (#4040)

- For maven/gradle consumption, this component becomes an optional
  dependency.
- The CacheService.init() method now returns a boolean indicating
  whether the given service was initialized or not.
- Services are now created before cache creation resourcce events are
  emitted.
-import org.apache.geode.cache.internal.HttpService;
-import org.apache.geode.internal.net.SSLConfigurationFactory;
-import org.apache.geode.internal.security.SecurableCommunicationChannel;
-  private Optional<HttpService> httpService = Optional.ofNullable(null);
-
-      if (!this.isClient) {
-        if (systemConfig.getHttpServicePort() == 0) {
-          logger.info("HttpService is disabled with http-serivce-port = 0");
-          httpService = Optional.empty();
-        } else {
-          try {
-            httpService =
-                Optional.of(new InternalHttpService(systemConfig.getHttpServiceBindAddress(),
-                    systemConfig.getHttpServicePort(), SSLConfigurationFactory
-                        .getSSLConfigForComponent(systemConfig,
-                            SecurableCommunicationChannel.WEB)));
-          } catch (Throwable ex) {
-            logger.warn("Could not enable HttpService: {}", ex.getMessage());
-          }
-        }
-      }
-  public Optional<HttpService> getHttpService() {
-    return httpService;
-  }
-
-  @Override
-    // this starts up the ManagementService, register and federate the internal beans
+    initializeServices();
+
+    // This starts up the ManagementService, registers and federates the internal beans. Since it
+    // may be starting up web services, it relies on the prior step which would have started the
+    // HttpService.
-    initializeServices();
+    // Resource events, generated for started services. These events may depend on the prior
+    // CACHE_CREATE event which is why they are split out separately.
+    handleResourceEventsForCacheServices();
-      service.init(this);
-      services.put(service.getInterface(), service);
+      try {
+        if (service.init(this)) {
+          services.put(service.getInterface(), service);
+          logger.info("Initialized cache service {}", service.getClass().getName());
+        }
+      } catch (Exception ex) {
+        logger.warn("Cache service " + service.getClass().getName() + " failed to initialize", ex);
+      }
+    }
+  }
+
+  private void handleResourceEventsForCacheServices() {
+    for (CacheService service : services.values()) {
-      logger.info("Initialized cache service {}", service.getClass().getName());
-          httpService.ifPresent(HttpService::stop);
-
+  public <T extends CacheService> Optional<T> getOptionalService(Class<T> clazz) {
+    return Optional.ofNullable(getService(clazz));
+  }
+
+  @Override
