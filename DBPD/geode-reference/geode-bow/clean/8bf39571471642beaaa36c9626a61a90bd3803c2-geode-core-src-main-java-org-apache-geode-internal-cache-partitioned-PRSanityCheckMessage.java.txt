Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * PRSanityCheckMessage is used to assert correctness of prID assignments
- * across the distributed system.
+ * PRSanityCheckMessage is used to assert correctness of prID assignments across the distributed
+ * system.
-public final class PRSanityCheckMessage extends PartitionMessage
-{
-  
+public final class PRSanityCheckMessage extends PartitionMessage {
+
-  
+
-  
+
- /**
-   * Send a sanity check message and schedule a timer to send another one
-   * in gemfire.PRSanityCheckInterval (default 5000) milliseconds.  This can
-   * be enabled with gemfire.PRSanityCheckEnabled=true. 
+  /**
+   * Send a sanity check message and schedule a timer to send another one in
+   * gemfire.PRSanityCheckInterval (default 5000) milliseconds. This can be enabled with
+   * gemfire.PRSanityCheckEnabled=true.
-//      RegionAdvisor ra = pr.getRegionAdvisor();
-//      final Set recipients = ra.adviseAllPRNodes();
-      DistributedRegion prRoot = (DistributedRegion) PartitionedRegionHelper.getPRRoot(pr.getCache(), false);
+      // RegionAdvisor ra = pr.getRegionAdvisor();
+      // final Set recipients = ra.adviseAllPRNodes();
+      DistributedRegion prRoot =
+          (DistributedRegion) PartitionedRegionHelper.getPRRoot(pr.getCache(), false);
-      final PRSanityCheckMessage delayedInstance = new PRSanityCheckMessage(
-          recipients, pr.getPRId(), null, pr.getRegionIdentifier());
-      PRSanityCheckMessage instance = new PRSanityCheckMessage(recipients,
-          pr.getPRId(), null, pr.getRegionIdentifier());
+      final PRSanityCheckMessage delayedInstance =
+          new PRSanityCheckMessage(recipients, pr.getPRId(), null, pr.getRegionIdentifier());
+      PRSanityCheckMessage instance =
+          new PRSanityCheckMessage(recipients, pr.getPRId(), null, pr.getRegionIdentifier());
-      int sanityCheckInterval = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "PRSanityCheckInterval",
-                                                   5000).intValue();
+      int sanityCheckInterval = Integer
+          .getInteger(DistributionConfig.GEMFIRE_PREFIX + "PRSanityCheckInterval", 5000).intValue();
-            @Override
-              public void run2() {
-              try {
-                if (!pr.isLocallyDestroyed && !pr.isClosed && !pr.isDestroyed()) {
-                  dm.putOutgoing(delayedInstance);
-                }
+          @Override
+          public void run2() {
+            try {
+              if (!pr.isLocallyDestroyed && !pr.isClosed && !pr.isDestroyed()) {
+                dm.putOutgoing(delayedInstance);
-              catch (CancelException cce) {
-                // cache is closed - can't send the message
-              }
-              finally {
-                tm.cancel();
-              }
+            } catch (CancelException cce) {
+              // cache is closed - can't send the message
+            } finally {
+              tm.cancel();
-          };
+          }
+        };
-   * completely override process() from PartitionMessage.  This message doesn't
-   * operate on a specific partitioned region, so the superclass impl doesn't
-   * make any sense to it.
+   * completely override process() from PartitionMessage. This message doesn't operate on a specific
+   * partitioned region, so the superclass impl doesn't make any sense to it.
+   * 
-  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr, long startTime) throws CacheException, QueryException, ForceReattemptException, InterruptedException {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr,
+      long startTime)
+      throws CacheException, QueryException, ForceReattemptException, InterruptedException {
