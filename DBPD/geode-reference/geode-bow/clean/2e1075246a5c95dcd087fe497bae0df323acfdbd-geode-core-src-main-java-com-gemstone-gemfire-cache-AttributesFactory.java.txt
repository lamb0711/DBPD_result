Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.internal.cache.CustomEvictionAttributesImpl;
- * @since 3.0
+ * @since GemFire 3.0
-   * @since 6.5
+   * @since GemFire 6.5
-    this.regionAttributes.customEvictionAttributes = regionAttributes
-        .getCustomEvictionAttributes();
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.0
+   * @since GemFire 5.0
-  /**
-   * Set custom {@link EvictionCriteria} for the region with start time and
-   * frequency of evictor task to be run in milliseconds, or evict incoming rows
-   * in case both start and frequency are specified as zero.
-   * 
-   * @param criteria
-   *          an {@link EvictionCriteria} to be used for eviction for HDFS
-   *          persistent regions
-   * @param start
-   *          the start time at which periodic evictor task should be first
-   *          fired to apply the provided {@link EvictionCriteria}; if this is
-   *          zero then current time is used for the first invocation of evictor
-   * @param interval
-   *          the periodic frequency at which to run the evictor task after the
-   *          initial start; if this is if both start and frequency are zero
-   *          then {@link EvictionCriteria} is applied on incoming insert/update
-   *          to determine whether it is to be retained
-   */
-  public void setCustomEvictionAttributes(EvictionCriteria<K, V> criteria,
-      long start, long interval) {
-    this.regionAttributes.customEvictionAttributes =
-        new CustomEvictionAttributesImpl(criteria, start, interval,
-            start == 0 && interval == 0);
-    this.regionAttributes.setHasCustomEviction(true);
-  }
-
-   * @since 7.0
+   * @since GemFire 7.0
-   * @since 3.2
+   * @since GemFire 3.2
-   * @since 4.1
+   * @since GemFire 4.1
-   * @since 4.2.3
+   * @since GemFire 4.2.3
-   * @since 4.2.3
+   * @since GemFire 4.2.3
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 7.0
+   * @since GemFire 7.0
-   * @since 7.0
+   * @since GemFire 7.0
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 3.2
+   * @since GemFire 3.2
-   * @since 3.2
+   * @since GemFire 3.2
-   * @since 6.5 
+   * @since GemFire 6.5
-   * @since 6.5 
+   * @since GemFire 6.5
-   * @since 5.1
+   * @since GemFire 5.1
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.0
+   * @since GemFire 5.0
-      @since 5.0
+      @since GemFire 5.0
+   * Note: off-heap regions always behave as if cloning is enabled.
-   * @since 6.1
+   * @since GemFire 6.1
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 8.0
+   * @since GemFire 8.0
-   * @since 9.0
+   * @since Geode 1.0
-   * @since 5.0
+   * @since GemFire 5.0
-      // SQLFabric does not handle PRELOADED, so do not change the policy
-          && attrs.getScope().isDistributed()
-          && !GemFireCacheImpl.sqlfSystem()) {
+          && attrs.getScope().isDistributed()) {
-   * @since 3.5
+   * @since GemFire 3.5
-    if (attrs.getHDFSStoreName() != null) {
-      if (!attrs.getDataPolicy().withHDFS() && (attrs.getPartitionAttributes() == null || attrs.getPartitionAttributes().getLocalMaxMemory() != 0)) {
-        throw new IllegalStateException(LocalizedStrings.HDFSSTORE_IS_USED_IN_NONHDFS_REGION.toLocalizedString());        
-      }
-    }
-
-    transient CustomEvictionAttributes customEvictionAttributes;
-    String hdfsStoreName = null;
-    private boolean hdfsWriteOnly = false;
-      buf.append("; hdfsStoreName=").append(hdfsStoreName);
-      buf.append("; hdfsWriteOnly=").append(hdfsWriteOnly);
-     * {@inheritDoc}
-     */
-    @Override
-    public CustomEvictionAttributes getCustomEvictionAttributes() {
-      return this.customEvictionAttributes;
-    }
-
-    /**
-    public String getHDFSStoreName() {
-      return hdfsStoreName;
-    }
-    
-    @Override
-    public boolean getHDFSWriteOnly() {
-      return hdfsWriteOnly;
-    }
-
-    @Override
