Merge branch 'release/1.4.0'

+import static org.apache.geode.internal.DataSerializableFixedID.FINAL_CHECK_PASSED_MESSAGE;
-import org.apache.geode.CancelException;
-import org.apache.geode.GemFireConfigException;
-import org.apache.geode.SystemConnectException;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.DMStats;
-import org.apache.geode.distributed.internal.DistributionMessage;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.NetView;
-import org.apache.geode.distributed.internal.membership.gms.GMSMember;
-import org.apache.geode.distributed.internal.membership.gms.Services;
-import org.apache.geode.distributed.internal.membership.gms.interfaces.HealthMonitor;
-import org.apache.geode.distributed.internal.membership.gms.interfaces.MessageHandler;
-import org.apache.geode.distributed.internal.membership.gms.messages.HeartbeatMessage;
-import org.apache.geode.distributed.internal.membership.gms.messages.HeartbeatRequestMessage;
-import org.apache.geode.distributed.internal.membership.gms.messages.SuspectMembersMessage;
-import org.apache.geode.distributed.internal.membership.gms.messages.SuspectRequest;
-import org.apache.geode.internal.ConnectionWatcher;
-import org.apache.geode.internal.Version;
-import org.apache.geode.internal.net.SocketCreatorFactory;
-import org.apache.geode.internal.security.SecurableCommunicationChannel;
-import org.apache.logging.log4j.Logger;
-import org.jgroups.util.UUID;
-
+import org.apache.logging.log4j.Logger;
+import org.jgroups.util.UUID;
+
+import org.apache.geode.CancelException;
+import org.apache.geode.GemFireConfigException;
+import org.apache.geode.SystemConnectException;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.internal.DMStats;
+import org.apache.geode.distributed.internal.DistributionMessage;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.distributed.internal.membership.NetView;
+import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.Services;
+import org.apache.geode.distributed.internal.membership.gms.interfaces.HealthMonitor;
+import org.apache.geode.distributed.internal.membership.gms.interfaces.MessageHandler;
+import org.apache.geode.distributed.internal.membership.gms.messages.FinalCheckPassedMessage;
+import org.apache.geode.distributed.internal.membership.gms.messages.HeartbeatMessage;
+import org.apache.geode.distributed.internal.membership.gms.messages.HeartbeatRequestMessage;
+import org.apache.geode.distributed.internal.membership.gms.messages.SuspectMembersMessage;
+import org.apache.geode.distributed.internal.membership.gms.messages.SuspectRequest;
+import org.apache.geode.internal.ConnectionWatcher;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.net.SocketCreatorFactory;
+import org.apache.geode.internal.security.SecurableCommunicationChannel;
+
-  volatile private NetView currentView;
-  volatile private InternalDistributedMember nextNeighbor;
+  private volatile NetView currentView;
+  private volatile InternalDistributedMember nextNeighbor;
-  volatile private boolean isStopping = false;
+  private volatile boolean isStopping = false;
-  final private ConcurrentHashMap<InternalDistributedMember, NetView> suspectedMemberInView =
+  private final ConcurrentHashMap<InternalDistributedMember, NetView> suspectedMemberInView =
-  final private List<InternalDistributedMember> membersInFinalCheck =
+  private final List<InternalDistributedMember> membersInFinalCheck =
-  final private Map<Integer, Response> requestIdVsResponse = new ConcurrentHashMap<>();
+  private final Map<Integer, Response> requestIdVsResponse = new ConcurrentHashMap<>();
-  final private Map<NetView, Set<SuspectRequest>> viewVsSuspectedMembers = new HashMap<>();
+  private final Map<NetView, Set<SuspectRequest>> viewVsSuspectedMembers = new HashMap<>();
+        setNextNeighbor(currentView, null);
-   * 
+   *
-  private synchronized void setNextNeighbor(NetView newView, InternalDistributedMember nextTo) {
+  protected synchronized void setNextNeighbor(NetView newView, InternalDistributedMember nextTo) {
+    services.getMessenger().addHandler(FinalCheckPassedMessage.class, this);
-      InternalDistributedMember suspect, String reason) {}
+      InternalDistributedMember suspect, String reason) {
+    suspectedMemberInView.putIfAbsent(suspect, currentView);
+  }
+      case FINAL_CHECK_PASSED_MESSAGE:
+        contactedBy(((FinalCheckPassedMessage) m).getSuspect());
+        break;
-  private boolean inlineCheckIfAvailable(final InternalDistributedMember initiator,
+  protected boolean inlineCheckIfAvailable(final InternalDistributedMember initiator,
+    setNextNeighbor(currentView, mbr);
+
+
+        if (!isStopping && !initiator.equals(localAddress)
+            && initiator.getVersionObject().compareTo(Version.GEODE_130) >= 0) {
+          // let the sender know that it's okay to monitor this member again
+          FinalCheckPassedMessage message = new FinalCheckPassedMessage(initiator, mbr);
+          services.getMessenger().send(message);
+        }
+
+    } finally {
-    } finally {
+      setNextNeighbor(currentView, null);
