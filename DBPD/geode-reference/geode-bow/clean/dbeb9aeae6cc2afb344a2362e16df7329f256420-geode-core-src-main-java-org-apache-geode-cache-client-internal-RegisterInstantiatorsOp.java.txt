Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-   * Register a bunch of instantiators on a server
-   * using connections from the given pool
-   * to communicate with the server.
+   * Register a bunch of instantiators on a server using connections from the given pool to
+   * communicate with the server.
+   * 
-  public static void execute(ExecutablePool pool,
-                             Instantiator[] instantiators,
-                             EventID eventId)
-  {
+  public static void execute(ExecutablePool pool, Instantiator[] instantiators, EventID eventId) {
-   * Register a bunch of instantiators on a server using connections from the
-   * given pool to communicate with the server.
+   * Register a bunch of instantiators on a server using connections from the given pool to
+   * communicate with the server.
-   * @param pool
-   *          the pool to use to communicate with the server.
-   * @param holders
-   *          the {@link InstantiatorAttributesHolder}s containing info about
-   *          the instantiators to register
-   * @param eventId
-   *          the id of this event
+   * @param pool the pool to use to communicate with the server.
+   * @param holders the {@link InstantiatorAttributesHolder}s containing info about the
+   *        instantiators to register
+   * @param eventId the id of this event
-  public static void execute(ExecutablePool pool,
-      Object[] holders, EventID eventId) {
-    AbstractOp op = new RegisterInstantiatorsOpImpl(holders,
-        eventId);
+  public static void execute(ExecutablePool pool, Object[] holders, EventID eventId) {
+    AbstractOp op = new RegisterInstantiatorsOpImpl(holders, eventId);
-  
+
-    public RegisterInstantiatorsOpImpl(Instantiator[] instantiators,
-                                       EventID eventId) {
+    public RegisterInstantiatorsOpImpl(Instantiator[] instantiators, EventID eventId) {
-      for(int i = 0; i < instantiators.length; i++) {
+      for (int i = 0; i < instantiators.length; i++) {
-         // strip '.class' off these class names
+        // strip '.class' off these class names
-//     // // CALLBACK FOR TESTING PURPOSE ONLY ////
+      // // // CALLBACK FOR TESTING PURPOSE ONLY ////
-     * @throws org.apache.geode.SerializationException
-     *           if serialization fails
+     * @throws org.apache.geode.SerializationException if serialization fails
-    public RegisterInstantiatorsOpImpl(Object[] holders,
-        EventID eventId) {
+    public RegisterInstantiatorsOpImpl(Object[] holders, EventID eventId) {
-          instantiatorClassName = ((Instantiator)obj).getClass().getName();
-          instantiatedClassName = ((Instantiator)obj).getInstantiatedClass()
-              .getName();
-          id = ((Instantiator)obj).getId();
+          instantiatorClassName = ((Instantiator) obj).getClass().getName();
+          instantiatedClassName = ((Instantiator) obj).getInstantiatedClass().getName();
+          id = ((Instantiator) obj).getId();
-          instantiatorClassName = ((InstantiatorAttributesHolder)obj)
-              .getInstantiatorClassName();
-          instantiatedClassName = ((InstantiatorAttributesHolder)obj)
-              .getInstantiatedClassName();
-          id = ((InstantiatorAttributesHolder)obj).getId();
+          instantiatorClassName = ((InstantiatorAttributesHolder) obj).getInstantiatorClassName();
+          instantiatedClassName = ((InstantiatorAttributesHolder) obj).getInstantiatedClassName();
+          id = ((InstantiatorAttributesHolder) obj).getId();
-          getMessage().addBytesPart(
-              BlobHelper.serializeToBlob(instantiatorClassName));
-          getMessage().addBytesPart(
-              BlobHelper.serializeToBlob(instantiatedClassName));
+          getMessage().addBytesPart(BlobHelper.serializeToBlob(instantiatorClassName));
+          getMessage().addBytesPart(BlobHelper.serializeToBlob(instantiatedClassName));
+
+
+
+
+
-    protected void processSecureBytes(Connection cnx, Message message)
-        throws Exception {
-    }
+    protected void processSecureBytes(Connection cnx, Message message) throws Exception {}
+
+
