GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
- * <code>RegionFactory</code> is used to create {@link Region regions} in a {@link Cache cache}.
+ * {@code RegionFactory} is used to create {@link Region regions} in a {@link Cache cache}.
-
-  private final GemFireCacheImpl cache;
+  private final InternalCache cache;
-  protected RegionFactory(GemFireCacheImpl cache) {
+  protected RegionFactory(InternalCache cache) {
-  protected RegionFactory(GemFireCacheImpl cache, RegionShortcut pra) {
+  protected RegionFactory(InternalCache cache, RegionShortcut pra) {
-  protected RegionFactory(GemFireCacheImpl cache, RegionAttributes ra) {
+  protected RegionFactory(InternalCache cache, RegionAttributes ra) {
-  protected RegionFactory(GemFireCacheImpl cache, String regionAttributesId) {
+  protected RegionFactory(InternalCache cache, String regionAttributesId) {
-    this((GemFireCacheImpl) new CacheFactory().create());
+    this((InternalCache) new CacheFactory().create());
-    this((GemFireCacheImpl) new CacheFactory().create(), regionAttributes);
+    this((InternalCache) new CacheFactory().create(), regionAttributes);
-    this((GemFireCacheImpl) new CacheFactory().create(), regionAttributesId);
+    this((InternalCache) new CacheFactory().create(), regionAttributesId);
-   *        <code>DistributedSystem</code configuration
+   *        {@code DistributedSystem} configuration
-    this((GemFireCacheImpl) new CacheFactory(distributedSystemProperties).create());
+    this((InternalCache) new CacheFactory(distributedSystemProperties).create());
-    this((GemFireCacheImpl) new CacheFactory(distributedSystemProperties).create(),
-        regionAttributes);
+    this((InternalCache) new CacheFactory(distributedSystemProperties).create(), regionAttributes);
-    this((GemFireCacheImpl) new CacheFactory(distributedSystemProperties).create(),
+    this((InternalCache) new CacheFactory(distributedSystemProperties).create(),
-  private synchronized GemFireCacheImpl getCache() {
+  private synchronized InternalCache getCache() {
-   * Sets the cache loader for the next <code>RegionAttributes</code> created.
+   * Sets the cache loader for the next {@code RegionAttributes} created.
-   * Sets the cache writer for the next <code>RegionAttributes</code> created.
+   * Sets the cache writer for the next {@code RegionAttributes} created.
-   * @throws IllegalArgumentException if <code>aListener</code> is null
+   * @throws IllegalArgumentException if {@code aListener} is null
-   * <code>RegionAttributes</code> created.
+   * {@code RegionAttributes} created.
-   * @throws IllegalArgumentException if the <code>newListeners</code> array has a null element
+   * @throws IllegalArgumentException if the {@code newListeners} array has a null element
-   * <code>RegionAttributes</code> created. Note that the XML element that corresponds to this
-   * method "entry-idle-time", does not include "out" in its name.
+   * {@code RegionAttributes} created. Note that the XML element that corresponds to this method
+   * "entry-idle-time", does not include "out" in its name.
-   * Sets the custom idleTimeout for the next <code>RegionAttributes</code> created.
+   * Sets the custom idleTimeout for the next {@code RegionAttributes} created.
-   * <code>RegionAttributes</code> created.
+   * {@code RegionAttributes} created.
-   * Sets the custom timeToLive expiration method for the next <code>RegionAttributes</code>
-   * created.
+   * Sets the custom timeToLive expiration method for the next {@code RegionAttributes} created.
-   * <code>RegionAttributes</code> created. Note that the XML element that corresponds to this
-   * method "region-idle-time", does not include "out" in its name.
+   * {@code RegionAttributes} created. Note that the XML element that corresponds to this method
+   * "region-idle-time", does not include "out" in its name.
-   * <code>RegionAttributes</code> created.
+   * {@code RegionAttributes} created.
-   * Sets the scope for the next <code>RegionAttributes</code> created.
+   * Sets the scope for the next {@code RegionAttributes} created.
-   * Sets the data policy for the next <code>RegionAttributes</code> created.
+   * Sets the data policy for the next {@code RegionAttributes} created.
-   * If this attribute is set to <code>null</code> or <code>""</code> then the connection pool is
-   * disabled causing regions that use these attributes to be communicate with peers instead of
-   * servers.
+   * If this attribute is set to {@code null} or {@code ""} then the connection pool is disabled
+   * causing regions that use these attributes to be communicate with peers instead of servers.
-   * @param poolName the name of the connection pool to use; if <code>null</code> or <code>""</code>
-   *        then the connection pool attribute is disabled for regions using these attributes.
+   * @param poolName the name of the connection pool to use; if {@code null} or {@code ""} then the
+   *        connection pool attribute is disabled for regions using these attributes.
-   * Sets the key constraint for the next <code>RegionAttributes</code> created. Keys in the region
-   * will be constrained to this class (or subclass). Any attempt to store a key of an incompatible
-   * type in the region will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the key constraint for the next {@code RegionAttributes} created. Keys in the region will
+   * be constrained to this class (or subclass). Any attempt to store a key of an incompatible type
+   * in the region will cause a {@code ClassCastException} to be thrown.
-   * @throws IllegalArgumentException if <code>keyConstraint</code> is a class denoting a primitive
-   *         type
+   * @throws IllegalArgumentException if {@code keyConstraint} is a class denoting a primitive type
-   * Sets the value constraint for the next <code>RegionAttributes</code> created. Values in the
-   * region will be constrained to this class (or subclass). Any attempt to store a value of an
-   * incompatible type in the region will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the value constraint for the next {@code RegionAttributes} created. Values in the region
+   * will be constrained to this class (or subclass). Any attempt to store a value of an
+   * incompatible type in the region will cause a {@code ClassCastException} to be thrown.
-   * @throws IllegalArgumentException if <code>valueConstraint</code> is a class denoting a
-   *         primitive type
+   * @throws IllegalArgumentException if {@code valueConstraint} is a class denoting a primitive
+   *         type
-   * Sets the entry initial capacity for the next <code>RegionAttributes</code> created. This value
-   * is used in initializing the map that holds the entries.
+   * Sets the entry initial capacity for the next {@code RegionAttributes} created. This value is
+   * used in initializing the map that holds the entries.
-   * Sets the entry load factor for the next <code>RegionAttributes</code> created. This value is
-   * used in initializing the map that holds the entries.
+   * Sets the entry load factor for the next {@code RegionAttributes} created. This value is used in
+   * initializing the map that holds the entries.
-   * Sets the concurrency level tof the next <code>RegionAttributes</code> created. This value is
-   * used in initializing the map that holds the entries.
+   * Sets the concurrency level tof the next {@code RegionAttributes} created. This value is used in
+   * initializing the map that holds the entries.
-   * Sets the <code>PartitionAttributes</code> that describe how the region is partitioned among
-   * members of the distributed system.
+   * Sets the {@code PartitionAttributes} that describe how the region is partitioned among members
+   * of the distributed system.
-   * Sets the <code>MembershipAttributes</code> that describe the membership roles required for
-   * reliable access to the region.
+   * Sets the {@code MembershipAttributes} that describe the membership roles required for reliable
+   * access to the region.
+  @Deprecated
-   * @param cloningEnable
-   * @param gatewaySenderId
