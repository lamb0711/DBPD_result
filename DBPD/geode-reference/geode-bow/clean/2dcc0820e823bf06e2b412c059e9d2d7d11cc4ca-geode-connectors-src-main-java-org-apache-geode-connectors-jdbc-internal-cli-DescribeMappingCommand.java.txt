GEODE-5070: Use a random member for describe & list jdbc connector commands (#1849)

         Retrieves connections & mappings from CC(if running) 
         or from a random member(if CC not running)
+import java.util.Set;
-import org.apache.geode.management.cli.ConverterHint;
-  static final String DESCRIBE_MAPPING__HELP = "Describe the jdbc mapping in cluster configuration";
+  static final String DESCRIBE_MAPPING__HELP = "Describe the specified jdbc mapping";
-  static final String DESCRIBE_MAPPING_MEMBER__HELP =
-      "Member(s) from which the specified jdbc mapping is retrieved.";
-  public Result describeMapping(
-      @CliOption(key = DESCRIBE_MAPPING__REGION_NAME, mandatory = true,
-          help = DESCRIBE_MAPPING__REGION_NAME__HELP) String regionName,
-      @CliOption(key = {CliStrings.MEMBER}, optionContext = ConverterHint.MEMBERIDNAME,
-          help = DESCRIBE_MAPPING_MEMBER__HELP) String onMember) {
+  public Result describeMapping(@CliOption(key = DESCRIBE_MAPPING__REGION_NAME, mandatory = true,
+      help = DESCRIBE_MAPPING__REGION_NAME__HELP) String regionName) {
+    ConnectorService.RegionMapping mapping = null;
-    // when member is specified, we go to each member and describe what are on the members
-    if (onMember != null) {
-      DistributedMember member = getMember(onMember);
-      if (member == null) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      List<?> result =
-          (List<?>) executeFunction(new DescribeMappingFunction(), regionName, member).getResult();
-      ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) result.get(0);
-      CompositeResultData resultData = ResultBuilder.createCompositeResultData();
-      fillResultData(mapping, resultData);
-
-      return ResultBuilder.buildResult(resultData);
-    }
-
-    // otherwise, use cluster configuration to describe the connections
+    // check if CC is available and use it to describe the connection
-    if (ccService == null) {
-      return ResultBuilder.createInfoResult(
-          "cluster configuration service is not running. Use --member option to describe mappings on specific members.");
+    if (ccService != null) {
+      ConnectorService service =
+          ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
+      if (service != null) {
+        mapping = CacheElement.findElement(service.getRegionMapping(), regionName);
+      }
+    } else {
+      // otherwise get it from any member
+      Set<DistributedMember> members = findMembers(null, null);
+      if (members.size() > 0) {
+        DistributedMember targetMember = members.iterator().next();
+        List<?> result =
+            (List<?>) executeFunction(new DescribeMappingFunction(), regionName, targetMember)
+                .getResult();
+        if (!result.isEmpty()) {
+          mapping = (ConnectorService.RegionMapping) result.get(0);
+        }
+      }
-    // search for the connection that has this id to see if it exists
-    ConnectorService service =
-        ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
-    if (service == null) {
-      throw new EntityNotFoundException("mapping for region '" + regionName + "' not found");
-    }
-    ConnectorService.RegionMapping mapping =
-        CacheElement.findElement(service.getRegionMapping(), regionName);
+
