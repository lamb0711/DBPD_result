GEODE-8338: change redis commands not be repeated when a server dies (#5351)

The redis functions are no longer HA.
The product does have some cases when it can safely retry the function
but if a server dies the client will see a redis error containing "memberDeparted".
In that case the client app can check to see if the redis operation should be done
again, or if it already happened even though a server died.

Co-authored-by: Sarah Abbey <sabbey@vmware.com>
Co-authored-by: Darrel Schneider <darrel@vmware.com>
-import org.apache.geode.redis.internal.executor.CommandFunction;
+import org.apache.geode.redis.internal.executor.RedisCommandsFunctionInvoker;
-public class RedisStringCommandsFunctionInvoker implements RedisStringCommands {
-  private final Region<ByteArrayWrapper, RedisData> region;
+public class RedisStringCommandsFunctionInvoker extends RedisCommandsFunctionInvoker
+    implements RedisStringCommands {
-    this.region = region;
+    super(region);
-    return CommandFunction.invoke(APPEND, key, valueToAppend, region);
+    return invokeCommandFunction(key, APPEND, valueToAppend);
-    return CommandFunction.invoke(GET, key, null, region);
+    return invokeCommandFunction(key, GET);
-    return CommandFunction.invoke(SET, key, new Object[] {value, options}, region);
+    return invokeCommandFunction(key, SET, value, options);
-    return CommandFunction.invoke(INCR, key, null, region);
+    return invokeCommandFunction(key, INCR);
-    return CommandFunction.invoke(DECR, key, null, region);
+    return invokeCommandFunction(key, DECR);
-    return CommandFunction.invoke(GETSET, key, value, region);
+    return invokeCommandFunction(key, GETSET, value);
-    return CommandFunction.invoke(INCRBY, key, increment, region);
+    return invokeCommandFunction(key, INCRBY, increment);
-    return CommandFunction.invoke(DECRBY, key, decrement, region);
+    return invokeCommandFunction(key, DECRBY, decrement);
-    return CommandFunction.invoke(GETRANGE, key, new Object[] {start, end}, region);
+    return invokeCommandFunction(key, GETRANGE, start, end);
-    return CommandFunction.invoke(BITCOUNT, key, new Object[] {start, end}, region);
+    return invokeCommandFunction(key, BITCOUNT, start, end);
-    return CommandFunction.invoke(BITCOUNT, key, null, region);
+    return invokeCommandFunction(key, BITCOUNT);
-    return CommandFunction.invoke(STRLEN, key, null, region);
+    return invokeCommandFunction(key, STRLEN);
-    return CommandFunction.invoke(GETBIT, key, offset, region);
+    return invokeCommandFunction(key, GETBIT, offset);
-    return CommandFunction.invoke(SETBIT, key, new Object[] {offset, value}, region);
+    return invokeCommandFunction(key, SETBIT, offset, value);
-    return CommandFunction.invoke(INCRBYFLOAT, key, increment, region);
+    return invokeCommandFunction(key, INCRBYFLOAT, increment);
-    return CommandFunction.invoke(BITOP, destKey, new Object[] {operation, sources}, region);
+    return invokeCommandFunction(destKey, BITOP, operation, sources);
-    return CommandFunction.invoke(BITPOS, key, new Object[] {bit, start, end}, region);
+    return invokeCommandFunction(key, BITPOS, bit, start, end);
-    return CommandFunction.invoke(SETRANGE, key, new Object[] {offset, value}, region);
+    return invokeCommandFunction(key, SETRANGE, offset, value);
-    return CommandFunction.invoke(MGET, key, null, region);
+    return invokeCommandFunction(key, MGET);
