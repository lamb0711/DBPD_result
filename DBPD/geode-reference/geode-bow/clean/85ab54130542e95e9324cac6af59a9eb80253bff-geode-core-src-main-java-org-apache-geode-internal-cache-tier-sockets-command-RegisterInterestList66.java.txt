GEODE-8359 (#5371)

GEODE-8359: Code needed protection against the possibility of the null being returned.

There was also a fair amount of inconsistency between files that are very tightly related.

-import org.apache.geode.internal.cache.tier.CachedRegionHelper;
+import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;
-  public void cmdExecute(final Message clientMessage, final ServerConnection serverConnection,
-      final SecurityService securityService, long start) throws IOException, InterruptedException {
-    Part regionNamePart = null, keyPart = null;
-    String regionName = null;
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection,
+      SecurityService securityService, long start) throws IOException, InterruptedException {
+    Part regionNamePart;
+    String regionName;
-    List keys = null;
-    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
-    int numberOfKeys = 0, partNumber = 0;
+    List<Object> keys;
+    int numberOfKeys, partNumber;
-    // Retrieve the data from the message parts
-    boolean isDurable = false;
+    boolean isDurable;
-      keys = (List) list.getObject();
+      keys = (List<Object>) list.getObject();
-    boolean sendUpdatesAsInvalidates = false;
+    boolean sendUpdatesAsInvalidates;
+      return;
-    // key not null
-      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
-      if (authzRequest != null) {
+      AuthorizeRequest authorizeRequest = serverConnection.getAuthzRequest();
+      if (authorizeRequest != null) {
-              authzRequest.registerInterestListAuthorize(regionName, keys, policy);
-          keys = (List) registerContext.getKey();
+              authorizeRequest.registerInterestListAuthorize(regionName, keys, policy);
+          keys = (List<Object>) registerContext.getKey();
-    boolean isPrimary = serverConnection.getAcceptor().getCacheClientNotifier()
-        .getClientProxy(serverConnection.getProxyID()).isPrimary();
+    CacheClientProxy ccp = serverConnection.getAcceptor().getCacheClientNotifier()
+        .getClientProxy(serverConnection.getProxyID());
+
+    if (ccp == null) {
+      IOException ioException = new IOException(
+          "CacheClientProxy for this client is no longer on the server");
+      writeChunkedException(clientMessage, ioException, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
+      return;
+    }
+
+    boolean isPrimary = ccp.isPrimary();
+
-        // If an interrupted exception is thrown , rethrow it
-
-        // otherwise send the exception back to client
