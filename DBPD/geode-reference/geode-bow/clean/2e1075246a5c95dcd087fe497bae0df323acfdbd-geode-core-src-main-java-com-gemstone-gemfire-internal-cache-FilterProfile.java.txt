Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
- * @since 6.5
+ * @since GemFire 6.5
-    Set keysRegistered = new HashSet();
+    Set keysRegistered = new HashSet(keys);
-      Map<Object, Set> koi = updatesAsInvalidates?
-          getKeysOfInterestInv() : getKeysOfInterest();
-      Set interestList = koi.get(clientID);
+      Map<Object, Set> koi = updatesAsInvalidates?getKeysOfInterestInv():getKeysOfInterest();
+      CopyOnWriteHashSet interestList = (CopyOnWriteHashSet)koi.get(clientID);
+      } else {
+        // Get the list of keys that will be registered new, not already registered.
+        keysRegistered.removeAll(interestList.getSnapshot());
-      for (Object key: keys) { 
-        if (interestList.add(key)) { 
-          keysRegistered.add(key); 
-        } 
-      } 
+      interestList.addAll(keys);
+
-    Set keysUnregistered = new HashSet(); 
+    Set keysUnregistered = new HashSet(keys);
+    Set keysNotUnregistered = new HashSet(keys);
-      Set interestList = getKeysOfInterest().get(clientID);
+      CopyOnWriteHashSet interestList = (CopyOnWriteHashSet)getKeysOfInterest().get(clientID);
-        for (Iterator i = keys.iterator(); i.hasNext();) { 
-          Object keyOfInterest = i.next(); 
-          if (interestList.remove(keyOfInterest)) { 
-            keysUnregistered.add(keyOfInterest); 
-          } 
-        }       
+        // Get the list of keys that are not registered but in unregister set.
+        keysNotUnregistered.removeAll(interestList.getSnapshot());
+        interestList.removeAll(keys);
+
-      interestList = getKeysOfInterestInv().get(clientID);
+      interestList = (CopyOnWriteHashSet)getKeysOfInterestInv().get(clientID);
-        for (Iterator i = keys.iterator(); i.hasNext();) { 
-          Object keyOfInterest = i.next(); 
-          if (interestList.remove(keyOfInterest)) { 
-            keysUnregistered.add(keyOfInterest); 
-          } 
-        }       
+        keysNotUnregistered.removeAll(interestList.getSnapshot());
+        interestList.removeAll(keys);
+
+
+    // Get the keys that are not unregistered.
+    keysUnregistered.removeAll(keysNotUnregistered);
-          final EntryEventImpl ev = dpao.getEventForPosition(idx);
+          @Unretained final EntryEventImpl ev = dpao.getEventForPosition(idx);
-         final EntryEventImpl ev = op.getEventForPosition(idx);
+         @Unretained final EntryEventImpl ev = op.getEventForPosition(idx);
