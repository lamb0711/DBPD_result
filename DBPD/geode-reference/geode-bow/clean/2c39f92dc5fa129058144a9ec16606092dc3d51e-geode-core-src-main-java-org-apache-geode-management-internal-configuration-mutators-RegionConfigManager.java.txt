GEODE-6861: separate static config object from runtime info in the Clâ€¦ (#3754)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* use ConfigRealizer to retrieve the runtime information for configuration on each member
* list result would return a List of Response object which has a configuration object and a list runtime objects
* use existing object for runtime member info and move them to geode-management module.

-import java.util.ArrayList;
-import org.apache.geode.annotations.VisibleForTesting;
-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.management.DistributedRegionMXBean;
-import org.apache.geode.management.ManagementService;
-import org.apache.geode.management.configuration.RuntimeRegionConfig;
-public class RegionConfigManager
-    implements ConfigurationManager<RegionConfig, RuntimeRegionConfig> {
-  private InternalCache cache;
+public class RegionConfigManager implements ConfigurationManager<RegionConfig> {
-  @VisibleForTesting
-  RegionConfigManager() {}
-
-  public RegionConfigManager(InternalCache cache) {
-    this.cache = cache;
-  }
-
-  ManagementService getManagementService() {
-    return ManagementService.getExistingManagementService(cache);
-  }
+  public RegionConfigManager() {}
-  public List<RuntimeRegionConfig> list(RegionConfig filter, CacheConfig existing) {
-    List<RegionConfig> staticRegionConfigs;
+  public List<RegionConfig> list(RegionConfig filter, CacheConfig existing) {
+    List<RegionConfig> regionConfigs;
-      staticRegionConfigs = existing.getRegions();
+      regionConfigs = existing.getRegions();
-      staticRegionConfigs =
+      regionConfigs =
-    List<RuntimeRegionConfig> results = new ArrayList<>();
-    for (RegionConfig config : staticRegionConfigs) {
-      DistributedRegionMXBean distributedRegionMXBean =
-          getManagementService().getDistributedRegionMXBean("/" + config.getName());
-      long entryCount = 0;
-      if (distributedRegionMXBean != null) {
-        entryCount = distributedRegionMXBean.getSystemRegionEntryCount();
-      }
-      RuntimeRegionConfig runtimeConfig = new RuntimeRegionConfig(config);
-      runtimeConfig.setEntryCount(entryCount);
-      results.add(runtimeConfig);
-    }
-    return results;
+    return regionConfigs;
