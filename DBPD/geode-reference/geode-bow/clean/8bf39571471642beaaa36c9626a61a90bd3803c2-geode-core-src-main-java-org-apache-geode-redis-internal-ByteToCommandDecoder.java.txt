Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This is the first part of the channel pipeline for Netty. Here incoming
- * bytes are read and a created {@link Command} is sent down the pipeline.
- * It is unfortunate that this class is not {@link io.netty.channel.ChannelHandler.Sharable} because no state
- * is kept in this class. State is kept by {@link ByteToMessageDecoder}, it may
- * be worthwhile to look at a different decoder setup as to avoid allocating a decoder
- * for every new connection.
+ * This is the first part of the channel pipeline for Netty. Here incoming bytes are read and a
+ * created {@link Command} is sent down the pipeline. It is unfortunate that this class is not
+ * {@link io.netty.channel.ChannelHandler.Sharable} because no state is kept in this class. State is
+ * kept by {@link ByteToMessageDecoder}, it may be worthwhile to look at a different decoder setup
+ * as to avoid allocating a decoder for every new connection.
- * The code flow of the protocol parsing may not be exactly Java like, but this is done 
- * very intentionally. It was found that in cases where large Redis requests are sent
- * that end up being fragmented, throwing exceptions when the command could not be fully
- * parsed took up an enormous amount of cpu time. The simplicity of the Redis protocol
- * allows us to just back out and wait for more data, while exceptions are left to 
- * malformed requests which should never happen if using a proper Redis client.
+ * The code flow of the protocol parsing may not be exactly Java like, but this is done very
+ * intentionally. It was found that in cases where large Redis requests are sent that end up being
+ * fragmented, throwing exceptions when the command could not be fully parsed took up an enormous
+ * amount of cpu time. The simplicity of the Redis protocol allows us to just back out and wait for
+ * more data, while exceptions are left to malformed requests which should never happen if using a
+ * proper Redis client.
-   * Do not use '' <-- java primitive chars. Redis uses {@link Coder#CHARSET}
-   * encoding so we should not risk java handling char to byte conversions, rather 
-   * just hard code {@link Coder#CHARSET} chars as bytes
+   * Do not use '' <-- java primitive chars. Redis uses {@link Coder#CHARSET} encoding so we should
+   * not risk java handling char to byte conversions, rather just hard code {@link Coder#CHARSET}
+   * chars as bytes
-  
+
-  
-  public ByteToCommandDecoder() {
-  }
+
+  public ByteToCommandDecoder() {}
-      throw new RedisCommandParserException("Expected: " + (char) arrayID + " Actual: " + (char) firstB);
+      throw new RedisCommandParserException(
+          "Expected: " + (char) arrayID + " Actual: " + (char) firstB);
-  private boolean parseArray(ArrayList<byte[]> commandElems, ByteBuf buffer) throws RedisCommandParserException { 
+  private boolean parseArray(ArrayList<byte[]> commandElems, ByteBuf buffer)
+      throws RedisCommandParserException {
-        throw new RedisCommandParserException("expected: \'$\', got \'" + (char) currentChar + "\'");
+        throw new RedisCommandParserException(
+            "expected: \'$\', got \'" + (char) currentChar + "\'");
-      throw new RedisCommandParserException("invalid bulk length, cannot exceed max length of " + MAX_BULK_STRING_LENGTH);
+      throw new RedisCommandParserException(
+          "invalid bulk length, cannot exceed max length of " + MAX_BULK_STRING_LENGTH);
-   * Helper method that is called when the next characters are 
-   * supposed to be "\r\n"
+   * Helper method that is called when the next characters are supposed to be "\r\n"
-   * @throws RedisCommandParserException Thrown when the next two characters
-   * are not "\r\n"
+   * @throws RedisCommandParserException Thrown when the next two characters are not "\r\n"
-      throw new RedisCommandParserException("expected \'" + (char) rID + "\', got \'" + (char) b + "\'");
+      throw new RedisCommandParserException(
+          "expected \'" + (char) rID + "\', got \'" + (char) b + "\'");
-      throw new RedisCommandParserException("expected: \'" + (char) nID + "\', got \'" + (char) b + "\'");
+      throw new RedisCommandParserException(
+          "expected: \'" + (char) nID + "\', got \'" + (char) b + "\'");
