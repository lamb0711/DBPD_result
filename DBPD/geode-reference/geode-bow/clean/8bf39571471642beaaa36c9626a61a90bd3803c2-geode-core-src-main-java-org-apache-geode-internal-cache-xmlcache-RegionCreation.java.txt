Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-
- * Represents a {@link Region} that is created declaratively.  Notice
- * that it implements the {@link Region} interface so that this class
- * must be updated when {@link Region} is modified.  This class is
- * public for testing purposes.
+ * Represents a {@link Region} that is created declaratively. Notice that it implements the
+ * {@link Region} interface so that this class must be updated when {@link Region} is modified. This
+ * class is public for testing purposes.
-public class RegionCreation implements Region, Extensible<Region<?,?>> {
+public class RegionCreation implements Region, Extensible<Region<?, ?>> {
-//  /** An <code>AttributesFactory</code> for creating default
-//   * <code>RegionAttribute</code>s */
-//  private static final AttributesFactory defaultFactory =
-//    new AttributesFactory();
+  // /** An <code>AttributesFactory</code> for creating default
+  // * <code>RegionAttribute</code>s */
+  // private static final AttributesFactory defaultFactory =
+  // new AttributesFactory();
-  ///////////////////////  Instance Fields  ///////////////////////
+  /////////////////////// Instance Fields ///////////////////////
-  /** The id of the region-attributes this regions uses by default.
+  /**
+   * The id of the region-attributes this regions uses by default.
-   * @since GemFire 6.5 */
+   * @since GemFire 6.5
+   */
+   * 
-  /** List of IndexCreationData objects. A region can contain
-   * multiple indexes defined */
+  /**
+   * List of IndexCreationData objects. A region can contain multiple indexes defined
+   */
-  
+
-  private final SimpleExtensionPoint<Region<?, ?>> extensionPoint = new SimpleExtensionPoint<Region<?,?>>(this, this);
+  private final SimpleExtensionPoint<Region<?, ?>> extensionPoint =
+      new SimpleExtensionPoint<Region<?, ?>>(this, this);
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-   * Creates a new <code>RegionCreation</code> with the given name and
-   * with the default <code>RegionAttributes</code>.
+   * Creates a new <code>RegionCreation</code> with the given name and with the default
+   * <code>RegionAttributes</code>.
-  public RegionCreation(CacheCreation cache, RegionCreation parent,
-                        String name, String refid) {
+  public RegionCreation(CacheCreation cache, RegionCreation parent, String name, String refid) {
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-  public Object put(Object key, Object value)
-    throws TimeoutException, CacheWriterException
-  {
+  public Object put(Object key, Object value) throws TimeoutException, CacheWriterException {
-   * Fills in the state (that is, adds entries and creates subregions)
-   * of a given <code>Region</code> based on the description provided
-   * by this <code>RegionCreation</code>.
+   * Fills in the state (that is, adds entries and creates subregions) of a given
+   * <code>Region</code> based on the description provided by this <code>RegionCreation</code>.
-    throws TimeoutException, CacheWriterException,
-           RegionExistsException {
-    
-    for (Iterator iter = this.values.entrySet().iterator();
-         iter.hasNext(); ) {
+      throws TimeoutException, CacheWriterException, RegionExistsException {
+
+    for (Iterator iter = this.values.entrySet().iterator(); iter.hasNext();) {
-    
-    for (Iterator iter = this.subregions.values().iterator();
-         iter.hasNext(); ) {
+
+    for (Iterator iter = this.subregions.values().iterator(); iter.hasNext();) {
-   * Sets the mutable attributes of the given region based on the
-   * attributes of this <code>RegionCreation</code>.  This allows us
-   * to modify the attributes of an existing region using a cache.xml
-   * file.
+   * Sets the mutable attributes of the given region based on the attributes of this
+   * <code>RegionCreation</code>. This allows us to modify the attributes of an existing region
+   * using a cache.xml file.
-    
-    if(attrs.hasCloningEnabled()){
+
+    if (attrs.hasCloningEnabled()) {
-   * Creates a root {@link Region} in a given <code>Cache</code>
-   * based on the description provided by this
-   * <code>RegionCreation</code>.
+   * Creates a root {@link Region} in a given <code>Cache</code> based on the description provided
+   * by this <code>RegionCreation</code>.
-    throws TimeoutException, CacheWriterException,
-           RegionExistsException {
+      throws TimeoutException, CacheWriterException, RegionExistsException {
-      root = ((GemFireCacheImpl)cache).basicCreateRegion(this.name, new AttributesFactory(this.attrs).create());
+      root = ((GemFireCacheImpl) cache).basicCreateRegion(this.name,
+          new AttributesFactory(this.attrs).create());
-      //Region was concurrently destroyed.
-      cache.getLoggerI18n().warning(LocalizedStrings.RegionCreation_REGION_DESTROYED_DURING_INITIALIZATION, this.name);
-      //do nothing
+      // Region was concurrently destroyed.
+      cache.getLoggerI18n().warning(
+          LocalizedStrings.RegionCreation_REGION_DESTROYED_DURING_INITIALIZATION, this.name);
+      // do nothing
-    if(root != null) {
+    if (root != null) {
+
-   * Called by CacheXmlParser to add the IndexCreationData object
-   * to the list. It is called when functional element is encounetered
+   * Called by CacheXmlParser to add the IndexCreationData object to the list. It is called when
+   * functional element is encounetered
+   * 
-   * Creates a {@link Region} with the given parent using the
-   * description provided by this <code>RegionCreation</code>.
+   * Creates a {@link Region} with the given parent using the description provided by this
+   * <code>RegionCreation</code>.
-  void create(Region parent)
-    throws TimeoutException, CacheWriterException,
-           RegionExistsException {
+  void create(Region parent) throws TimeoutException, CacheWriterException, RegionExistsException {
-    }  catch (RegionDestroyedException ex) {
-      //Region was concurrently destroyed.
-      cache.getLoggerI18n().warning(LocalizedStrings.RegionCreation_REGION_DESTROYED_DURING_INITIALIZATION, this.name);
-      //do nothing
+    } catch (RegionDestroyedException ex) {
+      // Region was concurrently destroyed.
+      cache.getLoggerI18n().warning(
+          LocalizedStrings.RegionCreation_REGION_DESTROYED_DURING_INITIALIZATION, this.name);
+      // do nothing
-    if(me != null) {
+    if (me != null) {
-   * Returns whether or not this <code>RegionCreation</code> is
-   * equivalent to another <code>Region</code>.
+   * Returns whether or not this <code>RegionCreation</code> is equivalent to another
+   * <code>Region</code>.
-      throw new RuntimeException(LocalizedStrings.RegionCreation_REGION_NAMES_DIFFER_THIS_0_OTHER_1.toLocalizedString(new Object[] {this.getName(), other.getName()}));
+      throw new RuntimeException(LocalizedStrings.RegionCreation_REGION_NAMES_DIFFER_THIS_0_OTHER_1
+          .toLocalizedString(new Object[] {this.getName(), other.getName()}));
-      throw new RuntimeException(LocalizedStrings.RegionCreation_REGION_ATTRIBUTES_DIFFER_THIS_0_OTHER_1.toLocalizedString(new Object[] {this.attrs, other.getAttributes()}));
+      throw new RuntimeException(
+          LocalizedStrings.RegionCreation_REGION_ATTRIBUTES_DIFFER_THIS_0_OTHER_1
+              .toLocalizedString(new Object[] {this.attrs, other.getAttributes()}));
-    Collection otherEntries = ((LocalRegion)other).basicEntries(false);
+    Collection otherEntries = ((LocalRegion) other).basicEntries(false);
-    for (Iterator iter = myEntries.iterator(); iter.hasNext(); ) {
+    for (Iterator iter = myEntries.iterator(); iter.hasNext();) {
-    if (attrs.getPartitionAttributes() != null
-        && attrs.getEvictionAttributes() != null
+    if (attrs.getPartitionAttributes() != null && attrs.getEvictionAttributes() != null
-        && attrs.getPartitionAttributes().getLocalMaxMemory() != 0
-        && attrs.getEvictionAttributes().getMaximum() != attrs
-            .getPartitionAttributes().getLocalMaxMemory()) {
-      getCache().getLoggerI18n().warning(
-          LocalizedStrings.Mem_LRU_Eviction_Attribute_Reset,
-          new Object[] { this.getName(),
-              attrs.getEvictionAttributes().getMaximum(),
-              attrs.getPartitionAttributes().getLocalMaxMemory() });
-      this.attrs.setEvictionAttributes(attrs.getEvictionAttributes()
-          .createLRUMemoryAttributes(
-              attrs.getPartitionAttributes().getLocalMaxMemory(),
-              attrs.getEvictionAttributes().getObjectSizer(),
-              attrs.getEvictionAttributes().getAction()));
+        && attrs.getPartitionAttributes().getLocalMaxMemory() != 0 && attrs.getEvictionAttributes()
+            .getMaximum() != attrs.getPartitionAttributes().getLocalMaxMemory()) {
+      getCache().getLoggerI18n().warning(LocalizedStrings.Mem_LRU_Eviction_Attribute_Reset,
+          new Object[] {this.getName(), attrs.getEvictionAttributes().getMaximum(),
+              attrs.getPartitionAttributes().getLocalMaxMemory()});
+      this.attrs.setEvictionAttributes(attrs.getEvictionAttributes().createLRUMemoryAttributes(
+          attrs.getPartitionAttributes().getLocalMaxMemory(),
+          attrs.getEvictionAttributes().getObjectSizer(),
+          attrs.getEvictionAttributes().getAction()));
-  public Region getSubregion(String regionName){
+  public Region getSubregion(String regionName) {
-   * @throws RegionExistsException
-   *         If a subregion with <code>name</code> already exists
+   * @throws RegionExistsException If a subregion with <code>name</code> already exists
-  void addSubregion(String name, RegionCreation region)
-    throws RegionExistsException {
-    
+  void addSubregion(String name, RegionCreation region) throws RegionExistsException {
+
-      RegionCreation existing =
-        (RegionCreation) this.subregions.get(name);
+      RegionCreation existing = (RegionCreation) this.subregions.get(name);
-      throw new UnsupportedOperationException(LocalizedStrings.RegionCreation_GETTING_SUBREGIONS_RECURSIVELY_IS_NOT_SUPPORTED.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.RegionCreation_GETTING_SUBREGIONS_RECURSIVELY_IS_NOT_SUPPORTED
+              .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.RegionCreation_WRITING_A_REGIONCREATION_TO_DISK_IS_NOT_SUPPORTED.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.RegionCreation_WRITING_A_REGIONCREATION_TO_DISK_IS_NOT_SUPPORTED
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
+
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
-  public void registerInterest(Object key, boolean isDurable,
-      boolean receiveValues) throws CacheWriterException {
+
+  public void registerInterest(Object key, boolean isDurable, boolean receiveValues)
+      throws CacheWriterException {
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
+
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
-  public void registerInterestRegex(String regex, boolean isDurable,
+
+  public void registerInterestRegex(String regex, boolean isDurable, boolean receiveValues)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  }
+
+  public void registerInterest(Object key, InterestResultPolicy policy)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  }
+
+  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  }
+
+  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable,
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  }
-
-  public void registerInterest(Object key, InterestResultPolicy policy) throws CacheWriterException {
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  }
-  
-  public void registerInterest(Object key, InterestResultPolicy policy, boolean isDurable) throws CacheWriterException {
-    throw new UnsupportedOperationException(
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  }
-  
-  public void registerInterest(Object key, InterestResultPolicy policy,
-      boolean isDurable, boolean receiveValues) throws CacheWriterException {
-    throw new UnsupportedOperationException(
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterestRegex(String regex, InterestResultPolicy policy) throws CacheWriterException {
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  public void registerInterestRegex(String regex, InterestResultPolicy policy)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable) throws CacheWriterException {
+  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable)
+      throws CacheWriterException {
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
-  public void registerInterestRegex(String regex, InterestResultPolicy policy,
-      boolean isDurable, boolean receiveValues) throws CacheWriterException {
+
+  public void registerInterestRegex(String regex, InterestResultPolicy policy, boolean isDurable,
+      boolean receiveValues) throws CacheWriterException {
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
+
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  
+
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-      LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    
+
-  
+
-      throw new UnsupportedOperationException(LocalizedStrings.RegionCreation_GETTING_ENTRIES_RECURSIVELY_IS_NOT_SUPPORTED.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.RegionCreation_GETTING_ENTRIES_RECURSIVELY_IS_NOT_SUPPORTED
+              .toLocalizedString());
-    for (Iterator iter = this.values.entrySet().iterator();
-         iter.hasNext(); ) {
+    for (Iterator iter = this.values.entrySet().iterator(); iter.hasNext();) {
-  //////////  Inherited methods that don't do anything  //////////
+  ////////// Inherited methods that don't do anything //////////
-  public AttributesMutator getAttributesMutator(){
+  public AttributesMutator getAttributesMutator() {
-  public CacheStatistics getStatistics(){
+  public CacheStatistics getStatistics() {
-  public void invalidateRegion() throws TimeoutException{
+  public void invalidateRegion() throws TimeoutException {
-  public void invalidateRegion(Object aCallbackArgument)
-    throws TimeoutException {
-      throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  public void invalidateRegion(Object aCallbackArgument) throws TimeoutException {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  public void localInvalidateRegion(){
+  public void localInvalidateRegion() {
-  public void destroyRegion()
-    throws CacheWriterException, TimeoutException {
+  public void destroyRegion() throws CacheWriterException, TimeoutException {
-    throws CacheWriterException, TimeoutException {
+      throws CacheWriterException, TimeoutException {
-  public void localDestroyRegion(){
+  public void localDestroyRegion() {
-  public void localDestroyRegion(Object aCallbackArgument){
+  public void localDestroyRegion(Object aCallbackArgument) {
-  public Region createSubregion(String subregionName,
-                                RegionAttributes attrs)
-    throws RegionExistsException, TimeoutException {
-    RegionCreation subregion =
-      new RegionCreation(this.cache, this, subregionName, null);
+  public Region createSubregion(String subregionName, RegionAttributes attrs)
+      throws RegionExistsException, TimeoutException {
+    RegionCreation subregion = new RegionCreation(this.cache, this, subregionName, null);
-  public Object get(Object key)
-    throws CacheLoaderException, TimeoutException {
+  public Object get(Object key) throws CacheLoaderException, TimeoutException {
-    throws TimeoutException, CacheLoaderException {
+      throws TimeoutException, CacheLoaderException {
-    throws TimeoutException, CacheWriterException
-  {
+      throws TimeoutException, CacheWriterException {
-    throws TimeoutException, EntryExistsException,
-    CacheWriterException {
+      throws TimeoutException, EntryExistsException, CacheWriterException {
-  public void create(Object key, Object value,
-                     Object aCacheWriterParam)
-    throws TimeoutException, EntryExistsException,
-    CacheWriterException {
+  public void create(Object key, Object value, Object aCacheWriterParam)
+      throws TimeoutException, EntryExistsException, CacheWriterException {
-  public void invalidate(Object key)
-    throws TimeoutException, EntryNotFoundException {
+  public void invalidate(Object key) throws TimeoutException, EntryNotFoundException {
-    throws TimeoutException, EntryNotFoundException {
+      throws TimeoutException, EntryNotFoundException {
-  public void localInvalidate(Object key)
-    throws EntryNotFoundException {
+  public void localInvalidate(Object key) throws EntryNotFoundException {
-  public void localInvalidate(Object key,Object callbackArgument)
-    throws EntryNotFoundException {
+  public void localInvalidate(Object key, Object callbackArgument) throws EntryNotFoundException {
-    throws TimeoutException, EntryNotFoundException,
-    CacheWriterException {
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
-    throws TimeoutException, EntryNotFoundException,
-    CacheWriterException {
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
-  public void localDestroy(Object key,Object callbackArgument)
-    throws EntryNotFoundException {
+  public void localDestroy(Object key, Object callbackArgument) throws EntryNotFoundException {
-  throws IOException, ClassNotFoundException, CacheWriterException, TimeoutException {
+      throws IOException, ClassNotFoundException, CacheWriterException, TimeoutException {
+
+
+
-    
+
+
+
+
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString()); 
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString()); 
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+
+
+
+
- 
+
-      throw new UnsupportedOperationException(LocalizedStrings.RegionCreation_GETTING_ENTRIES_RECURSIVELY_IS_NOT_SUPPORTED.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.RegionCreation_GETTING_ENTRIES_RECURSIVELY_IS_NOT_SUPPORTED
+              .toLocalizedString());
-    for (Iterator iter = this.values.entrySet().iterator();
-         iter.hasNext(); ) {
+    for (Iterator iter = this.values.entrySet().iterator(); iter.hasNext();) {
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());    
-  }    
-  
-  public void forceRolling(){
-  
-  public boolean forceCompaction(){
+
+  public void forceRolling() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  public boolean forceCompaction() {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see java.util.concurrent.ConcurrentMap#replace(java.lang.Object, java.lang.Object, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see java.util.concurrent.ConcurrentMap#replace(java.lang.Object, java.lang.Object,
+   * java.lang.Object)
+
-  
+
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString()); 
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString()); 
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  
+
