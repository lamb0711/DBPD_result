Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Encapsulates a {@link org.apache.geode.cache.operations.OperationContext.OperationCode#PUTALL} operation for both the
- * pre-operation and post-operation cases.
+ * Encapsulates a {@link org.apache.geode.cache.operations.OperationContext.OperationCode#PUTALL}
+ * operation for both the pre-operation and post-operation cases.
-  
+
-  
+
-   * Return the operation associated with the <code>OperationContext</code>
-   * object.
+   * Return the operation associated with the <code>OperationContext</code> object.
-   * Returns the map whose keys and values will be put.
-   * Note that only the values of this map can be changed.
-   * You can not add or remove keys.
-   * Any attempt to modify the returned map with an operation
-   * that is not supported will throw an UnsupportedOperationException.
-   * If the returned map is modified and this is a pre-operation
-   * authorization then the modified map is what will be used by the operation.
+   * Returns the map whose keys and values will be put. Note that only the values of this map can be
+   * changed. You can not add or remove keys. Any attempt to modify the returned map with an
+   * operation that is not supported will throw an UnsupportedOperationException. If the returned
+   * map is modified and this is a pre-operation authorization then the modified map is what will be
+   * used by the operation.
-  public <K,V> Map<K,V> getMap() {
+  public <K, V> Map<K, V> getMap() {
-   * @throws IllegalArgumentException if the given map is null or if its keys are not the same as the original keys.
+   * 
+   * @throws IllegalArgumentException if the given map is null or if its keys are not the same as
+   *         the original keys.
-      throw new IllegalArgumentException("PutAllOperationContext.setMap does not allow a null map.");
+      throw new IllegalArgumentException(
+          "PutAllOperationContext.setMap does not allow a null map.");
-      throw new IllegalArgumentException("PutAllOperationContext.setMap does not allow the size of the map to be changed.");
+      throw new IllegalArgumentException(
+          "PutAllOperationContext.setMap does not allow the size of the map to be changed.");
-    // So take each entry from the input "map" and update the corresponding entry in the linked "this.map".
+    // So take each entry from the input "map" and update the corresponding entry in the linked
+    // "this.map".
-      throw new IllegalArgumentException("PutAllOperationContext.setMap " + ex.getMessage() + " to the original keys of the putAll");
+      throw new IllegalArgumentException("PutAllOperationContext.setMap " + ex.getMessage()
+          + " to the original keys of the putAll");
-   * @param callbackArg
-   *                the callback argument object for this operation.
+   * @param callbackArg the callback argument object for this operation.
