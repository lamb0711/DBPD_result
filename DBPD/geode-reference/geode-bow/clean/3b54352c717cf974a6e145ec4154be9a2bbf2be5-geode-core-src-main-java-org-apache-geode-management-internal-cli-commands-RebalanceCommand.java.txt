GEODE-5971: refactor RebalanceCommand to use ResultModel (#3303)



+import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.result.CompositeResultData;
-import org.apache.geode.management.internal.cli.result.ErrorResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class RebalanceCommand extends InternalGfshCommand {
+public class RebalanceCommand extends GfshCommand {
-  public Result rebalance(
+  public ResultModel rebalance(
-    List<Future<Result>> commandResult = new ArrayList<>();
-    Result result;
+    List<Future<ResultModel>> commandResult = new ArrayList<>();
+    ResultModel result;
-      Future<Result> fs = commandResult.get(0);
+      Future<ResultModel> fs = commandResult.get(0);
-      result = ResultBuilder.createInfoResult(CliStrings.REBALANCE__MSG__REBALANCE_WILL_CONTINUE);
+      result = ResultModel.createInfo(CliStrings.REBALANCE__MSG__REBALANCE_WILL_CONTINUE);
-    LogWrapper.getInstance(getCache()).info("Rebalance returning result >>>" + result);
+
+    // if the result contains only error section, i.e. no rebalance operation is done, mark this
+    // command result to be error. This would happy if user hasn't specified any valid region. If
+    // only one region specified is valid and rebalance is done, the result would be marked as
+    // success.
+    if (result.getSection("error") != null && result.getSectionSize() == 1) {
+      result.setStatus(Result.Status.ERROR);
+    }
-  private boolean checkResultList(CompositeResultData rebalanceResultData, List resultList,
+  private boolean checkResultList(InfoResultModel errors, List resultList,
-          rebalanceResultData.addSection().addData(
-              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()),
-              ((Exception) object).getMessage());
+          errors.addLine(
+              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()) + ": " +
+                  ((Exception) object).getMessage());
-          rebalanceResultData.addSection().addData(
-              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()),
-              ((Throwable) object).getMessage());
+          errors.addLine(
+              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()) + ": " +
+                  ((Throwable) object).getMessage());
-      rebalanceResultData.addSection().addData("Rebalancing for member=" + member.getId(),
+      errors.addLine("Rebalancing for member=" + member.getId() +
-  private CompositeResultData toCompositeResultData(CompositeResultData rebalanceResultData,
+  private void toCompositeResultData(ResultModel result,
-    // add only if there are any valid regions in results
-    if (rstlist.size() > resultItemCount && StringUtils.isNotEmpty(rstlist.get(resultItemCount))) {
-      TabularResultData table1 = rebalanceResultData.addSection().addTable("Table" + index);
-      String newLine = System.getProperty("line.separator");
-      StringBuilder resultStr = new StringBuilder();
-      resultStr.append(newLine);
-      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES);
-      table1.accumulate("Value", rstlist.get(0));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES).append(" = ")
-          .append(rstlist.get(0)).append(newLine);
-      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM);
-      table1.accumulate("Value", rstlist.get(1));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM).append(" = ")
-          .append(rstlist.get(1)).append(newLine);
-      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED);
-      table1.accumulate("Value", rstlist.get(2));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED).append(" = ")
-          .append(rstlist.get(2)).append(newLine);
-
-      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES);
-      table1.accumulate("Value", rstlist.get(3));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES).append(" = ")
-          .append(rstlist.get(3)).append(newLine);
-
-      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME);
-      table1.accumulate("Value", rstlist.get(4));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME).append(" = ")
-          .append(rstlist.get(4)).append(newLine);
-
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED);
-      table1.accumulate("Value", rstlist.get(5));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED).append(" = ")
-          .append(rstlist.get(5)).append(newLine);
-
-      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME);
-      table1.accumulate("Value", rstlist.get(6));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME).append(" = ")
-          .append(rstlist.get(6)).append(newLine);
-
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED);
-      table1.accumulate("Value", rstlist.get(7));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED).append(" = ")
-          .append(rstlist.get(7)).append(newLine);
-
-      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALTIME);
-      table1.accumulate("Value", rstlist.get(8));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME).append(" = ").append(rstlist.get(8))
-          .append(newLine);
-
-      String headerText;
-      if (simulate) {
-        headerText = "Simulated partition regions ";
-      } else {
-        headerText = "Rebalanced partition regions ";
-      }
-      for (int i = resultItemCount; i < rstlist.size(); i++) {
-        headerText = headerText + " " + rstlist.get(i);
-      }
-      table1.setHeader(headerText);
-      cache.getLogger().info(headerText + resultStr);
+    if (rstlist.size() <= resultItemCount || StringUtils.isEmpty(rstlist.get(resultItemCount))) {
+      return;
-    return rebalanceResultData;
+
+    TabularResultModel table1 = result.addTable("Table" + index);
+    String newLine = System.getProperty("line.separator");
+    StringBuilder resultStr = new StringBuilder();
+    resultStr.append(newLine);
+    table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES);
+    table1.accumulate("Value", rstlist.get(0));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES).append(" = ")
+        .append(rstlist.get(0)).append(newLine);
+    table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM);
+    table1.accumulate("Value", rstlist.get(1));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM).append(" = ")
+        .append(rstlist.get(1)).append(newLine);
+
+    table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED);
+    table1.accumulate("Value", rstlist.get(2));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED).append(" = ")
+        .append(rstlist.get(2)).append(newLine);
+
+    table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES);
+    table1.accumulate("Value", rstlist.get(3));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES).append(" = ")
+        .append(rstlist.get(3)).append(newLine);
+
+    table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME);
+    table1.accumulate("Value", rstlist.get(4));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME).append(" = ")
+        .append(rstlist.get(4)).append(newLine);
+
+    table1.accumulate("Rebalanced Stats",
+        CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED);
+    table1.accumulate("Value", rstlist.get(5));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED).append(" = ")
+        .append(rstlist.get(5)).append(newLine);
+
+    table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME);
+    table1.accumulate("Value", rstlist.get(6));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME).append(" = ")
+        .append(rstlist.get(6)).append(newLine);
+
+    table1.accumulate("Rebalanced Stats",
+        CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED);
+    table1.accumulate("Value", rstlist.get(7));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED).append(" = ")
+        .append(rstlist.get(7)).append(newLine);
+
+    table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALTIME);
+    table1.accumulate("Value", rstlist.get(8));
+    resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME).append(" = ").append(rstlist.get(8))
+        .append(newLine);
+
+    String headerText;
+    if (simulate) {
+      headerText = "Simulated partition regions ";
+    } else {
+      headerText = "Rebalanced partition regions ";
+    }
+    for (int i = resultItemCount; i < rstlist.size(); i++) {
+      headerText = headerText + " " + rstlist.get(i);
+    }
+    table1.setHeader(headerText);
+    cache.getLogger().info(headerText + resultStr);
-  private class ExecuteRebalanceWithTimeout implements Callable<Result> {
+  private class ExecuteRebalanceWithTimeout implements Callable<ResultModel> {
-    public Result call() throws Exception {
+    public ResultModel call() throws Exception {
-    Result executeRebalanceWithTimeout(String[] includeRegions, String[] excludeRegions,
+    ResultModel executeRebalanceWithTimeout(String[] includeRegions, String[] excludeRegions,
-      Result result = null;
+      ResultModel result = new ResultModel();
-          CompositeResultData rebalanceResultData = ResultBuilder.createCompositeResultData();
+          InfoResultModel errors = result.addInfo("error");
-                LogWrapper.getInstance(cache).info(CliStrings.format(
+                errors.addLine(CliStrings.format(
-                  rebalanceResultData.addSection()
-                      .addData(CliStrings.format(
-                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
-                          member.getId()), ex.getMessage());
-                  result = ResultBuilder.buildResult(rebalanceResultData);
+                  errors.addLine(CliStrings.format(
+                      CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
+                      member.getId()) + ": " + ex.getMessage());
-                if (checkResultList(rebalanceResultData, resultList, member)) {
-                  result = ResultBuilder.buildResult(rebalanceResultData);
+                if (checkResultList(errors, resultList, member)) {
-                result = ResultBuilder.buildResult(
-                    toCompositeResultData(rebalanceResultData, rstList, index, true, cache));
+                toCompositeResultData(result, rstList, index, true, cache);
-                  rebalanceResultData.addSection()
-                      .addData(CliStrings.format(
-                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
-                          member.getId()), ex.getMessage());
-                  result = ResultBuilder.buildResult(rebalanceResultData);
+                  errors.addLine(CliStrings.format(
+                      CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
+                      member.getId()) + ": " + ex.getMessage());
-                if (checkResultList(rebalanceResultData, resultList, member)) {
-                  result = ResultBuilder.buildResult(rebalanceResultData);
+                if (checkResultList(errors, resultList, member)) {
-                result = ResultBuilder.buildResult(
-                    toCompositeResultData(rebalanceResultData, rstList, index, false, cache));
+                toCompositeResultData(result, rstList, index, false, cache);
-                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResultData,
-                    op.getResults(), index, true, cache));
+                buildResultForRebalance(result, op.getResults(), index, true, cache);
-                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResultData,
-                    op.getResults(), index, false, cache));
+                buildResultForRebalance(result, op.getResults(), index, false, cache);
-        result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+        result = ResultModel.createError(e.getMessage());
-  private CompositeResultData buildResultForRebalance(CompositeResultData rebalanceResultData,
+  private void buildResultForRebalance(ResultModel resultModel,
-      final TabularResultData resultData =
-          rebalanceResultData.addSection().addTable("Table" + index);
+      final TabularResultModel resultData = resultModel.addTable("Table" + index);
-      resultData.accumulate("Value", results.getTotalBucketCreateBytes());
+      resultData.accumulate("Value", results.getTotalBucketCreateBytes() + "");
-      resultData.accumulate("Value", results.getTotalBucketCreateTime());
+      resultData.accumulate("Value", results.getTotalBucketCreateTime() + "");
-      resultData.accumulate("Value", results.getTotalBucketCreatesCompleted());
+      resultData.accumulate("Value", results.getTotalBucketCreatesCompleted() + "");
-      resultData.accumulate("Value", results.getTotalBucketTransferBytes());
+      resultData.accumulate("Value", results.getTotalBucketTransferBytes() + "");
-      resultData.accumulate("Value", results.getTotalBucketTransferTime());
+      resultData.accumulate("Value", results.getTotalBucketTransferTime() + "");
-      resultData.accumulate("Value", results.getTotalBucketTransfersCompleted());
+      resultData.accumulate("Value", results.getTotalBucketTransfersCompleted() + "");
-      resultData.accumulate("Value", results.getTotalPrimaryTransferTime());
+      resultData.accumulate("Value", results.getTotalPrimaryTransferTime() + "");
-      resultData.accumulate("Value", results.getTotalPrimaryTransfersCompleted());
+      resultData.accumulate("Value", results.getTotalPrimaryTransfersCompleted() + "");
-      resultData.accumulate("Value", results.getTotalTime());
+      resultData.accumulate("Value", results.getTotalTime() + "");
-    return rebalanceResultData;
-  private Result executeRebalanceOnDS(InternalCache cache, String simulate,
+  private ResultModel executeRebalanceOnDS(InternalCache cache, String simulate,
-    Result result = null;
+    ResultModel resultModel = new ResultModel();
-    CompositeResultData rebalanceResultData = ResultBuilder.createCompositeResultData();
+    InfoResultModel errors = resultModel.addInfo("errors");
-      return ResultBuilder
-          .createInfoResult(CliStrings.REBALANCE__MSG__NO_REBALANCING_REGIONS_ON_DS);
+      return ResultModel.createInfo(CliStrings.REBALANCE__MSG__NO_REBALANCING_REGIONS_ON_DS);
-      return ResultBuilder
-          .createInfoResult(CliStrings.REBALANCE__MSG__NO_REBALANCING_REGIONS_ON_DS);
+      return ResultModel.createInfo(CliStrings.REBALANCE__MSG__NO_REBALANCING_REGIONS_ON_DS);
-                if (checkResultList(rebalanceResultData, resultList, dsMember)) {
-                  result = ResultBuilder.buildResult(rebalanceResultData);
+                if (checkResultList(errors, resultList, dsMember)) {
-                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData,
-                    rstList, index, simulate.equals("true"), cache));
+                toCompositeResultData(resultModel, rstList, index, simulate.equals("true"), cache);
-                  rebalanceResultData.addSection().addData(
+                  errors.addLine(
-                          memberPR.region, listOfAllMembers(memberPR.dsMemberList)),
-                      CliStrings.REBALANCE__MSG__MEMBERS_MIGHT_BE_DEPARTED);
-                  result = ResultBuilder.buildResult(rebalanceResultData);
+                          memberPR.region, listOfAllMembers(memberPR.dsMemberList)) + ", " +
+                          CliStrings.REBALANCE__MSG__MEMBERS_MIGHT_BE_DEPARTED);
-                rebalanceResultData.addSection().addData(
+                errors.addLine(
-                        memberPR.region, listOfAllMembers(memberPR.dsMemberList)),
-                    CliStrings.REBALANCE__MSG__REASON + ex.getMessage());
-                result = ResultBuilder.buildResult(rebalanceResultData);
+                        memberPR.region, listOfAllMembers(memberPR.dsMemberList)) + ", " +
+                        CliStrings.REBALANCE__MSG__REASON + ex.getMessage());
-            if (checkResultList(rebalanceResultData, resultList, dsMember)) {
-              result = ResultBuilder.buildResult(rebalanceResultData);
+            if (checkResultList(errors, resultList, dsMember)) {
-            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResultData, rstList,
-                index, simulate.equals("true"), cache));
+            toCompositeResultData(resultModel, rstList, index, simulate.equals("true"), cache);
-        ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-        return (ResultBuilder.buildResult(errorResultData));
+        return ResultModel.createError(e.getMessage());
-    return result;
+    return resultModel;
