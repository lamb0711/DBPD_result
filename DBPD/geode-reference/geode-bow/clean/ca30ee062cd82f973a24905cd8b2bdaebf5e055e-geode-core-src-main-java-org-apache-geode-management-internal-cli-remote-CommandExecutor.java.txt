GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationService
-import org.springframework.shell.event.ParseResult;
+import org.apache.geode.distributed.ClusterConfigurationService;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.SingleGfshCommand;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+import org.apache.geode.management.internal.cli.result.CommandResult;
-  public Object execute(ParseResult parseResult) {
+  public Object execute(GfshParseResult parseResult) {
-  public Object execute(Object command, ParseResult parseResult) {
+  public Object execute(Object command, GfshParseResult parseResult) {
-  protected Object invokeCommand(Object command, ParseResult parseResult) {
+  protected Object invokeCommand(Object command, GfshParseResult parseResult) {
-    return ReflectionUtils.invokeMethod(parseResult.getMethod(), command,
-        parseResult.getArguments());
+
+    Object result =
+        ReflectionUtils.invokeMethod(parseResult.getMethod(), command, parseResult.getArguments());
+
+    if (!(command instanceof SingleGfshCommand)) {
+      return result;
+    }
+
+    SingleGfshCommand gfshCommand = (SingleGfshCommand) command;
+    CommandResult commandResult = (CommandResult) result;
+    if (commandResult.getStatus() == Result.Status.ERROR) {
+      return result;
+    }
+
+    // if command result is ok, we will need to see if we need to update cluster configuration
+    ClusterConfigurationService ccService = gfshCommand.getConfigurationService();
+    if (parseResult.getParamValue("member") != null || ccService == null) {
+      commandResult.setCommandPersisted(false);
+      return commandResult;
+    }
+
+    String groupInput = parseResult.getParamValueAsString("group");
+    if (groupInput == null) {
+      groupInput = "cluster";
+    }
+    String[] groups = groupInput.split(",");
+    for (String group : groups) {
+      ccService.updateCacheConfig(group, cc -> {
+        try {
+          gfshCommand.updateClusterConfig(group, cc, commandResult.getConfigObject());
+        } catch (Exception e) {
+          logger.error("failed to update cluster config for " + group, e);
+          // for now, if one cc update failed, we will set this flag. Will change this when we can
+          // add lines to the result returned by the command
+          commandResult.setCommandPersisted(false);
+          return null;
+        }
+        return cc;
+      });
+    }
+    return commandResult;
