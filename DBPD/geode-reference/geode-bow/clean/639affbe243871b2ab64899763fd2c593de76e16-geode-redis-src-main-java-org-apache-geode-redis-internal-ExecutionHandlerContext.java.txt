GEODE-8084: Declare parameter requirements for redis commands (#5068)

This commit replaces the existing 'imperative' parameter checks with a
more declarative style.

It only changes how the parameters for Set and List are checked.  The
others are done through the existing mechanism in the Executors.
-import org.apache.geode.redis.internal.executor.transactions.TransactionExecutor;
+import org.apache.geode.redis.internal.ParameterRequirements.RedisParametersMismatchException;
-    } else if (cause instanceof IllegalStateException) {
+    } else if (cause instanceof IllegalStateException
+        || cause instanceof RedisParametersMismatchException) {
-    RedisCommandType type = command.getCommandType();
-    Executor exec = type.getExecutor();
-      if (type == RedisCommandType.SHUTDOWN) {
+      if (command.isOfType(RedisCommandType.SHUTDOWN)) {
-      if (hasTransaction() && !(exec instanceof TransactionExecutor)) {
-        executeWithTransaction(ctx, exec, command);
+
+      if (hasTransaction() && !command.isTransactional()) {
+        executeWithTransaction(ctx, command);
-        executeWithoutTransaction(exec, command);
+        executeWithoutTransaction(command);
-      if (hasTransaction() && command.getCommandType() != RedisCommandType.MULTI) {
+      if (hasTransaction() && command.isOfType(RedisCommandType.MULTI)) {
-    } else if (type == RedisCommandType.QUIT) {
-      exec.executeCommand(command, this);
+    } else if (command.isOfType(RedisCommandType.QUIT)) {
+      command.execute(this);
-    } else if (type == RedisCommandType.AUTH) {
-      exec.executeCommand(command, this);
+    } else if (command.isOfType(RedisCommandType.AUTH)) {
+      command.execute(this);
+
-   * @param exec Executor to use
-  private void executeWithoutTransaction(final Executor exec, Command command) throws Exception {
+  private void executeWithoutTransaction(Command command) throws Exception {
-        exec.executeCommand(command, this);
+        command.execute(this);
-  private void executeWithTransaction(ChannelHandlerContext ctx, final Executor exec,
+  private void executeWithTransaction(ChannelHandlerContext ctx,
-      exec.executeCommand(command, this);
+      command.execute(this);
