GEODE-2644: Cleanup logging related files

Cleanup files that helped fix logging related test failures or helped
with reviewing and understanding code while working on GEODE-2644.

* Remove warnings and improve code cleanliness
* Improve testing and failure messages

-import java.util.Comparator;
-import java.util.Iterator;
+import org.apache.geode.LogWriter;
- * This program sorts the entries in a GemFire log file (one written using a
- * {@link org.apache.geode.LogWriter}) by their timestamps. Note that in order to do so, we
- * have to read the entire file into memory.
+ * This program sorts the entries in a GemFire log file (one written using a {@link LogWriter}) by
+ * their timestamps. Note that in order to do so, we have to read the entire file into memory.
- *
-  private static PrintStream out = System.out;
-  private static PrintStream err = System.err;
+
+  private static final PrintStream out = System.out;
+  private static final PrintStream err = System.err;
-    SortedSet sorted = new TreeSet(new Comparator() {
-      public int compare(Object o1, Object o2) {
-        LogFileParser.LogEntry entry1 = (LogFileParser.LogEntry) o1;
-        LogFileParser.LogEntry entry2 = (LogFileParser.LogEntry) o2;
-        String stamp1 = entry1.getTimestamp();
-        String stamp2 = entry2.getTimestamp();
+    SortedSet<LogFileParser.LogEntry> sorted = new TreeSet<>((entry1, entry2) -> {
+      String stamp1 = entry1.getTimestamp();
+      String stamp2 = entry2.getTimestamp();
-        if (stamp1.equals(stamp2)) {
-          if (entry1.getContents().equals(entry2.getContents())) {
-            // Timestamps and contents are both equal - compare hashCode()
-            return Integer.valueOf(entry1.hashCode()).compareTo(Integer.valueOf(entry2.hashCode()));
-          } else {
-            return entry1.getContents().compareTo(entry2.getContents());
-          }
+      if (stamp1.equals(stamp2)) {
+        if (entry1.getContents().equals(entry2.getContents())) {
+          // Timestamps and contents are both equal - compare hashCode()
+          return Integer.valueOf(entry1.hashCode()).compareTo(entry2.hashCode());
-          return stamp1.compareTo(stamp2);
+          return entry1.getContents().compareTo(entry2.getContents());
+      } else {
+        return stamp1.compareTo(stamp2);
-    for (Iterator iter = sorted.iterator(); iter.hasNext();) {
-      LogFileParser.LogEntry entry = (LogFileParser.LogEntry) iter.next();
+    for (LogFileParser.LogEntry entry : sorted) {
-  //////////////////// Main Program ////////////////////
-
-    err.println(
-        "Usage: java SortLogFile logFile");
-    err.println("-sortedFile file "
-        + "File in which to put sorted log");
-    err.println("");
+    err.println("Usage: java SortLogFile logFile");
+    err.println("-sortedFile file " + "File in which to put sorted log");
+    err.println();
-    err.println("");
+    err.println();
-  public static void main(String[] args) throws IOException {
+  public static void main(String... args) throws IOException {
-    // int dirCount = 0;
-
