Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class is used for sorting tombstones by region version number. Because
- * two tombstones with different members are not comparable, the iterator on
- * this class tries to return the tombstones in the order of the timestamps of the tombstones.
+ * This class is used for sorting tombstones by region version number. Because two tombstones with
+ * different members are not comparable, the iterator on this class tries to return the tombstones
+ * in the order of the timestamps of the tombstones.
- * The class maintains a map, per member, of the tombstones sorted by the version
- * tag.
+ * The class maintains a map, per member, of the tombstones sorted by the version tag.
-  
+
-   * A map of
-   * member id-> sort map of version tag-> region entry
+   * A map of member id-> sort map of version tag-> region entry
-  
+
-    //Add the version tag to the appropriate map
+    // Add the version tag to the appropriate map
-    if(memberMap == null) {
+    if (memberMap == null) {
-    if(tombstoneMap.isEmpty()) {
-      //if there are no more entries, return null;
+    if (tombstoneMap.isEmpty()) {
+      // if there are no more entries, return null;
-      //Otherwise, look at all of the members and find the tag with the 
-      //lowest timestamp.
+      // Otherwise, look at all of the members and find the tag with the
+      // lowest timestamp.
-      for(TreeMap<VersionTag, T> memberMap: tombstoneMap.values()) {
+      for (TreeMap<VersionTag, T> memberMap : tombstoneMap.values()) {
-        if(stamp < lowestTimestamp) {
+        if (stamp < lowestTimestamp) {
-      if(lowestMap == null) {
+      if (lowestMap == null) {
-      //Remove the lowest entry
+      // Remove the lowest entry
-      if(lowestMap.isEmpty()) {
-        //if this is the last entry from a given member,
-        //the map for that member
+      if (lowestMap.isEmpty()) {
+        // if this is the last entry from a given member,
+        // the map for that member
-      
+
-  
+
-   * A comparator that sorts version tags based on the region version, and
-   * then on the timestamp.
+   * A comparator that sorts version tags based on the region version, and then on the timestamp.
-      if(result == 0) {
+      if (result == 0) {
-    
+
