Refactoring LuceneFunction, LuceneQueryProvider, and LuceneQueryFactory

LuceneFunction had a static RepositoryManager, I changed the code to get
look up the RepositoryManager from the LuceneService.

As part of that work, I noticed StringQueryProvider really needed access
to the index to lookup the field names, analyzer, etc. So I changed the
getQuery method to take an index, and removed the unneeded string
parameters.

Finally, I removed some of the mocking from
LuceneFunctionReadPathDUnitTest, which exposed some other issues:

* I switched RepositoryManager.getRepositories back to using a
RegionFunctionContext, because apparently context.getDataSet is *not*
the local data set.

* I canonicalized the regionPaths in LuceneService

-
-  LuceneQueryProvider queryProvider;
+  private LuceneQueryProvider queryProvider;
+  private String indexName;
-    this(null, null);
+    this(null, null, null);
-  public LuceneFunctionContext(LuceneQueryProvider provider) {
-    this(provider, null);
+  public LuceneFunctionContext(LuceneQueryProvider provider, String indexName) {
+    this(provider, indexName, null);
-  public LuceneFunctionContext(LuceneQueryProvider provider, CollectorManager<C> manager) {
-    this(provider, manager, LuceneQueryFactory.DEFAULT_LIMIT);
+  public LuceneFunctionContext(LuceneQueryProvider provider, String indexName, CollectorManager<C> manager) {
+    this(provider, indexName, manager, LuceneQueryFactory.DEFAULT_LIMIT);
-  public LuceneFunctionContext(LuceneQueryProvider provider, CollectorManager<C> manager, int limit) {
+  public LuceneFunctionContext(LuceneQueryProvider provider, String indexName, CollectorManager<C> manager, int limit) {
+    this.indexName = indexName;
+   * Get the name of the index to query
+   */
+  public String getIndexName() {
+    return indexName;
+  }
+
+  /**
+    DataSerializer.writeString(indexName, out);
+    this.indexName = DataSerializer.readString(in);
