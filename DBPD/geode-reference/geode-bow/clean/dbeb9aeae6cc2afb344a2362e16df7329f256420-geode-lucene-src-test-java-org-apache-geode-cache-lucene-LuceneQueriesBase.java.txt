Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.util.concurrent.TimeUnit;
-  * This test class is intended to contain basic integration tests
-  * of the lucene query class that should be executed against a number
-  * of different regions types and topologies.
-  *
-  */
+ * This test class is intended to contain basic integration tests of the lucene query class that
+ * should be executed against a number of different regions types and topologies.
+ *
+ */
-    //Execute a query with a custom lucene query object
+    // Execute a query with a custom lucene query object
-      LuceneQuery query = service.createLuceneQueryFactory().create(INDEX_NAME, REGION_NAME, index ->  {
-        return new TermQuery(new Term("text", "world"));
-      });
+      LuceneQuery query =
+          service.createLuceneQueryFactory().create(INDEX_NAME, REGION_NAME, index -> {
+            return new TermQuery(new Term("text", "world"));
+          });
-      LuceneIndexImpl index = (LuceneIndexImpl)service.getIndex(INDEX_NAME, REGION_NAME);
+      LuceneIndexImpl index = (LuceneIndexImpl) service.getIndex(INDEX_NAME, REGION_NAME);
-      return index.waitUntilFlushed(ms);
+      return index.waitUntilFlushed(ms, TimeUnit.MILLISECONDS);
-      query = service.createLuceneQueryFactory().create(INDEX_NAME, REGION_NAME, "text:world", DEFAULT_FIELD);
+      query = service.createLuceneQueryFactory().create(INDEX_NAME, REGION_NAME, "text:world",
+          DEFAULT_FIELD);
-      assertEquals(new HashMap(region),data);
+      assertEquals(new HashMap(region), data);
-  protected void executeTextSearch(VM vm, String queryString, String defaultField, int expectedResultsSize) {
+  protected void executeTextSearch(VM vm, String queryString, String defaultField,
+      int expectedResultsSize) {
-      query = service.createLuceneQueryFactory()
-        .setResultLimit(1000)
-        .setPageSize(1000)
-        .create(INDEX_NAME, REGION_NAME, queryString, defaultField);
+      query = service.createLuceneQueryFactory().setResultLimit(1000).setPageSize(1000)
+          .create(INDEX_NAME, REGION_NAME, queryString, defaultField);
