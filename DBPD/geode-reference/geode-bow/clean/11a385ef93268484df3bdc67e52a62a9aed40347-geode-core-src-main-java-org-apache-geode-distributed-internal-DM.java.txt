GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.

+import org.apache.geode.admin.GemFireHealthConfig;
+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.CacheClosedException;
-  public boolean shutdownInProgress();
+  boolean shutdownInProgress();
-  public long cacheTimeMillis();
+  long cacheTimeMillis();
-  public InternalDistributedMember getDistributionManagerId();
+  InternalDistributedMember getDistributionManagerId();
-  public Set getAllOtherMembers();
+  Set getAllOtherMembers();
-  public InternalDistributedMember getCanonicalId(DistributedMember id);
+  InternalDistributedMember getCanonicalId(DistributedMember id);
-  public void retainMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
+  void retainMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
-  public void removeMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
+  void removeMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
-  public Set getDistributionManagerIds();
+  Set getDistributionManagerIds();
-  public Set getNormalDistributionManagerIds();
+  Set getNormalDistributionManagerIds();
-  public Set getDistributionManagerIdsIncludingAdmin();
+  Set getDistributionManagerIdsIncludingAdmin();
-  public Set getOtherDistributionManagerIds();
+  Set getOtherDistributionManagerIds();
-  public Set getOtherNormalDistributionManagerIds();
+  Set getOtherNormalDistributionManagerIds();
-  public Set addMembershipListenerAndGetDistributionManagerIds(MembershipListener l);
+  Set addMembershipListenerAndGetDistributionManagerIds(MembershipListener l);
-  public Set addAllMembershipListenerAndGetAllIds(MembershipListener l);
+  Set addAllMembershipListenerAndGetAllIds(MembershipListener l);
-  public InternalDistributedMember getId();
+  InternalDistributedMember getId();
-  public boolean isAdam();
+  boolean isAdam();
-  public InternalDistributedMember getElderId();
+  InternalDistributedMember getElderId();
-  public boolean isElder();
+  boolean isElder();
-  public boolean isLoner();
+  boolean isLoner();
-  public ElderState getElderState(boolean force, boolean useTryLock);
+  ElderState getElderState(boolean force, boolean useTryLock);
-  public long getChannelId();
+  long getChannelId();
-  public Set putOutgoingUserData(DistributionMessage message) throws NotSerializableException;
+  Set putOutgoingUserData(DistributionMessage message) throws NotSerializableException;
-  public Set putOutgoing(DistributionMessage msg);
+  Set putOutgoing(DistributionMessage msg);
-  public InternalDistributedSystem getSystem();
+  InternalDistributedSystem getSystem();
-  public void addMembershipListener(MembershipListener l);
+  void addMembershipListener(MembershipListener l);
-  public void removeMembershipListener(MembershipListener l);
+  void removeMembershipListener(MembershipListener l);
-  public void removeAllMembershipListener(MembershipListener l);
+  void removeAllMembershipListener(MembershipListener l);
-  public void addAdminConsole(InternalDistributedMember id);
+  void addAdminConsole(InternalDistributedMember id);
-  public DMStats getStats();
+  DMStats getStats();
-  public DistributionConfig getConfig();
+  DistributionConfig getConfig();
-  public void handleManagerDeparture(InternalDistributedMember theId, boolean crashed,
-      String reason);
+  void handleManagerDeparture(InternalDistributedMember theId, boolean crashed, String reason);
-  public ExecutorService getThreadPool();
+  ExecutorService getThreadPool();
-  public ExecutorService getHighPriorityThreadPool();
+  ExecutorService getHighPriorityThreadPool();
-  public ExecutorService getWaitingThreadPool();
+  ExecutorService getWaitingThreadPool();
-  public ExecutorService getPrMetaDataCleanupThreadPool();
+  ExecutorService getPrMetaDataCleanupThreadPool();
-  public void close();
+  void close();
-  public List<InternalDistributedMember> getViewMembers();
+  List<InternalDistributedMember> getViewMembers();
-  public DistributedMember getOldestMember(Collection members) throws NoSuchElementException;
+  DistributedMember getOldestMember(Collection members) throws NoSuchElementException;
-  public Set getAdminMemberSet();
+  Set getAdminMemberSet();
-  public void throwIfDistributionStopped();
+  void throwIfDistributionStopped();
-  public int getRoleCount(Role role);
+  int getRoleCount(Role role);
-  public boolean isRolePresent(Role role);
+  boolean isRolePresent(Role role);
-  public Set getAllRoles();
+  Set getAllRoles();
-  public boolean isCurrentMember(InternalDistributedMember id);
+  boolean isCurrentMember(InternalDistributedMember id);
-  public void removeUnfinishedStartup(InternalDistributedMember m, boolean departed);
+  void removeUnfinishedStartup(InternalDistributedMember m, boolean departed);
-  public void setUnfinishedStartups(Collection s);
+  void setUnfinishedStartups(Collection s);
-  public CancelCriterion getCancelCriterion();
+  CancelCriterion getCancelCriterion();
-  public MembershipManager getMembershipManager();
+  MembershipManager getMembershipManager();
-  public void setRootCause(Throwable t);
+  void setRootCause(Throwable t);
-  public Throwable getRootCause();
+  Throwable getRootCause();
-  public Set<InternalDistributedMember> getMembersInThisZone();
+  Set<InternalDistributedMember> getMembersInThisZone();
-  public void acquireGIIPermitUninterruptibly();
+  void acquireGIIPermitUninterruptibly();
-  public void releaseGIIPermit();
+  void releaseGIIPermit();
-  public int getDistributedSystemId();
+  int getDistributedSystemId();
-  public boolean enforceUniqueZone();
+  boolean enforceUniqueZone();
-  public Set<InternalDistributedMember> getMembersInSameZone(
-      InternalDistributedMember acceptedMember);
+  Set<InternalDistributedMember> getMembersInSameZone(InternalDistributedMember acceptedMember);
-  public boolean areInSameZone(InternalDistributedMember member1,
-      InternalDistributedMember member2);
+  boolean areInSameZone(InternalDistributedMember member1, InternalDistributedMember member2);
-  public boolean areOnEquivalentHost(InternalDistributedMember member1,
-      InternalDistributedMember member2);
+  boolean areOnEquivalentHost(InternalDistributedMember member1, InternalDistributedMember member2);
-  public Set<InetAddress> getEquivalents(InetAddress in);
+  Set<InetAddress> getEquivalents(InetAddress in);
-  public Set<DistributedMember> getGroupMembers(String group);
+  Set<DistributedMember> getGroupMembers(String group);
-  public void addHostedLocators(InternalDistributedMember member, Collection<String> locators,
+  void addHostedLocators(InternalDistributedMember member, Collection<String> locators,
-  public Collection<String> getHostedLocators(InternalDistributedMember member);
+  Collection<String> getHostedLocators(InternalDistributedMember member);
-  public Map<InternalDistributedMember, Collection<String>> getAllHostedLocators();
+  Map<InternalDistributedMember, Collection<String>> getAllHostedLocators();
-  public Map<InternalDistributedMember, Collection<String>> getAllHostedLocatorsWithSharedConfiguration();
+  Map<InternalDistributedMember, Collection<String>> getAllHostedLocatorsWithSharedConfiguration();
-  public boolean isSharedConfigurationServiceEnabledForDS();
+  boolean isSharedConfigurationServiceEnabledForDS();
-  public void forceUDPMessagingForCurrentThread();
+  void forceUDPMessagingForCurrentThread();
-  public void releaseUDPMessagingForCurrentThread();
+  void releaseUDPMessagingForCurrentThread();
+  /**
+   * The returned cache will be null if the cache does not yet exist. Note that the returned cache
+   * may be one that is already closed. Callers of GemFireCacheImpl.getInstance() should try to use
+   * this method.
+   */
+  /**
+   * Returns an existing non-closed cache associated with this DM. Callers of
+   * CacheFactory.getAnyInstance(), CacheFactory.getInstance(DistributedSystem) or
+   * GemFireCacheImpl.getExisting() should try to use this method.
+   *
+   * @throws CacheClosedException if a cache has not yet been associated with this DM or it has been
+   *         {@link Cache#isClosed closed}.
+   */
+  InternalCache getExistingCache();
+
+
+  HealthMonitor getHealthMonitor(InternalDistributedMember owner);
+
+  void removeHealthMonitor(InternalDistributedMember owner, int theId);
+
+  void createHealthMonitor(InternalDistributedMember owner, GemFireHealthConfig cfg);
