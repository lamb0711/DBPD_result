Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class is currently used for reading direct ack responses
- * It should probably be used for all of the reading done
- * in Connection.
+ * This class is currently used for reading direct ack responses It should probably be used for all
+ * of the reading done in Connection.
-    this.bbis = version == null ? new ByteBufferInputStream()
-        : new VersionedByteBufferInputStream(version);
+    this.bbis =
+        version == null ? new ByteBufferInputStream() : new VersionedByteBufferInputStream(version);
-  
+
-  
+
-   * Block until you can read a message. Returns null if the message
-   * was a message chunk.
+   * Block until you can read a message. Returns null if the message was a message chunk.
+   * 
-   * @throws ClassNotFoundException 
-   * @throws IOException 
-   * @throws InterruptedException 
+   * @throws ClassNotFoundException
+   * @throws IOException
+   * @throws InterruptedException
-  public DistributionMessage readMessage(Header header) throws IOException, ClassNotFoundException, InterruptedException {
+  public DistributionMessage readMessage(Header header)
+      throws IOException, ClassNotFoundException, InterruptedException {
-        bbis.setBuffer(nioInputBuffer);
-        DistributionMessage msg = null;
-        ReplyProcessor21.initMessageRPId();
-        // add serialization stats
-        msg = (DistributionMessage)InternalDataSerializer.readDSFID(bbis);
-        return msg;
+      bbis.setBuffer(nioInputBuffer);
+      DistributionMessage msg = null;
+      ReplyProcessor21.initMessageRPId();
+      // add serialization stats
+      msg = (DistributionMessage) InternalDataSerializer.readDSFID(bbis);
+      return msg;
-    
-  public void readChunk(Header header, MsgDestreamer md) throws IOException, ClassNotFoundException, InterruptedException {
+
+  public void readChunk(Header header, MsgDestreamer md)
+      throws IOException, ClassNotFoundException, InterruptedException {
-  
+
-    public Header() {
-    }
+    public Header() {}
-    
-    
+
+
-  public void close() {
-  }
+  public void close() {}
