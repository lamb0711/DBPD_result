GEODE-4762: Remove dead code.


-import static org.apache.geode.distributed.ConfigurationProperties.*;
-import static org.apache.geode.distributed.internal.DistributionConfig.*;
+import static org.apache.geode.distributed.ConfigurationProperties.BIND_ADDRESS;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_CIPHERS;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_ENABLED;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_PROTOCOLS;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_REQUIRE_AUTHENTICATION;
+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_ADDRESS;
+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.TCP_PORT;
+import static org.apache.geode.distributed.internal.DistributionConfig.DEFAULT_SSL_CIPHERS;
+import static org.apache.geode.distributed.internal.DistributionConfig.DEFAULT_SSL_ENABLED;
+import static org.apache.geode.distributed.internal.DistributionConfig.DEFAULT_SSL_PROTOCOLS;
+import static org.apache.geode.distributed.internal.DistributionConfig.DEFAULT_SSL_REQUIRE_AUTHENTICATION;
-        // props.setProperty(LOCATOR_DS_PROPERTIES + i,
-        // getdsPropertiesString(locator));
-      // This could be different each time agent is started
-      // props.setProperty(SYSTEM_ID_NAME, toString(getSystemId()));
-      // } else if (prop.equals(SYSTEM_ID_NAME)) {
-      // return "The id of the distributed system";
-
-      // } else if (prop.equals(SYSTEM_NAME_NAME)) {
-      // return "The logical name of the distributed system";
-
-  // /**
-  // * Validates that snmpBindAddress is not null and then returns the string form of it.
-  // */
-  // private String validateSnmpBindAddress(InetAddress snmpBindAddress) {
-  // if (snmpBindAddress == null) {
-  // throw new IllegalArgumentException("SnmpBindAddress must not be null");
-  // }
-  // return toString(snmpBindAddress);
-  // }
-
-    /*
-     * if (isSnmpEnabled() && isEmpty(snmpDir)) { throw new
-     * IllegalArgumentException(LocalizedStrings.
-     * AgentConfigImpl_SNMPDIRECTORY_MUST_BE_SPECIFIED_BECAUSE_SNMP_IS_ENABLED.toLocalizedString());
-     * } File root new File(snmpDir); if (!root.exists()) throw new
-     * IllegalArgumentException(LocalizedStrings.AgentConfigImpl_SNMPDIRECTORY_DOES_NOT_EXIST.
-     * toLocalizedString());
-     */
-
-  // /**
-  // * Validates that rmiBindAddress is not null and then returns the string form of it.
-  // */
-  // private String validateRmiBindAddress(InetAddress rmiBindAddress) {
-  // if (rmiBindAddress == null) {
-  // throw new IllegalArgumentException("RmiBindAddress must not be null");
-  // }
-  // return toString(rmiBindAddress);
-  // }
