Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import org.apache.geode.management.internal.configuration.utils.XmlUtils;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.TransformerException;
- * Domain object for all the configuration related data. 
+ * Domain object for all the configuration related data.
-public class Configuration implements DataSerializable{
-  
+public class Configuration implements DataSerializable {
+
-  private Properties gemfireProperties = new Properties();
-  Set<String> jarNames = new HashSet<String>();
-  
-  //Public no arg constructor required for Deserializable
+  private Properties gemfireProperties;
+  Set<String> jarNames;
+
+  // Public no arg constructor required for Deserializable
-    
+
-  
+
+  public Configuration(Configuration that) {
+    this.configName = that.configName;
+    this.cacheXmlContent = that.cacheXmlContent;
+    this.cacheXmlFileName = that.cacheXmlFileName;
+    this.propertiesFileName = that.propertiesFileName;
+    this.gemfireProperties = new Properties();
+    this.gemfireProperties.putAll(that.gemfireProperties);
+    this.jarNames = new HashSet<>(that.jarNames);
+  }
+
-    this.setPropertiesFileName(configName + ".properties");
+    this.propertiesFileName = configName + ".properties";
+    this.gemfireProperties = new Properties();
+    this.jarNames = new HashSet<String>();
-  
+
-  
+
-  
+
+  public void setCacheXmlFile(File cacheXmlFile)
+      throws TransformerException, ParserConfigurationException, IOException, SAXException {
+    if (cacheXmlFile.length() == 0) {
+      this.cacheXmlContent = "";
+    } else {
+      Document doc = XmlUtils.getDocumentBuilder().parse(cacheXmlFile);
+      this.cacheXmlContent = XmlUtils.elementToString(doc);
+    }
+  }
+
+  public void setPropertiesFile(File propertiesFile) throws IOException {
+    if (!propertiesFile.exists())
+      return;
+
+    FileInputStream fis = null;
+    try {
+      fis = new FileInputStream(propertiesFile);
+      this.gemfireProperties.load(fis);
+    } finally {
+      if (fis != null) {
+        fis.close();
+      }
+    }
+  }
+
-  
-  public void setCacheXmlFileName(String cacheXmlFileName) {
-    this.cacheXmlFileName = cacheXmlFileName;
-  }
-  
+
-  
+
-  
+
+  public void addGemfireProperties(Properties gemfireProperties) {
+    this.gemfireProperties.putAll(gemfireProperties);
+  }
+
-  
-  public void setConfigName(String configName) {
-    this.configName = configName;
-  }
-  public void setPropertiesFileName(String propertiesFileName) {
-    this.propertiesFileName = propertiesFileName;
+  public void addJarNames(Set<String> jarNames) {
+    this.jarNames.addAll(jarNames);
-  
+
-    if (jarNames != null) {
-      for (String jarName : jarNames) {
-        this.jarNames.add(jarName);
-      }
-    }
+    if (jarNames == null)
+      return;
+
+    this.jarNames.addAll(Stream.of(jarNames).collect(Collectors.toSet()));
-  
+
+
-      for (String jarName : jarNames) {
-        this.jarNames.remove(jarName);
-      }
-    }else {
+      this.jarNames.removeAll(Stream.of(jarNames).collect(Collectors.toSet()));
+    } else {
-  
+
-  
-  
+
+
-    return "Configuration [configName=" + configName + ", cacheXmlContent="
-        + cacheXmlContent + ", cacheXmlFileName=" + cacheXmlFileName
-        + ", propertiesFileName=" + propertiesFileName + ", gemfireProperties="
-        + gemfireProperties + ", jarNames=" + jarNames + "]";
+    return "Configuration [configName=" + configName + ", cacheXmlContent=" + cacheXmlContent
+        + ", cacheXmlFileName=" + cacheXmlFileName + ", propertiesFileName=" + propertiesFileName
+        + ", gemfireProperties=" + gemfireProperties + ", jarNames=" + jarNames + "]";
-    result = prime * result
-        + ((cacheXmlContent == null) ? 0 : cacheXmlContent.hashCode());
-    result = prime * result
-        + ((cacheXmlFileName == null) ? 0 : cacheXmlFileName.hashCode());
-    result = prime * result
-        + ((configName == null) ? 0 : configName.hashCode());
-    result = prime * result
-        + ((gemfireProperties == null) ? 0 : gemfireProperties.hashCode());
+    result = prime * result + ((cacheXmlContent == null) ? 0 : cacheXmlContent.hashCode());
+    result = prime * result + ((cacheXmlFileName == null) ? 0 : cacheXmlFileName.hashCode());
+    result = prime * result + ((configName == null) ? 0 : configName.hashCode());
+    result = prime * result + ((gemfireProperties == null) ? 0 : gemfireProperties.hashCode());
-    result = prime * result
-        + ((propertiesFileName == null) ? 0 : propertiesFileName.hashCode());
+    result = prime * result + ((propertiesFileName == null) ? 0 : propertiesFileName.hashCode());
-  
+
