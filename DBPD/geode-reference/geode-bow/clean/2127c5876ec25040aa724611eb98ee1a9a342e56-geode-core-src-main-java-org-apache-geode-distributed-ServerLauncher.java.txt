ServerLauncher.start() waits for startup tasks to complete

- Extract ControllableProcess interface
- Improve testability of ServerLauncher

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>

+import java.util.concurrent.CompletableFuture;
+import org.apache.geode.internal.process.FileControllableProcess;
+    process = builder.getControllableProcess();
-        process = new ControllableProcess(controlHandler, new File(getWorkingDirectory()),
-            ProcessType.SERVER, isForcing());
+        // TODO Aaron redo with factory
+        if (process == null) {
+          process = new FileControllableProcess(controlHandler, new File(getWorkingDirectory()),
+              ProcessType.SERVER, isForcing());
+        }
-          startCacheServer(cache, startTime);
+          startCacheServer(cache);
+        awaitStartupTasks(cache, startTime);
+
-   * @param startTime the system clock time at which the start method was called
-  @VisibleForTesting
-  void startCacheServer(final Cache cache, long startTime) throws IOException {
+  private void startCacheServer(final Cache cache) throws IOException {
+  }
+  private void awaitStartupTasks(Cache cache, long startTime) {
-    ((InternalResourceManager) cache.getResourceManager())
-        .runWhenStartupTasksComplete(afterStartup, exceptionAction);
+    CompletableFuture<Void> startupTasks =
+        ((InternalResourceManager) cache.getResourceManager())
+            .runWhenStartupTasksComplete(afterStartup, exceptionAction);
+
+    startupTasks.join();
-
+    private ControllableProcess controllableProcess;
-      return this.startupExceptionAction;
+      return startupExceptionAction;
-      return this.serverLauncherCacheProvider;
+      return serverLauncherCacheProvider;
+    }
+
+    /**
+     * Sets the {@code ControllableProcess} to use when starting the server.
+     *
+     * @param controllableProcess the controllable process to use
+     * @return this builder
+     */
+    Builder setControllableProcess(ControllableProcess controllableProcess) {
+      this.controllableProcess = controllableProcess;
+      return this;
+    }
+
+    /**
+     * Gets the {@code ControllableProcess} used when starting the server.
+     *
+     * @return the controllable process
+     */
+    ControllableProcess getControllableProcess() {
+      return controllableProcess;
