Merge branch 'release/1.5.0'

-import org.apache.geode.StatisticsFactory;
-import org.apache.geode.cache.EvictionAlgorithm;
-import org.apache.geode.internal.cache.BucketRegion;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.InternalRegionArguments;
-import org.apache.geode.internal.cache.PartitionedRegion;
-import org.apache.geode.internal.cache.PlaceHolderDiskRegion;
+import java.util.Optional;
+
-  private final boolean EVICTION_SCAN_ASYNC =
-      SystemPropertyHelper.getProductBooleanProperty(SystemPropertyHelper.EVICTION_SCAN_ASYNC);
+  private final boolean evictionScanAsync;
-  private EvictionAlgorithm algorithm;
-  private Object region;
-  private EvictionController controller;
-  private InternalRegionArguments args;
+  private final EvictionController controller;
-  public EvictionListBuilder(EvictionAlgorithm algorithm) {
-    this.algorithm = algorithm;
-  }
-
-  /**
-   * @param region PlaceHolderDiskRegion during disk recovery or LocalRegion
-   */
-  public EvictionListBuilder withRegion(Object region) {
-    this.region = region;
-    return this;
-  }
-
-  public EvictionListBuilder withEvictionController(EvictionController evictionController) {
+  public EvictionListBuilder(EvictionController evictionController) {
-    return this;
-  }
-
-  public EvictionListBuilder withArgs(InternalRegionArguments args) {
-    this.args = args;
-    return this;
+    Optional<Boolean> asyncScan =
+        SystemPropertyHelper.getProductBooleanProperty(SystemPropertyHelper.EVICTION_SCAN_ASYNC);
+    evictionScanAsync = asyncScan.orElse(true);
-    if (algorithm.isLIFO()) {
-      return new LIFOList(getEvictionStats(), getBucketRegion());
+    if (this.controller.getEvictionAlgorithm().isLIFO()) {
+      return new LIFOList(this.controller);
-      if (EVICTION_SCAN_ASYNC) {
-        return new LRUListWithAsyncSorting(getEvictionStats(), getBucketRegion());
+      if (evictionScanAsync) {
+        return new LRUListWithAsyncSorting(this.controller);
-        return new LRUListWithSyncSorting(getEvictionStats(), getBucketRegion());
+        return new LRUListWithSyncSorting(this.controller);
-  private InternalEvictionStatistics getEvictionStats() {
-    InternalEvictionStatistics statistics = null;
-    if (region != null) {
-      if (region instanceof BucketRegion) {
-        if (args != null && args.getPartitionedRegion() != null) {
-          statistics = (InternalEvictionStatistics) args.getPartitionedRegion()
-              .getEvictionController().getStatistics();
-        } else {
-          statistics = new DisabledEvictionStatistics();
-        }
-      } else if (region instanceof PlaceHolderDiskRegion) {
-        statistics = (InternalEvictionStatistics) ((PlaceHolderDiskRegion) region).getPRLRUStats();
-      } else if (region instanceof PartitionedRegion) {
-        statistics = (InternalEvictionStatistics) ((PartitionedRegion) region)
-            .getPRLRUStatsDuringInitialization();
-        if (statistics != null) {
-          PartitionedRegion partitionedRegion = (PartitionedRegion) region;
-          EvictionController evictionController = partitionedRegion.getEvictionController();
-          ((AbstractEvictionController) evictionController).setStatistics(statistics);
-        }
-      }
-    }
-    if (statistics == null) {
-      StatisticsFactory sf = GemFireCacheImpl.getExisting("").getDistributedSystem();
-      statistics = (InternalEvictionStatistics) controller.initStats(region, sf);
-    }
-    return statistics;
-  }
-
-  private BucketRegion getBucketRegion() {
-    return region instanceof BucketRegion ? (BucketRegion) region : null;
-  }
