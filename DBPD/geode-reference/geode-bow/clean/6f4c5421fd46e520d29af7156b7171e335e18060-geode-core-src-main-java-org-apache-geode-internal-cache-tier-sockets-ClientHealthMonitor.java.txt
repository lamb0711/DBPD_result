GEODE-5401: Check if transaction has been failed over before expiring client transactions. (#2197)

* Use ExpireDisconnectedClientTransactionsMessage instead of TXManagerImpl.TXRemovalMessage when expire client transactions.

* Only send new message to Geode 1.7.0 and later servers - assuming old version servers will be rolled soon.

* Handle differently when server receives this message based on sender version.


-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.SystemTimer.SystemTimerTask;
-import org.apache.geode.internal.concurrent.ConcurrentHashSet;
-  private final Set<TXId> scheduledToBeRemovedTx =
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "trackScheduledToBeRemovedTx")
-          ? new ConcurrentHashSet<TXId>() : null;
-
-    return scheduledToBeRemovedTx;
+    final TXManagerImpl txMgr = (TXManagerImpl) this._cache.getCacheTransactionManager();
+    return txMgr.getScheduledToBeRemovedTx();
-    final Set<TXId> txids =
+    final Set<TXId> txIds =
-    long timeout = txMgr.getTransactionTimeToLive() * 1000;
-    if (!txids.isEmpty()) {
-      if (logger.isDebugEnabled()) {
-        logger.debug("expiring {} transaction contexts for {} timeout={}", txids.size(), proxyID,
-            timeout / 1000);
-      }
-
-      if (timeout <= 0) {
-        txMgr.removeTransactions(txids, true);
-      } else {
-        if (scheduledToBeRemovedTx != null)
-          scheduledToBeRemovedTx.addAll(txids);
-        SystemTimerTask task = new SystemTimerTask() {
-          @Override
-          public void run2() {
-            txMgr.removeTransactions(txids, true);
-            if (scheduledToBeRemovedTx != null)
-              scheduledToBeRemovedTx.removeAll(txids);
-          }
-        };
-        this._cache.getCCPTimer().schedule(task, timeout);
-      }
+    if (!txIds.isEmpty()) {
+      txMgr.expireDisconnectedClientTransactions(txIds, true);
