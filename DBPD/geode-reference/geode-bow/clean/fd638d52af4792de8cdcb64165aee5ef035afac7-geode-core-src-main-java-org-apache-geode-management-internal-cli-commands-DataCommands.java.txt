Revert "GEODE-2632: use immutable SecurityService impls to improve performance"

This reverts commit 5eca6f0393c1a05804a4c4b7f97203ee2ec226a2.

+import org.apache.geode.internal.security.IntegratedSecurityService;
+import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.management.internal.cli.functions.DataCommandFunction.SelectExecStep;
-  private final int resultItemCount = 9;
+  final int resultItemCount = 9;
-  @Override
-  public Gfsh getGfsh() {
-    return Gfsh.getCurrentInstance();
-  }
-
-  @Override
-  public InternalCache getCache() {
-    return (InternalCache) CacheFactory.getAnyInstance();
-  }
+  private SecurityService securityService = IntegratedSecurityService.getSecurityService();
-    ExecuteRebalanceWithTimeout(String[] includedRegions, String[] excludedRegions,
+    public ExecuteRebalanceWithTimeout(String[] includedRegions, String[] excludedRegions,
-    Result executeRebalanceWithTimeout(String[] includeRegions, String[] excludeRegions,
+    public Result executeRebalanceWithTimeout(String[] includeRegions, String[] excludeRegions,
-  private boolean checkMemberPresence(DistributedMember dsMember, InternalCache cache) {
+  public boolean checkMemberPresence(DistributedMember dsMember, InternalCache cache) {
-  private String listOfAllMembers(ArrayList<DistributedMember> dsMemberList) {
+  public String listOfAllMembers(ArrayList<DistributedMember> dsMemberList) {
-  private CompositeResultData toCompositeResultData(CompositeResultData rebalanceResulteData,
+  protected CompositeResultData toCompositeResultData(CompositeResultData rebalanceResulteData,
-  private DistributedMember getAssociatedMembers(String region, final InternalCache cache) {
+  public DistributedMember getAssociatedMembers(String region, final InternalCache cache) {
-    getCache().getSecurityService().authorizeRegionRead(regionName);
+    this.securityService.authorizeRegionRead(regionName);
-    getCache().getSecurityService().authorizeRegionWrite(regionName);
+    this.securityService.authorizeRegionWrite(regionName);
+    this.securityService.authorizeRegionWrite(regionPath);
-    cache.getSecurityService().authorizeRegionWrite(regionPath);
+    this.securityService.authorizeRegionRead(regionPath, key);
-    cache.getSecurityService().authorizeRegionRead(regionPath, key);
-        Subject subject = cache.getSecurityService().getSubject();
+        Subject subject = this.securityService.getSubject();
-      dataResult = getfn.get(null, key, keyClass, valueClass, regionPath, loadOnCacheMiss,
-          cache.getSecurityService());
+      dataResult = getfn.get(null, key, keyClass, valueClass, regionPath, loadOnCacheMiss);
-    getCache().getSecurityService().authorizeRegionRead(regionPath, key);
+    this.securityService.authorizeRegionRead(regionPath, key);
-      cache.getSecurityService().authorizeRegionWrite(regionPath);
+      this.securityService.authorizeRegionWrite(regionPath);
-      cache.getSecurityService().authorizeRegionWrite(regionPath, key);
+      this.securityService.authorizeRegionWrite(regionPath, key);
-    CLIStep exec = new SelectExecStep(arguments);
+    CLIStep exec = new DataCommandFunction.SelectExecStep(arguments);
-    ArrayList<DistributedMember> dsMemberList;
+    public ArrayList<DistributedMember> dsMemberList;
-    MemberPRInfo() {
+    public MemberPRInfo() {
-    @Override
