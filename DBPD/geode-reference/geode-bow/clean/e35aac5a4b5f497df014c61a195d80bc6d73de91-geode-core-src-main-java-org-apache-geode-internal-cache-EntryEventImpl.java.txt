Merge branch 'release/1.5.0'

-import org.apache.geode.cache.EntryEvent;
+import org.apache.geode.internal.cache.tx.RemoteOperationMessage;
+import org.apache.geode.internal.cache.tx.RemotePutMessage;
-public class EntryEventImpl
-    implements EntryEvent, InternalCacheEvent, DataSerializableFixedID, EntryOperation, Releasable {
+public class EntryEventImpl implements InternalEntryEvent, InternalCacheEvent,
+    DataSerializableFixedID, EntryOperation, Releasable {
-  public transient LocalRegion region;
+  private transient LocalRegion region;
-        this.newValue = CachedDeserializableFactory.create(this.newValueBytes);
+        this.newValue = null; // set later in generateNewValueFromBytesIfNeeded
+        this.newValueBytes = null;
+        this.cachedSerializedNewValue = null;
-      this.oldValue = CachedDeserializableFactory.create(this.oldValueBytes);
+      this.oldValue = null; // set later in basicGetOldValue
+      this.oldValueBytes = null;
-    this.keyInfo = this.region.getKeyInfo(key);
+    this.keyInfo = region.getKeyInfo(key);
-    this.keyInfo = this.region.getKeyInfo(key, newVal, callbackArgument);
+    this.keyInfo = region.getKeyInfo(key, newVal, callbackArgument);
-      basicSetNewValue(newVal);
+      basicSetNewValue(newVal, false);
-    this.txId = this.region.getTXId();
+    this.txId = region.getTXId();
-    region = other.region;
+    setRegion(other.getRegion());
-    basicSetNewValue(other.basicGetNewValue());
+    basicSetNewValue(other.basicGetNewValue(), false);
-  void setGenerateCallbacks(boolean b) {
+  public void setGenerateCallbacks(boolean b) {
-      if (isOriginRemote() && this.region.isProxy()) {
+      if (isOriginRemote() && getRegion().isProxy()) {
-              return oldValueCD.getDeserializedWritableCopy(this.region, this.re);
+              return oldValueCD.getDeserializedWritableCopy(getRegion(), this.re);
-              return oldValueCD.getDeserializedValue(this.region, this.re);
+              return oldValueCD.getDeserializedValue(getRegion(), this.re);
-        result = this.region.getValueInVMOrDiskWithoutFaultIn(getKey());
+        result = getRegion().getValueInVMOrDiskWithoutFaultIn(getKey());
-      result = OffHeapHelper.copyIfNeeded(result);
+      result = OffHeapHelper.copyIfNeeded(result, getRegion().getCache());
-  protected void basicSetNewValue(@Retained(ENTRY_EVENT_NEW_VALUE) Object v) {
+  protected void basicSetNewValue(@Retained(ENTRY_EVENT_NEW_VALUE) Object v,
+      boolean clearCachedSerializedAndBytes) {
-    this.cachedSerializedNewValue = null;
+    if (clearCachedSerializedAndBytes) {
+      this.newValueBytes = null;
+      this.cachedSerializedNewValue = null;
+    }
+  }
+
+  private void generateNewValueFromBytesIfNeeded() {
+    if (this.newValue != null) {
+      // no need to generate a new value
+      return;
+    }
+    byte[] bytes = this.newValueBytes;
+    if (bytes != null) {
+      this.newValue = CachedDeserializableFactory.create(bytes, getRegion().getCache());
+    }
+    generateNewValueFromBytesIfNeeded();
+    this.oldValueBytes = null;
+          this.oldValueBytes = null;
+          this.oldValueBytes = null;
+    if (result == null) {
+      byte[] bytes = this.oldValueBytes;
+      if (bytes != null) {
+        result = CachedDeserializableFactory.create(bytes, getRegion().getCache());
+        this.oldValue = result;
+      }
+    }
-      result = OffHeapHelper.copyIfNeeded(result);
+      result = OffHeapHelper.copyIfNeeded(result, getRegion().getCache());
-            v = newValueCD.getDeserializedWritableCopy(this.region, this.re);
+            v = newValueCD.getDeserializedWritableCopy(getRegion(), this.re);
-            v = newValueCD.getDeserializedValue(this.region, this.re);
+            v = newValueCD.getDeserializedValue(getRegion(), this.re);
-    basicSetNewValue(obj);
+    basicSetNewValue(obj, true);
-      if (getCachedSerializedNewValue() != null) {
-        importer.importNewBytes(getCachedSerializedNewValue(), true);
-        return;
-      } else if (this.newValueBytes != null && this.newValue instanceof CachedDeserializable) {
-        importer.importNewBytes(this.newValueBytes, true);
+      byte[] serializedNewValue = getCachedSerializedNewValue();
+      if (serializedNewValue == null) {
+        serializedNewValue = this.newValueBytes;
+      }
+      if (serializedNewValue != null) {
+        importer.importNewBytes(serializedNewValue, true);
-      if (this.oldValueBytes != null && this.oldValue instanceof CachedDeserializable) {
+      if (this.oldValueBytes != null) {
-    basicSetNewValue(getCachedDeserializable(obj, this));
-  }
-
-  public static Object getCachedDeserializable(Object obj) {
-    return getCachedDeserializable(obj, null);
+    basicSetNewValue(getCachedDeserializable(obj, this), false);
-      cd = CachedDeserializableFactory.create(obj, objSize);
+      cd = CachedDeserializableFactory.create(obj, objSize, ev.getRegion().getCache());
-      cd = CachedDeserializableFactory.create(b);
+      cd = CachedDeserializableFactory.create(b, ev.getRegion().getCache());
-      newVal = CachedDeserializableFactory.create(serializedValue);
+      newVal = CachedDeserializableFactory.create(serializedValue, getRegion().getCache());
+    basicSetNewValue(newVal, false);
-    basicSetNewValue(newVal);
-    this.oldValueBytes = serializedOldValue;
-      ov = CachedDeserializableFactory.create(serializedOldValue);
+      ov = CachedDeserializableFactory.create(serializedOldValue, getRegion().getCache());
+    this.oldValueBytes = serializedOldValue;
-    if (this.oldValue == null) {
+    if (this.oldValue == null && this.oldValueBytes == null) {
-        if (requireOldValue || areOldValuesEnabled() || this.region instanceof HARegion // fix for
-                                                                                        // bug
-        // 37909
-        ) {
+        if (requireOldValue || areOldValuesEnabled() || getRegion() instanceof HARegion) {
-          if (ov == null)
+          if (ov == null) {
+          }
-      FilterProfile fp = this.region.getFilterProfile();
+      FilterProfile fp = getRegion().getFilterProfile();
-  void setRegionEntry(RegionEntry re) {
+  public void setRegionEntry(RegionEntry re) {
-    if (this.deltaBytes != null && this.newValue == null) {
+    if (this.deltaBytes != null && this.newValue == null && this.newValueBytes == null) {
-      this.region.generateAndSetVersionTag(this, reentry);
+      getRegion().generateAndSetVersionTag(this, reentry);
+    generateNewValueFromBytesIfNeeded();
-      this.region.regionInvalid = false;
+      getRegion().regionInvalid = false;
-    if (v instanceof org.apache.geode.Delta && region.isUsedForPartitionedRegionBucket()) {
+    if (v instanceof org.apache.geode.Delta && getRegion().isUsedForPartitionedRegionBucket()) {
-        vSize = CachedDeserializableFactory.calcMemSize(v, region.getObjectSizer(), false);
+        vSize = CachedDeserializableFactory.calcMemSize(v, getRegion().getObjectSizer(), false);
-      v = CachedDeserializableFactory.create(v, vSize);
-      basicSetNewValue(v);
+      v = CachedDeserializableFactory.create(v, vSize, getRegion().getCache());
+      basicSetNewValue(v, true);
-    Object preparedV = reentry.prepareValueForCache(this.region, v, this, false);
+    Object preparedV = reentry.prepareValueForCache(getRegion(), v, this, false);
-          basicSetNewValue(v);
+          basicSetNewValue(v, false);
-        IndexManager idxManager = IndexUtils.getIndexManager(this.region, false);
+        IndexManager idxManager =
+            IndexUtils.getIndexManager(getRegion().getCache(), getRegion(), false);
-      lr = this.region;
+      lr = getRegion();
-    if (!this.region.hasSeenEvent(this)) {
+    if (!getRegion().hasSeenEvent(this)) {
-        this.region.getCachePerfStats().incDeltaFailedUpdates();
+        getRegion().getCachePerfStats().incDeltaFailedUpdates();
-      FilterProfile fp = this.region.getFilterProfile();
+      FilterProfile fp = getRegion().getFilterProfile();
-      boolean copy = this.region.getCompressor() == null && (this.region.isCopyOnRead()
-          || this.region.getCloningEnabled() || (fp != null && fp.getCqCount() > 0));
+      boolean copy = getRegion().getCompressor() == null && (getRegion().isCopyOnRead()
+          || getRegion().getCloningEnabled() || (fp != null && fp.getCqCount() > 0));
-          value = ((CachedDeserializable) value).getDeserializedWritableCopy(this.region, re);
+          value = ((CachedDeserializable) value).getDeserializedWritableCopy(getRegion(), re);
-          value = ((CachedDeserializable) value).getDeserializedValue(this.region, re);
+          value = ((CachedDeserializable) value).getDeserializedValue(getRegion(), re);
-        this.region.getCachePerfStats().endDeltaUpdate(start);
+        getRegion().getCachePerfStats().endDeltaUpdate(start);
-          this.region.getCachePerfStats().incDeltaFailedUpdates();
+          getRegion().getCachePerfStats().incDeltaFailedUpdates();
-              CachedDeserializableFactory.calcMemSize(value, region.getObjectSizer(), false);
+              CachedDeserializableFactory.calcMemSize(value, getRegion().getObjectSizer(), false);
-        value = CachedDeserializableFactory.create(value, valueSize);
+        value = CachedDeserializableFactory.create(value, valueSize, getRegion().getCache());
-      this.region.getCachePerfStats().incDeltaFailedUpdates();
+      getRegion().getCachePerfStats().incDeltaFailedUpdates();
-        pv = OffHeapHelper.copyIfNeeded(v);
+        pv = OffHeapHelper.copyIfNeeded(v, getRegion().getCache());
-      RegionEntry re = this.region.getRegionEntry(getKey());
+      RegionEntry re = getRegion().getRegionEntry(getKey());
-      Object v = re.getValueRetain(this.region, true);
+      Object v = re.getValueRetain(getRegion(), true);
-    if (this.region instanceof HARegion) {
+    if (getRegion() instanceof HARegion) {
+    if (this.newValueBytes != null) {
+      return true;
+    }
+    if (this.oldValueBytes != null) {
+      return true;
+    }
-    if (isOriginRemote() && this.region.isProxy()) {
+    if (isOriginRemote() && getRegion().isProxy()) {
-      return new SerializedCacheValueImpl(this, this.region, this.re, cd, this.oldValueBytes);
+      return new SerializedCacheValueImpl(this, getRegion(), this.re, cd, this.oldValueBytes);
-
-  public LocalRegion getLocalRegion() {
-    return this.region;
-  }
-
-    RegionEntry reentry = this.region.entries.getEntry(this.getKey());
+    RegionEntry reentry = getRegion().entries.getEntry(this.getKey());
-      Object v = reentry.getValueOffHeapOrDiskWithoutFaultIn(this.region);
+      Object v = reentry.getValueOffHeapOrDiskWithoutFaultIn(getRegion());
-    if (this.versionTag != null) {
+    if (this.versionTag != null && getRegion().getConcurrencyChecksEnabled()) {
-      LocalRegion region = this.getLocalRegion();
+      LocalRegion region = this.getRegion();
-    return PeerTypeRegistration.REGION_FULL_PATH.equals(this.region.getFullPath());
+    return PeerTypeRegistration.REGION_FULL_PATH.equals(getRegion().getFullPath());
-    return versionTag == null && region.concurrencyChecksEnabled && region.getServerProxy() != null
-        && !op.isLocal() && !isOriginRemote();
+    return versionTag == null && getRegion().getConcurrencyChecksEnabled()
+        && getRegion().getServerProxy() != null && !op.isLocal() && !isOriginRemote();
-    LocalRegion lr = this.region;
+    LocalRegion lr = getRegion();
-          this.oldValue = OffHeapHelper.copyAndReleaseIfNeeded(ov);
+          this.oldValue = OffHeapHelper.copyAndReleaseIfNeeded(ov, getRegion().getCache());
-          this.oldValue = OffHeapHelper.copyAndReleaseIfNeeded(ov);
+          this.oldValue = OffHeapHelper.copyAndReleaseIfNeeded(ov, getRegion().getCache());
-        this.newValue = OffHeapHelper.copyAndReleaseIfNeeded(nv);
+        this.newValue = OffHeapHelper.copyAndReleaseIfNeeded(nv, getRegion().getCache());
