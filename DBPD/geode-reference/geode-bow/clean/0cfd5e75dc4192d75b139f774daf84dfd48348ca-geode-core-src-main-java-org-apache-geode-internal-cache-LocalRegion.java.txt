GEODE-6761: Reduce garbage in LocalRegion.initializationThread (#3750)

* Refactor static ints to enum type.
* Cleanup method names.
* Replace null case with default value.
* Added unit test

Co-authored-by: Kamilla Aslami <kaslami@pivotal.io>
Co-authored-by: Jacob Barrett <jbarrett@pivotal.io>


+import static org.apache.geode.internal.cache.LocalRegion.InitializationLevel.AFTER_INITIAL_IMAGE;
+import static org.apache.geode.internal.cache.LocalRegion.InitializationLevel.ANY_INIT;
+import static org.apache.geode.internal.cache.LocalRegion.InitializationLevel.BEFORE_INITIAL_IMAGE;
-  public static final int AFTER_INITIAL_IMAGE = 0;
-
-  public static final int BEFORE_INITIAL_IMAGE = 1;
-
-  public static final int ANY_INIT = 2;
+  public enum InitializationLevel {
+    AFTER_INITIAL_IMAGE, BEFORE_INITIAL_IMAGE, ANY_INIT
+  }
-  private static final ThreadLocal<Integer> initializationThread = new ThreadLocal<>();
+  private static final ThreadLocal<InitializationLevel> initializationThread =
+      ThreadLocal.withInitial(() -> AFTER_INITIAL_IMAGE);
-    int initLevel = 0;
+    // Release the initialization latch for index creation.
+    final InitializationLevel initLevel = setThreadInitLevelRequirement(ANY_INIT);
-      // Release the initialization latch for index creation.
-      initLevel = setThreadInitLevelRequirement(ANY_INIT);
-  public static int setThreadInitLevelRequirement(int level) {
-    int oldLevel = threadInitLevelRequirement();
-    if (level == AFTER_INITIAL_IMAGE) {
-      // if setting to default, just reset
-      initializationThread.remove();
-    } else {
+  public static InitializationLevel setThreadInitLevelRequirement(InitializationLevel level) {
+    final InitializationLevel oldLevel = getThreadInitLevelRequirement();
+    if (level != oldLevel) {
-  static int threadInitLevelRequirement() {
-    Integer initLevel = initializationThread.get();
-    if (initLevel == null) {
-      return AFTER_INITIAL_IMAGE;
-    }
-    return initLevel;
+  static InitializationLevel getThreadInitLevelRequirement() {
+    return initializationThread.get();
-    switch (threadInitLevelRequirement()) {
+    switch (getThreadInitLevelRequirement()) {
-            "Unexpected threadInitLevelRequirement");
+            "Unexpected getThreadInitLevelRequirement");
-    switch (threadInitLevelRequirement()) {
+    switch (getThreadInitLevelRequirement()) {
-            "Unexpected threadInitLevelRequirement");
+            "Unexpected getThreadInitLevelRequirement");
-    if (region == null && threadInitLevelRequirement() != ANY_INIT) {
+    if (region == null && getThreadInitLevelRequirement() != ANY_INIT) {
-    final int oldLevel = setThreadInitLevelRequirement(ANY_INIT);
+    final InitializationLevel oldLevel = setThreadInitLevelRequirement(ANY_INIT);
