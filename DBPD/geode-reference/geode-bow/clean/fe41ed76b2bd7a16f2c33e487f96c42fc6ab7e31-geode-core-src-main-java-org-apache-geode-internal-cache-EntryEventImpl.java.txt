GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
-import org.apache.geode.*;
-import org.apache.geode.cache.*;
+import static org.apache.geode.internal.offheap.annotations.OffHeapIdentifier.*;
+
+import java.io.ByteArrayInputStream;
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.function.Function;
+
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.CopyHelper;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.DeltaSerializationException;
+import org.apache.geode.GemFireIOException;
+import org.apache.geode.InvalidDeltaException;
+import org.apache.geode.SerializationException;
+import org.apache.geode.SystemFailure;
+import org.apache.geode.cache.EntryEvent;
+import org.apache.geode.cache.EntryNotFoundException;
+import org.apache.geode.cache.EntryOperation;
+import org.apache.geode.cache.Operation;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.SerializedCacheValue;
+import org.apache.geode.cache.TransactionId;
-import org.apache.geode.internal.*;
+import org.apache.geode.internal.Assert;
+import org.apache.geode.internal.ByteArrayDataInput;
+import org.apache.geode.internal.DSFIDFactory;
+import org.apache.geode.internal.DataSerializableFixedID;
+import org.apache.geode.internal.HeapDataOutputStream;
+import org.apache.geode.internal.InternalDataSerializer;
+import org.apache.geode.internal.Sendable;
+import org.apache.geode.internal.Version;
-import org.apache.geode.internal.offheap.*;
+import org.apache.geode.internal.offheap.OffHeapHelper;
+import org.apache.geode.internal.offheap.OffHeapRegionEntryHelper;
+import org.apache.geode.internal.offheap.ReferenceCountHelper;
+import org.apache.geode.internal.offheap.Releasable;
+import org.apache.geode.internal.offheap.StoredObject;
-import org.apache.logging.log4j.Logger;
-
-import java.io.*;
-import java.util.function.Function;
-
-import static org.apache.geode.internal.offheap.annotations.OffHeapIdentifier.ENTRY_EVENT_NEW_VALUE;
-import static org.apache.geode.internal.offheap.annotations.OffHeapIdentifier.ENTRY_EVENT_OLD_VALUE;
+ *
+ * must be public for DataSerializableFixedID
-// must be public for DataSerializableFixedID
+
-  // private long eventId;
+
+
-
-
-  // private static long eventID = 0;
-
-
+
-  public EntryEventImpl() {}
+  public EntryEventImpl() {
+    // do nothing
+  }
-    /**
+    /*
-    EntryEventImpl entryEvent = new EntryEventImpl(region, op, key, newValue, callbackArgument,
-        originRemote, distributedMember, generateCallbacks, eventID);
-    return entryEvent;
+    return new EntryEventImpl(region, op, key, newValue, callbackArgument, originRemote,
+        distributedMember, generateCallbacks, eventID);
-    EntryEventImpl entryEvent = new EntryEventImpl(region, op, key, originRemote, distributedMember,
-        generateCallbacks, fromRILocalDestroy);
-    return entryEvent;
+    return new EntryEventImpl(region, op, key, originRemote, distributedMember, generateCallbacks,
+        fromRILocalDestroy);
-    EntryEventImpl entryEvent = new EntryEventImpl(region, op, key, newVal, callbackArgument,
-        originRemote, distributedMember, generateCallbacks, initializeId);
-    return entryEvent;
+    return new EntryEventImpl(region, op, key, newVal, callbackArgument, originRemote,
+        distributedMember, generateCallbacks, initializeId);
-      result = ((StoredObject) result).getDeserializedForReading();
+      result = ((CachedDeserializable) result).getDeserializedForReading();
-      result = ((StoredObject) result).getDeserializedForReading();
+      result = ((CachedDeserializable) result).getDeserializedForReading();
-   * 
-   * @throws RegionClearedException
-   * 
-   * @throws RegionClearedException
-    } catch (EntryNotFoundException ex) {
+    } catch (EntryNotFoundException ignore) {
-    } catch (IllegalStateException ex) {
+    } catch (IllegalStateException ignore) {
-    } catch (IllegalStateException ex) {
+    } catch (IllegalStateException ignore) {
-    // if (this.partitionMessage != null) {
-    // buf.append("; partitionMessage=");
-    // buf.append(this.partitionMessage);
-    // }
-      buf.append(";[" + this.deltaBytes.length + " deltaBytes]");
+      buf.append(";[").append(this.deltaBytes.length).append(" deltaBytes]");
-    // else {
-    // buf.append(";[no deltaBytes]");
-    // }
-   * 
-   * @param eventType
-   * 
-   * @param deltaBytes
-   * @param suggestedTime
-          ((StoredObject) ov).release();
+          ((Releasable) ov).release();
-          ((StoredObject) ov).release();
+          ((Releasable) ov).release();
