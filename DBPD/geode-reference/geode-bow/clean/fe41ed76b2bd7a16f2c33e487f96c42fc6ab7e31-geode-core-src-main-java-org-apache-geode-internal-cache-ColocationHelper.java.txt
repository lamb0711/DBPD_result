GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.cache.DiskStore;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-
-import org.apache.logging.log4j.Logger;
-
-import java.io.Serializable;
-import java.util.*;
-import java.util.Map.Entry;
- * 
- * 
+ *
-
-  /** Logging mechanism for debugging */
-   * @param partitionedRegion
-        } catch (EntryDestroyedException ede) {
+        } catch (EntryDestroyedException ignore) {
-              || ("/" + prConf.getColocatedWith()).equals(tempToBeColocatedWith.getFullPath())) {
+              || (Region.SEPARATOR + prConf.getColocatedWith())
+                  .equals(tempToBeColocatedWith.getFullPath())) {
-        try {
-          prConf = (PartitionRegionConfig) prRoot.get(getRegionIdentifier(colocatedWithRegionName));
-        } catch (EntryDestroyedException ede) {
-          throw ede;
-        }
+        prConf = (PartitionRegionConfig) prRoot.get(getRegionIdentifier(colocatedWithRegionName));
-      GemFireCacheImpl cache = region.getCache();
-      Collection<DiskStoreImpl> stores = cache.listDiskStores();
+      InternalCache cache = region.getCache();
+      Collection<DiskStore> stores = cache.listDiskStores();
-      for (DiskStoreImpl diskStore : stores) {
+      for (DiskStore diskStore : stores) {
-        for (Map.Entry<String, PRPersistentConfig> entry : diskStore.getAllPRs().entrySet()) {
+        for (Map.Entry<String, PRPersistentConfig> entry : ((DiskStoreImpl) diskStore).getAllPRs()
+            .entrySet()) {
-   * @param partitionedRegion
-   * @param partitionedRegion
-   * @param partitionedRegion
-        } catch (EntryDestroyedException ede) {
+        } catch (EntryDestroyedException ignore) {
