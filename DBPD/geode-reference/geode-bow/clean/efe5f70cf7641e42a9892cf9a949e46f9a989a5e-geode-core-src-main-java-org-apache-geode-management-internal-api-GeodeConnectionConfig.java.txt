GEODE-7715: Introduce Transport and Config interfaces to ClusterManagementServiceBuilder (#4601)

This introduces several new interfaces to the `ClusterManagementService`. These are:

- `ClusterManagmentServiceTransport` which represents the message exchange between client and endpoint.
- `ClusterManagementServiceConnectionConfig` which is a data object and represents various properties required to establish a connection.

+ *
+import javax.net.ssl.HostnameVerifier;
-import org.apache.http.conn.ssl.NoopHostnameVerifier;
+import org.apache.geode.annotations.Experimental;
+import org.apache.geode.cache.Cache;
-import org.apache.geode.management.api.ClusterManagementService;
-import org.apache.geode.management.builder.ClusterManagementServiceBuilder;
-import org.apache.geode.management.internal.PlainClusterManagementServiceBuilder;
+import org.apache.geode.management.api.BaseConnectionConfig;
+import org.apache.geode.management.api.ConnectionConfig;
+import org.apache.geode.management.client.ClusterManagementServiceBuilder;
+/**
+ * Concrete implementation of {@link ConnectionConfig} which can be used
+ * to derive most (if not all) of the connection properties from an existing {@link Cache} or
+ * {@link ClientCache}.
+ *
+ * @see ClusterManagementServiceBuilder
+ */
+@Experimental
+public class GeodeConnectionConfig
+    implements ConnectionConfig {
-public class GeodeClusterManagementServiceBuilder implements
-    ClusterManagementServiceBuilder.GeodeBuilder {
+  private static final Logger logger = LogService.getLogger();
+
+  private BaseConnectionConfig connectionConfig;
-  private static final Logger logger = LogService.getLogger();
-
-  private GemFireCache cache;
-
-  private PlainClusterManagementServiceBuilder javaBuilder =
-      new PlainClusterManagementServiceBuilder();
-
-  public GeodeClusterManagementServiceBuilder setCredentials(String username,
-      String password) {
-    javaBuilder.setCredentials(username, password);
-    return this;
-  }
-
-  @Override
-  public ClusterManagementServiceBuilder.GeodeBuilder setAuthToken(String authToken) {
-    javaBuilder.setAuthToken(authToken);
-    return this;
-  }
-
-  public GeodeClusterManagementServiceBuilder setCache(GemFireCache cache) {
+  public GeodeConnectionConfig(GemFireCache cache) {
+  }
-    this.cache = cache;
+  @Override
+  public String getHost() {
+    return connectionConfig.getHost();
+  }
+
+  @Override
+  public int getPort() {
+    return connectionConfig.getPort();
+  }
+
+  @Override
+  public String getAuthToken() {
+    return connectionConfig.getAuthToken();
+  }
+
+  public GeodeConnectionConfig setAuthToken(String authToken) {
+    connectionConfig.setAuthToken(authToken);
-  public ClusterManagementService build() {
-    if (cache == null) {
-      throw new IllegalArgumentException("Need a cache instance in order to build the service.");
-    }
-    return javaBuilder.build();
+  @Override
+  public SSLContext getSslContext() {
+    return connectionConfig.getSslContext();
+  }
+
+  @Override
+  public String getUsername() {
+    return connectionConfig.getUsername();
+  }
+
+  public GeodeConnectionConfig setUsername(String username) {
+    connectionConfig.setUsername(username);
+    return this;
+  }
+
+  @Override
+  public String getPassword() {
+    return connectionConfig.getPassword();
+  }
+
+  public GeodeConnectionConfig setPassword(String password) {
+    connectionConfig.setPassword(password);
+    return this;
+  }
+
+  @Override
+  public HostnameVerifier getHostnameVerifier() {
+    return connectionConfig.getHostnameVerifier();
+  }
+
+  @Override
+  public boolean getFollowRedirects() {
+    return connectionConfig.getFollowRedirects();
+  }
+
+  public GeodeConnectionConfig setFollowRedirects(boolean followRedirects) {
+    connectionConfig.setFollowRedirects(followRedirects);
+    return this;
+  }
+
+  public GeodeConnectionConfig setHostnameVerifier(
+      HostnameVerifier hostnameVerifier) {
+    connectionConfig.setHostnameVerifier(hostnameVerifier);
+    return this;
+    DistributionConfig config;
+    ClusterManagementServiceInfo cmsInfo;
+
-    DistributionConfig config = ((GemFireCacheImpl) clientCache).getSystem().getConfig();
+    config = ((GemFireCacheImpl) clientCache).getSystem().getConfig();
-    ClusterManagementServiceInfo cmsInfo = null;
+    cmsInfo = null;
-        cmsInfo =
-            (ClusterManagementServiceInfo) client.requestToServer(locator,
-                new ClusterManagementServiceInfoRequest(), 1000, true);
+        cmsInfo = (ClusterManagementServiceInfo) client.requestToServer(locator,
+            new ClusterManagementServiceInfoRequest(), 1000, true);
+
-    javaBuilder.setHostAddress(cmsInfo.getHostName(), cmsInfo.getHttpPort());
+    connectionConfig = new BaseConnectionConfig(cmsInfo.getHostName(),
+        cmsInfo.getHttpPort());
+
-    if (cmsInfo.isSecured() && javaBuilder.getUsername() == null) {
+    if (cmsInfo.isSecured() && getUsername() == null) {
-      javaBuilder.setCredentials(username, password);
+      connectionConfig.setUsername(username);
+      connectionConfig.setPassword(password);
-      SSLContext sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
-      javaBuilder.setSslContext(sslContext);
-      javaBuilder.setHostnameVerifier(new NoopHostnameVerifier());
+      connectionConfig.setSslContext(SSLUtil.createAndConfigureSSLContext(sslConfig, false));
-
