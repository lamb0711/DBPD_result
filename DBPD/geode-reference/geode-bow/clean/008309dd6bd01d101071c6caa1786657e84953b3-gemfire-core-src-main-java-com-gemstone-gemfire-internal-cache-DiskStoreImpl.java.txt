Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.ValueWrapper;
+import com.gemstone.gemfire.internal.offheap.MemoryChunkWithRefCount;
+import com.gemstone.gemfire.internal.offheap.OffHeapHelper;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-import com.gemstone.org.jgroups.util.StringId;
+import com.gemstone.gemfire.i18n.StringId;
-   * @param isSerializedObject
-   *          Do the bytes in <code>value</code> contain a serialized object (or
-   *          an actually <code>byte</code> array)?
-  final void put(LocalRegion region, DiskEntry entry, byte[] value,
-      boolean isSerializedObject, boolean async) throws RegionClearedException {
+  final void put(LocalRegion region, DiskEntry entry, ValueWrapper value,
+      boolean async) throws RegionClearedException {
-            oplogSet.create(region, entry, value, isSerializedObject, async);
+            oplogSet.create(region, entry, value, async);
-            oplogSet.modify(region, entry, value, isSerializedObject, async);
+            oplogSet.modify(region, entry, value, async);
-              region.entries.clear(null);
+              region.clearEntries(null);
-      region.entries.clear(rvv);
+      region.clearEntries(rvv);
-  void close() {
+  public void close() {
+  final DiskAccessException getDiskAccessException() {
+    return diskException.get();
+  }
+
-    return this.oplogCompactor == null || this.oplogCompactor.keepCompactorRunning();
+    return diskException.get() == null && (this.oplogCompactor == null || this.oplogCompactor.keepCompactorRunning());
-        region.entries.clear(null);
+        region.closeEntries();
-        region.entries.clear(null);
+        region.closeEntries();
-        region.entries.clear(null);
+        region.closeEntries();
-        region.entries.clear(null);
+        region.closeEntries();
-    PersistentMemberID id = new PersistentMemberID(getDiskStoreID(), memberId.getIpAddress(),
+    PersistentMemberID id = new PersistentMemberID(getDiskStoreID(), memberId.getInetAddress(),
-        .getIpAddress();
+        .getInetAddress();
-      String statisticsEnabledOption, boolean printToConsole) {
+      String statisticsEnabledOption, String offHeapOption, boolean printToConsole) {
-            statisticsEnabledOption, printToConsole);
+            statisticsEnabledOption, offHeapOption, printToConsole);
-          statisticsEnabledOption, printToConsole);
+          statisticsEnabledOption, offHeapOption, printToConsole);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-        LRUAlgorithm ec = ea.createEvictionController(null);
+        LRUAlgorithm ec = ea.createEvictionController(null, dr.getOffHeap());
-  private Collection<DiskRegionView> getKnown() {
+  public Collection<DiskRegionView> getKnown() {
+      String offHeapOption,
-          statisticsEnabledOption, printToConsole);
+          statisticsEnabledOption, offHeapOption, printToConsole);
