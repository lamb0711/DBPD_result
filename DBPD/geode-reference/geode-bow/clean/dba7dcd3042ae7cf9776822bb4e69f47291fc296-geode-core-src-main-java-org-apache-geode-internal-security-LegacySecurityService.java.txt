Merge branch 'develop' into feature/GEODE-3071

-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.ResourcePermission;
-import org.apache.geode.security.SecurityManager;
-import org.apache.shiro.subject.Subject;
-import org.apache.shiro.util.ThreadState;
-
+import org.apache.commons.lang.StringUtils;
+import org.apache.shiro.subject.Subject;
+import org.apache.shiro.util.ThreadState;
+
+import org.apache.geode.management.internal.security.ResourceOperation;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.ResourcePermission;
+import org.apache.geode.security.SecurityManager;
+
- * Legacy security service with ClientAuthenticator and/or PeerAuthenticator.
+ * implementing SecurityService when only legacy authenticators are specified
+  LegacySecurityService() {
+    hasClientAuthenticator = false;
+    hasPeerAuthenticator = false;
+  }
+
-    this.hasClientAuthenticator = clientAuthenticator != null;
-    this.hasPeerAuthenticator = peerAuthenticator != null;
-  }
-
-  @Override
-  public void initSecurity(final Properties securityProps) {
-    // nothing
-  }
-
-  @Override
-  public ThreadState bindSubject(final Subject subject) {
-    return null;
-  }
-
-  @Override
-  public Subject getSubject() {
-    return null;
-  }
-
-  @Override
-  public Subject login(final Properties credentials) {
-    return null;
-  }
-
-  @Override
-  public void logout() {
-    // nothing
-  }
-
-  @Override
-  public Callable associateWith(final Callable callable) {
-    return null;
-  }
-
-  @Override
-  public void authorize(ResourcePermission.Resource resource,
-      ResourcePermission.Operation operation, String target, String key) {
-
-  }
-
-  @Override
-  public void authorize(ResourcePermission.Resource resource,
-      ResourcePermission.Operation operation, ResourcePermission.Target target, String key) {
-
-  }
-
-  @Override
-  public void authorize(ResourcePermission.Resource resource,
-      ResourcePermission.Operation operation, ResourcePermission.Target target) {
-
-  }
-
-  @Override
-  public void authorizeClusterManage() {
-    // nothing
-  }
-
-  @Override
-  public void authorizeClusterWrite() {
-    // nothing
-  }
-
-  @Override
-  public void authorizeClusterRead() {
-    // nothing
-  }
-
-  @Override
-  public void authorizeDataManage() {
-    // nothing
-  }
-
-  @Override
-  public void authorizeDataWrite() {
-    // nothing
-  }
-
-  @Override
-  public void authorizeDataRead() {
-    // nothing
-  }
-
-  @Override
-  public void authorizeDiskManage() {
-
-  }
-
-  @Override
-  public void authorizeGatewayManage() {
-
-  }
-
-  @Override
-  public void authorizeJarManage() {
-
-  }
-
-  @Override
-  public void authorizeQueryManage() {
-
-  }
-
-  @Override
-  public void authorizeRegionManage(final String regionName) {
-    // nothing
-  }
-
-  @Override
-  public void authorizeRegionManage(final String regionName, final String key) {
-    // nothing
-  }
-
-  @Override
-  public void authorizeRegionWrite(final String regionName) {
-    // nothing
-  }
-
-  @Override
-  public void authorizeRegionWrite(final String regionName, final String key) {
-    // nothing
-  }
-
-  @Override
-  public void authorizeRegionRead(final String regionName) {
-    // nothing
-  }
-
-  @Override
-  public void authorizeRegionRead(final String regionName, final String key) {
-    // nothing
-  }
-
-  @Override
-  public void authorize(final ResourcePermission context) {
-    // nothing
-  }
-
-  @Override
-  public void close() {
-    // nothing
-  }
-
-  @Override
-  public boolean needPostProcess() {
-    return false;
-  }
-
-  @Override
-  public Object postProcess(final String regionPath, final Object key, final Object value,
-      final boolean valueIsSerialized) {
-    return value;
-  }
-
-  @Override
-  public Object postProcess(final Object principal, final String regionPath, final Object key,
-      final Object value, final boolean valueIsSerialized) {
-    return value;
+    this.hasClientAuthenticator = StringUtils.isNotBlank(clientAuthenticator);
+    this.hasPeerAuthenticator = StringUtils.isNotBlank(peerAuthenticator);
-  @Override
-  public SecurityManager getSecurityManager() {
-    return null;
-  }
-
-  @Override
-  public PostProcessor getPostProcessor() {
-    return null;
-  }
