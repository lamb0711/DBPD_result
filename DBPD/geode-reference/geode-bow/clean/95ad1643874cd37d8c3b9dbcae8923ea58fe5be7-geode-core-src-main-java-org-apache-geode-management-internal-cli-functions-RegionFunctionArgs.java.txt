Adding option partition-resolver in gfsh while creating a region.

+  private final boolean isPartitionResolver;
+  private String partitionResolver;
-      Boolean offHeap, Boolean mcastEnabled) {
+      Boolean offHeap, Boolean mcastEnabled, final String partitionResolver) {
-    this.partitionArgs = new PartitionArgs(prColocatedWith, prLocalMaxMemory, prRecoveryDelay,
-        prRedundantCopies, prStartupRecoveryDelay, prTotalMaxMemory, prTotalNumBuckets);
+    this.partitionArgs =
+        new PartitionArgs(prColocatedWith, prLocalMaxMemory, prRecoveryDelay, prRedundantCopies,
+            prStartupRecoveryDelay, prTotalMaxMemory, prTotalNumBuckets, partitionResolver);
+    this.isPartitionResolver = (partitionResolver != null);
+    if (this.isPartitionResolver) {
+      this.partitionResolver = partitionResolver;
+    }
-      RegionAttributes<?, ?> regionAttributes) {
+      RegionAttributes<?, ?> regionAttributes, final String partitionResolver) {
-        mcastEnabled);
+        mcastEnabled, partitionResolver);
+   * @return the PartitionResolver
+   */
+  public String getPartitionResolver() {
+    return this.partitionResolver;
+  }
+
+  /**
+   * @return True if Partition Resolver is set otherwise False
+   */
+  public Boolean isPartitionResolverSet() {
+    return this.isPartitionResolver;
+  }
+
+  /**
+    private final boolean isPartitionResolver;
+    private String partitionResolver;
-        Integer prTotalNumBuckets) {
+        Integer prTotalNumBuckets, String partitionResolver) {
+      this.isPartitionResolver = partitionResolver != null;
+      if (this.isPartitionResolver) {
+        this.partitionResolver = partitionResolver;
+        this.hasPartitionAttributes = true;
+        userSpecifiedPartitionAttributes.add(CliStrings.CREATE_REGION__PARTITION_RESOLVER);
+      }
+
