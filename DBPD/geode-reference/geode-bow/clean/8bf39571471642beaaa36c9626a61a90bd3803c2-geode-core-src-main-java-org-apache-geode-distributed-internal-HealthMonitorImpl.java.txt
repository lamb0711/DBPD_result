Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
+
+ * 
-  
+
-  /** The current health status
+  /**
+   * The current health status
-   * @see GemFireHealth#OKAY_HEALTH */ 
+   * @see GemFireHealth#OKAY_HEALTH
+   */
-  
+
-  public HealthMonitorImpl(InternalDistributedMember owner,
-                           GemFireHealthConfig config,
-                           DistributionManager dm) {
+  public HealthMonitorImpl(InternalDistributedMember owner, GemFireHealthConfig config,
+      DistributionManager dm) {
-    this.t = new Thread(tg, this, LocalizedStrings.HealthMonitorImpl_HEALTH_MONITOR_OWNED_BY_0.toLocalizedString(owner));
+    this.t = new Thread(tg, this,
+        LocalizedStrings.HealthMonitorImpl_HEALTH_MONITOR_OWNED_BY_0.toLocalizedString(owner));
-  
+
+
+
+
-   * Starts the monitor so that it will periodically do health checks. 
+   * Starts the monitor so that it will periodically do health checks.
-      throw new RuntimeException(LocalizedStrings.HealthMonitorImpl_A_HEALTH_MONITOR_CAN_NOT_BE_STARTED_ONCE_IT_HAS_BEEN_STOPPED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.HealthMonitorImpl_A_HEALTH_MONITOR_CAN_NOT_BE_STARTED_ONCE_IT_HAS_BEEN_STOPPED
+              .toLocalizedString());
-      logger.debug("Starting health monitor.  Health will be evaluated every {} seconds.", (sleepTime/1000));
+      logger.debug("Starting health monitor.  Health will be evaluated every {} seconds.",
+          (sleepTime / 1000));
-//        SystemFailure.checkFailure(); dm's stopper will do this
+        // SystemFailure.checkFailure(); dm's stopper will do this
-        logger.warn(LocalizedMessage.create(LocalizedStrings.HealthMonitorImpl_UNEXPECTED_STOP_OF_HEALTH_MONITOR), ex);
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.HealthMonitorImpl_UNEXPECTED_STOP_OF_HEALTH_MONITOR), ex);
-  
+
