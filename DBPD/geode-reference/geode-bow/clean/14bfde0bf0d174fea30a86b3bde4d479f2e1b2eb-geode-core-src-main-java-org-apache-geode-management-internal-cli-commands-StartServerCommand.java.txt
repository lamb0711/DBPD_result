Merge branch 'release/1.8.0'

+import java.io.IOException;
-    workingDirectory = StartMemberUtils.resolveWorkingDir(workingDirectory, memberName);
+    workingDirectory = StartMemberUtils.resolveWorkingDir(
+        workingDirectory == null ? null : new File(workingDirectory), new File(memberName));
+    return doStartServer(memberName, assignBuckets, bindAddress, cacheXmlPathname, classpath,
+        criticalHeapPercentage, criticalOffHeapPercentage, workingDirectory, disableDefaultServer,
+        disableExitWhenOutOfMemory, enableTimeStatistics, evictionHeapPercentage,
+        evictionOffHeapPercentage, force, group, hostNameForClients, jmxManagerHostnameForClients,
+        includeSystemClasspath, initialHeap, jvmArgsOpts, locators, locatorWaitTime, lockMemory,
+        logLevel, maxConnections, maxHeap, maxMessageCount, maxThreads, mcastBindAddress, mcastPort,
+        memcachedPort, memcachedProtocol, memcachedBindAddress, redisPort, redisBindAddress,
+        redisPassword, messageTimeToLive, offHeapMemorySize, gemfirePropertiesFile, rebalance,
+        gemfireSecurityPropertiesFile, serverBindAddress, serverPort, socketBufferSize,
+        springXmlLocation, statisticsArchivePathname, requestSharedConfiguration, startRestApi,
+        httpServicePort, httpServiceBindAddress, userName, passwordToUse, redirectOutput);
+  }
+
+  Result doStartServer(String memberName, Boolean assignBuckets, String bindAddress,
+      String cacheXmlPathname, String classpath, Float criticalHeapPercentage,
+      Float criticalOffHeapPercentage, String workingDirectory, Boolean disableDefaultServer,
+      Boolean disableExitWhenOutOfMemory, Boolean enableTimeStatistics,
+      Float evictionHeapPercentage, Float evictionOffHeapPercentage, Boolean force, String group,
+      String hostNameForClients, String jmxManagerHostnameForClients,
+      Boolean includeSystemClasspath, String initialHeap, String[] jvmArgsOpts, String locators,
+      Integer locatorWaitTime, Boolean lockMemory, String logLevel, Integer maxConnections,
+      String maxHeap, Integer maxMessageCount, Integer maxThreads, String mcastBindAddress,
+      Integer mcastPort, Integer memcachedPort, String memcachedProtocol,
+      String memcachedBindAddress, Integer redisPort, String redisBindAddress, String redisPassword,
+      Integer messageTimeToLive, String offHeapMemorySize, File gemfirePropertiesFile,
+      Boolean rebalance, File gemfireSecurityPropertiesFile, String serverBindAddress,
+      Integer serverPort, Integer socketBufferSize, String springXmlLocation,
+      String statisticsArchivePathname, Boolean requestSharedConfiguration, Boolean startRestApi,
+      String httpServicePort, String httpServiceBindAddress, String userName, String passwordToUse,
+      Boolean redirectOutput)
+      throws MalformedObjectNameException, IOException, InterruptedException {
-      stderrReader.stopAsync(StartMemberUtils.PROCESS_STREAM_READER_ASYNC_STOP_TIMEOUT_MILLIS); // stop
-                                                                                                // will
-                                                                                                // close
-      // ErrorStream
+      stderrReader.stopAsync(StartMemberUtils.PROCESS_STREAM_READER_ASYNC_STOP_TIMEOUT_MILLIS);
+      // stop will close ErrorStream
-  private void addJvmOptionsForOutOfMemoryErrors(final List<String> commandLine) {
+  static void addJvmOptionsForOutOfMemoryErrors(final List<String> commandLine) {
