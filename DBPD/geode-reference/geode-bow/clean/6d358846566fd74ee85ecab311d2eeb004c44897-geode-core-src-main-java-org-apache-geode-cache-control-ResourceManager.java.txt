GEODE-7953: Restore Redundancy Internal API (#5010)

- Add RestoreRedundancyOperation interface and Impl class
- Add RestoreRedundancyResults interface and Impl class
- Add RegionRedundancyStatus interface and Impl class
- Add accessor methods for RestoreRedundancyOperation to ResourceManager interface
- Replace manually-synchronized sets in InternalResourceManager with
ConcurrentHashMap
- Add stats for restore redundancy operations
- Add unit and DUnit tests for all the above

This commit restores the changes originally introduced in 0f9918510b24f2169189936a92951b9bb4f313f1 and reverted in 9fad2c0fba51f1a8beb24c311255dfa55a537c99

Authored-by: Donal Evans <doevans@pivotal.io>
+import java.util.concurrent.CompletableFuture;
+   * Creates a {@link RestoreRedundancyOperation} class for defining and starting restore redundancy
+   * operations and for determining the redundancy status of regions. Similar to a rebalance
+   * operation, a restore redundancy operation will attempt to bring each included region to its
+   * configured redundancy level by creating redundant copies of buckets, and will also optionally
+   * reassign which members host the primary buckets for better load balancing. A restore redundancy
+   * operation differs from a rebalance operation in that it will not move buckets from one member
+   * to another.
+   *
+   * @return a class for defining and starting restore redundancy operations
+   */
+  RestoreRedundancyOperation createRestoreRedundancyOperation();
+
+  /**
+   * Returns a set of all active restore redundancy futures that were started locally on this
+   * member.
+   *
+   * @return a set of all active restore redundancy futures started locally.
+   */
+  Set<CompletableFuture<RestoreRedundancyResults>> getRestoreRedundancyFutures();
+
+  /**
