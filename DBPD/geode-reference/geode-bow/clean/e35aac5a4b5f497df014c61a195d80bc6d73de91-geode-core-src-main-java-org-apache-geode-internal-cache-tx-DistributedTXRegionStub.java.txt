Merge branch 'release/1.5.0'

-import java.util.Collections;
-
-import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.PartitionedRegionException;
-import org.apache.geode.internal.cache.RemoteContainsKeyValueMessage;
-import org.apache.geode.internal.cache.RemoteContainsKeyValueMessage.RemoteContainsKeyValueResponse;
-import org.apache.geode.internal.cache.RemoteDestroyMessage;
-import org.apache.geode.internal.cache.RemoteFetchEntryMessage;
-import org.apache.geode.internal.cache.RemoteGetMessage;
-import org.apache.geode.internal.cache.RemoteInvalidateMessage;
-import org.apache.geode.internal.cache.RemoteOperationMessage.RemoteOperationResponse;
-import org.apache.geode.internal.cache.RemotePutAllMessage;
-import org.apache.geode.internal.cache.RemotePutMessage;
-import org.apache.geode.internal.cache.RemotePutMessage.PutResult;
-import org.apache.geode.internal.cache.RemotePutMessage.RemotePutResponse;
-import org.apache.geode.internal.cache.RemoteRemoveAllMessage;
+import org.apache.geode.internal.cache.tx.RemoteContainsKeyValueMessage.RemoteContainsKeyValueResponse;
+import org.apache.geode.internal.cache.tx.RemoteOperationMessage.RemoteOperationResponse;
+import org.apache.geode.internal.cache.tx.RemotePutMessage.PutResult;
+import org.apache.geode.internal.cache.tx.RemotePutMessage.RemotePutResponse;
-    // TODO Auto-generated method stub
-    // this.prStats.incPartitionMessagesSent();
-      RemoteOperationResponse response =
-          RemoteDestroyMessage.send(state.getTarget(), event.getLocalRegion(), event,
-              expectedOldValue, DistributionManager.PARTITIONED_REGION_EXECUTOR, true, false);
-      response.waitForCacheException();
-    } catch (EntryNotFoundException enfe) {
-      throw enfe;
-    } catch (TransactionDataNotColocatedException enfe) {
-      throw enfe;
-    } catch (CacheException ce) {
-      throw new PartitionedRegionException(
-          LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED
-              .toLocalizedString(state.getTarget()),
-          ce);
+      RemoteOperationResponse response = RemoteDestroyMessage.send(state.getTarget(),
+          event.getRegion(), event, expectedOldValue, true, false);
+      response.waitForRemoteResponse();
-      // this.prStats.incPartitionMessagesSent();
-      RuntimeException re = new TransactionDataNotColocatedException(
-          LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION
-              .toLocalizedString(keyInfo.getKey()));
-      re.initCause(e);
-      throw re;
-    } catch (RemoteOperationException e) {
+      throw e;
+    } catch (CacheException | RemoteOperationException e) {
-
-      RemoteOperationResponse response = RemoteInvalidateMessage.send(state.getTarget(),
-          event.getRegion(), event, DistributionManager.PARTITIONED_REGION_EXECUTOR, true, false);
-      response.waitForCacheException();
+      RemoteOperationResponse response =
+          RemoteInvalidateMessage.send(state.getTarget(), event.getRegion(), event, true, false);
+      response.waitForRemoteResponse();
-    final LocalRegion r = event.getLocalRegion();
+    final LocalRegion r = event.getRegion();
-    } catch (CacheException ce) {
-      throw new PartitionedRegionException(
-          LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED
-              .toLocalizedString(state.getTarget()),
-          ce);
-    } catch (RemoteOperationException roe) {
+    } catch (CacheException | RemoteOperationException roe) {
-
-  public int entryCount() {
-    return this.region.getRegionSize(this.state.getTarget());
-  }
-
-
-              putallOp.getPutAllEntryData(), putallOp.getPutAllEntryData().length, true,
-              DistributionManager.PARTITIONED_REGION_EXECUTOR, false);
-      response.waitForCacheException();
+              putallOp.getPutAllEntryData(), putallOp.getPutAllEntryData().length, true, false);
+      response.waitForRemoteResponse();
-              op.getRemoveAllEntryData(), op.getRemoveAllEntryData().length, true,
-              DistributionManager.PARTITIONED_REGION_EXECUTOR, false);
-      response.waitForCacheException();
+              op.getRemoveAllEntryData(), op.getRemoveAllEntryData().length, true, false);
+      response.waitForRemoteResponse();
+
+  @Override
+  protected InternalRegion getRegion() {
+    return this.region;
+  }
