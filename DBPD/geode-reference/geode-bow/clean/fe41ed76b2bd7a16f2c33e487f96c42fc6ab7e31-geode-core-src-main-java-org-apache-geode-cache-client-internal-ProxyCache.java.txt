GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.InternalCache;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Properties;
-import java.util.Set;
-
-  private final GemFireCacheImpl cache;
+  /**
+   * package-private to avoid synthetic accessor
+   * <p>
+   * TODO: if this is only in inside client then this should be InternalClientCache
+   */
+  final InternalCache cache;
+
-  public ProxyCache(Properties properties, GemFireCacheImpl cache, PoolImpl pool) {
+  public ProxyCache(Properties properties, InternalCache cache, PoolImpl pool) {
+  @Override
-      Iterator<ServerLocation> iter = this.userAttributes.getServerToId().keySet().iterator();
-      while (iter.hasNext()) {
-        ProxyCacheCloseOp.executeOn(iter.next(), (PoolImpl) this.userAttributes.getPool(),
+      for (final ServerLocation serverLocation : this.userAttributes.getServerToId().keySet()) {
+        ProxyCacheCloseOp.executeOn(serverLocation, (ExecutablePool) this.userAttributes.getPool(),
-      ArrayList<ProxyCache> proxyCache =
-          ((PoolImpl) this.userAttributes.getPool()).getProxyCacheList();
+      List<ProxyCache> proxyCache = ((PoolImpl) this.userAttributes.getPool()).getProxyCacheList();
-      // @todo I think some NPE will be caused by this code.
+      // TODO: I think some NPE will be caused by this code.
-  // TODO remove this method
-  public String getName() {
-    return this.cache.getName();
-  }
-
+  @Override
-          new ProxyQueryService(this, userAttributes.getPool().getQueryService());
+          new ProxyQueryService(this, this.userAttributes.getPool().getQueryService());
+  @Override
-    // TODO Auto-generated method stub
-    // ProxyRegion region = this.proxyRegionList.get(path);
-    // if (region != null) {
-    // return region;
-    // }
-    // else {
-    // }
+  @Override
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.apache.geode.CancelCriterion#cancelInProgress()
-     */
-    /*
-     * (non-Javadoc)
-     * 
-     * @see org.apache.geode.CancelCriterion#generateCancelledException(java.lang.Throwable)
-     */
-      } catch (IllegalStateException e2) {
+      } catch (IllegalStateException ignore) {
+  @Override
+  @Override
-  public PdxInstanceFactory createPdxInstanceFactory(String className, boolean b) {
-    return PdxInstanceFactoryImpl.newCreator(className, b);
+  public PdxInstanceFactory createPdxInstanceFactory(String className, boolean expectDomainClass) {
+    return PdxInstanceFactoryImpl.newCreator(className, expectDomainClass);
+  @Override
