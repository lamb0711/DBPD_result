Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
+
-  public CollectionTypeImpl() {
-  }
-  
+  public CollectionTypeImpl() {}
+
-  
+
-  throws ClassNotFoundException {
+      throws ClassNotFoundException {
-  
+
-    return super.equals(obj) &&
-            (obj instanceof CollectionTypeImpl) &&
-            this.elementType.equals(((CollectionTypeImpl)obj).elementType);
+    return super.equals(obj) && (obj instanceof CollectionTypeImpl)
+        && this.elementType.equals(((CollectionTypeImpl) obj).elementType);
-  
+
-  
+
-  public String toString(){
-    return resolveClass().getName() +
-            "<" + this.elementType.resolveClass().getName() + ">";
+  public String toString() {
+    return resolveClass().getName() + "<" + this.elementType.resolveClass().getName() + ">";
-  
+
-    return !Set.class.isAssignableFrom(cls) &&
-            !Map.class.isAssignableFrom(cls) &&
-            !Region.class.isAssignableFrom(cls) &&
-            ! StructSet.class.isAssignableFrom(cls) &&
-            ! SortedStructSet.class.isAssignableFrom(cls) &&
-            ! SortedResultSet.class.isAssignableFrom(cls) &&
-            ! ResultsSet.class.isAssignableFrom(cls) 
-            ;
+    return !Set.class.isAssignableFrom(cls) && !Map.class.isAssignableFrom(cls)
+        && !Region.class.isAssignableFrom(cls) && !StructSet.class.isAssignableFrom(cls)
+        && !SortedStructSet.class.isAssignableFrom(cls)
+        && !SortedResultSet.class.isAssignableFrom(cls) && !ResultsSet.class.isAssignableFrom(cls);
-  
+
-  
+
-    return List.class.isAssignableFrom(cls) || cls.isArray()           
-            || Ordered.class.isAssignableFrom(cls) || TreeSet.class.isAssignableFrom(cls)
-            || TreeMap.class.isAssignableFrom(cls) || LinkedHashSet.class.isAssignableFrom(cls)
-            || LinkedHashMap.class.isAssignableFrom(cls);
+    return List.class.isAssignableFrom(cls) || cls.isArray() || Ordered.class.isAssignableFrom(cls)
+        || TreeSet.class.isAssignableFrom(cls) || TreeMap.class.isAssignableFrom(cls)
+        || LinkedHashSet.class.isAssignableFrom(cls) || LinkedHashMap.class.isAssignableFrom(cls);
-  public boolean isCollectionType() { return true; }
+  public boolean isCollectionType() {
+    return true;
+  }
+
-  public boolean isMapType() { return false; }
+  public boolean isMapType() {
+    return false;
+  }
+
-  public boolean isStructType() { return false; }
-  
+  public boolean isStructType() {
+    return false;
+  }
+
-    this.elementType = (ObjectType)DataSerializer.readObject(in);
+    this.elementType = (ObjectType) DataSerializer.readObject(in);
-     super.toData(out);
+    super.toData(out);
