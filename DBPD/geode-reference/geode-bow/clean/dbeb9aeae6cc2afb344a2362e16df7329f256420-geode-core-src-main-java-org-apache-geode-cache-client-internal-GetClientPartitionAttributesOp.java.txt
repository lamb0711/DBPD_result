Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Retrieves {@link ClientPartitionAdvisor} related information for the
- * specified PartitionedRegion from one of the servers
+ * Retrieves {@link ClientPartitionAdvisor} related information for the specified PartitionedRegion
+ * from one of the servers
-  
+
-      logger.debug("GetClientPartitionAttributesOp#execute : Sending GetClientPartitionAttributesOp Message: {} for region: {} to server using pool: {}", op.getMessage(), regionFullPath, pool);
+      logger.debug(
+          "GetClientPartitionAttributesOp#execute : Sending GetClientPartitionAttributesOp Message: {} for region: {} to server using pool: {}",
+          op.getMessage(), regionFullPath, pool);
-    
-    ClientPartitionAdvisor advisor = (ClientPartitionAdvisor)pool.execute(op);
+
+    ClientPartitionAdvisor advisor = (ClientPartitionAdvisor) pool.execute(op);
-      advisor.setServerGroup(((PoolImpl)pool).getServerGroup());
+      advisor.setServerGroup(((PoolImpl) pool).getServerGroup());
-    
+
-    protected void processSecureBytes(Connection cnx, Message message)
-        throws Exception {
-    }
+    protected void processSecureBytes(Connection cnx, Message message) throws Exception {}
-            logger.debug("GetClientPartitionAttributesOpImpl#processResponse: received message of type : {}", MessageType.getString(msg.getMessageType()));
+            logger.debug(
+                "GetClientPartitionAttributesOpImpl#processResponse: received message of type : {}",
+                MessageType.getString(msg.getMessageType()));
-          Set<FixedPartitionAttributes> fpaSet = null; 
-          bucketCount = (Integer)msg.getPart(0).getObject();
-          colocatedWith = (String)msg.getPart(1).getObject();
+          Set<FixedPartitionAttributes> fpaSet = null;
+          bucketCount = (Integer) msg.getPart(0).getObject();
+          colocatedWith = (String) msg.getPart(1).getObject();
-            partitionResolverName = (String)msg.getPart(2).getObject();
-            fpaSet = (Set<FixedPartitionAttributes>)msg.getPart(3).getObject();
-          }
-          else if (msg.getNumberOfParts() == 3) {
+            partitionResolverName = (String) msg.getPart(2).getObject();
+            fpaSet = (Set<FixedPartitionAttributes>) msg.getPart(3).getObject();
+          } else if (msg.getNumberOfParts() == 3) {
-            if(obj instanceof String){
-              partitionResolverName = (String)obj;
-            }else{
-              fpaSet = (Set<FixedPartitionAttributes>)obj;
+            if (obj instanceof String) {
+              partitionResolverName = (String) obj;
+            } else {
+              fpaSet = (Set<FixedPartitionAttributes>) obj;
-          }
-          else if(bucketCount==-1){              
-              return null;
+          } else if (bucketCount == -1) {
+            return null;
-            logger.debug("GetClientPartitionAttributesOpImpl#processResponse: received all the results from server successfully.");
+            logger.debug(
+                "GetClientPartitionAttributesOpImpl#processResponse: received all the results from server successfully.");
-          ClientPartitionAdvisor advisor = new ClientPartitionAdvisor(bucketCount, colocatedWith,
-                partitionResolverName, fpaSet);
+          ClientPartitionAdvisor advisor =
+              new ClientPartitionAdvisor(bucketCount, colocatedWith, partitionResolverName, fpaSet);
-            logger.debug("GetClientPartitionAttributesOpImpl#processResponse: received message of type EXCEPTION");
+            logger.debug(
+                "GetClientPartitionAttributesOpImpl#processResponse: received message of type EXCEPTION");
-          String s = "While performing  GetClientPartitionAttributesOp "+  ((Throwable)obj).getMessage();
+          String s =
+              "While performing  GetClientPartitionAttributesOp " + ((Throwable) obj).getMessage();
-          throw new InternalGemFireError(
-              LocalizedStrings.Op_UNKNOWN_MESSAGE_TYPE_0
-                  .toLocalizedString(Integer.valueOf(msg.getMessageType())));
+          throw new InternalGemFireError(LocalizedStrings.Op_UNKNOWN_MESSAGE_TYPE_0
+              .toLocalizedString(Integer.valueOf(msg.getMessageType())));
