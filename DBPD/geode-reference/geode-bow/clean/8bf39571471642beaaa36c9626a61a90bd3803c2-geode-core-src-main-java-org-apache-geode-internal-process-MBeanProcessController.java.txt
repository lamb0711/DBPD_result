Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Controls a {@link ControllableProcess} using the Attach API to manipulate
- * MBeans.
+ * Controls a {@link ControllableProcess} using the Attach API to manipulate MBeans.
-  
+
-  
+
-  
+
-  
+
-  public String status() throws UnableToControlProcessException, ConnectionFailedException, IOException, MBeanInvocationFailedException {
-    return status(this.arguments.getNamePattern(), 
-        this.arguments.getPidAttribute(), 
-        this.arguments.getStatusMethod(), 
-        this.arguments.getAttributes(), 
+  public String status() throws UnableToControlProcessException, ConnectionFailedException,
+      IOException, MBeanInvocationFailedException {
+    return status(this.arguments.getNamePattern(), this.arguments.getPidAttribute(),
+        this.arguments.getStatusMethod(), this.arguments.getAttributes(),
-  public void stop() throws UnableToControlProcessException, ConnectionFailedException, IOException, MBeanInvocationFailedException {
-    stop(this.arguments.getNamePattern(), 
-        this.arguments.getPidAttribute(), 
-        this.arguments.getStopMethod(), 
-        this.arguments.getAttributes(), 
-        this.arguments.getValues());
+  public void stop() throws UnableToControlProcessException, ConnectionFailedException, IOException,
+      MBeanInvocationFailedException {
+    stop(this.arguments.getNamePattern(), this.arguments.getPidAttribute(),
+        this.arguments.getStopMethod(), this.arguments.getAttributes(), this.arguments.getValues());
-  
+
-  public void checkPidSupport() {
-  }
-  
+  public void checkPidSupport() {}
+
-   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector in the process
+   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector
+   *         in the process
-  private void stop(final ObjectName namePattern, final String pidAttribute, final String stopMethod, final String[] attributes, final Object[] values) 
+  private void stop(final ObjectName namePattern, final String pidAttribute,
+      final String stopMethod, final String[] attributes, final Object[] values)
-  
+
-   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector in the process
+   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector
+   *         in the process
-  private String status(final ObjectName namePattern, final String pidAttribute, final String statusMethod, final String[] attributes, final Object[] values)
+  private String status(final ObjectName namePattern, final String pidAttribute,
+      final String statusMethod, final String[] attributes, final Object[] values)
-    return invokeOperationOnTargetMBean(namePattern, pidAttribute, statusMethod, attributes, values).toString();
+    return invokeOperationOnTargetMBean(namePattern, pidAttribute, statusMethod, attributes, values)
+        .toString();
-  
+
-   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector in the process
+   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector
+   *         in the process
-  private Object invokeOperationOnTargetMBean(final ObjectName namePattern, final String pidAttribute, final String methodName, final String[] attributes, final Object[] values)
+  private Object invokeOperationOnTargetMBean(final ObjectName namePattern,
+      final String pidAttribute, final String methodName, final String[] attributes,
+      final Object[] values)
-      
+
-        throw new MBeanInvocationFailedException("Failed to find mbean matching '" 
-            + namePattern + "' with attribute '" + pidAttribute + "' of value '" + this.pid + "'");
+        throw new MBeanInvocationFailedException("Failed to find mbean matching '" + namePattern
+            + "' with attribute '" + pidAttribute + "' of value '" + this.pid + "'");
-        throw new MBeanInvocationFailedException("Found more than one mbean matching '" 
+        throw new MBeanInvocationFailedException("Found more than one mbean matching '"
-      
+
-      throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on " + objectName, e);
+      throw new MBeanInvocationFailedException(
+          "Failed to invoke " + methodName + " on " + objectName, e);
-      throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on " + objectName, e);
+      throw new MBeanInvocationFailedException(
+          "Failed to invoke " + methodName + " on " + objectName, e);
-      throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on " + objectName, e);
+      throw new MBeanInvocationFailedException(
+          "Failed to invoke " + methodName + " on " + objectName, e);
-  
+
-   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector in the process
+   * @throws ConnectionFailedException if there was a failure to connect to the local JMX connector
+   *         in the process
-  
+
-  
+
-   * Ensures that the other process identifies itself by the same pid used by 
-   * this stopper to connect to that process. NOT USED EXCEPT IN TEST.
+   * Ensures that the other process identifies itself by the same pid used by this stopper to
+   * connect to that process. NOT USED EXCEPT IN TEST.
-   * @throws IOException if a communication problem occurred when accessing the MBeanServerConnection
+   * @throws IOException if a communication problem occurred when accessing the
+   *         MBeanServerConnection
-    final RuntimeMXBean proxy = ManagementFactory.newPlatformMXBeanProxy(
-        this.server, ManagementFactory.RUNTIME_MXBEAN_NAME, RuntimeMXBean.class);
+    final RuntimeMXBean proxy = ManagementFactory.newPlatformMXBeanProxy(this.server,
+        ManagementFactory.RUNTIME_MXBEAN_NAME, RuntimeMXBean.class);
-      throw new IllegalStateException("Process has different pid '" + remotePid + "' than expected pid '" + this.pid + "'");
+      throw new IllegalStateException(
+          "Process has different pid '" + remotePid + "' than expected pid '" + this.pid + "'");
-   * Uses the Attach API to connect to the local process and ensures that it has
-   * loaded the JMX management agent. The JMXServiceURL identifying the local
-   * connector address for the JMX agent in the process is returned.
-   *  
+   * Uses the Attach API to connect to the local process and ensures that it has loaded the JMX
+   * management agent. The JMXServiceURL identifying the local connector address for the JMX agent
+   * in the process is returned.
+   * 
-      
+
-        
+
-        
+
-        String managementAgentPath = javaHome + File.separator + "jre" 
-            + File.separator + "lib" + File.separator + "management-agent.jar";
+        String managementAgentPath = javaHome + File.separator + "jre" + File.separator + "lib"
+            + File.separator + "management-agent.jar";
-          managementAgentPath = javaHome + File.separator +  "lib" 
-              + File.separator + "management-agent.jar";
+          managementAgentPath =
+              javaHome + File.separator + "lib" + File.separator + "management-agent.jar";
-  
+
-  
+
-    
+
-    
+
-  
+
-  private QueryExp buildQueryExp(final String pidAttribute, final String[] attributes, final Object[] values) {
+  private QueryExp buildQueryExp(final String pidAttribute, final String[] attributes,
+      final Object[] values) {
-      constraint = Query.and(optionalAttributes, Query.eq(
-        Query.attr(pidAttribute),
-        Query.value(this.pid)));
+      constraint =
+          Query.and(optionalAttributes, Query.eq(Query.attr(pidAttribute), Query.value(this.pid)));
-      constraint = Query.eq(
-          Query.attr(pidAttribute),
-          Query.value(this.pid));
+      constraint = Query.eq(Query.attr(pidAttribute), Query.value(this.pid));
-  
+
-   * Builds an optional QueryExp to aid in matching the correct MBean using 
-   * additional attributes with the specified values. Returns null if no
-   * attributes and values were specified during construction.
+   * Builds an optional QueryExp to aid in matching the correct MBean using additional attributes
+   * with the specified values. Returns null if no attributes and values were specified during
+   * construction.
-   * @return optional QueryExp to aid in matching the correct MBean 
+   * @return optional QueryExp to aid in matching the correct MBean
-        if (queryExp == null) { 
-          queryExp = Query.eq(
-              Query.attr(attributes[i]), 
-              Query.value(((Boolean) values[i])));
+        if (queryExp == null) {
+          queryExp = Query.eq(Query.attr(attributes[i]), Query.value(((Boolean) values[i])));
-          queryExp = Query.and(queryExp, 
-              Query.eq(Query.attr(attributes[i]), 
-              Query.value(((Boolean) values[i]))));
+          queryExp = Query.and(queryExp,
+              Query.eq(Query.attr(attributes[i]), Query.value(((Boolean) values[i]))));
-        if (queryExp == null) { 
-          queryExp = Query.eq(
-              Query.attr(attributes[i]), 
-              Query.value((Number)values[i]));
+        if (queryExp == null) {
+          queryExp = Query.eq(Query.attr(attributes[i]), Query.value((Number) values[i]));
-          queryExp = Query.and(queryExp, 
-              Query.eq(Query.attr(attributes[i]), 
-              Query.value((Number)values[i])));
+          queryExp = Query.and(queryExp,
+              Query.eq(Query.attr(attributes[i]), Query.value((Number) values[i])));
-        if (queryExp == null) { 
-          queryExp = Query.eq(
-              Query.attr(attributes[i]), 
-              Query.value((String)values[i]));
+        if (queryExp == null) {
+          queryExp = Query.eq(Query.attr(attributes[i]), Query.value((String) values[i]));
-          queryExp = Query.and(queryExp, 
-              Query.eq(Query.attr(attributes[i]), 
-              Query.value((String)values[i])));
+          queryExp = Query.and(queryExp,
+              Query.eq(Query.attr(attributes[i]), Query.value((String) values[i])));
-  private Object invoke(final ObjectName objectName, final String method) 
-      throws InstanceNotFoundException, IOException, MBeanException, ReflectionException  {
-    return this.server.invoke(objectName, method, new Object[]{}, new String[]{});
+  private Object invoke(final ObjectName objectName, final String method)
+      throws InstanceNotFoundException, IOException, MBeanException, ReflectionException {
+    return this.server.invoke(objectName, method, new Object[] {}, new String[] {});
