Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/incubator-geode into develop

-    return OffHeapHelper.getHeapForm(OffHeapHelper.copyIfNeeded(basicGetNewValue()));
+    Object result = basicGetNewValue();
+    if (mayHaveOffHeapReferences()) {
+      result = OffHeapHelper.copyIfNeeded(result);
+    }
+    return result;
-    if (this.offHeapOk) {
-      OffHeapHelper.releaseAndTrackOwner(this.newValue, this);
-    }
-    if (isOffHeapReference(v)) {
-      ReferenceCountHelper.setReferenceCountOwner(this);
-      if (!((StoredObject) v).retain()) {
-        ReferenceCountHelper.setReferenceCountOwner(null);
-        this.newValue = null;
-        return;
+    if (mayHaveOffHeapReferences()) {
+      if (this.offHeapOk) {
+        OffHeapHelper.releaseAndTrackOwner(this.newValue, this);
-      ReferenceCountHelper.setReferenceCountOwner(null);
+      if (StoredObject.isOffHeapReference(v)) {
+        ReferenceCountHelper.setReferenceCountOwner(this);
+        if (!((StoredObject) v).retain()) {
+          ReferenceCountHelper.setReferenceCountOwner(null);
+          this.newValue = null;
+          return;
+        }
+        ReferenceCountHelper.setReferenceCountOwner(null);
+      }
-  /**
-   * Returns true if this event has a reference to an off-heap new or old value.
-   */
-  public boolean hasOffHeapValue() {
-    return isOffHeapReference(this.newValue) || isOffHeapReference(this.oldValue);
-  }
-  private static boolean isOffHeapReference(Object ref) {
-    return (ref instanceof StoredObject) && ((StoredObject)ref).hasRefCount();
+  private boolean isOffHeapReference(Object ref) {
+    return mayHaveOffHeapReferences() && StoredObject.isOffHeapReference(ref);
-    if (this.offHeapOk) {
+    if (this.offHeapOk && mayHaveOffHeapReferences()) {
-    return OffHeapHelper.getHeapForm(OffHeapHelper.copyIfNeeded(basicGetOldValue()));
+    Object result = basicGetOldValue();
+    if (mayHaveOffHeapReferences()) {
+      result = OffHeapHelper.copyIfNeeded(result);
+    }
+    return result;
-    if (result instanceof StoredObject) {
+    if (mayHaveOffHeapReferences() && result instanceof StoredObject) {
-    if (result instanceof StoredObject) {
+    if (mayHaveOffHeapReferences() && result instanceof StoredObject) {
-  private static StoredObject convertToStoredObject(final Object tmp) {
+  private StoredObject convertToStoredObject(final Object tmp) {
+    if (!mayHaveOffHeapReferences()) {
+      return null;
+    }
-      tx.setPendingValue(OffHeapHelper.copyIfNeeded(v));
+      Object pv = v;
+      if (mayHaveOffHeapReferences()) {
+        pv = OffHeapHelper.copyIfNeeded(v);
+      }
+      tx.setPendingValue(pv);
-        OffHeapHelper.releaseWithNoTracking(v);
+        if (mayHaveOffHeapReferences()) {
+          OffHeapHelper.releaseWithNoTracking(v);
+        }
-      if (isOffHeapReference(cd)) {
+      if (event.isOffHeapReference(cd)) {
+    if (!mayHaveOffHeapReferences()) {
+      return;
+    }
+  /**
+   * Return true if this EntryEvent may have off-heap references.
+   */
+  private boolean mayHaveOffHeapReferences() {
+    LocalRegion lr = this.region;
+    if (lr != null) {
+      return lr.getOffHeap();
+    }
+    // if region field is null it is possible that we have off-heap values
+    return true;
+  }
+
-      throw new IllegalStateException("This event does not support off-heap values");
+      throw new IllegalStateException("This event already has off-heap values");
+    if (!mayHaveOffHeapReferences()) {
+      this.offHeapOk = false;
+      return;
+    }
-      if (isOffHeapReference(ov)) {
+      if (StoredObject.isOffHeapReference(ov)) {
-      if (isOffHeapReference(nv)) {
+      if (StoredObject.isOffHeapReference(nv)) {
-      if (isOffHeapReference(this.newValue) || isOffHeapReference(this.oldValue)) {
+      if (StoredObject.isOffHeapReference(this.newValue) || StoredObject.isOffHeapReference(this.oldValue)) {
