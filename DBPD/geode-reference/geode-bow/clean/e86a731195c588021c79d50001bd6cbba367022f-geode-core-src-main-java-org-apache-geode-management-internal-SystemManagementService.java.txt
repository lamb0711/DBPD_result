Merge branch 'release/1.3.0'

-   * Local Filter chain for local MBean filters
-   */
-  private LocalFilterChain localFilterChain;
-
-  /**
-    this.localFilterChain = new LocalFilterChain();
-      this.agent = new ManagementAgent(system.getConfig());
+      this.agent = new ManagementAgent(system.getConfig(), cache.getSecurityService());
-    this.proxyListeners = new CopyOnWriteArrayList<ProxyListener>();
+    this.proxyListeners = new CopyOnWriteArrayList<>();
-    if (!isStarted) {
-      return false;
-    }
-    if (closed) {
-      return false;
-    }
-    if (!system.isConnected()) {
-      return false;
-    }
-    return true;
+    return isStarted && !closed && system.isConnected();
-    CacheServerMXBean bean = jmxAdapter.getClientServiceMXBean(serverPort);
-    return bean;
+    return jmxAdapter.getClientServiceMXBean(serverPort);
-    DiskStoreMXBean bean = jmxAdapter.getLocalDiskStoreMXBean(diskStoreName);
-    return bean;
+    return jmxAdapter.getLocalDiskStoreMXBean(diskStoreName);
-  public LockServiceMXBean getLocalLockServiceMBean(String lockSreviceName) {
-    LockServiceMXBean bean = jmxAdapter.getLocalLockServiceMXBean(lockSreviceName);
-    return bean;
+  public LockServiceMXBean getLocalLockServiceMBean(String lockServiceName) {
+    return jmxAdapter.getLocalLockServiceMXBean(lockServiceName);
-    RegionMXBean bean = jmxAdapter.getLocalRegionMXBean(regionPath);
-    return bean;
+    return jmxAdapter.getLocalRegionMXBean(regionPath);
-  public <T> T getMBeanProxy(ObjectName objectName, Class<T> interfaceClass) { // TODO: this is too
-                                                                               // generic
+  public <T> T getMBeanProxy(ObjectName objectName, Class<T> interfaceClass) {
-    if (localFilterChain.isFiltered(objectName)) {
-      return null;
-    }
-    if (localFilterChain.isFiltered(objectName)) {
-      return null;
-    }
-    if (!isStartedAndOpen()) {
-      return false;
-    }
-    return federatingManager != null;
+    return isStartedAndOpen() && federatingManager != null;
-        } catch (RuntimeException e) {
-          logger.error("Jmx manager could not be started because {}", e.getMessage(), e);
-          throw e;
-        } catch (Error e) {
+        } catch (RuntimeException | Error e) {
-  public ObjectName getGatewaySenderMBeanName(DistributedMember member, String gatwaySenderId) {
-    return MBeanJMXAdapter.getGatewaySenderMBeanName(member, gatwaySenderId);
+  public ObjectName getGatewaySenderMBeanName(DistributedMember member, String gatewaySenderId) {
+    return MBeanJMXAdapter.getGatewaySenderMBeanName(member, gatewaySenderId);
-    return MBeanJMXAdapter.getAsycnEventQueueMBeanName(member, queueId);
+    return MBeanJMXAdapter.getAsyncEventQueueMBeanName(member, queueId);
-    private List<MembershipListener> membershipListeners =
-        new CopyOnWriteArrayList<MembershipListener>();
+    private List<MembershipListener> membershipListeners = new CopyOnWriteArrayList<>();
-      MembershipEvent event = new MembershipEvent() {
+
+      return new MembershipEvent() {
-
-      return event;
