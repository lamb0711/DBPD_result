Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  protected static void assertValidArgument(final boolean valid, final String message, final Object... args) {
+  protected static void assertValidArgument(final boolean valid, final String message,
+      final Object... args) {
-    return (obj1 == null && obj2 == null ? 0 : (obj1 == null ? 1 : (obj2 == null ? -1 : obj1.compareTo(obj2))));
+    return (obj1 == null && obj2 == null ? 0
+        : (obj1 == null ? 1 : (obj2 == null ? -1 : obj1.compareTo(obj2))));
-  protected static IndexStatisticsDetails createIndexStatisticsDetails(final IndexStatistics indexStatistics) {
+  protected static IndexStatisticsDetails createIndexStatisticsDetails(
+      final IndexStatistics indexStatistics) {
-    assertValidArgument(!StringUtils.isBlank(memberId), "The member having a region with an index must be specified!");
-    assertValidArgument(!StringUtils.isBlank(regionPath), "The region in member (%1$s) with an index must be specified!", memberId);
-    assertValidArgument(!StringUtils.isBlank(indexName), "The name of the index on region (%1$s) of member (%2$s) must be specified!", regionPath, memberId);
+    assertValidArgument(!StringUtils.isBlank(memberId),
+        "The member having a region with an index must be specified!");
+    assertValidArgument(!StringUtils.isBlank(regionPath),
+        "The region in member (%1$s) with an index must be specified!", memberId);
+    assertValidArgument(!StringUtils.isBlank(indexName),
+        "The name of the index on region (%1$s) of member (%2$s) must be specified!", regionPath,
+        memberId);
-    comparisonValue = (comparisonValue != 0 ? comparisonValue : compare(getMemberId(), indexDetails.getMemberId()));
-    comparisonValue = (comparisonValue != 0 ? comparisonValue : compare(getRegionPath(), indexDetails.getRegionPath()));
-    return (comparisonValue != 0 ? comparisonValue : compare(getIndexName(), indexDetails.getIndexName()));
+    comparisonValue = (comparisonValue != 0 ? comparisonValue
+        : compare(getMemberId(), indexDetails.getMemberId()));
+    comparisonValue = (comparisonValue != 0 ? comparisonValue
+        : compare(getRegionPath(), indexDetails.getRegionPath()));
+    return (comparisonValue != 0 ? comparisonValue
+        : compare(getIndexName(), indexDetails.getIndexName()));
-      && ObjectUtils.equals(getRegionPath(), that.getRegionPath())
-      && ObjectUtils.equals(getIndexName(), that.getIndexName());
+        && ObjectUtils.equals(getRegionPath(), that.getRegionPath())
+        && ObjectUtils.equals(getIndexName(), that.getIndexName());
-    FUNCTIONAL("RANGE"),
-    HASH("HASH"),
-    PRIMARY_KEY("KEY");
+    FUNCTIONAL("RANGE"), HASH("HASH"), PRIMARY_KEY("KEY");
-      assertValidArgument(!StringUtils.isBlank(description), "The description for the IndexType must be specified!");
+      assertValidArgument(!StringUtils.isBlank(description),
+          "The description for the IndexType must be specified!");
