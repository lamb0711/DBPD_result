GEODE-5747: Handling SocketException consistently (#2504)


+
+        if (logger.isTraceEnabled(LogMarker.SERIALIZER_VERBOSE)) {
+          logger.trace(LogMarker.SERIALIZER_VERBOSE, "Read {} {}",
+              ds instanceof DataSerializableFixedID ? "DataSerializableFixedID"
+                  : "DataSerializable",
+              ds);
+        }
-      Assert.assertTrue(o instanceof DataSerializable);
+
-      if (logger.isTraceEnabled(LogMarker.SERIALIZER_VERBOSE)) {
-        logger.trace(LogMarker.SERIALIZER_VERBOSE, "Read DataSerializable {}", o);
-      }
-
-
-    } catch (EOFException ex) {
+    } catch (EOFException | SocketException ex) {
-  private static Object readDataSerializableFixedID(final DataInput in)
-      throws IOException, ClassNotFoundException {
-    Class c = readClass(in);
-    try {
-      Constructor init = c.getConstructor(new Class[0]);
-      init.setAccessible(true);
-      Object o = init.newInstance(new Object[0]);
-
-      invokeFromData(o, in);
-
-      if (logger.isTraceEnabled(LogMarker.SERIALIZER_VERBOSE)) {
-        logger.trace(LogMarker.SERIALIZER_VERBOSE, "Read DataSerializableFixedID {}", o);
-      }
-
-      return o;
-
-    } catch (Exception ex) {
-      throw new SerializationException(
-          LocalizedStrings.DataSerializer_COULD_NOT_CREATE_AN_INSTANCE_OF_0
-              .toLocalizedString(c.getName()),
-          ex);
-    }
-  }
-
-        return readDataSerializableFixedID(in);
+        return readDataSerializable(in);
-        return readDataSerializableFixedID(in);
+        return readDataSerializable(in);
