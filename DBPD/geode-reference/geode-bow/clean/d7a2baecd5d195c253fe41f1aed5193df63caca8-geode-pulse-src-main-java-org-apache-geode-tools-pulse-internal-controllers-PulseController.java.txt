GEODE-7869: Cleanup warnings in geode-pulse

-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
-import org.apache.geode.tools.pulse.internal.data.PulseConstants;
-  // CONSTANTS
-  private final String DEFAULT_EXPORT_FILENAME = "DataBrowserQueryResult.json";
-  private final String QUERYSTRING_PARAM_ACTION = "action";
-  private final String QUERYSTRING_PARAM_QUERYID = "queryId";
-  private final String ACTION_VIEW = "view";
-  private final String ACTION_DELETE = "delete";
+  private static final String QUERYSTRING_PARAM_ACTION = "action";
+  private static final String QUERYSTRING_PARAM_QUERYID = "queryId";
+  private static final String ACTION_VIEW = "view";
+  private static final String ACTION_DELETE = "delete";
-  private String STATUS_REPSONSE_SUCCESS = "success";
-  private String STATUS_REPSONSE_FAIL = "fail";
+  private static final String STATUS_REPSONSE_SUCCESS = "success";
+  private static final String STATUS_REPSONSE_FAIL = "fail";
-  private String ERROR_REPSONSE_QUERYNOTFOUND = "No queries found";
-  private String ERROR_REPSONSE_QUERYIDMISSING = "Query id is missing";
+  private static final String ERROR_REPSONSE_QUERYNOTFOUND = "No queries found";
+  private static final String ERROR_REPSONSE_QUERYIDMISSING = "Query id is missing";
-  // default is gemfire
-  private static String pulseProductSupport = PulseConstants.PRODUCT_NAME_GEMFIRE;
-
-    JsonNode requestMap = null;
-
-
-      requestMap = mapper.readTree(pulseData);
+      JsonNode requestMap = mapper.readTree(pulseData);
-          responseMap.put(serviceName, pulseService.execute(request));
+          responseMap.set(serviceName, pulseService.execute(request));
-  public void authenticateUser(HttpServletRequest request, HttpServletResponse response)
-      throws IOException {
+  public void authenticateUser(HttpServletRequest request, HttpServletResponse response) {
-      responseJSON.put("isUserLoggedIn", this.isUserLoggedIn(request));
+      responseJSON.put("isUserLoggedIn", isUserLoggedIn(request));
-  public void pulseVersion(HttpServletRequest request, HttpServletResponse response)
+  public void pulseVersion(@SuppressWarnings("unused") HttpServletRequest request,
+      HttpServletResponse response)
-      alertType = Integer.valueOf(request.getParameter("alertType"));
+      alertType = Integer.parseInt(request.getParameter("alertType"));
-      boolean isClearAll = Boolean.valueOf(request.getParameter("clearAll"));
+      boolean isClearAll = Boolean.parseBoolean(request.getParameter("clearAll"));
-      responseJSON.put("systemAlerts",
+      responseJSON.set("systemAlerts",
-      alertId = Integer.valueOf(request.getParameter("alertId"));
+      alertId = Integer.parseInt(request.getParameter("alertId"));
-      logger.debug("Exception Occurred : {}", e);
+      logger.debug("Exception Occurred", e);
-  public void dataBrowserRegions(HttpServletRequest request, HttpServletResponse response)
+  public void dataBrowserRegions(@SuppressWarnings("unused") HttpServletRequest request,
+      HttpServletResponse response)
-    ArrayNode regionsData = mapper.createArrayNode();
-      regionsData = getRegionsJson(cluster);
-      responseJSON.put("clusterRegions", regionsData);
+      ArrayNode regionsData = getRegionsJson(cluster);
+      responseJSON.set("clusterRegions", regionsData);
-      logger.debug("Exception Occurred : {}", e);
+      logger.debug("Exception Occurred", e);
-        for (int i = 0; i < regionsMembers.size(); i++) {
-          Cluster.Member member = cluster.getMembersHMap().get(regionsMembers.get(i));
+        for (String regionsMember : regionsMembers) {
+          Cluster.Member member = cluster.getMembersHMap().get(regionsMember);
-          jsonMember.put("key", regionsMembers.get(i));
+          jsonMember.put("key", regionsMember);
-        regionJSON.put("members", jsonRegionMembers);
+        regionJSON.set("members", jsonRegionMembers);
-    int limit = 0;
+    int limit;
-      limit = Integer.valueOf(request.getParameter("limit"));
+      limit = Integer.parseInt(request.getParameter("limit"));
-    ArrayNode queryResult = null;
-    String action = "";
-      action = request.getParameter(QUERYSTRING_PARAM_ACTION);
+      String action = request.getParameter(QUERYSTRING_PARAM_ACTION);
-      queryResult = cluster.getQueryHistoryByUserId(userName);
-      responseJSON.put("queryHistory", queryResult);
+      ArrayNode queryResult = cluster.getQueryHistoryByUserId(userName);
+      responseJSON.set("queryHistory", queryResult);
-    int limit = 0;
+    int limit;
-      limit = Integer.valueOf(request.getParameter("limit"));
+      limit = Integer.parseInt(request.getParameter("limit"));
-  public void getQueryStatisticsGridModel(HttpServletRequest request, HttpServletResponse response)
-      throws IOException {
+  public void getQueryStatisticsGridModel(HttpServletRequest request,
+      HttpServletResponse response) {
-      for (int i = 0; i < arrColNames.length; ++i) {
-        colNamesList.add(arrColNames[i]);
+      for (String arrColName : arrColNames) {
+        colNamesList.add(arrColName);
-      responseJSON.put("columnNames", colNamesList);
-      responseJSON.put("columnModels", colModelList);
+      responseJSON.set("columnNames", colNamesList);
+      responseJSON.set("columnModels", colModelList);
