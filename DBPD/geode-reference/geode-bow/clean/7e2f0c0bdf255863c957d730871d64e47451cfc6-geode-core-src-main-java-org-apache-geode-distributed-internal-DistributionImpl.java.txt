GEODE-7456: Removed dependencies related to membership manager refactor (#4349)

* Making QuorumChecker part of the membership API

The Membership interface was returning a QuorumChecker, but that was not part
of the API package. Moving that to API package. Extracting an interface for
MembershipInformation, which is opaque to consumers of the membership system -
it should be returned from a QuorumChecker and passed back into the new
membership system.

* Making MembershipTestHook part of the Membership API

* Removing releaseQuorumChecker and dependency on InternalDistributedSystem from Membership

This releaseQuorumChecker method was using the system just to check some flags
on it and call close. Instead, have InternalDistributedSystem directly call
close on the QuorumChecker.

* Removed dependencies on LogMarker and Assert.

* Removed dependencies on InternalLocator and GMSLocatorAdapter by moving to the LifecycleListener.

* Removed dependency on deprecated SystemFailure.

* Removed dependency on SystemTimer and SystemTimer.TimerTask, using LoggingExecutor now.

* Fixing tests to use Distribution instead of a mocked out Membership and static method to connect locator to Services.

+import org.apache.geode.distributed.Locator;
-import org.apache.geode.distributed.internal.membership.MembershipTestHook;
-import org.apache.geode.distributed.internal.membership.QuorumChecker;
+import org.apache.geode.distributed.internal.membership.adapter.GMSLocatorAdapter;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipTestHook;
+import org.apache.geode.distributed.internal.membership.gms.api.QuorumChecker;
+  private boolean disableAutoReconnect;
+    disableAutoReconnect = system.getConfig().getDisableAutoReconnect();
+  public static void connectLocatorToServices(Services services) {
+    // see if a locator was started and put it in GMS Services
+    InternalLocator l = (InternalLocator) Locator.getLocator();
+    if (l != null && l.getLocatorHandler() != null) {
+      if (l.getLocatorHandler().setServices(services)) {
+        services
+            .setLocator(((GMSLocatorAdapter) l.getLocatorHandler()).getGMSLocator());
+      }
+    }
+  }
+
-  @Override
-  public void releaseQuorumChecker(
-      QuorumChecker checker,
-      InternalDistributedSystem distributedSystem) {
-    membership.releaseQuorumChecker(checker, distributedSystem);
-  }
-
-  @Override
+    @Override
+    public void started() {
+      connectLocatorToServices(distribution.getServices());
+    }
+
+    @Override
+    public void forcedDisconnect() {
+      // stop server locators immediately since they may not have correct
+      // information. This has caused client failures in bridge/wan
+      // network-down testing
+      InternalLocator loc = (InternalLocator) Locator.getLocator();
+      if (loc != null) {
+        loc.stop(true, !distribution.disableAutoReconnect, false);
+      }
+    }
