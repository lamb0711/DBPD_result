GEODE-6918: Adding log message to denote end of startup (#3824)

Added a log message to InternalResourceManager to denote the end of startup
Added new test class to test the message occurs.

Co-authored-by: Kirk Lund <klund@pivotal.io>
Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

+import java.util.function.Consumer;
+import org.apache.geode.internal.cache.control.InternalResourceManager;
+  private static final Logger logger = LogService.getLogger();
+  private final Runnable startupCompletionAction;
+  private final Consumer<Throwable> startupExceptionAction;
+    startupCompletionAction = builder.getStartupCompletionAction();
+    startupExceptionAction = builder.getStartupExceptionAction();
+    long startTime = System.currentTimeMillis();
-          startCacheServer(cache);
-          log.debug("Server is online");
+          startCacheServer(cache, startTime);
+
+   * @param startTime the system clock time at which the start method was called
-  void startCacheServer(final Cache cache) throws IOException {
+  @VisibleForTesting
+  void startCacheServer(final Cache cache, long startTime) throws IOException {
+
+    Runnable afterStartup = startupCompletionAction == null
+        ? () -> logStartCompleted(startTime) : startupCompletionAction;
+
+    Consumer<Throwable> exceptionAction = startupExceptionAction == null
+        ? (throwable) -> logStartCompletedWithError(startTime, throwable) : startupExceptionAction;
+
+    ((InternalResourceManager) cache.getResourceManager())
+        .runWhenStartupTasksComplete(afterStartup, exceptionAction);
+  }
+
+  private void logStartCompleted(long startTime) {
+    long startupDuration = System.currentTimeMillis() - startTime;
+    log.info("Server {} startup completed in {} ms", memberName, startupDuration);
+  }
+
+  private void logStartCompletedWithError(long startTime, Throwable throwable) {
+    long startupDuration = System.currentTimeMillis() - startTime;
+    log.error("Server {} startup completed in {} ms with error: {}", memberName, startupDuration,
+        throwable, throwable);
+    private Runnable startupCompletionAction;
+    private Consumer<Throwable> startupExceptionAction;
-            "The hostname used by clients to connect to the Server must have an argument if the --hostname-for-clients command-line option is specified!");
+            "The hostname used by clients to connect to the Server must have an argument if the "
+                + "--hostname-for-clients command-line option is specified!");
+
+    /**
+     * Sets the action to run when the server is online.
+     *
+     * @param startupCompletionAction the action to run
+     * @return this builder
+     */
+    Builder setStartupCompletionAction(Runnable startupCompletionAction) {
+      this.startupCompletionAction = startupCompletionAction;
+      return this;
+    }
+
+    /**
+     * Gets the action to run when the server is online.
+     *
+     * @return the action to run
+     */
+    Runnable getStartupCompletionAction() {
+      return startupCompletionAction;
+    }
+
+    /**
+     * Sets the action to run when server startup completes with errors.
+     *
+     * @param startupExceptionAction the action to run
+     * @return this builder
+     */
+    Builder setStartupExceptionAction(Consumer<Throwable> startupExceptionAction) {
+      this.startupExceptionAction = startupExceptionAction;
+      return this;
+    }
+
+    /**
+     * Gets the action to run when server startup completed with errors.
+     *
+     * @return the action to run
+     */
+    Consumer<Throwable> getStartupExceptionAction() {
+      return this.startupExceptionAction;
+    }
