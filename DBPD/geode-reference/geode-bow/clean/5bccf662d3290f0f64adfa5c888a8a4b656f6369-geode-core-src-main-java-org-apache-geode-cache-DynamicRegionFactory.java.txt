GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-              LocalizedStrings.DynamicRegionFactory_UNEXPECTED_EXCEPTION.toLocalizedString(), e);
+              "unexpected exception", e);
-              LocalizedStrings.DynamicRegionFactory_UNEXPECTED_EXCEPTION.toLocalizedString(), e);
+              "unexpected exception", e);
-        if (theCache.getLoggerI18n().fineEnabled()) {
-          theCache.getLoggerI18n().fine("Created dynamic region: " + this.dynamicRegionList);
+        if (theCache.getLogger().fineEnabled()) {
+          theCache.getLogger().fine("Created dynamic region: " + this.dynamicRegionList);
-        if (theCache.getLoggerI18n().fineEnabled()) {
-          theCache.getLoggerI18n().fine("Retrieved dynamic region: " + this.dynamicRegionList);
+        if (theCache.getLogger().fineEnabled()) {
+          theCache.getLogger().fine("Retrieved dynamic region: " + this.dynamicRegionList);
-      theCache.getLoggerI18n().warning(
-          LocalizedStrings.DynamicRegionFactory_ERROR_INITIALIZING_DYNAMICREGIONFACTORY, e);
+      theCache.getLogger().warning(
+          "Error initializing DynamicRegionFactory", e);
-        this.cache.getLoggerI18n().warning(
-            LocalizedStrings.DynamicRegionFactory_DYNAMICREGIONLISTENER__0__THREW_EXCEPTION_ON_BEFOREREGIONCREATED,
-            listener, t);
+        this.cache.getLogger().warning(
+            String.format("DynamicRegionListener %s threw exception on beforeRegionCreated",
+                listener, t));
-        this.cache.getLoggerI18n().warning(
-            LocalizedStrings.DynamicRegionFactory_DYNAMICREGIONLISTENER__0__THREW_EXCEPTION_ON_AFTERREGIONCREATED,
-            listener, t);
+        this.cache.getLogger().warning(
+            String.format("DynamicRegionListener %s threw exception on afterRegionCreated",
+                listener, t));
-        this.cache.getLoggerI18n().warning(
-            LocalizedStrings.DynamicRegionFactory_DYNAMICREGIONLISTENER__0__THREW_EXCEPTION_ON_BEFOREREGIONDESTROYED,
-            listener, t);
+        this.cache.getLogger().warning(
+            String.format("DynamicRegionListener %s threw exception on beforeRegionDestroyed",
+                listener, t));
-        this.cache.getLoggerI18n().warning(
-            LocalizedStrings.DynamicRegionFactory_DYNAMICREGIONLISTENER__0__THREW_EXCEPTION_ON_AFTERREGIONDESTROYED,
-            listener, t);
+        this.cache.getLogger().warning(
+            String.format("DynamicRegionListener %s threw exception on afterRegionDestroyed",
+                listener, t));
-          LocalizedStrings.DynamicRegionFactory_DYNAMIC_REGION_0_HAS_NOT_BEEN_CREATED
-              .toLocalizedString(fullRegionName),
+          String.format("Dynamic region %s has not been created.",
+              fullRegionName),
-          LocalizedStrings.DynamicRegionFactory_ERROR__COULD_NOT_FIND_A_REGION_NAMED___0_
-              .toLocalizedString(parentRegionName);
+          String.format("Error -- Could not find a region named: '%s'",
+              parentRegionName);
-      this.cache.getLoggerI18n().warning(
-          LocalizedStrings.DynamicRegionFactory_ERROR__COULD_NOT_FIND_A_REGION_NAMED___0_,
-          parentRegionName, e);
+      this.cache.getLogger().warning(
+          String.format("Error -- Could not find a region named: '%s'",
+              parentRegionName, e));
-      this.cache.getLoggerI18n().fine("Created dynamic region " + newRegion);
+      this.cache.getLogger().fine("Created dynamic region " + newRegion);
-      this.cache.getLoggerI18n().fine(
+      this.cache.getLogger().fine(
-      if (this.cache.getLoggerI18n().fineEnabled()) {
-        this.cache.getLoggerI18n()
+      if (this.cache.getLogger().fineEnabled()) {
+        this.cache.getLogger()
-            this.cache.getSecurityLoggerI18n().warning(
-                LocalizedStrings.DynamicRegionFactory_EXCEPTION_WHEN_REGISTERING_INTEREST_FOR_ALL_KEYS_IN_DYNAMIC_REGION_0_1,
-                new Object[] {newRegion.getFullPath(), ex});
+            this.cache.getSecurityLogger().warning(
+                String.format(
+                    "Exception when registering interest for all keys in dynamic region [%s]. %s",
+                    new Object[] {newRegion.getFullPath(), ex}));
-    if (this.cache.getLoggerI18n().fineEnabled()) {
-      this.cache.getLoggerI18n().fine("Created Dynamic Region " + newRegion.getFullPath());
+    if (this.cache.getLogger().fineEnabled()) {
+      this.cache.getLogger().fine("Created Dynamic Region " + newRegion.getFullPath());
-      if (this.cache.getLoggerI18n().fineEnabled()) {
-        this.cache.getLoggerI18n()
+      if (this.cache.getLogger().fineEnabled()) {
+        this.cache.getLogger()
-      this.cache.getLoggerI18n().warning(
-          LocalizedStrings.DynamicRegionFactory_ERROR_DESTROYING_DYNAMIC_REGION__0, fullRegionName,
-          e);
+      this.cache.getLogger().warning(
+          String.format("Error destroying Dynamic Region '%s'", fullRegionName,
+              e));
-    if (this.cache.getLoggerI18n().fineEnabled()) {
-      this.cache.getLoggerI18n().fine("Destroyed Dynamic Region " + fullRegionName);
+    if (this.cache.getLogger().fineEnabled()) {
+      this.cache.getLogger().fine("Destroyed Dynamic Region " + fullRegionName);
-      cache.getLoggerI18n().warning(
-          LocalizedStrings.DynamicRegionFactory_ERROR_ATTEMPTING_TO_LOCALLY_CREATE_DYNAMIC_REGION__0,
-          newRegionName, e);
+      cache.getLogger().warning(
+          String.format("Error attempting to locally create Dynamic Region: %s",
+              newRegionName, e));
-        cache.getLoggerI18n().warning(
-            LocalizedStrings.DynamicRegionFactory_ERROR_ATTEMPTING_TO_LOCALLY_DESTROY_DYNAMIC_REGION__0,
-            fullRegionName, e);
+        cache.getLogger().warning(
+            String.format("Error attempting to locally destroy Dynamic Region: %s",
+                fullRegionName, e));
