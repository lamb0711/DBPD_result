GEODE-17: Shiro Integration

GEODE-17: associate async request with correct shiro user

GEODE-17

GEODE-17: fix shiro dependency

-
-import org.apache.logging.log4j.Logger;
-
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.internal.lang.StringUtils;
-
+import com.gemstone.gemfire.security.CustomAuthRealm;
+import org.apache.logging.log4j.Logger;
+import org.apache.shiro.SecurityUtils;
+import org.apache.shiro.config.IniSecurityManagerFactory;
+import org.apache.shiro.mgt.DefaultSecurityManager;
+import org.apache.shiro.mgt.SecurityManager;
+import org.apache.shiro.realm.Realm;
+import org.apache.shiro.util.ThreadContext;
-  private AuthManager authManager;
-
-
+    DistributionConfig config = system.getConfig();
+
+    // setup shiro for authentication and authorization if it's desired
+    String shiroConfig = config.getShiroInit();
+    String customAuthenticator = config.getSecurityClientAuthenticator();
+    if (!StringUtils.isBlank(shiroConfig)) {
+      IniSecurityManagerFactory factory = new IniSecurityManagerFactory("classpath:"+shiroConfig);
+      SecurityManager securityManager = factory.getInstance();
+      SecurityUtils.setSecurityManager(securityManager);
+    }
+    else if (!StringUtils.isBlank(customAuthenticator)) {
+      Realm realm = new CustomAuthRealm(config.toProperties());
+      SecurityManager securityManager = new DefaultSecurityManager(realm);
+      SecurityUtils.setSecurityManager(securityManager);
+    }
-      this.authManager = new AuthManager(cache);
-      }     
-      this.authManager.expireAllAuthZ();
+      }
+
+      // clean out Shiro's thread local content
+      ThreadContext.remove();
+
-
-  public AuthManager getAuthManager(){
-    return this.authManager;
-  }
