GEODE-6861: separate static config object from runtime info in the Clâ€¦ (#3754)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* use ConfigRealizer to retrieve the runtime information for configuration on each member
* list result would return a List of Response object which has a configuration object and a list runtime objects
* use existing object for runtime member info and move them to geode-management module.

+import java.util.stream.Collectors;
+import org.apache.geode.management.runtime.RuntimeInfo;
-public class ClusterManagementResult<R extends CacheElement> {
+public class ClusterManagementResult<T extends CacheElement & RespondsWith<R>, R extends RuntimeInfo> {
-
-  // Override the mapper setting so that we always show result
-  @JsonInclude
-  @JsonProperty
-  private List<R> result = new ArrayList<>();
+  private String uri;
+  public String getUri() {
+    return uri;
+  }
+
+  public void setUri(String uri) {
+    this.uri = uri;
+  }
+
-  public List<R> getResult() {
+  // Override the mapper setting so that we always show result
+  @JsonInclude
+  @JsonProperty
+  private List<Response<T, R>> result = new ArrayList<>();
+
+  public List<Response<T, R>> getResult() {
-  public void setResult(List<R> result) {
+  @JsonIgnore
+  public List<T> getConfigResult() {
+    return result.stream().map(Response::getConfig).collect(Collectors.toList());
+  }
+
+  @JsonIgnore
+  public List<R> getRuntimeResult() {
+    return result.stream().flatMap(r -> r.getRuntimeInfo().stream()).collect(Collectors.toList());
+  }
+
+  public void setResult(List<Response<T, R>> result) {
