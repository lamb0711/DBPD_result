Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * TXSynchronizationOp sends JTA beforeCompletion and afterCompletion
- * messages to the server pool.
+ * TXSynchronizationOp sends JTA beforeCompletion and afterCompletion messages to the server pool.
-  public static TXCommitMessage execute(InternalPool pool, int status, int txId, CompletionType type) {
+  public static TXCommitMessage execute(InternalPool pool, int status, int txId,
+      CompletionType type) {
-  
+
-      super(MessageType.TX_SYNCHRONIZATION, (type==CompletionType.AFTER_COMPLETION)? 3 : 2);
+      super(MessageType.TX_SYNCHRONIZATION, (type == CompletionType.AFTER_COMPLETION) ? 3 : 2);
-    
+
-      return "TXSynchronization(threadTxId=" + TXManagerImpl.getCurrentTXUniqueId()
-      +"; "+this.type + "; status=" + this.status + ")";
+      return "TXSynchronization(threadTxId=" + TXManagerImpl.getCurrentTXUniqueId() + "; "
+          + this.type + "; status=" + this.status + ")";
-  protected void processAck(Message msg, String opName)
-    throws Exception
-  {
-    final int msgType = msg.getMessageType();
-    if (msgType == MessageType.REPLY) {
-      return;
-    } else {
-      Part part = msg.getPart(0);
-      if (msgType == MessageType.EXCEPTION) {
-        Throwable t = (Throwable) part.getObject();
-        if (t instanceof CommitConflictException ||
-            t instanceof SynchronizationCommitConflictException) {
-          throw (GemFireException)t;
+    protected void processAck(Message msg, String opName) throws Exception {
+      final int msgType = msg.getMessageType();
+      if (msgType == MessageType.REPLY) {
+        return;
+      } else {
+        Part part = msg.getPart(0);
+        if (msgType == MessageType.EXCEPTION) {
+          Throwable t = (Throwable) part.getObject();
+          if (t instanceof CommitConflictException
+              || t instanceof SynchronizationCommitConflictException) {
+            throw (GemFireException) t;
+          }
+        super.processAck(msg, opName);
-      super.processAck(msg, opName);
-  }
-    
-    /* (non-Javadoc)
-     * @see org.apache.geode.cache.client.internal.AbstractOp#processResponse(org.apache.geode.internal.cache.tier.sockets.Message)
+
+    /*
+     * (non-Javadoc)
+     * 
+     * @see
+     * org.apache.geode.cache.client.internal.AbstractOp#processResponse(org.apache.geode.internal.
+     * cache.tier.sockets.Message)
-            throw (SynchronizationCommitConflictException)e.getCause();
+            throw (SynchronizationCommitConflictException) e.getCause();
-        TXCommitMessage rcs = (TXCommitMessage)processObjResponse(msg, this.type.toString());
+        TXCommitMessage rcs = (TXCommitMessage) processObjResponse(msg, this.type.toString());
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-    @Override  
+    @Override
-    @Override  
+
+    @Override
-    @Override  
+
+    @Override
-    protected void processSecureBytes(Connection cnx, Message message)
-        throws Exception {
-    }
+    protected void processSecureBytes(Connection cnx, Message message) throws Exception {}
