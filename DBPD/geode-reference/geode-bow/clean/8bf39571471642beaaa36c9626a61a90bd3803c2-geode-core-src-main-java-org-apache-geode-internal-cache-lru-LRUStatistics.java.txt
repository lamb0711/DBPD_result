Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Statistics for both the LocalLRUClockHand.  Note that all its instance fields are
- * <code>final</code>.  Thus, we do not need to worry about refreshing
- * an instance when it resides in shared memory.
+ * Statistics for both the LocalLRUClockHand. Note that all its instance fields are
+ * <code>final</code>. Thus, we do not need to worry about refreshing an instance when it resides in
+ * shared memory.
-public class LRUStatistics  {
+public class LRUStatistics {
-  protected  int limitId;
+  protected int limitId;
-   * the number of destroys that must occur before a list scan is initiated to
-   * to remove unlinked entries.
+   * the number of destroys that must occur before a list scan is initiated to to remove unlinked
+   * entries.
-  protected  int destroysLimitId;
+  protected int destroysLimitId;
-  protected  int evictionsId;
+  protected int evictionsId;
-  protected  int evaluationsId;
-  protected  int greedyReturnsId;
+  protected int evaluationsId;
+  protected int greedyReturnsId;
-  
-  /////////////////////////  Constructors  /////////////////////////
+
+  ///////////////////////// Constructors /////////////////////////
-   *  Constructor for the LRUStatistics object
+   * Constructor for the LRUStatistics object
-   * @param  name  Description of the Parameter
+   * @param name Description of the Parameter
-  public LRUStatistics( StatisticsFactory factory, String name, 
-                        EnableLRU helper) {
+  public LRUStatistics(StatisticsFactory factory, String name, EnableLRU helper) {
-    stats = factory.createAtomicStatistics(helper.getStatisticsType(),
-                                           statName);
-    if(!helper.getEvictionAlgorithm().isLRUHeap())
-    {
+    stats = factory.createAtomicStatistics(helper.getStatisticsType(), statName);
+    if (!helper.getEvictionAlgorithm().isLRUHeap()) {
-  public LRUStatistics(StatisticsFactory factory, String name,
-      StatisticsType statisticsType) {
+  public LRUStatistics(StatisticsFactory factory, String name, StatisticsType statisticsType) {
-  public long getCounter( ) {
+  public long getCounter() {
-  public void setLimit( long newValue ) {
+  public void setLimit(long newValue) {
-                      "limit must be positive, an attempt was made to set it to: "
-                      + newValue);
+        "limit must be positive, an attempt was made to set it to: " + newValue);
-  public void setDestroysLimit( long newValue ) {
+  public void setDestroysLimit(long newValue) {
-                      "destroys limit must be positive, an attempt was made to set it to: "
-                      + newValue);
+        "destroys limit must be positive, an attempt was made to set it to: " + newValue);
-      stats.setLong( destroysLimitId, newValue );
+      stats.setLong(destroysLimitId, newValue);
-  public long getLimit( ) {
+  public long getLimit() {
-  public long getDestroysLimit( ) {
+  public long getDestroysLimit() {
-  public void updateCounter( long delta ) {
+  public void updateCounter(long delta) {
-  public void resetCounter( ) {
+  public void resetCounter() {
-//  public void setCounter(long newValue) {
-//    long oldValue = this.counter.get();
-//    if (oldValue != newValue) {
-//      this.counter.set(oldValue+newValue);
-//      stats.setLong(counterId, newValue);
-//    }
-//  }
-//  
+  // public void setCounter(long newValue) {
+  // long oldValue = this.counter.get();
+  // if (oldValue != newValue) {
+  // this.counter.set(oldValue+newValue);
+  // stats.setLong(counterId, newValue);
+  // }
+  // }
+  //
-  public void incEvictions( ) {
+  public void incEvictions() {
-    stats.incLong( evictionsId, 1 );
+    stats.incLong(evictionsId, 1);
-  public void incEvictions(long delta ) {
+  public void incEvictions(long delta) {
-    stats.incLong( evictionsId, delta );
+    stats.incLong(evictionsId, delta);
-  
-  public long getEvictions( ) {
+
+  public long getEvictions() {
-  public void resetDestroys( ) {
+  public void resetDestroys() {
-  public void incDestroys( ) {
+  public void incDestroys() {
-    stats.incLong( destroysId, 1 );
+    stats.incLong(destroysId, 1);
-  public long getDestroys( ) {
+  public long getDestroys() {
-  public void incEvaluations(long numEvals ) {
-    stats.incLong( evaluationsId, numEvals );
+  public void incEvaluations(long numEvals) {
+    stats.incLong(evaluationsId, numEvals);
-  
+
