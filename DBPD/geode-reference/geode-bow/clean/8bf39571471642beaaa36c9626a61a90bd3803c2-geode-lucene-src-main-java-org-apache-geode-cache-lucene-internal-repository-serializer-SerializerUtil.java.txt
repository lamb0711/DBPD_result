Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  private static ThreadLocal<ByteArrayOutputStream> LOCAL_BUFFER = new ThreadLocal<ByteArrayOutputStream>() {
-    @Override
-    protected ByteArrayOutputStream initialValue() {
-      return new ByteArrayOutputStream();
-    }
-  };
+  private static ThreadLocal<ByteArrayOutputStream> LOCAL_BUFFER =
+      new ThreadLocal<ByteArrayOutputStream>() {
+        @Override
+        protected ByteArrayOutputStream initialValue() {
+          return new ByteArrayOutputStream();
+        }
+      };
-  private SerializerUtil() {
-  }
-  
+  private SerializerUtil() {}
+
-    if(key instanceof String) {
+    if (key instanceof String) {
-    if(clazz == String.class) {
-      doc.add(new TextField(field, (String)fieldValue, Store.NO));
+    if (clazz == String.class) {
+      doc.add(new TextField(field, (String) fieldValue, Store.NO));
-    }  else if (clazz == Double.class) {
-        doc.add(new DoublePoint(field, (Double) fieldValue));
+    } else if (clazz == Double.class) {
+      doc.add(new DoublePoint(field, (Double) fieldValue));
-    
+
-  
+
-    if(field.stringValue() != null) {
+    if (field.stringValue() != null) {
-      return  keyFromBytes(field.binaryValue());
+      return keyFromBytes(field.binaryValue());
- 
+
-    if(field.stringValue() != null) {
+    if (field.stringValue() != null) {
-  
+
-   * Convert a gemfire key into a key search term that can be used to
-   * update or delete the document associated with this key.
+   * Convert a gemfire key into a key search term that can be used to update or delete the document
+   * associated with this key.
-    if(key instanceof String) {
+    if (key instanceof String) {
-  
+
-  
+
-  private static BytesRef keyToBytes(Object key)  {
+  private static BytesRef keyToBytes(Object key) {
-    
+
-}
+}
