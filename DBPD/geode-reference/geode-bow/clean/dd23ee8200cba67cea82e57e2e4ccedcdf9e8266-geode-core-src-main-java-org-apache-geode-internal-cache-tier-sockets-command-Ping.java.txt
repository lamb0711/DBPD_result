GEODE-7565: Allow gateway receivers with same host and port (#4824)

There was a problem with Geode WAN replication when GW receivers are configured with the same hostname-for-senders and port on all servers. The reason for such a setup is deploying Geode cluster on a Kubernetes cluster where all GW receivers are reachable from the outside world on the same VIP and port.

The problem experienced is that shutting down one server is stopping replication to this cluster until the server is up again. This is because Geode incorrectly assumes there are no more alive servers when just one of them is down, because since they share hostname-for-senders and port, they are treated as one same server.

With these changes locator is able to distinguish the different receivers using the same hostname and port so replication is not impacted when one server is stopped. 
+import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.internal.cache.tier.CachedRegionHelper;
+import org.apache.geode.internal.cache.DistributedPingMessage;
+    if (clientMessage.getNumberOfParts() > 0) {
+      try {
+        DistributedMember targetServer = (DistributedMember) clientMessage.getPart(0).getObject();
+        DistributedMember myID = serverConnection.getCache().getMyId();
+        if (!myID.equals(targetServer)) {
+          pingCorrectServer(clientMessage, targetServer, serverConnection);
+          writeReply(clientMessage, serverConnection);
+          serverConnection.setAsTrue(RESPONDED);
+          return;
+        }
+      } catch (ClassNotFoundException e) {
+        logger.warn("Unable to deserialize message from " + serverConnection.getProxyID());
+        writeErrorResponse(clientMessage, MessageType.PING, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
+        return;
+      }
+    }
-    if (chm != null)
+    if (chm != null) {
-    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
+    }
+  /**
+   * Process a ping request that was sent to the wrong server
+   */
+  protected void pingCorrectServer(Message clientMessage, DistributedMember targetServer,
+      ServerConnection serverConnection)
+      throws IOException {
+    if (logger.isDebugEnabled()) {
+      logger.debug("Received a Ping request from {} intended for {}. Forwarding the ping...",
+          serverConnection.getProxyID(), targetServer);
+    }
+    if (!serverConnection.getCache().getDistributionManager().isCurrentMember(targetServer)) {
+      logger.warn("Unable to ping non-member {} for client {}", targetServer,
+          serverConnection.getProxyID());
+      writeErrorResponse(clientMessage, MessageType.PING, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
+    } else {
+      // send a ping message to the server. This is a one-way message that doesn't send a reply
+      final DistributedPingMessage distributedPingMessage =
+          new DistributedPingMessage(targetServer, serverConnection.getProxyID());
+      serverConnection.getCache().getDistributionManager().putOutgoing(distributedPingMessage);
+      writeReply(clientMessage, serverConnection);
+    }
+  }
+
