Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.distributed.DistributedSystem;
-//import org.apache.geode.internal.statistics.StatArchiveFormat;
-//import java.io.IOException;
-//import java.io.Reader;
+// import org.apache.geode.distributed.DistributedSystem;
+// import org.apache.geode.internal.statistics.StatArchiveFormat;
+// import java.io.IOException;
+// import java.io.Reader;
- * Instances of this interface provide methods that create instances
- * of {@link Statistics}.
- * It can also be used to create instances of {@link StatisticDescriptor}
- * and {@link StatisticsType} because it implements {@link StatisticsTypeFactory}.
- * {@link
- * org.apache.geode.distributed.DistributedSystem} is the only
- * instance of this interface.
+ * Instances of this interface provide methods that create instances of {@link Statistics}. It can
+ * also be used to create instances of {@link StatisticDescriptor} and {@link StatisticsType}
+ * because it implements {@link StatisticsTypeFactory}.
+ * {@link org.apache.geode.distributed.DistributedSystem} is the only instance of this interface.
- * A <code>StatisticsFactory</code> can create a {@link
- * StatisticDescriptor statistic} of three numeric types:
- * <code>int</code>, <code>long</code>, and <code>double</code>.  A
- * statistic (<code>StatisticDescriptor</code>) can either be a
- * <I>gauge</I> meaning that its value can increase and decrease or a
- * <I>counter</I> meaning that its value is strictly increasing.
- * Marking a statistic as a counter allows statistic display tools
- * to properly display a statistics whose value "wraps around" (that
- * is, exceeds its maximum value).
+ * A <code>StatisticsFactory</code> can create a {@link StatisticDescriptor statistic} of three
+ * numeric types: <code>int</code>, <code>long</code>, and <code>double</code>. A statistic
+ * (<code>StatisticDescriptor</code>) can either be a <I>gauge</I> meaning that its value can
+ * increase and decrease or a <I>counter</I> meaning that its value is strictly increasing. Marking
+ * a statistic as a counter allows statistic display tools to properly display a statistics whose
+ * value "wraps around" (that is, exceeds its maximum value).
- * <P>The following code is an example of how to create a type using the api.
- * In this example the type has two stats whose values always increase:
+ * <P>
+ * The following code is an example of how to create a type using the api. In this example the type
+ * has two stats whose values always increase:
+ * 
+ * 
+ * 
-    this.samplerStats.incInt(this.sampleCountId, 1);
-    this.samplerStats.incLong(this.sampleTimeId, nanosSpentWorking / 1000000);
+ * this.samplerStats.incInt(this.sampleCountId, 1);
+ * this.samplerStats.incLong(this.sampleTimeId, nanosSpentWorking / 1000000);
- * <P>The following is an example of how to create the same type using XML.
- * The XML data:
+ * <P>
+ * The following is an example of how to create the same type using XML. The XML data:
+ * 
+ * 
+ * 
+ * 
-   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type} with default ids.
+   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type} with
+   * default ids.
+
-   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type}, <code>textId</code>, and with a default numeric id.
+   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type},
+   * <code>textId</code>, and with a default numeric id.
+
-   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type}, <code>textId</code>, and <code>numericId</code>.
+   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type},
+   * <code>textId</code>, and <code>numericId</code>.
-   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type} with default ids.
+   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type} with
+   * default ids.
+
-   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type}, <code>textId</code>, and with a default numeric id.
+   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type},
+   * <code>textId</code>, and with a default numeric id.
+
-   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type}, <code>textId</code>, and <code>numericId</code>.
+   * Creates and returns a {@link Statistics} instance of the given {@link StatisticsType type},
+   * <code>textId</code>, and <code>numericId</code>.
+
+
+
