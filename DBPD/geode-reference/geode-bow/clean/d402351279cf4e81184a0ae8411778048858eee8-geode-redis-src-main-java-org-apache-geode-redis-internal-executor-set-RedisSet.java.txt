GEODE-8114: Refactor RedisSet and RedisHash (#5100)

* broke up the RedisSet and RedisHash classes by moving the static methods into separate non-static classes.
* made canonical empty classes, so we don't have to do as much null-checking.

-import static java.util.Collections.emptySet;
+  public static transient RedisSet EMPTY = new EmptyRedisSet();
-  public static long sadd(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key,
-      ArrayList<ByteArrayWrapper> membersToAdd) {
-
-    RedisSet redisSet = region.get(key);
-
-    if (redisSet != null) {
-      // update existing value
-      return redisSet.doSadd(membersToAdd, region, key);
-    } else {
-      region.create(key, new RedisSet(membersToAdd));
-      return membersToAdd.size();
-    }
-  }
-
-  public static long srem(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key,
-      ArrayList<ByteArrayWrapper> membersToRemove,
-      AtomicBoolean setWasDeleted) {
-    RedisSet redisSet = region.get(key);
-    long numRemoved;
-    if (redisSet == null) {
-      numRemoved = 0;
-    } else {
-      numRemoved = redisSet.doSrem(membersToRemove, region, key, setWasDeleted);
-    }
-    return numRemoved;
-  }
-
-  public static boolean del(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key) {
-    return region.remove(key) != null;
-  }
-
-  public static Set<ByteArrayWrapper> smembers(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key) {
-    RedisSet redisSet = region.get(key);
-    if (redisSet != null) {
-      return redisSet.members();
-    } else {
-      return emptySet();
-    }
-  }
-
-  public static int scard(Region<ByteArrayWrapper, RedisSet> region, ByteArrayWrapper key) {
-    RedisSet redisSet = region.get(key);
-    if (redisSet != null) {
-      return redisSet.size();
-    } else {
-      return 0;
-    }
-  }
-
-  public static boolean sismember(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key, ByteArrayWrapper member) {
-    RedisSet redisSet = region.get(key);
-    if (redisSet != null) {
-      return redisSet.contains(member);
-    } else {
-      return false;
-    }
-  }
-
-  public static Collection<ByteArrayWrapper> srandmember(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key, int count) {
-    RedisSet redisSet = region.get(key);
-    if (redisSet != null) {
-      return redisSet.srandmember(count);
-    } else {
-      return emptyList();
-    }
-  }
-
-  public static Collection<ByteArrayWrapper> spop(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key, int popCount) {
-    RedisSet redisSet = region.get(key);
-    if (redisSet != null) {
-      return redisSet.doSpop(region, key, popCount);
-    } else {
-      return emptyList();
-    }
-  }
-
-  public static List<Object> sscan(Region<ByteArrayWrapper, RedisSet> region,
-      ByteArrayWrapper key, Pattern matchPattern, int count, int cursor) {
-    RedisSet RedisSet = region.get(key);
-    if (RedisSet != null) {
-      return RedisSet.doSscan(matchPattern, count, cursor);
-    } else {
-      return emptyList();
-    }
-  }
-
-
-  private synchronized List<Object> doSscan(Pattern matchPattern, int count, int cursor) {
+  synchronized List<Object> sscan(Pattern matchPattern, int count, int cursor) {
-  private synchronized Collection<ByteArrayWrapper> doSpop(
+  synchronized Collection<ByteArrayWrapper> spop(
-    int originalSize = size();
+    int originalSize = scard();
-  private synchronized Collection<ByteArrayWrapper> srandmember(int count) {
+  synchronized Collection<ByteArrayWrapper> srandmember(int count) {
-  public synchronized boolean contains(ByteArrayWrapper member) {
+  public synchronized boolean sismember(ByteArrayWrapper member) {
-  public synchronized int size() {
+  public synchronized int scard() {
-  private synchronized long doSadd(ArrayList<ByteArrayWrapper> membersToAdd,
+  synchronized long sadd(ArrayList<ByteArrayWrapper> membersToAdd,
-  private synchronized long doSrem(ArrayList<ByteArrayWrapper> membersToRemove,
+  synchronized long srem(ArrayList<ByteArrayWrapper> membersToRemove,
-  private synchronized Set<ByteArrayWrapper> members() {
+  synchronized Set<ByteArrayWrapper> smembers() {
