GEODE-8288: Match Native Redis's glob-style pattern (#5282)


-    int curlyOpen = 0;
-          if (++i >= len) {
-            error("Missing escaped character", glob, i);
+          if (++i < len) {
+            regex.append(c).append(glob.charAt(i));
+            continue;
-          regex.append(c).append(glob.charAt(i));
-          continue;
+          break;
+        case '{':
+        case '!':
-        case '{': // start of a group
-          regex.append("(?:"); // non-capturing
-          curlyOpen++;
-          hasWildcard = true;
-          continue;
-        case ',':
-          regex.append(curlyOpen > 0 ? '|' : c);
-          continue;
-        case '}':
-          if (curlyOpen > 0) {
-            // end of a group
-            curlyOpen--;
-            regex.append(")");
-            continue;
-          }
-          break;
-            error("Unclosed character class", glob, i);
+            regex.append(BACKSLASH);
-        case '!': // [! needs to be translated to [^
-          regex.append(setOpen > 0 && '[' == glob.charAt(i - 1) ? '^' : '!');
-          continue;
-          // Many set errors like [][] could not be easily detected here,
-          // as []], []-] and [-] are all valid POSIX glob and java regex.
-          // We'll just let the regex compiler do the real work.
-      error("Unclosed character class", glob, len);
+      regex.append(']');
-    if (curlyOpen > 0) {
-      error("Unclosed group", glob, len);
-    }
-    return Pattern.compile(regex.toString());
-  }
-  /**
-   * @return true if this is a wildcard pattern (with special chars)
-   */
-  public boolean hasWildcard() {
-    return hasWildcard;
+    return Pattern.compile(regex.toString());
