Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      ds = cache.getDistributedSystem();
-      qs = cache.getQueryService();
+    ds = cache.getDistributedSystem();
+    qs = cache.getQueryService();
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      if( scope != null) {
-        attributesFactory.setScope( scope);
+      if (scope != null) {
+        attributesFactory.setScope(scope);
-      RegionAttributes regionAttributes = attributesFactory
-          .create();
+      RegionAttributes regionAttributes = attributesFactory.create();
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-  
-  public static Region createRegion(String regionName,
-      RegionAttributes regionAttributes, boolean flag) {
+
+  public static Region createRegion(String regionName, RegionAttributes regionAttributes,
+      boolean flag) {
-  
+
-      attributesFactory
-          .setIndexMaintenanceSynchronous(indexMaintenanceSynchronous);
-      RegionAttributes regionAttributes = attributesFactory
-          .create();
+      attributesFactory.setIndexMaintenanceSynchronous(indexMaintenanceSynchronous);
+      RegionAttributes regionAttributes = attributesFactory.create();
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-  } 
+  }
-  public static Region createRegion(Region parentRegion, String regionName,
-      Class valueConstraint) {
+  public static Region createRegion(Region parentRegion, String regionName, Class valueConstraint) {
-          attributesFactory.setValueConstraint(valueConstraint);
-      RegionAttributes regionAttributes = attributesFactory
-          .create();
-      Region region = parentRegion
-          .createSubregion(regionName, regionAttributes);
+        attributesFactory.setValueConstraint(valueConstraint);
+      RegionAttributes regionAttributes = attributesFactory.create();
+      Region region = parentRegion.createSubregion(regionName, regionAttributes);
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    if (cache.isClosed()) startCache();
+    if (cache.isClosed())
+      startCache();
-  
-  public static void compareResultsOfWithAndWithoutIndex(SelectResults[][] r,
-       Object test) {
+
+  public static void compareResultsOfWithAndWithoutIndex(SelectResults[][] r, Object test) {
-        log("Both SelectResults are of the same Type i.e.--> "
-            + collType1);
-      }
-      else {
-        log("Collection type are : " + collType1 + "and  "
-            + collType2);
-        fail("FAILED:Select results Collection Type is different in both the cases. CollectionType1="+collType1 + " CollectionType2="+collType2);
+        log("Both SelectResults are of the same Type i.e.--> " + collType1);
+      } else {
+        log("Collection type are : " + collType1 + "and  " + collType2);
+        fail(
+            "FAILED:Select results Collection Type is different in both the cases. CollectionType1="
+                + collType1 + " CollectionType2=" + collType2);
-        log("Both SelectResults have same element Type i.e.--> "
-            + type1);
-      }
-      else {
+        log("Both SelectResults have same element Type i.e.--> " + type1);
+      } else {
-        fail("FAILED:SelectResult Element Type is different in both the cases. Type1="+ type1 + " Type2="+ type2);
+        fail("FAILED:SelectResult Element Type is different in both the cases. Type1=" + type1
+            + " Type2=" + type2);
-      
+
-        log("Both SelectResults are of the same Type i.e.--> "
-            + collType1);
-      }
-      else {
-        log("Collections are : " + collType1 + " "
-            + collType2);
-        fail("FAILED:SelectResults Collection Type is different in both the cases. CollType1="+ collType1 + " CollType2="+ collType2);
+        log("Both SelectResults are of the same Type i.e.--> " + collType1);
+      } else {
+        log("Collections are : " + collType1 + " " + collType2);
+        fail("FAILED:SelectResults Collection Type is different in both the cases. CollType1="
+            + collType1 + " CollType2=" + collType2);
-        log("Both SelectResults are of Same Size i.e.  Size= "
-            + r[j][1].size());
-      }
-      else {
-        fail("FAILED:SelectResults size is different in both the cases. Size1="
-                + r[j][0].size() + " Size2 = " + r[j][1].size());
+        log("Both SelectResults are of Same Size i.e.  Size= " + r[j][1].size());
+      } else {
+        fail("FAILED:SelectResults size is different in both the cases. Size1=" + r[j][0].size()
+            + " Size2 = " + r[j][1].size());
-//      boolean pass = true;
+      // boolean pass = true;
-            Object[] values1 = ((Struct)p1).getFieldValues();
-            Object[] values2 = ((Struct)p2).getFieldValues();
+            Object[] values1 = ((Struct) p1).getFieldValues();
+            Object[] values2 = ((Struct) p2).getFieldValues();
-              elementEqual = elementEqual
-                  && ((values1[i] == values2[i]) || values1[i]
-                      .equals(values2[i]));
+              elementEqual =
+                  elementEqual && ((values1[i] == values2[i]) || values1[i].equals(values2[i]));
-          }
-          else {
+          } else {
-          fail("Atleast one element in the pair of SelectResults supposedly identical, is not equal ");
+          fail(
+              "Atleast one element in the pair of SelectResults supposedly identical, is not equal ");
-  public static boolean compareResultsOfWithAndWithoutIndex(SelectResults[][] r ) { 
-    boolean ok = true; 
-    Set set1 = null; 
-    Set set2 = null; 
-    Iterator itert1 = null; 
-    Iterator itert2 = null; 
-    ObjectType type1, type2; 
-    outer:  for (int j = 0; j < r.length; j++) { 
-      CollectionType collType1 = r[j][0].getCollectionType(); 
-      CollectionType collType2 = r[j][1].getCollectionType(); 
-      type1 = collType1.getElementType(); 
-      type2 = collType2.getElementType(); 
+  public static boolean compareResultsOfWithAndWithoutIndex(SelectResults[][] r) {
+    boolean ok = true;
+    Set set1 = null;
+    Set set2 = null;
+    Iterator itert1 = null;
+    Iterator itert2 = null;
+    ObjectType type1, type2;
+    outer: for (int j = 0; j < r.length; j++) {
+      CollectionType collType1 = r[j][0].getCollectionType();
+      CollectionType collType2 = r[j][1].getCollectionType();
+      type1 = collType1.getElementType();
+      type2 = collType2.getElementType();
-      if(collType1.getSimpleClassName().equals(collType2.getSimpleClassName())) { 
-        log("Both SelectResults are of the same Type i.e.--> " + 
-            collType1); 
-      } else { 
-        log("Collection type are : " + collType1 + "and  " 
-            + collType2); 
-        //test.fail("FAILED:Select results Collection Type is different in both the cases. CollectionType1="+collType1 + " CollectionType2="+collType2); 
-        ok = false; 
-        break; 
-      } 
-      if (type1.equals(type2)) { 
-        log("Both SelectResults have same element Type i.e.--> " 
-            + type1); 
-      } else { 
-        log("Classes are :  type1=" + type1.getSimpleClassName() + 
-            " type2= " + type2.getSimpleClassName()); 
-        //test.fail("FAILED:SelectResult Element Type is different in both the cases. Type1="+ type1 + " Type2="+ type2); 
-        ok = false; 
-        break; 
-      } 
+      if (collType1.getSimpleClassName().equals(collType2.getSimpleClassName())) {
+        log("Both SelectResults are of the same Type i.e.--> " + collType1);
+      } else {
+        log("Collection type are : " + collType1 + "and  " + collType2);
+        // test.fail("FAILED:Select results Collection Type is different in both the cases.
+        // CollectionType1="+collType1 + " CollectionType2="+collType2);
+        ok = false;
+        break;
+      }
+      if (type1.equals(type2)) {
+        log("Both SelectResults have same element Type i.e.--> " + type1);
+      } else {
+        log("Classes are :  type1=" + type1.getSimpleClassName() + " type2= "
+            + type2.getSimpleClassName());
+        // test.fail("FAILED:SelectResult Element Type is different in both the cases. Type1="+
+        // type1 + " Type2="+ type2);
+        ok = false;
+        break;
+      }
-      if (collType1.equals(collType2)) { 
-        log("Both SelectResults are of the same Type i.e.--> " 
-            + collType1); 
-      } 
-      else { 
-        log("Collections are : " + collType1 + " " 
-            + collType2); 
-        //test.fail("FAILED:SelectResults Collection Type is different in both the cases. CollType1="+ collType1 + " CollType2="+ collType2); 
-        ok = false; 
-        break; 
-      } 
-      if (r[j][0].size() == r[j][1].size()) { 
-        log("Both SelectResults are of Same Size i.e.  Size= " 
-            + r[j][1].size()); 
-      } 
-      else { 
-        //test.fail("FAILED:SelectResults size is different in both the cases. Size1="  + r[j][0].size() + " Size2 = " + r[j][1].size()); 
-        ok = false; 
-        break; 
-      } 
-      set2 = (((SelectResults)r[j][1]).asSet()); 
-      set1 = (((SelectResults)r[j][0]).asSet()); 
-      boolean pass = true; 
-      itert1 = set1.iterator(); 
-      while (itert1.hasNext()) { 
-        Object p1 = itert1.next(); 
-        itert2 = set2.iterator(); 
+      if (collType1.equals(collType2)) {
+        log("Both SelectResults are of the same Type i.e.--> " + collType1);
+      } else {
+        log("Collections are : " + collType1 + " " + collType2);
+        // test.fail("FAILED:SelectResults Collection Type is different in both the cases.
+        // CollType1="+ collType1 + " CollType2="+ collType2);
+        ok = false;
+        break;
+      }
+      if (r[j][0].size() == r[j][1].size()) {
+        log("Both SelectResults are of Same Size i.e.  Size= " + r[j][1].size());
+      } else {
+        // test.fail("FAILED:SelectResults size is different in both the cases. Size1=" +
+        // r[j][0].size() + " Size2 = " + r[j][1].size());
+        ok = false;
+        break;
+      }
+      set2 = (((SelectResults) r[j][1]).asSet());
+      set1 = (((SelectResults) r[j][0]).asSet());
+      boolean pass = true;
+      itert1 = set1.iterator();
+      while (itert1.hasNext()) {
+        Object p1 = itert1.next();
+        itert2 = set2.iterator();
-        boolean exactMatch = false; 
-        while (itert2.hasNext()) { 
-          Object p2 = itert2.next(); 
-          if (p1 instanceof Struct) { 
-            Object[] values1 = ((Struct)p1).getFieldValues(); 
-            Object[] values2 = ((Struct)p2).getFieldValues(); 
-            //test.assertIndexDetailsEquals(values1.length, values2.length);
-            if(values1.length != values2.length) { 
-              ok = false; 
-              break outer; 
-            } 
-            boolean elementEqual = true; 
-            for (int i = 0; i < values1.length; ++i) { 
-              if(values1[i] != null){
-                elementEqual = elementEqual && ((values1[i] == values2[i]) || values1[i].equals(values2[i]));
-              } else{
+        boolean exactMatch = false;
+        while (itert2.hasNext()) {
+          Object p2 = itert2.next();
+          if (p1 instanceof Struct) {
+            Object[] values1 = ((Struct) p1).getFieldValues();
+            Object[] values2 = ((Struct) p2).getFieldValues();
+            // test.assertIndexDetailsEquals(values1.length, values2.length);
+            if (values1.length != values2.length) {
+              ok = false;
+              break outer;
+            }
+            boolean elementEqual = true;
+            for (int i = 0; i < values1.length; ++i) {
+              if (values1[i] != null) {
+                elementEqual =
+                    elementEqual && ((values1[i] == values2[i]) || values1[i].equals(values2[i]));
+              } else {
-            } 
-            exactMatch = elementEqual; 
-          } 
-          else { 
-            exactMatch = (p2 == p1) || p2.equals(p1); 
-          } 
-          if (exactMatch) { 
-            break; 
-          } 
-        } 
-        if (!exactMatch) { 
-          //test.fail("Atleast one element in the pair of SelectResults supposedly identical, is not equal "); 
-          ok = false; 
-          break outer; 
-        } 
-      } 
-    } 
-    return ok; 
-  } 
-  
+            }
+            exactMatch = elementEqual;
+          } else {
+            exactMatch = (p2 == p1) || p2.equals(p1);
+          }
+          if (exactMatch) {
+            break;
+          }
+        }
+        if (!exactMatch) {
+          // test.fail("Atleast one element in the pair of SelectResults supposedly identical, is
+          // not equal ");
+          ok = false;
+          break outer;
+        }
+      }
+    }
+    return ok;
+  }
+
