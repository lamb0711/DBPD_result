GEODE-3513: Removing the use of native sessions session caching

In the session module for generic app servers, we were asking the
application server for a 'native' session and then wrapping it on our
own GemfireHttpSession. However, we were not cleaning up that native
session, which means that in PROXY mode we were leaving these sessions
on the client with them being useful.

The GemfireHttpSession now no longer wraps a native session. We are
still temporarily creating a native session because it is the only way
for us to get the session timeout value that was configured in web.xml,
but the native session is immediately invalidated.

Adding and extending cargo session tests to test how sessions are being
cleaned up from the clients and the server.

This closes #740

+import javax.servlet.ServletContext;
-import org.apache.geode.modules.session.internal.filter.util.ThreadLocalSession;
+    private final ServletContext context;
+
-        ResponseWrapper response) {
+        ResponseWrapper response, ServletContext context) {
+      this.context = context;
-      super.getSession(false);
-          if (session.getNativeSession() == null) {
-            try {
-              ThreadLocalSession.set(session);
-              HttpSession nativeSession = super.getSession();
-              session.failoverSession(nativeSession);
-              session.putInRegion();
-            } finally {
-              ThreadLocalSession.remove();
-            }
+          if (session.getServletContext() == null) {
+            session.setServletContext(context);
+          HttpSession nativeSession = super.getSession();
-            session = (GemfireHttpSession) manager.wrapSession(null);
-            ThreadLocalSession.set(session);
-            HttpSession nativeSession = super.getSession();
-            if (session.getNativeSession() == null) {
-              session.setNativeSession(nativeSession);
-            } else {
-              assert (session.getNativeSession() == nativeSession);
-            }
+            session = (GemfireHttpSession) manager.wrapSession(context,
+                nativeSession.getMaxInactiveInterval());
-            ThreadLocalSession.remove();
+            nativeSession.invalidate();
-      // Get the existing cookies
-      Cookie[] cookies = getCookies();
-
-    private String getCookieString(Cookie c) {
-      StringBuilder cookie = new StringBuilder();
-      cookie.append(c.getName()).append("=").append(c.getValue());
-
-      if (c.getPath() != null) {
-        cookie.append("; ").append("Path=").append(c.getPath());
-      }
-      if (c.getDomain() != null) {
-        cookie.append("; ").append("Domain=").append(c.getDomain());
-      }
-      if (c.getSecure()) {
-        cookie.append("; ").append("Secure");
-      }
-
-      cookie.append("; HttpOnly");
-
-      return cookie.toString();
-    }
-
-    final RequestWrapper wrappedRequest = new RequestWrapper(manager, httpReq, wrappedResponse);
+    final RequestWrapper wrappedRequest =
+        new RequestWrapper(manager, httpReq, wrappedResponse, filterConfig.getServletContext());
-
-  /**
-   * Return the GemFire session which wraps a native session
-   *
-   * @param nativeSession the native session for which the corresponding GemFire session should be
-   *        returned.
-   * @return the GemFire session or null if no session maps to the native session
-   */
-  public static HttpSession getWrappingSession(HttpSession nativeSession) {
-    /*
-     * This is a special case where the GemFire session has been set as a ThreadLocal during session
-     * creation.
-     */
-    GemfireHttpSession gemfireSession = (GemfireHttpSession) ThreadLocalSession.get();
-    if (gemfireSession != null) {
-      gemfireSession.setNativeSession(nativeSession);
-      return gemfireSession;
-    }
-    return getSessionManager().getWrappingSession(nativeSession.getId());
-  }
