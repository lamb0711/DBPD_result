GEODE-7703: Catch IndexWriter Exceptions (#4597)

The IndexWriter initialization might fail when other threads are
updating the fileAndChunkRegion, which can be triggered by other normal
operations (query, event listener, close, reindex, etc.). This doesn't
happen often and, instead of propagating the exception to the caller
and failing, Geode now catches it and returns null to let the callers
retry.

- Added unit and distrbuted tests.
- Return null instead of re-throwing the IOException while building
  the Lucene IndexWriter.

Co-authored-by: Xiaojian Zhou <gesterzhou@users.noreply.github.com>
-
-  private IndexRepository finishComputingRepository(Integer bucketId, LuceneSerializer serializer,
-      PartitionedRegion userRegion, IndexRepository oldRepository, InternalLuceneIndex index)
-      throws IOException {
+  protected IndexRepository finishComputingRepository(Integer bucketId, LuceneSerializer serializer,
+      PartitionedRegion userRegion, IndexRepository oldRepository, InternalLuceneIndex index) {
-      // bucketTargetingMap handles partition resolver (via bucketId as callbackArg)
-      Map bucketTargetingMap = getBucketTargetingMap(fileAndChunkBucket, bucketId);
-      RegionDirectory dir =
-          new RegionDirectory(bucketTargetingMap, indexForPR.getFileSystemStats());
-      IndexWriterConfig config = new IndexWriterConfig(indexForPR.getAnalyzer());
-      IndexWriter writer = new IndexWriter(dir, config);
+      IndexWriter writer = buildIndexWriter(bucketId, fileAndChunkBucket, indexForPR);
+
-      logger.info("Exception thrown while constructing Lucene Index for bucket:" + bucketId
-          + " for file region:" + fileAndChunkBucket.getFullPath());
-      throw e;
+      logger.warn("Exception thrown while constructing Lucene Index for bucket:" + bucketId
+          + " for file region:" + fileAndChunkBucket.getFullPath(), e);
+      return null;
+  protected IndexWriter buildIndexWriter(int bucketId, BucketRegion fileAndChunkBucket,
+      LuceneIndexForPartitionedRegion indexForPR) throws IOException {
+    // bucketTargetingMap handles partition resolver (via bucketId as callbackArg)
+    Map bucketTargetingMap = getBucketTargetingMap(fileAndChunkBucket, bucketId);
+    RegionDirectory dir = new RegionDirectory(bucketTargetingMap, indexForPR.getFileSystemStats());
+    IndexWriterConfig config = new IndexWriterConfig(indexForPR.getAnalyzer());
+
+    return new IndexWriter(dir, config);
+  }
+
-    Set<IndexRepository> affectedRepos = new HashSet<IndexRepository>();
+    Set<IndexRepository> affectedRepos = new HashSet<>();
-  private Map getBucketTargetingMap(BucketRegion region, int bucketId) {
+  protected Map getBucketTargetingMap(BucketRegion region, int bucketId) {
-  private String getLockName(final BucketRegion fileAndChunkBucket) {
+  protected String getLockName(final BucketRegion fileAndChunkBucket) {
-  private DistributedLockService getLockService() {
+  protected DistributedLockService getLockService() {
