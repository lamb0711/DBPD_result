GEODE-6503: Moving redis into a separate module

* Moving all of the geode redis apapter code to the geode-redis module
* Moving the redis specific dependencies (netty and geo) to geode-redis
* Adding a GeodeRedisService to initialize the redis server

The geode distribution will still include redis, and gfsh start server
will still include redis on it's classpath. However, consumers of
the geode-core maven module will no longer get the redis module and its
dependencies unless they explicitly also depend on geode-redis.

This closes #3284

-import org.apache.geode.redis.GeodeRedisServer;
-   * Redis server is started when {@link DistributionConfig#getRedisPort()} is set
-   */
-  private GeodeRedisServer redisServer;
-
-  /**
+    if (isClient()) {
+      initializeClientRegionShortcuts(this);
+    } else {
+      initializeRegionShortcuts(this);
+    }
+
-    startRedisServer();
-
-  private void startRedisServer() {
-    int port = this.system.getConfig().getRedisPort();
-    if (port != 0) {
-      String bindAddress = this.system.getConfig().getRedisBindAddress();
-      assert bindAddress != null;
-      if (bindAddress.equals(DistributionConfig.DEFAULT_REDIS_BIND_ADDRESS)) {
-        getLogger().info(
-            String.format("Starting GeodeRedisServer on port %s",
-                new Object[] {port}));
-      } else {
-        getLogger().info(
-            String.format("Starting GeodeRedisServer on bind address %s on port %s",
-                new Object[] {bindAddress, port}));
-      }
-      this.redisServer = new GeodeRedisServer(bindAddress, port);
-      this.redisServer.start();
-    }
-  }
-
-      if (isClient()) {
-        initializeClientRegionShortcuts(this);
-      } else {
-        initializeRegionShortcuts(this);
-      }
-          stopRedisServer();
+          this.stopServices();
+  private void stopServices() {
+    for (CacheService service : this.services.values()) {
+      try {
+        service.close();
+      } catch (Throwable t) {
+        logger.warn("Error stopping service " + service, t);
+      }
+    }
+  }
+
-  private void stopRedisServer() {
-    if (this.redisServer != null)
-      this.redisServer.shutdown();
-  }
-
