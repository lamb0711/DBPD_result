Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class uses gemfire function execution to get the dependencies between
- * threads present in each member of the distributed system. It then uses the
- * {@link DeadlockDetector} class to determine if any deadlocks exist within
- * those dependencies.
+ * This class uses gemfire function execution to get the dependencies between threads present in
+ * each member of the distributed system. It then uses the {@link DeadlockDetector} class to
+ * determine if any deadlocks exist within those dependencies.
-  
+
-    
+
-  public GemFireDeadlockDetector (Set<DistributedMember> targetMembers) {
+
+  public GemFireDeadlockDetector(Set<DistributedMember> targetMembers) {
+
-    
+
-    ResultCollector<HashSet<Dependency>, Serializable> collector = new ResultCollector<HashSet<Dependency>, Serializable>() {
+    ResultCollector<HashSet<Dependency>, Serializable> collector =
+        new ResultCollector<HashSet<Dependency>, Serializable>() {
-      public synchronized Serializable getResult()
-          throws FunctionException {
-        return null;
-      }
+          public synchronized Serializable getResult() throws FunctionException {
+            return null;
+          }
-      public synchronized Serializable getResult(long timeout,
-          TimeUnit unit) throws FunctionException, InterruptedException {
-        return null;
-      }
+          public synchronized Serializable getResult(long timeout, TimeUnit unit)
+              throws FunctionException, InterruptedException {
+            return null;
+          }
-      public synchronized void addResult(DistributedMember memberID,
-          HashSet<Dependency> resultOfSingleExecution) {
-        detector.addDependencies(resultOfSingleExecution);
-        
-      }
+          public synchronized void addResult(DistributedMember memberID,
+              HashSet<Dependency> resultOfSingleExecution) {
+            detector.addDependencies(resultOfSingleExecution);
-      public void endResults() {
-        
-      }
+          }
-      public void clearResults() {
-        
-      }
+          public void endResults() {
+
+        }
+
+          public void clearResults() {
+
+        }
-    };
-    
+        };
+
-      execution =  FunctionService.onMembers(targetMembers).withCollector(collector);
+      execution = FunctionService.onMembers(targetMembers).withCollector(collector);
-      execution =  FunctionService.onMembers().withCollector(collector);
+      execution = FunctionService.onMembers().withCollector(collector);
-    
+
-    collector = (ResultCollector<HashSet<Dependency>, Serializable>)execution.execute(new CollectDependencyFunction());
-    
-    //Wait for results
+    collector = (ResultCollector<HashSet<Dependency>, Serializable>) execution
+        .execute(new CollectDependencyFunction());
+
+    // Wait for results
-  
+
-      if(instance == null) {
+      if (instance == null) {
-      
+
-      
+
