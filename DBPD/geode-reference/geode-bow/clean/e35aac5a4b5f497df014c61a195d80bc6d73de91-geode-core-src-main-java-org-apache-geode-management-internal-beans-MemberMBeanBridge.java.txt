Merge branch 'release/1.5.0'

-import java.io.File;
-import org.apache.geode.cache.persistence.PersistentID;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.backup.BackupManager;
-import org.apache.geode.internal.cache.eviction.EvictionStatistics;
-import org.apache.geode.management.DiskBackupResult;
-import org.apache.geode.management.ManagementException;
-  private DM dm;
+  private DistributionManager dm;
-    if (dm instanceof DistributionManager) {
-      DistributionManager distManager = (DistributionManager) system.getDistributionManager();
+    if (dm instanceof ClusterDistributionManager) {
+      ClusterDistributionManager distManager =
+          (ClusterDistributionManager) system.getDistributionManager();
-          new OnlineCommandProcessor(system.getProperties(), cache.getSecurityService());
+          new OnlineCommandProcessor(system.getProperties(), cache.getSecurityService(), cache);
-    LocalRegion l = (LocalRegion) region;
-    if (l.getEvictionController() != null) {
-      EvictionStatistics stats = l.getEvictionController().getStatistics();
-      if (stats != null) {
-        addLRUStats(stats);
-      }
-    }
-
-    DiskRegion dr = l.getDiskRegion();
+    InternalRegion internalRegion = (InternalRegion) region;
+    addLRUStats(internalRegion.getEvictionStatistics());
+    DiskRegion dr = internalRegion.getDiskRegion();
-  public void addLRUStats(EvictionStatistics lruStats) {
-    regionMonitor.addStatisticsToMonitor(lruStats.getStats());
+  public void addLRUStats(Statistics lruStats) {
+    if (lruStats != null) {
+      regionMonitor.addStatisticsToMonitor(lruStats);
+    }
-    if (l.getEvictionController() != null) {
-      EvictionStatistics stats = l.getEvictionController().getStatistics();
-      if (stats != null) {
-        removeLRUStats(stats);
-      }
-    }
+    removeLRUStats(l.getEvictionStatistics());
-  public void removeLRUStats(EvictionStatistics lruStats) {
-    regionMonitor.removeLRUStatistics(lruStats.getStats());
+  public void removeLRUStats(Statistics statistics) {
+    if (statistics != null) {
+      regionMonitor.removeLRUStatistics(statistics);
+    }
-   * backs up all the disk to the targeted directory
-   *
-   * @param targetDirPath path of the directory where back up is to be taken
-   * @return array of DiskBackup results which might get aggregated at Managing node Check the
-   *         validity of this mbean call. When does it make sense to backup a single member of a
-   *         gemfire system in isolation of the other members?
-   */
-  public DiskBackupResult[] backupMember(String targetDirPath) {
-    if (cache != null) {
-      Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
-      for (DiskStore store : diskStores) {
-        store.flush();
-      }
-    }
-
-    DiskBackupResult[] diskBackUpResult = null;
-    File targetDir = new File(targetDirPath);
-
-    if (cache == null) {
-      return null;
-
-    } else {
-      try {
-        BackupManager manager =
-            cache.startBackup(cache.getInternalDistributedSystem().getDistributedMember());
-        boolean abort = true;
-        Set<PersistentID> existingDataStores;
-        Set<PersistentID> successfulDataStores;
-        try {
-          existingDataStores = manager.prepareForBackup();
-          abort = false;
-        } finally {
-          successfulDataStores = manager.doBackup(targetDir, null/* TODO rishi */, abort);
-        }
-        diskBackUpResult = new DiskBackupResult[existingDataStores.size()];
-        int j = 0;
-
-        for (PersistentID id : existingDataStores) {
-          if (successfulDataStores.contains(id)) {
-            diskBackUpResult[j] = new DiskBackupResult(id.getDirectory(), false);
-          } else {
-            diskBackUpResult[j] = new DiskBackupResult(id.getDirectory(), true);
-          }
-          j++;
-        }
-
-      } catch (IOException e) {
-        throw new ManagementException(e);
-      }
-    }
-    return diskBackUpResult;
-  }
-
-  /**
-    Set<LocalRegion> listOfAppRegions = cache.getApplicationRegions();
+    Set<InternalRegion> listOfAppRegions = cache.getApplicationRegions();
-      for (LocalRegion rg : listOfAppRegions) {
+      for (InternalRegion rg : listOfAppRegions) {
+
+  public String getReleaseVersion() {
+    return GemFireVersion.getGemFireVersion();
+  }
