Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides flow control using permits based on the sliding window
- * algorithm.  The sender should invoke {@link #create(Region, DistributedMember, int)}
- * while the recipient should respond with {@link #sendAck(DM, DistributedMember, int, String)}
- * or {@link #sendAbort(DM, int, DistributedMember)}.
+ * Provides flow control using permits based on the sliding window algorithm. The sender should
+ * invoke {@link #create(Region, DistributedMember, int)} while the recipient should respond with
+ * {@link #sendAck(DM, DistributedMember, int, String)} or
+ * {@link #sendAbort(DM, int, DistributedMember)}.
+     * 
-    
+
+     * 
-    
+
-     * Returns true if the window is open and {{@link #waitForOpening()} will
-     * return immediately.
+     * Returns true if the window is open and {{@link #waitForOpening()} will return immediately.
-    
+
+     * 
-    
+
-  
+
-  
+
-  
+
-  
+
-  
+
-   * Creates and registers a {@link Window} that provides flow control. 
-   *  
+   * Creates and registers a {@link Window} that provides flow control.
+   * 
-    
+
-  
+
-      getLoggerI18n().fine("SNP: Sending ACK for packet " + packetId + " on window " + windowId + " to member " + member);
-    
+      getLoggerI18n().fine("SNP: Sending ACK for packet " + packetId + " on window " + windowId
+          + " to member " + member);
+
-  
+
-    
+
-  
+
-    
+
-    
+
-    
+
-    
+
-    
+
-      
+
-            
+
-    
+
-    
+
-    
+
-    
+
-    
+
-  
+
-    
+
-    public FlowControlAbortMessage() {
-    }
+    public FlowControlAbortMessage() {}
-        getLoggerI18n().fine("SNP: Received ABORT on window " + windowId + " from member " + getSender());
-      
-      WindowImpl<?, ?> win = (WindowImpl<?, ?>) FlowController.getInstance().processors.retrieve(windowId);
+        getLoggerI18n()
+            .fine("SNP: Received ABORT on window " + windowId + " from member " + getSender());
+
+      WindowImpl<?, ?> win =
+          (WindowImpl<?, ?>) FlowController.getInstance().processors.retrieve(windowId);
-    
+
-    
+
-    
+
-    public FlowControlAckMessage() {
-    }
+    public FlowControlAckMessage() {}
-        getLoggerI18n().fine("SNP: Received ACK for packet " + packetId + " on window " + windowId + " from member " + getSender());
-      
-      WindowImpl<?, ?> win = (WindowImpl<?, ?>) FlowController.getInstance().processors.retrieve(windowId);
+        getLoggerI18n().fine("SNP: Received ACK for packet " + packetId + " on window " + windowId
+            + " from member " + getSender());
+
+      WindowImpl<?, ?> win =
+          (WindowImpl<?, ?>) FlowController.getInstance().processors.retrieve(windowId);
-    
+
