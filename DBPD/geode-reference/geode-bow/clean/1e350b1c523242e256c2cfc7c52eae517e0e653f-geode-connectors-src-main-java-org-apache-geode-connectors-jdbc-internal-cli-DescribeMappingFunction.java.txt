Merge pull request #3032 from BenjaminPerryRoss/feature/GEODE-6187

Feature/geode 6187
+import static org.apache.geode.connectors.util.internal.MappingConstants.CATALOG_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.DATA_SOURCE_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.ID_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.PDX_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.REGION_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.SCHEMA_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.SYNCHRONOUS_NAME;
+import static org.apache.geode.connectors.util.internal.MappingConstants.TABLE_NAME;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.geode.connectors.jdbc.internal.RegionMappingNotFoundException;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
+import org.apache.geode.connectors.util.internal.DescribeMappingResult;
-    JdbcConnectorService service = FunctionContextArgumentProvider.getJdbcConnectorService(context);
+    return new CliFunctionResult(context.getMemberName(), getResult(context));
-    return new CliFunctionResult(context.getMemberName(),
-        service.getMappingForRegion(context.getArguments()));
+  }
+
+  private DescribeMappingResult getResult(FunctionContext<String> context) {
+    JdbcConnectorService service = FunctionContextArgumentProvider.getJdbcConnectorService(context);
+    RegionMapping mapping = service.getMappingForRegion(context.getArguments());
+    if (mapping == null) {
+      return null;
+    }
+
+    Map<String, String> attributes = new HashMap<>();
+    attributes.put(REGION_NAME, mapping.getRegionName());
+    attributes.put(DATA_SOURCE_NAME, mapping.getDataSourceName());
+    attributes.put(TABLE_NAME, mapping.getTableName());
+    attributes.put(PDX_NAME, mapping.getPdxName());
+    attributes.put(ID_NAME, mapping.getIds());
+    attributes.put(SCHEMA_NAME, mapping.getSchema());
+    attributes.put(CATALOG_NAME, mapping.getCatalog());
+
+    try {
+      attributes.put(SYNCHRONOUS_NAME,
+          Boolean
+              .toString(service.isMappingSynchronous(mapping.getRegionName(), context.getCache())));
+    } catch (RegionMappingNotFoundException e) {
+      attributes.put(SYNCHRONOUS_NAME, "Not found.");
+    }
+
+    return new DescribeMappingResult(attributes);
