Merge branch 'develop' into feature/GEODE-3109

+import org.apache.geode.distributed.internal.membership.gms.membership.HostAddress;
-  private final List<InetSocketAddress> locators;
+  private final List<HostAddress> locators;
+  private transient NetView recoveredView;
+
+  private volatile boolean isCoordinator;
+
-      this.locators = new ArrayList<>(0);
+      this.locators = new ArrayList<HostAddress>(0);
+      } else if (localAddress != null) {
+        synchronized (this.registrants) {
+          this.registrants.add(localAddress);
+        }
+    this.recoveredView = null;
+  @Override
+  public void setIsCoordinator(boolean isCoordinator) {
+    this.isCoordinator = isCoordinator;
+  }
+        if (v == null) {
+          v = this.recoveredView;
+        }
+
+        synchronized (registrants) {
+          registrants.add(findRequest.getMemberID());
+        }
-          int viewId = v.getViewId();
-          if (viewId > findRequest.getLastViewId()) {
+
+          if (v.getViewId() > findRequest.getLastViewId()) {
-            registrants.add(findRequest.getMemberID());
+          if (isCoordinator) {
+            coord = localAddress;
+            InternalDistributedMember viewCoordinator = null;
+            if (v != null) {
+              viewCoordinator = v.getCoordinator();
+            }
+            fromView = viewCoordinator != null && !viewCoordinator.equals(localAddress);
+            if (!fromView) {
+              logger.info("This member is becoming coordinator");
+              v = null;
+            }
+          }
-          if (view != null) {
-            coordPk = (byte[]) view.getPublicKey(coord);
+          if (v != null) {
+            coordPk = (byte[]) v.getPublicKey(coord);
-          response = new FindCoordinatorResponse(coord, localAddress, fromView, view,
+          response = new FindCoordinatorResponse(coord, localAddress, fromView, v,
-    if (!recoverFromOthers()) {
+    if (!recoverFromOtherLocators()) {
-  private boolean recoverFromOthers() {
-    for (InetSocketAddress other : this.locators) {
-      if (recover(other)) {
+  private boolean recoverFromOtherLocators() {
+    for (HostAddress other : this.locators) {
+      if (recover(other.getSocketInetAddress())) {
-      this.view = (NetView) o;
-      List<InternalDistributedMember> members = new ArrayList<>(view.getMembers());
+      recoveredView = (NetView) o;
+      recoveredView.setViewId(-1); // this is not a valid view so it shouldn't have a usable Id
+      List<InternalDistributedMember> members = new ArrayList<>(recoveredView.getMembers());
-          view.remove(member);
+          recoveredView.remove(member);
-      logger.info("Peer locator initial membership is " + view);
+      logger.info("Peer locator recovered membership is " + recoveredView);
