GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-
- *
- *
-  static class Attributes {
+  class Attributes {
-
-    /** whether LRU stats are required */
-    // boolean lru = false;
-  public RegionEntryFactory getEntryFactory();
+  RegionEntryFactory getEntryFactory();
-  public void setEntryFactory(RegionEntryFactory f);
+  void setEntryFactory(RegionEntryFactory f);
-  public Attributes getAttributes();
+  Attributes getAttributes();
-  public void setOwner(Object r);
+  void setOwner(Object r);
-  public void changeOwner(LocalRegion r);
+  void changeOwner(LocalRegion r);
-  public int size();
+  int size();
-  public boolean isEmpty();
+  boolean isEmpty();
-  public int sizeInVM();
+  int sizeInVM();
-  public Set keySet();
+  Set keySet();
-  public Collection<RegionEntry> regionEntries();
+  Collection<RegionEntry> regionEntries();
-  public Collection<RegionEntry> regionEntriesInVM();
+  Collection<RegionEntry> regionEntriesInVM();
-  public boolean containsKey(Object key);
+  boolean containsKey(Object key);
-   * @param key
-  public RegionEntry getEntry(Object key);
+  RegionEntry getEntry(Object key);
-  public RegionEntry putEntryIfAbsent(Object key, RegionEntry re);
+  RegionEntry putEntryIfAbsent(Object key, RegionEntry re);
-   * @param key
-  public RegionEntry getEntryInVM(Object key);
+  RegionEntry getEntryInVM(Object key);
-   * @param key
-  public RegionEntry getOperationalEntryInVM(Object key);
-
-  // /**
-  // * Removes any entry associated with <code>key</code>.
-  // * Do nothing if the map has no entry for key.
-  // */
-  // public void remove(Object key);
-
-  // /**
-  // * Removes the entry associated with <code>key</code>
-  // * if it is <code>entry</code>.
-  // * Otherwise do nothing.
-  // */
-  // public void remove(Object key, RegionEntry entry);
+  RegionEntry getOperationalEntryInVM(Object key);
-  public Set<VersionSource> clear(RegionVersionVector rvv);
+  Set<VersionSource> clear(RegionVersionVector rvv);
-  public RegionEntry initRecoveredEntry(Object key, DiskEntry.RecoveredEntry value);
+  RegionEntry initRecoveredEntry(Object key, DiskEntry.RecoveredEntry value);
-  public RegionEntry updateRecoveredEntry(Object key, DiskEntry.RecoveredEntry value);
+  RegionEntry updateRecoveredEntry(Object key, DiskEntry.RecoveredEntry value);
-  public boolean initialImagePut(Object key, long lastModified, Object newValue,
-      boolean wasRecovered, boolean deferLRUCallback, VersionTag entryVersion,
-      InternalDistributedMember sender, boolean forceValue);
+  boolean initialImagePut(Object key, long lastModified, Object newValue, boolean wasRecovered,
+      boolean deferLRUCallback, VersionTag entryVersion, InternalDistributedMember sender,
+      boolean forceValue);
-  public boolean destroy(EntryEventImpl event, boolean inTokenMode, boolean duringRI,
-      boolean cacheWrite, boolean isEviction, Object expectedOldValue, boolean removeRecoveredEntry)
+  boolean destroy(EntryEventImpl event, boolean inTokenMode, boolean duringRI, boolean cacheWrite,
+      boolean isEviction, Object expectedOldValue, boolean removeRecoveredEntry)
-  public boolean invalidate(EntryEventImpl event, boolean invokeCallbacks, boolean forceNewEntry,
+  boolean invalidate(EntryEventImpl event, boolean invokeCallbacks, boolean forceNewEntry,
-  public void evictValue(Object key);
+  void evictValue(Object key);
-  public RegionEntry basicPut(EntryEventImpl event, long lastModified, boolean ifNew, boolean ifOld,
+  RegionEntry basicPut(EntryEventImpl event, long lastModified, boolean ifNew, boolean ifOld,
-  public void writeSyncIfPresent(Object key, Runnable runner);
+  void writeSyncIfPresent(Object key, Runnable runner);
-  public void removeIfDestroyed(Object key);
+  void removeIfDestroyed(Object key);
-   * @param filterRoutingInfo
-  public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event,
-      boolean inTokenMode, boolean inRI, Operation op, EventID eventId, Object aCallbackArgument,
+  void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event, boolean inTokenMode,
+      boolean inRI, Operation op, EventID eventId, Object aCallbackArgument,
-   * @param filterRoutingInfo
-  public void txApplyInvalidate(Object key, Object newValue, boolean didDestroy,
-      TransactionId rmtOrigin, TXRmtEvent event, boolean localOp, EventID eventId,
-      Object aCallbackArgument, List<EntryEventImpl> pendingCallbacks,
-      FilterRoutingInfo filterRoutingInfo, ClientProxyMembershipID bridgeContext,
-      TXEntryState txEntryState, VersionTag versionTag, long tailKey);
+  void txApplyInvalidate(Object key, Object newValue, boolean didDestroy, TransactionId rmtOrigin,
+      TXRmtEvent event, boolean localOp, EventID eventId, Object aCallbackArgument,
+      List<EntryEventImpl> pendingCallbacks, FilterRoutingInfo filterRoutingInfo,
+      ClientProxyMembershipID bridgeContext, TXEntryState txEntryState, VersionTag versionTag,
+      long tailKey);
-   * @param filterRoutingInfo
-  public void txApplyPut(Operation putOp, Object key, Object newValue, boolean didDestroy,
+  void txApplyPut(Operation putOp, Object key, Object newValue, boolean didDestroy,
-  public void removeEntry(Object key, RegionEntry value, boolean updateStats);
+  void removeEntry(Object key, RegionEntry value, boolean updateStats);
-  public void removeEntry(Object key, RegionEntry re, boolean updateStat, EntryEventImpl event,
-      LocalRegion owner);
+  void removeEntry(Object key, RegionEntry re, boolean updateStat, EntryEventImpl event,
+      InternalRegion owner);
-  public void copyRecoveredEntries(RegionMap rm);
+  void copyRecoveredEntries(RegionMap rm);
-  public boolean removeTombstone(RegionEntry re, VersionHolder destroyedVersion, boolean isEviction,
+  boolean removeTombstone(RegionEntry re, VersionHolder destroyedVersion, boolean isEviction,
-  public boolean isTombstoneNotNeeded(RegionEntry re, int destroyedVersion);
+  boolean isTombstoneNotNeeded(RegionEntry re, int destroyedVersion);
-  public void updateEntryVersion(EntryEventImpl event);
+  void updateEntryVersion(EntryEventImpl event);
-  public void decTxRefCount(RegionEntry e);
+  void decTxRefCount(RegionEntry e);
-  public void close();
+  void close();
-  public ARMLockTestHook getARMLockTestHook();
-
+  ARMLockTestHook getARMLockTestHook();
