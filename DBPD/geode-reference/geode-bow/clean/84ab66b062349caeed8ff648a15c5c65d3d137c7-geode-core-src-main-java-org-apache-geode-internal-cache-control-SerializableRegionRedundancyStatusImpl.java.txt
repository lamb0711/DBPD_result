GEODE-8272 Refactor Restore Redundancy Command (#5249)

Co-authored-by: Jinmei Liao <jiliao@pivotal.io>
Co-authored-by: Mark Hanson <mhanson@pivotal.io>

* Reimplement the RestoreRedundancyCommand using OperationPerformer
-import org.apache.geode.cache.control.RegionRedundancyStatus;
+import org.apache.geode.management.internal.operation.RegionRedundancyStatusImpl;
-public class RegionRedundancyStatusImpl implements DataSerializableFixedID, RegionRedundancyStatus {
-
-  public static final String OUTPUT_STRING =
-      "%s redundancy status: %s. Desired redundancy is %s and actual redundancy is %s.";
-
-  /**
-   * The name of the region used to create this object.
-   */
-  private String regionName;
-
-  /**
-   * The configured redundancy of the region used to create this object.
-   */
-  private int configuredRedundancy;
-
-  /**
-   * The actual redundancy of the region used to create this object at time of creation.
-   */
-  private int actualRedundancy;
-
-  /**
-   * The {@link RedundancyStatus} of the region used to create this object at time of creation.
-   */
-  private RedundancyStatus status;
-
+/**
+ * result object produced by the servers. These need to be transferred to the locators
+ * via functions so they need to be DataSerializable
+ */
+public class SerializableRegionRedundancyStatusImpl extends
+    RegionRedundancyStatusImpl
+    implements DataSerializableFixedID {
-  public RegionRedundancyStatusImpl() {}
+  public SerializableRegionRedundancyStatusImpl() {}
-  public RegionRedundancyStatusImpl(PartitionedRegion region) {
+  public SerializableRegionRedundancyStatusImpl(PartitionedRegion region) {
-  @Override
-  public String getRegionName() {
-    return regionName;
-  }
-
-  @Override
-  public int getConfiguredRedundancy() {
-    return configuredRedundancy;
-  }
-
-  @Override
-  public int getActualRedundancy() {
-    return actualRedundancy;
-  }
-
-  @Override
-  public RedundancyStatus getStatus() {
-    return status;
-  }
-
