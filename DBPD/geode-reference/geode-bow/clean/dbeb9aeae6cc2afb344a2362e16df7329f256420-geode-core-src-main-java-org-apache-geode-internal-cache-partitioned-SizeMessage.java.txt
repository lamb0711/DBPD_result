Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This message is used to determine the number of Entries in a Region, or its
- * size.
+ * This message is used to determine the number of Entries in a Region, or its size.
-public final class SizeMessage extends PartitionMessage
-  {
+public final class SizeMessage extends PartitionMessage {
-  
+
-  
+
-  // reuse the NOTIFICATION_ONLY flag since it is not used for SizeMessage 
+  // reuse the NOTIFICATION_ONLY flag since it is not used for SizeMessage
-   * The message sent to a set of {@link InternalDistributedMember}s to caculate the
-   * number of Entries in each of their buckets
+   * The message sent to a set of {@link InternalDistributedMember}s to caculate the number of
+   * Entries in each of their buckets
-   * @param recipients
-   *          members to receive the message
-   * @param regionId
-   *          the <code>PartitionedRegion<code> regionId
+   * @param recipients members to receive the message
+   * @param regionId the <code>PartitionedRegion<code> regionId
-   * sends a message to the given recipients asking for the size of either
-   * their primary bucket entries or the values sets of their primary
-   * buckets
+   * sends a message to the given recipients asking for the size of either their primary bucket
+   * entries or the values sets of their primary buckets
+   * 
-  public static SizeResponse send(Set recipients, PartitionedRegion r,
-      ArrayList<Integer> bucketIds, boolean estimate) {
+  public static SizeResponse send(Set recipients, PartitionedRegion r, ArrayList<Integer> bucketIds,
+      boolean estimate) {
-    SizeMessage m = new SizeMessage(recipients, r.getPRId(),
-        p, bucketIds, estimate);
+    SizeMessage m = new SizeMessage(recipients, r.getPRId(), p, bucketIds, estimate);
-   * This message may be sent to nodes before the PartitionedRegion is
-   * completely initialized due to the RegionAdvisor(s) knowing about the
-   * existance of a partitioned region at a very early part of the
-   * initialization
+   * This message may be sent to nodes before the PartitionedRegion is completely initialized due to
+   * the RegionAdvisor(s) knowing about the existance of a partitioned region at a very early part
+   * of the initialization
-    if (this.estimate) s |= ESTIMATE;
+    if (this.estimate)
+      s |= ESTIMATE;
-  protected boolean operateOnPartitionedRegion(DistributionManager dm, 
-      PartitionedRegion r, long startTime) throws CacheException, ForceReattemptException {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion r,
+      long startTime) throws CacheException, ForceReattemptException {
-        }
-        else {
+        } else {
-//        if (logger.isTraceEnabled(LogMarker.DM)) {
-//          l.fine(getClass().getName() + " send sizes back using processorId: "
-//              + getProcessorId());
-//        }
-        r.getPrStats().endPartitionMessagesProcessing(startTime); 
+        // if (logger.isTraceEnabled(LogMarker.DM)) {
+        // l.fine(getClass().getName() + " send sizes back using processorId: "
+        // + getProcessorId());
+        // }
+        r.getPrStats().endPartitionMessagesProcessing(startTime);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.SizeMessage_SIZEMESSAGE_DATA_STORE_NOT_CONFIGURED_FOR_THIS_MEMBER));
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.SizeMessage_SIZEMESSAGE_DATA_STORE_NOT_CONFIGURED_FOR_THIS_MEMBER));
-            new ReplyException(new ForceReattemptException(LocalizedStrings.SizeMessage_0_1_NO_DATASTORE_HERE_2.toLocalizedString())), dm, r.isInternalRegion());
+            new ReplyException(new ForceReattemptException(
+                LocalizedStrings.SizeMessage_0_1_NO_DATASTORE_HERE_2.toLocalizedString())),
+            dm, r.isInternalRegion());
-    }
-    else {
-      logger.warn(LocalizedMessage.create(LocalizedStrings.SizeMessage_SIZEMESSAGE_REGION_NOT_FOUND_FOR_THIS_MEMBER,regionId));
-      ReplyMessage
-          .send(getSender(),getProcessorId(),new ReplyException(
-                  new ForceReattemptException(
-                      LocalizedStrings.SizeMessage_0_COULD_NOT_FIND_PARTITIONED_REGION_WITH_ID_1
-                          .toLocalizedString(new Object[] {
-                              dm.getDistributionManagerId(),
-                              Integer.valueOf(regionId) }))), dm, r != null && r.isInternalRegion());
+    } else {
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.SizeMessage_SIZEMESSAGE_REGION_NOT_FOUND_FOR_THIS_MEMBER, regionId));
+      ReplyMessage.send(getSender(), getProcessorId(),
+          new ReplyException(new ForceReattemptException(
+              LocalizedStrings.SizeMessage_0_COULD_NOT_FIND_PARTITIONED_REGION_WITH_ID_1
+                  .toLocalizedString(
+                      new Object[] {dm.getDistributionManagerId(), Integer.valueOf(regionId)}))),
+          dm, r != null && r.isInternalRegion());
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  public static final class SizeReplyMessage extends ReplyMessage
-   {
+  public static final class SizeReplyMessage extends ReplyMessage {
-    public SizeReplyMessage() {
-    }
+    public SizeReplyMessage() {}
-    public static void send(InternalDistributedMember recipient, int processorId,
-        DM dm, Map<Integer, SizeEntry> sizes)
-    {
-      Assert.assertTrue(recipient != null,
-          "SizeReplyMessage NULL reply message");
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm,
+        Map<Integer, SizeEntry> sizes) {
+      Assert.assertTrue(recipient != null, "SizeReplyMessage NULL reply message");
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, final ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, final ReplyProcessor21 processor) {
-        logger.trace(LogMarker.DM, "{} process invoking reply processor with processorId: {}", getClass().getName(), this.processorId);
+        logger.trace(LogMarker.DM, "{} process invoking reply processor with processorId: {}",
+            getClass().getName(), this.processorId);
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-  public int getDSFID() {
-    return PR_SIZE_REPLY_MESSAGE;
-  }
-
-    @Override
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
-      super.fromData(in);
-      this.bucketSizes = (Map<Integer, SizeEntry>)DataSerializer.readObject(in);
+    public int getDSFID() {
+      return PR_SIZE_REPLY_MESSAGE;
-    public String toString()
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+      super.fromData(in);
+      this.bucketSizes = (Map<Integer, SizeEntry>) DataSerializer.readObject(in);
+    }
+
+    @Override
+    public String toString() {
-      sb.append(this.getClass().getName()).append(" processorid=").append(
-          this.processorId).append(" reply to sender ")
-          .append(this.getSender()).append(" returning bucketSizes.size=")
-          .append(getBucketSizes().size());
+      sb.append(this.getClass().getName()).append(" processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender())
+          .append(" returning bucketSizes.size=").append(getBucketSizes().size());
-    public Map<Integer, SizeEntry> getBucketSizes()
-    {
+    public Map<Integer, SizeEntry> getBucketSizes() {
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.partitioned.GetMessage.GetReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.partitioned.GetMessage.GetReplyMessage}
-  public static class SizeResponse extends ReplyProcessor21
-   {
+  public static class SizeResponse extends ReplyProcessor21 {
-     * The SizeResponse processor ignores remote exceptions by implmenting this
-     * method. Ignoring remote exceptions is acceptable since the SizeMessage is
-     * sent to all Nodes and all {@link SizeMessage.SizeReplyMessage}s are processed for
-     * each individual bucket size. The hope is that any failure due to an
-     * exception will be covered by healthy Nodes.
+     * The SizeResponse processor ignores remote exceptions by implmenting this method. Ignoring
+     * remote exceptions is acceptable since the SizeMessage is sent to all Nodes and all
+     * {@link SizeMessage.SizeReplyMessage}s are processed for each individual bucket size. The hope
+     * is that any failure due to an exception will be covered by healthy Nodes.
-    protected void processException(ReplyException ex)
-    {
+    protected void processException(ReplyException ex) {
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-          SizeReplyMessage reply = (SizeReplyMessage)msg;
+          SizeReplyMessage reply = (SizeReplyMessage) msg;
-      }
-      finally {
+      } finally {
-     * @return Map buckets and their associated sizes, this should never throw
-     *         due to the {@link #processException(ReplyException)}method above
+     * @return Map buckets and their associated sizes, this should never throw due to the
+     *         {@link #processException(ReplyException)}method above
-    public Map<Integer, SizeEntry> waitBucketSizes()
-    {
+    public Map<Integer, SizeEntry> waitBucketSizes() {
-      }
-      catch (ReplyException e) {
-        logger.debug("{} waitBucketSizes ignoring exception: {}", getClass().getName(), e.getMessage(), e);
+      } catch (ReplyException e) {
+        logger.debug("{} waitBucketSizes ignoring exception: {}", getClass().getName(),
+            e.getMessage(), e);
