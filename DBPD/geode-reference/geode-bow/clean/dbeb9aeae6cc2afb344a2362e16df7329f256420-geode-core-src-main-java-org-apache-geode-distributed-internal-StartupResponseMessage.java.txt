Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import java.util.*;
+// import java.util.*;
- * A message that is sent to all other distribution manager when
- * a distribution manager starts up.
+ * A message that is sent to all other distribution manager when a distribution manager starts up.
-public class StartupResponseMessage extends HighPriorityDistributionMessage implements AdminMessageType {
+public class StartupResponseMessage extends HighPriorityDistributionMessage
+    implements AdminMessageType {
-  
+
-  
+
-   * To fix B39705, added the instance variables for storing instantiator information. 
+   * To fix B39705, added the instance variables for storing instantiator information.
-  protected int [] serializerIds = null;
+  protected int[] serializerIds = null;
-  protected int [] instantiatorIds = null;
+  protected int[] instantiatorIds = null;
-    
+
-  
-  StartupResponseMessage(DistributionManager dm,
-                                           int processorId,
-                                           InternalDistributedMember recipient,
-                                           String rejectionMessage,
-                                           boolean responderIsAdmin) {
-//    StartupResponseMessage m = new StartupResponseMessage();
+
+  StartupResponseMessage(DistributionManager dm, int processorId,
+      InternalDistributedMember recipient, String rejectionMessage, boolean responderIsAdmin) {
+    // StartupResponseMessage m = new StartupResponseMessage();
-    
+
-     * To fix B39705, we have added the instance variables to initialize the
-     * information about the instantiators. While preparing the response message,
-     * we populate this information. 
+     * To fix B39705, we have added the instance variables to initialize the information about the
+     * instantiators. While preparing the response message, we populate this information.
-    for(int i=0; i< instantiators.length ; i++) {
+    for (int i = 0; i < instantiators.length; i++) {
-        Instantiator inst = (Instantiator)instantiators[i];
+        Instantiator inst = (Instantiator) instantiators[i];
-        InstantiatorAttributesHolder inst = (InstantiatorAttributesHolder)instantiators[i];
+        InstantiatorAttributesHolder inst = (InstantiatorAttributesHolder) instantiators[i];
-    for(int i = 0; i < sahs.length ; i++ ) {
-     this.serializerIds[i] = sahs[i].getId();
-     this.serializerClasseNames[i] = sahs[i].getClassName();      
+    for (int i = 0; i < sahs.length; i++) {
+      this.serializerIds[i] = sahs[i].getId();
+      this.serializerClasseNames[i] = sahs[i].getClassName();
-  
+
-  
+
-  
+
-   * Adds the distribution managers that have started up to the current
-   * DM's list of members.
+   * Adds the distribution managers that have started up to the current DM's list of members.
-//      this.rejectionMessage = "Peer " + getSender() + " has no network interfaces";
-    }
-    else {
+      // this.rejectionMessage = "Peer " + getSender() + " has no network interfaces";
+    } else {
-    
-    //Process the registration of instantiators & log failures, if any.
+
+    // Process the registration of instantiators & log failures, if any.
-    
-    if(this.serializerIds != null) {
-      for(int i = 0; i < serializerIds.length ; i++) {
+
+    if (this.serializerIds != null) {
+      for (int i = 0; i < serializerIds.length; i++) {
-          InternalDataSerializer.register(cName, false, null, null, serializerIds[i]);  
-        }        
+          InternalDataSerializer.register(cName, false, null, null, serializerIds[i]);
+        }
-    }   
-    
-    if(this.instantiatorIds != null) {
-      //Process the Instantiator registrations.
-      for(int i=0; i < instantiatorIds.length ; i++) {
-       String instantiatorClassName = instantiatorClasseNames[i];
-       String instantiatedClassName = instantiatedClasseNames[i];
-       int id = instantiatorIds[i];
-       if ((instantiatorClassName != null) && (instantiatedClassName != null)) {
-        InternalInstantiator.register(instantiatorClassName, instantiatedClassName, id, false); 
-       }
-      }      
-    
+
+    if (this.instantiatorIds != null) {
+      // Process the Instantiator registrations.
+      for (int i = 0; i < instantiatorIds.length; i++) {
+        String instantiatorClassName = instantiatorClasseNames[i];
+        String instantiatedClassName = instantiatedClasseNames[i];
+        int id = instantiatorIds[i];
+        if ((instantiatorClassName != null) && (instantiatedClassName != null)) {
+          InternalInstantiator.register(instantiatorClassName, instantiatedClassName, id, false);
+        }
+      }
+    }
+
-    StartupMessageReplyProcessor proc = (StartupMessageReplyProcessor)
-        ReplyProcessor21.getProcessor(processorId);
+    StartupMessageReplyProcessor proc =
+        (StartupMessageReplyProcessor) ReplyProcessor21.getProcessor(processorId);
-        proc.setReceivedRejectionMessage(true); 
-      }
-      else {
+        proc.setReceivedRejectionMessage(true);
+      } else {
-  
+
-  
+
-    
+
-    
+
-    
+
-  
+
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
-      
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+
-    
+
-      } 
-      finally {
-        serializerIds[i] = in.readInt(); // id  
+      } finally {
+        serializerIds[i] = in.readInt(); // id
-    
-    //Fix for B39705 : Deserialize the instantiators in the field variables.
+
+    // Fix for B39705 : Deserialize the instantiators in the field variables.
-    
+
-    
-    interfaces = (Set)DataSerializer.readObject(in);
+
+    interfaces = (Set) DataSerializer.readObject(in);
- 
+
-    return "StartupResponse: rejectionMessage="
-          + this.rejectionMessage + " processor=" + processorId + " responderIsAdmin=" + this.responderIsAdmin + " distributed system id = " +this.distributedSystemId;
+    return "StartupResponse: rejectionMessage=" + this.rejectionMessage + " processor="
+        + processorId + " responderIsAdmin=" + this.responderIsAdmin + " distributed system id = "
+        + this.distributedSystemId;
