GEODE-907: Converted core functionality to use jackson

-import java.text.DecimalFormat;
-
-import javax.servlet.http.HttpServletRequest;
-
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.vmware.gemfire.tools.pulse.internal.data.Cluster;
+import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
+import com.vmware.gemfire.tools.pulse.internal.data.Repository;
-import com.vmware.gemfire.tools.pulse.internal.data.Cluster;
-import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
-import com.vmware.gemfire.tools.pulse.internal.data.Repository;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONException;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONObject;
+import javax.servlet.http.HttpServletRequest;
+import java.text.DecimalFormat;
-  public JSONObject execute(final HttpServletRequest request) throws Exception {
+  private final ObjectMapper mapper = new ObjectMapper();
+
+  public ObjectNode tempExecute(final HttpServletRequest request) throws Exception {
-    JSONObject responseJSON = new JSONObject();
+    ObjectNode responseJSON = mapper.createObjectNode();
-    try {
-      // getting basic details of Cluster
-      responseJSON.put("clusterName", cluster.getServerName());
-      responseJSON.put("severeAlertCount", severeAlertCount);
-      responseJSON.put("errorAlertCount", errorAlertCount);
-      responseJSON.put("warningAlertCount", warningAlertCount);
-      responseJSON.put("infoAlertCount", infoAlertCount);
+    // getting basic details of Cluster
+    responseJSON.put("clusterName", cluster.getServerName());
+    responseJSON.put("severeAlertCount", severeAlertCount);
+    responseJSON.put("errorAlertCount", errorAlertCount);
+    responseJSON.put("warningAlertCount", warningAlertCount);
+    responseJSON.put("infoAlertCount", infoAlertCount);
-      responseJSON.put("totalMembers", cluster.getMemberCount());
-      responseJSON.put("servers", cluster.getServerCount());
-      responseJSON.put("clients", cluster.getClientConnectionCount());
-      responseJSON.put("locators", cluster.getLocatorCount());
-      responseJSON.put("totalRegions", cluster.getTotalRegionCount());
-      Long heapSize = cluster.getTotalHeapSize();
+    responseJSON.put("totalMembers", cluster.getMemberCount());
+    responseJSON.put("servers", cluster.getServerCount());
+    responseJSON.put("clients", cluster.getClientConnectionCount());
+    responseJSON.put("locators", cluster.getLocatorCount());
+    responseJSON.put("totalRegions", cluster.getTotalRegionCount());
+    Long heapSize = cluster.getTotalHeapSize();
-      DecimalFormat df2 = new DecimalFormat(
-          PulseConstants.DECIMAL_FORMAT_PATTERN);
-      Double heapS = heapSize.doubleValue() / 1024;
-      responseJSON.put("totalHeap", Double.valueOf(df2.format(heapS)));
-      responseJSON.put("functions", cluster.getRunningFunctionCount());
-      responseJSON.put("uniqueCQs", cluster.getRegisteredCQCount());
-      responseJSON.put("subscriptions", cluster.getSubscriptionCount());
-      responseJSON.put("txnCommitted", cluster.getTxnCommittedCount());
-      responseJSON.put("txnRollback", cluster.getTxnRollbackCount());
-      responseJSON.put("userName", userName);
+    DecimalFormat df2 = new DecimalFormat(
+        PulseConstants.DECIMAL_FORMAT_PATTERN);
+    Double heapS = heapSize.doubleValue() / 1024;
+    responseJSON.put("totalHeap", Double.valueOf(df2.format(heapS)));
+    responseJSON.put("functions", cluster.getRunningFunctionCount());
+    responseJSON.put("uniqueCQs", cluster.getRegisteredCQCount());
+    responseJSON.put("subscriptions", cluster.getSubscriptionCount());
+    responseJSON.put("txnCommitted", cluster.getTxnCommittedCount());
+    responseJSON.put("txnRollback", cluster.getTxnRollbackCount());
+    responseJSON.put("userName", userName);
-      return responseJSON;
-    } catch (JSONException e) {
-      throw new Exception(e);
-    }
+    return responseJSON;
