GEODE-265 : Removing implementation of methods which are deprecated and are removed from Execution interface.

-  public Execution withArgs(Object args) {
-    return setArguments(args);
-  }
-
-  @Override
-  public ResultCollector execute(String functionName, boolean hasResult) throws FunctionException {
-    if (functionName == null) {
-      throw new FunctionException(
-          LocalizedStrings.ExecuteFunction_THE_INPUT_FUNCTION_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
-              .toLocalizedString());
-    }
-    this.isFnSerializationReqd = false;
-    Function functionObject = FunctionService.getFunction(functionName);
-    if (functionObject == null) {
-      return executeFunction(functionName, hasResult, hasResult, false);
-    } else {
-      byte registeredFunctionState = AbstractExecution.getFunctionState(functionObject.isHA(),
-          functionObject.hasResult(), functionObject.optimizeForWrite());
-
-      byte functionState = AbstractExecution.getFunctionState(hasResult, hasResult, false);
-      if (registeredFunctionState != functionState) {
-        throw new FunctionException(
-            LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER
-                .toLocalizedString(functionName));
-      }
-      return executeFunction(functionObject);
-    }
-  }
-
-  @Override
-  public ResultCollector execute(String functionName, boolean hasResult, boolean isHA)
-      throws FunctionException {
-    if (functionName == null) {
-      throw new FunctionException(
-          LocalizedStrings.ExecuteFunction_THE_INPUT_FUNCTION_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
-              .toLocalizedString());
-    }
-    this.isFnSerializationReqd = false;
-    if (isHA && !hasResult) {
-      throw new FunctionException(
-          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH.toLocalizedString());
-    }
-    Function functionObject = FunctionService.getFunction(functionName);
-    if (functionObject == null) {
-      return executeFunction(functionName, hasResult, isHA, false);
-    } else {
-      byte registeredFunctionState = AbstractExecution.getFunctionState(functionObject.isHA(),
-          functionObject.hasResult(), functionObject.optimizeForWrite());
-
-      byte functionState = AbstractExecution.getFunctionState(isHA, hasResult, false);
-      if (registeredFunctionState != functionState) {
-        throw new FunctionException(
-            LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER
-                .toLocalizedString(functionName));
-      }
-      return executeFunction(functionObject);
-    }
-  }
-
-  @Override
-  public ResultCollector execute(String functionName, boolean hasResult, boolean isHA,
-      boolean isOptimizeForWrite) throws FunctionException {
-    if (functionName == null) {
-      throw new FunctionException(
-          LocalizedStrings.ExecuteFunction_THE_INPUT_FUNCTION_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
-              .toLocalizedString());
-    }
-    this.isFnSerializationReqd = false;
-    if (isHA && !hasResult) {
-      throw new FunctionException(
-          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH.toLocalizedString());
-    }
-    Function functionObject = FunctionService.getFunction(functionName);
-    if (functionObject == null) {
-      return executeFunction(functionName, hasResult, isHA, isOptimizeForWrite);
-    } else {
-      byte registeredFunctionState = AbstractExecution.getFunctionState(functionObject.isHA(),
-          functionObject.hasResult(), functionObject.optimizeForWrite());
-
-      byte functionState = AbstractExecution.getFunctionState(isHA, hasResult, isOptimizeForWrite);
-      if (registeredFunctionState != functionState) {
-        throw new FunctionException(
-            LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER
-                .toLocalizedString(functionName));
-      }
-      return executeFunction(functionObject);
-    }
-  }
-
