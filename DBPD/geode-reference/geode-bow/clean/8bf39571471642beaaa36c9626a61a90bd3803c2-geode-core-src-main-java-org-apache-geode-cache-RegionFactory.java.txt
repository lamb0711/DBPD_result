Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>RegionFactory</code> is used to create {@link Region regions}
- * in a {@link Cache cache}.
+ * <code>RegionFactory</code> is used to create {@link Region regions} in a {@link Cache cache}.
-<ul>
-<li>using a {@link RegionShortcut shortcut} by calling {@link Cache#createRegionFactory(RegionShortcut)} which will initialize the factory with the shortcut's region attributes
-<li>using a named region attribute by calling {@link Cache#createRegionFactory(String)} which will initialize the factory the named region attributes
-<li>using a region attribute instance by calling {@link Cache#createRegionFactory(RegionAttributes)} which will initialize the factory with the given region attributes
-<li>by calling {@link Cache#createRegionFactory()} which will initialize the factory with defaults
-</ul>
-Once the factory has been created it can be customized with its setter methods.
-<p>
-The final step is to produce a {@link Region} by calling {@link #create(String)}.
-<p>Example: Create a replicate region with a CacheListener
-<PRE>
-  Cache c = new CacheFactory().create();
-  // Create replicate region.
-  // Add a cache listener before creating region
-  Region r = c.createRegionFactory(REPLICATE)
-    .addCacheListener(myListener)
-    .create("replicate");
-</PRE>
-<p>Example: Create a partition region that has redundancy
-<PRE>
-  Cache c = new CacheFactory().create();
-  // Create replicate region.
-  // Add a cache listener before creating region
-  Region r = c.createRegionFactory(PARTITION_REDUNDANT)
-    .create("partition");
-</PRE>
+ * <ul>
+ * <li>using a {@link RegionShortcut shortcut} by calling
+ * {@link Cache#createRegionFactory(RegionShortcut)} which will initialize the factory with the
+ * shortcut's region attributes
+ * <li>using a named region attribute by calling {@link Cache#createRegionFactory(String)} which
+ * will initialize the factory the named region attributes
+ * <li>using a region attribute instance by calling
+ * {@link Cache#createRegionFactory(RegionAttributes)} which will initialize the factory with the
+ * given region attributes
+ * <li>by calling {@link Cache#createRegionFactory()} which will initialize the factory with
+ * defaults
+ * </ul>
+ * Once the factory has been created it can be customized with its setter methods.
+ * <p>
+ * The final step is to produce a {@link Region} by calling {@link #create(String)}.
+ * <p>
+ * Example: Create a replicate region with a CacheListener
+ * 
+ * <PRE>
+ * Cache c = new CacheFactory().create();
+ * // Create replicate region.
+ * // Add a cache listener before creating region
+ * Region r = c.createRegionFactory(REPLICATE).addCacheListener(myListener).create("replicate");
+ * </PRE>
+ * <p>
+ * Example: Create a partition region that has redundancy
+ * 
+ * <PRE>
+ * Cache c = new CacheFactory().create();
+ * // Create replicate region.
+ * // Add a cache listener before creating region
+ * Region r = c.createRegionFactory(PARTITION_REDUNDANT).create("partition");
+ * </PRE>
-public class RegionFactory<K,V>
-{
-  private final AttributesFactory<K,V> attrsFactory;
+public class RegionFactory<K, V> {
+  private final AttributesFactory<K, V> attrsFactory;
+   * 
-    this.attrsFactory = new AttributesFactory<K,V>();
+    this.attrsFactory = new AttributesFactory<K, V>();
+   * 
-      throw new IllegalStateException("The region shortcut " + pra
-                                      + " has been removed.");
+      throw new IllegalStateException("The region shortcut " + pra + " has been removed.");
-    this.attrsFactory = new AttributesFactory<K,V>(ra);
+    this.attrsFactory = new AttributesFactory<K, V>(ra);
+   * 
-    this.attrsFactory = new AttributesFactory<K,V>(ra);
+    this.attrsFactory = new AttributesFactory<K, V>(ra);
+   * 
-    RegionAttributes<K,V> ra = getCache().getRegionAttributes(regionAttributesId);
+    RegionAttributes<K, V> ra = getCache().getRegionAttributes(regionAttributesId);
-      throw new IllegalStateException(LocalizedStrings.RegionFactory_NO_ATTRIBUTES_ASSOCIATED_WITH_0.toLocalizedString(regionAttributesId));
+      throw new IllegalStateException(LocalizedStrings.RegionFactory_NO_ATTRIBUTES_ASSOCIATED_WITH_0
+          .toLocalizedString(regionAttributesId));
-    this.attrsFactory = new AttributesFactory<K,V>(ra);
+    this.attrsFactory = new AttributesFactory<K, V>(ra);
-   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If
-   * no DistributedSystem exists it creates a DistributedSystem with default
-   * configuration, otherwise it uses the existing DistributedSystem. The
-   * default Region configuration is used.
+   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If no DistributedSystem
+   * exists it creates a DistributedSystem with default configuration, otherwise it uses the
+   * existing DistributedSystem. The default Region configuration is used.
-   * @throws CacheException
-   *           if unable to connect the DistributedSystem or create a Cache
+   * @throws CacheException if unable to connect the DistributedSystem or create a Cache
-  public RegionFactory() throws CacheWriterException, RegionExistsException,
-    TimeoutException {
-    this((GemFireCacheImpl)new CacheFactory().create());
+  public RegionFactory() throws CacheWriterException, RegionExistsException, TimeoutException {
+    this((GemFireCacheImpl) new CacheFactory().create());
-   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If
-   * no DistributedSystem exists it creates a DistributedSystem with default
-   * configuration, otherwise it uses the existing DistributedSystem. The Region
-   * configuration is initialized using the provided RegionAttributes.
+   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If no DistributedSystem
+   * exists it creates a DistributedSystem with default configuration, otherwise it uses the
+   * existing DistributedSystem. The Region configuration is initialized using the provided
+   * RegionAttributes.
-   * @throws CacheException
-   *           if unable to connect the DistributedSystem or create a Cache
+   * @throws CacheException if unable to connect the DistributedSystem or create a Cache
-  public RegionFactory(RegionAttributes<K,V> regionAttributes)
-    throws CacheWriterException, RegionExistsException, TimeoutException {
-    this((GemFireCacheImpl)new CacheFactory().create(), regionAttributes);
+  public RegionFactory(RegionAttributes<K, V> regionAttributes)
+      throws CacheWriterException, RegionExistsException, TimeoutException {
+    this((GemFireCacheImpl) new CacheFactory().create(), regionAttributes);
-   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If
-   * no DistributedSystem exists it creates a DistributedSystem with default
-   * configuration, otherwise it uses the existing DistributedSystem. The Region
-   * configuration is initialized using the RegionAttributes identified in the
-   * cache.xml file by the provided identifier.
+   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If no DistributedSystem
+   * exists it creates a DistributedSystem with default configuration, otherwise it uses the
+   * existing DistributedSystem. The Region configuration is initialized using the RegionAttributes
+   * identified in the cache.xml file by the provided identifier.
-   * @param regionAttributesId
-   *          that identifies a set of RegionAttributes in the cache-xml file.
+   * @param regionAttributesId that identifies a set of RegionAttributes in the cache-xml file.
-   * @throws IllegalArgumentException
-   *           if there are no attributes associated with the id
-   * @throws CacheException
-   *           if unable to connect the DistributedSystem or create a Cache
+   * @throws IllegalArgumentException if there are no attributes associated with the id
+   * @throws CacheException if unable to connect the DistributedSystem or create a Cache
-  public RegionFactory(String regionAttributesId) throws CacheWriterException,
-               RegionExistsException, TimeoutException {
-    this((GemFireCacheImpl)new CacheFactory().create(), regionAttributesId);
+  public RegionFactory(String regionAttributesId)
+      throws CacheWriterException, RegionExistsException, TimeoutException {
+    this((GemFireCacheImpl) new CacheFactory().create(), regionAttributesId);
-   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If
-   * a DistributedSystem already exists with the same properties it uses that
-   * DistributedSystem, otherwise a DistributedSystem is created using the
-   * provided properties. The default Region configuration is used.
+   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If a DistributedSystem
+   * already exists with the same properties it uses that DistributedSystem, otherwise a
+   * DistributedSystem is created using the provided properties. The default Region configuration is
+   * used.
-   * @param distributedSystemProperties
-   *          an instance of Properties containing
-   *          <code>DistributedSystem</code configuration
+   * @param distributedSystemProperties an instance of Properties containing
+   *        <code>DistributedSystem</code configuration
-   * @deprecated as of 6.5 use {@link CacheFactory#CacheFactory(Properties)} and {@link Cache#createRegionFactory()} instead.
+   * @deprecated as of 6.5 use {@link CacheFactory#CacheFactory(Properties)} and
+   *             {@link Cache#createRegionFactory()} instead.
-    throws CacheWriterException, RegionExistsException, TimeoutException {
-    this((GemFireCacheImpl)new CacheFactory(distributedSystemProperties).create());
+      throws CacheWriterException, RegionExistsException, TimeoutException {
+    this((GemFireCacheImpl) new CacheFactory(distributedSystemProperties).create());
-   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If
-   * a DistributedSystem already exists with the same properties it uses that
-   * DistributedSystem, otherwise a DistributedSystem is created using the
-   * provided properties. The initial Region configuration is set using the
-   * RegionAttributes provided.
+   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If a DistributedSystem
+   * already exists with the same properties it uses that DistributedSystem, otherwise a
+   * DistributedSystem is created using the provided properties. The initial Region configuration is
+   * set using the RegionAttributes provided.
-   * @param distributedSystemProperties
-   *          properties used to either find or create a DistributedSystem.
-   * @param regionAttributes
-   *          the initial Region configuration for this RegionFactory.
-   * @throws CacheException
-   *           if unable to connect the DistributedSystem or create a Cache
-   * @deprecated as of 6.5 use {@link CacheFactory#CacheFactory(Properties)} and {@link Cache#createRegionFactory(RegionAttributes)} instead.
+   * @param distributedSystemProperties properties used to either find or create a
+   *        DistributedSystem.
+   * @param regionAttributes the initial Region configuration for this RegionFactory.
+   * @throws CacheException if unable to connect the DistributedSystem or create a Cache
+   * @deprecated as of 6.5 use {@link CacheFactory#CacheFactory(Properties)} and
+   *             {@link Cache#createRegionFactory(RegionAttributes)} instead.
-      RegionAttributes<K,V> regionAttributes) throws CacheWriterException,
-      RegionExistsException, TimeoutException {
-    this((GemFireCacheImpl)new CacheFactory(distributedSystemProperties).create(), regionAttributes);
+      RegionAttributes<K, V> regionAttributes)
+      throws CacheWriterException, RegionExistsException, TimeoutException {
+    this((GemFireCacheImpl) new CacheFactory(distributedSystemProperties).create(),
+        regionAttributes);
-   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If
-   * a DistributedSystem already exists whose properties match those provied, it
-   * uses that DistributedSystem. The Region configuration is initialized using
-   * the RegionAttributes identified in the cache.xml file by the provided
-   * identifier.
+   * Constructs a RegionFactory by creating a DistributedSystem and a Cache. If a DistributedSystem
+   * already exists whose properties match those provied, it uses that DistributedSystem. The Region
+   * configuration is initialized using the RegionAttributes identified in the cache.xml file by the
+   * provided identifier.
-   * @param distributedSystemProperties
-   *          properties used to either find or create a DistributedSystem.
-   * @param regionAttributesId
-   *          the identifier for set of RegionAttributes in the cache.xml file
-   *          used as the initial Region configuration for this RegionFactory.
-   * @throws IllegalArgumentException
-   *           if there are no attributes associated with the id
+   * @param distributedSystemProperties properties used to either find or create a
+   *        DistributedSystem.
+   * @param regionAttributesId the identifier for set of RegionAttributes in the cache.xml file used
+   *        as the initial Region configuration for this RegionFactory.
+   * @throws IllegalArgumentException if there are no attributes associated with the id
-   * @throws CacheException
-   *           if unable to connect the DistributedSystem or create a Cache
-   * @deprecated as of 6.5 use {@link CacheFactory#CacheFactory(Properties)} and {@link Cache#createRegionFactory(String)} instead.
+   * @throws CacheException if unable to connect the DistributedSystem or create a Cache
+   * @deprecated as of 6.5 use {@link CacheFactory#CacheFactory(Properties)} and
+   *             {@link Cache#createRegionFactory(String)} instead.
-  public RegionFactory(Properties distributedSystemProperties,
-      String regionAttributesId) throws CacheWriterException,
-      RegionExistsException, TimeoutException {
-    this((GemFireCacheImpl)new CacheFactory(distributedSystemProperties).create(), regionAttributesId);
+  public RegionFactory(Properties distributedSystemProperties, String regionAttributesId)
+      throws CacheWriterException, RegionExistsException, TimeoutException {
+    this((GemFireCacheImpl) new CacheFactory(distributedSystemProperties).create(),
+        regionAttributesId);
-  
+
-   * @param cacheLoader
-   *          the cache loader or null if no loader
+   * @param cacheLoader the cache loader or null if no loader
-  public RegionFactory<K,V> setCacheLoader(CacheLoader<K,V> cacheLoader)
-  {
+  public RegionFactory<K, V> setCacheLoader(CacheLoader<K, V> cacheLoader) {
-   * @param cacheWriter
-   *          the cache writer or null if no cache writer
+   * @param cacheWriter the cache writer or null if no cache writer
-  public RegionFactory<K,V> setCacheWriter(CacheWriter<K,V> cacheWriter)
-  {
+  public RegionFactory<K, V> setCacheWriter(CacheWriter<K, V> cacheWriter) {
+   * 
-  public RegionFactory<K,V> addCacheListener(CacheListener<K,V> aListener)
-  {
+  public RegionFactory<K, V> addCacheListener(CacheListener<K, V> aListener) {
-   * Removes all cache listeners and then adds each listener in the specified array.
-   * for the next <code>RegionAttributes</code> created.
+   * Removes all cache listeners and then adds each listener in the specified array. for the next
+   * <code>RegionAttributes</code> created.
+   * 
-  public RegionFactory<K,V> initCacheListeners(CacheListener<K,V>[] newListeners)
-  {
+  public RegionFactory<K, V> initCacheListeners(CacheListener<K, V>[] newListeners) {
-  public RegionFactory<K,V> setEvictionAttributes(EvictionAttributes evictionAttributes) {
+  public RegionFactory<K, V> setEvictionAttributes(EvictionAttributes evictionAttributes) {
-   * <code>RegionAttributes</code> created.
-   * Note that the XML element that corresponds to this method "entry-idle-time", does not include "out" in its name.
+   * <code>RegionAttributes</code> created. Note that the XML element that corresponds to this
+   * method "entry-idle-time", does not include "out" in its name.
-   * @param idleTimeout
-   *          the idleTimeout ExpirationAttributes for entries in this region
+   * @param idleTimeout the idleTimeout ExpirationAttributes for entries in this region
-   * @throws IllegalArgumentException
-   *           if idleTimeout is null
+   * @throws IllegalArgumentException if idleTimeout is null
-  public RegionFactory<K,V> setEntryIdleTimeout(ExpirationAttributes idleTimeout)
-  {
+  public RegionFactory<K, V> setEntryIdleTimeout(ExpirationAttributes idleTimeout) {
-   * Sets the custom idleTimeout for the next <code>RegionAttributes</code>
-   * created.
+   * Sets the custom idleTimeout for the next <code>RegionAttributes</code> created.
-  public RegionFactory<K,V> setCustomEntryIdleTimeout(CustomExpiry<K,V> custom) {
+  public RegionFactory<K, V> setCustomEntryIdleTimeout(CustomExpiry<K, V> custom) {
-  
+
-   * @param timeToLive
-   *          the timeToLive ExpirationAttributes for entries in this region
+   * @param timeToLive the timeToLive ExpirationAttributes for entries in this region
-   * @throws IllegalArgumentException
-   *           if timeToLive is null
+   * @throws IllegalArgumentException if timeToLive is null
-  public RegionFactory<K,V> setEntryTimeToLive(ExpirationAttributes timeToLive)
-  {
+  public RegionFactory<K, V> setEntryTimeToLive(ExpirationAttributes timeToLive) {
-   * Sets the custom timeToLive expiration method for the next 
-   * <code>RegionAttributes</code> created.
+   * Sets the custom timeToLive expiration method for the next <code>RegionAttributes</code>
+   * created.
+   * 
-  public RegionFactory<K,V> setCustomEntryTimeToLive(CustomExpiry<K,V> custom) {
+  public RegionFactory<K, V> setCustomEntryTimeToLive(CustomExpiry<K, V> custom) {
-  
+
-   * Sets the idleTimeout expiration attributes for the region itself for the
-   * next <code>RegionAttributes</code> created.
-   * Note that the XML element that corresponds to this method "region-idle-time", does not include "out" in its name.
+   * Sets the idleTimeout expiration attributes for the region itself for the next
+   * <code>RegionAttributes</code> created. Note that the XML element that corresponds to this
+   * method "region-idle-time", does not include "out" in its name.
-   * @param idleTimeout
-   *          the ExpirationAttributes for this region idleTimeout
+   * @param idleTimeout the ExpirationAttributes for this region idleTimeout
-   * @throws IllegalArgumentException
-   *           if idleTimeout is null
+   * @throws IllegalArgumentException if idleTimeout is null
-  public RegionFactory<K,V> setRegionIdleTimeout(ExpirationAttributes idleTimeout)
-  {
+  public RegionFactory<K, V> setRegionIdleTimeout(ExpirationAttributes idleTimeout) {
-   * Sets the timeToLive expiration attributes for the region itself for the
-   * next <code>RegionAttributes</code> created.
+   * Sets the timeToLive expiration attributes for the region itself for the next
+   * <code>RegionAttributes</code> created.
-   * @param timeToLive
-   *          the ExpirationAttributes for this region timeToLive
+   * @param timeToLive the ExpirationAttributes for this region timeToLive
-   * @throws IllegalArgumentException
-   *           if timeToLive is null
+   * @throws IllegalArgumentException if timeToLive is null
-  public RegionFactory<K,V> setRegionTimeToLive(ExpirationAttributes timeToLive)
-  {
+  public RegionFactory<K, V> setRegionTimeToLive(ExpirationAttributes timeToLive) {
-   * @param scopeType
-   *          the type of Scope to use for the region
+   * @param scopeType the type of Scope to use for the region
-   * @throws IllegalArgumentException
-   *           if scopeType is null
+   * @throws IllegalArgumentException if scopeType is null
-  public RegionFactory<K,V> setScope(Scope scopeType)
-  {
+  public RegionFactory<K, V> setScope(Scope scopeType) {
-   * @param dataPolicy
-   *          The type of mirroring to use for the region
+   * @param dataPolicy The type of mirroring to use for the region
-   * @throws IllegalArgumentException
-   *           if dataPolicy is null
+   * @throws IllegalArgumentException if dataPolicy is null
-  public RegionFactory<K,V> setDataPolicy(DataPolicy dataPolicy)
-  {
+  public RegionFactory<K, V> setDataPolicy(DataPolicy dataPolicy) {
-  public RegionFactory<K,V> setEarlyAck(boolean earlyAck) {
+  public RegionFactory<K, V> setEarlyAck(boolean earlyAck) {
-  public RegionFactory<K,V> setMulticastEnabled(boolean value) {
+  public RegionFactory<K, V> setMulticastEnabled(boolean value) {
-  
+
-   * Sets the pool name attribute.
-   * This causes regions that use these attributes
-   * to be a client region which communicates with the
-   * servers that the connection pool communicates with.
-   * <p>If this attribute is set to <code>null</code> or <code>""</code>
-   * then the connection pool is disabled causing regions that use these attributes
-   * to be communicate with peers instead of servers.
-   * <p>The named connection pool must exist on the cache at the time these
-   * attributes are used to create a region. See {@link PoolManager#createFactory}
-   * for how to create a connection pool.
-   * @param poolName the name of the connection pool to use; if <code>null</code>
-   * or <code>""</code> then the connection pool attribute is disabled for regions
-   * using these attributes.
+   * Sets the pool name attribute. This causes regions that use these attributes to be a client
+   * region which communicates with the servers that the connection pool communicates with.
+   * <p>
+   * If this attribute is set to <code>null</code> or <code>""</code> then the connection pool is
+   * disabled causing regions that use these attributes to be communicate with peers instead of
+   * servers.
+   * <p>
+   * The named connection pool must exist on the cache at the time these attributes are used to
+   * create a region. See {@link PoolManager#createFactory} for how to create a connection pool.
+   * 
+   * @param poolName the name of the connection pool to use; if <code>null</code> or <code>""</code>
+   *        then the connection pool attribute is disabled for regions using these attributes.
-   * @throws IllegalStateException if a cache loader or cache writer has already
-   * been set.
+   * @throws IllegalStateException if a cache loader or cache writer has already been set.
-  public RegionFactory<K,V> setPoolName(String poolName) {
+  public RegionFactory<K, V> setPoolName(String poolName) {
+   * 
-//    this.attrsFactory.setPublisher(v);
+    // this.attrsFactory.setPublisher(v);
+
-   * Sets whether or not conflation is enabled for sending messages
-   * to async peers.
+   * Sets whether or not conflation is enabled for sending messages to async peers.
+   * 
-  public RegionFactory<K,V> setEnableAsyncConflation(boolean value) {
+  public RegionFactory<K, V> setEnableAsyncConflation(boolean value) {
-   * Sets whether or not conflation is enabled for sending messages
-   * from a cache server to its clients.
+   * Sets whether or not conflation is enabled for sending messages from a cache server to its
+   * clients.
+   * 
-  public RegionFactory<K,V> setEnableSubscriptionConflation(boolean value) {
+  public RegionFactory<K, V> setEnableSubscriptionConflation(boolean value) {
-   * Sets the key constraint for the next <code>RegionAttributes</code>
-   * created. Keys in the region will be constrained to this class (or
-   * subclass). Any attempt to store a key of an incompatible type in the region
-   * will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the key constraint for the next <code>RegionAttributes</code> created. Keys in the region
+   * will be constrained to this class (or subclass). Any attempt to store a key of an incompatible
+   * type in the region will cause a <code>ClassCastException</code> to be thrown.
-   * @param keyConstraint
-   *          The Class to constrain the keys to, or null if no constraint
+   * @param keyConstraint The Class to constrain the keys to, or null if no constraint
-   * @throws IllegalArgumentException
-   *           if <code>keyConstraint</code> is a class denoting a primitive
-   *           type
+   * @throws IllegalArgumentException if <code>keyConstraint</code> is a class denoting a primitive
+   *         type
-  public RegionFactory<K,V> setKeyConstraint(Class<K> keyConstraint)
-  {
+  public RegionFactory<K, V> setKeyConstraint(Class<K> keyConstraint) {
-   * Sets the value constraint for the next <code>RegionAttributes</code>
-   * created. Values in the region will be constrained to this class (or
-   * subclass). Any attempt to store a value of an incompatible type in the
-   * region will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the value constraint for the next <code>RegionAttributes</code> created. Values in the
+   * region will be constrained to this class (or subclass). Any attempt to store a value of an
+   * incompatible type in the region will cause a <code>ClassCastException</code> to be thrown.
-   * @param valueConstraint
-   *          The Class to constrain the values to, or null if no constraint
+   * @param valueConstraint The Class to constrain the values to, or null if no constraint
-   * @throws IllegalArgumentException
-   *           if <code>valueConstraint</code> is a class denoting a primitive
-   *           type
+   * @throws IllegalArgumentException if <code>valueConstraint</code> is a class denoting a
+   *         primitive type
-  public RegionFactory<K,V> setValueConstraint(Class<V> valueConstraint)
-  {
+  public RegionFactory<K, V> setValueConstraint(Class<V> valueConstraint) {
-   * Sets the entry initial capacity for the next <code>RegionAttributes</code>
-   * created. This value is used in initializing the map that holds the entries.
+   * Sets the entry initial capacity for the next <code>RegionAttributes</code> created. This value
+   * is used in initializing the map that holds the entries.
-   * @param initialCapacity
-   *          the initial capacity of the entry map
+   * @param initialCapacity the initial capacity of the entry map
-  public RegionFactory<K,V> setInitialCapacity(int initialCapacity)
-  {
+  public RegionFactory<K, V> setInitialCapacity(int initialCapacity) {
-   * Sets the entry load factor for the next <code>RegionAttributes</code>
-   * created. This value is used in initializing the map that holds the entries.
+   * Sets the entry load factor for the next <code>RegionAttributes</code> created. This value is
+   * used in initializing the map that holds the entries.
-   * @param loadFactor
-   *          the load factor of the entry map
+   * @param loadFactor the load factor of the entry map
-   * @throws IllegalArgumentException
-   *           if loadFactor is nonpositive
+   * @throws IllegalArgumentException if loadFactor is nonpositive
-  public RegionFactory<K,V> setLoadFactor(float loadFactor)
-  {
+  public RegionFactory<K, V> setLoadFactor(float loadFactor) {
-   * Sets the concurrency level tof the next <code>RegionAttributes</code>
-   * created. This value is used in initializing the map that holds the entries.
+   * Sets the concurrency level tof the next <code>RegionAttributes</code> created. This value is
+   * used in initializing the map that holds the entries.
-   * @param concurrencyLevel
-   *          the concurrency level of the entry map
+   * @param concurrencyLevel the concurrency level of the entry map
-   * @throws IllegalArgumentException
-   *           if concurrencyLevel is nonpositive
+   * @throws IllegalArgumentException if concurrencyLevel is nonpositive
-  public RegionFactory<K,V> setConcurrencyLevel(int concurrencyLevel)
-  {
+  public RegionFactory<K, V> setConcurrencyLevel(int concurrencyLevel) {
-   * Enables a versioning system that detects concurrent modifications and
-   * ensures that region contents are consistent across the distributed
-   * system.  This setting must be the same in each member having the region.
+   * Enables a versioning system that detects concurrent modifications and ensures that region
+   * contents are consistent across the distributed system. This setting must be the same in each
+   * member having the region.
-  public RegionFactory<K,V> setConcurrencyChecksEnabled(boolean enabled)
-  {
+  public RegionFactory<K, V> setConcurrencyChecksEnabled(boolean enabled) {
-  public RegionFactory<K,V> setDiskWriteAttributes(DiskWriteAttributes attrs)
-  {
+  public RegionFactory<K, V> setDiskWriteAttributes(DiskWriteAttributes attrs) {
-   * Sets the DiskStore name attribute.
-   * This causes the region to belong to the DiskStore.
+   * Sets the DiskStore name attribute. This causes the region to belong to the DiskStore.
+   * 
-  public RegionFactory<K,V> setDiskStoreName(String name) {
+  public RegionFactory<K, V> setDiskStoreName(String name) {
-  
+
-   * @param isSynchronous
-   *          boolean if true indicates synchronous writes
+   * @param isSynchronous boolean if true indicates synchronous writes
-  public RegionFactory<K,V> setDiskSynchronous(boolean isSynchronous)
-  {
+  public RegionFactory<K, V> setDiskSynchronous(boolean isSynchronous) {
-   * Sets the directories to which the region's data are written. If multiple
-   * directories are used, GemFire will attempt to distribute the data evenly
-   * amongst them.
+   * Sets the directories to which the region's data are written. If multiple directories are used,
+   * GemFire will attempt to distribute the data evenly amongst them.
-  public RegionFactory<K,V> setDiskDirs(File[] diskDirs)
-  {
+  public RegionFactory<K, V> setDiskDirs(File[] diskDirs) {
-   * Sets the directories to which the region's data are written and also set their sizes in megabytes
-   *  
+   * Sets the directories to which the region's data are written and also set their sizes in
+   * megabytes
+   * 
-   * @throws IllegalArgumentException if length of the size array
-   * does not match to the length of the dir array
-   *   
+   * @throws IllegalArgumentException if length of the size array does not match to the length of
+   *         the dir array
+   * 
-  public RegionFactory<K,V> setDiskDirsAndSizes(File[] diskDirs,int[] diskSizes) {
+  public RegionFactory<K, V> setDiskDirsAndSizes(File[] diskDirs, int[] diskSizes) {
-   * Sets the <code>PartitionAttributes</code> that describe how the region is
-   * partitioned among members of the distributed system.
+   * Sets the <code>PartitionAttributes</code> that describe how the region is partitioned among
+   * members of the distributed system.
-  public RegionFactory<K,V> setPartitionAttributes(PartitionAttributes partition)
-  {
+  public RegionFactory<K, V> setPartitionAttributes(PartitionAttributes partition) {
-   * Sets the <code>MembershipAttributes</code> that describe the membership
-   * roles required for reliable access to the region.
+   * Sets the <code>MembershipAttributes</code> that describe the membership roles required for
+   * reliable access to the region.
-  public RegionFactory<K,V> setMembershipAttributes(MembershipAttributes ra) {
+  public RegionFactory<K, V> setMembershipAttributes(MembershipAttributes ra) {
-   * @param synchronous
-   *          whether indexes are maintained in a synchronized fashion
+   * @param synchronous whether indexes are maintained in a synchronized fashion
-  public RegionFactory<K,V> setIndexMaintenanceSynchronous(boolean synchronous)
-  {
+  public RegionFactory<K, V> setIndexMaintenanceSynchronous(boolean synchronous) {
-   * @param statisticsEnabled
-   *          whether statistics are enabled
+   * @param statisticsEnabled whether statistics are enabled
-  public RegionFactory<K,V> setStatisticsEnabled(boolean statisticsEnabled)
-  {
+  public RegionFactory<K, V> setStatisticsEnabled(boolean statisticsEnabled) {
-   * Sets whether operations on this region should be controlled by
-   * JTA transactions or not
+   * Sets whether operations on this region should be controlled by JTA transactions or not
+   * 
-  public RegionFactory<K,V> setIgnoreJTA(boolean flag) {
+  public RegionFactory<K, V> setIgnoreJTA(boolean flag) {
-   * @param isLockGrantor
-   *          whether this region should become lock grantor
+   * @param isLockGrantor whether this region should become lock grantor
-  public RegionFactory<K,V> setLockGrantor(boolean isLockGrantor)
-  {
+  public RegionFactory<K, V> setLockGrantor(boolean isLockGrantor) {
-   * Sets the kind of interest this region has in events occuring in other caches that define
-   * the region by the same name.
+   * Sets the kind of interest this region has in events occuring in other caches that define the
+   * region by the same name.
+   * 
-  public RegionFactory<K,V> setSubscriptionAttributes(SubscriptionAttributes sa) {
+  public RegionFactory<K, V> setSubscriptionAttributes(SubscriptionAttributes sa) {
-   * Creates a region with the given name in this factory's {@link Cache}
-   * using the configuration contained in this factory. Validation of the
-   * provided attributes may cause exceptions to be thrown if there are problems
-   * with the configuration data.
+   * Creates a region with the given name in this factory's {@link Cache} using the configuration
+   * contained in this factory. Validation of the provided attributes may cause exceptions to be
+   * thrown if there are problems with the configuration data.
-   * @param name
-   *          the name of the region to create
+   * @param name the name of the region to create
-   * @throws LeaseExpiredException
-   *           if lease expired on distributed lock for Scope.GLOBAL
-   * @throws RegionExistsException
-   *           if a region, shared or unshared, is already in this cache
-   * @throws TimeoutException
-   *           if timed out getting distributed lock for Scope.GLOBAL
-   * @throws CacheClosedException
-   *           if the cache is closed
-   * @throws IllegalStateException
-   *           if the supplied RegionAttributes are incompatible with this region
-   *           in another cache in the distributed system (see
-   *           {@link AttributesFactory} for compatibility rules)
+   * @throws LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws RegionExistsException if a region, shared or unshared, is already in this cache
+   * @throws TimeoutException if timed out getting distributed lock for Scope.GLOBAL
+   * @throws CacheClosedException if the cache is closed
+   * @throws IllegalStateException if the supplied RegionAttributes are incompatible with this
+   *         region in another cache in the distributed system (see {@link AttributesFactory} for
+   *         compatibility rules)
-  public Region<K,V> create(String name) throws CacheExistsException,
-             RegionExistsException, CacheWriterException, TimeoutException
-  {
+  public Region<K, V> create(String name)
+      throws CacheExistsException, RegionExistsException, CacheWriterException, TimeoutException {
-    RegionAttributes<K,V> ra = this.attrsFactory.create();
+    RegionAttributes<K, V> ra = this.attrsFactory.create();
-   * Creates a sub-region in the {@link Cache} using
-   * the configuration contained in this RegionFactory. Validation of the
-   * provided attributes may cause exceptions to be thrown if there are problems
-   * with the configuration data.
+   * Creates a sub-region in the {@link Cache} using the configuration contained in this
+   * RegionFactory. Validation of the provided attributes may cause exceptions to be thrown if there
+   * are problems with the configuration data.
-   * @param parent
-   *          the existing region that will contain the created sub-region
-   * @param name
-   *          the name of the region to create
+   * @param parent the existing region that will contain the created sub-region
+   * @param name the name of the region to create
-   * @throws RegionExistsException
-   *           if a region with the given name already exists in this cache
-   * @throws RegionDestroyedException
-   *           if the parent region has been closed or destroyed
-   * @throws CacheClosedException
-   *           if the cache is closed
+   * @throws RegionExistsException if a region with the given name already exists in this cache
+   * @throws RegionDestroyedException if the parent region has been closed or destroyed
+   * @throws CacheClosedException if the cache is closed
-  public Region<K,V> createSubregion(Region<?,?> parent, String name) throws RegionExistsException {
+  public Region<K, V> createSubregion(Region<?, ?> parent, String name)
+      throws RegionExistsException {
-    RegionAttributes<K,V> ra = this.attrsFactory.create();
-    return ((LocalRegion)parent).createSubregion(name, ra);
+    RegionAttributes<K, V> ra = this.attrsFactory.create();
+    return ((LocalRegion) parent).createSubregion(name, ra);
-  
+
-   * Sets cloning on region
-   * Note: off-heap regions always behave as if cloning is enabled.
+   * Sets cloning on region Note: off-heap regions always behave as if cloning is enabled.
+   * 
-  public RegionFactory<K,V> setCloningEnabled(boolean cloningEnable) {
+  public RegionFactory<K, V> setCloningEnabled(boolean cloningEnable) {
+   * 
-   * @see AttributesFactory#addGatewaySenderId(String) 
+   * @see AttributesFactory#addGatewaySenderId(String)
-  public RegionFactory<K,V> addGatewaySenderId(String gatewaySenderId)
-  {
+  public RegionFactory<K, V> addGatewaySenderId(String gatewaySenderId) {
-  } 
-  
+  }
+
-   * @param asyncEventQueueId id of AsyncEventQueue 
+   * @param asyncEventQueueId id of AsyncEventQueue
-  public RegionFactory<K,V> addAsyncEventQueueId(String asyncEventQueueId) {
+  public RegionFactory<K, V> addAsyncEventQueueId(String asyncEventQueueId) {
-   * Set the compressor to be used by this region for compressing
-   * region entry values.
+   * Set the compressor to be used by this region for compressing region entry values.
+   * 
-  public RegionFactory<K,V> setCompressor(Compressor compressor) {
+  public RegionFactory<K, V> setCompressor(Compressor compressor) {
-  
+
+   * 
-  public RegionFactory<K,V> setOffHeap(boolean offHeap) {
+  public RegionFactory<K, V> setOffHeap(boolean offHeap) {
