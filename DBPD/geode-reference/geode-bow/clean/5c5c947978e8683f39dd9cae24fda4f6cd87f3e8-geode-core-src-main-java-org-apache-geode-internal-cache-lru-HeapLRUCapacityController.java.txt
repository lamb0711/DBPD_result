GEODE-2097: check offheap limit during recovery

During disk recovery of offheap data,
the offheap LRU eviction limit is now checked
instead of the heap limit.

A new integration test has been added that would
run out of offheap memory during recovery without
this fix.

This fix also includes some refactoring of the
resource manager memory monitors into a new common
interface named MemoryMonitor.

+import org.apache.geode.internal.cache.persistence.DiskRegionView;
-        final GemFireCacheImpl cache;
-        if (region != null) {
-          cache = (GemFireCacheImpl) region.getRegionService();
-        } else {
-          cache = GemFireCacheImpl.getInstance();
-        }
+        final GemFireCacheImpl cache = (GemFireCacheImpl) region.getRegionService();
-
-        if (region == null) {
-          return resourceManager.getHeapMonitor().getState().isEviction();
-        }
-
-        final boolean monitorStateIsEviction;
-        if (!((AbstractRegion) region).getOffHeap()) {
-          monitorStateIsEviction = resourceManager.getHeapMonitor().getState().isEviction();
-        } else {
-          monitorStateIsEviction = resourceManager.getOffHeapMonitor().getState().isEviction();
-        }
-
+        boolean offheap = region.getAttributes().getOffHeap();
+        final boolean monitorStateIsEviction =
+            resourceManager.getMemoryMonitor(offheap).getState().isEviction();
+
+      @Override
+      public boolean lruLimitExceeded(LRUStatistics lruStatistics, DiskRegionView drv) {
+        InternalResourceManager resourceManager =
+            drv.getDiskStore().getCache().getResourceManager();
+        return resourceManager.getMemoryMonitor(drv.getOffHeap()).getState().isEviction();
+      }
