GEODE-17: Shiro Integration

GEODE-17: associate async request with correct shiro user

GEODE-17

GEODE-17: fix shiro dependency

-import com.gemstone.gemfire.cache.Cache;
-import com.gemstone.gemfire.management.internal.security.ManagementInterceptor;
+import com.gemstone.gemfire.security.JMXShiroAuthenticator;
+  private JMXShiroAuthenticator shiroAuthenticator;
-  private ManagementInterceptor managementInterceptor = null;
-  private MBeanServerWrapper mBeanServerWrapper = null;
-  public ManagementInterceptor getManagementInterceptor() {
-    return managementInterceptor;
-  }
-
-  public MBeanServerWrapper getMBeanServerWrapper() {
-    return mBeanServerWrapper;
-  }
-
-  private boolean isRunningInTomcat() {
-    return (System.getProperty("catalina.base") != null || System.getProperty("catalina.home") != null);
-  }
-
-    Cache cache = CacheFactory.getAnyInstance();
-    if (isCustomAuthenticator()) {
-      managementInterceptor = new ManagementInterceptor(cache.getDistributedSystem().getProperties());
-      env.put(JMXConnectorServer.AUTHENTICATOR, managementInterceptor);
-    }
-    else {
-      /* Disable the old authenticator mechanism */
-      String pwFile = this.config.getJmxManagerPasswordFile();
-      if (pwFile != null && pwFile.length() > 0) {
-        env.put("jmx.remote.x.password.file", pwFile);
-      }
-
-      String accessFile = this.config.getJmxManagerAccessFile();
-      if (accessFile != null && accessFile.length() > 0) {
-        // Lets not use default connector based authorization
-        // env.put("jmx.remote.x.access.file", accessFile);
-        // Rewire the mbs hierarchy to set accessController
-        ReadOpFileAccessController controller = new ReadOpFileAccessController(accessFile);
-        controller.setMBeanServer(mbs);
-        mbs = controller;
-      }
-    }
-
-    if (isCustomAuthorizer()) {
-      if(managementInterceptor==null){
-        managementInterceptor = new ManagementInterceptor(cache.getDistributedSystem().getProperties());
+    String shiroConfig = this.config.getShiroInit();
+    if (! StringUtils.isBlank(shiroConfig) || isCustomAuthenticator()) {
+      shiroAuthenticator = new JMXShiroAuthenticator();
+      env.put(JMXConnectorServer.AUTHENTICATOR, shiroAuthenticator);
+      cs.addNotificationListener(shiroAuthenticator, null, cs.getAttributes());
+      if(! StringUtils.isBlank(shiroConfig) || isCustomAuthorizer()) {
+        MBeanServerWrapper mBeanServerWrapper = new MBeanServerWrapper();
+        cs.setMBeanServerForwarder(mBeanServerWrapper);
-      mBeanServerWrapper = new MBeanServerWrapper(managementInterceptor);
-      cs.setMBeanServerForwarder(mBeanServerWrapper);
-      logger.info("Starting RMI Connector with Security Interceptor");
+    }
+
+    else {
+      /* Disable the old authenticator mechanism */
+      String pwFile = this.config.getJmxManagerPasswordFile();
+      if (pwFile != null && pwFile.length() > 0) {
+        env.put("jmx.remote.x.password.file", pwFile);
+      }
+
+      String accessFile = this.config.getJmxManagerAccessFile();
+      if (accessFile != null && accessFile.length() > 0) {
+        // Lets not use default connector based authorization
+        // env.put("jmx.remote.x.access.file", accessFile);
+        // Rewire the mbs hierarchy to set accessController
+        ReadOpFileAccessController controller = new ReadOpFileAccessController(accessFile);
+        controller.setMBeanServer(mbs);
+        mbs = controller;
+      }
