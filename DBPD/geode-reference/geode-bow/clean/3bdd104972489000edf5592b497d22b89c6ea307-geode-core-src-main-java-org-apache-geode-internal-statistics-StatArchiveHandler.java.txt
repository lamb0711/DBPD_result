GEODE-2012: always write stat types to archive

* refactor classes to make testing easier
* write additional tests for stat archive rolling
* expose bug GEODE-2012 in StatTypesAreRolledOverRegressionTest
* fix bug exposed by StatTypesAreRolledOverRegressionTest

-import java.io.File;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.List;
-import java.util.regex.Pattern;
-
-import org.apache.logging.log4j.Logger;
-
+import org.apache.geode.internal.io.RollingFileHandler;
-import org.apache.geode.internal.logging.ManagerLogWriter;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.util.List;
+  private final RollingFileHandler rollingFileHandler;
+
-  public StatArchiveHandler(StatArchiveHandlerConfig config, SampleCollector sampleCollector) {
+  public StatArchiveHandler(StatArchiveHandlerConfig config, SampleCollector sampleCollector,
+      RollingFileHandler rollingFileHandler) {
+    this.rollingFileHandler = rollingFileHandler;
-        mainArchiveId = ManagerLogWriter.calcNextMainId(archiveDir, false);
+        mainArchiveId = this.rollingFileHandler.calcNextMainId(archiveDir, false);
-      archiveId = ManagerLogWriter.calcNextChildId(archive, mainArchiveId);
+      archiveId = this.rollingFileHandler.calcNextChildId(archive, mainArchiveId);
-        buf.append(ManagerLogWriter.formatId(mainArchiveId))
-            .append(ManagerLogWriter.formatId(archiveId));
+        buf.append(this.rollingFileHandler.formatId(mainArchiveId))
+            .append(this.rollingFileHandler.formatId(archiveId));
-        buf.insert(insertIdx, ManagerLogWriter.formatId(archiveId));
-        buf.insert(insertIdx, ManagerLogWriter.formatId(mainArchiveId));
+        buf.insert(insertIdx, this.rollingFileHandler.formatId(archiveId));
+        buf.insert(insertIdx, this.rollingFileHandler.formatId(mainArchiveId));
-      buf.append(ManagerLogWriter.formatId(mainArchiveId)).append(ManagerLogWriter.formatId(0))
-          .append(".marker");
+      buf.append(this.rollingFileHandler.formatId(mainArchiveId))
+          .append(this.rollingFileHandler.formatId(0)).append(".marker");
-      buf.append(ManagerLogWriter.formatId(mainArchiveId)).append(ManagerLogWriter.formatId(0))
-          .append(".marker");
+      buf.append(this.rollingFileHandler.formatId(mainArchiveId))
+          .append(this.rollingFileHandler.formatId(0)).append(".marker");
-      mainArchiveId = ManagerLogWriter.calcNextMainId(archiveDir, false);
+      mainArchiveId = this.rollingFileHandler.calcNextMainId(archiveDir, false);
-    buf.append(ManagerLogWriter.formatId(mainArchiveId)).append(ManagerLogWriter.formatId(0))
-        .append(".marker");
+    buf.append(this.rollingFileHandler.formatId(mainArchiveId))
+        .append(this.rollingFileHandler.formatId(0)).append(".marker");
-  private static File getRenameArchiveName(File archive) {
+  private File getRenameArchiveName(File archive) {
-    int previousMainId = ManagerLogWriter.calcNextMainId(dir, false);
+    int previousMainId = this.rollingFileHandler.calcNextMainId(dir, false);
-        buf.append(ManagerLogWriter.formatId(previousMainId)).append(ManagerLogWriter.formatId(1));
+        buf.append(this.rollingFileHandler.formatId(previousMainId))
+            .append(this.rollingFileHandler.formatId(1));
-        buf.insert(insertIdx, ManagerLogWriter.formatId(1));
-        buf.insert(insertIdx, ManagerLogWriter.formatId(previousMainId));
+        buf.insert(insertIdx, this.rollingFileHandler.formatId(1));
+        buf.insert(insertIdx, this.rollingFileHandler.formatId(previousMainId));
-   * disk space limit. Old versions of the archive file are those that match based on using
-   * {@link #getArchivePattern(String)} which ignores mainArchiveId and archiveId.
+   * disk space limit. Old versions of the archive file are those that match based on using a
+   * pattern which ignores mainArchiveId and archiveId.
-  private static void removeOldArchives(File archiveFile, long spaceLimit) {
+  private void removeOldArchives(File archiveFile, long spaceLimit) {
-    ManagerLogWriter.checkDiskSpace("archive", archiveFile, spaceLimit, archiveDir,
-        getArchivePattern(archiveFile.getName()), getOrCreateLogWriter());
+    this.rollingFileHandler.checkDiskSpace("archive", archiveFile, spaceLimit, archiveDir,
+        getOrCreateLogWriter());
-  private static InternalLogWriter getOrCreateLogWriter() {
+  private InternalLogWriter getOrCreateLogWriter() {
-
-  /**
-   * Create a regex pattern which will match the specified archive file name even if it has a
-   * mainArchiveId and/or archiveId.
-   * 
-   * @param name archive file name to create a regex pattern for
-   * @return regex pattern to use in finding matching file names
-   */
-  private static Pattern getArchivePattern(String name) {
-    String ext = "";
-
-    int extIdx = name.lastIndexOf('.');
-    if (extIdx != -1) {
-      ext = "\\Q" + name.substring(extIdx) + "\\E";
-      name = name.substring(0, extIdx);
-    }
-
-    /* name may have -DD-DD on the end of it. Trim that part off. */
-    int dashIdx = name.indexOf('-');
-    if (dashIdx != -1) {
-      name = name.substring(0, dashIdx);
-    }
-
-    name = "\\Q" + name + "\\E" + "-\\d+-\\d+" + ext;
-    return Pattern.compile(name);
-  }
