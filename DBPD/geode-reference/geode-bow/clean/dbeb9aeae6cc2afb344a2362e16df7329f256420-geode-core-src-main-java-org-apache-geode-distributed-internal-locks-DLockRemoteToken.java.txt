Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Represents a held lock in a member for use when initializing a new
- * grantor. All currently held locks are represented as DLockRemoteTokens
- * and provided in response to a DLockRecoverGrantorMessage.
+ * Represents a held lock in a member for use when initializing a new grantor. All currently held
+ * locks are represented as DLockRemoteTokens and provided in response to a
+ * DLockRecoverGrantorMessage.
-  /** 
+  /**
-  
-  /** 
-   * The reply processor id is used to identify the distinct lease which the
-   * lessee has used to lease this lock.
+
+  /**
+   * The reply processor id is used to identify the distinct lease which the lessee has used to
+   * lease this lock.
-   * The absolute time at which the current lease on this lock will expire.  
-   * -1 represents a lease which will not expire until explicitly released.
+   * The absolute time at which the current lease on this lock will expire. -1 represents a lease
+   * which will not expire until explicitly released.
-  
-  /** 
+
+  /**
-  
+
-   * Creates a new immutable instance of DLockRemoteToken representing the
-   * current lease tracked by DLockToken. Synchronizes on the provided
-   * DLockToken to read data from it.
+   * Creates a new immutable instance of DLockRemoteToken representing the current lease tracked by
+   * DLockToken. Synchronizes on the provided DLockToken to read data from it.
-      return new DLockRemoteToken(token.getName(), token.getLesseeThread(),
-          token.getLeaseId(), token.getLeaseExpireTime());
+      return new DLockRemoteToken(token.getName(), token.getLesseeThread(), token.getLeaseId(),
+          token.getLeaseExpireTime());
-   * Creates a new immutable instance of DLockRemoteToken from the provided
-   * DataInput.
+   * Creates a new immutable instance of DLockRemoteToken from the provided DataInput.
-   * @throws IOException if DataSerializer failed to read object from input 
-   * stream
-   * @throws ClassNotFoundException if DataSerializer failed to find class to
-   * read object from input
+   * @throws IOException if DataSerializer failed to read object from input stream
+   * @throws ClassNotFoundException if DataSerializer failed to find class to read object from input
-  public static DLockRemoteToken createFromDataInput(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public static DLockRemoteToken createFromDataInput(DataInput in)
+      throws IOException, ClassNotFoundException {
-    InternalDistributedMember lessee = 
-      (InternalDistributedMember) DataSerializer.readObject(in);
+    InternalDistributedMember lessee = (InternalDistributedMember) DataSerializer.readObject(in);
-    return new DLockRemoteToken(
-        name, lesseeThread, leaseId, leaseExpireTime);
+    return new DLockRemoteToken(name, lesseeThread, leaseId, leaseExpireTime);
-  
-  public static DLockRemoteToken create(Object name,
-                                        RemoteThread lesseeThread,
-                                        int leaseId,
-                                        long leaseExpireTime) {
-    return new DLockRemoteToken(
-        name, lesseeThread, leaseId, leaseExpireTime);
+
+  public static DLockRemoteToken create(Object name, RemoteThread lesseeThread, int leaseId,
+      long leaseExpireTime) {
+    return new DLockRemoteToken(name, lesseeThread, leaseId, leaseExpireTime);
-  
+
-   * Unused no-arg constructor for Serializable. Instead use DataSerializable
-   * and {@link DLockRemoteToken#createFromDataInput(DataInput)}.
+   * Unused no-arg constructor for Serializable. Instead use DataSerializable and
+   * {@link DLockRemoteToken#createFromDataInput(DataInput)}.
-  
+
-  private DLockRemoteToken(Object name,
-                           RemoteThread lesseeThread,
-                           int leaseId,
-                           long leaseExpireTime) {
+  private DLockRemoteToken(Object name, RemoteThread lesseeThread, int leaseId,
+      long leaseExpireTime) {
-  
+
-  
+
-   * Returns the serializable identity of the thread currently leasing this 
-   * lock or null if no thread currently holds this lock.
+   * Returns the serializable identity of the thread currently leasing this lock or null if no
+   * thread currently holds this lock.
-  
+
-   * Returns the member currently leasing this lock or null if no member
-   * curently holds this lock.
-   *  
+   * Returns the member currently leasing this lock or null if no member curently holds this lock.
+   * 
-    }
-    else {
+    } else {
-  
+
-   * Returns the lease id currently used to hold a lease on this lock or -1
-   * if no thread currently holds this lock.
+   * Returns the lease id currently used to hold a lease on this lock or -1 if no thread currently
+   * holds this lock.
-  
+
-   * Returns the absolute time at which the current lease will expire or -1
-   * if there is no lease.
+   * Returns the absolute time at which the current lease will expire or -1 if there is no lease.
-  
+
-    sb.append(Integer.toHexString(hashCode())); 
+    sb.append(Integer.toHexString(hashCode()));
-  
+
-  
+
-   * Unsupported. Use {@link DLockRemoteToken#createFromDataInput(DataInput)} 
-   * instead.
+   * Unsupported. Use {@link DLockRemoteToken#createFromDataInput(DataInput)} instead.
-  public void fromData(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-     return null;
+    return null;
