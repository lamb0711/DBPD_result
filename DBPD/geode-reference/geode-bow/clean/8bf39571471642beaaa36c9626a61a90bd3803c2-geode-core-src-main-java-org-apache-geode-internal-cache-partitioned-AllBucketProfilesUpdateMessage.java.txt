Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A Partitioned Region meta-data update message.  This is used to send 
- * all local bucket's meta-data to other members with the same Partitioned Region.  
+ * A Partitioned Region meta-data update message. This is used to send all local bucket's meta-data
+ * to other members with the same Partitioned Region.
-    implements MessageWithReply
-{
+    implements MessageWithReply {
-  
+
-  private Map<Integer,BucketAdvisor.BucketProfile> profiles; 
+  private Map<Integer, BucketAdvisor.BucketProfile> profiles;
-  
+
-  private AllBucketProfilesUpdateMessage(Set recipients,
-      int partitionedRegionId, int processorId,
+  private AllBucketProfilesUpdateMessage(Set recipients, int partitionedRegionId, int processorId,
-  protected void process(DistributionManager dm)
-  {
+  protected void process(DistributionManager dm) {
-      for(Map.Entry<Integer,BucketAdvisor.BucketProfile> profile : this.profiles.entrySet()){
-        pr.getRegionAdvisor().putBucketProfile(profile.getKey(), profile.getValue());  
-      }      
-    }
-    catch (PRLocallyDestroyedException fre) {
+      for (Map.Entry<Integer, BucketAdvisor.BucketProfile> profile : this.profiles.entrySet()) {
+        pr.getRegionAdvisor().putBucketProfile(profile.getKey(), profile.getValue());
+      }
+    } catch (PRLocallyDestroyedException fre) {
-    }
-    catch (RegionDestroyedException e) {
+    } catch (RegionDestroyedException e) {
-    }
-    catch (CancelException e) {
+    } catch (CancelException e) {
-    }
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Throwable ignore) {
+    } catch (Throwable ignore) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-    }
-    finally {
+    } finally {
-  
+
+   * 
-   * @param prId the unique partitioned region identifier 
+   * @param prId the unique partitioned region identifier
-   * @return an instance of reply processor if requireAck is true on which the caller
-   * can wait until the event has finished. 
+   * @return an instance of reply processor if requireAck is true on which the caller can wait until
+   *         the event has finished.
-  public static ReplyProcessor21 send(Set recipients, DM dm, int prId, Map<Integer, BucketAdvisor.BucketProfile> profiles, boolean requireAck)
-  {
+  public static ReplyProcessor21 send(Set recipients, DM dm, int prId,
+      Map<Integer, BucketAdvisor.BucketProfile> profiles, boolean requireAck) {
-    int procId = 0; 
+    int procId = 0;
-    AllBucketProfilesUpdateMessage m = new AllBucketProfilesUpdateMessage(recipients, prId, procId, profiles);
+    AllBucketProfilesUpdateMessage m =
+        new AllBucketProfilesUpdateMessage(recipients, prId, procId, profiles);
-  
+
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
