GEODE-5464: Generify DistributionManager and related classes (#2174)

GEODE-5464: Generify DistributionManager and related classes

* Augment various collections to use generics
* Inline some iterator loops that were trivially "foreach" loops
* remove unused code
* Inline some redundant local variables
* make some methods more private
* change some tests to use `InternalDistributedMember` instead of
  `DistributedMember`.
* Make ThrottlingMemLinkedQueueWithDMStats generic and use atomic.
  - The previous synchronization looked quite wrong.
-import java.util.Iterator;
+import java.util.concurrent.atomic.AtomicInteger;
-public class ThrottlingMemLinkedQueueWithDMStats extends OverflowQueueWithDMStats {
+public class ThrottlingMemLinkedQueueWithDMStats<E> extends OverflowQueueWithDMStats<E> {
-  private volatile int memSize;
+  private final AtomicInteger memSize = new AtomicInteger();
-  /** Check if the sender needs to be throttled. Returns the time the sender should sleep */
-  public int getThrottleTime() {
-    return calculateThrottleTime();
-  }
-
-  public int getMemSize() {
-    return memSize;
-  }
-
-    int myMemSize = memSize;
+    int myMemSize = memSize.get();
-      } while (memSize >= maxMemSize || size() >= maxSize);
+      } while (memSize.get() >= maxMemSize || size() >= maxSize);
-      this.memSize += mem;
+      this.memSize.addAndGet(mem);
-    if (o != null && (o instanceof Sizeable)) {
+    if (o instanceof Sizeable) {
-      this.memSize -= mem;
+      this.memSize.addAndGet(-mem);
-    Iterator it = c.iterator();
-    while (it.hasNext()) {
-      postRemove(it.next());
+    for (Object aC : c) {
+      postRemove(aC);
