GEODE-5971: Refactor durable client commands to extend GfshCommand (#2858)


+import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.domain.SubscriptionQueueSizeResult;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class CountDurableCQEventsCommand extends InternalGfshCommand {
-  DurableClientCommandsResultBuilder builder = new DurableClientCommandsResultBuilder();
+public class CountDurableCQEventsCommand extends GfshCommand {
-  public Result countDurableCqEvents(
+  public ResultModel countDurableCqEvents(
-    Result result;
-    try {
-      Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
+    Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    if (targetMembers.isEmpty()) {
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
+
+    String[] params = new String[2];
+    params[0] = durableClientId;
+    params[1] = cqName;
+    final ResultCollector<?, ?> rc =
+        executeFunction(new GetSubscriptionQueueSizeFunction(), params, targetMembers);
+    final List<CliFunctionResult> funcResults = (List<CliFunctionResult>) rc.getResult();
+
+    ResultModel result = new ResultModel();
+    TabularResultModel table = result.addTable("subscription-queue-size");
+    for (CliFunctionResult oneResult : funcResults) {
+      table.accumulate("Member", oneResult.getMemberIdOrName());
+      table.accumulate("Status", oneResult.getStatus());
+      table.accumulate("Queue Size", oneResult.getStatusMessage());
+
+      if (!oneResult.isSuccessful()) {
+        result.setStatus(Result.Status.ERROR);
-
-      String[] params = new String[2];
-      params[0] = durableClientId;
-      params[1] = cqName;
-      final ResultCollector<?, ?> rc =
-          CliUtil.executeFunction(new GetSubscriptionQueueSizeFunction(), params, targetMembers);
-      final List<SubscriptionQueueSizeResult> funcResults =
-          (List<SubscriptionQueueSizeResult>) rc.getResult();
-
-      String queueSizeColumnName;
-
-      if (cqName != null && !cqName.isEmpty()) {
-        queueSizeColumnName = CliStrings
-            .format(CliStrings.COUNT_DURABLE_CQ_EVENTS__SUBSCRIPTION__QUEUE__SIZE__CLIENT, cqName);
-      } else {
-        queueSizeColumnName = CliStrings.format(
-            CliStrings.COUNT_DURABLE_CQ_EVENTS__SUBSCRIPTION__QUEUE__SIZE__CLIENT, durableClientId);
-      }
-      result = builder.buildTableResultForQueueSize(funcResults, queueSizeColumnName);
-    } catch (Exception e) {
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+
