Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
+
-  
-  public static final String GEMFIRE_VERBOSE_FILTER = "{GEODE_VERBOSE}";
-  
-  protected static final String STDOUT = "STDOUT";
-  private static final PropertyChangeListener propertyChangeListener = new PropertyChangeListenerImpl();
-  
+  public static final String GEODE_VERBOSE_FILTER = "{GEODE_VERBOSE}";
+  public static final String GEMFIRE_VERBOSE_FILTER = "{GEMFIRE_VERBOSE}";
+  protected static final String STDOUT = "STDOUT";
+
+  private static final PropertyChangeListener propertyChangeListener =
+      new PropertyChangeListenerImpl();
+
-   * Name of variable that is set to "true" in log4j2.xml to indicate that it is the default geode config xml.
+   * Name of variable that is set to "true" in log4j2.xml to indicate that it is the default geode
+   * config xml.
-  
-  /** Protected by static synchronization. Used for removal and adding stdout back in. */
+
+  /**
+   * Protected by static synchronization. Used for removal and adding stdout back in.
+   */
-  
+
+
+  private LogService() {
+    // do not instantiate
+  }
+
-    LoggerContext context = ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(BASE_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext();
+    LoggerContext context = ((org.apache.logging.log4j.core.Logger) LogManager
+        .getLogger(BASE_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext();
-  
+
-  
+
-  
+
-    Configurator.getOrCreateLoggerConfig(SECURITY_LOGGER_NAME, useMainLoggerForSecurity, hasSecurityLogFile);
+    Configurator.getOrCreateLoggerConfig(SECURITY_LOGGER_NAME, useMainLoggerForSecurity,
+        hasSecurityLogFile);
-  
+
-  
+
-  
+
-    final Configuration config = ((org.apache.logging.log4j.core.Logger)
-        LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
-    
+    final Configuration config =
+        ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME,
+            GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
+
-    
+
-    
+
-  
+
-   * Finds a Log4j configuration file in the current directory.  The names of
-   * the files to look for are the same as those that Log4j would look for on
-   * the classpath.
-   * 
+   * Finds a Log4j configuration file in the current directory. The names of the files to look for
+   * are the same as those that Log4j would look for on the classpath.
+   *
-  public static File findLog4jConfigInCurrentDir() {    
+  public static File findLog4jConfigInCurrentDir() {
+   *
-    return new FastLogger(LogManager.getLogger(getClassName(2), GemFireParameterizedMessageFactory.INSTANCE));
+    return new FastLogger(
+        LogManager.getLogger(getClassName(2), GemFireParameterizedMessageFactory.INSTANCE));
-  
+
-   * Returns a LogWriterLogger that is decorated with the LogWriter and LogWriterI18n
-   * methods.
-   * 
-   * This is the bridge to LogWriter and LogWriterI18n that we need to eventually
-   * stop using in phase 1. We will switch over from a shared LogWriterLogger instance
-   * to having every GemFire class own its own private static GemFireLogger
-   * 
+   * Returns a LogWriterLogger that is decorated with the LogWriter and LogWriterI18n methods.
+   * <p>
+   * This is the bridge to LogWriter and LogWriterI18n that we need to eventually stop using in
+   * phase 1. We will switch over from a shared LogWriterLogger instance to having every GemFire
+   * class own its own private static GemFireLogger
+   *
-  public static LogWriterLogger createLogWriterLogger(final String name, final String connectionName, final boolean isSecure) {
+  public static LogWriterLogger createLogWriterLogger(final String name,
+      final String connectionName, final boolean isSecure) {
-  
+
-   * 
-   * @param intLevel
-   *          The int value of the Level to return.
+   *
+   * @param intLevel The int value of the Level to return.
+   *
+   *
+   *
-    final Configuration config = ((org.apache.logging.log4j.core.Logger)
-        LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
+    final Configuration config =
+        ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME,
+            GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
-  
+
-    final Configuration config = ((org.apache.logging.log4j.core.Logger)
-        LogManager.getLogger(ROOT_LOGGER_NAME, GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
-    
-    if (Configurator.hasContextWideFilter(config) || 
-        Configurator.hasAppenderFilter(config) || 
-        Configurator.hasDebugOrLower(config) || 
-        Configurator.hasLoggerFilter(config) || 
-        Configurator.hasAppenderRefFilter(config)) {
+    final Configuration config =
+        ((org.apache.logging.log4j.core.Logger) LogManager.getLogger(ROOT_LOGGER_NAME,
+            GemFireParameterizedMessageFactory.INSTANCE)).getContext().getConfiguration();
+
+    if (Configurator.hasContextWideFilter(config) || Configurator.hasAppenderFilter(config)
+        || Configurator.hasDebugOrLower(config) || Configurator.hasLoggerFilter(config)
+        || Configurator.hasAppenderRefFilter(config)) {
-  
-  private static class PropertyChangeListenerImpl implements PropertyChangeListener {
-    @SuppressWarnings("synthetic-access")
-    @Override
-    public void propertyChange(final PropertyChangeEvent evt) {
-      StatusLogger.getLogger().debug("LogService responding to a property change event. Property name is {}.",
-          evt.getPropertyName());
-      
-      if (evt.getPropertyName().equals(LoggerContext.PROPERTY_CONFIG)) {
-        configureFastLoggerDelegating();
-      }
-    }
+
+  public static void setSecurityLogLevel(Level level) {
+    Configurator.setLevel(SECURITY_LOGGER_NAME, level);
-  
+
+  public static Level getBaseLogLevel() {
+    return Configurator.getLevel(BASE_LOGGER_NAME);
+  }
+
-  
-  public static void setSecurityLogLevel(Level level) {
-    Configurator.setLevel(SECURITY_LOGGER_NAME, level);
-  }
-  
-  public static Level getBaseLogLevel() {
-    return Configurator.getLevel(BASE_LOGGER_NAME);
-  }
-  
+
-  
+
-   * Removes STDOUT ConsoleAppender from ROOT logger. Only called when using
-   * the log4j2-default.xml configuration. This is done when creating the
-   * LogWriterAppender for log-file. The Appender instance is stored in 
-   * stdoutAppender so it can be restored later using restoreConsoleAppender.
+   * Removes STDOUT ConsoleAppender from ROOT logger. Only called when using the log4j2-default.xml
+   * configuration. This is done when creating the LogWriterAppender for log-file. The Appender
+   * instance is stored in stdoutAppender so it can be restored later using restoreConsoleAppender.
-    final AppenderContext appenderContext = LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);
+    final AppenderContext appenderContext =
+        LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);
-  
+
-   * Restores STDOUT ConsoleAppender to ROOT logger. Only called when using
-   * the log4j2-default.xml configuration. This is done when the 
-   * LogWriterAppender for log-file is destroyed. The Appender instance stored 
-   * in stdoutAppender is used.
+   * Restores STDOUT ConsoleAppender to ROOT logger. Only called when using the log4j2-default.xml
+   * configuration. This is done when the LogWriterAppender for log-file is destroyed. The Appender
+   * instance stored in stdoutAppender is used.
-    final AppenderContext appenderContext = LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);
+    final AppenderContext appenderContext =
+        LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);
-  
-  private LogService() {
-    // do not instantiate
+
+  private static class PropertyChangeListenerImpl implements PropertyChangeListener {
+
+    @Override
+    @SuppressWarnings("synthetic-access")
+    public void propertyChange(final PropertyChangeEvent evt) {
+      StatusLogger.getLogger().debug(
+          "LogService responding to a property change event. Property name is {}.",
+          evt.getPropertyName());
+
+      if (evt.getPropertyName().equals(LoggerContext.PROPERTY_CONFIG)) {
+        configureFastLoggerDelegating();
+      }
+    }
