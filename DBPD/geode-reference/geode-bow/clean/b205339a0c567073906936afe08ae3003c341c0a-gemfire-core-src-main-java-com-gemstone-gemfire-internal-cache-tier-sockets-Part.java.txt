Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.cache.CachedDeserializable;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.Chunk;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.DataAsAddress;
+import com.gemstone.gemfire.internal.offheap.StoredObject;
+import com.gemstone.gemfire.internal.offheap.UnsafeMemoryChunk;
+  private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
-    if (tc == EMPTY_BYTEARRAY_CODE && v == null) {
-      this.part = new byte[0];
+    if (tc == EMPTY_BYTEARRAY_CODE) {
+      this.part = EMPTY_BYTE_ARRAY;
+      b = EMPTY_BYTE_ARRAY;
+      this.part = os;
+      this.part = EMPTY_BYTE_ARRAY;
+    } else {
+      this.typeCode = BYTE_CODE;
+      this.part = os;
+    }
+  }
+  public void setPartState(StoredObject so, boolean isObject) {
+    if (isObject) {
+      this.typeCode = OBJECT_CODE;
+    } else if (so.getValueSizeInBytes() == 0) {
+      this.typeCode = EMPTY_BYTEARRAY_CODE;
+      this.part = EMPTY_BYTE_ARRAY;
+      return;
-    this.part = os;
+    if (so instanceof DataAsAddress) {
+      this.part = ((DataAsAddress)so).getRawBytes();
+    } else {
+      this.part = (Chunk)so;
+    }
+    } else if (this.part instanceof Chunk) {
+      return ((Chunk) this.part).getValueSizeInBytes();
+   * This is only called for parts that will not fit into the commBuffer
+   * so they need to be written directly to the stream.
+   * A stream is used because the client is configured for old IO (instead of nio).
+   * @param buf the buffer to use if any data needs to be copied to one
-  public final void sendTo(OutputStream out) throws IOException {
+  public final void sendTo(OutputStream out, ByteBuffer buf) throws IOException {
+      } else if (this.part instanceof Chunk) {
+        Chunk c = (Chunk) this.part;
+        ByteBuffer cbb = c.createDirectByteBuffer();
+        if (cbb != null) {
+          HeapDataOutputStream.writeByteBufferToStream(out,  buf, cbb);
+        } else {
+          int bytesToSend = c.getDataSize();
+          long addr = c.getAddressForReading(0, bytesToSend);
+          while (bytesToSend > 0) {
+            if (buf.remaining() == 0) {
+              HeapDataOutputStream.flushStream(out,  buf);
+            }
+            buf.put(UnsafeMemoryChunk.readAbsoluteByte(addr));
+            addr++;
+            bytesToSend--;
+          }
+        }
-        hdos.sendTo(out);
+        hdos.sendTo(out, buf);
+   * Precondition: caller has already checked the length of this part
+   * and it will fit into "buf".
+      } else if (this.part instanceof Chunk) {
+        Chunk c = (Chunk) this.part;
+        ByteBuffer bb = c.createDirectByteBuffer();
+        if (bb != null) {
+          buf.put(bb);
+        } else {
+          int bytesToSend = c.getDataSize();
+          long addr = c.getAddressForReading(0, bytesToSend);
+          while (bytesToSend > 0) {
+            buf.put(UnsafeMemoryChunk.readAbsoluteByte(addr));
+            addr++;
+            bytesToSend--;
+          }
+        }
+   * This is only called for parts that will not fit into the commBuffer
+   * so they need to be written directly to the socket.
+   * Precondition: buf contains nothing that needs to be sent
+      } else if (this.part instanceof Chunk) {
+        // instead of copying the Chunk to buf try to create a direct ByteBuffer and
+        // just write it directly to the socket channel.
+        Chunk c = (Chunk) this.part;
+        ByteBuffer bb = c.createDirectByteBuffer();
+        if (bb != null) {
+          while (bb.remaining() > 0) {
+            sc.write(bb);
+          }
+        } else {
+          int len = c.getDataSize();
+          long addr = c.getAddressForReading(0, len);
+          buf.clear();
+          while (len > 0) {
+            int bytesThisTime = len;
+            if (bytesThisTime > BUF_MAX) {
+              bytesThisTime = BUF_MAX;
+            }
+            len -= bytesThisTime;
+            while (bytesThisTime > 0) {
+              buf.put(UnsafeMemoryChunk.readAbsoluteByte(addr));
+              addr++;
+              bytesThisTime--;
+            }
+            buf.flip();
+            while (buf.remaining() > 0) {
+              sc.write(buf);
+            }
+            buf.clear();
+          }
+        }
