GEODE-773: Extract static methods from DistributedTestCase

Refactor DistributedTestCase by extracting inner classes & interfaces into:
* IgnoredException
* StoppableWaitCriterion
* WaitCriterion

Refactor DistributedTestCase by extracting static methods into:
* Assert
* DebuggerUtils
* DistributedTestUtils
* Invoke
* Jitter
* LogWriterUtils
* NetworkUtils
* ThreadUtils
* Wait

Also:
* Rename variables for clarity
* Replace several uses of LogWriter with Logger
* Write and polish lots of javadocs
* Overhaul entire hierarchy of tearDown() methods across dunit tests

-// @todo davidw Add the ability to get a return value back from the
-// async method call.  (Use a static ThreadLocal field that is
-// accessible from the Runnable used in VM#invoke)
+  //@todo davidw Add the ability to get a return value back from the
+  //async method call.  (Use a static ThreadLocal field that is
+  //accessible from the Runnable used in VM#invoke)
-   * A <code>ThreadGroup</code> that notices when an exception occurrs
+   * A <code>ThreadGroup</code> that notices when an exception occurs
+   * 
+   * TODO: reimplement using Futures
-    public void uncaughtException(Thread t, Throwable e) {
-      if (e instanceof VirtualMachineError) {
-        SystemFailure.setFailure((VirtualMachineError)e); // don't throw
+    public void uncaughtException(Thread thread, Throwable throwable) {
+      if (throwable instanceof VirtualMachineError) {
+        SystemFailure.setFailure((VirtualMachineError)throwable); // don't throw
-      if (t instanceof AsyncInvocation) {
-        ((AsyncInvocation) t).exception = e;
+      if (thread instanceof AsyncInvocation) {
+        ((AsyncInvocation) thread).exception = throwable;
-  public void run()
-  {
+  public void run() {
