GEODE-7266: change className validation (#4185)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

* put validation in the constructor so that we can validation both in java object construction(v2 client side and gfsh side) and json deserialization on the v2 server side
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
-import org.apache.geode.management.internal.ManagementHelper;
-  private String className = "";
-  private Properties initProperties = new Properties();
+  private String className;
+  private Properties initProperties;
-   * Default constructor used for serialization.
-   */
-  public ClassName() {}
-
-  /**
-   * @param className this class needs to a no-arg constructor.
+   * @param className this class needs a no-arg constructor.
+   * this is a convenient way to create a ClassName object using json represented properties
+   *
+   *        If the className is not Declarable, then these properties will be ignored
-    if (StringUtils.isBlank(className)) {
-      return;
+    this(className, createProperties(jsonInitProperties));
+  }
+
+  private static Properties createProperties(String jsonInitProperties) {
+    if (StringUtils.isBlank(jsonInitProperties)) {
+      return new Properties();
-    if (!ManagementHelper.isClassNameValid(className)) {
-      throw new IllegalArgumentException("Invalid className");
-    }
-    this.className = className;
-      initProperties = mapper.readValue(jsonInitProperties, Properties.class);
+      return mapper.readValue(jsonInitProperties, Properties.class);
-   * @param className this class needs to have a no-arg constructor
+   * @param className the name of the class to be instantiated. This class needs to have
+   *        a no-arg constructor.
+   *        If the className is not Declarable, then these properties will be ignored
+   *
+   * @throws IllegalArgumentException if classname contains illegal classname characters
-  public ClassName(String className, Properties properties) {
+  @JsonCreator
+  public ClassName(@JsonProperty("className") String className,
+      @JsonProperty("initProperties") Properties properties) {
+    if (StringUtils.isBlank(className)) {
+      this.className = "";
+      this.initProperties = new Properties();
+      return;
+    }
+    // validate the className
+    if (!isClassNameValid(className)) {
+      throw new IllegalArgumentException("Invalid className");
+    }
-    this.initProperties = properties;
+    this.initProperties = properties == null ? new Properties() : properties;
-  private static boolean isClassNameValid(String fqcn) {
-    if (StringUtils.isBlank(fqcn)) {
-      return false;
-    }
-    String regex = "([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*";
-    return Pattern.matches(regex, fqcn);
-  }
-
+  /**
+   * this provides a convenient method to validate if the given name is a valid classname
+   *
+   * @return false if classname is blank or has invalid classname characters
+   */
+  public static boolean isClassNameValid(String className) {
+    if (StringUtils.isBlank(className)) {
+      return false;
+    }
+    String regex = "([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*";
+    return Pattern.matches(regex, className);
+  }
+
