Merge branch 'release/1.5.0'

+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.RegionAttributes;
-import org.apache.geode.cache.execute.FunctionAdapter;
+import org.apache.geode.cache.CacheListener;
+import org.apache.geode.internal.cache.AbstractRegion;
+import org.apache.geode.internal.cache.execute.InternalFunction;
+import org.apache.geode.management.internal.cli.domain.ClassName;
-public class FetchRegionAttributesFunction extends FunctionAdapter {
+public class FetchRegionAttributesFunction implements InternalFunction {
-      RegionAttributes<?, ?> result = getRegionAttributes(cache, regionPath);
-      context.getResultSender().lastResult(result);
+      RegionAttributesWrapper regionAttributesWrapper = getRegionAttributes(cache, regionPath);
+      context.getResultSender().lastResult(regionAttributesWrapper);
-  public static <K, V> RegionAttributes<K, V> getRegionAttributes(Cache cache, String regionPath) {
-    Region<K, V> foundRegion = cache.getRegion(regionPath);
+  public static RegionAttributesWrapper getRegionAttributes(Cache cache, String regionPath) {
+    AbstractRegion foundRegion = (AbstractRegion) cache.getRegion(regionPath);
-          new Object[] {CliStrings.CREATE_REGION__USEATTRIBUTESFROM, regionPath}));
+          CliStrings.CREATE_REGION__USEATTRIBUTESFROM, regionPath));
-    // Using AttributesFactory to get the serializable RegionAttributes
-    // Is there a better way?
-    AttributesFactory<K, V> afactory = new AttributesFactory<K, V>(foundRegion.getAttributes());
-    return afactory.create();
+    AttributesFactory afactory = new AttributesFactory(foundRegion.getAttributes());
+    RegionAttributesWrapper result = new RegionAttributesWrapper();
+
+    CacheListener[] cacheListeners = foundRegion.getCacheListeners();
+    List existingCacheListeners = Arrays.stream(cacheListeners)
+        .map((c) -> new ClassName(c.getClass().getName())).collect(Collectors.toList());
+
+    result.setCacheListenerClasses(existingCacheListeners);
+    afactory.initCacheListeners(null);
+
+    if (foundRegion.getCacheLoader() != null) {
+      result
+          .setCacheLoaderClass(new ClassName<>(foundRegion.getCacheLoader().getClass().getName()));
+      afactory.setCacheLoader(null);
+    }
+
+    if (foundRegion.getCacheWriter() != null) {
+      result
+          .setCacheWriterClass(new ClassName<>(foundRegion.getCacheWriter().getClass().getName()));
+      afactory.setCacheWriter(null);
+    }
+
+    if (foundRegion.getCompressor() != null) {
+      result.setCompressorClass(foundRegion.getCompressor().getClass().getName());
+      afactory.setCompressor(null);
+    }
+
+    if (foundRegion.getKeyConstraint() != null) {
+      result.setKeyConstraintClass(foundRegion.getKeyConstraint().getName());
+      afactory.setKeyConstraint(null);
+    }
+
+    if (foundRegion.getValueConstraint() != null) {
+      result.setValueConstraintClass(foundRegion.getValueConstraint().getName());
+      afactory.setValueConstraint(null);
+    }
+
+    result.setRegionAttributes(afactory.create());
+    return result;
