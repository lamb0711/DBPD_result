Merge branch 'release/1.0.0-incubating.M3'

+import java.math.BigDecimal;
-
- * PdxFormatter class has static methods to convert JSON document into {@link PdxInstance}
- * and methods to convert back {@link PdxInstance} into JSON Document.
- * 
- * Using this, application can put json document in gemfire cache. Application can define indexes 
- * on PdxInsatnce and then query those using OQL. Query will return the PdxInstances as results,
- * that needs to convert back into JSON document. 
- * 
- * This uses Jackson parser to parse the json document. Parser treats values in json document as 
- * number(byte, short, int, long..), string, array, object, 'true', 'false' or 'null'. Which
- * further treated as corresponding java types in PdxInstance
- * 
- * JSON objects are converted into PdxInstance
- * JSON arrays are converted into List.
- *  
+ * <p>
+ * JSONFormatter has a static method {@link JSONFormatter#fromJSON(String)} to convert a JSON
+ * document into a {@link PdxInstance} and a static method {@link JSONFormatter#toJSON(PdxInstance)}
+ * to convert a {@link PdxInstance} into a JSON Document.
+ * </p>
+ * <p>
+ * Using these methods an applications may convert a JSON document into a PdxInstance for storing in the cache.
+ * Indexes can then be defined on the PdxInstances so that queries can be performed using OQL. Queries will
+ * return PdxInstances and these can be turned back back into JSON documents using JSONFormatter.
+ * </p>
+ * <p>
+ * JSONFormatter treats values in a json document as
+ * number(byte, short, int, long..), string, array, object, 'true', 'false' or 'null'. These correspond
+ * to the following java types:
+ * </p>
+ *
+ * <table>
+ *   <th>JSON</th><th>Java</th>
+ * <tr> <td>object</td>      <td>{@link PdxInstance}</td> </tr>
+ * <tr> <td>arrays</td>      <td>{@link java.util.LinkedList}</td> </tr>
+ * <tr> <td>BigDecimal</td>  <td>{@link BigDecimal}</td> </tr>
+ * <tr> <td>BigInterger</td> <td>{@link BigInteger}</td> </tr>
+ * <tr> <td>Double</td>      <td>double</td> </tr>
+ * <tr> <td>float</td>       <td>float</td> </tr>
+ * <tr> <td>boolean</td>     <td>boolean</td> </tr>
+ * <tr> <td>Integer</td>     <td>byte, short or int</td> </tr>
+ * <tr> <td>null</td>        <td>null</td> </tr>
+ * </table>
-  enum states {NONE, ObJECT_START,  FIELD_NAME, INNER_OBJECT_FOUND, SCALER_FOUND, LIST_FOUND, OBJECT_ENDS};
+  enum states {NONE, ObJECT_START,  FIELD_NAME, SCALER_FOUND, LIST_FOUND, LIST_ENDS, OBJECT_ENDS};
-   * To create PdxInstance from JSON string
+   * Converts a JSON document into a PdxInstance
-   * @throws JSONFormatterException if unable to parse JSON doucment
+   * @throws JSONFormatterException if unable to parse the JSON document
-   * To create PdxInstance from JSON string
+   * Converts a JSON document into a PdxInstance
-   * @throws JSONFormatterException if unable to parse JSON doucment
+   * @throws JSONFormatterException if unable to parse the JSON document
-   *To create JSON string from PdxInstance
+   * Converts a PdxInstance into a JSON document
-   * @throws JSONFormatterException if unable to create JSON doucment from PdxInstance
+   * @throws JSONFormatterException if unable to create the JSON document
-      throw new JSONFormatterException("Could not create JSON document from PdxInstance ", e);
+      throw new JSONFormatterException("Could not create JSON document from PdxInstance", e);
-   *To create JSON byte array from PdxInstance
+   * Converts a PdxInstance into a JSON document in byte-array form
-   * @throws JSONFormatterException if unable to create JSON doucment from PdxInstance
+   * @throws JSONFormatterException if unable to create the JSON document
-      throw new JSONFormatterException("Could not create JSON document from PdxInstance ", e);
+      throw new JSONFormatterException("Could not create JSON document from PdxInstance", e);
+          currentState = states.LIST_FOUND;
-          currentState = states.LIST_FOUND;
+          currentState = states.LIST_ENDS;
-          nullfound(currentState);
+          nullFound(currentState);
-          doublefound(currentState);
+          doubleFound(currentState);
-          doublefound(currentState);
+          intFound(currentState);
-          doublefound(currentState);
+          stringFound(currentState);
+          currentState = states.LIST_ENDS;
-          currentPdxList = currentPdxList.getParent(); 
-          currentState = states.LIST_FOUND;
+          currentPdxList = currentPdxList.getParent();          
-          nullfound(currentState);
+          nullFound(currentState);
-          doublefound(currentState);
+          doubleFound(currentState);
-          doublefound(currentState);
+          intFound(currentState);
+    case LIST_FOUND:
+    case LIST_ENDS:
-    case LIST_FOUND:
+    case LIST_ENDS:
+    case LIST_ENDS:
+    case LIST_ENDS:  
+    case LIST_ENDS:
+    case LIST_ENDS:
+    case LIST_ENDS:
-  private boolean doublefound(states currentState)
+  private boolean doubleFound(states currentState)
+    case LIST_ENDS:
+    case LIST_ENDS:
-  private boolean nullfound(states currentState)
+  private boolean nullFound(states currentState)
+    case LIST_ENDS:
