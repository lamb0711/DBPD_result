Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-   * TODO DISTTX: callers of this constructor need to
-   * make sure that release is called. In general
-   * the distributed tx code needs to be reviewed to
-   * see if it correctly handles off-heap.
+   * TODO DISTTX: callers of this constructor need to make sure that release is called. In general
+   * the distributed tx code needs to be reviewed to see if it correctly handles off-heap.
-  
+
-  public DistTxEntryEvent() {
-  }
+  public DistTxEntryEvent() {}
-    
+
-    } 
+    }
-    } 
+    }
-                                             * value [DISTTX} TODO see if
-                                             * required
-                                             */, null/*
-                                                      * callbackarg [DISTTX]
-                                                      * TODO
-                                                      */, bucketId);
+                                               * value [DISTTX} TODO see if required
+                                               */, null/*
+                                                       * callbackarg [DISTTX] TODO
+                                                       */, bucketId);
-    
+
-    if ((flags & HAS_PUTALL_OP) != 0 ) {
+    if ((flags & HAS_PUTALL_OP) != 0) {
-    
-    if ((flags & HAS_REMOVEALL_OP) != 0 ) {
+
+    if ((flags & HAS_REMOVEALL_OP) != 0) {
-    EntryVersionsList versionTags = new EntryVersionsList(
-        this.putAllOp.putAllDataSize);
+    EntryVersionsList versionTags = new EntryVersionsList(this.putAllOp.putAllDataSize);
-  private void putAllFromData(DataInput in)
-      throws IOException, ClassNotFoundException {
+  private void putAllFromData(DataInput in) throws IOException, ClassNotFoundException {
-      final Version version = InternalDataSerializer
-          .getVersionForDataStreamOrNull(in);
+      final Version version = InternalDataSerializer.getVersionForDataStreamOrNull(in);
-        putAllEntries[i] = new PutAllEntryData(in, this.eventID, i, version,
-            bytesIn);
+        putAllEntries[i] = new PutAllEntryData(in, this.eventID, i, version, bytesIn);
-    EntryEventImpl e = EntryEventImpl.create(
-        this.region, Operation.PUTALL_CREATE,
-        null, null, null, true, this.getDistributedMember(), true, true);
-    
-    this.putAllOp = new DistributedPutAllOperation(e, putAllSize, false /*[DISTTX] TODO*/);
+    EntryEventImpl e = EntryEventImpl.create(this.region, Operation.PUTALL_CREATE, null, null, null,
+        true, this.getDistributedMember(), true, true);
+
+    this.putAllOp = new DistributedPutAllOperation(e, putAllSize, false /* [DISTTX] TODO */);
-  
+
-  
-    EntryVersionsList versionTags = new EntryVersionsList(
-        this.removeAllOp.removeAllDataSize);
-  
+
+    EntryVersionsList versionTags = new EntryVersionsList(this.removeAllOp.removeAllDataSize);
+
-    final RemoveAllEntryData[] removeAllData = this.removeAllOp
-        .getRemoveAllEntryData();
+    final RemoveAllEntryData[] removeAllData = this.removeAllOp.getRemoveAllEntryData();
-  private void removeAllFromData(DataInput in)
-      throws IOException, ClassNotFoundException {
+  private void removeAllFromData(DataInput in) throws IOException, ClassNotFoundException {
-    final Version version = InternalDataSerializer
-        .getVersionForDataStreamOrNull(in);
+    final Version version = InternalDataSerializer.getVersionForDataStreamOrNull(in);
-      removeAllData[i] = new RemoveAllEntryData(in, this.eventID, i, version,
-          bytesIn);
+      removeAllData[i] = new RemoveAllEntryData(in, this.eventID, i, version, bytesIn);
-  
+
-    EntryEventImpl e = EntryEventImpl.create(
-        this.region, Operation.REMOVEALL_DESTROY,
-        null, null, null, true, this.getDistributedMember(), true, true);
-    this.removeAllOp = new DistributedRemoveAllOperation(e, removeAllSize, false /*[DISTTX] TODO*/);
+    EntryEventImpl e = EntryEventImpl.create(this.region, Operation.REMOVEALL_DESTROY, null, null,
+        null, true, this.getDistributedMember(), true, true);
+    this.removeAllOp =
+        new DistributedRemoveAllOperation(e, removeAllSize, false /* [DISTTX] TODO */);
-  
+
