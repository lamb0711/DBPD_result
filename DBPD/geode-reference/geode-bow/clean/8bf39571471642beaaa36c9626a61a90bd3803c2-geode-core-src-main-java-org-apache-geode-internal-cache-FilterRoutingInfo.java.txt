Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class is used to hold the information about the servers and
- * their Filters (CQs and Interest List) that are satisfied by the 
- * cache update operation.
+ * This class is used to hold the information about the servers and their Filters (CQs and Interest
+ * List) that are satisfied by the cache update operation.
+ * 
-  
+
-  private static Version[] serializationVersions = new Version[]{ Version.GFE_71 };
-  
+  private static Version[] serializationVersions = new Version[] {Version.GFE_71};
+
-  
+
-      
+
-  private HashMap<InternalDistributedMember, FilterInfo> serverFilterInfo = 
-    new HashMap<InternalDistributedMember, FilterInfo>();
-  
+  private HashMap<InternalDistributedMember, FilterInfo> serverFilterInfo =
+      new HashMap<InternalDistributedMember, FilterInfo>();
+
-   * Sets the local CQ filter information. 
+   * Sets the local CQ filter information.
+   * 
-  public void setLocalCqInfo(HashMap cqInfo){
+  public void setLocalCqInfo(HashMap cqInfo) {
-    this.localFilterInfo.filterProcessedLocally = true; 
+    this.localFilterInfo.filterProcessedLocally = true;
+   * 
-  public void setLocalInterestedClients(Set clients, Set clientsInv){
+  public void setLocalInterestedClients(Set clients, Set clientsInv) {
-  
+
- 
+
-   * @return FilterInfo local filter info having CQs and interested client info. 
+   * 
+   * @return FilterInfo local filter info having CQs and interested client info.
-    return this.localFilterInfo;  
+    return this.localFilterInfo;
+   * 
+   * 
-  public void addInterestedClients(InternalDistributedMember member, 
-      Set clients, Set clientsInv, boolean longIDs) {
+  public void addInterestedClients(InternalDistributedMember member, Set clients, Set clientsInv,
+      boolean longIDs) {
-    if (fInfo == null){
+    if (fInfo == null) {
+   * 
-  public Set<InternalDistributedMember> getMembers(){
-    return this.serverFilterInfo.keySet();  
+  public Set<InternalDistributedMember> getMembers() {
+    return this.serverFilterInfo.keySet();
-   * Returns true if the local filter information is set. 
+   * Returns true if the local filter information is set.
+   * 
-  
+
+   * 
+   * 
-  public FilterInfo getFilterInfo(InternalDistributedMember member){
+  public FilterInfo getFilterInfo(InternalDistributedMember member) {
-   * This adds the filter information from the given routing object to this
-   * object's tables.  This is used to merge routing information for putAll
-   * operations.
-   * @param eventRouting  the routing information for a single putAll event
+   * This adds the filter information from the given routing object to this object's tables. This is
+   * used to merge routing information for putAll operations.
+   * 
+   * @param eventRouting the routing information for a single putAll event
-    for (Map.Entry<InternalDistributedMember, FilterInfo> entry: 
-        eventRouting.serverFilterInfo.entrySet()) {
+    for (Map.Entry<InternalDistributedMember, FilterInfo> entry : eventRouting.serverFilterInfo
+        .entrySet()) {
-    for (int i=0; i < size; i++){
+    for (int i = 0; i < size; i++) {
-  
+
-    for (Map.Entry<InternalDistributedMember, FilterInfo> e: this.serverFilterInfo.entrySet()) { 
+    for (Map.Entry<InternalDistributedMember, FilterInfo> e : this.serverFilterInfo.entrySet()) {
-      InternalDataSerializer.invokeToData(fInfo, out);      
+      InternalDataSerializer.invokeToData(fInfo, out);
-  
+
-  
+
-    for (int i=0; i < size; i++){
+    for (int i = 0; i < size; i++) {
-    for (Map.Entry<InternalDistributedMember, FilterInfo> e: this.serverFilterInfo.entrySet()) { 
+    for (Map.Entry<InternalDistributedMember, FilterInfo> e : this.serverFilterInfo.entrySet()) {
-      InternalDataSerializer.invokeToData(fInfo, out);      
+      InternalDataSerializer.invokeToData(fInfo, out);
-      result +="remote=";
+      result += "remote=";
-  
-  
+
+
-    
+
-    
+
-     * serialized routing data.  This is only deserialized when requested so that
-     * routing information for other members included in a cach op message
-     * stays serialized, reducing the cost of having to send all routing
-     * info to all members
+     * serialized routing data. This is only deserialized when requested so that routing information
+     * for other members included in a cach op message stays serialized, reducing the cost of having
+     * to send all routing info to all members
-    
+
-    
+
-    
+
-    
+
- 
+
-    public void addFilterInfo(FilterInfo other){
+    public void addFilterInfo(FilterInfo other) {
-        for (Map.Entry<Long, Integer> entry: other.cqs.entrySet()) {
+        for (Map.Entry<Long, Integer> entry : other.cqs.entrySet()) {
-    
+
-    
-    private static Version[] serializationVersions = new Version[]{ Version.GFE_80 };
+
+    private static Version[] serializationVersions = new Version[] {Version.GFE_80};
-    
+
-    
+
-        this.myData = DataSerializer.readByteArray(in);        
+        this.myData = DataSerializer.readByteArray(in);
-    
+
-        HeapDataOutputStream hdos = new HeapDataOutputStream(1000, 
-            InternalDataSerializer.getVersionForDataStream(out));
+        HeapDataOutputStream hdos =
+            new HeapDataOutputStream(1000, InternalDataSerializer.getVersionForDataStream(out));
-          for (Iterator it=this.cqs.entrySet().iterator(); it.hasNext(); ) {
-            Map.Entry e = (Map.Entry)it.next();
+          for (Iterator it = this.cqs.entrySet().iterator(); it.hasNext();) {
+            Map.Entry e = (Map.Entry) it.next();
-            InternalDataSerializer.writeUnsignedVL(((Long)e.getKey()).longValue(), hdos);
-            InternalDataSerializer.writeUnsignedVL(((Integer)e.getValue()).intValue(), hdos);
+            InternalDataSerializer.writeUnsignedVL(((Long) e.getKey()).longValue(), hdos);
+            InternalDataSerializer.writeUnsignedVL(((Integer) e.getValue()).intValue(), hdos);
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-     * FilterInfo fields are only deserialized if they are needed.  We send
-     * all FilterInfo routings to all members that receive a cach op message
-     * but each member is only interested in its own routing, so there is no
-     * need to deserialize the routings for other members
+     * FilterInfo fields are only deserialized if they are needed. We send all FilterInfo routings
+     * to all members that receive a cach op message but each member is only interested in its own
+     * routing, so there is no need to deserialize the routings for other members
-          for (int i=0; i<numEntries; i++) {
+          for (int i = 0; i < numEntries; i++) {
-            Integer value = Integer.valueOf((int)InternalDataSerializer.readUnsignedVL(dis));
+            Integer value = Integer.valueOf((int) InternalDataSerializer.readUnsignedVL(dis));
-    
+
-  
+
