Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public abstract class TXMessage extends SerialDistributionMessage 
-  implements MessageWithReply, TransactionMessage {
+public abstract class TXMessage extends SerialDistributionMessage
+    implements MessageWithReply, TransactionMessage {
-  
+
-  public TXMessage() {
-  }
+  public TXMessage() {}
-  public TXMessage(int txUniqueId, InternalDistributedMember onBehalfOfMember, ReplyProcessor21 processor) {
+  public TXMessage(int txUniqueId, InternalDistributedMember onBehalfOfMember,
+      ReplyProcessor21 processor) {
-      if(checkCacheClosing(cache) || checkDSClosing(cache.getDistributedSystem())) {
-        thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0.toLocalizedString(dm.getId()));
+      if (checkCacheClosing(cache) || checkDSClosing(cache.getDistributedSystem())) {
+        thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
+            .toLocalizedString(dm.getId()));
-        sendReply = operateOnTx(txId,dm);
+        sendReply = operateOnTx(txId, dm);
-        thr = new ForceReattemptException(LocalizedStrings.PartitionMessage_REGION_IS_DESTROYED_IN_0.toLocalizedString(dm.getDistributionManagerId()), rde);
+      thr = new ForceReattemptException(LocalizedStrings.PartitionMessage_REGION_IS_DESTROYED_IN_0
+          .toLocalizedString(dm.getDistributionManagerId()), rde);
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-//    className.substring(className.lastIndexOf('.', className.lastIndexOf('.') - 1) + 1);  // partition.<foo> more generic version 
-    buff.append(className.substring(className.indexOf(PartitionMessage.PN_TOKEN) + PartitionMessage.PN_TOKEN.length())); // partition.<foo>
-    buff.append("(txId=").append(this.txUniqId)
-      .append("; txMbr=").append(this.txMemberId)
-      .append("; sender=").append(getSender())
-      .append("; processorId=").append(this.processorId);
+    // className.substring(className.lastIndexOf('.', className.lastIndexOf('.') - 1) + 1); //
+    // partition.<foo> more generic version
+    buff.append(className.substring(
+        className.indexOf(PartitionMessage.PN_TOKEN) + PartitionMessage.PN_TOKEN.length())); // partition.<foo>
+    buff.append("(txId=").append(this.txUniqId).append("; txMbr=").append(this.txMemberId)
+        .append("; sender=").append(getSender()).append("; processorId=").append(this.processorId);
-  
-  public void appendFields(StringBuffer buff) {
-  }
-    
+
+  public void appendFields(StringBuffer buff) {}
+
+   * 
-  protected abstract boolean operateOnTx(TXId txId,DistributionManager dm) throws RemoteOperationException;
+  protected abstract boolean operateOnTx(TXId txId, DistributionManager dm)
+      throws RemoteOperationException;
-    DataSerializer.writeObject(this.txMemberId,out);
+    DataSerializer.writeObject(this.txMemberId, out);
-    if(txMemberId==null) {
+    if (txMemberId == null) {
-  
+
-  
+
