Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class DistributedRemoveAllOperation extends AbstractUpdateOperation // TODO extend DistributedCacheOperation instead
-  {
+public class DistributedRemoveAllOperation extends AbstractUpdateOperation // TODO extend
+                                                                           // DistributedCacheOperation
+                                                                           // instead
+{
-  @Retained protected final RemoveAllEntryData[] removeAllData;
+  @Retained
+  protected final RemoveAllEntryData[] removeAllData;
-  
+
-  static final byte HAS_TAILKEY = (byte)0x80;
+  static final byte HAS_TAILKEY = (byte) 0x80;
-    super(event, ((EntryEventImpl)event).getEventTime(0L));
+    super(event, ((EntryEventImpl) event).getEventTime(0L));
-  public boolean isBridgeOperation()
-  {
+  public boolean isBridgeOperation() {
-  
+
-          return removeAllData;
+    return removeAllData;
-  
+
-  
+
-  public void addEntry(RemoveAllEntryData removeAllEntry)
-  {
+  public void addEntry(RemoveAllEntryData removeAllEntry) {
-  
-  /**
-   * Add an entry that this removeAll operation should distribute.
-   */
-  public void addEntry(EntryEventImpl ev)
-  {
-    this.removeAllData[this.removeAllDataSize] = new RemoveAllEntryData(ev);
-    this.removeAllDataSize += 1;
-  }
-   * This method is for a special case: the callback will be called after this
-   * in hasSeenEvent() case, so we should change the status beforehand
-  public void addEntry(EntryEventImpl ev, boolean newCallbackInvoked)
-  {
+  public void addEntry(EntryEventImpl ev) {
+    this.removeAllData[this.removeAllDataSize] = new RemoveAllEntryData(ev);
+    this.removeAllDataSize += 1;
+  }
+
+  /**
+   * Add an entry that this removeAll operation should distribute. This method is for a special
+   * case: the callback will be called after this in hasSeenEvent() case, so we should change the
+   * status beforehand
+   */
+  public void addEntry(EntryEventImpl ev, boolean newCallbackInvoked) {
-  
+
-   * @param ev
-   *           event to be added
-   * @param bucketId
-   *           message is for this bucket
+   * @param ev event to be added
+   * @param bucketId message is for this bucket
-  public void addEntry(EntryEventImpl ev, Integer bucketId)
-  {
+  public void addEntry(EntryEventImpl ev, Integer bucketId) {
-   * @param status 
-   *            whether the entry is using fake event id
+   * @param status whether the entry is using fake event id
-   * In the originating cache, this returns an iterator on the list
-   * of events caused by the removeAll operation.  This is cached for
-   * listener notification purposes.  The iterator is guaranteed to return
-   * events in the order they are present in putAllData[]
+   * In the originating cache, this returns an iterator on the list of events caused by the
+   * removeAll operation. This is cached for listener notification purposes. The iterator is
+   * guaranteed to return events in the order they are present in putAllData[]
+
+
-        @Unretained EntryEventImpl ev = getEventForPosition(position);
+        @Unretained
+        EntryEventImpl ev = getEventForPosition(position);
+
-  
+
-    // I do not use eventIterator here because it forces the lazy creation of EntryEventImpl by calling getEventForPosition.
-    for (int i=0; i < this.removeAllDataSize; i++) {
+    // I do not use eventIterator here because it forces the lazy creation of EntryEventImpl by
+    // calling getEventForPosition.
+    for (int i = 0; i < this.removeAllDataSize; i++) {
-    LocalRegion region = (LocalRegion)this.event.getRegion();
+    LocalRegion region = (LocalRegion) this.event.getRegion();
-    @Retained EntryEventImpl ev = EntryEventImpl.create(
-        region,
-        entry.getOp(),
-        entry.getKey(), null/* value */, this.event.getCallbackArgument(),
-        false /* originRemote */,
-        this.event.getDistributedMember(),
-        this.event.isGenerateCallbacks(),
-        entry.getEventID());
+    @Retained
+    EntryEventImpl ev = EntryEventImpl.create(region, entry.getOp(), entry.getKey(),
+        null/* value */, this.event.getCallbackArgument(), false /* originRemote */,
+        this.event.getDistributedMember(), this.event.isGenerateCallbacks(), entry.getEventID());
-    ev.setPossibleDuplicate(entry.isPossibleDuplicate());
-    if (entry.versionTag != null && region.concurrencyChecksEnabled) {
-      VersionSource id = entry.versionTag.getMemberID();
-      if (id!= null) {
-        entry.versionTag.setMemberID(
-            ev.getRegion().getVersionVector().getCanonicalId(id));
+      ev.setPossibleDuplicate(entry.isPossibleDuplicate());
+      if (entry.versionTag != null && region.concurrencyChecksEnabled) {
+        VersionSource id = entry.versionTag.getMemberID();
+        if (id != null) {
+          entry.versionTag.setMemberID(ev.getRegion().getVersionVector().getCanonicalId(id));
+        }
+        ev.setVersionTag(entry.versionTag);
-      ev.setVersionTag(entry.versionTag);
-    }
-      
-    entry.event = ev;
-    returnedEv = true;
-    ev.setOldValue(entry.getOldValue());
-    CqService cqService = region.getCache().getCqService();
-    if (cqService.isRunning() && !entry.getOp().isCreate() && !ev.hasOldValue()) {
-      ev.setOldValueForQueryProcessing();
-    }
-    ev.setInvokePRCallbacks(!entry.isNotifyOnly());
-    if (getBaseEvent().getContext() != null) {
-      ev.setContext(getBaseEvent().getContext());
-    }
-    ev.callbacksInvoked(entry.isCallbacksInvoked());
-    ev.setTailKey(entry.getTailKey());
-    return ev;
+
+      entry.event = ev;
+      returnedEv = true;
+      ev.setOldValue(entry.getOldValue());
+      CqService cqService = region.getCache().getCqService();
+      if (cqService.isRunning() && !entry.getOp().isCreate() && !ev.hasOldValue()) {
+        ev.setOldValueForQueryProcessing();
+      }
+      ev.setInvokePRCallbacks(!entry.isNotifyOnly());
+      if (getBaseEvent().getContext() != null) {
+        ev.setContext(getBaseEvent().getContext());
+      }
+      ev.callbacksInvoked(entry.isCallbacksInvoked());
+      ev.setTailKey(entry.getTailKey());
+      return ev;
-    
+
-    
+
-    public RemoveAllEntryData(DataInput in, EventID baseEventID, int idx,
-        Version version, ByteArrayDataInput bytesIn) throws IOException,
-        ClassNotFoundException {
+    public RemoveAllEntryData(DataInput in, EventID baseEventID, int idx, Version version,
+        ByteArrayDataInput bytesIn) throws IOException, ClassNotFoundException {
-        this.filterRouting = (FilterRoutingInfo)DataSerializer.readObject(in);
+        this.filterRouting = (FilterRoutingInfo) DataSerializer.readObject(in);
-      }
-      else {
+      } else {
-      sb.append("(").append(getKey()).append(",").
-        append(getOldValue());
+      sb.append("(").append(getKey()).append(",").append(getOldValue());
-        sb.append(",v").append(versionTag.getEntryVersion()).append(",rv="+versionTag.getRegionVersion());
+        sb.append(",v").append(versionTag.getEntryVersion())
+            .append(",rv=" + versionTag.getRegionVersion());
-    
+
-     * Used to serialize this instances data to <code>out</code>.
-     * If changes are made to this method make sure that it is backwards
-     * compatible by creating toDataPreXX methods. Also make sure that the callers
-     * to this method are backwards compatible by creating toDataPreXX methods for
+     * Used to serialize this instances data to <code>out</code>. If changes are made to this method
+     * make sure that it is backwards compatible by creating toDataPreXX methods. Also make sure
+     * that the callers to this method are backwards compatible by creating toDataPreXX methods for
-      if (this.filterRouting != null) bits |= FILTER_ROUTING;
+      if (this.filterRouting != null)
+        bits |= FILTER_ROUTING;
-      //TODO: Yogesh, this should be conditional, 
-      // make sure that we sent it on wire only 
+      // TODO: Yogesh, this should be conditional,
+      // make sure that we sent it on wire only
-        // fake event id should be serialized 
+        // fake event id should be serialized
-      //TODO: Yogesh, this should be conditional, 
-      // make sure that we sent it on wire only 
+      // TODO: Yogesh, this should be conditional,
+      // make sure that we sent it on wire only
-    public Object getKey()
-    {
+    public Object getKey() {
-    public Object getOldValue()
-    {
+    public Object getOldValue() {
-    public Long getTailKey(){
+    public Long getTailKey() {
-    
-    public void setTailKey(Long key){
+
+    public void setTailKey(Long key) {
+
-    public Operation getOp()
-    {
+    public Operation getOp() {
-    public EventID getEventID()
-    {
+    public EventID getEventID() {
-    
+
-     * @param eventId 
-     *               new event id
+     * @param eventId new event id
-    
+
-     * @param bucketId 
-     *                new bucket id
+     * @param bucketId new bucket id
-     * change event id into fake event id
-     * The algorithm is to change the threadid into 
-     * bucketid*MAX_THREAD_PER_CLIENT+oldthreadid. So from the log, we can
-     * derive the original thread id.
+     * change event id into fake event id The algorithm is to change the threadid into
+     * bucketid*MAX_THREAD_PER_CLIENT+oldthreadid. So from the log, we can derive the original
+     * thread id.
-     * @return wether current event id is fake or not 
-     *                new bucket id
+     * @return wether current event id is fake or not new bucket id
-        long threadId = ThreadIdentifier.createFakeThreadIDForBulkOp(bucketId.intValue(), eventID.getThreadID());
+        long threadId = ThreadIdentifier.createFakeThreadIDForBulkOp(bucketId.intValue(),
+            eventID.getThreadID());
-      }
-      else {
+      } else {
-      }
-      else {
+      } else {
-      }
-      else {
+      } else {
-    LocalRegion region = (LocalRegion)this.event.getRegion();
+    LocalRegion region = (LocalRegion) this.event.getRegion();
-      advisor = ((PartitionedRegion)region).getCacheDistributionAdvisor();
+      advisor = ((PartitionedRegion) region).getCacheDistributionAdvisor();
-      advisor = ((BucketRegion)region).getPartitionedRegion().getCacheDistributionAdvisor();
+      advisor = ((BucketRegion) region).getPartitionedRegion().getCacheDistributionAdvisor();
-      advisor = ((DistributedRegion)region).getCacheDistributionAdvisor();
+      advisor = ((DistributedRegion) region).getCacheDistributionAdvisor();
-    for (int i=0; i<this.removeAllData.length; i++) {
-      @Unretained EntryEventImpl ev = getEventForPosition(i);
+    for (int i = 0; i < this.removeAllData.length; i++) {
+      @Unretained
+      EntryEventImpl ev = getEventForPosition(i);
-  protected CacheOperationMessage createMessage()
- {
+  protected CacheOperationMessage createMessage() {
-   * @param bucketId
-   *               create message to send to this bucket
+   * @param bucketId create message to send to this bucket
-    for (int i=0; i<removeAllDataSize; i++) {
-      prMsg.addEntry(removeAllData[i]);  
+    for (int i = 0; i < removeAllDataSize; i++) {
+      prMsg.addEntry(removeAllData[i]);
-  public HashMap<Integer, RemoveAllPRMessage> createPRMessages()
-  {
-    //getFilterRecipients(Collections.EMPTY_SET); // establish filter recipient routing information
+  public HashMap<Integer, RemoveAllPRMessage> createPRMessages() {
+    // getFilterRecipients(Collections.EMPTY_SET); // establish filter recipient routing information
-    
-    for (int i=0; i<removeAllDataSize; i++) {
+
+    for (int i = 0; i < removeAllDataSize; i++) {
-        prMsg.setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());
+        prMsg
+            .setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());
-      // We have to set fake event id here, because we cannot derive old event id from baseId+idx as we
-      // did in DR's PutAllMessage. 
+      // We have to set fake event id here, because we cannot derive old event id from baseId+idx as
+      // we
+      // did in DR's PutAllMessage.
-  protected void initMessage(CacheOperationMessage msg,
-      DirectReplyProcessor proc)
-  {
+  protected void initMessage(CacheOperationMessage msg, DirectReplyProcessor proc) {
-    RemoveAllMessage m = (RemoveAllMessage)msg;
-    
+    RemoveAllMessage m = (RemoveAllMessage) msg;
+
-    
+
-    if (attr.getConcurrencyChecksEnabled()
-        && !attr.getDataPolicy().withReplication() 
+    if (attr.getConcurrencyChecksEnabled() && !attr.getDataPolicy().withReplication()
-        boolean success = RemoteRemoveAllMessage.distribute((EntryEventImpl)this.event, 
+        boolean success = RemoteRemoveAllMessage.distribute((EntryEventImpl) this.event,
-          
+
-          // Fix for #45934.  We can't continue if we need versions and we failed
+          // Fix for #45934. We can't continue if we need versions and we failed
-          boolean success = RemoteRemoveAllMessage.distribute((EntryEventImpl)this.event,
+          boolean success = RemoteRemoveAllMessage.distribute((EntryEventImpl) this.event,
-            RemoveAllEntryData[] versioned = selectVersionedEntries(); 
+            RemoveAllEntryData[] versioned = selectVersionedEntries();
-              logger.trace("Found these remaining versioned entries: {}", Arrays.toString(versioned));
+              logger.trace("Found these remaining versioned entries: {}",
+                  Arrays.toString(versioned));
-            // Fix for #45934.  We can't continue if we need versions and we failed
+            // Fix for #45934. We can't continue if we need versions and we failed
-    // bug #45704 - RemotePutAllOp's DPAO in another server conflicts with lingering DPAO from same thread, so
-    // we require an ACK if concurrency checks are enabled to make sure that the previous op has finished first.
+    // bug #45704 - RemotePutAllOp's DPAO in another server conflicts with lingering DPAO from same
+    // thread, so
+    // we require an ACK if concurrency checks are enabled to make sure that the previous op has
+    // finished first.
-    for (int i=0; i<this.removeAllData.length; i++) {
+    for (int i = 0; i < this.removeAllData.length; i++) {
-    for (int i=0; i<this.removeAllData.length; i++) {
+    for (int i = 0; i < this.removeAllData.length; i++) {
-  
+
-    for (int i=0; i<this.removeAllData.length; i++) {
+    for (int i = 0; i < this.removeAllData.length; i++) {
-    for (int i=0; i<this.removeAllData.length; i++) {
+    for (int i = 0; i < this.removeAllData.length; i++) {
-  
+
-   * version tags are gathered from local operations and remote operation
-   * responses.  This method gathers all of them and stores them in the
-   * given list.
+   * version tags are gathered from local operations and remote operation responses. This method
+   * gathers all of them and stores them in the given list.
+   * 
-    for (RemoveAllEntryData entry: this.removeAllData) {
+    for (RemoveAllEntryData entry : this.removeAllData) {
-  
-  
-  public static class RemoveAllMessage extends AbstractUpdateMessage // TODO extend CacheOperationMessage instead
-   {
+
+
+  public static class RemoveAllMessage extends AbstractUpdateMessage // TODO extend
+                                                                     // CacheOperationMessage
+                                                                     // instead
+  {
-    
+
-    
+
-    protected static final short SKIP_CALLBACKS =
-      (short)(HAS_BRIDGE_CONTEXT << 1);
+    protected static final short SKIP_CALLBACKS = (short) (HAS_BRIDGE_CONTEXT << 1);
+
-     * Note this this is a "dummy" event since this message contains a list of
-     * entries each one of which has its own event. The key thing needed in this
-     * event is the region. This is the event that gets passed to
-     * basicOperateOnRegion
+     * Note this this is a "dummy" event since this message contains a list of entries each one of
+     * which has its own event. The key thing needed in this event is the region. This is the event
+     * that gets passed to basicOperateOnRegion
-    protected InternalCacheEvent createEvent(DistributedRegion rgn)
-    throws EntryNotFoundException
-    {
+    protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {
-      @Retained EntryEventImpl event = EntryEventImpl.create(
-          rgn,
-          Operation.REMOVEALL_DESTROY, null /* key */, null/* value */,
-          this.callbackArg, true /* originRemote */, getSender());
+      @Retained
+      EntryEventImpl event = EntryEventImpl.create(rgn, Operation.REMOVEALL_DESTROY, null /* key */,
+          null/* value */, this.callbackArg, true /* originRemote */, getSender());
-    
+
-     * Does the "remove" of one entry for a "removeAll" operation. Note it calls back
-     * to AbstractUpdateOperation.UpdateMessage#basicOperationOnRegion
+     * Does the "remove" of one entry for a "removeAll" operation. Note it calls back to
+     * AbstractUpdateOperation.UpdateMessage#basicOperationOnRegion
-     * @param entry
-     *          the entry being removed
-     * @param rgn
-     *          the region the entry is removed from
+     * @param entry the entry being removed
+     * @param rgn the region the entry is removed from
-      @Released EntryEventImpl ev = RemoveAllMessage.createEntryEvent(entry, getSender(), 
-          this.context, rgn, this.possibleDuplicate,
-          this.needsRouting, this.callbackArg, true, skipCallbacks);
-//      rgn.getLogWriterI18n().info(LocalizedStrings.DEBUG, "RemoveAllMessage.doEntryRemove sender=" + getSender() +
-//          " event="+ev);
-      // we don't need to set old value here, because the msg is from remote. local old value will get from next step
+      @Released
+      EntryEventImpl ev = RemoveAllMessage.createEntryEvent(entry, getSender(), this.context, rgn,
+          this.possibleDuplicate, this.needsRouting, this.callbackArg, true, skipCallbacks);
+      // rgn.getLogWriterI18n().info(LocalizedStrings.DEBUG, "RemoveAllMessage.doEntryRemove
+      // sender=" + getSender() +
+      // " event="+ev);
+      // we don't need to set old value here, because the msg is from remote. local old value will
+      // get from next step
-        // TODO check all removeAll basicDestroy calls done on the farside and make sure "cacheWrite" is false
+        // TODO check all removeAll basicDestroy calls done on the farside and make sure
+        // "cacheWrite" is false
-    
+
+     * 
-        InternalDistributedMember sender, ClientProxyMembershipID context,
-        DistributedRegion rgn,
-        boolean possibleDuplicate, boolean needsRouting, Object callbackArg,
-        boolean originRemote, boolean skipCallbacks) {
+        InternalDistributedMember sender, ClientProxyMembershipID context, DistributedRegion rgn,
+        boolean possibleDuplicate, boolean needsRouting, Object callbackArg, boolean originRemote,
+        boolean skipCallbacks) {
-      @Retained EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(),
-          key, null/* value */, callbackArg,
-          originRemote, sender, !skipCallbacks,
-          evId);
+      @Retained
+      EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(), key, null/* value */,
+          callbackArg, originRemote, sender, !skipCallbacks, evId);
-      if (context != null) {
-        ev.context = context;
-      }
-      ev.setPossibleDuplicate(possibleDuplicate);
-      ev.setVersionTag(entry.versionTag);
-//      if (needsRouting) {
-//               FilterProfile fp = rgn.getFilterProfile();
-//                if (fp != null) {
-//                  FilterInfo fi = fp.getLocalFilterRouting(ev);
-//                  ev.setLocalFilterInfo(fi);
-//                }
-//      }
-      if (entry.filterRouting != null) {
-        InternalDistributedMember id = rgn.getMyId();
-        ev.setLocalFilterInfo(entry.filterRouting.getFilterInfo(id));
-      }
-      /**
-       * Setting tailKey for the secondary bucket here. Tail key was update by the primary.
-       */
-      ev.setTailKey(entry.getTailKey());
-      returnedEv = true;
-      return ev;
+        if (context != null) {
+          ev.context = context;
+        }
+        ev.setPossibleDuplicate(possibleDuplicate);
+        ev.setVersionTag(entry.versionTag);
+        // if (needsRouting) {
+        // FilterProfile fp = rgn.getFilterProfile();
+        // if (fp != null) {
+        // FilterInfo fi = fp.getLocalFilterRouting(ev);
+        // ev.setLocalFilterInfo(fi);
+        // }
+        // }
+        if (entry.filterRouting != null) {
+          InternalDistributedMember id = rgn.getMyId();
+          ev.setLocalFilterInfo(entry.filterRouting.getFilterInfo(id));
+        }
+        /**
+         * Setting tailKey for the secondary bucket here. Tail key was update by the primary.
+         */
+        ev.setTailKey(entry.getTailKey());
+        returnedEv = true;
+        return ev;
-    protected void basicOperateOnRegion(EntryEventImpl ev, final DistributedRegion rgn)
-    {
+    protected void basicOperateOnRegion(EntryEventImpl ev, final DistributedRegion rgn) {
-      
+
-              logger.trace("removeAll processing {} with {}", removeAllData[i], removeAllData[i].versionTag);
+              logger.trace("removeAll processing {} with {}", removeAllData[i],
+                  removeAllData[i].versionTag);
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.removeAllDataSize = (int)InternalDataSerializer.readUnsignedVL(in);
+      this.removeAllDataSize = (int) InternalDataSerializer.readUnsignedVL(in);
-        final Version version = InternalDataSerializer
-            .getVersionForDataStreamOrNull(in);
+        final Version version = InternalDataSerializer.getVersionForDataStreamOrNull(in);
-          this.removeAllData[i] = new RemoveAllEntryData(in, eventId, i, version,
-              bytesIn);
+          this.removeAllData[i] = new RemoveAllEntryData(in, eventId, i, version, bytesIn);
-      if (this.context != null) s |= HAS_BRIDGE_CONTEXT;
-      if (this.skipCallbacks) s |= SKIP_CALLBACKS;
+      if (this.context != null)
+        s |= HAS_BRIDGE_CONTEXT;
+      if (this.skipCallbacks)
+        s |= SKIP_CALLBACKS;
-    public int getOperationCount()
-    {
+    public int getOperationCount() {
-    public ClientProxyMembershipID getContext()
-    {
+    public ClientProxyMembershipID getContext() {
-    
-    public RemoveAllEntryData[] getRemoveAllEntryData()
-    {
+
+    public RemoveAllEntryData[] getRemoveAllEntryData() {
-    
+
-    public List getOperations()
-    {
+    public List getOperations() {
-        ops[i] = new QueuedOperation(entry.getOp(), entry.getKey(), null,
-            null, (byte) 0, this.callbackArg);
+        ops[i] = new QueuedOperation(entry.getOp(), entry.getKey(), null, null, (byte) 0,
+            this.callbackArg);
