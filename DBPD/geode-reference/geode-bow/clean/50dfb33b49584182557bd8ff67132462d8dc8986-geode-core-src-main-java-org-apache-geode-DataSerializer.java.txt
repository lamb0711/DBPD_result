GEODE-6588: Cleanup generics and other static analyzer issues. (#3391)


-  protected static final ThreadLocal<Boolean> DISALLOW_JAVA_SERIALIZATION =
-      new ThreadLocal<Boolean>();
+  protected static final ThreadLocal<Boolean> DISALLOW_JAVA_SERIALIZATION = new ThreadLocal<>();
-      Class<?> c = InternalDataSerializer.getCachedClass(className); // fix for bug 41206
-      return c;
+      return InternalDataSerializer.getCachedClass(className);
-      IOException ex2 = new IOException(
-          "While reading an InetAddress");
-      ex2.initCause(ex);
-      throw ex2;
+      throw new IOException("While reading an InetAddress", ex);
-    out.writeBoolean(value.booleanValue());
+    out.writeBoolean(value);
-    Boolean value = Boolean.valueOf(in.readBoolean());
+    Boolean value = in.readBoolean();
-    out.writeChar(value.charValue());
+    out.writeChar(value);
-    Character value = Character.valueOf(in.readChar());
+    Character value = in.readChar();
-    out.writeByte(value.byteValue());
+    out.writeByte(value);
-    Byte value = Byte.valueOf(in.readByte());
+    Byte value = in.readByte();
-    out.writeShort(value.shortValue());
+    out.writeShort(value);
-    Short value = Short.valueOf(in.readShort());
+    Short value = in.readShort();
-    out.writeInt(value.intValue());
+    out.writeInt(value);
-    Integer value = Integer.valueOf(in.readInt());
+    Integer value = in.readInt();
-    out.writeLong(value.longValue());
+    out.writeLong(value);
-    Long value = Long.valueOf(in.readLong());
+    Long value = in.readLong();
-    out.writeFloat(value.floatValue());
+    out.writeFloat(value);
-    Float value = Float.valueOf(in.readFloat());
+    Float value = in.readFloat();
-    out.writeDouble(value.doubleValue());
+    out.writeDouble(value);
-    Double value = Double.valueOf(in.readDouble());
+    Double value = in.readDouble();
-          RuntimeException e2 = new IllegalArgumentException(
-              "Problem while serializing.");
-          e2.initCause(e);
-          throw e2;
+          throw new IllegalArgumentException("Problem while serializing.", e);
-      Class<?> c = null;
+      Class<?> c;
-        } catch (ClassNotFoundException ignore) {
+        } catch (ClassNotFoundException e) {
-          cnfEx = ignore;
+          cnfEx = e;
-      ArrayList<E> list = new ArrayList<E>(size);
+      ArrayList<E> list = new ArrayList<>(size);
-        E element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.readObject(in);
-      Vector<E> list = new Vector<E>(size);
+      Vector<E> list = new Vector<>(size);
-        E element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.readObject(in);
-      Stack<E> list = new Stack<E>();
+      Stack<E> list = new Stack<>();
-        E element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.readObject(in);
-      LinkedList<E> list = new LinkedList<E>();
+      LinkedList<E> list = new LinkedList<>();
-        E element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.readObject(in);
-      HashSet<E> set = new HashSet<E>(size);
+      HashSet<E> set = new HashSet<>(size);
-        E element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.readObject(in);
-      LinkedHashSet<E> set = new LinkedHashSet<E>(size);
+      LinkedHashSet<E> set = new LinkedHashSet<>(size);
-        E element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.readObject(in);
-      HashMap<K, V> map = new HashMap<K, V>(size);
+      HashMap<K, V> map = new HashMap<>(size);
-        K key = DataSerializer.<K>readObject(in);
-        V value = DataSerializer.<V>readObject(in);
+        K key = DataSerializer.readObject(in);
+        V value = DataSerializer.readObject(in);
-      IdentityHashMap<K, V> map = new IdentityHashMap<K, V>(size);
+      IdentityHashMap<K, V> map = new IdentityHashMap<>(size);
-        K key = DataSerializer.<K>readObject(in);
-        V value = DataSerializer.<V>readObject(in);
+        K key = DataSerializer.readObject(in);
+        V value = DataSerializer.readObject(in);
-      // take a snapshot to fix bug 44562
-      entrySnapshot = new ArrayList<Map.Entry<?, ?>>(map.entrySet());
+      entrySnapshot = new ArrayList<>(map.entrySet());
-      ConcurrentHashMap<K, V> map = new ConcurrentHashMap<K, V>(size);
+      ConcurrentHashMap<K, V> map = new ConcurrentHashMap<>(size);
-        K key = DataSerializer.<K>readObject(in);
-        V value = DataSerializer.<V>readObject(in);
+        K key = DataSerializer.readObject(in);
+        V value = DataSerializer.readObject(in);
-      Hashtable<K, V> map = new Hashtable<K, V>(size);
+      Hashtable<K, V> map = new Hashtable<>(size);
-        K key = DataSerializer.<K>readObject(in);
-        V value = DataSerializer.<V>readObject(in);
+        K key = DataSerializer.readObject(in);
+        V value = DataSerializer.readObject(in);
-      Comparator<? super K> c =
-          InternalDataSerializer.<Comparator<? super K>>readNonPdxInstanceObject(in);
-      TreeMap<K, V> map = new TreeMap<K, V>(c);
+      Comparator<? super K> c = InternalDataSerializer.readNonPdxInstanceObject(in);
+      TreeMap<K, V> map = new TreeMap<>(c);
-        K key = DataSerializer.<K>readObject(in);
-        V value = DataSerializer.<V>readObject(in);
+        K key = DataSerializer.readObject(in);
+        V value = DataSerializer.readObject(in);
-        K key = DataSerializer.<K>readObject(in);
-        V value = DataSerializer.<V>readObject(in);
+        K key = DataSerializer.readObject(in);
+        V value = DataSerializer.readObject(in);
-          InternalDataSerializer.<Comparator<? super E>>readNonPdxInstanceObject(in);
-      TreeSet<E> set = new TreeSet<E>(c);
+          InternalDataSerializer.readNonPdxInstanceObject(in);
+      TreeSet<E> set = new TreeSet<>(c);
-        E element = DataSerializer.<E>readObject(in);
+        E element = DataSerializer.readObject(in);
+  @SuppressWarnings("unchecked")
-    return InternalDataSerializer.register(c, true);
+    return InternalDataSerializer.register((Class<? extends DataSerializer>) c, true);
-  private static final ConcurrentMap knownEnums = new ConcurrentHashMap();
+  private static final ConcurrentMap<Class<? extends Enum>, Enum[]> knownEnums =
+      new ConcurrentHashMap<>();
+  @SuppressWarnings("unchecked")
