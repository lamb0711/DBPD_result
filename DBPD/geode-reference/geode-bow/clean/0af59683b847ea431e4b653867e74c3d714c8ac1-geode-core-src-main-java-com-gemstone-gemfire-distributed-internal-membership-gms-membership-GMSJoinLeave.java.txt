GEODE-870: test case fixes.

-  
+
-  /** amount of time to wait for responses to FindCoordinatorRequests */
+  /**
+   * amount of time to wait for responses to FindCoordinatorRequests
+   */
-  /** amount of time to sleep before trying to join after a failed attempt */
+  /**
+   * amount of time to sleep before trying to join after a failed attempt
+   */
-  /** time to wait for a broadcast message to be transmitted by jgroups */
+  /**
+   * time to wait for a broadcast message to be transmitted by jgroups
+   */
-  /** if the locators don't know who the coordinator is we send find-coord requests to this many nodes */
+  /**
+   * if the locators don't know who the coordinator is we send find-coord requests to this many nodes
+   */
-  /** interval for broadcasting the current view to members in case they didn't get it the first time */
+  /**
+   * interval for broadcasting the current view to members in case they didn't get it the first time
+   */
-  /** membership logger */
+  /**
+   * membership logger
+   */
-  /** the view ID where I entered into membership */
+  /**
+   * the view ID where I entered into membership
+   */
-  /** my address */
+  /**
+   * my address
+   */
-  /** have I connected to the distributed system? */
+  /**
+   * have I connected to the distributed system?
+   */
-  /** guarded by viewInstallationLock */
+  /**
+   * guarded by viewInstallationLock
+   */
-  /** a synch object that guards view installation */
+  /**
+   * a synch object that guards view installation
+   */
-  
-  /** the currently installed view.  Guarded by viewInstallationLock */
+
+  /**
+   * the currently installed view.  Guarded by viewInstallationLock
+   */
-  /** the previous view **/
+  /**
+   * the previous view
+   **/
-  /** members who we have been declared dead in the current view */
+  /**
+   * members who we have been declared dead in the current view
+   */
-  /** members who we've received a leave message from **/
+  /**
+   * members who we've received a leave message from
+   **/
-  /** a new view being installed */
+  /**
+   * a new view being installed
+   */
-  /** the last view that conflicted with view preparation */
+  /**
+   * the last view that conflicted with view preparation
+   */
-  /** a list of join/leave/crashes */
+  /**
+   * a list of join/leave/crashes
+   */
-  /** the established request collection jitter.  This can be overridden for testing with delayViewCreationForTest */
+  /**
+   * the established request collection jitter.  This can be overridden for testing with delayViewCreationForTest
+   */
-  /** collects the response to a join request */
+  /**
+   * collects the response to a join request
+   */
-  /** collects responses to new views */
+  /**
+   * collects responses to new views
+   */
-  /** collects responses to view preparation messages */
+  /**
+   * collects responses to view preparation messages
+   */
-  /** whether quorum checks can cause a forced-disconnect */
+  /**
+   * whether quorum checks can cause a forced-disconnect
+   */
-  /** timeout in receiving view acknowledgement */
+  /**
+   * timeout in receiving view acknowledgement
+   */
-  /** background thread that creates new membership views */
+  /**
+   * background thread that creates new membership views
+   */
-  /** am I shutting down? */
+  /**
+   * am I shutting down?
+   */
-  /** state of collected artifacts during discovery */
+  /**
+   * state of collected artifacts during discovery
+   */
-  /** a collection used to detect unit testing */
+  /**
+   * a collection used to detect unit testing
+   */
-  
-  /** a test hook to make this member unresponsive */
+
+  /**
+   * a test hook to make this member unresponsive
+   */
-  
-  /** the view where quorum was most recently lost */
+
+  /**
+   * the view where quorum was most recently lost
+   */
-  /** a flag to mark a coordinator's viewCreator for shutdown */
+  /**
+   * a flag to mark a coordinator's viewCreator for shutdown
+   */
-   *   send a join request to a locator & get a response
-   *
+   * send a join request to a locator & get a response
+   * <p>
-   * 
+   *
-    synchronized(removedMembers) {
+    synchronized (removedMembers) {
-    synchronized(leftMembers) {
+    synchronized (leftMembers) {
-//      Remove JoinResponseMessage to fix GEODE-870
-//        if (!this.localAddress.getNetMember().preferredForCoordinator() &&
-//            incomingRequest.getMemberID().getNetMember().preferredForCoordinator()){
-//          JoinResponseMessage joinResponseMessage = new JoinResponseMessage(incomingRequest.getMemberID(), currentView, true);
-//          services.getMessenger().send(joinResponseMessage);
-//          return;
-//        }
+    //      Remove JoinResponseMessage to fix GEODE-870
+//    if (!this.localAddress.getNetMember().preferredForCoordinator() &&
+//        incomingRequest.getMemberID().getNetMember().preferredForCoordinator()) {
+//      JoinResponseMessage joinResponseMessage = new JoinResponseMessage(incomingRequest.getMemberID(), currentView, true);
+//      services.getMessenger().send(joinResponseMessage);
+//      return;
+//    }
-      logger.debug("JoinLeave.processLeaveRequest invoked.  isCoordinator="+isCoordinator+ "; isStopping="+isStopping
-          +"; cancelInProgress="+ services.getCancelCriterion().isCancelInProgress());
+      logger.debug("JoinLeave.processLeaveRequest invoked.  isCoordinator=" + isCoordinator + "; isStopping=" + isStopping
+          + "; cancelInProgress=" + services.getCancelCriterion().isCancelInProgress());
-      synchronized(leftMembers) {
+      synchronized (leftMembers) {
-        synchronized(viewInstallationLock) {
+        synchronized (viewInstallationLock) {
-        + " from " + incomingRequest.getSender()
-        + " reason="+incomingRequest.getReason());
+          + " from " + incomingRequest.getSender()
+          + " reason=" + incomingRequest.getReason());
-      Set<InternalDistributedMember> failedToRespond = rp.waitForResponses();
+      Set<InternalDistributedMember> failedToRespond = viewReplyProcessor.waitForResponses();
-  private void processViewMessage(final InstallViewMessage installViewMessage) {
+  private void processViewMessage(final InstallViewMessage m) {
-      for (InternalDistributedMember mbr: view.getMembers()) {
+      for (InternalDistributedMember mbr : view.getMembers()) {
-    for (; it.hasNext();) {
+    for (; it.hasNext(); ) {
-    /** call with synchronized(this) */
+    /**
+     * call with synchronized(this)
+     */
-    /** call with synchronized(this) */
+    /**
+     * call with synchronized(this)
+     */
-        for (;;) {
+        for (; ; ) {
-    private void removeHealthyMembers(final Collection<InternalDistributedMember> mbrs) throws InterruptedException {
-      List<Callable<InternalDistributedMember>> checkers = new ArrayList<Callable<InternalDistributedMember>>(mbrs.size());
+    private void removeHealthyMembers(final Set<InternalDistributedMember> suspects) throws InterruptedException {
+      List<Callable<InternalDistributedMember>> checkers = new ArrayList<Callable<InternalDistributedMember>>(suspects.size());
+
-          while ( waitTime > 0 ) {
+          while (waitTime > 0) {
-            if(suspects.isEmpty() || newRemovals.containsAll(suspects)) {
+            if (suspects.isEmpty() || newRemovals.containsAll(suspects)) {
-     * @param mbrs collection of IDs to search for
+     *
+     * @param mbrs            collection of IDs to search for
-     * @param requestType leave/remove/join
+     * @param requestType     leave/remove/join
-      if(!requests.isEmpty()) {
+      if (!requests.isEmpty()) {
-        while(itr.hasNext()) {
+        while (itr.hasNext()) {
-          if(mbrs.contains(memberID)) {
+          if (mbrs.contains(memberID)) {
-    private <T> List<Future<T>> submitAll ( ExecutorService executor, Collection<? extends Callable<T> > tasks ) {
-      List<Future<T>> result = new ArrayList<Future<T>>( tasks.size() );
+    private <T> List<Future<T>> submitAll(ExecutorService executor, Collection<? extends Callable<T>> tasks) {
+      List<Future<T>> result = new ArrayList<Future<T>>(tasks.size());
- // return the member id if it fails health checks
+    // return the member id if it fails health checks
