Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Total number of completed function.execute() calls (aka invocations of a
-   * function) per VM. Name of the function executions completed statistic
+   * Total number of completed function.execute() calls (aka invocations of a function) per VM. Name
+   * of the function executions completed statistic
-   * Total time consumed for all completed invocations Name of the function
-   * executions completed processing time statistic
+   * Total time consumed for all completed invocations Name of the function executions completed
+   * processing time statistic
-  private static final String FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME = "functionExecutionsCompletedProcessingTime";
+  private static final String FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME =
+      "functionExecutionsCompletedProcessingTime";
-   * A guage indicating the number of currently running invocations Name of the
-   * function executions running statistic
+   * A guage indicating the number of currently running invocations Name of the function executions
+   * running statistic
-   * Total number of results sent to the ResultCollector 
-   * Name of the results returned statistic
+   * Total number of results sent to the ResultCollector Name of the results returned statistic
-   * Total number of FunctionService...execute() calls Name of the total
-   * function executions call statistic
+   * Total number of FunctionService...execute() calls Name of the total function executions call
+   * statistic
-   * Total time consumed for all completed execute() calls where hasResult()
-   * returns true. Name of the function executions calls having hasResult=true
-   * time statistic
+   * Total time consumed for all completed execute() calls where hasResult() returns true. Name of
+   * the function executions calls having hasResult=true time statistic
-  private static final String FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME = "functionExecutionsHasResultCompletedProcessingTime";
+  private static final String FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME =
+      "functionExecutionsHasResultCompletedProcessingTime";
-   * A gauge indicating the number of currently active execute() calls for
-   * functions where hasResult() returns true. Name of the function execution
-   * time statistic
+   * A gauge indicating the number of currently active execute() calls for functions where
+   * hasResult() returns true. Name of the function execution time statistic
-  private static final String FUNCTION_EXECUTIONS_HASRESULT_RUNNING = "functionExecutionsHasResultRunning";
-  
+  private static final String FUNCTION_EXECUTIONS_HASRESULT_RUNNING =
+      "functionExecutionsHasResultRunning";
+
-   * Total number of Exceptions Occuredwhile executing function 
-   * Name of the functionExecution exceptions statistic
+   * Total number of Exceptions Occuredwhile executing function Name of the functionExecution
+   * exceptions statistic
-  
+
-   * Total number of results sent to the ResultCollector 
-   * Name of the results returned statistic
+   * Total number of results sent to the ResultCollector Name of the results returned statistic
-  
+
-  
+
-  
+
-    String statDescription = "This is the aggregate Function Execution Stats (for all function Executions)";
+    String statDescription =
+        "This is the aggregate Function Execution Stats (for all function Executions)";
-    _type = f
-        .createType(
-            statName,
-            statDescription,
-            new StatisticDescriptor[] {
-                f.createIntCounter(FUNCTION_EXECUTIONS_COMPLETED,
-                    "Total number of completed function.execute() calls",
-                    "operations"),
+    _type = f.createType(statName, statDescription,
+        new StatisticDescriptor[] {f.createIntCounter(FUNCTION_EXECUTIONS_COMPLETED,
+            "Total number of completed function.execute() calls", "operations"),
-                f.createLongCounter(
-                    FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME,
-                    "Total time consumed for all completed invocations",
-                    "nanoseconds"),
+            f.createLongCounter(FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME,
+                "Total time consumed for all completed invocations", "nanoseconds"),
-                f.createIntGauge(FUNCTION_EXECUTIONS_RUNNING,
-                    "number of currently running invocations", "operations"),
+            f.createIntGauge(FUNCTION_EXECUTIONS_RUNNING, "number of currently running invocations",
+                "operations"),
-                f.createIntCounter(RESULTS_SENT_TO_RESULTCOLLECTOR,
-                    "Total number of results sent to the ResultCollector",
-                    "operations"),
+            f.createIntCounter(RESULTS_SENT_TO_RESULTCOLLECTOR,
+                "Total number of results sent to the ResultCollector", "operations"),
-                f.createIntCounter(RESULTS_RECEIVED,
-                    "Total number of results received and passed to the ResultCollector",
-                     "operations"),
-                        
-                f.createIntCounter(FUNCTION_EXECUTION_CALLS,
-                    "Total number of FunctionService.execute() calls",
-                    "operations"),
+            f.createIntCounter(RESULTS_RECEIVED,
+                "Total number of results received and passed to the ResultCollector", "operations"),
-                f
-                    .createLongCounter(
-                        FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME,
-                        "Total time consumed for all completed execute() calls where hasResult() returns true.",
-                        "nanoseconds"),
+            f.createIntCounter(FUNCTION_EXECUTION_CALLS,
+                "Total number of FunctionService.execute() calls", "operations"),
-                f
-                    .createIntGauge(
-                        FUNCTION_EXECUTIONS_HASRESULT_RUNNING,
-                        "A gauge indicating the number of currently active execute() calls for functions where hasResult() returns true.",
-                        "operations"),
-                f.createIntCounter(FUNCTION_EXECUTION_EXCEPTIONS,
-                            "Total number of Exceptions Occured while executing function",
-                            "operations"),
+            f.createLongCounter(FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME,
+                "Total time consumed for all completed execute() calls where hasResult() returns true.",
+                "nanoseconds"),
-            });
+            f.createIntGauge(FUNCTION_EXECUTIONS_HASRESULT_RUNNING,
+                "A gauge indicating the number of currently active execute() calls for functions where hasResult() returns true.",
+                "operations"),
+            f.createIntCounter(FUNCTION_EXECUTION_EXCEPTIONS,
+                "Total number of Exceptions Occured while executing function", "operations"),
+
+        });
-    _functionExecutionsCompletedId = _type
-        .nameToId(FUNCTION_EXECUTIONS_COMPLETED);
-    _functionExecutionsCompletedProcessingTimeId = _type
-        .nameToId(FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME);
+    _functionExecutionsCompletedId = _type.nameToId(FUNCTION_EXECUTIONS_COMPLETED);
+    _functionExecutionsCompletedProcessingTimeId =
+        _type.nameToId(FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME);
-    _functionExecutionsHasResultCompletedProcessingTimeId = _type
-        .nameToId(FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME);
-    _functionExecutionsHasResultRunningId = _type
-        .nameToId(FUNCTION_EXECUTIONS_HASRESULT_RUNNING);
+    _functionExecutionsHasResultCompletedProcessingTimeId =
+        _type.nameToId(FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME);
+    _functionExecutionsHasResultRunningId = _type.nameToId(FUNCTION_EXECUTIONS_HASRESULT_RUNNING);
-   * @param factory
-   *          The <code>StatisticsFactory</code> which creates the
-   *          <code>Statistics</code> instance
-   * @param name
-   *          The name of the <code>Statistics</code>
+   * @param factory The <code>StatisticsFactory</code> which creates the <code>Statistics</code>
+   *        instance
+   * @param name The name of the <code>Statistics</code>
-  
+
-   * Returns the current value of the "Total number of completed
-   * function.execute() calls" stat.
+   * Returns the current value of the "Total number of completed function.execute() calls" stat.
-   * Returns the current value of the "Total time consumed for all completed
-   * invocations" stat.
+   * Returns the current value of the "Total time consumed for all completed invocations" stat.
-   * @return the current value of the "functionExecutionCompleteProcessingTime"
-   *         stat
+   * @return the current value of the "functionExecutionCompleteProcessingTime" stat
-   * Returns the current value of the "number of currently running invocations"
-   * stat.
+   * Returns the current value of the "number of currently running invocations" stat.
-   * Returns the current value of the "Total number of results sent to the
-   * ResultCollector" stat.
+   * Returns the current value of the "Total number of results sent to the ResultCollector" stat.
-  
+
-   * Returns the current value of the "Total number of results received and passed to ResultCollector" stat.
+   * Returns the current value of the "Total number of results received and passed to
+   * ResultCollector" stat.
-   * Returns the current value of the "Total number of
-   * FunctionService...execute() calls" stat.
+   * Returns the current value of the "Total number of FunctionService...execute() calls" stat.
-   * Returns the current value of the "Total time consumed for all completed
-   * execute() calls where hasResult() returns true" stat.
+   * Returns the current value of the "Total time consumed for all completed execute() calls where
+   * hasResult() returns true" stat.
-   * @return the current value of the
-   *         "functionExecutionHasResultCompleteProcessingTime" stat
+   * @return the current value of the "functionExecutionHasResultCompleteProcessingTime" stat
-    return this._stats
-        .getInt(_functionExecutionsHasResultCompletedProcessingTimeId);
+    return this._stats.getInt(_functionExecutionsHasResultCompletedProcessingTimeId);
-   * Returns the current value of the "A gauge indicating the number of
-   * currently active execute() calls for functions where hasResult() returns
-   * true" stat.
+   * Returns the current value of the "A gauge indicating the number of currently active execute()
+   * calls for functions where hasResult() returns true" stat.
-   * Returns the current value of the "Total number of Exceptions Occured while executing function" stat.
+   * Returns the current value of the "Total number of Exceptions Occured while executing function"
+   * stat.
-  
+
-   * Increments the "_functionExecutionCallsId" and
-   * "_functionExecutionsRunningId" stats and
-   * "_functionExecutionHasResultRunningId" in case of function.hasResult =
-   * true..
+   * Increments the "_functionExecutionCallsId" and "_functionExecutionsRunningId" stats and
+   * "_functionExecutionHasResultRunningId" in case of function.hasResult = true..
-   * Increments the "functionExecutionsCompleted" and
-   * "functionExecutionCompleteProcessingTime" stats.
+   * Increments the "functionExecutionsCompleted" and "functionExecutionCompleteProcessingTime"
+   * stats.
-   * @param start
-   *          The start of the functionExecution (which is decremented from the
-   *          current time to determine the function Execution processing time).
-   * @param haveResult
-   *          haveResult=true then update the
-   *          _functionExecutionHasResultRunningId and
-   *          _functionExecutionHasResultCompleteProcessingTimeId
+   * @param start The start of the functionExecution (which is decremented from the current time to
+   *        determine the function Execution processing time).
+   * @param haveResult haveResult=true then update the _functionExecutionHasResultRunningId and
+   *        _functionExecutionHasResultCompleteProcessingTimeId
-  public void endFunctionExecution(long start,boolean haveResult) {
+  public void endFunctionExecution(long start, boolean haveResult) {
-    //Decrement function Executions running.
+    // Decrement function Executions running.
-    
+
-    
-    if(haveResult){
-      //Decrement function Executions with haveResult = true running.
+
+    if (haveResult) {
+      // Decrement function Executions with haveResult = true running.
-      
+
-  
+
-    //Decrement function Executions running.
-     this._stats.incInt(_functionExecutionsRunningId, -1);
-     
-     //Increment number of function excution exceptions 
-     this._stats.incInt(_functionExecutionExceptions, 1);
-     
-     if(haveResult){
-       //Decrement function Executions with haveResult = true running.
-       this._stats.incInt(_functionExecutionsHasResultRunningId, -1);
-     }
-   }
+    // Decrement function Executions running.
+    this._stats.incInt(_functionExecutionsRunningId, -1);
-  public Statistics getStats(){
+    // Increment number of function excution exceptions
+    this._stats.incInt(_functionExecutionExceptions, 1);
+
+    if (haveResult) {
+      // Decrement function Executions with haveResult = true running.
+      this._stats.incInt(_functionExecutionsHasResultRunningId, -1);
+    }
+  }
+
+  public Statistics getStats() {
