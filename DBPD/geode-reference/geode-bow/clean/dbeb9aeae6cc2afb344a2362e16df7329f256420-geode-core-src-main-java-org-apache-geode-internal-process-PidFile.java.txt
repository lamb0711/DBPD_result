Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * File wrapper that adds support for reading process id (pid) from a pid file
- * written to disk by GemFire processes.
+ * File wrapper that adds support for reading process id (pid) from a pid file written to disk by
+ * GemFire processes.
-  
+
-  
+
-  
+
-      throw new IllegalArgumentException("Argument '" + directory + "' must be an existing directory!");
+      throw new IllegalArgumentException(
+          "Argument '" + directory + "' must be an existing directory!");
-      throw new FileNotFoundException("Unable to find PID file '" + filename + "' in directory " + directory);
+      throw new FileNotFoundException(
+          "Unable to find PID file '" + filename + "' in directory " + directory);
-   * Reads in the pid from the specified file. 
+   * Reads in the pid from the specified file.
-        throw new IllegalArgumentException("Invalid pid '" + pid + "' found in " + this.pidFile.getCanonicalPath());
+        throw new IllegalArgumentException(
+            "Invalid pid '" + pid + "' found in " + this.pidFile.getCanonicalPath());
-    }
-    catch (NumberFormatException e) {
-      throw new IllegalArgumentException("Invalid pid '" + pidValue + "' found in " + this.pidFile.getCanonicalPath());
-    }
-    finally {
+    } catch (NumberFormatException e) {
+      throw new IllegalArgumentException(
+          "Invalid pid '" + pidValue + "' found in " + this.pidFile.getCanonicalPath());
+    } finally {
-  public int readPid(final long timeout, final TimeUnit unit) throws IOException, InterruptedException, TimeoutException {
+  public int readPid(final long timeout, final TimeUnit unit)
+      throws IOException, InterruptedException, TimeoutException {
-    
+
-    
+
