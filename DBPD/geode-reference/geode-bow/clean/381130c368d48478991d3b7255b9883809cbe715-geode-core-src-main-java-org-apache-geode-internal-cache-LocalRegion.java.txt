GEODE-6529: Use EntryEventFactory instead of factory methods (#3334)

- rename previous EntryEventFactory as TxCallbackEventFactory
- create new EntryEventFactory for LocalRegion to use when
creating EntryEventImpl instances
- allows easier testing

Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Kirk Lund <klund@pivotal.io>

+import org.apache.geode.annotations.VisibleForTesting;
+  private final EntryEventFactory entryEventFactory;
+  private final RegionMapConstructor regionMapConstructor;
+
-  /**
-   * Creates new region
-   */
+    this(regionName, attrs, parentRegion, cache, internalRegionArgs, new LocalRegionDataView(),
+        RegionMapFactory::createVM, new DefaultEntryEventFactory());
+  }
+
+  protected LocalRegion(String regionName, RegionAttributes attrs, LocalRegion parentRegion,
+      InternalCache cache, InternalRegionArguments internalRegionArgs,
+      InternalDataView internalDataView) throws DiskAccessException {
+    this(regionName, attrs, parentRegion, cache, internalRegionArgs, internalDataView,
+        RegionMapFactory::createVM, new DefaultEntryEventFactory());
+  }
+
+  @VisibleForTesting
+  LocalRegion(String regionName, RegionAttributes attrs, LocalRegion parentRegion,
+      InternalCache cache, InternalRegionArguments internalRegionArgs,
+      InternalDataView internalDataView,
+      RegionMapConstructor regionMapConstructor, EntryEventFactory entryEventFactory)
+      throws DiskAccessException {
+    this.regionMapConstructor = regionMapConstructor;
+    this.entryEventFactory = entryEventFactory;
-    this.sharedDataView = buildDataView();
+    this.sharedDataView = internalDataView;
-      result = RegionMapFactory.createVM(this, ma, internalRegionArgs);
+      result = regionMapConstructor.create(this, ma, internalRegionArgs);
-  protected InternalDataView buildDataView() {
-    return new LocalRegionDataView();
-  }
-
-    return EntryEventImpl
+    return entryEventFactory
-        /* to distinguish genuine create */.setCreate(true);
+        .setCreate(true);
+  }
+
+  interface RegionMapConstructor {
+    RegionMap create(LocalRegion owner, RegionMap.Attributes attrs,
+        InternalRegionArguments internalRegionArgs);
-    return EntryEventImpl.create(this, Operation.DESTROY, key, null/* newValue */,
+    return entryEventFactory.create(this, Operation.DESTROY, key, null,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE, key, value,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.UPDATE, key, value,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.INVALIDATE, key, null,
+    EntryEventImpl event = entryEventFactory.create(this, Operation.INVALIDATE, key, null,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.LOCAL_DESTROY, key, null,
+    EntryEventImpl event = entryEventFactory.create(this, Operation.LOCAL_DESTROY, key, null,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.LOCAL_INVALIDATE, key,
-        null/* newValue */, aCallbackArgument, false, getMyId());
+    EntryEventImpl event = entryEventFactory.create(this, Operation.LOCAL_INVALIDATE, key,
+        null, aCallbackArgument, false, getMyId());
-      EntryEventImpl event = EntryEventImpl.create(this, op, key, value, aCallbackArgument, false,
-          getMyId(), generateCallbacks);
+      EntryEventImpl event =
+          entryEventFactory.create(this, op, key, value, aCallbackArgument, false,
+              getMyId(), generateCallbacks);
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.LOCAL_DESTROY, key, false,
-        getMyId(), false /* generateCallbacks */, true);
+    EntryEventImpl event = entryEventFactory.create(this, Operation.LOCAL_DESTROY, key, false,
+        getMyId(), false, true);
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.CREATE, key, value,
-        theCallbackArg, false /* origin remote */, client.getDistributedMember(),
-        true /* generateCallbacks */, eventId);
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.CREATE, key, value,
+        theCallbackArg, false, client.getDistributedMember(),
+        true, eventId);
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE, key,
-        null /* new value */, theCallbackArg, false /* origin remote */,
-        memberId.getDistributedMember(), true /* generateCallbacks */, eventID);
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.UPDATE, key,
+        null, theCallbackArg, false,
+        memberId.getDistributedMember(), true, eventID);
-          EntryEventImpl.create(this, Operation.INVALIDATE, key, null /* newValue */,
-              callbackArgument /* callbackArg */, true /* originRemote */, serverId);
+          entryEventFactory.create(this, Operation.INVALIDATE, key, null,
+              callbackArgument, true, serverId);
-          EntryEventImpl.create(this, Operation.DESTROY, key, null /* newValue */,
-              callbackArgument /* callbackArg */, true /* originRemote */, serverId);
+          entryEventFactory.create(this, Operation.DESTROY, key, null,
+              callbackArgument, true, serverId);
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.DESTROY, key, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.DESTROY, key, null,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.INVALIDATE, key, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.INVALIDATE, key, null,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE_VERSION_STAMP, key, null,
+    EntryEventImpl event = entryEventFactory.create(this, Operation.UPDATE_VERSION_STAMP, key, null,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.EVICT_DESTROY, key,
-        null/* newValue */, null, false, getMyId());
+    EntryEventImpl event = entryEventFactory.create(this, Operation.EVICT_DESTROY, key,
+        null, null, false, getMyId());
-        EntryEventImpl event = EntryEventImpl.create(this, operation, keyObject, null, null,
+        EntryEventImpl event = entryEventFactory.create(this, operation, keyObject, null, null,
-          EntryEventImpl event = EntryEventImpl.create(this, Operation.LOCAL_LOAD_CREATE, key,
+          EntryEventImpl event = entryEventFactory.create(this, Operation.LOCAL_LOAD_CREATE, key,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.PUTALL_CREATE, null,
-        null /* new value */, callbackArg, false /* origin remote */,
-        memberId.getDistributedMember(), !skipCallbacks /* generateCallbacks */, eventId);
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.PUTALL_CREATE, null,
+        null, callbackArg, false,
+        memberId.getDistributedMember(), !skipCallbacks, eventId);
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REMOVEALL_DESTROY, null,
-        null /* new value */, callbackArg, false /* origin remote */,
-        memberId.getDistributedMember(), true /* generateCallbacks */, eventId);
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.REMOVEALL_DESTROY, null,
+        null, callbackArg, false,
+        memberId.getDistributedMember(), true, eventId);
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.PUTALL_CREATE, null, null, null,
+    EntryEventImpl event = entryEventFactory.create(this, Operation.PUTALL_CREATE, null, null, null,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.PUTALL_CREATE, null, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.PUTALL_CREATE, null, null,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REMOVEALL_DESTROY, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.REMOVEALL_DESTROY, null,
-        EntryEventImpl.createPutAllEvent(putallOp, this, Operation.PUTALL_CREATE, key, value);
+        entryEventFactory.createPutAllEvent(putallOp, this, Operation.PUTALL_CREATE, key, value);
-    EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(op, this, key);
+    EntryEventImpl event = entryEventFactory.createRemoveAllEvent(op, this, key);
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.LOCAL_DESTROY, key, null, null,
+    EntryEventImpl event = entryEventFactory.create(this, Operation.LOCAL_DESTROY, key, null, null,
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.PUT_IF_ABSENT, key, value,
+    EntryEventImpl event = entryEventFactory.create(this, Operation.PUT_IF_ABSENT, key, value,
-        EntryEventImpl.create(this, Operation.REMOVE, key, null, callbackArg, false, getMyId());
+        entryEventFactory.create(this, Operation.REMOVE, key, null, callbackArg, false, getMyId());
-    EntryEventImpl event = EntryEventImpl.create(this, Operation.REPLACE, key, newValue,
+    EntryEventImpl event = entryEventFactory.create(this, Operation.REPLACE, key, newValue,
-        EntryEventImpl.create(this, Operation.REPLACE, key, value, callbackArg, false, getMyId());
+        entryEventFactory.create(this, Operation.REPLACE, key, value, callbackArg, false,
+            getMyId());
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.PUT_IF_ABSENT, key, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.PUT_IF_ABSENT, key, null,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REPLACE, key, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.REPLACE, key, null,
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REPLACE, key, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.REPLACE, key, null,
-          // EntryEventImpl.setOldValue translates INVALID to null
-    final EntryEventImpl event = EntryEventImpl.create(this, Operation.REMOVE, key, null,
+    final EntryEventImpl event = entryEventFactory.create(this, Operation.REMOVE, key, null,
