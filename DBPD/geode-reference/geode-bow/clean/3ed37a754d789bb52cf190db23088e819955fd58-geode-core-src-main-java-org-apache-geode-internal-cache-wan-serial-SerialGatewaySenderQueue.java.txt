GEODE-5922 SerialGatewaySenderQueue concurrency is poorly implemented

Replaced simple synchronization with a fair write-lock.  The use of
sync to enforce serial queueing wasn't fair and caused inconsistent
latency.  I observed one thread that was blocked trying to get the
sync for over 30 seconds while other subsequent threads were able to
get the sync and queue their events.

This closes #2705

-import java.util.Iterator;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
-  /**
-   * The current key used to do put into the region. Once put is complete, then the {@link #tailKey}
-   * is reconciled with this value.
-   */
-  private long currentKey;
-
+  /**
+   * The writeLock of this concurrent lock is used to protect access to the queue.
+   * It is implemented as a fair lock to ensure FIFO ordering of queueing attempts.
+   * Otherwise threads can be unfairly delayed.
+   */
+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock(true);
-    this.currentKey = -1;
-  public synchronized boolean put(Object event) throws CacheException {
-    GatewaySenderEventImpl eventImpl = (GatewaySenderEventImpl) event;
-    final Region r = eventImpl.getRegion();
-    final boolean isPDXRegion =
-        (r instanceof DistributedRegion && r.getName().equals(PeerTypeRegistration.REGION_NAME));
-    final boolean isWbcl = this.regionName.startsWith(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX);
-    if (!(isPDXRegion && isWbcl)) {
-      putAndGetKey(event);
-      return true;
+  public boolean put(Object event) throws CacheException {
+    lock.writeLock().lock();
+    try {
+      GatewaySenderEventImpl eventImpl = (GatewaySenderEventImpl) event;
+      final Region r = eventImpl.getRegion();
+      final boolean isPDXRegion =
+          (r instanceof DistributedRegion && r.getName().equals(PeerTypeRegistration.REGION_NAME));
+      final boolean isWbcl =
+          this.regionName.startsWith(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX);
+      if (!(isPDXRegion && isWbcl)) {
+        putAndGetKey(event);
+        return true;
+      }
+      return false;
+    } finally {
+      lock.writeLock().unlock();
-    return false;
-  private long putAndGetKeyNoSync(Object object) throws CacheException {
-    // don't sync on whole put; callers will do the puts in parallel but
-    // will wait later for previous tailKey put to complete after its own
-    // put is done
-
-    Long key;
-    synchronized (this) {
-      initializeKeys();
-      // Get and increment the current key
-      // Go for full sync in case of wrapover
-      long ckey = this.currentKey;
-      if (logger.isTraceEnabled()) {
-        logger.trace("{}: Determined current key: {}", this, ckey);
-      }
-      key = Long.valueOf(ckey);
-      this.currentKey = inc(ckey);
-    }
-
-    try {
-      // Put the object into the region at that key
-      this.region.put(key, (AsyncEvent) object);
-
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: Inserted {} -> {}", this, key, object);
-      }
-    } finally {
-
-      final Object sync = this.pendingPuts;
-      synchronized (sync) {
-        // Increment the tail key
-        // It is important that we increment the tail
-        // key after putting in the region, this is the
-        // signal that a new object is available.
-
-        while (true) {
-          if (key.longValue() == this.tailKey.get()) {
-            // this is the next thread, so increment tail and signal all other
-            // waiting threads if required
-            incrementTailKey();
-            // check pendingPuts
-            boolean notifyWaiters = false;
-            if (this.pendingPuts.size() > 0) {
-              Iterator<Long> itr = this.pendingPuts.iterator();
-              while (itr.hasNext()) {
-                Long k = itr.next();
-                if (k.longValue() == this.tailKey.get()) {
-                  incrementTailKey();
-                  // removed something from pending queue, so notify any waiters
-                  if (!notifyWaiters) {
-                    notifyWaiters = (this.pendingPuts.size() >= this.maxPendingPuts);
-                  }
-                  itr.remove();
-                } else {
-                  break;
-                }
-              }
-            }
-            if (notifyWaiters) {
-              sync.notifyAll();
-            }
-            break;
-          } else if (this.pendingPuts.size() < this.maxPendingPuts) {
-            this.pendingPuts.add(key);
-            break;
-          } else {
-            // wait for the queue size to go down
-            boolean interrupted = Thread.interrupted();
-            Throwable t = null;
-            try {
-              sync.wait(5);
-            } catch (InterruptedException ie) {
-              t = ie;
-              interrupted = true;
-            } finally {
-              if (interrupted) {
-                Thread.currentThread().interrupt();
-              }
-              ((LocalRegion) this.region).getCancelCriterion().checkCancelInProgress(t);
-            }
-          }
-        }
-      }
-    }
-
-    if (object instanceof Conflatable) {
-      removeOldEntry((Conflatable) object, key);
-    }
-
-    return key.longValue();
-  }
-
-  public synchronized AsyncEvent take() throws CacheException {
+  public AsyncEvent take() throws CacheException {
-  public synchronized void remove() throws CacheException {
-    if (this.peekedIds.isEmpty()) {
-      return;
-    }
-    Long key = this.peekedIds.remove();
+  public void remove() throws CacheException {
+    lock.writeLock().lock();
-      // Increment the head key
-      updateHeadKey(key.longValue());
-      removeIndex(key);
-      // Remove the entry at that key with a callback arg signifying it is
-      // a WAN queue so that AbstractRegionEntry.destroy can get the value
-      // even if it has been evicted to disk. In the normal case, the
-      // AbstractRegionEntry.destroy only gets the value in the VM.
-      this.region.localDestroy(key, WAN_QUEUE_TOKEN);
-      this.stats.decQueueSize();
+      if (this.peekedIds.isEmpty()) {
+        return;
+      }
+      Long key = this.peekedIds.remove();
+      try {
+        // Increment the head key
+        updateHeadKey(key.longValue());
+        removeIndex(key);
+        // Remove the entry at that key with a callback arg signifying it is
+        // a WAN queue so that AbstractRegionEntry.destroy can get the value
+        // even if it has been evicted to disk. In the normal case, the
+        // AbstractRegionEntry.destroy only gets the value in the VM.
+        this.region.localDestroy(key, WAN_QUEUE_TOKEN);
+        this.stats.decQueueSize();
-    } catch (EntryNotFoundException ok) {
-      // this is acceptable because the conflation can remove entries
-      // out from underneath us.
+      } catch (EntryNotFoundException ok) {
+        // this is acceptable because the conflation can remove entries
+        // out from underneath us.
+        if (logger.isDebugEnabled()) {
+          logger.debug(
+              "{}: Did not destroy entry at {} it was not there. It should have been removed by conflation.",
+              this, key);
+        }
+      }
+
+      boolean wasEmpty = this.lastDispatchedKey == this.lastDestroyedKey;
+      this.lastDispatchedKey = key;
+      if (wasEmpty) {
+        synchronized (this) {
+          notifyAll();
+        }
+      }
+
-            "{}: Did not destroy entry at {} it was not there. It should have been removed by conflation.",
-            this, key);
+            "{}: Destroyed entry at key {} setting the lastDispatched Key to {}. The last destroyed entry was {}",
+            this, key, this.lastDispatchedKey, this.lastDestroyedKey);
-    }
-
-    boolean wasEmpty = this.lastDispatchedKey == this.lastDestroyedKey;
-    this.lastDispatchedKey = key;
-    if (wasEmpty) {
-      notifyAll();
-    }
-
-    if (logger.isDebugEnabled()) {
-      logger.debug(
-          "{}: Destroyed entry at key {} setting the lastDispatched Key to {}. The last destroyed entry was {}",
-          this, key, this.lastDispatchedKey, this.lastDestroyedKey);
+    } finally {
+      lock.writeLock().unlock();
-      synchronized (this) {
+      lock.writeLock().lock();
+      try {
+      } finally {
+        lock.writeLock().unlock();
-  // No need to synchronize because it is called from a synchronized method
+  /*
+   * this must be invoked with lock.writeLock() held
+   */
-    synchronized (this) {
+    lock.writeLock().lock();
+    try {
+    } finally {
+      lock.writeLock().unlock();
-            synchronized (SerialGatewaySenderQueue.this) {
+            lock.writeLock().lock();
+            try {
+            } finally {
+              lock.writeLock().unlock();
