Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This message is sent to a member to make it attempt to become
- * primary. This message is sent at the end of PRHARedundancyProvider
- * .createBucketAtomically, because the buckets created during that
- * time do not volunteer for primary until receiving this message.
+ * This message is sent to a member to make it attempt to become primary. This message is sent at
+ * the end of PRHARedundancyProvider .createBucketAtomically, because the buckets created during
+ * that time do not volunteer for primary until receiving this message.
-  
+
-  public EndBucketCreationMessage() {
-  }
+  public EndBucketCreationMessage() {}
-  private EndBucketCreationMessage(Collection<InternalDistributedMember> recipients, 
-                                     int regionId, 
-                                     ReplyProcessor21 processor,
-                                     int bucketId,
-                                     InternalDistributedMember newPrimary) {
+  private EndBucketCreationMessage(Collection<InternalDistributedMember> recipients, int regionId,
+      ReplyProcessor21 processor, int bucketId, InternalDistributedMember newPrimary) {
-   * @param acceptedMembers 
+   * 
+   * @param acceptedMembers
-  public static void send(Collection<InternalDistributedMember> acceptedMembers, 
-      InternalDistributedMember newPrimary, 
-      PartitionedRegion pr, 
-      int bid)  {
-    
-    Assert.assertTrue(newPrimary != null, 
-        "VolunteerPrimaryBucketMessage NULL recipient");
-    
-    ReplyProcessor21 response = new ReplyProcessor21(
-        pr.getSystem(), acceptedMembers);
-    EndBucketCreationMessage msg = new EndBucketCreationMessage(
-        acceptedMembers, pr.getPRId(), response, bid, newPrimary);
+  public static void send(Collection<InternalDistributedMember> acceptedMembers,
+      InternalDistributedMember newPrimary, PartitionedRegion pr, int bid) {
+
+    Assert.assertTrue(newPrimary != null, "VolunteerPrimaryBucketMessage NULL recipient");
+
+    ReplyProcessor21 response = new ReplyProcessor21(pr.getSystem(), acceptedMembers);
+    EndBucketCreationMessage msg =
+        new EndBucketCreationMessage(acceptedMembers, pr.getPRId(), response, bid, newPrimary);
-  public EndBucketCreationMessage(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public EndBucketCreationMessage(DataInput in) throws IOException, ClassNotFoundException {
-    // use the waiting pool because operateOnPartitionedRegion will 
+    // use the waiting pool because operateOnPartitionedRegion will
-  
+
-                                                     PartitionedRegion region, 
-                                                     long startTime) 
-                                              throws ForceReattemptException {
-    
+      PartitionedRegion region, long startTime) throws ForceReattemptException {
+
-    
+
-    
+
-    
+
-  public void fromData(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
