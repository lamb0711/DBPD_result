Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A <code>ThreadGroup</code> that logs all {@linkplain
- * #uncaughtException uncaught exceptions} to a GemFire
- * <code>LogWriterI18n</code>.   It also keeps track of the uncaught
- * exceptions that were thrown by its threads.  This is comes in
- * handy when a thread fails to initialize properly (see bug
+ * A <code>ThreadGroup</code> that logs all {@linkplain #uncaughtException uncaught exceptions} to a
+ * GemFire <code>LogWriterI18n</code>. It also keeps track of the uncaught exceptions that were
+ * thrown by its threads. This is comes in handy when a thread fails to initialize properly (see bug
-  private static final StandardErrorPrinter stderr = new StandardErrorPrinter(InternalLogWriter.ALL_LEVEL);
-  
+  private static final StandardErrorPrinter stderr =
+      new StandardErrorPrinter(InternalLogWriter.ALL_LEVEL);
+
-  private static final Collection<LoggingThreadGroup> loggingThreadGroups = new ArrayList<LoggingThreadGroup>();
+  private static final Collection<LoggingThreadGroup> loggingThreadGroups =
+      new ArrayList<LoggingThreadGroup>();
-   * Returns a <code>ThreadGroup</code> whose {@link
-   * ThreadGroup#uncaughtException} method logs to both {#link
-   * System#err} and the given <code>InternalLogWriter</code>.
+   * Returns a <code>ThreadGroup</code> whose {@link ThreadGroup#uncaughtException} method logs to
+   * both {#link System#err} and the given <code>InternalLogWriter</code>.
-   * @param name
-   *        The name of the <code>ThreadGroup</code>
+   * @param name The name of the <code>ThreadGroup</code>
-  
+
-   * Returns a <code>ThreadGroup</code> whose {@link
-   * ThreadGroup#uncaughtException} method logs to both {#link
-   * System#err} and the given <code>InternalLogWriter</code>.
+   * Returns a <code>ThreadGroup</code> whose {@link ThreadGroup#uncaughtException} method logs to
+   * both {#link System#err} and the given <code>InternalLogWriter</code>.
-   * @param name
-   *        The name of the <code>ThreadGroup</code>
-   * @param logWriter
-   *        A <code>InternalLogWriter</code> to log uncaught exceptions to.  It
-   *        is okay for this argument to be <code>null</code>.
+   * @param name The name of the <code>ThreadGroup</code>
+   * @param logWriter A <code>InternalLogWriter</code> to log uncaught exceptions to. It is okay for
+   *        this argument to be <code>null</code>.
-   * author David Whitlock
+   *        author David Whitlock
-                                                     final InternalLogWriter logWriter) {
+      final InternalLogWriter logWriter) {
-      for (Iterator<LoggingThreadGroup> iter = loggingThreadGroups.iterator(); iter.hasNext(); ) {
+      for (Iterator<LoggingThreadGroup> iter = loggingThreadGroups.iterator(); iter.hasNext();) {
-          //  thread groups for different loggers leaks groups for repeated
-          //  connect/disconnects as in dunits for example)
+          // thread groups for different loggers leaks groups for repeated
+          // connect/disconnects as in dunits for example)
-   * Returns a <code>ThreadGroup</code> whose {@link
-   * ThreadGroup#uncaughtException} method logs to both {#link
-   * System#err} and the given <code>InternalLogWriter</code>.
+   * Returns a <code>ThreadGroup</code> whose {@link ThreadGroup#uncaughtException} method logs to
+   * both {#link System#err} and the given <code>InternalLogWriter</code>.
-   * @param name
-   *        The name of the <code>ThreadGroup</code>
-   * @param logger
-   *        A <code>InternalLogWriter</code> to log uncaught exceptions to.  It
-   *        is okay for this argument to be <code>null</code>.
+   * @param name The name of the <code>ThreadGroup</code>
+   * @param logger A <code>InternalLogWriter</code> to log uncaught exceptions to. It is okay for
+   *        this argument to be <code>null</code>.
-   * author David Whitlock
+   *        author David Whitlock
-  public static LoggingThreadGroup createThreadGroup(final String name,
-                                                     final Logger logger) {
+  public static LoggingThreadGroup createThreadGroup(final String name, final Logger logger) {
-      for (Iterator<LoggingThreadGroup> iter = loggingThreadGroups.iterator(); iter.hasNext(); ) {
+      for (Iterator<LoggingThreadGroup> iter = loggingThreadGroups.iterator(); iter.hasNext();) {
-          //  thread groups for different loggers leaks groups for repeated
-          //  connect/disconnects as in dunits for example)
+          // thread groups for different loggers leaks groups for repeated
+          // connect/disconnects as in dunits for example)
-//  /**
-//   * @deprecated Only for use by hydra for backwards compatability reasons.
-//   * Returns a <code>ThreadGroup</code> whose {@link
-//   * ThreadGroup#uncaughtException} method logs to both {#link
-//   * System#err} and the given <code>LogWriterI18n</code>.
-//   *
-//   * @param name
-//   *        The name of the <code>ThreadGroup</code>
-//   * @param logger
-//   *        A <code>LogWriter</code> to log uncaught exceptions to.  It
-//   *        is okay for this argument to be <code>null</code>.
-//   *
-//   * author kbanks 
-//   * @since GemFire 6.0
-//   */
-//  @Deprecated public static LoggingThreadGroup createThreadGroup(final String name,
-//                                                                 final LogWriter logger) {
-//    return createThreadGroup(name,
-//        logger != null ? logger.convertToLogWriterI18n() : null);
-//  }
+  // /**
+  // * @deprecated Only for use by hydra for backwards compatability reasons.
+  // * Returns a <code>ThreadGroup</code> whose {@link
+  // * ThreadGroup#uncaughtException} method logs to both {#link
+  // * System#err} and the given <code>LogWriterI18n</code>.
+  // *
+  // * @param name
+  // * The name of the <code>ThreadGroup</code>
+  // * @param logger
+  // * A <code>LogWriter</code> to log uncaught exceptions to. It
+  // * is okay for this argument to be <code>null</code>.
+  // *
+  // * author kbanks
+  // * @since GemFire 6.0
+  // */
+  // @Deprecated public static LoggingThreadGroup createThreadGroup(final String name,
+  // final LogWriter logger) {
+  // return createThreadGroup(name,
+  // logger != null ? logger.convertToLogWriterI18n() : null);
+  // }
-        group = (LoggingThreadGroup)itr.next();
-        if (!group.getName().equals(
-            InternalDistributedSystem.SHUTDOWN_HOOK_NAME)
-            && !group.getName()
-                .equals("GemFireConnectionFactory Shutdown Hook")) {
+        group = (LoggingThreadGroup) itr.next();
+        if (!group.getName().equals(InternalDistributedSystem.SHUTDOWN_HOOK_NAME)
+            && !group.getName().equals("GemFireConnectionFactory Shutdown Hook")) {
-      for (Object object: loggingThreadGroups) {
-        LoggingThreadGroup threadGroup = (LoggingThreadGroup)object;
+      for (Object object : loggingThreadGroups) {
+        LoggingThreadGroup threadGroup = (LoggingThreadGroup) object;
-  
-  /** A log writer that the user has specified for logging uncaught
-   * exceptions. */
+
+  /**
+   * A log writer that the user has specified for logging uncaught exceptions.
+   */
-  /** A logger that the user has specified for logging uncaught
-   * exceptions. */
+  /**
+   * A logger that the user has specified for logging uncaught exceptions.
+   */
-  /** The count uncaught exceptions that were thrown by threads in this
-   * thread group. */
+  /**
+   * The count uncaught exceptions that were thrown by threads in this thread group.
+   */
-   * Creates a new <code>LoggingThreadGroup</code> that logs
-   * uncaught exceptions to the given log writer.
+   * Creates a new <code>LoggingThreadGroup</code> that logs uncaught exceptions to the given log
+   * writer.
-   * @param name
-   *        The name of the thread group
-   * @param logWriter
-   *        A logWriter to which uncaught exceptions are logged.  May
-   *        be <code>null</code>.
+   * @param name The name of the thread group
+   * @param logWriter A logWriter to which uncaught exceptions are logged. May be <code>null</code>.
-  
+
-   * Creates a new <code>LoggingThreadGroup</code> that logs
-   * uncaught exceptions to the given logger.
+   * Creates a new <code>LoggingThreadGroup</code> that logs uncaught exceptions to the given
+   * logger.
-   * @param name
-   *        The name of the thread group
-   * @param logger
-   *        A logger to which uncaught exceptions are logged.  May
-   *        be <code>null</code>.
+   * @param name The name of the thread group
+   * @param logger A logger to which uncaught exceptions are logged. May be <code>null</code>.
-  
+
-    synchronized(this.dispatchLock) {
+    synchronized (this.dispatchLock) {
-        SystemFailure.setFailure((VirtualMachineError)ex); // don't throw
+        SystemFailure.setFailure((VirtualMachineError) ex); // don't throw
-      String threadName = t.getName();  
-      if ((ex instanceof NoClassDefFoundError) 
-          && (threadName.equals(InternalDistributedSystem.SHUTDOWN_HOOK_NAME)))
-      {
-        final StringId msg = LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0_THIS_MESSAGE_CAN_BE_DISREGARDED_IF_IT_OCCURED_DURING_AN_APPLICATION_SERVER_SHUTDOWN_THE_EXCEPTION_MESSAGE_WAS_1;
+      String threadName = t.getName();
+      if ((ex instanceof NoClassDefFoundError)
+          && (threadName.equals(InternalDistributedSystem.SHUTDOWN_HOOK_NAME))) {
+        final StringId msg =
+            LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0_THIS_MESSAGE_CAN_BE_DISREGARDED_IF_IT_OCCURED_DURING_AN_APPLICATION_SERVER_SHUTDOWN_THE_EXCEPTION_MESSAGE_WAS_1;
-      } else { 
+      } else {
-          this.logger.fatal(LocalizedMessage.create(LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0, t), ex);
+          this.logger.fatal(
+              LocalizedMessage.create(LocalizedStrings.UNCAUGHT_EXCEPTION_IN_THREAD_0, t), ex);
-      //if (!(ex instanceof RuntimeException) && (ex instanceof Exception)) {
+      // if (!(ex instanceof RuntimeException) && (ex instanceof Exception)) {
-      //  this.logger.severe("stack trace showing origin of uncaught checked exception", new Exception("stack trace"));
-      //}
+      // this.logger.severe("stack trace showing origin of uncaught checked exception", new
+      // Exception("stack trace"));
+      // }
-    synchronized(this.dispatchLock) {
+    synchronized (this.dispatchLock) {
-   * Returns the number of uncaught exceptions that occurred in threads in
-   * this thread group.
+   * Returns the number of uncaught exceptions that occurred in threads in this thread group.
-    synchronized(this.dispatchLock) {
+    synchronized (this.dispatchLock) {
-  
+
-   * clean up the threadgroup, releasing resources that could be problematic
-   * (bug 35388)
+   * clean up the threadgroup, releasing resources that could be problematic (bug 35388)
+   * 
