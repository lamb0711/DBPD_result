Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The first time someone asks this instance for its Object it will deserialize
- * the bytes and from then on keep a reference to the deserialized form.
- * So it "prefers deserialization".
+ * The first time someone asks this instance for its Object it will deserialize the bytes and from
+ * then on keep a reference to the deserialized form. So it "prefers deserialization".
-  
+
-   * +PER_OBJECT_OVERHEAD for VMCachedDeserializable object
-   * +4 for value field
-   * +4 for valueSize field
+   * +PER_OBJECT_OVERHEAD for VMCachedDeserializable object +4 for value field +4 for valueSize
+   * field
+
-  public VMCachedDeserializable() {
-  }
-  /** 
+  public VMCachedDeserializable() {}
+
+  /**
-   * Note that, in general, instances of this class should be obtained
-   * via {@link CachedDeserializableFactory}.
+   * Note that, in general, instances of this class should be obtained via
+   * {@link CachedDeserializableFactory}.
-      throw new NullPointerException(LocalizedStrings.VMCachedDeserializable_VALUE_MUST_NOT_BE_NULL.toLocalizedString());
+      throw new NullPointerException(
+          LocalizedStrings.VMCachedDeserializable_VALUE_MUST_NOT_BE_NULL.toLocalizedString());
-   * Create a new instance with an object and it's size.
-   * Note the caller decides if objectSize is the memory size or the serialized size.
+   * Create a new instance with an object and it's size. Note the caller decides if objectSize is
+   * the memory size or the serialized size.
+   * 
-  
+
-//       org.apache.geode.internal.cache.GemFireCache.getInstance().getLogger().info("DEBUG getDeserializedValue r=" + r + " re=" + re, new RuntimeException("STACK"));
+      // org.apache.geode.internal.cache.GemFireCache.getInstance().getLogger().info("DEBUG
+      // getDeserializedValue r=" + r + " re=" + re, new RuntimeException("STACK"));
-          le = (LRUEntry)re;
+          le = (LRUEntry) re;
-          r = ((PartitionedRegion)r).getBucketRegion(re.getKey());
+          r = ((PartitionedRegion) r).getBucketRegion(re.getKey());
-          lruMap = (AbstractLRURegionMap)((LocalRegion)r).getRegionMap();
+          lruMap = (AbstractLRURegionMap) ((LocalRegion) r).getRegionMap();
-          if (!(v instanceof byte[])) return v;
-          v = EntryEventImpl.deserialize((byte[])v);
+          if (!(v instanceof byte[]))
+            return v;
+          v = EntryEventImpl.deserialize((byte[]) v);
-          if (!(v instanceof byte[])) return v;
-          v = EntryEventImpl.deserialize((byte[])v);
+          if (!(v instanceof byte[]))
+            return v;
+          v = EntryEventImpl.deserialize((byte[]) v);
-          //           ObjectSizer os = null;
-          //           if (r != null) {
-          //             EvictionAttributes ea = r.getAttributes().getEvictionAttributes();
-          //             if (ea != null) {
-          //               os = ea.getObjectSizer();
-          //             }
-          //             int vSize = CachedDeserializableFactory.calcMemSize(v, os, false, false);
-          //             if (vSize != -1) {
-          //               int oldSize = this.valueSize;
-          //               this.valueSize = vSize;
-          //               if (r instanceof BucketRegion) {
-          //                 BucketRegion br = (BucketRegion)r;
-          //                 br.updateBucketMemoryStats(vSize - oldSize);
-          //               }
-          //               // @todo do we need to update some lru stats since the size changed?
-          //             }
-          //             // If vSize == -1 then leave valueSize as is which is the serialized size.
+          // ObjectSizer os = null;
+          // if (r != null) {
+          // EvictionAttributes ea = r.getAttributes().getEvictionAttributes();
+          // if (ea != null) {
+          // os = ea.getObjectSizer();
+          // }
+          // int vSize = CachedDeserializableFactory.calcMemSize(v, os, false, false);
+          // if (vSize != -1) {
+          // int oldSize = this.valueSize;
+          // this.valueSize = vSize;
+          // if (r instanceof BucketRegion) {
+          // BucketRegion br = (BucketRegion)r;
+          // br.updateBucketMemoryStats(vSize - oldSize);
+          // }
+          // // @todo do we need to update some lru stats since the size changed?
+          // }
+          // // If vSize == -1 then leave valueSize as is which is the serialized size.
-  }  
+  }
+
-      return EntryEventImpl.deserialize((byte[])v);
+      return EntryEventImpl.deserialize((byte[]) v);
+
-      Object result =  EntryEventImpl.deserialize((byte[])v);
-      if (CopyHelper.isWellKnownImmutableInstance(result)
-          && !(result instanceof PdxInstance)) {
+      Object result = EntryEventImpl.deserialize((byte[]) v);
+      if (CopyHelper.isWellKnownImmutableInstance(result) && !(result instanceof PdxInstance)) {
- 
+
-      return (byte[])v;
+      return (byte[]) v;
-   * Return current value regardless of whether it is serialized or
-   * deserialized: if it was serialized than it is a byte[], otherwise
-   * it is not a byte[].
+   * Return current value regardless of whether it is serialized or deserialized: if it was
+   * serialized than it is a byte[], otherwise it is not a byte[].
-  
+
-    return cname.substring(getClass().getPackage().getName().length()+1);
+    return cname.substring(getClass().getPackage().getName().length() + 1);
-    return getShortClassName()+"@"+this.hashCode();
+    return getShortClassName() + "@" + this.hashCode();
-  
-  public void fillSerializedValue(BytesAndBitsForCompactor wrapper, byte userBits)
-  {
-    Object v = this.value;    
-    if (v instanceof byte[]) {     
-      wrapper.setData((byte[])v, userBits, ((byte[])v).length, false /* Not Reusable as it refers to underlying value*/);
-    }else {
+
+  public void fillSerializedValue(BytesAndBitsForCompactor wrapper, byte userBits) {
+    Object v = this.value;
+    if (v instanceof byte[]) {
+      wrapper.setData((byte[]) v, userBits, ((byte[]) v).length,
+          false /* Not Reusable as it refers to underlying value */);
+    } else {
-    
+
+
+
+
+
