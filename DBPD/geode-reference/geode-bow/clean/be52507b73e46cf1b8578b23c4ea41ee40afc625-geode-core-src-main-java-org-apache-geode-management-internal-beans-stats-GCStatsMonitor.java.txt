GEODE-5314: Cleanup and document MBeanStatsMonitor child classes

- Fixed minor warnings.
- Added JUnit Tests for all modified classes.
- There's only one thread updating the mutable values so it's been
  decided to keep volatiles instead of moving to atomics.
- Documentation improved to better explain the thread-safety of the
  classes.
+import org.apache.geode.distributed.ConfigurationProperties;
+/**
+ * This class acts as a monitor and listen for GC statistics updates on behalf of MemberMBean.
+ * <p>
+ * There's only one dedicated thread that wakes up at the
+ * {@link ConfigurationProperties#STATISTIC_SAMPLE_RATE} configured, samples all the statistics,
+ * writes them to the {@link ConfigurationProperties#STATISTIC_ARCHIVE_FILE} configured (if any) and
+ * notifies listeners of changes. The mutable fields are declared as {@code volatile} to make sure
+ * readers of the statistics get the latest recorded value.
+ * <p>
+ * This class is conditionally thread-safe, there can be multiple concurrent readers accessing a
+ * instance, but concurrent writers need to be synchronized externally.
+ *
+ * @see org.apache.geode.internal.statistics.HostStatSampler
+ * @see org.apache.geode.distributed.ConfigurationProperties
+ * @see org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor
+ */
-
-
+  long getCollections() {
+    return collections;
+  }
+
+  long getCollectionTime() {
+    return collectionTime;
+  }
+  void decreasePrevValues(DefaultHashMap statsMap) {
+    collections -= statsMap.get(StatsKey.VM_GC_STATS_COLLECTIONS).longValue();
+    collectionTime -= statsMap.get(StatsKey.VM_GC_STATS_COLLECTION_TIME).longValue();
+  }
+
+  void increaseStats(String name, Number value) {
+    if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {
+      collections += value.longValue();
+      return;
+    }
+
+    if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {
+      collectionTime += value.longValue();
+      return;
+    }
+  }
+
+
+
-
+
+
+
-
-  private void decreasePrevValues(DefaultHashMap statsMap) {
-    collections -= statsMap.get(StatsKey.VM_GC_STATS_COLLECTIONS).intValue();
-    collectionTime -= statsMap.get(StatsKey.VM_GC_STATS_COLLECTION_TIME).intValue();
-  }
-
-  private void increaseStats(String name, Number value) {
-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {
-      collections += value.longValue();
-      return;
-    }
-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {
-      collectionTime += value.longValue();
-      return;
-    }
-  }
-
-  public long getCollections() {
-    return collections;
-  }
-
-  public long getCollectionTime() {
-    return collectionTime;
-  }
