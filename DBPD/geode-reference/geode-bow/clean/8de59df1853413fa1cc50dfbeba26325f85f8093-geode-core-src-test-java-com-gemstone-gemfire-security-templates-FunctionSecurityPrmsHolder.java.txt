GEODE-949: refactor and repackage security test code

* move test security classes from security package to com.gemstone.gemfire.security.generator
* move test security resources from lib package to com.gemstone.gemfire.security.generator
* move test security classes from templates.security package to com.gemstone.gemfire.security.templates
* fix places where security code ate exceptions
* fix up javadocs
* reformat and refactor code to be more readable and follow standards

-package templates.security;
+package com.gemstone.gemfire.security.templates;
-import java.util.HashSet;
+import java.util.Set;
- * function names and authorized value for the optimizeForWrite.
+ * function names and authorized value for the {@code optimizeForWrite}.
- * @author Aneesh Karayil
-  private final Boolean isOptimizeForWrite;
+  private final Boolean optimizeForWrite;
+  private final Set<String> functionIds;
+  private final Set<String> keySet;
-  private final HashSet<String> functionIds;
-
-  private final HashSet<String> keySet;
-
-  public FunctionSecurityPrmsHolder(Boolean isOptimizeForWrite,
-      HashSet<String> functionIds, HashSet<String> keySet) {
-    this.isOptimizeForWrite = isOptimizeForWrite;
+  public FunctionSecurityPrmsHolder(final Boolean optimizeForWrite, final Set<String> functionIds, final Set<String> keySet) {
+    this.optimizeForWrite = optimizeForWrite;
-    return isOptimizeForWrite;
+    return this.optimizeForWrite;
-  public HashSet<String> getFunctionIds() {
-    return functionIds;
+  public Set<String> getFunctionIds() {
+    return this.functionIds;
-  public HashSet<String> getKeySet() {
-    return keySet;
+  public Set<String> getKeySet() {
+    return this.keySet;
