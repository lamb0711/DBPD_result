GEODE-6459:  add create jdbc-mapping option to specify the PDX class file (#3249)

Added a new --pdx-class-file option to gfsh create jdbc-mapping that can take a jar or class that contains the named pdx class.
This file needs to be accessible by the gfsh process. It will be transferred to the server and used to define the pdx info in the jdbc-mapping.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>

+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import com.healthmarketscience.rmiio.RemoteInputStream;
+import com.healthmarketscience.rmiio.SimpleRemoteInputStream;
+import com.healthmarketscience.rmiio.exporter.RemoteStreamExporter;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.internal.ManagementAgent;
+import org.apache.geode.management.internal.SystemManagementService;
+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+import org.apache.geode.management.internal.cli.remote.CommandExecutionContext;
+import org.apache.geode.management.internal.cli.result.FileResult;
+import org.apache.geode.management.internal.cli.result.ModelCommandResult;
+import org.apache.geode.management.internal.cli.result.ResultBuilder;
+  private static final String CREATE_MAPPING__PDX_CLASS_FILE = MappingConstants.PDX_CLASS_FILE;
+  private static final String CREATE_MAPPING__PDX_CLASS_FILE__HELP =
+      "The file that contains the PDX class. It must be a file with the \".jar\" or \".class\" extension. By default, the PDX class must be on the server's classpath or gfsh deployed.";
-  @CliMetaData(relatedTopic = CliStrings.DEFAULT_TOPIC_GEODE)
+  @CliMetaData(
+      interceptor = "org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommand$Interceptor",
+      relatedTopic = {CliStrings.DEFAULT_TOPIC_GEODE})
+      @CliOption(key = CREATE_MAPPING__PDX_CLASS_FILE,
+          help = CREATE_MAPPING__PDX_CLASS_FILE__HELP) String pdxClassFile,
-          help = CREATE_MAPPING__GROUPS_NAME__HELP) String[] groups) {
+          help = CREATE_MAPPING__GROUPS_NAME__HELP) String[] groups)
+      throws IOException {
+    String tempPdxClassFilePath = null;
+    String remoteInputStreamName = null;
+    RemoteInputStream remoteInputStream = null;
+    if (pdxClassFile != null) {
+      List<String> pdxClassFilePaths = getFilePathFromShell();
+      if (pdxClassFilePaths.size() != 1) {
+        throw new IllegalStateException(
+            "Expected only one element in the list returned by getFilePathFromShell, but it returned: "
+                + pdxClassFilePaths);
+      }
+      tempPdxClassFilePath = pdxClassFilePaths.get(0);
+    }
+
-    CliFunctionResult preconditionCheckResult =
-        executeFunctionAndGetFunctionResult(new CreateMappingPreconditionCheckFunction(), mapping,
-            targetMembers.iterator().next());
+    if (pdxClassFile != null) {
+      ManagementAgent agent =
+          ((SystemManagementService) getManagementService()).getManagementAgent();
+      RemoteStreamExporter exporter = agent.getRemoteStreamExporter();
+      remoteInputStreamName = FilenameUtils.getName(tempPdxClassFilePath);
+      remoteInputStream =
+          exporter.export(createSimpleRemoteInputStream(tempPdxClassFilePath));
+    }
+
+    CliFunctionResult preconditionCheckResult = null;
+    try {
+      preconditionCheckResult =
+          executeFunctionAndGetFunctionResult(new CreateMappingPreconditionCheckFunction(),
+              new Object[] {mapping, remoteInputStreamName, remoteInputStream},
+              targetMembers.iterator().next());
+    } finally {
+      if (remoteInputStream != null) {
+        try {
+          remoteInputStream.close(true);
+        } catch (IOException ex) {
+          // Ignored. the stream may have already been closed.
+        }
+      }
+    }
+  SimpleRemoteInputStream createSimpleRemoteInputStream(String tempPdxClassFilePath)
+      throws FileNotFoundException {
+    return new SimpleRemoteInputStream(new FileInputStream(tempPdxClassFilePath));
+  }
+
+
+  /**
+   * Interceptor used by gfsh to intercept execution of create jdbc-mapping command at "shell".
+   */
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      String pdxClassFileName = (String) parseResult.getParamValue(CREATE_MAPPING__PDX_CLASS_FILE);
+
+      if (StringUtils.isBlank(pdxClassFileName)) {
+        return new ModelCommandResult(ResultModel.createInfo(""));
+      }
+
+      FileResult fileResult = new FileResult();
+      File pdxClassFile = new File(pdxClassFileName);
+      if (!pdxClassFile.exists()) {
+        return ResultBuilder.createUserErrorResult(pdxClassFile + " not found.");
+      }
+      if (!pdxClassFile.isFile()) {
+        return ResultBuilder.createUserErrorResult(pdxClassFile + " is not a file.");
+      }
+      String fileExtension = FilenameUtils.getExtension(pdxClassFileName);
+      if (!fileExtension.equalsIgnoreCase("jar") && !fileExtension.equalsIgnoreCase("class")) {
+        return ResultBuilder
+            .createUserErrorResult(pdxClassFile + " must end with \".jar\" or \".class\".");
+      }
+      fileResult.addFile(pdxClassFile);
+
+      return fileResult;
+    }
+  }
+
+  // For testing purpose
+  List<String> getFilePathFromShell() {
+    return CommandExecutionContext.getFilePathFromShell();
+  }
+
