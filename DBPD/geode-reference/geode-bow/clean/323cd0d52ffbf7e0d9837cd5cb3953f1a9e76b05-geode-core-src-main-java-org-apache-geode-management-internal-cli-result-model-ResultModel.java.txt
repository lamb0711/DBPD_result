GEODE-5971: Remove FileResult (#3487)


-  // this is used by commands (e.g. ExportConfigCommand) saving the file content in the memory and
-  // transfer the byte[] in json string back to the client
-  private Map<String, FileResultModel> files = new LinkedHashMap<>();
-
-  // this is used by commands (e.g ExportlogsCommand) that can download file to the client when in
-  // http connection
-  private Path fileToDownload;
+  private List<FileResultModel> files = new ArrayList<>();
-  public Map<String, FileResultModel> getFiles() {
+  public List<FileResultModel> getFiles() {
-  public void setFiles(Map<String, FileResultModel> files) {
+  public void setFiles(List<FileResultModel> files) {
+  /**
+   * @param fileName: only the name part of the file, no directory infomation
+   * @param content: the content to be saved to the file
+   */
-    files.put(fileName, fileModel);
+    files.add(fileModel);
-    files.put(file.getName(), new FileResultModel(file, fileType));
-  }
-
-  public Path getFileToDownload() {
-    return fileToDownload;
-  }
-
-  public void setFileToDownload(Path fileToDownload) {
-    this.fileToDownload = fileToDownload;
+    files.add(new FileResultModel(file, fileType));
-
-
+   * this only applies to the commands that saves the file content in byte[], not download the
+   * files over http channel
-    if (getFiles().size() == 0 || dir == null) {
+    InfoResultModel info = addInfo("fileSave");
+    if (files.size() == 0) {
+      info.addLine("No file found to be saved.");
+      setStatus(Result.Status.ERROR);
-    InfoResultModel info = addInfo("fileSave");
+
-    for (FileResultModel fileResult : files.values()) {
+    for (FileResultModel fileResult : files) {
+
+  }
+
+  @JsonIgnore
+  public Path getFileToDownload() {
+    if (files.size() != 1) {
+      return null;
+    }
+    File file = files.get(0).getFile();
+    if (file == null) {
+      return null;
+    }
+    return file.toPath();
+  }
+
+  @JsonIgnore
+  public List<File> getFileList() {
+    return files.stream().filter(f -> f.getFile() != null).map(FileResultModel::getFile)
+        .collect(
+            Collectors.toList());
+  }
+
+  /**
+   * Calculates the total file size of all files associated with this result.
+   *
+   * @return Total file size.
+   */
+  public long computeFileSizeTotal() {
+    long byteCount = 0;
+    for (FileResultModel file : files) {
+      byteCount += file.getLength();
+    }
+    return byteCount;
+  }
+
+  /**
+   * Get a comma separated list of all files associated with this result.
+   *
+   * @return Comma separated list of files.
+   */
+  @JsonIgnore
+  public String getFormattedFileList() {
+    return files.stream().map(FileResultModel::getFilename)
+        .collect(Collectors.joining(", "));
