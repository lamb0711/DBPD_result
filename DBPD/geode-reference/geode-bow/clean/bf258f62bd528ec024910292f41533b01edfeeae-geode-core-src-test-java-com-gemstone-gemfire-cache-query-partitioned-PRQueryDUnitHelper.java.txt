GEODE-1276: Change UnitTests file system to IntegrationTest category
GEODE-1307: Rename HeterogenousLuceneSerializer to HeterogeneousLuceneSerializer
GEODE-1279: Tests for old TRAC bugs should be renamed to useful name

* convert UnitTests to use JUnit 4 syntax
* convert UnitTests to use Rules
* remove empty javadoc blocks and lines
* separate some UnitTests from IntegrationTests (ie split one test into two tests)
* fix up formatting problems
* improve testability of ClassPathLoader
* rename some tests from old TRAC #s to meaningful names
* remove empty unnecessary methods and deadcode
* add @Override annotations
* reduce scope of variables and methods where possible

-import java.io.BufferedWriter;
-import java.io.FileWriter;
-import java.io.IOException;
+import util.TestException;
+
-import util.TestException;
-
+                //assertIndexDetailsEquals("The resultset size is not same as limit size.", l*l, srr.asList().size());
+
+//                getCache().getLogger().info("Finished executing PR query: " + qStr);
+            /*List bucketIndex = ind.getBucketIndexes();
+            int k = 0;
+            logger.info("Total number of bucket index : "+bucketIndex.size());
+            while ( k < bucketIndex.size() ){
+              Index bukInd = (Index)bucketIndex.get(k);
+              logger.info("Buket Index "+bukInd+"  usage : "+bukInd.getStatistics().getTotalUses());
+              // if number of quries on pr change in getCacheSerializableRunnableForPRQueryAndCompareResults
+              // literal 6  should change.
+              //Asif :  With the optmization of Range Queries a where clause
+              // containing something like ID > 4 AND ID < 9 will be evaluated 
+              //using a single index lookup, so accordingly modifying the 
+              //assert value from 7 to 6
+              // Anil : With aquiringReadLock during Index.getSizeEstimate(), the
+              // Index usage in case of "ID = 0 OR ID = 1" is increased by 3.
+              int indexUsageWithSizeEstimation = 3;
+              int expectedUse = 6;
+              long indexUse = bukInd.getStatistics().getTotalUses();
+              // Anil : With chnages to use single index for PR query evaluation, once the index
+              // is identified the same index is used on other PR buckets, the sieEstimation is
+              // done only once, which adds additional index use for only one bucket index.
+              if (!(indexUse == expectedUse || indexUse == (expectedUse + indexUsageWithSizeEstimation))){
+                fail ("Index usage is not as expected, expected it to be either " + 
+                    expectedUse + " or " + (expectedUse + indexUsageWithSizeEstimation) + 
+                    " it is: " + indexUse);
+                //assertIndexDetailsEquals(6 + indexUsageWithSizeEstimation, bukInd.getStatistics().getTotalUses());
+              }
+              k++;
+            }*/
+            //Shobhit: Now we dont need to check stats per bucket index,
+            //stats are accumulated in single pr index stats.
+            
+            // Anil : With aquiringReadLock during Index.getSizeEstimate(), the
+            // Index usage in case of "ID = 0 OR ID = 1" is increased by 3.
+            int indexUsageWithSizeEstimation = 3;
+            
+          /*
+           * assertIndexDetailsEquals("Max num of buckets in the partiotion regions and
+           * the " + "buckets indexed should be equal",
+           * ((PartitionedRegion)region).getTotalNumberOfBuckets(),
+           * (((PartionedIndex)parIndex).getNumberOfIndexedBucket()+((PartionedIndex)parIndex).getNumRemtoeBucketsIndexed()));
+           * should put all the assetion in a seperate function.
+           */
