Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class <code>ClientInstantiatorMessage</code> represents a message that is
- * to be sent to the client from a server , when a new <code>Instantiator</code>.
- * object is registerd on Server. This message contains array of serailized
- * instantiators along with the unique <code>EventID</code>
+ * Class <code>ClientInstantiatorMessage</code> represents a message that is to be sent to the
+ * client from a server , when a new <code>Instantiator</code>. object is registerd on Server. This
+ * message contains array of serailized instantiators along with the unique <code>EventID</code>
-   * @param operation
-   *                The operation performed (e.g. AFTER_CREATE, AFTER_UPDATE,
-   *                AFTER_DESTROY, AFTER_INVALIDATE, AFTER_REGION_DESTROY)
-   * @param instantiator
-   *                Serialized 2D array of the instantiators
-   * @param memberId
-   *                membership id of the originator of the event
-   * @param eventIdentifier
-   *                EventID of this message
+   * @param operation The operation performed (e.g. AFTER_CREATE, AFTER_UPDATE, AFTER_DESTROY,
+   *        AFTER_INVALIDATE, AFTER_REGION_DESTROY)
+   * @param instantiator Serialized 2D array of the instantiators
+   * @param memberId membership id of the originator of the event
+   * @param eventIdentifier EventID of this message
-  public ClientInstantiatorMessage(EnumListenerEvent operation,
-      byte[][] instantiator, ClientProxyMembershipID memberId,
-      EventID eventIdentifier) {
+  public ClientInstantiatorMessage(EnumListenerEvent operation, byte[][] instantiator,
+      ClientProxyMembershipID memberId, EventID eventIdentifier) {
-  /* (non-Javadoc)
-   * reimplemented to state that all clients are interested in this message.
-   * @see org.apache.geode.internal.cache.tier.sockets.ClientUpdateMessageImpl#isClientInterested(org.apache.geode.internal.cache.tier.sockets.ClientProxyMembershipID)
+  /*
+   * (non-Javadoc) reimplemented to state that all clients are interested in this message.
+   * 
+   * @see
+   * org.apache.geode.internal.cache.tier.sockets.ClientUpdateMessageImpl#isClientInterested(org.
+   * apache.geode.internal.cache.tier.sockets.ClientProxyMembershipID)
-  
+
-//   /**
-//    * Returns the serialized value of Instantiators.
-//    * 
-//    * @return the serialized value of Instantiators
-//    */
-//   public byte[][] getInstantiators()
-//   {
-//     return this.serializedInstantiators;
-//   }
+  // /**
+  // * Returns the serialized value of Instantiators.
+  // *
+  // * @return the serialized value of Instantiators
+  // */
+  // public byte[][] getInstantiators()
+  // {
+  // return this.serializedInstantiators;
+  // }
-  public boolean shouldBeConflated()
-  {
+  public boolean shouldBeConflated() {
-  protected Message getMessage(CacheClientProxy proxy, byte[] latestValue) throws IOException
-  {
+  protected Message getMessage(CacheClientProxy proxy, byte[] latestValue) throws IOException {
-          "Unsupported client version for server-to-client message creation: "
-              + clientVersion);
+          "Unsupported client version for server-to-client message creation: " + clientVersion);
-      
+
-  protected Message getGFEMessage(ClientProxyMembershipID proxy,
-      byte[] latestValue, Version clientVersion) throws IOException {
+  protected Message getGFEMessage(ClientProxyMembershipID proxy, byte[] latestValue,
+      Version clientVersion) throws IOException {
-  
+
-   * @throws IOException
-   *                 If this serializer cannot write an object to
-   *                 <code>out</code>.
+   * @throws IOException If this serializer cannot write an object to <code>out</code>.
-   * @throws IOException
-   *                 If this serializer cannot read an object from
-   *                 <code>in</code>.
-   * @throws ClassNotFoundException
-   *                 If the class for an object being restored cannot be found.
+   * @throws IOException If this serializer cannot read an object from <code>in</code>.
+   * @throws ClassNotFoundException If the class for an object being restored cannot be found.
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    _eventIdentifier = (EventID)DataSerializer.readObject(in);
+    _eventIdentifier = (EventID) DataSerializer.readObject(in);
-  public Object getKeyToConflate()
-  {
+  public Object getKeyToConflate() {
-  public String getRegionToConflate()
-  {
+  public String getRegionToConflate() {
-  public Object getValueToConflate()
-  {
+  public Object getValueToConflate() {
-  public void setLatestValue(Object value)
-  {
-  }
-  
+  public void setLatestValue(Object value) {}
+
-  public String toString()
-  {
+  public String toString() {
-    buffer.append("ClientInstantiatorMessage[").append(";value=").append(
-        (Arrays.toString(this.serializedInstantiators))).append(";memberId=").append(
-        getMembershipId()).append(";eventId=").append(getEventId()).append(
-        ";notifyAll=").append("]");
+    buffer.append("ClientInstantiatorMessage[").append(";value=")
+        .append((Arrays.toString(this.serializedInstantiators))).append(";memberId=")
+        .append(getMembershipId()).append(";eventId=").append(getEventId()).append(";notifyAll=")
+        .append("]");
