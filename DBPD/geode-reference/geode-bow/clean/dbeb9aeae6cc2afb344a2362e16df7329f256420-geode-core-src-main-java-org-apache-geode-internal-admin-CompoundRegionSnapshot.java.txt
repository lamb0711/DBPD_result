Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Presents an amalgam snapshot of all the {@linkplain
- * org.apache.geode.cache.Region regions} in a distributed
- * system. 
+ * Presents an amalgam snapshot of all the {@linkplain org.apache.geode.cache.Region regions} in a
+ * distributed system.
-//   private String constraintClass;
-  
-  private long lastModifiedTime = 0L; //the lates modified time
-  private long lastAccessTime   = 0L; //the latest access time
-  private long numHits          = 0L; //sum of all hits
-  private long numMisses        = 0L; //sum of all misses
-  private float hitRatio        = 0f; //calculated from all
-  private long hitResponders    = 0;
-  private double hitRatioSum    = 0.0;
-//  private int entryCount        = 0; //largest entryCount
-//  private int subregionCount    = 0; //largest subregionCount
+  // private String constraintClass;
-  //private Map individuals          = new HashMap();
-  private Set allCapControllers    = new HashSet();
-  private Set allListeners         = new HashSet();
-  private Set allDataPolicies           = new HashSet();
-  private Set allRegionTtl         = new HashSet();
-  private Set allEntryTtl          = new HashSet();
-  private HashSet allCustomTtl     = new HashSet();
+  private long lastModifiedTime = 0L; // the lates modified time
+  private long lastAccessTime = 0L; // the latest access time
+  private long numHits = 0L; // sum of all hits
+  private long numMisses = 0L; // sum of all misses
+  private float hitRatio = 0f; // calculated from all
+  private long hitResponders = 0;
+  private double hitRatioSum = 0.0;
+  // private int entryCount = 0; //largest entryCount
+  // private int subregionCount = 0; //largest subregionCount
+
+  // private Map individuals = new HashMap();
+  private Set allCapControllers = new HashSet();
+  private Set allListeners = new HashSet();
+  private Set allDataPolicies = new HashSet();
+  private Set allRegionTtl = new HashSet();
+  private Set allEntryTtl = new HashSet();
+  private HashSet allCustomTtl = new HashSet();
-  private Set allEntryIdleTimeout  = new HashSet();
-  private HashSet allCustomIdle    = new HashSet();
-  private Set allScopes            = new HashSet();
-  private Set allUserAttributes    = new HashSet();
-  private Set allCacheLoaders      = new HashSet();
-  private Set allCacheWriters      = new HashSet();
-  private Set allLoadFactors       = new HashSet();
-  private Set allInitialCaps       = new HashSet();
-  private Set allConcLevels        = new HashSet();
-  private Set allStatsEnabled      = new HashSet();
-  private Set allKeyConstraints    = new HashSet();
-  private Set allValueConstraints    = new HashSet();
+  private Set allEntryIdleTimeout = new HashSet();
+  private HashSet allCustomIdle = new HashSet();
+  private Set allScopes = new HashSet();
+  private Set allUserAttributes = new HashSet();
+  private Set allCacheLoaders = new HashSet();
+  private Set allCacheWriters = new HashSet();
+  private Set allLoadFactors = new HashSet();
+  private Set allInitialCaps = new HashSet();
+  private Set allConcLevels = new HashSet();
+  private Set allStatsEnabled = new HashSet();
+  private Set allKeyConstraints = new HashSet();
+  private Set allValueConstraints = new HashSet();
-   * Creates a new <code>CompoundRegionSnapshot</code> for the region
-   * with the given name.
+   * Creates a new <code>CompoundRegionSnapshot</code> for the region with the given name.
-   * Amalgamates a <code>RegionSnapshot</code> into this
-   * <code>CompoundRegionSnapshot</code>. 
+   * Amalgamates a <code>RegionSnapshot</code> into this <code>CompoundRegionSnapshot</code>.
-   * @param systemEntity
-   *        The member of the distributed system that sent the
-   *        snapshot
-   * @param snap
-   *        The snapshot to be amalgamated
+   * @param systemEntity The member of the distributed system that sent the snapshot
+   * @param snap The snapshot to be amalgamated
-   * @throws IllegalArgumentException
-   *         If <code>snap</code> is for a <code>Region</code> other
-   *         than the one amalgamated by this snapshot.
+   * @throws IllegalArgumentException If <code>snap</code> is for a <code>Region</code> other than
+   *         the one amalgamated by this snapshot.
-      throw new IllegalArgumentException(LocalizedStrings.CompoundRegionSnapshot_ALL_SNAPSHOTS_IN_A_COMPOUND_SNAPSHOT_MUST_HAVE_THE_SAME_NAME.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.CompoundRegionSnapshot_ALL_SNAPSHOTS_IN_A_COMPOUND_SNAPSHOT_MUST_HAVE_THE_SAME_NAME
+              .toLocalizedString());
-    //individuals.put(systemEntity, snap);
+    // individuals.put(systemEntity, snap);
-      allScopes.add(ra.getScope());    
+      allScopes.add(ra.getScope());
-//       if (constraintClass == null) {
-//         Class clazz = ra.getKeyConstraint();
-//         if (clazz != null) {
-//           constraintClass = clazz.getName();
-//         }
-//       }
+      // if (constraintClass == null) {
+      // Class clazz = ra.getKeyConstraint();
+      // if (clazz != null) {
+      // constraintClass = clazz.getName();
+      // }
+      // }
-      this.hitRatio = (float)(hitRatioSum/hitResponders);      
+      this.hitRatio = (float) (hitRatioSum / hitResponders);
-  }  
+  }
-   * Returns the name of the <code>Region</code> whose information is
-   * amalgamated in this snapshot.
+   * Returns the name of the <code>Region</code> whose information is amalgamated in this snapshot.
-   * Since a compound snapshot does not have
-   * <code>RegionAttributes</code>, this method returns
+   * Since a compound snapshot does not have <code>RegionAttributes</code>, this method returns
-   * Since a compound snapshot does not have a
-   * <code>userAttributes</code>, this method returns
+   * Since a compound snapshot does not have a <code>userAttributes</code>, this method returns
-   * Since a compound snapshot does not really represent a
-   * <code>Region</code>, this method returns <code>false</code>.
+   * Since a compound snapshot does not really represent a <code>Region</code>, this method returns
+   * <code>false</code>.
-   * Returns an <code>Iterator</code> containing the
-   * <code>toString</code> of the <code>CacheWriter</code>s of each
-   * instance of this snapshot's <code>region</code>
+   * Returns an <code>Iterator</code> containing the <code>toString</code> of the
+   * <code>CacheWriter</code>s of each instance of this snapshot's <code>region</code>
-   * Returns an <code>Iterator</code> containing the
-   * <code>toString</code> of the <code>CacheLoader</code>s of each
-   * instance of this snapshot's <code>region</code>
+   * Returns an <code>Iterator</code> containing the <code>toString</code> of the
+   * <code>CacheLoader</code>s of each instance of this snapshot's <code>region</code>
-   * Returns an  {@link java.util.Iterator} of {@link org.apache.geode.cache.DataPolicy}
+   * Returns an {@link java.util.Iterator} of {@link org.apache.geode.cache.DataPolicy}
-  
+
-  
+
-   * Returns an <code>Iterator</code> containing the
-   * <code>toString</code> of the custom TTL CustomExpiry's of each
-   * instance of this snapshot's <code>region</code>
+   * Returns an <code>Iterator</code> containing the <code>toString</code> of the custom TTL
+   * CustomExpiry's of each instance of this snapshot's <code>region</code>
-  
+
-  
+
-  
+
-   * Returns an <code>Iterator</code> containing the
-   * <code>toString</code> of the custom idleTimeout CustomExpiry's of each
-   * instance of this snapshot's <code>region</code>
+   * Returns an <code>Iterator</code> containing the <code>toString</code> of the custom idleTimeout
+   * CustomExpiry's of each instance of this snapshot's <code>region</code>
+
-   * Returns an {@link java.util.Iterator} of <code>Boolean</code> -
-   * which may be silly
+   * Returns an {@link java.util.Iterator} of <code>Boolean</code> - which may be silly
-   * Returns an <code>Iterator</code> of the
-   * <code>userAttribute</code>s (as <code>Objects</code>s) over all
-   * instances of this snapshot's <code>Region</code>.
+   * Returns an <code>Iterator</code> of the <code>userAttribute</code>s (as <code>Objects</code>s)
+   * over all instances of this snapshot's <code>Region</code>.
-   * Returns an <code>Iterator</code> of the
-   * <code>keyConstraint</code>s (as <code>String</code>s) over all
-   * instances of this snapshot's <code>Region</code>.
+   * Returns an <code>Iterator</code> of the <code>keyConstraint</code>s (as <code>String</code>s)
+   * over all instances of this snapshot's <code>Region</code>.
-   * Returns an <code>Iterator</code> of the
-   * <code>valueConstraint</code>s (as <code>String</code>s) over all
-   * instances of this snapshot's <code>Region</code>.
+   * Returns an <code>Iterator</code> of the <code>valueConstraint</code>s (as <code>String</code>s)
+   * over all instances of this snapshot's <code>Region</code>.
-   * Returns the most recent <code>lastModifiedTime</code> of any
-   * instance of this snapshot's <code>Region</code> across the
-   * distributed system.
+   * Returns the most recent <code>lastModifiedTime</code> of any instance of this snapshot's
+   * <code>Region</code> across the distributed system.
-   * Returns the most recent <code>lastAccessTime</code> of any
-   * instance of this snapshot's <code>Region</code> across the
-   * distributed system.
+   * Returns the most recent <code>lastAccessTime</code> of any instance of this snapshot's
+   * <code>Region</code> across the distributed system.
-   * Returns the cumulative number of hits across all instances of the
-   * snapshot's <code>Region</code>.
+   * Returns the cumulative number of hits across all instances of the snapshot's
+   * <code>Region</code>.
-   * Returns the cumulative number of misses across all instances of
-   * this snapshot's <code>Region</code>.
+   * Returns the cumulative number of misses across all instances of this snapshot's
+   * <code>Region</code>.
-  
+
-   * Returns the aggregate hit ratio across all instances of this
-   * snapshot's <code>Region</code>.
+   * Returns the aggregate hit ratio across all instances of this snapshot's <code>Region</code>.
