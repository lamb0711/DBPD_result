GEODE-8095 Further rework of the RestoreRedundancy data objects for serialization (#5281)

* Converting a Duration to a Long because of Serialization
* Changes for per requests

-import java.time.Duration;
-  protected Map<String, RegionRedundancyStatus> zeroRedundancyRegions = new HashMap<>();
-  protected Map<String, RegionRedundancyStatus> underRedundancyRegions = new HashMap<>();
-  protected Map<String, RegionRedundancyStatus> satisfiedRedundancyRegions = new HashMap<>();
+  protected Map<String, RegionRedundancyStatus> zeroRedundancyRegionsResults = new HashMap<>();
+  protected Map<String, RegionRedundancyStatus> underRedundancyRegionsResults = new HashMap<>();
+  protected Map<String, RegionRedundancyStatus> satisfiedRedundancyRegionsResults = new HashMap<>();
-  protected Duration totalPrimaryTransferTime = Duration.ZERO;
+  protected long totalPrimaryTransferTime = 0;
+  private RegionRedundancyStatus regionResult;
+
+  public void setZeroRedundancyRegionsResults(
+      Map<String, RegionRedundancyStatus> zeroRedundancyRegionsResults) {
+    this.zeroRedundancyRegionsResults = zeroRedundancyRegionsResults;
+  }
+
+  public void setUnderRedundancyRegionsResults(
+      Map<String, RegionRedundancyStatus> underRedundancyRegionsResults) {
+    this.underRedundancyRegionsResults = underRedundancyRegionsResults;
+  }
+
+  public void setSatisfiedRedundancyRegionsResults(
+      Map<String, RegionRedundancyStatus> satisfiedRedundancyRegionsResults) {
+    this.satisfiedRedundancyRegionsResults = satisfiedRedundancyRegionsResults;
+  }
+
+  public void setTotalPrimaryTransfersCompleted(int totalPrimaryTransfersCompleted) {
+    this.totalPrimaryTransfersCompleted = totalPrimaryTransfersCompleted;
+  }
+
+  public void setTotalPrimaryTransferTime(long totalPrimaryTransferTime) {
+    this.totalPrimaryTransferTime = totalPrimaryTransferTime;
+  }
+
+  public void setRegionResult(RegionRedundancyStatus regionResult) {
+    this.regionResult = regionResult;
+  }
+
+
+  public RestoreRedundancyResultsImpl() {}
-    satisfiedRedundancyRegions.putAll(results.getSatisfiedRedundancyRegionResults());
-    underRedundancyRegions.putAll(results.getUnderRedundancyRegionResults());
-    zeroRedundancyRegions.putAll(results.getZeroRedundancyRegionResults());
+    satisfiedRedundancyRegionsResults.putAll(results.getSatisfiedRedundancyRegionResults());
+    underRedundancyRegionsResults.putAll(results.getUnderRedundancyRegionResults());
+    zeroRedundancyRegionsResults.putAll(results.getZeroRedundancyRegionResults());
-    totalPrimaryTransferTime =
-        totalPrimaryTransferTime.plus(results.getTotalPrimaryTransferTime());
+    totalPrimaryTransferTime += results.getTotalPrimaryTransferTime();
-        zeroRedundancyRegions.put(regionResult.getRegionName(), regionResult);
+        zeroRedundancyRegionsResults.put(regionResult.getRegionName(), regionResult);
-        underRedundancyRegions.put(regionResult.getRegionName(), regionResult);
+        underRedundancyRegionsResults.put(regionResult.getRegionName(), regionResult);
-        satisfiedRedundancyRegions.put(regionResult.getRegionName(), regionResult);
+        satisfiedRedundancyRegionsResults.put(regionResult.getRegionName(), regionResult);
-    boolean fullySatisfied = zeroRedundancyRegions.isEmpty() && underRedundancyRegions.isEmpty();
-
+    boolean fullySatisfied =
+        zeroRedundancyRegionsResults.isEmpty() && underRedundancyRegionsResults.isEmpty();
-    if (!zeroRedundancyRegions.isEmpty()) {
-      messages.add(getResultsMessage(zeroRedundancyRegions, NO_REDUNDANT_COPIES_FOR_REGIONS));
+    if (!zeroRedundancyRegionsResults.isEmpty()) {
+      messages
+          .add(getResultsMessage(zeroRedundancyRegionsResults, NO_REDUNDANT_COPIES_FOR_REGIONS));
-    if (!underRedundancyRegions.isEmpty()) {
-      messages.add(getResultsMessage(underRedundancyRegions, REDUNDANCY_NOT_SATISFIED_FOR_REGIONS));
+    if (!underRedundancyRegionsResults.isEmpty()) {
+      messages.add(
+          getResultsMessage(underRedundancyRegionsResults, REDUNDANCY_NOT_SATISFIED_FOR_REGIONS));
-    if (!satisfiedRedundancyRegions.isEmpty()) {
-      messages.add(getResultsMessage(satisfiedRedundancyRegions, REDUNDANCY_SATISFIED_FOR_REGIONS));
+    if (!satisfiedRedundancyRegionsResults.isEmpty()) {
+      messages.add(
+          getResultsMessage(satisfiedRedundancyRegionsResults, REDUNDANCY_SATISFIED_FOR_REGIONS));
-    messages.add(PRIMARY_TRANSFER_TIME + totalPrimaryTransferTime.toMillis());
+    messages.add(PRIMARY_TRANSFER_TIME + totalPrimaryTransferTime);
-    RegionRedundancyStatus result = satisfiedRedundancyRegions.get(regionName);
-    if (result == null) {
-      result = underRedundancyRegions.get(regionName);
+    regionResult = satisfiedRedundancyRegionsResults.get(regionName);
+    if (regionResult == null) {
+      regionResult = underRedundancyRegionsResults.get(regionName);
-    if (result == null) {
-      result = zeroRedundancyRegions.get(regionName);
+    if (regionResult == null) {
+      regionResult = zeroRedundancyRegionsResults.get(regionName);
-    return result;
+    return regionResult;
-    return zeroRedundancyRegions;
+    return zeroRedundancyRegionsResults;
-    return underRedundancyRegions;
+    return underRedundancyRegionsResults;
-    return satisfiedRedundancyRegions;
+    return satisfiedRedundancyRegionsResults;
-        new HashMap<>(satisfiedRedundancyRegions);
-    combinedResults.putAll(underRedundancyRegions);
-    combinedResults.putAll(zeroRedundancyRegions);
+        new HashMap<>(satisfiedRedundancyRegionsResults);
+    combinedResults.putAll(underRedundancyRegionsResults);
+    combinedResults.putAll(zeroRedundancyRegionsResults);
-  public Duration getTotalPrimaryTransferTime() {
+  public long getTotalPrimaryTransferTime() {
-        "zeroRedundancyRegions=" + zeroRedundancyRegions +
-        ", underRedundancyRegions=" + underRedundancyRegions +
-        ", satisfiedRedundancyRegions=" + satisfiedRedundancyRegions +
+        "zeroRedundancyRegions=" + zeroRedundancyRegionsResults +
+        ", underRedundancyRegions=" + underRedundancyRegionsResults +
+        ", satisfiedRedundancyRegions=" + satisfiedRedundancyRegionsResults +
