Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-  private boolean isOverFlowToDisk;
-  private boolean indexMaintenanceSynchronous = true;
+  private final boolean isOverFlowToDisk;
+  private final boolean offHeap;
+  private final boolean indexMaintenanceSynchronous;
+  public static boolean ENABLE_UPDATE_IN_PROGRESS_INDEX_CALCULATION = true;
+    this.offHeap = region.getAttributes().getOffHeap();
-    return queryStartTime <= SAFE_QUERY_TIME.get() - queryStartTime + lastModifiedTime;
+    return ENABLE_UPDATE_IN_PROGRESS_INDEX_CALCULATION && queryStartTime <= SAFE_QUERY_TIME.get() - queryStartTime + lastModifiedTime;
-          if (!getRegion().getAttributes().getIndexMaintenanceSynchronous()) {
+          if (!isIndexMaintenanceTypeSynchronous()) {
-        if(isOverFlowToDisk) {
+        if(isOverFlowRegion()) {
+        // OffHeap is not supported with range index.
+        if(isOffHeap()) {
+          if (!isIndexMaintenanceTypeSynchronous()) {
+            throw new UnsupportedOperationException(LocalizedStrings.DefaultQueryService_OFF_HEAP_INDEX_CREATION_IS_NOT_SUPPORTED_FOR_ASYNC_MAINTENANCE_THE_REGION_IS_0.toLocalizedString(region.getFullPath()));
+          } 
+          throw new UnsupportedOperationException(LocalizedStrings.DefaultQueryService_OFF_HEAP_INDEX_CREATION_IS_NOT_SUPPORTED_FOR_MULTIPLE_ITERATORS_THE_REGION_IS_0.toLocalizedString(region.getFullPath()));
+        }
-    if (indexMaintenanceSynchronous) {
+    if (isIndexMaintenanceTypeSynchronous()) {
+        // TODO OFFHEAP: this optimization (calling getValue to make sure it is faulted in to disk) has a performance problem.
+        // It also decompresses and deserializes the value and then throws that away. In the case of a heap region the deserialized
+        // value would be cached in a VMCachedDeserializable. But for compression and/or off-heap the decompression and/or deserialization
+        // this call does is lost and has to be done again. We could just add a method to RegionEntry that faults the value in without returning it.
+        // Even better (but more work): could we create a wrapper around RegionEntry that we create here to wrap "entry" and pass the wrapper to addIndexMapping?
+        // Any indexes that store a reference to the RegionEntry would need to ask the wrapper for the real one but any of them
+        // that want the value could get it from the wrapper. The first time the wrapper is asked for the value it could get it from
+        // the real RegionEntry it wraps and cache a reference to that value. I think that gives us the best of both worlds.
-    if (indexMaintenanceSynchronous) {
+    if (isIndexMaintenanceTypeSynchronous()) {
-    if (!indexMaintenanceSynchronous) updater.shutdown();
+    if (!isIndexMaintenanceTypeSynchronous()) updater.shutdown();
+  public boolean isOffHeap() {
+    return this.offHeap;
+  }
-      if (indexType == IndexType.HASH && isOverFlowToDisk) {
+      if (indexType == IndexType.HASH && isOverFlowRegion()) {
