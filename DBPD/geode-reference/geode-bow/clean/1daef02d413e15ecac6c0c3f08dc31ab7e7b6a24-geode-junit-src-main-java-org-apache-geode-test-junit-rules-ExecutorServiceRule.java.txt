GEODE-6301: Use ThreadInfo.toString in ExecutorServiceRule.dumpThreads

Cleanup javadocs and warnings in all ExecutorServiceRule tests.

-   * Returns formatted call stacks of the {@code Thread}s that are directly in the
-   * {@code ExecutorService}'s {@code ThreadGroup} excluding subgroups.
+   * Returns thread dumps for the {@code Thread}s that are in the {@code ExecutorService}'s
+   * {@code ThreadGroup} excluding subgroups.
-    StringBuilder dump = new StringBuilder();
+    StringBuilder dumpWriter = new StringBuilder();
+
-    ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(getThreadIds(), 100);
+    ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(getThreadIds(), true, true);
+
-      dump.append('"');
-      dump.append(threadInfo.getThreadName());
-      dump.append("\" ");
-      final Thread.State state = threadInfo.getThreadState();
-      dump.append("\n   java.lang.Thread.State: ");
-      dump.append(state);
-      final StackTraceElement[] stackTraceElements = threadInfo.getStackTrace();
-      for (final StackTraceElement stackTraceElement : stackTraceElements) {
-        dump.append("\n        at ");
-        dump.append(stackTraceElement);
+      if (threadInfo == null) {
+        // sometimes ThreadMXBean.getThreadInfo returns array with one or more null elements
+        continue;
-      dump.append("\n\n");
+      // ThreadInfo toString includes monitor and synchronizer details
+      dumpWriter.append(threadInfo);
-    return dump.toString();
+
+    return dumpWriter.toString();
-  static class DedicatedThreadFactory implements ThreadFactory {
-    private static final AtomicInteger poolNumber = new AtomicInteger(1);
+  protected static class DedicatedThreadFactory implements ThreadFactory {
+
+    private static final AtomicInteger POOL_NUMBER = new AtomicInteger(1);
+
-    DedicatedThreadFactory() {
+    protected DedicatedThreadFactory() {
-      namePrefix = "pool-" + poolNumber.getAndIncrement() + "-thread-";
+      namePrefix = "pool-" + POOL_NUMBER.getAndIncrement() + "-thread-";
-    Set<Thread> getThreads() {
+    protected Set<Thread> getThreads() {
-     *
