Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.internal.offheap.annotations.Released;
-      Object ov = event.getRawOldValue();
-      if (ov instanceof GatewaySenderEventImpl) {
-        ((GatewaySenderEventImpl) ov).release();
-      }
+      GatewaySenderEventImpl.release(event.getRawOldValue());
-    Object rov = event.getRawOldValue();
-    if (rov instanceof GatewaySenderEventImpl) {
-      ((GatewaySenderEventImpl) rov).release();
-    }
+    GatewaySenderEventImpl.release(event.getRawOldValue());
-  protected void addToEventQueue(Object key, boolean didPut, EntryEventImpl event, int sizeOfHDFSEvent) {
+  protected void addToEventQueue(Object key, boolean didPut, EntryEventImpl event) {
-    // To support this callers need to call freeOffHeapResources on the returned GatewaySenderEventImpl.
+    // To support this callers need to call release on the returned GatewaySenderEventImpl.
-//     return object; // TODO OFFHEAP: see what callers do with the returned GatewaySenderEventImpl. We need to inc its refcount before we do the destroyKey.
+//     return object;
-	EntryEventImpl event = getPartitionedRegion().newDestroyEntryEvent(key,
+	@Released EntryEventImpl event = getPartitionedRegion().newDestroyEntryEvent(key,
-	event.setEventId(new EventID(cache.getSystem()));
+	  event.setEventId(new EventID(cache.getSystem()));
-	  //merge42180: are we considering offheap in cedar. Comment freeOffHeapReference intentionally
-	  //event.freeOffHeapReferences();
