GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

-import org.apache.geode.internal.cache.lru.LRUEntry;
-import org.apache.geode.internal.cache.lru.NewLRUClockHand;
+import org.apache.geode.internal.cache.eviction.EvictableEntry;
+import org.apache.geode.internal.cache.eviction.EvictionList;
-  public boolean lruLimitExceeded(DiskRegionView drv) {
+  public boolean lruLimitExceeded(DiskRegionView diskRegionView) {
-    public void setRecentlyUsed() {
+    public void setRecentlyUsed(RegionEntryContext context) {
-    public void setInUseByTransaction(boolean inUseByTransaction) {
+    public void incRefCount() {
-    public void incRefCount() {}
-
-    @Override
-    public void decRefCount(NewLRUClockHand lruList, InternalRegion region) {
+    public void decRefCount(EvictionList lruList, InternalRegion region) {
-    public void resetRefCount(NewLRUClockHand lruList) {
+    public void resetRefCount(EvictionList lruList) {
-  public void lruUpdateCallback(int n) {
-    // do nothing
-  }
-
-  @Override
-  public void lruEntryFaultIn(LRUEntry entry) {
+  public void lruEntryFaultIn(EvictableEntry entry) {
-  public void close() {}
+  public void close() {
+    // nothing
+  }
+
+  @Override
+  public long getEvictions() {
+    return 0;
+  }
+
+  @Override
+  public void incRecentlyUsed() {
+    // nothing
+  }
