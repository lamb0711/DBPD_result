Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Interface for CqEvent. Offers methods to get information from
- * CqEvent.
+ * Interface for CqEvent. Offers methods to get information from CqEvent.
-  
+
-  
-  CqEventImpl(CqQuery cQuery, Operation baseOp, Operation cqOp, Object key, 
-      Object value, byte[] deltaVal, QueueManager qManager, EventID eventId) {
+
+  CqEventImpl(CqQuery cQuery, Operation baseOp, Operation cqOp, Object key, Object value,
+      byte[] deltaVal, QueueManager qManager, EventID eventId) {
-    this.queryOp = cqOp; 
+    this.queryOp = cqOp;
-    
+
-    
-  /** 
+
+  /**
-  
-  /** 
-   * Get the the operation on the query results. Supported operations include
-   * update, create, and destroy.
+
+  /**
+   * Get the the operation on the query results. Supported operations include update, create, and
+   * destroy.
-  
+
-   * @return Object key. 
+   * 
+   * @return Object key.
-  /** 
-   * Get the old value that was modified.
-   * If there is no old value because this is an insert, then
-   * return null. 
+  /**
+   * Get the old value that was modified. If there is no old value because this is an insert, then
+   * return null.
-  public Object getOldValue() {
-    return this.oldValue;
-  }
-  */
-  
-  /** 
-   * Get the new value of the modification.
-   *  If there is no new value because this is a delete, then
-   *  return null. 
+   * public Object getOldValue() { return this.oldValue; }
+   */
+
+  /**
+   * Get the new value of the modification. If there is no new value because this is a delete, then
+   * return null.
-  
-  /** 
-   * If an error occurred, return the Throwable, otherwise return null.
-   * If an error occurred, then this event will be passed to the
-   * <code>onError</code> method of the CqListener instead of the
+
+  /**
+   * If an error occurred, return the Throwable, otherwise return null. If an error occurred, then
+   * this event will be passed to the <code>onError</code> method of the CqListener instead of the
-  
+
-   * Checks if the Cq Event is for an exception. If so constructs the
-   * exception. 
+   * Checks if the Cq Event is for an exception. If so constructs the exception.
-    this.throwable = new Throwable(LocalizedStrings.CqEventImpl_EXCEPTION_OCCURED_WHILE_APPLYING_QUERY_ON_A_CACHE_EVENT.toLocalizedString());  
+    this.throwable = new Throwable(
+        LocalizedStrings.CqEventImpl_EXCEPTION_OCCURED_WHILE_APPLYING_QUERY_ON_A_CACHE_EVENT
+            .toLocalizedString());
-  
+
-    this.throwable = new Throwable(exceptionText);  
+    this.throwable = new Throwable(exceptionText);
-  
+
-  
+
-    return this.eventId;  
+    return this.eventId;
-  
+
-    buffer.append("CqEvent [").append(
-     "CqName=").append(this.cQuery.getName()).append(
-     "; base operation=").append(this.baseOp).append(
-     "; cq operation=").append(this.queryOp).append(
-     "; key=").append(this.key).append(
-     "; value=").append(this.newValue).append(
-     "]");
+    buffer.append("CqEvent [").append("CqName=").append(this.cQuery.getName())
+        .append("; base operation=").append(this.baseOp).append("; cq operation=")
+        .append(this.queryOp).append("; key=").append(this.key).append("; value=")
+        .append(this.newValue).append("]");
