Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
+
-    if(logger.isDebugEnabled()) {
+    if (logger.isDebugEnabled()) {
-    if(logger.isDebugEnabled()) {
-      logger.debug("DataSerializerRecoveryTask - EndpointNoLongerInUse. Now have {} endpoints", count);
+    if (logger.isDebugEnabled()) {
+      logger.debug("DataSerializerRecoveryTask - EndpointNoLongerInUse. Now have {} endpoints",
+          count);
-    int count  = endpointCount.incrementAndGet();
-    if(logger.isDebugEnabled()) {
+    int count = endpointCount.incrementAndGet();
+    if (logger.isDebugEnabled()) {
-    if(count == 1) {
-      synchronized(recoveryScheduledLock) {
-        if(!recoveryScheduled) {
+    if (count == 1) {
+      synchronized (recoveryScheduledLock) {
+        if (!recoveryScheduled) {
-          } catch(RejectedExecutionException e) {
-            //ignore, the timer has been cancelled, which means we're shutting down.
+          } catch (RejectedExecutionException e) {
+            // ignore, the timer has been cancelled, which means we're shutting down.
-  
+
-      
-      synchronized(recoveryScheduledLock) {
+
+      synchronized (recoveryScheduledLock) {
-      
+
-      SerializerAttributesHolder[] holders= InternalDataSerializer.getSerializersForDistribution();
-      if(holders.length == 0) {
+      SerializerAttributesHolder[] holders = InternalDataSerializer.getSerializersForDistribution();
+      if (holders.length == 0) {
-      
+
-      //Fix for bug:40930
+      // Fix for bug:40930
-          background.schedule(new RecoveryTask(), pingInterval,
-              TimeUnit.MILLISECONDS);
+          background.schedule(new RecoveryTask(), pingInterval, TimeUnit.MILLISECONDS);
-      }
-      else {
+      } else {
-        } 
-        catch (CancelException e) {
+        } catch (CancelException e) {
-        }
-        catch (RejectedExecutionException e) {
+        } catch (RejectedExecutionException e) {
-        }
-        catch(Exception e) {
+        } catch (Exception e) {
-          
+
-          
-          if(!recoveryScheduled && !cnfException) {
-            logger.warn(LocalizedMessage.create(
-              LocalizedStrings.DataSerializerRecoveryListener_ERROR_RECOVERING_DATASERIALIZERS),
-              e);
+
+          if (!recoveryScheduled && !cnfException) {
+            logger.warn(
+                LocalizedMessage.create(
+                    LocalizedStrings.DataSerializerRecoveryListener_ERROR_RECOVERING_DATASERIALIZERS),
+                e);
-            } catch (RejectedExecutionException ex) { // GEODE-1613 - suspect string while shutting down
-              if (!background.isTerminated()
-                  && !pool.getCancelCriterion().isCancelInProgress()) {
+            } catch (RejectedExecutionException ex) { // GEODE-1613 - suspect string while shutting
+                                                      // down
+              if (!background.isTerminated() && !pool.getCancelCriterion().isCancelInProgress()) {
