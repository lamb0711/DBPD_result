Merge branch 'release/1.4.0'

-import org.apache.geode.DataSerializable;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.internal.cache.CacheServiceProfile;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.lucene.analysis.Analyzer;
-import org.apache.lucene.analysis.standard.StandardAnalyzer;
-
-public class LuceneIndexCreationProfile implements CacheServiceProfile, DataSerializable {
+import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
+
+import org.apache.geode.DataSerializable;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.cache.lucene.LuceneSerializer;
+import org.apache.geode.cache.lucene.internal.repository.serializer.HeterogeneousLuceneSerializer;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.VersionedDataSerializable;
+import org.apache.geode.internal.cache.CacheServiceProfile;
+import org.apache.geode.internal.i18n.LocalizedStrings;
+
+public class LuceneIndexCreationProfile implements CacheServiceProfile, VersionedDataSerializable {
+  private String serializerClass = HeterogeneousLuceneSerializer.class.getSimpleName();
+
-      Analyzer analyzer, Map<String, Analyzer> fieldAnalyzers) {
+      Analyzer analyzer, Map<String, Analyzer> fieldAnalyzers, LuceneSerializer serializer) {
+    if (serializer != null) {
+      this.serializerClass = serializer.getClass().getSimpleName();
+    }
+  public String getSerializerClass() {
+    return this.serializerClass;
+  }
+
-    if (!Arrays.equals(remoteProfile.getFieldNames(), getFieldNames())) {
+    if ((getFieldNames().length != remoteProfile.getFieldNames().length) || (!Arrays
+        .asList(getFieldNames()).containsAll(Arrays.asList(remoteProfile.getFieldNames())))) {
-        return LocalizedStrings.LuceneService_CANNOT_CREATE_INDEX_0_ON_REGION_1_WITH_FIELDS_2_BECAUSE_ANOTHER_MEMBER_DEFINES_THE_SAME_INDEX_WITH_FIELDS_3
+        return LocalizedStrings.LuceneService_CANNOT_CREATE_INDEX_0_ON_REGION_1_WITH_FIELD_ANALYZERS_2_BECAUSE_ANOTHER_MEMBER_DEFINES_THE_SAME_INDEX_WITH_FIELD_ANALYZERS_3
-                Arrays.toString(getFieldAnalyzers().keySet().toArray()),
-                Arrays.toString(remoteProfile.getFieldAnalyzers().keySet().toArray()));
+                Arrays.toString(getFieldAnalyzers().values().toArray()),
+                Arrays.toString(remoteProfile.getFieldAnalyzers().values().toArray()));
+
+    if (!getSerializerClass().equals(remoteProfile.getSerializerClass())) {
+      return LocalizedStrings.LuceneService_CANNOT_CREATE_INDEX_0_ON_REGION_1_WITH_SERIALIZER_2_BECAUSE_ANOTHER_MEMBER_DEFINES_THE_SAME_INDEX_WITH_DIFFERENT_SERIALIZER_3
+          .toString(getIndexName(), regionPath, getSerializerClass(),
+              remoteProfile.getSerializerClass());
+    }
+
+    toDataPre_GEODE_1_4_0_0(out);
+    DataSerializer.writeString(this.serializerClass, out);
+  }
+
+  public void toDataPre_GEODE_1_4_0_0(DataOutput out) throws IOException {
+    fromDataPre_GEODE_1_4_0_0(in);
+    this.serializerClass = DataSerializer.readString(in);
+  }
+
+  public void fromDataPre_GEODE_1_4_0_0(DataInput in) throws IOException, ClassNotFoundException {
-        .append("]").toString();
+        .append("; serializer=").append(this.serializerClass).append("]").toString();
+
+  @Override
+  public Version[] getSerializationVersions() {
+    return new Version[] {Version.GEODE_140};
+  }
