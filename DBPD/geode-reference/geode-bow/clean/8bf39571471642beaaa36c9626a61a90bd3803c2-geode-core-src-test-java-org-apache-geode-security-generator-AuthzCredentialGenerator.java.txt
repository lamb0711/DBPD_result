Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Encapsulates obtaining authorized and unauthorized credentials for a given
- * operation in a region. Implementations will be for different kinds of
- * authorization scheme and authentication scheme combos.
+ * Encapsulates obtaining authorized and unauthorized credentials for a given operation in a region.
+ * Implementations will be for different kinds of authorization scheme and authentication scheme
+ * combos.
-  
+
-   * A set of system properties that should be added to the gemfire system
-   * properties before using the authorization module.
+   * A set of system properties that should be added to the gemfire system properties before using
+   * the authorization module.
-   * A factory method to create a new instance of an
-   * {@link AuthzCredentialGenerator} for the given {@link ClassCode}. Caller
-   * is supposed to invoke {@link AuthzCredentialGenerator#init} immediately
-   * after obtaining the instance.
+   * A factory method to create a new instance of an {@link AuthzCredentialGenerator} for the given
+   * {@link ClassCode}. Caller is supposed to invoke {@link AuthzCredentialGenerator#init}
+   * immediately after obtaining the instance.
-   * @param  classCode
-   *         the {@code ClassCode} of the {@code AuthzCredentialGenerator}
-   *         implementation
+   * @param classCode the {@code ClassCode} of the {@code AuthzCredentialGenerator} implementation
-   * @return an instance of {@code AuthzCredentialGenerator} for the given
-   *         class code
+   * @return an instance of {@code AuthzCredentialGenerator} for the given class code
-   * @param  generator
-   *         an instance of {@link CredentialGenerator} of the credential
-   *         implementation for which to obtain authorized/unauthorized
-   *         credentials.
+   * @param generator an instance of {@link CredentialGenerator} of the credential implementation
+   *        for which to obtain authorized/unauthorized credentials.
-   * @return false when the given {@link CredentialGenerator} is incompatible
-   *         with this authorization module.
+   * @return false when the given {@link CredentialGenerator} is incompatible with this
+   *         authorization module.
-   * @return A set of extra properties that should be added to Gemfire system
-   *         properties when not null.
+   * @return A set of extra properties that should be added to Gemfire system properties when not
+   *         null.
-   * Required to be implemented by concrete classes that implement this abstract
-   * class.
+   * Required to be implemented by concrete classes that implement this abstract class.
-   * @return A set of extra properties that should be added to Gemfire system
-   *         properties when not null.
+   * @return A set of extra properties that should be added to Gemfire system properties when not
+   *         null.
-   * @throws IllegalArgumentException when the {@link CredentialGenerator} is
-   *         incompatible with this authorization module.
+   * @throws IllegalArgumentException when the {@link CredentialGenerator} is incompatible with this
+   *         authorization module.
-   * The name of the {@link AccessControl} factory function that should be used
-   * as the authorization module on the server side.
+   * The name of the {@link AccessControl} factory function that should be used as the authorization
+   * module on the server side.
-   * Get a set of credentials generated using the given index allowed to perform
-   * the given {@link OperationCode}s for the given regions.
+   * Get a set of credentials generated using the given index allowed to perform the given
+   * {@link OperationCode}s for the given regions.
-   * @param  opCodes
-   *         the list of {@link OperationCode}s of the operations requiring
-   *         authorization; should not be null
-   * @param  regionNames
-   *         list of the region names requiring authorization; a value of
-   *         null indicates all regions
-   * @param  index
-   *         used to generate multiple such credentials by passing different
-   *         values for this
+   * @param opCodes the list of {@link OperationCode}s of the operations requiring authorization;
+   *        should not be null
+   * @param regionNames list of the region names requiring authorization; a value of null indicates
+   *        all regions
+   * @param index used to generate multiple such credentials by passing different values for this
-   * @return the set of credentials authorized to perform the given operation in
-   *         the given regions
+   * @return the set of credentials authorized to perform the given operation in the given regions
-  public Properties getAllowedCredentials(final OperationCode[] opCodes, final String[] regionNames, final int index) {
+  public Properties getAllowedCredentials(final OperationCode[] opCodes, final String[] regionNames,
+      final int index) {
-      final Principal principal = getAllowedPrincipal(opCodes, regionNames, (index + tries) % numTries);
+      final Principal principal =
+          getAllowedPrincipal(opCodes, regionNames, (index + tries) % numTries);
-   * Get a set of credentials generated using the given index not allowed to
-   * perform the given {@link OperationCode}s for the given regions. The
-   * credentials are required to be valid for authentication.
+   * Get a set of credentials generated using the given index not allowed to perform the given
+   * {@link OperationCode}s for the given regions. The credentials are required to be valid for
+   * authentication.
-   * @param  opCodes
-   *         the {@link OperationCode}s of the operations requiring
-   *         authorization failure; should not be null
-   * @param  regionNames
-   *         list of the region names requiring authorization failure; a value
-   *         of null indicates all regions
-   * @param  index
-   *         used to generate multiple such credentials by passing different
-   *         values for this
+   * @param opCodes the {@link OperationCode}s of the operations requiring authorization failure;
+   *        should not be null
+   * @param regionNames list of the region names requiring authorization failure; a value of null
+   *        indicates all regions
+   * @param index used to generate multiple such credentials by passing different values for this
-   * @return the set of credentials that are not authorized to perform the given
-   *         operation in the given region
+   * @return the set of credentials that are not authorized to perform the given operation in the
+   *         given region
-  public Properties getDisallowedCredentials(final OperationCode[] opCodes, final String[] regionNames, final int index) {
+  public Properties getDisallowedCredentials(final OperationCode[] opCodes,
+      final String[] regionNames, final int index) {
-      final Principal principal = getDisallowedPrincipal(opCodes, regionNames, (index + tries) % numTries);
+      final Principal principal =
+          getDisallowedPrincipal(opCodes, regionNames, (index + tries) % numTries);
-   * Get the number of tries to be done for obtaining valid credentials for the
-   * given operations in the given region. It is required that
-   * {@link #getAllowedPrincipal} method returns valid principals for values of
-   * {@code index} from 0 through (n-1) where {@code n} is the
-   * value returned by this method. It is recommended that the principals so
-   * returned be unique for efficiency.
+   * Get the number of tries to be done for obtaining valid credentials for the given operations in
+   * the given region. It is required that {@link #getAllowedPrincipal} method returns valid
+   * principals for values of {@code index} from 0 through (n-1) where {@code n} is the value
+   * returned by this method. It is recommended that the principals so returned be unique for
+   * efficiency.
-   * This will be used by {@link #getAllowedCredentials} to step through
-   * different principals and obtain a set of valid credentials.
+   * This will be used by {@link #getAllowedCredentials} to step through different principals and
+   * obtain a set of valid credentials.
-   * Required to be implemented by concrete classes that implement this abstract
-   * class.
+   * Required to be implemented by concrete classes that implement this abstract class.
-   * @param  opCodes
-   *         the {@link OperationCode}s of the operations requiring
-   *         authorization
-   * @param  regionNames
-   *         list of the region names requiring authorization; a value of null
-   *         indicates all regions
+   * @param opCodes the {@link OperationCode}s of the operations requiring authorization
+   * @param regionNames list of the region names requiring authorization; a value of null indicates
+   *        all regions
-   * @return the number of principals allowed to perform the given operation in
-   *         the given region
+   * @return the number of principals allowed to perform the given operation in the given region
-  protected abstract int getNumPrincipalTries(final OperationCode[] opCodes, final String[] regionNames);
+  protected abstract int getNumPrincipalTries(final OperationCode[] opCodes,
+      final String[] regionNames);
-   * Get a {@link Principal} generated using the given index allowed to perform
-   * the given {@link OperationCode}s for the given region.
+   * Get a {@link Principal} generated using the given index allowed to perform the given
+   * {@link OperationCode}s for the given region.
-   * Required to be implemented by concrete classes that implement this abstract
-   * class.
+   * Required to be implemented by concrete classes that implement this abstract class.
-   * @param  opCodes
-   *         the {@link OperationCode}s of the operations requiring
-   *         authorization
-   * @param  regionNames
-   *         list of the region names requiring authorization; a value of null
-   *         indicates all regions
-   * @param  index
-   *         used to generate multiple such principals by passing different
-   *         values for this
+   * @param opCodes the {@link OperationCode}s of the operations requiring authorization
+   * @param regionNames list of the region names requiring authorization; a value of null indicates
+   *        all regions
+   * @param index used to generate multiple such principals by passing different values for this
-   * @return the {@link Principal} authorized to perform the given operation in
-   *         the given region
+   * @return the {@link Principal} authorized to perform the given operation in the given region
-  protected abstract Principal getAllowedPrincipal(final OperationCode[] opCodes, final String[] regionNames, final int index);
+  protected abstract Principal getAllowedPrincipal(final OperationCode[] opCodes,
+      final String[] regionNames, final int index);
-   * Get a {@link Principal} generated using the given index not allowed to
-   * perform the given {@link OperationCode}s for the given region.
+   * Get a {@link Principal} generated using the given index not allowed to perform the given
+   * {@link OperationCode}s for the given region.
-   * Required to be implemented by concrete classes that implement this abstract
-   * class.
+   * Required to be implemented by concrete classes that implement this abstract class.
-   * @param  opCodes
-   *         the {@link OperationCode}s of the operations requiring
-   *         authorization failure
-   * @param  regionNames
-   *         list of the region names requiring authorization failure; a value
-   *         of null indicates all regions
-   * @param  index
-   *         used to generate multiple such principals by passing different
-   *         values for this
+   * @param opCodes the {@link OperationCode}s of the operations requiring authorization failure
+   * @param regionNames list of the region names requiring authorization failure; a value of null
+   *        indicates all regions
+   * @param index used to generate multiple such principals by passing different values for this
-   * @return a {@link Principal} not authorized to perform the given operation
-   *         in the given region
+   * @return a {@link Principal} not authorized to perform the given operation in the given region
-  protected abstract Principal getDisallowedPrincipal(final OperationCode[] opCodes, final String[] regionNames, final int index);
+  protected abstract Principal getDisallowedPrincipal(final OperationCode[] opCodes,
+      final String[] regionNames, final int index);
-   * <p>The following schemes are supported as of now:
+   * <p>
+   * The following schemes are supported as of now:
-   * <p>To add a new authorization scheme the following needs to be done:
+   * <p>
+   * To add a new authorization scheme the following needs to be done:
-   * <li>Add a new enumeration value for the scheme in this class. Notice the
-   * size of {@code VALUES} array and increase that if it is getting
-   * overflowed. Note the methods and fields for existing schemes and add for
-   * the new one in a similar manner.</li>
+   * <li>Add a new enumeration value for the scheme in this class. Notice the size of {@code VALUES}
+   * array and increase that if it is getting overflowed. Note the methods and fields for existing
+   * schemes and add for the new one in a similar manner.</li>
-   * {@link AuthzCredentialGenerator#init} method where different authentication
-   * schemes can be passed and initialize differently for the authentication
-   * schemes that shall be handled.</li>
-   * <li>Modify the {@link AuthzCredentialGenerator#create} method to add
-   * creation of an instance of the new implementation for the
-   * {@code ClassCode} enumeration value.</li>
+   * {@link AuthzCredentialGenerator#init} method where different authentication schemes can be
+   * passed and initialize differently for the authentication schemes that shall be handled.</li>
+   * <li>Modify the {@link AuthzCredentialGenerator#create} method to add creation of an instance of
+   * the new implementation for the {@code ClassCode} enumeration value.</li>
-   * <p>All dunit tests will automagically start testing the new implementation
-   * after this.
+   * <p>
+   * All dunit tests will automagically start testing the new implementation after this.
-    public static final ClassCode DUMMY = new ClassCode(DummyAuthorization.class.getName() + ".create", ID_DUMMY);
-    public static final ClassCode XML = new ClassCode(XmlAuthorization.class.getName() + ".create", ID_XML);
+    public static final ClassCode DUMMY =
+        new ClassCode(DummyAuthorization.class.getName() + ".create", ID_DUMMY);
+    public static final ClassCode XML =
+        new ClassCode(XmlAuthorization.class.getName() + ".create", ID_XML);
-      final ClassCode other = (ClassCode)obj;
+      final ClassCode other = (ClassCode) obj;
-     * Returns a hash code value for this {@code ClassCode} which is the
-     * same as its ordinal.
+     * Returns a hash code value for this {@code ClassCode} which is the same as its ordinal.
