GEODE-6588: Cleanup generics and static analyzer warnings.

-  public ConnectionFactoryImpl(ConnectionSource source, EndpointManager endpointManager,
+  ConnectionFactoryImpl(ConnectionSource source, EndpointManager endpointManager,
-            readTimeout, cancelCriterion, usedByGateway, sender,
+            readTimeout, usedByGateway, sender,
+    this.connectionConnector = connectionConnector;
-    this.denyList = new ServerDenyList(pingInterval);
-    this.connectionConnector = connectionConnector;
+
+    denyList = new ServerDenyList(pingInterval);
-    boolean initialized = false;
-      initialized = true;
-          || e.getMessage().equals("Connection reset"))) { // this is the most common case, so don't
-                                                           // print an exception
+          || e.getMessage().equals("Connection reset"))) {
+        // this is the most common case, so don't print an exception
-      } else {// print a warning with the exception stack trace
+      } else {
-    } finally {
-      if (!initialized && connection != null) {
-        connection.destroy();
-        failureTracker.addFailure();
-        connection = null;
-      }
-  public ServerLocation findBestServer(ServerLocation currentServer, Set excludedServers) {
+  public ServerLocation findBestServer(ServerLocation currentServer,
+      Set<ServerLocation> excludedServers) {
-    final Set origExcludedServers = excludedServers;
-    excludedServers = new HashSet(excludedServers);
-    Set denyListedServers = denyList.getBadServers();
+    final Set<ServerLocation> origExcludedServers = excludedServers;
+    excludedServers = new HashSet<>(excludedServers);
+    Set<ServerLocation> denyListedServers = denyList.getBadServers();
-  public Connection createClientToServerConnection(Set excludedServers)
+  public Connection createClientToServerConnection(Set<ServerLocation> excludedServers)
-    final Set origExcludedServers = excludedServers;
-    excludedServers = new HashSet(excludedServers);
-    Set denyListedServers = denyList.getBadServers();
+    final Set<ServerLocation> origExcludedServers = excludedServers;
+    excludedServers = new HashSet<>(excludedServers);
+    Set<ServerLocation> denyListedServers = denyList.getBadServers();
-      } catch (CancelException e) {
-        // propagate this up immediately
-        throw e;
-      } catch (GemFireSecurityException e) {
-        // propagate this up immediately
-        throw e;
-      } catch (GatewayConfigurationException e) {
-        // propagate this up immediately
+      } catch (CancelException | GemFireSecurityException | GatewayConfigurationException e) {
-    // Launch the thread
-    CacheClientUpdater updater = connectionConnector.connectServerToClient(endpoint, qManager,
-        isPrimary, failedUpdater, clientUpdateName);
-    return updater;
+    return connectionConnector.connectServerToClient(endpoint, qManager, isPrimary, failedUpdater,
+        clientUpdateName);
