Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @since GemFire     3.5
+ * @since GemFire 3.5
-    
+
-  public static final RefreshNotificationType STATISTIC_RESOURCE_STATISTICS = 
-      new RefreshNotificationType(
-          "GemFire.Timer.StatisticResource.statistics.refresh", 
-          "refresh");
+  public static final RefreshNotificationType STATISTIC_RESOURCE_STATISTICS =
+      new RefreshNotificationType("GemFire.Timer.StatisticResource.statistics.refresh", "refresh");
-  public static final RefreshNotificationType SYSTEM_MEMBER_CONFIG = 
-      new RefreshNotificationType(
-          "GemFire.Timer.SystemMember.config.refresh", 
-          "refresh");
+  public static final RefreshNotificationType SYSTEM_MEMBER_CONFIG =
+      new RefreshNotificationType("GemFire.Timer.SystemMember.config.refresh", "refresh");
-  
+
-  
+
-  
+
-    { STATISTIC_RESOURCE_STATISTICS, SYSTEM_MEMBER_CONFIG };
+      {STATISTIC_RESOURCE_STATISTICS, SYSTEM_MEMBER_CONFIG};
-    return VALUES[ordinal];  // Canonicalize
+    return VALUES[ordinal]; // Canonicalize
-  
+
-    
+
-	public String getType() {
-		return this.type;
-	}
+  public String getType() {
+    return this.type;
+  }
-	public String getMessage() {
-		return this.msg;
-	}
-  
-  /** 
+  public String getMessage() {
+    return this.msg;
+  }
+
+  /**
-      return this.type;
+    return this.type;
-	/**
-	 * Indicates whether some other object is "equal to" this one.
-	 *
-	 * @param  other  the reference object with which to compare.
-	 * @return true if this object is the same as the obj argument;
-	 *         false otherwise.
-	 */
+  /**
+   * Indicates whether some other object is "equal to" this one.
+   *
+   * @param other the reference object with which to compare.
+   * @return true if this object is the same as the obj argument; false otherwise.
+   */
-	public boolean equals(Object other) {
-		if (other == this) return true;
-		if (other == null) return false;
-		if (!(other instanceof RefreshNotificationType)) return  false;
-		final RefreshNotificationType that = (RefreshNotificationType) other;
+  public boolean equals(Object other) {
+    if (other == this)
+      return true;
+    if (other == null)
+      return false;
+    if (!(other instanceof RefreshNotificationType))
+      return false;
+    final RefreshNotificationType that = (RefreshNotificationType) other;
-		if (!StringUtils.equals(this.type, that.type)) return false;
-		if (!StringUtils.equals(this.msg, that.msg)) return false;
+    if (!StringUtils.equals(this.type, that.type))
+      return false;
+    if (!StringUtils.equals(this.msg, that.msg))
+      return false;
-		return true;
-	}
-  
-	/**
-	 * Returns a hash code for the object. This method is supported for the
-	 * benefit of hashtables such as those provided by java.util.Hashtable.
-	 *
-	 * @return the integer 0 if description is null; otherwise a unique integer.
-	 */
+    return true;
+  }
+
+  /**
+   * Returns a hash code for the object. This method is supported for the benefit of hashtables such
+   * as those provided by java.util.Hashtable.
+   *
+   * @return the integer 0 if description is null; otherwise a unique integer.
+   */
-	public int hashCode() {
-		int result = 17;
-		final int mult = 37;
+  public int hashCode() {
+    int result = 17;
+    final int mult = 37;
-		result = mult * result + 
-			(this.type == null ? 0 : this.type.hashCode());
-		result = mult * result + 
-			(this.msg == null ? 0 : this.msg.hashCode());
+    result = mult * result + (this.type == null ? 0 : this.type.hashCode());
+    result = mult * result + (this.msg == null ? 0 : this.msg.hashCode());
-		return result;
-	}
-  
+    return result;
+  }
+
