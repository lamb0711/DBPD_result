GEODE-6033: Support dynamic VMs in DistributedDiskDirRule

* Create tests for DiskDirRule and DistributedDiskDirRule.
* Fix a couple minor issues found by testing DiskDirRule.
* Make DistributedDiskDirRule support create and bounce VMs.

-import static org.assertj.core.api.Assertions.assertThat;
+import static org.apache.geode.test.dunit.VM.getCurrentVMNum;
+import java.io.Serializable;
+import java.nio.file.Files;
+import org.apache.geode.test.dunit.VMEventListener;
- * You may either pass in instances of SerializableTemporaryFolder and SerializableTestName from
- * the test or the DistributedDiskDirRule will create its own instances. Either way, it will invoke
- * SerializableTemporaryFolder.before and SerializableTestName.starting(Description). If the test
- * provides its own instances of these rules defined, please do not annotate these instances with
- * {@code @Rule}.
- *
- * <p>
- * Each JVM will have its own default DiskDirs directory in which that JVM will create the default
+ * Each JVM will have its own default DiskDir directory in which that JVM will create the default
- * /var/folders/28/m__9dv1906n60kmz7t71wm680000gn/T/junit1766147044000254810
- *     VM-1-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM0-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM1-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM2-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
- *     VM3-PRAccessorWithOverflowRegressionTest_testPROverflow-diskDirs
+ * /var/folders/28/m__9dv1906n60kmz7t71wm680000gn/T/junit7783603075891789189/
+ *     VM-1-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM0-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM1-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM2-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
+ *     VM3-DistributedDiskDirRuleDistributedTest_setsDefaultDiskDirsPropertyInEveryVm-diskDirs
- * {@literal @}Category(DistributedTest.class)
- * public class PRAccessorWithOverflowRegressionTest extends CacheTestCase {
+ * public class DistributedDiskDirRuleDistributedTest implements Serializable {
- *     {@literal @}Rule
- *     public DistributedDiskDirRule diskDirsRule = new DistributedDiskDirRule();
+ *   {@literal @}Rule
+ *   public DistributedRule distributedRule = new DistributedRule();
+ *
+ *   {@literal @}Rule
+ *   public DistributedDiskDirRule distributedDiskDirRule = new DistributedDiskDirRule();
+  private final VMEventListener vmEventListener;
-  private volatile int beforeVmCount;
+  private String testClassName;
-    this(new Builder());
+    this(new SerializableTemporaryFolder(), new SerializableTestName());
-  public DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder) {
-    this(new Builder().temporaryFolder(temporaryFolder));
-  }
-
-  public DistributedDiskDirRule(SerializableTestName testName) {
-    this(new Builder().testName(testName));
-  }
-
-  public DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder,
+  private DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder,
-    this(new Builder().temporaryFolder(temporaryFolder).testName(testName));
+    this(temporaryFolder, testName, new RemoteInvoker());
-  public DistributedDiskDirRule(Builder builder) {
-    this(builder, new RemoteInvoker());
-  }
-
-  protected DistributedDiskDirRule(Builder builder, RemoteInvoker invoker) {
-    this(builder.initializeHelperRules, builder.temporaryFolder, builder.testName, invoker);
-  }
-
-  protected DistributedDiskDirRule(boolean initializeHelperRules,
-      SerializableTemporaryFolder temporaryFolder, SerializableTestName testName,
-      RemoteInvoker invoker) {
-    super(initializeHelperRules, null, null);
+  private DistributedDiskDirRule(SerializableTemporaryFolder temporaryFolder,
+      SerializableTestName testName, RemoteInvoker invoker) {
+    super(null, null);
+    vmEventListener = new InternalVMEventListener();
+  /**
+   * Returns the current default disk dirs value for the specified VM.
+   */
-    beforeVmCount = getVMCount();
+    VM.addVMEventListener(vmEventListener);
-    if (initializeHelperRules) {
-      initializeHelperRules(description);
-    }
+    initializeHelperRules(description);
-    invoker.invokeInEveryVMAndController(() -> doBefore(this, description));
+    testClassName = getTestClassName(description);
+    invoker.invokeInEveryVMAndController(() -> doBefore(this));
-  protected void initializeHelperRules(Description description) throws Exception {
+  protected void after(Description description) {
+    VM.removeVMEventListener(vmEventListener);
+    invoker.invokeInEveryVMAndController(() -> doAfter());
+  }
+
+  private String getDiskDirName(String testClass) {
+    return "VM" + getCurrentVMNum() + "-" + testClass + "_" + testName.getMethodName()
+        + "-diskDirs";
+  }
+
+  private void initializeHelperRules(Description description) throws Exception {
-  @Override
-  protected void after(Description description) {
-    assertThat(getVMCount()).isEqualTo(beforeVmCount);
-
-    invoker.invokeInEveryVMAndController(() -> doAfter());
+  private void afterCreateVM(VM vm) {
+    vm.invoke(() -> doBefore(this));
-  @Override
-  protected String getDiskDirName(String testClass) {
-    return "VM" + VM.getCurrentVMNum() + "-" + testClass + "_" + testName.getMethodName()
-        + "-diskDirs";
+  private void afterBounceVM(VM vm) {
+    vm.invoke(() -> doBefore(this));
-  private void doBefore(DistributedDiskDirRule diskDirRule, Description description)
-      throws Exception {
+  private void doBefore(DistributedDiskDirRule diskDirRule) throws Exception {
-    File diskDir = data.temporaryFolder().newFolder(getDiskDirName(getTestClassName(description)));
+    File diskDir = new File(data.temporaryFolder().getRoot(), getDiskDirName(testClassName));
+    if (!diskDir.exists()) {
+      Files.createDirectory(diskDir.toPath());
+    }
-          + VM.getCurrentVMNum() + ". Rule does not support VM.bounce().");
+          + getCurrentVMNum() + ". Rule does not support VM.bounce().");
-   * Builds an instance of DistributedDiskDirRule
+   * VMEventListener for DistributedDiskDirRule.
-  public static class Builder {
-    private boolean initializeHelperRules = true;
-    private SerializableTemporaryFolder temporaryFolder = new SerializableTemporaryFolder();
-    private SerializableTestName testName = new SerializableTestName();
+  private class InternalVMEventListener implements VMEventListener, Serializable {
-    public Builder() {
+    @Override
+    public void afterCreateVM(VM vm) {
+      DistributedDiskDirRule.this.afterCreateVM(vm);
+    }
+
+    @Override
+    public void beforeBounceVM(VM vm) {
-    /**
-     * Specify false to disable initializing SerializableTemporaryFolder and SerializableTestName
-     * during DistributedDiskDirRule initialization. If this is enabled then do NOT annotate these
-     * helper rules in the test or combine them with RuleChain or RuleList. Default value is true.
-     */
-    public Builder initializeHelperRules(boolean value) {
-      initializeHelperRules = value;
-      return this;
-    }
-
-    public Builder temporaryFolder(SerializableTemporaryFolder temporaryFolder) {
-      this.temporaryFolder = temporaryFolder;
-      return this;
-    }
-
-    public Builder testName(SerializableTestName testName) {
-      this.testName = testName;
-      return this;
-    }
-
-    public DistributedDiskDirRule build() {
-      return new DistributedDiskDirRule(this);
+    @Override
+    public void afterBounceVM(VM vm) {
+      DistributedDiskDirRule.this.afterBounceVM(vm);
