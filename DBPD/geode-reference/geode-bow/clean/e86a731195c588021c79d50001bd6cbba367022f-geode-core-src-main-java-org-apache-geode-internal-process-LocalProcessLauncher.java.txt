Merge branch 'release/1.3.0'

-import org.apache.geode.distributed.internal.DistributionConfig;
+import static org.apache.commons.lang.Validate.notNull;
+import static org.apache.geode.internal.process.ProcessUtils.identifyPid;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
- * <p/>
+ *
+ * <p>
+ *
+ * </ul>
-public class LocalProcessLauncher {
+class LocalProcessLauncher {
-  public static final String PROPERTY_IGNORE_IS_PID_ALIVE =
+  static final String PROPERTY_IGNORE_IS_PID_ALIVE =
-  public LocalProcessLauncher(final File pidFile, final boolean force)
+  LocalProcessLauncher(final File pidFile, final boolean force)
-    this.pid = ProcessUtils.identifyPid();
+    notNull(pidFile, "Invalid pidFile '" + pidFile + "' specified");
+
+    this.pid = identifyPid();
-  public int getPid() {
-    return this.pid;
+  int getPid() {
+    return pid;
-  public File getPidFile() {
-    return this.pidFile;
+  File getPidFile() {
+    return pidFile;
+   *
-    this.pidFile.delete();
+    pidFile.delete();
+  }
+
+  /**
+   * Delete the pid file now. {@link java.io.File#deleteOnExit()} is set on the pid file.
+   *
+   * @param deletePidFileOnClose if true then the pid file will be deleted now instead of during JVM
+   *        exit
+   */
+  void close(final boolean deletePidFileOnClose) {
+    if (deletePidFileOnClose) {
+      pidFile.delete();
+    }
-    final boolean created = this.pidFile.createNewFile();
-    if (!created && !force) {
-      int otherPid = 0;
-      try {
-        otherPid = ProcessUtils.readPid(this.pidFile);
-      } catch (IOException e) {
-        // suppress
-      } catch (NumberFormatException e) {
-        // suppress
+    if (pidFile.exists()) {
+      if (!force) {
+        checkOtherPid(readOtherPid());
-      boolean ignorePidFile = false;
-      if (otherPid != 0 && !ignoreIsPidAlive()) {
-        ignorePidFile = !ProcessUtils.isProcessAlive(otherPid);
-      }
-      if (!ignorePidFile) {
-        throw new FileAlreadyExistsException("Pid file already exists: " + this.pidFile + " for "
-            + (otherPid > 0 ? "process " + otherPid : "unknown process"));
-      }
+      pidFile.delete();
-    this.pidFile.deleteOnExit();
-    final FileWriter writer = new FileWriter(this.pidFile);
-    writer.write(String.valueOf(this.pid));
-    writer.flush();
-    writer.close();
+
+    File tempPidFile = new File(pidFile.getParent(), pidFile.getName() + ".tmp");
+    tempPidFile.createNewFile();
+
+    try (FileWriter writer = new FileWriter(tempPidFile)) {
+      writer.write(String.valueOf(pid));
+      writer.flush();
+    }
+
+    tempPidFile.renameTo(pidFile);
+    pidFile.deleteOnExit();
+  }
+
+  private int readOtherPid() {
+    int otherPid = 0;
+    try {
+      otherPid = ProcessUtils.readPid(pidFile);
+    } catch (NumberFormatException | IOException ignore) {
+      // suppress
+    }
+    return otherPid;
+  }
+
+  private void checkOtherPid(final int otherPid) throws FileAlreadyExistsException {
+    if (ignoreIsPidAlive() || otherPid != 0 && isProcessAlive(otherPid)) {
+      throw new FileAlreadyExistsException("Pid file already exists: " + pidFile + " for "
+          + (otherPid > 0 ? "process " + otherPid : "unknown process"));
+    }
+  }
+
+  private boolean isProcessAlive(final int pid) {
+    return ignoreIsPidAlive() || ProcessUtils.isProcessAlive(pid);
