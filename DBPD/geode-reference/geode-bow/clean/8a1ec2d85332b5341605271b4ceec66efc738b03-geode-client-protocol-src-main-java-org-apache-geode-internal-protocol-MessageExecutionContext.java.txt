GEODE-4132: Sending handshake response from locator for new protocol

Changing the locator to send a response to the NewConnectionVersion
message to be consistent with the server. This change also allows the
locator to handle an authentication message, which means that
GetAvailableServers will work if a security manager is enabled and the
client sends a validate authentication message.

Signed-off-by: Sarge <mdodge@pivotal.io>

-
-
-import org.apache.geode.distributed.internal.InternalLocator;
-public class MessageExecutionContext {
-  private final Cache cache;
-  private final Locator locator;
-  private final ProtocolClientStatistics statistics;
-  private ConnectionStateProcessor connectionStateProcessor;
+public abstract class MessageExecutionContext {
+  protected final ProtocolClientStatistics statistics;
+  protected ConnectionStateProcessor connectionStateProcessor;
-  public MessageExecutionContext(Cache cache, ProtocolClientStatistics statistics,
-      ConnectionStateProcessor initialConnectionStateProcessor) {
-    this.cache = cache;
-    this.locator = null;
+  public MessageExecutionContext(ProtocolClientStatistics statistics,
+      ConnectionStateProcessor connectionStateProcessor) {
-    this.connectionStateProcessor = initialConnectionStateProcessor;
-  }
-
-  public MessageExecutionContext(InternalLocator locator, ProtocolClientStatistics statistics,
-      ConnectionStateProcessor initialConnectionStateProcessor) {
-    this.locator = locator;
-    this.cache = null;
-    this.statistics = statistics;
-    connectionStateProcessor = initialConnectionStateProcessor;
+    this.connectionStateProcessor = connectionStateProcessor;
-  /**
-   * Returns the cache associated with this execution
-   * <p>
-   *
-   * @throws InvalidExecutionContextException if there is no cache available
-   */
-  public Cache getCache() throws InvalidExecutionContextException {
-    if (cache != null) {
-      return cache;
-    }
-    throw new InvalidExecutionContextException(
-        "Operations on the locator should not to try to operate on a cache");
-  }
+  public abstract Cache getCache() throws InvalidExecutionContextException;
-  /**
-   * Returns the locator associated with this execution
-   * <p>
-   *
-   * @throws InvalidExecutionContextException if there is no locator available
-   */
-  public Locator getLocator() throws InvalidExecutionContextException {
-    if (locator != null) {
-      return locator;
-    }
-    throw new InvalidExecutionContextException(
-        "Operations on the server should not to try to operate on a locator");
-  }
+  public abstract Locator getLocator() throws InvalidExecutionContextException;
