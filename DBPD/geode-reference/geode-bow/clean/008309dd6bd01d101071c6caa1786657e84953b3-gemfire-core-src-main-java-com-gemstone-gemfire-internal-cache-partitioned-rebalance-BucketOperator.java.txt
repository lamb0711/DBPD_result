Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-   * Create a redundancy copy of a bucket on a given node
-   * @param targetMember the node to create the bucket on
-   * @param bucketId the id of the bucket to create
-   * @param colocatedRegionBytes the size of the bucket in bytes
-   * @return true if a redundant copy of the bucket was created.
+   * Create a redundancy copy of a bucket on a given node. This call may be
+   * asynchronous, it will notify the completion when the the operation is done.
+   * 
+   * Note that the completion is not required to be threadsafe, so implementors
+   * should ensure the completion is invoked by the calling thread of
+   * createRedundantBucket, usually by invoking the completions in waitForOperations.
+   * 
+   * @param targetMember
+   *          the node to create the bucket on
+   * @param bucketId
+   *          the id of the bucket to create
+   * @param colocatedRegionBytes
+   *          the size of the bucket in bytes
+   * @param completion
+   *          a callback which will receive a notification on the success or
+   *          failure of the operation.
-  boolean createRedundantBucket(InternalDistributedMember targetMember,
-      int bucketId, Map<String, Long> colocatedRegionBytes);
+  void createRedundantBucket(InternalDistributedMember targetMember,
+      int bucketId, Map<String, Long> colocatedRegionBytes, Completion completion);
+  
+  /**
+   * Wait for any pending asynchronous operations that this thread submitted
+   * earlier to complete. Currently only createRedundantBucket may be
+   * asynchronous.
+   */
+  public void waitForOperations();
+  
+  /**
+   * Callbacks for asnychonous operations. These methods will be invoked when an
+   * ansynchronous operation finishes.
+   * 
+   * The completions are NOT THREADSAFE.
+   * 
+   * They will be completed when createRedundantBucket or waitForOperations is
+   * called.
+   */
+  public interface Completion {
+    public void onSuccess();
+    public void onFailure();
+  }
