GEODE-4509: change uses of LocalRegion to InternalRegion (#1379)

* changed to use InternalRegion

* changed cast of LocalRegion to InternalRegion

The following classes/interfaces have been changed to use InternalRegion instead of LocalRegion:
InternalCache, ClientMetaDataService, ClientRegionFactoryImpl, RegionFactory, RequiredRoles, MemoryAllocatorImpl, and CacheStatisticsImpl
-  private final Map<String, LocalRegion> rootRegions;
+  private final Map<String, InternalRegion> rootRegions;
-  private final ConcurrentMap<String, Region<?, ?>> pathToRegion = new ConcurrentHashMap<>();
+  private final ConcurrentMap<String, InternalRegion> pathToRegion = new ConcurrentHashMap<>();
-          List<LocalRegion> rootRegionValues;
+          List<InternalRegion> rootRegionValues;
-            LocalRegion prRoot = null;
+            InternalRegion prRoot = null;
-            for (LocalRegion lr : rootRegionValues) {
+            for (InternalRegion lr : rootRegionValues) {
-    LocalRegion region;
+    InternalRegion region;
-        Future future = null;
+        Future<InternalRegion> future = null;
-          LocalRegion localRegion = (LocalRegion) future.get(); // wait on Future
-          throw new RegionExistsException(localRegion);
+          throw new RegionExistsException(future.get());
-      LocalRegion localRegion = (LocalRegion) ex.getRegion();
-      localRegion.waitOnInitialization(); // don't give out ref until initialized
+      InternalRegion internalRegion = (InternalRegion) ex.getRegion();
+      internalRegion.waitOnInitialization(); // don't give out ref until initialized
-  public <K, V> RegionAttributes<K, V> invokeRegionBefore(LocalRegion parent, String name,
+  public <K, V> RegionAttributes<K, V> invokeRegionBefore(InternalRegion parent, String name,
-  public void invokeRegionAfter(LocalRegion region) {
+  public void invokeRegionAfter(InternalRegion region) {
-  public void invokeBeforeDestroyed(LocalRegion region) {
+  public void invokeBeforeDestroyed(InternalRegion region) {
-  public void invokeCleanupFailedInitialization(LocalRegion region) {
+  public void invokeCleanupFailedInitialization(InternalRegion region) {
-  public Set<LocalRegion> getAllRegions() {
-    Set<LocalRegion> result = new HashSet<>();
+  public Set<InternalRegion> getAllRegions() {
+    Set<InternalRegion> result = new HashSet<>();
-              result.add((LocalRegion) entry.getValue());
+              result.add((InternalRegion) entry.getValue());
-        } else if (region instanceof LocalRegion) {
-          LocalRegion localRegion = (LocalRegion) region;
-          result.add(localRegion);
-          result.addAll(localRegion.basicSubregions(true));
+        } else if (region instanceof InternalRegion) {
+          InternalRegion internalRegion = (InternalRegion) region;
+          result.add(internalRegion);
+          result.addAll(internalRegion.basicSubregions(true));
-  public Set<LocalRegion> getApplicationRegions() {
-    Set<LocalRegion> result = new HashSet<>();
+  public Set<InternalRegion> getApplicationRegions() {
+    Set<InternalRegion> result = new HashSet<>();
-        LocalRegion localRegion = (LocalRegion) region;
-        if (localRegion.isSecret() || localRegion.isUsedForMetaRegion()
-            || localRegion instanceof HARegion || localRegion.isUsedForPartitionedRegionAdmin()
-            || localRegion.isInternalRegion()/* localRegion.isUsedForPartitionedRegionBucket() */) {
+        InternalRegion internalRegion = (InternalRegion) region;
+        if (internalRegion.isSecret() || internalRegion.isUsedForMetaRegion()
+            || internalRegion instanceof HARegion
+            || internalRegion.isUsedForPartitionedRegionAdmin() || internalRegion
+                .isInternalRegion()/* internalRegion.isUsedForPartitionedRegionBucket() */) {
-        result.add(localRegion);
-        result.addAll(localRegion.basicSubregions(true));
+        result.add(internalRegion);
+        result.addAll(internalRegion.basicSubregions(true));
-      for (LocalRegion region : this.rootRegions.values()) {
+      for (InternalRegion region : this.rootRegions.values()) {
-        for (LocalRegion subRegion : (Set<LocalRegion>) region.basicSubregions(true)) {
+        for (InternalRegion subRegion : (Set<InternalRegion>) region.basicSubregions(true)) {
-  public void setRegionByPath(String path, LocalRegion r) {
+  public void setRegionByPath(String path, InternalRegion r) {
-  public LocalRegion getRegionByPath(String path) {
+  public InternalRegion getRegionByPath(String path) {
-    LocalRegion result = getReinitializingRegion(path);
+    InternalRegion result = getReinitializingRegion(path);
-    return (LocalRegion) this.pathToRegion.get(path);
+    return this.pathToRegion.get(path);
-  public LocalRegion getRegionByPathForProcessing(String path) {
-    LocalRegion result = getRegionByPath(path);
+  public InternalRegion getRegionByPathForProcessing(String path) {
+    InternalRegion result = getRegionByPath(path);
-        LocalRegion rootRegion;
+        InternalRegion rootRegion;
-        result = (LocalRegion) rootRegion.getSubregion(pathParts[1], true);
+        result = (InternalRegion) rootRegion.getSubregion(pathParts[1], true);
-    LocalRegion result = getRegionByPath(path);
+    InternalRegion result = getRegionByPath(path);
-    LocalRegion rootRegion;
+    InternalRegion rootRegion;
-      return isGlobalRegionInitializing((LocalRegion) getRegion(fullPath));
+      return isGlobalRegionInitializing((InternalRegion) getRegion(fullPath));
-  private boolean isGlobalRegionInitializing(LocalRegion region) {
-    boolean result = region != null && region.scope.isGlobal() && !region.isInitialized();
+  private boolean isGlobalRegionInitializing(InternalRegion region) {
+    boolean result = region != null && region.getScope().isGlobal() && !region.isInitialized();
-      for (LocalRegion region : this.rootRegions.values()) {
+      for (InternalRegion region : this.rootRegions.values()) {
-        LocalRegion region = (LocalRegion) iterator.next();
+        InternalRegion region = (InternalRegion) iterator.next();
-        LocalRegion localRegion = (LocalRegion) region;
-        localRegion.cleanupForClient(ccn, client);
+        InternalRegion internalRegion = (InternalRegion) region;
+        internalRegion.cleanupForClient(ccn, client);
-  public LocalRegion getReinitializingRegion(String fullPath) {
+  public InternalRegion getReinitializingRegion(String fullPath) {
-      LocalRegion region = (LocalRegion) future.get();
+      InternalRegion region = (InternalRegion) future.get();
-  public boolean removeRoot(LocalRegion rootRgn) {
+  public boolean removeRoot(InternalRegion rootRgn) {
-      LocalRegion found = this.rootRegions.get(regionName);
+      InternalRegion found = this.rootRegions.get(regionName);
-        LocalRegion previous = this.rootRegions.remove(regionName);
+        InternalRegion previous = this.rootRegions.remove(regionName);
-  /**
-   * @see LocalRegion
-   */
-      Set<LocalRegion> applicationRegions = getApplicationRegions();
-      for (LocalRegion region : applicationRegions) {
+      Set<InternalRegion> applicationRegions = getApplicationRegions();
+      for (InternalRegion region : applicationRegions) {
-    for (Entry<String, Region<?, ?>> entry : this.pathToRegion.entrySet()) {
+    for (Entry<String, InternalRegion> entry : this.pathToRegion.entrySet()) {
-      Region<?, ?> region = entry.getValue();
+      InternalRegion region = entry.getValue();
-    LocalRegion r = (LocalRegion) getRegion(regionName, true);
+    InternalRegion r = (InternalRegion) getRegion(regionName, true);
+  @Override
-      InternalDistributedMember sender, LocalRegion region,
+      InternalDistributedMember sender, InternalRegion region,
