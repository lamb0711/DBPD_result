GEODE-7869: Cleanup warnings in geode-pulse

-import java.util.stream.Collectors;
-  private ObjectName MBEAN_OBJECT_NAME_MEMBER_MANAGER;
-  private final String opSignature[] =
+  private final String[] opSignature =
-    this.serverName = server;
+    serverName = server;
-      this.MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED =
+      MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED =
-      this.MBEAN_OBJECT_NAME_REGION_DISTRIBUTED =
+      MBEAN_OBJECT_NAME_REGION_DISTRIBUTED =
-      this.MBEAN_OBJECT_NAME_MEMBER_MANAGER =
-          new ObjectName(PulseConstants.OBJECT_NAME_MEMBER_MANAGER);
-      this.MBEAN_OBJECT_NAME_MEMBER = new ObjectName(PulseConstants.OBJECT_NAME_MEMBER);
-      this.MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED =
+      MBEAN_OBJECT_NAME_MEMBER = new ObjectName(PulseConstants.OBJECT_NAME_MEMBER);
+      MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED =
-        logger.info("{}={} & {}={}", resourceBundle.getString("LOG_MSG_HOST"), this.serverName,
-            resourceBundle.getString("LOG_MSG_PORT"), this.port);
-        jmxSerURL = formJMXServiceURLString(this.serverName, this.port);
+        logger.info("{}={} & {}={}", resourceBundle.getString("LOG_MSG_HOST"), serverName,
+            resourceBundle.getString("LOG_MSG_PORT"), port);
+        jmxSerURL = formJMXServiceURLString(serverName, port);
-        Map<String, Object> env = new HashMap<String, Object>();
+        Map<String, Object> env = new HashMap<>();
-          this.conn = JMXConnectorFactory.connect(url, env);
-          this.mbs = this.conn.getMBeanServerConnection();
+          conn = JMXConnectorFactory.connect(url, env);
+          mbs = conn.getMBeanServerConnection();
-      if (this.conn != null) {
+      if (conn != null) {
-          this.conn.close();
+          conn.close();
-        this.conn = null;
+        conn = null;
-    return this.conn;
+    return conn;
-      if (this.conn == null) {
+      if (conn == null) {
-      this.systemMBeans = this.mbs.queryNames(this.MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED, null);
-      for (ObjectName sysMBean : this.systemMBeans) {
+      systemMBeans = mbs.queryNames(MBEAN_OBJECT_NAME_SYSTEM_DISTRIBUTED, null);
+      for (ObjectName sysMBean : systemMBeans) {
-          this.mbs.queryNames(this.MBEAN_OBJECT_NAME_REGION_DISTRIBUTED, null);
+          mbs.queryNames(MBEAN_OBJECT_NAME_REGION_DISTRIBUTED, null);
-      for (Iterator<String> it = cluster.getDeletedRegions().iterator(); it.hasNext();) {
-        cluster.removeClusterRegion(it.next());
+      for (String s : cluster.getDeletedRegions()) {
+        cluster.removeClusterRegion(s);
-      Set<ObjectName> memberMBeans = this.mbs.queryNames(this.MBEAN_OBJECT_NAME_MEMBER, null);
+      Set<ObjectName> memberMBeans = mbs.queryNames(MBEAN_OBJECT_NAME_MEMBER, null);
-          this.mbs.queryNames(this.MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED, null);
+          mbs.queryNames(MBEAN_OBJECT_NAME_STATEMENT_DISTRIBUTED, null);
-      this.mbs = null;
-      if (this.conn != null) {
+      mbs = null;
+      if (conn != null) {
-          this.conn.close();
+          conn.close();
-        this.conn = null;
+        conn = null;
-    Iterator<String> iterator = cluster.getDeletedMembers().iterator();
-    while (iterator.hasNext()) {
-      String memberKey = iterator.next();
+    for (String memberKey : cluster.getDeletedMembers()) {
-      if (!this.isAddedNotiListner) {
-        this.mbs.addNotificationListener(mbeanName, this, null, new Object());
-        this.isAddedNotiListner = true;
+      if (!isAddedNotiListner) {
+        mbs.addNotificationListener(mbeanName, this, null, new Object());
+        isAddedNotiListner = true;
-      String[] serverCnt = (String[]) (this.mbs.invoke(mbeanName,
+      String[] serverCnt = (String[]) (mbs.invoke(mbeanName,
-      TabularData table = (TabularData) (this.mbs.invoke(mbeanName,
+      TabularData table = (TabularData) (mbs.invoke(mbeanName,
+      @SuppressWarnings("unchecked")
-          this.mbs.getAttributes(mbeanName, PulseConstants.CLUSTER_MBEAN_ATTRIBUTES);
+          mbs.getAttributes(mbeanName, PulseConstants.CLUSTER_MBEAN_ATTRIBUTES);
-      for (int i = 0; i < attributeList.size(); i++) {
+      for (Object o : attributeList) {
-        Attribute attribute = (Attribute) attributeList.get(i);
+        Attribute attribute = (Attribute) o;
-              cluster.setUsedHeapSize((long) 0);
+              cluster.setUsedHeapSize(0);
-              cluster.setTotalBytesOnDisk((long) 0);
+              cluster.setTotalBytesOnDisk(0);
-      throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException,
-      AttributeNotFoundException, MBeanException {
+      throws InstanceNotFoundException, ReflectionException, IOException {
-        this.mbs.getAttributes(mbeanName, PulseConstants.GATEWAY_MBEAN_ATTRIBUTES);
+        mbs.getAttributes(mbeanName, PulseConstants.GATEWAY_MBEAN_ATTRIBUTES);
-    for (int i = 0; i < attributeList.size(); i++) {
-      Attribute attribute = (Attribute) attributeList.get(i);
+    for (Object o : attributeList) {
+      Attribute attribute = (Attribute) o;
-      if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_PORT)) {
-        gatewayReceiver
-            .setListeningPort(getIntegerAttribute(attribute.getValue(), attribute.getName()));
-      } else if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE)) {
-        gatewayReceiver
-            .setLinkThroughput(getDoubleAttribute(attribute.getValue(), attribute.getName()));
-      } else if (attribute.getName()
-          .equals(PulseConstants.MBEAN_ATTRIBUTE_AVEARGEBATCHPROCESSINGTIME)) {
-        gatewayReceiver
-            .setAvgBatchProcessingTime(getLongAttribute(attribute.getValue(), attribute.getName()));
-      } else if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_RUNNING)) {
-        gatewayReceiver.setStatus(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+      switch (attribute.getName()) {
+        case PulseConstants.MBEAN_ATTRIBUTE_PORT:
+          gatewayReceiver
+              .setListeningPort(getIntegerAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE:
+          gatewayReceiver
+              .setLinkThroughput(getDoubleAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_AVEARGEBATCHPROCESSINGTIME:
+          gatewayReceiver
+              .setAvgBatchProcessingTime(
+                  getLongAttribute(attribute.getValue(), attribute.getName()));
+          break;
+        case PulseConstants.MBEAN_ATTRIBUTE_RUNNING:
+          gatewayReceiver.setStatus(getBooleanAttribute(attribute.getValue(), attribute.getName()));
+          break;
-      throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException,
-      AttributeNotFoundException, MBeanException {
+      throws InstanceNotFoundException, ReflectionException, IOException {
-        this.mbs.getAttributes(mbeanName, PulseConstants.GATEWAYSENDER_MBEAN_ATTRIBUTES);
+        mbs.getAttributes(mbeanName, PulseConstants.GATEWAYSENDER_MBEAN_ATTRIBUTES);
-    for (int i = 0; i < attributeList.size(); i++) {
-      Attribute attribute = (Attribute) attributeList.get(i);
+    for (Object o : attributeList) {
+      Attribute attribute = (Attribute) o;
-    } catch (InstanceNotFoundException | ReflectionException | AttributeNotFoundException
-        | IntrospectionException | MBeanException infe) {
+    } catch (InstanceNotFoundException | ReflectionException infe) {
-      throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException,
-      AttributeNotFoundException, MBeanException {
+      throws InstanceNotFoundException, ReflectionException, IOException {
-        this.mbs.getAttributes(mbeanName, PulseConstants.ASYNC_EVENT_QUEUE_MBEAN_ATTRIBUTES);
+        mbs.getAttributes(mbeanName, PulseConstants.ASYNC_EVENT_QUEUE_MBEAN_ATTRIBUTES);
-    for (int i = 0; i < attributeList.size(); i++) {
-      Attribute attribute = (Attribute) attributeList.get(i);
+    for (Object o : attributeList) {
+      Attribute attribute = (Attribute) o;
-    } catch (InstanceNotFoundException | ReflectionException | AttributeNotFoundException
-        | IntrospectionException | MBeanException infe) {
+    } catch (InstanceNotFoundException | ReflectionException infe) {
-    } catch (InstanceNotFoundException | ReflectionException | MBeanException
-        | AttributeNotFoundException | IntrospectionException infe) {
+    } catch (InstanceNotFoundException | ReflectionException infe) {
-        HashMap<String, Cluster.Client> memberClientsHM = new HashMap<String, Cluster.Client>();
+        HashMap<String, Cluster.Client> memberClientsHM = new HashMap<>();
-            "" + this.mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_PORT));
+            "" + mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_PORT));
-        this.mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS_ALT);
-        existingMember.setHostnameForClients((String) this.mbs.getAttribute(mbeanName,
+        mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS_ALT);
+        existingMember.setHostnameForClients((String) mbs.getAttribute(mbeanName,
-            (String) this.mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS));
+            (String) mbs.getAttribute(mbeanName, PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS));
-        CompositeData[] compositeData = (CompositeData[]) (this.mbs.invoke(mbeanName,
+        CompositeData[] compositeData = (CompositeData[]) (mbs.invoke(mbeanName,
-      ArrayList<String> memberNames = new ArrayList<String>(memberNamesTemp);
+      ArrayList<String> memberNames = new ArrayList<>(memberNamesTemp);
-      List<Cluster.RegionOnMember> regionOnMemberList = new ArrayList<Cluster.RegionOnMember>();
-      List<Cluster.RegionOnMember> regionOnMemberListNew = new ArrayList<Cluster.RegionOnMember>();
+      List<Cluster.RegionOnMember> regionOnMemberList = new ArrayList<>();
+      List<Cluster.RegionOnMember> regionOnMemberListNew = new ArrayList<>();
-            new ArrayList<Cluster.RegionOnMember>(Arrays.asList(regionOnMemberNames));
+            new ArrayList<>(Arrays.asList(regionOnMemberNames));
-            AttributeList attributeList = this.mbs.getAttributes(regionOnMemberMBean,
+            AttributeList attributeList = mbs.getAttributes(regionOnMemberMBean,
-            for (int i = 0; i < attributeList.size(); i++) {
-              Attribute attribute = (Attribute) attributeList.get(i);
+            for (Object o : attributeList) {
+              Attribute attribute = (Attribute) o;
-        AttributeList attributeList = this.mbs.getAttributes(regionOnMemberMBean,
+        AttributeList attributeList = mbs.getAttributes(regionOnMemberMBean,
-        for (int i = 0; i < attributeList.size(); i++) {
-          Attribute attribute = (Attribute) attributeList.get(i);
+        for (Object o : attributeList) {
+          Attribute attribute = (Attribute) o;
-      logger.debug("updateRegionOnMembers : Total regions on member in region after update = {}",
+      logger.debug("updateRegionOnMembers : Total regions on member in region {} after update = {}",
-          this.mbs.getAttributes(mbeanName, PulseConstants.REGION_MBEAN_ATTRIBUTES);
+          mbs.getAttributes(mbeanName, PulseConstants.REGION_MBEAN_ATTRIBUTES);
-      for (int i = 0; i < attributeList.size(); i++) {
-        Attribute attribute = (Attribute) attributeList.get(i);
+      for (Object value : attributeList) {
+        Attribute attribute = (Attribute) value;
-      for (int i = 0; i < attributeList.size(); i++) {
+      for (Object o : attributeList) {
-        Attribute attribute = (Attribute) attributeList.get(i);
+        Attribute attribute = (Attribute) o;
-            String memName[] = (String[]) attribute.getValue();
+            String[] memName = (String[]) attribute.getValue();
-            for (int k = 0; k < memName.length; k++) {
-              region.getMemberName().add(memName[k]);
+            for (String s : memName) {
+              region.getMemberName().add(s);
-    if (len < 2 || value.charAt(0) != '"' || value.charAt(len - 1) != '"') {
-      return false;
-    } else {
-      return true;
-    }
+    return len >= 2 && value.charAt(0) == '"' && value.charAt(len - 1) == '"';
-          this.mbs.getAttributes(mbeanName, PulseConstants.STATEMENT_MBEAN_ATTRIBUTES);
+          mbs.getAttributes(mbeanName, PulseConstants.STATEMENT_MBEAN_ATTRIBUTES);
-      for (int i = 0; i < attributeList.size(); i++) {
-        Attribute attribute = (Attribute) attributeList.get(i);
+      for (Object o : attributeList) {
+        Attribute attribute = (Attribute) o;
-    MBeanAttributeInfo[] mbeanAttributes = this.mbs.getMBeanInfo(mbeanName).getAttributes();
-    Set<String> mbeanAttributeNames =
-        Arrays.stream(mbeanAttributes).map(MBeanAttributeInfo::getName).collect(Collectors.toSet());
+    MBeanAttributeInfo[] mbeanAttributes = mbs.getMBeanInfo(mbeanName).getAttributes();
-        this.mbs.getAttributes(mbeanName, mbeanAttributeNames.toArray(new String[0]));
+        mbs.getAttributes(mbeanName,
+            Arrays.stream(mbeanAttributes).map(MBeanAttributeInfo::getName).distinct()
+                .toArray(String[]::new));
-    for (int i = 0; i < attributeList.size(); i++) {
+    for (Object o : attributeList) {
-      Attribute attribute = (Attribute) attributeList.get(i);
+      Attribute attribute = (Attribute) o;
-          String sgValues[] = (String[]) attribute.getValue();
+          String[] sgValues = (String[]) attribute.getValue();
-          for (int k = 0; k < sgValues.length; k++) {
-            member.getServerGroups().add(sgValues[k]);
+          for (String sgValue : sgValues) {
+            member.getServerGroups().add(sgValue);
-        ArrayList<Cluster.Member> memberList = new ArrayList<Cluster.Member>();
+        ArrayList<Cluster.Member> memberList = new ArrayList<>();
-   * function used to handle Float data type if the value for mbean for an attribute is null then
-   * return 0.0 as default value else return the attribute value
-   */
-  private Float getFloatAttribute(Object object, String name) {
-    if (object == null) {
-      return Float.valueOf(0.0f);
-    }
-
-    try {
-      if (!(object.getClass().equals(Float.class))) {
-        logger.info(
-            "************************Unexpected type for attribute: {}; Expected type: {}; Received type: {}************************",
-            name, Float.class.getName(), object.getClass().getName());
-        return Float.valueOf(0.0f);
-      } else {
-        return (Float) object;
-      }
-    } catch (Exception e) {
-      logger.info("Exception occurred: ", e);
-      return Float.valueOf(0.0f);
-    }
-  }
-
-  /**
-      return Integer.valueOf(0);
+      return 0;
-        return Integer.valueOf(0);
+        return 0;
-      return Integer.valueOf(0);
+      return 0;
-      return Long.valueOf(0);
+      return 0L;
-        return Long.valueOf(0);
+        return 0L;
-      return Long.valueOf(0);
+      return 0L;
-      return Double.valueOf(0);
+      return (double) 0;
-        return Double.valueOf(0);
+        return (double) 0;
-      return Double.valueOf(0);
+      return (double) 0;
-          this.mbs.getAttributes(mbeanName, PulseConstants.REGION_MBEAN_ATTRIBUTES);
+          mbs.getAttributes(mbeanName, PulseConstants.REGION_MBEAN_ATTRIBUTES);
-      for (int i = 0; i < attributeList.size(); i++) {
-        Attribute attribute = (Attribute) attributeList.get(i);
+      for (Object value : attributeList) {
+        Attribute attribute = (Attribute) value;
-      for (int i = 0; i < attributeList.size(); i++) {
-        Attribute attribute = (Attribute) attributeList.get(i);
+      for (Object o : attributeList) {
+        Attribute attribute = (Attribute) o;
-        String memberName = notificationSource;
-        Cluster.Member member = cluster.getMembersHMap().get(memberName);
+        Cluster.Member member = cluster.getMembersHMap().get(notificationSource);
-    if (this.mbs != null && this.systemMBeans != null) {
-      Object opParams[] = {queryText, members, limit};
-      for (ObjectName sysMBean : this.systemMBeans) {
+    if (mbs != null && systemMBeans != null) {
+      Object[] opParams = {queryText, members, limit};
+      for (ObjectName sysMBean : systemMBeans) {
-          String resultString = (String) (this.mbs.invoke(sysMBean,
-              PulseConstants.MBEAN_OPERATION_QUERYDATABROWSER, opParams, this.opSignature));
+          String resultString = (String) (mbs.invoke(sysMBean,
+              PulseConstants.MBEAN_OPERATION_QUERYDATABROWSER, opParams, opSignature));
-    String gemfireVersion = "";
-    gemfireVersion = version.substring(startIndex);
+    String gemfireVersion = version.substring(startIndex);
