Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This results set is used to sort the data allowing duplicates. If the data
- * being added is already sorted, than the underlying Map is a LinkedHashMap ,
- * else a TreeMap is created. For index results expecting duplicates, the
- * constructor used is the one which creates LinkedHashMap
- * This class is used to store ordered data of Structs too, obtained from index lookup
+ * This results set is used to sort the data allowing duplicates. If the data being added is already
+ * sorted, than the underlying Map is a LinkedHashMap , else a TreeMap is created. For index results
+ * expecting duplicates, the constructor used is the one which creates LinkedHashMap This class is
+ * used to store ordered data of Structs too, obtained from index lookup
-  private final boolean emitNullAtStart; 
+  private final boolean emitNullAtStart;
-   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null 
-   * order by column value need to be emitted at start, else if desc, then emit at last
+   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null
+   *        order by column value need to be emitted at start, else if desc, then emit at last
-  
+
+   * 
-   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null 
-   * order by column value need to be emitted at start, else if desc, then emit at last
+   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null
+   *        order by column value need to be emitted at start, else if desc, then emit at last
-  public SortedResultsBag(Comparator<E> comparator,
-      ObjectType elementType, boolean nullAtStart) {
+  public SortedResultsBag(Comparator<E> comparator, ObjectType elementType, boolean nullAtStart) {
-   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null 
-   * order by column value need to be emitted at start, else if desc, then emit at last
+   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null
+   *        order by column value need to be emitted at start, else if desc, then emit at last
-  public SortedResultsBag(Comparator<E> comparator, ObjectType elementType,
-      CachePerfStats stats, boolean nullAtStart) {
+  public SortedResultsBag(Comparator<E> comparator, ObjectType elementType, CachePerfStats stats,
+      boolean nullAtStart) {
-   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null 
-   * order by column value need to be emitted at start, else if desc, then emit at last
+   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null
+   *        order by column value need to be emitted at start, else if desc, then emit at last
-   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null 
-   * order by column value need to be emitted at start, else if desc, then emit at last
+   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null
+   *        order by column value need to be emitted at start, else if desc, then emit at last
-   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null 
-   * order by column value need to be emitted at start, else if desc, then emit at last
+   * 
+   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null
+   *        order by column value need to be emitted at start, else if desc, then emit at last
-   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null 
-   * order by column value need to be emitted at start, else if desc, then emit at last
+   * @param nullAtStart Indicates that the first order by coumn is asc , so that tuple with null
+   *        order by column value need to be emitted at start, else if desc, then emit at last
-    return this.orderedDataAddition ? null : ((SortedMap) this.sortedMap)
-        .comparator();
+    return this.orderedDataAddition ? null : ((SortedMap) this.sortedMap).comparator();
-  
+
-  public void setElementType(ObjectType elementType) {   
+  public void setElementType(ObjectType elementType) {
-  public boolean dataPreordered() {    
+  public boolean dataPreordered() {
-  
+
