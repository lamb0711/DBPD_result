GEODE-8310:  remove numThreads redis sys prop (#5311)

* removed the numThreads redis sys prop
* also simplified initialization of the NettyRedisServer to have
  all final instance fields and do all its initialization in the constructor.
-import io.netty.channel.ServerChannel;
-  /**
-   * System property name that can be used to set the number of threads to be used by the
-   * GeodeRedisServer
-   */
-  private static final String NUM_THREADS_SYS_PROP_NAME = "gemfireredis.numthreads";
-
-  private static final int connectTimeoutMillis = 1000;
-
-  /**
-   * The number of threads that will work on handling requests
-   */
-  private final int numWorkerThreads;
-
-  /**
-   * The number of threads that will work socket selectors
-   */
-  private final int numSelectorThreads;
-
-  /**
-   * whether to use old single thread per connection model for worker group
-   */
-  private final boolean singleThreadPerConnection;
+  private static final int CONNECT_TIMEOUT_MILLIS = 1000;
-
-
-  private Channel serverChannel;
-  private EventLoopGroup bossGroup;
-  private EventLoopGroup workerGroup;
-  private EventLoopGroup subscriberGroup;
-
+  private final EventLoopGroup selectorGroup;
+  private final EventLoopGroup workerGroup;
+  private final EventLoopGroup subscriberGroup;
-  private int serverPort;
+  private final Channel serverChannel;
+  private final int serverPort;
-    serverPort = port;
-    numWorkerThreads = setNumWorkerThreads();
-    singleThreadPerConnection = numWorkerThreads == 0;
-    numSelectorThreads = 1;
+    selectorGroup = createEventLoopGroup("Selector", false, 1);
+    workerGroup = createEventLoopGroup("Worker", true, 0);
+    subscriberGroup = createEventLoopGroup("Subscriber", true, 0);
+    serverChannel = createChannel(port);
+    serverPort = getActualPort();
+    logStartupMessage();
-
-  public void start() {
-    Class<? extends ServerChannel> socketClass = initializeEventLoopGroups();
+  private Channel createChannel(int port) {
-    serverBootstrap.group(bossGroup, workerGroup).channel(socketClass)
+    serverBootstrap.group(selectorGroup, workerGroup).channel(NioServerSocketChannel.class)
-        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeoutMillis)
+        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, CONNECT_TIMEOUT_MILLIS)
-    serverChannel = createBoundChannel(serverBootstrap);
+    return createBoundChannel(serverBootstrap, port);
-    Future<?> bossFuture = bossGroup.shutdownGracefully();
+    Future<?> bossFuture = selectorGroup.shutdownGracefully();
-  private Class<? extends ServerChannel> initializeEventLoopGroups() {
-    ThreadFactory selectorThreadFactory =
-        new LoggingThreadFactory("GeodeRedisServer-SelectorThread-", false);
-
-    ThreadFactory workerThreadFactory =
-        new LoggingThreadFactory("GeodeRedisServer-WorkerThread-", true);
-
-    if (singleThreadPerConnection) {
-      return initializeOioGroups(selectorThreadFactory, workerThreadFactory);
-    } else {
-      ThreadFactory subscriberThreadFactory =
-          new LoggingThreadFactory("GeodeRedisServer-SubscriberThread-", true);
-      bossGroup = new NioEventLoopGroup(numSelectorThreads, selectorThreadFactory);
-      workerGroup = new NioEventLoopGroup(numWorkerThreads, workerThreadFactory);
-      subscriberGroup = new NioEventLoopGroup(numWorkerThreads, subscriberThreadFactory);
-      return NioServerSocketChannel.class;
-    }
-  }
-
-  @SuppressWarnings("deprecation")
-  private Class<? extends ServerChannel> initializeOioGroups(ThreadFactory selectorThreadFactory,
-      ThreadFactory workerThreadFactory) {
-    bossGroup =
-        new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, selectorThreadFactory);
-    workerGroup =
-        new io.netty.channel.oio.OioEventLoopGroup(Integer.MAX_VALUE, workerThreadFactory);
-    return io.netty.channel.socket.oio.OioServerSocketChannel.class;
-  }
-
-  private Channel createBoundChannel(ServerBootstrap serverBootstrap) {
-    int port = serverPort == RANDOM_PORT_INDICATOR ? 0 : serverPort;
+  private Channel createBoundChannel(ServerBootstrap serverBootstrap, int requestedPort) {
+    int port = requestedPort == RANDOM_PORT_INDICATOR ? 0 : requestedPort;
-    Channel channel = channelFuture.channel();
-    serverPort = ((InetSocketAddress) channel.localAddress()).getPort();
-    logStartupMessage();
-    return channel;
+    return channelFuture.channel();
+  }
+
+  private int getActualPort() {
+    return ((InetSocketAddress) serverChannel.localAddress()).getPort();
-    String logMessage = "GeodeRedisServer started {" + bindAddress + ":" + serverPort
-        + "}, Selector threads: " + numSelectorThreads;
-    if (singleThreadPerConnection) {
-      logMessage += ", One worker thread per connection";
-    } else {
-      logMessage += ", Worker threads: " + numWorkerThreads;
-    }
+    String logMessage = "GeodeRedisServer started {" + bindAddress + ":" + serverPort + "}";
-
-  /**
-   * Helper method to set the number of worker threads
-   *
-   * @return If the System property {@value #NUM_THREADS_SYS_PROP_NAME} is set then that number is
-   *         used, otherwise {@link Runtime#availableProcessors()}.
-   */
-  private static int setNumWorkerThreads() {
-    String prop = System.getProperty(NUM_THREADS_SYS_PROP_NAME);
-    int defaultThreads = Runtime.getRuntime().availableProcessors();
-    if (prop == null || prop.isEmpty()) {
-      return defaultThreads;
-    }
-    int threads;
-    try {
-      threads = Integer.parseInt(prop);
-    } catch (NumberFormatException e) {
-      return defaultThreads;
-    }
-    return threads;
+  private static EventLoopGroup createEventLoopGroup(String name, boolean isDaemon, int nThreads) {
+    String fullName = "GeodeRedisServer-" + name + "Thread-";
+    ThreadFactory threadFactory = new LoggingThreadFactory(fullName, isDaemon);
+    return new NioEventLoopGroup(nThreads, threadFactory);
