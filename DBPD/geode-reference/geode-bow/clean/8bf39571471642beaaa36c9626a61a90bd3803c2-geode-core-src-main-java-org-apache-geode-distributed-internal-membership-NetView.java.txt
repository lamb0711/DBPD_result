Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The NetView class represents a membership view. Note that
- * this class is not synchronized, so take that under advisement
- * if you decide to modify a view with add() or remove().
+ * The NetView class represents a membership view. Note that this class is not synchronized, so take
+ * that under advisement if you decide to modify a view with add() or remove().
-  
+
-  public NetView(InternalDistributedMember creator, int viewId, List<InternalDistributedMember> members) {
+  public NetView(InternalDistributedMember creator, int viewId,
+      List<InternalDistributedMember> members) {
-   * @param size   size of the view, used for presizing collections
+   * 
+   * @param size size of the view, used for presizing collections
-   * Create a new view with the contents of the given view and the
-   * specified view ID
+   * Create a new view with the contents of the given view and the specified view ID
-    System.arraycopy(other.failureDetectionPorts, 0, this.failureDetectionPorts, 0, other.failureDetectionPorts.length);
+    System.arraycopy(other.failureDetectionPorts, 0, this.failureDetectionPorts, 0,
+        other.failureDetectionPorts.length);
-  public NetView(InternalDistributedMember creator, int viewId, List<InternalDistributedMember> mbrs, Set<InternalDistributedMember> shutdowns,
+  public NetView(InternalDistributedMember creator, int viewId,
+      List<InternalDistributedMember> mbrs, Set<InternalDistributedMember> shutdowns,
-    this.failureDetectionPorts = new int[mbrs.size()+10];
+    this.failureDetectionPorts = new int[mbrs.size() + 10];
-  
+
-  
+
-  
+
-      for (InternalDistributedMember mbr: otherView.getMembers()) {
+      for (InternalDistributedMember mbr : otherView.getMembers()) {
-      int[] p = new int[idx+10];
+      int[] p = new int[idx + 10];
-      Arrays.fill(p, idx, idx+9, -1);
+      Arrays.fill(p, idx, idx + 9, -1);
-  
+
-  
+
-    result.addAll(this.members.stream().filter(mbr -> mbr.getVmViewId() 
-                                                      == this.viewId).collect(Collectors.toList()));
+    result.addAll(this.members.stream().filter(mbr -> mbr.getVmViewId() == this.viewId)
+        .collect(Collectors.toList()));
-    int idx = members.size()-1;
+    int idx = members.size() - 1;
-  
+
-      System.arraycopy(failureDetectionPorts, idx+1, failureDetectionPorts, idx, failureDetectionPorts.length-idx-1);
-      failureDetectionPorts[failureDetectionPorts.length-1] = -1;
+      System.arraycopy(failureDetectionPorts, idx + 1, failureDetectionPorts, idx,
+          failureDetectionPorts.length - idx - 1);
+      failureDetectionPorts[failureDetectionPorts.length - 1] = -1;
-  
+
-   * Returns the coordinator of this view, rejecting any in the
-   * given collection of IDs
+   * Returns the coordinator of this view, rejecting any in the given collection of IDs
-  public InternalDistributedMember getCoordinator(Collection<InternalDistributedMember> rejections) {
+  public InternalDistributedMember getCoordinator(
+      Collection<InternalDistributedMember> rejections) {
-      for (InternalDistributedMember addr: members) {
+      for (InternalDistributedMember addr : members) {
-   * This functions returns the list of preferred coordinators.
-   * One random member from list of non-preferred member list. It make
-   * sure that random member is not in suspected Set.
-   * And local member.
+   * This functions returns the list of preferred coordinators. One random member from list of
+   * non-preferred member list. It make sure that random member is not in suspected Set. And local
+   * member.
-  public List<InternalDistributedMember> getPreferredCoordinators(Set<InternalDistributedMember> filter, InternalDistributedMember localAddress, int maxNumberDesired) {
+  public List<InternalDistributedMember> getPreferredCoordinators(
+      Set<InternalDistributedMember> filter, InternalDistributedMember localAddress,
+      int maxNumberDesired) {
-      case DistributionManager.NORMAL_DM_TYPE:
-        result += 10;
-        if (lead != null && mbr.equals(lead)) {
-          result += 5;
-        }
-        break;
-      case DistributionManager.LOCATOR_DM_TYPE:
-        result += 3;
-        break;
-      case DistributionManager.ADMIN_ONLY_DM_TYPE:
-        break;
-      default:
-        throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
+        case DistributionManager.NORMAL_DM_TYPE:
+          result += 10;
+          if (lead != null && mbr.equals(lead)) {
+            result += 5;
+          }
+          break;
+        case DistributionManager.LOCATOR_DM_TYPE:
+          result += 3;
+          break;
+        case DistributionManager.ADMIN_ONLY_DM_TYPE:
+          break;
+        default:
+          throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
-   * returns the weight of crashed members in this membership view
-   * with respect to the given previous view
+   * returns the weight of crashed members in this membership view with respect to the given
+   * previous view
-      case DistributionManager.NORMAL_DM_TYPE:
-        result += 10;
-        if (lead != null && mbr.equals(lead)) {
-          result += 5;
-        }
-        break;
-      case DistributionManager.LOCATOR_DM_TYPE:
-        result += 3;
-        break;
-      case DistributionManager.ADMIN_ONLY_DM_TYPE:
-        break;
-      default:
-        throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
+        case DistributionManager.NORMAL_DM_TYPE:
+          result += 10;
+          if (lead != null && mbr.equals(lead)) {
+            result += 5;
+          }
+          break;
+        case DistributionManager.LOCATOR_DM_TYPE:
+          result += 3;
+          break;
+        case DistributionManager.ADMIN_ONLY_DM_TYPE:
+          break;
+        default:
+          throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
-   * returns the members of this views crashedMembers collection
-   * that were members of the given view. Admin-only members are
-   * not counted
+   * returns the members of this views crashedMembers collection that were members of the given
+   * view. Admin-only members are not counted
-                                     .filter(mbr -> (mbr.getVmKind() != DistributionManager.ADMIN_ONLY_DM_TYPE))
-                                     .filter(mbr -> oldView == null || oldView.contains(mbr))
-                                     .collect(Collectors.toList()));
+        .filter(mbr -> (mbr.getVmKind() != DistributionManager.ADMIN_ONLY_DM_TYPE))
+        .filter(mbr -> oldView == null || oldView.contains(mbr)).collect(Collectors.toList()));
-   * logs the weight of failed members wrt the given previous
-   * view
+   * logs the weight of failed members wrt the given previous view
-      case DistributionManager.NORMAL_DM_TYPE:
-        if (lead != null && mbr.equals(lead)) {
-          mbrWeight += 15;
-        } else {
-          mbrWeight += 10;
-        }
-        break;
-      case DistributionManager.LOCATOR_DM_TYPE:
-        mbrWeight += 3;
-        break;
-      case DistributionManager.ADMIN_ONLY_DM_TYPE:
-        break;
-      default:
-        throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
+        case DistributionManager.NORMAL_DM_TYPE:
+          if (lead != null && mbr.equals(lead)) {
+            mbrWeight += 15;
+          } else {
+            mbrWeight += 10;
+          }
+          break;
+        case DistributionManager.LOCATOR_DM_TYPE:
+          mbrWeight += 3;
+          break;
+        case DistributionManager.ADMIN_ONLY_DM_TYPE:
+          break;
+        default:
+          throw new IllegalStateException("Unknown member type: " + mbr.getVmKind());
-//    sb.append("] fd ports: [");
-//    int[] ports = getFailureDetectionPorts();
-//    int numMembers = size();
-//    for (int i=0; i<numMembers; i++) {
-//      if (i > 0) {
-//        sb.append(' ');
-//      }
-//      sb.append(ports[i]);
-//    }
+    // sb.append("] fd ports: [");
+    // int[] ports = getFailureDetectionPorts();
+    // int numMembers = size();
+    // for (int i=0; i<numMembers; i++) {
+    // if (i > 0) {
+    // sb.append(' ');
+    // }
+    // sb.append(ports[i]);
+    // }
-  
+
-   * Returns the ID from this view that is equal to the argument.
-   * If no such ID exists the argument is returned.
+   * Returns the ID from this view that is equal to the argument. If no such ID exists the argument
+   * is returned.
-      for (InternalDistributedMember m: this.members) {
+      for (InternalDistributedMember m : this.members) {
