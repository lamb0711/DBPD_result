GEODE-2764: Addition checks on region name

	* If a region name contains function calls like entrySet()
	* The from clause is substring-ed at '.' from the right
	* Each substing is checked to see if the region name is valid.

	This closes #449

-import org.apache.geode.management.internal.cli.CliUtil;
-      XmlEntity xmlEntity =
-          new XmlEntity(CacheXml.REGION, "name", cache.getRegion(regionPath).getName());
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, xmlEntity));
+      regionPath = getValidRegionName(cache, regionPath);
+      setResultInSender(context, indexInfo, memberId, cache, regionPath);
+  private void setResultInSender(FunctionContext context, IndexInfo indexInfo, String memberId,
+      Cache cache, String regionPath) {
+    if (regionPath == null) {
+      String message = CliStrings.format(CliStrings.CREATE_INDEX__INVALID__REGIONPATH,
+          indexInfo.getRegionPath());
+      context.getResultSender().lastResult(new CliFunctionResult(memberId, false, message));
+    } else {
+      XmlEntity xmlEntity =
+          new XmlEntity(CacheXml.REGION, "name", cache.getRegion(regionPath).getName());
+      context.getResultSender().lastResult(new CliFunctionResult(memberId, xmlEntity));
+    }
+  }
+
+  private String getValidRegionName(Cache cache, String regionPath) {
+    while (regionPath != null && cache.getRegion(regionPath) == null) {
+      int dotPosition;
+      if (regionPath.contains(".") && ((dotPosition = regionPath.lastIndexOf('.')) != -1)) {
+        regionPath = regionPath.substring(0, dotPosition);
+      } else {
+        regionPath = null;
+      }
+    }
+    return regionPath;
+  }
+
