Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public void startElement(String uri, String localName, String qName,
-      Attributes atts) throws SAXException {
-    
-    if(!NAMESPACE.equals(uri)) {
+  public void startElement(String uri, String localName, String qName, Attributes atts)
+      throws SAXException {
+
+    if (!NAMESPACE.equals(uri)) {
-    if(INDEX.equals(localName)) {
+    if (INDEX.equals(localName)) {
-    if(FIELD.equals(localName)) {
+    if (FIELD.equals(localName)) {
-    //Ignore any whitespace noise between fields
-    if(stack.peek() instanceof StringBuffer) {
+    // Ignore any whitespace noise between fields
+    if (stack.peek() instanceof StringBuffer) {
-  public void endElement(String uri, String localName, String qName)
-      throws SAXException {
-    if(!NAMESPACE.equals(uri)) {
+  public void endElement(String uri, String localName, String qName) throws SAXException {
+    if (!NAMESPACE.equals(uri)) {
-    if(INDEX.equals(localName)) {
+    if (INDEX.equals(localName)) {
-    //Ignore any whitespace noise between fields
-    if(stack.peek() instanceof StringBuffer) {
+    // Ignore any whitespace noise between fields
+    if (stack.peek() instanceof StringBuffer) {
-    
-    //Remove the index creation from the stack
+
+    // Remove the index creation from the stack
-    }
-    catch (Exception ex) {
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(className), ex);
+    } catch (Exception ex) {
+      throw new CacheXmlException(
+          LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(className), ex);
-      throw new CacheXmlException(LocalizedStrings.LuceneXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_ANALYZER.toLocalizedString(className));
+      throw new CacheXmlException(
+          LocalizedStrings.LuceneXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_ANALYZER
+              .toLocalizedString(className));
