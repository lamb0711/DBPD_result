Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.cache.EntryEventImpl.SerializedCacheValueImpl;
-  public static void routeSingleClientMessage(ClientUpdateMessage clientMessage, ClientProxyMembershipID clientProxyMembershiptId) {
+  public static void routeSingleClientMessage(ClientUpdateMessage clientMessage, ClientProxyMembershipID clientProxyMembershipId) {
-      HAEventWrapper haEW = new HAEventWrapper(clientMessage);
-      haEW.setPutInProgress(true);
-      HashSet<ClientProxyMembershipID > singleClient = new HashSet<ClientProxyMembershipID >();
-      singleClient.add(clientProxyMembershiptId);
-      instance.singletonRouteClientMessage(clientMessage, singleClient);
+      instance.singletonRouteClientMessage(clientMessage, Collections.singleton(clientProxyMembershipId));
-    Object value = null;
-    byte valueIsObject = 0x01;
-
-      // only need a value if notifyBySubscription is true
-      CachedDeserializable serializedNewValue = (CachedDeserializable) entryEvent.getSerializedNewValue();
-      final boolean isTraceEnabled = logger.isTraceEnabled();
-      if (serializedNewValue == null) {
-        if (entryEvent.getCachedSerializedNewValue() != null) {
-          value = entryEvent.getCachedSerializedNewValue();
-          if (isTraceEnabled) {
-            logger.trace("CacheClientNotifier: Using cached serialized new value for operation {}: byte[{}]", operation, entryEvent.getCachedSerializedNewValue().length);
-          }
-        } else {
-        Object newValue = entryEvent.getRawNewValue();
-        if (newValue instanceof byte[]) {
-          // The value is already a byte[]. Set _valueIsObject flag to 0x00
-          // (not an object)
-          value = newValue;
-          valueIsObject = 0x00;
-        }
-        else {
-          // The value is an object. Serialize it.
-          byte[] valueBytes = CacheServerHelper.serialize(newValue);
-          value = valueBytes;
-          entryEvent.setCachedSerializedNewValue(valueBytes);
-        }
-        if (isTraceEnabled)
-          logger.trace("CacheClientNotifier: Using deserialized new value for operation {}: {}", operation, newValue);
-        }
-      } else {
-        value = serializedNewValue.getSerializedValue();
-        // value is a byte[] at since getSerializedValue returns byte[]
-        if (isTraceEnabled) {
-          logger.trace("CacheClientNotifier: Using serialized new value for operation {}: {}", operation, serializedNewValue.getStringForm());
-        }
-      }
-        (LocalRegion)event.getRegion(), keyOfInterest, value, delta, valueIsObject,
+        (LocalRegion)event.getRegion(), keyOfInterest, null, delta, (byte) 0x01,
+    
+    if (event.getOperation().isEntry()) {
+      EntryEventImpl entryEvent = (EntryEventImpl)event;
+      // only need a value if notifyBySubscription is true
+      entryEvent.exportNewValue(clientUpdateMsg);
+    }
