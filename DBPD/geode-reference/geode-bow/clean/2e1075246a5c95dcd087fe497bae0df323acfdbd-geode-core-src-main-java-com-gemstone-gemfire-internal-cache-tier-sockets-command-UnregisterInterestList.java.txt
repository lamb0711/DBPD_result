Merge branch 'release/1.0.0-incubating.M3'

- * 
+ *
-import com.gemstone.gemfire.internal.cache.tier.Command;
-import com.gemstone.gemfire.internal.cache.tier.MessageType;
-import com.gemstone.gemfire.internal.cache.tier.sockets.*;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-import com.gemstone.gemfire.internal.security.AuthorizeRequest;
-import com.gemstone.gemfire.security.NotAuthorizedException;
-import com.gemstone.gemfire.cache.DynamicRegionFactory;
-import com.gemstone.gemfire.cache.operations.UnregisterInterestOperationContext;
-import com.gemstone.gemfire.i18n.StringId;
-
+import com.gemstone.gemfire.cache.DynamicRegionFactory;
+import com.gemstone.gemfire.cache.operations.UnregisterInterestOperationContext;
+import com.gemstone.gemfire.i18n.StringId;
+import com.gemstone.gemfire.internal.cache.tier.Command;
+import com.gemstone.gemfire.internal.cache.tier.MessageType;
+import com.gemstone.gemfire.internal.cache.tier.sockets.BaseCommand;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Message;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Part;
+import com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.internal.security.AuthorizeRequest;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+import com.gemstone.gemfire.security.NotAuthorizedException;
+
-      throws IOException, ClassNotFoundException {
+    throws IOException, ClassNotFoundException {
-    byte[] isClosingListPartBytes = (byte[])isClosingListPart.getObject();
+    byte[] isClosingListPartBytes = (byte[]) isClosingListPart.getObject();
-    boolean keepalive = false ;
+    boolean keepalive = false;
-      byte[] keepalivePartBytes = (byte[])keepalivePart.getObject();
+      byte[] keepalivePartBytes = (byte[]) keepalivePart.getObject();
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-      logger.debug("{}: Received unregister interest request ({} bytes) from {} for the following {} keys in region {}: {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), numberOfKeys, regionName, keys);
+      logger.debug("{}: Received unregister interest request ({} bytes) from {} for the following {} keys in region {}: {}", servConn
+        .getName(), msg.getPayloadLength(), servConn.getSocketString(), numberOfKeys, regionName, keys);
-        errMessage = LocalizedStrings.UnRegisterInterestList_THE_INPUT_LIST_OF_KEYS_IS_EMPTY_AND_THE_INPUT_REGION_NAME_IS_NULL_FOR_THE_UNREGISTER_INTEREST_REQUEST;  
+        errMessage = LocalizedStrings.UnRegisterInterestList_THE_INPUT_LIST_OF_KEYS_IS_EMPTY_AND_THE_INPUT_REGION_NAME_IS_NULL_FOR_THE_UNREGISTER_INTEREST_REQUEST;
-        errMessage = LocalizedStrings.UnRegisterInterestList_THE_INPUT_LIST_OF_KEYS_FOR_THE_UNREGISTER_INTEREST_REQUEST_IS_EMPTY;        
+        errMessage = LocalizedStrings.UnRegisterInterestList_THE_INPUT_LIST_OF_KEYS_FOR_THE_UNREGISTER_INTEREST_REQUEST_IS_EMPTY;
-      writeErrorResponse(msg, MessageType.UNREGISTER_INTEREST_DATA_ERROR,
-          s, servConn);
+      writeErrorResponse(msg, MessageType.UNREGISTER_INTEREST_DATA_ERROR, s, servConn);
+      return;
-    else {
-      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-      if (authzRequest != null) {
-        // TODO SW: This is a workaround for DynamicRegionFactory
-        // registerInterest calls. Remove this when the semantics of
-        // DynamicRegionFactory are cleaned up.
-        if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {
-          try {
-            UnregisterInterestOperationContext unregisterContext = authzRequest
-                .unregisterInterestListAuthorize(regionName, keys);
-            keys = (List)unregisterContext.getKey();
-          }
-          catch (NotAuthorizedException ex) {
-            writeException(msg, ex, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-            return;
-          }
+
+    GeodeSecurityUtil.authorizeRegionRead(regionName);
+
+    AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+    if (authzRequest != null) {
+      // TODO SW: This is a workaround for DynamicRegionFactory
+      // registerInterest calls. Remove this when the semantics of
+      // DynamicRegionFactory are cleaned up.
+      if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {
+        try {
+          UnregisterInterestOperationContext unregisterContext = authzRequest.unregisterInterestListAuthorize(regionName, keys);
+          keys = (List) unregisterContext.getKey();
+        } catch (NotAuthorizedException ex) {
+          writeException(msg, ex, false, servConn);
+          servConn.setAsTrue(RESPONDED);
+          return;
-      // Yogesh : bug fix for 36457 :
+    }
+    // Yogesh : bug fix for 36457 :
-      // Register interest
-      servConn.getAcceptor().getCacheClientNotifier().unregisterClientInterest(
-          regionName, keys, isClosingList, servConn.getProxyID(), keepalive);
+    // Register interest
+    servConn.getAcceptor()
+            .getCacheClientNotifier()
+            .unregisterClientInterest(regionName, keys, isClosingList, servConn.getProxyID(), keepalive);
-      // Update the statistics and write the reply
-      // bserverStats.incLong(processDestroyTimeId,
-      // DistributionStats.getStatTime() - start);
-      // start = DistributionStats.getStatTime(); WHY ARE GETTING START AND NOT
-      // USING IT?
-      writeReply(msg, servConn);
-      servConn.setAsTrue(RESPONDED);
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: Sent unregister interest response for the following {} keys in region {}: {}", servConn.getName(), numberOfKeys, regionName, keys);
-      }
-      // bserverStats.incLong(writeDestroyResponseTimeId,
-      // DistributionStats.getStatTime() - start);
-      // bserverStats.incInt(destroyResponsesId, 1);
-      // }
+    // Update the statistics and write the reply
+    // bserverStats.incLong(processDestroyTimeId,
+    // DistributionStats.getStatTime() - start);
+    // start = DistributionStats.getStatTime(); WHY ARE GETTING START AND NOT
+    // USING IT?
+    writeReply(msg, servConn);
+    servConn.setAsTrue(RESPONDED);
+    if (logger.isDebugEnabled()) {
+      logger.debug("{}: Sent unregister interest response for the following {} keys in region {}: {}", servConn.getName(), numberOfKeys, regionName, keys);
+    // bserverStats.incLong(writeDestroyResponseTimeId,
+    // DistributionStats.getStatTime() - start);
+    // bserverStats.incInt(destroyResponsesId, 1);
+    // }
