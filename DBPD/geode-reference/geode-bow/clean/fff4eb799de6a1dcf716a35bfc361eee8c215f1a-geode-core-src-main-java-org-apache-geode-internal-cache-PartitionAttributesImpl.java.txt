GEODE-6103 RegionCreateFunction takes RegionConfig in argument (#2998)

* reduce dependence on RegionFunctionArgs
* Also clean up CreateRegionCommand to achieve a clean separation between validations and calling RegionCreateFunction

Signed-off-by: Aditya Anchuri <aanchuri@pivotal.io>
Signed-off-by: Peter Tran <ptran@pivotal.io>
Signed-off-by: Ken Howe <khowe@pivotal.io>
+import org.apache.geode.cache.configuration.DeclarableType;
+import org.apache.geode.cache.configuration.RegionAttributesType;
+import org.apache.geode.internal.ClassPathLoader;
+
+  public static PartitionAttributesImpl fromConfig(
+      RegionAttributesType.PartitionAttributes configAttributes) {
+    PartitionAttributesImpl partitionAttributes = new PartitionAttributesImpl();
+    if (configAttributes == null) {
+      return null;
+    }
+
+    if (configAttributes.getRedundantCopies() != null) {
+      partitionAttributes
+          .setRedundantCopies(Integer.valueOf(configAttributes.getRedundantCopies()));
+    }
+
+    if (configAttributes.getTotalMaxMemory() != null) {
+      partitionAttributes.setTotalMaxMemory(Integer.valueOf(configAttributes.getTotalMaxMemory()));
+    }
+
+    if (configAttributes.getTotalNumBuckets() != null) {
+      partitionAttributes
+          .setTotalNumBuckets(Integer.valueOf(configAttributes.getTotalNumBuckets()));
+    }
+
+    if (configAttributes.getLocalMaxMemory() != null) {
+      partitionAttributes.setLocalMaxMemory(Integer.valueOf(configAttributes.getLocalMaxMemory()));
+    }
+
+    if (configAttributes.getColocatedWith() != null) {
+      partitionAttributes.setColocatedWith(configAttributes.getColocatedWith());
+    }
+
+    if (configAttributes.getPartitionResolver() != null) {
+      try {
+        partitionAttributes.setPartitionResolver((PartitionResolver) ClassPathLoader.getLatest()
+            .forName(configAttributes.getPartitionResolver().getClassName()).newInstance());
+      } catch (Exception e) {
+      }
+    }
+
+    if (configAttributes.getRecoveryDelay() != null) {
+      partitionAttributes.setRecoveryDelay(Long.valueOf(configAttributes.getRecoveryDelay()));
+    }
+
+    if (configAttributes.getStartupRecoveryDelay() != null) {
+      partitionAttributes
+          .setStartupRecoveryDelay(Long.valueOf(configAttributes.getStartupRecoveryDelay()));
+    }
+
+    if (configAttributes.getPartitionListeners() != null) {
+      List<DeclarableType> configListeners = configAttributes.getPartitionListeners();
+      for (int i = 0; i < configListeners.size(); i++) {
+        try {
+          partitionAttributes.addPartitionListener((PartitionListener) ClassPathLoader.getLatest()
+              .forName(configListeners.get(i).getClassName())
+              .newInstance());
+        } catch (Exception e) {
+        }
+      }
+    }
+
+    return partitionAttributes;
+  }
