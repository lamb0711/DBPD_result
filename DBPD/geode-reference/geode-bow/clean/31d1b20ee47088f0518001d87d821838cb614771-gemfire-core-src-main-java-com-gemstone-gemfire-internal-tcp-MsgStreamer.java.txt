Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.ByteBufferWriter;
-    ObjToByteArraySerializer, BaseMsgStreamer {
+    ObjToByteArraySerializer, BaseMsgStreamer, ByteBufferWriter {
+  // TODO OFFHEAP: instead of MsgStreamer extending OutputStream
+  // we could have it extends HeapDataOutputStream.
+  // HDOS can now be given a direct ByteBuffer and told
+  // to not copy large byte sequences it is given.
+  // Also be it being a HDOS we can take advantage of code
+  // that is already optimized to pass Chunk direct ByteBuffers.
+  @Override
+  public final void write(ByteBuffer bb) {
+//    if (logger.isTraceEnabled()) {
+//      logger.trace(" bytes={} offset={} len={}", source, offset, len);
+//    }
+    if (this.overflowBuf != null) {
+      this.overflowBuf.write(bb);
+      return;
+    }
+    int len = bb.remaining();
+    // TODO OFFHEAP: if len > remainingSpace and isOverflowMode() then
+    // (and the overflow HDOS has doNotCopy set?) it is probably better to not copy part of
+    // bb to this.buffer and then add the remainder of it to the HDOS. Instead
+    // we can just add the whole bb to the HDOS.
+    while (len > 0) {
+      int remainingSpace = this.buffer.capacity() - this.buffer.position();
+      if (remainingSpace == 0) {
+        realFlush(false);
+        if (this.overflowBuf != null) {
+          this.overflowBuf.write(bb);
+          return;
+        }
+      } else {
+        int chunkSize = remainingSpace;
+        if (len < chunkSize) {
+          chunkSize = len;
+        }
+        int oldLimit = bb.limit();
+        bb.limit(bb.position()+chunkSize);
+        this.buffer.put(bb);
+        bb.limit(oldLimit);
+        len -= chunkSize;
+      }
+    }
+  }
+
+    // TODO OFFHEAP: update this class to take into account the "noCopy" mode added to HDOS and that we might be adding direct ByteBuffers to this.
-      other.sendTo((OutputStream)this);
+      other.sendTo((ByteBufferWriter)this);
-        overBuf.sendTo((OutputStream)this);
+        overBuf.sendTo((ByteBufferWriter)this);
