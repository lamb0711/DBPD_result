Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Implementation of the standard JDK formatter that formats a message
- * in GemFire's log format.
+ * Implementation of the standard JDK formatter that formats a message in GemFire's log format.
-  
+
-    
+
-//     if (record.getLoggerName() != null) {
-//       pw.print(' ');
-//       pw.print(record.getLoggerName());
-//     }
-//     if (record.getSourceClassName() != null) {
-//       pw.print(' ');
-//       pw.print(record.getSourceClassName());
-//     }
-//     if (record.getSourceMethodName() != null) {
-//       pw.print(' ');
-//       pw.print(record.getSourceMethodName());
-//     }
+    // if (record.getLoggerName() != null) {
+    // pw.print(' ');
+    // pw.print(record.getLoggerName());
+    // }
+    // if (record.getSourceClassName() != null) {
+    // pw.print(' ');
+    // pw.print(record.getSourceClassName());
+    // }
+    // if (record.getSourceMethodName() != null) {
+    // pw.print(' ');
+    // pw.print(record.getSourceMethodName());
+    // }
-        pw.println(LocalizedStrings.GemFireFormatter_IGNORING_THE_FOLLOWING_EXCEPTION.toLocalizedString());
+        pw.println(
+            LocalizedStrings.GemFireFormatter_IGNORING_THE_FOLLOWING_EXCEPTION.toLocalizedString());
-    } catch (java.io.IOException ignore) {}
+    } catch (java.io.IOException ignore) {
+    }
