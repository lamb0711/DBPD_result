Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfigImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/StartupMessage.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/SystemAdmin.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheServerStats.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatHelper.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatSampler.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/StatArchiveWriter.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/GemFireStatSamplerIntegrationTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/SimpleStatSamplerIntegrationTest.java

+import com.gemstone.gemfire.internal.cache.AbstractRegionMap.ARMLockTestHook;
-  
-
+    LocalRegion lr = event.getLocalRegion();
+    AbstractRegionMap arm = ((AbstractRegionMap) lr.getRegionMap());
-      if (!hasSeenEvent(event)) {
-        super.basicUpdateEntryVersion(event);
+      arm.lockForCacheModification(lr, event);
+      try {
+        if (!hasSeenEvent(event)) {
+          super.basicUpdateEntryVersion(event);
+        }
+        return;
+      } finally {
+        if (!getConcurrencyChecksEnabled() || event.hasValidVersionTag()) {
+          distributeUpdateEntryVersion(event);
+        }
-      return;
-      if (!getConcurrencyChecksEnabled() || event.hasValidVersionTag()) {
-        distributeUpdateEntryVersion(event);
-      }
+      arm.releaseCacheModificationLock(lr, event);
-    lockLocallyForClear(getDistributionManager(), getMyId());
+    lockLocallyForClear(getDistributionManager(), getMyId(), regionEvent);
-  public void lockLocallyForClear(DM dm, InternalDistributedMember locker) {
+  public void lockLocallyForClear(DM dm, InternalDistributedMember locker, CacheEvent event) {
+    
+    ARMLockTestHook alth = getRegionMap().getARMLockTestHook();
+    if(alth!=null) alth.beforeLock(this, event);
+    
-      // wait for current operations to 
-      if (!locker.equals(dm.getDistributionManagerId())) {
+      // Only need to flush if NOACK at this point
+      if (this.getAttributes().getScope().isDistributedNoAck()) {
-      }
+      }      
+    
+    if(alth!=null) alth.afterLock(this, null);
+
+    
+    ARMLockTestHook alth = getRegionMap().getARMLockTestHook();
+    if(alth!=null) alth.beforeRelease(this, regionEvent);
+    
+    
+    if(alth!=null) alth.afterRelease(this, regionEvent);
+
