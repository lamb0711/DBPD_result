GEODE-7803: provide undeprecated internal region create (#4722)

You can now use InternalRegionFactory to create a region configured with InternalRegionArguments. No need to use the deprecated AttributesFactory.
InternalRegionFactory used to be named RegionFactoryImpl.

-import java.io.IOException;
-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.RegionAttributes;
-import org.apache.geode.internal.cache.InternalRegionArguments;
+import org.apache.geode.internal.cache.InternalRegionFactory;
-          // as the regions will be internal regions
-          InternalRegionArguments internalRegionArguments = new InternalRegionArguments();
-          internalRegionArguments.setIsUsedForMetaRegion(true);
-
-          internalRegionArguments.setCachePerfStatsHolder(monitoringRegionStats);
-
-          AttributesFactory<String, Object> monitorAttributesFactory = new AttributesFactory<>();
-          monitorAttributesFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
-          monitorAttributesFactory.setDataPolicy(DataPolicy.REPLICATE);
-          monitorAttributesFactory.setConcurrencyChecksEnabled(false);
+          InternalRegionFactory<String, Object> monitorFactory =
+              cache.createInternalRegionFactory();
+          monitorFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
+          monitorFactory.setDataPolicy(DataPolicy.REPLICATE);
+          monitorFactory.setConcurrencyChecksEnabled(false);
-          monitorAttributesFactory.addCacheListener(managementCacheListener);
-
-          RegionAttributes<String, Object> monitoringRegionAttrs =
-              monitorAttributesFactory.create();
+          monitorFactory.addCacheListener(managementCacheListener);
+          monitorFactory.setIsUsedForMetaRegion(true);
+          monitorFactory.setCachePerfStatsHolder(monitoringRegionStats);
-          AttributesFactory<NotificationKey, Notification> notificationAttributesFactory =
-              new AttributesFactory<>();
-          notificationAttributesFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
-          notificationAttributesFactory.setDataPolicy(DataPolicy.REPLICATE);
-          notificationAttributesFactory.setConcurrencyChecksEnabled(false);
+          InternalRegionFactory<NotificationKey, Notification> notificationFactory =
+              cache.createInternalRegionFactory();
+          notificationFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
+          notificationFactory.setDataPolicy(DataPolicy.REPLICATE);
+          notificationFactory.setConcurrencyChecksEnabled(false);
-          notificationAttributesFactory
+          notificationFactory
-          notificationAttributesFactory.addCacheListener(notifListener);
-
-          RegionAttributes<NotificationKey, Notification> notifRegionAttrs =
-              notificationAttributesFactory.create();
+          notificationFactory.addCacheListener(notifListener);
+          notificationFactory.setIsUsedForMetaRegion(true);
+          notificationFactory.setCachePerfStatsHolder(monitoringRegionStats);
-            proxyMonitoringRegion =
-                cache.createInternalRegion(monitoringRegionName, monitoringRegionAttrs,
-                    internalRegionArguments);
-
-          } catch (TimeoutException | RegionExistsException | IOException
-              | ClassNotFoundException e) {
+            proxyMonitoringRegion = monitorFactory.create(monitoringRegionName);
+          } catch (TimeoutException | RegionExistsException e) {
-            proxyNotificationRegion =
-                cache.createInternalRegion(notificationRegionName, notifRegionAttrs,
-                    internalRegionArguments);
+            proxyNotificationRegion = notificationFactory.create(notificationRegionName);
-          } catch (TimeoutException | RegionExistsException | IOException
-              | ClassNotFoundException e) {
+          } catch (TimeoutException | RegionExistsException e) {
