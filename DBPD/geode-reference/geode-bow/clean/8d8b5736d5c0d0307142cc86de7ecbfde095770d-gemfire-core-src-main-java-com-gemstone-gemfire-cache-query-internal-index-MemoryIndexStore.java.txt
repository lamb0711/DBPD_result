Merge remote-tracking branch 'origin/develop' into wan_cq_donation

+import com.gemstone.gemfire.cache.Cache;
+  private Cache cache;
-    this.region = region;
-    RegionAttributes ra = region.getAttributes();
-    // Initialize the reverse-map if in-place modification is set by the
-    // application.
-    if (IndexManager.isObjectModificationInplace()) {
-      this.entryToValuesMap = new ConcurrentHashMap(ra.getInitialCapacity(),
-          ra.getLoadFactor(), ra.getConcurrencyLevel());
-    }
-    this.internalIndexStats = internalIndexStats;
+    this(region, internalIndexStats, GemFireCacheImpl.getInstance());
+  
+  public MemoryIndexStore(Region region,
+	      InternalIndexStatistics internalIndexStats, Cache cache) {
+	    this.region = region;
+	    RegionAttributes ra = region.getAttributes();
+	    // Initialize the reverse-map if in-place modification is set by the
+	    // application.
+	    if (IndexManager.isObjectModificationInplace()) {
+	      this.entryToValuesMap = new ConcurrentHashMap(ra.getInitialCapacity(),
+	          ra.getLoadFactor(), ra.getConcurrencyLevel());
+	    }
+	    this.internalIndexStats = internalIndexStats;
+	    this.cache = cache;
+	  }
-  public boolean basicRemoveMapping(Object key, RegionEntry entry, boolean findOldKey)
+  protected boolean basicRemoveMapping(Object key, RegionEntry entry, boolean findOldKey)
-      Object newKey;
-      if (IndexManager.isObjectModificationInplace()
-          && this.entryToValuesMap.containsKey(entry)) {
-        newKey = this.entryToValuesMap.get(entry);
-      }
-      else {
-        newKey = TypeUtils.indexKeyFor(key);
-      }
+      Object newKey = convertToIndexKey(key, entry);
+private Object convertToIndexKey(Object key, RegionEntry entry)
+		throws TypeMismatchException {
+	Object newKey;
+	if (IndexManager.isObjectModificationInplace()
+          && this.entryToValuesMap.containsKey(entry)) {
+        newKey = this.entryToValuesMap.get(entry);
+      }
+      else {
+        newKey = TypeUtils.indexKeyFor(key);
+      }
+	return newKey;
+}
+
-    final long iteratorStartTime = GemFireCacheImpl.getInstance().cacheTimeMillis();
-    protected MemoryIndexStoreEntry currentEntry = new MemoryIndexStoreEntry(iteratorStartTime);
+    final long iteratorStartTime;
+    protected MemoryIndexStoreEntry currentEntry;
-      this.map = submap;
-      this.indexKey = indexKey;
-      this.keysToRemove = keysToRemove;
+      this (submap, indexKey, keysToRemove, GemFireCacheImpl.getInstance().cacheTimeMillis());
+    
+    private MemoryIndexStoreIterator(Map submap,
+            Object indexKey, Collection keysToRemove, long iteratorStartTime) {
+		this.map = submap;
+		this.indexKey = indexKey;
+		this.keysToRemove = keysToRemove;
+		this.iteratorStartTime = iteratorStartTime;
+		currentEntry = new MemoryIndexStoreEntry(iteratorStartTime);
+	}
