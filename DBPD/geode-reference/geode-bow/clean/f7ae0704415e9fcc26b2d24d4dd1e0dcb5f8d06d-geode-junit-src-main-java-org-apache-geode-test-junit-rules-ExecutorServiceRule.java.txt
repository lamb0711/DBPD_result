GEODE-6603: Create StoppableCountDownLatch unit tests (#3413)

* Create StoppableCountDownLatchTest and fixup any issues uncovered by
testing.
* Remove unused class StoppableCountDownOrUpLatch.
* Improve ExecutorServiceRule for StoppableCountDownLatchTest.

+import java.util.concurrent.FutureTask;
- *   Future<Void> result = executorServiceRule.runAsync(() -> {
+ *   Future&lt;Void&gt; result = executorServiceRule.runAsync(() -> {
-  public void execute(Runnable command) {
-    executor.execute(command);
+  public void execute(ThrowingRunnable command) {
+    executor.submit((Callable<Void>) () -> {
+      command.run();
+      return null;
+    });
-  public <T> Future<T> submit(Runnable task, T result) {
-    return executor.submit(task, result);
+  public <T> Future<T> submit(ThrowingRunnable task, T result) {
+    FutureTask<T> futureTask = new FutureTask<>(() -> {
+      task.run();
+      return result;
+    });
+    executor.submit(futureTask);
+    return futureTask;
-  public Future<?> submit(Runnable task) {
-    return executor.submit(task);
+  public Future<Void> submit(ThrowingRunnable task) {
+    FutureTask<Void> futureTask = new FutureTask<>(() -> {
+      task.run();
+      return null;
+    });
+    executor.submit(futureTask);
+    return futureTask;
+   * This interface replaces {@link Runnable} in cases when execution of {@link #run()} method may
+   * throw exception.
+   *
+   * <p>
+   * Useful for capturing lambdas that throw exceptions.
+   */
+  @FunctionalInterface
+  public interface ThrowingRunnable {
+    /**
+     * @throws Exception The exception that may be thrown
+     * @see Runnable#run()
+     */
+    void run() throws Exception;
+  }
+
+  /**
