GEODE-4559: pass the Cache to a Declarable (#1422)

* Declarable now has a default method named "initialize(Cache, Properties)".
This allows a Declarable to know the cache that created it.
Deprecated Declarable.init(Properties).
Note that for backwards compatibility, the product calls
both these methods. Also the two Declarables that the product
implements, AutoBalancer and ReflectionBasedAutoSerializer,
implement both these methods but after the first calls subsequent
calls of init or initialize will be noops.

* initialize on ReflectionBasedAutoSerializer now call setRegionService with the cache.
init and initialize can now be called multiple times and each time the properties will
be set again. This is for backwards compatibility.

* The AutoBalancer no longer looks up the static cache.
but instead of given one by the product calling setCache
during initialization.


+import org.apache.geode.cache.CacheXmlException;
+  private final List<DeclarableAndProperties> declarablePropertiesList = new ArrayList<>();
+
+  private static class DeclarableAndProperties {
+    private final Declarable declarable;
+    private final Properties properties;
+
+    public DeclarableAndProperties(Declarable d, Properties p) {
+      declarable = d;
+      properties = p;
+    }
+
+    public Declarable getDeclarable() {
+      return declarable;
+    }
+
+    public Properties getProperties() {
+      return properties;
+    }
+  }
+
+    initializeDeclarablesMap(cache);
+
+    if (hasFunctionService()) {
+      getFunctionServiceCreation().create();
+    }
+
-    cache.addDeclarableProperties(this.declarablePropertiesMap);
-    runInitializer();
+
+    runInitializer(cache);
+  public void initializeDeclarablesMap(InternalCache cache) {
+    for (DeclarableAndProperties struct : this.declarablePropertiesList) {
+      Declarable declarable = struct.getDeclarable();
+      Properties properties = struct.getProperties();
+      try {
+        declarable.initialize(cache, properties);
+        declarable.init(properties); // for backwards compatibility
+      } catch (Exception ex) {
+        throw new CacheXmlException(
+            "Exception while initializing an instance of " + declarable.getClass().getName(), ex);
+      }
+      this.declarablePropertiesMap.put(declarable, properties);
+    }
+    cache.addDeclarableProperties(this.declarablePropertiesMap);
+  }
+
-    this.declarablePropertiesMap.put(declarable, properties);
+    this.declarablePropertiesList.add(new DeclarableAndProperties(declarable, properties));
+  private volatile boolean hasFunctionService = false;
+
+  boolean hasFunctionService() {
+    return this.hasFunctionService;
+  }
+
+    this.hasFunctionService = true;
+  public FunctionServiceCreation getFunctionServiceCreation() {
+    return this.functionServiceCreation;
+  }
+
-  void runInitializer() {
-    if (getInitializer() != null) {
-      getInitializer().init(getInitializerProps());
+  void runInitializer(InternalCache cache) {
+    Declarable initializer = getInitializer();
+    if (initializer != null) {
+      initializer.initialize(cache, getInitializerProps());
+      initializer.init(getInitializerProps()); // for backwards compatibility
