GEODE-5971: refactor more to use ResultModel (#3268)

Co-authored-by: Owen Nichols <onichols@pivotal.io>
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.CompositeResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-  public Result gc(
+  public ResultModel gc(
-    Result result;
-    CompositeResultData gcResultTable = ResultBuilder.createCompositeResultData();
-    TabularResultData resultTable = gcResultTable.addSection().addTable("Table1");
+    ResultModel result = new ResultModel();
+    TabularResultModel summary = result.addTable("summary");
+    InfoResultModel errors = result.addInfo("errors");
-    resultTable.setHeader(headerText);
+    summary.setHeader(headerText);
-      result = executeAndBuildResult(resultTable, dsMembers);
-      result = executeAndBuildResult(resultTable, dsMembers);
-
-      result = executeAndBuildResult(resultTable, dsMembers);
-
-    return result;
-  }
-  private Result executeAndBuildResult(TabularResultData resultTable,
-      Set<DistributedMember> dsMembers) {
-
-    List<?> resultList;
-    resultList =
+    List<?> resultList =
-      if (object instanceof Exception) {
-        LogWrapper.getInstance(getCache())
-            .fine("Exception in GC " + ((Throwable) object).getMessage(), ((Throwable) object));
+      if (object == null) {
+        errors.addLine("ResultMap was null");
+        errors.addLine("Exception in GC " + ((Throwable) object).getMessage());
-      }
-
-      if (object != null) {
-        if (object instanceof String) {
-          // unexpected exception string - cache may be closed or something
-          return ResultBuilder.createUserErrorResult((String) object);
-        } else {
-          Map<String, String> resultMap = (Map<String, String>) object;
-          toTabularResultData(resultTable, resultMap.get("MemberId"),
-              resultMap.get("HeapSizeBeforeGC"), resultMap.get("HeapSizeAfterGC"),
-              resultMap.get("TimeSpentInGC"));
-        }
+      } else if (object instanceof String) {
+        // unexpected exception string - cache may be closed or something
+        errors.addLine((String) object);
-        LogWrapper.getInstance(getCache()).fine("ResultMap was null ");
+        Map<String, String> resultMap = (Map<String, String>) object;
+        summary
+            .accumulate(CliStrings.GC__MSG__MEMBER_NAME, resultMap.get("MemberId"));
+        summary.accumulate(CliStrings.GC__MSG__HEAP_SIZE_BEFORE_GC,
+            resultMap.get("HeapSizeBeforeGC"));
+        summary
+            .accumulate(CliStrings.GC__MSG__HEAP_SIZE_AFTER_GC, resultMap.get("HeapSizeAfterGC"));
+        summary
+            .accumulate(CliStrings.GC__MSG__TOTAL_TIME_IN_GC, resultMap.get("TimeSpentInGC"));
-    return ResultBuilder.buildResult(resultTable);
+    return result;
-  private void toTabularResultData(TabularResultData table, String memberId, String heapSizeBefore,
-      String heapSizeAfter, String timeTaken) {
-    table.accumulate(CliStrings.GC__MSG__MEMBER_NAME, memberId);
-    table.accumulate(CliStrings.GC__MSG__HEAP_SIZE_BEFORE_GC, heapSizeBefore);
-    table.accumulate(CliStrings.GC__MSG__HEAP_SIZE_AFTER_GC, heapSizeAfter);
-    table.accumulate(CliStrings.GC__MSG__TOTAL_TIME_IN_GC, timeTaken);
-  }
