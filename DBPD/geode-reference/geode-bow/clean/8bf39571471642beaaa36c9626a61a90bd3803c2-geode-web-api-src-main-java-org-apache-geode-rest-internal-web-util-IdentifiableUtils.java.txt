Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The IdentifierUtils class is a utility class for working with Objects having
- * identifiers
+ * The IdentifierUtils class is a utility class for working with Objects having identifiers
-  protected static final Logger LOGGER = Logger
-      .getLogger(IdentifiableUtils.class.getName());
+  protected static final Logger LOGGER = Logger.getLogger(IdentifiableUtils.class.getName());
-    final long delta = ((baseId != null ? baseId.longValue() : 0l) - ID_SEQUENCE.get()); 
+    final long delta = ((baseId != null ? baseId.longValue() : 0l) - ID_SEQUENCE.get());
-    return (identifiableObject != null && ClassUtils.hasMethod(
-        identifiableObject.getClass(), "getId"));
+    return (identifiableObject != null
+        && ClassUtils.hasMethod(identifiableObject.getClass(), "getId"));
-    
+
-      method.setArguments(new Object[] { id });
+      method.setArguments(new Object[] {id});
-            String.format("Failed to set ID (%1$s) on Object (%2$s)!", id,
-                identifiableObject), e);
+            String.format("Failed to set ID (%1$s) on Object (%2$s)!", id, identifiableObject), e);
-          "Not able to set ID (%1$s) of type (%2$s) on Object of type (%3$s)",
-          id, ObjectUtils.nullSafeClassName(id),
-          ObjectUtils.nullSafeClassName(identifiableObject)));
+          "Not able to set ID (%1$s) of type (%2$s) on Object of type (%3$s)", id,
+          ObjectUtils.nullSafeClassName(id), ObjectUtils.nullSafeClassName(identifiableObject)));
-  public static <T> boolean isSetIdMethodAvailable(
-      final Object identifiableObject, final T id) {
-    return (identifiableObject != null && ClassUtils.hasMethod(
-        identifiableObject.getClass(), "setId",
-        (id == null ? Object.class : id.getClass())));
+  public static <T> boolean isSetIdMethodAvailable(final Object identifiableObject, final T id) {
+    return (identifiableObject != null && ClassUtils.hasMethod(identifiableObject.getClass(),
+        "setId", (id == null ? Object.class : id.getClass())));
