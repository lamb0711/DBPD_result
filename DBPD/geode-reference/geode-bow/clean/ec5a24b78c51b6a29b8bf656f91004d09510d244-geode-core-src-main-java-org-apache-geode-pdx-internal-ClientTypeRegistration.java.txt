GEODE-6271: Ignore failures from other pools

Copying a type to additional pools on the client may fail if not servers
are running in those additional pools. Ignoring failures due to copying
a type from one pool to another.

-        sendTypeToAllPools(newType, newTypeId, getAllPoolsExcept(pool));
+        copyTypeToOtherPools(newType, newTypeId, pool);
+  /**
+   * Send a type to all pools. This used to make sure that any types
+   * used by this client make it to all clusters this client is connected to.
+   */
+  private void copyTypeToOtherPools(PdxType newType, int newTypeId, Pool exception) {
+    Collection<Pool> pools = getAllPoolsExcept(exception);
+    for (Pool pool : pools) {
+      try {
+        sendTypeToPool(newType, newTypeId, pool);
+      } catch (ServerConnectivityException e) {
+        logger.debug("Received an exception sending pdx type to pool {}, {}", pool, e.getMessage(),
+            e);
+      }
+    }
+  }
+
-
-        sendEnumToAllPools(enumInfo, result, getAllPoolsExcept(pool));
+        copyEnumToOtherPools(enumInfo, result, pool);
+  /**
+   * Send an enum to all pools. This used to make sure that any enums
+   * used by this client make it to all clusters this client is connected to.
+   */
+  private void copyEnumToOtherPools(EnumInfo enumInfo, int newTypeId, Pool exception) {
+    Collection<Pool> pools = getAllPoolsExcept(exception);
+    for (Pool pool : pools) {
+      try {
+        sendEnumIdToPool(enumInfo, newTypeId, pool);
+      } catch (ServerConnectivityException e) {
+        logger.debug("Received an exception sending pdx enum to pool {}, {}", pool, e.getMessage());
+      }
+    }
+  }
+
+  /**
+   * Add an type as part of an import. The type is sent to all pools in case
+   * the pools are connected to different clusters, but if one pool fails
+   * the import will fail.
+   */
-    sendTypeToAllPools(importedType, typeId, getAllPools());
-  }
-
-  private void sendTypeToAllPools(PdxType importedType, int typeId,
-      Collection<Pool> pools) {
-    ServerConnectivityException lastException = null;
+    Collection<Pool> pools = getAllPools();
-        lastException = e;
-        break;
+        throw returnCorrectExceptionForFailure(pools, typeId, e);
-    if (lastException == null) {
-      return;
-    }
-    throw returnCorrectExceptionForFailure(pools, typeId, lastException);
+  /**
+   * Add an enum as part of an import. The enum is sent to all pools in case
+   * the pools are connected to different clusters, but if one pool fails
+   * the import will fail.
+   */
-    sendEnumToAllPools(importedInfo, enumId, pools);
-    return;
-  }
-
-  private void sendEnumToAllPools(EnumInfo importedInfo, int enumId, Collection<Pool> pools) {
-    ServerConnectivityException lastException = null;
-        lastException = e;
-        break;
+        throw returnCorrectExceptionForFailure(pools, enumId, e);
-    if (lastException == null) {
-      return;
-    }
-
-    throw returnCorrectExceptionForFailure(pools, enumId, lastException);
