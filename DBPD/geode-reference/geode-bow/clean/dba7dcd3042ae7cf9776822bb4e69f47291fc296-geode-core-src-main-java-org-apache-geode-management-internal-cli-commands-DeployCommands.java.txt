Merge branch 'develop' into feature/GEODE-3071

+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang.StringUtils;
-   * @param jar JAR file to deploy
+   * @param jars JAR file to deploy
-      @CliOption(key = {CliStrings.DEPLOY__GROUP}, help = CliStrings.DEPLOY__GROUP__HELP,
+      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS}, help = CliStrings.DEPLOY__GROUP__HELP,
-      @CliOption(key = {CliStrings.DEPLOY__JAR}, help = CliStrings.DEPLOY__JAR__HELP) String jar,
+      @CliOption(key = {CliStrings.JAR, CliStrings.JARS},
+          help = CliStrings.DEPLOY__JAR__HELP) String[] jars,
-      @CliOption(key = {CliStrings.UNDEPLOY__GROUP}, help = CliStrings.UNDEPLOY__GROUP__HELP,
+      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
+          help = CliStrings.UNDEPLOY__GROUP__HELP,
-      @CliOption(key = {CliStrings.UNDEPLOY__JAR}, help = CliStrings.UNDEPLOY__JAR__HELP,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE) String jars) {
+      @CliOption(key = {CliStrings.JAR, CliStrings.JARS}, help = CliStrings.UNDEPLOY__JAR__HELP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE) String[] jars) {
+
-        persistClusterConfiguration(result, () -> getSharedConfiguration()
-            .removeJars(jars == null ? null : jars.split(","), groups));
+        persistClusterConfiguration(result,
+            () -> getSharedConfiguration().removeJars(jars, groups));
-  public Result listDeployed(@CliOption(key = {CliStrings.LIST_DEPLOYED__GROUP},
+  public Result listDeployed(@CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
-      Map<String, String> paramValueMap = parseResult.getParamValueStrings();
+      // 2nd argument is the jar
+      String[] jars = (String[]) parseResult.getArguments()[1];
+      // 3rd arguemnt is the dir
+      String dir = (String) parseResult.getArguments()[2];
-      String jar = paramValueMap.get("jar");
-      jar = jar == null ? null : jar.trim();
-
-      String dir = paramValueMap.get("dir");
-      dir = dir == null ? null : dir.trim();
-
-      String group = paramValueMap.get("group");
-      group = group == null ? null : group.trim();
-
-      String jarOrDir = jar != null ? jar : dir;
-
-      if (jar == null && dir == null) {
+      if (ArrayUtils.isEmpty(jars) && StringUtils.isBlank(dir)) {
+      if (ArrayUtils.isNotEmpty(jars) && StringUtils.isNotBlank(dir)) {
+        return ResultBuilder
+            .createUserErrorResult("Parameters \"jar\" and \"dir\" can not both be specified.");
+      }
+
+      String[] filesToUpload = jars;
+      if (filesToUpload == null) {
+        filesToUpload = new String[] {dir};
+      }
-        fileResult = new FileResult(new String[] {jar != null ? jar : dir});
+
+        fileResult = new FileResult(filesToUpload);
-        return ResultBuilder.createGemFireErrorResult("'" + jarOrDir + "' not found.");
+        return ResultBuilder.createGemFireErrorResult("'" + filesToUpload + "' not found.");
-              .createShellClientAbortOperationResult("Aborted deploy of " + jarOrDir + ".");
+              .createShellClientAbortOperationResult("Aborted deploy of " + filesToUpload + ".");
