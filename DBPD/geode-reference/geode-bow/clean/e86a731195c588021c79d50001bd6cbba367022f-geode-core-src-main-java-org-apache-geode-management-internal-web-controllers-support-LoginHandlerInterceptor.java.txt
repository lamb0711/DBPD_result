Merge branch 'release/1.3.0'

-import org.apache.geode.cache.Cache;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.security.IntegratedSecurityService;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.management.internal.cli.multistep.CLIMultiStepHelper;
-import org.apache.geode.management.internal.security.ResourceConstants;
-import org.apache.geode.management.internal.web.util.UriUtils;
-import org.apache.logging.log4j.Logger;
-import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
+import static org.apache.geode.internal.security.SecurityServiceFactory.findSecurityService;
+
+import org.apache.logging.log4j.Logger;
+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
+
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.management.internal.security.ResourceConstants;
+
-  private Cache cache;
-
-  private SecurityService securityService = IntegratedSecurityService.getSecurityService();
+  private final SecurityService securityService;
+  public LoginHandlerInterceptor() {
+    this(findSecurityService());
+  }
+
+  LoginHandlerInterceptor(SecurityService securityService) {
+    this.securityService = securityService;
+  }
+
-        // GEODE-1469: since we enced stepArgs, we will need to decode it here. See
-        // #ClientHttpRequest
-        if (requestParameter.contains(CLIMultiStepHelper.STEP_ARGS)) {
-          requestValue = UriUtils.decode(requestValue);
-        }
-  public void setSecurityService(SecurityService securityService) {
-    this.securityService = securityService;
-  }
-
-
