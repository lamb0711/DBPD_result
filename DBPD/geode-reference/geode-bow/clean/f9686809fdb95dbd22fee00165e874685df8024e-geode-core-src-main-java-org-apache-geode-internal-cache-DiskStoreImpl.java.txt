GEODE-6918: Adding log message to denote end of startup (#3824)

Added a log message to InternalResourceManager to denote the end of startup
Added new test class to test the message occurs.

Co-authored-by: Kirk Lund <klund@pivotal.io>
Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

+import java.util.concurrent.CompletableFuture;
+import org.apache.geode.internal.cache.control.InternalResourceManager;
-        false/* upgradeVersionOnly */, false, false, true, false/* offlineModify */);
+        false/* upgradeVersionOnly */, false, false, true, false, /* offlineModify */
+        cache.getInternalDistributedSystem().getStatisticsManager(),
+        cache.getInternalResourceManager());
-      InternalRegionArguments internalRegionArgs, boolean offline, boolean upgradeVersionOnly,
+      InternalRegionArguments internalRegionArgs, boolean offline,
+      boolean upgradeVersionOnly,
-      boolean offlineModify) {
+      boolean offlineModify, StatisticsFactory statisticsFactory,
+      InternalResourceManager internalResourceManager) {
+    this.internalResourceManager = internalResourceManager;
-    StatisticsFactory factory = cache.getDistributedSystem();
-    this.stats = new DiskStoreStats(factory, getName());
+    this.stats = new DiskStoreStats(statisticsFactory, getName());
-          new DirectoryHolder(getName() + "_DIR#" + i, factory, dirs[i], dirSizes[i], i,
+          new DirectoryHolder(getName() + "_DIR#" + i, statisticsFactory, dirs[i], dirSizes[i], i,
-    ValueRecoveryTask task = new ValueRecoveryTask(oplogsNeedingValueRecovery, recoveredStores);
+    CompletableFuture<Void> startupTask = new CompletableFuture<>();
+    ValueRecoveryTask task =
+        new ValueRecoveryTask(oplogsNeedingValueRecovery, recoveredStores, startupTask);
-      DiskStoreImpl.this.currentAsyncValueRecoveryMap.putAll(recoveredStores);
+      currentAsyncValueRecoveryMap.putAll(recoveredStores);
+    internalResourceManager.addStartupTask(startupTask);
+  private final InternalResourceManager internalResourceManager;
-        upgradeVersionOnly, offlineValidate, offlineCompacting, needsOplogs, offlineModify);
+        upgradeVersionOnly, offlineValidate, offlineCompacting, needsOplogs, offlineModify,
+        cache.getInternalDistributedSystem().getStatisticsManager(),
+        cache.getInternalResourceManager());
+    private final CompletableFuture<Void> startupTask;
-    public ValueRecoveryTask(Set<Oplog> oplogSet, Map<Long, DiskRecoveryStore> recoveredStores) {
+    ValueRecoveryTask(Set<Oplog> oplogSet, Map<Long, DiskRecoveryStore> recoveredStores,
+        CompletableFuture<Void> startupTask) {
-      this.recoveredStores = new HashMap<Long, DiskRecoveryStore>(recoveredStores);
+      this.recoveredStores = new HashMap<>(recoveredStores);
+      this.startupTask = startupTask;
+      try {
+        doAsyncValueRecovery();
+        startupTask.complete(null);
+        logger.info("Recovered values for disk store " + getName() + " with unique id "
+            + getDiskStoreUUID());
+      } catch (CancelException e) {
+        startupTask.completeExceptionally(e);
+      } catch (RuntimeException e) {
+        startupTask.completeExceptionally(e);
+        throw e;
+      }
+    }
+
+    private void doAsyncValueRecovery() {
-        } catch (CancelException ignore) {
-          // do nothing
-            DiskStoreImpl.this.currentAsyncValueRecoveryMap.keySet()
-                .removeAll(recoveredStores.keySet());
+            currentAsyncValueRecoveryMap.keySet().removeAll(recoveredStores.keySet());
