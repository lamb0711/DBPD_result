Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * GemFireTransactionDataSource extends AbstractDataSource. This is a datasource
- * class which provides connections from the pool. The objects of these class
- * are ConnectionEventListener for connection close and error events.
+ * GemFireTransactionDataSource extends AbstractDataSource. This is a datasource class which
+ * provides connections from the pool. The objects of these class are ConnectionEventListener for
+ * connection close and error events.
-public class GemFireConnPooledDataSource extends AbstractDataSource implements 
-    javax.sql.ConnectionEventListener {
+public class GemFireConnPooledDataSource extends AbstractDataSource
+    implements javax.sql.ConnectionEventListener {
-  
+
-   * @param connPoolDS The ConnectionPoolDataSource object for the database
-   *          driver.
-   * @param configs The ConfiguredDataSourceProperties containing the datasource
-   *          properties.
+   * @param connPoolDS The ConnectionPoolDataSource object for the database driver.
+   * @param configs The ConfiguredDataSourceProperties containing the datasource properties.
-  
- /**
-   * Place holder for abstract method 
-   * isWrapperFor(java.lang.Class) in java.sql.Wrapper
-   * required by jdk 1.6
+
+  /**
+   * Place holder for abstract method isWrapperFor(java.lang.Class) in java.sql.Wrapper required by
+   * jdk 1.6
-   * @throws SQLException 
+   * @throws SQLException
-   public boolean isWrapperFor(Class iface) throws SQLException {
-     return true;
-   }
+  public boolean isWrapperFor(Class iface) throws SQLException {
+    return true;
+  }
-   public Object unwrap(Class iface)  throws SQLException {
-     return iface;
-   }
-  
+  public Object unwrap(Class iface) throws SQLException {
+    return iface;
+  }
- public GemFireConnPooledDataSource(ConnectionPoolDataSource connPoolDS,
+  public GemFireConnPooledDataSource(ConnectionPoolDataSource connPoolDS,
-        throw new SQLException(LocalizedStrings.GemFireConnPooledDataSource_GEMFIRECONNPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_OBJECT_IS_NULL_OR_CONFIGUREDDATASOURCEPROPERTIES_OBJECT_IS_NULL.toLocalizedString());
+      throw new SQLException(
+          LocalizedStrings.GemFireConnPooledDataSource_GEMFIRECONNPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_OBJECT_IS_NULL_OR_CONFIGUREDDATASOURCEPROPERTIES_OBJECT_IS_NULL
+              .toLocalizedString());
-    }
-    catch (Exception ex) {
-      StringId exception = LocalizedStrings.GemFireConnPooledDataSource_EXCEPTION_CREATING_GEMFIRECONNECTIONPOOLMANAGER; 
+    } catch (Exception ex) {
+      StringId exception =
+          LocalizedStrings.GemFireConnPooledDataSource_EXCEPTION_CREATING_GEMFIRECONNECTIONPOOLMANAGER;
-   * Implementation of datasource interface function. This method is used to get
-   * the connection from the pool. Default user name and password will be used.
+   * Implementation of datasource interface function. This method is used to get the connection from
+   * the pool. Default user name and password will be used.
- @Override
+  @Override
-    if (!isActive) { throw new SQLException(LocalizedStrings.GemFireConnPooledDataSource_GEMFIRECONNPOOLEDDATASOURCEGETCONNECTIONNO_VALID_CONNECTION_AVAILABLE.toLocalizedString()); }
+    if (!isActive) {
+      throw new SQLException(
+          LocalizedStrings.GemFireConnPooledDataSource_GEMFIRECONNPOOLEDDATASOURCEGETCONNECTIONNO_VALID_CONNECTION_AVAILABLE
+              .toLocalizedString());
+    }
-    }
-    catch (PoolException cpe) {
+    } catch (PoolException cpe) {
-   * Implementation of datasource function. This method is used to get the
-   * connection. The specified user name and passowrd will be used.
+   * Implementation of datasource function. This method is used to get the connection. The specified
+   * user name and passowrd will be used.
- @Override
-  public Connection getConnection(String clUsername, String clPassword)
-      throws SQLException {
+  @Override
+  public Connection getConnection(String clUsername, String clPassword) throws SQLException {
-   * Implementation of call back function from ConnectionEventListener
-   * interface. This callback will be invoked on connection close event.
+   * Implementation of call back function from ConnectionEventListener interface. This callback will
+   * be invoked on connection close event.
-      }
-      catch (Exception ex) {
-        String exception = "GemFireConnPooledDataSource::connectionclosed:Exception ="
-            + ex;
+      } catch (Exception ex) {
+        String exception = "GemFireConnPooledDataSource::connectionclosed:Exception =" + ex;
-   * Implementation of call back function from ConnectionEventListener
-   * interface. This callback will be invoked on connection error event.
+   * Implementation of call back function from ConnectionEventListener interface. This callback will
+   * be invoked on connection error event.
-      }
-      catch (Exception ex) {
-        String exception = "GemFireConnPooledDataSource::connectionErrorOccured:error in returning and expiring connection due to "
-            + ex;
+      } catch (Exception ex) {
+        String exception =
+            "GemFireConnPooledDataSource::connectionErrorOccured:error in returning and expiring connection due to "
+                + ex;
-    }
-    catch (SQLException e) {
+    } catch (SQLException e) {
-  protected Connection getSQLConnection(PooledConnection poolC)
-      throws SQLException {
+  protected Connection getSQLConnection(PooledConnection poolC) throws SQLException {
-      throw new SQLException(LocalizedStrings.GemFireConnPooledDataSource_GEMFIRECONNPOOLEDDATASOURCEGETCONNFROMCONNPOOLJAVASQLCONNECTION_OBTAINED_IS_INVALID.toLocalizedString());
+      throw new SQLException(
+          LocalizedStrings.GemFireConnPooledDataSource_GEMFIRECONNPOOLEDDATASOURCEGETCONNFROMCONNPOOLJAVASQLCONNECTION_OBTAINED_IS_INVALID
+              .toLocalizedString());
