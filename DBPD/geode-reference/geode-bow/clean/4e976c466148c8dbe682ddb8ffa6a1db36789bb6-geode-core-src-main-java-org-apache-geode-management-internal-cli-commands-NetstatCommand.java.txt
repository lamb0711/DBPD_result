GEODE-5971: refactor more to use ResultModel (#3268)

Co-authored-by: Owen Nichols <onichols@pivotal.io>
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Path;
-import java.util.Arrays;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
-import org.apache.geode.management.internal.cli.LogWrapper;
-import org.apache.geode.management.internal.cli.result.InfoResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
+  @CliMetaData(
+      interceptor = "org.apache.geode.management.internal.cli.commands.NetstatCommand$Interceptor",
+      relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
-  public Result netstat(
+  public ResultModel netstat(
-    Result result;
+    ResultModel result = new ResultModel();
-
-      InfoResultData resultData = ResultBuilder.createInfoResultData();
-        resultData.addAsFile(saveToFile, resultInfo.toString(),
-            CliStrings.NETSTAT__MSG__SAVED_OUTPUT_IN_0, false); // Note: substitution for {0} will
-        // happen on client side.
+
+        result.addFile(FilenameUtils.getName(saveToFile), resultInfo.toString()); // Note:
+                                                                                  // substitution
+                                                                                  // for {0} will
-        resultData.addLine(resultInfo.toString());
+        result.addInfo().addLine(resultInfo.toString());
-      result = ResultBuilder.buildResult(resultData);
-    } catch (IllegalArgumentException e) {
-      LogWrapper.getInstance(getCache())
-          .info(CliStrings.format(
-              CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0,
-              new Object[] {Arrays.toString(members)}));
-      result = ResultBuilder.createUserErrorResult(e.getMessage());
-    } catch (RuntimeException e) {
-      LogWrapper.getInstance(getCache())
-          .info(CliStrings.format(
-              CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0,
-              new Object[] {Arrays.toString(members)}), e);
-      result = ResultBuilder.createGemFireErrorResult(
-          CliStrings.format(CliStrings.NETSTAT__MSG__ERROR_OCCURRED_WHILE_EXECUTING_NETSTAT_ON_0,
-              new Object[] {Arrays.toString(members)}));
+
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+    @Override
+    public ResultModel preExecution(GfshParseResult parseResult) {
+      String saveAs = parseResult.getParamValueAsString(CliStrings.NETSTAT__FILE);
+
+      if (saveAs != null && StringUtils.isEmpty(FilenameUtils.getName(saveAs))) {
+        return ResultModel.createError("Invalid file name: " + saveAs);
+      }
+
+      return ResultModel.createInfo("");
+    }
+
+    @Override
+    public ResultModel postExecution(GfshParseResult parseResult, ResultModel result, Path tempFile)
+        throws IOException {
+      // save the content to the file specified by the user
+      String saveAs = parseResult.getParamValueAsString(CliStrings.NETSTAT__FILE);
+      if (saveAs == null) {
+        return result;
+      }
+
+      File file = new File(saveAs).getAbsoluteFile();
+      result.saveFileTo(file.getParentFile());
+      return result;
+    }
+  }
