Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Domain object for all the configuration related data. 
+ * Domain object for all the configuration related data.
-public class Configuration implements DataSerializable{
-  
+public class Configuration implements DataSerializable {
+
-  
-  //Public no arg constructor required for Deserializable
+
+  // Public no arg constructor required for Deserializable
-    
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    }else {
+    } else {
-  
+
-  
-  
+
+
-    return "Configuration [configName=" + configName + ", cacheXmlContent="
-        + cacheXmlContent + ", cacheXmlFileName=" + cacheXmlFileName
-        + ", propertiesFileName=" + propertiesFileName + ", gemfireProperties="
-        + gemfireProperties + ", jarNames=" + jarNames + "]";
+    return "Configuration [configName=" + configName + ", cacheXmlContent=" + cacheXmlContent
+        + ", cacheXmlFileName=" + cacheXmlFileName + ", propertiesFileName=" + propertiesFileName
+        + ", gemfireProperties=" + gemfireProperties + ", jarNames=" + jarNames + "]";
-    result = prime * result
-        + ((cacheXmlContent == null) ? 0 : cacheXmlContent.hashCode());
-    result = prime * result
-        + ((cacheXmlFileName == null) ? 0 : cacheXmlFileName.hashCode());
-    result = prime * result
-        + ((configName == null) ? 0 : configName.hashCode());
-    result = prime * result
-        + ((gemfireProperties == null) ? 0 : gemfireProperties.hashCode());
+    result = prime * result + ((cacheXmlContent == null) ? 0 : cacheXmlContent.hashCode());
+    result = prime * result + ((cacheXmlFileName == null) ? 0 : cacheXmlFileName.hashCode());
+    result = prime * result + ((configName == null) ? 0 : configName.hashCode());
+    result = prime * result + ((gemfireProperties == null) ? 0 : gemfireProperties.hashCode());
-    result = prime * result
-        + ((propertiesFileName == null) ? 0 : propertiesFileName.hashCode());
+    result = prime * result + ((propertiesFileName == null) ? 0 : propertiesFileName.hashCode());
-  
+
