Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.management.internal.cli.parser.SyntaxConstants;
+
- * 
- *         Prints the warning according the CliException
- * 
+ * Prints the warning according the CliException
-  private static Logger LOGGER = Logger.getLogger(ExceptionHandler.class
-      .getCanonicalName());
+  private static Logger LOGGER = Logger.getLogger(ExceptionHandler.class.getCanonicalName());
-
-    if (ce instanceof CliCommandException) {
-      if (ce instanceof CliCommandNotAvailableException) {
-        handleCommandNotAvailableException((CliCommandNotAvailableException) ce);
-      } else if (ce instanceof CliCommandInvalidException) {
-        handleCommandInvalidException((CliCommandInvalidException) ce);
-      } else if (ce instanceof CliCommandOptionException) {
-        handleOptionException((CliCommandOptionException) ce);
-      } 
+    if (ce instanceof CliCommandNotAvailableException) {
+      handleCommandNotAvailableException((CliCommandNotAvailableException) ce);
+    } else if (ce instanceof CliCommandInvalidException) {
+      handleCommandInvalidException((CliCommandInvalidException) ce);
+    } else if (ce instanceof CliCommandOptionException) {
+      handleOptionException((CliCommandOptionException) ce);
-  private static void handleMultiModeOptionException(
-      CliCommandMultiModeOptionException ce) {
+  private static void handleMultiModeOptionException(CliCommandMultiModeOptionException ce) {
-    case CliCommandMultiModeOptionException.MULTIPLE_LEAD_OPTIONS :
-      LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(
-          "Input command contains multiple lead-options from modes : " + ce.getLeadOptionString()));
-      break;
-    case CliCommandMultiModeOptionException.OPTIONS_FROM_MULTIPLE_MODES :
-      LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(
-          "Input command contains options from multilpe modes : " + ce.getLeadOptionString()));
-      break;
+      case CliCommandMultiModeOptionException.MULTIPLE_LEAD_OPTIONS :
+        LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer("Input command contains multiple lead-options from modes : " + ce.getLeadOptionString()));
+        break;
+      case CliCommandMultiModeOptionException.OPTIONS_FROM_MULTIPLE_MODES :
+        LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer("Input command contains options from multilpe modes : " + ce.getLeadOptionString()));
+        break;
-    
-  private static void handleCommandInvalidException(
-      CliCommandInvalidException ccie) {   
-    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(ccie.getCommandTarget().getGfshMethodTarget().getKey()
-        + " is not a valid Command"));   
+  private static void handleCommandInvalidException(CliCommandInvalidException ccie) {
+    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(ccie.getCommandTarget().getGfshMethodTarget().getKey() + " is not a valid Command"));
-  private static void handleCommandNotAvailableException(
-      CliCommandNotAvailableException ccnae) {    
-    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(ccnae.getCommandTarget().getGfshMethodTarget().getKey()
-        + " is not available at the moment"));    
+  private static void handleCommandNotAvailableException(CliCommandNotAvailableException ccnae) {
+    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(ccnae.getCommandTarget().getGfshMethodTarget().getKey() + " is not available at the moment"));
-  private static void handleOptionInvalidExcpetion(
-      CliCommandOptionNotApplicableException cconae) {  
-    String messege = "Parameter " + cconae.getOption().getLongOption()
-    + " is not applicable for "
-    + cconae.getCommandTarget().getGfshMethodTarget().getKey();    
+  private static void handleOptionInvalidExcpetion(CliCommandOptionNotApplicableException cconae) {
+    String messege = "Parameter " + cconae.getOption().getLongOption() + " is not applicable for " + cconae.getCommandTarget().getGfshMethodTarget().getKey();
-  private static void handleOptionValueException(
-      CliCommandOptionValueException ccove) {
+  private static void handleOptionValueException(CliCommandOptionValueException ccove) {
-      String messege = "Parameter " + ccove.getOption().getLongOption() + " can only be specified once";
-      LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(messege));
+      // unfortunately by changing from geode-joptsimple to jopt-simple we will lose ALL such debugging info from exceptions
+      //String parameter = ccove != null && ccove.getOption() != null ? ccove.getOption().getLongOption() : "<null>";
+      String parameter = ccove.getOption().getLongOption();
+      String message = "Parameter " + parameter + " can only be specified once";
+      LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(message));
-
-  public static Logger getExceptionHanlderLogger(){
-    return LOGGER;   
-  }
-
-
