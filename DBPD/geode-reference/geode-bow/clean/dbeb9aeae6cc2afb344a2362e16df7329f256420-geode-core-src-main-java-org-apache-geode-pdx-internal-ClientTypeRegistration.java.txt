Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.logging.log4j.Logger;
+
-import org.apache.logging.log4j.Logger;
-        //ignore, try the next pool.
+        // ignore, try the next pool.
-      logger.debug("Received an exception sending pdx type to pool {}, {}", pool, serverConnectivityException.getMessage(), serverConnectivityException);
+      logger.debug("Received an exception sending pdx type to pool {}, {}", pool,
+          serverConnectivityException.getMessage(), serverConnectivityException);
-        logger.debug("Received an exception getting pdx type from pool {}, {}", pool, e.getMessage(), e);
-        //ignore, try the next pool.
+        logger.debug("Received an exception getting pdx type from pool {}, {}", pool,
+            e.getMessage(), e);
+        // ignore, try the next pool.
-    for (Iterator<Pool> itr = pools.iterator(); itr.hasNext(); ) {
+    for (Iterator<Pool> itr = pools.iterator(); itr.hasNext();) {
-      throw new CacheClosedException("Client pools have been closed so the PDX type registry is not available.");
+      throw new CacheClosedException(
+          "Client pools have been closed so the PDX type registry is not available.");
-    //do nothing
+    // do nothing
-    //do nothing
+    // do nothing
-    //do nothing
+    // do nothing
-    //do nothing
+    // do nothing
-        //ignore, try the next pool.
+        // ignore, try the next pool.
-      logger.debug("Received an exception sending pdx type to pool {}, {}", pool, serverConnectivityException.getMessage(), serverConnectivityException);
+      logger.debug("Received an exception sending pdx type to pool {}, {}", pool,
+          serverConnectivityException.getMessage(), serverConnectivityException);
-        logger.debug("Received an exception getting pdx type from pool {}, {}", pool, e.getMessage(), e);
-        //ignore, try the next pool.
+        logger.debug("Received an exception getting pdx type from pool {}, {}", pool,
+            e.getMessage(), e);
+        // ignore, try the next pool.
-  @SuppressWarnings({ "unchecked", "serial" })
+  @SuppressWarnings({"unchecked", "serial"})
-  @SuppressWarnings({ "unchecked", "serial" })
+  @SuppressWarnings({"unchecked", "serial"})
-  public void testClearRegistry() {
-  }
+  public void testClearRegistry() {}
-        return;
-        //ignore, try the next pool.
+        break;
+    if (lastException == null) {
+      return;
+    }
-        //ignore, try the next pool.
+        break;
+    if (lastException == null) {
+      return;
+    }
-  private RuntimeException returnCorrectExceptionForFailure(final Collection<Pool> pools, final int typeId, final ServerConnectivityException lastException) {
+  private RuntimeException returnCorrectExceptionForFailure(final Collection<Pool> pools,
+      final int typeId, final ServerConnectivityException lastException) {
