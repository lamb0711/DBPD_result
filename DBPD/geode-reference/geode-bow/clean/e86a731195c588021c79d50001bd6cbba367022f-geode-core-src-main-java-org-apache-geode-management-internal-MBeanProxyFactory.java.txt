Merge branch 'release/1.3.0'

- * 
+ *
- * 
+ *
- * 
- * 
-  /**
-   * For Future release
-   */
-  private RemoteFilterChain remoteFilterChain;
-   * 
-   * @param remoteFilterChain remote chain to filter out remote members
-  public MBeanProxyFactory(RemoteFilterChain remoteFilterChain, MBeanJMXAdapter jmxAdapter,
-      SystemManagementService service) {
+  public MBeanProxyFactory(MBeanJMXAdapter jmxAdapter, SystemManagementService service) {
-    this.remoteFilterChain = remoteFilterChain;
-   * @throws ManagementException
+      String name = objectName.toString();
+      FederationComponent federationComponent = (FederationComponent) monitoringRegion.get(name);
+      String interfaceClassName = federationComponent.getMBeanInterfaceClass();
-      /*
-       * Check the complete filter chain to evaluate the applicability of the MBean
-       */
-
-      if (remoteFilterChain.isFiltered(objectName, member, "")) {
-        if (logger.isTraceEnabled()) {
-          logger.trace("Returning from filter");
-        }
-
-        return;
-      }
-
-      Class interfaceClass = ClassLoadUtil
-          .classFromName(((FederationComponent) monitoringRegion.get(objectName.toString()))
-              .getMBeanInterfaceClass());
+      Class interfaceClass = ClassLoadUtil.classFromName(interfaceClassName);
-    } catch (ClassNotFoundException e) {
+    } catch (ClassNotFoundException | IntrospectionException e) {
-    } catch (IntrospectionException e) {
-      throw new ManagementException(e);
-    } catch (ManagementException e) {
-      throw e;
-   * 
+   *
-    /*
-     * Check for member and server group filters if the member is filtered no need to proceed
-     * further
-     */
-
-    if (remoteFilterChain.isServerGroupFiltered("")) {
-      if (logger.isTraceEnabled()) {
-        logger.trace("Returning from server group filter");
-      }
-      return;
-
-    }
-    if (remoteFilterChain.isManagedNodeFiltered(member)) {
-      if (logger.isTraceEnabled()) {
-        logger.trace("returning from managed node filter");
-      }
-      return;
-    }
-    Iterator<String> it = mbeanNames.iterator();
-
-    while (it.hasNext()) {
+    for (String mbeanName : mbeanNames) {
-      /*
-       * This is for MBean filter check. If filtered MBean wont be registered
-       */
-
-      if (remoteFilterChain.isRemoteMBeanFiltered(objectName)) {
-        if (logger.isTraceEnabled()) {
-          logger.trace("continue  from remote MBEan node filter");
-        }
-
-        continue;
-      }
-        objectName = ObjectName.getInstance(it.next());
+        objectName = ObjectName.getInstance(mbeanName);
-      } catch (ManagementException e) {
-        logger.warn("Create Proxy failed for {} with exception {}", objectName, e.getMessage(), e);
-        continue;
-        continue;
-      Object val = null;
+      Object val;
-        continue;
-      if (!remoteFilterChain.isRemoteMBeanFiltered(objectName)) {
-        ProxyInfo proxyInfo = proxyRepo.findProxyInfo(objectName);
-        proxyRepo.removeProxy(member, objectName);
-        if (proxyInfo != null) {
-          service.afterRemoveProxy(objectName, proxyInfo.getProxyInterface(),
-              proxyInfo.getProxyInstance(), (FederationComponent) oldVal);
-        }
-        jmxAdapter.unregisterMBean(objectName);
-        if (logger.isDebugEnabled()) {
-          logger.debug("Removed proxy for ObjectName: {}", objectName);
-        }
+      ProxyInfo proxyInfo = proxyRepo.findProxyInfo(objectName);
+      proxyRepo.removeProxy(member, objectName);
+      if (proxyInfo != null) {
+        service.afterRemoveProxy(objectName, proxyInfo.getProxyInterface(),
+            proxyInfo.getProxyInstance(), (FederationComponent) oldVal);
+      }
+      jmxAdapter.unregisterMBean(objectName);
+
+      if (logger.isDebugEnabled()) {
+        logger.debug("Removed proxy for ObjectName: {}", objectName);
-
