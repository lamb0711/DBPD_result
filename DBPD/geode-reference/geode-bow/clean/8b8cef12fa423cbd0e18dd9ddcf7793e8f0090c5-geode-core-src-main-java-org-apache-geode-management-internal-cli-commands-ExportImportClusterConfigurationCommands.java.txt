GEODE-4893: Improve reloading the cluster configuration on existing vanilla servers


+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.distributed.ClusterConfigurationService;
-    InternalLocator locator = InternalLocator.getLocator();
+    InternalClusterConfigurationService sc =
+        (InternalClusterConfigurationService) getConfigurationService();
-    if (!locator.isSharedConfigurationRunning()) {
-      ErrorResultData errorData = ResultBuilder.createErrorResultData();
-      errorData.addLine(CliStrings.SHARED_CONFIGURATION_NOT_STARTED);
-      return ResultBuilder.buildResult(errorData);
+    if (sc == null) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings.SHARED_CONFIGURATION_NOT_STARTED);
-    Set<String> regionsWithData = servers.stream().map(this::getRegionNamesOnServer)
-        .flatMap(Collection::stream).collect(toSet());
+    // check if running servers are vanilla servers
+    if (servers.size() > 0) {
+      Set<String> groupNames = sc.getConfigurationRegion().keySet();
+      for (String groupName : groupNames) {
+        CacheConfig cacheConfig = sc.getCacheConfig(groupName);
+        if (cacheConfig.getRegion().size() > 0 || cacheConfig.getAsyncEventQueue().size() > 0
+            || cacheConfig.getDiskStore().size() > 0
+            || cacheConfig.getCustomCacheElements().size() > 0
+            || cacheConfig.getJndiBindings().size() > 0 || cacheConfig.getGatewayReceiver() != null
+            || cacheConfig.getGatewaySender().size() > 0) {
+          return ResultBuilder.createGemFireErrorResult(
+              "Running servers have existing cluster configuration applied already.");
+        }
+      }
-    if (!regionsWithData.isEmpty()) {
-      return ResultBuilder
-          .createGemFireErrorResult("Cannot import cluster configuration with existing regions: "
-              + regionsWithData.stream().collect(joining(",")));
+      // further checks in case any servers has regions not defined by the cluster configuration to
+      // avoid data loss.
+      Set<String> serverRegionNames = servers.stream().map(this::getRegionNamesOnServer)
+          .flatMap(Collection::stream).collect(toSet());
+
+      if (!serverRegionNames.isEmpty()) {
+        return ResultBuilder
+            .createGemFireErrorResult("Cannot import cluster configuration with existing regions: "
+                + serverRegionNames.stream().collect(joining(",")));
+      }
-    InternalClusterConfigurationService sc = locator.getSharedConfiguration();
-
-    Set<CliFunctionResult> functionResults =
-        servers.stream().map(this::reCreateCache).collect(toSet());
+    if (servers.size() > 0) {
+      List<CliFunctionResult> functionResults =
+          executeAndGetFunctionResult(new RecreateCacheFunction(), null, servers);
-    for (CliFunctionResult functionResult : functionResults) {
-      if (functionResult.isSuccessful()) {
-        infoData.addLine("Successfully applied the imported cluster configuration on "
-            + functionResult.getMemberIdOrName());
-      } else {
-        infoData.addLine("Failed to apply the imported cluster configuration on "
-            + functionResult.getMemberIdOrName() + " due to " + functionResult.getMessage());
+      for (CliFunctionResult functionResult : functionResults) {
+        if (functionResult.isSuccessful()) {
+          infoData.addLine("Successfully applied the imported cluster configuration on "
+              + functionResult.getMemberIdOrName());
+        } else {
+          infoData.addLine("Failed to apply the imported cluster configuration on "
+              + functionResult.getMemberIdOrName() + " due to " + functionResult.getMessage());
+        }
-  private CliFunctionResult reCreateCache(DistributedMember server) {
-    ResultCollector rc = executeFunction(new RecreateCacheFunction(), null, server);
-    List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
-
-    return results.get(0);
-  }
-
