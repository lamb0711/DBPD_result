Merge branch 'release/1.3.0'

+import java.util.List;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.internal.security.IntegratedSecurityService;
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
-    Object array[] = DataCommands.replaceGfshEnvVar(query, CommandExecutionContext.getShellEnv());
-    query = (String) array[1];
-        IntegratedSecurityService.getSecurityService().authorizeRegionRead(region);
+        cache.getSecurityService().authorize(Resource.DATA, Operation.READ, region);
-            DataCommands.getQueryRegionsAssociatedMembers(regionsInQuery, cache, false);
+            DataCommandsUtils.getQueryRegionsAssociatedMembers(regionsInQuery, cache, false);
-          Subject subject = IntegratedSecurityService.getSecurityService().getSubject();
+          Subject subject = cache.getSecurityService().getSubject();
-          dataResult = DataCommands.callFunctionForRegion(request, function, members);
+          dataResult = callFunctionForRegion(request, function, members);
+
+  public static DataCommandResult callFunctionForRegion(DataCommandRequest request,
+      DataCommandFunction putfn, Set<DistributedMember> members) {
+
+    if (members.size() == 1) {
+      DistributedMember member = members.iterator().next();
+      ResultCollector collector =
+          FunctionService.onMember(member).setArguments(request).execute(putfn);
+      List list = (List) collector.getResult();
+      Object object = list.get(0);
+      if (object instanceof Throwable) {
+        Throwable error = (Throwable) object;
+        DataCommandResult result = new DataCommandResult();
+        result.setErorr(error);
+        result.setErrorString(error.getMessage());
+        return result;
+      }
+      DataCommandResult result = (DataCommandResult) list.get(0);
+      result.aggregate(null);
+      return result;
+    } else {
+      ResultCollector collector =
+          FunctionService.onMembers(members).setArguments(request).execute(putfn);
+      List list = (List) collector.getResult();
+      DataCommandResult result = null;
+      for (Object object : list) {
+        if (object instanceof Throwable) {
+          Throwable error = (Throwable) object;
+          result = new DataCommandResult();
+          result.setErorr(error);
+          result.setErrorString(error.getMessage());
+          return result;
+        }
+
+        if (result == null) {
+          result = (DataCommandResult) object;
+          result.aggregate(null);
+        } else {
+          result.aggregate((DataCommandResult) object);
+        }
+      }
+      return result;
+    }
+  }
