Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The ThreadUtils class is an abstract utility class for working with and invoking methods on Threads.
+ * The ThreadUtils class is an abstract utility class for working with and invoking methods on
+ * Threads.
+ * 
+   * 
-   * @return a String value indicating the name of the Thread or null if the Thread object reference is null.
+   * @return a String value indicating the name of the Thread or null if the Thread object reference
+   *         is null.
+   * 
+   * 
-   * @return a boolean value indicating whether the specified Thread is alive.  Will return false if the Thread Object
-   * references is null.
+   * @return a boolean value indicating whether the specified Thread is alive. Will return false if
+   *         the Thread Object references is null.
-   * Determines whether the specified Thread is in a waiting state, guarding against null Object references
+   * Determines whether the specified Thread is in a waiting state, guarding against null Object
+   * references
+   * 
-   * @return a boolean value indicating whether the Thread is in a waiting state.  If the Thread Object reference
-   * is null, then this method return false, as no Thread is clearly not waiting for anything.
+   * @return a boolean value indicating whether the Thread is in a waiting state. If the Thread
+   *         Object reference is null, then this method return false, as no Thread is clearly not
+   *         waiting for anything.
-   * Causes the current Thread to sleep for the specified number of milliseconds.  If the current Thread is interrupted
-   * during sleep, the interrupt flag on the current Thread will remain set and the duration, in milliseconds, of completed sleep is returned.
+   * Causes the current Thread to sleep for the specified number of milliseconds. If the current
+   * Thread is interrupted during sleep, the interrupt flag on the current Thread will remain set
+   * and the duration, in milliseconds, of completed sleep is returned.
-   * @param milliseconds an integer value specifying the number of milliseconds the current Thread should sleep.
-   * @return a long value indicating duration in milliseconds of completed sleep by the current Thread.
+   * 
+   * @param milliseconds an integer value specifying the number of milliseconds the current Thread
+   *        should sleep.
+   * @return a long value indicating duration in milliseconds of completed sleep by the current
+   *         Thread.
-    }
-    catch (InterruptedException ignore) {
+    } catch (InterruptedException ignore) {
-   * @param throwable
-   *          The throwable for which to create the stack trace.
-   * @param expectNull
-   *          True if null should be returned when {@code throwable} is null or
-   *          false to return "" when {@code throwable} is null
-   * @return null if {@code throwable} is null and {@code expectNull} is true,
-   *         "" if {@code throwable} is null and {@code expectNull} is false,
-   *         otherwise the stack trace for {@code throwable}
+   * @param throwable The throwable for which to create the stack trace.
+   * @param expectNull True if null should be returned when {@code throwable} is null or false to
+   *        return "" when {@code throwable} is null
+   * @return null if {@code throwable} is null and {@code expectNull} is true, "" if
+   *         {@code throwable} is null and {@code expectNull} is false, otherwise the stack trace
+   *         for {@code throwable}
-      
+
-    
+
