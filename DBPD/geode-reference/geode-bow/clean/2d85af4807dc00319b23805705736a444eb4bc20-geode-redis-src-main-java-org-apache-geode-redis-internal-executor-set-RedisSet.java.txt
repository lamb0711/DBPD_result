GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

-import org.apache.geode.InvalidDeltaException;
+import org.apache.geode.redis.internal.AbstractRedisData;
+import org.apache.geode.redis.internal.AddsDeltaInfo;
+import org.apache.geode.redis.internal.DeltaInfo;
+import org.apache.geode.redis.internal.RemsDeltaInfo;
-public class RedisSet implements RedisData {
+public class RedisSet extends AbstractRedisData {
-  public static transient RedisSet EMPTY = new EmptyRedisSet();
+  public static final RedisSet EMPTY = new EmptyRedisSet();
-  private transient ArrayList<ByteArrayWrapper> deltas;
-  // true if deltas contains adds; false if removes
-  private transient boolean deltasAreAdds;
-        continue;
-      this.deltasAreAdds = false;
-      this.deltas = popped;
-      try {
-        region.put(key, this);
-      } finally {
-        this.deltas = null;
-      }
+      storeChanges(region, key, new RemsDeltaInfo(popped));
-  // DELTA
-  @Override
-  public boolean hasDelta() {
-    return deltas != null;
-  }
-  public void toDelta(DataOutput out) throws IOException {
-    DataSerializer.writeBoolean(deltasAreAdds, out);
-    DataSerializer.writeArrayList(deltas, out);
-  }
-
-  @Override
-  public void fromDelta(DataInput in)
-      throws IOException, InvalidDeltaException {
-    boolean deltaAdds = DataSerializer.readBoolean(in);
-    try {
-      ArrayList<ByteArrayWrapper> deltas = DataSerializer.readArrayList(in);
-      if (deltas != null) {
-        if (deltaAdds) {
-          members.addAll(deltas);
-        } else {
-          members.removeAll(deltas);
-        }
-      }
-    } catch (ClassNotFoundException e) {
-      throw new RuntimeException(e);
+  protected void applyDelta(DeltaInfo deltaInfo) {
+    if (deltaInfo instanceof AddsDeltaInfo) {
+      AddsDeltaInfo addsDeltaInfo = (AddsDeltaInfo) deltaInfo;
+      members.addAll(addsDeltaInfo.getAdds());
+    } else {
+      RemsDeltaInfo remsDeltaInfo = (RemsDeltaInfo) deltaInfo;
+      members.removeAll(remsDeltaInfo.getRemoves());
+    super.toData(out);
+    super.fromData(in);
-      deltasAreAdds = true;
-      deltas = membersToAdd;
-      try {
-        region.put(key, this);
-      } finally {
-        deltas = null;
-      }
+      storeChanges(region, key, new AddsDeltaInfo(membersToAdd));
-      if (members.isEmpty()) {
-        region.remove(key);
-      } else {
-        deltasAreAdds = false;
-        deltas = membersToRemove;
-        try {
-          region.put(key, this);
-        } finally {
-          deltas = null;
-        }
-      }
+      storeChanges(region, key, new RemsDeltaInfo(membersToRemove));
-   * by future changes to this DeltaSet.
+   * by future changes to this instance.
+
+  @Override
+  protected boolean removeFromRegion() {
+    return members.isEmpty();
+  }
