Merge branch 'release/1.0.0-incubating.M3'

-
+import static org.junit.Assert.*;
+
-import junit.framework.TestCase;
-
-import com.gemstone.gemfire.cache.query.internal.parse.OQLLexerTokenTypes;
+ * Used by these tests:
+ *
+ * <li/>EquiJoinIntegrationTest
+ * <li/>IUMRCompositeIteratorJUnitTest
+ * <li/>IUMRMultiIndexesMultiRegionJUnitTest
+ * <li/>IUMRShuffleIteratorsJUnitTest
+ * <li/>IUMRSingleRegionJUnitTest
+ * <li/>IndexCreationJUnitTest
+ * <li/>IndexHintJUnitTest
+ * <li/>IndexMaintainceJUnitTest
+ * <li/>IndexUseJUnitTest
+ * <li/>IndexedMergeEquiJoinScenariosJUnitTest
+ * <li/>MultiRegionIndexUsageJUnitTest
+ * <li/>NonDistinctOrderByPartitionedJUnitTest
+ * <li/>NonDistinctOrderByReplicatedJUnitTest
+ * <li/>NonDistinctOrderByTestImplementation
+ * <li/>OrderByPartitionedJUnitTest
+ * <li/>OrderByReplicatedJUnitTest
+ * <li/>OrderByTestImplementation
+ * <li/>QueryIndexUsingXMLDUnitTest
+ * <li/>QueryREUpdateInProgressJUnitTest
+ * <li/>QueryUsingFunctionContextDUnitTest
+ * <li/>QueryUsingPoolDUnitTest
+ * <li/>TestNewFunctionSSorRSIntegrationTest
+ *
+ * Also used by:
+ *
+ * <li/>GroupByTestImpl
+ * <li/>PdxGroupByTestImpl
+ * <li/>PRQueryDUnitHelper
-public class StructSetOrResultsSet extends TestCase {
+public class StructSetOrResultsSet {
- 
-  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len,
-      String queries[]) {
+  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len, String queries[]) {
-  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len,
-      boolean checkOrder, String queries[]) {
+  public void CompareQueryResultsWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, String queries[]) {
-  public void compareExternallySortedQueriesWithOrderBy(String[] queries,
-      Object[][] baseResults) throws Exception {
+  public void compareExternallySortedQueriesWithOrderBy(String[] queries, Object[][] baseResults) throws Exception {
-        fail("query with index=" + i + " has failed. failed query="
-            + queries[i]);
+        throw new AssertionError("query with index=" + i + " has failed. failed query=" + queries[i], e);
-
-  private void compareQueryResultsWithExternallySortedResults(SelectResults sr,
-      Object[] externallySorted, String query, Wrapper wrapper) {
+  private void compareQueryResultsWithExternallySortedResults(SelectResults sr, Object[] externallySorted, String query, Wrapper wrapper) {
-  public Wrapper getOrderByComparatorAndLimitForQuery(String orderByQuery,
-      int unorderedResultSize) throws FunctionDomainException,
-      TypeMismatchException, NameResolutionException,
-      QueryInvocationTargetException, NoSuchFieldException, SecurityException,
-      IllegalArgumentException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
+  public Wrapper getOrderByComparatorAndLimitForQuery(String orderByQuery, int unorderedResultSize)
+  throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
-
-  public void CompareCountStarQueryResultsWithoutAndWithIndexes(Object[][] r,
-      int len, boolean checkOrder, String queries[]) {
+  public void CompareCountStarQueryResultsWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, String queries[]) {
-      
-   *
-   * @param r
-   *          Array of ArrayLists
-   * @param len
-   *          Length of array of ArrayLists
-   * @param checkOrder
-   * @param queries
-  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r,
-      int len, boolean checkOrder, String queries[]) {
+  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, String queries[]) {
-  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r,
-      int len, boolean checkOrder, boolean checkClass, String queries[]) {
+  public void CompareQueryResultsAsListWithoutAndWithIndexes(Object[][] r, int len, boolean checkOrder, boolean checkClass, String queries[]) {
-  public void compareQueryResultLists(List r1, List r2,
-      int len, boolean checkOrder, boolean checkClass, String query) {
+  public void compareQueryResultLists(List r1, List r2, int len, boolean checkOrder, boolean checkClass, String query) {
-  
-  
+
