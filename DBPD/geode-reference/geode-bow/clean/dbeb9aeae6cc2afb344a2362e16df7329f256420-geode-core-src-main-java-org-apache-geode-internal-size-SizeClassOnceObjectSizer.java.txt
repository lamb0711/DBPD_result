Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An implementation of {@link ObjectSizer} that calculates an accurate, in
- * memory size of for the first instance of each class that it sees. After the
- * first size calculation, it will return the same size for every instance of
- * that class.
+ * An implementation of {@link ObjectSizer} that calculates an accurate, in memory size of for the
+ * first instance of each class that it sees. After the first size calculation, it will return the
+ * same size for every instance of that class.
- * This sizer is a compromise between generating accurate sizes for every object
- * and performance. It should work well for objects that are fairly constant
- * in size. For completely accurate sizing, use {@link ReflectionObjectSizer}
+ * This sizer is a compromise between generating accurate sizes for every object and performance. It
+ * should work well for objects that are fairly constant in size. For completely accurate sizing,
+ * use {@link ReflectionObjectSizer}
-  
+
-  
-  private transient final Map<Class, Integer> savedSizes = new CopyOnWriteWeakHashMap<Class, Integer>();
-  
+
+  private transient final Map<Class, Integer> savedSizes =
+      new CopyOnWriteWeakHashMap<Class, Integer>();
+
-  
+
-    if(o == null) {
+    if (o == null) {
-    if(wellKnownObjectSize != 0) {
+    if (wellKnownObjectSize != 0) {
-    
-    //Now do the sizing
+
+    // Now do the sizing
-    if(size == null) {
+    if (size == null) {
-  
+
-  
-  //This object is serializable because EvictionAttributes is serializable
-  //We want to resolve to the same singleton when deserializing
-  private void writeObject(java.io.ObjectOutputStream out)
-  throws IOException {
-    
+
+  // This object is serializable because EvictionAttributes is serializable
+  // We want to resolve to the same singleton when deserializing
+  private void writeObject(java.io.ObjectOutputStream out) throws IOException {
+
-  
+
-    throws IOException, ClassNotFoundException {
-  }
-  
+      throws IOException, ClassNotFoundException {}
+
-    
+
-    
+
