Merge branch 'develop' into feature/GEODE-3109

+import org.apache.geode.security.ResourcePermission.Target;
- * The will be one CacheServermBean per {@link CacheServer} started in GemFire node.
+ * The will be one CacheServerMBean per {@link CacheServer} started in GemFire node.
-  public int getPort();
+  int getPort();
-  public String getBindAddress();
+  String getBindAddress();
-  public int getSocketBufferSize();
+  int getSocketBufferSize();
-  public int getMaximumTimeBetweenPings();
+  int getMaximumTimeBetweenPings();
-  public int getMaxConnections();
+  int getMaxConnections();
-   * Returns the maxium number of threads allowed in this CacheServer to service client requests.
+   * Returns the maximum number of threads allowed in this CacheServer to service client requests.
-  public int getMaxThreads();
+  int getMaxThreads();
-  public int getMaximumMessageCount();
+  int getMaximumMessageCount();
-  public int getMessageTimeToLive();
+  int getMessageTimeToLive();
-  public long getLoadPollInterval();
+  long getLoadPollInterval();
-  public String getHostNameForClients();
+  String getHostNameForClients();
-  public ServerLoadData fetchLoadProbe();
+  ServerLoadData fetchLoadProbe();
-  public boolean isRunning();
+  boolean isRunning();
-  public int getCapacity();
+  int getCapacity();
-  public String getEvictionPolicy();
+  String getEvictionPolicy();
-  public String getDiskStoreName();
+  String getDiskStoreName();
-  public int getClientConnectionCount();
+  int getClientConnectionCount();
-  public int getCurrentClients();
+  int getCurrentClients();
-  public long getGetRequestAvgLatency();
+  long getGetRequestAvgLatency();
-  public long getPutRequestAvgLatency();
+  long getPutRequestAvgLatency();
-  public int getTotalConnectionsTimedOut();
+  int getTotalConnectionsTimedOut();
-  public int getTotalFailedConnectionAttempts();
+  int getTotalFailedConnectionAttempts();
-  public int getThreadQueueSize();
+  int getThreadQueueSize();
-  public int getConnectionThreads();
+  int getConnectionThreads();
-  public double getConnectionLoad();
+  double getConnectionLoad();
-  public double getLoadPerConnection();
+  double getLoadPerConnection();
-  public double getQueueLoad();
+  double getQueueLoad();
-  public double getLoadPerQueue();
+  double getLoadPerQueue();
-  public float getGetRequestRate();
+  float getGetRequestRate();
-  public float getPutRequestRate();
+  float getPutRequestRate();
-  public long getTotalSentBytes();
+  long getTotalSentBytes();
-  public long getTotalReceivedBytes();
+  long getTotalReceivedBytes();
-  public int getNumClientNotificationRequests();
+  int getNumClientNotificationRequests();
-  public long getClientNotificationAvgLatency();
+  long getClientNotificationAvgLatency();
-  public float getClientNotificationRate();
+  float getClientNotificationRate();
-  public long getRegisteredCQCount();
+  long getRegisteredCQCount();
-  public long getActiveCQCount();
+  long getActiveCQCount();
-  public float getQueryRequestRate();
+  float getQueryRequestRate();
-  public int getIndexCount();
+  int getIndexCount();
-  public String[] getIndexList();
+  String[] getIndexList();
-  public long getTotalIndexMaintenanceTime();
+  long getTotalIndexMaintenanceTime();
-  public void removeIndex(String indexName) throws Exception;
+  void removeIndex(String indexName) throws Exception;
-  public String[] getContinuousQueryList();
+  String[] getContinuousQueryList();
-  public void executeContinuousQuery(String queryName) throws Exception;
+  void executeContinuousQuery(String queryName) throws Exception;
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public void stopContinuousQuery(String queryName) throws Exception;
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
+  void stopContinuousQuery(String queryName) throws Exception;
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public void closeAllContinuousQuery(String regionName) throws Exception;
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
+  void closeAllContinuousQuery(String regionName) throws Exception;
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public void closeContinuousQuery(String queryName) throws Exception;
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
+  void closeContinuousQuery(String queryName) throws Exception;
-  public String[] getClientIds() throws Exception;
+  String[] getClientIds() throws Exception;
-  public ClientHealthStatus showClientStats(String clientId) throws Exception;
+  ClientHealthStatus showClientStats(String clientId) throws Exception;
-  public int getNumSubscriptions();
+  int getNumSubscriptions();
-  public ClientHealthStatus[] showAllClientStats() throws Exception;
+  ClientHealthStatus[] showAllClientStats() throws Exception;
-   * eventsEnqued,eventsRemoved , eventsConflated ,markerEventsConflated , eventsExpired,
+   * eventsEnqueued,eventsRemoved , eventsConflated ,markerEventsConflated , eventsExpired,
-  public ClientQueueDetail[] showClientQueueDetails() throws Exception;
+  ClientQueueDetail[] showClientQueueDetails() throws Exception;
-   * eventsEnqued,eventsRemoved , eventsConflated ,markerEventsConflated , eventsExpired,
+   * eventsEnqueued,eventsRemoved , eventsConflated ,markerEventsConflated , eventsExpired,
-  public ClientQueueDetail showClientQueueDetails(String clientId) throws Exception;
+  ClientQueueDetail showClientQueueDetails(String clientId) throws Exception;
