GEODE-5392: Cleanup javadocs and code style in AsyncInvocation

- *   ai1.join();
- *   ai2.join();
- *
- *   assertTrue("Exception occurred while invoking " + ai1,
- *              !ai1.exceptionOccurred());
- *   if (ai2.exceptionOccurred()) {
- *     throw ai2.getException();
- *   }
+ *   ai1.await();
+ *   ai2.await();
-  // TODO:davidw: Add the ability to get a return value back from the
-  // async method call. (Use a static ThreadLocal field that is
-  // accessible from the Runnable used in VM#invoke)
-  // TODO:?: reimplement using Futures
-
-    this.thread =
+    thread =
-    return this.target;
+    return target;
-    return this.methodName;
+    return methodName;
-    if (this.resultThrowable.get() instanceof RMIException) { // TODO:klund: delete our RMIException
-      return this.resultThrowable.get().getCause();
+    if (resultThrowable.get() instanceof RMIException) { // TODO: delete our RMIException
+      return resultThrowable.get().getCause();
-      return this.resultThrowable.get();
+      return resultThrowable.get();
-    if (this.resultThrowable.get() != null) {
+    if (resultThrowable.get() != null) {
-    return this.resultValue.get();
+    return resultValue.get();
-    return this.resultValue.get();
+    return resultValue.get();
-    this.thread.join(millis);
+    thread.join(millis);
-    this.thread.join(millis, nanos);
+    thread.join(millis, nanos);
-    this.thread.start();
+    thread.start();
-    return this.thread;
+    return thread;
-    return this.thread.isAlive();
+    return thread.isAlive();
-    return this.cancelled;
+    return cancelled;
-    return !this.thread.isAlive(); // state != NEW;
+    return !thread.isAlive(); // state != NEW;
-    if (this.thread.isAlive()) {
+    if (thread.isAlive()) {
-        this.cancelled = true;
-        this.thread.interrupt();
+        cancelled = true;
+        thread.interrupt();
-    return this.resultValue.get();
+    return resultValue.get();
-    return this.thread.getId();
+    return thread.getId();
-    if (this.thread.isAlive()) {
+    if (thread.isAlive()) {
-    if (this.thread.isAlive()) {
+    if (thread.isAlive()) {
