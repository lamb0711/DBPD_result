GEODE-6450: ClientClusterManagementService supports ssl connection (#3276)

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* provide capability for the client to configure ssl connection when getting the cluster management service.
* from the server side, create the SSLContext from the ssl configuration specified on the server
* refactor ssl code

+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLContext;
+
+import org.apache.http.auth.AuthScope;
+import org.apache.http.auth.UsernamePasswordCredentials;
+import org.apache.http.client.CredentialsProvider;
+import org.apache.http.impl.client.BasicCredentialsProvider;
+import org.apache.http.impl.client.HttpClientBuilder;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.MediaType;
+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
+  public ClientClusterManagementService(String host, int port, SSLContext sslContext,
+      HostnameVerifier hostnameVerifier, String username, String password) {
+    this();
+
+    DefaultUriTemplateHandler templateHandler = new DefaultUriTemplateHandler();
+    String schema = (sslContext == null) ? "http" : "https";
+    templateHandler.setBaseUrl(schema + "://" + host + ":" + port + "/geode-management/v2");
+    restTemplate.setUriTemplateHandler(templateHandler);
+
+    // HttpComponentsClientHttpRequestFactory allows use to preconfigure httpClient for
+    // authentication and ssl context
+    HttpComponentsClientHttpRequestFactory requestFactory =
+        new HttpComponentsClientHttpRequestFactory();
+
+    HttpClientBuilder clientBuilder = HttpClientBuilder.create();
+    // configures the clientBuilder
+    if (username != null) {
+      CredentialsProvider credsProvider = new BasicCredentialsProvider();
+      credsProvider.setCredentials(new AuthScope(host, port),
+          new UsernamePasswordCredentials(username, password));
+      clientBuilder.setDefaultCredentialsProvider(credsProvider);
+    }
+
+    clientBuilder.setSSLContext(sslContext);
+    clientBuilder.setSSLHostnameVerifier(hostnameVerifier);
+
+    requestFactory.setHttpClient(clientBuilder.build());
+    restTemplate.setRequestFactory(requestFactory);
+  }
+
-  public ClientClusterManagementService(String clusterUrl) {
-    this();
-    DefaultUriTemplateHandler templateHandler = new DefaultUriTemplateHandler();
-    templateHandler.setBaseUrl(clusterUrl);
-    restTemplate.setUriTemplateHandler(templateHandler);
-  }
-
-
+    HttpHeaders headers = new HttpHeaders();
+    headers.setContentType(MediaType.APPLICATION_JSON);
-    return restTemplate.postForEntity(endPoint, config, ClusterManagementResult.class).getBody();
+    return restTemplate.postForObject(endPoint, config, ClusterManagementResult.class);
-    throw new NotImplementedException("Not implemented");
+    throw new NotImplementedException("Not Implemented");
-    throw new NotImplementedException("Not implemented");
+    throw new NotImplementedException("Not Implemented");
+
