Introduce RedisResponse to SET executors (#5114)


-import org.apache.geode.redis.internal.Coder;
+import org.apache.geode.redis.internal.RedisResponse;
-  public void executeCommand(Command command, ExecutionHandlerContext context) {
+  public RedisResponse executeCommandWithResponse(Command command,
+      ExecutionHandlerContext context) {
+    RedisResponse response;
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
-        return;
+        return RedisResponse.integer(NOT_MOVED);
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
-      } else {
-        try (AutoCloseableLock destinationLock = withRegionLock(context, destination)) {
-          // TODO: this should invoke a function in case the primary for destination is remote
-          new RedisSetInRegion(region).sadd(destination,
-              new ArrayList<>(Collections.singletonList(member)));
+        return RedisResponse.integer(NOT_MOVED);
+      }
-          command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), MOVED));
-        } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          System.out.println("Interrupt exception!!");
-          command.setResponse(
-              Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-          return;
-        } catch (TimeoutException e) {
-          System.out.println("Timeout exception!!");
-          command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-              "Timeout acquiring lock. Please try again."));
-          return;
-        } catch (Exception e) {
-          System.out.println("Unexpected exception: " + e);
-          command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-              "Unexpected exception."));
-        }
+      try (AutoCloseableLock destinationLock = withRegionLock(context, destination)) {
+        // TODO: this should invoke a function in case the primary for destination is remote
+        new RedisSetInRegion(region).sadd(destination,
+            new ArrayList<>(Collections.singletonList(member)));
+
+        response = RedisResponse.integer(MOVED);
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+        response = RedisResponse.error("Thread interrupted");
+      } catch (TimeoutException e) {
+        response = RedisResponse.error("Timeout acquiring lock. Please try again.");
+      } catch (Exception e) {
+        response = RedisResponse.error("Unexpected exception.");
-      System.out.println("Interrupt exception!!");
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
+      response = RedisResponse.error("Thread interrupted.");
-      System.out.println("Timeout exception!!");
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
-      return;
+      response = RedisResponse.error("Timeout acquiring lock. Please try again.");
-      System.out.println("Unexpected exception: " + e);
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Unexpected exception."));
+      response = RedisResponse.error("Unexpected exception.");
+
+    return response;
