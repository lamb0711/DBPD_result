GEODE-6033: Add VMEventListener for DUnit Rules (#3161)

A DUnit Rule (or even a test) can now register a VMEventListener:

VM.getVMEventListenerRegistry().addVMEventListener(vmEventListener);

VMEventListeners will receive the following notifications:

void afterCreateVM(VM vm);
void beforeBounceVM(VM vm);
void afterBounceVM(VM vm);

DUnit Rules can use these callbacks in order to support dynamic 
creation or bouncing of VMs.

Add junitparams dependency to geode-dunit.

-import static org.apache.geode.test.dunit.VM.getVMCount;
-import static org.assertj.core.api.Assertions.assertThat;
+import org.apache.geode.test.dunit.VM;
+import org.apache.geode.test.dunit.VMEventListener;
-  private volatile int beforeVmCount;
-
-
-  public Statement apply(final Statement base, final Description description) {
-    return statement(base, description);
+  public Statement apply(final Statement statement, final Description description) {
+    return statement(statement, description);
-  private Statement statement(final Statement base, Description testDescription) {
+  private Statement statement(final Statement baseStatement, final Description description) {
-        beforeDistributedTest(testDescription);
+        VMEventListener vmEventListener = new InternalVMEventListener();
+        beforeDistributedTest(description);
+        VM.addVMEventListener(vmEventListener);
-          base.evaluate();
+          baseStatement.evaluate();
-          afterDistributedTest(testDescription);
+          VM.removeVMEventListener(vmEventListener);
+          afterDistributedTest(description);
-  private void beforeDistributedTest(Description testDescription) throws Throwable {
-    TestHistoryLogger.logTestHistory(testDescription.getTestClass().getSimpleName(),
-        testDescription.getMethodName());
+  private void beforeDistributedTest(final Description description) throws Throwable {
+    TestHistoryLogger.logTestHistory(description.getTestClass().getSimpleName(),
+        description.getMethodName());
-    beforeVmCount = getVMCount();
-    System.out.println("\n\n[setup] START TEST " + testDescription.getClassName() + "."
-        + testDescription.getMethodName());
+    System.out.println("\n\n[setup] START TEST " + description.getClassName() + "."
+        + description.getMethodName());
-  private void afterDistributedTest(Description testDescription) throws Throwable {
-    System.out.println("\n\n[setup] END TEST " + testDescription.getTestClass().getSimpleName()
-        + "." + testDescription.getMethodName());
-    int afterVmCount = getVMCount();
-    assertThat(afterVmCount).isEqualTo(beforeVmCount);
+  private void afterDistributedTest(final Description description) throws Throwable {
+    System.out.println("\n\n[setup] END TEST " + description.getTestClass().getSimpleName()
+        + "." + description.getMethodName());
-    // override
+    // override if needed
-    // override
+    // override if needed
+
+  protected void afterCreateVM(VM vm) {
+    // override if needed
+  }
+
+  protected void beforeBounceVM(VM vm) {
+    // override if needed
+  }
+
+  protected void afterBounceVM(VM vm) {
+    // override if needed
+  }
+
+  private class InternalVMEventListener implements VMEventListener {
+
+    @Override
+    public void afterCreateVM(VM vm) {
+      AbstractDistributedRule.this.afterCreateVM(vm);
+    }
+
+    @Override
+    public void beforeBounceVM(VM vm) {
+      AbstractDistributedRule.this.beforeBounceVM(vm);
+    }
+
+    @Override
+    public void afterBounceVM(VM vm) {
+      AbstractDistributedRule.this.afterBounceVM(vm);
+    }
+  }
