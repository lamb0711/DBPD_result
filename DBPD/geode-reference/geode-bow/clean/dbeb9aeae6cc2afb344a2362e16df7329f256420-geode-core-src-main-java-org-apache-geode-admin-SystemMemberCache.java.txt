Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Administrative interface that represent's the {@link SystemMember}'s view
- * of its {@link org.apache.geode.cache.Cache}.
+ * Administrative interface that represent's the {@link SystemMember}'s view of its
+ * {@link org.apache.geode.cache.Cache}.
- * @since GemFire     3.5
- * @deprecated as of 7.0 use the <code><a href="{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code> package instead
+ * @since GemFire 3.5
+ * @deprecated as of 7.0 use the <code><a href=
+ *             "{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code>
+ *             package instead
+
+
+   * 
+
-   * Gets the number of seconds a cache operation will wait to obtain
-   * a distributed lock lease.
+   * Gets the number of seconds a cache operation will wait to obtain a distributed lock lease.
+
-   * Sets the number of seconds a cache operation may wait to obtain a
-   * distributed lock lease before timing out.
+   * Sets the number of seconds a cache operation may wait to obtain a distributed lock lease before
+   * timing out.
-   * @throws AdminException
-   *         If a problem is encountered while setting the lock
-   *         timeout 
+   * @throws AdminException If a problem is encountered while setting the lock timeout
-  
+
-   * Gets the length, in seconds, of distributed lock leases obtained
-   * by this cache.
+   * Gets the length, in seconds, of distributed lock leases obtained by this cache.
+
-   * Sets the length, in seconds, of distributed lock leases obtained
-   * by this cache.
+   * Sets the length, in seconds, of distributed lock leases obtained by this cache.
-   * @throws AdminException
-   *         If a problem is encountered while setting the lock
-   *         lease
+   * @throws AdminException If a problem is encountered while setting the lock lease
-  
+
-   * Gets the number of seconds a cache
-   * {@link org.apache.geode.cache.Region#get(Object) get} operation
-   * can spend searching for a value before it times out.
-   * The search includes any time spent loading the object.
-   * When the search times out it causes the get to fail by throwing
-   * an exception.
+   * Gets the number of seconds a cache {@link org.apache.geode.cache.Region#get(Object) get}
+   * operation can spend searching for a value before it times out. The search includes any time
+   * spent loading the object. When the search times out it causes the get to fail by throwing an
+   * exception.
+
-   * Sets the number of seconds a cache get operation can spend searching
-   * for a value.
+   * Sets the number of seconds a cache get operation can spend searching for a value.
-   * @throws AdminException
-   *         If a problem is encountered while setting the search
-   *         timeout 
+   * @throws AdminException If a problem is encountered while setting the search timeout
+
-   * Returns number of seconds since this member's cache has been created.
-   * Returns <code>-1</code> if this member does not have a cache or its cache
-   * has been closed.
+   * Returns number of seconds since this member's cache has been created. Returns <code>-1</code>
+   * if this member does not have a cache or its cache has been closed.
-   * Return the existing region (or subregion) with the specified
-   * path that already exists in the cache.
-   * Whether or not the path starts with a forward slash it is interpreted as a
-   * full path starting at a root.
+   * Return the existing region (or subregion) with the specified path that already exists in the
+   * cache. Whether or not the path starts with a forward slash it is interpreted as a full path
+   * starting at a root.
-   * @param name
-   *        The name of the region to create
-   * @param attrs
-   *        The attributes of the root region
+   * @param name The name of the region to create
+   * @param attrs The attributes of the root region
-   * @throws AdminException
-   *         If the region cannot be created
+   * @throws AdminException If the region cannot be created
-  public SystemMemberRegion createVMRegion(String name,
-                                           RegionAttributes attrs)
-    throws AdminException;
+  public SystemMemberRegion createVMRegion(String name, RegionAttributes attrs)
+      throws AdminException;
-   * @param name
-   *        The name of the region to create
-   * @param attrs
-   *        The attributes of the root region
+   * @param name The name of the region to create
+   * @param attrs The attributes of the root region
-   * @throws AdminException
-   *         If the region cannot be created
+   * @throws AdminException If the region cannot be created
-  public SystemMemberRegion createRegion(String name,
-                                         RegionAttributes attrs)
-    throws AdminException;
+  public SystemMemberRegion createRegion(String name, RegionAttributes attrs) throws AdminException;
-   * Updates the state of this cache instance. Note that once a cache
-   * instance is closed refresh will never change the state of that instance.
+   * Updates the state of this cache instance. Note that once a cache instance is closed refresh
+   * will never change the state of that instance.
-   * Adds a new, unstarted cache server that will serve the contents
-   * of this cache to clients.
+   * Adds a new, unstarted cache server that will serve the contents of this cache to clients.
-  public SystemMemberCacheServer addCacheServer()
-    throws AdminException;
+  public SystemMemberCacheServer addCacheServer() throws AdminException;
-   * Returns the cache servers that run in this member's VM.  Note
-   * that this list will not be updated until {@link #refresh} is
-   * called.
+   * Returns the cache servers that run in this member's VM. Note that this list will not be updated
+   * until {@link #refresh} is called.
-  public SystemMemberCacheServer[] getCacheServers()
-    throws AdminException;
+  public SystemMemberCacheServer[] getCacheServers() throws AdminException;
-   * Returns whether or not this cache acts as a server.  This method
-   * will always return <code>true</code> for the
-   * <code>SystemMemberCache</code> obtained from a {@link
-   * CacheServer}.  Note that this value will not be updated until
-   * {@link #refresh} is invoked.
+   * Returns whether or not this cache acts as a server. This method will always return
+   * <code>true</code> for the <code>SystemMemberCache</code> obtained from a {@link CacheServer}.
+   * Note that this value will not be updated until {@link #refresh} is invoked.
