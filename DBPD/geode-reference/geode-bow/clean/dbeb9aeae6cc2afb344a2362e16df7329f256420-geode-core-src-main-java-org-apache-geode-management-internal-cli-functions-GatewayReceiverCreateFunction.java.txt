Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The function to a create GatewayReceiver using given configuration parameters. 
+ * The function to a create GatewayReceiver using given configuration parameters.
-public class GatewayReceiverCreateFunction extends FunctionAdapter implements
-    InternalEntity {
+public class GatewayReceiverCreateFunction extends FunctionAdapter implements InternalEntity {
-  
+
-  private static final String ID = GatewayReceiverCreateFunction.class
-      .getName();
+  private static final String ID = GatewayReceiverCreateFunction.class.getName();
-    String memberNameOrId = CliUtil.getMemberNameOrId(cache
-        .getDistributedSystem().getDistributedMember());
+    String memberNameOrId =
+        CliUtil.getMemberNameOrId(cache.getDistributedSystem().getDistributedMember());
-    GatewayReceiverFunctionArgs gatewayReceiverCreateArgs = (GatewayReceiverFunctionArgs)context
-        .getArguments();
+    GatewayReceiverFunctionArgs gatewayReceiverCreateArgs =
+        (GatewayReceiverFunctionArgs) context.getArguments();
-      GatewayReceiver createdGatewayReceiver = createGatewayReceiver(cache,
-          gatewayReceiverCreateArgs);
-      
+      GatewayReceiver createdGatewayReceiver =
+          createGatewayReceiver(cache, gatewayReceiverCreateArgs);
+
-      XmlEntity xmlEntity = XmlEntity.builder().withType(CacheXml.GATEWAY_RECEIVER).withAttributes(attributes).build();
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, xmlEntity, CliStrings
-          .format(
+      XmlEntity xmlEntity = XmlEntity.builder().withType(CacheXml.GATEWAY_RECEIVER)
+          .withAttributes(attributes).build();
+      resultSender.lastResult(new CliFunctionResult(memberNameOrId, xmlEntity,
+          CliStrings.format(
-              new Object[] { memberNameOrId, createdGatewayReceiver.getPort() })));
-      
-      
-    }
-    catch (IllegalStateException e) {
+              new Object[] {memberNameOrId, createdGatewayReceiver.getPort()})));
+
+
+    } catch (IllegalStateException e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-  private CliFunctionResult handleException(final String memberNameOrId,
-      final String exceptionMsg, final Exception e) {
+  private CliFunctionResult handleException(final String memberNameOrId, final String exceptionMsg,
+      final Exception e) {
-    
+
-   * @param     cache
-   * @param     gatewayReceiverCreateArgs
-   * @return    GatewayReceiver
+   * @param cache
+   * @param gatewayReceiverCreateArgs
+   * @return GatewayReceiver
-    GatewayReceiverFactory gatewayReceiverFactory = cache
-        .createGatewayReceiverFactory();
+    GatewayReceiverFactory gatewayReceiverFactory = cache.createGatewayReceiverFactory();
-    Integer maxTimeBetweenPings = gatewayReceiverCreateArgs
-        .getMaximumTimeBetweenPings();
+    Integer maxTimeBetweenPings = gatewayReceiverCreateArgs.getMaximumTimeBetweenPings();
-    
-    String[] gatewayTransportFilters = gatewayReceiverCreateArgs
-        .getGatewayTransportFilters();
+
+    String[] gatewayTransportFilters = gatewayReceiverCreateArgs.getGatewayTransportFilters();
-        gatewayReceiverFactory
-            .addGatewayTransportFilter((GatewayTransportFilter)newInstance(
-                gatewayTransportFilterKlass,
+        gatewayReceiverFactory.addGatewayTransportFilter(
+            (GatewayTransportFilter) newInstance(gatewayTransportFilterKlass,
-    }
-    catch (ClassNotFoundException e) {
-      throw new RuntimeException(CliStrings.format(
-          CliStrings.CREATE_REGION__MSG__COULDNOT_FIND_CLASS_0_SPECIFIED_FOR_1,
-          new Object[] { classToLoadName, neededFor }), e);
-    }
-    catch (ClassCastException e) {
+    } catch (ClassNotFoundException e) {
-          CliStrings
-              .format(
-                  CliStrings.CREATE_REGION__MSG__CLASS_SPECIFIED_FOR_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE,
-                  new Object[] { classToLoadName, neededFor }), e);
+          CliStrings.format(CliStrings.CREATE_REGION__MSG__COULDNOT_FIND_CLASS_0_SPECIFIED_FOR_1,
+              new Object[] {classToLoadName, neededFor}),
+          e);
+    } catch (ClassCastException e) {
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.CREATE_REGION__MSG__CLASS_SPECIFIED_FOR_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE,
+          new Object[] {classToLoadName, neededFor}), e);
-    }
-    catch (InstantiationException e) {
-      throw new RuntimeException(
-          CliStrings
-              .format(
-                  CliStrings.CREATE_GATEWAYSENDER__MSG__COULDNOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1,
-                  new Object[] { klass, neededFor }), e);
-    }
-    catch (IllegalAccessException e) {
-      throw new RuntimeException(
-          CliStrings
-              .format(
-                  CliStrings.CREATE_GATEWAYSENDER__MSG__COULDNOT_ACCESS_CLASS_0_SPECIFIED_FOR_1,
-                  new Object[] { klass, neededFor }), e);
+    } catch (InstantiationException e) {
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.CREATE_GATEWAYSENDER__MSG__COULDNOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1,
+          new Object[] {klass, neededFor}), e);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException(CliStrings.format(
+          CliStrings.CREATE_GATEWAYSENDER__MSG__COULDNOT_ACCESS_CLASS_0_SPECIFIED_FOR_1,
+          new Object[] {klass, neededFor}), e);
