GEODE-3319 - refactor to use protobuf encoding for primitive types. This now closes #661

+import org.apache.geode.protocol.protobuf.utilities.exception.UnknownProtobufPrimitiveType;
-   * 
+   *
-    BasicTypes.EncodingType resultEncodingType =
-        EncodingTypeTranslator.getEncodingTypeForObject(unencodedValue);
-    byte[] encodedValue = serializationService.encode(resultEncodingType, unencodedValue);
-    return BasicTypes.EncodedValue.newBuilder().setEncodingType(resultEncodingType)
-        .setValue(ByteString.copyFrom(encodedValue)).build();
+
+    try {
+      return createPrimitiveEncodedValue(unencodedValue);
+    } catch (UnknownProtobufPrimitiveType e) {
+      BasicTypes.EncodingType resultEncodingType =
+          EncodingTypeTranslator.getEncodingTypeForObject(unencodedValue);
+      byte[] encodedValue = serializationService.encode(resultEncodingType, unencodedValue);
+      BasicTypes.CustomEncodedValue.Builder customEncodedValueBuilder =
+          BasicTypes.CustomEncodedValue.newBuilder().setEncodingType(resultEncodingType)
+              .setValue(ByteString.copyFrom(encodedValue));
+      return BasicTypes.EncodedValue.newBuilder().setCustomEncodedValue(customEncodedValueBuilder)
+          .build();
+    }
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    BasicTypes.EncodingType encoding = encodedValue.getEncodingType();
-    byte[] bytes = encodedValue.getValue().toByteArray();
-    return serializationService.decode(encoding, bytes);
+
+    if (encodedValue.getValueCase() == BasicTypes.EncodedValue.ValueCase.CUSTOMENCODEDVALUE) {
+      BasicTypes.CustomEncodedValue customEncodedValue = encodedValue.getCustomEncodedValue();
+      return serializationService.decode(customEncodedValue.getEncodingType(),
+          customEncodedValue.getValue().toByteArray());
+    } else {
+      try {
+        return getPrimitiveValueFromEncodedValue(encodedValue);
+      } catch (UnknownProtobufPrimitiveType unknownProtobufPrimitiveType) {
+        throw new UnsupportedEncodingTypeException("Unknown primitive type encoding",
+            unknownProtobufPrimitiveType);
+      }
+    }
+
+
+  /**
+   * This will create an EncodedValue message for a primitive type.
+   *
+   * @param valueToEncode this represents the potential primitive value that needs to be encoded in
+   *        an EncodedValue
+   * @return EncodedValue message with the correct primitive value populated
+   * @throws UnknownProtobufPrimitiveType
+   */
+  static BasicTypes.EncodedValue createPrimitiveEncodedValue(Object valueToEncode)
+      throws UnknownProtobufPrimitiveType {
+    ProtobufPrimitiveTypes protobufPrimitiveTypes =
+        ProtobufPrimitiveTypes.valueOf(valueToEncode.getClass());
+    BasicTypes.EncodedValue.Builder builder = BasicTypes.EncodedValue.newBuilder();
+    switch (protobufPrimitiveTypes) {
+      case INT: {
+        builder.setIntResult((Integer) valueToEncode);
+        break;
+      }
+      case LONG: {
+        builder.setLongResult((Long) valueToEncode);
+        break;
+      }
+      case SHORT: {
+        builder.setShortResult((Short) valueToEncode);
+        break;
+      }
+      case BYTE: {
+        builder.setByteResult((Byte) valueToEncode);
+        break;
+      }
+      case DOUBLE: {
+        builder.setDoubleResult((Double) valueToEncode);
+        break;
+      }
+      case FLOAT: {
+        builder.setFloatResult((Float) valueToEncode);
+        break;
+      }
+      case BINARY: {
+        builder.setBinaryResult(ByteString.copyFrom((byte[]) valueToEncode));
+        break;
+      }
+      case BOOLEAN: {
+        builder.setBooleanResult((Boolean) valueToEncode);
+        break;
+      }
+      case STRING: {
+        builder.setStringResult((String) valueToEncode);
+        break;
+      }
+
+    }
+    return builder.build();
+  }
+
+  static Object getPrimitiveValueFromEncodedValue(BasicTypes.EncodedValue encodedValue)
+      throws UnknownProtobufPrimitiveType {
+    switch (encodedValue.getValueCase()) {
+      case BINARYRESULT:
+        return encodedValue.getBinaryResult().toByteArray();
+      case BOOLEANRESULT:
+        return encodedValue.getBooleanResult();
+      case BYTERESULT:
+        return (byte) encodedValue.getByteResult();
+      case DOUBLERESULT:
+        return encodedValue.getDoubleResult();
+      case FLOATRESULT:
+        return encodedValue.getFloatResult();
+      case INTRESULT:
+        return encodedValue.getIntResult();
+      case LONGRESULT:
+        return encodedValue.getLongResult();
+      case SHORTRESULT:
+        return (short) encodedValue.getShortResult();
+      case STRINGRESULT:
+        return encodedValue.getStringResult();
+      default:
+        throw new UnknownProtobufPrimitiveType(
+            "Unknown primitive type for: " + encodedValue.getValueCase());
+    }
+  }
