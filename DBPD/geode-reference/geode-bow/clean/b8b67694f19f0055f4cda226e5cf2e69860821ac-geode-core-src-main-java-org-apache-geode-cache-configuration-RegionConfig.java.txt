Merge branch 'develop' into feature/GEODE-7049

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.util.Objects;
-import javax.xml.bind.annotation.XmlTransient;
-import io.swagger.annotations.ApiModelProperty;
-import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.management.api.CorrespondWith;
-import org.apache.geode.management.api.RestfulEndpoint;
-import org.apache.geode.management.runtime.RuntimeInfo;
-import org.apache.geode.management.runtime.RuntimeRegionInfo;
+import org.apache.geode.lang.Identifiable;
+import org.apache.geode.management.configuration.RegionType;
-public class RegionConfig extends CacheElement implements RestfulEndpoint,
-    CorrespondWith<RuntimeRegionInfo> {
-
-  public static final String REGION_CONFIG_ENDPOINT = "/regions";
+public class RegionConfig implements Identifiable<String>, Serializable {
-  @ApiModelProperty(hidden = true)
-  @ApiModelProperty(hidden = true)
-  public RegionConfig(RegionConfig config) {
-    this.regionAttributes = config.getRegionAttributes();
-    this.type = config.getType();
-    this.entries = config.getEntries();
-    this.indexes = config.getIndexes();
-    this.name = config.getName();
-    this.regionElements = config.getCustomRegionElements();
-    this.regions = config.getRegions();
-    this.setGroup(config.getGroup());
-  }
-
-  @Override
-  public boolean isGlobalRuntime() {
-    return true;
-  }
-
-  @Override
-  @JsonIgnore
-  public String getEndpoint() {
-    return REGION_CONFIG_ENDPOINT;
-  }
-
-  @ApiModelProperty(hidden = true)
-    boolean regionPrefixedWithSlash = value.startsWith("/");
-    String[] regionSplit = value.split("/");
-
-    boolean hasSubRegions =
-        regionPrefixedWithSlash ? regionSplit.length > 2 : regionSplit.length > 1;
-    if (hasSubRegions) {
-      throw new IllegalArgumentException("Sub-regions are unsupported");
-    }
-
-    this.name = regionPrefixedWithSlash ? regionSplit[1] : value;
+    this.name = value.startsWith("/") ? value.substring(1) : value;
-  @Override
-  public boolean equals(Object that) {
-    if (this == that) {
-      return true;
-    }
-    if (that == null || getClass() != that.getClass()) {
-      return false;
-    }
-    RegionConfig config = (RegionConfig) that;
-    return Objects.equals(getName(), config.getName()) &&
-        Objects.equals(getType(), config.getType());
-  }
-
-  public static class Index extends CacheElement
-      implements RestfulEndpoint, CorrespondWith<RuntimeInfo> {
+  public static class Index implements Identifiable<String> {
-    @XmlTransient
-    protected String regionName;
-    public String getRegionName() {
-      return regionName;
-    }
-
-    public void setRegionName(String regionName) {
-      this.regionName = regionName;
-      if (StringUtils.isBlank(regionName)) {
-        return;
-      }
-
-      if (fromClause == null) {
-        fromClause = "/" + regionName;
-      } else if (!fromClause.contains(regionName)) {
-        throw new IllegalArgumentException(
-            "Invalid regionName for this index with fromClause = " + fromClause);
-      }
-    }
-
-
-    @Override
-    public String getEndpoint() {
-      if (StringUtils.isBlank(regionName)) {
-        return null;
-      }
-      return RegionConfig.REGION_CONFIG_ENDPOINT + "/" + regionName + "/indexes";
-    }
