GEODE-8303: refactor Redis (String)SetExecutor (#5216)


Co-authored-by: john Hutchison <hutchisonjo@vmware.com>
+import static java.lang.Long.parseLong;
+import java.util.Arrays;
+import java.util.stream.Collectors;
-    List<byte[]> commandElems = command.getProcessedCommand();
-    ByteArrayWrapper valueToSet = getValueToSet(commandElems);
-
+    List<byte[]> commandElementsBytes = command.getProcessedCommand();
+    List<byte[]> optionalParameterBytes = getOptionalParameters(commandElementsBytes);
+    ByteArrayWrapper valueToSet = getValueToSet(commandElementsBytes);
+
-      setOptions = parseCommandElems(commandElems);
+      setOptions = parseOptionalParameters(optionalParameterBytes);
-    return doSet(command, context, keyToSet, valueToSet, redisStringCommands, setOptions);
+    return doSet(keyToSet, valueToSet, redisStringCommands, setOptions);
-  private RedisResponse doSet(Command command, ExecutionHandlerContext context,
-      ByteArrayWrapper key,
-      ByteArrayWrapper value, RedisStringCommands redisStringCommands, SetOptions setOptions) {
+  private List<byte[]> getOptionalParameters(List<byte[]> commandElementsBytes) {
+    return commandElementsBytes.subList(3, commandElementsBytes.size());
+  }
-    boolean result = redisStringCommands.set(key, value, setOptions);
+  private RedisResponse doSet(ByteArrayWrapper key,
+      ByteArrayWrapper value,
+      RedisStringCommands redisStringCommands,
+      SetOptions setOptions) {
-    if (result) {
+    boolean setCompletedSuccessfully = redisStringCommands.set(key, value, setOptions);
+
+    if (setCompletedSuccessfully) {
+    } else {
+      return RedisResponse.nil();
-
-    return RedisResponse.nil();
+  private SetOptions parseOptionalParameters(List<byte[]> optionalParameterBytes)
+      throws IllegalArgumentException {
-  private SetOptions parseCommandElems(List<byte[]> commandElems) throws IllegalArgumentException {
-    long expiration = 0L;
+    long millisecondsUntilExpiration = 0L;
-    for (int i = 3; i < commandElems.size(); i++) {
-      String current_arg = Coder.bytesToString(commandElems.get(i)).toUpperCase();
-      switch (current_arg) {
-        case "KEEPTTL":
-          throw new IllegalArgumentException(ERROR_SYNTAX);
-          // KEEPTTL is part of Redis 6
-          // keepTTL = true;
-          // break;
-        case "EX":
-          if (expiration != 0) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          i++;
-          expiration = parseExpirationTime(i, commandElems);
-          expiration = SECONDS.toMillis(expiration);
-          break;
-        case "PX":
-          if (expiration != 0) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          i++;
-          expiration = parseExpirationTime(i, commandElems);
-          break;
-        case "NX":
-          if (existsOption != SetOptions.Exists.NONE) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          existsOption = SetOptions.Exists.NX;
-          break;
-        case "XX":
-          if (existsOption != SetOptions.Exists.NONE) {
-            throw new IllegalArgumentException(ERROR_SYNTAX);
-          }
-          existsOption = SetOptions.Exists.XX;
-          break;
-        default:
-          throw new IllegalArgumentException(ERROR_SYNTAX);
-      }
+    List<String> optionalParametersStrings =
+        optionalParameterBytes.stream()
+            .map(item -> Coder.bytesToString(item).toUpperCase())
+            .collect(Collectors.toList());
+
+    throwExceptionIfIncompatableParameterOptions(optionalParametersStrings);
+    throwErrorIfNumberInWrongPosition(optionalParametersStrings);
+    throwExceptionIfUnknownParameter(optionalParametersStrings);
+
+    // uncomment below when this functionality is reimplemented see GEODE-8263
+    // keepTTL = optionalParametersStrings.contains("KEEPTTL");
+
+    if (optionalParametersStrings.contains("PX")) {
+      millisecondsUntilExpiration =
+          handleExpiration(optionalParametersStrings, "PX");
+
+    } else if (optionalParametersStrings.contains("EX")) {
+      millisecondsUntilExpiration =
+          handleExpiration(optionalParametersStrings, "EX");
-    return new SetOptions(existsOption, expiration, keepTTL);
+    if (optionalParametersStrings.contains("NX")) {
+      existsOption = SetOptions.Exists.NX;
+    } else if (optionalParametersStrings.contains("XX")) {
+      existsOption = SetOptions.Exists.XX;
+    }
+
+    return new SetOptions(existsOption, millisecondsUntilExpiration, keepTTL);
-  private long parseExpirationTime(int index, List<byte[]> commandElems)
-      throws IllegalArgumentException {
-    String expirationString;
+  private long handleExpiration(List<String> optionalParametersStrings, String expirationType) {
+    long timeUntilExpiration;
+    long millisecondsUntilExpiration;
+    String nextParameter =
+        getNextParameter(expirationType, optionalParametersStrings);
+
+    timeUntilExpiration =
+        convertToLongOrThrowException(nextParameter);
+
+    if (timeUntilExpiration <= 0) {
+      throw new IllegalArgumentException(ERROR_INVALID_EXPIRE_TIME);
+    }
+
+    if (expirationType.equals("EX")) {
+      millisecondsUntilExpiration =
+          SECONDS.toMillis(timeUntilExpiration);
+    } else {
+      millisecondsUntilExpiration = timeUntilExpiration;
+    }
+    return millisecondsUntilExpiration;
+  }
+
+  private String getNextParameter(String currentParameter,
+      List<String> optionalParametersStrings) {
+    int index = optionalParametersStrings.indexOf(currentParameter);
+    if (optionalParametersStrings.size() <= index + 1) {
+      throw new IllegalArgumentException(ERROR_SYNTAX);
+    }
+    return optionalParametersStrings.get(index + 1);
+  }
+
+  private void throwExceptionIfUnknownParameter(List<String> optionalParameters) {
+    List<String> validOptionalParamaters = Arrays.asList("EX", "PX", "NX", "XX");
+
+    List<String> parametersInQuestion =
+        optionalParameters
+            .stream()
+            .filter(parameter -> (!validOptionalParamaters.contains(parameter)))
+            .collect(Collectors.toList());
+
+    parametersInQuestion.forEach(parameter -> {
+
+      int index = optionalParameters.indexOf(parameter);
+
+      if (!isANumber(parameter)) {
+        if (index == 0) {
+          throw new IllegalArgumentException(ERROR_SYNTAX);
+        }
+
+        String previousParameter = optionalParameters.get(index - 1);
+        if (previousOptionIsValidAndExpectsANumber(previousParameter)) {
+          throw new IllegalArgumentException(ERROR_NOT_INTEGER);
+        }
+
+        throw new IllegalArgumentException(ERROR_SYNTAX);
+      }
+    });
+  }
+
+  private boolean previousOptionIsValidAndExpectsANumber(String previousParameter) {
+    List<String> validParamaters = Arrays.asList("EX", "PX");
+    return validParamaters.contains(previousParameter);
+  }
+
+  private void throwErrorIfNumberInWrongPosition(List<String> optionalParameters) {
+    for (int i = 0; i < optionalParameters.size(); i++) {
+      String parameter = optionalParameters.get(i);
+      if (isANumber(parameter)) {
+        if (i == 0) {
+          throw new IllegalArgumentException(ERROR_SYNTAX);
+        }
+        String previousParameter = optionalParameters.get(i - 1);
+        if (!previousOptionIsValidAndExpectsANumber(previousParameter)) {
+          throw new IllegalArgumentException(ERROR_SYNTAX);
+        }
+      }
+    }
+  }
+
+  private boolean isANumber(String parameter) {
-      expirationString = Coder.bytesToString(commandElems.get(index));
-    } catch (IndexOutOfBoundsException e) {
+      Long.parseLong(parameter);
+      return true;
+    } catch (NumberFormatException e) {
+      return false;
+    }
+  }
+
+  private void throwExceptionIfIncompatableParameterOptions(List<String> passedParametersStrings) {
+
+    if (passedParametersStrings.contains("PX")
+        && passedParametersStrings.contains("EX")) {
+    if (passedParametersStrings.contains("XX")
+        && passedParametersStrings.contains("NX")) {
+      throw new IllegalArgumentException(ERROR_SYNTAX);
+    }
+  }
+
+  private long convertToLongOrThrowException(String expirationTime) {
-      long expiration = Long.parseLong(expirationString);
-      if (expiration <= 0) {
-        throw new IllegalArgumentException(ERROR_INVALID_EXPIRE_TIME);
-      }
-      return expiration;
+      return parseLong(expirationTime);
-
