GEODE-2634: use log4j levels for auto-completion

* change the auto complete to use log4j levels.
* be able to handle both log4j levels and logwriter levels in the commands
* add validation of log level whenever possible for these commands
* Move the conversion between the two to a LogLevel class and add unit tests

+import org.apache.commons.lang.StringUtils;
-import org.apache.geode.internal.logging.LogWriterImpl;
+import org.apache.geode.internal.logging.log4j.LogLevel;
-  @CliMetaData(relatedTopic = {CliStrings.TOPIC_CHANGELOGLEVEL})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_CHANGELOGLEVEL},
+      interceptor = "org.apache.geode.management.internal.cli.commands.MiscellaneousCommands$ChangeLogLevelInterceptor")
-      if (logLevel == null || logLevel.length() == 0) {
-        return ResultBuilder
-            .createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__SPECIFY_LOG_LEVEL);
-      }
-
-      boolean validLogLevel = false;
-
-      for (int i = 0; i < LogWriterImpl.allLevels.length - 1; i++) {
-        if (LogWriterImpl.allLevels[i] == LogWriterImpl.levelNameToCode(logLevel)) {
-          validLogLevel = true;
-          break;
-        }
-      }
-
-      if (!validLogLevel) {
-        return ResultBuilder
-            .createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__INVALID_LOG_LEVEL);
-      }
-
+  public static class ChangeLogLevelInterceptor extends AbstractCliAroundInterceptor {
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      Map<String, String> arguments = parseResult.getParamValueStrings();
+      // validate log level
+      String logLevel = arguments.get("loglevel");
+      if (StringUtils.isBlank(logLevel) || LogLevel.getLevel(logLevel) == null) {
+        return ResultBuilder.createUserErrorResult("Invalid log level: " + logLevel);
+      }
+
+      return ResultBuilder.createInfoResult("");
+    }
+  }
+
