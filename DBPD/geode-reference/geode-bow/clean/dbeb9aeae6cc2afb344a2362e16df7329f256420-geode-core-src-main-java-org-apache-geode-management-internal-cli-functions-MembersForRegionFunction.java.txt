Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-    Map<String, String> resultMap = new HashMap<String,String>();
-    try{
-      Cache  cache          = CacheFactory.getAnyInstance();      
-      String memberNameOrId = cache.getDistributedSystem().getDistributedMember().getId();  
+    Map<String, String> resultMap = new HashMap<String, String>();
+    try {
+      Cache cache = CacheFactory.getAnyInstance();
+      String memberNameOrId = cache.getDistributedSystem().getDistributedMember().getId();
-      String regionName = ((String) args );
-      Region<Object, Object> region = cache.getRegion(regionName);           
-      
-      if(region != null){
-        resultMap.put(memberNameOrId, "" + region.getAttributes().getScope().isLocal());        
-       }else{
-         String regionWithPrefix  = Region.SEPARATOR + regionName ; 
-         region = cache.getRegion(regionWithPrefix);   
-         if(region != null){           
-           resultMap.put(memberNameOrId, "" + region.getAttributes().getScope().isLocal());
-         }else{           
-           resultMap.put("", "" );
-         }                  
+      String regionName = ((String) args);
+      Region<Object, Object> region = cache.getRegion(regionName);
+
+      if (region != null) {
+        resultMap.put(memberNameOrId, "" + region.getAttributes().getScope().isLocal());
+      } else {
+        String regionWithPrefix = Region.SEPARATOR + regionName;
+        region = cache.getRegion(regionWithPrefix);
+        if (region != null) {
+          resultMap.put(memberNameOrId, "" + region.getAttributes().getScope().isLocal());
+        } else {
+          resultMap.put("", "");
+        }
-      context.getResultSender().lastResult( resultMap);        
-    }catch(Exception ex){
-      Cache  cache          = CacheFactory.getAnyInstance();     
+      context.getResultSender().lastResult(resultMap);
+    } catch (Exception ex) {
+      Cache cache = CacheFactory.getAnyInstance();
-      resultMap.put("", "" );
-      context.getResultSender().lastResult( resultMap);
-    }    
+      resultMap.put("", "");
+      context.getResultSender().lastResult(resultMap);
+    }
-  
+
