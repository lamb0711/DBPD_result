Merge branch 'develop' into feature/GEODE-53

-        socket = new MulticastSocket();
-        socket.setSoTimeout(Integer.getInteger("AvailablePort.timeout", 2000).intValue());
-        byte[] buffer = new byte[4];
-        buffer[0] = (byte)'p';
-        buffer[1] = (byte)'i';
-        buffer[2] = (byte)'n';
-        buffer[3] = (byte)'g';
-        SocketAddress mcaddr = new InetSocketAddress(
-          addr==null? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr, port);
-        DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length, mcaddr);
-        socket.send(packet);
-        try {
-          socket.receive(packet);
-          packet.getData();  // make sure there's data, but no need to process it
-          return false;
-        }
-        catch (SocketTimeoutException ste) {
-          //System.out.println("socket read timed out");
-          return true;
-        }
-        catch (Exception e) {
-          e.printStackTrace();
-          return false;
-        }
-      }
-      catch (java.io.IOException ioe) {
-        if (ioe.getMessage().equals("Network is unreachable")) {
-          throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
-        }
-        ioe.printStackTrace();
-        return false;
-      }
-      catch (Exception e) {
-        e.printStackTrace();
-        return false;
+        // TODO - need to find out if anyone is listening on this port
+        return true;
+
+//        socket = new MulticastSocket();
+//        socket.setSoTimeout(Integer.getInteger("AvailablePort.timeout", 2000).intValue());
+//        byte[] buffer = new byte[4];
+//        buffer[0] = (byte)'p';
+//        buffer[1] = (byte)'i';
+//        buffer[2] = (byte)'n';
+//        buffer[3] = (byte)'g';
+//        SocketAddress mcaddr = new InetSocketAddress(
+//          addr==null? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr, port);
+//        DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length, mcaddr);
+//        socket.send(packet);
+//        try {
+//          socket.receive(packet);
+//          packet.getData();  // make sure there's data, but no need to process it
+//          return false;
+//        }
+//        catch (SocketTimeoutException ste) {
+//          //System.out.println("socket read timed out");
+//          return true;
+//        }
+//        catch (Exception e) {
+//          e.printStackTrace();
+//          return false;
+//        }
+//      }
+//      catch (java.io.IOException ioe) {
+//        if (ioe.getMessage().equals("Network is unreachable")) {
+//          throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
+//        }
+//        ioe.printStackTrace();
+//        return false;
+//      }
+//      catch (Exception e) {
+//        e.printStackTrace();
+//        return false;
