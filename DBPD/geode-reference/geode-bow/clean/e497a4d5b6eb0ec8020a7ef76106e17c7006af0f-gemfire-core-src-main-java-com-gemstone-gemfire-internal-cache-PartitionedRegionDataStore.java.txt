GEODE-716: Getting the bucket creation lock when setting the CacheLoader

Modifying the CacheLoader using AttributesMutator had a race condition
with partitioned regions where a bucket might never get the new cache
loader. By getting the bucket creation lock, we ensure that the bucket
will either read the cache loader value after it has been set or the
cache loader modification thread will set the cache loader on the
bucket.

I've also indicated that setCacheLoader should not be used for
partitioned regions because of some of the consistency concerns with the
API.

+                  observer.beforeAssignBucket(this.partitionedRegion, possiblyFreeBucketId);
-    this.loader = newLoader;
-    visitBuckets(new BucketVisitor() {
-      @Override
-      public void visit(Integer bucketId, Region r) {
-        AttributesMutator mut = r.getAttributesMutator();
-        if (logger.isDebugEnabled()) {
-          logger.debug("setting new cache loader in bucket region: {}", newLoader);
+    StoppableWriteLock lock = this.bucketCreationLock.writeLock();
+    lock.lock();
+    try {
+      this.loader = newLoader;
+      visitBuckets(new BucketVisitor() {
+        @Override
+        public void visit(Integer bucketId, Region r) {
+          AttributesMutator mut = r.getAttributesMutator();
+          if (logger.isDebugEnabled()) {
+            logger.debug("setting new cache loader in bucket region: {}", newLoader);
+          }
+          mut.setCacheLoader(newLoader);
-        mut.setCacheLoader(newLoader);
-      }
-    });
+      });
+    } finally {
+      lock.unlock();
+    }
