GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-
-  VersionTag generateVersionTag(VersionSource member, boolean withDelta, LocalRegion region,
+  VersionTag generateVersionTag(VersionSource member, boolean withDelta, InternalRegion region,
-   * @param currTime Current Cache Time.
+   * @param currentTime Current Cache Time.
-  void txDidDestroy(long currTime);
+  void txDidDestroy(long currentTime);
-   * @param r the region holding the entry
+   * @param region the region holding the entry
-  void makeTombstone(LocalRegion r, VersionTag version) throws RegionClearedException;
+  void makeTombstone(InternalRegion region, VersionTag version) throws RegionClearedException;
-   * 
-   * @param r LocalRegion
+   *
+   * @param region the region
-  void removePhase1(LocalRegion r, boolean clear) throws RegionClearedException;
+  void removePhase1(InternalRegion region, boolean clear) throws RegionClearedException;
-  boolean fillInValue(LocalRegion r, @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) Entry entry,
-      ByteArrayDataInput in, DM mgr, final Version version);
+  boolean fillInValue(InternalRegion region,
+      @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) Entry entry, ByteArrayDataInput in,
+      DM distributionManager, final Version version);
-   * @param dp if overflowed then the position of the value is set in dp
+   * @param diskPosition if overflowed then the position of the value is set in dp
-  boolean isOverflowedToDisk(LocalRegion r, DistributedRegion.DiskPosition dp);
+  boolean isOverflowedToDisk(InternalRegion region, DistributedRegion.DiskPosition diskPosition);
-  Object _getValueRetain(RegionEntryContext context, boolean decompress);
+  Object getValueRetain(RegionEntryContext context, boolean decompress);
-  /** Gets the value field of this entry. */
-
+  /**
+   * Gets the value field of this entry.
+   */
-  Object _getValue();
+  Object getValue();
-   * @see LocalRegion#getValueInVM
+   * @see InternalRegion#getValueInVM
-   * @see LocalRegion#getValueOnDisk
+   * @see InternalRegion#getValueOnDisk
-  Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException;
+  Object getValueOnDisk(InternalRegion region) throws EntryNotFoundException;
-   * @see LocalRegion#getValueOnDisk
+   * @see InternalRegion#getValueOnDisk
-  Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException;
-
+  Object getValueOnDiskOrBuffer(InternalRegion region) throws EntryNotFoundException;
-  boolean initialImagePut(LocalRegion region, long lastModified, Object newValue,
+  boolean initialImagePut(InternalRegion region, long lastModified, Object newValue,
-  boolean initialImageInit(LocalRegion region, long lastModified, Object newValue, boolean create,
-      boolean wasRecovered, boolean acceptedVersionTag) throws RegionClearedException;
+  boolean initialImageInit(InternalRegion region, long lastModified, Object newValue,
+      boolean create, boolean wasRecovered, boolean acceptedVersionTag)
+      throws RegionClearedException;
-  boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode, boolean cacheWrite,
-      @Unretained Object expectedOldValue, boolean forceDestroy, boolean removeRecoveredEntry)
+  boolean destroy(InternalRegion region, EntryEventImpl event, boolean inTokenMode,
+      boolean cacheWrite, @Unretained Object expectedOldValue, boolean forceDestroy,
+      boolean removeRecoveredEntry)
-   * @param v true if entry's value should be marked as having been the result of a netsearch.
+   * @param value true if entry's value should be marked as having been the result of a netsearch.
-  void setValueResultOfSearch(boolean v);
+  void setValueResultOfSearch(boolean value);
-   * @param localRegion the persistent region
+   * @param region the persistent region
-  Object getSerializedValueOnDisk(LocalRegion localRegion);
+  Object getSerializedValueOnDisk(InternalRegion region);
-  Object getValueInVMOrDiskWithoutFaultIn(LocalRegion owner);
+  Object getValueInVMOrDiskWithoutFaultIn(InternalRegion region);
-  Object getValueOffHeapOrDiskWithoutFaultIn(LocalRegion owner);
+  Object getValueOffHeapOrDiskWithoutFaultIn(InternalRegion region);
-   * ONLY in {@link LocalRegion#dispatchListenerEvent}.
+   * ONLY in {@link InternalRegion#dispatchListenerEvent}.
-  void setInUseByTransaction(final boolean v);
+  void setInUseByTransaction(final boolean inUseByTransaction);
-   * @param lr the local region that owns this region entry; null if no local region owner
+   * @param region the local region that owns this region entry; null if no local region owner
-  void decRefCount(NewLRUClockHand lruList, LocalRegion lr);
+  void decRefCount(NewLRUClockHand lruList, InternalRegion region);
-  Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate);
+  Object prepareValueForCache(RegionEntryContext context, Object value, boolean isEntryUpdate);
-  Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event,
+  Object prepareValueForCache(RegionEntryContext context, Object value, EntryEventImpl event,
