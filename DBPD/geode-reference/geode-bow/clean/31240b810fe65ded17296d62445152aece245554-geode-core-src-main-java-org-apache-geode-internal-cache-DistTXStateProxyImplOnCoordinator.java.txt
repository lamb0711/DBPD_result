GEODE-5059: Move basicPut functionality to RegionMapPut (#1858)

* Move the methods to RegionMapPut
* Add tests to RegionMapPut

-  private HashMap<LocalRegion, DistributedMember> rrTargets;
+  private HashMap<InternalRegion, DistributedMember> rrTargets;
-        LocalRegion lr = dtop.getRegion();
+        InternalRegion internalRegion = dtop.getRegion();
-        if (lr instanceof PartitionedRegion) {
+        if (internalRegion instanceof PartitionedRegion) {
-        } else if (lr instanceof DistributedRegion) {
-          otherNodes =
-              ((DistributedRegion) lr).getCacheDistributionAdvisor().adviseInitializedReplicates();
+        } else if (internalRegion instanceof DistributedRegion) {
+          otherNodes = ((DistributedRegion) internalRegion).getCacheDistributionAdvisor()
+              .adviseInitializedReplicates();
-  public TXStateInterface getRealDeal(KeyInfo key, LocalRegion r) {
+  public TXStateInterface getRealDeal(KeyInfo key, InternalRegion r) {
-      r.waitOnInitialization(r.initializationLatchBeforeGetInitialImage);
+      r.waitOnInitialization(r.getInitializationLatchBeforeGetInitialImage());
-          if (r.scope.isDistributed()) {
+          if (r.getScope().isDistributed()) {
-  private DistributedMember getRRTarget(KeyInfo key, LocalRegion r) {
+  private DistributedMember getRRTarget(KeyInfo key, InternalRegion r) {
-      LocalRegion region) {
+      InternalRegion reg) {
-    if (region instanceof DistributedRegion) {
-      super.postPutAll(putallOp, successfulPuts, region);
+    if (reg instanceof DistributedRegion) {
+      super.postPutAll(putallOp, successfulPuts, reg);
-      region.getCancelCriterion().checkCancelInProgress(null); // fix for bug
+      reg.getCancelCriterion().checkCancelInProgress(null); // fix for bug
-            region, putallOp.putAllData.length);
+            reg, putallOp.putAllData.length);
-          EntryEventImpl event = EntryEventImpl.createPutAllEvent(null, region,
-              Operation.PUTALL_CREATE, key, putallOp.putAllData[i].getValue(region.getCache()));
+          EntryEventImpl event = EntryEventImpl.createPutAllEvent(null, reg,
+              Operation.PUTALL_CREATE, key, putallOp.putAllData[i].getValue(reg.getCache()));
-        DistTXCoordinatorInterface tsi = (DistTXCoordinatorInterface) getRealDeal(ki, region);
+        DistTXCoordinatorInterface tsi = (DistTXCoordinatorInterface) getRealDeal(ki, reg);
-        dtsi.postPutAll(putAllForBucket, successfulPuts, region);
+        dtsi.postPutAll(putAllForBucket, successfulPuts, reg);
-      LocalRegion region) {
+      InternalRegion reg) {
-    if (region instanceof DistributedRegion) {
-      super.postRemoveAll(op, successfulOps, region);
+    if (reg instanceof DistributedRegion) {
+      super.postRemoveAll(op, successfulOps, reg);
-      region.getCancelCriterion().checkCancelInProgress(null); // fix for bug
+      reg.getCancelCriterion().checkCancelInProgress(null); // fix for bug
-            region, op.removeAllDataSize);
+            reg, op.removeAllDataSize);
-          EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(op, region, key);
+          EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(op, reg, key);
-        DistTXCoordinatorInterface tsi = (DistTXCoordinatorInterface) getRealDeal(ki, region);
+        DistTXCoordinatorInterface tsi = (DistTXCoordinatorInterface) getRealDeal(ki, reg);
-        dtsi.postRemoveAll(removeAllForBucket, successfulOps, region);
+        dtsi.postRemoveAll(removeAllForBucket, successfulOps, reg);
-  public DistributedMember getOwnerForKey(LocalRegion r, KeyInfo key) {
+  public DistributedMember getOwnerForKey(InternalRegion r, KeyInfo key) {
