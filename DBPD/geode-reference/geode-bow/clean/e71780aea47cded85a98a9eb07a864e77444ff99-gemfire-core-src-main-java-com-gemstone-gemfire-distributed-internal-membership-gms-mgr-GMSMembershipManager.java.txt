Enabling creation of stand-alone GMSLocator & adding 2-phase view casting

The locator work will let us unit-test this component while the
view-casting work is in preparation for the health-monitor impl that is
coming soon & will allow us to start testing HA features.

+import java.util.Collection;
-import com.gemstone.gemfire.distributed.internal.membership.gms.GMSMemberServices;
+import com.gemstone.gemfire.distributed.internal.membership.gms.Services;
-  private static final Logger logger = GMSMemberServices.getLogger();
+  private static final Logger logger = Services.getLogger();
-  private GMSMemberServices services;
+  private Services services;
-  public void init(GMSMemberServices services) {
+  public void init(Services services) {
-  /** this is invoked by JGroups when there is a loss of quorum in the membership system */
-  public void quorumLost(Set failures, List remaining) {
+  /** this is invoked by JoinLeave when there is a loss of quorum in the membership system */
+  public void quorumLost(Collection<InternalDistributedMember> failures, NetView view) {
+      List<InternalDistributedMember> remaining = new ArrayList<InternalDistributedMember>(view.getMembers());
+      remaining.removeAll(failures);
+      
-  public GMSMemberServices getServices() {
+  public Services getServices() {
-      this.services.getHealthMonitor().checkSuspect(mbr, reason);
+      return this.services.getHealthMonitor().checkIfAvailable(mbr, reason, true);
-    catch (ToDataException e) {
-      throw e; // error in user data
-    }
-    catch (CancelException e) {
-      // not interesting, we're just shutting down
+    catch (ToDataException | CancelException e) {
-    GMSMemberServices.setSecurityLogWriter(writer);
+    Services.setSecurityLogWriter(writer);
