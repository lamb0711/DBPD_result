GEODE-17: used new security interface for integrated security.

* Create new interface for integrated security
* separate jmx and cli from client-server security
* client-server security using integrated security

+import com.gemstone.gemfire.security.GeodePermission;
-  
+
-  private void doAuthorizationPost(ResourceOperationContext context){
-    if(context == null)
-      return;
-
-    //interceptor.postAuthorize(context);
-  }
-
-  public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {    
+  public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {
-  public Integer getMBeanCount() {    
+  public Integer getMBeanCount() {
-    ResourceOperationContext ctx = getOperationContext(name, attribute, false);
+    GeodePermission ctx = getOperationContext(name, attribute, false);
-    if (ctx != null) {
-      ctx.setPostOperationResult(result);
-    }
-    doAuthorizationPost(ctx);
-    ResourceOperationContext ctx = getOperationContext(name, attribute.getName(), false);
+    GeodePermission ctx = getOperationContext(name, attribute.getName(), false);
-    ResourceOperationContext ctx = getOperationContext(name, operationName, true);
+    GeodePermission ctx = getOperationContext(name, operationName, true);
-    if(ctx!=null)
-      ctx.setPostOperationResult(result);
-    doAuthorizationPost(ctx);
+
-  private ResourceOperationContext getOperationContext(ObjectName objectName, String featureName, boolean isOp)
+  private GeodePermission getOperationContext(ObjectName objectName, String featureName, boolean isOp)
-    ResourceOperationContext result = null;
+    GeodePermission result = null;
-  private ResourceOperationContext getOperationContext(Descriptor descriptor, ResourceOperationContext defaultValue){
+  private GeodePermission getOperationContext(Descriptor descriptor, GeodePermission defaultValue){
-      return new ResourceOperationContext(resource, operationCode, null);
+      return new GeodePermission(resource, operationCode);
