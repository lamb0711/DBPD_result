Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- *  
+ * 
-public class DiskRegionHelperFactory
-{
+public class DiskRegionHelperFactory {
-  public static Region getRegion(Cache cache, DiskRegionProperties diskProps, Scope regionScope)
-  {
+  public static Region getRegion(Cache cache, DiskRegionProperties diskProps, Scope regionScope) {
-      File[] dirs = { dir };
-      dsf.setDiskDirsAndSizes(dirs, new int[]{Integer.MAX_VALUE});
-    }
-    else if (diskProps.getDiskDirSizes() == null) {
+      File[] dirs = {dir};
+      dsf.setDiskDirsAndSizes(dirs, new int[] {Integer.MAX_VALUE});
+    } else if (diskProps.getDiskDirSizes() == null) {
-      for(int i=0; i<ints.length; i++){
+      for (int i = 0; i < ints.length; i++) {
+    } else {
+      dsf.setDiskDirsAndSizes(diskProps.getDiskDirs(), diskProps.getDiskDirSizes());
-    else {
-      dsf.setDiskDirsAndSizes(diskProps.getDiskDirs(),
-                              diskProps.getDiskDirSizes());
-    }
-//    Properties props = new Properties();
-    ((DiskStoreFactoryImpl)dsf).setMaxOplogSizeInBytes(diskProps.getMaxOplogSize());
+    // Properties props = new Properties();
+    ((DiskStoreFactoryImpl) dsf).setMaxOplogSizeInBytes(diskProps.getMaxOplogSize());
-      dsf.setQueueSize((int)diskProps.getBytesThreshold());
+      dsf.setQueueSize((int) diskProps.getBytesThreshold());
-      factory.setEvictionAttributes(EvictionAttributes
-          .createLRUEntryAttributes(capacity, EvictionAction.OVERFLOW_TO_DISK));
+      factory.setEvictionAttributes(
+          EvictionAttributes.createLRUEntryAttributes(capacity, EvictionAction.OVERFLOW_TO_DISK));
-      region = cache.createVMRegion(diskProps.getRegionName(), factory
-          .createRegionAttributes());
-    }
-    catch (TimeoutException e) {
-      throw new RuntimeException(
-          " failed to create region due  to a TimeOutException " + e);
-    }
-    catch (RegionExistsException e) {
-      throw new RuntimeException(
-          " failed to create region due  to a RegionExistsException " + e);
+      region = cache.createVMRegion(diskProps.getRegionName(), factory.createRegionAttributes());
+    } catch (TimeoutException e) {
+      throw new RuntimeException(" failed to create region due  to a TimeOutException " + e);
+    } catch (RegionExistsException e) {
+      throw new RuntimeException(" failed to create region due  to a RegionExistsException " + e);
-      DiskRegionProperties diskRegionProperties, Scope regionScope)
-  {
+      DiskRegionProperties diskRegionProperties, Scope regionScope) {
-  
+
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-  
+
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-      DiskRegionProperties diskRegionProperties, String regionName)
-  {
+      DiskRegionProperties diskRegionProperties, String regionName) {
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-      DiskRegionProperties diskRegionProperties)
-  {
+      DiskRegionProperties diskRegionProperties) {
-  public static Region getSyncOverFlowAndPersistRegionInfiniteOplog(
-      Cache cache, DiskRegionProperties diskRegionProperties)
-  {
+  public static Region getSyncOverFlowAndPersistRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
-  public static Region getAsyncOverFlowAndPersistRegionInfiniteOplog(
-      Cache cache, DiskRegionProperties diskRegionProperties)
-  {
+  public static Region getAsyncOverFlowAndPersistRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
