GEODE-3708: Added a separate iterator for MemoryIndexStore which doesn't iterate over the values in the Map.

	* The new iterator MemoryIndexStoreKeyIterator will only iterate over the keys
	* This is different from the previous iterator which iterates over the values too and sending out IndexStoreEntry pairs of the key and iterated value entry
	* This resulted in duplicate results in join queries with OR clause as the same key was being repeatedly sent if the value associated with the key is a collection.

+  public Iterator<IndexStoreEntry> getKeysIterator() {
+    return new MemoryIndexStoreKeyIterator(this.valueToEntriesMap);
+  }
+
+  private class MemoryIndexStoreKeyIterator implements Iterator<IndexStoreEntry> {
+
+    final private Map valuesToEntriesMap;
+    private Object currKey;
+    private Iterator<Map.Entry> mapIterator;
+
+    public MemoryIndexStoreKeyIterator(Map valuesToEntriesMap) {
+      this.valuesToEntriesMap = valuesToEntriesMap;
+    }
+
+    @Override
+    public boolean hasNext() {
+      if (mapIterator == null) {
+        mapIterator = this.valuesToEntriesMap.entrySet().iterator();
+      }
+      if (mapIterator.hasNext()) {
+        Map.Entry currentEntry = mapIterator.next();
+        currKey = currentEntry.getKey();
+        if (currKey == IndexManager.NULL || currKey == QueryService.UNDEFINED) {
+          return hasNext();
+        }
+        return currKey != null;
+      }
+      return false;
+    }
+
+    @Override
+    public MemoryIndexStoreKey next() {
+      return new MemoryIndexStoreKey(currKey);
+    }
+  }
+
+  class MemoryIndexStoreKey implements IndexStoreEntry {
+    private Object indexKey;
+
+    public MemoryIndexStoreKey(Object indexKey) {
+      this.indexKey = indexKey;
+    }
+
+    @Override
+
+    public Object getDeserializedKey() {
+      return indexKey;
+    }
+
+    @Override
+    public Object getDeserializedValue() {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public Object getDeserializedRegionKey() {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public boolean isUpdateInProgress() {
+      throw new UnsupportedOperationException();
+    }
+  }
