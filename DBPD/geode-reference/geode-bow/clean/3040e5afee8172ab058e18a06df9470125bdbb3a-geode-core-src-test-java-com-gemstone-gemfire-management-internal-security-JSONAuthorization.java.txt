GEODE-17: JSONAuthorization permissions are now defined as resource:operation

+import java.util.ArrayList;
+import java.util.List;
+  static class Permission {
+
+    private final Resource resource;
+    private final OperationCode operationCode;
+    private final String region;
+
+    Permission(Resource resource, OperationCode operationCode, String region) {
+      this.resource = resource;
+      this.operationCode = operationCode;
+      this.region = region;
+    }
+
+    public Resource getResource() {
+      return resource;
+    }
+
+    public OperationCode getOperationCode() {
+      return operationCode;
+    }
+
+    public String getRegion() {
+      return region;
+    }
+
+    @Override
+    public String toString() {
+      String result = resource.toString() + ":" + operationCode.toString();
+      result += (region != null) ? "[" + region + "]" : "";
+      return result;
+    }
+  }
+
-    String[] permissions;
+    List<Permission> permissions = new ArrayList<>();
-    Role[] roles;
+    Set<Permission> permissions = new HashSet<>();
-    acl = new HashMap<String, User>();
+    acl = new HashMap<>();
-  public static Set<OperationCode> getAuthorizedOps(User user, ResourceOperationContext context) {
-    Set<OperationCode> codeList = new HashSet<OperationCode>();
-    for (Role role : user.roles) {
-      for (String perm : role.permissions) {
-        OperationCode code = OperationCode.valueOf(perm);
-        if (role.regionName == null && role.serverGroup == null) {
-          addPermissions(code, codeList);
-        } else if (role.regionName != null) {
-          LogService.getLogger().info("This role requires region=" + role.regionName);
-          if (context instanceof CLIOperationContext) {
-            CLIOperationContext cliContext = (CLIOperationContext) context;
-            String region = cliContext.getCommandOptions().get("region");
-            if (region != null && region.equals(role.regionName)) {
-              addPermissions(code, codeList);
-            } else {
-              LogService.getLogger()
-                  .info("Not adding permission " + code + " since region=" + region + " does not match");
-            }
-          }
-        }
-        // Same to be implemented for ServerGroup
-      }
-    }
-    LogService.getLogger().info("Final set of permisions " + codeList);
-    return codeList;
-  }
-
-  private static void addPermissions(OperationCode code, Set<OperationCode> codeList) {
-    if (code == null) {
-      return;
-    }
-    codeList.add(code);
-  }
-
-  private static void readUsers(Map<String, User> acl, JSONObject jsonBean,
-      Map<String, Role> roleMap) throws JSONException {
+  private static void readUsers(Map<String, User> acl, JSONObject jsonBean, Map<String, Role> roleMap)
+      throws JSONException {
-      user.roles = new Role[ops.length()];
-        user.roles[j] = roleMap.get(roleName);
-        if (user.roles[j] == null) {
-          throw new RuntimeException("Role not present " + roleName);
-        }
+
+        user.permissions.addAll(roleMap.get(roleName).permissions);
-    Map<String, Role> roleMap = new HashMap<String, Role>();
+    Map<String, Role> roleMap = new HashMap<>();
+        // The default region is null and not the empty string
+        String region = obj.optString("region", null);
-        role.permissions = new String[ops.length()];
-          role.permissions[j] = ops.getString(j);
+          String[] parts = ops.getString(j).split(":");
+          Resource r = Resource.valueOf(parts[0]);
+          OperationCode op = parts.length > 1 ? OperationCode.valueOf(parts[1]) : OperationCode.ALL;
+          role.permissions.add(new Permission(r, op, region));
-    for (int i = 0; i < array.length(); i++) {
-      JSONObject obj = array.getJSONObject(i);
-      String name = obj.getString("name");
-      Role role = roleMap.get(name);
-      if (role == null) {
-        throw new RuntimeException("Role not present " + role);
-      }
-      if (obj.has("inherit")) {
-        JSONArray parentRoles = obj.getJSONArray("inherit");
-        for (int m = 0; m < parentRoles.length(); m++) {
-          String parentRoleName = parentRoles.getString(m);
-          Role parentRole = roleMap.get(parentRoleName);
-          if (parentRole == null) {
-            throw new RuntimeException("Role not present " + parentRoleName);
-          }
-          int oldLenth = 0;
-          if (role.permissions != null) oldLenth = role.permissions.length;
-          int newLength = oldLenth + parentRole.permissions.length;
-          String[] str = new String[newLength];
-          int k = 0;
-          if (role.permissions != null) {
-            for (; k < role.permissions.length; k++) {
-              str[k] = role.permissions[k];
-            }
-          }
-
-          for (int l = 0; l < parentRole.permissions.length; l++) {
-            str[k + l] = parentRole.permissions[l];
-          }
-          role.permissions = str;
-        }
-      }
-
-    }
-        LogService.getLogger().info("Checking for code " + ctx.getOperationCode());
+        LogService.getLogger().info("Checking for permission " + ctx.getResource() + ":" + ctx.getOperationCode());
-        if (ctx.getOperationCode() == null) return true;
+        if (ctx.getOperationCode() == null) {
+          return true;
+        }
-        for (OperationCode code : getAuthorizedOps(user, (ResourceOperationContext) context)) {
-          if (ctx.getOperationCode().equals(code)) {
+        for (Permission perm : acl.get(user.name).permissions) {
+          if (ctx.getResource() == perm.getResource() && ctx.getOperationCode() == perm.getOperationCode()) {
-            LogService.getLogger().info("found code " + code.toString());
+            LogService.getLogger().info("Found permission " + perm);
-        if (found) return true;
+        if (found) {
+          return true;
+        }
