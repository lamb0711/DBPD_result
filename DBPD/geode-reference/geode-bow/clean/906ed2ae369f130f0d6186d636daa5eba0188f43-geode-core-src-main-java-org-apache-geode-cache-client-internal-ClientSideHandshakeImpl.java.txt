GEODE-3948 Improve CQ performance under flaky network conditions

This adds a new PoolFactory setting allowing subscription connections to
time out and initiate failover to a backup server. The new setting is
setSubscriptionTimeoutMultiplier:

A server has an inactivity monitor that ensures a message is sent to a client at least once a
minute (60,000 milliseconds). If a subscription timeout multipler is set in the client it
enables timing out of the subscription feed with failover to another server.

A value of zero (the default) disables timeouts

A value of one will time out the server connection after one of its ping intervals (not
recommended)

A value of two or more will time out the server connection after that many ping intervals have
elapsed

The client/server handshake is modified for clients having version 1.5 or
later. The server sends its ping-interval setting to the client. The client
then uses this and the multiplier to establish a read-timeout in the
CacheClientUpdater subscription processor.

Two tests are added to ensure that 1) the Message method that allows a
read to timeout functions correctly and 2) the CacheClientUpdater
correctly receives the multiplier setting.

This closes #1364

+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.internal.logging.LogService;
+  private static final Logger logger = LogService.getLogger();
+
-  private DistributedMember getIDForSocket(Socket sock) {
+  private InternalDistributedMember getIDForSocket(Socket sock) {
-      DistributedMember member = getIDForSocket(sock);
+      InternalDistributedMember member = getIDForSocket(sock);
+
-  private DistributedMember readServerMember(DataInputStream p_dis) throws IOException {
+  private InternalDistributedMember readServerMember(DataInputStream p_dis) throws IOException {
-    ServerQueueStatus sqs = null;
+    ServerQueueStatus serverQueueStatus = null;
-      // No need to check for return value since DataInputStream already throws
-      // EOFException in case of EOF
-      byte qType = dis.readByte();
-      // read and ignore qSize flag
-      int qSize = dis.readInt();
-      sqs = new ServerQueueStatus(qType, qSize, member);
+      byte endpointType = dis.readByte();
+      int queueSize = dis.readInt();
-        return sqs;
+        return new ServerQueueStatus(endpointType, queueSize, member);
+
+      // the server's ping interval is only sent to subscription feeds so we can't read it as
+      // part of a "standard" server response along with the other status data.
+      int pingInterval = dis.readInt();
+      serverQueueStatus = new ServerQueueStatus(endpointType, queueSize, member, pingInterval);
+
-    return sqs;
+    return serverQueueStatus;
