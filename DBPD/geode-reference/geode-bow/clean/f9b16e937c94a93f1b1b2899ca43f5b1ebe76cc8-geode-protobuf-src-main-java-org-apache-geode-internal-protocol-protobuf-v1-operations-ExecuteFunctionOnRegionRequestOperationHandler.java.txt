GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.execute.Execution;
-import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.internal.protocol.operations.ProtobufOperationHandler;
-import org.apache.geode.internal.protocol.protobuf.v1.Failure;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingFunctionService;
+import org.apache.geode.internal.protocol.protobuf.v1.state.exception.ConnectionStateException;
-public class ExecuteFunctionOnRegionRequestOperationHandler extends
-    AbstractFunctionRequestOperationHandler<ExecuteFunctionOnRegionRequest, ExecuteFunctionOnRegionResponse> {
+public class ExecuteFunctionOnRegionRequestOperationHandler implements
+    ProtobufOperationHandler<ExecuteFunctionOnRegionRequest, ExecuteFunctionOnRegionResponse> {
-  protected Set<Object> parseFilter(ProtobufSerializationService serializationService,
+  @Override
+  public Result<ExecuteFunctionOnRegionResponse> process(
+      ProtobufSerializationService serializationService, ExecuteFunctionOnRegionRequest request,
+      MessageExecutionContext messageExecutionContext) throws InvalidExecutionContextException,
+      ConnectionStateException, EncodingException, DecodingException {
+
+    final String functionID = request.getFunctionID();
+    final String regionName = request.getRegion();
+    Object arguments = getFunctionArguments(request, serializationService);
+    Set<?> filter = parseFilter(serializationService, request);
+
+    AuthorizingFunctionService functionService =
+        messageExecutionContext.getAuthorizingCache().getFunctionService();
+
+    List<Object> results =
+        functionService.executeFunctionOnRegion(functionID, regionName, arguments, filter);
+
+    final ExecuteFunctionOnRegionResponse.Builder responseMessage =
+        ExecuteFunctionOnRegionResponse.newBuilder();
+    for (Object result : results) {
+      responseMessage.addResults(serializationService.encode(result));
+    }
+    return Success.of(responseMessage.build());
+  }
+
+  private Set<Object> parseFilter(ProtobufSerializationService serializationService,
-  @Override
-  protected String getFunctionID(ExecuteFunctionOnRegionRequest request) {
-    return request.getFunctionID();
-  }
-
-  @Override
-  protected String getRegionName(ExecuteFunctionOnRegionRequest request) {
-    return request.getRegion();
-  }
-
-  @Override
-  protected Object getExecutionTarget(ExecuteFunctionOnRegionRequest request, String regionName,
-      MessageExecutionContext executionContext) throws InvalidExecutionContextException {
-    final Region<Object, Object> region = executionContext.getCache().getRegion(regionName);
-    if (region == null) {
-      logger.error("Received execute-function-on-region request for nonexistent region: {}",
-          regionName);
-      return Failure.of(BasicTypes.ErrorCode.SERVER_ERROR,
-          "Region \"" + regionName + "\" not found");
-    }
-    return region;
-  }
-
-  @Override
-  protected Object getFunctionArguments(ExecuteFunctionOnRegionRequest request,
+  private Object getFunctionArguments(ExecuteFunctionOnRegionRequest request,
-
-  @Override
-  protected Execution getFunctionExecutionObject(Object executionTarget) {
-    return FunctionService.onRegion((Region) executionTarget);
-  }
-
-  @Override
-  protected Result buildResultMessage(ProtobufSerializationService serializationService,
-      List<Object> results) throws EncodingException {
-    final ExecuteFunctionOnRegionResponse.Builder responseMessage =
-        ExecuteFunctionOnRegionResponse.newBuilder();
-    for (Object result : results) {
-      responseMessage.addResults(serializationService.encode(result));
-    }
-    return Success.of(responseMessage.build());
-  }
-
-  @Override
-  protected Result buildResultMessage(ProtobufSerializationService serializationService) {
-    return Success.of(ExecuteFunctionOnRegionResponse.newBuilder().build());
-  }
-
