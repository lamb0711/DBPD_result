GEODE-4928 DistributedLockService doesn't work as expected while the dlock grantor is initialized

The lock service cleans up transaction locks in a background thread but
cleans up regular dlocks in its membership listener.  This allows you to
get a dlock as soon as a member holding that lock leaves the distributed
system, but its transaction locks stick around for a while.

The fix for this is to wait for the background processing to complete before
acquiring locks and checking for conflicts.

+  private final Object stateLock = new Object();
+  private boolean processingDepartures;
+
+  @Override
+  public void waitForInProcessDepartures() throws InterruptedException {
+    synchronized (stateLock) {
+      while (processingDepartures) {
+        stateLock.wait();
+      }
+    }
+  }
+
-          for (int i = 0; i < batches.length; i++) {
-            TXLockBatch batch = (TXLockBatch) batches[i];
-            // send TXOriginatorDepartureMessage
-            Set participants = batch.getParticipants();
-            TXOriginatorRecoveryProcessor.sendMessage(participants, owner, batch.getTXLockId(),
-                grantor, dm);
+          synchronized (stateLock) {
+            processingDepartures = true;
+          }
+          try {
+            for (int i = 0; i < batches.length; i++) {
+              TXLockBatch batch = (TXLockBatch) batches[i];
+              // send TXOriginatorDepartureMessage
+              Set participants = batch.getParticipants();
+              TXOriginatorRecoveryProcessor.sendMessage(participants, owner, batch.getTXLockId(),
+                  grantor, dm);
+            }
+          } finally {
+            synchronized (stateLock) {
+              processingDepartures = false;
+              stateLock.notifyAll();
+            }
