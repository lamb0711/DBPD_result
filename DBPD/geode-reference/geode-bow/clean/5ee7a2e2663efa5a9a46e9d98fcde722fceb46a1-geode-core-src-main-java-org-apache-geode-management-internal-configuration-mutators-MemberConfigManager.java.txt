GEODE-6745 Added unit test coverage for MemberConfigManager and refactored (#3620)


Co-authored-by: Peter Tran <ptran@gmail.com>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
+import java.util.Optional;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-
-    Set<DistributedMember> distributedMembers =
-        cache.getDistributionManager().getDistributionManagerIds()
-            .stream().filter(internalDistributedMember -> (filter.getId() == null
-                || filter.getId().equals(internalDistributedMember.getName())))
-            .map(DistributedMember.class::cast).collect(Collectors.toSet());
-
+    Set<DistributedMember> distributedMembers = getDistributedMembers(filter);
+  @VisibleForTesting
+  Set<DistributedMember> getDistributedMembers(MemberConfig filter) {
+    Set<InternalDistributedMember> distributionManagerIds =
+        cache.getDistributionManager().getDistributionManagerIds();
+    if (filter.getId() != null) {
+      distributionManagerIds = distributionManagerIds.stream().filter(
+          internalDistributedMember -> (filter.getId().equals(internalDistributedMember.getName())))
+          .collect(Collectors.toSet());
+    }
+
+    return distributionManagerIds.stream()
+        .map(DistributedMember.class::cast).collect(Collectors.toSet());
+  }
+
-  private List<MemberConfig> generateMemberConfigs(ArrayList<MemberInformation> memberInformation) {
-
+  @VisibleForTesting
+  List<MemberConfig> generateMemberConfigs(ArrayList<MemberInformation> memberInformation) {
-    List<MemberConfig> memberConfigs = new ArrayList<>();
-    for (MemberInformation memberInfo : memberInformation) {
-      MemberConfig member = generateMemberConfig(coordinatorId, memberInfo);
-      memberConfigs.add(member);
-    }
-
-    return memberConfigs;
+    return memberInformation.stream().map(
+        memberInfo -> generateMemberConfig(coordinatorId, memberInfo)).collect(Collectors.toList());
-  private MemberConfig generateMemberConfig(String coordinatorId, MemberInformation memberInfo) {
+  @VisibleForTesting
+  MemberConfig generateMemberConfig(String coordinatorId, MemberInformation memberInfo) {
-    member.setGroups(Arrays.asList(memberInfo.getGroups().split(",")));
-    member.setClientConnections(memberInfo.getClientCount());
-    if (memberInfo.isServer() && memberInfo.getCacheServeInfo() != null) {
+    if (memberInfo.isServer()) {
-        MemberConfig.CacheServerConfig csConfig = new MemberConfig.CacheServerConfig();
-        csConfig.setPort(info.getPort());
-        csConfig.setMaxConnections(info.getMaxConnections());
-        csConfig.setMaxThreads(info.getMaxThreads());
-        member.addCacheServer(csConfig);
+        MemberConfig.CacheServerConfig cacheServerConfig = new MemberConfig.CacheServerConfig();
+        cacheServerConfig.setPort(info.getPort());
+        cacheServerConfig.setMaxConnections(info.getMaxConnections());
+        cacheServerConfig.setMaxThreads(info.getMaxThreads());
+        member.addCacheServer(cacheServerConfig);
+      member.setGroups(Arrays.asList(memberInfo.getGroups().split(",")));
+      member.setClientConnections(memberInfo.getClientCount());
-  private String getCoordinatorId() {
-    final MembershipManager membershipManager =
-        cache.getDistributionManager().getMembershipManager();
-    if (membershipManager == null) {
-      return null;
-    }
-
-    final DistributedMember coordinator = membershipManager.getCoordinator();
-    if (coordinator == null) {
-      return null;
-    }
-
-    return coordinator.getId();
+  @VisibleForTesting
+  String getCoordinatorId() {
+    return Optional.ofNullable(cache.getDistributionManager())
+        .map(DistributionManager::getMembershipManager)
+        .map(MembershipManager::getCoordinator)
+        .map(DistributedMember::getId)
+        .orElse(null);
