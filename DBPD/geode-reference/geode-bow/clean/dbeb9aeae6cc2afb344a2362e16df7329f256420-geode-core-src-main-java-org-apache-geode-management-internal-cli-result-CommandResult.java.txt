Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Wraps the Result of a command execution. 
+ * Wraps the Result of a command execution.
-//Should this have info about the command String??
+// Should this have info about the command String??
-  
+
-  private Status       status;
-  private int          index;
-  private boolean      isDataBuilt;
-  
-  private ResultData   resultData;
+  private Status status;
+  private int index;
+  private boolean isDataBuilt;
+
+  private ResultData resultData;
-  
+
-  
-  
+
+
-    this.resultData   = resultData;
+    this.resultData = resultData;
-    this.status       = this.resultData.getStatus();
-    this.resultLines  = new Vector<String>();
+    this.status = this.resultData.getStatus();
+    this.resultLines = new Vector<String>();
-  
+
-  
+
-  
-  //TODO -Abhishek - extract this code out in a FormatBuilder or PresentationBuilder??
+
+  // TODO -Abhishek - extract this code out in a FormatBuilder or PresentationBuilder??
-          
+
-    //        resultTable.setColumnSeparator(" | ");
-            resultTable.setColumnSeparator("   ");            
+            // resultTable.setColumnSeparator(" | ");
+            resultTable.setColumnSeparator("   ");
-          
+
-  
+
-      resultLines.add("Error occurred while processing Command Result. Internal Error - Invalid Result.");
-      //TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always 
+      resultLines
+          .add("Error occurred while processing Command Result. Internal Error - Invalid Result.");
+      // TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always
-  
-  /*private*/ void buildObjectResultOutput() {
+
+  /* private */ void buildObjectResultOutput() {
-      
+
-      
+
-        
+
-          GfJsonObject object  = objectsArray.getJSONObject(i);
+          GfJsonObject object = objectsArray.getJSONObject(i);
-      } /*else {
-//        GfJsonObject jsonObject = content.getJSONObject(ObjectResultData.ROOT_OBJECT_ACCESSOR);
-//        buildObjectSection(resultTable, null, jsonObject, 0);
-      }*/
+      } /*
+         * else { // GfJsonObject jsonObject =
+         * content.getJSONObject(ObjectResultData.ROOT_OBJECT_ACCESSOR); //
+         * buildObjectSection(resultTable, null, jsonObject, 0); }
+         */
-      
+
-      resultLines.add("Error occurred while processing Command Result. Internal Error - Invalid Result.");
-      //TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always
+      resultLines
+          .add("Error occurred while processing Command Result. Internal Error - Invalid Result.");
+      // TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always
-  
-  private void buildObjectSection(Table table, RowGroup parentRowGroup, GfJsonObject object, int depth) throws GfJsonException {
+
+  private void buildObjectSection(Table table, RowGroup parentRowGroup, GfJsonObject object,
+      int depth) throws GfJsonException {
-    GfJsonArray  nestedCollection = null;    
-    GfJsonObject nestedObject     = null;
-    
-    GfJsonObject fieldDisplayNames = object.getJSONObject(CliJsonSerializable.FIELDS_TO_DISPLAYNAME_MAPPING);
-    
+    GfJsonArray nestedCollection = null;
+    GfJsonObject nestedObject = null;
+
+    GfJsonObject fieldDisplayNames =
+        object.getJSONObject(CliJsonSerializable.FIELDS_TO_DISPLAYNAME_MAPPING);
+
-    
+
-      
-      if (CliJsonSerializable.FIELDS_TO_SKIP.contains(key) || (fieldsToSkipOnUI != null && fieldsToSkipOnUI.contains(key))) {
+
+      if (CliJsonSerializable.FIELDS_TO_SKIP.contains(key)
+          || (fieldsToSkipOnUI != null && fieldsToSkipOnUI.contains(key))) {
-      
+
-      } catch (GfJsonException e) {/* next check if it's a nested object  */}
-      
+      } catch (GfJsonException e) {
+        /* next check if it's a nested object */}
+
-      if (nestedCollection == null) { 
+      if (nestedCollection == null) {
-      /*if (nestedCollection != null) */{
+      /* if (nestedCollection != null) */ {
-      
+
-      
+
-        
+
-        
+
-          
+
-            GfJsonObject innerFieldDisplayNames = content.getJSONObject(CliJsonSerializable.FIELDS_TO_DISPLAYNAME_MAPPING);
+            GfJsonObject innerFieldDisplayNames =
+                content.getJSONObject(CliJsonSerializable.FIELDS_TO_DISPLAYNAME_MAPPING);
-              
+
-              if (CliJsonSerializable.FIELDS_TO_SKIP.contains((String)columnName) || (tableFieldsToSkipOnUI != null && tableFieldsToSkipOnUI.contains(columnName))) {
+              if (CliJsonSerializable.FIELDS_TO_SKIP.contains((String) columnName)
+                  || (tableFieldsToSkipOnUI != null
+                      && tableFieldsToSkipOnUI.contains(columnName))) {
-              
-              headerRow.newCenterCol(innerFieldDisplayNames.getString((String)columnName));
+
+              headerRow.newCenterCol(innerFieldDisplayNames.getString((String) columnName));
-            
+
-            if (CliJsonSerializable.FIELDS_TO_SKIP.contains((String)columnName) || (tableFieldsToSkipOnUI != null && tableFieldsToSkipOnUI.contains(columnName))) {
+            if (CliJsonSerializable.FIELDS_TO_SKIP.contains((String) columnName)
+                || (tableFieldsToSkipOnUI != null && tableFieldsToSkipOnUI.contains(columnName))) {
-        buildObjectSection(table, rowGroup, nestedObject, depth+1);
+        buildObjectSection(table, rowGroup, nestedObject, depth + 1);
-//        Row newRow = rowGroup.newRow();
-//        String prefix = "";
-//        for (int i = 0; i < depth; i++) {
-//          prefix += " . ";
-//        }
-//        newRow.newLeftCol(prefix+fieldDisplayNames.getString(key)).newLeftCol(field);
+        // Row newRow = rowGroup.newRow();
+        // String prefix = "";
+        // for (int i = 0; i < depth; i++) {
+        // prefix += " . ";
+        // }
+        // newRow.newLeftCol(prefix+fieldDisplayNames.getString(key)).newLeftCol(field);
-/*        if (isPrimitiveOrStringOrWrapperArray(value)) {
-          value = Arrays.toString((String[])value);
-        }*/
+        /*
+         * if (isPrimitiveOrStringOrWrapperArray(value)) { value = Arrays.toString((String[])value);
+         * }
+         */
-  
+
-    
+
-  
+
-    
+
-  /*private*/ void buildComposite() {
+  /* private */ void buildComposite() {
-  
+
-        
+
-  
+
-      resultLines.add("Error occurred while processing Command Result. Internal Error - Invalid Result.");
-      LogWrapper.getInstance().info("Error occurred while processing Command Result. Internal Error - Invalid Result.", e);
+      resultLines
+          .add("Error occurred while processing Command Result. Internal Error - Invalid Result.");
+      LogWrapper.getInstance().info(
+          "Error occurred while processing Command Result. Internal Error - Invalid Result.", e);
-  
-  private void buildSection(Table table, RowGroup parentRowGroup, GfJsonObject section, int depth) throws GfJsonException {
+
+  private void buildSection(Table table, RowGroup parentRowGroup, GfJsonObject section, int depth)
+      throws GfJsonException {
-//      System.out.println(key +" : " + object);
+      // System.out.println(key +" : " + object);
-          newRow.newLeftCol(prefix+key).newLeftCol(value[0]);
+          newRow.newLeftCol(prefix + key).newLeftCol(value[0]);
-            newRow.newLeftCol(prefix+key).newLeftCol(value[0]);
+            newRow.newLeftCol(prefix + key).newLeftCol(value[0]);
-            newRow.newLeftCol(prefix+key).newLeftCol("");
+            newRow.newLeftCol(prefix + key).newLeftCol("");
-//        System.out.println(key+" : "+object);
+        // System.out.println(key+" : "+object);
-  
-//  public static void main(String[] args) {
-//    String[] valuesSeparatedByLines = getValuesSeparatedByLines(CliConstants.LINE_SEPARATOR);
-//    System.out.println(valuesSeparatedByLines +" -- "+valuesSeparatedByLines.length);
-//  }
+
+  // public static void main(String[] args) {
+  // String[] valuesSeparatedByLines = getValuesSeparatedByLines(CliConstants.LINE_SEPARATOR);
+  // System.out.println(valuesSeparatedByLines +" -- "+valuesSeparatedByLines.length);
+  // }
-    return values ;
+    return values;
-    
+
-    
+
-      
+
-  private Row[] buildRows(RowGroup rowGroup, Row[] dataRows,
-      GfJsonArray accumulatedData) throws GfJsonException {
+  private Row[] buildRows(RowGroup rowGroup, Row[] dataRows, GfJsonArray accumulatedData)
+      throws GfJsonException {
-    
-    // Initialize rows' array as required 
+
+    // Initialize rows' array as required
-      
+
-  
+
-        throw new RuntimeException("No associated files to save .. "); // TODO Abhishek - add i18n string
+        throw new RuntimeException("No associated files to save .. "); // TODO Abhishek - add i18n
+                                                                       // string
-   * @throws ArrayIndexOutOfBoundsException
-   *           if this method is called more number of times than the data items
-   *           it contains
+   * @throws ArrayIndexOutOfBoundsException if this method is called more number of times than the
+   *         data items it contains
-  
+
-  
+
-  
-//  public String getContentStr() {
-//    return gfJsonObject.getString(ResultData.RESULT_CONTENT);
-//  }
+
+  // public String getContentStr() {
+  // return gfJsonObject.getString(ResultData.RESULT_CONTENT);
+  // }
-  
+
-    if ( !(obj instanceof CommandResult) ) {
+    if (!(obj instanceof CommandResult)) {
-    
+
-    
+
-  
+
-    return "CommandResult [gfJsonObject=" + gfJsonObject + ", status=" + status
-        + ", index=" + index + ", isDataBuilt=" + isDataBuilt + ", resultData="
-        + resultData + ", resultLines=" + resultLines + ", failedToPersist="
-        + failedToPersist + "]";
+    return "CommandResult [gfJsonObject=" + gfJsonObject + ", status=" + status + ", index=" + index
+        + ", isDataBuilt=" + isDataBuilt + ", resultData=" + resultData + ", resultLines="
+        + resultLines + ", failedToPersist=" + failedToPersist + "]";
-  
+
