GEODE-4705: Refactor Failure.of to handle protobuf builder code. (#1472)


+import org.apache.geode.internal.protocol.protobuf.v1.state.exception.ConnectionStateException;
-public class Failure<SuccessType, FailureType> implements Result<SuccessType, FailureType> {
-  private final FailureType failureType;
+public class Failure<SuccessType> implements Result<SuccessType> {
+  private final ClientProtocol.ErrorResponse failureType;
-  private Failure(FailureType failureType) {
+  private Failure(ClientProtocol.ErrorResponse failureType) {
-  public static <T, V> Failure<T, V> of(V errorResponse) {
-    return new Failure<>(errorResponse);
+  public static <T> Failure<T> of(BasicTypes.ErrorCode errorCode, String errorMessage) {
+    return new Failure<>(ClientProtocol.ErrorResponse.newBuilder()
+        .setError(BasicTypes.Error.newBuilder().setErrorCode(errorCode).setMessage(errorMessage))
+        .build());
+  }
+
+  public static <T> Failure<T> of(ConnectionStateException exception) {
+    return of(exception.getErrorCode(), exception.getMessage());
+  }
+
+  public static <T> Failure<T> of(Exception exception) {
+    if (exception instanceof ConnectionStateException) {
+      return of((ConnectionStateException) exception);
+    }
+    return of(BasicTypes.ErrorCode.SERVER_ERROR, exception.toString());
-      Function<FailureType, T> errorFunction) {
+      Function<ClientProtocol.ErrorResponse, T> errorFunction) {
-  public FailureType getErrorMessage() {
+  public ClientProtocol.ErrorResponse getErrorMessage() {
