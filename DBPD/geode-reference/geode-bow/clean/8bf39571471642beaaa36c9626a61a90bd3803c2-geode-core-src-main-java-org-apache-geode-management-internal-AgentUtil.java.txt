Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static final String ERROR_VARIABLE_NOT_SET = "The GEMFIRE environment variable must be set!";
+  public static final String ERROR_VARIABLE_NOT_SET =
+      "The GEMFIRE environment variable must be set!";
-   * this method will try to find the named war files in the following order:
-   * 1. if GEMFIRE is defined, it will look under tools/Extensions, tools/Pulse and lib folder (in this order) to find
-   *    either the name-version.war or the name.war file
-   * 2. If GEMFIRE is not defined, it will try to find either the name-version.war/name.war (in that order) on the
-   *    classpath
+   * this method will try to find the named war files in the following order: 1. if GEMFIRE is
+   * defined, it will look under tools/Extensions, tools/Pulse and lib folder (in this order) to
+   * find either the name-version.war or the name.war file 2. If GEMFIRE is not defined, it will try
+   * to find either the name-version.war/name.war (in that order) on the classpath
-   * @param warFilePrefix : the prefix of the war file, e.g. geode-web, geode-pulse, or geode-web-api
-     */
+   * @param warFilePrefix : the prefix of the war file, e.g. geode-web, geode-pulse, or
+   *        geode-web-api
+   */
-    if(!StringUtils.isBlank(gemfireHome)) {
-      String[] possibleFiles = {
-              gemfireHome + "/tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
+    if (!StringUtils.isBlank(gemfireHome)) {
+      String[] possibleFiles =
+          {gemfireHome + "/tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
-              gemfireHome + "/lib/" + warFilePrefix + ".war"
-      };
+              gemfireHome + "/lib/" + warFilePrefix + ".war"};
-    // if $GEMFIRE is not set or we are not able to find it in all the possible locations under $GEMFIRE, try to
+    // if $GEMFIRE is not set or we are not able to find it in all the possible locations under
+    // $GEMFIRE, try to
-    String[] possibleFiles = {
-            warFilePrefix + "-" + gemfireVersion + ".war",
-            "tools/Pulse/" + warFilePrefix + "-" + gemfireVersion + ".war",
-            "tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
-            "lib/" + warFilePrefix + "-" + gemfireVersion + ".war",
-            warFilePrefix + ".war"
-    };
-    for(String possibleFile:possibleFiles){
+    String[] possibleFiles = {warFilePrefix + "-" + gemfireVersion + ".war",
+        "tools/Pulse/" + warFilePrefix + "-" + gemfireVersion + ".war",
+        "tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
+        "lib/" + warFilePrefix + "-" + gemfireVersion + ".war", warFilePrefix + ".war"};
+    for (String possibleFile : possibleFiles) {
-      if(url!=null){
+      if (url != null) {
-    logger.warn(warFilePrefix+" war file was not found");
+    logger.warn(warFilePrefix + " war file was not found");
