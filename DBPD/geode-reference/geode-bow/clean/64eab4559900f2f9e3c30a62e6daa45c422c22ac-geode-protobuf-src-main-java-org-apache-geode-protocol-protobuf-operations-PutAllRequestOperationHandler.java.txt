GEODE-3213: Refactor ProtoBuf handler flow. This now closes #646

Signed-off-by: Alexander Murmann <amurmann@pivotal.io>

+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.protocol.protobuf.ClientProtocol;
+import org.apache.geode.protocol.protobuf.Failure;
+import org.apache.geode.protocol.protobuf.Result;
+import org.apache.geode.protocol.protobuf.Success;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-import java.util.HashMap;
-import java.util.Map;
-    implements OperationHandler<ClientProtocol.Request, ClientProtocol.Response> {
+    implements OperationHandler<RegionAPI.PutAllRequest, RegionAPI.PutAllResponse> {
-  private RegionAPI.PutAllRequest putAllRequest = null;
-  private Region region = null;
-  private Map<Object, Object> entries = null;
-
-  public ClientProtocol.Response process(SerializationService serializationService,
-      ClientProtocol.Request request, Cache cache) {
-    ClientProtocol.Response errorResponse = validatePutAllRequest(request);
-    if (errorResponse == null) {
-      errorResponse = determinePutAllRegion(cache);
-    }
-    if (errorResponse == null) {
-      errorResponse = extractPutAllEntries(serializationService);
-    }
-    if (errorResponse == null) {
-      try {
-        region.putAll(entries);
-      } catch (Exception ex) {
-        return ProtobufResponseUtilities.createAndLogErrorResponse(ex.getMessage(), logger, ex);
-      }
-
-      return ProtobufResponseUtilities.createPutAllResponse();
-    } else {
-      return errorResponse;
-    }
-  }
-
-  private ClientProtocol.Response validatePutAllRequest(ClientProtocol.Request request) {
-    if (request.getRequestAPICase() != ClientProtocol.Request.RequestAPICase.PUTALLREQUEST) {
-      return ProtobufResponseUtilities
-          .createAndLogErrorResponse("Improperly formatted put request message.", logger, null);
-    }
-
-    putAllRequest = request.getPutAllRequest();
-    return null;
-  }
-
-  private ClientProtocol.Response determinePutAllRegion(Cache cache) {
-    String regionName = putAllRequest.getRegionName();
-    region = cache.getRegion(regionName);
+  public Result<RegionAPI.PutAllResponse> process(SerializationService serializationService,
+      RegionAPI.PutAllRequest request, Cache cache) {
+    String regionName = request.getRegionName();
+    Region region = cache.getRegion(regionName);
-      return ProtobufResponseUtilities.createAndLogErrorResponse(
-          "Region passed by client did not exist: " + regionName, logger, null);
-    } else {
-      return null;
+      return Failure.of(ProtobufResponseUtilities.createAndLogErrorResponse(
+          "Region passed by client did not exist: " + regionName, logger, null));
+
+    Map entries = extractPutAllEntries(serializationService, request);
+    try {
+      region.putAll(entries);
+    } catch (Exception ex) {
+      return Failure
+          .of(ProtobufResponseUtilities.createAndLogErrorResponse(ex.getMessage(), logger, ex));
+    }
+
+    return Success.of(RegionAPI.PutAllResponse.newBuilder().build());
-  private ClientProtocol.Response extractPutAllEntries(SerializationService serializationService) {
-    entries = new HashMap();
+  private Map extractPutAllEntries(SerializationService serializationService,
+      RegionAPI.PutAllRequest putAllRequest) {
+    Map entries = new HashMap();
-      return ProtobufResponseUtilities.createAndLogErrorResponse("Encoding not supported ", logger,
-          ex);
+      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
-      return ProtobufResponseUtilities
-          .createAndLogErrorResponse("Codec error in protobuf deserialization ", logger, ex);
+      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
-    return null;
+    return entries;
-
