GEODE-6450: ClientClusterManagementService supports ssl connection (#3276)

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* provide capability for the client to configure ssl connection when getting the cluster management service.
* from the server side, create the SSLContext from the ssl configuration specified on the server
* refactor ssl code

-import org.apache.geode.GemFireConfigException;
-      String protocol = SSLUtil.getSSLAlgo(SSLUtil.readArray(sslConfig.getProtocols()));
-      if (protocol != null) {
-        sslContextFactory.setProtocol(protocol);
-      } else {
-        logger.warn("SSL Protocol could not be determined. SSL settings might not work correctly");
-      }
-
-      if (StringUtils.isBlank(sslConfig.getKeystore())) {
-        throw new GemFireConfigException(
-            "Key store can't be empty if SSL is enabled for HttpService");
-      }
-
-      sslContextFactory.setKeyStorePath(sslConfig.getKeystore());
-
-      if (StringUtils.isNotBlank(sslConfig.getKeystoreType())) {
-        sslContextFactory.setKeyStoreType(sslConfig.getKeystoreType());
-      }
-
-      if (StringUtils.isNotBlank(sslConfig.getKeystorePassword())) {
-        sslContextFactory.setKeyStorePassword(sslConfig.getKeystorePassword());
-      }
-
-      if (StringUtils.isNotBlank(sslConfig.getTruststore())) {
-        sslContextFactory.setTrustStorePath(sslConfig.getTruststore());
-      }
-
-      if (StringUtils.isNotBlank(sslConfig.getTruststorePassword())) {
-        sslContextFactory.setTrustStorePassword(sslConfig.getTruststorePassword());
-      }
-
-      if (StringUtils.isNotBlank(sslConfig.getTruststoreType())) {
-        sslContextFactory.setTrustStoreType(sslConfig.getTruststoreType());
-      }
+      sslContextFactory.setSslContext(SSLUtil.createAndConfigureSSLContext(sslConfig, false));
