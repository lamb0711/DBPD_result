GEODE-4406: Improve authorization granularity for protobuf (#1514)


+import org.apache.shiro.util.ThreadState;
+import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionAuthorizingStateProcessor;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.security.NotAuthorizedException;
+import org.apache.geode.security.ResourcePermission;
+    ThreadState threadState = null;
+    SecurityService securityService = messageExecutionContext.getCache().getSecurityService();
+    boolean perKeyAuthorization = false;
+    if (messageExecutionContext
+        .getConnectionStateProcessor() instanceof ProtobufConnectionAuthorizingStateProcessor) {
+      threadState = ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
+          .getConnectionStateProcessor()).prepareThreadForAuthorization();
+      // Check if authorized for entire region
+      try {
+        securityService.authorize(new ResourcePermission(ResourcePermission.Resource.DATA,
+            ResourcePermission.Operation.WRITE, regionName));
+        ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
+            .getConnectionStateProcessor()).restoreThreadState(threadState);
+        threadState = null;
+      } catch (NotAuthorizedException ex) {
+        // Not authorized for the region, have to check keys individually
+        perKeyAuthorization = true;
+      }
+    }
+    final boolean authorizeKeys = perKeyAuthorization; // Required for use in lambda
+
+    long startTime = messageExecutionContext.getStatistics().startOperation();
-      putAllRequest.getEntryList().stream()
-          .forEach((entry) -> processSinglePut(builder, serializationService, region, entry));
+      putAllRequest.getEntryList().stream().forEach((entry) -> processSinglePut(builder,
+          serializationService, region, entry, securityService, authorizeKeys));
+      if (threadState != null) {
+        ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
+            .getConnectionStateProcessor()).restoreThreadState(threadState);
+      }
-      SerializationService serializationService, Region region, BasicTypes.Entry entry) {
+      SerializationService serializationService, Region region, BasicTypes.Entry entry,
+      SecurityService securityService, boolean authorizeKeys) {
-      Object decodedValue = serializationService.decode(entry.getValue());
+
+      Object decodedValue = serializationService.decode(entry.getValue());
+      if (authorizeKeys) {
+        securityService.authorize(new ResourcePermission(ResourcePermission.Resource.DATA,
+            ResourcePermission.Operation.WRITE, region.getName(), decodedKey.toString()));
+      }
+    } catch (NotAuthorizedException ex) {
+      builder.addFailedKeys(
+          buildKeyedError(entry, BasicTypes.ErrorCode.AUTHORIZATION_FAILED, "Unauthorized access"));
