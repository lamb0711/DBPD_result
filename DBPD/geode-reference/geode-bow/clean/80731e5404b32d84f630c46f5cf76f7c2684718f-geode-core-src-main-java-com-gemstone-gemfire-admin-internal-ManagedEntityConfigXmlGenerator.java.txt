GEODE-1792: Changed protocols and ciphers to be comma separated
Make ssl-ciphers and ssl-protocols comma separated properties. The legacy *-ssl-ciphers and
*-ssl-protocols still use space separated.

-import com.gemstone.gemfire.admin.*;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Result;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.sax.SAXSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.xml.sax.Attributes;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.DTDHandler;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.ErrorHandler;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXNotRecognizedException;
+import org.xml.sax.SAXNotSupportedException;
+import org.xml.sax.XMLReader;
+import org.xml.sax.helpers.AttributesImpl;
+
+import com.gemstone.gemfire.admin.AdminDistributedSystem;
+import com.gemstone.gemfire.admin.AdminException;
+import com.gemstone.gemfire.admin.CacheServer;
+import com.gemstone.gemfire.admin.CacheServerConfig;
+import com.gemstone.gemfire.admin.DistributedSystemConfig;
+import com.gemstone.gemfire.admin.DistributionLocator;
+import com.gemstone.gemfire.admin.DistributionLocatorConfig;
+import com.gemstone.gemfire.admin.ManagedEntityConfig;
+import com.gemstone.gemfire.management.internal.SSLUtil;
-import javax.xml.transform.*; 
-//import javax.xml.transform.dom.DOMSource; 
-import javax.xml.transform.sax.SAXSource; 
-import javax.xml.transform.stream.StreamResult;  
-import org.xml.sax.*;
+//import javax.xml.transform.dom.DOMSource;
-import org.xml.sax.helpers.AttributesImpl; 
-import java.io.*;
-import java.util.*;
- *
-public class ManagedEntityConfigXmlGenerator
-  extends ManagedEntityConfigXml implements XMLReader {
+public class ManagedEntityConfigXmlGenerator extends ManagedEntityConfigXml implements XMLReader {
-  /** An empty <code>Attributes</code> */
+  /**
+   * An empty <code>Attributes</code>
+   */
-  /** The <code>AdminDistributedSystem</code> for which we are
-   * generating XML */
+  /**
+   * The <code>AdminDistributedSystem</code> for which we are
+   * generating XML
+   */
-  /** The content handler to which SAX events are generated */
+  /**
+   * The content handler to which SAX events are generated
+   */
-  public static void generate(AdminDistributedSystem system,
-                              PrintWriter pw) {
+  public static void generate(AdminDistributedSystem system, PrintWriter pw) {
-   * <code>AdminDistributedSystem</code>. 
+   * <code>AdminDistributedSystem</code>.
-  private ManagedEntityConfigXmlGenerator(AdminDistributedSystem
-                                          system) {
+  private ManagedEntityConfigXmlGenerator(AdminDistributedSystem system) {
-    atts.addAttribute("", "", ID, "",
-                      String.valueOf(this.system.getConfig().getSystemId()));
+    atts.addAttribute("", "", ID, "", String.valueOf(this.system.getConfig().getSystemId()));
-    handler.characters(remoteCommand.toCharArray(), 0,
-                       remoteCommand.length());
+    handler.characters(remoteCommand.toCharArray(), 0, remoteCommand.length());
-    
+
-    DistributionLocator[] locators =
-      this.system.getDistributionLocators();
+    DistributionLocator[] locators = this.system.getDistributionLocators();
-  private void generateLocator(DistributionLocatorConfig config) 
-    throws SAXException {
-    
+  private void generateLocator(DistributionLocatorConfig config) throws SAXException {
+
-    atts.addAttribute("", "", PORT, "",
-                      String.valueOf(config.getPort()));
+    atts.addAttribute("", "", PORT, "", String.valueOf(config.getPort()));
-  private void generateEntityConfig(ManagedEntityConfig config) 
-    throws SAXException {
+  private void generateEntityConfig(ManagedEntityConfig config) throws SAXException {
-      handler.characters(remoteCommand.toCharArray(), 0,
-                         remoteCommand.length());
+      handler.characters(remoteCommand.toCharArray(), 0, remoteCommand.length());
-      handler.characters(workingDirectory.toCharArray(), 0,
-                         workingDirectory.length());
+      handler.characters(workingDirectory.toCharArray(), 0, workingDirectory.length());
-      handler.characters(productDirectory.toCharArray(), 0,
-                         productDirectory.length());
+      handler.characters(productDirectory.toCharArray(), 0, productDirectory.length());
-    atts.addAttribute("", "", AUTHENTICATION_REQUIRED, "",
-                      String.valueOf(config.isSSLAuthenticationRequired()));
+    atts.addAttribute("", "", AUTHENTICATION_REQUIRED, "", String.valueOf(config.isSSLAuthenticationRequired()));
-    String protocols = config.getSSLProtocols();
+    String protocols = SSLUtil.arrayToSpaceDelimitedString(config.getSSLProtocols());
-      handler.characters(protocols.toCharArray(), 0,
-                         protocols.length());
+      handler.characters(protocols.toCharArray(), 0, protocols.length());
-    String ciphers = config.getSSLCiphers();
+    String ciphers = SSLUtil.arrayToSpaceDelimitedString(config.getSSLCiphers());
-      handler.characters(ciphers.toCharArray(), 0,
-                         ciphers.length());
+      handler.characters(ciphers.toCharArray(), 0, ciphers.length());
-    for (Iterator iter = sslProps.entrySet().iterator();
-         iter.hasNext(); ) {
+    for (Iterator iter = sslProps.entrySet().iterator(); iter.hasNext(); ) {
-      
+
-  private void generateCacheServers()
-    throws SAXException, AdminException {
+  private void generateCacheServers() throws SAXException, AdminException {
-  private void generateCacheServer(CacheServerConfig config) 
-    throws SAXException {
+  private void generateCacheServer(CacheServerConfig config) throws SAXException {
-      handler.characters(classpath.toCharArray(), 0,
-                         classpath.length());
+      handler.characters(classpath.toCharArray(), 0, classpath.length());
-  }  
+  }
-  }  
+  }
-  public boolean getFeature(String name)
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+  public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException {
-  public void setFeature(String name, boolean value)
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+  public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {
-  public Object getProperty(String name)
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+  public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException {
-  public void setProperty(String name, Object value)
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+  public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException {
-  
+
-  public void parse(String systemId)
-    throws IOException, SAXException {
+  public void parse(String systemId) throws IOException, SAXException {
