Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A timer class that reports current or elapsed time in nanonseconds.
- * The static method {@link #getTime} reports the current time.
- * The instance methods support basic
- * stop-watch-style functions that are convenient for simple performance
- * measurements. For example:
+ * A timer class that reports current or elapsed time in nanonseconds. The static method
+ * {@link #getTime} reports the current time. The instance methods support basic stop-watch-style
+ * functions that are convenient for simple performance measurements. For example:
+ * 
-  class Example {
-     void example() {
-       NanoTimer timer = new NanoTimer();
-       for (int i = 0; i < n; ++i) {
-	  someComputationThatYouAreMeasuring();
-	  long duration = timer.reset();
-	  System.out.println("Duration: " + duration);
-	  // To avoid contaminating timing with printing times,
-	  // you could call reset again here.
-       }
-       long average = timer.getTimeSinceConstruction() / n;
-       System.out.println("Average: " + average);
-     }
-   }
+ * class Example {
+ *   void example() {
+ *     NanoTimer timer = new NanoTimer();
+ *     for (int i = 0; i < n; ++i) {
+ *       someComputationThatYouAreMeasuring();
+ *       long duration = timer.reset();
+ *       System.out.println("Duration: " + duration);
+ *       // To avoid contaminating timing with printing times,
+ *       // you could call reset again here.
+ *     }
+ *     long average = timer.getTimeSinceConstruction() / n;
+ *     System.out.println("Average: " + average);
+ *   }
+ * }
-public final class NanoTimer {
+public class NanoTimer {
-  
+
-  
+
-  
+
-  
+
-  
+
-  NanoTimer(TimeService ts) {
+  protected NanoTimer(TimeService ts) {
-   * Converts nanoseconds to milliseconds by dividing nanos by 
-   * {@link #NANOS_PER_MILLISECOND}.
+   * Converts nanoseconds to milliseconds by dividing nanos by {@link #NANOS_PER_MILLISECOND}.
-  
+
-   * Converts milliseconds to nanoseconds by multiplying millis by 
-   * {@link #NANOS_PER_MILLISECOND}.
+   * Converts milliseconds to nanoseconds by multiplying millis by {@link #NANOS_PER_MILLISECOND}.
-   * Return the time in nanoseconds since some arbitrary time in the past.
-   * The time rolls over to zero every 2^64 nanosecs (approx 584 years).
-   * Interval computations spanning periods longer than this will be wrong. 
+   * Return the time in nanoseconds since some arbitrary time in the past. The time rolls over to
+   * zero every 2^64 nanosecs (approx 584 years). Interval computations spanning periods longer than
+   * this will be wrong.
-   * Return the construction time in nanoseconds since some arbitrary time
-   * in the past.
+   * Return the construction time in nanoseconds since some arbitrary time in the past.
-  
+
-   * Return the last reset time in naonseconds since some arbitrary time
-   * in the past.
+   * Return the last reset time in naonseconds since some arbitrary time in the past.
-   * The time rolls over to zero every 2^64 nanosecs (approx 584 years).
-   * Interval computations spanning periods longer than this will be wrong.
-   * If the timer has not yet been reset then the construction time
-   * is returned.
+   * The time rolls over to zero every 2^64 nanosecs (approx 584 years). Interval computations
+   * spanning periods longer than this will be wrong. If the timer has not yet been reset then the
+   * construction time is returned.
-   * Compute and return the time in nanoseconds since the last reset or
-   * construction of this timer, and reset the timer to the current
-   * {@link #getTime}.
+   * Compute and return the time in nanoseconds since the last reset or construction of this timer,
+   * and reset the timer to the current {@link #getTime}.
-   * Compute and return the time in nanoseconds since the last reset or
-   * construction of this Timer, but does not reset this timer. 
+   * Compute and return the time in nanoseconds since the last reset or construction of this Timer,
+   * but does not reset this timer.
-   * Compute and return the time in nanoseconds since this timer was
-   * constructed. 
+   * Compute and return the time in nanoseconds since this timer was constructed.
-  
+
-  interface TimeService {
+  public interface TimeService {
