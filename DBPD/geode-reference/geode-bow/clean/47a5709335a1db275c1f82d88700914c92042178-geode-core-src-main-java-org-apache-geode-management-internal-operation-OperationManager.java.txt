GEODE-8095: refactor operation BiFunction into a specific OperationPerformer interface (#5135)


-import java.util.function.BiFunction;
-import org.apache.geode.cache.Cache;
-  private final Map<Class<? extends ClusterManagementOperation>, BiFunction> performers;
+  private final Map<Class<? extends ClusterManagementOperation>, OperationPerformer> performers;
-    registerOperation(RebalanceOperation.class, RebalanceOperationPerformer::perform);
+    registerOperation(RebalanceOperation.class, new RebalanceOperationPerformer());
-      Class<A> operationClass, BiFunction<Cache, A, V> operationPerformer) {
-    performers.put(operationClass, operationPerformer);
+      Class<A> operationClass,
+      OperationPerformer<A, V> performer) {
+    performers.put(operationClass, performer);
-    BiFunction<Cache, A, V> performer = getPerformer(op);
+    OperationPerformer<A, V> performer = getPerformer(op);
-    CompletableFuture.supplyAsync(() -> performer.apply(cache, op), executor)
+    CompletableFuture.supplyAsync(() -> performer.perform(cache, op), executor)
-  private <C extends Cache, A extends ClusterManagementOperation<V>, V extends OperationResult> BiFunction<C, A, V> getPerformer(
+  private <A extends ClusterManagementOperation<V>, V extends OperationResult> OperationPerformer<A, V> getPerformer(
