GEODE-5255: check all colocated partitioned regions are ready before â€¦ (#1998)

* GEODE-5255: check all colocated partitioned regions are ready before creating any buckets.


+  private enum ReplyType {
+    INITIALIZING, SUCCESS, FAIL;
+  }
+
-  private ManageBackupBucketMessage(InternalDistributedMember recipient, int regionId,
+  ManageBackupBucketMessage(InternalDistributedMember recipient, int regionId,
-  protected boolean operateOnPartitionedRegion(ClusterDistributionManager dm, PartitionedRegion r,
-      long startTime) {
+  protected boolean operateOnPartitionedRegion(ClusterDistributionManager dm,
+      PartitionedRegion partitionedRegion, long startTime) {
-          r.getFullPath());
+          partitionedRegion.getFullPath());
-    // This is to ensure that initialization is complete before bucket creation request is
-    // serviced. BUGFIX for 35888
-    if (!r.isInitialized()) {
+    partitionedRegion.checkReadiness(); // Don't allow closed PartitionedRegions that have
+                                        // datastores to host buckets
+    PartitionedRegionDataStore prDs = partitionedRegion.getDataStore();
+
+    // This is to ensure that initialization is complete for all colocated regions
+    // before bucket creation request is serviced. BUGFIX for 35888
+    // GEODE-5255
+    boolean isReady = prDs.isPartitionedRegionReady(partitionedRegion, bucketId);
+    if (!isReady) {
-      ManageBackupBucketReplyMessage.sendStillInitializing(getSender(), getProcessorId(), dm);
+      sendManageBackupBucketReplyMessage(dm, partitionedRegion, startTime, ReplyType.INITIALIZING);
-    r.checkReadiness(); // Don't allow closed PartitionedRegions that have datastores to host
-                        // buckets
-    PartitionedRegionDataStore prDs = r.getDataStore();
-    r.getPrStats().endPartitionMessagesProcessing(startTime);
-    if (managingBucket) {
-      ManageBackupBucketReplyMessage.sendAcceptance(getSender(), getProcessorId(), dm);
-    } else {
-      ManageBackupBucketReplyMessage.sendRefusal(getSender(), getProcessorId(), dm);
-    }
+    sendManageBackupBucketReplyMessage(dm, partitionedRegion, startTime,
+        managingBucket ? ReplyType.SUCCESS : ReplyType.FAIL);
+  private void sendManageBackupBucketReplyMessage(ClusterDistributionManager dm,
+      PartitionedRegion partitionedRegion, long startTime, ReplyType type) {
+    partitionedRegion.getPrStats().endPartitionMessagesProcessing(startTime);
+    switch (type) {
+      case INITIALIZING:
+        ManageBackupBucketReplyMessage.sendStillInitializing(getSender(), getProcessorId(), dm);
+        break;
+      case FAIL:
+        ManageBackupBucketReplyMessage.sendRefusal(getSender(), getProcessorId(), dm);
+        break;
+      case SUCCESS:
+        ManageBackupBucketReplyMessage.sendAcceptance(getSender(), getProcessorId(), dm);
+        break;
+      default:
+        throw new RuntimeException("unreachable");
+    }
+  }
+
+
+    boolean isAcceptedBucket() {
+      return acceptedBucket;
+    }
+
+    boolean isNotYetInitialized() {
+      return notYetInitialized;
+    }
+
