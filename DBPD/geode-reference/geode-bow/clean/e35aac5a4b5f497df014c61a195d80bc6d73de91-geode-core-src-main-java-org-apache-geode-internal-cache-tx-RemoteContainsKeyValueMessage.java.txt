Merge branch 'release/1.5.0'

-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.tx;
-import java.util.Collections;
-import org.apache.geode.cache.RegionDestroyedException;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.PartitionedRegion;
+import org.apache.geode.internal.cache.RemoteOperationException;
-    Assert.assertTrue(recipient != null,
-        "PRDistribuedRemoteContainsKeyValueMessage NULL reply message");
+    Assert.assertTrue(recipient != null, "recipient can not be NULL");
-        new RemoteContainsKeyValueResponse(r.getSystem(), Collections.singleton(recipient), key);
+        new RemoteContainsKeyValueResponse(r.getSystem(), recipient, key);
-    Set failures = r.getDistributionManager().putOutgoing(m);
+    Set<?> failures = r.getDistributionManager().putOutgoing(m);
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-  @Override
-  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+  protected boolean operateOnRegion(ClusterDistributionManager dm, LocalRegion r, long startTime)
-    public void process(final DM dm, ReplyProcessor21 processor) {
+    public void process(final DistributionManager dm, ReplyProcessor21 processor) {
-   * {@link org.apache.geode.internal.cache.RemoteContainsKeyValueMessage.RemoteContainsKeyValueReplyMessage}
+   * {@link org.apache.geode.internal.cache.tx.RemoteContainsKeyValueMessage.RemoteContainsKeyValueReplyMessage}
-    public RemoteContainsKeyValueResponse(InternalDistributedSystem ds, Set recipients,
-        Object key) {
-      super(ds, recipients, false);
+    public RemoteContainsKeyValueResponse(InternalDistributedSystem ds,
+        InternalDistributedMember recipient, Object key) {
+      super(ds, recipient, false);
-     * @throws PrimaryBucketException if the instance of the bucket that received this operation was
-     *         not primary
-    public boolean waitForContainsResult() throws PrimaryBucketException, RemoteOperationException {
+    public boolean waitForContainsResult() throws RemoteOperationException {
-        waitForCacheException();
-      } catch (RemoteOperationException rce) {
-        rce.checkKey(key);
-        throw rce;
-      } catch (PrimaryBucketException pbe) {
-        // Is this necessary?
-        throw pbe;
-      } catch (RegionDestroyedException e) {
-        throw e;
+        waitForRemoteResponse();
-        logger.debug("ContainsKeyValueResponse got remote CacheException; forcing reattempt.", ce);
+        logger.debug("ContainsKeyValueResponse got remote CacheException", ce);
