Merge branch 'feature/GEODE-1571' of ssh://github.com/jinmeiliao/incubator-geode into feature/GEODE-1571

+
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+
- * {@link Command} for {@link GetClientPartitionAttributesOp} operation 
- * 
- * 
+ * {@link Command} for {@link GetClientPartitionAttributesOp} operation
- *
-      throws IOException, ClassNotFoundException, InterruptedException {
+    throws IOException, ClassNotFoundException, InterruptedException
+  {
-          .toLocalizedString();
+        .toLocalizedString();
-          MessageType.GET_CLIENT_PARTITION_ATTRIBUTES_ERROR, errMessage
-              .toString(), servConn);
+        MessageType.GET_CLIENT_PARTITION_ATTRIBUTES_ERROR, errMessage
+          .toString(), servConn);
+      return;
-    else {
-      Region region = crHelper.getRegion(regionFullPath);
-      if (region == null) {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.GetClientPartitionAttributes_REGION_NOT_FOUND_FOR_SPECIFIED_REGION_PATH, regionFullPath));
-        errMessage = LocalizedStrings.GetClientPartitionAttributes_REGION_NOT_FOUND
-            .toLocalizedString()
-            + regionFullPath;
-        writeErrorResponse(msg,
-            MessageType.GET_CLIENT_PARTITION_ATTRIBUTES_ERROR, errMessage
-                .toString(), servConn);
-        servConn.setAsTrue(RESPONDED);
+    Region region = crHelper.getRegion(regionFullPath);
+    if (region == null) {
+      logger.warn(LocalizedMessage
+        .create(LocalizedStrings.GetClientPartitionAttributes_REGION_NOT_FOUND_FOR_SPECIFIED_REGION_PATH,
+          regionFullPath));
+      errMessage = LocalizedStrings.GetClientPartitionAttributes_REGION_NOT_FOUND
+        .toLocalizedString()
+        + regionFullPath;
+      writeErrorResponse(msg,
+        MessageType.GET_CLIENT_PARTITION_ATTRIBUTES_ERROR, errMessage
+          .toString(), servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    try {
+      GeodeSecurityUtil.authorizeClusterRead();
+      Message responseMsg = servConn.getResponseMessage();
+      responseMsg.setTransactionId(msg.getTransactionId());
+      responseMsg
+        .setMessageType(MessageType.RESPONSE_CLIENT_PARTITION_ATTRIBUTES);
+
+      PartitionedRegion prRgion = (PartitionedRegion) region;
+
+      PartitionResolver partitionResolver = prRgion.getPartitionResolver();
+      int numParts = 2; // MINUMUM PARTS
+      if (partitionResolver != null) {
+        numParts++;
-      else {
-        try {
-          Message responseMsg = servConn.getResponseMessage();
-          responseMsg.setTransactionId(msg.getTransactionId());
-          responseMsg
-              .setMessageType(MessageType.RESPONSE_CLIENT_PARTITION_ATTRIBUTES);
+      responseMsg.setNumberOfParts(numParts);
+      // PART 1
+      responseMsg.addObjPart(prRgion.getTotalNumberOfBuckets());
-          PartitionedRegion prRgion = (PartitionedRegion)region;
+      // PART 2
+      if (partitionResolver != null) {
+        responseMsg.addObjPart(partitionResolver.getClass().toString()
+          .substring(6));
+      }
-          PartitionResolver partitionResolver = prRgion.getPartitionResolver();
-          int numParts = 2; // MINUMUM PARTS
-          if (partitionResolver != null) {
-            numParts++;
+      // PART 3
+      String leaderRegionPath = null;
+      PartitionedRegion leaderRegion = null;
+      String leaderRegionName = prRgion.getColocatedWith();
+      if (leaderRegionName != null) {
+        Cache cache = prRgion.getCache();
+        while (leaderRegionName != null) {
+          leaderRegion = (PartitionedRegion) cache
+            .getRegion(leaderRegionName);
+          if (leaderRegion.getColocatedWith() == null) {
+            leaderRegionPath = leaderRegion.getFullPath();
+            break;
-          responseMsg.setNumberOfParts(numParts);
-          // PART 1
-          responseMsg.addObjPart(prRgion.getTotalNumberOfBuckets());
-          
-          // PART 2
-          if (partitionResolver != null) {
-            responseMsg.addObjPart(partitionResolver.getClass().toString()
-                .substring(6));
+          else {
+            leaderRegionName = leaderRegion.getColocatedWith();
-          
-          // PART 3
-          String leaderRegionPath=null;
-          PartitionedRegion leaderRegion = null;
-          String leaderRegionName = prRgion.getColocatedWith();
-          if (leaderRegionName != null) {
-            Cache cache = prRgion.getCache();
-            while (leaderRegionName != null) {
-              leaderRegion = (PartitionedRegion)cache
-                  .getRegion(leaderRegionName);
-              if (leaderRegion.getColocatedWith() == null) {
-                leaderRegionPath=leaderRegion.getFullPath();
-                break;
-              } else {
-               leaderRegionName = leaderRegion.getColocatedWith();
-              }
-            }
-          }
-          responseMsg.addObjPart(leaderRegionPath);
-          responseMsg.send();
-          msg.clearParts();
-        }
-        catch (Exception e) {
-          writeException(msg, e, false, servConn);
-        }
-        finally {
-          servConn.setAsTrue(Command.RESPONDED);
+      responseMsg.addObjPart(leaderRegionPath);
+      responseMsg.send();
+      msg.clearParts();
+    }
+    catch (Exception e) {
+      writeException(msg, e, false, servConn);
+    }
+    finally {
+      servConn.setAsTrue(Command.RESPONDED);
-
+
+
