Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides support for managing resources used by the local
- * {@link org.apache.geode.cache.Cache}.
+ * Provides support for managing resources used by the local {@link org.apache.geode.cache.Cache}.
- * Re-balancing the GemFire Cache resources can be accomplished using a {@link
- * RebalanceOperation}:
+ * Re-balancing the GemFire Cache resources can be accomplished using a {@link RebalanceOperation}:
+ * 
- * Monitoring of heap utilization is enabled by setting the critical heap
- * percentage using {@link #setCriticalHeapPercentage(float)}.
+ * 
+ * Monitoring of heap utilization is enabled by setting the critical heap percentage using
+ * {@link #setCriticalHeapPercentage(float)}.
-  
+
-   * The default percent of heap memory at which the VM is considered in a 
-   * critical state. Current value is <code>0.0</code>.
+   * The default percent of heap memory at which the VM is considered in a critical state. Current
+   * value is <code>0.0</code>.
-   * The default percent of heap memory at which the VM should begin evicting
-   * data. Current value is <code>0.0</code>.
-   * Note that if a HeapLRU is created and the eviction heap percentage has not
-   * been set then it will default <code>80.0</code> unless the critical heap percentage
-   * has been set in which case it will default to a value <code>5.0</code> less than
-   * the critical heap percentage.
+   * The default percent of heap memory at which the VM should begin evicting data. Current value is
+   * <code>0.0</code>. Note that if a HeapLRU is created and the eviction heap percentage has not
+   * been set then it will default <code>80.0</code> unless the critical heap percentage has been
+   * set in which case it will default to a value <code>5.0</code> less than the critical heap
+   * percentage.
-   * Creates a factory for defining and starting {@link RebalanceOperation
-   * RebalanceOperations}.
+   * Creates a factory for defining and starting {@link RebalanceOperation RebalanceOperations}.
-  
+
-   * Returns a set of all active {@link RebalanceOperation
-   * RebalanceOperations} that were started locally on this member.
+   * Returns a set of all active {@link RebalanceOperation RebalanceOperations} that were started
+   * locally on this member.
-   * Set the percentage of heap at or above which the cache is considered in
-   * danger of becoming inoperable due to garbage collection pauses or out of
-   * memory exceptions.
+   * Set the percentage of heap at or above which the cache is considered in danger of becoming
+   * inoperable due to garbage collection pauses or out of memory exceptions.
-   * Changing this value can cause {@link LowMemoryException} to be thrown from
-   * the following {@link Cache} operations:
+   * Changing this value can cause {@link LowMemoryException} to be thrown from the following
+   * {@link Cache} operations:
-   * <li>{@linkplain QueryService#createIndex(String, org.apache.geode.cache.query.IndexType, String, String) index creation}
+   * <li>{@linkplain QueryService#createIndex(String, org.apache.geode.cache.query.IndexType, String, String)
+   * index creation}
-   * Only one change to this attribute or the eviction heap percentage will be
-   * allowed at any given time and its effect will be fully realized before the
-   * next change is allowed.
+   * Only one change to this attribute or the eviction heap percentage will be allowed at any given
+   * time and its effect will be fully realized before the next change is allowed.
-   * <code>-Xms</code> switches set to the same values. Many virtual machine implementations
-   * have additional VM switches to control the behavior of the garbage
-   * collector. We suggest that you investigate tuning the garbage collector
-   * when using this type of eviction controller.  A collector that frequently
-   * collects is needed to keep our heap usage up to date. 
-   * In particular, on the Sun <A href="http://java.sun.com/docs/hotspot/gc/index.html">HotSpot</a> VM, the
-   * <code>-XX:+UseConcMarkSweepGC</code> flag needs to be set, and 
-   * <code>-XX:CMSInitiatingOccupancyFraction=N</code> should be set with N being a percentage 
-   * that is less than the {@link ResourceManager} critical and eviction heap thresholds.
+   * <code>-Xms</code> switches set to the same values. Many virtual machine implementations have
+   * additional VM switches to control the behavior of the garbage collector. We suggest that you
+   * investigate tuning the garbage collector when using this type of eviction controller. A
+   * collector that frequently collects is needed to keep our heap usage up to date. In particular,
+   * on the Sun <A href="http://java.sun.com/docs/hotspot/gc/index.html">HotSpot</a> VM, the
+   * <code>-XX:+UseConcMarkSweepGC</code> flag needs to be set, and
+   * <code>-XX:CMSInitiatingOccupancyFraction=N</code> should be set with N being a percentage that
+   * is less than the {@link ResourceManager} critical and eviction heap thresholds.
-   * The JRockit VM has similar flags, <code>-Xgc:gencon</code> and <code>-XXgcTrigger:N</code>, which are 
-   * required if using this feature. Please Note: the JRockit gcTrigger flag is based on heap free, not
-   * heap in use like the GemFire parameter. This means you need to set gcTrigger to 100-N. for example, if your
-   * eviction threshold is 30 percent, you will need to set gcTrigger to 70 percent.
+   * The JRockit VM has similar flags, <code>-Xgc:gencon</code> and <code>-XXgcTrigger:N</code>,
+   * which are required if using this feature. Please Note: the JRockit gcTrigger flag is based on
+   * heap free, not heap in use like the GemFire parameter. This means you need to set gcTrigger to
+   * 100-N. for example, if your eviction threshold is 30 percent, you will need to set gcTrigger to
+   * 70 percent.
-   * On the IBM VM, the flag to get a similar collector is <code>-Xgcpolicy:gencon</code>, but there is no 
-   * corollary to the gcTrigger/CMSInitiatingOccupancyFraction flags, so when using this feature with an
-   * IBM VM, the heap usage statistics might lag the true memory usage of the VM, and thresholds may need
-   * to be set sufficiently high that the VM will initiate GC before the thresholds are crossed. 
+   * On the IBM VM, the flag to get a similar collector is <code>-Xgcpolicy:gencon</code>, but there
+   * is no corollary to the gcTrigger/CMSInitiatingOccupancyFraction flags, so when using this
+   * feature with an IBM VM, the heap usage statistics might lag the true memory usage of the VM,
+   * and thresholds may need to be set sufficiently high that the VM will initiate GC before the
+   * thresholds are crossed.
-   * @throws IllegalStateException if the heapPercentage value is not >= 0 or
-   * <= 100 or when less than the current eviction heap percentage
+   * @throws IllegalStateException if the heapPercentage value is not >= 0 or <= 100 or when less
+   *         than the current eviction heap percentage
-  
+
-   * Get the percentage of heap at or above which the cache is considered in
-   * danger of becoming inoperable.
+   * Get the percentage of heap at or above which the cache is considered in danger of becoming
+   * inoperable.
-   * @return either the current or recently used percentage of the maximum
-   * tenured heap
+   * @return either the current or recently used percentage of the maximum tenured heap
-  
+
-   * Set the percentage of off-heap at or above which the cache is considered in
-   * danger of becoming inoperable due to out of memory exceptions.
+   * Set the percentage of off-heap at or above which the cache is considered in danger of becoming
+   * inoperable due to out of memory exceptions.
-   * Changing this value can cause {@link LowMemoryException} to be thrown from
-   * the following {@link Cache} operations:
+   * Changing this value can cause {@link LowMemoryException} to be thrown from the following
+   * {@link Cache} operations:
-   * <li>{@linkplain QueryService#createIndex(String, org.apache.geode.cache.query.IndexType, String, String) index creation}
+   * <li>{@linkplain QueryService#createIndex(String, org.apache.geode.cache.query.IndexType, String, String)
+   * index creation}
-   * Only one change to this attribute or the eviction off-heap percentage will be
-   * allowed at any given time and its effect will be fully realized before the
-   * next change is allowed.
+   * Only one change to this attribute or the eviction off-heap percentage will be allowed at any
+   * given time and its effect will be fully realized before the next change is allowed.
-   * @throws IllegalStateException if the ofHeapPercentage value is not >= 0 or
-   * <= 100 or when less than the current eviction off-heap percentage
+   * @throws IllegalStateException if the ofHeapPercentage value is not >= 0 or <= 100 or when less
+   *         than the current eviction off-heap percentage
-  
+
-   * Get the percentage of off-heap at or above which the cache is considered in
-   * danger of becoming inoperable.
+   * Get the percentage of off-heap at or above which the cache is considered in danger of becoming
+   * inoperable.
-   * @return either the current or recently used percentage of the maximum
-   * off-heap memory
+   * @return either the current or recently used percentage of the maximum off-heap memory
-   * Set the percentage of heap at or above which the eviction should begin on
-   * Regions configured for {@linkplain 
-   * EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
+   * Set the percentage of heap at or above which the eviction should begin on Regions configured
+   * for {@linkplain EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
-   * Only one change to this attribute or critical heap percentage will be
-   * allowed at any given time and its effect will be fully realized before the
-   * next change is allowed.
+   * Only one change to this attribute or critical heap percentage will be allowed at any given time
+   * and its effect will be fully realized before the next change is allowed.
-   * This feature requires additional VM flags to perform properly. See {@linkplain 
-   * ResourceManager#setCriticalHeapPercentage(float) setCriticalHeapPercentage() for details.}
+   * This feature requires additional VM flags to perform properly. See
+   * {@linkplain ResourceManager#setCriticalHeapPercentage(float) setCriticalHeapPercentage() for
+   * details.}
-   * @throws IllegalStateException if the heapPercentage value is not >= 0 or 
-   * <= 100 or when greater than the current critical heap percentage.
+   * @throws IllegalStateException if the heapPercentage value is not >= 0 or <= 100 or when greater
+   *         than the current critical heap percentage.
-  
+
-   * Get the percentage of heap at or above which the eviction should begin on
-   * Regions configured for {@linkplain 
-   * EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
+   * Get the percentage of heap at or above which the eviction should begin on Regions configured
+   * for {@linkplain EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
-   * @return either the current or recently used percentage of the maximum 
-   * tenured heap
+   * @return either the current or recently used percentage of the maximum tenured heap
-   * Set the percentage of off-heap at or above which the eviction should begin on
-   * Regions configured for {@linkplain 
-   * EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
+   * Set the percentage of off-heap at or above which the eviction should begin on Regions
+   * configured for {@linkplain EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
-   * Only one change to this attribute or critical off-heap percentage will be
-   * allowed at any given time and its effect will be fully realized before the
-   * next change is allowed.
+   * Only one change to this attribute or critical off-heap percentage will be allowed at any given
+   * time and its effect will be fully realized before the next change is allowed.
-   * @throws IllegalStateException if the offHeapPercentage value is not >= 0 or 
-   * <= 100 or when greater than the current critical off-heap percentage.
+   * @throws IllegalStateException if the offHeapPercentage value is not >= 0 or <= 100 or when
+   *         greater than the current critical off-heap percentage.
-  
+
-   * Get the percentage of off-heap at or above which the eviction should begin on
-   * Regions configured for {@linkplain 
-   * EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
+   * Get the percentage of off-heap at or above which the eviction should begin on Regions
+   * configured for {@linkplain EvictionAttributes#createLRUHeapAttributes() HeapLRU eviction}.
-   * @return either the current or recently used percentage of the maximum 
-   * off-heap memory
+   * @return either the current or recently used percentage of the maximum off-heap memory
