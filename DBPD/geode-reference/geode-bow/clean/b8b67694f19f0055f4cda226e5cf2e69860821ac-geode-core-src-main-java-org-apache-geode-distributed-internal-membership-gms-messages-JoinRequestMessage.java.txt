Merge branch 'develop' into feature/GEODE-7049

-import org.apache.geode.DataSerializer;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.Version;
+import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.GMSUtil;
+import org.apache.geode.internal.serialization.DeserializationContext;
+import org.apache.geode.internal.serialization.SerializationContext;
+import org.apache.geode.internal.serialization.Version;
-public class JoinRequestMessage extends HighPriorityDistributionMessage {
-  private InternalDistributedMember memberID;
+public class JoinRequestMessage extends AbstractGMSMessage {
+  private GMSMember memberID;
+  private boolean useMulticast;
-  public JoinRequestMessage(InternalDistributedMember coord, InternalDistributedMember id,
+  public JoinRequestMessage(GMSMember coord, GMSMember id,
-    setRecipient(coord);
+    if (coord != null) {
+      setRecipient(coord);
+    }
-  public void process(ClusterDistributionManager dm) {
-    throw new IllegalStateException("this message is not intended to execute in a thread pool");
+  public boolean getMulticast() {
+    return useMulticast;
-  public InternalDistributedMember getMemberID() {
+  @Override
+  public void setMulticast(boolean useMulticast) {
+    this.useMulticast = useMulticast;
+  }
+
+  public GMSMember getMemberID() {
-    return getShortClassName() + "(" + memberID
+    return getClass().getSimpleName() + "(" + memberID
-  public void toData(DataOutput out) throws IOException {
-    DataSerializer.writeObject(memberID, out);
-    DataSerializer.writeObject(credentials, out);
-    DataSerializer.writePrimitiveInt(failureDetectionPort, out);
+  public void toData(DataOutput out,
+      SerializationContext context) throws IOException {
+    GMSUtil.writeMemberID(memberID, out, context);
+    context.getSerializer().writeObject(credentials, out);
+    out.writeInt(failureDetectionPort);
-    out.writeBoolean(getMulticast());
+    out.writeBoolean(false);
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    memberID = DataSerializer.readObject(in);
-    credentials = DataSerializer.readObject(in);
-    failureDetectionPort = DataSerializer.readPrimitiveInt(in);
-    setMulticast(in.readBoolean());
+  public void fromData(DataInput in,
+      DeserializationContext context) throws IOException, ClassNotFoundException {
+    memberID = GMSUtil.readMemberID(in, context);
+    credentials = context.getDeserializer().readObject(in);
+    failureDetectionPort = in.readInt();
+    // setMulticast(in.readBoolean());
+    in.readBoolean();
