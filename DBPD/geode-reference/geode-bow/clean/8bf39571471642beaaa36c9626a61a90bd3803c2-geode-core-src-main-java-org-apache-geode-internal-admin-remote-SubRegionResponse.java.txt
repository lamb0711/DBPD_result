Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
-   
+
+
-//import org.apache.geode.internal.*;
+// import org.apache.geode.internal.*;
-  
+
-   * Returns a <code>SubRegionResponse</code> that will be returned to the
-   * specified recipient. The message will contains a copy of the local manager's
-   * system config.
+   * Returns a <code>SubRegionResponse</code> that will be returned to the specified recipient. The
+   * message will contains a copy of the local manager's system config.
-  public static SubRegionResponse create(DistributionManager dm, InternalDistributedMember recipient, Region r) {
+  public static SubRegionResponse create(DistributionManager dm,
+      InternalDistributedMember recipient, Region r) {
-    while(it.hasNext()) {
-      Region reg = (Region)it.next();
+    while (it.hasNext()) {
+      Region reg = (Region) it.next();
-      userAttrs.
-        add(CacheDisplay.
-            getCachedObjectDisplay(reg.getUserAttribute(), GemFireVM.LIGHTWEIGHT_CACHE_VALUE));
+      userAttrs.add(CacheDisplay.getCachedObjectDisplay(reg.getUserAttribute(),
+          GemFireVM.LIGHTWEIGHT_CACHE_VALUE));
-    m.subRegionNames = (String[])subNames.toArray(temp);
-    m.userAttributes = (String[])userAttrs.toArray(temp);
+    m.subRegionNames = (String[]) subNames.toArray(temp);
+    m.userAttributes = (String[]) userAttrs.toArray(temp);
-  
+
-//    String globalParentName = parent.getFullPath();
+    // String globalParentName = parent.getFullPath();
-    for (int i=0; i < subRegionNames.length; i++) {
+    for (int i = 0; i < subRegionNames.length; i++) {
-  public void fromData(DataInput in)
-      throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.subRegionNames = (String[])DataSerializer.readObject(in);
-    this.userAttributes = (String[])DataSerializer.readObject(in);
+    this.subRegionNames = (String[]) DataSerializer.readObject(in);
+    this.userAttributes = (String[]) DataSerializer.readObject(in);
