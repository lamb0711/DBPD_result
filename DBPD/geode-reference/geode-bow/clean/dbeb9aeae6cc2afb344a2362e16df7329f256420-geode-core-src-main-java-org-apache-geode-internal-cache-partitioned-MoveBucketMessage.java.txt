Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Moves the bucket to the recipient's PartitionedRegionDataStore. The
- * recipient will create an extra redundant copy of the bucket and then
- * send a {@link RemoveBucketMessage} to the specified source for the bucket.
+ * Moves the bucket to the recipient's PartitionedRegionDataStore. The recipient will create an
+ * extra redundant copy of the bucket and then send a {@link RemoveBucketMessage} to the specified
+ * source for the bucket.
- * Usage:
- * MoveBucketResponse response = MoveBucketMessage.send(
- *     InternalDistributedMember, PartitionedRegion, int bucketId);
- * if (response != null && response.waitForResponse()) {
- *   // bucket was moved
- * }
+ * Usage: MoveBucketResponse response = MoveBucketMessage.send( InternalDistributedMember,
+ * PartitionedRegion, int bucketId); if (response != null && response.waitForResponse()) { // bucket
+ * was moved }
-  
+
-  public MoveBucketMessage() {
-  }
+  public MoveBucketMessage() {}
-  private MoveBucketMessage(
-      InternalDistributedMember recipient, 
-      int regionId, 
-      ReplyProcessor21 processor,
-      int bucketId,
-      InternalDistributedMember source) {
+  private MoveBucketMessage(InternalDistributedMember recipient, int regionId,
+      ReplyProcessor21 processor, int bucketId, InternalDistributedMember source) {
-   * Sends a message to move the bucket from <code>source</code> member to
-   * the <code>recipient</code> member.
+   * Sends a message to move the bucket from <code>source</code> member to the
+   * <code>recipient</code> member.
-  public static MoveBucketResponse send(
-      InternalDistributedMember recipient, 
-      PartitionedRegion region,
-      int bucketId,
-      InternalDistributedMember source) {
-    
-    Assert.assertTrue(recipient != null, 
-        "MoveBucketMessage NULL recipient");
-    
-    MoveBucketResponse response = new MoveBucketResponse(
-        region.getSystem(), recipient, region);
-    MoveBucketMessage msg = new MoveBucketMessage(
-        recipient, region.getPRId(), response, bucketId, source);
+  public static MoveBucketResponse send(InternalDistributedMember recipient,
+      PartitionedRegion region, int bucketId, InternalDistributedMember source) {
-    Set<InternalDistributedMember> failures = 
-      region.getDistributionManager().putOutgoing(msg);
+    Assert.assertTrue(recipient != null, "MoveBucketMessage NULL recipient");
+
+    MoveBucketResponse response = new MoveBucketResponse(region.getSystem(), recipient, region);
+    MoveBucketMessage msg =
+        new MoveBucketMessage(recipient, region.getPRId(), response, bucketId, source);
+
+    Set<InternalDistributedMember> failures = region.getDistributionManager().putOutgoing(msg);
-      //throw new ForceReattemptException("Failed sending <" + msg + ">");
+      // throw new ForceReattemptException("Failed sending <" + msg + ">");
-  public MoveBucketMessage(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public MoveBucketMessage(DataInput in) throws IOException, ClassNotFoundException {
-                                                     PartitionedRegion region, 
-                                                     long startTime) 
-                                              throws ForceReattemptException {
-    
+      PartitionedRegion region, long startTime) throws ForceReattemptException {
+
-    boolean moved = dataStore.moveBucket(this.bucketId, this.source,true);
-    
+    boolean moved = dataStore.moveBucket(this.bucketId, this.source, true);
+
-    MoveBucketReplyMessage.send(
-        getSender(), getProcessorId(), dm, null, moved);
-    
+    MoveBucketReplyMessage.send(getSender(), getProcessorId(), dm, null, moved);
+
-  public static final class MoveBucketReplyMessage 
-  extends ReplyMessage {
-    
+  public static final class MoveBucketReplyMessage extends ReplyMessage {
+
-    public MoveBucketReplyMessage() {
-    }
+    public MoveBucketReplyMessage() {}
-    public MoveBucketReplyMessage(DataInput in)
-        throws IOException, ClassNotFoundException {
+    public MoveBucketReplyMessage(DataInput in) throws IOException, ClassNotFoundException {
-    private MoveBucketReplyMessage(
-        int processorId, ReplyException re, boolean moved) {
+    private MoveBucketReplyMessage(int processorId, ReplyException re, boolean moved) {
-    public static void send(InternalDistributedMember recipient,
-                            int processorId, 
-                            DM dm, 
-                            ReplyException re,
-                            boolean moved) {
-      Assert.assertTrue(recipient != null,
-          "MoveBucketReplyMessage NULL recipient");
-      MoveBucketReplyMessage m = 
-          new MoveBucketReplyMessage(processorId, re, moved);
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm,
+        ReplyException re, boolean moved) {
+      Assert.assertTrue(recipient != null, "MoveBucketReplyMessage NULL recipient");
+      MoveBucketReplyMessage m = new MoveBucketReplyMessage(processorId, re, moved);
-    
+
-        logger.trace(LogMarker.DM, "MoveBucketReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "MoveBucketReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      sb.append("MoveBucketReplyMessage ")
-        .append("processorid=").append(this.processorId)
-        .append(" moved=").append(this.moved)
-        .append(" reply to sender ").append(this.getSender());
+      sb.append("MoveBucketReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" moved=").append(this.moved).append(" reply to sender ")
+          .append(this.getSender());
-   * A processor to capture the value returned by the
-   * <code>MoveBucketReplyMessage</code>
+   * A processor to capture the value returned by the <code>MoveBucketReplyMessage</code>
-    
+
-    
-    public MoveBucketResponse(
-        InternalDistributedSystem ds,
-        InternalDistributedMember recipient, 
+
+    public MoveBucketResponse(InternalDistributedSystem ds, InternalDistributedMember recipient,
-          MoveBucketReplyMessage reply = 
-              (MoveBucketReplyMessage) msg;
+          MoveBucketReplyMessage reply = (MoveBucketReplyMessage) msg;
-     * Ignore any incoming exception from other VMs, we just want an
-     * acknowledgement that the message was processed.
+     * Ignore any incoming exception from other VMs, we just want an acknowledgement that the
+     * message was processed.
-    
+
-      }   catch(ReplyException e) {
+      } catch (ReplyException e) {
-          String msg = "MoveBucketMessage got ForceReattemptException due to local destroy on the PartitionRegion";
+          String msg =
+              "MoveBucketMessage got ForceReattemptException due to local destroy on the PartitionRegion";
