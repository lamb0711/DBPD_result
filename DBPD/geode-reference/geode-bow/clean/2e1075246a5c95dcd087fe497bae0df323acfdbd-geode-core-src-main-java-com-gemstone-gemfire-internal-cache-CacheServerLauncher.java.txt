Merge branch 'release/1.0.0-incubating.M3'

-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.PrintStream;
-import java.io.Serializable;
-import java.net.URL;
-import java.util.AbstractList;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.concurrent.TimeUnit;
-
+import com.gemstone.gemfire.distributed.ConfigurationProperties;
+import java.io.*;
+import java.net.URL;
+import java.util.*;
+import java.util.concurrent.TimeUnit;
+
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.LOG_FILE;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.SERVER_BIND_ADDRESS;
+
- * @since 2.0.2
+ * @since GemFire 2.0.2
-  public static boolean isDedicatedCacheServer = Boolean.getBoolean("gemfire.isDedicatedServer");
+  public static boolean isDedicatedCacheServer = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "isDedicatedServer");
-  public static boolean ASSIGN_BUCKETS = Boolean.getBoolean("gemfire.CacheServerLauncher.assignBucketsToPartitions");
+  public static boolean ASSIGN_BUCKETS = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "CacheServerLauncher.assignBucketsToPartitions");
-  public static boolean DONT_EXIT_AFTER_LAUNCH = Boolean.getBoolean("gemfire.CacheServerLauncher.dontExitAfterLaunch");
+  public static boolean DONT_EXIT_AFTER_LAUNCH = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "CacheServerLauncher.dontExitAfterLaunch");
-  
-  private static final long STATUS_WAIT_TIME 
-    = Long.getLong("gemfire.CacheServerLauncher.STATUS_WAIT_TIME_MS", 15000);
+
+  private static final long STATUS_WAIT_TIME
+      = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "CacheServerLauncher.STATUS_WAIT_TIME_MS", 15000);
-  private static final long SHUTDOWN_WAIT_TIME 
-    = Long.getLong("gemfire.CacheServerLauncher.SHUTDOWN_WAIT_TIME_MS", 20000);
+  private static final long SHUTDOWN_WAIT_TIME
+      = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "CacheServerLauncher.SHUTDOWN_WAIT_TIME_MS", 20000);
-  protected static final String SERVER_BIND_ADDRESS = "server-bind-address";
+  protected static final String SERVER_BIND_ADDRESS_NAME = SERVER_BIND_ADDRESS;
-  protected static final String LOCK_MEMORY = "lock-memory";
+  protected static final String LOCK_MEMORY = ConfigurationProperties.LOCK_MEMORY;
-        props.put(DistributionConfig.LOCK_MEMORY_NAME, "true");
+        props.put(LOCK_MEMORY, "true");
-        options.put(SERVER_BIND_ADDRESS, arg);
+        options.put(SERVER_BIND_ADDRESS_NAME, arg);
-    // causes an icon to appear for sqlf launched procs
+    // causes an icon to appear for launched procs
-        props.put(DistributionConfig.LOCK_MEMORY_NAME, "true");
+        props.put(LOCK_MEMORY, "true");
-        options.put(SERVER_BIND_ADDRESS, arg.substring(arg.indexOf("=") + 1));
+        options.put(SERVER_BIND_ADDRESS_NAME, arg.substring(arg.indexOf("=") + 1));
-    serverBindAddress.set((String) options.get(SERVER_BIND_ADDRESS));
+    serverBindAddress.set((String) options.get(SERVER_BIND_ADDRESS_NAME));
-    if (props.getProperty(DistributionConfig.LOG_FILE_NAME) == null && CacheServerLauncher.isLoggingToStdOut()) {
+    if (props.getProperty(LOG_FILE) == null && CacheServerLauncher.isLoggingToStdOut()) {
-      if (gemfireProperties.get(DistributionConfig.LOG_FILE_NAME) == null) {
+      if (gemfireProperties.get(LOG_FILE) == null) {
-        props.setProperty(DistributionConfig.LOG_FILE_NAME, defaultLogFileName);
+        props.setProperty(LOG_FILE, defaultLogFileName);
-   * {@link DistributionConfig#LOG_FILE_NAME} property is set to stdout
+   * {@link ConfigurationProperties#LOG_FILE} property is set to stdout
-      final String logFile = gfprops.getProperty(DistributionConfig.LOG_FILE_NAME);
+      final String logFile = gfprops.getProperty(LOG_FILE);
-    commandLineWrapper.add((String) options.get(SERVER_BIND_ADDRESS));
+    commandLineWrapper.add((String) options.get(SERVER_BIND_ADDRESS_NAME));
-    if (props.getProperty(DistributionConfig.LOG_FILE_NAME) == null && CacheServerLauncher.isLoggingToStdOut()) {
+    if (props.getProperty(LOG_FILE) == null && CacheServerLauncher.isLoggingToStdOut()) {
-      commandLineWrapper.add(DistributionConfig.LOG_FILE_NAME + "=" + defaultLogFileName);
+      commandLineWrapper.add(LOG_FILE + "=" + defaultLogFileName);
