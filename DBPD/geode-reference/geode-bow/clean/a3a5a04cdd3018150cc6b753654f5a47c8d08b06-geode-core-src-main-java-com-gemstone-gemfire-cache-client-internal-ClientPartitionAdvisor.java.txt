Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/test/java/com/gemstone/gemfire/cache30/DistributedMulticastRegionDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java

+import org.apache.logging.log4j.Logger;
+
-import com.gemstone.gemfire.internal.cache.BucketServerLocation66;
-import com.gemstone.gemfire.internal.cache.BucketServerLocation;
-import com.gemstone.gemfire.internal.cache.FixedPartitionAttributesImpl;
-import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.cache.FixedPartitionAttributesImpl;
-import org.apache.logging.log4j.Logger;
+  
+  private Random random = new Random();
-      int index = new Random().nextInt(locationsCopy.size() - 1);
+      int index = random.nextInt(locationsCopy.size());
-    ArrayList<Integer> bucketList = new ArrayList<Integer>(
-        this.bucketServerLocationsMap.keySet());
-
-    if (bucketList.size() > 0) {
-      Collections.shuffle(bucketList);
+    ArrayList<Integer> bucketList = new ArrayList<Integer>(this.bucketServerLocationsMap.keySet());
+    int size = bucketList.size();
+    if (size > 0) {
-          .get(bucketList.get(0));
-
+          .get(bucketList.get(random.nextInt(size)));
