GEODE-7177: Extract LogService to a separate submodule

- Extracting LogService and it's dependencies to a separate geode-logging
submodule so that other modules not in geode-core can still use LogService to
get a Logger.

- Removing the use of the logging SPI from LogService
LogService had a dependency on the logging SPI in geode-core. However, this
dependency was unecessary - the LoggingProvider loaded statically in this class
never had `configure` called on it. In addition, the getLogger methods of this
class are merely creating FastLoggers which can live inside geode-logging and
do not need to be pluggable.

- Moved executors that are not dependent on geode-core to geode-logging and
renamed the remaining executors to be CoreLoggingExecutors.

- Refactor the marker interface from Loggable to EntriesCollection
-import static org.apache.geode.distributed.internal.InternalDistributedSystem.SHUTDOWN_HOOK_NAME;
-
-import org.apache.geode.SystemFailure;
-      new Implementation(LogService.getLogger(), error -> SystemFailure.setFailure(error));
+      new Implementation(LogService.getLogger());
+  public static void setFailureSetter(final FailureSetter failureSetter) {
+    handler.setFailureSetter(failureSetter);
+  }
+
-  interface FailureSetter {
-
+  public interface FailureSetter {
-    private final FailureSetter failureSetter;
+    private FailureSetter failureSetter;
-    Implementation(final Logger logger, final FailureSetter failureSetter) {
+    Implementation(final Logger logger) {
-      this.failureSetter = failureSetter;
-      if (e instanceof VirtualMachineError) {
+      if (e instanceof VirtualMachineError && failureSetter != null) {
-      if (e instanceof NoClassDefFoundError && t.getName().equals(SHUTDOWN_HOOK_NAME)) {
+      if (e instanceof NoClassDefFoundError && !((LoggingThread) t).isTreatExceptionAsFatal()) {
+    void setFailureSetter(final FailureSetter failureSetter) {
+      this.failureSetter = failureSetter;
+    }
+
