GEODE-7157: SSLConfigurationFactory thread-safe

By removing deprecated
SSLConfigurationFactory::getSSLConfigForComponent()
method with SecurableCommunicationChannel input argument
the static distributedConfig and registeredSSLConfig
members are not needed anymore and therefore the
thread-safety for this class is guaranteed just by
protecting the access to the "instance" member.

-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import org.apache.geode.GemFireConfigException;
-  private DistributionConfig distributionConfig = null;
-  private Map<SecurableCommunicationChannel, SSLConfig> registeredSSLConfig =
-      new ConcurrentHashMap<>();
-  private DistributionConfig getDistributionConfig() {
-    if (distributionConfig == null) {
-      throw new GemFireConfigException("SSL Configuration requires a valid distribution config.");
-    }
-    return distributionConfig;
-  }
-
-  public static void setDistributionConfig(final DistributionConfig distributionConfig) {
-    if (distributionConfig == null) {
-      throw new GemFireConfigException("SSL Configuration requires a valid distribution config.");
-    }
-    getInstance().distributionConfig = distributionConfig;
-  }
-
-  /**
-   * @deprecated since GEODE 1.3, use #{getSSLConfigForComponent({@link DistributionConfig} ,
-   *             {@link SecurableCommunicationChannel})} instead
-   */
-  @Deprecated
-  public static SSLConfig getSSLConfigForComponent(
-      SecurableCommunicationChannel sslEnabledComponent) {
-    SSLConfig sslConfig = getInstance().getRegisteredSSLConfigForComponent(sslEnabledComponent);
-    if (sslConfig == null) {
-      sslConfig = getInstance().createSSLConfigForComponent(sslEnabledComponent);
-      getInstance().registeredSSLConfigForComponent(sslEnabledComponent, sslConfig);
-    }
-    return sslConfig;
-  }
-
-  private void registeredSSLConfigForComponent(
-      final SecurableCommunicationChannel sslEnabledComponent, final SSLConfig sslConfig) {
-    registeredSSLConfig.put(sslEnabledComponent, sslConfig);
-  }
-
-  private SSLConfig createSSLConfigForComponent(
-      final SecurableCommunicationChannel sslEnabledComponent) {
-    return createSSLConfigForComponent(getDistributionConfig(), sslEnabledComponent);
-  }
-
-  private SSLConfig getRegisteredSSLConfigForComponent(
-      final SecurableCommunicationChannel sslEnabledComponent) {
-    return registeredSSLConfig.get(sslEnabledComponent);
-  }
-
-  public static void close() {
-    getInstance().clearSSLConfigForAllComponents();
-    getInstance().distributionConfig = null;
-  }
-
-  private synchronized void clearSSLConfigForAllComponents() {
-    registeredSSLConfig.clear();
-  }
-
