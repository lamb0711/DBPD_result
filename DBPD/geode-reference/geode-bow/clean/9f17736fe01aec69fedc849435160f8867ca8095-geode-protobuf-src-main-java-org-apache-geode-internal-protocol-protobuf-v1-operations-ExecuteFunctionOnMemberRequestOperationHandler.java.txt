GEODE-3643 Add function execution on specific member

Refactored the Function operation handlers and added an OnGroups version
of function execution.

This closes #1426

-import org.apache.geode.cache.execute.Function;
-import org.apache.geode.cache.execute.FunctionException;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.protocol.operations.ProtobufOperationHandler;
-import org.apache.geode.internal.protocol.protobuf.v1.FunctionAPI;
+import org.apache.geode.internal.protocol.protobuf.v1.FunctionAPI.ExecuteFunctionOnMemberRequest;
+import org.apache.geode.internal.protocol.protobuf.v1.FunctionAPI.ExecuteFunctionOnMemberResponse;
-import org.apache.geode.internal.protocol.protobuf.v1.state.exception.ConnectionStateException;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.security.NotAuthorizedException;
-public class ExecuteFunctionOnMemberRequestOperationHandler implements
-    ProtobufOperationHandler<FunctionAPI.ExecuteFunctionOnMemberRequest, FunctionAPI.ExecuteFunctionOnMemberResponse> {
+public class ExecuteFunctionOnMemberRequestOperationHandler extends
+    AbstractFunctionRequestOperationHandler<ExecuteFunctionOnMemberRequest, ExecuteFunctionOnMemberResponse> {
+
+
-  public Result<FunctionAPI.ExecuteFunctionOnMemberResponse, ClientProtocol.ErrorResponse> process(
-      ProtobufSerializationService serializationService,
-      FunctionAPI.ExecuteFunctionOnMemberRequest request,
-      MessageExecutionContext messageExecutionContext) throws InvalidExecutionContextException {
+  protected Set<?> parseFilter(ProtobufSerializationService serializationService,
+      ExecuteFunctionOnMemberRequest request) throws EncodingException {
+    // filters are not allowed on functions not associated with regions
+    return null;
+  }
-    final String functionID = request.getFunctionID();
+  @Override
+  protected String getFunctionID(ExecuteFunctionOnMemberRequest request) {
+    return request.getFunctionID();
+  }
-    final Function<?> function = FunctionService.getFunction(functionID);
-    if (function == null) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.INVALID_REQUEST)
-              .setMessage(LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
-                  .toLocalizedString(functionID))
-              .build())
-          .build());
-    }
+  @Override
+  protected String getRegionName(ExecuteFunctionOnMemberRequest request) {
+    // region name is not allowed in onMember invocation
+    return null;
+  }
-    final SecurityService securityService = messageExecutionContext.getCache().getSecurityService();
-
-    try {
-      // check security for function.
-      final String noRegion = null;
-      function.getRequiredPermissions(noRegion).forEach(securityService::authorize);
-    } catch (NotAuthorizedException ex) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder()
-              .setMessage("Authorization failed for function \"" + functionID + "\"")
-              .setErrorCode(BasicTypes.ErrorCode.AUTHORIZATION_FAILED))
-          .build());
-    }
+  @Override
+  protected Object getExecutionTarget(ExecuteFunctionOnMemberRequest request, String regionName,
+      MessageExecutionContext executionContext) throws InvalidExecutionContextException {
-    DistributionManager distributionManager =
-        messageExecutionContext.getCache().getDistributionManager();
+    DistributionManager distributionManager = executionContext.getCache().getDistributionManager();
-                .setMessage("Member " + name + " not found to execute \"" + functionID + "\"")
+                .setMessage(
+                    "Member " + name + " not found to execute \"" + request.getFunctionID() + "\"")
-
-              .setMessage("No members found to execute \"" + functionID + "\"")
+              .setMessage("No members found to execute \"" + request.getFunctionID() + "\"")
+    return memberIds;
+  }
-    try {
-      Execution execution;
-      if (memberIds.size() == 1) {
-        execution = FunctionService.onMember(memberIds.iterator().next());
-      } else {
-        execution = FunctionService.onMembers(memberIds);
-      }
+  @Override
+  protected Object getFunctionArguments(ExecuteFunctionOnMemberRequest request,
+      ProtobufSerializationService serializationService) throws EncodingException {
+    return serializationService.decode(request.getArguments());
+  }
-      final Object arguments = serializationService.decode(request.getArguments());
-
-      if (arguments != null) {
-        execution = execution.setArguments(arguments);
-      }
-
-      final ResultCollector<Object, List<Object>> resultCollector = execution.execute(functionID);
-
-      if (function.hasResult()) {
-        List<Object> results = resultCollector.getResult();
-
-        final FunctionAPI.ExecuteFunctionOnMemberResponse.Builder responseMessage =
-            FunctionAPI.ExecuteFunctionOnMemberResponse.newBuilder();
-        for (Object result : results) {
-          responseMessage.addResults(serializationService.encode(result));
-        }
-        return Success.of(responseMessage.build());
-      } else {
-        // This is fire and forget.
-        return Success.of(FunctionAPI.ExecuteFunctionOnMemberResponse.newBuilder().build());
-      }
-    } catch (FunctionException ex) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.SERVER_ERROR)
-              .setMessage("Function execution failed: " + ex.toString()))
-          .build());
-    } catch (EncodingException ex) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.SERVER_ERROR)
-              .setMessage("Encoding failed: " + ex.toString()))
-          .build());
+  @Override
+  protected Execution getFunctionExecutionObject(Object executionTarget) {
+    Set<DistributedMember> memberIds = (Set<DistributedMember>) executionTarget;
+    if (memberIds.size() == 1) {
+      return FunctionService.onMember(memberIds.iterator().next());
+    } else {
+      return FunctionService.onMembers(memberIds);
+  @Override
+  protected Result buildResultMessage(ProtobufSerializationService serializationService,
+      List<Object> results) throws EncodingException {
+    final ExecuteFunctionOnMemberResponse.Builder responseMessage =
+        ExecuteFunctionOnMemberResponse.newBuilder();
+    for (Object result : results) {
+      responseMessage.addResults(serializationService.encode(result));
+    }
+    return Success.of(responseMessage.build());
+  }
+
+  @Override
+  protected Result buildResultMessage(ProtobufSerializationService serializationService)
+      throws EncodingException {
+    return Success.of(ExecuteFunctionOnMemberResponse.newBuilder().build());
+  }
+
