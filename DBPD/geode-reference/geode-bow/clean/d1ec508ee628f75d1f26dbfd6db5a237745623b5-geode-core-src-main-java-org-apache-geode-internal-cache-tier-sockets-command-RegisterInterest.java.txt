GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection, long start)
-    servConn.setAsTrue(REQUIRES_RESPONSE);
-    servConn.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
-    regionNamePart = msg.getPart(0);
+    regionNamePart = clientMessage.getPart(0);
-    int interestType = msg.getPart(1).getInt();
+    int interestType = clientMessage.getPart(1).getInt();
-      policy = (InterestResultPolicy) msg.getPart(2).getObject();
+      policy = (InterestResultPolicy) clientMessage.getPart(2).getObject();
-      writeChunkedException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      Part durablePart = msg.getPart(3);
+      Part durablePart = clientMessage.getPart(3);
-      writeChunkedException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    keyPart = msg.getPart(4);
+    keyPart = clientMessage.getPart(4);
-      writeChunkedException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    if (msg.getNumberOfParts() > 5) {
+    if (clientMessage.getNumberOfParts() > 5) {
-        Part notifyPart = msg.getPart(5);
+        Part notifyPart = clientMessage.getPart(5);
-        writeChunkedException(msg, e, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeChunkedException(clientMessage, e, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key);
+          serverConnection.getName(), clientMessage.getPayloadLength(),
+          serverConnection.getSocketString(), regionName, key);
-      logger.warn("{}: {}", servConn.getName(), message.toLocalizedString());
-      writeChunkedErrorResponse(msg, MessageType.REGISTER_INTEREST_DATA_ERROR,
-          message.toLocalizedString(), servConn);
-      servConn.setAsTrue(RESPONDED);
+      logger.warn("{}: {}", serverConnection.getName(), message.toLocalizedString());
+      writeChunkedErrorResponse(clientMessage, MessageType.REGISTER_INTEREST_DATA_ERROR,
+          message.toLocalizedString(), serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    LocalRegion region = (LocalRegion) servConn.getCache().getRegion(regionName);
+    LocalRegion region = (LocalRegion) serverConnection.getCache().getRegion(regionName);
-          new Object[] {servConn.getName(), regionName}));
+          new Object[] {serverConnection.getName(), regionName}));
-      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
-      servConn.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName, key,
-          servConn.getProxyID(), interestType, isDurable, sendUpdatesAsInvalidates, false, 0, true);
+      serverConnection.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName,
+          key, serverConnection.getProxyID(), interestType, isDurable, sendUpdatesAsInvalidates,
+          false, 0, true);
-      checkForInterrupt(servConn, e);
+      checkForInterrupt(serverConnection, e);
-      writeChunkedException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    CacheClientProxy ccp =
-        servConn.getAcceptor().getCacheClientNotifier().getClientProxy(servConn.getProxyID());
+    CacheClientProxy ccp = serverConnection.getAcceptor().getCacheClientNotifier()
+        .getClientProxy(serverConnection.getProxyID());
-      writeChunkedException(msg, ioex, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, ioex, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    ChunkedMessage chunkedResponseMsg = servConn.getRegisterInterestResponseMessage();
+    ChunkedMessage chunkedResponseMsg = serverConnection.getRegisterInterestResponseMessage();
-      chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+      chunkedResponseMsg.setTransactionId(clientMessage.getTransactionId());
-            servConn.getName(), regionName, key, chunkedResponseMsg);
+            serverConnection.getName(), regionName, key, chunkedResponseMsg);
-      chunkedResponseMsg.sendChunk(servConn);
+      chunkedResponseMsg.sendChunk(serverConnection);
-      chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+      chunkedResponseMsg.setTransactionId(clientMessage.getTransactionId());
-        fillAndSendRegisterInterestResponseChunks(region, key, interestType, policy, servConn);
-        servConn.setAsTrue(RESPONDED);
+        fillAndSendRegisterInterestResponseChunks(region, key, interestType, policy,
+            serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-        writeChunkedException(msg, e, false, servConn, chunkedResponseMsg);
-        servConn.setAsTrue(RESPONDED);
+        writeChunkedException(clientMessage, e, serverConnection, chunkedResponseMsg);
+        serverConnection.setAsTrue(RESPONDED);
-        logger.debug("{}: Sent register interest response for region {} key {}", servConn.getName(),
-            regionName, key);
+        logger.debug("{}: Sent register interest response for region {} key {}",
+            serverConnection.getName(), regionName, key);
