Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An {@code AsyncInvocation} represents the invocation of a remote invocation
- * that executes asynchronously from its caller.  An instance of
- * {@code AsyncInvocation} provides information about the invocation such as
- * any exception that it may have thrown.
+ * An {@code AsyncInvocation} represents the invocation of a remote invocation that executes
+ * asynchronously from its caller. An instance of {@code AsyncInvocation} provides information about
+ * the invocation such as any exception that it may have thrown.
- * <p>{@code AsyncInvocation} can be used as follows:
+ * <p>
+ * {@code AsyncInvocation} can be used as follows:
-  // async method call.  (Use a static ThreadLocal field that is
+  // async method call. (Use a static ThreadLocal field that is
-  
+
-   * @param  target
-   *         The object or {@link Class} on which the remote method was
-   *         invoked
-   * @param  methodName
-   *         The name of the method being invoked
-   * @param  work
-   *         The actual invocation of the method
+   * @param target The object or {@link Class} on which the remote method was invoked
+   * @param methodName The name of the method being invoked
+   * @param work The actual invocation of the method
-    this.thread = new Thread(new AsyncInvocationGroup(), runnable(work), getName(target, methodName));
+    this.thread =
+        new Thread(new AsyncInvocationGroup(), runnable(work), getName(target, methodName));
-   * Returns whether or not an exception occurred during this async
-   * method invocation.
+   * Returns whether or not an exception occurred during this async method invocation.
-   * Returns the exception that was thrown during this async method
-   * invocation.
+   * Returns the exception that was thrown during this async method invocation.
-   * Throws {@code AssertionError} wrapping any {@code Exception} thrown by
-   * this {@code AsyncInvocation}.
+   * Throws {@code AssertionError} wrapping any {@code Exception} thrown by this
+   * {@code AsyncInvocation}.
-   * @throws AssertionError wrapping any {@code Exception} thrown by this
-   *         {@code AsyncInvocation}.
+   * @throws AssertionError wrapping any {@code Exception} thrown by this {@code AsyncInvocation}.
-      throw new AssertionError("An exception occurred during asynchronous invocation.", getException());
+      throw new AssertionError("An exception occurred during asynchronous invocation.",
+          getException());
-   * @throws AssertionError wrapping any {@code Exception} thrown by this
-   *         {@code AsyncInvocation}.
+   * @throws AssertionError wrapping any {@code Exception} thrown by this {@code AsyncInvocation}.
-   * @throws AssertionError wrapping a {@code TimeoutException} if this
-   *         {@code AsyncInvocation} fails to complete within the default
-   *         timeout of 60 seconds as defined by {@link #DEFAULT_JOIN_MILLIS}.
+   * @throws AssertionError wrapping a {@code TimeoutException} if this {@code AsyncInvocation}
+   *         fails to complete within the default timeout of 60 seconds as defined by
+   *         {@link #DEFAULT_JOIN_MILLIS}.
-   * @param  millis
-   *         the time to wait in milliseconds
+   * @param millis the time to wait in milliseconds
-   * @throws AssertionError wrapping any {@code Exception} thrown by this
-   *         {@code AsyncInvocation}.
+   * @throws AssertionError wrapping any {@code Exception} thrown by this {@code AsyncInvocation}.
-   * @throws AssertionError wrapping a {@code TimeoutException} if this
-   *         {@code AsyncInvocation} fails to complete within the specified
-   *         timeout of {@code millis}.
+   * @throws AssertionError wrapping a {@code TimeoutException} if this {@code AsyncInvocation}
+   *         fails to complete within the specified timeout of {@code millis}.
-   * Waits at most {@code millis} milliseconds for this
-   * {@code AsyncInvocation} to complete. A timeout of {@code 0} means to wait
-   * forever.
+   * Waits at most {@code millis} milliseconds for this {@code AsyncInvocation} to complete. A
+   * timeout of {@code 0} means to wait forever.
-   * @param  millis
-   *         the time to wait in milliseconds
+   * @param millis the time to wait in milliseconds
-   * @throws IllegalArgumentException if the value of {@code millis} is
-   *         negative.
+   * @throws IllegalArgumentException if the value of {@code millis} is negative.
-   * Waits at most {@code millis} milliseconds plus {@code nanos} nanoseconds
-   * for this {@code AsyncInvocation} to complete.
+   * Waits at most {@code millis} milliseconds plus {@code nanos} nanoseconds for this
+   * {@code AsyncInvocation} to complete.
-   * @param  millis
-   *         the time to wait in milliseconds
-   * @param  nanos
-   *         {@code 0-999999} additional nanoseconds to wait
+   * @param millis the time to wait in milliseconds
+   * @param nanos {@code 0-999999} additional nanoseconds to wait
-   * @throws IllegalArgumentException
-   *         if the value of {@code millis} is negative, or the value
-   *         of {@code nanos} is not in the range {@code 0-999999}.
+   * @throws IllegalArgumentException if the value of {@code millis} is negative, or the value of
+   *         {@code nanos} is not in the range {@code 0-999999}.
-  public synchronized AsyncInvocation<V> join(final long millis, final int nanos) throws InterruptedException {
+  public synchronized AsyncInvocation<V> join(final long millis, final int nanos)
+      throws InterruptedException {
-   * Tests if this {@code AsyncInvocation}'s thread is alive. A thread is alive
-   * if it has been started and has not yet died.
+   * Tests if this {@code AsyncInvocation}'s thread is alive. A thread is alive if it has been
+   * started and has not yet died.
-   * @return {@code true} if this {@code AsyncInvocation}'s thread is alive;
-   *         {@code false} otherwise.
+   * @return {@code true} if this {@code AsyncInvocation}'s thread is alive; {@code false}
+   *         otherwise.
-    return !this.thread.isAlive(); //state != NEW;
+    return !this.thread.isAlive(); // state != NEW;
-   * Waits if necessary for the work to complete, and then returns the result
-   * of this {@code AsyncInvocation}.
+   * Waits if necessary for the work to complete, and then returns the result of this
+   * {@code AsyncInvocation}.
-   * @throws AssertionError wrapping any {@code Exception} thrown by this
-   *         {@code AsyncInvocation}.
+   * @throws AssertionError wrapping any {@code Exception} thrown by this {@code AsyncInvocation}.
-   * @throws AssertionError wrapping a {@code TimeoutException} if this
-   *         {@code AsyncInvocation} fails to complete within the default
-   *         timeout of 60 seconds as defined by {@link #DEFAULT_JOIN_MILLIS}.
+   * @throws AssertionError wrapping a {@code TimeoutException} if this {@code AsyncInvocation}
+   *         fails to complete within the default timeout of 60 seconds as defined by
+   *         {@link #DEFAULT_JOIN_MILLIS}.
-   * Waits if necessary for at most the given time for the computation
-   * to complete, and then retrieves its result, if available.
+   * Waits if necessary for at most the given time for the computation to complete, and then
+   * retrieves its result, if available.
-   * @param  timeout the maximum time to wait
-   * @param  unit the time unit of the timeout argument
+   * @param timeout the maximum time to wait
+   * @param unit the time unit of the timeout argument
-   * @throws AssertionError wrapping any {@code Exception} thrown by this
-   *         {@code AsyncInvocation}.
+   * @throws AssertionError wrapping any {@code Exception} thrown by this {@code AsyncInvocation}.
-   * @throws AssertionError wrapping a {@code TimeoutException} if this
-   *         {@code AsyncInvocation} fails to complete within the default
-   *         timeout of 60 seconds as defined by {@link #DEFAULT_JOIN_MILLIS}.
+   * @throws AssertionError wrapping a {@code TimeoutException} if this {@code AsyncInvocation}
+   *         fails to complete within the default timeout of 60 seconds as defined by
+   *         {@link #DEFAULT_JOIN_MILLIS}.
-  public V get(final long timeout, final TimeUnit unit) throws ExecutionException, InterruptedException, TimeoutException {
+  public V get(final long timeout, final TimeUnit unit)
+      throws ExecutionException, InterruptedException, TimeoutException {
-   * Returns the identifier of this {@code AsyncInvocation}'s thread. The
-   * thread ID is a positive <tt>long</tt> number generated when this thread
-   * was created. The thread ID is unique and remains unchanged during its
-   * lifetime. When a thread is terminated, this thread ID may be reused.
+   * Returns the identifier of this {@code AsyncInvocation}'s thread. The thread ID is a positive
+   * <tt>long</tt> number generated when this thread was created. The thread ID is unique and
+   * remains unchanged during its lifetime. When a thread is terminated, this thread ID may be
+   * reused.
-   * Throws {@code IllegalStateException} if this {@code AsyncInvocation} is
-   * not done.
+   * Throws {@code IllegalStateException} if this {@code AsyncInvocation} is not done.
-   * @param  message
-   *         The value to be used in constructing detail message
+   * @param message The value to be used in constructing detail message
-   * {@code AsyncInvocation} fails to complete within the default timeout of 60
-   * seconds as defined by {@link #DEFAULT_JOIN_MILLIS}.
+   * {@code AsyncInvocation} fails to complete within the default timeout of 60 seconds as defined
+   * by {@link #DEFAULT_JOIN_MILLIS}.
-   * @throws TimeoutException if this {@code AsyncInvocation} fails to complete
-   *         within the default timeout of 60 seconds as defined by
-   *         {@link #DEFAULT_JOIN_MILLIS}.
+   * @throws TimeoutException if this {@code AsyncInvocation} fails to complete within the default
+   *         timeout of 60 seconds as defined by {@link #DEFAULT_JOIN_MILLIS}.
-      throw new TimeoutException("Timed out waiting " + timeout + " milliseconds for AsyncInvocation to complete.");
+      throw new TimeoutException(
+          "Timed out waiting " + timeout + " milliseconds for AsyncInvocation to complete.");
-        try {
-          resultValue.set(work.call());
-        } catch (Throwable throwable) {
-          resultThrowable.set(throwable);
-        }
+      try {
+        resultValue.set(work.call());
+      } catch (Throwable throwable) {
+        resultThrowable.set(throwable);
+      }
-   * Returns the name of a {@code AsyncInvocation} based on its
-   * {@code targetObject} and {@code methodName}.
+   * Returns the name of a {@code AsyncInvocation} based on its {@code targetObject} and
+   * {@code methodName}.
-   * A {@code ThreadGroup} that notices when an exception occurs
-   * during an {@code AsyncInvocation}.
+   * A {@code ThreadGroup} that notices when an exception occurs during an {@code AsyncInvocation}.
-        SystemFailure.setFailure((VirtualMachineError)throwable); // don't throw
+        SystemFailure.setFailure((VirtualMachineError) throwable); // don't throw
