Revert "GEODE-7436: Deploy jar using semantic versioning scheme (#4343)" (#4380)

This reverts commit 0d4c1912


+import static java.util.stream.Collectors.toList;
-        response.getJarNames().values().stream()
-            .flatMap(Set::stream)
-            .collect(Collectors.toList());
+        response.getJarNames().values().stream().flatMap(Set::stream).collect(Collectors.toList());
-        Set<File> stagedJarFiles =
-            getJarsFromLocator(response.getMember(), response.getJarNames());
+        List<String> extraJarsOnServer =
+            jarDeployer.findDeployedJars().stream().map(DeployedJar::getJarName)
+                .filter(jarName -> !jarFileNames.contains(jarName)).collect(toList());
-        for (File stagedJarFile : stagedJarFiles) {
-          logger.info("Removing old versions of {} in cluster configuration.",
-              stagedJarFile.getName());
-          jarDeployer.deleteAllVersionsOfJar(stagedJarFile.getName());
+        for (String extraJar : extraJarsOnServer) {
+          logger.info("Removing jar not present in cluster configuration: {}", extraJar);
+          jarDeployer.deleteAllVersionsOfJar(extraJar);
+        Map<String, File> stagedJarFiles =
+            getJarsFromLocator(response.getMember(), response.getJarNames());
+
-  // download the jars from the locator for the specific groups this server is on (the server
-  // might be on multiple groups.
-  private Set<File> getJarsFromLocator(DistributedMember locator,
+  private Map<String, File> getJarsFromLocator(DistributedMember locator,
-    return new HashSet<>(results.values());
+    return results;
-  // the returned File will use use jarName as the fileName
-  public File downloadJar(DistributedMember locator, String groupName, String jarName)
-      throws IOException {
-    Path tempDir = FileUploader.createSecuredTempDirectory("deploy-");
-    Path tempJar = Paths.get(tempDir.toString(), jarName);
-
-    downloadTo(locator, groupName, jarName, tempJar);
-
-    return tempJar.toFile();
-  }
-
-  void downloadTo(DistributedMember locator, String groupName, String jarName, Path jarPath)
+  public static File downloadJar(DistributedMember locator, String groupName, String jarName)
-    FileOutputStream fos = new FileOutputStream(jarPath.toString());
+    Path tempDir = FileUploader.createSecuredTempDirectory("deploy-");
+    Path tempJar = Paths.get(tempDir.toString(), jarName);
+    FileOutputStream fos = new FileOutputStream(tempJar.toString());
+
+    return tempJar.toFile();
