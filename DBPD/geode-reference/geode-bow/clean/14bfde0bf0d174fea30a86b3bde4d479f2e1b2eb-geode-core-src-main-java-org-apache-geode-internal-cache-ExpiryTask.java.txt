Merge branch 'release/1.8.0'

+import java.util.concurrent.ExecutorService;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import org.apache.geode.distributed.internal.PooledExecutorWithDMStats;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingExecutors;
-  private static final ThreadPoolExecutor executor;
+  private static final ExecutorService executor;
-      ThreadFactory tf = new ThreadFactory() {
-        private int nextId = 0;
-
-        public Thread newThread(final Runnable command) {
-          String name = "Expiration threads";
-          final ThreadGroup group = LoggingThreadGroup.createThreadGroup(name);
-          final Runnable r = new Runnable() {
-            public void run() {
-              ConnectionTable.threadWantsSharedResources();
-              try {
-                command.run();
-              } finally {
-                ConnectionTable.releaseThreadsSockets();
-              }
-            }
-          };
-          Thread thread = new Thread(group, r, "Expiry " + nextId++);
-          thread.setDaemon(true);
-          return thread;
-        }
-      };
-      // LinkedBlockingQueue q = new LinkedBlockingQueue();
-      SynchronousQueue q = new SynchronousQueue();
-      executor = new PooledExecutorWithDMStats(q, nThreads, tf, null);
+      executor = LoggingExecutors.newThreadPoolWithSynchronousFeed("Expiry ",
+          (Runnable command) -> doExpiryThread(command),
+          nThreads);
+  private static void doExpiryThread(Runnable command) {
+    ConnectionTable.threadWantsSharedResources();
+    try {
+      command.run();
+    } finally {
+      ConnectionTable.releaseThreadsSockets();
+    }
+  }
+
-        LocalizedStrings.ExpiryTask_UNRECOGNIZED_EXPIRATION_ACTION_0.toLocalizedString(action));
+        String.format("unrecognized expiration action: %s", action));
-      logger.fatal(
-          LocalizedMessage.create(LocalizedStrings.ExpiryTask_EXCEPTION_IN_EXPIRATION_TASK), ex);
+      logger.fatal("Exception in expiration task", ex);
-      logger.fatal(
-          LocalizedMessage.create(LocalizedStrings.ExpiryTask_EXCEPTION_IN_EXPIRATION_TASK), ex);
+      logger.fatal("Exception in expiration task", ex);
