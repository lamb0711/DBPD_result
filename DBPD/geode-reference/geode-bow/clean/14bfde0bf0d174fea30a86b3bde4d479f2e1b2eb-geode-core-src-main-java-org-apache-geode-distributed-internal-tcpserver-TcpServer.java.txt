Merge branch 'release/1.8.0'

+import java.net.SocketException;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ExecutorService;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.geode.distributed.internal.PooledExecutorWithDMStats;
+import org.apache.geode.internal.logging.LoggingExecutors;
+import org.apache.geode.internal.logging.LoggingThread;
-  protected static final int READ_TIMEOUT =
+  // no longer static so that tests can test this system property
+  private final int READ_TIMEOUT =
-  private PooledExecutorWithDMStats executor;
-  private final ThreadGroup threadGroup;
+  private ExecutorService executor;
-      ThreadGroup threadGroup, String threadName, InternalLocator internalLocator,
+      String threadName, InternalLocator internalLocator,
-    this.executor = createExecutor(poolHelper, threadGroup);
-    this.threadGroup = threadGroup;
+    this.executor = createExecutor(poolHelper);
-  private static PooledExecutorWithDMStats createExecutor(PoolStatHelper poolHelper,
-      final ThreadGroup threadGroup) {
-    ThreadFactory factory = new ThreadFactory() {
-      private final AtomicInteger threadNum = new AtomicInteger();
-
-      public Thread newThread(Runnable r) {
-        Thread thread = new Thread(threadGroup, r,
-            "locator request thread[" + threadNum.incrementAndGet() + "]");
-        thread.setDaemon(true);
-        return thread;
-      }
-    };
-
-    return new PooledExecutorWithDMStats(new SynchronousQueue(), MAX_POOL_SIZE, poolHelper,
-        factory, POOL_IDLE_TIMEOUT, new ThreadPoolExecutor.CallerRunsPolicy(), null);
+  private static ExecutorService createExecutor(PoolStatHelper poolHelper) {
+    return LoggingExecutors.newThreadPoolWithSynchronousFeed("locator request thread ",
+        MAX_POOL_SIZE, poolHelper, POOL_IDLE_TIMEOUT, new ThreadPoolExecutor.CallerRunsPolicy());
-    this.executor = createExecutor(this.poolHelper, this.threadGroup);
+    this.executor = createExecutor(this.poolHelper);
-      serverThread = new Thread(threadGroup, threadName) {
-        @Override
-        public void run() {
-          TcpServer.this.run();
-        }
-      };
-      serverThread.setDaemon(true);
+      serverThread = new LoggingThread(threadName, this::run);
-      } catch (EOFException ignore) {
+      } catch (EOFException | SocketException ignore) {
