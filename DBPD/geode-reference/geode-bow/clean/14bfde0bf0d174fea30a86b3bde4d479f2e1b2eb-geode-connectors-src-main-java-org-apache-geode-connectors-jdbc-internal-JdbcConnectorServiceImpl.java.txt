Merge branch 'release/1.8.0'

-import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
-import org.apache.geode.internal.cache.InternalCache;
-  private final Map<String, ConnectorService.Connection> connectionsByName =
+  private final Map<String, RegionMapping> mappingsByRegion =
-  private final Map<String, ConnectorService.RegionMapping> mappingsByRegion =
-      new ConcurrentHashMap<>();
-  private final DataSourceManager manager =
-      new DataSourceManager(new HikariJdbcDataSourceFactory());
-  private volatile InternalCache cache;
-  private boolean registered;
-  public void createConnectionConfig(ConnectorService.Connection config)
-      throws ConnectionConfigExistsException {
-    ConnectorService.Connection existing = connectionsByName.putIfAbsent(config.getName(), config);
-    if (existing != null) {
-      throw new ConnectionConfigExistsException("Connection " + config.getName() + " exists");
-    }
-  }
-
-  @Override
-  public void replaceConnectionConfig(ConnectorService.Connection alteredConfig)
-      throws ConnectionConfigNotFoundException {
-    ConnectorService.Connection existingConfig = connectionsByName.get(alteredConfig.getName());
-    if (existingConfig == null) {
-      throw new ConnectionConfigNotFoundException(
-          "Connection configuration " + alteredConfig.getName() + " was not found");
-    }
-
-    connectionsByName.put(existingConfig.getName(), alteredConfig);
-  }
-
-  @Override
-  public void destroyConnectionConfig(String connectionName) {
-    connectionsByName.remove(connectionName);
-  }
-
-  @Override
-  public ConnectorService.Connection getConnectionConfig(String connectionName) {
-    return connectionsByName.get(connectionName);
-  }
-
-  @Override
-  public Set<ConnectorService.Connection> getConnectionConfigs() {
-    Set<ConnectorService.Connection> connectionConfigs = new HashSet<>();
-    connectionConfigs.addAll(connectionsByName.values());
-    return connectionConfigs;
-  }
-
-  @Override
-  public Set<ConnectorService.RegionMapping> getRegionMappings() {
-    Set<ConnectorService.RegionMapping> regionMappings = new HashSet<>();
+  public Set<RegionMapping> getRegionMappings() {
+    Set<RegionMapping> regionMappings = new HashSet<>();
-  public DataSourceManager getDataSourceManager() {
-    return manager;
-  }
-
-  @Override
-  public void createRegionMapping(ConnectorService.RegionMapping mapping)
+  public void createRegionMapping(RegionMapping mapping)
-    ConnectorService.RegionMapping existing =
+    RegionMapping existing =
-  public void replaceRegionMapping(ConnectorService.RegionMapping alteredMapping)
+  public void replaceRegionMapping(RegionMapping alteredMapping)
-    ConnectorService.RegionMapping existingMapping =
+    RegionMapping existingMapping =
-          "RegionMapping for region " + existingMapping.getRegionName() + " was not found");
+          "RegionMapping for the region " + alteredMapping.getRegionName() + " was not found");
-  public ConnectorService.RegionMapping getMappingForRegion(String regionName) {
+  public RegionMapping getMappingForRegion(String regionName) {
-  public void init(Cache cache) {
-    this.cache = (InternalCache) cache;
-  }
+  public void init(Cache cache) {}
