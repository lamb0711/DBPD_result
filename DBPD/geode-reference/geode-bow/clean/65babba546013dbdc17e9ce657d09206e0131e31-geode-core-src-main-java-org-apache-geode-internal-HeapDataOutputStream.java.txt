GEODE-6414: PdxInstanceFactory uses too much memory when it creates a PdxInstance (#3200)

Two causes of using too much memory have been identified:

1. PdxInstanceFactory.create() will register a duplicate PdxType when there is already an identical PdxType in the type registry. It should reuse the PdxType that is already in the type registry instead.
2. The HeapByteBuffer may have extra unused memory in it. A ByteBuffer of the size needed can be allocated and the bytes from the larger one copied into it.

To solve the second issue a new method on HeapDataOutputStream was
added that supports throwing away a specified number of initial bytes in
the stream when converting it to a ByteBuffer. PdxInstanceFactory always
throws away the first 9 bytes. This method also optimizes the creations done by
the factory when the serialized bytes exceed 1024.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>
Co-authored-by: Jianxia Chen <jchen@pivotal.io>
Co-authored-by: Benjamin Ross <bross@pivotal.io>

+  static final int SMALLEST_CHUNK_SIZE = 32;
-    if (allocSize < 32) {
-      this.MIN_CHUNK_SIZE = 32;
+    if (allocSize < SMALLEST_CHUNK_SIZE) {
+      this.MIN_CHUNK_SIZE = SMALLEST_CHUNK_SIZE;
-      int newBufPos = 0;
-        newBufPos += bb.position();
-        newBuffer.position(newBufPos); // works around JRockit 1.4.2.04 bug
-      newBufPos += this.buffer.position();
-      newBuffer.position(newBufPos); // works around JRockit 1.4.2.04 bug
+  private void consolidateChunks(int startPosition) {
+    assert startPosition < SMALLEST_CHUNK_SIZE;
+    final int size = size() - startPosition;
+    ByteBuffer newBuffer = ByteBuffer.allocate(size);
+    if (this.chunks != null) {
+      this.chunks.getFirst().position(startPosition);
+      for (ByteBuffer bb : this.chunks) {
+        newBuffer.put(bb);
+      }
+      this.chunks = null;
+    } else {
+      this.buffer.position(startPosition);
+    }
+    newBuffer.put(this.buffer);
+    newBuffer.flip(); // now ready for reading
+    this.buffer = newBuffer;
+  }
+
-   * gets the contents of this stream as s ByteBuffer, ready for reading. The stream should not be
+   * gets the contents of this stream as a ByteBuffer, ready for reading. The stream should not be
+   * gets the contents of this stream as a ByteBuffer, ready for reading. The stream should not be
+   * written to past this point until it has been reset.
+   *
+   * @param startPosition the position of the first byte to copy into the returned buffer.
+   */
+  public ByteBuffer toByteBuffer(int startPosition) {
+    finishWriting();
+    consolidateChunks(startPosition);
+    return this.buffer;
+  }
+
+  /**
