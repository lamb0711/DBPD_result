Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.GemFireException;
-import com.gemstone.gemfire.GemFireIOException;
-import com.gemstone.gemfire.InternalGemFireException;
-import com.gemstone.gemfire.NoSystemException;
-import com.gemstone.gemfire.SystemFailure;
-import com.gemstone.gemfire.UncreatedSystemException;
-import com.gemstone.gemfire.UnstartedSystemException;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+
+import com.gemstone.gemfire.*;
-import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.gemstone.gemfire.distributed.internal.DistributionConfigImpl;
-import com.gemstone.gemfire.distributed.internal.HighPriorityAckedMessage;
-import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
-import com.gemstone.gemfire.distributed.internal.InternalLocator;
+import com.gemstone.gemfire.distributed.internal.*;
-import com.gemstone.gemfire.internal.logging.InternalLogWriter;
-import com.gemstone.gemfire.internal.logging.LocalLogWriter;
-import java.io.BufferedInputStream;
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
-import java.io.EOFException;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.PrintStream;
-import java.io.PrintWriter;
-import java.io.RandomAccessFile;
-import java.io.StringWriter;
-import java.net.InetAddress;
-import java.net.NetworkInterface;
-import java.net.SocketException;
-import java.net.URL;
-import java.net.URLDecoder;
-import java.net.UnknownHostException;
+import java.io.*;
+import java.net.*;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.START_LOCATOR;
+
-   * @since 4.0
+   * @since GemFire 4.0
-    props.setProperty(DistributionConfig.LOG_LEVEL_NAME, "warning");
+    props.setProperty(LOG_LEVEL, "warning");
-    // no instances allowed
-    // [sumedh] now is overridden by SQLF
-    "start-locator", "stop-locator", "status-locator", "info-locator",
+      START_LOCATOR, "stop-locator", "status-locator", "info-locator",
-          cmd = "start-locator";
+          cmd = START_LOCATOR;
-    helpMap.put("start-locator", 
+    helpMap.put(START_LOCATOR,
-                "This command will use the \"gemfire.properties\" file to determine what distributed system to connect to.");
+                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                "This command will use the \"gemfire.properties\" file to determine what distributed system to connect to."); 
+                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                + "This command will use the \"gemfire.properties\" file to determine what distributed system to connect to."); 
+                    + "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                "This command will use the \"gemfire.properties\" file to determine what distributed system to connect to."); 
+                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                "This command will use the \"gemfire.properties\" file to determine what distributed system to connect to.");
+                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-        .toLocalizedString("gemfire.properties")); 
+          .toLocalizedString(DistributionConfig.GEMFIRE_PREFIX + "properties"));
-            .toLocalizedString(new Object[] { "gemfire.properties",
-                "gemfire.systemDirectory", "GEMFIRE", "defaultSystem",
+          .toLocalizedString(new Object[] { DistributionConfig.GEMFIRE_PREFIX + "properties",
+              DistributionConfig.GEMFIRE_PREFIX + "systemDirectory", "GEMFIRE", "defaultSystem",
-    usageMap.put("start-locator", "start-locator [-port=<port>] [-address=<ipAddr>] [-dir=<locatorDir>] [-properties=<gemfire.properties>] [-peer=<true|false>] [-server=<true|false>] [-hostname-for-clients=<ipAddr>] [-D<system.property>=<value>] [-X<vm-setting>]");
+    usageMap.put(START_LOCATOR,
+        "start-locator [-port=<port>] [-address=<ipAddr>] [-dir=<locatorDir>] [-properties=<gemfire.properties>] [-peer=<true|false>] [-server=<true|false>] [-hostname-for-clients=<ipAddr>] [-D<system.property>=<value>] [-X<vm-setting>]");
-    cmdOptionsMap.put("start-locator",  new String[] {"-port=", "-dir=", "-address=", "-properties=", "-D", "-X", "-peer=", "-server=", "-hostname-for-clients="});
+    cmdOptionsMap
+        .put(START_LOCATOR, new String[] { "-port=", "-dir=", "-address=", "-properties=", "-D", "-X", "-peer=", "-server=", "-hostname-for-clients=" });
-      } else if (cmd.equalsIgnoreCase("start-locator")) {
+      } else if (cmd.equalsIgnoreCase(START_LOCATOR)) {
