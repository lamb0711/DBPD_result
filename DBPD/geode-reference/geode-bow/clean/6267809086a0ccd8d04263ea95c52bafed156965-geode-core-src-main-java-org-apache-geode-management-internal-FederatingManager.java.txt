GEODE-3290: Removed effectively-dead classes FilterChain, LocalFilterChain, and RemoteFilterChain.

* this closes #653

-  /**
-   * Remote Filter chain for local MBean filters
-   */
-  private RemoteFilterChain remoteFilterChain;
-
-   * @param jmxAdapter JMX Adpater
+   * @param jmxAdapter JMX Adapter
-    this.remoteFilterChain = new RemoteFilterChain();
-    this.proxyFactory = new MBeanProxyFactory(remoteFilterChain, jmxAdapter, service);
+    this.proxyFactory = new MBeanProxyFactory(jmxAdapter, service);
-    } catch (InterruptedException e) {
-      running = false;
-      throw new ManagementException(e);
-    // remove hidden mgmt regions and federatedMBeans
+    // remove hidden management regions and federatedMBeans
-      Iterator<DistributedMember> it = repo.getMonitoringRegionMap().keySet().iterator();
-      while (it.hasNext()) {
-        removeMemberArtifacts(it.next(), false);
+      for (DistributedMember distributedMember : repo.getMonitoringRegionMap().keySet()) {
+        removeMemberArtifacts(distributedMember, false);
-   * It will perform the GII request which might originate from TranstionListener or Membership
+   * It will perform the GII request which might originate from TransitionListener or Membership
-      Region<String, Object> proxyMonitoringRegion = null;
-      Region<NotificationKey, Notification> proxyNotificationgRegion = null;
-      boolean proxyCreatedForMember = false;
+      Region<String, Object> proxyMonitoringRegion;
+      Region<NotificationKey, Notification> proxyNotificationRegion;
-          AttributesFactory<String, Object> monitorAttrFactory =
-              new AttributesFactory<String, Object>();
+          AttributesFactory<String, Object> monitorAttrFactory = new AttributesFactory<>();
-              new AttributesFactory<NotificationKey, Notification>();
+              new AttributesFactory<>();
-          } catch (TimeoutException e) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Error During Internal Region creation {}", e.getMessage(), e);
-            }
-            throw new ManagementException(e);
-          } catch (RegionExistsException e) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Error During Internal Region creation {}", e.getMessage(), e);
-            }
-            throw new ManagementException(e);
-          } catch (IOException e) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Error During Internal Region creation {}", e.getMessage(), e);
-            }
-
-            throw new ManagementException(e);
-          } catch (ClassNotFoundException e) {
+          } catch (TimeoutException | RegionExistsException | IOException
+              | ClassNotFoundException e) {
-            proxyNotificationgRegion =
+            proxyNotificationRegion =
-          } catch (TimeoutException e) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Error During Internal Region creation {}", e.getMessage(), e);
-            }
-            throw new ManagementException(e);
-          } catch (RegionExistsException e) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Error During Internal Region creation {}", e.getMessage(), e);
-            }
-            throw new ManagementException(e);
-          } catch (IOException e) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Error During Internal Region creation {}", e.getMessage(), e);
-            }
-            throw new ManagementException(e);
-          } catch (ClassNotFoundException e) {
+          } catch (TimeoutException | RegionExistsException | IOException
+              | ClassNotFoundException e) {
-                proxyNotificationgRegion.getName());
+                proxyNotificationRegion.getName());
-          repo.putEntryInNotifRegionMap(member, proxyNotificationgRegion);
+          repo.putEntryInNotifRegionMap(member, proxyNotificationRegion);
-            proxyCreatedForMember = true;
