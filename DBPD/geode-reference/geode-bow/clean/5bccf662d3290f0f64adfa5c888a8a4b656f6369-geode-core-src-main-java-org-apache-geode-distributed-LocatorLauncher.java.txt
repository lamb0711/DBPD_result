GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-        LocalizedStrings.LocatorLauncher_LOCATOR_LAUNCHER_HELP.toLocalizedString());
-    helpMap.put(Command.START.getName(), LocalizedStrings.LocatorLauncher_START_LOCATOR_HELP
-        .toLocalizedString(String.valueOf(getDefaultLocatorPort())));
+        "A GemFire launcher used to start, stop and determine a Locator's status.");
+    helpMap.put(Command.START.getName(), String.format(
+        "Starts a Locator running in the current working directory listening on the default port (%s) bound to all IP addresses available to the localhost.  The Locator must be given a member name in the GemFire cluster.  The default bind-address and port may be overridden using the corresponding command-line options.",
+        String.valueOf(getDefaultLocatorPort())));
-        LocalizedStrings.LocatorLauncher_STATUS_LOCATOR_HELP.toLocalizedString());
+        "Displays the status of a Locator given any combination of the bind-address[port], member name/ID, PID, or the directory in which the Locator is running.");
-        LocalizedStrings.LocatorLauncher_STOP_LOCATOR_HELP.toLocalizedString());
+        "Stops a running Locator given a member name/ID, PID, or the directory in which the Locator is running.");
-        LocalizedStrings.LocatorLauncher_VERSION_LOCATOR_HELP.toLocalizedString());
+        "Displays GemFire product version information.");
-        LocalizedStrings.LocatorLauncher_LOCATOR_BIND_ADDRESS_HELP.toLocalizedString());
-    helpMap.put("debug", LocalizedStrings.LocatorLauncher_LOCATOR_DEBUG_HELP.toLocalizedString());
+        "Specifies the IP address on which to bind, or on which the Locator is bound, listening for client requests.  Defaults to all IP addresses available to the localhost.");
+    helpMap.put("debug", "Displays verbose information during the invocation of the launcher.");
-    helpMap.put("dir", LocalizedStrings.LocatorLauncher_LOCATOR_DIR_HELP.toLocalizedString());
-    helpMap.put("force", LocalizedStrings.LocatorLauncher_LOCATOR_FORCE_HELP.toLocalizedString());
+    helpMap.put("dir",
+        "Specifies the working directory where the Locator is running.  Defaults to the current working directory.");
+    helpMap.put("force",
+        "Enables any existing Locator PID file to be overwritten on start.  The default is to throw an error if a PID file already exists and --force is not specified.");
-        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_OUT_INFORMATION_INSTEAD_OF_PERFORMING_THE_COMMAND_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
-            .toLocalizedString());
+        "Causes GemFire to print out information instead of performing the command. This option is supported by all commands.");
-        LocalizedStrings.LocatorLauncher_LOCATOR_HOSTNAME_FOR_CLIENTS_HELP.toLocalizedString());
-    helpMap.put("member", LocalizedStrings.LocatorLauncher_LOCATOR_MEMBER_HELP.toLocalizedString());
-    helpMap.put("pid", LocalizedStrings.LocatorLauncher_LOCATOR_PID_HELP.toLocalizedString());
-    helpMap.put("port", LocalizedStrings.LocatorLauncher_LOCATOR_PORT_HELP
-        .toLocalizedString(String.valueOf(getDefaultLocatorPort())));
+        "An option to specify the hostname or IP address to send to clients so they can connect to this Locator. The default is to use the IP address to which the Locator is bound.");
+    helpMap.put("member", "Identifies the Locator by member name or ID in the GemFire cluster.");
+    helpMap.put("pid", "Indicates the OS process ID of the running Locator.");
+    helpMap.put("port", String.format(
+        "Specifies the port on which the Locator is listening for client requests. Defaults to %s.",
+        String.valueOf(getDefaultLocatorPort())));
-        LocalizedStrings.LocatorLauncher_LOCATOR_REDIRECT_OUTPUT_HELP.toLocalizedString());
+        "An option to cause the Locator to redirect standard out and standard error to the GemFire log file.");
-        throw new RuntimeException(LocalizedStrings.Launcher_Command_START_IO_ERROR_MESSAGE
-            .toLocalizedString(getServiceName(), getWorkingDirectory(), getId(), e.getMessage()),
+        throw new RuntimeException(
+            String.format("An IO error occurred while starting a %s in %s on %s: %s",
+                getServiceName(), getWorkingDirectory(), getId(), e.getMessage()),
-            LocalizedStrings.Launcher_Command_START_PID_FILE_ALREADY_EXISTS_ERROR_MESSAGE
-                .toLocalizedString(getServiceName(), getWorkingDirectory(), getId()),
+            String.format("A PID file already exists and a %s may be running in %s on %s.",
+                getServiceName(), getWorkingDirectory(), getId()),
-            LocalizedStrings.Launcher_Command_START_PID_UNAVAILABLE_ERROR_MESSAGE.toLocalizedString(
+            String.format("The process ID could not be determined while starting %s %s in %s: %s",
-          LocalizedStrings.Launcher_Command_START_SERVICE_ALREADY_RUNNING_ERROR_MESSAGE
-              .toLocalizedString(getServiceName(), getWorkingDirectory(), getId()));
+          String.format("A %s is already running in %s on %s.",
+              getServiceName(), getWorkingDirectory(), getId()));
-            LocalizedStrings.Launcher_Builder_PARSE_COMMAND_LINE_ARGUMENT_ERROR_MESSAGE
-                .toLocalizedString("Locator", e.getMessage()),
+            String.format("An error occurred while parsing command-line arguments for the %s: %s",
+                "Locator", e.getMessage()),
-              LocalizedStrings.Launcher_Builder_UNKNOWN_HOST_ERROR_MESSAGE
-                  .toLocalizedString("Locator"),
+              String.format("The hostname/IP address to which the %s will be bound is unknown.",
+                  "Locator"),
-            LocalizedStrings.LocatorLauncher_Builder_INVALID_HOSTNAME_FOR_CLIENTS_ERROR_MESSAGE
-                .toLocalizedString());
+            "The hostname used by clients to connect to the Locator must have an argument if the --hostname-for-clients command-line option is specified!");
-            LocalizedStrings.Launcher_Builder_MEMBER_NAME_ERROR_MESSAGE
-                .toLocalizedString("Locator"));
+            String.format("The %s member name must be specified.",
+                "Locator"));
-            LocalizedStrings.Launcher_Builder_PID_ERROR_MESSAGE.toLocalizedString());
+            "A process ID (PID) must be a non-negative integer value.");
-            LocalizedStrings.Launcher_Builder_INVALID_PORT_ERROR_MESSAGE
-                .toLocalizedString("Locator"));
+            String.format(
+                "The port on which the %s will listen must be between 1 and 65535 inclusive.",
+                "Locator"));
-            LocalizedStrings.Launcher_Builder_WORKING_DIRECTORY_NOT_FOUND_ERROR_MESSAGE
-                .toLocalizedString("Locator"),
+            String.format(AbstractLauncher.WORKING_DIRECTORY_NOT_FOUND_ERROR_MESSAGE,
+                "Locator"),
-              LocalizedStrings.Launcher_Builder_MEMBER_NAME_VALIDATION_ERROR_MESSAGE
-                  .toLocalizedString("Locator"));
+              String.format(
+                  AbstractLauncher.MEMBER_NAME_ERROR_MESSAGE,
+                  "Locator", "Locator"));
-              LocalizedStrings.Launcher_Builder_WORKING_DIRECTORY_OPTION_NOT_VALID_ERROR_MESSAGE
-                  .toLocalizedString("Locator"));
+              String.format(
+                  AbstractLauncher.WORKING_DIRECTORY_OPTION_NOT_VALID_ERROR_MESSAGE,
+                  "Locator", "Locator"));
