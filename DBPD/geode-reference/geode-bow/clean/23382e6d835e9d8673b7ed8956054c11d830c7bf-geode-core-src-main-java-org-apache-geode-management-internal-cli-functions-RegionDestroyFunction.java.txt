GEODE-4049: refactor CreateRegionCommand and DestoryRegionCommand status

* use tabular result display for destroy region command.
* status to reflect at least one region is created/deleted and cluser config is updated.

+import org.apache.geode.cache.RegionDestroyedException;
+import org.apache.geode.internal.logging.LogService;
+    String memberName = context.getMemberName();
+
-      // if the region is a distributed region, and is already destroyed by another member
+      // the region is already destroyed by another member
-        context.getResultSender().lastResult(new CliFunctionResult("", true, "SUCCESS"));
+        context.getResultSender().lastResult(new CliFunctionResult(memberName, true,
+            String.format("Region '%s' already destroyed", regionPath)));
+
-      context.getResultSender().lastResult(new CliFunctionResult("", xmlEntity, regionPath));
+      context.getResultSender().lastResult(new CliFunctionResult(memberName, xmlEntity,
+          String.format("Region '%s' destroyed successfully", regionPath)));
-      // user is trying to destroy something that can't destroyed.
-      context.getResultSender().lastResult(new CliFunctionResult("", false, ex.getMessage()));
-    } catch (Exception ex) {
+      // user is trying to destroy something that can't destroyed, like co-location
-          .lastResult(new CliFunctionResult("", ex, "failed to destroy " + regionPath));
+          .lastResult(new CliFunctionResult(memberName, false, ex.getMessage()));
+    } catch (RegionDestroyedException ex) {
+      context.getResultSender().lastResult(new CliFunctionResult(memberName, true,
+          String.format("Region '%s' already destroyed", regionPath)));
+    } catch (Exception ex) {
+      LogService.getLogger().error(ex.getMessage(), ex);
+      context.getResultSender().lastResult(new CliFunctionResult(memberName, ex, ex.getMessage()));
