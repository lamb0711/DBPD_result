Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The FunctionCommandsController class implements GemFire Management REST API web service endpoints for the
- * Gfsh Function Commands.
+ * The FunctionCommandsController class implements GemFire Management REST API web service endpoints
+ * for the Gfsh Function Commands.
+ * 
-  public String listFunctions(@RequestParam(value = CliStrings.LIST_FUNCTION__GROUP, required = false) final String[] groups,
-                              @RequestParam(value = CliStrings.LIST_FUNCTION__MEMBER, required = false) final String[] members,
-                              @RequestParam(value = CliStrings.LIST_FUNCTION__MATCHES, required = false) final String matches)
-  {
+  public String listFunctions(
+      @RequestParam(value = CliStrings.LIST_FUNCTION__GROUP,
+          required = false) final String[] groups,
+      @RequestParam(value = CliStrings.LIST_FUNCTION__MEMBER,
+          required = false) final String[] members,
+      @RequestParam(value = CliStrings.LIST_FUNCTION__MATCHES,
+          required = false) final String matches) {
-      command.addOption(CliStrings.LIST_FUNCTION__GROUP, StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.LIST_FUNCTION__GROUP,
+          StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
-      command.addOption(CliStrings.LIST_FUNCTION__MEMBER, StringUtils.concat(members, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.LIST_FUNCTION__MEMBER,
+          StringUtils.concat(members, StringUtils.COMMA_DELIMITER));
-  public Callable<ResponseEntity<String>> executeFunction(@PathVariable("id") final String functionId,
-                                                          @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ONGROUPS, required = false) final String groupName,
-                                                          @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ONMEMBER, required = false) final String memberNameId,
-                                                          @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ONREGION, required = false) final String regionNamePath,
-                                                          @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ARGUMENTS, required = false) final String[] arguments,
-                                                          @RequestParam(value = CliStrings.EXECUTE_FUNCTION__FILTER, required = false) final String filter,
-                                                          @RequestParam(value = CliStrings.EXECUTE_FUNCTION__RESULTCOLLECTOR, required = false) final String resultCollector)
-  {
+  public Callable<ResponseEntity<String>> executeFunction(
+      @PathVariable("id") final String functionId,
+      @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ONGROUPS,
+          required = false) final String groupName,
+      @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ONMEMBER,
+          required = false) final String memberNameId,
+      @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ONREGION,
+          required = false) final String regionNamePath,
+      @RequestParam(value = CliStrings.EXECUTE_FUNCTION__ARGUMENTS,
+          required = false) final String[] arguments,
+      @RequestParam(value = CliStrings.EXECUTE_FUNCTION__FILTER,
+          required = false) final String filter,
+      @RequestParam(value = CliStrings.EXECUTE_FUNCTION__RESULTCOLLECTOR,
+          required = false) final String resultCollector) {
-      command.addOption(CliStrings.EXECUTE_FUNCTION__ARGUMENTS, StringUtils.concat(arguments, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.EXECUTE_FUNCTION__ARGUMENTS,
+          StringUtils.concat(arguments, StringUtils.COMMA_DELIMITER));
-                                @RequestParam(value = CliStrings.DESTROY_FUNCTION__ONGROUPS, required = false) final String groupName,
-                                @RequestParam(value = CliStrings.DESTROY_FUNCTION__ONMEMBER, required = false) final String memberNameId)
-  {
+      @RequestParam(value = CliStrings.DESTROY_FUNCTION__ONGROUPS,
+          required = false) final String groupName,
+      @RequestParam(value = CliStrings.DESTROY_FUNCTION__ONMEMBER,
+          required = false) final String memberNameId) {
