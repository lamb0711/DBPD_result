 GEODE-6306: add capability to check cache element compatibility (#3695)



-import java.util.ArrayList;
+import java.util.HashMap;
-import java.util.List;
+import java.util.Map;
-    String[] groupWithThisElement = findGroupsWithThisElement(config, manager);
-    if (groupWithThisElement.length == 0) {
+    Map<String, CacheElement> existingElementsAndTheirGroups =
+        findCacheElement(config.getId(), manager);
+    if (existingElementsAndTheirGroups.size() == 0) {
-    Set<DistributedMember> membersOfExistingGroups = findMembers(groupWithThisElement);
+    Set<DistributedMember> membersOfExistingGroups =
+        findMembers(existingElementsAndTheirGroups.keySet().toArray(new String[0]));
+
+    // if there is no common member, we still need to verify if the new config is compatible with
+    // the existing ones.
+    for (Map.Entry<String, CacheElement> existing : existingElementsAndTheirGroups.entrySet()) {
+      manager.checkCompatibility(config, existing.getKey(), existing.getValue());
+    }
-  public String[] findGroupsWithThisElement(CacheElement config, ConfigurationManager manager) {
-    // if the same element exists in some groups already, make sure the groups has no common members
-    List<String> groupWithThisElement = new ArrayList<>();
+  public String[] findGroupsWithThisElement(String id, ConfigurationManager manager) {
+    return findCacheElement(id, manager).keySet().toArray(new String[0]);
+  }
+
+  /**
+   * this returns a map of CacheElement with this id, with the group as the key of the map
+   */
+  public Map<String, CacheElement> findCacheElement(String id, ConfigurationManager manager) {
+    Map<String, CacheElement> results = new HashMap<>();
-      if (cacheConfig != null && manager.get(config.getId(), cacheConfig) != null) {
-        groupWithThisElement.add(group);
+      if (cacheConfig == null) {
+        continue;
+      }
+      CacheElement existing = manager.get(id, cacheConfig);
+      if (existing != null) {
+        results.put(group, existing);
-    return groupWithThisElement.toArray(new String[0]);
+    return results;
