Merge remote-tracking branch 'origin/develop' into feature/GEODE-3940

+import static java.util.stream.Collectors.joining;
+
-import java.util.ArrayList;
+import org.springframework.shell.core.CommandMarker;
-  private final Map<String, MethodTarget> availabilityIndicators =
-      new HashMap<String, MethodTarget>();
+  private final Map<String, MethodTarget> availabilityIndicators = new HashMap<>();
-  public void addCommand(CliCommand command, Method commandMethod) {
+  public void registerCommand(CommandMarker commandMarker) {
+    for (Method method : commandMarker.getClass().getMethods()) {
+      CliCommand cliCommand = method.getAnnotation(CliCommand.class);
+      CliAvailabilityIndicator availability = method.getAnnotation(CliAvailabilityIndicator.class);
+      if (cliCommand == null && availability == null) {
+        continue;
+      }
+
+      if (cliCommand != null) {
+        addCommand(cliCommand, method);
+      }
+
+      if (availability != null) {
+        addAvailabilityIndicator(availability, new MethodTarget(method, commandMarker));
+      }
+    }
+  }
+
+  protected void addCommand(CliCommand command, Method commandMethod) {
-  public void addAvailabilityIndicator(CliAvailabilityIndicator availability, MethodTarget target) {
+  private void addAvailabilityIndicator(CliAvailabilityIndicator availability,
+      MethodTarget target) {
-      List<String> sortedTopics = new ArrayList<>(topics.keySet());
-      Collections.sort(sortedTopics);
-      sortedTopics.stream()
+      topics.keySet().stream().sorted()
-    Collections.sort(topic.relatedCommands);
-    topic.relatedCommands.stream().forEachOrdered(command -> builder.append(command.command)
+    topic.relatedCommands.stream().sorted().forEach(command -> builder.append(command.command)
-  boolean isAvailable(String command) {
+  private boolean isAvailable(String command) {
-    if (getSynonyms(cliOption).size() > 0) {
-      StringBuilder builder = new StringBuilder();
-      for (String string : getSynonyms(cliOption)) {
-        if (builder.length() > 0) {
-          builder.append(",");
-        }
-        builder.append(string);
-      }
-      optionNode.addChild(new HelpBlock(SYNONYMS_SUB_NAME + builder.toString()));
+
+    String synonyms = getSynonyms(cliOption).stream().collect(joining(","));
+    if (StringUtils.isNotEmpty(synonyms)) {
+      optionNode.addChild(new HelpBlock(SYNONYMS_SUB_NAME + synonyms));
+
-    List<String> synonyms = new ArrayList<>();
-      return synonyms;
+      return Collections.emptyList();
-      return synonyms;
+      return Collections.emptyList();
-    for (int i = 1; i < keys.length; i++) {
-      synonyms.add(keys[i]);
-    }
-    return synonyms;
+    return Arrays.asList(keys).subList(1, keys.length);
