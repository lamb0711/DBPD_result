GEODE-8250: Create new custom log config acceptance tests (#5309)

* Adjust GfshRule use of TemporaryFolder and use it
* Move GfshRuleIntegrationTest from test to integrationTest
* Fixup GfshRuleIntegrationTest, VersionManager, and VersionManagerJUnitTest
* Add geode-old-versions to integrationTests
* Print JAVA_HOME directory tree if assertion about java binary fails
+import static java.util.Arrays.asList;
+import static java.util.stream.Collectors.toList;
+import java.util.ArrayList;
-import java.util.stream.Collectors;
+  private static final Predicate<File> IS_SERVER_DIRECTORY = directory -> stream(directory.list())
+      .anyMatch(filename -> filename.endsWith("server.pid"));
+  private static final Predicate<File> IS_LOCATOR_DIRECTORY = directory -> stream(directory.list())
+      .anyMatch(filename -> filename.endsWith("locator.pid"));
+
-  public List<File> getServerDirs() {
-    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
-
-    Predicate<File> isServerDir = directory -> stream(directory.list())
-        .anyMatch(filename -> filename.endsWith("server.pid"));
-
-    return stream(potentialMemberDirectories)
-        .filter(isServerDir)
-        .collect(Collectors.toList());
-  }
-
-  public List<File> getLocatorDirs() {
-    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
-
-    Predicate<File> isLocatorDir = directory -> stream(directory.list())
-        .anyMatch(filename -> filename.endsWith("locator.pid"));
-
-    return stream(potentialMemberDirectories)
-        .filter(isLocatorDir)
-        .collect(Collectors.toList());
-  }
-
-  public void printLogFiles() {
-    System.out.println(
-        "Printing contents of all log files found in " + workingDir.getAbsolutePath());
-    List<File> logFiles = findLogFiles();
-
-    for (File logFile : logFiles) {
-      System.out.println("Contents of " + logFile.getAbsolutePath());
-      try (BufferedReader br = new BufferedReader(new InputStreamReader(
-          new FileInputStream(logFile), Charset.defaultCharset()))) {
-        String line;
-        while ((line = br.readLine()) != null) {
-          System.out.println(line);
-        }
-      } catch (IOException e) {
-        System.out.println("Unable to print log due to: " + getStackTrace(e));
-      }
-    }
-  }
-
-  private List<File> findLogFiles() {
-    List<File> servers = getServerDirs();
-    List<File> locators = getLocatorDirs();
-
-    return concat(servers.stream(), locators.stream())
-        .flatMap(this::findLogFiles)
-        .collect(Collectors.toList());
-  }
-
-  private Stream<File> findLogFiles(File memberDir) {
-    return stream(memberDir.listFiles())
-        .filter(File::isFile)
-        .filter(file -> file.getName().toLowerCase().endsWith(".log"));
-  }
-
-  private String quoteArgument(String argument) {
+  private void printLogFiles() {
+    System.out.println(
+        "Printing contents of all log files found in " + workingDir.getAbsolutePath());
+    List<File> logFiles = findLogFiles();
+
+    for (File logFile : logFiles) {
+      System.out.println("Contents of " + logFile.getAbsolutePath());
+      try (BufferedReader br = new BufferedReader(new InputStreamReader(
+          new FileInputStream(logFile), Charset.defaultCharset()))) {
+        String line;
+        while ((line = br.readLine()) != null) {
+          System.out.println(line);
+        }
+      } catch (IOException e) {
+        System.out.println("Unable to print log due to: " + getStackTrace(e));
+      }
+    }
+  }
+
+  private List<File> getServerDirs() {
+    return findPotentialMemberDirectories()
+        .stream()
+        .filter(IS_SERVER_DIRECTORY)
+        .collect(toList());
+  }
+
+  private List<File> getLocatorDirs() {
+    return findPotentialMemberDirectories()
+        .stream()
+        .filter(IS_LOCATOR_DIRECTORY)
+        .collect(toList());
+  }
+
+  private List<File> findPotentialMemberDirectories() {
+    File[] directories = workingDir.listFiles(File::isDirectory);
+
+    assertThat(directories)
+        .as("List of directories under " + workingDir.getAbsolutePath())
+        .isNotNull();
+
+    List<File> potentialMemberDirectories = new ArrayList<>(asList(directories));
+    potentialMemberDirectories.add(workingDir);
+
+    return potentialMemberDirectories;
+  }
+
+  private List<File> findLogFiles() {
+    List<File> servers = getServerDirs();
+    List<File> locators = getLocatorDirs();
+
+    return concat(servers.stream(), locators.stream())
+        .flatMap(GfshExecution::findLogFiles)
+        .collect(toList());
+  }
+
+  private static Stream<File> findLogFiles(File memberDir) {
+    return stream(memberDir.listFiles())
+        .filter(File::isFile)
+        .filter(file -> file.getName().toLowerCase().endsWith(".log"));
+  }
+
+  private static String quoteArgument(String argument) {
-
-
