GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-      GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-      if (cache != null && !cache.isClosed()) { // will be null if not initialized
+      InternalCache cache = GemFireCacheImpl.getInstance();
+      // will be null if not initialized
+      if (cache != null && !cache.isClosed()) {
-      } catch (CancelException e) {
+      } catch (CancelException ignore) {
-  private void operateOnCache(GemFireCacheImpl cache) {
+  private void operateOnCache(InternalCache cache) {
-    for (DistributedRegion r : this.getDistributedRegions(cache)) {
+    for (DistributedRegion r : getDistributedRegions(cache)) {
-  public void operateOnLocalCache(GemFireCacheImpl cache) {
+  public void operateOnLocalCache(InternalCache cache) {
-      for (LocalRegion r : this.getAllRegions(cache)) {
+      for (LocalRegion r : getAllRegions(cache)) {
-      for (PartitionedRegion r : this.getPartitionedRegions(cache)) {
+      for (PartitionedRegion r : getPartitionedRegions(cache)) {
-  private Set<LocalRegion> getAllRegions(GemFireCacheImpl gfc) {
-    return gfc.getAllRegions();
+  private Set<LocalRegion> getAllRegions(InternalCache internalCache) {
+    return internalCache.getAllRegions();
-  private Set<DistributedRegion> getDistributedRegions(GemFireCacheImpl gfc) {
-    Set<DistributedRegion> result = new HashSet();
-    for (LocalRegion r : gfc.getAllRegions()) {
+  private Set<DistributedRegion> getDistributedRegions(InternalCache internalCache) {
+    Set<DistributedRegion> result = new HashSet<>();
+    for (LocalRegion r : internalCache.getAllRegions()) {
-  private Set<PartitionedRegion> getPartitionedRegions(GemFireCacheImpl gfc) {
-    Set<PartitionedRegion> result = new HashSet(gfc.getPartitionedRegions());
-    return result;
+  private Set<PartitionedRegion> getPartitionedRegions(InternalCache internalCache) {
+    return (Set<PartitionedRegion>) new HashSet(internalCache.getPartitionedRegions());
+  @Override
