GEODE-6945:geode-managment should create its own set of configurationâ€¦ (#3923)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

* remove regionName in Index configuration object, use regionPath to infer it.
* support listing indexes for all regions

-import java.util.ArrayList;
-import java.util.Objects;
-import java.util.stream.Collectors;
+import org.apache.geode.management.configuration.Index;
-  @ApiOperation(value = "list indexes")
+  @ApiOperation(value = "list region indexes")
-  public ClusterManagementListResult<RegionConfig.Index, RuntimeInfo> listIndex(
+  public ClusterManagementListResult<Index, RuntimeInfo> listIndex(
-      @RequestParam(required = false) String id) {
+      @RequestParam(required = false, name = "id") String indexName) {
-    ClusterManagementListResult<RegionConfig, RuntimeRegionInfo> result0 = getRegion(regionName);
-    RegionConfig regionConfig = result0.getResult().get(0).getConfig();
-
-    // only send the index information back
-    List<RegionConfig.Index> indexList = regionConfig.getIndexes().stream().map(e -> {
-      if (StringUtils.isNotBlank(id) && !e.getId().equals(id)) {
-        return null;
-      }
-      e.setRegionName(regionName);
-      return e;
-    }).filter(Objects::nonNull).collect(Collectors.toList());
-
-    List<ConfigurationResult<RegionConfig.Index, RuntimeInfo>> responses = new ArrayList<>();
-    for (RegionConfig.Index index : indexList) {
-      responses.add(new ConfigurationResult<>(index));
+    Index filter = new Index();
+    filter.setRegionPath(regionName);
+    if (StringUtils.isNotBlank(indexName)) {
+      filter.setName(indexName);
+    return clusterManagementService.list(filter);
+  }
-    ClusterManagementListResult<RegionConfig.Index, RuntimeInfo> result =
-        new ClusterManagementListResult<>();
-    result.setResult(responses);
-    return result;
+  @ApiOperation(value = "list indexes")
+  @RequestMapping(method = RequestMethod.GET, value = "/indexes")
+  @ResponseBody
+  @PreAuthorize("@securityService.authorize('CLUSTER', 'READ', 'QUERY')")
+  public ClusterManagementListResult<Index, RuntimeInfo> listAllIndex(
+      @RequestParam(required = false, name = "id") String indexName) {
+    Index filter = new Index();
+    if (StringUtils.isNotBlank(indexName)) {
+      filter.setName(indexName);
+    }
+    return clusterManagementService.list(filter);
-  public ClusterManagementListResult<RegionConfig.Index, RuntimeInfo> getIndex(
+  public ClusterManagementListResult<Index, RuntimeInfo> getIndex(
-    ClusterManagementListResult<RegionConfig.Index, RuntimeInfo> result = listIndex(regionName, id);
-    List<ConfigurationResult<RegionConfig.Index, RuntimeInfo>> indexList = result.getResult();
+    ClusterManagementListResult<Index, RuntimeInfo> result = listIndex(regionName, id);
+    List<ConfigurationResult<Index, RuntimeInfo>> indexList = result.getResult();
