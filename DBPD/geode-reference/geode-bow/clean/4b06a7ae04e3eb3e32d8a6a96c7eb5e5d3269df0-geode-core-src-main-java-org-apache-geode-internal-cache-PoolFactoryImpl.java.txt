Revert "GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)" (#4761)

This reverts commit 0af626462642c6352840cd6e81a5265c74045c7f.
That commit seems to have caused a severe performance drop in several
Benchmark tests:

org.apache.geode.benchmark.tests.PartitionedGetBenchmark
              average ops/second  Baseline:    981794.46  Test:     41239.82  Difference:  -95.8%
org.apache.geode.benchmark.tests.ReplicatedGetBenchmark
              average ops/second  Baseline:    972769.18  Test:     41299.96  Difference:  -95.8%
org.apache.geode.benchmark.tests.PartitionedNonIndexedQueryBenchmark
              average ops/second  Baseline:        90.05  Test:        70.52  Difference:  -21.7%
-import java.io.Externalizable;
-import java.io.ObjectInput;
-import java.io.ObjectOutput;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Collections;
-import java.util.stream.Collectors;
+import org.apache.geode.DataSerializable;
-import org.apache.geode.distributed.internal.tcpserver.HostAndPort;
+import org.apache.geode.distributed.internal.tcpserver.LocatorAddress;
-  private final List<HostAndPort> locatorAddresses = new ArrayList<>();
+  private final List<LocatorAddress> locatorAddresses = new ArrayList<>();
+  private InetSocketAddress getInetSocketAddress(String host, int port) {
+    if (port == 0) {
+      throw new IllegalArgumentException("port must be greater than 0 but was " + port);
+      // the rest of the port validation is done by InetSocketAddress
+    }
+    InetSocketAddress sockAddr;
+    try {
+      InetAddress hostAddr = InetAddress.getByName(host);
+      sockAddr = new InetSocketAddress(hostAddr, port);
+    } catch (UnknownHostException ignore) {
+      // IllegalArgumentException ex = new IllegalArgumentException("Unknown host " + host);
+      // ex.initCause(cause);
+      // throw ex;
+      // Fix for #45348
+      logger.warn(
+          "Hostname is unknown: {}. Creating pool with unknown host in case the host becomes known later.",
+          host);
+      sockAddr = new InetSocketAddress(host, port);
+    }
+    return sockAddr;
+  }
+
-    validatePort(port);
-    HostAndPort address = new HostAndPort(host, port);
-    attributes.locators.add(address);
-    locatorAddresses.add(address);
+    InetSocketAddress isa = getInetSocketAddress(host, port);
+    attributes.locators.add(isa);
+    locatorAddresses.add(new LocatorAddress(isa, host));
-    validatePort(port);
-    attributes.servers.add(new HostAndPort(host, port));
+    attributes.servers.add(getInetSocketAddress(host, port));
-  private void validatePort(int port) {
-    if (port <= 0) {
-      throw new IllegalArgumentException("port must be greater than 0 but was " + port);
-    }
-  }
-
-    for (InetSocketAddress address : cp.getLocators()) {
-      addLocator(address.getHostName(), address.getPort());
+    for (InetSocketAddress inetSocketAddress : cp.getLocators()) {
+      addLocator(inetSocketAddress.getHostName(), inetSocketAddress.getPort());
-    attributes.servers.addAll(cp.getServers().stream()
-        .map(x -> new HostAndPort(x.getHostName(), x.getPort())).collect(Collectors.toList()));
+    attributes.servers.addAll(cp.getServers());
-  public static class PoolAttributes implements Pool, Externalizable {
+  public static class PoolAttributes implements Pool, DataSerializable {
-    public ArrayList<HostAndPort> locators = new ArrayList<>();
-    public ArrayList<HostAndPort> servers = new ArrayList<>();
+    public ArrayList<InetSocketAddress> locators = new ArrayList<>();
+    public ArrayList<InetSocketAddress> servers = new ArrayList<>();
-      return locators.stream().map(x -> x.getSocketInetAddress()).collect(Collectors.toList());
+      return Collections.unmodifiableList(new ArrayList<>(locators));
-      return servers.stream().map(x -> x.getSocketInetAddress()).collect(Collectors.toList());
+      return Collections.unmodifiableList(new ArrayList<>(servers));
+    @Override
+    @Override
-
-    @Override
-    public void writeExternal(ObjectOutput out) throws IOException {
-      toData(out);
-    }
-
-    @Override
-    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
-      fromData(in);
-    }
