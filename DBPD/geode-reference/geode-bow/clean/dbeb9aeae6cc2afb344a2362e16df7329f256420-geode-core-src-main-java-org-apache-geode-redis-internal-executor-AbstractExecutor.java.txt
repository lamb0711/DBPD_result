Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The AbstractExecutor is the base of all {@link Executor} types for the 
- * {@link GeodeRedisServer}.
+ * The AbstractExecutor is the base of all {@link Executor} types for the {@link GeodeRedisServer}.
-   * Getter method for a {@link Region} in the case that a Region should be
-   * created if one with the given name does not exist. Before getting or creating
-   * a Region, a check is first done to make sure the desired key doesn't already
-   * exist with a different {@link RedisDataType}. If there is a data type mismatch
-   * this method will throw a {@link RuntimeException}.
+   * Getter method for a {@link Region} in the case that a Region should be created if one with the
+   * given name does not exist. Before getting or creating a Region, a check is first done to make
+   * sure the desired key doesn't already exist with a different {@link RedisDataType}. If there is
+   * a data type mismatch this method will throw a {@link RuntimeException}.
-   * ********************** IMPORTANT NOTE **********************************************
-   * This method will not fail in returning a Region unless an internal error occurs, so
-   * if a Region is destroyed right after it is created, it will attempt to retry until a 
-   * reference to that Region is obtained
+   * ********************** IMPORTANT NOTE ********************************************** This
+   * method will not fail in returning a Region unless an internal error occurs, so if a Region is
+   * destroyed right after it is created, it will attempt to retry until a reference to that Region
+   * is obtained
-  protected Region<?, ?> getOrCreateRegion(ExecutionHandlerContext context, ByteArrayWrapper key, RedisDataType type) {
+  protected Region<?, ?> getOrCreateRegion(ExecutionHandlerContext context, ByteArrayWrapper key,
+      RedisDataType type) {
-   * Checks if the given key is associated with the passed data type.
-   * If there is a mismatch, a {@link RuntimeException} is thrown
+   * Checks if the given key is associated with the passed data type. If there is a mismatch, a
+   * {@link RuntimeException} is thrown
-  protected void checkDataType(ByteArrayWrapper key, RedisDataType type, ExecutionHandlerContext context) {
+  protected void checkDataType(ByteArrayWrapper key, RedisDataType type,
+      ExecutionHandlerContext context) {
-      throw new RedisDataTypeMismatchException("The key name \"" + key + "\" is already used by a " + currentType.toString());
+      throw new RedisDataTypeMismatchException(
+          "The key name \"" + key + "\" is already used by a " + currentType.toString());
-  protected boolean removeEntry(ByteArrayWrapper key, RedisDataType type, ExecutionHandlerContext context) {
+  protected boolean removeEntry(ByteArrayWrapper key, RedisDataType type,
+      ExecutionHandlerContext context) {
-    if (size <  0)
+    if (size < 0)
-    if (size <  0)
+    if (size < 0)
-    if (size <  0L)
+    if (size < 0L)
-    if (size <  0L)
+    if (size < 0L)
