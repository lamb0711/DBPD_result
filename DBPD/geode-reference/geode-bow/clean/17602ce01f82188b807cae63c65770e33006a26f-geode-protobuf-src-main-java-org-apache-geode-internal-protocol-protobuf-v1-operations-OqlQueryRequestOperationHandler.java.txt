GEODE-4750: Allow region level authorization for OQL queries (#1570)


+import java.util.Set;
+import org.apache.shiro.util.ThreadState;
+import org.apache.geode.cache.query.internal.DefaultQuery;
+import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionAuthorizingStateProcessor;
+import org.apache.geode.internal.protocol.protobuf.v1.state.exception.OperationNotAuthorizedException;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.security.NotAuthorizedException;
+import org.apache.geode.security.ResourcePermission;
-
+
+    if (messageExecutionContext
+        .getConnectionStateProcessor() instanceof ProtobufConnectionAuthorizingStateProcessor) {
+      final SecurityService securityService =
+          messageExecutionContext.getCache().getSecurityService();
+      ThreadState threadState =
+          ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
+              .getConnectionStateProcessor()).prepareThreadForAuthorization();
+      try {
+        for (String regionName : ((DefaultQuery) query).getRegionsInQuery(bindParameters)) {
+          securityService.authorize(ResourcePermission.Resource.DATA,
+              ResourcePermission.Operation.READ, regionName);
+        }
+      } catch (NotAuthorizedException ex) {
+        messageExecutionContext.getStatistics().incAuthorizationViolations();
+        throw new OperationNotAuthorizedException(
+            "The user is not authorized to complete this operation");
+      } finally {
+        ((ProtobufConnectionAuthorizingStateProcessor) messageExecutionContext
+            .getConnectionStateProcessor()).restoreThreadState(threadState);
+      }
+    }
+
