GEODE-4991: do no use hard coded quotes (#1728)

java.sql.DatabaseMetaData.getIdentifierQuoteString is now used when quoting identifiers.
If this method returns null, an empty string, or a string with all spaces then no quoting will be done.

-import java.util.List;
-
+  private final String quote;
-  String createSelectQueryString(String tableName, List<ColumnValue> columnList) {
-    assert columnList.size() == 1;
-    ColumnValue keyCV = columnList.get(0);
-    assert keyCV.isKey();
-    return "SELECT * FROM " + tableName + " WHERE " + keyCV.getColumnName() + " = ?";
+  public SqlStatementFactory(String identifierQuoteString) {
+    this.quote = identifierQuoteString;
-  String createDestroySqlString(String tableName, List<ColumnValue> columnList) {
-    assert columnList.size() == 1;
-    ColumnValue keyCV = columnList.get(0);
-    assert keyCV.isKey();
-    return "DELETE FROM " + tableName + " WHERE " + keyCV.getColumnName() + " = ?";
+  String createSelectQueryString(String tableName, EntryColumnData entryColumnData) {
+    ColumnData keyCV = entryColumnData.getEntryKeyColumnData();
+    return "SELECT * FROM " + quoteIdentifier(tableName) + " WHERE "
+        + quoteIdentifier(keyCV.getColumnName()) + " = ?";
-  String createUpdateSqlString(String tableName, List<ColumnValue> columnList) {
-    StringBuilder query = new StringBuilder("UPDATE " + tableName + " SET ");
+  String createDestroySqlString(String tableName, EntryColumnData entryColumnData) {
+    ColumnData keyCV = entryColumnData.getEntryKeyColumnData();
+    return "DELETE FROM " + quoteIdentifier(tableName) + " WHERE "
+        + quoteIdentifier(keyCV.getColumnName()) + " = ?";
+  }
+
+  String createUpdateSqlString(String tableName, EntryColumnData entryColumnData) {
+    StringBuilder query = new StringBuilder("UPDATE " + quoteIdentifier(tableName) + " SET ");
-    for (ColumnValue column : columnList) {
-      if (!column.isKey()) {
-        idx++;
-        if (idx > 1) {
-          query.append(", ");
-        }
-        query.append(column.getColumnName());
-        query.append(" = ?");
+    for (ColumnData column : entryColumnData.getEntryValueColumnData()) {
+      idx++;
+      if (idx > 1) {
+        query.append(", ");
+      query.append(quoteIdentifier(column.getColumnName()));
+      query.append(" = ?");
-    for (ColumnValue column : columnList) {
-      if (column.isKey()) {
-        query.append(" WHERE ");
-        query.append(column.getColumnName());
-        query.append(" = ?");
-        // currently only support simple primary key with one column
-        break;
-      }
-    }
+
+    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
+    query.append(" WHERE ");
+    query.append(quoteIdentifier(keyColumnData.getColumnName()));
+    query.append(" = ?");
+
-  String createInsertSqlString(String tableName, List<ColumnValue> columnList) {
-    StringBuilder columnNames = new StringBuilder("INSERT INTO " + tableName + " (");
+  String createInsertSqlString(String tableName, EntryColumnData entryColumnData) {
+    StringBuilder columnNames =
+        new StringBuilder("INSERT INTO " + quoteIdentifier(tableName) + " (");
-    int columnCount = columnList.size();
-    int idx = 0;
-    for (ColumnValue column : columnList) {
-      idx++;
-      columnNames.append(column.getColumnName());
-      columnValues.append('?');
-      if (idx != columnCount) {
-        columnNames.append(", ");
-        columnValues.append(",");
-      }
+
+    for (ColumnData column : entryColumnData.getEntryValueColumnData()) {
+      columnNames.append(quoteIdentifier(column.getColumnName())).append(", ");
+      columnValues.append("?,");
-    columnNames.append(")");
-    columnValues.append(")");
+
+    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
+    columnNames.append(quoteIdentifier(keyColumnData.getColumnName())).append(")");
+    columnValues.append("?)");
+
+  private String quoteIdentifier(String identifier) {
+    return quote + identifier + quote;
+  }
