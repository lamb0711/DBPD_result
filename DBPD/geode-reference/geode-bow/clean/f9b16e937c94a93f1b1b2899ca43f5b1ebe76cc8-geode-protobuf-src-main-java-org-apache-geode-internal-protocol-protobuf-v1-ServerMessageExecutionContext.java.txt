GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

-import org.apache.geode.distributed.Locator;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.Authorizer;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingCache;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingCacheImpl;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingLocator;
+  private AuthorizingCache authorizingCache;
-      ProtobufConnectionStateProcessor initialConnectionStateProcessor) {
+      ProtobufConnectionStateProcessor initialConnectionStateProcessor, Authorizer authorizer) {
+    this.authorizingCache = new AuthorizingCacheImpl(cache, authorizer);
-  /**
-   * Returns the cache associated with this execution
-   * <p>
-   *
-   * @throws InvalidExecutionContextException if there is no cache available
-   */
-  public InternalCache getCache() throws InvalidExecutionContextException {
-    return cache;
+  public AuthorizingCache getAuthorizingCache() {
+    return this.authorizingCache;
-  /**
-   * Returns the locator associated with this execution
-   * <p>
-   *
-   * @throws InvalidExecutionContextException if there is no locator available
-   */
-  public Locator getLocator() throws InvalidExecutionContextException {
+  public AuthorizingLocator getAuthorizingLocator() throws InvalidExecutionContextException {
+
+  @Override
+  public void setAuthorizer(Authorizer authorizer) {
+    this.authorizingCache = new AuthorizingCacheImpl(cache, authorizer);
+  }
