GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

+import java.util.Properties;
+import java.util.concurrent.Callable;
+
+import org.apache.shiro.subject.Subject;
+import org.apache.shiro.util.ThreadState;
+
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.ResourcePermission;
+import org.apache.geode.security.SecurityManager;
+  @Override
+  public ThreadState bindSubject(Subject subject) {
+    return null;
+  }
+
+  @Override
+  public Subject getSubject() {
+    return null;
+  }
+
+  @Override
+  public Subject login(Properties credentials) {
+    return null;
+  }
+
+  @Override
+  public void logout() {}
+
+  @Override
+  public Callable associateWith(Callable callable) {
+    return callable;
+  }
+
+  @Override
+  public void authorize(ResourcePermission.Resource resource,
+      ResourcePermission.Operation operation) {}
+
+  @Override
+  public void authorize(ResourcePermission.Resource resource,
+      ResourcePermission.Operation operation, ResourcePermission.Target target) {}
+
+  @Override
+  public void authorize(ResourcePermission.Resource resource,
+      ResourcePermission.Operation operation, String target) {}
+
+  @Override
+  public void authorize(ResourcePermission.Resource resource,
+      ResourcePermission.Operation operation, String target, String key) {}
+
+  @Override
+  public void authorize(ResourcePermission.Resource resource,
+      ResourcePermission.Operation operation, ResourcePermission.Target target, String key) {}
+
+  @Override
+  public void authorize(ResourcePermission context) {}
+
+  @Override
+  public void authorize(ResourcePermission context, Subject currentUser) {}
+
+  @Override
+  public void close() {}
+
+  @Override
+  public boolean needPostProcess() {
+    return false;
+  }
+
+  @Override
+  public Object postProcess(String regionPath, Object key, Object value,
+      boolean valueIsSerialized) {
+    return value;
+  }
+
+  @Override
+  public Object postProcess(Object principal, String regionPath, Object key, Object value,
+      boolean valueIsSerialized) {
+    return value;
+  }
+
+  @Override
+  public SecurityManager getSecurityManager() {
+    return null;
+  }
+
+  @Override
+  public PostProcessor getPostProcessor() {
+    return null;
+  }
