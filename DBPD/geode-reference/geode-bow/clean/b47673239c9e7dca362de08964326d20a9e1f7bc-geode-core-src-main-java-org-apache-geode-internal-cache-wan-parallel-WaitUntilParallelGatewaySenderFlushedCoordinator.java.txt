GEODE-2852: Enforce lucene waitUntilFlushed timeout for all buckets

* Since we are now batching waitUntilFlushed threads, do not submit more WaitUntilFlushed Callables if timeout exceeded
* create the WaitUntilFlushed Callables just prior to submitting for execution so the remaining nanoSeconds can be passed in and applied for each bucket.
* updated tests to accommodate changes

+import java.util.HashSet;
+import java.util.Set;
-    // Create callables for local buckets
-    List<WaitUntilBucketRegionQueueFlushedCallable> callables =
-        buildWaitUntilBucketRegionQueueFlushedCallables(pr);
-
-    // Submit local callables for execution
-    if (logger.isDebugEnabled()) {
-      logger.debug("WaitUntilParallelGatewaySenderFlushedCoordinator: Created and being submitted "
-          + callables.size() + " callables=" + callables);
-    }
-    for (Callable<Boolean> callable : callables) {
+    long nanosRemaining = unit.toNanos(timeout);
+    long endTime = System.nanoTime() + nanosRemaining;
+    Set<BucketRegion> localBucketRegions = getLocalBucketRegions(pr);
+    for (BucketRegion br : localBucketRegions) {
+      // timeout exceeded, do not submit more callables, return localResult false
+      if (System.nanoTime() >= endTime) {
+        localResult = false;
+        break;
+      }
+      // create and submit callable with updated timeout
+      Callable<Boolean> callable = createWaitUntilBucketRegionQueueFlushedCallable(
+          (BucketRegionQueue) br, nanosRemaining, TimeUnit.NANOSECONDS);
+      if (logger.isDebugEnabled()) {
+        logger.debug(
+            "WaitUntilParallelGatewaySenderFlushedCoordinator: Submitting callable for bucket "
+                + br.getId() + " callable=" + callable + " nanosRemaining=" + nanosRemaining);
+      }
-      if ((callableCount % CALLABLES_CHUNK_SIZE) == 0 || callableCount == callables.size()) {
+      if ((callableCount % CALLABLES_CHUNK_SIZE) == 0
+          || callableCount == localBucketRegions.size()) {
+      nanosRemaining = endTime - System.nanoTime();
-  protected List<WaitUntilBucketRegionQueueFlushedCallable> buildWaitUntilBucketRegionQueueFlushedCallables(
-      PartitionedRegion pr) {
-    List<WaitUntilBucketRegionQueueFlushedCallable> callables = new ArrayList<>();
+  protected Set<BucketRegion> getLocalBucketRegions(PartitionedRegion pr) {
+    Set<BucketRegion> localBucketRegions = new HashSet<BucketRegion>();
-      for (BucketRegion br : pr.getDataStore().getAllLocalBucketRegions()) {
-        callables.add(new WaitUntilBucketRegionQueueFlushedCallable((BucketRegionQueue) br,
-            this.timeout, this.unit));
-      }
+      localBucketRegions = pr.getDataStore().getAllLocalBucketRegions();
-    return callables;
+    return localBucketRegions;
+  }
+
+  protected WaitUntilBucketRegionQueueFlushedCallable createWaitUntilBucketRegionQueueFlushedCallable(
+      BucketRegionQueue br, long timeout, TimeUnit unit) {
+    return new WaitUntilBucketRegionQueueFlushedCallable(br, timeout, unit);
