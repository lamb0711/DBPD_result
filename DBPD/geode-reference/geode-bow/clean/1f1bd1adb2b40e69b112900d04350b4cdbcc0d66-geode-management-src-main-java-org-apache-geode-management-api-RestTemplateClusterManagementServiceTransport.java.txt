GEODE-8372: Configure CMS to send UTF-8 regardless of JVM default (#5411)


+import java.nio.charset.StandardCharsets;
+import org.springframework.http.converter.HttpMessageConverter;
+
+    // configur the rest template to use a speciic jackson converter
+    List<HttpMessageConverter<?>> messageConverters = restTemplate.getMessageConverters();
+    MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = messageConverters.stream()
+        .filter(MappingJackson2HttpMessageConverter.class::isInstance)
+        .map(MappingJackson2HttpMessageConverter.class::cast)
+        .findFirst().orElse(null);
+
+    if (jackson2HttpMessageConverter == null) {
+      jackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter();
+      messageConverters.add(jackson2HttpMessageConverter);
+    }
+
+    jackson2HttpMessageConverter.setPrettyPrint(false);
+    // the client should use a mapper that would ignore unknown properties in case the server
+    // is a newer version than the client
+    jackson2HttpMessageConverter
+        .setObjectMapper(GeodeJsonMapper.getMapperIgnoringUnknownProperties());
+    // if we don't set the default charset here, the request will use ServletRequest's default
+    // charset which may not be UTF-8
+    jackson2HttpMessageConverter.setDefaultCharset(StandardCharsets.UTF_8);
-
-    // configure our own ObjectMapper
-    MappingJackson2HttpMessageConverter messageConverter =
-        new MappingJackson2HttpMessageConverter();
-    messageConverter.setPrettyPrint(false);
-    // the client should use a mapper that would ignore unknown properties in case the server
-    // is a newer version than the client
-    messageConverter.setObjectMapper(GeodeJsonMapper.getMapperIgnoringUnknownProperties());
-    restTemplate.getMessageConverters().removeIf(
-        m -> m.getClass().getName().equals(MappingJackson2HttpMessageConverter.class.getName()));
-    restTemplate.getMessageConverters().add(messageConverter);
