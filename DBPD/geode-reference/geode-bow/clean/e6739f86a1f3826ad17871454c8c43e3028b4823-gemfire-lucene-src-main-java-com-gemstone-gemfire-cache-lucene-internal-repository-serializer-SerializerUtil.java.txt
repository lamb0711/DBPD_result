Making binary keys work properly with the lucene index

The earlier attempt was not storing the binary data in the index. With
Lucene 5.3, we can add StringFields with binary data, so that's what
this code is now doing.

Enabling the unit tests for update and delete with both binary and
string keys.

+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
-import org.apache.lucene.document.BinaryDocValuesField;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StoredField;
+import org.apache.lucene.document.StringField;
+import org.apache.lucene.index.IndexableField;
-import com.gemstone.gemfire.internal.HeapDataOutputStream;
-import com.gemstone.gemfire.internal.Version;
-  private static final String KEY_FIELD = "_STORED_KEY";
-  private static final String KEY_SEARCH_FIELD = "_SEARCH_KEY";
+  private static final String KEY_FIELD = "_KEY";
-  private static ThreadLocal<HeapDataOutputStream> buffer = new ThreadLocal<HeapDataOutputStream>() {
+  private static ThreadLocal<ByteArrayOutputStream> LOCAL_BUFFER = new ThreadLocal<ByteArrayOutputStream>() {
-    protected HeapDataOutputStream initialValue() {
-      return new HeapDataOutputStream(Version.CURRENT);
+    protected ByteArrayOutputStream initialValue() {
+      return new ByteArrayOutputStream();
-    BytesRef keyBytes = keyToBytes(key);
-    doc.add(new BinaryDocValuesField(KEY_SEARCH_FIELD, keyBytes));
-    doc.add(new StoredField(KEY_FIELD, keyBytes));
+    if(key instanceof String) {
+      doc.add(new StringField(KEY_FIELD, (String) key, Store.YES));
+    } else {
+      doc.add(new StringField(KEY_FIELD, keyToBytes(key), Store.YES));
+    }
-    try {
-      return BlobHelper.deserializeBlob(doc.getField(KEY_FIELD).binaryValue().bytes);
-    } catch (ClassNotFoundException | IOException e) {
-      throw new InternalGemFireError("Unable to deserialize key", e);
+    IndexableField field = doc.getField(KEY_FIELD);
+    if(field.stringValue() != null) {
+      return field.stringValue();
+    } else {
+      return  keyFromBytes(field.binaryValue());
-    return new Term(KEY_SEARCH_FIELD, doc.getField(KEY_FIELD).binaryValue());
+    IndexableField field = doc.getField(KEY_FIELD);
+    if(field.stringValue() != null) {
+      return new Term(KEY_FIELD, field.stringValue());
+    } else {
+      return new Term(KEY_FIELD, field.binaryValue());
+    }
-    return new Term(KEY_SEARCH_FIELD, keyToBytes(key));
+    if(key instanceof String) {
+      return new Term(KEY_FIELD, (String) key);
+    } else {
+      return new Term(KEY_FIELD, keyToBytes(key));
+    }
+  }
+  
+  private static Object keyFromBytes(BytesRef bytes) {
+    try {
+      return BlobHelper.deserializeBlob(bytes.bytes);
+    } catch (ClassNotFoundException | IOException e) {
+      throw new InternalGemFireError(e);
+    }
-    buffer.get().reset();
+    ByteArrayOutputStream buffer = LOCAL_BUFFER.get();
+    
-      DataSerializer.writeObject(key, buffer.get());
+      DataOutputStream out = new DataOutputStream(buffer);
+      DataSerializer.writeObject(key, out);
+      out.flush();
+      BytesRef result = new BytesRef(buffer.toByteArray());
+      buffer.reset();
+      return result;
-    return new BytesRef(buffer.get().toByteArray());
