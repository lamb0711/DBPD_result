GEODE-7579: introduce RegionAware (#4546)

* GEODE-7579: Make Index configuration RegionAware

* Index configuration is ReqionAware, but not groupable
* index's group depends on what region it's defined with
* display member status in the exception
+import java.util.Collections;
+import org.apache.geode.management.configuration.GroupableConfiguration;
+import org.apache.geode.management.configuration.RegionScoped;
+
+    // if the configuration is not groupable and already exists, throw exception
+    if (!(config instanceof GroupableConfiguration)) {
+      throw new EntityExistsException(
+          config.getClass().getSimpleName() + " '" + config.getId()
+              + "' already exists");
+    }
+
+    // if configuration is groupable, then check if it's already in the group
-    Set<DistributedMember> membersOfExistingGroups =
-        findServers(existingElementsAndTheirGroups.keySet().toArray(new String[0]));
+    // if other group and this new group has common members, then throw exception
+    String[] groups = existingElementsAndTheirGroups.keySet().toArray(new String[0]);
+    Set<DistributedMember> membersOfExistingGroups = findServers(groups);
+  public Set<String> findGroups(String regionName) {
+    Set<String> results = new HashSet<>();
+    Set<String> groups = persistenceService.getGroups();
+    for (String group : groups) {
+      CacheConfig existing = persistenceService.getCacheConfig(group, false);
+      if (existing != null && existing.findRegionConfiguration(regionName) != null) {
+        results.add(group);
+      }
+    }
+    return results;
+  }
+
+
+  public Set<DistributedMember> findServers(AbstractConfiguration configuration) {
+    if (configuration instanceof RegionScoped) {
+      Set<String> groups = findGroups(((RegionScoped) configuration).getRegionName());
+      if (groups.size() == 0) {
+        return Collections.emptySet();
+      }
+      return findServers(groups.toArray(new String[0]));
+    }
+
+    return findServers(configuration.getGroup());
+  }
+
+  /**
+   * if id is specified, find the member with that id, otherwise find members in the groups
+   */
+  /**
+   * find members within these groups
+   *
+   * @param includeLocators whether to include locators in this search or not
+   */
