GEODE-6661: Fixed use of Direct and Non-Direct buffers (#4267)

- Fixed use of Direct and Non-Direct buffers
-  public ByteBuffer acquireSenderBuffer(int size) {
-    return acquireBuffer(size, true);
+  public ByteBuffer acquireDirectSenderBuffer(int size) {
+    return acquireDirectBuffer(size, true);
-  public ByteBuffer acquireReceiveBuffer(int size) {
-    return acquireBuffer(size, false);
+  public ByteBuffer acquireDirectReceiveBuffer(int size) {
+    return acquireDirectBuffer(size, false);
-  private ByteBuffer acquireBuffer(int size, boolean send) {
+  /**
+   * try to acquire direct buffer, if enabled by configuration
+   */
+  private ByteBuffer acquireDirectBuffer(int size, boolean send) {
+  public ByteBuffer acquireNonDirectSenderBuffer(int size) {
+    ByteBuffer result = ByteBuffer.allocate(size);
+    stats.incSenderBufferSize(size, false);
+    return result;
+  }
+
+  public ByteBuffer acquireNonDirectReceiveBuffer(int size) {
+    ByteBuffer result = ByteBuffer.allocate(size);
+    stats.incReceiverBufferSize(size, false);
+    return result;
+  }
+
-    ByteBuffer newBuffer = acquireBuffer(type, desiredCapacity);
+    ByteBuffer newBuffer;
+    if (existing.isDirect()) {
+      newBuffer = acquireDirectBuffer(type, desiredCapacity);
+    } else {
+      newBuffer = acquireNonDirectBuffer(type, desiredCapacity);
+    }
-    ByteBuffer newBuffer = acquireBuffer(type, desiredCapacity);
+    ByteBuffer newBuffer;
+    if (existing.isDirect()) {
+      newBuffer = acquireDirectBuffer(type, desiredCapacity);
+    } else {
+      newBuffer = acquireNonDirectBuffer(type, desiredCapacity);
+    }
-  ByteBuffer acquireBuffer(BufferPool.BufferType type, int capacity) {
+  ByteBuffer acquireDirectBuffer(BufferPool.BufferType type, int capacity) {
-        return acquireSenderBuffer(capacity);
+        return acquireDirectSenderBuffer(capacity);
-        return acquireReceiveBuffer(capacity);
+        return acquireDirectReceiveBuffer(capacity);
+    }
+    throw new IllegalArgumentException("Unexpected buffer type " + type.toString());
+  }
+
+  ByteBuffer acquireNonDirectBuffer(BufferPool.BufferType type, int capacity) {
+    switch (type) {
+      case UNTRACKED:
+        return ByteBuffer.allocate(capacity);
+      case TRACKED_SENDER:
+        return acquireNonDirectSenderBuffer(capacity);
+      case TRACKED_RECEIVER:
+        return acquireNonDirectReceiveBuffer(capacity);
-    if (useDirectBuffers) {
+    if (bb.isDirect()) {
