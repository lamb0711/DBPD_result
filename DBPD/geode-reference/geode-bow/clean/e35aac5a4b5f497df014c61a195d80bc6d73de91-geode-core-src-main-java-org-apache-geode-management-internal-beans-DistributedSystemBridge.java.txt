Merge branch 'release/1.5.0'

-import java.io.File;
+import java.util.Properties;
-import java.util.stream.Collectors;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.backup.BackupDataStoreHelper;
-import org.apache.geode.internal.cache.backup.BackupDataStoreResult;
+import org.apache.geode.internal.cache.backup.BackupUtil;
-import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.management.BackupStatus;
-   * Member MBean for current member
-   */
-  private MemberMXBean thisMember;
-
-  /**
-  private DM dm;
+  private DistributionManager dm;
-  public DistributedSystemBridge(SystemManagementService service) {
+  public DistributedSystemBridge(SystemManagementService service, InternalCache cache) {
-    this.cache = GemFireCacheImpl.getInstance();
+    this.cache = cache;
+  public InternalCache getCache() {
+    return cache;
+  }
+
-  public DiskBackupStatus backupAllMembers(String targetDirPath, String baselineDirPath)
-      throws Exception {
-    if (BackupDataStoreHelper.obtainLock(dm)) {
-      try {
-
-        if (targetDirPath == null || targetDirPath.isEmpty()) {
-          throw new Exception(
-              ManagementStrings.TARGET_DIR_CANT_BE_NULL_OR_EMPTY.toLocalizedString());
-        }
-        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
-        File targetDir = new File(targetDirPath);
-        targetDir = new File(targetDir, format.format(new Date()));
-
-        File baselineDir = null;
-        if (baselineDirPath != null) {
-          baselineDir = new File(baselineDirPath);
-        }
-
-        DM dm = cache.getDistributionManager();
-        Set recipients = dm.getOtherDistributionManagerIds();
-
-        BackupDataStoreResult result =
-            BackupDataStoreHelper.backupAllMembers(dm, recipients, targetDir, baselineDir);
-
-
-        DiskBackupStatusImpl diskBackupStatus = new DiskBackupStatusImpl();
-        Map<DistributedMember, Set<PersistentID>> successfulMembers = result.getSuccessfulMembers();
-        diskBackupStatus.generateBackedUpDiskStores(successfulMembers);
-
-        // It's possible that when calling getMissingPersistentMembers, some
-        // members
-        // are
-        // still creating/recovering regions, and at FinishBackupRequest.send, the
-        // regions at the members are ready. Logically, since the members in
-        // successfulMembers
-        // should override the previous missingMembers
-        Set<PersistentID> successfulIds = result.getSuccessfulMembers().values().stream()
-            .flatMap(Set::stream).collect(Collectors.toSet());
-        Set<PersistentID> missingIds =
-            result.getExistingDataStores().values().stream().flatMap(Set::stream)
-                .filter((v) -> !successfulIds.contains(v)).collect(Collectors.toSet());
-
-        diskBackupStatus.generateOfflineDiskStores(missingIds);
-        return diskBackupStatus;
-      } finally {
-        BackupDataStoreHelper.releaseLock(dm);
-      }
-    } else {
-      throw new Exception(
-          LocalizedStrings.DistributedSystem_BACKUP_ALREADY_IN_PROGRESS.toLocalizedString());
+  public DiskBackupStatus backupAllMembers(String targetDirPath, String baselineDirPath) {
+    Properties properties = new Properties();
+    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
+    properties.setProperty("TIMESTAMP", format.format(new Date()));
+    properties.setProperty("TYPE", "FileSystem");
+    properties.setProperty("TARGET_DIRECTORY", targetDirPath);
+    if (baselineDirPath != null) {
+      properties.setProperty("BASELINE_DIRECTORY", baselineDirPath);
+    BackupStatus result = BackupUtil.backupAllMembers(dm, properties);
+    DiskBackupStatusImpl diskBackupStatus = new DiskBackupStatusImpl();
+    diskBackupStatus.generateBackedUpDiskStores(result.getBackedUpDiskStores());
+    diskBackupStatus.generateOfflineDiskStores(result.getOfflineDiskStores());
+    return diskBackupStatus;
-        if (DistributionManager.LOCATOR_DM_TYPE == ((InternalDistributedMember) member)
+        if (ClusterDistributionManager.LOCATOR_DM_TYPE == ((InternalDistributedMember) member)
-      DM dm = cache.getDistributionManager();
+      DistributionManager dm = cache.getDistributionManager();
