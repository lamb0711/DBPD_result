GEODE-4749: Remove method bytecodes from serializable analysis. (#1660)

- Modify the class-and-method details to elide method
  byte codes.
- Update the sanctioned data serializables to no
  longer contain the actual method bytecodes.
-import org.apache.geode.codeAnalysis.decode.CompiledClass;
- * A class used to store the names of dataserializable classes and the sizes of their
+ * A class used to store the names of data-serializable classes and the sizes of their
-
-
-  public String className;
-  public Map<String, byte[]> methodCode = new HashMap<String, byte[]>();
+  String className;
+  Map<String, Integer> methods = new HashMap<>();
-  public ClassAndMethodDetails(CompiledClass dclass) {
-    this.className = dclass.fullyQualifiedName();
+  private ClassAndMethodDetails() {
+    // Do nothing.
-  private ClassAndMethodDetails() {}
-
-        String codeString = fields[2].trim();
-        int codeStringLength = codeString.length();
-        if (codeStringLength != codeLength * 2) {
-          System.err.println("Code string has been tampered with on line " + in.getLineNumber());
+        if (fields.length != 2) {
+          System.err.println("Method detail has been tampered with on line " + in.getLineNumber());
-        byte[] code = new byte[codeLength];
-        int codeIdx = 0;
-        for (int j = 0; j < codeStringLength; j += 2) {
-          String substr = codeString.substring(j, j + 2);
-          // System.out.println("parsing " + j + ": '" + substr + "'");
-          code[codeIdx++] = (byte) (0xff & Integer.parseInt(substr, 16));
-        }
-        instance.methodCode.put(methodName, code);
+        instance.methods.put(methodName, codeLength);
-   * returns a string that can be parsed by ClassAndMethodDetails(String)
-   */
-  public String valuesAsString() {
-    StringBuilder sb = new StringBuilder(80);
-    sb.append(className).append(',').append(methodCode.size()).append("\n");
-    for (Map.Entry<String, byte[]> entry : methodCode.entrySet()) {
-      sb.append(entry.getKey()).append(',');
-      byte[] code = entry.getValue();
-      for (int i = 0; i < code.length; i++) {
-        sb.append(hexChars[(code[i] & 0xff)]);
-      }
-      sb.append("\n");
-    }
-    return sb.toString();
-  }
-
-  /**
-    return valuesAsString();
+    StringBuilder sb = new StringBuilder(80);
+    sb.append(className).append(',').append(methods.size()).append("\n");
+    for (Map.Entry<String, Integer> entry : methods.entrySet()) {
+      sb.append(entry.getKey()).append(',');
+      sb.append(entry.getValue());
+      sb.append("\n");
+    }
+    return sb.toString();
