Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A processor for helping a locator find the durable queues for a given durable client id.
- * Asks each bridge server if they have the durable id and builds a list of matching servers.
+ * A processor for helping a locator find the durable queues for a given durable client id. Asks
+ * each bridge server if they have the durable id and builds a list of matching servers.
-  
+
-                   DM dm) {
-    Set members = ((ControllerAdvisor)locator.getDistributionAdvisor()).adviseBridgeServers();
+      DM dm) {
+    Set members = ((ControllerAdvisor) locator.getDistributionAdvisor()).adviseBridgeServers();
-    FindDurableQueueProcessor processor = 
-      new FindDurableQueueProcessor(dm,members);
-      
-    FindDurableQueueMessage.send(proxyId, dm, members,processor);
+    FindDurableQueueProcessor processor = new FindDurableQueueProcessor(dm, members);
+
+    FindDurableQueueMessage.send(proxyId, dm, members, processor);
-    //This will add any local queues to the list
+    // This will add any local queues to the list
-  
-  private static void findLocalDurableQueues(ClientProxyMembershipID proxyId, ArrayList<ServerLocation> matches) {
+
+  private static void findLocalDurableQueues(ClientProxyMembershipID proxyId,
+      ArrayList<ServerLocation> matches) {
-    if(c!=null) {
+    if (c != null) {
-      if(l!=null) {
+      if (l != null) {
-        while(i.hasNext()) {
-          CacheServerImpl bs = (CacheServerImpl)i.next();
-          if(bs.getAcceptor().getCacheClientNotifier().getClientProxy(proxyId)!=null) {
-            ServerLocation loc = new ServerLocation(bs.getExternalAddress(),bs.getPort());
+        while (i.hasNext()) {
+          CacheServerImpl bs = (CacheServerImpl) i.next();
+          if (bs.getAcceptor().getCacheClientNotifier().getClientProxy(proxyId) != null) {
+            ServerLocation loc = new ServerLocation(bs.getExternalAddress(), bs.getPort());
-  
-  ////////////  Instance methods //////////////
-  
+
+  //////////// Instance methods //////////////
+
-    if(msg instanceof FindDurableQueueReply) {
-      FindDurableQueueReply reply = (FindDurableQueueReply)msg;
-        synchronized(durableLocations) {
-          //add me to the durable member set
-          durableLocations.addAll(reply.getMatches());
-        }
+    if (msg instanceof FindDurableQueueReply) {
+      FindDurableQueueReply reply = (FindDurableQueueReply) msg;
+      synchronized (durableLocations) {
+        // add me to the durable member set
+        durableLocations.addAll(reply.getMatches());
+      }
-  /** Creates a new instance of FindDurableQueueProcessor
+  /**
+   * Creates a new instance of FindDurableQueueProcessor
-  private FindDurableQueueProcessor(DM dm,Set members) {
+  private FindDurableQueueProcessor(DM dm, Set members) {
-  
-  ///////////////   Inner message classes  //////////////////
-  
-  public static class FindDurableQueueMessage
-    extends PooledDistributionMessage implements MessageWithReply
-  {
+
+  /////////////// Inner message classes //////////////////
+
+  public static class FindDurableQueueMessage extends PooledDistributionMessage
+      implements MessageWithReply {
-    
-    protected static void send(ClientProxyMembershipID proxyId,
-                             DM dm,Set members, 
-                             ReplyProcessor21 proc)
-    {
+
+    protected static void send(ClientProxyMembershipID proxyId, DM dm, Set members,
+        ReplyProcessor21 proc) {
-  
+
-    
+
-    
+
-        
-        
+
+
-        }
-        else {
+        } else {
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-    
+
-      buff.append("FindDurableQueueMessage (proxyId='")
-        .append(this.proxyId)
-        .append("' processorId=")
-        .append(this.processorId)
-        .append(")");
+      buff.append("FindDurableQueueMessage (proxyId='").append(this.proxyId)
+          .append("' processorId=").append(this.processorId).append(")");
-  
-  
+
+
-  
+
-  
+
-    
+
-    public void fromData(DataInput in)
-      throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.matches =  DataSerializer.readArrayList(in);
+      this.matches = DataSerializer.readArrayList(in);
-  
+
-  
+
-      buff.append("FindDurableQueueReply (matches='")
-        .append(this.matches)
-        .append("' processorId=")
-        .append(this.processorId)
-        .append(")");
+      buff.append("FindDurableQueueReply (matches='").append(this.matches).append("' processorId=")
+          .append(this.processorId).append(")");
