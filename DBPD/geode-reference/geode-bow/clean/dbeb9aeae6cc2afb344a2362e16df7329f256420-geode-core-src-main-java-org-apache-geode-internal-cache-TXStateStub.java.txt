Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * TXStateStub lives on the accessor node when we are remoting
- * a transaction. It is a stub for {@link TXState}. 
+ * TXStateStub lives on the accessor node when we are remoting a transaction. It is a stub for
+ * {@link TXState}.
-  
-  Map<Region<?,?>,TXRegionStub> regionStubs = new HashMap<Region<?,?>,TXRegionStub>();
-  
+
+  Map<Region<?, ?>, TXRegionStub> regionStubs = new HashMap<Region<?, ?>, TXRegionStub>();
+
-  
+
-  public void precommit() throws CommitConflictException,
-      UnsupportedOperationInTransactionException {
+  public void precommit()
+      throws CommitConflictException, UnsupportedOperationInTransactionException {
-  
+
-  protected abstract void validateRegionCanJoinTransaction(LocalRegion region) throws TransactionException;
+
+  protected abstract void validateRegionCanJoinTransaction(LocalRegion region)
+      throws TransactionException;
+
+
+
+
-        proxy.getTxId().getUniqId(),getOriginatingMember(), target);
+        proxy.getTxId().getUniqId(), getOriginatingMember(), target);
-    } catch(TransactionException te) {
+    } catch (TransactionException te) {
-  
-  
-  
+
+
-   * Get or create a TXRegionStub for the given region. 
-   * For regions that are new to the tx, we validate their eligibility.
+   * Get or create a TXRegionStub for the given region. For regions that are new to the tx, we
+   * validate their eligibility.
-    if(stub==null) {
+    if (stub == null) {
-      regionStubs.put(region,stub);
+      regionStubs.put(region, stub);
-  
+
+  public Map<Region<?, ?>, TXRegionStub> getRegionStubs() {
+    return this.regionStubs;
+  }
+
-    builder.append(this.getClass())
-                    .append("@")
-                    .append(System.identityHashCode(this))
-                    .append(" target node: ")
-                    .append(target);
+    builder.append(this.getClass()).append("@").append(System.identityHashCode(this))
+        .append(" target node: ").append(target);
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#destroyExistingEntry(org.apache.geode.internal.cache.EntryEventImpl, boolean, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.TXStateInterface#destroyExistingEntry(org.apache.geode.internal
+   * .cache.EntryEventImpl, boolean, java.lang.Object)
-          LocalizedStrings.TXStateStub_LOCAL_DESTROY_NOT_ALLOWED_IN_TRANSACTION.toLocalizedString());
+          LocalizedStrings.TXStateStub_LOCAL_DESTROY_NOT_ALLOWED_IN_TRANSACTION
+              .toLocalizedString());
-    rs.destroyExistingEntry(event,cacheWrite,expectedOldValue);
+    rs.destroyExistingEntry(event, cacheWrite, expectedOldValue);
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#getDeserializedValue(java.lang.Object, org.apache.geode.internal.cache.LocalRegion, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.TXStateInterface#getDeserializedValue(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion, boolean)
-  public Object getDeserializedValue(KeyInfo keyInfo,
-                                     LocalRegion localRegion,
-                                     boolean updateStats,
-                                     boolean disableCopyOnRead,
-                                     boolean preferCD,
-                                     EntryEventImpl clientEvent,
-                                     boolean returnTombstones,
-                                     boolean retainResult) {
+  public Object getDeserializedValue(KeyInfo keyInfo, LocalRegion localRegion, boolean updateStats,
+      boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent,
+      boolean returnTombstones, boolean retainResult) {
-  public Object getDeserializedValue(KeyInfo keyInfo, LocalRegion localRegion,
-      boolean updateStats, boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent, boolean returnTombstones) {
+  public Object getDeserializedValue(KeyInfo keyInfo, LocalRegion localRegion, boolean updateStats,
+      boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent,
+      boolean returnTombstones) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#getEntry(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.TXStateInterface#getEntry(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-//    Entry retVal = null;
-//    if (r.getPartitionAttributes() != null) {
-//      PartitionedRegion pr = (PartitionedRegion)r;
-//      try {
-//        retVal = pr.getEntryRemotely((InternalDistributedMember)target,
-//                                keyInfo.getBucketId(), keyInfo.getKey(), allowTombstones);
+    // Entry retVal = null;
+    // if (r.getPartitionAttributes() != null) {
+    // PartitionedRegion pr = (PartitionedRegion)r;
+    // try {
+    // retVal = pr.getEntryRemotely((InternalDistributedMember)target,
+    // keyInfo.getBucketId(), keyInfo.getKey(), allowTombstones);
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#invalidateExistingEntry(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.TXStateInterface#invalidateExistingEntry(org.apache.geode.
+   * internal.cache.EntryEventImpl, boolean, boolean)
-  public void invalidateExistingEntry(EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry) {
+  public void invalidateExistingEntry(EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry) {
-          LocalizedStrings.TXStateStub_LOCAL_INVALIDATE_NOT_ALLOWED_IN_TRANSACTION.toLocalizedString());
+          LocalizedStrings.TXStateStub_LOCAL_INVALIDATE_NOT_ALLOWED_IN_TRANSACTION
+              .toLocalizedString());
-    getTXRegionStub(event.getRegion()).invalidateExistingEntry(event,invokeCallbacks,forceNewEntry);
- 
+    getTXRegionStub(event.getRegion()).invalidateExistingEntry(event, invokeCallbacks,
+        forceNewEntry);
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#isInProgressAndSameAs(org.apache.geode.internal.cache.TXStateInterface)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.TXStateInterface#isInProgressAndSameAs(org.apache.geode.
+   * internal.cache.TXStateInterface)
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#readRegion(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.TXStateInterface#readRegion(org.apache.geode.internal.cache.
+   * LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#rmRegion(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.TXStateInterface#rmRegion(org.apache.geode.internal.cache.
+   * LocalRegion)
-
-  
+
-  
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#txPutEntry(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean, boolean)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.TXStateInterface#txPutEntry(org.apache.geode.internal.cache.
+   * EntryEventImpl, boolean, boolean, boolean)
-  public boolean txPutEntry(EntryEventImpl event, boolean ifNew,
-      boolean requireOldValue, boolean checkResources, Object expectedOldValue) {
+  public boolean txPutEntry(EntryEventImpl event, boolean ifNew, boolean requireOldValue,
+      boolean checkResources, Object expectedOldValue) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#txReadEntry(java.lang.Object, org.apache.geode.internal.cache.LocalRegion, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.TXStateInterface#txReadEntry(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion, boolean)
-  public TXEntryState txReadEntry(KeyInfo entryKey, LocalRegion localRegion,
-      boolean rememberRead,boolean createTxEntryIfAbsent) {
+  public TXEntryState txReadEntry(KeyInfo entryKey, LocalRegion localRegion, boolean rememberRead,
+      boolean createTxEntryIfAbsent) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#txReadRegion(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.TXStateInterface#txReadRegion(org.apache.geode.internal.cache.
+   * LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#txWriteRegion(org.apache.geode.internal.cache.LocalRegion, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.TXStateInterface#txWriteRegion(org.apache.geode.internal.cache.
+   * LocalRegion, java.lang.Object)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.TXStateInterface#writeRegion(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.TXStateInterface#writeRegion(org.apache.geode.internal.cache.
+   * LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#containsKey(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#containsKey(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#containsValueForKey(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#containsValueForKey(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-    return getTXRegionStub(localRegion).containsValueForKey( keyInfo);
+    return getTXRegionStub(localRegion).containsValueForKey(keyInfo);
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#entryCount(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#entryCount(org.apache.geode.internal.cache.
+   * LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#findObject(org.apache.geode.internal.cache.LocalRegion, java.lang.Object, java.lang.Object, boolean, boolean, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#findObject(org.apache.geode.internal.cache.
+   * LocalRegion, java.lang.Object, java.lang.Object, boolean, boolean, java.lang.Object)
-  public Object findObject(KeyInfo keyInfo,
-                           LocalRegion r,
-                           boolean isCreate,
-                           boolean generateCallbacks,
-                           Object value,
-                           boolean disableCopyOnRead,
-                           boolean preferCD,
-                           ClientProxyMembershipID requestingClient,
-                           EntryEventImpl clientEvent,
-                           boolean returnTombstones) {
-    return getTXRegionStub(r).findObject(keyInfo,isCreate,generateCallbacks,value, preferCD, requestingClient, clientEvent);
+  public Object findObject(KeyInfo keyInfo, LocalRegion r, boolean isCreate,
+      boolean generateCallbacks, Object value, boolean disableCopyOnRead, boolean preferCD,
+      ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent,
+      boolean returnTombstones) {
+    return getTXRegionStub(r).findObject(keyInfo, isCreate, generateCallbacks, value, preferCD,
+        requestingClient, clientEvent);
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getAdditionalKeysForIterator(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getAdditionalKeysForIterator(org.apache.geode.
+   * internal.cache.LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getEntryForIterator(org.apache.geode.internal.cache.LocalRegion, java.lang.Object, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getEntryForIterator(org.apache.geode.internal.
+   * cache.LocalRegion, java.lang.Object, boolean)
-  public Object getEntryForIterator(KeyInfo keyInfo, LocalRegion currRgn,
-      boolean rememberReads, boolean allowTombstones) {
+  public Object getEntryForIterator(KeyInfo keyInfo, LocalRegion currRgn, boolean rememberReads,
+      boolean allowTombstones) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getKeyForIterator(java.lang.Object, org.apache.geode.internal.cache.LocalRegion, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getKeyForIterator(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion, boolean)
-  public Object getKeyForIterator(KeyInfo keyInfo, LocalRegion currRgn,
-      boolean rememberReads, boolean allowTombstones) {
+  public Object getKeyForIterator(KeyInfo keyInfo, LocalRegion currRgn, boolean rememberReads,
+      boolean allowTombstones) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getValueInVM(java.lang.Object, org.apache.geode.internal.cache.LocalRegion, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getValueInVM(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion, boolean)
-  public Object getValueInVM(KeyInfo keyInfo, LocalRegion localRegion,
-      boolean rememberRead) {
+  public Object getValueInVM(KeyInfo keyInfo, LocalRegion localRegion, boolean rememberRead) {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#putEntry(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#putEntry(org.apache.geode.internal.cache.
+   * EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
-   return getTXRegionStub(event.getRegion()).putEntry(event,ifNew,ifOld,expectedOldValue,requireOldValue,lastModified,overwriteDestroyed);
+    return getTXRegionStub(event.getRegion()).putEntry(event, ifNew, ifOld, expectedOldValue,
+        requireOldValue, lastModified, overwriteDestroyed);
-   * @see org.apache.geode.internal.cache.InternalDataView#getSerializedValue(org.apache.geode.internal.cache.LocalRegion, java.lang.Object, java.lang.Object)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getSerializedValue(org.apache.geode.internal.
+   * cache.LocalRegion, java.lang.Object, java.lang.Object)
-  public Object getSerializedValue(LocalRegion localRegion,
-                                   KeyInfo key,
-                                   boolean doNotLockEntry,
-                                   ClientProxyMembershipID requestingClient,
-                                   EntryEventImpl clientEvent,
-                                   boolean returnTombstones) {
+  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry,
+      ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent,
+      boolean returnTombstones) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#putEntryOnRemote(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#putEntryOnRemote(org.apache.geode.internal.
+   * cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
-  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew,
-      boolean ifOld, Object expectedOldValue, boolean requireOldValue,
-      long lastModified, boolean overwriteDestroyed)
-      throws DataLocationException {
+  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew, boolean ifOld,
+      Object expectedOldValue, boolean requireOldValue, long lastModified,
+      boolean overwriteDestroyed) throws DataLocationException {
-  
+
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#destroyOnRemote(java.lang.Integer, org.apache.geode.internal.cache.EntryEventImpl, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#destroyOnRemote(java.lang.Integer,
+   * org.apache.geode.internal.cache.EntryEventImpl, java.lang.Object)
-  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite,
-      Object expectedOldValue) throws DataLocationException {
+  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
+      throws DataLocationException {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote(org.apache.geode.internal.
+   * cache.EntryEventImpl, boolean, boolean)
-  public void checkSupportsRegionDestroy()
-    throws UnsupportedOperationInTransactionException {
-    throw new UnsupportedOperationInTransactionException(LocalizedStrings.TXState_REGION_DESTROY_NOT_SUPPORTED_IN_A_TRANSACTION.toLocalizedString());
+  public void checkSupportsRegionDestroy() throws UnsupportedOperationInTransactionException {
+    throw new UnsupportedOperationInTransactionException(
+        LocalizedStrings.TXState_REGION_DESTROY_NOT_SUPPORTED_IN_A_TRANSACTION.toLocalizedString());
-  
-  public void checkSupportsRegionInvalidate()
-    throws UnsupportedOperationInTransactionException {
-    throw new UnsupportedOperationInTransactionException(LocalizedStrings.TXState_REGION_INVALIDATE_NOT_SUPPORTED_IN_A_TRANSACTION.toLocalizedString());
+
+  public void checkSupportsRegionInvalidate() throws UnsupportedOperationInTransactionException {
+    throw new UnsupportedOperationInTransactionException(
+        LocalizedStrings.TXState_REGION_INVALIDATE_NOT_SUPPORTED_IN_A_TRANSACTION
+            .toLocalizedString());
-  public void checkSupportsRegionClear()
-      throws UnsupportedOperationInTransactionException {
-    throw new UnsupportedOperationInTransactionException(LocalizedStrings.TXState_REGION_CLEAR_NOT_SUPPORTED_IN_A_TRANSACTION.toLocalizedString());
+  public void checkSupportsRegionClear() throws UnsupportedOperationInTransactionException {
+    throw new UnsupportedOperationInTransactionException(
+        LocalizedStrings.TXState_REGION_CLEAR_NOT_SUPPORTED_IN_A_TRANSACTION.toLocalizedString());
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getBucketKeys(org.apache.geode.internal.cache.LocalRegion, int)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getBucketKeys(org.apache.geode.internal.cache.
+   * LocalRegion, int)
-    PartitionedRegion pr = (PartitionedRegion)localRegion;
+    PartitionedRegion pr = (PartitionedRegion) localRegion;
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getEntryOnRemote(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getEntryOnRemote(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getRegionKeysForIteration(org.apache.geode.internal.cache.LocalRegion)
+
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getRegionKeysForIteration(org.apache.geode.
+   * internal.cache.LocalRegion)
-  public boolean isRealDealLocal()
-  {    
+  public boolean isRealDealLocal() {
-  
-  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,LocalRegion region) {
-	  getTXRegionStub(region).postPutAll(putallOp,successfulPuts,region);
+
+  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,
+      LocalRegion region) {
+    getTXRegionStub(region).postPutAll(putallOp, successfulPuts, region);
+
-  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps, LocalRegion region) {
+  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps,
+      LocalRegion region) {
-  
+
-  public void updateEntryVersion(EntryEventImpl event)
-      throws EntryNotFoundException {
+  public void updateEntryVersion(EntryEventImpl event) throws EntryNotFoundException {
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
