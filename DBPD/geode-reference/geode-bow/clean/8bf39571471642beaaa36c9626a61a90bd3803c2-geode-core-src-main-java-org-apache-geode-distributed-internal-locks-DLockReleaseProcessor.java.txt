Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-public class DLockReleaseProcessor
-extends ReplyProcessor21 {
+public class DLockReleaseProcessor extends ReplyProcessor21 {
-  
+
-  
-  public DLockReleaseProcessor(DM dm,
-                               InternalDistributedMember member,
-                               String serviceName,
-                               Object objectName) {
+
+  public DLockReleaseProcessor(DM dm, InternalDistributedMember member, String serviceName,
+      Object objectName) {
-  
-  /** Returns true if release was acknowledged by the grantor; false means
-   *  we targeted someone who is not the grantor */
-  protected boolean release(InternalDistributedMember grantor,
-                            String serviceName, 
-                            boolean lockBatch,
-                            int lockId) {
+
+  /**
+   * Returns true if release was acknowledged by the grantor; false means we targeted someone who is
+   * not the grantor
+   */
+  protected boolean release(InternalDistributedMember grantor, String serviceName,
+      boolean lockBatch, int lockId) {
-    
+
-    }
-    else {
+    } else {
-    try { 
+    try {
-    }
-    catch (ReplyException e) {
+    } catch (ReplyException e) {
-    
-    if (this.reply == null) return false;
+
+    if (this.reply == null)
+      return false;
-  
+
-  
+
-      Assert.assertTrue(msg instanceof DLockReleaseReplyMessage, 
-          "DLockReleaseProcessor is unable to process message of type " +
-          msg.getClass());
+      Assert.assertTrue(msg instanceof DLockReleaseReplyMessage,
+          "DLockReleaseProcessor is unable to process message of type " + msg.getClass());
-      
+
-          logger.trace(LogMarker.DLS, "Successfully released {} in {}", this.objectName, myReply.serviceName);
+          logger.trace(LogMarker.DLS, "Successfully released {} in {}", this.objectName,
+              myReply.serviceName);
-          logger.trace(LogMarker.DLS, "{} has responded DLockReleaseReplyMessage.NOT_GRANTOR for {}", myReply.getSender(), myReply.serviceName);
+          logger.trace(LogMarker.DLS,
+              "{} has responded DLockReleaseReplyMessage.NOT_GRANTOR for {}", myReply.getSender(),
+              myReply.serviceName);
-    }
-    finally {
+    } finally {
-      /*if (this.log.fineEnabled()) {
-        this.log.fine("Finished handling: " + msg);
-      }*/
+      /*
+       * if (this.log.fineEnabled()) { this.log.fine("Finished handling: " + msg); }
+       */
-  
+
-  //   DLockReleaseMessage
+  // DLockReleaseMessage
-  public static final class DLockReleaseMessage 
-  extends HighPriorityDistributionMessage
-  implements MessageWithReply {
+  public static final class DLockReleaseMessage extends HighPriorityDistributionMessage
+      implements MessageWithReply {
-  
+
-    
+
-    
+
-    
+
-    
+
-    
+
-  
+
-      
+
-        if (this.svc == null) { 
+        if (this.svc == null) {
-        }
-        else {
+        } else {
-      }
-      catch (RuntimeException e) {
+      } catch (RuntimeException e) {
-      }
-      catch (VirtualMachineError e) {
+      } catch (VirtualMachineError e) {
-      }
-      catch (Error e) {
+      } catch (Error e) {
-      }
-      finally {
+      } finally {
-          
+
-          }
-          else {
+          } else {
-    
+
-    /** 
-     * Execute basicProcess inside Pooled Executor because grantor may not 
-     * be initializing which will require us to wait.
+    /**
+     * Execute basicProcess inside Pooled Executor because grantor may not be initializing which
+     * will require us to wait.
-    
-    /** 
+
+    /**
-        if (svc == null || svc.isDestroyed()) return;
-        
+        if (svc == null || svc.isDestroyed())
+          return;
+
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-        
+
-        
+
-          }
-          else {
+          } else {
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-      }
-      catch (LockGrantorDestroyedException ignore) {
-      }
-      catch (LockServiceDestroyedException ignore) {
-      }
-      catch (RuntimeException e) {
+      } catch (LockGrantorDestroyedException ignore) {
+      } catch (LockServiceDestroyedException ignore) {
+      } catch (RuntimeException e) {
-      }
-      catch (VirtualMachineError err) {
+      } catch (VirtualMachineError err) {
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-      }
-      catch (Error e) {
+      } catch (Error e) {
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-      }
-      finally {
+      } finally {
-        
+
-        }
-        else {
+        } else {
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-            logger.trace(LogMarker.DLS, "DLockReleaseMessage, omitted postRemoteRelease lock on " + objectName + "; grantor = " + grantor + ", lockBatch = " + lockBatch + ", replyMsg = " + replyMsg);
+            logger.trace(LogMarker.DLS,
+                "DLockReleaseMessage, omitted postRemoteRelease lock on " + objectName
+                    + "; grantor = " + grantor + ", lockBatch = " + lockBatch + ", replyMsg = "
+                    + replyMsg);
-    
+
-    
+
-  
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  
+
-      return new StringBuilder("DLockReleaseMessage for ").append(this.serviceName)
-          .append(", ").append(this.objectName)
-          .append("; processorId=").append(this.processorId) 
-          .append("; lockBatch=").append(this.lockBatch) 
-          .append("; lockId=").append(this.lockId).toString();
+      return new StringBuilder("DLockReleaseMessage for ").append(this.serviceName).append(", ")
+          .append(this.objectName).append("; processorId=").append(this.processorId)
+          .append("; lockBatch=").append(this.lockBatch).append("; lockId=").append(this.lockId)
+          .toString();
-  
+
-  //   DLockReleaseReplyMessage
+  // DLockReleaseReplyMessage
-  public static final class DLockReleaseReplyMessage 
-  extends ReplyMessage {
-   
+  public static final class DLockReleaseReplyMessage extends ReplyMessage {
+
-    
+
-    
-    /** OK or NOT_GRANTOR for the service  */
+
+    /** OK or NOT_GRANTOR for the service */
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-        case NOT_GRANTOR: buff.append("NOT_GRANTOR"); break;
-        case OK:          buff.append("OK"); break;
-        default: buff.append(String.valueOf(this.replyCode)); break;
+        case NOT_GRANTOR:
+          buff.append("NOT_GRANTOR");
+          break;
+        case OK:
+          buff.append("OK");
+          break;
+        default:
+          buff.append(String.valueOf(this.replyCode));
+          break;
