GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

-import org.apache.geode.GemFireConfigException;
-import org.apache.geode.SystemConnectException;
-import org.apache.geode.distributed.DistributedSystemDisconnectedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberStartupException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipClosedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfigurationException;
-import org.apache.geode.security.AuthenticationRequiredException;
-import org.apache.geode.security.GemFireSecurityException;
-  public boolean join() {
+  public boolean join() throws MemberStartupException {
-      // to preserve old behavior we need to throw a SystemConnectException if
+      // to preserve old behavior we need to throw a MemberStartupException if
-        throw new SystemConnectException("Unable to join the distributed system in "
+        throw new MemberStartupException("Unable to join the distributed system in "
-   * SystemConnectException or an AuthenticationFailedException
+   * MemberStartupException or an exception from the authenticator, if present.
-  boolean attemptToJoin() {
+  boolean attemptToJoin() throws MemberStartupException {
-        throw new SystemConnectException(failReason);
-      } else if (failReason.contains("Failed to find credentials")) {
-        throw new AuthenticationRequiredException(failReason);
+        throw new MemberStartupException(failReason);
-      throw new GemFireSecurityException(failReason);
+      throw new SecurityException(failReason);
-  boolean findCoordinator() {
+  boolean findCoordinator() throws MemberStartupException {
-              throw new GemFireConfigException(response.getRejectionMessage());
+              throw new MembershipConfigurationException(response.getRejectionMessage());
-              throw new SystemConnectException("Interrupted while trying to contact locators");
+              throw new MemberStartupException("Interrupted while trying to contact locators");
-  public void start() {}
+  public void start() throws MemberStartupException {}
-  public void init(Services<ID> s) {
+  public void init(Services<ID> s) throws MembershipConfigurationException {
-      throw new GemFireConfigException("Multicast cannot be configured for a non-distributed cache."
-          + "  Please configure the locator services for this cache using " + LOCATORS + " or "
-          + START_LOCATOR + ".");
+      throw new MembershipConfigurationException(
+          "Multicast cannot be configured for a non-distributed cache."
+              + "  Please configure the locator services for this cache using " + LOCATORS + " or "
+              + START_LOCATOR + ".");
-        } catch (DistributedSystemDisconnectedException e) {
+        } catch (MembershipClosedException e) {
-            } catch (DistributedSystemDisconnectedException e) {
+            } catch (MembershipClosedException e) {
