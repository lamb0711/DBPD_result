GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
-      waitWhileInitializing(); // calcWaitMillisFromNow
+      waitWhileInitializing();
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
-      if (isDebugEnabled_DLS) {
-        logger.trace(LogMarker.DLS, "[DLockGrantor.handleLockBatch]");
+      final boolean isTraceEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
+      if (isTraceEnabled_DLS) {
+        logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.handleLockBatch]");
-        if (isDebugEnabled_DLS) {
-          logger.trace(LogMarker.DLS, "[DLockGrantor.handleLockBatch] request: {}", request);
+        if (isTraceEnabled_DLS) {
+          logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.handleLockBatch] request: {}",
+              request);
-        if (isDebugEnabled_DLS) {
-          logger.trace(LogMarker.DLS, "[DLockGrantor.handleLockBatch] granting {}",
+        if (isTraceEnabled_DLS) {
+          logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.handleLockBatch] granting {}",
-        // // try-lock every lock in batch...
-        // Object name = null;
-        // Set lockNames = batch.getLockNames();
-        // Set acquiredLocks = new HashSet();
-        // long leaseExpireTime = -1;
-
-        // for (Iterator iter = lockNames.iterator(); iter.hasNext();) {
-        // name = iter.next();
-        // DLockGrantToken grant = getOrCreateGrant(
-        // this.dlock.getOrCreateToken(name));
-
-        // // calc lease expire time just once...
-        // if (leaseExpireTime == -1) {
-        // leaseExpireTime = grant.calcLeaseExpireTime(request.getLeaseTime());
-        // }
-
-        // // try to grant immediately else fail...
-        // if (grant.grantBatchLock(request.getSender(), leaseExpireTime)) {
-        // acquiredLocks.add(grant);
-        // } else {
-        // // fail out and release all..
-        // break;
-        // }
-        // } // for-loop
-
-        // if (acquiredLocks.size() == lockNames.size()) {
-        // // got the locks!
-        // logFine("[DLockGrantor.handleLockBatch] granting " +
-        // batch.getBatchId() + "; leaseExpireTime=" + leaseExpireTime);
-
-        // // save the batch for later release...
-        // this.batchLocks.put(batch.getBatchId(), batch);
-        // request.respondWithGrant(leaseExpireTime);
-        // }
-        // else {
-        // // failed... release them all...
-        // for (Iterator iter = acquiredLocks.iterator(); iter.hasNext();) {
-        // DLockGrantToken grant = (DLockGrantToken) iter.next();
-        // grant.release();
-        // }
-        // request.respondWithTryLockFailed(name);
-        // }
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
-    if (isDebugEnabled_DLS) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.getLockBatch] enter: {}", batchId);
+    final boolean isTraceEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
+    if (isTraceEnabled_DLS) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.getLockBatch] enter: {}", batchId);
-    if (isDebugEnabled_DLS) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.getLockBatch] exit: {}", batchId);
+    if (isTraceEnabled_DLS) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.getLockBatch] exit: {}", batchId);
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
-    if (isDebugEnabled_DLS) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.updateLockBatch] enter: {}", batchId);
+    final boolean isTraceEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
+    if (isTraceEnabled_DLS) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.updateLockBatch] enter: {}", batchId);
-    if (isDebugEnabled_DLS) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.updateLockBatch] exit: {}", batchId);
+    if (isTraceEnabled_DLS) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.updateLockBatch] exit: {}", batchId);
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.releaseLockBatch]");
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.releaseLockBatch]");
-        // Set lockNames = batch.getLockNames();
-        // for (Iterator iter = lockNames.iterator(); iter.hasNext();) {
-        // Object name = iter.next();
-        // DLockGrantToken grant = getOrCreateGrant(
-        // this.dlock.getOrCreateToken(name));
-        // grant.releaseIfLockedBy(owner);
-        // }
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.handleLockQuery] {}", query);
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.handleLockQuery] {}", query);
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
-    if (isDebugEnabled_DLS) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.handleLockRequest] {}", request);
+    final boolean isTraceEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
+    if (isTraceEnabled_DLS) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.handleLockRequest] {}", request);
-        if (isDebugEnabled_DLS) {
-          logger.trace(LogMarker.DLS, "[DLockGrantor.handleLockRequest] about to throwIfDestroyed");
+        if (isTraceEnabled_DLS) {
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "[DLockGrantor.handleLockRequest] about to throwIfDestroyed");
-        if (isDebugEnabled_DLS) {
-          logger.trace(LogMarker.DLS,
+        if (isTraceEnabled_DLS) {
+          logger.trace(LogMarker.DLS_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.handlePermittedLockRequest] {}", request);
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.handlePermittedLockRequest] {}", request);
-        final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+        final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-                logger.trace(LogMarker.DLS,
+                logger.trace(LogMarker.DLS_VERBOSE,
-                logger.error(LogMarker.DLS,
+                logger.error(LogMarker.DLS_MARKER,
-        if (logger.isTraceEnabled(LogMarker.DLS)) {
-          logger.trace(LogMarker.DLS, "[DLockGrantor.reenterLock] no grantToken found for {}",
-              request.getObjectName());
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "[DLockGrantor.reenterLock] no grantToken found for {}", request.getObjectName());
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS,
+          if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+            logger.trace(LogMarker.DLS_VERBOSE,
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-            logger.trace(LogMarker.DLS, "[DLockGrantor.handleDepartureOf] handler = {}", handler);
+            logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.handleDepartureOf] handler = {}",
+                handler);
-            logger.trace(LogMarker.DLS,
+            logger.trace(LogMarker.DLS_VERBOSE,
-                  logger.trace(LogMarker.DLS,
+                  logger.trace(LogMarker.DLS_VERBOSE,
-                  logger.trace(LogMarker.DLS,
+                  logger.trace(LogMarker.DLS_VERBOSE,
-                  logger.trace(LogMarker.DLS,
+                  logger.trace(LogMarker.DLS_VERBOSE,
-                  logger.trace(LogMarker.DLS,
+                  logger.trace(LogMarker.DLS_VERBOSE,
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS, "[simpleDestroy]");
+        logger.trace(LogMarker.DLS_VERBOSE, "[simpleDestroy]");
-            logger.trace(LogMarker.DLS, "[simpleDestroy] {} locks held",
+            logger.trace(LogMarker.DLS_VERBOSE, "[simpleDestroy] {} locks held",
-        try {
-          grant.handleGrantorDestruction();
-        }
-        // catch (VirtualMachineError err) {
-        // SystemFailure.initiateFailure(err);
-        // // If this ever returns, rethrow the error. We're poisoned
-        // // now, so don't let this thread continue.
-        // throw err;
-        // }
-        // catch (Throwable t) {
-        // // Whenever you catch Error or Throwable, you must also
-        // // catch VirtualMachineError (see above). However, there is
-        // // _still_ a possibility that you are dealing with a cascading
-        // // error condition, so you also need to check to see if the JVM
-        // // is still usable:
-        // SystemFailure.checkFailure();
-        // }
-        finally {
-
-        }
+        grant.handleGrantorDestruction();
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS,
+        logger.trace(LogMarker.DLS_VERBOSE,
-        logger.trace(LogMarker.DLS,
+        logger.trace(LogMarker.DLS_VERBOSE,
-          logger.trace(LogMarker.DLS,
+          logger.trace(LogMarker.DLS_VERBOSE,
-      try {
-        request.respondWithNotGrantor();
-      }
-      // catch (VirtualMachineError err) {
-      // SystemFailure.initiateFailure(err);
-      // // If this ever returns, rethrow the error. We're poisoned
-      // // now, so don't let this thread continue.
-      // throw err;
-      // }
-      // catch (Throwable t) {
-      // // Whenever you catch Error or Throwable, you must also
-      // // catch VirtualMachineError (see above). However, there is
-      // // _still_ a possibility that you are dealing with a cascading
-      // // error condition, so you also need to check to see if the JVM
-      // // is still usable:
-      // SystemFailure.checkFailure();
-      // }
-      finally {
-
-      }
+      request.respondWithNotGrantor();
-   * TEST HOOK: Log additional debugging info about this grantor.
-   */
-  void debug() {
-    logger.info(LogMarker.DLS,
-        LocalizedMessage.create(LocalizedStrings.TESTING,
-            "[DLockGrantor.debug] svc=" + this.dlock.getName() + "; state=" + this.state
-                + "; initLatch.ct=" + this.whileInitializing.getCount()));
-  }
-
-  /**
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
-      logger.trace(LogMarker.DLS, sb.toString());
+      logger.trace(LogMarker.DLS_VERBOSE, sb.toString());
-    } catch (LockServiceDestroyedException e) {
+    } catch (LockServiceDestroyedException | LockGrantorDestroyedException e) {
-    } catch (LockGrantorDestroyedException e) {
-      // ignore... grantor was destroyed and that's ok
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "DLockGrantor {} state is DESTROYED", this.dlock.getName());
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "DLockGrantor {} state is DESTROYED",
+            this.dlock.getName());
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[DLockGrantor.basicRemoveGrantToken] removed {}; removed={}",
-            grantToken, removed);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE,
+            "[DLockGrantor.basicRemoveGrantToken] removed {}; removed={}", grantToken, removed);
-        logger.info(LogMarker.DLS,
+        logger.info(LogMarker.DLS_MARKER,
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "Suspend locking of {} by {} with lockId of {}", this.dlock,
-          myRThread, lockId);
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "Suspend locking of {} by {} with lockId of {}",
+          this.dlock, myRThread, lockId);
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "Resume locking of {}", this.dlock);
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "Resume locking of {}", this.dlock);
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[postReleaseSuspendLock] locking is no longer suspended by {}",
-            rThread);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE,
+            "[postReleaseSuspendLock] locking is no longer suspended by {}", rThread);
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "[postReleaseSuspendLock] new status {}",
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[postReleaseSuspendLock] new status {}",
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS, "[postReleaseReadLock] no locks are currently held by {}",
-            rThread);
+        logger.trace(LogMarker.DLS_VERBOSE,
+            "[postReleaseReadLock] no locks are currently held by {}", rThread);
-        logger.trace(LogMarker.DLS, "Total readlock count has dropped to {} for {}",
+        logger.trace(LogMarker.DLS_VERBOSE, "Total readlock count has dropped to {} for {}",
-      logger.trace(LogMarker.DLS, "[postReleaseReadLock] new status {}",
+      logger.trace(LogMarker.DLS_VERBOSE, "[postReleaseReadLock] new status {}",
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS,
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE,
-    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+    final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-      logger.trace(LogMarker.DLS, "[drainPermittedRequests] draining {}", drain);
+      logger.trace(LogMarker.DLS_VERBOSE, "[drainPermittedRequests] draining {}", drain);
-            logger.trace(LogMarker.DLS, "LockGrantorDestroyedException respondWithNotGrantor to {}",
-                request);
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "LockGrantorDestroyedException respondWithNotGrantor to {}", request);
-            logger.trace(LogMarker.DLS, "LockServiceDestroyedException respondWithNotGrantor to {}",
-                request);
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "LockServiceDestroyedException respondWithNotGrantor to {}", request);
-        logger.info(LogMarker.DLS, LocalizedMessage
+        logger.info(LogMarker.DLS_MARKER, LocalizedMessage
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-          logger.trace(LogMarker.DLS,
+          logger.trace(LogMarker.DLS_VERBOSE,
-          logger.trace(LogMarker.DLS,
+          logger.trace(LogMarker.DLS_VERBOSE,
-        logger.trace(LogMarker.DLS,
+        logger.trace(LogMarker.DLS_VERBOSE,
-        logger.info(LogMarker.DLS, LocalizedMessage
+        logger.info(LogMarker.DLS_MARKER, LocalizedMessage
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-          logger.trace(LogMarker.DLS,
+          logger.trace(LogMarker.DLS_VERBOSE,
-          logger.trace(LogMarker.DLS, "[DLockGrantor.acquireReadLockPermission] permitted {}",
-              request);
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "[DLockGrantor.acquireReadLockPermission] permitted {}", request);
-        logger.trace(LogMarker.DLS,
+        logger.trace(LogMarker.DLS_VERBOSE,
-    if (logger.isTraceEnabled(LogMarker.DLS)) {
-      logger.trace(LogMarker.DLS, "[DLockGrantor.acquireLockPermission] {}", request);
+    if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+      logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.acquireLockPermission] {}", request);
-      logger.info(LogMarker.DLS, LocalizedMessage.create(LocalizedStrings.TESTING, buffer));
-      logger.info(LogMarker.DLS, LocalizedMessage.create(LocalizedStrings.TESTING,
+      logger.info(LogMarker.DLS_MARKER, LocalizedMessage.create(LocalizedStrings.TESTING, buffer));
+      logger.info(LogMarker.DLS_MARKER, LocalizedMessage.create(LocalizedStrings.TESTING,
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[DLockGrantToken.schedule] {} scheduling: {}", this, request);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantToken.schedule] {} scheduling: {}", this,
+            request);
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[DLockGrantToken.grantLockToRequest] granting: {}", request);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantToken.grantLockToRequest] granting: {}",
+            request);
-        if (logger.isTraceEnabled(LogMarker.DLS)) {
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
-            logger.trace(LogMarker.DLS, "[DLockGrantToken.releaseIfLockedBy] pending requests: {}",
+            logger.trace(LogMarker.DLS_VERBOSE,
+                "[DLockGrantToken.releaseIfLockedBy] pending requests: {}",
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-                    logger.trace(LogMarker.DLS,
+                    logger.trace(LogMarker.DLS_VERBOSE,
-                  logger.trace(LogMarker.DLS,
+                  logger.trace(LogMarker.DLS_VERBOSE,
-              logger.trace(LogMarker.DLS,
+              logger.trace(LogMarker.DLS_VERBOSE,
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        logger.trace(LogMarker.DLS,
+        logger.trace(LogMarker.DLS_VERBOSE,
-            logger.trace(LogMarker.DLS, "[DLockGrantToken.grantLock] granting {} to {}", getName(),
-                request.getSender());
+            logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantToken.grantLock] granting {} to {}",
+                getName(), request.getSender());
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS,
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE,
-          if (logger.isTraceEnabled(LogMarker.DLS)) {
-            logger.trace(LogMarker.DLS, "[checkForExpiration] Expired token at {}: {}", currentTime,
-                toString(true));
+          if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+            logger.trace(LogMarker.DLS_VERBOSE, "[checkForExpiration] Expired token at {}: {}",
+                currentTime, toString(true));
-        /*
-         * else if (this.log.fineEnabled()) { this.log.fine("[checkForExpiration] not expired: " +
-         * this); }
-         */
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[DLockGrantToken.grantLock.grantor] Granting {}",
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantToken.grantLock.grantor] Granting {}",
-        // log.warning(e); -enable for debugging
-        if (logger.isTraceEnabled(LogMarker.DLS)) {
-          logger.trace(LogMarker.DLS, "[DLockGrantToken.releaseLock] releasing ownership: {}",
-              this);
+        if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "[DLockGrantToken.releaseLock] releasing ownership: {}", this);
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[DLockGrantToken.releaseLock] {} attempted to release: {}",
-            member, this);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE,
+            "[DLockGrantToken.releaseLock] {} attempted to release: {}", member, this);
-            /*
-             * if (this.log.fineEnabled()) { this.log.fine("[DLockGrantorThread.checkTimeToWait.k2]"
-             * + " newTimeToWait=" + newTimeToWait + " expire=" + expire + " newWakeupTimeStamp=" +
-             * newWakeupTimeStamp + " expectedWakeupTimeStamp=" + expectedWakeupTimeStamp +
-             * " nextExpire=" + this.nextExpire + " nextTimeout=" + this.nextTimeout +
-             * " timeToWait=" + this.timeToWait + " goIntoWait=" + this.goIntoWait ); }
-             */
-            /*
-             * if (this.log.fineEnabled()) { this.log.fine("[DLockGrantorThread.checkTimeToWait.k3]"
-             * + " newTimeToWait=" + newTimeToWait + " expire=" + expire +
-             * " expectedWakeupTimeStamp=" + expectedWakeupTimeStamp + " nextExpire=" +
-             * this.nextExpire + " nextTimeout=" + this.nextTimeout + " timeToWait=" +
-             * this.timeToWait + " goIntoWait=" + this.goIntoWait ); }
-             */
-
-        /*
-         * else if (this.log.fineEnabled()) {
-         * this.log.fine("[DLockGrantorThread.checkTimeToWait.k4]" + " newTimeToWait=" +
-         * newTimeToWait + " expire=" + expire + " expectedWakeupTimeStamp=" +
-         * expectedWakeupTimeStamp + " nextExpire=" + this.nextExpire + " nextTimeout=" +
-         * this.nextTimeout + " timeToWait=" + this.timeToWait + " goIntoWait=" + this.goIntoWait );
-         * }
-         */
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-        // SystemFailure.checkFailure(); stopper checks this
-                  logger.trace(LogMarker.DLS,
+                  logger.trace(LogMarker.DLS_VERBOSE,
-                  logger.trace(LogMarker.DLS, "DLockGrantorThread will wait until rescheduled.");
+                  logger.trace(LogMarker.DLS_VERBOSE,
+                      "DLockGrantorThread will wait until rescheduled.");
-                logger.trace(LogMarker.DLS, "DLockGrantorThread is about to wait for {} ms.",
-                    this.timeToWait);
+                logger.trace(LogMarker.DLS_VERBOSE,
+                    "DLockGrantorThread is about to wait for {} ms.", this.timeToWait);
-                logger.trace(LogMarker.DLS, "DLockGrantorThread has woken up...");
+                logger.trace(LogMarker.DLS_VERBOSE, "DLockGrantorThread has woken up...");
-              logger.trace(LogMarker.DLS, "DLockGrantorThread about to expireAndGrantLocks...");
+              logger.trace(LogMarker.DLS_VERBOSE,
+                  "DLockGrantorThread about to expireAndGrantLocks...");
-              logger.trace(LogMarker.DLS, "DLockGrantorThread about to handleRequestTimeouts...");
+              logger.trace(LogMarker.DLS_VERBOSE,
+                  "DLockGrantorThread about to handleRequestTimeouts...");
-              logger.trace(LogMarker.DLS, "DLockGrantorThread about to removeUnusedGrants...");
+              logger.trace(LogMarker.DLS_VERBOSE,
+                  "DLockGrantorThread about to removeUnusedGrants...");
-        // catch (VirtualMachineError err) {
-        // SystemFailure.initiateFailure(err);
-        // // If this ever returns, rethrow the error. We're poisoned
-        // // now, so don't let this thread continue.
-        // throw err;
-        // }
-        // catch (Throwable e) {
-        // // Whenever you catch Error or Throwable, you must also
-        // // catch VirtualMachineError (see above). However, there is
-        // // _still_ a possibility that you are dealing with a cascading
-        // // error condition, so you also need to check to see if the JVM
-        // // is still usable:
-        // SystemFailure.checkFailure();
-        // this.log.warning(LocalizedStrings.DLockGrantor_DLOCKGRANTORTHREAD_CAUGHT_EXCEPTION, e);
-        // }
-        finally {
-
-        }
-      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS);
+      final boolean isDebugEnabled_DLS = logger.isTraceEnabled(LogMarker.DLS_VERBOSE);
-          logger.trace(LogMarker.DLS,
+          logger.trace(LogMarker.DLS_VERBOSE,
-                logger.trace(LogMarker.DLS, "Ignored interrupt processing departed member");
+                logger.trace(LogMarker.DLS_VERBOSE, "Ignored interrupt processing departed member");
-          logger.trace(LogMarker.DLS, "[DLockGrantor.memberDeparted] rejected handling of id={}",
-              id);
+          logger.trace(LogMarker.DLS_VERBOSE,
+              "[DLockGrantor.memberDeparted] rejected handling of id={}", id);
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "[DLockGrantor.processMemberDeparted] id={}", id);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "[DLockGrantor.processMemberDeparted] id={}", id);
