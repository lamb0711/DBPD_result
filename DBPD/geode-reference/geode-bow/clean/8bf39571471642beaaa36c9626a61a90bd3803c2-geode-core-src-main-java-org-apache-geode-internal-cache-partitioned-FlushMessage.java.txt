Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A Partitioned Region specific message whose reply guarantees that all operations
- * have completed for a given Partitioned Region's bucket.   
+ * A Partitioned Region specific message whose reply guarantees that all operations have completed
+ * for a given Partitioned Region's bucket.
- * <p>Currently this message does not support conserve-sockets=false, that is it
- * only flushes the shared communication channels.</p>
+ * <p>
+ * Currently this message does not support conserve-sockets=false, that is it only flushes the
+ * shared communication channels.
+ * </p>
- * <p>This messages implementation is unique in that it uses another instance of itself
- * as the reply.  This was to leverage the fact that the message is a 
- * {@link org.apache.geode.distributed.internal.SerialDistributionMessage}.</p>
+ * <p>
+ * This messages implementation is unique in that it uses another instance of itself as the reply.
+ * This was to leverage the fact that the message is a
+ * {@link org.apache.geode.distributed.internal.SerialDistributionMessage}.
+ * </p>
-public final class FlushMessage extends SerialDistributionMessage implements MessageWithReply
-{ 
+public final class FlushMessage extends SerialDistributionMessage implements MessageWithReply {
-  
+
-  
+
-  private FlushMessage(int prId, int bucketId, int processorId, InternalDistributedMember recipient) {
+  private FlushMessage(int prId, int bucketId, int processorId,
+      InternalDistributedMember recipient) {
-  protected void process(DistributionManager dm)
-  {
+  protected void process(DistributionManager dm) {
-      if (logger.isDebugEnabled()){
+      if (logger.isDebugEnabled()) {
-      }
-      catch (PRLocallyDestroyedException fre) {
+      } catch (PRLocallyDestroyedException fre) {
-          logger.debug("Sending reply despite Region getting locally destroyed prId={}", this.prId, fre);
+          logger.debug("Sending reply despite Region getting locally destroyed prId={}", this.prId,
+              fre);
-      }      
-      catch (CacheRuntimeException ce) {
-        logger.debug("Sending reply despite unavailable Partitioned Region using prId={}", this.prId, ce);
+      } catch (CacheRuntimeException ce) {
+        logger.debug("Sending reply despite unavailable Partitioned Region using prId={}",
+            this.prId, ce);
-        dm.putOutgoing(new FlushMessage(this.prId, Integer.MIN_VALUE, getProcessorId(), getSender()));
+        dm.putOutgoing(
+            new FlushMessage(this.prId, Integer.MIN_VALUE, getProcessorId(), getSender()));
-      if (logger.isDebugEnabled()){
+      if (logger.isDebugEnabled()) {
-      
+
-   * Send this message to the bucket primary, after the {@link ReplyProcessor21#waitForRepliesUninterruptibly()} returns, all updates
-   * from the primary should be complete.  Use this from a host of a backup bucket (aka secondary) when the update
-   * operations originating from the primary {@link Scope#DISTRIBUTED_NO_ACK do not require an acknowldgement} 
+   * Send this message to the bucket primary, after the
+   * {@link ReplyProcessor21#waitForRepliesUninterruptibly()} returns, all updates from the primary
+   * should be complete. Use this from a host of a backup bucket (aka secondary) when the update
+   * operations originating from the primary {@link Scope#DISTRIBUTED_NO_ACK do not require an
+   * acknowldgement}
+   * 
-  public static ReplyProcessor21 send(InternalDistributedMember primary, PartitionedRegion p, int bucketId)
-  {
+  public static ReplyProcessor21 send(InternalDistributedMember primary, PartitionedRegion p,
+      int bucketId) {
-    p.getDistributionManager().putOutgoing(fm);    
+    p.getDistributionManager().putOutgoing(fm);
-  public int getProcessorId()
-  {
+  public int getProcessorId() {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.prId = in.readInt(); 
-    this.bucketId = in.readInt(); 
-    this.processorId = in.readInt(); 
+    this.prId = in.readInt();
+    this.bucketId = in.readInt();
+    this.processorId = in.readInt();
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  
