GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.util.List;
+
-import org.apache.geode.admin.*;
+import org.apache.geode.admin.GemFireHealthConfig;
+import org.apache.geode.admin.MemberHealthConfig;
-import org.apache.geode.distributed.internal.*;
-import org.apache.geode.internal.*;
-import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DMStats;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.internal.OSProcess;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.i18n.LocalizedStrings;
-import java.util.*;
-
- * @see VMStats
- * @see ProcessStats
- * @see DMStats
- *
- *
-/**
- *
- */
-  private MemberHealthConfig config;
+  private final MemberHealthConfig config;
-  private String description;
-
-  // /** Statistics about this VM (may be null) */
-  // private VMStatsContract vmStats;
+  private final String description;
-  private DMStats dmStats;
+  private final DMStats dmStats;
-  ////////////////////// Constructors //////////////////////
-
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
-  //////////////////// Instance Methods ////////////////////
-
-              .toLocalizedString(new Object[] {Long.valueOf(vmSize), Long.valueOf(threshold)});
+              .toLocalizedString(vmSize, threshold);
-  void checkMessageQueueSize(List status) {
+  private void checkMessageQueueSize(List status) {
-              .toLocalizedString(
-                  new Object[] {Long.valueOf(overflowSize), Long.valueOf(threshold)});
+              .toLocalizedString(overflowSize, threshold);
-  void checkReplyTimeouts(List status) {
+  private void checkReplyTimeouts(List status) {
-              .toLocalizedString(
-                  new Object[] {Long.valueOf(deltaReplyTimeouts), Long.valueOf(threshold)});
+              .toLocalizedString(deltaReplyTimeouts, threshold);
-   * See if the multicast retransmission ratio is okay
-   */
-  void checkRetransmissionRatio(List status) {
-    double threshold = this.config.getMaxRetransmissionRatio();
-    int mcastMessages = this.dmStats.getMcastWrites();
-    if (mcastMessages > 100000) { // avoid initial state & int overflow
-      // the ratio we actually use here is (retransmit requests) / (mcast datagram writes)
-      // a single retransmit request may include multiple missed messages
-      double ratio =
-          (this.dmStats.getMcastRetransmits() * 1.0) / (this.dmStats.getMcastWrites() * 1.0);
-      if (ratio > threshold) {
-        String s = "The number of message retransmissions (" + ratio + ") exceeds the threshold ("
-            + threshold + ")";
-        status.add(okayHealth(s));
-      }
-    }
-  }
-
-  /**
-   * their reliablity policies.
-   * 
+   * their reliability policies.
+  private void checkCacheRequiredRolesMeet(List status) {
+    // will have to call here okayHealth() or poorHealth()
-  void checkCacheRequiredRolesMeet(List status) {
-    // will have to call here okeyHealth() or poorHealth()
-    // GemFireCache cache = (GemFireCache)CacheFactory.getAnyInstance();
-
-    // CachePerfStats cPStats= null;
-      GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
-      CachePerfStats cPStats = null;
-      cPStats = cache.getCachePerfStats();
+      InternalCache cache = (InternalCache) CacheFactory.getAnyInstance();
+      CachePerfStats cPStats = cache.getCachePerfStats();
-                .toLocalizedString(Integer.valueOf(numRegions))));
+                .toLocalizedString(numRegions)));
-                .toLocalizedString(Integer.valueOf(numRegions))));
+                .toLocalizedString(numRegions)));
-                .toLocalizedString(Integer.valueOf(numRegions))));
-      } // else{
-        // health is good/okay
-        // status.add(okayHealth("All regions have there required roles meet"));
-        // }
+                .toLocalizedString(numRegions)));
+      }
-
-    // missing and reliablity attributed.
+    // missing and reliability attributed.
-
+    // nothing
