Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//  private final LocalRegion region;
+  // private final LocalRegion region;
+
-//    this.region = region;
-    this.proxy = region.getServerProxy(); 
+    // this.region = region;
+    this.proxy = region.getServerProxy();
-  
-  
+
+
-  
+
-  
+
-	if(event.getOperation().isLocal()) {
-	  throw new UnsupportedOperationInTransactionException();
-	}
-    Object result = proxy.destroy(event.getKey(), expectedOldValue, event.getOperation(), event, event.getCallbackArgument());
+    if (event.getOperation().isLocal()) {
+      throw new UnsupportedOperationInTransactionException();
+    }
+    Object result = proxy.destroy(event.getKey(), expectedOldValue, event.getOperation(), event,
+        event.getCallbackArgument());
-      throw (EntryNotFoundException)result;
+      throw (EntryNotFoundException) result;
-  
-  public Object findObject(KeyInfo keyInfo, boolean isCreate,
-                           boolean generateCallbacks, Object value, boolean preferCD,
-                           ClientProxyMembershipID requestingClient, EntryEventImpl event) {
+
+  public Object findObject(KeyInfo keyInfo, boolean isCreate, boolean generateCallbacks,
+      Object value, boolean preferCD, ClientProxyMembershipID requestingClient,
+      EntryEventImpl event) {
-  
-  public Entry<?,?> getEntry(KeyInfo keyInfo, boolean allowTombstones) {
+
+  public Entry<?, ?> getEntry(KeyInfo keyInfo, boolean allowTombstones) {
-  
+
-  
-  public void invalidateExistingEntry(EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry) {
-	  if(event.getOperation().isLocal()) {
-	    throw new UnsupportedOperationInTransactionException();
-	  }
-	  proxy.invalidate(event);
+
+  public void invalidateExistingEntry(EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry) {
+    if (event.getOperation().isLocal()) {
+      throw new UnsupportedOperationInTransactionException();
+    }
+    proxy.invalidate(event);
-  
+
-      result = proxy.put(event.getKey(), event.getRawNewValue(), event.getDeltaBytes(),
-        event, event.getOperation(), requireOldValue,
-        expectedOldValue, event.getCallbackArgument(), event.isCreate());
+      result = proxy.put(event.getKey(), event.getRawNewValue(), event.getDeltaBytes(), event,
+          event.getOperation(), requireOldValue, expectedOldValue, event.getCallbackArgument(),
+          event.isCreate());
-        throw (EntryExistsException)e.getCause();
+        throw (EntryExistsException) e.getCause();
-        return ((Boolean)result).booleanValue();
+        return ((Boolean) result).booleanValue();
-//      if (logger.isDebugEnabled()) {
-//        logger.debug("putIfAbsent for " + event.getKey() + " is returning " + result);
-//      }
+      // if (logger.isDebugEnabled()) {
+      // logger.debug("putIfAbsent for " + event.getKey() + " is returning " + result);
+      // }
-  
+
-  
+
-  
-  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts, LocalRegion r) {
-	  /*
-	   * Don't do anything here , it's handled in proxy and elsewhere.
-	   */
+
+  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,
+      LocalRegion r) {
+    /*
+     * Don't do anything here , it's handled in proxy and elsewhere.
+     */
+
-  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps, LocalRegion region) {
+  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps,
+      LocalRegion region) {
-  public void cleanup() {
-  }
-  
+  public void cleanup() {}
+
