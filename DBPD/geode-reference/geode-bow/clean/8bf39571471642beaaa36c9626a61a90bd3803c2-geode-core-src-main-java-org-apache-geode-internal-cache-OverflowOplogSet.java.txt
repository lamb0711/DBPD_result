Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  private final ConcurrentMap<Integer, OverflowOplog> overflowMap
-  = new ConcurrentHashMap<Integer, OverflowOplog>();
-  private final Map<Integer, OverflowOplog> compactableOverflowMap
-  = new LinkedHashMap<Integer, OverflowOplog>();
+  private final ConcurrentMap<Integer, OverflowOplog> overflowMap =
+      new ConcurrentHashMap<Integer, OverflowOplog>();
+  private final Map<Integer, OverflowOplog> compactableOverflowMap =
+      new LinkedHashMap<Integer, OverflowOplog>();
-  
+
-  
+
-  
+
-  public final void modify(LocalRegion lr, DiskEntry entry, ValueWrapper value,
-      boolean async) {
+  public final void modify(LocalRegion lr, DiskEntry entry, ValueWrapper value, boolean async) {
-  
+
-  
+
-      lastOverflowDir=0;
+      lastOverflowDir = 0;
-    for (int i = lastOverflowDir; i < getDirectories().length; i++) {
-      long availableSpace = getDirectories()[i].getAvailableSpace() ;
-      if (availableSpace >= minSize) {
-        idx = i;
-        break;
-      }
-    }
-    if (idx == -1 && lastOverflowDir != 0) {
-      for (int i = 0; i < lastOverflowDir; i++) {
-        long availableSpace = getDirectories()[i].getAvailableSpace() ;
+      for (int i = lastOverflowDir; i < getDirectories().length; i++) {
+        long availableSpace = getDirectories()[i].getAvailableSpace();
-    }
+      if (idx == -1 && lastOverflowDir != 0) {
+        for (int i = 0; i < lastOverflowDir; i++) {
+          long availableSpace = getDirectories()[i].getAvailableSpace();
+          if (availableSpace >= minSize) {
+            idx = i;
+            break;
+          }
+        }
+      }
-              new Object[] { Long.valueOf(getDirectories()[idx].getUsedSpace()), Long.valueOf(getDirectories()[idx].getCapacity()) }));
+              new Object[] {Long.valueOf(getDirectories()[idx].getUsedSpace()),
+                  Long.valueOf(getDirectories()[idx].getCapacity())}));
-        throw new DiskAccessException(LocalizedStrings.Oplog_DIRECTORIES_ARE_FULL_NOT_ABLE_TO_ACCOMODATE_THIS_OPERATIONSWITCHING_PROBLEM_FOR_ENTRY_HAVING_DISKID_0.toLocalizedString("needed " + minSize + " bytes"), parent);
+        throw new DiskAccessException(
+            LocalizedStrings.Oplog_DIRECTORIES_ARE_FULL_NOT_ABLE_TO_ACCOMODATE_THIS_OPERATIONSWITCHING_PROBLEM_FOR_ENTRY_HAVING_DISKID_0
+                .toLocalizedString("needed " + minSize + " bytes"),
+            parent);
+
+
-  
+
-    for (OverflowOplog oo: this.overflowMap.values()) {
+    for (OverflowOplog oo : this.overflowMap.values()) {
-      for (OverflowOplog oo: this.compactableOverflowMap.values()) {
+      for (OverflowOplog oo : this.compactableOverflowMap.values()) {
-          OverflowOplog oplog = getChild((int)oplogId);
+          OverflowOplog oplog = getChild((int) oplogId);
-  
+
-        if (this.lastOverflowWrite.copyForwardForOverflowCompact(de, valueBytes, length, userBits)) {
+        if (this.lastOverflowWrite.copyForwardForOverflowCompact(de, valueBytes, length,
+            userBits)) {
+
-    //the oplog id is cast to an integer because the overflow
-    //map uses integer oplog ids.
+    // the oplog id is cast to an integer because the overflow
+    // map uses integer oplog ids.
-  
+
-  
-  
+
+
-  public void create(LocalRegion region, DiskEntry entry, ValueWrapper value,
-      boolean async) {
+  public void create(LocalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
-  public void remove(LocalRegion region, DiskEntry entry, boolean async,
-      boolean isClear) {
+  public void remove(LocalRegion region, DiskEntry entry, boolean async, boolean isClear) {
-  
+
-  
-  
+
+
-    synchronized (this.compactableOverflowMap)
-    {
-      Iterator<OverflowOplog> itr = this.compactableOverflowMap.values()
-          .iterator();
+    synchronized (this.compactableOverflowMap) {
+      Iterator<OverflowOplog> itr = this.compactableOverflowMap.values().iterator();
-  
+
-  
+
