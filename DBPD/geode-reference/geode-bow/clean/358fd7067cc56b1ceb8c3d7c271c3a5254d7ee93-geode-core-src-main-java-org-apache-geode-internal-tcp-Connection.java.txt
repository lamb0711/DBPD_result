GEODE-8131: reader thread blocked attempting to issue an alert (#5132)

* GEODE-8131: reader thread blocked attempting to issue an alert

This PR does not solve the problem of the alert system causing a P2P
message reader to block but instead ensures that the reader thread will
write deserialization information to the log before issuing a fatal
alert.  If the alert level is set to "info" this won't help, but no-one
would set the alert level to that level.

Along the way I removed some duplicate strings.

* removing duplicate code & logging toString of exceptions at fatal-level
-        logger.fatal("ClassNotFound deserializing message: {}", ex.toString());
+        logAtInfoAndFatal(failureMsg, failureEx);
-        logger.fatal("IOException deserializing message", failureEx);
+        logAtInfoAndFatal(failureMsg, failureEx);
-        logger.fatal("Unexpected failure deserializing message", failureEx);
+        logAtInfoAndFatal(failureMsg, failureEx);
+  /**
+   * For exceptions that we absolutely must see in the log files, use this method
+   * to log the problem first at "info" level and then at "fatal" level. We do this
+   * in case the "fatal" level log entry generates an alert that gets blocked in
+   * transmitting the data to an alert listener like the JMX Manager
+   */
+  private void logAtInfoAndFatal(String failureMsg, Throwable failureEx) {
+    // log at info level first in case fatal-level alert notification becomes blocked
+    logger.info(failureMsg, failureEx);
+    // log at fatal-level with toString() on the exception since this will generate an
+    // alert
+    logger.fatal(failureMsg, failureEx.toString());
+  }
+
