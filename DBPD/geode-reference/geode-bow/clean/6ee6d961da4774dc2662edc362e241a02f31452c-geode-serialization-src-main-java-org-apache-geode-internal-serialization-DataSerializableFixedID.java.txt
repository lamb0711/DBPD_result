GEODE-7090 Remove dependency on DataSerializer from membership classes

DataSerializableFixedID is used by most internal classes for
serialization.  Membership, in particular, was constrained in its
implementation to use only "fixed" serialization identifiers because our
other serialization mechanisms (DataSerialiable, PDX) are dependent on
membership and messaging.

This PR moves serialization of DataSerializableFixedID to a new
sub-project, geode-serialization in support of also separating
membership into its own sub-project.

Many files are touched by this PR.  The vast majority are due to a
change in the serialization interface that introduces a new parameter in
DataSerializableFixedID's toData and fromData methods.  This parameter
gives access to the serializer and to the Version of the
source/destination.  This parameter was added to begin moving from a
"static" based serialization service to an instance based service.

Serialization code concerning "DSFID"s has been moved from
InternalDataSerializer to the new class DSFIDSerialzerImpl.
InternalDataSerializer holds on to an instance of this class and
delegates DSFID serialization to it.

InternalDataSerializer also effects registration of Geode's DSFID
classes with this serializer.  Membership "Services" handles
registration of its own DSFID classes with the service, as do other
sub-projects like geode-web.

HeapDataOutputStream has been used by most of our serialization code to
provide a DataOutput for our toData methods.  Over the years this class
has accumulated a lot of adornments for PDX serialization that aren't
appropriate for a geode-serialization sub-project.  Consequently I've
moved much of its code into a superclass, BufferDataOutputStream, that
provides most of its functionality w/o needing to reference other geode-
core classes.

Version.java has been repackaged in this PR, moving it into a
"serialization" package.  This affected some rolling-upgrade and
backward-compatibility tests that were referring to
Version.CURRENT_ORDINAL.  These have been modified to get the "current
version ordinal" from VersionManager.

Finally, InternalDataSerializer injects a serializer into the new
sub-project that provideds an API for handling other types of
serializable objects like PDX.  This serializer is available in the
DataSerializableFixedID toData/fromData context parameter and is used by
membership services when serializing Geode DistributionMessages.

-package org.apache.geode.internal;
+package org.apache.geode.internal.serialization;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.Instantiator;
-
- * Note that this class is for internal use only. Customer classes that want to do something
- * similar should implement a subclass of {@link DataSerializer} or {@link Instantiator}.
+ * Note that this class is for internal use only.
- * <li>Define a private static method in {@link DSFIDFactory} that returns an instance of the class
- * from step 2 usually be calling its zero-arg constructor and then calling fromData(in). See the
- * end of {@link DSFIDFactory} for examples.
- * <li>Add a case statement in {@link DSFIDFactory#create} for the constant from step 1 that calls
- * the method from step 3.
+ * <li>Add registration of your class to DSFIDFactory's registration method.
- * <code>DataSerializer</code>. Make sure you follow the javadocs for these methods to add support
+ * DataSerializable class. Make sure you follow the javadocs for these methods to add support
- * @see DataSerializer
- *
- * @since GemFire 5.7
-   * add a new toDataPre_GFE_X_X_X_X() method and add an entry for the current {@link Version} in
-   * the getSerializationVersions array of the implementing class. e.g. if msg format changed in
-   * version 80, create toDataPre_GFE_8_0_0_0, add Version.GFE_80 to the getSerializationVersions
-   * array and copy previous toData contents to this newly created toDataPre_GFE_X_X_X_X() method.
+   * add a new toDataPre_GFE_X_X_X_X() method and add an entry for the current {@link
+   * Version} in the getSerializationVersions array of the
+   * implementing class. e.g. if msg format changed in version 80, create toDataPre_GFE_8_0_0_0, add
+   * Version.GFE_80 to the getSerializationVersions array and copy previous toData contents to this
+   * newly created toDataPre_GFE_X_X_X_X() method.
-  void toData(DataOutput out) throws IOException;
+  void toData(DataOutput out, SerializationContext context) throws IOException;
-   * add a new fromDataPre_GFE_X_X_X_X() method and add an entry for the current {@link Version} in
-   * the getSerializationVersions array of the implementing class. e.g. if msg format changed in
-   * version 80, create fromDataPre_GFE_8_0_0_0, add Version.GFE_80 to the getSerializationVersions
-   * array and copy previous fromData contents to this newly created fromDataPre_GFE_X_X_X_X()
-   * method.
+   * add a new fromDataPre_GFE_X_X_X_X() method and add an entry for the current {@link
+   * Version} in the getSerializationVersions array of the
+   * implementing class. e.g. if msg format changed in version 80, create fromDataPre_GFE_8_0_0_0,
+   * add Version.GFE_80 to the getSerializationVersions array and copy previous fromData contents to
+   * this newly created fromDataPre_GFE_X_X_X_X() method.
-  void fromData(DataInput in) throws IOException, ClassNotFoundException;
+  void fromData(DataInput in, DeserializationContext context)
+      throws IOException, ClassNotFoundException;
