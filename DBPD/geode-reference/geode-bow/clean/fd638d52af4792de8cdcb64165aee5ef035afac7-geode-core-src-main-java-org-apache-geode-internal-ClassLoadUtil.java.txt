Revert "GEODE-2632: use immutable SecurityService impls to improve performance"

This reverts commit 5eca6f0393c1a05804a4c4b7f97203ee2ec226a2.

-  private static final Map<String, Class> PRIMITIVE_TYPES = primitiveTypes();
+  static Map primTypes;
+  static Map wrapperTypes;
-  private static Map primitiveTypes() {
-    Map<String, Class> ptMap = new HashMap<>();
-    ptMap.put(boolean.class.getName(), boolean.class);
-    ptMap.put(char.class.getName(), char.class);
-    ptMap.put(byte.class.getName(), byte.class);
-    ptMap.put(short.class.getName(), short.class);
-    ptMap.put(int.class.getName(), int.class);
-    ptMap.put(long.class.getName(), long.class);
-    ptMap.put(float.class.getName(), float.class);
-    ptMap.put(double.class.getName(), double.class);
-    ptMap.put(void.class.getName(), void.class);
-    return ptMap;
+  static {
+
+    if (primTypes == null) {
+      Map ptMap = new HashMap();
+      ptMap.put(boolean.class.getName(), boolean.class);
+      ptMap.put(char.class.getName(), char.class);
+      ptMap.put(byte.class.getName(), byte.class);
+      ptMap.put(short.class.getName(), short.class);
+      ptMap.put(int.class.getName(), int.class);
+      ptMap.put(long.class.getName(), long.class);
+      ptMap.put(float.class.getName(), float.class);
+      ptMap.put(double.class.getName(), double.class);
+      ptMap.put(void.class.getName(), void.class);
+      // Do this at the end to support multiple threads without synchronizing
+      primTypes = ptMap;
+    }
+
+    if (wrapperTypes == null) {
+      Map wtMap = new HashMap();
+      wtMap.put(boolean.class.getName(), Boolean.class);
+      wtMap.put(char.class.getName(), Character.class);
+      wtMap.put(byte.class.getName(), Byte.class);
+      wtMap.put(short.class.getName(), Short.class);
+      wtMap.put(int.class.getName(), Integer.class);
+      wtMap.put(long.class.getName(), Long.class);
+      wtMap.put(float.class.getName(), Float.class);
+      wtMap.put(double.class.getName(), Double.class);
+      // Do this at the end to support multiple threads without synchronizing
+      wrapperTypes = wtMap;
+    }
-   * Resolve the method from the given qualified name. Only zero argument methods are supported.
+   * Resolve the method from the given qualified name.
-  public static Method methodFromName(String fullyQualifiedMethodName)
+  public static Method methodFromName(String fullyQualifiedMethodName, Class[] parameterTypes)
-    Class<?> result = ClassPathLoader.getLatest().forName(className);
-    return result.getMethod(methodName);
+    Class result = ClassPathLoader.getLatest().forName(className);
+    return result.getMethod(methodName, parameterTypes);
+  }
+
+  /**
+   * Resolve the method from the given qualified name. Only zero argument methods are supported.
+   */
+  public static Method methodFromName(String fullyQualifiedMethodName)
+      throws ClassNotFoundException, NoSuchMethodException, SecurityException {
+    return methodFromName(fullyQualifiedMethodName, (Class[]) null);
-  private static Class checkForPrimType(String className) {
-    return PRIMITIVE_TYPES.get(className);
+  public static Class checkForPrimType(String className) {
+
+    return (Class) primTypes.get(className);
+  }
+
+  /**
+   * If the argument className is the name of a primitive type (not including "void"), return the
+   * wrapper class for that type (ex, Boolean.class). Otherwise, return null.
+   */
+  public static Class checkForWrapperType(String className) {
+
+    return (Class) wrapperTypes.get(className);
