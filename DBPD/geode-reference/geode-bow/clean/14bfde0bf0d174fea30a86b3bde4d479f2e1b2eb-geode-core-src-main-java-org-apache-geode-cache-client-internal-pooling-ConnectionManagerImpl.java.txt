Merge branch 'release/1.8.0'

-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.ThreadFactory;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingExecutors;
-  protected ScheduledThreadPoolExecutor loadConditioningProcessor;
+  protected ScheduledExecutorService loadConditioningProcessor;
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.ConnectionManagerImpl_ERROR_CLOSING_CONNECTION_0, pooledConn), e);
+        logger.warn(String.format("Error closing connection %s", pooledConn), e);
+    String name = "poolLoadConditioningMonitor-" + getPoolName();
-        new ScheduledThreadPoolExecutor(1/* why not 0? */, new ThreadFactory() {
-          public Thread newThread(final Runnable r) {
-            Thread result = new Thread(r, "poolLoadConditioningMonitor-" + getPoolName());
-            result.setDaemon(true);
-            return result;
-          }
-        });
-    this.loadConditioningProcessor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
+        LoggingExecutors.newScheduledThreadPool(name, 1/* why not 0? */, false);
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.ConnectionManagerImpl_TIMEOUT_WAITING_FOR_LOAD_CONDITIONING_TASKS_TO_COMPLETE));
+          logger.warn("Timeout waiting for load conditioning tasks to complete");
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.ConnectionManagerImpl_ERROR_STOPPING_LOADCONDITIONINGPROCESSOR), e);
+      logger.error("Error stopping loadConditioningProcessor", e);
-          LocalizedMessage.create(
-              LocalizedStrings.ConnectionManagerImpl_INTERRUPTED_STOPPING_LOADCONDITIONINGPROCESSOR),
+          "Interrupted stopping loadConditioningProcessor",
-      logInfo(LocalizedStrings.ConnectionManagerImpl_ERROR_PREFILLING_CONNECTIONS, t);
+      logInfo("Error prefilling connections", t);
-            .info(LocalizedStrings.ConnectionManagerImpl_UNABLE_TO_PREFILL_POOL_TO_MINIMUM_BECAUSE_0
-                .toLocalizedString(ex.getMessage()));
+            .info(String.format("Unable to prefill pool to minimum because: %s",
+                ex.getMessage()));
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.ConnectionManagerImpl_LOADCONDITIONINGTASK_0_ENCOUNTERED_EXCEPTION,
-            this), t);
+        logger.warn(String.format("LoadConditioningTask <%s> encountered exception",
+            this),
+            t);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.ConnectionManagerImpl_IDLEEXPIRECONNECTIONSTASK_0_ENCOUNTERED_EXCEPTION,
-            this), t);
+        logger.warn(String.format("IdleExpireConnectionsTask <%s> encountered exception",
+            this),
+            t);
-   * at a time so this guy should block until this connection replaces an existing one. Note that if
+   * at a time so this should block until this connection replaces an existing one. Note that if
-              LocalizedStrings.ConnectionManagerImpl_SECURITY_EXCEPTION_CONNECTING_TO_SERVER_0_1,
-              new Object[] {sl, e});
+              String.format("Security exception connecting to server '%s': %s",
+                  new Object[] {sl, e}));
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.ConnectionManagerImpl_SERVER_0_REFUSED_NEW_CONNECTION_1,
-              new Object[] {sl, srce}));
+          logger.warn("Server '{}' refused new connection: {}",
+              new Object[] {sl, srce});
-            logger.info(LocalizedMessage.create(
-                LocalizedStrings.ConnectionManagerImpl_ERROR_CLOSING_CONNECTION_TO_SERVER_0,
-                pc.getServer()), se);
+            logger.info("Error closing connection to server " +
+                pc.getServer(),
+                se);
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.ConnectionManagerImpl_ERROR_CLOSING_CONNECTION_TO_SERVER_0,
-                pc.getServer()), e);
+            logger.warn("Error closing connection to server " +
+                pc.getServer(),
+                e);
-            // note don't ignore idle guys because they are still connected
+            // note don't ignore idle connections because they are still connected
-            // we found a guy to whose lifetime we can extend
+            // we found a connection to whose lifetime we can extend
-            // break so we only do this to the oldest guy
+            // break so we only do this to the oldest connection
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.ConnectionManagerImpl_ERROR_EXPIRING_CONNECTION_0, connection));
+            logger.warn("Error expiring connection {}", connection);
-  private void logInfo(StringId message, Throwable t) {
+  private void logInfo(String message, Throwable t) {
-      securityLogWriter.info(LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {message.toLocalizedString(), t}, t);
+      securityLogWriter.info(String.format("%s : %s",
+          message, t), t);
-      logger.info(LocalizedMessage.create(LocalizedStrings.TWO_ARG_COLON,
-          new Object[] {message.toLocalizedString(), t}), t);
+      logger.info(String.format("%s : %s",
+          message, t), t);
