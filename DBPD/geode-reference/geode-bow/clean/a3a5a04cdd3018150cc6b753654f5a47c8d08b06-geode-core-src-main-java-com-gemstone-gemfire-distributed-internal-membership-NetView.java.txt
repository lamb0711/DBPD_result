Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/test/java/com/gemstone/gemfire/cache30/DistributedMulticastRegionDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+  // TODO this should be a List
+  private Map<InternalDistributedMember, Object> publicKeys = new ConcurrentHashMap<>();
+    this.publicKeys = new HashMap<>(other.publicKeys);
+  public Object getPublicKey(InternalDistributedMember mbr) {
+    return publicKeys.get(mbr);
+  }
+
+  public void setPublicKey(InternalDistributedMember mbr, Object key) {
+    publicKeys.put(mbr, key);
+  }
+
+  public void setPublicKeys(NetView otherView) {
+    this.publicKeys.putAll(otherView.publicKeys);
+  }
+
+
-  
+
+
+    // TODO expensive serialization
+    DataSerializer.writeHashMap(publicKeys, out);
+    publicKeys = DataSerializer.readHashMap(in);
