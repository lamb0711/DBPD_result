Merge branch 'release/1.8.0'

-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingExecutors;
-    super(LoggingThreadGroup.createThreadGroup("Event Processor for GatewaySender_" + id, logger),
-        "Event Processor for GatewaySender_" + id, sender, tMonitoring);
+    super("Event Processor for GatewaySender_" + id, sender, tMonitoring);
-    setDaemon(true);
-            LocalizedMessage.create(
-                LocalizedStrings.GatewayImpl_AN_INTERRUPTEDEXCEPTION_OCCURRED_THE_THREAD_WILL_EXIT),
+            "An InterruptedException occurred. The thread will exit.",
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GatewayImpl_ABOUT_TO_PROCESS_THE_MESSAGE_QUEUE_BUT_NOT_THE_PRIMARY));
+        logger.warn("About to process the message queue but not the primary.");
-        logger.info(LocalizedMessage
-            .create(LocalizedStrings.GatewayImpl_A_CANCELLATION_OCCURRED_STOPPING_THE_DISPATCHER));
+        logger.info("A cancellation occurred. Stopping the dispatcher.");
-      logger.fatal(LocalizedMessage.create(
-          LocalizedStrings.GatewayImpl_MESSAGE_DISPATCH_FAILED_DUE_TO_UNEXPECTED_EXCEPTION), e);
+      logger.fatal(
+          "Message dispatch failed due to unexpected exception..", e);
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.GatewayImpl_GATEWAY_FAILOVER_INITIATED_PROCESSING_0_UNPROCESSED_EVENTS,
-          this.unprocessedEvents.size()));
+      logger.info("Gateway Failover Initiated: Processing {} unprocessed events.",
+          this.unprocessedEvents.size());
-                    LocalizedMessage.create(
-                        LocalizedStrings.GatewayImpl_EVENT_DROPPED_DURING_FAILOVER_0, gatewayEvent),
+                    String.format("Event dropped during failover: %s", gatewayEvent),
-                    LocalizedMessage.create(
-                        LocalizedStrings.GatewayImpl_EVENT_DROPPED_DURING_FAILOVER_0, gatewayEvent),
+                    String.format("Event dropped during failover: %s", gatewayEvent),
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.GatewayImpl_0__MARKING__1__EVENTS_AS_POSSIBLE_DUPLICATES,
-          new Object[] {getSender(), Integer.valueOf(this.queue.size())}));
+      logger.info("{} : Marking  {}  events as possible duplicates",
+          getSender(), Integer.valueOf(this.queue.size()));
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.GatewayImpl_0_THE_EVENT_QUEUE_SIZE_HAS_REACHED_THE_THRESHOLD_1,
-          new Object[] {sender.getId(),
-              Integer.valueOf(AbstractGatewaySender.QUEUE_SIZE_THRESHOLD)}));
+      logger.warn("{}: The event queue has reached {} events. Processing will continue.",
+          sender.getId(),
+          Integer.valueOf(AbstractGatewaySender.QUEUE_SIZE_THRESHOLD));
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.GatewayImpl_0__WAITING_FOR_FAILOVER_COMPLETION, this));
+      logger.info("{} : Waiting for failover completion", this);
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GatewayImpl_0_DID_NOT_WAIT_FOR_FAILOVER_COMPLETION_DUE_TO_INTERRUPTION,
-            this));
+        logger.info("{}: did not wait for failover completion due to interruption.",
+            this);
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.GatewayImpl_EVENT_FAILED_TO_BE_INITIALIZED_0, gatewayEvent), e);
+          logger.warn(
+              String.format("Event failed to be initialized: %s", gatewayEvent), e);
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.GatewayImpl_0_THE_UNPROCESSED_EVENTS_MAP_ALREADY_CONTAINED_AN_EVENT_FROM_THE_HUB_1_SO_IGNORING_NEW_EVENT_2,
-                new Object[] {sender.getId(), v, gatewayEvent}));
+            logger.warn(
+                "{}: The secondary map already contained an event from hub {} so ignoring new event {}.",
+                sender.getId(), v, gatewayEvent);
-    // Create the ThreadGroups
-    final ThreadGroup loggerGroup =
-        LoggingThreadGroup.createThreadGroup("Gateway Listener Group", logger);
-
-    // Create the Executor
-    ThreadFactory tf = new ThreadFactory() {
-      public Thread newThread(Runnable command) {
-        Thread thread = new Thread(loggerGroup, command, "Queued Gateway Listener Thread");
-        thread.setDaemon(true);
-        return thread;
-      }
-    };
-    LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<Runnable>();
-    this.executor = new ThreadPoolExecutor(1, 1/* max unused */, 120, TimeUnit.SECONDS, q, tf);
+    this.executor =
+        LoggingExecutors.newFixedThreadPoolWithTimeout("Queued Gateway Listener Thread", 1, 120);
