GEODE-7193: add entry-idle-time and entry-time-to-live to region attributes

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

+import java.util.ArrayList;
+import java.util.List;
+import org.apache.commons.lang3.StringUtils;
+
+
+      RegionAttributesType.ExpirationAttributesType entryIdleTime =
+          regionAttributes.getEntryIdleTime();
+      List<Region.Expiration> expirations = new ArrayList<>();
+      if (entryIdleTime != null) {
+        expirations.add(convertFrom(Region.ExpirationType.ENTRY_IDLE_TIME, entryIdleTime));
+      }
+      RegionAttributesType.ExpirationAttributesType entryTimeToLive =
+          regionAttributes.getEntryTimeToLive();
+      if (entryTimeToLive != null) {
+        expirations.add(convertFrom(Region.ExpirationType.ENTRY_TIME_TO_LIVE, entryTimeToLive));
+      }
+
+      RegionAttributesType.ExpirationAttributesType regionIdleTime =
+          regionAttributes.getRegionIdleTime();
+      if (regionIdleTime != null) {
+        expirations.add(convertFrom(Region.ExpirationType.UNSUPPORTED, regionIdleTime));
+      }
+
+      RegionAttributesType.ExpirationAttributesType regionTimeToLive =
+          regionAttributes.getRegionTimeToLive();
+      if (regionTimeToLive != null) {
+        expirations.add(convertFrom(Region.ExpirationType.UNSUPPORTED, regionTimeToLive));
+      }
+
+      if (!expirations.isEmpty()) {
+        region.setExpirations(expirations);
+      }
+    attributesType.setStatisticsEnabled(true);
+
+    List<Region.Expiration> expirations = configObject.getExpirations();
+    if (expirations != null) {
+      for (Region.Expiration expiration : expirations) {
+        switch (expiration.getType()) {
+          case ENTRY_IDLE_TIME:
+            attributesType.setEntryIdleTime(convertFrom(expiration));
+            break;
+          case ENTRY_TIME_TO_LIVE:
+            attributesType.setEntryTimeToLive(convertFrom(expiration));
+            break;
+        }
+      }
+    }
+  RegionAttributesType.ExpirationAttributesType convertFrom(Region.Expiration expiration) {
+    RegionAttributesType.ExpirationAttributesType xmlExpiration =
+        new RegionAttributesType.ExpirationAttributesType();
+    xmlExpiration.setTimeout(expiration.getTimeInSeconds().toString());
+    // when action is null from the management api, the default action is DESTROY
+    if (expiration.getAction() == null) {
+      xmlExpiration.setAction(Region.ExpirationAction.DESTROY.name().toLowerCase());
+    } else {
+      xmlExpiration.setAction(expiration.getAction().name().toLowerCase());
+    }
+    return xmlExpiration;
+  }
+
+  Region.Expiration convertFrom(Region.ExpirationType type,
+      RegionAttributesType.ExpirationAttributesType xmlExpiration) {
+    Region.Expiration expiration = new Region.Expiration();
+    expiration.setType(type);
+    if (StringUtils.isBlank(xmlExpiration.getTimeout())) {
+      expiration.setTimeInSeconds(0);
+    } else {
+      expiration.setTimeInSeconds(Integer.parseInt(xmlExpiration.getTimeout()));
+    }
+
+    // in the xml, the default expiration action is INVALIDATE
+    if (StringUtils.isBlank(xmlExpiration.getAction())) {
+      expiration.setAction(Region.ExpirationAction.INVALIDATE);
+    } else {
+      try {
+        expiration.setAction(
+            Region.ExpirationAction.valueOf(xmlExpiration.getAction().toUpperCase()));
+      } catch (Exception e) {
+        expiration.setAction(Region.ExpirationAction.UNSUPPORTED);
+      }
+    }
+    return expiration;
+  }
+
