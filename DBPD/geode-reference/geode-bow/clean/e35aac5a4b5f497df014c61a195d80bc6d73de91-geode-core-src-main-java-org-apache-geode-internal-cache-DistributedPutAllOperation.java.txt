Merge branch 'release/1.5.0'

+import org.apache.geode.internal.cache.tx.RemotePutAllMessage;
-      if (entry.versionTag != null && region.concurrencyChecksEnabled) {
+      if (entry.versionTag != null && region.getConcurrencyChecksEnabled()) {
-      if (entry.getValue() == null
+      Object entryValue = entry.getValue(region.getCache());
+      if (entryValue == null
-      ev.setNewValue(entry.getValue());
+      ev.setNewValue(entryValue);
-    final Object value;
+    private Object value;
-          this.value = CachedDeserializableFactory.create(bb);
+          this.value = new FutureCachedDeserializable(bb);
-      sb.append("(").append(getKey()).append(",").append(getValue()).append(",")
+      sb.append("(").append(getKey()).append(",").append(this.value).append(",")
-    public Object getValue() {
-      return this.value;
+    public Object getValue(InternalCache cache) {
+      Object result = this.value;
+      if (result instanceof FutureCachedDeserializable) {
+        FutureCachedDeserializable future = (FutureCachedDeserializable) result;
+        result = future.create(cache);
+        this.value = result;
+      }
+      return result;
-    return super.shouldAck() || getRegion().concurrencyChecksEnabled;
+    return super.shouldAck() || getRegion().getConcurrencyChecksEnabled();
-        if (entry.getValue() == null && rgn.getDataPolicy() == DataPolicy.NORMAL) {
+        Object entryValue = entry.getValue(rgn.getCache());
+        if (entryValue == null && rgn.getDataPolicy() == DataPolicy.NORMAL) {
-        ev.setNewValue(entry.getValue());
+        ev.setNewValue(entryValue);
