GEODE-5041: Renaming authorization to security in new protocol

Since we are now doing post processing as well as authorization in the
security related classes, renaming them to be Security*

-package org.apache.geode.internal.protocol.protobuf.v1.authentication;
+package org.apache.geode.internal.protocol.protobuf.security;
-public class AuthorizingCacheImpl implements AuthorizingCache {
+public class SecureCacheImpl implements SecureCache {
-  protected final Authorizer authorizer;
-  private final AuthorizingFunctionService functionService;
+  protected final Security security;
+  private final SecureFunctionService functionService;
-  public AuthorizingCacheImpl(InternalCache cache, Authorizer authorizer) {
+  public SecureCacheImpl(InternalCache cache, Security security) {
-    this.authorizer = authorizer;
-    this.functionService = new AuthorizingFunctionServiceImpl(cache, authorizer);
+    this.security = security;
+    this.functionService = new SecureFunctionServiceImpl(cache, security);
-          authorizer.authorize(DATA, READ, regionName, key);
+          security.authorize(DATA, READ, regionName, key);
-        value = (V) authorizer.postProcess(regionName, key, value);
+        value = (V) security.postProcess(regionName, key, value);
-    authorizer.authorize(DATA, READ, regionName, key);
+    security.authorize(DATA, READ, regionName, key);
-    return (V) authorizer.postProcess(regionName, key, value);
+    return (V) security.postProcess(regionName, key, value);
-    authorizer.authorize(DATA, WRITE, regionName, key);
+    security.authorize(DATA, WRITE, regionName, key);
-          authorizer.authorize(DATA, WRITE, regionName, key);
+          security.authorize(DATA, WRITE, regionName, key);
-    authorizer.authorize(DATA, WRITE, regionName, key);
+    security.authorize(DATA, WRITE, regionName, key);
-    return (V) authorizer.postProcess(regionName, key, oldValue);
+    return (V) security.postProcess(regionName, key, oldValue);
-    authorizer.authorize(DATA, READ, ALL, ALL);
+    security.authorize(DATA, READ, ALL, ALL);
-    authorizer.authorize(DATA, READ, regionName, ALL);
+    security.authorize(DATA, READ, regionName, ALL);
-    authorizer.authorize(DATA, READ, regionName, ALL);
+    security.authorize(DATA, READ, regionName, ALL);
-  public AuthorizingFunctionService getFunctionService() {
+  public SecureFunctionService getFunctionService() {
-    authorizer.authorize(DATA, WRITE, regionName, ALL);
+    security.authorize(DATA, WRITE, regionName, ALL);
-    authorizer.authorize(DATA, WRITE, regionName, key);
+    security.authorize(DATA, WRITE, regionName, key);
-    return (V) authorizer.postProcess(regionName, key, oldValue);
+    return (V) security.postProcess(regionName, key, oldValue);
-      authorizer.authorize(DATA, READ, regionName, ALL);
+      security.authorize(DATA, READ, regionName, ALL);
-    if (authorizer.needsPostProcessing()) {
+    if (security.needsPostProcessing()) {
-      return authorizer.postProcess(null, null, value);
+      return security.postProcess(null, null, value);
-          .map(element -> authorizer.postProcess(null, null, element)).collect(Collectors.toList());
+          .map(element -> security.postProcess(null, null, element)).collect(Collectors.toList());
-        .map(element -> authorizer.postProcess(null, null, element)).collect(Collectors.toList());
+        .map(element -> security.postProcess(null, null, element)).collect(Collectors.toList());
-      authorizer.authorize(resource, operation, regionName, ALL);
+      security.authorize(resource, operation, regionName, ALL);
