GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.InternalRegion;
-  public NonLocalRegionEntry(RegionEntry re, LocalRegion br, boolean allowTombstones) {
+  public NonLocalRegionEntry(RegionEntry re, InternalRegion br, boolean allowTombstones) {
-    if (allowTombstones && re.isTombstone()) { // client get() operations need to see tombstone
-                                               // values
+    if (allowTombstones && re.isTombstone()) {
+      // client get() operations need to see tombstone values
-  public NonLocalRegionEntry(LocalRegion br, Object key, Object value) {
+  public NonLocalRegionEntry(InternalRegion br, Object key, Object value) {
-    // this.lastModified = re.getLastModified();
-    // this.isRemoved = re.isRemoved();
-
-
-  public NonLocalRegionEntry(Region.Entry re, LocalRegion br) {
+  public NonLocalRegionEntry(Region.Entry re, InternalRegion br) {
-  public void makeTombstone(LocalRegion r, VersionTag isOperationRemote) {
+  @Override
+  public void makeTombstone(InternalRegion region, VersionTag version) {
+  @Override
+  @Override
+  @Override
+  @Override
-  public void processVersionTag(EntryEvent ev) {
+  @Override
+  public void processVersionTag(EntryEvent event) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  public boolean fillInValue(LocalRegion r, Entry entry, ByteArrayDataInput in, DM mgr,
-      final Version version) {
+  @Override
+  public boolean fillInValue(InternalRegion region, Entry entry, ByteArrayDataInput in,
+      DM distributionManager, final Version version) {
-  public boolean isOverflowedToDisk(LocalRegion r, DistributedRegion.DiskPosition dp) {
+  @Override
+  public boolean isOverflowedToDisk(InternalRegion region,
+      DistributedRegion.DiskPosition diskPosition) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  public void txDidDestroy(long currTime) {
+  @Override
+  public void txDidDestroy(long currentTime) {
+  @Override
-  public void removePhase1(LocalRegion r, boolean isClear) {
+  @Override
+  public void removePhase1(InternalRegion region, boolean clear) {
+  @Override
+  @Override
-  public Object _getValue() {
+  public Object getValue() {
-  public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
+  public Object getValueRetain(RegionEntryContext context, boolean decompress) {
+  @Override
-  public Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException {
+  @Override
+  public Object getValueOnDisk(InternalRegion region) throws EntryNotFoundException {
-  public boolean initialImagePut(LocalRegion region, long lastModified1, Object newValue,
-      boolean wasRecovered, boolean versionTagAccepted) {
+  @Override
+  public boolean initialImagePut(InternalRegion region, long lastModified, Object newValue,
+      boolean wasRecovered, boolean acceptedVersionTag) {
-  public boolean initialImageInit(LocalRegion region, long lastModified1, Object newValue,
-      boolean create, boolean wasRecovered, boolean versionTagAccepted) {
+  @Override
+  public boolean initialImageInit(InternalRegion region, long lastModified, Object newValue,
+      boolean create, boolean wasRecovered, boolean acceptedVersionTag) {
-  public boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode,
+  @Override
+  public boolean destroy(InternalRegion region, EntryEventImpl event, boolean inTokenMode,
+  @Override
-  public void setValueResultOfSearch(boolean v) {
+  @Override
+  public void setValueResultOfSearch(boolean value) {
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.internal.cache.RegionEntry#getValueOnDiskOrBuffer(org.apache.geode.internal.
-   * cache.LocalRegion)
-   */
-  public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
+  @Override
+  public Object getValueOnDiskOrBuffer(InternalRegion region) throws EntryNotFoundException {
-  public Object getSerializedValueOnDisk(LocalRegion localRegion) {
+  @Override
+  public Object getSerializedValueOnDisk(InternalRegion region) {
+  @Override
-  public Object getValueInVMOrDiskWithoutFaultIn(LocalRegion owner) {
+  @Override
+  public Object getValueInVMOrDiskWithoutFaultIn(InternalRegion region) {
-  public Object getValueOffHeapOrDiskWithoutFaultIn(LocalRegion owner) {
+  public Object getValueOffHeapOrDiskWithoutFaultIn(InternalRegion region) {
-  // VersionStamp methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.internal.cache.RegionEntry#generateVersionTag(org.apache.geode.distributed.
-   * DistributedMember, boolean)
-   */
-  public VersionTag generateVersionTag(VersionSource member, boolean withDelta, LocalRegion region,
-      EntryEventImpl event) {
+  @Override
+  public VersionTag generateVersionTag(VersionSource member, boolean withDelta,
+      InternalRegion region, EntryEventImpl event) {
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.internal.cache.RegionEntry#concurrencyCheck(org.apache.geode.internal.cache.
-   * LocalRegion, org.apache.geode.internal.cache.versions.VersionTag,
-   * org.apache.geode.distributed.internal.membership.InternalDistributedMember,
-   * org.apache.geode.distributed.internal.membership.InternalDistributedMember)
-   */
-  public void processVersionTag(LocalRegion r, VersionTag tag, InternalDistributedMember thisVM,
+  public void processVersionTag(InternalRegion r, VersionTag tag, InternalDistributedMember thisVM,
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#getEntryVersion()
-   */
+  @Override
+  @Override
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#getMemberID()
-   */
+  @Override
+  @Override
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#setEntryVersion(int)
-   */
+  @Override
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.internal.cache.versions.VersionStamp#setMemberID(org.apache.geode.distributed.
-   * DistributedMember)
-   */
+  @Override
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.internal.cache.versions.VersionStamp#setPreviousMemberID(org.apache.geode.
-   * distributed.DistributedMember)
-   */
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#asVersionTag()
-   */
+  @Override
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#processVersionTag(org.apache.geode.
-   * internal.cache.LocalRegion, org.apache.geode.internal.cache.versions.VersionTag, boolean,
-   * org.apache.geode.distributed.internal.membership.InternalDistributedMember,
-   * org.apache.geode.distributed.internal.membership.InternalDistributedMember)
-   */
-  public void processVersionTag(LocalRegion r, VersionTag tag, boolean isTombstoneFromGII,
-      boolean hasDelta, VersionSource thisVM, InternalDistributedMember sender,
-      boolean checkForConflicts) {
+  @Override
+  public void processVersionTag(InternalRegion region, VersionTag tag, boolean isTombstoneFromGII,
+      boolean hasDelta, VersionSource versionSource, InternalDistributedMember sender,
+      boolean checkConflicts) {
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#getVersionTimeStamp()
-   */
+  @Override
+  @Override
-  public void setInUseByTransaction(boolean v) {}
+  public void setInUseByTransaction(boolean inUseByTransaction) {
+    // nothing
+  }
-  public void incRefCount() {}
+  public void incRefCount() {
+    // nothing
+  }
-  public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {}
+  public void decRefCount(NewLRUClockHand lruList, InternalRegion region) {
+    // nothing
+  }
-  public void resetRefCount(NewLRUClockHand lruList) {}
+  public void resetRefCount(NewLRUClockHand lruList) {
+    // nothing
+  }
-  public Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate) {
+  public Object prepareValueForCache(RegionEntryContext context, Object value,
+      boolean isEntryUpdate) {
-  public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event,
+  public Object prepareValueForCache(RegionEntryContext context, Object value, EntryEventImpl event,
