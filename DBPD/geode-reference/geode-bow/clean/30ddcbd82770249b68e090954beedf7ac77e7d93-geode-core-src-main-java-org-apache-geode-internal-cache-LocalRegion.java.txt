GEODE-6588: Cleanup static analyzer warnings and generics (#3646)


-import org.apache.geode.internal.cache.wan.GatewaySenderEventCallbackArgument;
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        theCallbackArg = new GatewaySenderEventCallbackArgument(theCallbackArg);
-      }
-    }
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        theCallbackArg = new GatewaySenderEventCallbackArgument(theCallbackArg);
-      }
-    }
-
-    Object theCallbackArg = callbackArg;
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        theCallbackArg = new GatewaySenderEventCallbackArgument(theCallbackArg);
-      }
-    }
-
-            theCallbackArg, false, memberId.getDistributedMember(), true, clientEvent.getEventId());
+            callbackArg, false, memberId.getDistributedMember(), true, clientEvent.getEventId());
-    Object theCallbackArg = callbackArg;
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        theCallbackArg = new GatewaySenderEventCallbackArgument(theCallbackArg);
-      }
-    }
-
-            theCallbackArg, false, memberId.getDistributedMember(), true, clientEvent.getEventId());
+            callbackArg, false, memberId.getDistributedMember(), true, clientEvent.getEventId());
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-      }
-    }
-
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-      }
-    }
-
-    if (isGatewaySenderEnabled()) {
-      callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-    }
-    if (isGatewaySenderEnabled()) {
-      callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-    }
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-      }
-    }
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-      }
-    }
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-      }
-    }
-    if (fromClient) {
-      // If this region is also wan-enabled, then wrap that callback arg in a
-      // GatewayEventCallbackArgument to store the event id.
-      if (isGatewaySenderEnabled()) {
-        callbackArg = new GatewaySenderEventCallbackArgument(callbackArg);
-      }
-    }
-
