GEODE-7803: provide undeprecated internal region create (#4722)

You can now use InternalRegionFactory to create a region configured with InternalRegionArguments. No need to use the deprecated AttributesFactory.
InternalRegionFactory used to be named RegionFactoryImpl.

-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.DataPolicy;
-import org.apache.geode.cache.Scope;
+import org.apache.geode.cache.RegionShortcut;
-import org.apache.geode.internal.cache.InternalRegionArguments;
+import org.apache.geode.internal.cache.InternalRegionFactory;
-      AttributesFactory<String, Configuration> regionAttrsFactory = new AttributesFactory<>();
-      regionAttrsFactory.setDataPolicy(DataPolicy.PERSISTENT_REPLICATE);
-      regionAttrsFactory.setCacheListener(new ConfigurationChangeListener(this, cache));
-      regionAttrsFactory.setDiskStoreName(CLUSTER_CONFIG_DISK_STORE_NAME);
-      regionAttrsFactory.setScope(Scope.DISTRIBUTED_ACK);
-      InternalRegionArguments internalArgs = new InternalRegionArguments();
-      internalArgs.setIsUsedForMetaRegion(true);
-      internalArgs.setMetaRegionWithTransactions(false);
-
-      return cache.createVMRegion(CONFIG_REGION_NAME, regionAttrsFactory.create(),
-          internalArgs);
+      InternalRegionFactory<String, Configuration> regionFactory =
+          cache.createInternalRegionFactory(RegionShortcut.REPLICATE_PERSISTENT);
+      regionFactory.addCacheListener(new ConfigurationChangeListener(this, cache));
+      regionFactory.setDiskStoreName(CLUSTER_CONFIG_DISK_STORE_NAME);
+      regionFactory.setIsUsedForMetaRegion(true).setMetaRegionWithTransactions(false);
+      return regionFactory.create(CONFIG_REGION_NAME);
