GEODE-6322: refactor createRegionCommand to use RegionConfig only (#3156)

* get rid of usages of xxxArgs and RegionConfigFactory
* the resulting cluster configuration xml for region does not have excessive default values

-import java.util.Arrays;
-import java.util.List;
-import java.util.stream.Collectors;
-
-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheListener;
-import org.apache.geode.internal.cache.AbstractRegion;
-import org.apache.geode.internal.cache.execute.InternalFunction;
+import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.management.internal.cli.domain.ClassName;
+import org.apache.geode.management.cli.CliFunction;
+import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-public class FetchRegionAttributesFunction implements InternalFunction {
+public class FetchRegionAttributesFunction extends CliFunction<String> {
+  /**
+   * this returns the region xml definition back to the caller
+   */
-  public void execute(FunctionContext context) {
-    try {
-      Cache cache = context.getCache();
-      String regionPath = (String) context.getArguments();
-      if (regionPath == null) {
-        throw new IllegalArgumentException(
-            CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_REGION_PATH);
-      }
-      RegionAttributesWrapper regionAttributesWrapper = getRegionAttributes(cache, regionPath);
-      context.getResultSender().lastResult(regionAttributesWrapper);
-    } catch (IllegalArgumentException e) {
-      if (logger.isDebugEnabled()) {
-        logger.debug(e.getMessage(), e);
-      }
-      context.getResultSender().lastResult(e);
+  public CliFunctionResult executeFunction(FunctionContext<String> context) throws Exception {
+    String regionPath = context.getArguments();
+    if (regionPath == null) {
+      throw new IllegalArgumentException(
+          CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_REGION_PATH);
-  }
-
-  @SuppressWarnings("deprecation")
-  public static RegionAttributesWrapper getRegionAttributes(Cache cache, String regionPath) {
-    AbstractRegion foundRegion = (AbstractRegion) cache.getRegion(regionPath);
-
-    if (foundRegion == null) {
-      throw new IllegalArgumentException(CliStrings.format(
-          CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_REGION_PATH_FOR_0_REGIONPATH_1_NOT_FOUND,
-          CliStrings.CREATE_REGION__USEATTRIBUTESFROM, regionPath));
-    }
-
-    AttributesFactory afactory = new AttributesFactory(foundRegion.getAttributes());
-    RegionAttributesWrapper result = new RegionAttributesWrapper();
-
-    CacheListener[] cacheListeners = foundRegion.getCacheListeners();
-    List existingCacheListeners = Arrays.stream(cacheListeners)
-        .map((c) -> new ClassName(c.getClass().getName())).collect(Collectors.toList());
-
-    result.setCacheListenerClasses(existingCacheListeners);
-    afactory.initCacheListeners(null);
-
-    if (foundRegion.getCacheLoader() != null) {
-      result
-          .setCacheLoaderClass(new ClassName<>(foundRegion.getCacheLoader().getClass().getName()));
-      afactory.setCacheLoader(null);
-    }
-
-    if (foundRegion.getCacheWriter() != null) {
-      result
-          .setCacheWriterClass(new ClassName<>(foundRegion.getCacheWriter().getClass().getName()));
-      afactory.setCacheWriter(null);
-    }
-
-    if (foundRegion.getCompressor() != null) {
-      result.setCompressorClass(foundRegion.getCompressor().getClass().getName());
-      afactory.setCompressor(null);
-    }
-
-    if (foundRegion.getKeyConstraint() != null) {
-      result.setKeyConstraintClass(foundRegion.getKeyConstraint().getName());
-      afactory.setKeyConstraint(null);
-    }
-
-    if (foundRegion.getValueConstraint() != null) {
-      result.setValueConstraintClass(foundRegion.getValueConstraint().getName());
-      afactory.setValueConstraint(null);
-    }
-
-    result.setRegionAttributes(afactory.create());
-    return result;
+    XmlEntity xmlEntity = new XmlEntity(CacheXml.REGION, "name", regionPath.substring(1));
+    return new CliFunctionResult(context.getMemberName(), xmlEntity.getXmlDefinition());
