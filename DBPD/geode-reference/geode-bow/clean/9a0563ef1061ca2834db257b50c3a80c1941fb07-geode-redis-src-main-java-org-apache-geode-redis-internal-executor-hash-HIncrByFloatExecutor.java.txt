GEODE-8170: change all hash and set commands to use function (#5125)

All hash and set commands now use the new function+delta data model.
This allowed the synchronized keyword to be removed from RedisHash and RedisSet.

-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-  private final String ERROR_FIELD_NOT_USABLE =
+  private static final String ERROR_FIELD_NOT_USABLE =
-  private final String ERROR_INCREMENT_NOT_USABLE =
+  private static final String ERROR_INCREMENT_NOT_USABLE =
-  private final int FIELD_INDEX = 2;
-
-  private final int INCREMENT_INDEX = 3;
+  private static final int INCREMENT_INDEX = FIELD_INDEX + 1;
+    byte[] byteField = commandElems.get(FIELD_INDEX);
+    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-    double value;
+    RedisHashCommands redisHashCommands = createRedisHashCommands(context);
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      RedisHash redisHash = getModifiableRedisHash(context, key);
-
-      byte[] byteField = commandElems.get(FIELD_INDEX);
-      ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-      /*
-       * Put increment as value if field doesn't exist
-       */
-
-      ByteArrayWrapper oldValue = redisHash.get(field);
-
-      if (oldValue == null) {
-        ByteArrayWrapper newValue = new ByteArrayWrapper(incrArray);
-        redisHash.put(field, newValue);
-
-        saveRedishHash(redisHash, context, key);
-
-        respondBulkStrings(command, context, increment);
-        return;
-      }
-
-      /*
-       * If the field did exist then increment the field
-       */
-      String valueS = oldValue.toString();
-      if (valueS.contains(" ")) {
-        command.setResponse(
-            Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
-        return;
-      }
-
-      try {
-        value = Coder.stringToDouble(valueS);
-      } catch (NumberFormatException e) {
-        command.setResponse(
-            Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
-        return;
-      }
-
-      value += increment;
-      redisHash.put(field, new ByteArrayWrapper(Coder.doubleToBytes(value)));
-
-      saveRedishHash(redisHash, context, key);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
+    try {
+      double value = redisHashCommands.hincrbyfloat(key, field, increment);
+      respondBulkStrings(command, context, value);
+    } catch (NumberFormatException e) {
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
-      return;
+          Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
-    respondBulkStrings(command, context, value);
