GEODE-6678: Remove singleton cache reference from ClusterManagementServiceProvider (#3496)


-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.SSLContext;
-import org.apache.http.auth.AuthScope;
-import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.CredentialsProvider;
-import org.apache.http.impl.client.BasicCredentialsProvider;
-import org.apache.http.impl.client.HttpClientBuilder;
-import org.springframework.http.client.ClientHttpRequestFactory;
-import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
-import org.springframework.web.client.ResponseErrorHandler;
-import org.springframework.web.util.DefaultUriTemplateHandler;
+import org.apache.geode.management.api.ClusterManagementServiceConfig;
-  private static final ResponseErrorHandler DEFAULT_ERROR_HANDLER =
-      new RestTemplateResponseErrorHandler();
-
-  private final RestTemplate restTemplate;
+  private final ClusterManagementServiceConfig serviceConfig;
-  private ClientClusterManagementService() {
-    restTemplate = new RestTemplate();
-    restTemplate.setErrorHandler(DEFAULT_ERROR_HANDLER);
-  }
-
-  public ClientClusterManagementService(String host, int port) {
-    this(host, port, null, null, null, null);
-  }
-
-  public ClientClusterManagementService(String host, int port, SSLContext sslContext,
-      HostnameVerifier hostnameVerifier, String username, String password) {
-    this();
-
-    DefaultUriTemplateHandler templateHandler = new DefaultUriTemplateHandler();
-    String schema = (sslContext == null) ? "http" : "https";
-    templateHandler.setBaseUrl(schema + "://" + host + ":" + port + "/geode-management");
-    restTemplate.setUriTemplateHandler(templateHandler);
-
-    // HttpComponentsClientHttpRequestFactory allows use to preconfigure httpClient for
-    // authentication and ssl context
-    HttpComponentsClientHttpRequestFactory requestFactory =
-        new HttpComponentsClientHttpRequestFactory();
-
-    HttpClientBuilder clientBuilder = HttpClientBuilder.create();
-    // configures the clientBuilder
-    if (username != null) {
-      CredentialsProvider credsProvider = new BasicCredentialsProvider();
-      credsProvider.setCredentials(new AuthScope(host, port),
-          new UsernamePasswordCredentials(username, password));
-      clientBuilder.setDefaultCredentialsProvider(credsProvider);
-    }
-
-    clientBuilder.setSSLContext(sslContext);
-    clientBuilder.setSSLHostnameVerifier(hostnameVerifier);
-
-    requestFactory.setHttpClient(clientBuilder.build());
-    restTemplate.setRequestFactory(requestFactory);
-  }
-
-  public ClientClusterManagementService(ClientHttpRequestFactory requestFactory) {
-    this();
-    this.restTemplate.setRequestFactory(requestFactory);
+  public ClientClusterManagementService(ClusterManagementServiceConfig serviceConfig) {
+    this.serviceConfig = serviceConfig;
-    return restTemplate
+    return serviceConfig.getRestTemplate()
-    return restTemplate
+    return serviceConfig.getRestTemplate()
-    return restTemplate;
+    return serviceConfig.getRestTemplate();
-    return restTemplate.getForEntity(VERSION + "/ping", String.class)
+    return serviceConfig.getRestTemplate().getForEntity(VERSION + "/ping", String.class)
