Merge branch 'release/1.5.0'

+import java.util.Optional;
+import org.apache.geode.cache.RegionShortcut;
-import org.apache.geode.internal.lang.ObjectUtils;
+import org.apache.geode.management.internal.cli.i18n.CliStrings;
+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;
+
+  private static final MultipartFile[] DEFAULT_MULTIPART_FILE = null;
+
+  private static final String DEFAULT_INDEX_TYPE = "range";
+
+  @RequestMapping(method = RequestMethod.POST, value = "/indexes")
+  public ResponseEntity<?> createIndex(@RequestParam(CliStrings.CREATE_INDEX__NAME) String name,
+      @RequestParam(CliStrings.CREATE_INDEX__EXPRESSION) String expression,
+      @RequestParam(CliStrings.CREATE_INDEX__REGION) String region,
+      @RequestParam(value = CliStrings.CREATE_INDEX__TYPE,
+          defaultValue = DEFAULT_INDEX_TYPE) String type)
+      throws IOException {
+
+    CommandStringBuilder command = new CommandStringBuilder(CliStrings.CREATE_INDEX);
+
+    command.addOption(CliStrings.CREATE_INDEX__NAME, name);
+    command.addOption(CliStrings.CREATE_INDEX__EXPRESSION, expression);
+    command.addOption(CliStrings.CREATE_INDEX__REGION, region);
+    command.addOption(CliStrings.CREATE_INDEX__TYPE, type);
+
+    return command(command.toString(), DEFAULT_MULTIPART_FILE);
+  }
+
+  @RequestMapping(method = RequestMethod.POST, value = "/regions")
+  public ResponseEntity<?> createRegion(
+      @RequestParam(CliStrings.CREATE_REGION__REGION) String namePath,
+      @RequestParam(value = CliStrings.CREATE_REGION__SKIPIFEXISTS,
+          defaultValue = "false") Boolean skipIfExists,
+      @RequestParam(value = CliStrings.CREATE_REGION__REGIONSHORTCUT,
+          defaultValue = "PARTITION") RegionShortcut type)
+      throws IOException {
+
+    CommandStringBuilder command = new CommandStringBuilder(CliStrings.CREATE_REGION);
+
+    command.addOption(CliStrings.CREATE_REGION__REGION, namePath);
+    command.addOption(CliStrings.CREATE_REGION__REGIONSHORTCUT, type.name());
+
+    Optional.ofNullable(skipIfExists)
+        .ifPresent(it -> command.addOption(CliStrings.CREATE_REGION__SKIPIFEXISTS, it.toString()));
+
+    return command(command.toString(), DEFAULT_MULTIPART_FILE);
+  }
+
-    parameters = (parameters != null ? parameters : ObjectUtils.EMPTY_OBJECT_ARRAY);
+    parameters = (parameters != null ? parameters : ArrayUtils.EMPTY_OBJECT_ARRAY);
+  @RequestMapping(method = RequestMethod.GET, value = "/version/release")
+  @ResponseBody
+  public String releaseVersion() {
+    return GemFireVersion.getGemFireVersion();
+  }
+
