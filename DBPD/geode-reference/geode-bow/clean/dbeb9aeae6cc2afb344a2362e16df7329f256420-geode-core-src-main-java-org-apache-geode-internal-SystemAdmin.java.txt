Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Finds the gemfire jar path element in the given classpath
-   * and returns the directory that jar is in.
+   * Finds the gemfire jar path element in the given classpath and returns the directory that jar is
+   * in.
-    if (jarURL == null) return null;
+    if (jarURL == null)
+      return null;
-    // Decode URL to get rid of escaped characters.  See bug 32465.
+    // Decode URL to get rid of escaped characters. See bug 32465.
-    if(f.isDirectory()) {
+    if (f.isDirectory()) {
-  
+
-  
-  public void locatorStart(
-    File directory, 
-    String portOption, 
-    String addressOption, 
-    String gemfirePropertiesFileOption,
-    boolean peerOption, 
-    boolean serverOption,
-    String hostnameForClientsOption
-    )
-    throws InterruptedException
-  {
-//    if (Thread.interrupted()) throw new InterruptedException(); not necessary checked in locatorStart
-    locatorStart( directory, portOption, addressOption, gemfirePropertiesFileOption, null, null, peerOption, serverOption, hostnameForClientsOption );
+
+  public void locatorStart(File directory, String portOption, String addressOption,
+      String gemfirePropertiesFileOption, boolean peerOption, boolean serverOption,
+      String hostnameForClientsOption) throws InterruptedException {
+    // if (Thread.interrupted()) throw new InterruptedException(); not necessary checked in
+    // locatorStart
+    locatorStart(directory, portOption, addressOption, gemfirePropertiesFileOption, null, null,
+        peerOption, serverOption, hostnameForClientsOption);
-  public void locatorStart(
-    File directory, 
-    String portOption, 
-    String addressOption, 
-    String gemfirePropertiesFileOption,
-    Properties propertyOptionArg,
-    List xoptions,
-    boolean peerOption, 
-    boolean serverOption,
-    String hostnameForClientsOption
-    )
-    throws InterruptedException
-  {
-    if (Thread.interrupted()) throw new InterruptedException();
+  public void locatorStart(File directory, String portOption, String addressOption,
+      String gemfirePropertiesFileOption, Properties propertyOptionArg, List xoptions,
+      boolean peerOption, boolean serverOption, String hostnameForClientsOption)
+      throws InterruptedException {
+    if (Thread.interrupted())
+      throw new InterruptedException();
-    if (addressOption == null) addressOption = "";
+    if (addressOption == null)
+      addressOption = "";
-        throw new IllegalArgumentException(LocalizedStrings.SystemAdmin__0_IS_NOT_A_VALID_IP_ADDRESS_FOR_THIS_MACHINE.toLocalizedString(addressOption));
+        throw new IllegalArgumentException(
+            LocalizedStrings.SystemAdmin__0_IS_NOT_A_VALID_IP_ADDRESS_FOR_THIS_MACHINE
+                .toLocalizedString(addressOption));
-      throw new GemFireIOException(LocalizedStrings.SystemAdmin_LOGFILE_0_COULD_NOT_BE_OPENED_FOR_WRITING_VERIFY_FILE_PERMISSIONS_AND_THAT_ANOTHER_LOCATOR_IS_NOT_ALREADY_RUNNING.toLocalizedString(logFile.getPath()), ex);
+      throw new GemFireIOException(
+          LocalizedStrings.SystemAdmin_LOGFILE_0_COULD_NOT_BE_OPENED_FOR_WRITING_VERIFY_FILE_PERMISSIONS_AND_THAT_ANOTHER_LOCATOR_IS_NOT_ALREADY_RUNNING
+              .toLocalizedString(logFile.getPath()),
+          ex);
-    
+
-      Properties newPropOptions = new Properties();//see #43731
+      Properties newPropOptions = new Properties();// see #43731
-    
-    List cmdVec = JavaCommandBuilder.buildCommand(getDistributionLocatorPath(),
-        null, propertyOptionArg, xoptions);
-    cmdVec.add( String.valueOf(port) );
-    cmdVec.add( addressOption );
+    List cmdVec = JavaCommandBuilder.buildCommand(getDistributionLocatorPath(), null,
+        propertyOptionArg, xoptions);
+
+    cmdVec.add(String.valueOf(port));
+    cmdVec.add(addressOption);
-      /** 
-       * A counter used by PureJava to determine when its waited too long
-       * to start the locator process. 
-       * countDown * 250 = how many seconds to wait before giving up.
+      /**
+       * A counter used by PureJava to determine when its waited too long to start the locator
+       * process. countDown * 250 = how many seconds to wait before giving up.
-      int countDown = 60; 
+      int countDown = 60;
-        if ( treatAsPure) {
+        if (treatAsPure) {
-          Thread.sleep(250);       
+          Thread.sleep(250);
-        if (countDown < 0 || 
-           !(treatAsPure || OSProcess.exists(managerPid)))
-        {
+        if (countDown < 0 || !(treatAsPure || OSProcess.exists(managerPid))) {
-            throw new GemFireIOException(LocalizedStrings.SystemAdmin_START_OF_LOCATOR_FAILED_THE_END_OF_0_CONTAINED_THIS_MESSAGE_1.toLocalizedString(new Object[] {logFile, msg}), null);
+            throw new GemFireIOException(
+                LocalizedStrings.SystemAdmin_START_OF_LOCATOR_FAILED_THE_END_OF_0_CONTAINED_THIS_MESSAGE_1
+                    .toLocalizedString(new Object[] {logFile, msg}),
+                null);
-            throw new GemFireIOException(LocalizedStrings.SystemAdmin_START_OF_LOCATOR_FAILED_CHECK_END_OF_0_FOR_REASON.toLocalizedString(logFile), null);
+            throw new GemFireIOException(
+                LocalizedStrings.SystemAdmin_START_OF_LOCATOR_FAILED_CHECK_END_OF_0_FOR_REASON
+                    .toLocalizedString(logFile),
+                null);
-      throw new GemFireIOException(LocalizedStrings.SystemAdmin_COULD_NOT_EXEC_0.toLocalizedString(cmd[0]), io);
+      throw new GemFireIOException(
+          LocalizedStrings.SystemAdmin_COULD_NOT_EXEC_0.toLocalizedString(cmd[0]), io);
-  
+
-  /** enumerates all available local network addresses to find a match with
-      the given address.  Returns false if the address is not usable on
-      the current machine */
+  /**
+   * enumerates all available local network addresses to find a match with the given address.
+   * Returns false if the address is not usable on the current machine
+   */
-    }
-    catch (UnknownHostException ex) {
+    } catch (UnknownHostException ex) {
-        NetworkInterface ni = (NetworkInterface)en.nextElement();
+        NetworkInterface ni = (NetworkInterface) en.nextElement();
-          InetAddress check = (InetAddress)en2.nextElement();
+          InetAddress check = (InetAddress) en2.nextElement();
-    }
-    catch (SocketException sex) {
+    } catch (SocketException sex) {
-  public void locatorStop(File directory, String portOption, String addressOption, Properties propertyOption) throws InterruptedException {
-    if (Thread.interrupted()) throw new InterruptedException();
-    InetAddress addr = null;  // fix for bug 30810
-    if (addressOption == null) addressOption = "";
+  public void locatorStop(File directory, String portOption, String addressOption,
+      Properties propertyOption) throws InterruptedException {
+    if (Thread.interrupted())
+      throw new InterruptedException();
+    InetAddress addr = null; // fix for bug 30810
+    if (addressOption == null)
+      addressOption = "";
-        throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_ADDRESS_VALUE_WAS_NOT_A_KNOWN_IP_ADDRESS_0.toLocalizedString(ex));
+        throw new IllegalArgumentException(
+            LocalizedStrings.SystemAdmin_ADDRESS_VALUE_WAS_NOT_A_KNOWN_IP_ADDRESS_0
+                .toLocalizedString(ex));
-    if ( propertyOption != null ) {
+    if (propertyOption != null) {
-      while( iter.hasNext() ) {
+      while (iter.hasNext()) {
-        System.setProperty( key, propertyOption.getProperty( key ) );
+        System.setProperty(key, propertyOption.getProperty(key));
-//      File infoFile = ManagerInfo.getLocatorInfoFile(directory);
+      // File infoFile = ManagerInfo.getLocatorInfoFile(directory);
-      } 
-      catch ( java.net.ConnectException ce ) {
-        if( PureJavaMode.isPure() || OSProcess.exists(pid) ) {
-          System.out.println("Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.");
+      } catch (java.net.ConnectException ce) {
+        if (PureJavaMode.isPure() || OSProcess.exists(pid)) {
+          System.out.println(
+              "Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.");
-      if ( PureJavaMode.isPure() ) {
-        //format and change message
+      if (PureJavaMode.isPure()) {
+        // format and change message
-          System.out.println(LocalizedStrings.SystemAdmin_WAITING_5_SECONDS_FOR_LOCATOR_PROCESS_TO_TERMINATE.toLocalizedString());
+          System.out.println(
+              LocalizedStrings.SystemAdmin_WAITING_5_SECONDS_FOR_LOCATOR_PROCESS_TO_TERMINATE
+                  .toLocalizedString());
-        final int maxSleepCount = 15; 
-        while (++sleepCount < maxSleepCount && OSProcess.exists(pid) ) {
+        final int maxSleepCount = 15;
+        while (++sleepCount < maxSleepCount && OSProcess.exists(pid)) {
-          if (sleepCount == maxSleepCount/3 && !quiet) {
-            System.out.println(LocalizedStrings.SystemAdmin_WAITING_FOR_LOCATOR_PROCESS_WITH_PID_0_TO_TERMINATE.toLocalizedString(Integer.valueOf(pid)));
+          if (sleepCount == maxSleepCount / 3 && !quiet) {
+            System.out.println(
+                LocalizedStrings.SystemAdmin_WAITING_FOR_LOCATOR_PROCESS_WITH_PID_0_TO_TERMINATE
+                    .toLocalizedString(Integer.valueOf(pid)));
-          System.out.println(LocalizedStrings.SystemAdmin_LOCATOR_PROCESS_HAS_TERMINATED.toLocalizedString());
-        } else if( OSProcess.exists(pid) ) {
-          System.out.println("Locator process did not terminate within " + maxSleepCount + " seconds.");
+          System.out.println(
+              LocalizedStrings.SystemAdmin_LOCATOR_PROCESS_HAS_TERMINATED.toLocalizedString());
+        } else if (OSProcess.exists(pid)) {
+          System.out
+              .println("Locator process did not terminate within " + maxSleepCount + " seconds.");
-  } catch (UnstartedSystemException ex) {
+    } catch (UnstartedSystemException ex) {
-      throw new UnstartedSystemException(LocalizedStrings.SystemAdmin_LOCATOR_IN_DIRECTORY_0_IS_NOT_RUNNING.toLocalizedString(directory));
+      throw new UnstartedSystemException(
+          LocalizedStrings.SystemAdmin_LOCATOR_IN_DIRECTORY_0_IS_NOT_RUNNING
+              .toLocalizedString(directory));
+
+   * 
-   * @return the status string. Will be one of the following:
-   *   "running", "killed", "stopped", "stopping", or "starting".
-   * @throws UncreatedSystemException if the locator <code>directory</code>
-   *   does not exist or is not a directory.
-   * @throws GemFireIOException if the manager info exists but could not be read. This probably means that the info file is corrupt.
+   * @return the status string. Will be one of the following: "running", "killed", "stopped",
+   *         "stopping", or "starting".
+   * @throws UncreatedSystemException if the locator <code>directory</code> does not exist or is not
+   *         a directory.
+   * @throws GemFireIOException if the manager info exists but could not be read. This probably
+   *         means that the info file is corrupt.
+
+   * 
-   * @throws UncreatedSystemException if the locator <code>directory</code>
-   *   does not exist or is not a directory.
-   * @throws GemFireIOException if the manager info exists but could not be read. This probably means that the info file is corrupt.
+   * @throws UncreatedSystemException if the locator <code>directory</code> does not exist or is not
+   *         a directory.
+   * @throws GemFireIOException if the manager info exists but could not be read. This probably
+   *         means that the info file is corrupt.
-         .toLocalizedString(
-           new Object[] {
-             directory,
-             ManagerInfo.statusToString(mi.getManagerStatus()),
-             Integer.valueOf(mi.getManagerProcessId())
-         });
+            .toLocalizedString(
+                new Object[] {directory, ManagerInfo.statusToString(mi.getManagerStatus()),
+                    Integer.valueOf(mi.getManagerProcessId())});
-        return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_IS_1_LOCATOR_PROCESS_ID_IS_2 
-         .toLocalizedString(
-           new Object[] {
-             directory,
-             statusString,
-             Integer.valueOf(mi.getManagerProcessId())});
+        return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_IS_1_LOCATOR_PROCESS_ID_IS_2
+            .toLocalizedString(
+                new Object[] {directory, statusString, Integer.valueOf(mi.getManagerProcessId())});
-      return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_IS_STARTING.toLocalizedString(directory); 
+      return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_IS_STARTING.toLocalizedString(directory);
+
-   * Cleans up any artifacts left by a killed locator.
-   * Namely the info file is deleted.
+   * Cleans up any artifacts left by a killed locator. Namely the info file is deleted.
-      if(ManagerInfo.getLocatorStatusCode(directory) == ManagerInfo.KILLED_STATUS_CODE) {
+      if (ManagerInfo.getLocatorStatusCode(directory) == ManagerInfo.KILLED_STATUS_CODE) {
-            System.out.println(LocalizedStrings.SystemAdmin_CLEANED_UP_ARTIFACTS_LEFT_BY_THE_PREVIOUS_KILLED_LOCATOR.toLocalizedString());
+            System.out.println(
+                LocalizedStrings.SystemAdmin_CLEANED_UP_ARTIFACTS_LEFT_BY_THE_PREVIOUS_KILLED_LOCATOR
+                    .toLocalizedString());
-    File logFile =
-      new File(directory, DistributionLocator.DEFAULT_LOG_FILE);
+    File logFile = new File(directory, DistributionLocator.DEFAULT_LOG_FILE);
-      sw.write(LocalizedStrings.SystemAdmin_AN_IOEXCEPTION_WAS_THROWN_WHILE_TAILING_0.toLocalizedString(logFile));
+      sw.write(LocalizedStrings.SystemAdmin_AN_IOEXCEPTION_WAS_THROWN_WHILE_TAILING_0
+          .toLocalizedString(logFile));
-  
+
+
-    String diskStoreName = (String)args.get(0);
+    String diskStoreName = (String) args.get(0);
-      dirs[idx] = new File((String)it.next());
+      dirs[idx] = new File((String) it.next());
-      throw new GemFireIOException(" disk-store=" + diskStoreName + ": " + ex, ex); 
+      throw new GemFireIOException(" disk-store=" + diskStoreName + ": " + ex, ex);
-    String diskStoreName = (String)args.get(0);
+    String diskStoreName = (String) args.get(0);
-      dirs[idx] = new File((String)it.next());
+      dirs[idx] = new File((String) it.next());
-  
+
-    Map<DistributedMember, Set<PersistentID>> status = AdminDistributedSystemImpl.compactAllDiskStores(ads.getDistributionManager());
-    
+    Map<DistributedMember, Set<PersistentID>> status =
+        AdminDistributedSystemImpl.compactAllDiskStores(ads.getDistributionManager());
+
-    for(Set<PersistentID> memberStores : status.values()) {
-      for(PersistentID store : memberStores) {
+    for (Set<PersistentID> memberStores : status.values()) {
+      for (PersistentID store : memberStores) {
+
-    String diskStoreName = (String)args.get(0);
+    String diskStoreName = (String) args.get(0);
-      dirs[idx] = new File((String)it.next());
+      dirs[idx] = new File((String) it.next());
-      throw new GemFireIOException(" disk-store=" + diskStoreName + ": " + ex, ex); 
+      throw new GemFireIOException(" disk-store=" + diskStoreName + ": " + ex, ex);
-      System.out.println(" locators=" +dsc.getLocators());
+      System.out.println(" locators=" + dsc.getLocators());
-      System.out.println(" mcast=" + dsc.getMcastAddress()
-          + ":" + dsc.getMcastPort());
+      System.out.println(" mcast=" + dsc.getMcastAddress() + ":" + dsc.getMcastPort());
-    InternalDistributedSystem ds = (InternalDistributedSystem) InternalDistributedSystem.connectForAdmin(props);
+    InternalDistributedSystem ds =
+        (InternalDistributedSystem) InternalDistributedSystem.connectForAdmin(props);
-    if(existingMembers.isEmpty()) {
+    if (existingMembers.isEmpty()) {
-  
-  public static void shutDownAll(ArrayList<String> cmdLine)  {
+
+  public static void shutDownAll(ArrayList<String> cmdLine) {
-      if(cmdLine.size() > 0) {
+      if (cmdLine.size() > 0) {
-      Set members = AdminDistributedSystemImpl.shutDownAllMembers(ads.getDistributionManager(), timeout);
-      int count = members==null?0:members.size();
-      if(members == null) {
-        System.err.println("Unable to shut down the distributed system in the specified amount of time.");
+      Set members =
+          AdminDistributedSystemImpl.shutDownAllMembers(ads.getDistributionManager(), timeout);
+      int count = members == null ? 0 : members.size();
+      if (members == null) {
+        System.err
+            .println("Unable to shut down the distributed system in the specified amount of time.");
-      throw new GemFireIOException(ex.toString(), ex); 
+      throw new GemFireIOException(ex.toString(), ex);
-  
+
-   * this is a test hook to allow us to drive SystemAdmin functions without
-   * invoking main(), which can call System.exit().
+   * this is a test hook to allow us to drive SystemAdmin functions without invoking main(), which
+   * can call System.exit().
-  
+
-        outputFile = new File((String)cmdLine.get(0));
+        outputFile = new File((String) cmdLine.get(0));
-      
-      Map<InternalDistributedMember, byte[]> dumps = msg.dumpStacks(ads.getDistributionManager().getAllOtherMembers(), false, true);
-      for (Map.Entry<InternalDistributedMember, byte[]> entry: dumps.entrySet()) {
+
+      Map<InternalDistributedMember, byte[]> dumps =
+          msg.dumpStacks(ads.getDistributionManager().getAllOtherMembers(), false, true);
+      for (Map.Entry<InternalDistributedMember, byte[]> entry : dumps.entrySet()) {
-          for (ThreadStack s: stacks) {
+          for (ThreadStack s : stacks) {
-  
-  public static void backup(String targetDir) throws AdminException  {
+
+  public static void backup(String targetDir) throws AdminException {
-    BackupStatus status = AdminDistributedSystemImpl.backupAllMembers(ads.getDistributionManager(), 
+    BackupStatus status = AdminDistributedSystemImpl.backupAllMembers(ads.getDistributionManager(),
-    
+
-    for(Set<PersistentID> memberStores : status.getBackedUpDiskStores().values()) {
-      for(PersistentID store : memberStores) {
+    for (Set<PersistentID> memberStores : status.getBackedUpDiskStores().values()) {
+      for (PersistentID store : memberStores) {
-    if(incomplete) {
+    if (incomplete) {
-      for(PersistentID store : status.getOfflineDiskStores()) {
+      for (PersistentID store : status.getOfflineDiskStores()) {
-      for (Object o: s) {
+      for (Object o : s) {
-    
+
-  
+
-      throw new GemFireIOException(" disk-store=" + dsName + ": " + ex, ex); 
+      throw new GemFireIOException(" disk-store=" + dsName + ": " + ex, ex);
-  
+
-    
+
-      throw new GemFireIOException(" disk-store=" + dsName + ": " + ex, ex); 
+      throw new GemFireIOException(" disk-store=" + dsName + ": " + ex, ex);
-  
-  public static void revokeMissingDiskStores(ArrayList<String> cmdLine) throws UnknownHostException, AdminException {
+
+  public static void revokeMissingDiskStores(ArrayList<String> cmdLine)
+      throws UnknownHostException, AdminException {
-    Set<PersistentID> s = AdminDistributedSystemImpl.getMissingPersistentMembers(ads.getDistributionManager());
-    
-    
-    //Fix for 42607 - wait to see if the revoked member goes way if it is still in the set of
-    //missing members. It may take a moment to clear the missing member set after the revoke.
+    Set<PersistentID> s =
+        AdminDistributedSystemImpl.getMissingPersistentMembers(ads.getDistributionManager());
+
+
+    // Fix for 42607 - wait to see if the revoked member goes way if it is still in the set of
+    // missing members. It may take a moment to clear the missing member set after the revoke.
-    while(containsRevokedMember(s, uuid)) {
+    while (containsRevokedMember(s, uuid)) {
-      if(start + 30000 < System.currentTimeMillis()) {
+      if (start + 30000 < System.currentTimeMillis()) {
-      for (Object o: s) {
+      for (Object o : s) {
-  
+
-    for(PersistentID id : missing) {
-      if(id.getUUID().equals(revokedUUID)) {
+    for (PersistentID id : missing) {
+      if (id.getUUID().equals(revokedUUID)) {
+
-    String diskStoreName = (String)args.get(0);
+    String diskStoreName = (String) args.get(0);
-      dirs[idx] = new File((String)it.next());
+      dirs[idx] = new File((String) it.next());
-      if (lruOption != null
-          || lruActionOption != null
-          || lruLimitOption != null
-          || concurrencyLevelOption != null
-          || initialCapacityOption != null
-          || loadFactorOption != null
-          || compressorClassNameOption != null
+      if (lruOption != null || lruActionOption != null || lruLimitOption != null
+          || concurrencyLevelOption != null || initialCapacityOption != null
+          || loadFactorOption != null || compressorClassNameOption != null
-          throw new IllegalArgumentException("the -remove option can not be used with the other modify options.");
+          throw new IllegalArgumentException(
+              "the -remove option can not be used with the other modify options.");
-        DiskStoreImpl.modifyRegion(diskStoreName, dirs, regionOption,
-                                   lruOption, lruActionOption, lruLimitOption,
-                                   concurrencyLevelOption, initialCapacityOption, loadFactorOption,
-                                   compressorClassNameOption, statisticsEnabledOption, null/*offHeap*/, true);
-        System.out.println("The region " + regionOption + " was successfully modified in the disk store " + diskStoreName);
+        DiskStoreImpl.modifyRegion(diskStoreName, dirs, regionOption, lruOption, lruActionOption,
+            lruLimitOption, concurrencyLevelOption, initialCapacityOption, loadFactorOption,
+            compressorClassNameOption, statisticsEnabledOption, null/* offHeap */, true);
+        System.out.println("The region " + regionOption
+            + " was successfully modified in the disk store " + diskStoreName);
-        System.out.println("The region " + regionOption + " was successfully removed from the disk store " + diskStoreName);
+        System.out.println("The region " + regionOption
+            + " was successfully removed from the disk store " + diskStoreName);
-      throw new GemFireIOException(" disk-store=" + diskStoreName + ": " + ex, ex); 
+      throw new GemFireIOException(" disk-store=" + diskStoreName + ": " + ex, ex);
-    
+
-        throw new GemFireIOException(LocalizedStrings.SystemAdmin_COULD_NOT_CREATE_FILE_0_FOR_OUTPUT_BECAUSE_1.toLocalizedString(new Object[] {outOption, getExceptionMessage(ex)}));
+        throw new GemFireIOException(
+            LocalizedStrings.SystemAdmin_COULD_NOT_CREATE_FILE_0_FOR_OUTPUT_BECAUSE_1
+                .toLocalizedString(new Object[] {outOption, getExceptionMessage(ex)}));
-      String fileName = (String)it.next();
+      String fileName = (String) it.next();
-        throw new GemFireIOException(LocalizedStrings.SystemAdmin_COULD_NOT_OPEN_TO_0_FOR_READING_BECAUSE_1.toLocalizedString(new Object[] {fileName, getExceptionMessage(ex)}));
+        throw new GemFireIOException(
+            LocalizedStrings.SystemAdmin_COULD_NOT_OPEN_TO_0_FOR_READING_BECAUSE_1
+                .toLocalizedString(new Object[] {fileName, getExceptionMessage(ex)}));
-        if (inputNames[0].indexOf('/') == -1
-            && inputNames[0].indexOf('\\') == -1) {
+        if (inputNames[0].indexOf('/') == -1 && inputNames[0].indexOf('\\') == -1) {
-        for (int i=1; i < idx; i++) {
+        for (int i = 1; i < idx; i++) {
-        for (int i=0; i < idx; i++) {
+        for (int i = 0; i < idx; i++) {
-      throw new GemFireIOException(LocalizedStrings.SystemAdmin_TROUBLE_MERGING_LOG_FILES.toLocalizedString()); 
+      throw new GemFireIOException(
+          LocalizedStrings.SystemAdmin_TROUBLE_MERGING_LOG_FILES.toLocalizedString());
-      System.out.println(
-        LocalizedStrings.SystemAdmin_COMPLETED_MERGE_OF_0_LOGS_TO_1
-          .toLocalizedString(
-            new Object[] {Integer.valueOf(idx), ((outOption != null) ? outOption : "stdout")})); 
+      System.out
+          .println(LocalizedStrings.SystemAdmin_COMPLETED_MERGE_OF_0_LOGS_TO_1.toLocalizedString(
+              new Object[] {Integer.valueOf(idx), ((outOption != null) ? outOption : "stdout")}));
-  
+
+   * 
-  public String tailFile(File file, boolean problemsOnly)
-    throws IOException
-  {
+  public String tailFile(File file, boolean problemsOnly) throws IOException {
-      readSize = (int)length;
+      readSize = (int) length;
-      throw new EOFException("Failed to read " + readSize + " bytes from " + file.getAbsolutePath());
+      throw new EOFException(
+          "Failed to read " + readSize + " bytes from " + file.getAbsolutePath());
-    for (int i = readSize-1; i>=0; i--) {
-      if (buffer[i] == '[' && (buffer[i+1] == 's' || buffer[i+1] == 'e' || buffer[i+1] == 'w' /* ignore all messages except severe, error, and warning to fix bug 28968 */)
-          && i > 0 && (buffer[i-1] == '\n' || buffer[i-1] == '\r')) {
+    for (int i = readSize - 1; i >= 0; i--) {
+      if (buffer[i] == '[' && (buffer[i + 1] == 's' || buffer[i + 1] == 'e' || buffer[i
+          + 1] == 'w' /* ignore all messages except severe, error, and warning to fix bug 28968 */)
+          && i > 0 && (buffer[i - 1] == '\n' || buffer[i - 1] == '\r')) {
-      for (int i = readSize-3; i>=0; i--) {
+      for (int i = readSize - 3; i >= 0; i--) {
-          msgStart = (buffer[i]=='\n')? (i+1) : (i+2);
+          msgStart = (buffer[i] == '\n') ? (i + 1) : (i + 2);
-      for (int i=msgStart+1; i < readSize; i++) {
-        if (buffer[i] == '[' && (buffer[i-1] == '\n' || buffer[i-1] == '\r')) {
+      for (int i = msgStart + 1; i < readSize; i++) {
+        if (buffer[i] == '[' && (buffer[i - 1] == '\n' || buffer[i - 1] == '\r')) {
-    for (int i=msgStart; i < msgEnd; i++) {
+    for (int i = msgStart; i < msgEnd; i++) {
-  protected void format(PrintWriter pw, String msg, String linePrefix,
-      int initialLength) {
+  protected void format(PrintWriter pw, String msg, String linePrefix, int initialLength) {
-    final int  prefixLength = linePrefix.length();
+    final int prefixLength = linePrefix.length();
-        }
-        else {
+        } else {
-      } else if (msg.charAt(idx) == ' '
-                 && idx > 0 && msg.charAt(idx-1) == '.'
-                 && idx < (msg.length() - 1) && msg.charAt(idx+1) == ' ') {
-        // treat ".  " as a hardbreak
+      } else if (msg.charAt(idx) == ' ' && idx > 0 && msg.charAt(idx - 1) == '.'
+          && idx < (msg.length() - 1) && msg.charAt(idx + 1) == ' ') {
+        // treat ". " as a hardbreak
+
-    for (int i=0; i < breakChars.length; i++) {
+    for (int i = 0; i < breakChars.length; i++) {
+
-    for (int i=0; i < breakChars.length; i++) {
-      int tmp = str.indexOf(breakChars[i], fromIdx+1);
+    for (int i = 0; i < breakChars.length; i++) {
+      int tmp = str.indexOf(breakChars[i], fromIdx + 1);
-    
+
-        statId = cmdLineSpec.substring(dotIdx+1);
+        statId = cmdLineSpec.substring(dotIdx + 1);
-        typeId = cmdLineSpec.substring(commaIdx+1);
+        typeId = cmdLineSpec.substring(commaIdx + 1);
-      
+
+
-      return "StatSpec instanceId=" + this.instanceId
-        + " typeId="+ this.typeId
-        + " statId="+ this.statId;
+      return "StatSpec instanceId=" + this.instanceId + " typeId=" + this.typeId + " statId="
+          + this.statId;
-    
+
+
+
+
+
-      result[idx] = new StatSpec((String)it.next());
+      result[idx] = new StatSpec((String) it.next());
-  
-  private static void printStatValue(StatArchiveReader.StatValue v,
-                                     long startTime, long endTime,
-                                     boolean nofilter, boolean persec,
-                                     boolean persample,
-                                     boolean prunezeros, boolean details) {
+
+  private static void printStatValue(StatArchiveReader.StatValue v, long startTime, long endTime,
+      boolean nofilter, boolean persec, boolean persample, boolean prunezeros, boolean details) {
-      for (int i=0; i < snapshots.length; i++) {
+      for (int i = 0; i < snapshots.length; i++) {
+   * 
-   * @param persec if true then printed stat values will all be the rate of change, per second, of the raw values.
-   * @param persample if true then printed stat values will all be the rate of change, per sample, of the raw values.
+   * @param persec if true then printed stat values will all be the rate of change, per second, of
+   *        the raw values.
+   * @param persample if true then printed stat values will all be the rate of change, per sample,
+   *        of the raw values.
-   * @throws UncreatedSystemException if the system <code>sysDir</code>
-   *   does not exist, is not a directory, or does not contain a configuration file.
+   * @throws UncreatedSystemException if the system <code>sysDir</code> does not exist, is not a
+   *         directory, or does not contain a configuration file.
-  public void statistics(File directory, List archiveNames,
-                         boolean details, boolean nofilter,
-                         boolean persec,
-                         boolean persample,
-                         boolean prunezeros,
-                         boolean monitor,
-                         long startTime, long endTime,
-                         List cmdLineSpecs) {
+  public void statistics(File directory, List archiveNames, boolean details, boolean nofilter,
+      boolean persec, boolean persample, boolean prunezeros, boolean monitor, long startTime,
+      long endTime, List cmdLineSpecs) {
-      throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_NOFILTER_AND_PERSEC_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.SystemAdmin_THE_NOFILTER_AND_PERSEC_OPTIONS_ARE_MUTUALLY_EXCLUSIVE
+              .toLocalizedString());
-      throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_PERSAMPLE_AND_PERSEC_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.SystemAdmin_THE_PERSAMPLE_AND_PERSEC_OPTIONS_ARE_MUTUALLY_EXCLUSIVE
+              .toLocalizedString());
-      throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_PERSAMPLE_AND_NOFILTER_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.SystemAdmin_THE_PERSAMPLE_AND_NOFILTER_OPTIONS_ARE_MUTUALLY_EXCLUSIVE
+              .toLocalizedString());
-        throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_THE_ARCHIVE_AND_DIR_OPTIONS_ARE_MUTUALLY_EXCLUSIVE.toLocalizedString());
+        throw new IllegalArgumentException(
+            LocalizedStrings.SystemAdmin_THE_ARCHIVE_AND_DIR_OPTIONS_ARE_MUTUALLY_EXCLUSIVE
+                .toLocalizedString());
-        reader = new StatArchiveReader((File[])archiveNames.toArray(new File[archiveNames.size()]), specs, !monitor);
-        //Runtime.getRuntime().gc(); System.out.println("DEBUG: heap size=" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
+        reader = new StatArchiveReader((File[]) archiveNames.toArray(new File[archiveNames.size()]),
+            specs, !monitor);
+        // Runtime.getRuntime().gc(); System.out.println("DEBUG: heap size=" +
+        // (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
-            for (int i=0; i < archives.length; i++) {
+            for (int i = 0; i < archives.length; i++) {
-              ResourceInst inst = (ResourceInst)it.next();
+              ResourceInst inst = (ResourceInst) it.next();
-              for (int i=0; i < values.length; i++) {
+              for (int i = 0; i < values.length; i++) {
-                  printStatValue(values[i], startTime, endTime, nofilter, persec, persample, prunezeros, details);
+                  printStatValue(values[i], startTime, endTime, nofilter, persec, persample,
+                      prunezeros, details);
-            Map<CombinedResources, List<StatValue>> allSpecsMap = new HashMap<CombinedResources, List<StatValue>>();
-            for (int i=0; i < specs.length; i++) {
+            Map<CombinedResources, List<StatValue>> allSpecsMap =
+                new HashMap<CombinedResources, List<StatValue>>();
+            for (int i = 0; i < specs.length; i++) {
-                  System.err.println(
-                      LocalizedStrings.SystemAdmin_WARNING_NO_STATS_MATCHED_0
+                  System.err.println(LocalizedStrings.SystemAdmin_WARNING_NO_STATS_MATCHED_0
-                Map<CombinedResources, List<StatValue>> specMap = new HashMap<CombinedResources, List<StatValue>>();
-                for (StatValue v: values) {
+                Map<CombinedResources, List<StatValue>> specMap =
+                    new HashMap<CombinedResources, List<StatValue>>();
+                for (StatValue v : values) {
-                  System.out.println( 
-                      LocalizedStrings.SystemAdmin_INFO_FOUND_0_MATCHES_FOR_1
-                      .toLocalizedString(
-                          new Object[] { 
-                              Integer.valueOf(specMap.size()), specs[i].cmdLineSpec
-                          }));
+                  System.out.println(
+                      LocalizedStrings.SystemAdmin_INFO_FOUND_0_MATCHES_FOR_1.toLocalizedString(
+                          new Object[] {Integer.valueOf(specMap.size()), specs[i].cmdLineSpec}));
-                for (Map.Entry<CombinedResources, List<StatValue>> me: specMap.entrySet()) {
+                for (Map.Entry<CombinedResources, List<StatValue>> me : specMap.entrySet()) {
-            for (Map.Entry<CombinedResources, List<StatValue>> me: allSpecsMap.entrySet()) {
+            for (Map.Entry<CombinedResources, List<StatValue>> me : allSpecsMap.entrySet()) {
-              for (StatValue v: me.getValue()) {
-                printStatValue(v, startTime, endTime, nofilter, persec, persample, prunezeros, details);
+              for (StatValue v : me.getValue()) {
+                printStatValue(v, startTime, endTime, nofilter, persec, persample, prunezeros,
+                    details);
-        throw new GemFireIOException(LocalizedStrings.SystemAdmin_FAILED_READING_0.toLocalizedString(archiveOption), ex);
+        throw new GemFireIOException(
+            LocalizedStrings.SystemAdmin_FAILED_READING_0.toLocalizedString(archiveOption), ex);
-  
+
-   * Represents a list of ResourceInst that have been combined together.
-   * Note the most common case is for this class to only own a single ResourceInst.
+   * Represents a list of ResourceInst that have been combined together. Note the most common case
+   * is for this class to only own a single ResourceInst.
+
-      for (ResourceInst inst: this) {
+      for (ResourceInst inst : this) {
-  private final static String[] helpTopics = new String [] {
-    "all", "overview", "commands", "options", "usage", "configuration"
-  };
+  private final static String[] helpTopics =
+      new String[] {"all", "overview", "commands", "options", "usage", "configuration"};
-      for (int i=0; i < helpTopics.length; i++) {
+      for (int i = 0; i < helpTopics.length; i++) {
-      pw.println(LocalizedStrings.
-        SystemAdmin_THIS_PROGRAM_ALLOWS_GEMFIRE_TO_BE_MANAGED_FROM_THE_COMMAND_LINE_IT_EXPECTS_A_COMMAND_TO_EXECUTE_SEE_THE_HELP_TOPIC_0_FOR_A_SUMMARY_OF_SUPPORTED_OPTIONS_SEE_THE_HELP_TOPIC_1_FOR_A_CONCISE_DESCRIPTION_OF_COMMAND_LINE_SYNTAX_SEE_THE_HELP_TOPIC_2_FOR_A_DESCRIPTION_OF_SYSTEM_CONFIGURATION_SEE_THE_HELP_TOPIC_3_FOR_HELP_ON_A_SPECIFIC_COMMAND_USE_THE_4_OPTION_WITH_THE_COMMAND_NAME
-        .toLocalizedString( new Object[] { "commands", "options", "usage", "configuration" , "-h" }));
+      pw.println(
+          LocalizedStrings.SystemAdmin_THIS_PROGRAM_ALLOWS_GEMFIRE_TO_BE_MANAGED_FROM_THE_COMMAND_LINE_IT_EXPECTS_A_COMMAND_TO_EXECUTE_SEE_THE_HELP_TOPIC_0_FOR_A_SUMMARY_OF_SUPPORTED_OPTIONS_SEE_THE_HELP_TOPIC_1_FOR_A_CONCISE_DESCRIPTION_OF_COMMAND_LINE_SYNTAX_SEE_THE_HELP_TOPIC_2_FOR_A_DESCRIPTION_OF_SYSTEM_CONFIGURATION_SEE_THE_HELP_TOPIC_3_FOR_HELP_ON_A_SPECIFIC_COMMAND_USE_THE_4_OPTION_WITH_THE_COMMAND_NAME
+              .toLocalizedString(
+                  new Object[] {"commands", "options", "usage", "configuration", "-h"}));
-      pw.println((String)usageMap.get("gemfire") + " <command> ...");
-      format(pw, (String)helpMap.get("gemfire"), "  ", 0);
-      for (int i=0; i < validCommands.length; i++) {
-        pw.println((String)usageMap.get(validCommands[i]));
+      pw.println((String) usageMap.get("gemfire") + " <command> ...");
+      format(pw, (String) helpMap.get("gemfire"), "  ", 0);
+      for (int i = 0; i < validCommands.length; i++) {
+        pw.println((String) usageMap.get(validCommands[i]));
-          pw.println("  (help message missing for " + validCommands[i]+")");
+          pw.println("  (help message missing for " + validCommands[i] + ")");
-          format(pw, (String)helpMap.get(validCommands[i]), "  ", 0);
+          format(pw, (String) helpMap.get(validCommands[i]), "  ", 0);
-      pw.println(LocalizedStrings.
-        SystemAdmin_ALL_COMMAND_LINE_OPTIONS_START_WITH_A_AND_ARE_NOT_REQUIRED_EACH_OPTION_HAS_A_DEFAULT_THAT_WILL_BE_USED_WHEN_ITS_NOT_SPECIFIED_OPTIONS_THAT_TAKE_AN_ARGUMENT_ALWAYS_USE_A_SINGLE_CHARACTER_WITH_NO_SPACES_TO_DELIMIT_WHERE_THE_OPTION_NAME_ENDS_AND_THE_ARGUMENT_BEGINS_OPTIONS_THAT_PRECEDE_THE_COMMAND_WORD_CAN_BE_USED_WITH_ANY_COMMAND_AND_ARE_ALSO_PERMITTED_TO_FOLLOW_THE_COMMAND_WORD
-.toLocalizedString());
-      for (int i=0; i < validOptions.length; i++) {
+      pw.println(
+          LocalizedStrings.SystemAdmin_ALL_COMMAND_LINE_OPTIONS_START_WITH_A_AND_ARE_NOT_REQUIRED_EACH_OPTION_HAS_A_DEFAULT_THAT_WILL_BE_USED_WHEN_ITS_NOT_SPECIFIED_OPTIONS_THAT_TAKE_AN_ARGUMENT_ALWAYS_USE_A_SINGLE_CHARACTER_WITH_NO_SPACES_TO_DELIMIT_WHERE_THE_OPTION_NAME_ENDS_AND_THE_ARGUMENT_BEGINS_OPTIONS_THAT_PRECEDE_THE_COMMAND_WORD_CAN_BE_USED_WITH_ANY_COMMAND_AND_ARE_ALSO_PERMITTED_TO_FOLLOW_THE_COMMAND_WORD
+              .toLocalizedString());
+      for (int i = 0; i < validOptions.length; i++) {
-          format(pw, (String)helpMap.get(validOptions[i]), "  ", validOptions[i].length() + 1);
+          format(pw, (String) helpMap.get(validOptions[i]), "  ", validOptions[i].length() + 1);
-          System.err.println(LocalizedStrings.SystemAdmin_NO_HELP_FOR_OPTION_0.toLocalizedString(validOptions[i]));
+          System.err.println(
+              LocalizedStrings.SystemAdmin_NO_HELP_FOR_OPTION_0.toLocalizedString(validOptions[i]));
-      for (int i=0; i < validCommands.length; i++) {
+      for (int i = 0; i < validCommands.length; i++) {
-      topic = (String)args.get(0);
+      topic = (String) args.get(0);
-        System.err.println(LocalizedStrings.SystemAdmin_ERROR_INVALID_HELP_TOPIC_0.toLocalizedString(topic));
+        System.err.println(
+            LocalizedStrings.SystemAdmin_ERROR_INVALID_HELP_TOPIC_0.toLocalizedString(topic));
-    result
-      .append(usageMap.get("gemfire"))
-      .append(' ');
+    result.append(usageMap.get("gemfire")).append(' ');
-      result
-        .append(join(Arrays.asList(validCommands), "|"))
-        .append(" ...");
+      result.append(join(Arrays.asList(validCommands), "|")).append(" ...");
-    System.err.println(LocalizedStrings.SystemAdmin_USAGE.toLocalizedString() 
-      + " " + getUsageString(cmd));
+    System.err.println(
+        LocalizedStrings.SystemAdmin_USAGE.toLocalizedString() + " " + getUsageString(cmd));
-  private final static String[] validCommands = new String [] {
-    "version",
-    "stats",
-      START_LOCATOR, "stop-locator", "status-locator", "info-locator",
-    "tail-locator-log",
- "merge-logs", "encrypt-password",
-    "revoke-missing-disk-store",
-    "list-missing-disk-stores",
-    "validate-disk-store",
-    "upgrade-disk-store",
-    "compact-disk-store",
-    "compact-all-disk-stores",
-    "modify-disk-store",
-    "show-disk-store-metadata",
-    "export-disk-store",
-    "shut-down-all",
-    "backup",
-    "print-stacks",
-    "help"
-  };
+  private final static String[] validCommands = new String[] {"version", "stats", START_LOCATOR,
+      "stop-locator", "status-locator", "info-locator", "tail-locator-log", "merge-logs",
+      "encrypt-password", "revoke-missing-disk-store", "list-missing-disk-stores",
+      "validate-disk-store", "upgrade-disk-store", "compact-disk-store", "compact-all-disk-stores",
+      "modify-disk-store", "show-disk-store-metadata", "export-disk-store", "shut-down-all",
+      "backup", "print-stacks", "help"};
-  private final static String[] aliasCommands = new String [] {
-    "locator-start", "locator-stop", "locator-status", "locator-info",
-    "locator-tail-log",
-    "logs-merge",
-    "shutdown-all",
-    "shutdownall",
-    "compact",
-    "modify",
-    "validate"
-  };
-  private final static String[] validOptions = new String [] {
-    "-address=",
-    "-archive=",
-    "-concurrencyLevel=",
-    "-debug",
-    "-remove",
-    "-details",
-    "-dir=",
-    "-endtime=",
-    "-h",
-    "-help",
-    "-initialCapacity=",
-    "-loadFactor=",
-    "-lru=",
-    "-lruAction=",
-    "-lruLimit=",
-    "-maxOplogSize=",
-    "-properties=",
-    "-monitor",
-    "-nofilter",
-    "-persample",
-    "-persec",
-    "-out=",
-    "-port=",
-    "-prunezeros",
-    "-region=",
-    "-starttime=",
-    "-statisticsEnabled=",
-    "-peer=",
-    "-server=",
-    "-q",
-    "-D",
-    "-X",
-    "-outputDir="
-  };
+  private final static String[] aliasCommands = new String[] {"locator-start", "locator-stop",
+      "locator-status", "locator-info", "locator-tail-log", "logs-merge", "shutdown-all",
+      "shutdownall", "compact", "modify", "validate"};
+  private final static String[] validOptions =
+      new String[] {"-address=", "-archive=", "-concurrencyLevel=", "-debug", "-remove", "-details",
+          "-dir=", "-endtime=", "-h", "-help", "-initialCapacity=", "-loadFactor=", "-lru=",
+          "-lruAction=", "-lruLimit=", "-maxOplogSize=", "-properties=", "-monitor", "-nofilter",
+          "-persample", "-persec", "-out=", "-port=", "-prunezeros", "-region=", "-starttime=",
+          "-statisticsEnabled=", "-peer=", "-server=", "-q", "-D", "-X", "-outputDir="};
-        System.err.println(LocalizedStrings.SystemAdmin_ERROR_INVALID_COMMAND_0.toLocalizedString(cmd));
+        System.err
+            .println(LocalizedStrings.SystemAdmin_ERROR_INVALID_COMMAND_0.toLocalizedString(cmd));
-          throw new InternalGemFireException(LocalizedStrings.SystemAdmin_UNHANDLED_ALIAS_0.toLocalizedString(cmd));
+          throw new InternalGemFireException(
+              LocalizedStrings.SystemAdmin_UNHANDLED_ALIAS_0.toLocalizedString(cmd));
+
+
+
+
-    helpMap.put("gemfire", 
-                LocalizedStrings.SystemAdmin_GEMFIRE_HELP.toLocalizedString(new Object[] { join(validCommands), "-h", "-debug", "-help", "-q", "-J<vmOpt>"}));
-    helpMap.put("version",
-      LocalizedStrings.SystemAdmin_VERSION_HELP.toLocalizedString());
-    helpMap.put("help", 
-      LocalizedStrings.SystemAdmin_HELP_HELP.toLocalizedString());
-    helpMap.put("stats", 
-      LocalizedStrings.SystemAdmin_STATS_HELP_PART_A
-        .toLocalizedString( new Object[] {
-          "+", "++", ":", ".", "-details", "-nofilter", "-archive=", "-persec",
-          "-persample", "-prunezeros"
-      }) + "\n" +
-      LocalizedStrings.SystemAdmin_STATS_HELP_PART_B
-        .toLocalizedString( new Object[] {
-        "-starttime", "-archive=", DateFormatter.FORMAT_STRING, "-endtime", 
-      }));
+    helpMap.put("gemfire", LocalizedStrings.SystemAdmin_GEMFIRE_HELP.toLocalizedString(
+        new Object[] {join(validCommands), "-h", "-debug", "-help", "-q", "-J<vmOpt>"}));
+    helpMap.put("version", LocalizedStrings.SystemAdmin_VERSION_HELP.toLocalizedString());
+    helpMap.put("help", LocalizedStrings.SystemAdmin_HELP_HELP.toLocalizedString());
+    helpMap.put("stats",
+        LocalizedStrings.SystemAdmin_STATS_HELP_PART_A.toLocalizedString(new Object[] {"+",
+            "++", ":", ".", "-details", "-nofilter", "-archive=", "-persec", "-persample",
+            "-prunezeros"}) + "\n"
+            + LocalizedStrings.SystemAdmin_STATS_HELP_PART_B.toLocalizedString(new Object[] {
+                "-starttime", "-archive=", DateFormatter.FORMAT_STRING, "-endtime",}));
-      LocalizedStrings.SystemAdmin_ENCRYPTS_A_PASSWORD_FOR_USE_IN_CACHE_XML_DATA_SOURCE_CONFIGURATION.toLocalizedString());
+        LocalizedStrings.SystemAdmin_ENCRYPTS_A_PASSWORD_FOR_USE_IN_CACHE_XML_DATA_SOURCE_CONFIGURATION
+            .toLocalizedString());
-      LocalizedStrings.SystemAdmin_START_LOCATOR_HELP
-        .toLocalizedString(new Object[] { "-port=",  Integer.valueOf(DistributionLocator.DEFAULT_LOCATOR_PORT), "-address=", "-dir=", "-properties=", "-peer=", "-server=", "-hostname-for-clients=", "-D", "-X" })); 
-    helpMap.put("stop-locator",  
-      LocalizedStrings.SystemAdmin_STOP_LOCATOR_HELP
-        .toLocalizedString(new Object[] { "-port=",  Integer.valueOf(DistributionLocator.DEFAULT_LOCATOR_PORT), "-address=", "-dir="})); 
-    helpMap.put("status-locator", 
-      LocalizedStrings.SystemAdmin_STATUS_LOCATOR_HELP
-        .toLocalizedString(new Object[] { join(ManagerInfo.statusNames), "-dir="})); 
+        LocalizedStrings.SystemAdmin_START_LOCATOR_HELP.toLocalizedString(new Object[] {"-port=",
+            Integer.valueOf(DistributionLocator.DEFAULT_LOCATOR_PORT), "-address=", "-dir=",
+            "-properties=", "-peer=", "-server=", "-hostname-for-clients=", "-D", "-X"}));
+    helpMap.put("stop-locator",
+        LocalizedStrings.SystemAdmin_STOP_LOCATOR_HELP.toLocalizedString(new Object[] {"-port=",
+            Integer.valueOf(DistributionLocator.DEFAULT_LOCATOR_PORT), "-address=", "-dir="}));
+    helpMap.put("status-locator", LocalizedStrings.SystemAdmin_STATUS_LOCATOR_HELP
+        .toLocalizedString(new Object[] {join(ManagerInfo.statusNames), "-dir="}));
-      LocalizedStrings.SystemAdmin_INFO_LOCATOR_HELP
-        .toLocalizedString("-dir=")); 
-    helpMap.put("tail-locator-log", 
-      LocalizedStrings.SystemAdmin_TAIL_LOCATOR_HELP
-        .toLocalizedString("-dir=")); 
-    helpMap.put("merge-logs", 
-      LocalizedStrings.SystemAdmin_MERGE_LOGS
-        .toLocalizedString("-out")); 
+        LocalizedStrings.SystemAdmin_INFO_LOCATOR_HELP.toLocalizedString("-dir="));
+    helpMap.put("tail-locator-log",
+        LocalizedStrings.SystemAdmin_TAIL_LOCATOR_HELP.toLocalizedString("-dir="));
+    helpMap.put("merge-logs", LocalizedStrings.SystemAdmin_MERGE_LOGS.toLocalizedString("-out"));
-                LocalizedStrings.SystemAdmin_VALIDATE_DISK_STORE.toLocalizedString()); 
-    helpMap.put("upgrade-disk-store",
-        "Upgrade an offline disk store with new version format. \n"
+        LocalizedStrings.SystemAdmin_VALIDATE_DISK_STORE.toLocalizedString());
+    helpMap.put("upgrade-disk-store", "Upgrade an offline disk store with new version format. \n"
-                "Compacts an offline disk store. Compaction removes all unneeded records from the persistent files.\n"
-                + "  -maxOplogSize=<long> causes the oplogs created by compaction to be no larger than the specified size in megabytes."); 
+        "Compacts an offline disk store. Compaction removes all unneeded records from the persistent files.\n"
+            + "  -maxOplogSize=<long> causes the oplogs created by compaction to be no larger than the specified size in megabytes.");
-                "Connects to a running system and tells its members to compact their disk stores. " +
-                "This command uses the compaction threshold that each member has " +
-                "configured for its disk stores. The disk store must have allow-force-compaction " +
-                "set to true in order for this command to work.\n" +
-                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
+        "Connects to a running system and tells its members to compact their disk stores. "
+            + "This command uses the compaction threshold that each member has "
+            + "configured for its disk stores. The disk store must have allow-force-compaction "
+            + "set to true in order for this command to work.\n"
+            + "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                LocalizedStrings.SystemAdmin_MODIFY_DISK_STORE.toLocalizedString()); 
+        LocalizedStrings.SystemAdmin_MODIFY_DISK_STORE.toLocalizedString());
-                "Connects to a running system and tells its members to stop waiting for the " +
-                "specified disk store to be available. Only revoke a disk store if its files " + 
-                "are lost. Once a disk store is revoked its files can no longer be loaded so be " +
-                "careful. Use the list-missing-disk-stores command to get descriptions of the" +
-                "missing disk stores.\n" +
-                "You must pass the in the unique id for the disk store to revoke. The unique id is listed in the output " +
-                "of the list-missing-disk-stores command, for example a63d7d99-f8f8-4907-9eb7-cca965083dbb.\n" +
-                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
+        "Connects to a running system and tells its members to stop waiting for the "
+            + "specified disk store to be available. Only revoke a disk store if its files "
+            + "are lost. Once a disk store is revoked its files can no longer be loaded so be "
+            + "careful. Use the list-missing-disk-stores command to get descriptions of the"
+            + "missing disk stores.\n"
+            + "You must pass the in the unique id for the disk store to revoke. The unique id is listed in the output "
+            + "of the list-missing-disk-stores command, for example a63d7d99-f8f8-4907-9eb7-cca965083dbb.\n"
+            + "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                "Prints out a description of the disk stores that are currently missing from a distributed system\n\\n."
-                    + "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-    helpMap.put("export-disk-store", 
-                "Exports an offline disk store.  The persistent data is written to a binary format.\n"
-                + "  -outputDir=<directory> specifies the location of the exported snapshot files.");
+        "Prints out a description of the disk stores that are currently missing from a distributed system\n\\n."
+            + "This command will use the gemfire.properties file to determine what distributed system to connect to.");
+    helpMap.put("export-disk-store",
+        "Exports an offline disk store.  The persistent data is written to a binary format.\n"
+            + "  -outputDir=<directory> specifies the location of the exported snapshot files.");
-                "Connects to a running system and asks all its members that have a cache to close the cache and disconnect from system." +
-                "The timeout parameter allows you to specify that the system should be shutdown forcibly after the time has exceeded.\n" +
-                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
+        "Connects to a running system and asks all its members that have a cache to close the cache and disconnect from system."
+            + "The timeout parameter allows you to specify that the system should be shutdown forcibly after the time has exceeded.\n"
+            + "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                "Connects to a running system and asks all its members that have persistent data " +
-                "to backup their data to the specified directory. The directory specified must exist " +
-                "on all members, but it can be a local directory on each machine. This command " +
-                "takes care to ensure that the backup files will not be corrupted by concurrent " +
-                "operations. Backing up a running system with filesystem copy is not recommended.\n" +
-                    "This command will use the gemfire.properties file to determine what distributed system to connect to.");
+        "Connects to a running system and asks all its members that have persistent data "
+            + "to backup their data to the specified directory. The directory specified must exist "
+            + "on all members, but it can be a local directory on each machine. This command "
+            + "takes care to ensure that the backup files will not be corrupted by concurrent "
+            + "operations. Backing up a running system with filesystem copy is not recommended.\n"
+            + "This command will use the gemfire.properties file to determine what distributed system to connect to.");
-                "fetches stack dumps of all processes.  By default an attempt" +
-                " is made to remove idle GemFire threads from the dump.  " +
-                "Use -all-threads to include these threads in the dump.  " +
-                "An optional filename may be given for storing the dumps.");
-    helpMap.put("-out=", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_WRITE_OUTPUT_TO_THE_SPECIFIED_FILE_THE_FILE_IS_OVERWRITTEN_IF_IT_ALREADY_EXISTS
-        .toLocalizedString()); 
-    helpMap.put("-debug", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_OUT_EXTRA_INFORMATION_WHEN_IT_FAILS_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
-        .toLocalizedString()); 
-    helpMap.put("-details", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_DETAILED_INFORMATION_WITH_THE_0_COMMAND_IT_MEANS_STATISTIC_DESCRIPTIONS
-        .toLocalizedString("stats")); 
-    helpMap.put("-nofilter", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_PRINT_UNFILTERED_RAW_STATISTIC_VALUES_THIS_IS_THE_DEFAULT_FOR_NONCOUNTER_STATISTICS
-        .toLocalizedString("stats")); 
-    helpMap.put("-persec", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_PRINT_THE_RATE_OF_CHANGE_PER_SECOND_FOR_STATISTIC_VALUES_THIS_IS_THE_DEFAULT_FOR_COUNTER_STATISTICS
-        .toLocalizedString("stats")); 
-    helpMap.put("-persample", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_PRINT_THE_RATE_OF_CHANGE_PER_SAMPLE_FOR_STATISTIC_VALUES
-        .toLocalizedString("stats")); 
-    helpMap.put("-prunezeros", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_NOT_PRINT_STATISTICS_WHOSE_VALUES_ARE_ALL_ZERO
-        .toLocalizedString("stats")); 
-    helpMap.put("-port=", 
-      LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_A_NONDEFAULT_PORT_WHEN_STARTING_OR_STOPPING_A_LOCATOR
-        .toLocalizedString()); 
-    helpMap.put("-address=", 
-      LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_A_SPECIFIC_IP_ADDRESS_TO_LISTEN_ON_WHEN_STARTING_OR_STOPPING_A_LOCATOR
-        .toLocalizedString()); 
+        "fetches stack dumps of all processes.  By default an attempt"
+            + " is made to remove idle GemFire threads from the dump.  "
+            + "Use -all-threads to include these threads in the dump.  "
+            + "An optional filename may be given for storing the dumps.");
+    helpMap.put("-out=",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_WRITE_OUTPUT_TO_THE_SPECIFIED_FILE_THE_FILE_IS_OVERWRITTEN_IF_IT_ALREADY_EXISTS
+            .toLocalizedString());
+    helpMap.put("-debug",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_OUT_EXTRA_INFORMATION_WHEN_IT_FAILS_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
+            .toLocalizedString());
+    helpMap.put("-details",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_DETAILED_INFORMATION_WITH_THE_0_COMMAND_IT_MEANS_STATISTIC_DESCRIPTIONS
+            .toLocalizedString("stats"));
+    helpMap.put("-nofilter",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_PRINT_UNFILTERED_RAW_STATISTIC_VALUES_THIS_IS_THE_DEFAULT_FOR_NONCOUNTER_STATISTICS
+            .toLocalizedString("stats"));
+    helpMap.put("-persec",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_PRINT_THE_RATE_OF_CHANGE_PER_SECOND_FOR_STATISTIC_VALUES_THIS_IS_THE_DEFAULT_FOR_COUNTER_STATISTICS
+            .toLocalizedString("stats"));
+    helpMap.put("-persample",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_PRINT_THE_RATE_OF_CHANGE_PER_SAMPLE_FOR_STATISTIC_VALUES
+            .toLocalizedString("stats"));
+    helpMap.put("-prunezeros",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_0_COMMAND_TO_NOT_PRINT_STATISTICS_WHOSE_VALUES_ARE_ALL_ZERO
+            .toLocalizedString("stats"));
+    helpMap.put("-port=",
+        LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_A_NONDEFAULT_PORT_WHEN_STARTING_OR_STOPPING_A_LOCATOR
+            .toLocalizedString());
+    helpMap.put("-address=",
+        LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_A_SPECIFIC_IP_ADDRESS_TO_LISTEN_ON_WHEN_STARTING_OR_STOPPING_A_LOCATOR
+            .toLocalizedString());
-      LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_A_HOST_NAME_OR_IP_ADDRESS_TO_GIVE_TO_CLIENTS_SO_THEY_CAN_CONNECT_TO_A_LOCATOR
-        .toLocalizedString());
-    helpMap.put("-properties=", 
-      LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_THE_0_FILE_TO_BE_USED_IN_CONFIGURING_THE_LOCATORS_DISTRIBUTEDSYSTEM
-          .toLocalizedString(DistributionConfig.GEMFIRE_PREFIX + "properties"));
-    helpMap.put("-archive=", 
-      LocalizedStrings.SystemAdmin_THE_ARGUMENT_IS_THE_STATISTIC_ARCHIVE_FILE_THE_0_COMMAND_SHOULD_READ
-        .toLocalizedString("stats")); 
-    helpMap.put("-h", 
-      LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_OUT_INFORMATION_INSTEAD_OF_PERFORMING_THE_COMMAND_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
-        .toLocalizedString());
+        LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_A_HOST_NAME_OR_IP_ADDRESS_TO_GIVE_TO_CLIENTS_SO_THEY_CAN_CONNECT_TO_A_LOCATOR
+            .toLocalizedString());
+    helpMap.put("-properties=",
+        LocalizedStrings.SystemAdmin_USED_TO_SPECIFY_THE_0_FILE_TO_BE_USED_IN_CONFIGURING_THE_LOCATORS_DISTRIBUTEDSYSTEM
+            .toLocalizedString(DistributionConfig.GEMFIRE_PREFIX + "properties"));
+    helpMap.put("-archive=",
+        LocalizedStrings.SystemAdmin_THE_ARGUMENT_IS_THE_STATISTIC_ARCHIVE_FILE_THE_0_COMMAND_SHOULD_READ
+            .toLocalizedString("stats"));
+    helpMap.put("-h",
+        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_OUT_INFORMATION_INSTEAD_OF_PERFORMING_THE_COMMAND_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
+            .toLocalizedString());
-    helpMap.put("-q", 
-      LocalizedStrings.SystemAdmin_TURNS_ON_QUIET_MODE_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
-        .toLocalizedString()); 
-    helpMap.put("-starttime=", 
-      LocalizedStrings.SystemAdmin_CAUSES_THE_0_COMMAND_TO_IGNORE_STATISTICS_SAMPLES_TAKEN_BEFORE_THIS_TIME_THE_ARGUMENT_FORMAT_MUST_MATCH_1
-        .toLocalizedString(new Object[] {"stats", DateFormatter.FORMAT_STRING})); 
-    helpMap.put("-endtime=", 
-      LocalizedStrings.SystemAdmin_CAUSES_THE_0_COMMAND_TO_IGNORE_STATISTICS_SAMPLES_TAKEN_AFTER_THIS_TIME_THE_ARGUMENT_FORMAT_MUST_MATCH_1
-        .toLocalizedString(new Object[] {"stats", DateFormatter.FORMAT_STRING})); 
-    helpMap.put("-dir=", 
-      LocalizedStrings.SystemAdmin_DIR_ARGUMENT_HELP
-          .toLocalizedString(new Object[] { DistributionConfig.GEMFIRE_PREFIX + "properties",
-              DistributionConfig.GEMFIRE_PREFIX + "systemDirectory", "GEMFIRE", "defaultSystem",
-                "version" }));
-    helpMap.put("-D", 
-      LocalizedStrings.SystemAdmin_SETS_A_JAVA_SYSTEM_PROPERTY_IN_THE_LOCATOR_VM_USED_MOST_OFTEN_FOR_CONFIGURING_SSL_COMMUNICATION
-        .toLocalizedString()); 
-    helpMap.put("-X", 
-      LocalizedStrings.SystemAdmin_SETS_A_JAVA_VM_X_SETTING_IN_THE_LOCATOR_VM_USED_MOST_OFTEN_FOR_INCREASING_THE_SIZE_OF_THE_VIRTUAL_MACHINE
-        .toLocalizedString()); 
-    helpMap.put("-remove", 
-      LocalizedStrings.SystemAdmin_REMOVE_OPTION_HELP.toLocalizedString()); 
+    helpMap.put("-q",
+        LocalizedStrings.SystemAdmin_TURNS_ON_QUIET_MODE_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
+            .toLocalizedString());
+    helpMap.put("-starttime=",
+        LocalizedStrings.SystemAdmin_CAUSES_THE_0_COMMAND_TO_IGNORE_STATISTICS_SAMPLES_TAKEN_BEFORE_THIS_TIME_THE_ARGUMENT_FORMAT_MUST_MATCH_1
+            .toLocalizedString(new Object[] {"stats", DateFormatter.FORMAT_STRING}));
+    helpMap.put("-endtime=",
+        LocalizedStrings.SystemAdmin_CAUSES_THE_0_COMMAND_TO_IGNORE_STATISTICS_SAMPLES_TAKEN_AFTER_THIS_TIME_THE_ARGUMENT_FORMAT_MUST_MATCH_1
+            .toLocalizedString(new Object[] {"stats", DateFormatter.FORMAT_STRING}));
+    helpMap.put("-dir=",
+        LocalizedStrings.SystemAdmin_DIR_ARGUMENT_HELP
+            .toLocalizedString(new Object[] {DistributionConfig.GEMFIRE_PREFIX + "properties",
+                DistributionConfig.GEMFIRE_PREFIX + "systemDirectory", "GEMFIRE", "defaultSystem",
+                "version"}));
+    helpMap.put("-D",
+        LocalizedStrings.SystemAdmin_SETS_A_JAVA_SYSTEM_PROPERTY_IN_THE_LOCATOR_VM_USED_MOST_OFTEN_FOR_CONFIGURING_SSL_COMMUNICATION
+            .toLocalizedString());
+    helpMap.put("-X",
+        LocalizedStrings.SystemAdmin_SETS_A_JAVA_VM_X_SETTING_IN_THE_LOCATOR_VM_USED_MOST_OFTEN_FOR_INCREASING_THE_SIZE_OF_THE_VIRTUAL_MACHINE
+            .toLocalizedString());
+    helpMap.put("-remove", LocalizedStrings.SystemAdmin_REMOVE_OPTION_HELP.toLocalizedString());
-                "Limits the size of any oplogs that are created to the specified size in megabytes.");
-    helpMap.put("-lru=", 
-      LocalizedStrings.SystemAdmin_LRU_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-lruAction=", 
-      LocalizedStrings.SystemAdmin_LRUACTION_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-lruLimit=", 
-      LocalizedStrings.SystemAdmin_LRULIMIT_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-concurrencyLevel=", 
-      LocalizedStrings.SystemAdmin_CONCURRENCYLEVEL_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-initialCapacity=", 
-      LocalizedStrings.SystemAdmin_INITIALCAPACITY_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-loadFactor=", 
-      LocalizedStrings.SystemAdmin_LOADFACTOR_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-statisticsEnabled=", 
-      LocalizedStrings.SystemAdmin_STATISTICSENABLED_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-region=", 
-      LocalizedStrings.SystemAdmin_REGION_OPTION_HELP.toLocalizedString()); 
-    helpMap.put("-monitor", 
-      LocalizedStrings.SystemAdmin_MONITOR_OPTION_HELP.toLocalizedString()); 
+        "Limits the size of any oplogs that are created to the specified size in megabytes.");
+    helpMap.put("-lru=", LocalizedStrings.SystemAdmin_LRU_OPTION_HELP.toLocalizedString());
+    helpMap.put("-lruAction=",
+        LocalizedStrings.SystemAdmin_LRUACTION_OPTION_HELP.toLocalizedString());
+    helpMap.put("-lruLimit=",
+        LocalizedStrings.SystemAdmin_LRULIMIT_OPTION_HELP.toLocalizedString());
+    helpMap.put("-concurrencyLevel=",
+        LocalizedStrings.SystemAdmin_CONCURRENCYLEVEL_OPTION_HELP.toLocalizedString());
+    helpMap.put("-initialCapacity=",
+        LocalizedStrings.SystemAdmin_INITIALCAPACITY_OPTION_HELP.toLocalizedString());
+    helpMap.put("-loadFactor=",
+        LocalizedStrings.SystemAdmin_LOADFACTOR_OPTION_HELP.toLocalizedString());
+    helpMap.put("-statisticsEnabled=",
+        LocalizedStrings.SystemAdmin_STATISTICSENABLED_OPTION_HELP.toLocalizedString());
+    helpMap.put("-region=", LocalizedStrings.SystemAdmin_REGION_OPTION_HELP.toLocalizedString());
+    helpMap.put("-monitor", LocalizedStrings.SystemAdmin_MONITOR_OPTION_HELP.toLocalizedString());
-                "-peer=<true|false> True, the default, causes the locator to find peers for other peers. False will cause the locator to not locate peers.");
+        "-peer=<true|false> True, the default, causes the locator to find peers for other peers. False will cause the locator to not locate peers.");
-                "-server=<true|false> True, the default, causes the locator to find servers for clients. False will cause the locator to not locate servers for clients.");
-    helpMap.put("-outputDir=",
-                "The directory where the disk store should be exported.");
+        "-server=<true|false> True, the default, causes the locator to find servers for clients. False will cause the locator to not locate servers for clients.");
+    helpMap.put("-outputDir=", "The directory where the disk store should be exported.");
-    usageMap.put("stats", "stats ([<instanceId>][:<typeId>][.<statId>])* [-details] [-nofilter|-persec|-persample] [-prunezeros] [-starttime=<time>] [-endtime=<time>] -archive=<statFile>");
+    usageMap.put("stats",
+        "stats ([<instanceId>][:<typeId>][.<statId>])* [-details] [-nofilter|-persec|-persample] [-prunezeros] [-starttime=<time>] [-endtime=<time>] -archive=<statFile>");
-    usageMap.put("stop-locator", "stop-locator [-port=<port>] [-address=<ipAddr>] [-dir=<locatorDir>]");
+    usageMap.put("stop-locator",
+        "stop-locator [-port=<port>] [-address=<ipAddr>] [-dir=<locatorDir>]");
-    usageMap.put("upgrade-disk-store", "upgrade-disk-store <diskStoreName> <directory>+ [-maxOplogSize=<int>]");
-    usageMap.put("compact-disk-store", "compact-disk-store <diskStoreName> <directory>+ [-maxOplogSize=<int>]");
+    usageMap.put("upgrade-disk-store",
+        "upgrade-disk-store <diskStoreName> <directory>+ [-maxOplogSize=<int>]");
+    usageMap.put("compact-disk-store",
+        "compact-disk-store <diskStoreName> <directory>+ [-maxOplogSize=<int>]");
-    usageMap.put("modify-disk-store", "modify-disk-store <diskStoreName> <directory>+ [-region=<regionName> [-remove|(-lru=<none|lru-entry-count|lru-heap-percentage|lru-memory-size>|-lruAction=<none|overflow-to-disk|local-destroy>|-lruLimit=<int>|-concurrencyLevel=<int>|-initialCapacity=<int>|-loadFactor=<float>|-statisticsEnabled=<boolean>)*]]");
+    usageMap.put("modify-disk-store",
+        "modify-disk-store <diskStoreName> <directory>+ [-region=<regionName> [-remove|(-lru=<none|lru-entry-count|lru-heap-percentage|lru-memory-size>|-lruAction=<none|overflow-to-disk|local-destroy>|-lruLimit=<int>|-concurrencyLevel=<int>|-initialCapacity=<int>|-loadFactor=<float>|-statisticsEnabled=<boolean>)*]]");
-    usageMap.put("export-disk-store", "export-disk-store <diskStoreName> <directory>+ [-outputDir=<directory>]");
+    usageMap.put("export-disk-store",
+        "export-disk-store <diskStoreName> <directory>+ [-outputDir=<directory>]");
+
-  private static String baselineDir = null;                                     // Baseline directory option value for backup command
+  private static String baselineDir = null; // Baseline directory option value for backup command
-    cmdOptionsMap.put("stats", new String[] {"-details", "-monitor", "-nofilter", "-persec", "-persample", "-prunezeros", "-archive=", "-starttime=", "-endtime="});
-    cmdOptionsMap
-        .put(START_LOCATOR, new String[] { "-port=", "-dir=", "-address=", "-properties=", "-D", "-X", "-peer=", "-server=", "-hostname-for-clients=" });
-    cmdOptionsMap.put("stop-locator",  new String[] {"-port=", "-dir=", "-address=", "-D"});
-    cmdOptionsMap.put("status-locator",  new String[] {"-dir=", "-D"});
-    cmdOptionsMap.put("info-locator",  new String[] {"-dir=", "-D"});
-    cmdOptionsMap.put("tail-locator-log",  new String[] {"-dir=", "-D"});
+    cmdOptionsMap.put("stats", new String[] {"-details", "-monitor", "-nofilter", "-persec",
+        "-persample", "-prunezeros", "-archive=", "-starttime=", "-endtime="});
+    cmdOptionsMap.put(START_LOCATOR, new String[] {"-port=", "-dir=", "-address=", "-properties=",
+        "-D", "-X", "-peer=", "-server=", "-hostname-for-clients="});
+    cmdOptionsMap.put("stop-locator", new String[] {"-port=", "-dir=", "-address=", "-D"});
+    cmdOptionsMap.put("status-locator", new String[] {"-dir=", "-D"});
+    cmdOptionsMap.put("info-locator", new String[] {"-dir=", "-D"});
+    cmdOptionsMap.put("tail-locator-log", new String[] {"-dir=", "-D"});
-    cmdOptionsMap.put("modify-disk-store", new String[] {"-region=", "-remove",
-                                                         "-lru=", "-lruAction=", "-lruLimit=",
-                                                         "-concurrencyLevel=",
-                                                         "-initialCapacity=",
-                                                         "-loadFactor=",
-                                                         "-statisticsEnabled="});
+    cmdOptionsMap.put("modify-disk-store",
+        new String[] {"-region=", "-remove", "-lru=", "-lruAction=", "-lruLimit=",
+            "-concurrencyLevel=", "-initialCapacity=", "-loadFactor=", "-statisticsEnabled="});
-    cmdOptionsMap.put("print-stacks", new String[]{"-all-threads"});
+    cmdOptionsMap.put("print-stacks", new String[] {"-all-threads"});
-      throw new IllegalArgumentException("Could not parse -maxOplogSize=" + arg
-                                         + " because: " + ex.getMessage());
+      throw new IllegalArgumentException(
+          "Could not parse -maxOplogSize=" + arg + " because: " + ex.getMessage());
-  
+
-      throw new IllegalArgumentException(LocalizedStrings.SystemAdmin_TIME_WAS_NOT_IN_THIS_FORMAT_0_1.toLocalizedString(new Object[] {DateFormatter.FORMAT_STRING, ex}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.SystemAdmin_TIME_WAS_NOT_IN_THIS_FORMAT_0_1
+              .toLocalizedString(new Object[] {DateFormatter.FORMAT_STRING, ex}));
-    String[] validArgs = (String[])cmdOptionsMap.get(cmd.toLowerCase());
-    for (int i=0; i < validArgs.length; i++) {
+    String[] validArgs = (String[]) cmdOptionsMap.get(cmd.toLowerCase());
+    for (int i = 0; i < validArgs.length; i++) {
-            int idx = argValue.indexOf( '=' );
-            String key = argValue.substring( 0, idx );
-            String value = argValue.substring( idx + 1 );
-            propertyOption.setProperty( key, value );
+            int idx = argValue.indexOf('=');
+            String key = argValue.substring(0, idx);
+            String value = argValue.substring(idx + 1);
+            propertyOption.setProperty(key, value);
-          } else if(validArgs[i].equals("-baseline=")) {
-            baselineDir=argValue;
+          } else if (validArgs[i].equals("-baseline=")) {
+            baselineDir = argValue;
-            throw new InternalGemFireException(LocalizedStrings.SystemAdmin_UNEXPECTED_VALID_OPTION_0.toLocalizedString(validArgs[i]));
+            throw new InternalGemFireException(
+                LocalizedStrings.SystemAdmin_UNEXPECTED_VALID_OPTION_0
+                    .toLocalizedString(validArgs[i]));
-        if (validArgs[i].equals("-h")
-            || validArgs[i].toLowerCase().matches("-{0,2}help")) {
+        if (validArgs[i].equals("-h") || validArgs[i].toLowerCase().matches("-{0,2}help")) {
-          throw new InternalGemFireException(LocalizedStrings.SystemAdmin_UNEXPECTED_VALID_OPTION_0.toLocalizedString(validArgs[i]));
+          throw new InternalGemFireException(LocalizedStrings.SystemAdmin_UNEXPECTED_VALID_OPTION_0
+              .toLocalizedString(validArgs[i]));
-    List<String> lines = format((String)helpMap.get(cmd.toLowerCase()), 80);
-    for(String line : lines) {
+    List<String> lines = format((String) helpMap.get(cmd.toLowerCase()), 80);
+    for (String line : lines) {
-  
+
-    for(String line : realLines) {
+    for (String line : realLines) {
-    
+
-    Pattern pattern = Pattern.compile("(.{0," + (width -1) + "}\\S|\\S{" + (width) +",})(\n|\\s+|$)");
-    
+    Pattern pattern =
+        Pattern.compile("(.{0," + (width - 1) + "}\\S|\\S{" + (width) + ",})(\n|\\s+|$)");
+
-    while(matcher.find()) {
+    while (matcher.find()) {
-    
+
-  
+
-    File prodDir= getProductDir();
+    File prodDir = getProductDir();
-    File hiddenDir = new File(prodDir.getParentFile(),"hidden");
+    File hiddenDir = new File(prodDir.getParentFile(), "hidden");
-      //If we don't have a jar file (eg, when running in eclipse), look for a hidden
-      //directory in same same directory as our classes.
+      // If we don't have a jar file (eg, when running in eclipse), look for a hidden
+      // directory in same same directory as our classes.
-      File oldHiddenDir = hiddenDir; 
-      if(libDir != null && libDir.exists()) {
+      File oldHiddenDir = hiddenDir;
+      if (libDir != null && libDir.exists()) {
-      } if(!hiddenDir.exists()) {
+      }
+      if (!hiddenDir.exists()) {
-    
+
-        String arg = (String)it.next();
+        String arg = (String) it.next();
-              LocalizedStrings.SystemAdmin_ERROR_UNKNOWN_OPTION_0
-                .toLocalizedString(arg));
+                LocalizedStrings.SystemAdmin_ERROR_UNKNOWN_OPTION_0.toLocalizedString(arg));
-        }
-        else {
+        } else {
-      System.err.println(LocalizedStrings.SystemAdmin_ERROR.toLocalizedString()
-        + ": " + getExceptionMessage(ex));
+      System.err.println(
+          LocalizedStrings.SystemAdmin_ERROR.toLocalizedString() + ": " + getExceptionMessage(ex));
-        System.err.println(LocalizedStrings.SystemAdmin_ERROR_WRONG_NUMBER_OF_COMMAND_LINE_ARGS.toLocalizedString());
+        System.err.println(LocalizedStrings.SystemAdmin_ERROR_WRONG_NUMBER_OF_COMMAND_LINE_ARGS
+            .toLocalizedString());
-    cmd = (String)cmdLine.remove(0);
+    cmd = (String) cmdLine.remove(0);
-//    File configFile = null;
+    // File configFile = null;
-        String arg = (String)it.next();
+        String arg = (String) it.next();
-              LocalizedStrings.SystemAdmin_ERROR_UNKNOWN_OPTION_0
-                .toLocalizedString(arg));
+                LocalizedStrings.SystemAdmin_ERROR_UNKNOWN_OPTION_0.toLocalizedString(arg));
-      System.err.println(LocalizedStrings.SystemAdmin_ERROR.toLocalizedString()
-        + ": " + getExceptionMessage(ex));
+      System.err.println(
+          LocalizedStrings.SystemAdmin_ERROR.toLocalizedString() + ": " + getExceptionMessage(ex));
-        statistics(sysDir, archiveOption, details, nofilter, persec, persample, prunezeros, monitor, startTime, endTime, cmdLine);
+        statistics(sysDir, archiveOption, details, nofilter, persec, persample, prunezeros, monitor,
+            startTime, endTime, cmdLine);
-          if ("CREATE".equals(option) ||
-              "FULL".equalsIgnoreCase(option)) {
+          if ("CREATE".equals(option) || "FULL".equalsIgnoreCase(option)) {
-          System.err.println( LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0.toLocalizedString(join(cmdLine)));
+          System.err.println(LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0
+              .toLocalizedString(join(cmdLine)));
-        System.out.println(
-          LocalizedStrings.SystemAdmin_GEMFIRE_PRODUCT_DIRECTORY_0
+        System.out.println(LocalizedStrings.SystemAdmin_GEMFIRE_PRODUCT_DIRECTORY_0
-          System.err.println( LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0.toLocalizedString(join(cmdLine)));
+          System.err.println(LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0
+              .toLocalizedString(join(cmdLine)));
-          System.err.println( LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0.toLocalizedString(join(cmdLine)));
+          System.err.println(LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0
+              .toLocalizedString(join(cmdLine)));
-        locatorStart(sysDir, portOption, addressOption, gemfirePropertiesFileOption, propertyOption, xoptions, peerOption, serverOption, hostnameForClientsOption);
+        locatorStart(sysDir, portOption, addressOption, gemfirePropertiesFileOption, propertyOption,
+            xoptions, peerOption, serverOption, hostnameForClientsOption);
-          System.out.println(LocalizedStrings.SystemAdmin_LOCATOR_START_COMPLETE.toLocalizedString());
+          System.out
+              .println(LocalizedStrings.SystemAdmin_LOCATOR_START_COMPLETE.toLocalizedString());
-          System.err.println( LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0.toLocalizedString(join(cmdLine)));
+          System.err.println(LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0
+              .toLocalizedString(join(cmdLine)));
-          System.out.println(LocalizedStrings.SystemAdmin_LOCATOR_STOP_COMPLETE.toLocalizedString());
+          System.out
+              .println(LocalizedStrings.SystemAdmin_LOCATOR_STOP_COMPLETE.toLocalizedString());
-          System.err.println( LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0.toLocalizedString(join(cmdLine)));
+          System.err.println(LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0
+              .toLocalizedString(join(cmdLine)));
-          System.err.println( LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0.toLocalizedString(join(cmdLine)));
+          System.err.println(LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0
+              .toLocalizedString(join(cmdLine)));
-          System.err.println( LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0.toLocalizedString(join(cmdLine)));
+          System.err.println(LocalizedStrings.SystemAdmin_ERROR_UNEXPECTED_COMMAND_LINE_ARGUMENTS_0
+              .toLocalizedString(join(cmdLine)));
-          System.err.println(LocalizedStrings.SystemAdmin_ERROR_EXPECTED_AT_LEAST_ONE_LOG_FILE_TO_MERGE.toLocalizedString());
+          System.err
+              .println(LocalizedStrings.SystemAdmin_ERROR_EXPECTED_AT_LEAST_ONE_LOG_FILE_TO_MERGE
+                  .toLocalizedString());
-        PasswordUtil.encrypt((String)cmdLine.get(0));
+        PasswordUtil.encrypt((String) cmdLine.get(0));
-        System.err.println(
-          LocalizedStrings.SystemAdmin_ERROR_UNKNOWN_COMMAND_0
-            .toLocalizedString(cmd));
+        System.err
+            .println(LocalizedStrings.SystemAdmin_ERROR_UNKNOWN_COMMAND_0.toLocalizedString(cmd));
-      System.err.println(
-          LocalizedStrings.SystemAdmin_ERROR_OPERATION_0_FAILED_BECAUSE_1
-            .toLocalizedString(new Object[] { cmd, getExceptionMessage(ex) }));
+      System.err.println(LocalizedStrings.SystemAdmin_ERROR_OPERATION_0_FAILED_BECAUSE_1
+          .toLocalizedString(new Object[] {cmd, getExceptionMessage(ex)}));
-      System.err.println(
-        LocalizedStrings.SystemAdmin_ERROR_OPERATION_0_FAILED_BECAUSE_1
+      System.err.println(LocalizedStrings.SystemAdmin_ERROR_OPERATION_0_FAILED_BECAUSE_1
-      System.err.println(
-          LocalizedStrings.SystemAdmin_ERROR_OPERATION_0_FAILED_BECAUSE_1
+      System.err.println(LocalizedStrings.SystemAdmin_ERROR_OPERATION_0_FAILED_BECAUSE_1
