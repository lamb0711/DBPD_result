GEODE-420: Cleaning up code parsing locators string

+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.Set;
+import java.util.StringTokenizer;
+
-
-import java.util.*;
-
-import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+import com.gemstone.gemfire.internal.lang.StringUtils;
- * 
- *
-  
+
-   *
-    this.membershipPortRange = 
-            getMembershipPortRangeString(config.getMembershipPortRange());
+    this.membershipPortRange = getMembershipPortRangeString(config.getMembershipPortRange());
-    
+
-    if (initialHosts == null)
+    if (initialHosts == null) {
-    initialHosts = initialHosts.trim();
-    
-    if (config.getMcastPort() > 0) {
-      this.mcastId = new DistributionLocatorId(config.getMcastAddress(), 
-                                               config.getMcastPort(), 
-                                               config.getBindAddress(),
-                                               this.sslConfig);
-      this.mcastEnabled = true;
-    else {
+    initialHosts = initialHosts.trim();
+
+    if (config.getMcastPort() > 0) {
+      this.mcastId = new DistributionLocatorId(config.getMcastAddress(), config.getMcastPort(), config.getBindAddress(), this.sslConfig);
+      this.mcastEnabled = true;
+    } else {
-    
+
-    }
-    else {
+    } else {
-      int startIdx = 0;
-      int endIdx = -1;
-      do {
-        String locator;
-        endIdx = initialHosts.indexOf(',', startIdx);
-        if (endIdx == -1) {
-          locator = initialHosts.substring(startIdx);
-        } else {
-          locator = initialHosts.substring(startIdx, endIdx);
-          startIdx = endIdx+1;
+      StringTokenizer stringTokenizer = new StringTokenizer(initialHosts, ",");
+      while (stringTokenizer.hasMoreTokens()) {
+        String locator = stringTokenizer.nextToken();
+        if (!StringUtils.isEmpty(locator)) {
+          locators.add(new DistributionLocatorId(locator));
-        locators.add(new DistributionLocatorId(locator));
+      }
-      } while (endIdx != -1);
-    
-  public RemoteTransportConfig(
-    boolean isMcastEnabled,
-    boolean isTcpDisabled,
-    boolean isAutoReconnectDisabled,
-    String bindAddress, 
-    SSLConfig sslConfig,
-    Collection ids, String membershipPortRange,
-    int tcpPort, int vmKind)
-  {
+  public RemoteTransportConfig(boolean isMcastEnabled,
+                               boolean isTcpDisabled,
+                               boolean isAutoReconnectDisabled,
+                               String bindAddress,
+                               SSLConfig sslConfig,
+                               Collection ids,
+                               String membershipPortRange,
+                               int tcpPort,
+                               int vmKind) {
-    
+
-    
+
-    
+
-        DistributionLocatorId id = (DistributionLocatorId)it.next();
+        DistributionLocatorId id = (DistributionLocatorId) it.next();
-        }
-        else {
+        } else {
- }
-  
-  
+  }
+
+
-    if (membershipPortRange != null && 
-        membershipPortRange.length == 2) {
-      membershipPortRangeString = membershipPortRange[0] + "-" + 
-                                  membershipPortRange[1];
+    if (membershipPortRange != null && membershipPortRange.length == 2) {
+      membershipPortRangeString = membershipPortRange[0] + "-" + membershipPortRange[1];
-    
+
-  
+
-  
+
-  
+
-  
+
-  
+
-	  return this.bindAddress;
+    return this.bindAddress;
-  
+
-	  return this.sslConfig;
+    return this.sslConfig;
-  
+
-  
+
-  
+
-   *
-    props.setProperty(BIND_ADDRESS,
-                      bindAddress);
-//    System.out.println("entering ds port range property of " + this.membershipPortRange);
+    props.setProperty(BIND_ADDRESS, bindAddress);
+    //    System.out.println("entering ds port range property of " + this.membershipPortRange);
-       // Fix bug 32849
-      props.setProperty(MCAST_ADDRESS,
-                         String.valueOf(this.mcastId.getHost().getHostAddress()));
-      props.setProperty(MCAST_PORT,
-                        String.valueOf(this.mcastId.getPort()));
+      // Fix bug 32849
+      props.setProperty(MCAST_ADDRESS, String.valueOf(this.mcastId.getHost().getHostAddress()));
+      props.setProperty(MCAST_PORT, String.valueOf(this.mcastId.getPort()));
-    }
-    else {
-      props.setProperty(MCAST_PORT,
-                        String.valueOf(0));
+    } else {
+      props.setProperty(MCAST_PORT, String.valueOf(0));
-      DistributionLocatorId locator =
-          (DistributionLocatorId) iter.next();
+      DistributionLocatorId locator = (DistributionLocatorId) iter.next();
-        }
-        else {
+        } else {
+    String tempLocatorString = locators.toString();
+    if (tempLocatorString.endsWith(",")) {
+      tempLocatorString = tempLocatorString.substring(0, tempLocatorString.length() - 1);
+    }
-    props.setProperty(LOCATORS,
-        locators.toString());
+    props.setProperty(LOCATORS, tempLocatorString);
-    
-    props.setProperty(DISABLE_TCP,
-      this.tcpDisabled? "true" : "false");
-    
-    props.setProperty(DISABLE_AUTO_RECONNECT, this.disableAutoReconnect? "true" : "false");
+
+    props.setProperty(DISABLE_TCP, this.tcpDisabled ? "true" : "false");
+
+    props.setProperty(DISABLE_AUTO_RECONNECT, this.disableAutoReconnect ? "true" : "false");
-      DistributionLocatorId dli = (DistributionLocatorId)it.next();
+      DistributionLocatorId dli = (DistributionLocatorId) it.next();
-  
-  /** returns a locators string suitable for use in locators= in gemfire.properties */
+
+  /**
+   * returns a locators string suitable for use in locators= in gemfire.properties
+   */
-  
- // -------------------------------------------------------------------------
+
+  // -------------------------------------------------------------------------
-  
+
-      RemoteTransportConfig other = (RemoteTransportConfig)o;
-      return (this.mcastEnabled == other.mcastEnabled)
-        && this.ids.equals(other.ids);
+      RemoteTransportConfig other = (RemoteTransportConfig) o;
+      return (this.mcastEnabled == other.mcastEnabled) && this.ids.equals(other.ids);
-  
+
-  
+
