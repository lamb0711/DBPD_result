GEODE-8170: change all hash and set commands to use function (#5125)

All hash and set commands now use the new function+delta data model.
This allowed the synchronized keyword to be removed from RedisHash and RedisSet.

+import java.util.Arrays;
+import java.util.regex.Pattern;
+import org.apache.geode.redis.internal.Coder;
+  public int hexists(ByteArrayWrapper key, ByteArrayWrapper field) {
+    return getRedisHash(key).hexists(field);
+  }
+
+  @Override
+  public ByteArrayWrapper hget(ByteArrayWrapper key, ByteArrayWrapper field) {
+    return getRedisHash(key).hget(field);
+  }
+
+  @Override
+  public int hlen(ByteArrayWrapper key) {
+    return getRedisHash(key).hlen();
+  }
+
+  @Override
+  public List<ByteArrayWrapper> hmget(ByteArrayWrapper key, List<ByteArrayWrapper> fields) {
+    return getRedisHash(key).hmget(fields);
+  }
+
+  @Override
+  public Collection<ByteArrayWrapper> hvals(ByteArrayWrapper key) {
+    return getRedisHash(key).hvals();
+  }
+
+  @Override
+  public Collection<ByteArrayWrapper> hkeys(ByteArrayWrapper key) {
+    return getRedisHash(key).hkeys();
+  }
+
+  @Override
+  public List<Object> hscan(ByteArrayWrapper key, Pattern matchPattern, int count, int cursor) {
+    return getRedisHash(key).hscan(matchPattern, count, cursor);
+  }
+
+  @Override
+  public long hincrby(ByteArrayWrapper key, ByteArrayWrapper field, long increment) {
+    RedisHash hash = checkType(region.get(key));
+    if (hash != null) {
+      return hash.hincrby(region, key, field, increment);
+    } else {
+      region.put(key,
+          new RedisHash(Arrays.asList(field, new ByteArrayWrapper(Coder.longToBytes(increment)))));
+      return increment;
+    }
+  }
+
+  @Override
+  public double hincrbyfloat(ByteArrayWrapper key, ByteArrayWrapper field, double increment) {
+    RedisHash hash = checkType(region.get(key));
+    if (hash != null) {
+      return hash.hincrbyfloat(region, key, field, increment);
+    } else {
+      region.put(key,
+          new RedisHash(
+              Arrays.asList(field, new ByteArrayWrapper(Coder.doubleToBytes(increment)))));
+      return increment;
+    }
+  }
+
+  @Override
