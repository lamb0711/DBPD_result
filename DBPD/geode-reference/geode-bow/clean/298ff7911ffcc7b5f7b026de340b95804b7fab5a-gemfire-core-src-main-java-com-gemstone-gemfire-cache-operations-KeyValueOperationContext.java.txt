GEODE-86: add a way to get the deserialized value to KeyValueOperationContext

KeyValueOperationContext now has a getDeserializedValue method that can be used
to get the operation value as a deserialized object.
The javadocs on getValue now explain that the result may be a serialized blob.
Unit test coverage has been added for PutOperationContext and GetOperationContextImpl
which are subclasses of KeyValueOperationContext.

+import com.gemstone.gemfire.DataSerializer;
+import com.gemstone.gemfire.SerializationException;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+
-  protected Object value;
+  private Object value;
-   * The serialized value of the create/update operation.
-   */
-  private byte[] serializedValue;
-
-  /**
-   * @return the serialized value for this operation.
+   * @return the serialized value for this operation or null if the value is not serialized
-    return this.serializedValue;
+    if (isObject()) {
+      Object tmp = this.value;
+      if (tmp instanceof byte[]) {
+        return (byte[])tmp;
+      }
+    }
+    return null;
+  }
+  
+  /**
+   * Get the deserialized value for this operation.
+   * Note that if the value is serialized this method will attempt to deserialize it.
+   * If PDX read-serialized is set to true and the value was serialized with PDX
+   * then this method will return a PdxInstance.
+   * 
+   * @return the deserialized value for this operation
+   * @throws SerializationException if deserialization of the value fails
+   * @since Geode 1.0
+   */
+  public Object getDeserializedValue() throws SerializationException {
+    byte[] blob = getSerializedValue();
+    if (blob != null) {
+      return EntryEventImpl.deserialize(blob);
+    }
+    return this.value;
+   * Note that if the value is serialized then a byte array
+   * will be returned that contains the serialized bytes.
+   * To figure out if the returned byte array contains serialized bytes
+   * or is the deserialized value call {@link #isObject()}.
+   * If you need to deserialize the serialized bytes use 
+   * {@link DataSerializer#readObject(java.io.DataInput)}
+   * or you can just call {@link #getDeserializedValue()}.
-   * @return the value for this operation.
+   * @return the value for this operation
-    
-    if (serializedValue != null) {
-      return serializedValue;
-    }
-    else {
-      return value;
-    }
+    return this.value;
-    this.serializedValue = serializedValue;
-    this.value = null;
-    this.isObject = isObject;
+    setValue(serializedValue, isObject);
-    if (value instanceof byte[]) {
-      setSerializedValue((byte[])value, isObject);
-    }
-    else {
-      this.serializedValue = null;
-      this.value = value;
-      this.isObject = isObject;
-    }
+    this.value = value;
+    this.isObject = isObject;
