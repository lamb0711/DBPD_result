GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          LocalizedStrings.CacheXmlParser_WHILE_PARSING_XML.toLocalizedString(), ex);
+          "While parsing XML", ex);
-          LocalizedStrings.CacheXmlParser_MALFORMED_INTEGER_0.toLocalizedString(s), ex);
+          String.format("Malformed integer %s", s), ex);
-          LocalizedStrings.CacheXmlParser_MALFORMED_INTEGER_0.toLocalizedString(s), ex);
+          String.format("Malformed integer %s", s), ex);
-          LocalizedStrings.CacheXmlParser_MALFORMED_FLOAT_0.toLocalizedString(s), ex);
+          String.format("Malformed float %s", s), ex);
-          LocalizedStrings.CacheXmlParser_NO_CACHE_ELEMENT_SPECIFIED.toLocalizedString());
+          "No cache element specified.");
-            LocalizedStrings.SerialGatewaySender_UNKNOWN_GATEWAY_ORDER_POLICY_0_1
-                .toLocalizedString(new Object[] {id, orderPolicy}));
+            String.format("An invalid order-policy value (%s) was configured for gateway sender %s",
+                new Object[] {id, orderPolicy}));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] {d.getClass().getName(), "BridgeLoadProbe"}));
+      throw new CacheXmlException(String.format("A %s is not an instance of a %s",
+          new Object[] {d.getClass().getName(), "BridgeLoadProbe"}));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_GATEWAYCONFLICTRESOLVER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A %s is not an instance of a GatewayConflictResolver.",
+              d.getClass().getName()));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELISTENER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A  %s  is not an instance of a CacheListener.",
+              d.getClass().getName()));
-          LocalizedStrings.CacheXmlParser_NULL_DiskStoreName.toLocalizedString());
+          "Disk Store name is configured to use null name.");
-            LocalizedStrings.DistributedSystemConfigImpl_0_IS_NOT_A_VALID_INTEGER_1
-                .toLocalizedString(new Object[] {maxInputFileSizeMB, param}),
+            String.format("%s is not a valid integer for %s",
+                new Object[] {maxInputFileSizeMB, param}),
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_TRANSACTION_WRITER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A  %s  is not an instance of a TransactionWriter.",
+              d.getClass().getName()));
-          LocalizedStrings.CacheXmlParser_UNKNOWN_SCOPE_0.toLocalizedString(scope));
+          String.format("Unknown scope:  %s", scope));
-          LocalizedStrings.CacheXmlParser_UNKNOWN_MIRROR_TYPE_0.toLocalizedString(mirror));
+          String.format("Unknown mirror type:  %s", mirror));
-            LocalizedStrings.CacheXmlParser_UNKNOWN_DATA_POLICY_0.toLocalizedString(dp));
+            String.format("Unknown data policy:  %s", dp));
-          LocalizedStrings.CacheXmlParser_COULD_NOT_LOAD_KEYCONSTRAINT_CLASS_0
-              .toLocalizedString(className),
+          String.format("Could not load key-constraint class:  %s",
+              className),
-          LocalizedStrings.CacheXmlParser_COULD_NOT_LOAD_VALUECONSTRAINT_CLASS_0
-              .toLocalizedString(className),
+          String.format("Could not load value-constraint class:  %s",
+              className),
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
-              .toLocalizedString(dependentElement));
+          String.format("A  %s  must be defined in the context of region-attributes.",
+              dependentElement));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_PARTITIONATTRIBUTES
-              .toLocalizedString(dependentElement));
+          String.format("A %s must be defined in the context of partition-attributes",
+              dependentElement));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_PARTITIONATTRIBUTES
-              .toLocalizedString(ENTRY_TIME_TO_LIVE));
+          String.format(
+              "A  %s  must be defined in the context of region-attributes or partition-attributes.",
+              ENTRY_TIME_TO_LIVE));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_PARTITIONATTRIBUTES
-              .toLocalizedString(ENTRY_IDLE_TIME));
+          String.format(
+              "A  %s  must be defined in the context of region-attributes or partition-attributes.",
+              ENTRY_IDLE_TIME));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
-              .toLocalizedString(DISK_DIRS));
+          String.format("A  %s  must be defined in the context of region-attributes.",
+              DISK_DIRS));
-          LocalizedStrings.CacheXmlParser_UNKNOWN_INTERESTPOLICY_0.toLocalizedString(ip));
+          String.format("Unknown interest-policy:  %s", ip));
-                LocalizedMessage.create(LocalizedStrings.CacheXmlParser_UNKNOWN_INDEX_TYPE, type));
+                "Unknown index type defined as {}, will be set to range index", type);
-          LocalizedStrings.CacheXmlParser_CACHEXMLPARSERENDINDEXINDEX_CREATION_ATTRIBUTE_NOT_CORRECTLY_SPECIFIED
-              .toLocalizedString());
+          "CacheXmlParser::endIndex:Index creation attribute not correctly specified.");
-          LocalizedStrings.CacheXmlParser_CACHEXMLPARSERSTARTFUNCTIONALINDEXINDEX_CREATION_ATTRIBUTE_NOT_CORRECTLY_SPECIFIED
-              .toLocalizedString());
+          "CacheXmlParser::startFunctionalIndex:Index creation attribute not correctly specified.");
-          LocalizedStrings.CacheXmlParser_CACHEXMLPARSERSTARTPRIMARYKEYINDEXPRIMARYKEY_INDEX_CREATION_FIELD_IS_NULL
-              .toLocalizedString());
+          "CacheXmlParser::startPrimaryKeyIndex:Primary-Key Index creation field is null.");
-          LocalizedStrings.CacheXmlParser_UNKNOWN_EXPIRATION_ACTION_0.toLocalizedString(action));
+          String.format("Unknown expiration action:  %s", action));
-      logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, LocalizedMessage.create(
-          LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_PROPERTIES__0, props));
+      logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, "XML Parser createDeclarable properties: {}",
+          props);
-      logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, LocalizedMessage.create(
-          LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_CLASS_NAME_0, className));
+      logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, "XML Parser createDeclarable class name: {}",
+          className);
-          LocalizedStrings.CacheXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_DECLARABLE
-              .toLocalizedString(className));
+          String.format("Class %s is not an instance of Declarable.",
+              className));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_COMPRESSOR
-              .toLocalizedString(klass.getName()));
+          String.format("A  %s  is not an instance of a Compressor.",
+              klass.getName()));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0
-          .toLocalizedString(klass.getName()), ex);
+      throw new CacheXmlException(String.format("While instantiating a  %s",
+          klass.getName()), ex);
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_1
-              .toLocalizedString(new Object[] {COMPRESSOR, DYNAMIC_REGION_FACTORY}));
+          String.format("A  %s  must be defined in the context of region-attributes or  %s",
+              new Object[] {COMPRESSOR, DYNAMIC_REGION_FACTORY}));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELOADER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A  %s  is not an instance of a CacheLoader.",
+              d.getClass().getName()));
-            LocalizedStrings.CacheXmlParser_A_CACHELOADER_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
-                .toLocalizedString());
+            "A cache-loader must be defined in the context of region-attributes.");
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES_OR_1
-              .toLocalizedString(new Object[] {CACHE_LOADER, DYNAMIC_REGION_FACTORY}));
+          String.format("A  %s  must be defined in the context of region-attributes or  %s",
+              new Object[] {CACHE_LOADER, DYNAMIC_REGION_FACTORY}));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHEWRITER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A  %s  is not an instance of a CacheWriter.",
+              d.getClass().getName()));
-            LocalizedStrings.CacheXmlParser_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_1
-                .toLocalizedString(new Object[] {CACHE_WRITER, DYNAMIC_REGION_FACTORY}));
+            String.format("%s  must be defined in the context of  %s",
+                new Object[] {CACHE_WRITER, DYNAMIC_REGION_FACTORY}));
-          LocalizedStrings.CacheXmlParser_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_REGIONATTRIBUTES
-              .toLocalizedString(CACHE_WRITER));
+          String.format("%s  must be defined in the context of region-attributes.",
+              CACHE_WRITER));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_CUSTOMEXPIRY
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A %s is not an instance of CustomExpiry",
+              d.getClass().getName()));
-            LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_OBJECTSIZER
-                .toLocalizedString(d.getClass().getName()));
+            String.format("A  %s  is not an instance of a ObjectSizer.",
+                d.getClass().getName()));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_CACHELISTENER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A  %s  is not an instance of a CacheListener.",
+              d.getClass().getName()));
-        throw new InternalGemFireException(LocalizedStrings.AsyncEventQueue_UNKNOWN_ORDER_POLICY_0_1
-            .toLocalizedString(new Object[] {id, orderPolicy}));
+        throw new InternalGemFireException(String.format(
+            "An invalid order-policy value (%s) was configured for AsyncEventQueue %s",
+            new Object[] {id, orderPolicy}));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_ASYNCEVENTLISTENER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A  %s  is not an instance of a AsyncEventListener",
+              d.getClass().getName()));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_ASYNCEVENTQUEUE
-              .toLocalizedString(dependentElement));
+          String.format("A  %s  must be defined in the context of async-event-queue.",
+              dependentElement));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] {d.getClass().getName(), "PartitionResolver"}));
+      throw new CacheXmlException(String.format("A %s is not an instance of a %s",
+          new Object[] {d.getClass().getName(), "PartitionResolver"}));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] {d.getClass().getName(), "PartitionListener"}));
+      throw new CacheXmlException(String.format("A %s is not an instance of a %s",
+          new Object[] {d.getClass().getName(), "PartitionListener"}));
-          LocalizedStrings.CacheXmlParser_EXPECTED_A_FUNCTIONSERVICECREATION_INSTANCE
-              .toLocalizedString());
+          "Expected a FunctionServiceCreation instance");
-      String s = LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_FUNCTION
-          .toLocalizedString(d.getClass().getName());
+      String s = String.format("A %s is not an instance of a Function",
+          d.getClass().getName());
-          LocalizedStrings.CacheXmlParser_A_0_IS_ONLY_ALLOWED_IN_THE_CONTEXT_OF_1_MJTDEBUG_E_2
-              .toLocalizedString(new Object[] {FUNCTION, FUNCTION_SERVICE, fs}));
+          String.format("A %s is only allowed in the context of %s MJTDEBUG e=%s",
+              new Object[] {FUNCTION, FUNCTION_SERVICE, fs}));
-          LocalizedStrings.CacheXmlParser_NO_CLASSNAME_FOUND.toLocalizedString());
+          "A string class-name was expected, but not found while parsing.");
-          LocalizedStrings.CacheXmlParser_A_0_CLASS_NOT_FOUND.toLocalizedString(className), e);
+          String.format("Unable to load class %s", className), e);
-          LocalizedStrings.CacheXmlParser_A_0_NOT_A_SERIALIZER.toLocalizedString(c.getName()));
+          String.format(
+              "The class %s presented for serializer registration does not extend DataSerializer and cannot be registered.",
+              c.getName()));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_DATA_SERIALIZABLE
-          .toLocalizedString(c.getName()));
+      throw new CacheXmlException(String.format(
+          "The class %s, presented for instantiator registration is not an instance of DataSerializable and cannot be registered.",
+          c.getName()));
-      String s = LocalizedStrings.CacheXmlParser_NO_SERIALIZATION_ID.toLocalizedString();
+      String s = "The instantiator registration did not include an ID attribute.";
-            LocalizedStrings.CacheXmlParser_UNKNOWN_XML_ELEMENT_0.toLocalizedString(qName));
+            String.format("Unknown XML element %s", qName));
-              LocalizedStrings.CacheXmlParser_EXCEPTION_IN_PARSING_ELEMENT_0_THIS_IS_A_REQUIRED_FIELD
-                  .toLocalizedString(qName);
+              String.format("Exception in parsing element %s. This is a required field.",
+                  qName);
-              LocalizedStrings.CacheXmlParser_EXCEPTION_IN_PARSING_ELEMENT_0_THIS_IS_A_REQUIRED_FIELD
-                  .toLocalizedString(qName);
+              String.format("Exception in parsing element %s. This is a required field.",
+                  qName);
-              LocalizedStrings.CacheXmlParser_UNKNOWN_XML_ELEMENT_0.toLocalizedString(qName));
+              String.format("Unknown XML element %s", qName));
-          LocalizedStrings.CacheXmlParser_A_CACHEEXCEPTION_WAS_THROWN_WHILE_PARSING_XML
-              .toLocalizedString(),
+          "A CacheException was thrown while parsing XML.",
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] {d.getClass().getName(), "GatewayTransportFilter"}));
+      throw new CacheXmlException(String.format("A %s is not an instance of a %s",
+          d.getClass().getName(), "GatewayTransportFilter"));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_GATEWAYSENDER_OR_GATEWAYRECEIVER
-              .toLocalizedString(GATEWAY_TRANSPORT_FILTER));
+          String.format(
+              "A  %s  must be defined in the context of gateway-sender or gateway-receiver.",
+              GATEWAY_TRANSPORT_FILTER));
-      throw new CacheXmlException(LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1
-          .toLocalizedString(new Object[] {d.getClass().getName(), "GatewayEventFilter"}));
+      throw new CacheXmlException(String.format("A %s is not an instance of a %s",
+          new Object[] {d.getClass().getName(), "GatewayEventFilter"}));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_GATEWAY_SENDER_OR_ASYNC_EVENT_QUEUE
-              .toLocalizedString("GatewayEventFilter"));
+          String.format(
+              "A  %s  must be defined in the context of gateway-sender or async-event-queue.",
+              "GatewayEventFilter"));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_1.toLocalizedString(
+          String.format("A %s is not an instance of a %s",
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_GATEWAY_SENDER_OR_ASYNC_EVENT_QUEUE
-              .toLocalizedString("GatewayEventSubstitutionFilter"));
+          String.format(
+              "A  %s  must be defined in the context of gateway-sender or async-event-queue.",
+              "GatewayEventSubstitutionFilter"));
-          LocalizedStrings.CacheXmlParser_A_0_MUST_BE_DEFINED_IN_THE_CONTEXT_OF_GATEWAY_SENDER
-              .toLocalizedString(dependentElement));
+          String.format("A  %s  must be defined in the context of gateway-sender.",
+              dependentElement));
-          LocalizedStrings.CacheXmlParser_A_0_IS_NOT_AN_INSTANCE_OF_A_PDX_SERIALIZER
-              .toLocalizedString(d.getClass().getName()));
+          String.format("A  %s  is not an instance of a PdxSerializer.",
+              d.getClass().getName()));
-          LocalizedStrings.CacheXmlParser_WHILE_INSTANTIATING_A_0.toLocalizedString(className), ex);
+          String.format("While instantiating a  %s", className), ex);
-          LocalizedStrings.CacheXmlParser_CLASS_0_IS_NOT_AN_INSTANCE_OF_DECLARABLE
-              .toLocalizedString(className));
+          String.format("Class %s is not an instance of Declarable.",
+              className));
-            LocalizedStrings.CacheXmlParser_ONLY_A_PARAMETER_IS_ALLOWED_IN_THE_CONTEXT_OF_0
-                .toLocalizedString(globalOrLocal));
+            String.format("Only a parameter is allowed in the context of  %s",
+                globalOrLocal));
-              LocalizedMessage.create(
-                  LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_APPENDED_CHARACTER_DATA_0,
-                  chars));
+              "XML Parser characters, appended character data: {}",
+              chars);
-          logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, LocalizedMessage.create(
-              LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_NEW_CHARACTER_DATA_0, chars));
+          logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE,
+              "XML Parser characters, new character data: {}", chars);
