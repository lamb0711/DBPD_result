GEODE-4917: Remove dead and redundant code from LinkedStructSet.

* Minor refactors of unnecessarily verbose if-statements.
-import java.util.Collection;
-import java.util.SortedSet;
-import org.apache.geode.pdx.internal.PdxInstanceImpl;
-  public LinkedStructSet() {};
+  public LinkedStructSet() {}
-    if (!(other instanceof SortedStructSet)) {
-      return false;
-    }
-    if (!this.structType.equals(((SortedStructSet) other).structType)) {
-      return false;
-    }
-    return super.equals(other);
+    return other instanceof SortedStructSet
+        && this.structType.equals(((SortedStructSet) other).structType) && super.equals(other);
-    // return addFieldValues(s.getFieldValues());
-  /**
-   * For internal use. Just add the Object[] values for a struct with same type
-   *
-   * public boolean addFieldValues(Object[] fieldValues) { //return super.add(fieldValues);
-   * StructImpl s = new StructImpl(this.structType, fieldValues); return super.add(s); }
-   */
-
-    if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {
-      return false;
-    }
-    return contains(s);
-    // return containsFieldValues(s.getFieldValues());
+    return this.structType.equals(StructTypeImpl.typeFromStruct(s)) && contains(s);
-  /**
-   * Does this set contain a Struct of the correct type with the specified values?
-   *
-   * public boolean containsFieldValues(Object[] fieldValues) { return super.contains(fieldValues);
-   * }
-   */
-
-    if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {
-      return false;
-    }
-    return remove(s);
-    // return removeFieldValues(s.getFieldValues());
-  }
-
-  /**
-   * Remove the field values from a struct of the correct type public boolean
-   * removeFieldValues(Object[] fieldValues) { return super.remove(fieldValues); }
-   */
-
-  // downcast StructSets to call more efficient methods
-  @Override
-  public boolean addAll(Collection c) {
-    // if (c instanceof StructSet) {
-    // return addAll((StructSet)c);
-    // }
-    return super.addAll(c);
+    return this.structType.equals(StructTypeImpl.typeFromStruct(s)) && remove(s);
-  public boolean removeAll(Collection c) {
-    // if (c instanceof StructSet) {
-    // return removeAll((StructSet)c);
-    // }
-    return super.removeAll(c);
-  }
-
-  @Override
-  public boolean retainAll(Collection c) {
-    // if (c instanceof StructSet) {
-    // return retainAll((StructSet)c);
-    // }
-    return super.retainAll(c);
-  }
-
-  // public boolean addAll(StructSet ss) {
-  // boolean modified = false;
-  // if (!this.structType.equals(ss.structType)) { throw new
-  // IllegalArgumentException(LocalizedStrings.SortedStructSet_TYPES_DONT_MATCH.toLocalizedString());
-  // }
-  // for (Iterator itr = ss.fieldValuesIterator(); itr.hasNext();) {
-  // Struct vals = (Struct) itr.next();
-  // if (super.add(vals)) {
-  // modified = true;
-  // }
-  // }
-  // return modified;
-  // }
-
-  // public boolean removeAll(StructSet ss) {
-  // boolean modified = false;
-  // if (!this.structType.equals(ss.structType)) { return false; // nothing
-  // // modified
-  // }
-  // for (Iterator itr = ss.fieldValuesIterator(); itr.hasNext();) {
-  // Struct vals = (Struct) itr.next();
-  // if (super.remove(vals)) {
-  // modified = true;
-  // }
-  // }
-  // return modified;
-  // }
-  //
-  // public boolean retainAll(StructSet ss) {
-  // if (!this.structType.equals(ss.structType)) {
-  // if (isEmpty()) {
-  // return false; // nothing modified
-  // }
-  // else {
-  // clear();
-  // return true; // nothing retained in receiver collection
-  // }
-  // }
-  // boolean changed = false;
-  // int size = size();
-  // Iterator it;
-  // it = fieldValuesIterator();
-  // while (size-- > 0) {
-  // Struct val = (Struct) it.next();
-  // //if (!ss.containsFieldValues(vals)) {
-  // if (!ss.contains(val)) {
-  // it.remove();
-  // changed = true;
-  // }
-  // }
-  // return changed;
-  // }
-
-  /** Returns an Iterator over the Structs in this set */
-  @Override
-  public Iterator iterator() {
-    return new StructIterator(fieldValuesIterator());
-  }
-
-  /** Returns an iterator over the fieldValues Object[] instances */
-  public Iterator fieldValuesIterator() {
-    return super.iterator();
-  }
-
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    StringBuffer buf = new StringBuffer();
+    StringBuilder buf = new StringBuilder();
-  /**
-   * Iterator wrapper to construct Structs on demand.
-   */
-  private static class StructIterator implements Iterator {
-
-    private final Iterator itr;
-
-    StructIterator(Iterator itr) {
-      this.itr = itr;
-    }
-
-    public boolean hasNext() {
-      return this.itr.hasNext();
-    }
-
-    public Object next() {
-      return this.itr.next();
-    }
-
-    public void remove() {
-      this.itr.remove();
-    }
-  }
-
+  @Override
-    this.structType = (StructTypeImpl) DataSerializer.readObject(in);
+    this.structType = DataSerializer.readObject(in);
+  @Override
-
+  @Override
-    for (Iterator<Struct> i = this.iterator(); i.hasNext();) {
-      Struct struct = i.next();
+    for (Struct struct : this) {
