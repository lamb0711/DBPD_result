GEODE-3513: Removing the use of native sessions session caching

In the session module for generic app servers, we were asking the
application server for a 'native' session and then wrapping it on our
own GemfireHttpSession. However, we were not cleaning up that native
session, which means that in PROXY mode we were leaving these sessions
on the client with them being useful.

The GemfireHttpSession now no longer wraps a native session. We are
still temporarily creating a native session because it is the only way
for us to get the session timeout value that was configured in web.xml,
but the native session is immediately invalidated.

Adding and extending cargo session tests to test how sessions are being
cleaned up from the clients and the server.

This closes #740

+import org.apache.geode.internal.InternalDataSerializer;
+import org.apache.geode.internal.Version;
+  protected long creationTime;
+
+  public long getCreationTime() {
+    return creationTime;
+  }
+
+  @Override
+  public void setCreationTime(long creationTime) {
+    this.creationTime = creationTime;
+  }
+
+  @Override
+    toDataPre_GEODE_1_3_0_0(out);
+    out.writeLong(creationTime);
+  }
+
+  public void toDataPre_GEODE_1_3_0_0(DataOutput out) throws IOException {
+    fromDataPre_GEODE_1_3_0_0(in);
+    creationTime = in.readLong();
+  }
+
+  private void fromDataPre_GEODE_1_3_0_0(DataInput in) throws IOException, ClassNotFoundException {
