Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An instruction to all members with cache that their PR should gracefully
- * close and disconnect DS
+ * An instruction to all members with cache that their PR should gracefully close and disconnect DS
-  
+
-  static final long SLEEP_TIME_BEFORE_DISCONNECT_DS = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "sleep-before-disconnect-ds", 1000).longValue();
+  static final long SLEEP_TIME_BEFORE_DISCONNECT_DS = Long
+      .getLong(DistributionConfig.GEMFIRE_PREFIX + "sleep-before-disconnect-ds", 1000).longValue();
-  public ShutdownAllRequest() {
-  }
+  public ShutdownAllRequest() {}
-   * Sends a shutdownAll request to all other members and performs local
-   * shutdownAll processing in the waitingThreadPool.
+   * Sends a shutdownAll request to all other members and performs local shutdownAll processing in
+   * the waitingThreadPool.
-    
+
-    DistributionManager dism = (dm instanceof DistributionManager) ? (DistributionManager)dm : null;
+    DistributionManager dism =
+        (dm instanceof DistributionManager) ? (DistributionManager) dm : null;
-    
+
-    
+
-    
+
-    
+
-          response = AdminFailureResponse.create(dism, myId, ex); 
+          response = AdminFailureResponse.create(dism, myId, ex);
-    
+
-      if(!replyProcessor.waitForReplies(timeout)) {
+      if (!replyProcessor.waitForReplies(timeout)) {
-      if(!(e.getCause() instanceof CancelException)) {
+      if (!(e.getCause() instanceof CancelException)) {
-      // at this point,GemFireCacheImpl.getInstance() might return null, 
-      // because the cache is closed at GemFireCacheImpl.getInstance().shutDownAll() 
+      // at this point,GemFireCacheImpl.getInstance() might return null,
+      // because the cache is closed at GemFireCacheImpl.getInstance().shutDownAll()
-    
+
-      Thread.sleep(3*SLEEP_TIME_BEFORE_DISCONNECT_DS);
+      Thread.sleep(3 * SLEEP_TIME_BEFORE_DISCONNECT_DS);
-  
+
-  
+
-    
+
-    if(cache != null && !cache.isClosed()) {
+    if (cache != null && !cache.isClosed()) {
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-        
+
-          if (!this.getSender().equals(me)) {  
+          if (!this.getSender().equals(me)) {
-  
+
-  public void fromData(DataInput in) throws IOException,ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  @Override  
+  @Override
-    return "ShutdownAllRequest sent to " + Arrays.toString(this.getRecipients()) +
-      " from " + this.getSender();
+    return "ShutdownAllRequest sent to " + Arrays.toString(this.getRecipients()) + " from "
+        + this.getSender();
-    /* 
-     * If response arrives, we will save into results and keep wait for member's 
-     * departure. If the member is departed before sent response, no wait
-     * for its response
-     * @see org.apache.geode.distributed.internal.ReplyProcessor21#process(org.apache.geode.distributed.internal.DistributionMessage)
+    /*
+     * If response arrives, we will save into results and keep wait for member's departure. If the
+     * member is departed before sent response, no wait for its response
+     * 
+     * @see
+     * org.apache.geode.distributed.internal.ReplyProcessor21#process(org.apache.geode.distributed.
+     * internal.DistributionMessage)
-      if(msg instanceof ShutdownAllResponse) {
-        if (((ShutdownAllResponse)msg).isToShutDown()) {
+      if (msg instanceof ShutdownAllResponse) {
+        if (((ShutdownAllResponse) msg).isToShutDown()) {
-        }
-        else {
+        } else {
-        
+
-      
+
-        ReplyException ex = ((ReplyMessage)msg).getException();
+        ReplyException ex = ((ReplyMessage) msg).getException();
