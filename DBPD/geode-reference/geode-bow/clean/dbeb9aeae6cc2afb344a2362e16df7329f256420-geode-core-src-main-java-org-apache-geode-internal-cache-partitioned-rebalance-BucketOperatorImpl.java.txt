Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  public boolean moveBucket(InternalDistributedMember source,
-      InternalDistributedMember target, int bucketId,
-      Map<String, Long> colocatedRegionBytes) {
+  public boolean moveBucket(InternalDistributedMember source, InternalDistributedMember target,
+      int bucketId, Map<String, Long> colocatedRegionBytes) {
-    InternalResourceManager.getResourceObserver().movingBucket(
-        rebalanceOp.getLeaderRegion(), bucketId, source, target);
+    InternalResourceManager.getResourceObserver().movingBucket(rebalanceOp.getLeaderRegion(),
+        bucketId, source, target);
-  public boolean movePrimary(InternalDistributedMember source,
-      InternalDistributedMember target, int bucketId) {
+  public boolean movePrimary(InternalDistributedMember source, InternalDistributedMember target,
+      int bucketId) {
-    InternalResourceManager.getResourceObserver().movingPrimary(
-        rebalanceOp.getLeaderRegion(), bucketId, source, target);
-    return rebalanceOp.movePrimaryBucketForRegion(target, bucketId); 
+    InternalResourceManager.getResourceObserver().movingPrimary(rebalanceOp.getLeaderRegion(),
+        bucketId, source, target);
+    return rebalanceOp.movePrimaryBucketForRegion(target, bucketId);
-  public void createRedundantBucket(
-      InternalDistributedMember targetMember, int bucketId,
+  public void createRedundantBucket(InternalDistributedMember targetMember, int bucketId,
-      if(result) {
+      if (result) {
-  
+
-    //do nothing, all operations are synchronous
+    // do nothing, all operations are synchronous
-}
+}
