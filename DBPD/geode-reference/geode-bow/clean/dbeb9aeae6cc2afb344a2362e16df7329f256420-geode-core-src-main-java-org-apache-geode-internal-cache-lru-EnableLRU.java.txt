Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- *  Marker interface to eviction controller that determines if LRU list
- *  maintainance is required.
+ * Marker interface to eviction controller that determines if LRU list maintainance is required.
-  public int entrySize( Object key, Object value ) throws IllegalArgumentException;
+  public int entrySize(Object key, Object value) throws IllegalArgumentException;
-  public long limit( );
+  public long limit();
-   *  Returns the {@linkplain EvictionAction action} to
-   * take when the LRU entry is evicted.
+   * Returns the {@linkplain EvictionAction action} to take when the LRU entry is evicted.
-   * Returns the id of the "limit" statistic for this LRU algorithm's
-   * statistics
+   * Returns the id of the "limit" statistic for this LRU algorithm's statistics
-   * Returns the id of the "counter" statistic for this LRU
-   * algorithm's statistics.
+   * Returns the id of the "counter" statistic for this LRU algorithm's statistics.
-   * Returns the id of the "evictions" statistic for this LRU
-   * algorithm's statistics.
+   * Returns the id of the "evictions" statistic for this LRU algorithm's statistics.
-   * Returns the id of the "destroys" statistic for this LRU
-   * algorithm's statistics.
+   * Returns the id of the "destroys" statistic for this LRU algorithm's statistics.
-   * Returns the id of the "destroysLimit" statistic for this LRU algorithm's
-   * statistics
+   * Returns the id of the "destroysLimit" statistic for this LRU algorithm's statistics
-   * Returns the id of the "evaluations" statistic for this LRU
-   * algorithm's statistics.
+   * Returns the id of the "evaluations" statistic for this LRU algorithm's statistics.
-   * Returns the id of the "greedyReturns" statistic for this LRU
-   * algorith'ms statistics
+   * Returns the id of the "greedyReturns" statistic for this LRU algorith'ms statistics
-  
+
-   * Returns whether or not there is enough room to accommodate data
-   * of the given size based on the given <code>LRUStatistics</code>.
+   * Returns whether or not there is enough room to accommodate data of the given size based on the
+   * given <code>LRUStatistics</code>.
+
