Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  
+  protected void checkRedisPort(int value) {
+    minMaxCheck(REDIS_PORT_NAME, value, 0, 65535);
+  }
+  protected void checkRedisBindAddress(String value) {
+    _checkIfModifiable(REDIS_BIND_ADDRESS_NAME);
+    if (value != null && value.length() > 0 &&
+        !SocketCreator.isLocalHost(value)) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.AbstractDistributionConfig_REDIS_BIND_ADDRESS_0_INVALID_MUST_BE_IN_1
+          .toLocalizedString(new Object[]{value, SocketCreator.getMyAddresses()
+          }));
+    }
+  }
+  
+  protected void checkRedisPassword(String value) {
+    
+  }
+  
+  public boolean isRedisBindAddressModifiable() {
+    return _modifiableDefault();
+  }
+  public boolean isRedisPortModifiable() {
+    return _modifiableDefault();
+  }
+  
+  public boolean isRedisPasswordModifiable() {
+    return _modifiableDefault();
+  }
+
+  public boolean isOffHeapMemorySizeModifiable() {
+    return _modifiableDefault();
+  }
+  
+  protected void checkOffHeapMemorySize(String value) {
+    _checkIfModifiable(OFF_HEAP_MEMORY_SIZE_NAME);
+  }
+  
+  public boolean isLockMemoryModifiable() {
+    return _modifiableDefault();
+  }
+  
+  public boolean isDistributedTransactionsModifiable() {
+    return _modifiableDefault();
+  }
+  
+  protected void checkLockMemory(final boolean value) {
+    _checkIfModifiable(LOCK_MEMORY_NAME);
+  }
+    
+      REDIS_PORT_NAME,
+      REDIS_BIND_ADDRESS_NAME,
+      REDIS_PASSWORD_NAME,
-      HTTP_SERVICE_SSL_KEYSTORE_NAME,HTTP_SERVICE_SSL_KEYSTORE_TYPE_NAME,HTTP_SERVICE_SSL_KEYSTORE_PASSWORD_NAME,HTTP_SERVICE_SSL_TRUSTSTORE_NAME,HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD_NAME
+      HTTP_SERVICE_SSL_KEYSTORE_NAME,HTTP_SERVICE_SSL_KEYSTORE_TYPE_NAME,HTTP_SERVICE_SSL_KEYSTORE_PASSWORD_NAME,HTTP_SERVICE_SSL_TRUSTSTORE_NAME,HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD_NAME,
+      OFF_HEAP_MEMORY_SIZE_NAME, 
+      LOCK_MEMORY_NAME,
+      DISTRIBUTED_TRANSACTIONS_NAME
+    } else if (attName.equalsIgnoreCase(REDIS_PORT_NAME)) {
+      this.setRedisPort(((Integer)attValue).intValue());
+    } else if (attName.equalsIgnoreCase(REDIS_BIND_ADDRESS_NAME)) {
+      this.setRedisBindAddress((String)attValue);
+    } else if (attName.equalsIgnoreCase(REDIS_PASSWORD_NAME)) {
+      this.setRedisPassword((String)attValue);
+    } else if (attName.equalsIgnoreCase(OFF_HEAP_MEMORY_SIZE_NAME)) {
+      this.setOffHeapMemorySize((String)attValue);
+    } else if (attName.equalsIgnoreCase(LOCK_MEMORY_NAME)) {
+      this.setLockMemory((Boolean)attValue);
+    } else if (attName.equalsIgnoreCase(DISTRIBUTED_TRANSACTIONS_NAME)) {
+      this.setDistributedTransactions(((Boolean)attValue).booleanValue());
+    } else if (attName.equalsIgnoreCase(REDIS_PORT_NAME)) {
+      return this.getRedisPort();
+    } else if (attName.equalsIgnoreCase(REDIS_BIND_ADDRESS_NAME)) {
+      return this.getRedisBindAddress();
+    } else if (attName.equalsIgnoreCase(REDIS_PASSWORD_NAME)) {
+      return this.getRedisPassword();
+    } else if (attName.equalsIgnoreCase(OFF_HEAP_MEMORY_SIZE_NAME)) {
+      return this.getOffHeapMemorySize();
+    } else if (attName.equalsIgnoreCase(LOCK_MEMORY_NAME)) {
+      return this.getLockMemory();
+    } else if (attName.equalsIgnoreCase(DISTRIBUTED_TRANSACTIONS_NAME)) {
+      return this.getDistributedTransactions();
+    } else if (attName.equalsIgnoreCase(REDIS_PORT_NAME)) {
+      return this.isRedisPortModifiable();
+    } else if (attName.equalsIgnoreCase(REDIS_BIND_ADDRESS_NAME)) {
+      return this.isRedisBindAddressModifiable();
+    } else if (attName.equalsIgnoreCase(REDIS_PASSWORD_NAME)) {
+      return this.isRedisPasswordModifiable();
+    } else if (attName.equalsIgnoreCase(OFF_HEAP_MEMORY_SIZE_NAME)) {
+      return this.isOffHeapMemorySizeModifiable();
-    } else {
+    } else if (attName.equalsIgnoreCase(LOCK_MEMORY_NAME)) {
+      return this.isLockMemoryModifiable();
+    } else if (attName.equals(DISTRIBUTED_TRANSACTIONS_NAME)) {
+      return this.isDistributedTransactionsModifiable();
+    }else {
+    } else if (attName.equalsIgnoreCase(REDIS_PORT_NAME)) {
+      return Integer.class;
+    } else if (attName.equalsIgnoreCase(REDIS_BIND_ADDRESS_NAME)) {
+      return String.class;
+    } else if (attName.equalsIgnoreCase(REDIS_PASSWORD_NAME)) {
+      return String.class;
-    } else {
+    } else if (attName.equalsIgnoreCase(OFF_HEAP_MEMORY_SIZE_NAME)) {
+      return String.class;
+    } else if (attName.equalsIgnoreCase(LOCK_MEMORY_NAME)) {
+      return Boolean.class;
+    } else if (attName.equalsIgnoreCase(DISTRIBUTED_TRANSACTIONS_NAME)) {
+      return Boolean.class;
+    } 
+    else {
-
+    m.put(REDIS_PORT_NAME, "The port GemFireRedisServer will listen on. Default is 0. Set to zero to disable GemFireRedisServer.");
+    m.put(REDIS_BIND_ADDRESS_NAME, "The address the GemFireRedisServer will listen on for remote connections. Default is \"\" which causes the GemFireRedisServer to listen on the host's default address. This property is ignored if redis-port is \"0\".");
+    m.put(REDIS_PASSWORD_NAME, "The password which client of GemFireRedisServer must use to authenticate themselves. The default is none and no authentication will be required.");
+    m.put(OFF_HEAP_MEMORY_SIZE_NAME, LocalizedStrings.AbstractDistributionConfig_OFF_HEAP_MEMORY_SIZE_0.toLocalizedString(DEFAULT_OFF_HEAP_MEMORY_SIZE));
+    m.put(LOCK_MEMORY_NAME, LocalizedStrings.AbstractDistributionConfig_LOCK_MEMORY.toLocalizedString(DEFAULT_LOCK_MEMORY));
+    m.put(DISTRIBUTED_TRANSACTIONS_NAME, "Flag to indicate whether all transactions including JTA should be distributed transactions.  Default is false, meaning colocated transactions.");
