Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * HostStatSampler implements a thread which will monitor, sample, and archive
- * statistics. It only has the common functionality that any sampler needs.
-
+ * HostStatSampler implements a thread which will monitor, sample, and archive statistics. It only
+ * has the common functionality that any sampler needs.
+ * 
-public abstract class HostStatSampler 
+public abstract class HostStatSampler
-  public static final String TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "stats.test.fileSizeLimitInKB";
+  public static final String TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "stats.test.fileSizeLimitInKB";
-  protected static final String INITIALIZATION_TIMEOUT_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "statSamplerInitializationTimeout";
+  protected static final String INITIALIZATION_TIMEOUT_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "statSamplerInitializationTimeout";
-  protected static final long INITIALIZATION_TIMEOUT_MILLIS = 
+  protected static final long INITIALIZATION_TIMEOUT_MILLIS =
-  
-  /** 
-   * Used to check if the sampler thread wake-up is delayed, and log a warning if it is delayed by longer than 
-   * the amount of milliseconds specified by this property. The value of 0 disables the check. 
+
+  /**
+   * Used to check if the sampler thread wake-up is delayed, and log a warning if it is delayed by
+   * longer than the amount of milliseconds specified by this property. The value of 0 disables the
+   * check.
-  private static final long STAT_SAMPLER_DELAY_THRESHOLD = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "statSamplerDelayThreshold", 3000);
-  private static final long STAT_SAMPLER_DELAY_THRESHOLD_NANOS = NanoTimer.millisToNanos(STAT_SAMPLER_DELAY_THRESHOLD);
-  
+  private static final long STAT_SAMPLER_DELAY_THRESHOLD =
+      Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "statSamplerDelayThreshold", 3000);
+  private static final long STAT_SAMPLER_DELAY_THRESHOLD_NANOS =
+      NanoTimer.millisToNanos(STAT_SAMPLER_DELAY_THRESHOLD);
+
-  
+
-  
+
-  
+
-  
+
-  
-  protected HostStatSampler(CancelCriterion stopper, 
-                            StatSamplerStats samplerStats) {
+
+  protected HostStatSampler(CancelCriterion stopper, StatSamplerStats samplerStats) {
-  
+
-  
+
-    while (System.currentTimeMillis() < endTime && 
-        this.samplerStats.getSampleCount() <= startSampleCount) {
+    while (System.currentTimeMillis() < endTime
+        && this.samplerStats.getSampleCount() <= startSampleCount) {
-    while (System.currentTimeMillis() < endTime && 
-        this.sampleCollector == null || !this.sampleCollector.isInitialized()) {
+    while (System.currentTimeMillis() < endTime && this.sampleCollector == null
+        || !this.sampleCollector.isInitialized()) {
-  
+
-      
+
-      
+
-          if (stopRequested()) break;
+          if (stopRequested())
+            break;
-          if (stopRequested()) break;
+          if (stopRequested())
+            break;
-          if (stopRequested()) break;
-          
+          if (stopRequested())
+            break;
+
-          
+
-    } 
-    catch (InterruptedException ex) {
+    } catch (InterruptedException ex) {
-    }
-    catch (CancelException ex) {
+    } catch (CancelException ex) {
-    }
-    catch (RuntimeException ex) {
+    } catch (RuntimeException ex) {
-    } 
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Error ex) {
+    } catch (Error ex) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-      closeSpecialStats();
-      if (this.sampleCollector != null) {
-        this.sampleCollector.close();
-      }
+        closeSpecialStats();
+        if (this.sampleCollector != null) {
+          this.sampleCollector.close();
+        }
-          // other threads wait for this to indicate that 
+          // other threads wait for this to indicate that
-   * @throws IllegalStateException if an instance of the {@link #statThread} is still running from a previous DistributedSystem.
+   * 
+   * @throws IllegalStateException if an instance of the {@link #statThread} is still running from a
+   *         previous DistributedSystem.
-    synchronized(HostStatSampler.class) { 
+    synchronized (HostStatSampler.class) {
-        } 
-        if (statThread.isAlive()) {
-          throw new IllegalStateException(LocalizedStrings.HostStatSampler_STATISTICS_SAMPLING_THREAD_IS_ALREADY_RUNNING_INDICATING_AN_INCOMPLETE_SHUTDOWN_OF_A_PREVIOUS_CACHE.toLocalizedString());
-      }  
-      ThreadGroup group = 
-        LoggingThreadGroup.createThreadGroup("StatSampler Threads");
+        if (statThread.isAlive()) {
+          throw new IllegalStateException(
+              LocalizedStrings.HostStatSampler_STATISTICS_SAMPLING_THREAD_IS_ALREADY_RUNNING_INDICATING_AN_INCOMPLETE_SHUTDOWN_OF_A_PREVIOUS_CACHE
+                  .toLocalizedString());
+        }
+      }
+      ThreadGroup group = LoggingThreadGroup.createThreadGroup("StatSampler Threads");
-      this.callbackSampler.start(getStatisticsManager(), group, getSampleRate(), TimeUnit.MILLISECONDS);
+      this.callbackSampler.start(getStatisticsManager(), group, getSampleRate(),
+          TimeUnit.MILLISECONDS);
-  
+
+
-      if ( statThread == null) {
-        return; 
+      if (statThread == null) {
+        return;
-        //It is important that we shutdown so we'll continue trying for another 2 seconds
+        // It is important that we shutdown so we'll continue trying for another 2 seconds
-        if ( statThread.isAlive() ) {
+        if (statThread.isAlive()) {
-            logger.warn(LogMarker.STATISTICS, LocalizedMessage.create(LocalizedStrings.HostStatSampler_HOSTSTATSAMPLER_THREAD_COULD_NOT_BE_STOPPED));
+            logger.warn(LogMarker.STATISTICS, LocalizedMessage.create(
+                LocalizedStrings.HostStatSampler_HOSTSTATSAMPLER_THREAD_COULD_NOT_BE_STOPPED));
-  
+
-   * Waits for the special statistics to be initialized. For tests, please
-   * use {@link #waitForInitialization(long)} instead.
+   * Waits for the special statistics to be initialized. For tests, please use
+   * {@link #waitForInitialization(long)} instead.
-  
+
-   * Waits for the special statistics to be initialized. This overridden
-   * version of {@link #waitForInitialization()} should always be used
-   * within tests.
+   * Waits for the special statistics to be initialized. This overridden version of
+   * {@link #waitForInitialization()} should always be used within tests.
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-   * Called when this sampler has spent some time working and wants
-   * it to be accounted for.
+   * Called when this sampler has spent some time working and wants it to be accounted for.
-  private void accountForTimeSpentWorking(long nanosSpentWorking, 
-                                          long nanosSpentSleeping) {
-    this.samplerStats.tookSample(
-        nanosSpentWorking, getStatisticsManager().getStatisticsCount(), nanosSpentSleeping);
+  private void accountForTimeSpentWorking(long nanosSpentWorking, long nanosSpentSleeping) {
+    this.samplerStats.tookSample(nanosSpentWorking, getStatisticsManager().getStatisticsCount(),
+        nanosSpentSleeping);
-  
+
-            // check stopRequested inside the sync to prevent a race in which the wait misses the stopper's notify.
+            // check stopRequested inside the sync to prevent a race in which the wait misses the
+            // stopper's notify.
-  
+
-  
+
-   * @param prepareOnly
-   *          set to true if you only want to call prepareForSample
+   * @param prepareOnly set to true if you only want to call prepareForSample
-      if (stopRequested()) return;
+      if (stopRequested())
+        return;
-        ((StatisticsImpl)s).prepareForSample();
+        ((StatisticsImpl) s).prepareForSample();
-      if (stopRequested()) return;
+      if (stopRequested())
+        return;
-        logger.warn(LogMarker.STATISTICS, LocalizedMessage.create(LocalizedStrings.HostStatSampler_STATISTICS_SAMPLING_THREAD_DETECTED_A_WAKEUP_DELAY_OF_0_MS_INDICATING_A_POSSIBLE_RESOURCE_ISSUE, NanoTimer.nanosToMillis(wakeupDelay)));
+        logger.warn(LogMarker.STATISTICS,
+            LocalizedMessage.create(
+                LocalizedStrings.HostStatSampler_STATISTICS_SAMPLING_THREAD_DETECTED_A_WAKEUP_DELAY_OF_0_MS_INDICATING_A_POSSIBLE_RESOURCE_ISSUE,
+                NanoTimer.nanosToMillis(wakeupDelay)));
