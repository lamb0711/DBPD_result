Merge remote-tracking branch 'origin/develop' into wan_cq_donation

+
+  private MetaRegionFactory metaRegionFactory;
-  //private final BlockingQueue<Long> eventSeqNumQueue;  
+  //private final BlockingQueue<Long> eventSeqNumQueue;
+    this(sender, userRegions, idx, nDispatcher, new MetaRegionFactory());
+  }
+  
+  ParallelGatewaySenderQueue(AbstractGatewaySender sender,
+      Set<Region> userRegions, int idx, int nDispatcher, MetaRegionFactory metaRegionFactory) {
+  
+    this.metaRegionFactory = metaRegionFactory;
+    
-    this.sender = (AbstractGatewaySender)sender;
+    this.sender = sender;
-    //at present, this won't be accessed by multiple threads, 
-    //still, it is safer approach to synchronize it
-    synchronized (ParallelGatewaySenderQueue.class) {
-      if (removalThread == null) {
-        removalThread = new BatchRemovalThread(
-          (GemFireCacheImpl)sender.getCache(), this);
-        removalThread.start();
-      }
-    }
+  /**Start the background batch removal thread. */
+  public void start() {
+    //at present, this won't be accessed by multiple threads, 
+    //still, it is safer approach to synchronize it
+    synchronized (ParallelGatewaySenderQueue.class) {
+      if (removalThread == null) {
+        removalThread = new BatchRemovalThread(
+          (GemFireCacheImpl)this.sender.getCache(), this);
+        removalThread.start();
+      }
+    }
+  }
+
-    this.sender.lifeCycleLock.writeLock().lock();
+    this.sender.getLifeCycleLock().writeLock().lock();
-      this.sender.lifeCycleLock.writeLock().unlock();
+      this.sender.getLifeCycleLock().writeLock().unlock();
-    this.sender.lifeCycleLock.writeLock().lock();
+    this.sender.getLifeCycleLock().writeLock().lock();
-        ParallelGatewaySenderQueueMetaRegion meta = new ParallelGatewaySenderQueueMetaRegion(
-            prQName, ra, null, cache, sender, isUsedForHDFS());
+        ParallelGatewaySenderQueueMetaRegion meta = metaRegionFactory.newMetataRegion(cache,
+            prQName, ra, sender, isUsedForHDFS());
-      this.sender.lifeCycleLock.writeLock().unlock();
+      this.sender.getLifeCycleLock().writeLock().unlock();
-      this.sender.lifeCycleLock.writeLock().lock();
+      this.sender.getLifeCycleLock().writeLock().lock();
-      sender.lifeCycleLock.writeLock().unlock();
+      sender.getLifeCycleLock().writeLock().unlock();
-      if(((PartitionedRegion)prQ.getRegion()).getDataStore() != null) {
-        size += ((PartitionedRegion)prQ.getRegion()).getDataStore()
+      if(prQ != null && prQ.getDataStore() != null) {
+        size += prQ.getDataStore()
-  protected class ParallelGatewaySenderQueueMetaRegion extends
+  protected static class ParallelGatewaySenderQueueMetaRegion extends
+  
+  static class MetaRegionFactory {
+    ParallelGatewaySenderQueueMetaRegion newMetataRegion(
+        GemFireCacheImpl cache, final String prQName, final RegionAttributes ra, AbstractGatewaySender sender, boolean isUsedForHDFS) {
+      ParallelGatewaySenderQueueMetaRegion meta = new ParallelGatewaySenderQueueMetaRegion(
+          prQName, ra, null, cache, sender, isUsedForHDFS);
+      return meta;
+    }
+  }
