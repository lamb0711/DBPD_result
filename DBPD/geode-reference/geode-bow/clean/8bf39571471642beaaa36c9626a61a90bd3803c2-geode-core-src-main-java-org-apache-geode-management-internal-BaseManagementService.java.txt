Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-   * The main mapping between different resources and Service instance Object
-   * can be Cache
+   * The main mapping between different resources and Service instance Object can be Cache
-  protected static final Map<Object, BaseManagementService> instances = new HashMap<Object, BaseManagementService>();
+  protected static final Map<Object, BaseManagementService> instances =
+      new HashMap<Object, BaseManagementService>();
-  private static final List<InternalDistributedSystem> systems = new ArrayList<InternalDistributedSystem>(
-      1);
+  private static final List<InternalDistributedSystem> systems =
+      new ArrayList<InternalDistributedSystem>(1);
-  protected BaseManagementService() {
-  }
+  protected BaseManagementService() {}
-  
+
-   * This method will close the service. Any operation on the service instance
-   * will throw exception
+   * This method will close the service. Any operation on the service instance will throw exception
-   * This method will close the service. Any operation on the service instance
-   * will throw exception
+   * This method will close the service. Any operation on the service instance will throw exception
-   * @param cache
-   *          defines the scope of resources to be managed
+   * @param cache defines the scope of resources to be managed
+
-  
- 
+
+
-      sys
-          .addDisconnectListener(new InternalDistributedSystem.DisconnectListener() {
-            @Override
-            public String toString() {
-              return "Disconnect listener for BaseManagementService";
-            }
+      sys.addDisconnectListener(new InternalDistributedSystem.DisconnectListener() {
+        @Override
+        public String toString() {
+          return "Disconnect listener for BaseManagementService";
+        }
-            public void onDisconnect(InternalDistributedSystem ss) {
-              removeInternalDistributedSystem(ss);
-            }
-          });
+        public void onDisconnect(InternalDistributedSystem ss) {
+          removeInternalDistributedSystem(ss);
+        }
+      });
-   * Remove a Distributed System from the system lists. If list is empty it
-   * closes down all the services if not closed
+   * Remove a Distributed System from the system lists. If list is empty it closes down all the
+   * services if not closed
-  private static void removeInternalDistributedSystem(
-      InternalDistributedSystem sys) {
+  private static void removeInternalDistributedSystem(InternalDistributedSystem sys) {
-          BaseManagementService service = (BaseManagementService)instances.get(key);
+          BaseManagementService service = (BaseManagementService) instances.get(key);
-              logger.debug("ManagementException while removing InternalDistributedSystem {}", e.getMessage(), e);
+              logger.debug("ManagementException while removing InternalDistributedSystem {}",
+                  e.getMessage(), e);
