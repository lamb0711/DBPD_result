Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Represents all commands a memcached client
- * can issue
+ * Represents all commands a memcached client can issue
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-      
+
+   * 
-    for (int i=0; i<header.limit(); i++) {
-      str.append(byteToHex(header.get(i))+" | ");
+    for (int i = 0; i < header.limit(); i++) {
+      str.append(byteToHex(header.get(i)) + " | ");
-        str.append((i+1)+": ");
+        str.append((i + 1) + ": ");
-    case 0x00:
-      return GET;
-    case 0x01:
-      return SET;
-    case 0x02:
-      return ADD;
-    case 0x03:
-      return REPLACE;
-    case 0x04:
-      return DELETE;
-    case 0x05:
-      return INCR;
-    case 0x06:
-      return DECR;
-    case 0x07:
-      return QUIT;
-    case 0x08:
-      return FLUSH_ALL;
-    case 0x09:
-      return GETQ;
-    case 0x0a:
-      return NOOP;
-    case 0x0b:
-      return VERSION;
-    case 0x0c:
-      return GETK;
-    case 0x0d:
-      return GETKQ;
-    case 0x0e:
-      return APPEND;
-    case 0x0f:
-      return PREPEND;
-    case 0x10:
-      return STATS;
-    case 0x11:
-      return SETQ;
-    case 0x12:
-      return ADDQ;
-    case 0x13:
-      return REPLACEQ;
-    case 0x14:
-      return DELETEQ;
-    case 0x15:
-      return INCRQ;
-    case 0x16:
-      return DECRQ;
-    case 0x17:
-      return QUITQ;
-    case 0x18:
-      return FLUSH_ALLQ;
-    case 0x19:
-      return APPENDQ;
-    case 0x1a:
-      return PREPENDQ;
-    case 0x1b:
-      return VERBOSITY;
-    case 0x1c:
-      return TOUCH;
-    case 0x1d:
-      return GAT;
-    case 0x1e:
-      return GATQ;
-    default:
-      return NOT_SUPPORTED;
+      case 0x00:
+        return GET;
+      case 0x01:
+        return SET;
+      case 0x02:
+        return ADD;
+      case 0x03:
+        return REPLACE;
+      case 0x04:
+        return DELETE;
+      case 0x05:
+        return INCR;
+      case 0x06:
+        return DECR;
+      case 0x07:
+        return QUIT;
+      case 0x08:
+        return FLUSH_ALL;
+      case 0x09:
+        return GETQ;
+      case 0x0a:
+        return NOOP;
+      case 0x0b:
+        return VERSION;
+      case 0x0c:
+        return GETK;
+      case 0x0d:
+        return GETKQ;
+      case 0x0e:
+        return APPEND;
+      case 0x0f:
+        return PREPEND;
+      case 0x10:
+        return STATS;
+      case 0x11:
+        return SETQ;
+      case 0x12:
+        return ADDQ;
+      case 0x13:
+        return REPLACEQ;
+      case 0x14:
+        return DELETEQ;
+      case 0x15:
+        return INCRQ;
+      case 0x16:
+        return DECRQ;
+      case 0x17:
+        return QUITQ;
+      case 0x18:
+        return FLUSH_ALLQ;
+      case 0x19:
+        return APPENDQ;
+      case 0x1a:
+        return PREPENDQ;
+      case 0x1b:
+        return VERBOSITY;
+      case 0x1c:
+        return TOUCH;
+      case 0x1d:
+        return GAT;
+      case 0x1e:
+        return GATQ;
+      default:
+        return NOT_SUPPORTED;
-    char hexDigit[] = {
-       '0', '1', '2', '3', '4', '5', '6', '7',
-       '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
-    };
-    char[] array = { hexDigit[(b >> 4) & 0x0f], hexDigit[b & 0x0f] };
+    char hexDigit[] =
+        {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
+    char[] array = {hexDigit[(b >> 4) & 0x0f], hexDigit[b & 0x0f]};
- }
+  }
