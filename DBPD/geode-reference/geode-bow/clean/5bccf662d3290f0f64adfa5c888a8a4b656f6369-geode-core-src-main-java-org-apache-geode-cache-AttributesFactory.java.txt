GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-          LocalizedStrings.AttributesFactory_ADDCACHELISTENER_PARAMETER_WAS_NULL
-              .toLocalizedString());
+          "addCacheListener parameter was null");
-              LocalizedStrings.AttributesFactory_INITCACHELISTENERS_PARAMETER_HAD_A_NULL_ELEMENT
-                  .toLocalizedString());
+              "initCacheListeners parameter had a null element");
-          LocalizedStrings.AttributesFactory_IDLETIMEOUT_MUST_NOT_BE_NULL.toLocalizedString());
+          "idleTimeout must not be null");
-          LocalizedStrings.AttributesFactory_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString());
+          "timeToLive must not be null");
-          LocalizedStrings.AttributesFactory_IDLETIMEOUT_MUST_NOT_BE_NULL.toLocalizedString());
+          "idleTimeout must not be null");
-          LocalizedStrings.AttributesFactory_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString());
+          "timeToLive must not be null");
-          LocalizedStrings.AttributesFactory_SCOPETYPE_MUST_NOT_BE_NULL.toLocalizedString());
+          "scopeType must not be null");
-          LocalizedStrings.AttributesFactory_MIRRORTYPE_MUST_NOT_BE_NULL.toLocalizedString());
+          "mirrorType must not be null");
-          LocalizedStrings.AttributesFactory_DATAPOLICY_MUST_NOT_BE_NULL.toLocalizedString());
+          "dataPolicy must not be null");
-            LocalizedStrings.AttributesFactory_DATA_POLICIES_OTHER_THAN_0_ARE_NOT_SUPPORTED_FOR_PARTITIONED_REGIONS
-                .toLocalizedString(PartitionedRegionHelper.ALLOWED_DATA_POLICIES));
+            String.format("Data policies other than %s are not supported for Partitioned Regions",
+                PartitionedRegionHelper.ALLOWED_DATA_POLICIES));
-          LocalizedStrings.AttributesFactory_KEYCONSTRAINT_MUST_NOT_BE_A_PRIMITIVE_TYPE
-              .toLocalizedString());
+          "keyConstraint must not be a primitive type");
-          LocalizedStrings.AttributesFactory_VALUECONSTRAINT_MUST_NOT_BE_A_PRIMITIVE_TYPE
-              .toLocalizedString());
+          "valueConstraint must not be a primitive type");
-          LocalizedStrings.AttributesFactory_INITIALCAPACITY_MUST_BE_0.toLocalizedString());
+          "initialCapacity must be >= 0");
-          LocalizedStrings.AttributesFactory_LOADFACTOR_MUST_BE_0_VALUE_IS_0
-              .toLocalizedString(new Float(loadFactor)));
+          String.format("loadFactor must be > 0, value is %s",
+              new Float(loadFactor)));
-          LocalizedStrings.AttributesFactory_CONCURRENCYLEVEL_MUST_BE_0.toLocalizedString());
+          "concurrencyLevel must be > 0");
-          LocalizedStrings.AttributesFactory_GATEWAY_SENDER_ID_IS_NULL.toLocalizedString());
+          "GatewaySender id is null.");
-          LocalizedStrings.AttributesFactory_GATEWAY_SENDER_ID_IS_NULL.toLocalizedString());
+          "GatewaySender id is null.");
-          LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1.toLocalizedString(
+          String.format("Deprecated API %s cannot be used with DiskStore %s",
-          LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1.toLocalizedString(
+          String.format("Deprecated API %s cannot be used with DiskStore %s",
-          LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
-              .toLocalizedString(new Object[] {"setDiskDirs or setDiskWriteAttributes", name}));
+          String.format("Deprecated API %s cannot be used with DiskStore %s",
+              new Object[] {"setDiskDirs or setDiskWriteAttributes", name}));
-          LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1.toLocalizedString(
+          String.format("Deprecated API %s cannot be used with DiskStore %s",
-          LocalizedStrings.AttributesFactory_NUMBER_OF_DISKSIZES_IS_0_WHICH_IS_NOT_EQUAL_TO_NUMBER_OF_DISK_DIRS_WHICH_IS_1
-              .toLocalizedString(new Object[] {Integer.valueOf(diskSizes.length),
+          String.format(
+              "Number of diskSizes is %s which is not equal to number of disk Dirs which is %s",
+              new Object[] {Integer.valueOf(diskSizes.length),
-            LocalizedStrings.AttributesFactory_DATA_POLICY_0_IS_NOT_ALLOWED_FOR_A_PARTITIONED_REGION_DATAPOLICIES_OTHER_THAN_1_ARE_NOT_ALLOWED
-                .toLocalizedString(new Object[] {this.regionAttributes.dataPolicy,
+            String.format(
+                "Data policy %s is not allowed for a partitioned region. DataPolicies other than %s are not allowed.",
+                new Object[] {this.regionAttributes.dataPolicy,
-              LocalizedStrings.AttributesFactory_EXPIRATIONACTIONLOCAL_DESTROY_ON_THE_ENTRIES_IS_INCOMPATIBLE_WITH_DISTRIBUTED_REPLICATION
-                  .toLocalizedString());
+              "ExpirationAction.LOCAL_DESTROY on the entries is incompatible with distributed replication");
-              LocalizedStrings.AttributesFactory_AN_EVICTION_CONTROLLER_WITH_LOCAL_DESTROY_EVICTION_ACTION_IS_INCOMPATIBLE_WITH_DISTRIBUTED_REPLICATION
-                  .toLocalizedString());
+              "An Eviction Controller with local destroy eviction action is incompatible with distributed replication");
-              LocalizedStrings.AttributesFactory_EXPIRATIONACTIONLOCAL_INVALIDATE_ON_THE_REGION_IS_INCOMPATIBLE_WITH_DISTRIBUTED_REPLICATION
-                  .toLocalizedString());
+              "ExpirationAction.LOCAL_INVALIDATE on the region is incompatible with distributed replication");
-              LocalizedStrings.AttributesFactory_EXPIRATIONACTIONLOCAL_INVALIDATE_ON_THE_ENTRIES_IS_INCOMPATIBLE_WITH_DISTRIBUTED_REPLICATION
-                  .toLocalizedString());
+              "ExpirationAction.LOCAL_INVALIDATE on the entries is incompatible with distributed replication");
-            LocalizedStrings.DiskStore_IS_USED_IN_NONPERSISTENT_REGION.toLocalizedString());
+            "Only regions with persistence or overflow to disk can specify DiskStore");
-          LocalizedStrings.AttributesFactory_STATISTICS_MUST_BE_ENABLED_FOR_EXPIRATION
-              .toLocalizedString());
+          "Statistics must be enabled for expiration");
-            LocalizedStrings.AttributesFactory_IF_THE_DATA_POLICY_IS_0_THEN_ENTRY_EXPIRATION_IS_NOT_ALLOWED
-                .toLocalizedString(attrs.getDataPolicy()));
+            String.format("If the data policy is %s then entry expiration is not allowed.",
+                attrs.getDataPolicy()));
-            LocalizedStrings.AttributesFactory_IF_THE_DATA_POLICY_IS_0_THEN_EVICTION_IS_NOT_ALLOWED
-                .toLocalizedString(attrs.getDataPolicy()));
+            String.format("If the data policy is %s then eviction is not allowed.",
+                attrs.getDataPolicy()));
-            LocalizedStrings.AttributesFactory_IF_THE_MEMBERSHIP_ATTRIBUTES_HAS_REQUIRED_ROLES_THEN_SCOPE_MUST_NOT_BE_LOCAL
-                .toLocalizedString());
+            "If the membership attributes has required roles then scope must not be LOCAL.");
-            LocalizedStrings.AttributesFactory_LOCAL_DESTROY_IS_NOT_SUPPORTED_FOR_PR
-                .toLocalizedString());
+            "ExpirationAction LOCAL_DESTROY is not supported for Partitioned Region.");
-            LocalizedStrings.AttributesFactory_LOCAL_INVALIDATE_IS_NOT_SUPPORTED_FOR_PR
-                .toLocalizedString());
+            "ExpirationAction LOCAL_INVALIDATE is not supported for Partitioned Region.");
-              LocalizedStrings.AttributesFactory_SETTING_SCOPE_ON_A_PARTITIONED_REGIONS_IS_NOT_ALLOWED
-                  .toLocalizedString());
+              "Setting Scope on a Partitioned Regions is not allowed.");
-            LocalizedStrings.AttributesFactory_TOTAL_SIZE_OF_PARTITION_REGION_MUST_BE_0
-                .toLocalizedString());
+            "Total size of partition region must be > 0.");
-            LocalizedStrings.AttributesFactory_DATA_POLICIES_OTHER_THAN_0_ARE_NOT_ALLOWED_IN_PARTITIONED_REGIONS
-                .toLocalizedString(PartitionedRegionHelper.ALLOWED_DATA_POLICIES));
+            String.format("Data policies other than %s are not allowed in  partitioned regions.",
+                PartitionedRegionHelper.ALLOWED_DATA_POLICIES));
-            LocalizedStrings.AttributesFactory_PARTITIONATTRIBUTES_LOCALMAXMEMORY_MUST_NOT_BE_NEGATIVE
-                .toLocalizedString());
+            "PartitionAttributes localMaxMemory must not be negative.");
-            LocalizedStrings.AttributesFactory_SETLOCKGRANTERTRUE_IS_NOT_ALLOWED_IN_PARTITIONED_REGIONS
-                .toLocalizedString());
+            "setLockGranter(true) is not allowed in Partitioned Regions.");
-            LocalizedStrings.AttributesFactory_NO_MIRROR_TYPE_CORRESPONDS_TO_DATA_POLICY_0
-                .toLocalizedString(this.dataPolicy));
+            String.format("No mirror type corresponds to data policy %s.",
+                this.dataPolicy));
-          LocalizedStrings.AttributesFactory_MORE_THAN_ONE_CACHE_LISTENER_EXISTS
-              .toLocalizedString());
+          "More than one cache listener exists.");
-                LocalizedStrings.AttributesFactory_GATEWAY_SENDER_ID_0_IS_ALREADY_ADDED
-                    .toLocalizedString(gatewaySenderId));
+                String.format("gateway-sender-id %s is already added",
+                    gatewaySenderId));
-                LocalizedStrings.AttributesFactory_ASYNC_EVENT_QUEUE_ID_0_IS_ALREADY_ADDED
-                    .toLocalizedString(asyncEventQueueId));
+                String.format("async-event-queue-id %s is already added",
+                    asyncEventQueueId));
-            LocalizedStrings.AttributesFactory_CLONENOTSUPPORTEDEXCEPTION_THROWN_IN_CLASS_THAT_IMPLEMENTS_CLONEABLE
-                .toLocalizedString());
+            "CloneNotSupportedException thrown in class that implements cloneable.");
-            LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
-                .toLocalizedString(new Object[] {"getDiskWriteAttributes", this.diskStoreName}));
+            String.format("Deprecated API %s cannot be used with DiskStore %s",
+                new Object[] {"getDiskWriteAttributes", this.diskStoreName}));
-            LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
-                .toLocalizedString(new Object[] {"getDiskDirs", this.diskStoreName}));
+            String.format("Deprecated API %s cannot be used with DiskStore %s",
+                new Object[] {"getDiskDirs", this.diskStoreName}));
-            LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
-                .toLocalizedString(new Object[] {"getDiskDirSizes", this.diskStoreName}));
+            String.format("Deprecated API %s cannot be used with DiskStore %s",
+                new Object[] {"getDiskDirSizes", this.diskStoreName}));
