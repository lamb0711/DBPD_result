Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
-  private static void validateSunArguments(GemFireCache cache, ResourceManager rm, List<String> inputArguments) {
+  private static void validateSunArguments(GemFireCache cache, ResourceManager rm,
+      List<String> inputArguments) {
-      builder.append("Relevant input java arguments: ")
-          .append("dashXms=")
-          .append(dashXms)
-          .append("; dashXmx=")
-          .append(dashXmx)
-          .append("; useCMS=")
-          .append(useCMS)
-          .append("; cmsIOF=")
-          .append(cmsIOF);
+      builder.append("Relevant input java arguments: ").append("dashXms=").append(dashXms)
+          .append("; dashXmx=").append(dashXmx).append("; useCMS=").append(useCMS)
+          .append("; cmsIOF=").append(cmsIOF);
-  private static void validateJavaHeapParameters(GemFireCache cache, String dashXms, String dashXmx) {
+  private static void validateJavaHeapParameters(GemFireCache cache, String dashXms,
+      String dashXmx) {
-      cache.getLogger()
-          .warning(
-              "Setting the initial size of the heap (configured using -Xms) is recommended so that GemFire cache eviction is optimal");
+      cache.getLogger().warning(
+          "Setting the initial size of the heap (configured using -Xms) is recommended so that GemFire cache eviction is optimal");
-      cache.getLogger()
-          .warning(
-              "Setting the maximum size of the heap (configured using -Xmx) is recommended so that GemFire cache eviction is optimal");
+      cache.getLogger().warning(
+          "Setting the maximum size of the heap (configured using -Xmx) is recommended so that GemFire cache eviction is optimal");
-        builder.append("Setting the initial (")
-            .append(dashXmsStr)
-            .append(dashXmsList.get(2))
-            .append(") and maximum (")
-            .append(dashXmxStr)
-            .append(dashXmxList.get(2))
-            .append(") sizes of the heap the same is recommended so that GemFire cache eviction is optimal");
+        builder.append("Setting the initial (").append(dashXmsStr).append(dashXmsList.get(2))
+            .append(") and maximum (").append(dashXmxStr).append(dashXmxList.get(2)).append(
+                ") sizes of the heap the same is recommended so that GemFire cache eviction is optimal");
-      cache.getLogger()
-          .warning(
-              "Using the concurrent garbage collector (configured using -XX:+UseConcMarkSweepGC) is recommended so that GemFire cache eviction is optimal");
+      cache.getLogger().warning(
+          "Using the concurrent garbage collector (configured using -XX:+UseConcMarkSweepGC) is recommended so that GemFire cache eviction is optimal");
-  private static void verifyCMSInitiatingOccupancyFraction(GemFireCache cache, ResourceManager rm, String cmsIOF) {
+  private static void verifyCMSInitiatingOccupancyFraction(GemFireCache cache, ResourceManager rm,
+      String cmsIOF) {
-      cache.getLogger()
-          .warning(
-              "Setting the CMS initiating occupancy fraction (configured using -XX:CMSInitiatingOccupancyFraction=N) is recommended so that GemFire cache eviction is optimal");
+      cache.getLogger().warning(
+          "Setting the CMS initiating occupancy fraction (configured using -XX:CMSInitiatingOccupancyFraction=N) is recommended so that GemFire cache eviction is optimal");
-      // Parse the CMSInitiatingOccupancyFraction. Verify it is less than both eviction and critical thresholds.
+      // Parse the CMSInitiatingOccupancyFraction. Verify it is less than both eviction and critical
+      // thresholds.
-            .warning(
-                "Setting the CMS initiating occupancy fraction (" + cmsIOFVal + ") less than the eviction heap percentage (" + currentEvictionHeapPercentage + ") is recommended so that GemFire cache eviction is optimal");
+            .warning("Setting the CMS initiating occupancy fraction (" + cmsIOFVal
+                + ") less than the eviction heap percentage (" + currentEvictionHeapPercentage
+                + ") is recommended so that GemFire cache eviction is optimal");
-            .warning(
-                "Setting the CMS initiating occupancy fraction (" + cmsIOFVal + ") less than the critical heap percentage (" + currentCriticalHeapPercentage + ") is recommended so that GemFire cache eviction is optimal");
+            .warning("Setting the CMS initiating occupancy fraction (" + cmsIOFVal
+                + ") less than the critical heap percentage (" + currentCriticalHeapPercentage
+                + ") is recommended so that GemFire cache eviction is optimal");
-  private ResourceManagerValidator() {
-  }
+  private ResourceManagerValidator() {}
