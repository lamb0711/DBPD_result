GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.

-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.execute.FunctionInvocationTargetException;
+import org.apache.geode.management.internal.cli.exceptions.UserErrorException;
-import org.apache.geode.security.GemFireSecurityException;
-
-    try {
-      return toTabularResult(getIndexListing(), stats);
-    } catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_LIST_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      getCache().getLogger().info(t);
-      return ResultBuilder.createGemFireErrorResult(String
-          .format(LuceneCliStrings.LUCENE_LIST_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    }
+    return toTabularResult(getIndexListing(), stats);
-    final Execution functionExecutor = getMembersFunctionExecutor(getMembers(getCache()));
+    final Execution functionExecutor = getMembersFunctionExecutor(getAllMembers(getCache()));
-          help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__REGION_HELP) final String regionPath) {
+          help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__REGION_HELP) final String regionPath)
+      throws Exception {
-
-    try {
-      LuceneIndexInfo indexInfo = new LuceneIndexInfo(indexName, regionPath);
-      return toTabularResult(getIndexDetails(indexInfo), true);
-    } catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_DESCRIBE_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createInfoResult(e.getMessage());
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      getCache().getLogger().info(t);
-      return ResultBuilder.createGemFireErrorResult(String.format(
-          LuceneCliStrings.LUCENE_DESCRIBE_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    }
+    LuceneIndexInfo indexInfo = new LuceneIndexInfo(indexName, regionPath);
+    return toTabularResult(getIndexDetails(indexInfo), true);
-          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly) {
-
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly)
+      throws Exception {
+    LuceneQueryInfo queryInfo =
+        new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
+    int pageSize = Integer.MAX_VALUE;
+    searchResults = getSearchResults(queryInfo);
+    return displayResults(pageSize, keysOnly);
-    try {
-      LuceneQueryInfo queryInfo =
-          new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
-      int pageSize = Integer.MAX_VALUE;
-      searchResults = getSearchResults(queryInfo);
-      return displayResults(pageSize, keysOnly);
-    } catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_SEARCH_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createInfoResult(e.getMessage());
-    } catch (GemFireSecurityException e) {
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      getCache().getLogger().info(t);
-      return ResultBuilder.createGemFireErrorResult(String
-          .format(LuceneCliStrings.LUCENE_SEARCH_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    }
-    Set<DistributedMember> regionMembers = getRegionMembers(cache, regionPath);
-    Set<DistributedMember> normalMembers = getNormalMembers(cache);
+    Set<DistributedMember> regionMembers = findMembersForRegion(cache, regionPath);
+    Set<DistributedMember> normalMembers = getAllNormalMembers(cache);
-  protected Set<DistributedMember> getRegionMembers(InternalCache cache, String regionPath) {
-    return CliUtil.getMembersForeRegionViaFunction(cache, regionPath, true);
-  }
-
-  protected Set<DistributedMember> getNormalMembers(InternalCache cache) {
-    return CliUtil.getAllNormalMembers(cache);
-  }
-
-        throw new Exception(searchResults.get(i).getExceptionMessage());
+        throw new UserErrorException(searchResults.get(i).getExceptionMessage());
-    Set<DistributedMember> targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(),
-        functionArguments.getRegionPath(), returnAllMembers);
+    Set<DistributedMember> targetMembers = CliUtil.getRegionAssociatedMembers(
+        functionArguments.getRegionPath(), getCache(), returnAllMembers);
-      throw new IllegalArgumentException(CliStrings.format(
+      throw new UserErrorException(CliStrings.format(
-  protected ResultCollector<?, ?> executeFunction(Function function,
-      LuceneFunctionSerializable functionArguments, Set<DistributedMember> targetMembers) {
-    return CliUtil.executeFunction(function, functionArguments, targetMembers);
-  }
-
