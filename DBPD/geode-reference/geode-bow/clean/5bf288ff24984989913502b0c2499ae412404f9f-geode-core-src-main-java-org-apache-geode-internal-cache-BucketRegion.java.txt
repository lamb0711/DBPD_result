GEODE-6534: Reduce scope of LocalRegion methods (#3398)

* Reduce scope of methods and fields where possible
* Remove unused methods and fields
* Remove redundant interface
* Replace deprecated call with undeprecated call
* Apply FunctionalInterface annotation to nested interfaces

-  public void initialized() {
+  void initialized() {
-  protected DiskStoreImpl findDiskStore(RegionAttributes regionAttributes,
+  DiskStoreImpl findDiskStore(RegionAttributes regionAttributes,
-  protected boolean needsTombstoneGCKeysForClients(EventID eventID, FilterInfo clientRouting) {
+  boolean needsTombstoneGCKeysForClients(EventID eventID, FilterInfo clientRouting) {
-  protected void notifyClientsOfTombstoneGC(Map<VersionSource, Long> regionGCVersions,
+  void notifyClientsOfTombstoneGC(Map<VersionSource, Long> regionGCVersions,
-  protected boolean shouldGenerateVersionTag(RegionEntry entry, EntryEventImpl event) {
+  boolean shouldGenerateVersionTag(RegionEntry entry, EntryEventImpl event) {
-  protected EntryEventImpl generateEvictDestroyEvent(Object key) {
+  EntryEventImpl generateEvictDestroyEvent(Object key) {
-  protected void validateArguments(Object key, Object value, Object aCallbackArgument) {
+  void validateArguments(Object key, Object value, Object aCallbackArgument) {
-  protected RegionEntry basicPutEntry(final EntryEventImpl event, final long lastModified)
+  RegionEntry basicPutEntry(final EntryEventImpl event, final long lastModified)
-  public int sizeEstimate() {
+  int sizeEstimate() {
-  protected void distributeDestroyRegion(RegionEventImpl event, boolean notifyOfRegionDeparture) {
+  void distributeDestroyRegion(RegionEventImpl event, boolean notifyOfRegionDeparture) {
-  protected void updateSizeOnClearRegion(int sizeBeforeClear) {
+  void updateSizeOnClearRegion(int sizeBeforeClear) {
-  protected void setMemoryThresholdFlag(MemoryEvent event) {
+  void setMemoryThresholdFlag(MemoryEvent event) {
-  public void initialCriticalMembers(boolean localHeapIsCritical,
+  void initialCriticalMembers(boolean localHeapIsCritical,
-  protected void closeCallbacksExceptListener() {
+  void closeCallbacksExceptListener() {
-  public void incBucketEvictions() {
+  void incBucketEvictions() {
-  protected boolean isMemoryThresholdReachedForLoad() {
+  boolean isMemoryThresholdReachedForLoad() {
-  public HashMap getDestroyedSubregionSerialNumbers() {
+  HashMap getDestroyedSubregionSerialNumbers() {
-  protected void generateLocalFilterRouting(InternalCacheEvent event) {
+  void generateLocalFilterRouting(InternalCacheEvent event) {
-      stopper.checkCancelInProgress(ie);
+      getCancelCriterion().checkCancelInProgress(ie);
