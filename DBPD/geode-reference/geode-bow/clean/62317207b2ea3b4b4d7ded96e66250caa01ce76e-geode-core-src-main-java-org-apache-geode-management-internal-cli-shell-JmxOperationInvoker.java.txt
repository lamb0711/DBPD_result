GEODE-7022: Add SSL Alias Support for JMX Clients (#3857)

- Added tests.
- Fixed minor warnings.
- Use custom RMIClientSocketFactory that supports Geode SSL settings.
+import static org.apache.geode.internal.net.SSLConfigurationFactory.GEODE_SSL_CONFIG_PROPERTIES;
+
+import java.io.StringWriter;
-import java.util.TreeSet;
-import javax.rmi.ssl.SslRMIClientSocketFactory;
+import org.apache.geode.management.internal.ContextAwareSSLRMIClientSocketFactory;
-  public static final String JMX_URL_FORMAT = "service:jmx:rmi://{0}/jndi/rmi://{0}:{1}/jmxrmi";
+  private static final String JMX_URL_FORMAT = "service:jmx:rmi://{0}/jndi/rmi://{0}:{1}/jmxrmi";
-    final Set<String> propsToClear = new TreeSet<>();
-    try {
-      this.endpoints = host + "[" + port + "]"; // Use the same syntax as the "connect" command.
+    this.endpoints = host + "[" + port + "]"; // Use the same syntax as the "connect" command.
-      // Modify check period from default (60 sec) to 1 sec
-      final Map<String, Object> env = new HashMap<>();
+    // Modify check period from default (60 sec) to 1 sec
+    final Map<String, Object> env = new HashMap<>();
-      env.put(JMXConnectionListener.CHECK_PERIOD_PROP, JMXConnectionListener.CHECK_PERIOD);
+    env.put(JMXConnectionListener.CHECK_PERIOD_PROP, JMXConnectionListener.CHECK_PERIOD);
-      // when not using JMXShiroAuthenticator in the integrated security, JMX own password file
-      // authentication requires the credentials been sent in String[] format.
-      // Our JMXShiroAuthenticator handles both String[] and Properties format
-      String username = gfProperties.getProperty(ResourceConstants.USER_NAME);
-      String password = gfProperties.getProperty(ResourceConstants.PASSWORD);
-      if (username != null) {
-        env.put(JMXConnector.CREDENTIALS, new String[] {username, password});
-      }
+    // when not using JMXShiroAuthenticator in the integrated security, JMX own password file
+    // authentication requires the credentials been sent in String[] format.
+    // Our JMXShiroAuthenticator handles both String[] and Properties format
+    String username = gfProperties.getProperty(ResourceConstants.USER_NAME);
+    String password = gfProperties.getProperty(ResourceConstants.PASSWORD);
+    if (username != null) {
+      env.put(JMXConnector.CREDENTIALS, new String[] {username, password});
+    }
-      SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(gfProperties,
-          SecurableCommunicationChannel.JMX);
+    SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(gfProperties,
+        SecurableCommunicationChannel.JMX);
-      if (sslConfig.isEnabled()) {
-        if (sslConfig.getKeystore() != null) {
-          System.setProperty(SSLConfigurationFactory.JAVAX_KEYSTORE, sslConfig.getKeystore());
-          propsToClear.add(SSLConfigurationFactory.JAVAX_KEYSTORE);
-        }
-        if (sslConfig.getKeystorePassword() != null) {
-          System.setProperty(SSLConfigurationFactory.JAVAX_KEYSTORE_PASSWORD,
-              sslConfig.getKeystorePassword());
-          propsToClear.add(SSLConfigurationFactory.JAVAX_KEYSTORE_PASSWORD);
-        }
-        if (sslConfig.getKeystoreType() != null) {
-          System.setProperty(SSLConfigurationFactory.JAVAX_KEYSTORE_TYPE,
-              sslConfig.getKeystoreType());
-          propsToClear.add(SSLConfigurationFactory.JAVAX_KEYSTORE_TYPE);
-        }
-        if (sslConfig.getTruststore() != null) {
-          System.setProperty(SSLConfigurationFactory.JAVAX_TRUSTSTORE, sslConfig.getTruststore());
-          propsToClear.add(SSLConfigurationFactory.JAVAX_TRUSTSTORE);
-        }
-        if (sslConfig.getTruststorePassword() != null) {
-          System.setProperty(SSLConfigurationFactory.JAVAX_TRUSTSTORE_PASSWORD,
-              sslConfig.getTruststorePassword());
-          propsToClear.add(SSLConfigurationFactory.JAVAX_TRUSTSTORE_PASSWORD);
-        }
-        if (sslConfig.getTruststoreType() != null) {
-          System.setProperty(SSLConfigurationFactory.JAVAX_TRUSTSTORE_TYPE,
-              sslConfig.getTruststoreType());
-          propsToClear.add(SSLConfigurationFactory.JAVAX_TRUSTSTORE_TYPE);
-        }
-        env.put("com.sun.jndi.rmi.factory.socket", new SslRMIClientSocketFactory());
-      }
+    if (sslConfig.isEnabled()) {
+      StringWriter propertiesWriter = new StringWriter();
+      gfProperties.store(propertiesWriter, null);
+      System.setProperty(GEODE_SSL_CONFIG_PROPERTIES, propertiesWriter.toString());
+      env.put("com.sun.jndi.rmi.factory.socket", new ContextAwareSSLRMIClientSocketFactory());
+    }
-      this.url = new JMXServiceURL(MessageFormat.format(JMX_URL_FORMAT,
-          checkAndConvertToCompatibleIPv6Syntax(host), String.valueOf(port)));
-      this.connector = JMXConnectorFactory.connect(url, env);
-      this.mbsc = connector.getMBeanServerConnection();
-      this.connector.addConnectionNotificationListener(new JMXConnectionListener(this), null, null);
-      this.distributedSystemMXBeanProxy = JMX.newMXBeanProxy(mbsc,
-          MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
+    this.url = new JMXServiceURL(MessageFormat.format(JMX_URL_FORMAT,
+        checkAndConvertToCompatibleIPv6Syntax(host), String.valueOf(port)));
+    this.connector = JMXConnectorFactory.connect(url, env);
+    this.mbsc = connector.getMBeanServerConnection();
+    this.connector.addConnectionNotificationListener(new JMXConnectionListener(this), null, null);
+    this.distributedSystemMXBeanProxy = JMX.newMXBeanProxy(mbsc,
+        MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
-      if (this.distributedSystemMXBeanProxy == null) {
-        logger.info(
-            "DistributedSystemMXBean is not present on member with endpoints : " + this.endpoints);
+    if (this.distributedSystemMXBeanProxy == null) {
+      logger.info(
+          "DistributedSystemMXBean is not present on member with endpoints : " + this.endpoints);
+      throw new JMXConnectionException(JMXConnectionException.MANAGER_NOT_FOUND_EXCEPTION);
+    } else {
+      this.managerMemberObjectName = this.distributedSystemMXBeanProxy.getMemberObjectName();
+      if (this.managerMemberObjectName == null || !JMX.isMXBeanInterface(MemberMXBean.class)) {
+        logger.info("MemberMXBean with ObjectName " + this.managerMemberObjectName
+            + " is not present on member with endpoints : " + endpoints);
-        this.managerMemberObjectName = this.distributedSystemMXBeanProxy.getMemberObjectName();
-        if (this.managerMemberObjectName == null || !JMX.isMXBeanInterface(MemberMXBean.class)) {
-          logger.info("MemberMXBean with ObjectName " + this.managerMemberObjectName
-              + " is not present on member with endpoints : " + endpoints);
-          throw new JMXConnectionException(JMXConnectionException.MANAGER_NOT_FOUND_EXCEPTION);
-        } else {
-          this.memberMXBeanProxy =
-              JMX.newMXBeanProxy(mbsc, managerMemberObjectName, MemberMXBean.class);
-          this.fileUploadMBeanProxy = JMX.newMBeanProxy(mbsc,
-              new ObjectName(ManagementConstants.OBJECTNAME__FILEUPLOADER_MBEAN),
-              FileUploaderMBean.class);
-        }
-      }
-
-      this.isConnected.set(true);
-      this.clusterId = distributedSystemMXBeanProxy.getDistributedSystemId();
-    } finally {
-      for (String propToClear : propsToClear) {
-        System.clearProperty(propToClear);
+        this.memberMXBeanProxy =
+            JMX.newMXBeanProxy(mbsc, managerMemberObjectName, MemberMXBean.class);
+        this.fileUploadMBeanProxy = JMX.newMBeanProxy(mbsc,
+            new ObjectName(ManagementConstants.OBJECTNAME__FILEUPLOADER_MBEAN),
+            FileUploaderMBean.class);
+
+    this.isConnected.set(true);
+    this.clusterId = distributedSystemMXBeanProxy.getDistributedSystemId();
-  /**
-   * this should only returns a json representation of ResultModel
-   */
+  // this should only returns a json representation of ResultModel
-  public static String checkAndConvertToCompatibleIPv6Syntax(String hostAddress) {
+  private static String checkAndConvertToCompatibleIPv6Syntax(String hostAddress) {
-
-  public static final String CHECK_PERIOD_PROP = "jmx.remote.x.client.connection.check.period";
-  public static final long CHECK_PERIOD = 1000L;
+  static final String CHECK_PERIOD_PROP = "jmx.remote.x.client.connection.check.period";
+  static final long CHECK_PERIOD = 1000L;
-    if (JMXConnectionNotification.class.isInstance(notification)) {
+    if (notification instanceof JMXConnectionNotification) {
-
