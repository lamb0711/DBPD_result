Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An interface that implements data serialization
- * for internal GemFire product classes that have a fixed id.
- * The fixed id is used
- * to represent the class, on the wire, at serialization time and used
- * in a switch statement at deserialization time.
- * All the codes should be static final in this class.
- * <p> Implementors MUST have a public zero-arg constructor.
+ * An interface that implements data serialization for internal GemFire product classes that have a
+ * fixed id. The fixed id is used to represent the class, on the wire, at serialization time and
+ * used in a switch statement at deserialization time. All the codes should be static final in this
+ * class.
+ * <p>
+ * Implementors MUST have a public zero-arg constructor.
- * <p> Note that this class is for internal use only. Customer classes
- * that want to do something similiar should implement a subclass of
- * {@link DataSerializer} or {@link Instantiator}.
+ * <p>
+ * Note that this class is for internal use only. Customer classes that want to do something
+ * similiar should implement a subclass of {@link DataSerializer} or {@link Instantiator}.
- * <li> Define a constant with an id that is free and put it in
- *    <code>DataSerializableFixedID</code> as a "public static final byte".
- *    Make sure and update the "unused" comments to no longer mention your new id.
- *    If implementing a class used only for tests then there is no need to consume
- *    a fixed id and you should use {@link #NO_FIXED_ID}. In this case you can skip
- *    steps 3 and 4.
- * <li> Define a method in the class that
- *    implements <code>DataSerializableFixedID</code>
- *    named {@link #getDSFID} that returns the constant from step 1.
- * <li> Define a private static method in {@link DSFIDFactory} that returns an instance
- *    of the class from step 2 usually be calling its zero-arg constructor
- *    and then calling fromData(in).
- *    See the end of {@link DSFIDFactory} for examples.
- * <li> Add a case statement in {@link DSFIDFactory#create} for the constant
- *    from step 1 that calls the method from step 3.
- * <li> Implement {@link #toData} and {@link #fromData} just like you
- *    would on a <code>DataSerializer</code>. Make sure you follow the javadocs 
- *    for these methods to add support for rolling upgrades.
+ * <li>Define a constant with an id that is free and put it in <code>DataSerializableFixedID</code>
+ * as a "public static final byte". Make sure and update the "unused" comments to no longer mention
+ * your new id. If implementing a class used only for tests then there is no need to consume a fixed
+ * id and you should use {@link #NO_FIXED_ID}. In this case you can skip steps 3 and 4.
+ * <li>Define a method in the class that implements <code>DataSerializableFixedID</code> named
+ * {@link #getDSFID} that returns the constant from step 1.
+ * <li>Define a private static method in {@link DSFIDFactory} that returns an instance of the class
+ * from step 2 usually be calling its zero-arg constructor and then calling fromData(in). See the
+ * end of {@link DSFIDFactory} for examples.
+ * <li>Add a case statement in {@link DSFIDFactory#create} for the constant from step 1 that calls
+ * the method from step 3.
+ * <li>Implement {@link #toData} and {@link #fromData} just like you would on a
+ * <code>DataSerializer</code>. Make sure you follow the javadocs for these methods to add support
+ * for rolling upgrades.
-  /* In the class to be serialized, add
-  public FOO(DataInput in) throws IOException, ClassNotFoundException {
-    fromData(in);
-  }
-  
-  public int getDSFID() {
-    return FOO;
-  }
-  
-  In DataSerializableFixedId, allocate an ID for the class
-  public static final byte FOO = -54;
-
-  In DSFIDFactory, add a case for the new class
-    case FOO:
-      return new FOO(in);
-  */
+  /*
+   * In the class to be serialized, add public FOO(DataInput in) throws IOException,
+   * ClassNotFoundException { fromData(in); }
+   * 
+   * public int getDSFID() { return FOO; }
+   * 
+   * In DataSerializableFixedId, allocate an ID for the class public static final byte FOO = -54;
+   * 
+   * In DSFIDFactory, add a case for the new class case FOO: return new FOO(in);
+   */
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  public static final byte ADD_CACHESERVER_PROFILE_UPDATE = -118;  
+  public static final byte ADD_CACHESERVER_PROFILE_UPDATE = -118;
-  public static final byte DISTRIBUTED_REGION_FUNCTION_MESSAGE = -104; 
+  public static final byte DISTRIBUTED_REGION_FUNCTION_MESSAGE = -104;
-  
-  public static final byte MEMBER_FUNCTION_MESSAGE = -102; 
-  public static final byte MEMBER_FUNCTION_REPLY_MESSAGE = -101;   
+
+  public static final byte MEMBER_FUNCTION_MESSAGE = -102;
+  public static final byte MEMBER_FUNCTION_REPLY_MESSAGE = -101;
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-   * A header byte meaning that the next element in the stream is a
-   * <code>VMIdProfile</code>.
+   * A header byte meaning that the next element in the stream is a <code>VMIdProfile</code>.
-  
+
-  // 1 available for reuse.  Retired in Geode v1.0
-  //public static final byte JGROUPS_VIEW = 1;
-  
-  // 2 available for reuse.  Retired in Geode v1.0
-//  public static final byte JGROUPS_JOIN_RESP = 2;
-  
+  // 1 available for reuse. Retired in Geode v1.0
+  // public static final byte JGROUPS_VIEW = 1;
+
+  // 2 available for reuse. Retired in Geode v1.0
+  // public static final byte JGROUPS_JOIN_RESP = 2;
+
-  
+
-  
+
-  
-  /** 
-   * A header byte meaning that the next element in the stream is 
-   * a <code>InitialImageOperation.EventStateMessage</code>. 
-   */ 
+
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>InitialImageOperation.EventStateMessage</code>.
+   */
-  
-  /** A header byte meaning that the next element in the stream is a
+
+  /**
+   * A header byte meaning that the next element in the stream is a
-  /** A header byte meaning that the next element in the stream is a
+  /**
+   * A header byte meaning that the next element in the stream is a
-  /** A header byte meaning that the next element in the stream is a
+  /**
+   * A header byte meaning that the next element in the stream is a
-  /** A header byte meaning that the next element in the stream is a
-   * <code>ObjectPartList</code>.
+  /**
+   * A header byte meaning that the next element in the stream is a <code>ObjectPartList</code>.
-  /** A header byte meaning that the next element in the stream is a
-   * <code>ClearRegionWithContextMessage</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>ClearRegionWithContextMessage</code>.
+   */
-  /** A header byte meaning that the next element in the stream is a
-   * <code>ClientUpdateMessage</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>ClientUpdateMessage</code>.
+   */
-  /** A header byte meaning that the next element in the stream is a
-   * <code>EventID</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a <code>EventID</code>.
+   */
-  /** A header byte meaning that the next element in the stream is a
-   * <code>ClientProxyMembershipID</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>ClientProxyMembershipID</code>.
+   */
-  
-  // 70 available for reuse - retired in Geode v1.0
-  //public static final byte IP_ADDRESS = 70;
-  /** A header byte meaning that the next element in the stream is a
-   * <code>UpdateOperation.UpdateMessage</code>. */
+  // 70 available for reuse - retired in Geode v1.0
+  // public static final byte IP_ADDRESS = 70;
+
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>UpdateOperation.UpdateMessage</code>.
+   */
-  /** A header byte meaning that the next element in the stream is a
-   * <code>ReplyMessage</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a <code>ReplyMessage</code>.
+   */
-  /** A header byte meaning that the next element in the stream is a
-   * <code>CreateRegionReplyMessage</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>CreateRegionReplyMessage</code>.
+   */
-  /** A header byte meaning that the next element in the stream is a
-   * <code>SystemMemberCacheMessage</code>. */
-  //added for feature requests #32887
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>SystemMemberCacheMessage</code>.
+   */
+  // added for feature requests #32887
-  
+
-  
+
-  /** A header byte meaning that the next element in the stream is a
-   * <code>UpdateOperation.UpdateWithContextMessage</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>UpdateOperation.UpdateWithContextMessage</code>.
+   */
-    
+
-  /** A header byte meaning that the next element in the stream is a
-   * <code>HAEventWrapper</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a <code>HAEventWrapper</code>.
+   */
-  /** A header byte meaning that the next element in the stream is a
-   * <code>DestroyOperation.DestroyWithContextMessage</code>. */
+  /**
+   * A header byte meaning that the next element in the stream is a
+   * <code>DestroyOperation.DestroyWithContextMessage</code>.
+   */
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  public static final short CLIENT_DATASERIALIZER_MESSAGE=2002;
-  
-  //2003..2098 unused
-  
+  public static final short CLIENT_DATASERIALIZER_MESSAGE = 2002;
+
+  // 2003..2098 unused
+
-  public static final short PERSISTENT_MEMBERSHIP_VIEW_REQUEST =2100;
+  public static final short PERSISTENT_MEMBERSHIP_VIEW_REQUEST = 2100;
-  
+
-  
+
-  public static final short FLUSH_TO_DISK_RESPONSE= 2127;
+  public static final short FLUSH_TO_DISK_RESPONSE = 2127;
-  public static final short CHECK_TYPE_REGISTRY_STATE= 2128;
-  public static final short  PREPARE_REVOKE_PERSISTENT_ID_REQUEST = 2129;
+  public static final short CHECK_TYPE_REGISTRY_STATE = 2128;
+  public static final short PREPARE_REVOKE_PERSISTENT_ID_REQUEST = 2129;
-  
+
-  
+
-  public static final short  PARALLEL_QUEUE_BATCH_REMOVAL_MESSAGE= 2140;
+  public static final short PARALLEL_QUEUE_BATCH_REMOVAL_MESSAGE = 2140;
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    
+
-  
+
-  
+
-  
+
-   * This special code is a way for an implementor if this interface
-   * to say that it does not have a fixed id.
-   * In that case its class name is serialized.
-   * Currently only test classes just return this code.
+   * This special code is a way for an implementor if this interface to say that it does not have a
+   * fixed id. In that case its class name is serialized. Currently only test classes just return
+   * this code.
-   * Writes the state of this object as primitive data to the given
-   * <code>DataOutput</code>.<br>
+   * Writes the state of this object as primitive data to the given <code>DataOutput</code>.<br>
-   * Note: For rolling upgrades, if there is a change in the object format from
-   * previous version, add a new toDataPre_GFE_X_X_X_X() method and add an entry for the
-   * current {@link Version} in the getSerializationVersions array of the implementing
-   * class. e.g. if msg format changed in version 80, create toDataPre_GFE_8_0_0_0, add
-   * Version.GFE_80 to the getSerializationVersions array and copy previous toData contents 
-   * to this newly created toDataPre_GFE_X_X_X_X() method.
-   * @throws IOException
-   *           A problem occurs while writing to <code>out</code>
+   * Note: For rolling upgrades, if there is a change in the object format from previous version,
+   * add a new toDataPre_GFE_X_X_X_X() method and add an entry for the current {@link Version} in
+   * the getSerializationVersions array of the implementing class. e.g. if msg format changed in
+   * version 80, create toDataPre_GFE_8_0_0_0, add Version.GFE_80 to the getSerializationVersions
+   * array and copy previous toData contents to this newly created toDataPre_GFE_X_X_X_X() method.
+   * 
+   * @throws IOException A problem occurs while writing to <code>out</code>
-   * Reads the state of this object as primitive data from the given
-   * <code>DataInput</code>. <br>
+   * Reads the state of this object as primitive data from the given <code>DataInput</code>. <br>
-   * Note: For rolling upgrades, if there is a change in the object format from
-   * previous version, add a new fromDataPre_GFE_X_X_X_X() method and add an entry for
-   * the current {@link Version} in the getSerializationVersions array of the implementing
-   * class. e.g. if msg format changed in version 80, create fromDataPre_GFE_8_0_0_0, add
-   * Version.GFE_80 to the getSerializationVersions array  and copy previous fromData 
-   * contents to this newly created fromDataPre_GFE_X_X_X_X() method.
-   * @throws IOException
-   *           A problem occurs while reading from <code>in</code>
-   * @throws ClassNotFoundException
-   *           A class could not be loaded while reading from <code>in</code>
+   * Note: For rolling upgrades, if there is a change in the object format from previous version,
+   * add a new fromDataPre_GFE_X_X_X_X() method and add an entry for the current {@link Version} in
+   * the getSerializationVersions array of the implementing class. e.g. if msg format changed in
+   * version 80, create fromDataPre_GFE_8_0_0_0, add Version.GFE_80 to the getSerializationVersions
+   * array and copy previous fromData contents to this newly created fromDataPre_GFE_X_X_X_X()
+   * method.
+   * 
+   * @throws IOException A problem occurs while reading from <code>in</code>
+   * @throws ClassNotFoundException A class could not be loaded while reading from <code>in</code>
