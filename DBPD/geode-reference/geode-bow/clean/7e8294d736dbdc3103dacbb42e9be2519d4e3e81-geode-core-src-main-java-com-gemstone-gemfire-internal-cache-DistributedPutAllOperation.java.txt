Merge branch 'develop' into feature/GEODE-17-2

# Conflicts:
#	geode-core/src/test/resources/com/gemstone/gemfire/codeAnalysis/sanctionedSerializables.txt

+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
-      @Retained
+      @Unretained
-        @Retained EntryEventImpl ev = getEventForPosition(position);
+        @Unretained EntryEventImpl ev = getEventForPosition(position);
-  @Retained
+  @Unretained
-      @Released EntryEventImpl ev = getEventForPosition(i);
+      @Unretained EntryEventImpl ev = getEventForPosition(i);
-        try {
-        } finally {
-          ev.release();
-        }
-	msg.setFetchFromHDFS(event.isFetchFromHDFS());
-        event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), false, false /*isPutDML*/);
+        event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), false /*isPutDML*/);
-            event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), event.isFetchFromHDFS(), event.isPutDML());
+            event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), event.isPutDML());
-    // By default, fetchFromHDFS == true;
-    private transient boolean fetchFromHDFS = true;
-    
-        boolean requiresRegionContext, boolean fetchFromHDFS, boolean isPutDML) {
+        boolean requiresRegionContext, boolean isPutDML) {
-	  ev.setFetchFromHDFS(fetchFromHDFS);
-            doEntryPut(putAllData[i], rgn, requiresRegionContext,  fetchFromHDFS, isPutDML);
+            doEntryPut(putAllData[i], rgn, requiresRegionContext,  isPutDML);
-    public void setFetchFromHDFS(boolean val) {
-      this.fetchFromHDFS = val;
-    }
-    
-      if (fetchFromHDFS) {
-        bits |= FETCH_FROM_HDFS;
-      }
