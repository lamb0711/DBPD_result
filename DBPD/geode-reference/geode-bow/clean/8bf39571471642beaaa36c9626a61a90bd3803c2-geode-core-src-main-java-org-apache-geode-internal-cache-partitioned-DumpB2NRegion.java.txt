Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message used for debugging purposes. For example if a test fails it can
- * call 
- * {@link org.apache.geode.internal.cache.PartitionedRegion#sendDumpB2NRegionForBucket(int)}
- * which sends this message to all VMs that have that PartitionedRegion defined.
+ * A message used for debugging purposes. For example if a test fails it can call
+ * {@link org.apache.geode.internal.cache.PartitionedRegion#sendDumpB2NRegionForBucket(int)} which
+ * sends this message to all VMs that have that PartitionedRegion defined.
-public final class DumpB2NRegion extends PartitionMessage
-  {
+public final class DumpB2NRegion extends PartitionMessage {
-  
+
- 
-  public DumpB2NRegion() {
-  }
-  private DumpB2NRegion(Set recipients, int regionId, ReplyProcessor21 processor, int bId, boolean justPrimaryInfo) {
+  public DumpB2NRegion() {}
+
+  private DumpB2NRegion(Set recipients, int regionId, ReplyProcessor21 processor, int bId,
+      boolean justPrimaryInfo) {
-  public static DumpB2NResponse send(Set recipients, PartitionedRegion r,
-      int bId, boolean justPrimaryInfo)
-  {
+  public static DumpB2NResponse send(Set recipients, PartitionedRegion r, int bId,
+      boolean justPrimaryInfo) {
-    DumpB2NRegion m = new DumpB2NRegion(recipients, r.getPRId(),
-	p, bId, justPrimaryInfo);
+    DumpB2NRegion m = new DumpB2NRegion(recipients, r.getPRId(), p, bId, justPrimaryInfo);
-  public void process(final DistributionManager dm)
-  {
+  public void process(final DistributionManager dm) {
-    
+
-//      pr = null; (redundant assignment)
+        // pr = null; (redundant assignment)
-          ReplyException rex = new ReplyException(
-              new TimeoutException("Waited too long for region to initialize"));
+          ReplyException rex =
+              new ReplyException(new TimeoutException("Waited too long for region to initialize"));
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-        }
-        finally {
-          if (interrupted) Thread.currentThread().interrupt();
+        } finally {
+          if (interrupted)
+            Thread.currentThread().interrupt();
-    }
-    catch (CancelException e) {
-      sendReply(this.sender,this.processorId , dm, new ReplyException(e), pr, 0);
-    }
-    catch (PRLocallyDestroyedException e) {
-      sendReply(this.sender,this.processorId , dm, new ReplyException(e), pr, 0);
+    } catch (CancelException e) {
+      sendReply(this.sender, this.processorId, dm, new ReplyException(e), pr, 0);
+    } catch (PRLocallyDestroyedException e) {
+      sendReply(this.sender, this.processorId, dm, new ReplyException(e), pr, 0);
-    }
-    catch (RegionDestroyedException rde) {
-      sendReply(this.sender,this.processorId , dm, new ReplyException(rde), pr, 0);
+    } catch (RegionDestroyedException rde) {
+      sendReply(this.sender, this.processorId, dm, new ReplyException(rde), pr, 0);
-  
+
-  protected boolean operateOnPartitionedRegion(DistributionManager dm, 
-      PartitionedRegion pr, long startTime) throws CacheException {
-    PrimaryInfo pinfo = null; 
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr,
+      long startTime) throws CacheException {
+    PrimaryInfo pinfo = null;
-      pinfo = new PrimaryInfo(pr.getRegionAdvisor().getBucket(this.bucketId).isHosting(), 
+      pinfo = new PrimaryInfo(pr.getRegionAdvisor().getBucket(this.bucketId).isHosting(),
-  
+
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  
-  
+
+
-    
+
-    
-    private DumpB2NReplyMessage(int procid, PrimaryInfo pinfo) 
-    {
+
+    private DumpB2NReplyMessage(int procid, PrimaryInfo pinfo) {
-    
-    public static void send(InternalDistributedMember recipient, int processorId, DM dm, PrimaryInfo pinfo) 
-    {
+
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm,
+        PrimaryInfo pinfo) {
-    
-    
+
+
-    public void process(final DM dm, final ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, final ReplyProcessor21 processor) {
-        logger.trace(LogMarker.DM, "DumpB2NReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "DumpB2NReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-      
+
-      
+
-    
-    
-    public PrimaryInfo getPrimaryInfo()
-    {
+
+
+    public PrimaryInfo getPrimaryInfo() {
-    
+
-    public void fromData(DataInput in) throws IOException, ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-    
+
-    public String toString()
-    {
+    public String toString() {
-  }    
-  
-  public static class DumpB2NResponse extends PartitionResponse  {
+  }
+
+  public static class DumpB2NResponse extends PartitionResponse {
-    
+
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-        DumpB2NReplyMessage reply = (DumpB2NReplyMessage)msg;
+        DumpB2NReplyMessage reply = (DumpB2NReplyMessage) msg;
-          Object[] newBucketHost = new Object[] {reply.getSender(), Boolean.valueOf(reply.getPrimaryInfo().isPrimary), reply.getPrimaryInfo().hostToken};
-          synchronized(this.primaryInfos) {
+          Object[] newBucketHost = new Object[] {reply.getSender(),
+              Boolean.valueOf(reply.getPrimaryInfo().isPrimary), reply.getPrimaryInfo().hostToken};
+          synchronized (this.primaryInfos) {
-          logger.trace(LogMarker.DM, "DumpB2NResponse got a primaryInfo {} from {}", reply.getPrimaryInfo(), reply.getSender());
+          logger.trace(LogMarker.DM, "DumpB2NResponse got a primaryInfo {} from {}",
+              reply.getPrimaryInfo(), reply.getSender());
-    public List waitForPrimaryInfos() 
-        throws ForceReattemptException {
+    public List waitForPrimaryInfos() throws ForceReattemptException {
-          waitForCacheException();
-      }
-      catch (ForceReattemptException e) {
+        waitForCacheException();
+      } catch (ForceReattemptException e) {
-      }
-      catch (CacheException e) {
-        logger.debug("B2NResponse got remote CacheException, throwing ForceReattemptException. {}", e.getMessage(), e);
-        throw new ForceReattemptException(LocalizedStrings.DumpB2NRegion_B2NRESPONSE_GOT_REMOTE_CACHEEXCEPTION_THROWING_FORCEREATTEMPTEXCEPTION.toLocalizedString(), e);
+      } catch (CacheException e) {
+        logger.debug("B2NResponse got remote CacheException, throwing ForceReattemptException. {}",
+            e.getMessage(), e);
+        throw new ForceReattemptException(
+            LocalizedStrings.DumpB2NRegion_B2NRESPONSE_GOT_REMOTE_CACHEEXCEPTION_THROWING_FORCEREATTEMPTEXCEPTION
+                .toLocalizedString(),
+            e);
-  
+
+
-      this.isHosting = isHosting; this.isPrimary = isPrimary;
+      this.isHosting = isHosting;
+      this.isPrimary = isPrimary;
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.partitioned.PartitionMessage#appendFields(java.lang.StringBuffer)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.partitioned.PartitionMessage#appendFields(java.lang.
+   * StringBuffer)
-    buff.append(" bucketId=").append(this.bucketId)
-      .append(" primaryInfoOnly=").append(this.onlyReturnPrimaryInfo);
+    buff.append(" bucketId=").append(this.bucketId).append(" primaryInfoOnly=")
+        .append(this.onlyReturnPrimaryInfo);
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
