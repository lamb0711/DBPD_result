add analyzer to luceneIndexImpl
add RepositoryManager into luceneIndexImpl

-import java.util.Collection;
+import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import com.gemstone.gemfire.cache.Cache;
-import com.gemstone.gemfire.cache.CacheFactory;
-import com.gemstone.gemfire.cache.execute.RegionFunctionContext;
-import com.gemstone.gemfire.cache.lucene.internal.repository.IndexRepository;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.cache.lucene.internal.repository.RepositoryManager;
-  protected HashSet<String> searchablePDXFieldNames = new HashSet<String>();
+  protected RepositoryManager repositoryManager;
+  protected Analyzer analyzer;
-  /* searchable fields should belong to a specific index
-   */
-  protected void addSearchablePDXField(String field) {
-    searchablePDXFieldNames.add(field);
-  }
-
-  public String[] getPDXFieldNames() {
-    String[] pdxFieldNames = new String[searchablePDXFieldNames.size()];;
-    return searchablePDXFieldNames.toArray(pdxFieldNames);
-  }
-  
-  @Override
-  @Override
-  public Collection<IndexRepository> getRepository(RegionFunctionContext ctx) {
-    return null;
+  public RepositoryManager getRepositoryManager() {
+    return this.repositoryManager;
+  }
+  
+  public void setAnalyzer(Analyzer analyzer) {
+    if (analyzer == null) {
+      this.analyzer = new StandardAnalyzer();
+    } else {
+      this.analyzer = analyzer;
+    }
+  public Analyzer getAnalyzer() {
+    return this.analyzer;
+  }
+
+  protected void initialize() {
+  }
