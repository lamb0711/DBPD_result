Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * ResultSender needs ResultCollector in which to add results one by one.
- * In case of localExecution it just adds result to the resultCollector whereas for remote cases it 
- * takes help of PRFunctionExecutionStreamer to send results to the calling node. The results will be received 
- * in the ResultReciever.
- * ResultSender will be instantiated in executeOnDatastore and set in FunctionContext.
+ * ResultSender needs ResultCollector in which to add results one by one. In case of localExecution
+ * it just adds result to the resultCollector whereas for remote cases it takes help of
+ * PRFunctionExecutionStreamer to send results to the calling node. The results will be received in
+ * the ResultReciever. ResultSender will be instantiated in executeOnDatastore and set in
+ * FunctionContext.
-public final class PartitionedRegionFunctionResultSender implements
-    InternalResultSender {
+public final class PartitionedRegionFunctionResultSender implements InternalResultSender {
-  
+
-  
+
-  
+
-  
+
-   * Have to combine next two constructor in one and make a new class which will 
-   * send Results back.
+   * Have to combine next two constructor in one and make a new class which will send Results back.
+   * 
-  public PartitionedRegionFunctionResultSender(DM dm, PartitionedRegion pr,
-      long time, PartitionedRegionFunctionStreamingMessage msg,
-      Function function, Set<Integer> bucketSet) {
+  public PartitionedRegionFunctionResultSender(DM dm, PartitionedRegion pr, long time,
+      PartitionedRegionFunctionStreamingMessage msg, Function function, Set<Integer> bucketSet) {
-    
+
-   * Have to combine next two constructor in one and make a new class which will
-   * send Results back.
+   * Have to combine next two constructor in one and make a new class which will send Results back.
+   * 
-  public PartitionedRegionFunctionResultSender(DM dm,
-      PartitionedRegion partitionedRegion, long time, ResultCollector rc,
-      ServerToClientFunctionResultSender sender, boolean onlyLocal, boolean onlyRemote,
-      boolean forwardExceptions, Function function, Set<Integer> bucketSet) {
+  public PartitionedRegionFunctionResultSender(DM dm, PartitionedRegion partitionedRegion,
+      long time, ResultCollector rc, ServerToClientFunctionResultSender sender, boolean onlyLocal,
+      boolean onlyRemote, boolean forwardExceptions, Function function, Set<Integer> bucketSet) {
-  private void checkForBucketMovement(Object oneResult){
-    if (!(forwardExceptions && oneResult instanceof Throwable) 
+  private void checkForBucketMovement(Object oneResult) {
+    if (!(forwardExceptions && oneResult instanceof Throwable)
-      bme =  new BucketMovedException(
-          LocalizedStrings.FunctionService_BUCKET_MIGRATED_TO_ANOTHER_NODE
-              .toLocalizedString());
-      if(function.isHA()){
+      bme = new BucketMovedException(
+          LocalizedStrings.FunctionService_BUCKET_MIGRATED_TO_ANOTHER_NODE.toLocalizedString());
+      if (function.isHA()) {
-    
-    
+
+
-  
+
-      if(this.localLastResultRecieved){
+      if (this.localLastResultRecieved) {
-        }else{
+        } else {
-        
-      }
-      else {
-      //call a synchronized method as local node is also waiting to send lastResult 
+
+      } else {
+        // call a synchronized method as local node is also waiting to send lastResult
-    }
-    else { // P2P
+    } else { // P2P
-        try {          
-          if(this.bme !=null){
-            this.msg.sendReplyForOneResult(dm, pr, time, oneResult, false, enableOrderedResultStreming);
+        try {
+          if (this.bme != null) {
+            this.msg.sendReplyForOneResult(dm, pr, time, oneResult, false,
+                enableOrderedResultStreming);
-          }else{
-            this.msg.sendReplyForOneResult(dm, pr, time, oneResult, true, enableOrderedResultStreming);  
+          } else {
+            this.msg.sendReplyForOneResult(dm, pr, time, oneResult, true,
+                enableOrderedResultStreming);
-          
-        }
-        catch (ForceReattemptException e) {
+
+        } catch (ForceReattemptException e) {
+          throw new FunctionException(e);
+        } catch (InterruptedException e) {
-        catch (InterruptedException e) {
-          throw new FunctionException(e);
-        }
-      }
-      else {
-        if(this.localLastResultRecieved){
+      } else {
+        if (this.localLastResultRecieved) {
-          }else{
+          } else {
-        }
-        else {
-        //call a synchronized method as local node is also waiting to send lastResult 
+        } else {
+          // call a synchronized method as local node is also waiting to send lastResult
-        FunctionStats.getFunctionStats(function.getId(),
-            this.dm.getSystem()).incResultsReceived();
+        FunctionStats.getFunctionStats(function.getId(), this.dm.getSystem()).incResultsReceived();
-      // time the stats for the result sent is again incremented : Once the PR team comes with the concept of the Streaming FunctionOperation
+      // time the stats for the result sent is again incremented : Once the PR team comes with the
+      // concept of the Streaming FunctionOperation
-      FunctionStats.getFunctionStats(function.getId(),
-          this.dm.getSystem()).incResultsReturned();
+      FunctionStats.getFunctionStats(function.getId(), this.dm.getSystem()).incResultsReturned();
-  } 
+  }
-  private synchronized void lastResult(Object oneResult,
-      ResultCollector collector, boolean lastRemoteResult,
-      boolean lastLocalResult, DistributedMember memberID) {
+  private synchronized void lastResult(Object oneResult, ResultCollector collector,
+      boolean lastRemoteResult, boolean lastLocalResult, DistributedMember memberID) {
-    if(lastRemoteResult){
+    if (lastRemoteResult) {
-    
-    if(lastLocalResult) {
+
+    if (lastLocalResult) {
-    
+
-        if(lastLocalResult){
+        if (lastLocalResult) {
-          }else{
+          } else {
-        }else{
+        } else {
-            
+
-      }
-      else {
-        if(lastLocalResult){
+      } else {
+        if (lastLocalResult) {
-            clientSend(bme,memberID);
-          }else{
+            clientSend(bme, memberID);
+          } else {
-        }else{
-          clientSend(oneResult, memberID);  
+        } else {
+          clientSend(oneResult, memberID);
-        
+
-    }
-    else { // P2P
+    } else { // P2P
-        if(lastLocalResult){
+        if (lastLocalResult) {
-          if(bme!=null){
+          if (bme != null) {
-          }else{
+          } else {
-        }else{
+        } else {
-      }
-      else {
-        if(lastLocalResult){
+      } else {
+        if (lastLocalResult) {
-          if(bme!=null){
+          if (bme != null) {
-          }else{
+          } else {
-        }
-        else{
+        } else {
-      
+
-        }
-        else {
-          //call a synchronized method as local node is also waiting to send lastResult 
+        } else {
+          // call a synchronized method as local node is also waiting to send lastResult
-      }
-      else {
+      } else {
-    }
-    else{
+    } else {
-        }
-        else {
-        //call a synchronized method as local node is also waiting to send lastResult 
+        } else {
+          // call a synchronized method as local node is also waiting to send lastResult
-      }
-      else {
+      } else {
-      
+
-      logger.debug("PartitionedRegionFunctionResultSender sending result from local node to client {}", oneResult);
+      logger.debug(
+          "PartitionedRegionFunctionResultSender sending result from local node to client {}",
+          oneResult);
-    }
-    else { // P2P
+    } else { // P2P
-          logger.debug("PartitionedRegionFunctionResultSender sending result from remote node {}", oneResult);
-          this.msg.sendReplyForOneResult(dm, pr, time, oneResult, false, enableOrderedResultStreming);
-        }
-        catch (ForceReattemptException e) {
+          logger.debug("PartitionedRegionFunctionResultSender sending result from remote node {}",
+              oneResult);
+          this.msg.sendReplyForOneResult(dm, pr, time, oneResult, false,
+              enableOrderedResultStreming);
+        } catch (ForceReattemptException e) {
+          throw new FunctionException(e);
+        } catch (InterruptedException e) {
-        catch (InterruptedException e) {
-          throw new FunctionException(e);
-        }
-      }
-      else {
-        logger.debug("PartitionedRegionFunctionResultSender adding result to ResultCollector on local node {}", oneResult);
+      } else {
+        logger.debug(
+            "PartitionedRegionFunctionResultSender adding result to ResultCollector on local node {}",
+            oneResult);
-        FunctionStats.getFunctionStats(function.getId(),
-            this.dm.getSystem()).incResultsReceived();
+        FunctionStats.getFunctionStats(function.getId(), this.dm.getSystem()).incResultsReceived();
-    //incrementing result sent stats.
-      FunctionStats.getFunctionStats(function.getId(),
-          this.dm.getSystem()).incResultsReturned();
+      // incrementing result sent stats.
+      FunctionStats.getFunctionStats(function.getId(), this.dm.getSystem()).incResultsReturned();
-  }  
-  
+  }
+
-  private void lastClientSend(DistributedMember memberID,
-      Object lastResult) {
+  private void lastClientSend(DistributedMember memberID, Object lastResult) {
-    InternalFunctionException iFunxtionException = new InternalFunctionException(
-        exception);
+    InternalFunctionException iFunxtionException = new InternalFunctionException(exception);
-  
+
-    }
-    else {
-      ((LocalResultCollector)this.rc).setException(exception);
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.PartitionedRegionFunctionResultSender_UNEXPECTED_EXCEPTION_DURING_FUNCTION_EXECUTION_ON_LOCAL_NODE),
+    } else {
+      ((LocalResultCollector) this.rc).setException(exception);
+      logger.info(
+          LocalizedMessage.create(
+              LocalizedStrings.PartitionedRegionFunctionResultSender_UNEXPECTED_EXCEPTION_DURING_FUNCTION_EXECUTION_ON_LOCAL_NODE),
-  
+
-  public boolean isLocallyExecuted()
-  {
+  public boolean isLocallyExecuted() {
