Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Enumerated type for types of {@linkplain Index indexes}
+ *             Enumerated type for types of {@linkplain Index indexes}
-   * The index type of a functional index.
-   * A functional index is used for the comparison of some function
-   * of a region value with a constant, using a relational operator.
-   * The indexedExpression yields a value that is a Comparable. The "constant"
-   * that it is to be compared to is any expression that is not dependent
-   * on a value in the region. A simple example is an index on the
-   * indexedExpression "age". This would be used for a query that has the
-   * where clause "age < 55".
+   * The index type of a functional index. A functional index is used for the comparison of some
+   * function of a region value with a constant, using a relational operator. The indexedExpression
+   * yields a value that is a Comparable. The "constant" that it is to be compared to is any
+   * expression that is not dependent on a value in the region. A simple example is an index on the
+   * indexedExpression "age". This would be used for a query that has the where clause "age < 55".
-   * The indexedExpression for a functional index can be any Comparable
-   * or any of the following primitive types:<br>
+   * The indexedExpression for a functional index can be any Comparable or any of the following
+   * primitive types:<br>
-  public static final IndexType FUNCTIONAL
-    = new IndexType("FUNCTIONAL");
-  
+  public static final IndexType FUNCTIONAL = new IndexType("FUNCTIONAL");
+
-   * The index type of a hash index.
-   * A hash index is used for the comparison of some function
-   * of a region value with a constant, using a relational operator.
-   * The indexedExpression yields a value that is a Comparable. The "constant"
-   * that it is to be compared to is any expression that is not dependent
-   * on a value in the region. A simple example is an index on the
-   * indexedExpression "age". This would be used for a query that has the
-   * where clause "age = 55".
+   * The index type of a hash index. A hash index is used for the comparison of some function of a
+   * region value with a constant, using a relational operator. The indexedExpression yields a value
+   * that is a Comparable. The "constant" that it is to be compared to is any expression that is not
+   * dependent on a value in the region. A simple example is an index on the indexedExpression
+   * "age". This would be used for a query that has the where clause "age = 55".
-   * The indexedExpression for a hash index can be any Comparable
-   * or any of the following primitive types:<br>
+   * The indexedExpression for a hash index can be any Comparable or any of the following primitive
+   * types:<br>
-  public static final IndexType HASH
-  = new IndexType("HASH");
-  
-  
+  public static final IndexType HASH = new IndexType("HASH");
+
+
-   * The index type of a primary key index. A primary key index uses the
-   * keys in the region itself. By creating a primary key index, you make
-   * the query service aware of the relationship between the values in the
-   * region and the keys in the region and enable the relationship to be
-   * used to optimize the execution of queries. For example, if the values
-   * in a region are employee objects and the keys in the region is the
-   * attribute empId on those employees, then you can create a primary key
-   * index on that region with the indexedExpression "empId".
+   * The index type of a primary key index. A primary key index uses the keys in the region itself.
+   * By creating a primary key index, you make the query service aware of the relationship between
+   * the values in the region and the keys in the region and enable the relationship to be used to
+   * optimize the execution of queries. For example, if the values in a region are employee objects
+   * and the keys in the region is the attribute empId on those employees, then you can create a
+   * primary key index on that region with the indexedExpression "empId".
-   * The type of the indexedExpression for a primary key index can be any
-   * object type. Just as in a Region, the lookup is based on the implementation
-   * of the <code>equals</code> and <code>hashCode</code> methods in the
-   * object.
+   * The type of the indexedExpression for a primary key index can be any object type. Just as in a
+   * Region, the lookup is based on the implementation of the <code>equals</code> and
+   * <code>hashCode</code> methods in the object.
-  
-  //public static final IndexType MAP_INDEX = new IndexType("MAP_INDEX");
-  
+
+  // public static final IndexType MAP_INDEX = new IndexType("MAP_INDEX");
+
-  
+
-  
+
+   * 
-  
+
