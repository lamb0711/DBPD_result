GEODE-1570: add a test to verify rest security with SSL.

-import org.apache.http.HttpEntity;
-import org.apache.http.client.AuthCache;
-import org.apache.http.client.ClientProtocolException;
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
-import org.apache.http.impl.auth.BasicScheme;
-import org.apache.http.impl.client.BasicAuthCache;
-import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClientBuilder;
-import org.junit.Assert;
-import java.io.BufferedReader;
-import java.io.InputStream;
-import java.net.MalformedURLException;
+import java.security.KeyStore;
+import java.security.SecureRandom;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
-
-  public final static String PROTOCOL = "http";
+  private String protocol = "http";
+  private boolean useHttps = false;
+  private KeyStore keyStore;
-  public HttpResponse doHEAD(String query, String username, String password)
-      throws MalformedURLException {
-    HttpHead httpHead = new HttpHead(CONTEXT + query);
-    return doRequest(httpHead, username, password);
-  }
-
-  public HttpResponse doPost(String query, String username, String password, String body)
-      throws MalformedURLException {
-    HttpPost httpPost = new HttpPost(CONTEXT + query);
-    httpPost.addHeader("content-type", "application/json");
-    httpPost.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
-    return doRequest(httpPost, username, password);
-  }
-
-  public HttpResponse doPut(String query, String username, String password, String body)
-      throws MalformedURLException {
-    HttpPut httpPut = new HttpPut(CONTEXT + query);
-    httpPut.addHeader("content-type", "application/json");
-    httpPut.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
-    return doRequest(httpPut, username, password);
-  }
-
-  public HttpResponse doGet(String uri, String username, String password)
-      throws MalformedURLException {
-    HttpGet getRequest = new HttpGet(CONTEXT + uri);
-    return doRequest(getRequest, username, password);
-  }
-
-  public HttpResponse doGetRequest(String url) throws MalformedURLException {
-    HttpGet getRequest = new HttpGet(url);
-    return doRequest(getRequest, null, null);
-  }
-
-
-  public HttpResponse doDelete(String uri, String username, String password)
-      throws MalformedURLException {
-    HttpDelete httpDelete = new HttpDelete(CONTEXT + uri);
-    return doRequest(httpDelete, username, password);
+  public GeodeRestClient(String bindAddress, int restPort, boolean useHttps) {
+    if (useHttps) {
+      this.protocol = "https";
+      this.useHttps = true;
+    } else {
+      this.protocol = "http";
+      this.useHttps = false;
+    }
+    this.bindAddress = bindAddress;
+    this.restPort = restPort;
-   *
+   * 
-   *
+  public HttpResponse doHEAD(String query, String username, String password) throws Exception {
+    HttpHead httpHead = new HttpHead(CONTEXT + query);
+    return doRequest(httpHead, username, password);
+  }
+
+  public HttpResponse doPost(String query, String username, String password, String body)
+      throws Exception {
+    HttpPost httpPost = new HttpPost(CONTEXT + query);
+    httpPost.addHeader("content-type", "application/json");
+    httpPost.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
+    return doRequest(httpPost, username, password);
+  }
+
+  public HttpResponse doPut(String query, String username, String password, String body)
+      throws Exception {
+    HttpPut httpPut = new HttpPut(CONTEXT + query);
+    httpPut.addHeader("content-type", "application/json");
+    httpPut.setEntity(new StringEntity(body, StandardCharsets.UTF_8));
+    return doRequest(httpPut, username, password);
+  }
+
+  public HttpResponse doGet(String uri, String username, String password) throws Exception {
+    HttpGet getRequest = new HttpGet(CONTEXT + uri);
+    return doRequest(getRequest, username, password);
+  }
+
+  public HttpResponse doGetRequest(String url) throws Exception {
+    HttpGet getRequest = new HttpGet(url);
+    return doRequest(getRequest, null, null);
+  }
+
+  public HttpResponse doDelete(String uri, String username, String password) throws Exception {
+    HttpDelete httpDelete = new HttpDelete(CONTEXT + uri);
+    return doRequest(httpDelete, username, password);
+  }
+
-      throws MalformedURLException {
-    HttpHost targetHost = new HttpHost(bindAddress, restPort, PROTOCOL);
-    CloseableHttpClient httpclient = HttpClients.custom().build();
+      throws Exception {
+    HttpHost targetHost = new HttpHost(bindAddress, restPort, protocol);
+
+    HttpClientBuilder clientBuilder = HttpClients.custom();
-    // if username is null, do not put in authentication
+
+    // configures the clientBuilder and clientContext
-      httpclient = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();
-      AuthCache authCache = new BasicAuthCache();
-      BasicScheme basicAuth = new BasicScheme();
-      authCache.put(targetHost, basicAuth);
-      clientContext.setCredentialsProvider(credsProvider);
-      clientContext.setAuthCache(authCache);
+      clientBuilder.setDefaultCredentialsProvider(credsProvider);
-    try {
-      return httpclient.execute(targetHost, request, clientContext);
-    } catch (ClientProtocolException e) {
-      e.printStackTrace();
-      Assert.fail("Rest GET should not have thrown ClientProtocolException!");
-    } catch (IOException e) {
-      e.printStackTrace();
-      Assert.fail("Rest GET Request should not have thrown IOException!");
+    if (useHttps) {
+      SSLContext ctx = SSLContext.getInstance("TLS");
+      ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()},
+          new SecureRandom());
+      clientBuilder.setSSLContext(ctx);
+      clientBuilder.setSSLHostnameVerifier(new NoopHostnameVerifier());
-    return null;
+
+    return clientBuilder.build().execute(targetHost, request, clientContext);
+  }
+
+  private static class DefaultTrustManager implements X509TrustManager {
+
+    @Override
+    public void checkClientTrusted(X509Certificate[] arg0, String arg1)
+        throws CertificateException {
+    }
+
+    @Override
+    public void checkServerTrusted(X509Certificate[] arg0, String arg1)
+        throws CertificateException {
+    }
+
+    @Override
+    public X509Certificate[] getAcceptedIssuers() {
+      return null;
+    }
