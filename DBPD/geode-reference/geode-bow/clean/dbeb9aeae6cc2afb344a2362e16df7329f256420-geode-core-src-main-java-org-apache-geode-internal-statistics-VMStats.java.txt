Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Statistics related to a Java VM. Currently they all come from
- * {@link java.lang.Runtime}.
+ * Statistics related to a Java VM. Currently they all come from {@link java.lang.Runtime}.
-    vmType = f.createType("VMStats",
-                          "Stats available on any java virtual machine.",
-                          new StatisticDescriptor[] {
-                            f.createIntGauge("cpus",
-                                             "Number of cpus available to the java VM on its machine.",
-                                             "cpus", true),
-                            f.createLongGauge("freeMemory",
-                                              "An approximation fo the total amount of memory currently available for future allocated objects, measured in bytes.",
-                                              "bytes", true),
-                            f.createLongGauge("totalMemory",
-                                              "The total amount of memory currently available for current and future objects, measured in bytes.",
-                                              "bytes"),
-                            f.createLongGauge("maxMemory",
-                                              "The maximum amount of memory that the VM will attempt to use, measured in bytes.",
-                                              "bytes", true)
-                          });
+    vmType = f.createType("VMStats", "Stats available on any java virtual machine.",
+        new StatisticDescriptor[] {
+            f.createIntGauge("cpus", "Number of cpus available to the java VM on its machine.",
+                "cpus", true),
+            f.createLongGauge("freeMemory",
+                "An approximation fo the total amount of memory currently available for future allocated objects, measured in bytes.",
+                "bytes", true),
+            f.createLongGauge("totalMemory",
+                "The total amount of memory currently available for current and future objects, measured in bytes.",
+                "bytes"),
+            f.createLongGauge("maxMemory",
+                "The maximum amount of memory that the VM will attempt to use, measured in bytes.",
+                "bytes", true)});
-  
+
-    this.vmStats.setLong(maxMemoryId, rt.maxMemory()); 
-    
+    this.vmStats.setLong(maxMemoryId, rt.maxMemory());
+
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
