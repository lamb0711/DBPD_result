Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-          throw new IllegalArgumentException(LocalizedStrings.TypeUtils_UNKNOWN_OPERATOR_0
-              .toLocalizedString(Integer.valueOf(comparator)));
+          throw new IllegalArgumentException(String.format("Unknown operator: %s",
+              Integer.valueOf(comparator)));
-        /*
-         * @todo check for NaN, in which case we should not call compareTo Must also handle this in
-         * the index lookup code to be consistent See bug 37716 NumericComparator cmprtr =
-         * getNumericComparator(); boolean b; if (obj1.equals(Float.NaN) || obj1.equals(Double.NaN))
-         * { return new Boolean(cmprtr.compareWithNaN(obj2)); } else if (obj2.equals(Float.NaN) ||
-         * obj2.equals(Float.NaN)) { return new Boolean(cmprtr.compareWithNaN(obj1)); }
-         */
-            LocalizedStrings.TypeUtils_UNABLE_TO_USE_A_RELATIONAL_COMPARISON_OPERATOR_TO_COMPARE_AN_INSTANCE_OF_CLASS_0_WITH_AN_INSTANCE_OF_1
-                .toLocalizedString(new Object[] {object1Class.getName(), object2Class.getName()}));
+            String.format(
+                "Unable to use a relational comparison operator to compare an instance of class ' %s ' with an instance of ' %s '",
+                new Object[] {object1Class.getName(), object2Class.getName()}));
-      throw new InternalGemFireError(LocalizedStrings.TypeUtils_EXPECTED_INSTANCE_OF_0_BUT_WAS_1
-          .toLocalizedString(new Object[] {castClass.getName(), castTarget.getClass().getName()}));
+      throw new InternalGemFireError(String.format("expected instance of %s but was %s",
+          new Object[] {castClass.getName(), castTarget.getClass().getName()}));
-    throw new TypeMismatchException(LocalizedStrings.TypeUtils_INDEXES_ARE_NOT_SUPPORTED_FOR_TYPE_0
-        .toLocalizedString(obj.getClass().getName()));
+    throw new TypeMismatchException(String.format("Indexes are not supported for type ' %s '",
+        obj.getClass().getName()));
-          LocalizedStrings.TypeUtils_BOOLEANS_CAN_ONLY_BE_COMPARED_WITH_BOOLEANS
-              .toLocalizedString());
+          "Booleans can only be compared with booleans");
-          LocalizedStrings.TypeUtils_BOOLEAN_VALUES_CAN_ONLY_BE_COMPARED_WITH_OR
-              .toLocalizedString());
+          "Boolean values can only be compared with = or <>");
-            LocalizedStrings.TypeUtils_UNABLE_TO_COMPARE_OBJECT_OF_TYPE_0_WITH_OBJECT_OF_TYPE_1
-                .toLocalizedString(
-                    new Object[] {obj1.getClass().getName(), obj2.getClass().getName()}),
+            String.format("Unable to compare object of type ' %s ' with object of type ' %s '",
+
+                new Object[] {obj1.getClass().getName(), obj2.getClass().getName()}),
