Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Constructor to configure RMI Registry to start using default RMI Registry 
-   * port: {@link Registry#REGISTRY_PORT}
+   * Constructor to configure RMI Registry to start using default RMI Registry port:
+   * {@link Registry#REGISTRY_PORT}
-   * Constructor to configure RMI Registry to start using given RMI Registry
-   * port.
+   * Constructor to configure RMI Registry to start using given RMI Registry port.
-   * @param port
-   *          to run RMI Registry on
+   * @param port to run RMI Registry on
-   * Constructor to configure RMI Registry to start using given RMI Registry
-   * port & host bind address.
+   * Constructor to configure RMI Registry to start using given RMI Registry port & host bind
+   * address.
-   * @param host
-   *          to bind RMI Registry to
-   * @param port
-   *          to run RMI Registry on
+   * @param host to bind RMI Registry to
+   * @param port to run RMI Registry on
-   * @throws UnknownHostException
-   *           if IP Address can not be resolved for the given host string while
-   *           creating the RMIServerSocketFactory
+   * @throws UnknownHostException if IP Address can not be resolved for the given host string while
+   *         creating the RMIServerSocketFactory
-  
+
-   * @param host
-   *          the host on which rmiregistry listens for incoming connections
+   * @param host the host on which rmiregistry listens for incoming connections
-    if (isRunning()) { 
+    if (isRunning()) {
-  
+
-   * @param port
-   *          the port on which rmiregistry listens for incoming connections
+   * @param port the port on which rmiregistry listens for incoming connections
-    if (isRunning()) { 
+    if (isRunning()) {
-        registry = LocateRegistry.createRegistry(port, 
-                                                 null, //RMIClientSocketFactory 
-                                                 ssf); //RMIServerSocketFactory
+        registry = LocateRegistry.createRegistry(port, null, // RMIClientSocketFactory
+            ssf); // RMIServerSocketFactory
-      
+
+
-   * Constructs a RMIServerSocketFactory. The given rmiBindAddress is used to
-   * bind the ServerSockets created from this factory.
+   * Constructs a RMIServerSocketFactory. The given rmiBindAddress is used to bind the ServerSockets
+   * created from this factory.
-   * @param rmiBindAddress
-   *          String representation of the address to bind the ServerSockets to
+   * @param rmiBindAddress String representation of the address to bind the ServerSockets to
-   * @throws UnknownHostException
-   *           if IP Address can not be resolved for the given host string
+   * @throws UnknownHostException if IP Address can not be resolved for the given host string
-  /*default */RMIServerSocketFactoryImpl(String rmiBindAddress) 
-    throws UnknownHostException {
+  /* default */ RMIServerSocketFactoryImpl(String rmiBindAddress) throws UnknownHostException {
-   * Create a server socket on the specified port (port 0 indicates an anonymous
-   * port).
+   * Create a server socket on the specified port (port 0 indicates an anonymous port).
-   * @param port
-   *          the port number
+   * @param port the port number
-   * @exception IOException
-   *              if an I/O error occurs during server socket creation
+   * @exception IOException if an I/O error occurs during server socket creation
-    return new ServerSocket(port, 
-                            0/*backlog - for '0' internally uses the default*/, 
-                            bindAddress);
+    return new ServerSocket(port, 0/* backlog - for '0' internally uses the default */,
+        bindAddress);
