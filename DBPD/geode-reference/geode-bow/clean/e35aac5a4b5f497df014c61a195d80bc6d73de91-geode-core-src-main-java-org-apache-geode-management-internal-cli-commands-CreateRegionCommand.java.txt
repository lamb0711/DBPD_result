Merge branch 'release/1.5.0'

+import java.util.Collections;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.geode.cache.CacheListener;
+import org.apache.geode.cache.CacheLoader;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.CustomExpiry;
+import org.apache.geode.cache.ExpirationAction;
+import org.apache.geode.management.internal.cli.domain.ClassName;
+import org.apache.geode.management.internal.cli.exceptions.EntityExistsException;
+import org.apache.geode.management.internal.cli.functions.RegionAttributesWrapper;
-
-      @CliOption(key = CliStrings.CREATE_REGION__SKIPIFEXISTS, specifiedDefaultValue = "true",
-          unspecifiedDefaultValue = "false",
-          help = CliStrings.CREATE_REGION__SKIPIFEXISTS__HELP) boolean skipIfExists,
+      @CliOption(key = {CliStrings.IFNOTEXISTS, CliStrings.CREATE_REGION__SKIPIFEXISTS},
+          specifiedDefaultValue = "true", unspecifiedDefaultValue = "false",
+          help = CliStrings.CREATE_REGION__IFNOTEXISTS__HELP) boolean ifNotExists,
-          help = CliStrings.CREATE_REGION__CACHELISTENER__HELP) String[] cacheListener,
+          // split the input only with "," outside of json string
+          optionContext = "splittingRegex=,(?![^{]*\\})",
+          help = CliStrings.CREATE_REGION__CACHELISTENER__HELP) ClassName<CacheListener>[] cacheListener,
-          help = CliStrings.CREATE_REGION__CACHELOADER__HELP) String cacheLoader,
+          help = CliStrings.CREATE_REGION__CACHELOADER__HELP) ClassName<CacheLoader> cacheLoader,
-          help = CliStrings.CREATE_REGION__CACHEWRITER__HELP) String cacheWriter,
+          help = CliStrings.CREATE_REGION__CACHEWRITER__HELP) ClassName<CacheWriter> cacheWriter,
-          help = CliStrings.CREATE_REGION__ENTRYEXPIRATIONIDLETIMEACTION__HELP) String entryExpirationIdleTimeAction,
+          help = CliStrings.CREATE_REGION__ENTRYEXPIRATIONIDLETIMEACTION__HELP) ExpirationAction entryExpirationIdleTimeAction,
-          help = CliStrings.CREATE_REGION__ENTRYEXPIRATIONTTLACTION__HELP) String entryExpirationTTLAction,
+          help = CliStrings.CREATE_REGION__ENTRYEXPIRATIONTTLACTION__HELP) ExpirationAction entryExpirationTTLAction,
+      @CliOption(key = CliStrings.ENTRY_IDLE_TIME_CUSTOM_EXPIRY,
+          help = CliStrings.ENTRY_IDLE_TIME_CUSTOM_EXPIRY_HELP) ClassName<CustomExpiry> entryIdleTimeCustomExpiry,
+      @CliOption(key = CliStrings.ENTRY_TTL_CUSTOM_EXPIRY,
+          help = CliStrings.ENTRY_TTL_CUSTOM_EXPIRY_HELP) ClassName<CustomExpiry> entryTTLCustomExpiry,
-          help = CliStrings.CREATE_REGION__REGIONEXPIRATIONIDLETIMEACTION__HELP) String regionExpirationIdleTimeAction,
+          help = CliStrings.CREATE_REGION__REGIONEXPIRATIONIDLETIMEACTION__HELP) ExpirationAction regionExpirationIdleTimeAction,
-          help = CliStrings.CREATE_REGION__REGIONEXPIRATIONTTLACTION__HELP) String regionExpirationTTLAction,
+          help = CliStrings.CREATE_REGION__REGIONEXPIRATIONTTLACTION__HELP) ExpirationAction regionExpirationTTLAction,
-    // validating the region path
+    /*
+     * Adding name collision check for regions created with regionShortcut only.
+     * Regions can be categories as Proxy(replicate/partition), replicate/partition, and local
+     * For concise purpose: we call existing region (E) and region to be created (C)
+     */
+    DistributedRegionMXBean regionBean =
+        getManagementService().getDistributedRegionMXBean(regionPath);
+
+    if (regionBean != null && regionShortcut != null) {
+      String existingDataPolicy = regionBean.getRegionType();
+      // either C is local, or E is local or E and C are both non-proxy regions. this is to make
+      // sure local, replicate or partition regions have unique names across the entire cluster
+      if (regionShortcut.isLocal() || existingDataPolicy.equals("NORMAL")
+          || !regionShortcut.isProxy()
+              && (regionBean.getMemberCount() > regionBean.getEmptyNodes())) {
+        throw new EntityExistsException(
+            String.format("Region %s already exists on the cluster.", regionPath), ifNotExists);
+      }
+
+      // after this, one of E and C is proxy region or both are proxy regions.
+
+      // we first make sure E and C have the compatible data policy
+      if (regionShortcut.isPartition() && !existingDataPolicy.contains("PARTITION")) {
+        throw new EntityExistsException("The existing region is not a partitioned region",
+            ifNotExists);
+      }
+      if (regionShortcut.isReplicate()
+          && !(existingDataPolicy.equals("EMPTY") || existingDataPolicy.contains("REPLICATE")
+              || existingDataPolicy.contains("PRELOADED"))) {
+        throw new EntityExistsException("The existing region is not a replicate region",
+            ifNotExists);
+      }
+      // then we make sure E and C are on different members
+      Set<String> membersWithThisRegion =
+          Arrays.stream(regionBean.getMembers()).collect(Collectors.toSet());
+      Set<String> membersWithinGroup = findMembers(groups, null).stream()
+          .map(DistributedMember::getName).collect(Collectors.toSet());
+      if (!Collections.disjoint(membersWithinGroup, membersWithThisRegion)) {
+        throw new EntityExistsException(
+            String.format("Region %s already exists on these members: %s.", regionPath,
+                StringUtils.join(membersWithThisRegion, ",")),
+            ifNotExists);
+      }
+    }
+
+    // validating the parent region
-    functionArgs.setSkipIfExists(skipIfExists);
-    functionArgs.setKeyConstraint(keyConstraint);
-    functionArgs.setValueConstraint(valueConstraint);
+    functionArgs.setIfNotExists(ifNotExists);
+    functionArgs.setEntryIdleTimeCustomExpiry(entryIdleTimeCustomExpiry);
+    functionArgs.setEntryTTLCustomExpiry(entryTTLCustomExpiry);
-    } else if (templateRegion != null) {
+    } else { // templateRegion != null
-      regionAttributes = getRegionAttributes(cache, templateRegion);
+      RegionAttributesWrapper<?, ?> wrappedAttributes = getRegionAttributes(cache, templateRegion);
-      if (regionAttributes == null) {
+      if (wrappedAttributes == null) {
-      if (regionAttributes.getPartitionAttributes() == null
+      if (wrappedAttributes.getRegionAttributes().getPartitionAttributes() == null
-      functionArgs.setRegionAttributes(regionAttributes);
+
+      // These attributes will have the actual callback fields (if previously present) nulled out.
+      functionArgs.setRegionAttributes(wrappedAttributes.getRegionAttributes());
+
+      functionArgs
+          .setCacheListeners(wrappedAttributes.getCacheListenerClasses().toArray(new ClassName[0]));
+      functionArgs.setCacheWriter(wrappedAttributes.getCacheWriterClass());
+      functionArgs.setCacheLoader(wrappedAttributes.getCacheLoaderClass());
+      functionArgs.setCompressor(wrappedAttributes.getCompressorClass());
+      functionArgs.setKeyConstraint(wrappedAttributes.getKeyConstraintClass());
+      functionArgs.setValueConstraint(wrappedAttributes.getValueConstraintClass());
-    functionArgs.setCacheListeners(cacheListener);
-    functionArgs.setCacheLoader(cacheLoader);
-    functionArgs.setCacheWriter(cacheWriter);
-    functionArgs.setCompressor(compressor);
+    if (cacheListener != null) {
+      functionArgs.setCacheListeners(cacheListener);
+    }
+
+    if (cacheLoader != null) {
+      functionArgs.setCacheLoader(cacheLoader);
+    }
+
+    if (cacheWriter != null) {
+      functionArgs.setCacheWriter(cacheWriter);
+    }
+
+    if (compressor != null) {
+      functionArgs.setCompressor(compressor);
+    }
+
+    if (keyConstraint != null) {
+      functionArgs.setKeyConstraint(keyConstraint);
+    }
+
+    if (valueConstraint != null) {
+      functionArgs.setValueConstraint(valueConstraint);
+    }
-    if (isPersistentShortcut(functionArgs.getRegionShortcut())
+    if ((functionArgs.getRegionShortcut() != null
+        && functionArgs.getRegionShortcut().isPersistent())
-  RegionAttributes getRegionAttributes(InternalCache cache, String regionPath) {
+  RegionAttributesWrapper getRegionAttributes(InternalCache cache, String regionPath) {
-    RegionAttributes attributes = null;
+    RegionAttributesWrapper attributes = null;
-              LogWrapper.getInstance().info(CliUtil.stackTraceAsString((th)));
+              LogWrapper.getInstance(getCache()).info(ExceptionUtils.getStackTrace((th)));
-              RegionAttributes regAttr = ((RegionAttributes) object);
+              RegionAttributesWrapper regAttr = ((RegionAttributesWrapper) object);
-      if (CliUtil.contains(value, diskStoreName)) {
+      if (diskStoreName != null && ArrayUtils.contains(value, diskStoreName)) {
-  private boolean isPersistentShortcut(RegionShortcut shortcut) {
-    return shortcut == RegionShortcut.LOCAL_PERSISTENT
-        || shortcut == RegionShortcut.LOCAL_PERSISTENT_OVERFLOW
-        || shortcut == RegionShortcut.PARTITION_PERSISTENT
-        || shortcut == RegionShortcut.PARTITION_PERSISTENT_OVERFLOW
-        || shortcut == RegionShortcut.PARTITION_REDUNDANT_PERSISTENT
-        || shortcut == RegionShortcut.PARTITION_REDUNDANT_PERSISTENT_OVERFLOW
-        || shortcut == RegionShortcut.REPLICATE_PERSISTENT
-        || shortcut == RegionShortcut.REPLICATE_PERSISTENT_OVERFLOW;
-  }
-
-      if (keyConstraint != null && !RegionCommandsUtils.isClassNameValid(keyConstraint)) {
+      if (keyConstraint != null && !ClassName.isClassNameValid(keyConstraint)) {
-      if (valueConstraint != null && !RegionCommandsUtils.isClassNameValid(valueConstraint)) {
+      if (valueConstraint != null && !ClassName.isClassNameValid(valueConstraint)) {
-      String cacheListenerList =
-          parseResult.getParamValueAsString(CliStrings.CREATE_REGION__CACHELISTENER);
-      if (cacheListenerList != null) {
-        String[] cacheListeners = cacheListenerList.split(",");
-        for (String cacheListener : cacheListeners) {
-          if (!RegionCommandsUtils.isClassNameValid(cacheListener)) {
-            return ResultBuilder.createUserErrorResult(CliStrings.format(
-                CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELISTENER_0_IS_INVALID,
-                new Object[] {cacheListener}));
-          }
-        }
-      }
-
-      String cacheLoader = parseResult.getParamValueAsString(CliStrings.CREATE_REGION__CACHELOADER);
-      if (cacheLoader != null && !RegionCommandsUtils.isClassNameValid(cacheLoader)) {
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELOADER_0_IS_INVALID,
-            new Object[] {cacheLoader}));
-      }
-
-      String cacheWriter = parseResult.getParamValueAsString(CliStrings.CREATE_REGION__CACHEWRITER);
-      if (cacheWriter != null && !RegionCommandsUtils.isClassNameValid(cacheWriter)) {
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHEWRITER_0_IS_INVALID,
-            new Object[] {cacheWriter}));
-      }
-
-      if (compressor != null && !RegionCommandsUtils.isClassNameValid(compressor)) {
+      if (compressor != null && !ClassName.isClassNameValid(compressor)) {
-      String statisticsEnabled =
-          parseResult.getParamValueAsString(CliStrings.CREATE_REGION__STATISTICSENABLED);
-      if (!Boolean.parseBoolean(statisticsEnabled)) {
-        String entryIdle =
-            parseResult.getParamValueAsString(CliStrings.CREATE_REGION__ENTRYEXPIRATIONIDLETIME);
-        String entryTtl =
-            parseResult.getParamValueAsString(CliStrings.CREATE_REGION__ENTRYEXPIRATIONTIMETOLIVE);
-        String regionIdle =
-            parseResult.getParamValueAsString(CliStrings.CREATE_REGION__REGIONEXPIRATIONIDLETIME);
-        String regionTtl =
-            parseResult.getParamValueAsString(CliStrings.CREATE_REGION__REGIONEXPIRATIONTTL);
-        if (entryIdle != null || entryTtl != null || regionIdle != null || regionTtl != null) {
-          String message =
-              LocalizedStrings.AttributesFactory_STATISTICS_MUST_BE_ENABLED_FOR_EXPIRATION
-                  .toLocalizedString();
-          return ResultBuilder.createUserErrorResult(message + ".");
-        }
+      // if any expiration value is set, statistics must be enabled
+      Boolean statisticsEnabled =
+          (Boolean) parseResult.getParamValue(CliStrings.CREATE_REGION__STATISTICSENABLED);
+      Integer entryIdle =
+          (Integer) parseResult.getParamValue(CliStrings.CREATE_REGION__ENTRYEXPIRATIONIDLETIME);
+      Integer entryTtl =
+          (Integer) parseResult.getParamValue(CliStrings.CREATE_REGION__ENTRYEXPIRATIONTIMETOLIVE);
+      Integer regionIdle =
+          (Integer) parseResult.getParamValue(CliStrings.CREATE_REGION__REGIONEXPIRATIONIDLETIME);
+      Integer regionTtl =
+          (Integer) parseResult.getParamValue(CliStrings.CREATE_REGION__REGIONEXPIRATIONTTL);
+      ExpirationAction entryIdleAction = (ExpirationAction) parseResult
+          .getParamValue(CliStrings.CREATE_REGION__ENTRYEXPIRATIONIDLETIMEACTION);
+      ExpirationAction entryTtlAction = (ExpirationAction) parseResult
+          .getParamValue(CliStrings.CREATE_REGION__ENTRYEXPIRATIONTTLACTION);
+      ExpirationAction regionIdleAction = (ExpirationAction) parseResult
+          .getParamValue(CliStrings.CREATE_REGION__REGIONEXPIRATIONIDLETIMEACTION);
+      ExpirationAction regionTtlAction = (ExpirationAction) parseResult
+          .getParamValue(CliStrings.CREATE_REGION__REGIONEXPIRATIONTTLACTION);
+      ClassName entryIdleExpiry =
+          (ClassName) parseResult.getParamValue(CliStrings.ENTRY_IDLE_TIME_CUSTOM_EXPIRY);
+      ClassName entryTTTLExpiry =
+          (ClassName) parseResult.getParamValue(CliStrings.ENTRY_TTL_CUSTOM_EXPIRY);
+
+      if ((entryIdle != null || entryTtl != null || regionIdle != null || regionTtl != null
+          || entryIdleAction != null || entryTtlAction != null || regionIdleAction != null
+          || regionTtlAction != null || entryIdleExpiry != null || entryTTTLExpiry != null)
+          && (statisticsEnabled == null || !statisticsEnabled)) {
+        String message =
+            LocalizedStrings.AttributesFactory_STATISTICS_MUST_BE_ENABLED_FOR_EXPIRATION
+                .toLocalizedString();
+        return ResultBuilder.createUserErrorResult(message + ".");
+
