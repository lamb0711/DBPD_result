GEODE-143: logging must not cause cached values to be deserialized

A more powerful StringUtils.forceToString now exists that will also
print out the elements of arrays. It used to just to a toString on the
array which only shows the array identity. The new code will (by default)
show the first 16 element values and after that say how many more the array
had that are not shown. If you set the sys prop StringUtils.MAX_ARRAY_ELEMENTS_TO_CONVERT
you can change the default of 16.

+import com.gemstone.gemfire.internal.cache.CachedDeserializable;
+import com.gemstone.gemfire.internal.cache.Token;
+
+  private static final int MAX_ARRAY_ELEMENTS_TO_CONVERT = Integer.getInteger("StringUtils.MAX_ARRAY_ELEMENTS_TO_CONVERT", 16);
+  
-      return o.toString();
+      return objectToString(o, true, MAX_ARRAY_ELEMENTS_TO_CONVERT);
+  
+  /**
+   * Convert an object to a string and return it.
+   * Handled CacheDeserializables without having them change the form they store.
+   * If deserialization is needed and fails then the string contains a message saying so instead of throwing an exception.
+   * @param o the object to convert to a string
+   * @param convertArrayContents if true then the contents of the array will be in the string; otherwise just the array identity
+   * @param maxArrayElements if convertArrayContents is true then this parameter limits how many array elements are converted to the string.
+   *                         After the last converted element "and NNN more" is used to indicate the number of elements not converted.
+   */
+  public static String objectToString(Object o, boolean convertArrayContents, int maxArrayElements) {
+    if (o == null || o == Token.NOT_AVAILABLE) {
+      return "null";
+    } else if (o instanceof CachedDeserializable) {
+      CachedDeserializable cd = (CachedDeserializable)o;
+      return cd.getStringForm();
+    } else if (convertArrayContents && o.getClass().isArray()) {
+      Class<?> eClass = o.getClass();
+      if (eClass == byte[].class) {
+        return arrayToString((byte[])o, maxArrayElements);
+      } else if (eClass == boolean[].class) {
+        return arrayToString((boolean[])o, maxArrayElements);
+      } else if (eClass == char[].class) {
+        return arrayToString((char[])o, maxArrayElements);
+      } else if (eClass == short[].class) {
+        return arrayToString((short[])o, maxArrayElements);
+      } else if (eClass == int[].class) {
+        return arrayToString((int[])o, maxArrayElements);
+      } else if (eClass == long[].class) {
+        return arrayToString((long[])o, maxArrayElements);
+      } else if (eClass == float[].class) {
+        return arrayToString((float[])o, maxArrayElements);
+      } else if (eClass == double[].class) {
+        return arrayToString((double[])o, maxArrayElements);
+      } else {
+        return arrayToString((Object[]) o, maxArrayElements);
+      }
+    } else {
+      return o.toString();
+    }
+  }
+  
+  private static String arrayToString(Object[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    Class componentType = a.getClass().getComponentType();
+    if (iMax == -1) {
+      return componentType.getSimpleName() + "[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append(componentType.getSimpleName());
+    b.append('[');
+    for (int i = 0; ; i++) {
+      b.append(String.valueOf(a[i]));
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+  private static String arrayToString(boolean[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "boolean[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("boolean[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+
+  private static String arrayToString(byte[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "byte[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("byte[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+
+  private static String arrayToString(char[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "char[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("char[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+
+  private static String arrayToString(short[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "short[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("short[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+
+  private static String arrayToString(int[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "int[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("int[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+
+  private static String arrayToString(long[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "long[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("long[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+
+  private static String arrayToString(float[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "float[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("float[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
+
+  private static String arrayToString(double[] a, int maxArrayElements) {
+    if (maxArrayElements < 0) {
+      maxArrayElements = 0;
+    }
+    if (a == null) {
+      return "null";
+    }
+    int iMax = a.length;
+    if (iMax > maxArrayElements) {
+      iMax = maxArrayElements;
+    }
+    iMax--;
+    if (iMax == -1) {
+      return "double[]";
+    }
+    StringBuilder b = new StringBuilder();
+    b.append("double[");
+    for (int i = 0; ; i++) {
+      b.append(a[i]);
+      if (i == iMax) {
+        int skipCount = a.length - maxArrayElements;
+        if (skipCount > 0) {
+          if (i > 0) {
+            b.append(", ");
+          }
+          b.append("and ");
+          b.append(skipCount);
+          b.append(" more");
+        }
+        return b.append(']').toString();
+      }
+      b.append(", ");
+    }
+  }
