GEODE-6588: Properly type Function execution related interfaces. (#3691)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Peter Tran <ptran@gmail.com>

* Extensions and implementations of Execution and ResultCollector and the 
classes and interfaces involved in the execution chain were lacking the
ability to apply Generic types.
* Typing issues starting from MemberConfigManager.java class were fixed.
* Trivial IDE warnings were fixed.
-public class DistributedRegionFunctionExecutor extends AbstractExecution {
+public class DistributedRegionFunctionExecutor<ArgumentT, ReturnT, AggregatorT>
+    extends AbstractExecution<ArgumentT, ReturnT, AggregatorT> {
-  private DistributedRegionFunctionExecutor(DistributedRegionFunctionExecutor drfe) {
-    super(drfe);
-    this.region = drfe.region;
-    if (drfe.filter != null) {
-      this.filter.clear();
-      this.filter.addAll(drfe.filter);
-    }
-    this.sender = drfe.sender;
-  }
-
-  public InternalExecution withBucketFilter(Set<Integer> bucketIDs) {
+  public InternalExecution<ArgumentT, ReturnT, AggregatorT> withBucketFilter(
+      Set<Integer> bucketIDs) {
-    final StringBuffer buf = new StringBuffer();
-    buf.append("[ DistributedRegionFunctionExecutor:");
-    buf.append("args=");
-    buf.append(this.args);
-    buf.append(";region=");
-    buf.append(this.region.getName());
-    buf.append("]");
-    return buf.toString();
+    return "[ DistributedRegionFunctionExecutor:"
+        + "args="
+        + this.args
+        + ";region="
+        + this.region.getName()
+        + "]";
