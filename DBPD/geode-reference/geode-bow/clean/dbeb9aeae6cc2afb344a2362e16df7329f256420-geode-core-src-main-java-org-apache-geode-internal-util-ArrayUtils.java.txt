Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Gets the element at index in the array in a bound-safe manner.  If index is not a valid index in the given array,
-   * then the default value is returned.
+   * Gets the element at index in the array in a bound-safe manner. If index is not a valid index in
+   * the given array, then the default value is returned.
+   * 
-   * @param defaultValue the default value of element type to return in the event that the array index is invalid.
+   * @param defaultValue the default value of element type to return in the event that the array
+   *        index is invalid.
-    }
-    catch (ArrayIndexOutOfBoundsException ignore) {
+    } catch (ArrayIndexOutOfBoundsException ignore) {
-   * Gets the first element from the given array or null if the array reference is null or the array length is 0.
+   * Gets the first element from the given array or null if the array reference is null or the array
+   * length is 0.
+   * 
-   * @return the first element from the array or null if either the array reference is null or the array length is 0.
+   * @return the first element from the array or null if either the array reference is null or the
+   *         array length is 0.
+   * 
-    return toString((Object[])array); 
+    return toString((Object[]) array);
-  
+
-   * Insert an element into an array.  The element is inserted at the
-   * given position, all elements afterwards are moved to the right.
+   * Insert an element into an array. The element is inserted at the given position, all elements
+   * afterwards are moved to the right.
-    Object[] newArray = (Object[]) java.lang.reflect.Array.newInstance(
-      originalArray.getClass().getComponentType(), originalArray.length + 1);
+    Object[] newArray = (Object[]) java.lang.reflect.Array
+        .newInstance(originalArray.getClass().getComponentType(), originalArray.length + 1);
-      System.arraycopy(originalArray, 0, newArray, 0, pos); // does not copy originalArray[pos], where we insert
+      System.arraycopy(originalArray, 0, newArray, 0, pos); // does not copy originalArray[pos],
+                                                            // where we insert
-   * Remove element from an array.  The element is removed at the
-   * specified position, and all remaining elements are moved to the left.
+   * Remove element from an array. The element is removed at the specified position, and all
+   * remaining elements are moved to the left.
-    Object[] newArray = (Object[])java.lang.reflect.Array.newInstance(
-      originalArray.getClass().getComponentType(), originalArray.length - 1);
+    Object[] newArray = (Object[]) java.lang.reflect.Array
+        .newInstance(originalArray.getClass().getComponentType(), originalArray.length - 1);
-      System.arraycopy(originalArray, 0, newArray, 0, pos); // originalArray[pos - 1] is last element copied
+      System.arraycopy(originalArray, 0, newArray, 0, pos); // originalArray[pos - 1] is last
+                                                            // element copied
-    // 2) A B C D E remove 2: "A B"  copied at beginning: "A B . ."
+    // 2) A B C D E remove 2: "A B" copied at beginning: "A B . ."
-    return obj != null ? obj.getClass().getSimpleName() + '@'
-        + Integer.toHexString(System.identityHashCode(obj)) : "(null)";
+    return obj != null
+        ? obj.getClass().getSimpleName() + '@' + Integer.toHexString(System.identityHashCode(obj))
+        : "(null)";
-    }
-    else {
+    } else {
-      for (Object o : (Object[])obj) {
+      for (Object o : (Object[]) obj) {
-        }
-        else {
+        } else {
-    }
-    else {
+    } else {
-   * Get proper string for an an object including arrays with upto one dimension
-   * of arrays.
+   * Get proper string for an an object including arrays with upto one dimension of arrays.
-  }  
-  
+  }
+
-   * Get proper string for an an object including arrays with upto one dimension
-   * of arrays.
+   * Get proper string for an an object including arrays with upto one dimension of arrays.
-      for (Object o : (Object[])obj) {
+      for (Object o : (Object[]) obj) {
-        }
-        else {
+        } else {
-    }
-    else {
+    } else {
-      final byte[] bytes = (byte[])obj;
+      final byte[] bytes = (byte[]) obj;
-        }
-        else {
+        } else {
-    }
-    else {
+    } else {
-   * Check if two objects, possibly null, are equal. Doesn't really belong to
-   * this class...
+   * Check if two objects, possibly null, are equal. Doesn't really belong to this class...
+   * 
-  
+
-   * Converts a double byte array into a double Byte array. 
+   * Converts a double byte array into a double Byte array.
-   * Converts a double Byte array into a double byte array. 
+   * Converts a double Byte array into a double byte array.
