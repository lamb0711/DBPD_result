GEODE-3643 Add function execution on specific member

Refactored the Function operation handlers and added an OnGroups version
of function execution.

This closes #1426

-import org.apache.geode.cache.execute.Function;
-import org.apache.geode.cache.execute.FunctionException;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.protocol.operations.ProtobufOperationHandler;
-import org.apache.geode.internal.protocol.protobuf.v1.FunctionAPI;
+import org.apache.geode.internal.protocol.protobuf.v1.FunctionAPI.ExecuteFunctionOnRegionRequest;
+import org.apache.geode.internal.protocol.protobuf.v1.FunctionAPI.ExecuteFunctionOnRegionResponse;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.security.NotAuthorizedException;
-public class ExecuteFunctionOnRegionRequestOperationHandler implements
-    ProtobufOperationHandler<FunctionAPI.ExecuteFunctionOnRegionRequest, FunctionAPI.ExecuteFunctionOnRegionResponse> {
-  @Override
-  public Result<FunctionAPI.ExecuteFunctionOnRegionResponse, ClientProtocol.ErrorResponse> process(
-      ProtobufSerializationService serializationService,
-      FunctionAPI.ExecuteFunctionOnRegionRequest request,
-      MessageExecutionContext messageExecutionContext) throws InvalidExecutionContextException {
+public class ExecuteFunctionOnRegionRequestOperationHandler extends
+    AbstractFunctionRequestOperationHandler<ExecuteFunctionOnRegionRequest, ExecuteFunctionOnRegionResponse> {
-    final String functionID = request.getFunctionID();
-    final String regionName = request.getRegion();
-
-    final Function<?> function = FunctionService.getFunction(functionID);
-    if (function == null) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.INVALID_REQUEST)
-              .setMessage(LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
-                  .toLocalizedString(functionID))
-              .build())
-          .build());
-    }
-
-    final Region<Object, Object> region = messageExecutionContext.getCache().getRegion(regionName);
-    if (region == null) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.INVALID_REQUEST)
-              .setMessage("Region \"" + regionName + "\" not found"))
-          .build());
-    }
-
-    final SecurityService securityService = messageExecutionContext.getCache().getSecurityService();
-
-    try {
-      // check security for function.
-      function.getRequiredPermissions(regionName).forEach(securityService::authorize);
-    } catch (NotAuthorizedException ex) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder()
-              .setMessage("Authorization failed for function \"" + functionID + "\"")
-              .setErrorCode(BasicTypes.ErrorCode.AUTHORIZATION_FAILED))
-          .build());
-    }
-
-    try {
-      Execution execution = FunctionService.onRegion(region);
-
-      final Object arguments = serializationService.decode(request.getArguments());
-
-      if (arguments != null) {
-        execution = execution.setArguments(arguments);
-      }
-
-      execution = execution.withFilter(parseFilter(serializationService, request));
-
-      final ResultCollector<Object, List<Object>> resultCollector = execution.execute(functionID);
-
-      if (function.hasResult()) {
-        List<Object> results = resultCollector.getResult();
-
-        final FunctionAPI.ExecuteFunctionOnRegionResponse.Builder responseMessage =
-            FunctionAPI.ExecuteFunctionOnRegionResponse.newBuilder();
-        for (Object result : results) {
-          responseMessage.addResults(serializationService.encode(result));
-        }
-        return Success.of(responseMessage.build());
-      } else {
-        // This is fire and forget.
-        return Success.of(FunctionAPI.ExecuteFunctionOnRegionResponse.newBuilder().build());
-      }
-    } catch (FunctionException ex) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.SERVER_ERROR)
-              .setMessage("Function execution failed: " + ex.toString()))
-          .build());
-    } catch (EncodingException ex) {
-      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
-          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.SERVER_ERROR)
-              .setMessage("Encoding failed: " + ex.toString()))
-          .build());
-    }
-  }
-
-  private Set<Object> parseFilter(ProtobufSerializationService serializationService,
-      FunctionAPI.ExecuteFunctionOnRegionRequest request) throws EncodingException {
+  protected Set<Object> parseFilter(ProtobufSerializationService serializationService,
+      ExecuteFunctionOnRegionRequest request) throws EncodingException {
+
+  @Override
+  protected String getFunctionID(ExecuteFunctionOnRegionRequest request) {
+    return request.getFunctionID();
+  }
+
+  @Override
+  protected String getRegionName(ExecuteFunctionOnRegionRequest request) {
+    return request.getRegion();
+  }
+
+  @Override
+  protected Object getExecutionTarget(ExecuteFunctionOnRegionRequest request, String regionName,
+      MessageExecutionContext executionContext) throws InvalidExecutionContextException {
+    final Region<Object, Object> region = executionContext.getCache().getRegion(regionName);
+    if (region == null) {
+      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
+          .setError(BasicTypes.Error.newBuilder().setErrorCode(BasicTypes.ErrorCode.INVALID_REQUEST)
+              .setMessage("Region \"" + regionName + "\" not found"))
+          .build());
+    }
+    return region;
+  }
+
+  @Override
+  protected Object getFunctionArguments(ExecuteFunctionOnRegionRequest request,
+      ProtobufSerializationService serializationService) throws EncodingException {
+    return serializationService.decode(request.getArguments());
+  }
+
+  @Override
+  protected Execution getFunctionExecutionObject(Object executionTarget) {
+    return FunctionService.onRegion((Region) executionTarget);
+  }
+
+  @Override
+  protected Result buildResultMessage(ProtobufSerializationService serializationService,
+      List<Object> results) throws EncodingException {
+    final ExecuteFunctionOnRegionResponse.Builder responseMessage =
+        ExecuteFunctionOnRegionResponse.newBuilder();
+    for (Object result : results) {
+      responseMessage.addResults(serializationService.encode(result));
+    }
+    return Success.of(responseMessage.build());
+  }
+
+  @Override
+  protected Result buildResultMessage(ProtobufSerializationService serializationService)
+      throws EncodingException {
+    return Success.of(ExecuteFunctionOnRegionResponse.newBuilder().build());
+  }
+
