Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-    JmxManagerProfile p = new JmxManagerProfile(getDistributionManager().getId(), incrementAndGetVersion());
+    JmxManagerProfile p =
+        new JmxManagerProfile(getDistributionManager().getId(), incrementAndGetVersion());
-    ((JmxManagerAdvisee)advisee).initProfile(p);
+    ((JmxManagerAdvisee) advisee).initProfile(p);
-  
+
-  
+
-      JmxManagerProfile p = new JmxManagerProfile(getDistributionManager().getId(), incrementAndGetVersion());
+      JmxManagerProfile p =
+          new JmxManagerProfile(getDistributionManager().getId(), incrementAndGetVersion());
+
-  protected Profile instantiateProfile(InternalDistributedMember memberId,
-      int version) {
+  protected Profile instantiateProfile(InternalDistributedMember memberId, int version) {
-   * Overridden to also include our profile.
-   * If our profile is included it will always be first.
+   * Overridden to also include our profile. If our profile is included it will always be first.
-  protected List/*<Profile>*/ fetchProfiles(Filter f) {
+  protected List/* <Profile> */ fetchProfiles(Filter f) {
+
-  public static class JmxManagerProfileMessage extends
-      HighPriorityDistributionMessage {
+  public static class JmxManagerProfileMessage extends HighPriorityDistributionMessage {
-    
+
+     * 
-    /* (non-Javadoc)
-     * @see org.apache.geode.distributed.internal.DistributionMessage#process(org.apache.geode.distributed.internal.DistributionManager)
+    /*
+     * (non-Javadoc)
+     * 
+     * @see org.apache.geode.distributed.internal.DistributionMessage#process(org.apache.geode.
+     * distributed.internal.DistributionManager)
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-          logger.info(LocalizedMessage.create(LocalizedStrings.ResourceAdvisor_MEMBER_CAUGHT_EXCEPTION_PROCESSING_PROFILE,
+          logger.info(LocalizedMessage.create(
+              LocalizedStrings.ResourceAdvisor_MEMBER_CAUGHT_EXCEPTION_PROCESSING_PROFILE,
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.profile = (JmxManagerProfile)DataSerializer.readObject(in);
+      this.profile = (JmxManagerProfile) DataSerializer.readObject(in);
+     * 
-      sb.append(getShortClassName())
-      .append(" (processorId=").append(this.processorId)
-      .append("; profile=").append(this.profile);
+      sb.append(getShortClassName()).append(" (processorId=").append(this.processorId)
+          .append("; profile=").append(this.profile);
-    
+
-    
+
-    public void setInfo(boolean jmxManager2, String host2, int port2, boolean ssl2, boolean started2) {
+    public void setInfo(boolean jmxManager2, String host2, int port2, boolean ssl2,
+        boolean started2) {
-    
+
-    
+
-    
+
-    public JmxManagerProfile(InternalDistributedMember memberId,
-        int version) {
+    public JmxManagerProfile(InternalDistributedMember memberId, int version) {
-    
+
-        sb.append("; host=").append(this.host)
-        .append("; port=").append(this.port);
+        sb.append("; host=").append(this.host).append("; port=").append(this.port);
-    
+
-    public void processIncoming(DistributionManager dm, String adviseePath,
-        boolean removeProfile, boolean exchangeProfiles,
-        final List<Profile> replyProfiles) {
+    public void processIncoming(DistributionManager dm, String adviseePath, boolean removeProfile,
+        boolean exchangeProfiles, final List<Profile> replyProfiles) {
-      synchronized(this) {
+      synchronized (this) {
-    
+
-      return JMX_MANAGER_PROFILE; 
+      return JMX_MANAGER_PROFILE;
