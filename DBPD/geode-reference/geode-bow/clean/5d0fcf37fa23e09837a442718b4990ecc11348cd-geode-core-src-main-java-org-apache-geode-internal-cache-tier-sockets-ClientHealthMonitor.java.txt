GEODE-6649: Remove lock contention in ClientHealthMonitor heartbeats.

Profiling showed strong contention on the _clientHeartbeatsLock lock
object. Simply replacing with ConcurrentHashMap improved contention but
constant updates to the heatbeat timestamp in the map meant creating new
Long object for each timestamp and locking the map segment when
updating. Storing timestamp as AtomicLong allows us to update by doing
lock-free get on map and update the AtomicLong value. New solution is
lock-free and garbage-free after initial insert.

* Replace with HashMap with ConcurrentHashMap.
* Store timestamp as AtomicLong to avoid segment lock when updating.

+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.stream.Collectors;
-   * The map of known clients
-   *
-   * Accesses must be locked by _clientHeartbeatsLock
+   * The map of known clients and last time seen.
-  private Map<ClientProxyMembershipID, Long> _clientHeartbeats = Collections.emptyMap();
-
-  /**
-   * An object used to lock the map of known clients
-   */
-  private final Object _clientHeartbeatsLock = new Object();
+  private ConcurrentMap<ClientProxyMembershipID, AtomicLong> clientHeartbeats =
+      new ConcurrentHashMap<>();
-  private final InternalCache _cache;
+  private final InternalCache cache;
-  private final ClientHealthMonitorThread _clientMonitor;
+  private final ClientHealthMonitorThread clientMonitor;
-  static ClientHealthMonitor _instance;
+  private static ClientHealthMonitor instance;
-    return _instance;
+    return instance;
-    return _instance;
+    return instance;
-    if (_instance == null)
+    if (instance == null)
-    _instance.shutdown();
+    instance.shutdown();
-      if (_instance._clientMonitor != null) {
-        _instance._clientMonitor.join();
+      if (instance.clientMonitor != null) {
+        instance.clientMonitor.join();
-    _instance = null;
+    instance = null;
-    boolean registerClient = false;
-    synchronized (_clientHeartbeatsLock) {
-      Map<ClientProxyMembershipID, Long> oldClientHeartbeats = _clientHeartbeats;
-      if (!oldClientHeartbeats.containsKey(proxyID)) {
-        Map<ClientProxyMembershipID, Long> newClientHeartbeats = new HashMap<>(oldClientHeartbeats);
-        newClientHeartbeats.put(proxyID, System.currentTimeMillis());
-        _clientHeartbeats = newClientHeartbeats;
-        registerClient = true;
-      }
-    }
-
-    if (registerClient) {
-      if (stats != null) {
-        stats.incClientRegisterRequests();
-      }
-      if (logger.isDebugEnabled()) {
-        logger.debug("ClientHealthMonitor: Registering client with member id {}",
-            proxyID);
+    if (!clientHeartbeats.containsKey(proxyID)) {
+      if (null == clientHeartbeats.putIfAbsent(proxyID,
+          new AtomicLong(System.currentTimeMillis()))) {
+        // don't do this in computeIfAbsent because segment is locked while logging/stats
+        if (stats != null) {
+          stats.incClientRegisterRequests();
+        }
+        if (logger.isDebugEnabled()) {
+          logger.debug("ClientHealthMonitor: Registering client with member id {}", proxyID);
+        }
-    boolean unregisterClient = false;
-    synchronized (_clientHeartbeatsLock) {
-      Map<ClientProxyMembershipID, Long> oldClientHeartbeats = _clientHeartbeats;
-      if (oldClientHeartbeats.containsKey(proxyID)) {
-        unregisterClient = true;
-        Map<ClientProxyMembershipID, Long> newClientHeartbeats = new HashMap<>(oldClientHeartbeats);
-        newClientHeartbeats.remove(proxyID);
-        _clientHeartbeats = newClientHeartbeats;
-      }
-    }
-
-    if (unregisterClient) {
+    if (clientHeartbeats.remove(proxyID) != null) {
-          logger.debug("ClientHealthMonitor: Unregistering client with member id {}",
-              proxyID);
+          logger.debug("ClientHealthMonitor: Unregistering client with member id {}", proxyID);
-    final TXManagerImpl txMgr = (TXManagerImpl) _cache.getCacheTransactionManager();
+    final TXManagerImpl txMgr = (TXManagerImpl) cache.getCacheTransactionManager();
-    if (_cache.isClosed()) {
+    if (cache.isClosed()) {
-    final TXManagerImpl txMgr = (TXManagerImpl) _cache.getCacheTransactionManager();
+    final TXManagerImpl txMgr = (TXManagerImpl) cache.getCacheTransactionManager();
-    if (_clientMonitor == null) {
+    if (clientMonitor == null) {
+
-    synchronized (_clientHeartbeatsLock) {
-      if (!_clientHeartbeats.containsKey(proxyID)) {
-        registerClient(proxyID);
-      } else {
-        _clientHeartbeats.put(proxyID, System.currentTimeMillis());
-      }
+
+    AtomicLong heartbeat = clientHeartbeats.get(proxyID);
+    if (null == heartbeat) {
+      registerClient(proxyID);
+    } else {
+      heartbeat.set(System.currentTimeMillis());
-        ClientProxyMembershipID proxyID = entry.getKey();// proxyID
-        // includes FQDN
+        // proxyID includes FQDN
+        ClientProxyMembershipID proxyID = entry.getKey();
-          /// *
-          // */
-          Object[] data;
-          data = map.get(membershipID);
+          Object[] data = map.get(membershipID);
-              memberId = sc.getMembershipID(); // each ServerConnection has the same member id
+              // each ServerConnection has the same member id
+              memberId = sc.getMembershipID();
-        ClientProxyMembershipID proxyID = entry.getKey();// proxyID
-        // includes FQDN
+        // proxyID includes FQDN
+        ClientProxyMembershipID proxyID = entry.getKey();
-            memberId = sc.getMembershipID(); // each ServerConnection has the same member id
+            // each ServerConnection has the same member id
+            memberId = sc.getMembershipID();
-      if (serverConnections != null) { // fix for bug 35343
+      if (serverConnections != null) {
-    // release sync and operation on copy to fix bug 37675
+    // release sync and operation on copy
-    synchronized (_clientHeartbeatsLock) {
-      return new HashMap<>(_clientHeartbeats);
-    }
+    return clientHeartbeats.entrySet().stream()
+        .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().get()));
-    if (_clientMonitor != null) {
-      _clientMonitor.stopMonitoring();
+    if (clientMonitor != null) {
+      clientMonitor.stopMonitoring();
-    if (_instance != null) {
+    if (instance != null) {
-    _instance = new ClientHealthMonitor(cache, maximumTimeBetweenPings, stats);
+    instance = new ClientHealthMonitor(cache, maximumTimeBetweenPings, stats);
-    _cache = cache;
+    this.cache = cache;
-      _clientMonitor = new ClientHealthMonitorThread(maximumTimeBetweenPings);
-      _clientMonitor.start();
+      clientMonitor = new ClientHealthMonitorThread(maximumTimeBetweenPings);
+      clientMonitor.start();
-      _clientMonitor = null;
+      clientMonitor = null;
-    _clientMonitor.overrideHeartbeatTimeoutCheck(check);
+    clientMonitor.overrideHeartbeatTimeoutCheck(check);
