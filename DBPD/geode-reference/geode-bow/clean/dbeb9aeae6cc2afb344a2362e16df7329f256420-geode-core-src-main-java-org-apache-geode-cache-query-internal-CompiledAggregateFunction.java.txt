Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public CompiledAggregateFunction(CompiledValue expr, int aggFunc,
-      boolean distinctOnly) {
+  public CompiledAggregateFunction(CompiledValue expr, int aggFunc, boolean distinctOnly) {
-  public Object evaluate(ExecutionContext context)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
+  public Object evaluate(ExecutionContext context) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-    case OQLLexerTokenTypes.SUM:
-      if (isPRQueryNode) {
-        return this.distinctOnly ? new SumDistinctPRQueryNode() : new Sum();
-      } else {
-        return this.distinctOnly ? (isBucketNode ? new DistinctAggregator()
-            : new SumDistinct()) : new Sum();
-      }
+      case OQLLexerTokenTypes.SUM:
+        if (isPRQueryNode) {
+          return this.distinctOnly ? new SumDistinctPRQueryNode() : new Sum();
+        } else {
+          return this.distinctOnly ? (isBucketNode ? new DistinctAggregator() : new SumDistinct())
+              : new Sum();
+        }
-    case OQLLexerTokenTypes.MAX:
-      return new MaxMin(true);
+      case OQLLexerTokenTypes.MAX:
+        return new MaxMin(true);
-    case OQLLexerTokenTypes.MIN:
-      return new MaxMin(false);
+      case OQLLexerTokenTypes.MIN:
+        return new MaxMin(false);
-    case OQLLexerTokenTypes.AVG:
-      if (isPRQueryNode) {
-        return this.distinctOnly ? new AvgDistinctPRQueryNode()
-            : new AvgPRQueryNode();
-      } else {
-        return this.distinctOnly ? (isBucketNode ? new DistinctAggregator()
-            : new AvgDistinct()) : (isBucketNode ? new AvgBucketNode()
-            : new Avg());
-      }
+      case OQLLexerTokenTypes.AVG:
+        if (isPRQueryNode) {
+          return this.distinctOnly ? new AvgDistinctPRQueryNode() : new AvgPRQueryNode();
+        } else {
+          return this.distinctOnly ? (isBucketNode ? new DistinctAggregator() : new AvgDistinct())
+              : (isBucketNode ? new AvgBucketNode() : new Avg());
+        }
-    case OQLLexerTokenTypes.COUNT:
-      if (isPRQueryNode) {
-        return this.distinctOnly ? new CountDistinctPRQueryNode()
-            : new CountPRQueryNode();
-      } else {
-        return this.distinctOnly ? (isBucketNode ? new DistinctAggregator()
-            : new CountDistinct()) : new Count();
-      }
+      case OQLLexerTokenTypes.COUNT:
+        if (isPRQueryNode) {
+          return this.distinctOnly ? new CountDistinctPRQueryNode() : new CountPRQueryNode();
+        } else {
+          return this.distinctOnly ? (isBucketNode ? new DistinctAggregator() : new CountDistinct())
+              : new Count();
+        }
-    default:
-      throw new UnsupportedOperationException(
-          "Aggregate function not implemented");
+      default:
+        throw new UnsupportedOperationException("Aggregate function not implemented");
-    case OQLLexerTokenTypes.SUM:
-      return "sum";
+      case OQLLexerTokenTypes.SUM:
+        return "sum";
-    case OQLLexerTokenTypes.MAX:
-      return "max";
+      case OQLLexerTokenTypes.MAX:
+        return "max";
-    case OQLLexerTokenTypes.MIN:
-      return "min";
+      case OQLLexerTokenTypes.MIN:
+        return "min";
-    case OQLLexerTokenTypes.AVG:
-      return "avg";
-    case OQLLexerTokenTypes.COUNT:
-      return "count";
-    default:
-      throw new UnsupportedOperationException(
-          "Aggregate function not implemented");
+      case OQLLexerTokenTypes.AVG:
+        return "avg";
+      case OQLLexerTokenTypes.COUNT:
+        return "count";
+      default:
+        throw new UnsupportedOperationException("Aggregate function not implemented");
-    case OQLLexerTokenTypes.SUM:
-    case OQLLexerTokenTypes.MAX:
-    case OQLLexerTokenTypes.MIN:
-    case OQLLexerTokenTypes.AVG:
-      return new ObjectTypeImpl(Number.class);
+      case OQLLexerTokenTypes.SUM:
+      case OQLLexerTokenTypes.MAX:
+      case OQLLexerTokenTypes.MIN:
+      case OQLLexerTokenTypes.AVG:
+        return new ObjectTypeImpl(Number.class);
-    case OQLLexerTokenTypes.COUNT:
-      return new ObjectTypeImpl(Integer.class);
+      case OQLLexerTokenTypes.COUNT:
+        return new ObjectTypeImpl(Integer.class);
-    default:
-      throw new UnsupportedOperationException(
-          "Aggregate function not implemented");
+      default:
+        throw new UnsupportedOperationException("Aggregate function not implemented");
-  public void generateCanonicalizedExpression(StringBuffer clauseBuffer,
-      ExecutionContext context) throws AmbiguousNameException,
-      TypeMismatchException, NameResolutionException {
+  public void generateCanonicalizedExpression(StringBuffer clauseBuffer, ExecutionContext context)
+      throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
