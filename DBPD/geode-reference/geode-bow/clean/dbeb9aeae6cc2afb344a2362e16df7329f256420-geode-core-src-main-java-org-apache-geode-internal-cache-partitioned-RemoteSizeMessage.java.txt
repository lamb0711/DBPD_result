Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This message is used to determine the number of Entries in a Region, or its
- * size.
+ * This message is used to determine the number of Entries in a Region, or its size.
-public final class RemoteSizeMessage extends RemoteOperationMessage
-  {
+public final class RemoteSizeMessage extends RemoteOperationMessage {
-  
+
-  
+
-  
+
-   * The message sent to a set of {@link InternalDistributedMember}s to caculate the
-   * number of Entries in each of their buckets
+   * The message sent to a set of {@link InternalDistributedMember}s to caculate the number of
+   * Entries in each of their buckets
-   * @param recipients
-   *          members to receive the message
-   * @param regionPath
-   *          the path to the region
+   * @param recipients members to receive the message
+   * @param regionPath the path to the region
-   * @throws ClassNotFoundException 
-   * @throws IOException 
+   * @throws ClassNotFoundException
+   * @throws IOException
-   * Sends a PartitionedRegion message for {@link java.util.Map#size()}ignoring
-   * any errors on send
+   * Sends a PartitionedRegion message for {@link java.util.Map#size()}ignoring any errors on send
-   * @param recipients
-   *          the set of members that the size message is sent to
-   * @param r
-   *          the Region that contains the bucket
+   * @param recipients the set of members that the size message is sent to
+   * @param r the Region that contains the bucket
-  public static SizeResponse send(Set recipients, LocalRegion r)
-  {
+  public static SizeResponse send(Set recipients, LocalRegion r) {
-  
+
-   * sends a message to the given recipients asking for the size of either
-   * their primary bucket entries or the values sets of their primary
-   * buckets
+   * sends a message to the given recipients asking for the size of either their primary bucket
+   * entries or the values sets of their primary buckets
+   * 
-  public static SizeResponse send(Set recipients, LocalRegion r,
-      int queryType) {
+  public static SizeResponse send(Set recipients, LocalRegion r, int queryType) {
-    RemoteSizeMessage m = new RemoteSizeMessage(recipients, r.getFullPath(),
-        p, queryType);
+    RemoteSizeMessage m = new RemoteSizeMessage(recipients, r.getFullPath(), p, queryType);
-   * This message may be sent to nodes before the PartitionedRegion is
-   * completely initialized due to the RegionAdvisor(s) knowing about the
-   * existance of a partitioned region at a very early part of the
-   * initialization
+   * This message may be sent to nodes before the PartitionedRegion is completely initialized due to
+   * the RegionAdvisor(s) knowing about the existance of a partitioned region at a very early part
+   * of the initialization
-  protected boolean operateOnRegion(DistributionManager dm,
-      LocalRegion r,long startTime) throws RemoteOperationException {
-    
+  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+      throws RemoteOperationException {
+
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-    }
-    else {
+    } else {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-    out.writeByte((byte)queryType);
+    out.writeByte((byte) queryType);
-  public static final class SizeReplyMessage extends ReplyMessage
-   {
+  public static final class SizeReplyMessage extends ReplyMessage {
-    public SizeReplyMessage() {
-    }
+    public SizeReplyMessage() {}
-     * @throws IOException 
+     * @throws IOException
-    public static void send(InternalDistributedMember recipient, int processorId,
-        DM dm, int size)
-    {
-      Assert.assertTrue(recipient != null,
-          "SizeReplyMessage NULL reply message");
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm, int size) {
+      Assert.assertTrue(recipient != null, "SizeReplyMessage NULL reply message");
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, final ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, final ReplyProcessor21 processor) {
-        logger.trace(LogMarker.DM, "{}: process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM, "{}: process invoking reply processor with processorId: {}",
+            this.processorId);
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-  public int getDSFID() {
-    return R_SIZE_REPLY_MESSAGE;
-  }
+    public int getDSFID() {
+      return R_SIZE_REPLY_MESSAGE;
+    }
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public String toString()
-    {
+    public String toString() {
-      sb.append(this.getClass().getName()).append(" processorid=").append(
-          this.processorId).append(" reply to sender ")
-          .append(this.getSender()).append(" returning size=")
+      sb.append(this.getClass().getName()).append(" processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender()).append(" returning size=")
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.partitioned.GetMessage.GetReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.partitioned.GetMessage.GetReplyMessage}
-  public static class SizeResponse extends ReplyProcessor21
-   {
+  public static class SizeResponse extends ReplyProcessor21 {
-     * The SizeResponse processor ignores remote exceptions by implmenting this
-     * method. Ignoring remote exceptions is acceptable since the RemoteSizeMessage is
-     * sent to all Nodes and all {@link RemoteSizeMessage.SizeReplyMessage}s are processed for
-     * each individual bucket size. The hope is that any failure due to an
-     * exception will be covered by healthy Nodes.
+     * The SizeResponse processor ignores remote exceptions by implmenting this method. Ignoring
+     * remote exceptions is acceptable since the RemoteSizeMessage is sent to all Nodes and all
+     * {@link RemoteSizeMessage.SizeReplyMessage}s are processed for each individual bucket size.
+     * The hope is that any failure due to an exception will be covered by healthy Nodes.
-    protected void processException(ReplyException ex)
-    {
+    protected void processException(ReplyException ex) {
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-          SizeReplyMessage reply = (SizeReplyMessage)msg;
+          SizeReplyMessage reply = (SizeReplyMessage) msg;
-      }
-      finally {
+      } finally {
-    public int waitForSize()
-    {
+    public int waitForSize() {
-      }
-      catch (ReplyException e) {
+      } catch (ReplyException e) {
