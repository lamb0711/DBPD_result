Merge branch 'release/1.5.0'

+import org.apache.geode.connectors.jdbc.JdbcConnectorException;
-import org.apache.geode.pdx.internal.PdxInstanceImpl;
-  Connection getConnection(ConnectionConfiguration config) {
-    try {
-      return manager.getDataSource(config).getConnection();
-    } catch (SQLException e) {
-      throw new IllegalStateException("Could not connect to " + config.getUrl(), e);
-    }
+  Connection getConnection(ConnectionConfiguration config) throws SQLException {
+    return manager.getDataSource(config).getConnection();
-  public <K, V> PdxInstance read(Region<K, V> region, K key) {
+  public <K, V> PdxInstance read(Region<K, V> region, K key) throws SQLException {
-    PdxInstance result = null;
+    PdxInstance result;
-          getPreparedStatement(connection, columnList, tableName, Operation.GET, 0)) {
+          getPreparedStatement(connection, columnList, tableName, Operation.GET)) {
-    } catch (SQLException e) {
-      handleSQLException(e);
-  private PdxInstance executeReadStatement(PreparedStatement statement,
-      List<ColumnValue> columnList, PdxInstanceFactory factory, RegionMapping regionMapping,
-      String keyColumnName) {
+  PdxInstance executeReadStatement(PreparedStatement statement, List<ColumnValue> columnList,
+      PdxInstanceFactory factory, RegionMapping regionMapping, String keyColumnName)
+      throws SQLException {
-    try {
-      setValuesInStatement(statement, columnList);
-      try (ResultSet resultSet = statement.executeQuery()) {
-        if (resultSet.next()) {
-          ResultSetMetaData metaData = resultSet.getMetaData();
-          int ColumnsNumber = metaData.getColumnCount();
-          for (int i = 1; i <= ColumnsNumber; i++) {
-            Object columnValue = resultSet.getObject(i);
-            String columnName = metaData.getColumnName(i);
-            String fieldName = mapColumnNameToFieldName(columnName);
-            if (regionMapping.isPrimaryKeyInValue()
-                || !keyColumnName.equalsIgnoreCase(columnName)) {
-              factory.writeField(fieldName, columnValue, Object.class);
-            }
+    setValuesInStatement(statement, columnList);
+    try (ResultSet resultSet = statement.executeQuery()) {
+      if (resultSet.next()) {
+        ResultSetMetaData metaData = resultSet.getMetaData();
+        int ColumnsNumber = metaData.getColumnCount();
+        for (int i = 1; i <= ColumnsNumber; i++) {
+          Object columnValue = resultSet.getObject(i);
+          String columnName = metaData.getColumnName(i);
+          String fieldName = mapColumnNameToFieldName(columnName, regionMapping);
+          if (regionMapping.isPrimaryKeyInValue() || !keyColumnName.equalsIgnoreCase(columnName)) {
+            factory.writeField(fieldName, columnValue, Object.class);
-          if (resultSet.next()) {
-            throw new IllegalStateException(
-                "Multiple rows returned for query: " + resultSet.getStatement().toString());
-          }
-          pdxInstance = factory.create();
+        if (resultSet.next()) {
+          throw new JdbcConnectorException(
+              "Multiple rows returned for query: " + resultSet.getStatement().toString());
+        }
+        pdxInstance = factory.create();
-    } catch (SQLException e) {
-      handleSQLException(e);
-  private String mapColumnNameToFieldName(String columnName) {
-    return columnName.toLowerCase();
+  private String mapColumnNameToFieldName(String columnName, RegionMapping regionMapping) {
+    return regionMapping.getFieldNameForColumn(columnName);
-  public <K, V> void write(Region<K, V> region, Operation operation, K key, PdxInstance value) {
+  public <K, V> void write(Region<K, V> region, Operation operation, K key, PdxInstance value)
+      throws SQLException {
-    int pdxTypeId = value == null ? 0 : ((PdxInstanceImpl) value).getPdxType().getTypeId();
-          getPreparedStatement(connection, columnList, tableName, operation, pdxTypeId)) {
-        updateCount = executeWriteStatement(statement, columnList, operation, false);
+          getPreparedStatement(connection, columnList, tableName, operation)) {
+        updateCount = executeWriteStatement(statement, columnList);
+      } catch (SQLException e) {
+        if (operation.isDestroy()) {
+          throw e;
+        }
-            getPreparedStatement(connection, columnList, tableName, upsertOp, pdxTypeId)) {
-          updateCount = executeWriteStatement(upsertStatement, columnList, upsertOp, true);
+            getPreparedStatement(connection, columnList, tableName, upsertOp)) {
+          updateCount = executeWriteStatement(upsertStatement, columnList);
-    } catch (SQLException e) {
-      handleSQLException(e);
-  private int executeWriteStatement(PreparedStatement statement, List<ColumnValue> columnList,
-      Operation operation, boolean handleException) {
-    int updateCount = 0;
-    try {
-      setValuesInStatement(statement, columnList);
-      updateCount = statement.executeUpdate();
-    } catch (SQLException e) {
-      if (handleException || operation.isDestroy()) {
-        handleSQLException(e);
-      }
-    }
-    return updateCount;
+  private int executeWriteStatement(PreparedStatement statement, List<ColumnValue> columnList)
+      throws SQLException {
+    setValuesInStatement(statement, columnList);
+    return statement.executeUpdate();
-      List<ColumnValue> columnList, String tableName, Operation operation, int pdxTypeId) {
+      List<ColumnValue> columnList, String tableName, Operation operation) throws SQLException {
-    PreparedStatement statement = null;
-    try {
-      statement = connection.prepareStatement(sqlStr);
-    } catch (SQLException e) {
-      handleSQLException(e);
-    }
-    return statement;
+    return connection.prepareStatement(sqlStr);
-
-  static void handleSQLException(SQLException e) {
-    throw new IllegalStateException("JDBC connector detected unexpected SQLException", e);
-  }
