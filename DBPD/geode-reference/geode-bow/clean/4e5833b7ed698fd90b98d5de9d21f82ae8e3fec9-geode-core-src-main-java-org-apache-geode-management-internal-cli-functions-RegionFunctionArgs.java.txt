GEODE-1897: Add eviction option to create region (#969)

* GEODE-1897: Add eviction option to create region

* GEODE-1897: Add object sizer capability to region creation

+import org.apache.geode.cache.EvictionAction;
+import org.apache.geode.cache.EvictionAttributes;
+import org.apache.geode.cache.util.ObjectSizer;
+import org.apache.geode.internal.ClassPathLoader;
+  private RegionFunctionArgs.EvictionAttrs evictionAttributes;
+  public void setEvictionAttributes(String action, Integer maxMemory, Integer maxEntryCount,
+      String objectSizer) {
+    if (action == null) {
+      return;
+    }
+
+    this.evictionAttributes = new EvictionAttrs(action, maxEntryCount, maxMemory, objectSizer);
+  }
+
+  public EvictionAttributes getEvictionAttributes() {
+    return evictionAttributes != null ? evictionAttributes.convertToEvictionAttributes() : null;
+  }
+
+  public static class EvictionAttrs implements Serializable {
+    private static final long serialVersionUID = 9015454906371076014L;
+
+    private String evictionAction;
+    private Integer maxEntryCount;
+    private Integer maxMemory;
+    private String objectSizer;
+
+    public EvictionAttrs(String evictionAction, Integer maxEntryCount, Integer maxMemory,
+        String objectSizer) {
+      this.evictionAction = evictionAction;
+      this.maxEntryCount = maxEntryCount;
+      this.maxMemory = maxMemory;
+      this.objectSizer = objectSizer;
+    }
+
+    public String getEvictionAction() {
+      return evictionAction;
+    }
+
+    public Integer getMaxEntryCount() {
+      return maxEntryCount;
+    }
+
+    public Integer getMaxMemory() {
+      return maxMemory;
+    }
+
+    public String getObjectSizer() {
+      return objectSizer;
+    }
+
+    public EvictionAttributes convertToEvictionAttributes() {
+      EvictionAction action = EvictionAction.parseAction(evictionAction);
+
+      ObjectSizer sizer;
+      if (objectSizer != null) {
+        try {
+          Class<ObjectSizer> sizerClass =
+              (Class<ObjectSizer>) ClassPathLoader.getLatest().forName(objectSizer);
+          sizer = sizerClass.newInstance();
+        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
+          throw new IllegalArgumentException(
+              "Unable to instantiate class " + objectSizer + " - " + e.toString());
+        }
+      } else {
+        sizer = ObjectSizer.DEFAULT;
+      }
+
+      if (maxMemory == null && maxEntryCount == null) {
+        return EvictionAttributes.createLRUHeapAttributes(sizer, action);
+      } else if (maxMemory != null) {
+        return EvictionAttributes.createLRUMemoryAttributes(maxMemory, sizer, action);
+      } else {
+        return EvictionAttributes.createLRUEntryAttributes(maxEntryCount, action);
+      }
+    }
+  }
+
+
