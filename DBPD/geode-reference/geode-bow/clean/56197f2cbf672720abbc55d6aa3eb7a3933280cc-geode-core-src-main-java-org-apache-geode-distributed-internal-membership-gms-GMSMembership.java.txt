GEODE-7435 - Improve performance of GMSMembershipManager.handleOrDefeâ€¦ (#4373)

* GEODE-7435 - Improve performance of GMSMembershipManager.handleOrDeferMessage

Modified the method to avoid synchronization unless we're in an initialization phase.
While initializaing we synchronize and queue messages unless we're told the
queue has been drained.

* re-enabled check in handleOrDeferMessage

* moved return statement into startup-queue block

* empty commit

-import org.apache.geode.internal.cache.partitioned.PartitionMessageWithDirectReply;
+   * Set to true under startupLock when processingEvents has been set to true
+   * and startup messages have been removed from the queue and dispatched
+   */
+  private boolean startupMessagesDrained = false;
+
+  /**
-    synchronized (startupLock) {
-      if (!processingEvents) {
-        startupMessages.add(new StartupEvent(member));
-        return;
+    if (!processingEvents) {
+      synchronized (startupLock) {
+        if (!startupMessagesDrained) {
+          startupMessages.add(new StartupEvent(member));
+          return;
+        }
-    synchronized (startupLock) {
-      if (beingSick || playingDead) {
-        // cache operations are blocked in a "sick" member
-        if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {
+    if (!processingEvents) {
+      synchronized (startupLock) {
+        if (!startupMessagesDrained) {
-      if (!processingEvents) {
-        startupMessages.add(new StartupEvent(msg));
-        return;
-      }
-      synchronized (startupLock) {
-        if (!processingEvents) {
-          startupMessages.add(new StartupEvent(viewArg));
-          return;
+      if (!processingEvents) {
+        synchronized (startupLock) {
+          if (!startupMessagesDrained) {
+            startupMessages.add(new StartupEvent(viewArg));
+            return;
+          }
-      synchronized (startupLock) {
-        if (!processingEvents) {
-          return;
-        }
+      if (!processingEvents) {
+        return;
-            // no more events get put into startupMessages, and
-            // notify all waiters to proceed.
+            // no more events get put into startupMessages
+            startupMessagesDrained = true;
+            // set the volatile boolean that states that queueing is completely done now
+            // notify any threads waiting for event processing that we're open for business
-            break; // ...and we're done.
+            break;
-        if (processingEvents)
+        if (processingEvents && startupMessagesDrained) {
+        }
