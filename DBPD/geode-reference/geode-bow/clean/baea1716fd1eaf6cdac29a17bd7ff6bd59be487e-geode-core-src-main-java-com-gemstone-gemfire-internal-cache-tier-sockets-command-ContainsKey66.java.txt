containsKey

- * 
+ *
+import java.io.IOException;
+
+import com.gemstone.gemfire.cache.client.internal.ContainsKeyOp;
+import com.gemstone.gemfire.distributed.internal.DistributionStats;
-import com.gemstone.gemfire.internal.cache.tier.sockets.*;
+import com.gemstone.gemfire.internal.cache.tier.sockets.BaseCommand;
+import com.gemstone.gemfire.internal.cache.tier.sockets.CacheServerStats;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Message;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Part;
+import com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-import com.gemstone.gemfire.cache.client.internal.ContainsKeyOp;
-import com.gemstone.gemfire.distributed.internal.DistributionStats;
-import java.io.IOException;
+  private ContainsKey66() {
+  }
+
-  private ContainsKey66() {
+  private static void writeContainsKeyResponse(boolean containsKey, Message origMsg, ServerConnection servConn)
+    throws IOException {
+    LogWriterI18n logger = servConn.getLogWriter();
+    Message responseMsg = servConn.getResponseMessage();
+    responseMsg.setMessageType(MessageType.RESPONSE);
+    responseMsg.setNumberOfParts(1);
+    responseMsg.setTransactionId(origMsg.getTransactionId());
+    responseMsg.addObjPart(containsKey ? Boolean.TRUE : Boolean.FALSE);
+    responseMsg.send(servConn);
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      logger.debug("{}: Received containsKey request ({} bytes) from {} for region {} key {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key);
+      logger.debug("{}: Received containsKey request ({} bytes) from {} for region {} key {}", servConn.getName(), msg.getPayloadLength(), servConn
+        .getSocketString(), regionName, key);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ContainsKey_0_THE_INPUT_KEY_FOR_THE_CONTAINSKEY_REQUEST_IS_NULL, servConn.getName()));
+        logger.warn(LocalizedMessage.create(LocalizedStrings.ContainsKey_0_THE_INPUT_KEY_FOR_THE_CONTAINSKEY_REQUEST_IS_NULL, servConn
+          .getName()));
-        logger.warn(LocalizedMessage.create(LocalizedStrings.ContainsKey_0_THE_INPUT_REGION_NAME_FOR_THE_CONTAINSKEY_REQUEST_IS_NULL, servConn.getName()));
+        logger.warn(LocalizedMessage.create(LocalizedStrings.ContainsKey_0_THE_INPUT_REGION_NAME_FOR_THE_CONTAINSKEY_REQUEST_IS_NULL, servConn
+          .getName()));
-      writeErrorResponse(msg, MessageType.CONTAINS_KEY_DATA_ERROR, errMessage,
-          servConn);
+      writeErrorResponse(msg, MessageType.CONTAINS_KEY_DATA_ERROR, errMessage, servConn);
+      return;
-    else {
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
-      if (region == null) {
-        String reason = LocalizedStrings.ContainsKey_WAS_NOT_FOUND_DURING_CONTAINSKEY_REQUEST.toLocalizedString();
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
-      }
-      else {
-        AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-        if (authzRequest != null) {
-          try {
-            authzRequest.containsKeyAuthorize(regionName, key);
-          }
-          catch (NotAuthorizedException ex) {
-            writeException(msg, ex, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-            return;
-          }
-        }
-        // Execute the containsKey
-        boolean containsKey;
-        switch(mode) {
-        case KEY:
-          containsKey = region.containsKey(key);
-          break;
-        case VALUE:
-          containsKey = region.containsValue(key);
-          break;
-        case VALUE_FOR_KEY:
-          containsKey = region.containsValueForKey(key);
-          break;
-        default:
-          containsKey = false;
-          break;
-        }
-
-        // Update the statistics and write the reply
-        {
-          long oldStart = start;
-          start = DistributionStats.getStatTime();
-          stats.incProcessContainsKeyTime(start - oldStart);
-        }
-        writeContainsKeyResponse(containsKey, msg, servConn);
-        servConn.setAsTrue(RESPONDED);
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Sent containsKey response for region {} key {}", servConn.getName(), regionName, key);
-        }
-        stats.incWriteContainsKeyResponseTime(DistributionStats.getStatTime()
-            - start);
-      }
+    LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
+    if (region == null) {
+      String reason = LocalizedStrings.ContainsKey_WAS_NOT_FOUND_DURING_CONTAINSKEY_REQUEST.toLocalizedString();
+      writeRegionDestroyedEx(msg, regionName, reason, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
-  }
+    GeodeSecurityUtil.authorizeDataRead();
-  private static void writeContainsKeyResponse(boolean containsKey, Message origMsg,
-      ServerConnection servConn) throws IOException {
-    LogWriterI18n logger = servConn.getLogWriter();
-    Message responseMsg = servConn.getResponseMessage();
-    responseMsg.setMessageType(MessageType.RESPONSE);
-    responseMsg.setNumberOfParts(1);
-    responseMsg.setTransactionId(origMsg.getTransactionId());
-    responseMsg.addObjPart(containsKey ? Boolean.TRUE : Boolean.FALSE);
-    responseMsg.send(servConn);
+    AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+    if (authzRequest != null) {
+      try {
+        authzRequest.containsKeyAuthorize(regionName, key);
+      } catch (NotAuthorizedException ex) {
+        writeException(msg, ex, false, servConn);
+        servConn.setAsTrue(RESPONDED);
+        return;
+      }
+    }
+    // Execute the containsKey
+    boolean containsKey;
+    switch (mode) {
+      case KEY:
+        containsKey = region.containsKey(key);
+        break;
+      case VALUE:
+        containsKey = region.containsValue(key);
+        break;
+      case VALUE_FOR_KEY:
+        containsKey = region.containsValueForKey(key);
+        break;
+      default:
+        containsKey = false;
+        break;
+    }
+
+    // Update the statistics and write the reply
+    {
+      long oldStart = start;
+      start = DistributionStats.getStatTime();
+      stats.incProcessContainsKeyTime(start - oldStart);
+    }
+    writeContainsKeyResponse(containsKey, msg, servConn);
+    servConn.setAsTrue(RESPONDED);
+    if (logger.isDebugEnabled()) {
+      logger.debug("{}: Sent containsKey response for region {} key {}", servConn.getName(), regionName, key);
+    }
+    stats.incWriteContainsKeyResponseTime(DistributionStats.getStatTime() - start);
