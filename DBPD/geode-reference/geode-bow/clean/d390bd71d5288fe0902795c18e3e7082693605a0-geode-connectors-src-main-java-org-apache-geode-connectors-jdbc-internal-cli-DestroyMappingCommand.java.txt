GEODE-6365: Fixed DestroyMappingCommand bug for default 'cluster' group (#3242)

Refactored DestroyMappingCommand to fix issue causing commands run
without group parameter specified to run on all members, which resulted
in mappings being removed from servers in all groups, without updating
cluster config


Authored-by: Benjamin Ross <bross@pivotal.io>

+import org.apache.geode.distributed.ConfigurationPersistenceService;
-    // input
-    // action
-    List<CliFunctionResult> results =
-        executeAndGetFunctionResult(new DestroyMappingFunction(), regionName, targetMembers);
+    try {
+      boolean isMappingInClusterConfig = false;
+      ConfigurationPersistenceService configService = checkForClusterConfiguration();
-    ResultModel result =
-        ResultModel.createMemberStatusResult(results, EXPERIMENTAL, null, false, true);
-    result.setConfigObject(regionName);
-    return result;
+      if (groups == null) {
+        groups = new String[] {ConfigurationPersistenceService.CLUSTER_CONFIG};
+      }
+
+      for (String group : groups) {
+        CacheConfig cacheConfig = getCacheConfig(configService, group);
+        if (cacheConfig != null) {
+          for (RegionConfig regionConfig : cacheConfig.getRegions()) {
+            if (regionConfig != null && !MappingCommandUtils
+                .getMappingsFromRegionConfig(cacheConfig, regionConfig, group).isEmpty()) {
+              isMappingInClusterConfig = true;
+            }
+          }
+        }
+      }
+
+      if (!isMappingInClusterConfig) {
+        return ResultModel.createError("Mapping not found in cluster configuration.");
+      }
+
+      ResultModel result;
+      if (targetMembers != null) {
+        List<CliFunctionResult> results =
+            executeAndGetFunctionResult(new DestroyMappingFunction(), regionName, targetMembers);
+        result =
+            ResultModel.createMemberStatusResult(results, EXPERIMENTAL, null, false, true);
+      } else {
+        result = ResultModel.createInfo(
+            "No members found in specified server groups containing a mapping for region \""
+                + regionName + "\"");
+      }
+
+      result.setConfigObject(regionName);
+      return result;
+    } catch (PreconditionException ex) {
+      return ResultModel.createError(ex.getMessage());
+    }
+
+
+  private CacheConfig getCacheConfig(ConfigurationPersistenceService configService, String group)
+      throws PreconditionException {
+    CacheConfig result = configService.getCacheConfig(group);
+    return result;
+  }
+
+  protected ConfigurationPersistenceService checkForClusterConfiguration()
+      throws PreconditionException {
+    ConfigurationPersistenceService result = getConfigurationPersistenceService();
+    if (result == null) {
+      throw new PreconditionException("Cluster Configuration must be enabled.");
+    }
+    return result;
+  }
+
