Merge branch 'release/1.5.0'

+import org.apache.geode.CancelCriterion;
+  private final CancelCriterion cancelCriterion;
+  private final CommBufferPool commBufferPool;
+
-  private final CommBufferPool commBufferPool;
-  public TXSynchronizationRunnable(Runnable beforeCompletion, final CommBufferPool commBufferPool) {
-    this.firstRunnable = beforeCompletion;
+  public TXSynchronizationRunnable(final CancelCriterion cancelCriterion,
+      final CommBufferPool commBufferPool, final Runnable beforeCompletion) {
+    this.cancelCriterion = cancelCriterion;
+    this.firstRunnable = beforeCompletion;
+  @Override
-      // from sitting around forever in the event the client goes away
+      // from sitting around forever if the client goes away
-        if (this.secondRunnable == null) {
-          InternalCache cache = GemFireCacheImpl.getInstance();
-          if (cache == null || cache.getCancelCriterion().isCancelInProgress()) {
-            return;
-          }
-        }
-        // we really need the Cache Server's cancel criterion here, not the cache's
-        // but who knows how to get it?
-        InternalCache cache = GemFireCacheImpl.getInstance();
-        if (cache == null) {
-          return;
-        }
-        cache.getCancelCriterion().checkCancelInProgress(null);
+        cancelCriterion.checkCancelInProgress(null);
-        // we really need the Cache Server's cancel criterion here, not the cache's
-        // but who knows how to get it?
-        InternalCache cache = GemFireCacheImpl.getInstance();
-        if (cache == null) {
-          return;
-        }
-        cache.getCancelCriterion().checkCancelInProgress(null);
+        cancelCriterion.checkCancelInProgress(null);
