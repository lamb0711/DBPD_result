GEODE-2812: Add API to get list of live locators

There is a Geode cluster using a logical member group, and from the
client, the connection pool to the logical member group is connected
using the PoolFactory API at the timing when connection becomes
necessary.
At this time, even though the locator that was running at the initial
connection stops due to reasons such as regular maintenance etc., even
if the alternate locator is started before maintenance, I can not
connect to the locator in the static initial list.

1. Client side:PoolManager.createFactory().addLocator("localhost",
10334).setServerGroup("GroupA").create("pool1");
2. Geode cluster:start locator[localhost:10335].
3. Geode cluster:stop locator[localhost:10334].
4. Client side:PoolManager.createFactory().addLocator("localhost",
10334).setServerGroup("GroupB").create("pool2");

Therefore, I would like to decide the connection destination based on
the live locator list of another logical member group.
I added an API that can get the list of live locators from the Pool. Use
the API as follows:

Pool pool = PoolManager.createFactory()
  .addLocator("localhost", 10334)
  .setSubscriptionEnabled(true).setServerGroup("GroupA")
  .create("GroupAPool");

List<InetSocketAddress> = pool.getLiveLocators();

Note:
The list of live locators gets the result of the UpdateLocatorListTask
periodically running in AutoConnectionSourceImpl.
Therefore, whether or not it is alive will cause a time lag, depending
on the task execution interval.
Also, the result of ExplicitConnectionSourceImpl without using a locator
is always empty.

+  private AtomicReference<LocatorList> liveLocators = new AtomicReference<LocatorList>();
+    this.liveLocators.set(new LocatorList(Collections.emptyList()));
+  @Override
+  public List<InetSocketAddress> getLiveLocators() {
+    if (PoolImpl.TEST_DURABLE_IS_NET_DOWN) {
+      return Collections.emptyList();
+    }
+    return Collections.unmodifiableList(new ArrayList<>(liveLocators.get().getLocators()));
+  }
+
+    List<InetSocketAddress> activeLocators = new ArrayList<InetSocketAddress>(locatorResponse.size());
+      activeLocators.add(address);
+    liveLocators.set(new LocatorList(activeLocators));
