GEODE-4858: Convert DestroyIndexCommand to ResultModel and new cluster persistence API (#1966)


+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.cache.configuration.RegionConfig;
+import org.apache.geode.distributed.ConfigurationPersistenceService;
-import org.apache.geode.distributed.internal.InternalConfigurationPersistenceService;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.domain.IndexInfo;
+import org.apache.geode.management.cli.SingleGfshCommand;
+import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class DestroyIndexCommand extends InternalGfshCommand {
+public class DestroyIndexCommand extends SingleGfshCommand {
-  public Result destroyIndex(
+  public ResultModel destroyIndex(
-      return ResultBuilder.createUserErrorResult(
+      return ResultModel.createError(
-    IndexInfo indexInfo = new IndexInfo(indexName, regionName);
-    indexInfo.setIfExists(ifExists);
+
+    RegionConfig.Index indexInfo = new RegionConfig.Index();
+    indexInfo.setName(indexName);
+    indexInfo.setFromClause(regionName);
+
-      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-    Result result = ResultBuilder.buildResult(funcResults);
-    XmlEntity xmlEntity = findXmlEntity(funcResults);
+    ResultModel result = ResultModel.createMemberStatusResult(funcResults, ifExists);
-    if (xmlEntity != null) {
-      persistClusterConfiguration(result,
-          () -> ((InternalConfigurationPersistenceService) getConfigurationPersistenceService())
-              .deleteXmlEntity(xmlEntity, group));
-    }
+    result.setConfigObject(indexInfo);
+
+
+  @Override
+  public void updateClusterConfig(String group, CacheConfig config, Object element) {
+    RegionConfig.Index indexFromCommand = (RegionConfig.Index) element;
+    String indexName = indexFromCommand.getName();
+
+    String regionName = indexFromCommand.getFromClause();
+    if (regionName != null) {
+      RegionConfig regionConfig = config.findRegionConfiguration(regionName);
+      if (regionConfig == null) {
+        String errorMessage = "Region " + regionName + " not found";
+        if (!ConfigurationPersistenceService.CLUSTER_CONFIG.equals(group)) {
+          errorMessage += " in group " + group;
+        }
+        throw new EntityNotFoundException(errorMessage);
+      }
+
+      if (indexName.isEmpty()) {
+        regionConfig.getIndex().clear();
+      } else {
+        CacheElement.removeElement(regionConfig.getIndex(), indexName);
+      }
+    } else {
+      // Need to search for the index name as region was not specified
+      for (RegionConfig r : config.getRegion()) {
+        CacheElement.removeElement(r.getIndex(), indexName);
+      }
+    }
+  }
+
