GEODE-3472: Remove a great deal of commented-out code.

* this closes #748

-// Should this have info about the command String??
+
-    this.resultLines = new Vector<String>();
+    this.resultLines = new Vector<>();
-  // TODO -Abhishek - extract this code out in a FormatBuilder or PresentationBuilder??
-            // resultTable.setColumnSeparator(" | ");
-      // TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always
-  /* private */ void buildObjectResultOutput() {
+  void buildObjectResultOutput() {
-      } /*
-         * else { // GfJsonObject jsonObject =
-         * content.getJSONObject(ObjectResultData.ROOT_OBJECT_ACCESSOR); //
-         * buildObjectSection(resultTable, null, jsonObject, 0); }
-         */
-
+      }
-      // TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always
-    RowGroup rowGroup = null;
+    RowGroup rowGroup;
-      GfJsonArray jsonArray = object.getJSONArray(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI);;
-      fieldsToSkipOnUI = new ArrayList<String>();
+      GfJsonArray jsonArray = object.getJSONArray(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI);
+      fieldsToSkipOnUI = new ArrayList<>();
-      } catch (GfJsonException e) {
-        /* next check if it's a nested object */}
+      } catch (GfJsonException ignored) {
+      }
-      /* if (nestedCollection != null) */ {
-        for (int i = 0; i < depth; i++) {
-          prefix += " . ";
-        }
+      for (int i = 0; i < depth; i++) {
+        prefix += " . ";
-        Map<String, Integer> columnsMap = new HashMap<String, Integer>();
+        Map<String, Integer> columnsMap = new HashMap<>();
-        GfJsonArray rowsArray = nestedCollection;
-        int numOfRows = rowsArray.size();
+        int numOfRows = nestedCollection.size();
-          GfJsonObject content = rowsArray.getJSONObject(j);
+          GfJsonObject content = nestedCollection.getJSONObject(j);
-            tableFieldsToSkipOnUI = new ArrayList<String>();
+            tableFieldsToSkipOnUI = new ArrayList<>();
-                // skip file data if any //TODO - make response format better
+                // skip file data if any
-              // skip file data if any //TODO - make response format better
+              // skip file data if any
-        // Row newRow = rowGroup.newRow();
-        // String prefix = "";
-        // for (int i = 0; i < depth; i++) {
-        // prefix += " . ";
-        // }
-        // newRow.newLeftCol(prefix+fieldDisplayNames.getString(key)).newLeftCol(field);
-        Object value = field;
-        /*
-         * if (isPrimitiveOrStringOrWrapperArray(value)) { value = Arrays.toString((String[])value);
-         * }
-         */
-        newRow.newLeftCol(value);
+        newRow.newLeftCol(field);
-      } catch (GfJsonException e) {
+      } catch (GfJsonException ignored) {
-  /* private */ void buildComposite() {
+  void buildComposite() {
-    RowGroup rowGroup = null;
+    RowGroup rowGroup;
-      // System.out.println(key +" : " + object);
-        continue;
-        // System.out.println(key+" : "+object);
-  // public static void main(String[] args) {
-  // String[] valuesSeparatedByLines = getValuesSeparatedByLines(CliConstants.LINE_SEPARATOR);
-  // System.out.println(valuesSeparatedByLines +" -- "+valuesSeparatedByLines.length);
-  // }
-
-    String[] values = null;
-    values = valueString.split(GfshParser.LINE_SEPARATOR);
-    return values;
+    return valueString.split(GfshParser.LINE_SEPARATOR);
-        // skip file data if any //TODO - make response format better
+        // skip file data if any
-      headerRow.newCenterCol((String) object);
+      headerRow.newCenterCol(object);
-        // skip file data if any //TODO - make response format better
+        // skip file data if any
-        throw new RuntimeException("No associated files to save .. "); // TODO Abhishek - add i18n
-                                                                       // string
+        throw new RuntimeException("No associated files to save .. ");
-    } catch (DataFormatException e) {
-      throw new RuntimeException(e);
-    } catch (GfJsonException e) {
+    } catch (DataFormatException | GfJsonException e) {
-  public GfJsonObject getContent() throws GfJsonException {
+  public GfJsonObject getContent() {
-  // public String getContentStr() {
-  // return gfJsonObject.getString(ResultData.RESULT_CONTENT);
-  // }
-
