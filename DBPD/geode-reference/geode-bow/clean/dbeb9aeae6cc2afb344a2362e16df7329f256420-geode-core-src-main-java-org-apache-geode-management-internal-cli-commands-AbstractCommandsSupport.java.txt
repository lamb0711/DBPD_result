Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.HashSet;
-import java.util.Set;
-
+import org.apache.geode.distributed.internal.ClusterConfigurationService;
+import org.apache.geode.distributed.internal.InternalLocator;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.management.cli.Result;
-
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.util.HashSet;
+import java.util.Set;
+
- * The AbstractCommandsSupport class is an abstract base class encapsulating common functionality for implementing
- * command classes with command for the GemFire shell (gfsh).
+ * The AbstractCommandsSupport class is an abstract base class encapsulating common functionality
+ * for implementing command classes with command for the GemFire shell (gfsh).
+ * 
+  protected static SecurityService securityService = SecurityService.getSecurityService();
-  protected static void assertArgument(final boolean valid, final String message, final Object... args) {
+  protected static void assertArgument(final boolean valid, final String message,
+      final Object... args) {
-  protected static void assertNotNull(final Object obj, final String message, final Object... args) {
+  protected static void assertNotNull(final Object obj, final String message,
+      final Object... args) {
-  protected static void assertState(final boolean valid, final String message, final Object... args) {
+  protected static void assertState(final boolean valid, final String message,
+      final Object... args) {
-  protected static String toString(final Boolean condition, final String trueValue, final String falseValue) {
+  protected static String toString(final Boolean condition, final String trueValue,
+      final String falseValue) {
-      : StringUtils.defaultIfBlank(falseValue, "false"));
+        : StringUtils.defaultIfBlank(falseValue, "false"));
+  protected ClusterConfigurationService getSharedConfiguration() {
+    InternalLocator locator = InternalLocator.getLocator();
+    return (locator == null) ? null : locator.getSharedConfiguration();
+  }
+
+  protected void persistClusterConfiguration(Result result, Runnable runnable) {
+    if (result == null) {
+      throw new IllegalArgumentException("Result should not be null");
+    }
+    ClusterConfigurationService sc = getSharedConfiguration();
+    if (sc == null) {
+      result.setCommandPersisted(false);
+    } else {
+      runnable.run();
+      result.setCommandPersisted(true);
+    }
+  }
+
-  protected Gfsh getGfsh() {
+  protected static Gfsh getGfsh() {
-      if (memberName.equalsIgnoreCase(member.getName()) || memberName.equalsIgnoreCase(member.getId())) {
+      if (memberName.equalsIgnoreCase(member.getName())
+          || memberName.equalsIgnoreCase(member.getId())) {
-    throw new MemberNotFoundException(CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberName));
+    throw new MemberNotFoundException(
+        CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberName));
+   * 
-    }
-    else {
+    } else {
