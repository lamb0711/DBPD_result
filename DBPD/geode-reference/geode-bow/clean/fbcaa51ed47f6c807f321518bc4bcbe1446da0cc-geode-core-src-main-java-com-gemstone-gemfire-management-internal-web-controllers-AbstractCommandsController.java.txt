GEODE-17: enable authentication/authorization of rest admin API and add a test suite to test it.

-import com.gemstone.gemfire.cache.CacheFactory;
-import com.gemstone.gemfire.management.ManagementService;
-import com.gemstone.gemfire.management.internal.SystemManagementService;
-import com.gemstone.gemfire.management.internal.security.CLIOperationContext;
-import com.gemstone.gemfire.management.internal.security.ResourceOperationContext;
-//    // create the jmx connection
-//    // con.getMemberMXBean then call the processCommand on that bean
-//    Map<String, String[]> env = new HashMap<>();
-//    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-//    int jmxPort = cache.getDistributedSystem().getConfig().getJmxManagerPort();
-//    Properties credentials = EnvironmentVariablesHandlerInterceptor.CREDENTIALS.get();
-//    if(credentials!=null) {
-//      env.put(JMXConnector.CREDENTIALS, new String[] { credentials.getProperty("security-username"), credentials.getProperty("security-password") });
-//    }
-//
-//    String result = null;
-//    try {
-//      JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://:" + jmxPort + "/jmxrmi");
-//      JMXConnector jmxConnector = JMXConnectorFactory.connect(url, env);
-//      MBeanServerConnection con = jmxConnector.getMBeanServerConnection();
-//
-//      MemberMXBean memberMXBean = JMX.newMXBeanProxy(con, ObjectName.getInstance("GemFire:type=Member,member=Manager"), MemberMXBean.class);
-//      result = memberMXBean.processCommand(command, environment, ArrayUtils.toByteArray(fileData));
-//    }
-//    catch(Exception e){
-//      e.printStackTrace();
-//    }
-
-    ResourceOperationContext ctx = authorize(command);
-    ctx = postAuthorize(command, ctx, result);
-  protected ResourceOperationContext authorize(final String command) {
-
-
-    SystemManagementService service = (SystemManagementService) ManagementService
-        .getExistingManagementService(CacheFactory.getAnyInstance());
-    Properties credentials = EnvironmentVariablesHandlerInterceptor.CREDENTIALS.get();
-    CLIOperationContext context = CLIOperationContext.getOperationContext(command);
-    service.getAuthManager().authorize(credentials, context);
-    return context;
-  }
-
-  protected ResourceOperationContext postAuthorize(final String command, ResourceOperationContext context, Object result) {
-
-    context.setPostOperationResult(result);
-    SystemManagementService service = (SystemManagementService) ManagementService
-        .getExistingManagementService(CacheFactory.getAnyInstance());
-    Properties credentials = EnvironmentVariablesHandlerInterceptor.CREDENTIALS.get();
-
-    service.getAuthManager().postAuthorize(credentials, context);
-    return context;
-  }
-
-
-
