Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    Region<ByteArrayWrapper, Boolean> region = (Region<ByteArrayWrapper, Boolean>) rC.getRegion(firstSetKey);
+    Region<ByteArrayWrapper, Boolean> region =
+        (Region<ByteArrayWrapper, Boolean>) rC.getRegion(firstSetKey);
-          command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), 0));
-          context.getRegionProvider().removeKey(destination);
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), 0));
+        context.getRegionProvider().removeKey(destination);
-          command.setResponse(Coder.getBulkStringArrayResponse(context.getByteBufAllocator(), firstSet));
+          command.setResponse(
+              Coder.getBulkStringArrayResponse(context.getByteBufAllocator(), firstSet));
-      Region<ByteArrayWrapper, Boolean> newRegion = null; // (Region<ByteArrayWrapper, Boolean>) rC.getRegion(destination);
+      Region<ByteArrayWrapper, Boolean> newRegion = null; // (Region<ByteArrayWrapper, Boolean>)
+                                                          // rC.getRegion(destination);
-          newRegion = (Region<ByteArrayWrapper, Boolean>) rC.getOrCreateRegion(destination, RedisDataType.REDIS_SET, context);
+          newRegion = (Region<ByteArrayWrapper, Boolean>) rC.getOrCreateRegion(destination,
+              RedisDataType.REDIS_SET, context);
-        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), resultSet.size()));
+        command
+            .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), resultSet.size()));
-        command.setResponse(Coder.getBulkStringArrayResponse(context.getByteBufAllocator(), resultSet));
+        command.setResponse(
+            Coder.getBulkStringArrayResponse(context.getByteBufAllocator(), resultSet));
-  protected abstract Set<ByteArrayWrapper> setOp(Set<ByteArrayWrapper> firstSet, List<Set<ByteArrayWrapper>> setList);
+  protected abstract Set<ByteArrayWrapper> setOp(Set<ByteArrayWrapper> firstSet,
+      List<Set<ByteArrayWrapper>> setList);
