Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class models a datasource factory.The datasource factory has funtions to
- * create 3 types of datasources. 1) Basic datasource without any connection
- * pooling. 2) Datasource with pooled connections. 3) Datasource with pooled
- * connection and transaction capabilities.
+ * This class models a datasource factory.The datasource factory has funtions to create 3 types of
+ * datasources. 1) Basic datasource without any connection pooling. 2) Datasource with pooled
+ * connections. 3) Datasource with pooled connection and transaction capabilities.
- *         The invokeAllMethods was setting only some specific properties
- *         Modified the code so that any key value mentioned in <property>tag
- *         is attempted for setting. If the property has a key as serverName ,
- *         then the setter method is invoked with the name setServerName & the
- *         value present in value attribute is passed Made the Exception
- *         handling robust
+ * The invokeAllMethods was setting only some specific properties Modified the code so that any key
+ * value mentioned in <property>tag is attempted for setting. If the property has a key as
+ * serverName , then the setter method is invoked with the name setServerName & the value present in
+ * value attribute is passed Made the Exception handling robust
- *         Changed invokeAllMethods wrt the change in cache.xml for
- *         vendor specific properties.
- *  
+ * Changed invokeAllMethods wrt the change in cache.xml for vendor specific properties.
+ * 
-public class DataSourceFactory  {
+public class DataSourceFactory {
-  
+
-  public DataSourceFactory() {
-  }
+  public DataSourceFactory() {}
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE));
-      throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE.toLocalizedString());
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE));
+      throw new DataSourceCreateException(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEJDBC_DRIVER_IS_NOT_AVAILABLE
+              .toLocalizedString());
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL));
-      throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL.toLocalizedString());
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL));
+      throw new DataSourceCreateException(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETSIMPLEDATASOURCEURL_STRING_TO_DATABASE_IS_NULL
+              .toLocalizedString());
-    }
-    catch (Exception ex) {
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0, ex.getLocalizedMessage()), ex);
-      throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0.toLocalizedString(ex.getLocalizedMessage()), ex);
+    } catch (Exception ex) {
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0,
+          ex.getLocalizedMessage()), ex);
+      throw new DataSourceCreateException(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETSIMPLEDATASOURCE_EXCEPTION_WHILE_CREATING_GEMFIREBASICDATASOURCE_EXCEPTION_STRING_0
+              .toLocalizedString(ex.getLocalizedMessage()),
+          ex);
-   * This function creats a data dource from the ManagedConnectionFactory class
-   * using the connectionManager.
+   * This function creats a data dource from the ManagedConnectionFactory class using the
+   * connectionManager.
-  public static ClientConnectionFactoryWrapper getManagedDataSource(
-      Map configMap, List props) throws DataSourceCreateException {
+  public static ClientConnectionFactoryWrapper getManagedDataSource(Map configMap, List props)
+      throws DataSourceCreateException {
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE));
-      throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE.toLocalizedString());
-    }
-    else {
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE));
+      throw new DataSourceCreateException(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCEMANAGED_CONNECTION_FACTORY_CLASS_IS_NOT_AVAILABLE
+              .toLocalizedString());
+    } else {
-      }
-      catch (Exception ex) {
-        logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0, ex), null);
-        throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
-            .toLocalizedString(ex));
+      } catch (Exception ex) {
+        logger.error(LocalizedMessage.create(
+            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0,
+            ex), null);
+        throw new DataSourceCreateException(
+            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
+                .toLocalizedString(ex));
-    if (configs.getMCFClass().equals(
-        "org.apache.persistence.connection.internal.ConnFactory")) {
+    if (configs.getMCFClass().equals("org.apache.persistence.connection.internal.ConnFactory")) {
-    }
-    else {
+    } else {
-    }
-    catch (Exception ex) {  
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0,ex), null);
-      throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
-          .toLocalizedString(ex));
+    } catch (Exception ex) {
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0,
+          ex), null);
+      throw new DataSourceCreateException(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETMANAGEDDATASOURCE_EXCEPTION_IN_CREATING_MANAGED_CONNECTION_FACTORY_EXCEPTION_STRING_0
+              .toLocalizedString(ex));
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
-      throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE.toLocalizedString());
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
+      throw new DataSourceCreateException(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETPOOLEDDATASOURCECONNECTIONPOOLDATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE
+              .toLocalizedString());
-      return new GemFireConnPooledDataSource((ConnectionPoolDataSource) Obj,
-          configs);
-    }
-    catch (Exception ex) {
-      String exception = LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0.toLocalizedString(new Object[] {ex});
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0, ex), ex);
+      return new GemFireConnPooledDataSource((ConnectionPoolDataSource) Obj, configs);
+    } catch (Exception ex) {
+      String exception =
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0
+              .toLocalizedString(new Object[] {ex});
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETPOOLEDDATASOURCE_EXCEPTION_CREATING_CONNECTIONPOOLDATASOURCE_EXCEPTION_STRING_0,
+          ex), ex);
-   * This function returns the datasource with connection pooling and
-   * transaction participation capabilities.
+   * This function returns the datasource with connection pooling and transaction participation
+   * capabilities.
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
-      throw new DataSourceCreateException(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE.toLocalizedString());
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE));
+      throw new DataSourceCreateException(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORYGETTRANXDATASOURCEXADATASOURCE_CLASS_NAME_FOR_THE_RESOURCEMANAGER_IS_NOT_AVAILABLE
+              .toLocalizedString());
-    if(TEST_CONNECTION_HOST!=null) {
-      props.add(new ConfigProperty("serverName",TEST_CONNECTION_HOST,"java.lang.String"));
+    if (TEST_CONNECTION_HOST != null) {
+      props.add(new ConfigProperty("serverName", TEST_CONNECTION_HOST, "java.lang.String"));
-    if(TEST_CONNECTION_PORT!=null) {
-      props.add(new ConfigProperty("portNumber",TEST_CONNECTION_PORT,"int"));
+    if (TEST_CONNECTION_PORT != null) {
+      props.add(new ConfigProperty("portNumber", TEST_CONNECTION_PORT, "int"));
-    }
-    catch (Exception ex) {
-      String exception = LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0.toLocalizedString(new Object[] {ex});
-      logger.error(LocalizedMessage.create(LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0, ex), ex);
+    } catch (Exception ex) {
+      String exception =
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0
+              .toLocalizedString(new Object[] {ex});
+      logger.error(LocalizedMessage.create(
+          LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_GETTRANXDATASOURCE_EXCEPTION_IN_CREATING_GEMFIRETRANSACTIONDATASOURCE__EXCEPTION_STRING_0,
+          ex), ex);
-  private static ConfiguredDataSourceProperties createDataSourceProperties(
-      Map configMap) {
+  private static ConfiguredDataSourceProperties createDataSourceProperties(Map configMap) {
-      Map.Entry entry = (Map.Entry)entries.next();
-      String name = (String)entry.getKey();
+      Map.Entry entry = (Map.Entry) entries.next();
+      String name = (String) entry.getKey();
-        configs.setURL((String)obj);
+        configs.setURL((String) obj);
-        configs.setUser((String)obj);
+        configs.setUser((String) obj);
-        configs.setPassword(PasswordUtil.decrypt((String)obj));
+        configs.setPassword(PasswordUtil.decrypt((String) obj));
-        configs.setJDBCDriver((String)obj);
+        configs.setJDBCDriver((String) obj);
-        configs.setInitialPoolSize(Integer
-            .parseInt((String)(obj == null ? String
-                    .valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_INIT_LIMIT)
-                    : obj)));
+        configs.setInitialPoolSize(Integer.parseInt((String) (obj == null
+            ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_INIT_LIMIT) : obj)));
-        configs.setMaxPoolSize(Integer.parseInt((String)(obj == null ? String
-            .valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_MAX_LIMIT)
-            : obj)));
+        configs.setMaxPoolSize(Integer.parseInt((String) (obj == null
+            ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_MAX_LIMIT) : obj)));
-        configs
-            .setConnectionExpirationTime(Integer
-                .parseInt((String)(obj == null ? String
-                    .valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_EXPIRATION_TIME)
-                    : obj)));
+        configs.setConnectionExpirationTime(Integer.parseInt((String) (obj == null
+            ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_EXPIRATION_TIME) : obj)));
-        configs
-            .setConnectionTimeOut(Integer
-                .parseInt((String)(obj == null ? String
-                    .valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_ACTIVE_TIME_OUT)
-                    : obj)));
+        configs.setConnectionTimeOut(Integer.parseInt((String) (obj == null
+            ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_ACTIVE_TIME_OUT) : obj)));
-        configs
-            .setLoginTimeOut(Integer
-                .parseInt((String)(obj == null ? String
-                    .valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_CLIENT_TIME_OUT)
-                    : obj)));
+        configs.setLoginTimeOut(Integer.parseInt((String) (obj == null
+            ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_CLIENT_TIME_OUT) : obj)));
-        configs.setConnectionPoolDSClass((String)obj);
+        configs.setConnectionPoolDSClass((String) obj);
-        configs.setXADSClass((String)obj);
+        configs.setXADSClass((String) obj);
-        configs.setMCFClass((String)obj);
+        configs.setMCFClass((String) obj);
-        configs.setTransactionType((String)obj);
+        configs.setTransactionType((String) obj);
-    
+
-    if(TEST_CONNECTION_URL!=null) {
-      configs.setURL((String)TEST_CONNECTION_URL);
+    if (TEST_CONNECTION_URL != null) {
+      configs.setURL((String) TEST_CONNECTION_URL);
-  
+
-  
+
+
+
-  
+
-   * Asif: Rewrote the function as the number of properties to be set for a
-   * given datasource is dynamic
+   * Asif: Rewrote the function as the number of properties to be set for a given datasource is
+   * dynamic
-   * Rohit: Rewrote to accomodate the change in cache.xml. property tag is now
-   * replaced by config-property for vendor specific data to get the Class name
-   * dynamically. CLass name is specified in config-property-type tag and is
-   * stored in ConfigProperty Data Object after parsing cache.xml.
+   * Rohit: Rewrote to accomodate the change in cache.xml. property tag is now replaced by
+   * config-property for vendor specific data to get the Class name dynamically. CLass name is
+   * specified in config-property-type tag and is stored in ConfigProperty Data Object after parsing
+   * cache.xml.
-      throws IllegalArgumentException, IllegalAccessException,
-      InvocationTargetException {
+      throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-      methodName = new StringBuffer("set").append(
-          Character.toUpperCase(key.charAt(0))).append(
-          key.length() > 1 ? key.substring(1) : "").toString();
+      methodName = new StringBuffer("set").append(Character.toUpperCase(key.charAt(0)))
+          .append(key.length() > 1 ? key.substring(1) : "").toString();
-        if("int".equals(type)) {
+        if ("int".equals(type)) {
-        Constructor cr = realClass
-            .getConstructor(new Class[] { java.lang.String.class});
-        Object ob = cr.newInstance(new Object[] { value});
-        m = c.getMethod(methodName, new Class[] { cl});
-        m.invoke(cpdsObj, new Object[] { ob});
-      }
-      catch (ClassNotFoundException ex) {
-        String exception = LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_CLASS_WITH_THE_GIVEN_CONFIGPROPERTYTYPE_CLASSNAME_EXCEPTION_STRING_0.toLocalizedString(ex.toString());
+        Constructor cr = realClass.getConstructor(new Class[] {java.lang.String.class});
+        Object ob = cr.newInstance(new Object[] {value});
+        m = c.getMethod(methodName, new Class[] {cl});
+        m.invoke(cpdsObj, new Object[] {ob});
+      } catch (ClassNotFoundException ex) {
+        String exception =
+            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_CLASS_WITH_THE_GIVEN_CONFIGPROPERTYTYPE_CLASSNAME_EXCEPTION_STRING_0
+                .toLocalizedString(ex.toString());
-      }
-      catch (NoSuchMethodException ex) {
-        String exception = LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_METHOD_USING_CONFIGPROPERTYNAME_PROPERTY_EXCEPTION_STRING_0.toLocalizedString(ex.toString());
+      } catch (NoSuchMethodException ex) {
+        String exception =
+            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_METHOD_USING_CONFIGPROPERTYNAME_PROPERTY_EXCEPTION_STRING_0
+                .toLocalizedString(ex.toString());
-      }
-      catch (InstantiationException ex) {
-        String exception = LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_INSTANCE_OF_THE_CLASS_USING_THE_CONSTRUCTOR_WITH_A_STRING_PARAMETER_EXCEPTION_STRING_0.toLocalizedString(ex.toString());
+      } catch (InstantiationException ex) {
+        String exception =
+            LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_INSTANCE_OF_THE_CLASS_USING_THE_CONSTRUCTOR_WITH_A_STRING_PARAMETER_EXCEPTION_STRING_0
+                .toLocalizedString(ex.toString());
