GEODE-4009: add jdbc connection pooling (#1213)

* The HikariCP datasource implementation is used for connection pooling.
* removed prepared statement caching
* close is now called for all connections, statements, and result sets.
* renamed ConnectionManager to DataSourceManager
* renamed JdbcConnectorService to JdbcConnectorServiceImpl
* renamed InternalJdbcConnectorService to JdbcConnectorService

-import java.util.HashSet;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import org.apache.geode.connectors.jdbc.internal.xml.JdbcConnectorServiceXmlGenerator;
-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.internal.cache.extension.Extensible;
-import org.apache.geode.internal.cache.xmlcache.XmlGenerator;
-import org.apache.geode.management.internal.beans.CacheServiceMBeanBase;
+import org.apache.geode.internal.cache.extension.Extension;
-public class JdbcConnectorService implements InternalJdbcConnectorService {
+public interface JdbcConnectorService extends Extension<Cache>, CacheService {
-  private final Map<String, ConnectionConfiguration> connectionsByName = new ConcurrentHashMap<>();
-  private final Map<String, RegionMapping> mappingsByRegion = new ConcurrentHashMap<>();
-  private volatile InternalCache cache;
-  private boolean registered;
+  void createConnectionConfig(ConnectionConfiguration config)
+      throws ConnectionConfigExistsException;
-  @Override
-  public void createConnectionConfig(ConnectionConfiguration config)
-      throws ConnectionConfigExistsException {
-    registerAsExtension();
-    ConnectionConfiguration existing = connectionsByName.putIfAbsent(config.getName(), config);
-    if (existing != null) {
-      throw new ConnectionConfigExistsException(
-          "ConnectionConfiguration " + config.getName() + " exists");
-    }
-  }
+  void replaceConnectionConfig(ConnectionConfiguration config)
+      throws ConnectionConfigNotFoundException;
-  @Override
-  public void replaceConnectionConfig(ConnectionConfiguration alteredConfig)
-      throws ConnectionConfigNotFoundException {
-    registerAsExtension();
-    ConnectionConfiguration existingConfig = connectionsByName.get(alteredConfig.getName());
-    if (existingConfig == null) {
-      throw new ConnectionConfigNotFoundException(
-          "ConnectionConfiguration " + alteredConfig.getName() + " was not found");
-    }
+  void destroyConnectionConfig(String connectionName);
-    connectionsByName.put(existingConfig.getName(), alteredConfig);
-  }
+  ConnectionConfiguration getConnectionConfig(String connectionName);
-  @Override
-  public void destroyConnectionConfig(String connectionName) {
-    registerAsExtension();
-    connectionsByName.remove(connectionName);
-  }
+  Set<ConnectionConfiguration> getConnectionConfigs();
-  @Override
-  public ConnectionConfiguration getConnectionConfig(String connectionName) {
-    return connectionsByName.get(connectionName);
-  }
+  void createRegionMapping(RegionMapping mapping) throws RegionMappingExistsException;
-  @Override
-  public Set<ConnectionConfiguration> getConnectionConfigs() {
-    Set<ConnectionConfiguration> connectionConfigs = new HashSet<>();
-    connectionConfigs.addAll(connectionsByName.values());
-    return connectionConfigs;
-  }
+  void replaceRegionMapping(RegionMapping mapping) throws RegionMappingNotFoundException;
-  @Override
-  public Set<RegionMapping> getRegionMappings() {
-    Set<RegionMapping> regionMappings = new HashSet<>();
-    regionMappings.addAll(mappingsByRegion.values());
-    return regionMappings;
-  }
+  void destroyRegionMapping(String regionName);
-  @Override
-  public void createRegionMapping(RegionMapping mapping) throws RegionMappingExistsException {
-    registerAsExtension();
-    RegionMapping existing = mappingsByRegion.putIfAbsent(mapping.getRegionName(), mapping);
-    if (existing != null) {
-      throw new RegionMappingExistsException(
-          "RegionMapping for region " + mapping.getRegionName() + " exists");
-    }
-  }
+  RegionMapping getMappingForRegion(String regionName);
-  @Override
-  public void replaceRegionMapping(RegionMapping alteredMapping)
-      throws RegionMappingNotFoundException {
-    registerAsExtension();
-    RegionMapping existingMapping = mappingsByRegion.get(alteredMapping.getRegionName());
-    if (existingMapping == null) {
-      throw new RegionMappingNotFoundException(
-          "RegionMapping for region " + existingMapping.getRegionName() + " was not found");
-    }
+  Set<RegionMapping> getRegionMappings();
-    mappingsByRegion.put(existingMapping.getRegionName(), alteredMapping);
-  }
-
-  @Override
-  public RegionMapping getMappingForRegion(String regionName) {
-    return mappingsByRegion.get(regionName);
-  }
-
-  @Override
-  public void destroyRegionMapping(String regionName) {
-    registerAsExtension();
-    mappingsByRegion.remove(regionName);
-  }
-
-  @Override
-  public void init(Cache cache) {
-    this.cache = (InternalCache) cache;
-  }
-
-  private synchronized void registerAsExtension() {
-    if (!registered) {
-      cache.getExtensionPoint().addExtension(this);
-      registered = true;
-    }
-  }
-
-  @Override
-  public Class<? extends CacheService> getInterface() {
-    return InternalJdbcConnectorService.class;
-  }
-
-  @Override
-  public CacheServiceMBeanBase getMBean() {
-    return null;
-  }
-
-  @Override
-  public XmlGenerator<Cache> getXmlGenerator() {
-    return new JdbcConnectorServiceXmlGenerator(connectionsByName.values(),
-        mappingsByRegion.values());
-  }
-
-  @Override
-  public void beforeCreate(Extensible<Cache> source, Cache cache) {
-    // nothing
-  }
-
-  @Override
-  public void onCreate(Extensible<Cache> source, Extensible<Cache> target) {
-    // nothing
-  }
