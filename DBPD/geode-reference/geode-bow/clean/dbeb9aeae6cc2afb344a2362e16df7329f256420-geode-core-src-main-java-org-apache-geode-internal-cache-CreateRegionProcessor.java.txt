Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * org.apache.geode.internal.cache.CacheDistributionAdvisor.Profiles. It 
- * represents creation of
- * a {@link CacheDistributionAdvisee}. Name remains CreateRegion to avoid
- * merge conflicts.
+ * org.apache.geode.internal.cache.CacheDistributionAdvisor.Profiles. It represents creation of a
+ * {@link CacheDistributionAdvisee}. Name remains CreateRegion to avoid merge conflicts.
-  
+
-    for (int retry=0; retry<5; retry++) {
-    Set recps = getRecipients();
-    
-    if (logger.isDebugEnabled()) {
-      logger.debug("Creating region {}", this.newRegion);
-    }
+    for (int retry = 0; retry < 5; retry++) {
+      Set recps = getRecipients();
-    if (recps.isEmpty()) {
-        logger.debug("CreateRegionProcessor.initializeRegion, no recipients, msg not sent");
+        logger.debug("Creating region {}", this.newRegion);
-      this.newRegion.getDistributionAdvisor().setInitialized();
-      EventTracker tracker = ((LocalRegion)this.newRegion).getEventTracker();
-      if (tracker != null) {
-        tracker.setInitialized();
+
+      if (recps.isEmpty()) {
+        if (logger.isDebugEnabled()) {
+          logger.debug("CreateRegionProcessor.initializeRegion, no recipients, msg not sent");
+        }
+        this.newRegion.getDistributionAdvisor().setInitialized();
+        EventTracker tracker = ((LocalRegion) this.newRegion).getEventTracker();
+        if (tracker != null) {
+          tracker.setInitialized();
+        }
+        return;
-      return;
-    }
-    CreateRegionReplyProcessor replyProc = new CreateRegionReplyProcessor(recps);
-    
+      CreateRegionReplyProcessor replyProc = new CreateRegionReplyProcessor(recps);
-    boolean useMcast = false; // multicast is disabled for this message for now
-    CreateRegionMessage msg = getCreateRegionMessage(recps, replyProc, useMcast);
-    // since PR buckets can be created during cache entry operations, enable
-    // severe alert processing if we're creating one of them
-    if (((LocalRegion)newRegion).isUsedForPartitionedRegionBucket()) {
-      replyProc.enableSevereAlertProcessing();
-      msg.severeAlertCompatible = true;
-    }
-      
-    this.newRegion.getDistributionManager().putOutgoing(msg);
-    // this was in a while() loop, which is incorrect use of a reply processor.
-    // Reply procs are deregistered when they return from waitForReplies
-    try {
-      // Don't allow a region to be created if the distributed system is
-      // disconnecting
-      this.newRegion.getCache().getCancelCriterion().checkCancelInProgress(null);
-      
-      // This isn't right.  We should disable region creation in general, not just
-      // the remote case here...
-//      // Similarly, don't allow new regions to be created if the cache is closing
-//      GemFireCache cache = (GemFireCache)this.newRegion.getCache();
-//      if (cache.isClosing()) {
-//        throw new CacheClosedException("Cannot create a region when the cache is closing");
-//      }
+      boolean useMcast = false; // multicast is disabled for this message for now
+      CreateRegionMessage msg = getCreateRegionMessage(recps, replyProc, useMcast);
+
+      // since PR buckets can be created during cache entry operations, enable
+      // severe alert processing if we're creating one of them
+      if (((LocalRegion) newRegion).isUsedForPartitionedRegionBucket()) {
+        replyProc.enableSevereAlertProcessing();
+        msg.severeAlertCompatible = true;
+      }
+
+      this.newRegion.getDistributionManager().putOutgoing(msg);
+      // this was in a while() loop, which is incorrect use of a reply processor.
+      // Reply procs are deregistered when they return from waitForReplies
-        replyProc.waitForRepliesUninterruptibly();
-        if (!replyProc.needRetry()) {
+        // Don't allow a region to be created if the distributed system is
+        // disconnecting
+        this.newRegion.getCache().getCancelCriterion().checkCancelInProgress(null);
+
+        // This isn't right. We should disable region creation in general, not just
+        // the remote case here...
+        // // Similarly, don't allow new regions to be created if the cache is closing
+        // GemFireCache cache = (GemFireCache)this.newRegion.getCache();
+        // if (cache.isClosing()) {
+        // throw new CacheClosedException("Cannot create a region when the cache is closing");
+        // }
+        try {
+          replyProc.waitForRepliesUninterruptibly();
+          if (!replyProc.needRetry()) {
+            break;
+          }
+        } catch (ReplyException e) {
+          Throwable t = e.getCause();
+          if (t instanceof IllegalStateException) {
+            // region is incompatible with region in another cache
+            throw (IllegalStateException) t;
+          }
+          e.handleAsUnexpected();
-      }
-      catch (ReplyException e) {
-        Throwable t = e.getCause();
-        if (t instanceof IllegalStateException) {
-          // region is incompatible with region in another cache
-          throw (IllegalStateException)t;
+      } finally {
+        replyProc.cleanup();
+        EventTracker tracker = ((LocalRegion) this.newRegion).getEventTracker();
+        if (tracker != null) {
+          tracker.setInitialized();
-        e.handleAsUnexpected();
-        break;
-      }
-    } finally {
-      replyProc.cleanup();
-      EventTracker tracker = ((LocalRegion)this.newRegion).getEventTracker();
-      if (tracker != null) {
-        tracker.setInitialized();
-      }
-      if (((LocalRegion)this.newRegion).isUsedForPartitionedRegionBucket()) {
-        if (logger.isDebugEnabled()) {
-          logger.debug("initialized bucket event tracker: {}", tracker);
+        if (((LocalRegion) this.newRegion).isUsedForPartitionedRegionBucket()) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("initialized bucket event tracker: {}", tracker);
+          }
-    }
-   this.newRegion.getDistributionAdvisor().setInitialized();
+    this.newRegion.getDistributionAdvisor().setInitialized();
-    }
-    else {
+    } else {
-  
-  
+
+
-      return ((BucketRegion)this.newRegion).getBucketAdvisor().adviseProfileExchange();
+      return ((BucketRegion) this.newRegion).getBucketAdvisor().adviseProfileExchange();
-  protected CreateRegionMessage getCreateRegionMessage(Set recps,
-                                 ReplyProcessor21 proc, boolean useMcast) {
+  protected CreateRegionMessage getCreateRegionMessage(Set recps, ReplyProcessor21 proc,
+      boolean useMcast) {
-    msg.profile = (CacheProfile)this.newRegion.getProfile();
+    msg.profile = (CacheProfile) this.newRegion.getProfile();
-  
+
-    
+
-  
-  class CreateRegionReplyProcessor extends ReplyProcessor21  {
+
+  class CreateRegionReplyProcessor extends ReplyProcessor21 {
-      super((InternalDistributedSystem)CreateRegionProcessor.this.newRegion.
-               getCache().getDistributedSystem(),
-             members);
+      super((InternalDistributedSystem) CreateRegionProcessor.this.newRegion.getCache()
+          .getDistributedSystem(), members);
-    
+
-     * guards application of event state to the region so that we deserialize
-     * and apply event state only once
+     * guards application of event state to the region so that we deserialize and apply event state
+     * only once
-    
+
-     * true if all members skipped CreateRegionMessage#checkCompatibility(),
-     * in which case CreateRegionMessage should be retried.
+     * true if all members skipped CreateRegionMessage#checkCompatibility(), in which case
+     * CreateRegionMessage should be retried.
-                        "CreateRegionProcessor is unable to process message of type " +
-                        msg.getClass());
-      CreateRegionReplyMessage reply = (CreateRegionReplyMessage)msg;
-      LocalRegion lr = (LocalRegion)newRegion;
+          "CreateRegionProcessor is unable to process message of type " + msg.getClass());
+      CreateRegionReplyMessage reply = (CreateRegionReplyMessage) msg;
+      LocalRegion lr = (LocalRegion) newRegion;
-    try {
-     if (reply.profile != null) {
-       if (newRegion instanceof DistributedRegion) {
-         DistributedRegion dr = (DistributedRegion) newRegion;
-         if (!dr.getDataPolicy().withPersistence() && reply.profile.isPersistent) {
-           dr.setGeneratedVersionTag(false);
-         }
-       }
-       if (CreateRegionMessage.isLocalAccessor(newRegion) && reply.profile.isPersistent) {
-         lr.enableConcurrencyChecks();
-       }
+      try {
+        if (reply.profile != null) {
+          if (newRegion instanceof DistributedRegion) {
+            DistributedRegion dr = (DistributedRegion) newRegion;
+            if (!dr.getDataPolicy().withPersistence() && reply.profile.isPersistent) {
+              dr.setGeneratedVersionTag(false);
+            }
+          }
+          if (CreateRegionMessage.isLocalAccessor(newRegion) && reply.profile.isPersistent) {
+            lr.enableConcurrencyChecks();
+          }
-       CacheDistributionAdvisor cda = CreateRegionProcessor.this.newRegion.getCacheDistributionAdvisor();
-       cda.putProfile(reply.profile);
-       if (reply.bucketProfiles != null) {
-         RegionAdvisor ra = (RegionAdvisor)cda;
-         ra.putBucketRegionProfiles(reply.bucketProfiles);
-       }
-       if (reply.eventState != null && lr.hasEventTracker()) {
-         synchronized(eventStateLock) {
-           if (!this.eventStateRecorded) {
-             this.eventStateRecorded = true;
-             Object eventState = null;
-             eventState = reply.eventState;
-             lr.recordEventState(reply.getSender(), (Map)eventState);
-           }
-         }
-       }
-       reply.eventState = null;
-       if (lr.isUsedForPartitionedRegionBucket()) {
-         ((BucketRegion)lr).updateEventSeqNum(reply.seqKeyForWan);
-       }
-       // Process any delta filter-profile messages received during profile
-       // exchange.
-       // The pending messages are queued in the local profile.
-       FilterProfile remoteFP = reply.profile.filterProfile;
-       if (remoteFP != null) {
-         FilterProfile localFP = ((LocalRegion)newRegion).filterProfile;
-         // localFP can be null and remoteFP not null when upgrading from 7.0.1.14 to 7.0.1.15
-         if (localFP != null) {
-         List messages = localFP.getQueuedFilterProfileMsgs(reply.getSender());
-         // Thread init level is set since region is used during CQ registration.
-         int oldLevel = LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT); 
-         try {
-           remoteFP.processQueuedFilterProfileMsgs(messages);
-         } finally {
-           LocalRegion.setThreadInitLevelRequirement(oldLevel);
-           localFP.removeQueuedFilterProfileMsgs(reply.getSender());
-         }
-         }
-       }
+          CacheDistributionAdvisor cda =
+              CreateRegionProcessor.this.newRegion.getCacheDistributionAdvisor();
+          cda.putProfile(reply.profile);
+          if (reply.bucketProfiles != null) {
+            RegionAdvisor ra = (RegionAdvisor) cda;
+            ra.putBucketRegionProfiles(reply.bucketProfiles);
+          }
+          if (reply.eventState != null && lr.hasEventTracker()) {
+            synchronized (eventStateLock) {
+              if (!this.eventStateRecorded) {
+                this.eventStateRecorded = true;
+                Object eventState = null;
+                eventState = reply.eventState;
+                lr.recordEventState(reply.getSender(), (Map) eventState);
+              }
+            }
+          }
+          reply.eventState = null;
+          if (lr.isUsedForPartitionedRegionBucket()) {
+            ((BucketRegion) lr).updateEventSeqNum(reply.seqKeyForWan);
+          }
+          // Process any delta filter-profile messages received during profile
+          // exchange.
+          // The pending messages are queued in the local profile.
+          FilterProfile remoteFP = reply.profile.filterProfile;
+          if (remoteFP != null) {
+            FilterProfile localFP = ((LocalRegion) newRegion).filterProfile;
+            // localFP can be null and remoteFP not null when upgrading from 7.0.1.14 to 7.0.1.15
+            if (localFP != null) {
+              List messages = localFP.getQueuedFilterProfileMsgs(reply.getSender());
+              // Thread init level is set since region is used during CQ registration.
+              int oldLevel = LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
+              try {
+                remoteFP.processQueuedFilterProfileMsgs(messages);
+              } finally {
+                LocalRegion.setThreadInitLevelRequirement(oldLevel);
+                localFP.removeQueuedFilterProfileMsgs(reply.getSender());
+              }
+            }
+          }
+        }
+        if (reply.destroyedId != null && newRegion instanceof DistributedRegion) {
+          DistributedRegion dr = (DistributedRegion) newRegion;
+          dr.getPersistenceAdvisor().removeMember(reply.destroyedId);
+        }
+        if (!reply.skippedCompatibilityChecks) {
+          allMembersSkippedChecks = false;
+        }
+      } finally {
+        // invoke super.process() even in case of exceptions (bug #41556)
+        if (logger.isDebugEnabled()) {
+          logger.debug("CreateRegionProcessor invoking super.process()");
+        }
+        super.process(msg);
-      if(reply.destroyedId != null && newRegion instanceof DistributedRegion) {
-        DistributedRegion dr = (DistributedRegion) newRegion;
-        dr.getPersistenceAdvisor().removeMember(reply.destroyedId);
-      }
-      if (!reply.skippedCompatibilityChecks) {
-        allMembersSkippedChecks = false;
-      }
-     } finally {
-       // invoke super.process() even in case of exceptions (bug #41556)
-       if (logger.isDebugEnabled()) {
-         logger.debug("CreateRegionProcessor invoking super.process()");
-       }
-       super.process(msg);
-     }
-     * IllegalStateException is an anticipated reply exception.  Receiving
-     * multiple replies with this exception is normal.
+     * IllegalStateException is an anticipated reply exception. Receiving multiple replies with this
+     * exception is normal.
-    implements MessageWithReply {
+      implements MessageWithReply {
-    
+
-      int oldLevel =         // Set thread local flag to allow entrance through initialization Latch
-        LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
+      int oldLevel = // Set thread local flag to allow entrance through initialization Latch
+          LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
-        
-        //Fix for bug 42051 - Discover any regions that are in the process
-        //of being destroyed
+
+        // Fix for bug 42051 - Discover any regions that are in the process
+        // of being destroyed
-        if(destroyingRegion != null) {
+        if (destroyingRegion != null) {
-        lclRgn = (LocalRegion)cache.getRegion(this.regionPath);
-        
+        lclRgn = (LocalRegion) cache.getRegion(this.regionPath);
+
-            if (!((BucketRegion)lclRgn).isPartitionedRegionOpen()) {
+            if (!((BucketRegion) lclRgn).isPartitionedRegionOpen()) {
-          handleCacheDistributionAdvisee((CacheDistributionAdvisee)lclRgn,true);
-        }
-        else {
+          handleCacheDistributionAdvisee((CacheDistributionAdvisee) lclRgn, true);
+        } else {
-                PartitionedRegionHelper.getProxyBucketRegion(cache, this.regionPath, false),
-                false);
-          }
-          else {
+                PartitionedRegionHelper.getProxyBucketRegion(cache, this.regionPath, false), false);
+          } else {
-              logger.debug("<lclRgn scope is not distributed. Scope={}> {}", lclRgn.getAttributes().getScope(), this);
+              logger.debug("<lclRgn scope is not distributed. Scope={}> {}",
+                  lclRgn.getAttributes().getScope(), this);
-      }
-      catch (PRLocallyDestroyedException fre) {
+      } catch (PRLocallyDestroyedException fre) {
-      }
-      catch (RegionDestroyedException e) {
+      } catch (RegionDestroyedException e) {
-      }
-      catch (CancelException e) {
+      } catch (CancelException e) {
-      }
-      catch (VirtualMachineError err) {
+      } catch (VirtualMachineError err) {
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-      }
-      catch (Throwable t) {
+      } catch (Throwable t) {
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
+        } else {
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.CreateRegionProcessor_MORE_THAN_ONE_EXCEPTION_THROWN_IN__0, this),
+              t);
-        else {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.CreateRegionProcessor_MORE_THAN_ONE_EXCEPTION_THROWN_IN__0, this), t);
-        }
-      }
-      finally {
+      } finally {
-        
+
-          replyMsg.seqKeyForWan = ((BucketRegion)lclRgn).getEventSeqNum().get();
+          replyMsg.seqKeyForWan = ((BucketRegion) lclRgn).getEventSeqNum().get();
-            logger.debug("While processing '{}', got exception, returning to sender", this, replyException);
+            logger.debug("While processing '{}', got exception, returning to sender", this,
+                replyException);
-        if(lclRgn instanceof PartitionedRegion)
-          ((PartitionedRegion)lclRgn).sendIndexCreationMsg(this.getSender());
-     
-        
+        if (lclRgn instanceof PartitionedRegion)
+          ((PartitionedRegion) lclRgn).sendIndexCreationMsg(this.getSender());
+
+
-    
+
-     * Attempts to process this message with the specified 
-     * <code>CacheDistributionAdvisee</code>.
+     * Attempts to process this message with the specified <code>CacheDistributionAdvisee</code>.
+     * 
-    private void handleCacheDistributionAdvisee(
-        CacheDistributionAdvisee cda, boolean isRealRegion) {
+    private void handleCacheDistributionAdvisee(CacheDistributionAdvisee cda,
+        boolean isRealRegion) {
-      }
-      else {
-        if (isRealRegion) {  // TODO do we need this if clause??
+      } else {
+        if (isRealRegion) { // TODO do we need this if clause??
-        
+
-          this.replyProfile = (CacheProfile)cda.getProfile();
+          this.replyProfile = (CacheProfile) cda.getProfile();
-            PartitionedRegion pr = (PartitionedRegion)cda;
+            PartitionedRegion pr = (PartitionedRegion) cda;
-          } else if (((LocalRegion)cda).isUsedForPartitionedRegionBucket()) {
-            this.eventState = ((LocalRegion)cda).getEventState();
+          } else if (((LocalRegion) cda).isUsedForPartitionedRegionBucket()) {
+            this.eventState = ((LocalRegion) cda).getEventState();
-    protected String checkCompatibility(CacheDistributionAdvisee rgn,
-                                        CacheProfile profile) {
+    protected String checkCompatibility(CacheDistributionAdvisee rgn, CacheProfile profile) {
-      
+
-      
-      if (!initializing && !skipCheckForAccessor && (rgn.getAttributes().getDataPolicy().withPersistence() 
-          != profile.dataPolicy.withPersistence())) {
+
+      if (!initializing && !skipCheckForAccessor && (rgn.getAttributes().getDataPolicy()
+          .withPersistence() != profile.dataPolicy.withPersistence())) {
-          result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_PERSISTANCE_TRUE_PERSISTENT_MEMBERS_B4_NON_PERSISTENT
-              .toLocalizedString(regionPath, myId);
+          result =
+              LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_PERSISTANCE_TRUE_PERSISTENT_MEMBERS_B4_NON_PERSISTENT
+                  .toLocalizedString(regionPath, myId);
-      
-      if (!initializing && !skipCheckForAccessor && !skipConcurrencyChecks && this.concurrencyChecksEnabled != otherCCEnabled) {
-        result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_CCENABLED_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_CCENABLED_2
-          .toLocalizedString( new Object[] { regionPath,
-              Boolean.valueOf(this.concurrencyChecksEnabled), myId, Boolean.valueOf(otherCCEnabled) } );
+
+      if (!initializing && !skipCheckForAccessor && !skipConcurrencyChecks
+          && this.concurrencyChecksEnabled != otherCCEnabled) {
+        result =
+            LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_CCENABLED_1_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_CCENABLED_2
+                .toLocalizedString(
+                    new Object[] {regionPath, Boolean.valueOf(this.concurrencyChecksEnabled), myId,
+                        Boolean.valueOf(otherCCEnabled)});
-      
-      Set<String> otherGatewaySenderIds = ((LocalRegion)rgn).getGatewaySenderIds();
+
+      Set<String> otherGatewaySenderIds = ((LocalRegion) rgn).getGatewaySenderIds();
-      if (!otherGatewaySenderIds
-          .equals(myGatewaySenderIds)) {
-        if (!rgn.getFullPath().contains( 
-            DynamicRegionFactoryImpl.dynamicRegionListName)) { 
-          result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_1_GATEWAY_SENDER_IDS_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_WITH_2_GATEWAY_SENDER_IDS
-            .toLocalizedString(this.regionPath, myGatewaySenderIds, otherGatewaySenderIds);
+      if (!otherGatewaySenderIds.equals(myGatewaySenderIds)) {
+        if (!rgn.getFullPath().contains(DynamicRegionFactoryImpl.dynamicRegionListName)) {
+          result =
+              LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_1_GATEWAY_SENDER_IDS_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_WITH_2_GATEWAY_SENDER_IDS
+                  .toLocalizedString(this.regionPath, myGatewaySenderIds, otherGatewaySenderIds);
-      
-      Set<String> otherAsynEventQueueIds = ((LocalRegion)rgn).getAsyncEventQueueIds();
+
+      Set<String> otherAsynEventQueueIds = ((LocalRegion) rgn).getAsyncEventQueueIds();
-      if (!isLocalOrRemoteAccessor(rgn, profile) && !otherAsynEventQueueIds
-          .equals(myAsyncEventQueueIds)) {
-        result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_1_ASYNC_EVENT_IDS_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_WITH_2_ASYNC_EVENT_IDS
-            .toLocalizedString(this.regionPath, myAsyncEventQueueIds, otherAsynEventQueueIds);
+      if (!isLocalOrRemoteAccessor(rgn, profile)
+          && !otherAsynEventQueueIds.equals(myAsyncEventQueueIds)) {
+        result =
+            LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_1_ASYNC_EVENT_IDS_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_WITH_2_ASYNC_EVENT_IDS
+                .toLocalizedString(this.regionPath, myAsyncEventQueueIds, otherAsynEventQueueIds);
-      
-      final PartitionAttributes pa = rgn.getAttributes()
-          .getPartitionAttributes();      
-      if (pa == null &&  profile.isPartitioned) {
-        result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_PARTITIONEDREGION_0_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_DEFINED_AS_A_NON_PARTITIONEDREGION.toLocalizedString( this.regionPath, myId );
-      } else if (pa != null &&  ! profile.isPartitioned) {
-        result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_THE_NON_PARTITIONEDREGION_0_BECAUSE_ANOTHER_CACHE_HAS_A_PARTITIONED_REGION_DEFINED_WITH_THE_SAME_NAME.toLocalizedString(this.regionPath, myId);
+
+      final PartitionAttributes pa = rgn.getAttributes().getPartitionAttributes();
+      if (pa == null && profile.isPartitioned) {
+        result =
+            LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_PARTITIONEDREGION_0_BECAUSE_ANOTHER_CACHE_HAS_THE_SAME_REGION_DEFINED_AS_A_NON_PARTITIONEDREGION
+                .toLocalizedString(this.regionPath, myId);
+      } else if (pa != null && !profile.isPartitioned) {
+        result =
+            LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_THE_NON_PARTITIONEDREGION_0_BECAUSE_ANOTHER_CACHE_HAS_A_PARTITIONED_REGION_DEFINED_WITH_THE_SAME_NAME
+                .toLocalizedString(this.regionPath, myId);
-          result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_1_SCOPE_BECAUSE_ANOTHER_CACHE_HAS_SAME_REGION_WITH_2_SCOPE.toLocalizedString( new Object[] {this.regionPath, profile.scope, myId, otherScope});
+          result =
+              LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_1_SCOPE_BECAUSE_ANOTHER_CACHE_HAS_SAME_REGION_WITH_2_SCOPE
+                  .toLocalizedString(
+                      new Object[] {this.regionPath, profile.scope, myId, otherScope});
-        
+
-      
+
-      if (!rgn.getAttributes().getDataPolicy().withStorage() || (pa != null && pa.getLocalMaxMemory() == 0)) {
+      if (!rgn.getAttributes().getDataPolicy().withStorage()
+          || (pa != null && pa.getLocalMaxMemory() == 0)) {
-          
-      if (!isRemoteAccessor(profile) && !thisIsRemoteAccessor && profile.isOffHeap != otherIsOffHeap) {
-        result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_OFF_HEAP_EQUALS_1_BECAUSE_ANOTHER_CACHE_2_HAS_SAME_THE_REGION_WITH_OFF_HEAP_EQUALS_3
-            .toLocalizedString(new Object[] { this.regionPath, profile.isOffHeap, myId, otherIsOffHeap });
+
+      if (!isRemoteAccessor(profile) && !thisIsRemoteAccessor
+          && profile.isOffHeap != otherIsOffHeap) {
+        result =
+            LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_OFF_HEAP_EQUALS_1_BECAUSE_ANOTHER_CACHE_2_HAS_SAME_THE_REGION_WITH_OFF_HEAP_EQUALS_3
+                .toLocalizedString(
+                    new Object[] {this.regionPath, profile.isOffHeap, myId, otherIsOffHeap});
-          CacheServiceProfile localProfile = ((LocalRegion) rgn).getCacheServiceProfile(remoteProfile.getId());
+          CacheServiceProfile localProfile =
+              ((LocalRegion) rgn).getCacheServiceProfile(remoteProfile.getId());
-        // Don't overwrite result with null in case it has already been set in a previous compatibility check.
+        // Don't overwrite result with null in case it has already been set in a previous
+        // compatibility check.
-        logger.debug("CreateRegionProcessor.checkCompatibility: this={}; other={}; result={}", rgn, profile, result);
+        logger.debug("CreateRegionProcessor.checkCompatibility: this={}; other={}; result={}", rgn,
+            profile, result);
-//       if (profile.membershipAttributes != null) {
-//         // check to see if:
-//         // 1. we do not have DataPolicy that will take queued msgs
-//         // 2. the profile has queuing turned on
-//         // 3. we are playing one of the queued roles
-//         if (!rgn.getAttributes().getDataPolicy().withQueuedMessages()) {
-//           if (profile.membershipAttributes.getLossAction().isAllAccessWithQueuing()) {
-//             Set myRoles = rgn.getSystem().getDistributedMember().getRoles();
-//             if (!myRoles.isEmpty()) {
-//               Set intersection = new HashSet(myRoles);
-//               intersection.retainAll(profile.membershipAttributes.getRequiredRoles());
-//               if (!intersection.isEmpty()) {
-//                 result = "Cannot create region " + regionPath
-//                   + " with queuing because the region already exists"
-//                   + " with a data-policy " + rgn.getAttributes().getDataPolicy()
-//                   + " that does not allow queued messages with the roles "
-//                   + intersection;
-//               }
-//             }
-//           }
-//         }
-//       } else {
-//         // see if we are queuing on this region
-//         MembershipAttributes ra = rgn.getMembershipAttributes();
-//         if (ra != null && ra.hasRequiredRoles()
-//             && ra.getLossAction().isAllAccessWithQueuing()) {
-//           // we are queuing so make sure this other guy allows queued messages
-//           // if he is playing a role we queue for.
-//           if (!profile.dataPolicy.withQueuedMessages()) {
-//             Set intersection = new HashSet(ra.getRequiredRoles());
-//             intersection.retainAll(profile.getDistributedMember().getRoles());
-//             if (!intersection.isEmpty()) {
-//               result = "Cannot create region " + regionPath
-//                 + " with a data-policy " + profile.dataPolicy
-//                 + " that does not allow queued messages because the region"
-//                 + " already exists with queuing enabled for roles " + intersection;
-//             }
-//           }
-//         }
-//       }
+      // if (profile.membershipAttributes != null) {
+      // // check to see if:
+      // // 1. we do not have DataPolicy that will take queued msgs
+      // // 2. the profile has queuing turned on
+      // // 3. we are playing one of the queued roles
+      // if (!rgn.getAttributes().getDataPolicy().withQueuedMessages()) {
+      // if (profile.membershipAttributes.getLossAction().isAllAccessWithQueuing()) {
+      // Set myRoles = rgn.getSystem().getDistributedMember().getRoles();
+      // if (!myRoles.isEmpty()) {
+      // Set intersection = new HashSet(myRoles);
+      // intersection.retainAll(profile.membershipAttributes.getRequiredRoles());
+      // if (!intersection.isEmpty()) {
+      // result = "Cannot create region " + regionPath
+      // + " with queuing because the region already exists"
+      // + " with a data-policy " + rgn.getAttributes().getDataPolicy()
+      // + " that does not allow queued messages with the roles "
+      // + intersection;
+      // }
+      // }
+      // }
+      // }
+      // } else {
+      // // see if we are queuing on this region
+      // MembershipAttributes ra = rgn.getMembershipAttributes();
+      // if (ra != null && ra.hasRequiredRoles()
+      // && ra.getLossAction().isAllAccessWithQueuing()) {
+      // // we are queuing so make sure this other guy allows queued messages
+      // // if he is playing a role we queue for.
+      // if (!profile.dataPolicy.withQueuedMessages()) {
+      // Set intersection = new HashSet(ra.getRequiredRoles());
+      // intersection.retainAll(profile.getDistributedMember().getRoles());
+      // if (!intersection.isEmpty()) {
+      // result = "Cannot create region " + regionPath
+      // + " with a data-policy " + profile.dataPolicy
+      // + " that does not allow queued messages because the region"
+      // + " already exists with queuing enabled for roles " + intersection;
+      // }
+      // }
+      // }
+      // }
-     * When many members are started concurrently, it is possible that an
-     * accessor or non-version generating replicate receives CreateRegionMessage
-     * before it is initialized, thus preventing persistent members from
-     * starting. We skip compatibilityChecks if the region is not initialized,
-     * and let other members check compatibility. If all members
-     * skipCompatabilit checks, then the CreateRegionMessage should be retried.
-     * fixes #45186
+     * When many members are started concurrently, it is possible that an accessor or non-version
+     * generating replicate receives CreateRegionMessage before it is initialized, thus preventing
+     * persistent members from starting. We skip compatibilityChecks if the region is not
+     * initialized, and let other members check compatibility. If all members skipCompatabilit
+     * checks, then the CreateRegionMessage should be retried. fixes #45186
-     * For internal regions skip concurrency-checks-enabled checks, since we will
-     * set it to true after profile exchange if required.
+     * For internal regions skip concurrency-checks-enabled checks, since we will set it to true
+     * after profile exchange if required.
-     * check for isLocalOrRemoteAccessor(CacheDistributionAdvisee, CacheProfile)
-     * and check if DistributedRegion does not generate entry versions.
+     * check for isLocalOrRemoteAccessor(CacheDistributionAdvisee, CacheProfile) and check if
+     * DistributedRegion does not generate entry versions.
-     * @return true if profile being exchanged or region is an accessor
-     * i.e has no storage
+     * @return true if profile being exchanged or region is an accessor i.e has no storage
-    
+
-          && region.getAttributes().getPartitionAttributes()
-              .getLocalMaxMemory() == 0) {
+          && region.getAttributes().getPartitionAttributes().getLocalMaxMemory() == 0) {
-    
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-   }
+  }
-    /** Added to fix 42051. If the region is in the middle of being destroyed, return the destroyed profile */
+    /**
+     * Added to fix 42051. If the region is in the middle of being destroyed, return the destroyed
+     * profile
+     */
-    
+
-    
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      }
-      else {
+      } else {
-        for (int i=0; i < size; i++) {
-          RegionAdvisor.BucketProfileAndId bp =
-            new RegionAdvisor.BucketProfileAndId();
+        for (int i = 0; i < size; i++) {
+          RegionAdvisor.BucketProfileAndId bp = new RegionAdvisor.BucketProfileAndId();
-      if(in.readBoolean()) {
+      if (in.readBoolean()) {
-      }
-      else {
+      } else {
-          RegionAdvisor.BucketProfileAndId bp = (RegionAdvisor.BucketProfileAndId)
-            this.bucketProfiles.get(i);
+          RegionAdvisor.BucketProfileAndId bp =
+              (RegionAdvisor.BucketProfileAndId) this.bucketProfiles.get(i);
-        //The isHARegion flag is false here because
-        //we currently only include the event state in the profile 
-        //for bucket regions.
+        // The isHARegion flag is false here because
+        // we currently only include the event state in the profile
+        // for bucket regions.
-      if(this.destroyedId != null) {
+      if (this.destroyedId != null) {
-        buff.append("; with exception {")
-          .append(getException().getMessage()).append("}");
+        buff.append("; with exception {").append(getException().getMessage()).append("}");
