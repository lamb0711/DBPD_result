Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  public LocalResultCollectorImpl(Function function, ResultCollector rc,
-      Execution execution) {
+  public LocalResultCollectorImpl(Function function, ResultCollector rc, Execution execution) {
-    this.execution = (AbstractExecution)execution;
+    this.execution = (AbstractExecution) execution;
-  public synchronized void addResult(DistributedMember memberID,
-      Object resultOfSingleExecution) {
+  public synchronized void addResult(DistributedMember memberID, Object resultOfSingleExecution) {
-        Throwable t = (Throwable)resultOfSingleExecution;
+        Throwable t = (Throwable) resultOfSingleExecution;
-          if(t.getCause() != null){
+          if (t.getCause() != null) {
-              if(resultOfSingleExecution instanceof FunctionInvocationTargetException){
+              if (resultOfSingleExecution instanceof FunctionInvocationTargetException) {
-              }
-              else if (resultOfSingleExecution instanceof FunctionException) {
-                this.functionException = (FunctionException)resultOfSingleExecution;
+              } else if (resultOfSingleExecution instanceof FunctionException) {
+                this.functionException = (FunctionException) resultOfSingleExecution;
-              }
-              else {
+              } else {
-          }
-          else {
+          } else {
-      }
-      else {
+      } else {
-    resultsCleared = true ;
+    resultsCleared = true;
-          LocalizedStrings.ExecuteFunction_RESULTS_ALREADY_COLLECTED
-              .toLocalizedString());
+          LocalizedStrings.ExecuteFunction_RESULTS_ALREADY_COLLECTED.toLocalizedString());
-    }
-    catch (InterruptedException e) {
+    } catch (InterruptedException e) {
-        if (this.functionException.getCause() instanceof InternalFunctionInvocationTargetException) {
+        if (this.functionException
+            .getCause() instanceof InternalFunctionInvocationTargetException) {
-          }
-          else {
+          } else {
-    }
-    else {
+    } else {
-          LocalizedStrings.ExecuteFunction_RESULTS_ALREADY_COLLECTED
-              .toLocalizedString());
+          LocalizedStrings.ExecuteFunction_RESULTS_ALREADY_COLLECTED.toLocalizedString());
-    }
-    catch (InterruptedException e) {
+    } catch (InterruptedException e) {
-        if (this.functionException.getCause() instanceof InternalFunctionInvocationTargetException) {
+        if (this.functionException
+            .getCause() instanceof InternalFunctionInvocationTargetException) {
-          }
-          else {
+          } else {
-    }
-    else {
+    } else {
-      this.functionException = (FunctionException)exception;
-    }
-    else {
+      this.functionException = (FunctionException) exception;
+    } else {
