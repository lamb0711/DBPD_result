Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-public class ClientDataSerializerMessage  extends ClientUpdateMessageImpl{
+public class ClientDataSerializerMessage extends ClientUpdateMessageImpl {
-  
-  public ClientDataSerializerMessage(EnumListenerEvent operation,
-      byte[][] dataSerializer, ClientProxyMembershipID memberId,
-      EventID eventIdentifier, Class[][] supportedClasses) {
+
+  public ClientDataSerializerMessage(EnumListenerEvent operation, byte[][] dataSerializer,
+      ClientProxyMembershipID memberId, EventID eventIdentifier, Class[][] supportedClasses) {
-  
+
-  public boolean shouldBeConflated()
-  {
+  public boolean shouldBeConflated() {
-  
+
-   * @param latestValue
-   *                byte[] containing the latest value to use. This could be the
-   *                original value if conflation is not enabled, or it could be
-   *                a conflated value if conflation is enabled.
+   * @param latestValue byte[] containing the latest value to use. This could be the original value
+   *        if conflation is not enabled, or it could be a conflated value if conflation is enabled.
-  protected Message getMessage(CacheClientProxy proxy, byte[] latestValue)
-    throws IOException {
+  protected Message getMessage(CacheClientProxy proxy, byte[] latestValue) throws IOException {
-      throw new IOException(
-          "Unsupported client version for server-to-client message creation: "
-              + proxy.getVersion());
+      throw new IOException("Unsupported client version for server-to-client message creation: "
+          + proxy.getVersion());
-    // part  0: serializer1 classname
-    // part  1: serializer1 id
-    // part  2: serializer1 number of supported classes  --|
-    // part  3: serializer1 supported class1 name          |
-    // part  4: serializer1 supported class2 name          |---> additional parts since 6.5.1.6
-    // part  5: serializer1 supported classN name        --|
-    // part  6: serializer2 classname
-    // part  7: serializer2 id
-    // part  8: serializer2 number of supported classes
-    // part  9: serializer2 supported class1 name
+    // part 0: serializer1 classname
+    // part 1: serializer1 id
+    // part 2: serializer1 number of supported classes --|
+    // part 3: serializer1 supported class1 name |
+    // part 4: serializer1 supported class2 name |---> additional parts since 6.5.1.6
+    // part 5: serializer1 supported classN name --|
+    // part 6: serializer2 classname
+    // part 7: serializer2 id
+    // part 8: serializer2 number of supported classes
+    // part 9: serializer2 supported class1 name
-    //          ...
+    // ...
-//    this._logger.fine("Number of parts for ClientDataSerializerMessage: "
-//        + numOfParts + ", with eventID: " + this.getEventId());
+    // this._logger.fine("Number of parts for ClientDataSerializerMessage: "
+    // + numOfParts + ", with eventID: " + this.getEventId());
-      message.addBytesPart(this.serializedDataSerializer[i]);      // part 0
-      message.addBytesPart(this.serializedDataSerializer[i + 1]);  // part 1
+      message.addBytesPart(this.serializedDataSerializer[i]); // part 0
+      message.addBytesPart(this.serializedDataSerializer[i + 1]); // part 1
-      int numOfClasses = this.supportedClasses[i/2].length;
+      int numOfClasses = this.supportedClasses[i / 2].length;
-          classBytes[j] = CacheServerHelper.serialize(this.supportedClasses[i/2][j].getName());
+          classBytes[j] = CacheServerHelper.serialize(this.supportedClasses[i / 2][j].getName());
-      message.addIntPart(numOfClasses);  // part 2
+      message.addIntPart(numOfClasses); // part 2
-        message.addBytesPart(classBytes[j]);  // part 3 onwards
+        message.addBytesPart(classBytes[j]); // part 3 onwards
-    message.addObjPart(this.getEventId());  // last part
+    message.addObjPart(this.getEventId()); // last part
-   * @throws IOException
-   *                 If this serializer cannot write an object to
-   *                 <code>out</code>.
+   * @throws IOException If this serializer cannot write an object to <code>out</code>.
-    
+
-   * @throws IOException
-   *                 If this serializer cannot read an object from
-   *                 <code>in</code>.
-   * @throws ClassNotFoundException
-   *                 If the class for an object being restored cannot be found.
+   * @throws IOException If this serializer cannot read an object from <code>in</code>.
+   * @throws ClassNotFoundException If the class for an object being restored cannot be found.
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    int dataSerializerCount = in.readInt(); 
+    int dataSerializerCount = in.readInt();
-    _eventIdentifier = (EventID)DataSerializer.readObject(in);
+    _eventIdentifier = (EventID) DataSerializer.readObject(in);
-  public Object getKeyToConflate()
-  {
+  public Object getKeyToConflate() {
-  public String getRegionToConflate()
-  {
+  public String getRegionToConflate() {
-  public Object getValueToConflate()
-  {
+  public Object getValueToConflate() {
-  public void setLatestValue(Object value)
-  {
-  }
+  public void setLatestValue(Object value) {}
-  public String toString()
-  {
+  public String toString() {
-    buffer.append("ClientDataSerializerMessage[").append(";value=").append(
-        (Arrays.toString(this.serializedDataSerializer))).append(";memberId=").append(
-        getMembershipId()).append(";eventId=").append(getEventId()).append("]");
+    buffer.append("ClientDataSerializerMessage[").append(";value=")
+        .append((Arrays.toString(this.serializedDataSerializer))).append(";memberId=")
+        .append(getMembershipId()).append(";eventId=").append(getEventId()).append("]");
