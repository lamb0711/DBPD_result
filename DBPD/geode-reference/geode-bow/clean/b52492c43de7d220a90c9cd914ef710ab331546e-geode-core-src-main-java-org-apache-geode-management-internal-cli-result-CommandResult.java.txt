GEODE-5069: Reduce direct exposure of GfJsonObject from CommandResult (#1795)

- Methods getGfJsonObject() and getTableContent() are now private.
- getContent() is still public but only used by CommandResponseBuilder. This
  will change in subsequent PRs.
+import java.util.LinkedHashMap;
+import java.util.Map;
+import org.json.JSONObject;
-  GfJsonObject getGfJsonObject() {
+  private GfJsonObject getGfJsonObject() {
+  public String getContentAsString() {
+    return getContent().toString();
+  }
+
+  public String getMessageFromContent() {
+    return getContent().getString("message");
+  }
+
+  public String getValueFromContent(String key) {
+    return getContent().get(key).toString();
+  }
+
+  public List<String> getListFromContent(String key) {
+    return getContent().getArrayValues(key);
+  }
+
+  public List<String> getColumnFromTableContent(String column, int... sectionAndTableIDs) {
+    List<String> ids =
+        Arrays.stream(sectionAndTableIDs).mapToObj(Integer::toString).collect(Collectors.toList());
+    return CommandResult.toList(
+        getTableContent(ids.toArray(new String[0])).getInternalJsonObject().getJSONArray(column));
+  }
+
+  public Map<String, List<String>> getMapFromTableContent(int... sectionAndTableIDs) {
+    Map<String, List<String>> result = new LinkedHashMap<>();
+
+    List<String> ids =
+        Arrays.stream(sectionAndTableIDs).mapToObj(Integer::toString).collect(Collectors.toList());
+    JSONObject table = getTableContent(ids.toArray(new String[0])).getInternalJsonObject();
+    for (String column : table.keySet()) {
+      result.put(column, CommandResult.toList(table.getJSONArray(column)));
+    }
+
+    return result;
+  }
+
+  public Map<String, List<String>> getMapFromTableContent(String... sectionAndTableIDs) {
+    Map<String, List<String>> result = new LinkedHashMap<>();
+
+    JSONObject table = getTableContent(sectionAndTableIDs).getInternalJsonObject();
+    for (String column : table.keySet()) {
+      result.put(column, CommandResult.toList(table.getJSONArray(column)));
+    }
+
+    return result;
+  }
+
+  public Map<String, String> getMapFromSection(String sectionID) {
+    Map<String, String> result = new LinkedHashMap<>();
+    GfJsonObject obj = getContent().getJSONObject("__sections__-" + sectionID);
+
+    Iterator<String> iter = obj.keys();
+    while (iter.hasNext()) {
+      String key = iter.next();
+      result.put(key, obj.getString(key));
+    }
+
+    return result;
+  }
+
-  public GfJsonObject getTableContent() {
-    return getTableContent(0, 0);
+  private GfJsonObject getTableContent() {
+    return getTableContent("0", "0");
-  public GfJsonObject getTableContent(int... sectionAndTableIDs) {
+  private GfJsonObject getTableContent(String... sectionAndTableIDs) {
-      int idx = sectionAndTableIDs[i];
+      String idx = sectionAndTableIDs[i];
-    int tableId = sectionAndTableIDs[sectionAndTableIDs.length - 1];
+    String tableId = sectionAndTableIDs[sectionAndTableIDs.length - 1];
