GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security

+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
+
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
-import org.apache.geode.management.cli.CliMetaData;
-import org.apache.geode.management.internal.cli.result.CommandResultException;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-import java.util.concurrent.atomic.AtomicReference;
+import org.apache.geode.security.ResourcePermission.Target;
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE, target = Target.JAR)
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+    if (persistent) {
+      getSecurityService().authorize(Resource.CLUSTER, Operation.WRITE, Target.DISK);
+    }
-        for (int i = 0; i < listenerParamsAndValues.length; i++) {
-          final int hashPosition = listenerParamsAndValues[i].indexOf('#');
+        for (String listenerParamsAndValue : listenerParamsAndValues) {
+          final int hashPosition = listenerParamsAndValue.indexOf('#');
-            listenerProperties.put(listenerParamsAndValues[i], "");
+            listenerProperties.put(listenerParamsAndValue, "");
-            listenerProperties.put(listenerParamsAndValues[i].substring(0, hashPosition),
-                listenerParamsAndValues[i].substring(hashPosition + 1));
+            listenerProperties.put(listenerParamsAndValue.substring(0, hashPosition),
+                listenerParamsAndValue.substring(hashPosition + 1));
-          for (int i = 0; i < details.length; i++) {
+          for (AsyncEventQueueDetails detail : details) {
-            tabularData.accumulate("ID", details[i].getId());
-            tabularData.accumulate("Batch Size", details[i].getBatchSize());
-            tabularData.accumulate("Persistent", details[i].isPersistent());
-            tabularData.accumulate("Disk Store", details[i].getDiskStoreName());
-            tabularData.accumulate("Max Memory", details[i].getMaxQueueMemory());
+            tabularData.accumulate("ID", detail.getId());
+            tabularData.accumulate("Batch Size", detail.getBatchSize());
+            tabularData.accumulate("Persistent", detail.isPersistent());
+            tabularData.accumulate("Disk Store", detail.getDiskStoreName());
+            tabularData.accumulate("Max Memory", detail.getMaxQueueMemory());
-            Properties listenerProperties = details[i].getListenerProperties();
+            Properties listenerProperties = detail.getListenerProperties();
-              tabularData.accumulate("Listener", details[i].getListener());
+              tabularData.accumulate("Listener", detail.getListener());
-                  details[i].getListener() + propsStringBuilder.toString());
+                  detail.getListener() + propsStringBuilder.toString());
