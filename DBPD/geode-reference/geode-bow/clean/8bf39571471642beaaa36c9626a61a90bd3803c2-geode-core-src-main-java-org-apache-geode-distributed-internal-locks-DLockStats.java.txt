Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class maintains statistics in GemFire about the distributed lock 
- * service.
+ * This class maintains statistics in GemFire about the distributed lock service.
-  //   Statistic "Id" Fields
+  // Statistic "Id" Fields
-  private final static int grantorsId;  
-  private final static int servicesId;  
+  private final static int grantorsId;
+  private final static int servicesId;
-  private final static int serialQueueSizeId;  
+  private final static int serialQueueSizeId;
-  private final static int waitingQueueSizeId;  
+  private final static int waitingQueueSizeId;
-  private final static int pendingRequestsId;  
+  private final static int pendingRequestsId;
-  private final static int destroyReadsId;  
-  private final static int destroyWritesId;  
+  private final static int destroyReadsId;
+  private final static int destroyWritesId;
-  private final static int becomeGrantorRequestsId;  
+  private final static int becomeGrantorRequestsId;
-  
+
-    final String requestQueuesDesc = "The current number of lock request queues used by this system member.";
-    final String serialQueueSizeDesc = "The number of serial distribution messages currently waiting to be processed.";
-    final String serialThreadsDesc = "The number of threads currently processing serial/ordered messages.";
-    final String waitingQueueSizeDesc = "The number of distribution messages currently waiting for some other resource before they can be processed.";
-    final String waitingThreadsDesc = "The number of threads currently processing messages that had to wait for a resource.";
-    final String lockWaitsInProgressDesc = "Current number of threads waiting for a distributed lock.";
-    final String lockWaitsCompletedDesc = "Total number of times distributed lock wait has completed by successfully obtained the lock.";
-    final String lockWaitTimeDesc = "Total time spent waiting for a distributed lock that was obtained.";
-    final String lockWaitsFailedDesc = "Total number of times distributed lock wait has completed by failing to obtain the lock.";
-    final String lockWaitFailedTimeDesc = "Total time spent waiting for a distributed lock that we failed to obtain.";
-    final String grantWaitsInProgressDesc = "Current number of distributed lock requests being granted.";
-    final String grantWaitsCompletedDesc = "Total number of times granting of a lock request has completed by successfully granting the lock.";
+    final String requestQueuesDesc =
+        "The current number of lock request queues used by this system member.";
+    final String serialQueueSizeDesc =
+        "The number of serial distribution messages currently waiting to be processed.";
+    final String serialThreadsDesc =
+        "The number of threads currently processing serial/ordered messages.";
+    final String waitingQueueSizeDesc =
+        "The number of distribution messages currently waiting for some other resource before they can be processed.";
+    final String waitingThreadsDesc =
+        "The number of threads currently processing messages that had to wait for a resource.";
+    final String lockWaitsInProgressDesc =
+        "Current number of threads waiting for a distributed lock.";
+    final String lockWaitsCompletedDesc =
+        "Total number of times distributed lock wait has completed by successfully obtained the lock.";
+    final String lockWaitTimeDesc =
+        "Total time spent waiting for a distributed lock that was obtained.";
+    final String lockWaitsFailedDesc =
+        "Total number of times distributed lock wait has completed by failing to obtain the lock.";
+    final String lockWaitFailedTimeDesc =
+        "Total time spent waiting for a distributed lock that we failed to obtain.";
+    final String grantWaitsInProgressDesc =
+        "Current number of distributed lock requests being granted.";
+    final String grantWaitsCompletedDesc =
+        "Total number of times granting of a lock request has completed by successfully granting the lock.";
-    final String grantWaitsNotGrantorDesc = "Total number of times granting of lock request failed because not grantor.";
-    final String grantWaitNotGrantorTimeDesc = "Total time spent granting of lock requests that failed because not grantor.";
-    final String grantWaitsTimeoutDesc = "Total number of times granting of lock request failed because timeout.";
-    final String grantWaitTimeoutTimeDesc = "Total time spent granting of lock requests that failed because timeout.";
-    final String grantWaitsNotHolderDesc = "Total number of times granting of lock request failed because reentrant was not holder.";
-    final String grantWaitNotHolderTimeDesc = "Total time spent granting of lock requests that failed because reentrant was not holder.";
-    final String grantWaitsFailedDesc = "Total number of times granting of lock request failed because try locks failed.";
-    final String grantWaitFailedTimeDesc = "Total time spent granting of lock requests that failed because try locks failed.";
-    final String grantWaitsSuspendedDesc = "Total number of times granting of lock request failed because lock service was suspended.";
-    final String grantWaitSuspendedTimeDesc = "Total time spent granting of lock requests that failed because lock service was suspended.";
-    final String grantWaitsDestroyedDesc = "Total number of times granting of lock request failed because lock service was destroyed.";
-    final String grantWaitDestroyedTimeDesc = "Total time spent granting of lock requests that failed because lock service was destroyed.";
-    final String createGrantorsInProgressDesc = "Current number of initial grantors being created in this process.";
-    final String createGrantorsCompletedDesc = "Total number of initial grantors created in this process.";
-    final String createGrantorTimeDesc = "Total time spent waiting create the intial grantor for lock services.";
-    final String serviceCreatesInProgressDesc = "Current number of lock services being created in this process.";
-    final String serviceCreatesCompletedDesc = "Total number of lock services created in this process.";
-    final String serviceCreateLatchTimeDesc = "Total time spent creating lock services before releasing create latches.";
-    final String serviceInitLatchTimeDesc = "Total time spent creating lock services before releasing init latches.";
-    final String grantorWaitsInProgressDesc = "Current number of threads waiting for grantor latch to open.";
-    final String grantorWaitsCompletedDesc = "Total number of times waiting threads completed waiting for the grantor latch to open.";
-    final String grantorWaitTimeDesc = "Total time spent waiting for the grantor latch which resulted in success.";
-    final String grantorWaitsFailedDesc = "Total number of times waiting threads failed to finish waiting for the grantor latch to open.";
-    final String grantorWaitFailedTimeDesc = "Total time spent waiting for the grantor latch which resulted in failure.";
-    final String grantorThreadsInProgressDesc = "Current iterations of work performed by grantor thread(s).";
-    final String grantorThreadsCompletedDesc = "Total number of iterations of work performed by grantor thread(s).";
-    final String grantorThreadExpireAndGrantLocksTimeDesc = "Total time spent by grantor thread(s) performing expireAndGrantLocks tasks.";
-    final String grantorThreadHandleRequestTimeoutsTimeDesc = "Total time spent by grantor thread(s) performing handleRequestTimeouts tasks.";
-    final String grantorThreadRemoveUnusedTokensTimeDesc = "Total time spent by grantor thread(s) performing removeUnusedTokens tasks.";
-    final String grantorThreadTimeDesc = "Total time spent by grantor thread(s) performing all grantor tasks.";
-    final String pendingRequestsDesc = "The current number of pending lock requests queued by grantors in this process.";
-    final String destroyReadWaitsInProgressDesc = "Current number of threads waiting for a DLockService destroy read lock.";
-    final String destroyReadWaitsCompletedDesc = "Total number of times a DLockService destroy read lock wait has completed successfully.";
-    final String destroyReadWaitTimeDesc = "Total time spent waiting for a DLockService destroy read lock that was obtained.";
-    final String destroyReadWaitsFailedDesc = "Total number of times a DLockService destroy read lock wait has completed unsuccessfully.";
-    final String destroyReadWaitFailedTimeDesc = "Total time spent waiting for a DLockService destroy read lock that was not obtained.";
-    final String destroyWriteWaitsInProgressDesc = "Current number of thwrites waiting for a DLockService destroy write lock.";
-    final String destroyWriteWaitsCompletedDesc = "Total number of times a DLockService destroy write lock wait has completed successfully.";
-    final String destroyWriteWaitTimeDesc = "Total time spent waiting for a DLockService destroy write lock that was obtained.";
-    final String destroyWriteWaitsFailedDesc = "Total number of times a DLockService destroy write lock wait has completed unsuccessfully.";
-    final String destroyWriteWaitFailedTimeDesc = "Total time spent waiting for a DLockService destroy write lock that was not obtained.";
-    final String destroyReadsDesc = "The current number of DLockService destroy read locks held by this process.";
-    final String destroyWritesDesc = "The current number of DLockService destroy write locks held by this process.";
-    final String lockReleasesInProgressDesc = "Current number of threads releasing a distributed lock.";
-    final String lockReleasesCompletedDesc = "Total number of times distributed lock release has completed.";
+    final String grantWaitsNotGrantorDesc =
+        "Total number of times granting of lock request failed because not grantor.";
+    final String grantWaitNotGrantorTimeDesc =
+        "Total time spent granting of lock requests that failed because not grantor.";
+    final String grantWaitsTimeoutDesc =
+        "Total number of times granting of lock request failed because timeout.";
+    final String grantWaitTimeoutTimeDesc =
+        "Total time spent granting of lock requests that failed because timeout.";
+    final String grantWaitsNotHolderDesc =
+        "Total number of times granting of lock request failed because reentrant was not holder.";
+    final String grantWaitNotHolderTimeDesc =
+        "Total time spent granting of lock requests that failed because reentrant was not holder.";
+    final String grantWaitsFailedDesc =
+        "Total number of times granting of lock request failed because try locks failed.";
+    final String grantWaitFailedTimeDesc =
+        "Total time spent granting of lock requests that failed because try locks failed.";
+    final String grantWaitsSuspendedDesc =
+        "Total number of times granting of lock request failed because lock service was suspended.";
+    final String grantWaitSuspendedTimeDesc =
+        "Total time spent granting of lock requests that failed because lock service was suspended.";
+    final String grantWaitsDestroyedDesc =
+        "Total number of times granting of lock request failed because lock service was destroyed.";
+    final String grantWaitDestroyedTimeDesc =
+        "Total time spent granting of lock requests that failed because lock service was destroyed.";
+    final String createGrantorsInProgressDesc =
+        "Current number of initial grantors being created in this process.";
+    final String createGrantorsCompletedDesc =
+        "Total number of initial grantors created in this process.";
+    final String createGrantorTimeDesc =
+        "Total time spent waiting create the intial grantor for lock services.";
+    final String serviceCreatesInProgressDesc =
+        "Current number of lock services being created in this process.";
+    final String serviceCreatesCompletedDesc =
+        "Total number of lock services created in this process.";
+    final String serviceCreateLatchTimeDesc =
+        "Total time spent creating lock services before releasing create latches.";
+    final String serviceInitLatchTimeDesc =
+        "Total time spent creating lock services before releasing init latches.";
+    final String grantorWaitsInProgressDesc =
+        "Current number of threads waiting for grantor latch to open.";
+    final String grantorWaitsCompletedDesc =
+        "Total number of times waiting threads completed waiting for the grantor latch to open.";
+    final String grantorWaitTimeDesc =
+        "Total time spent waiting for the grantor latch which resulted in success.";
+    final String grantorWaitsFailedDesc =
+        "Total number of times waiting threads failed to finish waiting for the grantor latch to open.";
+    final String grantorWaitFailedTimeDesc =
+        "Total time spent waiting for the grantor latch which resulted in failure.";
+    final String grantorThreadsInProgressDesc =
+        "Current iterations of work performed by grantor thread(s).";
+    final String grantorThreadsCompletedDesc =
+        "Total number of iterations of work performed by grantor thread(s).";
+    final String grantorThreadExpireAndGrantLocksTimeDesc =
+        "Total time spent by grantor thread(s) performing expireAndGrantLocks tasks.";
+    final String grantorThreadHandleRequestTimeoutsTimeDesc =
+        "Total time spent by grantor thread(s) performing handleRequestTimeouts tasks.";
+    final String grantorThreadRemoveUnusedTokensTimeDesc =
+        "Total time spent by grantor thread(s) performing removeUnusedTokens tasks.";
+    final String grantorThreadTimeDesc =
+        "Total time spent by grantor thread(s) performing all grantor tasks.";
+    final String pendingRequestsDesc =
+        "The current number of pending lock requests queued by grantors in this process.";
+    final String destroyReadWaitsInProgressDesc =
+        "Current number of threads waiting for a DLockService destroy read lock.";
+    final String destroyReadWaitsCompletedDesc =
+        "Total number of times a DLockService destroy read lock wait has completed successfully.";
+    final String destroyReadWaitTimeDesc =
+        "Total time spent waiting for a DLockService destroy read lock that was obtained.";
+    final String destroyReadWaitsFailedDesc =
+        "Total number of times a DLockService destroy read lock wait has completed unsuccessfully.";
+    final String destroyReadWaitFailedTimeDesc =
+        "Total time spent waiting for a DLockService destroy read lock that was not obtained.";
+    final String destroyWriteWaitsInProgressDesc =
+        "Current number of thwrites waiting for a DLockService destroy write lock.";
+    final String destroyWriteWaitsCompletedDesc =
+        "Total number of times a DLockService destroy write lock wait has completed successfully.";
+    final String destroyWriteWaitTimeDesc =
+        "Total time spent waiting for a DLockService destroy write lock that was obtained.";
+    final String destroyWriteWaitsFailedDesc =
+        "Total number of times a DLockService destroy write lock wait has completed unsuccessfully.";
+    final String destroyWriteWaitFailedTimeDesc =
+        "Total time spent waiting for a DLockService destroy write lock that was not obtained.";
+    final String destroyReadsDesc =
+        "The current number of DLockService destroy read locks held by this process.";
+    final String destroyWritesDesc =
+        "The current number of DLockService destroy write locks held by this process.";
+    final String lockReleasesInProgressDesc =
+        "Current number of threads releasing a distributed lock.";
+    final String lockReleasesCompletedDesc =
+        "Total number of times distributed lock release has completed.";
-    final String becomeGrantorRequestsDesc = "Total number of times this member has explicitly requested to become lock grantor.";
-    final String freeResourcesCompletedDesc = "Total number of times this member has freed resources for a distributed lock.";
-    final String freeResourcesFailedDesc = "Total number of times this member has attempted to free resources for a distributed lock which remained in use.";
-      
+    final String becomeGrantorRequestsDesc =
+        "Total number of times this member has explicitly requested to become lock grantor.";
+    final String freeResourcesCompletedDesc =
+        "Total number of times this member has freed resources for a distributed lock.";
+    final String freeResourcesFailedDesc =
+        "Total number of times this member has attempted to free resources for a distributed lock which remained in use.";
+
-    type = f.createType(
-      statName, 
-      statDescription,
-      new StatisticDescriptor[] {
-        f.createIntGauge("grantors", grantorsDesc, "grantors"), 
-        f.createIntGauge("services", servicesDesc, "services"), 
-        f.createIntGauge("tokens", tokensDesc, "tokens"), 
-        f.createIntGauge("grantTokens", grantTokensDesc, "grantTokens"), 
-        f.createIntGauge("requestQueues", requestQueuesDesc, "requestQueues"), 
-        f.createIntGauge("serialQueueSize", serialQueueSizeDesc, "messages"), 
-        f.createIntGauge("serialThreads", serialThreadsDesc, "threads"), 
-        f.createIntGauge("waitingQueueSize", waitingQueueSizeDesc, "messages"), 
+    type = f.createType(statName, statDescription, new StatisticDescriptor[] {
+        f.createIntGauge("grantors", grantorsDesc, "grantors"),
+        f.createIntGauge("services", servicesDesc, "services"),
+        f.createIntGauge("tokens", tokensDesc, "tokens"),
+        f.createIntGauge("grantTokens", grantTokensDesc, "grantTokens"),
+        f.createIntGauge("requestQueues", requestQueuesDesc, "requestQueues"),
+        f.createIntGauge("serialQueueSize", serialQueueSizeDesc, "messages"),
+        f.createIntGauge("serialThreads", serialThreadsDesc, "threads"),
+        f.createIntGauge("waitingQueueSize", waitingQueueSizeDesc, "messages"),
-        f.createIntGauge("lockWaitsInProgress", lockWaitsInProgressDesc, "operations"), 
-        f.createIntCounter("lockWaitsCompleted", lockWaitsCompletedDesc, "operations"), 
-        f.createLongCounter("lockWaitTime", lockWaitTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("lockWaitsFailed", lockWaitsFailedDesc, "operations"), 
-        f.createLongCounter("lockWaitFailedTime", lockWaitFailedTimeDesc, "nanoseconds", false), 
-        f.createIntGauge("grantWaitsInProgress", grantWaitsInProgressDesc, "operations"), 
-        f.createIntCounter("grantWaitsCompleted", grantWaitsCompletedDesc, "operations"), 
+        f.createIntGauge("lockWaitsInProgress", lockWaitsInProgressDesc, "operations"),
+        f.createIntCounter("lockWaitsCompleted", lockWaitsCompletedDesc, "operations"),
+        f.createLongCounter("lockWaitTime", lockWaitTimeDesc, "nanoseconds", false),
+        f.createIntCounter("lockWaitsFailed", lockWaitsFailedDesc, "operations"),
+        f.createLongCounter("lockWaitFailedTime", lockWaitFailedTimeDesc, "nanoseconds", false),
+        f.createIntGauge("grantWaitsInProgress", grantWaitsInProgressDesc, "operations"),
+        f.createIntCounter("grantWaitsCompleted", grantWaitsCompletedDesc, "operations"),
-        f.createIntCounter("grantWaitsNotGrantor", grantWaitsNotGrantorDesc, "operations"), 
-        f.createLongCounter("grantWaitNotGrantorTime", grantWaitNotGrantorTimeDesc, "nanoseconds", false),
-        f.createIntCounter("grantWaitsTimeout", grantWaitsTimeoutDesc, "operations"), 
+        f.createIntCounter("grantWaitsNotGrantor", grantWaitsNotGrantorDesc, "operations"),
+        f.createLongCounter("grantWaitNotGrantorTime", grantWaitNotGrantorTimeDesc, "nanoseconds",
+            false),
+        f.createIntCounter("grantWaitsTimeout", grantWaitsTimeoutDesc, "operations"),
-        f.createIntCounter("grantWaitsNotHolder", grantWaitsNotHolderDesc, "operations"), 
-        f.createLongCounter("grantWaitNotHolderTime", grantWaitNotHolderTimeDesc, "nanoseconds", false),
-        f.createIntCounter("grantWaitsFailed", grantWaitsFailedDesc, "operations"), 
+        f.createIntCounter("grantWaitsNotHolder", grantWaitsNotHolderDesc, "operations"),
+        f.createLongCounter("grantWaitNotHolderTime", grantWaitNotHolderTimeDesc, "nanoseconds",
+            false),
+        f.createIntCounter("grantWaitsFailed", grantWaitsFailedDesc, "operations"),
-        f.createIntCounter("grantWaitsSuspended", grantWaitsSuspendedDesc, "operations"), 
-        f.createLongCounter("grantWaitSuspendedTime", grantWaitSuspendedTimeDesc, "nanoseconds", false),
-        f.createIntCounter("grantWaitsDestroyed", grantWaitsDestroyedDesc, "operations"), 
-        f.createLongCounter("grantWaitDestroyedTime", grantWaitDestroyedTimeDesc, "nanoseconds", false),
-        f.createIntGauge("createGrantorsInProgress", createGrantorsInProgressDesc, "operations"), 
-        f.createIntCounter("createGrantorsCompleted", createGrantorsCompletedDesc, "operations"), 
-        f.createLongCounter("createGrantorTime", createGrantorTimeDesc, "nanoseconds", false), 
-        f.createIntGauge("serviceCreatesInProgress", serviceCreatesInProgressDesc, "operations"), 
-        f.createIntCounter("serviceCreatesCompleted", serviceCreatesCompletedDesc, "operations"), 
-        f.createLongCounter("serviceCreateLatchTime", serviceCreateLatchTimeDesc, "nanoseconds", false), 
-        f.createLongCounter("serviceInitLatchTime", serviceInitLatchTimeDesc, "nanoseconds", false), 
-        f.createIntGauge("grantorWaitsInProgress", grantorWaitsInProgressDesc, "operations"), 
-        f.createIntCounter("grantorWaitsCompleted", grantorWaitsCompletedDesc, "operations"), 
-        f.createLongCounter("grantorWaitTime", grantorWaitTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("grantorWaitsFailed", grantorWaitsFailedDesc, "operations"), 
-        f.createLongCounter("grantorWaitFailedTime", grantorWaitFailedTimeDesc, "nanoseconds", false), 
-        f.createIntGauge("grantorThreadsInProgress", grantorThreadsInProgressDesc, "operations"), 
-        f.createIntCounter("grantorThreadsCompleted", grantorThreadsCompletedDesc, "operations"), 
-        f.createLongCounter("grantorThreadExpireAndGrantLocksTime", grantorThreadExpireAndGrantLocksTimeDesc, "nanoseconds", false), 
-        f.createLongCounter("grantorThreadHandleRequestTimeoutsTime", grantorThreadHandleRequestTimeoutsTimeDesc, "nanoseconds", false),
-        f.createLongCounter("grantorThreadRemoveUnusedTokensTime", grantorThreadRemoveUnusedTokensTimeDesc, "nanoseconds", false),
-        f.createLongCounter("grantorThreadTime", grantorThreadTimeDesc, "nanoseconds", false), 
+        f.createIntCounter("grantWaitsSuspended", grantWaitsSuspendedDesc, "operations"),
+        f.createLongCounter("grantWaitSuspendedTime", grantWaitSuspendedTimeDesc, "nanoseconds",
+            false),
+        f.createIntCounter("grantWaitsDestroyed", grantWaitsDestroyedDesc, "operations"),
+        f.createLongCounter("grantWaitDestroyedTime", grantWaitDestroyedTimeDesc, "nanoseconds",
+            false),
+        f.createIntGauge("createGrantorsInProgress", createGrantorsInProgressDesc, "operations"),
+        f.createIntCounter("createGrantorsCompleted", createGrantorsCompletedDesc, "operations"),
+        f.createLongCounter("createGrantorTime", createGrantorTimeDesc, "nanoseconds", false),
+        f.createIntGauge("serviceCreatesInProgress", serviceCreatesInProgressDesc, "operations"),
+        f.createIntCounter("serviceCreatesCompleted", serviceCreatesCompletedDesc, "operations"),
+        f.createLongCounter("serviceCreateLatchTime", serviceCreateLatchTimeDesc, "nanoseconds",
+            false),
+        f.createLongCounter("serviceInitLatchTime", serviceInitLatchTimeDesc, "nanoseconds", false),
+        f.createIntGauge("grantorWaitsInProgress", grantorWaitsInProgressDesc, "operations"),
+        f.createIntCounter("grantorWaitsCompleted", grantorWaitsCompletedDesc, "operations"),
+        f.createLongCounter("grantorWaitTime", grantorWaitTimeDesc, "nanoseconds", false),
+        f.createIntCounter("grantorWaitsFailed", grantorWaitsFailedDesc, "operations"),
+        f.createLongCounter("grantorWaitFailedTime", grantorWaitFailedTimeDesc, "nanoseconds",
+            false),
+        f.createIntGauge("grantorThreadsInProgress", grantorThreadsInProgressDesc, "operations"),
+        f.createIntCounter("grantorThreadsCompleted", grantorThreadsCompletedDesc, "operations"),
+        f.createLongCounter("grantorThreadExpireAndGrantLocksTime",
+            grantorThreadExpireAndGrantLocksTimeDesc, "nanoseconds", false),
+        f.createLongCounter("grantorThreadHandleRequestTimeoutsTime",
+            grantorThreadHandleRequestTimeoutsTimeDesc, "nanoseconds", false),
+        f.createLongCounter("grantorThreadRemoveUnusedTokensTime",
+            grantorThreadRemoveUnusedTokensTimeDesc, "nanoseconds", false),
+        f.createLongCounter("grantorThreadTime", grantorThreadTimeDesc, "nanoseconds", false),
-        f.createIntGauge("destroyReadWaitsInProgress", destroyReadWaitsInProgressDesc, "operations"), 
-        f.createIntCounter("destroyReadWaitsCompleted", destroyReadWaitsCompletedDesc, "operations"), 
-        f.createLongCounter("destroyReadWaitTime", destroyReadWaitTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("destroyReadWaitsFailed", destroyReadWaitsFailedDesc, "operations"), 
-        f.createLongCounter("destroyReadWaitFailedTime", destroyReadWaitFailedTimeDesc, "nanoseconds", false),
-        f.createIntGauge("destroyWriteWaitsInProgress", destroyWriteWaitsInProgressDesc, "operations"), 
-        f.createIntCounter("destroyWriteWaitsCompleted", destroyWriteWaitsCompletedDesc, "operations"), 
-        f.createLongCounter("destroyWriteWaitTime", destroyWriteWaitTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("destroyWriteWaitsFailed", destroyWriteWaitsFailedDesc, "operations"), 
-        f.createLongCounter("destroyWriteWaitFailedTime", destroyWriteWaitFailedTimeDesc, "nanoseconds", false),
-        f.createIntGauge("destroyReads", destroyReadsDesc, "destroyReads"), 
-        f.createIntGauge("destroyWrites", destroyWritesDesc, "destroyWrites"), 
-        f.createIntGauge("lockReleasesInProgress", lockReleasesInProgressDesc, "operations"), 
-        f.createIntCounter("lockReleasesCompleted", lockReleasesCompletedDesc, "operations"), 
-        f.createLongCounter("lockReleaseTime", lockReleaseTimeDesc, "nanoseconds", false), 
-        f.createIntCounter("becomeGrantorRequests", becomeGrantorRequestsDesc, "operations"), 
+        f.createIntGauge("destroyReadWaitsInProgress", destroyReadWaitsInProgressDesc,
+            "operations"),
+        f.createIntCounter("destroyReadWaitsCompleted", destroyReadWaitsCompletedDesc,
+            "operations"),
+        f.createLongCounter("destroyReadWaitTime", destroyReadWaitTimeDesc, "nanoseconds", false),
+        f.createIntCounter("destroyReadWaitsFailed", destroyReadWaitsFailedDesc, "operations"),
+        f.createLongCounter("destroyReadWaitFailedTime", destroyReadWaitFailedTimeDesc,
+            "nanoseconds", false),
+        f.createIntGauge("destroyWriteWaitsInProgress", destroyWriteWaitsInProgressDesc,
+            "operations"),
+        f.createIntCounter("destroyWriteWaitsCompleted", destroyWriteWaitsCompletedDesc,
+            "operations"),
+        f.createLongCounter("destroyWriteWaitTime", destroyWriteWaitTimeDesc, "nanoseconds", false),
+        f.createIntCounter("destroyWriteWaitsFailed", destroyWriteWaitsFailedDesc, "operations"),
+        f.createLongCounter("destroyWriteWaitFailedTime", destroyWriteWaitFailedTimeDesc,
+            "nanoseconds", false),
+        f.createIntGauge("destroyReads", destroyReadsDesc, "destroyReads"),
+        f.createIntGauge("destroyWrites", destroyWritesDesc, "destroyWrites"),
+        f.createIntGauge("lockReleasesInProgress", lockReleasesInProgressDesc, "operations"),
+        f.createIntCounter("lockReleasesCompleted", lockReleasesCompletedDesc, "operations"),
+        f.createLongCounter("lockReleaseTime", lockReleaseTimeDesc, "nanoseconds", false),
+        f.createIntCounter("becomeGrantorRequests", becomeGrantorRequestsDesc, "operations"),
-        f.createIntCounter("freeResourcesFailed", freeResourcesFailedDesc, "operations"),
-      }
-    );
+        f.createIntCounter("freeResourcesFailed", freeResourcesFailedDesc, "operations"),});
-    grantorsId = type.nameToId("grantors");  
-    servicesId = type.nameToId("services");  
-    tokensId = type.nameToId("tokens");  
-    grantTokensId = type.nameToId("grantTokens");  
-    requestQueuesId = type.nameToId("requestQueues");  
-    serialQueueSizeId = type.nameToId("serialQueueSize");  
+    grantorsId = type.nameToId("grantors");
+    servicesId = type.nameToId("services");
+    tokensId = type.nameToId("tokens");
+    grantTokensId = type.nameToId("grantTokens");
+    requestQueuesId = type.nameToId("requestQueues");
+    serialQueueSizeId = type.nameToId("serialQueueSize");
-    waitingQueueSizeId = type.nameToId("waitingQueueSize");  
+    waitingQueueSizeId = type.nameToId("waitingQueueSize");
-    grantorThreadHandleRequestTimeoutsTimeId = type.nameToId("grantorThreadHandleRequestTimeoutsTime");
+    grantorThreadHandleRequestTimeoutsTimeId =
+        type.nameToId("grantorThreadHandleRequestTimeoutsTime");
-    pendingRequestsId = type.nameToId("pendingRequests");  
+    pendingRequestsId = type.nameToId("pendingRequests");
-    destroyReadsId = type.nameToId("destroyReads");  
-    destroyWritesId = type.nameToId("destroyWrites");  
+    destroyReadsId = type.nameToId("destroyReads");
+    destroyWritesId = type.nameToId("destroyWrites");
-    becomeGrantorRequestsId = type.nameToId("becomeGrantorRequests");  
+    becomeGrantorRequestsId = type.nameToId("becomeGrantorRequests");
-  //   Constructors
+  // Constructors
-   * Creates a new <code>DLockStats</code> and registers itself
-   * with the given statistics factory.
+   * Creates a new <code>DLockStats</code> and registers itself with the given statistics factory.
+
-  //   Instance methods
+  // Instance methods
-  
+
+
+
+
+
+
+
-        stats.incLong(lockWaitTimeId, ts-start);
+        stats.incLong(lockWaitTimeId, ts - start);
-        stats.incLong(lockWaitFailedTimeId, ts-start);
+        stats.incLong(lockWaitFailedTimeId, ts - start);
+
-  
+
+
-  
-  // incNumSerialThreads everytime we execute with dlock getSerialExecutor() 
+
+  // incNumSerialThreads everytime we execute with dlock getSerialExecutor()
+
-  
+
+
-  // current number of lock services used by this system member 
+  // current number of lock services used by this system member
+
-  
-  // current number of lock grantors hosted by this system member 
+
+  // current number of lock grantors hosted by this system member
+
-  
-  // current number of lock tokens used by this system member 
+
+  // current number of lock tokens used by this system member
+
+
-  // current number of lock request queues used by this system member 
+  // current number of lock request queues used by this system member
+
-  
+
+
+
+
+
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-      stats.incLong(grantWaitTimeId, ts-start);
+      stats.incLong(grantWaitTimeId, ts - start);
+
-      stats.incLong(grantWaitNotGrantorTimeId, ts-start);
+      stats.incLong(grantWaitNotGrantorTimeId, ts - start);
+
-      stats.incLong(grantWaitTimeoutTimeId, ts-start);
+      stats.incLong(grantWaitTimeoutTimeId, ts - start);
+
-      stats.incLong(grantWaitNotHolderTimeId, ts-start);
+      stats.incLong(grantWaitNotHolderTimeId, ts - start);
+
-      stats.incLong(grantWaitFailedTimeId, ts-start);
+      stats.incLong(grantWaitFailedTimeId, ts - start);
+
-      stats.incLong(grantWaitSuspendedTimeId, ts-start);
+      stats.incLong(grantWaitSuspendedTimeId, ts - start);
+
-      stats.incLong(grantWaitDestroyedTimeId, ts-start);
+      stats.incLong(grantWaitDestroyedTimeId, ts - start);
-  
+
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-      stats.incLong(createGrantorTimeId, ts-start);
+      stats.incLong(createGrantorTimeId, ts - start);
-  
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-      stats.incLong(serviceCreateLatchTimeId, ts-start);
+      stats.incLong(serviceCreateLatchTimeId, ts - start);
+
-      stats.incLong(serviceInitLatchTimeId, ts-start);
+      stats.incLong(serviceInitLatchTimeId, ts - start);
+
+
-  
+
+
+
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-        stats.incLong(grantorWaitTimeId, ts-start);
+        stats.incLong(grantorWaitTimeId, ts - start);
-        stats.incLong(grantorWaitFailedTimeId, ts-start);
+        stats.incLong(grantorWaitFailedTimeId, ts - start);
-  
+
+
+
+
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-    stats.incLong(grantorThreadExpireAndGrantLocksTimeId, ts-start);
-    return DLockStats.getStatTime(); 
+    stats.incLong(grantorThreadExpireAndGrantLocksTimeId, ts - start);
+    return DLockStats.getStatTime();
+
-    stats.incLong(grantorThreadHandleRequestTimeoutsTimeId, ts-timing);
-    return DLockStats.getStatTime(); 
+    stats.incLong(grantorThreadHandleRequestTimeoutsTimeId, ts - timing);
+    return DLockStats.getStatTime();
+
-    stats.incLong(grantorThreadRemoveUnusedTokensTimeId, ts-timing);
+    stats.incLong(grantorThreadRemoveUnusedTokensTimeId, ts - timing);
+
-      stats.incLong(grantorThreadTimeId, ts-start);
+      stats.incLong(grantorThreadTimeId, ts - start);
-    
-  // current number of requests waiting in lock grantor queues 
+
+  // current number of requests waiting in lock grantor queues
+
-  
+
+
+
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-        stats.incLong(destroyReadWaitTimeId, ts-start);
+        stats.incLong(destroyReadWaitTimeId, ts - start);
-        stats.incLong(destroyReadWaitFailedTimeId, ts-start);
+        stats.incLong(destroyReadWaitFailedTimeId, ts - start);
+
+
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-        stats.incLong(destroyWriteWaitTimeId, ts-start);
+        stats.incLong(destroyWriteWaitTimeId, ts - start);
-        stats.incLong(destroyWriteWaitFailedTimeId, ts-start);
+        stats.incLong(destroyWriteWaitFailedTimeId, ts - start);
-  // current number of DLockService destroy read locks held by this process 
+  // current number of DLockService destroy read locks held by this process
+
-  
-  // current number of DLockService destroy write locks held by this process 
+
+  // current number of DLockService destroy write locks held by this process
+
-  
+
+
+
+
-    return DLockStats.getStatTime(); 
+    return DLockStats.getStatTime();
+
-      stats.incLong(lockReleaseTimeId, ts-start);
+      stats.incLong(lockReleaseTimeId, ts - start);
+
-  
+
+
-  
+
+
-  
+
-  //   StatHelpers for dedicated dlock executors
+  // StatHelpers for dedicated dlock executors
-  
+
-   * Returns a helper object so that the serial queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the serial queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void add() {
-          incSerialQueueSize(1);
-        }
-        public void remove() {
-          incSerialQueueSize(-1);
-        }
-        public void remove(int count) {
-          incSerialQueueSize(-count);
-        }
-      };
+      public void add() {
+        incSerialQueueSize(1);
+      }
+
+      public void remove() {
+        incSerialQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incSerialQueueSize(-count);
+      }
+    };
-   * Returns a helper object so that the waiting pool can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the waiting pool can record its stats to the proper
+   * distribution stats.
+   * 
-        public void startJob() {
-          incWaitingThreads(1);
-        }
-        public void endJob() {
-          incWaitingThreads(-1);
-        }
-      };
+      public void startJob() {
+        incWaitingThreads(1);
+      }
+
+      public void endJob() {
+        incWaitingThreads(-1);
+      }
+    };
-  
+
-   * Returns a helper object so that the waiting queue can record its
-   * stats to the proper distribution stats.
+   * Returns a helper object so that the waiting queue can record its stats to the proper
+   * distribution stats.
+   * 
-        public void add() {
-          incWaitingQueueSize(1);
-        }
-        public void remove() {
-          incWaitingQueueSize(-1);
-        }
-        public void remove(int count) {
-          incWaitingQueueSize(-count);
-        }
-      };
+      public void add() {
+        incWaitingQueueSize(1);
+      }
+
+      public void remove() {
+        incWaitingQueueSize(-1);
+      }
+
+      public void remove(int count) {
+        incWaitingQueueSize(-count);
+      }
+    };
-  
+
