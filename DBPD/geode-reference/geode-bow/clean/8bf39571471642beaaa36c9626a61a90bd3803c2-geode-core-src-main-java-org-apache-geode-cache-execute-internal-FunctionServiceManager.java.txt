Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Function execution provides a means to route application behaviour to {@linkplain Region data} or more generically to
- * peers in a {@link DistributedSystem} or servers in a {@link Pool}.
+ * Function execution provides a means to route application behaviour to {@linkplain Region data} or
+ * more generically to peers in a {@link DistributedSystem} or servers in a {@link Pool}.
- * While {@link FunctionService} is a customer facing interface to this functionality, all of the work is done here. In
- * addition, internal only functionality is exposed in this class.
+ * While {@link FunctionService} is a customer facing interface to this functionality, all of the
+ * work is done here. In addition, internal only functionality is exposed in this class.
-  private final static ConcurrentHashMap<String, Function> idToFunctionMap = new ConcurrentHashMap<String, Function>();
+  private final static ConcurrentHashMap<String, Function> idToFunctionMap =
+      new ConcurrentHashMap<String, Function>();
-  public static final boolean RANDOM_onMember = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "randomizeOnMember");
+  public static final boolean RANDOM_onMember =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "randomizeOnMember");
-  public FunctionServiceManager() {
-  }
+  public FunctionServiceManager() {}
-   * Returns an {@link Execution} object that can be used to execute a data dependent function on the specified Region.<br>
-   * When invoked from a GemFire client, the method returns an Execution instance that sends a message to one of the
-   * connected servers as specified by the {@link Pool} for the region. <br>
-   * Depending on the filters setup on the {@link Execution}, the function is executed on all GemFire members that
-   * define the data region, or a subset of members. {@link Execution#withFilter(Set)}).
+   * Returns an {@link Execution} object that can be used to execute a data dependent function on
+   * the specified Region.<br>
+   * When invoked from a GemFire client, the method returns an Execution instance that sends a
+   * message to one of the connected servers as specified by the {@link Pool} for the region. <br>
+   * Depending on the filters setup on the {@link Execution}, the function is executed on all
+   * GemFire members that define the data region, or a subset of members.
+   * {@link Execution#withFilter(Set)}).
-   * For DistributedRegions with DataPolicy.NORMAL, it throws UnsupportedOperationException. For DistributedRegions with
-   * DataPolicy.EMPTY, execute the function on any random member which has DataPolicy.REPLICATE <br>
-   * . For DistributedRegions with DataPolicy.REPLICATE, execute the function locally. For Regions with
-   * DataPolicy.PARTITION, it executes on members where the data resides as specified by the filter.
+   * For DistributedRegions with DataPolicy.NORMAL, it throws UnsupportedOperationException. For
+   * DistributedRegions with DataPolicy.EMPTY, execute the function on any random member which has
+   * DataPolicy.REPLICATE <br>
+   * . For DistributedRegions with DataPolicy.REPLICATE, execute the function locally. For Regions
+   * with DataPolicy.PARTITION, it executes on members where the data resides as specified by the
+   * filter.
-   * @throws FunctionException
-   *           if the region passed in is null
+   * @throws FunctionException if the region passed in is null
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("Region instance "));
+      throw new FunctionException(
+          LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("Region instance "));
-   * Returns an {@link Execution} object that can be used to execute a data independent function on a server in the
-   * provided {@link Pool}.
+   * Returns an {@link Execution} object that can be used to execute a data independent function on
+   * a server in the provided {@link Pool}.
-   * If the server goes down while dispatching or executing the function, an Exception will be thrown.
+   * If the server goes down while dispatching or executing the function, an Exception will be
+   * thrown.
-   * @param pool
-   *          from which to chose a server for execution
+   * @param pool from which to chose a server for execution
-   * @throws FunctionException
-   *           if Pool instance passed in is null
+   * @throws FunctionException if Pool instance passed in is null
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("Pool instance "));
+      throw new FunctionException(
+          LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("Pool instance "));
-   * Returns an {@link Execution} object that can be used to execute a data independent function on all the servers in
-   * the provided {@link Pool}. If one of the servers goes down while dispatching or executing the function on the
-   * server, an Exception will be thrown.
+   * Returns an {@link Execution} object that can be used to execute a data independent function on
+   * all the servers in the provided {@link Pool}. If one of the servers goes down while dispatching
+   * or executing the function on the server, an Exception will be thrown.
-   * @param pool
-   *          the set of servers to execute the function
+   * @param pool the set of servers to execute the function
-   * @throws FunctionException
-   *           if Pool instance passed in is null
+   * @throws FunctionException if Pool instance passed in is null
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("Pool instance "));
+      throw new FunctionException(
+          LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("Pool instance "));
-   * Returns an {@link Execution} object that can be used to execute a data independent function on a server that the
-   * given cache is connected to.
+   * Returns an {@link Execution} object that can be used to execute a data independent function on
+   * a server that the given cache is connected to.
-   * If the server goes down while dispatching or executing the function, an Exception will be thrown.
+   * If the server goes down while dispatching or executing the function, an Exception will be
+   * thrown.
-   * @param regionService
-   *          obtained from {@link ClientCacheFactory#create} or {@link ClientCache#createAuthenticatedView(Properties)}
-   *          .
+   * @param regionService obtained from {@link ClientCacheFactory#create} or
+   *        {@link ClientCache#createAuthenticatedView(Properties)} .
-   * @throws FunctionException
-   *           if cache is null, is not on a client, or it does not have a default pool
+   * @throws FunctionException if cache is null, is not on a client, or it does not have a default
+   *         pool
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("RegionService instance "));
+      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL
+          .toLocalizedString("RegionService instance "));
-   * Returns an {@link Execution} object that can be used to execute a data independent function on all the servers that
-   * the given cache is connected to. If one of the servers goes down while dispatching or executing the function on the
-   * server, an Exception will be thrown.
+   * Returns an {@link Execution} object that can be used to execute a data independent function on
+   * all the servers that the given cache is connected to. If one of the servers goes down while
+   * dispatching or executing the function on the server, an Exception will be thrown.
-   * @param regionService
-   *          obtained from {@link ClientCacheFactory#create} or {@link ClientCache#createAuthenticatedView(Properties)}
-   *          .
+   * @param regionService obtained from {@link ClientCacheFactory#create} or
+   *        {@link ClientCache#createAuthenticatedView(Properties)} .
-   * @throws FunctionException
-   *           if cache is null, is not on a client, or it does not have a default pool
+   * @throws FunctionException if cache is null, is not on a client, or it does not have a default
+   *         pool
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("RegionService instance "));
+      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL
+          .toLocalizedString("RegionService instance "));
-   * Returns an {@link Execution} object that can be used to execute a data independent function on a
-   * {@link DistributedMember} of the {@link DistributedSystem}. If the member is not found in the system, the function
-   * execution will throw an Exception. If the member goes down while dispatching or executing the function on the
-   * member, an Exception will be thrown.
+   * Returns an {@link Execution} object that can be used to execute a data independent function on
+   * a {@link DistributedMember} of the {@link DistributedSystem}. If the member is not found in the
+   * system, the function execution will throw an Exception. If the member goes down while
+   * dispatching or executing the function on the member, an Exception will be thrown.
-   * @param system
-   *          defines the distributed system
-   * @param distributedMember
-   *          defines a member in the distributed system
+   * @param system defines the distributed system
+   * @param distributedMember defines a member in the distributed system
-   * @throws FunctionException
-   *           if either input parameter is null
+   * @throws FunctionException if either input parameter is null
-   * Returns an {@link Execution} object that can be used to execute a data independent function on all members of the
-   * {@link DistributedSystem}. If one of the members goes down while dispatching or executing the function on the
-   * member, an Exception will be thrown.
+   * Returns an {@link Execution} object that can be used to execute a data independent function on
+   * all members of the {@link DistributedSystem}. If one of the members goes down while dispatching
+   * or executing the function on the member, an Exception will be thrown.
-   * @param system
-   *          defines the distributed system
+   * @param system defines the distributed system
-   * @throws FunctionException
-   *           if DistributedSystem instance passed is null
+   * @throws FunctionException if DistributedSystem instance passed is null
-              .toLocalizedString(Arrays.toString(groups)));
+          .toLocalizedString(Arrays.toString(groups)));
-   * Returns an {@link Execution} object that can be used to execute a data independent function on the set of
-   * {@link DistributedMember}s of the {@link DistributedSystem}. If one of the members goes down while dispatching or
-   * executing the function, an Exception will be thrown.
+   * Returns an {@link Execution} object that can be used to execute a data independent function on
+   * the set of {@link DistributedMember}s of the {@link DistributedSystem}. If one of the members
+   * goes down while dispatching or executing the function, an Exception will be thrown.
-   * @param system
-   *          defines the distributed system
-   * @param distributedMembers
-   *          set of distributed members on which {@link Function} to be executed
-   * @throws FunctionException
-   *           if DistributedSystem instance passed is null
+   * @param system defines the distributed system
+   * @param distributedMembers set of distributed members on which {@link Function} to be executed
+   * @throws FunctionException if DistributedSystem instance passed is null
-  public final Execution onMembers(DistributedSystem system, Set<DistributedMember> distributedMembers) {
+  public final Execution onMembers(DistributedSystem system,
+      Set<DistributedMember> distributedMembers) {
-   * Returns the {@link Function} defined by the functionId, returns null if no function is found for the specified
-   * functionId
+   * Returns the {@link Function} defined by the functionId, returns null if no function is found
+   * for the specified functionId
-   * @throws FunctionException
-   *           if functionID passed is null
+   * @throws FunctionException if functionID passed is null
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("functionId instance "));
+      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL
+          .toLocalizedString("functionId instance "));
-   * Registers the given {@link Function} with the {@link FunctionService} using {@link Function#getId()}.
+   * Registers the given {@link Function} with the {@link FunctionService} using
+   * {@link Function#getId()}.
-   * Registering a function allows execution of the function using {@link Execution#execute(String)}. Every member that
-   * could execute a function using its {@link Function#getId()} should register the function.
+   * Registering a function allows execution of the function using
+   * {@link Execution#execute(String)}. Every member that could execute a function using its
+   * {@link Function#getId()} should register the function.
-   * @throws FunctionException
-   *           if function instance passed is null or Function.getId() returns null
+   * @throws FunctionException if function instance passed is null or Function.getId() returns null
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("function instance "));
+      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL
+          .toLocalizedString("function instance "));
-      throw new FunctionException(LocalizedStrings.FunctionService_FUNCTION_GET_ID_RETURNED_NULL.toLocalizedString());
+      throw new FunctionException(
+          LocalizedStrings.FunctionService_FUNCTION_GET_ID_RETURNED_NULL.toLocalizedString());
-      throw new FunctionException(LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH.toLocalizedString());
+      throw new FunctionException(
+          LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH.toLocalizedString());
-   * Unregisters the given {@link Function} with the {@link FunctionService} using {@link Function#getId()}.
+   * Unregisters the given {@link Function} with the {@link FunctionService} using
+   * {@link Function#getId()}.
-   * @throws FunctionException
-   *           if function instance passed is null or Function.getId() returns null
+   * @throws FunctionException if function instance passed is null or Function.getId() returns null
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("functionId instance "));
+      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL
+          .toLocalizedString("functionId instance "));
-   * @throws FunctionException
-   *           if function instance passed is null or Function.getId() returns null
+   * @throws FunctionException if function instance passed is null or Function.getId() returns null
-      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL.toLocalizedString("functionId instance "));
+      throw new FunctionException(LocalizedStrings.FunctionService_0_PASSED_IS_NULL
+          .toLocalizedString("functionId instance "));
-      List<DistributedMember> grpMembers = new ArrayList<DistributedMember>(system.getGroupMembers(group));
+      List<DistributedMember> grpMembers =
+          new ArrayList<DistributedMember>(system.getGroupMembers(group));
