GEODE-1751: putting security checks in all applicable client-server commands.

+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-    else {
-      Function function = FunctionService.getFunction(functionId);
-      if (function == null) {
-        String message = null;
-        message = LocalizedStrings.GetFunctionAttribute_THE_FUNCTION_IS_NOT_REGISTERED_FOR_FUNCTION_ID_0
-            .toLocalizedString(functionId);
-        logger.warn("{}: {}", servConn.getName(), message);
-        sendError(msg, message, servConn);
-        return;
-      }
-      else {
-        byte[] functionAttributes = new byte[3];
-        functionAttributes[0] = (byte)(function.hasResult() ? 1 : 0);
-        functionAttributes[1] = (byte)(function.isHA() ? 1 : 0);
-        functionAttributes[2] = (byte)(function.optimizeForWrite() ? 1 : 0);
-        writeResponseWithFunctionAttribute(functionAttributes, msg, servConn);
-      }
+
+    Function function = FunctionService.getFunction(functionId);
+    if (function == null) {
+      String message = null;
+      message = LocalizedStrings.GetFunctionAttribute_THE_FUNCTION_IS_NOT_REGISTERED_FOR_FUNCTION_ID_0
+          .toLocalizedString(functionId);
+      logger.warn("{}: {}", servConn.getName(), message);
+      sendError(msg, message, servConn);
+      return;
+
+    GeodeSecurityUtil.authorizeFunctionRead(functionId);
+
+    byte[] functionAttributes = new byte[3];
+    functionAttributes[0] = (byte)(function.hasResult() ? 1 : 0);
+    functionAttributes[1] = (byte)(function.isHA() ? 1 : 0);
+    functionAttributes[2] = (byte)(function.optimizeForWrite() ? 1 : 0);
+    writeResponseWithFunctionAttribute(functionAttributes, msg, servConn);
+
+
