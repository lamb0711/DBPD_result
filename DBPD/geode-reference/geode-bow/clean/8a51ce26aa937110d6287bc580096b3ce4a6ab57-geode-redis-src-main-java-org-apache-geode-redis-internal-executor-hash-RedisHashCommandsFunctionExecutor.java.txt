GEODE-8098: Refactor CommandFunction (#5082)

* CommandFunction code is now cleaner.
* Added SingleResultRedisFunction and a new ResultCollector class
to simplify and ensure that our function only has a single result.
* StripedExecutor has been simplified to only take a Callable

-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.redis.internal.RedisCommandType;
-    ResultCollector<Object[], List<Integer>> results =
-        executeFunction(HSET, key, new Object[] {fieldsToSet, NX});
-    return results.getResult().get(0);
+    return CommandFunction.execute(HSET, key, new Object[] {fieldsToSet, NX}, region);
-    ResultCollector<Object[], List<Integer>> results = executeFunction(HDEL, key, fieldsToRemove);
-    return results.getResult().get(0);
+    return CommandFunction.execute(HDEL, key, fieldsToRemove, region);
-    ResultCollector<Object[], List<Boolean>> results = executeFunction(DEL, key,
-        RedisDataType.REDIS_HASH);
-    return results.getResult().get(0);
+    return CommandFunction.execute(DEL, key, RedisDataType.REDIS_HASH, region);
-    ResultCollector<Object[], List<Collection<ByteArrayWrapper>>> results =
-        executeFunction(HGETALL, key, null);
-    return results.getResult().get(0);
-  }
-
-  private ResultCollector executeFunction(RedisCommandType command,
-      ByteArrayWrapper key,
-      Object commandArguments) {
-    return CommandFunction.execute(region, command, key, commandArguments);
+    return CommandFunction.execute(HGETALL, key, null, region);
