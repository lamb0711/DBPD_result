Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An implementation of {@link Statistics} that stores its statistics
- * in local java memory.
+ * An implementation of {@link Statistics} that stores its statistics in local java memory.
-  
-  ///////////////////////  Constructors  ///////////////////////
+
+  /////////////////////// Constructors ///////////////////////
-   * @param type
-   *        A description of the statistics
-   * @param textId
-   *        Text that identifies this statistic when it is monitored
-   * @param numericId
-   *        A number that displayed when this statistic is monitored
-   * @param uniqueId
-   *        A number that uniquely identifies this instance
-   * @param system
-   *        The distributed system that determines whether or not these
-   *        statistics are stored (and collected) in GemFire shared
-   *        memory or in the local VM
+   * @param type A description of the statistics
+   * @param textId Text that identifies this statistic when it is monitored
+   * @param numericId A number that displayed when this statistic is monitored
+   * @param uniqueId A number that uniquely identifies this instance
+   * @param system The distributed system that determines whether or not these statistics are stored
+   *        (and collected) in GemFire shared memory or in the local VM
-  public Atomic50StatisticsImpl(StatisticsType type, String textId,
-                             long numericId,
-                             long uniqueId,
-                             StatisticsManager system) {
-    super(type, calcTextId(system, textId), calcNumericId(system, numericId),
-          uniqueId, 0);
+  public Atomic50StatisticsImpl(StatisticsType type, String textId, long numericId, long uniqueId,
+      StatisticsManager system) {
+    super(type, calcTextId(system, textId), calcNumericId(system, numericId), uniqueId, 0);
-    StatisticsTypeImpl realType = (StatisticsTypeImpl)type;
+    StatisticsTypeImpl realType = (StatisticsTypeImpl) type;
-      throw new IllegalArgumentException(LocalizedStrings.Atomic50StatisticsImpl_ATOMICS_DO_NOT_SUPPORT_DOUBLE_STATS.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.Atomic50StatisticsImpl_ATOMICS_DO_NOT_SUPPORT_DOUBLE_STATS
+              .toLocalizedString());
-      for (int i=0; i < intCount; i++) {
+      for (int i = 0; i < intCount; i++) {
-      for (int i=0; i < longCount; i++) {
+      for (int i = 0; i < longCount; i++) {
-  //////////////////////  Static Methods  //////////////////////
+  ////////////////////// Static Methods //////////////////////
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-  private final ConcurrentLinkedQueue<ThreadStorage> threadStoreQ = new ConcurrentLinkedQueue<ThreadStorage>();
+  private final ConcurrentLinkedQueue<ThreadStorage> threadStoreQ =
+      new ConcurrentLinkedQueue<ThreadStorage>();
-   * List of ThreadStorage instances that will be used to roll up stat values
-   * on this instance. They come from the threadStoreQ.
+   * List of ThreadStorage instances that will be used to roll up stat values on this instance. They
+   * come from the threadStoreQ.
-  private final CopyOnWriteArrayList<ThreadStorage> threadStoreList = new CopyOnWriteArrayList<ThreadStorage>();
+  private final CopyOnWriteArrayList<ThreadStorage> threadStoreList =
+      new CopyOnWriteArrayList<ThreadStorage>();
-   * The workspace each thread that modifies statistics will use to do the
-   * mods locally.
+   * The workspace each thread that modifies statistics will use to do the mods locally.
-    
+
+
+
-    if (!result.dirty) result.dirty = true;
+    if (!result.dirty)
+      result.dirty = true;
+
-  
+
-  ////////////////////////  store() Methods  ///////////////////////
+  //////////////////////// store() Methods ///////////////////////
-    throw new IllegalStateException(LocalizedStrings.Atomic50StatisticsImpl_DOUBLE_STATS_NOT_ON_ATOMIC50.toLocalizedString());
+    throw new IllegalStateException(
+        LocalizedStrings.Atomic50StatisticsImpl_DOUBLE_STATS_NOT_ON_ATOMIC50.toLocalizedString());
-  ///////////////////////  get() Methods  ///////////////////////
+  /////////////////////// get() Methods ///////////////////////
-    throw new IllegalStateException(LocalizedStrings.Atomic50StatisticsImpl_DOUBLE_STATS_NOT_ON_ATOMIC50.toLocalizedString());
+    throw new IllegalStateException(
+        LocalizedStrings.Atomic50StatisticsImpl_DOUBLE_STATS_NOT_ON_ATOMIC50.toLocalizedString());
-  ////////////////////////  inc() Methods  ////////////////////////
+  //////////////////////// inc() Methods ////////////////////////
-    throw new IllegalStateException(LocalizedStrings.Atomic50StatisticsImpl_DOUBLE_STATS_NOT_ON_ATOMIC50.toLocalizedString());
+    throw new IllegalStateException(
+        LocalizedStrings.Atomic50StatisticsImpl_DOUBLE_STATS_NOT_ON_ATOMIC50.toLocalizedString());
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="JLM_JSR166_UTILCONCURRENT_MONITORENTER",
-  justification="findbugs complains about this synchronize. It could be changed to a sync on a dedicated Object instance to make findbugs happy. see comments below")
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+      value = "JLM_JSR166_UTILCONCURRENT_MONITORENTER",
+      justification = "findbugs complains about this synchronize. It could be changed to a sync on a dedicated Object instance to make findbugs happy. see comments below")
-    // findbugs complains about this synchronize. It could be changed to a sync on a dedicated Object instance to make findbugs happy.
-    synchronized(threadStoreList) {
+    // findbugs complains about this synchronize. It could be changed to a sync on a dedicated
+    // Object instance to make findbugs happy.
+    synchronized (threadStoreList) {
-      if (ts == null) return;
+      if (ts == null)
+        return;
-        ts = this.threadStoreQ.poll();      
+        ts = this.threadStoreQ.poll();
+
-   * Used to take striped thread stats and "roll them up" into a single
-   * shared stat.
+   * Used to take striped thread stats and "roll them up" into a single shared stat.
+   * 
-    if (samplerThread.get() == null) samplerThread.set(Boolean.TRUE);
+    if (samplerThread.get() == null)
+      samplerThread.set(Boolean.TRUE);
-    for (ThreadStorage ts: this.threadStoreList) {
+    for (ThreadStorage ts : this.threadStoreList) {
-          for (int i=0; i < ts.intStore.length(); i++) {
+          for (int i = 0; i < ts.intStore.length(); i++) {
-          for (int i=0; i < ts.longStore.length(); i++) {
+          for (int i = 0; i < ts.longStore.length(); i++) {
-  
+
+
+
-    if (!this.intDirty.weakCompareAndSet(idx, 1/*expected*/, 0/*update*/)) {
-      return this.intDirty.compareAndSet(idx, 1/*expected*/, 0/*update*/);
+    if (!this.intDirty.weakCompareAndSet(idx, 1/* expected */, 0/* update */)) {
+      return this.intDirty.compareAndSet(idx, 1/* expected */, 0/* update */);
+
-    if (!this.longDirty.weakCompareAndSet(idx, 1/*expected*/, 0/*update*/)) {
-      return this.longDirty.compareAndSet(idx, 1/*expected*/, 0/*update*/);
+    if (!this.longDirty.weakCompareAndSet(idx, 1/* expected */, 0/* update */)) {
+      return this.longDirty.compareAndSet(idx, 1/* expected */, 0/* update */);
+
-    if (!this.intDirty.weakCompareAndSet(idx, 0/*expected*/, 1/*update*/)) {
+    if (!this.intDirty.weakCompareAndSet(idx, 0/* expected */, 1/* update */)) {
+
-    if (!this.longDirty.weakCompareAndSet(idx, 0/*expected*/, 1/*update*/)) {
+    if (!this.longDirty.weakCompareAndSet(idx, 0/* expected */, 1/* update */)) {
-      for (ThreadStorage ts: this.threadStoreList) {
+      for (ThreadStorage ts : this.threadStoreList) {
-      }
-      else {
+      } else {
+
-        for (ThreadStorage ts: this.threadStoreList) {
+        for (ThreadStorage ts : this.threadStoreList) {
+
-      for (ThreadStorage ts: this.threadStoreList) {
+      for (ThreadStorage ts : this.threadStoreList) {
-      }
-      else {
+      } else {
+
-        for (ThreadStorage ts: this.threadStoreList) {
+        for (ThreadStorage ts : this.threadStoreList) {
-    throw new IllegalStateException(LocalizedStrings.Atomic50StatisticsImpl_DIRECT_ACCESS_NOT_ON_ATOMIC50.toLocalizedString());
+    throw new IllegalStateException(
+        LocalizedStrings.Atomic50StatisticsImpl_DIRECT_ACCESS_NOT_ON_ATOMIC50.toLocalizedString());
+
-    throw new IllegalStateException(LocalizedStrings.Atomic50StatisticsImpl_DIRECT_ACCESS_NOT_ON_ATOMIC50.toLocalizedString());
+    throw new IllegalStateException(
+        LocalizedStrings.Atomic50StatisticsImpl_DIRECT_ACCESS_NOT_ON_ATOMIC50.toLocalizedString());
+
-    throw new IllegalStateException(LocalizedStrings.Atomic50StatisticsImpl_DIRECT_ACCESS_NOT_ON_ATOMIC50.toLocalizedString());
+    throw new IllegalStateException(
+        LocalizedStrings.Atomic50StatisticsImpl_DIRECT_ACCESS_NOT_ON_ATOMIC50.toLocalizedString());
