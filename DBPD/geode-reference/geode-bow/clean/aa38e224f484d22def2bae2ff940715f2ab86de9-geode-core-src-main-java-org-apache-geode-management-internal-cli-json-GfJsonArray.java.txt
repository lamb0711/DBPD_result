GEODE-5013 Replace org.json with Jackson in GfJsonObject

This removes org.json as a dependency in geode-core and associated test
modules.  GfJsonObject and GfJsonArray are ported to use the same basic
Jackson ObjectMapper setup as QueryResultFormatter so that we now have a
uniform mechanism for managing JSON documents for querying/gfsh and
folks can use Jackson annotations like @JsonIgnore on their classes.

The geode-web-api and geode-pulse modules still use the geode-json
module in tests.  When/if they are ported to use GfJsonObject/Array we can delete
the geode-json module.

-import java.util.Collection;
+import java.util.ArrayList;
+import java.util.List;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ArrayNode;
-import org.json.JSONArray;
-import org.json.JSONException;
-public class GfJsonArray {
+public class GfJsonArray extends AbstractJSONFormatter {
-  private JSONArray jsonArray;
+  private final ArrayNode jsonArray;
-    this.jsonArray = new JSONArray();
+    super(-1, -1, false);
+    this.jsonArray = mapper.createArrayNode();
+    super(-1, -1, false);
-      if (array instanceof JSONArray) {
-        this.jsonArray = (JSONArray) array;
+      if (array instanceof ArrayNode) {
+        this.jsonArray = (ArrayNode) array;
-        this.jsonArray = new JSONArray(array);
+        this.jsonArray = mapper.valueToTree(array);
-    } catch (JSONException e) {
-      throw new GfJsonException(e.getMessage());
+      if (this.jsonArray == null) {
+        throw new IllegalArgumentException("Array translated into null JSON node: " + array);
+      }
+    } catch (IllegalArgumentException e) {
+      throw new GfJsonException(e);
+  void postCreateMapper() {
+    mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
+    mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
+  }
+
-  public Object get(int index) throws GfJsonException {
+  public String getString(int index) throws GfJsonException {
-      return this.jsonArray.get(index);
-    } catch (JSONException e) {
-      throw new GfJsonException(e.getMessage());
+      JsonNode node = jsonArray.get(index);
+      if (node.textValue() != null) {
+        return node.asText();
+      } else {
+        return node.toString();
+      }
+    } catch (IllegalArgumentException e) {
+      throw new GfJsonException(e);
-  public GfJsonObject getJSONObject(int index) throws GfJsonException {
+  public GfJsonObject getInternalJsonObject(int index) throws GfJsonException {
-      return new GfJsonObject(jsonArray.getJSONObject(index));
-    } catch (JSONException e) {
-      throw new GfJsonException(e.getMessage());
+      return new GfJsonObject(jsonArray.get(index));
+    } catch (IllegalArgumentException e) {
+      throw new GfJsonException(e);
-    this.jsonArray.put(extractInternalForGfJsonOrReturnSame(value));
-
+    this.jsonArray.add(toJsonNode(value));
+  public int length() {
+    return this.jsonArray.size();
+  }
+
+    JsonNode json = null;
-      this.jsonArray.put(index, extractInternalForGfJsonOrReturnSame(value));
-    } catch (JSONException e) {
-      throw new GfJsonException(e.getMessage());
+      json = toJsonNode(value);
+      this.jsonArray.set(index, json);
+    } catch (IndexOutOfBoundsException e) {
+      while (this.jsonArray.size() < index) {
+        this.jsonArray.add((JsonNode) null);
+      }
+      this.jsonArray.add(json);
+    } catch (IllegalArgumentException e) {
+      throw new GfJsonException(e);
-  public GfJsonArray put(Collection<?> value) {
-    this.jsonArray.put(value);
-    return this;
-  }
-
-  /**
-   * @return this GfJsonArray
-   * @throws GfJsonException If the index is negative or if the value is not finite.
-   */
-  public GfJsonArray put(int index, Collection<?> value) throws GfJsonException {
-    try {
-      this.jsonArray.put(index, value);
-    } catch (JSONException e) {
-      throw new GfJsonException(e.getMessage());
-    }
-    return this;
-  }
-
-  public GfJsonArray put(Map<?, ?> value) {
-    this.jsonArray.put(value);
-    return this;
-  }
-
-      this.jsonArray.put(index, value);
-    } catch (JSONException e) {
-      throw new GfJsonException(e.getMessage());
+      this.jsonArray.set(index, toJsonNode(value));
+    } catch (IllegalArgumentException e) {
+      throw new GfJsonException(e);
-    return jsonArray.length();
+    return jsonArray.size();
-          byteArray[i] = Byte.valueOf(String.valueOf(jsonArray.get(i)));
+          byteArray[i] = Byte.valueOf(String.valueOf(jsonArray.getString(i)));
-  public static String[] toStringArray(GfJsonArray jsonArray) {
-    String[] stringArray = null;
-    if (jsonArray != null) {
-      int length = jsonArray.size();
-      stringArray = new String[length];
-      for (int i = 0; i < length; i++) {
-        try {
-          stringArray[i] = String.valueOf(jsonArray.get(i));
-        } catch (GfJsonException e) {
-          logger.info("", e);
-          stringArray = null;
-        }
+  public List<String> toStringList() {
+    List<String> stringArray = null;
+    int length = jsonArray.size();
+    stringArray = new ArrayList<>(length);
+    for (int i = 0; i < length; i++) {
+      try {
+        stringArray.add(getString(i));
+      } catch (GfJsonException e) {
+        logger.info("", e);
+        stringArray = null;
-
-  public JSONArray getInternalJsonArray() {
+  public ArrayNode getInternalJsonArray() {
-  private static Object extractInternalForGfJsonOrReturnSame(Object value) {
-    Object returnedValue = value;
+  private JsonNode toJsonNode(Object value) {
-      returnedValue = ((GfJsonObject) value).getInternalJsonObject();
-    } else if (value instanceof GfJsonArray) {
-      returnedValue = ((GfJsonArray) value).getInternalJsonArray();
-    } else if (value == null) {
-      returnedValue = GfJsonObject.NULL;
+      return ((GfJsonObject) value).getInternalJsonObject();
+    if (value instanceof GfJsonArray) {
+      return ((GfJsonArray) value).getInternalJsonArray();
+    } else if (value == null) {
+      return mapper.valueToTree(GfJsonObject.NULL);
+    }
+    return mapper.valueToTree(value);
+  }
-    return returnedValue;
+  public GfJsonArray getJSONArray(int i) throws GfJsonException {
+    return new GfJsonArray(jsonArray.get(i));
