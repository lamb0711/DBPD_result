GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test

-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberIdentifier;
-import org.apache.geode.internal.serialization.DataSerializableFixedID;
-import org.apache.geode.internal.serialization.Version;
-  public static GMSMember readMemberID(DataInput in,
-      DeserializationContext context) throws IOException, ClassNotFoundException {
-    Object id = context.getDeserializer().readObject(in);
-    if (id == null || id instanceof GMSMember) {
-      return (GMSMember) id;
-    }
-    // return ((GMSMemberAdapter)((InternalDistributedMember)id).getNetMember()).getGmsMember();
-    try {
-      Method getNetMember = id.getClass().getMethod("getNetMember");
-      Object netMember = getNetMember.invoke(id);
-      Method getGmsMember = netMember.getClass().getMethod("getGmsMember");
-      return (GMSMember) getGmsMember.invoke(netMember);
-    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
-      throw new IllegalStateException("Unable to deserialize a member ID", e);
-    }
-  }
-
-  public static Set<GMSMember> readHashSetOfMemberIDs(DataInput in,
+  public static Set<MemberIdentifier> readHashSetOfMemberIDs(DataInput in,
-    Set<GMSMember> result = new HashSet<>();
+    Set<MemberIdentifier> result = new HashSet<>();
-      result.add(readMemberID(in, context));
+      result.add(context.getDeserializer().readObject(in));
-  public static List<GMSMember> readArrayOfIDs(DataInput in,
+  public static List<MemberIdentifier> readArrayOfIDs(DataInput in,
-    List<GMSMember> result = new ArrayList<>(size);
+    List<MemberIdentifier> result = new ArrayList<>(size);
-      result.add(readMemberID(in, context));
+      result.add(context.getDeserializer().readObject(in));
-  private static void writeAsInternalDistributedMember(GMSMember suspect, DataOutput out,
-      SerializationContext context) throws IOException {
-    context.getSerializer().writeDSFID(suspect, DataSerializableFixedID.DISTRIBUTED_MEMBER,
-        out);
-  }
-
-  public static void writeMemberID(GMSMember id, DataOutput out,
-      SerializationContext context) throws IOException {
-    if (id == null) {
-      context.getSerializer().writeObject(id, out);
-      return;
-    }
-    short ordinal = context.getSerializationVersion().ordinal();
-    if (ordinal <= Version.GEODE_1_10_0.ordinal()) {
-      writeAsInternalDistributedMember(id, out, context);
-    } else {
-      context.getSerializer().writeObject(id, out);
-    }
-  }
-
-  public static void writeSetOfMemberIDs(Set<GMSMember> set, DataOutput out,
+  public static void writeSetOfMemberIDs(Set<MemberIdentifier> set, DataOutput out,
-      for (GMSMember member : set) {
-        GMSUtil.writeMemberID(member, out, context);
+      for (MemberIdentifier member : set) {
+        context.getSerializer().writeObject(member, out);
