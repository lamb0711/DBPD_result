Merge remote-tracking branch 'upstream/develop' into develop

+import static org.apache.geode.distributed.internal.InternalDistributedSystem.SHUTDOWN_HOOK_NAME;
+
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
- * This class delegates to a static singleton that handles all
- * exceptions not caught by any thread created in geode.
- * So all interactions with it are done with static methods.
+ * This class delegates to a static singleton that handles all exceptions not caught by any thread
+ * created in geode. So all interactions with it are done with static methods.
+
-  public static void setOnThread(Thread thread) {
+  public static void setOnThread(final Thread thread) {
-  interface FailureSettor {
+  interface FailureSetter {
+
+
-    private final FailureSettor failureSettor;
+    private final FailureSetter failureSetter;
-    Implementation(Logger logger, FailureSettor failureSettor) {
+    Implementation(final Logger logger, final FailureSetter failureSetter) {
-      this.failureSettor = failureSettor;
+      this.failureSetter = failureSetter;
-    public void uncaughtException(Thread t, Throwable ex) {
-      if (ex instanceof VirtualMachineError) {
-        this.failureSettor.setFailure((VirtualMachineError) ex);
+    public void uncaughtException(final Thread t, final Throwable e) {
+      if (e instanceof VirtualMachineError) {
+        failureSetter.setFailure((VirtualMachineError) e);
-      if ((ex instanceof NoClassDefFoundError)
-          && (t.getName().equals(InternalDistributedSystem.SHUTDOWN_HOOK_NAME))) {
+      if (e instanceof NoClassDefFoundError && t.getName().equals(SHUTDOWN_HOOK_NAME)) {
-            t, ex);
+            t, e);
-        logger.fatal(message, ex);
+        logger.fatal(message, e);
-    void setOnThread(Thread thread) {
+    void setOnThread(final Thread thread) {
