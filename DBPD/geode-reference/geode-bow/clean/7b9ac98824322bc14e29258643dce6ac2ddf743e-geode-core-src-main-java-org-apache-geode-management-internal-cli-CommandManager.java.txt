GEODE-4945: InternalGfshCommand should not have to implement CommandMâ€¦ (#1684)

* Correct class scanning for user gfsh commands

+import java.util.Arrays;
-import java.util.StringTokenizer;
+    List<String> userCommandSources = new ArrayList<>();
-      StringTokenizer tokenizer =
-          new StringTokenizer(System.getProperty(USER_CMD_PACKAGES_PROPERTY), ",");
-      while (tokenizer.hasMoreTokens()) {
-        userCommandPackages.add(tokenizer.nextToken());
-      }
+      userCommandSources.add(System.getProperty(USER_CMD_PACKAGES_PROPERTY));
-      StringTokenizer tokenizer =
-          new StringTokenizer(System.getenv().get(USER_CMD_PACKAGES_ENV_VARIABLE), ",");
-      while (tokenizer.hasMoreTokens()) {
-        userCommandPackages.add(tokenizer.nextToken());
-      }
+      userCommandSources.add(System.getenv().get(USER_CMD_PACKAGES_ENV_VARIABLE));
-        StringTokenizer tokenizer = new StringTokenizer(cacheUserCmdPackages, ",");
-        while (tokenizer.hasMoreTokens()) {
-          userCommandPackages.add(tokenizer.nextToken());
-        }
+        userCommandSources.add(cacheUserCmdPackages);
+    for (String source : userCommandSources) {
+      Arrays.stream(source.split(",")).forEach(userCommandPackages::add);
+    }
+
-        Set<Class<?>> foundClasses = ClasspathScanLoadHelper
-            .scanPackageForClassesImplementing(userCommandPackage, CommandMarker.class);
+        Set<Class<?>> foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(
+            CommandMarker.class, userCommandPackage, GfshCommand.class.getPackage().getName());
-      foundClasses = ClasspathScanLoadHelper.scanPackageForClassesImplementing(
-          "org.apache.geode.management.internal.cli.converters", Converter.class);
+      foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(Converter.class,
+          "org.apache.geode.management.internal.cli.converters");
-      foundClasses = ClasspathScanLoadHelper.scanPackageForClassesImplementing(
-          "org.springframework.shell.converters", Converter.class);
+      foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(Converter.class,
+          "org.springframework.shell.converters");
-      foundClasses = ClasspathScanLoadHelper.scanPackageForClassesImplementing(
-          InternalGfshCommand.class.getPackage().getName(), CommandMarker.class);
+      foundClasses = ClasspathScanLoadHelper.scanPackagesForClassesImplementing(CommandMarker.class,
+          GfshCommand.class.getPackage().getName(),
+          InternalGfshCommand.class.getPackage().getName());
