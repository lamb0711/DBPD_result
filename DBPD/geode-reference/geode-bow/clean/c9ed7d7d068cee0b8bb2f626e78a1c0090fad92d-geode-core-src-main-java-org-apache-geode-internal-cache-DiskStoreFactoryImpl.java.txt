GEODE-8283: Provide REST interface for disk-store creation (#5288)

* GEODE-8283: Provide REST interface for disk-store creation

- Provides create, get, list and delete operations
- Can create with locator only running

Co-Authored-By: Jason Huynh <jhuynh@vmware.com>

* Fix spotless issues

* Add missing documentation files to assembly

* Updating assembly validation txt (#4)

* Updating assembly validation txt
Trying to remove disk store folders after test

* Attempt to clear out disk dirs between runs

* Added temporary folder and forced disk dirs to use the absolute path

* Fix jq issues

* Disk store rest api (#5)

* Updating assembly validation txt
Trying to remove disk store folders after test

* Attempt to clear out disk dirs between runs

* Added temporary folder and forced disk dirs to use the absolute path

* Added tests for groups
Prevent removal of disk store from specific groups to be consistent with region api

* Add JQ testing for disk-store controller

* Change DiskDir size to be Integer

- spottless apply

* Fix serializables

* Remove Id field from DiskStore

- Rebase against develop

Co-authored-by: Jason Huynh <jhuynh@vmware.com>
Co-authored-by: Jason Huynh <huynhja@gmail.com>
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkMinAndMaxOplogSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkMinOplogSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkQueueSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkTimeInterval;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.checkWriteBufferSize;
+import static org.apache.geode.internal.cache.DiskStoreAttributes.verifyNonNegativeDirSize;
+
-
-              new Object[] {CacheXml.COMPACTION_THRESHOLD, compactionThreshold}));
+              CacheXml.COMPACTION_THRESHOLD, compactionThreshold));
-
-              new Object[] {CacheXml.COMPACTION_THRESHOLD, compactionThreshold, 100}));
+              CacheXml.COMPACTION_THRESHOLD, compactionThreshold, 100));
-    if (timeInterval < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Time Interval specified has to be a non-negative number and the value given %s is not acceptable",
-              timeInterval));
-    }
+    checkTimeInterval(timeInterval);
-    DiskStore existing = null;
+    DiskStore existing;
-    return existing;
+    return null;
-              new Object[] {diskDirSizes.length, diskDirs.length}));
+              diskDirSizes.length, diskDirs.length));
-    for (int i = 0; i < diskDirs.length; i++) {
-      if (!diskDirs[i].isDirectory()) {
-        if (!diskDirs[i].mkdirs()) {
+    for (File diskDir : diskDirs) {
+      if (!diskDir.isDirectory()) {
+        if (!diskDir.mkdirs()) {
-                  diskDirs[i]));
+                  diskDir));
-  /**
-   * Verify all directory sizes are positive
-   */
-  public static void verifyNonNegativeDirSize(int[] sizes) {
-    for (int i = 0; i < sizes.length; i++) {
-      if (sizes[i] < 0) {
-        throw new IllegalArgumentException(
-            String.format("Dir size cannot be negative : %s",
-                sizes[i]));
-      }
-    }
-  }
+
-    long MAX = Long.MAX_VALUE / (1024 * 1024);
-    if (maxOplogSize > MAX) {
-      throw new IllegalArgumentException(
-          String.format(
-              "%s has to be a number that does not exceed %s so the value given %s is not acceptable",
-              new Object[] {"max oplog size", maxOplogSize, MAX}));
-    } else if (maxOplogSize < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Maximum Oplog size specified has to be a non-negative number and the value given %s is not acceptable",
-              maxOplogSize));
-    }
+    checkMinAndMaxOplogSize(maxOplogSize);
-    if (maxOplogSizeInBytes < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Maximum Oplog size specified has to be a non-negative number and the value given %s is not acceptable",
-              maxOplogSizeInBytes));
-    }
+    checkMinOplogSize(maxOplogSizeInBytes);
-    if (queueSize < 0) {
-      throw new IllegalArgumentException(
-          String.format(
-              "Queue size specified has to be a non-negative number and the value given %s is not acceptable",
-              queueSize));
-    }
+    checkQueueSize(queueSize);
-    if (writeBufferSize < 0) {
-      // TODO add a message for WriteBufferSize
-      throw new IllegalArgumentException(
-          String.format(
-              "Queue size specified has to be a non-negative number and the value given %s is not acceptable",
-              writeBufferSize));
-    }
+    checkWriteBufferSize(writeBufferSize);
-  // used by hyda
+  // used by hydra
