Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A "connection" to a GemFire distributed system.  A
- * <code>DistributedSystem</code> is created by invoking the {@link
- * #connect} method with a configuration as described <a
- * href="#configuration">below</a>.  A <code>DistributedSystem</code>
- * is used when calling {@link
- * org.apache.geode.cache.CacheFactory#create}.  This class should
- * not be confused with the {@link
- * org.apache.geode.admin.AdminDistributedSystem
- * AdminDistributedSystem} interface that is used for administering a
- * distributed system.
+ * A "connection" to a GemFire distributed system. A <code>DistributedSystem</code> is created by
+ * invoking the {@link #connect} method with a configuration as described
+ * <a href="#configuration">below</a>. A <code>DistributedSystem</code> is used when calling
+ * {@link org.apache.geode.cache.CacheFactory#create}. This class should not be confused with the
+ * {@link org.apache.geode.admin.AdminDistributedSystem AdminDistributedSystem} interface that is
+ * used for administering a distributed system.
- * When a program connects to the distributed system, a "distribution
- * manager" is started in this VM and the other members of the
- * distributed system are located.  This discovery is performed
- * by contacting "locators"
- * running on a given host and port.  All DistributedSystems that are
- * configured to use the same
- * locators are part of the same distributed system.
+ * When a program connects to the distributed system, a "distribution manager" is started in this VM
+ * and the other members of the distributed system are located. This discovery is performed by
+ * contacting "locators" running on a given host and port. All DistributedSystems that are
+ * configured to use the same locators are part of the same distributed system.
- * The current version of GemFire only supports creating one
- * <code>DistributedSystem</code> per virtual machine.  Attempts to
- * connect to multiple distributed systems (that is calling {@link
- * #connect} multiple times with different configuration
- * <code>Properties</code>) will result in an {@link
- * IllegalStateException} being thrown (if <code>connect</code> is
- * invoked multiple times with equivalent <code>Properties</code>,
- * then the same instance of <code>DistributedSystem</code> will be
- * returned).  A common practice is to connect to the distributed
- * system and store a reference to the <code>DistributedSystem</code>
- * object in a well-known location such as a <code>static</code>
- * variable.  This practice provides access to the
- * <code>DistributedSystem</code> slightly faster than invoking
- * <code>connect</code> multiple times.  Note that it is always
- * advisable to {@link #disconnect()} from the distributed system when a
- * program will no longer access it.  Disconnecting frees up certain
- * resources and allows your application to connect to a different
- * distributed system, if desirable.
+ * The current version of GemFire only supports creating one <code>DistributedSystem</code> per
+ * virtual machine. Attempts to connect to multiple distributed systems (that is calling
+ * {@link #connect} multiple times with different configuration <code>Properties</code>) will result
+ * in an {@link IllegalStateException} being thrown (if <code>connect</code> is invoked multiple
+ * times with equivalent <code>Properties</code>, then the same instance of
+ * <code>DistributedSystem</code> will be returned). A common practice is to connect to the
+ * distributed system and store a reference to the <code>DistributedSystem</code> object in a
+ * well-known location such as a <code>static</code> variable. This practice provides access to the
+ * <code>DistributedSystem</code> slightly faster than invoking <code>connect</code> multiple times.
+ * Note that it is always advisable to {@link #disconnect()} from the distributed system when a
+ * program will no longer access it. Disconnecting frees up certain resources and allows your
+ * application to connect to a different distributed system, if desirable.
-  /** 
-   * The instances of <code>DistributedSystem</code> created in this
-   * VM. Presently only one connect to a distributed system is allowed in a VM.
-   * This set is never modified in place (it is always read only) but
-   * the reference can be updated by holders of {@link #existingSystemsLock}.
+  /**
+   * The instances of <code>DistributedSystem</code> created in this VM. Presently only one connect
+   * to a distributed system is allowed in a VM. This set is never modified in place (it is always
+   * read only) but the reference can be updated by holders of {@link #existingSystemsLock}.
-   * This lock must be changed to add or remove a system.
-   * It is notified when a system is removed.
+   * This lock must be changed to add or remove a system. It is notified when a system is removed.
-  ////////////////////////  Static Methods  ////////////////////////
+  //////////////////////// Static Methods ////////////////////////
-   * Connects to a GemFire distributed system with a configuration
-   * supplemented by the given properties.  See {@linkplain ConfigurationProperties}
-   * for available GemFire properties and their meanings.
+   * Connects to a GemFire distributed system with a configuration supplemented by the given
+   * properties. See {@linkplain ConfigurationProperties} for available GemFire properties and their
+   * meanings.
-   * The actual configuration attribute values used to connect comes
-   * from the following sources:
+   * The actual configuration attribute values used to connect comes from the following sources:
-   * <LI>System properties. If a system property named
-   *     "<code>gemfire.</code><em>propertyName</em>" is defined
-   *     and its value is not an empty string
-   *     then its value will be used for the named configuration attribute.
+   * <LI>System properties. If a system property named "<code>gemfire.</code><em>propertyName</em>"
+   * is defined and its value is not an empty string then its value will be used for the named
+   * configuration attribute.
-   * <LI>Code properties. Otherwise if a property is defined in the <code>config</code>
-   *     parameter object and its value is not an empty string
-   *     then its value will be used for that configuration attribute.
-   * <LI>File properties. Otherwise if a property is defined in a configuration property
-   *     file found by this application and its value is not an empty string
-   *     then its value will be used for that configuration attribute.
-   *     A configuration property file may not exist.
-   *     See the following section for how configuration property files are found.
+   * <LI>Code properties. Otherwise if a property is defined in the <code>config</code> parameter
+   * object and its value is not an empty string then its value will be used for that configuration
+   * attribute.
+   * <LI>File properties. Otherwise if a property is defined in a configuration property file found
+   * by this application and its value is not an empty string then its value will be used for that
+   * configuration attribute. A configuration property file may not exist. See the following section
+   * for how configuration property files are found.
-   * The name of the property file can be
-   * specified using the "gemfirePropertyFile" system property.
-   * If the system property is set to a relative file name then it
-   * is searched for in following locations.
-   * If the system property is set to an absolute file name then that
-   * file is used as the property file.
-   * If the system property is not set, then the name of the property
-   * file defaults to "gemfire.properties".  The configuration file is
-   * searched for in the following locations:
+   * The name of the property file can be specified using the "gemfirePropertyFile" system property.
+   * If the system property is set to a relative file name then it is searched for in following
+   * locations. If the system property is set to an absolute file name then that file is used as the
+   * property file. If the system property is not set, then the name of the property file defaults
+   * to "gemfire.properties". The configuration file is searched for in the following locations:
-   * <LI>Current directory (directory in which the VM was
-   *     launched)</LI>
+   * <LI>Current directory (directory in which the VM was launched)</LI>
-   * <LI>Class path (loaded as a {@linkplain
-   *     ClassLoader#getResource(String) system resource})</LI>
+   * <LI>Class path (loaded as a {@linkplain ClassLoader#getResource(String) system resource})</LI>
-   * If the configuration file cannot be located, then the property
-   * will have its default value as described <a
-   * href="#configuration">above</a>.
+   * If the configuration file cannot be located, then the property will have its default value as
+   * described <a href="#configuration">above</a>.
-   * @param config
-   *        The <a href="#configuration">configuration properties</a>
-   *        used when connecting to the distributed system
+   * @param config The <a href="#configuration">configuration properties</a> used when connecting to
+   *        the distributed system
-   * @throws IllegalArgumentException
-   *         If <code>config</code> contains an unknown configuration
-   *         property or a configuration property does not have an
-   *         allowed value.  Note that the values of boolean
-   *         properties are parsed using {@link Boolean#valueOf(java.lang.String)}.
-   *         Therefore all values other than "true" values will be
-   *         considered <code>false</code> -- an exception will not be
-   *         thrown.
-   * @throws IllegalStateException
-   *         If a <code>DistributedSystem</code> with a different
-   *         configuration has already been created in this VM or if
-   *         this VM is {@link
-   *         org.apache.geode.admin.AdminDistributedSystem
-   *         administering} a distributed system.
-   * @throws org.apache.geode.GemFireIOException
-   *         Problems while reading configuration properties file or
-   *         while opening the log file.
-   * @throws org.apache.geode.GemFireConfigException
-   *         The distribution transport is not configured correctly
+   * @throws IllegalArgumentException If <code>config</code> contains an unknown configuration
+   *         property or a configuration property does not have an allowed value. Note that the
+   *         values of boolean properties are parsed using
+   *         {@link Boolean#valueOf(java.lang.String)}. Therefore all values other than "true"
+   *         values will be considered <code>false</code> -- an exception will not be thrown.
+   * @throws IllegalStateException If a <code>DistributedSystem</code> with a different
+   *         configuration has already been created in this VM or if this VM is
+   *         {@link org.apache.geode.admin.AdminDistributedSystem administering} a distributed
+   *         system.
+   * @throws org.apache.geode.GemFireIOException Problems while reading configuration properties
+   *         file or while opening the log file.
+   * @throws org.apache.geode.GemFireConfigException The distribution transport is not configured
+   *         correctly
-   * @deprecated as of 6.5 use {@link CacheFactory#create} or {@link ClientCacheFactory#create} instead.
+   * @deprecated as of 6.5 use {@link CacheFactory#create} or {@link ClientCacheFactory#create}
+   *             instead.
-   * */
+   */
-            } 
-            catch (InterruptedException ex) {
+            } catch (InterruptedException ex) {
-            }
-            finally {
+            } finally {
-            existingSystem.validateSameProperties(config,
-                existingSystem.isConnected());
+            existingSystem.validateSameProperties(config, existingSystem.isConnected());
-          // This should not happen: existingSystem.isConnected()==false && existingSystem.isDisconnecting()==false 
-            throw new AssertionError("system should not be disconnecting==false and isConnected==falsed");
+            // This should not happen: existingSystem.isConnected()==false &&
+            // existingSystem.isDisconnecting()==false
+            throw new AssertionError(
+                "system should not be disconnecting==false and isConnected==falsed");
-      InternalDistributedSystem newSystem =
-        InternalDistributedSystem.newInstance(config);
+      InternalDistributedSystem newSystem = InternalDistributedSystem.newInstance(config);
-      }
-      else {
-        ArrayList l = new ArrayList(size+1);
+      } else {
+        ArrayList l = new ArrayList(size + 1);
+
-        }
-        else if (size == 1) {
+        } else if (size == 1) {
-        }
-        else {
+        } else {
-  
+
-   * Sets the calling thread's socket policy.
-   * This value will override that default set by the
+   * Sets the calling thread's socket policy. This value will override that default set by the
-   * @param conserveSockets If <code>true</code> then calling thread will share
-   *   socket connections with other threads.
-   *   If <code>false</code> then calling thread will have its own sockets.
+   * 
+   * @param conserveSockets If <code>true</code> then calling thread will share socket connections
+   *        with other threads. If <code>false</code> then calling thread will have its own sockets.
+   * 
-   * Returns an existing connection to the distributed system
-   * described by the given properties.
+   * Returns an existing connection to the distributed system described by the given properties.
-    // distributed system.  If we are already connected to the desired
+    // distributed system. If we are already connected to the desired
-    for (Iterator iter = l.iterator(); iter.hasNext(); ) {
-      InternalDistributedSystem existingSystem =
-        (InternalDistributedSystem) iter.next();
+    for (Iterator iter = l.iterator(); iter.hasNext();) {
+      InternalDistributedSystem existingSystem = (InternalDistributedSystem) iter.next();
-   * Returns a connection to the distributed system that is
-   * appropriate for administration.  This method is for internal use
-   * only by the admin API.
+   * Returns a connection to the distributed system that is appropriate for administration. This
+   * method is for internal use only by the admin API.
-      //logger.info("creating new distributed system for admin");
-      //for (java.util.Enumeration en=props.propertyNames(); en.hasMoreElements(); ) {
-      //  String prop=(String)en.nextElement();
-      //  logger.info(prop + "=" + props.getProperty(prop));
-      //}
+      // logger.info("creating new distributed system for admin");
+      // for (java.util.Enumeration en=props.propertyNames(); en.hasMoreElements(); ) {
+      // String prop=(String)en.nextElement();
+      // logger.info(prop + "=" + props.getProperty(prop));
+      // }
+   * 
-      if( existingSystems != null && !existingSystems.isEmpty()) {
+      if (existingSystems != null && !existingSystems.isEmpty()) {
-          LocalizedStrings.DistributedSystem_THIS_VM_ALREADY_HAS_ONE_OR_MORE_DISTRIBUTED_SYSTEM_CONNECTIONS_0
-            .toLocalizedString(existingSystems));
+            LocalizedStrings.DistributedSystem_THIS_VM_ALREADY_HAS_ONE_OR_MORE_DISTRIBUTED_SYSTEM_CONNECTIONS_0
+                .toLocalizedString(existingSystems));
-//   /**
-//    * Connects to a GemFire distributed system with a configuration
-//    * supplemented by the given properties.
-//    *
-//    * @param config
-//    *        The <a href="#configuration">configuration properties</a>
-//    *        used when connecting to the distributed system
-//    * @param callback
-//    *        A user-specified object that is delivered with the {@link
-//    *        org.apache.geode.admin.SystemMembershipEvent}
-//    *        triggered by connecting.
-//    *
-//    * @see #connect(Properties)
-//    * @see org.apache.geode.admin.SystemMembershipListener#memberJoined
-//    *
-//    * @since GemFire 4.0
-//    */
-//   public static DistributedSystem connect(Properties config,
-//                                           Object callback) {
-//     throw new UnsupportedOperationException("Not implemented yet");
-//   }
+  // /**
+  // * Connects to a GemFire distributed system with a configuration
+  // * supplemented by the given properties.
+  // *
+  // * @param config
+  // * The <a href="#configuration">configuration properties</a>
+  // * used when connecting to the distributed system
+  // * @param callback
+  // * A user-specified object that is delivered with the {@link
+  // * org.apache.geode.admin.SystemMembershipEvent}
+  // * triggered by connecting.
+  // *
+  // * @see #connect(Properties)
+  // * @see org.apache.geode.admin.SystemMembershipListener#memberJoined
+  // *
+  // * @since GemFire 4.0
+  // */
+  // public static DistributedSystem connect(Properties config,
+  // Object callback) {
+  // throw new UnsupportedOperationException("Not implemented yet");
+  // }
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Creates a new instance of <code>DistributedSystem</code>.  This
-   * constructor is protected so that it may only be invoked by
-   * subclasses.
+   * Creates a new instance of <code>DistributedSystem</code>. This constructor is protected so that
+   * it may only be invoked by subclasses.
-  ////////////////////  Instance Methods  ////////////////////
+  //////////////////// Instance Methods ////////////////////
-   * Returns the <code>LogWriter</code> used for logging information.
-   * See <A href="#logFile">logFile</A>.
+   * Returns the <code>LogWriter</code> used for logging information. See
+   * <A href="#logFile">logFile</A>.
-   * @throws IllegalStateException
-   *         This VM has {@linkplain #disconnect() disconnected} from the
+   * @throws IllegalStateException This VM has {@linkplain #disconnect() disconnected} from the
-   * Returns the <code>LogWriter</code> used for logging security related
-   * information. See <A href="#logFile">logFile</A>.
+   * Returns the <code>LogWriter</code> used for logging security related information. See
+   * <A href="#logFile">logFile</A>.
-   * @throws IllegalStateException
-   *                 This VM has {@linkplain #disconnect() disconnected} from
-   *                 the distributed system.
+   * @throws IllegalStateException This VM has {@linkplain #disconnect() disconnected} from the
+   *         distributed system.
+   * 
+   * 
-  
+
-   * Disconnects from this distributed system.  This operation will
-   * close the distribution manager and render the {@link
-   * org.apache.geode.cache.Cache Cache} and all distributed
-   * collections obtained from this distributed system inoperable.
-   * After a disconnect has completed, a VM may connect to another
-   * distributed system.
+   * Disconnects from this distributed system. This operation will close the distribution manager
+   * and render the {@link org.apache.geode.cache.Cache Cache} and all distributed collections
+   * obtained from this distributed system inoperable. After a disconnect has completed, a VM may
+   * connect to another distributed system.
-   * Attempts to access a distributed system after a VM has
-   * disconnected from it will result in an {@link
-   * IllegalStateException} being thrown.
+   * Attempts to access a distributed system after a VM has disconnected from it will result in an
+   * {@link IllegalStateException} being thrown.
+   * 
+
-   * Returns whether or not this <code>DistributedSystem</code> is
-   * connected to the distributed system.
+   * Returns whether or not this <code>DistributedSystem</code> is connected to the distributed
+   * system.
-   * @deprecated {@link #getDistributedMember} provides an identity for
-   *             this connection that is unique across the entire
-   *             distributed system.
+   * @deprecated {@link #getDistributedMember} provides an identity for this connection that is
+   *             unique across the entire distributed system.
-   * Returns a string that uniquely identifies this connection to the
-   * distributed system.
+   * Returns a string that uniquely identifies this connection to the distributed system.
-   * Returns the {@link DistributedMember} that identifies this connection to
-   * the distributed system.
+   * Returns the {@link DistributedMember} that identifies this connection to the distributed
+   * system.
+   * 
-  
+
+   * 
-   * Returns a set of all the members in the given group.
-   * Members join a group be setting the "groups" gemfire property.
+   * Returns a set of all the members in the given group. Members join a group be setting the
+   * "groups" gemfire property.
+   * 
-  
-  
+
+
-   * @return a set of all DistributedMembers that have any interfaces
-   * that match the given IP address. May be empty if there are no members.
-   * 
-   * @since GemFire 7.1
-   */ 
-   public abstract Set<DistributedMember> findDistributedMembers(InetAddress address);
-
-   /**
-   * Find the distributed member with the given name
-   * 
-   * @return the distributed member that has the given name, or null if
-   * no member is currently running with the given name.
+   * @return a set of all DistributedMembers that have any interfaces that match the given IP
+   *         address. May be empty if there are no members.
-   public abstract DistributedMember findDistributedMember(String name);
+  public abstract Set<DistributedMember> findDistributedMembers(InetAddress address);
-   * Returns the <a href="#name">name</a> of this connection to the
-   * distributed system.
+   * Find the distributed member with the given name
+   * 
+   * @return the distributed member that has the given name, or null if no member is currently
+   *         running with the given name.
+   * 
+   * @since GemFire 7.1
+   */
+  public abstract DistributedMember findDistributedMember(String name);
+
+  /**
+   * Returns the <a href="#name">name</a> of this connection to the distributed system.
-   * The <code>PROPERTIES_FILE_PROPERTY</code> is the system property
-   * that can be used to specify the name of the properties file that the 
-   * connect method will check for when it looks for a properties file. Unless
-   * the value specifies the fully qualified path to the file, the file will 
+   * The <code>PROPERTIES_FILE_PROPERTY</code> is the system property that can be used to specify
+   * the name of the properties file that the connect method will check for when it looks for a
+   * properties file. Unless the value specifies the fully qualified path to the file, the file will
-   * <li> the current directory
-   * <li> the home directory
-   * <li> the class path
+   * <li>the current directory
+   * <li>the home directory
+   * <li>the class path
-   * The default value is {@link #PROPERTIES_FILE_DEFAULT}. However 
-   * if the <code>PROPERTIES_FILE_PROPERTY</code> is set then its value 
-   * will be used instead of the default. If this value is a relative file
-   * system path then the above search is done.  If it is an absolute
-   * file system path then that file must exist; no search for it is
-   * done.
+   * The default value is {@link #PROPERTIES_FILE_DEFAULT}. However if the
+   * <code>PROPERTIES_FILE_PROPERTY</code> is set then its value will be used instead of the
+   * default. If this value is a relative file system path then the above search is done. If it is
+   * an absolute file system path then that file must exist; no search for it is done.
-  
-  /** 
+
+  /**
-   * <code>"gemfire.properties"</code>. The location of the file will be 
-   * resolved during connect as described for {@link #PROPERTIES_FILE_PROPERTY}.
+   * <code>"gemfire.properties"</code>. The location of the file will be resolved during connect as
+   * described for {@link #PROPERTIES_FILE_PROPERTY}.
-  public static final String PROPERTIES_FILE_DEFAULT = DistributionConfig.GEMFIRE_PREFIX + "properties";
+  public static final String PROPERTIES_FILE_DEFAULT =
+      DistributionConfig.GEMFIRE_PREFIX + "properties";
-   * Returns the current value of {@link #PROPERTIES_FILE_PROPERTY} system 
-   * property if set or the default value {@link #PROPERTIES_FILE_DEFAULT}.
+   * Returns the current value of {@link #PROPERTIES_FILE_PROPERTY} system property if set or the
+   * default value {@link #PROPERTIES_FILE_DEFAULT}.
-	return System.getProperty(PROPERTIES_FILE_PROPERTY, PROPERTIES_FILE_DEFAULT);
+    return System.getProperty(PROPERTIES_FILE_PROPERTY, PROPERTIES_FILE_DEFAULT);
-  
+
-   * The <code>PROPERTY_FILE</code> is the name of the
-   * properties file that the connect method will check for when
-   * it looks for a properties file.
-   * The file will be searched for, in order, in the following directories:
+   * The <code>PROPERTY_FILE</code> is the name of the properties file that the connect method will
+   * check for when it looks for a properties file. The file will be searched for, in order, in the
+   * following directories:
-   * <li> the current directory
-   * <li> the home directory
-   * <li> the class path
+   * <li>the current directory
+   * <li>the home directory
+   * <li>the class path
-   * The default value of PROPERTY_FILE is
-   * <code>"gemfire.properties"</code>.  However if the
-   * "gemfirePropertyFile" system property is set then its value is
-   * the value of PROPERTY_FILE. If this value is a relative file
-   * system path then the above search is done.  If it is an absolute
-   * file system path then that file must exist; no search for it is
-   * done.
+   * The default value of PROPERTY_FILE is <code>"gemfire.properties"</code>. However if the
+   * "gemfirePropertyFile" system property is set then its value is the value of PROPERTY_FILE. If
+   * this value is a relative file system path then the above search is done. If it is an absolute
+   * file system path then that file must exist; no search for it is done.
-   * @deprecated As of 9.0, please use {@link #getPropertiesFile()} instead. 
+   * @deprecated As of 9.0, please use {@link #getPropertiesFile()} instead.
-   * The <code>SECURITY_PROPERTIES_FILE_PROPERTY</code> is the system property
-   * that can be used to specify the name of the property file that the 
-   * connect method will check for when it looks for a property file. Unless
-   * the value specifies the fully qualified path to the file, the file will 
+   * The <code>SECURITY_PROPERTIES_FILE_PROPERTY</code> is the system property that can be used to
+   * specify the name of the property file that the connect method will check for when it looks for
+   * a property file. Unless the value specifies the fully qualified path to the file, the file will
-   * <li> the current directory
-   * <li> the home directory
-   * <li> the class path
+   * <li>the current directory
+   * <li>the home directory
+   * <li>the class path
-   * The default value is {@link #SECURITY_PROPERTIES_FILE_DEFAULT}. However 
-   * if the <code>SECURITY_PROPERTIES_FILE_PROPERTY</code> is set then its value 
-   * will be used instead of the default. If this value is a relative file
-   * system path then the above search is done.  If it is an absolute
-   * file system path then that file must exist; no search for it is
-   * done.
+   * The default value is {@link #SECURITY_PROPERTIES_FILE_DEFAULT}. However if the
+   * <code>SECURITY_PROPERTIES_FILE_PROPERTY</code> is set then its value will be used instead of
+   * the default. If this value is a relative file system path then the above search is done. If it
+   * is an absolute file system path then that file must exist; no search for it is done.
-  
-  /** 
+
+  /**
-   * <code>"gfsecurity.properties"</code>. The location of the file will be 
-   * resolved during connect as described for {@link #SECURITY_PROPERTIES_FILE_PROPERTY}.
+   * <code>"gfsecurity.properties"</code>. The location of the file will be resolved during connect
+   * as described for {@link #SECURITY_PROPERTIES_FILE_PROPERTY}.
-   * Returns the current value of {@link #SECURITY_PROPERTIES_FILE_PROPERTY} system 
-   * property if set or the default value {@link #SECURITY_PROPERTIES_FILE_DEFAULT}.
+   * Returns the current value of {@link #SECURITY_PROPERTIES_FILE_PROPERTY} system property if set
+   * or the default value {@link #SECURITY_PROPERTIES_FILE_DEFAULT}.
-	return System.getProperty(SECURITY_PROPERTIES_FILE_PROPERTY, SECURITY_PROPERTIES_FILE_DEFAULT);
+    return System.getProperty(SECURITY_PROPERTIES_FILE_PROPERTY, SECURITY_PROPERTIES_FILE_DEFAULT);
-  
+
-   * The <code>SECURITY_PROPERTY_FILE</code> is the name of the
-   * property file that the connect method will check for when
-   * it looks for a security property file.
-   * The file will be searched for, in order, in the following directories:
+   * The <code>SECURITY_PROPERTY_FILE</code> is the name of the property file that the connect
+   * method will check for when it looks for a security property file. The file will be searched
+   * for, in order, in the following directories:
-   * <li> the current directory
-   * <li> the home directory
-   * <li> the class path
+   * <li>the current directory
+   * <li>the home directory
+   * <li>the class path
-   * The default value of SECURITY_PROPERTY_FILE is
-   * <code>"gfsecurity.properties"</code>.  However if the
-   * "gemfireSecurityPropertyFile" system property is set then its value is
-   * the value of SECURITY_PROPERTY_FILE. If this value is a relative file
-   * system path then the above search is done.  If it is an absolute
-   * file system path then that file must exist; no search for it is
+   * The default value of SECURITY_PROPERTY_FILE is <code>"gfsecurity.properties"</code>. However if
+   * the "gemfireSecurityPropertyFile" system property is set then its value is the value of
+   * SECURITY_PROPERTY_FILE. If this value is a relative file system path then the above search is
+   * done. If it is an absolute file system path then that file must exist; no search for it is
-   * @deprecated As of 9.0, please use {@link #getSecurityPropertiesFile()} instead. 
+   * @deprecated As of 9.0, please use {@link #getSecurityPropertiesFile()} instead.
-   * Gets an <code>URL</code> for the properties file, if one can be found,
-   * that the connect method will use as its properties file.
+   * Gets an <code>URL</code> for the properties file, if one can be found, that the connect method
+   * will use as its properties file.
-   * See {@link #PROPERTIES_FILE_PROPERTY} for information on the name of
-   * the properties file and what locations it will be looked for in.
+   * See {@link #PROPERTIES_FILE_PROPERTY} for information on the name of the properties file and
+   * what locations it will be looked for in.
-   * @return a <code>URL</code> that names the GemFire property file.
-   *    Null is returned if no property file was found.
+   * @return a <code>URL</code> that names the GemFire property file. Null is returned if no
+   *         property file was found.
-   * Gets an <code>URL</code> for the property file, if one can be found,
-   * that the connect method will use as its property file.
+   * Gets an <code>URL</code> for the property file, if one can be found, that the connect method
+   * will use as its property file.
-   * See {@link #PROPERTIES_FILE_PROPERTY} for information on the name of
-   * the property file and what locations it will be looked for in.
+   * See {@link #PROPERTIES_FILE_PROPERTY} for information on the name of the property file and what
+   * locations it will be looked for in.
-   * @return a <code>URL</code> that names the GemFire property file.
-   *    Null is returned if no property file was found.
+   * @return a <code>URL</code> that names the GemFire property file. Null is returned if no
+   *         property file was found.
-   * Gets an <code>URL</code> for the security properties file, if one can be found,
-   * that the connect method will use as its properties file.
+   * Gets an <code>URL</code> for the security properties file, if one can be found, that the
+   * connect method will use as its properties file.
-   * See {@link #SECURITY_PROPERTIES_FILE_PROPERTY} for information on the name of
-   * the properties file and what locations it will be looked for in.
+   * See {@link #SECURITY_PROPERTIES_FILE_PROPERTY} for information on the name of the properties
+   * file and what locations it will be looked for in.
-   * @return a <code>URL</code> that names the GemFire security properties file.
-   *    Null is returned if no properties file was found.
+   * @return a <code>URL</code> that names the GemFire security properties file. Null is returned if
+   *         no properties file was found.
-  
+
-   * Test to see whether the DistributedSystem is in the process of reconnecting
-   * and recreating the cache after it has been removed from the system
-   * by other members or has shut down due to missing Roles and is reconnecting.<p>
-   * This will also return true if the DistributedSystem has finished reconnecting.
-   * When reconnect has completed you can use {@link DistributedSystem#getReconnectedSystem} to
-   * retrieve the new distributed system.
+   * Test to see whether the DistributedSystem is in the process of reconnecting and recreating the
+   * cache after it has been removed from the system by other members or has shut down due to
+   * missing Roles and is reconnecting.
+   * <p>
+   * This will also return true if the DistributedSystem has finished reconnecting. When reconnect
+   * has completed you can use {@link DistributedSystem#getReconnectedSystem} to retrieve the new
+   * distributed system.
-  
+
-   * Wait for the DistributedSystem to finish reconnecting to the system
-   * and recreate the cache.
+   * Wait for the DistributedSystem to finish reconnecting to the system and recreate the cache.
-  abstract public boolean waitUntilReconnected(long time, TimeUnit units) throws InterruptedException;
-  
+  abstract public boolean waitUntilReconnected(long time, TimeUnit units)
+      throws InterruptedException;
+
-   * Force the DistributedSystem to stop reconnecting.  If the DistributedSystem
-   * is currently connected this will disconnect it and close the cache.
+   * Force the DistributedSystem to stop reconnecting. If the DistributedSystem is currently
+   * connected this will disconnect it and close the cache.
-  
+
