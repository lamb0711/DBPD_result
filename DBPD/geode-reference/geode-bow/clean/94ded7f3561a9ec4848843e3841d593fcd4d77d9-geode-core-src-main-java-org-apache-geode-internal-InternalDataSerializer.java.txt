GEODE-4672 Geode fails to start with JDK 9 if validate-serializable-objects is set

The ObjectInputFilter wrapper now uses reflection and a dynamic
proxy to interact with the serialization filter classes. A dynamic
proxy is needed since we have to implement a method specified in
a class whose package has changed in the JDK. The logic of the filter
has not been changed.

I also replaced a couple of recently added white-list wildcards with specific
classes and added a javadoc for the whitelist in InternalDataSerializer.
I opened a new JIRA ticket concerning another wildcard that was recently
added for the JDBC connector and left a TODO in place for this.

This closes #1526

+
+
+  /**
+   * This list contains classes that Geode's classes subclass, such as antlr AST classes which
+   * are used by our Object Query Language. It also contains certain
+   * classes that are DataSerializable but end up being serialized as part of other serializable
+   * objects. VersionedObjectList, for instance, is serialized as part of a
+   * partial putAll exception object.
+   * <p>
+   * Do not java-serialize objects that Geode does not have complete control over. This
+   * leaves us open to security attacks such as Gadget Chains and compromises the ability
+   * to do a rolling upgrade from one version of Geode to the next.
+   * <p>
+   * In general you shouldn't use java serialization and you should implement
+   * DataSerializableFixedID
+   * for internal Geode objects. This gives you better control over backward-compatibility.
+   * <p>
+   * Do not add to this list unless absolutely necessary. Instead put your classes either
+   * in the sanctionedSerializables file for your module or in its excludedClasses file.
+   * Run AnalyzeSerializables to generate the content for the file.
+   * <p>
+   */
-          + ";org.apache.commons.modeler.AttributeInfo" // old Admin API
-          + ";org.apache.commons.modeler.FeatureInfo" // old Admin API
-          + ";org.apache.commons.modeler.ManagedBean" // old Admin API
-          + ";org.apache.geode.distributed.internal.DistributionConfigSnapshot" // old Admin API
-          + ";org.apache.geode.distributed.internal.RuntimeDistributionConfigImpl" // old Admin API
-          + ";org.apache.geode.distributed.internal.DistributionConfigImpl" // old Admin API
-          + ";org.apache.geode.distributed.internal.membership.InternalDistributedMember" // RegionSnapshotService
-                                                                                          // function
-                                                                                          // WindowedExportFunction
+
+          // old Admin API
+          + ";org.apache.commons.modeler.AttributeInfo" + ";org.apache.commons.modeler.FeatureInfo"
+          + ";org.apache.commons.modeler.ManagedBean"
+          + ";org.apache.geode.distributed.internal.DistributionConfigSnapshot"
+          + ";org.apache.geode.distributed.internal.RuntimeDistributionConfigImpl"
+          + ";org.apache.geode.distributed.internal.DistributionConfigImpl"
+
+          // WindowedExportFunction, RegionSnapshotService
+          + ";org.apache.geode.distributed.internal.membership.InternalDistributedMember"
+          // putAll
-          + ";org.apache.shiro.*;org.apache.shiro.authz.*;org.apache.shiro.authc.*" // security
-                                                                                    // services
-          + ";org.apache.logging.log4j.**" // export logs
-          + ";org.apache.geode.connectors.jdbc.internal.**"
-          + ";org.apache.geode.modules.util.SessionCustomExpiry" // geode-modules
-          + ";com.healthmarketscience.rmiio.*;com.sun.proxy.*" // Jar deployment
-          + ";";
+
+          // security services
+          + ";org.apache.shiro.*;org.apache.shiro.authz.*;org.apache.shiro.authc.*"
+
+          // export logs
+          + ";org.apache.logging.log4j.Level" + ";org.apache.logging.log4j.spi.StandardLevel"
+
+          // jar deployment
+          + ";com.sun.proxy.$Proxy*" + ";com.healthmarketscience.rmiio.RemoteInputStream"
+
+          + ";org.apache.geode.connectors.jdbc.internal.**" // TODO - remove this! See GEODE-4752
+
+          // geode-modules
+          + ";org.apache.geode.modules.util.SessionCustomExpiry" + ";";
-      if (!ClassUtils.isClassAvailable("sun.misc.ObjectInputFilter")) {
+      if (!ClassUtils.isClassAvailable("sun.misc.ObjectInputFilter")
+          && !ClassUtils.isClassAvailable("java.io.ObjectInputFilter")) {
-            "A serialization filter has been specified but this version of Java does not support serialization filters - sun.misc.ObjectInputFilter is not available");
+            "A serialization filter has been specified but this version of Java does not support serialization filters - ObjectInputFilter is not available");
