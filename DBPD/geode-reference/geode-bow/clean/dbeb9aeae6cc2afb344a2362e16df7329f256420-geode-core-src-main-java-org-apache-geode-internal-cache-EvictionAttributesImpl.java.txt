Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Defines the attributes for configuring the eviction controller associated
- * with a <code>Region</code>. EvictionAttributesImpl were born out of the
- * previoulsy deprecated CapacityController interface. Eviction, as defined
- * here, is the process of removing an Entry from the Region and potentially
- * placing it elsewhere, as defined by the
- * {@link org.apache.geode.cache.EvictionAction}. The algorithms used to
- * determine when to perform the <code>EvictionAction</code> are enumerated in
- * the {@link org.apache.geode.cache.EvictionAlgorithm} class.
+ * Defines the attributes for configuring the eviction controller associated with a
+ * <code>Region</code>. EvictionAttributesImpl were born out of the previoulsy deprecated
+ * CapacityController interface. Eviction, as defined here, is the process of removing an Entry from
+ * the Region and potentially placing it elsewhere, as defined by the
+ * {@link org.apache.geode.cache.EvictionAction}. The algorithms used to determine when to perform
+ * the <code>EvictionAction</code> are enumerated in the
+ * {@link org.apache.geode.cache.EvictionAlgorithm} class.
-public final class EvictionAttributesImpl extends EvictionAttributes 
-  implements EvictionAttributesMutator
-{
+public final class EvictionAttributesImpl extends EvictionAttributes
+    implements EvictionAttributesMutator {
- /** The Eviction Controller instance generated as a result of processing this instance 
-  * Typically used for any mutation operations
-  */
+  /**
+   * The Eviction Controller instance generated as a result of processing this instance Typically
+   * used for any mutation operations
+   */
-  public EvictionAttributesImpl() {
-  }
-  
+  public EvictionAttributesImpl() {}
+
-   * construct a new EvictionAttributes with the same characteristics
-   * as the given attributes, but not sharing the same evictionController.
+   * construct a new EvictionAttributes with the same characteristics as the given attributes, but
+   * not sharing the same evictionController.
-   * <p>author bruce
+   * <p>
+   * author bruce
-    //this.evictionController = null;
+    // this.evictionController = null;
-  
-  public EvictionAttributesImpl setAlgorithm(EvictionAlgorithm algorithm)
-  {
+
+  public EvictionAttributesImpl setAlgorithm(EvictionAlgorithm algorithm) {
-  public  EvictionAttributesImpl setObjectSizer(ObjectSizer memorySizer)
-  {
+  public EvictionAttributesImpl setObjectSizer(ObjectSizer memorySizer) {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  public ObjectSizer getObjectSizer()
-  {
+  public ObjectSizer getObjectSizer() {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  public EvictionAlgorithm getAlgorithm()
-  {
+  public EvictionAlgorithm getAlgorithm() {
-  public void setMaximum(int maximum)
-  {
+  public void setMaximum(int maximum) {
-   * @return the instance of {@link EvictionAttributesImpl} on which this method was
-   *         called
+   * @return the instance of {@link EvictionAttributesImpl} on which this method was called
-  public EvictionAttributesImpl internalSetMaximum(int maximum)
-  {
+  public EvictionAttributesImpl internalSetMaximum(int maximum) {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  public int getMaximum()
-  {
+  public int getMaximum() {
-   * Sets the {@link EvictionAction} on the {@link EvictionAttributesImpl} that the
-   * given {@link EvictionAlgorithm} uses to perform the eviction.
+   * Sets the {@link EvictionAction} on the {@link EvictionAttributesImpl} that the given
+   * {@link EvictionAlgorithm} uses to perform the eviction.
-   * @param action
-   *          the {@link EvictionAction} used by the {@link EvictionAction}
-   * @return the instance of {@link EvictionAttributesMutator} on which this
-   *         method was called
+   * @param action the {@link EvictionAction} used by the {@link EvictionAction}
+   * @return the instance of {@link EvictionAttributesMutator} on which this method was called
-  public EvictionAttributesImpl setAction(EvictionAction action)
-  {
+  public EvictionAttributesImpl setAction(EvictionAction action) {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  public EvictionAction getAction()
-  {
+  public EvictionAction getAction() {
-  /** 
+  /**
-   * @return the super of the eviction controller or null if no {@link EvictionAction} 
-   * is set.
+   * @return the super of the eviction controller or null if no {@link EvictionAction} is set.
-  public LRUAlgorithm createEvictionController(Region region, boolean isOffHeap) 
-  {
+  public LRUAlgorithm createEvictionController(Region region, boolean isOffHeap) {
-      this.evictionController = new LRUCapacityController(this.maximum, this.action,region); 
+      this.evictionController = new LRUCapacityController(this.maximum, this.action, region);
-      this.evictionController = new HeapLRUCapacityController(this.sizer,this.action,region);       
+      this.evictionController = new HeapLRUCapacityController(this.sizer, this.action, region);
-      this.evictionController = new MemLRUCapacityController(this.maximum, this.sizer, this.action,region, isOffHeap);
-    } else if(this.algorithm == EvictionAlgorithm.LIFO_ENTRY){
-      this.evictionController = new LRUCapacityController(this.maximum, this.action,region);
-    } else if(this.algorithm == EvictionAlgorithm.LIFO_MEMORY){
-      this.evictionController = new MemLRUCapacityController(this.maximum, this.sizer, this.action,region, isOffHeap);
-    }  else {
+      this.evictionController =
+          new MemLRUCapacityController(this.maximum, this.sizer, this.action, region, isOffHeap);
+    } else if (this.algorithm == EvictionAlgorithm.LIFO_ENTRY) {
+      this.evictionController = new LRUCapacityController(this.maximum, this.action, region);
+    } else if (this.algorithm == EvictionAlgorithm.LIFO_MEMORY) {
+      this.evictionController =
+          new MemLRUCapacityController(this.maximum, this.sizer, this.action, region, isOffHeap);
+    } else {
-  
+
-  
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.action = (EvictionAction)DataSerializer.readObject(in);
-    this.algorithm = (EvictionAlgorithm)DataSerializer.readObject(in);
+    this.action = (EvictionAction) DataSerializer.readObject(in);
+    this.algorithm = (EvictionAlgorithm) DataSerializer.readObject(in);
-  
+
- 
+
