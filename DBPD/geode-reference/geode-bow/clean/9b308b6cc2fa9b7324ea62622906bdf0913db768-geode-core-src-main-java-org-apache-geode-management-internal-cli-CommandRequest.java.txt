GEODE-3096: pulling in refactoring work on HttpOperationInvoker

* Use HttpOperationInvoker to replace RestHttpOperationInvoker and SimpleHttpOperationInvoker
* Use one single ShellCommandController to replace all command controllers
* do not allow execution of commands that require client side file data gathering to be executed only on the locator/server
* deprecate CommandService and CommandStatement
* simplify CommandRequest, delete geode's ClientHttpRequest
* fix tests

-import org.apache.geode.internal.lang.StringUtils;
-import org.apache.geode.management.cli.CliMetaData;
-
+import java.net.URI;
-import java.util.HashMap;
+import org.springframework.web.util.UriComponentsBuilder;
+
+import org.apache.geode.annotations.TestingOnly;
+import org.apache.geode.management.cli.CliMetaData;
+
-
+  protected static final String CMD_QUERY_PARAMETER = "cmd";
+  protected static final String REST_API_MANAGEMENT_COMMANDS_URI = "/management/commands";
-
-
-  private final Map<String, String> customParameters = new HashMap<String, String>();
-  private String customInput;
+  @TestingOnly
-  public CommandRequest(final GfshParseResult parseResult, final Map<String, String> env) {
-    this(parseResult, env, null);
-  }
-
-  public String getName() {
-    if (getUserInput() != null) {
-      final String[] userInputTokenized = getUserInput().split("\\s");
-      final StringBuilder buffer = new StringBuilder();
-
-      for (final String token : userInputTokenized) {
-        if (!token.startsWith(OPTION_SPECIFIER)) {
-          buffer.append(token).append(StringUtils.SPACE);
-        }
-      }
-
-      return buffer.toString().trim();
-    } else {
-      return "unknown";
-    }
-  }
-
-  public String getCustomInput() {
-    return customInput;
-  }
-  public void setCustomInput(final String input) {
-    this.customInput = input;
-  }
-
-  public Map<String, String> getCustomParameters() {
-    return customParameters;
-  }
-  public String getInput() {
-    return StringUtils.defaultIfBlank(getCustomInput(), getUserInput());
-  }
-
-  public Map<String, String> getParameters() {
-    final Map<String, String> parameters = new HashMap<>();
-    for (Map.Entry<String, String> mapEntry : getUserParameters().entrySet()) {
-      String key = mapEntry.getKey();
-      String value = mapEntry.getValue();
-
-      if (hasQuotesAroundNegativeNumber(value)) {
-        String trimmed = value.substring(1, value.length() - 1);
-        parameters.put(key, trimmed);
-      } else {
-        parameters.put(key, value);
-      }
-    }
-    parameters.putAll(getCustomParameters());
-    return Collections.unmodifiableMap(parameters);
-  }
-
-  public Map<String, String> getUserParameters() {
+  @TestingOnly
+  public Map<String, String> getParameters() {
-  private boolean hasQuotesAroundNegativeNumber(String value) {
-    if (value == null) {
-      return false;
-    } else {
-      return value.startsWith("\"") && value.endsWith("\"") && value.matches("\"-[0-9]+\"");
-    }
+  public URI getHttpRequestUrl(String baseUrl) {
+    return UriComponentsBuilder.fromHttpUrl(baseUrl).path(REST_API_MANAGEMENT_COMMANDS_URI)
+        .queryParam(CMD_QUERY_PARAMETER, getUserInput()).build().encode().toUri();
