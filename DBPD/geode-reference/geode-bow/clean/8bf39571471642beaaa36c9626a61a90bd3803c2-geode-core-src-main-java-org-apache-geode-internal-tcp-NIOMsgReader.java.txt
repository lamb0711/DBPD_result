Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message reader which reads from the socket
- * using (blocking) nio.
+ * A message reader which reads from the socket using (blocking) nio.
-  
+
-  private int lastProcessedPosition; 
-  
+  private int lastProcessedPosition;
+
-    
-    while(lastReadPosition - lastProcessedPosition < bytes) {
+
+    while (lastReadPosition - lastProcessedPosition < bytes) {
-      if(bytesRead < 0) {
+      if (bytesRead < 0) {
-  
+
-    //Ok, so we have a buffer that's big enough
-    if(nioInputBuffer != null && nioInputBuffer.capacity() > bufferSize) {
-      if(nioInputBuffer.capacity() - lastProcessedPosition < bufferSize) {
+    // Ok, so we have a buffer that's big enough
+    if (nioInputBuffer != null && nioInputBuffer.capacity() > bufferSize) {
+      if (nioInputBuffer.capacity() - lastProcessedPosition < bufferSize) {
-    
-    //otherwise, we have no buffer to a buffer that's too small
-    
+
+    // otherwise, we have no buffer to a buffer that's too small
+
-      if(allocSize > bufferSize) {
+      if (allocSize > bufferSize) {
-    
-    if(oldBuffer != null) {
+
+    if (oldBuffer != null) {
-    if(tmp != null) {
+    if (tmp != null) {
