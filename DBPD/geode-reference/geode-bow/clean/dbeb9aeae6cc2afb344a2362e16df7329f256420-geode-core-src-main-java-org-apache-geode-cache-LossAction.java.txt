Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Specifies how access to the region is affected when one or more required
- * roles are lost. A role is lost when it is are offline and no longer
- * present in the system membership.
- * The <code>LossAction</code> is specified when configuring a region's
+ * Specifies how access to the region is affected when one or more required roles are lost. A role
+ * is lost when it is are offline and no longer present in the system membership. The
+ * <code>LossAction</code> is specified when configuring a region's
-  //   LossAction, package.html
-  
+  // LossAction, package.html
+
-   * The region is unavailable when required roles are missing. All operations
-   * including read and write access are denied.  All read and write operations
-   * on the region will result in {@link RegionAccessException} while any 
-   * required roles are absent.  Basic administration of the region is allowed,
-   * including {@linkplain Region#close close} and 
+   * The region is unavailable when required roles are missing. All operations including read and
+   * write access are denied. All read and write operations on the region will result in
+   * {@link RegionAccessException} while any required roles are absent. Basic administration of the
+   * region is allowed, including {@linkplain Region#close close} and
-  public static final LossAction NO_ACCESS = 
-      new LossAction("NO_ACCESS");
+  public static final LossAction NO_ACCESS = new LossAction("NO_ACCESS");
-  /** 
-   * Only local access to the region is allowed when required roles are 
-   * missing.  All distributed write operations on the region will throw 
-   * {@link RegionAccessException} while any required roles are absent.
-   * Reads which result in a netSearch behave normally, while any attempt
-   * to invoke a netLoad is not allowed.
+  /**
+   * Only local access to the region is allowed when required roles are missing. All distributed
+   * write operations on the region will throw {@link RegionAccessException} while any required
+   * roles are absent. Reads which result in a netSearch behave normally, while any attempt to
+   * invoke a netLoad is not allowed.
-  public static final LossAction LIMITED_ACCESS = 
-      new LossAction("LIMITED_ACCESS");
+  public static final LossAction LIMITED_ACCESS = new LossAction("LIMITED_ACCESS");
-  /** 
-   * Access to the region is unaffected when required roles are missing. 
+  /**
+   * Access to the region is unaffected when required roles are missing.
-  public static final LossAction FULL_ACCESS = 
-      new LossAction("FULL_ACCESS");
+  public static final LossAction FULL_ACCESS = new LossAction("FULL_ACCESS");
-  /** 
-   * Loss of required roles causes the entire cache to be closed. In addition,
-   * this process will disconnect from the DistributedSystem and then
-   * reconnect. Attempting to use any existing references to the regions
-   * or cache will throw a {@link CacheClosedException}.
+  /**
+   * Loss of required roles causes the entire cache to be closed. In addition, this process will
+   * disconnect from the DistributedSystem and then reconnect. Attempting to use any existing
+   * references to the regions or cache will throw a {@link CacheClosedException}.
-  public static final LossAction RECONNECT = 
-      new LossAction("RECONNECT");
+  public static final LossAction RECONNECT = new LossAction("RECONNECT");
-  
+
-    { NO_ACCESS, LIMITED_ACCESS, FULL_ACCESS, RECONNECT };
-  
+      {NO_ACCESS, LIMITED_ACCESS, FULL_ACCESS, RECONNECT};
+
-  public static final List VALUES = 
-    Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));
+  public static final List VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));
-    return PRIVATE_VALUES[ordinal];  // Canonicalize
+    return PRIVATE_VALUES[ordinal]; // Canonicalize
-  
+
-      this.name = name;
+    this.name = name;
-  
+
-  
+
-      throw new IllegalArgumentException(LocalizedStrings.LossAction_INVALID_LOSSACTION_NAME_0.toLocalizedString(name));
+      throw new IllegalArgumentException(
+          LocalizedStrings.LossAction_INVALID_LOSSACTION_NAME_0.toLocalizedString(name));
-    throw new IllegalArgumentException(LocalizedStrings.LossAction_INVALID_LOSSACTION_NAME_0.toLocalizedString(name));
+    throw new IllegalArgumentException(
+        LocalizedStrings.LossAction_INVALID_LOSSACTION_NAME_0.toLocalizedString(name));
-  
+
-  
+
-  
+
-  
+
-  
-  /** 
+
+  /**
+   * 
-      return this.name;
+    return this.name;
-  
+
