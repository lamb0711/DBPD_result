Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.internal.cache.tier.sockets.command.QueryGeode10;
+import org.apache.geode.internal.cache.tier.sockets.command.QueryWithParametersGeode10;
-  static Map<Version,Map<Integer, Command>> ALL_COMMANDS;
-  
+  static Map<Version, Map<Integer, Command>> ALL_COMMANDS;
+
-  
+
-   * @param messageType - An ordinal for this message. This must be something defined in
-   * MessageType that has not already been allocated to a different command. 
-   * @param versionToNewCommand The command to register, for different versions. The key is
-   * the earliest version for which this command class is valid (starting with GFE_57).
-   * The value is the command object for clients starting with that version.
+   * 
+   * @param messageType - An ordinal for this message. This must be something defined in MessageType
+   *        that has not already been allocated to a different command.
+   * @param versionToNewCommand The command to register, for different versions. The key is the
+   *        earliest version for which this command class is valid (starting with GFE_57). The value
+   *        is the command object for clients starting with that version.
-    //Iterate through all the gemfire versions, and 
-    //add a command to the map for that version
-    for(Map.Entry<Version, Map<Integer, Command>> entry : ALL_COMMANDS.entrySet()) {
+    // Iterate through all the gemfire versions, and
+    // add a command to the map for that version
+    for (Map.Entry<Version, Map<Integer, Command>> entry : ALL_COMMANDS.entrySet()) {
-      
-      //Get the current set of commands for this version.
+
+      // Get the current set of commands for this version.
-      
-      //See if we have a new command to insert into this map. Otherwise, keep using the command we have 
-      //already read
+
+      // See if we have a new command to insert into this map. Otherwise, keep using the command we
+      // have
+      // already read
-      if(newerVersion != null) {
+      if (newerVersion != null) {
-      if(command != null) {
+      if (command != null) {
-        if(oldCommand != null && oldCommand != command) {
-          throw new InternalGemFireError("Command is already defined int the map for message Type " + MessageType.getString(messageType) 
-              + ". Old Value=" + commandMap.get(messageType) + ", newValue=" + command + ", version=" + version);
+        if (oldCommand != null && oldCommand != command) {
+          throw new InternalGemFireError("Command is already defined int the map for message Type "
+              + MessageType.getString(messageType) + ". Old Value=" + commandMap.get(messageType)
+              + ", newValue=" + command + ", version=" + version);
-  
+
-    ALL_COMMANDS = new LinkedHashMap<Version,Map<Integer, Command>>();
-    
+    ALL_COMMANDS = new LinkedHashMap<Version, Map<Integer, Command>>();
+
-    gfe57Commands.put(MessageType.PING,Ping.getCommand());
-    gfe57Commands.put(MessageType.REQUEST,Request.getCommand());
-    gfe57Commands.put(MessageType.PUT,Put.getCommand());
-    gfe57Commands.put(MessageType.PUTALL,PutAll.getCommand());
-    gfe57Commands.put(MessageType.DESTROY,Destroy.getCommand());
-    gfe57Commands.put(MessageType.QUERY,org.apache.geode.internal.cache.tier.sockets.command.Query.getCommand());
-    gfe57Commands.put(MessageType.CLEAR_REGION,ClearRegion.getCommand());
-    gfe57Commands.put(MessageType.DESTROY_REGION,DestroyRegion.getCommand());
-    gfe57Commands.put(MessageType.REGISTER_INTEREST,RegisterInterest.getCommand());
-    gfe57Commands.put(MessageType.UNREGISTER_INTEREST,UnregisterInterest.getCommand());
-    gfe57Commands.put(MessageType.REGISTER_INTEREST_LIST,RegisterInterestList.getCommand());
-    gfe57Commands.put(MessageType.UNREGISTER_INTEREST_LIST,UnregisterInterestList.getCommand());
-    gfe57Commands.put(MessageType.KEY_SET,KeySet.getCommand());
-    gfe57Commands.put(MessageType.CONTAINS_KEY,ContainsKey.getCommand());
-    gfe57Commands.put(MessageType.CREATE_REGION,CreateRegion.getCommand());
-    gfe57Commands.put(MessageType.MAKE_PRIMARY,MakePrimary.getCommand());
-    gfe57Commands.put(MessageType.PERIODIC_ACK,PeriodicAck.getCommand());
-    gfe57Commands.put(MessageType.REGISTER_INSTANTIATORS,RegisterInstantiators.getCommand());
-    gfe57Commands.put(MessageType.UPDATE_CLIENT_NOTIFICATION,UpdateClientNotification.getCommand());
-    gfe57Commands.put(MessageType.CLOSE_CONNECTION,CloseConnection.getCommand());
-    gfe57Commands.put(MessageType.CLIENT_READY,ClientReady.getCommand());
-    gfe57Commands.put(MessageType.INVALID,Invalid.getCommand());
-    
-    
-    gfe57Commands.put(MessageType.GET_ALL,GetAll.getCommand());   
-       
+    gfe57Commands.put(MessageType.PING, Ping.getCommand());
+    gfe57Commands.put(MessageType.REQUEST, Request.getCommand());
+    gfe57Commands.put(MessageType.PUT, Put.getCommand());
+    gfe57Commands.put(MessageType.PUTALL, PutAll.getCommand());
+    gfe57Commands.put(MessageType.DESTROY, Destroy.getCommand());
+    gfe57Commands.put(MessageType.QUERY,
+        org.apache.geode.internal.cache.tier.sockets.command.Query.getCommand());
+    gfe57Commands.put(MessageType.CLEAR_REGION, ClearRegion.getCommand());
+    gfe57Commands.put(MessageType.DESTROY_REGION, DestroyRegion.getCommand());
+    gfe57Commands.put(MessageType.REGISTER_INTEREST, RegisterInterest.getCommand());
+    gfe57Commands.put(MessageType.UNREGISTER_INTEREST, UnregisterInterest.getCommand());
+    gfe57Commands.put(MessageType.REGISTER_INTEREST_LIST, RegisterInterestList.getCommand());
+    gfe57Commands.put(MessageType.UNREGISTER_INTEREST_LIST, UnregisterInterestList.getCommand());
+    gfe57Commands.put(MessageType.KEY_SET, KeySet.getCommand());
+    gfe57Commands.put(MessageType.CONTAINS_KEY, ContainsKey.getCommand());
+    gfe57Commands.put(MessageType.CREATE_REGION, CreateRegion.getCommand());
+    gfe57Commands.put(MessageType.MAKE_PRIMARY, MakePrimary.getCommand());
+    gfe57Commands.put(MessageType.PERIODIC_ACK, PeriodicAck.getCommand());
+    gfe57Commands.put(MessageType.REGISTER_INSTANTIATORS, RegisterInstantiators.getCommand());
+    gfe57Commands.put(MessageType.UPDATE_CLIENT_NOTIFICATION,
+        UpdateClientNotification.getCommand());
+    gfe57Commands.put(MessageType.CLOSE_CONNECTION, CloseConnection.getCommand());
+    gfe57Commands.put(MessageType.CLIENT_READY, ClientReady.getCommand());
+    gfe57Commands.put(MessageType.INVALID, Invalid.getCommand());
+
+
+    gfe57Commands.put(MessageType.GET_ALL, GetAll.getCommand());
+
-    gfe58Commands.put(MessageType.EXECUTE_REGION_FUNCTION,ExecuteRegionFunction.getCommand());
-    gfe58Commands.put(MessageType.EXECUTE_FUNCTION,ExecuteFunction.getCommand());
+    gfe58Commands.put(MessageType.EXECUTE_REGION_FUNCTION, ExecuteRegionFunction.getCommand());
+    gfe58Commands.put(MessageType.EXECUTE_FUNCTION, ExecuteFunction.getCommand());
-    gfe61Commands.put(MessageType.REGISTER_INTEREST,RegisterInterest61.getCommand());
-    gfe61Commands.put(MessageType.REGISTER_INTEREST_LIST,RegisterInterestList61.getCommand());
-    gfe61Commands.put(MessageType.REQUEST_EVENT_VALUE,RequestEventValue.getCommand());
-    gfe61Commands.put(MessageType.PUT,Put61.getCommand());
-    gfe61Commands.put(MessageType.REGISTER_DATASERIALIZERS,RegisterDataSerializers.getCommand());
+    gfe61Commands.put(MessageType.REGISTER_INTEREST, RegisterInterest61.getCommand());
+    gfe61Commands.put(MessageType.REGISTER_INTEREST_LIST, RegisterInterestList61.getCommand());
+    gfe61Commands.put(MessageType.REQUEST_EVENT_VALUE, RequestEventValue.getCommand());
+    gfe61Commands.put(MessageType.PUT, Put61.getCommand());
+    gfe61Commands.put(MessageType.REGISTER_DATASERIALIZERS, RegisterDataSerializers.getCommand());
-    gfe65Commands.put(MessageType.DESTROY,Destroy65.getCommand());
-    gfe65Commands.put(MessageType.PUT,Put65.getCommand());
-    gfe65Commands.put(MessageType.EXECUTE_REGION_FUNCTION,ExecuteRegionFunction65.getCommand());
-    gfe65Commands.put(MessageType.EXECUTE_FUNCTION,ExecuteFunction65.getCommand());
-    gfe65Commands.put(MessageType.GET_CLIENT_PR_METADATA,GetClientPRMetadataCommand.getCommand());
-    gfe65Commands.put(MessageType.GET_CLIENT_PARTITION_ATTRIBUTES,GetClientPartitionAttributesCommand.getCommand());
+    gfe65Commands.put(MessageType.DESTROY, Destroy65.getCommand());
+    gfe65Commands.put(MessageType.PUT, Put65.getCommand());
+    gfe65Commands.put(MessageType.EXECUTE_REGION_FUNCTION, ExecuteRegionFunction65.getCommand());
+    gfe65Commands.put(MessageType.EXECUTE_FUNCTION, ExecuteFunction65.getCommand());
+    gfe65Commands.put(MessageType.GET_CLIENT_PR_METADATA, GetClientPRMetadataCommand.getCommand());
+    gfe65Commands.put(MessageType.GET_CLIENT_PARTITION_ATTRIBUTES,
+        GetClientPartitionAttributesCommand.getCommand());
-    gfe65Commands.put(MessageType.EXECUTE_REGION_FUNCTION_SINGLE_HOP,ExecuteRegionFunctionSingleHop.getCommand());
+    gfe65Commands.put(MessageType.EXECUTE_REGION_FUNCTION_SINGLE_HOP,
+        ExecuteRegionFunctionSingleHop.getCommand());
-    gfe6516Commands.put(MessageType.GET_ALL,GetAll651.getCommand());
-    gfe6516Commands.put(MessageType.GET_CLIENT_PR_METADATA,GetClientPRMetadataCommand66.getCommand());
-    
+    gfe6516Commands.put(MessageType.GET_ALL, GetAll651.getCommand());
+    gfe6516Commands.put(MessageType.GET_CLIENT_PR_METADATA,
+        GetClientPRMetadataCommand66.getCommand());
+
-    gfe66Commands.put(MessageType.SIZE,Size.getCommand());
-    gfe66Commands.put(MessageType.INVALIDATE,Invalidate.getCommand());
-    gfe66Commands.put(MessageType.COMMIT,CommitCommand.getCommand());
+    gfe66Commands.put(MessageType.SIZE, Size.getCommand());
+    gfe66Commands.put(MessageType.INVALIDATE, Invalidate.getCommand());
+    gfe66Commands.put(MessageType.COMMIT, CommitCommand.getCommand());
-    gfe66Commands.put(MessageType.GET_CLIENT_PARTITION_ATTRIBUTES, GetClientPartitionAttributesCommand66.getCommand());
-    gfe66Commands.put(MessageType.REGISTER_INTEREST_LIST, RegisterInterestList66.getCommand());    
+    gfe66Commands.put(MessageType.GET_CLIENT_PARTITION_ATTRIBUTES,
+        GetClientPartitionAttributesCommand66.getCommand());
+    gfe66Commands.put(MessageType.REGISTER_INTEREST_LIST, RegisterInterestList66.getCommand());
-    
+
-    
+
-    // The SERVER_TO_CLIENT_PING message was added, but it doesn't need to be registered here 
+    // The SERVER_TO_CLIENT_PING message was added, but it doesn't need to be registered here
-    gfe70Commands.put(MessageType.GET_PDX_ENUMS, GetPdxEnums70.getCommand());    
+    gfe70Commands.put(MessageType.GET_PDX_ENUMS, GetPdxEnums70.getCommand());
-    
+
+      gfe90Commands.put(MessageType.QUERY_WITH_PARAMETERS, QueryWithParametersGeode10.getCommand());
+      gfe90Commands.put(MessageType.QUERY, QueryGeode10.getCommand());
+    {
+      Map<Integer, Command> gfe91Commands = new HashMap<Integer, Command>();
+      gfe91Commands.putAll(ALL_COMMANDS.get(Version.GFE_90));
+      ALL_COMMANDS.put(Version.GFE_91, gfe91Commands);
+    }
+
-  public static Map<Integer,Command> getCommands(Version version) {
+  public static Map<Integer, Command> getCommands(Version version) {
-  public static Map<Integer,Command> getCommands(ServerConnection connection) {
+  public static Map<Integer, Command> getCommands(ServerConnection connection) {
-  
+
-  public static void testSetCommands(Map<Integer,Command> testCommands) {
+  public static void testSetCommands(Map<Integer, Command> testCommands) {
