GEODE-4863: refactor jdbc commands to use this public cluster configuration api (#1776)

   * refactored jdbc connector commands to use public cc service
   * removed JdbcConnectorServiceXmlGenerator
   * removed RegionMappingBuilder & ConnectionConfigBuilder
   * if cc service is running then user can only alter whats available in CC
   * describe & List commands now list entries from cc service
   * converted some integration tests to junits
   * removed unwanted functions, tests

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>

-import java.util.List;
-import java.util.Set;
-
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.connectors.jdbc.internal.ConnectionConfiguration;
-import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
+import org.apache.geode.distributed.ClusterConfigurationService;
+import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
-      EXPERIMENTAL + "Describe the specified jdbc connection.";
+      EXPERIMENTAL + "Describe the specified jdbc connection found in cluster configuration.";
-    // input
-    Set<DistributedMember> members = getMembers(null, null);
-    if (members.isEmpty()) {
-      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    ClusterConfigurationService ccService = getConfigurationService();
+    if (ccService == null) {
+      return ResultBuilder.createInfoResult("cluster configuration service is not running");
-    DistributedMember targetMember = members.iterator().next();
-
-    // action
-    ResultCollector<ConnectionConfiguration, List<ConnectionConfiguration>> resultCollector =
-        execute(new DescribeConnectionFunction(), name, targetMember);
-
-    // output
-    ConnectionConfiguration config = resultCollector.getResult().get(0);
-    if (config == null) {
-      return ResultBuilder.createInfoResult(
-          String.format(EXPERIMENTAL + "\n" + "Connection named '%s' not found", name));
+    // search for the connection that has this id to see if it exists
+    ConnectorService service =
+        ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
+    if (service == null) {
+      throw new EntityNotFoundException(
+          EXPERIMENTAL + "\n" + "connection named '" + name + "' not found");
+    }
+    ConnectorService.Connection connection =
+        ccService.findIdentifiable(service.getConnection(), name);
+    if (connection == null) {
+      throw new EntityNotFoundException(
+          EXPERIMENTAL + "\n" + "connection named '" + name + "' not found");
-    fillResultData(config, resultData);
+    fillResultData(connection, resultData);
-  ResultCollector<ConnectionConfiguration, List<ConnectionConfiguration>> execute(
-      DescribeConnectionFunction function, String connectionName, DistributedMember targetMember) {
-    return (ResultCollector<ConnectionConfiguration, List<ConnectionConfiguration>>) executeFunction(
-        function, connectionName, targetMember);
-  }
-
-  private void fillResultData(ConnectionConfiguration config, CompositeResultData resultData) {
+  private void fillResultData(ConnectorService.Connection config, CompositeResultData resultData) {
-    if (config.getParameters() != null) {
-      config.getParameters().entrySet().forEach((entry) -> {
-        tabularResultData.accumulate("Param Name", entry.getKey());
-        tabularResultData.accumulate("Value", entry.getValue());
-      });
-    }
+    config.getParameterMap().entrySet().forEach((entry) -> {
+      tabularResultData.accumulate("Param Name", entry.getKey());
+      tabularResultData.accumulate("Value", entry.getValue());
+    });
