Merge branch 'release/1.5.0'

-import static org.apache.geode.internal.lang.ObjectUtils.defaultIfNull;
-   * Determines whether this launcher will redirect output to system logs when starting a new
-   * Locator process.
+   * Determines whether this launcher will redirect output to system logs when starting a new Server
+   * process.
-   *         starting a new Locator process
+   *         starting a new Server process
-    return defaultIfNull(getServerPort(), getDefaultServerPort()).toString();
+    Integer v1 = getServerPort();
+    return (v1 != null ? v1 : getDefaultServerPort()).toString();
-      this.cache.close();
-      this.cache = null;
-      if (this.process != null) {
-        this.process.stop(this.deletePidFileOnStop);
-        this.process = null;
+
+      // Another case of needing to use a non-daemon thread to keep the JVM alive until a clean
+      // shutdown can be performed. If not, the JVM may exit too early causing the member to be
+      // seen as having crashed and not cleanly departed.
+      final ServerLauncher shadow = this;
+      Thread t = new Thread(() -> {
+        shadow.cache.close();
+        shadow.cache = null;
+        if (shadow.process != null) {
+          shadow.process.stop(shadow.deletePidFileOnStop);
+          shadow.process = null;
+        }
+      });
+      t.setDaemon(false);
+      t.start();
+
+      try {
+        t.join();
+      } catch (InterruptedException e) {
+        // no matter, we're shutting down...
+
-      return defaultIfNull(this.command, DEFAULT_COMMAND);
+      return this.command != null ? this.command : DEFAULT_COMMAND;
-      return defaultIfNull(this.force, DEFAULT_FORCE);
+      return this.force != null ? this.force : DEFAULT_FORCE;
-      return defaultIfNull(this.serverPort, getDefaultServerPort());
+      return this.serverPort != null ? this.serverPort : getDefaultServerPort();
