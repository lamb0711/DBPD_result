Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class GatewaySenderFactoryImpl implements
-    InternalGatewaySenderFactory {
+public class GatewaySenderFactoryImpl implements InternalGatewaySenderFactory {
-  
+
-   * Used internally to pass the attributes from this factory to the real
-   * GatewaySender it is creating.
+   * Used internally to pass the attributes from this factory to the real GatewaySender it is
+   * creating.
-  private static final AtomicBoolean GATEWAY_CONNECTION_READ_TIMEOUT_PROPERTY_CHECKED = new AtomicBoolean(false);
+  private static final AtomicBoolean GATEWAY_CONNECTION_READ_TIMEOUT_PROPERTY_CHECKED =
+      new AtomicBoolean(false);
-  public GatewaySenderFactory setParallel(boolean isParallel){
+  public GatewaySenderFactory setParallel(boolean isParallel) {
-  
+
-  
-  public GatewaySenderFactory addGatewayEventFilter(
-      GatewayEventFilter filter) {
+
+  public GatewaySenderFactory addGatewayEventFilter(GatewayEventFilter filter) {
-  public GatewaySenderFactory addGatewayTransportFilter(
-      GatewayTransportFilter filter) {
+  public GatewaySenderFactory addGatewayTransportFilter(GatewayTransportFilter filter) {
-  public GatewaySenderFactory addAsyncEventListener(
-      AsyncEventListener listener) {
+  public GatewaySenderFactory addAsyncEventListener(AsyncEventListener listener) {
-  
+
-  public GatewaySenderFactory setBatchConflationEnabled(
-      boolean enableBatchConflation) {
+  public GatewaySenderFactory setBatchConflationEnabled(boolean enableBatchConflation) {
-  public GatewaySenderFactory setPersistenceEnabled(
-      boolean enablePersistence) {
+  public GatewaySenderFactory setPersistenceEnabled(boolean enablePersistence) {
-  public GatewaySenderFactory setLocatorDiscoveryCallback(
-      LocatorDiscoveryCallback locCallback) {
+  public GatewaySenderFactory setLocatorDiscoveryCallback(LocatorDiscoveryCallback locCallback) {
-  
+
-  }    
-    
+  }
+
-  
-  public GatewaySenderFactory setBucketSorted(boolean isBucketSorted){
+
+  public GatewaySenderFactory setBucketSorted(boolean isBucketSorted) {
+
-    int myDSId = InternalDistributedSystem.getAnyInstance()
-        .getDistributionManager().getDistributedSystemId();
+    int myDSId = InternalDistributedSystem.getAnyInstance().getDistributionManager()
+        .getDistributedSystemId();
-    if(this.attrs.getDispatcherThreads() <= 0){
+    if (this.attrs.getDispatcherThreads() <= 0) {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.Gateway_CONFIGURED_SOCKET_READ_TIMEOUT_TOO_LOW,
-            new Object[] { "GatewaySender " + id, this.attrs.getSocketReadTimeout(), GatewaySender.MINIMUM_SOCKET_READ_TIMEOUT }));
+        logger.warn(
+            LocalizedMessage.create(LocalizedStrings.Gateway_CONFIGURED_SOCKET_READ_TIMEOUT_TOO_LOW,
+                new Object[] {"GatewaySender " + id, this.attrs.getSocketReadTimeout(),
+                    GatewaySender.MINIMUM_SOCKET_READ_TIMEOUT}));
-              new Object[] { GatewaySender.GATEWAY_CONNECTION_READ_TIMEOUT_PROPERTY, "GatewaySender socket read timeout" }));
+              new Object[] {GatewaySender.GATEWAY_CONNECTION_READ_TIMEOUT_PROPERTY,
+                  "GatewaySender socket read timeout"}));
-//      if(this.attrs.getDispatcherThreads() != 1){
-//        throw new GatewaySenderException(
-//            LocalizedStrings.GatewaySenderImpl_PARALLEL_GATEWAY_SENDER_0_CANNOT_BE_CREATED_WITH_DISPATCHER_THREADS_OTHER_THAN_1
-//                .toLocalizedString(id));
-//      }
+      // if(this.attrs.getDispatcherThreads() != 1){
+      // throw new GatewaySenderException(
+      // LocalizedStrings.GatewaySenderImpl_PARALLEL_GATEWAY_SENDER_0_CANNOT_BE_CREATED_WITH_DISPATCHER_THREADS_OTHER_THAN_1
+      // .toLocalizedString(id));
+      // }
-        ((GemFireCacheImpl)this.cache).addGatewaySender(sender);
-        
+        ((GemFireCacheImpl) this.cache).addGatewaySender(sender);
+
-      }
-      else if (this.cache instanceof CacheCreation) {
+      } else if (this.cache instanceof CacheCreation) {
-        ((CacheCreation)this.cache).addGatewaySender(sender);
+        ((CacheCreation) this.cache).addGatewaySender(sender);
-    }
-    else {
+    } else {
-//      if (this.attrs.getOrderPolicy() != null) {
-//        if (this.attrs.getDispatcherThreads() == GatewaySender.DEFAULT_DISPATCHER_THREADS) {
-//          throw new GatewaySenderException(
-//              LocalizedStrings.SerialGatewaySender_INVALID_GATEWAY_SENDER_ORDER_POLICY_CONCURRENCY_0
-//                  .toLocalizedString(id));
-//        }
-//      }
+      // if (this.attrs.getOrderPolicy() != null) {
+      // if (this.attrs.getDispatcherThreads() == GatewaySender.DEFAULT_DISPATCHER_THREADS) {
+      // throw new GatewaySenderException(
+      // LocalizedStrings.SerialGatewaySender_INVALID_GATEWAY_SENDER_ORDER_POLICY_CONCURRENCY_0
+      // .toLocalizedString(id));
+      // }
+      // }
-        ((GemFireCacheImpl)this.cache).addGatewaySender(sender);
+        ((GemFireCacheImpl) this.cache).addGatewaySender(sender);
-      }
-      else if (this.cache instanceof CacheCreation) {
+      } else if (this.cache instanceof CacheCreation) {
-        ((CacheCreation)this.cache).addGatewaySender(sender);
+        ((CacheCreation) this.cache).addGatewaySender(sender);
-    if(this.attrs.getDispatcherThreads() <= 0) {
+    if (this.attrs.getDispatcherThreads() <= 0) {
-    
+
-      
+
-        ((GemFireCacheImpl)this.cache).addGatewaySender(sender);
+        ((GemFireCacheImpl) this.cache).addGatewaySender(sender);
-      }
-      else if (this.cache instanceof CacheCreation) {
+      } else if (this.cache instanceof CacheCreation) {
-        ((CacheCreation)this.cache).addGatewaySender(sender);
+        ((CacheCreation) this.cache).addGatewaySender(sender);
-    }
-    else {
-//      if (this.attrs.getOrderPolicy() != null) {
-//        if (this.attrs.getDispatcherThreads() == GatewaySender.DEFAULT_DISPATCHER_THREADS) {
-//          throw new AsyncEventQueueConfigurationException(
-//              LocalizedStrings.AsyncEventQueue_INVALID_ORDER_POLICY_CONCURRENCY_0
-//                  .toLocalizedString(id));
-//        }
-//      }
+    } else {
+      // if (this.attrs.getOrderPolicy() != null) {
+      // if (this.attrs.getDispatcherThreads() == GatewaySender.DEFAULT_DISPATCHER_THREADS) {
+      // throw new AsyncEventQueueConfigurationException(
+      // LocalizedStrings.AsyncEventQueue_INVALID_ORDER_POLICY_CONCURRENCY_0
+      // .toLocalizedString(id));
+      // }
+      // }
-         this.attrs.policy = GatewaySender.DEFAULT_ORDER_POLICY;
+        this.attrs.policy = GatewaySender.DEFAULT_ORDER_POLICY;
-        ((GemFireCacheImpl)this.cache).addGatewaySender(sender);
+        ((GemFireCacheImpl) this.cache).addGatewaySender(sender);
-      }
-      else if (this.cache instanceof CacheCreation) {
+      } else if (this.cache instanceof CacheCreation) {
-        ((CacheCreation)this.cache).addGatewaySender(sender);
+        ((CacheCreation) this.cache).addGatewaySender(sender);
-  
-  public GatewaySenderFactory removeGatewayEventFilter(
-      GatewayEventFilter filter) {
+
+  public GatewaySenderFactory removeGatewayEventFilter(GatewayEventFilter filter) {
-  public GatewaySenderFactory removeGatewayTransportFilter(
-      GatewayTransportFilter filter) {
+  public GatewaySenderFactory removeGatewayTransportFilter(GatewayTransportFilter filter) {
-  } 
-  
+  }
+
-    for(GatewayEventFilter filter : senderCreation.getGatewayEventFilters()){
+    for (GatewayEventFilter filter : senderCreation.getGatewayEventFilters()) {
-    for(GatewayTransportFilter filter : senderCreation.getGatewayTransportFilters()){
+    for (GatewayTransportFilter filter : senderCreation.getGatewayTransportFilters()) {
