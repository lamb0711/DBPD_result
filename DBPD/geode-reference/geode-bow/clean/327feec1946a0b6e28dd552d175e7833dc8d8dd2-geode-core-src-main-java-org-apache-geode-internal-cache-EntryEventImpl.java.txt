GEODE-6696: EntryEvenImpl.offHeapLock created only if off-heap in use (#3581)


+import org.apache.geode.distributed.internal.InternalDistributedSystem;
-    // do nothing
+    this.offHeapLock = null;
+    InternalDistributedSystem ds =
+        (InternalDistributedSystem) region.getCache().getDistributedSystem();
+    if (ds.getOffHeapStore() != null) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
+    InternalDistributedSystem ds =
+        (InternalDistributedSystem) region.getCache().getDistributedSystem();
+    if (ds.getOffHeapStore() != null) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
+    if (other.offHeapLock != null) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
-  public EntryEventImpl(Object key2) {
+  public EntryEventImpl(Object key2, boolean isOffHeap) {
+    if (isOffHeap) {
+      this.offHeapLock = new Object();
+    } else {
+      this.offHeapLock = null;
+    }
-  private final Object offHeapLock = new Object();
+  private final Object offHeapLock;
-      try {
+      if (mayHaveOffHeapReferences()) {
-          ArrayUtils.objectStringNonRecursive(basicGetOldValue(), buf);
+          try {
+            ArrayUtils.objectStringNonRecursive(basicGetOldValue(), buf);
+          } catch (IllegalStateException ignore) {
+            buf.append("OFFHEAP_VALUE_FREED");
+          }
-      } catch (IllegalStateException ignore) {
-        buf.append("OFFHEAP_VALUE_FREED");
+      } else {
+        ArrayUtils.objectStringNonRecursive(basicGetOldValue(), buf);
+
-      try {
+      if (mayHaveOffHeapReferences()) {
-          ArrayUtils.objectStringNonRecursive(basicGetNewValue(), buf);
+          try {
+            ArrayUtils.objectStringNonRecursive(basicGetNewValue(), buf);
+          } catch (IllegalStateException ignore) {
+            buf.append("OFFHEAP_VALUE_FREED");
+          }
-      } catch (IllegalStateException ignore) {
-        buf.append("OFFHEAP_VALUE_FREED");
+      } else {
+        ArrayUtils.objectStringNonRecursive(basicGetNewValue(), buf);
+    if (this.offHeapLock == null) {
+      return false;
+    }
+
-    synchronized (this.offHeapLock) {
+    if (mayHaveOffHeapReferences()) {
+      synchronized (this.offHeapLock) {
+        this.offHeapOk = false;
+      }
+    } else {
+
