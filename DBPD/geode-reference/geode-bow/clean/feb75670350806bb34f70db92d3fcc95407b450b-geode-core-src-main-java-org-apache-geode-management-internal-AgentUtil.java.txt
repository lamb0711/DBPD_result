GEODE-7107: Introduce HttpService interface (#3963)

- This allows for Jetty to be optional on the classpath.
+import java.net.URI;
+import java.net.URISyntaxException;
-  public String findWarLocation(String warFilePrefix) {
+  public URI findWarLocation(String warFilePrefix) {
-    String possiblePath =
+    URI possiblePath =
-  private String findPossibleWarLocationFromExtraLocations(String versionedWarFileName,
+  private URI findPossibleWarLocationFromExtraLocations(String versionedWarFileName,
+    URI uri = null;
-      final String path = url.getPath();
-      logger.info("War file found: {}", path);
-      return path;
+      try {
+        uri = url.toURI();
+        logger.info("War file found: {}", uri.toString());
+      } catch (URISyntaxException ex) {
+        logger.warn("War file URL could not be converted to URI: {}", url.toString());
+      }
-    return null;
+    return uri;
-  private String findPossibleWarLocationFromGeodeHome(String versionedWarFileName,
+  private URI findPossibleWarLocationFromGeodeHome(String versionedWarFileName,
-  private String findPossibleWarLocationFromStream(Stream<String> stream) {
+  private URI findPossibleWarLocationFromStream(Stream<String> stream) {
-        .findFirst().orElse(null);
+        .findFirst().map(s -> new File(s).toURI()).orElse(null);
-  private String lookupWarLocationFromClasspath(String versionedWarFileName,
+  private URI lookupWarLocationFromClasspath(String versionedWarFileName,
-        .findFirst().orElse(null);
+        .findFirst().map(s -> new File(s).toURI()).orElse(null);
-  boolean isAnyWarFileAvailable(final String... warFileLocations) {
-    for (String warFileLocation : warFileLocations) {
-      if (StringUtils.isNotBlank(warFileLocation)) {
-        return true;
-      }
-    }
-
-    return false;
+  boolean isAnyWarFileAvailable(final URI... warFileLocations) {
+    return Arrays.stream(warFileLocations).anyMatch(Objects::nonNull);
