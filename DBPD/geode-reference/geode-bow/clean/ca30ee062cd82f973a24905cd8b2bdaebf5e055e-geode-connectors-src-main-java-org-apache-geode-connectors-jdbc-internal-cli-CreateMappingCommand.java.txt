GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationService
+import org.apache.geode.cache.configuration.CacheConfig;
-import org.apache.geode.distributed.ClusterConfigurationService;
-import org.apache.geode.management.internal.cli.commands.InternalGfshCommand;
+import org.apache.geode.management.cli.SingleGfshCommand;
-public class CreateMappingCommand extends InternalGfshCommand {
+public class CreateMappingCommand extends SingleGfshCommand {
-  private static final String ERROR_PREFIX = "ERROR: ";
-
-    boolean persisted = false;
-    ClusterConfigurationService ccService = getConfigurationService();
-
-    if (ccService != null && results.stream().filter(CliFunctionResult::isSuccessful).count() > 0) {
-      ConnectorService service =
-          ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
-      if (service == null) {
-        service = new ConnectorService();
-      }
-      service.getRegionMapping().add(mapping);
-      ccService.saveCustomCacheElement("cluster", service);
-      persisted = true;
-    }
-    commandResult.setCommandPersisted(persisted);
+    commandResult.setConfigObject(mapping);
+
+  @Override
+  public void updateClusterConfig(String group, CacheConfig config, Object element) {
+    ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) element;
+    ConnectorService service =
+        config.findCustomCacheElement("connector-service", ConnectorService.class);
+    if (service == null) {
+      service = new ConnectorService();
+      config.getCustomCacheElements().add(service);
+    }
+    service.getRegionMapping().add(mapping);
+  }
