GEODE-6487: Use PID for OsStatistics numericId

Cleanup HostStatHelper.

-  static final int SOLARIS_CODE = 1; // Sparc Solaris
-  static final int WINDOWS_CODE = 2;
-  static final int LINUX_CODE = 3; // x86 Linux
-  static final int OSX_CODE = 4; // Mac OS X
+  private static final int SOLARIS_CODE = 1; // Sparc Solaris
+  private static final int WINDOWS_CODE = 2;
+  private static final int LINUX_CODE = 3; // x86 Linux
+  private static final int OSX_CODE = 4; // Mac OS X
-  static final int PROCESS_STAT_FLAG = 1;
-  static final int SYSTEM_STAT_FLAG = 2;
+  private static final int PROCESS_STAT_FLAG = 1;
+  private static final int SYSTEM_STAT_FLAG = 2;
-  static final int osCode;
+  private static final int osCode;
-      throw new RuntimeException(
-          "HostStatHelper not allowed in pure java mode");
+      throw new RuntimeException("HostStatHelper not allowed in pure java mode");
-      return HostStatHelper.init();
+      return init();
-      HostStatHelper.close();
+      close();
-      HostStatHelper.readyRefresh();
+      readyRefresh();
-  private static void refreshProcess(LocalStatisticsImpl s) {
-    int pid = (int) s.getNumericId();
+  private static void refreshProcess(LocalStatisticsImpl statistics) {
+    int pid = (int) statistics.getNumericId();
-      LinuxProcFsStatistics.refreshProcess(pid, s._getIntStorage(), s._getLongStorage(),
-          s._getDoubleStorage());
+      LinuxProcFsStatistics.refreshProcess(pid, statistics._getIntStorage(),
+          statistics._getLongStorage(), statistics._getDoubleStorage());
-      refreshProcess(pid, s._getIntStorage(), s._getLongStorage(), s._getDoubleStorage());
+      refreshProcess(pid, statistics._getIntStorage(), statistics._getLongStorage(),
+          statistics._getDoubleStorage());
-  private static void refreshSystem(LocalStatisticsImpl s) {
+  private static void refreshSystem(LocalStatisticsImpl statistics) {
-      LinuxProcFsStatistics.refreshSystem(s._getIntStorage(), s._getLongStorage(),
-          s._getDoubleStorage());
+      LinuxProcFsStatistics.refreshSystem(statistics._getIntStorage(), statistics._getLongStorage(),
+          statistics._getDoubleStorage());
-      refreshSystem(s._getIntStorage(), s._getLongStorage(), s._getDoubleStorage());
+      refreshSystem(statistics._getIntStorage(), statistics._getLongStorage(),
+          statistics._getDoubleStorage());
-  public static void refresh(LocalStatisticsImpl stats) {
-    int flags = stats.getOsStatFlags();
+  public static void refresh(LocalStatisticsImpl statistics) {
+    int flags = statistics.getOsStatFlags();
-      HostStatHelper.refreshProcess(stats);
+      refreshProcess(statistics);
-      HostStatHelper.refreshSystem(stats);
+      refreshSystem(statistics);
-      throw new RuntimeException(String.format("Unexpected os stats flags %s",
-          Integer.valueOf(flags)));
+      throw new RuntimeException(String.format("Unexpected os stats flags %s", flags));
-  public static Statistics newProcess(OsStatisticsFactory f, long pid, String name) {
-    Statistics stats;
+  static Statistics newProcess(OsStatisticsFactory osStatisticsFactory, long pid, String name) {
+    Statistics statistics;
-        stats = f.createOsStatistics(SolarisProcessStats.getType(), name, pid, PROCESS_STAT_FLAG);
+        statistics =
+            osStatisticsFactory.createOsStatistics(SolarisProcessStats.getType(), name, pid,
+                PROCESS_STAT_FLAG);
-        stats = f.createOsStatistics(LinuxProcessStats.getType(), name, pid, PROCESS_STAT_FLAG);
+        statistics = osStatisticsFactory.createOsStatistics(LinuxProcessStats.getType(), name, pid,
+            PROCESS_STAT_FLAG);
-        stats = f.createOsStatistics(OSXProcessStats.getType(), name, pid, PROCESS_STAT_FLAG);
+        statistics = osStatisticsFactory.createOsStatistics(OSXProcessStats.getType(), name, pid,
+            PROCESS_STAT_FLAG);
-        stats = f.createOsStatistics(WindowsProcessStats.getType(), name, pid, PROCESS_STAT_FLAG);
+        statistics =
+            osStatisticsFactory.createOsStatistics(WindowsProcessStats.getType(), name, pid,
+                PROCESS_STAT_FLAG);
-            String.format("unhandled osCode= %s HostStatHelper:newProcess",
-                Integer.valueOf(osCode)));
+            String.format("unhandled osCode= %s HostStatHelper:newProcess", osCode));
-    return stats;
+    return statistics;
-  static ProcessStats newProcessStats(Statistics stats) {
+  static ProcessStats newProcessStats(Statistics statistics) {
-        return SolarisProcessStats.createProcessStats(stats);
+        return SolarisProcessStats.createProcessStats(statistics);
-        return LinuxProcessStats.createProcessStats(stats);
+        return LinuxProcessStats.createProcessStats(statistics);
-        return WindowsProcessStats.createProcessStats(stats);
+        return WindowsProcessStats.createProcessStats(statistics);
-        return OSXProcessStats.createProcessStats(stats);
+        return OSXProcessStats.createProcessStats(statistics);
-                Integer.valueOf(osCode)));
+                osCode));
-  static void newSystem(OsStatisticsFactory f) {
-    Statistics stats;
+  static void newSystem(OsStatisticsFactory osStatisticsFactory, long id) {
+    Statistics statistics;
-        stats = f.createOsStatistics(SolarisSystemStats.getType(), getHostSystemName(),
-            getHostSystemId(), SYSTEM_STAT_FLAG);
+        statistics = osStatisticsFactory.createOsStatistics(SolarisSystemStats.getType(),
+            getHostSystemName(), id, SYSTEM_STAT_FLAG);
-        stats = f.createOsStatistics(LinuxSystemStats.getType(), getHostSystemName(),
-            getHostSystemId(), SYSTEM_STAT_FLAG);
+        statistics = osStatisticsFactory.createOsStatistics(LinuxSystemStats.getType(),
+            getHostSystemName(), id, SYSTEM_STAT_FLAG);
-        stats = f.createOsStatistics(WindowsSystemStats.getType(), getHostSystemName(),
-            getHostSystemId(), SYSTEM_STAT_FLAG);
+        statistics = osStatisticsFactory.createOsStatistics(WindowsSystemStats.getType(),
+            getHostSystemName(), id, SYSTEM_STAT_FLAG);
-        stats = f.createOsStatistics(OSXSystemStats.getType(), getHostSystemName(),
-            getHostSystemId(), SYSTEM_STAT_FLAG);
+        statistics = osStatisticsFactory.createOsStatistics(OSXSystemStats.getType(),
+            getHostSystemName(), id, SYSTEM_STAT_FLAG);
-            String.format("unhandled osCode= %s HostStatHelper:newSystem",
-                Integer.valueOf(osCode)));
+            String.format("unhandled osCode= %s HostStatHelper:newSystem", osCode));
-    if (stats instanceof LocalStatisticsImpl) {
-      refreshSystem((LocalStatisticsImpl) stats);
+    if (statistics instanceof LocalStatisticsImpl) {
+      refreshSystem((LocalStatisticsImpl) statistics);
-      InetAddress addr = SocketCreator.getLocalHost();
-      hostname = addr.getCanonicalHostName();
-    } catch (UnknownHostException uhe) {
+      InetAddress inetAddress = SocketCreator.getLocalHost();
+      hostname = inetAddress.getCanonicalHostName();
+    } catch (UnknownHostException ignored) {
-
-  /**
-   * Generate a systemid based off of the ip address of the host. This duplicates the common
-   * implementation of <code>long gethostid(void) </code>. Punt on the ipv6 case and just use the
-   * same algorithm.
-   *
-   * @return a psuedo unique id based on the ip address
-   */
-  private static long getHostSystemId() {
-    long id = 0L;
-    try {
-      InetAddress host = SocketCreator.getLocalHost();
-      byte[] addr = host.getAddress();
-      id = (addr[1] & 0xFFL) << 24 | (addr[0] & 0xFFL) << 16 | (addr[3] & 0xFFL) << 8
-          | (addr[2] & 0xFFL) << 0;
-    } catch (UnknownHostException uhe) {
-    }
-    return id;
-  }
