GEODE-1128: Fix colocation configuration problems

Test parent regions on child region creates and throw IllegalStateException
if parent region does not exist

Log warnings when persistent colocated child regions don't exist

Create Unit and DUnit tests for new exceptions and warnings

This closes #234

+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.internal.logging.log4j.LocalizedMessage;
+
-   * 
+   *
+   * @throws IllegalStateException for missing colocated region
+    if (prConf == null) {
+      throw new IllegalStateException(LocalizedStrings.ColocationHelper_REGION_SPECIFIED_IN_COLOCATEDWITH_DOES_NOT_EXIST.toLocalizedString(
+          new Object[] {colocatedWith, partitionedRegion.getFullPath()}));
+    }
-      colocatedPR.waitOnBucketMetadataInitialization();
+      if (colocatedPR != null) {
+        colocatedPR.waitOnBucketMetadataInitialization();
+      }
+      else {
+        throw new IllegalStateException(LocalizedStrings.ColocationHelper_REGION_SPECIFIED_IN_COLOCATEDWITH_DOES_NOT_EXIST.toLocalizedString(
+            new Object[] {colocatedWith, partitionedRegion.getFullPath()}));
+      }
-    
-    boolean hasOfflineChildren;
+    boolean hasOfflineChildren = false;
-                return true;
+                region.addMissingColocatedRegionLogger(childName);
+                hasOfflineChildren = true;
-                return true;
+                hasOfflineChildren = true;
+                // Add the offline children of this child to the region's missingChildren list
+                region.addMissingColocatedRegionLogger(childRegion);
-    
-    return false;
+    return hasOfflineChildren;
-  
+
-        /*if (prName == prName) {
+        if (prName.equals(partitionedRegion.getRegionIdentifier())) {
+          // region can't be a child of itself
-        }*/
+        }
