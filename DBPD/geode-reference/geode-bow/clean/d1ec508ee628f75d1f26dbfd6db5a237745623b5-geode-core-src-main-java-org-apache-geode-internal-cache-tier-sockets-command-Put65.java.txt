GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-  public void cmdExecute(Message msg, ServerConnection servConn, long p_start)
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection, long p_start)
-    CachedRegionHelper crHelper = servConn.getCachedRegionHelper();
-    CacheServerStats stats = servConn.getCacheServerStats();
+    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
+    CacheServerStats stats = serverConnection.getCacheServerStats();
-    servConn.setAsTrue(REQUIRES_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_RESPONSE);
-    regionNamePart = msg.getPart(idx++);
+    regionNamePart = clientMessage.getPart(idx++);
-      operation = (Operation) msg.getPart(idx++).getObject();
+      operation = (Operation) clientMessage.getPart(idx++).getObject();
-      writeException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, e, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    int flags = msg.getPart(idx++).getInt();
+    int flags = clientMessage.getPart(idx++).getInt();
-        expectedOldValue = msg.getPart(idx++).getObject();
+        expectedOldValue = clientMessage.getPart(idx++).getObject();
-        writeException(msg, e, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeException(clientMessage, e, false, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-    keyPart = msg.getPart(idx++);
+    keyPart = clientMessage.getPart(idx++);
-      isDelta = ((Boolean) msg.getPart(idx).getObject()).booleanValue();
+      isDelta = ((Boolean) clientMessage.getPart(idx).getObject()).booleanValue();
-      writeException(msg, MessageType.PUT_DELTA_ERROR, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, MessageType.PUT_DELTA_ERROR, e, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    valuePart = msg.getPart(idx++);
-    eventPart = msg.getPart(idx++);
-    if (msg.getNumberOfParts() > idx) {
-      callbackArgPart = msg.getPart(idx++);
+    valuePart = clientMessage.getPart(idx++);
+    eventPart = clientMessage.getPart(idx++);
+    if (clientMessage.getNumberOfParts() > idx) {
+      callbackArgPart = clientMessage.getPart(idx++);
-        writeException(msg, e, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeException(clientMessage, e, false, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-      writeException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, e, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-          servConn.getName(), (isDelta ? " delta " : " "), msg.getPayloadLength(),
-          servConn.getSocketString(), regionName, key, msg.getTransactionId(), msg.isRetry());
+          serverConnection.getName(), (isDelta ? " delta " : " "), clientMessage.getPayloadLength(),
+          serverConnection.getSocketString(), regionName, key, clientMessage.getTransactionId(),
+          clientMessage.isRetry());
-          logger.debug("{}:{}", servConn.getName(), putMsg);
+          logger.debug("{}:{}", serverConnection.getName(), putMsg);
-          logger.debug("{}:{}", servConn.getName(), putMsg);
+          logger.debug("{}:{}", serverConnection.getName(), putMsg);
-      writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR, errMessage.toString(),
+          serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    LocalRegion region = (LocalRegion) servConn.getCache().getRegion(regionName);
+    LocalRegion region = (LocalRegion) serverConnection.getCache().getRegion(regionName);
-      writeRegionDestroyedEx(msg, regionName, reason, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeRegionDestroyedEx(clientMessage, regionName, reason, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-        logger.debug("{}:{}", servConn.getName(), putMsg);
+        logger.debug("{}:{}", serverConnection.getName(), putMsg);
-      writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR, errMessage.toString(),
+          serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    EventIDHolder clientEvent =
-        new EventIDHolder(new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId));
+    EventIDHolder clientEvent = new EventIDHolder(
+        new EventID(serverConnection.getEventMemberIDByteArray(), threadId, sequenceId));
-    if (msg.isRetry()) {
+    if (clientMessage.isRetry()) {
-      msg.setMetaRegion(isMetaRegion);
+      clientMessage.setMetaRegion(isMetaRegion);
-        authzRequest = servConn.getAuthzRequest();
+        authzRequest = serverConnection.getAuthzRequest();
-        if (msg.isRetry() && clientEvent.getVersionTag() != null) {
+        if (clientMessage.isRetry() && clientEvent.getVersionTag() != null) {
-          region.basicBridgePutIfAbsent(key, value, isObject, callbackArg, servConn.getProxyID(),
-              true, clientEvent);
+          region.basicBridgePutIfAbsent(key, value, isObject, callbackArg,
+              serverConnection.getProxyID(), true, clientEvent);
-              servConn.getProxyID(), true, clientEvent);
+              serverConnection.getProxyID(), true, clientEvent);
-        Version clientVersion = servConn.getClientVersion();
+        Version clientVersion = serverConnection.getClientVersion();
-          if (msg.isRetry() && clientEvent.isConcurrencyConflict()
+          if (clientMessage.isRetry() && clientEvent.isConcurrencyConflict()
-              servConn.getProxyID(), true, clientEvent);
+              serverConnection.getProxyID(), true, clientEvent);
-          Version clientVersion = servConn.getClientVersion();
+          Version clientVersion = serverConnection.getClientVersion();
-              servConn.getProxyID(), true, clientEvent);
-          if (msg.isRetry() && clientEvent.getVersionTag() != null) {
+              serverConnection.getProxyID(), true, clientEvent);
+          if (clientMessage.isRetry() && clientEvent.getVersionTag() != null) {
-        result = region.basicBridgeCreate(key, null, true, callbackArg, servConn.getProxyID(), true,
-            clientEvent, false);
-        if (msg.isRetry() && clientEvent.isConcurrencyConflict()
+        result = region.basicBridgeCreate(key, null, true, callbackArg,
+            serverConnection.getProxyID(), true, clientEvent, false);
+        if (clientMessage.isRetry() && clientEvent.isConcurrencyConflict()
-        TXManagerImpl txMgr = (TXManagerImpl) servConn.getCache().getCacheTransactionManager();
+        TXManagerImpl txMgr =
+            (TXManagerImpl) serverConnection.getCache().getCacheTransactionManager();
-              servConn.getProxyID(), true, clientEvent, true);
+              serverConnection.getProxyID(), true, clientEvent, true);
-              servConn.getProxyID(), true, clientEvent);
+              serverConnection.getProxyID(), true, clientEvent);
-        if (msg.isRetry() && clientEvent.isConcurrencyConflict()
+        if (clientMessage.isRetry() && clientEvent.isConcurrencyConflict()
-        servConn.setModificationInfo(true, regionName, key);
+        serverConnection.setModificationInfo(true, regionName, key);
-        String message = servConn.getName() + ": Failed to put entry for region " + regionName
-            + " key " + key + " value " + valuePart;
+        String message = serverConnection.getName() + ": Failed to put entry for region "
+            + regionName + " key " + key + " value " + valuePart;
-      writeException(msg, rde, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, rde, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      writeException(msg, re, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, re, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      writeException(msg, MessageType.PUT_DELTA_ERROR, ide, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, MessageType.PUT_DELTA_ERROR, ide, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      checkForInterrupt(servConn, ce);
+      checkForInterrupt(serverConnection, ce);
-      writeException(msg, ce, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, ce, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-          logger.debug("{}: Unexpected Security exception", servConn.getName(), ce);
+          logger.debug("{}: Unexpected Security exception", serverConnection.getName(), ce);
-        logger.debug("{}: Unexpected Exception", servConn.getName(), ce);
+        logger.debug("{}: Unexpected Exception", serverConnection.getName(), ce);
-        writeReplyWithRefreshMetadata(msg, servConn, pr, sendOldValue, oldValueIsObject, oldValue,
-            pr.getNetworkHopType(), clientEvent.getVersionTag());
+        writeReplyWithRefreshMetadata(clientMessage, serverConnection, pr, sendOldValue,
+            oldValueIsObject, oldValue, pr.getNetworkHopType(), clientEvent.getVersionTag());
-        writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue,
+        writeReply(clientMessage, serverConnection, sendOldValue, oldValueIsObject, oldValue,
-      writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue,
+      writeReply(clientMessage, serverConnection, sendOldValue, oldValueIsObject, oldValue,
-    servConn.setAsTrue(RESPONDED);
+    serverConnection.setAsTrue(RESPONDED);
-          servConn.getName(), servConn.getSocketString(), regionName, key, valuePart);
+          serverConnection.getName(), serverConnection.getSocketString(), regionName, key,
+          valuePart);
-    replyMsg.addBytesPart(OK_BYTES);
+    replyMsg.addBytesPart(okBytes());
-      logger.trace("{}: rpl with REFRESH_METADAT tx: {} parts={}", servConn.getName(),
+      logger.trace("{}: rpl with REFRESH_METADATA tx: {} parts={}", servConn.getName(),
