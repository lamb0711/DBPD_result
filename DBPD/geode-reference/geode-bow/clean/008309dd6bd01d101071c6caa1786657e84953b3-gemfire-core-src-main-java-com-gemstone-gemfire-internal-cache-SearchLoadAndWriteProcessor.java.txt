Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.offheap.StoredObject;
-      InternalDistributedMember whoSuspected) {
+      InternalDistributedMember whoSuspected, String reason) {
-    CacheEvent event = getEventForListener(pevent);
-    if (event instanceof EntryEventImpl) {
-      if (((EntryEventImpl)event).inhibitAllNotifications()){
+    if (pevent instanceof EntryEventImpl) {
+      if (((EntryEventImpl)pevent).inhibitAllNotifications()){
-          logger.debug("Notification inhibited for key {}", event);
+          logger.debug("Notification inhibited for key {}", pevent);
+    CacheEvent event = getEventForListener(pevent);
+    try {
+    } finally {
+      if (event != pevent) {
+        if (event instanceof EntryEventImpl) {
+          ((EntryEventImpl) event).release();
+        }
+      }
+    }
-                        {
+                        if (eov instanceof StoredObject && !((StoredObject) eov).isSerialized()) {
+                          isSer = false;
+                          ebv = (byte[]) ((StoredObject)eov).getDeserializedForReading();
+                          ebvLen = ebv.length;
+                        } else {
