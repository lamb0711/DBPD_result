Merge branch 'feature/GEODE-8' into develop

-// $ANTLR : "oql.g" -> "OQLParser.java"$
+// $ANTLR 2.7.4: "oql.g" -> "OQLParser.java"$
-			_loop5085:
+			_loop107:
-					break _loop5085;
+					break _loop107;
-		_loop5093:
+		_loop115:
-				break _loop5093;
+				break _loop115;
-		boolean synPredMatched5131 = false;
+		boolean synPredMatched153 = false;
-			int _m5131 = mark();
-			synPredMatched5131 = true;
+			int _m153 = mark();
+			synPredMatched153 = true;
-				synPredMatched5131 = false;
+				synPredMatched153 = false;
-			rewind(_m5131);
-inputState.guessing--;
+			rewind(_m153);
+			inputState.guessing--;
-		if ( synPredMatched5131 ) {
+		if ( synPredMatched153 ) {
-			_loop5142:
+			_loop164:
-					break _loop5142;
+					break _loop164;
-			AST tmp17_AST = null;
-			tmp17_AST = astFactory.create(LT(1));
+			com.gemstone.gemfire.cache.query.internal.parse.ASTDummy tmp17_AST = null;
+			tmp17_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTDummy)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTDummy");
-			_loop5113:
+			_loop135:
-					break _loop5113;
+					break _loop135;
-		_loop5105:
+		_loop127:
-				break _loop5105;
+				break _loop127;
-		_loop5108:
+		_loop130:
-				break _loop5108;
+				break _loop130;
-		_loop5100:
+		_loop122:
-				break _loop5100;
+				break _loop122;
-			AST tmp55_AST = null;
-			tmp55_AST = astFactory.create(LT(1));
+			com.gemstone.gemfire.cache.query.internal.parse.ASTDummy tmp55_AST = null;
+			tmp55_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTDummy)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTDummy");
-			AST tmp56_AST = null;
-			tmp56_AST = astFactory.create(LT(1));
+			com.gemstone.gemfire.cache.query.internal.parse.ASTDummy tmp56_AST = null;
+			tmp56_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTDummy)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTDummy");
-		if (((LA(1) >= LITERAL_sum && LA(1) <= LITERAL_count)) && (LA(2)==TOK_LPAREN)) {
-			aggregateExpr();
-			astFactory.addASTChild(currentAST, returnAST);
-		}
-		else if ((_tokenSet_9.member(LA(1))) && (_tokenSet_10.member(LA(2)))) {
-			projectionAttributes();
-			astFactory.addASTChild(currentAST, returnAST);
-		}
-		else {
-			throw new NoViableAltException(LT(1), getFilename());
-		}
-		
+		projectionAttributes();
+		astFactory.addASTChild(currentAST, returnAST);
-		_loop5149:
+		_loop173:
-				break _loop5149;
+				break _loop173;
-	public final void aggregateExpr() throws RecognitionException, TokenStreamException {
-		
-		returnAST = null;
-		ASTPair currentAST = new ASTPair();
-		AST aggregateExpr_AST = null;
-		
-		{
-		if (((LA(1) >= LITERAL_sum && LA(1) <= LITERAL_avg))) {
-			{
-			switch ( LA(1)) {
-			case LITERAL_sum:
-			{
-				AST tmp61_AST = null;
-				tmp61_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp61_AST);
-				match(LITERAL_sum);
-				break;
-			}
-			case LITERAL_min:
-			{
-				AST tmp62_AST = null;
-				tmp62_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp62_AST);
-				match(LITERAL_min);
-				break;
-			}
-			case LITERAL_max:
-			{
-				AST tmp63_AST = null;
-				tmp63_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp63_AST);
-				match(LITERAL_max);
-				break;
-			}
-			case LITERAL_avg:
-			{
-				AST tmp64_AST = null;
-				tmp64_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp64_AST);
-				match(LITERAL_avg);
-				break;
-			}
-			default:
-			{
-				throw new NoViableAltException(LT(1), getFilename());
-			}
-			}
-			}
-			match(TOK_LPAREN);
-			query();
-			astFactory.addASTChild(currentAST, returnAST);
-			match(TOK_RPAREN);
-		}
-		else if ((LA(1)==LITERAL_count)) {
-			com.gemstone.gemfire.cache.query.internal.parse.ASTCount tmp67_AST = null;
-			tmp67_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCount)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCount");
-			astFactory.makeASTRoot(currentAST, tmp67_AST);
-			match(LITERAL_count);
-			match(TOK_LPAREN);
-			{
-			if ((_tokenSet_3.member(LA(1)))) {
-				query();
-				astFactory.addASTChild(currentAST, returnAST);
-			}
-			else if ((LA(1)==TOK_STAR)) {
-				AST tmp69_AST = null;
-				tmp69_AST = astFactory.create(LT(1));
-				astFactory.addASTChild(currentAST, tmp69_AST);
-				match(TOK_STAR);
-			}
-			else {
-				throw new NoViableAltException(LT(1), getFilename());
-			}
-			
-			}
-			match(TOK_RPAREN);
-		}
-		else {
-			throw new NoViableAltException(LT(1), getFilename());
-		}
-		
-		}
-		aggregateExpr_AST = (AST)currentAST.root;
-		returnAST = aggregateExpr_AST;
-	}
-	
-		com.gemstone.gemfire.cache.query.internal.parse.ASTCombination tmp71_AST = null;
-		tmp71_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCombination)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCombination");
-		astFactory.makeASTRoot(currentAST, tmp71_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTCombination tmp61_AST = null;
+		tmp61_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCombination)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCombination");
+		astFactory.makeASTRoot(currentAST, tmp61_AST);
-		_loop5128:
+		_loop150:
-				break _loop5128;
+				break _loop150;
-		AST tmp74_AST = null;
-		tmp74_AST = astFactory.create(LT(1));
-		astFactory.makeASTRoot(currentAST, tmp74_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTGroupBy tmp64_AST = null;
+		tmp64_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTGroupBy)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTGroupBy");
+		astFactory.makeASTRoot(currentAST, tmp64_AST);
-		fieldList();
+		groupByList();
-		com.gemstone.gemfire.cache.query.internal.parse.ASTOrderBy tmp77_AST = null;
-		tmp77_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTOrderBy)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTOrderBy");
-		astFactory.makeASTRoot(currentAST, tmp77_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTOrderBy tmp67_AST = null;
+		tmp67_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTOrderBy)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTOrderBy");
+		astFactory.makeASTRoot(currentAST, tmp67_AST);
-		_loop5153:
+		_loop177:
-				break _loop5153;
+				break _loop177;
-			AST tmp81_AST = null;
-			tmp81_AST = astFactory.create(LT(1));
+			AST tmp71_AST = null;
+			tmp71_AST = astFactory.create(LT(1));
-			AST tmp82_AST = null;
-			tmp82_AST = astFactory.create(LT(1));
+			AST tmp72_AST = null;
+			tmp72_AST = astFactory.create(LT(1));
-				limitClause_AST = (AST)astFactory.make( (new ASTArray(2)).add((AST)astFactory.create(LIMIT,"limitParam","com.gemstone.gemfire.cache.query.internal.parse.ASTParameter")).add(tmp82_AST));
+				limitClause_AST = (AST)astFactory.make( (new ASTArray(2)).add((AST)astFactory.create(LIMIT,"limitParam","com.gemstone.gemfire.cache.query.internal.parse.ASTParameter")).add(tmp72_AST));
-		AST ex1_AST = null;
-		AST ex2_AST = null;
+		AST tok1_AST = null;
+		AST tok2_AST = null;
+		AST tok3_AST = null;
+		AST tok4_AST = null;
+		AST node  = null;
-			expr();
-			ex1_AST = (AST)returnAST;
+			{
+			if (((LA(1) >= LITERAL_sum && LA(1) <= LITERAL_count)) && (LA(2)==TOK_LPAREN)) {
+				aggregateExpr();
+				tok1_AST = (AST)returnAST;
+				if ( inputState.guessing==0 ) {
+					node = tok1_AST;
+				}
+			}
+			else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_14.member(LA(2)))) {
+				expr();
+				tok2_AST = (AST)returnAST;
+				if ( inputState.guessing==0 ) {
+					node = tok2_AST;
+				}
+			}
+			else {
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+			}
-				projection_AST = (AST)astFactory.make( (new ASTArray(3)).add((AST)astFactory.create(PROJECTION,"projection","com.gemstone.gemfire.cache.query.internal.parse.ASTProjection")).add(ex1_AST).add(lb1_AST));
+				projection_AST = (AST)astFactory.make( (new ASTArray(3)).add((AST)astFactory.create(PROJECTION,"projection","com.gemstone.gemfire.cache.query.internal.parse.ASTProjection")).add(node).add(lb1_AST));
-		else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_14.member(LA(2)))) {
-			expr();
-			ex2_AST = (AST)returnAST;
+		else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_15.member(LA(2)))) {
+			{
+			if (((LA(1) >= LITERAL_sum && LA(1) <= LITERAL_count)) && (LA(2)==TOK_LPAREN)) {
+				aggregateExpr();
+				tok3_AST = (AST)returnAST;
+				if ( inputState.guessing==0 ) {
+					node = tok3_AST;
+				}
+			}
+			else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_15.member(LA(2)))) {
+				expr();
+				tok4_AST = (AST)returnAST;
+				if ( inputState.guessing==0 ) {
+					node = tok4_AST;
+				}
+			}
+			else {
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+			}
-				projection_AST = (AST)astFactory.make( (new ASTArray(3)).add((AST)astFactory.create(PROJECTION,"projection","com.gemstone.gemfire.cache.query.internal.parse.ASTProjection")).add(ex2_AST).add(lb2_AST));
+				projection_AST = (AST)astFactory.make( (new ASTArray(3)).add((AST)astFactory.create(PROJECTION,"projection","com.gemstone.gemfire.cache.query.internal.parse.ASTProjection")).add(node).add(lb2_AST));
-	public final void fieldList() throws RecognitionException, TokenStreamException {
+	public final void aggregateExpr() throws RecognitionException, TokenStreamException {
-		AST fieldList_AST = null;
+		AST aggregateExpr_AST = null;
+		AST tokExpr1_AST = null;
+		AST tokExpr2_AST = null;
+		int aggFunc = -1; boolean distinctOnly = false;
-		identifier();
-		astFactory.addASTChild(currentAST, returnAST);
-		match(TOK_COLON);
-		expr();
-		astFactory.addASTChild(currentAST, returnAST);
+		switch ( LA(1)) {
+		case LITERAL_sum:
+		case LITERAL_avg:
-		_loop5242:
-		do {
-			if ((LA(1)==TOK_COMMA)) {
-				match(TOK_COMMA);
-				identifier();
-				astFactory.addASTChild(currentAST, returnAST);
-				match(TOK_COLON);
+			{
+			if ((LA(1)==LITERAL_sum)) {
+				match(LITERAL_sum);
+				if ( inputState.guessing==0 ) {
+					aggFunc = SUM;
+				}
+			}
+			else if ((LA(1)==LITERAL_avg)) {
+				match(LITERAL_avg);
+				if ( inputState.guessing==0 ) {
+					aggFunc = AVG;
+				}
+			}
+			else {
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+			}
+			AST tmp77_AST = null;
+			tmp77_AST = astFactory.create(LT(1));
+			match(TOK_LPAREN);
+			{
+			if ((LA(1)==LITERAL_distinct) && (_tokenSet_4.member(LA(2)))) {
+				match(LITERAL_distinct);
+				if ( inputState.guessing==0 ) {
+					distinctOnly = true;
+				}
+			}
+			else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_16.member(LA(2)))) {
+			}
+			else {
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+			}
+			expr();
+			tokExpr1_AST = (AST)returnAST;
+			AST tmp79_AST = null;
+			tmp79_AST = astFactory.create(LT(1));
+			match(TOK_RPAREN);
+			if ( inputState.guessing==0 ) {
+				aggregateExpr_AST = (AST)currentAST.root;
+				aggregateExpr_AST = (AST)astFactory.make( (new ASTArray(2)).add((AST)astFactory.create(AGG_FUNC,"aggregate","com.gemstone.gemfire.cache.query.internal.parse.ASTAggregateFunc")).add(tokExpr1_AST)); 
+				((ASTAggregateFunc)aggregateExpr_AST).setAggregateFunctionType(aggFunc);
+				((ASTAggregateFunc)aggregateExpr_AST).setDistinctOnly(distinctOnly);
+				
+				currentAST.root = aggregateExpr_AST;
+				currentAST.child = aggregateExpr_AST!=null &&aggregateExpr_AST.getFirstChild()!=null ?
+					aggregateExpr_AST.getFirstChild() : aggregateExpr_AST;
+				currentAST.advanceChildToEnd();
+			}
+			break;
+		}
+		case LITERAL_min:
+		case LITERAL_max:
+		{
+			{
+			if ((LA(1)==LITERAL_min)) {
+				match(LITERAL_min);
+				if ( inputState.guessing==0 ) {
+					aggFunc = MIN;
+				}
+			}
+			else if ((LA(1)==LITERAL_max)) {
+				match(LITERAL_max);
+				if ( inputState.guessing==0 ) {
+					aggFunc = MAX;
+				}
+			}
+			else {
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+			}
+			AST tmp82_AST = null;
+			tmp82_AST = astFactory.create(LT(1));
+			match(TOK_LPAREN);
+			expr();
+			tokExpr2_AST = (AST)returnAST;
+			AST tmp83_AST = null;
+			tmp83_AST = astFactory.create(LT(1));
+			match(TOK_RPAREN);
+			if ( inputState.guessing==0 ) {
+				aggregateExpr_AST = (AST)currentAST.root;
+				aggregateExpr_AST = (AST)astFactory.make( (new ASTArray(2)).add((AST)astFactory.create(AGG_FUNC,"aggregate","com.gemstone.gemfire.cache.query.internal.parse.ASTAggregateFunc")).add(tokExpr2_AST)); 
+				((ASTAggregateFunc)aggregateExpr_AST).setAggregateFunctionType(aggFunc);               
+				
+				currentAST.root = aggregateExpr_AST;
+				currentAST.child = aggregateExpr_AST!=null &&aggregateExpr_AST.getFirstChild()!=null ?
+					aggregateExpr_AST.getFirstChild() : aggregateExpr_AST;
+				currentAST.advanceChildToEnd();
+			}
+			break;
+		}
+		case LITERAL_count:
+		{
+			com.gemstone.gemfire.cache.query.internal.parse.ASTAggregateFunc tmp84_AST = null;
+			tmp84_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTAggregateFunc)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTAggregateFunc");
+			astFactory.makeASTRoot(currentAST, tmp84_AST);
+			match(LITERAL_count);
+			match(TOK_LPAREN);
+			{
+			if ((LA(1)==TOK_STAR)) {
+				com.gemstone.gemfire.cache.query.internal.parse.ASTDummy tmp86_AST = null;
+				tmp86_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTDummy)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTDummy");
+				astFactory.addASTChild(currentAST, tmp86_AST);
+				match(TOK_STAR);
+			}
+			else if ((_tokenSet_4.member(LA(1)))) {
+				{
+				if ((LA(1)==LITERAL_distinct) && (_tokenSet_4.member(LA(2)))) {
+					match(LITERAL_distinct);
+					if ( inputState.guessing==0 ) {
+						distinctOnly = true;
+					}
+				}
+				else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_16.member(LA(2)))) {
+				}
+				else {
+					throw new NoViableAltException(LT(1), getFilename());
+				}
+				
+				}
-				break _loop5242;
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+			}
+			match(TOK_RPAREN);
+			if ( inputState.guessing==0 ) {
+				aggregateExpr_AST = (AST)currentAST.root;
+				
+				((ASTAggregateFunc)aggregateExpr_AST).setAggregateFunctionType(COUNT);
+				aggregateExpr_AST.setText("aggregate");
+				((ASTAggregateFunc)aggregateExpr_AST).setDistinctOnly(distinctOnly);
+				
+			}
+			aggregateExpr_AST = (AST)currentAST.root;
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltException(LT(1), getFilename());
+		}
+		}
+		returnAST = aggregateExpr_AST;
+	}
+	
+	public final void groupByList() throws RecognitionException, TokenStreamException {
+		
+		returnAST = null;
+		ASTPair currentAST = new ASTPair();
+		AST groupByList_AST = null;
+		
+		expr();
+		astFactory.addASTChild(currentAST, returnAST);
+		{
+		_loop268:
+		do {
+			if ((LA(1)==TOK_COMMA)) {
+				match(TOK_COMMA);
+				expr();
+				astFactory.addASTChild(currentAST, returnAST);
+			}
+			else {
+				break _loop268;
-		if ( inputState.guessing==0 ) {
-			fieldList_AST = (AST)currentAST.root;
-			fieldList_AST = (AST)astFactory.make( (new ASTArray(2)).add((AST)astFactory.create(COMBO,"fieldList","com.gemstone.gemfire.cache.query.internal.parse.ASTCombination")).add(fieldList_AST));
-			currentAST.root = fieldList_AST;
-			currentAST.child = fieldList_AST!=null &&fieldList_AST.getFirstChild()!=null ?
-				fieldList_AST.getFirstChild() : fieldList_AST;
-			currentAST.advanceChildToEnd();
-		}
-		fieldList_AST = (AST)currentAST.root;
-		returnAST = fieldList_AST;
+		groupByList_AST = (AST)currentAST.root;
+		returnAST = groupByList_AST;
-		boolean synPredMatched5159 = false;
-		if (((LA(1)==TOK_LPAREN) && (_tokenSet_15.member(LA(2))))) {
-			int _m5159 = mark();
-			synPredMatched5159 = true;
+		boolean synPredMatched183 = false;
+		if (((LA(1)==TOK_LPAREN) && (_tokenSet_17.member(LA(2))))) {
+			int _m183 = mark();
+			synPredMatched183 = true;
-				synPredMatched5159 = false;
+				synPredMatched183 = false;
-			rewind(_m5159);
-inputState.guessing--;
+			rewind(_m183);
+			inputState.guessing--;
-		if ( synPredMatched5159 ) {
+		if ( synPredMatched183 ) {
-		else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_16.member(LA(2)))) {
+		else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_18.member(LA(2)))) {
-		_loop5162:
+		_loop186:
-				break _loop5162;
+				break _loop186;
-		_loop5165:
+		_loop189:
-				break _loop5165;
+				break _loop189;
-		_loop5168:
+		_loop192:
-				break _loop5168;
+				break _loop192;
-			AST tmp94_AST = null;
-			tmp94_AST = astFactory.create(LT(1));
-			astFactory.makeASTRoot(currentAST, tmp94_AST);
+			AST tmp96_AST = null;
+			tmp96_AST = astFactory.create(LT(1));
+			astFactory.makeASTRoot(currentAST, tmp96_AST);
-			boolean synPredMatched5171 = false;
+			boolean synPredMatched195 = false;
-				int _m5171 = mark();
-				synPredMatched5171 = true;
+				int _m195 = mark();
+				synPredMatched195 = true;
-					synPredMatched5171 = false;
+					synPredMatched195 = false;
-				rewind(_m5171);
-inputState.guessing--;
+				rewind(_m195);
+				inputState.guessing--;
-			if ( synPredMatched5171 ) {
-				AST tmp97_AST = null;
-				tmp97_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp97_AST);
+			if ( synPredMatched195 ) {
+				AST tmp99_AST = null;
+				tmp99_AST = astFactory.create(LT(1));
+				astFactory.makeASTRoot(currentAST, tmp99_AST);
-			else if ((_tokenSet_17.member(LA(1))) && (_tokenSet_18.member(LA(2)))) {
+			else if ((_tokenSet_19.member(LA(1))) && (_tokenSet_20.member(LA(2)))) {
-		_loop5175:
+		_loop199:
-				break _loop5175;
+				break _loop199;
-			int _cnt5181=0;
-			_loop5181:
+			int _cnt205=0;
+			_loop205:
-						com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp101_AST = null;
-						tmp101_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
-						astFactory.makeASTRoot(currentAST, tmp101_AST);
+						com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp103_AST = null;
+						tmp103_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
+						astFactory.makeASTRoot(currentAST, tmp103_AST);
-						com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp102_AST = null;
-						tmp102_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
-						astFactory.makeASTRoot(currentAST, tmp102_AST);
+						com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp104_AST = null;
+						tmp104_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
+						astFactory.makeASTRoot(currentAST, tmp104_AST);
-						AST tmp103_AST = null;
-						tmp103_AST = astFactory.create(LT(1));
-						astFactory.makeASTRoot(currentAST, tmp103_AST);
+						AST tmp105_AST = null;
+						tmp105_AST = astFactory.create(LT(1));
+						astFactory.makeASTRoot(currentAST, tmp105_AST);
-						AST tmp104_AST = null;
-						tmp104_AST = astFactory.create(LT(1));
-						astFactory.makeASTRoot(currentAST, tmp104_AST);
+						AST tmp106_AST = null;
+						tmp106_AST = astFactory.create(LT(1));
+						astFactory.makeASTRoot(currentAST, tmp106_AST);
-						AST tmp105_AST = null;
-						tmp105_AST = astFactory.create(LT(1));
-						astFactory.makeASTRoot(currentAST, tmp105_AST);
+						AST tmp107_AST = null;
+						tmp107_AST = astFactory.create(LT(1));
+						astFactory.makeASTRoot(currentAST, tmp107_AST);
+					case LITERAL_avg:
-					case LITERAL_avg:
-					if ( _cnt5181>=1 ) { break _loop5181; } else {throw new NoViableAltException(LT(1), getFilename());}
+					if ( _cnt205>=1 ) { break _loop205; } else {throw new NoViableAltException(LT(1), getFilename());}
-				_cnt5181++;
+				_cnt205++;
-		else if ((_tokenSet_19.member(LA(1)))) {
+		else if ((_tokenSet_21.member(LA(1)))) {
-			_loop5183:
+			_loop207:
-					com.gemstone.gemfire.cache.query.internal.parse.ASTLike tmp106_AST = null;
-					tmp106_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLike)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLike");
-					astFactory.makeASTRoot(currentAST, tmp106_AST);
+					com.gemstone.gemfire.cache.query.internal.parse.ASTLike tmp108_AST = null;
+					tmp108_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLike)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLike");
+					astFactory.makeASTRoot(currentAST, tmp108_AST);
-					break _loop5183;
+					break _loop207;
-		_loop5189:
+		_loop213:
-			if ((_tokenSet_20.member(LA(1)))) {
+			if ((_tokenSet_22.member(LA(1)))) {
-					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp107_AST = null;
-					tmp107_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
-					astFactory.makeASTRoot(currentAST, tmp107_AST);
+					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp109_AST = null;
+					tmp109_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
+					astFactory.makeASTRoot(currentAST, tmp109_AST);
-					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp108_AST = null;
-					tmp108_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
-					astFactory.makeASTRoot(currentAST, tmp108_AST);
+					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp110_AST = null;
+					tmp110_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
+					astFactory.makeASTRoot(currentAST, tmp110_AST);
-					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp109_AST = null;
-					tmp109_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
-					astFactory.makeASTRoot(currentAST, tmp109_AST);
+					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp111_AST = null;
+					tmp111_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
+					astFactory.makeASTRoot(currentAST, tmp111_AST);
-					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp110_AST = null;
-					tmp110_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
-					astFactory.makeASTRoot(currentAST, tmp110_AST);
+					com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp tmp112_AST = null;
+					tmp112_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTCompareOp");
+					astFactory.makeASTRoot(currentAST, tmp112_AST);
-				if ((_tokenSet_17.member(LA(1)))) {
+				if ((_tokenSet_19.member(LA(1)))) {
-						AST tmp111_AST = null;
-						tmp111_AST = astFactory.create(LT(1));
-						astFactory.makeASTRoot(currentAST, tmp111_AST);
+						AST tmp113_AST = null;
+						tmp113_AST = astFactory.create(LT(1));
+						astFactory.makeASTRoot(currentAST, tmp113_AST);
-						AST tmp112_AST = null;
-						tmp112_AST = astFactory.create(LT(1));
-						astFactory.makeASTRoot(currentAST, tmp112_AST);
+						AST tmp114_AST = null;
+						tmp114_AST = astFactory.create(LT(1));
+						astFactory.makeASTRoot(currentAST, tmp114_AST);
-						AST tmp113_AST = null;
-						tmp113_AST = astFactory.create(LT(1));
-						astFactory.makeASTRoot(currentAST, tmp113_AST);
+						AST tmp115_AST = null;
+						tmp115_AST = astFactory.create(LT(1));
+						astFactory.makeASTRoot(currentAST, tmp115_AST);
-				break _loop5189;
+				break _loop213;
-		_loop5193:
+		_loop217:
-			if ((_tokenSet_21.member(LA(1)))) {
+			if ((_tokenSet_23.member(LA(1)))) {
-					AST tmp114_AST = null;
-					tmp114_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp114_AST);
+					AST tmp116_AST = null;
+					tmp116_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp116_AST);
-					AST tmp115_AST = null;
-					tmp115_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp115_AST);
+					AST tmp117_AST = null;
+					tmp117_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp117_AST);
-					AST tmp116_AST = null;
-					tmp116_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp116_AST);
+					AST tmp118_AST = null;
+					tmp118_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp118_AST);
-					AST tmp117_AST = null;
-					tmp117_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp117_AST);
+					AST tmp119_AST = null;
+					tmp119_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp119_AST);
-					AST tmp118_AST = null;
-					tmp118_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp118_AST);
+					AST tmp120_AST = null;
+					tmp120_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp120_AST);
-				break _loop5193;
+				break _loop217;
-		_loop5197:
+		_loop221:
-			if ((_tokenSet_22.member(LA(1)))) {
+			if ((_tokenSet_24.member(LA(1)))) {
-					AST tmp119_AST = null;
-					tmp119_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp119_AST);
+					AST tmp121_AST = null;
+					tmp121_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp121_AST);
-					AST tmp120_AST = null;
-					tmp120_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp120_AST);
+					AST tmp122_AST = null;
+					tmp122_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp122_AST);
-					AST tmp121_AST = null;
-					tmp121_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp121_AST);
+					AST tmp123_AST = null;
+					tmp123_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp123_AST);
-					AST tmp122_AST = null;
-					tmp122_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp122_AST);
+					AST tmp124_AST = null;
+					tmp124_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp124_AST);
-				break _loop5197;
+				break _loop221;
-			com.gemstone.gemfire.cache.query.internal.parse.ASTIn tmp123_AST = null;
-			tmp123_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTIn)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTIn");
-			astFactory.makeASTRoot(currentAST, tmp123_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTIn tmp125_AST = null;
+			tmp125_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTIn)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTIn");
+			astFactory.makeASTRoot(currentAST, tmp125_AST);
-		else if ((_tokenSet_23.member(LA(1)))) {
+		else if ((_tokenSet_25.member(LA(1)))) {
-		_loop5203:
+		_loop227:
-			if ((_tokenSet_24.member(LA(1)))) {
+			if ((_tokenSet_26.member(LA(1)))) {
-					com.gemstone.gemfire.cache.query.internal.parse.ASTUnary tmp125_AST = null;
-					tmp125_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUnary)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUnary");
-					astFactory.makeASTRoot(currentAST, tmp125_AST);
+					com.gemstone.gemfire.cache.query.internal.parse.ASTUnary tmp127_AST = null;
+					tmp127_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUnary)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUnary");
+					astFactory.makeASTRoot(currentAST, tmp127_AST);
-					AST tmp126_AST = null;
-					tmp126_AST = astFactory.create(LT(1));
-					astFactory.makeASTRoot(currentAST, tmp126_AST);
+					AST tmp128_AST = null;
+					tmp128_AST = astFactory.create(LT(1));
+					astFactory.makeASTRoot(currentAST, tmp128_AST);
-					com.gemstone.gemfire.cache.query.internal.parse.ASTUnary tmp127_AST = null;
-					tmp127_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUnary)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUnary");
-					astFactory.makeASTRoot(currentAST, tmp127_AST);
+					com.gemstone.gemfire.cache.query.internal.parse.ASTUnary tmp129_AST = null;
+					tmp129_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUnary)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUnary");
+					astFactory.makeASTRoot(currentAST, tmp129_AST);
-				break _loop5203;
+				break _loop227;
-		_loop5208:
+		_loop232:
-				else if ((LA(1)==QuotedIdentifier||LA(1)==Identifier) && (_tokenSet_25.member(LA(2)))) {
+				else if ((LA(1)==QuotedIdentifier||LA(1)==Identifier) && (_tokenSet_27.member(LA(2)))) {
-				break _loop5208;
+				break _loop232;
+		case LITERAL_avg:
-		case LITERAL_avg:
-			com.gemstone.gemfire.cache.query.internal.parse.ASTRegionPath tmp134_AST = null;
-			tmp134_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTRegionPath)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTRegionPath");
-			astFactory.addASTChild(currentAST, tmp134_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTRegionPath tmp136_AST = null;
+			tmp136_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTRegionPath)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTRegionPath");
+			astFactory.addASTChild(currentAST, tmp136_AST);
-			boolean synPredMatched5222 = false;
+			boolean synPredMatched246 = false;
-				int _m5222 = mark();
-				synPredMatched5222 = true;
+				int _m246 = mark();
+				synPredMatched246 = true;
-					synPredMatched5222 = false;
+					synPredMatched246 = false;
-				rewind(_m5222);
-inputState.guessing--;
+				rewind(_m246);
+				inputState.guessing--;
-			if ( synPredMatched5222 ) {
+			if ( synPredMatched246 ) {
-			else if ((LA(1)==QuotedIdentifier||LA(1)==Identifier) && (_tokenSet_25.member(LA(2)))) {
+			else if ((LA(1)==QuotedIdentifier||LA(1)==Identifier) && (_tokenSet_27.member(LA(2)))) {
-				_loop5214:
+				_loop238:
-						break _loop5214;
+						break _loop238;
-				AST tmp136_AST = null;
-				tmp136_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp136_AST);
+				AST tmp138_AST = null;
+				tmp138_AST = astFactory.create(LT(1));
+				astFactory.makeASTRoot(currentAST, tmp138_AST);
-			AST tmp137_AST = null;
-			tmp137_AST = astFactory.create(LT(1));
-			astFactory.addASTChild(currentAST, tmp137_AST);
+			AST tmp139_AST = null;
+			tmp139_AST = astFactory.create(LT(1));
+			astFactory.addASTChild(currentAST, tmp139_AST);
-			_loop5218:
+			_loop242:
-					break _loop5218;
+					break _loop242;
-				AST tmp140_AST = null;
-				tmp140_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp140_AST);
+				AST tmp142_AST = null;
+				tmp142_AST = astFactory.create(LT(1));
+				astFactory.makeASTRoot(currentAST, tmp142_AST);
-				com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr tmp141_AST = null;
-				tmp141_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr");
-				astFactory.makeASTRoot(currentAST, tmp141_AST);
+				com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr tmp143_AST = null;
+				tmp143_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr");
+				astFactory.makeASTRoot(currentAST, tmp143_AST);
-				AST tmp142_AST = null;
-				tmp142_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp142_AST);
+				AST tmp144_AST = null;
+				tmp144_AST = astFactory.create(LT(1));
+				astFactory.makeASTRoot(currentAST, tmp144_AST);
-				AST tmp143_AST = null;
-				tmp143_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp143_AST);
+				AST tmp145_AST = null;
+				tmp145_AST = astFactory.create(LT(1));
+				astFactory.makeASTRoot(currentAST, tmp145_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr tmp146_AST = null;
-			tmp146_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr");
-			astFactory.makeASTRoot(currentAST, tmp146_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr tmp148_AST = null;
+			tmp148_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr");
+			astFactory.makeASTRoot(currentAST, tmp148_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr tmp150_AST = null;
-			tmp150_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr");
-			astFactory.makeASTRoot(currentAST, tmp150_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr tmp152_AST = null;
+			tmp152_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConversionExpr");
+			astFactory.makeASTRoot(currentAST, tmp152_AST);
-			AST tmp154_AST = null;
-			tmp154_AST = astFactory.create(LT(1));
-			astFactory.makeASTRoot(currentAST, tmp154_AST);
+			AST tmp156_AST = null;
+			tmp156_AST = astFactory.create(LT(1));
+			astFactory.makeASTRoot(currentAST, tmp156_AST);
-			AST tmp155_AST = null;
-			tmp155_AST = astFactory.create(LT(1));
-			astFactory.makeASTRoot(currentAST, tmp155_AST);
+			AST tmp157_AST = null;
+			tmp157_AST = astFactory.create(LT(1));
+			astFactory.makeASTRoot(currentAST, tmp157_AST);
-			AST tmp156_AST = null;
-			tmp156_AST = astFactory.create(LT(1));
-			astFactory.makeASTRoot(currentAST, tmp156_AST);
+			AST tmp158_AST = null;
+			tmp158_AST = astFactory.create(LT(1));
+			astFactory.makeASTRoot(currentAST, tmp158_AST);
-			AST tmp157_AST = null;
-			tmp157_AST = astFactory.create(LT(1));
-			astFactory.makeASTRoot(currentAST, tmp157_AST);
+			AST tmp159_AST = null;
+			tmp159_AST = astFactory.create(LT(1));
+			astFactory.makeASTRoot(currentAST, tmp159_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr tmp160_AST = null;
-			tmp160_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr");
-			astFactory.makeASTRoot(currentAST, tmp160_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr tmp162_AST = null;
+			tmp162_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr");
+			astFactory.makeASTRoot(currentAST, tmp162_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr tmp161_AST = null;
-			tmp161_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr");
-			astFactory.makeASTRoot(currentAST, tmp161_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr tmp163_AST = null;
+			tmp163_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTUndefinedExpr");
+			astFactory.makeASTRoot(currentAST, tmp163_AST);
-		AST tmp165_AST = null;
-		tmp165_AST = astFactory.create(LT(1));
-		astFactory.makeASTRoot(currentAST, tmp165_AST);
+		AST tmp167_AST = null;
+		tmp167_AST = astFactory.create(LT(1));
+		astFactory.makeASTRoot(currentAST, tmp167_AST);
-				AST tmp168_AST = null;
-				tmp168_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp168_AST);
+				AST tmp170_AST = null;
+				tmp170_AST = astFactory.create(LT(1));
+				astFactory.makeASTRoot(currentAST, tmp170_AST);
-				com.gemstone.gemfire.cache.query.internal.parse.ASTConstruction tmp169_AST = null;
-				tmp169_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConstruction)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConstruction");
-				astFactory.makeASTRoot(currentAST, tmp169_AST);
+				com.gemstone.gemfire.cache.query.internal.parse.ASTConstruction tmp171_AST = null;
+				tmp171_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTConstruction)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTConstruction");
+				astFactory.makeASTRoot(currentAST, tmp171_AST);
-				AST tmp170_AST = null;
-				tmp170_AST = astFactory.create(LT(1));
-				astFactory.makeASTRoot(currentAST, tmp170_AST);
+				AST tmp172_AST = null;
+				tmp172_AST = astFactory.create(LT(1));
+				astFactory.makeASTRoot(currentAST, tmp172_AST);
-			AST tmp171_AST = null;
-			tmp171_AST = astFactory.create(LT(1));
-			astFactory.makeASTRoot(currentAST, tmp171_AST);
+			AST tmp173_AST = null;
+			tmp173_AST = astFactory.create(LT(1));
+			astFactory.makeASTRoot(currentAST, tmp173_AST);
-			AST tmp172_AST = null;
-			tmp172_AST = astFactory.create(LT(1));
-			astFactory.addASTChild(currentAST, tmp172_AST);
+			AST tmp174_AST = null;
+			tmp174_AST = astFactory.create(LT(1));
+			astFactory.addASTChild(currentAST, tmp174_AST);
-					AST tmp173_AST = null;
-					tmp173_AST = astFactory.create(LT(1));
-					astFactory.addASTChild(currentAST, tmp173_AST);
+					AST tmp175_AST = null;
+					tmp175_AST = astFactory.create(LT(1));
+					astFactory.addASTChild(currentAST, tmp175_AST);
-					_loop5249:
+					_loop278:
-							AST tmp174_AST = null;
-							tmp174_AST = astFactory.create(LT(1));
-							astFactory.addASTChild(currentAST, tmp174_AST);
+							AST tmp176_AST = null;
+							tmp176_AST = astFactory.create(LT(1));
+							astFactory.addASTChild(currentAST, tmp176_AST);
-							break _loop5249;
+							break _loop278;
-			AST tmp175_AST = null;
-			tmp175_AST = astFactory.create(LT(1));
-			astFactory.addASTChild(currentAST, tmp175_AST);
+			AST tmp177_AST = null;
+			tmp177_AST = astFactory.create(LT(1));
+			astFactory.addASTChild(currentAST, tmp177_AST);
-		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp176_AST = null;
-		tmp176_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-		astFactory.addASTChild(currentAST, tmp176_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp178_AST = null;
+		tmp178_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+		astFactory.addASTChild(currentAST, tmp178_AST);
+	public final void fieldList() throws RecognitionException, TokenStreamException {
+		
+		returnAST = null;
+		ASTPair currentAST = new ASTPair();
+		AST fieldList_AST = null;
+		
+		identifier();
+		astFactory.addASTChild(currentAST, returnAST);
+		match(TOK_COLON);
+		expr();
+		astFactory.addASTChild(currentAST, returnAST);
+		{
+		_loop271:
+		do {
+			if ((LA(1)==TOK_COMMA)) {
+				match(TOK_COMMA);
+				identifier();
+				astFactory.addASTChild(currentAST, returnAST);
+				match(TOK_COLON);
+				expr();
+				astFactory.addASTChild(currentAST, returnAST);
+			}
+			else {
+				break _loop271;
+			}
+			
+		} while (true);
+		}
+		if ( inputState.guessing==0 ) {
+			fieldList_AST = (AST)currentAST.root;
+			fieldList_AST = (AST)astFactory.make( (new ASTArray(2)).add((AST)astFactory.create(COMBO,"fieldList","com.gemstone.gemfire.cache.query.internal.parse.ASTCombination")).add(fieldList_AST));
+			currentAST.root = fieldList_AST;
+			currentAST.child = fieldList_AST!=null &&fieldList_AST.getFirstChild()!=null ?
+				fieldList_AST.getFirstChild() : fieldList_AST;
+			currentAST.advanceChildToEnd();
+		}
+		fieldList_AST = (AST)currentAST.root;
+		returnAST = fieldList_AST;
+	}
+	
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp177_AST = null;
-			tmp177_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp177_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp182_AST = null;
+			tmp182_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp182_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp178_AST = null;
-			tmp178_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp178_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp183_AST = null;
+			tmp183_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp183_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp179_AST = null;
-			tmp179_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp179_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp184_AST = null;
+			tmp184_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp184_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp180_AST = null;
-			tmp180_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp180_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp185_AST = null;
+			tmp185_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp185_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp181_AST = null;
-			tmp181_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp181_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp186_AST = null;
+			tmp186_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp186_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp182_AST = null;
-			tmp182_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp182_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp187_AST = null;
+			tmp187_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp187_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp183_AST = null;
-			tmp183_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp183_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp188_AST = null;
+			tmp188_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp188_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp184_AST = null;
-			tmp184_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp184_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp189_AST = null;
+			tmp189_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp189_AST);
-			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp185_AST = null;
-			tmp185_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-			astFactory.addASTChild(currentAST, tmp185_AST);
+			com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp190_AST = null;
+			tmp190_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+			astFactory.addASTChild(currentAST, tmp190_AST);
-		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp186_AST = null;
-		tmp186_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-		astFactory.makeASTRoot(currentAST, tmp186_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp191_AST = null;
+		tmp191_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+		astFactory.makeASTRoot(currentAST, tmp191_AST);
-		AST tmp187_AST = null;
-		tmp187_AST = astFactory.create(LT(1));
-		astFactory.addASTChild(currentAST, tmp187_AST);
+		AST tmp192_AST = null;
+		tmp192_AST = astFactory.create(LT(1));
+		astFactory.addASTChild(currentAST, tmp192_AST);
-		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp188_AST = null;
-		tmp188_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-		astFactory.makeASTRoot(currentAST, tmp188_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp193_AST = null;
+		tmp193_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+		astFactory.makeASTRoot(currentAST, tmp193_AST);
-		AST tmp189_AST = null;
-		tmp189_AST = astFactory.create(LT(1));
-		astFactory.addASTChild(currentAST, tmp189_AST);
+		AST tmp194_AST = null;
+		tmp194_AST = astFactory.create(LT(1));
+		astFactory.addASTChild(currentAST, tmp194_AST);
-		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp190_AST = null;
-		tmp190_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-		astFactory.makeASTRoot(currentAST, tmp190_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp195_AST = null;
+		tmp195_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+		astFactory.makeASTRoot(currentAST, tmp195_AST);
-		AST tmp191_AST = null;
-		tmp191_AST = astFactory.create(LT(1));
-		astFactory.addASTChild(currentAST, tmp191_AST);
+		AST tmp196_AST = null;
+		tmp196_AST = astFactory.create(LT(1));
+		astFactory.addASTChild(currentAST, tmp196_AST);
-		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp192_AST = null;
-		tmp192_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
-		astFactory.makeASTRoot(currentAST, tmp192_AST);
+		com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral tmp197_AST = null;
+		tmp197_AST = (com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral)astFactory.create(LT(1),"com.gemstone.gemfire.cache.query.internal.parse.ASTLiteral");
+		astFactory.makeASTRoot(currentAST, tmp197_AST);
-		AST tmp193_AST = null;
-		tmp193_AST = astFactory.create(LT(1));
-		astFactory.addASTChild(currentAST, tmp193_AST);
+		AST tmp198_AST = null;
+		tmp198_AST = astFactory.create(LT(1));
+		astFactory.addASTChild(currentAST, tmp198_AST);
+		"AGG_FUNC",
+		"SUM",
+		"AVG",
+		"COUNT",
+		"MAX",
+		"MIN",
+		"\"avg\"",
-		"\"avg\"",
-		long[] data = { -6917526699697455072L, 297237573265260573L, 32651L, 0L, 0L, 0L};
+		long[] data = { 2327943626784L, 576460615267125096L, 2089665L, 0L, 0L, 0L};
-		long[] data = { 2327970839714L, -50577222L, 32767L, 0L, 0L, 0L};
+		long[] data = { 2327970839714L, -3236942208L, 2097151L, 0L, 0L, 0L};
-		long[] data = { -6917529027641081856L, 5L, 0L, 0L};
+		long[] data = { 0L, 360L, 0L, 0L};
-		long[] data = { 2327943626784L, 297237573265260568L, 32651L, 0L, 0L, 0L};
+		long[] data = { 2327943626784L, 576460615267124736L, 2089665L, 0L, 0L, 0L};
-		long[] data = { 2327939432480L, 297237573265260560L, 32651L, 0L, 0L, 0L};
+		long[] data = { 2327939432480L, 576460615267124224L, 2089665L, 0L, 0L, 0L};
-		long[] data = { 210L, 36352L, 0L, 0L};
+		long[] data = { 210L, 2326528L, 0L, 0L};
-		long[] data = { 4611688346398227698L, -50557000L, 32767L, 0L, 0L, 0L};
+		long[] data = { 2327970839794L, -3235647984L, 2097151L, 0L, 0L, 0L};
-		long[] data = { 210L, 36608L, 0L, 0L};
+		long[] data = { 210L, 2342912L, 0L, 0L};
-		long[] data = { 25778192594L, 36352L, 0L, 0L};
+		long[] data = { 25778192594L, 2326528L, 0L, 0L};
-		long[] data = { 2327939563552L, 297237573265260560L, 32651L, 0L, 0L, 0L};
+		long[] data = { 2327939563552L, 576460615267124224L, 2089665L, 0L, 0L, 0L};
-		long[] data = { 4611688346398228064L, -50593544L, 32767L, 0L, 0L, 0L};
+		long[] data = { 2327970840160L, -3237986800L, 2097151L, 0L, 0L, 0L};
-		long[] data = { 146L, 35840L, 0L, 0L};
+		long[] data = { 146L, 2293760L, 0L, 0L};
-		long[] data = { 146L, 33792L, 0L, 0L};
+		long[] data = { 146L, 2162688L, 0L, 0L};
-		long[] data = { 146L, 1024L, 0L, 0L};
+		long[] data = { 146L, 65536L, 0L, 0L};
-		long[] data = { 4611688346398227554L, -50593544L, 32767L, 0L, 0L, 0L};
+		long[] data = { 2327970839650L, -3237986816L, 2097151L, 0L, 0L, 0L};
-		long[] data = { 25769803776L, -562949953421312L, 127L, 0L, 0L, 0L};
+		long[] data = { 2327970839650L, -3237986800L, 2097151L, 0L, 0L, 0L};
-		long[] data = { 4611688346431782898L, 297237575356100600L, 32651L, 0L, 0L, 0L};
+		long[] data = { 2327970839600L, -3237990912L, 2097151L, 0L, 0L, 0L};
-		long[] data = { 2327939432480L, 297237573263163408L, 32651L, 0L, 0L, 0L};
+		long[] data = { 25769803776L, -36028797018963968L, 8191L, 0L, 0L, 0L};
-		long[] data = { 4611688346431782898L, 297237575356100568L, 32651L, 0L, 0L, 0L};
+		long[] data = { 2328004394994L, 576460749080886800L, 2089665L, 0L, 0L, 0L};
-		long[] data = { 4611686044230747090L, 77573952L, 0L, 0L};
+		long[] data = { 2327939432480L, 576460615132906496L, 2089665L, 0L, 0L, 0L};
-		long[] data = { 13369344L, 0L, 0L};
+		long[] data = { 2328004394994L, 576460749080884752L, 2089665L, 0L, 0L, 0L};
-		long[] data = { 53248L, 402653184L, 0L, 0L};
+		long[] data = { 25803359186L, 4964732944L, 0L, 0L};
-		long[] data = { 196608L, 1610612736L, 0L, 0L};
+		long[] data = { 13369344L, 0L, 0L};
-		long[] data = { 4611686044245423058L, 2090839872L, 0L, 0L};
+		long[] data = { 53248L, 25769803776L, 0L, 0L};
-		long[] data = { 49152L, 6442450944L, 0L, 0L};
+		long[] data = { 196608L, 103079215104L, 0L, 0L};
-		long[] data = { 4611686044262203346L, 2090840000L, 0L, 0L};
+		long[] data = { 25818035154L, 133813751824L, 0L, 0L};
+	private static final long[] mk_tokenSet_26() {
+		long[] data = { 49152L, 412316860416L, 0L, 0L};
+		return data;
+	}
+	public static final BitSet _tokenSet_26 = new BitSet(mk_tokenSet_26());
+	private static final long[] mk_tokenSet_27() {
+		long[] data = { 25834815442L, 133813760016L, 0L, 0L};
+		return data;
+	}
+	public static final BitSet _tokenSet_27 = new BitSet(mk_tokenSet_27());
