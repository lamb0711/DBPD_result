Merge branch 'feature/GEODE-17-2' into develop

+import com.vmware.gemfire.tools.pulse.internal.log.PulseLogWriter;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+
-import java.util.Locale;
-import java.util.ResourceBundle;
-
-import com.vmware.gemfire.tools.pulse.internal.log.PulseLogWriter;
+import java.util.Locale;
+import java.util.ResourceBundle;
+  private boolean useGemFireCredentials = false;
-   * Convenience method for now, seeing that we're maintaining a 1:1 mapping
-   * between webapp and cluster
+   * we're maintaining a 1:1 mapping between webapp and cluster, there is no need for a map of clusters based on the host and port
+   * We are using this clusterMap to maintain cluster for different users now.
+   * For a single-user connection to gemfire JMX, we will use the default username/password in the pulse.properties
+   * (# JMX User Properties )
+   * pulse.jmxUserName=admin
+   * pulse.jmxUserPassword=admin
+   *
+   * But for multi-user connections to gemfireJMX, i.e pulse that uses gemfire integrated security, we will need to get the username form the context
-    return this.getCluster(getJmxHost(), getJmxPort());
+    String username = null;
+    String password = null;
+    if(useGemFireCredentials) {
+      Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+      if(auth!=null) {
+        username = auth.getName();
+        password = (String) auth.getCredentials();
+      }
+    }
+    else{
+      username = this.jmxUserName;
+      password = this.jmxUserPassword;
+    }
+    return this.getCluster(username, password);
-  public Cluster getCluster(String host, String port) {
+  public Cluster getCluster(String username, String password) {
-      String key = this.getClusterKey(host, port);
+      String key = username;
-          data = new Cluster(host, port, this.getJmxUserName(), this.getJmxUserPassword());
+          data = new Cluster(this.jmxHost, this.jmxPort, username, password);
-          data.setName(PulseConstants.APP_NAME + "-" + host + ":" + port);
+          data.setName(PulseConstants.APP_NAME + "-" + this.jmxHost + ":" + this.jmxPort + ":" + username);
+  public boolean isUseGemFireCredentials() {
+    return useGemFireCredentials;
+  }
+
+  public void setUseGemFireCredentials(boolean useGemFireCredentials) {
+    this.useGemFireCredentials = useGemFireCredentials;
+  }
+  
+  
+
