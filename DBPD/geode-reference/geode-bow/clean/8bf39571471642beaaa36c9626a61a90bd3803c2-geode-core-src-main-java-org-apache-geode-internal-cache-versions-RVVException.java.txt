Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * RVV exceptions are part of a RegionVersionVector.  They are held by
- * RegionVersionHolders.<p>
+ * RVV exceptions are part of a RegionVersionVector. They are held by RegionVersionHolders.
+ * <p>
- * An RVV exception represents a missing range of versions from a member.
- * This is represented as a pair of version numbers: the last version we've
- * received from the member and the next version we've received from the member.
- * The span of versions between (but not including) these two numbers are
- * the versions that are missing.<p>
+ * An RVV exception represents a missing range of versions from a member. This is represented as a
+ * pair of version numbers: the last version we've received from the member and the next version
+ * we've received from the member. The span of versions between (but not including) these two
+ * numbers are the versions that are missing.
+ * <p>
- * RVVException also tracks the scattering of versions we've received that fall
- * within the range of the exception.  As these missing versions are received
- * the RVVException coalesces the range.  If isFilled() returns true after
- * adding a missing version to the RVVException, the hole has been filled
- * and the RVVException is no longer needed.<p>
+ * RVVException also tracks the scattering of versions we've received that fall within the range of
+ * the exception. As these missing versions are received the RVVException coalesces the range. If
+ * isFilled() returns true after adding a missing version to the RVVException, the hole has been
+ * filled and the RVVException is no longer needed.
+ * <p>
- * New exceptions are common to see as operations
- * arrive from parallel threads operating on the same region.  These exceptions
- * are soon mended and disappear.<p>
+ * New exceptions are common to see as operations arrive from parallel threads operating on the same
+ * region. These exceptions are soon mended and disappear.
+ * <p>
- * Old exceptions indicate that we missed something that we are unlikely
- * to receive without asking for it.<p>
+ * Old exceptions indicate that we missed something that we are unlikely to receive without asking
+ * for it.
+ * <p>
- * RVVException currently depends on external synchronization.  Typically the
- * RegionVersionHolder that holds the exception is locked while accessing
- * its RVVExceptions.  This is what is done in RegionVersionVector.
+ * RVVException currently depends on external synchronization. Typically the RegionVersionHolder
+ * that holds the exception is locked while accessing its RVVExceptions. This is what is done in
+ * RegionVersionVector.
-abstract class RVVException implements Comparable<RVVException>, Cloneable, VersionedDataSerializable {
+abstract class RVVException
+    implements Comparable<RVVException>, Cloneable, VersionedDataSerializable {
-  
+
-   * The maximum version span that can be represented by a bitset
-   * RVVException.  If the span is greater than this we use the
-   * version of RVVException that collects "received versions" in a
+   * The maximum version span that can be represented by a bitset RVVException. If the span is
+   * greater than this we use the version of RVVException that collects "received versions" in a
-  protected static final long RVV_MAX_BITSET_SPAN = 128 * 8;  // 128 bytes gives a span of 1k versions
-  
+  protected static final long RVV_MAX_BITSET_SPAN = 128 * 8; // 128 bytes gives a span of 1k
+                                                             // versions
+
-  
+
+
-  static RVVException createException(long previousVersion, long nextVersion, long initialExceptionCount) {
+  static RVVException createException(long previousVersion, long nextVersion,
+      long initialExceptionCount) {
-    if (UseTreeSetsForTesting ||
-        ( delta > RVV_MAX_BITSET_SPAN 
-            && initialExceptionCount * 512 < delta )) {
+    if (UseTreeSetsForTesting
+        || (delta > RVV_MAX_BITSET_SPAN && initialExceptionCount * 512 < delta)) {
-  
+
-  
-  
-  
+
+
+
-    int size = (int)InternalDataSerializer.readUnsignedVL(in);
+    int size = (int) InternalDataSerializer.readUnsignedVL(in);
-    long[] versions = new long[(int)size];
-    for(int i = 0; i < size; i++) {
+    long[] versions = new long[(int) size];
+    for (int i = 0; i < size; i++) {
-    
-    for (int i=0; i<size; i++) {
+
+    for (int i = 0; i < size; i++) {
-  
-  
+
+
-  
+
-  
+
-  
+
-   * returns true if the missing versions that this exception represents have
-   * all been received
+   * returns true if the missing versions that this exception represents have all been received
-    return this.previousVersion+1 >= this.nextVersion;
+    return this.previousVersion + 1 >= this.nextVersion;
-  
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    return (thisVal<anotherVal ? -1 : (thisVal==anotherVal ? 0 : 1));
+    return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));
-  
+
-      && (this.nextVersion == other.nextVersion);
+        && (this.nextVersion == other.nextVersion);
-  
+
-  
+
-  public abstract class ReceivedVersionsIterator  {
+  public abstract class ReceivedVersionsIterator {
-    
+
-    
+
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  }
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {}
