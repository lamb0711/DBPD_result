GEODE-5464: Generify DistributionManager and related classes (#2174)

GEODE-5464: Generify DistributionManager and related classes

* Augment various collections to use generics
* Inline some iterator loops that were trivially "foreach" loops
* remove unused code
* Inline some redundant local variables
* make some methods more private
* change some tests to use `InternalDistributedMember` instead of
  `DistributedMember`.
* Make ThrottlingMemLinkedQueueWithDMStats generic and use atomic.
  - The previous synchronization looked quite wrong.
-import java.io.Serializable;
-import java.util.NoSuchElementException;
-    this.viewMembers = new ArrayList<InternalDistributedMember>(allIds);
+    this.viewMembers = new ArrayList<>(allIds);
-  /*
-   * static { // Make the id a little unique String host; try { host =
-   * InetAddress.getLocalHost().getCanonicalHostName(); MemberAttributes.setDefaults(65535,
-   * org.apache.geode.internal.OSProcess.getId(), DistributionManager.LONER_DM_TYPE,
-   * MemberAttributes.parseRoles(system.getConfig().getRoles())); id = new
-   * InternalDistributedMember(host, 65535); // noise value for port number
-   *
-   * } catch (UnknownHostException ex) { throw new InternalError(LocalizedStrings.
-   * LonerDistributionManager_CANNOT_RESOLVE_LOCAL_HOST_NAME_TO_AN_IP_ADDRESS.toLocalizedString());
-   * }
-   *
-   * }
-   */
-
-      new ConcurrentHashMap();
+      new ConcurrentHashMap<>();
-  public Set getDistributionManagerIds() {
+  public Set<InternalDistributedMember> getDistributionManagerIds() {
-  public Set getDistributionManagerIdsIncludingAdmin() {
+  public Set<InternalDistributedMember> getDistributionManagerIdsIncludingAdmin() {
-  public Serializable[] getDirectChannels(InternalDistributedMember[] ids) {
-    return ids;
-  }
-
-  public Set getOtherDistributionManagerIds() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getOtherDistributionManagerIds() {
+    return Collections.emptySet();
-  public Set getOtherNormalDistributionManagerIds() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getOtherNormalDistributionManagerIds() {
+    return Collections.emptySet();
-  public Set getAllOtherMembers() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getAllOtherMembers() {
+    return Collections.emptySet();
-  public Set addMembershipListenerAndGetDistributionManagerIds(MembershipListener l) {
+  public Set<InternalDistributedMember> addMembershipListenerAndGetDistributionManagerIds(
+      MembershipListener l) {
-  public Set addAllMembershipListenerAndGetAllIds(MembershipListener l) {
+  public Set<InternalDistributedMember> addAllMembershipListenerAndGetAllIds(MembershipListener l) {
-  public int getDistributionManagerCount() {
-    return 0;
-  }
-
-  public Set putOutgoingUserData(final DistributionMessage message) {
-    if (message.forAll() || message.getRecipients().length == 0) {
-      // do nothing
-      return null;
-    } else {
-      throw new RuntimeException(
-          LocalizedStrings.LonerDistributionManager_LONER_TRIED_TO_SEND_MESSAGE_TO_0
-              .toLocalizedString(message.getRecipientsDescription()));
-    }
-  }
-
-  public Map getChannelMap() {
-    return null;
-  }
-
-  public Map getMemberMap() {
-    return null;
-  }
-
-  public void restartCommunications() {
-
-  }
-
-  public DistributedMember getOldestMember(Collection members) throws NoSuchElementException {
-    if (members.size() == 1) {
-      DistributedMember member = (DistributedMember) members.iterator().next();
-      if (member.equals(viewMembers.get(0))) {
-        return member;
-      }
-    }
-    throw new NoSuchElementException(
-        LocalizedStrings.LonerDistributionManager_MEMBER_NOT_FOUND_IN_MEMBERSHIP_SET
-            .toLocalizedString());
-  }
-
-  public Set getAdminMemberSet() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getAdminMemberSet() {
+    return Collections.emptySet();
-  public Set putOutgoing(DistributionMessage msg) {
+  public Set<InternalDistributedMember> putOutgoing(DistributionMessage msg) {
-  public void setUnfinishedStartups(Collection s) {}
+  public void setUnfinishedStartups(Collection<InternalDistributedMember> s) {}
-      return Collections.singleton((DistributedMember) getDistributionManagerId());
+      return Collections.singleton(getDistributionManagerId());
-  public Set getNormalDistributionManagerIds() {
+  public Set<InternalDistributedMember> getNormalDistributionManagerIds() {
