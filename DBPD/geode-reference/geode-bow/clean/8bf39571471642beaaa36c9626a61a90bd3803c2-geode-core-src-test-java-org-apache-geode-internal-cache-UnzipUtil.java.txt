Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Utility methods for unzipping a file. Used for backwards compatibility
- * test for gateway queue to handle checked in test code.
+ * Utility methods for unzipping a file. Used for backwards compatibility test for gateway queue to
+ * handle checked in test code.
-    
+
-    if(!dir.exists() && !dir.mkdir()) {
+    if (!dir.exists() && !dir.mkdir()) {
-    
+
-    while((entry = zipInput.getNextEntry()) != null) {
+    while ((entry = zipInput.getNextEntry()) != null) {
-      File newFile = new File(dir,entry.getName());
-      if(entry.isDirectory()) {
-        if(!newFile.mkdirs()) {
+      File newFile = new File(dir, entry.getName());
+      if (entry.isDirectory()) {
+        if (!newFile.mkdirs()) {
-      copyInputStream(zipInput,
-          new BufferedOutputStream(new FileOutputStream(newFile)));
+      copyInputStream(zipInput, new BufferedOutputStream(new FileOutputStream(newFile)));
-  
-  public static final void copyInputStream(InputStream in, OutputStream out)
-  throws IOException
-  {
+
+  public static final void copyInputStream(InputStream in, OutputStream out) throws IOException {
-    while((len = in.read(buffer)) >= 0)
+    while ((len = in.read(buffer)) >= 0)
-    
+
