Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  public void setPutAllEntryData(PutAllEntryData[] putAllEntryData) {
+    for (int i = 0; i < putAllEntryData.length; i++) {
+      putAllData[i] = putAllEntryData[i];
+    }
+    this.putAllDataSize = putAllEntryData.length;
+  }
+  
+  /**
+   * Add an entry that this putall operation should distribute.
+   */
+  public void addEntry(PutAllEntryData putAllEntry)
+  {
+    this.putAllData[this.putAllDataSize] = putAllEntry;
+    this.putAllDataSize += 1;
+    //cachedEvents.add(ev);
+  }
+  
+  public void freeOffHeapResources() {
+    // I do not use eventIterator here because it forces the lazy creation of EntryEventImpl by calling getEventForPosition.
+    for (int i=0; i < this.putAllDataSize; i++) {
+      PutAllEntryData entry = this.putAllData[i];
+      if (entry != null && entry.event != null) {
+        entry.event.release();
+      }
+    }
+  }
+  
+  
-    EntryEventImpl ev = new EntryEventImpl(
+    EntryEventImpl ev = EntryEventImpl.create(
+    boolean returnedEv = false;
+    try {
+    returnedEv = true;
+    } finally {
+      if (!returnedEv) {
+        ev.release();
+      }
+    }
-      this.value = event.getRawNewValue();
-      Object oldValue = event.getRawOldValue();
+      this.value = event.getRawNewValueAsHeapObject();
+      Object oldValue = event.getRawOldValueAsHeapObject();
+	msg.setFetchFromHDFS(event.isFetchFromHDFS());
+    msg.setPutDML(event.isPutDML());
-        event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument());
+        event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), false, false /*isPutDML*/);
-            event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument());
+            event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), event.isFetchFromHDFS(), event.isPutDML());
+        prMsg.setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());
+    // By default, fetchFromHDFS == true;
+    private transient boolean fetchFromHDFS = true;
+    
+    private transient boolean isPutDML = false;
+
-      EntryEventImpl event = new EntryEventImpl(
+      EntryEventImpl event = EntryEventImpl.create(
-        boolean requiresRegionContext) {
+        boolean requiresRegionContext, boolean fetchFromHDFS, boolean isPutDML) {
+	  ev.setFetchFromHDFS(fetchFromHDFS);
+      ev.setPutDML(isPutDML);
+        ev.release();
-      EntryEventImpl ev = new EntryEventImpl(rgn, entry.getOp(),
+      EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(),
+      boolean returnedEv = false;
+      try {
+      returnedEv = true;
+      } finally {
+        if (!returnedEv) {
+          ev.release();
+        }
+      }
-            doEntryPut(putAllData[i], rgn, requiresRegionContext);
+            doEntryPut(putAllData[i], rgn, requiresRegionContext,  fetchFromHDFS, isPutDML);
-
+    
+    public void setFetchFromHDFS(boolean val) {
+      this.fetchFromHDFS = val;
+    }
+    
+    public void setPutDML(boolean val) {
+      this.isPutDML = val;
+    }
+    
+    @Override
+    protected short computeCompressedExtBits(short bits) {
+      bits = super.computeCompressedExtBits(bits);
+      if (fetchFromHDFS) {
+        bits |= FETCH_FROM_HDFS;
+      }
+      if (isPutDML) {
+        bits |= IS_PUT_DML;
+      }
+      return bits;
+    }
