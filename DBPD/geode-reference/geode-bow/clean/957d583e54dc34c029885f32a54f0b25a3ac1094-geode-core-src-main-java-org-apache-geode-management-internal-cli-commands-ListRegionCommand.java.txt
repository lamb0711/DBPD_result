GEODE-3267: Refactoring QueueCommands - updated based on feedback

+import java.util.Arrays;
+import java.util.List;
-import java.util.TreeSet;
+import java.util.stream.Collectors;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
-      Set<RegionInformation> regionInfoSet = new LinkedHashSet<>();
-      TabularResultData resultData = ResultBuilder.createTabularResultData();
-      ArrayList<?> resultList = (ArrayList<?>) rc.getResult();
+      List<?> resultList = (ArrayList<?>) rc.getResult();
-      if (resultList != null) {
-
-        for (Object resultObj : resultList) {
-          if (resultObj != null) {
-            if (resultObj instanceof Object[]) {
-              Object[] resultObjectArray = (Object[]) resultObj;
-              for (Object regionInfo : resultObjectArray) {
-                if (regionInfo instanceof RegionInformation) {
-                  regionInfoSet.add((RegionInformation) regionInfo);
-                }
-              }
-            }
-          }
-        }
-
-        Set<String> regionNames = new TreeSet<>();
-
-        for (RegionInformation regionInfo : regionInfoSet) {
-          regionNames.add(regionInfo.getName());
-          Set<String> subRegionNames = regionInfo.getSubRegionNames();
-
-          regionNames.addAll(subRegionNames);
-        }
-
-        for (String regionName : regionNames) {
-          resultData.accumulate("List of regions", regionName);
-        }
-
-        if (!regionNames.isEmpty()) {
-          result = ResultBuilder.buildResult(resultData);
-
-        } else {
-          result = ResultBuilder.createInfoResult(CliStrings.LIST_REGION__MSG__NOT_FOUND);
-        }
+      if (resultList == null) {
+        return null;
+
+      resultList.stream().filter(resultObj -> resultObj instanceof Object[])
+          .map(resultObj -> (Object[]) resultObj).flatMap(Arrays::stream)
+          .filter(regionInfo -> regionInfo instanceof RegionInformation)
+          .map(regionInfo -> (RegionInformation) regionInfo)
+          .collect(Collectors.toCollection(LinkedHashSet::new));
