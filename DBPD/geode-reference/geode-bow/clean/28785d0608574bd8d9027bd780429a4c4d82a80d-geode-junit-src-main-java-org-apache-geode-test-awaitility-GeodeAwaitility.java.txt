GEODE-5978: Expand GeodeAwaitility and add test coverage

Add getTimeout to allow the default timeout to be used for more than
just Awaitility (for example, with Mockito.timeout).

Add toTimeDuration to facilitate conversions between java.time.Duration
and org.awaitility.Duration.

Make timeout non-static for testing and write some unit tests.

+import static java.lang.Long.getLong;
+import static java.time.Duration.ofMillis;
+import static java.util.concurrent.TimeUnit.SECONDS;
+import org.mockito.Mockito;
- * Utility to set consistent defaults for {@link org.awaitility.Awaitility} calls for all geode
- * tests
+ * Utility to set consistent defaults for {@link org.awaitility.Awaitility} calls for all Geode
+ * tests.
-  public static final Integer TIMEOUT_SECONDS =
-      Integer.getInteger("GEODE_AWAITILITY_TIMEOUT_SECONDS", 300);
-  public static final Duration TIMEOUT = new Duration(TIMEOUT_SECONDS, TimeUnit.SECONDS);
-  public static final Duration POLL_INTERVAL = new Duration(50, TimeUnit.MILLISECONDS);
-  public static final Duration POLL_DELAY = Duration.ONE_HUNDRED_MILLISECONDS;
+  /**
+   * System property with value in seconds which will override the await timeout.
+   */
+  public static final String TIMEOUT_SECONDS_PROPERTY = "GEODE_AWAITILITY_TIMEOUT_SECONDS";
+
+  private static final Duration DEFAULT_TIMEOUT = Duration.FIVE_MINUTES;
+  private static final Duration POLL_INTERVAL = new Duration(50, TimeUnit.MILLISECONDS);
+  private static final Duration POLL_DELAY = Duration.ONE_HUNDRED_MILLISECONDS;
-   * Start building an await statement using Geode's default test timeout
+   * Start building an await statement using Geode's default testing timeout.
+   *
-   * Start building an await statement using Geode's default test timeout
+   * Start building an await statement using Geode's default test timeout.
-   * @param alias A name for this await, if you test has multiple await statements
+   * @param alias a name for this await, if you test has multiple await statements
+   *
-        .atMost(TIMEOUT)
+        .atMost(getTimeout())
+
+  /**
+   * Gets the timeout value as a {@link Duration}.
+   *
+   * <p>
+   * One use of this is with {@link Mockito#timeout(long)}:
+   *
+   * <pre>
+   * import static org.apache.geode.test.awaitility.GeodeAwaitility.getTimeout;
+   *
+   * private static final long TIMEOUT = getTimeout().getValueInMS();
+   *
+   * {@literal @}Test
+   * public void test() {
+   * ...
+   * ArgumentCaptor<AlertDetails> alertDetailsCaptor = ArgumentCaptor.forClass(AlertDetails.class);
+   * verify(messageListener, timeout(TIMEOUT)).created(alertDetailsCaptor.capture());
+   * }
+   *
+   * <pre>
+   *
+   * @return the current timeout value as a {@code Duration}
+   */
+  public static Duration getTimeout() {
+    return new Duration(getLong(TIMEOUT_SECONDS_PROPERTY, DEFAULT_TIMEOUT.getValue()), SECONDS);
+  }
+
+  /**
+   * Converts from {@code org.awaitility.Duration} to {@link java.time.Duration}.
+   *
+   * @param duration a {@code org.awaitility.Duration} to convert to {@code java.time.Duration}
+   *
+   * @return the {@code java.time.Duration} value of duration
+   */
+  public static java.time.Duration toTimeDuration(Duration duration) {
+    return ofMillis(duration.getValueInMS());
+  }
