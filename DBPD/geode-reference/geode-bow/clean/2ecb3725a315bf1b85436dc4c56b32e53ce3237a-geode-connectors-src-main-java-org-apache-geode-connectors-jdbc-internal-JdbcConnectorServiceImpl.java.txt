GEODE-4863: refactor jdbc commands to use this public cluster configuration api (#1776)

   * refactored jdbc connector commands to use public cc service
   * removed JdbcConnectorServiceXmlGenerator
   * removed RegionMappingBuilder & ConnectionConfigBuilder
   * if cc service is running then user can only alter whats available in CC
   * describe & List commands now list entries from cc service
   * converted some integration tests to junits
   * removed unwanted functions, tests

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>

-import org.apache.geode.connectors.jdbc.internal.xml.JdbcConnectorServiceXmlGenerator;
+import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
-import org.apache.geode.internal.cache.extension.Extensible;
-import org.apache.geode.internal.cache.xmlcache.XmlGenerator;
-  private final Map<String, ConnectionConfiguration> connectionsByName = new ConcurrentHashMap<>();
-  private final Map<String, RegionMapping> mappingsByRegion = new ConcurrentHashMap<>();
+  private final Map<String, ConnectorService.Connection> connectionsByName =
+      new ConcurrentHashMap<>();
+  private final Map<String, ConnectorService.RegionMapping> mappingsByRegion =
+      new ConcurrentHashMap<>();
-  public void createConnectionConfig(ConnectionConfiguration config)
+  public void createConnectionConfig(ConnectorService.Connection config)
-    registerAsExtension();
-    ConnectionConfiguration existing = connectionsByName.putIfAbsent(config.getName(), config);
+    ConnectorService.Connection existing = connectionsByName.putIfAbsent(config.getName(), config);
-      throw new ConnectionConfigExistsException(
-          "ConnectionConfiguration " + config.getName() + " exists");
+      throw new ConnectionConfigExistsException("Connection " + config.getName() + " exists");
-  public void replaceConnectionConfig(ConnectionConfiguration alteredConfig)
+  public void replaceConnectionConfig(ConnectorService.Connection alteredConfig)
-    registerAsExtension();
-    ConnectionConfiguration existingConfig = connectionsByName.get(alteredConfig.getName());
+    ConnectorService.Connection existingConfig = connectionsByName.get(alteredConfig.getName());
-          "ConnectionConfiguration " + alteredConfig.getName() + " was not found");
+          "Connection configuration " + alteredConfig.getName() + " was not found");
-    registerAsExtension();
-  public ConnectionConfiguration getConnectionConfig(String connectionName) {
+  public ConnectorService.Connection getConnectionConfig(String connectionName) {
-  public Set<ConnectionConfiguration> getConnectionConfigs() {
-    Set<ConnectionConfiguration> connectionConfigs = new HashSet<>();
+  public Set<ConnectorService.Connection> getConnectionConfigs() {
+    Set<ConnectorService.Connection> connectionConfigs = new HashSet<>();
-  public Set<RegionMapping> getRegionMappings() {
-    Set<RegionMapping> regionMappings = new HashSet<>();
+  public Set<ConnectorService.RegionMapping> getRegionMappings() {
+    Set<ConnectorService.RegionMapping> regionMappings = new HashSet<>();
-  public void createRegionMapping(RegionMapping mapping) throws RegionMappingExistsException {
-    registerAsExtension();
-    RegionMapping existing = mappingsByRegion.putIfAbsent(mapping.getRegionName(), mapping);
+  public void createRegionMapping(ConnectorService.RegionMapping mapping)
+      throws RegionMappingExistsException {
+    ConnectorService.RegionMapping existing =
+        mappingsByRegion.putIfAbsent(mapping.getRegionName(), mapping);
-  public void replaceRegionMapping(RegionMapping alteredMapping)
+  public void replaceRegionMapping(ConnectorService.RegionMapping alteredMapping)
-    registerAsExtension();
-    RegionMapping existingMapping = mappingsByRegion.get(alteredMapping.getRegionName());
+    ConnectorService.RegionMapping existingMapping =
+        mappingsByRegion.get(alteredMapping.getRegionName());
-  public RegionMapping getMappingForRegion(String regionName) {
+  public ConnectorService.RegionMapping getMappingForRegion(String regionName) {
-    registerAsExtension();
-  private synchronized void registerAsExtension() {
-    if (!registered) {
-      cache.getExtensionPoint().addExtension(this);
-      registered = true;
-    }
-  }
-
-  @Override
-  public XmlGenerator<Cache> getXmlGenerator() {
-    return new JdbcConnectorServiceXmlGenerator(connectionsByName.values(),
-        mappingsByRegion.values());
-  }
-
-  @Override
-  public void beforeCreate(Extensible<Cache> source, Cache cache) {
-    // nothing
-  }
-
-  @Override
-  public void onCreate(Extensible<Cache> source, Extensible<Cache> target) {
-    // nothing
-  }
