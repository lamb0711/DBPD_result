Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * GemFireTransactionDataSource extends AbstractDataSource. This is a datasource
- * class which provides connections from the pool. These connection can
- * participate in the transaction. The objects of these class are
- * ConnectionEventListener for connection close and error events.
+ * GemFireTransactionDataSource extends AbstractDataSource. This is a datasource class which
+ * provides connections from the pool. These connection can participate in the transaction. The
+ * objects of these class are ConnectionEventListener for connection close and error events.
- * Modified the exception handling & changed the name of some
- * functions.
+ * Modified the exception handling & changed the name of some functions.
-public class GemFireTransactionDataSource extends AbstractDataSource implements 
-    ConnectionEventListener {
+public class GemFireTransactionDataSource extends AbstractDataSource
+    implements ConnectionEventListener {
-  
+
-  private Map xaResourcesMap = Collections.synchronizedMap( new HashMap());
+  private Map xaResourcesMap = Collections.synchronizedMap(new HashMap());
-   * Place holder for abstract method 
-   * isWrapperFor(java.lang.Class) in java.sql.Wrapper
-   * required by jdk 1.6
+   * Place holder for abstract method isWrapperFor(java.lang.Class) in java.sql.Wrapper required by
+   * jdk 1.6
-   * @throws SQLException 
-   * @return boolean 
+   * @throws SQLException
+   * @return boolean
-   public boolean isWrapperFor(Class iface) throws SQLException {
-     return true;
-   }
+  public boolean isWrapperFor(Class iface) throws SQLException {
+    return true;
+  }
-   * Place holder for abstract method
-   * java.lang Object unwrap(java.lang.Class) in java.sql.Wrapper
+   * Place holder for abstract method java.lang Object unwrap(java.lang.Class) in java.sql.Wrapper
-   * @throws SQLException 
-   * @return java.lang.Object 
+   * @throws SQLException
+   * @return java.lang.Object
-   public Object unwrap(Class iface)  throws SQLException {
-     return iface;
-   }
+  public Object unwrap(Class iface) throws SQLException {
+    return iface;
+  }
-   * @param configs - The ConfiguredDataSourceProperties containing the
-   *          datasource properties.
+   * @param configs - The ConfiguredDataSourceProperties containing the datasource properties.
-  public GemFireTransactionDataSource(XADataSource xaDS,
-      ConfiguredDataSourceProperties configs) throws SQLException {
+  public GemFireTransactionDataSource(XADataSource xaDS, ConfiguredDataSourceProperties configs)
+      throws SQLException {
-    if ((xaDS == null) || (configs == null)) { throw new SQLException(LocalizedStrings.GemFireTransactionDataSource_GEMFIRETRANSACTIONDATASOURCEXADATASOURCE_CLASS_OBJECT_IS_NULL_OR_CONFIGUREDDATASOURCEPROPERTIES_OBJECT_IS_NULL.toLocalizedString()); }
+    if ((xaDS == null) || (configs == null)) {
+      throw new SQLException(
+          LocalizedStrings.GemFireTransactionDataSource_GEMFIRETRANSACTIONDATASOURCEXADATASOURCE_CLASS_OBJECT_IS_NULL_OR_CONFIGUREDDATASOURCEPROPERTIES_OBJECT_IS_NULL
+              .toLocalizedString());
+    }
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-      if (logger.isDebugEnabled()) { 
+      if (logger.isDebugEnabled()) {
-   * Implementation of datasource function. This method is used to get the
-   * connection from the pool. Default user name and password will be used.
+   * Implementation of datasource function. This method is used to get the connection from the pool.
+   * Default user name and password will be used.
-    if (!isActive) { throw new SQLException(LocalizedStrings.GemFireTransactionDataSource_GEMFIRETRANSACTIONDATASOURCEGETCONNECTIONNO_VALID_CONNECTION_AVAILABLE.toLocalizedString()); }
+    if (!isActive) {
+      throw new SQLException(
+          LocalizedStrings.GemFireTransactionDataSource_GEMFIRETRANSACTIONDATASOURCEGETCONNECTIONNO_VALID_CONNECTION_AVAILABLE
+              .toLocalizedString());
+    }
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-   * Implementation of datasource function. This method is used to get the
-   * connection. The specified user name and passowrd will be used.
+   * Implementation of datasource function. This method is used to get the connection. The specified
+   * user name and passowrd will be used.
-  public Connection getConnection(String clUsername, String clPassword)
-      throws SQLException {
+  public Connection getConnection(String clUsername, String clPassword) throws SQLException {
-   * Implementation of call back function from ConnectionEventListener
-   * interface. This callback will be invoked on connection close event.
+   * Implementation of call back function from ConnectionEventListener interface. This callback will
+   * be invoked on connection close event.
-            txn.delistResource(xar, XAResource.TMSUCCESS);
+          txn.delistResource(xar, XAResource.TMSUCCESS);
-      }
-      catch (Exception e) {
-        String exception = "GemFireTransactionDataSource::connectionClosed: Exception occured due to "
-            + e;
-        if (logger.isDebugEnabled()) { 
+      } catch (Exception e) {
+        String exception =
+            "GemFireTransactionDataSource::connectionClosed: Exception occured due to " + e;
+        if (logger.isDebugEnabled()) {
-   * Implementation of call back function from ConnectionEventListener
-   * interface. This callback will be invoked on connection error event.
+   * Implementation of call back function from ConnectionEventListener interface. This callback will
+   * be invoked on connection error event.
-      }
-      catch (Exception ex) {
-        String exception = "GemFireTransactionDataSource::connectionErrorOccured: Exception occured due to "
-            + ex;
-        if (logger.isDebugEnabled()) { 
+      } catch (Exception ex) {
+        String exception =
+            "GemFireTransactionDataSource::connectionErrorOccured: Exception occured due to " + ex;
+        if (logger.isDebugEnabled()) {
-  void registerTranxConnection(XAConnection xaConn) throws Exception
-  {
+  void registerTranxConnection(XAConnection xaConn) throws Exception {
-        //Add in the Map after successful registration of XAResource
-        this.xaResourcesMap.put(xaConn, xar);        
+        // Add in the Map after successful registration of XAResource
+        this.xaResourcesMap.put(xaConn, xar);
-    }
-    catch (Exception ex) {
-      Exception e = new Exception(LocalizedStrings.GemFireTransactionDataSource_GEMFIRETRANSACTIONDATASOURCEREGISTERTRANXCONNECTION_EXCEPTION_IN_REGISTERING_THE_XARESOURCE_WITH_THE_TRANSACTIONEXCEPTION_OCCURED_0.toLocalizedString(ex));
+    } catch (Exception ex) {
+      Exception e = new Exception(
+          LocalizedStrings.GemFireTransactionDataSource_GEMFIRETRANSACTIONDATASOURCEREGISTERTRANXCONNECTION_EXCEPTION_IN_REGISTERING_THE_XARESOURCE_WITH_THE_TRANSACTIONEXCEPTION_OCCURED_0
+              .toLocalizedString(ex));
-  protected Connection getSQLConnection(PooledConnection poolC)
-      throws SQLException {
+  protected Connection getSQLConnection(PooledConnection poolC) throws SQLException {
-      throw new SQLException(LocalizedStrings.GemFireTransactionDataSource_GEMFIRECONNPOOLEDDATASOURCEGETCONNFROMCONNPOOLJAVASQLCONNECTION_OBTAINED_IS_INVALID.toLocalizedString());
+      throw new SQLException(
+          LocalizedStrings.GemFireTransactionDataSource_GEMFIRECONNPOOLEDDATASOURCEGETCONNFROMCONNPOOLJAVASQLCONNECTION_OBTAINED_IS_INVALID
+              .toLocalizedString());
