GEODE-4625: name collision check when create region through gfsh (#1483)




+import java.util.Collections;
+import org.apache.commons.lang.StringUtils;
+import org.apache.geode.management.internal.cli.exceptions.EntityExistsException;
-    // validating the region path
+    // adding name collision check for regions created with regionShortcut only
+    DistributedRegionMXBean regionBean =
+        getManagementService().getDistributedRegionMXBean(regionPath);
+
+    if (regionBean != null && regionShortcut != null) {
+      // when creating a non-proxy region and there is already a non empty node
+      if (!regionShortcut.isProxy() && regionBean.getMemberCount() > regionBean.getEmptyNodes()) {
+        throw new EntityExistsException(
+            String.format("Region %s already exists on the cluster.", regionPath), ifNotExists);
+      }
+
+      // proxy regions can only be created on members not having this regionName already defined
+      if (regionShortcut.isProxy()) {
+        Set<String> membersWithThisRegion =
+            Arrays.stream(regionBean.getMembers()).collect(Collectors.toSet());
+        Set<String> membersWithinGroup = findMembers(groups, null).stream()
+            .map(DistributedMember::getName).collect(Collectors.toSet());
+        if (!Collections.disjoint(membersWithinGroup, membersWithThisRegion)) {
+          throw new EntityExistsException(String.format(
+              "Region %s already exists on these members: %s. You can only create "
+                  + "proxy regions with the same name on other members.",
+              regionPath, StringUtils.join(membersWithThisRegion, ",")), ifNotExists);
+        }
+      }
+
+      // then check if the existing region's data policy is compatible
+      if (regionShortcut.isPartition() && !regionBean.getRegionType().contains("PARTITION")) {
+        throw new EntityExistsException("The existing region is not a partitioned region",
+            ifNotExists);
+      }
+      if (regionShortcut.isReplicate() && !(regionBean.getRegionType().equals("EMPTY")
+          || regionBean.getRegionType().contains("REPLICATE"))) {
+        throw new EntityExistsException("The existing region is not a replicate region",
+            ifNotExists);
+      }
+    }
+
+    // validating the parent region
-    if (isPersistentShortcut(functionArgs.getRegionShortcut())
+    if ((functionArgs.getRegionShortcut() != null
+        && functionArgs.getRegionShortcut().isPersistent())
-  private boolean isPersistentShortcut(RegionShortcut shortcut) {
-    return shortcut == RegionShortcut.LOCAL_PERSISTENT
-        || shortcut == RegionShortcut.LOCAL_PERSISTENT_OVERFLOW
-        || shortcut == RegionShortcut.PARTITION_PERSISTENT
-        || shortcut == RegionShortcut.PARTITION_PERSISTENT_OVERFLOW
-        || shortcut == RegionShortcut.PARTITION_REDUNDANT_PERSISTENT
-        || shortcut == RegionShortcut.PARTITION_REDUNDANT_PERSISTENT_OVERFLOW
-        || shortcut == RegionShortcut.REPLICATE_PERSISTENT
-        || shortcut == RegionShortcut.REPLICATE_PERSISTENT_OVERFLOW;
-  }
-
