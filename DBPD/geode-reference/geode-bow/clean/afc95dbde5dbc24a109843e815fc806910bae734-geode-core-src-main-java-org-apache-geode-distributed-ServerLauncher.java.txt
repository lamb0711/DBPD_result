Revert "Merge pull request #3878 from aaronlindsey/server-online-uses-startup-tasks"

This reverts commit d9a9e30275ae21e33212a48ca72762bacdf37d67, reversing
changes made to f0db209e0508a313e1095a99d3e6009c1d229ce0.

-import java.util.concurrent.CompletableFuture;
-import java.util.function.Supplier;
-import org.apache.geode.internal.process.FileControllableProcess;
-  private final ServerLauncherCacheProvider serverLauncherCacheProvider;
-  private final Supplier<ControllableProcess> controllableProcessFactory;
-    serverLauncherCacheProvider = builder.getServerLauncherCacheProvider();
-    controllableProcessFactory = builder.getControllableProcessFactory();
-        process = getControllableProcess();
+        process = new ControllableProcess(controlHandler, new File(getWorkingDirectory()),
+            ProcessType.SERVER, isForcing());
-          startCacheServer(cache);
+          startCacheServer(cache, startTime);
-        awaitStartupTasks(cache, startTime);
-
-    Iterable<ServerLauncherCacheProvider> loader = getServerLauncherCacheProviders();
+    ServiceLoader<ServerLauncherCacheProvider> loader =
+        ServiceLoader.load(ServerLauncherCacheProvider.class);
-  private Iterable<ServerLauncherCacheProvider> getServerLauncherCacheProviders() {
-    return serverLauncherCacheProvider != null
-        ? Collections.singleton(serverLauncherCacheProvider)
-        : ServiceLoader.load(ServerLauncherCacheProvider.class);
-  }
-
+   * @param startTime the system clock time at which the start method was called
-  private void startCacheServer(final Cache cache) throws IOException {
+  @VisibleForTesting
+  void startCacheServer(final Cache cache, long startTime) throws IOException {
-  }
-  private void awaitStartupTasks(Cache cache, long startTime) {
-    CompletableFuture<Void> startupTasks =
-        ((InternalResourceManager) cache.getResourceManager())
-            .allOfStartupTasks();
-
-    startupTasks
-        .thenRun(afterStartup)
-        .exceptionally((throwable) -> {
-          exceptionAction.accept(throwable);
-          return null;
-        })
-        .join();
+    ((InternalResourceManager) cache.getResourceManager())
+        .runWhenStartupTasksComplete(afterStartup, exceptionAction);
-  private ControllableProcess getControllableProcess()
-      throws IOException, FileAlreadyExistsException, PidUnavailableException {
-    return controllableProcessFactory != null
-        ? controllableProcessFactory.get()
-        : new FileControllableProcess(controlHandler, new File(getWorkingDirectory()),
-            ProcessType.SERVER, isForcing());
-  }
-
-    private ServerLauncherCacheProvider serverLauncherCacheProvider;
-    private Supplier<ControllableProcess> controllableProcessFactory;
-      return startupExceptionAction;
-    }
-
-    /**
-     * Sets the ServerLauncherCacheProvider to use when creating the cache.
-     *
-     * @param serverLauncherCacheProvider the cache provider to use
-     * @return this builder
-     */
-    Builder setServerLauncherCacheProvider(
-        ServerLauncherCacheProvider serverLauncherCacheProvider) {
-      this.serverLauncherCacheProvider = serverLauncherCacheProvider;
-      return this;
-    }
-
-    /**
-     * Gets the ServerLauncherCacheProvider to use when creating the cache.
-     *
-     * @return the cache provider
-     */
-    ServerLauncherCacheProvider getServerLauncherCacheProvider() {
-      return serverLauncherCacheProvider;
-    }
-
-    /**
-     * Sets the factory to use to get a {@code ControllableProcess} when starting the server.
-     *
-     * @param controllableProcessFactory the controllable process factory to use
-     * @return this builder
-     */
-    Builder setControllableProcessFactory(
-        Supplier<ControllableProcess> controllableProcessFactory) {
-      this.controllableProcessFactory = controllableProcessFactory;
-      return this;
-    }
-
-    /**
-     * Gets the factory used to get a {@code ControllableProcess} when starting the server.
-     *
-     * @return the controllable process factory
-     */
-    Supplier<ControllableProcess> getControllableProcessFactory() {
-      return controllableProcessFactory;
+      return this.startupExceptionAction;
