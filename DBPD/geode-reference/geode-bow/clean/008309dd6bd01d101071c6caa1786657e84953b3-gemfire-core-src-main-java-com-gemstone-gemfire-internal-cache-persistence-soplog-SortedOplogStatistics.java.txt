Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  private final int activeReadersId;
+  
+  private final int storeUsageBytesId;
+    StatisticDescriptor activeReaderCount = tf.createLongGauge("activeReaderCount", "The total number of active file readers", "files");
+    
+    StatisticDescriptor storeUsageBytes = tf.createLongGauge("storeUsageBytes", "The total volume occupied on persistent store", "bytes");
-        activeFileCount, inactiveFileCount
+        activeFileCount, inactiveFileCount, activeReaderCount, storeUsageBytes
+    activeReadersId = activeReaderCount.getId();
+    storeUsageBytesId = storeUsageBytes.getId();
+  public long getActiveReaderCount() {
+    return stats.getLong(activeReadersId);
+  }
+  
+  public void incActiveReaders(int amt) {
+    stats.incLong(activeReadersId, amt);
+    assert stats.getLong(activeReadersId) >= 0;
+  }
+  
+  public long getStoreUsageBytes() {
+    return stats.getLong(storeUsageBytesId);
+  }
+  
+  public void incStoreUsageBytes(long amt) {
+    stats.incLong(storeUsageBytesId, amt);
+    assert stats.getLong(storeUsageBytesId) >= 0;
+  }
+  
+    sb.append("activeReaders = ").append(stats.getLong(activeReadersId)).append("\n");
+    sb.append("storeUsageBytes = ").append(stats.getLong(storeUsageBytesId)).append("\n");
