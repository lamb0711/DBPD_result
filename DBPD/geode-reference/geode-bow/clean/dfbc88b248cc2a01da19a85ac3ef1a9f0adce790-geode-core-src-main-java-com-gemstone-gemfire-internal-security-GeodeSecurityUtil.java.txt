Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfigImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/StartupMessage.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/SystemAdmin.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheServerStats.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatHelper.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatSampler.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/StatArchiveWriter.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/GemFireStatSamplerIntegrationTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/SimpleStatSamplerIntegrationTest.java

+import org.apache.geode.security.SecurableComponents;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+
-  private static boolean isClientAuthenticator;
-  private static boolean isPeerAuthenticator;
+
+  private static boolean isClientAuthenticator; // is there a SECURITY_CLIENT_AUTHENTICATOR
+  private static boolean isPeerAuthenticator; // is there a SECURITY_PEER_AUTHENTICATOR
+
+  private static boolean isJmxSecurityRequired;
+  private static boolean isHttpSecurityRequired;
+  private static boolean isGatewaySecurityRequired;
+  private static boolean isClusterSecurityRequired;
+  private static boolean isServerSecurityRequired;
+    String enabledComponentsString = securityProps.getProperty(SECURITY_ENABLED_COMPONENTS);
+    if (enabledComponentsString == null) {
+      enabledComponentsString = DistributionConfig.DEFAULT_SECURITY_ENABLED_COMPONENTS;
+    }
+
+    boolean isClusterSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.CLUSTER);
+    boolean isGatewaySecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.GATEWAY);
+    boolean isHttpSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.HTTP_SERVICE);
+    boolean isJmxSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.JMX);
+    boolean isServerSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.SERVER);
+
+    isServerSecurityRequired = isClientAuthenticator || (isIntegratedSecurity && isServerSecured);
+    isClusterSecurityRequired = isPeerAuthenticator || (isIntegratedSecurity && isClusterSecured);
+
+    isGatewaySecurityRequired = isClientAuthenticator || (isIntegratedSecurity && isGatewaySecured);
+    isHttpSecurityRequired = isIntegratedSecurity && isHttpSecured;
+    isJmxSecurityRequired = isIntegratedSecurity && isJmxSecured;
+
-  public static boolean isClientSecurityRequired() {
-    return isClientAuthenticator || isIntegratedSecurity;
-  }
-
-  public static boolean isPeerSecurityRequired() {
-    return isPeerAuthenticator || isIntegratedSecurity;
-  }
-
+  public static boolean isClientSecurityRequired() { // TODO: rename as isServerSecurityRequired
+    return isServerSecurityRequired;
+  }
+
+  public static boolean isPeerSecurityRequired() { // TODO: rename as isClusterSecurityRequired
+    return isClusterSecurityRequired;
+  }
+
+  public static boolean isJmxSecurityRequired() {
+    return isJmxSecurityRequired;
+  }
+
+  public static boolean isGatewaySecurityRequired() {
+    return isGatewaySecurityRequired;
+  }
+
+  public static boolean isHttpServiceSecurityRequired() {
+    return isHttpSecurityRequired;
+  }
