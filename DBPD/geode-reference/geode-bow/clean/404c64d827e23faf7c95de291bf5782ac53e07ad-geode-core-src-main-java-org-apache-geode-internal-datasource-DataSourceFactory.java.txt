GEODE-5861: change jdbc connector to use jndi binding (#2650)

The jdbc connector now uses the existing "jndi-binding" xml/gfsh instead of adding "jdbc-connection" xml/gfsh. All the old "jdbc-connection" commands have been removed.

The create jndi-binding command has been changed in the following ways:
* the driver-class-name gfsh parameter is now optional.
* --url can be used as a replacement for --connnection-url
* the --type now defaults to SIMPLE (it used to not have a default).
* the --type=POOLED now defaults to creating a Hikari pool and an SPI exists to customize the class 
that implements the pool.

New External APIS:
  DataSourceFactoryTest: this is the SPI users can implement for the POOLED type.

Co-authored-by: @BenjaminPerryRoss 
+import java.util.Properties;
-import javax.sql.ConnectionPoolDataSource;
+import org.apache.geode.datasource.PooledDataSourceFactory;
+  private static final String DEFAULT_CONNECTION_POOL_DS_CLASS =
+      "org.apache.geode.connectors.jdbc.JdbcPooledDataSourceFactory";
+
-    if (configs.getJDBCDriver() == null) {
-      logger.error("DataSourceFactory::getSimpleDataSource:JDBC Driver is not available");
-      throw new DataSourceCreateException(
-          "DataSourceFactory::getSimpleDataSource:JDBC Driver is not available");
-    }
-   *
-   * @param configMap a map containing configurations required for datasource.
-   * @return ???
-      logger.error(
-          "DataSourceFactory::getPooledDataSource:ConnectionPoolDataSource class name for the ResourceManager is not available");
-      throw new DataSourceCreateException(
-          "DataSourceFactory::getPooledDataSource:ConnectionPoolDataSource class name for the ResourceManager is not available");
+      connpoolClassName = DEFAULT_CONNECTION_POOL_DS_CLASS;
-      Class cl = ClassPathLoader.getLatest().forName(connpoolClassName);
-      Object Obj = cl.newInstance();
-      invokeAllMethods(cl, Obj, props);
-      return new GemFireConnPooledDataSource((ConnectionPoolDataSource) Obj, configs);
+      Properties poolProperties = createPoolProperties(configMap);
+      Properties dataSourceProperties = createDataSourceProperties(props);
+      Class<?> cl = ClassPathLoader.getLatest().forName(connpoolClassName);
+      PooledDataSourceFactory factory = (PooledDataSourceFactory) cl.newInstance();
+      return factory.createDataSource(poolProperties, dataSourceProperties);
+  static Properties createPoolProperties(Map<String, String> configMap) {
+    Properties result = new Properties();
+    if (configMap != null) {
+      for (Map.Entry<String, String> entry : configMap.entrySet()) {
+        if (entry.getValue() == null || entry.getValue().equals("")) {
+          continue;
+        }
+        if (entry.getKey().equals("type")) {
+          continue;
+        }
+        if (entry.getKey().equals("jndi-name")) {
+          continue;
+        }
+        if (entry.getKey().equals("transaction-type")) {
+          continue;
+        }
+        if (entry.getKey().equals("conn-pooled-datasource-class")) {
+          continue;
+        }
+        if (entry.getKey().equals("managed-conn-factory-class")) {
+          continue;
+        }
+        if (entry.getKey().equals("xa-datasource-class")) {
+          continue;
+        }
+        result.setProperty(entry.getKey(), entry.getValue());
+      }
+    }
+    return result;
+  }
+
+  private static Properties createDataSourceProperties(List<ConfigProperty> props) {
+    Properties result = new Properties();
+    if (props != null) {
+      for (ConfigProperty prop : props) {
+        result.setProperty(prop.getName(), prop.getValue());
+      }
+    }
+    return result;
+  }
+
+
