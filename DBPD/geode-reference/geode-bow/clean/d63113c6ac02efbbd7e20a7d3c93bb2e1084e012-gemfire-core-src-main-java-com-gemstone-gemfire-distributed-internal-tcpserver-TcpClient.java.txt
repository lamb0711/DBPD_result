Merge branch 'feature/GEODE-77' into develop

Conflicts:
	gemfire-core/src/test/java/com/gemstone/gemfire/cache/management/MemoryThresholdsOffHeapDUnitTest.java

+import java.net.InetSocketAddress;
+import org.apache.logging.log4j.Logger;
+
-import com.gemstone.org.jgroups.stack.IpAddress;
-import com.gemstone.org.jgroups.util.GemFireTracer;
+import com.gemstone.gemfire.internal.logging.LogService;
-  private static final GemFireTracer LOG=GemFireTracer.getLog(TcpClient.class);
+  private static final Logger logger = LogService.getLogger();
+  
-  private static Map<IpAddress, Short> serverVersions = new HashMap<IpAddress, Short>();
+  private static Map<InetSocketAddress, Short> serverVersions = new HashMap<InetSocketAddress, Short>();
-      LOG.error("TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+      logger.error("TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
-      LOG.error("TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+      logger.error("TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
-    IpAddress ipAddr;
+    InetSocketAddress ipAddr;
-      ipAddr = new IpAddress(port);
+      ipAddr = new InetSocketAddress(port);
-      ipAddr = new IpAddress(addr, port); // fix for bug 30810
+      ipAddr = new InetSocketAddress(addr, port); // fix for bug 30810
+    
+    logger.debug("TcpClient sending {} to {}", request, ipAddr);
+    long giveupTime = System.currentTimeMillis() + timeout;
+    
-    short serverVersion = getServerVersion(ipAddr, REQUEST_TIMEOUT).shortValue();
+    short serverVersion = getServerVersion(ipAddr, timeout/2).shortValue();
-    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getIpAddress(), ipAddr.getPort(), timeout, null, false);
-    sock.setSoTimeout(timeout);
+    long newTimeout = giveupTime - System.currentTimeMillis();
+    if (newTimeout <= 0) {
+      return null;
+    }
+    
+    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), (int)newTimeout, null, false);
+    sock.setSoTimeout((int)newTimeout);
+    DataOutputStream out = null;
-      DataOutputStream out=new DataOutputStream(sock.getOutputStream());
+      out=new DataOutputStream(sock.getOutputStream());
+      
+          logger.debug("received response: {}", response);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Remote TcpServer version: " + serverVersion
+      if (logger.isDebugEnabled()) {
+        logger.debug("Remote TcpServer version: " + serverVersion
+      if (out != null) {
+        out.close();
+      }
-        LOG.error("Error closing socket ", e);
+        logger.error("Error closing socket ", e);
-  public static Short getServerVersion(IpAddress ipAddr, int timeout) throws IOException, ClassNotFoundException {
+  public static Short getServerVersion(InetSocketAddress ipAddr, int timeout) throws IOException, ClassNotFoundException {
-    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getIpAddress(), ipAddr.getPort(), timeout, null, false);
+    Socket sock=SocketCreator.getDefaultInstance().connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
-        LOG.error("Error closing socket ", e);
+        logger.error("Error closing socket ", e);
-    if (LOG.getLogWriter().fineEnabled()) {
-      LOG.getLogWriter().fine("Locator " + ipAddr + " did not respond to a request for its version.  I will assume it is using v5.7 for safety.");
+    if (logger.isDebugEnabled()) {
+      logger.debug("Locator " + ipAddr + " did not respond to a request for its version.  I will assume it is using v5.7 for safety.");
