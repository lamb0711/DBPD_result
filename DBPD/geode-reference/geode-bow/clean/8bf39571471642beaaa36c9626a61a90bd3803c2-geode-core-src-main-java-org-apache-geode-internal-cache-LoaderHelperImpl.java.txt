Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.*;
+// import org.apache.geode.*;
-//import java.io.*;
-//import java.util.Set;
+// import java.io.*;
+// import java.util.Set;
-/** Provides a set of APIs to help the
- * implementation of the <code>CacheLoader</code> load method. An instance of <code>LoaderHelper</code>
- * is only valid within the {@link CacheLoader#load(LoaderHelper) load}
- * method.
+/**
+ * Provides a set of APIs to help the implementation of the <code>CacheLoader</code> load method. An
+ * instance of <code>LoaderHelper</code> is only valid within the
+ * {@link CacheLoader#load(LoaderHelper) load} method.
-public class LoaderHelperImpl implements LoaderHelper
-{
-  /** The message issued when the user attempts to netSearch on a
-   * LOCAL Region.  It is public for testing purposes only. */
-  public static final StringId NET_SEARCH_LOCAL = LocalizedStrings.LoaderHelperImpl_CANNOT_NETSEARCH_FOR_A_SCOPELOCAL_OBJECT;
+public class LoaderHelperImpl implements LoaderHelper {
+  /**
+   * The message issued when the user attempts to netSearch on a LOCAL Region. It is public for
+   * testing purposes only.
+   */
+  public static final StringId NET_SEARCH_LOCAL =
+      LocalizedStrings.LoaderHelperImpl_CANNOT_NETSEARCH_FOR_A_SCOPELOCAL_OBJECT;
-  public LoaderHelperImpl(Region region, Object key, Object aCallbackArgument,boolean netSearchAllowed,
-                          SearchLoadAndWriteProcessor searcher) {
-    this.region=region;
-    this.key=key;
+  public LoaderHelperImpl(Region region, Object key, Object aCallbackArgument,
+      boolean netSearchAllowed, SearchLoadAndWriteProcessor searcher) {
+    this.region = region;
+    this.key = key;
-    this.netSearchAllowed=netSearchAllowed;
+    this.netSearchAllowed = netSearchAllowed;
-  public LoaderHelperImpl(Region region, Object key, Object aCallbackArgument,boolean netSearchAllowed, boolean netLoadAllowed,
-                          SearchLoadAndWriteProcessor searcher) {
-    this.region=region;
-    this.key=key;
+  public LoaderHelperImpl(Region region, Object key, Object aCallbackArgument,
+      boolean netSearchAllowed, boolean netLoadAllowed, SearchLoadAndWriteProcessor searcher) {
+    this.region = region;
+    this.key = key;
-    this.netSearchAllowed=netSearchAllowed;
+    this.netSearchAllowed = netSearchAllowed;
-  /** Searchs other caches for the value to be loaded. If the cache is part of
-   * a distributed caching system, <code>netSearch</code> will try to locate the requested
-   * value in any other cache within the system.
-   * If the search is successful, a reference to a local copy of the
-   * value is returned. If there is no value for this entry present in the
-   * system, and doNetLoad is true, GemFire looks for and invokes
-   * <code>CacheLoaders</code> in other nodes in the system.  The net load
-   * will invoke one loader at a time until a loader either returns a
-   * non-null value, or throws an exception.  If the object
-   * is not found <code>null</code> is returned.
+  /**
+   * Searchs other caches for the value to be loaded. If the cache is part of a distributed caching
+   * system, <code>netSearch</code> will try to locate the requested value in any other cache within
+   * the system. If the search is successful, a reference to a local copy of the value is returned.
+   * If there is no value for this entry present in the system, and doNetLoad is true, GemFire looks
+   * for and invokes <code>CacheLoaders</code> in other nodes in the system. The net load will
+   * invoke one loader at a time until a loader either returns a non-null value, or throws an
+   * exception. If the object is not found <code>null</code> is returned.
-   * @param doNetLoad if true, and there is no valid value found
-   * for this entry in the system, then look for and invoke loaders
-   * on other nodes.
+   * @param doNetLoad if true, and there is no valid value found for this entry in the system, then
+   *        look for and invoke loaders on other nodes.
-   * @throws TimeoutException if the netSearch times out before getting a response from another cache
+   * @throws TimeoutException if the netSearch times out before getting a response from another
+   *         cache
-  public Object netSearch(final boolean doNetLoad) throws CacheLoaderException, TimeoutException{
+  public Object netSearch(final boolean doNetLoad) throws CacheLoaderException, TimeoutException {
-        searcher.initialize((LocalRegion)this.region,this.key, this.aCallbackArgument);
+        searcher.initialize((LocalRegion) this.region, this.key, this.aCallbackArgument);
-          obj = EntryEventImpl.deserialize((byte[])obj);
+          obj = EntryEventImpl.deserialize((byte[]) obj);
-          obj = EntryEventImpl.deserialize((byte[])obj);
+          obj = EntryEventImpl.deserialize((byte[]) obj);
-    }
-    finally {
+    } finally {
-  public Object getKey(){
+  public Object getKey() {
-  public Region getRegion(){
+  public Region getRegion() {
-  /** Return the argument object for the load method that was passed in from
-   * application code. This object is passed in as <i>aLoaderArgument</i> in
-   * {@link Region#get(Object, Object) get}.
+  /**
+   * Return the argument object for the load method that was passed in from application code. This
+   * object is passed in as <i>aLoaderArgument</i> in {@link Region#get(Object, Object) get}.
+   * 
-  public Object getArgument(){
+  public Object getArgument() {
-    return "LoaderHelper region: " + getRegion()
-      + " key: " + getKey()
-      + " argument: " + getArgument();
+    return "LoaderHelper region: " + getRegion() + " key: " + getKey() + " argument: "
+        + getArgument();
