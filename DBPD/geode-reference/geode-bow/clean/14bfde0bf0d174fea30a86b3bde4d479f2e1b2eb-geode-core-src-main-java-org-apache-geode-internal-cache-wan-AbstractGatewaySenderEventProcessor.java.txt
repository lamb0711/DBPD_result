Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingThread;
-public abstract class AbstractGatewaySenderEventProcessor extends Thread
+public abstract class AbstractGatewaySenderEventProcessor extends LoggingThread
-  public AbstractGatewaySenderEventProcessor(LoggingThreadGroup createThreadGroup, String string,
+  public AbstractGatewaySenderEventProcessor(String string,
-    super(createThreadGroup, string);
+    super(string);
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.AbstractGatewaySenderEventProcessor_ATTEMPT_TO_SET_BATCH_SIZE_FAILED,
-          new Object[] {currentBatchSize, batchSize}));
+      logger.warn(
+          "Attempting to set the batch size from {} to {} events failed. Instead it was set to 1.",
+          new Object[] {currentBatchSize, batchSize});
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.AbstractGatewaySenderEventProcessor_SET_BATCH_SIZE,
-          new Object[] {currentBatchSize, this.batchSize}));
+      logger.info("Set the batch size from {} to {} events",
+          new Object[] {currentBatchSize, this.batchSize});
-                logger.warn(LocalizedMessage.create(
-                    LocalizedStrings.GatewayImpl_EVENT_QUEUE_DISPATCH_FAILED,
-                    new Object[] {filteredList.size(), getBatchId()}));
+                logger.warn(
+                    "During normal processing, unsuccessfully dispatched {} events (batch #{})",
+                    new Object[] {filteredList.size(), getBatchId()});
-        logger.warn(
-            LocalizedMessage.create(
-                LocalizedStrings.GatewayImpl_AN_EXCEPTION_OCCURRED_THE_DISPATCHER_WILL_CONTINUE),
+        logger.warn("An Exception occurred. The dispatcher will continue.",
-              logger.fatal(LocalizedMessage.create(
-                  LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURRED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
-                  new Object[] {filter.toString(), o}), e);
+              logger.fatal(
+                  String.format(
+                      "Exception occurred while handling call to %s.afterAcknowledgement for event %s:",
+                      new Object[] {filter.toString(), o}),
+                  e);
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.GatewayImpl_EVENT_QUEUE_ALERT_OPERATION_0_REGION_1_KEY_2_VALUE_3_TIME_4,
+            logger.warn(
+                "{} event for region={} key={} value={} was in the queue for {} milliseconds",
-                    ge.getValueAsString(true), currentTime - ge.getCreationTime()}));
+                    ge.getValueAsString(true), currentTime - ge.getCreationTime()});
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.GatewayImpl_THE_EVENT_QUEUE_SIZE_HAS_DROPPED_BELOW_THE_THRESHOLD_0,
-          AbstractGatewaySender.QUEUE_SIZE_THRESHOLD));
+      logger.info("The event queue size has dropped below {} events.",
+          AbstractGatewaySender.QUEUE_SIZE_THRESHOLD);
-            logger.fatal(LocalizedMessage.create(
-                LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURRED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
-                new Object[] {filter.toString(), event}), e);
+            logger.fatal(String.format(
+                "Exception occurred while handling call to %s.afterAcknowledgement for event %s:",
+                new Object[] {filter.toString(), event}),
+                e);
-        logger.info(LocalizedMessage
-            .create(LocalizedStrings.GatewayImpl_A_CANCELLATION_OCCURRED_STOPPING_THE_DISPATCHER));
+        logger.info("A cancellation occurred. Stopping the dispatcher.");
-      logger.fatal(LocalizedMessage.create(
-          LocalizedStrings.GatewayImpl_MESSAGE_DISPATCH_FAILED_DUE_TO_UNEXPECTED_EXCEPTION), e);
+      logger.fatal("Message dispatch failed due to unexpected exception..", e);
-          Thread.sleep(AbstractGatewaySender.MAXIMUM_SHUTDOWN_WAIT_TIME * 1000);
+          Thread.sleep(AbstractGatewaySender.MAXIMUM_SHUTDOWN_WAIT_TIME * 1000L);
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.GatewayImpl_0_DISPATCHER_STILL_ALIVE_EVEN_AFTER_JOIN_OF_5_SECONDS,
-              this));
+          logger.warn("{}:Dispatcher still alive even after join of 5 seconds.",
+              this);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GatewayImpl_0_INTERRUPTEDEXCEPTION_IN_JOINING_WITH_DISPATCHER_THREAD,
-            this));
+        logger.warn("{}: InterruptedException in joining with dispatcher thread.",
+            this);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GatewayImpl_DESTROYING_GATEWAYEVENTDISPATCHER_WITH_ACTIVELY_QUEUED_DATA));
+        logger.warn("Destroying GatewayEventDispatcher with actively queued data.");
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.GatewayImpl_DESTROYING_GATEWAYEVENTDISPATCHER_WITH_ACTIVELY_QUEUED_DATA));
+          logger.warn(
+              "Destroying GatewayEventDispatcher with actively queued data.");
