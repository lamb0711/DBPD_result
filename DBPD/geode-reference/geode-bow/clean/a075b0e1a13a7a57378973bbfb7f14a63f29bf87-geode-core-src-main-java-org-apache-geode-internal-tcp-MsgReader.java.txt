GEODE-2113 Implement SSL over NIO

This removes old-I/O use in TCPConduit peer-to-peer communications.
This was used for SSL/TLS secure commuications but Java has had an
SSLEngine implementation that allows you to implement secure communications
on new-I/O SocketChannels or any other transport mechanism.

A new NioSSLEngine class wraps the JDK's SSLEngine and provides the
SSL handshake as well as encryption/decryption of messages. SocketCreator
performs the SSL handshake and returns a NioSslEngine that TCPConduit
then uses for messaging.

The SSL handshake needs to be done in Connection.java now because the
ByteBuffer used to do the handshake is also used for reading messages
in Receivers. Because of this the Handshake pool in TCPConduit became
obsolete and I deleted it.

I've also done a lot of cleanup of compilation warnings in Connection.java
and removed references to "NIO". The primary SSL/TLS changes in that class
are in writeFully (renamed from nioWriteFully) and processBuffer (renamed
from processNIOBuffer).

While testing I noticed some places where we're creating non-daemon
threads that were keeping DUnit ChildVM processes from exiting.  I've
changed these places to use daemon threads.  Very few threads in Geode
should be non-daemon.

Porting client/server to use NioSSLEngine will be done under a separate
ticket and a different version of NioEngine may be created to secure
UDP messaging.

+import java.io.EOFException;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.net.Buffers;
+import org.apache.geode.internal.net.NioFilter;
-public abstract class MsgReader {
+public class MsgReader {
+  private static final Logger logger = LogService.getLogger();
+
+  private final NioFilter ioFilter;
+  private final ByteBuffer peerNetData;
-  public MsgReader(Connection conn, Version version) {
+  private int lastReadPosition;
+  private int lastProcessedPosition;
+
+  public MsgReader(Connection conn, NioFilter nioFilter, ByteBuffer peerNetData, Version version) {
+    this.ioFilter = nioFilter;
+    this.peerNetData = peerNetData;
+    ByteBuffer buffer = ioFilter.getUnwrappedBuffer(peerNetData);
+    buffer.position(0).limit(0);
+
+
+    nioInputBuffer.position(nioInputBuffer.limit());
+
-    header.nioMessageLength = nioMessageLength;
-    header.nioMessageType = nioMessageType;
-    header.nioMsgId = nioMsgId;
+    header.messageLength = nioMessageLength;
+    header.messageType = nioMessageType;
+    header.messageId = nioMsgId;
-    ByteBuffer nioInputBuffer = readAtLeast(header.nioMessageLength);
-    this.getStats().incMessagesBeingReceived(true, header.nioMessageLength);
+    ByteBuffer nioInputBuffer = readAtLeast(header.messageLength);
+    this.getStats().incMessagesBeingReceived(true, header.messageLength);
-      this.getStats().decMessagesBeingReceived(header.nioMessageLength);
+      this.getStats().decMessagesBeingReceived(header.messageLength);
+      ioFilter.doneReading(nioInputBuffer);
-    ByteBuffer nioInputBuffer = readAtLeast(header.nioMessageLength);
-    this.getStats().incMessagesBeingReceived(md.size() == 0, header.nioMessageLength);
-    md.addChunk(nioInputBuffer, header.nioMessageLength);
+    ByteBuffer nioInputBuffer = readAtLeast(header.messageLength);
+    this.getStats().incMessagesBeingReceived(md.size() == 0, header.messageLength);
+    md.addChunk(nioInputBuffer, header.messageLength);
-  public abstract ByteBuffer readAtLeast(int bytes) throws IOException;
+  public ByteBuffer readAtLeast(int bytes) throws IOException {
+
+    ByteBuffer unwrappedBuffer =
+        ioFilter.ensureUnwrappedCapacity(bytes, peerNetData, Buffers.BufferType.UNTRACKED,
+            getStats());
+
+    while ((lastReadPosition - lastProcessedPosition) < bytes) {
+      unwrappedBuffer.limit(unwrappedBuffer.capacity());
+      unwrappedBuffer.position(lastReadPosition);
+
+      int amountRead = conn.getSocket().getChannel().read(peerNetData);
+      if (amountRead < 0) {
+        throw new EOFException();
+      }
+      if (amountRead > 0) {
+        peerNetData.flip();
+        unwrappedBuffer = ioFilter.unwrap(peerNetData);
+        lastReadPosition = unwrappedBuffer.position();
+      }
+    }
+    unwrappedBuffer.limit(lastProcessedPosition + bytes);
+    unwrappedBuffer.position(lastProcessedPosition);
+    lastProcessedPosition = unwrappedBuffer.limit();
+
+    return unwrappedBuffer;
+  }
-    int nioMessageLength;
-    byte nioMessageType;
-    short nioMsgId;
+    int messageLength;
+    byte messageType;
+    short messageId;
-    public int getNioMessageLength() {
-      return nioMessageLength;
+    public int getMessageLength() {
+      return messageLength;
-    public byte getNioMessageType() {
-      return nioMessageType;
+    public byte getMessageType() {
+      return messageType;
-    public short getNioMessageId() {
-      return nioMsgId;
+    public short getMessageId() {
+      return messageId;
+
