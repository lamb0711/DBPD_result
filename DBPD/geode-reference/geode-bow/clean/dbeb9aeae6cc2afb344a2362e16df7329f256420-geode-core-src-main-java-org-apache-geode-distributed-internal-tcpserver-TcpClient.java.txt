Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <p>Client for the TcpServer component of the Locator.
+ * <p>
+ * Client for the TcpServer component of the Locator.
+ * 
-  private static Map<InetSocketAddress, Short> serverVersions = new HashMap<InetSocketAddress, Short>();
+  private static Map<InetSocketAddress, Short> serverVersions =
+      new HashMap<InetSocketAddress, Short>();
-    this(SocketCreatorFactory.setDistributionConfig(distributionConfig).getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR));
+    this(SocketCreatorFactory.setDistributionConfig(distributionConfig)
+        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR));
-   * Constructs a new TcpClient using the default (Locator) SocketCreator.
-   * SocketCreatorFactory should be initialized before invoking this method.
+   * Constructs a new TcpClient using the default (Locator) SocketCreator. SocketCreatorFactory
+   * should be initialized before invoking this method.
+   * 
-      // must not be running, rethrow so the caller can handle. 
+      // must not be running, rethrow so the caller can handle.
-      logger.error("TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+      logger.error(
+          "TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
-   * Contacts the Locator running on the given host,
-   * and port and gets information about it.  Two <code>String</code>s
-   * are returned: the first string is the working directory of the
-   * locator and the second string is the product directory of the
-   * locator.
+   * Contacts the Locator running on the given host, and port and gets information about it. Two
+   * <code>String</code>s are returned: the first string is the working directory of the locator and
+   * the second string is the product directory of the locator.
-      InfoResponse response = (InfoResponse) requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
+      InfoResponse response =
+          (InfoResponse) requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
-      logger.error("TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+      logger.error(
+          "TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+   * 
-  public Object requestToServer(InetAddress addr, int port, Object request, int timeout) throws IOException, ClassNotFoundException {
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout)
+      throws IOException, ClassNotFoundException {
+   * 
-  public Object requestToServer(InetAddress addr, int port, Object request, int timeout, boolean replyExpected) throws IOException, ClassNotFoundException {
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout,
+      boolean replyExpected) throws IOException, ClassNotFoundException {
-    Socket sock = socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
+    Socket sock =
+        socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
-          throw new EOFException("Locator at " + ipAddr + " did not respond. This is normal if the locator was shutdown. If it wasn't check its log for exceptions.");
+          EOFException eof = new EOFException("Locator at " + ipAddr
+              + " did not respond. This is normal if the locator was shutdown. If it wasn't check its log for exceptions.");
+          eof.initCause(ex);
+          throw eof;
-        logger.debug("Remote TcpServer version: " + serverVersion + " is higher than local version: " + Version.CURRENT_ORDINAL + ". This is never expected as remoteVersion");
+        logger
+            .debug("Remote TcpServer version: " + serverVersion + " is higher than local version: "
+                + Version.CURRENT_ORDINAL + ". This is never expected as remoteVersion");
-          // with the socket and is closing it.  Aborting the connection by
+          // with the socket and is closing it. Aborting the connection by
-  private Short getServerVersion(InetSocketAddress ipAddr, int timeout) throws IOException, ClassNotFoundException {
+  private Short getServerVersion(InetSocketAddress ipAddr, int timeout)
+      throws IOException, ClassNotFoundException {
-          //          throw new IOException("Unexpected response received from locator");
+          // throw new IOException("Unexpected response received from locator");
-          sock.setSoLinger(true, 0); // initiate an abort on close to shut down the server's socket
-          sock.close();
+        sock.setSoLinger(true, 0); // initiate an abort on close to shut down the server's socket
+        sock.close();
-      logger.debug("Locator " + ipAddr + " did not respond to a request for its version.  I will assume it is using v5.7 for safety.");
+      logger.debug("Locator " + ipAddr
+          + " did not respond to a request for its version.  I will assume it is using v5.7 for safety.");
-   * Clear static class information concerning Locators.
-   * This is used in unit tests.  It will force TcpClient to
-   * send version-request messages to locators to reestablish
-   * knowledge of their communication protocols.
+   * Clear static class information concerning Locators. This is used in unit tests. It will force
+   * TcpClient to send version-request messages to locators to reestablish knowledge of their
+   * communication protocols.
