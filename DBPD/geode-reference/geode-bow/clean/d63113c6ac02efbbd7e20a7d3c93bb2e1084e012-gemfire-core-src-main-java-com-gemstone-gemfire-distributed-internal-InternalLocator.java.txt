Merge branch 'feature/GEODE-77' into develop

Conflicts:
	gemfire-core/src/test/java/com/gemstone/gemfire/cache/management/MemoryThresholdsOffHeapDUnitTest.java

-import java.util.ArrayList;
-import java.util.List;
-import java.util.ServiceLoader;
-import java.util.Set;
-import java.util.StringTokenizer;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
+import com.gemstone.gemfire.InternalGemFireException;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorDiscovery;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorHelper;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorJoinMessage;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.LocatorMembershipListenerImpl;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorJoinResponse;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorPingResponse;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorRequest;
-//import com.gemstone.gemfire.cache.client.internal.locator.wan.RemoteLocatorResponse;
-import com.gemstone.gemfire.cache.wan.GatewaySenderFactory;
+import com.gemstone.gemfire.distributed.internal.membership.MemberFactory;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGBasicAdapter;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.JGroupMember;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.LocatorImpl;
+import com.gemstone.gemfire.distributed.internal.membership.gms.NetLocator;
+import com.gemstone.gemfire.distributed.internal.membership.gms.locator.PeerLocatorRequest;
-import com.gemstone.org.jgroups.Address;
-import com.gemstone.org.jgroups.JChannel;
-import com.gemstone.org.jgroups.stack.GossipData;
-import com.gemstone.org.jgroups.stack.GossipServer;
-import com.gemstone.org.jgroups.util.GemFireTracer;
+  
+  /** system property name for forcing locators to be preferred as coordinators */
+  public static final String LOCATORS_PREFERRED_AS_COORDINATORS = "gemfire.disable-floating-coordinator";
-  /** the gossip server used for peer location */
-  private LocatorImpl locatorImpl;
+  /** the TcpHandler used for peer location */
+  private NetLocator locatorImpl;
+  /** whether the locator was stopped during forced-disconnect processing */
+  private volatile boolean forcedDisconnect;
+  
-  private Thread restartThread;
+  private volatile Thread restartThread;
-      throws IOException
-    {
+      throws IOException {
-    }
+  }
+   * This is for internal use only as it does not create a distributed
+   * system unless told to do so.
+   * 
-   * @deprecated as of 7.0 use startLocator(int, File, File, InternalLogWriter, InternalLogWriter, InetAddress, java.util.Properties, boolean, boolean, String) instead.
-    if(startDistributedSystem) {
-      slocator.startDistributedSystem();
+    if (startDistributedSystem) {
+      try {
+        slocator.startDistributedSystem();
+      } catch (RuntimeException e) {
+        slocator.stop();
+        throw e;
+      }
-      this.stateFile = new File("locator" + port + "state.dat");
+      this.stateFile = new File("locator" + port + "view.dat");
-    GemFireTracer tracer = GemFireTracer.getLog(InternalLocator.class);
-    tracer.setLogWriter(logWriter);
-    tracer.setSecurityLogWriter(securityLogWriter);
-    tracer.setLogger(LogService.getLogger(GemFireTracer.class));
-    
-        locatorsAreCoordinators = Boolean.getBoolean("gemfire.disable-floating-coordinator");
+        locatorsAreCoordinators = Boolean.getBoolean(LOCATORS_PREFERRED_AS_COORDINATORS);
-    // LOG: moved these into InternalDistributedSystem.initialize -- the only other code path constructs InternalLocator 1st which also sets these
-    //com.gemstone.org.jgroups.util.GemFireTracer.setLogWriter(this.logWriter);
-    //com.gemstone.org.jgroups.util.GemFireTracer
-    //    .setSecurityLogWriter(this.securityLogWriter);
-    
-    // install gemfire serialization and socket functions into jgroups
-    JChannel.setDefaultGFFunctions(new GFJGBasicAdapter());
-    this.locatorImpl = new LocatorImpl(port, EXPIRY_MS,
-        this.bindAddress, this.stateFile, locatorsProp, locatorsAreCoordinators,
-        networkPartitionDetectionEnabled, withDS
-        );
-    this.handler.addHandler(GossipData.class, this.locatorImpl);
+    this.locatorImpl = MemberFactory.newLocatorHandler(this.bindAddress, this.stateFile,
+        locatorsProp, locatorsAreCoordinators, networkPartitionDetectionEnabled, stats);
+    this.handler.addHandler(PeerLocatorRequest.class, this.locatorImpl);
-   * @return the gossipServer
+   * @return the TcpHandler for peer to peer discovery
-  public LocatorImpl getLocatorHandler() {
+  public NetLocator getLocatorHandler() {
-      if (getLocatorHandler() != null) {
-        // let the GossipServer know the system's address so they can start
-        // servicing requests
-        Address addr = ((JGroupMember)existing.getDistributedMember().getNetMember()).getAddress();
-        getLocatorHandler().setLocalAddress(addr);
-      }
-      // don't set the ds variable, so it won't be closed by the locator shutting down
-     
-      if (System.getProperty("p2p.joinTimeout", "").length() == 0) {
-          System.setProperty("p2p.joinTimeout", "5000");
-        }
-
+        if (peerLocator) {
+          this.locatorImpl.setMembershipManager(myDs.getDM().getMembershipManager());
+        }
+        
-            stop(false, false);
+            stop(false, false, false);
-    stop(false, true);
+    stop(false, false, true);
-  public void stop(boolean stopForReconnect, boolean waitForDisconnect) {
+  public void stop(boolean forcedDisconnect, boolean stopForReconnect, boolean waitForDisconnect) {
+    this.forcedDisconnect = forcedDisconnect;
-    if (this.myCache != null && !this.stoppedForReconnect) {
+    if (this.myCache != null && !this.stoppedForReconnect && !this.forcedDisconnect) {
-    if (myDs != null && !this.stoppedForReconnect) {
+    if (myDs != null && !this.forcedDisconnect) {
+        logger.info("waiting for distributed system to disconnect...");
+        while (this.myDs.isConnected()) {
+          Thread.sleep(5000);
+        }
+        logger.info("waiting for distributed system to reconnect...");
+        if (restarted) {
+          logger.info("system restarted");
+        } else {
+          logger.info("system was not restarted");
+        }
+        Thread rs = this.restartThread;
+        if (rs != null) {
+          logger.info("waiting for services to restart...");
+          rs.join();
+          this.restartThread = null;
+        }
-        boolean restarted;
+        boolean restarted = false;
+        } finally {
+          if (! restarted) {
+            stoppedForReconnect = false;
+          }
+    logger.info("restart thread exiting.  Service was "+(restarted? "" : "not ") + "restarted");
-      TcpHandler handler = (TcpHandler)handlerMapping.get(request.getClass());
+      TcpHandler handler = null;
+      if (request instanceof PeerLocatorRequest) {
+        handler = (TcpHandler)handlerMapping.get(PeerLocatorRequest.class);
+      }
+      else {
+        handler = (TcpHandler)handlerMapping.get(request.getClass());
+      }
+      
-      else {
+      else {  
