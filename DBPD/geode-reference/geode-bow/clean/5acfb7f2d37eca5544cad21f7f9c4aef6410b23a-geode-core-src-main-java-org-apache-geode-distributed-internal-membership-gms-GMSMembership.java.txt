GEODE-7551: Remove membership API dependency on ClusterDistributionManager (#4431)

* GEODE-7551: Remove membership API dependency on ClusterDistributionManager

ClusterDistributionManager was only being used to get canonical IDs and
to check for shutdown conditions.  I've modified the CDM to set shutdown
status in membership in its shutdown() method and have modified
membership to just use the current MembershipView (which contains any
surprise members) instead of asking CDM for a canonical ID, which just
grabs said MembershipView and does the same thing.

* removing ClusterDistributionManager from dependency exceptions in MembershipDependenciesJUnitTest as well

* reverting unnecessary API change

* Resurrecting the isCloseInProgress check

we have to keep views from being sent out when the DM initiates sending shutdown
messages.

-import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-  private final ClusterDistributionManager dm;
+  private volatile boolean isCloseInProgress;
+
-      ClusterDistributionManager dm, LifecycleListener lifecycleListener) {
+      LifecycleListener lifecycleListener) {
-    this.dm = dm;
-    if (dm == null) {
-      return;
-    }
-    DistributedSystem ds = dm.getSystem();
-      // the DM's view also has surprise members, so let's check it as well
-      sender = dm.getCanonicalId(sender);
+      MembershipView currentView = latestView;
+      if (currentView != null) {
+        sender = currentView.getCanonicalID(sender);
+      }
-    // Impossible condition (bug36329): make sure that we check DM's
-    // view of shutdown here
-    return shutdownInProgress || (dm != null && dm.shutdownInProgress());
+    return shutdownInProgress;
-
+  @Override
+  public void setCloseInProgress() {
+    isCloseInProgress = true;
+  }
+
-      // Impossible condition (bug36329): make sure that we check DM's
-      // view of shutdown here
-      return shutdownInProgress || (dm != null && dm.shutdownInProgress());
+      return shutdownInProgress;
+    public boolean isCloseInProgress() {
+      return shutdownInProgress || isCloseInProgress;
+    }
+
+
+    @Override
-    @Override
-    public boolean isShutdownStarted() {
-      return shutdownInProgress || (dm != null && dm.isCloseInProgress());
-    }
