GEODE-6291: change create mapping to define column and pdx field information  (#3155)

Create mapping now requires that the pdx class exists on the server.
It generates a FieldMapping definition for each column/field. It will load the pdx class and
generate a pdx type for it, failing if it can not do so.
If the pdx type field count does not match the table column count then it will fail.
The pdx field names can differ in case from the column names as long as only one field matches the column.

Authored-by: Benjamin Ross <bross@pivotal.io>
Authored-by: Darrel Schneider <dschneider@pivotal.io>

+import java.util.List;
+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
+    result.setFieldMappings(regionMapping.getFieldMappings());
+
+      TabularResultModel fieldMappingTable =
+          resultModel.addTable(RESULT_SECTION_NAME + "Field Mappings" + String.valueOf(i));
+      List<FieldMapping> fieldMappings = result.getFieldMappings();
+
+      fieldMappingTable.setHeader("PDX Field to JDBC Column Mappings");
+      buildFieldMappingTable(fieldMappingTable, fieldMappings);
+  private void buildFieldMappingTable(TabularResultModel fieldMappingTable,
+      List<FieldMapping> fieldMappings) {
+    fieldMappingTable.setColumnHeader("PDX Field", "PDX Type", "JDBC Column", "JDBC Type",
+        "Nullable");
+    for (FieldMapping fieldMapping : fieldMappings) {
+      fieldMappingTable.addRow(fieldMapping.getPdxName(), fieldMapping.getPdxType(),
+          fieldMapping.getJdbcName(), fieldMapping.getJdbcType(),
+          Boolean.toString(fieldMapping.isJdbcNullable()));
+    }
+  }
+
