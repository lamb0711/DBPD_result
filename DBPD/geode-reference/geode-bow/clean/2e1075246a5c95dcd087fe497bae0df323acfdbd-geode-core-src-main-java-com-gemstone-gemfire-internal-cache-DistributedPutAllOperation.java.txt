Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.internal.cache.delta.Delta;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
- * @since 5.0
+ * @since GemFire 5.0
+      @Unretained
-        EntryEventImpl ev = getEventForPosition(position);
+        @Unretained EntryEventImpl ev = getEventForPosition(position);
-  
+  @Unretained
-    EntryEventImpl ev = EntryEventImpl.create(
+    @Retained EntryEventImpl ev = EntryEventImpl.create(
-    public final void toData(final DataOutput out, 
-        final boolean requiresRegionContext) throws IOException {
+    public final void toData(final DataOutput out) throws IOException {
-      EntryEventImpl ev = getEventForPosition(i);
+      @Unretained EntryEventImpl ev = getEventForPosition(i);
-	msg.setFetchFromHDFS(event.isFetchFromHDFS());
-    msg.setPutDML(event.isPutDML());
-        event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), false, false /*isPutDML*/);
+        event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument());
-            event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument(), event.isFetchFromHDFS(), event.isPutDML());
+            event.isPossibleDuplicate(), !event.isGenerateCallbacks(), event.getCallbackArgument());
-    // By default, fetchFromHDFS == true;
-    private transient boolean fetchFromHDFS = true;
-    
-    private transient boolean isPutDML = false;
-
+    @Retained
-      EntryEventImpl event = EntryEventImpl.create(
+      @Retained EntryEventImpl event = EntryEventImpl.create(
-    public void doEntryPut(PutAllEntryData entry, DistributedRegion rgn,
-        boolean requiresRegionContext, boolean fetchFromHDFS, boolean isPutDML) {
-      EntryEventImpl ev = PutAllMessage.createEntryEvent(entry, getSender(), 
-          this.context, rgn,
-          requiresRegionContext, this.possibleDuplicate,
+    public void doEntryPut(PutAllEntryData entry, DistributedRegion rgn) {
+      @Released EntryEventImpl ev = PutAllMessage.createEntryEvent(entry, getSender(), 
+          this.context, rgn, this.possibleDuplicate,
-	  ev.setFetchFromHDFS(fetchFromHDFS);
-      ev.setPutDML(isPutDML);
-     * @param requiresRegionContext
+    @Retained
-        DistributedRegion rgn, boolean requiresRegionContext, 
+        DistributedRegion rgn,
-      if (requiresRegionContext) {
-        ((KeyWithRegionContext)key).setRegionContext(rgn);
-      }
-      EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(),
+      @Retained EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(),
-          final boolean requiresRegionContext = rgn.keyRequiresRegionContext();
-            doEntryPut(putAllData[i], rgn, requiresRegionContext,  fetchFromHDFS, isPutDML);
+            doEntryPut(putAllData[i], rgn);
-        // get the "keyRequiresRegionContext" flag from first element assuming
-        // all key objects to be uniform
-        final boolean requiresRegionContext =
-          (this.putAllData[0].key instanceof KeyWithRegionContext);
-          this.putAllData[i].toData(out, requiresRegionContext);
+          this.putAllData[i].toData(out);
-        if (v instanceof Delta) {
-          deserializationPolicy = DESERIALIZATION_POLICY_EAGER;
-          valueObj = v;
-        }
-        else if (v instanceof CachedDeserializable) {
+        if (v instanceof CachedDeserializable) {
-    
-    public void setFetchFromHDFS(boolean val) {
-      this.fetchFromHDFS = val;
-    }
-    
-    public void setPutDML(boolean val) {
-      this.isPutDML = val;
-    }
-    
-    @Override
-    protected short computeCompressedExtBits(short bits) {
-      bits = super.computeCompressedExtBits(bits);
-      if (fetchFromHDFS) {
-        bits |= FETCH_FROM_HDFS;
-      }
-      if (isPutDML) {
-        bits |= IS_PUT_DML;
-      }
-      return bits;
-    }
