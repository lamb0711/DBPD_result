Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides an implementation of RegionAttributes that can be used from a VM
- * remote from the vm that created the cache.
+ * Provides an implementation of RegionAttributes that can be used from a VM remote from the vm that
+ * created the cache.
-public class RemoteRegionAttributes implements RegionAttributes,
-    DataSerializable {
-  
+public class RemoteRegionAttributes implements RegionAttributes, DataSerializable {
+
-//    this.enableGateway = attr.getEnableGateway();
-//    this.gatewayHubId = attr.getGatewayHubId();
+    // this.enableGateway = attr.getEnableGateway();
+    // this.gatewayHubId = attr.getGatewayHubId();
-  public RemoteRegionAttributes() {
-  }
+  public RemoteRegionAttributes() {}
-    return cacheLoaderDesc.equals("") ? null : new RemoteCacheLoader(
-        cacheLoaderDesc);
+    return cacheLoaderDesc.equals("") ? null : new RemoteCacheLoader(cacheLoaderDesc);
-    return cacheWriterDesc.equals("") ? null : new RemoteCacheWriter(
-        cacheWriterDesc);
+    return cacheWriterDesc.equals("") ? null : new RemoteCacheWriter(cacheWriterDesc);
-    return customEttlDesc.equals("") ? null : new RemoteCustomExpiry(
-        customEttlDesc);
+    return customEttlDesc.equals("") ? null : new RemoteCustomExpiry(customEttlDesc);
-  
+
-  
+
-    return customEIdleDesc.equals("") ? null : new RemoteCustomExpiry(
-        customEIdleDesc);
+    return customEIdleDesc.equals("") ? null : new RemoteCustomExpiry(customEIdleDesc);
-  
+
-  
+
-      throw new IllegalStateException(LocalizedStrings.RemoteRegionAttributes_MORE_THAN_ONE_CACHE_LISTENER_EXISTS.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.RemoteRegionAttributes_MORE_THAN_ONE_CACHE_LISTENER_EXISTS
+              .toLocalizedString());
+
+
-      for (int i=0; i < result.length; i++) {
+      for (int i = 0; i < result.length; i++) {
-  
+
-   }
-  
+  }
+
-    //checkReadiness();
-    if (this.dataPolicy.isNormal() || this.dataPolicy.isPreloaded()
-        || this.dataPolicy.isEmpty() || this.dataPolicy.withPartitioning()) {
+    // checkReadiness();
+    if (this.dataPolicy.isNormal() || this.dataPolicy.isPreloaded() || this.dataPolicy.isEmpty()
+        || this.dataPolicy.withPartitioning()) {
-      throw new IllegalStateException(LocalizedStrings.RemoteRegionAttributes_NO_MIRROR_TYPE_CORRESPONDS_TO_DATA_POLICY_0.toLocalizedString(this.dataPolicy));
+      throw new IllegalStateException(
+          LocalizedStrings.RemoteRegionAttributes_NO_MIRROR_TYPE_CORRESPONDS_TO_DATA_POLICY_0
+              .toLocalizedString(this.dataPolicy));
+
-    //checkReadiness();
+    // checkReadiness();
-    return compressorDesc.equals("") ? null : new RemoteCompressor(
-        compressorDesc);
+    return compressorDesc.equals("") ? null : new RemoteCompressor(compressorDesc);
-  
+
-  
+
-    
+
-  
+
-  
+
-    this.diskSizes = (int[] )DataSerializer.readObject(in);
+    this.diskSizes = (int[]) DataSerializer.readObject(in);
-    this.partitionAttributes = (PartitionAttributes) DataSerializer
-    .readObject(in);
-    this.membershipAttributes = (MembershipAttributes) DataSerializer
-        .readObject(in);
-    this.subscriptionAttributes = (SubscriptionAttributes) DataSerializer
-        .readObject(in);
+    this.partitionAttributes = (PartitionAttributes) DataSerializer.readObject(in);
+    this.membershipAttributes = (MembershipAttributes) DataSerializer.readObject(in);
+    this.subscriptionAttributes = (SubscriptionAttributes) DataSerializer.readObject(in);
-  
+
-  
+
-      for (int i=0; i < l.length; i++) {
+      for (int i = 0; i < l.length; i++) {
+
-    }
-    else if (o instanceof RemoteCacheCallback) {
+    } else if (o instanceof RemoteCacheCallback) {
-    }
-    else {
+    } else {
-     * Creates a new <code>RemoteCacheCallback</code> with the given
-     * description.
+     * Creates a new <code>RemoteCacheCallback</code> with the given description.
-    public final void close() {
-    }
+    public final void close() {}
-  private static class RemoteCacheListener extends RemoteCacheCallback
-      implements CacheListener {
+  private static class RemoteCacheListener extends RemoteCacheCallback implements CacheListener {
-    public void afterCreate(EntryEvent event) {
-    }
+    public void afterCreate(EntryEvent event) {}
-    public void afterUpdate(EntryEvent event) {
-    }
+    public void afterUpdate(EntryEvent event) {}
-    public void afterInvalidate(EntryEvent event) {
-    }
+    public void afterInvalidate(EntryEvent event) {}
-    public void afterDestroy(EntryEvent event) {
-    }
+    public void afterDestroy(EntryEvent event) {}
-    public void afterRegionInvalidate(RegionEvent event) {
-    }
+    public void afterRegionInvalidate(RegionEvent event) {}
-    public void afterRegionDestroy(RegionEvent event) {
-    }
+    public void afterRegionDestroy(RegionEvent event) {}
-    public void afterRegionClear(RegionEvent event) {
-    }
+    public void afterRegionClear(RegionEvent event) {}
-    public void afterRegionCreate(RegionEvent event) {
-    }
-    
-    public void afterRegionLive(RegionEvent event) {
-    }    
+    public void afterRegionCreate(RegionEvent event) {}
+
+    public void afterRegionLive(RegionEvent event) {}
-  private static class RemoteCacheWriter extends RemoteCacheCallback implements
-      CacheWriter {
+  private static class RemoteCacheWriter extends RemoteCacheCallback implements CacheWriter {
-    public void beforeUpdate(EntryEvent event) throws CacheWriterException {
-    }
+    public void beforeUpdate(EntryEvent event) throws CacheWriterException {}
-    public void beforeCreate(EntryEvent event) throws CacheWriterException {
-    }
+    public void beforeCreate(EntryEvent event) throws CacheWriterException {}
-    public void beforeDestroy(EntryEvent event) throws CacheWriterException {
-    }
+    public void beforeDestroy(EntryEvent event) throws CacheWriterException {}
-    public void beforeRegionDestroy(RegionEvent event)
-        throws CacheWriterException {
-    }
-    public void beforeRegionClear(RegionEvent event)
-        throws CacheWriterException {
-    }
+    public void beforeRegionDestroy(RegionEvent event) throws CacheWriterException {}
+
+    public void beforeRegionClear(RegionEvent event) throws CacheWriterException {}
-    
-    /* (non-Javadoc)
+
+    /*
+     * (non-Javadoc)
+     * 
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-    public void init(Properties props) {
-    }
-    
+    public void init(Properties props) {}
+
-  
-  private static class RemoteCacheLoader extends RemoteCacheCallback implements
-      CacheLoader {
+
+  private static class RemoteCacheLoader extends RemoteCacheCallback implements CacheLoader {
-  private static class RemoteCompressor extends RemoteCacheCallback implements
-  Compressor {
+  private static class RemoteCompressor extends RemoteCacheCallback implements Compressor {
-    
+
+
-  
-  public EvictionAttributes getEvictionAttributes()
-  {
+
+  public EvictionAttributes getEvictionAttributes() {
+
-  
+
-    if (this.gatewaySendersDescs == null
-        || this.gatewaySendersDescs.length == 0) {
+    if (this.gatewaySendersDescs == null || this.gatewaySendersDescs.length == 0) {
-    }
-    else {
+    } else {
-  
+
-    if (this.asyncEventQueueDescs == null
-        || this.asyncEventQueueDescs.length == 0) {
+    if (this.asyncEventQueueDescs == null || this.asyncEventQueueDescs.length == 0) {
-    }
-    else {
+    } else {
