GEODE-2267:  add validation to the arguments and include export stats in the command

  * use the config to determine where the logs and stats are

-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.DataPolicy;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.Scope;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-import org.apache.geode.internal.cache.InternalRegionArguments;
-import org.apache.geode.management.internal.configuration.domain.Configuration;
+import java.io.File;
-import java.nio.file.Paths;
+/**
+ * this LogExporter only finds the .log and .gfs files under in the same directory of the base files
+ * it doesn't use the base file's filename patterns to find the related logs/stats yet.
+ */
+  private final File baseLogFile;
+  private final File baseStatsFile;
-  public LogExporter(LogFilter logFilter) throws ParseException {
+  /**
+   * @param logFilter: the filter that's used to check if we need to accept the file or the logLine
+   * @param baseLogFile: if not null, we will export the logs in that directory
+   * @param baseStatsFile: if not null, we will export stats in that directory
+   * @throws ParseException
+   */
+  public LogExporter(LogFilter logFilter, File baseLogFile, File baseStatsFile)
+      throws ParseException {
+    assert logFilter != null;
+    this.baseLogFile = baseLogFile;
+    this.baseStatsFile = baseStatsFile;
-  public Path export(Path workingDir) throws IOException {
-    LOGGER.debug("Working directory is {}", workingDir);
-
+  /**
+   *
+   * @return Path to the zip file that has all the filtered files, null if no files are selected to
+   *         export.
+   * @throws IOException
+   */
+  public Path export() throws IOException {
-    for (Path logFile : findLogFiles(workingDir)) {
-      Path filteredLogFile = tempDirectory.resolve(logFile.getFileName());
-
-      if (this.logFilter == null) {
-        Files.copy(logFile, filteredLogFile);
-      } else {
+    if (baseLogFile != null) {
+      for (Path logFile : findLogFiles(baseLogFile.toPath().getParent())) {
+        Path filteredLogFile = tempDirectory.resolve(logFile.getFileName());
-    for (Path statFile : findStatFiles(workingDir)) {
-      Files.copy(statFile, tempDirectory);
+    if (baseStatsFile != null) {
+      for (Path statFile : findStatFiles(baseStatsFile.toPath().getParent())) {
+        Files.copy(statFile, tempDirectory.resolve(statFile.getFileName()));
+      }
-    Path zipFile = Files.createTempFile("logExport", ".zip");
-    ZipUtils.zipDirectory(tempDirectory, zipFile);
-    LOGGER.info("Zipped files to: " + zipFile);
-
+    Path zipFile = null;
+    if (tempDirectory.toFile().listFiles().length > 0) {
+      zipFile = Files.createTempFile("logExport", ".zip");
+      ZipUtils.zipDirectory(tempDirectory, zipFile);
+      LOGGER.info("Zipped files to: " + zipFile);
+    }
