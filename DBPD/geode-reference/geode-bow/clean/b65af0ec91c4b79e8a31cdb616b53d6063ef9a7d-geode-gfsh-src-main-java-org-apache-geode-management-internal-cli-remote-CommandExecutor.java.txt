GEODE-8099: make those gfsh commands that updates cluster configuratiâ€¦ (#5285)

* command executor will acquire the lock when executing commands that affects cluster configuration.
* clean up commands that doesn't need to extends implement SingleGfshCommand
* SingleGfshCommand are for those commands that need to update cluster configuration

+import static org.apache.geode.management.internal.api.LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME;
+
+import org.apache.geode.distributed.DistributedLockService;
+import org.apache.geode.management.cli.GfshCommand;
+  private final DistributedLockService cmsDlockService;
+
+  // this cmsDlockService could be null for offline commands
+  public CommandExecutor(DistributedLockService cmsDlockService) {
+    this.cmsDlockService = cmsDlockService;
+  }
+    boolean locked = lockCMS(command);
-
+    } finally {
+      unlockCMS(locked);
+
+  @VisibleForTesting
+  boolean lockCMS(Object command) {
+    // no lock if this is executing an offline command
+    if (cmsDlockService == null) {
+      return false;
+    }
+
+    // no lock if this command does not implement GfshCommand, i.e. custom
+    // commands. All commands that affects cluster config shoudl be a subclass
+    // of GfshCommand
+    if (!(command instanceof GfshCommand)) {
+      return false;
+    }
+
+    GfshCommand gfshCommand = (GfshCommand) command;
+    // no lock if cluster configuration service is not started
+    if (gfshCommand.getConfigurationPersistenceService() == null) {
+      return false;
+    }
+
+    // no lock if the command itself doesn't update cluster configuration
+    if (!gfshCommand.affectsClusterConfiguration()) {
+      return false;
+    }
+
+    // otherwise, ok to get the lock
+    return cmsDlockService.lock(CMS_DLOCK_SERVICE_NAME, -1, -1);
+  }
+
+  @VisibleForTesting
+  void unlockCMS(boolean locked) {
+    if (locked) {
+      cmsDlockService.unlock(CMS_DLOCK_SERVICE_NAME);
+    }
+  }
