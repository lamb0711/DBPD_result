Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
+import org.apache.geode.internal.logging.LoggingThread;
-      throw new IOException(LocalizedStrings.OSProcess_THE_EXECUTABLE_0_DOES_NOT_EXIST
-          .toLocalizedString(cmd.getPath()));
+      throw new IOException(String.format("the executable %s does not exist",
+          cmd.getPath()));
-          LocalizedStrings.OSProcess_WARNING_0_IS_NOT_A_DIRECTORY_DEFAULTING_TO_CURRENT_DIRECTORY_1
-              .toLocalizedString(new Object[] {workdir, curDir}));
+          String.format("WARNING: %s is not a directory. Defaulting to current directory %s.",
+              new Object[] {workdir, curDir}));
-        throw new IOException(LocalizedStrings.OSProcess_THE_LOG_FILE_0_WAS_NOT_A_NORMAL_FILE
-            .toLocalizedString(logfile.getPath()));
+        throw new IOException(String.format("The log file %s was not a normal file.",
+            logfile.getPath()));
-        throw new IOException(LocalizedStrings.OSProcess_NEED_WRITE_ACCESS_FOR_THE_LOG_FILE_0
-            .toLocalizedString(logfile.getPath()));
+        throw new IOException(String.format("Need write access for the log file %s.",
+            logfile.getPath()));
-        throw new IOException(LocalizedStrings.OSProcess_COULD_NOT_CREATE_LOG_FILE_0_BECAUSE_1
-            .toLocalizedString(new Object[] {logfile.getPath(), io.getMessage()}));
+        throw new IOException(String.format("Could not create log file %s because: %s.",
+            new Object[] {logfile.getPath(), io.getMessage()}));
-          LocalizedStrings.OSProcess_SHOULD_NOT_SEND_A_SIGNAL_TO_PID_0
-              .toLocalizedString(Integer.valueOf(pid)));
+          String.format("Should not send a signal to pid %s",
+              Integer.valueOf(pid)));
-          LocalizedStrings.OSProcess_SHUTDOWN_NOT_ALLOWED_IN_PURE_JAVA_MODE.toLocalizedString());
+          "shutdown not allowed in pure java mode");
-          LocalizedStrings.OSProcess_KILL_NOT_ALLOWED_IN_PURE_JAVA_MODE.toLocalizedString());
+          "kill not allowed in pure java mode");
-          LocalizedStrings.OSProcess_EXISTS_NOT_ALLOWED_IN_PURE_JAVA_MODE.toLocalizedString());
+          "exists not allowed in pure java mode");
-          LocalizedStrings.OSProcess_WAITFORPIDTOEXIT_NOT_ALLOWED_IN_PURE_JAVA_MODE
-              .toLocalizedString());
+          "waitForPidToExit not allowed in pure java mode");
-          LocalizedStrings.OSProcess_SETCURRENTDIRECTORY_NOT_ALLOWED_IN_PURE_JAVA_MODE
-              .toLocalizedString());
+          "setCurrentDirectory not allowed in pure java mode");
-        ThreadGroup group = LoggingThreadGroup
-            .createThreadGroup(LocalizedStrings.OSProcess_REAPER_THREAD.toLocalizedString());
-        reaperThread = new Thread(group, new Runnable() {
-          public void run() {
-            synchronized (myPid) {
-              myPid[0] = getProcessId();
-              reaperStarted = true;
-            }
-            String trace = System.getProperty("org.apache.geode.internal.OSProcess.trace");
-            int secondsToSleep = (1000 * 60) * 1; // one minute
-            if (trace != null && trace.length() > 0) {
-              secondsToSleep = 1000; // every second
-            }
-            // reap all the pids we have every once in a while
-            while (true) {
-              SystemFailure.checkFailure();
-              try {
-                Iterator it = pids.iterator();
-                while (it.hasNext()) {
-                  Object o = it.next();
-                  int pid = ((Integer) o).intValue();
-                  if (reapPid(pid)) {
-                    try {
-                      it.remove();
-                      if (trace != null && trace.length() > 0) {
-                        System.out.println("reaped pid: " + pid);
-                      }
-                    } catch (Exception e) {
-                      // make sure and remove it since it was
-                      // reaped.
-                      pids.remove(o);
-                      if (trace != null && trace.length() > 0) {
-                        System.out.println("reaped pid: " + pid);
-                      }
-                      throw e;
+        reaperThread = new LoggingThread("osprocess reaper", () -> {
+          synchronized (myPid) {
+            myPid[0] = getProcessId();
+            reaperStarted = true;
+          }
+          String trace = System.getProperty("org.apache.geode.internal.OSProcess.trace");
+          int secondsToSleep = (1000 * 60) * 1; // one minute
+          if (trace != null && trace.length() > 0) {
+            secondsToSleep = 1000; // every second
+          }
+          // reap all the pids we have every once in a while
+          while (true) {
+            SystemFailure.checkFailure();
+            try {
+              Iterator it = pids.iterator();
+              while (it.hasNext()) {
+                Object o = it.next();
+                int pid = ((Integer) o).intValue();
+                if (reapPid(pid)) {
+                  try {
+                    it.remove();
+                    if (trace != null && trace.length() > 0) {
+                      System.out.println("reaped pid: " + pid);
+                  } catch (Exception e) {
+                    // make sure and remove it since it was
+                    // reaped.
+                    pids.remove(o);
+                    if (trace != null && trace.length() > 0) {
+                      System.out.println("reaped pid: " + pid);
+                    }
+                    throw e;
-                Thread.sleep(secondsToSleep);
-              } catch (InterruptedException e) {
-                Thread.currentThread().interrupt();
-                break;
-              } catch (Exception e) {
-                // e.printStackTrace(); // DEBUG
-                // ignore
+              Thread.sleep(secondsToSleep);
+            } catch (InterruptedException e) {
+              Thread.currentThread().interrupt();
+              break;
+            } catch (Exception e) {
+              // e.printStackTrace(); // DEBUG
+              // ignore
-        }, "osprocess reaper");
-        reaperThread.setDaemon(true);
+        });
