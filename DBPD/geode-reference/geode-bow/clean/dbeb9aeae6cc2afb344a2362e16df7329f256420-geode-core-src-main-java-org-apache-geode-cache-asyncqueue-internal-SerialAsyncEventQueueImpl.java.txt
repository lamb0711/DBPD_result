Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  final ThreadGroup loggerGroup = LoggingThreadGroup.createThreadGroup(
-      "Remote Site Discovery Logger Group", logger);
-  public SerialAsyncEventQueueImpl(){
+  final ThreadGroup loggerGroup =
+      LoggingThreadGroup.createThreadGroup("Remote Site Discovery Logger Group", logger);
+
+  public SerialAsyncEventQueueImpl() {
-  public SerialAsyncEventQueueImpl(Cache cache,
-      GatewaySenderAttributes attrs) {
+
+  public SerialAsyncEventQueueImpl(Cache cache, GatewaySenderAttributes attrs) {
-        this.statistics = new AsyncEventQueueStats(
-            cache.getDistributedSystem(), AsyncEventQueueImpl
-                .getAsyncEventQueueIdFromSenderId(id));
-      }
+      this.statistics = new AsyncEventQueueStats(cache.getDistributedSystem(),
+          AsyncEventQueueImpl.getAsyncEventQueueIdFromSenderId(id));
+    }
-  
+
-    
+
-        logger.warn(LocalizedMessage.create(LocalizedStrings.GatewaySender_SENDER_0_IS_ALREADY_RUNNING, this.getId()));
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.GatewaySender_SENDER_0_IS_ALREADY_RUNNING, this.getId()));
-        String locators = ((GemFireCacheImpl)this.cache).getDistributedSystem()
-            .getConfig().getLocators();
+        String locators =
+            ((GemFireCacheImpl) this.cache).getDistributedSystem().getConfig().getLocators();
-        eventProcessor = new ConcurrentSerialGatewaySenderEventProcessor(
-            SerialAsyncEventQueueImpl.this);
+        eventProcessor =
+            new ConcurrentSerialGatewaySenderEventProcessor(SerialAsyncEventQueueImpl.this);
-        eventProcessor = new SerialGatewaySenderEventProcessor(
-            SerialAsyncEventQueueImpl.this, getId());
+        eventProcessor =
+            new SerialGatewaySenderEventProcessor(SerialAsyncEventQueueImpl.this, getId());
-      
-      //Only notify the type registry if this is a WAN gateway queue
-      if(!isAsyncEventQueue()) {
+
+      // Only notify the type registry if this is a WAN gateway queue
+      if (!isAsyncEventQueue()) {
-      
-      InternalDistributedSystem system = (InternalDistributedSystem) this.cache
-          .getDistributedSystem();
+
+      InternalDistributedSystem system =
+          (InternalDistributedSystem) this.cache.getDistributedSystem();
-      
-      logger.info(LocalizedMessage.create(LocalizedStrings.SerialGatewaySenderImpl_STARTED__0, this));
-  
+
+      logger
+          .info(LocalizedMessage.create(LocalizedStrings.SerialGatewaySenderImpl_STARTED__0, this));
+
-  
+
-      
+
-        DistributedLockService
-            .destroy(getSenderAdvisor().getDLockServiceName());
+        DistributedLockService.destroy(getSenderAdvisor().getDLockServiceName());
-        ((SerialGatewaySenderQueue)q).cleanUp();
+        ((SerialGatewaySenderQueue) q).cleanUp();
-    new UpdateAttributesProcessor(this).distribute(false);
+      new UpdateAttributesProcessor(this).distribute(false);
-        logger.info(LocalizedMessage.create(LocalizedStrings.GatewaySender_COULD_NOT_STOP_LOCK_OBTAINING_THREAD_DURING_GATEWAY_SENDER_STOP));
+        logger.info(LocalizedMessage.create(
+            LocalizedStrings.GatewaySender_COULD_NOT_STOP_LOCK_OBTAINING_THREAD_DURING_GATEWAY_SENDER_STOP));
-    
-    InternalDistributedSystem system = (InternalDistributedSystem) this.cache
-        .getDistributedSystem();
+
+    InternalDistributedSystem system =
+        (InternalDistributedSystem) this.cache.getDistributedSystem();
-  
+
-    sb.append(",remoteDsId="+ getRemoteDSId());
-    sb.append(",isRunning ="+ isRunning());
-    sb.append(",isPrimary ="+ isPrimary());
+    sb.append(",remoteDsId=" + getRemoteDSId());
+    sb.append(",isRunning =" + isRunning());
+    sb.append(",isPrimary =" + isPrimary());
- 
+
-    GatewaySenderProfile pf = (GatewaySenderProfile)profile;
+    GatewaySenderProfile pf = (GatewaySenderProfile) profile;
-    pf.serverLocation = this.getServerLocation(); 
+    pf.serverLocation = this.getServerLocation();
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.wan.AbstractGatewaySender#setModifiedEventId(org.apache.geode.internal.cache.EntryEventImpl)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.wan.AbstractGatewaySender#setModifiedEventId(org.apache.geode.
+   * internal.cache.EntryEventImpl)
-      newThreadId = ThreadIdentifier
-        .createFakeThreadIDForParallelGSPrimaryBucket(0, originalThreadId,
-            getEventIdIndex());
+      newThreadId = ThreadIdentifier.createFakeThreadIDForParallelGSPrimaryBucket(0,
+          originalThreadId, getEventIdIndex());
-    EventID newEventId = new EventID(originalEventId.getMembershipID(),
-        newThreadId, originalEventId.getSequenceID());
+    EventID newEventId = new EventID(originalEventId.getMembershipID(), newThreadId,
+        originalEventId.getSequenceID());
-      logger.debug("{}: Generated event id for event with key={}, original event id={}, originalThreadId={}, new event id={}, newThreadId={}",
+      logger.debug(
+          "{}: Generated event id for event with key={}, original event id={}, originalThreadId={}, new event id={}, newThreadId={}",
