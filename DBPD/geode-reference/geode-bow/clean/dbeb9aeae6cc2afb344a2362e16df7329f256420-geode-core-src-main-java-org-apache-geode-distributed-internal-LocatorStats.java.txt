Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  
+
-  
+
-  
-  
+
+
-  
+
-    String serverThreadsDesc = "The number of location requests currently being processed by the thread pool.";
+    String serverThreadsDesc =
+        "The number of location requests currently being processed by the thread pool.";
-    type = f.createType(
-        statName, 
-        statDescription,
-        new StatisticDescriptor[] {
-            f.createIntGauge(KNOWN_LOCATORS, "Number of locators known to this locator", LOCATORS),
-            f.createLongCounter(REQUESTS_TO_LOCATOR, "Number of requests this locator has received from clients", "requests"),
-            f.createLongCounter(RESPONSES_FROM_LOCATOR, "Number of responses this locator has sent to clients", "responses"),
-            f.createIntGauge(ENDPOINTS_KNOWN, "Number of servers this locator knows about", "servers"),
-            f.createIntGauge(REQUESTS_IN_PROGRESS, serverThreadsDesc, "requests"),
-            f.createLongCounter(REQUEST_TIME, "Time spent processing server location requests", "nanoseconds"),
-            f.createLongCounter(RESPONSE_TIME, "Time spent sending location responses to clients", "nanoseconds"),
-            f.createLongCounter(SERVER_LOAD_UPDATES, "Total number of times a server load update has been received.", "updates"),
-        }
-    );
-    
+    type = f.createType(statName, statDescription, new StatisticDescriptor[] {
+        f.createIntGauge(KNOWN_LOCATORS, "Number of locators known to this locator", LOCATORS),
+        f.createLongCounter(REQUESTS_TO_LOCATOR,
+            "Number of requests this locator has received from clients", "requests"),
+        f.createLongCounter(RESPONSES_FROM_LOCATOR,
+            "Number of responses this locator has sent to clients", "responses"),
+        f.createIntGauge(ENDPOINTS_KNOWN, "Number of servers this locator knows about", "servers"),
+        f.createIntGauge(REQUESTS_IN_PROGRESS, serverThreadsDesc, "requests"),
+        f.createLongCounter(REQUEST_TIME, "Time spent processing server location requests",
+            "nanoseconds"),
+        f.createLongCounter(RESPONSE_TIME, "Time spent sending location responses to clients",
+            "nanoseconds"),
+        f.createLongCounter(SERVER_LOAD_UPDATES,
+            "Total number of times a server load update has been received.", "updates"),});
+
-   * Creates a new <code>LocatorStats</code> and registers itself
-   * with the given statistics factory.
+   * Creates a new <code>LocatorStats</code> and registers itself with the given statistics factory.
-  public LocatorStats() {
-  }
-  
+  public LocatorStats() {}
+
-  public void hookupStats(StatisticsFactory f,String name) {
-    if(this._stats==null) {
+  public void hookupStats(StatisticsFactory f, String name) {
+    if (this._stats == null) {
-  
-  
+
+
-    if(this._stats==null) {
+    if (this._stats == null) {
-    if(this._stats==null) {
+    if (this._stats == null) {
-  
+
-    long took = DistributionStats.getStatTime()-startTime;
-    if(this._stats==null) {
+    long took = DistributionStats.getStatTime() - startTime;
+    if (this._stats == null) {
-  } 
-  
+  }
+
-    long took = DistributionStats.getStatTime()-startTime;
-    if(this._stats==null) {
+    long took = DistributionStats.getStatTime() - startTime;
+    if (this._stats == null) {
-  } 
-  
-  
-  
+  }
+
+
+
-    if(this._stats==null) {
+    if (this._stats == null) {
-      this._stats.setLong(_REQUESTS_TO_LOCATOR,rl);
+      this._stats.setLong(_REQUESTS_TO_LOCATOR, rl);
-  
+
-    if(this._stats==null) {
+    if (this._stats == null) {
-      this._stats.setLong(_RESPONSES_FROM_LOCATOR,rl);
+      this._stats.setLong(_RESPONSES_FROM_LOCATOR, rl);
-    if(this._stats==null) {
+    if (this._stats == null) {
-    if(this._stats==null) {
+    if (this._stats == null) {
-  
+
-    if(this._stats!=null) {
+    if (this._stats != null) {
-  
+
-    if(this._stats!=null) {
+    if (this._stats != null) {
