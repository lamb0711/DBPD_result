GEODE-1751: putting security checks in all applicable client-server commands.

- * 
+ *
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException, InterruptedException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
-      logger.debug("{}: Received key set request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
+      logger.debug("{}: Received key set request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn
+        .getSocketString(), regionName);
-//      if (regionName == null) (can only be null) 
+      //      if (regionName == null) (can only be null)
-        message = LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL.toLocalizedString(servConn.getName());
-        logger.warn(LocalizedMessage.create(LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL, servConn.getName()));
+        message = LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL.toLocalizedString(servConn
+          .getName());
+        logger.warn(LocalizedMessage.create(LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL, servConn
+          .getName()));
-      writeKeySetErrorResponse(msg, MessageType.KEY_SET_DATA_ERROR, message,
-          servConn);
+      writeKeySetErrorResponse(msg, MessageType.KEY_SET_DATA_ERROR, message, servConn);
+      return;
-    else {
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
-      if (region == null) {
-        String reason = LocalizedStrings.KeySet__0_WAS_NOT_FOUND_DURING_KEY_SET_REQUEST.toLocalizedString(regionName);
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
+
+    LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
+    if (region == null) {
+      String reason = LocalizedStrings.KeySet__0_WAS_NOT_FOUND_DURING_KEY_SET_REQUEST.toLocalizedString(regionName);
+      writeRegionDestroyedEx(msg, regionName, reason, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    GeodeSecurityUtil.authorizeRegionRead(regionName);
+
+    KeySetOperationContext keySetContext = null;
+    AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+    if (authzRequest != null) {
+      try {
+        keySetContext = authzRequest.keySetAuthorize(regionName);
+      } catch (NotAuthorizedException ex) {
+        writeChunkedException(msg, ex, false, servConn);
-      }
-      else {
-        KeySetOperationContext keySetContext = null;
-        AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-        if (authzRequest != null) {
-          try {
-            keySetContext = authzRequest.keySetAuthorize(regionName);
-          }
-          catch (NotAuthorizedException ex) {
-            writeChunkedException(msg, ex, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-            return;
-          }
-        }
-        // Update the statistics and write the reply
-        // bserverStats.incLong(processDestroyTimeId,
-        // DistributionStats.getStatTime() - start);
-        // start = DistributionStats.getStatTime();
-
-        // Send header
-        chunkedResponseMsg.setMessageType(MessageType.RESPONSE);
-        chunkedResponseMsg.setTransactionId(msg.getTransactionId());
-        chunkedResponseMsg.sendHeader();
-
-        // Send chunk response
-        try {
-          fillAndSendKeySetResponseChunks(region, regionName, keySetContext,
-              servConn);
-          servConn.setAsTrue(RESPONDED);
-        }
-        catch (Exception e) {
-          // If an interrupted exception is thrown , rethrow it
-          checkForInterrupt(servConn, e);
-
-          // Otherwise, write an exception message and continue
-          writeChunkedException(msg, e, false, servConn, servConn
-              .getChunkedResponseMessage());
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-
-        if (isDebugEnabled) {
-          // logger.fine(getName() + ": Sent chunk (1 of 1) of register interest
-          // response (" + chunkedResponseMsg.getBufferLength() + " bytes) for
-          // region " + regionName + " key " + key);
-          logger.debug("{}: Sent key set response for the region {}", servConn.getName(), regionName);
-        }
-        // bserverStats.incLong(writeDestroyResponseTimeId,
-        // DistributionStats.getStatTime() - start);
-        // bserverStats.incInt(destroyResponsesId, 1);
+        return;
+    // Update the statistics and write the reply
+    // bserverStats.incLong(processDestroyTimeId,
+    // DistributionStats.getStatTime() - start);
+    // start = DistributionStats.getStatTime();
+
+    // Send header
+    chunkedResponseMsg.setMessageType(MessageType.RESPONSE);
+    chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+    chunkedResponseMsg.sendHeader();
+
+    // Send chunk response
+    try {
+      fillAndSendKeySetResponseChunks(region, regionName, keySetContext, servConn);
+      servConn.setAsTrue(RESPONDED);
+    } catch (Exception e) {
+      // If an interrupted exception is thrown , rethrow it
+      checkForInterrupt(servConn, e);
+
+      // Otherwise, write an exception message and continue
+      writeChunkedException(msg, e, false, servConn, servConn.getChunkedResponseMessage());
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    if (isDebugEnabled) {
+      // logger.fine(getName() + ": Sent chunk (1 of 1) of register interest
+      // response (" + chunkedResponseMsg.getBufferLength() + " bytes) for
+      // region " + regionName + " key " + key);
+      logger.debug("{}: Sent key set response for the region {}", servConn.getName(), regionName);
+    }
+    // bserverStats.incLong(writeDestroyResponseTimeId,
+    // DistributionStats.getStatTime() - start);
+    // bserverStats.incInt(destroyResponsesId, 1);
+
-      String regionName, KeySetOperationContext context,
-      ServerConnection servConn) throws IOException {
+                                               String regionName,
+                                               KeySetOperationContext context,
+                                               ServerConnection servConn) throws IOException {
-      keySetContext = postAuthzRequest.keySetAuthorize(regionName, keySet,
-          keySetContext);
+      keySetContext = postAuthzRequest.keySetAuthorize(regionName, keySet, keySetContext);
-    for (Iterator it = keySet.iterator(); it.hasNext();) {
+    for (Iterator it = keySet.iterator(); it.hasNext(); ) {
-      GeodeSecurityUtil.authorizeRegionRead(regionName, entryKey.toString());
-        logger.trace("{}: fillAndSendKeySetResponseKey <{}>; list size was {}; region: {}", servConn.getName(), entryKey, keyList.size(), region.getFullPath());
+        logger.trace("{}: fillAndSendKeySetResponseKey <{}>; list size was {}; region: {}", servConn.getName(), entryKey, keyList
+          .size(), region.getFullPath());
-  private static void sendKeySetResponseChunk(Region region, List list,
-      boolean lastChunk, ServerConnection servConn) throws IOException {
+  private static void sendKeySetResponseChunk(Region region, List list, boolean lastChunk, ServerConnection servConn)
+    throws IOException {
-      logger.debug("{}: Sending {} key set response chunk for region={}{}", servConn.getName(), (lastChunk ? " last " : " "), region.getFullPath(), (logger.isTraceEnabled() ? " keys=" + list + " chunk=<" + chunkedResponseMsg + ">" : ""));
+      logger.debug("{}: Sending {} key set response chunk for region={}{}", servConn.getName(), (lastChunk ? " last " : " "), region
+        .getFullPath(), (logger.isTraceEnabled() ? " keys=" + list + " chunk=<" + chunkedResponseMsg + ">" : ""));
