GEODE-7715: Introduce Transport and Config interfaces to ClusterManagementServiceBuilder (#4601)

This introduces several new interfaces to the `ClusterManagementService`. These are:

- `ClusterManagmentServiceTransport` which represents the message exchange between client and endpoint.
- `ClusterManagementServiceConnectionConfig` which is a data object and represents various properties required to establish a connection.

-import static org.apache.geode.management.configuration.Links.URI_VERSION;
-import static org.apache.geode.management.internal.Constants.INCLUDE_CLASS_HEADER;
-
-import java.util.Date;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.stream.Collectors;
-
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpMethod;
-import org.springframework.web.client.RestTemplate;
+import org.apache.geode.management.api.ClusterManagementServiceTransport;
+import org.apache.geode.management.api.CommandType;
-  private final RestTemplate restTemplate;
-  private final ScheduledExecutorService longRunningStatusPollingThreadPool;
+  private final ClusterManagementServiceTransport transport;
-  ClientClusterManagementService(RestTemplate restTemplate) {
-    this.restTemplate = restTemplate;
-    this.longRunningStatusPollingThreadPool = Executors.newScheduledThreadPool(1);
+  public ClientClusterManagementService(ClusterManagementServiceTransport transport) {
+    this.transport = transport;
-  @SuppressWarnings("unchecked")
-    String endPoint = URI_VERSION + config.getLinks().getList();
-    // the response status code info is represented by the ClusterManagementResult.errorCode already
-    return assertSuccessful(restTemplate
-        .exchange(endPoint, HttpMethod.POST, makeEntity(config),
-            ClusterManagementRealizationResult.class)
-        .getBody());
-  }
-
-  static <T> HttpEntity<T> makeEntity(T config) {
-    HttpHeaders headers = new HttpHeaders();
-    headers.add(INCLUDE_CLASS_HEADER, "true");
-    return new HttpEntity<>(config, headers);
+    return assertSuccessful(transport
+        .submitMessage(config, CommandType.CREATE, ClusterManagementRealizationResult.class));
-  @SuppressWarnings("unchecked")
-    String uri = getIdentityEndpoint(config);
-    return assertSuccessful(restTemplate
-        .exchange(uri + "?group={group}",
-            HttpMethod.DELETE,
-            makeEntity(null),
-            ClusterManagementRealizationResult.class,
-            config.getGroup())
-        .getBody());
+    return assertSuccessful(transport.submitMessage(config, CommandType.DELETE,
+        ClusterManagementRealizationResult.class));
-  @SuppressWarnings("unchecked")
-    String endPoint = URI_VERSION + config.getLinks().getList();
-    return assertSuccessful(restTemplate
-        .exchange(endPoint + "/?id={id}&group={group}", HttpMethod.GET, makeEntity(config),
-            ClusterManagementListResult.class, config.getId(), config.getGroup())
-        .getBody());
+    return assertSuccessful(
+        transport.submitMessageForList(config, ClusterManagementListResult.class));
-  @SuppressWarnings("unchecked")
-
-    return assertSuccessful(restTemplate
-        .exchange(getIdentityEndpoint(config), HttpMethod.GET, makeEntity(config),
-            ClusterManagementGetResult.class)
-        .getBody());
+    return assertSuccessful(
+        transport.submitMessageForGet(config, ClusterManagementGetResult.class));
-  @SuppressWarnings("unchecked")
-    final ClusterManagementOperationResult result;
-
-    // make the REST call to start the operation
-    result = assertSuccessful(restTemplate
-        .exchange(URI_VERSION + op.getEndpoint(), HttpMethod.POST, makeEntity(op),
-            ClusterManagementOperationResult.class)
-        .getBody());
-
-    // our restTemplate requires the url to be modified to start from "/v1"
-    return reAnimate(result, op.getEndpoint());
-  }
-
-  private <V extends OperationResult> ClusterManagementOperationResult<V> reAnimate(
-      ClusterManagementOperationResult<V> result, String endPoint) {
-    String uri = URI_VERSION + endPoint + "/" + result.getOperationId();
-
-    // complete the future by polling the check-status REST endpoint
-    CompletableFuture<Date> futureOperationEnded = new CompletableFuture<>();
-    CompletableFutureProxy<V> operationResult =
-        new CompletableFutureProxy<>(restTemplate, uri, longRunningStatusPollingThreadPool,
-            futureOperationEnded);
-
-    return new ClusterManagementOperationResult<>(result, operationResult,
-        result.getOperationStart(), futureOperationEnded, result.getOperator(),
-        result.getOperationId());
+    return transport.submitMessageForStart(op);
-  @SuppressWarnings("unchecked")
-    final ClusterManagementListOperationsResult<V> result;
-
-    // make the REST call to list in-progress operations
-    result = assertSuccessful(restTemplate
-        .exchange(URI_VERSION + opType.getEndpoint(), HttpMethod.GET,
-            makeEntity(null), ClusterManagementListOperationsResult.class)
-        .getBody());
-
-    return new ClusterManagementListOperationsResult<>(
-        result.getResult().stream().map(r -> reAnimate(r, opType.getEndpoint()))
-            .collect(Collectors.toList()));
+    return transport.submitMessageForListOperation(opType,
+        ClusterManagementListOperationsResult.class);
-  private String getIdentityEndpoint(AbstractConfiguration config) {
-    String uri = config.getLinks().getSelf();
-    if (uri == null) {
-      throw new IllegalArgumentException(
-          "Unable to construct the URI with the current configuration.");
-    }
-    return URI_VERSION + uri;
+  @Override
+  public boolean isConnected() {
+    return transport.isConnected();
+  }
+
+  @Override
+  public void close() {
+    transport.close();
-
-  public boolean isConnected() {
-    try {
-      return restTemplate.getForEntity(URI_VERSION + "/ping", String.class)
-          .getBody().equals("pong");
-    } catch (Exception e) {
-      return false;
-    }
-  }
-
-  @Override
-  public void close() {
-    longRunningStatusPollingThreadPool.shutdownNow();
-  }
