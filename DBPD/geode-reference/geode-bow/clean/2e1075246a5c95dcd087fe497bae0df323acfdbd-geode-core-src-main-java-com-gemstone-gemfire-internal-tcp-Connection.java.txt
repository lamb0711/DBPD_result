Merge branch 'release/1.0.0-incubating.M3'

-import java.io.BufferedInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InterruptedIOException;
-import java.io.OutputStream;
-import java.net.ConnectException;
-import java.net.Inet6Address;
-import java.net.InetSocketAddress;
-import java.net.Socket;
-import java.net.SocketException;
-import java.net.SocketTimeoutException;
-import java.nio.ByteBuffer;
-import java.nio.channels.CancelledKeyException;
-import java.nio.channels.ClosedChannelException;
-import java.nio.channels.ClosedSelectorException;
-import java.nio.channels.SocketChannel;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicLong;
-
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.distributed.internal.ConflationKey;
-import com.gemstone.gemfire.distributed.internal.DM;
-import com.gemstone.gemfire.distributed.internal.DMStats;
-import com.gemstone.gemfire.distributed.internal.DirectReplyProcessor;
-import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.gemstone.gemfire.distributed.internal.DistributionConfigImpl;
-import com.gemstone.gemfire.distributed.internal.DistributionManager;
-import com.gemstone.gemfire.distributed.internal.DistributionMessage;
-import com.gemstone.gemfire.distributed.internal.DistributionStats;
-import com.gemstone.gemfire.distributed.internal.ReplyException;
-import com.gemstone.gemfire.distributed.internal.ReplyMessage;
-import com.gemstone.gemfire.distributed.internal.ReplyProcessor21;
-import com.gemstone.gemfire.distributed.internal.ReplySender;
+import com.gemstone.gemfire.distributed.internal.*;
-import com.gemstone.gemfire.internal.Assert;
-import com.gemstone.gemfire.internal.ByteArrayDataInput;
-import com.gemstone.gemfire.internal.DSFIDFactory;
-import com.gemstone.gemfire.internal.InternalDataSerializer;
-import com.gemstone.gemfire.internal.SocketCreator;
-import com.gemstone.gemfire.internal.SocketUtils;
-import com.gemstone.gemfire.internal.SystemTimer;
+import com.gemstone.gemfire.internal.*;
-import com.gemstone.gemfire.internal.Version;
+import org.apache.logging.log4j.Logger;
+
+import java.io.*;
+import java.net.*;
+import java.nio.ByteBuffer;
+import java.nio.channels.CancelledKeyException;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.ClosedSelectorException;
+import java.nio.channels.SocketChannel;
+import java.util.*;
+import java.util.concurrent.Semaphore;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicLong;
+
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
-    @since 2.0
+    @since GemFire 2.0
-  public final static int SMALL_BUFFER_SIZE = Integer.getInteger("gemfire.SMALL_BUFFER_SIZE",4096).intValue();
+  public final static int SMALL_BUFFER_SIZE = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "SMALL_BUFFER_SIZE", 4096).intValue();
-   * @since 4.2.2
+   * @since GemFire 4.2.2
-   * @since 4.2.2
+   * @since GemFire 4.2.2
-   * @since 4.2.2
+   * @since GemFire 4.2.2
-    if (isSocketInUse()) {
+    if (isSocketInUse()
+        || (this.sharedResource && !this.preserveOrder)) { // shared/unordered connections are used for failure-detection
+                                                           // and are not subject to idle-timeout
-      while ((owner.getConduit().getCancelCriterion().cancelInProgress() == null)
+      while ((!owner.getConduit().getCancelCriterion().isCancelInProgress())
-    = Integer.getInteger("gemfire.RECONNECT_WAIT_TIME", 2000).intValue();
+      = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "RECONNECT_WAIT_TIME", 2000).intValue();
-          SocketUtils.connect(channel.socket(), addr, connectTime);
+          channel.socket().connect(addr, connectTime);
-        SocketUtils.connect(s, addr, 0);
+        s.connect(addr, 0);
-      if (stopped || owner.getConduit().getCancelCriterion().cancelInProgress() != null) {
+      if (stopped || owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-        if (this.owner.getConduit().getCancelCriterion().cancelInProgress() != null) {
+        if (this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-      if (this.owner.getConduit().getCancelCriterion().cancelInProgress() == null) {
+      if (!this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-      if (stopped || owner.getConduit().getCancelCriterion().cancelInProgress() != null) {
+      if (stopped || owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-        if (this.owner.getConduit().getCancelCriterion().cancelInProgress() != null) {
+        if (this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-                      + DistributionConfig.SECURITY_PEER_AUTH_INIT_NAME);
+                      + SECURITY_PEER_AUTH_INIT);
-            if (this.owner.getConduit().getCancelCriterion().cancelInProgress() != null) {
+            if (this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-        if (this.owner.getConduit().getCancelCriterion().cancelInProgress() != null) {
+        if (this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-   * @since 4.2.2
+   * @since GemFire 4.2.2
-          if (this.owner.getConduit().getCancelCriterion().cancelInProgress() != null) {
+          if (this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {
-                        + DistributionConfig.SECURITY_PEER_AUTH_INIT_NAME);
+                        + SECURITY_PEER_AUTH_INIT);
-   * @since 5.1
+   * @since GemFire 5.1
