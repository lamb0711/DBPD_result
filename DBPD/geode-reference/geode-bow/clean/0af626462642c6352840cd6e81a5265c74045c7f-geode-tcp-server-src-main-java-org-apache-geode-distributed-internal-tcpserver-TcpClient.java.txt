GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing

-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-  private static final Map<InetSocketAddress, Short> serverVersions =
+  private static final Map<HostAndPort, Short> serverVersions =
-  public void stop(InetAddress addr, int port) throws java.net.ConnectException {
+  public void stop(HostAndPort addr) throws java.net.ConnectException {
-      requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
+      requestToServer(addr, request, DEFAULT_REQUEST_TIMEOUT);
-          "TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+          "TcpClient.stop(): exception connecting to locator " + addr + ex);
-  public String[] getInfo(InetAddress addr, int port) {
+  public String[] getInfo(HostAndPort addr) {
-          (InfoResponse) requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
+          (InfoResponse) requestToServer(addr, request, DEFAULT_REQUEST_TIMEOUT);
-          "TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+          "TcpClient.getInfo(): exception connecting to locator " + addr + ": " + ex);
-   * @param port The locator's tcp/ip port
-  public Object requestToServer(InetAddress addr, int port, Object request, int timeout)
+  public Object requestToServer(HostAndPort addr, Object request, int timeout)
-    return requestToServer(addr, port, request, timeout, true);
+    return requestToServer(addr, request, timeout, true);
-   * @param port The locator's tcp/ip port
-   * @param request The request message
-   * @param timeout Timeout for sending the message and receiving a reply
-   * @param replyExpected Whether to wait for a reply
-   * @return the reply
-   */
-  public Object requestToServer(InetAddress addr, int port, Object request, int timeout,
-      boolean replyExpected) throws IOException, ClassNotFoundException {
-    InetSocketAddress ipAddr;
-    if (addr == null) {
-      ipAddr = new InetSocketAddress(port);
-    } else {
-      ipAddr = new InetSocketAddress(addr, port); // fix for bug 30810
-    }
-    return requestToServer(ipAddr, request, timeout, replyExpected);
-  }
-
-  /**
-   * Send a request to a Locator
-   *
-   * @param ipAddr The locator's inet socket address
-  public Object requestToServer(InetSocketAddress ipAddr, Object request, int timeout,
+  public Object requestToServer(HostAndPort addr, Object request, int timeout,
-    short serverVersion = getServerVersion(ipAddr, timeout);
+    short serverVersion = getServerVersion(addr, timeout);
-    logger.debug("TcpClient sending {} to {}", request, ipAddr);
+    logger.debug("TcpClient sending {} to {}", request, addr);
-        socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
+        socketCreator.forCluster().connect(addr, (int) newTimeout, null);
-          EOFException eof = new EOFException("Locator at " + ipAddr
+          EOFException eof = new EOFException("Locator at " + addr
-          if (!sock.isClosed() && !socketCreator.useSSL()) {
+          if (!sock.isClosed() && !socketCreator.forCluster().useSSL()) {
-  private Short getServerVersion(InetSocketAddress ipAddr, int timeout)
+  private Short getServerVersion(HostAndPort addr, int timeout)
-      serverVersion = serverVersions.get(ipAddr);
+      serverVersion = serverVersions.get(addr);
-      sock = socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
+      sock = socketCreator.forCluster().connect(addr, timeout, null);
-          serverVersions.put(ipAddr, serverVersion);
+          serverVersions.put(addr, serverVersion);
-      serverVersions.put(ipAddr, Version.GFE_57.ordinal());
+      serverVersions.put(addr, Version.GFE_57.ordinal());
