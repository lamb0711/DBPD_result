Merge branch 'release/1.3.0'

+import static org.apache.commons.lang.Validate.isTrue;
+import static org.apache.commons.lang.Validate.notEmpty;
+import static org.apache.commons.lang.Validate.notNull;
+
-import org.apache.geode.internal.util.IOUtils;
-
-  private ProcessUtils() {}
+  private ProcessUtils() {
+    // nothing
+  }
+    notEmpty(name, "Invalid name '" + name + "' specified");
+
+
-      final int index = name.indexOf("@");
+      final int index = name.indexOf('@');
+    isTrue(pid > 0, "Invalid pid '" + pid + "' specified");
+
+    notNull(process, "Invalid process '" + process + "' specified");
+
+    isTrue(pid > 0, "Invalid pid '" + pid + "' specified");
+
-    BufferedReader reader = null;
-    try {
-      reader = new BufferedReader(new FileReader(pidFile));
+    notNull(pidFile, "Invalid pidFile '" + pidFile + "' specified");
+    isTrue(pidFile.exists(), "Nonexistent pidFile '" + pidFile + "' specified");
+
+    try (BufferedReader reader = new BufferedReader(new FileReader(pidFile))) {
-    } finally {
-      IOUtils.close(reader);
-    } catch (ClassNotFoundException e) {
-      // fall through
-    } catch (LinkageError e) {
+    } catch (ClassNotFoundException | LinkageError ignored) {
-      // TODO: get rid of Class.forName usage if NativeCalls always safely loads
+      // consider getting rid of Class.forName usage if NativeCalls always safely loads
-      NativeProcessUtils inst = new NativeProcessUtils();
-      boolean result = inst.isProcessAlive(identifyPid());
+      NativeProcessUtils nativeProcessUtils = new NativeProcessUtils();
+      boolean result = nativeProcessUtils.isProcessAlive(identifyPid());
-        return inst;
+        return nativeProcessUtils;
-    } catch (ClassNotFoundException e) {
-      // fall through
-    } catch (LinkageError e) {
-      // fall through
-    } catch (PidUnavailableException e) {
-      // fall through (log warning??)
-    } catch (UnsupportedOperationException e) {
+    } catch (ClassNotFoundException | LinkageError | PidUnavailableException
+        | UnsupportedOperationException ignored) {
-    // 3) TODO: log warning and then proceed with no-op
+    // 3) consider logging warning and then proceed with no-op
-      public boolean isProcessAlive(int pid) {
+      public boolean isProcessAlive(final int pid) {
-      public boolean killProcess(int pid) {
+      public boolean killProcess(final int pid) {
-    public boolean isProcessAlive(int pid);
-    public boolean killProcess(int pid);
+    boolean isProcessAlive(final int pid);
-    public boolean isAvailable();
+    boolean killProcess(final int pid);
-    public boolean isAttachApiAvailable();
+    boolean isAvailable();
+
+    boolean isAttachApiAvailable();
