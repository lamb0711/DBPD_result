GEODE-2927: fix pulse logging and useLocator, SSL flags

* using local mbs server connection will bypass all the mbean security checks
* do not update the mbean attribute since pulse user has no cluster:write privilege at all
* Created EmbeddedPulseRule for tests
* simplify PulseAppListener
* use log4j2 logging configurations

-import java.lang.management.ManagementFactory;
-import javax.management.InvalidAttributeValueException;
-  private MBeanServerConnection mbs;
+  private MBeanServerConnection mbs = null;
-  private ObjectName MBEAN_OBJECT_NAME_TABLE_AGGREGATE;
-      String locatorHost = repository.getJmxHost();
-      int locatorPort = Integer.parseInt(repository.getJmxPort());
+      String locatorHost = repository.getHost();
+      int locatorPort = Integer.parseInt(repository.getPort());
-      logger.info("{} : {} & {} : {}", resourceBundle.getString("LOG_MSG_HOST"), locatorHost,
+      logger.info("{}={} & {}={}", resourceBundle.getString("LOG_MSG_HOST"), locatorHost,
-          logger.info("{} - {}", resourceBundle.getString("LOG_MSG_LOCATOR_IPV4_ADDRESS"),
-              inetAddr);
+          logger.info("{}: {}", resourceBundle.getString("LOG_MSG_LOCATOR_IPV4_ADDRESS"), inetAddr);
-          logger.info("{} - {}", resourceBundle.getString("LOG_MSG_LOCATOR_IPV6_ADDRESS"),
-              inetAddr);
+          logger.info("{}: {}", resourceBundle.getString("LOG_MSG_LOCATOR_IPV6_ADDRESS"), inetAddr);
-  /**
-   * Default connection is Pulse which uses configured userName and password
-   */
-  public JMXConnector getJMXConnection() {
-    return getJMXConnection(true);
-  }
-   * Get connection for given userName and password. This is used for DataBrowser queries which has
-   * to be fired using credentials provided at pulse login page
+   * Get the jmx connection
-  public JMXConnector getJMXConnection(final boolean registerURL) {
-    JMXConnector connection = null;
+  public JMXConnector connect(String username, String password) {
-          logger.info("{} : {} : {} & {} : {}{}",
+          logger.info("{}: {}={} & {}={}, {}",
-        logger.info("{} : {} & {} : {}", resourceBundle.getString("LOG_MSG_HOST"), this.serverName,
+        logger.info("{}={} & {}={}", resourceBundle.getString("LOG_MSG_HOST"), this.serverName,
-        String[] creds = {this.cluster.getJmxUserName(), this.cluster.getJmxUserPassword()};
+        String[] creds = {username, password};
-        connection = JMXConnectorFactory.connect(url, env);
-
-        // Register Pulse URL if not already present in the JMX Manager
-        if (registerURL) {
-          registerPulseUrlToManager(connection);
-        }
+        this.conn = JMXConnectorFactory.connect(url, env);
+        this.mbs = this.conn.getMBeanServerConnection();
+        cluster.setConnectedFlag(true);
-      if (e instanceof UnknownHostException) {
-        cluster
-            .setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_UNKNOWN_HOST"));
-      }
-
-      StringWriter swBuffer = new StringWriter();
-      PrintWriter prtWriter = new PrintWriter(swBuffer);
-      e.printStackTrace(prtWriter);
-      logger.fatal("Exception Details : {}\n", swBuffer);
+      cluster.setConnectedFlag(false);
+      cluster.setConnectionErrorMsg(e.getMessage());
+      logger.fatal(e.getMessage(), e);
-          logger.fatal("Error closing JMX connection {}\n", swBuffer);
+          logger.fatal(e1.getMessage(), e1);
-    return connection;
+    return this.conn;
-  // Method registers Pulse URL if not already present in the JMX Manager
-  private void registerPulseUrlToManager(JMXConnector connection)
-      throws IOException, AttributeNotFoundException, InstanceNotFoundException, MBeanException,
-      ReflectionException, MalformedObjectNameException, InvalidAttributeValueException {
-    logger.info(resourceBundle.getString("LOG_MSG_REGISTERING_APP_URL_TO_MANAGER"));
-
-    // Reference to repository
-    Repository repository = Repository.get();
-
-    // Register Pulse URL if not already present in the JMX Manager
-    if (connection != null) {
-      MBeanServerConnection mbsc = connection.getMBeanServerConnection();
-
-      Set<ObjectName> mbeans = mbsc.queryNames(this.MBEAN_OBJECT_NAME_MEMBER_MANAGER, null);
-
-      for (ObjectName mbeanName : mbeans) {
-        String presentUrl =
-            (String) mbsc.getAttribute(mbeanName, PulseConstants.MBEAN_MANAGER_ATTRIBUTE_PULSEURL);
-        String pulseWebAppUrl = repository.getPulseWebAppUrl();
-        if (pulseWebAppUrl != null && (presentUrl == null || !pulseWebAppUrl.equals(presentUrl))) {
-          logger.debug(resourceBundle.getString("LOG_MSG_SETTING_APP_URL_TO_MANAGER"));
-          Attribute pulseUrlAttr =
-              new Attribute(PulseConstants.MBEAN_MANAGER_ATTRIBUTE_PULSEURL, pulseWebAppUrl);
-          mbsc.setAttribute(mbeanName, pulseUrlAttr);
-        } else {
-          logger.debug(resourceBundle.getString("LOG_MSG_APP_URL_ALREADY_PRESENT_IN_MANAGER"));
-        }
-      }
-    }
-  }
-
-  private boolean isConnected() {
-    // Reference to repository
-    Repository repository = Repository.get();
-    if (repository.getIsEmbeddedMode()) {
-      if (this.mbs == null) {
-        this.mbs = ManagementFactory.getPlatformMBeanServer();
-        cluster.setConnectedFlag(true);
-      }
-    } else {
-      try {
-        if (this.conn == null) {
-          cluster.setConnectedFlag(false);
-          cluster.setConnectionErrorMsg(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND")
-              + " " + resourceBundle.getString("LOG_MSG_JMX_GETTING_NEW_CONNECTION"));
-          logger.debug("{} {}", resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND"),
-              resourceBundle.getString("LOG_MSG_JMX_GET_NEW_CONNECTION"));
-          this.conn = getJMXConnection();
-          if (this.conn != null) {
-            this.mbs = this.conn.getMBeanServerConnection();
-            cluster.setConnectedFlag(true);
-          } else {
-            logger.info(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_NOT_FOUND"));
-            return false;
-          }
-        } else {
-          logger.debug(resourceBundle.getString("LOG_MSG_JMX_CONNECTION_IS_AVAILABLE"));
-          cluster.setConnectedFlag(true);
-          if (this.mbs == null) {
-            this.mbs = this.conn.getMBeanServerConnection();
-          }
-        }
-      } catch (Exception e) {
-        this.mbs = null;
-        if (this.conn != null) {
-          try {
-            this.conn.close();
-          } catch (Exception e1) {
-            logger.fatal(e);
-          }
-        }
-        this.conn = null;
-        return false;
-      }
-    }
-
-    return true;
-  }
-
-      if (!this.isConnected()) {
+      if (this.conn == null) {
-      // try {
-
-      // Cluster
-      Set<ObjectName> tableMBeans =
-          this.mbs.queryNames(this.MBEAN_OBJECT_NAME_TABLE_AGGREGATE, null);
-
-
-      // write errors
-      StringWriter swBuffer = new StringWriter();
-      PrintWriter prtWriter = new PrintWriter(swBuffer);
-      ioe.printStackTrace(prtWriter);
-      logger.fatal("IOException Details : {}\n", swBuffer);
+      logger.fatal(ioe.getMessage(), ioe);
-          logger.fatal("Error closing JMX connection {}\n", swBuffer);
+          logger.fatal(e1.getMessage(), e1);
+        this.conn = null;
