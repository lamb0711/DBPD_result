Merge branch 'release/1.4.0'

+import org.apache.geode.cache.Declarable;
+import org.apache.geode.cache.EvictionAttributes;
+import org.apache.geode.cache.util.ObjectSizer;
-import org.apache.geode.management.internal.cli.exceptions.CreateSubregionException;
-    String memberNameOrId =
-        CliUtil.getMemberNameOrId(cache.getDistributedSystem().getDistributedMember());
+    String memberNameOrId = context.getMemberName();
-    } catch (IllegalArgumentException | CreateSubregionException e) {
+    } catch (IllegalArgumentException e) {
-    final String regionPath = regionCreateArgs.getRegionPath();
-    final String useAttributesFrom = regionCreateArgs.getUseAttributesFrom();
-    // If a region path indicates a sub-region, check whether the parent region exists
-    RegionPath regionPathData = new RegionPath(regionPath);
-    String parentRegionPath = regionPathData.getParent();
-    Region<?, ?> parentRegion = null;
-    if (parentRegionPath != null && !Region.SEPARATOR.equals(parentRegionPath)) {
-      parentRegion = cache.getRegion(parentRegionPath);
-      if (parentRegion == null) {
-        throw new IllegalArgumentException(
-            CliStrings.format(CliStrings.CREATE_REGION__MSG__PARENT_REGION_FOR_0_DOES_NOT_EXIST,
-                new Object[] {regionPath}));
-      }
-
-      if (parentRegion.getAttributes().getPartitionAttributes() != null) {
-        // For a PR, sub-regions are not supported.
-        throw new CreateSubregionException(
-            CliStrings.format(CliStrings.CREATE_REGION__MSG__0_IS_A_PR_CANNOT_HAVE_SUBREGIONS,
-                parentRegion.getFullPath()));
-      }
-    }
-
-    // One of Region Shortcut OR Use Attributes From has to be given
-    if (regionShortcut == null && useAttributesFrom == null) {
-      throw new IllegalArgumentException(
-          CliStrings.CREATE_REGION__MSG__ONE_OF_REGIONSHORTCUT_AND_USEATTRIBUTESFROM_IS_REQUIRED);
-    }
-
+    // create the region factory using the arguments
-      if (logger.isDebugEnabled()) {
-        logger.debug("Using shortcut {} for {} region attributes : {}", regionShortcut, regionPath,
-            regionAttributes);
-      }
-
-      if (regionAttributes == null) {
-        if (logger.isDebugEnabled()) {
-          logger.debug("Shortcut {} doesn't have attributes in {}", regionShortcut,
-              cache.listRegionAttributes());
-        }
-        throw new IllegalStateException(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__COULD_NOT_LOAD_REGION_ATTRIBUTES_FOR_SHORTCUT_0,
-            regionShortcut));
-      }
+      regionCreateArgs.setRegionAttributes(regionAttributes);
-      if (logger.isDebugEnabled()) {
-        logger.debug("Using Manager's region attributes for {}", regionPath);
-      }
-      if (logger.isDebugEnabled()) {
-        logger.debug("Using Attributes : {}", regionAttributes);
-      }
+
-
-    if (!isPartitioned && regionCreateArgs.hasPartitionAttributes()) {
-      throw new IllegalArgumentException(CliStrings.format(
-          CliStrings.CREATE_REGION__MSG__OPTION_0_CAN_BE_USED_ONLY_FOR_PARTITIONEDREGION,
-          regionCreateArgs.getPartitionArgs().getUserSpecifiedPartitionAttributes()));
-    }
-
-      factory.setEntryIdleTimeout(regionExpirationIdleTime.convertToExpirationAttributes());
+      factory.setRegionIdleTimeout(regionExpirationIdleTime.convertToExpirationAttributes());
-      factory.setEntryTimeToLive(regionExpirationTTL.convertToExpirationAttributes());
+      factory.setRegionTimeToLive(regionExpirationTTL.convertToExpirationAttributes());
+    }
+
+    EvictionAttributes evictionAttributes = regionCreateArgs.getEvictionAttributes();
+    if (evictionAttributes != null) {
+      ObjectSizer sizer = evictionAttributes.getObjectSizer();
+      if (sizer != null && !(sizer instanceof Declarable)) {
+        throw new IllegalArgumentException(
+            CliStrings.CREATE_REGION__MSG__OBJECT_SIZER_MUST_BE_OBJECTSIZER_AND_DECLARABLE);
+      }
+      factory.setEvictionAttributes(evictionAttributes);
-    if (regionCreateArgs.isSetDiskSynchronous()) {
+
+    if (regionCreateArgs.isDiskSynchronous() != null) {
-    if (regionCreateArgs.isSetOffHeap()) {
+    if (regionCreateArgs.isOffHeap() != null) {
-    // Set stats enabled
-    if (regionCreateArgs.isSetStatisticsEnabled()) {
+    if (regionCreateArgs.isStatisticsEnabled() != null) {
-    // Set conflation
-    if (regionCreateArgs.isSetEnableAsyncConflation()) {
+    if (regionCreateArgs.isEnableAsyncConflation() != null) {
-    if (regionCreateArgs.isSetEnableSubscriptionConflation()) {
+
+    if (regionCreateArgs.isEnableSubscriptionConflation() != null) {
-    // concurrency check enabled & concurrency level
-    if (regionCreateArgs.isSetConcurrencyChecksEnabled()) {
+    if (regionCreateArgs.isConcurrencyChecksEnabled() != null) {
-    if (regionCreateArgs.isSetConcurrencyLevel()) {
+
+    if (regionCreateArgs.getConcurrencyLevel() != null) {
-    // cloning enabled for delta
-    if (regionCreateArgs.isSetCloningEnabled()) {
+    if (regionCreateArgs.isCloningEnabled() != null) {
-    // multicast enabled for replication
-    if (regionCreateArgs.isSetMcastEnabled()) {
+    if (regionCreateArgs.isMcastEnabled() != null) {
-    if (regionCreateArgs.isSetCompressor()) {
+    if (regionCreateArgs.getCompressor() != null) {
+    // If a region path indicates a sub-region,
+    final String regionPath = regionCreateArgs.getRegionPath();
+    RegionPath regionPathData = new RegionPath(regionPath);
-
-    if (parentRegion != null) {
+    String parentRegionPath = regionPathData.getParent();
+    if (parentRegionPath != null && !Region.SEPARATOR.equals(parentRegionPath)) {
+      Region<?, ?> parentRegion = cache.getRegion(parentRegionPath);
-    if (partitionArgs.isSetPRLocalMaxMemory()) {
+    if (partitionArgs.getPrLocalMaxMemory() != null) {
-    if (partitionArgs.isSetPRTotalMaxMemory()) {
+    if (partitionArgs.getPrTotalMaxMemory() != null) {
-    if (partitionArgs.isSetPRTotalNumBuckets()) {
+    if (partitionArgs.getPrTotalNumBuckets() != null) {
-    if (partitionArgs.isSetPRRedundantCopies()) {
+    if (partitionArgs.getPrRedundantCopies() != null) {
-    if (partitionArgs.isSetPRRecoveryDelay()) {
+    if (partitionArgs.getPrRecoveryDelay() != null) {
-    if (partitionArgs.isSetPRStartupRecoveryDelay()) {
+    if (partitionArgs.getPrStartupRecoveryDelay() != null) {
-    if (regionCreateArgs.isPartitionResolverSet()) {
-      Class<PartitionResolver> partitionResolverClass = forName(
-          regionCreateArgs.getPartitionResolver(), CliStrings.CREATE_REGION__PARTITION_RESOLVER);
+    if (regionCreateArgs.getPartitionArgs().getPartitionResolver() != null) {
+      Class<PartitionResolver> partitionResolverClass =
+          forName(regionCreateArgs.getPartitionArgs().getPartitionResolver(),
+              CliStrings.CREATE_REGION__PARTITION_RESOLVER);
