Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

+import java.io.Serializable;
+import org.apache.shiro.subject.Subject;
-import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+import com.gemstone.gemfire.internal.security.IntegratedSecurityService;
+import com.gemstone.gemfire.internal.security.SecurityService;
-/***
- * 
- * since 7.0
+/**
+ * @since GemFire 7.0
-
+  private SecurityService securityService = IntegratedSecurityService.getSecurityService();
+
-    return get(key, keyClass, valueClass, regionName, loadOnCacheMiss);
+    return get(request.getPrincipal(), key, keyClass, valueClass, regionName, loadOnCacheMiss);
-    return select(query);
+    return select(request.getPrincipal(), query);
-  private DataCommandResult select(String queryString) {
+  private DataCommandResult select(Serializable principal, String queryString) {
+            // Post processing
+            object = this.securityService.postProcess(principal, null, null, object, false);
+
-  public DataCommandResult get(String key, String keyClass, String valueClass, String regionName, Boolean loadOnCacheMiss) {
+  public DataCommandResult get(Serializable principal, String key, String keyClass, String valueClass, String regionName, Boolean loadOnCacheMiss) {
+
+        // run it through post processor. region.get will return the deserialized object already, so we don't need to
+        // deserialize it anymore to pass it to the postProcessor
+        value = this.securityService.postProcess(principal, regionName, keyObject, value, false);
+
-      if(JsonUtil.isPrimitiveOrWrapper(klass))
+      if(JsonUtil.isPrimitiveOrWrapper(klass)) {
+      }
+    private SecurityService securityService = IntegratedSecurityService.getSecurityService();
+
-          GeodeSecurityUtil.authorizeRegionRead(region);
+          this.securityService.authorizeRegionRead(region);
+            Subject subject = this.securityService.getSubject();
+            if(subject!=null){
+              request.setPrincipal((Serializable)subject.getPrincipal());
+            }
-
-            // post process, iterate through the result for post processing
-            if(GeodeSecurityUtil.needPostProcess()) {
-              List<SelectResultRow> rows = dataResult.getSelectResult();
-              for (Iterator<SelectResultRow> itr = rows.iterator(); itr.hasNext(); ) {
-                SelectResultRow row = itr.next();
-                Object newValue = GeodeSecurityUtil.postProcess(null, null, row.getValue());
-                // user is not supposed to see this row
-                if (newValue == null) {
-                  itr.remove();
-                } else {
-                  row.setValue(newValue);
-                }
-              }
-            }
-
