Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.distributed.internal.ClusterConfigurationService;
-import org.apache.geode.distributed.internal.SharedConfiguration;
-  
+
-    return findJmxManager((JmxManagerLocatorRequest)request);
+    return findJmxManager((JmxManagerLocatorRequest) request);
-  public void restarting(DistributedSystem ds, GemFireCache cache, SharedConfiguration sharedConfig) {
-    this.cache = (GemFireCacheImpl)cache;
+  public void restarting(DistributedSystem ds, GemFireCache cache,
+      ClusterConfigurationService sharedConfig) {
+    this.cache = (GemFireCacheImpl) cache;
-    List<JmxManagerProfile> alreadyManaging = this.cache.getJmxManagerAdvisor().adviseAlreadyManaging();
+    List<JmxManagerProfile> alreadyManaging =
+        this.cache.getJmxManagerAdvisor().adviseAlreadyManaging();
-      List<JmxManagerProfile> willingToManage = this.cache.getJmxManagerAdvisor().adviseWillingToManage();
+      List<JmxManagerProfile> willingToManage =
+          this.cache.getJmxManagerAdvisor().adviseWillingToManage();
-                  // If this ever returns, rethrow the error.  We're poisoned
+                  // If this ever returns, rethrow the error. We're poisoned
-                while (sleepCount < 20 && alreadyManaging.isEmpty() && this.cache.getDistributionManager().getDistributionManagerIds().contains(p.getDistributedMember())) {
+                while (sleepCount < 20 && alreadyManaging.isEmpty()
+                    && this.cache.getDistributionManager().getDistributionManagerIds()
+                        .contains(p.getDistributedMember())) {
-    for (JmxManagerProfile p: willingToManage) {
+    for (JmxManagerProfile p : willingToManage) {
-    ArrayList<Object> resultContainer = (ArrayList<Object>)FunctionService.onMember(distributedMember).execute(new StartJmxManagerFunction()).getResult();
-    Object result = resultContainer.get(0);
-    if (result instanceof Boolean) {
-      return ((Boolean)result).booleanValue();
-    } else {
-      logger.info("Could not start jmx manager on {} because {}", distributedMember, result);
-      return false;
-    }
+      ArrayList<Object> resultContainer = (ArrayList<Object>) FunctionService
+          .onMember(distributedMember).execute(new StartJmxManagerFunction()).getResult();
+      Object result = resultContainer.get(0);
+      if (result instanceof Boolean) {
+        return ((Boolean) result).booleanValue();
+      } else {
+        logger.info("Could not start jmx manager on {} because {}", distributedMember, result);
+        return false;
+      }
-      if (!this.cache.getDistributionManager().getDistributionManagerIdsIncludingAdmin().contains(distributedMember)) {
+      if (!this.cache.getDistributionManager().getDistributionManagerIdsIncludingAdmin()
+          .contains(distributedMember)) {
-        logger.info("Could not start jmx manager on {} because of {}", distributedMember, ex.getMessage(), ex);
+        logger.info("Could not start jmx manager on {} because of {}", distributedMember,
+            ex.getMessage(), ex);
-  
+
-      
+
-      }catch (Exception e) {
-        context.getResultSender().lastResult(
-            "Exception in StartJmxManager =" + e.getMessage());
+      } catch (Exception e) {
+        context.getResultSender().lastResult("Exception in StartJmxManager =" + e.getMessage());
