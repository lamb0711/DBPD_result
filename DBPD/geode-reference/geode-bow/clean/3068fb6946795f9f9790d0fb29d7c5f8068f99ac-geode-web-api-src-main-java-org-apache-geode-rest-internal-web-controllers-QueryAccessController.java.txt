Merge remote-tracking branch 'origin/develop' into develop

+import org.apache.logging.log4j.Logger;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
-import org.apache.logging.log4j.Logger;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.bind.annotation.ResponseStatus;
+  @PreAuthorize("@securityService.authorize('DATA', 'READ')")
-    securityService.authorizeDataRead();
-    if (logger.isDebugEnabled()) {
-      logger.debug("Listing all parametrized Queries in GemFire...");
-    }
-    
+    logger.debug("Listing all parametrized Queries in GemFire...");
+
+  @PreAuthorize("@securityService.authorize('DATA', 'WRITE')")
-    securityService.authorizeDataWrite();
-    
-    if (logger.isDebugEnabled()) {
-      logger.debug("Creating a named, parametrized Query ({}) with ID ({})...", oqlStatement, queryId);
-    }
+    logger.debug("Creating a named, parametrized Query ({}) with ID ({})...", oqlStatement, queryId);
+
+  @PreAuthorize("@securityService.authorize('DATA', 'READ')")
-    securityService.authorizeDataRead();
-    if (logger.isDebugEnabled()) {
-      logger.debug("Running an adhoc Query ({})...", oql);
-    }
+    logger.debug("Running an adhoc Query ({})...", oql);
+
+  @PreAuthorize("@securityService.authorize('DATA', 'WRITE')")
-    securityService.authorizeDataWrite();
-    if (logger.isDebugEnabled()) {
-      logger.debug("Running named Query with ID ({})...", queryId);
-    }
+    logger.debug("Running named Query with ID ({})...", queryId);
+
+  @PreAuthorize("@securityService.authorize('DATA', 'WRITE')")
-    securityService.authorizeDataWrite();
-    if (logger.isDebugEnabled()) {
-      logger.debug("Updating a named, parametrized Query ({}) with ID ({})...", oqlStatement, queryId);
-    }
+    logger.debug("Updating a named, parametrized Query ({}) with ID ({})...", oqlStatement, queryId);
+
+  @PreAuthorize("@securityService.authorize('DATA', 'WRITE')")
-    securityService.authorizeDataWrite();
-    if (logger.isDebugEnabled()) {
-      logger.debug("Deleting a named, parametrized Query with ID ({}).", queryId);
-    }
-    
+    logger.debug("Deleting a named, parametrized Query with ID ({}).", queryId);
+
