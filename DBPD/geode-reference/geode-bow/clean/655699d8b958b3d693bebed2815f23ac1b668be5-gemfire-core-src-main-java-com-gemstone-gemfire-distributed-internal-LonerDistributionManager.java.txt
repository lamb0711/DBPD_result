Merge branch 'develop' into feature/GEODE-53

-import com.gemstone.gemfire.distributed.internal.membership.jgroup.GFJGBasicAdapter;
-import com.gemstone.gemfire.internal.logging.LogWriterImpl;
-import com.gemstone.org.jgroups.JChannel;
-    JChannel.setDefaultGFFunctions(new GFJGBasicAdapter());
-    this.viewMembers = new Vector(allIds);
+    this.viewMembers = new ArrayList<InternalDistributedMember>(allIds);
-  private final Vector viewMembers;// = new Vector(allIds);
+  private final List<InternalDistributedMember> viewMembers;
-  public Vector getViewMembers() {
+  
+  @Override
+  public List<InternalDistributedMember> getViewMembers() {
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
-    public int getDLockWaitsInProgress() {return 0;}
-    public int getDLockWaitsCompleted() {return 0;}
-    public long getDLockWaitTime() {return 0;}
-    public long startDLockWait() {return 0;}
-    public void endDLockWait(long start, boolean gotit) {}
-    public void incDLockVetosSent(int ops) {}
-    public void incDLockVetosReceived(int ops) {}
-    public void incDLockYesVotesSent(int ops) {}
-    public void incDLockYesVotesReceived(int ops) {}
-    public void incDLockNoVotesSent(int ops) {}
-    public void incDLockNoVotesReceived(int ops) {}
-    public void incDLockAbstainsSent(int ops) {}
-    public void incDLockAbstainsReceived(int ops) {}
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
-    public long startUcastWrite() { return 0; }
-    public void endUcastWrite(long start, int bytesWritten) {}
-    public void incUcastWrites(int bytesWritten) {}
-    public long startMcastWrite() { return 0; }
-    public void endMcastWrite(long start, int bytesWritten) {}
-    public void incMcastWrites(int bytesWritten) {}
+    @Override
+    public void incUcastWriteBytes(int bytesWritten) {}
+    @Override
+    public void incMcastWriteBytes(int bytesWritten) {}
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
-    public long startUcastFlush() { return 0; }
-    public void endUcastFlush(long start) {}
-    public void incFlowControlRequests() {}
-    public void incFlowControlResponses() {}
-    public long startFlowControlWait() { return 0; }
-    public void endFlowControlWait(long start) {}
-    public long startFlowControlThrottleWait() { return 0; }
-    public void endFlowControlThrottleWait(long start) {}
-    public void incUcastReadBytes(long amount) {}
-    public void incMcastReadBytes(long amount) {}
-    public void incJgUNICASTdataReceived(long amount) {}
-
-    public void setJgQueuedMessagesSize(long value) {}
-    public void setJgSTABLEreceivedMessagesSize(long value) {}
-    public void setJgSTABLEsentMessagesSize(long value) {}
-    public void incJgSTABLEsuspendTime(long value) {}
-    public void incJgSTABLEmessages(long value) {}
-    public void incJgSTABLEmessagesSent(long value) {}
-    public void incJgSTABILITYmessages(long value) {}
-
-    public void incjgDownTime(long value){}
-    public void incjgUpTime(long value){}
-    public void incjChannelUpTime(long value){}
-    
-    public void incThreadOwnedReceivers(long value, int dominoCount) {}
-
-    public void incJgFCsendBlocks(long value)
-    {}
-    public void incJgFCautoRequests(long value)
-    {}
-    public void incJgFCreplenish(long value)
-    {}
-    public void incJgFCresumes(long value)
-    {}
-    public void incJgFCsentCredits(long value)
-    {}
-    public void incJgFCsentThrottleRequests(long value)
-    {}
-    public void incJgFragmentationsPerformed()
-    {}
-    public void incJgFragmentsCreated(long numFrags)
-    {}
-    public void setJgUNICASTreceivedMessagesSize(long amount) {
-    }
-    public void setJgUNICASTsentMessagesSize(long amount) {
-    }
-    public void setJgUNICASTsentHighPriorityMessagesSize(long amount) {
-    }
+    @Override
+    public void incUcastReadBytes(int amount) {}
+    @Override
+    public void incMcastReadBytes(int amount) {}
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
-    public void incJgNAKACKwaits(long value) {}
-    public void incThreadOwnedReceivers(long value) {}
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
+    public void incThreadOwnedReceivers(long value, int dominoCount) {
+    }
-      MemberAttributes.setDefaults(lonerPort,
-              com.gemstone.gemfire.internal.OSProcess.getId(),
-              DistributionManager.LONER_DM_TYPE, -1,
-              name,
-              MemberAttributes.parseGroups(config.getRoles(), config.getGroups()), dac);
-      result = new InternalDistributedMember(host, lonerPort, name, uniqueString);
+      result = new InternalDistributedMember(host, lonerPort, name, uniqueString, DistributionManager.LONER_DM_TYPE,
+          MemberAttributes.parseGroups(config.getRoles(), config.getGroups()), dac);
-    MemberAttributes.setDefaults(lonerPort,
-        MemberAttributes.DEFAULT.getVmPid(),
-        DistributionManager.LONER_DM_TYPE,
-        -1,
-        MemberAttributes.DEFAULT.getName(),
-        MemberAttributes.DEFAULT.getGroups(), MemberAttributes.DEFAULT.getDurableClientAttributes());
-    value.add(this.getId().getIpAddress());
+    value.add(this.getId().getInetAddress());
