GEODE-6186: Reduced the number of EntryNotFoundExceptions thrown during wan conflation



+import static org.mockito.ArgumentMatchers.eq;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
+import org.apache.geode.cache.AttributesFactory;
+import org.apache.geode.cache.DataPolicy;
+import org.apache.geode.cache.EvictionAction;
+import org.apache.geode.cache.EvictionAttributes;
+import org.apache.geode.cache.PartitionAttributes;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.RegionAttributes;
+import org.apache.geode.cache.Scope;
+import org.apache.geode.internal.cache.BucketAdvisor;
+import org.apache.geode.internal.cache.BucketRegionQueue;
+import org.apache.geode.internal.cache.EvictionAttributesImpl;
+import org.apache.geode.internal.cache.InternalRegionArguments;
+import org.apache.geode.internal.cache.PartitionedRegion;
+import org.apache.geode.internal.cache.PartitionedRegionDataStore;
+import org.apache.geode.internal.cache.PartitionedRegionHelper;
+import org.apache.geode.internal.cache.PartitionedRegionStats;
+import org.apache.geode.internal.cache.ProxyBucketRegion;
+import org.apache.geode.internal.cache.eviction.AbstractEvictionController;
+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.partitioned.RegionAdvisor;
+  public static PartitionedRegion createMockQueueRegion(GemFireCacheImpl cache, String regionName) {
+    // Mock queue region
+    PartitionedRegion queueRegion = mock(PartitionedRegion.class);
+    when(queueRegion.getFullPath()).thenReturn(regionName);
+    when(queueRegion.getPrStats()).thenReturn(mock(PartitionedRegionStats.class));
+    when(queueRegion.getDataStore()).thenReturn(mock(PartitionedRegionDataStore.class));
+    when(queueRegion.getCache()).thenReturn(cache);
+    EvictionAttributesImpl ea = (EvictionAttributesImpl) EvictionAttributes
+        .createLRUMemoryAttributes(100, null, EvictionAction.OVERFLOW_TO_DISK);
+    EvictionController eviction = AbstractEvictionController.create(ea, false,
+        cache.getDistributedSystem(), "queueRegion");
+    when(queueRegion.getEvictionController()).thenReturn(eviction);
+    return queueRegion;
+  }
+
+  public static BucketRegionQueue createBucketRegionQueue(GemFireCacheImpl cache,
+      PartitionedRegion parentRegion, PartitionedRegion queueRegion, int bucketId) {
+    // Create InternalRegionArguments
+    InternalRegionArguments ira = new InternalRegionArguments();
+    ira.setPartitionedRegion(queueRegion);
+    ira.setPartitionedRegionBucketRedundancy(1);
+    BucketAdvisor ba = mock(BucketAdvisor.class);
+    ira.setBucketAdvisor(ba);
+    InternalRegionArguments pbrIra = new InternalRegionArguments();
+    RegionAdvisor ra = mock(RegionAdvisor.class);
+    when(ra.getPartitionedRegion()).thenReturn(queueRegion);
+    pbrIra.setPartitionedRegionAdvisor(ra);
+    PartitionAttributes pa = mock(PartitionAttributes.class);
+    when(queueRegion.getPartitionAttributes()).thenReturn(pa);
+
+    when(queueRegion.getBucketName(eq(bucketId))).thenAnswer(new Answer<String>() {
+      @Override
+      public String answer(final InvocationOnMock invocation) throws Throwable {
+        return PartitionedRegionHelper.getBucketName(queueRegion.getFullPath(), bucketId);
+      }
+    });
+
+    when(queueRegion.getDataPolicy()).thenReturn(DataPolicy.PARTITION);
+
+    when(pa.getColocatedWith()).thenReturn(null);
+
+    when(ba.getProxyBucketRegion()).thenReturn(mock(ProxyBucketRegion.class));
+
+    // Create RegionAttributes
+    AttributesFactory factory = new AttributesFactory();
+    factory.setScope(Scope.DISTRIBUTED_ACK);
+    factory.setDataPolicy(DataPolicy.REPLICATE);
+    factory.setEvictionAttributes(
+        EvictionAttributes.createLRUMemoryAttributes(100, null, EvictionAction.OVERFLOW_TO_DISK));
+    RegionAttributes attributes = factory.create();
+
+    // Create BucketRegionQueue
+    return new BucketRegionQueue(
+        queueRegion.getBucketName(bucketId), attributes, parentRegion, cache, ira);
+  }
+
+  public static String getRegionQueueName(String gatewaySenderId) {
+    return Region.SEPARATOR + gatewaySenderId + ParallelGatewaySenderQueue.QSTRING;
+  }
+
