Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This message is used be a replicate region to send a contains key/value request
- * to another peer.
+ * This message is used be a replicate region to send a contains key/value request to another peer.
+ * 
-public final class RemoteContainsKeyValueMessage extends RemoteOperationMessageWithDirectReply
-  {
+public final class RemoteContainsKeyValueMessage extends RemoteOperationMessageWithDirectReply {
-  
+
-  public RemoteContainsKeyValueMessage() {
-  }
+  public RemoteContainsKeyValueMessage() {}
-   * {@link org.apache.geode.cache.Region#containsValueForKey(Object)}
-   * depending on the <code>valueCheck</code> argument
+   * {@link org.apache.geode.cache.Region#containsValueForKey(Object)} depending on the
+   * <code>valueCheck</code> argument
-   * @param recipient
-   *          the member that the contains keys/value message is sent to
-   * @param r
-   *          the LocalRegion
-   * @param key
-   *          the key to be queried
-   * @param valueCheck
-   *          true if
-   *          {@link org.apache.geode.cache.Region#containsValueForKey(Object)}
-   *          is desired, false if
-   *          {@link org.apache.geode.cache.Region#containsKey(Object)}is
-   *          desired
+   * @param recipient the member that the contains keys/value message is sent to
+   * @param r the LocalRegion
+   * @param key the key to be queried
+   * @param valueCheck true if {@link org.apache.geode.cache.Region#containsValueForKey(Object)} is
+   *        desired, false if {@link org.apache.geode.cache.Region#containsKey(Object)}is desired
-      LocalRegion r, Object key, boolean valueCheck)
-      throws RemoteOperationException {
+      LocalRegion r, Object key, boolean valueCheck) throws RemoteOperationException {
-    RemoteContainsKeyValueResponse p = new RemoteContainsKeyValueResponse(r.getSystem(),
-        Collections.singleton(recipient), key);
-    RemoteContainsKeyValueMessage m = new RemoteContainsKeyValueMessage(recipient, r.getFullPath(), p, key, valueCheck);
+    RemoteContainsKeyValueResponse p =
+        new RemoteContainsKeyValueResponse(r.getSystem(), Collections.singleton(recipient), key);
+    RemoteContainsKeyValueMessage m =
+        new RemoteContainsKeyValueMessage(recipient, r.getFullPath(), p, key, valueCheck);
-  protected boolean operateOnRegion(DistributionManager dm,
-      LocalRegion r, long startTime) throws CacheException,
-      RemoteOperationException
-  {
+  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+      throws CacheException, RemoteOperationException {
-      logger.trace(LogMarker.DM, "DistributedRemoteContainsKeyValueMessage operateOnRegion: {}", r.getFullPath());
+      logger.trace(LogMarker.DM, "DistributedRemoteContainsKeyValueMessage operateOnRegion: {}",
+          r.getFullPath());
-    
-    if ( ! (r instanceof PartitionedRegion) ) {  // prs already wait on initialization
+
+    if (!(r instanceof PartitionedRegion)) { // prs already wait on initialization
-        if (this.valueCheck) {
-          replyVal = r.containsValueForKey(this.key);
-        } else {
-          replyVal = r.containsKey(this.key);
-        }
+    if (this.valueCheck) {
+      replyVal = r.containsValueForKey(this.key);
+    } else {
+      replyVal = r.containsKey(this.key);
+    }
-      if (logger.isTraceEnabled(LogMarker.DM)) {
-        logger.debug("DistributedRemoteContainsKeyValueMessage sending reply back using processorId: {}",getProcessorId());
-      }
+    if (logger.isTraceEnabled(LogMarker.DM)) {
+      logger.debug(
+          "DistributedRemoteContainsKeyValueMessage sending reply back using processorId: {}",
+          getProcessorId());
+    }
-      //r.getPrStats().endPartitionMessagesProcessing(startTime); 
-      RemoteContainsKeyValueReplyMessage.send(getSender(), getProcessorId(), getReplySender(dm),
-          replyVal);
+    // r.getPrStats().endPartitionMessagesProcessing(startTime);
+    RemoteContainsKeyValueReplyMessage.send(getSender(), getProcessorId(), getReplySender(dm),
+        replyVal);
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-    buff.append("; valueCheck=").append(this.valueCheck).append("; key=")
-        .append(this.key);
+    buff.append("; valueCheck=").append(this.valueCheck).append("; key=").append(this.key);
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-    if (this.valueCheck) flags |= VALUE_CHECK;
+    if (this.valueCheck)
+      flags |= VALUE_CHECK;
-  public static final class RemoteContainsKeyValueReplyMessage extends
-      ReplyMessage
-   {
+  public static final class RemoteContainsKeyValueReplyMessage extends ReplyMessage {
-    public RemoteContainsKeyValueReplyMessage() {
-    }
+    public RemoteContainsKeyValueReplyMessage() {}
-    private RemoteContainsKeyValueReplyMessage(int processorId,
-        boolean containsKeyValue) {
+    private RemoteContainsKeyValueReplyMessage(int processorId, boolean containsKeyValue) {
-        ReplySender replySender, boolean containsKeyValue)
-    {
-      Assert.assertTrue(recipient != null,
-          "ContainsKeyValueReplyMessage NULL reply message");
-      RemoteContainsKeyValueReplyMessage m = new RemoteContainsKeyValueReplyMessage(
-          processorId, containsKeyValue);
+        ReplySender replySender, boolean containsKeyValue) {
+      Assert.assertTrue(recipient != null, "ContainsKeyValueReplyMessage NULL reply message");
+      RemoteContainsKeyValueReplyMessage m =
+          new RemoteContainsKeyValueReplyMessage(processorId, containsKeyValue);
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, ReplyProcessor21 processor) {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-    public String toString()
-    {
+    public String toString() {
-      sb.append("ContainsKeyValueReplyMessage ").append(
-          "processorid=").append(this.processorId).append(" reply to sender ")
-          .append(this.getSender()).append(" returning containsKeyValue=")
-          .append(doesItContainKeyValue());
+      sb.append("ContainsKeyValueReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender())
+          .append(" returning containsKeyValue=").append(doesItContainKeyValue());
-    public boolean doesItContainKeyValue()
-    {
+    public boolean doesItContainKeyValue() {
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.RemoteContainsKeyValueMessage.RemoteContainsKeyValueReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.RemoteContainsKeyValueMessage.RemoteContainsKeyValueReplyMessage}
-  public static class RemoteContainsKeyValueResponse extends RemoteOperationResponse
-   {
+  public static class RemoteContainsKeyValueResponse extends RemoteOperationResponse {
-    public RemoteContainsKeyValueResponse(InternalDistributedSystem ds,
-        Set recipients, Object key) {
+    public RemoteContainsKeyValueResponse(InternalDistributedSystem ds, Set recipients,
+        Object key) {
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-          RemoteContainsKeyValueReplyMessage reply = (RemoteContainsKeyValueReplyMessage)msg;
+          RemoteContainsKeyValueReplyMessage reply = (RemoteContainsKeyValueReplyMessage) msg;
-            logger.trace(LogMarker.DM, "ContainsKeyValueResponse return value is {}", this.returnValue);
+            logger.trace(LogMarker.DM, "ContainsKeyValueResponse return value is {}",
+                this.returnValue);
-      }
-      finally {
+      } finally {
-     * @throws PrimaryBucketException if the instance of the bucket that received this operation was not primary
+     * @throws PrimaryBucketException if the instance of the bucket that received this operation was
+     *         not primary
-    public boolean waitForContainsResult() throws PrimaryBucketException,
-        RemoteOperationException {
+    public boolean waitForContainsResult() throws PrimaryBucketException, RemoteOperationException {
-      }
-      catch (RemoteOperationException rce) {
+      } catch (RemoteOperationException rce) {
-      }
-      catch (PrimaryBucketException pbe) {
+      } catch (PrimaryBucketException pbe) {
-      }
-      catch (RegionDestroyedException e) {
+      } catch (RegionDestroyedException e) {
-      }
-      catch (CacheException ce) {
+      } catch (CacheException ce) {
-        throw new RemoteOperationException(LocalizedStrings.RemoteContainsKeyValueMessage_CONTAINSKEYVALUERESPONSE_GOT_REMOTE_CACHEEXCEPTION.toLocalizedString(), ce);
+        throw new RemoteOperationException(
+            LocalizedStrings.RemoteContainsKeyValueMessage_CONTAINSKEYVALUERESPONSE_GOT_REMOTE_CACHEEXCEPTION
+                .toLocalizedString(),
+            ce);
-        throw new RemoteOperationException(LocalizedStrings.RemoteContainsKeyValueMessage_NO_RETURN_VALUE_RECEIVED.toLocalizedString());
+        throw new RemoteOperationException(
+            LocalizedStrings.RemoteContainsKeyValueMessage_NO_RETURN_VALUE_RECEIVED
+                .toLocalizedString());
