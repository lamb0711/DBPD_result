Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.InternalGemFireError;
-import com.gemstone.org.jgroups.stack.GFBasicAdapter;
+import com.gemstone.org.jgroups.spi.GFBasicAdapter;
+import com.gemstone.org.jgroups.util.ExternalStrings;
-    return DataSerializer.readObject(in);
+    try {
+      return DataSerializer.readObject(in);
+    } catch (InternalGemFireError e) {
+      throw new IOException(e.getMessage(), e);
+    }
+  
+  static boolean DEBUG_SERIALIZATION = false;
+    GemFireTracer log = GemFireTracer.getLog(GFJGBasicAdapter.class);
+    if (DEBUG_SERIALIZATION) {
+      log.info("wrote version " + serVersion);
+    }
+    if (DEBUG_SERIALIZATION) {
+      log.info("wrote leading byte " + leading);
+    }
+           if (DEBUG_SERIALIZATION) {
+             log.info("wrote Ipaddress " + msg.getSrc());
+           }
+            if (DEBUG_SERIALIZATION) {
+              log.info("wrote address using Util " + msg.getSrc());
+            }
+    if (DEBUG_SERIALIZATION) {
+      log.info("wrote gfFlags " + gfFlags);
+    }
-        out.writeInt(msg.getLength()-msg.getOffset());
-        out.write(msg.getRawBuffer(), msg.getOffset(), msg.getLength());
+        int length = msg.getLength();
+        out.writeInt(length);
+        out.write(msg.getRawBuffer(), msg.getOffset(), length);
+        if (DEBUG_SERIALIZATION) {
+          log.info("wrote " + length + " payload bytes");
+        }
-//    if (log.isTraceEnabled()) {
-//      log.trace("writing " + size + " headers");
-//    }
+    if (DEBUG_SERIALIZATION) {
+      log.info("writing " + size + " headers");
+    }
-//        if (log.isTraceEnabled()) {
-//          log.trace("writing header " + entry.getKey() + " length=" + headerBytes.length);
-//        }
+        if (DEBUG_SERIALIZATION) {
+          log.info("writing header " + entry.getKey() + " length=" + headerBytes.length);
+        }
+    GemFireTracer log = GemFireTracer.getLog(GFJGBasicAdapter.class);
+
+    if (DEBUG_SERIALIZATION) {
+      log.info("read version " + sv);
+    }
+    if (DEBUG_SERIALIZATION) {
+      log.info("read leading byte " + leading);
+    }
+              if (DEBUG_SERIALIZATION) {
+                log.info("read src_addr " + src_addr);
+              }
+            if (DEBUG_SERIALIZATION) {
+              log.info("read address using Util " + msg.getSrc());
+            }
+    if (DEBUG_SERIALIZATION) {
+      log.info("read gfFlags " + gfFlags);
+    }
+        if (65535 < len  ||  len < 0) {
+          String sender = msg.getSrc() != null?  msg.getSrc().toString() : "(unknown sender)";
+          log.getLogWriter().warning(ExternalStrings.CORRUPTED_MESSAGE_RECEIVED, sender);
+          throw new IOException(ExternalStrings.CORRUPTED_MESSAGE_RECEIVED.toLocalizedString(sender));
+        }
+        if (DEBUG_SERIALIZATION) {
+          log.info("reading " + len + " payload bytes");
+        }
+    if (DEBUG_SERIALIZATION) {
+      log.info("reading " + len + " headers");
+    }
-//        if (log.isTraceEnabled()) {
-//          log.trace("reading header " + hdr_name + " of length " + hlen);
-//        }
+        if (DEBUG_SERIALIZATION) {
+          log.info("reading header " + hdr_name + " of length " + hlen);
+        }
-//          if (log.isTraceEnabled()) {
-//            log.trace("read " + hdr.toString());
-//          }
+          if (DEBUG_SERIALIZATION) {
+            log.info("read " + hdr.toString());
+          }
-          GemFireTracer log = GemFireTracer.getLog(getClass());
+          log = GemFireTracer.getLog(getClass());
