GEODE-3096: pulling in refactoring work on HttpOperationInvoker

* Use HttpOperationInvoker to replace RestHttpOperationInvoker and SimpleHttpOperationInvoker
* Use one single ShellCommandController to replace all command controllers
* do not allow execution of commands that require client side file data gathering to be executed only on the locator/server
* deprecate CommandService and CommandStatement
* simplify CommandRequest, delete geode's ClientHttpRequest
* fix tests

+import static org.apache.geode.management.internal.web.controllers.AbstractMultiPartCommandsController.RESOURCES_REQUEST_PARAMETER;
+
+import java.io.FileInputStream;
+import java.nio.file.Path;
+import org.apache.commons.io.FileUtils;
+import org.springframework.core.io.InputStreamResource;
+import org.springframework.http.HttpHeaders;
+import org.springframework.web.multipart.MultipartFile;
-import org.apache.geode.management.internal.cli.i18n.CliStrings;
-import org.apache.geode.management.internal.web.domain.Link;
-import org.apache.geode.management.internal.web.domain.LinkIndex;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.internal.cli.result.CommandResult;
+import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.web.http.HttpMethod;
+import org.apache.geode.management.internal.web.util.ConvertUtils;
-  @RequestMapping(method = RequestMethod.POST, value = "/management/commands", params = "cmd")
-  @ResponseBody
-  public String command(@RequestParam("cmd") final String command) {
-    return processCommand(decode(command));
+  @RequestMapping(method = {RequestMethod.GET, RequestMethod.POST}, value = "/management/commands")
+  public ResponseEntity<InputStreamResource> command(@RequestParam(value = "cmd") String command,
+      @RequestParam(value = RESOURCES_REQUEST_PARAMETER,
+          required = false) MultipartFile[] fileResource)
+      throws IOException {
+    String result =
+        processCommand(decode(command), getEnvironment(), ConvertUtils.convert(fileResource));
+    return getResponse(result);
+  }
+
+  ResponseEntity<InputStreamResource> getResponse(String result) {
+    // the result is json string from CommandResult
+    CommandResult commandResult = ResultBuilder.fromJson(result);
+
+    if (commandResult.getStatus().equals(Result.Status.OK) && commandResult.hasFileToDownload()) {
+      return getFileDownloadResponse(commandResult);
+    } else {
+      return getJsonResponse(result);
+    }
+  }
+
+  private ResponseEntity<InputStreamResource> getJsonResponse(String result) {
+    HttpHeaders respHeaders = new HttpHeaders();
+    InputStreamResource isr;// if the command is successful, the output is the filepath,
+    // else we need to send the orignal result back so that the receiver will know to turn it
+    // into a Result object
+    try {
+      isr = new InputStreamResource(org.apache.commons.io.IOUtils.toInputStream(result, "UTF-8"));
+      respHeaders.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);
+      return new ResponseEntity<>(isr, respHeaders, HttpStatus.OK);
+    } catch (Exception e) {
+      throw new RuntimeException("IO Error writing file to output stream", e);
+    }
+  }
+
+  private ResponseEntity<InputStreamResource> getFileDownloadResponse(CommandResult commandResult) {
+    HttpHeaders respHeaders = new HttpHeaders();
+    InputStreamResource isr;// if the command is successful, the output is the filepath,
+
+    Path filePath = commandResult.getFileToDownload();
+    try {
+      isr = new InputStreamResource(new FileInputStream(filePath.toFile()));
+      respHeaders.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);
+      return new ResponseEntity<>(isr, respHeaders, HttpStatus.OK);
+    } catch (Exception e) {
+      throw new RuntimeException("IO Error writing file to output stream", e);
+    } finally {
+      FileUtils.deleteQuietly(filePath.toFile());
+    }
-  /**
-   * Gets a link index for the web service endpoints and REST API calls in GemFire for management
-   * and monitoring using GemFire shell (Gfsh).
-   * 
-   * @return a LinkIndex containing Links for all web service endpoints, REST API calls in GemFire.
-   * @see org.apache.geode.management.internal.cli.i18n.CliStrings
-   * @see AbstractCommandsController#toUri(String, String)
-   * @see org.apache.geode.management.internal.web.domain.Link
-   * @see org.apache.geode.management.internal.web.domain.LinkIndex
-   * @see org.apache.geode.management.internal.web.http.HttpMethod
-   */
-  @RequestMapping(method = RequestMethod.GET, value = "/index",
-      produces = MediaType.APPLICATION_XML_VALUE)
-  @ResponseBody
-  public LinkIndex index(@RequestParam(value = "scheme", required = false,
-      defaultValue = "http") final String scheme) {
-    return new LinkIndex()
-        // Cluster Commands
-        .add(new Link(CliStrings.STATUS_SHARED_CONFIG, toUri("/services/cluster-config", scheme)))
-        // Member Commands
-        .add(new Link(CliStrings.LIST_MEMBER, toUri("/members", scheme)))
-        .add(new Link(CliStrings.DESCRIBE_MEMBER, toUri("/members/{name}", scheme)))
-        // Region Commands
-        .add(new Link(CliStrings.LIST_REGION, toUri("/regions", scheme)))
-        .add(new Link(CliStrings.DESCRIBE_REGION, toUri("/regions/{name}", scheme)))
-        .add(new Link(CliStrings.ALTER_REGION, toUri("/regions/{name}", scheme), HttpMethod.PUT))
-        .add(new Link(CliStrings.CREATE_REGION, toUri("/regions", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.DESTROY_REGION, toUri("/regions/{name}", scheme),
-            HttpMethod.DELETE))
-        // Index Commands
-        .add(new Link(CliStrings.LIST_INDEX, toUri("/indexes", scheme)))
-        .add(new Link(CliStrings.CLEAR_DEFINED_INDEXES, toUri("/indexes?op=clear-defined", scheme),
-            HttpMethod.DELETE))
-        .add(new Link(CliStrings.CREATE_INDEX, toUri("/indexes", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.CREATE_DEFINED_INDEXES,
-            toUri("/indexes?op=create-defined", scheme), HttpMethod.POST))
-        .add(
-            new Link(CliStrings.DEFINE_INDEX, toUri("/indexes?op=define", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.DESTROY_INDEX, toUri("/indexes", scheme), HttpMethod.DELETE))
-        .add(
-            new Link(CliStrings.DESTROY_INDEX, toUri("/indexes/{name}", scheme), HttpMethod.DELETE))
-        // Data Commands
-        .add(new Link(CliStrings.GET, toUri("/regions/{region}/data", scheme), HttpMethod.GET))
-        .add(new Link(CliStrings.PUT, toUri("/regions/{region}/data", scheme), HttpMethod.PUT))
-        .add(
-            new Link(CliStrings.REMOVE, toUri("/regions/{region}/data", scheme), HttpMethod.DELETE))
-        .add(new Link(CliStrings.EXPORT_DATA,
-            toUri("/members/{member}/regions/{region}/data", scheme), HttpMethod.GET))
-        .add(new Link(CliStrings.IMPORT_DATA,
-            toUri("/members/{member}/regions/{region}/data", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.LOCATE_ENTRY, toUri("/regions/{region}/data/location", scheme),
-            HttpMethod.GET))
-        .add(new Link(CliStrings.QUERY, toUri("/regions/data/query", scheme), HttpMethod.GET))
-        .add(new Link(CliStrings.REBALANCE, toUri("/regions/data?op=rebalance", scheme),
-            HttpMethod.POST))
-        // Function Commands
-        .add(new Link(CliStrings.LIST_FUNCTION, toUri("/functions", scheme)))
-        .add(new Link(CliStrings.DESTROY_FUNCTION, toUri("/functions/{id}", scheme),
-            HttpMethod.DELETE))
-        .add(new Link(CliStrings.EXECUTE_FUNCTION, toUri("/functions/{id}", scheme),
-            HttpMethod.POST))
-        // Client Commands
-        .add(new Link(CliStrings.LIST_CLIENTS, toUri("/clients", scheme)))
-        .add(new Link(CliStrings.DESCRIBE_CLIENT, toUri("/clients/{clientID}", scheme)))
-        // Config Commands
-        .add(new Link(CliStrings.ALTER_RUNTIME_CONFIG, toUri("/config", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.DESCRIBE_CONFIG, toUri("/members/{member}/config", scheme)))
-        .add(new Link(CliStrings.EXPORT_CONFIG, toUri("/config", scheme)))
-        .add(new Link(CliStrings.EXPORT_SHARED_CONFIG, toUri("/config/cluster", scheme)))
-        .add(new Link(CliStrings.IMPORT_SHARED_CONFIG, toUri("/config/cluster", scheme),
-            HttpMethod.POST))
-        // Deploy Commands
-        .add(new Link(CliStrings.LIST_DEPLOYED, toUri("/deployed", scheme)))
-        .add(new Link(CliStrings.DEPLOY, toUri("/deployed", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.UNDEPLOY, toUri("/deployed", scheme), HttpMethod.DELETE))
-        // Disk Store Commands
-        .add(new Link(CliStrings.LIST_DISK_STORE, toUri("/diskstores", scheme)))
-        .add(new Link(CliStrings.BACKUP_DISK_STORE, toUri("/diskstores?op=backup", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.COMPACT_DISK_STORE, toUri("/diskstores/{name}?op=compact", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.CREATE_DISK_STORE, toUri("/diskstores", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.DESCRIBE_DISK_STORE, toUri("/diskstores/{name}", scheme)))
-        .add(new Link(CliStrings.DESTROY_DISK_STORE, toUri("/diskstores/{name}", scheme),
-            HttpMethod.DELETE))
-        .add(new Link(CliStrings.REVOKE_MISSING_DISK_STORE,
-            toUri("/diskstores/{id}?op=revoke", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.SHOW_MISSING_DISK_STORE, toUri("/diskstores/missing", scheme)))
-        // Durable Client Commands
-        .add(new Link(CliStrings.LIST_DURABLE_CQS,
-            toUri("/durable-clients/{durable-client-id}/cqs", scheme)))
-        .add(new Link(CliStrings.COUNT_DURABLE_CQ_EVENTS,
-            toUri("/durable-clients/{durable-client-id}/cqs/events", scheme)))
-        .add(new Link(CliStrings.COUNT_DURABLE_CQ_EVENTS,
-            toUri("/durable-clients/{durable-client-id}/cqs/{durable-cq-name}/events", scheme)))
-        .add(new Link(CliStrings.CLOSE_DURABLE_CLIENTS,
-            toUri("/durable-clients/{durable-client-id}?op=close", scheme), HttpMethod.POST))
-        .add(
-            new Link(CliStrings.CLOSE_DURABLE_CQS,
-                toUri("/durable-clients/{durable-client-id}/cqs/{durable-cq-name}?op=close",
-                    scheme),
-                HttpMethod.POST))
-        // Launcher Lifecycle Commands
-        .add(new Link(CliStrings.STATUS_LOCATOR, toUri("/members/{name}/locator", scheme)))
-        .add(new Link(CliStrings.STATUS_SERVER, toUri("/members/{name}/server", scheme)))
-        // Miscellaneous Commands
-        .add(new Link(CliStrings.CHANGE_LOGLEVEL, toUri("/groups/{groups}/loglevel", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.CHANGE_LOGLEVEL, toUri("/members/{members}/loglevel", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.CHANGE_LOGLEVEL,
-            toUri("/members/{members}/groups/{groups}/loglevel", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.EXPORT_LOGS, toUri("/logs", scheme)))
-        .add(new Link(CliStrings.EXPORT_STACKTRACE, toUri("/stacktraces", scheme)))
-        .add(new Link(CliStrings.GC, toUri("/gc", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.GC, toUri("/members/{member}/gc", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.NETSTAT, toUri("/netstat", scheme)))
-        .add(new Link(CliStrings.SHOW_DEADLOCK, toUri("/deadlocks", scheme)))
-        .add(new Link(CliStrings.SHOW_LOG, toUri("/members/{member}/log", scheme)))
-        .add(new Link(CliStrings.SHOW_METRICS, toUri("/metrics", scheme)))
-        .add(new Link(CliStrings.SHUTDOWN, toUri("/shutdown", scheme), HttpMethod.POST)) // verb!
-        // Queue Commands
-        .add(new Link(CliStrings.CREATE_ASYNC_EVENT_QUEUE, toUri("/async-event-queues", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.LIST_ASYNC_EVENT_QUEUES, toUri("/async-event-queues", scheme)))
-        // PDX Commands
-        .add(new Link(CliStrings.CONFIGURE_PDX, toUri("/pdx", scheme), HttpMethod.POST))
-        // .add(new Link(CliStrings.PDX_DELETE_FIELD, toUri("/pdx/type/field"), HttpMethod.DELETE))
-        .add(new Link(CliStrings.PDX_RENAME, toUri("/pdx/type", scheme), HttpMethod.POST))
-        // Shell Commands
-        .add(new Link(MBEAN_ATTRIBUTE_LINK_RELATION, toUri("/mbean/attribute", scheme)))
-        .add(new Link(MBEAN_OPERATION_LINK_RELATION, toUri("/mbean/operation", scheme),
-            HttpMethod.POST))
-        .add(new Link(MBEAN_QUERY_LINK_RELATION, toUri("/mbean/query", scheme), HttpMethod.POST))
-        .add(new Link(PING_LINK_RELATION, toUri("/ping", scheme), HttpMethod.GET))
-        .add(new Link(CliStrings.VERSION, toUri("/version", scheme)))
-        // WAN Gateway Commands
-        .add(new Link(CliStrings.LIST_GATEWAY, toUri("/gateways", scheme)))
-        .add(new Link(CliStrings.CREATE_GATEWAYRECEIVER, toUri("/gateways/receivers", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.CREATE_GATEWAYSENDER, toUri("/gateways/senders", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.DESTROY_GATEWAYSENDER, toUri("/gateways/senders/{id}", scheme),
-            HttpMethod.DELETE))
-        .add(new Link(CliStrings.LOAD_BALANCE_GATEWAYSENDER,
-            toUri("/gateways/senders/{id}?op=load-balance", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.PAUSE_GATEWAYSENDER,
-            toUri("/gateways/senders/{id}?op=pause", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.RESUME_GATEWAYSENDER,
-            toUri("/gateways/senders/{id}?op=resume", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.START_GATEWAYRECEIVER,
-            toUri("/gateways/receivers?op=start", scheme), HttpMethod.POST))
-        .add(new Link(CliStrings.START_GATEWAYSENDER, toUri("/gateways/senders?op=start", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.STATUS_GATEWAYRECEIVER, toUri("/gateways/receivers", scheme)))
-        .add(new Link(CliStrings.STATUS_GATEWAYSENDER, toUri("/gateways/senders/{id}", scheme)))
-        .add(new Link(CliStrings.STOP_GATEWAYRECEIVER, toUri("/gateways/receivers?op=stop", scheme),
-            HttpMethod.POST))
-        .add(new Link(CliStrings.STOP_GATEWAYSENDER,
-            toUri("/gateways/senders/{id}?op=stop", scheme), HttpMethod.POST));
-  }
-
-    return new ResponseEntity<>("<html><body><h1>Mischief Managed!</h1></body></html>",
-        HttpStatus.OK);
+    return new ResponseEntity<>("pong", HttpStatus.OK);
