GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

-public class RedisSetCommandsFunctionExecutor implements RedisSetCommands {
+/**
+ * This class is used by netty redis set command executors
+ * to invoke a geode function that will run on a
+ * particular server to do the redis command.
+ */
+public class RedisSetCommandsFunctionInvoker implements RedisSetCommands {
-  public RedisSetCommandsFunctionExecutor(Region<ByteArrayWrapper, RedisData> region) {
+  public RedisSetCommandsFunctionInvoker(Region<ByteArrayWrapper, RedisData> region) {
-    return CommandFunction.execute(SADD, key, membersToAdd, region);
+    return CommandFunction.invoke(SADD, key, membersToAdd, region);
-    return CommandFunction.execute(SREM, key, membersToRemove, region);
+    return CommandFunction.invoke(SREM, key, membersToRemove, region);
-    return CommandFunction.execute(SMEMBERS, key, null, region);
+    return CommandFunction.invoke(SMEMBERS, key, null, region);
-    return CommandFunction.execute(SCARD, key, null, region);
+    return CommandFunction.invoke(SCARD, key, null, region);
-    return CommandFunction.execute(SISMEMBER, key, member, region);
+    return CommandFunction.invoke(SISMEMBER, key, member, region);
-    return CommandFunction.execute(SRANDMEMBER, key, count, region);
+    return CommandFunction.invoke(SRANDMEMBER, key, count, region);
-    return CommandFunction.execute(SPOP, key, popCount, region);
+    return CommandFunction.invoke(SPOP, key, popCount, region);
-    return CommandFunction.execute(SSCAN, key, new Object[] {matchPattern, count, cursor}, region);
+    return CommandFunction.invoke(SSCAN, key, new Object[] {matchPattern, count, cursor}, region);
-    return CommandFunction.execute(SUNIONSTORE, destination, setKeys, region);
+    return CommandFunction.invoke(SUNIONSTORE, destination, setKeys, region);
-    return CommandFunction.execute(SINTERSTORE, destination, setKeys, region);
+    return CommandFunction.invoke(SINTERSTORE, destination, setKeys, region);
-    return CommandFunction.execute(SDIFFSTORE, destination, setKeys, region);
+    return CommandFunction.invoke(SDIFFSTORE, destination, setKeys, region);
