Merge branch 'feature/GEODE-1571' of ssh://github.com/jinmeiliao/incubator-geode into feature/GEODE-1571

+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+
+import com.gemstone.gemfire.cache.execute.Execution;
-import com.gemstone.gemfire.cache.lucene.LuceneQueryResults;
+import com.gemstone.gemfire.cache.lucene.LuceneResultStruct;
+import com.gemstone.gemfire.cache.lucene.PageableLuceneQueryResults;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.EntryScore;
-  public LuceneQueryResults<K, V> search() throws LuceneQueryException {
+  public Collection<K> findKeys() throws LuceneQueryException {
+    TopEntries<K> entries = findTopEntries();
+    final List<EntryScore<K>> hits = entries.getHits();
+
+    return hits.stream()
+      .map(hit -> hit.getKey())
+      .collect(Collectors.toList());
+  }
+
+  @Override
+  public Collection<V> findValues() throws LuceneQueryException {
+    final List<LuceneResultStruct<K, V>> page = findResults();
+
+    return page.stream()
+      .map(entry -> entry.getValue())
+      .collect(Collectors.toList());
+  }
+
+  @Override
+  public List<LuceneResultStruct<K, V>> findResults() throws LuceneQueryException {
+    PageableLuceneQueryResults<K, V> pages = findPages(0);
+    if(!pages.hasNext()) {
+      return Collections.emptyList();
+    }
+
+    return pages.next();
+  }
+
+  @Override
+  public PageableLuceneQueryResults<K, V> findPages() throws LuceneQueryException {
+    return findPages(pageSize);
+  }
+
+  private PageableLuceneQueryResults<K, V> findPages(int pageSize) throws LuceneQueryException {
+    TopEntries<K> entries = findTopEntries();
+    return new PageableLuceneQueryResultsImpl<K, V>(entries.getHits(), region, pageSize);
+  }
+
+  private TopEntries<K> findTopEntries() throws LuceneQueryException {
-    ResultCollector<TopEntriesCollector, TopEntries> rc = (ResultCollector<TopEntriesCollector, TopEntries>) FunctionService.onRegion(region)
+    ResultCollector<TopEntriesCollector, TopEntries<K>> rc = (ResultCollector<TopEntriesCollector, TopEntries<K>>) onRegion()
-    
+
+    TopEntries<K> entries;
-      TopEntries entries = rc.getResult();
-      return new LuceneQueryResultsImpl<K, V>(entries.getHits(), region, pageSize);
+      entries = rc.getResult();
+    return entries;
+  }
+
+  protected Execution onRegion() {
+    return FunctionService.onRegion(region);
