Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The primary request message signals bucket owners to re-select the 
- * primary owner of the bucket.  It is sent by client threads which need
- * to use the bucket, however do not know of its primary location.
+ * The primary request message signals bucket owners to re-select the primary owner of the bucket.
+ * It is sent by client threads which need to use the bucket, however do not know of its primary
+ * location.
-public final class PrimaryRequestMessage extends PartitionMessage
-{
+public final class PrimaryRequestMessage extends PartitionMessage {
-  
+
-  
+
-   * @param recipients those members which own the bucket 
+   * 
+   * @param recipients those members which own the bucket
-   * @return a response object on which the caller waits for acknowledgement of which member is the primary
+   * @return a response object on which the caller waits for acknowledgement of which member is the
+   *         primary
-  public static PrimaryResponse send(Set recipients, 
-      PartitionedRegion r, int bucketId) 
-      throws ForceReattemptException
-  {
+  public static PrimaryResponse send(Set recipients, PartitionedRegion r, int bucketId)
+      throws ForceReattemptException {
-      throw new ForceReattemptException(LocalizedStrings.PrimaryRequestMessage_FAILED_SENDING_0.toLocalizedString(m));
+      throw new ForceReattemptException(
+          LocalizedStrings.PrimaryRequestMessage_FAILED_SENDING_0.toLocalizedString(m));
+
-  protected boolean operateOnPartitionedRegion(DistributionManager dm,
-      PartitionedRegion pr, long startTime) throws CacheException, ForceReattemptException
-  {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr,
+      long startTime) throws CacheException, ForceReattemptException {
-    
+
-  
+
-  public void fromData(DataInput in) throws IOException,
-  ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  
+
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  public int getProcessorType()
-  {
+  public int getProcessorType() {
-    
-    protected static void sendReply(InternalDistributedMember member, int procId, boolean isPrimary, DM dm) {
+
+    protected static void sendReply(InternalDistributedMember member, int procId, boolean isPrimary,
+        DM dm) {
-    
+
-    private PrimaryRequestReplyMessage(InternalDistributedMember member, int procId, boolean isPrimary2) {
+    private PrimaryRequestReplyMessage(InternalDistributedMember member, int procId,
+        boolean isPrimary2) {
-    public void fromData(DataInput in) throws IOException, ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
+   * 
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-          PrimaryRequestReplyMessage reply =(PrimaryRequestReplyMessage) msg;
+          PrimaryRequestReplyMessage reply = (PrimaryRequestReplyMessage) msg;
-              logger.trace(LogMarker.DM, "PrimaryRequestResponse primary is {}", this.msg.getSender()); 
+              logger.trace(LogMarker.DM, "PrimaryRequestResponse primary is {}",
+                  this.msg.getSender());
-              logger.debug("PrimaryRequestResponse {} is not primary", this.msg.getSender()); 
+              logger.debug("PrimaryRequestResponse {} is not primary", this.msg.getSender());
-    
-    public InternalDistributedMember waitForPrimary()  throws ForceReattemptException
-    {
+
+    public InternalDistributedMember waitForPrimary() throws ForceReattemptException {
-      }
-      catch (ReplyException e) {
+      } catch (ReplyException e) {
-            logger.trace(LogMarker.DM, "NodeResponse got remote CacheClosedException, throwing PartitionedRegionCommunication Exception. {}", t.getMessage(), t);
+            logger.trace(LogMarker.DM,
+                "NodeResponse got remote CacheClosedException, throwing PartitionedRegionCommunication Exception. {}",
+                t.getMessage(), t);
-          throw new ForceReattemptException(LocalizedStrings.PrimaryRequestMessage_NODERESPONSE_GOT_REMOTE_CACHECLOSEDEXCEPTION_THROWING_PARTITIONEDREGIONCOMMUNICATION_EXCEPTION.toLocalizedString(), t);
+          throw new ForceReattemptException(
+              LocalizedStrings.PrimaryRequestMessage_NODERESPONSE_GOT_REMOTE_CACHECLOSEDEXCEPTION_THROWING_PARTITIONEDREGIONCOMMUNICATION_EXCEPTION
+                  .toLocalizedString(),
+              t);
