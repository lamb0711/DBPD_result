Merge branch 'release/1.3.0'

-
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.io.TeeOutputStream;
-import org.apache.geode.internal.io.TeePrintStream;
+import static org.apache.commons.lang.Validate.notNull;
-import java.io.*;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
-  private static final ThreadLocal<ProcessLauncherContext> DATA =
-      new ThreadLocal<ProcessLauncherContext>();
+  private static final ThreadLocal<ProcessLauncherContext> DATA = new ThreadLocal<>();
+
+  private final boolean redirectOutput;
+  private final Properties overriddenDefaults;
+  private final StartupStatusListener startupListener;
-    final ProcessLauncherContext context = get();
+    ProcessLauncherContext context = get();
-    final ProcessLauncherContext context = get();
+    ProcessLauncherContext context = get();
-
-    final ProcessLauncherContext context = get();
+    ProcessLauncherContext context = get();
-  public static void set(final boolean redirectOutput, final Properties contingentProperties,
+  public static void set(final boolean redirectOutput, final Properties overriddenDefaults,
-    DATA.set(new ProcessLauncherContext(redirectOutput, contingentProperties, startupListener));
+    notNull(overriddenDefaults,
+        "Invalid overriddenDefaults '" + overriddenDefaults + "' specified");
+
+    DATA.set(new ProcessLauncherContext(redirectOutput, overriddenDefaults, startupListener));
-    // DATA.get().restoreErrorStream();
-  private static void installLogListener(StartupStatusListener startupListener) {
+  private static void installLogListener(final StartupStatusListener startupListener) {
-  private final boolean redirectOutput;
-  private final Properties overriddenDefaults;
-  private final StartupStatusListener startupListener;
-  private PrintStream err;
-
-    return this.redirectOutput;
+    return redirectOutput;
-    return this.overriddenDefaults;
+    return overriddenDefaults;
-    return this.startupListener;
-  }
-
-  @SuppressWarnings("unused")
-  private void teeErrorStream() {
-    final FileOutputStream fdErr = new FileOutputStream(FileDescriptor.err);
-    this.err = new PrintStream(new BufferedOutputStream(fdErr, 128), true);
-    System.setErr(new TeePrintStream(new TeeOutputStream(new BufferedOutputStream(fdErr, 128))));
-  }
-
-  @SuppressWarnings("unused")
-  private void restoreErrorStream() {
-    if (System.err instanceof TeePrintStream) {
-      final TeePrintStream tee = ((TeePrintStream) System.err);
-      final OutputStream branch = tee.getTeeOutputStream().getBranchOutputStream();
-
-      PrintStream newStdErr = null;
-      if (branch == null) {
-        newStdErr = this.err;
-      } else if (branch instanceof PrintStream) {
-        newStdErr = (PrintStream) branch;
-      } else {
-        newStdErr = new PrintStream(new BufferedOutputStream(branch, 128), true);
-      }
-      System.setErr(newStdErr);
-    }
+    return startupListener;
