GEODE-5915: Fix IllegalMonitorStateException logged for Alerts

* Prevent IllegalMonitorStateException in ManagementListener.
* Pass in InternalDistributedSystem to prevent singleton fetches.
* Create unit tests for ManagementListener.

+import java.util.concurrent.locks.ReadWriteLock;
-import org.apache.geode.LogWriter;
+import org.apache.geode.annotations.TestingOnly;
-import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+  private final InternalDistributedSystem system;
+
-  private ManagementAdapter adapter;
-
-  private LogWriter logger;
-
-  // having a readwrite lock to synchronize between handling cache creation/removal vs handling
-  // other notifications
-  private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
+  private final ManagementAdapter adapter;
-   * Constructor
+   * ReadWriteLock to protect between handling cache creation/removal vs other notifications
-  public ManagementListener() {
-    this.adapter = new ManagementAdapter();
-    this.logger = InternalDistributedSystem.getLogger();
+  private final ReadWriteLock readWriteLock;
+
+  public ManagementListener(InternalDistributedSystem system) {
+    this(system, new ManagementAdapter(), new ReentrantReadWriteLock());
+  }
+
+  @TestingOnly
+  ManagementListener(InternalDistributedSystem system, ManagementAdapter adapter,
+      ReadWriteLock readWriteLock) {
+    this.system = system;
+    this.adapter = adapter;
+    this.readWriteLock = readWriteLock;
-  private boolean shouldProceed(ResourceEvent event) {
-    DistributedSystem system = InternalDistributedSystem.getConnectedInstance();
+  boolean shouldProceed(ResourceEvent event) {
+    InternalDistributedSystem.getConnectedInstance();
-    // CACHE_REMOVE is a special event . It may happen that a
-    // ForcedDisconnectExcpetion will raise this event
-
-    // No need to check system.isConnected as
-    // InternalDistributedSystem.getConnectedInstance() does that internally.
-
-    if (system == null && !event.equals(ResourceEvent.CACHE_REMOVE)) {
+    // CACHE_REMOVE is a special event. ForcedDisconnectException may raise this event.
+    if (!system.isConnected() && !event.equals(ResourceEvent.CACHE_REMOVE)) {
-    InternalCache currentCache = GemFireCacheImpl.getInstance();
+    InternalCache currentCache = system.getCache();
-    if (currentCache.isClosed()) {
-      return false;
-    }
-    return true;
+    return !currentCache.isClosed();
+  @Override
-      } else {
+      } else if (event != ResourceEvent.SYSTEM_ALERT) {
