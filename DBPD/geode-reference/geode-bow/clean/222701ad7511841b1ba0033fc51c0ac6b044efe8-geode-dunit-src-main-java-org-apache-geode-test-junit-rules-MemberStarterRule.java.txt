GEODE-4110: improve junit ClientCacheRule (#2872)

* refactor some multiUser tests to use the ClientCacheRule
* add more convenience methods in ClientCacheRule
* clean up the ClusterStarterRule.startClient interface
* deprecate the SecurityTestUtils to favor using rules
+import org.apache.geode.cache.PartitionAttributesFactory;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.RegionFactory;
+import org.apache.geode.cache.RegionShortcut;
+
+  /**
+   * convenience method to create a region with customized regionFactory
+   *
+   * @param regionFactoryConsumer a lamda that allows you to customize the regionFactory
+   */
+  public Region createRegion(RegionShortcut type, String name,
+      Consumer<RegionFactory> regionFactoryConsumer) {
+    RegionFactory regionFactory = getCache().createRegionFactory(type);
+    regionFactoryConsumer.accept(regionFactory);
+    return regionFactory.create(name);
+  }
+
+  public Region createRegion(RegionShortcut type, String name) {
+    return getCache().createRegionFactory(type).create(name);
+  }
+
+  /**
+   * convenience method to create a partition region with customized regionFactory and a customized
+   * PartitionAttributeFactory
+   *
+   * @param regionFactoryConsumer a lamda that allows you to customize the regionFactory
+   * @param attributesFactoryConsumer a lamda that allows you to customize the
+   *        partitionAttributeFactory
+   */
+  public Region createPartitionRegion(String name, Consumer<RegionFactory> regionFactoryConsumer,
+      Consumer<PartitionAttributesFactory> attributesFactoryConsumer) {
+    return createRegion(RegionShortcut.PARTITION, name, rf -> {
+      regionFactoryConsumer.accept(rf);
+      PartitionAttributesFactory attributeFactory = new PartitionAttributesFactory();
+      attributesFactoryConsumer.accept(attributeFactory);
+      rf.setPartitionAttributes(attributeFactory.create());
+    });
+  }
+
