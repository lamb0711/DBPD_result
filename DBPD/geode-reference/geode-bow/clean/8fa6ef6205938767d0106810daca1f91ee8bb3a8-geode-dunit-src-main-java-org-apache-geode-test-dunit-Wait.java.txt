GEODE-5424: Replacing calls to waitForCriterion with Awaitility

Replacing all of the calls to waitForCriterion with awaitility instead,
to use a standard timeout.

- * These methods can be used directly: <code>Wait.waitForCriterion(...)</code>, however, they are
- * intended to be referenced through static import:
- *
- * <pre>
- * import static org.apache.geode.test.dunit.Wait.*;
- *    ...
- *    waitForCriterion(...);
- * </pre>
- *
- * Extracted from DistributedTestCase.
- *
- * await().atMost(2, SECONDS).until(() -> isDone());
+ * await().until(() -> isDone());
- * Host.getHost(0).getVM(0).invoke(() -> await().atMost(1, MINUTES).until(() -> isDone()));
+ * Host.getHost(0).getVM(0).invoke(() -> await().until(() -> isDone()));
- * Host.getHost(0).getVM(0).invoke(() -> await("waiting for 4 members").atMost(5, SECONDS).until(() -> getMemberCount(), is(4)));
+ * Host.getHost(0).getVM(0).invoke(() -> await("waiting for 4 members").until(() -> getMemberCount(), is(4)));
- * await().atMost(5, SECONDS).untilCall(getValue(), equalTo(5));
+ * await().untilCall(getValue(), equalTo(5));
- * await().atMost(2, SECONDS).untilCall(Boolean.class, equalTo(this.done));
+ * await().untilCall(Boolean.class, equalTo(this.done));
- * await().atMost(5, SECONDS).untilTrue(closed);
+ * await().untilTrue(closed);
- * await().atMost(30, SECONDS).untilFalse(running);
+ * await().untilFalse(running);
- * <p>
- * NOTE: By default, the pollDelay is equal to the pollInterval which defaults to
- * ONE_HUNDRED_MILLISECONDS. You may want to add pollDelay(ZERO) to force Awaitility to check your
- * condition before waiting the pollInterval.
- *
- * <p>
- * Example of detailed conversion to Awaitility:
- *
- * <pre>
- * From:
- *
- * public boolean waitForClose() {
- *   WaitCriterion ev = new WaitCriterion() {
- *     public boolean done() {
- *       return isClosed();
- *     }
- *     public String description() {
- *       return "resource never closed";
- *     }
- *   };
- *   Wait.waitForCriterion(ev, 2000, 200, true);
- *   return true;
- * }
- *
- * To:
- *
- * import static org.apache.geode.test.awaitility.GeodeAwaitility.*;
- * import static org.awaitility.Duration.*;
- * import static java.util.concurrent.TimeUnit.*;
- *
- * await("resource never closed").atMost(2, SECONDS).untilCall(() -> isClosed());
- *
- * Or:
- *
- * await("resource never closed").atMost(2, SECONDS).pollDelay(ZERO).pollInterval(200, MILLISECONDS).untilCall(() -> isClosed());
- * </pre>
-
-  /**
-   * Wait on a mutex. This is done in a loop in order to address the "spurious wakeup" "feature" in
-   * Java.
-   *
-   * @param waitCriterion condition to test
-   * @param mutex object to lock and wait on
-   * @param milliseconds total amount of time to wait
-   * @param pollingInterval interval to pause for the wait
-   * @param throwOnTimeout if false, no error is thrown.
-   * @deprecated Please use {@link GeodeAwaitility} instead.
-   */
-  public static void waitMutex(final WaitCriterion waitCriterion, final Object mutex,
-      final long milliseconds, final long pollingInterval, final boolean throwOnTimeout) {
-    final long tilt = System.currentTimeMillis() + milliseconds;
-    long waitThisTime = jitterInterval(pollingInterval);
-    synchronized (mutex) {
-      for (;;) {
-        if (waitCriterion.done()) {
-          break;
-        }
-
-        long timeLeft = tilt - System.currentTimeMillis();
-        if (timeLeft <= 0) {
-          if (!throwOnTimeout) {
-            return; // not an error, but we're done
-          }
-          fail(
-              "Event never occurred after " + milliseconds + " ms: " + waitCriterion.description());
-        }
-
-        if (waitThisTime > timeLeft) {
-          waitThisTime = timeLeft;
-        }
-
-        try {
-          mutex.wait(waitThisTime);
-        } catch (InterruptedException e) {
-          fail("interrupted");
-        }
-      } // for
-    } // synchronized
-  }
