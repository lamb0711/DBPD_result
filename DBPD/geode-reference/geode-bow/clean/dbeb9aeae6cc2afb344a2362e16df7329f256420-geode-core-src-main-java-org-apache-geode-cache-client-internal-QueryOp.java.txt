Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-   * Does a region query on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a region query on a server using connections from the given pool to communicate with the
+   * server.
+   * 
-   * @return  A <code>SelectResults</code> containing the values
-   *            that match the <code>queryPredicate</code>.
+   * @return A <code>SelectResults</code> containing the values that match the
+   *         <code>queryPredicate</code>.
-                                      Object[] queryParams)
-  {
+      Object[] queryParams) {
-    
+
-      op = new QueryOpImpl(queryPredicate);      
+      op = new QueryOpImpl(queryPredicate);
-    return (SelectResults)pool.execute(op);
+    return (SelectResults) pool.execute(op);
-                                                               
+
-      for (Object param : queryParams){
+      for (Object param : queryParams) {
+     * 
-    @Override  
+
+    @Override
-    @Override  
+
+    @Override
-          public void handle(ChunkedMessage cm) throws Exception {
-            Part collectionTypePart = cm.getPart(0);
-            Object o = collectionTypePart.getObject();
-            if (o instanceof Throwable) {
-              String s = "While performing a remote " + getOpName();
-              exceptionRef[0] = new ServerOperationException(s, (Throwable)o);
-              return;
+        public void handle(ChunkedMessage cm) throws Exception {
+          Part collectionTypePart = cm.getPart(0);
+          Object o = collectionTypePart.getObject();
+          if (o instanceof Throwable) {
+            String s = "While performing a remote " + getOpName();
+            exceptionRef[0] = new ServerOperationException(s, (Throwable) o);
+            return;
+          }
+          CollectionType collectionType = (CollectionType) o;
+          Part resultPart = cm.getPart(1);
+          Object queryResult = null;
+          try {
+            queryResult = resultPart.getObject();
+          } catch (Exception e) {
+            String s = "While deserializing " + getOpName() + " result";
+            exceptionRef[0] = new SerializationException(s, e);
+            return;
+          }
+          if (queryResult instanceof Throwable) {
+            String s = "While performing a remote " + getOpName();
+            exceptionRef[0] = new ServerOperationException(s, (Throwable) queryResult);
+            return;
+          } else if (queryResult instanceof Integer) {
+            // Create the appropriate SelectResults instance if necessary
+            if (resultRef[0] == null) {
+              resultRef[0] = QueryUtils.getEmptySelectResults(TypeUtils.OBJECT_TYPE, null);
-            CollectionType collectionType = (CollectionType)o;
-            Part resultPart = cm.getPart(1);
-            Object queryResult = null;
-            try {
-              queryResult = resultPart.getObject();
-            } catch (Exception e) {
-              String s = "While deserializing " + getOpName() + " result";
-              exceptionRef[0] = new SerializationException(s, e);
-              return;
+            resultRef[0].add(queryResult);
+          } else { // typical query result
+            // Create the appropriate SelectResults instance if necessary
+            if (resultRef[0] == null) {
+              resultRef[0] = QueryUtils.getEmptySelectResults(collectionType, null);
-            if (queryResult instanceof Throwable) {
-              String s = "While performing a remote " + getOpName();
-              exceptionRef[0] = new ServerOperationException(s, (Throwable)queryResult);
-              return;
-            } else if (queryResult instanceof Integer) {
-              // Create the appropriate SelectResults instance if necessary
-              if (resultRef[0] == null) {
-                resultRef[0] = QueryUtils.
-                               getEmptySelectResults(TypeUtils.OBJECT_TYPE,
-                                                     null);
-              }
-              resultRef[0].add(queryResult);
-            } else { // typical query result
-              // Create the appropriate SelectResults instance if necessary
-              if (resultRef[0] == null) {
-                resultRef[0] = QueryUtils.getEmptySelectResults(collectionType,
-                                                                null);
-              }
-              SelectResults selectResults = resultRef[0];
-              ObjectType objectType = collectionType.getElementType();
-              Object[] resultArray;
-             // for select * queries, the serialized object byte arrays are
-             // returned as part of ObjectPartList
-              boolean isObjectPartList = false;
-              if (queryResult instanceof ObjectPartList) {
-                isObjectPartList = true;
-                resultArray = ((ObjectPartList) queryResult).getObjects().toArray();
-              } else{ 
-                // Add the results to the SelectResults
-                resultArray = (Object[]) queryResult;
-              }
-              if (objectType.isStructType()) {
-                for (int i = 0; i < resultArray.length; i++) {
-                  if (isObjectPartList) {
-                    selectResults
-                        .add(new StructImpl((StructTypeImpl) objectType,
-                            ((ObjectPartList) resultArray[i]).getObjects()
-                                .toArray()));
-                  } else {
-                    selectResults.add(new StructImpl((StructTypeImpl) objectType,
-                        (Object[]) resultArray[i]));
-                  }
+            SelectResults selectResults = resultRef[0];
+            ObjectType objectType = collectionType.getElementType();
+            Object[] resultArray;
+            // for select * queries, the serialized object byte arrays are
+            // returned as part of ObjectPartList
+            boolean isObjectPartList = false;
+            if (queryResult instanceof ObjectPartList) {
+              isObjectPartList = true;
+              resultArray = ((ObjectPartList) queryResult).getObjects().toArray();
+            } else {
+              // Add the results to the SelectResults
+              resultArray = (Object[]) queryResult;
+            }
+            if (objectType.isStructType()) {
+              for (int i = 0; i < resultArray.length; i++) {
+                if (isObjectPartList) {
+                  selectResults.add(new StructImpl((StructTypeImpl) objectType,
+                      ((ObjectPartList) resultArray[i]).getObjects().toArray()));
+                } else {
+                  selectResults
+                      .add(new StructImpl((StructTypeImpl) objectType, (Object[]) resultArray[i]));
-              } else {
-                selectResults.addAll(Arrays.asList(resultArray));
+            } else {
+              selectResults.addAll(Arrays.asList(resultArray));
-        };
-      processChunkedResponse((ChunkedMessage)msg, getOpName(), ch);
+        }
+      };
+      processChunkedResponse((ChunkedMessage) msg, getOpName(), ch);
+
-    @Override  
+
+    @Override
-      return msgType == MessageType.QUERY_DATA_ERROR
-        || msgType == MessageType.CQDATAERROR_MSG_TYPE
-        || msgType == MessageType.CQ_EXCEPTION_TYPE;
+      return msgType == MessageType.QUERY_DATA_ERROR || msgType == MessageType.CQDATAERROR_MSG_TYPE
+          || msgType == MessageType.CQ_EXCEPTION_TYPE;
-    @Override  
+
+    @Override
-    @Override  
+
+    @Override
-    @Override  
+
+    @Override
