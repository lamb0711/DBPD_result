GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-  protected static final String DEFAULT_LOG_FILE_NAME =
+  private static final String DEFAULT_LOG_FILE_NAME =
-  protected static final String DEFAULT_STATISTIC_ARCHIVE_FILE_NAME = RegionHelper.NAME + ".gfs";
+  private static final String DEFAULT_STATISTIC_ARCHIVE_FILE_NAME = RegionHelper.NAME + ".gfs";
-  protected static final float DEFAULT_EVICTION_HEAP_PERCENTAGE =
+  private static final float DEFAULT_EVICTION_HEAP_PERCENTAGE =
-  protected static final float DEFAULT_CRITICAL_HEAP_PERCENTAGE =
+  private static final float DEFAULT_CRITICAL_HEAP_PERCENTAGE =
-  protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractCache.class);
+  private static final String GEMFIRE_PREFIX = DistributionConfig.GEMFIRE_PREFIX;
+  private static final String DEFAULT_CACHE_XML_FILE =
+      DistributionConfig.DEFAULT_CACHE_XML_FILE.getName();
-  protected float evictionHeapPercentage = DEFAULT_EVICTION_HEAP_PERCENTAGE;
+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractCache.class);
-  protected float criticalHeapPercentage = DEFAULT_CRITICAL_HEAP_PERCENTAGE;
+  private float evictionHeapPercentage = DEFAULT_EVICTION_HEAP_PERCENTAGE;
-  protected boolean rebalance = false;
+  private float criticalHeapPercentage = DEFAULT_CRITICAL_HEAP_PERCENTAGE;
-  protected final Map<String, String> gemfireProperties;
+  private boolean rebalance = false;
+
+  private final Map<String, String> gemfireProperties;
-  public AbstractCache() {
-    this.gemfireProperties = new ConcurrentHashMap<String, String>();
+  AbstractCache() {
+    this.gemfireProperties = new ConcurrentHashMap<>();
+
-  public String getLogFileName() {
+  private String getLogFileName() {
-  public String getStatisticArchiveFileName() {
+  private String getStatisticArchiveFileName() {
-  public String getCacheXmlFileName() {
+  private String getCacheXmlFileName() {
-  protected File getCacheXmlFile() {
+  private File getCacheXmlFile() {
-  public Map<String, String> getGemFireProperties() {
+  private Map<String, String> getGemFireProperties() {
+    // TODO: AbstractDistributionConfig is internal and _getAttNames is designed for testing.
-  protected Properties createDistributedSystemProperties() {
+  Properties createDistributedSystemProperties() {
-      absoluteCacheXmlFileName = DistributionConfig.DEFAULT_CACHE_XML_FILE.getName();
+      absoluteCacheXmlFileName = DEFAULT_CACHE_XML_FILE;
-  protected void closeCache() {
-    if (getLogger().isDebugEnabled()) {
-      getLogger().debug("Closing " + this.cache);
-    }
-    if (getCache() != null) {
-      getCache().close();
-    }
-    getLogger().info("Closed " + this.cache);
-  }
-
-  protected File getLogFile() {
+  private File getLogFile() {
-            new File(System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "logdir"), logFileName);
+            new File(System.getProperty(GEMFIRE_PREFIX + "logdir"), logFileName);
-  protected File getStatisticArchiveFile() {
+  private File getStatisticArchiveFile() {
-              new File(System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "statisticsdir"),
+              new File(System.getProperty(GEMFIRE_PREFIX + "statisticsdir"),
-  protected void initializeResourceManager() {
+  private void initializeResourceManager() {
-        StringBuilder builder = new StringBuilder();
-        builder.append("Actual eviction heap percentage=").append(rm.getEvictionHeapPercentage())
-            .append("; critical heap percentage=").append(rm.getCriticalHeapPercentage());
-        getLogger().debug(builder.toString());
+        String builder = "Actual eviction heap percentage=" + rm.getEvictionHeapPercentage()
+            + "; critical heap percentage=" + rm.getCriticalHeapPercentage();
+        getLogger().debug(builder);
-    StringBuilder builder = new StringBuilder();
-    builder.append("Caught exception attempting to set eviction heap percentage=")
-        .append(getEvictionHeapPercentage()).append(" and critical heap percentage=")
-        .append(getCriticalHeapPercentage())
-        .append(
-            ". The percentages will be set back to their previous values (eviction heap percentage=")
-        .append(currentEvictionHeapPercentage).append(" and critical heap percentage=")
-        .append(currentCriticalHeapPercentage).append(").");
-    getLogger().warn(builder.toString(), e);
+    String builder = "Caught exception attempting to set eviction heap percentage="
+        + getEvictionHeapPercentage() + " and critical heap percentage="
+        + getCriticalHeapPercentage()
+        + ". The percentages will be set back to their previous values (eviction heap percentage="
+        + currentEvictionHeapPercentage + " and critical heap percentage="
+        + currentCriticalHeapPercentage + ").";
+    getLogger().warn(builder, e);
-    return new StringBuilder().append(getClass().getSimpleName()).append("[").append("cache=")
-        .append(this.cache).append("]").toString();
+    return getClass().getSimpleName() + "[" + "cache="
+        + this.cache + "]";
