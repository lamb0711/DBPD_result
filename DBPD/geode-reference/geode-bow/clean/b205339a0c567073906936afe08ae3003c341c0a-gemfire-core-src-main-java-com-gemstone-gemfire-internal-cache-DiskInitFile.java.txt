Merge branch 'feature/GEODE-8' into develop

-   * Written to IF. Used to record regions config Byte Format: RegionId 1:
-   * lruAlgorithm 1: lruAction 4: lruLimit (int) // no need to ObjectSize during
-   * recovery since all data is in blob form 4: concurrencyLevel (int) 4:
-   * initialCapacity (int) 4: loadFactor (float) 1: statisticsEnabled (boolean)
-   * 1: isBucket (boolean) variable: compressorClassName 1: EndOfRecordMarker
+   * Written to IF. Used to record regions config Byte Format: 
+   * RegionId 
+   * 1: lruAlgorithm 
+   * 1: lruAction 
+   * 4: lruLimit (int) // no need to ObjectSize during recovery since all data is in blob form 
+   * 4: concurrencyLevel (int) 
+   * 4: initialCapacity (int) 
+   * 4: loadFactor (float)
+   * 1: statisticsEnabled (boolean)
+   * 1: isBucket (boolean) 
+   * variable: partitionName (utf)
+   * 4: startingBucketId (int)
+   * variable: compressorClassName (utf)
+   * 1: versioned (boolean)
+   * 1: EndOfRecordMarker
+  /**
+   * Written to IF. Used to record regions config Byte Format: 
+   * RegionId 
+   * 1: lruAlgorithm 
+   * 1: lruAction 
+   * 4: lruLimit (int) // no need to ObjectSize during recovery since all data is in blob form 
+   * 4: concurrencyLevel (int) 
+   * 4: initialCapacity (int) 
+   * 4: loadFactor (float)
+   * 1: statisticsEnabled (boolean)
+   * 1: isBucket (boolean) 
+   * variable: partitionName (utf)
+   * 4: startingBucketId (int)
+   * variable: compressorClassName (utf)
+   * 1: versioned (boolean)
+   * 1: offHeap (boolean) added in 9.0
+   * 1: EndOfRecordMarker
+   * @since 9.0
+   */
+  public static final byte IFREC_REGION_CONFIG_ID_90 = 90;
+
-                              String compressorClassName) {
+                              String compressorClassName, boolean offHeap) {
-                 partitionName, startingBucketId, compressorClassName);
+                 partitionName, startingBucketId, compressorClassName, offHeap);
-                                     Compressor compressor) {
+                                     Compressor compressor, boolean offHeap) {
-          compressor == null ? null : compressor.getClass().getName());
+          compressor == null ? null : compressor.getClass().getName(), offHeap);
-      HeapDataOutputStream bb = new HeapDataOutputStream(1+DR_ID_MAX_BYTES+1+1+4+4+4+1+1+4+len+4, Version.CURRENT);
-      bb.write(IFREC_REGION_CONFIG_ID_80);
+      int comprLen = estimateByteSize(drv.getCompressorClassName());
+      HeapDataOutputStream bb = new HeapDataOutputStream(1+DR_ID_MAX_BYTES+1+1+4+4+4+1+1+4+len+4+1+1+1, Version.CURRENT);
+      bb.write(IFREC_REGION_CONFIG_ID_90);
+      // TODO the offheap flag needs to be in a new version
+      bb.writeBoolean(drv.getOffHeap());
+      for (DiskRegionView k: this.getKnown()) {
+        k.close();
+      }
+                             String offHeapOption,
-            compressorClassNameOption, statisticsEnabledOption, printToConsole);
+            compressorClassNameOption, statisticsEnabledOption, offHeapOption, printToConsole);
+                           String offHeapOption,
-          statisticsEnabledOption, printToConsole);
+          statisticsEnabledOption, offHeapOption, printToConsole);
+                                 String offHeapOption,
+    boolean offHeap = drv.getOffHeap();
+    if (offHeapOption != null) {
+      offHeap = Boolean.parseBoolean(offHeapOption);
+      if (!offHeap) {
+        // make sure it is "false"
+        if (!offHeapOption.equalsIgnoreCase("false")) {
+        throw new IllegalArgumentException("Expected offHeap to be \"true\" or \"false\"");
+        }
+      }
+    }
-                  compressorClassName);
+                  compressorClassName, offHeap);
