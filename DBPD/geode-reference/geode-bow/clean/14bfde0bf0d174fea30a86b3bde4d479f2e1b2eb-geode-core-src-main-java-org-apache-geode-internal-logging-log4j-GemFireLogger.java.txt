Merge branch 'release/1.8.0'

- *
-   * Logs a message with the specific Marker at the;@code FINEST} level.
+   * Logs a message with the specific Marker at the {@code FINEST} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void finest(final Marker marker, final Message msg);
+  void finest(final Marker marker, final Message message);
-   * Logs a message with the specific Marker at the;@code FINEST} level.
+   * Logs a message with the specific Marker at the {@code FINEST} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void finest(final Marker marker, final Message msg, final Throwable t);
+  void finest(final Marker marker, final Message message, final Throwable throwable);
-   * Logs a message object with the;@code FINEST} level.
+   * Logs a message object with the {@code FINEST} level.
-   * Logs a message at the;@code FINEST} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINEST} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finest(final Marker marker, final Object message, final Throwable t);
+  void finest(final Marker marker, final Object message, final Throwable throwable);
-   * Logs a message object with the;@code FINEST} level.
+   * Logs a message object with the {@code FINEST} level.
-   * Logs a message with parameters at the;@code FINEST} level.
+   * Logs a message with parameters at the {@code FINEST} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void finest(final Marker marker, final String message, final Object... params);
+  void finest(final Marker marker, final String message, final Object... parameters);
-   * Logs a message at the;@code FINEST} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINEST} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finest(final Marker marker, final String message, final Throwable t);
+  void finest(final Marker marker, final String message, final Throwable throwable);
-   * Logs the specified Message at the;@code FINEST} level.
+   * Logs the specified Message at the {@code FINEST} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void finest(final Message msg);
+  void finest(final Message message);
-   * Logs the specified Message at the;@code FINEST} level.
+   * Logs the specified Message at the {@code FINEST} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void finest(final Message msg, final Throwable t);
+  void finest(final Message message, final Throwable throwable);
-   * Logs a message object with the;@code FINEST} level.
+   * Logs a message object with the {@code FINEST} level.
-   * Logs a message at the;@code FINEST} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINEST} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finest(final Object message, final Throwable t);
+  void finest(final Object message, final Throwable throwable);
-   * Logs a message object with the;@code FINEST} level.
+   * Logs a message object with the {@code FINEST} level.
-   * Logs a message with parameters at the;@code FINEST} level.
+   * Logs a message with parameters at the {@code FINEST} level.
-   * @param params parameters to the message.
+   * @param parameters parameters to the message.
-  void finest(final String message, final Object... params);
+  void finest(final String message, final Object... parameters);
-   * Logs a message at the;@code FINEST} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINEST} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finest(final String message, final Throwable t);
+  void finest(final String message, final Throwable throwable);
-   * Logs a message with the specific Marker at the;@code FINER} level.
+   * Logs a message with the specific Marker at the {@code FINER} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void finer(final Marker marker, final Message msg);
+  void finer(final Marker marker, final Message message);
-   * Logs a message with the specific Marker at the;@code FINER} level.
+   * Logs a message with the specific Marker at the {@code FINER} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void finer(final Marker marker, final Message msg, final Throwable t);
+  void finer(final Marker marker, final Message message, final Throwable throwable);
-   * Logs a message object with the;@code FINER} level.
+   * Logs a message object with the {@code FINER} level.
-   * Logs a message at the;@code FINER} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINER} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finer(final Marker marker, final Object message, final Throwable t);
+  void finer(final Marker marker, final Object message, final Throwable throwable);
-   * Logs a message object with the;@code FINER} level.
+   * Logs a message object with the {@code FINER} level.
-   * Logs a message with parameters at the;@code FINER} level.
+   * Logs a message with parameters at the {@code FINER} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void finer(final Marker marker, final String message, final Object... params);
+  void finer(final Marker marker, final String message, final Object... parameters);
-   * Logs a message at the;@code FINER} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINER} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finer(final Marker marker, final String message, final Throwable t);
+  void finer(final Marker marker, final String message, final Throwable throwable);
-   * Logs the specified Message at the;@code FINER} level.
+   * Logs the specified Message at the {@code FINER} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void finer(final Message msg);
+  void finer(final Message message);
-   * Logs the specified Message at the;@code FINER} level.
+   * Logs the specified Message at the {@code FINER} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void finer(final Message msg, final Throwable t);
+  void finer(final Message message, final Throwable throwable);
-   * Logs a message object with the;@code FINER} level.
+   * Logs a message object with the {@code FINER} level.
-   * Logs a message at the;@code FINER} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINER} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finer(final Object message, final Throwable t);
+  void finer(final Object message, final Throwable throwable);
-   * Logs a message object with the;@code FINER} level.
+   * Logs a message object with the {@code FINER} level.
-   * Logs a message with parameters at the;@code FINER} level.
+   * Logs a message with parameters at the {@code FINER} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void finer(final String message, final Object... params);
+  void finer(final String message, final Object... parameters);
-   * Logs a message at the;@code FINER} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINER} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void finer(final String message, final Throwable t);
+  void finer(final String message, final Throwable throwable);
-   * Logs a message with the specific Marker at the;@code FINE} level.
+   * Logs a message with the specific Marker at the {@code FINE} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void fine(final Marker marker, final Message msg);
+  void fine(final Marker marker, final Message message);
-   * Logs a message with the specific Marker at the;@code FINE} level.
+   * Logs a message with the specific Marker at the {@code FINE} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void fine(final Marker marker, final Message msg, final Throwable t);
+  void fine(final Marker marker, final Message message, final Throwable throwable);
-   * Logs a message object with the;@code FINE} level.
+   * Logs a message object with the {@code FINE} level.
-   * Logs a message at the;@code FINE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void fine(final Marker marker, final Object message, final Throwable t);
+  void fine(final Marker marker, final Object message, final Throwable throwable);
-   * Logs a message object with the;@code FINE} level.
+   * Logs a message object with the {@code FINE} level.
-   * Logs a message with parameters at the;@code FINE} level.
+   * Logs a message with parameters at the {@code FINE} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void fine(final Marker marker, final String message, final Object... params);
+  void fine(final Marker marker, final String message, final Object... parameters);
-   * Logs a message at the;@code FINE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void fine(final Marker marker, final String message, final Throwable t);
+  void fine(final Marker marker, final String message, final Throwable throwable);
-   * Logs the specified Message at the;@code FINE} level.
+   * Logs the specified Message at the {@code FINE} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void fine(final Message msg);
+  void fine(final Message message);
-   * Logs the specified Message at the;@code FINE} level.
+   * Logs the specified Message at the {@code FINE} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void fine(final Message msg, final Throwable t);
+  void fine(final Message message, final Throwable throwable);
-   * Logs a message object with the;@code FINE} level.
+   * Logs a message object with the {@code FINE} level.
-   * Logs a message at the;@code FINE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void fine(final Object message, final Throwable t);
+  void fine(final Object message, final Throwable throwable);
-   * Logs a message object with the;@code FINE} level.
+   * Logs a message object with the {@code FINE} level.
-   * Logs a message with parameters at the;@code FINE} level.
+   * Logs a message with parameters at the {@code FINE} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void fine(final String message, final Object... params);
+  void fine(final String message, final Object... parameters);
-   * Logs a message at the;@code FINE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code FINE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void fine(final String message, final Throwable t);
+  void fine(final String message, final Throwable throwable);
-   * Logs a message with the specific Marker at the;@code CONFIG} level.
+   * Logs a message with the specific Marker at the {@code CONFIG} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void config(final Marker marker, final Message msg);
+  void config(final Marker marker, final Message message);
-   * Logs a message with the specific Marker at the;@code CONFIG} level.
+   * Logs a message with the specific Marker at the {@code CONFIG} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void config(final Marker marker, final Message msg, final Throwable t);
+  void config(final Marker marker, final Message message, final Throwable throwable);
-   * Logs a message object with the;@code CONFIG} level.
+   * Logs a message object with the {@code CONFIG} level.
-   * Logs a message at the;@code CONFIG} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code CONFIG} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void config(final Marker marker, final Object message, final Throwable t);
+  void config(final Marker marker, final Object message, final Throwable throwable);
-   * Logs a message object with the;@code CONFIG} level.
+   * Logs a message object with the {@code CONFIG} level.
-   * Logs a message with parameters at the;@code CONFIG} level.
+   * Logs a message with parameters at the {@code CONFIG} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void config(final Marker marker, final String message, final Object... params);
+  void config(final Marker marker, final String message, final Object... parameters);
-   * Logs a message at the;@code CONFIG} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code CONFIG} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void config(final Marker marker, final String message, final Throwable t);
+  void config(final Marker marker, final String message, final Throwable throwable);
-   * Logs the specified Message at the;@code CONFIG} level.
+   * Logs the specified Message at the {@code CONFIG} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void config(final Message msg);
+  void config(final Message message);
-   * Logs the specified Message at the;@code CONFIG} level.
+   * Logs the specified Message at the {@code CONFIG} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void config(final Message msg, final Throwable t);
+  void config(final Message message, final Throwable throwable);
-   * Logs a message object with the;@code CONFIG} level.
+   * Logs a message object with the {@code CONFIG} level.
-   * Logs a message at the;@code CONFIG} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code CONFIG} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void config(final Object message, final Throwable t);
+  void config(final Object message, final Throwable throwable);
-   * Logs a message object with the;@code CONFIG} level.
+   * Logs a message object with the {@code CONFIG} level.
-   * Logs a message with parameters at the;@code CONFIG} level.
+   * Logs a message with parameters at the {@code CONFIG} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void config(final String message, final Object... params);
+  void config(final String message, final Object... parameters);
-   * Logs a message at the;@code CONFIG} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code CONFIG} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void config(final String message, final Throwable t);
+  void config(final String message, final Throwable throwable);
-   * Logs a message with the specific Marker at the;@code WARNING} level.
+   * Logs a message with the specific Marker at the {@code WARNING} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void warning(final Marker marker, final Message msg);
+  void warning(final Marker marker, final Message message);
-   * Logs a message with the specific Marker at the;@code WARNING} level.
+   * Logs a message with the specific Marker at the {@code WARNING} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void warning(final Marker marker, final Message msg, final Throwable t);
+  void warning(final Marker marker, final Message message, final Throwable throwable);
-   * Logs a message object with the;@code WARNING} level.
+   * Logs a message object with the {@code WARNING} level.
-   * Logs a message at the;@code WARNING} level including the stack trace of the;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code WARNING} level including the stack trace of the{@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void warning(final Marker marker, final Object message, final Throwable t);
+  void warning(final Marker marker, final Object message, final Throwable throwable);
-   * Logs a message object with the;@code WARNING} level.
+   * Logs a message object with the {@code WARNING} level.
-   * Logs a message with parameters at the;@code WARNING} level.
+   * Logs a message with parameters at the {@code WARNING} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void warning(final Marker marker, final String message, final Object... params);
+  void warning(final Marker marker, final String message, final Object... parameters);
-   * Logs a message at the;@code WARNING} level including the stack trace of the;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code WARNING} level including the stack trace of the{@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void warning(final Marker marker, final String message, final Throwable t);
+  void warning(final Marker marker, final String message, final Throwable throwable);
-   * Logs the specified Message at the;@code WARNING} level.
+   * Logs the specified Message at the {@code WARNING} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void warning(final Message msg);
+  void warning(final Message message);
-   * Logs the specified Message at the;@code WARNING} level.
+   * Logs the specified Message at the {@code WARNING} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void warning(final Message msg, final Throwable t);
+  void warning(final Message message, final Throwable throwable);
-   * Logs a message object with the;@code WARNING} level.
+   * Logs a message object with the {@code WARNING} level.
-   * Logs a message at the;@code WARNING} level including the stack trace of the;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code WARNING} level including the stack trace of the{@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void warning(final Object message, final Throwable t);
+  void warning(final Object message, final Throwable throwable);
-   * Logs a message object with the;@code WARNING} level.
+   * Logs a message object with the {@code WARNING} level.
-   * Logs a message with parameters at the;@code WARNING} level.
+   * Logs a message with parameters at the {@code WARNING} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void warning(final String message, final Object... params);
+  void warning(final String message, final Object... parameters);
-   * Logs a message at the;@code WARNING} level including the stack trace of the;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code WARNING} level including the stack trace of the{@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void warning(final String message, final Throwable t);
+  void warning(final String message, final Throwable throwable);
-   * Logs a message with the specific Marker at the;@code SEVERE} level.
+   * Logs a message with the specific Marker at the {@code SEVERE} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void severe(final Marker marker, final Message msg);
+  void severe(final Marker marker, final Message message);
-   * Logs a message with the specific Marker at the;@code SEVERE} level.
+   * Logs a message with the specific Marker at the {@code SEVERE} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void severe(final Marker marker, final Message msg, final Throwable t);
+  void severe(final Marker marker, final Message message, final Throwable throwable);
-   * Logs a message object with the;@code SEVERE} level.
+   * Logs a message object with the {@code SEVERE} level.
-   * Logs a message at the;@code SEVERE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code SEVERE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void severe(final Marker marker, final Object message, final Throwable t);
+  void severe(final Marker marker, final Object message, final Throwable throwable);
-   * Logs a message object with the;@code SEVERE} level.
+   * Logs a message object with the {@code SEVERE} level.
-   * Logs a message with parameters at the;@code SEVERE} level.
+   * Logs a message with parameters at the {@code SEVERE} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void severe(final Marker marker, final String message, final Object... params);
+  void severe(final Marker marker, final String message, final Object... parameters);
-   * Logs a message at the;@code SEVERE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code SEVERE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void severe(final Marker marker, final String message, final Throwable t);
+  void severe(final Marker marker, final String message, final Throwable throwable);
-   * Logs the specified Message at the;@code SEVERE} level.
+   * Logs the specified Message at the {@code SEVERE} level.
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  void severe(final Message msg);
+  void severe(final Message message);
-   * Logs the specified Message at the;@code SEVERE} level.
+   * Logs the specified Message at the {@code SEVERE} level.
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  void severe(final Message msg, final Throwable t);
+  void severe(final Message message, final Throwable throwable);
-   * Logs a message object with the;@code SEVERE} level.
+   * Logs a message object with the {@code SEVERE} level.
-   * Logs a message at the;@code SEVERE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code SEVERE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  void severe(final Object message, final Throwable t);
+  void severe(final Object message, final Throwable throwable);
-   * Logs a message object with the;@code SEVERE} level.
+   * Logs a message object with the {@code SEVERE} level.
-   * Logs a message with parameters at the;@code SEVERE} level.
+   * Logs a message with parameters at the {@code SEVERE} level.
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  void severe(final String message, final Object... params);
+  void severe(final String message, final Object... parameters);
-   * Logs a message at the;@code SEVERE} level including the stack trace of the ;@link
-   * Throwable};@code t} passed as parameter.
+   * Logs a message at the {@code SEVERE} level including the stack trace of the {@link
+   * Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack
+   * @param throwable the exception to log, including its stack
-  void severe(final String message, final Throwable t);
+  void severe(final String message, final Throwable throwable);
