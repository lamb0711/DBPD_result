GEODE-6588: Cleanup generics and other static analyzer issues. (#3391)


-  protected static final LocatorListRequest LOCATOR_LIST_REQUEST = new LocatorListRequest();
+  private static final LocatorListRequest LOCATOR_LIST_REQUEST = new LocatorListRequest();
-      new Comparator<HostAddress>() {
-        @Override
-        public int compare(HostAddress address, HostAddress otherAddress) {
-          InetSocketAddress inetSocketAddress = address.getSocketInetAddress();
-          InetSocketAddress otherInetSocketAddress = otherAddress.getSocketInetAddress();
-          // shouldn't happen, but if it does we'll say they're the same.
-          if (inetSocketAddress.getAddress() == null
-              || otherInetSocketAddress.getAddress() == null) {
-            return 0;
-          }
+      (address, otherAddress) -> {
+        InetSocketAddress inetSocketAddress = address.getSocketInetAddress();
+        InetSocketAddress otherInetSocketAddress = otherAddress.getSocketInetAddress();
+        // shouldn't happen, but if it does we'll say they're the same.
+        if (inetSocketAddress.getAddress() == null
+            || otherInetSocketAddress.getAddress() == null) {
+          return 0;
+        }
-          int result = inetSocketAddress.getAddress().getCanonicalHostName()
-              .compareTo(otherInetSocketAddress.getAddress().getCanonicalHostName());
-          if (result != 0) {
-            return result;
-          } else {
-            return inetSocketAddress.getPort() - otherInetSocketAddress.getPort();
-          }
+        int result = inetSocketAddress.getAddress().getCanonicalHostName()
+            .compareTo(otherInetSocketAddress.getAddress().getCanonicalHostName());
+        if (result != 0) {
+          return result;
+        } else {
+          return inetSocketAddress.getPort() - otherInetSocketAddress.getPort();
-  protected final List<HostAddress> initialLocators;
+  private final List<HostAddress> initialLocators;
-  private AtomicReference<LocatorList> locators = new AtomicReference<LocatorList>();
-  private AtomicReference<LocatorList> onlineLocators = new AtomicReference<LocatorList>();
+  private AtomicReference<LocatorList> locators = new AtomicReference<>();
+  private AtomicReference<LocatorList> onlineLocators = new AtomicReference<>();
-  private final Map<InetSocketAddress, Exception> locatorState =
-      new HashMap<InetSocketAddress, Exception>();
+  private final Map<InetSocketAddress, Exception> locatorState = new HashMap<>();
-  public AutoConnectionSourceImpl(List<InetSocketAddress> locators, List<HostAddress> contacts,
-      String serverGroup, int handshakeTimeout) {
-    ArrayList<HostAddress> tmpContacts =
-        new ArrayList<HostAddress>(Collections.unmodifiableList(contacts));
-    this.locators.set(new LocatorList(tmpContacts));
+  public AutoConnectionSourceImpl(List<HostAddress> contacts, String serverGroup,
+      int handshakeTimeout) {
+    this.locators.set(new LocatorList(new ArrayList<>(contacts)));
-      Set/* <ServerLocation> */ excludedServers) {
+      Set<ServerLocation> excludedServers) {
-  public List/* ServerLocation */ findServersForQueue(Set/* <ServerLocation> */ excludedServers,
+  public List<ServerLocation> findServersForQueue(Set<ServerLocation> excludedServers,
-      return new ArrayList();
+      return new ArrayList<>();
-    List result = response.getServers();
-    return result;
+    return response.getServers();
-          /**
-           * This call doesn't throw UnknownHostException;
-           */
-  protected ServerLocationResponse queryLocators(ServerLocationRequest request) {
+  private ServerLocationResponse queryLocators(ServerLocationRequest request) {
-    ServerLocationResponse response = null;
+    ServerLocationResponse response;
-    if (response == null) {
-      return null;
-    }
-
-  protected void updateLocatorList(LocatorListResponse response) {
+  private void updateLocatorList(LocatorListResponse response) {
-    List<HostAddress> newLocatorAddresses = new ArrayList<HostAddress>(locatorResponse.size());
+    List<HostAddress> newLocatorAddresses = new ArrayList<>(locatorResponse.size());
-    for (Iterator<ServerLocation> itr = locatorResponse.iterator(); itr.hasNext();) {
-      ServerLocation locator = itr.next();
+    for (ServerLocation locator : locatorResponse) {
-      ArrayList<InetSocketAddress> removedLocators =
-          new ArrayList<InetSocketAddress>(oldLocators.getLocators());
+      ArrayList<InetSocketAddress> removedLocators = new ArrayList<>(oldLocators.getLocators());
-    pool.getStats().setInitialContacts(((LocatorList) locators.get()).size());
+    pool.getStats().setInitialContacts((locators.get()).size());
-        logger.info(String.format("Communication with locator %s failed with %s.",
-            new Object[] {l, ex}),
-            ex);
+        logger.info(String.format("Communication with locator %s failed with %s.", l, ex), ex);
-    protected AtomicInteger currentLocatorIndex = new AtomicInteger();
+    AtomicInteger currentLocatorIndex = new AtomicInteger();
-    public LocatorList(List<HostAddress> locators) {
-      Collections.sort(locators, SOCKET_ADDRESS_COMPARATOR);
+    LocatorList(List<HostAddress> locators) {
+      locators.sort(SOCKET_ADDRESS_COMPARATOR);
-    public List<HostAddress> getLocatorAddresses() {
+    List<HostAddress> getLocatorAddresses() {
