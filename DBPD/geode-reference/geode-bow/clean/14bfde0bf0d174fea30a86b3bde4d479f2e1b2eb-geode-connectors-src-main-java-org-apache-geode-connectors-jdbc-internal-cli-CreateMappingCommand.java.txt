Merge branch 'release/1.8.0'

-import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
-  static final String CREATE_MAPPING__PDX_CLASS_NAME = "pdx-class-name";
-  static final String CREATE_MAPPING__PDX_CLASS_NAME__HELP =
+  static final String CREATE_MAPPING__PDX_NAME = "pdx-name";
+  static final String CREATE_MAPPING__PDX_NAME__HELP =
-  static final String CREATE_MAPPING__VALUE_CONTAINS_PRIMARY_KEY = "value-contains-primary-key";
-  static final String CREATE_MAPPING__PRIMARY_KEY_IN_VALUE__HELP =
-      "If true, the primary key is contained in the PDX object, otherwise the region entry key is used for the primary key column value.";
-  static final String CREATE_MAPPING__FIELD_MAPPING = "field-mapping";
-  static final String CREATE_MAPPING__FIELD_MAPPING__HELP =
-      "Key value pairs of PDX field names to database column names formatted like \"key:value(,key:value)*\".";
-      @CliOption(key = CREATE_MAPPING__PDX_CLASS_NAME,
-          help = CREATE_MAPPING__PDX_CLASS_NAME__HELP) String pdxClassName,
-      @CliOption(key = CREATE_MAPPING__VALUE_CONTAINS_PRIMARY_KEY,
-          help = CREATE_MAPPING__PRIMARY_KEY_IN_VALUE__HELP, unspecifiedDefaultValue = "false",
-          specifiedDefaultValue = "true") boolean keyInValue,
-      @CliOption(key = CREATE_MAPPING__FIELD_MAPPING,
-          help = CREATE_MAPPING__FIELD_MAPPING__HELP) String[] fieldMappings) {
+      @CliOption(key = CREATE_MAPPING__PDX_NAME,
+          help = CREATE_MAPPING__PDX_NAME__HELP) String pdxName) {
-    ConnectorService.RegionMapping mapping = new ConnectorService.RegionMapping(regionName,
-        pdxClassName, table, connectionName, keyInValue);
-    mapping.setFieldMapping(fieldMappings);
+    RegionMapping mapping = new RegionMapping(regionName,
+        pdxName, table, connectionName);
-  public void updateClusterConfig(String group, CacheConfig config, Object element) {
-    ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) element;
-    ConnectorService service =
-        config.findCustomCacheElement("connector-service", ConnectorService.class);
-    if (service == null) {
-      service = new ConnectorService();
-      config.getCustomCacheElements().add(service);
+  public void updateClusterConfig(String group, CacheConfig cacheConfig, Object element) {
+    RegionMapping newCacheElement = (RegionMapping) element;
+    RegionMapping existingCacheElement = cacheConfig.findCustomRegionElement(
+        newCacheElement.getRegionName(), newCacheElement.getId(), RegionMapping.class);
+
+    if (existingCacheElement != null) {
+      cacheConfig
+          .getRegions()
+          .stream()
+          .filter(regionConfig -> regionConfig.getName().equals(newCacheElement.getRegionName()))
+          .forEach(
+              regionConfig -> regionConfig.getCustomRegionElements().remove(existingCacheElement));
-    service.getRegionMapping().add(mapping);
+
+    cacheConfig
+        .getRegions()
+        .stream()
+        .filter(regionConfig -> regionConfig.getName().equals(newCacheElement.getRegionName()))
+        .forEach(regionConfig -> regionConfig.getCustomRegionElements().add(newCacheElement));
