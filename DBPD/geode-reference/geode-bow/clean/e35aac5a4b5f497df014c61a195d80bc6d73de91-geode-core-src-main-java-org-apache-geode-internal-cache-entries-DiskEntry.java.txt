Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.cache.AbstractLRURegionMap;
+import org.apache.geode.internal.cache.InternalCache;
-  public void setValueWithContext(RegionEntryContext context, Object value);
+  void setValueWithContext(RegionEntryContext context, Object value);
-  public void handleValueOverflow(RegionEntryContext context);
+  void handleValueOverflow(RegionEntryContext context);
-  public boolean isRemovedFromDisk();
+  boolean isRemovedFromDisk();
-  public DiskId getDiskId();
+  DiskId getDiskId();
-  public int updateAsyncEntrySize(EvictionController capacityController);
+  int updateAsyncEntrySize(EvictionController capacityController);
-  public DiskEntry getPrev();
+  DiskEntry getPrev();
-  public DiskEntry getNext();
+  DiskEntry getNext();
-  public void setPrev(DiskEntry v);
+  void setPrev(DiskEntry v);
-  public void setNext(DiskEntry v);
+  void setNext(DiskEntry v);
-  public static final byte[] INVALID_BYTES = new byte[0];
+  byte[] INVALID_BYTES = new byte[0];
-  public static final byte[] LOCAL_INVALID_BYTES = new byte[0];
+  byte[] LOCAL_INVALID_BYTES = new byte[0];
-  public static final byte[] TOMBSTONE_BYTES = new byte[0];
+  byte[] TOMBSTONE_BYTES = new byte[0];
-  public static class Helper {
+  class Helper {
-        DM mgr, ByteArrayDataInput in, RegionEntryContext context, Version version) {
+        DistributionManager mgr, ByteArrayDataInput in, RegionEntryContext context,
+        Version version) {
-    public static interface ValueWrapper {
-      public boolean isSerialized();
+    public interface ValueWrapper {
+      boolean isSerialized();
-      public int getLength();
+      int getLength();
-      public byte getUserBits();
+      byte getUserBits();
-      public void sendTo(ByteBuffer bb, Flushable flushable) throws IOException;
+      void sendTo(ByteBuffer bb, Flushable flushable) throws IOException;
-      public String getBytesAsString();
+      String getBytesAsString();
-    public static interface Flushable {
-      public void flush() throws IOException;
+    public interface Flushable {
+      void flush() throws IOException;
-      public void flush(ByteBuffer bb, ByteBuffer chunkbb) throws IOException;
+      void flush(ByteBuffer bb, ByteBuffer chunkbb) throws IOException;
-            boolean maintainRVV = region.isConcurrencyChecksEnabled();
+            boolean maintainRVV = region.getConcurrencyChecksEnabled();
-      Object result =
-          OffHeapHelper.copyAndReleaseIfNeeded(getValueOffHeapOrDiskWithoutFaultIn(entry, region));
+      Object result = OffHeapHelper.copyAndReleaseIfNeeded(
+          getValueOffHeapOrDiskWithoutFaultIn(entry, region), region.getCache());
-          v = OffHeapHelper.copyAndReleaseIfNeeded(v);
+          v = OffHeapHelper.copyAndReleaseIfNeeded(v, region.getCache());
-                  value = getValueFromDisk(dr, did, in);
+                  value = getValueFromDisk(dr, did, in, dr.getCache());
-    private static Object getValueFromDisk(DiskRegionView dr, DiskId did, ByteArrayDataInput in) {
+    private static Object getValueFromDisk(DiskRegionView dr, DiskId did, ByteArrayDataInput in,
+        InternalCache cache) {
-            value = readSerializedValue(bb.getBytes(), bb.getVersion(), in, false);
+            value = readSerializedValue(bb.getBytes(), bb.getVersion(), in, false, cache);
-          ((AbstractLRURegionMap) recoveryStore.getRegionMap()).updateStats();
+          recoveryStore.getRegionMap().updateEvictionCounter();
-          Object value = getValueFromDisk(dr, did, null);
+          Object value = getValueFromDisk(dr, did, null, dr.getCache());
-        ByteArrayDataInput in, boolean forceDeserialize) {
+        ByteArrayDataInput in, boolean forceDeserialize, InternalCache cache) {
-        return CachedDeserializableFactory.create(valueBytes);
+        return CachedDeserializableFactory.create(valueBytes, cache);
-      final int oldSize = ((DiskRecoveryStore) region).calculateRegionEntryValueSize(entry);
+      final int oldSize = region.calculateRegionEntryValueSize(entry);
-                final int entryValSize =
-                    ((DiskRecoveryStore) region).calculateRegionEntryValueSize(entry);
+                final int entryValSize = region.calculateRegionEntryValueSize(entry);
-        boolean maintainRVV = region.isConcurrencyChecksEnabled() && dr.isBackup();
+        boolean maintainRVV = region.getConcurrencyChecksEnabled() && dr.isBackup();
-  public static class RecoveredEntry {
+  class RecoveredEntry {
