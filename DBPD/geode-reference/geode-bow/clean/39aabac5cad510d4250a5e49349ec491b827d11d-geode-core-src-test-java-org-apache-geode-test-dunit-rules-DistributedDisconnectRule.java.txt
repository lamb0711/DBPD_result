Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-// TODO:uncomment: import static org.apache.geode.test.dunit.DistributedTestRule.*;
+import static java.util.concurrent.TimeUnit.MINUTES;
+import com.google.common.base.Stopwatch;
+
+import org.apache.geode.admin.internal.AdminDistributedSystemImpl;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
- * Disconnects all remote DUnit JVMs including the Locator JVM.
+ * JUnit Rule that disconnects DistributedSystem in all VMs.
+ *
+ * <p>
+ * DistributedDisconnectRule can be used in DistributedTests to disconnect all VMs before or after
+ * each test:
+ *
+ * <pre>
+ * {@literal @}Rule
+ * public DistributedDisconnectRule distributedDisconnectRule = new DistributedDisconnectRule();
+ *
+ * {@literal @}Test
+ * public void createCacheInEveryDUnitVM() throws Exception {
+ *   cache = (InternalCache) new CacheFactory().create();
+ *   assertThat(cache.isClosed()).isFalse();
+ *   assertThat(cache.getInternalDistributedSystem().isConnected()).isTrue();
+ *
+ *   for (VM vm: Host.getHost(0).getAllVMs()) {
+ *     vm.invoke(() -> {
+ *       cache = (InternalCache) new CacheFactory().create();
+ *       assertThat(cache.isClosed()).isFalse();
+ *       assertThat(cache.getInternalDistributedSystem().isConnected()).isTrue();
+ *     });
+ *   }
+ * }
+ * </pre>
-      invoker().invokeInEveryVM(serializableRunnable());
+      invoker().invokeInEveryVMAndController(serializableRunnable());
-      invoker().invokeInEveryVM(serializableRunnable());
+      invoker().invokeInEveryVMAndController(serializableRunnable());
-        // TODO:uncomment: disconnectFromDS();
+        disconnect();
+  public static void disconnect() {
+    Stopwatch stopwatch = Stopwatch.createStarted();
+    InternalDistributedSystem system = InternalDistributedSystem.getConnectedInstance();
+
+    while (system != null && stopwatch.elapsed(MINUTES) < 10) {
+      system = InternalDistributedSystem.getConnectedInstance();
+      try {
+        system.disconnect();
+      } catch (Exception ignore) {
+        // ignored
+      }
+    }
+
+    AdminDistributedSystemImpl adminSystem = AdminDistributedSystemImpl.getConnectedInstance();
+    if (adminSystem != null) {
+      adminSystem.disconnect();
+    }
+  }
+
-    public Builder() {}
+    public Builder() {
+      // nothing
+    }
