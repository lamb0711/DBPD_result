GEODE-6156: add --id option to create jdbc-mapping (#2969)


-  public TableMetaDataView getTableMetaDataView(Connection connection, String tableName) {
+  public TableMetaDataView getTableMetaDataView(Connection connection, String tableName,
+      String ids) {
-        k -> computeTableMetaDataView(connection, k));
+        k -> computeTableMetaDataView(connection, k, ids));
-  private TableMetaDataView computeTableMetaDataView(Connection connection, String tableName) {
+  private TableMetaDataView computeTableMetaDataView(Connection connection, String tableName,
+      String ids) {
-        String key = getPrimaryKeyColumnNameFromMetaData(realTableName, metaData);
+        String key = getPrimaryKeyColumnNameFromMetaData(realTableName, metaData, ids);
-  private String getPrimaryKeyColumnNameFromMetaData(String tableName, DatabaseMetaData metaData)
+  private String getPrimaryKeyColumnNameFromMetaData(String tableName, DatabaseMetaData metaData,
+      String ids)
+    if (ids != null && !ids.isEmpty()) {
+      if (!doesColumnExistInTable(tableName, metaData, ids)) {
+        throw new JdbcConnectorException(
+            "The table " + tableName + " does not have a column named " + ids);
+      }
+      return ids;
+    }
+
+  private boolean doesColumnExistInTable(String tableName, DatabaseMetaData metaData,
+      String columnName) throws SQLException {
+    int caseInsensitiveMatches = 0;
+    try (ResultSet columnData = metaData.getColumns(null, null, tableName, "%")) {
+      while (columnData.next()) {
+        String realColumnName = columnData.getString("COLUMN_NAME");
+        if (columnName.equals(realColumnName)) {
+          return true;
+        } else if (columnName.equalsIgnoreCase(realColumnName)) {
+          caseInsensitiveMatches++;
+        }
+      }
+    }
+    if (caseInsensitiveMatches > 1) {
+      throw new JdbcConnectorException(
+          "The table " + tableName + " has more than one column that matches " + columnName);
+    }
+    return caseInsensitiveMatches != 0;
+  }
