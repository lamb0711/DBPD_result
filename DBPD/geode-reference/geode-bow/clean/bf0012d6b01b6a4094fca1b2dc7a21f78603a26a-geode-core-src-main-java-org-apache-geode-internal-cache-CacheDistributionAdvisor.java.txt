Feature/geode 6807 1 (#4711)

* GEODE-6807: cache adviseUpdate and adviseAllEventsOrCached

* GEODE-6807: update with comments

* GEODE-6807: update adviseAllEventsOrCached method

* GEODE-6807: update of solution with checking of version

* GEODE-6807: remove assert from new code

* GEODE-6807: Added UT and inRecovery update check

* GEODE-6807: Added Concurrent Test

* GEODE-6807: Added missing @Test and rebase

* GEODE-6807: fix for race conditions

+  private Set<InternalDistributedMember> adviseSetforAllEvents = Collections.emptySet();
+  private volatile long adviseAllEventsVersion = -1;
+
+  private Set<InternalDistributedMember> adviseSetforUpdate = Collections.emptySet();
+  private volatile long adviseUpdateVersion = -1;
+
+  private volatile long inRecoveryVersion = 0;
+  private volatile long adviseInRecoveryVersion = -1;
+
+  public synchronized void incInRecoveryVersion() {
+    inRecoveryVersion++;
+  }
+
-   * @param excludeInRecovery if true then members in recovery are excluded
-  private Set<InternalDistributedMember> adviseAllEventsOrCached(final boolean excludeInRecovery)
+  Set<InternalDistributedMember> adviseAllEventsOrCached()
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      if (excludeInRecovery && cp.inRecovery) {
-        return false;
+
+    // minimize volatile reads by copying ref to local var
+    long tempProfilesVersion = profilesVersion; // volatile read
+    long tempInRecoveryVersion = inRecoveryVersion; // volatile read
+
+    if (adviseAllEventsVersion != tempProfilesVersion
+        || adviseInRecoveryVersion != tempInRecoveryVersion) {
+      synchronized (adviseSetforAllEvents) {
+        if (adviseAllEventsVersion != tempProfilesVersion
+            || adviseInRecoveryVersion != tempInRecoveryVersion) {
+
+          adviseSetforAllEvents = Collections.unmodifiableSet(adviseFilter(profile -> {
+            CacheProfile cp = (CacheProfile) profile;
+            if (cp.getInRecovery()) {
+              return false;
+            }
+            return cp.cachedOrAllEventsWithListener();
+          }));
+          adviseAllEventsVersion = tempProfilesVersion;
+          adviseInRecoveryVersion = tempInRecoveryVersion;
+        }
-      return cp.cachedOrAllEventsWithListener();
-    });
+    }
+    return adviseSetforAllEvents;
+
-      return adviseAllEventsOrCached(true/* fixes 41147 */);
+      return adviseAllEventsOrCached();
-      return adviseFilter(profile -> {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        DataPolicy dp = cp.dataPolicy;
-        return dp.withReplication()
-            || (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
-      });
+
+      // minimize volatile reads by copying ref to local var
+      long tempProfilesVersion = profilesVersion; // volatile read
+
+      if (adviseUpdateVersion != tempProfilesVersion) {
+        synchronized (adviseSetforUpdate) {
+          if (adviseUpdateVersion != tempProfilesVersion) {
+
+            adviseSetforUpdate = Collections.unmodifiableSet(adviseFilter(profile -> {
+              CacheProfile cp = (CacheProfile) profile;
+              DataPolicy dp = cp.getDataPolicy();
+              return dp.withReplication()
+                  || (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
+            }));
+            adviseUpdateVersion = tempProfilesVersion;
+          }
+        }
+      }
+      return adviseSetforUpdate;
-    return adviseAllEventsOrCached(true);
+    return adviseAllEventsOrCached();
-      return !cp.inRecovery;
+      return !cp.getInRecovery();
-      if (prof.inRecovery) {
+      if (prof.getInRecovery()) {
-      if (profile.inRecovery) {
+      if (profile.getInRecovery()) {
+
-    public boolean inRecovery = false;
+    private boolean inRecovery = false;
+    public boolean getInRecovery() {
+      return inRecovery;
+    };
+
+    public void setInRecovery(boolean recovery) {
+      inRecovery = recovery;
+    };
+
+    public DataPolicy getDataPolicy() {
+      return dataPolicy;
+    }
+
