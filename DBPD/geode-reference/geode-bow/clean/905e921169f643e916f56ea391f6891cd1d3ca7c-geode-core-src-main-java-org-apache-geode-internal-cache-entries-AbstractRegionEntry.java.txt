GEODE-6526: Removing call to removeTombstone during entry destroy (#3348)

* GEODE-6526: Removing call to removeTombstone during entry destroy

During destroy entry (tombstone) under region entry lock, if the
entry had a lower region version than the recorded gc version for
that member, the entry was removed immediately which could result
in dead-lock with tombstone gc thread.

Instead of removing the entry during destroy, it was scheduled to
remove during tombstone gc.

-    if (region.getServerProxy() == null && region.getVersionVector()
-        .isTombstoneTooOld(version.getMemberID(), version.getRegionVersion())) {
-      // distributed gc with higher vector version preempts this operation
-      if (!isTombstone()) {
-        basicMakeTombstone(region);
-        region.getCachePerfStats().incTombstoneCount(1);
-      }
-      ((DiskRecoveryStore) region).getRegionMap().removeTombstone(this, version, false, true);
-    } else {
-      if (isTombstone()) {
-        // unschedule the old tombstone
-        region.unscheduleTombstone(this);
-      }
-      setRecentlyUsed(region);
-      boolean newEntry = getValueAsToken() == Token.REMOVED_PHASE1;
-      basicMakeTombstone(region);
-      region.scheduleTombstone(this, version);
-      if (newEntry) {
-        // bug #46631 - entry count is decremented by scheduleTombstone but this is a new entry
-        region.getCachePerfStats().incEntryCount(1);
-      }
+
+    boolean wasTombstone = isTombstone();
+    setRecentlyUsed(region);
+    boolean newEntry = getValueAsToken() == Token.REMOVED_PHASE1;
+    basicMakeTombstone(region);
+    region.scheduleTombstone(this, version, wasTombstone);
+    if (newEntry) {
+      // bug #46631 - entry count is decremented by scheduleTombstone but this is a new entry
+      region.getCachePerfStats().incEntryCount(1);
