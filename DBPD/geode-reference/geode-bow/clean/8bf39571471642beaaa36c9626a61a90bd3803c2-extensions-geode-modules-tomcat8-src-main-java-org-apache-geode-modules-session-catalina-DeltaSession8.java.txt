Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
-public class DeltaSession8 extends StandardSession implements DataSerializable, Delta, GatewayDelta, Sizeable, DeltaSessionInterface {
+public class DeltaSession8 extends StandardSession
+    implements DataSerializable, Delta, GatewayDelta, Sizeable, DeltaSessionInterface {
-  private final List<DeltaSessionAttributeEvent> eventQueue = new ArrayList<DeltaSessionAttributeEvent>();
+  private final List<DeltaSessionAttributeEvent> eventQueue =
+      new ArrayList<DeltaSessionAttributeEvent>();
+
-   * Construct a new <code>Session</code> associated with no <code>Manager</code>. The <code>Manager</code> will be
-   * assigned later using {@link #setOwner(Object)}.
+   * Construct a new <code>Session</code> associated with no <code>Manager</code>. The
+   * <code>Manager</code> will be assigned later using {@link #setOwner(Object)}.
-        sp = (Principal)BlobHelper.deserializeBlob(this.serializedPrincipal);
+        sp = (Principal) BlobHelper.deserializeBlob(this.serializedPrincipal);
-        builder.append(this)
-               .append(
-                 ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception");
+        builder.append(this).append(
+            ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception");
-      DeltaSessionAttributeEvent event = new DeltaSessionUpdateAttributeEvent(name, serializedValue);
+      DeltaSessionAttributeEvent event =
+          new DeltaSessionUpdateAttributeEvent(name, serializedValue);
-        builder.append(this)
-               .append(": Attribute named ")
-               .append(name)
-               .append(" contains a byte[] that cannot be deserialized due to the following exception");
+        builder.append(this).append(": Attribute named ").append(name).append(
+            " contains a byte[] that cannot be deserialized due to the following exception");
-    //getOperatingRegion().destroy(this.id, true); // already done in super (remove)
+    // getOperatingRegion().destroy(this.id, true); // already done in super (remove)
-  public void applyAttributeEvents(Region<String, DeltaSessionInterface> region, List<DeltaSessionAttributeEvent> events) {
+  public void applyAttributeEvents(Region<String, DeltaSessionInterface> region,
+      List<DeltaSessionAttributeEvent> events) {
-  private void queueAttributeEvent(DeltaSessionAttributeEvent event, boolean checkAddToCurrentGatewayDelta) {
+  private void queueAttributeEvent(DeltaSessionAttributeEvent event,
+      boolean checkAddToCurrentGatewayDelta) {
-          this.currentGatewayDeltaEvent = new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, events);
+          this.currentGatewayDeltaEvent =
+              new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, events);
-    if (!isValidInternal()) throw new IllegalStateException("commit: Session " + getId() +
-                                                            " already invalidated");
-    //          (STRING_MANAGER.getString("deltaSession.commit.ise", getId()));
+    if (!isValidInternal())
+      throw new IllegalStateException("commit: Session " + getId() + " already invalidated");
+    // (STRING_MANAGER.getString("deltaSession.commit.ise", getId()));
-          new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, this.eventQueue));
+            new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, this.eventQueue));
-      setCurrentGatewayDeltaEvent(new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, events));
+      setCurrentGatewayDeltaEvent(
+          new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, events));
-    for (Enumeration<String> e = getAttributeNames(); e.hasMoreElements(); ) {
+    for (Enumeration<String> e = getAttributeNames(); e.hasMoreElements();) {
-      builder.append(this)
-             .append(": Object ")
-             .append(obj)
-             .append(" cannot be serialized due to the following exception");
+      builder.append(this).append(": Object ").append(obj)
+          .append(" cannot be serialized due to the following exception");
-    return new StringBuilder().append("DeltaSession[")
-                              .append("id=")
-                              .append(getId())
-                              .append("; context=")
-                              .append(this.contextName)
-                              .append("; sessionRegionName=")
-                              .append(this.sessionRegionName)
-                              .append("; operatingRegionName=")
-                              .append(getOperatingRegion() == null ? "unset" : getOperatingRegion().getFullPath())
-                              .append("]")
-                              .toString();
+    return new StringBuilder().append("DeltaSession[").append("id=").append(getId())
+        .append("; context=").append(this.contextName).append("; sessionRegionName=")
+        .append(this.sessionRegionName).append("; operatingRegionName=")
+        .append(getOperatingRegion() == null ? "unset" : getOperatingRegion().getFullPath())
+        .append("]").toString();
-    // Iterate the values and serialize them if necessary before sending them to the server. This makes the application classes unnecessary on the server.
+    // Iterate the values and serialize them if necessary before sending them to the server. This
+    // makes the application classes unnecessary on the server.
-    for (Iterator i = this.attributes.entrySet().iterator(); i.hasNext(); ) {
+    for (Iterator i = this.attributes.entrySet().iterator(); i.hasNext();) {
-  protected ConcurrentMap readInAttributes(final DataInput in) throws IOException, ClassNotFoundException {
+  protected ConcurrentMap readInAttributes(final DataInput in)
+      throws IOException, ClassNotFoundException {
