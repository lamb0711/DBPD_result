GEODE-2929: remove superfluous uses of final from internal classes

-  private final boolean testEventFlag(short mask) {
+  private boolean testEventFlag(short mask) {
-  private final void setEventFlag(short mask, boolean on) {
+  private void setEventFlag(short mask, boolean on) {
-  public final void setEvicted() {
+  public void setEvicted() {
-  public final boolean isEvicted() {
+  public boolean isEvicted() {
-  public final boolean isPendingSecondaryExpireDestroy() {
+  public boolean isPendingSecondaryExpireDestroy() {
-  public final void setPendingSecondaryExpireDestroy(boolean value) {
+  public void setPendingSecondaryExpireDestroy(boolean value) {
-  public final EventID getEventId() {
+  public EventID getEventId() {
-  public final Object getOldValue() {
+  public Object getOldValue() {
-  public final Object getRawNewValueAsHeapObject() {
+  public Object getRawNewValueAsHeapObject() {
-  public final Object getRawNewValue() {
+  public Object getRawNewValue() {
-  protected final Object basicGetNewValue() {
+  protected Object basicGetNewValue() {
-  public final Object getRawOldValueAsHeapObject() {
+  public Object getRawOldValueAsHeapObject() {
-  public final Object getRawOldValue() {
+  public Object getRawOldValue() {
-  public final Object getOldValueAsOffHeapDeserializedOrRaw() {
+  public Object getOldValueAsOffHeapDeserializedOrRaw() {
-  public final Object getNewValue() {
+  public Object getNewValue() {
-  public final String getNewValueStringForm() {
+  public String getNewValueStringForm() {
-  public final String getOldValueStringForm() {
+  public String getOldValueStringForm() {
-  public final void setNewValue(@Retained(ENTRY_EVENT_NEW_VALUE) Object obj) {
+  public void setNewValue(@Retained(ENTRY_EVENT_NEW_VALUE) Object obj) {
-  public final LocalRegion getRegion() {
+  public LocalRegion getRegion() {
-  public final void exportNewValue(NewValueImporter importer) {
+  public void exportNewValue(NewValueImporter importer) {
-  public final void exportOldValue(OldValueImporter importer) {
+  public void exportOldValue(OldValueImporter importer) {
-  public final Object getNewValueAsOffHeapDeserializedOrRaw() {
+  public Object getNewValueAsOffHeapDeserializedOrRaw() {
-  public final Object getDeserializedValue() {
+  public Object getDeserializedValue() {
-  public final byte[] getSerializedValue() {
+  public byte[] getSerializedValue() {
-  private final void makeSerializedNewValue(boolean isSynced) {
+  private void makeSerializedNewValue(boolean isSynced) {
-  public final void setSerializedNewValue(byte[] serializedValue) {
+  public void setSerializedNewValue(byte[] serializedValue) {
-  public final boolean hasOldValue() {
+  public boolean hasOldValue() {
-  public final boolean isOldValueAToken() {
+  public boolean isOldValueAToken() {
-    protected static final boolean isSet(short flags, short mask) {
+    protected static boolean isSet(short flags, short mask) {
-    protected static final short set(short flags, short mask, boolean on) {
+    protected static short set(short flags, short mask, boolean on) {
-  public final SerializedCacheValue<?> getSerializedOldValue() {
+  public SerializedCacheValue<?> getSerializedOldValue() {
-  public static final class SerializedCacheValueImpl
+  public static class SerializedCacheValueImpl
