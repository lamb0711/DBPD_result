GEODE-7049: Add timeout to Java native client Execute::execute() methods

-  protected ResultCollector executeFunction(final Function function) {
+  protected ResultCollector executeFunction(final Function function, int timeoutMs) {
-          return executeOnServer(function, defaultCollector, hasResult);
+          return executeOnServer(function, defaultCollector, hasResult, timeoutMs);
-          return executeOnServer(function, rc, hasResult);
+          return executeOnServer(function, rc, hasResult, timeoutMs);
-      boolean isHA, boolean optimizeForWrite) {
+      boolean isHA, boolean optimizeForWrite, int timeoutMs) {
-          return executeOnServer(functionId, defaultCollector, hasResult, isHA, optimizeForWrite);
+          return executeOnServer(functionId, defaultCollector, hasResult, isHA, optimizeForWrite,
+              timeoutMs);
-          return executeOnServer(functionId, rc, hasResult, isHA, optimizeForWrite);
+          return executeOnServer(functionId, rc, hasResult, isHA, optimizeForWrite, timeoutMs);
-      byte hasResult) throws FunctionException {
+      byte hasResult, int timeoutMs) throws FunctionException {
-          getTimeoutMs());
+          timeoutMs);
-      byte hasResult, boolean isHA, boolean optimizeForWrite) throws FunctionException {
+      byte hasResult, boolean isHA, boolean optimizeForWrite, int timeoutMs)
+      throws FunctionException {
-          optimizeForWrite, getTimeoutMs());
+          optimizeForWrite, timeoutMs);
+    return execute(functionName, getTimeoutMs());
+  }
+
+  @Override
+  public ResultCollector execute(final String functionName, int timeoutMs) {
-      return executeFunction(functionName, hasResult, isHA, optimizeForWrite);
+      return executeFunction(functionName, hasResult, isHA, optimizeForWrite, timeoutMs);
-      return executeFunction(functionObject);
+      return executeFunction(functionObject, timeoutMs);
