GEODE-8330: Structural Improvements to Versioning

Follow-on to GEODE-8240, this commit eliminates redundancy in 
versioning code and provides a single way to convert a short
to a version and a single way to acquire a known version from
a (possibly unknown) version.
-public class VersionOrdinalImpl implements VersionOrdinal {
+/**
+ * Extend this class to get short ordinal storage and access,
+ * and comparison, hashing, and toString implementations.
+ *
+ * Package private since this class is an implementation detail.
+ */
+abstract class AbstractVersion implements VersionOrdinal {
-  protected final short ordinal;
+  private final short ordinal;
-   * Package-private so only the Versioning factory can access this constructor.
-   *
+   * Protected to require subclassing.
-  VersionOrdinalImpl(final short ordinal) {
+  protected AbstractVersion(final short ordinal) {
-  /**
-   * TODO: eliminate this legacy method in favor of requiring callers to construct a
-   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).
-   */
-  public int compareTo(final short other) {
-    // short min/max can't overflow int, so use (a-b)
-    final int thisOrdinal = this.ordinal;
-    final int otherOrdinal = other;
-    return thisOrdinal - otherOrdinal;
-  }
-
-    if (other instanceof VersionOrdinalImpl) {
-      return this.ordinal == ((VersionOrdinalImpl) other).ordinal;
+    if (other instanceof VersionOrdinal) {
+      return ordinal() == ((VersionOrdinal) other).ordinal();
-  public boolean equals(final VersionOrdinal other) {
-    return other != null && this.ordinal == other.ordinal();
-  }
-
-    result = mult * result + this.ordinal;
+    result = mult * result + ordinal();
-    return toString(ordinal);
+    return getClass().getSimpleName() + "[ordinal=" + ordinal() + ']';
-   * TODO: eliminate this legacy method in favor of requiring callers to construct a
-   * VersionOrdinalImpl. Inline this logic up in toString().
-   */
-  public static String toString(short ordinal) {
-    return "VersionOrdinal[ordinal=" + ordinal + ']';
-  }
-
-
-  /**
+  private int compareTo(final short other) {
+    // short min/max can't overflow int, so use (a-b)
+    final int thisOrdinal = ordinal();
+    final int otherOrdinal = other;
+    return thisOrdinal - otherOrdinal;
+  }
+
