Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This is headless shell which can be used to submit random commands and get command-result It is used for commands
- * testing but can be used as for anything like programmatically sending commands to operate on GemFire Distributed
- * systems. TODO : Merge HeadlessGfsh and HeadlessGfshShell TODO : Provide constructor for optionally specifying
- * GfshConfig to provide logDirectory and logLevel
+ * This is headless shell which can be used to submit random commands and get command-result It is
+ * used for commands testing but can be used as for anything like programmatically sending commands
+ * to operate on GemFire Distributed systems. TODO : Merge HeadlessGfsh and HeadlessGfshShell TODO :
+ * Provide constructor for optionally specifying GfshConfig to provide logDirectory and logLevel
-  public HeadlessGfsh(String name, int timeout, String parentDir) throws ClassNotFoundException, IOException {
+  public HeadlessGfsh(String name, int timeout, String parentDir)
+      throws ClassNotFoundException, IOException {
-  public HeadlessGfsh(String name, int timeout, Properties envProps, String parentDir) throws ClassNotFoundException, IOException {
+  public HeadlessGfsh(String name, int timeout, Properties envProps, String parentDir)
+      throws ClassNotFoundException, IOException {
-    // This allows us to avoid race conditions during startup - in particular a NPE on the ConsoleReader which is
+    // This allows us to avoid race conditions during startup - in particular a NPE on the
+    // ConsoleReader which is
-  //TODO : Have non-blocking method also where we move executeCommand call to separate thread-pool
+  // TODO : Have non-blocking method also where we move executeCommand call to separate thread-pool
-    //Dont wait for when some command calls gfsh.stop();
-    if (shell.stopCalledThroughAPI) return null;
+    // Dont wait for when some command calls gfsh.stop();
+    if (shell.stopCalledThroughAPI)
+      return null;
-    protected HeadlessGfshShell(String testName, ResultHandler handler, String parentDir) throws ClassNotFoundException, IOException {
-      super(false, new String[]{}, new HeadlessGfshConfig(testName, parentDir));
+    protected HeadlessGfshShell(String testName, ResultHandler handler, String parentDir)
+        throws ClassNotFoundException, IOException {
+      super(false, new String[] {}, new HeadlessGfshConfig(testName, parentDir));
-        //signal waiting queue with error condition with empty output
+        // signal waiting queue with error condition with empty output
-     * We override this method just to fool runner thread in reading from nothing. It waits for Condition endOfShell
-     * which is signalled when terminate is called. This achieves clean shutdown of runner thread.
+     * We override this method just to fool runner thread in reading from nothing. It waits for
+     * Condition endOfShell which is signalled when terminate is called. This achieves clean
+     * shutdown of runner thread.
-            //e.printStackTrace();
+            // e.printStackTrace();
-     * This prints out error messages when Exceptions occur in shell. Capture it and set error flag=true and send
-     * ERROR_RESULT on the queue to signal thread waiting for CommandResult
+     * This prints out error messages when Exceptions occur in shell. Capture it and set error
+     * flag=true and send ERROR_RESULT on the queue to signal thread waiting for CommandResult
-      //signal waiting queue with error condition
+      // signal waiting queue with error condition
-     * This prints out error messages when Exceptions occur in shell. Capture it and set error flag=true and send
-     * ERROR_RESULT on the queue to signal thread waiting for CommandResult
+     * This prints out error messages when Exceptions occur in shell. Capture it and set error
+     * flag=true and send ERROR_RESULT on the queue to signal thread waiting for CommandResult
-      //signal waiting queue with error condition
+      // signal waiting queue with error condition
-        String fileName = new File(parentDir, (getFileNamePrefix() + "-gfsh.history")).getAbsolutePath();
+        String fileName =
+            new File(parentDir, (getFileNamePrefix() + "-gfsh.history")).getAbsolutePath();
