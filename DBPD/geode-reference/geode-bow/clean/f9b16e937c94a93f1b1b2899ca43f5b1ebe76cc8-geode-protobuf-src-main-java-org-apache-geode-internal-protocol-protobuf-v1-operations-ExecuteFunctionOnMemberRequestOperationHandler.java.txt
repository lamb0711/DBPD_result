GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

-import java.util.HashSet;
-import java.util.Set;
-import com.google.protobuf.ProtocolStringList;
-
-import org.apache.geode.cache.execute.Execution;
-import org.apache.geode.cache.execute.FunctionService;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.protocol.protobuf.v1.BasicTypes;
-import org.apache.geode.internal.protocol.protobuf.v1.Failure;
+import org.apache.geode.internal.protocol.operations.ProtobufOperationHandler;
-public class ExecuteFunctionOnMemberRequestOperationHandler extends
-    AbstractFunctionRequestOperationHandler<ExecuteFunctionOnMemberRequest, ExecuteFunctionOnMemberResponse> {
-
+public class ExecuteFunctionOnMemberRequestOperationHandler implements
+    ProtobufOperationHandler<ExecuteFunctionOnMemberRequest, ExecuteFunctionOnMemberResponse> {
-  protected Set<?> parseFilter(ProtobufSerializationService serializationService,
-      ExecuteFunctionOnMemberRequest request) throws EncodingException {
-    // filters are not allowed on functions not associated with regions
-    return null;
+  public Result<ExecuteFunctionOnMemberResponse> process(
+      ProtobufSerializationService serializationService, ExecuteFunctionOnMemberRequest request,
+      MessageExecutionContext messageExecutionContext)
+      throws InvalidExecutionContextException, DecodingException, EncodingException {
+
+    final String functionID = request.getFunctionID();
+    List<String> memberNameList = request.getMemberNameList();
+    Object arguments = getFunctionArguments(request, serializationService);
+
+    List<Object> results = messageExecutionContext.getAuthorizingCache().getFunctionService()
+        .executeFunctionOnMember(functionID, arguments, memberNameList);
+
+    final ExecuteFunctionOnMemberResponse.Builder responseMessage =
+        ExecuteFunctionOnMemberResponse.newBuilder();
+
+    results.stream().map(serializationService::encode).forEach(responseMessage::addResults);
+
+    return Success.of(responseMessage.build());
-  @Override
-  protected String getFunctionID(ExecuteFunctionOnMemberRequest request) {
-    return request.getFunctionID();
-  }
-
-  @Override
-  protected String getRegionName(ExecuteFunctionOnMemberRequest request) {
-    // region name is not allowed in onMember invocation
-    return null;
-  }
-
-  @Override
-  protected Object getExecutionTarget(ExecuteFunctionOnMemberRequest request, String regionName,
-      MessageExecutionContext executionContext) throws InvalidExecutionContextException {
-
-    ProtocolStringList memberNameList = request.getMemberNameList();
-
-    Set<DistributedMember> memberIds = new HashSet<>(memberNameList.size());
-    DistributionManager distributionManager = executionContext.getCache().getDistributionManager();
-    for (String name : memberNameList) {
-      DistributedMember member = distributionManager.getMemberWithName(name);
-      if (member == null) {
-        return Failure.of(BasicTypes.ErrorCode.NO_AVAILABLE_SERVER,
-            "Member " + name + " not found to execute \"" + request.getFunctionID() + "\"");
-      }
-      memberIds.add(member);
-    }
-    if (memberIds.isEmpty()) {
-      return Failure.of(BasicTypes.ErrorCode.NO_AVAILABLE_SERVER,
-          "No members found to execute \"" + request.getFunctionID() + "\"");
-    }
-    return memberIds;
-  }
-
-  @Override
-  protected Object getFunctionArguments(ExecuteFunctionOnMemberRequest request,
+  private Object getFunctionArguments(ExecuteFunctionOnMemberRequest request,
-
-  @Override
-  protected Execution getFunctionExecutionObject(Object executionTarget) {
-    Set<DistributedMember> memberIds = (Set<DistributedMember>) executionTarget;
-    if (memberIds.size() == 1) {
-      return FunctionService.onMember(memberIds.iterator().next());
-    } else {
-      return FunctionService.onMembers(memberIds);
-    }
-  }
-
-  @Override
-  protected Result buildResultMessage(ProtobufSerializationService serializationService,
-      List<Object> results) throws EncodingException {
-    final ExecuteFunctionOnMemberResponse.Builder responseMessage =
-        ExecuteFunctionOnMemberResponse.newBuilder();
-    for (Object result : results) {
-      responseMessage.addResults(serializationService.encode(result));
-    }
-    return Success.of(responseMessage.build());
-  }
-
-  @Override
-  protected Result buildResultMessage(ProtobufSerializationService serializationService) {
-    return Success.of(ExecuteFunctionOnMemberResponse.newBuilder().build());
-  }
-
