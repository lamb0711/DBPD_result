Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    for(int i =0; i < numberOfExecutions(); i++) {
+    for (int i = 0; i < numberOfExecutions(); i++) {
-    region = cache.createClientRegionFactory(ClientRegionShortcut.PROXY)
-      .create(REGION);
+    region = cache.createClientRegionFactory(ClientRegionShortcut.PROXY).create(REGION);
-      getCache().createRegionFactory(RegionShortcut.PARTITION)
-        .create(REGION);
-      });
+      getCache().createRegionFactory(RegionShortcut.PARTITION).create(REGION);
+    });
-   * Test that a custom result collector will still receive all partial
-   * results from other members when one source fails
+   * Test that a custom result collector will still receive all partial results from other members
+   * when one source fails
-    //Only run this test if there is more than two members
+    // Only run this test if there is more than two members
-    //Execute a function which will close the cache on one source.
+    // Execute a function which will close the cache on one source.
-      ResultCollector rc = getExecution()
-        .withCollector(customCollector)
-        .execute(new BucketMovingNonHAFunction(firstMember, secondMember));
+      ResultCollector rc = getExecution().withCollector(customCollector)
+          .execute(new BucketMovingNonHAFunction(firstMember, secondMember));
-    } catch(Exception expected) {
-      //do nothing
+    } catch (Exception expected) {
+      // do nothing
-   * A function which will close the cache if the given source matches
-   * the source executing this function
+   * A function which will close the cache if the given source matches the source executing this
+   * function
-    public BucketMovingNonHAFunction(final InternalDistributedMember source, final InternalDistributedMember destination) {
+    public BucketMovingNonHAFunction(final InternalDistributedMember source,
+        final InternalDistributedMember destination) {
-      final InternalDistributedMember myId = InternalDistributedSystem.getAnyInstance().getDistributedMember();
-      //Move all buckets to the destination
+      final InternalDistributedMember myId =
+          InternalDistributedSystem.getAnyInstance().getDistributedMember();
+      // Move all buckets to the destination
-        PartitionRegionHelper.moveData(regionFunctionContext.getDataSet(), source, destination, 100);
+        PartitionRegionHelper.moveData(regionFunctionContext.getDataSet(), source, destination,
+            100);
