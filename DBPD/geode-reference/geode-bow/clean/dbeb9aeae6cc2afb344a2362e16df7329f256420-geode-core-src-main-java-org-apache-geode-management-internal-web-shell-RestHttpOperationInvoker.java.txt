Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The RestHttpOperationInvoker class is an implementation of the OperationInvoker interface that translates (adapts) 
- * GemFire shell command invocations into HTTP requests to a corresponding REST API call hosted by the GemFire Manager's
- * HTTP service using the Spring RestTemplate.
+ * The RestHttpOperationInvoker class is an implementation of the OperationInvoker interface that
+ * translates (adapts) GemFire shell command invocations into HTTP requests to a corresponding REST
+ * API call hosted by the GemFire Manager's HTTP service using the Spring RestTemplate.
-  
+
-  // the HttpOperationInvoker used when this RestHttpOperationInvoker is unable to resolve the correct REST API
+  // the HttpOperationInvoker used when this RestHttpOperationInvoker is unable to resolve the
+  // correct REST API
-   * Constructs an instance of the RestHttpOperationInvoker class initialized with the given link index containing links
-   * referencing all REST API web service endpoints.  This constructor should only be used for testing purposes.
+   * Constructs an instance of the RestHttpOperationInvoker class initialized with the given link
+   * index containing links referencing all REST API web service endpoints. This constructor should
+   * only be used for testing purposes.
-   * @param linkIndex the LinkIndex containing Links to all REST API web service endpoints in GemFire's REST interface.
+   * @param linkIndex the LinkIndex containing Links to all REST API web service endpoints in
+   *        GemFire's REST interface.
-    assertNotNull(linkIndex, "The Link Index resolving commands to REST API web service endpoints cannot be null!");
+    assertNotNull(linkIndex,
+        "The Link Index resolving commands to REST API web service endpoints cannot be null!");
-   * Constructs an instance of the RestHttpOperationInvoker class initialized with the given link index containing links
-   * referencing all REST API web service endpoints.  In addition, a reference to the instance of GemFire shell (Gfsh)
-   * using this RestHttpOperationInvoker to send command invocations to the GemFire Manager's HTTP service via HTTP
-   * for processing is required in order to interact with the shell and provide feedback to the user.
+   * Constructs an instance of the RestHttpOperationInvoker class initialized with the given link
+   * index containing links referencing all REST API web service endpoints. In addition, a reference
+   * to the instance of GemFire shell (Gfsh) using this RestHttpOperationInvoker to send command
+   * invocations to the GemFire Manager's HTTP service via HTTP for processing is required in order
+   * to interact with the shell and provide feedback to the user.
-   * @param linkIndex the LinkIndex containing Links to all REST API web service endpoints in GemFire' REST interface.
-   * @param gfsh a reference to the instance of the GemFire shell using this OperationInvoker to process commands.
-   * @see #RestHttpOperationInvoker(org.apache.geode.management.internal.web.domain.LinkIndex, org.apache.geode.management.internal.cli.shell.Gfsh,  Map)
+   * @param linkIndex the LinkIndex containing Links to all REST API web service endpoints in
+   *        GemFire' REST interface.
+   * @param gfsh a reference to the instance of the GemFire shell using this OperationInvoker to
+   *        process commands.
+   * @see #RestHttpOperationInvoker(org.apache.geode.management.internal.web.domain.LinkIndex,
+   *      org.apache.geode.management.internal.cli.shell.Gfsh, Map)
-  public RestHttpOperationInvoker(final LinkIndex linkIndex, final Gfsh gfsh, Map<String,String> securityProperties) {
+  public RestHttpOperationInvoker(final LinkIndex linkIndex, final Gfsh gfsh,
+      Map<String, String> securityProperties) {
-   * Constructs an instance of the RestHttpOperationInvoker class initialized with the given link index containing links
-   * referencing all REST API web service endpoints.  In addition, a reference to the instance of GemFire shell (Gfsh)
-   * using this RestHttpOperationInvoker to send command invocations to the GemFire Manager's HTTP service via HTTP
-   * for processing is required in order to interact with the shell and provide feedback to the user.  Finally, a URL
-   * to the HTTP service running in the GemFire Manager is specified as the base location for all HTTP requests.
+   * Constructs an instance of the RestHttpOperationInvoker class initialized with the given link
+   * index containing links referencing all REST API web service endpoints. In addition, a reference
+   * to the instance of GemFire shell (Gfsh) using this RestHttpOperationInvoker to send command
+   * invocations to the GemFire Manager's HTTP service via HTTP for processing is required in order
+   * to interact with the shell and provide feedback to the user. Finally, a URL to the HTTP service
+   * running in the GemFire Manager is specified as the base location for all HTTP requests.
-   * @param linkIndex the LinkIndex containing Links to all REST API web service endpoints in GemFire's REST interface.
-   * @param gfsh a reference to the instance of the GemFire shell using this OperationInvoker to process commands.
-   * @param baseUrl the String specifying the base URL to the GemFire Manager's HTTP service, REST interface.
+   * @param linkIndex the LinkIndex containing Links to all REST API web service endpoints in
+   *        GemFire's REST interface.
+   * @param gfsh a reference to the instance of the GemFire shell using this OperationInvoker to
+   *        process commands.
+   * @param baseUrl the String specifying the base URL to the GemFire Manager's HTTP service, REST
+   *        interface.
-  public RestHttpOperationInvoker(final LinkIndex linkIndex, final Gfsh gfsh, final String baseUrl, Map<String,String> securityProperties) {
+  public RestHttpOperationInvoker(final LinkIndex linkIndex, final Gfsh gfsh, final String baseUrl,
+      Map<String, String> securityProperties) {
-    assertNotNull(linkIndex, "The Link Index resolving commands to REST API web service endpoints cannot be null!");
+    assertNotNull(linkIndex,
+        "The Link Index resolving commands to REST API web service endpoints cannot be null!");
-   * Initializes the RestHttpOperationInvokers scheduled and periodic monitoring task to assess the availibity of the
-   * targeted GemFire Manager's HTTP service.
+   * Initializes the RestHttpOperationInvokers scheduled and periodic monitoring task to assess the
+   * availibity of the targeted GemFire Manager's HTTP service.
-        logger.debug("Scheduling periodic HTTP ping requests to monitor the availability of the GemFire Manager HTTP service @ ({})",
+        logger.debug(
+            "Scheduling periodic HTTP ping requests to monitor the availability of the GemFire Manager HTTP service @ ({})",
-            org.springframework.http.client.ClientHttpRequest httpRequest = getRestTemplate().getRequestFactory()
-              .createRequest(pingLink.getHref(), HttpMethod.HEAD);
+            org.springframework.http.client.ClientHttpRequest httpRequest = getRestTemplate()
+                .getRequestFactory().createRequest(pingLink.getHref(), HttpMethod.HEAD);
-            httpRequest.getHeaders().set(HttpHeader.USER_AGENT.getName(), USER_AGENT_HTTP_REQUEST_HEADER_VALUE);
+            httpRequest.getHeaders().set(HttpHeader.USER_AGENT.getName(),
+                USER_AGENT_HTTP_REQUEST_HEADER_VALUE);
-            if(securityProperties != null){
+            if (securityProperties != null) {
-              while(it.hasNext()){
-                Entry<String,String> entry= it.next();
+              while (it.hasNext()) {
+                Entry<String, String> entry = it.next();
-              throw new IOException(String.format("The HTTP service at URL (%1$s) could not be found!",
-                pingLink.getHref()));
+              throw new IOException(String.format(
+                  "The HTTP service at URL (%1$s) could not be found!", pingLink.getHref()));
+            } else if (!HttpStatus.OK.equals(httpResponse.getStatusCode())) {
+              printDebug(
+                  "Received unexpected HTTP status code (%1$d - %2$s) for HTTP request (%3$s).",
+                  httpResponse.getRawStatusCode(), httpResponse.getStatusText(),
+                  pingLink.getHref());
-            else if (!HttpStatus.OK.equals(httpResponse.getStatusCode())) {
-              printDebug("Received unexpected HTTP status code (%1$d - %2$s) for HTTP request (%3$s).",
-                httpResponse.getRawStatusCode(), httpResponse.getStatusText(), pingLink.getHref());
-            }
-          }
-          catch (IOException e) {
-            printDebug("An error occurred while connecting to the Manager's HTTP service: %1$s: ", e.getMessage());
+          } catch (IOException e) {
+            printDebug("An error occurred while connecting to the Manager's HTTP service: %1$s: ",
+                e.getMessage());
-    }
-    else {
+    } else {
-        logger.debug("The Link to the GemFire Manager web service endpoint @ ({}) to monitor availability was not found!",
+        logger.debug(
+            "The Link to the GemFire Manager web service endpoint @ ({}) to monitor availability was not found!",
-   * @return an instance of HttpOperationInvoker used by this RestHttpOperationInvoker as a fallback to process commands
-   * via HTTP requests.
+   * @return an instance of HttpOperationInvoker used by this RestHttpOperationInvoker as a fallback
+   *         to process commands via HTTP requests.
-   * Returns the LinkIndex resolving Gfsh commands to GemFire REST API web service endpoints.  The corresponding
-   * web service endpoint is a URI/URL uniquely identifying the resource on which the command was invoked.
+   * Returns the LinkIndex resolving Gfsh commands to GemFire REST API web service endpoints. The
+   * corresponding web service endpoint is a URI/URL uniquely identifying the resource on which the
+   * command was invoked.
-   * Creates an HTTP request from the specified command invocation encapsulated by the CommandRequest object.
-   * The CommandRequest identifies the resource targeted by the command invocation along with any parameters to be sent
-   * as part of the HTTP request.
+   * Creates an HTTP request from the specified command invocation encapsulated by the
+   * CommandRequest object. The CommandRequest identifies the resource targeted by the command
+   * invocation along with any parameters to be sent as part of the HTTP request.
-   * @return a client HTTP request detailing the operation to be performed on the remote resource targeted by the
-   * command invocation.
+   * @return a client HTTP request detailing the operation to be performed on the remote resource
+   *         targeted by the command invocation.
-        request.addParameterValues(ENVIRONMENT_VARIABLE_REQUEST_PARAMETER_PREFIX + entry.getKey(), entry.getValue());
+        request.addParameterValues(ENVIRONMENT_VARIABLE_REQUEST_PARAMETER_PREFIX + entry.getKey(),
+            entry.getValue());
-      request.addParameterValues(RESOURCES_REQUEST_PARAMETER, (Object[]) ConvertUtils.convert(command.getFileData()));
+      request.addParameterValues(RESOURCES_REQUEST_PARAMETER,
+          (Object[]) ConvertUtils.convert(command.getFileData()));
-   * Finds a Link from the Link Index containing the HTTP request URI to the web service endpoint for the relative
-   * operation on the resource.
+   * Finds a Link from the Link Index containing the HTTP request URI to the web service endpoint
+   * for the relative operation on the resource.
-   * @return an instance of Link containing the HTTP request URI used to perform the intended operation on the resource.
+   * @return an instance of Link containing the HTTP request URI used to perform the intended
+   *         operation on the resource.
-   * Finds a Link from the Link Index corresponding to the command invocation.  The CommandRequest indicates the
-   * intended function on the target resource so the proper Link based on it's relation (the state transition of the
-   * corresponding function), along with it's method of operation and corresponding REST API web service endpoint (URI),
-   * can be identified.
+   * Finds a Link from the Link Index corresponding to the command invocation. The CommandRequest
+   * indicates the intended function on the target resource so the proper Link based on it's
+   * relation (the state transition of the corresponding function), along with it's method of
+   * operation and corresponding REST API web service endpoint (URI), can be identified.
-   * @return a Link referencing the correct REST API web service endpoint (URI) and method for the command invocation.
+   * @return a Link referencing the correct REST API web service endpoint (URI) and method for the
+   *         command invocation.
-      throw new RestApiCallForCommandNotFoundException(String.format("No REST API call for command (%1$s) was found!",
-        command.getInput()));
+      throw new RestApiCallForCommandNotFoundException(
+          String.format("No REST API call for command (%1$s) was found!", command.getInput()));
-   * Resolves one Link from a Collection of Links based on the command invocation matching multiple relations from
-   * the Link Index.
+   * Resolves one Link from a Collection of Links based on the command invocation matching multiple
+   * relations from the Link Index.
-    // NOTE, Gfsh's ParseResult contains a Map entry for all command options whether or not the user set the option
+    // NOTE, Gfsh's ParseResult contains a Map entry for all command options whether or not the user
+    // set the option
-    Map<String, String> commandParametersCopy = CollectionUtils.removeKeys(
-      new HashMap<>(command.getParameters()), NoValueFilter.INSTANCE);
+    Map<String, String> commandParametersCopy =
+        CollectionUtils.removeKeys(new HashMap<>(command.getParameters()), NoValueFilter.INSTANCE);
-      final List<String> pathVariables = new UriTemplate(decode(link.getHref().toString())).getVariableNames();
+      final List<String> pathVariables =
+          new UriTemplate(decode(link.getHref().toString())).getVariableNames();
-      // first, all path variables in the URL/URI template must be resolvable/expandable for this Link
+      // first, all path variables in the URL/URI template must be resolvable/expandable for this
+      // Link
-        // then, either we have not found a Link for the command yet, or the number of resolvable/expandable
-        // path variables in this Link has to be greater than the number of resolvable/expandable path variables
+        // then, either we have not found a Link for the command yet, or the number of
+        // resolvable/expandable
+        // path variables in this Link has to be greater than the number of resolvable/expandable
+        // path variables
-      throw new RestApiCallForCommandNotFoundException(String.format("No REST API call for command (%1$s) was found!",
-        command.getInput()));
+      throw new RestApiCallForCommandNotFoundException(
+          String.format("No REST API call for command (%1$s) was found!", command.getInput()));
-   * Processes the requested command.  Sends the command to the GemFire Manager for remote processing (execution).
+   * Processes the requested command. Sends the command to the GemFire Manager for remote processing
+   * (execution).
-   * @see #send(org.apache.geode.management.internal.web.http.ClientHttpRequest, Class, java.util.Map)
-   * @see #simpleProcessCommand(org.apache.geode.management.internal.cli.CommandRequest, RestApiCallForCommandNotFoundException)
+   * @see #send(org.apache.geode.management.internal.web.http.ClientHttpRequest, Class,
+   *      java.util.Map)
+   * @see #simpleProcessCommand(org.apache.geode.management.internal.cli.CommandRequest,
+   *      RestApiCallForCommandNotFoundException)
-    assertState(isConnected(), "Gfsh must be connected to the GemFire Manager in order to process commands remotely!");
+    assertState(isConnected(),
+        "Gfsh must be connected to the GemFire Manager in order to process commands remotely!");
-      ResponseEntity<String> response = send(createHttpRequest(command), String.class, command.getParameters());
+      ResponseEntity<String> response =
+          send(createHttpRequest(command), String.class, command.getParameters());
-    }
-    catch (RestApiCallForCommandNotFoundException e) {
+    } catch (RestApiCallForCommandNotFoundException e) {
-    }
-    catch (ResourceAccessException e) {
+    } catch (ResourceAccessException e) {
-   * A method to process the command by sending an HTTP request to the simple URL/URI web service endpoint, where all
-   * details of the request and command invocation are encoded in the URL/URI.
+   * A method to process the command by sending an HTTP request to the simple URL/URI web service
+   * endpoint, where all details of the request and command invocation are encoded in the URL/URI.
-   * @param e the RestApiCallForCommandNotFoundException indicating the standard REST API web service endpoint
-   * could not be found.
+   * @param e the RestApiCallForCommandNotFoundException indicating the standard REST API web
+   *        service endpoint could not be found.
-  protected String simpleProcessCommand(final CommandRequest command, final RestApiCallForCommandNotFoundException e) {
+  protected String simpleProcessCommand(final CommandRequest command,
+      final RestApiCallForCommandNotFoundException e) {
-      printWarning("WARNING - No REST API web service endpoint (URI) exists for command (%1$s); using the non-RESTful, simple URI.",
-        command.getName());
+      printWarning(
+          "WARNING - No REST API web service endpoint (URI) exists for command (%1$s); using the non-RESTful, simple URI.",
+          command.getName());
