GEODE-3434: Allow the modules to be interoperable with current and older versions of tomcat 7

  * Modified DeltaSessions to use reflection to handle attributes fields incase an earlier tomcat 7 is used
  * Modified DeltaSession7 and DeltaSession8 to extend from DeltaSession
  * Added session backward compatibility tests
  * Modified aseembly build to download old product installs
  * Minor refactor of VersionManager to reuse property file load code

+import java.lang.reflect.Field;
+  private static Field cachedField = null;
+
+  static {
+    try {
+      cachedField = StandardSession.class.getDeclaredField("attributes");
+      cachedField.setAccessible(true);
+    } catch (NoSuchFieldException e) {
+      throw new IllegalStateException(e);
+    }
+  }
-    this.attributes = readInAttributes(in);
+    readInAttributes(in);
-  protected Map readInAttributes(final DataInput in) throws IOException, ClassNotFoundException {
-    return DataSerializer.readObject(in);
+  private void readInAttributes(DataInput in) throws IOException, ClassNotFoundException {
+    ConcurrentHashMap map = (ConcurrentHashMap) DataSerializer.readObject(in);
+    try {
+      Field field = getAttributesFieldObject();
+      field.set(this, map);
+    } catch (IllegalAccessException e) {
+      logError(e);
+      throw new IllegalStateException(e);
+    }
+  }
+
+  protected Field getAttributesFieldObject() {
+    return cachedField;
+  }
+
+  protected void logError(Exception e) {
+    if (getManager() != null) {
+      DeltaSessionManager mgr = (DeltaSessionManager) getManager();
+      mgr.getLogger().error(e);
+    }
-    Map<String, byte[]> serializedAttributes = new ConcurrentHashMap<String, byte[]>();
-    for (Iterator i = this.attributes.entrySet().iterator(); i.hasNext();) {
+    Map<String, byte[]> serializedAttributes = new ConcurrentHashMap<>();
+    for (Iterator i = getAttributes().entrySet().iterator(); i.hasNext();) {
+  protected Map getAttributes() {
+    try {
+      Field field = getAttributesFieldObject();
+      Map map = (Map) field.get(this);
+      return map;
+    } catch (IllegalAccessException e) {
+      logError(e);
+    }
+    throw new IllegalStateException("Unable to access attributes field");
+  }
+
