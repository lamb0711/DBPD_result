GEODE-8182: change String commands to use one region (#5165)

* changed all String commands to use the function and to use a single region
* renabled tests ignored for GEODE-8182
* removed the RedisLockService since it is not used in the new data model
* removed the unused del methods on RedisSetCommands and RedisHashCommands
* removed the KeyRegistar since it was no longer needed with a single data region

Co-authored-by: Ray Ingles <ringles@pivotal.io>
+import org.apache.geode.cache.Region;
-import org.apache.geode.redis.internal.RedisDataType;
+import org.apache.geode.redis.internal.RedisData;
-import org.apache.geode.redis.internal.RegionProvider;
-  /**
-   * Checks if the given key is associated with the passed expectedDataType. If there is a mismatch,
-   * a {@link RuntimeException} is thrown
-   *
-   * @param key Key to check
-   * @param expectedDataType Type to check to
-   * @param context context
-   */
-  public void checkDataType(ByteArrayWrapper key, RedisDataType expectedDataType,
-      ExecutionHandlerContext context) {
-    context.getKeyRegistrar().validate(key, expectedDataType);
-  }
-
-  protected boolean removeEntry(ByteArrayWrapper key,
-      ExecutionHandlerContext context) {
-
-    RegionProvider rC = context.getRegionProvider();
-    RedisDataType type = context.getKeyRegistrar().getType(key);
-    return rC.removeKey(key, type);
-  }
-
+
+  protected RedisKeyCommands getRedisKeyCommands(ExecutionHandlerContext context) {
+    return new RedisKeyCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());
+  }
+
+  protected Region<ByteArrayWrapper, RedisData> getDataRegion(ExecutionHandlerContext context) {
+    return context.getRegionProvider().getDataRegion();
+  }
