Merge branch 'release/1.5.0'

+import org.apache.geode.Statistics;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.eviction.EvictionStatistics;
+import org.apache.geode.internal.cache.eviction.EvictionCounters;
-  private EvictionStatistics lruMemoryStats;
-
-    LocalRegion l = (LocalRegion) region;
-    if (l.getEvictionController() != null) {
-      EvictionStatistics stats = l.getEvictionController().getStatistics();
-      if (stats != null) {
-        regionMonitor.addStatisticsToMonitor(stats.getStats());
-        EvictionAttributes ea = region.getAttributes().getEvictionAttributes();
-        if (ea != null && ea.getAlgorithm().isLRUMemory()) {
-          this.lruMemoryStats = stats;
-        }
-      }
-    }
+    monitorLRUStatistics();
+  private boolean isMemoryEvictionConfigured() {
+    boolean result = false;
+    EvictionAttributes ea = region.getAttributes().getEvictionAttributes();
+    if (ea != null && ea.getAlgorithm().isLRUMemory()) {
+      result = true;
+    }
+    return result;
+  }
+
+  private void monitorLRUStatistics() {
+    InternalRegion internalRegion = (InternalRegion) region;
+    Statistics lruStats = internalRegion.getEvictionStatistics();
+    if (lruStats != null) {
+      regionMonitor.addStatisticsToMonitor(lruStats);
+    }
+  }
+
-    if (lruMemoryStats != null) {
-      return lruMemoryStats.getCounter();
+    if (isMemoryEvictionConfigured()) {
+      return ((InternalRegion) this.region).getEvictionCounter();
