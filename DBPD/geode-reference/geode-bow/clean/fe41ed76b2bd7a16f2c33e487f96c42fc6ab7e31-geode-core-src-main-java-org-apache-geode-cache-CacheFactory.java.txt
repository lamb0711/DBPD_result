GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
+import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.internal.jndi.JNDIInvoker;
+import org.apache.geode.security.AuthenticationFailedException;
+import org.apache.geode.security.AuthenticationRequiredException;
-
- *
- *
-   * Creates a new cache that uses the specified <code>system</code>.
-   *
+   * Creates a new cache that uses the specified {@code system}.
-   *
-   * The <code>system</code> can specify a
+   * The {@code system} can specify a
-   * the file. The contents of the file must comply with the <code>"doc-files/cache8_0.dtd"></code>
-   * file. Note that when parsing the XML file {@link Declarable} classes are loaded using the
-   * current thread's {@linkplain Thread#getContextClassLoader context class loader}.
+   * the file. The contents of the file must comply with the {@code "doc-files/cache8_0.dtd">} file.
+   * Note that when parsing the XML file {@link Declarable} classes are loaded using the current
+   * thread's {@linkplain Thread#getContextClassLoader context class loader}.
-   * @param system a <code>DistributedSystem</code> obtained by calling
+   * @param system a {@code DistributedSystem} obtained by calling
-   * @return a <code>Cache</code> that uses the specified <code>system</code> for distribution.
+   * @return a {@code Cache} that uses the specified {@code system} for distribution.
-   * @throws IllegalArgumentException If <code>system</code> is not
-   *         {@link DistributedSystem#isConnected connected}.
+   * @throws IllegalArgumentException If {@code system} is not {@link DistributedSystem#isConnected
+   *         connected}.
-   * @throws CacheWriterException If a <code>CacheWriterException</code> is thrown while
-   *         initializing the cache.
-   * @throws GatewayException If a <code>GatewayException</code> is thrown while initializing the
+   * @throws CacheWriterException If a {@code CacheWriterException} is thrown while initializing the
+   * @throws GatewayException If a {@code GatewayException} is thrown while initializing the cache.
-   * @throws CacheWriterException If a <code>CacheWriterException</code> is thrown while
-   *         initializing the cache.
-   * @throws GatewayException If a <code>GatewayException</code> is thrown while initializing the
+   * @throws CacheWriterException If a {@code CacheWriterException} is thrown while initializing the
+   * @throws GatewayException If a {@code GatewayException} is thrown while initializing the cache.
-   * @param system the <code>DistributedSystem</code> the cache was created with.
+   * @param system the {@code DistributedSystem} the cache was created with.
-   * @param system the <code>DistributedSystem</code> the cache was created with.
+   * @param system the {@code DistributedSystem} the cache was created with.
-
-    GemFireCacheImpl instance = GemFireCacheImpl.getInstance();
+    InternalCache instance = GemFireCacheImpl.getInstance();
-    GemFireCacheImpl instance = GemFireCacheImpl.getInstance();
+    InternalCache instance = GemFireCacheImpl.getInstance();
-   * @return the version of the cache implementation as a <code>String</code>
+   * @return the version of the cache implementation as a {@code String}
-   * @param securityManager
-   * @param postProcessor
-   * If you are using a <code>GatewaySender</code> or <code>AsyncEventQueue</code> with PDX then you
-   * should set this to true.
+   * If you are using a {@code GatewaySender} or {@code AsyncEventQueue} with PDX then you should
+   * set this to true.
-   * You should only set this attribute to <code>true</code> if you know this member will only be
-   * reading cache data. In this use case you do not need to pay the cost of preserving the unread
-   * fields since you will never be reserializing pdx data.
+   * You should only set this attribute to {@code true} if you know this member will only be reading
+   * cache data. In this use case you do not need to pay the cost of preserving the unread fields
+   * since you will never be reserializing pdx data.
-   * @param ignore <code>true</code> if fields not read during pdx deserialization should be
-   *        ignored; <code>false</code>, the default, if they should be preserved.
+   * @param ignore {@code true} if fields not read during pdx deserialization should be ignored;
+   *        {@code false}, the default, if they should be preserved.
-
