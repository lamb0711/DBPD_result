GEODE-8217: Deserialize attribute before update and remove. (#5256)

When preferDeserializedForm is true we deserialize the previous attributes before update or remove.

Deprecates preferDeserializedForm since when false it's unclear when you will get serialized or unserialized forms of attributes.

+import static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;
+
+import org.apache.juli.logging.Log;
-  private transient Region<String, HttpSession> operatingRegion;
+  private transient Region<String, DeltaSessionInterface> operatingRegion;
-  private final List<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();
+  private final ArrayList<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();
+  /**
+   * @deprecated No replacement. Always prefer deserialized form.
+   */
+  @Deprecated
-  private static Field cachedField;
+  private static final Field cachedField;
-  @SuppressWarnings("unchecked")
-    if (this.principal == null && this.serializedPrincipal != null) {
-      SerializablePrincipal sp;
+    final DeltaSessionManager<?> deltaSessionManager = getDeltaSessionManager();
+
+    if (principal == null && serializedPrincipal != null) {
+      final Log logger = deltaSessionManager.getLogger();
+
+      final SerializablePrincipal sp;
-        sp = (SerializablePrincipal) BlobHelper.deserializeBlob(this.serializedPrincipal);
+        sp = (SerializablePrincipal) BlobHelper.deserializeBlob(serializedPrincipal);
-        String builder = this
-            + ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception";
-        ((DeltaSessionManager) getManager()).getLogger().warn(builder, e);
+        logger.warn(this
+            + ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception",
+            e);
-      this.principal =
-          sp.getPrincipal(((DeltaSessionManager) this.manager).getTheContext().getRealm());
-      if (getManager() != null) {
-        DeltaSessionManager mgr = (DeltaSessionManager) getManager();
-        if (mgr.getLogger().isDebugEnabled()) {
-          mgr.getLogger().debug(this + ": Deserialized principal: " + this.principal);
-          // mgr.logCurrentStack();
-        }
+
+      principal = sp.getPrincipal(deltaSessionManager.getTheContext().getRealm());
+
+      if (logger.isDebugEnabled()) {
+        logger.debug(this + ": Deserialized principal: " + principal);
-    return this.principal;
+
+    return principal;
-      DeltaSessionManager mgr = (DeltaSessionManager) getManager();
-      if (mgr.getLogger().isDebugEnabled()) {
-        mgr.getLogger().debug(this + ": Cached principal: " + principal);
-        // mgr.logCurrentStack();
+      final Log logger = getDeltaSessionManager().getLogger();
+      if (logger.isDebugEnabled()) {
+        logger.debug(this + ": Cached principal: " + principal);
-    if (this.serializedPrincipal == null) {
-      if (this.principal != null && this.principal instanceof GenericPrincipal) {
-        GenericPrincipal gp = (GenericPrincipal) this.principal;
+    if (serializedPrincipal == null) {
+      if (principal != null && principal instanceof GenericPrincipal) {
+        GenericPrincipal gp = (GenericPrincipal) principal;
-        this.serializedPrincipal = serialize(sp);
+        serializedPrincipal = serialize(sp);
-          DeltaSessionManager mgr = (DeltaSessionManager) getManager();
-          if (mgr.getLogger().isDebugEnabled()) {
-            mgr.getLogger().debug(this + ": Serialized principal: " + sp);
-            // mgr.logCurrentStack();
+          final Log logger = getDeltaSessionManager().getLogger();
+          if (logger.isDebugEnabled()) {
+            logger.debug(this + ": Serialized principal: " + sp);
-    return this.serializedPrincipal;
+    return serializedPrincipal;
-  private Region<String, HttpSession> getOperatingRegion() {
+  private Region<String, DeltaSessionInterface> getOperatingRegion() {
-    return this.operatingRegion;
+    return operatingRegion;
-    DeltaSessionManager mgr = (DeltaSessionManager) getManager();
-    return mgr.isCommitValveEnabled();
+    return getDeltaSessionManager().isCommitValveEnabled();
-    return this.currentGatewayDeltaEvent;
+    return currentGatewayDeltaEvent;
-      DeltaSessionManager sessionManager = (DeltaSessionManager) manager;
+      DeltaSessionManager<?> sessionManager = (DeltaSessionManager<?>) manager;
-      this.hasDelta = false;
-      this.applyRemotely = false;
-      this.enableGatewayDeltaReplication = sessionManager.getEnableGatewayDeltaReplication();
-      this.preferDeserializedForm = sessionManager.getPreferDeserializedForm();
+      hasDelta = false;
+      applyRemotely = false;
+      enableGatewayDeltaReplication = sessionManager.getEnableGatewayDeltaReplication();
+      setOwnerDeprecated(sessionManager);
-      if (this.listeners == null) {
-        this.listeners = new ArrayList();
+      if (listeners == null) {
+        listeners = new ArrayList<>();
-      if (this.notes == null) {
-        this.notes = new Hashtable();
+      if (notes == null) {
+        notes = new Hashtable<>();
-      contextName = ((DeltaSessionManager) manager).getContextName();
+      contextName = sessionManager.getContextName();
+  @SuppressWarnings("deprecation")
+  private void setOwnerDeprecated(DeltaSessionManager<?> sessionManager) {
+    preferDeserializedForm = sessionManager.getPreferDeserializedForm();
+  }
+
-    synchronized (this.changeLock) {
+    synchronized (changeLock) {
-      if (this.preferDeserializedForm) {
+      if (preferDeserializedForm) {
+        if (notify) {
+          deserializeAttributeInternal(name);
+        }
-
-    synchronized (this.changeLock) {
+    synchronized (changeLock) {
+      if (notify && preferDeserializedForm) {
+        deserializeAttributeInternal(name);
+      }
+
-      super.removeAttribute(name, true);
+      super.removeAttribute(name, notify);
+  protected void removeAttributeInternal(String name, boolean notify) {
+    if (notify && preferDeserializedForm) {
+      deserializeAttributeInternal(name);
+    }
+
+    super.removeAttributeInternal(name, notify);
+  }
+
+  protected Object getAttributeInternal(final String name) {
+    if (null == name) {
+      return null;
+    }
+    return getAttributes().get(name);
+  }
+
+  protected void setAttributeInternal(String name, Object value) {
+    if (null == name) {
+      return;
+    }
+    getAttributes().put(name, value);
+  }
+
+  @Override
-    Object value = super.getAttribute(name);
-
-    // If the attribute is a byte[] (meaning it came from the server),
-    // deserialize it and add it to attributes map before returning it.
-    if (value instanceof byte[]) {
-      try {
-        value = BlobHelper.deserializeBlob((byte[]) value);
-      } catch (Exception e) {
-        String builder = this + ": Attribute named " + name
-            + " contains a byte[] that cannot be deserialized due to the following exception";
-        ((DeltaSessionManager) getManager()).getLogger().warn(
-            builder, e);
-      }
-      if (this.preferDeserializedForm) {
-        localUpdateAttribute(name, value);
-      }
-    }
+    Object value = deserializeAttribute(name, super.getAttribute(name), preferDeserializedForm);
-    ((DeltaSessionManager) getManager()).addSessionToTouch(getId());
+    getDeltaSessionManager().addSessionToTouch(getId());
+  protected void deserializeAttributeInternal(final String name) {
+    deserializeAttribute(name, getAttributeInternal(name), true);
+  }
+
+  private Object deserializeAttribute(final String name, final Object value, final boolean store) {
+    // If the attribute is a byte[] (meaning it came from the server),
+    // deserialize it and add it to attributes map before returning it.
+    if (value instanceof byte[]) {
+      try {
+        final Object deserialized = BlobHelper.deserializeBlob((byte[]) value);
+        if (store) {
+          setAttributeInternal(name, deserialized);
+        }
+        return deserialized;
+      } catch (final Exception e) {
+        getDeltaSessionManager().getLogger().warn(
+            this + ": Attribute named " + name
+                + " contains a byte[] that cannot be deserialized due to the following exception",
+            e);
+      }
+    }
+
+    return value;
+  }
+
+  private DeltaSessionManager<?> getDeltaSessionManager() {
+    return (DeltaSessionManager<?>) getManager();
+  }
+
-    // getOperatingRegion().destroy(this.id, true); // already done in super (remove)
-    ((DeltaSessionManager) getManager()).getStatistics().incSessionsInvalidated();
+    getDeltaSessionManager().getStatistics().incSessionsInvalidated();
-    DeltaSessionManager manager = (DeltaSessionManager) getManager();
+    DeltaSessionManager<?> manager = getDeltaSessionManager();
-      ((DeltaSessionManager) getManager()).getLogger().debug(this + ": Expired");
+      getDeltaSessionManager().getLogger().debug(this + ": Expired");
-      getOperatingRegion().destroy(this.getId(), this);
+      getOperatingRegion().destroy(getId(), this);
-    if (this.manager == null) {
+    if (manager == null) {
-      super.setAttribute(name, value, false); // don't do notification since this is a replication
+      // don't do notification since this is a replication
+      super.setAttribute(name, value, false);
-  private void initializeRegion(DeltaSessionManager sessionManager) {
+  private void initializeRegion(DeltaSessionManager<?> sessionManager) {
-    this.sessionRegionName = sessionManager.getRegionName();
+    sessionRegionName = sessionManager.getRegionName();
-    this.operatingRegion = sessionManager.getSessionCache().getOperatingRegion();
+    operatingRegion = uncheckedCast(sessionManager.getSessionCache().getOperatingRegion());
-      sessionManager.getLogger().debug(this + ": Set operating region: " + this.operatingRegion);
+      sessionManager.getLogger().debug(this + ": Set operating region: " + operatingRegion);
-      DeltaSessionManager mgr = (DeltaSessionManager) this.manager;
-      if (this.enableGatewayDeltaReplication && mgr.isPeerToPeer()) {
+      if (enableGatewayDeltaReplication && getDeltaSessionManager().isPeerToPeer()) {
-          this.currentGatewayDeltaEvent =
-              new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, events);
+          currentGatewayDeltaEvent =
+              new DeltaSessionAttributeEventBatch(sessionRegionName, id, events);
-  @SuppressWarnings("unchecked")
-  private void putInRegion(Region region, boolean applyRemotely, Object callbackArgument) {
-    this.hasDelta = true;
+  private void putInRegion(Region<String, DeltaSessionInterface> region, boolean applyRemotely,
+      Object callbackArgument) {
+    hasDelta = true;
-    region.put(this.id, this, callbackArgument);
-    this.eventQueue.clear();
+    region.put(id, this, callbackArgument);
+    eventQueue.clear();
-    if (!isValidInternal())
+    if (!isValidInternal()) {
+    }
-    synchronized (this.changeLock) {
+    synchronized (changeLock) {
-      DeltaSessionManager mgr = (DeltaSessionManager) this.manager;
-      if (this.enableGatewayDeltaReplication && mgr.isPeerToPeer()) {
+      if (enableGatewayDeltaReplication && getDeltaSessionManager().isPeerToPeer()) {
-            new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, this.eventQueue));
+            new DeltaSessionAttributeEventBatch(sessionRegionName, id, eventQueue));
-      this.hasDelta = true;
-      this.applyRemotely = true;
+      hasDelta = true;
+      applyRemotely = true;
-      this.eventQueue.clear();
+      eventQueue.clear();
-    synchronized (this.changeLock) {
-      this.eventQueue.clear();
+    synchronized (changeLock) {
+      eventQueue.clear();
-    return this.expired;
+    return expired;
-    return this.hasDelta;
+    return hasDelta;
-    out.writeBoolean(this.applyRemotely);
+    out.writeBoolean(applyRemotely);
-    DataSerializer.writeArrayList((ArrayList) this.eventQueue, out);
+    DataSerializer.writeArrayList(eventQueue, out);
-    out.writeLong(this.lastAccessedTime);
-    out.writeInt(this.maxInactiveInterval);
+    out.writeLong(lastAccessedTime);
+    out.writeInt(maxInactiveInterval);
-    this.applyRemotely = in.readBoolean();
+    applyRemotely = in.readBoolean();
-      this.lastAccessedTime = in.readLong();
-      this.maxInactiveInterval = in.readInt();
+      lastAccessedTime = in.readLong();
+      maxInactiveInterval = in.readInt();
-    if (this.enableGatewayDeltaReplication && this.applyRemotely) {
+    if (enableGatewayDeltaReplication && applyRemotely) {
-          new DeltaSessionAttributeEventBatch(this.sessionRegionName, this.id, events));
+          new DeltaSessionAttributeEventBatch(sessionRegionName, id, events));
-    DataSerializer.writeString(this.id, out);
-    out.writeLong(this.creationTime);
-    out.writeLong(this.lastAccessedTime);
-    out.writeLong(this.thisAccessedTime);
-    out.writeInt(this.maxInactiveInterval);
-    out.writeBoolean(this.isNew);
-    out.writeBoolean(this.isValid);
+    DataSerializer.writeString(id, out);
+    out.writeLong(creationTime);
+    out.writeLong(lastAccessedTime);
+    out.writeLong(thisAccessedTime);
+    out.writeInt(maxInactiveInterval);
+    out.writeBoolean(isNew);
+    out.writeBoolean(isValid);
-    out.writeBoolean(this.enableGatewayDeltaReplication);
-    DataSerializer.writeString(this.sessionRegionName, out);
+    out.writeBoolean(enableGatewayDeltaReplication);
+    DataSerializer.writeString(sessionRegionName, out);
-    DataSerializer.writeString(this.contextName, out);
+    DataSerializer.writeString(contextName, out);
-    this.id = DataSerializer.readString(in);
-    this.creationTime = in.readLong();
-    this.lastAccessedTime = in.readLong();
-    this.thisAccessedTime = in.readLong();
-    this.maxInactiveInterval = in.readInt();
-    this.isNew = in.readBoolean();
-    this.isValid = in.readBoolean();
+    id = DataSerializer.readString(in);
+    creationTime = in.readLong();
+    lastAccessedTime = in.readLong();
+    thisAccessedTime = in.readLong();
+    maxInactiveInterval = in.readInt();
+    isNew = in.readBoolean();
+    isValid = in.readBoolean();
-    this.serializedPrincipal = DataSerializer.readByteArray(in);
+    serializedPrincipal = DataSerializer.readByteArray(in);
-    this.enableGatewayDeltaReplication = in.readBoolean();
-    this.sessionRegionName = DataSerializer.readString(in);
+    enableGatewayDeltaReplication = in.readBoolean();
+    sessionRegionName = DataSerializer.readString(in);
-      this.contextName = DataSerializer.readString(in);
+      contextName = DataSerializer.readString(in);
-    if (this.listeners == null) {
-      this.listeners = new ArrayList();
+    if (listeners == null) {
+      listeners = new ArrayList<>();
-    if (this.notes == null) {
-      this.notes = new Hashtable();
+    if (notes == null) {
+      notes = new Hashtable<>();
-    ConcurrentHashMap map = DataSerializer.readObject(in);
+    ConcurrentHashMap<Object, Object> map = DataSerializer.readObject(in);
-    if (getManager() != null) {
-      DeltaSessionManager mgr = (DeltaSessionManager) getManager();
-      mgr.getLogger().error(e);
+    final DeltaSessionManager<?> deltaSessionManager = getDeltaSessionManager();
+    if (deltaSessionManager != null) {
+      deltaSessionManager.getLogger().error(e);
-    @SuppressWarnings("unchecked")
-    Enumeration<String> attributeNames = (Enumeration<String>) getAttributeNames();
+    Enumeration<String> attributeNames = uncheckedCast(getAttributeNames());
-  @SuppressWarnings({"unchecked", "rawtypes"})
-    for (Object o : getAttributes().entrySet()) {
-      Map.Entry<String, Object> entry = (Map.Entry<String, Object>) o;
+    for (Map.Entry<String, Object> entry : getAttributes().entrySet()) {
-  protected Map getAttributes() {
+  protected Map<String, Object> getAttributes() {
-      return (Map) field.get(this);
+      return uncheckedCast(field.get(this));
-      ((DeltaSessionManager) getManager()).getLogger().warn(
+      getDeltaSessionManager().getLogger().warn(
-        + "; context=" + this.contextName + "; sessionRegionName="
-        + this.sessionRegionName + "; operatingRegionName="
+        + "; context=" + contextName + "; sessionRegionName="
+        + sessionRegionName + "; operatingRegionName="
-    return (DeltaSessionFacade) AccessController.doPrivileged(
-        (PrivilegedAction) () -> new DeltaSessionFacade(fSession));
+    return AccessController.doPrivileged(
+        (PrivilegedAction<DeltaSessionFacade>) () -> new DeltaSessionFacade(fSession));
