Merge branch 'release/1.8.0'

-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
-import org.apache.geode.distributed.internal.PooledExecutorWithDMStats;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingExecutors;
+import org.apache.geode.internal.logging.LoggingThread;
+
+  /**
+   * The number of threads that the QueryMonitor will use to mark queries as cancelled
+   * (see QueryMonitor class for reasons why a query might be cancelled).
+   * That processing is very efficient, so we don't foresee needing to raise this above 1.
+   */
+  private static final int QUERY_MONITOR_THREAD_POOL_SIZE = 1;
+
-  private final ThreadPoolExecutor eventThreadPool;
+  private final ExecutorService eventThreadPool;
-          LocalizedStrings.CacheFactory_THE_CACHE_HAS_BEEN_CLOSED.toLocalizedString());
+          "The cache has been closed.");
-        LocalizedStrings.CacheFactory_A_CACHE_HAS_NOT_YET_BEEN_CREATED.toLocalizedString());
+        "A cache has not yet been created.");
-            LocalizedStrings.CacheFactory_0_AN_OPEN_CACHE_ALREADY_EXISTS
-                .toLocalizedString(instance),
+            String.format("%s: An open cache already exists.",
+                instance),
-   * @param typeRegistry: currently only unit tests set this parameter to a non-null value
+   * Currently only unit tests set the typeRegistry parameter to a non-null value
-        this.resourceEventsListener = new ManagementListener();
+        this.resourceEventsListener = new ManagementListener(this.system);
-              .info(LocalizedStrings.GemFireCacheImpl_RUNNING_IN_LOCAL_MODE);
+              .info("Running in local mode since no locators were specified.");
-            LocalizedStrings.GemFireCache_CANNOT_CREATE_A_CACHE_IN_AN_ADMINONLY_VM
-                .toLocalizedString());
+            "Cannot create a Cache in an admin-only VM.");
-        final ThreadGroup threadGroup =
-            LoggingThreadGroup.createThreadGroup("Message Event Threads", logger);
-        ThreadFactory threadFactory = (Runnable command) -> {
-          final Runnable runnable = () -> {
-            ConnectionTable.threadWantsSharedResources();
-            command.run();
-          };
-          Thread thread = new Thread(threadGroup, runnable, "Message Event Thread");
-          thread.setDaemon(true);
-          return thread;
-        };
-        ArrayBlockingQueue<Runnable> queue = new ArrayBlockingQueue<>(EVENT_QUEUE_LIMIT);
-        this.eventThreadPool = new PooledExecutorWithDMStats(queue, EVENT_THREAD_LIMIT,
-            this.cachePerfStats.getEventPoolHelper(), threadFactory, 1000, getThreadMonitorObj());
+        this.eventThreadPool = LoggingExecutors.newThreadPoolWithFixedFeed("Message Event Thread",
+            command -> {
+              ConnectionTable.threadWantsSharedResources();
+              command.run();
+            }, EVENT_THREAD_LIMIT, this.cachePerfStats.getEventPoolHelper(), 1000,
+            getThreadMonitorObj(),
+            EVENT_QUEUE_LIMIT);
-            LocalizedStrings.GemFireCache_CREATED_GEMFIRECACHE_0.toLocalizedString(toString()));
+            String.format("Created GemFireCache %s", toString()));
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.GemFireCache_NO_LOCATORS_FOUND_WITH_SHARED_CONFIGURATION));
+      logger.info("No locator(s) found with cluster configuration service");
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.GemFireCache_RECEIVED_SHARED_CONFIGURATION_FROM_LOCATORS));
+      logger.info("Received cluster configuration from the locator");
-              LocalizedStrings.GEMFIRE_CACHE_SECURITY_MISCONFIGURATION_2.toLocalizedString());
+              "A server must use cluster configuration when joining a secured cluster.");
-          logger.info(LocalizedMessage
-              .create(LocalizedStrings.GemFireCache_NOT_USING_SHARED_CONFIGURATION));
+          logger.info(
+              "The cache has been created with use-cluster-configuration=false. It will not receive any cluster configuration");
-            LocalizedStrings.GEMFIRE_CACHE_SECURITY_MISCONFIGURATION.toLocalizedString());
+            "A server cannot specify its own security-manager or security-post-processor when using cluster configuration");
-          LocalizedStrings.GemFireCache_SHARED_CONFIGURATION_NOT_AVAILABLE.toLocalizedString(), e);
+          "cluster configuration service not available", e);
-          LocalizedStrings.GemFireCache_EXCEPTION_OCCURRED_WHILE_DEPLOYING_JARS_FROM_SHARED_CONDFIGURATION
-              .toLocalizedString(),
+          "Exception while deploying the jars received as a part of cluster Configuration",
-      logger.error("Cache initialization failed because: " + e.toString()); // fix GEODE-3038
+      logger.error("Cache initialization for {} failed because: {}", this, e); // fix GEODE-3038
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GemFireCacheImpl_STARTING_GEMFIRE_MEMCACHED_SERVER_ON_PORT_0_FOR_1_PROTOCOL,
-            new Object[] {port, protocol}));
+        logger.info("Starting GemFireMemcachedServer on port {} for {} protocol",
+            new Object[] {port, protocol});
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GemFireCacheImpl_STARTING_GEMFIRE_MEMCACHED_SERVER_ON_BIND_ADDRESS_0_PORT_1_FOR_2_PROTOCOL,
-            new Object[] {bindAddress, port, protocol}));
+        logger.info("Starting GemFireMemcachedServer on bind address {} on port {} for {} protocol",
+            new Object[] {bindAddress, port, protocol});
-        getLoggerI18n().info(
-            LocalizedStrings.GemFireCacheImpl_STARTING_GEMFIRE_REDIS_SERVER_ON_PORT_0,
-            new Object[] {port});
+        getLogger().info(
+            String.format("Starting GeodeRedisServer on port %s",
+                new Object[] {port}));
-        getLoggerI18n().info(
-            LocalizedStrings.GemFireCacheImpl_STARTING_GEMFIRE_REDIS_SERVER_ON_BIND_ADDRESS_0_PORT_1,
-            new Object[] {bindAddress, port});
+        getLogger().info(
+            String.format("Starting GeodeRedisServer on bind address %s on port %s",
+                new Object[] {bindAddress, port}));
-            LocalizedStrings.GemFireCache_COULD_NOT_CONVERT_XML_FILE_0_TO_AN_URL
-                .toLocalizedString(xmlFile),
+            String.format("Could not convert XML file %s to an URL.",
+                xmlFile),
-              LocalizedStrings.GemFireCache_DECLARATIVE_CACHE_XML_FILERESOURCE_0_DOES_NOT_EXIST
-                  .toLocalizedString(xmlFile));
+              String.format("Declarative Cache XML file/resource %s does not exist.",
+                  xmlFile));
-              LocalizedStrings.GemFireCache_DECLARATIVE_XML_FILE_0_IS_NOT_A_FILE
-                  .toLocalizedString(xmlFile));
+              String.format("Declarative XML file %s is not a file.",
+                  xmlFile));
-          LocalizedStrings.GemFireCache_WHILE_OPENING_CACHE_XML_0_THE_FOLLOWING_ERROR_OCCURRED_1
-              .toLocalizedString(url.toString(), ex));
+          String.format("While opening Cache XML %s the following error occurred %s",
+              url.toString(), ex));
-          new CacheXmlException(LocalizedStrings.GemFireCache_WHILE_READING_CACHE_XML_0_1
-              .toLocalizedString(url, ex.getMessage()));
+          new CacheXmlException(String.format("While reading Cache XML %s. %s",
+              url, ex.getMessage()));
-      logger.info(
-          LocalizedMessage.create(LocalizedStrings.GemFireCache_INITIALIZING_CACHE_USING__0__1,
-              new Object[] {url.toString(), sb.toString()}));
+      logger.info("Initializing cache using {}:{}",
+          new Object[] {url.toString(), sb.toString()});
-          LocalizedMessage.create(LocalizedStrings.GemFireCache_INITIALIZING_CACHE_USING__0__1,
-              new Object[] {"generated description from old cache", cacheXmlDescription}));
+          "Initializing cache using {}:{}",
+          new Object[] {"generated description from old cache", cacheXmlDescription});
-          LocalizedStrings.GemFireCache_DYNAMIC_REGION_INITIALIZATION_FAILED.toLocalizedString(),
+          "dynamic region initialization failed",
-              LocalizedStrings.GemFireCache_UNEXPECTED_EXCEPTION.toLocalizedString());
+              "unexpected exception");
-    final ThreadGroup threadGroup =
-        LoggingThreadGroup.createThreadGroup("ShutdownAllGroup", logger);
-    ThreadFactory threadFactory = new ThreadFactory() {
-      private final AtomicInteger threadCount = new AtomicInteger(1);
-
-      @Override
-      public Thread newThread(Runnable runnable) {
-        Thread thread =
-            new Thread(threadGroup, runnable, "ShutdownAll-" + this.threadCount.getAndIncrement());
-        thread.setDaemon(true);
-        return thread;
-      }
-    };
-    return Executors.newFixedThreadPool(shutdownAllPoolSize == -1 ? size : shutdownAllPoolSize,
-        threadFactory);
+    return LoggingExecutors
+        .newFixedThreadPool("ShutdownAll-", true,
+            shutdownAllPoolSize == -1 ? size : shutdownAllPoolSize);
-              LocalizedStrings.LocalRegion_CACHEWRITEREXCEPTION_SHOULD_NOT_BE_THROWN_IN_LOCALDESTROYREGION
-                  .toLocalizedString(),
+              "CacheWriterException should not be thrown in localDestroyRegion",
-              LocalizedStrings.LocalRegion_TIMEOUTEXCEPTION_SHOULD_NOT_BE_THROWN_IN_LOCALDESTROYREGION
-                  .toLocalizedString(),
+              "TimeoutException should not be thrown in localDestroyRegion",
-      logger.info(LocalizedMessage.create(LocalizedStrings.GemFireCache_0_NOW_CLOSING, this));
+      logger.info("{}: Now closing.", this);
-                    logger.warn(LocalizedMessage.create(
-                        LocalizedStrings.GemFireCache_0_ERROR_CLOSING_REGION_1,
-                        new Object[] {this, lr.getFullPath()}), e);
+                    logger.warn(String.format("%s: error closing region %s",
+                        new Object[] {this, lr.getFullPath()}),
+                        e);
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.GemFireCache_0_ERROR_IN_LAST_STAGE_OF_PARTITIONEDREGION_CACHE_CLOSE,
-                  this), e);
+              logger.warn(String.format("%s: error in last stage of PartitionedRegion cache close",
+                  this),
+                  e);
-            logger.info(LocalizedMessage.create(
-                LocalizedStrings.GemFireCache_FAILED_TO_GET_THE_CQSERVICE_TO_CLOSE_DURING_CACHE_CLOSE_1));
+            logger.info("Failed to get the CqService, to close during cache close (1).");
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.GemFireCache_FAILED_TO_GET_THE_CQSERVICE_TO_CLOSE_DURING_CACHE_CLOSE_2));
+          logger.info("Failed to get the CqService, to close during cache close (2).");
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.GemFireCacheImpl_MEMCACHED_SERVER_ON_PORT_0_IS_SHUTTING_DOWN,
-          new Object[] {this.system.getConfig().getMemcachedPort()}));
+      logger.info("GemFireMemcachedServer on port {} is shutting down",
+          new Object[] {this.system.getConfig().getMemcachedPort()});
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.GemFireCacheImpl_REST_SERVER_ON_PORT_0_IS_SHUTTING_DOWN,
-          new Object[] {this.system.getConfig().getHttpServicePort()}));
+      logger.info("Rest Server on port {} is shutting down",
+          new Object[] {this.system.getConfig().getHttpServicePort()});
-        logger.fatal(
-            LocalizedMessage.create(LocalizedStrings.Disk_Store_Exception_During_Cache_Close), e);
+        logger.fatal("Cache close caught an exception during disk store close", e);
-          LocalizedStrings.GemFireCache_UNEXPECTED_EXCEPTION.toLocalizedString(), e);
+          "unexpected exception", e);
-          LocalizedStrings.GemFireCache_ATTRIBUTES_MUST_NOT_BE_NULL.toLocalizedString());
+          "Attributes must not be null");
-          throw new Error(LocalizedStrings.GemFireCache_UNEXPECTED_EXCEPTION.toLocalizedString(),
+          throw new Error("unexpected exception",
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GemFireCache_INITIALIZATION_FAILED_FOR_REGION_0, region.getFullPath()),
+        logger.warn(String.format("Initialization failed for Region %s", region.getFullPath()),
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.GemFireCache_INIT_CLEANUP_FAILED_FOR_REGION_0,
-                region.getFullPath()), t);
+            logger.warn(String.format("Initialization failed for Region %s",
+                region.getFullPath()),
+                t);
-          LocalizedStrings.GemFireCache_PATH_CANNOT_BE_NULL.toLocalizedString());
+          "path cannot be null");
-          LocalizedStrings.GemFireCache_PATH_CANNOT_BE_EMPTY.toLocalizedString());
+          "path cannot be empty");
-          LocalizedStrings.GemFireCache_PATH_CANNOT_BE_0.toLocalizedString(Region.SEPARATOR));
+          String.format("path cannot be ' %s '", Region.SEPARATOR));
-          LocalizedStrings.GemFireCache_THE_MESSAGESYNCINTERVAL_PROPERTY_FOR_CACHE_CANNOT_BE_NEGATIVE
-              .toLocalizedString());
+          "The 'messageSyncInterval' property for cache cannot be negative");
-      throw new Error(LocalizedStrings.GemFireCache_UNEXPECTED_EXCEPTION.toLocalizedString(), e);
+      throw new Error("unexpected exception", e);
-          LocalizedStrings.GemFireCache_FOUND_AN_EXISTING_REINITALIZING_REGION_NAMED_0
-              .toLocalizedString(fullPath));
+          String.format("Found an existing reinitalizing region named %s",
+              fullPath));
-          LocalizedStrings.GemFireCache_COULD_NOT_FIND_A_REINITIALIZING_REGION_NAMED_0
-              .toLocalizedString(regionName));
+          String.format("Could not find a reinitializing region named %s",
+              regionName));
-            LocalizedStrings.GemFireCache_A_GATEWAYSENDER_WITH_ID_0_IS_ALREADY_DEFINED_IN_THIS_CACHE
-                .toLocalizedString(sender.getId()));
+            String.format("A GatewaySender with id %s is already defined in this cache.",
+                sender.getId()));
-  private static void closeQuietly(Closeable closeable) { // KIRK
+  private static void closeQuietly(Closeable closeable) {
-    // his cache has been cancelled. doWait below would do that as
+    // its cache has been cancelled. doWait below would do that as
-          this.queryMonitor = new QueryMonitor(this, maxTime);
-          final LoggingThreadGroup group =
-              LoggingThreadGroup.createThreadGroup("QueryMonitor Thread Group", logger);
-          Thread qmThread = new Thread(group, this.queryMonitor, "QueryMonitor Thread");
-          qmThread.setDaemon(true);
-          qmThread.start();
+          this.queryMonitor =
+              new QueryMonitor((ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(
+                  QUERY_MONITOR_THREAD_POOL_SIZE,
+                  (runnable) -> new LoggingThread("QueryMonitor Thread", runnable)),
+                  this,
+                  maxTime);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GemFireCacheImpl_CAUGHT_EXCEPTION_SYNCHRONIZING_EVENTS,
-            new Object[] {sender, region.getFullPath(), entriesToSynchronize}), t);
+        logger.warn(String.format(
+            "Caught the following exception attempting to synchronize events from member=%s; regionPath=%s; entriesToSynchronize=%s:",
+            new Object[] {sender, region.getFullPath(), entriesToSynchronize}),
+            t);
