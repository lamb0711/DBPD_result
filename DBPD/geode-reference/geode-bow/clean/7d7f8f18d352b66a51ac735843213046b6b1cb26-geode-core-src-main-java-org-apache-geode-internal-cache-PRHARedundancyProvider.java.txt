GEODE-6630: move allBucketsRecoveredFromDisk count down latch (#3477)

* Rename RedundancyLogger to PersistentBucketRecoverer
* Move allBucketsRecoveredFromDisk count down latch from PRHARedundancyProvider to PersistentBucketRecoverer.
* Provide utility methods for using the count down latch.

-import java.util.concurrent.CountDownLatch;
+import org.apache.geode.internal.cache.partitioned.PersistentBucketRecoverer;
-import org.apache.geode.internal.cache.partitioned.RedundancyLogger;
-  volatile CountDownLatch allBucketsRecoveredFromDisk;
-
-  private RedundancyLogger redundancyLogger = null;
+  private volatile PersistentBucketRecoverer persistentBucketRecoverer = null;
+    if (proxyBucketArray.length == 0) {
+      throw new IllegalStateException("Unexpected empty proxy bucket array");
+    }
+
+    createPersistentBucketRecoverer(proxyBucketArray.length);
-     * Start the redundancy logger before recovering any proxy buckets.
-     */
-    startRedundancyLogger(proxyBucketArray.length);
-
-    allBucketsRecoveredFromDisk = new CountDownLatch(proxyBucketArray.length);
-    /*
-
-              allBucketsRecoveredFromDisk.countDown();
+              if (getPersistentBucketRecoverer() != null) {
+                getPersistentBucketRecoverer().countDown();
+              }
-      for (final ProxyBucketRegion proxyBucket : bucketsNotHostedLocally) {
-        allBucketsRecoveredFromDisk.countDown();
+      if (getPersistentBucketRecoverer() != null) {
+        getPersistentBucketRecoverer().countDown(bucketsNotHostedLocally.size());
-  void startRedundancyLogger(int proxyBuckets) {
-    if (proxyBuckets > 0) {
-      redundancyLogger = new RedundancyLogger(this);
-      Thread loggingThread = new LoggingThread(
-          "RedundancyLogger for region " + this.prRegion.getName(), false, this.redundancyLogger);
-      loggingThread.start();
-    }
+  private void createPersistentBucketRecoverer(int proxyBuckets) {
+    persistentBucketRecoverer = new PersistentBucketRecoverer(this, proxyBuckets);
+    persistentBucketRecoverer.startLoggingThread();
+  }
+
+  PersistentBucketRecoverer getPersistentBucketRecoverer() {
+    return persistentBucketRecoverer;
-    CountDownLatch recoveryLatch = allBucketsRecoveredFromDisk;
-    if (recoveryLatch != null) {
-      boolean interrupted = false;
-      while (true) {
-        try {
-          this.prRegion.getCancelCriterion().checkCancelInProgress(null);
-          boolean done = recoveryLatch.await(
-              PartitionedRegionHelper.DEFAULT_WAIT_PER_RETRY_ITERATION, TimeUnit.MILLISECONDS);
-          if (done) {
-            break;
-          }
-        } catch (InterruptedException e) {
-          interrupted = true;
-        }
-      }
-      if (interrupted) {
-        Thread.currentThread().interrupt();
-      }
+    if (getPersistentBucketRecoverer() != null) {
+      getPersistentBucketRecoverer().await(
+          PartitionedRegionHelper.DEFAULT_WAIT_PER_RETRY_ITERATION, TimeUnit.MILLISECONDS);
-    CountDownLatch recoveryLatch = allBucketsRecoveredFromDisk;
-    if (recoveryLatch != null) {
-      boolean interrupted = false;
-      while (true) {
-        try {
-          recoveryLatch.await();
-          break;
-        } catch (InterruptedException e) {
-          interrupted = true;
-        }
-      }
-      if (interrupted) {
-        Thread.currentThread().interrupt();
-      }
+    if (getPersistentBucketRecoverer() != null) {
+      getPersistentBucketRecoverer().await();
-    if (allBucketsRecoveredFromDisk != null && allBucketsRecoveredFromDisk.getCount() > 0) {
+    if (getPersistentBucketRecoverer() != null
+        && !getPersistentBucketRecoverer().hasRecoveryCompleted()) {
-      if (redundancyProvider.allBucketsRecoveredFromDisk != null
-          && redundancyProvider.allBucketsRecoveredFromDisk.getCount() > 0) {
+      if (redundancyProvider.getPersistentBucketRecoverer() != null &&
+          !redundancyProvider.getPersistentBucketRecoverer().hasRecoveryCompleted()) {
-
-  public CountDownLatch getAllBucketsRecoveredFromDiskLatch() {
-    return allBucketsRecoveredFromDisk;
-  }
-
