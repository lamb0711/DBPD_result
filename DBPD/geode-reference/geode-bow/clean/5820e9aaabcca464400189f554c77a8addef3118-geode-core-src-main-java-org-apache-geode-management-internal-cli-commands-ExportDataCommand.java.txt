GEODE-5971: Refactor export/import commands to extend GfshCommand andâ€¦ (#2894)


+import java.util.List;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.CliUtil;
+import org.apache.geode.management.cli.GfshCommand;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class ExportDataCommand extends InternalGfshCommand {
+public class ExportDataCommand extends GfshCommand {
-  public Result exportData(
+  public ResultModel exportData(
-    Optional<Result> validationResult = validatePath(filePath, dirPath, parallel);
+    Optional<ResultModel> validationResult = validatePath(filePath, dirPath, parallel);
-    Result result;
+    ResultModel result;
-      result = CliUtil.getFunctionResult(rc, CliStrings.EXPORT_DATA);
+      result = ResultModel.createMemberStatusResult((List<CliFunctionResult>) rc.getResult());
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+      result = ResultModel.createError(e.getMessage());
-      result = ResultBuilder.createGemFireErrorResult(
+      result = ResultModel.createError(
-  private Optional<Result> validatePath(String filePath, String dirPath, boolean parallel) {
+  private Optional<ResultModel> validatePath(String filePath, String dirPath, boolean parallel) {
-          .of(ResultBuilder.createUserErrorResult("Must specify a location to save snapshot"));
+          .of(ResultModel.createError("Must specify a location to save snapshot"));
-      return Optional.of(ResultBuilder.createUserErrorResult(
+      return Optional.of(ResultModel.createError(
-          ResultBuilder.createUserErrorResult("Must specify a directory to save snapshot files"));
+          ResultModel.createError("Must specify a directory to save snapshot files"));
-      return Optional.of(ResultBuilder.createUserErrorResult(CliStrings
-          .format(CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION)));
+      return Optional.of(ResultModel.createError(CliStrings.format(
+          CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION)));
