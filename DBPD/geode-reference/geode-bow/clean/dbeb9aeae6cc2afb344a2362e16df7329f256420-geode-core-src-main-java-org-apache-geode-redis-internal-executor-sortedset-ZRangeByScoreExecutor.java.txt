Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-            command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
+            command.setResponse(
+                Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
-      list = getKeys(key, keyRegion, context, start, stop, startInclusive, stopInclusive, offset, limit);
+      list = getKeys(key, keyRegion, context, start, stop, startInclusive, stopInclusive, offset,
+          limit);
-  private Collection<?> getKeys(ByteArrayWrapper key, Region<ByteArrayWrapper, DoubleWrapper> keyRegion, ExecutionHandlerContext context, double start, double stop, boolean startInclusive, boolean stopInclusive, int offset, int limit) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-    if (start == Double.POSITIVE_INFINITY || stop == Double.NEGATIVE_INFINITY || start > stop || (start == stop && (!startInclusive || !stopInclusive)))
+  private Collection<?> getKeys(ByteArrayWrapper key,
+      Region<ByteArrayWrapper, DoubleWrapper> keyRegion, ExecutionHandlerContext context,
+      double start, double stop, boolean startInclusive, boolean stopInclusive, int offset,
+      int limit) throws FunctionDomainException, TypeMismatchException, NameResolutionException,
+      QueryInvocationTargetException {
+    if (start == Double.POSITIVE_INFINITY || stop == Double.NEGATIVE_INFINITY || start > stop
+        || (start == stop && (!startInclusive || !stopInclusive)))
-        if(stopInclusive) {
+        if (stopInclusive) {
-      params = new Object[]{start, stop, INFINITY_LIMIT};
+      params = new Object[] {start, stop, INFINITY_LIMIT};
-        if(stopInclusive) {
+        if (stopInclusive) {
-      params = new Object[]{start, stop, INFINITY_LIMIT};
+      params = new Object[] {start, stop, INFINITY_LIMIT};
-      params[params.length - 1] =  (limit + offset);
+      params[params.length - 1] = (limit + offset);
-    else 
+    else
