Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This subclass's job is to keep customers from getting a reference to a value
- * that is off-heap. Any access to an off-heap value should appear to the customer
- * as a serialized value.
+ * This subclass's job is to keep customers from getting a reference to a value that is off-heap.
+ * Any access to an off-heap value should appear to the customer as a serialized value.
-  
+
-      // For off-heap object act as if they are serialized forcing them to call getSerializedValue or getValue
+      // For off-heap object act as if they are serialized forcing them to call getSerializedValue
+      // or getValue
-      throw new IllegalStateException("Attempt to access off-heap value after the OperationContext callback returned.");
+      throw new IllegalStateException(
+          "Attempt to access off-heap value after the OperationContext callback returned.");
-  
+
-      // since they called getValue they don't care if it is serialized or deserialized so return it as serialized
+      // since they called getValue they don't care if it is serialized or deserialized so return it
+      // as serialized
