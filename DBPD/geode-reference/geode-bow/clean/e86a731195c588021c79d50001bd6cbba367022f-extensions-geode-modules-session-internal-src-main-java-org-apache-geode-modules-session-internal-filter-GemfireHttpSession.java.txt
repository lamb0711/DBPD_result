Merge branch 'release/1.3.0'

-  private HttpSession nativeSession = null;
+  private ServletContext context;
+    registerInstantiator();
+  }
+
+  public static void registerInstantiator() {
-  public GemfireHttpSession(String id, HttpSession nativeSession) {
+  public GemfireHttpSession(String id, ServletContext context) {
-    this.nativeSession = nativeSession;
-    if (nativeSession != null) {
-      attributes.setMaxInactiveInterval(nativeSession.getMaxInactiveInterval());
-    }
+    this.context = context;
-    if (!isValid) {
-      throw new IllegalStateException("Session is already invalidated");
-    }
+    checkValid();
-    if (nativeSession != null) {
-      return nativeSession.getCreationTime();
-    } else {
-      return 0;
-    }
+    checkValid();
+    return attributes.getCreationTime();
+  public void setServletContext(ServletContext context) {
+    this.context = context;
+  }
+
-    if (nativeSession != null) {
-      return nativeSession.getServletContext();
-    } else {
-      return null;
-    }
+    return context;
-    nativeSession.invalidate();
-    if (nativeSession != null) {
-      nativeSession.setMaxInactiveInterval(interval);
-    }
-    if (nativeSession != null) {
-      return nativeSession.getMaxInactiveInterval();
-    } else {
-      return attributes.getMaxIntactiveInterval();
-    }
+    return attributes.getMaxIntactiveInterval();
+    checkValid();
-    nativeSession.removeAttribute(name);
+    checkValid();
-    nativeSession.setAttribute(name, value);
+  private void checkValid() {
+    if (!isValid()) {
+      throw new IllegalStateException("Session is invalid");
+    }
+  }
+
-    if (getNativeSession() != null) {
-      for (String s : attributes.getAttributeNames()) {
-        getNativeSession().setAttribute(s, attributes.getAttribute(s));
-      }
-    }
-
-  /**
-   * For testing allow retrieval of the wrapped, native session.
-   */
-  public HttpSession getNativeSession() {
-    return nativeSession;
-  }
-
-
-  public void setNativeSession(HttpSession session) {
-    this.nativeSession = session;
-  }
-
-  /**
-   * Handle the process of failing over the session to a new native session object.
-   *
-   * @param session
-   */
-  public void failoverSession(HttpSession session) {
-    LOG.debug("Failing over session {} to {}", getId(), session.getId());
-    setNativeSession(session);
-    for (String name : attributes.getAttributeNames()) {
-      LOG.debug("Copying '{}' => {}", name, attributes.getAttribute(name));
-      session.setAttribute(name, attributes.getAttribute(name));
-    }
-    session.setMaxInactiveInterval(attributes.getMaxIntactiveInterval());
-    manager.putSession(this);
-  }
-
