GEODE-2197: refactor cluster config

 * not to save the xml, properties in the file system.
 * the cc region's change listener is to download the jar from other locators

-import java.util.HashSet;
-import java.util.List;
-import java.util.Properties;
-import java.util.Set;
-
-import org.apache.logging.log4j.Logger;
-
+import org.apache.logging.log4j.Logger;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.Properties;
+import java.util.Set;
- * 
+ *
-  private final AddJarFunction saveJarFunction = new AddJarFunction();
+  private final AddJarFunction addJarFunction = new AddJarFunction();
-      String[] groups) {
+                                                    String[] groups) {
-    return saveConfigChangesAllLocators(saveJarFunction, args);
+    return saveConfigChanges(addJarFunction, args);
-    return saveConfigChangesAllLocators(deleteJarFunction, args);
+    return saveConfigChanges(deleteJarFunction, args);
-    boolean success = false;
-    if (!locators.isEmpty()) {
-      for (DistributedMember locator : locators) {
-        ResultCollector<?, ?> rc = CliUtil.executeFunction(function, args, locator);
-        @SuppressWarnings("unchecked")
-        List<ConfigurationChangeResult> results = (List<ConfigurationChangeResult>) rc.getResult();
-        if (!results.isEmpty()) {
-          ConfigurationChangeResult configChangeResult = results.get(0);
-          if (configChangeResult.isSuccessful()) {
-            logger.info("Configuration change successful");
-            success = true;
-            break;
-          } else {
-            logger.info("Failed to save the configuration change. {}", configChangeResult);
-            success = false;
-          }
-        }
-      }
+    boolean success = locators.stream()
+        .map((DistributedMember locator) -> saveConfigChangeOnLocator(locator, function, args))
+        .anyMatch((Boolean result) -> result);
+
+    if (!success) {
+      logger.error("Failed to save the configuration change.");
+
+  private boolean saveConfigChangeOnLocator(DistributedMember locator, Function function,
+                                            Object[] args) {
+    ResultCollector<?, ?> rc = CliUtil.executeFunction(function, args, locator);
+    List<ConfigurationChangeResult> results = (List<ConfigurationChangeResult>) rc.getResult();
-  private boolean saveConfigChangesAllLocators(Function function, Object[] args) {
-    if (!isSharedConfigEnabled) {
-      return true;
-    }
-    boolean success = true;
-    Set<DistributedMember> locators = new HashSet<DistributedMember>(
-        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
+    Optional<ConfigurationChangeResult> result = results.stream()
+        .filter(Objects::nonNull)
+        .filter(ConfigurationChangeResult::isSuccessful)
+        .findFirst();
-    if (!locators.isEmpty()) {
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(function, args, locators);
-      @SuppressWarnings("unchecked")
-      List<ConfigurationChangeResult> results = (List<ConfigurationChangeResult>) rc.getResult();
-
-      if (!results.isEmpty()) {
-        for (ConfigurationChangeResult configChangeResult : results) {
-          if (!configChangeResult.isSuccessful()) {
-            success = false;
-            break;
-          }
-        }
-      }
-    }
-    return success;
+    return result.isPresent();
