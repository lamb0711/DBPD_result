GEODE-4830: use CacheConfig to access the jndi list in ListJNDIBindingCommand

* updated the CacheConfig to hold only one JNDIBindingsType instead of a list
* make sure xml created by those POJOs can be used to start a server
* the service will keep a list of bind classes for clearer xml generation.
* the service will keep a reference to the marshaer/unmarsher for faster operation

-import java.net.URL;
+import java.util.Collection;
-import javax.xml.XMLConstants;
-import javax.xml.validation.Schema;
-import javax.xml.validation.SchemaFactory;
+import org.apache.geode.lang.Identifiable;
+    bindClasses.add(CacheConfig.class);
+    initJaxbContext();
+    bindClasses.add(CacheConfig.class);
+    initJaxbContext();
+  private Collection<Class> bindClasses = new ArrayList<>();
+  private Marshaller marshaller;
+  private Unmarshaller unmarshaller;
+
+  private void initJaxbContext() {
+    try {
+      JAXBContext jaxbContext =
+          JAXBContext.newInstance(bindClasses.toArray(new Class[bindClasses.size()]));
+      marshaller = jaxbContext.createMarshaller();
+      // currently we are generating the xml from jabx object so we don't need schema validation.
+      // but in the future, we will need to add the various xsd for schema validation. and these
+      // xsd needs to be local (no network access)
+      marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,
+          "http://geode.apache.org/schema/cache http://geode.apache.org/schema/cache/cache-1.0.xsd");
+      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
+      unmarshaller = jaxbContext.createUnmarshaller();
+    } catch (Exception e) {
+      throw new RuntimeException(e.getMessage(), e);
+    }
+  }
+
+  private Marshaller getMarshaller(Class... additionBindClass) {
+    if (bindClasses.containsAll(Arrays.asList(additionBindClass))) {
+      return marshaller;
+    }
+
+    bindClasses.addAll(Arrays.asList(additionBindClass));
+    initJaxbContext();
+    return marshaller;
+  }
+
+  private Unmarshaller getUnmarshaller(Class... additionBindClass) {
+    if (bindClasses.containsAll(Arrays.asList(additionBindClass))) {
+      return unmarshaller;
+    }
+
+    bindClasses.addAll(Arrays.asList(additionBindClass));
+    initJaxbContext();
+    return unmarshaller;
+  }
+
+  public <T extends Identifiable<String>> T findElement(List<T> list, String id) {
+    return list.stream().filter(o -> o.getId().equals(id)).findFirst().orElse(null);
+  }
+
-    List<Class> classes = new ArrayList<>(Arrays.asList(additionalClass));
-    classes.add(0, CacheConfig.class);
-      JAXBContext jaxbContext = JAXBContext.newInstance(classes.toArray(new Class[classes.size()]));
-      Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
-      SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
-      Schema schema =
-          factory.newSchema(new URL("http://geode.apache.org/schema/cache/cache-1.0.xsd"));
-      jaxbMarshaller.setSchema(schema);
-
-      jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
-      jaxbMarshaller.marshal(config, sw);
+      getMarshaller(additionalClass).marshal(config, sw);
-    List<Class> classes = new ArrayList<>(Arrays.asList(additionalClass));
-    classes.add(0, CacheConfig.class);
-      JAXBContext jaxbContext = JAXBContext.newInstance(classes.toArray(new Class[classes.size()]));
-      Unmarshaller jaxUnmarshaller = jaxbContext.createUnmarshaller();
-      return (CacheConfig) jaxUnmarshaller.unmarshal(new StringReader(xml));
+      return (CacheConfig) getUnmarshaller(additionalClass).unmarshal(new StringReader(xml));
