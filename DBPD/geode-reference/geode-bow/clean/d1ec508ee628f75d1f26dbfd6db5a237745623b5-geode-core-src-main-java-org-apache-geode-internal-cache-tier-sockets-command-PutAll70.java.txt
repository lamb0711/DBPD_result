GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-  public void cmdExecute(Message msg, ServerConnection servConn, long startp)
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection, long startp)
-    CachedRegionHelper crHelper = servConn.getCachedRegionHelper();
-    CacheServerStats stats = servConn.getCacheServerStats();
+    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
+    CacheServerStats stats = serverConnection.getCacheServerStats();
-    servConn.setAsTrue(REQUIRES_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_RESPONSE);
-      regionNamePart = msg.getPart(0);
+      regionNamePart = clientMessage.getPart(0);
-        logger.warn("{}: {}", servConn.getName(), putAllMsg);
+        logger.warn("{}: {}", serverConnection.getName(), putAllMsg);
-        writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR, errMessage.toString(),
+            serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeRegionDestroyedEx(clientMessage, regionName, reason, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-      eventPart = msg.getPart(1);
+      eventPart = clientMessage.getPart(1);
-      EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
+      EventID eventId =
+          new EventID(serverConnection.getEventMemberIDByteArray(), threadId, sequenceId);
-      Part callbacksPart = msg.getPart(2);
+      Part callbacksPart = clientMessage.getPart(2);
-      numberOfKeysPart = msg.getPart(3);
+      numberOfKeysPart = clientMessage.getPart(3);
-        keyPart = msg.getPart(4 + i * 2);
+        keyPart = clientMessage.getPart(4 + i * 2);
-          logger.warn("{}: {}", servConn.getName(), putAllMsg);
+          logger.warn("{}: {}", serverConnection.getName(), putAllMsg);
-          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-          servConn.setAsTrue(RESPONDED);
+          writeErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR, errMessage.toString(),
+              serverConnection);
+          serverConnection.setAsTrue(RESPONDED);
-        valuePart = msg.getPart(4 + i * 2 + 1);
+        valuePart = clientMessage.getPart(4 + i * 2 + 1);
-          logger.warn("{}: {}", servConn.getName(), putAllMsg);
+          logger.warn("{}: {}", serverConnection.getName(), putAllMsg);
-          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-          servConn.setAsTrue(RESPONDED);
+          writeErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR, errMessage.toString(),
+              serverConnection);
+          serverConnection.setAsTrue(RESPONDED);
-        if (msg.isRetry()) {
+        if (clientMessage.isRetry()) {
-      if (msg.getNumberOfParts() == (4 + 2 * numberOfKeys + 1)) {// it means optional timeout has
-                                                                 // been added
-        int timeout = msg.getPart(4 + 2 * numberOfKeys).getInt();
-        servConn.setRequestSpecificTimeout(timeout);
+      if (clientMessage.getNumberOfParts() == (4 + 2 * numberOfKeys + 1)) {// it means optional
+                                                                           // timeout has
+        // been added
+        int timeout = clientMessage.getPart(4 + 2 * numberOfKeys).getInt();
+        serverConnection.setRequestSpecificTimeout(timeout);
-      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
-            servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
+            serverConnection.getName(), clientMessage.getPayloadLength(),
+            serverConnection.getSocketString(), regionName);
-      response = region.basicBridgePutAll(map, retryVersions, servConn.getProxyID(), eventId,
-          skipCallbacks, null);
+      response = region.basicBridgePutAll(map, retryVersions, serverConnection.getProxyID(),
+          eventId, skipCallbacks, null);
-          writeReplyWithRefreshMetadata(msg, response, servConn, pr, pr.getNetworkHopType());
+          writeReplyWithRefreshMetadata(clientMessage, response, serverConnection, pr,
+              pr.getNetworkHopType());
-      writeException(msg, rde, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, rde, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      writeException(msg, re, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, re, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      writeException(msg, pre, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, pre, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      checkForInterrupt(servConn, ce);
+      checkForInterrupt(serverConnection, ce);
-      writeException(msg, ce, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeException(clientMessage, ce, false, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-          servConn.getName()), ce);
+          serverConnection.getName()), ce);
-      logger.debug("{}: Sending putAll70 response back to {} for region {}: {}", servConn.getName(),
-          servConn.getSocketString(), regionName, response);
+      logger.debug("{}: Sending putAll70 response back to {} for region {}: {}",
+          serverConnection.getName(), serverConnection.getSocketString(), regionName, response);
-    if (response != null && Version.GFE_70.compareTo(servConn.getClientVersion()) < 0) {
+    if (response != null && Version.GFE_70.compareTo(serverConnection.getClientVersion()) < 0) {
-      writeReply(msg, response, servConn);
+      writeReply(clientMessage, response, serverConnection);
-    servConn.setAsTrue(RESPONDED);
+    serverConnection.setAsTrue(RESPONDED);
-  protected void writeReply(Message origMsg, ServerConnection servConn) throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection serverConnection) throws IOException {
-    replyMsg.addBytesPart(OK_BYTES);
+    replyMsg.addBytesPart(okBytes());
-  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection servConn,
+  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection serverConnection,
-      logger.trace("{}: rpl with REFRESH_METADAT tx: {}", servConn.getName(),
+      logger.trace("{}: rpl with REFRESH_METADATA tx: {}", servConn.getName(),
