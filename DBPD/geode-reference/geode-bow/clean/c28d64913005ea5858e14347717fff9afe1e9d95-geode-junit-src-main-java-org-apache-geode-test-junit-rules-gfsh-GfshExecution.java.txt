Merge branch 'release/1.4.0'

+import java.io.BufferedReader;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.List;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import com.google.common.base.Charsets;
+import org.apache.commons.lang.exception.ExceptionUtils;
+
+  public List<File> getServerDirs() {
+    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
+
+    Predicate<File> isServerDir = (File directory) -> Arrays.stream(directory.list())
+        .anyMatch(filename -> filename.endsWith("server.pid"));
+
+    return Arrays.stream(potentialMemberDirectories).filter(isServerDir)
+        .collect(Collectors.toList());
+  }
+
+  public List<File> getLocatorDirs() {
+    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
+
+    Predicate<File> isLocatorDir = (File directory) -> Arrays.stream(directory.list())
+        .anyMatch(filename -> filename.endsWith("locator.pid"));
+
+    return Arrays.stream(potentialMemberDirectories).filter(isLocatorDir)
+        .collect(Collectors.toList());
+  }
+
+  public void printLogFiles() {
+    System.out
+        .println("Printing contents of all log files found in " + workingDir.getAbsolutePath());
+    List<File> logFiles = findLogFiles();
+
+    for (File logFile : logFiles) {
+      System.out.println("Contents of " + logFile.getAbsolutePath());
+      try (BufferedReader br =
+          new BufferedReader(new InputStreamReader(new FileInputStream(logFile), Charsets.UTF_8))) {
+        String line;
+        while ((line = br.readLine()) != null) {
+          System.out.println(line);
+        }
+      } catch (IOException ignored) {
+        System.out.println("Unable to print log due to: " + ExceptionUtils.getStackTrace(ignored));
+      }
+    }
+  }
+
+  private List<File> findLogFiles() {
+    List<File> servers = getServerDirs();
+    List<File> locators = getLocatorDirs();
+
+    return Stream.concat(servers.stream(), locators.stream()).flatMap(this::findLogFiles)
+        .collect(Collectors.toList());
+  }
+
+  private Stream<File> findLogFiles(File memberDir) {
+    return Arrays.stream(memberDir.listFiles()).filter(File::isFile)
+        .filter(file -> file.getName().toLowerCase().endsWith(".log"));
+  }
