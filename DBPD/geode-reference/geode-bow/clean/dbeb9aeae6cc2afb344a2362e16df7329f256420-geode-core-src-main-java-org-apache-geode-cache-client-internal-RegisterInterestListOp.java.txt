Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-   * Does a region registerInterestList on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a region registerInterestList on a server using connections from the given pool to
+   * communicate with the server.
+   * 
-  public static List execute(ExecutablePool pool,
-                             String region,
-                             List keys,
-                             InterestResultPolicy policy,
-                             boolean isDurable,
-                             boolean receiveUpdatesAsInvalidates,
-                             byte regionDataPolicy)
-  {
-    AbstractOp op = new RegisterInterestListOpImpl(region, keys, policy,
-        isDurable, receiveUpdatesAsInvalidates, regionDataPolicy);
+  public static List execute(ExecutablePool pool, String region, List keys,
+      InterestResultPolicy policy, boolean isDurable, boolean receiveUpdatesAsInvalidates,
+      byte regionDataPolicy) {
+    AbstractOp op = new RegisterInterestListOpImpl(region, keys, policy, isDurable,
+        receiveUpdatesAsInvalidates, regionDataPolicy);
-                                                               
+
+
-   * Does a region registerInterestList on a server using connections from the given pool
-   * to communicate with the given server location.
+   * Does a region registerInterestList on a server using connections from the given pool to
+   * communicate with the given server location.
+   * 
-  public static List executeOn(ServerLocation sl,
-                               ExecutablePool pool,
-                               String region,
-                               List keys,
-                               InterestResultPolicy policy,
-                               boolean isDurable,
-                               boolean receiveUpdatesAsInvalidates,
-                               byte regionDataPolicy)
-  { 
-    AbstractOp op = new RegisterInterestListOpImpl(region, keys, policy,
-        isDurable, receiveUpdatesAsInvalidates, regionDataPolicy);
-    return  (List) pool.executeOn(sl, op);
+  public static List executeOn(ServerLocation sl, ExecutablePool pool, String region, List keys,
+      InterestResultPolicy policy, boolean isDurable, boolean receiveUpdatesAsInvalidates,
+      byte regionDataPolicy) {
+    AbstractOp op = new RegisterInterestListOpImpl(region, keys, policy, isDurable,
+        receiveUpdatesAsInvalidates, regionDataPolicy);
+    return (List) pool.executeOn(sl, op);
-  
+
-   * Does a region registerInterestList on a server using connections from the given pool
-   * to communicate with the given server location.
+   * Does a region registerInterestList on a server using connections from the given pool to
+   * communicate with the given server location.
+   * 
-  public static List executeOn(Connection conn,
-                               ExecutablePool pool,
-                               String region,
-                               List keys,
-                               InterestResultPolicy policy,
-                               boolean isDurable,
-                               boolean receiveUpdatesAsInvalidates,
-                               byte regionDataPolicy)
-  {
-    AbstractOp op = new RegisterInterestListOpImpl(region, keys, policy,
-        isDurable, receiveUpdatesAsInvalidates, regionDataPolicy);
-    return  (List) pool.executeOn(conn, op);
+  public static List executeOn(Connection conn, ExecutablePool pool, String region, List keys,
+      InterestResultPolicy policy, boolean isDurable, boolean receiveUpdatesAsInvalidates,
+      byte regionDataPolicy) {
+    AbstractOp op = new RegisterInterestListOpImpl(region, keys, policy, isDurable,
+        receiveUpdatesAsInvalidates, regionDataPolicy);
+    return (List) pool.executeOn(conn, op);
-  
+
-    public RegisterInterestListOpImpl(String region,
-                                      List keys,
-                                      InterestResultPolicy policy,
-                                      boolean isDurable,
-                                      boolean receiveUpdatesAsInvalidates,
-                                      byte regionDataPolicy) {
+    public RegisterInterestListOpImpl(String region, List keys, InterestResultPolicy policy,
+        boolean isDurable, boolean receiveUpdatesAsInvalidates, byte regionDataPolicy) {
-        byte durableByte = (byte)(isDurable ? 0x01 : 0x00);
+        byte durableByte = (byte) (isDurable ? 0x01 : 0x00);
-      }      
-      //Set chunk size of HDOS for keys      
-      getMessage().setChunkSize(keys.size()*16);
+      }
+      // Set chunk size of HDOS for keys
+      getMessage().setChunkSize(keys.size() * 16);
-      
-      byte notifyByte = (byte)(receiveUpdatesAsInvalidates ? 0x01 : 0x00);
+
+      byte notifyByte = (byte) (receiveUpdatesAsInvalidates ? 0x01 : 0x00);
-      // Java clients always expect serializeValues to be true in VersionObjectList unlike Native clients.
+      // Java clients always expect serializeValues to be true in VersionObjectList unlike Native
+      // clients.
-      getMessage().addBytesPart(new byte[] {regionDataPolicy, (byte)0x01});
+      getMessage().addBytesPart(new byte[] {regionDataPolicy, (byte) 0x01});
+
