GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-import java.util.Properties;
-
-import org.apache.geode.cache.RegionFactory;
-import org.apache.geode.internal.cache.LocalRegion;
+  private Region<String, GatewayDeltaEvent> gatewayDeltaRegion;
-  private LocalRegion gatewayDeltaRegion;
-
+  @SuppressWarnings("unused")
-  @SuppressWarnings("unchecked")
-        StringBuilder builder = new StringBuilder();
-        builder.append("GatewayDeltaForwarderCacheListener: Received create event for ")
-            .append(event.getKey()).append("->").append(event.getNewValue())
-            .append(" that originated in the local site. Sending it to the remote site.");
-        this.cache.getLogger().fine(builder.toString());
+        String builder = "GatewayDeltaForwarderCacheListener: Received create event for "
+            + event.getKey() + "->" + event.getNewValue()
+            + " that originated in the local site. Sending it to the remote site.";
+        this.cache.getLogger().fine(
+            builder);
-        StringBuilder builder = new StringBuilder();
-        builder.append("GatewayDeltaForwarderCacheListener: Received create event for ")
-            .append(event.getKey()).append("->").append(event.getNewValue())
-            .append(" that originated in the remote site.");
-        this.cache.getLogger().fine(builder.toString());
+        String builder = "GatewayDeltaForwarderCacheListener: Received create event for "
+            + event.getKey() + "->" + event.getNewValue()
+            + " that originated in the remote site.";
+        this.cache.getLogger().fine(builder);
-        StringBuilder builder = new StringBuilder();
-        builder.append("GatewayDeltaForwarderCacheListener: Received update event for ")
-            .append(event.getKey()).append("->").append(event.getNewValue())
-            .append(" that originated in the local site. Sending it to the remote site.");
-        this.cache.getLogger().fine(builder.toString());
+        String builder = "GatewayDeltaForwarderCacheListener: Received update event for "
+            + event.getKey() + "->" + event.getNewValue()
+            + " that originated in the local site. Sending it to the remote site.";
+        this.cache.getLogger().fine(
+            builder);
-        StringBuilder builder = new StringBuilder();
-        builder.append("GatewayDeltaForwarderCacheListener: Received update event for ")
-            .append(event.getKey()).append("->").append(event.getNewValue())
-            .append(" that originated in the remote site.");
-        this.cache.getLogger().fine(builder.toString());
+        String builder = "GatewayDeltaForwarderCacheListener: Received update event for "
+            + event.getKey() + "->" + event.getNewValue()
+            + " that originated in the remote site.";
+        this.cache.getLogger().fine(builder);
-        StringBuilder builder = new StringBuilder();
-        builder.append("GatewayDeltaForwarderCacheListener: Received destroy event for ")
-            .append(event.getKey()).append("->").append(event.getNewValue())
-            .append(" that originated in the local site. Sending it to the remote site.");
-        this.cache.getLogger().fine(builder.toString());
+        String builder = "GatewayDeltaForwarderCacheListener: Received destroy event for "
+            + event.getKey() + "->" + event.getNewValue()
+            + " that originated in the local site. Sending it to the remote site.";
+        this.cache.getLogger().fine(
+            builder);
-        StringBuilder builder = new StringBuilder();
-        builder.append("GatewayDeltaForwarderCacheListener: Received destroy event for session ")
-            .append(event.getKey())
-            .append(" that either expired or originated in the remote site.");
-        this.cache.getLogger().fine(builder.toString());
+        String builder = "GatewayDeltaForwarderCacheListener: Received destroy event for session "
+            + event.getKey()
+            + " that either expired or originated in the remote site.";
+        this.cache.getLogger().fine(builder);
-  @Override
-  public void init(Properties p) {}
-
-  private LocalRegion getGatewayDeltaRegion() {
+  private Region<String, GatewayDeltaEvent> getGatewayDeltaRegion() {
-  @SuppressWarnings("unchecked")
-  private LocalRegion createOrRetrieveGatewayDeltaRegion() {
-    Region region = this.cache.getRegion(GatewayDelta.GATEWAY_DELTA_REGION_NAME);
+  private Region<String, GatewayDeltaEvent> createOrRetrieveGatewayDeltaRegion() {
+    Region<String, GatewayDeltaEvent> region =
+        this.cache.getRegion(GatewayDelta.GATEWAY_DELTA_REGION_NAME);
+
-      region = new RegionFactory().setScope(Scope.LOCAL).setDataPolicy(DataPolicy.EMPTY)
+      region = this.cache.<String, GatewayDeltaEvent>createRegionFactory().setScope(Scope.LOCAL)
+          .setDataPolicy(DataPolicy.EMPTY)
+
-      StringBuilder builder = new StringBuilder();
-      builder.append("GatewayDeltaForwarderCacheListener: Created gateway delta region: ")
-          .append(region);
-      this.cache.getLogger().fine(builder.toString());
+      String builder = "GatewayDeltaForwarderCacheListener: Created gateway delta region: "
+          + region;
+      this.cache.getLogger().fine(builder);
-    return (LocalRegion) region;
+
+    return region;
-    if (obj == null || !(obj instanceof GatewayDeltaForwarderCacheListener)) {
-      return false;
-    }
-
-    return true;
+    return obj instanceof GatewayDeltaForwarderCacheListener;
