Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  ExecuteFunction66() {
-  }
+  ExecuteFunction66() {}
-      if (bytes.length >= 5 && servConn.getClientVersion().ordinal() >= Version.GFE_8009.ordinal()) {
+      if (bytes.length >= 5
+          && servConn.getClientVersion().ordinal() >= Version.GFE_8009.ordinal()) {
-      logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, function), exception);
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+          function), exception);
-      final String message = LocalizedStrings.ExecuteFunction_THE_INPUT_FUNCTION_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
-        .toLocalizedString();
-      logger.warn(LocalizedMessage.create(LocalizedStrings.TWO_ARG_COLON, new Object[] {
-        servConn.getName(),
-        message
-      }));
+      final String message =
+          LocalizedStrings.ExecuteFunction_THE_INPUT_FUNCTION_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL
+              .toLocalizedString();
+      logger.warn(LocalizedMessage.create(LocalizedStrings.TWO_ARG_COLON,
+          new Object[] {servConn.getName(), message}));
-          final String message = LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED.toLocalizedString(function);
+          final String message = LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
+              .toLocalizedString(function);
-          byte functionStateOnServerSide = AbstractExecution.getFunctionState(functionObject.isHA(), functionObject.hasResult(), functionObject
-            .optimizeForWrite());
+          byte functionStateOnServerSide = AbstractExecution.getFunctionState(functionObject.isHA(),
+              functionObject.hasResult(), functionObject.optimizeForWrite());
-            logger.debug("Function State on server side: {} on client: {}", functionStateOnServerSide, functionState);
+            logger.debug("Function State on server side: {} on client: {}",
+                functionStateOnServerSide, functionState);
-            String message = LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER.toLocalizedString(function);
+            String message =
+                LocalizedStrings.FunctionService_FUNCTION_ATTRIBUTE_MISMATCH_CLIENT_SERVER
+                    .toLocalizedString(function);
-        executeContext = authzRequest.executeFunctionAuthorize(functionObject.getId(), null, null, args, functionObject.optimizeForWrite());
+        executeContext = authzRequest.executeFunctionAuthorize(functionObject.getId(), null, null,
+            args, functionObject.optimizeForWrite());
-      ServerToClientFunctionResultSender resultSender = new ServerToClientFunctionResultSender65(m, MessageType.EXECUTE_FUNCTION_RESULT, servConn, functionObject, executeContext);
+      ServerToClientFunctionResultSender resultSender = new ServerToClientFunctionResultSender65(m,
+          MessageType.EXECUTE_FUNCTION_RESULT, servConn, functionObject, executeContext);
-      InternalDistributedMember localVM =  (InternalDistributedMember)servConn.getCache().getDistributedSystem().getDistributedMember();
+      InternalDistributedMember localVM = (InternalDistributedMember) servConn.getCache()
+          .getDistributedSystem().getDistributedMember();
-        context = new FunctionContextImpl(functionObject.getId(), memberMappedArg.getArgumentsForMember(localVM.getId()), resultSender, isReexecute);
+        context = new FunctionContextImpl(functionObject.getId(),
+            memberMappedArg.getArgumentsForMember(localVM.getId()), resultSender, isReexecute);
-        GemFireCacheImpl cache = (GemFireCacheImpl)servConn.getCache();
-        HeapMemoryMonitor hmm = ((InternalResourceManager) cache.getResourceManager()).getHeapMonitor();
-        if (functionObject.optimizeForWrite() && cache != null && hmm.getState()
-                                                                     .isCritical() && !MemoryThresholds.isLowMemoryExceptionDisabled()) {
+        GemFireCacheImpl cache = (GemFireCacheImpl) servConn.getCache();
+        HeapMemoryMonitor hmm =
+            ((InternalResourceManager) cache.getResourceManager()).getHeapMonitor();
+        if (functionObject.optimizeForWrite() && cache != null && hmm.getState().isCritical()
+            && !MemoryThresholds.isLowMemoryExceptionDisabled()) {
-          Exception e = new LowMemoryException(LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1.toLocalizedString(new Object[] {
-            functionObject.getId(), sm
-          }), sm);
+          Exception e = new LowMemoryException(
+              LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
+                  .toLocalizedString(new Object[] {functionObject.getId(), sm}),
+              sm);
-         * if cache is null, then either cache has not yet been created on
-         * this node or it is a shutdown scenario.
+         * if cache is null, then either cache has not yet been created on this node or it is a
+         * shutdown scenario.
-          executeFunctionOnGroups(function, args, groups, allMembers, functionObject, resultSender, ignoreFailedMembers);
+          executeFunctionOnGroups(function, args, groups, allMembers, functionObject, resultSender,
+              ignoreFailedMembers);
-          executeFunctionaLocally(functionObject, context, (ServerToClientFunctionResultSender65) resultSender, dm, stats);
+          executeFunctionaLocally(functionObject, context,
+              (ServerToClientFunctionResultSender65) resultSender, dm, stats);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, function), ioException);
-      String message = LocalizedStrings.ExecuteFunction_SERVER_COULD_NOT_SEND_THE_REPLY.toLocalizedString();
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+          function), ioException);
+      String message =
+          LocalizedStrings.ExecuteFunction_SERVER_COULD_NOT_SEND_THE_REPLY.toLocalizedString();
-        logger.debug(LocalizedMessage.create(LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, new Object[] {
-          function
-        }), internalfunctionException);
+        logger.debug(LocalizedMessage.create(
+            LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+            new Object[] {function}), internalfunctionException);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, function), e);
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+          function), e);
-  protected void executeFunctionOnGroups(Object function,
-                                         Object args,
-                                         String[] groups,
-                                         boolean allMembers,
-                                         Function functionObject,
-                                         ServerToClientFunctionResultSender resultSender,
-                                         boolean ignoreFailedMembers) {
+  protected void executeFunctionOnGroups(Object function, Object args, String[] groups,
+      boolean allMembers, Function functionObject, ServerToClientFunctionResultSender resultSender,
+      boolean ignoreFailedMembers) {
-  private void executeFunctionaLocally(final Function fn,
-                                       final FunctionContext cx,
-                                       final ServerToClientFunctionResultSender65 sender,
-                                       DM dm,
-                                       final FunctionStats stats) throws IOException {
+  private void executeFunctionaLocally(final Function fn, final FunctionContext cx,
+      final ServerToClientFunctionResultSender65 sender, DM dm, final FunctionStats stats)
+      throws IOException {
-      if (!((ServerToClientFunctionResultSender65) sender).isLastResultReceived() && fn.hasResult()) {
-        throw new FunctionException(LocalizedStrings.ExecuteFunction_THE_FUNCTION_0_DID_NOT_SENT_LAST_RESULT.toString(fn
-          .getId()));
+      if (!((ServerToClientFunctionResultSender65) sender).isLastResultReceived()
+          && fn.hasResult()) {
+        throw new FunctionException(
+            LocalizedStrings.ExecuteFunction_THE_FUNCTION_0_DID_NOT_SENT_LAST_RESULT
+                .toString(fn.getId()));
-       * if dm is null it mean cache is also null. Transactional function
-       * without cache cannot be executed.
+       * if dm is null it mean cache is also null. Transactional function without cache cannot be
+       * executed.
-                cache.getLoggerI18n().warning(LocalizedStrings.ExecuteFunction66_TRANSACTIONAL_FUNCTION_WITHOUT_RESULT);
+                cache.getLoggerI18n().warning(
+                    LocalizedStrings.ExecuteFunction66_TRANSACTIONAL_FUNCTION_WITHOUT_RESULT);
-              logger.debug(LocalizedMessage.create(LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, new Object[] {
-                fn
-              }), internalfunctionException);
+              logger.debug(LocalizedMessage.create(
+                  LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+                  new Object[] {fn}), internalfunctionException);
-            logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, fn), functionException);
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+                fn), functionException);
-            logger.warn(LocalizedMessage.create(LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0, fn), exception);
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.ExecuteFunction_EXCEPTION_ON_SERVER_WHILE_EXECUTIONG_FUNCTION_0,
+                fn), exception);
-         * Executing the function in its own thread pool as FunctionExecution
-         * Thread pool of DisributionManager is not yet available.
+         * Executing the function in its own thread pool as FunctionExecution Thread pool of
+         * DisributionManager is not yet available.
-  private void sendException(byte hasResult, Message msg, String message, ServerConnection servConn, Throwable e)
-    throws IOException {
+  private void sendException(byte hasResult, Message msg, String message, ServerConnection servConn,
+      Throwable e) throws IOException {
-  private void sendError(byte hasResult, Message msg, String message, ServerConnection servConn) throws IOException {
+  private void sendError(byte hasResult, Message msg, String message, ServerConnection servConn)
+      throws IOException {
