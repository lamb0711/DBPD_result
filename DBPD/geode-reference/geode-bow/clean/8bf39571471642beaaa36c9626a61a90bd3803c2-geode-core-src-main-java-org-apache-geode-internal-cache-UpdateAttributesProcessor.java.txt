Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class is a bit misnamed. It really has more with pushing
- * a DistributionAdvisee's profile out to others and,
- * optionally if <code>profileExchange</code>,
- * fetching the profile of anyone who excepts the pushed profile.
+ * This class is a bit misnamed. It really has more with pushing a DistributionAdvisee's profile out
+ * to others and, optionally if <code>profileExchange</code>, fetching the profile of anyone who
+ * excepts the pushed profile.
-  
+
-   * If true then sender is telling receiver to remove the sender's profile.
-   * No profile exchange is needed in this case.
+   * If true then sender is telling receiver to remove the sender's profile. No profile exchange is
+   * needed in this case.
+   * 
+   * 
-   * Distribute new profile version without exchange of profiles. Same as 
-   * calling {@link #distribute(boolean)} with (false).
+   * Distribute new profile version without exchange of profiles. Same as calling
+   * {@link #distribute(boolean)} with (false).
-  /** 
-   * Distribute with optional exchange of profiles but do not create new 
-   * profile version.
+  /**
+   * Distribute with optional exchange of profiles but do not create new profile version.
+   * 
-    if(processor == null) {
+    if (processor == null) {
-          mgr.getCancelCriterion().checkCancelInProgress(null);
-          try {
-            processor.waitForRepliesUninterruptibly();
-          }
-          catch (ReplyException e) {
-            e.handleAsUnexpected();
-          }
+      mgr.getCancelCriterion().checkCancelInProgress(null);
+      try {
+        processor.waitForRepliesUninterruptibly();
+      } catch (ReplyException e) {
+        e.handleAsUnexpected();
+      }
-//    Scope scope = this.region.scope;
-    
+    // Scope scope = this.region.scope;
+
-  UpdateAttributesMessage getUpdateAttributesMessage(ReplyProcessor21 processor,
-                                                     Set recipients) {
+  UpdateAttributesMessage getUpdateAttributesMessage(ReplyProcessor21 processor, Set recipients) {
-    
+
-     * Registers this processor as a membership listener and
-     * returns a set of the current members.
+     * Registers this processor as a membership listener and returns a set of the current members.
+     * 
-        return getDistributionManager()
-          .addAllMembershipListenerAndGetAllIds(this);
+        return getDistributionManager().addAllMembershipListenerAndGetAllIds(this);
+
+     * 
+
-     * If this processor being used by controller then return
-     * ALL members; otherwise defer to super.
+     * If this processor being used by controller then return ALL members; otherwise defer to super.
+     * 
-    
+
-          ProfilesReplyMessage reply =
-            (ProfilesReplyMessage)msg;
+          ProfilesReplyMessage reply = (ProfilesReplyMessage) msg;
-            for (int i=0; i < reply.profiles.length; i++) {
+            for (int i = 0; i < reply.profiles.length; i++) {
-              //       with one call atomically?
-              UpdateAttributesProcessor.this.advisee.
-                getDistributionAdvisor().putProfile(reply.profiles[i]);
+              // with one call atomically?
+              UpdateAttributesProcessor.this.advisee.getDistributionAdvisor()
+                  .putProfile(reply.profiles[i]);
-          ProfileReplyMessage reply =
-            (ProfileReplyMessage)msg;
+          ProfileReplyMessage reply = (ProfileReplyMessage) msg;
-            UpdateAttributesProcessor.this.advisee.
-              getDistributionAdvisor().putProfile(reply.profile);
+            UpdateAttributesProcessor.this.advisee.getDistributionAdvisor()
+                .putProfile(reply.profile);
-  public static final class UpdateAttributesMessage
-    extends HighPriorityDistributionMessage implements MessageWithReply {
+  public static final class UpdateAttributesMessage extends HighPriorityDistributionMessage
+      implements MessageWithReply {
-    
+
-      }
-      catch (CancelException e) {
+      } catch (CancelException e) {
-      }
-      catch (VirtualMachineError err) {
+      } catch (VirtualMachineError err) {
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-      }
-      catch (Throwable t) {
+      } catch (Throwable t) {
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-      }
-      finally {
+      } finally {
-          }
-          else {
+          } else {
-            ProfilesReplyMessage.send(getSender(), this.processorId, rex, dm,
-                profiles);
+            ProfilesReplyMessage.send(getSender(), this.processorId, rex, dm, profiles);
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-                            ReplyException exception,
-                            DistributionManager dm, Profile profile) {
+        ReplyException exception, DistributionManager dm, Profile profile) {
-       m.setException(exception);
-       if (logger.isDebugEnabled()) {
-         logger.debug("Replying with exception: {}" + m, exception);
-       }
+        m.setException(exception);
+        if (logger.isDebugEnabled()) {
+          logger.debug("Replying with exception: {}" + m, exception);
+        }
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.profile = (Profile)DataSerializer.readObject(in);
+      this.profile = (Profile) DataSerializer.readObject(in);
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-     * ProfileReplyMessages must be processed in-line and not in a pool to
-     * keep partitioned region bucket profile exchange from swamping the
-     * high priority pool and not allowing other profile exchanges through.
-     * This is safe as long as ProfileReplyMessage obtains no extra synchronization
-     * locks.
+     * ProfileReplyMessages must be processed in-line and not in a pool to keep partitioned region
+     * bucket profile exchange from swamping the high priority pool and not allowing other profile
+     * exchanges through. This is safe as long as ProfileReplyMessage obtains no extra
+     * synchronization locks.
+   * 
-                            ReplyException exception,
-                            DistributionManager dm, Profile[] profiles) {
+        ReplyException exception, DistributionManager dm, Profile[] profiles) {
-    
-    
+
+
-     return PROFILES_REPLY_MESSAGE;
+      return PROFILES_REPLY_MESSAGE;
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-          array[i] = (Profile)DataSerializer.readObject(in);
+          array[i] = (Profile) DataSerializer.readObject(in);
-    /* (non-Javadoc)
+    /*
+     * (non-Javadoc)
+     * 
-     * ProfilesReplyMessages must be processed in-line and not in a pool to
-     * keep partitioned region bucket profile exchange from swamping the
-     * high priority pool and not allowing other profile exchanges through.
-     * This is safe as long as ProfilesReplyMessage obtains no extra synchronization
-     * locks.
+     * ProfilesReplyMessages must be processed in-line and not in a pool to keep partitioned region
+     * bucket profile exchange from swamping the high priority pool and not allowing other profile
+     * exchanges through. This is safe as long as ProfilesReplyMessage obtains no extra
+     * synchronization locks.
