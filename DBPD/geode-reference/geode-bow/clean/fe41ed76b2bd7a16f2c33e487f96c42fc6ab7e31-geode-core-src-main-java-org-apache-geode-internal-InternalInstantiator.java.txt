GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import org.apache.geode.i18n.StringId;
+import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.i18n.StringId;
-   * Registers an <code>Instantiator</code> with the data serialization framework.
+   * Registers an {@code Instantiator} with the data serialization framework.
-   * Actually registers an <code>Instantiator</code> with the data serialization framework.
+   * Actually registers an {@code Instantiator} with the data serialization framework.
-      GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+      InternalCache cache = GemFireCacheImpl.getInstance();
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+    InternalCache cache = GemFireCacheImpl.getInstance();
-   *
-   * @param instantiator
-   * Creates a new <code>Instantiator</code> with the given class and id and
+   * Creates a new {@code Instantiator} with the given class and id and
-   * Creates a new <code>Instantiator</code> with the given class and id and
+   * Creates a new {@code Instantiator} with the given class and id and
-   * Lazily creates a new <code>Instantiator</code> with the given class and id.
+   * Lazily creates a new {@code Instantiator} with the given class and id.
-   * Lazily creates a new <code>Instantiator</code> with the given class and id.
+   * Lazily creates a new {@code Instantiator} with the given class and id.
-        GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+        InternalCache cache = GemFireCacheImpl.getInstance();
-   * Unregisters the given class with the given class id with the <code>Instantiator</code>.
+   * Unregisters the given class with the given class id with the {@code Instantiator}.
-   * @throws IllegalArgumentException If <code>c</code> was not previously registered with id
-   *         <code>classId</code>.
-   * @throws NullPointerException If <code>c</code> is <code>null</code>
+   * @throws IllegalArgumentException If {@code c} was not previously registered with id
+   *         {@code classId}.
+   * @throws NullPointerException If {@code c} is {@code null}
-   * @return <code>0</code> if the class has not be registered
+   * @return {@code 0} if the class has not be registered
-          GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+          InternalCache cache = GemFireCacheImpl.getInstance();
-   * Reflectively instantiates an instance of <code>Instantiator</code>.
+   * Reflectively instantiates an instance of {@code Instantiator}.
-   * @param instantiatorClass The implementation of <code>Instantiator</code> to instantiate
-   * @param instantiatedClass The implementation of <code>DataSerialization</code> that will be
-   *        produced by the <code>Instantiator</code>
+   * @param instantiatorClass The implementation of {@code Instantiator} to instantiate
+   * @param instantiatedClass The implementation of {@code DataSerialization} that will be produced
+   *        by the {@code Instantiator}
-          GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+          InternalCache cache = GemFireCacheImpl.getInstance();
-   * A marker object for <Code>Instantiator</code>s that have not been registered. Using this marker
-   * object allows us to asynchronously send <Code>Instantiator</code> registration updates. If the
+   * A marker object for {@code Instantiator}s that have not been registered. Using this marker
+   * object allows us to asynchronously send {@code Instantiator} registration updates. If the
-     * Creates a new <code>Marker</code> whose {@link #getInstantiator} method will wait for the
+     * Creates a new {@code Marker} whose {@link #getInstantiator} method will wait for the
-     * method has to wait for too long, then <code>null</code> is returned.
+     * method has to wait for too long, then {@code null} is returned.
-   * <code>Instantiator</code> being registered.
+   * {@code Instantiator} being registered.
-     * The <code>Instantiator</code> class that was registered
+     * The {@code Instantiator} class that was registered
-     * The id of the <codE>Instantiator</code> that was registered
+     * The id of the {@code Instantiator} that was registered
-     * The eventId of the <codE>Instantiator</code> that was registered
+     * The eventId of the {@code Instantiator} that was registered
-     * The name of the <code>Instantiator</code> class that was registered
+     * The name of the {@code Instantiator} class that was registered
-     * Constructor for <code>DataSerializable</code>
+     * Constructor for {@code DataSerializable}
-     * Creates a new <code>RegistrationMessage</code> that broadcasts that the given
-     * <code>Instantiator</code> was registered.
+     * Creates a new {@code RegistrationMessage} that broadcasts that the given {@code Instantiator}
+     * was registered.
-   * <code>Instantiator</code> being registered.
+   * {@code Instantiator} being registered.
-     * Constructor for <code>RegistrationConetxtMessage</code>
+     * Constructor for {@code RegistrationConetxtMessage}
-     * Creates a new <code>RegistrationContextMessage</code> that broadcasts that the given
-     * <code>Instantiator</code> was registered.
+     * Creates a new {@code RegistrationContextMessage} that broadcasts that the given
+     * {@code Instantiator} was registered.
