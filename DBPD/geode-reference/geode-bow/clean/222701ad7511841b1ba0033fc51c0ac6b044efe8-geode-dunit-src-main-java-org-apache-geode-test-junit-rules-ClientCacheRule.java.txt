GEODE-4110: improve junit ClientCacheRule (#2872)

* refactor some multiUser tests to use the ClientCacheRule
* add more convenience methods in ClientCacheRule
* clean up the ClusterStarterRule.startClient interface
* deprecate the SecurityTestUtils to favor using rules
+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
+import static org.apache.geode.distributed.ConfigurationProperties.SECURITY_CLIENT_AUTH_INIT;
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.RegionService;
+import org.apache.geode.cache.client.ClientRegionShortcut;
+import org.apache.geode.security.templates.UserPasswordAuthInit;
-  private Consumer<ClientCacheFactory> cacheSetup;
+  private List<Consumer<ClientCacheFactory>> cacheSetups;
+  private boolean autoCreate;
+    properties.setProperty(LOCATORS, "");
+    cacheSetups = new ArrayList<>();
+  public ClientCacheRule withCredential(String username, String password) {
+    properties.setProperty(UserPasswordAuthInit.USER_NAME, username);
+    properties.setProperty(UserPasswordAuthInit.PASSWORD, password);
+    properties.setProperty(SECURITY_CLIENT_AUTH_INIT, UserPasswordAuthInit.class.getName());
+    return this;
+  }
+
-    cacheSetup = setup;
+    cacheSetups.add(setup);
+  public ClientCacheRule withPoolSubscription(boolean enabled) {
+    withCacheSetup(cf -> cf.setPoolSubscriptionEnabled(enabled));
+    return this;
+  }
+
+  public ClientCacheRule withServerConnection(int... serverPorts) {
+    withCacheSetup(cf -> {
+      for (int serverPort : serverPorts) {
+        cf.addPoolServer("localhost", serverPort);
+      }
+    });
+    return this;
+  }
+
+  public ClientCacheRule withLocatorConnection(int... serverPorts) {
+    withCacheSetup(cf -> {
+      for (int serverPort : serverPorts) {
+        cf.addPoolLocator("localhost", serverPort);
+      }
+    });
+    return this;
+  }
+
+  public ClientCacheRule withMultiUser(boolean enabled) {
+    withCacheSetup(cf -> cf.setPoolMultiuserAuthentication(enabled));
+    return this;
+  }
+
+  public ClientCacheRule withAutoCreate() {
+    this.autoCreate = true;
+    return this;
+  }
+
+  public ClientCache createCache() throws Exception {
+    cacheFactory = new ClientCacheFactory(properties);
+    cacheSetups.stream().forEach(setup -> setup.accept(cacheFactory));
+    cache = cacheFactory.create();
+    return cache;
+  }
+
+  public Region createProxyRegion(String regionPath) {
+    return cache.createClientRegionFactory(ClientRegionShortcut.PROXY).create(regionPath);
+  }
+
+  public RegionService createAuthenticatedView(String username, String password) {
+    Properties properties = new Properties();
+    properties.setProperty(UserPasswordAuthInit.USER_NAME, username);
+    properties.setProperty(UserPasswordAuthInit.PASSWORD, password);
+    properties.setProperty(SECURITY_CLIENT_AUTH_INIT, UserPasswordAuthInit.class.getName());
+    return cache.createAuthenticatedView(properties);
+  }
+
-    cacheFactory = new ClientCacheFactory(properties);
-    cacheSetup.accept(cacheFactory);
-    cache = cacheFactory.create();
+    if (autoCreate) {
+      createCache();
+    }
