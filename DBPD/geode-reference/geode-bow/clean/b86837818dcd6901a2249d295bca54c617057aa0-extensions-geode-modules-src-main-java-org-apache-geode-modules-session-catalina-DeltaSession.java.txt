GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-import java.util.Iterator;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-  private final List<DeltaSessionAttributeEvent> eventQueue =
-      new ArrayList<DeltaSessionAttributeEvent>();
+  private final List<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();
-  private static Field cachedField = null;
-
-  private final Log LOG = LogFactory.getLog(DeltaSession.class.getName());
+  private static Field cachedField;
-  /**
-   * The string manager for this package.
-   */
-  // protected static StringManager STRING_MANAGER =
-  // StringManager.getManager("org.apache.geode.modules.session.catalina");
-        facade = (DeltaSessionFacade) AccessController.doPrivileged(new PrivilegedAction() {
-          @Override
-          public Object run() {
-            return new DeltaSessionFacade(fsession);
-          }
-        });
+        facade = (DeltaSessionFacade) AccessController.doPrivileged(
+            (PrivilegedAction) () -> new DeltaSessionFacade(fsession));
-      SerializablePrincipal sp = null;
+      SerializablePrincipal sp;
-        StringBuilder builder = new StringBuilder();
-        builder.append(this).append(
-            ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception");
-        ((DeltaSessionManager) getManager()).getLogger().warn(builder.toString(), e);
+        String builder = this
+            + ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception";
+        ((DeltaSessionManager) getManager()).getLogger().warn(builder, e);
-  protected Region<String, HttpSession> getOperatingRegion() {
+  private Region<String, HttpSession> getOperatingRegion() {
-  public boolean isCommitEnabled() {
+  private boolean isCommitEnabled() {
-  @SuppressWarnings("unchecked")
-        StringBuilder builder = new StringBuilder();
-        builder.append(this).append(": Attribute named ").append(name).append(
-            " contains a byte[] that cannot be deserialized due to the following exception");
-        ((DeltaSessionManager) getManager()).getLogger().warn(builder.toString(), e);
+        String builder = this + ": Attribute named " + name
+            + " contains a byte[] that cannot be deserialized due to the following exception";
+        ((DeltaSessionManager) getManager()).getLogger().warn(
+            builder, e);
-          List<DeltaSessionAttributeEvent> events = new ArrayList<DeltaSessionAttributeEvent>();
+          List<DeltaSessionAttributeEvent> events = new ArrayList<>();
-    List<DeltaSessionAttributeEvent> events = null;
+    List<DeltaSessionAttributeEvent> events;
-    ConcurrentHashMap map = (ConcurrentHashMap) DataSerializer.readObject(in);
+    ConcurrentHashMap map = DataSerializer.readObject(in);
-  protected Field getAttributesFieldObject() {
+  private Field getAttributesFieldObject() {
-  protected void logError(Exception e) {
+  private void logError(Exception e) {
-    for (Enumeration<String> e = getAttributeNames(); e.hasMoreElements();) {
-      // Don't use this.getAttribute() because we don't want to deserialize
-      // the value.
-      Object value = super.getAttribute(e.nextElement());
+    @SuppressWarnings("unchecked")
+    Enumeration<String> attributeNames = (Enumeration<String>) getAttributeNames();
+    while (attributeNames.hasMoreElements()) {
+      // Don't use this.getAttribute() because we don't want to deserialize the value.
+      Object value = super.getAttribute(attributeNames.nextElement());
-  protected Map<String, byte[]> getSerializedAttributes() {
+  private Map<String, byte[]> getSerializedAttributes() {
-    for (Iterator i = getAttributes().entrySet().iterator(); i.hasNext();) {
-      Map.Entry<String, Object> entry = (Map.Entry<String, Object>) i.next();
+    for (Object o : getAttributes().entrySet()) {
+      Map.Entry<String, Object> entry = (Map.Entry<String, Object>) o;
-      Map map = (Map) field.get(this);
-      return map;
+      return (Map) field.get(this);
-  protected byte[] serialize(Object obj) {
+  private byte[] serialize(Object obj) {
-      StringBuilder builder = new StringBuilder();
-      builder.append(this).append(": Object ").append(obj)
-          .append(" cannot be serialized due to the following exception");
-      ((DeltaSessionManager) getManager()).getLogger().warn(builder.toString(), e);
+      String builder = this + ": Object " + obj
+          + " cannot be serialized due to the following exception";
+      ((DeltaSessionManager) getManager()).getLogger().warn(
+          builder, e);
-    return new StringBuilder().append("DeltaSession[").append("id=").append(getId())
-        .append("; context=").append(this.contextName).append("; sessionRegionName=")
-        .append(this.sessionRegionName).append("; operatingRegionName=")
-        .append(getOperatingRegion() == null ? "unset" : getOperatingRegion().getFullPath())
-        .append("]").toString();
+    return "DeltaSession[" + "id=" + getId()
+        + "; context=" + this.contextName + "; sessionRegionName="
+        + this.sessionRegionName + "; operatingRegionName="
+        + (getOperatingRegion() == null ? "unset" : getOperatingRegion().getFullPath())
+        + "]";
