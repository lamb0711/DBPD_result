GEODE-6945:geode-managment should create its own set of configurationâ€¦ (#3928)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

* do not use xml domain object for region configuration
* add RegionType.UNSUPPORTED

+import java.util.Objects;
+import java.util.stream.Stream;
+import org.apache.geode.management.configuration.Region;
+import org.apache.geode.management.internal.configuration.converters.RegionConverter;
-public class RegionConfigManager implements ConfigurationManager<RegionConfig> {
+public class RegionConfigManager implements ConfigurationManager<Region> {
-  public RegionConfigManager() {}
+  private final RegionConverter converter = new RegionConverter();
-  public void add(RegionConfig configElement, CacheConfig existingConfig) {
-    existingConfig.getRegions().add(configElement);
+  public void add(Region configElement, CacheConfig existingConfig) {
+    existingConfig.getRegions().add(converter.fromConfigObject(configElement));
-  public void update(RegionConfig config, CacheConfig existing) {
+  public void update(Region config, CacheConfig existing) {
-  public void delete(RegionConfig config, CacheConfig existing) {
+  public void delete(Region config, CacheConfig existing) {
-  public List<RegionConfig> list(RegionConfig filter, CacheConfig existing) {
-    List<RegionConfig> regionConfigs;
-    if (StringUtils.isBlank(filter.getName())) {
-      regionConfigs = existing.getRegions();
-    } else {
-      regionConfigs =
-          existing.getRegions().stream().filter(r -> filter.getName().equals(r.getName())).collect(
-              Collectors.toList());
+  public List<Region> list(Region filter, CacheConfig existing) {
+    Stream<RegionConfig> stream = existing.getRegions().stream();
+    if (StringUtils.isNotBlank(filter.getName())) {
+      stream = stream.filter(r -> filter.getName().equals(r.getName()));
-
-    return regionConfigs;
+    return stream.map(converter::fromXmlObject).filter(Objects::nonNull)
+        .collect(Collectors.toList());
-  public RegionConfig get(String id, CacheConfig existing) {
-    return CacheElement.findElement(existing.getRegions(), id);
+  public Region get(String id, CacheConfig existing) {
+    return converter.fromXmlObject(CacheElement.findElement(existing.getRegions(), id));
-  public void checkCompatibility(RegionConfig incoming, String group, RegionConfig existing) {
+  public void checkCompatibility(Region incoming, String group, Region existing) {
-    if (!incoming.getType().contains("PROXY") && !existing.getType().contains("PROXY")) {
+    if (!incoming.getType().name().contains("PROXY")
+        && !existing.getType().name().contains("PROXY")) {
-    String incomingType = incoming.getType().split("_")[0];
-    String existingType = existing.getType().split("_")[0];
+    String incomingType = incoming.getType().name().split("_")[0];
+    String existingType = existing.getType().name().split("_")[0];
-  private void raiseIncompatibilityError(RegionConfig incoming, String group,
-      RegionConfig existing) {
+  private void raiseIncompatibilityError(Region incoming, String group,
+      Region existing) {
-  private String getDescription(RegionConfig regionConfig) {
+  private String getDescription(Region regionConfig) {
