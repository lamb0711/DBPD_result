Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  //This should be <CachedDeserializable, CachedDeserializable>, except
-  //that we support retrievals using non CachedDeserializable objects.
+  // This should be <CachedDeserializable, CachedDeserializable>, except
+  // that we support retrievals using non CachedDeserializable objects.
-  
+
-    if(reverse) {
+    if (reverse) {
-  
+
-    if(map.containsKey(key)) {
+    if (map.containsKey(key)) {
-  public CloseableIterator<Entry> iterator(Object start,
-      boolean startInclusive, Object end, boolean endInclusive) {
+  public CloseableIterator<Entry> iterator(Object start, boolean startInclusive, Object end,
+      boolean endInclusive) {
-  public CloseableIterator<CachedDeserializable> keyIterator(Object start,
-      boolean startInclusive, Object end, boolean endInclusive) {
+  public CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive,
+      Object end, boolean endInclusive) {
-  public CloseableIterator<CachedDeserializable> keyIterator(Object start,
-      boolean startInclusive) {
+  public CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive) {
-  
+
-  
-  public CloseableIterator<CachedDeserializable> valueIterator(Object start, boolean startInclusive) {
+
+  public CloseableIterator<CachedDeserializable> valueIterator(Object start,
+      boolean startInclusive) {
-  
+
-    //do nothing
+    // do nothing
-    
-    
+
+
-  
+
-    if(value instanceof CachedDeserializable) {
+    if (value instanceof CachedDeserializable) {
-    
+
-  
+
-      return new EntryImpl((CachedDeserializable) next.getKey(), (CachedDeserializable) next.getValue());
+      return new EntryImpl((CachedDeserializable) next.getKey(),
+          (CachedDeserializable) next.getValue());
-      
+
-      //do nothing
-      
+      // do nothing
+
-    
+
-  
+
