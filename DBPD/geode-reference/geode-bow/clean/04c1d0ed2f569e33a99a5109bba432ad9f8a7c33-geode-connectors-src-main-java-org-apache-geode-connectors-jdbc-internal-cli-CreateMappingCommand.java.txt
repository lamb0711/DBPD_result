GEODE-5935: move jdbc xml mapping to be in a region  (#2739)

The jdbc region-mapping xml element is now jdbc:mapping.
It no longer has a "region" attribute since it is nested in a region.
Creating a jdbc-mapping requires that the region already exists.
The jdbc:mapping element is now nested in a region element instead of the cache element.
The old connector-service element has been completely removed.
Some of the jdbc-mapping gfsh commands now require at least one server to be running.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Jianxia Chen <jchen21@apache.org>
Co-authored-by: Ben Ross @BenjaminPerryRoss 

-import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
-    ConnectorService.RegionMapping mapping = new ConnectorService.RegionMapping(regionName,
+    RegionMapping mapping = new RegionMapping(regionName,
-  public void updateClusterConfig(String group, CacheConfig config, Object element) {
-    ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) element;
-    ConnectorService service =
-        config.findCustomCacheElement("connector-service", ConnectorService.class);
-    if (service == null) {
-      service = new ConnectorService();
-      config.getCustomCacheElements().add(service);
+  public void updateClusterConfig(String group, CacheConfig cacheConfig, Object element) {
+    RegionMapping newCacheElement = (RegionMapping) element;
+    RegionMapping existingCacheElement = cacheConfig.findCustomRegionElement(
+        newCacheElement.getRegionName(), newCacheElement.getId(), RegionMapping.class);
+
+    if (existingCacheElement != null) {
+      cacheConfig
+          .getRegions()
+          .stream()
+          .filter(regionConfig -> regionConfig.getName().equals(newCacheElement.getRegionName()))
+          .forEach(
+              regionConfig -> regionConfig.getCustomRegionElements().remove(existingCacheElement));
-    service.getRegionMapping().add(mapping);
+
+    cacheConfig
+        .getRegions()
+        .stream()
+        .filter(regionConfig -> regionConfig.getName().equals(newCacheElement.getRegionName()))
+        .forEach(regionConfig -> regionConfig.getCustomRegionElements().add(newCacheElement));
