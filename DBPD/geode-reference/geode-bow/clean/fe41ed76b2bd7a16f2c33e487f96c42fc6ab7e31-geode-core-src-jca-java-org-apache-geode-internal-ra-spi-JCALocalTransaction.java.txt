GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
-
-/**
- * 
- *
- */
-  private volatile GemFireCacheImpl cache;
+  private volatile InternalCache cache;
-  private static final boolean DEBUG = false;
-
-  JCALocalTransaction(GemFireCacheImpl cache, TXManagerImpl tm) {
+  JCALocalTransaction(InternalCache cache, TXManagerImpl tm) {
-    // System.out.println("Asif:JCALocalTransaction:Param contrcutr for tx ="+
-    // this );
-    // System.out.println("Asif:JCALocalTransaction:Empty constructor for tx ="+
-    // this );
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JCALocalTransaction:begin");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
-    }
-      if (!initDone || this.cache.isClosed()) {
+      if (!this.initDone || this.cache.isClosed()) {
-      // System.out.println("JCALocalTransaction:Asif: cache is ="+cache +
-      // " for tx ="+this);
-      LogWriter logger = cache.getLogger();
+      LogWriter logger = this.cache.getLogger();
-      TransactionManager tm = cache.getJTATransactionManager();
+      TransactionManager tm = this.cache.getJTATransactionManager();
-      // this.onError();
-    // Not to be invoked for local transactions managed by the container
-    // Iterator<ConnectionEventListener> itr = this.listeners.iterator();
-    // ConnectionEvent ce = new ConnectionEvent(this,
-    // ConnectionEvent.LOCAL_TRANSACTION_STARTED);
-    // while (itr.hasNext()) {
-    // itr.next().localTransactionStarted(ce);
-    // }
-
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JCALocalTransaction:commit");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
-    }
-    LogWriter logger = cache.getLogger();
+    LogWriter logger = this.cache.getLogger();
+      // TODO: consider wrapping the cause
-    // Iterator<ConnectionEventListener> itr = this.listeners.iterator();
-    // ConnectionEvent ce = new
-    // ConnectionEvent(this,ConnectionEvent.LOCAL_TRANSACTION_COMMITTED);
-    // while( itr.hasNext()) {
-    // itr.next().localTransactionCommitted(ce);
-    // }
-
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JJCALocalTransaction:rollback");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
-    }
-    LogWriter logger = cache.getLogger();
+    LogWriter logger = this.cache.getLogger();
-        // /ignore;
+        // ignore
-    } catch (Exception e) {
+    } catch (RuntimeException e) {
-    // Iterator<ConnectionEventListener> itr = this.listeners.iterator();
-    // ConnectionEvent ce = new ConnectionEvent(this,
-    // ConnectionEvent.LOCAL_TRANSACTION_ROLLEDBACK);
-    // while (itr.hasNext()) {
-    // itr.next().localTransactionRolledback(ce);
-    // }
-
-  private void init() throws SystemException {
-    this.cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
+  private void init() {
+    this.cache = (InternalCache) CacheFactory.getAnyInstance();
-    gfTxMgr = cache.getTxManager();
+    this.gfTxMgr = this.cache.getTxManager();
