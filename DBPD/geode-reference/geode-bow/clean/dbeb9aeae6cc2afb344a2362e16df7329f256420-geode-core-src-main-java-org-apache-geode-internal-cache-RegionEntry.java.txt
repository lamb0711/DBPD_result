Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Internal interface for a region entry.
- * Note that a region is implemented with a ConcurrentHashMap which
- * has its own entry class. The "value" field of each of these entries
- * will implement this interface.
+ * Internal interface for a region entry. Note that a region is implemented with a ConcurrentHashMap
+ * which has its own entry class. The "value" field of each of these entries will implement this
+ * interface.
-
-Implementations:
-  (unshared)
-  ThinEntry
-    protected volatile long lastModified;
-  StatsEntry extends ThinEntry
-    private volatile long lastAccessed;
-    private volatile int hitCount;
-    private volatile int missCount;
-  DiskThinEntry extends ThinEntry
-    private volatile long id;
-  DiskStatsEntry extends StatsEntry
-    private volatile long id;
-  ThinLRUEntry extends ThinEntry
-    int bitField1;
-    LRUClockNode nextLRU;
-    int size;
-  StatsLRUEntry extends StatsEntry
-    int bitField1;
-    LRUClockNode nextLRU;
-    int size;
-  DiskThinLRUEntry extends ThinLRUEntry
-    private volatile long id;
-  DiskStatsLRUEntry extends StatsLRUEntry
-    private volatile long id;
+ * 
+ *        Implementations: (unshared) ThinEntry protected volatile long lastModified; StatsEntry
+ *        extends ThinEntry private volatile long lastAccessed; private volatile int hitCount;
+ *        private volatile int missCount; DiskThinEntry extends ThinEntry private volatile long id;
+ *        DiskStatsEntry extends StatsEntry private volatile long id; ThinLRUEntry extends ThinEntry
+ *        int bitField1; LRUClockNode nextLRU; int size; StatsLRUEntry extends StatsEntry int
+ *        bitField1; LRUClockNode nextLRU; int size; DiskThinLRUEntry extends ThinLRUEntry private
+ *        volatile long id; DiskStatsLRUEntry extends StatsLRUEntry private volatile long id;
-    
+
-   * returns the time of last modification.  Prior to v7.0 this only reflected
-   * creation time of an entry or the time it was last modified with an Update.
-   * In 7.0 and later releases it also reflects invalidate and destroy.
+   * returns the time of last modification. Prior to v7.0 this only reflected creation time of an
+   * entry or the time it was last modified with an Update. In 7.0 and later releases it also
+   * reflects invalidate and destroy.
-   * Returns true if getLastAccessed, getHitCount, and getMissCount can be called
-   * without throwing InternalStatisticsDisabledException.
-   * Otherwise returns false.
+   * Returns true if getLastAccessed, getHitCount, and getMissCount can be called without throwing
+   * InternalStatisticsDisabledException. Otherwise returns false.
+   * 
-    
+
-    
+
-    
+
-  public void updateStatsForPut(long lastModifiedTime);
-  
+  public void updateStatsForPut(long lastModifiedTime, long lastAccessedTime);
+
-  public VersionTag generateVersionTag(VersionSource member, boolean withDelta, LocalRegion region, EntryEventImpl event);
+  public VersionTag generateVersionTag(VersionSource member, boolean withDelta, LocalRegion region,
+      EntryEventImpl event);
-   * Dispatch listener events for the given entry event.  If the event
-   * is from another member and there are already pending events, this
-   * will merely queue the event for later dispatch by one of those other
-   * events.
+   * Dispatch listener events for the given entry event. If the event is from another member and
+   * there are already pending events, this will merely queue the event for later dispatch by one of
+   * those other events.
-  public boolean dispatchListenerEvents(EntryEventImpl event)
-    throws InterruptedException;
-  
+  public boolean dispatchListenerEvents(EntryEventImpl event) throws InterruptedException;
+
-    
+
-   * Resets any entry state as needed for a transaction that did
-   * a destroy to this entry.
+   * Resets any entry state as needed for a transaction that did a destroy to this entry.
+   * 
-  
+
-    
+
-   * this is done instead of removePhase2 if the entry needs to be kept for
-   * concurrency control
+   * this is done instead of removePhase2 if the entry needs to be kept for concurrency control
+   * 
-   * @throws RegionClearedException 
+   * @throws RegionClearedException
-    
+
-   * Mark this entry as being in the process of removal from the map that
-   * contains it by setting its value to Token.REMOVED_PHASE1.  An entry
-   * in this state may be resurrected by changing the value under
-   * synchronization prior to the entry executing removePhase2.
+   * Mark this entry as being in the process of removal from the map that contains it by setting its
+   * value to Token.REMOVED_PHASE1. An entry in this state may be resurrected by changing the value
+   * under synchronization prior to the entry executing removePhase2.
-   *  
+   * 
+
-   * Mark this entry as having been removed from the map that contained it
-   * by setting its value to Token.REMOVED_PHASE2
+   * Mark this entry as having been removed from the map that contained it by setting its value to
+   * Token.REMOVED_PHASE2
+
-   * Returns true if this entry does not exist.  This is true if removal
-   * has started (value == Token.REMOVED_PHASE1) or has completed
-   * (value == Token.REMOVED_PHASE2).
+   * Returns true if this entry does not exist. This is true if removal has started (value ==
+   * Token.REMOVED_PHASE1) or has completed (value == Token.REMOVED_PHASE2).
-  
+
-   * Returns true if this entry does not exist and will not be resurrected
-   * (value == Token.REMOVED_PHASE2)
+   * Returns true if this entry does not exist and will not be resurrected (value ==
+   * Token.REMOVED_PHASE2)
-  
+
-   * Returns true if this entry is a tombstone, meaning that it has been
-   * removed but is being retained for concurrent modification detection.
-   * Tombstones may be resurrected just like an entry that is in REMOVED_PHASE1
-   * state.
+   * Returns true if this entry is a tombstone, meaning that it has been removed but is being
+   * retained for concurrent modification detection. Tombstones may be resurrected just like an
+   * entry that is in REMOVED_PHASE1 state.
-    /**
-   * Fill in value, and isSerialized fields
-   * in this entry object (used for getInitialImage and sync recovered)
-   * Also sets the lastModified time in cacheTime.
-   * Only called for DistributedRegions.<p>
+  /**
+   * Fill in value, and isSerialized fields in this entry object (used for getInitialImage and sync
+   * recovered) Also sets the lastModified time in cacheTime. Only called for DistributedRegions.
+   * <p>
-   * This method returns tombstones so that they can be transferred with
-   * the initial image.
+   * This method returns tombstones so that they can be transferred with the initial image.
+   * 
+
-  /** Gets the value for this entry. For DiskRegions, faults in value
-     *  and returns it
-     */
+
+  /**
+   * Gets the value for this entry. For DiskRegions, faults in value and returns it
+   */
+
-  public void setValue(RegionEntryContext context, @Unretained Object value) throws RegionClearedException;
-  
+  public void setValue(RegionEntryContext context, @Unretained Object value)
+      throws RegionClearedException;
+
-   * The event can be used to cache the serialized form of the value we are writing.
-   * See bug 43781.
+   * The event can be used to cache the serialized form of the value we are writing. See bug 43781.
-  public void setValue(RegionEntryContext context, Object value, EntryEventImpl event) throws RegionClearedException;
+  public void setValue(RegionEntryContext context, Object value, EntryEventImpl event)
+      throws RegionClearedException;
+
-   * Obtain, retain and return the value of this entry.
-   * WARNING: if a StoredObject is returned and it has a refCount then the caller MUST
-   * make sure that {@link StoredObject#release()} before the returned object is garbage collected.
+   * Obtain, retain and return the value of this entry. WARNING: if a StoredObject is returned and
+   * it has a refCount then the caller MUST make sure that {@link StoredObject#release()} before the
+   * returned object is garbage collected.
-   * This is only retained in off-heap subclasses.  However, it's marked as
-   * Retained here so that callers are aware that the value may be retained.
+   * This is only retained in off-heap subclasses. However, it's marked as Retained here so that
+   * callers are aware that the value may be retained.
-  @Retained 
+  @Retained
+
-  
+
+
-   * Returns a tokenized form of the value.
-   * If the value can not be represented as a token
-   * then Token.NOT_A_TOKEN is returned.
+   * Returns a tokenized form of the value. If the value can not be represented as a token then
+   * Token.NOT_A_TOKEN is returned.
-  
+
-   * Set the value of this entry and perform checks to see if a GC task
-   * needs to be scheduled.
+   * Set the value of this entry and perform checks to see if a GC task needs to be scheduled.
+   * 
-  public void setValueWithTombstoneCheck(@Unretained Object value, EntryEvent event) throws RegionClearedException;
-  
+  public void setValueWithTombstoneCheck(@Unretained Object value, EntryEvent event)
+      throws RegionClearedException;
+
-   * Returns the value as stored by the RegionEntry implementation.  For instance, if compressed this
+   * Returns the value as stored by the RegionEntry implementation. For instance, if compressed this
-   *  
+   * 
-  
+
-   * @return the value or EntryEvent.NOT_AVAILABLE token if it's not in
-   * the VM or null if the entry doesn't exist.
+   * 
+   * @return the value or EntryEvent.NOT_AVAILABLE token if it's not in the VM or null if the entry
+   *         doesn't exist.
+
-   * Returns the value of an entry as it resides on disk.  For
-   * testing purposes only.
+   * Returns the value of an entry as it resides on disk. For testing purposes only.
-  public Object getValueOnDisk(LocalRegion r)
-    throws EntryNotFoundException;
-  
+  public Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException;
+
-   * Returns the value of an entry as it resides on buffer or disk.  For asynch mode
-   * a value is not immediately written to the disk & so checking in asynch buffers
-   * is needed .For testing purposes only.
+   * Returns the value of an entry as it resides on buffer or disk. For asynch mode a value is not
+   * immediately written to the disk & so checking in asynch buffers is needed .For testing purposes
+   * only.
-  
-  public Object getValueOnDiskOrBuffer(LocalRegion r)
-  throws EntryNotFoundException;
-  
+  public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException;
+
+
-   * Used to modify an existing RegionEntry when processing the
-   * values obtained during a getInitialImage.
+   * Used to modify an existing RegionEntry when processing the values obtained during a
+   * getInitialImage.
-  public boolean initialImagePut(LocalRegion region,
-                                 long lastModified,
-                                 Object newValue,
-                                 boolean wasRecovered,
-                                 boolean acceptedVersionTag) throws RegionClearedException;
+  public boolean initialImagePut(LocalRegion region, long lastModified, Object newValue,
+      boolean wasRecovered, boolean acceptedVersionTag) throws RegionClearedException;
+
-   * Used to initialize a created RegionEntry when processing the
-   * values obtained during a getInitialImage.
-      // put if LOCAL_INVALID and nonexistant
-      // put if INVALID and nonexistant, recovered, or LOCAL_INVALID
-      // put if valid and nonexistant, recovered, or LOCAL_INVALID
-      //
-      // REGION_INVALIDATED:  (special case)
-      // If the region itself has been invalidated since getInitialImage
-      // started, and newValue is LOCAL_INVALID or valid,
-      // then force creation of INVALID key if currently nonexistant
-      // or invalidate if current recovered.
-      //
-      // must write-synchronize to protect agains puts from other
-      // threads running this method
+   * Used to initialize a created RegionEntry when processing the values obtained during a
+   * getInitialImage. // put if LOCAL_INVALID and nonexistant // put if INVALID and nonexistant,
+   * recovered, or LOCAL_INVALID // put if valid and nonexistant, recovered, or LOCAL_INVALID // //
+   * REGION_INVALIDATED: (special case) // If the region itself has been invalidated since
+   * getInitialImage // started, and newValue is LOCAL_INVALID or valid, // then force creation of
+   * INVALID key if currently nonexistant // or invalidate if current recovered. // // must
+   * write-synchronize to protect agains puts from other // threads running this method
-  public boolean initialImageInit(LocalRegion region,
-                                  long lastModified,
-                                  Object newValue,
-                                  boolean create,
-                                  boolean wasRecovered,
-                                  boolean acceptedVersionTag) throws RegionClearedException;
+  public boolean initialImageInit(LocalRegion region, long lastModified, Object newValue,
+      boolean create, boolean wasRecovered, boolean acceptedVersionTag)
+      throws RegionClearedException;
+
-   * @param expectedOldValue only succeed with destroy if current value
-   *        is equal to expectedOldValue
-   * @param forceDestroy true if caller just added this entry because we
-   *   are inTokenMode and we need to "create" a destroyed entry to
-   *   mark the destroy
+   * @param expectedOldValue only succeed with destroy if current value is equal to expectedOldValue
+   * @param forceDestroy true if caller just added this entry because we are inTokenMode and we need
+   *        to "create" a destroyed entry to mark the destroy
-  public boolean destroy(LocalRegion region,
-                         EntryEventImpl event,
-                         boolean inTokenMode,
-                         boolean cacheWrite,
-                         @Unretained Object expectedOldValue,
-                         boolean forceDestroy,
-                         boolean removeRecoveredEntry)
-    throws CacheWriterException, EntryNotFoundException, TimeoutException, RegionClearedException;
+  public boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode,
+      boolean cacheWrite, @Unretained Object expectedOldValue, boolean forceDestroy,
+      boolean removeRecoveredEntry)
+      throws CacheWriterException, EntryNotFoundException, TimeoutException, RegionClearedException;
+
-   * @param v true if entry's value should be marked as having been
-   * the result of a netsearch.
+   * @param v true if entry's value should be marked as having been the result of a netsearch.
-   * Get the serialized bytes from disk.  This method only looks for the value
-   * on the disk, ignoring heap data.
-   * @param localRegion the persistent region 
+   * Get the serialized bytes from disk. This method only looks for the value on the disk, ignoring
+   * heap data.
+   * 
+   * @param localRegion the persistent region
-   * Gets the value for this entry. For DiskRegions, unlike
-   * {@link #getValue(RegionEntryContext)} this will not fault in the value rather
-   * return a temporary copy.
+   * Gets the value for this entry. For DiskRegions, unlike {@link #getValue(RegionEntryContext)}
+   * this will not fault in the value rather return a temporary copy.
-   * Gets the value for this entry. For DiskRegions, unlike
-   * {@link #getValue(RegionEntryContext)} this will not fault in the value rather
-   * return a temporary copy.
-   * The value returned will be kept off heap (and compressed) if possible.
+   * Gets the value for this entry. For DiskRegions, unlike {@link #getValue(RegionEntryContext)}
+   * this will not fault in the value rather return a temporary copy. The value returned will be
+   * kept off heap (and compressed) if possible.
-   * RegionEntry is underUpdate as soon as RegionEntry lock is help by an
-   * update thread to put a new value for an existing key. This is used during
-   * query on the region to verify index entry with current region entry.
+   * RegionEntry is underUpdate as soon as RegionEntry lock is help by an update thread to put a new
+   * value for an existing key. This is used during query on the region to verify index entry with
+   * current region entry.
-   * Sets RegionEntry updateInProgress flag when put is happening for an
-   * existing Region.Entry. Called ONLY in {@link AbstractRegionMap}.
+   * Sets RegionEntry updateInProgress flag when put is happening for an existing Region.Entry.
+   * Called ONLY in {@link AbstractRegionMap}.
-   * Event containing this RegionEntry is being passed through
-   * dispatchListenerEvent for CacheListeners under RegionEntry lock. This is
-   * used during deserialization for a VMCacheSerializable value contained by
-   * this RegionEntry.
+   * Event containing this RegionEntry is being passed through dispatchListenerEvent for
+   * CacheListeners under RegionEntry lock. This is used during deserialization for a
+   * VMCacheSerializable value contained by this RegionEntry.
-   * Sets RegionEntry isCacheListenerInvoked flag when put is happening for a
-   * Region.Entry. Called ONLY in {@link LocalRegion#dispatchListenerEvent}.
+   * Sets RegionEntry isCacheListenerInvoked flag when put is happening for a Region.Entry. Called
+   * ONLY in {@link LocalRegion#dispatchListenerEvent}.
-  
+
-  
+
-   * Returns true if the entry value is equal to {@link Token#INVALID} or {@link Token#LOCAL_INVALID}.
+   * Returns true if the entry value is equal to {@link Token#INVALID} or
+   * {@link Token#LOCAL_INVALID}.
-  
+
-  
+
-   * Returns true if the entry value is equal to {@link Token#DESTROYED} or {@link Token#REMOVED_PHASE1} or {@link Token#REMOVED_PHASE2} or {@link Token#TOMBSTONE}.
+   * Returns true if the entry value is equal to {@link Token#DESTROYED} or
+   * {@link Token#REMOVED_PHASE1} or {@link Token#REMOVED_PHASE2} or {@link Token#TOMBSTONE}.
-  
+
-   * Returns true if the entry value is equal to {@link Token#DESTROYED} or {@link Token#REMOVED_PHASE1} or {@link Token#REMOVED_PHASE2}.
+   * Returns true if the entry value is equal to {@link Token#DESTROYED} or
+   * {@link Token#REMOVED_PHASE1} or {@link Token#REMOVED_PHASE2}.
-  
+
-  
+
+
-  
+
-   * Increments the number of transactions that are currently referencing
-   * this node.
+   * Increments the number of transactions that are currently referencing this node.
+
-   * Decrements the number of transactions that are currently referencing
-   * this node.
+   * Decrements the number of transactions that are currently referencing this node.
+   * 
-  /** 
-   * Clear the number of transactions that are currently referencing this node
-   * and returns to LRU list
+  /**
+   * Clear the number of transactions that are currently referencing this node and returns to LRU
+   * list
-  public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event, boolean isEntryUpdate);
+  public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event,
+      boolean isEntryUpdate);
