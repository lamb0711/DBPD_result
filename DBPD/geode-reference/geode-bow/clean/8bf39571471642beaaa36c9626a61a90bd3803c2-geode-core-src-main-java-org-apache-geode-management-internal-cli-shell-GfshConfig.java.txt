Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public  static final String INIT_FILE_PROPERTY            = "gfsh.init-file";
-  private static final String LOG_DIR_PROPERTY              = "gfsh.log-dir";
-  private static final String LOG_LEVEL_PROPERTY            = "gfsh.log-level";
-  private static final String LOG_FILE_SIZE_LIMIT_PROPERTY  = "gfsh.log-file-size-limit";
+  public static final String INIT_FILE_PROPERTY = "gfsh.init-file";
+  private static final String LOG_DIR_PROPERTY = "gfsh.log-dir";
+  private static final String LOG_LEVEL_PROPERTY = "gfsh.log-level";
+  private static final String LOG_FILE_SIZE_LIMIT_PROPERTY = "gfsh.log-file-size-limit";
-  private static final File  HISTORY_FILE   = new File(getHomeGemFireDirectory(), ".gfsh.history");
+  private static final File HISTORY_FILE = new File(getHomeGemFireDirectory(), ".gfsh.history");
-  public  static final String DEFAULT_INIT_FILE_NAME 	= ".gfsh2rc";	
-  private static final Level DEFAULT_LOGLEVEL           = Level.OFF;
-  private static final int   DEFAULT_LOGFILE_SIZE_LIMIT = 1024*1024*10;
-  private static final int   DEFAULT_LOGFILE_DISK_USAGE = 1024*1024*10;
+  public static final String DEFAULT_INIT_FILE_NAME = ".gfsh2rc";
+  private static final Level DEFAULT_LOGLEVEL = Level.OFF;
+  private static final int DEFAULT_LOGFILE_SIZE_LIMIT = 1024 * 1024 * 10;
+  private static final int DEFAULT_LOGFILE_DISK_USAGE = 1024 * 1024 * 10;
-  private int    historySize;
+  private int historySize;
-  private Level  logLevel;
-  private int    logFileSizeLimit;
-  private int    logFileDiskLimit;
+  private Level logLevel;
+  private int logFileSizeLimit;
+  private int logFileDiskLimit;
-    this(HISTORY_FILE.getAbsolutePath(), DEFAULT_PROMPT, MAX_HISTORY_SIZE, null, null, null, null, null);
+    this(HISTORY_FILE.getAbsolutePath(), DEFAULT_PROMPT, MAX_HISTORY_SIZE, null, null, null, null,
+        null);
-  public boolean deleteHistoryFile(){
-    if(historyFileName==null)
+  public boolean deleteHistoryFile() {
+    if (historyFileName == null)
-    if(!file.exists())
+    if (!file.exists())
-  public GfshConfig(String historyFileName, String defaultPrompt,
-      int historySize, String logDir, Level logLevel, Integer logLimit,
-      Integer logCount, String initFileName) {
+  public GfshConfig(String historyFileName, String defaultPrompt, int historySize, String logDir,
+      Level logLevel, Integer logLimit, Integer logCount, String initFileName) {
-    this.defaultPrompt   = defaultPrompt;
-    this.historySize     = historySize;
+    this.defaultPrompt = defaultPrompt;
+    this.historySize = historySize;
-      this.logLevel = getLogLevel(System.getProperty(LOG_LEVEL_PROPERTY, DEFAULT_LOGLEVEL.getName()));
+      this.logLevel =
+          getLogLevel(System.getProperty(LOG_LEVEL_PROPERTY, DEFAULT_LOGLEVEL.getName()));
-      this.logFileSizeLimit = getParsedOrDefault(System.getProperty(LOG_FILE_SIZE_LIMIT_PROPERTY), LOG_FILE_SIZE_LIMIT_PROPERTY, DEFAULT_LOGFILE_SIZE_LIMIT);
+      this.logFileSizeLimit = getParsedOrDefault(System.getProperty(LOG_FILE_SIZE_LIMIT_PROPERTY),
+          LOG_FILE_SIZE_LIMIT_PROPERTY, DEFAULT_LOGFILE_SIZE_LIMIT);
-      this.logFileDiskLimit = getParsedOrDefault(System.getProperty(LOG_DISK_SPACE_LIMIT_PROPERTY), LOG_DISK_SPACE_LIMIT_PROPERTY, DEFAULT_LOGFILE_DISK_USAGE);
+      this.logFileDiskLimit = getParsedOrDefault(System.getProperty(LOG_DISK_SPACE_LIMIT_PROPERTY),
+          LOG_DISK_SPACE_LIMIT_PROPERTY, DEFAULT_LOGFILE_DISK_USAGE);
-      logCount = getLogFileSizeLimit()/getLogFileDiskLimit();
+      logCount = getLogFileSizeLimit() / getLogFileDiskLimit();
-    builder.append(
-        "init-file=" + (getInitFileName() == null ? "" : getInitFileName()))
+    builder.append("init-file=" + (getInitFileName() == null ? "" : getInitFileName()))
-    builder.append("log-file="+getLogFilePath()).append(Gfsh.LINE_SEPARATOR);
-    builder.append("log-level="+getLogLevel().getName()).append(Gfsh.LINE_SEPARATOR);
-    builder.append("log-file-size-limit="+getLogFileSizeLimit()).append(Gfsh.LINE_SEPARATOR);
-    builder.append("log-disk-space-limit="+getLogFileDiskLimit()).append(Gfsh.LINE_SEPARATOR);
-    builder.append("log-count="+getLogFileCount()).append(Gfsh.LINE_SEPARATOR);
+    builder.append("log-file=" + getLogFilePath()).append(Gfsh.LINE_SEPARATOR);
+    builder.append("log-level=" + getLogLevel().getName()).append(Gfsh.LINE_SEPARATOR);
+    builder.append("log-file-size-limit=" + getLogFileSizeLimit()).append(Gfsh.LINE_SEPARATOR);
+    builder.append("log-disk-space-limit=" + getLogFileDiskLimit()).append(Gfsh.LINE_SEPARATOR);
+    builder.append("log-count=" + getLogFileCount()).append(Gfsh.LINE_SEPARATOR);
-      String logLevelAsString = StringUtils.isBlank(logLevelString) ? "" : logLevelString.trim(); //trim spaces if any
+      String logLevelAsString = StringUtils.isBlank(logLevelString) ? "" : logLevelString.trim(); // trim
+                                                                                                  // spaces
+                                                                                                  // if
+                                                                                                  // any
-  private static int getParsedOrDefault(final String numberString, final String parseValueFor, final int defaultValue) {
+  private static int getParsedOrDefault(final String numberString, final String parseValueFor,
+      final int defaultValue) {
-      System.err.println("Invalid value \"" + numberString + "\" specified for: \"" + parseValueFor + "\". Using default value: \""+defaultValue+"\".");
+      System.err.println("Invalid value \"" + numberString + "\" specified for: \"" + parseValueFor
+          + "\". Using default value: \"" + defaultValue + "\".");
-   * Search for the init file using the system property, then the current
-   * directory, then the home directory. It need not exist at all.
+   * Search for the init file using the system property, then the current directory, then the home
+   * directory. It need not exist at all.
-    String homeDirectoryInitFileName = System.getProperty("user.home")
-        + File.separatorChar + DEFAULT_INIT_FILE_NAME;
-    String currentDirectoryInitFileName = System.getProperty("user.dir")
-        + File.separatorChar + DEFAULT_INIT_FILE_NAME;
+    String homeDirectoryInitFileName =
+        System.getProperty("user.home") + File.separatorChar + DEFAULT_INIT_FILE_NAME;
+    String currentDirectoryInitFileName =
+        System.getProperty("user.dir") + File.separatorChar + DEFAULT_INIT_FILE_NAME;
-    String[] initFileNames = { systemPropertyInitFileName,
-        currentDirectoryInitFileName, homeDirectoryInitFileName };
+    String[] initFileNames =
+        {systemPropertyInitFileName, currentDirectoryInitFileName, homeDirectoryInitFileName};
