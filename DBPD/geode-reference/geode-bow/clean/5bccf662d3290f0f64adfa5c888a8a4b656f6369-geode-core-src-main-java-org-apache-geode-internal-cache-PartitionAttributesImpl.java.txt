GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          LocalizedStrings.PartitionAttributesImpl_CLONENOTSUPPORTEDEXCEPTION_THROWN_IN_CLASS_THAT_IMPLEMENTS_CLONEABLE
-              .toLocalizedString());
+          "CloneNotSupportedException thrown in class that implements cloneable");
-          LocalizedStrings.PartitionAttributesImpl_TOTALNUMBICKETS_0_IS_AN_ILLEGAL_VALUE_PLEASE_CHOOSE_A_VALUE_GREATER_THAN_0
-              .toLocalizedString(this.totalNumBuckets));
+          String.format(
+              "TotalNumBuckets %s is an illegal value, please choose a value greater than 0",
+              this.totalNumBuckets));
-          LocalizedStrings.PartitionAttributesImpl_REDUNDANTCOPIES_0_IS_AN_ILLEGAL_VALUE_PLEASE_CHOOSE_A_VALUE_BETWEEN_0_AND_3
-              .toLocalizedString(this.redundancy));
+          String.format(
+              "RedundantCopies %s is an illegal value, please choose a value between 0 and 3",
+              this.redundancy));
-            LocalizedStrings.PartitionAttributesImpl_UNKNOWN_LOCAL_PROPERTY_0
-                .toLocalizedString(propName));
+            String.format("Unknown local property: '%s'",
+                propName));
-            LocalizedStrings.PartitionAttributesImpl_UNKNOWN_GLOBAL_PROPERTY_0
-                .toLocalizedString(propName));
+            String.format("Unknown global property: '%s'",
+                propName));
-              LocalizedStrings.PartitionAttributesImpl_FIXED_PARTITION_NAME_CANNOT_BE_NULL
+              "Fixed partition name cannot be null"
-            LocalizedStrings.PartitionAttributesImpl_PARTITION_NAME_0_CAN_BE_ADDED_ONLY_ONCE_IN_FIXED_PARTITION_ATTRIBUTES
-                .toString(duplicateFPAattrsList.toString()));
+            String.format("Partition name %s can be added only once in FixedPartitionAttributes",
+                duplicateFPAattrsList.toString()));
-            LocalizedStrings.PartitionAttributesImpl_IF_COLOCATED_WITH_IS_SPECFIED_THEN_FIXED_PARTITION_ATTRIBUTES_CAN_NOT_BE_SPECIFIED
-                .toLocalizedString(this.fixedPAttrs));
+            String.format(
+                "FixedPartitionAttributes %s can not be specified in PartitionAttributesFactory if colocated-with is specified. ",
+                this.fixedPAttrs));
-            LocalizedStrings.PartitionAttributesImpl_FIXED_PARTITION_ATTRBUTES_0_CANNOT_BE_DEFINED_FOR_ACCESSOR
-                .toString(this.fixedPAttrs));
+            String.format("FixedPartitionAttributes %s can not be defined for accessor",
+                this.fixedPAttrs));
-            LocalizedStrings.PartitionAttributesImpl_REGION_SPECIFIED_IN_COLOCATEDWITH_IS_NOT_PRESENT_IT_SHOULD_BE_CREATED_BEFORE_SETTING_COLOCATED_WITH_THIS_REGION
-                .toLocalizedString());
+            "Region specified in 'colocated-with' is not present. It should be created before setting 'colocated-with' to this region.");
-            LocalizedStrings.PartitionAttributesImpl_SETTING_THE_ATTRIBUTE_COLOCATEDWITH_IS_SUPPORTED_ONLY_FOR_PARTITIONEDREGIONS
-                .toLocalizedString());
+            "Setting the attribute 'colocated-with' is supported only for PartitionedRegions");
-            LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_TOTALNUMBUCKETS_SHOULD_BE_SAME_AS_TOTALNUMBUCKETS_OF_COLOCATED_PARTITIONEDREGION
-                .toLocalizedString());
+            "Current PartitionedRegion's TotalNumBuckets should be same as TotalNumBuckets of colocated PartitionedRegion");
-            LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_REDUNDANCY_SHOULD_BE_SAME_AS_THE_REDUNDANCY_OF_COLOCATED_PARTITIONEDREGION
-                .toLocalizedString());
+            "Current PartitionedRegion's redundancy should be same as the redundancy of colocated PartitionedRegion");
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.PartitionAttributesImpl_REDUCED_LOCAL_MAX_MEMORY_FOR_PARTITION_ATTRIBUTES_WHEN_SETTING_FROM_AVAILABLE_OFF_HEAP_MEMORY_SIZE));
+      logger.warn(
+          "Reduced local max memory for partition attribute when setting from available off-heap memory size");
