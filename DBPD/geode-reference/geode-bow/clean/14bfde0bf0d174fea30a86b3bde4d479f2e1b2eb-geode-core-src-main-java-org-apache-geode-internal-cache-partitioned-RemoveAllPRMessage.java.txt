Merge branch 'release/1.8.0'

-        this.versions = new VersionedObjectList(this.removeAllPRDataSize, true,
+        versions = new VersionedObjectList(this.removeAllPRDataSize, true,
-
-      // Fix the updateMsg misorder issue
-      // Lock the keys when doing postRemoveAll
-      Object keys[] = new Object[removeAllPRDataSize];
-      for (int i = 0; i < removeAllPRDataSize; ++i) {
-        keys[i] = removeAllPRData[i].getKey();
-      }
+      Object[] keys = getKeysToBeLocked();
+        boolean locked = false;
-          bucketRegion.waitUntilLocked(keys);
+          locked = bucketRegion.waitUntilLocked(keys);
-            try {
-              // Only RemoveAllPRMessage knows if the thread id is fake. Event has no idea.
-              // So we have to manually set useFakeEventId for this op
-              op.setUseFakeEventId(true);
-              r.checkReadiness();
-              bucketRegion.getDataView().postRemoveAll(op, this.versions, bucketRegion);
-            } finally {
-              if (lockedForPrimary) {
-                bucketRegion.doUnlockForPrimary();
-              }
-            }
+            doPostRemoveAll(r, op, bucketRegion, lockedForPrimary);
-          bucketRegion.removeAndNotifyKeys(keys);
+          if (locked) {
+            bucketRegion.removeAndNotifyKeys(keys);
+          }
+  Object[] getKeysToBeLocked() {
+    // Fix the updateMsg misorder issue
+    // Lock the keys when doing postRemoveAll
+    Object keys[] = new Object[removeAllPRDataSize];
+    for (int i = 0; i < removeAllPRDataSize; ++i) {
+      keys[i] = removeAllPRData[i].getKey();
+    }
+    return keys;
+  }
+
+  void doPostRemoveAll(PartitionedRegion r, DistributedRemoveAllOperation op,
+      BucketRegion bucketRegion, boolean lockedForPrimary) {
+    try {
+      // Only RemoveAllPRMessage knows if the thread id is fake. Event has no idea.
+      // So we have to manually set useFakeEventId for this op
+      op.setUseFakeEventId(true);
+      r.checkReadiness();
+      bucketRegion.getDataView().postRemoveAll(op, this.versions, bucketRegion);
+      r.checkReadiness();
+    } finally {
+      if (lockedForPrimary) {
+        bucketRegion.doUnlockForPrimary();
+      }
+    }
+  }
+
