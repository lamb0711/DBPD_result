GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing

+import java.io.Externalizable;
-import java.net.InetAddress;
+import java.io.ObjectInput;
+import java.io.ObjectOutput;
-import java.net.UnknownHostException;
-import java.util.Collections;
+import java.util.stream.Collectors;
-import org.apache.geode.DataSerializable;
-import org.apache.geode.distributed.internal.tcpserver.LocatorAddress;
+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;
-  private final List<LocatorAddress> locatorAddresses = new ArrayList<>();
+  private final List<HostAndPort> locatorAddresses = new ArrayList<>();
-  private InetSocketAddress getInetSocketAddress(String host, int port) {
-    if (port == 0) {
-      throw new IllegalArgumentException("port must be greater than 0 but was " + port);
-      // the rest of the port validation is done by InetSocketAddress
-    }
-    InetSocketAddress sockAddr;
-    try {
-      InetAddress hostAddr = InetAddress.getByName(host);
-      sockAddr = new InetSocketAddress(hostAddr, port);
-    } catch (UnknownHostException ignore) {
-      // IllegalArgumentException ex = new IllegalArgumentException("Unknown host " + host);
-      // ex.initCause(cause);
-      // throw ex;
-      // Fix for #45348
-      logger.warn(
-          "Hostname is unknown: {}. Creating pool with unknown host in case the host becomes known later.",
-          host);
-      sockAddr = new InetSocketAddress(host, port);
-    }
-    return sockAddr;
-  }
-
-    InetSocketAddress isa = getInetSocketAddress(host, port);
-    attributes.locators.add(isa);
-    locatorAddresses.add(new LocatorAddress(isa, host));
+    validatePort(port);
+    HostAndPort address = new HostAndPort(host, port);
+    attributes.locators.add(address);
+    locatorAddresses.add(address);
-    attributes.servers.add(getInetSocketAddress(host, port));
+    validatePort(port);
+    attributes.servers.add(new HostAndPort(host, port));
+  private void validatePort(int port) {
+    if (port <= 0) {
+      throw new IllegalArgumentException("port must be greater than 0 but was " + port);
+    }
+  }
+
-    for (InetSocketAddress inetSocketAddress : cp.getLocators()) {
-      addLocator(inetSocketAddress.getHostName(), inetSocketAddress.getPort());
+    for (InetSocketAddress address : cp.getLocators()) {
+      addLocator(address.getHostName(), address.getPort());
-    attributes.servers.addAll(cp.getServers());
+    attributes.servers.addAll(cp.getServers().stream()
+        .map(x -> new HostAndPort(x.getHostName(), x.getPort())).collect(Collectors.toList()));
-  public static class PoolAttributes implements Pool, DataSerializable {
+  public static class PoolAttributes implements Pool, Externalizable {
-    public ArrayList<InetSocketAddress> locators = new ArrayList<>();
-    public ArrayList<InetSocketAddress> servers = new ArrayList<>();
+    public ArrayList<HostAndPort> locators = new ArrayList<>();
+    public ArrayList<HostAndPort> servers = new ArrayList<>();
-      return Collections.unmodifiableList(new ArrayList<>(locators));
+      return locators.stream().map(x -> x.getSocketInetAddress()).collect(Collectors.toList());
-      return Collections.unmodifiableList(new ArrayList<>(servers));
+      return servers.stream().map(x -> x.getSocketInetAddress()).collect(Collectors.toList());
-    @Override
-    @Override
+
+    @Override
+    public void writeExternal(ObjectOutput out) throws IOException {
+      toData(out);
+    }
+
+    @Override
+    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
+      fromData(in);
+    }
