GEODE-11: GFSH commands for Lucene

Signed-off-by: Aparna Dharmakkan <adharmakkan@pivotal.io>

GEODE-11: Implementing GFSH command for listing lucene indexes.

Added the LuceneIndexCommands class that implements the list lucene index functionality in GFSH and the LuceneListIndexFunction class
that gets the information about lucene indexes from the cache. Also added a test to verify this functionality. The
org.springframework.shell.core.CommandMarker file is required to register the lucene commands in GFSH.

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

GEODE-11: Adding JUnit test for LuceneIndexCommands

Added a JUnit test for getIndexListing()
Signed-off-by: Gester Zhou <gzhou@pivotal.io>

Adding a unit test for list lucene indexes gfsh command
Signed-off-by: Gester Zhou <gzhou@pivotal.io>

GEODE-11 Adding lucene create index gfsh command

Added lucene create index command and dunit tests.

Signed-off-by: Aparna Dharmakkan <adharmakkan@pivotal.io>

GEODE-11: Create lucene index gfsh command

Added a GFSH command to create a lucene index. Added DUnit and JUnit tests. Also added JUnit test for LucenListIndexFunction.
Made changes according to review comments.

Signed-off-by: Gester Zhou <gzhou@pivotal.io>

GEODE-1652: merge pull request 190, fix the conflicts

This closes #190

+  @SuppressWarnings("unchecked")
+  public static <K> Class<K> forName(String classToLoadName, String neededFor) {
+    Class<K> loadedClass = null;
+    try {
+      // Set Constraints
+      ClassPathLoader classPathLoader = ClassPathLoader.getLatest();
+      if (classToLoadName != null && !classToLoadName.isEmpty()) {
+        loadedClass = (Class<K>) classPathLoader.forName(classToLoadName);
+      }
+    } catch (ClassNotFoundException | NoClassDefFoundError e) {
+      throw new RuntimeException(CliStrings.format(CliStrings.CREATE_REGION__MSG__COULDNOT_FIND_CLASS_0_SPECIFIED_FOR_1, new Object[] {classToLoadName, neededFor}), e);
+    }
+    catch (ClassCastException e) {
+      throw new RuntimeException(CliStrings.format(CliStrings.CREATE_REGION__MSG__CLASS_SPECIFIED_FOR_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE, new Object[] {classToLoadName, neededFor}), e);
+    }
+
+    return loadedClass;
+  }
+
+  public static <K> K newInstance(Class<K> klass, String neededFor) {
+    K instance = null;
+    try {
+      instance = klass.newInstance();
+    } catch (InstantiationException e) {
+      throw new RuntimeException(CliStrings.format(CliStrings.CREATE_REGION__MSG__COULDNOT_INSTANTIATE_CLASS_0_SPECIFIED_FOR_1, new Object[] {klass, neededFor}), e);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException(CliStrings.format(CliStrings.CREATE_REGION__MSG__COULDNOT_ACCESS_CLASS_0_SPECIFIED_FOR_1, new Object[] {klass, neededFor}), e);
+    }
+
+    return instance;
+  }
+
