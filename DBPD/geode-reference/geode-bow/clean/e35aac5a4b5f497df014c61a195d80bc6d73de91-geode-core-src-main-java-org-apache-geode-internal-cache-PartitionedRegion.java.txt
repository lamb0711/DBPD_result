Merge branch 'release/1.5.0'

-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.internal.cache.eviction.EvictionStatistics;
+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.eviction.EvictionCounters;
-  static final PRIdMap prIdToPR = new PRIdMap();
+  private static final PRIdMap prIdToPR = new PRIdMap();
+  static PRIdMap getPrIdToPR() {
+    return prIdToPR;
+  }
+
-   * Returns the EvictionStatistics for this PR. This is needed to find the single instance of
-   * EvictionStatistics created early for a PR when it is recovered from disk. This fixes bug 41938
+   * Returns the EvictionController for this PR. This is needed to find the single instance of
+   * EvictionController created early for a PR when it is recovered from disk. This fixes bug 41938
-  public EvictionStatistics getPRLRUStatsDuringInitialization() {
-    EvictionStatistics result = null;
+  public EvictionController getPREvictionControllerFromDiskInitialization() {
+    EvictionController result = null;
-      result = getDiskStore().getPRLRUStats(this);
+      result = getDiskStore().getExistingPREvictionContoller(this);
-      if (cleared) {
-        Cache cache = GemFireCacheImpl.getInstance();
-        if (cache == null) {
-          throw new CacheClosedException();
-        } else {
-          cache.getCancelCriterion().checkCancelInProgress(null);
-        }
-      }
-    if (dataPolicy.withPersistence()) {
+    if (getDataPolicy().withPersistence()) {
-    if (this.dataPolicy.withPersistence() && !this.concurrencyChecksEnabled
+    if (this.getDataPolicy().withPersistence() && !this.getConcurrencyChecksEnabled()
-      this.concurrencyChecksEnabled = true;
+      this.setConcurrencyChecksEnabled(true);
-      throw new CacheClosedException("Cache is shutting down");
+      throw cache.getCacheClosedException("Cache is shutting down");
-        this.concurrencyChecksEnabled = !this.concurrencyChecksEnabled;
+        this.setConcurrencyChecksEnabled(!this.getConcurrencyChecksEnabled());
-            DistributionManager.HIGH_PRIORITY_EXECUTOR, false);
+            ClusterDistributionManager.HIGH_PRIORITY_EXECUTOR, false);
-  protected void postCreateRegion() {
+  public void postCreateRegion() {
-  protected void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
+  public void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
+  @Override
+  protected RegionVersionVector createRegionVersionVector() {
+    return null;
+  }
+
-      if (!ifNew && !ifOld && !this.concurrencyChecksEnabled) {
+      if (!ifNew && !ifOld && !this.getConcurrencyChecksEnabled()) {
-      throw new CacheClosedException("Cache is shutting down");
+      throw cache.getCacheClosedException("Cache is shutting down");
-        } else if (!this.concurrencyChecksEnabled) { // no keys returned if not versioned
+        } else if (!this.getConcurrencyChecksEnabled()) { // no keys returned if not versioned
-      throw new CacheClosedException("Cache is shutting down");
+      throw cache.getCacheClosedException("Cache is shutting down");
-        } else if (!this.concurrencyChecksEnabled) { // no keys returned if not versioned
+        } else if (!this.getConcurrencyChecksEnabled()) { // no keys returned if not versioned
-            if (!DistributionManager.isFunctionExecutionThread()) {
+            if (!ClusterDistributionManager.isFunctionExecutionThread()) {
-    final DM dm = getDistributionManager();
+    final DistributionManager dm = getDistributionManager();
-      final DM dm = getDistributionManager();
+      final DistributionManager dm = getDistributionManager();
-    final DM dm = getDistributionManager();
+    final DistributionManager dm = getDistributionManager();
-    final DM dm = getDistributionManager();
+    final DistributionManager dm = getDistributionManager();
-   * Test Method: Get a random set of keys from a randomly selected bucket using the provided
-   * {@code Random} number generator.
-   *
-   * @return A set of keys from a randomly chosen bucket or {@link Collections#EMPTY_SET}
-   */
-  public Set getSomeKeys(Random rnd) throws IOException, ClassNotFoundException {
-    InternalDistributedMember nod = null;
-    Integer buck = null;
-    Set buks = getRegionAdvisor().getBucketSet();
-
-    if (buks != null && !buks.isEmpty()) {
-      Object[] buksA = buks.toArray();
-      Set ret = null;
-      // Randomly pick a node to get some data from
-      for (int i = 0; i < buksA.length; i++) {
-        try {
-          logger.debug("getSomeKeys: iteration: {}", i);
-          int ind = rnd.nextInt(buksA.length);
-          if (ind >= buksA.length) {
-            // The GSRandom.nextInt(int) may return a value that includes the
-            // maximum.
-            ind = buksA.length - 1;
-          }
-          buck = (Integer) buksA[ind];
-
-          nod = getNodeForBucketRead(buck);
-          if (nod != null) {
-            logger.debug("getSomeKeys: iteration: {} for node {}", i, nod);
-            if (nod.equals(getMyId())) {
-              ret =
-                  dataStore.handleRemoteGetKeys(buck, InterestType.REGULAR_EXPRESSION, ".*", false);
-            } else {
-              FetchKeysResponse r = FetchKeysMessage.send(nod, this, buck, false);
-              ret = r.waitForKeys();
-            }
-
-            if (ret != null && !ret.isEmpty()) {
-              return ret;
-            }
-          }
-        } catch (ForceReattemptException movinOn) {
-          checkReadiness();
-          logger.debug(
-              "Test hook getSomeKeys caught a ForceReattemptException for bucketId={}{}{}. Moving on to another bucket",
-              getPRId(), BUCKET_ID_SEPARATOR, buck, movinOn);
-          continue;
-        } catch (PRLocallyDestroyedException ignore) {
-          logger.debug("getSomeKeys: Encountered PRLocallyDestroyedException");
-          checkReadiness();
-          continue;
-        }
-
-      } // nod != null
-    } // for
-    logger.debug("getSomeKeys: no keys found returning empty set");
-    return Collections.emptySet();
-  }
-
-  /**
-    DistributionManager dm = (DistributionManager) getDistributionManager();
+    ClusterDistributionManager dm = (ClusterDistributionManager) getDistributionManager();
-    profile.isPersistent = dataPolicy.withPersistence();
+    profile.isPersistent = getDataPolicy().withPersistence();
-    if (dataPolicy.withPersistence()) {
+    if (getDataPolicy().withPersistence()) {
-  void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
+  public void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
-        DM dm = cache.getInternalDistributedSystem().getDistributionManager();
+        DistributionManager dm = cache.getInternalDistributedSystem().getDistributionManager();
-      final DM dm = cache.getInternalDistributedSystem().getDistributionManager();
+      final DistributionManager dm = cache.getInternalDistributedSystem().getDistributionManager();
-        .append("'; dataPolicy=").append(this.dataPolicy).append("; prId=")
+        .append("'; dataPolicy=").append(this.getDataPolicy()).append("; prId=")
-      this.concurrencyChecksEnabled = true;
+      this.setConcurrencyChecksEnabled(true);
-      this.indexManager = IndexUtils.getIndexManager(this, true);
+      this.indexManager = IndexUtils.getIndexManager(cache, this, true);
-        IndexManager bucketIndexManager = IndexUtils.getIndexManager(bucket, true);
+        IndexManager bucketIndexManager = IndexUtils.getIndexManager(cache, bucket, true);
-          IndexManager indexMang = IndexUtils.getIndexManager(bucket, false);
+          IndexManager indexMang = IndexUtils.getIndexManager(cache, bucket, false);
-    public synchronized void memberJoined(InternalDistributedMember id) {
+    public synchronized void memberJoined(DistributionManager distributionManager,
+        InternalDistributedMember id) {
-    public void quorumLost(Set<InternalDistributedMember> failures,
-        List<InternalDistributedMember> remaining) {}
+    public void quorumLost(DistributionManager distributionManager,
+        Set<InternalDistributedMember> failures, List<InternalDistributedMember> remaining) {}
-    public void memberSuspect(InternalDistributedMember id, InternalDistributedMember whoSuspected,
-        String reason) {}
+    public void memberSuspect(DistributionManager distributionManager, InternalDistributedMember id,
+        InternalDistributedMember whoSuspected, String reason) {}
-    public synchronized void memberDeparted(InternalDistributedMember id, boolean crashed) {
+    public synchronized void memberDeparted(DistributionManager distributionManager,
+        InternalDistributedMember id, boolean crashed) {
-        prIndex = new PartitionedIndex(indexType, indexName, PartitionedRegion.this,
+        prIndex = new PartitionedIndex(cache, indexType, indexName, PartitionedRegion.this,
-      PartitionedIndex parIndex = new PartitionedIndex(indexType, indexName, PartitionedRegion.this,
-          indexedExpression, fromClause, imports);
+      PartitionedIndex parIndex = new PartitionedIndex(cache, indexType, indexName,
+          PartitionedRegion.this, indexedExpression, fromClause, imports);
-        IndexManager indMng = IndexUtils.getIndexManager(bucket, true);
+        IndexManager indMng = IndexUtils.getIndexManager(cache, bucket, true);
