Merge branch 'develop' into feature/GEODE-1801

+import org.apache.geode.cache.*;
-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.DataPolicy;
-import org.apache.geode.cache.EntryEvent;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.RegionAttributes;
-import org.apache.geode.cache.RegionDestroyedException;
-import org.apache.geode.cache.RegionShortcut;
-import org.apache.geode.cache.Scope;
-  public static final String STRING_REGION = "__StRiNgS";
+  public static final String STRING_REGION = "ReDiS_StRiNgS";
-  public static final String HLL_REGION = "__HlL";
+  public static final String HLL_REGION = "ReDiS_HlL";
-      InternalRegionArguments ira = new InternalRegionArguments().setInternalRegion(true);
-      AttributesFactory af = new AttributesFactory();
-      af.setScope(Scope.LOCAL);
-      RegionAttributes ra = af.create();
+
-          stringsRegion = gemFireCache.createVMRegion(GeodeRedisServer.STRING_REGION, ra, ira);
+          RegionFactory<ByteArrayWrapper, ByteArrayWrapper> regionFactory = gemFireCache.createRegionFactory(this.DEFAULT_REGION_TYPE);
+          stringsRegion = regionFactory.create(STRING_REGION);
-          hLLRegion = gemFireCache.createVMRegion(HLL_REGION, ra, ira);
+          RegionFactory<ByteArrayWrapper, HyperLogLogPlus> regionFactory = gemFireCache.createRegionFactory(this.DEFAULT_REGION_TYPE);
+          hLLRegion = regionFactory.create(HLL_REGION);
+          AttributesFactory af = new AttributesFactory();
+          InternalRegionArguments ira = new InternalRegionArguments().setInternalRegion(true).setIsUsedForMetaRegion(true);
