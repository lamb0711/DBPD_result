GEODE-6534: Reduce scope of LocalRegion methods (#3398)

* Reduce scope of methods and fields where possible
* Remove unused methods and fields
* Remove redundant interface
* Replace deprecated call with undeprecated call
* Apply FunctionalInterface annotation to nested interfaces

-    EventTracker tracker = new DistributedEventTracker(cache, stopper, getName());
+    EventTracker tracker = new DistributedEventTracker(cache, getCancelCriterion(), getName());
-  public boolean requiresOneHopForMissingEntry(EntryEventImpl event) {
+  boolean requiresOneHopForMissingEntry(EntryEventImpl event) {
-    return this.getConcurrencyChecksEnabled() && (this.serverRegionProxy == null) && !isTX()
+    return this.getConcurrencyChecksEnabled() && (getServerProxy() == null) && !isTX()
-  protected RegionEntry basicPutEntry(EntryEventImpl event, long lastModified)
+  RegionEntry basicPutEntry(EntryEventImpl event, long lastModified)
-  public void performPutAllEntry(EntryEventImpl event) {
+  void performPutAllEntry(EntryEventImpl event) {
-  public void performRemoveAllEntry(EntryEventImpl event) {
+  void performRemoveAllEntry(EntryEventImpl event) {
-  protected boolean shouldGenerateVersionTag(RegionEntry entry, EntryEventImpl event) {
+  boolean shouldGenerateVersionTag(RegionEntry entry, EntryEventImpl event) {
-    if (this.serverRegionProxy != null) { // client
+    if (getServerProxy() != null) { // client
-  public Object validatedDestroy(Object key, EntryEventImpl event)
+  Object validatedDestroy(Object key, EntryEventImpl event)
-  public void localDestroyNoCallbacks(Object key) {
+  void localDestroyNoCallbacks(Object key) {
-  public void initialized() {
+  void initialized() {
-    Boolean isCBool = (Boolean) isConversion.get();
-    boolean isForConversion = isCBool != null ? isCBool : false;
-    if (recoverFromDisk && snapshotInputStream != null && !isForConversion) {
+    if (recoverFromDisk && snapshotInputStream != null) {
-          if (this.serverRegionProxy == null) {
+          if (getServerProxy() == null) {
-  protected void distributeDestroyRegion(RegionEventImpl event, boolean notifyOfRegionDeparture) {
+  void distributeDestroyRegion(RegionEventImpl event, boolean notifyOfRegionDeparture) {
-          if (this.serverRegionProxy == null) {
+          if (getServerProxy() == null) {
-            this.stopper.checkCancelInProgress(e);
+            getCancelCriterion().checkCancelInProgress(e);
-  protected boolean isCurrentlyLockGrantor() {
+  boolean isCurrentlyLockGrantor() {
-  protected Object findObjectInSystem(KeyInfo keyInfo, boolean isCreate, TXStateInterface txState,
+  Object findObjectInSystem(KeyInfo keyInfo, boolean isCreate, TXStateInterface txState,
-    if (this.serverRegionProxy == null) {
+    if (getServerProxy() == null) {
-    Object value = this.serverRegionProxy.get(keyInfo.getKey(), aCallbackArgument, holder);
+    Object value = getServerProxy().get(keyInfo.getKey(), aCallbackArgument, holder);
-  public void checkSameSenderIdsAvailableOnAllNodes() {
+  void checkSameSenderIdsAvailableOnAllNodes() {
-  public VersionedObjectList basicPutAll(final Map<?, ?> map,
+  VersionedObjectList basicPutAll(final Map<?, ?> map,
-  protected void removeSenderFromAdvisor(InternalDistributedMember sender, int serial,
+  void removeSenderFromAdvisor(InternalDistributedMember sender, int serial,
-  protected void setMemoryThresholdFlag(MemoryEvent event) {
+  void setMemoryThresholdFlag(MemoryEvent event) {
-  public void initialCriticalMembers(boolean localMemoryIsCritical,
+  void initialCriticalMembers(boolean localMemoryIsCritical,
-  public long getLatestLastAccessTimeFromOthers(Object key) {
+  long getLatestLastAccessTimeFromOthers(Object key) {
