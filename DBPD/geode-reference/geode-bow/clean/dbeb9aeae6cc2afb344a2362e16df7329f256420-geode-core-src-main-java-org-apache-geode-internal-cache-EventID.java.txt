Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class uniquely identifies any Region Operation like create, update
- * destroy etc. It is composed of three parts , namely :- 1)
- * DistributedMembershipID 2) ThreadID 3) SequenceID This helps in sequencing
- * the events belonging to a unique producer.
+ * This class uniquely identifies any Region Operation like create, update destroy etc. It is
+ * composed of three parts , namely :- 1) DistributedMembershipID 2) ThreadID 3) SequenceID This
+ * helps in sequencing the events belonging to a unique producer.
- *  
+ * 
-public final class EventID
-  implements DataSerializableFixedID, Serializable, Externalizable
-{
+public final class EventID implements DataSerializableFixedID, Serializable, Externalizable {
-  
+
-  private static boolean LOG_ID_BYTES = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "log-event-member-id-bytes");
-  
+  private static boolean LOG_ID_BYTES =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "log-event-member-id-bytes");
+
-   * Uniquely identifies the distributed member VM in which the Event is
-   * produced
+   * Uniquely identifies the distributed member VM in which the Event is produced
-  
+
-  
+
-  
+
-  
+
-  private static final Version[] dsfidVersions = new Version[] {
-        Version.GFE_80 };
-  
+  private static final Version[] dsfidVersions = new Version[] {Version.GFE_80};
+
-    protected Object initialValue()
-    {
+    protected Object initialValue() {
-   * the membership id of the distributed system in this client (if running in a
-   * client) that is reflected in client_side_event_identity
+   * the membership id of the distributed system in this client (if running in a client) that is
+   * reflected in client_side_event_identity
-   * this form of client ID is used in event identifiers to reduce the size
-   * of the ID
+   * this form of client ID is used in event identifiers to reduce the size of the ID
-   * An array containing the helper class objects which are used to create
-   * optimized byte array for an eventID , which can be sent on the network
+   * An array containing the helper class objects which are used to create optimized byte array for
+   * an eventID , which can be sent on the network
-      new IntegerEventIDByteArrayFiller(), new LongEventIDByteArrayFiller() };
-  
+      new IntegerEventIDByteArrayFiller(), new LongEventIDByteArrayFiller()};
+
-   * Constructor used for creating EventID object at the actual source of
-   * creation of Event. The thread identification & sequence ID of the event is
-   * done using ThreadLocal object.  The membershipId must be created with
-   * EventID.getMembershipId() and not the methods or byte array stored in
-   * a ClientProxyMembershipID as those are heavyweight identifiers and
-   * they will cause serialization and comparison problems when used in EventIDs
+   * Constructor used for creating EventID object at the actual source of creation of Event. The
+   * thread identification & sequence ID of the event is done using ThreadLocal object. The
+   * membershipId must be created with EventID.getMembershipId() and not the methods or byte array
+   * stored in a ClientProxyMembershipID as those are heavyweight identifiers and they will cause
+   * serialization and comparison problems when used in EventIDs
-    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper)threadIDLocal
-        .get();
+    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper) threadIDLocal.get();
-  
+
+   * 
-  
+
-  
+
-  
+
-   * Convert a ClientProxyMembershipID distribted member ID array into one
-   * usable by EventIDs 
+   * Convert a ClientProxyMembershipID distribted member ID array into one usable by EventIDs
+   * 
-      ((InternalDistributedMember)client.getDistributedMember()).writeEssentialData(hdos);
+      ((InternalDistributedMember) client.getDistributedMember()).writeEssentialData(hdos);
-    }
-    catch (IOException ioe) {
-      throw new InternalGemFireException(LocalizedStrings.ClientProxyMembershipID_UNABLE_TO_SERIALIZE_IDENTITY.toLocalizedString(), ioe);
+    } catch (IOException ioe) {
+      throw new InternalGemFireException(
+          LocalizedStrings.ClientProxyMembershipID_UNABLE_TO_SERIALIZE_IDENTITY.toLocalizedString(),
+          ioe);
+   * 
-    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper)threadIDLocal.get();
+    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper) threadIDLocal.get();
+
-   * Returns the next reservable sequence id used by the calling thread for its event ids.
-   * Note that the returned id is not yet reserved by the calling thread.
+   * Returns the next reservable sequence id used by the calling thread for its event ids. Note that
+   * the returned id is not yet reserved by the calling thread.
+   * 
-    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper)threadIDLocal.get();
+    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper) threadIDLocal.get();
+
-   * Reserves and returns a sequence id for the calling thread to be used
-   * for an event id.
+   * Reserves and returns a sequence id for the calling thread to be used for an event id.
+   * 
-    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper)threadIDLocal.get();
+    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper) threadIDLocal.get();
-  
+
-    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper)threadIDLocal.get();
+    ThreadAndSequenceIDWrapper wrapper = (ThreadAndSequenceIDWrapper) threadIDLocal.get();
-  
+
-  
+
-   * Constructor which explicitly sets all the fields and by-passes
-   * auto-generation of thread and seq. ids. This is used by the QRM thread
-   * and by ServerConnection threads that have cached their client ID
-   * byte arrays.  It is also used by many unit test methods to create
-   * fake event identifiers.
+   * Constructor which explicitly sets all the fields and by-passes auto-generation of thread and
+   * seq. ids. This is used by the QRM thread and by ServerConnection threads that have cached their
+   * client ID byte arrays. It is also used by many unit test methods to create fake event
+   * identifiers.
-   * @param memId -
-   *          membership id for this entry - must be created by EventID.getMembershipID()
-   * @param threadId -
-   *          thread id for this entry
-   * @param seqId -
-   *          sequence id for this entry
+   * @param memId - membership id for this entry - must be created by EventID.getMembershipID()
+   * @param threadId - thread id for this entry
+   * @param seqId - sequence id for this entry
-  
+
-  
+
-    if ( ! (wrapper instanceof ThreadAndSequenceIDWrapper) ) {
-      throw new IllegalArgumentException("Expected a ThreadAndSequenceIdWrapper but received " + wrapper);
+    if (!(wrapper instanceof ThreadAndSequenceIDWrapper)) {
+      throw new IllegalArgumentException(
+          "Expected a ThreadAndSequenceIdWrapper but received " + wrapper);
-   *  
+   * 
-  public EventID() {
-  }
+  public EventID() {}
-  public long getThreadID()
-  {
+  public long getThreadID() {
-  public byte[] getMembershipID()
-  {
+  public byte[] getMembershipID() {
-  
+
-   * starting in v6.5 this method returns a somewhat crippled Identifier.
-   * It is missing any durable attributes and roles information but contains
-   * all other info about the member.  This fixes bug #39361.
+   * starting in v6.5 this method returns a somewhat crippled Identifier. It is missing any durable
+   * attributes and roles information but contains all other info about the member. This fixes bug
+   * #39361.
+   * 
-  public long getSequenceID()
-  {
+  public long getSequenceID() {
-   * Returns a byte[] whose contents are calculated by
-   * calling {@link #getOptimizedByteArrayForEventID}
+   * Returns a byte[] whose contents are calculated by calling
+   * {@link #getOptimizedByteArrayForEventID}
+   * 
-  
+
-  public void toData(DataOutput dop) throws IOException
-  {
+  public void toData(DataOutput dop) throws IOException {
-    DataSerializer.writeByteArray(getOptimizedByteArrayForEventID(this.threadID, this.sequenceID),dop);
+    DataSerializer.writeByteArray(getOptimizedByteArrayForEventID(this.threadID, this.sequenceID),
+        dop);
-  public void toDataPre_GFE_8_0_0_0(DataOutput dop) throws IOException{
+  public void toDataPre_GFE_8_0_0_0(DataOutput dop) throws IOException {
-    DataSerializer.writeByteArray(getOptimizedByteArrayForEventID(this.threadID, this.sequenceID),dop);
+    DataSerializer.writeByteArray(getOptimizedByteArrayForEventID(this.threadID, this.sequenceID),
+        dop);
-  
-  public void fromData(DataInput di) throws IOException, ClassNotFoundException
-  {
+
+  public void fromData(DataInput di) throws IOException, ClassNotFoundException {
-  public void fromDataPre_GFE_8_0_0_0(DataInput di) throws IOException, ClassNotFoundException
-  {
+  public void fromDataPre_GFE_8_0_0_0(DataInput di) throws IOException, ClassNotFoundException {
-  
-  public void writeExternal(ObjectOutput out) throws IOException
-  {
+
+  public void writeExternal(ObjectOutput out) throws IOException {
-    DataSerializer.writeByteArray(getOptimizedByteArrayForEventID(this.threadID, this.sequenceID),out);
+    DataSerializer.writeByteArray(getOptimizedByteArrayForEventID(this.threadID, this.sequenceID),
+        out);
-  public void readExternal(ObjectInput in) throws IOException,
-      ClassNotFoundException
-  {
+  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
-  
+
-    if(hashCode == 0) {
+    if (hashCode == 0) {
-    return cname.substring(getClass().getPackage().getName().length()+1);
+    return cname.substring(getClass().getPackage().getName().length() + 1);
-      mbr = InternalDistributedMember.readEssentialData(
-          new DataInputStream(new ByteArrayInputStream(membershipID)));
+      mbr = InternalDistributedMember
+          .readEssentialData(new DataInputStream(new ByteArrayInputStream(membershipID)));
+    } catch (Exception e) {
+      mbr = membershipID; // punt and use the bytes
-    catch (Exception e) {
-      mbr = membershipID;  // punt and use the bytes
-    }
-    return "EventID[" + mbr + ";threadID=" + ThreadIdentifier.toDisplayString(threadID) + ";sequenceID=" + sequenceID
-      + (Breadcrumbs.ENABLED? ";bcrumb=" + breadcrumbCounter : "")
-      + (bucketID>=0? (";bucketID=" + bucketID) : "")
-      + "]";
+    return "EventID[" + mbr + ";threadID=" + ThreadIdentifier.toDisplayString(threadID)
+        + ";sequenceID=" + sequenceID + (Breadcrumbs.ENABLED ? ";bcrumb=" + breadcrumbCounter : "")
+        + (bucketID >= 0 ? (";bucketID=" + bucketID) : "") + "]";
-  
-  
+
+
-      for (int i=0; i<membershipID.length; i++) {
+      for (int i = 0; i < membershipID.length; i++) {
-        if (i < membershipID.length-1) {
+        if (i < membershipID.length - 1) {
-    }
-    else {
+    } else {
-//    buf.append(this.membershipID.toString());
+    // buf.append(this.membershipID.toString());
-    
-    if (Breadcrumbs.ENABLED){ 
+
+    if (Breadcrumbs.ENABLED) {
-    
+
-  
-  private static byte[] initializeAndGetDSEventIdentity(DistributedSystem sys)
-  {
+
+  private static byte[] initializeAndGetDSEventIdentity(DistributedSystem sys) {
-      throw new IllegalStateException(LocalizedStrings.ClientProxyMembershipID_ATTEMPTING_TO_HANDSHAKE_WITH_CACHESERVER_BEFORE_CREATING_DISTRIBUTEDSYSTEM_AND_CACHE.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.ClientProxyMembershipID_ATTEMPTING_TO_HANDSHAKE_WITH_CACHESERVER_BEFORE_CREATING_DISTRIBUTEDSYSTEM_AND_CACHE
+              .toLocalizedString());
-        ((InternalDistributedMember)EventID.systemMemberId).writeEssentialData(hdos);
+        ((InternalDistributedMember) EventID.systemMemberId).writeEssentialData(hdos);
-      }
-      catch (IOException ioe) {
-        throw new InternalGemFireException(LocalizedStrings.ClientProxyMembershipID_UNABLE_TO_SERIALIZE_IDENTITY.toLocalizedString(), ioe);
+      } catch (IOException ioe) {
+        throw new InternalGemFireException(
+            LocalizedStrings.ClientProxyMembershipID_UNABLE_TO_SERIALIZE_IDENTITY
+                .toLocalizedString(),
+            ioe);
-  
+
-   * Returns the number of bytes needed to store the given value. This
-   * calculation is needed to create the optimized byte-array for an eventId,
-   * which will be sent across the network
+   * Returns the number of bytes needed to store the given value. This calculation is needed to
+   * create the optimized byte-array for an eventId, which will be sent across the network
-   * @param id -
-   *          the long value ( threadId or sequenceId in this context)
+   * @param id - the long value ( threadId or sequenceId in this context)
-  public static int getByteSizeForValue(long id)
-  {
+  public static int getByteSizeForValue(long id) {
-    }
-    else if (id <= Short.MAX_VALUE) {
+    } else if (id <= Short.MAX_VALUE) {
-    }
-    else if (id <= Integer.MAX_VALUE) {
+    } else if (id <= Integer.MAX_VALUE) {
-    }
-    else {
+    } else {
-   * Gets the optmized byte-array representation of an eventId which can be sent
-   * across the network. For client to server messages, the membership id part
-   * of event-id is not need to be sent with each event. Also, the threadId and
-   * sequenceId need not be sent as long if their value is small. This function
-   * returns the optimal byte-array for the eventId.
+   * Gets the optmized byte-array representation of an eventId which can be sent across the network.
+   * For client to server messages, the membership id part of event-id is not need to be sent with
+   * each event. Also, the threadId and sequenceId need not be sent as long if their value is small.
+   * This function returns the optimal byte-array for the eventId.
-   * @param threadId -
-   *          the long value of threadId
-   * @param sequenceId -
-   *          the long value of sequenceId
+   * @param threadId - the long value of threadId
+   * @param sequenceId - the long value of sequenceId
-  public static byte[] getOptimizedByteArrayForEventID(long threadId,
-      long sequenceId)
-  {
+  public static byte[] getOptimizedByteArrayForEventID(long threadId, long sequenceId) {
-    int sequenceIdIndex = (sequenceIdLength == 1) ? 0
-        : ((sequenceIdLength / 4) + 1);
+    int sequenceIdIndex = (sequenceIdLength == 1) ? 0 : ((sequenceIdLength / 4) + 1);
-   * Reads the optimized byte-array representation of an eventId and returns the
-   * long value of threadId or sequenceId ( the first invocation of this method
-   * on bytebuffer returns the threadId and the second returns the sequenceId.
+   * Reads the optimized byte-array representation of an eventId and returns the long value of
+   * threadId or sequenceId ( the first invocation of this method on bytebuffer returns the threadId
+   * and the second returns the sequenceId.
-   * @param buffer -
-   *          the byte-buffer wrapping the optimized byte-array for the eventId
+   * @param buffer - the byte-buffer wrapping the optimized byte-array for the eventId
-  public static long readEventIdPartsFromOptmizedByteArray(ByteBuffer buffer)
-  {
+  public static long readEventIdPartsFromOptmizedByteArray(ByteBuffer buffer) {
-   * Abstract helper class used to create optimized byte-array for the eventid,
-   * which will be sent across the network.
+   * Abstract helper class used to create optimized byte-array for the eventid, which will be sent
+   * across the network.
-  protected static abstract class AbstractEventIDByteArrayFiller
-  {
+  protected static abstract class AbstractEventIDByteArrayFiller {
-     * This method adds to the byte-buffer, the token indicating the type of the
-     * passed 'id' (threadId or sequenceId) and the optimal byte array
-     * representing the id depending on the value of the 'id'.
+     * This method adds to the byte-buffer, the token indicating the type of the passed 'id'
+     * (threadId or sequenceId) and the optimal byte array representing the id depending on the
+     * value of the 'id'.
-     * @param buffer -
-     *          the byte buffer wrapping the byte array for the event id
-     * @param id -
-     *          the long value of threadId or sequenceId
+     * @param buffer - the byte buffer wrapping the byte array for the event id
+     * @param id - the long value of threadId or sequenceId
-     * @param buffer -
-     *          the byte-buffer containing the eventId parts which needs to be
-     *          read
+     * @param buffer - the byte-buffer containing the eventId parts which needs to be read
-  protected static class ByteEventIDByteArrayFiller extends
-      AbstractEventIDByteArrayFiller
-  {
+  protected static class ByteEventIDByteArrayFiller extends AbstractEventIDByteArrayFiller {
-     * The token to indicate that given id ( threadId or sequenceId) is of type
-     * <code>Byte</code>
+     * The token to indicate that given id ( threadId or sequenceId) is of type <code>Byte</code>
-     * Writes the given 'id' to the given buffer as 'byte' preceeded by a token
-     * indicating that it is written as 'byte' type.
+     * Writes the given 'id' to the given buffer as 'byte' preceeded by a token indicating that it
+     * is written as 'byte' type.
-     * @param buffer -
-     *          the buffer in which id is to be written
-     * @param id -
-     *          the threadId or sequenceId to be written
+     * @param buffer - the buffer in which id is to be written
+     * @param id - the threadId or sequenceId to be written
-    public void fill(ByteBuffer buffer, long id)
-    {
+    public void fill(ByteBuffer buffer, long id) {
-      buffer.put((byte)id);
+      buffer.put((byte) id);
-     * @param buffer -
-     *          the buffer from which 'id'(threadId or sequenceId) is to be read
+     * @param buffer - the buffer from which 'id'(threadId or sequenceId) is to be read
-    public long read(ByteBuffer buffer)
-    {
+    public long read(ByteBuffer buffer) {
-  protected static class ShortEventIDByteArrayFiller extends
-      AbstractEventIDByteArrayFiller
-  {
+  protected static class ShortEventIDByteArrayFiller extends AbstractEventIDByteArrayFiller {
-     * The token to indicate that given id ( threadId or sequenceId) is of type
-     * <code>Short</code>
+     * The token to indicate that given id ( threadId or sequenceId) is of type <code>Short</code>
-     * Writes the given 'id' to the given buffer as 'short' preceeded by a token
-     * indicating that it is written as 'short' type.
+     * Writes the given 'id' to the given buffer as 'short' preceeded by a token indicating that it
+     * is written as 'short' type.
-     * @param buffer -
-     *          the buffer in which id is to be written
-     * @param id -
-     *          the threadId or sequenceId to be written
+     * @param buffer - the buffer in which id is to be written
+     * @param id - the threadId or sequenceId to be written
-    public void fill(ByteBuffer buffer, long id)
-    {
+    public void fill(ByteBuffer buffer, long id) {
-      buffer.putShort((short)id);
+      buffer.putShort((short) id);
-     * @param buffer -
-     *          the buffer from which 'id'(threadId or sequenceId) is to be read
+     * @param buffer - the buffer from which 'id'(threadId or sequenceId) is to be read
-    public long read(ByteBuffer buffer)
-    {
+    public long read(ByteBuffer buffer) {
-  protected static class IntegerEventIDByteArrayFiller extends
-      AbstractEventIDByteArrayFiller
-  {
+  protected static class IntegerEventIDByteArrayFiller extends AbstractEventIDByteArrayFiller {
-     * The token to indicate that given id ( threadId or sequenceId) is of type
-     * <code>Integer</code>
+     * The token to indicate that given id ( threadId or sequenceId) is of type <code>Integer</code>
-     * Writes the given 'id' to the given buffer as 'int' preceeded by a token
-     * indicating that it is written as 'int' type.
+     * Writes the given 'id' to the given buffer as 'int' preceeded by a token indicating that it is
+     * written as 'int' type.
-     * @param buffer -
-     *          the buffer in which id is to be written
-     * @param id -
-     *          the threadId or sequenceId to be written
+     * @param buffer - the buffer in which id is to be written
+     * @param id - the threadId or sequenceId to be written
-    public void fill(ByteBuffer buffer, long id)
-    {
+    public void fill(ByteBuffer buffer, long id) {
-      buffer.putInt((int)id);
+      buffer.putInt((int) id);
-     * @param buffer -
-     *          the buffer from which 'id'(threadId or sequenceId) is to be read
+     * @param buffer - the buffer from which 'id'(threadId or sequenceId) is to be read
-    public long read(ByteBuffer buffer)
-    {
+    public long read(ByteBuffer buffer) {
-  protected static class LongEventIDByteArrayFiller extends
-      AbstractEventIDByteArrayFiller
-  {
+  protected static class LongEventIDByteArrayFiller extends AbstractEventIDByteArrayFiller {
-     * The token to indicate that given id ( threadId or sequenceId) is of type
-     * <code>Long</code>
+     * The token to indicate that given id ( threadId or sequenceId) is of type <code>Long</code>
-     * Writes the given 'id' to the given buffer as 'long' preceeded by a token
-     * indicating that it is written as 'long' type.
+     * Writes the given 'id' to the given buffer as 'long' preceeded by a token indicating that it
+     * is written as 'long' type.
-     * @param buffer -
-     *          the buffer in which id is to be written
-     * @param id -
-     *          the threadId or sequenceId to be written
+     * @param buffer - the buffer in which id is to be written
+     * @param id - the threadId or sequenceId to be written
-    public void fill(ByteBuffer buffer, long id)
-    {
+    public void fill(ByteBuffer buffer, long id) {
-     * @param buffer -
-     *          the buffer from which 'id'(threadId or sequenceId) is to be read
+     * @param buffer - the buffer from which 'id'(threadId or sequenceId) is to be read
-    public long read(ByteBuffer buffer)
-    {
+    public long read(ByteBuffer buffer) {
-  
+
-    long getAndIncrementSequenceID()
-    {
+    long getAndIncrementSequenceID() {
-    void reserveSequenceID(int size)
-    {
+    void reserveSequenceID(int size) {
