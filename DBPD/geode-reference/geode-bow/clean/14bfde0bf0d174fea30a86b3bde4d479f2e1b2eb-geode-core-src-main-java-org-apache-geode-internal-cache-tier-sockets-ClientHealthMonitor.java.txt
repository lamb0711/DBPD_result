Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingThread;
-   * Reference count in the event that multiple bridge servers are using the health monitor
+   * Reference count in the event that multiple cache servers are using the health monitor
-        logger.debug(LocalizedMessage.create(
-            LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_REGISTERING_CLIENT_WITH_MEMBER_ID_0,
-            new Object[] {proxyID}));
+        logger.debug("ClientHealthMonitor: Registering client with member id {}",
+            proxyID);
-          logger.debug(LocalizedMessage.create(
-              LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_UNREGISTERING_CLIENT_WITH_MEMBER_ID_0,
-              new Object[] {proxyID}));
+          logger.debug("ClientHealthMonitor: Unregistering client with member id {}",
+              proxyID);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_UNREGISTERING_CLIENT_WITH_MEMBER_ID_0_DUE_TO_1,
+        logger.warn("ClientHealthMonitor: Unregistering client with member id {} due to: {}",
-                : clientDisconnectException.getLocalizedMessage()}));
+                : clientDisconnectException.getLocalizedMessage()});
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.ClientHealtMonitor_0_IS_BEING_TERMINATED_BECAUSE_ITS_CLIENT_TIMEOUT_OF_1_HAS_EXPIRED,
+        logger.warn("{} is being terminated because its client timeout of {} has expired.",
-                Integer.valueOf(serverConnection.getClientReadTimeout())}));
+                Integer.valueOf(serverConnection.getClientReadTimeout())});
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.ClientHealthMonitor_CLIENT_HEALTH_MONITOR_THREAD_DISABLED_DUE_TO_MAXIMUMTIMEBETWEENPINGS_SETTING__0,
-          maximumTimeBetweenPings));
+      logger.info(
+          "Client health monitor thread disabled due to maximumTimeBetweenPings setting: {}",
+          maximumTimeBetweenPings);
-  class ClientHealthMonitorThread extends Thread {
+  class ClientHealthMonitorThread extends LoggingThread {
-      super(LoggingThreadGroup.createThreadGroup("ClientHealthMonitor Thread Group", logger),
-          "ClientHealthMonitor Thread");
-      setDaemon(true);
+      super("ClientHealthMonitor Thread");
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITORTHREAD_MAXIMUM_ALLOWED_TIME_BETWEEN_PINGS_0,
-          this._maximumTimeBetweenPings));
+      logger.info("ClientHealthMonitorThread maximum allowed time between pings: {}",
+          this._maximumTimeBetweenPings);
-              LocalizedStrings.ClientHealthMonitor_STACK_TRACE_0.toLocalizedString()));
+              "stack trace"));
-                    logger.warn(LocalizedMessage.create(
-                        LocalizedStrings.ClientHealthMonitor_MONITORING_CLIENT_WITH_MEMBER_ID_0_IT_HAD_BEEN_1_MS_SINCE_THE_LATEST_HEARTBEAT_MAX_INTERVAL_IS_2_TERMINATED_CLIENT,
+                    logger.warn(
+                        "Monitoring client with member id {}. It had been {} ms since the latest heartbeat. Max interval is {}. Terminated client.",
-                            this._maximumTimeBetweenPings}));
+                            this._maximumTimeBetweenPings});
-          logger.warn(LocalizedMessage
-              .create(LocalizedStrings.ClientHealthMonitor_UNEXPECTED_INTERRUPT_EXITING), e);
+          logger.warn("Unexpected interrupt, exiting", e);
-            logger.fatal(LocalizedMessage.create(
-                LocalizedStrings.ClientHealthMonitor_0_AN_UNEXPECTED_EXCEPTION_OCCURRED,
-                ClientHealthMonitor.this), e);
+            logger.fatal(ClientHealthMonitor.this.toString() + ": An unexpected Exception occurred",
+                e);
