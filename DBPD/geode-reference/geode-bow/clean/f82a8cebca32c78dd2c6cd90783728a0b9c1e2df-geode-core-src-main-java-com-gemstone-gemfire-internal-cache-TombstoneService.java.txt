made vars private; removed unused code

-  public Object blockGCLock = new Object();
+  public final Object blockGCLock = new Object();
-    startSweeper(this.replicatedTombstoneSweeper);
-    startSweeper(this.nonReplicatedTombstoneSweeper);
+    this.replicatedTombstoneSweeper.start();
+    this.nonReplicatedTombstoneSweeper.start();
-  private void startSweeper(TombstoneSweeper tombstoneSweeper) {
-    synchronized(tombstoneSweeper) {
-      if (tombstoneSweeper.sweeperThread == null) {
-        tombstoneSweeper.sweeperThread = new Thread(LoggingThreadGroup.createThreadGroup("Destroyed Entries Processors",
-            logger), tombstoneSweeper);
-        tombstoneSweeper.sweeperThread.setDaemon(true);
-        String product = "GemFire";
-        if (tombstoneSweeper == this.replicatedTombstoneSweeper) {
-          tombstoneSweeper.sweeperThread.setName(product + " Garbage Collection Thread 1");
-        } else {
-          tombstoneSweeper.sweeperThread.setName(product + " Garbage Collection Thread 2");
-        }
-        tombstoneSweeper.sweeperThread.start();
-      }
-    }
-  }
-  
-    stopSweeper(this.replicatedTombstoneSweeper);
-    stopSweeper(this.nonReplicatedTombstoneSweeper);
+    this.replicatedTombstoneSweeper.stop();
+    this.nonReplicatedTombstoneSweeper.stop();
-  private void stopSweeper(TombstoneSweeper t) {
-    Thread sweeperThread;
-    synchronized(t) {
-      sweeperThread = t.sweeperThread;
-      t.isStopped = true;
-      if (sweeperThread != null) {
-        t.notifyAll();
-      }
-    }
-    try {
-      sweeperThread.join(100);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-    }
-    t.tombstones.clear();
-  }
-  
-  /**
+ /**
-    final Queue<Tombstone> tombstones;
+    private final Queue<Tombstone> tombstones;
-    final AtomicLong queueSize;
+    private final AtomicLong queueSize;
-    Thread sweeperThread;
+    private final Thread sweeperThread;
-    boolean batchMode;
-    /**
-     * this suspends batch expiration.  It is intended for administrative use
-     * so an operator can suspend the garbage-collection of tombstones for
-     * replicated/partitioned regions if a persistent member goes off line
-     */
-    volatile boolean batchExpirationSuspended;
+    private final boolean batchMode;
-    Tombstone currentTombstone;
+    private Tombstone currentTombstone;
-    final StoppableReentrantLock currentTombstoneLock;
+    private final StoppableReentrantLock currentTombstoneLock;
-    Set<Tombstone> expiredTombstones;
+    private Set<Tombstone> expiredTombstones;
+      this.batchMode = batchMode;
-        this.batchMode = true;
+      this.sweeperThread = new Thread(LoggingThreadGroup.createThreadGroup("Destroyed Entries Processors", logger), this);
+      this.sweeperThread.setDaemon(true);
+      String product = "GemFire";
+      String threadName = product + " Garbage Collection Thread " + (batchMode ? "1" : "2");
+      this.sweeperThread.setName(threadName);
-    
+
+  synchronized void start() {
+    this.sweeperThread.start();
+  }
+
+  synchronized void stop() {
+    this.isStopped = true;
+    if (this.sweeperThread != null) {
+      notifyAll();
+    }
+    try {
+      this.sweeperThread.join(100);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+    }
+    getQueue().clear();
+  }
-    /** stop tombstone removal for sweepers that have batchMode==true */
-    @SuppressWarnings("unused")
-    void suspendBatchExpiration() {
-      this.batchExpirationSuspended = true;
-    }
-    
-    
-    /** enables tombstone removal for sweepers that have batchMode==true */
-    @SuppressWarnings("unused")
-    void resumeBatchExpiration () {
-      if (this.batchExpirationSuspended) {
-        this.batchExpirationSuspended = false; // volatile write
-      }
-    }
-    
-      if ((!batchExpirationSuspended &&
-          (this.forceBatchExpiration || (this.expiredTombstones.size() >= EXPIRED_TOMBSTONE_LIMIT)))
-        || testHook_batchExpired != null) {
+      if (this.forceBatchExpiration 
+          || this.expiredTombstones.size() >= EXPIRED_TOMBSTONE_LIMIT
+          || testHook_batchExpired != null) {
-              for (Iterator<Tombstone> it = tombstones.iterator(); it.hasNext(); ) {
+              for (Iterator<Tombstone> it = getQueue().iterator(); it.hasNext(); ) {
