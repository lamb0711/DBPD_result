Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A <code>LonerDistributionManager</code> is a dm that never communicates
- * with anyone else.
+ * A <code>LonerDistributionManager</code> is a dm that never communicates with anyone else.
-  
-  
-  ////////////////////////  Constructors  ////////////////////////
+
+
+  //////////////////////// Constructors ////////////////////////
-   * @param system
-   *        The distributed system to which this distribution manager
-   *        will send messages.
+   * @param system The distributed system to which this distribution manager will send messages.
-  public LonerDistributionManager(InternalDistributedSystem system,
-                                  InternalLogWriter logger) {
+  public LonerDistributionManager(InternalDistributedSystem system, InternalLogWriter logger) {
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-  protected void shutdown() {
-  }
+  protected void shutdown() {}
-  /*static {
-    // Make the id a little unique
-    String host;
-    try {
-      host = InetAddress.getLocalHost().getCanonicalHostName();
-      MemberAttributes.setDefaults(65535,
-              org.apache.geode.internal.OSProcess.getId(),
-              DistributionManager.LONER_DM_TYPE,
-              MemberAttributes.parseRoles(system.getConfig().getRoles()));
-      id = new InternalDistributedMember(host, 65535); // noise value for port number
-
-    } catch (UnknownHostException ex) {
-      throw new InternalError(LocalizedStrings.LonerDistributionManager_CANNOT_RESOLVE_LOCAL_HOST_NAME_TO_AN_IP_ADDRESS.toLocalizedString());
-    }
-
-  }*/
+  /*
+   * static { // Make the id a little unique String host; try { host =
+   * InetAddress.getLocalHost().getCanonicalHostName(); MemberAttributes.setDefaults(65535,
+   * org.apache.geode.internal.OSProcess.getId(), DistributionManager.LONER_DM_TYPE,
+   * MemberAttributes.parseRoles(system.getConfig().getRoles())); id = new
+   * InternalDistributedMember(host, 65535); // noise value for port number
+   * 
+   * } catch (UnknownHostException ex) { throw new InternalError(LocalizedStrings.
+   * LonerDistributionManager_CANNOT_RESOLVE_LOCAL_HOST_NAME_TO_AN_IP_ADDRESS.toLocalizedString());
+   * }
+   * 
+   * }
+   */
-  private ConcurrentMap<InternalDistributedMember, InternalDistributedMember> canonicalIds = new ConcurrentHashMap();
+  private ConcurrentMap<InternalDistributedMember, InternalDistributedMember> canonicalIds =
+      new ConcurrentHashMap();
+
+
-  
+
-    InternalDistributedMember iid = (InternalDistributedMember)dmid;
-    InternalDistributedMember result = this.canonicalIds.putIfAbsent(iid,iid);
+    InternalDistributedMember iid = (InternalDistributedMember) dmid;
+    InternalDistributedMember result = this.canonicalIds.putIfAbsent(iid, iid);
+
+
-  
+
-  public void retainMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members, Version version) {
-    for (Iterator<InternalDistributedMember> it = members.iterator(); it.hasNext(); ) {
+  public void retainMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
+      Version version) {
+    for (Iterator<InternalDistributedMember> it = members.iterator(); it.hasNext();) {
-  
+
-  public void removeMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members, Version version) {
-    for (Iterator<InternalDistributedMember> it = members.iterator(); it.hasNext(); ) {
+  public void removeMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
+      Version version) {
+    for (Iterator<InternalDistributedMember> it = members.iterator(); it.hasNext();) {
-  
+
-    //return getOtherDistributionManagerIds();
+    // return getOtherDistributionManagerIds();
+
+
+
+
+
+
+
-      throw new RuntimeException(LocalizedStrings.LonerDistributionManager_LONER_TRIED_TO_SEND_MESSAGE_TO_0.toLocalizedString(message.getRecipientsDescription()));
+      throw new RuntimeException(
+          LocalizedStrings.LonerDistributionManager_LONER_TRIED_TO_SEND_MESSAGE_TO_0
+              .toLocalizedString(message.getRecipientsDescription()));
+
+
+
+
-  public void handleManagerDeparture(InternalDistributedMember p_id, 
-      boolean crashed, String reason) {}
+  public void handleManagerDeparture(InternalDistributedMember p_id, boolean crashed,
+      String reason) {}
+
+
+
+
+
+
+
-  public void close() {
-  }
+
+  public void close() {}
+
-  
+
-      DistributedMember member = (DistributedMember)members.iterator().next();
+      DistributedMember member = (DistributedMember) members.iterator().next();
-    throw new NoSuchElementException(LocalizedStrings.LonerDistributionManager_MEMBER_NOT_FOUND_IN_MEMBERSHIP_SET.toLocalizedString());
+    throw new NoSuchElementException(
+        LocalizedStrings.LonerDistributionManager_MEMBER_NOT_FOUND_IN_MEMBERSHIP_SET
+            .toLocalizedString());
-  public Set getAdminMemberSet(){ return Collections.EMPTY_SET; }
+  public Set getAdminMemberSet() {
+    return Collections.EMPTY_SET;
+  }
-    public long getSentMessages() {return 0;}
+    public long getSentMessages() {
+      return 0;
+    }
+
+
+
-    public long getSentCommitMessages() {return 0;}
+    public long getSentCommitMessages() {
+      return 0;
+    }
+
+
-    public long getCommitWaits() {return 0;}
+    public long getCommitWaits() {
+      return 0;
+    }
+
+
-    public long getSentMessagesTime() {return 0;}
+    public long getSentMessagesTime() {
+      return 0;
+    }
+
+
-    public long getBroadcastMessages() {return 0;}
+    public long getBroadcastMessages() {
+      return 0;
+    }
+
+
-    public long getBroadcastMessagesTime() {return 0;}
+    public long getBroadcastMessagesTime() {
+      return 0;
+    }
+
+
-    public long getReceivedMessages() {return 0;}
+    public long getReceivedMessages() {
+      return 0;
+    }
+
+
-    public long getReceivedBytes() {return 0;}
+    public long getReceivedBytes() {
+      return 0;
+    }
+
+
+
-    public long getProcessedMessages() {return 0;}
+    public long getProcessedMessages() {
+      return 0;
+    }
+
+
-    public long getProcessedMessagesTime() {return 0;}
+    public long getProcessedMessagesTime() {
+      return 0;
+    }
+
+
-    public long getMessageProcessingScheduleTime() {return 0;}
+    public long getMessageProcessingScheduleTime() {
+      return 0;
+    }
+
+
-    public int getOverflowQueueSize() {return 0;}
+    public int getOverflowQueueSize() {
+      return 0;
+    }
+
+
-    public int getNumProcessingThreads() {return 0;}
+    public int getNumProcessingThreads() {
+      return 0;
+    }
+
+
-    public int getNumSerialThreads() {return 0;}
+    public int getNumSerialThreads() {
+      return 0;
+    }
+
+
+
+
-    public long getUDPDispatchRequestTime() {return 0;};
+    public long getUDPDispatchRequestTime() {
+      return 0;
+    };
+
-    public long getReplyMessageTime() {return 0;}
+    public long getReplyMessageTime() {
+      return 0;
+    }
+
+
-    public long getDistributeMessageTime() {return 0;}
+    public long getDistributeMessageTime() {
+      return 0;
+    }
+
+
-    public int getNodes() {return 0;}
+    public int getNodes() {
+      return 0;
+    }
+
+
+
-    public int getReplyWaitsInProgress() {return 0;}
+    public int getReplyWaitsInProgress() {
+      return 0;
+    }
+
-    public int getReplyWaitsCompleted() {return 0;}
+    public int getReplyWaitsCompleted() {
+      return 0;
+    }
+
-    public long getReplyWaitTime() {return 0;}
+    public long getReplyWaitTime() {
+      return 0;
+    }
+
-    public long startReplyWait() {return 0;}
+    public long startReplyWait() {
+      return 0;
+    }
+
+
-    public void incReplyTimeouts() { }
+    public void incReplyTimeouts() {}
+
-    public long getReplyTimeouts() { return 0; }
+    public long getReplyTimeouts() {
+      return 0;
+    }
+
+
+
+
+
+
+
+
+
-    public int getSendersSU() { return 0; }
+    public int getSendersSU() {
+      return 0;
+    }
+
-    public long startSocketWrite(boolean sync) {return 0; }
+    public long startSocketWrite(boolean sync) {
+      return 0;
+    }
+
+
-    public long startSerialization() {return 0;}
+    public long startSerialization() {
+      return 0;
+    }
+
+
-    public long startDeserialization() {return 0;}
+    public long startDeserialization() {
+      return 0;
+    }
+
+
-    public long startMsgSerialization() {return 0;}
+    public long startMsgSerialization() {
+      return 0;
+    }
+
+
-    public long startMsgDeserialization() {return 0;}
+    public long startMsgDeserialization() {
+      return 0;
+    }
+
+
+
+
+
+
+
+
+
+
+
-    public int getMcastRetransmits() { return 0; }
+    public int getMcastRetransmits() {
+      return 0;
+    }
+
-    public int getMcastWrites() { return 0; }
+    public int getMcastWrites() {
+      return 0;
+    }
+
-    public int getMcastReads() { return 0; }
+    public int getMcastReads() {
+      return 0;
+    }
+
+
+
-    public int getAsyncSocketWritesInProgress() {return 0;}
+    public int getAsyncSocketWritesInProgress() {
+      return 0;
+    }
+
-    public int getAsyncSocketWrites() {return 0;}
+    public int getAsyncSocketWrites() {
+      return 0;
+    }
+
-    public int getAsyncSocketWriteRetries() {return 0;}
+    public int getAsyncSocketWriteRetries() {
+      return 0;
+    }
+
-    public long getAsyncSocketWriteBytes() {return 0;}
+    public long getAsyncSocketWriteBytes() {
+      return 0;
+    }
+
-    public long getAsyncSocketWriteTime() {return 0;}
+    public long getAsyncSocketWriteTime() {
+      return 0;
+    }
+
-    public int getAsyncQueues() {return 0;}
+    public int getAsyncQueues() {
+      return 0;
+    }
+
+
-    public int getAsyncQueueFlushesInProgress() {return 0;}
+    public int getAsyncQueueFlushesInProgress() {
+      return 0;
+    }
+
-    public int getAsyncQueueFlushesCompleted() {return 0;}
+    public int getAsyncQueueFlushesCompleted() {
+      return 0;
+    }
+
-    public long getAsyncQueueFlushTime() {return 0;}
+    public long getAsyncQueueFlushTime() {
+      return 0;
+    }
+
-    public long startAsyncQueueFlush() {return 0;}
+    public long startAsyncQueueFlush() {
+      return 0;
+    }
+
+
-    public int getAsyncQueueTimeouts() {return 0;}
+    public int getAsyncQueueTimeouts() {
+      return 0;
+    }
+
+
-    public int getAsyncQueueSizeExceeded() {return 0;}
+    public int getAsyncQueueSizeExceeded() {
+      return 0;
+    }
+
+
-    public int getAsyncDistributionTimeoutExceeded() {return 0;}
+    public int getAsyncDistributionTimeoutExceeded() {
+      return 0;
+    }
+
+
-    public long getAsyncQueueSize() {return 0;}
+    public long getAsyncQueueSize() {
+      return 0;
+    }
+
+
-    public long getAsyncQueuedMsgs() {return 0;}
+    public long getAsyncQueuedMsgs() {
+      return 0;
+    }
+
+
-    public long getAsyncDequeuedMsgs() {return 0;}
+    public long getAsyncDequeuedMsgs() {
+      return 0;
+    }
+
+
-    public long getAsyncConflatedMsgs() {return 0;}
+    public long getAsyncConflatedMsgs() {
+      return 0;
+    }
+
+
-    public int getAsyncThreads() {return 0;}
+    public int getAsyncThreads() {
+      return 0;
+    }
+
+
-    public int getAsyncThreadInProgress() {return 0;}
+    public int getAsyncThreadInProgress() {
+      return 0;
+    }
+
-    public int getAsyncThreadCompleted() {return 0;}
+    public int getAsyncThreadCompleted() {
+      return 0;
+    }
+
-    public long getAsyncThreadTime() {return 0;}
+    public long getAsyncThreadTime() {
+      return 0;
+    }
+
-    public long startAsyncThread() {return 0;}
+    public long startAsyncThread() {
+      return 0;
+    }
+
+
-    public long getAsyncQueueAddTime() {return 0;}
+    public long getAsyncQueueAddTime() {
+      return 0;
+    }
+
+
-    public long getAsyncQueueRemoveTime() {return 0;}
+    public long getAsyncQueueRemoveTime() {
+      return 0;
+    }
+
+
+
+
-    public long startSocketLock() {return 0;}
+    public long startSocketLock() {
+      return 0;
+    }
+
+
-    public long startBufferAcquire() {return 0;}
+    public long startBufferAcquire() {
+      return 0;
+    }
+
+
+
+
+
-    public int getElders() {return 0;}
+    public int getElders() {
+      return 0;
+    }
+
+
-    public int getInitialImageMessagesInFlight() {return 0;}
+    public int getInitialImageMessagesInFlight() {
+      return 0;
+    }
+
+
-    public int getInitialImageRequestsInProgress() {return 0;}
+    public int getInitialImageRequestsInProgress() {
+      return 0;
+    }
+
+
+
+
-    public long startPdxInstanceDeserialization() {return 0;}
+    public long startPdxInstanceDeserialization() {
+      return 0;
+    }
+
+
+
-    public void incThreadOwnedReceivers(long value, int dominoCount) {
+    public void incThreadOwnedReceivers(long value, int dominoCount) {}
+
+    @Override
+    public long getHeartbeatRequestsSent() {
+      return 0;
-    @Override
-    public long getHeartbeatRequestsSent() {return 0;}
+
+
-    public long getHeartbeatRequestsReceived() {return 0;}
+    public long getHeartbeatRequestsReceived() {
+      return 0;
+    }
+
+
-    public long getHeartbeatsSent() {return 0;}
+    public long getHeartbeatsSent() {
+      return 0;
+    }
+
+
-    public long getHeartbeatsReceived() {return 0;}
+    public long getHeartbeatsReceived() {
+      return 0;
+    }
+
+
-    public long getSuspectsSent() {return 0;}
+    public long getSuspectsSent() {
+      return 0;
+    }
+
+
-    public long getSuspectsReceived() {return 0;}
+    public long getSuspectsReceived() {
+      return 0;
+    }
+
+
-    public long getFinalCheckRequestsSent() {return 0;}
+    public long getFinalCheckRequestsSent() {
+      return 0;
+    }
+
+
-    public long getFinalCheckRequestsReceived() {return 0;}
+    public long getFinalCheckRequestsReceived() {
+      return 0;
+    }
+
+
-    public long getFinalCheckResponsesSent() {return 0;}
+    public long getFinalCheckResponsesSent() {
+      return 0;
+    }
+
+
-    public long getFinalCheckResponsesReceived() {return 0;}
+    public long getFinalCheckResponsesReceived() {
+      return 0;
+    }
+
-    @Override    
-    public long getTcpFinalCheckRequestsSent() {return 0;}
+
+    @Override
+    public long getTcpFinalCheckRequestsSent() {
+      return 0;
+    }
+
+
-    public long getTcpFinalCheckRequestsReceived() {return 0;}
+    public long getTcpFinalCheckRequestsReceived() {
+      return 0;
+    }
+
+
-    public long getTcpFinalCheckResponsesSent() {return 0;}
+    public long getTcpFinalCheckResponsesSent() {
+      return 0;
+    }
+
+
-    public long getTcpFinalCheckResponsesReceived() {return 0;}
+    public long getTcpFinalCheckResponsesReceived() {
+      return 0;
+    }
+
+
-    public long getUdpFinalCheckRequestsSent() {return 0;}
+    public long getUdpFinalCheckRequestsSent() {
+      return 0;
+    }
+
+
-    public long getUdpFinalCheckResponsesReceived() {return 0;}
+    public long getUdpFinalCheckResponsesReceived() {
+      return 0;
+    }
+
+
+
-    public void endUDPMsgEncryption(long start) {
-    }
+    public void endUDPMsgEncryption(long start) {}
+
+
-    public void endUDPMsgDecryption(long start) {
-    }
+    public void endUDPMsgDecryption(long start) {}
+
+
-    public void shutdown() {
-    }
+    public void shutdown() {}
-    public boolean awaitTermination(long timeout, TimeUnit unit)
-        throws InterruptedException {
+    public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
-    public <T> List<Future<T>> invokeAll(
-        Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
-        throws InterruptedException {
+    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout,
+        TimeUnit unit) throws InterruptedException {
-    public <T> T invokeAny(Collection<? extends Callable<T>> tasks,
-        long timeout, TimeUnit unit) throws InterruptedException,
-        ExecutionException, TimeoutException {
+    public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
+        throws InterruptedException, ExecutionException, TimeoutException {
-  
+
-    
+
-    
+
-    public T get(long timeout, TimeUnit unit) throws InterruptedException,
-        ExecutionException, TimeoutException {
+    public T get(long timeout, TimeUnit unit)
+        throws InterruptedException, ExecutionException, TimeoutException {
-  
+
-  //private static final int CHARS_32KB = 16384;
+  // private static final int CHARS_32KB = 16384;
-        String hex = Integer.toHexString((int)(time & 0xff));
+        String hex = Integer.toHexString((int) (time & 0xff));
-        dac = new DurableClientAttributes(config.getDurableClientId(), config
-            .getDurableClientTimeout());
+        dac = new DurableClientAttributes(config.getDurableClientId(),
+            config.getDurableClientTimeout());
-      result = new InternalDistributedMember(host, lonerPort, name, uniqueString, DistributionManager.LONER_DM_TYPE,
+      result = new InternalDistributedMember(host, lonerPort, name, uniqueString,
+          DistributionManager.LONER_DM_TYPE,
-      throw new InternalGemFireError(LocalizedStrings.LonerDistributionManager_CANNOT_RESOLVE_LOCAL_HOST_NAME_TO_AN_IP_ADDRESS.toLocalizedString());
+      throw new InternalGemFireError(
+          LocalizedStrings.LonerDistributionManager_CANNOT_RESOLVE_LOCAL_HOST_NAME_TO_AN_IP_ADDRESS
+              .toLocalizedString());
-   * update the loner port with an integer that may be more unique than the 
-   * default port (zero).  This updates the ID in place and establishes new
-   * default settings for the manufacture of new IDs.
+   * update the loner port with an integer that may be more unique than the default port (zero).
+   * This updates the ID in place and establishes new default settings for the manufacture of new
+   * IDs.
-        new Object[]{this.lonerPort, newPort, getId()});
+        new Object[] {this.lonerPort, newPort, getId()});
+
-  public Set putOutgoing(DistributionMessage msg)
-  {
+  public Set putOutgoing(DistributionMessage msg) {
-  public void removeUnfinishedStartup(InternalDistributedMember m, boolean departed) {
-  }
+  public void removeUnfinishedStartup(InternalDistributedMember m, boolean departed) {}
-  public void setUnfinishedStartups(Collection s) {
-  }
+  public void setUnfinishedStartups(Collection s) {}
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  public void setRootCause(Throwable t) {
-  }
+  public void setRootCause(Throwable t) {}
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
+   * 
-  public void acquireGIIPermitUninterruptibly() {
-  }
+  public void acquireGIIPermitUninterruptibly() {}
-  public void releaseGIIPermit() {
-  }
+  public void releaseGIIPermit() {}
-    return system.getConfig().getEnforceUniqueHost() || system.getConfig().getRedundancyZone() != null;
+    return system.getConfig().getEnforceUniqueHost()
+        || system.getConfig().getRedundancyZone() != null;
-                                     InternalDistributedMember member2) {
+      InternalDistributedMember member2) {
-  
+
-  
+
-      return Collections.singleton((DistributedMember)getDistributionManagerId());
+      return Collections.singleton((DistributedMember) getDistributionManagerId());
-  public void addHostedLocators(InternalDistributedMember member, Collection<String> locators, boolean isSharedConfigurationEnabled) {
+  public void addHostedLocators(InternalDistributedMember member, Collection<String> locators,
+      boolean isSharedConfigurationEnabled) {
-  
+
-  
+
-    //return false for loner
+    // return false for loner
