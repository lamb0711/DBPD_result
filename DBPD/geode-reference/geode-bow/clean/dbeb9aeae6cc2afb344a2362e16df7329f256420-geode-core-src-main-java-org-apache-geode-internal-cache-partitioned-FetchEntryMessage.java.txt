Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * {@link org.apache.geode.cache.Region#getEntry(Object)}operation. The
- * reply is sent in a {@link 
- * org.apache.geode.internal.cache.partitioned.FetchEntryMessage.FetchEntryReplyMessage}.
+ * {@link org.apache.geode.cache.Region#getEntry(Object)}operation. The reply is sent in a
+ * {@link org.apache.geode.internal.cache.partitioned.FetchEntryMessage.FetchEntryReplyMessage}.
-public final class FetchEntryMessage extends PartitionMessage
-  {
+public final class FetchEntryMessage extends PartitionMessage {
-  
+
-  public FetchEntryMessage() {
-  }
+  public FetchEntryMessage() {}
-   * Sends a PartitionedRegion
-   * {@link org.apache.geode.cache.Region#getEntry(Object)} message
+   * Sends a PartitionedRegion {@link org.apache.geode.cache.Region#getEntry(Object)} message
-   * @param recipient
-   *          the member that the getEntry message is sent to
-   * @param r
-   *          the PartitionedRegion for which getEntry was performed upon
-   * @param key
-   *          the object to which the value should be feteched
+   * @param recipient the member that the getEntry message is sent to
+   * @param r the PartitionedRegion for which getEntry was performed upon
+   * @param key the object to which the value should be feteched
-   * @return the processor used to fetch the returned value associated with the
-   *         key
-   * @throws ForceReattemptException
-   *           if the peer is no longer available
+   * @return the processor used to fetch the returned value associated with the key
+   * @throws ForceReattemptException if the peer is no longer available
-  public static FetchEntryResponse send(InternalDistributedMember recipient,
-      PartitionedRegion r, final Object key, boolean access)
-      throws ForceReattemptException
-  {
+  public static FetchEntryResponse send(InternalDistributedMember recipient, PartitionedRegion r,
+      final Object key, boolean access) throws ForceReattemptException {
-    FetchEntryResponse p = new FetchEntryResponse(r.getSystem(), Collections
-        .singleton(recipient), r, key);
-    FetchEntryMessage m = new FetchEntryMessage(recipient, r.getPRId(), p, key,
-        access);
+    FetchEntryResponse p =
+        new FetchEntryResponse(r.getSystem(), Collections.singleton(recipient), r, key);
+    FetchEntryMessage m = new FetchEntryMessage(recipient, r.getPRId(), p, key, access);
-      throw new ForceReattemptException(LocalizedStrings.FetchEntryMessage_FAILED_SENDING_0.toLocalizedString(m));
+      throw new ForceReattemptException(
+          LocalizedStrings.FetchEntryMessage_FAILED_SENDING_0.toLocalizedString(m));
-  public FetchEntryMessage(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public FetchEntryMessage(DataInput in) throws IOException, ClassNotFoundException {
-//  final public int getProcessorType()
-//  {
-//    return DistributionManager.PARTITIONED_REGION_EXECUTOR;
-//  }
+  // final public int getProcessorType()
+  // {
+  // return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+  // }
-  protected final boolean operateOnPartitionedRegion(DistributionManager dm,
-      PartitionedRegion r, long startTime) throws ForceReattemptException
-  {
+  protected final boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion r,
+      long startTime) throws ForceReattemptException {
-        val = (EntrySnapshot)r.getDataView().getEntryOnRemote(keyInfo, r, true);
-        r.getPrStats().endPartitionMessagesProcessing(startTime); 
+        val = (EntrySnapshot) r.getDataView().getEntryOnRemote(keyInfo, r, true);
+        r.getPrStats().endPartitionMessagesProcessing(startTime);
-      }
-      catch (TransactionException tex) {
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, 
-            new ReplyException(tex));
-      }
-      catch (PRLocallyDestroyedException pde) {
+      } catch (TransactionException tex) {
-            new ReplyException(new ForceReattemptException(LocalizedStrings.FetchEntryMessage_ENCOUNTERED_PRLOCALLYDESTROYED.toLocalizedString(),
-                    pde)));
-      }
-      catch (EntryNotFoundException enfe) {
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, 
-            new ReplyException(LocalizedStrings.FetchEntryMessage_ENTRY_NOT_FOUND.toLocalizedString(), enfe));
-      }
-      catch (PrimaryBucketException pbe) {
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, 
+            new ReplyException(tex));
+      } catch (PRLocallyDestroyedException pde) {
+        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm,
+            new ReplyException(new ForceReattemptException(
+                LocalizedStrings.FetchEntryMessage_ENCOUNTERED_PRLOCALLYDESTROYED
+                    .toLocalizedString(),
+                pde)));
+      } catch (EntryNotFoundException enfe) {
+        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, new ReplyException(
+            LocalizedStrings.FetchEntryMessage_ENTRY_NOT_FOUND.toLocalizedString(), enfe));
+      } catch (PrimaryBucketException pbe) {
+        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm,
-      }
-      catch (ForceReattemptException pbe) {
+      } catch (ForceReattemptException pbe) {
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, 
+        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm,
-        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm,
-            new ReplyException(e));
+        FetchEntryReplyMessage.send(getSender(), getProcessorId(), null, dm, new ReplyException(e));
-    }
-    else {
-      throw new InternalGemFireError(LocalizedStrings.FetchEntryMessage_FETCHENTRYMESSAGE_MESSAGE_SENT_TO_WRONG_MEMBER.toLocalizedString());
+    } else {
+      throw new InternalGemFireError(
+          LocalizedStrings.FetchEntryMessage_FETCHENTRYMESSAGE_MESSAGE_SENT_TO_WRONG_MEMBER
+              .toLocalizedString());
-  
+
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  protected void setBooleans(short s, DataInput in) throws IOException,
-      ClassNotFoundException {
+  protected void setBooleans(short s, DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-    if (this.access) s |= HAS_ACCESS;
+    if (this.access)
+      s |= HAS_ACCESS;
-  public static final class FetchEntryReplyMessage extends ReplyMessage
-   {
+  public static final class FetchEntryReplyMessage extends ReplyMessage {
-    public FetchEntryReplyMessage() {
-    }
+    public FetchEntryReplyMessage() {}
-    public FetchEntryReplyMessage(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public FetchEntryReplyMessage(DataInput in) throws IOException, ClassNotFoundException {
-    private FetchEntryReplyMessage(int processorId,
-        EntrySnapshot value, ReplyException re) {
+    private FetchEntryReplyMessage(int processorId, EntrySnapshot value, ReplyException re) {
-    public static void send(InternalDistributedMember recipient,
-        int processorId, EntrySnapshot value, DM dm, ReplyException re)
-    {
-      Assert.assertTrue(recipient != null,
-          "FetchEntryReplyMessage NULL recipient");
+    public static void send(InternalDistributedMember recipient, int processorId,
+        EntrySnapshot value, DM dm, ReplyException re) {
+      Assert.assertTrue(recipient != null, "FetchEntryReplyMessage NULL recipient");
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, final ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, final ReplyProcessor21 processor) {
-        logger.trace(LogMarker.DM, "FetchEntryReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "FetchEntryReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-    public EntrySnapshot getValue()
-    {
+    public EntrySnapshot getValue() {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-      }
-      else {
+      } else {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-        FetchEntryResponse processor = (FetchEntryResponse)ReplyProcessor21
-            .getProcessor(this.processorId);
+        FetchEntryResponse processor =
+            (FetchEntryResponse) ReplyProcessor21.getProcessor(this.processorId);
-        this.value = new EntrySnapshot(in,processor.partitionedRegion);
+        this.value = new EntrySnapshot(in, processor.partitionedRegion);
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.partitioned.FetchEntryMessage.FetchEntryReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.partitioned.FetchEntryMessage.FetchEntryReplyMessage}
-  public static class FetchEntryResponse extends PartitionResponse
-   {
+  public static class FetchEntryResponse extends PartitionResponse {
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-          FetchEntryReplyMessage reply = (FetchEntryReplyMessage)msg;
+          FetchEntryReplyMessage reply = (FetchEntryReplyMessage) msg;
-      }
-      finally {
+      } finally {
-    public EntrySnapshot waitForResponse() 
-        throws EntryNotFoundException, ForceReattemptException {
+    public EntrySnapshot waitForResponse() throws EntryNotFoundException, ForceReattemptException {
-      }
-      catch (ForceReattemptException e) {
+      } catch (ForceReattemptException e) {
-      }
-      catch (EntryNotFoundException e) {
+      } catch (EntryNotFoundException e) {
-      }
-      catch (TransactionException e) {
+      } catch (TransactionException e) {
-      }
-      catch (CacheException ce) {
+      } catch (CacheException ce) {
-        throw new ForceReattemptException(LocalizedStrings.FetchEntryMessage_FETCHENTRYRESPONSE_GOT_REMOTE_CACHEEXCEPTION_FORCING_REATTEMPT.toLocalizedString(), ce);
+        throw new ForceReattemptException(
+            LocalizedStrings.FetchEntryMessage_FETCHENTRYRESPONSE_GOT_REMOTE_CACHEEXCEPTION_FORCING_REATTEMPT
+                .toLocalizedString(),
+            ce);
