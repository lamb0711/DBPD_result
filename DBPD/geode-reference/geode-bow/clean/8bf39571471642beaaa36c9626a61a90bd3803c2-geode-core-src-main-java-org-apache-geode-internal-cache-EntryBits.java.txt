Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final byte WITH_VERSIONS = (byte)0x80; // oplog entry contains versions 
+  private static final byte WITH_VERSIONS = (byte) 0x80; // oplog entry contains versions
-  
+
-  
+
-  
+
-  
+
+
-  
+
-    return (b & (INVALID|LOCAL_INVALID)) != 0;
+    return (b & (INVALID | LOCAL_INVALID)) != 0;
-  
+
-   * If it is not invalid and not local_invalid
-   * then we need a value.
+   * If it is not invalid and not local_invalid then we need a value.
-    return (b & (INVALID|LOCAL_INVALID|TOMBSTONE)) == 0;
+    return (b & (INVALID | LOCAL_INVALID | TOMBSTONE)) == 0;
-    return isSerialized ? (byte)(b | SERIALIZED) : (byte)(b & ~SERIALIZED);
+    return isSerialized ? (byte) (b | SERIALIZED) : (byte) (b & ~SERIALIZED);
-  
+
-    return isInvalid ? (byte)(b | INVALID) : (byte)(b & ~INVALID);
+    return isInvalid ? (byte) (b | INVALID) : (byte) (b & ~INVALID);
-  
+
-    return isLocalInvalid ? (byte)(b | LOCAL_INVALID) : (byte)(b & ~LOCAL_INVALID);
+    return isLocalInvalid ? (byte) (b | LOCAL_INVALID) : (byte) (b & ~LOCAL_INVALID);
-  
+
-    return isTombstone ? (byte)(b | TOMBSTONE) : (byte)(b & ~TOMBSTONE);
+    return isTombstone ? (byte) (b | TOMBSTONE) : (byte) (b & ~TOMBSTONE);
-    return isWithVersions ? (byte)(b | WITH_VERSIONS) : (byte)(b & ~WITH_VERSIONS);
+    return isWithVersions ? (byte) (b | WITH_VERSIONS) : (byte) (b & ~WITH_VERSIONS);
-    return isRecoveredFromDisk ? (byte)(b | RECOVERED_FROM_DISK) : (byte)(b & ~RECOVERED_FROM_DISK);
+    return isRecoveredFromDisk ? (byte) (b | RECOVERED_FROM_DISK)
+        : (byte) (b & ~RECOVERED_FROM_DISK);
-    return isPendingAsync ? (byte)(b | PENDING_ASYNC) : (byte)(b & ~PENDING_ASYNC);
+    return isPendingAsync ? (byte) (b | PENDING_ASYNC) : (byte) (b & ~PENDING_ASYNC);
+
-    return (byte)(b & (SERIALIZED|INVALID|LOCAL_INVALID|TOMBSTONE|WITH_VERSIONS));
+    return (byte) (b & (SERIALIZED | INVALID | LOCAL_INVALID | TOMBSTONE | WITH_VERSIONS));
