Merge branch 'develop' of https://github.com/apache/geode into feature/GEODE-4528

+import org.apache.geode.internal.cache.InternalCache;
+  private final InternalCache cache;
+  private boolean testingQueryMonitor = false;
-  public QueryMonitor(long maxQueryExecutionTime) {
+  public QueryMonitor(InternalCache cache, long maxQueryExecutionTime) {
+    this.cache = cache;
-    if (GemFireCacheImpl.getInstance() != null
-        && GemFireCacheImpl.getInstance().testMaxQueryExecutionTime > 0) {
+    if (cache != null && testingQueryMonitor) {
-      // START - DUnit Test purpose.
-      if (GemFireCacheImpl.getInstance() != null
-          && GemFireCacheImpl.getInstance().testMaxQueryExecutionTime > 0) {
-        long maxTimeSet = GemFireCacheImpl.getInstance().testMaxQueryExecutionTime;
-        QueryThreadTask queryTask = (QueryThreadTask) queryThreads.peek();
-
-        long currentTime = System.currentTimeMillis();
-
-        // This is to check if the QueryMonitoring thread slept longer than the expected time.
-        // Its seen that in some cases based on OS thread scheduling the thread can sleep much
-        // longer than the specified time.
-        if (queryTask != null) {
-          if (currentTime - queryTask.StartTime > maxTimeSet) {
-            // The sleep() is unpredictable.
-            testException = new QueryExecutionTimeoutException(
-                "The QueryMonitor thread may be sleeping longer than"
-                    + " the set sleep time. This will happen as the sleep is based on OS thread scheduling,"
-                    + " verify the time spent by the executor thread.");
-          }
-        }
-      }
-      // END - DUnit Test purpose.
-
-  public static void setLowMemory(boolean lowMemory, long usedBytes) {
-    if (GemFireCacheImpl.getInstance() != null
-        && !GemFireCacheImpl.getInstance().isQueryMonitorDisabledForLowMemory()) {
+  public void setLowMemory(boolean lowMemory, long usedBytes) {
+    if (cache != null && !cache.isQueryMonitorDisabledForLowMemory()) {
