Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A logger is used to record messages and events.  Each entry has a
- * given level associated with it.  There are a number of convenience
- * methods for logging events.  Events with a level above a certain
- * are written to <code>System.err</code>.  The default level is
- * INFO
+ * A logger is used to record messages and events. Each entry has a given level associated with it.
+ * There are a number of convenience methods for logging events. Events with a level above a certain
+ * are written to <code>System.err</code>. The default level is INFO
-  /** The maximum level at which messages are logged.  Message level
-   * lower than this value will be ignored. */
+  /**
+   * The maximum level at which messages are logged. Message level lower than this value will be
+   * ignored.
+   */
-    if(prop != null) {
+    if (prop != null) {
-    this.handlers.add(new StreamHandler(System.err, 
-                                        new SimpleFormatter()));
+    this.handlers.add(new StreamHandler(System.err, new SimpleFormatter()));
-    if(logger == null) {
+    if (logger == null) {
-//    Assert.assertTrue(logger != null); (cannot be null)
-    return(logger);
+    // Assert.assertTrue(logger != null); (cannot be null)
+    return (logger);
-    return((Handler[]) this.handlers.toArray(new Handler[0]));
+    return ((Handler[]) this.handlers.toArray(new Handler[0]));
-   * Returns the log level specifying which messages will be logged by
-   * this logger.
+   * Returns the log level specifying which messages will be logged by this logger.
-    return(this.level);
+    return (this.level);
-   * Sets the log level specifying which messages will be logged by
-   * this logger.
+   * Sets the log level specifying which messages will be logged by this logger.
-   * Check if a message of the given level would actually be logged by
-   * this logger.
+   * Check if a message of the given level would actually be logged by this logger.
-    if(msgLevel.equals(Level.ALL)) {
+    if (msgLevel.equals(Level.ALL)) {
-      return(true);
+      return (true);
-      return(msgLevel.intValue() >= this.level.intValue());
+      return (msgLevel.intValue() >= this.level.intValue());
-    if(!isLoggable(record.getLevel())) {
+    if (!isLoggable(record.getLevel())) {
-    if(DEBUG) {
+    if (DEBUG) {
-    while(iter.hasNext()) {
+    while (iter.hasNext()) {
-  public synchronized void config(String sourceClass, 
-                                  String sourceMethod, String msg) {
+  public synchronized void config(String sourceClass, String sourceMethod, String msg) {
-   * Log a CONFIG message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a CONFIG message, specifying source class and method, with an array of object arguments.
-  public synchronized void config(String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void config(String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-  public synchronized void entering(String sourceClass, String sourceMethod,
-                       Object[] params) {
+  public synchronized void entering(String sourceClass, String sourceMethod, Object[] params) {
-  public synchronized void exiting(String sourceClass, String sourceMethod,
-                       Object[] params) {
+  public synchronized void exiting(String sourceClass, String sourceMethod, Object[] params) {
-  
+
-  public synchronized void fine(String sourceClass, String sourceMethod, 
-                     String msg) {
+  public synchronized void fine(String sourceClass, String sourceMethod, String msg) {
-   * Log a FINE message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a FINE message, specifying source class and method, with an array of object arguments.
-  public synchronized void fine(String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void fine(String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-  public synchronized void finer(String sourceClass, String sourceMethod, 
-                     String msg) {
+  public synchronized void finer(String sourceClass, String sourceMethod, String msg) {
-   * Log a FINER message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a FINER message, specifying source class and method, with an array of object arguments.
-  public synchronized void finer(String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void finer(String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-  public synchronized void finest(String sourceClass, String sourceMethod, 
-                     String msg) {
+  public synchronized void finest(String sourceClass, String sourceMethod, String msg) {
-   * Log a FINEST message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a FINEST message, specifying source class and method, with an array of object arguments.
-  public synchronized void finest(String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void finest(String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-  public synchronized void info(String sourceClass, String sourceMethod, 
-                     String msg) {
+  public synchronized void info(String sourceClass, String sourceMethod, String msg) {
-   * Log a INFO message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a INFO message, specifying source class and method, with an array of object arguments.
-  public synchronized void info(String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void info(String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-   * Log a  message, with an array of object arguments.
+   * Log a message, with an array of object arguments.
-   * Log a  message, specifying source class and method.
+   * Log a message, specifying source class and method.
-  public synchronized void log(Level msgLevel, String sourceClass, String sourceMethod, 
-                     String msg) {
+  public synchronized void log(Level msgLevel, String sourceClass, String sourceMethod,
+      String msg) {
-   * Log a  message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a message, specifying source class and method, with an array of object arguments.
-  public synchronized void log(Level msgLevel, String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void log(Level msgLevel, String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-   * Log a message, specifying source class and method, with
-   * associated Throwable information.
+   * Log a message, specifying source class and method, with associated Throwable information.
-  public synchronized void log(Level msgLevel, String sourceClass,
-                  String sourceMethod, String msg, Throwable thrown) {
+  public synchronized void log(Level msgLevel, String sourceClass, String sourceMethod, String msg,
+      Throwable thrown) {
-  public synchronized void severe(String sourceClass, String sourceMethod, 
-                     String msg) {
+  public synchronized void severe(String sourceClass, String sourceMethod, String msg) {
-   * Log a SEVERE message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a SEVERE message, specifying source class and method, with an array of object arguments.
-  public synchronized void severe(String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void severe(String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-   * Log throwing an exception.  The logging is done using the FINER
-   * level. 
+   * Log throwing an exception. The logging is done using the FINER level.
-  public synchronized void throwing(String sourceClass, String sourceMethod,
-                       Throwable thrown) {
+  public synchronized void throwing(String sourceClass, String sourceMethod, Throwable thrown) {
-  public synchronized void warning(String sourceClass, String sourceMethod, 
-                     String msg) {
+  public synchronized void warning(String sourceClass, String sourceMethod, String msg) {
-   * Log a WARNING message, specifying source class and method, with an
-   * array of object arguments.
+   * Log a WARNING message, specifying source class and method, with an array of object arguments.
-  public synchronized void warning(String sourceClass, String sourceMethod,
-                     String msg, Object[] params) {
+  public synchronized void warning(String sourceClass, String sourceMethod, String msg,
+      Object[] params) {
-   * Formats a message.  Takes special care when invoking the
-   * toString() method of objects that might cause NPEs.
+   * Formats a message. Takes special care when invoking the toString() method of objects that might
+   * cause NPEs.
-    return org.apache.persistence.admin.Logger.format( format, objs );
+    return org.apache.persistence.admin.Logger.format(format, objs);
