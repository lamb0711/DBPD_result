GEODE-2183: Region.query now allows full syntax as a predicate on server

+import org.apache.geode.cache.query.QueryInvalidException;
-      predicate = predicate.trim();
+      queryString = constructRegionQueryString(predicate.trim());
-      // Compare the query patterns to the 'predicate'. If one matches,
-      // send it as is to the server
-      boolean matches = false;
-      for (int i = 0; i < QUERY_PATTERNS.length; i++) {
-        if (QUERY_PATTERNS[i].matcher(predicate).matches()) {
-          matches = true;
-          break;
-        }
-      }
-      if (matches) {
-        queryString = predicate;
-      } else {
-        queryString = "select * from " + getFullPath() + " this where " + predicate;
-      }
+      Object[] params = new Object[0];
-      String queryStr = "select * from " + getFullPath() + " this where " + predicate;
+      String queryStr = constructRegionQueryString(predicate.trim());
-      results = (SelectResults) query.execute(new Object[0]);
+      if (query.getRegionsInQuery(params).size() != 1) {
+        throw new QueryInvalidException(
+            "Prevent multiple region query from being executed through region.query()");
+      }
+      results = (SelectResults) query.execute(params);
+  private String constructRegionQueryString(final String predicate) throws QueryInvalidException {
+    final String queryString;// Compare the query patterns to the 'predicate'. If one matches,
+    // send it as is to the server
+    boolean matches = false;
+    for (int i = 0; i < QUERY_PATTERNS.length; i++) {
+      if (QUERY_PATTERNS[i].matcher(predicate).matches()) {
+        if (!predicate.contains(getName())) {
+          throw new QueryInvalidException(
+              "Should not execute region.query with a different region in the from clause: "
+                  + getName() + " was not present in:" + predicate);
+        }
+        matches = true;
+        break;
+      }
+    }
+    if (matches) {
+      queryString = predicate;
+    } else {
+      queryString = "select * from " + getFullPath() + " this where " + predicate;
+    }
+    return queryString;
+  }
+
