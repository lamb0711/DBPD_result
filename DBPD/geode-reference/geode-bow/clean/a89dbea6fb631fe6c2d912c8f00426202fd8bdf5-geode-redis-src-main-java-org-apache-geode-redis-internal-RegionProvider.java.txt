GEODE-8295: refactor GeodeRedisServer (#5289)

* removed main thread from GeodeRedisServer
* removed NamedThreadFactory in favor of geode's LoggingThreadFactory.
* now uses LoggingExecutors instead of Executors.
* removed logLevel since it is configured by gemfire
* A cache is now passed to the GeodeRedisServer constructor; it no longer creates its own
* region initialization now done in RegionProvider
* extracted passive expiration code
* extracted netty server code
* changed passive expiration to use scheduleWithFixedDelay

+import org.apache.geode.cache.RegionShortcut;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.InternalRegionFactory;
+  /**
+   * The name of the region that holds data stored in redis.
+   */
+  private static final String REDIS_DATA_REGION = "__REDIS_DATA";
+  private static final String REDIS_CONFIG_REGION = "__REDIS_CONFIG";
-  public RegionProvider(Region<ByteArrayWrapper, RedisData> dataRegion,
-      Region<String, Object> configRegion) {
-    this.dataRegion = dataRegion;
-    this.configRegion = configRegion;
+  public RegionProvider(InternalCache cache) {
+
+    InternalRegionFactory<ByteArrayWrapper, RedisData> redisDataRegionFactory =
+        cache.createInternalRegionFactory(RegionShortcut.PARTITION_REDUNDANT);
+    redisDataRegionFactory.setInternalRegion(true).setIsUsedForMetaRegion(true);
+    dataRegion = redisDataRegionFactory.create(REDIS_DATA_REGION);
+
+    InternalRegionFactory<String, Object> redisConfigRegionFactory =
+        cache.createInternalRegionFactory(RegionShortcut.REPLICATE);
+    redisConfigRegionFactory.setInternalRegion(true).setIsUsedForMetaRegion(true);
+    configRegion = redisConfigRegionFactory.create(REDIS_CONFIG_REGION);
