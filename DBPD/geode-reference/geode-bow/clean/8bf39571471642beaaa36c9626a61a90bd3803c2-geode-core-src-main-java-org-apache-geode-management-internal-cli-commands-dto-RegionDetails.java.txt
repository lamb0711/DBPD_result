Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-    nameToDisplayName.put("name",        "Name");
-    nameToDisplayName.put("path",        "Path");
+    nameToDisplayName.put("name", "Name");
+    nameToDisplayName.put("path", "Path");
-    nameToDisplayName.put("persistent",  "Is Persistent");
-    nameToDisplayName.put("groups",      "Group(s)");
-    nameToDisplayName.put("regionAttributesInfo",    "Region Attributes");
+    nameToDisplayName.put("persistent", "Is Persistent");
+    nameToDisplayName.put("groups", "Group(s)");
+    nameToDisplayName.put("regionAttributesInfo", "Region Attributes");
-  
-  private String   name;
-  private String   path;
-  private boolean  isPartitioned;
-  private boolean  isPersistent;
+
+  private String name;
+  private String path;
+  private boolean isPartitioned;
+  private boolean isPersistent;
-  
+
-  
+
-  
-  private String[] fieldsToSkipOnUI;   
-  
+
+  private String[] fieldsToSkipOnUI;
+
+
+
+
+
+
+
+
+
+
+
+
+
-  public void setGroups(String ... groups) {
+
+  public void setGroups(String... groups) {
-  
-  
+
+
+
-  
+
-  public void setFieldsToSkipOnUI(String ... fieldsToSkipOnUI) {
+  public void setFieldsToSkipOnUI(String... fieldsToSkipOnUI) {
-  
+
-    this.path =  JsonUtil.getString(objectStateAsjson, "path");
-    this.isPartitioned = JsonUtil.getBoolean(objectStateAsjson, "partitioned"); // NOTE: no 'is' in names
+    this.path = JsonUtil.getString(objectStateAsjson, "path");
+    this.isPartitioned = JsonUtil.getBoolean(objectStateAsjson, "partitioned"); // NOTE: no 'is' in
+                                                                                // names
-      this.regionAttributesInfo.fromJson(JsonUtil.getJSONObject(objectStateAsjson, "regionAttributesInfo"));
+      this.regionAttributesInfo
+          .fromJson(JsonUtil.getJSONObject(objectStateAsjson, "regionAttributesInfo"));
-    
-    List<CliJsonSerializable> retrievedList = JsonUtil.getList(objectStateAsjson, "regionMemberDetailsList");
+
+    List<CliJsonSerializable> retrievedList =
+        JsonUtil.getList(objectStateAsjson, "regionMemberDetailsList");
-    for (int i = 0; i < retrievedList.size(); i++) { // What's the better way? 
+    for (int i = 0; i < retrievedList.size(); i++) { // What's the better way?
-  
+
-    result = prime
-        * result
-        + ((regionAttributesInfo == null) ? 0 : regionAttributesInfo.hashCode());
-    result = prime
-        * result
-        + ((regionMemberDetailsList == null) ? 0 : regionMemberDetailsList
-            .hashCode());
+    result =
+        prime * result + ((regionAttributesInfo == null) ? 0 : regionAttributesInfo.hashCode());
+    result = prime * result
+        + ((regionMemberDetailsList == null) ? 0 : regionMemberDetailsList.hashCode());
+
-  
-  private boolean areMemberDetailsSame(List<RegionMemberDetails> mine, List<RegionMemberDetails> other) {
-    if (other != null && other.size() == mine.size()) {    
+
+  private boolean areMemberDetailsSame(List<RegionMemberDetails> mine,
+      List<RegionMemberDetails> other) {
+    if (other != null && other.size() == mine.size()) {
-        if (! mine.get(i).equals(other.get(i))) {
+        if (!mine.get(i).equals(other.get(i))) {
-    }    
+    }
-  
+
