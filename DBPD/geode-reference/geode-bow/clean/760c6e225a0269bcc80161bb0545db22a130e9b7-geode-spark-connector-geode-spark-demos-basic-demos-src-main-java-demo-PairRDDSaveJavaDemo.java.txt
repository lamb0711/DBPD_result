GEODE-1244: Package, directory, project and file rename for geode-spark-connector

-import io.pivotal.gemfire.spark.connector.GemFireConnectionConf;
+import io.pivotal.geode.spark.connector.GeodeConnectionConf;
-import static io.pivotal.gemfire.spark.connector.javaapi.GemFireJavaUtil.*;
+import static io.pivotal.geode.spark.connector.javaapi.GeodeJavaUtil.*;
- * This Spark application demonstrates how to save a RDD to GemFire using GemFire Spark 
+ * This Spark application demonstrates how to save a RDD to Geode using Geode Spark
- * In order to run it, you will need to start GemFire cluster, and create the following region
+ * In order to run it, you will need to start Geode cluster, and create the following region
- * should be generated under gemfire-spark-demos/basic-demos/target/scala-2.10/. 
+ * should be generated under geode-spark-demos/basic-demos/target/scala-2.10/.
- * Verify the data was saved to GemFire with GFSH:
+ * Verify the data was saved to Geode with GFSH:
-    conf.set(GemFireLocatorPropKey, argv[0]);
+    conf.set(GeodeLocatorPropKey, argv[0]);
-    GemFireConnectionConf connConf = GemFireConnectionConf.apply(conf);
+    GeodeConnectionConf connConf = GeodeConnectionConf.apply(conf);
-    javaFunctions(rdd1).saveToGemfire("str_str_region", connConf);
+    javaFunctions(rdd1).saveToGeode("str_str_region", connConf);
-    javaFunctions(toJavaPairRDD(rdd2)).saveToGemfire("str_str_region", connConf);
+    javaFunctions(toJavaPairRDD(rdd2)).saveToGeode("str_str_region", connConf);
