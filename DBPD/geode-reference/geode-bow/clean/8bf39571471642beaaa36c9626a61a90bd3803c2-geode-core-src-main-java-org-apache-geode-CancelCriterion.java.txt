Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Creators of services or threads should implement a subclass of CancelCriterion,
- * and implement the two methods - cancelInProgress, and generateCancelledException(e).
+ * Creators of services or threads should implement a subclass of CancelCriterion, and implement the
+ * two methods - cancelInProgress, and generateCancelledException(e).
- * {@link #checkCancelInProgress(Throwable)}. Generally the pattern is to check
- * before performing an operation, check if the service is canceled before propgrating 
- * an exception futher up the stack, and check for cancelation inside a long loop.
- * Eg.
+ * {@link #checkCancelInProgress(Throwable)}. Generally the pattern is to check before performing an
+ * operation, check if the service is canceled before propgrating an exception futher up the stack,
+ * and check for cancelation inside a long loop. Eg.
-public abstract class CancelCriterion
-{
-  
+public abstract class CancelCriterion {
+
-   * Indicate if the service is in the progress of being cancelled.  The
-   * typical use of this is to indicate, in the case of an {@link InterruptedException},
-   * that the current operation should be cancelled.
-   * @return null if the service is not shutting down, or a message that can be used to
-   * construct an exception indicating the service is shut down.
+   * Indicate if the service is in the progress of being cancelled. The typical use of this is to
+   * indicate, in the case of an {@link InterruptedException}, that the current operation should be
+   * cancelled.
+   * 
+   * @return null if the service is not shutting down, or a message that can be used to construct an
+   *         exception indicating the service is shut down.
-//import org.apache.geode.distributed.internal.DistributionManager;
-//    * <p>
-//    * In particular, a {@link DistributionManager} returns a non-null result if
-//    * message distribution has been terminated.
-  
+  // import org.apache.geode.distributed.internal.DistributionManager;
+  // * <p>
+  // * In particular, a {@link DistributionManager} returns a non-null result if
+  // * message distribution has been terminated.
+
-   * Use this utility  function in your implementation of cancelInProgress()
-   * and cancelled() to indicate a system failure
+   * Use this utility function in your implementation of cancelInProgress() and cancelled() to
+   * indicate a system failure
-   * See if the current operation is being cancelled.  If so, it either
-   * throws a {@link RuntimeException} (usually a {@link CancelException}).
+   * See if the current operation is being cancelled. If so, it either throws a
+   * {@link RuntimeException} (usually a {@link CancelException}).
-   * @param e an underlying exception or null if there is no exception 
-   * that triggered this check
+   * @param e an underlying exception or null if there is no exception that triggered this check
-   * {@link #checkCancelInProgress(Throwable)}. Override this to specify
-   * different exception for checkCancelInProgress() to throw.
+   * {@link #checkCancelInProgress(Throwable)}. Override this to specify different exception for
+   * checkCancelInProgress() to throw.
-   * This method should wrap the exception in a service specific 
-   * CancelationException (eg CacheClosedException). 
-   * or return null if the service is not being canceled.
+   * This method should wrap the exception in a service specific CancelationException (eg
+   * CacheClosedException). or return null if the service is not being canceled.
-   * @param e
-   *          an underlying exception, if any
-   * @return RuntimeException to be thrown by checkCancelInProgress(), null if
-   *         the receiver has not been cancelled.
+   * @param e an underlying exception, if any
+   * @return RuntimeException to be thrown by checkCancelInProgress(), null if the receiver has not
+   *         been cancelled.
-   * Checks to see if a cancellation is in progress.  This is equivalent to
-   * the expression (cancelInProgress() != null).
+   * Checks to see if a cancellation is in progress. This is equivalent to the expression
+   * (cancelInProgress() != null).
