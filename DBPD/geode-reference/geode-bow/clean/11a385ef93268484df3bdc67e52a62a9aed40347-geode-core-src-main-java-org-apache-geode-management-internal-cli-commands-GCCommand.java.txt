GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.

-      DistributedMember member = CliUtil.getDistributedMemberByNameOrId(memberId);
-      if (member == null) {
-        return ResultBuilder
-            .createGemFireErrorResult(memberId + CliStrings.GC__MSG__MEMBER_NOT_FOUND);
-      }
+      DistributedMember member = getMember(memberId);
-    try {
-      List<?> resultList;
-      Function garbageCollectionFunction = new GarbageCollectionFunction();
-      resultList =
-          (List<?>) CliUtil.executeFunction(garbageCollectionFunction, null, dsMembers).getResult();
-      for (Object object : resultList) {
-        if (object instanceof Exception) {
-          LogWrapper.getInstance().fine("Exception in GC " + ((Throwable) object).getMessage(),
-              ((Throwable) object));
-          continue;
-        } else if (object instanceof Throwable) {
-          LogWrapper.getInstance().fine("Exception in GC " + ((Throwable) object).getMessage(),
-              ((Throwable) object));
-          continue;
-        }
+    List<?> resultList;
+    Function garbageCollectionFunction = new GarbageCollectionFunction();
+    resultList =
+        (List<?>) CliUtil.executeFunction(garbageCollectionFunction, null, dsMembers).getResult();
-        if (object != null) {
-          if (object instanceof String) {
-            // unexpected exception string - cache may be closed or something
-            return ResultBuilder.createUserErrorResult((String) object);
-          } else {
-            Map<String, String> resultMap = (Map<String, String>) object;
-            toTabularResultData(resultTable, resultMap.get("MemberId"),
-                resultMap.get("HeapSizeBeforeGC"), resultMap.get("HeapSizeAfterGC"),
-                resultMap.get("TimeSpentInGC"));
-          }
-        } else {
-          LogWrapper.getInstance().fine("ResultMap was null ");
-        }
+    for (Object object : resultList) {
+      if (object instanceof Exception) {
+        LogWrapper.getInstance().fine("Exception in GC " + ((Throwable) object).getMessage(),
+            ((Throwable) object));
+        continue;
+      } else if (object instanceof Throwable) {
+        LogWrapper.getInstance().fine("Exception in GC " + ((Throwable) object).getMessage(),
+            ((Throwable) object));
+        continue;
-    } catch (Exception e) {
-      String stack = CliUtil.stackTraceAsString(e);
-      LogWrapper.getInstance().info("GC exception is " + stack);
-      return ResultBuilder.createGemFireErrorResult(e.getMessage() + ": " + stack);
+
+      if (object != null) {
+        if (object instanceof String) {
+          // unexpected exception string - cache may be closed or something
+          return ResultBuilder.createUserErrorResult((String) object);
+        } else {
+          Map<String, String> resultMap = (Map<String, String>) object;
+          toTabularResultData(resultTable, resultMap.get("MemberId"),
+              resultMap.get("HeapSizeBeforeGC"), resultMap.get("HeapSizeAfterGC"),
+              resultMap.get("TimeSpentInGC"));
+        }
+      } else {
+        LogWrapper.getInstance().fine("ResultMap was null ");
+      }
+
