Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This message is used be a replicate region to perform region-level ops like
- * clear() and invalidateRegion().  It is used when the target region has
- * concurrency control enabled so that region-version-vectors must be used to
- * execute these operations.
+ * This message is used be a replicate region to perform region-level ops like clear() and
+ * invalidateRegion(). It is used when the target region has concurrency control enabled so that
+ * region-version-vectors must be used to execute these operations.
-public final class RemoteRegionOperation extends RemoteOperationMessageWithDirectReply
-  {
+public final class RemoteRegionOperation extends RemoteOperationMessageWithDirectReply {
-  
+
-//    INVALIDATE
+    // INVALIDATE
-  public RemoteRegionOperation() {
-  }
+  public RemoteRegionOperation() {}
-  public static RemoteRegionOperation clear(InternalDistributedMember recipient, DistributedRegion region) {
+  public static RemoteRegionOperation clear(InternalDistributedMember recipient,
+      DistributedRegion region) {
-  
-//  public static RemoteRegionOperation invalidate(InternalDistributedMember recipient, DistributedRegion region) {
-//    return new RemoteRegionOperation(recipient, region, Operation.INVALIDATE);
-//  }
-  
+
+  // public static RemoteRegionOperation invalidate(InternalDistributedMember recipient,
+  // DistributedRegion region) {
+  // return new RemoteRegionOperation(recipient, region, Operation.INVALIDATE);
+  // }
+
-    super(recipient, region.getFullPath(), new RemoteOperationResponse(region.getSystem(), Collections.singleton(recipient)));
+    super(recipient, region.getFullPath(),
+        new RemoteOperationResponse(region.getSystem(), Collections.singleton(recipient)));
-    RemoteOperationResponse p = (RemoteOperationResponse)this.processor;
+    RemoteOperationResponse p = (RemoteOperationResponse) this.processor;
-    
+
-  protected boolean operateOnRegion(DistributionManager dm,
-      LocalRegion r, long startTime) throws CacheException,
-      RemoteOperationException
-  {
+  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+      throws CacheException, RemoteOperationException {
-      logger.trace(LogMarker.DM, "DistributedRemoteRegionOperation operateOnRegion: {}", r.getFullPath());
+      logger.trace(LogMarker.DM, "DistributedRemoteRegionOperation operateOnRegion: {}",
+          r.getFullPath());
-    
-    
-    if ( !(r instanceof PartitionedRegion) ) {
+
+
+    if (!(r instanceof PartitionedRegion)) {
-//    } else {
-//      r.invalidateRegion();
+      // } else {
+      // r.invalidateRegion();
-    //r.getPrStats().endPartitionMessagesProcessing(startTime); 
+    // r.getPrStats().endPartitionMessagesProcessing(startTime);
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  public static final class RemoteRegionOperationReplyMessage extends
-      ReplyMessage
-   {
+  public static final class RemoteRegionOperationReplyMessage extends ReplyMessage {
-    public RemoteRegionOperationReplyMessage() {
-    }
+    public RemoteRegionOperationReplyMessage() {}
-        ReplySender replySender)
-    {
-      Assert.assertTrue(recipient != null,
-          "RemoteRegionOperationReplyMessage NULL reply message");
-      RemoteRegionOperationReplyMessage m = new RemoteRegionOperationReplyMessage(
-          processorId);
+        ReplySender replySender) {
+      Assert.assertTrue(recipient != null, "RemoteRegionOperationReplyMessage NULL reply message");
+      RemoteRegionOperationReplyMessage m = new RemoteRegionOperationReplyMessage(processorId);
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-    public void process(final DM dm, ReplyProcessor21 processor)
-    {
+    public void process(final DM dm, ReplyProcessor21 processor) {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-    public String toString()
-    {
+    public String toString() {
-      sb.append("RemoteRegionOperationReplyMessage ").append(
-          "processorid=").append(this.processorId).append(" reply to sender ")
-          .append(this.getSender());
+      sb.append("RemoteRegionOperationReplyMessage ").append("processorid=")
+          .append(this.processorId).append(" reply to sender ").append(this.getSender());
