GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
+import java.util.Map;
+import java.util.Set;
+import org.apache.geode.redis.internal.RedisLockService;
+   * TThe field that defines the name of the {@link Region} which holds non-named hash. The current
+   * value of this field is {@value #HASH_REGION}.
+   */
+  public static final String HASH_REGION = "ReDiS_HASH";
+
+  /**
+   * TThe field that defines the name of the {@link Region} which holds sets. The current value of
+   * this field is {@value #SET_REGION}.
+   */
+  public static final String SET_REGION = "ReDiS_SET";
+
+
+  /**
+  private RedisLockService hashLockService;
+  private RedisLockService setLockService;
-      Region redisMetaData;
+      Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> redisHash;
+      Region<String, RedisDataType> redisMetaData;
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> redisSet;
+
+
+      if ((redisHash = cache.getRegion(HASH_REGION)) == null) {
+        RegionFactory<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> regionFactory =
+            gemFireCache.createRegionFactory(this.DEFAULT_REGION_TYPE);
+        redisHash = regionFactory.create(HASH_REGION);
+      }
+
+      if ((redisSet = cache.getRegion(SET_REGION)) == null) {
+        RegionFactory<ByteArrayWrapper, Set<ByteArrayWrapper>> regionFactory =
+            gemFireCache.createRegionFactory(this.DEFAULT_REGION_TYPE);
+        redisSet = regionFactory.create(SET_REGION);
+      }
+
+
+      this.hashLockService = new RedisLockService();
+      this.setLockService = new RedisLockService();
-          expirationFutures, expirationExecutor, this.DEFAULT_REGION_TYPE);
+          expirationFutures, expirationExecutor, this.DEFAULT_REGION_TYPE, redisHash, redisSet);
+      redisMetaData.put(SET_REGION, RedisDataType.REDIS_PROTECTED);
+      redisMetaData.put(HASH_REGION, RedisDataType.REDIS_PROTECTED);
+
-                    keyRegistrar, pubSub));
+                    keyRegistrar, pubSub, hashLockService, setLockService));
