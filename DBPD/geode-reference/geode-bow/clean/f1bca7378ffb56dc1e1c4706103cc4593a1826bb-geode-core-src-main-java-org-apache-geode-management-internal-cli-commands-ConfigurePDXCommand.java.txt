GEODE-4858: refactor ConfigurePdxCommand (#1933)


-import java.util.List;
-import java.util.stream.Collectors;
+import org.apache.geode.cache.configuration.CacheConfig;
-import org.apache.geode.cache.configuration.ParameterType;
-import org.apache.geode.distributed.ConfigurationPersistenceService;
-import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.SingleGfshCommand;
-import org.apache.geode.management.internal.cli.result.InfoResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class ConfigurePDXCommand extends InternalGfshCommand {
+public class ConfigurePDXCommand extends SingleGfshCommand {
-  public Result configurePDX(
+  public ResultModel configurePDX(
-    Result result;
-    ReflectionBasedAutoSerializer autoSerializer = null;
-
-      return ResultBuilder
-          .createUserErrorResult("Configure pdx failed because cluster configuration is disabled.");
+      return ResultModel
+          .createError("Configure pdx failed because cluster configuration is disabled.");
-    InfoResultData infoResultData = ResultBuilder.createInfoResultData();
+    ResultModel result = new ResultModel();
+    InfoResultModel infoSection = result.addInfo();
-      infoResultData.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
+      infoSection.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
-    // Set persistent and the disk-store
-    if (diskStore != null) {
-      infoResultData.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = true");
-      infoResultData.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + diskStore);
-    } else {
-      infoResultData.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = false");
-    }
-
-    infoResultData.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + readSerialized);
-    infoResultData
+    PdxType pdxType = new PdxType();
+    pdxType.setIgnoreUnreadFields(ignoreUnreadFields);
+    pdxType.setReadSerialized(readSerialized);
+    infoSection.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + readSerialized);
+    infoSection
-    // Auto Serializer Configuration
+    pdxType.setDiskStoreName(diskStore);
+    pdxType.setPersistent(diskStore != null);
+
+    if (diskStore != null) {
+      infoSection.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = true");
+      infoSection.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + diskStore);
+    } else {
+      infoSection.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = false");
+    }
+
+    ReflectionBasedAutoSerializer autoSerializer = null;
-      infoResultData.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
-      infoResultData.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
-    }
-
-    if (nonPortableClassesPatterns != null) {
+      infoSection.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
+      infoSection.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
+    } else if (nonPortableClassesPatterns != null) {
-      infoResultData.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
-      infoResultData
-          .addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
+      infoSection.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
+      infoSection.addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
+    }
+    if (autoSerializer != null) {
+      pdxType.setPdxSerializer(new DeclarableType(ReflectionBasedAutoSerializer.class.getName(),
+          autoSerializer.getConfig()));
-    result = ResultBuilder.buildResult(infoResultData);
-    ReflectionBasedAutoSerializer finalAutoSerializer = autoSerializer;
-    getConfigurationPersistenceService()
-        .updateCacheConfig(ConfigurationPersistenceService.CLUSTER_CONFIG, config -> {
-          if (config.getPdx() == null) {
-            config.setPdx(new PdxType());
-          }
-          config.getPdx().setReadSerialized(readSerialized);
-          config.getPdx().setIgnoreUnreadFields(ignoreUnreadFields);
-          config.getPdx().setDiskStoreName(diskStore);
-          config.getPdx().setPersistent(diskStore != null);
-
-          if (portableClassesPatterns != null || nonPortableClassesPatterns != null) {
-            DeclarableType pdxSerializer = new DeclarableType();
-            pdxSerializer.setClassName(ReflectionBasedAutoSerializer.class.getName());
-
-            List<ParameterType> parameters =
-                finalAutoSerializer.getConfig().entrySet().stream().map(entry -> {
-                  ParameterType parameterType = new ParameterType();
-                  parameterType.setName((String) entry.getKey());
-                  parameterType.setString((String) entry.getValue());
-                  return parameterType;
-                }).collect(Collectors.toList());
-            pdxSerializer.getParameter().addAll(parameters);
-
-            config.getPdx().setPdxSerializer(pdxSerializer);
-          }
-          return config;
-        });
+    result.setConfigObject(pdxType);
+  @Override
+  public void updateClusterConfig(String group, CacheConfig config, Object configObject) {
+    config.setPdx((PdxType) configObject);
+  }
+
-    public Result preExecution(GfshParseResult parseResult) {
+    public ResultModel preExecution(GfshParseResult parseResult) {
-        return ResultBuilder.createUserErrorResult(CliStrings.CONFIGURE_PDX__ERROR__MESSAGE);
+        return ResultModel.createError(CliStrings.CONFIGURE_PDX__ERROR__MESSAGE);
-
-      return ResultBuilder.createInfoResult("");
+      return ResultModel.createInfo("");
