Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.offheap.OffHeapHelper;
+  private boolean allowReadFromHDFS;
+  protected static final int READ_FROM_HDFS = IF_OLD;
-      boolean returnTombstones) {
+      boolean returnTombstones, boolean allowReadFromHDFS) {
+	this.allowReadFromHDFS = allowReadFromHDFS;
+    if (!forceUseOfPRExecutor && !ORDER_PR_GETS && !isDirectAck()) {
+      try {
+        PartitionedRegion pr = PartitionedRegion.getPRFromId(this.regionId);
+        // If the region is persistent the get may need to fault a value
+        // in which has to sync the region entry. Note it may need to
+        // do this even if it is not overflow (after recovery values are faulted in async).
+        // If the region has an LRU then in lruUpdateCallback it will
+        // call getLRUEntry which has to sync a region entry.
+        // Syncing a region entry can lead to dead-lock (see bug 52078).
+        // So if either of these conditions hold this message can not be
+        // processed in the p2p msg reader.
+        if (pr.getAttributes().getDataPolicy().withPersistence()
+            || !pr.getAttributes().getEvictionAttributes().getAlgorithm().isNone()) {
+          return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+        }
+      } catch (PRLocallyDestroyedException ignore) {
+      } catch (RuntimeException ignore) {
+        // fix for GEODE-216
+        // Most likely here would be RegionDestroyedException or CacheClosedException
+        // but the cancel criteria code can throw any RuntimeException.
+        // In all these cases it is ok to just fall through and return the
+        // old executor type.
+      }
+    }
+    Object val = null;
+    try {
-        Object val = r.getDataView().getSerializedValue(r, keyInfo, !lockEntry, this.context, event, returnTombstones);
+        
+        val = r.getDataView().getSerializedValue(r, keyInfo, !lockEntry, this.context, event, returnTombstones, allowReadFromHDFS);
+      } finally {
+        event.release();
+   // Unless there was an exception thrown, this message handles sending the
+      // response
+      return false;
+    }finally {
+      OffHeapHelper.release(val);
+    }
-    // Unless there was an exception thrown, this message handles sending the
-    // response
-    return false;
+    
+  @Override
+  protected short computeCompressedShort(short s) {
+    s = super.computeCompressedShort(s);
+    if (this.allowReadFromHDFS) s |= READ_FROM_HDFS;
+    return s;
+  }
+
+  @Override
+  protected void setBooleans(short s, DataInput in) throws ClassNotFoundException, IOException {
+    super.setBooleans(s, in);
+    if ((s & READ_FROM_HDFS) != 0) this.allowReadFromHDFS = true;
+  }
+
-      ClientProxyMembershipID requestingClient, boolean returnTombstones)
+      ClientProxyMembershipID requestingClient, boolean returnTombstones, boolean allowReadFromHDFS)
-        key, aCallbackArgument, requestingClient, returnTombstones);
+        key, aCallbackArgument, requestingClient, returnTombstones, allowReadFromHDFS);
