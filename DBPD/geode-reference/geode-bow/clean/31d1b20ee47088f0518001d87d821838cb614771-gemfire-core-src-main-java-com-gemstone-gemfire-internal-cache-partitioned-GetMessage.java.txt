Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.offheap.OffHeapHelper;
+  private boolean allowReadFromHDFS;
+  protected static final int READ_FROM_HDFS = IF_OLD;
-      boolean returnTombstones) {
+      boolean returnTombstones, boolean allowReadFromHDFS) {
+	this.allowReadFromHDFS = allowReadFromHDFS;
+    if (!forceUseOfPRExecutor && !ORDER_PR_GETS && !isDirectAck()) {
+      try {
+        PartitionedRegion pr = PartitionedRegion.getPRFromId(this.regionId);
+        // If the region is persistent the get may need to fault a value
+        // in which has to sync the region entry. Note it may need to
+        // do this even if it is not overflow (after recovery values are faulted in async).
+        // If the region has an LRU then in lruUpdateCallback it will
+        // call getLRUEntry which has to sync a region entry.
+        // Syncing a region entry can lead to dead-lock (see bug 52078).
+        // So if either of these conditions hold this message can not be
+        // processed in the p2p msg reader.
+        if (pr.getAttributes().getDataPolicy().withPersistence()
+            || !pr.getAttributes().getEvictionAttributes().getAlgorithm().isNone()) {
+          return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+        }
+      } catch (PRLocallyDestroyedException ignore) {
+      }
+    }
+    Object val = null;
+    try {
-        Object val = r.getDataView().getSerializedValue(r, keyInfo, !lockEntry, this.context, event, returnTombstones);
+        
+        val = r.getDataView().getSerializedValue(r, keyInfo, !lockEntry, this.context, event, returnTombstones, allowReadFromHDFS);
+      } finally {
+        event.release();
+   // Unless there was an exception thrown, this message handles sending the
+      // response
+      return false;
+    }finally {
+      OffHeapHelper.release(val);
+    }
-    // Unless there was an exception thrown, this message handles sending the
-    // response
-    return false;
+    
+  @Override
+  protected short computeCompressedShort(short s) {
+    s = super.computeCompressedShort(s);
+    if (this.allowReadFromHDFS) s |= READ_FROM_HDFS;
+    return s;
+  }
+
+  @Override
+  protected void setBooleans(short s, DataInput in) throws ClassNotFoundException, IOException {
+    super.setBooleans(s, in);
+    if ((s & READ_FROM_HDFS) != 0) this.allowReadFromHDFS = true;
+  }
+
-      ClientProxyMembershipID requestingClient, boolean returnTombstones)
+      ClientProxyMembershipID requestingClient, boolean returnTombstones, boolean allowReadFromHDFS)
-        key, aCallbackArgument, requestingClient, returnTombstones);
+        key, aCallbackArgument, requestingClient, returnTombstones, allowReadFromHDFS);
