GEODE-6639: Use AtomicLong for processingMessageStartTime

Removes unnecessary lock object and synchronize.

+import java.util.concurrent.atomic.AtomicLong;
-  private ProcessingMessageTimer processingMessageTimer = new ProcessingMessageTimer();
+  private final ProcessingMessageTimer processingMessageTimer = new ProcessingMessageTimer();
-      synchronized (processingMessageTimer.processingMessageLock) {
-        // If a message is currently being processed and it has been
-        // being processed for more than the client read timeout,
-        // then return true
-        if (getCurrentMessageProcessingTime() > timeout) {
-          return true;
-        }
-      }
+      return getCurrentMessageProcessingTime() > timeout;
-    public static final long NOT_PROCESSING = -1l;
+    @VisibleForTesting
+    static final long NOT_PROCESSING = -1L;
-    private long processingMessageStartTime = NOT_PROCESSING;
-    private final Object processingMessageLock = new Object();
+    @VisibleForTesting
+    final AtomicLong processingMessageStartTime = new AtomicLong(NOT_PROCESSING);
+    /**
+     * Set or resets time regardless if already set.
+     */
-      synchronized (processingMessageLock) {
-        // go ahead and reset it if it is already set
-        processingMessageStartTime = System.currentTimeMillis();
-      }
+      processingMessageStartTime.set(System.currentTimeMillis());
+    /**
+     * Updates time if previously set.
+     */
-      synchronized (processingMessageLock) {
-        // only update it if it was already set by setProcessingMessage
-        if (processingMessageStartTime != NOT_PROCESSING) {
-          processingMessageStartTime = System.currentTimeMillis();
+      final long current = processingMessageStartTime.get();
+      if (NOT_PROCESSING != current) {
+        final long now = System.currentTimeMillis();
+        if (now > current) {
+          // if another thread sets to -1 or updates the time we don't need to update the time.
+          processingMessageStartTime.compareAndSet(current, now);
-      synchronized (processingMessageLock) {
-        processingMessageStartTime = NOT_PROCESSING;
-      }
+      processingMessageStartTime.set(NOT_PROCESSING);
-      long result;
-      synchronized (processingMessageLock) {
-        result = processingMessageStartTime;
-      }
+      long result = processingMessageStartTime.get();
