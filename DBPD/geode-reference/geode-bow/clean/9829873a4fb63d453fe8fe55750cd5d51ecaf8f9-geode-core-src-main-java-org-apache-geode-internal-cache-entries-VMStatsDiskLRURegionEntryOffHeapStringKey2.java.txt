GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
+import org.apache.geode.internal.cache.persistence.DiskRecoveryStore;
-import org.apache.geode.internal.cache.persistence.DiskRecoveryStore;
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.InternalRegion;
-// macros whose definition changes this class:
-// disk: DISK
-// lru: LRU
-// stats: STATS
-// versioned: VERSIONED
-// offheap: OFFHEAP
-// One of the following key macros must be defined:
-// key object: KEY_OBJECT
-// key int: KEY_INT
-// key long: KEY_LONG
-// key uuid: KEY_UUID
-// key string1: KEY_STRING1
-// key string2: KEY_STRING2
+/*
+ * macros whose definition changes this class:
+ *
+ * disk: DISK lru: LRU stats: STATS versioned: VERSIONED offheap: OFFHEAP
+ *
+ * One of the following key macros must be defined:
+ *
+ * key object: KEY_OBJECT key int: KEY_INT key long: KEY_LONG key uuid: KEY_UUID key string1:
+ * KEY_STRING1 key string2: KEY_STRING2
+ */
-  public VMStatsDiskLRURegionEntryOffHeapStringKey2(RegionEntryContext context, String key,
-      @Retained Object value, boolean byteEncode) {
-    super(context, (value instanceof RecoveredEntry ? null : value));
-    // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
-    initialize(context, value);
-    // caller has already confirmed that key.length <= MAX_INLINE_STRING_KEY
-    long tmpBits1 = 0L;
-    long tmpBits2 = 0L;
-    if (byteEncode) {
-      for (int i = key.length() - 1; i >= 0; i--) {
-        // Note: we know each byte is <= 0x7f so the "& 0xff" is not needed. But I added it in to
-        // keep findbugs happy.
-        if (i < 7) {
-          tmpBits1 |= (byte) key.charAt(i) & 0xff;
-          tmpBits1 <<= 8;
-        } else {
-          tmpBits2 <<= 8;
-          tmpBits2 |= (byte) key.charAt(i) & 0xff;
-        }
-      }
-      tmpBits1 |= 1 << 6;
-    } else {
-      for (int i = key.length() - 1; i >= 0; i--) {
-        if (i < 3) {
-          tmpBits1 |= key.charAt(i);
-          tmpBits1 <<= 16;
-        } else {
-          tmpBits2 <<= 16;
-          tmpBits2 |= key.charAt(i);
-        }
-      }
-    }
-    tmpBits1 |= key.length();
-    this.bits1 = tmpBits1;
-    this.bits2 = tmpBits2;
-  }
-
-  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
-  // common code
-  protected int hash;
-  private HashEntry<Object, Object> next;
-  @SuppressWarnings("unused")
-  private volatile long lastModified;
-  private static final AtomicLongFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> lastModifiedUpdater =
+  // --------------------------------------- common fields ----------------------------------------
+  private static final AtomicLongFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> LAST_MODIFIED_UPDATER =
+  protected int hash;
+  private HashEntry<Object, Object> nextEntry;
+  @SuppressWarnings("unused")
+  private volatile long lastModified;
+  // --------------------------------------- offheap fields ---------------------------------------
-   * All access done using ohAddrUpdater so it is used even though the compiler can not tell it is.
+   * All access done using OFF_HEAP_ADDRESS_UPDATER so it is used even though the compiler can not
+   * tell it is.
-  private volatile long ohAddress;
+  private volatile long offHeapAddress;
-   * re and we will once again be deadlocked. I don't know if we support any of the hardware
-   * platforms that do not have a 64bit CAS. If we do then we can expect deadlocks on disk regions.
+   * RegionEntry and we will once again be deadlocked. I don't know if we support any of the
+   * hardware platforms that do not have a 64bit CAS. If we do then we can expect deadlocks on disk
+   * regions.
-  private final static AtomicLongFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> ohAddrUpdater =
+  private static final AtomicLongFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> OFF_HEAP_ADDRESS_UPDATER =
-          "ohAddress");
+          "offHeapAddress");
+  // ---------------------------------------- disk fields -----------------------------------------
+  /**
+   * @since GemFire 5.1
+   */
+  protected DiskId id;
+  // --------------------------------------- stats fields -----------------------------------------
+  private volatile long lastAccessed;
+  private volatile int hitCount;
+  private volatile int missCount;
+  private static final AtomicIntegerFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> HIT_COUNT_UPDATER =
+      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskLRURegionEntryOffHeapStringKey2.class,
+          "hitCount");
+  private static final AtomicIntegerFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> MISS_COUNT_UPDATER =
+      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskLRURegionEntryOffHeapStringKey2.class,
+          "missCount");
+  // ----------------------------------------- key code -------------------------------------------
+  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
+  /**
+   * strlen is encoded in lowest 6 bits (max strlen is 63)<br>
+   * character encoding info is in bits 7 and 8<br>
+   * The other bits are used to encoded character data.
+   */
+  private final long bits1;
+  /**
+   * bits2 encodes character data
+   */
+  private final long bits2;
+  public VMStatsDiskLRURegionEntryOffHeapStringKey2(final RegionEntryContext context,
+      final String key, @Retained final Object value, final boolean byteEncode) {
+    super(context, (value instanceof RecoveredEntry ? null : value));
+    // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
+    initialize(context, value);
+    // caller has already confirmed that key.length <= MAX_INLINE_STRING_KEY
+    long tempBits1 = 0L;
+    long tempBits2 = 0L;
+    if (byteEncode) {
+      for (int i = key.length() - 1; i >= 0; i--) {
+        // Note: we know each byte is <= 0x7f so the "& 0xff" is not needed. But I added it in to
+        // keep findbugs happy.
+        if (i < 7) {
+          tempBits1 |= (byte) key.charAt(i) & 0xff;
+          tempBits1 <<= 8;
+        } else {
+          tempBits2 <<= 8;
+          tempBits2 |= (byte) key.charAt(i) & 0xff;
+        }
+      }
+      tempBits1 |= 1 << 6;
+    } else {
+      for (int i = key.length() - 1; i >= 0; i--) {
+        if (i < 3) {
+          tempBits1 |= key.charAt(i);
+          tempBits1 <<= 16;
+        } else {
+          tempBits2 <<= 16;
+          tempBits2 |= key.charAt(i);
+        }
+      }
+    }
+    tempBits1 |= key.length();
+    this.bits1 = tempBits1;
+    this.bits2 = tempBits2;
+  }
+
+  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp
-  protected void setValueField(@Unretained Object v) {
-    OffHeapRegionEntryHelper.setValue(this, v);
+  protected void setValueField(@Unretained final Object value) {
+    OffHeapRegionEntryHelper.setValue(this, value);
-  public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
+  public Object getValueRetain(final RegionEntryContext context, final boolean decompress) {
-    return ohAddrUpdater.get(this);
+    return OFF_HEAP_ADDRESS_UPDATER.get(this);
-  public boolean setAddress(long expectedAddr, long newAddr) {
-    return ohAddrUpdater.compareAndSet(this, expectedAddr, newAddr);
+  public boolean setAddress(final long expectedAddress, long newAddress) {
+    return OFF_HEAP_ADDRESS_UPDATER.compareAndSet(this, expectedAddress, newAddress);
-    // Deadcoded for now; never was working
+    // never implemented
+  @Override
-    return lastModifiedUpdater.get(this);
+    return LAST_MODIFIED_UPDATER.get(this);
-  protected boolean compareAndSetLastModifiedField(long expectedValue, long newValue) {
-    return lastModifiedUpdater.compareAndSet(this, expectedValue, newValue);
+  @Override
+  protected boolean compareAndSetLastModifiedField(final long expectedValue, final long newValue) {
+    return LAST_MODIFIED_UPDATER.compareAndSet(this, expectedValue, newValue);
-  /**
-   * @see HashEntry#getEntryHash()
-   */
+  @Override
-  protected void setEntryHash(int v) {
-    this.hash = v;
+  @Override
+  protected void setEntryHash(final int hash) {
+    this.hash = hash;
-  /**
-   * @see HashEntry#getNextEntry()
-   */
+  @Override
-    return this.next;
+    return this.nextEntry;
-  /**
-   * @see HashEntry#setNextEntry
-   */
-  public void setNextEntry(final HashEntry<Object, Object> n) {
-    this.next = n;
+  @Override
+  public void setNextEntry(final HashEntry<Object, Object> nextEntry) {
+    this.nextEntry = nextEntry;
+  // ----------------------------------------- disk code ------------------------------------------
-  // disk code
-  protected void initialize(RegionEntryContext drs, Object value) {
+  protected void initialize(final RegionEntryContext context, final Object value) {
-    if (drs instanceof LocalRegion) {
-      isBackup = ((LocalRegion) drs).getDiskRegion().isBackup();
-    } else if (drs instanceof PlaceHolderDiskRegion) {
+    if (context instanceof InternalRegion) {
+      isBackup = ((InternalRegion) context).getDiskRegion().isBackup();
+    } else if (context instanceof PlaceHolderDiskRegion) {
-      throw new IllegalArgumentException("expected a LocalRegion or PlaceHolderDiskRegion");
+      throw new IllegalArgumentException("expected a InternalRegion or PlaceHolderDiskRegion");
-      diskInitialize(drs, value);
+      diskInitialize(context, value);
-  public synchronized int updateAsyncEntrySize(EnableLRU capacityController) {
+  public synchronized int updateAsyncEntrySize(final EnableLRU capacityController) {
-  private void diskInitialize(RegionEntryContext context, Object value) {
-    DiskRecoveryStore drs = (DiskRecoveryStore) context;
-    DiskStoreImpl ds = drs.getDiskStore();
-    long maxOplogSize = ds.getMaxOplogSize();
-    // get appropriate instance of DiskId implementation based on maxOplogSize
-    this.id = DiskId.createDiskId(maxOplogSize, true/* is persistence */, ds.needsLinkedList());
-    Helper.initialize(this, drs, value);
-  }
-
-  /**
-   * DiskId
-   * 
-   * @since GemFire 5.1
-   */
-  protected DiskId id;// = new DiskId();
-
+  @Override
-  public void setDiskId(RegionEntry old) {
-    this.id = ((AbstractDiskRegionEntry) old).getDiskId();
+  public void setDiskId(final RegionEntry oldEntry) {
+    this.id = ((DiskEntry) oldEntry).getDiskId();
+  private void diskInitialize(final RegionEntryContext context, final Object value) {
+    DiskRecoveryStore diskRecoveryStore = (DiskRecoveryStore) context;
+    DiskStoreImpl diskStore = diskRecoveryStore.getDiskStore();
+    long maxOplogSize = diskStore.getMaxOplogSize();
+    // get appropriate instance of DiskId implementation based on maxOplogSize
+    this.id = DiskId.createDiskId(maxOplogSize, true, diskStore.needsLinkedList());
+    Helper.initialize(this, diskRecoveryStore, value);
+  }
+
+  // --------------------------------------- eviction code ----------------------------------------
-  // lru code
-  public void setDelayedDiskId(LocalRegion r) {
-    DiskStoreImpl ds = r.getDiskStore();
-    long maxOplogSize = ds.getMaxOplogSize();
-    this.id = DiskId.createDiskId(maxOplogSize, false /* over flow only */, ds.needsLinkedList());
+  public void setDelayedDiskId(final DiskRecoveryStore diskRecoveryStore) {
+    DiskStoreImpl diskStore = diskRecoveryStore.getDiskStore();
+    long maxOplogSize = diskStore.getMaxOplogSize();
+    this.id = DiskId.createDiskId(maxOplogSize, false, diskStore.needsLinkedList());
-  public synchronized int updateEntrySize(EnableLRU capacityController) {
-    return updateEntrySize(capacityController, _getValue()); // OFHEAP: _getValue ok w/o incing
-                                                             // refcount because we are synced and
-                                                             // only getting the size
+  @Override
+  public synchronized int updateEntrySize(final EnableLRU capacityController) {
+    // OFFHEAP: getValue ok w/o incing refcount because we are synced and only getting the size
+    return updateEntrySize(capacityController, getValue());
-  public synchronized int updateEntrySize(EnableLRU capacityController, Object value) {
+  @Override
+  public synchronized int updateEntrySize(final EnableLRU capacityController, final Object value) {
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-  private LRUClockNode prevLRU;
+  private LRUClockNode previousLRU;
-  public void setNextLRUNode(LRUClockNode next) {
-    this.nextLRU = next;
+  @Override
+  public void setNextLRUNode(final LRUClockNode nextLRU) {
+    this.nextLRU = nextLRU;
+  @Override
-  public void setPrevLRUNode(LRUClockNode prev) {
-    this.prevLRU = prev;
+  @Override
+  public void setPrevLRUNode(final LRUClockNode previousLRU) {
+    this.previousLRU = previousLRU;
+  @Override
-    return this.prevLRU;
+    return this.previousLRU;
+  @Override
-  protected void setEntrySize(int size) {
+  protected void setEntrySize(final int size) {
+  // ---------------------------------------- stats code ------------------------------------------
-  // stats code
-  public void updateStatsForGet(boolean hit, long time) {
+  public void updateStatsForGet(final boolean isHit, final long time) {
-    if (hit) {
+    if (isHit) {
-  protected void setLastModifiedAndAccessedTimes(long lastModified, long lastAccessed) {
+  protected void setLastModifiedAndAccessedTimes(final long lastModified, final long lastAccessed) {
-  private volatile long lastAccessed;
-  private volatile int hitCount;
-  private volatile int missCount;
-  private static final AtomicIntegerFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> hitCountUpdater =
-      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskLRURegionEntryOffHeapStringKey2.class,
-          "hitCount");
-  private static final AtomicIntegerFieldUpdater<VMStatsDiskLRURegionEntryOffHeapStringKey2> missCountUpdater =
-      AtomicIntegerFieldUpdater.newUpdater(VMStatsDiskLRURegionEntryOffHeapStringKey2.class,
-          "missCount");
-
-  public void setLastAccessed(long lastAccessed) {
+  public void setLastAccessed(final long lastAccessed) {
-    hitCountUpdater.incrementAndGet(this);
+    HIT_COUNT_UPDATER.incrementAndGet(this);
-    missCountUpdater.incrementAndGet(this);
+    MISS_COUNT_UPDATER.incrementAndGet(this);
-    hitCountUpdater.set(this, 0);
-    missCountUpdater.set(this, 0);
+    HIT_COUNT_UPDATER.set(this, 0);
+    MISS_COUNT_UPDATER.set(this, 0);
-  public void txDidDestroy(long currTime) {
-    setLastModified(currTime);
-    setLastAccessed(currTime);
+  public void txDidDestroy(long timeStamp) {
+    setLastModified(timeStamp);
+    setLastAccessed(timeStamp);
+  // ----------------------------------------- key code -------------------------------------------
-  // key code
-  // strlen is encoded in lowest 6 bits (max strlen is 63)
-  // character encoding info is in bits 7 and 8
-  // The other bits are used to encoded character data.
-  private final long bits1;
-  // bits2 encodes character data
-  private final long bits2;
-
-    int keylen = getKeyLength();
-    char[] chars = new char[keylen];
-    long tmpBits1 = this.bits1;
-    long tmpBits2 = this.bits2;
+    int keyLength = getKeyLength();
+    char[] chars = new char[keyLength];
+    long tempBits1 = this.bits1;
+    long tempBits2 = this.bits2;
-      for (int i = 0; i < keylen; i++) {
+      for (int i = 0; i < keyLength; i++) {
-          tmpBits1 >>= 8;
-          chars[i] = (char) (tmpBits1 & 0x00ff);
+          tempBits1 >>= 8;
+          chars[i] = (char) (tempBits1 & 0x00ff);
-          chars[i] = (char) (tmpBits2 & 0x00ff);
-          tmpBits2 >>= 8;
+          chars[i] = (char) (tempBits2 & 0x00ff);
+          tempBits2 >>= 8;
-      for (int i = 0; i < keylen; i++) {
+      for (int i = 0; i < keyLength; i++) {
-          tmpBits1 >>= 16;
-          chars[i] = (char) (tmpBits1 & 0x00FFff);
+          tempBits1 >>= 16;
+          chars[i] = (char) (tempBits1 & 0x00FFff);
-          chars[i] = (char) (tmpBits2 & 0x00FFff);
-          tmpBits2 >>= 16;
+          chars[i] = (char) (tempBits2 & 0x00FFff);
+          tempBits2 >>= 16;
-  public boolean isKeyEqual(Object k) {
-    if (k instanceof String) {
-      String str = (String) k;
-      int keylen = getKeyLength();
-      if (str.length() == keylen) {
-        long tmpBits1 = this.bits1;
-        long tmpBits2 = this.bits2;
+  public boolean isKeyEqual(final Object key) {
+    if (key instanceof String) {
+      String stringKey = (String) key;
+      int keyLength = getKeyLength();
+      if (stringKey.length() == keyLength) {
+        long tempBits1 = this.bits1;
+        long tempBits2 = this.bits2;
-          for (int i = 0; i < keylen; i++) {
-            char c;
+          for (int i = 0; i < keyLength; i++) {
+            char character;
-              tmpBits1 >>= 8;
-              c = (char) (tmpBits1 & 0x00ff);
+              tempBits1 >>= 8;
+              character = (char) (tempBits1 & 0x00ff);
-              c = (char) (tmpBits2 & 0x00ff);
-              tmpBits2 >>= 8;
+              character = (char) (tempBits2 & 0x00ff);
+              tempBits2 >>= 8;
-            if (str.charAt(i) != c) {
+            if (stringKey.charAt(i) != character) {
-          for (int i = 0; i < keylen; i++) {
-            char c;
+          for (int i = 0; i < keyLength; i++) {
+            char character;
-              tmpBits1 >>= 16;
-              c = (char) (tmpBits1 & 0x00FFff);
+              tempBits1 >>= 16;
+              character = (char) (tempBits1 & 0x00FFff);
-              c = (char) (tmpBits2 & 0x00FFff);
-              tmpBits2 >>= 16;
+              character = (char) (tempBits2 & 0x00FFff);
+              tempBits2 >>= 16;
-            if (str.charAt(i) != c) {
+            if (stringKey.charAt(i) != character) {
