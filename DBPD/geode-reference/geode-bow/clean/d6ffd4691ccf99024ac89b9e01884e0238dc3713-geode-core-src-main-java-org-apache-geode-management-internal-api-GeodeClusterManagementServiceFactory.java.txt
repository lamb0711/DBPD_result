GEODE-6384: Use consistent API to retrieve instances of ClusterManageâ€¦ (#3333)



+import java.net.InetSocketAddress;
+import org.apache.geode.distributed.internal.tcpserver.TcpClient;
+import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfo;
+import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfoRequest;
-      GemFireCacheImpl cacheImpl = (GemFireCacheImpl) cache;
-
-      Set<InternalDistributedMember> locatorsWithClusterConfig =
-          cacheImpl.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration()
-              .keySet();
-
-      MemberInformation memberInformation = getHttpServiceAddress(locatorsWithClusterConfig);
-
-      SSLContext sslContext = null;
-      HostnameVerifier hostnameVerifier = null;
-      if (memberInformation.isWebSSL()) {
-        SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(
-            ((GemFireCacheImpl) cache).getSystem().getConfig(), SecurableCommunicationChannel.WEB);
-        if (!sslConfig.useDefaultSSLContext() && sslConfig.getTruststore() == null) {
-          throw new IllegalStateException(
-              "The server needs to have ssl-truststore or ssl-use-default-context specified in order to use cluster management service.");
-        }
-
-        sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
-        hostnameVerifier = new NoopHostnameVerifier();
-      }
-
-      return create(getHostName(memberInformation), memberInformation.getHttpServicePort(),
-          sslContext, hostnameVerifier, username, password);
+      return getClusterManagementServiceOnServer(username, password, (GemFireCacheImpl) cache);
-      throw new IllegalStateException(
-          "Under construction. To retrieve an instance of ClusterManagementService from a Geode client, please use other methods");
+      return getClusterManagementServiceOnClient(username, password, clientCache);
-    // } catch( CacheClosedException e) {
+
+  private ClusterManagementService getClusterManagementServiceOnServer(String username,
+      String password,
+      GemFireCacheImpl cache) {
+    Set<InternalDistributedMember> locatorsWithClusterConfig =
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration()
+            .keySet();
-  private MemberInformation getHttpServiceAddress(Set<InternalDistributedMember> locators) {
+    MemberInformation memberInformation = getLocatorInformation(locatorsWithClusterConfig);
+
+    SSLContext sslContext = null;
+    HostnameVerifier hostnameVerifier = null;
+    if (memberInformation.isWebSSL()) {
+      SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(
+          cache.getSystem().getConfig(), SecurableCommunicationChannel.WEB);
+      if (!sslConfig.useDefaultSSLContext() && sslConfig.getTruststore() == null) {
+        throw new IllegalStateException(
+            "The server needs to have ssl-truststore or ssl-use-default-context specified in order to use cluster management service.");
+      }
+
+      sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
+      hostnameVerifier = new NoopHostnameVerifier();
+    }
+
+    return create(getHostName(memberInformation), memberInformation.getHttpServicePort(),
+        sslContext, hostnameVerifier, username, password);
+  }
+
+  private ClusterManagementService getClusterManagementServiceOnClient(String username,
+      String password,
+      ClientCache clientCache) {
+    List<InetSocketAddress> locators = clientCache.getDefaultPool().getLocators();
+
+    if (locators.size() == 0) {
+      throw new IllegalStateException(
+          "the client needs to have a client pool connected with a locator.");
+    }
+    TcpClient client = new TcpClient();
+    ClusterManagementServiceInfo cmsInfo = null;
+    for (InetSocketAddress locator : locators) {
+      try {
+        cmsInfo =
+            (ClusterManagementServiceInfo) client.requestToServer(locator,
+                new ClusterManagementServiceInfoRequest(), 1000, true);
+
+        // do not try anymore if we found one that has cms running
+        if (cmsInfo.isRunning()) {
+          break;
+        }
+      } catch (Exception e) {
+        logger.info(
+            "unable to discover the ClusterManagementService on locator " + locator.toString());
+      }
+    }
+
+    // if cmsInfo is still null at this point, i.e. we failed to retrieve the cms information from
+    // any locator
+    if (cmsInfo == null || !cmsInfo.isRunning()) {
+      throw new IllegalStateException(
+          "Unable to discover a locator that has ClusterManagementService running.");
+    }
+
+    return create(cmsInfo.getHostName(), cmsInfo.getHttpPort(), null, new NoopHostnameVerifier(),
+        username, password);
+  }
+
+
+  private MemberInformation getLocatorInformation(Set<InternalDistributedMember> locators) {
