GEODE-2398: fix oplog corruption in overflow oplogs

        * ported changes from original fix in Oplog.java to OverflowOplog.java

This closes #477

-  // /**
-  // * test hook
-  // */
-  // public final ByteBuffer getWriteBuf() {
-  // return this.crf.writeBuf;
-  // }
+  /**
+   * test hook
+   */
+  public final ByteBuffer getWriteBuf() {
+    return this.crf.writeBuf;
+  }
+
+  private static final int MAX_CHANNEL_RETRIES = 5;
+
+          int numChannelRetries = 0;
-            flushed += olf.channel.write(bb);
+            int channelBytesWritten = 0;
+            final int bbStartPos = bb.position();
+            final long channelStartPos = olf.channel.position();
+            // differentiate between bytes written on this channel.write() iteration and the
+            // total number of bytes written to the channel on this call
+            channelBytesWritten = olf.channel.write(bb);
+            // Expect channelBytesWritten and the changes in pp.position() and channel.position() to
+            // be the same. If they are not, then the channel.write() silently failed. The following
+            // retry separates spurious failures from permanent channel failures.
+            if (channelBytesWritten != bb.position() - bbStartPos) {
+              if (numChannelRetries++ < MAX_CHANNEL_RETRIES) {
+                // Reset the ByteBuffer position, but take into account anything that did get
+                // written to the channel
+                channelBytesWritten = (int) (olf.channel.position() - channelStartPos);
+                bb.position(bbStartPos + channelBytesWritten);
+              } else {
+                throw new IOException("Failed to write Oplog entry to " + olf.f.getName() + ": "
+                    + "channel.write() returned " + channelBytesWritten + ", "
+                    + "change in channel position = " + (olf.channel.position() - channelStartPos)
+                    + ", " + "change in source buffer position = " + (bb.position() - bbStartPos));
+              }
+            }
+            flushed += channelBytesWritten;
