Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-import com.gemstone.gemfire.GemFireIOException;
-import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+import com.gemstone.gemfire.internal.security.IntegratedSecurityService;
+import com.gemstone.gemfire.internal.security.SecurityService;
+
+  private SecurityService securityService = IntegratedSecurityService.getSecurityService();
-    ThreadState state = GeodeSecurityUtil.bindSubject(this.subject);
+    ThreadState state = this.securityService.bindSubject(this.subject);
-    if(GeodeSecurityUtil.needPostProcess()) {
+    if(this.securityService.needPostProcess()) {
-      if (clientMessage.valueIsObject()) {
-        Object newValue = GeodeSecurityUtil.postProcess(clientMessage.getRegionName(), clientMessage.getKeyOfInterest(), EntryEventImpl
-          .deserialize((byte[]) oldValue));
-        try {
-          clientMessage.setLatestValue(BlobHelper.serializeToBlob(newValue));
-        } catch (IOException e) {
-          throw new GemFireIOException("Exception serializing entry value", e);
-        }
-      } else {
-        Object newValue = GeodeSecurityUtil.postProcess(clientMessage.getRegionName(), clientMessage.getKeyOfInterest(), oldValue);
-        clientMessage.setLatestValue(newValue);
-      }
+      Object newValue = GeodeSecurityUtil.postProcess(clientMessage.getRegionName(), clientMessage.getKeyOfInterest(), oldValue, clientMessage.valueIsObject());
+      clientMessage.setLatestValue(newValue);
-     * @guarded.By _pausedLock
+     * guarded.By _pausedLock
