GEODE-6897: implement CMS rebalance operation (#3820)


+import java.util.Date;
+import java.util.concurrent.ExecutionException;
+import com.fasterxml.jackson.annotation.JsonFormat;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import org.apache.geode.management.runtime.OperationResult;
- * {@link ClusterManagementService#startOperation(ClusterManagementOperation)} to convey status of
+ * {@link ClusterManagementService#start(ClusterManagementOperation)} to convey status of
- * status
- * and result of the async operation.
+ * status, result, and start/end times of the async operation.
-public class ClusterManagementOperationResult<V extends JsonSerializable>
+public class ClusterManagementOperationResult<V extends OperationResult>
+  @JsonIgnore
+  private final CompletableFuture<Date> futureOperationEnded;
+
+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
+  private Date operationStart;
+
+  private String operator;
-   * normally called by {@link ClusterManagementService#startOperation(ClusterManagementOperation)}
+   * for internal use only
-  public ClusterManagementOperationResult(ClusterManagementResult result,
-      CompletableFuture<V> operationResult) {
-    super(result);
-    this.operationResult = operationResult;
+  public ClusterManagementOperationResult() {
+    this.operationResult = null;
+    this.futureOperationEnded = null;
+    this.operator = null;
-   * @return the future result of the async operation
+   * normally called by {@link ClusterManagementService#start(ClusterManagementOperation)}
+   */
+  public ClusterManagementOperationResult(ClusterManagementResult result,
+      CompletableFuture<V> operationResult, Date operationStart,
+      CompletableFuture<Date> futureOperationEnded, String operator) {
+    super(result);
+    this.operationResult = operationResult;
+    this.operationStart = operationStart;
+    this.futureOperationEnded = futureOperationEnded;
+    this.operator = operator;
+  }
+
+  /**
+   * Returns the future result of the async operation
-  public CompletableFuture<V> getResult() {
+  public CompletableFuture<V> getFutureResult() {
+
+  /**
+   * Returns the completed result of the async operation (blocks until complete, if necessary)
+   */
+  @JsonIgnore
+  public V getResult() throws ExecutionException, InterruptedException {
+    return getFutureResult().get();
+  }
+
+  /**
+   * Returns the time at which the async operation was requested
+   */
+  public Date getOperationStart() {
+    return operationStart;
+  }
+
+  /**
+   * Returns the future time the async operation completed. This is guaranteed to complete before
+   * {@link #getFutureResult()}. Note: subsequent stages must be chained to
+   * {@link #getFutureResult()}, not here.
+   */
+  @JsonIgnore
+  public CompletableFuture<Date> getFutureOperationEnded() {
+    return futureOperationEnded;
+  }
+
+  /**
+   * Returns the actual time the async operation completed, or null if not yet completed
+   */
+  @JsonProperty
+  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
+  public Date getOperationEnded() {
+    return futureOperationEnded.getNow(null);
+  }
+
+  /**
+   * Returns the user who initiated the async operation, if initiated externally and security is
+   * enabled
+   */
+  public String getOperator() {
+    return operator;
+  }
