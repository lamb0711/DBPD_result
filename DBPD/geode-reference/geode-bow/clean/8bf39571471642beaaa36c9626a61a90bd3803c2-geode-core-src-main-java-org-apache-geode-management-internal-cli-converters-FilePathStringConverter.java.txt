Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//    System.out.println("FilePathConverter.supports() : type :: "+type+", optionContext :: "+optionContext);
+    // System.out.println("FilePathConverter.supports() : type :: "+type+", optionContext ::
+    // "+optionContext);
-//    System.out.println("FilePathConverter.convertFromText() : optionContext :: "+optionContext);
+    // System.out.println("FilePathConverter.convertFromText() : optionContext :: "+optionContext);
-  public boolean getAllPossibleValues(List<Completion> completions,
-      Class<?> targetType, String existingData, String optionContext,
-      MethodTarget target) {
-    // prefix is needed while comparing Completion Candidates as potential matches 
+  public boolean getAllPossibleValues(List<Completion> completions, Class<?> targetType,
+      String existingData, String optionContext, MethodTarget target) {
+    // prefix is needed while comparing Completion Candidates as potential matches
-    File   parentDir   = null; // directory to be searched for file(s)
-    
+    File parentDir = null; // directory to be searched for file(s)
+
-  //    System.out.println("FilePathConverter.getAllPossibleValues() : optionContext :: "+optionContext+", existingData : "+existingData);
+      // System.out.println("FilePathConverter.getAllPossibleValues() : optionContext ::
+      // "+optionContext+", existingData : "+existingData);
-      
+
-        // if existingData is empty, start from root 
+        // if existingData is empty, start from root
-      
+
-        if (!prefixToUse.endsWith(File.separator) && (prependAbsolute || existingData.startsWith(".")) ) {
+        if (!prefixToUse.endsWith(File.separator)
+            && (prependAbsolute || existingData.startsWith("."))) {
-          completions.add(new Completion(prefixToUse+completionValues[i]));
+          completions.add(new Completion(prefixToUse + completionValues[i]));
-    
+
-  
+
-    
+
