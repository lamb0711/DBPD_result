GEODE-17: refactor ManagementIntercepter and MBeanServerWrapper

+import com.gemstone.gemfire.cache.operations.OperationContext.OperationCode;
+import com.gemstone.gemfire.security.GemFireSecurityException;
+
+import javax.management.Descriptor;
+import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanOperationInfo;
-  private ResourceOperationContext doAuthorization(ObjectName name, String methodName, Object[] methodParams){
-    return interceptor.authorize(name,methodName, methodParams);
+  private void doAuthorization(ResourceOperationContext context){
+    interceptor.authorize(context);
-  private void doAuthorizationPost(ObjectName name, String methodName, ResourceOperationContext context, Object result){
-    interceptor.postAuthorize(name,methodName,context,result);
+  private void doAuthorizationPost(ResourceOperationContext context){
+    interceptor.postAuthorize(context);
-    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name});
-    ObjectInstance result = mbs.createMBean(className, name);
-    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
-    return result;
+    throw new SecurityException(ACCESS_DENIED_MESSAGE);
-    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name});
-    ObjectInstance result = mbs.createMBean(className, name, loaderName);
-    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
-    return result;
+    throw new SecurityException(ACCESS_DENIED_MESSAGE);
-    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name, params});
-    ObjectInstance result = mbs.createMBean(className,name,params,signature);
-    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
-    return result;
+    throw new SecurityException(ACCESS_DENIED_MESSAGE);
-    ResourceOperationContext ctx = doAuthorization(name, CREATE_MBEAN, new Object[]{name});
-    ObjectInstance result = mbs.createMBean(className, name, loaderName, params, signature);
-    doAuthorizationPost(name, CREATE_MBEAN, ctx, result);
-    return result;
+    throw new SecurityException(ACCESS_DENIED_MESSAGE);
-    ResourceOperationContext ctx = doAuthorization(name, REGISTER_MBEAN, new Object[]{name});
-    ObjectInstance result = mbs.registerMBean(object, name);
-    doAuthorizationPost(name, REGISTER_MBEAN, ctx, result);
-    return result;
+    throw new SecurityException(ACCESS_DENIED_MESSAGE);
-    ResourceOperationContext ctx = doAuthorization(name, UNREGISTER_MBEAN, new Object[]{});
-    mbs.unregisterMBean(name);
-    doAuthorizationPost(name, UNREGISTER_MBEAN, ctx, null);
+    throw new SecurityException(ACCESS_DENIED_MESSAGE);
+    ResourceOperationContext ctx = new ResourceOperationContext(Resource.MBEAN, OperationCode.QUERY);
-    ResourceOperationContext ctx = doAuthorization(name, GET_ATTRIBUTE,  new Object[]{attribute});
+    ResourceOperationContext ctx = getAttributeContext(name, attribute);
+    doAuthorization(ctx);
-    doAuthorizationPost(name, GET_ATTRIBUTE, ctx, result);
+    ctx.setPostOperationResult(result);
+    doAuthorizationPost(ctx);
-    ResourceOperationContext ctx = doAuthorization(name, GET_ATTRIBUTES, new Object[]{attributes});
-    AttributeList result = mbs.getAttributes(name, attributes);
-    doAuthorizationPost(name, GET_ATTRIBUTES, ctx, result);
-    return result;
+    AttributeList results = new AttributeList();
+    for(String attribute:attributes){
+      try {
+        Object value = getAttribute(name, attribute);
+        Attribute att = new Attribute(attribute, value);
+        results.add(att);
+      } catch (Exception e) {
+        throw new GemFireSecurityException("error getting value of "+attribute+" from "+name, e);
+      }
+    }
+    return results;
-    ResourceOperationContext ctx = doAuthorization(name, SET_ATTRIBUTE, new Object[]{attribute});
+    ResourceOperationContext ctx = getAttributeContext(name, attribute.getName());
+    doAuthorization(ctx);
-    doAuthorizationPost(name, SET_ATTRIBUTE, ctx, null);
+  }
+
+  // TODO: cache this
+  private ResourceOperationContext getAttributeContext(ObjectName name, String attribute)
+      throws InstanceNotFoundException, ReflectionException {
+    MBeanInfo beanInfo = null;
+    try {
+      beanInfo = mbs.getMBeanInfo(name);
+    } catch (IntrospectionException e) {
+      throw new GemFireSecurityException("error getting beanInfo of "+name);
+    }
+    MBeanAttributeInfo[] attributeInfos = beanInfo.getAttributes();
+    for(MBeanAttributeInfo attributeInfo:attributeInfos){
+      if(attributeInfo.getName().equals(attribute)){
+        // found the operationInfo of this method on the bean
+        Descriptor descriptor = attributeInfo.getDescriptor();
+        Resource resource = (Resource)descriptor.getFieldValue("resource");
+        OperationCode operationCode = (OperationCode)descriptor.getFieldValue("operation");
+        if(resource!=null && operationCode!=null){
+          return new ResourceOperationContext(resource, operationCode);
+        }
+      }
+    }
+    return new ResourceOperationContext(Resource.DEFAULT, OperationCode.LIST_DS);
+  }
+
+  // TODO: cache this
+  private ResourceOperationContext getOperationContext(ObjectName name, String operationName)
+      throws InstanceNotFoundException, ReflectionException {
+    MBeanInfo beanInfo = null;
+    try {
+      beanInfo = mbs.getMBeanInfo(name);
+    } catch (IntrospectionException e) {
+      throw new GemFireSecurityException("error getting beanInfo of "+name);
+    }
+    MBeanOperationInfo[] opInfos = beanInfo.getOperations();
+    for(MBeanOperationInfo opInfo:opInfos){
+      if(opInfo.getName().equals(operationName)){
+        // found the operationInfo of this method on the bean
+        Descriptor descriptor = opInfo.getDescriptor();
+        String resource = (String)descriptor.getFieldValue("resource");
+        String operationCode = (String)descriptor.getFieldValue("operation");
+        if(resource!=null && operationCode!=null){
+          return new ResourceOperationContext(resource, operationCode);
+        }
+      }
+    }
+    return new ResourceOperationContext(Resource.DEFAULT, OperationCode.LIST_DS);
-    ResourceOperationContext ctx = doAuthorization(name, SET_ATTRIBUTES, new Object[]{attributes});
-    AttributeList result = mbs.setAttributes(name, attributes);
-    doAuthorizationPost(name, SET_ATTRIBUTES, ctx, result);
-    return result;
+    // call setAttribute instead to use the authorization logic
+    for(Attribute attribute:attributes.asList()){
+      try {
+        setAttribute(name, attribute);
+      } catch (Exception e) {
+        throw new GemFireSecurityException("error setting attribute "+attribute+" of "+name);
+      }
+    }
+    return attributes;
-    ResourceOperationContext ctx = doAuthorization(name, operationName, new Object[]{params, signature});
+    ResourceOperationContext ctx = getOperationContext(name, operationName);
+    doAuthorization(ctx);
-    doAuthorizationPost(name, operationName, ctx, result);
+    ctx.setPostOperationResult(result);
+    doAuthorizationPost(ctx);
