Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-* The GetDeliveredOrders class is a gemfire function that gives details about delivered orders.
-* <p/>
-* @since GemFire 8.0
-*/
+ * The GetDeliveredOrders class is a gemfire function that gives details about delivered orders.
+ * <p/>
+ * 
+ * @since GemFire 8.0
+ */
-public class GetDeliveredOrders  implements Function {
+public class GetDeliveredOrders implements Function {
-    
+
-    
-    String oql = "SELECT o.purchaseOrderNo, o.deliveryDate  FROM /orders o WHERE o.deliveryDate != NULL";
+
+    String oql =
+        "SELECT o.purchaseOrderNo, o.deliveryDate  FROM /orders o WHERE o.deliveryDate != NULL";
-   
+
-      
-      if(result instanceof Collection<?>)
-        for(Object item : result){
+
+      if (result instanceof Collection<?>)
+        for (Object item : result) {
-      if(c != null)
-        c.getLogger().info("Caught FunctionDomainException while executing function GetDeliveredOrders: " + e.getMessage());
-        
+      if (c != null)
+        c.getLogger()
+            .info("Caught FunctionDomainException while executing function GetDeliveredOrders: "
+                + e.getMessage());
+
-      if(c != null)
-        c.getLogger().info("Caught TypeMismatchException while executing function GetDeliveredOrders: " + e.getMessage());
-      
+      if (c != null)
+        c.getLogger()
+            .info("Caught TypeMismatchException while executing function GetDeliveredOrders: "
+                + e.getMessage());
+
-      if(c != null)
-        c.getLogger().info("Caught NameResolutionException while executing function GetDeliveredOrders: " + e.getMessage());
-      
+      if (c != null)
+        c.getLogger()
+            .info("Caught NameResolutionException while executing function GetDeliveredOrders: "
+                + e.getMessage());
+
-      if(c != null)
-        c.getLogger().info("Caught QueryInvocationTargetException while executing function GetDeliveredOrders: " + e.getMessage());
-      
+      if (c != null)
+        c.getLogger().info(
+            "Caught QueryInvocationTargetException while executing function GetDeliveredOrders: "
+                + e.getMessage());
+
-    
+
