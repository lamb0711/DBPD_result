GEODE-5918 Geode function security should be dynamically determined by function arguments (#2727)



- * return a non-null identifier and register your function using
- * {@link FunctionService#registerFunction(Function)} or the cache.xml <code>function</code>
- * element.
+ * return a non-null identifier and register your function using {@link
+ * FunctionService#registerFunction(Function)} or the cache.xml <code>function</code> element.
-   * Return a unique function identifier, used to register the function with {@link FunctionService}
+   * Return a unique function identifier, used to register the function with {@link
+   * FunctionService}
-   * {@link FunctionService#onRegion(org.apache.geode.cache.Region)} and any associated
-   * {@linkplain Execution#withFilter(java.util.Set) routing objects}.
+   * {@link FunctionService#onRegion(org.apache.geode.cache.Region)} and any associated {@linkplain
+   * Execution#withFilter(java.util.Set) routing objects}.
-   * Returning false will optimize for read behavior on the targeted
-   * {@link FunctionService#onRegion(org.apache.geode.cache.Region)} and any associated
-   * {@linkplain Execution#withFilter(java.util.Set) routing objects}.
+   * Returning false will optimize for read behavior on the targeted {@link
+   * FunctionService#onRegion(org.apache.geode.cache.Region)} and any associated {@linkplain
+   * Execution#withFilter(java.util.Set) routing objects}.
-   * FunctionService#onRegion(org.apache.geode.cache.Region) is a partitioned region
+   * FunctionService#onRegion(org.apache.geode.cache.Region)
+   * is a partitioned region
-   *        cases, it will be null. This method returns permissions appropriate to the context,
-   *        independent of the presence of the regionName parameter.
+   *        cases,
+   *        it will be null. This method returns permissions appropriate to the context, independent
+   *        of the
+   *        presence of the regionName parameter.
+
+  /**
+   * Returns the list of ResourcePermission this function requires.
+   * <p>
+   * By default, functions require DATA:WRITE permission. If your function requires other
+   * permissions, you will need to override this method.
+   * </p>
+   * <p>
+   * Please be as specific as possible when you set the required permissions for your function e.g.
+   * if your function reads from a region, it would be good to include the region name in your
+   * permission. It's better to return "DATA:READ:regionName" as the required permission other than
+   * "DATA:READ", because the latter means only users with read permission on ALL regions can
+   * execute your function.
+   * </p>
+   * <p>
+   * All the permissions returned from this method will be ANDed together.
+   * </p>
+   *
+   * @param regionName the region this function will be executed on. The regionName is optional and
+   *        will only be present when the function is executed by an onRegion() executor. In other
+   *        cases,
+   *        it will be null. This method returns permissions appropriate to the context, independent
+   *        of the
+   *        presence of the regionName parameter.
+   * @param args the arguments to the function.
+   * @return a collection of {@link ResourcePermission}s indicating the permissions required to
+   *         execute the function.
+   */
+  default Collection<ResourcePermission> getRequiredPermissions(String regionName, Object args) {
+    return getRequiredPermissions(regionName);
+  }
