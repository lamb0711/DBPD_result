Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A special purpose semaphore that allows reentrancy. With this semaphore, a thread
- * will only acquire a real permit the first time it calls acquire. After that, the
- * thread can call acquire repeatedly, and it won't affect the semaphore count until
- * the thread calls release the same number of times as acquire.
+ * A special purpose semaphore that allows reentrancy. With this semaphore, a thread will only
+ * acquire a real permit the first time it calls acquire. After that, the thread can call acquire
+ * repeatedly, and it won't affect the semaphore count until the thread calls release the same
+ * number of times as acquire.
- * This semaphore currently only supports a thread acquiring and releasing a single permit at
- * a time.
+ * This semaphore currently only supports a thread acquiring and releasing a single permit at a
+ * time.
-    if(incHoldCount()) {
+    if (incHoldCount()) {
-    if(incHoldCount()) {
+    if (incHoldCount()) {
-    if(incHoldCount()) {
+    if (incHoldCount()) {
-      if(!result) {
+      if (!result) {
-  public boolean tryAcquire(long timeout, TimeUnit unit)
-      throws InterruptedException {
-    if(incHoldCount()) {
+  public boolean tryAcquire(long timeout, TimeUnit unit) throws InterruptedException {
+    if (incHoldCount()) {
-      if(!result) {
+      if (!result) {
-    if(decHoldCount()) {
+    if (decHoldCount()) {
-    throw new UnsupportedOperationException("ReentrantSemaphore doesn't support a single thread using more than one permit");
+    throw new UnsupportedOperationException(
+        "ReentrantSemaphore doesn't support a single thread using more than one permit");
-    throw new UnsupportedOperationException("ReentrantSemaphore doesn't support a single thread using more than one permit");
+    throw new UnsupportedOperationException(
+        "ReentrantSemaphore doesn't support a single thread using more than one permit");
-    throw new UnsupportedOperationException("ReentrantSemaphore doesn't support a single thread using more than one permit");
+    throw new UnsupportedOperationException(
+        "ReentrantSemaphore doesn't support a single thread using more than one permit");
-  public boolean tryAcquire(int permits, long timeout, TimeUnit unit)
-      throws InterruptedException {
-    throw new UnsupportedOperationException("ReentrantSemaphore doesn't support a single thread using more than one permit");
+  public boolean tryAcquire(int permits, long timeout, TimeUnit unit) throws InterruptedException {
+    throw new UnsupportedOperationException(
+        "ReentrantSemaphore doesn't support a single thread using more than one permit");
-    throw new UnsupportedOperationException("ReentrantSemaphore doesn't support a single thread using more than one permit");
+    throw new UnsupportedOperationException(
+        "ReentrantSemaphore doesn't support a single thread using more than one permit");
-    if(count != null) {
+    if (count != null) {
-    } {
+    }
+    {
-  
+
-    if(count == null) {
+    if (count == null) {
-    } 
-    if(count.intValue() == 1) {
+    }
+    if (count.intValue() == 1) {
-  public boolean tryAcquireMs(int permits, long timeout)
-      throws InterruptedException {
+  public boolean tryAcquireMs(int permits, long timeout) throws InterruptedException {
