GEODE-3268: Refactoring RegionCommands

This closes #693

+
-import java.util.LinkedHashSet;
-import java.util.TreeSet;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.management.internal.cli.domain.RegionInformation;
-import org.apache.geode.management.internal.cli.functions.GetRegionsFunction;
-import org.apache.geode.management.internal.cli.result.CompositeResultData.SectionResultData;
-import org.apache.geode.security.ResourcePermission.Operation;
-import org.apache.geode.security.ResourcePermission.Resource;
+import org.apache.geode.security.ResourcePermission;
-/**
- * Class containing implementation of commands based on region:
- * <ul>
- * <li>list region
- * <li>describe region
- * </ul>
- * 
- * @since GemFire 7.0
- */
-public class RegionCommands implements GfshCommand {
-  private static final GetRegionsFunction getRegionsFunction = new GetRegionsFunction();
+public class DescribeRegionCommand implements GfshCommand {
-  @CliCommand(value = {CliStrings.LIST_REGION}, help = CliStrings.LIST_REGION__HELP)
-  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION)
-  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
-  public Result listRegion(
-      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
-          optionContext = ConverterHint.MEMBERGROUP,
-          help = CliStrings.LIST_REGION__GROUP__HELP) String[] group,
-      @CliOption(key = {CliStrings.MEMBER, CliStrings.MEMBERS},
-          optionContext = ConverterHint.MEMBERIDNAME,
-          help = CliStrings.LIST_REGION__MEMBER__HELP) String[] memberNameOrId) {
-    Result result = null;
-    try {
-      Set<RegionInformation> regionInfoSet = new LinkedHashSet<>();
-      ResultCollector<?, ?> rc;
-
-      Set<DistributedMember> targetMembers = CliUtil.findMembers(group, memberNameOrId);
-
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      TabularResultData resultData = ResultBuilder.createTabularResultData();
-      rc = CliUtil.executeFunction(getRegionsFunction, null, targetMembers);
-
-      ArrayList<?> resultList = (ArrayList<?>) rc.getResult();
-
-      if (resultList != null) {
-
-        for (Object resultObj : resultList) {
-          if (resultObj != null) {
-            if (resultObj instanceof Object[]) {
-              Object[] resultObjectArray = (Object[]) resultObj;
-              for (Object regionInfo : resultObjectArray) {
-                if (regionInfo instanceof RegionInformation) {
-                  regionInfoSet.add((RegionInformation) regionInfo);
-                }
-              }
-            }
-          }
-        }
-
-        Set<String> regionNames = new TreeSet<>();
-
-        for (RegionInformation regionInfo : regionInfoSet) {
-          regionNames.add(regionInfo.getName());
-          Set<String> subRegionNames = regionInfo.getSubRegionNames();
-
-          regionNames.addAll(subRegionNames);
-        }
-
-        for (String regionName : regionNames) {
-          resultData.accumulate("List of regions", regionName);
-        }
-
-        if (!regionNames.isEmpty()) {
-          result = ResultBuilder.buildResult(resultData);
-
-        } else {
-          result = ResultBuilder.createInfoResult(CliStrings.LIST_REGION__MSG__NOT_FOUND);
-        }
-      }
-    } catch (FunctionInvocationTargetException e) {
-      result = ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.LIST_REGION));
-    } catch (Exception e) {
-      result = ResultBuilder
-          .createGemFireErrorResult(CliStrings.LIST_REGION__MSG__ERROR + " : " + e.getMessage());
-    }
-    return result;
-  }
-
-  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
+  @ResourceOperation(resource = ResourcePermission.Resource.CLUSTER,
+      operation = ResourcePermission.Operation.READ)
-        SectionResultData regionSection = crd.addSection();
+        CompositeResultData.SectionResultData regionSection = crd.addSection();
-            writeFixedPartitionAttributesToTable(table, "", fpaList, member, memberNameAdded);
+            writeFixedPartitionAttributesToTable(table, fpaList, member, memberNameAdded);
-  private boolean writeFixedPartitionAttributesToTable(TabularResultData table,
-      String attributeType, List<FixedPartitionAttributesInfo> fpaList, String member,
-      boolean isMemberNameAdded) {
+  private void writeFixedPartitionAttributesToTable(TabularResultData table,
+      List<FixedPartitionAttributesInfo> fpaList, String member, boolean isMemberNameAdded) {
-          type = attributeType;
+          type = "";
-    return isMemberNameAdded;
-  public void writeAttributeToTable(TabularResultData table, String member, String attributeType,
+  private void writeAttributeToTable(TabularResultData table, String member, String attributeType,
-
-
-
-  public void addChildSection(SectionResultData parentSection, Map<String, String> map,
-      String header) {
-    if (!map.isEmpty()) {
-      Set<String> attributes = map.keySet();
-      SectionResultData section = parentSection.addSection();
-      section.setHeader(header);
-      for (String attribute : attributes) {
-        section.addData(attribute, map.get(attribute));
-      }
-    }
-  }
