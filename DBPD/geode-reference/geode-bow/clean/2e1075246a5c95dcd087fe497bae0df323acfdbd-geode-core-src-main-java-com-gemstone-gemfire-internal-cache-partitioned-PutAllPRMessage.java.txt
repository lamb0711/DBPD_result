Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.internal.cache.KeyWithRegionContext;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
- * @since 6.0
+ * @since GemFire 6.0
-  protected static final short FETCH_FROM_HDFS = (SKIP_CALLBACKS << 1);
-  //using the left most bit for IS_PUT_DML, the last available bit
-  protected static final short IS_PUT_DML = (short) (FETCH_FROM_HDFS << 1);
-  /** whether this operation should fetch oldValue from HDFS */
-  private boolean fetchFromHDFS;
-  
-  private boolean isPutDML;
-      boolean posDup, boolean skipCallbacks, Object callbackArg, boolean fetchFromHDFS, boolean isPutDML) {
+      boolean posDup, boolean skipCallbacks, Object callbackArg) {
-    this.fetchFromHDFS = fetchFromHDFS;
-    this.isPutDML = isPutDML; 
-      // get the "keyRequiresRegionContext" flag from first element assuming
-      // all key objects to be uniform
-      final boolean requiresRegionContext =
-        (this.putAllPRData[0].getKey() instanceof KeyWithRegionContext);
-        putAllPRData[i].toData(out, requiresRegionContext);
+        putAllPRData[i].toData(out);
-    if (this.fetchFromHDFS) s |= FETCH_FROM_HDFS;
-    if (this.isPutDML) s |= IS_PUT_DML;
-    this.fetchFromHDFS = ((s & FETCH_FROM_HDFS) != 0);
-    this.isPutDML = ((s & IS_PUT_DML) != 0);
+  @Retained
-    EntryEventImpl ev = EntryEventImpl.create(r, 
+    @Retained EntryEventImpl ev = EntryEventImpl.create(r, 
-    EntryEventImpl baseEvent = null;
+    @Released EntryEventImpl baseEvent = null;
-    final boolean keyRequiresRegionContext = r.keyRequiresRegionContext();
-      if (keyRequiresRegionContext) {
-        ((KeyWithRegionContext)keys[i]).setRegionContext(r);
-      }
-            EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks, this.isPutDML);
+            @Released EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);
-            // set the fetchFromHDFS flag
-            ev.setFetchFromHDFS(this.fetchFromHDFS);
-            
-        EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks, this.isPutDML);
+        EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);
+  @Retained
-      boolean posDup, boolean skipCallbacks, boolean isPutDML) {
+      boolean posDup, boolean skipCallbacks) {
-    EntryEventImpl ev = EntryEventImpl.create(r, prd.getOp(), prd.getKey(), prd
+    @Retained EntryEventImpl ev = EntryEventImpl.create(r, prd.getOp(), prd.getKey(), prd
-    ev.setPutDML(isPutDML);
-   * @since 5.8
+   * @since GemFire 5.8
