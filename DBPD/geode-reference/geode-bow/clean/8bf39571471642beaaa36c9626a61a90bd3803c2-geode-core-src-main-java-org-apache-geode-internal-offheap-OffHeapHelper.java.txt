Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
+   * 
-      @Unretained StoredObject ohv = (StoredObject) v;
+      @Unretained
+      StoredObject ohv = (StoredObject) v;
-      if (ohv.isSerialized()) {
-        return CachedDeserializableFactory.create(ohv.getSerializedValue());
-      } else {
-        // it is a byte[]
-        return ohv.getDeserializedForReading();
-      }
+        if (ohv.isSerialized()) {
+          return CachedDeserializableFactory.create(ohv.getSerializedValue());
+        } else {
+          // it is a byte[]
+          return ohv.getDeserializedForReading();
+        }
-   * If v is on heap then just return v; no copy needed.
-   * Else v is off-heap so copy it to heap and return a reference to the heap copy.
-   * Note that unlike {@link #getHeapForm(Object)} if v is a serialized off-heap object it will be copied to the heap as a CachedDeserializable.
-   * If you prefer to have the serialized object also deserialized and copied to the heap use {@link #getHeapForm(Object)}.
+   * If v is on heap then just return v; no copy needed. Else v is off-heap so copy it to heap and
+   * return a reference to the heap copy. Note that unlike {@link #getHeapForm(Object)} if v is a
+   * serialized off-heap object it will be copied to the heap as a CachedDeserializable. If you
+   * prefer to have the serialized object also deserialized and copied to the heap use
+   * {@link #getHeapForm(Object)}.
-      @Unretained StoredObject ohv = (StoredObject) v;
+      @Unretained
+      StoredObject ohv = (StoredObject) v;
-  
+
+
+   * 
-  
+
+   * 
