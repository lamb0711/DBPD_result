GEODE-7312: modify the ThreadMonitor to print the stack of a blocking thread

Log a thread trace for a thread that's blocking a "stuck" thread.

This will help a lot when a user experiences hung operations.  Prior to
this change we needed to request thread dumps for servers and that was
usually not possible to obtain because the servers had already been
terminated & restarted.  This change puts the relevant thread dumps in
the server's log file, which is much easier for folks to gather after
the fact.

+  public static final String LOCK_OWNER_THREAD_STACK = "Lock owner thread stack";
-    logger.warn(handleLogMessage(stuckTime));
+    logger.warn(createThreadReport(stuckTime));
-  private String handleLogMessage(long stuckTime) {
+  String createThreadReport(long stuckTime) {
-    StringBuilder strb = new StringBuilder();
+    StringBuilder stringBuilder = new StringBuilder();
+    final String lineSeparator = System.lineSeparator();
-    strb.append("Thread <").append(this.threadID).append("> (0x")
+    stringBuilder.append("Thread <").append(this.threadID).append("> (0x")
-        .append(this.numIterationsStuck).append("> ").append(System.lineSeparator());
+        .append(this.numIterationsStuck).append("> ").append(lineSeparator);
-      strb.append("Thread Name <").append(thread.getThreadName()).append(">")
+      stringBuilder.append("Thread Name <").append(thread.getThreadName()).append(">")
-          .append(">").append(System.lineSeparator());
+          .append(">").append(lineSeparator);
-        strb.append("Waiting on <").append(thread.getLockName()).append(">")
-            .append(System.lineSeparator());
+        stringBuilder.append("Waiting on <").append(thread.getLockName()).append(">")
+            .append(lineSeparator);
-        strb.append("Owned By <").append(thread.getLockOwnerName()).append("> with ID <")
-            .append(thread.getLockOwnerId()).append(">").append(System.lineSeparator());
+        stringBuilder.append("Owned By <").append(thread.getLockOwnerName()).append("> with ID <")
+            .append(thread.getLockOwnerId()).append(">").append(lineSeparator);
-    strb.append("Executor Group <").append(groupName).append(">").append(System.lineSeparator())
+    stringBuilder.append("Executor Group <").append(groupName).append(">").append(
+        lineSeparator)
-        .append(System.lineSeparator());
+        .append(lineSeparator);
-      strb.append("Thread Stack:").append(System.lineSeparator());
-      for (int i = 0; i < thread.getStackTrace().length; i++) {
-        String row = thread.getStackTrace()[i].toString();
-        strb.append(row).append(System.lineSeparator());
+      writeThreadStack(thread, "Thread stack:", stringBuilder);
+    }
+
+    if (logThreadDetails && thread.getLockOwnerName() != null) {
+      ThreadInfo lockOwnerThread = ManagementFactory.getThreadMXBean()
+          .getThreadInfo(thread.getLockOwnerId(), THREAD_DUMP_DEPTH);
+      if (lockOwnerThread != null) {
+        writeThreadStack(lockOwnerThread, LOCK_OWNER_THREAD_STACK, stringBuilder);
-    return strb.toString();
+    return stringBuilder.toString();
+  }
+
+  private void writeThreadStack(ThreadInfo thread, String header, StringBuilder strb) {
+    final String lineSeparator = System.lineSeparator();
+    strb.append(header).append(lineSeparator);
+    for (int i = 0; i < thread.getStackTrace().length; i++) {
+      String row = thread.getStackTrace()[i].toString();
+      strb.append(row).append(lineSeparator);
+    }
