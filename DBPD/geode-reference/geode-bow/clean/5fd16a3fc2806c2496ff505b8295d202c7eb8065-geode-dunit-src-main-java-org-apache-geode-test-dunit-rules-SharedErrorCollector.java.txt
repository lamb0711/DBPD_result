GEODE-6033: Support dynamic VMs in SharedErrorCollector (#3168)

Make SharedErrorCollector support create and bounce VM.

+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
-@SuppressWarnings("serial,unused")
-  private static volatile ProtectedErrorCollector errorCollector;
+  private static volatile VisibleErrorCollector errorCollector;
+
+  private final Map<Integer, List<Throwable>> beforeBounceErrors = new HashMap<>();
-    invoker().invokeInEveryVMAndController(() -> errorCollector = new ProtectedErrorCollector());
+    invoker().invokeInEveryVMAndController(() -> invokeBefore());
-    ProtectedErrorCollector allErrors = errorCollector;
+    VisibleErrorCollector allErrors = errorCollector;
-        List<Throwable> remoteFailures = new ArrayList<>();
-        remoteFailures.addAll(vm.invoke(() -> errorCollector.errors()));
+        List<Throwable> remoteFailures = new ArrayList<>(vm.invoke(() -> errorCollector.errors()));
+  @Override
+  protected void afterCreateVM(VM vm) {
+    vm.invoke(() -> invokeBefore());
+  }
+
+  @Override
+  protected void beforeBounceVM(VM vm) {
+    beforeBounceErrors.put(vm.getId(), vm.invoke(() -> errorCollector.errors()));
+  }
+
+  @Override
+  protected void afterBounceVM(VM vm) {
+    List<Throwable> beforeBounceErrorsForVM = beforeBounceErrors.remove(vm.getId());
+    vm.invoke(() -> {
+      invokeBefore();
+      errorCollector.addErrors(beforeBounceErrorsForVM);
+    });
+  }
+
+  private void invokeBefore() {
+    errorCollector = new VisibleErrorCollector();
+  }
+
-   * Uses reflection to acquire access to the {@code List} of {@code Throwable}s in
-   * {@link ErrorCollector}.
+   * Increases visibility of {@link #verify()} to public and uses reflection to acquire access to
+   * the {@code List} of {@code Throwable}s in {@link ErrorCollector}.
-  private static class ProtectedErrorCollector extends ErrorCollector {
+  private static class VisibleErrorCollector extends ErrorCollector {
-    private final List<Throwable> protectedErrors;
+    private final List<Throwable> visibleErrors;
-    ProtectedErrorCollector() {
-      try {
-        Field superErrors = ErrorCollector.class.getDeclaredField("errors");
-        superErrors.setAccessible(true);
-        protectedErrors = (List<Throwable>) superErrors.get(this);
-      } catch (IllegalAccessException | NoSuchFieldException e) {
-        throw new RuntimeException(e);
-      }
-    }
-
-    List<Throwable> errors() {
-      return protectedErrors;
+    private VisibleErrorCollector() {
+      visibleErrors = getErrorsReference();
+
+    List<Throwable> errors() {
+      return visibleErrors;
+    }
+
+    void addErrors(Collection<Throwable> errors) {
+      visibleErrors.addAll(errors);
+    }
+
+    private List<Throwable> getErrorsReference() {
+      try {
+        Field superErrors = ErrorCollector.class.getDeclaredField("errors");
+        superErrors.setAccessible(true);
+        return (List<Throwable>) superErrors.get(this);
+      } catch (IllegalAccessException | NoSuchFieldException e) {
+        throw new RuntimeException(e);
+      }
+    }
