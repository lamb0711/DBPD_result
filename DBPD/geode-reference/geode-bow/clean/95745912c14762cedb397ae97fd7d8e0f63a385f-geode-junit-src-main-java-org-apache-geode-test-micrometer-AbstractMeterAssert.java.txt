GEODE-7171: Encapsulate metrics session (#4203)

Metrics session responsibilities are starting to appear in too many
parts of Geode. This change encapsulates those responsibilities into a
single class.

Changes to core Geode classes:

- GemFireCacheImpl no longer holds a meter registry or the set of "user"
  registries added by the cache builder.

- InternalCacheBuilder no longer constructs objects on behalf of the
  metrics session.  Instead, it gathers meter registries and other
  details into a MetricsService.Builder, which it passes to the
  InternalDistributedSystem.Builder.

- InternalDistributedSystem no longer knows about client meter
  registries. Instead, it holds a MetricsService, which remembers its
  builder.  During reconnect, the InternalDistributedSystem retrieves
  the builder from its metrics service, and uses the builder to build
  a similar metrics service in the reconnected system.

New classes and interfaces (org.apache.geode.metrics.internal):

- StandardMeterBinder
  - Binds standard meter binders to the meter registry.
  - close() closes the closeable binders, freeing their resources.

- MetricsService interface
  - Extends MetricsSession.
  - Adds methods to start and stop the service, and to access the
    service's meter registry.
  - Adds a method that returns the builder that built the metrics
    service, so that reconnect can use the same builder to build the
    metrics service for the reconnected system.

- InternalDistributedSystemMetricsService
  - Implements MetricsService.
  - Creates and retains a composite meter registry to manage meters.
  - Configures the composite composite registry:
    - Adds common tags that describe the system
    - Adds client meter registries to the composite.
    - Applies a StandardMeterBinder to add standard meters to the
      registry.
  - Discovers, starts, and stops metrics publishing services.
  - Adds and removes sub-registries as instructed by publishing
    services.
  - When stopped, stops each publishing service, closes all closeable
    meter binders, removes all sub-registries, and closes its composite
    meter registry.

- MetricsService.Builder interface

- InternalDistriburtedSystemMetricsService.Builder
  - Implements MetricsService.Builder
  - Accumulates and retains constructor parameters for the eventual
    InternalDistributedSystemMetricsService.
  - In particular, maintains a collection of meter registries added by
    the cache builder. It calls these 'persistent' registries, because
    they will persist across reconnects.

Other changes:

- Added MetricsSession parameter to MetricsPublishingService.stop().

Authored-by: Dale Emery <demery@pivotal.io>
+
-
-  private final Meter.Id meterId;
-
-    meterId = meter.getId();
+  }
+
+  public void hasId(Meter.Id expectedId) {
+    isNotNull();
+    Meter.Id actualId = actualId();
+    if (!Objects.equals(actualId, expectedId)) {
+      failWithMessage("Expected meter to have id <%s> but id was <%s>", expectedId, actualId);
+    }
-    String meterName = meterId.getName();
+    Meter.Id actualId = actualId();
+    if (actualId == null) {
+      failWithMessage("Expected meter to have name <%s> but id was null", expectedName);
+    }
+    String meterName = actualId.getName();
-    if (meterId.getTag(key) == null) {
+    Meter.Id actualId = actualId();
+    if (actualId.getTag(key) == null) {
-          key, meterId.getTags());
+          key, actualId.getTags());
-    String tagValue = meterId.getTag(key);
+    String tagValue = actualId().getTag(key);
-      failWithMessage("Expected meter's <%s> tag to have value <%s>"
-          + " but value was <%s>",
+      failWithMessage("Expected meter's <%s> tag to have value <%s> but value was <%s>",
+  public void hasNoTag(String key) {
+    isNotNull();
+    Meter.Id actualId = actualId();
+    if (actualId.getTag(key) != null) {
+      failWithMessage(
+          "Expected meter to have no tag with key <%s> but meter had that tag with value <%s>",
+          key, actualId.getTag(key));
+    }
+  }
+
-    String meterBaseUnit = meterId.getBaseUnit();
+    String meterBaseUnit = actualId().getBaseUnit();
+
+  private Meter.Id actualId() {
+    return actual.getId();
+  }
