GEODE-420: Added tests to cover the ssl-enabled-components.
cleaned up code using AbstractDistributionConfig.checkAttributes to not require the method to return a value.
Added a validation step at the end of the initialization to validate the properties once all properties are set.

+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import com.gemstone.gemfire.InternalGemFireException;
-    computeMcastPortDefault();
+
+    // Make attributes read only
+    this.modifiable = true;
+    validateConfigurationProperties(props);
+    // Make attributes read only
+    this.modifiable = false;
+
+  }
+
+  /**
+   * Here we will validate the correctness of the set properties as per the CheckAttributeChecker annotations defined in #AbstractDistributionConfig
+   * @param props
+   */
+  private void validateConfigurationProperties(final HashMap props) {
+    for (Object o : props.keySet()) {
+      String propertyName = (String) o;
+      Object value = null;
+      try {
+        Method method = getters.get(propertyName);
+        if (method != null) {
+          value = method.invoke(this, new Object[] {});
+        }
+      } catch (Exception e) {
+        if (e instanceof RuntimeException) {
+          throw (RuntimeException) e;
+        }
+        if (e.getCause() instanceof RuntimeException) {
+          throw (RuntimeException) e.getCause();
+        } else {
+          throw new InternalGemFireException("error invoking getter for property" + propertyName );
+        }
+      }
+      checkAttribute(propertyName,value);
+    }
+    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-    if (clusterSSLOverRidden && !jmxSSLEnabledOverriden) {
+    if (clusterSSLOverRidden && !jmxSSLEnabledOverriden && !hasSSLComponents) {
-
+    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-    if (clusterSSLOverRidden && !httpServiceSSLEnabledOverriden) {
+    if (clusterSSLOverRidden && !httpServiceSSLEnabledOverriden && !hasSSLComponents) {
+    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-    if (clusterSSLOverRidden && !cacheServerSSLOverriden) {
+    if (clusterSSLOverRidden && !cacheServerSSLOverriden && !hasSSLComponents) {
+    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-    if (clusterSSLOverRidden && !gatewaySSLOverriden) {
+    if (clusterSSLOverRidden && !gatewaySSLOverriden && !hasSSLComponents) {
-  private void computeMcastPortDefault() {
-    // a no-op since multicast discovery has been removed
-    // and the default mcast port is now zero
-
-    //    ConfigSource cs = getAttSourceMap().get(ConfigurationProperties.MCAST_PORT);
-    //    if (cs == null) {
-    //      String locators = getLocators();
-    //      if (locators != null && !locators.isEmpty()) {
-    //        this.mcastPort = 0; // fixes 46308
-    //      }
-    //    }
-  }
-
-      computeMcastPortDefault();
-    this.httpServicePort = (Integer) checkAttribute(HTTP_SERVICE_PORT, value);
+    this.httpServicePort = value;
-    this.httpServiceBindAddress = (String) checkAttribute(HTTP_SERVICE_BIND_ADDRESS, value);
+    this.httpServiceBindAddress = value;
-    this.userCommandPackages = (String) checkAttribute(USER_COMMAND_PACKAGES, value);
+    this.userCommandPackages = value;
-    this.deltaPropagation = (Boolean) checkAttribute(DELTA_PROPAGATION, value);
+    this.deltaPropagation = (Boolean) value;
-    this.name = (String) checkAttribute(NAME, value);
+    this.name = (String) value;
-    this.tcpPort = (Integer) checkAttribute(TCP_PORT, value);
+    this.tcpPort = (Integer) value;
-    this.mcastPort = (Integer) checkAttribute(MCAST_PORT, value);
+    this.mcastPort = (Integer) value;
-    this.mcastTtl = (Integer) checkAttribute(MCAST_TTL, value);
+    this.mcastTtl = (Integer) value;
-    this.socketLeaseTime = (Integer) checkAttribute(SOCKET_LEASE_TIME, value);
+    this.socketLeaseTime = (Integer) value;
-    this.socketBufferSize = (Integer) checkAttribute(SOCKET_BUFFER_SIZE, value);
+    this.socketBufferSize = (Integer) value;
-    this.conserveSockets = (Boolean) checkAttribute(CONSERVE_SOCKETS, value);
+    this.conserveSockets = (Boolean) value;
-    this.roles = (String) checkAttribute(ROLES, value);
+    this.roles = (String) value;
-    this.mcastAddress = (InetAddress) checkAttribute(MCAST_ADDRESS, value);
+    this.mcastAddress = (InetAddress) value;
-    this.bindAddress = (String) checkAttribute(BIND_ADDRESS, value);
+    this.bindAddress = (String) value;
-    this.serverBindAddress = (String) checkAttribute(SERVER_BIND_ADDRESS, value);
+    this.serverBindAddress = (String) value;
-    this.locators = (String) checkAttribute(LOCATORS, value);
+    this.locators = (String) value;
-    this.deployWorkingDir = (File) checkAttribute(DEPLOY_WORKING_DIR, value);
+    this.deployWorkingDir = (File) value;
-    this.logFile = (File) checkAttribute(LOG_FILE, value);
+    this.logFile = (File) value;
-    this.logLevel = (Integer) checkAttribute(LOG_LEVEL, value);
+    this.logLevel = (Integer) value;
-        value = (String) checkAttribute(START_LOCATOR, value);
+        
-    this.statisticSamplingEnabled = (Boolean) checkAttribute(STATISTIC_SAMPLING_ENABLED, value);
+    this.statisticSamplingEnabled = (Boolean) value;
-    value = (Integer) checkAttribute(STATISTIC_SAMPLE_RATE, value);
+    value = (Integer) value;
-    this.statisticArchiveFile = (File) checkAttribute(STATISTIC_ARCHIVE_FILE, value);
+    this.statisticArchiveFile = (File) value;
-    this.cacheXmlFile = (File) checkAttribute(CACHE_XML_FILE, value);
+    this.cacheXmlFile = (File) value;
-    this.ackWaitThreshold = (Integer) checkAttribute(ACK_WAIT_THRESHOLD, value);
+    this.ackWaitThreshold = (Integer) value;
-    this.ackForceDisconnectThreshold = (Integer) checkAttribute(ACK_SEVERE_ALERT_THRESHOLD, value);
+    this.ackForceDisconnectThreshold = (Integer) value;
-    this.archiveDiskSpaceLimit = (Integer) checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
+    this.archiveDiskSpaceLimit = (Integer) value;
-    this.archiveFileSizeLimit = (Integer) checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
+    this.archiveFileSizeLimit = (Integer) value;
-    this.logDiskSpaceLimit = (Integer) checkAttribute(LOG_DISK_SPACE_LIMIT, value);
+    this.logDiskSpaceLimit = (Integer) value;
-    this.logFileSizeLimit = (Integer) checkAttribute(LOG_FILE_SIZE_LIMIT, value);
+    this.logFileSizeLimit = (Integer) value;
-    this.clusterSSLEnabled = (Boolean) checkAttribute(CLUSTER_SSL_ENABLED, value);
+    this.clusterSSLEnabled = (Boolean) value;
-    this.clusterSSLProtocols = (String) checkAttribute(CLUSTER_SSL_PROTOCOLS, value);
+    this.clusterSSLProtocols = (String) value;
-    this.clusterSSLCiphers = (String) checkAttribute(CLUSTER_SSL_CIPHERS, value);
+    this.clusterSSLCiphers = (String) value;
-    this.clusterSSLRequireAuthentication = (Boolean) checkAttribute(CLUSTER_SSL_REQUIRE_AUTHENTICATION, value);
+    this.clusterSSLRequireAuthentication = (Boolean) value;
-    value = (String) checkAttribute(CLUSTER_SSL_KEYSTORE, value);
+    
-    value = (String) checkAttribute(CLUSTER_SSL_KEYSTORE_TYPE, value);
+    
-    value = (String) checkAttribute(CLUSTER_SSL_KEYSTORE_PASSWORD, value);
+    
-    value = (String) checkAttribute(CLUSTER_SSL_TRUSTSTORE, value);
+    
-    value = (String) checkAttribute(CLUSTER_SSL_TRUSTSTORE_PASSWORD, value);
+    
-    mcastSendBufferSize = (Integer) checkAttribute(MCAST_SEND_BUFFER_SIZE, value);
+    mcastSendBufferSize = (Integer) value;
-    mcastRecvBufferSize = (Integer) checkAttribute(MCAST_RECV_BUFFER_SIZE, value);
+    mcastRecvBufferSize = (Integer) value;
-    this.asyncDistributionTimeout = (Integer) checkAttribute(ASYNC_DISTRIBUTION_TIMEOUT, value);
+    this.asyncDistributionTimeout = (Integer) value;
-    this.asyncQueueTimeout = (Integer) checkAttribute(ASYNC_QUEUE_TIMEOUT, value);
+    this.asyncQueueTimeout = (Integer) value;
-    this.asyncMaxQueueSize = (Integer) checkAttribute(ASYNC_MAX_QUEUE_SIZE, value);
+    this.asyncMaxQueueSize = (Integer) value;
-    mcastFlowControl = (FlowControlParams) checkAttribute(MCAST_FLOW_CONTROL, values);
+    mcastFlowControl = (FlowControlParams) values;
-    udpFragmentSize = (Integer) checkAttribute(UDP_FRAGMENT_SIZE, value);
+    udpFragmentSize = (Integer) value;
-    udpSendBufferSize = (Integer) checkAttribute(UDP_SEND_BUFFER_SIZE, value);
+    udpSendBufferSize = (Integer) value;
-    udpRecvBufferSize = (Integer) checkAttribute(UDP_RECV_BUFFER_SIZE, value);
+    udpRecvBufferSize = (Integer) value;
-    memberTimeout = (Integer) checkAttribute(MEMBER_TIMEOUT, value);
+    memberTimeout = (Integer) value;
-    this.clientConflation = (String) checkAttribute(CONFLATE_EVENTS, value);
+    this.clientConflation = (String) value;
-    durableClientId = (String) checkAttribute(DURABLE_CLIENT_ID, value);
+    durableClientId = (String) value;
-    durableClientTimeout = (Integer) checkAttribute(DURABLE_CLIENT_TIMEOUT, value);
+    durableClientTimeout = (Integer) value;
-    securityClientAuthInit = (String) checkAttribute(SECURITY_CLIENT_AUTH_INIT, value);
+    securityClientAuthInit = (String) value;
-    securityClientAuthenticator = (String) checkAttribute(SECURITY_CLIENT_AUTHENTICATOR, value);
+    securityClientAuthenticator = (String) value;
-    securityClientDHAlgo = (String) checkAttribute(SECURITY_CLIENT_DHALGO, value);
+    securityClientDHAlgo = (String) value;
-    securityPeerAuthInit = (String) checkAttribute(SECURITY_PEER_AUTH_INIT, value);
+    securityPeerAuthInit = (String) value;
-    securityPeerAuthenticator = (String) checkAttribute(SECURITY_PEER_AUTHENTICATOR, value);
+    securityPeerAuthenticator = (String) value;
-    securityClientAccessor = (String) checkAttribute(SECURITY_CLIENT_ACCESSOR, value);
+    securityClientAccessor = (String) value;
-    securityClientAccessorPP = (String) checkAttribute(SECURITY_CLIENT_ACCESSOR_PP, value);
+    securityClientAccessorPP = (String) value;
-    securityLogLevel = (Integer) checkAttribute(SECURITY_LOG_LEVEL, value);
+    securityLogLevel = (Integer) value;
-    securityLogFile = (File) checkAttribute(SECURITY_LOG_FILE, value);
+    securityLogFile = (File) value;
-    securityPeerMembershipTimeout = (Integer) checkAttribute(SECURITY_PEER_VERIFY_MEMBER_TIMEOUT, value);
+    securityPeerMembershipTimeout = (Integer) value;
-    this.distributedSystemId = (Integer) checkAttribute(DISTRIBUTED_SYSTEM_ID, distributedSystemId);
+    this.distributedSystemId = (Integer) distributedSystemId;
-    this.enforceUniqueHost = (Boolean) checkAttribute(ENFORCE_UNIQUE_HOST, enforceUniqueHost);
+    this.enforceUniqueHost = (Boolean) enforceUniqueHost;
-    this.redundancyZone = (String) checkAttribute(REDUNDANCY_ZONE, redundancyZone);
+    this.redundancyZone = (String) redundancyZone;
-    this.groups = (String) checkAttribute(GROUPS, value);
+    this.groups = (String) value;
-    value = (String) checkAttribute(JMX_MANAGER_SSL_KEYSTORE, value);
+    
-    value = (String) checkAttribute(JMX_MANAGER_SSL_KEYSTORE_TYPE, value);
+    
-    value = (String) checkAttribute(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, value);
+    
-    value = (String) checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE, value);
+    
-    value = (String) checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, value);
+    
-    this.jmxManagerPort = (Integer) checkAttribute(JMX_MANAGER_PORT, value);
+    this.jmxManagerPort = (Integer) value;
-    this.jmxManagerBindAddress = (String) checkAttribute(JMX_MANAGER_BIND_ADDRESS, value);
+    this.jmxManagerBindAddress = (String) value;
-    this.jmxManagerHostnameForClients = (String) checkAttribute(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, value);
+    this.jmxManagerHostnameForClients = (String) value;
-    this.jmxManagerPasswordFile = (String) checkAttribute(JMX_MANAGER_PASSWORD_FILE, value);
+    this.jmxManagerPasswordFile = (String) value;
-    this.jmxManagerAccessFile = (String) checkAttribute(JMX_MANAGER_ACCESS_FILE, value);
+    this.jmxManagerAccessFile = (String) value;
-    this.jmxManagerUpdateRate = (Integer) checkAttribute(JMX_MANAGER_UPDATE_RATE, value);
+    this.jmxManagerUpdateRate = (Integer) value;
-    membershipPortRange = (int[]) checkAttribute(MEMBERSHIP_PORT_RANGE, range);
+    membershipPortRange = (int[]) range;
-    this.remoteLocators = (String) checkAttribute(REMOTE_LOCATORS, value);
+    this.remoteLocators = (String) value;
-    this.memcachedPort = (Integer) checkAttribute(MEMCACHED_PORT, value);
+    this.memcachedPort = (Integer) value;
-    this.memcachedProtocol = (String) checkAttribute(MEMCACHED_PROTOCOL, protocol);
+    this.memcachedProtocol = (String) protocol;
-    this.redisPort = (Integer) checkAttribute(REDIS_PORT, value);
+    this.redisPort = (Integer) value;
-    this.redisBindAddress = (String) checkAttribute(REDIS_BIND_ADDRESS, bindAddress);
+    this.redisBindAddress = (String) bindAddress;
-    this.offHeapMemorySize = (String) checkAttribute(OFF_HEAP_MEMORY_SIZE, value);
+    this.offHeapMemorySize = (String) value;
-    this.memcachedBindAddress = (String) checkAttribute(MEMCACHED_BIND_ADDRESS, bindAddress);
+    this.memcachedBindAddress = (String) bindAddress;
-    this.enableSharedConfiguration = (Boolean) checkAttribute(ENABLE_CLUSTER_CONFIGURATION, value);
+    this.enableSharedConfiguration = (Boolean) value;
-    this.useSharedConfiguration = (Boolean) checkAttribute(USE_CLUSTER_CONFIGURATION, newValue);
+    this.useSharedConfiguration = (Boolean) newValue;
-    this.loadSharedConfigurationFromDir = (Boolean) checkAttribute(LOAD_CLUSTER_CONFIGURATION_FROM_DIR, newValue);
+    this.loadSharedConfigurationFromDir = (Boolean) newValue;
-    this.clusterConfigDir = (String) checkAttribute(CLUSTER_CONFIGURATION_DIR, clusterConfigDir);
+    this.clusterConfigDir = (String) clusterConfigDir;
-    this.serverSSLEnabled = (Boolean) checkAttribute(SERVER_SSL_ENABLED, value);
+    this.serverSSLEnabled = (Boolean) value;
-    this.serverSslRequireAuthentication = (Boolean) checkAttribute(SERVER_SSL_REQUIRE_AUTHENTICATION, value);
+    this.serverSslRequireAuthentication = (Boolean) value;
-    this.serverSslProtocols = (String) checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
+    this.serverSslProtocols = (String) protocols;
-    this.serverSslCiphers = (String) checkAttribute(SERVER_SSL_CIPHERS, ciphers);
+    this.serverSslCiphers = (String) ciphers;
-    value = (String) checkAttribute(SERVER_SSL_KEYSTORE, value);
-    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_TYPE, value);
-    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_PASSWORD, value);
-    value = (String) checkAttribute(SERVER_SSL_TRUSTSTORE, value);
-    value = (String) checkAttribute(SERVER_SSL_TRUSTSTORE_PASSWORD, value);
-    this.gatewaySSLEnabled = (Boolean) checkAttribute(SERVER_SSL_ENABLED, value);
+    this.gatewaySSLEnabled = (Boolean) value;
-    this.gatewaySslRequireAuthentication = (Boolean) checkAttribute(GATEWAY_SSL_REQUIRE_AUTHENTICATION, value);
+    this.gatewaySslRequireAuthentication = (Boolean) value;
-    this.gatewaySslProtocols = (String) checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
+    this.gatewaySslProtocols = (String) protocols;
-    this.gatewaySslCiphers = (String) checkAttribute(GATEWAY_SSL_CIPHERS, ciphers);
+    this.gatewaySslCiphers = (String) ciphers;
-    checkAttribute(GATEWAY_SSL_KEYSTORE, value);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_TYPE, value);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_PASSWORD, value);
-    checkAttribute(GATEWAY_SSL_TRUSTSTORE, value);
-    checkAttribute(GATEWAY_SSL_TRUSTSTORE_PASSWORD, value);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE, httpServiceSSLKeyStore);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_TYPE, httpServiceSSLKeyStoreType);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, httpServiceSSLKeyStorePassword);
-    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE, httpServiceSSLTrustStore);
-    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD, httpServiceSSLTrustStorePassword);
