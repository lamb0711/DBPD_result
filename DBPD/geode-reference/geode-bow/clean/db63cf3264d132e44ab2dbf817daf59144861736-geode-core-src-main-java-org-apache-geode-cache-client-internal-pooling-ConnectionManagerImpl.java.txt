GEODE-4762: Remove dead code.


-        // logger.info("DEBUG: borrowConnection conCount(+1)->" + connectionCount);
-        // getPoolStats().incConCount(1);
-          // getPoolStats().incConCount(-1);
-          // logger.info("DEBUG: borrowConnection conCount(-1)->" + connectionCount);
-  // public Connection borrowConnection(ServerLocation server, long acquireTimeout)
-  // throws AllConnectionsInUseException, NoAvailableServersException {
-  // return borrowConnection(server, acquireTimeout, false);
-  // }
-
-  // /**
-  // * Used to tell a caller of borrowConnection that it did not find an existing connnection.
-  // */
-  // public static final Connection NO_EXISTING_CONNECTION = new ConnectionImpl(null, null);
-
-      // logger.info("DEBUG: borrowConnection conCount(+1)->" + connectionCount);
-      // getPoolStats().incConCount(1);
-          // getPoolStats().incConCount(-1);
-          // logger.info("DEBUG: borrowConnection conCount(-1)->" + connectionCount);
-            // logger.info("DEBUG: exchangeConnection removeCon(" + oldPC +")");
-              // getPoolStats().incConCount(-1);
-              // logger.info("DEBUG: exchangeConnection conCount(-1)->" + connectionCount + "
-              // oldPC=" + oldPC);
-        // logger.info("DEBUG: exchangeConnection newConnection=" + newConnection);
-            // getPoolStats().incConCount(-1);
-            // logger.info("DEBUG: exchangeConnection conCount(-1)->" + connectionCount);
-    // logger.info("DEBUG: exchangeConnection internalDestroy(" + oldPC +")");
-        // getPoolStats().incConCount(-1);
-        // logger.info("DEBUG: destroyConnection conCount(-1)->" + connectionCount);
-          // this might not be true; they make have just had an exception
-          // itr.remove(); // someone else is destroying it
-      // getPoolStats().incConCount(-badConnections.size());
-      // logger.info("DEBUG: invalidateServer conCount(" + (-badConnections.size()) + ")->" +
-      // connectionCount);
-      // TODO (ashetkar) This for loop may well be outside the lock. But this
-      // change was tested thoroughly for #42185 and also it may not impact perf
-      // because this method gets called only when a server goes down.
-            // logger.info("DEBUG: returnConnection conCount(-1)->" + connectionCount);
-    // do this early as it might help lifetimeProcessor shutdown
-    // closeReplacementConnection();
-    // one more time in case of race with lifetimeProcessor
-    // closeReplacementConnection();
-    // closeReplacementConnection();
-        // getPoolStats().incConCount(1);
-        // logger.info("DEBUG: prefillConnection conCount(+1)->" + connectionCount);
-            // getPoolStats().incConCount(-1);
-            // logger.info("DEBUG: prefillConnection conCount(-1)->" + connectionCount);
-        // logger.info("DEBUG: lifetimeTask=" + this);
-        // NOTREACHED
-        throw e; // for safety
+        throw e;
-  // private final AR/*<ReplacementConnection>*/ replacement = CFactory.createAR();
-
-  // private void closeReplacementConnection() {
-  // ReplacementConnection rc = (ReplacementConnection)this.replacement.getAndSet(null);
-  // if (rc != null) {
-  // rc.getConnection().destroy();
-  // }
-  // }
-
-            // // target was destroyed; we have already removed it from
-            // // allConnectionsMap but didn't dec the stat
-            // getPoolStats().incPoolConnections(-1);
-            // logger.info("DEBUG: offerReplacementConnection incPoolConnections(-1)->" +
-            // getPoolStats().getPoolConnections());
-    // boolean replacementConsumed = false;
-          // logger.fine("DEBUG: creating replacement connection to " + sl);
-          // logger.fine("DEBUG: created replacement connection: " + con);
-            // logger.info("DEBUG: rescheduling lifetime expire to be now");
-          // logger.info("DEBUG: removedEndpoint incPoolConnections(" + (-count) + ")->" +
-          // getPoolStats().getPoolConnections() + " cons.size=" + endpointConnections.size() + "
-          // cons=" + endpointConnections);
-      // @todo darrel: allConnections.remove could be optimized by making
-      // allConnections a linkedHashSet
-        // logger.info("DEBUG: removedConnection incPoolConnections(-1)->" +
-        // getPoolStats().getPoolConnections() + " con="+connection);
-        // logger.info("DEBUG: close incPoolConnections(" + (-count) + ")->" +
-        // getPoolStats().getPoolConnections());
-        // boolean idlePossible = isIdleExpirePossible();
-            /*
-             * if (idlePossible && pc.hasIdleExpired(now, idleTimeoutNanos)) { // this con has
-             * already idle expired so ignore it continue; } else
-             */ {
+            {
-                // logger.info("DEBUG: 2 rescheduling lifetime expire to be in: "
-                // + life + " nanos");
-            // logger.fine("DEBUG: tryToExtendLifeTime extending life of: " + pc);
-          // logger.info("DEBUG: scheduling lifetime expire check in: " + delay + " ns");
-          // logger.info("DEBUG: scheduling lifetimeTask=" + task);
-        // logger.info("DEBUG: checkIdleExpiration incPoolConnections(" + (-expireCount) + ")->" +
-        // getPoolStats().getPoolConnections());
-          // getPoolStats().incConCount(-expireCount);
-          // logger.info("DEBUG: checkIdleExpiration conCount(" + (-expireCount) + ")->" +
-          // connectionCount);
-      // logger.info("DEBUG: Looking for connections whose lifetime has expired");
-            // logger.fine("DEBUG: life remaining in " + pc + " is: " + life);
-              // logger.fine("DEBUG: idleTimedOut=" + idleTimedOut
-              // + " destroyed=" + destroyed);
-          // logger.fine("DEBUG: calling createLifetimeReplacementConnection");
-          // logger.fine("DEBUG: createLifetimeReplacementConnection returned " + !done);
-          // logger.fine("DEBUG: reschedule " + firstLife);
-            // logger.info("DEBUG: rescheduling lifetime expire to be in: "
-            // + firstLife + " nanos");
