Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-    setIfTransactionDistributed();
-    setIfTransactionDistributed();
-      return DistributionManager.SERIAL_EXECUTOR;
+      return ClusterDistributionManager.SERIAL_EXECUTOR;
-      return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+      return ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR;
-  public boolean checkCacheClosing(DistributionManager dm) {
-    InternalCache cache = getInternalCache();
-    // return (cache != null && cache.isClosed());
+  public boolean checkCacheClosing(ClusterDistributionManager dm) {
+    if (dm == null) {
+      return true;
+    }
+    InternalCache cache = dm.getCache();
-  public boolean checkDSClosing(DistributionManager dm) {
+  public boolean checkDSClosing(ClusterDistributionManager dm) {
-  InternalCache getInternalCache() {
-    return GemFireCacheImpl.getInstance();
-  }
-
-  public void process(final DistributionManager dm) {
+  public void process(final ClusterDistributionManager dm) {
+      InternalCache cache = dm.getCache();
-        thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
-            .toLocalizedString(dm.getId()));
+        if (cache != null) {
+          thr = cache
+              .getCacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
+                  .toLocalizedString(dm.getId()));
+        } else {
+          thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
+              .toLocalizedString(dm.getId()));
+        }
-      InternalCache cache = getInternalCache();
-  protected void sendReply(InternalDistributedMember member, int procId, DM dm, ReplyException ex,
-      PartitionedRegion pr, long startTime) {
+  protected void sendReply(InternalDistributedMember member, int procId, DistributionManager dm,
+      ReplyException ex, PartitionedRegion pr, long startTime) {
-  protected boolean operateOnRegion(DistributionManager dm, PartitionedRegion pr) {
+  protected boolean operateOnRegion(ClusterDistributionManager dm, PartitionedRegion pr) {
-  protected abstract boolean operateOnPartitionedRegion(DistributionManager dm,
+  protected abstract boolean operateOnPartitionedRegion(ClusterDistributionManager dm,
-  protected boolean _mayAddToMultipleSerialGateways(DistributionManager dm) {
+  protected boolean _mayAddToMultipleSerialGateways(ClusterDistributionManager dm) {
-    public void memberDeparted(final InternalDistributedMember id, final boolean crashed) {
+    public void memberDeparted(DistributionManager distributionManager,
+        final InternalDistributedMember id, final boolean crashed) {
-        e.handleAsUnexpected();
+        e.handleCause();
-
-  /*
-   * For Distributed Tx
-   */
-  private void setIfTransactionDistributed() {
-    InternalCache cache = GemFireCacheImpl.getInstance();
-    if (cache != null) {
-      if (cache.getTxManager() != null) {
-        this.isTransactionDistributed = cache.getTxManager().isDistributed();
-      }
-    }
-  }
