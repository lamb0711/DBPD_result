Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.internal.logging.LoggingThread;
-        LocalizedStrings.ServerLauncher_SERVER_LAUNCHER_HELP.toLocalizedString());
-    helpMap.put(Command.START.getName(), LocalizedStrings.ServerLauncher_START_SERVER_HELP
-        .toLocalizedString(String.valueOf(getDefaultServerPort())));
+        "A GemFire launcher used to start, stop and determine a Server's status.");
+    helpMap.put(Command.START.getName(), String.format(
+        "Starts a Server running in the current working directory listening on the default port (%s) bound to all IP addresses available to the localhost.  The Server must be given a member name in the GemFire cluster.  The default server-bind-address and server-port may be overridden using the corresponding command-line options.",
+        String.valueOf(getDefaultServerPort())));
-        LocalizedStrings.ServerLauncher_STATUS_SERVER_HELP.toLocalizedString());
+        "Displays the status of a Server given any combination of the member name/ID, PID, or the directory in which the Server is running.");
-        LocalizedStrings.ServerLauncher_STOP_SERVER_HELP.toLocalizedString());
+        "Stops a running Server given given a member name/ID, PID, or the directory in which the Server is running.");
-        LocalizedStrings.ServerLauncher_VERSION_SERVER_HELP.toLocalizedString());
+        "Displays GemFire product version information.");
-        LocalizedStrings.ServerLauncher_SERVER_ASSIGN_BUCKETS_HELP.toLocalizedString());
-    helpMap.put("debug", LocalizedStrings.ServerLauncher_SERVER_DEBUG_HELP.toLocalizedString());
+        "Causes buckets to be assigned to the partitioned regions in the GemFire cache on Server start.");
+    helpMap.put("debug", "Displays verbose information during the invocation of the launcher.");
-    helpMap.put("dir", LocalizedStrings.ServerLauncher_SERVER_DIR_HELP.toLocalizedString());
+    helpMap.put("dir",
+        "Specifies the working directory where the Server is running.  Defaults to the current working directory.");
-        LocalizedStrings.ServerLauncher_SERVER_DISABLE_DEFAULT_SERVER_HELP.toLocalizedString());
-    helpMap.put("force", LocalizedStrings.ServerLauncher_SERVER_FORCE_HELP.toLocalizedString());
+        "Disables the addition of a default GemFire cache server.");
+    helpMap.put("force",
+        "Enables any existing Server PID file to be overwritten on start.  The default is to throw an error if a PID file already exists and --force is not specified.");
-        LocalizedStrings.SystemAdmin_CAUSES_GEMFIRE_TO_PRINT_OUT_INFORMATION_INSTEAD_OF_PERFORMING_THE_COMMAND_THIS_OPTION_IS_SUPPORTED_BY_ALL_COMMANDS
-            .toLocalizedString());
-    helpMap.put("member", LocalizedStrings.ServerLauncher_SERVER_MEMBER_HELP.toLocalizedString());
-    helpMap.put("pid", LocalizedStrings.ServerLauncher_SERVER_PID_HELP.toLocalizedString());
+        "Causes GemFire to print out information instead of performing the command. This option is supported by all commands.");
+    helpMap.put("member", "Identifies the Server by member name or ID in the GemFire cluster.");
+    helpMap.put("pid", "Indicates the OS process ID of the running Server.");
-        LocalizedStrings.ServerLauncher_SERVER_REBALANCE_HELP.toLocalizedString());
+        "An option to cause the GemFire cache's partitioned regions to be rebalanced on start.");
-        LocalizedStrings.ServerLauncher_SERVER_REDIRECT_OUTPUT_HELP.toLocalizedString());
+        "An option to cause the Server to redirect standard out and standard error to the GemFire log file.");
-        LocalizedStrings.ServerLauncher_SERVER_BIND_ADDRESS_HELP.toLocalizedString());
+        "Specifies the IP address on which to bind, or on which the Server is bound, listening for client requests.  Defaults to all IP addresses available to the localhost.");
-        LocalizedStrings.ServerLauncher_SERVER_HOSTNAME_FOR_CLIENT_HELP.toLocalizedString());
-    helpMap.put("server-port", LocalizedStrings.ServerLauncher_SERVER_PORT_HELP
-        .toLocalizedString(String.valueOf(getDefaultServerPort())));
+        "An option to specify the hostname or IP address to send to clients so they can connect to this Server. The default is to use the IP address to which the Server is bound.");
+    helpMap.put("server-port", String.format(
+        "Specifies the port on which the Server is listening for client requests. Defaults to %s.",
+        String.valueOf(getDefaultServerPort())));
-        throw new RuntimeException(LocalizedStrings.Launcher_Command_START_IO_ERROR_MESSAGE
-            .toLocalizedString(getServiceName(), getWorkingDirectory(), getId(), e.getMessage()),
+        throw new RuntimeException(
+            String.format("An IO error occurred while starting a %s in %s on %s: %s",
+                getServiceName(), getWorkingDirectory(), getId(), e.getMessage()),
-            LocalizedStrings.Launcher_Command_START_PID_FILE_ALREADY_EXISTS_ERROR_MESSAGE
-                .toLocalizedString(getServiceName(), getWorkingDirectory(), getId()),
+            String.format("A PID file already exists and a %s may be running in %s on %s.",
+                getServiceName(), getWorkingDirectory(), getId()),
-            LocalizedStrings.Launcher_Command_START_PID_UNAVAILABLE_ERROR_MESSAGE.toLocalizedString(
+            String.format("The process ID could not be determined while starting %s %s in %s: %s",
-          LocalizedStrings.Launcher_Command_START_SERVICE_ALREADY_RUNNING_ERROR_MESSAGE
-              .toLocalizedString(getServiceName(), getWorkingDirectory(), getId()));
+          String.format("A %s is already running in %s on %s.",
+              getServiceName(), getWorkingDirectory(), getId()));
-      final ServerLauncher shadow = this;
-      Thread t = new Thread(() -> {
-        shadow.cache.close();
-        shadow.cache = null;
-        if (shadow.process != null) {
-          shadow.process.stop(shadow.deletePidFileOnStop);
-          shadow.process = null;
-        }
-      });
-      t.setDaemon(false);
+      Thread t = new LoggingThread("ServerLauncherStopper", false, this::doStopInProcess);
+  private void doStopInProcess() {
+    cache.close();
+    cache = null;
+    if (process != null) {
+      process.stop(deletePidFileOnStop);
+      process = null;
+    }
+  }
+
-  // For testing purposes only!
-  void setIsRunningForTest() {
-    this.running.set(true);
-  }
-
-            LocalizedStrings.Launcher_Builder_PARSE_COMMAND_LINE_ARGUMENT_ERROR_MESSAGE
-                .toLocalizedString("Server", e.getMessage()),
+            String.format("An error occurred while parsing command-line arguments for the %s: %s",
+                "Server", e.getMessage()),
-            LocalizedStrings.Launcher_Builder_MEMBER_NAME_ERROR_MESSAGE
-                .toLocalizedString("Server"));
+            String.format("The %s member name must be specified.",
+                "Server"));
-            LocalizedStrings.Launcher_Builder_PID_ERROR_MESSAGE.toLocalizedString());
+            "A process ID (PID) must be a non-negative integer value.");
-              LocalizedStrings.Launcher_Builder_UNKNOWN_HOST_ERROR_MESSAGE
-                  .toLocalizedString("Server"),
+              String.format("The hostname/IP address to which the %s will be bound is unknown.",
+                  "Server"),
-            LocalizedStrings.Launcher_Builder_INVALID_PORT_ERROR_MESSAGE
-                .toLocalizedString("Server"));
+            String.format(
+                "The port on which the %s will listen must be between 1 and 65535 inclusive.",
+                "Server"));
-            LocalizedStrings.Launcher_Builder_WORKING_DIRECTORY_NOT_FOUND_ERROR_MESSAGE
-                .toLocalizedString("Server"),
+            String.format(AbstractLauncher.WORKING_DIRECTORY_NOT_FOUND_ERROR_MESSAGE,
+                "Server"),
-              LocalizedStrings.Launcher_Builder_MEMBER_NAME_VALIDATION_ERROR_MESSAGE
-                  .toLocalizedString("Server"));
+              String.format(
+                  MEMBER_NAME_ERROR_MESSAGE,
+                  "Server", "Server"));
-              LocalizedStrings.Launcher_Builder_WORKING_DIRECTORY_OPTION_NOT_VALID_ERROR_MESSAGE
-                  .toLocalizedString("Server"));
+              String.format(
+                  AbstractLauncher.WORKING_DIRECTORY_OPTION_NOT_VALID_ERROR_MESSAGE,
+                  "Server", "Server"));
