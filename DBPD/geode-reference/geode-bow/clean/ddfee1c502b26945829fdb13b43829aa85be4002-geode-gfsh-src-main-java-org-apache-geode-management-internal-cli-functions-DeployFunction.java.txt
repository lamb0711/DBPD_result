GEODE-7421:  deploy jar by REST API/JAVA API for Management

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.HashSet;
-import com.healthmarketscience.rmiio.RemoteInputStreamClient;
-import org.apache.commons.io.IOUtils;
-import org.apache.geode.management.internal.beans.FileUploader;
+import org.apache.geode.management.internal.functions.CacheRealizationFunction;
-      Set<File> stagedFiles = stageJarContent(jarFilenames, jarStreams);
+      Set<File> stagedFiles = CacheRealizationFunction.stageFileContent(jarFilenames, jarStreams);
-
-  private Set<File> stageJarContent(List<String> jarNames,
-      List<RemoteInputStream> jarStreams) throws IOException {
-    Set<File> stagedJars = new HashSet<>();
-
-    try {
-      Path tempDir = FileUploader.createSecuredTempDirectory("deploy-");
-
-      for (int i = 0; i < jarNames.size(); i++) {
-        Path tempJar = Paths.get(tempDir.toString(), jarNames.get(i));
-        FileOutputStream fos = new FileOutputStream(tempJar.toString());
-
-        InputStream input = RemoteInputStreamClient.wrap(jarStreams.get(i));
-
-        IOUtils.copyLarge(input, fos);
-
-        fos.close();
-        input.close();
-
-        stagedJars.add(tempJar.toFile());
-      }
-    } catch (IOException iox) {
-      for (int i = 0; i < jarStreams.size(); i++) {
-        try {
-          jarStreams.get(i).close(true);
-        } catch (IOException ex) {
-          // Ignored
-        }
-      }
-      throw iox;
-    }
-
-    return stagedJars;
-  }
