Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-    final LocalizedMessage message = LocalizedMessage.create(
-        LocalizedStrings.GrantorRequestProcessor_GRANTORREQUESTPROCESSOR_ELDERSYNCWAIT_THE_CURRENT_ELDER_0_IS_WAITING_FOR_THE_NEW_ELDER_1,
+    final String message = String.format(
+        "GrantorRequestProcessor.elderSyncWait: The current Elder %s is waiting for the new Elder %s.",
-   * our vm. TODO: collaboration lock was removed
+   * our vm.
-  private static ElderState startElderCall(InternalDistributedSystem sys, DLockService dls,
-      boolean usesElderCollaborationLock) {
+  private static ElderState startElderCall(InternalDistributedSystem sys, DLockService dls) {
-        if (usesElderCollaborationLock) {
-          try {
-            es = dm.getElderState(false, true);
-          } catch (IllegalStateException e) {
-            // loop back around to reacquire Collaboration and try elder lock again
-            continue;
-          }
-        } else {
-          es = dm.getElderState(false, false);
+        try {
+          es = dm.getElderState(false);
+        } catch (IllegalStateException e) {
+          // loop back around to reacquire Collaboration and try elder lock again
+          continue;
-        final boolean usesElderCollaborationLock = opCode == GET_OP || opCode == BECOME_OP;
-        if (usesElderCollaborationLock) {
-          Assert.assertTrue(service != null,
-              "Attempting GrantorRequest without instance of DistributedLockService");
-        }
-        final ElderState es = startElderCall(system, service, usesElderCollaborationLock);
+        final ElderState es = startElderCall(system, service);
-      ElderState es = dm.getElderState(true, false);
+      ElderState es = dm.getElderState(true);
