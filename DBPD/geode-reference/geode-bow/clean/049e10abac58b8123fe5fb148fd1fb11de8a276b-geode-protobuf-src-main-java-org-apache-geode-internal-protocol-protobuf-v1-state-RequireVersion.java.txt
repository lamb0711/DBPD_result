GEODE-4961: Allowing custom serialization formats with the protobuf protocol

Adding a new ValueSerializer interface that users can implement to
control the serialization format of data sent using the protobuf
protocol.

ValueSerializers are registered on the server side using the java
ServiceLoader mechanism. They are selected by the client using a new
valueFormat field in the handshake.

Renamed AuthenticationRequest to HandshakeRequest. Credentials
and valueFormat are all sent as part of a single HandshakeRequest.

Renamed the connection states to make them a little easier to
understand, and removed some duplicate states.

The new states are RequireVersion, RequireAuthentication,
AcceptMessages, InvalidSecurity, and TerminateConnection



+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.distributed.ConfigurationProperties;
+import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.protocol.protobuf.v1.ProtobufSerializationService;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.NoSecurityAuthorizer;
+import org.apache.geode.internal.protocol.protobuf.v1.ProtobufOpsProcessor;
-public class ProtobufConnectionHandshakeStateProcessor implements ProtobufConnectionStateProcessor {
+public class RequireVersion implements ConnectionState {
+  private static final Logger logger = LogService.getLogger(ProtobufOpsProcessor.class);
-  public ProtobufConnectionHandshakeStateProcessor(SecurityService securityService) {
+  public RequireVersion(SecurityService securityService) {
-  public void validateOperation(Object message, ProtobufSerializationService serializer,
-      MessageExecutionContext messageContext, ProtobufOperationContext operationContext)
+  public void validateOperation(ProtobufOperationContext operationContext)
-  private ProtobufConnectionStateProcessor nextConnectionState(
-      MessageExecutionContext executionContext) {
+  private ConnectionState nextConnectionState(MessageExecutionContext executionContext) {
-      return new ProtobufConnectionAuthenticatingStateProcessor(securityService);
+      return new RequireAuthentication();
-      return new LegacySecurityProtobufConnectionStateProcessor();
+      logger.error("The protobuf protocol requires using a "
+          + ConfigurationProperties.SECURITY_MANAGER + ". It does not allow using a "
+          + ConfigurationProperties.SECURITY_CLIENT_AUTHENTICATOR);
+      return new InvalidSecurity();
-      executionContext.setAuthorizer(new NoSecurityAuthorizer());
-      // Noop authenticator...no security
-      return new NoSecurityProtobufConnectionStateProcessor();
+      return new AcceptMessages();
-      executionContext.setConnectionStateProcessor(nextConnectionState(executionContext));
+      executionContext.setState(nextConnectionState(executionContext));
