Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Defines methods that all <code>SystemMember</code> MBeans should
- * implement.
+ * Defines methods that all <code>SystemMember</code> MBeans should implement.
-public interface SystemMemberJmx
-  extends SystemMember, NotificationListener {
-  /** 
-   * Notification type for indicating a cache got created on a member of this 
-   * distributed system.
+public interface SystemMemberJmx extends SystemMember, NotificationListener {
+  /**
+   * Notification type for indicating a cache got created on a member of this distributed system.
-  /** 
-   * Notification type for indicating a cache is closed on a member of this 
-   * distributed system.
+  /**
+   * Notification type for indicating a cache is closed on a member of this distributed system.
-  /** 
-   * Notification type for indicating a region is created in a cache on a member 
-   * of this distributed system.
+  /**
+   * Notification type for indicating a region is created in a cache on a member of this distributed
+   * system.
-  /** 
-   * Notification type for indicating a region was removed from a cache on a 
-   * member of this distributed system.
+  /**
+   * Notification type for indicating a region was removed from a cache on a member of this
+   * distributed system.
-  
+
-  
+
-  
+
-   * RefreshInterval is now set only through the AdminDistributedSystem property
-   * refreshInterval. Attempt to set refreshInterval on SystemMemberJmx MBean
-   * would result in an OperationNotSupportedException Auto-refresh is enabled
-   * on demand when a call to refreshConfig is made
+   * RefreshInterval is now set only through the AdminDistributedSystem property refreshInterval.
+   * Attempt to set refreshInterval on SystemMemberJmx MBean would result in an
+   * OperationNotSupportedException Auto-refresh is enabled on demand when a call to refreshConfig
+   * is made
-   * @param refreshInterval
-   *          the new refresh interval in seconds
+   * @param refreshInterval the new refresh interval in seconds
-   * Sets the refresh interval field.
-   * Sets interval in seconds between config refreshes; zero or less turns 
-   * off auto refreshing.  Manual refreshing has no effect on when the next
-   * scheduled refresh will occur.
+   * Sets the refresh interval field. Sets interval in seconds between config refreshes; zero or
+   * less turns off auto refreshing. Manual refreshing has no effect on when the next scheduled
+   * refresh will occur.
-  /** 
+  /**
-   * @throws AdminException
-   *         If this system member does not host a cache
+   * @throws AdminException If this system member does not host a cache
-  public ObjectName manageCache() 
-    throws AdminException, MalformedObjectNameException;
+  public ObjectName manageCache() throws AdminException, MalformedObjectNameException;
-  /** 
+  /**
-  public ObjectName[] manageStats() 
-    throws AdminException, MalformedObjectNameException;
+  public ObjectName[] manageStats() throws AdminException, MalformedObjectNameException;
-  /** 
-   * Gets the active StatisticResources for this manager, based on the
-   * typeName as the key
+  /**
+   * Gets the active StatisticResources for this manager, based on the typeName as the key
-  public ObjectName[] manageStat(String statisticsTypeName) 
-    throws AdminException, MalformedObjectNameException;
+  public ObjectName[] manageStat(String statisticsTypeName)
+      throws AdminException, MalformedObjectNameException;
-   * Handles notification to refresh. Reacts by refreshing the values of this
-   * GemFireManager's ConfigurationParamaters.  Any other notification is
-   * ignored.
+   * Handles notification to refresh. Reacts by refreshing the values of this GemFireManager's
+   * ConfigurationParamaters. Any other notification is ignored.
-   * @param notification  the JMX notification being received
-   * @param hb            handback object is unused
+   * @param notification the JMX notification being received
+   * @param hb handback object is unused
-   * @return a new instance of ManagedBean copied from <code>managed</code> but 
-   *         with the new attributes added
+   * @return a new instance of ManagedBean copied from <code>managed</code> but with the new
+   *         attributes added
-  public ManagedBean addDynamicAttributes(ManagedBean managed) 
-    throws AdminException;
+  public ManagedBean addDynamicAttributes(ManagedBean managed) throws AdminException;
-   * Implementation should handle creation of cache by extracting the details
-   * from the given event object.
+   * Implementation should handle creation of cache by extracting the details from the given event
+   * object.
-   * @param event
-   *          event object corresponding to the creation of the cache
+   * @param event event object corresponding to the creation of the cache
-   * Implementation should handle closure of cache by extracting the details
-   * from the given event object.
+   * Implementation should handle closure of cache by extracting the details from the given event
+   * object.
-   * @param event
-   *          event object corresponding to the closure of the cache
+   * @param event event object corresponding to the closure of the cache
-   * Implementation should handle creation of region by extracting the details
-   * from the given event object.
+   * Implementation should handle creation of region by extracting the details from the given event
+   * object.
-   * @param event
-   *          event object corresponding to the creation of a region
+   * @param event event object corresponding to the creation of a region
-   * Implementation should handle loss of region by extracting the details
-   * from the given event object.
+   * Implementation should handle loss of region by extracting the details from the given event
+   * object.
-   * @param event
-   *          event object corresponding to the loss of a region
+   * @param event event object corresponding to the loss of a region
-   * @param clientId
-   *          id of the client for whom membership change happened
-   * @param eventType
-   *          membership change type; one of
-   *          {@link ClientMembershipMessage#JOINED},
-   *          {@link ClientMembershipMessage#LEFT}, 
-   *          {@link ClientMembershipMessage#CRASHED}
+   * @param clientId id of the client for whom membership change happened
+   * @param eventType membership change type; one of {@link ClientMembershipMessage#JOINED},
+   *        {@link ClientMembershipMessage#LEFT}, {@link ClientMembershipMessage#CRASHED}
-  //////////////////////  Inner Classess  //////////////////////
+  ////////////////////// Inner Classess //////////////////////
-   * A helper class that provides implementation of the
-   * <code>SystemMemberJmx</code> interface as static methods.
+   * A helper class that provides implementation of the <code>SystemMemberJmx</code> interface as
+   * static methods.
-    
+
-    public static int setAndReturnRefreshInterval(SystemMemberJmx member,
-                                          int refreshInterval) {
+    public static int setAndReturnRefreshInterval(SystemMemberJmx member, int refreshInterval) {
-      
+
-        MBeanUtil.registerRefreshNotification(
-          member, // NotificationListener
-          ((ManagedResource)member).getMBeanName(), // User Data
-          RefreshNotificationType.SYSTEM_MEMBER_CONFIG, 
-          refreshInterval); // int
+        MBeanUtil.registerRefreshNotification(member, // NotificationListener
+            ((ManagedResource) member).getMBeanName(), // User Data
+            RefreshNotificationType.SYSTEM_MEMBER_CONFIG, refreshInterval); // int
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-      
+
-    public static ObjectName manageCache(SystemMemberJmx member) 
-      throws AdminException, MalformedObjectNameException {
+    public static ObjectName manageCache(SystemMemberJmx member)
+        throws AdminException, MalformedObjectNameException {
-          throw new AdminException(LocalizedStrings.SystemMemberJmx_THIS_SYSTEM_MEMBER_DOES_NOT_HAVE_A_CACHE.toLocalizedString());
+          throw new AdminException(
+              LocalizedStrings.SystemMemberJmx_THIS_SYSTEM_MEMBER_DOES_NOT_HAVE_A_CACHE
+                  .toLocalizedString());
-//        Assert.assertTrue(cache != null); (cannot be null)
+        // Assert.assertTrue(cache != null); (cannot be null)
-      } catch (AdminException e) { 
+      } catch (AdminException e) {
-          logger.warn(e.getMessage(), e); 
+          logger.warn(e.getMessage(), e);
-        throw e; 
-      } catch (RuntimeException e) { 
+        throw e;
+      } catch (RuntimeException e) {
-        throw e; 
+        throw e;
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-      } catch (Error e) { 
+      } catch (Error e) {
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-        logger.error(e.getMessage(), e); 
-        throw e; 
+        logger.error(e.getMessage(), e);
+        throw e;
-    public static ObjectName[] manageStats(SystemMemberJmx member) 
-      throws AdminException, MalformedObjectNameException {
-        try {
-          StatisticResource[] stats = member.getStats();
-          ObjectName[] onames = new ObjectName[stats.length];
-          for (int i = 0; i < stats.length; i++) {
-            StatisticResourceJmxImpl stat =
-              (StatisticResourceJmxImpl) stats[i];
-            onames[i] = ObjectName.getInstance(stat.getMBeanName());
-          }
-          return onames;
-        } catch (AdminException e) { 
-          logger.warn(e.getMessage(), e); 
-          throw e;
-        } catch (RuntimeException e) {
-          logger.warn(e.getMessage(), e); 
-          throw e; 
-        } catch (VirtualMachineError err) {
-          SystemFailure.initiateFailure(err);
-          // If this ever returns, rethrow the error.  We're poisoned
-          // now, so don't let this thread continue.
-          throw err;
-        } catch (Error e) { 
-          // Whenever you catch Error or Throwable, you must also
-          // catch VirtualMachineError (see above).  However, there is
-          // _still_ a possibility that you are dealing with a cascading
-          // error condition, so you also need to check to see if the JVM
-          // is still usable:
-          SystemFailure.checkFailure();
-          logger.error(e.getMessage(), e); 
-          throw e; 
+    public static ObjectName[] manageStats(SystemMemberJmx member)
+        throws AdminException, MalformedObjectNameException {
+      try {
+        StatisticResource[] stats = member.getStats();
+        ObjectName[] onames = new ObjectName[stats.length];
+        for (int i = 0; i < stats.length; i++) {
+          StatisticResourceJmxImpl stat = (StatisticResourceJmxImpl) stats[i];
+          onames[i] = ObjectName.getInstance(stat.getMBeanName());
+        return onames;
+      } catch (AdminException e) {
+        logger.warn(e.getMessage(), e);
+        throw e;
+      } catch (RuntimeException e) {
+        logger.warn(e.getMessage(), e);
+        throw e;
+      } catch (VirtualMachineError err) {
+        SystemFailure.initiateFailure(err);
+        // If this ever returns, rethrow the error. We're poisoned
+        // now, so don't let this thread continue.
+        throw err;
+      } catch (Error e) {
+        // Whenever you catch Error or Throwable, you must also
+        // catch VirtualMachineError (see above). However, there is
+        // _still_ a possibility that you are dealing with a cascading
+        // error condition, so you also need to check to see if the JVM
+        // is still usable:
+        SystemFailure.checkFailure();
+        logger.error(e.getMessage(), e);
+        throw e;
+    }
-    public static ObjectName[] manageStat(SystemMemberJmx member, String statisticsTypeName) 
-    throws AdminException, MalformedObjectNameException {
+    public static ObjectName[] manageStat(SystemMemberJmx member, String statisticsTypeName)
+        throws AdminException, MalformedObjectNameException {
-        if (stats==null)
+        if (stats == null)
-          ObjectName[] statNames = new ObjectName[stats.length]; 
-          for (int i=0; i<stats.length; i++) {
+          ObjectName[] statNames = new ObjectName[stats.length];
+          for (int i = 0; i < stats.length; i++) {
-            statNames[i] = ObjectName.getInstance(statJMX.getMBeanName()); 
+            statNames[i] = ObjectName.getInstance(statJMX.getMBeanName());
-      } catch (AdminException e) { 
-        logger.warn(e.getMessage(), e); 
-        throw e; 
-      } catch (RuntimeException e) { 
-        logger.warn(e.getMessage(), e); 
+      } catch (AdminException e) {
+        logger.warn(e.getMessage(), e);
-      } catch (Error e) { 
-        logger.error(e.getMessage(), e); 
+      } catch (RuntimeException e) {
+        logger.warn(e.getMessage(), e);
+        throw e;
+      } catch (Error e) {
+        logger.error(e.getMessage(), e);
-    public static void handleNotification(SystemMemberJmx member,
-                                          Notification notification,
-                                          Object hb) {
-      if (RefreshNotificationType.SYSTEM_MEMBER_CONFIG.
-                           getType().equals(notification.getType()) &&
-          ((ManagedResource)member).getMBeanName().
-                           equals(notification.getUserData())
-         ) {
-          
+    public static void handleNotification(SystemMemberJmx member, Notification notification,
+        Object hb) {
+      if (RefreshNotificationType.SYSTEM_MEMBER_CONFIG.getType().equals(notification.getType())
+          && ((ManagedResource) member).getMBeanName().equals(notification.getUserData())) {
+
-          // If this ever returns, rethrow the error.  We're poisoned
+          // If this ever returns, rethrow the error. We're poisoned
-          // catch VirtualMachineError (see above).  However, there is
+          // catch VirtualMachineError (see above). However, there is
-    public static ManagedBean
-      addDynamicAttributes(SystemMemberJmx member, ManagedBean managed)
-      throws AdminException {
+    public static ManagedBean addDynamicAttributes(SystemMemberJmx member, ManagedBean managed)
+        throws AdminException {
-        throw new IllegalArgumentException(LocalizedStrings.SystemMemberJmx_MANAGEDBEAN_IS_NULL.toLocalizedString());
+        throw new IllegalArgumentException(
+            LocalizedStrings.SystemMemberJmx_MANAGEDBEAN_IS_NULL.toLocalizedString());
-    
+
-    
+
-        ConfigurationParameterJmxImpl parm =
-          (ConfigurationParameterJmxImpl) params[i];
+        ConfigurationParameterJmxImpl parm = (ConfigurationParameterJmxImpl) params[i];
-        
+
-        
+
-    /*default*/static int getNextNotificationSequenceNumber() {
+    /* default */static int getNextNotificationSequenceNumber() {
-    
+
-     * Returns the cache event details extracted from the given
-     * SystemMemberCacheEvent
+     * Returns the cache event details extracted from the given SystemMemberCacheEvent
-     * @param event
-     *          SystemMemberCacheEvent instance
-     * @return the cache event details extracted from the given
-     *         SystemMemberCacheEvent
+     * @param event SystemMemberCacheEvent instance
+     * @return the cache event details extracted from the given SystemMemberCacheEvent
-    /*default*/static String getCacheEventDetails(SystemMemberCacheEvent event) {
-      String    memberId  = event.getMemberId();
+    /* default */static String getCacheEventDetails(SystemMemberCacheEvent event) {
+      String memberId = event.getMemberId();
-      
-      return "CacheEvent[MemberId: "+memberId+", operation: "+operation+"]";
+
+      return "CacheEvent[MemberId: " + memberId + ", operation: " + operation + "]";
-    
+
-     * Returns the region event details extracted from the given
-     * SystemMemberRegionEvent
+     * Returns the region event details extracted from the given SystemMemberRegionEvent
-     * @param event
-     *          SystemMemberRegionEvent instance
-     * @return the cache event details extracted from the given
-     *         SystemMemberRegionEvent
-     */  
-    /*default*/static String getRegionEventDetails(SystemMemberRegionEvent event) {
-      String    memberId  = event.getMemberId();
+     * @param event SystemMemberRegionEvent instance
+     * @return the cache event details extracted from the given SystemMemberRegionEvent
+     */
+    /* default */static String getRegionEventDetails(SystemMemberRegionEvent event) {
+      String memberId = event.getMemberId();
-      
-      return "RegionEvent[MemberId: " + memberId + ", operation: " + operation
-          + ", region:" + event.getRegionPath() + "]";
+
+      return "RegionEvent[MemberId: " + memberId + ", operation: " + operation + ", region:"
+          + event.getRegionPath() + "]";
-     * @param notif
-     *          notification to send
+     * @param notif notification to send
-     * @throws NullPointerException
-     *           if resource or ModelMBean for resource is null
+     * @throws NullPointerException if resource or ModelMBean for resource is null
-    /*default*/static void sendNotification(ManagedResource resource, Notification notif) {
+    /* default */static void sendNotification(ManagedResource resource, Notification notif) {
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.SystemMemberJmx_FAILED_TO_SEND_0_NOTIFICATION_FOR_1,
-            new Object[] { "'" + notif.getType() + "'", 
-                          "'" + notif.getMessage() + "'" }), 
-            e);
+        logger
+            .info(
+                LocalizedMessage.create(
+                    LocalizedStrings.SystemMemberJmx_FAILED_TO_SEND_0_NOTIFICATION_FOR_1,
+                    new Object[] {"'" + notif.getType() + "'", "'" + notif.getMessage() + "'"}),
+                e);
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.SystemMemberJmx_FAILED_TO_SEND_0_NOTIFICATION_FOR_1,
-            new Object[] { "'" + notif.getType() + "'", 
-                           "'" + notif.getMessage() + "'" }), 
-            e);
+        logger
+            .info(
+                LocalizedMessage.create(
+                    LocalizedStrings.SystemMemberJmx_FAILED_TO_SEND_0_NOTIFICATION_FOR_1,
+                    new Object[] {"'" + notif.getType() + "'", "'" + notif.getMessage() + "'"}),
+                e);
