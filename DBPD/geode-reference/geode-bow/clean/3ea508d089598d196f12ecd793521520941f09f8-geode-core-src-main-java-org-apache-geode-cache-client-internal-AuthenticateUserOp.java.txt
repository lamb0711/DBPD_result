GEODE-6580: Cleanup static analyzer warnings. (#3432)


+
-import org.apache.geode.internal.cache.tier.sockets.ChunkedMessage;
-    AbstractOp op = new AuthenticateUserOpImpl(con, pool);
+    AbstractOp op = new AuthenticateUserOpImpl(con);
-    AbstractOp op = new AuthenticateUserOpImpl(pool, securityProps);
+    AbstractOp op = new AuthenticateUserOpImpl(securityProps);
-    public AuthenticateUserOpImpl(Connection con, ExecutablePool pool) {
+    AuthenticateUserOpImpl(Connection con) {
-      byte[] credentialBytes = null;
+      byte[] credentialBytes;
-      HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT);
-      try {
+      try (HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT)) {
-      } finally {
-        heapdos.close();
-    public AuthenticateUserOpImpl(ExecutablePool pool, Properties securityProps) {
-      this(pool, securityProps, false);
+    AuthenticateUserOpImpl(Properties securityProps) {
+      this(securityProps, false);
-    public AuthenticateUserOpImpl(ExecutablePool pool, Properties securityProps,
+    AuthenticateUserOpImpl(Properties securityProps,
-      this.securityProperties = securityProps;
-      this.needsServerLocation = needsServer;
+      securityProperties = securityProps;
+      needsServerLocation = needsServer;
-      byte[] secureBytes = null;
+      byte[] secureBytes;
-      if (this.securityProperties != null) {
-        byte[] credentialBytes = null;
+      if (securityProperties != null) {
-        Properties credentials = Handshake.getCredentials(authInitMethod, this.securityProperties,
+        Properties credentials = Handshake.getCredentials(authInitMethod, securityProperties,
-        HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT);
-        try {
+        byte[] credentialBytes;
+        try (HeapDataOutputStream heapdos = new HeapDataOutputStream(Version.CURRENT)) {
-        } finally {
-          heapdos.close();
-    protected Object attemptReadResponse(Connection cnx) throws Exception {
-      Message msg = createResponseMessage();
-      if (msg != null) {
-        msg.setComms(cnx.getSocket(), cnx.getInputStream(), cnx.getOutputStream(),
-            cnx.getCommBuffer(), cnx.getStats());
-        if (msg instanceof ChunkedMessage) {
-          try {
-            return processResponse(cnx, msg);
-          } finally {
-            msg.unsetComms();
-            processSecureBytes(cnx, msg);
-          }
-        } else {
-          try {
-            msg.receive();
-          } finally {
-            msg.unsetComms();
-            processSecureBytes(cnx, msg);
-          }
-          return processResponse(cnx, msg);
-        }
-      } else {
-        return null;
-      }
-    }
-
-    protected Object processResponse(Connection cnx, Message msg) throws Exception {
-      byte[] bytes = null;
+    protected Object processResponse(Message msg, Connection cnx) throws Exception {
+      byte[] bytes;
-        if (this.needsServerLocation) {
+        if (needsServerLocation) {
