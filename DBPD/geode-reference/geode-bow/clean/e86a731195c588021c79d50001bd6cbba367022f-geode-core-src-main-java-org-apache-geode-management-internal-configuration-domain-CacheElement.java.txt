Merge branch 'release/1.3.0'

+import static javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI;
-import static javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI;
-    final Map<String, List<String>> schemaLocationMap =
-        XmlUtils.buildSchemaLocationMap(getAttribute(doc.getFirstChild(),
+    Node cacheNode = doc.getFirstChild();
+    if ("#comment".equals(cacheNode.getNodeName())) {
+      cacheNode = cacheNode.getNextSibling();
+    }
+    final Map<String, String> schemaLocationMap =
+        XmlUtils.buildSchemaLocationMap(getAttribute(cacheNode,
-    final LinkedHashMap<String, CacheElement> elementMap =
-        new LinkedHashMap<String, CacheElement>();
+    final LinkedHashMap<String, CacheElement> elementMap = new LinkedHashMap<>();
-  private static InputSource resolveSchema(final Map<String, List<String>> schemaLocationMap,
+  private static InputSource resolveSchema(final Map<String, String> schemaLocationMap,
-    final List<String> locations = schemaLocationMap.get(namespaceUri);
-    for (final String location : locations) {
-      try {
-        inputSource = entityResolver.resolveEntity(null, location);
-        if (null != inputSource) {
-          break;
-        }
-      } catch (final SAXException e) {
-        // ignore
-      }
+    final String location = schemaLocationMap.get(namespaceUri);
+
+    try {
+      inputSource = entityResolver.resolveEntity(null, location);
+    } catch (final SAXException e) {
+      // ignore
-        // TODO group support as XSD matures
-        // case "xsd:group":
-        // buildElementMapGroup(elementMap, doc, child, rank, xPathContext);
-        // break;
-          // TODO jbarrett - localize
-   * @return true if mulitple allowed, otherwise false.
+   * @return true if multiple allowed, otherwise false.
-    final String maxOccurs = getAttribute(element, "maxOccurs");
-    if (null != maxOccurs && !maxOccurs.equals("1")) {
-      // is "unbounded" or greater than 1 if valid schema.
-      return true;
-    }
-    return false;
+    String maxOccurs = getAttribute(element, "maxOccurs");
+    return null != maxOccurs && !maxOccurs.equals("1");
