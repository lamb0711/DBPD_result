Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
+
- * Provides an implementation of <code>DistributionConfig</code> that
- * is used at runtime by a {@link InternalDistributedSystem}. It allows
- * for dynamic reconfig of the app the owns it.
+ * Provides an implementation of <code>DistributionConfig</code> that is used at runtime by a
+ * {@link InternalDistributedSystem}. It allows for dynamic reconfig of the app the owns it.
- * The attribute settor methods in this class all assume that they are
- * being called at runtime. If they are called from some other ConfigSource
- * then those calls should come through setAttributeObject and it will
- * set the attSourceMap to the correct source after these methods return.
+ * The attribute settor methods in this class all assume that they are being called at runtime. If
+ * they are called from some other ConfigSource then those calls should come through
+ * setAttributeObject and it will set the attSourceMap to the correct source after these methods
+ * return.
-public final class RuntimeDistributionConfigImpl
-  extends DistributionConfigImpl  {
+public final class RuntimeDistributionConfigImpl extends DistributionConfigImpl {
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Create a new <code>RuntimeDistributionConfigImpl</code> from the
-   * contents of another <code>DistributionConfig</code>.
+   * Create a new <code>RuntimeDistributionConfigImpl</code> from the contents of another
+   * <code>DistributionConfig</code>.
-  ////////////////////  Configuration Methods  ////////////////////
+  //////////////////// Configuration Methods ////////////////////
-    this.logLevel = (Integer)checkAttribute(LOG_LEVEL, value);
+    this.logLevel = (Integer) checkAttribute(LOG_LEVEL, value);
-  
+
-    this.statisticSamplingEnabled = (Boolean)checkAttribute(STATISTIC_SAMPLING_ENABLED, value);
+    this.statisticSamplingEnabled = (Boolean) checkAttribute(STATISTIC_SAMPLING_ENABLED, value);
-    value = (Integer)checkAttribute(STATISTIC_SAMPLE_RATE, value);
+    value = (Integer) checkAttribute(STATISTIC_SAMPLE_RATE, value);
-      this.ds.getLogWriter().info("Setting statistic-sample-rate to " + DEFAULT_STATISTIC_SAMPLE_RATE + " instead of the requested " + value + " because VSD does not work with sub-second sampling.");
+      this.ds.getLogWriter()
+          .info("Setting statistic-sample-rate to " + DEFAULT_STATISTIC_SAMPLE_RATE
+              + " instead of the requested " + value
+              + " because VSD does not work with sub-second sampling.");
-    value = (File)checkAttribute(STATISTIC_ARCHIVE_FILE, value);
+    value = (File) checkAttribute(STATISTIC_ARCHIVE_FILE, value);
-    this.archiveDiskSpaceLimit = (Integer)checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
+    this.archiveDiskSpaceLimit = (Integer) checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
-    this.archiveFileSizeLimit = (Integer)checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
+    this.archiveFileSizeLimit = (Integer) checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
-    this.logDiskSpaceLimit = (Integer)checkAttribute(LOG_DISK_SPACE_LIMIT, value);
+    this.logDiskSpaceLimit = (Integer) checkAttribute(LOG_DISK_SPACE_LIMIT, value);
-    this.logFileSizeLimit = (Integer)checkAttribute(LOG_FILE_SIZE_LIMIT, value);
+    this.logFileSizeLimit = (Integer) checkAttribute(LOG_FILE_SIZE_LIMIT, value);
-  public List<String> getModifiableAttributes(){
-    String[] modifiables = {HTTP_SERVICE_PORT,JMX_MANAGER_HTTP_PORT, ARCHIVE_DISK_SPACE_LIMIT,
-            ARCHIVE_FILE_SIZE_LIMIT, LOG_DISK_SPACE_LIMIT, LOG_FILE_SIZE_LIMIT,
-            LOG_LEVEL, STATISTIC_ARCHIVE_FILE, STATISTIC_SAMPLE_RATE, STATISTIC_SAMPLING_ENABLED};
+  public List<String> getModifiableAttributes() {
+    String[] modifiables = {HTTP_SERVICE_PORT, JMX_MANAGER_HTTP_PORT, ARCHIVE_DISK_SPACE_LIMIT,
+        ARCHIVE_FILE_SIZE_LIMIT, LOG_DISK_SPACE_LIMIT, LOG_FILE_SIZE_LIMIT, LOG_LEVEL,
+        STATISTIC_ARCHIVE_FILE, STATISTIC_SAMPLE_RATE, STATISTIC_SAMPLING_ENABLED};
