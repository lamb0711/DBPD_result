GEODE-1569: post process for serialized domain objects

* for client/server retreival, post process the value before it was put into the message
* for gfsh commands, post process the value before it was put into the command result json

-        // post process, iterate through the result for post processing
-        if(GeodeSecurityUtil.needPostProcess()) {
-          List list = selectResults.asList();
-          for (Iterator<Object> valItr = list.iterator(); valItr.hasNext(); ) {
-            Object value = valItr.next();
-            if (value == null)
-              continue;
-
-            if (value instanceof CqEntry) {
-              CqEntry cqEntry = (CqEntry) value;
-              Object cqNewValue = GeodeSecurityUtil.postProcess(null, cqEntry.getKey(), cqEntry.getValue());
-              if (!cqEntry.getValue().equals(cqNewValue)) {
-                selectResults.remove(value);
-                selectResults.add(new CqEntry(cqEntry.getKey(), cqNewValue));
-              }
-            } else {
-              Object newValue = GeodeSecurityUtil.postProcess(null, null, value);
-              if (!value.equals(newValue)) {
-                selectResults.remove(value);
-                selectResults.add(newValue);
-              }
-            }
-          }
-        }
-
-        
+
-     
+
-        
+
-          
+
-            collectionType = new CollectionTypeImpl(Collection.class, 
+            collectionType = new CollectionTypeImpl(Collection.class,
-            isStructs = collectionType.getElementType().isStructType();              
+            isStructs = collectionType.getElementType().isStructType();
- 
+
-        
+
-        
+
-        
+
-      // resetting the flag may cause inconsistency. 
+      // resetting the flag may cause inconsistency.
-  
+
-  
+
-      int numberOfChunks, ServerConnection servConn, 
+      int numberOfChunks, ServerConnection servConn,
-          }    
+          }
-  
+
-          }      
+          }
-        
+
-          }    
+          }
+
-  
+
-          }      
+          }
-      
+
-  
+
-
-        if (value instanceof CachedDeserializable) {
-          serializedValueObjs.addPart(null,
-              ((CachedDeserializable) value).getSerializedValue(),
-              ObjectPartList.OBJECT, null);
-        } else {
-          addDeSerializedObjectToObjectPartList(serializedValueObjs, value);
-        }
+        addObjectToPartList(serializedValueObjs, null, value);
-      for (Object value : values) {
-        if (value instanceof CachedDeserializable) {
-          serializedValueObjs.addPart(null,
-              ((CachedDeserializable) value).getSerializedValue(),
-              ObjectPartList.OBJECT, null);
-        } else {
-          addDeSerializedObjectToObjectPartList(serializedValueObjs, value);
-        }
+      for(int i=0; i<values.length; i+=2) {
+        Object key = values[i];
+        Object value = values[i+1];
+        addObjectToPartList(serializedValueObjs, key, value);
-    } else if (res instanceof CachedDeserializable) {
-      serializedObjs.addPart(null,
-          ((CachedDeserializable) res).getSerializedValue(),
-          ObjectPartList.OBJECT, null);
-    } else { // for deserialized objects
-      addDeSerializedObjectToObjectPartList(serializedObjs, res);
+    } else { //for deserialized objects
+      addObjectToPartList(serializedObjs, null, res);
-  
-  private static void addDeSerializedObjectToObjectPartList(
-      ObjectPartList objPartList, Object obj) {
-    if (obj instanceof byte[]) {
-      objPartList.addPart(null, obj, ObjectPartList.BYTES, null);
-    } else {
-      objPartList.addPart(null, obj, ObjectPartList.OBJECT, null);
+
+  private static void addObjectToPartList(ObjectPartList objPartList, Object key, Object value) {
+    Object object = value;
+    boolean isObject = true;
+    if (value instanceof CachedDeserializable) {
+      object = ((CachedDeserializable)value).getSerializedValue();
+    else if(value instanceof byte[]){
+      isObject = false;
+    }
+
+    object = GeodeSecurityUtil.postProcess(null, key, object, isObject);
+    if(key!=null){
+      objPartList.addPart(null, key, ObjectPartList.OBJECT, null);
+    }
+    objPartList.addPart(null, object, isObject?ObjectPartList.OBJECT:ObjectPartList.BYTES, null);
