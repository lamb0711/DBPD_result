GEODE-77 fixing a hang caused by wrong DSFID in RemoveMemberMessage

also addressing an authentication issue found by Jason with the new
GMSJoinLeaveJUnitTest, and adding a test method for removeMember()

+import java.util.Collections;
+import java.util.List;
-   * the most other threads.
+   * the most other threads.<p>
+   * 
+   * The findDependenciesWith method can then be used to find all
+   * top-level threads that are blocked by the culprit.
-  public DependencyGraph findDependenciesWith(String objectName) {
+  
+  /**
+   * This returns a collection of top-level threads and their
+   * path to the given object.  The object name is some
+   * substring of the toString of the object
+   *
+   * @param objectName
+   */
+  public List<DependencyGraph> findDependenciesWith(String objectName) {
+    
+    // first find a dependency containing the node.  If we can't find one
+    // we can just quit
-      return null;
+      return Collections.emptyList();
-    DependencyGraph result = new DependencyGraph();
-    
-    // references.  These will give us graphs of endpoints
-    // that reach to the node we're interested in
+    // references, references to those references, etc.
+    // This should give us a collection that includes all
+    // top-level nodes that have no references to them
-    // find all of the downward graphs for each depender
-    // and add their vertices.  These are things dependedOn
-    // by the node we're interested in.
+
+    // find all terminal nodes having no incoming
+    // dependers.
+    Set<Object> allDependants = new HashSet<>();
+    for (Dependency dep: edges) {
+      allDependants.add(dep.dependsOn);
+    }
+    
+    List<DependencyGraph> result = new LinkedList<>();
-      if (!result.getVertices().contains(depender)) {
-        DependencyGraph subgraph = getSubGraph(depender);
-        result.addEdges(subgraph.getEdges());
+      if (!allDependants.contains(depender)) {
+        result.add(getSubGraph(depender));
+    
-  
