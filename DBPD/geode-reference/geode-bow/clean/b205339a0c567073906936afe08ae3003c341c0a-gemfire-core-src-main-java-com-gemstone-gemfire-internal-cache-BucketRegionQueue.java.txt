Merge branch 'feature/GEODE-8' into develop

+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
+import com.gemstone.gemfire.internal.cache.versions.RegionVersionVector;
+import com.gemstone.gemfire.internal.cache.versions.VersionSource;
+import com.gemstone.gemfire.internal.cache.wan.GatewaySenderEventImpl;
+import com.gemstone.gemfire.internal.offheap.OffHeapRegionEntryHelper;
+  @Override
+  public void closeEntries() {
+    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+      @Override
+      public void run() {
+        BucketRegionQueue.super.closeEntries();
+      }
+    });
+    this.indexes.clear();
+    this.eventSeqNumQueue.clear();
+  }
+  
+  @Override
+  public Set<VersionSource> clearEntries(final RegionVersionVector rvv) {
+    final AtomicReference<Set<VersionSource>> result = new AtomicReference<Set<VersionSource>>();
+    OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+      @Override
+      public void run() {
+        result.set(BucketRegionQueue.super.clearEntries(rvv));
+      }
+    });
+    this.eventSeqNumQueue.clear();
+    return result.get();
+  }
+  
+
+  @Override
+  public void forceSerialized(EntryEventImpl event) {
+    // NOOP since we want the value in the region queue to stay in object form.
+  }
+
+      Object ov = event.getRawOldValue();
+      if (ov instanceof GatewaySenderEventImpl) {
+        ((GatewaySenderEventImpl) ov).release();
+      }
+
+
+    Object rov = event.getRawOldValue();
+    if (rov instanceof GatewaySenderEventImpl) {
+      ((GatewaySenderEventImpl) rov).release();
+    }
-
-    return object;
+    return object;  // OFFHEAP: ok since callers are careful to do destroys on region queue after finished with peeked object.
-  
-  public Object peek() {
+
+  public Object peek() {
-  protected void addToEventQueue(Object key, boolean didPut, EntryEventImpl event) {
+  protected void addToEventQueue(Object key, boolean didPut, EntryEventImpl event, int sizeOfHDFSEvent) {
-      
-//    Object key = this.eventSeqNumQueue.remove();
-//    Object object = null;
-//    if (key != null) {
-//      //object = PartitionRegionHelper
-//      //    .getLocalPrimaryData(getPartitionedRegion()).get(key);
-//      object = optimalGet(key);
-//      /**
-//       * TODO: For the time being this is same as peek. To do a batch peek we
-//       * need to remove the head key. We will destroy the key once the event is
-//       * delivered to the GatewayReceiver.
-//       */
-//      destroyKey(key);
-//    }
-//    return object;
+    // Currently has no callers.
+    // To support this callers need to call freeOffHeapResources on the returned GatewaySenderEventImpl.
+//     Object key = this.eventSeqNumQueue.remove();
+//     Object object = null;
+//     if (key != null) {
+//       object = PartitionRegionHelper
+//           .getLocalPrimaryData(getPartitionedRegion()).get(key);
+//       /**
+//        * TODO: For the time being this is same as peek. To do a batch peek we
+//        * need to remove the head key. We will destroy the key once the event is
+//        * delivered to the GatewayReceiver.
+//        */
+//       destroyKey(key);
+//     }
+//     return object; // TODO OFFHEAP: see what callers do with the returned GatewaySenderEventImpl. We need to inc its refcount before we do the destroyKey.
-	  getPartitionedRegion().checkReadiness();
-	  if (isBucketDestroyed()) {
-	    throw new ForceReattemptException(
-	        "Bucket moved",
-	        new RegionDestroyedException(
-	            LocalizedStrings.PartitionedRegionDataStore_REGION_HAS_BEEN_DESTROYED
-	                .toLocalizedString(), getPartitionedRegion()
-	                .getFullPath()));
-	  }
-	}
-	throw enf;
-	} catch (RegionDestroyedException rde) {
-	  getPartitionedRegion().checkReadiness();
-	  if (isBucketDestroyed()) {
-	    throw new ForceReattemptException("Bucket moved while destroying key "
-	        + key, rde);
-	  }
-	} finally {
+        getPartitionedRegion().checkReadiness();
+        if (isBucketDestroyed()) {
+          throw new ForceReattemptException(
+              "Bucket moved",
+              new RegionDestroyedException(
+                  LocalizedStrings.PartitionedRegionDataStore_REGION_HAS_BEEN_DESTROYED
+                      .toLocalizedString(), getPartitionedRegion()
+                      .getFullPath()));
+        }
+      }
+      throw enf;
+    } catch (RegionDestroyedException rde) {
+      getPartitionedRegion().checkReadiness();
+      if (isBucketDestroyed()) {
+        throw new ForceReattemptException("Bucket moved while destroying key "
+            + key, rde);
+      }
+    } finally {
-	}
-	    
-	this.notifyEntriesRemoved();
+      event.release();
+    }
+    
+    this.notifyEntriesRemoved();
