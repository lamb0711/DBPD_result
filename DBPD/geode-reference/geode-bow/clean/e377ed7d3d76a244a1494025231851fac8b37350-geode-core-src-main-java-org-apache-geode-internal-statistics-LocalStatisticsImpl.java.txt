GEODE-6850: change int stats to long (#3713)

The "Int" methods on the statistics interfaces have been deprecated in favor of the corresponding "Long" methods.
The implementation of these deprecated "Int" methods now use the "Long" methods.
The only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a "Number" instance.
These methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for "Int" stats, these methods used to return an "Integer" instance and now return a "Long" instance. If code used to cast to an "Integer" it will now be broken.
Many places in the product now use these deprecated "Int" methods and as of this checkin all those places are now creating a "Long" statistic.
-  /** In JOM Statistics, the values of the int statistics */
-  private final int[] intStorage;
-
-  /**
-   * An array containing the JOM object used to lock a int statistic when it is incremented.
-   */
-  private final transient Object[] intLocks;
-
+  private final int longCount;
-    int intCount = realType.getIntStatCount();
-    int longCount = realType.getLongStatCount();
+    longCount = realType.getLongStatCount();
-    if (intCount > 0) {
-      this.intStorage = new int[intCount];
-      if (atomicIncrements) {
-        this.intLocks = new Object[intCount];
-        for (int i = 0; i < intLocks.length; i++) {
-          intLocks[i] = new Object();
-        }
-      } else {
-        this.intLocks = null;
-      }
-    } else {
-      this.intStorage = null;
-      this.intLocks = null;
-    }
-
-    return intLocks != null || longLocks != null || doubleLocks != null;
+    return longLocks != null || doubleLocks != null;
+  }
+
+  private int getOffsetFromLongId(int id) {
+    return id;
+  }
+
+  private int getOffsetFromDoubleId(int id) {
+    return id - this.longCount;
-  protected void _setInt(int offset, int value) {
-    this.intStorage[offset] = value;
-  }
-
-  @Override
-  protected void _setLong(int offset, long value) {
+  protected void _setLong(int id, long value) {
+    int offset = getOffsetFromLongId(id);
-  protected void _setDouble(int offset, double value) {
+  protected void _setDouble(int id, double value) {
+    int offset = getOffsetFromDoubleId(id);
-  protected int _getInt(int offset) {
-    return this.intStorage[offset];
-  }
-
-  @Override
-  protected long _getLong(int offset) {
+  protected long _getLong(int id) {
+    int offset = getOffsetFromLongId(id);
-  protected double _getDouble(int offset) {
+  protected double _getDouble(int id) {
+    int offset = getOffsetFromDoubleId(id);
-  protected void _incInt(int offset, int delta) {
-    if (this.intLocks != null) {
-      synchronized (this.intLocks[offset]) {
-        this.intStorage[offset] += delta;
-      }
-    } else {
-      this.intStorage[offset] += delta;
-    }
-  }
-
-  @Override
-  protected void _incLong(int offset, long delta) {
+  protected void _incLong(int id, long delta) {
+    int offset = getOffsetFromLongId(id);
-  protected void _incDouble(int offset, double delta) {
+  protected void _incDouble(int id, double delta) {
+    int offset = getOffsetFromDoubleId(id);
-
-  /////////////////// internal package methods //////////////////
-
-  int[] _getIntStorage() {
-    return this.intStorage;
-  }
-
-  long[] _getLongStorage() {
-    return this.longStorage;
-  }
-
-  double[] _getDoubleStorage() {
-    return this.doubleStorage;
-  }
