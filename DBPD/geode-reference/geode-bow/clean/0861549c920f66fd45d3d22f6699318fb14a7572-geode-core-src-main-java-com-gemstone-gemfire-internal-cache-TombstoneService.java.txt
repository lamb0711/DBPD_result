refactored currentTombstone code

-     * The sweeper thread's current tombstone
+     * The sweeper thread's current tombstone.
+     * Only set by the run() thread while holding the currentTombstoneLock.
+     * Read by other threads while holding the currentTombstoneLock.
-        final Set<DistributedRegion> regionsAffected = new HashSet<DistributedRegion>();
-        long removalSize = 0;
-        expiredTombstones = new HashSet<Tombstone>();
-        if (expired.size() == 0) {
+        if (expired.isEmpty()) {
+        expiredTombstones = new HashSet<Tombstone>();
+        final Set<DistributedRegion> regionsAffected = new HashSet<DistributedRegion>();
+        long removalSize = 0;
+      Tombstone myTombstone = null;
-      currentTombstone = null;
-          if (currentTombstone == null) {
-            try {
-              currentTombstoneLock.lock();
-              try {
-                currentTombstone = tombstones.remove();
-              } finally {
-                currentTombstoneLock.unlock();
+          if (myTombstone == null) {
+            myTombstone = setCurrentToNextTombstone();
+          }
+          long sleepTime = 0;
+          boolean expireMyTombstone = false;
+          if (myTombstone == null) {
+            sleepTime = expiryTime;
+          } else {
+            long msTillMyTombstoneExpires = myTombstone.getVersionTimeStamp() + expiryTime - now;
+            if (forceExpirationCount > 0) {
+              if (msTillMyTombstoneExpires > 0 && msTillMyTombstoneExpires <= minimumRetentionMs) {
+                sleepTime = msTillMyTombstoneExpires;
+              } else {
+                forceExpirationCount--;
+                expireMyTombstone = true;
-              if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
-                logger.trace(LogMarker.TOMBSTONE, "current tombstone is {}", currentTombstone);
-              }
-            } catch (NoSuchElementException e) {
-              // expected
-              if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
-                logger.trace(LogMarker.TOMBSTONE, "queue is empty - will sleep");
-              }
-              forceExpirationCount = 0;
+            } else if (msTillMyTombstoneExpires > 0) {
+              sleepTime = msTillMyTombstoneExpires;
+            } else {
+              expireMyTombstone = true;
-          long sleepTime;
-          if (currentTombstone == null) {
-            sleepTime = expiryTime;
-          } else if (currentTombstone.getVersionTimeStamp()+expiryTime > now && (forceExpirationCount <= 0 || (currentTombstone.getVersionTimeStamp() + expiryTime - now) <= minimumRetentionMs)) {
-            sleepTime = currentTombstone.getVersionTimeStamp()+expiryTime - now;
-          } else {
-            if (forceExpirationCount > 0) {
-              forceExpirationCount--;
-            }
-            sleepTime = 0;
+          if (expireMyTombstone) {
-                  logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", currentTombstone);
+                  logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", myTombstone);
-                expiredTombstones.add(currentTombstone);
+                expiredTombstones.add(myTombstone);
-                  logger.trace(LogMarker.TOMBSTONE, "removing expired tombstone {}", currentTombstone);
+                  logger.trace(LogMarker.TOMBSTONE, "removing expired tombstone {}", myTombstone);
-                queueSize.addAndGet(-currentTombstone.getSize());
-                currentTombstone.region.getRegionMap().removeTombstone(currentTombstone.entry, currentTombstone, false, true);
+                queueSize.addAndGet(-myTombstone.getSize());
+                myTombstone.region.getRegionMap().removeTombstone(myTombstone.entry, myTombstone, false, true);
-              currentTombstoneLock.lock();
-              try {
-                currentTombstone = null;
-              } finally {
-                currentTombstoneLock.unlock();
-              }
+              myTombstone = null;
+              clearCurrentTombstone();
-              currentTombstoneLock.lock();
-              try {
-                currentTombstone = null;
-              } finally {
-                currentTombstoneLock.unlock();
-              }
+              myTombstone = null;
+              clearCurrentTombstone();
-                    if (test == currentTombstone) {
-                      currentTombstoneLock.lock();
-                      try {
-                        currentTombstone = null;
-                      } finally {
-                        currentTombstoneLock.unlock();
-                      }
+                    if (test == myTombstone) {
+                      myTombstone = null;
+                      clearCurrentTombstone();
-                  } else if (batchMode && test != currentTombstone && (test.getVersionTimeStamp()+expiryTime) <= now) {
+                  } else if (batchMode && test != myTombstone && (test.getVersionTimeStamp()+expiryTime) <= now) {
-                      logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", currentTombstone);
+                      logger.trace(LogMarker.TOMBSTONE, "expiring tombstone {}", test);
-                    if (test == currentTombstone) {
-                      currentTombstoneLock.lock();
-                      try {
-                        currentTombstone = null;
-                      } finally {
-                        currentTombstoneLock.unlock();
-                      }
+                    if (test == myTombstone) {
+                      myTombstone = null;
+                      clearCurrentTombstone();
+
+    private void clearCurrentTombstone() {
+      currentTombstoneLock.lock();
+      currentTombstone = null;
+      currentTombstoneLock.unlock();
+    }
+
+    /**
+     * Returns the new currentTombstone taken from the tombstones queue; null if no next tombstone
+     */
+    private Tombstone setCurrentToNextTombstone() {
+      Tombstone result;
+      currentTombstoneLock.lock();
+      try {
+        result = tombstones.poll();
+        if (result != null) {
+          if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
+            logger.trace(LogMarker.TOMBSTONE, "current tombstone is {}", result);
+          }
+          currentTombstone = result;
+        } else {
+          if (logger.isTraceEnabled(LogMarker.TOMBSTONE)) {
+            logger.trace(LogMarker.TOMBSTONE, "queue is empty - will sleep");
+          }
+          forceExpirationCount = 0;
+        }
+      } finally {
+        currentTombstoneLock.unlock();
+      }
+      return result;
+    }
