GEODE-8330: Structural Improvements to Versioning

Follow-on to GEODE-8240, this commit eliminates redundancy in 
versioning code and provides a single way to convert a short
to a version and a single way to acquire a known version from
a (possibly unknown) version.
+import java.util.Map;
+import org.apache.geode.internal.cache.tier.Command;
-import org.apache.geode.internal.serialization.UnsupportedSerializationVersionException;
+import org.apache.geode.internal.serialization.Versioning;
+import org.apache.geode.internal.serialization.VersioningIO;
-    short clientVersionOrdinal = Version.readOrdinal(dataInputStream);
+    short clientVersionOrdinal = VersioningIO.readOrdinal(dataInputStream);
-    try {
-      clientVersion = Version.fromOrdinal(clientVersionOrdinal);
-      if (CommandInitializer.getCommands(clientVersion) == null) {
-        throw new UnsupportedSerializationVersionException("Client version {} is not supported");
+    clientVersion = Versioning.getKnownVersionOrDefault(
+        Versioning.getVersionOrdinal(clientVersionOrdinal), null);
+
+    final String message;
+    if (clientVersion == null) {
+      message = Version.unsupportedVersionMessage(clientVersionOrdinal);
+    } else {
+      final Map<Integer, Command> commands = CommandInitializer.getCommands(clientVersion);
+      if (commands == null) {
+        message = "Client version {} is not supported";
+      } else {
+        if (isVersionOlderThan57(clientVersion)) {
+          throw new IOException(new UnsupportedVersionException(clientVersionOrdinal));
+        }
+        if (logger.isDebugEnabled()) {
+          logger.debug("{}: Registering client with version: {}", this, clientVersion);
+        }
+        return true;
-      if (isVersionOlderThan57(clientVersion)) {
-        throw new IOException(new UnsupportedVersionException(clientVersionOrdinal));
-      }
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: Registering client with version: {}", this, clientVersion);
-      }
-    } catch (UnsupportedSerializationVersionException e) {
-      UnsupportedVersionException unsupportedVersionException =
-          new UnsupportedVersionException(e.getMessage());
-      SocketAddress socketAddress = socket.getRemoteSocketAddress();
-
-      if (socketAddress != null) {
-        String sInfo = " Client: " + socketAddress.toString() + ".";
-        unsupportedVersionException = new UnsupportedVersionException(e.getMessage() + sInfo);
-      }
-
-      logger.warn(
-          "CacheClientNotifier: Registering client version is unsupported.  Error details: ",
-          unsupportedVersionException);
-
-      socketMessageWriter.writeException(dataOutputStream,
-          CommunicationMode.UnsuccessfulServerToClient.getModeNumber(),
-          unsupportedVersionException, null);
-
-      return false;
-    return true;
+    UnsupportedVersionException unsupportedVersionException =
+        new UnsupportedVersionException(message);
+    SocketAddress socketAddress = socket.getRemoteSocketAddress();
+
+    if (socketAddress != null) {
+      String sInfo = " Client: " + socketAddress.toString() + ".";
+      unsupportedVersionException = new UnsupportedVersionException(message + sInfo);
+    }
+
+    logger.warn(
+        "CacheClientNotifier: Registering client version is unsupported.  Error details: ",
+        unsupportedVersionException);
+
+    socketMessageWriter.writeException(dataOutputStream,
+        CommunicationMode.UnsuccessfulServerToClient.getModeNumber(),
+        unsupportedVersionException, null);
+
+    return false;
