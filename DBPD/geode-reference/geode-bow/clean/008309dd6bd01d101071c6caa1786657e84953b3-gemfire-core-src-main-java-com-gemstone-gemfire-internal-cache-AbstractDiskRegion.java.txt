Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.Iterator;
+import java.util.Map;
+import com.gemstone.gemfire.internal.util.concurrent.CustomEntryConcurrentHashMap;
+  private boolean offHeap;
+  
+      this.offHeap = drv.getOffHeap();
+    this.offHeap = drv.getOffHeap();
-                        String compressorClassName) {
+                        String compressorClassName, boolean offHeap) {
+    this.offHeap = offHeap;
+      if (this.entries != null) {
+        CustomEntryConcurrentHashMap<Object, Object> other = ((AbstractRegionMap)this.entries)._getMap();
+        Iterator<Map.Entry<Object, Object>> it = other
+            .entrySetWithReusableEntries().iterator();
+        while (it.hasNext()) {
+          Map.Entry<Object, Object> me = it.next();
+          RegionEntry oldRe = (RegionEntry)me.getValue();
+          if (oldRe instanceof OffHeapRegionEntry) {
+            ((OffHeapRegionEntry) oldRe).release();
+          } else {
+            // no need to keep iterating; they are all either off heap or on heap.
+            break;
+          }
+        }
+      }
+      + " -offHeap=" + getOffHeap()
+    sb.append("-offHeap=" + getOffHeap()); sb.append(lineSeparator);
+    msg.append("\n\toffHeap=").append(getOffHeap());
+  @Override
+  public boolean getOffHeap() {
+    return this.offHeap;
+  }
+
