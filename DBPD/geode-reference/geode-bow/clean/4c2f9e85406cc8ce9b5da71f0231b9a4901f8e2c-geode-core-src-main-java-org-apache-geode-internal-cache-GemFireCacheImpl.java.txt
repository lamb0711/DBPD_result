GEODE-5078: provide API that does not allow access to internal regions (#1815)

The InternalCache interface now has a method named getCacheForProcessingClientRequests
that will return an InternalCache that throws a NotAuthorizedException if an attempt is made using
this cache to access or create an internal region.

-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-        if (internalRegion.isSecret() || internalRegion.isUsedForMetaRegion()
-            || internalRegion instanceof HARegion
-            || internalRegion.isUsedForPartitionedRegionAdmin() || internalRegion
-                .isInternalRegion()/* internalRegion.isUsedForPartitionedRegionBucket() */) {
-          continue; // Skip administrative PartitionedRegions
+        if (internalRegion.isInternalRegion()) {
+          continue; // Skip internal regions
-        if (region.isSecret() || region.isUsedForMetaRegion() || region instanceof HARegion
+        if (region.isSecret() || region.isUsedForMetaRegion()
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    } else {
-      return new RegionFactoryImpl<>(this, shortcut);
-    }
+    throwIfClient();
+    return new RegionFactoryImpl<>(this, shortcut);
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
-    if (isClient()) {
-      throw new UnsupportedOperationException("operation is not supported on a client cache");
-    }
+    throwIfClient();
+
+  private void throwIfClient() {
+    if (isClient()) {
+      throw new UnsupportedOperationException("operation is not supported on a client cache");
+    }
+  }
+
+  private final InternalCacheForClientAccess cacheForClients =
+      new InternalCacheForClientAccess(this);
+
+  @Override
+  public InternalCache getCacheForProcessingClientRequests() {
+    return cacheForClients;
+  }
+
