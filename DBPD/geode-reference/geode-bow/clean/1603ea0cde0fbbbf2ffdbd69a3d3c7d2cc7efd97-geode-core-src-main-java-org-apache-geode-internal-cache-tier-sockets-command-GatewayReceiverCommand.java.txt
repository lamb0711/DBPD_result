GEODE-6626: Separate CacheServer and GatewayReceiver

Introduce new interfaces and then have GatewayReceiverServer extend
CacheServerImpl to override behavior.

-  private static final GatewayReceiverCommand singleton = new GatewayReceiverCommand();
+  private static final GatewayReceiverCommand SINGLETON = new GatewayReceiverCommand();
-    return singleton;
+    return SINGLETON;
-  private GatewayReceiverCommand() {}
+  private GatewayReceiverCommand() {
+    // nothing
+  }
-    } else {
-      String reason = String.format("Region %s was not found during batch create request %s",
-          new Object[] {regionName, Integer.valueOf(batchId)});
-      throw new RegionDestroyedException(reason, regionName);
+    String reason = String.format("Region %s was not found during batch create request %s",
+        regionName, batchId);
+    throw new RegionDestroyedException(reason, regionName);
-    Part regionNamePart = null, keyPart = null, valuePart = null, callbackArgPart = null;
-    String regionName = null;
-    Object callbackArg = null, key = null;
-    int partNumber = 0;
-    EventID eventId = null;
-    LocalRegion region = null;
-    List<BatchException70> exceptions = new ArrayList<BatchException70>();
-    Throwable fatalException = null;
-    // requiresResponse = true;// let PROCESS_BATCH deal with this itself
+
-    Part callbackArgExistsPart;
-          new Object[] {batchId, serverConnection.getLatestBatchIdReplied()});
+          batchId, serverConnection.getLatestBatchIdReplied());
-
-
-    // logger.warn("Received process batch request " + batchId + " containing
-    // " + numberOfEvents + " events (" + msg.getPayloadLength() + " bytes) with
-    // " + (earlyAck ? "early" : "normal") + " acknowledgement on " +
-    // getSocketString());
-    // if (earlyAck) {
-    // logger.warn("Sent process batch early response for batch " + batchId +
-    // " containing " + numberOfEvents + " events (" + msg.getPayloadLength() +
-    // " bytes) with " + (earlyAck ? "early" : "normal") + " acknowledgement on
-    // " + getSocketString());
-    // }
-    partNumber = 2;
+    int partNumber = 2;
-    boolean removeOnException =
-        clientMessage.getPart(partNumber++).getSerializedForm()[0] == 1 ? true : false;
+    boolean removeOnException = clientMessage.getPart(partNumber++).getSerializedForm()[0] == 1;
+    Part valuePart = null;
+    Throwable fatalException = null;
+    List<BatchException70> exceptions = new ArrayList<>();
-      boolean retry = true;
-      boolean isPdxEvent = false;
-      // System.out.println("Processing event " + i + " in batch " + batchId + "
-      // starting with part number " + partNumber);
+
-      long versionTimeStamp = VersionTag.ILLEGAL_VERSION_TIMESTAMP;
-      EventIDHolder clientEvent = null;
-
+        boolean isPdxEvent = false;
+        boolean retry = true;
-                new Object[] {serverConnection.getName(), Integer.valueOf(batchId),
-                    Integer.valueOf(numberOfEvents)}),
-                e);
+                serverConnection.getName(), batchId, numberOfEvents), e);
-          regionName = null;
-          key = null;
-          callbackArg = null;
+          String regionName = null;
+          Object key = null;
+          Object callbackArg = null;
-          regionNamePart = clientMessage.getPart(partNumber + 2);
+          Part regionNamePart = clientMessage.getPart(partNumber + 2);
+          EventID eventId;
-                new Object[] {serverConnection.getName(), Integer.valueOf(batchId),
-                    Integer.valueOf(numberOfEvents)}),
-                e);
+                serverConnection.getName(), batchId, numberOfEvents), e);
-          keyPart = clientMessage.getPart(partNumber + 4);
+          Part keyPart = clientMessage.getPart(partNumber + 4);
-                new Object[] {serverConnection.getName(), Integer.valueOf(batchId),
-                    Integer.valueOf(numberOfEvents)}),
-                e);
+                serverConnection.getName(), batchId, numberOfEvents), e);
-          int index = -1;
+          int index;
+          Part callbackArgPart;
+          EventIDHolder clientEvent;
+          long versionTimeStamp;
+          Part callbackArgExistsPart;
+          LocalRegion region;
-                            new Object[] {serverConnection.getName(),
-                                Integer.valueOf(batchId),
-                                Integer.valueOf(numberOfEvents)}),
+                            serverConnection.getName(), batchId, numberOfEvents),
-                  Object[] messageArgs =
-                      new Object[] {serverConnection.getName(), Integer.valueOf(batchId)};
-                    message =
-                        "%s: The input region name for the batch create request %s is null";
+                    message = "%s: The input key for the batch create request %s is null";
-                    message =
-                        "%s: The input region name for the batch create request %s is null";
+                    message = "%s: The input region name for the batch create request %s is null";
-                  String s = String.format(message, messageArgs);
+                  String s = String.format(message, serverConnection.getName(), batchId);
-                            new Object[] {serverConnection.getName(), regionName,
-                                key, valuePart, callbackArg}));
+                            serverConnection.getName(), regionName, key, valuePart, callbackArg));
-                    new Object[] {serverConnection.getName(), Integer.valueOf(batchId),
-                        Integer.valueOf(numberOfEvents)}),
-                    e);
+                    serverConnection.getName(), batchId, numberOfEvents), e);
+
-                /*
-                 * CLIENT EXCEPTION HANDLING TESTING CODE keySt = (String) key;
-                 * System.out.println("Processing updated key: " + key); if
-                 * (keySt.startsWith("failure")) { throw new Exception(LocalizedStrings
-                 * .ProcessBatch_THIS_EXCEPTION_REPRESENTS_A_FAILURE_ON_THE_SERVER
-                 * )); }
-                 */
-
-                                new Object[] {serverConnection.getName(),
-                                    Integer.valueOf(batchId),
-                                    Integer.valueOf(numberOfEvents)}),
+                                serverConnection.getName(), batchId, numberOfEvents),
-                  Object[] messageArgs =
-                      new Object[] {serverConnection.getName(), Integer.valueOf(batchId)};
-                    message =
-                        "%s: The input key for the batch update request %s is null";
+                    message = "%s: The input key for the batch update request %s is null";
-                    message =
-                        "%s: The input region name for the batch update request %s is null";
+                    message = "%s: The input region name for the batch update request %s is null";
-                  String s = String.format(message, messageArgs);
+                  String s = String.format(message, serverConnection.getName(), batchId);
-                    final Object[] msgArgs = new Object[] {serverConnection.getName(), regionName,
-                        key, valuePart, callbackArg};
-                    String s = String.format(message, msgArgs);
+                    String s = String.format(message, serverConnection.getName(), regionName,
+                        key, valuePart, callbackArg);
-                    new Object[] {serverConnection.getName(), Integer.valueOf(batchId),
-                        Integer.valueOf(numberOfEvents)}),
-                    e);
+                    serverConnection.getName(), batchId, numberOfEvents), e);
+
-                                new Object[] {serverConnection.getName(),
-                                    Integer.valueOf(batchId),
-                                    Integer.valueOf(numberOfEvents)}),
+                                serverConnection.getName(), batchId, numberOfEvents),
-                  Object[] messageArgs =
-                      new Object[] {serverConnection.getName(), Integer.valueOf(batchId)};
-                  String s = String.format(message, messageArgs);
+                  String s = String.format(message, serverConnection.getName(), batchId);
-                        new Object[] {serverConnection.getName(), key});
-                    // throw new Exception(e);
+                        serverConnection.getName(), key);
-                    new Object[] {serverConnection.getName(), Integer.valueOf(batchId),
-                        Integer.valueOf(numberOfEvents)}),
+                    serverConnection.getName(), batchId, numberOfEvents),
-            case 3: // Update Time-stamp for a RegionEntry
+            case 3: // Update Time-stamp for a RegionEntry
-                  Object[] messageArgs = new Object[] {serverConnection.getName(),
-                      Integer.valueOf(batchId), Integer.valueOf(numberOfEvents)};
-                  String s = String.format(message, messageArgs);
+                  String s = String.format(message, serverConnection.getName(),
+                      batchId, numberOfEvents);
-                          new Object[] {serverConnection.getName(), key});
+                          serverConnection.getName(), key);
-                    new Object[] {serverConnection.getName(), Integer.valueOf(batchId),
-                        Integer.valueOf(numberOfEvents)}),
-                    e);
+                    serverConnection.getName(), batchId, numberOfEvents), e);
-                  new Object[] {serverConnection.getName(), Integer.valueOf(actionType),
-                      serverConnection.getSocketString()});
+                  serverConnection.getName(), actionType, serverConnection.getSocketString());
-              new Object[] {serverConnection.getMembershipID()}), e.getCause());
+              serverConnection.getMembershipID()), e.getCause());
-            new Object[] {
-                ((InternalDistributedSystem) ds).getDistributionManager().getDistributedSystemId(),
-                ds.getDistributedMember()});
+            ((InternalDistributedSystem) ds).getDistributionManager().getDistributedSystemId(),
+            ds.getDistributedMember());
