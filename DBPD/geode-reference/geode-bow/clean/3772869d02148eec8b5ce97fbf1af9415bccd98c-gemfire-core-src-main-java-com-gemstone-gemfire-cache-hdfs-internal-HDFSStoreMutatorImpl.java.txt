GEODE-10: Refactor HdfsStore api to match spec

* Currently HdfsStore's configuration object is nested and a user needs to
  create multiple sub objects to manage the store instance. This is less usable
  and gets confusing at times. User also gets exposed to a lot of internal
  details. So replacing nested configuration with a flat structure will be
  better.
* Rename members

-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributes;
-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributesFactory;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreConfigHolder.AbstractHDFSCompactionConfigHolder;
-  private HDFSCompactionConfigMutator compactionMutator;
-  private HDFSEventQueueAttributesMutator qMutator;
+  private Boolean autoMajorCompact;
-    compactionMutator = new HDFSCompactionConfigMutatorImpl(configHolder.getHDFSCompactionConfig());
-    qMutator = new HDFSEventQueueAttributesMutatorImpl(null);
-    compactionMutator = new HDFSCompactionConfigMutatorImpl(configHolder.getHDFSCompactionConfig());
-    // The following two steps are needed to set the null boolean values in compactionMutator
-    configHolder.setMinorCompaction(configHolder.getMinorCompaction());
-    compactionMutator.setAutoMajorCompaction(configHolder.getHDFSCompactionConfig().getAutoMajorCompaction());
-    qMutator = new HDFSEventQueueAttributesMutatorImpl(configHolder.getHDFSEventQueueAttributes());
-  public HDFSStoreMutator setMaxFileSize(int maxFileSize) {
-    configHolder.setMaxFileSize(maxFileSize);
+  public HDFSStoreMutator setMaxWriteOnlyFileSize(int maxFileSize) {
+    configHolder.setMaxWriteOnlyFileSize(maxFileSize);
-  public int getMaxFileSize() {
-    return configHolder.getMaxFileSize();
+  public int getMaxWriteOnlyFileSize() {
+    return configHolder.getMaxWriteOnlyFileSize();
-  public HDFSStoreMutator setFileRolloverInterval(int count) {
-    configHolder.setFileRolloverInterval(count);
+  public HDFSStoreMutator setWriteOnlyFileRolloverInterval(int count) {
+    configHolder.setWriteOnlyFileRolloverInterval(count);
-  public int getFileRolloverInterval() {
-    return configHolder.getFileRolloverInterval();
+  public int getWriteOnlyFileRolloverInterval() {
+    return configHolder.getWriteOnlyFileRolloverInterval();
-  public HDFSCompactionConfigMutator setMinorCompaction(boolean auto) {
+  public HDFSStoreMutator setMinorCompaction(boolean auto) {
-  public HDFSCompactionConfigMutator getCompactionConfigMutator() {
-    return compactionMutator;
+  public HDFSStoreMutator setMinorCompactionThreads(int count) {
+    configHolder.setMinorCompactionThreads(count);
+    return this;
+  }
+  @Override
+  public int getMinorCompactionThreads() {
+    return configHolder.getMinorCompactionThreads();
+  }
+  
+  @Override
+  public HDFSStoreMutator setMajorCompaction(boolean auto) {
+    autoMajorCompact = Boolean.valueOf(auto);
+    configHolder.setMajorCompaction(auto);
+    return this;
+  }
+  @Override
+  public Boolean getMajorCompaction() {
+    return autoMajorCompact;
-  public HDFSEventQueueAttributesMutator getHDFSEventQueueAttributesMutator() {
-    return qMutator;
+  public HDFSStoreMutator setMajorCompactionInterval(int count) {
+    configHolder.setMajorCompactionInterval(count);
+    return this;
+  }
+  @Override
+  public int getMajorCompactionInterval() {
+    return configHolder.getMajorCompactionInterval();
-  public static class HDFSEventQueueAttributesMutatorImpl implements HDFSEventQueueAttributesMutator {
-    private HDFSEventQueueAttributesFactory factory = new HDFSEventQueueAttributesFactory();
-    int batchSize = -1;
-    int batchInterval = -1;
-    
-    public HDFSEventQueueAttributesMutatorImpl(HDFSEventQueueAttributes qAttrs) {
-      if (qAttrs == null) {
-        return;
-      }
-      
-      setBatchSizeMB(qAttrs.getBatchSizeMB());
-      setBatchTimeInterval(qAttrs.getBatchTimeInterval());
-    }
-    
-    @Override
-    public HDFSEventQueueAttributesMutator setBatchSizeMB(int size) {
-      factory.setBatchSizeMB(size);
-      batchSize = size;
-      // call factory.set to execute attribute value validation
-      return this;
-    }
-    @Override
-    public int getBatchSizeMB() {
-      return batchSize;
-    }
-
-    @Override
-    public HDFSEventQueueAttributesMutator setBatchTimeInterval(int interval) {
-      batchInterval = interval;
-      // call factory.set to execute attribute value validation
-      factory.setBatchTimeInterval(interval);
-      return this;
-    }
-    @Override
-    public int getBatchTimeInterval() {
-      return batchInterval;
-    }
-    
-    @Override
-    public String toString() {
-      StringBuilder builder = new StringBuilder();
-      builder.append("HDFSEventQueueAttributesMutatorImpl [");
-      if (batchSize > -1) {
-        builder.append("batchSize=");
-        builder.append(batchSize);
-        builder.append(", ");
-      }
-      if (batchInterval > -1) {
-        builder.append("batchInterval=");
-        builder.append(batchInterval);
-      }
-      builder.append("]");
-      return builder.toString();
-    }
+  @Override
+  public HDFSStoreMutator setMajorCompactionThreads(int count) {
+    configHolder.setMajorCompactionThreads(count);
+    return this;
+  }
+  @Override
+  public int getMajorCompactionThreads() {
+    return configHolder.getMajorCompactionThreads();
-  /**
-   * @author ashvina
-   */
-  public static class HDFSCompactionConfigMutatorImpl implements HDFSCompactionConfigMutator {
-    private AbstractHDFSCompactionConfigHolder configHolder;
-    private Boolean autoMajorCompact;
-
-    public HDFSCompactionConfigMutatorImpl(AbstractHDFSCompactionConfigHolder configHolder) {
-      this.configHolder = configHolder;
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMaxInputFileSizeMB(int size) {
-      configHolder.setMaxInputFileSizeMB(size);
-      return this;
-    }
-    @Override
-    public int getMaxInputFileSizeMB() {
-      return configHolder.getMaxInputFileSizeMB();
-    }
-    
-    @Override
-    public HDFSCompactionConfigMutator setMinInputFileCount(int count) {
-      configHolder.setMinInputFileCount(count);
-      return this;
-    }
-    @Override
-    public int getMinInputFileCount() {
-      return configHolder.getMinInputFileCount();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMaxInputFileCount(int count) {
-      configHolder.setMaxInputFileCount(count);
-      return this;
-    }
-    @Override
-    public int getMaxInputFileCount() {
-      return configHolder.getMaxInputFileCount();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMaxThreads(int count) {
-      configHolder.setMaxThreads(count);
-      return this;
-    }
-    @Override
-    public int getMaxThreads() {
-      return configHolder.getMaxThreads();
-    }
-    
-    @Override
-    public HDFSCompactionConfigMutator setAutoMajorCompaction(boolean auto) {
-      autoMajorCompact = Boolean.valueOf(auto);
-      configHolder.setAutoMajorCompaction(auto);
-      return this;
-    }
-    @Override
-    public Boolean getAutoMajorCompaction() {
-      return autoMajorCompact;
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMajorCompactionIntervalMins(int count) {
-      configHolder.setMajorCompactionIntervalMins(count);
-      return this;
-    }
-    @Override
-    public int getMajorCompactionIntervalMins() {
-      return configHolder.getMajorCompactionIntervalMins();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMajorCompactionMaxThreads(int count) {
-      configHolder.setMajorCompactionMaxThreads(count);
-      return this;
-    }
-    @Override
-    public int getMajorCompactionMaxThreads() {
-      return configHolder.getMajorCompactionMaxThreads();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setOldFilesCleanupIntervalMins(
-        int interval) {
-      configHolder.setOldFilesCleanupIntervalMins(interval);
-      return this;
-    }
-    @Override
-    public int getOldFilesCleanupIntervalMins() {
-      return configHolder.getOldFilesCleanupIntervalMins();
-    }
+  @Override
+  public HDFSStoreMutator setMaxInputFileSizeMB(int size) {
+    configHolder.setMaxInputFileSizeMB(size);
+    return this;
+  }
+  @Override
+  public int getMaxInputFileSizeMB() {
+    return configHolder.getMaxInputFileSizeMB();
+  }
+  
+  @Override
+  public HDFSStoreMutator setMinInputFileCount(int count) {
+    configHolder.setMinInputFileCount(count);
+    return this;
+  }
+  @Override
+  public int getMinInputFileCount() {
+    return configHolder.getMinInputFileCount();
+  }
+  
+  @Override
+  public HDFSStoreMutator setMaxInputFileCount(int count) {
+    configHolder.setMaxInputFileCount(count);
+    return this;
+  }
+  @Override
+  public int getMaxInputFileCount() {
+    return configHolder.getMaxInputFileCount();
+  }
+  
+  @Override
+  public HDFSStoreMutator setPurgeInterval(int interval) {
+    configHolder.setPurgeInterval(interval);
+    return this;
+  }
+  @Override
+  public int getPurgeInterval() {
+    return configHolder.getPurgeInterval();
+  @Override
+  public int getBatchSize() {
+    return configHolder.batchSize;
+  }
+  @Override
+  public HDFSStoreMutator setBatchSize(int size) {
+    configHolder.setBatchSize(size);
+    return this;
+  }
+
+  
+  @Override
+  public int getBatchInterval() {
+    return configHolder.batchIntervalMillis;
+  }
+  @Override
+  public HDFSStoreMutator setBatchInterval(int interval) {
+    configHolder.setBatchInterval(interval);
+    return this;
+  }
+    
-    if (compactionMutator.getAutoMajorCompaction() != null) {
+    if (getMajorCompaction() != null) {
-      builder.append(compactionMutator.getAutoMajorCompaction());
+      builder.append(getMajorCompaction());
-    if (qMutator != null) {
-      builder.append("qMutator=");
-      builder.append(qMutator);
-    }
