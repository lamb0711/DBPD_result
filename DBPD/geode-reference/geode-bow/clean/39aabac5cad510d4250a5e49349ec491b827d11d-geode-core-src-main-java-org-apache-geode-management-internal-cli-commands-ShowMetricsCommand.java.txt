Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-import org.apache.commons.lang.StringUtils;
+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
-  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_STATISTICS})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_STATISTICS},
+      interceptor = "org.apache.geode.management.internal.cli.commands.ShowMetricsCommand$Interceptor")
-    try {
-
-      if (export_to_report_to != null && !export_to_report_to.isEmpty()) {
-        if (!export_to_report_to.endsWith(".csv")) {
-          return ResultBuilder
-              .createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENSION, ".csv"));
-        }
+    DistributedMember member = null;
+    if (memberNameOrId != null) {
+      member = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
+      if (member == null) {
+        return ResultBuilder.createGemFireErrorResult(
+            CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberNameOrId));
-      if (regionName != null && !regionName.isEmpty()) {
-
-        if (StringUtils.isNotBlank(cacheServerPortString)) {
-          return ResultBuilder
-              .createUserErrorResult(CliStrings.SHOW_METRICS__CANNOT__USE__CACHESERVERPORT);
-        }
-
-        // MBean names contain the forward slash
-        if (!regionName.startsWith("/")) {
-          regionName = "/" + regionName;
-        }
-
-        if (memberNameOrId == null || memberNameOrId.isEmpty()) {
-          result = ResultBuilder.buildResult(
-              getDistributedRegionMetrics(regionName, export_to_report_to, categories));
-        } else {
-          DistributedMember member = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
-
-          if (member != null) {
-            result = ResultBuilder.buildResult(
-                getRegionMetricsFromMember(regionName, member, export_to_report_to, categories));
-          } else {
-            ErrorResultData erd = ResultBuilder.createErrorResultData();
-            erd.addLine(
-                CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberNameOrId));
-            result = ResultBuilder.buildResult(erd);
-          }
-        }
-      } else if (memberNameOrId != null && !memberNameOrId.isEmpty()) {
-
-        DistributedMember member = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
-
-        if (member != null) {
-          int cacheServerPort = -1;
-          if (cacheServerPortString != null && !cacheServerPortString.isEmpty()) {
-            try {
-              cacheServerPort = Integer.parseInt(cacheServerPortString);
-            } catch (NumberFormatException nfe) {
-              return ResultBuilder.createUserErrorResult("Invalid port");
-            }
-          }
-          result = ResultBuilder.buildResult(
-              getMemberMetrics(member, export_to_report_to, categories, cacheServerPort));
-        } else {
-          ErrorResultData erd = ResultBuilder.createErrorResultData();
-          erd.addLine(CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberNameOrId));
-          result = ResultBuilder.buildResult(erd);
-        }
-      } else {
-        if (StringUtils.isNotBlank(cacheServerPortString)) {
-          return ResultBuilder
-              .createUserErrorResult(CliStrings.SHOW_METRICS__CANNOT__USE__CACHESERVERPORT);
-        }
-        result = ResultBuilder.buildResult(getSystemWideMetrics(export_to_report_to, categories));
-      }
-    } catch (Exception e) {
-      logger.error(e.getMessage(), e);
-      return ResultBuilder.createGemFireErrorResult(CliUtil.stackTraceAsString(e));
+
+    if (regionName != null) {
+      if (memberNameOrId != null) {
+        result = ResultBuilder.buildResult(
+            getRegionMetricsFromMember(regionName, member, export_to_report_to, categories));
+      } else {
+        result = ResultBuilder
+            .buildResult(getDistributedRegionMetrics(regionName, export_to_report_to, categories));
+      }
+    } else if (memberNameOrId != null) {
+      int cacheServerPort = -1;
+      if (cacheServerPortString != null) {
+        cacheServerPort = Integer.parseInt(cacheServerPortString);
+      }
+      result = ResultBuilder
+          .buildResult(getMemberMetrics(member, export_to_report_to, categories, cacheServerPort));
+    } else {
+      result = ResultBuilder.buildResult(getSystemWideMetrics(export_to_report_to, categories));
+    }
+
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      String export_to_report_to = parseResult.getParamValue(CliStrings.SHOW_METRICS__FILE);
+      if (export_to_report_to != null && !export_to_report_to.endsWith(".csv")) {
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENSION, ".csv"));
+      }
+
+      String regionName = parseResult.getParamValue(CliStrings.SHOW_METRICS__REGION);
+      String port = parseResult.getParamValue(CliStrings.SHOW_METRICS__CACHESERVER__PORT);
+
+      if (port != null) {
+        try {
+          Integer.parseInt(port);
+        } catch (NumberFormatException nfe) {
+          return ResultBuilder.createUserErrorResult("Invalid port");
+        }
+      }
+
+      if (regionName != null && port != null) {
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.SHOW_METRICS__CANNOT__USE__REGION__WITH__CACHESERVERPORT);
+      }
+
+      String member = parseResult.getParamValue(CliStrings.MEMBER);
+      if (port != null && member == null) {
+        return ResultBuilder
+            .createUserErrorResult(CliStrings.SHOW_METRICS__CANNOT__USE__CACHESERVERPORT);
+      }
+
+      return ResultBuilder.createInfoResult("OK");
+    }
+  }
+
