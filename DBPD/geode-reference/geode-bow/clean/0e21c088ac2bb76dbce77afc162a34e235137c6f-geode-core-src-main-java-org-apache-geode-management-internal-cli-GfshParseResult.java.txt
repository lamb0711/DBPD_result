GEODE-1897: refactor GfshParseResult for easy access of converted optâ€¦ (#961)

* GEODE-1897: refactor GfshParseResult for easy access of converted option value

* fix test errors

-import java.util.Collections;
-  private Map<String, String> paramValueStringMap = new HashMap<>();
+  private Map<String, Object> paramValueMap = new HashMap<>();
+      // this maps are used for easy access of option values.
+      // It's used in tests and validation of option values in pre-execution
+      paramValueMap.put(cliOption.key()[0], argument);
+
-
-      // this maps are used for easy access of option values in String form.
-      // It's used in tests and validation of option values in pre-execution
-      paramValueStringMap.put(cliOption.key()[0], argumentAsString);
-  /**
-   * Used only in tests and command pre-execution for validating arguments
-   */
-  public String getParamValue(String param) {
-    return paramValueStringMap.get(param);
+  public Object getParamValue(String param) {
+    return paramValueMap.get(param);
-  /**
-   * Used only in tests and command pre-execution for validating arguments
-   * 
-   * @return the unmodifiable paramValueStringMap
-   */
-  public Map<String, String> getParamValueStrings() {
-    return Collections.unmodifiableMap(paramValueStringMap);
+
+  public String getParamValueAsString(String param) {
+    Object argument = paramValueMap.get(param);
+    if (argument == null) {
+      return null;
+    }
+
+    String argumentAsString;
+    if (argument instanceof Object[]) {
+      argumentAsString = StringUtils.join((Object[]) argument, ",");
+    } else {
+      argumentAsString = argument.toString();
+    }
+    return argumentAsString;
