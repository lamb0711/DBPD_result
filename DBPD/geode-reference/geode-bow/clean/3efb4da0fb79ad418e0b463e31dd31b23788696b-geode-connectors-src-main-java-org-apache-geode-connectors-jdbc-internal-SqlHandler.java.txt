GEODE-4991: do no use hard coded quotes (#1728)

java.sql.DatabaseMetaData.getIdentifierQuoteString is now used when quoting identifiers.
If this method returns null, an empty string, or a string with all spaces then no quoting will be done.

-import java.util.Collections;
-      String realTableName = tableMetaData.getTableName();
-      List<ColumnValue> columnList =
-          getColumnToValueList(tableMetaData, regionMapping, key, null, Operation.GET);
+      EntryColumnData entryColumnData =
+          getEntryColumnData(tableMetaData, regionMapping, key, null, Operation.GET);
-          getPreparedStatement(connection, columnList, realTableName, Operation.GET)) {
-        try (ResultSet resultSet = executeReadQuery(statement, columnList)) {
+          getPreparedStatement(connection, tableMetaData, entryColumnData, Operation.GET)) {
+        try (ResultSet resultSet = executeReadQuery(statement, entryColumnData)) {
-  private ResultSet executeReadQuery(PreparedStatement statement, List<ColumnValue> columnList)
+  private ResultSet executeReadQuery(PreparedStatement statement, EntryColumnData entryColumnData)
-    setValuesInStatement(statement, columnList);
+    setValuesInStatement(statement, entryColumnData);
-  private void setValuesInStatement(PreparedStatement statement, List<ColumnValue> columnList)
+  private void setValuesInStatement(PreparedStatement statement, EntryColumnData entryColumnData)
-    for (ColumnValue columnValue : columnList) {
+    for (ColumnData columnData : entryColumnData.getEntryValueColumnData()) {
-      Object value = columnValue.getValue();
-      if (value instanceof Character) {
-        Character character = ((Character) value);
-        // if null character, set to null string instead of a string with the null character
-        value = character == Character.valueOf((char) 0) ? null : character.toString();
-      } else if (value instanceof Date) {
-        Date jdkDate = (Date) value;
-        switch (columnValue.getDataType()) {
-          case Types.DATE:
-            value = new java.sql.Date(jdkDate.getTime());
-            break;
-          case Types.TIME:
-          case Types.TIME_WITH_TIMEZONE:
-            value = new java.sql.Time(jdkDate.getTime());
-            break;
-          case Types.TIMESTAMP:
-          case Types.TIMESTAMP_WITH_TIMEZONE:
-            value = new java.sql.Timestamp(jdkDate.getTime());
-            break;
-          default:
-            // no conversion needed
-            break;
-        }
+      setValueOnStatement(statement, index, columnData);
+    }
+
+    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
+    index++;
+    setValueOnStatement(statement, index, keyColumnData);
+  }
+
+  private void setValueOnStatement(PreparedStatement statement, int index, ColumnData columnData)
+      throws SQLException {
+    Object value = columnData.getValue();
+    if (value instanceof Character) {
+      Character character = ((Character) value);
+      // if null character, set to null string instead of a string with the null character
+      value = character == Character.valueOf((char) 0) ? null : character.toString();
+    } else if (value instanceof Date) {
+      Date jdkDate = (Date) value;
+      switch (columnData.getDataType()) {
+        case Types.DATE:
+          value = new java.sql.Date(jdkDate.getTime());
+          break;
+        case Types.TIME:
+        case Types.TIME_WITH_TIMEZONE:
+          value = new java.sql.Time(jdkDate.getTime());
+          break;
+        case Types.TIMESTAMP:
+        case Types.TIMESTAMP_WITH_TIMEZONE:
+          value = new java.sql.Timestamp(jdkDate.getTime());
+          break;
+        default:
+          // no conversion needed
+          break;
-      if (value == null) {
-        statement.setNull(index, columnValue.getDataType());
-      } else {
-        statement.setObject(index, value);
-      }
+    }
+    if (value == null) {
+      statement.setNull(index, columnData.getDataType());
+    } else {
+      statement.setObject(index, value);
-      String realTableName = tableMetaData.getTableName();
-      List<ColumnValue> columnList =
-          getColumnToValueList(tableMetaData, regionMapping, key, value, operation);
+      EntryColumnData entryColumnData =
+          getEntryColumnData(tableMetaData, regionMapping, key, value, operation);
-          getPreparedStatement(connection, columnList, realTableName, operation)) {
-        updateCount = executeWriteStatement(statement, columnList);
+          getPreparedStatement(connection, tableMetaData, entryColumnData, operation)) {
+        updateCount = executeWriteStatement(statement, entryColumnData);
-            getPreparedStatement(connection, columnList, realTableName, upsertOp)) {
-          updateCount = executeWriteStatement(upsertStatement, columnList);
+            getPreparedStatement(connection, tableMetaData, entryColumnData, upsertOp)) {
+          updateCount = executeWriteStatement(upsertStatement, entryColumnData);
-  private int executeWriteStatement(PreparedStatement statement, List<ColumnValue> columnList)
+  private int executeWriteStatement(PreparedStatement statement, EntryColumnData entryColumnData)
-    setValuesInStatement(statement, columnList);
+    setValuesInStatement(statement, entryColumnData);
-      List<ColumnValue> columnList, String tableName, Operation operation) throws SQLException {
-    String sqlStr = getSqlString(tableName, columnList, operation);
+      TableMetaDataView tableMetaData, EntryColumnData entryColumnData, Operation operation)
+      throws SQLException {
+    String sqlStr = getSqlString(tableMetaData, entryColumnData, operation);
-  private String getSqlString(String tableName, List<ColumnValue> columnList, Operation operation) {
-    SqlStatementFactory statementFactory = new SqlStatementFactory();
+  private String getSqlString(TableMetaDataView tableMetaData, EntryColumnData entryColumnData,
+      Operation operation) {
+    SqlStatementFactory statementFactory =
+        new SqlStatementFactory(tableMetaData.getIdentifierQuoteString());
+    String tableName = tableMetaData.getTableName();
-      return statementFactory.createInsertSqlString(tableName, columnList);
+      return statementFactory.createInsertSqlString(tableName, entryColumnData);
-      return statementFactory.createUpdateSqlString(tableName, columnList);
+      return statementFactory.createUpdateSqlString(tableName, entryColumnData);
-      return statementFactory.createDestroySqlString(tableName, columnList);
+      return statementFactory.createDestroySqlString(tableName, entryColumnData);
-      return statementFactory.createSelectQueryString(tableName, columnList);
+      return statementFactory.createSelectQueryString(tableName, entryColumnData);
-  <K> List<ColumnValue> getColumnToValueList(TableMetaDataView tableMetaData,
+  <K> EntryColumnData getEntryColumnData(TableMetaDataView tableMetaData,
-    ColumnValue keyColumnValue =
-        new ColumnValue(true, keyColumnName, key, tableMetaData.getColumnDataType(keyColumnName));
+    ColumnData keyColumnData =
+        new ColumnData(keyColumnName, key, tableMetaData.getColumnDataType(keyColumnName));
+    List<ColumnData> valueColumnData = null;
-    if (operation.isDestroy() || operation.isGet()) {
-      return Collections.singletonList(keyColumnValue);
+    if (operation.isCreate() || operation.isUpdate()) {
+      valueColumnData = createColumnDataList(tableMetaData, regionMapping, value);
-    List<ColumnValue> result = createColumnValueList(tableMetaData, regionMapping, value);
-    result.add(keyColumnValue);
-    return result;
+    return new EntryColumnData(keyColumnData, valueColumnData);
-  private List<ColumnValue> createColumnValueList(TableMetaDataView tableMetaData,
+  private List<ColumnData> createColumnDataList(TableMetaDataView tableMetaData,
-    final String keyColumnName = tableMetaData.getKeyColumnName();
-    List<ColumnValue> result = new ArrayList<>();
+    List<ColumnData> result = new ArrayList<>();
-      if (columnName.equalsIgnoreCase(keyColumnName)) {
+      if (tableMetaData.getKeyColumnName().equals(columnName)) {
-      ColumnValue columnValue = new ColumnValue(false, columnName, value.getField(fieldName),
+      ColumnData columnData = new ColumnData(columnName, value.getField(fieldName),
-      result.add(columnValue);
+      result.add(columnData);
