GEODE-8098: Refactor CommandFunction (#5082)

* CommandFunction code is now cleaner.
* Added SingleResultRedisFunction and a new ResultCollector class
to simplify and ensure that our function only has a single result.
* StripedExecutor has been simplified to only take a Callable

-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.redis.internal.RedisCommandType;
-@SuppressWarnings("unchecked")
-    ResultCollector<Object[], List<Long>> results = executeFunction(SADD, key, membersToAdd);
-    return results.getResult().get(0);
+    return CommandFunction.execute(SADD, key, membersToAdd, region);
+  @SuppressWarnings("unchecked")
-    ResultCollector<Object[], List<Long>> results = executeFunction(SREM, key, membersToRemove);
-    List<Long> resultList = results.getResult();
-    long membersRemoved = resultList.get(0);
-    long wasDeleted = resultList.get(1);
-    if (wasDeleted != 0) {
-      setWasDeleted.set(true);
-    }
+    Object[] resultList =
+        CommandFunction.execute(SREM, key, membersToRemove, region);
+
+    long membersRemoved = (long) resultList[0];
+    Boolean wasDeleted = (Boolean) resultList[1];
+    setWasDeleted.set(wasDeleted);
-    ResultCollector<Object[], List<Set<ByteArrayWrapper>>> results =
-        executeFunction(SMEMBERS, key, null);
-    return results.getResult().get(0);
+    return CommandFunction.execute(SMEMBERS, key, null, region);
-    ResultCollector<Object[], List<Boolean>> results =
-        executeFunction(DEL, key, RedisDataType.REDIS_SET);
-    return results.getResult().get(0);
+    return CommandFunction.execute(DEL, key, RedisDataType.REDIS_SET, region);
-    ResultCollector<Object[], List<Integer>> results = executeFunction(SCARD, key, null);
-    return results.getResult().get(0);
+    return CommandFunction.execute(SCARD, key, null, region);
-    ResultCollector<Object[], List<Boolean>> results = executeFunction(SISMEMBER, key, member);
-    return results.getResult().get(0);
+    return CommandFunction.execute(SISMEMBER, key, member, region);
-    ResultCollector<Object[], List<Collection<ByteArrayWrapper>>> results =
-        executeFunction(SRANDMEMBER, key, count);
-    return results.getResult().get(0);
+    return CommandFunction.execute(SRANDMEMBER, key, count, region);
-    ResultCollector<Object[], List<Collection<ByteArrayWrapper>>> results =
-        executeFunction(SPOP, key, popCount);
-    return results.getResult().get(0);
+    return CommandFunction.execute(SPOP, key, popCount, region);
-    ResultCollector<Object[], List<List<Object>>> results =
-        executeFunction(SSCAN, key, new Object[] {matchPattern, count, cursor});
-    return results.getResult().get(0);
-  }
-
-  private ResultCollector executeFunction(RedisCommandType command,
-      ByteArrayWrapper key,
-      Object commandArguments) {
-    return CommandFunction.execute(region, command, key, commandArguments);
+    return CommandFunction.execute(SSCAN, key, new Object[] {matchPattern, count, cursor}, region);
