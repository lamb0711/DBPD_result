GEODE-7237: Fix race condition in GfshRule (#4153)

GfshRule.execute() now blocks while the ProcessLogger is still
collecting output from the GFSH process. This fixes a race condition
that causes ConnectCommandAcceptanceTest.invalidHostname() to fail
intermittently.

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
-import static org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR;
+import static java.io.File.pathSeparator;
-import java.util.stream.Collectors;
-    // this would not include the "stopMemberQuietly" executions
-    gfshExecutions.stream().collect(Collectors.toList()).forEach(this::stopMembers);
+    // Copy the gfshExecutions list because stopMembers will add more executions
+    // This would not include the "stopMemberQuietly" executions
+    ArrayList<GfshExecution> executionsWithMembersToStop = new ArrayList<>(gfshExecutions);
+    executionsWithMembersToStop.forEach(this::stopMembers);
-    // this will include the "stopMemberQuietly" executions
+    // This will include the "stopMemberQuietly" executions
-      gfshExecutions.stream().forEach(gfshExecution -> gfshExecution.killProcess());
+      gfshExecutions.forEach(GfshExecution::killProcess);
-    GfshExecution gfshExecution;
-      Process process =
-          toProcessBuilder(gfshScript, gfsh, workingDir, gfshScript.getDebugPort()).start();
-      gfshExecution = new GfshExecution(process, workingDir);
+
+      int debugPort = gfshScript.getDebugPort();
+      Process process = toProcessBuilder(gfshScript, gfsh, workingDir, debugPort).start();
+
+      GfshExecution gfshExecution = new GfshExecution(process, workingDir);
+      return gfshExecution;
-
-    return gfshExecution;
-  protected ProcessBuilder toProcessBuilder(GfshScript gfshScript, Path gfshPath, File workingDir,
+  private ProcessBuilder toProcessBuilder(GfshScript gfshScript, Path gfshPath, File workingDir,
-      String specified = String.join(PATH_SEPARATOR, extendedClasspath);
+      String specified = String.join(pathSeparator, extendedClasspath);
-          String.format("%s%s", existingJavaArgs == null ? "" : existingJavaArgs + PATH_SEPARATOR,
+          String.format("%s%s", existingJavaArgs == null ? "" : existingJavaArgs + pathSeparator,
