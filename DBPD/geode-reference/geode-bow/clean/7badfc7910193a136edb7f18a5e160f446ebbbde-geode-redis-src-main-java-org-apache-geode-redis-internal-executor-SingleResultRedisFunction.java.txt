GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

-import org.apache.geode.internal.cache.LocalDataSet;
-import org.apache.geode.redis.internal.RedisCommandType;
-import org.apache.geode.redis.internal.data.RedisSet;
+import org.apache.geode.redis.internal.data.RedisData;
-@SuppressWarnings("unchecked")
-  protected abstract Object compute(Region<ByteArrayWrapper, RedisSet> localRegion,
-      ByteArrayWrapper key, RedisCommandType command,
-      Object[] args);
+  private final transient PartitionedRegion partitionedRegion;
+
+  public SingleResultRedisFunction(Region<ByteArrayWrapper, RedisData> dataRegion) {
+    this.partitionedRegion = (PartitionedRegion) dataRegion;
+  }
+
+  protected abstract Object compute(ByteArrayWrapper key, Object[] args);
-    Region<ByteArrayWrapper, RedisSet> localRegion =
-        regionFunctionContext.getLocalDataSet(regionFunctionContext.getDataSet());
-
-    RedisCommandType command = (RedisCommandType) args[0];
-      Object result = compute(localRegion, key, command, args);
+      Object result = compute(key, args);
-    computeWithPrimaryLocked(key, (LocalDataSet) localRegion, computation);
+    partitionedRegion.computeWithPrimaryLocked(key, computation);
-
-  public static void computeWithPrimaryLocked(Object key, LocalDataSet localDataSet, Runnable r) {
-    PartitionedRegion partitionedRegion = localDataSet.getProxy();
-
-    partitionedRegion.computeWithPrimaryLocked(key, r);
-  }
-
