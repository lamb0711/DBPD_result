GEODE-8268: clean up ExecutionHandlerContext (#5237)

Cleaned up ExecutionHandlerContext dependencies.
The ShutdownExecutor now implements the shutdown command
instead of it being embedded in the ExecutionHandlerContext.

The SubscribeExecutor now takes care of changing the EventGroup of its channel.
-import static org.apache.geode.redis.internal.RedisCommandType.SUBSCRIBE;
-import java.util.concurrent.CountDownLatch;
-import org.apache.geode.cache.Cache;
-  private final Cache cache;
+  private final Client client;
-  private final EventLoopGroup subscriberEventLoopGroup;
-  private final RegionProvider regionProvider;
-  private final PubSub pubSub;
-
-  public PubSub getPubSub() {
-    return pubSub;
-  }
-
-   * @param cache The Geode cache instance of this vm
-   * @param regionProvider The region provider of this context
-  public ExecutionHandlerContext(Channel channel, Cache cache, RegionProvider regionProvider,
-      GeodeRedisServer server, byte[] password,
-      PubSub pubSub,
-      EventLoopGroup subscriberEventLoopGroup) {
-    this.pubSub = pubSub;
-    if (channel == null || cache == null || regionProvider == null || server == null) {
-      throw new IllegalArgumentException("Only the authentication password may be null");
-    }
-    this.cache = cache;
+  public ExecutionHandlerContext(Channel channel, GeodeRedisServer server, byte[] password) {
-    this.subscriberEventLoopGroup = subscriberEventLoopGroup;
+    this.client = new Client(channel);
-    this.regionProvider = regionProvider;
-    this.isAuthenticated = password != null ? false : true;
-
+    this.isAuthenticated = password == null;
-    if (!isAuthenticated) {
+    if (!isAuthenticated()) {
-    if (command.isOfType(RedisCommandType.SHUTDOWN)) {
-      this.server.shutdown();
-      return;
-    }
-
-    moveSubscribeToNewEventLoopGroup(ctx, command);
+  public EventLoopGroup getSubscriberGroup() {
+    return server.getSubscriberGroup();
+  }
-  /**
-   * SUBSCRIBE commands run in their own {@link EventLoopGroup}
-   */
-  private void moveSubscribeToNewEventLoopGroup(ChannelHandlerContext ctx, Command command)
-      throws InterruptedException {
-    if (command.isOfType(SUBSCRIBE)) {
-      CountDownLatch latch = new CountDownLatch(0);
-      ctx.channel().deregister().addListener((ChannelFutureListener) future -> {
-        subscriberEventLoopGroup.register(ctx.channel()).sync();
-        latch.countDown();
-      });
-      latch.await();
+  public void changeChannelEventLoopGroup(EventLoopGroup newGroup) {
+    if (newGroup.equals(channel.eventLoop())) {
+      // already registered with newGroup
+      return;
+    channel.deregister().addListener((ChannelFutureListener) future -> {
+      newGroup.register(channel).sync();
+    });
-    return this.regionProvider;
+    return server.getRegionProvider();
-    return new Client(channel);
+    return client;
+  public GeodeRedisServer getServer() {
+    return server;
+  }
+
+  public PubSub getPubSub() {
+    return server.getPubSub();
+  }
+
+
