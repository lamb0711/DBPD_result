GEODE-6850: change int stats to long (#3713)

The "Int" methods on the statistics interfaces have been deprecated in favor of the corresponding "Long" methods.
The implementation of these deprecated "Int" methods now use the "Long" methods.
The only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a "Number" instance.
These methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for "Int" stats, these methods used to return an "Integer" instance and now return a "Long" instance. If code used to cast to an "Integer" it will now be broken.
Many places in the product now use these deprecated "Int" methods and as of this checkin all those places are now creating a "Long" statistic.
-import java.io.IOException;
-  private final HashMap statsMap;
-
-  /** Contains the number of 32-bit statistics in this type. */
-  private final int intStatCount;
+  private final HashMap<String, StatisticDescriptor> statsMap;
-  public static StatisticsType[] fromXml(Reader reader, StatisticsTypeFactory factory)
-      throws IOException {
+  public static StatisticsType[] fromXml(Reader reader, StatisticsTypeFactory factory) {
-    this(name, description, stats, false);
-  }
-
-  /**
-   * Creates a new <code>StatisticsType</code> with the given name, description, and statistics.
-   *
-   * @param name The name of this statistics type (for example, <code>"DatabaseStatistics"</code>)
-   * @param description A description of this statistics type (for example, "Information about the
-   *        application's use of the database").
-   * @param stats Descriptions of the individual statistics grouped together in this statistics
-   *        type.
-   * @param wrapsSharedClass True if this type is a wrapper around a SharedClass??. False if its a
-   *        dynamic type created at run time.
-   *
-   * @throws NullPointerException If either <code>name</code> or <code>stats</code> is
-   *         <code>null</code>.
-   */
-  public StatisticsTypeImpl(String name, String description, StatisticDescriptor[] stats,
-      boolean wrapsSharedClass) {
-    this.statsMap = new HashMap(stats.length * 2);
-    int intCount = 0;
-    int longCount = 0;
-    int doubleCount = 0;
-    for (int i = 0; i < stats.length; i++) {
-      StatisticDescriptorImpl sd = (StatisticDescriptorImpl) stats[i];
-      if (sd.getTypeCode() == StatisticDescriptorImpl.INT) {
-        if (!wrapsSharedClass) {
-          sd.setId(intCount);
-        }
-        intCount++;
-      } else if (sd.getTypeCode() == StatisticDescriptorImpl.LONG) {
-        if (!wrapsSharedClass) {
-          sd.setId(longCount);
-        }
-        longCount++;
-      } else if (sd.getTypeCode() == StatisticDescriptorImpl.DOUBLE) {
-        if (!wrapsSharedClass) {
-          sd.setId(doubleCount);
-        }
-        doubleCount++;
-      }
-      Object previousValue = statsMap.put(stats[i].getName(), sd);
-      if (previousValue != null) {
-        throw new IllegalArgumentException(
-            String.format("Duplicate StatisticDescriptor named %s",
-                stats[i].getName()));
+    this.statsMap = new HashMap<>(stats.length * 2);
+
+    longStatCount = addTypedDescriptorToMap(StatisticDescriptorImpl.LONG, 0);
+    doubleStatCount = addTypedDescriptorToMap(StatisticDescriptorImpl.DOUBLE, longStatCount);
+  }
+
+  private int addTypedDescriptorToMap(byte typeCode, int startOfSequentialIds) {
+    int count = 0;
+    for (StatisticDescriptor stat : stats) {
+      StatisticDescriptorImpl sd = (StatisticDescriptorImpl) stat;
+      if (sd.getTypeCode() == typeCode) {
+        sd.setId(startOfSequentialIds + count);
+        count++;
+        addDescriptorToMap(sd);
-    this.intStatCount = intCount;
-    this.longStatCount = longCount;
-    this.doubleStatCount = doubleCount;
+    return count;
+  }
+
+  private void addDescriptorToMap(StatisticDescriptor sd) {
+    Object previousValue = statsMap.put(sd.getName(), sd);
+    if (previousValue != null) {
+      throw new IllegalArgumentException(
+          String.format("Duplicate StatisticDescriptor named %s",
+              sd.getName()));
+    }
-    StatisticDescriptorImpl stat = (StatisticDescriptorImpl) statsMap.get(name);
+    StatisticDescriptor stat = statsMap.get(name);
-   * Gets the number of statistics in this type that are ints.
-   */
-  public int getIntStatCount() {
-    return this.intStatCount;
-  }
-
-  /**
+
+  public boolean isValidLongId(int id) {
+    return id < longStatCount;
+  }
+
+  public boolean isValidDoubleId(int id) {
+    return longStatCount <= id && id < longStatCount + doubleStatCount;
+  }
