Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
+ * 
-   * Does a region registerInterest on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a region registerInterest on a server using connections from the given pool to communicate
+   * with the server.
+   * 
-  public static List execute(ExecutablePool pool,
-                             String region,
-                             Object key,
-                             int interestType,
-                             InterestResultPolicy policy,
-                             boolean isDurable,
-                             boolean receiveUpdatesAsInvalidates,
-                             byte regionDataPolicy)
-  {
-    AbstractOp op = new RegisterInterestOpImpl(region, key,
-        interestType, policy, isDurable, receiveUpdatesAsInvalidates, regionDataPolicy);
-    return  (List) pool.executeOnQueuesAndReturnPrimaryResult(op);
+  public static List execute(ExecutablePool pool, String region, Object key, int interestType,
+      InterestResultPolicy policy, boolean isDurable, boolean receiveUpdatesAsInvalidates,
+      byte regionDataPolicy) {
+    AbstractOp op = new RegisterInterestOpImpl(region, key, interestType, policy, isDurable,
+        receiveUpdatesAsInvalidates, regionDataPolicy);
+    return (List) pool.executeOnQueuesAndReturnPrimaryResult(op);
-                                                               
+
-   * Does a region registerInterest on a server using connections from the given pool
-   * to communicate with the given server location.
+   * Does a region registerInterest on a server using connections from the given pool to communicate
+   * with the given server location.
+   * 
-  public static List executeOn(ServerLocation sl,
-                               ExecutablePool pool,
-                               String region,
-                               Object key,
-                               int interestType,
-                               InterestResultPolicy policy,
-                               boolean isDurable,
-                               boolean receiveUpdatesAsInvalidates,
-                               byte regionDataPolicy)
-  {
-    AbstractOp op = new RegisterInterestOpImpl(region, key,
-        interestType, policy, isDurable, receiveUpdatesAsInvalidates, regionDataPolicy);
-    return  (List) pool.executeOn(sl, op);
+  public static List executeOn(ServerLocation sl, ExecutablePool pool, String region, Object key,
+      int interestType, InterestResultPolicy policy, boolean isDurable,
+      boolean receiveUpdatesAsInvalidates, byte regionDataPolicy) {
+    AbstractOp op = new RegisterInterestOpImpl(region, key, interestType, policy, isDurable,
+        receiveUpdatesAsInvalidates, regionDataPolicy);
+    return (List) pool.executeOn(sl, op);
-  
+
-   * Does a region registerInterest on a server using connections from the given pool
-   * to communicate with the given server location.
+   * Does a region registerInterest on a server using connections from the given pool to communicate
+   * with the given server location.
+   * 
-  public static List executeOn(Connection conn,
-                               ExecutablePool pool,
-                               String region,
-                               Object key,
-                               int interestType,
-                               InterestResultPolicy policy,
-                               boolean isDurable,
-                               boolean receiveUpdatesAsInvalidates,
-                               byte regionDataPolicy)
-  {
-    AbstractOp op = new RegisterInterestOpImpl(region, key,
-        interestType, policy, isDurable, receiveUpdatesAsInvalidates, regionDataPolicy);
-    return  (List) pool.executeOn(conn, op);
+  public static List executeOn(Connection conn, ExecutablePool pool, String region, Object key,
+      int interestType, InterestResultPolicy policy, boolean isDurable,
+      boolean receiveUpdatesAsInvalidates, byte regionDataPolicy) {
+    AbstractOp op = new RegisterInterestOpImpl(region, key, interestType, policy, isDurable,
+        receiveUpdatesAsInvalidates, regionDataPolicy);
+    return (List) pool.executeOn(conn, op);
-  
+
+
-    public RegisterInterestOpImpl(String region,
-                                  Object key,
-                                  int interestType,
-                                  InterestResultPolicy policy,
-                                  boolean isDurable,
-                                  boolean receiveUpdatesAsInvalidates,
-                                  byte regionDataPolicy) {
+    public RegisterInterestOpImpl(String region, Object key, int interestType,
+        InterestResultPolicy policy, boolean isDurable, boolean receiveUpdatesAsInvalidates,
+        byte regionDataPolicy) {
-        byte durableByte = (byte)(isDurable ? 0x01 : 0x00);
+        byte durableByte = (byte) (isDurable ? 0x01 : 0x00);
-      byte notifyByte = (byte)(receiveUpdatesAsInvalidates ? 0x01 : 0x00);
+      byte notifyByte = (byte) (receiveUpdatesAsInvalidates ? 0x01 : 0x00);
-      // Java clients always expect serializeValues to be true in VersionObjectList unlike Native clients.
+      // Java clients always expect serializeValues to be true in VersionObjectList unlike Native
+      // clients.
-      getMessage().addBytesPart(new byte[] {regionDataPolicy, (byte)0x01});
+      getMessage().addBytesPart(new byte[] {regionDataPolicy, (byte) 0x01});
+
+     * 
-    @Override  
+    @Override
-    
+
-    @Override  
+    @Override
-      ChunkedMessage msg = (ChunkedMessage)m;
+      ChunkedMessage msg = (ChunkedMessage) m;
-      case MessageType.RESPONSE_FROM_PRIMARY: {
-        ArrayList serverKeys = new ArrayList();
-        VersionedObjectList serverEntries = null;
-        LocalRegion r = null;
-        
-        try {
-          r = (LocalRegion)GemFireCacheImpl.getInstance().getRegion(this.region);
-        }catch(Exception ex) {
-		//ignore but read message
-	//	GemFireCacheImpl.getInstance().getLogger().config("hitesh error " + ex.getClass());
-        }
-        
-        ArrayList list = new ArrayList();
-        ArrayList listOfList = new ArrayList();
-        listOfList.add(list);
+        case MessageType.RESPONSE_FROM_PRIMARY: {
+          ArrayList serverKeys = new ArrayList();
+          VersionedObjectList serverEntries = null;
+          LocalRegion r = null;
-        // Process the chunks
-        do {
+          try {
+            r = (LocalRegion) GemFireCacheImpl.getInstance().getRegion(this.region);
+          } catch (Exception ex) {
+            // ignore but read message
+            // GemFireCacheImpl.getInstance().getLogger().config("hitesh error " + ex.getClass());
+          }
+
+          ArrayList list = new ArrayList();
+          ArrayList listOfList = new ArrayList();
+          listOfList.add(list);
+
+          // Process the chunks
+          do {
+            // Read the chunk
+            msg.receiveChunk();
+
+            // Deserialize the result
+            Part part = msg.getPart(0);
+
+            Object partObj = part.getObject();
+            if (partObj instanceof Throwable) {
+              String s = "While performing a remote " + getOpName();
+              throw new ServerOperationException(s, (Throwable) partObj);
+              // Get the exception toString part.
+              // This was added for c++ thin client and not used in java
+              // Part exceptionToStringPart = msg.getPart(1);
+            } else {
+              if (partObj instanceof VersionedObjectList) {
+                if (serverEntries == null) {
+                  serverEntries = new VersionedObjectList(true);
+                }
+                ((VersionedObjectList) partObj).replaceNullIDs(con.getEndpoint().getMemberId());
+                // serverEntries.addAll((VersionedObjectList)partObj);
+                list.clear();
+                list.add(partObj);
+
+                if (r != null) {
+                  try {
+                    r.refreshEntriesFromServerKeys(con, listOfList,
+                        InterestResultPolicy.KEYS_VALUES);
+                  } catch (Exception ex) {
+                    // GemFireCacheImpl.getInstance().getLogger().config("hitesh error2 " +
+                    // ex.getClass());
+                  }
+                }
+              } else {
+                // Add the result to the list of results
+                serverKeys.add((List) partObj);
+              }
+            }
+
+          } while (!msg.isLastChunk());
+          if (serverEntries != null) {
+            list.clear();
+            list.add(serverEntries); // serverEntries will always be empty.
+            return listOfList;
+          }
+          return serverKeys;
+        }
+        case MessageType.RESPONSE_FROM_SECONDARY:
+          // Read the chunk
+          msg.receiveChunk();
+          return null;
+        case MessageType.EXCEPTION:
+          // Read the chunk
+          msg.receiveChunk();
+          // Deserialize the result
+          Part part = msg.getPart(0);
+          // Get the exception toString part.
+          // This was added for c++ thin client and not used in java
+          // Part exceptionToStringPart = msg.getPart(1);
+          Object obj = part.getObject(); {
+          String s = this + ": While performing a remote " + getOpName();
+          throw new ServerOperationException(s, (Throwable) obj);
+        }
+        case MessageType.REGISTER_INTEREST_DATA_ERROR:
-          Part part = msg.getPart(0);
-
-          Object partObj = part.getObject();
-          if (partObj instanceof Throwable) {
-            String s = "While performing a remote " + getOpName();
-            throw new ServerOperationException(s, (Throwable)partObj);
-            // Get the exception toString part.
-            // This was added for c++ thin client and not used in java
-            //Part exceptionToStringPart = msg.getPart(1);
-          }
-          else {
-            if (partObj instanceof VersionedObjectList) {
-              if (serverEntries == null) {
-                serverEntries = new VersionedObjectList(true);
-              }
-              ((VersionedObjectList)partObj).replaceNullIDs(con.getEndpoint().getMemberId());
-              // serverEntries.addAll((VersionedObjectList)partObj);
-              list.clear();
-              list.add(partObj);
-
-	      if(r != null) {
-		try {      
-                  r.refreshEntriesFromServerKeys(con, listOfList, InterestResultPolicy.KEYS_VALUES);
-		}catch(Exception ex) {
-	//	  GemFireCacheImpl.getInstance().getLogger().config("hitesh error2 " + ex.getClass());
-		}
-	      }
-            } else {
-              // Add the result to the list of results
-              serverKeys.add((List)partObj);
-            }
-          }
-
-        } while (!msg.isLastChunk());
-        if (serverEntries != null) {
-          list.clear();
-          list.add(serverEntries); // serverEntries will always be empty.
-          return listOfList;
-        }
-        return serverKeys;
-      }
-      case MessageType.RESPONSE_FROM_SECONDARY:
-        // Read the chunk
-        msg.receiveChunk();
-        return null;
-      case MessageType.EXCEPTION:
-        // Read the chunk
-        msg.receiveChunk();
-        // Deserialize the result
-        Part part = msg.getPart(0);
-        // Get the exception toString part.
-        // This was added for c++ thin client and not used in java
-        //Part exceptionToStringPart = msg.getPart(1);
-        Object obj = part.getObject();
-        {
-          String s = this + ": While performing a remote " + getOpName();
-          throw new ServerOperationException(s, (Throwable) obj);
-        }
-      case MessageType.REGISTER_INTEREST_DATA_ERROR:
-        // Read the chunk
-        msg.receiveChunk();
-
-        // Deserialize the result
-        String errorMessage = msg.getPart(0).getString();
-        String s = this + ": While performing a remote " + getOpName() + ": ";
-        throw new ServerOperationException(s + errorMessage);
-      default:
-        throw new InternalGemFireError("Unknown message type "
-                                       + msg.getMessageType());
+          String errorMessage = msg.getPart(0).getString();
+          String s = this + ": While performing a remote " + getOpName() + ": ";
+          throw new ServerOperationException(s + errorMessage);
+        default:
+          throw new InternalGemFireError("Unknown message type " + msg.getMessageType());
+
-    @Override  
+
+    @Override
-    @Override  
+
+    @Override
-    @Override  
+
+    @Override
-    @Override  
+
+    @Override
