Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  
+  /** Are distributed transactions enabled or not */
+  private boolean distributedTransactions = DEFAULT_DISTRIBUTED_TRANSACTIONS;
+
+  
+  /**
+   * port on which {@link GemFireRedisServer} is started
+   */
+  private int redisPort = DEFAULT_REDIS_PORT;
+  
+  /**
+   * Bind address for GemFireRedisServer
+   */
+  private String redisBindAddress = DEFAULT_REDIS_BIND_ADDRESS;
+  
+  private String redisPassword = DEFAULT_REDIS_PASSWORD;
+  /** "off-heap-memory-size" with value of "" or "<size>[g|m]" */
+  protected String offHeapMemorySize = DEFAULT_OFF_HEAP_MEMORY_SIZE;
+  
+  /** Whether pages should be locked into memory or allowed to swap to disk */
+  private boolean lockMemory = DEFAULT_LOCK_MEMORY;
+  
+    this.redisPort = other.getRedisPort();
+    this.redisBindAddress = other.getRedisBindAddress();
+    this.redisPassword = other.getRedisPassword();
+
+    // following added for 9.0
+    this.offHeapMemorySize = other.getOffHeapMemorySize();
+    
+    this.lockMemory = other.getLockMemory();
+    this.distributedTransactions = other.getDistributedTransactions();
-    ConfigSource cs = getAttSourceMap().get(MCAST_PORT_NAME);
-    if (cs == null) {
-      String locators = getLocators();
-      if (locators != null && !locators.isEmpty()) {
-        this.mcastPort = 0; // fixes 46308
-      }
-    }
+    // a no-op since multicast discovery has been removed
+    // and the default mcast port is now zero
+//    ConfigSource cs = getAttSourceMap().get(MCAST_PORT_NAME);
+//    if (cs == null) {
+//      String locators = getLocators();
+//      if (locators != null && !locators.isEmpty()) {
+//        this.mcastPort = 0; // fixes 46308
+//      }
+//    }
+  @Override
+  public boolean getLockMemory() {
+    return this.lockMemory;
+  }
+
+  @Override
+  public void setLockMemory(final boolean value) {
+    this.lockMemory = value;
+  }
+
+  
+  @Override
+  public int getRedisPort() {
+    return this.redisPort;
+  }
+  
+  @Override
+  public void setRedisPort(int value) {
+    checkRedisPort(value);
+    this.redisPort = value;
+  }
+
+  @Override
+  public String getRedisBindAddress() {
+    return this.redisBindAddress;
+  }
+  
+  @Override
+  public void setRedisBindAddress(String bindAddress) {
+    checkRedisBindAddress(bindAddress);
+    this.redisBindAddress = bindAddress;
+  }
+  
+  @Override
+  public String getRedisPassword() {
+    return this.redisPassword;
+  }
+  
+  @Override
+  public void setRedisPassword(String password) {
+    this.redisPassword = password;
+  }
+  
+  @Override
+  public String getOffHeapMemorySize() {
+    return this.offHeapMemorySize;
+  }
+  
+  @Override 
+  public void setOffHeapMemorySize(String value) {
+    checkOffHeapMemorySize(value);
+    this.offHeapMemorySize = value;
+  }
+  
+  protected void checkOffHeapMemorySize(String value) {
+    super.checkOffHeapMemorySize(value);
+  }
+  
+  public boolean getDistributedTransactions() {
+    return this.distributedTransactions;
+  }
+
+  public void setDistributedTransactions(boolean value) {
+    this.distributedTransactions = value;
+  }
+
