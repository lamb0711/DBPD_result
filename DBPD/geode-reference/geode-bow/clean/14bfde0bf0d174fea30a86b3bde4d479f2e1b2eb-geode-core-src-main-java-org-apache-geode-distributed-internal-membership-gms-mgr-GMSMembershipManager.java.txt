Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.internal.logging.LoggingThread;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.GroupMembershipService_THE_MEMBER_WITH_ID_0_IS_NO_LONGER_IN_MY_OWN_VIEW_1,
-            new Object[] {address, newView}));
+        logger.info("The Member with id {}, is no longer in my own view, {}",
+            address, newView);
-        logger.info(LocalizedMessage
-            .create(LocalizedStrings.GroupMembershipService_MEMBERSHIP_PROCESSING_ADDITION__0_, m));
+        logger.info("Membership: Processing addition <{}>", m);
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.GroupMembershipService_MEMBERSHIP_FAULT_WHILE_PROCESSING_VIEW_ADDITION_OF__0,
-              m), t);
+          logger.info(String.format("Membership: Fault while processing view addition of %s",
+              m),
+              t);
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.GroupMembershipService_MEMBERSHIP_FAULT_WHILE_PROCESSING_VIEW_REMOVAL_OF__0,
-              m), t);
+          logger.info(String.format("Membership: Fault while processing view removal of %s",
+              m),
+              t);
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.GroupMembershipService_MEMBERSHIP_EXPIRING_MEMBERSHIP_OF_SURPRISE_MEMBER_0,
-              m));
+          logger.info("Membership: expiring membership of surprise member <{}>",
+              m);
-        logger.info(LogMarker.DISTRIBUTION_MARKER, LocalizedMessage
-            .create(LocalizedStrings.GroupMembershipService_JOINED_TOOK__0__MS, delta));
+        logger.info(LogMarker.DISTRIBUTION_MARKER, "Joined the distributed system (took  {}  ms)",
+            delta);
-            LocalizedStrings.GroupMembershipService_AN_EXCEPTION_WAS_THROWN_WHILE_JOINING
-                .toLocalizedString(),
+            "An Exception was thrown while attempting to join the distributed system.",
-    logger.info(LocalizedMessage.create(
-        LocalizedStrings.GroupMembershipService_entered_into_membership_in_group_0_with_id_1,
-        new Object[] {"" + (System.currentTimeMillis() - startTime)}));
+    logger.info("Finished joining (took {}ms).",
+        "" + (System.currentTimeMillis() - startTime));
-      logger.fatal(LocalizedMessage.create(
-          LocalizedStrings.GroupMembershipService_POSSIBLE_LOSS_OF_QUORUM_DETECTED,
-          new Object[] {failures.size(), failures}));
+      logger.fatal("Possible loss of quorum due to the loss of {} cache processes: {}",
+          failures.size(), failures);
-        new Thread(Thread.currentThread().getThreadGroup(),
-            "Removing shunned GemFire node " + member) {
-          @Override
-          public void run() {
-            // fix for bug #42548
-            // this is an old member that shouldn't be added
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.GroupMembershipService_Invalid_Surprise_Member,
-                new Object[] {member, latestView}));
-            try {
-              requestMemberRemoval(member,
-                  "this member is no longer in the view but is initiating connections");
-            } catch (CancelException e) {
-              // okay to ignore
-            }
+        new LoggingThread("Removing shunned GemFire node " + member, false, () -> {
+          // fix for bug #42548
+          // this is an old member that shouldn't be added
+          logger.warn("attempt to add old member: {} as surprise member to {}",
+              member, latestView);
+          try {
+            requestMemberRemoval(member,
+                "this member is no longer in the view but is initiating connections");
+          } catch (CancelException e) {
+            // okay to ignore
-        }.start();
+        }).start();
-      // Adding him to this set ensures we won't remove him if a new
-      // view comes in and he's still not visible.
+      // Adding the member to this set ensures we won't remove it if a new
+      // view comes in and it is still not visible.
-            LocalizedStrings.GroupMembershipService_THIS_DISTRIBUTED_SYSTEM_IS_SHUTTING_DOWN
-                .toLocalizedString();
+            "This distributed system is shutting down.";
-        // should ensure he's not chosen as an elder.
-        // This will get corrected when he finally shows up in the
+        // should ensure it is not chosen as an elder.
+        // This will get corrected when the member finally shows up in the
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.GroupMembershipService_MEMBERSHIP_IGNORING_SURPRISE_CONNECT_FROM_SHUNNED_MEMBER_0,
-          member));
+      logger.warn("Membership: Ignoring surprise connect from shunned member <{}>",
+          member);
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.GroupMembershipService_MEMBERSHIP_EXPIRING_MEMBERSHIP_OF_SURPRISE_MEMBER_0,
-              m));
+          logger.info("Membership: expiring membership of surprise member <{}>",
+              m);
-    logger.warn(LocalizedMessage.create(
-        LocalizedStrings.GroupMembershipService_MEMBERSHIP_DISREGARDING_SHUNNED_MEMBER_0, m));
+    logger.warn("Membership: disregarding shunned member <{}>", m);
-          LocalizedStrings.GroupMembershipService_UNKNOWN_STARTUP_EVENT_0.toLocalizedString(o));
+          String.format("unknown startup event: %s", o));
-          logger.warn(
-              LocalizedMessage.create(
-                  LocalizedStrings.GroupMembershipService_MEMBERSHIP_ERROR_HANDLING_STARTUP_EVENT),
+          logger.warn("Membership: Error handling startup event",
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GroupMembershipService_EXCEPTION_CAUGHT_WHILE_SHUTTING_DOWN), re);
+        logger.warn("Exception caught while shutting down", re);
-          logger.info(LocalizedMessage
-              .create(LocalizedStrings.GroupMembershipService_PROBLEM_GENERATING_CACHE_XML), e);
+          logger.info("Unable to generate XML description for reconnect of cache due to exception",
+              e);
-    logger.warn(LocalizedMessage.create(
-        LocalizedStrings.GroupMembershipService_MEMBERSHIP_REQUESTING_REMOVAL_OF_0_REASON_1,
-        new Object[] {mbr, reason}));
+    logger.warn("Membership: requesting removal of {}. Reason={}",
+        new Object[] {mbr, reason});
-        logger.fatal(LocalizedMessage.create(
-            LocalizedStrings.GroupMembershipService_FAILED_TO_SEND_MESSAGE_0_TO_MEMBER_1_VIEW_2,
-            new Object[] {content, member, view}), th);
+        logger.fatal(String.format("Failed to send message <%s> to member <%s> view, %s",
+            new Object[] {content, member, view}),
+            th);
-      // if (crashed) {
-      // dc.closeEndpoint(member, reason);
-      // }
-      // else
-      { // fix for bug 34010
-        Thread t = new Thread() {
-          @Override
-          public void run() {
-            try {
-              Thread.sleep(Integer.getInteger("p2p.disconnectDelay", 3000).intValue());
-            } catch (InterruptedException ie) {
-              Thread.currentThread().interrupt();
-              // Keep going, try to close the endpoint.
-            }
-            if (!dc.isOpen()) {
-              return;
-            }
-            if (logger.isDebugEnabled())
-              logger.debug("Membership: closing connections for departed member {}", member);
-            // close connections, but don't do membership notification since it's already been done
-            dc.closeEndpoint(member, reason, false);
-          }
-        };
-        t.setDaemon(true);
-        t.setName("disconnect thread for " + member);
-        t.start();
-      } // fix for bug 34010
+      // fix for bug 34010
+      new LoggingThread("disconnect thread for " + member, () -> {
+        try {
+          Thread.sleep(Integer.getInteger("p2p.disconnectDelay", 3000).intValue());
+        } catch (InterruptedException ie) {
+          Thread.currentThread().interrupt();
+          // Keep going, try to close the endpoint.
+        }
+        if (!dc.isOpen()) {
+          return;
+        }
+        if (logger.isDebugEnabled())
+          logger.debug("Membership: closing connections for departed member {}", member);
+        // close connections, but don't do membership notification since it's already been done
+        dc.closeEndpoint(member, reason, false);
+      }).start();
-      if (shunTime + SHUNNED_SUNSET * 1000 > now) {
+      if (shunTime + SHUNNED_SUNSET * 1000L > now) {
-    long deathTime = System.currentTimeMillis() - SHUNNED_SUNSET * 1000;
+    long deathTime = System.currentTimeMillis() - SHUNNED_SUNSET * 1000L;
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.GroupMembershipService_THE_MEMBERSHIP_CHECK_WAS_TERMINATED_WITH_AN_EXCEPTION));
+        logger.warn("The membership check was terminated with an exception.");
+          this.membershipTestHooks = l;
-          LocalizedMessage
-              .create(LocalizedStrings.GroupMembershipService_MEMBERSHIP_SERVICE_FAILURE_0, reason),
+          String.format("Membership service failure: %s", reason),
-    Thread reconnectThread = new Thread(() -> {
+    Thread reconnectThread = new LoggingThread("DisconnectThread", false, () -> {
-
-
-    reconnectThread.setName("DisconnectThread");
-    reconnectThread.setDaemon(false);
