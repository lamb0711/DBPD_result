GEODE-17: refactor CliCommandTestBase to use Parameterized Junit runs to do all combinations of http/non-http and security/non-security runs

- *
- * @since 9.0
+ * @since 9.0
-	public static final String USER_NAME = "security-username";
-	public static final String PASSWORD = "security-password";
-	public static final String OBJECT_NAME_ACCESSCONTROL = "GemFire:service=AccessControl,type=Distributed";
+  public static final String USER_NAME = "security-username";
+  public static final String PASSWORD = "security-password";
+  public static final String OBJECT_NAME_ACCESSCONTROL = "GemFire:service=AccessControl,type=Distributed";
-	private static final Logger logger = LogManager.getLogger(ManagementInterceptor.class);
-//  private Cache cache;
+  private static final Logger logger = LogManager.getLogger(ManagementInterceptor.class);
+  //  private Cache cache;
-		registerAccessControlMBean();
+    registerAccessControlMBean();
-	}
+  }
-	private void registerAccessControlMBean() {
+  private void registerAccessControlMBean() {
-      if(names.isEmpty()) {
+      if (names.isEmpty()) {
-          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource",e);
+          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource", e);
-          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource",e);
+          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource", e);
-          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource",e);
+          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource", e);
-    } catch (MalformedObjectNameException e) {      
+    } catch (MalformedObjectNameException e) {
-   * @throws SecurityException
-   *           if authentication fails
+   * @throws SecurityException if authentication fails
-	public Subject authenticate(Object credentials) {
-		String username = null, password = null;
+  public Subject authenticate(Object credentials) {
+    String username = null, password = null;
-			final String[] aCredentials = (String[]) credentials;
-			username = aCredentials[0];
-			password = aCredentials[1];
-		  pr.put(USER_NAME, username);
-		  pr.put(PASSWORD, password);
+      final String[] aCredentials = (String[]) credentials;
+      username = aCredentials[0];
+      password = aCredentials[1];
+      pr.put(USER_NAME, username);
+      pr.put(PASSWORD, password);
-			    Collections.EMPTY_SET);
+          Collections.EMPTY_SET);
-	}
+    }
-   * @throws SecurityException
-   *           if access is not granted
+   * @throws SecurityException if access is not granted
-    if (StringUtils.isBlank(authzFactoryName)){
+    if (StringUtils.isBlank(authzFactoryName)) {
-		}
+    }
-		Principal principal = principals.iterator().next();
+    Principal principal = principals.iterator().next();
-      throw new SecurityException(ACCESS_DENIED_MESSAGE + ": Not authorized for "+context);
+      throw new SecurityException(ACCESS_DENIED_MESSAGE + ": Not authorized for " + context);
-			try {
+        try {
-          authzCallback.init(principal, null);
+          authzCallback.init(principal);
-          throw new AuthenticationFailedException(
-              LocalizedStrings.HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
-			}
-		}
+          throw new AuthenticationFailedException(LocalizedStrings.HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
+        }
+      }
-		try {
+        try {
-          postAuthzCallback.init(principal, null);
+          postAuthzCallback.init(principal);
-          throw new AuthenticationFailedException(
-              LocalizedStrings.HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
-		}
-	}
+          throw new AuthenticationFailedException(LocalizedStrings.HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(), ex);
+        }
+      }
-			try {
+    try {
-			}
+    }
-		}
+    }
-	}
+  }
-    if (StringUtils.isBlank(postAuthzFactoryName)){
-      return ;
+    if (StringUtils.isBlank(postAuthzFactoryName)) {
+      return;
