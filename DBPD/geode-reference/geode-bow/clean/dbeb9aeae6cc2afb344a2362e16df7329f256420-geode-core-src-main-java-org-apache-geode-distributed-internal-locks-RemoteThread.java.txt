Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Uniquely identifies a remote thread by DistributedMember and threadId
- * sequence that is unique within the DLockService instance of that member.
+ * Uniquely identifies a remote thread by DistributedMember and threadId sequence that is unique
+ * within the DLockService instance of that member.
-  
+
-  
+
-  
+
-  
+
-    if (other == this) return true;
-    if (other == null) return false;
-    if (!(other instanceof RemoteThread)) return  false;
+    if (other == this)
+      return true;
+    if (other == null)
+      return false;
+    if (!(other instanceof RemoteThread))
+      return false;
-    if (this.member != that.member &&
-        !(this.member != null &&
-        this.member.equals(that.member))) return false;
-    if (this.threadId != that.threadId) return false;
+    if (this.member != that.member && !(this.member != null && this.member.equals(that.member)))
+      return false;
+    if (this.threadId != that.threadId)
+      return false;
-  
+
-    result = mult * result + 
-      (this.member == null ? 0 : this.member.hashCode());
+    result = mult * result + (this.member == null ? 0 : this.member.hashCode());
-    sb.append("member@").append(System.identityHashCode(this.member)).append("=").append(this.member);
+    sb.append("member@").append(System.identityHashCode(this.member)).append("=")
+        .append(this.member);
