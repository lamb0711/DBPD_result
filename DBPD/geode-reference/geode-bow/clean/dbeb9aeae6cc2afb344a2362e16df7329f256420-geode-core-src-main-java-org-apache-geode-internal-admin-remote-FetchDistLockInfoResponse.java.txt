Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
-   
+
+
-//import org.apache.geode.internal.*;
+// import org.apache.geode.internal.*;
-  
+
-   * Returns a <code>FetchDistLockInfoResponse</code> that will be returned to the
-   * specified recipient. The message will contains a copy of the local manager's
-   * distributed lock service information.
+   * Returns a <code>FetchDistLockInfoResponse</code> that will be returned to the specified
+   * recipient. The message will contains a copy of the local manager's distributed lock service
+   * information.
-                                                 InternalDistributedMember recipient) {
+      InternalDistributedMember recipient) {
-      Map.Entry entry = (Map.Entry)iter.next();
+      Map.Entry entry = (Map.Entry) iter.next();
-      DLockService service = 
-          (DLockService) entry.getValue();
+      DLockService service = (DLockService) entry.getValue();
-      while(iter1.hasNext()) {
-        Map.Entry token = (Map.Entry)iter1.next();
-        infos.add(new RemoteDLockInfo(serviceName,
-                                      token.getKey().toString(),
-                                      (DLockToken)token.getValue(),
-                                      id));
+      while (iter1.hasNext()) {
+        Map.Entry token = (Map.Entry) iter1.next();
+        infos.add(new RemoteDLockInfo(serviceName, token.getKey().toString(),
+            (DLockToken) token.getValue(), id));
-    }    
-    m.lockInfos = (DLockInfo[])infos.toArray(new DLockInfo[0]);
+    }
+    m.lockInfos = (DLockInfo[]) infos.toArray(new DLockInfo[0]);
-  
+
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.lockInfos = (DLockInfo[])DataSerializer.readObject(in);
+    this.lockInfos = (DLockInfo[]) DataSerializer.readObject(in);
-    return LocalizedStrings.FetchDistLockInfoResponse_FETCHDISTLOCKINFORESPONSE_FROM_0.toLocalizedString(this.getSender());
+    return LocalizedStrings.FetchDistLockInfoResponse_FETCHDISTLOCKINFORESPONSE_FROM_0
+        .toLocalizedString(this.getSender());
