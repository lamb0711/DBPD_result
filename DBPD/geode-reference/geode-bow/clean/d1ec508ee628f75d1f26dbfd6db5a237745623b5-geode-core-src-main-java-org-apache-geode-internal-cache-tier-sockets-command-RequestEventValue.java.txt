GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException {
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection, long start)
+      throws IOException {
-    CachedRegionHelper crHelper = servConn.getCachedRegionHelper();
+    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
-    servConn.setAsTrue(REQUIRES_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_RESPONSE);
-    int parts = msg.getNumberOfParts();
-    eventIDPart = msg.getPart(0);
+    int parts = clientMessage.getNumberOfParts();
+    eventIDPart = clientMessage.getPart(0);
-          servConn.getName()));
+          serverConnection.getName()));
-      writeErrorResponse(msg, MessageType.REQUESTDATAERROR, errMessage.toString(), servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeErrorResponse(clientMessage, MessageType.REQUESTDATAERROR, errMessage.toString(),
+          serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-        writeException(msg, e, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeException(clientMessage, e, false, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-        valuePart = msg.getPart(1);
+        valuePart = clientMessage.getPart(1);
-          writeException(msg, e, false, servConn);
-          servConn.setAsTrue(RESPONDED);
+          writeException(clientMessage, e, false, serverConnection);
+          serverConnection.setAsTrue(RESPONDED);
-        logger.trace("{}: Received get event value request ({} bytes) from {}", servConn.getName(),
-            msg.getPayloadLength(), servConn.getSocketString());
+        logger.trace("{}: Received get event value request ({} bytes) from {}",
+            serverConnection.getName(), clientMessage.getPayloadLength(),
+            serverConnection.getSocketString());
-      CacheClientNotifier ccn = servConn.getAcceptor().getCacheClientNotifier();
+      CacheClientNotifier ccn = serverConnection.getAcceptor().getCacheClientNotifier();
-        writeRegionDestroyedEx(msg, "ha container", reason, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeRegionDestroyedEx(clientMessage, "ha container", reason, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-            writeErrorResponse(msg, MessageType.REQUEST_EVENT_VALUE_ERROR, msgStr, servConn);
-            servConn.setAsTrue(RESPONDED);
+            writeErrorResponse(clientMessage, MessageType.REQUEST_EVENT_VALUE_ERROR, msgStr,
+                serverConnection);
+            serverConnection.setAsTrue(RESPONDED);
-          writeException(msg, e, false, servConn);
-          servConn.setAsTrue(RESPONDED);
+          writeException(clientMessage, e, false, serverConnection);
+          serverConnection.setAsTrue(RESPONDED);
-        writeResponse(data, callbackArg, msg, isObject, servConn);
-        servConn.setAsTrue(RESPONDED);
-        ccn.getClientProxy(servConn.getProxyID()).getStatistics().incDeltaFullMessagesSent();
+        writeResponse(data, callbackArg, clientMessage, isObject, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
+        ccn.getClientProxy(serverConnection.getProxyID()).getStatistics()
+            .incDeltaFullMessagesSent();
-              servConn.getName(), servConn.getSocketString(), haContainer.getName());
+              serverConnection.getName(), serverConnection.getSocketString(),
+              haContainer.getName());
