Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>CacheServerHelper</code> is a static class that provides helper methods
- * for the CacheServer classes.
+ * <code>CacheServerHelper</code> is a static class that provides helper methods for the CacheServer
+ * classes.
-  
+
-      ((CacheServerImpl)server).setIsDefaultServer();
+      ((CacheServerImpl) server).setIsDefaultServer();
-  
+
-    if ( !(server instanceof CacheServerImpl) ) {
+    if (!(server instanceof CacheServerImpl)) {
-    return ((CacheServerImpl)server).isDefaultServer();
+    return ((CacheServerImpl) server).isDefaultServer();
-  
+
-    return zipObject
-      ? zip(obj)
-      : BlobHelper.serializeToBlob(obj);
+    return zipObject ? zip(obj) : BlobHelper.serializeToBlob(obj);
-  public static Object deserialize(byte[] blob, boolean unzipObject) throws IOException, ClassNotFoundException {
-    return unzipObject
-      ? unzip(blob)
-      : BlobHelper.deserializeBlob(blob);
+  public static Object deserialize(byte[] blob, boolean unzipObject)
+      throws IOException, ClassNotFoundException {
+    return unzipObject ? unzip(blob) : BlobHelper.deserializeBlob(blob);
-  public static Object deserialize(byte[] blob, Version version, boolean unzipObject) throws IOException, ClassNotFoundException {
-    return unzipObject
-      ? unzip(blob)
-      : BlobHelper.deserializeBlob(blob, version, null);
+  public static Object deserialize(byte[] blob, Version version, boolean unzipObject)
+      throws IOException, ClassNotFoundException {
+    return unzipObject ? unzip(blob) : BlobHelper.deserializeBlob(blob, version, null);
-  
+
-//logger.info("CacheServerHelper: Zipping object to blob: " + obj);
+    // logger.info("CacheServerHelper: Zipping object to blob: " + obj);
-//logger.info("CacheServerHelper: Zipped object to blob: " + blob);
+    // logger.info("CacheServerHelper: Zipped object to blob: " + blob);
-//logger.info("CacheServerHelper: Unzipping blob to object: " + blob);
+    // logger.info("CacheServerHelper: Unzipping blob to object: " + blob);
-//logger.info("CacheServerHelper: Unzipped blob to object: " + obj);
+    // logger.info("CacheServerHelper: Unzipped blob to object: " + obj);
+   * 
-   * @return String 
+   * @return String
-    int chararr_count=0;
+    int chararr_count = 0;
-      if (c > 127) break;
+      if (c > 127)
+        break;
-      chararr[chararr_count++]=(char)c;
+      chararr[chararr_count++] = (char) c;
-        case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
-          /* 0xxxxxxx*/
+        case 0:
+        case 1:
+        case 2:
+        case 3:
+        case 4:
+        case 5:
+        case 6:
+        case 7:
+          /* 0xxxxxxx */
-          chararr[chararr_count++]=(char)c;
+          chararr[chararr_count++] = (char) c;
-        case 12: case 13:
-          /* 110x xxxx   10xx xxxx*/
+        case 12:
+        case 13:
+          /* 110x xxxx 10xx xxxx */
-            throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(), 
+            throw new RuntimeException(
+                LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),
-          char2 = (int) bytearr[count-1];
+          char2 = (int) bytearr[count - 1];
-            throw new RuntimeException(
-                "malformed input around byte " + count);
-          chararr[chararr_count++]=(char)(((c & 0x1F) << 6) |
-              (char2 & 0x3F));
+            throw new RuntimeException("malformed input around byte " + count);
+          chararr[chararr_count++] = (char) (((c & 0x1F) << 6) | (char2 & 0x3F));
-          /* 1110 xxxx  10xx xxxx  10xx xxxx */
+          /* 1110 xxxx 10xx xxxx 10xx xxxx */
-          if (count > utflen){
-            throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(), 
-                new UTFDataFormatException("malformed input: partial character at end")); 
+          if (count > utflen) {
+            throw new RuntimeException(
+                LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),
+                new UTFDataFormatException("malformed input: partial character at end"));
-          char2 = (int) bytearr[count-2];
-          char3 = (int) bytearr[count-1];
-          if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)){
-            throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(), 
-                new UTFDataFormatException("malformed input around byte " + (count-1)));
+          char2 = (int) bytearr[count - 2];
+          char3 = (int) bytearr[count - 1];
+          if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {
+            throw new RuntimeException(
+                LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),
+                new UTFDataFormatException("malformed input around byte " + (count - 1)));
-          chararr[chararr_count++]=(char)(((c     & 0x0F) << 12) |
-              ((char2 & 0x3F) << 6)  |
-              ((char3 & 0x3F) << 0));
+          chararr[chararr_count++] =
+              (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
-          /* 10xx xxxx,  1111 xxxx */
-          throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(), 
+          /* 10xx xxxx, 1111 xxxx */
+          throw new RuntimeException(
+              LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),
