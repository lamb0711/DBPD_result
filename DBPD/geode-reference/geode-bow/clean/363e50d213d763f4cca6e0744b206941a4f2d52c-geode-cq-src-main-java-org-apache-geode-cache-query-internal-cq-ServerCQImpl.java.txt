GEODE-2632: refactor code to use InternalCache instead of GemFireCacheImpl

* minor cleanup also

-import java.util.concurrent.ConcurrentLinkedQueue;
-import org.apache.geode.CancelException;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.cache.client.internal.UserAttributes;
-import org.apache.geode.cache.query.CqListener;
+import org.apache.geode.i18n.StringId;
-import org.apache.geode.i18n.StringId;
-  public volatile boolean isPR = false;
+  volatile boolean isPR = false;
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.query.internal.InternalCqQuery2#getFilterID()
-   */
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.query.internal.InternalCqQuery2#setFilterID(java.lang.Long)
-   */
-    // servConnection = serverSideConnection;
-    /*
-     * try { initCq(); } catch (CqExistsException cqe) { // Should not happen. throw new
-     * CqException(LocalizedStrings.CqQueryImpl_UNABLE_TO_CREATE_CQ_0_ERROR__1.toLocalizedString(new
-     * Object[] { cqName, cqe.getMessage()})); }
-     */
-
-    // checkAndSetCqOnRegion();
-
-        cqService.stats.incClientsWithCqs();
+        cqService.stats().incClientsWithCqs();
-   * @throws CqException
-   * @param key
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.query.internal.InternalCqQuery2#addToCqResultKeys(java.lang.Object)
-   */
-    // this.logger.fine("Adding key to Results Cache For CQ :" +
-    // this.cqName + " key :" + key);
-          // this.logger.fine("Removing key from Destroy Cache For CQ :" +
-          // this.cqName + " key :" + key);
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.cache.query.internal.InternalCqQuery2#removeFromCqResultKeys(java.lang.Object,
-   * boolean)
-   */
-    // this.logger.fine("Removing key from Results Cache For CQ :" +
-    // this.cqName + " key :" + key);
-          // this.logger.fine("Adding key to Destroy Cache For CQ :" +
-          // this.cqName + " key :" + key);
-   * 
-   * @param key
-  public void markAsDestroyedInCqResultKeys(Object key) {
+  void markAsDestroyedInCqResultKeys(Object key) {
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.query.internal.InternalCqQuery2#setCqResultsCacheInitialized()
-   */
-  /*
-   * (non-Javadoc)
-   * 
-   * @see
-   * org.apache.geode.cache.query.internal.InternalCqQuery2#isOldValueRequiredForQueryProcessing(
-   * java.lang.Object)
-   */
-   * 
-   * @throws CqException
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.query.internal.InternalCqQuery2#close(boolean)
-   */
-        cqService.stats.decCqsActive();
+        cqService.stats().decCqsActive();
-        cqService.stats.decCqsStopped();
+        cqService.stats().decCqsStopped();
-      cqService.stats.incCqsClosed();
-      cqService.stats.decCqsOnClient();
+      cqService.stats().incCqsClosed();
+      cqService.stats().decCqsOnClient();
-   * 
-   * @throws CqException
+  @Override
-          cqService.stats.decClientsWithCqs();
+          cqService.stats().decClientsWithCqs();
-   * @param serverCqName The serverCqName to set.
-   */
-  public void setServerCqName(String serverCqName) {
-
-    this.serverCqName = serverCqName;
-  }
-
-  /**
+  @Override
-      this.cqService.stats.incCqsStopped();
-      this.cqService.stats.decCqsActive();
+      this.cqService.stats().incCqsStopped();
+      this.cqService.stats().decCqsActive();
-  /* DataSerializableFixedID methods ---------------------------------------- */
-
+  @Override
-    // this.cqName = DataSerializer.readString(in);
-  /*
-   * public int getDSFID() { return CQ_QUERY; }
-   */
-
+  @Override
-    // DataSerializer.writeString(this.cqName, out);
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.query.internal.InternalCqQuery2#isPR()
-   */
-
