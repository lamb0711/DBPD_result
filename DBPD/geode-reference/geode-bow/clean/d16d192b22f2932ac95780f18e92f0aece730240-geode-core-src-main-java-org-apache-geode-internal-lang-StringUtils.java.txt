GEODE-1994: Overhaul of internal.lang.StringUtils to extend and heavily use commons.lang.StringUtils

*   geode.internal.lang.StringUtils has been deprecated.  In the interim, it has been heavily refactored and extends commons.lang.StringUtils.
*
*   Renamed:
*   --  EMPTY_STRING -> EMPTY (inherited)
*   --  toUpperCase  -> upperCase (inherited)
*   --  toLowerCase  -> lowerCase (inherited)
*   --  padEnding    -> rightPad (inherited)
*
*   Removed:
*   --  EMPTY_STRING_ARRAY; usage replaced with commons.lang.ArrayUtils.EMPTY_STRING_ARRAY
*   --  SPACES
*   --  UTF_8; rare usage replaced with raw string
*   --  concat; usage replaced with commons.lang.join, refactoring as necessary.
*   --  getLettersOnly
*   --  getSpaces
*   --  truncate
*   --  valueOf; usage refactored to use defaultString
*
*   Refactored
*   --  defaultIfBlank: previously relied on varargs and could return null.  Usage refactored to allow inheritance from commons.
*   --  defaultString(s, EMPTY) refactored to use standard signature defaultString(s) for consistency throughout codebase.
*   --  isBlank: usage refactored to resolve discrepancies with commons.lang.isBlank, which is now inherited.
*   --  isEmpty: usage refactored to resolve discrepancies with commons.lang.isEmpty, which is now inherited.
*
*   Code Cleanup:
*   --  Many uses of !isBlank -> isNotBlank
*   --  Changes suggested by Inspections on most touched files.
*   --     Explicit <T> -> <> when type is inferable
*   --     while loops operating on iterators converted to for each loops
*   --     for loops operating on array indices converted to for each loops
*   --  Various string typos corrected.
*   --  isEmpty(s.trim()) -> isBlank(s)
*   --  s.trim().isEmpty() -> isEmpty(s)
*   --  Removed some instances of 'dead' code
*   --  Optimized imports in every touched file
*
*   Qualitative Changes:
*   --  The following functions now throw an error when called with a null string input:
*   --  *  LocatorLauncher.Builder.setMemberName
*   --  *  ServerLauncher.Builder.setMemberName
*   --  *  ServerLauncher.Builder.setHostnameForClients
*   --  (Unit tests added to capture these changes)
*
*   Notes:
*   --  StringUtils.wraps may be inherited from Apache Commons when the dependency is updated.
*   --  AbstractLauncher.getMember has the documented behavior of returning null when both MemberName and ID are blank.  Is this the best behavior for this method?

* this closes #521

- * 
+ *
-public abstract class StringUtils {
+@Deprecated
+public class StringUtils extends org.apache.commons.lang.StringUtils {
-  public static final String EMPTY_STRING = "";
-  public static final String UTF_8 = "UTF-8";
-  public static final String[] EMPTY_STRING_ARRAY = new String[0];
+  private static final int MAX_ARRAY_ELEMENTS_TO_CONVERT =
+      Integer.getInteger("StringUtils.MAX_ARRAY_ELEMENTS_TO_CONVERT", 16);
-  public static final String[] SPACES = {"", " ", "  ", "   ", "    ", "     ", "      ", "       ",
-      "        ", "         ", "          "};
-  /**
-   * Concatenates all Objects in the array into a single String by calling toString on the Object.
-   * </p>
-   * 
-   * @param values the Object elements of the array to be concatenated into the String.
-   * @return a single String with all the individual Objects in the array concatenated.
-   * @see #concat(Object[], String)
-   */
-  public static String concat(final Object... values) {
-    return concat(values, EMPTY_STRING);
-  }
-
-  /**
-   * Concatenates all Objects in the array into a single String using the Object's toString method,
-   * delimited by the specified delimiter.
-   * </p>
-   * 
-   * @param values an array of Objects to concatenate into a single String value.
-   * @param delimiter the String value to use as a separator between the individual Object values.
-   *        If delimiter is null, then a empty String is used.
-   * @return a single String with all the individual Objects of the array concatenated together,
-   *         separated by the specified delimiter.
-   * @see java.lang.Object#toString()
-   * @see java.lang.StringBuilder
-   */
-  public static String concat(final Object[] values, String delimiter) {
-    delimiter = ObjectUtils.defaultIfNull(delimiter, EMPTY_STRING);
-
-    final StringBuilder buffer = new StringBuilder();
-    int count = 0;
-
-    if (values != null) {
-      for (Object value : values) {
-        buffer.append(count++ > 0 ? delimiter : EMPTY_STRING);
-        buffer.append(value);
-      }
-    }
-
-    return buffer.toString();
-  }
-
-  /**
-   * Returns the first non-null, non-empty and non-blank String value in the array of String values.
-   * </p>
-   * 
-   * @param values an array of String values, usually consisting of the preferred value followed by
-   *        default values if any value in the array of String values is null, empty or blank.
-   * @return the first non-null, non-empty and non-blank String value in the array of Strings. If
-   *         all values are either null, empty or blank then null is returned.
-   * @see #isBlank(String)
-   */
-  public static String defaultIfBlank(final String... values) {
-    if (values != null) {
-      for (final String value : values) {
-        if (!isBlank(value)) {
-          return value;
-        }
-      }
-    }
-
-    return null;
+  public static String nullifyIfBlank(final String value) {
+    return isBlank(value) ? null : value;
-   * 
+   *
-  /**
-   * Returns only the letters (a..zA..Z) from the specified String value.
-   * </p>
-   * 
-   * @param value the String value from which to extract letters.
-   * @return only the letters from the specified String value. If the String is null or contains no
-   *         letters, then this method returns an empty String.
-   * @see java.lang.Character#isLetter(char)
-   */
-  public static String getLettersOnly(final String value) {
-    final StringBuilder buffer = new StringBuilder();
-    if (value != null) {
-      for (final char chr : value.toCharArray()) {
-        if (Character.isLetter(chr)) {
-          buffer.append(chr);
-        }
-      }
-    }
-
-    return buffer.toString();
-  }
-
-  /**
-   * Gets a number of spaces determined by number.
-   * </p>
-   * 
-   * @param number an integer value indicating the number of spaces to return.
-   * @return a String value containing a number of spaces given by number.
-   */
-  public static String getSpaces(int number) {
-    final StringBuilder spaces = new StringBuilder(SPACES[Math.min(number, SPACES.length - 1)]);
-
-    do {
-      number -= (SPACES.length - 1);
-      number = Math.max(number, 0);
-      spaces.append(SPACES[Math.min(number, SPACES.length - 1)]);
-    } while (number > 0);
-
-    return spaces.toString();
-  }
-
-  /**
-   * Determines whether the specified String value is blank, which is true if it is null, an empty
-   * String or a String containing only spaces (blanks).
-   * </p>
-   * 
-   * @param value the String value used in the determination for the "blank" check.
-   * @return a boolean value indicating whether the specified String is blank.
-   * @see #isEmpty(String)
-   */
-  public static boolean isBlank(final String value) {
-    return (value == null || EMPTY_STRING.equals(value.trim()));
-  }
-
-  /**
-   * Determines whether the specified String value is empty, which is true if and only if the value
-   * is the empty String.
-   * </p>
-   * 
-   * @param value the String value used in the determination of the "empty" check.
-   * @return a boolean value indicating if the specified String is empty.
-   * @see #isBlank(String)
-   */
-  public static boolean isEmpty(final String value) {
-    return EMPTY_STRING.equals(value);
-  }
-
-  /**
-   * Pads the specified String value by appending the specified character up to the given length.
-   * </p>
-   * 
-   * @param value the String value to pad by appending 'paddingCharacter' to the end.
-   * @param paddingCharacter the character used to pad the end of the String value.
-   * @param length an int value indicating the final length of the String value with padding of the
-   *        'paddingCharacter'.
-   * @return the String value padded with the specified character by appending 'paddingCharacter' to
-   *         the end of the String value up to the given length.
-   * @throws NullPointerException if the String value is null.
-   */
-  public static String padEnding(final String value, final char paddingCharacter,
-      final int length) {
-    if (value == null) {
-      throw new NullPointerException("The String value to pad cannot be null!");
-    }
-
-    final StringBuilder buffer = new StringBuilder(value);
-
-    for (int valueLength = value.length(); valueLength < length; valueLength++) {
-      buffer.append(paddingCharacter);
-    }
-
-    return buffer.toString();
-  }
-
-  /**
-   * A null-safe implementation of the String.toLowerCase method.
-   * </p>
-   * 
-   * @param value a String value to convert to lower case.
-   * @return a lower case representation of the specified String value.
-   * @see java.lang.String#toLowerCase()
-   */
-  public static String toLowerCase(final String value) {
-    return (value == null ? null : value.toLowerCase());
-  }
-
-  /**
-   * A null-safe implementation of the String.toUpperCase method.
-   * </p>
-   * 
-   * @param value a String value to convert to upper case.
-   * @return an upper case representation of the specified String value.
-   * @see java.lang.String#toUpperCase()
-   */
-  public static String toUpperCase(final String value) {
-    return (value == null ? null : value.toUpperCase());
-  }
-
-  /**
-   * A method to trim the value of a String and guard against null values.
-   * <p/>
-   * 
-   * @param value the String value that will be trimmed if not null.
-   * @return null if the String value is null or the trimmed version of the String value if String
-   *         value is not null.
-   * @see java.lang.String#trim()
-   */
-  public static String trim(final String value) {
-    return (value == null ? null : value.trim());
-  }
-
-  /**
-   * Null-safe implementation of String truncate using substring. Truncates the specified String
-   * value to the specified length. Returns null if the String value is null.
-   * </p>
-   * 
-   * @param value the String value to truncate.
-   * @param length an int value indicating the length to truncate the String value to.
-   * @return the String value truncated to specified length, or null if the String value is null.
-   * @throws IllegalArgumentException if the value of length is less than 0.
-   * @see java.lang.String#substring(int, int)
-   */
-  public static String truncate(final String value, final int length) {
-    if (length < 0) {
-      throw new IllegalArgumentException("Length must be greater than equal to 0!");
-    }
-
-    return (value == null ? null : value.substring(0, Math.min(value.length(), length)));
-  }
-   * 
+   *
-   * @param defaultValues an array of default String values to assess if the specified Object value
+   * @param defaultValue an array of default String values to assess if the specified Object value
-  public static String valueOf(final Object value, final String... defaultValues) {
-    if (value != null) {
-      return value.toString();
-    } else {
-      if (defaultValues != null) {
-        for (String defaultValue : defaultValues) {
-          if (defaultValue != null) {
-            return defaultValue;
-          }
-        }
-      }
+  public static String defaultString(final Object value, final String defaultValue) {
+    return value == null ? defaultValue : value.toString();
+  }
-      return String.valueOf(value);
-    }
+  public static String defaultString(final Object value) {
+    return value == null ? EMPTY : value.toString();
-   * 
+   *
+  // Can be removed when commons is updated.
-    int spaceIndex = -1;
+    int spaceIndex;
-    indent = valueOf(indent, EMPTY_STRING);
+    indent = StringUtils.defaultString(indent);
-      buffer.append(lineCount++ > 1 ? indent : EMPTY_STRING);
+      buffer.append(lineCount++ > 1 ? indent : EMPTY);
-  private static final int MAX_ARRAY_ELEMENTS_TO_CONVERT =
-      Integer.getInteger("StringUtils.MAX_ARRAY_ELEMENTS_TO_CONVERT", 16);
-
-   * 
+   *
-   * 
+   *
-  private static String arrayToString(Object[] a, int maxArrayElements) {
+
+  private static <T> String arrayToString(T[] a, int maxArrayElements) {
+    String className = a.getClass().getSimpleName();
