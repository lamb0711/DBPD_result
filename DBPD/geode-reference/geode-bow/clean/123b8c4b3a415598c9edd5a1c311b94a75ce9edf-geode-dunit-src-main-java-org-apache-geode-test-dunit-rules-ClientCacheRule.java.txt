GEODE-5614: rename DistributedTestRule as DistributedRule

* Cleanup javadocs on rules that referred to DistributedTestRule.
* Add ClientCacheFactoryDistributedTest for ClientCacheRule.

+import static org.apache.geode.test.dunit.Disconnect.disconnectAllFromDS;
-import org.apache.geode.test.dunit.Disconnect;
- * {@code ClientCacheRule} follows the standard convention of using a {@code Builder} for
- * configuration as introduced in the JUnit {@code Timeout} rule.
- *
- * <p>
- * {@literal @}ClassRule
- * public static DistributedTestRule distributedTestRule = new DistributedTestRule();
+ * {@literal @}Rule
+ * public DistributedRule distributedRule = new DistributedRule();
- * public void hasClient() {
- *   vm0.invoke(() -> clientCacheRule.createClientCache());
+ * public void createClientCache() {
+ *   vm0.invoke(() -> clientCacheRule.createClientCache(new ClientCacheFactory().setPoolThreadLocalConnections(true));
+ * }
+ * </pre>
+ *
+ * <p>
+ * {@link ClientCacheRule.Builder} can also be used to construct an instance with more options:
+ *
+ * <pre>
+ * {@literal @}Rule
+ * public DistributedRule distributedRule = new DistributedRule();
+ *
+ * {@literal @}Rule
+ * public ClientCacheRule clientCacheRule = ClientCacheRule.builder().createClientCacheInLocal().build();
+ *
+ * {@literal @}Test
+ * public void controllerVmCreatedClientCache() {
+ *   assertThat(clientCacheRule.getClientCache()).isNotNull();
-@SuppressWarnings({"serial", "unused"})
-public class ClientCacheRule extends AbstractDistributedTestRule {
+@SuppressWarnings("serial,unused")
+public class ClientCacheRule extends AbstractDistributedRule {
-      Disconnect.disconnectAllFromDS();
+      disconnectAllFromDS();
