GEODE-6272: change jdbc to use pdx as keys instead of json (#3076)

Composite keys for the jdbc connector must now be PdxInstances created with "neverDeserialize".

* added PdxInstanceFactory.neverDeserialize and PdxInstance.isDeserializable as new external APIs.

* improved the InternalPdxInstance interface to include Sendable.
Also this interface is now implemented by the pdx enum classes.
So now all classes that implement PdxInstance also implement InternalPdxInstance

* getCacheObject is now on the InternalPdxInstance interface.

* getRawField is now in the InternalPdxInstance interface.
A method that was on PdxInstanceImpl but only used by AttributeDescriptor
and that did not use any PdxInstanceImpl data is now on AttributeDescriptor.
This also got rid of a singleton lookup of the cache.

* removed unused FieldNotFoundInPdxVersion

* removed PdxFieldNotFoundException

+import org.apache.geode.internal.Sendable;
+import org.apache.geode.pdx.PdxSerializationException;
-public interface InternalPdxInstance extends PdxInstance, ConvertableToBytes {
+public interface InternalPdxInstance extends PdxInstance, ConvertableToBytes, Sendable {
+  /**
+   * The same as calling getObject() but may also cache the result and future calls
+   * of this method will return the cached object instead of recomputing it.
+   * Implementors that do not want to support a cache can just use the default implementation
+   * which simply calls getObject().
+   *
+   * @throws PdxSerializationException if the instance could not be deserialized
+   */
+  default Object getCachedObject() {
+    return getObject();
+  }
+
+  /**
+   * This same as calling getField(fieldName) except that some implementations may support
+   * returning a PdxString instead of String.
+   * Implementors that do not support PdxString can use use the default implementation
+   * which simply calls getField(fieldName).
+   *
+   * @throws PdxSerializationException if the field could not be deserialized
+   */
+  default Object getRawField(String fieldName) {
+    return getField(fieldName);
+  }
