Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Sends <code>TXOriginatorRecoveryMessage</code> to all participants of
- * a given transaction when the originator departs. The participants delay
- * reply until the commit has finished. Once all replies have come in, the
- * transaction lock (<code>TXLockId</code>) will be released.
+ * Sends <code>TXOriginatorRecoveryMessage</code> to all participants of a given transaction when
+ * the originator departs. The participants delay reply until the commit has finished. Once all
+ * replies have come in, the transaction lock (<code>TXLockId</code>) will be released.
-public class TXOriginatorRecoveryProcessor extends ReplyProcessor21  {
+public class TXOriginatorRecoveryProcessor extends ReplyProcessor21 {
-  
-  static void sendMessage(Set members,
-                          InternalDistributedMember originator,
-                          TXLockId txLockId,
-                          DLockGrantor grantor,
-                          DM dm) {
-    TXOriginatorRecoveryProcessor processor = 
-        new TXOriginatorRecoveryProcessor(dm, members);
+
+  static void sendMessage(Set members, InternalDistributedMember originator, TXLockId txLockId,
+      DLockGrantor grantor, DM dm) {
+    TXOriginatorRecoveryProcessor processor = new TXOriginatorRecoveryProcessor(dm, members);
-    
+
-      if (msg.getSender() == null) msg.setSender(dm.getId());
-      msg.process((DistributionManager)dm);
+      if (msg.getSender() == null)
+        msg.setSender(dm.getId());
+      msg.process((DistributionManager) dm);
-        
+
-      dm.getCancelCriterion().checkCancelInProgress(null);
-      try { 
-        processor.waitForRepliesUninterruptibly();
-      }
-      catch (ReplyException e) {
-        e.handleAsUnexpected();
-      }
-    
+    dm.getCancelCriterion().checkCancelInProgress(null);
+    try {
+      processor.waitForRepliesUninterruptibly();
+    } catch (ReplyException e) {
+      e.handleAsUnexpected();
+    }
+
-    //dtls.release(txLockId);
+    // dtls.release(txLockId);
-    }
-    catch (InterruptedException e) {
+    } catch (InterruptedException e) {
-  
-  // ------------------------------------------------------------------------- 
-  //   Constructors
-  // -------------------------------------------------------------------------  
-  
+
+  // -------------------------------------------------------------------------
+  // Constructors
+  // -------------------------------------------------------------------------
+
-  private TXOriginatorRecoveryProcessor(DM dm, 
-                                        Set members) {
+  private TXOriginatorRecoveryProcessor(DM dm, Set members) {
-  
+
-  
+
-   * IllegalStateException is an anticipated reply exception.  Receiving
-   * multiple replies with this exception is normal.
+   * IllegalStateException is an anticipated reply exception. Receiving multiple replies with this
+   * exception is normal.
-  
-  // ------------------------------------------------------------------------- 
-  //   TXOriginatorRecoveryMessage
-  // -------------------------------------------------------------------------  
-  public static final class TXOriginatorRecoveryMessage
-  extends PooledDistributionMessage 
-  implements MessageWithReply {
+
+  // -------------------------------------------------------------------------
+  // TXOriginatorRecoveryMessage
+  // -------------------------------------------------------------------------
+  public static final class TXOriginatorRecoveryMessage extends PooledDistributionMessage
+      implements MessageWithReply {
-    
+
-    
+
-    
+
-      }
-      catch (RejectedExecutionException e) {
+      } catch (RejectedExecutionException e) {
-        }
+      }
-    
-    protected void processTXOriginatorRecoveryMessage(
-        final DistributionManager dm,
+
+    protected void processTXOriginatorRecoveryMessage(final DistributionManager dm,
-          
+
-      logger.info(LocalizedMessage.create(LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE));
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE));
-        /* TODO: implement waitToReleaseTXLockId here
-           testTXOriginatorRecoveryProcessor in 
-           org.apache.geode.internal.cache.locks.TXLockServiceTest
-           should be expanded upon also...
-        */
-      }
-      catch (RuntimeException t) {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE_THROWABLE), t);
-//        if (replyException == null) (can only be null) 
+        /*
+         * TODO: implement waitToReleaseTXLockId here testTXOriginatorRecoveryProcessor in
+         * org.apache.geode.internal.cache.locks.TXLockServiceTest should be expanded upon also...
+         */
+      } catch (RuntimeException t) {
+        logger.warn(
+            LocalizedMessage.create(
+                LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE_THROWABLE),
+            t);
+        // if (replyException == null) (can only be null)
-//        else {
-//          log.warning(LocalizedStrings.TXOriginatorRecoveryProcessor_MORE_THAN_ONE_EXCEPTION_THROWN_IN__0, this, t);
-//        }        
-//      }
-//      catch (VirtualMachineError err) {
-//        SystemFailure.initiateFailure(err);
-//        // If this ever returns, rethrow the error.  We're poisoned
-//        // now, so don't let this thread continue.
-//        throw err;
-//      }
-//      catch (Throwable t) {
-//        // Whenever you catch Error or Throwable, you must also
-//        // catch VirtualMachineError (see above).  However, there is
-//        // _still_ a possibility that you are dealing with a cascading
-//        // error condition, so you also need to check to see if the JVM
-//        // is still usable:
-//        SystemFailure.checkFailure();
-//        if (replyException == null) {
-//          replyException = new ReplyException(t);
-//        }
-//      }
-//      catch (VirtualMachineError err) {
-//        SystemFailure.initiateFailure(err);
-//        // If this ever returns, rethrow the error.  We're poisoned
-//        // now, so don't let this thread continue.
-//        throw err;
-//      }
-//      catch (Throwable t) {
-//        // Whenever you catch Error or Throwable, you must also
-//        // catch VirtualMachineError (see above).  However, there is
-//        // _still_ a possibility that you are dealing with a cascading
-//        // error condition, so you also need to check to see if the JVM
-//        // is still usable:
-//        SystemFailure.checkFailure();
-//        if (replyException == null) {
-//          replyException = new ReplyException(t);
-//        }
-//      }
-      }
-      finally {
-        TXOriginatorRecoveryReplyMessage replyMsg = 
-            new TXOriginatorRecoveryReplyMessage();
+        // else {
+        // log.warning(LocalizedStrings.TXOriginatorRecoveryProcessor_MORE_THAN_ONE_EXCEPTION_THROWN_IN__0,
+        // this, t);
+        // }
+        // }
+        // catch (VirtualMachineError err) {
+        // SystemFailure.initiateFailure(err);
+        // // If this ever returns, rethrow the error. We're poisoned
+        // // now, so don't let this thread continue.
+        // throw err;
+        // }
+        // catch (Throwable t) {
+        // // Whenever you catch Error or Throwable, you must also
+        // // catch VirtualMachineError (see above). However, there is
+        // // _still_ a possibility that you are dealing with a cascading
+        // // error condition, so you also need to check to see if the JVM
+        // // is still usable:
+        // SystemFailure.checkFailure();
+        // if (replyException == null) {
+        // replyException = new ReplyException(t);
+        // }
+        // }
+        // catch (VirtualMachineError err) {
+        // SystemFailure.initiateFailure(err);
+        // // If this ever returns, rethrow the error. We're poisoned
+        // // now, so don't let this thread continue.
+        // throw err;
+        // }
+        // catch (Throwable t) {
+        // // Whenever you catch Error or Throwable, you must also
+        // // catch VirtualMachineError (see above). However, there is
+        // // _still_ a possibility that you are dealing with a cascading
+        // // error condition, so you also need to check to see if the JVM
+        // // is still usable:
+        // SystemFailure.checkFailure();
+        // if (replyException == null) {
+        // replyException = new ReplyException(t);
+        // }
+        // }
+      } finally {
+        TXOriginatorRecoveryReplyMessage replyMsg = new TXOriginatorRecoveryReplyMessage();
-        
+
-          logger.info(LocalizedMessage.create(LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE_LOCALLY_PROCESS_REPLY));
+          logger.info(LocalizedMessage.create(
+              LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE_LOCALLY_PROCESS_REPLY));
-        }
-        else {
-          logger.info(LocalizedMessage.create(LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE_SEND_REPLY));
+        } else {
+          logger.info(LocalizedMessage.create(
+              LocalizedStrings.TXOriginatorRecoveryProcessor_PROCESSTXORIGINATORRECOVERYMESSAGE_SEND_REPLY));
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-    
+
-   }
-  
-  // ------------------------------------------------------------------------- 
-  //   TXOriginatorRecoveryReplyMessage
-  // -------------------------------------------------------------------------  
-  public static final class TXOriginatorRecoveryReplyMessage 
-  extends ReplyMessage  {
-    
+  }
+
+  // -------------------------------------------------------------------------
+  // TXOriginatorRecoveryReplyMessage
+  // -------------------------------------------------------------------------
+  public static final class TXOriginatorRecoveryReplyMessage extends ReplyMessage {
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-      return
-          "TXOriginatorRecoveryReplyMessage (processorId=" + super.processorId + 
-          "; txLockId=" + this.txLockId + "; sender=" + getSender() + ")";
+      return "TXOriginatorRecoveryReplyMessage (processorId=" + super.processorId + "; txLockId="
+          + this.txLockId + "; sender=" + getSender() + ")";
-  
+
