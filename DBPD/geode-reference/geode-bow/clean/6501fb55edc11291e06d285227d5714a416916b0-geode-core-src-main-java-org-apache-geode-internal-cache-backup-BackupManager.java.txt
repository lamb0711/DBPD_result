GEODE-4330: Move logic for handling temporary files during backup (#1323)


-  private final String diskStoreDirectoryName;
+  private final String memberId;
-  private Path tempDirectory;
-  private final Map<DiskStore, Map<DirectoryHolder, Path>> diskStoreDirTempDirsByDiskStore =
-      new HashMap<>();
+  private TemporaryBackupFiles temporaryFiles;
-    diskStoreDirectoryName = DATA_STORES_TEMPORARY_DIRECTORY + System.currentTimeMillis();
+    memberId = getCleanedMemberId();
+
+    if (abort) {
+      cleanup();
+      return new HashSet<>();
+    }
+
-      if (abort) {
-        return new HashSet<>();
-      }
-      tempDirectory = Files.createTempDirectory("backup_" + System.currentTimeMillis());
-      File backupDir = getBackupDir(targetDir);
+      temporaryFiles = TemporaryBackupFiles.create();
+      File memberBackupDir = new File(targetDir, memberId);
-      File storesDir = new File(backupDir, DATA_STORES_DIRECTORY);
+      File storesDir = new File(memberBackupDir, DATA_STORES_DIRECTORY);
-        backupAdditionalFiles(backupDir);
+        backupAdditionalFiles(memberBackupDir);
-        BackupDestination backupDestination = new FileSystemBackupDestination(backupDir.toPath());
+        BackupDestination backupDestination =
+            new FileSystemBackupDestination(memberBackupDir.toPath());
-
-    cleanupTemporaryFiles();
+    if (temporaryFiles != null) {
+      temporaryFiles.cleanupFiles();
+    }
-  private void cleanupTemporaryFiles() {
-    if (tempDirectory != null) {
-      try {
-        FileUtils.deleteDirectory(tempDirectory.toFile());
-      } catch (IOException e) {
-        logger.warn("Unable to delete temporary directory created during backup, " + tempDirectory,
-            e);
-      }
-    }
-    for (Map<DirectoryHolder, Path> diskStoreDirToTempDirMap : diskStoreDirTempDirsByDiskStore
-        .values()) {
-      for (Path tempDir : diskStoreDirToTempDirMap.values()) {
-        try {
-          FileUtils.deleteDirectory(tempDir.toFile());
-        } catch (IOException e) {
-          logger.warn("Unable to delete temporary directory created during backup, " + tempDir, e);
-        }
-      }
-    }
-  }
+
-  private File checkBaseline(File baselineParentDir) throws IOException {
+  private File checkBaseline(File baselineParentDir) {
-      baselineDir = getBackupDir(baselineParentDir);
+      baselineDir = new File(baselineParentDir, memberId);
-        copyOplog(diskStore, tempDirectory.toFile(), oplog);
+        copyOplog(diskStore, temporaryFiles.getDirectory().toFile(), oplog);
-
-          // TODO cleanup new location definition code
-          /*
-           * Path diskstoreDir = getBackupDir(tempDir.toFile(),
-           * diskStore.getInforFileDirIndex()).toPath(); Files.createDirectories(diskstoreDir);
-           */
-          backupDiskInitFile(diskStore, tempDirectory);
+          backupDiskInitFile(diskStore, temporaryFiles.getDirectory());
-      File backupDir = getBackupDir(targetDir, i);
+      File backupDir = getBackupDirForCurrentMember(targetDir, i);
-  private File getBackupDir(File targetDir, int index) {
+  private File getBackupDirForCurrentMember(File targetDir, int index) {
-    Files.createDirectories(tempDirectory.resolve(CONFIG_DIRECTORY));
+    Files.createDirectories(temporaryFiles.getDirectory().resolve(CONFIG_DIRECTORY));
-        Path destination = tempDirectory.resolve(CONFIG_DIRECTORY).resolve(source.getFileName());
+        Path destination =
+            temporaryFiles.getDirectory().resolve(CONFIG_DIRECTORY).resolve(source.getFileName());
-    Files.createDirectories(tempDirectory.resolve(USER_FILES));
+    Files.createDirectories(temporaryFiles.getDirectory().resolve(USER_FILES));
-        Path destination = tempDirectory.resolve(USER_FILES).resolve(original.getName());
+        Path destination =
+            temporaryFiles.getDirectory().resolve(USER_FILES).resolve(original.getName());
-          Path destination = tempDirectory.resolve(USER_FILES).resolve(sourceFileName);
+          Path destination =
+              temporaryFiles.getDirectory().resolve(USER_FILES).resolve(sourceFileName);
-  private File getBackupDir(File targetDir) {
+  private String getCleanedMemberId() {
-    vmId = cleanSpecialCharacters(vmId);
-    return new File(targetDir, vmId);
+    return cleanSpecialCharacters(vmId);
-        Path tempDiskDir = getTempDirForDiskStore(diskStore, dirHolder);
+        Path tempDiskDir = temporaryFiles.getDiskStoreDirectory(diskStore, dirHolder);
-  private Path getTempDirForDiskStore(DiskStore diskStore, DirectoryHolder dirHolder)
-      throws IOException {
-    Map<DirectoryHolder, Path> tempDirByDirectoryHolder =
-        diskStoreDirTempDirsByDiskStore.get(diskStore);
-    if (tempDirByDirectoryHolder == null) {
-      tempDirByDirectoryHolder = new HashMap<>();
-      diskStoreDirTempDirsByDiskStore.put(diskStore, tempDirByDirectoryHolder);
-    }
-    Path directory = tempDirByDirectoryHolder.get(dirHolder);
-    if (directory != null) {
-      return directory;
-    }
-
-    File diskStoreDir = dirHolder.getDir();
-    directory = diskStoreDir.toPath().resolve(diskStoreDirectoryName);
-    Files.createDirectories(directory);
-    tempDirByDirectoryHolder.put(dirHolder, directory);
-    return directory;
-  }
-
