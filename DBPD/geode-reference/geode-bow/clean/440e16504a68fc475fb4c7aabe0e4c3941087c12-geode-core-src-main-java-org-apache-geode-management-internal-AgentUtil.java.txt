GEODE-1122: Replace environment variable "GEMFIRE" with "GEODE_HOME"

GEODE-1122: Reverting gradle-wrapper.properties

-      "The GEMFIRE environment variable must be set!";
+      "The GEODE_HOME environment variable must be set!";
-   * this method will try to find the named war files in the following order: 1. if GEMFIRE is
+   * this method will try to find the named war files in the following order: 1. if GEODE_HOME is
-   * find either the name-version.war or the name.war file 2. If GEMFIRE is not defined, it will try
-   * to find either the name-version.war/name.war (in that order) on the classpath
+   * find either the name-version.war or the name.war file 2. If GEODE_HOME is not defined, it will
+   * try to find either the name-version.war/name.war (in that order) on the classpath
-    String gemfireHome = getGemFireHome();
-    if (!StringUtils.isBlank(gemfireHome)) {
+    String geodeHome = getGeodeHome();
+    if (!StringUtils.isBlank(geodeHome)) {
-          {gemfireHome + "/tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
-              gemfireHome + "/tools/Pulse/" + warFilePrefix + "-" + gemfireVersion + ".war",
-              gemfireHome + "/lib/" + warFilePrefix + "-" + gemfireVersion + ".war",
-              gemfireHome + "/tools/Extensions/" + warFilePrefix + ".war",
-              gemfireHome + "/tools/Pulse/" + warFilePrefix + ".war",
-              gemfireHome + "/lib/" + warFilePrefix + ".war"};
+          {geodeHome + "/tools/Extensions/" + warFilePrefix + "-" + gemfireVersion + ".war",
+              geodeHome + "/tools/Pulse/" + warFilePrefix + "-" + gemfireVersion + ".war",
+              geodeHome + "/lib/" + warFilePrefix + "-" + gemfireVersion + ".war",
+              geodeHome + "/tools/Extensions/" + warFilePrefix + ".war",
+              geodeHome + "/tools/Pulse/" + warFilePrefix + ".war",
+              geodeHome + "/lib/" + warFilePrefix + ".war"};
-    // if $GEMFIRE is not set or we are not able to find it in all the possible locations under
-    // $GEMFIRE, try to
+    // if $GEODE_HOME is not set or we are not able to find it in all the possible locations under
+    // $GEODE_HOME, try to
-  public String getGemFireHome() {
+  public String getGeodeHome() {
-    String gemFireHome = System.getenv("GEMFIRE");
+    String geodeHome = System.getenv("GEODE_HOME");
-    logger.info("GEMFIRE HOME:" + gemFireHome);
+    logger.info("GEODE_HOME:" + geodeHome);
-    if (StringUtils.isBlank(gemFireHome)) {
-      gemFireHome = System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "home");
-      logger.info("Reading gemfire.home System Property -> {}", gemFireHome);
-      if (StringUtils.isBlank(gemFireHome)) {
-        logger.info("GEMFIRE environment variable not set; HTTP service will not start.");
-        gemFireHome = null;
+    if (StringUtils.isBlank(geodeHome)) {
+      geodeHome = System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "home");
+      logger.info("Reading gemfire.home System Property -> {}", geodeHome);
+      if (StringUtils.isBlank(geodeHome)) {
+        logger.info("GEODE_HOME environment variable not set; HTTP service will not start.");
+        geodeHome = null;
-    return gemFireHome;
+    return geodeHome;
-    String gemfireHome = getGemFireHome();
+    String gemfireHome = getGeodeHome();
