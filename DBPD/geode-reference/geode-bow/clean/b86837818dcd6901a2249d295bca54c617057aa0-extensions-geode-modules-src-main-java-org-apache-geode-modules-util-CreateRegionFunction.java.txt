GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-import java.util.Properties;
-import org.apache.geode.cache.AttributesFactory;
-
-
-  private final Cache cache;
-
-  private final Region<String, RegionConfiguration> regionConfigurationsRegion;
-
-
-
+  private final Cache cache;
+  private final Region<String, RegionConfiguration> regionConfigurationsRegion;
+
+  @SuppressWarnings("unchecked")
-      StringBuilder builder = new StringBuilder();
-      builder.append("Function ").append(ID).append(" received request: ").append(configuration);
-      this.cache.getLogger().fine(builder.toString());
+      this.cache.getLogger().fine("Function " + ID + " received request: " + configuration);
-    RegionStatus status = null;
+    RegionStatus status;
+
+
+
+
+    EvictionAttributes evictionAttributes = existingRegionAttributes.getEvictionAttributes();
-    EvictionAttributes evictionAttributes = existingRegionAttributes.getEvictionAttributes();
+    RegionAttributesCreation requestedAttributesCreation =
+        new RegionAttributesCreation(requestedRegionAttributes, false);
+
-        AttributesFactory attributesFactory = new AttributesFactory(requestedRegionAttributes);
-        attributesFactory.setDiskStoreName("DEFAULT");
-        requestedRegionAttributes = attributesFactory.create();
-        existingRACreation = new RegionAttributesCreation(existingRegionAttributes, false);
+        requestedAttributesCreation.setDiskStoreName("DEFAULT");
-    existingRACreation.sameAs(requestedRegionAttributes);
+
+    existingRACreation.sameAs(requestedAttributesCreation);
-  @Override
-  public void init(Properties properties) {}
-
-    long start = 0, end = 0;
-    RegionStatus status = null;
+    long start = 0, end;
+    RegionStatus status;
-      StringBuilder builder = new StringBuilder();
-      builder.append(this).append(": Caught Exception attempting to create region named ")
-          .append(configuration.getRegionName()).append(":");
-      this.cache.getLogger().warning(builder.toString(), e);
+      String builder = this + ": Caught Exception attempting to create region named "
+          + configuration.getRegionName() + ":";
+      this.cache.getLogger().warning(builder, e);
+  @SuppressWarnings("unchecked")
-    Region<String, RegionConfiguration> r =
+    Region<String, RegionConfiguration> region =
-    if (r != null) {
-      return r;
+
+    if (region != null) {
+      return region;
+
-    AttributesFactory af = new AttributesFactory();
-    af.setDataPolicy(DataPolicy.REPLICATE);
-    af.setScope(Scope.DISTRIBUTED_ACK);
-    af.addCacheListener(new RegionConfigurationCacheListener());
-    RegionAttributes ra = af.create();
+    RegionAttributesCreation regionAttributesCreation = new RegionAttributesCreation();
+    regionAttributesCreation.setScope(Scope.DISTRIBUTED_ACK);
+    regionAttributesCreation.setDataPolicy(DataPolicy.REPLICATE);
+    regionAttributesCreation.addCacheListener(new RegionConfigurationCacheListener());
+
-      return gemFireCache.createVMRegion(REGION_CONFIGURATION_METADATA_REGION, ra, ira);
+      return gemFireCache.createVMRegion(REGION_CONFIGURATION_METADATA_REGION,
+          regionAttributesCreation, ira);
-      InternalGemFireError assErr = new InternalGemFireError(
-          "unexpected exception");
+      InternalGemFireError assErr = new InternalGemFireError("unexpected exception");
+
+
-    } catch (IOException e) {
+    } catch (IOException ignored) {
+
+
-  public void toData(DataOutput out) throws IOException {
-
-  }
+  public void toData(DataOutput out) {}
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-
-  }
+  public void fromData(DataInput in) {}
