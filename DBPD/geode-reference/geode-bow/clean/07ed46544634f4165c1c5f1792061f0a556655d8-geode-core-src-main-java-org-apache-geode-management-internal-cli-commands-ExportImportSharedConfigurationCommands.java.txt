GEODE-2197: refactor cluster config

 * not to save the xml, properties in the file system.
 * the cc region's change listener is to download the jar from other locators

-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import com.google.common.primitives.Booleans;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.management.internal.cli.result.ErrorResultData;
-
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.Set;
+
-    Result result;
-    InfoResultData infoData = ResultBuilder.createInfoResultData();
-    TabularResultData errorTable = ResultBuilder.createTabularResultData();
-    Set<DistributedMember> locators = new HashSet<DistributedMember>(
-        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
-    byte[] byteData;
-    boolean success = false;
+    Set<? extends DistributedMember> locators =
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet();
-    if (!locators.isEmpty()) {
-      for (DistributedMember locator : locators) {
-        ResultCollector<?, ?> rc =
-            CliUtil.executeFunction(exportSharedConfigurationFunction, null, locator);
-        @SuppressWarnings("unchecked")
-        List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
-        CliFunctionResult functionResult = results.get(0);
+    Optional<CliFunctionResult> functionResult = locators.stream()
+        .map((DistributedMember locator) -> exportSharedConfigurationFromLocator(locator, null))
+        .filter(CliFunctionResult::isSuccessful)
+        .findFirst();
-        if (functionResult.isSuccessful()) {
-          byteData = functionResult.getByteData();
-          infoData.addAsFile(zipFileName, byteData, InfoResultData.FILE_TYPE_BINARY,
-              CliStrings.EXPORT_SHARED_CONFIG__DOWNLOAD__MSG, false);
-          success = true;
-          break;
-        } else {
-          errorTable.accumulate(CliStrings.LOCATOR_HEADER, functionResult.getMemberIdOrName());
-          errorTable.accumulate(CliStrings.ERROR__MSG__HEADER, functionResult.getMessage());
-        }
-      }
-      if (success) {
-        result = ResultBuilder.buildResult(infoData);
-      } else {
-        errorTable.setStatus(Result.Status.ERROR);
-        result = ResultBuilder.buildResult(errorTable);
-      }
+    Result result;
+    if (functionResult.isPresent()) {
+      InfoResultData infoData = ResultBuilder.createInfoResultData();
+      byte[] byteData = functionResult.get().getByteData();
+      infoData.addAsFile(zipFileName, byteData, InfoResultData.FILE_TYPE_BINARY,
+          CliStrings.EXPORT_SHARED_CONFIG__DOWNLOAD__MSG, false);
+      result = ResultBuilder.buildResult(infoData);
-      result = ResultBuilder.createGemFireErrorResult(
-          CliStrings.SHARED_CONFIGURATION_NO_LOCATORS_WITH_SHARED_CONFIGURATION);
+      ErrorResultData errorData = ResultBuilder.createErrorResultData();
+      errorData.addLine("Export failed");
+      result = ResultBuilder.buildResult(errorData);
+
+  private CliFunctionResult exportSharedConfigurationFromLocator(DistributedMember locator, Object[] args) {
+    ResultCollector rc = CliUtil.executeFunction(exportSharedConfigurationFunction, args, locator);
+    List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
+
+    return results.get(0);
+  }
+
+
-    Set<DistributedMember> locators = new HashSet<DistributedMember>(
-        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
+    Set<? extends DistributedMember> locators =
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet();
-    InfoResultData infoData = ResultBuilder.createInfoResultData();
-    TabularResultData errorTable = ResultBuilder.createTabularResultData();
-    boolean success = false;
-    boolean copySuccess = false;
+    Optional<CliFunctionResult> functionResult = locators.stream()
+        .map((DistributedMember locator) -> importSharedConfigurationFromLocator(locator, args))
+        .filter(CliFunctionResult::isSuccessful)
+        .findFirst();
-    ResultCollector<?, ?> rc =
-        CliUtil.executeFunction(importSharedConfigurationFunction, args, locators);
-    List<CliFunctionResult> functionResults =
-        CliFunctionResult.cleanResults((List<CliFunctionResult>) rc.getResult());
-
-    for (CliFunctionResult functionResult : functionResults) {
-      if (!functionResult.isSuccessful()) {
-        errorTable.accumulate(CliStrings.LOCATOR_HEADER, functionResult.getMemberIdOrName());
-        errorTable.accumulate(CliStrings.ERROR__MSG__HEADER, functionResult.getMessage());
-      } else {
-        copySuccess = true;
-      }
-    }
-
-    if (!copySuccess) {
-      errorTable.setStatus(Result.Status.ERROR);
-      return ResultBuilder.buildResult(errorTable);
-    }
-
-    errorTable = ResultBuilder.createTabularResultData();
-
-    for (DistributedMember locator : locators) {
-      rc = CliUtil.executeFunction(loadSharedConfiguration, args, locator);
-      functionResults = (List<CliFunctionResult>) rc.getResult();
-      CliFunctionResult functionResult = functionResults.get(0);
-      if (functionResult.isSuccessful()) {
-        success = true;
-        infoData.addLine(functionResult.getMessage());
-        break;
-      } else {
-        errorTable.accumulate(CliStrings.LOCATOR_HEADER, functionResult.getMemberIdOrName());
-        errorTable.accumulate(CliStrings.ERROR__MSG__HEADER, functionResult.getMessage());
-      }
-    }
-
-    if (success) {
+    if (functionResult.isPresent()) {
+      InfoResultData infoData = ResultBuilder.createInfoResultData();
+      infoData.addLine(functionResult.get().getMessage());
-      errorTable.setStatus(Result.Status.ERROR);
-      result = ResultBuilder.buildResult(errorTable);
+      ErrorResultData errorData = ResultBuilder.createErrorResultData();
+      errorData.addLine("Import failed");
+      result = ResultBuilder.buildResult(errorData);
+
+  private CliFunctionResult importSharedConfigurationFromLocator(DistributedMember locator, Object[] args) {
+    ResultCollector rc = CliUtil.executeFunction(importSharedConfigurationFunction, args, locator);
+    List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
+
+    return results.get(0);
+  }
+
