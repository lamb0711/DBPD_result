GEODE-7803: provide undeprecated internal region create (#4722)

You can now use InternalRegionFactory to create a region configured with InternalRegionArguments. No need to use the deprecated AttributesFactory.
InternalRegionFactory used to be named RegionFactoryImpl.

-import java.io.IOException;
-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.RegionAttributes;
-import org.apache.geode.internal.cache.InternalRegionArguments;
+import org.apache.geode.internal.cache.InternalRegionFactory;
-      /*
-       * Sharing the same Internal Argument for both notification region and monitoring region
-       */
-      InternalRegionArguments internalArgs = new InternalRegionArguments();
-      internalArgs.setIsUsedForMetaRegion(true);
-
-      internalArgs.setCachePerfStatsHolder(monitoringRegionStats);
-
-      AttributesFactory<String, Object> monitorRegionAttributeFactory =
-          new AttributesFactory<>();
-      monitorRegionAttributeFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
-      monitorRegionAttributeFactory.setDataPolicy(DataPolicy.REPLICATE);
-      monitorRegionAttributeFactory.setConcurrencyChecksEnabled(false);
+      InternalRegionFactory<String, Object> monitorFactory = cache.createInternalRegionFactory();
+      monitorFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
+      monitorFactory.setDataPolicy(DataPolicy.REPLICATE);
+      monitorFactory.setConcurrencyChecksEnabled(false);
-      monitorRegionAttributeFactory.addCacheListener(localListener);
+      monitorFactory.addCacheListener(localListener);
+      monitorFactory.setIsUsedForMetaRegion(true);
+      monitorFactory.setCachePerfStatsHolder(monitoringRegionStats);
-      RegionAttributes<String, Object> monitoringRegionAttrs =
-          monitorRegionAttributeFactory.create();
-
-      AttributesFactory<NotificationKey, Notification> notificationRegionAttributeFactory =
-          new AttributesFactory<>();
-      notificationRegionAttributeFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
-      notificationRegionAttributeFactory.setDataPolicy(DataPolicy.EMPTY);
-      notificationRegionAttributeFactory.setConcurrencyChecksEnabled(false);
-
-      RegionAttributes<NotificationKey, Notification> notifRegionAttrs =
-          notificationRegionAttributeFactory.create();
+      InternalRegionFactory<NotificationKey, Notification> notificationFactory =
+          cache.createInternalRegionFactory();
+      notificationFactory.setScope(Scope.DISTRIBUTED_NO_ACK);
+      notificationFactory.setDataPolicy(DataPolicy.EMPTY);
+      notificationFactory.setConcurrencyChecksEnabled(false);
+      notificationFactory.setIsUsedForMetaRegion(true);
+      notificationFactory.setCachePerfStatsHolder(monitoringRegionStats);
-            cache.createInternalRegion(ManagementConstants.MONITORING_REGION + "_" + appender,
-                monitoringRegionAttrs, internalArgs));
-
-      } catch (TimeoutException | RegionExistsException | ClassNotFoundException | IOException e) {
+            monitorFactory.create(ManagementConstants.MONITORING_REGION + "_" + appender));
+      } catch (TimeoutException | RegionExistsException e) {
-            cache.createInternalRegion(ManagementConstants.NOTIFICATION_REGION + "_" + appender,
-                notifRegionAttrs, internalArgs));
+            notificationFactory.create(ManagementConstants.NOTIFICATION_REGION + "_" + appender));
-      } catch (TimeoutException | ClassNotFoundException | IOException | RegionExistsException e) {
+      } catch (TimeoutException | RegionExistsException e) {
