GEODE-1659: put security properties in the cluster config and applied to all the members in the cluster.

 * break down request and apply cluster configuration into individual steps so that we can apply properties before starting services, and apply cache.xml after services are started
 * added more dunit tests

+import static org.apache.geode.distributed.ConfigurationProperties.*;
+
-import static org.apache.geode.distributed.ConfigurationProperties.*;
-
-  
+
-   * Gets or creates (if not created) shared configuration lock service 
+   * Gets or creates (if not created) shared configuration lock service
-      } 
+      }
-      lockSharedConfiguration(); 
-      try {
+      lockSharedConfiguration();
+      putSecurityPropsIntoClusterConfig(configRegion);
+
+       try {
+  private void putSecurityPropsIntoClusterConfig(final Region<String, Configuration> configRegion) {
+    Properties securityProps =  cache.getDistributedSystem().getSecurityProperties();
+    Configuration clusterPropertiesConfig = configRegion.get(SharedConfiguration.CLUSTER_CONFIG);
+    if(clusterPropertiesConfig == null){
+      clusterPropertiesConfig = new Configuration(SharedConfiguration.CLUSTER_CONFIG);
+      configRegion.put(SharedConfiguration.CLUSTER_CONFIG, clusterPropertiesConfig);
+    }
+    // put security-manager and security-post-processor in the cluster config
+    Properties clusterProperties = clusterPropertiesConfig.getGemfireProperties();
+    if (securityProps.containsKey(SECURITY_MANAGER)) {
+      clusterProperties.setProperty(SECURITY_MANAGER, securityProps.getProperty(SECURITY_MANAGER));
+    }
+    if (securityProps.containsKey(SECURITY_POST_PROCESSOR)) {
+      clusterProperties.setProperty(SECURITY_POST_PROCESSOR, securityProps.getProperty(SECURITY_POST_PROCESSOR));
+    }
+  }
+
-    configResponse.setFailedToGetSharedConfig(true); 
+    configResponse.setFailedToGetSharedConfig(true);
-      } 
+      }
-      } 
+      }
-        } 
+        }
-        File [] diskDirs = {diskDir}; 
+        File [] diskDirs = {diskDir};
-   * @throws TransformerException 
-   * @throws TransformerFactoryConfigurationError 
-   * @throws ParserConfigurationException 
-   * @throws SAXException 
+   * @throws TransformerException
+   * @throws TransformerFactoryConfigurationError
+   * @throws ParserConfigurationException
+   * @throws SAXException
-   * @return {@link Map} 
-   * @throws TransformerException 
-   * @throws TransformerFactoryConfigurationError 
-   * @throws ParserConfigurationException 
-   * @throws SAXException 
+   * @return {@link Map}
+   * @throws TransformerException
+   * @throws TransformerFactoryConfigurationError
+   * @throws ParserConfigurationException
+   * @throws SAXException
-   * Removes the jar files from the given directory     
+   * Removes the jar files from the given directory
-   * Writes the 
+   * Writes the
