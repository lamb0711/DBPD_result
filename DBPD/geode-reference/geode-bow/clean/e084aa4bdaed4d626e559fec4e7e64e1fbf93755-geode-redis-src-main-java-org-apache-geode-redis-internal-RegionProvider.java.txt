GEODE-8130: use a single region for redis Sets and Hashes  (#5120)

* Replaced replicated metaRegion with a partitioned dataRegion.
Currently the dataRegion is used the same way as the metaRegion
except for sets and hashes which store their actual data in it.
* Exception handling now correctly deals with FunctionException
* Disabled a test until GEODE-8127 if fixed.
* Now uses the ByteArrayWrapper as the key on the meta region
and the locks map instead of using a String.
Since a ByteArrayWrapper is used as the key in the data region
this will end up saving memory.

* Found a problem with redis dynamic region management.
Some of the code was executing when we added a new set or hash to
the metaDataRegion. It was only ignoring STRING and HLL.
This caused some extra memory to be used for every redis set/hash.
Now the dynamic region code is only used for lists and sortedSet.

* This commit has some TODO comments of what looks like a bug in
the dynamic region code when a new server is started. It looks
like the new server will not create already existing dynamic regions.
We could test this by starting one server, create a LIST, then
start another server, and then shutdown the first server. Does
the LIST still exist? If we change them not to use dynamic regions
then this issue will go away.
-import org.apache.geode.redis.internal.executor.hash.RedisHash;
-import org.apache.geode.redis.internal.executor.set.RedisSet;
-  private final ConcurrentHashMap<ByteArrayWrapper, Region<Object, Object>> regions;
+  private final ConcurrentHashMap<ByteArrayWrapper, Region<Object, Object>> dynamicRegions;
-  private final Region<ByteArrayWrapper, RedisHash> hashRegion;
-  private final Region<ByteArrayWrapper, RedisSet> setRegion;
+  private final Region<ByteArrayWrapper, RedisData> dataRegion;
-  private final ConcurrentHashMap<String, Lock> locks;
+  private final ConcurrentHashMap<ByteArrayWrapper, Lock> dynamicRegionLocks;
-      Region<ByteArrayWrapper, RedisHash> hashRegion,
-      Region<ByteArrayWrapper, RedisSet> setRegion) {
+      Region<ByteArrayWrapper, RedisData> dataRegion) {
-        defaultShortcut, hashRegion, setRegion, GemFireCacheImpl.getInstance());
+        defaultShortcut, dataRegion, GemFireCacheImpl.getInstance());
-      Region<ByteArrayWrapper, RedisHash> hashRegion,
-      Region<ByteArrayWrapper, RedisSet> setRegion, Cache cache) {
+      Region<ByteArrayWrapper, RedisData> dataRegion, Cache cache) {
-    this.hashRegion = hashRegion;
-    this.setRegion = setRegion;
-    regions = new ConcurrentHashMap<>();
+    this.dataRegion = dataRegion;
+    dynamicRegions = new ConcurrentHashMap<>();
-    locks = new ConcurrentHashMap<>();
+    dynamicRegionLocks = new ConcurrentHashMap<>();
-    return regions.get(key);
+    return dynamicRegions.get(key);
-        return hashRegion;
-
-      case REDIS_SORTEDSET:
-        return setRegion;
+        return dataRegion;
+      case REDIS_SORTEDSET:
-    Lock lock = locks.get(key.toString());
-    boolean locked = false;
-    try {
-      if (lock != null) {
-        locked = lock.tryLock();
-      }
+    if (!typeUsesDynamicRegions(type)) {
+      return;
+    }
+    if (getRegion(key) == null) {
+      return;
+    }
+    Lock lock = dynamicRegionLocks.get(key);
+    if (lock == null) {
+      return;
+    }
+    boolean locked = lock.tryLock();
+    if (!locked) {
-      if (locked) {
-        cancelKeyExpiration(key);
-        removeRegionState(key, type);
-      }
+      return;
+    }
+    try {
+      cancelKeyExpiration(key);
+      removeRegionState(key, type);
-      if (locked) {
-        lock.unlock();
-      }
+      lock.unlock();
+  private boolean typeStoresDataInKeyRegistrar(RedisDataType type) {
+    if (type == RedisDataType.REDIS_SET) {
+      return true;
+    }
+    if (type == RedisDataType.REDIS_HASH) {
+      return true;
+    }
+    return false;
+  }
+
-    Lock lock = locks.get(key.toString());
+    Lock lock = dynamicRegionLocks.get(key);
-      if (lock != null) {// Strings/hlls will not have locks
+      if (lock != null) { // only typeUsesDynamicRegions will have a lock
-      keyRegistrar.unregister(key);
+      if (!typeStoresDataInKeyRegistrar(type)) {
+        keyRegistrar.unregister(key);
+      }
-              new RedisSetCommandsFunctionExecutor(setRegion);
+              new RedisSetCommandsFunctionExecutor(dataRegion);
-              new RedisHashCommandsFunctionExecutor(hashRegion);
+              new RedisHashCommandsFunctionExecutor(dataRegion);
-          locks.remove(key.toString());
+          dynamicRegionLocks.remove(key);
+  public boolean typeUsesDynamicRegions(RedisDataType type) {
+    return type == RedisDataType.REDIS_LIST || type == RedisDataType.REDIS_SORTEDSET;
+  }
+
-    if (type == null || type == RedisDataType.REDIS_STRING || type == RedisDataType.REDIS_HLL) {
+    if (!typeUsesDynamicRegions(type)) {
-    Region<Object, Object> r = regions.get(key);
+    Region<Object, Object> r = dynamicRegions.get(key);
-    if (!regions.containsKey(key)) {
-      String stringKey = key.toString();
-      Lock lock = locks.get(stringKey);
+    Lock lock = dynamicRegionLocks.get(key);
+    if (lock == null) {
+      Lock newLock = new ReentrantLock();
+      lock = dynamicRegionLocks.putIfAbsent(key, newLock);
-        locks.putIfAbsent(stringKey, new ReentrantLock());
-        lock = locks.get(stringKey);
+        lock = newLock;
-      boolean locked = false;
+    }
+    boolean locked = lock.tryLock();
+    // If we cannot get the lock then this remote event may have been initialized
+    // independently on this machine, so if we wait on the lock it is more than
+    // likely we will deadlock just to do the same task. This event can be ignored
+    if (locked) {
-        locked = lock.tryLock();
-        // If we cannot get the lock then this remote event may have been initialized
-        // independently on this machine, so if we wait on the lock it is more than
-        // likely we will deadlock just to do the same task. This event can be ignored
-        if (locked) {
-          r = cache.getRegion(key.toString());
-          // If r is null, this implies that we are after a create/destroy
-          // simply ignore. Calls to getRegion or getOrCreate will work correctly
-          if (r == null) {
-            return;
-          }
+        r = cache.getRegion(key.toString());
+        // If r is null, this implies that we are after a create/destroy
+        // simply ignore. Calls to getRegion or getOrCreate will work correctly
+        if (r == null) {
+          // TODO: one caller of this method only calls it if getRegion returned null. It was
+          // expecting us to create it locally. If someone else will create it locally then this
+          // method does not need to be called.
+          return;
+        }
-          if (type == RedisDataType.REDIS_LIST) {
-            doInitializeList(key, r);
-          } else if (type == RedisDataType.REDIS_SORTEDSET) {
-            try {
-              doInitializeSortedSet(key, r);
-            } catch (RegionNotFoundException | IndexInvalidException e) {
-              // ignore
-            }
+        if (type == RedisDataType.REDIS_LIST) {
+          doInitializeList(key, r);
+        } else if (type == RedisDataType.REDIS_SORTEDSET) {
+          try {
+            doInitializeSortedSet(key, r);
+          } catch (RegionNotFoundException | IndexInvalidException e) {
+            // ignore
-          regions.put(key, r);
+        dynamicRegions.put(key, r);
-        if (locked) {
-          lock.unlock();
-        }
+        lock.unlock();
-    String regionName = key.toString();
-    Region<Object, Object> r = regions.get(key);
+    Region<Object, Object> r = dynamicRegions.get(key);
-      String stringKey = key.toString();
-      Lock lock = locks.get(stringKey);
+      Lock lock = dynamicRegionLocks.get(key);
-        locks.putIfAbsent(stringKey, new ReentrantLock());
-        lock = locks.get(stringKey);
+        Lock newLock = new ReentrantLock();
+        lock = dynamicRegionLocks.putIfAbsent(key, newLock);
+        if (lock == null) {
+          lock = newLock;
+        }
+      lock.lock();
-        lock.lock();
-        r = regions.get(key);
+        r = dynamicRegions.get(key);
-              r = createRegionGlobally(regionName);
+              r = createRegionGlobally(key.toString());
-            regions.put(key, r);
+            dynamicRegions.put(key, r);
-   * SYNCHRONIZE EXTERNALLY OF this.locks.get(key.toString())!!!!!
+   * SYNCHRONIZE EXTERNALLY OF this.locks.get(key)!!!!!
-    Region<?, ?> r = regions.get(key);
+    Region<?, ?> r = dynamicRegions.get(key);
-    regions.remove(key);
+    dynamicRegions.remove(key);
-    return regions.containsKey(key);
+    return dynamicRegions.containsKey(key);
-  /**
-   * @return the hashRegion
-   */
-  public Region<ByteArrayWrapper, RedisHash> getHashRegion() {
-    return hashRegion;
-  }
-
-  /**
-   * @return the setRegion
-   */
-  public Region<ByteArrayWrapper, RedisSet> getSetRegion() {
-    return setRegion;
+  public Region<ByteArrayWrapper, RedisData> getDataRegion() {
+    return dataRegion;
-    for (Entry<ByteArrayWrapper, Region<Object, Object>> e : regions.entrySet()) {
+    for (Entry<ByteArrayWrapper, Region<Object, Object>> e : dynamicRegions.entrySet()) {
