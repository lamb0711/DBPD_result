Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The ClientHttpRequest class is an abstraction modeling an HTTP request sent by a client and serves as the envelop
- * encapsulating all the necessary information (headers, request parameters, body, etc) to send the client's request
- * using HTTP.
+ * The ClientHttpRequest class is an abstraction modeling an HTTP request sent by a client and
+ * serves as the envelop encapsulating all the necessary information (headers, request parameters,
+ * body, etc) to send the client's request using HTTP.
- * The required information for an HTTP request comes from a combination of the Link class containing the reference
- * uniquely identifying the resource or location of where the request will be sent, along with the HttpHeaders class
- * capturing the headers for the request as well as the generic container, HttpEntity to write the body of the request.
+ * The required information for an HTTP request comes from a combination of the Link class
+ * containing the reference uniquely identifying the resource or location of where the request will
+ * be sent, along with the HttpHeaders class capturing the headers for the request as well as the
+ * generic container, HttpEntity to write the body of the request.
- * org.springframework.http.client.ClientHttpRequest interface, which is often created by factory using a specific
- * HTTP client technology, like the Java HttpURLConnection or Apache's HTTP components, and so on.
+ * org.springframework.http.client.ClientHttpRequest interface, which is often created by factory
+ * using a specific HTTP client technology, like the Java HttpURLConnection or Apache's HTTP
+ * components, and so on.
+ * 
-  // the mapping of request parameter name and values encoded for HTTP and sent with/in the client's request message
-  private final MultiValueMap<String, Object> requestParameters = new LinkedMultiValueMap<String, Object>();
+  // the mapping of request parameter name and values encoded for HTTP and sent with/in the client's
+  // request message
+  private final MultiValueMap<String, Object> requestParameters =
+      new LinkedMultiValueMap<String, Object>();
-   * Constructs an instance of the ClientHttpRequest class initialized with the specified Link containing the URI
-   * and method for the client's HTTP request.
+   * Constructs an instance of the ClientHttpRequest class initialized with the specified Link
+   * containing the URI and method for the client's HTTP request.
+   * 
+   * 
+   * 
-   * Gets the HTTP method indicating the operation to perform on the resource identified in the client's HTTP request.
-   * This method converts GemFire's HttpMethod enumerated value from the Link into a corresponding Spring HttpMethod
-   * enumerated value.
+   * Gets the HTTP method indicating the operation to perform on the resource identified in the
+   * client's HTTP request. This method converts GemFire's HttpMethod enumerated value from the Link
+   * into a corresponding Spring HttpMethod enumerated value.
-   * @return a Spring HttpMethod enumerated value indicating the operation to perform on the resource identified in the
-   * client's HTTP request.
+   * 
+   * @return a Spring HttpMethod enumerated value indicating the operation to perform on the
+   *         resource identified in the client's HTTP request.
+   * 
+   * 
+   * 
+   * 
-   * @return a MultiValueMap of request parameters and values that will be sent in the client's HTTP request message.
+   * 
+   * @return a MultiValueMap of request parameters and values that will be sent in the client's HTTP
+   *         request message.
-   * Gets the path variables in the URI template.  Note, this would be better placed in the Link class, but Link cannot
-   * contain an Spring dependencies!
+   * Gets the path variables in the URI template. Note, this would be better placed in the Link
+   * class, but Link cannot contain an Spring dependencies!
+   * 
-    return Collections.unmodifiableList(new UriTemplate(UriUtils.decode(getURI().toString())).getVariableNames());
+    return Collections
+        .unmodifiableList(new UriTemplate(UriUtils.decode(getURI().toString())).getVariableNames());
-   * Gets the URI for the client's HTTP request.  The URI may actually be an encoded URI template containing
-   * path variables requiring expansion.
+   * Gets the URI for the client's HTTP request. The URI may actually be an encoded URI template
+   * containing path variables requiring expansion.
+   * 
-   * @return a URL as a URI referring to the location of the resource requested by the client via HTTP.
+   * 
+   * @return a URL as a URI referring to the location of the resource requested by the client via
+   *         HTTP.
-   * @param uriVariables a Map of URI path variables to values in order to expand the URI template into a URI.
-   * @return a URL as a URI referring to the location of the resource requested by the client via HTTP.
+   * 
+   * @param uriVariables a Map of URI path variables to values in order to expand the URI template
+   *        into a URI.
+   * @return a URL as a URI referring to the location of the resource requested by the client via
+   *         HTTP.
-    final UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUriString(UriUtils.decode(getURI().toString()));
+    final UriComponentsBuilder uriBuilder =
+        UriComponentsBuilder.fromUriString(UriUtils.decode(getURI().toString()));
-      // get query parameters to append to the URI/URL based on the request parameters that are not path variables...
-      final Map<String, List<Object>> queryParameters = CollectionUtils.removeKeys(
-        new LinkedMultiValueMap<String, Object>(getParameters()), new Filter<Map.Entry<String, List<Object>>>() {
-          @Override public boolean accept(final Map.Entry<String, List<Object>> entry) {
-            //GEODE-1469: since stepArgs has json string in there, we will need to encode it so that it won't interfere with the expand() call afterwards
-            if(entry.getKey().contains(CLIMultiStepHelper.STEP_ARGS)){
-              List<Object> stepArgsList = entry.getValue();
-              if(stepArgsList!=null){
-                String stepArgs = (String)stepArgsList.remove(0);
-                stepArgsList.add(UriUtils.encode(stepArgs));
-              }
-            }
-            return !pathVariables.contains(entry.getKey());
-          }
-      });
+      // get query parameters to append to the URI/URL based on the request parameters that are not
+      // path variables...
+      final Map<String, List<Object>> queryParameters =
+          CollectionUtils.removeKeys(new LinkedMultiValueMap<String, Object>(getParameters()),
+              new Filter<Map.Entry<String, List<Object>>>() {
+                @Override
+                public boolean accept(final Map.Entry<String, List<Object>> entry) {
+                  // GEODE-1469: since stepArgs has json string in there, we will need to encode it
+                  // so that it won't interfere with the expand() call afterwards
+                  if (entry.getKey().contains(CLIMultiStepHelper.STEP_ARGS)) {
+                    List<Object> stepArgsList = entry.getValue();
+                    if (stepArgsList != null) {
+                      String stepArgs = (String) stepArgsList.remove(0);
+                      stepArgsList.add(UriUtils.encode(stepArgs));
+                    }
+                  }
+                  return !pathVariables.contains(entry.getKey());
+                }
+              });
-        uriBuilder.queryParam(queryParameterName, getParameters().get(queryParameterName).toArray());
+        uriBuilder.queryParam(queryParameterName,
+            getParameters().get(queryParameterName).toArray());
-    return uriBuilder.build().expand(UriUtils.encode(new HashMap<String, Object>(uriVariables))).encode().toUri();
+    return uriBuilder.build().expand(UriUtils.encode(new HashMap<String, Object>(uriVariables)))
+        .encode().toUri();
-   * Gets the HTTP request entity encapsulating the headers and body of the HTTP message.  The body of the HTTP request
-   * message will consist of an URL encoded application form (a mapping of key-value pairs) for POST/PUT HTTP requests.
+   * Gets the HTTP request entity encapsulating the headers and body of the HTTP message. The body
+   * of the HTTP request message will consist of an URL encoded application form (a mapping of
+   * key-value pairs) for POST/PUT HTTP requests.
+   * 
-      }
-      else {
-        // NOTE the HTTP "Content-Type" header will be determined and set by the appropriate HttpMessageConverter
+      } else {
+        // NOTE the HTTP "Content-Type" header will be determined and set by the appropriate
+        // HttpMessageConverter
-    }
-    else {
+    } else {
-   * Tries to determine the content/media type of this HTTP request iff the HTTP "Content-Type" header was not
-   * explicitly set by the user, otherwise the user provided value is used.  If the "Content-Type" HTTP header value
-   * is null, then the content/media/payload of this HTTP request is inspected to determine the content type.
+   * Tries to determine the content/media type of this HTTP request iff the HTTP "Content-Type"
+   * header was not explicitly set by the user, otherwise the user provided value is used. If the
+   * "Content-Type" HTTP header value is null, then the content/media/payload of this HTTP request
+   * is inspected to determine the content type.
-   * The simplest evaluation sets the content type to "application/x-www-form-urlencoded" if this is a POST or PUT
-   * HTTP request, unless any request parameter value is determined to have multiple parts, the the content type will be
-   * "multipart/form-data".
+   * The simplest evaluation sets the content type to "application/x-www-form-urlencoded" if this is
+   * a POST or PUT HTTP request, unless any request parameter value is determined to have multiple
+   * parts, the the content type will be "multipart/form-data".
-   * @param defaultContentType the default content/media type to use when the content type cannot be determined from
-   * this HTTP request.
-   * @return a MediaType for the value of the HTTP Content-Type header as determined from this HTTP request.
+   * 
+   * @param defaultContentType the default content/media type to use when the content type cannot be
+   *        determined from this HTTP request.
+   * @return a MediaType for the value of the HTTP Content-Type header as determined from this HTTP
+   *         request.
-    // if the content type HTTP header was not explicitly set, try to determine the media type from the content body
+    // if the content type HTTP header was not explicitly set, try to determine the media type from
+    // the content body
-        OUT : for (final String name : getParameters().keySet()) {
+        OUT: for (final String name : getParameters().keySet()) {
-        // since this is a POST/PUT HTTP request, default the content/media type to "application/x-www-form-urlencoded"
+        // since this is a POST/PUT HTTP request, default the content/media type to
+        // "application/x-www-form-urlencoded"
-      }
-      else {
-        // NOTE the "Content-Type" HTTP header is not applicable to GET/DELETE and other methods of HTTP requests
-        // since there is typically no content (media/payload/request body/etc) to send.  Any request parameters
+      } else {
+        // NOTE the "Content-Type" HTTP header is not applicable to GET/DELETE and other methods of
+        // HTTP requests
+        // since there is typically no content (media/payload/request body/etc) to send. Any request
+        // parameters
+   * 
+   * 
-   * @return the first value in the list of values for the HTTP header, or null if the HTTP header is not set.
+   * @return the first value in the list of values for the HTTP header, or null if the HTTP header
+   *         is not set.
+   * 
-   * Sets the specified HTTP header to the given value, overriding any previously set values for the HTTP header.
+   * Sets the specified HTTP header to the given value, overriding any previously set values for the
+   * HTTP header.
+   * 
+   * 
-  public void addParameterValues(final String requestParameterName, final Object... requestParameterValues) {
+  public void addParameterValues(final String requestParameterName,
+      final Object... requestParameterValues) {
-   * Gets the first value for the specified HTTP request parameter or null if the HTTP request parameter is not set.
+   * Gets the first value for the specified HTTP request parameter or null if the HTTP request
+   * parameter is not set.
+   * 
-   * @return the first value in the list of values for the HTTP request parameter, or null if the HTTP request parameter
-   * is not set.
+   * @return the first value in the list of values for the HTTP request parameter, or null if the
+   *         HTTP request parameter is not set.
-   * Gets all values for the specified HTTP request parameter or an empty List if the HTTP request parameter is not set.
+   * Gets all values for the specified HTTP request parameter or an empty List if the HTTP request
+   * parameter is not set.
+   * 
-   * Sets the specified HTTP request parameter to the given value, overriding any previously set values for
-   * the HTTP request parameter.
+   * Sets the specified HTTP request parameter to the given value, overriding any previously set
+   * values for the HTTP request parameter.
+   * 
