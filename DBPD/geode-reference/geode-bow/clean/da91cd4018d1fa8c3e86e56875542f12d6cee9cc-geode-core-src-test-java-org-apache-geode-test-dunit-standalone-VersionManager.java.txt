GEODE-2433 Backwards compatibility tests are not actually running

Modified to look for the file on the class-path instead of poking
around in the file system, and to cause tests expecting to use
the old versions to fail if the file cannot be found.

-import org.apache.geode.test.dunit.VM;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
+import java.net.URL;
+  protected String loadFailure = "";
+
-    instance.findVersions();
+    final String fileName = "geodeOldVersionClasspaths.txt";
+    instance.findVersions(fileName);
+   * for unit testing, this creates a VersionManager with paths loaded from the given file, which
+   * may or may not exist. The instance is not retained
+   */
+  protected static VersionManager getInstance(String classpathsFileName) {
+    VersionManager result = new VersionManager();
+    result.findVersions(classpathsFileName);
+    return result;
+  }
+
+  /**
-  private String oldestVersion;
-
+    checkForLoadFailure();
+    checkForLoadFailure();
-  /**
-   * returns the oldest version defined in the geodeOldVersionClasspaths.txt file
-   */
-  public String getOldestVersion() {
-    return oldestVersion;
+
+  private void checkForLoadFailure() {
+    if (loadFailure.length() > 0) {
+      throw new InternalError(loadFailure);
+    }
-  private void findVersions() {
+  private void findVersions(String fileName) {
-    File propFile = new File(
-        "../../../geode-old-versions/build/generated-resources/main/geodeOldVersionClasspaths.txt");
-    if (!propFile.exists()) {
-      // running under an IDE
-      propFile = new File(
-          "../geode-old-versions/build/generated-resources/main/geodeOldVersionClasspaths.txt");
-    }
-    String oldver = "ZZZ";
-    if (propFile.exists()) {
-      System.out.println("found geodeOldVersionClasspaths.txt - loading properties");
-      Properties dunitProperties = loadProperties(propFile);
-      for (Map.Entry<Object, Object> entry : dunitProperties.entrySet()) {
-        String version = (String) entry.getKey();
-        if (version.startsWith("test") && version.length() >= "test".length()) {
-          if (version.equals("test")) {
-            version = CURRENT_VERSION;
-          } else {
-            version = version.substring("test".length());
-            if (version.compareTo(oldver) < 0) {
-              oldver = version;
-            }
-          }
-          classPaths.put(version, (String) entry.getValue());
-          testVersions.add(version);
-        }
-      }
-      if (oldver.equals("ZZZ")) {
-        oldestVersion = CURRENT_VERSION;
-      } else {
-        oldestVersion = oldver;
-      }
-    } else {
-      System.out.println(
-          "WARNING: could not find geodeTestClasspaths.txt - tests will use current version");
-    }
-  }
-
-  /**
-   * Loads properties from a file, returning a Map object. Note: this method cannot use
-   * Properties.load() because that method interprets back-slashes as escape characters, causing
-   * class-paths on Windows machines to be garbled.
-   */
-  private Properties loadProperties(File propFile) {
-    try (FileReader reader = new FileReader(propFile)) {
-      props.load(reader);
+    URL url = VersionManager.class.getResource("/" + fileName);
+    if (url == null) {
+      loadFailure = "VersionManager: unable to locate " + fileName + " in class-path";
+      return;
+    }
+    try (InputStream in = VersionManager.class.getResource("/" + fileName).openStream()) {
+      props.load(in);
-      throw new RuntimeException(e);
+      loadFailure = "VersionManager: unable to read resource " + fileName;
+      return;
-    return props;
+    for (Map.Entry<Object, Object> entry : props.entrySet()) {
+      String version = (String) entry.getKey();
+      if (version.startsWith("test") && version.length() >= "test".length()) {
+        if (version.equals("test")) {
+          version = CURRENT_VERSION;
+        } else {
+          version = version.substring("test".length());
+        }
+        classPaths.put(version, (String) entry.getValue());
+        testVersions.add(version);
+      }
+    }
-
-
-
