Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.Flushable;
+import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.ValueWrapper;
-class OverflowOplog implements CompactableOplog {
+class OverflowOplog implements CompactableOplog, Flushable {
+  private final ByteBuffer[] bbArray = new ByteBuffer[2];
+    this.bbArray[0] = this.crf.writeBuf;
+      this.bbArray[0] = null;
-                           byte[] value,
-                           int valueLength,
+                           ValueWrapper value,
-    this.opState.initialize(entry, value, valueLength, userBits);
+    this.opState.initialize(entry, value, userBits);
-  private byte calcUserBits(byte[] value,
-                            boolean isSerializedObject) {
-    byte userBits = 0x0;
-  
-    if (isSerializedObject) {
-      if (value == DiskEntry.INVALID_BYTES) {
-        // its the invalid token
-        userBits = EntryBits.setInvalid(userBits, true);
-      } else if (value == DiskEntry.LOCAL_INVALID_BYTES) {
-        // its the local-invalid token
-        userBits = EntryBits.setLocalInvalid(userBits, true);
-      } else if (value == DiskEntry.TOMBSTONE_BYTES) {
-        // its the tombstone token
-        userBits = EntryBits.setTombstone(userBits, true);
-      } else {
-        userBits = EntryBits.setSerialized(userBits, true);
-      }
-    }
-    return userBits;
+  private byte calcUserBits(ValueWrapper value) {
+    return value.getUserBits();
-   * 
-   * 
-   * @param isSerializedObject
-   *          Do the bytes in <code>value</code> contain a serialized object
-   *          (or an actually <code>byte</code> array)?
+   * 
-  public final boolean modify(DiskRegion dr, DiskEntry entry, byte[] value,
-                              boolean isSerializedObject, boolean async)
+  public final boolean modify(DiskRegion dr, DiskEntry entry, ValueWrapper value,
+                              boolean async)
-      byte userBits = calcUserBits(value, isSerializedObject);
-      return basicModify(entry, value, value.length, userBits, async);
+      byte userBits = calcUserBits(value);
+      return basicModify(entry, value, userBits, async);
+  
-      return basicModify(entry, value, length, userBits, true);
+      ValueWrapper vw = new DiskEntry.Helper.CompactorValueWrapper(value, length);
+      return basicModify(entry, vw, userBits, true);
-                              byte[] value,
-                              int valueLength,
+                              ValueWrapper value,
-      initOpState(entry, value, valueLength, userBits);
+      initOpState(entry, value, userBits);
-            id.setValueLength(valueLength);
+            id.setValueLength(value.getLength());
-  private final void flush() throws IOException {
+  @Override
+  public final void flush() throws IOException {
+  @Override
+  public final void flush(ByteBuffer b1, ByteBuffer b2) throws IOException {
+    final OplogFile olf = this.crf;
+    synchronized (olf) {
+      if (olf.RAFClosed) {
+        return;
+      }
+      try {
+        assert b1 == olf.writeBuf;
+        b1.flip();
+        this.bbArray[1] = b2;
+        long flushed = olf.channel.write(this.bbArray);
+        this.bbArray[1] = null;
+        // update bytesFlushed after entire writeBuffer is flushed to fix bug 41201
+        olf.bytesFlushed += flushed;
+        b1.clear();
+      } catch (ClosedChannelException ignore) {
+        // It is possible for a channel to be closed when our code does not
+        // explicitly call channel.close (when we will set RAFclosed).
+        // This can happen when a thread is doing an io op and is interrupted.
+        // That thread will see ClosedByInterruptException but it will also
+        // close the channel and then we will see ClosedChannelException.
+      }
+    }
+  }
+  
-    private byte[] value;
-    private int valueLength;
+    private ValueWrapper value;
-    private final void write(byte[] bytes, int byteLength) throws IOException {
-      int offset = 0;
-      final int maxOffset = byteLength;
-      ByteBuffer bb = getOLF().writeBuf;
-      while (offset < maxOffset) {
-        
-        int bytesThisTime = maxOffset - offset;
-        boolean needsFlush = false;
-        if (bytesThisTime > bb.remaining()) {
-          needsFlush = true;
-          bytesThisTime = bb.remaining();
-        }
-        bb.put(bytes, offset, bytesThisTime);
-        offset += bytesThisTime;
-        if (needsFlush) {
-          flush();
-        }
-      }
+    private final void write(ValueWrapper vw) throws IOException {
+      vw.sendTo(getOLF().writeBuf, OverflowOplog.this);
+    
-                           byte[] value,
-                           int valueLength,
+                           ValueWrapper value,
-      this.valueLength = valueLength;
-        this.size += this.valueLength;
+        this.size += this.value.getLength();
-      if (this.needsValue && this.valueLength > 0) {
-        write(this.value, this.valueLength);
-        bytesWritten += this.valueLength;
+      if (this.needsValue) {
+        int valueLength = this.value.getLength();
+        if (valueLength > 0) {
+          write(this.value);
+          bytesWritten += valueLength;
+        }
+      // TODO OFFHEAP: optimize BytesAndBitsForCompactor to be able to have off-heap value reference instead of copying
