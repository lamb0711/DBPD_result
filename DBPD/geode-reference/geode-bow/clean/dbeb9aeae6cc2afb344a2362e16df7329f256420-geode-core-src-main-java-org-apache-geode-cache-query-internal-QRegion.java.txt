Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    if (region == null) throw new IllegalArgumentException(LocalizedStrings.QRegion_REGION_CAN_NOT_BE_NULL.toLocalizedString());
+    if (region == null)
+      throw new IllegalArgumentException(
+          LocalizedStrings.QRegion_REGION_CAN_NOT_BE_NULL.toLocalizedString());
-    if (constraint == null) constraint = Object.class;
+    if (constraint == null)
+      constraint = Object.class;
-      res = new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint), this.region.entrySet());
+      res =
+          new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint), this.region.entrySet());
-    
-    if (region == null) throw new IllegalArgumentException(LocalizedStrings.QRegion_REGION_CAN_NOT_BE_NULL.toLocalizedString());
-    
+
+    if (region == null)
+      throw new IllegalArgumentException(
+          LocalizedStrings.QRegion_REGION_CAN_NOT_BE_NULL.toLocalizedString());
+
-    if (constraint == null) constraint = Object.class;
-    
+    if (constraint == null)
+      constraint = Object.class;
+
-      LocalDataSet localData = new LocalDataSet(((PartitionedRegion)region), new HashSet(context.getBucketList()));
+      LocalDataSet localData =
+          new LocalDataSet(((PartitionedRegion) region), new HashSet(context.getBucketList()));
-        res = new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint), localData.localEntrySet());
+        res = new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint),
+            localData.localEntrySet());
-        res = new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint), localData.localValues());
+        res = new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint),
+            localData.localValues());
-  
+
-  
-  public void setKeepSerialized(boolean keepSerialized){
-    ((ResultsCollectionWrapper)(this.values)).setKeepSerialized(keepSerialized);
+
+  public void setKeepSerialized(boolean keepSerialized) {
+    ((ResultsCollectionWrapper) (this.values)).setKeepSerialized(keepSerialized);
-  
+
-   * Returns unmodifiable SelectResults for keys. When the "keys" attribute is
-   * accessed, this is the preferred method that will be executed.
+   * Returns unmodifiable SelectResults for keys. When the "keys" attribute is accessed, this is the
+   * preferred method that will be executed.
-      LocalDataSet localData = (LocalDataSet)this.region;
+      LocalDataSet localData = (LocalDataSet) this.region;
-   * Accessing the values is the same as accessing this. Must return Collection
-   * to satisfy Region interface
+   * Accessing the values is the same as accessing this. Must return Collection to satisfy Region
+   * interface
-   * getValues is the same as values except returns a SelectResults. This
-   * method is invoked when access the "values" attribute in a query.
+   * getValues is the same as values except returns a SelectResults. This method is invoked when
+   * access the "values" attribute in a query.
-   * Returns the entries as an unmodifiable SelectResults. This is the
-   * preferred method that is invoked when accessing the attribute "entries".
+   * Returns the entries as an unmodifiable SelectResults. This is the preferred method that is
+   * invoked when accessing the attribute "entries".
-      LocalDataSet localData = (LocalDataSet)this.region;
-      res = new ResultsCollectionWrapper(TypeUtils.getRegionEntryType(this.region), 
+      LocalDataSet localData = (LocalDataSet) this.region;
+      res = new ResultsCollectionWrapper(TypeUtils.getRegionEntryType(this.region),
-      res = new ResultsCollectionWrapper(TypeUtils.getRegionEntryType(this.region), 
+      res = new ResultsCollectionWrapper(TypeUtils.getRegionEntryType(this.region),
-   * Getter for property modifiable. Since a QRegion as a collection represents
-   * an unmodifiable facade on the values of this region, return false.
+   * Getter for property modifiable. Since a QRegion as a collection represents an unmodifiable
+   * facade on the values of this region, return false.
-    for (Iterator itr = this.values.iterator(); itr.hasNext(); ) {
+    for (Iterator itr = this.values.iterator(); itr.hasNext();) {
-  
+
-    throw new UnsupportedOperationException(LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.QRegion_REGION_VALUES_IS_NOT_MODIFIABLE.toLocalizedString());
-  public void create(Object key, Object value) throws TimeoutException, EntryExistsException, CacheWriterException 
-  {
+  public void create(Object key, Object value)
+      throws TimeoutException, EntryExistsException, CacheWriterException {
-  public void create(Object key, Object value, Object aCacheWriterParam) throws TimeoutException, EntryExistsException,
-      CacheWriterException {
+  public void create(Object key, Object value, Object aCacheWriterParam)
+      throws TimeoutException, EntryExistsException, CacheWriterException {
-  public Region createSubregion(String subregionName, RegionAttributes aRegionAttributes) throws RegionExistsException,
-      TimeoutException {
+  public Region createSubregion(String subregionName, RegionAttributes aRegionAttributes)
+      throws RegionExistsException, TimeoutException {
-  public void destroy(Object key) throws TimeoutException, EntryNotFoundException, CacheWriterException {
+  public void destroy(Object key)
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
-  public void destroy(Object key, Object aCacheWriterParam) throws TimeoutException, EntryNotFoundException,
-      CacheWriterException {
+  public void destroy(Object key, Object aCacheWriterParam)
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
-  public void destroyRegion(Object aCallbackArgument) throws CacheWriterException, TimeoutException {
+  public void destroyRegion(Object aCallbackArgument)
+      throws CacheWriterException, TimeoutException {
-  public boolean existsValue(String queryPredicate) throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
+  public boolean existsValue(String queryPredicate) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-  public Object get(Object key, Object aCallbackArgument) throws TimeoutException, CacheLoaderException {
+  public Object get(Object key, Object aCallbackArgument)
+      throws TimeoutException, CacheLoaderException {
-  public void invalidate(Object key, Object aCallbackArgument) throws TimeoutException, EntryNotFoundException {
+  public void invalidate(Object key, Object aCallbackArgument)
+      throws TimeoutException, EntryNotFoundException {
-  public void put(Object key, Object value, Object aCallbackArgument) throws TimeoutException, CacheWriterException 
-  {
+  public void put(Object key, Object value, Object aCallbackArgument)
+      throws TimeoutException, CacheWriterException {
-  public SelectResults query(String predicate) throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
+  public SelectResults query(String predicate) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-   //return this.region.subregions(recursive);
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    // return this.region.subregions(recursive);
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void loadSnapshot(InputStream inputStream) throws IOException, ClassNotFoundException, CacheWriterException,
-      TimeoutException {
+  public void loadSnapshot(InputStream inputStream)
+      throws IOException, ClassNotFoundException, CacheWriterException, TimeoutException {
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterest(Object key, InterestResultPolicy policy) throws CacheWriterException {
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  public void registerInterest(Object key, InterestResultPolicy policy)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-  public void registerInterestRegex(String regex, InterestResultPolicy policy) throws CacheWriterException {
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+  public void registerInterestRegex(String regex, InterestResultPolicy policy)
+      throws CacheWriterException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.UNSUPPORTED_AT_THIS_TIME.toLocalizedString());
-    return this.region.containsValue(arg0);  
+    return this.region.containsValue(arg0);
-   this.region.putAll(arg0);
-    
+    this.region.putAll(arg0);
+
-    ResultsCollectionWrapper res = new ResultsCollectionWrapper(new ObjectTypeImpl(Map.Entry.class), this.region
-        .entries(false));
+    ResultsCollectionWrapper res = new ResultsCollectionWrapper(new ObjectTypeImpl(Map.Entry.class),
+        this.region.entries(false));
-    return res; 
+    return res;
- 
+
