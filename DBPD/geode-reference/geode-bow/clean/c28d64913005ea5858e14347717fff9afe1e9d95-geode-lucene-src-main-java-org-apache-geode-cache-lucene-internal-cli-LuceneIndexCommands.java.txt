Merge branch 'release/1.4.0'

-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.execute.FunctionInvocationTargetException;
-import org.apache.geode.management.internal.cli.LogWrapper;
+import org.apache.geode.management.internal.cli.exceptions.UserErrorException;
-import org.apache.geode.security.GemFireSecurityException;
-
-    try {
-      return toTabularResult(getIndexListing(), stats);
-    } catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_LIST_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      getCache().getLogger().info(t);
-      return ResultBuilder.createGemFireErrorResult(String
-          .format(LuceneCliStrings.LUCENE_LIST_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    }
+    return toTabularResult(getIndexListing(), stats);
-    final Execution functionExecutor = getMembersFunctionExecutor(getMembers(getCache()));
+    final Execution functionExecutor = getMembersFunctionExecutor(getAllMembers(getCache()));
+        indexData.accumulate("Serializer", indexDetails.getSerializerString());
-          help = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER_HELP) final String[] analyzers) {
+          help = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER_HELP) final String[] analyzers,
+      @CliOption(key = LuceneCliStrings.LUCENE_CREATE_INDEX__SERIALIZER,
+          help = LuceneCliStrings.LUCENE_CREATE_INDEX__SERIALIZER_HELP) final String serializer)
+      throws CommandResultException {
-    try {
-      final InternalCache cache = getCache();
+    final InternalCache cache = getCache();
-      // trim fields for any leading trailing spaces.
-      String[] trimmedFields = Arrays.stream(fields).map(String::trim).toArray(String[]::new);
-      LuceneIndexInfo indexInfo =
-          new LuceneIndexInfo(indexName, regionPath, trimmedFields, analyzers);
+    // trim fields for any leading trailing spaces.
+    String[] trimmedFields = Arrays.stream(fields).map(String::trim).toArray(String[]::new);
+    LuceneIndexInfo indexInfo =
+        new LuceneIndexInfo(indexName, regionPath, trimmedFields, analyzers, serializer);
-      final ResultCollector<?, ?> rc =
-          this.executeFunctionOnAllMembers(createIndexFunction, indexInfo);
-      final List<CliFunctionResult> funcResults = (List<CliFunctionResult>) rc.getResult();
+    final ResultCollector<?, ?> rc =
+        this.executeFunctionOnAllMembers(createIndexFunction, indexInfo);
+    final List<CliFunctionResult> funcResults = (List<CliFunctionResult>) rc.getResult();
-      final TabularResultData tabularResult = ResultBuilder.createTabularResultData();
-      for (final CliFunctionResult cliFunctionResult : funcResults) {
-        tabularResult.accumulate("Member", cliFunctionResult.getMemberIdOrName());
+    final TabularResultData tabularResult = ResultBuilder.createTabularResultData();
+    for (final CliFunctionResult cliFunctionResult : funcResults) {
+      tabularResult.accumulate("Member", cliFunctionResult.getMemberIdOrName());
-        if (cliFunctionResult.isSuccessful()) {
-          tabularResult.accumulate("Status", "Successfully created lucene index");
-          // if (xmlEntity == null) {
-          // xmlEntity = cliFunctionResult.getXmlEntity();
-          // }
-        } else {
-          tabularResult.accumulate("Status", "Failed: " + cliFunctionResult.getMessage());
-        }
+      if (cliFunctionResult.isSuccessful()) {
+        tabularResult.accumulate("Status", "Successfully created lucene index");
+        // if (xmlEntity == null) {
+        // xmlEntity = cliFunctionResult.getXmlEntity();
+        // }
+      } else {
+        tabularResult.accumulate("Status", "Failed: " + cliFunctionResult.getMessage());
-      result = ResultBuilder.buildResult(tabularResult);
-    } catch (IllegalArgumentException iae) {
-      LogWrapper.getInstance().info(iae.getMessage());
-      result = ResultBuilder.createUserErrorResult(iae.getMessage());
-    } catch (CommandResultException crex) {
-      result = crex.getResult();
-    } catch (Exception e) {
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
-    // TODO - store in cluster config
-    // if (xmlEntity != null) {
-    // result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity,
-    // groups));
-    // }
+
+    result = ResultBuilder.buildResult(tabularResult);
-          help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__REGION_HELP) final String regionPath) {
+          help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__REGION_HELP) final String regionPath)
+      throws Exception {
-
-    try {
-      LuceneIndexInfo indexInfo = new LuceneIndexInfo(indexName, regionPath);
-      return toTabularResult(getIndexDetails(indexInfo), true);
-    } catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_DESCRIBE_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createInfoResult(e.getMessage());
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      getCache().getLogger().info(t);
-      return ResultBuilder.createGemFireErrorResult(String.format(
-          LuceneCliStrings.LUCENE_DESCRIBE_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    }
+    LuceneIndexInfo indexInfo = new LuceneIndexInfo(indexName, regionPath);
+    return toTabularResult(getIndexDetails(indexInfo), true);
-          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly) {
-
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly)
+      throws Exception {
+    LuceneQueryInfo queryInfo =
+        new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
+    int pageSize = Integer.MAX_VALUE;
+    searchResults = getSearchResults(queryInfo);
+    return displayResults(pageSize, keysOnly);
-    try {
-      LuceneQueryInfo queryInfo =
-          new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
-      int pageSize = Integer.MAX_VALUE;
-      searchResults = getSearchResults(queryInfo);
-      return displayResults(pageSize, keysOnly);
-    } catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_SEARCH_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createInfoResult(e.getMessage());
-    } catch (GemFireSecurityException e) {
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      getCache().getLogger().info(t);
-      return ResultBuilder.createGemFireErrorResult(String
-          .format(LuceneCliStrings.LUCENE_SEARCH_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    }
-    if (StringUtils.isBlank(regionPath) || regionPath.equals(Region.SEPARATOR)) {
-      return ResultBuilder.createInfoResult(
-          CliStrings.format(LuceneCliStrings.LUCENE_DESTROY_INDEX__MSG__REGION_CANNOT_BE_EMPTY));
-    }
-
-
-    try {
-      List<CliFunctionResult> accumulatedResults = new ArrayList<>();
-      final XmlEntity xmlEntity =
-          executeDestroyIndexFunction(accumulatedResults, indexName, regionPath);
-      result = getDestroyIndexResult(accumulatedResults, indexName, regionPath);
-      if (xmlEntity != null) {
-        persistClusterConfiguration(result, () -> {
-          // Delete the xml entity to remove the index(es) in all groups
-          getSharedConfiguration().deleteXmlEntity(xmlEntity, null);
-        });
-      }
-    } catch (FunctionInvocationTargetException ignore) {
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_DESTROY_INDEX));
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (IllegalArgumentException e) {
-      result = ResultBuilder.createInfoResult(e.getMessage());
-    } catch (Throwable t) {
-      t.printStackTrace();
-      SystemFailure.checkFailure();
-      getCache().getLogger().warning(LuceneCliStrings.LUCENE_DESTROY_INDEX__EXCEPTION_MESSAGE, t);
-      result = ResultBuilder.createGemFireErrorResult(t.getMessage());
+    List<CliFunctionResult> accumulatedResults = new ArrayList<>();
+    final XmlEntity xmlEntity =
+        executeDestroyIndexFunction(accumulatedResults, indexName, regionPath);
+    result = getDestroyIndexResult(accumulatedResults, indexName, regionPath);
+    if (xmlEntity != null) {
+      persistClusterConfiguration(result, () -> {
+        // Delete the xml entity to remove the index(es) in all groups
+        getSharedConfiguration().deleteXmlEntity(xmlEntity, null);
+      });
+
-    Set<DistributedMember> regionMembers = getRegionMembers(cache, regionPath);
-    Set<DistributedMember> normalMembers = getNormalMembers(cache);
+    Set<DistributedMember> regionMembers = findMembersForRegion(cache, regionPath);
+    Set<DistributedMember> normalMembers = getAllNormalMembers(cache);
-  protected Set<DistributedMember> getRegionMembers(InternalCache cache, String regionPath) {
-    return CliUtil.getMembersForeRegionViaFunction(cache, regionPath, true);
-  }
-
-  protected Set<DistributedMember> getNormalMembers(InternalCache cache) {
-    return CliUtil.getAllNormalMembers(cache);
-  }
-
-        throw new Exception(searchResults.get(i).getExceptionMessage());
+        throw new UserErrorException(searchResults.get(i).getExceptionMessage());
-    Set<DistributedMember> targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(),
-        functionArguments.getRegionPath(), returnAllMembers);
+    Set<DistributedMember> targetMembers = CliUtil.getRegionAssociatedMembers(
+        functionArguments.getRegionPath(), getCache(), returnAllMembers);
-      throw new IllegalArgumentException(CliStrings.format(
+      throw new UserErrorException(CliStrings.format(
-  protected ResultCollector<?, ?> executeFunction(Function function,
-      LuceneFunctionSerializable functionArguments, Set<DistributedMember> targetMembers) {
-    return CliUtil.executeFunction(function, functionArguments, targetMembers);
-  }
-
