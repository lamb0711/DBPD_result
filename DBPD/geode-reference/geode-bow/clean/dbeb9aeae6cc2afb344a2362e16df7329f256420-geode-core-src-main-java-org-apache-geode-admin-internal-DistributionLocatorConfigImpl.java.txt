Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.GemFireConfigException;
- * Provides an implementation of
- * <code>DistributionLocatorConfig</code>.
+ * Provides an implementation of <code>DistributionLocatorConfig</code>.
-public class DistributionLocatorConfigImpl 
-  extends ManagedEntityConfigImpl 
-  implements DistributionLocatorConfig {
+public class DistributionLocatorConfigImpl extends ManagedEntityConfigImpl
+    implements DistributionLocatorConfig {
-  
-  //////////////////////  Instance Fields  //////////////////////
+
+  ////////////////////// Instance Fields //////////////////////
-  
-  /** The properties used to configure the DistributionLocator's
-      DistributedSystem */
+
+  /**
+   * The properties used to configure the DistributionLocator's DistributedSystem
+   */
-  //////////////////////  Static Methods  //////////////////////
+  ////////////////////// Static Methods //////////////////////
-   * Contacts a distribution locator on the given host and port and
-   * creates a <code>DistributionLocatorConfig</code> for it.
+   * Contacts a distribution locator on the given host and port and creates a
+   * <code>DistributionLocatorConfig</code> for it.
-  static DistributionLocatorConfig
-    createConfigFor(String host, int port, InetAddress bindAddress) {
-    TcpClient client = new TcpClient();
-    String[] info = null;
-    if (bindAddress != null) {
-      info = client.getInfo(bindAddress, port);
-    }
-    else {
-      info = client.getInfo(InetAddressUtil.toInetAddress(host), port);
-    }
-    if (info == null) {
-      return null;
+  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {
+    String[] info = new String[] {"unknown", "unknown"};
+
+    try {
+      TcpClient client = new TcpClient();
+      if (bindAddress != null) {
+        info = client.getInfo(bindAddress, port);
+      } else {
+        info = client.getInfo(InetAddressUtil.toInetAddress(host), port);
+      }
+      if (info == null) {
+        return null;
+      }
+    } catch (GemFireConfigException e) {
+      // communications are not initialized at this point
-    DistributionLocatorConfigImpl config =
-      new DistributionLocatorConfigImpl();
+    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-   * Creates a new <code>DistributionLocatorConfigImpl</code> with the
-   * default settings.
+   * Creates a new <code>DistributionLocatorConfigImpl</code> with the default settings.
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
-   * Sets the locator that was configured with this
-   * <Code>DistributionLocatorConfigImpl</code>. 
+   * Sets the locator that was configured with this <Code>DistributionLocatorConfigImpl</code>.
-  
+
-  
+
-      throw new IllegalArgumentException(LocalizedStrings.DistributionLocatorConfigImpl_PORT_0_MUST_BE_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {Integer.valueOf(port), Integer.valueOf(MIN_PORT), Integer.valueOf(MAX_PORT)}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DistributionLocatorConfigImpl_PORT_0_MUST_BE_AN_INTEGER_BETWEEN_1_AND_2
+              .toLocalizedString(new Object[] {Integer.valueOf(port), Integer.valueOf(MIN_PORT),
+                  Integer.valueOf(MAX_PORT)}));
-    if (this.bindAddress != null &&
-        InetAddressUtil.validateHost(this.bindAddress) == null) {
-      throw new IllegalArgumentException(LocalizedStrings.DistributionLocatorConfigImpl_INVALID_HOST_0.toLocalizedString(this.bindAddress));
+    if (this.bindAddress != null && InetAddressUtil.validateHost(this.bindAddress) == null) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.DistributionLocatorConfigImpl_INVALID_HOST_0
+              .toLocalizedString(this.bindAddress));
-    DistributionLocatorConfigImpl clone =
-      (DistributionLocatorConfigImpl) super.clone();
+    DistributionLocatorConfigImpl clone = (DistributionLocatorConfigImpl) super.clone();
