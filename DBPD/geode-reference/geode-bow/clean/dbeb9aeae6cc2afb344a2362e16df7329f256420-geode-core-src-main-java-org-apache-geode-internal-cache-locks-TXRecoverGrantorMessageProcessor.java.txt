Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.util.concurrent.RejectedExecutionException;
-
-import org.apache.logging.log4j.Logger;
-
+import org.apache.logging.log4j.Logger;
+
+import java.util.concurrent.RejectedExecutionException;
- * Provides processing of DLockRecoverGrantorProcessor. Reply will not be
- * sent until all locks are released.
- *
+ * Provides processing of DLockRecoverGrantorProcessor. Reply will not be sent until all locks are
+ * released.
-implements DLockRecoverGrantorProcessor.MessageProcessor {
-  
+    implements DLockRecoverGrantorProcessor.MessageProcessor {
+
-  
-  public void process(final DM dm, 
-                      final DLockRecoverGrantorProcessor.DLockRecoverGrantorMessage msg) {
+
+  public void process(final DM dm,
+      final DLockRecoverGrantorProcessor.DLockRecoverGrantorMessage msg) {
-    }
-    catch (RejectedExecutionException e) {
+    } catch (RejectedExecutionException e) {
-  protected void processDLockRecoverGrantorMessage(
-      final DM dm, 
+  protected void processDLockRecoverGrantorMessage(final DM dm,
-        
+
-      Assert.assertTrue(
-        msg.getServiceName().startsWith(DLockService.DTLS),
-        "TXRecoverGrantorMessageProcessor cannot handle service " + msg.getServiceName());
-      
+      Assert.assertTrue(msg.getServiceName().startsWith(DLockService.DTLS),
+          "TXRecoverGrantorMessageProcessor cannot handle service " + msg.getServiceName());
+
-      DLockService svc =
-        DLockService.getInternalServiceNamed(msg.getServiceName());
-      
+      DLockService svc = DLockService.getInternalServiceNamed(msg.getServiceName());
+
-        dtls = (TXLockServiceImpl)TXLockService.getDTLS();
-        if (dtls != null) { 
+        dtls = (TXLockServiceImpl) TXLockService.getDTLS();
+        if (dtls != null) {
-    }
-    catch (InterruptedException t) {
+    } catch (InterruptedException t) {
-      logger.warn(LocalizedMessage.create(LocalizedStrings.TXRecoverGrantorMessageProcessor_TXRECOVERGRANTORMESSAGEPROCESSORPROCESS_THROWABLE), t);
+      logger.warn(
+          LocalizedMessage.create(
+              LocalizedStrings.TXRecoverGrantorMessageProcessor_TXRECOVERGRANTORMESSAGEPROCESSORPROCESS_THROWABLE),
+          t);
-    }
-    catch (RuntimeException t) {
-      logger.warn(LocalizedMessage.create(LocalizedStrings.TXRecoverGrantorMessageProcessor_TXRECOVERGRANTORMESSAGEPROCESSORPROCESS_THROWABLE), t);
+    } catch (RuntimeException t) {
+      logger.warn(
+          LocalizedMessage.create(
+              LocalizedStrings.TXRecoverGrantorMessageProcessor_TXRECOVERGRANTORMESSAGEPROCESSORPROCESS_THROWABLE),
+          t);
-      }
-      else {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.TXRecoverGrantorMessageProcessor_MORE_THAN_ONE_EXCEPTION_THROWN_IN__0, this), t);
+      } else {
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.TXRecoverGrantorMessageProcessor_MORE_THAN_ONE_EXCEPTION_THROWN_IN__0,
+            this), t);
-//    catch (VirtualMachineError err) {
-//      SystemFailure.initiateFailure(err);
-//      // If this ever returns, rethrow the error.  We're poisoned
-//      // now, so don't let this thread continue.
-//      throw err;
-//    }
-//    catch (Throwable t) {
-//      // Whenever you catch Error or Throwable, you must also
-//      // catch VirtualMachineError (see above).  However, there is
-//      // _still_ a possibility that you are dealing with a cascading
-//      // error condition, so you also need to check to see if the JVM
-//      // is still usable:
-//      SystemFailure.checkFailure();
-//      if (replyException == null) {
-//        replyException = new ReplyException(t);
-//      }
-//    }
+    // catch (VirtualMachineError err) {
+    // SystemFailure.initiateFailure(err);
+    // // If this ever returns, rethrow the error. We're poisoned
+    // // now, so don't let this thread continue.
+    // throw err;
+    // }
+    // catch (Throwable t) {
+    // // Whenever you catch Error or Throwable, you must also
+    // // catch VirtualMachineError (see above). However, there is
+    // // _still_ a possibility that you are dealing with a cascading
+    // // error condition, so you also need to check to see if the JVM
+    // // is still usable:
+    // SystemFailure.checkFailure();
+    // if (replyException == null) {
+    // replyException = new ReplyException(t);
+    // }
+    // }
-      DLockRecoverGrantorProcessor.DLockRecoverGrantorReplyMessage replyMsg = 
+      DLockRecoverGrantorProcessor.DLockRecoverGrantorReplyMessage replyMsg =
-        replyMsg.dmProcess((DistributionManager)dm);
-      }
-      else {
+        replyMsg.dmProcess((DistributionManager) dm);
+      } else {
-  
+
