Merge branch 'feature/GEODE-77' into develop

Conflicts:
	gemfire-core/src/test/java/com/gemstone/gemfire/cache/management/MemoryThresholdsOffHeapDUnitTest.java

-import com.gemstone.gemfire.i18n.LogWriterI18n;
-  private final static int ucastWriteTimeId;
-  private final static int mcastWriteTimeId;
-  private final static int ucastFlushesId;
-  private final static int ucastFlushTimeId;
-
-  private final static int flowControlWaitsInProgressId;
-  private final static int flowControlThrottleWaitsInProgressId;
-  private final static int flowControlRequestsId;
-  private final static int flowControlResponsesId;
-
-  private final static int jgUNICASTdataReceivedTimeId;
-
-  private final static int jgReceivedMessagesSizeId;
-  private final static int jgQueuedMessagesSizeId;
-  private final static int jgSentMessagesPoolSizeId;
-
-  private final static int jgUcastReceivedMessagesSizeId;
-  private final static int jgUcastSentMessagesSizeId;
-  private final static int jgUcastSentHighPriorityMessagesSizeId;
-
-  private final static int jgSTABLEsuspendTimeId;
-  private final static int jgSTABLEmessagesId;
-  private final static int jgSTABLEmessagesSentId;
-  private final static int jgSTABILITYmessagesId;
-
-  private final static int jgDownTimeId;
-  private final static int jgUpTimeId;
-  private final static int jChannelUpTimeId;
-
-  private final static int jgFCsendBlocksId;
-  private final static int jgFCautoRequestsId;
-  private final static int jgFCreplenishId;
-  private final static int jgFCresumesId;
-  private final static int jgFCsentCreditsId;
-  private final static int jgFCsentThrottleRequestsId;
-  private final static int jgNAKACKwaitsId;
-
-  private final static int jgFragmentationsPerformedId;
-  private final static int jgFragmentsCreatedId;
-
-        f.createLongCounter("ucastWriteTime", "Total amount of time, in nanoseconds, spent in unicast datagram socket write calls.", "nanoseconds"),
-        f.createLongCounter("mcastWriteTime", "Total amount of time, in nanoseconds, spent in multicast datagram socket write calls.", "nanoseconds"),
-        f.createIntCounter("ucastFlushes", "Total number of flushes of the unicast datagram protocol, prior to sending a multicast message", "flushes"),
-        f.createLongCounter("ucastFlushTime", "Total amount of time, in nanoseconds, spent waiting for acknowledgements for outstanding unicast datagram messages", "nanoseconds"),
-
-        f.createIntCounter("flowControlRequests", "Total number of flow control credit requests sent to other processes", "messages"),
-        f.createIntCounter("flowControlResponses", "Total number of flow control credit responses sent to a requestor", "messages"),
-        f.createIntGauge("flowControlWaitsInProgress", "Number of threads blocked waiting for flow-control recharges from other processes", "threads"),
-        f.createLongCounter("flowControlWaitTime", "Total amount of time, in nanoseconds, spent waiting for other processes to recharge the flow of control meter", "nanoseconds"),
-        f.createIntGauge("flowControlThrottleWaitsInProgress", "Number of threads blocked waiting due to flow-control throttle requests from other members", "threads"),
-
-        f.createLongGauge("jgNAKACKreceivedMessages", "Number of received messages awaiting stability in NAKACK", "messages"),
-        f.createLongGauge("jgNAKACKsentMessages", "Number of sent messages awaiting stability in NAKACK", "messages"),
-
-        f.createLongGauge("jgQueuedMessages", "Number of messages queued by transport and awaiting processing", "messages"),
-
-        f.createLongGauge("jgUNICASTreceivedMessages", "Number of received messages awaiting receipt of prior messages", "messages"),
-        f.createLongGauge("jgUNICASTsentMessages", "Number of un-acked normal priority messages", "messages"),
-        f.createLongGauge("jgUNICASTsentHighPriorityMessages", "Number of un-acked high priority messages", "messages"),
-
-        f.createLongCounter("jgUNICASTdataReceivedTime", "Amount of time spent in JGroups UNICAST send", "nanoseconds"),
-        f.createLongCounter("jgSTABLEsuspendTime", "Amount of time JGroups STABLE is suspended", "nanoseconds"),
-        f.createLongCounter("jgSTABLEmessages", "Number of STABLE messages received by JGroups", "messages"),
-        f.createLongCounter("jgSTABLEmessagesSent", "Number of STABLE messages sent by JGroups", "messages"),
-        f.createLongCounter("jgSTABILITYmessages", "Number of STABILITY messages received by JGroups", "messages"),
-
-//        f.createLongCounter("jgUDPupTime", "Time spent in JGroups UDP processing up events", "nanoseconds"),
-//        f.createLongCounter("jgUDPdownTime", "Time spent in JGroups UDP processing down events", "nanoseconds"),
-//        f.createLongCounter("jgNAKACKupTime", "Time spent in JGroups NAKACK processing up events", "nanoseconds"),
-//        f.createLongCounter("jgNAKACKdownTime", "Time spent in JGroups NAKACK processing down events", "nanoseconds"),
-//        f.createLongCounter("jgUNICASTupTime", "Time spent in JGroups UNICAST processing up events", "nanoseconds"),
-//        f.createLongCounter("jgUNICASTdownTime", "Time spent in JGroups UNICAST processing down events", "nanoseconds"),
-//        f.createLongCounter("jgSTABLEupTime", "Time spent in JGroups STABLE processing up events", "nanoseconds"),
-//        f.createLongCounter("jgSTABLEdownTime", "Time spent in JGroups STABLE processing down events", "nanoseconds"),
-//        f.createLongCounter("jgFRAG2upTime", "Time spent in JGroups FRAG2 processing up events", "nanoseconds"),
-//        f.createLongCounter("jgFRAG2downTime", "Time spent in JGroups FRAG2 processing down events", "nanoseconds"),
-//        f.createLongCounter("jgGMSupTime", "Time spent in JGroups GMS processing up events", "nanoseconds"),
-//        f.createLongCounter("jgGMSdownTime", "Time spent in JGroups GMS processing down events", "nanoseconds"),
-//        f.createLongCounter("jgFCupTime", "Time spent in JGroups FC processing up events", "nanoseconds"),
-//        f.createLongCounter("jgFCdownTime", "Time spent in JGroups FC processing down events", "nanoseconds"),
-//        f.createLongCounter("jgDirAckupTime", "Time spent in JGroups DirAck processing up events", "nanoseconds"),
-//        f.createLongCounter("jgDirAckdownTime", "Time spent in JGroups DirAck processing down events", "nanoseconds"),
-//
-//        f.createLongCounter("jgVIEWSYNCdownTime", "Time spent in JGroups VIEWSYNC processing down events", "nanoseconds"),
-//        f.createLongCounter("jgVIEWSYNCupTime", "Time spent in JGroups VIEWSYNC processing up events", "nanoseconds"),
-//        f.createLongCounter("jgFDdownTime", "Time spent in JGroups FD processing down events", "nanoseconds"),
-//        f.createLongCounter("jgFDupTime", "Time spent in JGroups FD processing up events", "nanoseconds"),
-//        f.createLongCounter("jgTCPGOSSIPdownTime", "Time spent in JGroups TCPGOSSIP processing down events", "nanoseconds"),
-//        f.createLongCounter("jgTCPGOSSIPupTime", "Time spent in JGroups TCPGOSSIP processing up events", "nanoseconds"),
-//        f.createLongCounter("jgDISCOVERYdownTime", "Time spent in JGroups DISCOVERY processing down events", "nanoseconds"),
-//        f.createLongCounter("jgDISCOVERYupTime", "Time spent in JGroups DISCOVERY processing up events", "nanoseconds"),
-
-        f.createLongCounter("jgDownTime", "Down Time spent in JGroups stacks", "nanoseconds"),
-        f.createLongCounter("jgUpTime", "Up Time spent in JGroups stacks", "nanoseconds"),
-        f.createLongCounter("jChannelUpTime", "Up Time spent in JChannel including jgroup stack", "nanoseconds"),
-
-        f.createLongCounter("jgFCsendBlocks", "Number of times JGroups FC halted sends due to backpressure", "events"),
-        f.createLongCounter("jgFCautoRequests", "Number of times JGroups FC automatically sent replenishment requests", "events"),
-        f.createLongCounter("jgFCreplenish", "Number of times JGroups FC received replenishments from receivers", "messages"),
-        f.createLongCounter("jgFCresumes", "Number of times JGroups FC resumed sends due to backpressure", "events"),
-        f.createLongCounter("jgFCsentCredits", "Number of times JGroups FC sent credits to a sender", "events"),
-        f.createLongCounter("jgFCsentThrottleRequests","Number of times JGroups FC sent throttle requests to a sender", "events"),
-
-        f.createLongCounter("jgNAKACKwaits", "Number of delays created by NAKACK sent_msgs overflow", "events"),
-        f.createLongCounter("jgFragmentationsPerformed", "Number of message fragmentation operations performed", "operations"),
-        f.createLongCounter("jgFragmentsCreated", "Number of message fragments created", "fragments"),
-
-    ucastWriteTimeId = type.nameToId("ucastWriteTime");
-    mcastWriteTimeId = type.nameToId("mcastWriteTime");
-    ucastFlushesId = type.nameToId("ucastFlushes");
-    ucastFlushTimeId = type.nameToId("ucastFlushTime");
-
-    flowControlRequestsId = type.nameToId("flowControlRequests");
-    flowControlResponsesId = type.nameToId("flowControlResponses");
-    flowControlWaitsInProgressId = type.nameToId("flowControlWaitsInProgress");
-    flowControlThrottleWaitsInProgressId = type.nameToId("flowControlThrottleWaitsInProgress");
-
-    jgUNICASTdataReceivedTimeId = type.nameToId("jgUNICASTdataReceivedTime");
-
-    jgReceivedMessagesSizeId = type.nameToId("jgNAKACKreceivedMessages");
-    jgSentMessagesPoolSizeId = type.nameToId("jgNAKACKsentMessages");
-    jgQueuedMessagesSizeId = type.nameToId("jgQueuedMessages");
-    jgSTABLEsuspendTimeId = type.nameToId("jgSTABLEsuspendTime");
-    jgSTABLEmessagesId = type.nameToId("jgSTABLEmessages");
-    jgSTABLEmessagesSentId = type.nameToId("jgSTABLEmessagesSent");
-    jgSTABILITYmessagesId = type.nameToId("jgSTABILITYmessages");
-    jgFragmentationsPerformedId = type.nameToId("jgFragmentationsPerformed");
-    jgFragmentsCreatedId = type.nameToId("jgFragmentsCreated");
-
-    jgUcastReceivedMessagesSizeId = type.nameToId("jgUNICASTreceivedMessages");
-    jgUcastSentMessagesSizeId = type.nameToId("jgUNICASTsentMessages");
-    jgUcastSentHighPriorityMessagesSizeId = type.nameToId("jgUNICASTsentHighPriorityMessages");
-
-    jgDownTimeId = type.nameToId("jgDownTime");
-    jgUpTimeId = type.nameToId("jgUpTime");
-    jChannelUpTimeId = type.nameToId("jChannelUpTime");
-
-    jgFCsendBlocksId = type.nameToId("jgFCsendBlocks");
-    jgFCautoRequestsId = type.nameToId("jgFCautoRequests");
-    jgFCreplenishId = type.nameToId("jgFCreplenish");
-    jgFCresumesId = type.nameToId("jgFCresumes");
-    jgFCsentCreditsId = type.nameToId("jgFCsentCredits");
-    jgFCsentThrottleRequestsId = type.nameToId("jgFCsentThrottleRequests");
-
-    jgNAKACKwaitsId = type.nameToId("jgNAKACKwaits");
-
-  public long startUcastWrite() {
-    return getStatTime();
-  }
-  public void endUcastWrite(long start, int bytesWritten) {
-    if (enableClockStats) {
-      stats.incLong(ucastWriteTimeId, getStatTime()-start);
-    }
+  public void incUcastWriteBytes(int bytesWritten) {
-  public long startMcastWrite() {
-    return getStatTime();
-  }
-  public void endMcastWrite(long start, int bytesWritten) {
+  public void incMcastWriteBytes(int bytesWritten) {
-    if (enableClockStats) {
-      stats.incLong(mcastWriteTimeId, getStatTime()-start);
-    }
-  public void incMcastReadBytes(long amount) {
+  public void incMcastReadBytes(int amount) {
-  public void incUcastReadBytes(long amount) {
+  public void incUcastReadBytes(int amount) {
-  public long startUcastFlush() {
-    stats.incInt(ucastFlushesId, 1);
-    return getStatTime();
-  }
-  public void endUcastFlush(long start) {
-    if (enableClockStats) {
-      stats.incLong(ucastFlushTimeId, getStatTime()-start);
-    }
-  }
-  public void incFlowControlRequests() {
-    stats.incInt(flowControlRequestsId, 1);
-  }
-  public void incFlowControlResponses() {
-    stats.incInt(flowControlResponsesId, 1);
-  }
-  public long startFlowControlWait() {
-    stats.incInt(flowControlWaitsInProgressId, 1);
-    return 1;
-  }
-  public void endFlowControlWait(long start) {
-    stats.incInt(flowControlWaitsInProgressId, -1);
-  }
-  public long startFlowControlThrottleWait() {
-    stats.incInt(flowControlThrottleWaitsInProgressId, 1);
-    return 1;
-  }
-
-  public void endFlowControlThrottleWait(long start) {
-    stats.incInt(flowControlThrottleWaitsInProgressId, -1);
-  }
-  public void incJgUNICASTdataReceived(long amount) {
-    stats.incLong(jgUNICASTdataReceivedTimeId, amount);
-  }
-
-//  public void incjgUDPup(long amount) {
-//    stats.incLong(jgUDPupId, amount);
-//  }
-//  public void incjgUDPdown(long amount) {
-//    stats.incLong(jgUDPdownId, amount);
-//  }
-//  public void incjgNAKACKup(long amount) {
-//    stats.incLong(jgNAKACKupId, amount);
-//  }
-//  public void incjgNAKACKdown(long amount) {
-//    stats.incLong(jgNAKACKdownId, amount);
-//  }
-//  public void incjgUNICASTup(long amount) {
-//    stats.incLong(jgUNICASTupId, amount);
-//  }
-//  public void incjgUNICASTdown(long amount) {
-//    stats.incLong(jgUNICASTdownId, amount);
-//  }
-//  public void incjgSTABLEup(long amount) {
-//    stats.incLong(jgSTABLEupId, amount);
-//  }
-//  public void incjgSTABLEdown(long amount) {
-//    stats.incLong(jgSTABLEdownId, amount);
-//  }
-//  public void incjgFRAG2up(long amount) {
-//    stats.incLong(jgFRAG2upId, amount);
-//  }
-//  public void incjgFRAG2down(long amount) {
-//    stats.incLong(jgFRAG2downId, amount);
-//  }
-//  public void incjgGMSup(long amount) {
-//    stats.incLong(jgGMSupId, amount);
-//  }
-//  public void incjgGMSdown(long amount) {
-//    stats.incLong(jgGMSdownId, amount);
-//  }
-//  public void incjgFCup(long amount) {
-//    stats.incLong(jgFCupId, amount);
-//  }
-//  public void incjgFCdown(long amount) {
-//    stats.incLong(jgFCdownId, amount);
-//  }
-
-  public void setJgQueuedMessagesSize(long amount) {
-    stats.setLong(jgQueuedMessagesSizeId, amount);
-  }
-
-  public void setJgSTABLEreceivedMessagesSize(long amount) {
-    stats.setLong(jgReceivedMessagesSizeId, amount);
-  }
-  public void setJgSTABLEsentMessagesSize(long amount) {
-    stats.setLong(jgSentMessagesPoolSizeId, amount);
-  }
-  public void incJgSTABLEsuspendTime(long value)
-  {
-    stats.incLong(jgSTABLEsuspendTimeId, value);
-  }
-  public void incJgSTABLEmessages(long value)
-  {
-    stats.incLong(jgSTABLEmessagesId, value);
-  }
-  public void incJgSTABLEmessagesSent(long value)
-  {
-    stats.incLong(jgSTABLEmessagesSentId, value);
-  }
-  public void incJgSTABILITYmessages(long value)
-  {
-    stats.incLong(jgSTABILITYmessagesId, value);
-  }
-  public void incJgFragmentationsPerformed() {
-    stats.incLong(jgFragmentationsPerformedId, 1);
-  }
-  public void incJgFragmentsCreated(long numFrags) {
-    stats.incLong(jgFragmentsCreatedId, numFrags);
-  }
-  public void setJgUNICASTreceivedMessagesSize(long amount) {
-    stats.setLong(jgUcastReceivedMessagesSizeId, amount);
-  }
-  public void setJgUNICASTsentMessagesSize(long amount) {
-    stats.setLong(jgUcastSentMessagesSizeId, amount);
-  }
-  public void setJgUNICASTsentHighPriorityMessagesSize(long amount) {
-    stats.setLong(jgUcastSentHighPriorityMessagesSizeId, amount);
-  }
-
-
-  public void incjgDownTime(long value)
-  {
-    stats.incLong(jgDownTimeId, value);
-  }
-
-  public void incjgUpTime(long value)
-  {
-    stats.incLong(jgUpTimeId, value);
-  }
-
-  public void incjChannelUpTime(long value)
-  {
-    stats.incLong(jChannelUpTimeId, value);
-  }
-
-  public void incJgFCsendBlocks(long value)
-  {
-   stats.incLong(jgFCsendBlocksId, value);
-
-  }
-  public void incJgFCautoRequests(long value)
-  {
-    stats.incLong(jgFCautoRequestsId, value);
-
-  }
-  public void incJgFCreplenish(long value)
-  {
-    stats.incLong(jgFCreplenishId, value);
-
-  }
-  public void incJgFCresumes(long value)
-  {
-   stats.incLong(jgFCresumesId, value);
-  }
-  public void incJgFCsentCredits(long value)
-  {
-    stats.incLong(jgFCsentCreditsId, value);
-  }
-  public void incJgFCsentThrottleRequests(long value)
-  {
-    stats.incLong(jgFCsentThrottleRequestsId, value);
-  }
-
-  public void incJgNAKACKwaits(long value) {
-    stats.incLong(jgNAKACKwaitsId, value);
-  }
