Merge branch 'feature/GEODE-8' into develop

-      this.orderPolicy = DataSerializer.readObject(in);
+      if (InternalDataSerializer.getVersionForDataStream(in).compareTo(
+          Version.CURRENT) < 0) {
+        com.gemstone.gemfire.cache.util.Gateway.OrderPolicy oldOrderPolicy = DataSerializer
+            .readObject(in);
+        if (oldOrderPolicy != null) {
+          if (oldOrderPolicy.name().equals(OrderPolicy.KEY.name())) {
+            this.orderPolicy = OrderPolicy.KEY;
+          }
+          else if (oldOrderPolicy.name().equals(OrderPolicy.THREAD.name())) {
+            this.orderPolicy = OrderPolicy.THREAD;
+          }
+          else {
+            this.orderPolicy = OrderPolicy.PARTITION;
+          }}
+        else {
+          this.orderPolicy = null;
+        }
+      }
+      else {
+        this.orderPolicy = DataSerializer.readObject(in);
+      }
-      DataSerializer.writeObject(orderPolicy, out);
+      if (InternalDataSerializer.getVersionForDataStream(out).compareTo(
+          Version.CURRENT) < 0 && this.orderPolicy != null) {
+        String orderPolicyName = this.orderPolicy.name();
+        if (orderPolicyName.equals(com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.KEY.name())) {
+          DataSerializer.writeObject(
+              com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.KEY, out);
+        }
+        else if(orderPolicyName.equals(com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.THREAD.name())) {
+          DataSerializer.writeObject(
+              com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.THREAD, out);
+        }else{
+          DataSerializer.writeObject(
+              com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.PARTITION, out);
+        }
+      }
+      else {
+        DataSerializer.writeObject(orderPolicy, out);
+      }
