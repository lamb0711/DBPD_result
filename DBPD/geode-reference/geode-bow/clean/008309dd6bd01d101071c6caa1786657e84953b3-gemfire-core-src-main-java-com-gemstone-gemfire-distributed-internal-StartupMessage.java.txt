Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+
+import com.gemstone.gemfire.internal.InternalDataSerializer;
-import com.gemstone.gemfire.internal.tcp.Stub;
-  /** A stub for the direct channel for this manager */
-  private Stub directChannel;
-  private boolean isMcastDiscovery;
-   * Sets the id of the distribution manager that is starting up
-   */
-  void setDirectChannel(Stub directChannel) {
-    this.directChannel = directChannel;
-  }
-
-  /**
-  public boolean sendViaJGroups() {
+  public boolean sendViaUDP() {
-   * Sets the mcastDiscovery flag for this message
-   * @since 5.0
-   */
-  void setMcastDiscovery(boolean flag) {
-    isMcastDiscovery = flag;
-  }
-  
-  /**
-        final com.gemstone.org.jgroups.util.StringId msg = 
+        final com.gemstone.gemfire.i18n.StringId msg = 
-  private static final Version[] dsfidVersions = new Version[] {
-          Version.GFE_82
-  };
-
-    return dsfidVersions;
-  }
-
-  public void toDataPre_GFE_8_2_0_0(DataOutput out) throws IOException {
-    toDataContent(out, true);
+    return null;
-    toDataContent(out, false);
-  }
-
-  private void toDataContent(DataOutput out, boolean pre8_2_0_0) throws IOException {
-    out.writeBoolean(this.directChannel != null);
-    if (this.directChannel != null) {
-      InternalDataSerializer.invokeToData(this.directChannel, out);
-    }
-    if (pre8_2_0_0) {
+
+    boolean pre9_0_0_0 = InternalDataSerializer.
+        getVersionForDataStream(out).compareTo(Version.GFE_90) < 0;
+    if (pre9_0_0_0) {
+
-    out.writeBoolean(this.isMcastDiscovery);
-    data.toData(out);
+    data.writeTo(out);
-  public void fromDataPre_GFE_8_2_0_0(DataInput in)
-          throws IOException, ClassNotFoundException {
-    fromDataContent(in, true);
-  }
-
-    fromDataContent(in, false);
-  }
-
-  private void fromDataContent(DataInput in, boolean pre8_2_0_0) throws IOException, ClassNotFoundException {
-    boolean hasDirectChannel = in.readBoolean();
-    if (hasDirectChannel) {
-      this.directChannel = Stub.createFromData(in);
-    } else {
-      this.directChannel = null;
-    }
-    if (pre8_2_0_0) {
+
+    boolean pre9_0_0_0 = InternalDataSerializer.
+        getVersionForDataStream(in).compareTo(Version.GFE_90) < 0;
+    if (pre9_0_0_0) {
+    
-    this.isMcastDiscovery = in.readBoolean();
-    StartupMessageData data = new StartupMessageData(in, this.version);
+    StartupMessageData data = new StartupMessageData();
+    data.readFrom(in);
