GEODE-4990: Cluster Config StartUp Race Condition (#1730)

* GEODE-4990: Cluster Config StartUp Race Condition

- Added unit test for `GetClusterConfigurationFunction`.
- Added integration tests for `ClusterConfigurationLoader`.
- Set 'InternalLocator.isSharedConfigurationEnabled()' visibility
  as `public`.
- Set `ClusterConfigurationLoader.requestConfigurationFromOneLocator()`
  visibility as `protected`.
- `GetClusterConfigurationFunction` now throws an exception if the
  cluster configuraiton service is not enabled on the locator.
- `GetClusterConfigurationFunction` now returns null if the cluster
  configuraiton service is enabled but not yet started. The caller can
  decide whether to retry or fail fast.
-
-import java.io.IOException;
-    InternalClusterConfigurationService clusterConfigurationService =
-        InternalLocator.getLocator().getSharedConfiguration();
-
+    InternalLocator internalLocator = InternalLocator.getLocator();
+    logger.info("Received request for configuration: {}", groups);
-    logger.info("Received request for configuration  : {}", groups);
+    // Return exception to the caller so startup fails fast.
+    if (!internalLocator.isSharedConfigurationEnabled()) {
+      String errorMessage = "The cluster configuration service is not enabled on this member.";
+      logger.warn(errorMessage);
+      context.getResultSender().lastResult(new IllegalStateException(errorMessage));
+      return;
+    }
-    try {
-      ConfigurationResponse response =
-          clusterConfigurationService.createConfigurationResponse(groups);
-      context.getResultSender().lastResult(response);
-    } catch (IOException e) {
-      logger.error("Unable to retrieve the cluster configuration", e);
-      context.getResultSender().lastResult(e);
+    // Shared configuration enabled.
+    if (internalLocator.isSharedConfigurationRunning()) {
+      // Cluster configuration is up and running already.
+      InternalClusterConfigurationService clusterConfigurationService =
+          internalLocator.getSharedConfiguration();
+
+      try {
+        ConfigurationResponse response =
+            clusterConfigurationService.createConfigurationResponse(groups);
+        context.getResultSender().lastResult(response);
+      } catch (Exception exception) {
+        logger.warn("Unable to retrieve the cluster configuration", exception);
+        context.getResultSender().lastResult(exception);
+      }
+    } else {
+      // Cluster configuration service is starting up. Return null so callers can decide whether
+      // to fail fast, or wait and retry later.
+      context.getResultSender().lastResult(null);
