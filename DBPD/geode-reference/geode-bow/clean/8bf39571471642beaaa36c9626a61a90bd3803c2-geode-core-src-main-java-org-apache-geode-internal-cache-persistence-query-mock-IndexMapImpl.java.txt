Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A dummy implementation of an IndexMap. Keeps all of the entries
- * in memory, but in serialized form.
+ * A dummy implementation of an IndexMap. Keeps all of the entries in memory, but in serialized
+ * form.
-  ConcurrentSkipListMap<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable>  map;
-  
+  ConcurrentSkipListMap<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable> map;
+
-    map = new ConcurrentSkipListMap(new PairComparator(new CachedDeserializableComparator(new ExtendedNumericComparator()), new ByteComparator()));
+    map = new ConcurrentSkipListMap(new PairComparator(
+        new CachedDeserializableComparator(new ExtendedNumericComparator()), new ByteComparator()));
-    map.put(new Pair(toDeserializable(indexKey), toDeserializable(regionKey)), toDeserializable(value));
-    
+    map.put(new Pair(toDeserializable(indexKey), toDeserializable(regionKey)),
+        toDeserializable(value));
+
-    
+
-    return new Itr(map.subMap(new Pair(indexKey, ByteComparator.MIN_BYTES), true, new Pair(indexKey, ByteComparator.MAX_BYTES), true).entrySet().iterator());
+    return new Itr(map.subMap(new Pair(indexKey, ByteComparator.MIN_BYTES), true,
+        new Pair(indexKey, ByteComparator.MAX_BYTES), true).entrySet().iterator());
-    
-    return new KeyItr(map.subMap(new Pair(indexKey, ByteComparator.MIN_BYTES), true, new Pair(indexKey, ByteComparator.MAX_BYTES), true).entrySet().iterator());
+
+    return new KeyItr(map.subMap(new Pair(indexKey, ByteComparator.MIN_BYTES), true,
+        new Pair(indexKey, ByteComparator.MAX_BYTES), true).entrySet().iterator());
-  public CloseableIterator<IndexEntry> iterator(Object start,
-      boolean startInclusive, Object end, boolean endInclusive) {
+  public CloseableIterator<IndexEntry> iterator(Object start, boolean startInclusive, Object end,
+      boolean endInclusive) {
-    return new Itr(map.subMap(new Pair(start, startBytes), startInclusive, new Pair(end, endBytes), endInclusive).entrySet().iterator());
+    return new Itr(map
+        .subMap(new Pair(start, startBytes), startInclusive, new Pair(end, endBytes), endInclusive)
+        .entrySet().iterator());
-  public CloseableIterator<IndexEntry> iterator(Object start,
-      boolean startInclusive) {
+  public CloseableIterator<IndexEntry> iterator(Object start, boolean startInclusive) {
-  
+
-  
+
-  public CloseableIterator<IndexEntry> descendingIterator(Object end,
-      boolean endInclusive) {
+  public CloseableIterator<IndexEntry> descendingIterator(Object end, boolean endInclusive) {
-    return new Itr(map.headMap(new Pair(end, endBytes), endInclusive).descendingMap().entrySet().iterator());
+    return new Itr(
+        map.headMap(new Pair(end, endBytes), endInclusive).descendingMap().entrySet().iterator());
-  
+
-  public CloseableIterator<CachedDeserializable> keyIterator(Object start,
-      boolean startInclusive, Object end, boolean endInclusive) {
+  public CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive,
+      Object end, boolean endInclusive) {
-    return new KeyItr(map.subMap(new Pair(start, startBytes), startInclusive, new Pair(end, endBytes), endInclusive).entrySet().iterator());
+    return new KeyItr(map
+        .subMap(new Pair(start, startBytes), startInclusive, new Pair(end, endBytes), endInclusive)
+        .entrySet().iterator());
-  public CloseableIterator<CachedDeserializable> keyIterator(Object start,
-      boolean startInclusive) {
+  public CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive) {
-    return new KeyItr(map.tailMap(new Pair(start, startBytes), startInclusive).entrySet().iterator());
+    return new KeyItr(
+        map.tailMap(new Pair(start, startBytes), startInclusive).entrySet().iterator());
-    return new KeyItr(map.headMap(new Pair(end, endBytes), endInclusive).descendingMap().entrySet().iterator());
+    return new KeyItr(
+        map.headMap(new Pair(end, endBytes), endInclusive).descendingMap().entrySet().iterator());
-  
-  
-  
+
+
+
-    //do nothing.
+    // do nothing.
-    if(value instanceof CachedDeserializable) {
+    if (value instanceof CachedDeserializable) {
-    
+
-  
+
-    public IndexEntryImpl(CachedDeserializable indexKey, CachedDeserializable regionKey, CachedDeserializable value) {
+    public IndexEntryImpl(CachedDeserializable indexKey, CachedDeserializable regionKey,
+        CachedDeserializable value) {
-    
+
-  
-  
+
+
-    public Itr(Iterator<java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable>> iterator) {
+    public Itr(
+        Iterator<java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable>> iterator) {
-      java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable> next = iterator.next();
+      java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable> next =
+          iterator.next();
-      
+
-      //do nothing
-      
+      // do nothing
+
-    
+
-  
+
-    
+
-    public KeyItr(Iterator<java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable>> iterator) {
+    public KeyItr(
+        Iterator<java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable>> iterator) {
-      java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable> next = iterator.next();
+      java.util.Map.Entry<Pair<CachedDeserializable, CachedDeserializable>, CachedDeserializable> next =
+          iterator.next();
-      
+
-      
+
-      //do nothing
-      
+      // do nothing
+
-    
+
