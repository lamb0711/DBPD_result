Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This ReadWriteLock is useful when different threads need to lock
- * and unlock the read lock. This is <b>NOT</b> a reentrant lock.
+ * This ReadWriteLock is useful when different threads need to lock and unlock the read lock. This
+ * is <b>NOT</b> a reentrant lock.
-  
+
-    public SemaphoreReadLock(Semaphore readerSemaphore,
-        Semaphore writerSemaphore) {
+    public SemaphoreReadLock(Semaphore readerSemaphore, Semaphore writerSemaphore) {
-        if (interrupted) Thread.currentThread().interrupt();
+        if (interrupted)
+          Thread.currentThread().interrupt();
-        if (interrupted) Thread.currentThread().interrupt();
+        if (interrupted)
+          Thread.currentThread().interrupt();
-    public boolean tryLock(long time, TimeUnit unit)
-        throws InterruptedException {
+    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
-          if (interrupted) Thread.currentThread().interrupt();
+          if (interrupted)
+            Thread.currentThread().interrupt();
-  
+
-        for(;;) {
+        for (;;) {
-        if (interrupted) Thread.currentThread().interrupt();
+        if (interrupted)
+          Thread.currentThread().interrupt();
-    public boolean tryLock(long time, TimeUnit unit)
-        throws InterruptedException {
+    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
-    
+
