GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.DataSerializer;
+import org.apache.geode.internal.DSFIDFactory;
+import org.apache.geode.internal.InternalDataSerializer;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.logging.LogService;
+  private static final Logger logger = LogService.getLogger();
+  public static GMSMember readMemberID(DataInput in) throws IOException, ClassNotFoundException {
+    Object id = DataSerializer.readObject(in);
+    if (id == null || id instanceof GMSMember) {
+      return (GMSMember) id;
+    }
+    // return ((GMSMemberAdapter)((InternalDistributedMember)id).getNetMember()).getGmsMember();
+    try {
+      Method getNetMember = id.getClass().getMethod("getNetMember");
+      Object netMember = getNetMember.invoke(id);
+      Method getGmsMember = netMember.getClass().getMethod("getGmsMember");
+      return (GMSMember) getGmsMember.invoke(netMember);
+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
+      throw new IllegalStateException("Unable to deserialize a member ID", e);
+    }
+  }
+
+  public static Set<GMSMember> readHashSetOfMemberIDs(DataInput in)
+      throws IOException, ClassNotFoundException {
+    int size = InternalDataSerializer.readArrayLength(in);
+    if (size == -1) {
+      return null;
+    }
+    Set<GMSMember> result = new HashSet<>();
+    for (int i = 0; i < size; i++) {
+      result.add(readMemberID(in));
+    }
+    return result;
+  }
+
+  /** Parses comma-separated-roles/groups into array of groups (strings). */
+  public static String[] parseGroups(String csvRoles, String csvGroups) {
+    List<String> groups = new ArrayList<String>();
+    parseCsv(groups, csvRoles);
+    parseCsv(groups, csvGroups);
+    return groups.toArray(new String[groups.size()]);
+  }
+
+
+  private static void parseCsv(List<String> groups, String csv) {
+    if (csv == null || csv.length() == 0) {
+      return;
+    }
+    StringTokenizer st = new StringTokenizer(csv, ",");
+    while (st.hasMoreTokens()) {
+      String groupName = st.nextToken().trim();
+      if (!groups.contains(groupName)) { // only add each group once
+        groups.add(groupName);
+      }
+    }
+  }
+
+  public static List<GMSMember> readArrayOfIDs(DataInput in)
+      throws IOException, ClassNotFoundException {
+    int size = InternalDataSerializer.readArrayLength(in);
+    if (size == -1) {
+      return null;
+    }
+    List<GMSMember> result = new ArrayList<>(size);
+    for (int i = 0; i < size; i++) {
+      result.add(readMemberID(in));
+    }
+    return result;
+  }
+
+  private static void writeAsInternalDistributedMember(GMSMember suspect, DataOutput out)
+      throws IOException {
+    InternalDataSerializer.writeDSFID(suspect, DSFIDFactory.DISTRIBUTED_MEMBER, out);
+    // DataSerializer.writeObject(new InternalDistributedMember(new GMSMemberAdapter(suspect)),
+    // out);
+  }
+
+  public static void writeMemberID(GMSMember id, DataOutput out) throws IOException {
+    if (id == null) {
+      DataSerializer.writeObject(id, out);
+      return;
+    }
+    if (InternalDataSerializer.getVersionForDataStream(out).ordinal() < Version.GEODE_1_10_0
+        .ordinal()) {
+      writeAsInternalDistributedMember(id, out);
+    } else {
+      DataSerializer.writeObject(id, out);
+    }
+  }
+
+  public static Set<GMSMember> readSetOfMemberIDs(DataInput in)
+      throws IOException, ClassNotFoundException {
+    int size = InternalDataSerializer.readArrayLength(in);
+    if (size == -1) {
+      return null;
+    }
+    Set<GMSMember> result = new HashSet<>(size);
+    for (int i = 0; i < size; i++) {
+      result.add(readMemberID(in));
+    }
+    return result;
+
+
+  }
+
+  public static void writeSetOfMemberIDs(Set<GMSMember> set, DataOutput out) throws IOException {
+    int size;
+    if (set == null) {
+      size = -1;
+    } else {
+      size = set.size();
+    }
+    InternalDataSerializer.writeArrayLength(size, out);
+    if (size > 0) {
+      for (GMSMember member : set) {
+        GMSUtil.writeMemberID(member, out);
+      }
+    }
+  }
