GEODE-5971: refactor remaining command's usage of Result (#3481)



+import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.internal.lang.StringUtils;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-  public Result startPulse(@CliOption(key = CliStrings.START_PULSE__URL,
+  public ResultModel startPulse(@CliOption(key = CliStrings.START_PULSE__URL,
-      help = CliStrings.START_PULSE__URL__HELP) final String url) {
-    try {
-      if (StringUtils.isNotBlank(url)) {
-        browse(URI.create(url));
-        return ResultBuilder.createInfoResult(CliStrings.START_PULSE__RUN);
-      } else {
-        if (isConnectedAndReady()) {
-          OperationInvoker operationInvoker = getGfsh().getOperationInvoker();
+      help = CliStrings.START_PULSE__URL__HELP) final String url) throws IOException {
+    if (StringUtils.isNotBlank(url)) {
+      browse(URI.create(url));
+      return ResultModel.createInfo(CliStrings.START_PULSE__RUN);
+    } else {
+      if (isConnectedAndReady()) {
+        OperationInvoker operationInvoker = getGfsh().getOperationInvoker();
-          ObjectName managerObjectName = (ObjectName) operationInvoker.getAttribute(
-              ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN, "ManagerObjectName");
+        ObjectName managerObjectName = (ObjectName) operationInvoker.getAttribute(
+            ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN, "ManagerObjectName");
-          String pulseURL =
-              (String) operationInvoker.getAttribute(managerObjectName.toString(), "PulseURL");
+        String pulseURL =
+            (String) operationInvoker.getAttribute(managerObjectName.toString(), "PulseURL");
-          if (StringUtils.isNotBlank(pulseURL)) {
-            browse(URI.create(pulseURL));
-            return ResultBuilder
-                .createInfoResult(CliStrings.START_PULSE__RUN + " with URL: " + pulseURL);
-          } else {
-            String pulseMessage = (String) operationInvoker
-                .getAttribute(managerObjectName.toString(), "StatusMessage");
-            return (StringUtils.isNotBlank(pulseMessage)
-                ? ResultBuilder.createGemFireErrorResult(pulseMessage)
-                : ResultBuilder.createGemFireErrorResult(CliStrings.START_PULSE__URL__NOTFOUND));
-          }
+        if (StringUtils.isNotBlank(pulseURL)) {
+          browse(URI.create(pulseURL));
+          return ResultModel.createError(CliStrings.START_PULSE__RUN + " with URL: " + pulseURL);
-          return ResultBuilder.createUserErrorResult(CliStrings
-              .format(CliStrings.GFSH_MUST_BE_CONNECTED_FOR_LAUNCHING_0, "GemFire Pulse"));
+          String pulseMessage = (String) operationInvoker
+              .getAttribute(managerObjectName.toString(), "StatusMessage");
+          return (StringUtils.isNotBlank(pulseMessage)
+              ? ResultModel.createError(pulseMessage)
+              : ResultModel.createError(CliStrings.START_PULSE__URL__NOTFOUND));
+      } else {
+        return ResultModel.createError(CliStrings
+            .format(CliStrings.GFSH_MUST_BE_CONNECTED_FOR_LAUNCHING_0, "GemFire Pulse"));
-    } catch (Exception e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createShellClientErrorResult(
-          String.format(CliStrings.START_PULSE__ERROR, t.getMessage()));
