GEODE-7344: DSFID implements BasicSerializable (#4364)


-import org.apache.geode.InternalGemFireError;
+import org.apache.geode.internal.serialization.BasicSerializable;
-  private static final String PRE_GEODE_100_TCPSERVER_PACKAGE =
-      "com.gemstone.org.jgroups.stack.tcpserver";
-  private static final String POST_GEODE_100_TCPSERVER_PACKAGE =
-      "org.apache.geode.distributed.internal.tcpserver";
-   * @param name the fully qualified class name
+   * @param nameArg the fully qualified class name
-  public static String processIncomingClassName(String name) {
-    // TCPServer classes are used before a cache exists and support for old clients has been
-    // initialized
-    if (name.startsWith(PRE_GEODE_100_TCPSERVER_PACKAGE)) {
-      return POST_GEODE_100_TCPSERVER_PACKAGE
-          + name.substring(PRE_GEODE_100_TCPSERVER_PACKAGE.length());
+  public static String processIncomingClassName(String nameArg) {
+    final String name = StaticSerialization.processIncomingClassName(nameArg);
+    // using identity comparison on purpose because we are on the hot path
+    if (name != nameArg) {
+      return name;
-   * @param name the fully qualified class name
+   * @param nameArg the fully qualified class name
-  public static String processOutgoingClassName(String name, DataOutput out) {
-    // TCPServer classes are used before a cache exists and support for old clients has been
-    // initialized
-    if (name.startsWith(POST_GEODE_100_TCPSERVER_PACKAGE)) {
-      return PRE_GEODE_100_TCPSERVER_PACKAGE
-          + name.substring(POST_GEODE_100_TCPSERVER_PACKAGE.length());
+  public static String processOutgoingClassName(final String nameArg, DataOutput out) {
+
+    final String name = StaticSerialization.processOutgoingClassName(nameArg);
+    // using identity comparison on purpose because we are on the hot path
+    if (name != nameArg) {
+      return name;
+
-          writePrimitiveClass(c, out);
+          StaticSerialization.writePrimitiveClass(c, out);
-        dsfidSerializer.writeDSFID(o, out);
+        dsfidSerializer.write(o, out);
-   * Writes the type code for a primitive type Class to {@code DataOutput}.
-   */
-  public static void writePrimitiveClass(Class c, DataOutput out) throws IOException {
-    if (c == Boolean.TYPE) {
-      out.writeByte(DSCODE.BOOLEAN_TYPE.toByte());
-    } else if (c == Character.TYPE) {
-      out.writeByte(DSCODE.CHARACTER_TYPE.toByte());
-    } else if (c == Byte.TYPE) {
-      out.writeByte(DSCODE.BYTE_TYPE.toByte());
-    } else if (c == Short.TYPE) {
-      out.writeByte(DSCODE.SHORT_TYPE.toByte());
-    } else if (c == Integer.TYPE) {
-      out.writeByte(DSCODE.INTEGER_TYPE.toByte());
-    } else if (c == Long.TYPE) {
-      out.writeByte(DSCODE.LONG_TYPE.toByte());
-    } else if (c == Float.TYPE) {
-      out.writeByte(DSCODE.FLOAT_TYPE.toByte());
-    } else if (c == Double.TYPE) {
-      out.writeByte(DSCODE.DOUBLE_TYPE.toByte());
-    } else if (c == Void.TYPE) {
-      out.writeByte(DSCODE.VOID_TYPE.toByte());
-    } else if (c == null) {
-      out.writeByte(DSCODE.NULL.toByte());
-    } else {
-      throw new InternalGemFireError(
-          String.format("unknown primitive type: %s",
-              c.getName()));
-    }
-  }
-
-  public static Class<?> decodePrimitiveClass(byte typeCode) throws IOException {
-    DSCODE dscode = DscodeHelper.toDSCODE(typeCode);
-    switch (dscode) {
-      case BOOLEAN_TYPE:
-        return Boolean.TYPE;
-      case CHARACTER_TYPE:
-        return Character.TYPE;
-      case BYTE_TYPE:
-        return Byte.TYPE;
-      case SHORT_TYPE:
-        return Short.TYPE;
-      case INTEGER_TYPE:
-        return Integer.TYPE;
-      case LONG_TYPE:
-        return Long.TYPE;
-      case FLOAT_TYPE:
-        return Float.TYPE;
-      case DOUBLE_TYPE:
-        return Double.TYPE;
-      case VOID_TYPE:
-        return Void.TYPE;
-      case NULL:
-        return null;
-      default:
-        throw new InternalGemFireError(
-            String.format("unexpected typeCode: %s", typeCode));
-    }
-  }
-
-  /**
-    } else if (o instanceof DataSerializableFixedID) {
+    } else if (o instanceof BasicSerializable) {
-      DataSerializableFixedID dsfid = (DataSerializableFixedID) o;
-      dsfidSerializer.writeDSFID(dsfid, out);
+      BasicSerializable bs = (BasicSerializable) o;
+      dsfidSerializer.write(bs, out);
-      DataSerializable ds = (DataSerializable) o;
-      invokeToData(ds, out);
-
+      invokeToData(o, out);
-   * @param ds the object to write
+   * @param serializableObject the object to write
-  public static void invokeToData(Object ds, DataOutput out) throws IOException {
+  public static void invokeToData(Object serializableObject, DataOutput out) throws IOException {
-      if (ds instanceof DataSerializableFixedID) {
-        dsfidSerializer.invokeToData(ds, out);
+      if (serializableObject instanceof BasicSerializable) {
+        dsfidSerializer.invokeToData(serializableObject, out);
-        if (ds instanceof SerializationVersions) {
-          SerializationVersions sv = (SerializationVersions) ds;
+        if (serializableObject instanceof SerializationVersions) {
+          SerializationVersions sv = (SerializationVersions) serializableObject;
-              ds.getClass().getMethod("toDataPre_" + version.getMethodSuffix(),
-                  new Class[] {DataOutput.class}).invoke(ds, out);
+              serializableObject.getClass().getMethod("toDataPre_" + version.getMethodSuffix(),
+                  new Class[] {DataOutput.class}).invoke(serializableObject, out);
-        ((DataSerializable) ds).toData(out);
+        ((DataSerializable) serializableObject).toData(out);
-      throw new ToDataException("toData failed on DataSerializable " + ds.getClass(), io);
+      throw new ToDataException(
+          "toData failed on DataSerializable " + serializableObject.getClass(), io);
-          "toData failed on DataSerializable " + null == ds ? "null" : ds.getClass().toString(), t);
+          "toData failed on DataSerializable " + null == serializableObject ? "null"
+              : serializableObject.getClass().toString(),
+          t);
-   * @param ds the object to write
+   * @param deserializableObject the object to write
-  public static void invokeFromData(Object ds, DataInput in)
+  public static void invokeFromData(Object deserializableObject, DataInput in)
-    if (ds instanceof DataSerializableFixedID) {
-      dsfidSerializer.invokeFromData(ds, in);
+    if (deserializableObject instanceof BasicSerializable) {
+      dsfidSerializer.invokeFromData(deserializableObject, in);
-        if (ds instanceof SerializationVersions) {
-          SerializationVersions vds = (SerializationVersions) ds;
+        if (deserializableObject instanceof SerializationVersions) {
+          SerializationVersions vds = (SerializationVersions) deserializableObject;
-              ds.getClass().getMethod("fromDataPre" + '_' + version.getMethodSuffix(),
-                  new Class[] {DataInput.class}).invoke(ds, in);
+              deserializableObject.getClass()
+                  .getMethod("fromDataPre" + '_' + version.getMethodSuffix(),
+                      new Class[] {DataInput.class})
+                  .invoke(deserializableObject, in);
-        ((DataSerializable) ds).fromData(in);
+        ((DataSerializable) deserializableObject).fromData(in);
-              ds);
+              deserializableObject);
-              ds.getClass().getName()),
+              deserializableObject.getClass().getName()),
-    Class<? extends DataSerializer> c = (Class<? extends DataSerializer>) readClass(in);
+    final Class<?> c = readClass(in);
-      Constructor<? extends DataSerializer> init = c.getConstructor();
+      Constructor<?> init = c.getConstructor();
