Refactoring request/response into a common class in protobuf driver

Refactoring the logic to actually interact with a socket to a common
class in the geode-experimental-driver. This reduces duplicate code and
will also make it easier to plugin in connection pooling and failover at
a later time.

-import java.io.InputStream;
-import java.io.OutputStream;
-import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol;
+import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol.Message;
+import org.apache.geode.internal.protocol.protobuf.v1.ClientProtocol.Message.MessageTypeCase;
+import org.apache.geode.internal.protocol.protobuf.v1.RegionAPI.GetRegionRequest;
+import org.apache.geode.internal.protocol.protobuf.v1.RegionAPI.GetRequest;
+import org.apache.geode.internal.protocol.protobuf.v1.RegionAPI.PutRequest;
+import org.apache.geode.internal.protocol.protobuf.v1.RegionAPI.RemoveRequest;
-  /**
-   * Socket to a GemFire server that has Protobuf enabled.
-   */
-  final Socket socket;
+  final ProtobufChannel protobufChannel;
-   * @param socket Socket to a GemFire server that has Protobuf enabled.
-  ProtobufRegion(String name, Socket socket) {
+  ProtobufRegion(String name, ProtobufChannel channel) {
-    this.socket = socket;
-  }
-
-  private ClientProtocol.Message readResponse() throws IOException {
-    final InputStream inputStream = socket.getInputStream();
-    ClientProtocol.Message response = ClientProtocol.Message.parseDelimitedFrom(inputStream);
-    final ClientProtocol.ErrorResponse errorResponse = response.getErrorResponse();
-    if (errorResponse != null && errorResponse.hasError()) {
-      throw new IOException(errorResponse.getError().getMessage());
-    }
-    return response;
+    this.protobufChannel = channel;
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder()
-        .setGetRegionRequest(RegionAPI.GetRegionRequest.newBuilder().setRegionName(name)).build()
-        .writeDelimitedTo(outputStream);
+    final Message request = Message.newBuilder()
+        .setGetRegionRequest(GetRegionRequest.newBuilder().setRegionName(name)).build();
-    return new RegionAttributes(readResponse().getGetRegionResponse().getRegion());
+    return new RegionAttributes(
+        protobufChannel.sendRequest(request, MessageTypeCase.GETREGIONRESPONSE)
+            .getGetRegionResponse().getRegion());
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder().setGetRequest(
-        RegionAPI.GetRequest.newBuilder().setRegionName(name).setKey(ValueEncoder.encodeValue(key)))
-        .build().writeDelimitedTo(outputStream);
+    Message request = Message.newBuilder()
+        .setGetRequest(
+            GetRequest.newBuilder().setRegionName(name).setKey(ValueEncoder.encodeValue(key)))
+        .build();
+    final Message response = protobufChannel.sendRequest(request, MessageTypeCase.GETRESPONSE);
-    final ClientProtocol.Message response = readResponse();
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder().setGetAllRequest(getAllRequest).build()
-        .writeDelimitedTo(outputStream);
+    Message request = Message.newBuilder().setGetAllRequest(getAllRequest).build();
-    final RegionAPI.GetAllResponse getAllResponse = readResponse().getGetAllResponse();
+    Message message = protobufChannel.sendRequest(request, MessageTypeCase.GETALLRESPONSE);
+
+    final RegionAPI.GetAllResponse getAllResponse = message.getGetAllResponse();
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder().setPutRequest(RegionAPI.PutRequest.newBuilder()
-        .setRegionName(name).setEntry(ValueEncoder.encodeEntry(key, value))).build()
-        .writeDelimitedTo(outputStream);
+    final Message request = Message.newBuilder().setPutRequest(
+        PutRequest.newBuilder().setRegionName(name).setEntry(ValueEncoder.encodeEntry(key, value)))
+        .build();
-    readResponse();
+    protobufChannel.sendRequest(request, MessageTypeCase.PUTRESPONSE);
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder().setPutAllRequest(putAllRequest).build()
-        .writeDelimitedTo(outputStream);
+    final Message request = Message.newBuilder().setPutAllRequest(putAllRequest).build();
-    final RegionAPI.PutAllResponse putAllResponse = readResponse().getPutAllResponse();
+    final RegionAPI.PutAllResponse putAllResponse =
+        protobufChannel.sendRequest(request, MessageTypeCase.PUTALLRESPONSE).getPutAllResponse();
-    final OutputStream outputStream = socket.getOutputStream();
-    ClientProtocol.Message.newBuilder().setRemoveRequest(RegionAPI.RemoveRequest.newBuilder()
-        .setRegionName(name).setKey(ValueEncoder.encodeValue(key))).build()
-        .writeDelimitedTo(outputStream);
+    final Message request = Message.newBuilder()
+        .setRemoveRequest(
+            RemoveRequest.newBuilder().setRegionName(name).setKey(ValueEncoder.encodeValue(key)))
+        .build();
-    readResponse();
+    protobufChannel.sendRequest(request, MessageTypeCase.REMOVERESPONSE);
