Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.GemFireIOException;
-import com.gemstone.gemfire.internal.InternalDataSerializer.Sendable;
+import com.gemstone.gemfire.internal.Sendable;
+import com.gemstone.gemfire.internal.cache.CachedDeserializable;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+import com.gemstone.gemfire.internal.cache.Token;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.NewValueImporter;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.SerializedCacheValueImpl;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl;
-public class ClientUpdateMessageImpl implements ClientUpdateMessage, Sizeable
+public class ClientUpdateMessageImpl implements ClientUpdateMessage, Sizeable, NewValueImporter
+  // NewValueImporter methods
+  
+  @Override
+  public boolean prefersNewSerialized() {
+    return true;
+  }
+
+  @Override
+  public boolean isUnretainedNewReferenceOk() {
+    return false;
+  }
+
+  @Override
+  public void importNewObject(Object nv, boolean isSerialized) {
+    if (!isSerialized) {
+      throw new IllegalStateException("Expected importNewBytes to be called.");
+    }
+    try {
+      this._value = CacheServerHelper.serialize(nv);
+    } catch (IOException e) {
+      throw new GemFireIOException("Exception serializing entry value", e);
+    }
+  }
+
+  @Override
+  public void importNewBytes(byte[] nv, boolean isSerialized) {
+    if (!isSerialized) {
+      // The value is already a byte[]. Set _valueIsObject flag to 0x00
+      // (not an object)
+      this._valueIsObject = 0x00;
+    }
+    this._value = nv;
+  }
+
