Merge branch 'release/1.0.0-incubating.M3'

-import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.TX_ENTRY_STATE;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Set;
-
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.cache.CacheRuntimeException;
-import com.gemstone.gemfire.cache.CacheWriter;
-import com.gemstone.gemfire.cache.CacheWriterException;
-import com.gemstone.gemfire.cache.CommitConflictException;
-import com.gemstone.gemfire.cache.DataPolicy;
-import com.gemstone.gemfire.cache.EntryDestroyedException;
-import com.gemstone.gemfire.cache.EntryEvent;
-import com.gemstone.gemfire.cache.EntryNotFoundException;
-import com.gemstone.gemfire.cache.Operation;
-import com.gemstone.gemfire.cache.Region;
-import com.gemstone.gemfire.cache.RegionDestroyedException;
-import com.gemstone.gemfire.cache.TimeoutException;
+import com.gemstone.gemfire.cache.*;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.gemstone.gemfire.internal.cache.delta.Delta;
-import com.gemstone.gemfire.internal.cache.versions.RegionVersionVector;
+import org.apache.logging.log4j.Logger;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.TX_ENTRY_STATE;
- * @since 4.0
+ * @since GemFire 4.0
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-  //Asif: In case of Sqlfabric, the pending value may be a SerializableDelta object 
-  //which may be containing base value ( in case of Tx create) along with bunch 
-  //of incremental deltas, so for correct behaviour this field should be accessed only 
-  //by its getter. Do not use it directly  
-  private static final boolean DETECT_READ_CONFLICTS = Boolean.getBoolean("gemfire.detectReadConflicts");
+  private static final boolean DETECT_READ_CONFLICTS = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "detectReadConflicts");
-  private static final boolean VERBOSE_CONFLICT_STRING = Boolean.getBoolean("gemfire.verboseConflictString");
+  private static final boolean VERBOSE_CONFLICT_STRING = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "verboseConflictString");
-    Object value = this.originalValue;
-    
-    if(value instanceof Delta) {
-      value = ((Delta) value).getResultantValue();
-    }
-    
-    return value;
+    return this.originalValue;
-    Object value = this.pendingValue;
-    
-    if(value instanceof Delta) {
-      value = ((Delta) value).getResultantValue();
-    }
-    
-    return value;
+    return this.pendingValue;
-    if(pv instanceof Delta) {
-      Object toMerge = this.pendingValue;      
-      this.pendingValue = ((Delta)pv).merge(toMerge, this.op == OP_CREATE);
-    }else {
-      this.pendingValue = pv;
-    }
+    this.pendingValue = pv;
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.1
+   * @since GemFire 5.1
-   * @since 5.5
+   * @since GemFire 5.5
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
+  @Retained
-    //TODO:ASIF : Shopuld we generate EventID ? At this point not generating
-    EntryEventImpl result = new TxEntryEventImpl(eventRegion, key);
-    // OFFHEAP: freeOffHeapResources on this event is called from TXEvent.freeOffHeapResources.
+    @Retained EntryEventImpl result = new TxEntryEventImpl(eventRegion, key);
-
-  /* TODO OFFHEAP MERGE: is this code needed?
-  @Retained
-  protected final Object getRetainedValueInTXOrRegion() {
-    @Unretained Object val = this.getValueInTXOrRegion();
-    if (val instanceof Chunk) {
-      if (!((Chunk) val).retain()) {
-        throw new IllegalStateException("Could not retain OffHeap value=" + val);
-      }
-    }
-    return val;
-  }
-  */
-
-    if (LogService.getLogger().isDebugEnabled()) {
-      LogService.getLogger().debug(
+    if (logger.isDebugEnabled()) {
+      logger.debug(
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.0
+   * @since GemFire 5.0
-        // this value shouldn't be a Delta
-        Assert.assertTrue(!(v instanceof Delta));
-    
-   * @since 5.0
+   * @since GemFire 5.0
+    @Retained
-  // Asif:Add for sql fabric as it has to plug in its own TXEntry object
