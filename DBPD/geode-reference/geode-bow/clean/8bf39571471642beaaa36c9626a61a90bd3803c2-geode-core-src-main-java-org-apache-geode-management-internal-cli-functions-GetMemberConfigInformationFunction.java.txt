Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    boolean hideDefaults = ((Boolean)argsObject).booleanValue();
-    
+    boolean hideDefaults = ((Boolean) argsObject).booleanValue();
+
-    
+
-    memberConfigInfo.setJvmInputArguments(getJvmInputArguments()); 
-    memberConfigInfo.setGfePropsRuntime(distConfigImpl.getConfigPropsFromSource(ConfigSource.runtime()));
-    memberConfigInfo.setGfePropsSetUsingApi(distConfigImpl.getConfigPropsFromSource(ConfigSource.api()));
-    
+    memberConfigInfo.setJvmInputArguments(getJvmInputArguments());
+    memberConfigInfo
+        .setGfePropsRuntime(distConfigImpl.getConfigPropsFromSource(ConfigSource.runtime()));
+    memberConfigInfo
+        .setGfePropsSetUsingApi(distConfigImpl.getConfigPropsFromSource(ConfigSource.api()));
+
-    
+
-    
-    //CacheAttributes
+
+    // CacheAttributes
-    
+
-    }
-    else {
+    } else {
-    
-    cacheAttributes.put("pdx-ignore-unread-fields", Boolean.toString(cache.getPdxIgnoreUnreadFields()));
+
+    cacheAttributes.put("pdx-ignore-unread-fields",
+        Boolean.toString(cache.getPdxIgnoreUnreadFields()));
-    
+
-    
+
-  
+
-    
+
-        cacheServerAttributes.put("max-connections", Integer.toString(cacheServer.getMaxConnections()));
-        cacheServerAttributes.put("maximum-message-count", Integer.toString(cacheServer.getMaximumMessageCount()));
-        cacheServerAttributes.put("maximum-time-between-pings", Integer.toString(cacheServer.getMaximumTimeBetweenPings()));
+        cacheServerAttributes.put("max-connections",
+            Integer.toString(cacheServer.getMaxConnections()));
+        cacheServerAttributes.put("maximum-message-count",
+            Integer.toString(cacheServer.getMaximumMessageCount()));
+        cacheServerAttributes.put("maximum-time-between-pings",
+            Integer.toString(cacheServer.getMaximumTimeBetweenPings()));
-        cacheServerAttributes.put("message-time-to-live", Integer.toString(cacheServer.getMessageTimeToLive()));
-        cacheServerAttributes.put("notify-by-subscription", Boolean.toString(cacheServer.getNotifyBySubscription()));
+        cacheServerAttributes.put("message-time-to-live",
+            Integer.toString(cacheServer.getMessageTimeToLive()));
+        cacheServerAttributes.put("notify-by-subscription",
+            Boolean.toString(cacheServer.getNotifyBySubscription()));
-        cacheServerAttributes.put(SOCKET_BUFFER_SIZE, Integer.toString(cacheServer.getSocketBufferSize()));
-        cacheServerAttributes.put("load-poll-interval", Long.toString(cacheServer.getLoadPollInterval()));
+        cacheServerAttributes.put(SOCKET_BUFFER_SIZE,
+            Integer.toString(cacheServer.getSocketBufferSize()));
+        cacheServerAttributes.put("load-poll-interval",
+            Long.toString(cacheServer.getLoadPollInterval()));
-        
+
-    }
-    
+      }
+
-  
+
+
+   * 
-    Map <String, String> cacheAttributesDefault = new HashMap<String, String> ();
+    Map<String, String> cacheAttributesDefault = new HashMap<String, String>();
-    cacheAttributesDefault.put("pdx-read-serialized", Boolean.toString(CacheConfig.DEFAULT_PDX_READ_SERIALIZED));
-    cacheAttributesDefault.put("pdx-ignore-unread-fields", Boolean.toString(CacheConfig.DEFAULT_PDX_IGNORE_UNREAD_FIELDS));
-    cacheAttributesDefault.put("pdx-persistent", Boolean.toString(CacheConfig.DEFAULT_PDX_PERSISTENT));
-    cacheAttributesDefault.put("copy-on-read", Boolean.toString(GemFireCacheImpl.DEFAULT_COPY_ON_READ));
-    cacheAttributesDefault.put("lock-timeout", Integer.toString(GemFireCacheImpl.DEFAULT_LOCK_TIMEOUT));
+    cacheAttributesDefault.put("pdx-read-serialized",
+        Boolean.toString(CacheConfig.DEFAULT_PDX_READ_SERIALIZED));
+    cacheAttributesDefault.put("pdx-ignore-unread-fields",
+        Boolean.toString(CacheConfig.DEFAULT_PDX_IGNORE_UNREAD_FIELDS));
+    cacheAttributesDefault.put("pdx-persistent",
+        Boolean.toString(CacheConfig.DEFAULT_PDX_PERSISTENT));
+    cacheAttributesDefault.put("copy-on-read",
+        Boolean.toString(GemFireCacheImpl.DEFAULT_COPY_ON_READ));
+    cacheAttributesDefault.put("lock-timeout",
+        Integer.toString(GemFireCacheImpl.DEFAULT_LOCK_TIMEOUT));
-    cacheAttributesDefault.put("message-sync-interval", Integer.toString(HARegionQueue.DEFAULT_MESSAGE_SYNC_INTERVAL));
-    cacheAttributesDefault.put("search-timeout", Integer.toString(GemFireCacheImpl.DEFAULT_SEARCH_TIMEOUT));
+    cacheAttributesDefault.put("message-sync-interval",
+        Integer.toString(HARegionQueue.DEFAULT_MESSAGE_SYNC_INTERVAL));
+    cacheAttributesDefault.put("search-timeout",
+        Integer.toString(GemFireCacheImpl.DEFAULT_SEARCH_TIMEOUT));
-  
+
+   * 
-    Map <String, String> csAttributesDefault = new HashMap<String, String> ();
+    Map<String, String> csAttributesDefault = new HashMap<String, String>();
-    csAttributesDefault.put("max-connections", Integer.toString(CacheServer.DEFAULT_MAX_CONNECTIONS));
-    csAttributesDefault.put("maximum-message-count", Integer.toString(CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT));
-    csAttributesDefault.put("maximum-time-between-pings", Integer.toString(CacheServer.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS));
+    csAttributesDefault.put("max-connections",
+        Integer.toString(CacheServer.DEFAULT_MAX_CONNECTIONS));
+    csAttributesDefault.put("maximum-message-count",
+        Integer.toString(CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT));
+    csAttributesDefault.put("maximum-time-between-pings",
+        Integer.toString(CacheServer.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS));
-    csAttributesDefault.put("message-time-to-live", Integer.toString(CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE));
-    csAttributesDefault.put("notify-by-subscription", Boolean.toString(CacheServer.DEFAULT_NOTIFY_BY_SUBSCRIPTION));
+    csAttributesDefault.put("message-time-to-live",
+        Integer.toString(CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE));
+    csAttributesDefault.put("notify-by-subscription",
+        Boolean.toString(CacheServer.DEFAULT_NOTIFY_BY_SUBSCRIPTION));
-    csAttributesDefault.put(SOCKET_BUFFER_SIZE, Integer.toString(CacheServer.DEFAULT_SOCKET_BUFFER_SIZE));
-    csAttributesDefault.put("load-poll-interval", Long.toString(CacheServer.DEFAULT_LOAD_POLL_INTERVAL));
+    csAttributesDefault.put(SOCKET_BUFFER_SIZE,
+        Integer.toString(CacheServer.DEFAULT_SOCKET_BUFFER_SIZE));
+    csAttributesDefault.put("load-poll-interval",
+        Long.toString(CacheServer.DEFAULT_LOAD_POLL_INTERVAL));
-  
+
+   * 
-  private void removeDefaults (Map<String, String> attributesMap, Map<String, String> defaultAttributesMap) {
-    //Make a copy to avoid the CME's
+  private void removeDefaults(Map<String, String> attributesMap,
+      Map<String, String> defaultAttributesMap) {
+    // Make a copy to avoid the CME's
-    
+
-        
+
+
-  
+
