GEODE-8205: add gfsh redis command (#5226)

Unsupported commands can now be enabled dynamically on running servers using 'gfsh redis --enable-unsupported-commands'.

A warning is now logged if unsupported commands are enabled.
The error message has been improved.

+import org.apache.geode.redis.internal.gfsh.RedisCommandFunction;
-  private static final boolean ENABLE_REDIS_UNSUPPORTED_COMMANDS =
+  /**
+   * Initialized with system property value but can also
+   * be explicitly set by tests.
+   */
+  private static volatile boolean ENABLE_REDIS_UNSUPPORTED_COMMANDS =
-  private volatile boolean allowUnsupportedCommands = false;
+  public static final String REDIS_CONFIG_REGION = "__REDIS_CONFIG";
+
+    if (ENABLE_REDIS_UNSUPPORTED_COMMANDS) {
+      logUnsupportedCommandWarning();
+    }
-    this.allowUnsupportedCommands = allowUnsupportedCommands;
+    if (regionProvider != null) {
+      Region<String, Object> configRegion = regionProvider.getConfigRegion();
+      configRegion.put(GeodeRedisServer.ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM,
+          allowUnsupportedCommands);
+    } else {
+      ENABLE_REDIS_UNSUPPORTED_COMMANDS = allowUnsupportedCommands;
+    }
+    if (allowUnsupportedCommands) {
+      logUnsupportedCommandWarning();
+    }
-    if (allowUnsupportedCommands) {
-      return true;
+    if (regionProvider != null) {
+      return (boolean) regionProvider.getConfigRegion()
+          .getOrDefault(ENABLE_REDIS_UNSUPPORTED_COMMANDS_PARAM, ENABLE_REDIS_UNSUPPORTED_COMMANDS);
+    } else {
+      return ENABLE_REDIS_UNSUPPORTED_COMMANDS;
+  }
-    return ENABLE_REDIS_UNSUPPORTED_COMMANDS;
+  private void logUnsupportedCommandWarning() {
+    logger.warn("Unsupported commands enabled. Unsupported commands have not been fully tested.");
+      InternalRegionFactory<String, Object> redisConfigRegionFactory =
+          gemFireCache.createInternalRegionFactory(RegionShortcut.REPLICATE);
+      redisConfigRegionFactory.setInternalRegion(true).setIsUsedForMetaRegion(true);
+      Region<String, Object> redisConfig = redisConfigRegionFactory.create(REDIS_CONFIG_REGION);
+
-      regionProvider = new RegionProvider(redisData);
+      regionProvider = new RegionProvider(redisData, redisConfig);
+      RedisCommandFunction.register();
