GEODE-3915: use ClassName type for cache-loader, writer and listeners (#1327)

* GEODE-3915: use ClassName type for cache-loader, writer and listeners

* use json string to specify the init properties
* make sure the parser works when multiple ClassNames are specified in the command line.
* rework AlterRegionCommandDUnitTest
* make sure AnalyzeSerializableJunitTest works in IDEA.

Signed-off-by: Patrick Rhomberg <prhomberg@pivotal.io>

+import org.apache.geode.cache.CacheListener;
+import org.apache.geode.cache.CacheLoader;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.management.internal.cli.domain.ClassName;
-          help = CliStrings.CREATE_REGION__CACHELISTENER__HELP) String[] cacheListener,
+          // split the input only with "," outside of json string
+          optionContext = "splittingRegex=,(?![^{]*\\})",
+          help = CliStrings.CREATE_REGION__CACHELISTENER__HELP) ClassName<CacheListener>[] cacheListener,
-          help = CliStrings.CREATE_REGION__CACHELOADER__HELP) String cacheLoader,
+          help = CliStrings.CREATE_REGION__CACHELOADER__HELP) ClassName<CacheLoader> cacheLoader,
-          help = CliStrings.CREATE_REGION__CACHEWRITER__HELP) String cacheWriter,
+          help = CliStrings.CREATE_REGION__CACHEWRITER__HELP) ClassName<CacheWriter> cacheWriter,
-      if (keyConstraint != null && !RegionCommandsUtils.isClassNameValid(keyConstraint)) {
+      if (keyConstraint != null && !ClassName.isClassNameValid(keyConstraint)) {
-      if (valueConstraint != null && !RegionCommandsUtils.isClassNameValid(valueConstraint)) {
+      if (valueConstraint != null && !ClassName.isClassNameValid(valueConstraint)) {
-      String cacheListenerList =
-          parseResult.getParamValueAsString(CliStrings.CREATE_REGION__CACHELISTENER);
-      if (cacheListenerList != null) {
-        String[] cacheListeners = cacheListenerList.split(",");
-        for (String cacheListener : cacheListeners) {
-          if (!RegionCommandsUtils.isClassNameValid(cacheListener)) {
-            return ResultBuilder.createUserErrorResult(CliStrings.format(
-                CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELISTENER_0_IS_INVALID,
-                new Object[] {cacheListener}));
-          }
-        }
-      }
-
-      String cacheLoader = parseResult.getParamValueAsString(CliStrings.CREATE_REGION__CACHELOADER);
-      if (cacheLoader != null && !RegionCommandsUtils.isClassNameValid(cacheLoader)) {
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHELOADER_0_IS_INVALID,
-            new Object[] {cacheLoader}));
-      }
-
-      String cacheWriter = parseResult.getParamValueAsString(CliStrings.CREATE_REGION__CACHEWRITER);
-      if (cacheWriter != null && !RegionCommandsUtils.isClassNameValid(cacheWriter)) {
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
-            CliStrings.CREATE_REGION__MSG__SPECIFY_VALID_CLASSNAME_FOR_CACHEWRITER_0_IS_INVALID,
-            new Object[] {cacheWriter}));
-      }
-
-      if (compressor != null && !RegionCommandsUtils.isClassNameValid(compressor)) {
+      if (compressor != null && !ClassName.isClassNameValid(compressor)) {
