GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.io.File;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.logging.log4j.Logger;
-
-import java.io.File;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.concurrent.*;
-  // private static final boolean AUTO_RECONNECT =
-  // Boolean.getBoolean("gemfire.DISK_USAGE_ENABLE_AUTO_RECONNECT");
+
-              .toLocalizedString(Float.valueOf(val)));
+              .toLocalizedString(val));
-              .toLocalizedString(Float.valueOf(val)));
+              .toLocalizedString(val));
-  private final LogUsage logDisk;
-  // // this is set when we go into auto_reconnect mode
-  // private volatile DirectoryHolderUsage criticalDisk;
+  private final LogUsage logDisk;
-    GemFireCacheImpl gci = GemFireCacheImpl.getInstance();
-    if (gci != null) {
-      InternalDistributedSystem ds = gci.getInternalDistributedSystem();
+    InternalCache internalCache = GemFireCacheImpl.getInstance();
+    if (internalCache != null) {
+      InternalDistributedSystem ds = internalCache.getInternalDistributedSystem();
-  abstract class DiskUsage {
+  abstract static class DiskUsage {
-  class LogUsage extends DiskUsage {
+  static class LogUsage extends DiskUsage {
-          try {
-            // // prepare for restart
-            // if (AUTO_RECONNECT) {
-            // disk.getCache().saveCacheXmlForReconnect();
-            // criticalDisk = this;
-            // }
-          } finally {
-            // pull the plug
-            disk.handleDiskAccessException(new DiskAccessException(msg, disk));
-          }
+          // TODO: this is weird...
+          disk.handleDiskAccessException(new DiskAccessException(msg, disk));
-    // private void performReconnect(String msg) {
-    // try {
-    // // don't try to reconnect before the cache is closed
-    // disk._testHandleDiskAccessException.await();
-    //
-    // // now reconnect, clear out the var first so a close can interrupt the
-    // // reconnect
-    // criticalDisk = null;
-    // boolean restart = disk.getCache().getDistributedSystem().tryReconnect(true, msg,
-    // disk.getCache());
-    // if (LogMarker.DISK_STORE_MONITOR || logger.isDebugEnabled()) {
-    // String pre = restart ? "Successfully" : "Unsuccessfully";
-    // logger.info(LocalizedStrings.DEBUG, pre + " attempted to restart cache");
-    // }
-    // } catch (InterruptedException e) {
-    // Thread.currentThread().interrupt();
-    // } finally {
-    // close();
-    // }
-    // }
-
