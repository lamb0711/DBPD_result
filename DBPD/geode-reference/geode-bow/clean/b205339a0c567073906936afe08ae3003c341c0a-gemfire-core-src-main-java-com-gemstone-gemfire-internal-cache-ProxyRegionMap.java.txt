Merge branch 'feature/GEODE-8' into develop

+  @Override
+  public Collection<RegionEntry> regionEntriesInVM() {
+    return Collections.emptySet();
+  }
+
+  public RegionEntry putEntryIfAbsent(Object key, RegionEntry re) {
+    return null;
+  }
+
+        boolean cbEventInPending = false;
+        try {
+          cbEventInPending = true;
+        }
+        } finally {
+          if (!cbEventInPending) e.release();
+        boolean cbEventInPending = false;
+        try {
+          cbEventInPending = true;
+        }
+        } finally {
+          if (!cbEventInPending) e.release();
+        boolean cbEventInPending = false;
+        try {
+          cbEventInPending = true;
+        }
+        } finally {
+          if (!cbEventInPending) e.release();
+    @Override
+    public Object getValueRetain(RegionEntryContext context) {
+      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    }
+    
+    
+    @Override
+    public Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate) {
+      throw new IllegalStateException("Should never be called");
+    }
-    public Object _getValueUse(RegionEntryContext context, boolean decompress) {
+    public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
-    
+
+    @Override
+    public boolean isMarkedForEviction() {
+      throw new UnsupportedOperationException(LocalizedStrings
+          .ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+    @Override
+    public void setMarkedForEviction() {
+      throw new UnsupportedOperationException(LocalizedStrings
+          .ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+    @Override
+    public void clearMarkedForEviction() {
+      throw new UnsupportedOperationException(LocalizedStrings
+          .ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+
+    @Override
+    public Object prepareValueForCache(RegionEntryContext r, Object val,
+        EntryEventImpl event, boolean isEntryUpdate) {
+      throw new IllegalStateException("Should never be called");
+    }
+  public RegionEntry getOperationalEntryInVM(Object key) {
+    return null;
+  }
+
+  @Override
+
+  @Override
+  public void close() {
+  }
