Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-import org.apache.geode.SystemFailure;
-import org.apache.geode.internal.security.SecurityService;
-import org.apache.geode.security.NotAuthorizedException;
-      relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG})
+      isFileUploaded = true, relatedTopic = {CliStrings.TOPIC_GEODE_CONFIG})
-      operation = ResourcePermission.Operation.MANAGE, target = ResourcePermission.Target.JAR)
+      operation = ResourcePermission.Operation.MANAGE, target = ResourcePermission.Target.DEPLOY)
-    try {
-      // since deploy function can potentially do a lot of damage to security, this action should
-      // require these following privileges
-      SecurityService securityService = getSecurityService();
+    TabularResultData tabularData = ResultBuilder.createTabularResultData();
-      TabularResultData tabularData = ResultBuilder.createTabularResultData();
+    byte[][] shellBytesData = CommandExecutionContext.getBytesFromShell();
+    String[] jarNames = CliUtil.bytesToNames(shellBytesData);
+    byte[][] jarBytes = CliUtil.bytesToData(shellBytesData);
-      byte[][] shellBytesData = CommandExecutionContext.getBytesFromShell();
-      String[] jarNames = CliUtil.bytesToNames(shellBytesData);
-      byte[][] jarBytes = CliUtil.bytesToData(shellBytesData);
+    Set<DistributedMember> targetMembers;
-      Set<DistributedMember> targetMembers;
+    targetMembers = CliUtil.findMembers(groups, null);
-      targetMembers = CliUtil.findMembers(groups, null);
+    if (targetMembers.size() > 0) {
+      // this deploys the jars to all the matching servers
+      ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(this.deployFunction,
+          new Object[] {jarNames, jarBytes}, targetMembers);
-      if (targetMembers.size() > 0) {
-        // this deploys the jars to all the matching servers
-        ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(this.deployFunction,
-            new Object[] {jarNames, jarBytes}, targetMembers);
+      List<CliFunctionResult> results =
+          CliFunctionResult.cleanResults((List<?>) resultCollector.getResult());
-        List<CliFunctionResult> results =
-            CliFunctionResult.cleanResults((List<?>) resultCollector.getResult());
-
-        for (CliFunctionResult result : results) {
-          if (result.getThrowable() != null) {
+      for (CliFunctionResult result : results) {
+        if (result.getThrowable() != null) {
+          tabularData.accumulate("Member", result.getMemberIdOrName());
+          tabularData.accumulate("Deployed JAR", "");
+          tabularData.accumulate("Deployed JAR Location",
+              "ERROR: " + result.getThrowable().getClass().getName() + ": "
+                  + result.getThrowable().getMessage());
+          tabularData.setStatus(Result.Status.ERROR);
+        } else {
+          String[] strings = (String[]) result.getSerializables();
+          for (int i = 0; i < strings.length; i += 2) {
-            tabularData.accumulate("Deployed JAR", "");
-            tabularData.accumulate("Deployed JAR Location",
-                "ERROR: " + result.getThrowable().getClass().getName() + ": "
-                    + result.getThrowable().getMessage());
-            tabularData.setStatus(Result.Status.ERROR);
-          } else {
-            String[] strings = (String[]) result.getSerializables();
-            for (int i = 0; i < strings.length; i += 2) {
-              tabularData.accumulate("Member", result.getMemberIdOrName());
-              tabularData.accumulate("Deployed JAR", strings[i]);
-              tabularData.accumulate("Deployed JAR Location", strings[i + 1]);
-            }
+            tabularData.accumulate("Deployed JAR", strings[i]);
+            tabularData.accumulate("Deployed JAR Location", strings[i + 1]);
-
-      Result result = ResultBuilder.buildResult(tabularData);
-      persistClusterConfiguration(result,
-          () -> getSharedConfiguration().addJarsToThisLocator(jarNames, jarBytes, groups));
-      return result;
-    } catch (NotAuthorizedException e) {
-      // for NotAuthorizedException, will catch this later in the code
-      throw e;
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable t) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createGemFireErrorResult(String
-          .format("Exception while attempting to deploy: (%1$s)", toString(t, isDebugging())));
+
+    Result result = ResultBuilder.buildResult(tabularData);
+    persistClusterConfiguration(result,
+        () -> getSharedConfiguration().addJarsToThisLocator(jarNames, jarBytes, groups));
+    return result;
