GEODE-3469: prevent zero pid from AvailablePid for tests

This closes #724

-
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import java.util.concurrent.TimeUnit;
-import org.apache.geode.internal.util.StopWatch;
+import com.google.common.base.Stopwatch;
-  static final int LOWER_BOUND = 1;
-  static final int UPPER_BOUND = 64000;
+  static final int DEFAULT_LOWER_BOUND = 1;
+  static final int DEFAULT_UPPER_BOUND = 64000;
+  private final int lowerBound;
+  private final int upperBound;
-   * Construct with no seed and default timeout of 1 minute.
+   * Construct with:
+   * <ul>
+   * <li>default {@link Bounds} of {@link #DEFAULT_LOWER_BOUND} (inclusive) and
+   * {@link #DEFAULT_UPPER_BOUND} (inclusive)
+   * <li>Random with no see
+   * <li>default timeout of 1 minute.
+   * </ul>
-    this(new Random(), DEFAULT_TIMEOUT_MILLIS);
+    this(new Bounds(DEFAULT_LOWER_BOUND, DEFAULT_UPPER_BOUND), new Random(),
+        DEFAULT_TIMEOUT_MILLIS);
-   * Construct with specified seed and timeout.
+   * Construct with:
+   * <ul>
+   * <li>default {@link Bounds} of {@link #DEFAULT_LOWER_BOUND} (inclusive) and
+   * {@link #DEFAULT_UPPER_BOUND} (inclusive)
+   * <li>Random with specified seed
+   * <li>default timeout of 1 minute
+   * </ul>
-  public AvailablePid(final long seed, final int timeoutMillis) {
-    this(new Random(seed), timeoutMillis);
+  public AvailablePid(final long seed) {
+    this(new Bounds(DEFAULT_LOWER_BOUND, DEFAULT_UPPER_BOUND), new Random(seed),
+        DEFAULT_TIMEOUT_MILLIS);
-   * Construct with specified Random implementation.
+   * Construct with:
+   * <ul>
+   * <li>default {@link Bounds} of {@link #DEFAULT_LOWER_BOUND} (inclusive) and
+   * {@link #DEFAULT_UPPER_BOUND} (inclusive)
+   * <li>specified Random instance
+   * <li>default timeout of 1 minute
+   * </ul>
-  public AvailablePid(final Random random, final int timeoutMillis) {
+  public AvailablePid(final Random random) {
+    this(new Bounds(DEFAULT_LOWER_BOUND, DEFAULT_UPPER_BOUND), random, DEFAULT_TIMEOUT_MILLIS);
+  }
+
+  /**
+   * Construct with:
+   * <ul>
+   * <li>specified {@link Bounds} of {@code lowerBound} (inclusive) and {@code upperBound}
+   * (inclusive)
+   * <li>Random with no seed
+   * <li>default timeout of 1 minute
+   * </ul>
+   */
+  public AvailablePid(final Bounds bounds) {
+    this(bounds, new Random(), DEFAULT_TIMEOUT_MILLIS);
+  }
+
+  /**
+   * Construct with:
+   * <ul>
+   * <li>specified {@link Bounds} of {@code lowerBound} (inclusive) and {@code upperBound}
+   * (inclusive)
+   * <li>specified Random instance
+   * <li>specified default timeout millis
+   * </ul>
+   */
+  public AvailablePid(final Bounds bounds, final Random random, final int timeoutMillis) {
+    this.lowerBound = bounds.lowerBound;
+    this.upperBound = bounds.upperBound;
-   * Returns specified pid if it's unused. Else returns randomly unused pid.
+   * Returns specified pid if it's unused. Else returns randomly unused pid between
+   * {@code lowerBound} (inclusive) and {@code upperBound} (inclusive).
-   * Returns randomly unused pid.
+   * Returns randomly unused pid between {@code lowerBound} (inclusive) and {@code upperBound}
+   * (inclusive).
-    StopWatch stopWatch = new StopWatch(true);
+    Stopwatch stopwatch = Stopwatch.createStarted();
-      if (stopWatch.elapsedTimeMillis() > timeoutMillis) {
+      if (stopwatch.elapsed(MILLISECONDS) > timeoutMillis) {
-   * Returns specified number of randomly unused pids.
+   * Returns specified number of unique, randomly unused pids between {@code lowerBound} (inclusive)
+   * and {@code upperBound} (inclusive).
-  private int random() {
-    return random.nextInt(UPPER_BOUND - LOWER_BOUND);
+  /**
+   * Returns a value between {@code lowerBound} (inclusive) and {@code upperBound} (inclusive)
+   */
+  int random() {
+    return random.nextInt(upperBound + 1 - lowerBound) + lowerBound;
+  }
+
+  /**
+   * Lower and upper bounds for desired PIDs. Both are inclusive -- if you specify
+   * {@code new Bounds(1, 100)} then {@code AvailablePid} will return values of 1 through 100.
+   *
+   * <ul>
+   * <li>{@code lowerBound} must be an integer greater than zero.
+   * <li>{@code upperBound} must be an integer greater than {@code lowerBound}.
+   * </ul>
+   */
+  static class Bounds {
+    final int lowerBound;
+    final int upperBound;
+
+    Bounds(final int lowerBound, final int upperBound) {
+      if (lowerBound < 1) {
+        throw new IllegalArgumentException("lowerBound must be greater than '0'");
+      }
+      if (upperBound <= lowerBound) {
+        throw new IllegalArgumentException(
+            "upperBound must be greater than lowerBound '" + lowerBound + "'");
+      }
+      this.lowerBound = lowerBound;
+      this.upperBound = upperBound;
+    }
