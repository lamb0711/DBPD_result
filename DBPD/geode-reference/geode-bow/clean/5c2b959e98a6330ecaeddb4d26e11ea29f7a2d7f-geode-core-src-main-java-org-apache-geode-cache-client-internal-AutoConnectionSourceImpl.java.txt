GEODE-7808: standardize on use of HostAndPort for creating connections (#4765)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing

* reinstate SocketCreator ip to hostname cache for performance

* changes from review comments

-import org.apache.geode.distributed.internal.tcpserver.LocatorAddress;
+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;
-  private static final Comparator<LocatorAddress> SOCKET_ADDRESS_COMPARATOR =
+  private static final Comparator<HostAndPort> SOCKET_ADDRESS_COMPARATOR =
-  private final List<LocatorAddress> initialLocators;
+  private final List<HostAndPort> initialLocators;
-  public AutoConnectionSourceImpl(List<LocatorAddress> contacts, String serverGroup,
+  public AutoConnectionSourceImpl(List<HostAndPort> contacts, String serverGroup,
-  private ServerLocationResponse queryOneLocator(LocatorAddress locator,
+  private ServerLocationResponse queryOneLocator(HostAndPort locator,
-  ServerLocationResponse queryOneLocatorUsingConnection(LocatorAddress locator,
+  ServerLocationResponse queryOneLocatorUsingConnection(HostAndPort locator,
-      returnObj = locatorConnection.requestToServer(locator.getSocketInetAddress(), request,
+      returnObj = locatorConnection.requestToServer(locator, request,
-      LocatorAddress hostAddress = (LocatorAddress) controllerItr.next();
+      HostAndPort hostAddress = (HostAndPort) controllerItr.next();
-    List<LocatorAddress> newLocatorAddresses = new ArrayList<>(locatorResponse.size());
-    List<LocatorAddress> newOnlineLocators = new ArrayList<>(locatorResponse.size());
+    List<HostAndPort> newLocatorAddresses = new ArrayList<>(locatorResponse.size());
+    List<HostAndPort> newOnlineLocators = new ArrayList<>(locatorResponse.size());
-    Set<LocatorAddress> badLocators = new HashSet<>(initialLocators);
+    Set<HostAndPort> badLocators = new HashSet<>(initialLocators);
-      InetSocketAddress address = new InetSocketAddress(locator.getHostName(), locator.getPort());
-      LocatorAddress hostAddress = new LocatorAddress(address, locator.getHostName());
+      HostAndPort hostAddress = new HostAndPort(locator.getHostName(), locator.getPort());
-  protected void addbadLocators(List<LocatorAddress> newLocators, Set<LocatorAddress> badLocators) {
-    for (LocatorAddress badloc : badLocators) {
+  protected void addbadLocators(List<HostAndPort> newLocators, Set<HostAndPort> badLocators) {
+    for (HostAndPort badloc : badLocators) {
-      for (LocatorAddress goodloc : newLocators) {
+      for (HostAndPort goodloc : newLocators) {
-    protected final List<LocatorAddress> locators;
+    protected final List<HostAndPort> locators;
-    LocatorList(List<LocatorAddress> locators) {
+    LocatorList(List<HostAndPort> locators) {
-      for (LocatorAddress la : locators) {
+      for (HostAndPort la : locators) {
-    List<LocatorAddress> getLocatorAddresses() {
+    List<HostAndPort> getLocatorAddresses() {
-    public Iterator<LocatorAddress> iterator() {
+    public Iterator<HostAndPort> iterator() {
-    protected class LocatorIterator implements Iterator<LocatorAddress> {
+    protected class LocatorIterator implements Iterator<HostAndPort> {
-      public LocatorAddress next() {
+      public HostAndPort next() {
-          LocatorAddress nextLocator = locators.get(index);
+          HostAndPort nextLocator = locators.get(index);
