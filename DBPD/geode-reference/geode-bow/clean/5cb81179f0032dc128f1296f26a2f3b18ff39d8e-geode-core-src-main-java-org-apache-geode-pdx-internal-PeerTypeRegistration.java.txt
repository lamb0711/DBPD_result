Merge geode develop branch

+import org.apache.geode.annotations.VisibleForTesting;
-          updateClassToTypeMap((PdxType) value);
+          updateLocalMaps((PdxType) value);
+
-      int id = getExistingIdForType(newType);
-      if (id != -1) {
-        return id;
+      if (typeToId.isEmpty()) {
+        buildTypeToIdFromIdToType();
+      }
+      // double check if my type is in region in case the typeToId map has been updated while
+      // waiting to obtain a lock
+      existingId = typeToId.get(newType);
+      if (existingId != null) {
+        return existingId;
-      id = allocateTypeId(newType);
+      int id = allocateTypeId(newType);
-
-
-      typeToId.put(newType, id);
-
-  /** Should be called holding the dlock */
-  private int getExistingIdForType(PdxType newType) {
+  private void buildTypeToIdFromIdToType() {
-      int result = -1;
+            if (totalPdxTypeIdInDS >= this.maxTypeId) {
+              throw new InternalGemFireError(
+                  "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
+                      + this.maxTypeId);
+            }
-          if (foundType.equals(newType)) {
-            result = foundType.getTypeId();
-          }
-      if (totalPdxTypeIdInDS == this.maxTypeId) {
-        throw new InternalGemFireError(
-            "Used up all of the PDX type ids for this distributed system. The maximum number of PDX types is "
-                + this.maxTypeId);
-      }
-      return result;
-  private void updateClassToTypeMap(PdxType type) {
+  private void updateLocalMaps(PdxType type) {
+      typeToId.put(type, type.getTypeId());
+
+  @VisibleForTesting
+  public int getTypeToIdSize() {
+    return typeToId.size();
+  }
