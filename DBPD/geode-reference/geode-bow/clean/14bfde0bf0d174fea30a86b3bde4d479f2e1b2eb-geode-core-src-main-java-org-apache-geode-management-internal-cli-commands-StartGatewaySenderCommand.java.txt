Merge branch 'release/1.8.0'

-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.atomic.AtomicInteger;
+import org.apache.geode.internal.logging.LoggingExecutors;
-import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.cli.SingleGfshCommand;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class StartGatewaySenderCommand extends InternalGfshCommand {
+public class StartGatewaySenderCommand extends SingleGfshCommand {
-  public Result startGatewaySender(@CliOption(key = CliStrings.START_GATEWAYSENDER__ID,
+  public ResultModel startGatewaySender(@CliOption(key = CliStrings.START_GATEWAYSENDER__ID,
-    Result result;
-    final SystemManagementService service = (SystemManagementService) getManagementService();
-
-    TabularResultData resultData = ResultBuilder.createTabularResultData();
+    final SystemManagementService service = getManagementService();
-      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-    ExecutorService execService = Executors.newCachedThreadPool(new ThreadFactory() {
-      AtomicInteger threadNum = new AtomicInteger();
-
-      public Thread newThread(final Runnable r) {
-        Thread result = new Thread(r, "Start Sender Command Thread " + threadNum.incrementAndGet());
-        result.setDaemon(true);
-        return result;
-      }
-    });
+    ExecutorService execService =
+        LoggingExecutors.newCachedThreadPool("Start Sender Command Thread ", true);
-    List<Future<List>> futures = null;
+    List<Future<List>> futures;
-      GatewayCommandsUtils.accumulateStartResult(resultData, null, CliStrings.GATEWAY_ERROR,
+      return ResultModel.createError(
+    } finally {
+      execService.shutdown();
+    ResultModel resultModel = new ResultModel();
+    TabularResultModel resultData = resultModel.addTable(CliStrings.START_GATEWAYSENDER);
-        GatewayCommandsUtils.accumulateStartResult(resultData, memberStatus.get(0),
+        resultData.addMemberStatusResultRow(memberStatus.get(0),
-        GatewayCommandsUtils.accumulateStartResult(resultData, member.getId(),
+        resultData.addMemberStatusResultRow(member.getId(),
-    result = ResultBuilder.buildResult(resultData);
-    return result;
+    return resultModel;
