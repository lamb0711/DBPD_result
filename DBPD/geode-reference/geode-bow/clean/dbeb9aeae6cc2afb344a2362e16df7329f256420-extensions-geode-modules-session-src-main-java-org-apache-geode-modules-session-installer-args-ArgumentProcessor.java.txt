Merge branch 'release/1.1.0'

-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
- * This class is used to process command line arguments for Java programs in a
- * flexible and powerful manner.
+ * This class is used to process command line arguments for Java programs in a flexible and powerful
+ * manner.
-  private static final Logger LOG =
-      Logger.getLogger(ArgumentProcessor.class.getName());
+  private static final Logger LOG = Logger.getLogger(ArgumentProcessor.class.getName());
-     * @param theForm     the form used
-     * @param theParams   the parameters supplied
+     * @param theForm the form used
+     * @param theParams the parameters supplied
-    public Match(
-        final Argument theArgument,
-        final String theForm, final String[] theParams) {
+    public Match(final Argument theArgument, final String theForm, final String[] theParams) {
-  public void setUnknownArgumentHandler(
-      final UnknownArgumentHandler aHandler) {
+  public void setUnknownArgumentHandler(final UnknownArgumentHandler aHandler) {
-  public ArgumentValues process(final String[] programArgs)
-      throws UsageException {
+  public ArgumentValues process(final String[] programArgs) throws UsageException {
-        final UsageException usageException = new UsageException(
-            "Required argument not provided: " + arg);
+        final UsageException usageException =
+            new UsageException("Required argument not provided: " + arg);
-        argHandler.handleArgument(
-            arg, match.getForm(), match.getParams());
+        argHandler.handleArgument(arg, match.getForm(), match.getParams());
-        descriptionLines =
-            breakupString(arg.getDescription(), LINE_LENGTH);
+        descriptionLines = breakupString(arg.getDescription(), LINE_LENGTH);
-   * @param values      values object in which to store results
+   * @param values values object in which to store results
-  private List<Match> checkMatches(
-      final String[] programArgs, final ArgumentValues values)
+  private List<Match> checkMatches(final String[] programArgs, final ArgumentValues values)
-          System.arraycopy(programArgs, idx,
-              postArgs, 0, postArgs.length);
+          System.arraycopy(programArgs, idx, postArgs, 0, postArgs.length);
-      while ((idx2 + 1) < programArgs.length
-          && programArgs[idx2 + 1].charAt(0) != '-') {
+      while ((idx2 + 1) < programArgs.length && programArgs[idx2 + 1].charAt(0) != '-') {
-              "Unknown argument: " + programArgs[idx]
-                  + " with " + params.length + " parameters.");
+              "Unknown argument: " + programArgs[idx] + " with " + params.length + " parameters.");
-   * @param arg     argument
-   * @param params  parameters supplied
+   * @param arg argument
+   * @param params parameters supplied
-  private Match checkMatch(
-      final String argName, final Argument arg, final String[] params) {
+  private Match checkMatch(final String argName, final Argument arg, final String[] params) {
-      if (
-          form.equals(argName)
-              && arg.getParameterCount() == params.length) {
+      if (form.equals(argName) && arg.getParameterCount() == params.length) {
-   * Breaks up a string into sub-strings, each with a length equal to or less
-   * than the max length specified.
+   * Breaks up a string into sub-strings, each with a length equal to or less than the max length
+   * specified.
-   * @param str       string to break up
+   * @param str string to break up
-  private List<String> breakupString(
-      final String str, final int maxLength) {
+  private List<String> breakupString(final String str, final int maxLength) {
-        LOG.fine("startIdx=" + startIdx + "  lastIdx=" + lastIdx
-            + "  idx=" + idx);
+        LOG.fine("startIdx=" + startIdx + "  lastIdx=" + lastIdx + "  idx=" + idx);
