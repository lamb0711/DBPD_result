Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Evaluates the health of various GemFire components in the VM
- * according to a {@link GemFireHealthConfig}.
+ * Evaluates the health of various GemFire components in the VM according to a
+ * {@link GemFireHealthConfig}.
- * Note that evaluators never reside in the administration VM, they
- * only in member VMs.  They are not <code>Serializable</code> and
- * aren't meant to be.
+ * Note that evaluators never reside in the administration VM, they only in member VMs. They are not
+ * <code>Serializable</code> and aren't meant to be.
-  
+
-  /** The most recent <code>OKAY_HEALTH</code> diagnoses of the
-   * GemFire system */
+  /**
+   * The most recent <code>OKAY_HEALTH</code> diagnoses of the GemFire system
+   */
-  /** The most recent <code>POOR_HEALTH</code> diagnoses of the
-   * GemFire system */
+  /**
+   * The most recent <code>POOR_HEALTH</code> diagnoses of the GemFire system
+   */
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-   * @param config
-   *        The configuration that determines whether or GemFire is
-   *        healthy 
-   * @param dm
-   *        The distribution manager 
+   * @param config The configuration that determines whether or GemFire is healthy
+   * @param dm The distribution manager
-  public GemFireHealthEvaluator(GemFireHealthConfig config,
-                                DistributionManager dm) {
+  public GemFireHealthEvaluator(GemFireHealthConfig config, DistributionManager dm) {
-      throw new NullPointerException(LocalizedStrings.GemFireHealthEvaluator_NULL_GEMFIREHEALTHCONFIG.toLocalizedString());
+      throw new NullPointerException(
+          LocalizedStrings.GemFireHealthEvaluator_NULL_GEMFIREHEALTHCONFIG.toLocalizedString());
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * @return The aggregate health code (such as {@link
-   *         GemFireHealth#OKAY_HEALTH}) of the GemFire components.
+   * @return The aggregate health code (such as {@link GemFireHealth#OKAY_HEALTH}) of the GemFire
+   *         components.
-    for (Iterator iter = status.iterator(); iter.hasNext(); ) {
+    for (Iterator iter = status.iterator(); iter.hasNext();) {
-        (AbstractHealthEvaluator.HealthStatus) iter.next();
+          (AbstractHealthEvaluator.HealthStatus) iter.next();
-   * Returns detailed information explaining the current health status.
-   * Each array element is a different cause for the current status.
-   * An empty array will be returned if the current status is {@link
-   * GemFireHealth#GOOD_HEALTH}. 
+   * Returns detailed information explaining the current health status. Each array element is a
+   * different cause for the current status. An empty array will be returned if the current status
+   * is {@link GemFireHealth#GOOD_HEALTH}.
