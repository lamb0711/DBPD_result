GEODE-3739: Refactor protobuf authentication (#922)

GEODE-3739: Refactor protobuf authentication

Use the security settings to determine authentication type, remove new authentication property
Move the authentication and authorization objects out of core
Change authentication messages to use full protobuf message objects
Add and update unit tests

Signed-off-by: Sarge <mdodge@pivotal.io>
Signed-off-by: Brian Rowe <browe@pivotal.io>

+import org.apache.geode.internal.protocol.protobuf.security.Authorizer;
+import org.apache.geode.internal.protocol.protobuf.security.InvalidConfigAuthenticator;
+import org.apache.geode.internal.protocol.protobuf.security.NoOpAuthorizer;
+import org.apache.geode.internal.protocol.protobuf.security.ProtobufShiroAuthenticator;
+import org.apache.geode.internal.protocol.protobuf.security.ProtobufShiroAuthorizer;
-import org.apache.geode.security.internal.server.Authenticator;
+import org.apache.geode.internal.protocol.protobuf.security.Authenticator;
+import org.apache.geode.internal.protocol.protobuf.security.NoOpAuthenticator;
+  @Override
+  public ClientProtocolProcessor createProcessorForCache(Cache cache,
+      SecurityService securityService) {
+    assert (statistics != null);
+
+    Authenticator authenticator = getAuthenticator(securityService);
+    Authorizer authorizer = getAuthorizer(securityService);
+
+    return new ProtobufCachePipeline(protobufStreamProcessor, getStatistics(), cache, authenticator,
+        authorizer, securityService);
+  }
+
-  public ClientProtocolProcessor createProcessorForCache(Cache cache, Authenticator authenticator,
-      SecurityService securityService) {
-    return new ProtobufCachePipeline(protobufStreamProcessor, getStatistics(), cache, authenticator,
-        securityService);
-  }
-
-  @Override
+
+  private Authenticator getAuthenticator(SecurityService securityService) {
+    if (securityService.isIntegratedSecurity()) {
+      // Simple authenticator...normal shiro
+      return new ProtobufShiroAuthenticator();
+    }
+    if (securityService.isPeerSecurityRequired() || securityService.isClientSecurityRequired()) {
+      // Failing authentication...legacy security
+      return new InvalidConfigAuthenticator();
+    } else {
+      // Noop authenticator...no security
+      return new NoOpAuthenticator();
+    }
+  }
+
+  private Authorizer getAuthorizer(SecurityService securityService) {
+    if (securityService.isIntegratedSecurity()) {
+      // Simple authenticator...normal shiro
+      return new ProtobufShiroAuthorizer(securityService);
+    }
+    if (securityService.isPeerSecurityRequired() || securityService.isClientSecurityRequired()) {
+      // Failing authentication...legacy security
+      // This should never be called.
+      return null;
+    } else {
+      // Noop authenticator...no security
+      return new NoOpAuthorizer();
+    }
+  }
