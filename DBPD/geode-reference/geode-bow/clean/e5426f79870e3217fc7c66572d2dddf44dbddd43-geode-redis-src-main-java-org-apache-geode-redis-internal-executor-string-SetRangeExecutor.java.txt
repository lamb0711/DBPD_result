change more string commands to have CommandFunction support (#5184)

* CommandFunction now supports getrange, setrange, bitcount, bitop, bitpos, getbit, setbit, incrbyfloat, mget, and strlen.

Added integration test coverage for untested string commands.

-import static org.apache.geode.redis.internal.executor.string.SetOptions.Exists.NONE;
-  private final String ERROR_NOT_INT = "The number provided must be numeric";
+  private static final String ERROR_NOT_INT = "The number provided must be numeric";
-  private final String ERROR_ILLEGAL_OFFSET =
+  private static final String ERROR_ILLEGAL_OFFSET =
-    RedisStringCommands stringCommands = getRedisStringCommands(context);
-
-    ByteArrayWrapper wrapper = stringCommands.get(key);
-
-    byte[] value = commandElems.get(3);
-    int totalLength = offset + value.length;
-    if (offset < 0 || totalLength > 536870911) {
+    byte[] value = commandElems.get(3);
+
+    if (offset < 0 || (offset + value.length) > 536870911) {
-    } else if (value.length == 0) {
-      int length;
-      if (wrapper == null) {
-        length = 0;
-        // redisString will only be null if no key exists so no need to call removeKey here.
-      } else {
-        length = wrapper.length();
-      }
-
-      return RedisResponse.integer(length);
-    if (wrapper == null) {
-      byte[] bytes = new byte[totalLength];
-      System.arraycopy(value, 0, bytes, offset, value.length);
-      stringCommands.set(key, new ByteArrayWrapper(bytes), null);
-      return RedisResponse.integer(bytes.length);
-    }
-    byte[] bytes = wrapper.toBytes();
-    SetOptions setOptions = new SetOptions(NONE, 0L, true);
-    int returnLength;
-    if (totalLength < bytes.length) {
-      System.arraycopy(value, 0, bytes, offset, value.length);
-      stringCommands.set(key, new ByteArrayWrapper(bytes), setOptions);
-      returnLength = bytes.length;
-    } else {
-      byte[] newBytes = new byte[totalLength];
-      System.arraycopy(bytes, 0, newBytes, 0, bytes.length);
-      System.arraycopy(value, 0, newBytes, offset, value.length);
-      returnLength = newBytes.length;
-      stringCommands.set(key, new ByteArrayWrapper(bytes), setOptions);
-    }
+    RedisStringCommands stringCommands = getRedisStringCommands(context);
+    int result = stringCommands.setrange(key, offset, value);
-    return RedisResponse.integer(returnLength);
+    return RedisResponse.integer(result);
