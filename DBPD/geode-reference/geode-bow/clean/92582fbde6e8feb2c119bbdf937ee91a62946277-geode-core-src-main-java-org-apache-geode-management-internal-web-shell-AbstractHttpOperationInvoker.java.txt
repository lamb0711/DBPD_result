GEODE-2267: enable gfsh to download file from http connection (GEODE-2418)

+import org.apache.commons.io.FileUtils;
+import org.springframework.http.HttpHeaders;
+import org.springframework.web.client.RequestCallback;
+import org.springframework.web.client.ResponseExtractor;
+import java.nio.file.Files;
+import java.nio.file.Path;
-  protected <T> ResponseEntity<T> send(final ClientHttpRequest request,
-      final Class<T> responseType) {
+  protected <T> T send(final ClientHttpRequest request, final Class<T> responseType) {
-  protected <T> ResponseEntity<T> send(final ClientHttpRequest request, final Class<T> responseType,
+  protected <T> T send(final ClientHttpRequest request, final Class<T> responseType,
-
-    return response;
+    return response.getBody();
+  }
+
+  protected Path downloadResponseToTempFile(ClientHttpRequest request,
+      Map<String, ?> uriVariables) {
+    final URI url = request.getURL(uriVariables);
+
+    // Optional Accept header
+    RequestCallback requestCallback = r -> {
+      r.getHeaders().setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM));
+      HttpHeaders header = request.getHeaders();
+      r.getHeaders().setAll(request.getHeaders().toSingleValueMap());
+    };
+
+    // Streams the response instead of loading it all in memory
+    ResponseExtractor<Path> responseExtractor = resp -> {
+      Path tempFile = Files.createTempFile("fileDownload", "");
+      if (tempFile.toFile().exists()) {
+        FileUtils.deleteQuietly(tempFile.toFile());
+      }
+      Files.copy(resp.getBody(), tempFile);
+      return tempFile;
+    };
+    return getRestTemplate().execute(url, org.springframework.http.HttpMethod.GET, requestCallback,
+        responseExtractor);
-      final ResponseEntity<byte[]> response = send(request, byte[].class);
-
-        return IOUtils.deserializeObject(response.getBody());
+        return IOUtils.deserializeObject(send(request, byte[].class));
-      final ResponseEntity<byte[]> response = send(request, byte[].class);
-
-        return IOUtils.deserializeObject(response.getBody());
+        return IOUtils.deserializeObject(send(request, byte[].class));
-
-      final ResponseEntity<byte[]> response = send(request, byte[].class);
-
-        return (Set<ObjectName>) IOUtils.deserializeObject(response.getBody());
+        return (Set<ObjectName>) IOUtils.deserializeObject(send(request, byte[].class));
