GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

+
-import org.apache.geode.redis.internal.RedisConstants;
-  private final int INIT_VALUE_INT = 1;
-
-    long value;
-    ByteArrayWrapper valueWrapper = stringCommands.get(key);
-    /*
-     * Value does not exist
-     */
-
-    if (valueWrapper == null) {
-      byte[] newValue = {Coder.NUMBER_1_BYTE};
-      stringCommands.set(key, new ByteArrayWrapper(newValue), null);
-      command
-          .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), INIT_VALUE_INT));
-      return;
-    }
-
-    /*
-     * Value exists
-     */
-
-    String stringValue = valueWrapper.toString();
-
-    try {
-      value = Long.parseLong(stringValue);
-    } catch (NumberFormatException e) {
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(),
-              RedisConstants.ERROR_NOT_INTEGER));
-      return;
-    }
-
-    if (value == Long.MAX_VALUE) {
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), RedisConstants.ERROR_OVERFLOW));
-      return;
-    }
-
-    value++;
-
-    stringValue = "" + value;
-    stringCommands.set(key, new ByteArrayWrapper(Coder.stringToBytes(stringValue)), null);
+    long value = stringCommands.incr(key);
