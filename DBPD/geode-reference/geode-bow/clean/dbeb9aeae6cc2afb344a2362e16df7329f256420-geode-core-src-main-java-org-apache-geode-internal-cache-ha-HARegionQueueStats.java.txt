Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- *  
+ * 
-public class HARegionQueueStats
-  {
+public class HARegionQueueStats {
-  
+
-  
+
-   * Name of the num void removals statistic. This refers to the events which
-   * were supposed to be destroyed from queue through remove() but were removed
-   * by some other operation like conflation or expiration.
+   * Name of the num void removals statistic. This refers to the events which were supposed to be
+   * destroyed from queue through remove() but were removed by some other operation like conflation
+   * or expiration.
-   * Name of the number of sequence violated events statistic. This refers to
-   * the events which has sequence id less than lastSequnceId hence not put in
-   * the region queue
+   * Name of the number of sequence violated events statistic. This refers to the events which has
+   * sequence id less than lastSequnceId hence not put in the region queue
-  
+
-  
+
-  
+
-  
+
-        f.createLongCounter(EVENTS_QUEUED, "Number of events added to queue.",
+        f.createLongCounter(EVENTS_QUEUED, "Number of events added to queue.", "operations"),
+
+        f.createLongCounter(EVENTS_CONFLATED, "Number of events conflated for the queue.",
-        f.createLongCounter(EVENTS_CONFLATED,
-            "Number of events conflated for the queue.", "operations"),
-            
-        f.createLongCounter(EVENTS_REMOVED,
-            "Number of events removed from the queue.", "operations"),
+        f.createLongCounter(EVENTS_REMOVED, "Number of events removed from the queue.",
+            "operations"),
-        f.createLongCounter(EVENTS_TAKEN,
-            "Number of events taken from the queue.", "operations"),
+        f.createLongCounter(EVENTS_TAKEN, "Number of events taken from the queue.", "operations"),
-        f.createLongCounter(EVENTS_EXPIRED,
-            "Number of events expired from the queue.", "operations"),
+        f.createLongCounter(EVENTS_EXPIRED, "Number of events expired from the queue.",
+            "operations"),
-        f.createLongCounter(EVENTS_REMOVED_BY_QRM,
-            "Number of events removed by QRM message.", "operations"),
+        f.createLongCounter(EVENTS_REMOVED_BY_QRM, "Number of events removed by QRM message.",
+            "operations"),
-        f.createIntCounter(THREAD_IDENTIFIERS,
-            "Number of ThreadIdenfier objects for the queue.", "units"),
+        f.createIntCounter(THREAD_IDENTIFIERS, "Number of ThreadIdenfier objects for the queue.",
+            "units"),
-        f.createLongCounter(EVENTS_DISPATCHED,
-            "Number of events that have been dispatched.", "operations"),
-                    
-        f.createLongCounter(NUM_VOID_REMOVALS,
-            "Number of void removals from the queue.", "operations"),
+        f.createLongCounter(EVENTS_DISPATCHED, "Number of events that have been dispatched.",
+            "operations"),
-        f.createLongCounter(NUM_SEQUENCE_VIOLATED,
-            "Number of events that has violated sequence.", "operations")            
-    });
+        f.createLongCounter(NUM_VOID_REMOVALS, "Number of void removals from the queue.",
+            "operations"),
+
+        f.createLongCounter(NUM_SEQUENCE_VIOLATED, "Number of events that has violated sequence.",
+            "operations")});
-   * @param factory
-   *          The <code>StatisticsFactory</code> which creates the
-   *          <code>Statistics</code> instance
-   * @param name
-   *          The name of the <code>Statistics</code>
+   * @param factory The <code>StatisticsFactory</code> which creates the <code>Statistics</code>
+   *        instance
+   * @param name The name of the <code>Statistics</code>
-    this._stats = factory.createAtomicStatistics(_type, "ClientSubscriptionStats-"
-        + name);
+    this._stats = factory.createAtomicStatistics(_type, "ClientSubscriptionStats-" + name);
-  public void close()
-  {
+  public void close() {
-  public long getEventsEnqued()
-  {
+  public long getEventsEnqued() {
-  public void incEventsEnqued()
-  {
+  public void incEventsEnqued() {
-  public long getEventsConflated()
-  {
+  public long getEventsConflated() {
-  public void incEventsConflated()
-  {
+  public void incEventsConflated() {
-  
+
-   * @return the current value of the "markerEventsConflated" stat 
+   * @return the current value of the "markerEventsConflated" stat
-  public long getMarkerEventsConflated() 
-  {
+  public long getMarkerEventsConflated() {
-  public void incMarkerEventsConflated() 
-  {
+  public void incMarkerEventsConflated() {
-  public long getEventsRemoved()
-  {
+  public long getEventsRemoved() {
-  public void incEventsRemoved()
-  {
+  public void incEventsRemoved() {
-  public long getEventsTaken()
-  {
+  public long getEventsTaken() {
-  public void incEventsTaken()
-  {
+  public void incEventsTaken() {
-  public long getEventsExpired()
-  {
+  public long getEventsExpired() {
-  public void incEventsExpired()
-  {
+  public void incEventsExpired() {
-  public long getEventsRemovedByQrm()
-  {
+  public long getEventsRemovedByQrm() {
-  public void incEventsRemovedByQrm()
-  {
+  public void incEventsRemovedByQrm() {
-  public int getThreadIdentiferCount()
-  {
+  public int getThreadIdentiferCount() {
-  public void incThreadIdentifiers()
-  {
+  public void incThreadIdentifiers() {
-  public void decThreadIdentifiers()
-  {
+  public void decThreadIdentifiers() {
-  public long getEventsDispatched()
-  {
+  public long getEventsDispatched() {
-  public void incEventsDispatched()
-  {
+  public void incEventsDispatched() {
-  public long getNumVoidRemovals()
-  {
+  public long getNumVoidRemovals() {
-  public void incNumVoidRemovals()
-  {
+  public void incNumVoidRemovals() {
-  public long getNumSequenceViolated()
-  {
+  public long getNumSequenceViolated() {
-  public void incNumSequenceViolated()
-  {
+  public void incNumSequenceViolated() {
-  
+
-  public boolean isClosed()
-  {
+  public boolean isClosed() {
