GEODE-17: make ResourceOperation a class level annoation as well

-import javax.management.MBeanAttributeInfo;
+import javax.management.MBeanFeatureInfo;
-import javax.management.MBeanOperationInfo;
-import static com.gemstone.gemfire.management.internal.security.ResourceConstants.*;
+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.ACCESS_DENIED_MESSAGE;
-    ResourceOperationContext ctx = getAttributeContext(name, attribute);
+    ResourceOperationContext ctx = getOperationContext(name, attribute, false);
-    ResourceOperationContext ctx = getAttributeContext(name, attribute.getName());
+    ResourceOperationContext ctx = getOperationContext(name, attribute.getName(), false);
-  // TODO: cache this
-  private ResourceOperationContext getAttributeContext(ObjectName name, String attribute)
-      throws InstanceNotFoundException, ReflectionException {
-    MBeanInfo beanInfo = null;
-    try {
-      beanInfo = mbs.getMBeanInfo(name);
-    } catch (IntrospectionException e) {
-      throw new GemFireSecurityException("error getting beanInfo of "+name);
-    }
-    MBeanAttributeInfo[] attributeInfos = beanInfo.getAttributes();
-    for(MBeanAttributeInfo attributeInfo:attributeInfos){
-      if(attributeInfo.getName().equals(attribute)){
-        // found the operationInfo of this method on the bean
-        Descriptor descriptor = attributeInfo.getDescriptor();
-        Resource resource = (Resource)descriptor.getFieldValue("resource");
-        OperationCode operationCode = (OperationCode)descriptor.getFieldValue("operation");
-        if(resource!=null && operationCode!=null){
-          return new ResourceOperationContext(resource, operationCode);
-        }
-      }
-    }
-    return new ResourceOperationContext(Resource.DEFAULT, OperationCode.LIST_DS);
-  }
-
-  // TODO: cache this
-  private ResourceOperationContext getOperationContext(ObjectName name, String operationName)
-      throws InstanceNotFoundException, ReflectionException {
-    MBeanInfo beanInfo = null;
-    try {
-      beanInfo = mbs.getMBeanInfo(name);
-    } catch (IntrospectionException e) {
-      throw new GemFireSecurityException("error getting beanInfo of "+name);
-    }
-    MBeanOperationInfo[] opInfos = beanInfo.getOperations();
-    for(MBeanOperationInfo opInfo:opInfos){
-      if(opInfo.getName().equals(operationName)){
-        // found the operationInfo of this method on the bean
-        Descriptor descriptor = opInfo.getDescriptor();
-        String resource = (String)descriptor.getFieldValue("resource");
-        String operationCode = (String)descriptor.getFieldValue("operation");
-        if(resource!=null && operationCode!=null){
-          return new ResourceOperationContext(resource, operationCode);
-        }
-      }
-    }
-    return new ResourceOperationContext(Resource.DEFAULT, OperationCode.LIST_DS);
-  }
-
-    ResourceOperationContext ctx = getOperationContext(name, operationName);
+    ResourceOperationContext ctx = getOperationContext(name, operationName, true);
+  // TODO: cache this
+  private ResourceOperationContext getOperationContext(ObjectName objectName, String featureName, boolean isOp)
+      throws InstanceNotFoundException, ReflectionException {
+    MBeanInfo beanInfo = null;
+    try {
+      beanInfo = mbs.getMBeanInfo(objectName);
+    } catch (IntrospectionException e) {
+      throw new GemFireSecurityException("error getting beanInfo of "+objectName);
+    }
+    // Initialize the context with the default value
+    ResourceOperationContext result = new ResourceOperationContext(Resource.DEFAULT, OperationCode.LIST_DS);
+
+    // find the context in the beanInfo if defined in the class level
+    result = getOperationContext(beanInfo.getDescriptor(), result);
+
+    MBeanFeatureInfo[] featureInfos = null;
+    if(isOp){
+      featureInfos = beanInfo.getOperations();
+    }
+    else{
+      featureInfos = beanInfo.getAttributes();
+    }
+    // still look into the attributes/operations to see if it's defined in the method level
+    for(MBeanFeatureInfo info:featureInfos){
+      if(info.getName().equals(featureName)){
+        // found the featureInfo of this method on the bean
+        result = getOperationContext(info.getDescriptor(), result);
+        break;
+      }
+    }
+    return result;
+  }
+
+  private ResourceOperationContext getOperationContext(Descriptor descriptor, ResourceOperationContext defaultValue){
+    String resource = (String)descriptor.getFieldValue("resource");
+    String operationCode = (String)descriptor.getFieldValue("operation");
+    if(resource!=null && operationCode!=null){
+      return new ResourceOperationContext(resource, operationCode);
+    }
+    return defaultValue;
+  }
+
+
