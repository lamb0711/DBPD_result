Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Note that this does not do lexigraphic order, or really
- * any useful order. It's only guaranteed to return 0
- * if the bytes are equal, and satisfy all the transitivity
- * and communitivity properties of compare.
+ * Note that this does not do lexigraphic order, or really any useful order. It's only guaranteed to
+ * return 0 if the bytes are equal, and satisfy all the transitivity and communitivity properties of
+ * compare.
-    if(o1Bytes == o2Bytes) {
+    if (o1Bytes == o2Bytes) {
-    
-    if(o1Bytes == MIN_BYTES) {
+
+    if (o1Bytes == MIN_BYTES) {
-    if(o2Bytes == MIN_BYTES) {
+    if (o2Bytes == MIN_BYTES) {
-    if(o1Bytes == MAX_BYTES) {
+    if (o1Bytes == MAX_BYTES) {
-    if(o2Bytes == MAX_BYTES) {
+    if (o2Bytes == MAX_BYTES) {
-    
-    for(int i =0; i < o1Bytes.length; i++) {
-      if(i > o2Bytes.length) {
+
+    for (int i = 0; i < o1Bytes.length; i++) {
+      if (i > o2Bytes.length) {
-        if(result != 0 ) {
+        if (result != 0) {
-    
+
-    if(o instanceof byte[]) {
+    if (o instanceof byte[]) {
-    if(o instanceof CachedDeserializable) {
+    if (o instanceof CachedDeserializable) {
