Merge branch 'release/1.4.0'

+import java.util.Arrays;
+import org.json.JSONArray;
+
- * 
+ *
+  /**
+   * The intent is that this method should be able to handle both ResultData as well as
+   * CompositeResultData
+   *
+   * @return the extracted GfJsonObject table
+   */
+  public GfJsonObject getTableContent() {
+    return getTableContent(0, 0);
+  }
+
+  /**
+   * Most frequently, only two index values are required: a section index followed by a table index.
+   * Some commands, such as 'describe region', may return command results with subsections, however.
+   * Include these in order, e.g., getTableContent(sectionIndex, subsectionIndex, tableIndex);
+   */
+  public GfJsonObject getTableContent(int... sectionAndTableIDs) {
+    GfJsonObject topLevelContent = getContent();
+    // Most common is receiving exactly one section index and one table index.
+    // Some results, however, will have subsections before the table listings.
+    assert (sectionAndTableIDs.length >= 2);
+
+    GfJsonObject sectionObject = topLevelContent;
+    for (int i = 0; i < sectionAndTableIDs.length - 1; i++) {
+      int idx = sectionAndTableIDs[i];
+      sectionObject = sectionObject.getJSONObject("__sections__-" + idx);
+      if (sectionObject == null) {
+        return topLevelContent;
+      }
+    }
+
+    int tableId = sectionAndTableIDs[sectionAndTableIDs.length - 1];
+    GfJsonObject tableContent = sectionObject.getJSONObject("__tables__-" + tableId);
+    if (tableContent == null) {
+      return topLevelContent;
+    }
+
+    return tableContent.getJSONObject("content");
+  }
+
-
+
+  public List<Object> getColumnValues(String columnName) {
+    Object[] actualValues =
+        toArray(getTableContent().getInternalJsonObject().getJSONArray(columnName));
+    return Arrays.asList(actualValues);
+  }
+
+  private Object[] toArray(JSONArray array) {
+    Object[] values = new Object[array.length()];
+
+    for (int i = 0; i < array.length(); i++) {
+      values[i] = array.get(i);
+    }
+
+    return values;
+  }
