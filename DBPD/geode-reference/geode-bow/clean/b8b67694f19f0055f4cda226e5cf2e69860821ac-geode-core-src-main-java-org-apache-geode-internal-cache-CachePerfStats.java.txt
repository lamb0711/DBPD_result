Merge branch 'develop' into feature/GEODE-7049

-import java.util.function.LongSupplier;
-
-import org.apache.geode.annotations.VisibleForTesting;
-import org.apache.geode.annotations.internal.MakeNotStatic;
+import org.apache.geode.internal.statistics.StatisticsClock;
-  @MakeNotStatic
-  public static boolean enableClockStats;
-
-  private final LongSupplier clock;
+  private final StatisticsClock clock;
-  public CachePerfStats(StatisticsFactory factory) {
-    this(factory, "cachePerfStats");
-  }
-
-  @VisibleForTesting
-  public CachePerfStats(StatisticsFactory factory, LongSupplier clock) {
+  public CachePerfStats(StatisticsFactory factory, StatisticsClock clock) {
-  public CachePerfStats(StatisticsFactory factory, String textId) {
-    this(factory, textId, createClock());
-  }
-
-  CachePerfStats(StatisticsFactory factory, String textId, LongSupplier clock) {
-    this(createStatistics(factory, textId), clock);
-  }
-
-  private CachePerfStats(Statistics stats, LongSupplier clock) {
-    this.stats = stats;
+  public CachePerfStats(StatisticsFactory factory, String textId, StatisticsClock clock) {
+    stats = factory == null ? null : factory.createAtomicStatistics(type, textId);
-  private static Statistics createStatistics(StatisticsFactory factory, String textId) {
-    if (factory == null) {
-      return null;
-    }
-    return factory.createAtomicStatistics(type, textId);
-  }
-
-  private static LongSupplier createClock() {
-    return enableClockStats ? NanoTimer::getTime : () -> 0;
-  }
-
-  /**
-   * Returns the current NanoTime or, if clock stats are disabled, zero.
-   *
-   * @since GemFire 5.0
-   * @deprecated Please use instance method {@link #getTime()} instead.
-   */
-  @Deprecated
-  public static long getStatTime() {
-    return enableClockStats ? NanoTimer.getTime() : 0;
-  }
-
-  protected long getTime() {
-    return clock.getAsLong();
+  public long getTime() {
+    return clock.getTime();
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-      if (enableClockStats) {
+      if (clock.isEnabled()) {
-      if (enableClockStats) {
+      if (clock.isEnabled()) {
-    if (enableClockStats)
+    if (clock.isEnabled())
-    if (enableClockStats)
+    if (clock.isEnabled())
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
