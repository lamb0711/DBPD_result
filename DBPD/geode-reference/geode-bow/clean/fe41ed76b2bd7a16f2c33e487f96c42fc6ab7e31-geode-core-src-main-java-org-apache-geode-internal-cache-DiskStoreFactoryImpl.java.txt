GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.cache.Cache;
-  private final Cache cache;
+
+  private final InternalCache cache;
-  public DiskStoreFactoryImpl(Cache cache) {
+  public DiskStoreFactoryImpl(InternalCache cache) {
-  public DiskStoreFactoryImpl(Cache cache, DiskStoreAttributes attrs) {
+  public DiskStoreFactoryImpl(InternalCache cache, DiskStoreAttributes attrs) {
-              .toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD,
-                  Integer.valueOf(compactionThreshold)}));
+              .toLocalizedString(
+                  new Object[] {CacheXml.COMPACTION_THRESHOLD, compactionThreshold}));
-              .toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD,
-                  Integer.valueOf(compactionThreshold), Integer.valueOf(100)}));
+              .toLocalizedString(
+                  new Object[] {CacheXml.COMPACTION_THRESHOLD, compactionThreshold, 100}));
-              .toLocalizedString(Long.valueOf(timeInterval)));
+              .toLocalizedString(timeInterval));
-      assert this.cache instanceof GemFireCacheImpl;
-      GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-          new DiskStoreImpl(gfc, this.attrs, true/* ownedByRegion */, internalRegionArgs);
+          new DiskStoreImpl(this.cache, this.attrs, true/* ownedByRegion */, internalRegionArgs);
-      gfc.addRegionOwnedDiskStore(ds);
+      this.cache.addRegionOwnedDiskStore(ds);
-          GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-          TypeRegistry registry = gfc.getPdxRegistry();
-          DiskStoreImpl dsi = new DiskStoreImpl(gfc, this.attrs);
+          TypeRegistry registry = this.cache.getPdxRegistry();
+          DiskStoreImpl dsi = new DiskStoreImpl(this.cache, this.attrs);
-          /** Added for M&M **/
-          gfc.getInternalDistributedSystem().handleResourceEvent(ResourceEvent.DISKSTORE_CREATE,
-              dsi);
+          // Added for M&M
+          this.cache.getInternalDistributedSystem()
+              .handleResourceEvent(ResourceEvent.DISKSTORE_CREATE, dsi);
-          gfc.addDiskStore(dsi);
+          this.cache.addDiskStore(dsi);
-      GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-      BackupManager backup = gfc.getBackupManager();
+      BackupManager backup = this.cache.getBackupManager();
-      GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-      existing = gfc.findDiskStore(name);
+      existing = this.cache.findDiskStore(name);
-              .toLocalizedString(new Object[] {Integer.valueOf(diskDirSizes.length),
-                  Integer.valueOf(diskDirs.length)}));
+              .toLocalizedString(new Object[] {diskDirSizes.length, diskDirs.length}));
-   * 
-   * @param diskDirs
-   * 
-   * @param sizes
-                .toLocalizedString(Integer.valueOf(sizes[i])));
+                .toLocalizedString(sizes[i]));
-              .toLocalizedString(Long.valueOf(maxOplogSize)));
+              .toLocalizedString(maxOplogSize));
-              .toLocalizedString(Long.valueOf(maxOplogSizeInBytes)));
+              .toLocalizedString(maxOplogSizeInBytes));
-              .toLocalizedString(Integer.valueOf(queueSize)));
+              .toLocalizedString(queueSize));
-      // TODO Gester add a message for WriteBufferSize
+      // TODO add a message for WriteBufferSize
-              .toLocalizedString(Integer.valueOf(writeBufferSize)));
+              .toLocalizedString(writeBufferSize));
