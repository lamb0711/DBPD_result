GEODE-8273: Cleanup GfshExecution and GfshScript (#5267)

* Use GeodeAwaitility timeout instead of hardcoded timeouts.
* Use just one source for Charset.
* Minor formatting changes.
+import static java.lang.Long.toHexString;
+import static java.util.stream.Collectors.joining;
-import java.util.stream.Collectors;
+
+import org.apache.geode.test.awaitility.GeodeAwaitility;
- * All the commands represented in this script is executed within one gfsh session.
+ * All the commands represented in this script are executed within one gfsh session.
- * all the commands in this script are executed using this bash command:
+ * <p>
+ * All the commands in this script are executed using this bash command:<br>
+ *
+ * <pre>
+ * </pre>
- * You can chain commands together to create a gfshScript
+ * <p>
+ * You can chain commands together to create a GfshScript<br>
+ *
+ * <pre>
+ * </pre>
- * If your command started another process and you want to that process to be debuggable, you can do
+ * <p>
+ * If your command started another process and you want that process to be debuggable, you can do:
+ *
+ * <pre>
- * this will allow locator to be debuggable at 30000 and the server to be debuggable at 30001
+ * </pre>
- * By default, each scripts await at most 4 minutes for all the commands to finish
- * and will expect success. if you want to change this, you can use:
+ * This will allow locator to be debuggable at 30000 and the server to be debuggable at 30001.
+ *
+ * <p>
+ * By default, each script awaits at most 5 minutes for all the commands to finish and will expect
+ * success. If you want to change this, you can use:
+ *
+ * <pre>
+ * </pre>
- * if you want this gfsh session to be debuggable, you can use:
+ * <p>
+ * If you want this gfsh session to be debuggable, you can use:
+ *
+ * <pre>
- * This will allow gfsh to be debuggable at port 30000.
+ * </pre>
+ * This will allow gfsh to be debuggable at port 30000.
-  private List<DebuggableCommand> commands = new ArrayList<>();
+
+  private final List<DebuggableCommand> commands = new ArrayList<>();
+  private final List<String> extendedClasspath = new ArrayList<>();
+  private final Random random = new Random();
+
-  private int timeout = 4;
-  private int expectedExitValue = 0;
-  private List<String> extendedClasspath = new ArrayList<>();
-  private Random random = new Random();
+  private long timeout = GeodeAwaitility.getTimeout().toMinutes();
+  private int expectedExitValue;
-    this.name = defaultName();
+    name = defaultName();
-    this.commands.add(new DebuggableCommand(command, debugPort));
+    commands.add(new DebuggableCommand(command, debugPort));
-    assertThat(name.contains(" ")).as("argument passed to withName cannot have spaces").isFalse();
+    assertThat(name).doesNotContain(" ");
-
-    this.expectedExitValue = expectedExitCode;
-
+    expectedExitValue = expectedExitCode;
-   * Will cause the thread that executes to wait, if necessary,
-   * until the subprocess executing this Gfsh script has terminated, or the specified waiting time
-   * elapses.
+   * Will cause the thread that executes to wait, if necessary, until the subprocess executing this
+   * Gfsh script has terminated, or the specified waiting time elapses.
-    this.timeoutTimeUnit = timeUnit;
+    timeoutTimeUnit = timeUnit;
-
-  public int getTimeout() {
+  public long getTimeout() {
-    return Long.toHexString(random.nextLong());
+    return toHexString(random.nextLong());
-    builder.append(commands.stream().map(c -> "-e " + c.command).collect(Collectors.joining(" ")));
+    builder.append(commands.stream()
+        .map(c -> "-e " + c.command)
+        .collect(joining(" ")));
