GEODE-6588: Properly type Function execution related interfaces. (#3691)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Peter Tran <ptran@gmail.com>

* Extensions and implementations of Execution and ResultCollector and the 
classes and interfaces involved in the execution chain were lacking the
ability to apply Generic types.
* Typing issues starting from MemberConfigManager.java class were fixed.
* Trivial IDE warnings were fixed.
-  public Execution onServer(Pool pool) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServer(
+      Pool pool) {
-  public Execution onServers(Pool pool) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServers(
+      Pool pool) {
-  public Execution onServer(RegionService regionService) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServer(
+      RegionService regionService) {
-  public Execution onServers(RegionService regionService) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServers(
+      RegionService regionService) {
-  public Execution onMember(DistributedMember distributedMember) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMember(
+      DistributedMember distributedMember) {
-  public Execution onMembers(String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMembers(
+      String... groups) {
-  public Execution onMembers(Set<DistributedMember> distributedMembers) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMembers(
+      Set<DistributedMember> distributedMembers) {
-  public Execution onMember(String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMember(
+      String... groups) {
-  public Execution onRegion(Region region) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onRegion(
+      Region region) {
-      return new ServerRegionFunctionExecutor(region, proxyCache);
+      return new ServerRegionFunctionExecutor<>(region, proxyCache);
-      return new PartitionedRegionFunctionExecutor(region);
+      return new PartitionedRegionFunctionExecutor<>(region);
-    return new DistributedRegionFunctionExecutor(region);
+    return new DistributedRegionFunctionExecutor<>(region);
-  public Execution onServer(Pool pool, String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServer(
+      Pool pool, String... groups) {
-    return new ServerFunctionExecutor(pool, false, groups);
+    return new ServerFunctionExecutor<>(pool, false, groups);
-  public Execution onServers(Pool pool, String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServers(
+      Pool pool, String... groups) {
-    return new ServerFunctionExecutor(pool, true, groups);
+    return new ServerFunctionExecutor<>(pool, true, groups);
-  public Execution onServer(RegionService regionService, String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServer(
+      RegionService regionService,
+      String... groups) {
-      return new ServerFunctionExecutor(proxyCache.getUserAttributes().getPool(), false, proxyCache,
+      return new ServerFunctionExecutor<>(proxyCache.getUserAttributes().getPool(), false,
+          proxyCache,
-  public Execution onServers(RegionService regionService, String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onServers(
+      RegionService regionService,
+      String... groups) {
-      return new ServerFunctionExecutor(proxyCache.getUserAttributes().getPool(), true, proxyCache,
+      return new ServerFunctionExecutor<>(proxyCache.getUserAttributes().getPool(), true,
+          proxyCache,
-  public Execution onMember(DistributedSystem system, DistributedMember distributedMember) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMember(
+      DistributedSystem system,
+      DistributedMember distributedMember) {
-    return new MemberFunctionExecutor(system, distributedMember);
+    return new MemberFunctionExecutor<>(system, distributedMember);
-  public Execution onMembers(DistributedSystem system, String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMembers(
+      DistributedSystem system,
+      String... groups) {
-      return new MemberFunctionExecutor(system);
+      return new MemberFunctionExecutor<>(system);
-    return new MemberFunctionExecutor(system, members);
+    return new MemberFunctionExecutor<>(system, members);
-  public Execution onMember(DistributedSystem system, String... groups) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMember(
+      DistributedSystem system,
+      String... groups) {
-    return new MemberFunctionExecutor(system, members);
+    return new MemberFunctionExecutor<>(system, members);
-  public Execution onMembers(DistributedSystem system, Set<DistributedMember> distributedMembers) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onMembers(
+      DistributedSystem system,
+      Set<DistributedMember> distributedMembers) {
-    return new MemberFunctionExecutor(system, distributedMembers);
+    return new MemberFunctionExecutor<>(system, distributedMembers);
-  public Execution onRegions(Set<Region> regions) {
+  public <ArgumentT, ReturnT, AggregatorT> Execution<ArgumentT, ReturnT, AggregatorT> onRegions(
+      Set<Region> regions) {
-    return new MultiRegionFunctionExecutor(regions);
+    return new MultiRegionFunctionExecutor<>(regions);
