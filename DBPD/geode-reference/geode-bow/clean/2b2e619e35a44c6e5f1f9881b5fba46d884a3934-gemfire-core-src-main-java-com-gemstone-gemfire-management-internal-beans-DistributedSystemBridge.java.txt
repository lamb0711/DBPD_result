GEODE-657: Prevent two backups from happening at the same time

Adding a dlock to prevent two backups from occuring at the same time.

-import com.gemstone.gemfire.admin.internal.FinishBackupRequest;
-import com.gemstone.gemfire.admin.internal.FlushToDiskRequest;
-import com.gemstone.gemfire.admin.internal.PrepareBackupRequest;
+import com.gemstone.gemfire.admin.internal.BackupDataStoreHelper;
+import com.gemstone.gemfire.admin.internal.BackupDataStoreResult;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+    if (BackupDataStoreHelper.obtainLock(dm)) {
-      FlushToDiskRequest.send(dm, recipients);
+      BackupDataStoreResult result = BackupDataStoreHelper.backupAllMembers(dm, recipients, targetDir, baselineDir);
-      Map<DistributedMember, Set<PersistentID>> existingDataStores = PrepareBackupRequest
-          .send(dm, recipients);
-      Map<DistributedMember, Set<PersistentID>> successfulMembers = FinishBackupRequest
-          .send(dm, recipients, targetDir, baselineDir);
-
-      Iterator<DistributedMember> it = successfulMembers.keySet().iterator();
+      Iterator<DistributedMember> it = result.getSuccessfulMembers().keySet().iterator();
-        Set<PersistentID> setOfDisk = successfulMembers.get(member);
+        Set<PersistentID> setOfDisk = result.getSuccessfulMembers().get(member);
-        backedUpDiskStores.put(member.getName(), setOfDiskStr);
+        backedUpDiskStores.put(member.getId(), setOfDiskStr);
-      for (Set<PersistentID> onlineMembersIds : successfulMembers.values()) {
+      for (Set<PersistentID> onlineMembersIds : result.getSuccessfulMembers().values()) {
-      existingDataStores.keySet().removeAll(successfulMembers.keySet());
+      result.getExistingDataStores().keySet().removeAll(result.getSuccessfulMembers().keySet());
-      if (existingDataStores.size() > 0) {
-        setOfMissingDiskStr = new String[existingDataStores.size()];
+      if (result.getExistingDataStores().size() > 0) {
+        setOfMissingDiskStr = new String[result.getExistingDataStores().size()];
-        for (Set<PersistentID> lostMembersIds : existingDataStores.values()) {
+        for (Set<PersistentID> lostMembersIds : result.getExistingDataStores().values()) {
+    } finally {
+      BackupDataStoreHelper.releaseLock(dm);
+    }
+    } else {
+      throw new Exception(LocalizedStrings.DistributedSystem_BACKUP_ALREADY_IN_PROGRESS.toLocalizedString());
