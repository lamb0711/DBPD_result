Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class MemberFunctionStreamingMessage extends DistributionMessage implements TransactionMessage, MessageWithReply {
+public class MemberFunctionStreamingMessage extends DistributionMessage
+    implements TransactionMessage, MessageWithReply {
-  
+
-  
+
-  //private final Object lastResultLock = new Object();
+  // private final Object lastResultLock = new Object();
-  public MemberFunctionStreamingMessage() {
-  }
+  public MemberFunctionStreamingMessage() {}
-  public MemberFunctionStreamingMessage(Function function, int procId,
-      Object ar, boolean isFnSerializationReqd, boolean isReExecute) {
+  public MemberFunctionStreamingMessage(Function function, int procId, Object ar,
+      boolean isFnSerializationReqd, boolean isReExecute) {
-    if(txState!=null && txState.isMemberIdForwardingRequired()) {
+    if (txState != null && txState.isMemberIdForwardingRequired()) {
-  public MemberFunctionStreamingMessage(Function function, int procId,
-      Object ar, boolean isFnSerializationReqd, Set<String> regions,
-      boolean isReExecute) {
+  public MemberFunctionStreamingMessage(Function function, int procId, Object ar,
+      boolean isFnSerializationReqd, Set<String> regions, boolean isReExecute) {
-    if(txState!=null && txState.isMemberIdForwardingRequired()) {
+    if (txState != null && txState.isMemberIdForwardingRequired()) {
-  public MemberFunctionStreamingMessage(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public MemberFunctionStreamingMessage(DataInput in) throws IOException, ClassNotFoundException {
-      if(cache==null) {
+      if (cache == null) {
-      if(cache==null) {
+      if (cache == null) {
-      rex = new ReplyException(new FunctionException(
-          LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
+      rex = new ReplyException(
+          new FunctionException(LocalizedStrings.ExecuteFunction_FUNCTION_NAMED_0_IS_NOT_REGISTERED
-    FunctionStats stats = FunctionStats.getFunctionStats(this.functionObject
-        .getId(), dm.getSystem());
+    FunctionStats stats =
+        FunctionStats.getFunctionStats(this.functionObject.getId(), dm.getSystem());
-      ResultSender resultSender = new MemberFunctionResultSender(dm, this,
-          this.functionObject);
+      ResultSender resultSender = new MemberFunctionResultSender(dm, this, this.functionObject);
-            thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0.toLocalizedString(dm.getId()));
+            thr =
+                new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
+                    .toLocalizedString(dm.getId()));
-      FunctionContextImpl context = new MultiRegionFunctionContextImpl(
-          this.functionObject.getId(), this.args, resultSender, regions,
-          isReExecute);
+      FunctionContextImpl context = new MultiRegionFunctionContextImpl(this.functionObject.getId(),
+          this.args, resultSender, regions, isReExecute);
-      
+
-        logger.debug("Executing Function: {} on remote member with context: {}", this.functionObject.getId(), context.toString());
+        logger.debug("Executing Function: {} on remote member with context: {}",
+            this.functionObject.getId(), context.toString());
-    }
-    catch (FunctionException functionException) {
+    } catch (FunctionException functionException) {
-        logger.debug(
-            "FunctionException occured on remote member while executing Function: {}", this.functionObject.getId(), functionException);
+        logger.debug("FunctionException occured on remote member while executing Function: {}",
+            this.functionObject.getId(), functionException);
-    }
-    catch (CancelException exception) {
+    } catch (CancelException exception) {
-    }
-    catch (Exception exception) {
+    } catch (Exception exception) {
-        logger.debug("Exception occured on remote member while executing Function: {}", this.functionObject.getId(), exception);
+        logger.debug("Exception occured on remote member while executing Function: {}",
+            this.functionObject.getId(), exception);
-    }
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-    }
-    finally {
+    } finally {
-    if ((flags & HAS_TX_ID) != 0) this.txUniqId = in.readInt();
+    if ((flags & HAS_TX_ID) != 0)
+      this.txUniqId = in.readInt();
-    if (this.processorId != 0) flags |= HAS_PROCESSOR_ID;
-    if (this.txUniqId != TXManagerImpl.NOTX) flags |= HAS_TX_ID;
-    if (this.txMemberId != null) flags |= HAS_TX_MEMBERID;
-    if (this.isReExecute) flags |= IS_REEXECUTE;
+    if (this.processorId != 0)
+      flags |= HAS_PROCESSOR_ID;
+    if (this.txUniqId != TXManagerImpl.NOTX)
+      flags |= HAS_TX_ID;
+    if (this.txMemberId != null)
+      flags |= HAS_TX_MEMBERID;
+    if (this.isReExecute)
+      flags |= IS_REEXECUTE;
-    if (this.processorId != 0) out.writeInt(this.processorId);
-    if (this.txUniqId != TXManagerImpl.NOTX) out.writeInt(this.txUniqId);
-    if (this.txMemberId != null) DataSerializer.writeObject(this.txMemberId,out);
+    if (this.processorId != 0)
+      out.writeInt(this.processorId);
+    if (this.txUniqId != TXManagerImpl.NOTX)
+      out.writeInt(this.txUniqId);
+    if (this.txMemberId != null)
+      DataSerializer.writeObject(this.txMemberId, out);
-    }
-    else {
+    } else {
-  public synchronized boolean sendReplyForOneResult(DM dm,
-      Object oneResult, boolean lastResult, boolean sendResultsInOrder)
-      throws CacheException, QueryException, ForceReattemptException,
-      InterruptedException {
+  public synchronized boolean sendReplyForOneResult(DM dm, Object oneResult, boolean lastResult,
+      boolean sendResultsInOrder)
+      throws CacheException, QueryException, ForceReattemptException, InterruptedException {
-    if(this.replyLastMsg) {
+    if (this.replyLastMsg) {
-    
+
-    sendReply(getSender(), this.processorId, dm, oneResult, msgNum,
-        lastResult, sendResultsInOrder);
+    sendReply(getSender(), this.processorId, dm, oneResult, msgNum, lastResult, sendResultsInOrder);
-  protected void sendReply(InternalDistributedMember member, int procId, DM dm, Object oneResult, int msgNum, boolean lastResult,
-      boolean sendResultsInOrder) {
+  protected void sendReply(InternalDistributedMember member, int procId, DM dm, Object oneResult,
+      int msgNum, boolean lastResult, boolean sendResultsInOrder) {
-      FunctionStreamingOrderedReplyMessage.send(member, procId, null, dm, oneResult,
-          msgNum, lastResult);
-    }
-    else {
-      FunctionStreamingReplyMessage.send(member, procId, null, dm, oneResult,
-          msgNum, lastResult);
+      FunctionStreamingOrderedReplyMessage.send(member, procId, null, dm, oneResult, msgNum,
+          lastResult);
+    } else {
+      FunctionStreamingReplyMessage.send(member, procId, null, dm, oneResult, msgNum, lastResult);
-  
+
-  /* (non-Javadoc)
+
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+
+  /*
+   * (non-Javadoc)
+   * 
-	  if(txMemberId==null) {
-		  return getSender();
-	  } else {
-		  return txMemberId;
-	  }
+    if (txMemberId == null) {
+      return getSender();
+    } else {
+      return txMemberId;
+    }
-  
+
-  
+
