Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This ExecutionContext will be used ONLY for querying because this
- * is a bit heavt-weight context whose life is longer in JVM than
- * {@link ExecutionContext} which will be used ONLY for index updates.
+ * This ExecutionContext will be used ONLY for querying because this is a bit heavt-weight context
+ * whose life is longer in JVM than {@link ExecutionContext} which will be used ONLY for index
+ * updates.
-  
-  
+
+
-  
+
-  
+
-  
+
-   * a map that stores general purpose maps for caching data that is valid 
-   * for one query execution only
+   * a map that stores general purpose maps for caching data that is valid for one query execution
+   * only
-  
+
-  
+
-  
+
-  
+
-      setHints((ArrayList)value);
+      setHints((ArrayList) value);
-    //execCache can be empty in cases where we are doing adds to indexes
-    //in that case, we use a default execCache
+    // execCache can be empty in cases where we are doing adds to indexes
+    // in that case, we use a default execCache
-    Map execCache = (Map)execCaches.get(scopeId);
+    Map execCache = (Map) execCaches.get(scopeId);
-  
+
-    //execCache can be empty in cases where we are doing adds to indexes
-    //in that case, we use a default execCache
+    // execCache can be empty in cases where we are doing adds to indexes
+    // in that case, we use a default execCache
-    Map execCache = (Map)execCaches.get(scopeId);
+    Map execCache = (Map) execCaches.get(scopeId);
-  
+
-  public void reset(){
+  public void reset() {
-  
-  public void setCqQueryContext(boolean cqQuery){
+
+  public void setCqQueryContext(boolean cqQuery) {
-  public boolean isCqQueryContext(){
+  public boolean isCqQueryContext() {
-  
+
-  
+
-  
+
-  
+
-  public PdxString getSavedPdxString(int index){
-    if(bindArgumentToPdxStringMap == null){
+  public PdxString getSavedPdxString(int index) {
+    if (bindArgumentToPdxStringMap == null) {
-    } 
-    
-    PdxString pdxString = bindArgumentToPdxStringMap.get(index-1);
-    if(pdxString == null){
-      pdxString = new PdxString((String)bindArguments[index-1]);
-      bindArgumentToPdxStringMap.put(index-1, pdxString);
+    }
+
+    PdxString pdxString = bindArgumentToPdxStringMap.get(index - 1);
+    if (pdxString == null) {
+      pdxString = new PdxString((String) bindArguments[index - 1]);
+      bindArgumentToPdxStringMap.put(index - 1, pdxString);
-    
+
-  
+
-  
+
-  
+
-  
+
-    return hints != null? hints.contains(indexName):false;
+    return hints != null ? hints.contains(indexName) : false;
-  
+
-   * Hint size is used for filter ordering.
-   * Smaller values have preference
+   * Hint size is used for filter ordering. Smaller values have preference
-  
+
-  
+
