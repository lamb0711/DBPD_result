GEODE-5562 Reading the values of LocalRegion.memoryThresholdReached and DistributedRegion.memoryThresholdReachedMembers must be atomic (#2320)

* GEODE-5562 Reading the values of LocalRegion.memoryThresholdReached and
           DistributedRegion.memoryThresholdReachedMembers must be atomic.
-import java.util.concurrent.CopyOnWriteArraySet;
-  private final Set<DistributedMember> memoryThresholdReachedMembers = new CopyOnWriteArraySet<>();
+  private final Set<DistributedMember> memoryThresholdReachedMembers = new HashSet<>();
-        setMemoryThresholdReachedCounterTrue(event.getMember());
+        addCriticalMember(event.getMember());
-        removeMemberFromCriticalList(event.getMember());
+        removeCriticalMember(event.getMember());
-  public void removeMemberFromCriticalList(DistributedMember member) {
+  public void removeCriticalMember(DistributedMember member) {
-      if (this.memoryThresholdReachedMembers.size() == 0) {
-        memoryThresholdReached.set(false);
+      if (this.memoryThresholdReachedMembers.isEmpty()) {
+        setMemoryThresholdReached(false);
-  public Set<DistributedMember> getMemoryThresholdReachedMembers() {
-    synchronized (this.memoryThresholdReachedMembers) {
-      return Collections.unmodifiableSet(this.memoryThresholdReachedMembers);
-    }
-  }
-
-  @Override
-        setMemoryThresholdReachedCounterTrue(idm);
+        addCriticalMember(idm);
-  private void setMemoryThresholdReachedCounterTrue(final DistributedMember idm) {
+  protected void addCriticalMember(final DistributedMember idm) {
-      this.memoryThresholdReachedMembers.add(idm);
-      if (this.memoryThresholdReachedMembers.size() > 0) {
-        memoryThresholdReached.set(true);
+      if (this.memoryThresholdReachedMembers.isEmpty()) {
+        setMemoryThresholdReached(true);
+      this.memoryThresholdReachedMembers.add(idm);
+    }
+  }
+
+  @Override
+  public MemoryThresholdInfo getAtomicThresholdInfo() {
+    if (!isMemoryThresholdReached()) {
+      return MemoryThresholdInfo.getNotReached();
+    }
+    synchronized (memoryThresholdReachedMembers) {
+      return new MemoryThresholdInfo(isMemoryThresholdReached(),
+          new HashSet<DistributedMember>(memoryThresholdReachedMembers));
