Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * For CAS operation, we have to store a unique long with all
- * the values being stored. This class encapsulates the
- * version and the value. Instances of this class can be
- * obtained by using {@link #getWrappedValue(byte[], int)}
+ * For CAS operation, we have to store a unique long with all the values being stored. This class
+ * encapsulates the version and the value. Instances of this class can be obtained by using
+ * {@link #getWrappedValue(byte[], int)}
-   * used to uniquely identify the value.
-   * used for "cas" operation
+   * used to uniquely identify the value. used for "cas" operation
-  
+
-  
+
-  
-  public ValueWrapper() {
-  }
+
+  public ValueWrapper() {}
-  
+
+   * 
-   * @return an instance of ValueWrapper that includes a version along
-   * with the given value.
+   * @return an instance of ValueWrapper that includes a version along with the given value.
-   * For binary protocol we always have to compare the cas version.
-   * To avoid turning each put into a get and replace, use ValueWrapper
-   * instances from this method which only uses cas version. note that
-   * equals and hashCode of this class have also been changed to
-   * only use the cas version. 
+   * For binary protocol we always have to compare the cas version. To avoid turning each put into a
+   * get and replace, use ValueWrapper instances from this method which only uses cas version. note
+   * that equals and hashCode of this class have also been changed to only use the cas version.
-  
+
-  
+
-	return this.flags;  
+    return this.flags;
-  
+
-  
+
-  
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
