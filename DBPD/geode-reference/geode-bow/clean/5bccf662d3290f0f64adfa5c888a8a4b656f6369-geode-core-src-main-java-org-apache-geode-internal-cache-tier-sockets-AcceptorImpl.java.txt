GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          logger.warn(LocalizedMessage
-              .create(LocalizedStrings.AcceptorImpl_IGNORING_MAX_THREADS_DUE_TO_JROCKIT_NIO_BUG));
+          logger.warn(
+              "Ignoring max-threads setting and using zero instead due to JRockit NIO bugs.  See GemFire bug #40198");
-          logger.warn(LocalizedMessage
-              .create(LocalizedStrings.AcceptorImpl_IGNORING_MAX_THREADS_DUE_TO_WINDOWS_IPV6_BUG));
+          logger.warn(
+              "Ignoring max-threads setting and using zero instead due to Java bug 6230761: NIO does not work with IPv6 on Windows.  See GemFire bug #40472");
-              LocalizedStrings.AcceptorImpl_SELECTOR_THREAD_POOLING_CAN_NOT_BE_USED_WITH_CLIENTSERVER_SSL_THE_SELECTOR_CAN_BE_DISABLED_BY_SETTING_MAXTHREADS0
-                  .toLocalizedString());
+              "Selector thread pooling can not be used with client/server SSL. The selector can be disabled by setting max-threads=0.");
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.AcceptorImpl_CACHE_SERVER_CONNECTION_LISTENER_BOUND_TO_ADDRESS_0_WITH_BACKLOG_1,
-          new Object[] {sockName, Integer.valueOf(backLog)}));
+      logger.info("Cache server connection listener bound to address {} with backlog {}.",
+          new Object[] {sockName, Integer.valueOf(backLog)});
-        logger.warn(LocalizedMessage
-            .create(LocalizedStrings.AcceptorImpl_COULD_NOT_CHECK_FOR_STUCK_KEYS, ignore));
+        logger.warn("Could not check for stuck keys.", ignore);
-            logger.info(LocalizedMessage
-                .create(LocalizedStrings.AcceptorImpl_STUCK_SELECTION_KEY_DETECTED_ON_0, sc));
+            logger.info("stuck selection key detected on {}", sc);
-                  logger.warn(LocalizedMessage
-                      .create(LocalizedStrings.AcceptorImpl_UNEXPECTED_EXCEPTION, ex));
+                  logger.warn("Unexpected Exception:", ex);
-                logger.warn(LocalizedMessage
-                    .create(LocalizedStrings.AcceptorImpl_UNEXPECTED_EXCEPTION, rejected));
+                logger.warn("Unexpected Exception:", rejected);
-            logger.warn(
-                LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED_EXCEPTION, ex));
+            logger.warn("Unexpected Exception:", ex);
-                logger.warn(LocalizedMessage
-                    .create(LocalizedStrings.AcceptorImpl_UNEXPECTED_EXCEPTION, ex2));
+                logger.warn("Unexpected Exception:", ex2);
-          logger.warn(
-              LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED_EXCEPTION, ex));
+          logger.warn("Unexpected Exception:", ex);
-          logger.warn(
-              LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED_EXCEPTION, npe));
+          logger.warn("Unexpected Exception:", npe);
-      logger.info(LocalizedMessage.create(LocalizedStrings.AcceptorImpl_SELECTOR_ENABLED));
+      logger.info("SELECTOR enabled");
-              logger.warn(LocalizedMessage.create(LocalizedStrings.AcceptorImpl_IGNORING, ex));
+              logger.warn("ignoring", ex);
-              logger.warn(LocalizedMessage.create(LocalizedStrings.AcceptorImpl_IGNORING, ex));
+              logger.warn("ignoring", ex);
-                    logger.warn(
-                        LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED, ex));
+                    logger.warn("unexpected", ex);
-                  logger.warn(
-                      LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED, rejected));
+                  logger.warn("unexpected", rejected);
-                  logger.warn(LocalizedMessage.create(
-                      LocalizedStrings.AcceptorImpl_IGNORING_EVENT_ON_SELECTOR_KEY__0, key));
+                  logger.warn("ignoring event on selector key {}", key);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED, ex));
+      logger.warn("unexpected", ex);
-            logger.error(LocalizedMessage.create(
-                LocalizedStrings.AcceptorImpl_CACHE_SERVER_UNEXPECTED_IOEXCEPTION_FROM_ACCEPT, e));
+            logger.error("Cache server: Unexpected IOException from accept", e);
-          logger.fatal(LocalizedMessage
-              .create(LocalizedStrings.AcceptorImpl_CACHE_SERVER_UNEXPECTED_EXCEPTION, e));
+          logger.fatal("Cache server: Unexpected Exception", e);
-                  logger.warn(LocalizedMessage.create(
-                      LocalizedStrings.AcceptorImpl_CACHE_SERVER_FAILED_ACCEPTING_CLIENT_CONNECTION_DUE_TO_SOCKET_TIMEOUT));
+                  logger.warn(
+                      "Cache server: failed accepting client connection due to socket timeout.");
-                  logger.warn(LocalizedMessage.create(
-                      LocalizedStrings.AcceptorImpl_CACHE_SERVER_FAILED_ACCEPTING_CLIENT_CONNECTION__0,
-                      ex), ex);
+                  logger.warn("Cache server: failed accepting client connection " +
+                      ex,
+                      ex);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED, rejected));
+        logger.warn("unexpected", rejected);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.AcceptorImpl_REJECTED_CONNECTION_FROM_0_BECAUSE_CURRENT_CONNECTION_COUNT_OF_1_IS_GREATER_THAN_OR_EQUAL_TO_THE_CONFIGURED_MAX_OF_2,
+        logger.warn(
+            "Rejected connection from {} because current connection count of {} is greater than or equal to the configured max of {}",
-                Integer.valueOf(this.maxConnections)}));
+                Integer.valueOf(this.maxConnections)});
-                LocalizedStrings.AcceptorImpl_EXCEEDED_MAX_CONNECTIONS_0
-                    .toLocalizedString(Integer.valueOf(this.maxConnections)),
+                String.format("exceeded max-connections %s",
+                    Integer.valueOf(this.maxConnections)),
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.AcceptorImpl_REJECTED_CONNECTION_FROM_0_BECAUSE_REQUEST_REJECTED_BY_POOL,
-            new Object[] {serverConn}));
+        logger.warn(
+            "Rejected connection from {} because incoming request was rejected by pool possibly due to thread exhaustion",
+            serverConn);
-              LocalizedStrings.AcceptorImpl_EXCEEDED_MAX_CONNECTIONS_0
-                  .toLocalizedString(Integer.valueOf(this.maxConnections)),
+              String.format("exceeded max-connections %s",
+                  Integer.valueOf(this.maxConnections)),
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.AcceptorImpl_CACHE_SERVER_TIMED_OUT_WAITING_FOR_HANDSHAKE_FROM__0,
-              socket.getRemoteSocketAddress()));
+          logger.warn("Cache server: timed out waiting for handshake from {}",
+              socket.getRemoteSocketAddress());
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.AcceptorImpl_CACHE_SERVER_ON_PORT_0_IS_SHUTTING_DOWN, this.localPort));
+        logger.info("Cache server on port {} is shutting down.", this.localPort);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.AcceptorImpl_UNEXPECTED), e);
+      logger.warn("unexpected", e);
-        logger.warn(LocalizedMessage
-            .create(LocalizedStrings.PoolImpl_TIMEOUT_WAITING_FOR_BACKGROUND_TASKS_TO_COMPLETE));
+        logger.warn("Timeout waiting for background tasks to complete.");
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.AcceptorImpl_CACHE_SERVER_FAILED_ACCEPTING_CLIENT_CONNECTION_DUE_TO_SOCKET_TIMEOUT));
+              logger
+                  .warn("Cache server: failed accepting client connection due to socket timeout.");
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.AcceptorImpl_CACHE_SERVER_FAILED_ACCEPTING_CLIENT_CONNECTION__0,
-                  ex), ex);
+              logger.warn("Cache server: failed accepting client connection " +
+                  ex,
+                  ex);
