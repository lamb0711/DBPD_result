Merge branch 'release/1.5.0'

-import org.apache.geode.SystemFailure;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.internal.cache.tier.ClientSideHandshake;
+  public ServerQueueStatus getServerQueueStatus() {
+    return serverQueueStatus;
+  }
+
+  /**
+   * server-side queue status at the time we connected to it
+   */
+  private ServerQueueStatus serverQueueStatus;
+
-      DistributedSystem ids, HandShake handshake, QueueManager qManager, EndpointManager eManager,
-      Endpoint endpoint, int handshakeTimeout, SocketCreator socketCreator)
-      throws AuthenticationRequiredException, AuthenticationFailedException,
-      ServerRefusedConnectionException {
+      DistributedSystem ids, ClientSideHandshake handshake, QueueManager qManager,
+      EndpointManager eManager, Endpoint endpoint, int handshakeTimeout,
+      SocketCreator socketCreator) throws AuthenticationRequiredException,
+      AuthenticationFailedException, ServerRefusedConnectionException {
-    this.isDurableClient = handshake.getMembership().isDurable();
+    this.isDurableClient = handshake.getMembershipId().isDurable();
-      ServerQueueStatus sqs = handshake.handshakeWithSubscriptionFeed(mySock, this.isPrimary);
-      if (sqs.isPrimary() || sqs.isNonRedundant()) {
+      this.serverQueueStatus = handshake.handshakeWithSubscriptionFeed(mySock, this.isPrimary);
+      if (serverQueueStatus.isPrimary() || serverQueueStatus.isNonRedundant()) {
-          pool.setPendingEventCount(sqs.getServerQueueSize());
+          pool.setPendingEventCount(serverQueueStatus.getServerQueueSize());
-      MemberAttributes ma =
-          new MemberAttributes(0, -1, DistributionManager.NORMAL_DM_TYPE, -1, null, null, null);
+      MemberAttributes ma = new MemberAttributes(0, -1, ClusterDistributionManager.NORMAL_DM_TYPE,
+          -1, null, null, null);
-        // Don't want the timeout after handshake
-        if (mySock != null) {
-          try {
-            mySock.setSoTimeout(0);
-          } catch (SocketException ignore) {
-          }
-        }
-
+
+    final int headerReadTimeout = (int) Math.round(serverQueueStatus.getPingInterval()
+        * qManager.getPool().getSubscriptionTimeoutMultiplier() * 1.25);
+
-          clientMessage.recv();
+          clientMessage.receiveWithHeaderReadTimeout(headerReadTimeout);
