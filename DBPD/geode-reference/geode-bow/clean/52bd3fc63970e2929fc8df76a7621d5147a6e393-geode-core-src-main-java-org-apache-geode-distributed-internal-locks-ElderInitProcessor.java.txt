GEODE-4650: Refactor Elder selection (#2393)

GEODE-4650: Resolve race condition in selection of the elder

* no longer cache the elder, re-compute the elder when needed
* extract elder logic to a new class to make unit testing possible
* adds tests for elder selection
* adds tests of DLock Grantor failover
* removes isAdam() - isAdam used to mean that the member was alone (that there were no non-surprise, non-admin members in the cluster) when it joined. This was only used in two places. The first, in the DLockService, protected against recovering dlocks when there isn't a cluster. This usage is replaced with a check for isLoner(). The other use of isAdam was in ElderInitProcessor and was redundant with an inner check if there were other members in the distributed system.
* fix testFairness so that it can be run repeatedly in the same JVM 

Signed-off-by: Dan Smith <dsmith@pivotal.io>
Signed-off-by: Galen O'Sullivan <gosullivan@pivotal.io>
Signed-off-by: Ken Howe <khowe@pivotal.io>

-  static void init(DistributionManager dm, HashMap map) {
-    HashSet crashedGrantors = new HashSet();
-    if (!dm.isAdam()) {
-      Set others = dm.getOtherDistributionManagerIds();
-      if (!others.isEmpty()) {
-        ElderInitProcessor processor = new ElderInitProcessor(dm, others, map, crashedGrantors);
-        ElderInitMessage.send(others, dm, processor);
-        try {
-          processor.waitForRepliesUninterruptibly();
-        } catch (ReplyException e) {
-          e.handleCause();
-        }
+  static void init(DistributionManager dm, HashMap<String, GrantorInfo> map) {
+    HashSet<String> crashedGrantors = new HashSet<>();
+    Set others = dm.getOtherDistributionManagerIds();
+    if (!others.isEmpty()) {
+      ElderInitProcessor processor = new ElderInitProcessor(dm, others, map, crashedGrantors);
+      ElderInitMessage.send(others, dm, processor);
+      try {
+        processor.waitForRepliesUninterruptibly();
+      } catch (ReplyException e) {
+        e.handleCause();
-    {
-      Iterator it = crashedGrantors.iterator();
-      while (it.hasNext()) {
-        map.put(it.next(), new GrantorInfo(null, 0, 0, true));
-      }
+
+    for (String crashedGrantor : crashedGrantors) {
+      map.put(crashedGrantor, new GrantorInfo(null, 0, 0, true));
