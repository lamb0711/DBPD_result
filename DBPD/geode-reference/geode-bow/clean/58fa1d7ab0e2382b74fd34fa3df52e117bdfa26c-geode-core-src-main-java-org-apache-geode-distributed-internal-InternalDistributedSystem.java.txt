Merge remote-tracking branch 'upstream/develop' into develop

+import java.util.Optional;
-import org.apache.geode.admin.AlertLevel;
+import org.apache.geode.internal.alerting.AlertLevel;
+import org.apache.geode.internal.alerting.AlertMessaging;
+import org.apache.geode.internal.alerting.AlertingService;
+import org.apache.geode.internal.alerting.AlertingSession;
+import org.apache.geode.internal.logging.LogConfig;
+import org.apache.geode.internal.logging.LogConfigListener;
+import org.apache.geode.internal.logging.LogConfigSupplier;
+import org.apache.geode.internal.logging.LogFile;
+import org.apache.geode.internal.logging.LoggingSession;
-import org.apache.geode.internal.logging.log4j.AlertAppender;
-import org.apache.geode.internal.logging.log4j.LogWriterAppender;
-import org.apache.geode.internal.logging.log4j.LogWriterAppenders;
+import org.apache.geode.internal.logging.NullLoggingSession;
+import org.apache.geode.internal.statistics.StatisticsConfig;
-    implements OsStatisticsFactory, StatisticsManager {
+    implements OsStatisticsFactory, StatisticsManager, LogConfigSupplier {
-  // /** The log writer was provided by an external entity */
-  // private boolean externalLogWriterProvided = false;
-  //
-  private LogWriterAppender logWriterAppender = null;
-
-  private LogWriterAppender securityLogWriterAppender = null;
-
+  private final AlertingSession alertingSession;
+  private final AlertingService alertingService;
+
+  private final LoggingSession loggingSession;
+  private final Set<LogConfigListener> logConfigListeners = new HashSet<>();
+
+    alertingSession = AlertingSession.create();
+    alertingService = new AlertingService();
+    loggingSession = LoggingSession.create();
-      AlertAppender.getInstance().onConnect(this);
-
-      // LOG: create LogWriterAppender(s) if log-file or security-log-file is specified
-      final boolean hasLogFile =
-          this.config.getLogFile() != null && !this.config.getLogFile().equals(new File(""));
-      final boolean hasSecurityLogFile = this.config.getSecurityLogFile() != null
-          && !this.config.getSecurityLogFile().equals(new File(""));
-      LogService.configureLoggers(hasLogFile, hasSecurityLogFile);
-      if (hasLogFile || hasSecurityLogFile) {
-
-        // main log file
-        if (hasLogFile) {
-          // if log-file then create logWriterAppender
-          this.logWriterAppender = LogWriterAppenders.getOrCreateAppender(
-              LogWriterAppenders.Identifier.MAIN, this.isLoner, this.config, true);
-        }
-
-        // security log file
-        if (hasSecurityLogFile) {
-          // if security-log-file then create securityLogWriterAppender
-          this.securityLogWriterAppender = LogWriterAppenders.getOrCreateAppender(
-              LogWriterAppenders.Identifier.SECURITY, this.isLoner, this.config, false);
-        } else {
-          // let security route to regular log-file or stdout
-        }
-      }
+      boolean logBanner = !attemptingToReconnect;
+      boolean logConfiguration = !attemptingToReconnect;
+      loggingSession.createSession(this, logBanner, logConfiguration);
-            LogWriterFactory.createLogWriterLogger(this.isLoner, false, this.config, true);
+            LogWriterFactory.createLogWriterLogger(this.config, false);
-            LogWriterFactory.createLogWriterLogger(this.isLoner, true, this.config, false);
+            LogWriterFactory.createLogWriterLogger(this.config, true);
+      loggingSession.startSession();
+
-        this.sampler = new GemFireStatSampler(this);
+        Optional<LogFile> logFile = loggingSession.getLogFile();
+        if (logFile.isPresent()) {
+          sampler = new GemFireStatSampler(this, logFile.get());
+        } else {
+          sampler = new GemFireStatSampler(this);
+        }
-      if (this.logWriterAppender != null) {
-        LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.MAIN);
-      }
-      if (this.securityLogWriterAppender != null) {
-        LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.SECURITY);
-      }
+      alertingSession.createSession(new AlertMessaging(this));
+      alertingSession.startSession();
-      this.startedLocator = InternalLocator.createLocator(locId.getPort(), null, this.logWriter,
-          this.securityLogWriter, locId.getHost().getAddress(), locId.getHostnameForClients(),
-          this.originalConfig.toProperties(), false);
+      this.startedLocator =
+          InternalLocator.createLocator(locId.getPort(), NullLoggingSession.create(), null,
+              logWriter, securityLogWriter, locId.getHost().getAddress(),
+              locId.getHostnameForClients(), originalConfig.toProperties(), false);
-          if (this.logWriterAppender != null) {
-            LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
-          }
-          if (this.securityLogWriterAppender != null) {
-            // LOG:SECURITY: old code did NOT invoke this
-            LogWriterAppenders.stop(LogWriterAppenders.Identifier.SECURITY);
-          }
+          alertingSession.stopSession();
-        AlertAppender.getInstance().shuttingDown();
-
-        if (this.logWriterAppender != null) {
-          LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
-        }
-        if (this.securityLogWriterAppender != null) {
-          LogWriterAppenders.destroy(LogWriterAppenders.Identifier.SECURITY);
-        }
+        loggingSession.stopSession();
+          if (!this.attemptingToReconnect) {
+            loggingSession.shutdown();
+          }
+          alertingSession.shutdown();
+  public AlertingService getAlertingService() {
+    return alertingService;
+  }
+
+  @Override
+  public LogConfig getLogConfig() {
+    return config;
+  }
+
+  @Override
+  public StatisticsConfig getStatisticsConfig() {
+    return config;
+  }
+
+  @Override
+  public void addLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.add(logConfigListener);
+  }
+
+  @Override
+  public void removeLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.remove(logConfigListener);
+  }
+
+  public Optional<LogFile> getLogFile() {
+    return loggingSession.getLogFile();
+  }
+
+  void logConfigChanged() {
+    for (LogConfigListener listener : logConfigListeners) {
+      listener.configChanged();
+    }
+  }
+
-    return hasAlertListenerFor(member, AlertLevel.WARNING.getSeverity());
+    return hasAlertListenerFor(member, AlertLevel.WARNING.intLevel());
-
-    return AlertAppender.getInstance().hasAlertListener(member, severity);
+    return alertingService.hasAlertListener(member, AlertLevel.find(severity));
