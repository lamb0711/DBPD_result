Merge branch 'release/1.0.0-incubating.M3'

-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.Collection;
-import java.util.Enumeration;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Properties;
-
-import org.apache.logging.log4j.Logger;
-
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import org.apache.logging.log4j.Logger;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.*;
- * @since     3.5
+ * @since GemFire     3.5
-  implements DistributionLocator, InternalManagedEntity {
-  
+    implements DistributionLocator, InternalManagedEntity {
+
-  
-  /** How many new <code>DistributionLocator</code>s have been created? */
+
+  /**
+   * How many new <code>DistributionLocator</code>s have been created?
+   */
-  /** The configuration object for this locator */
+  /**
+   * The configuration object for this locator
+   */
-  /** The id of this distribution locator */
+  /**
+   * The id of this distribution locator
+   */
-  
-  /** Used to control the actual DistributionLocator service */
+
+  /**
+   * Used to control the actual DistributionLocator service
+   */
-  /** The system that this locator is a part of */
+  /**
+   * The system that this locator is a part of
+   */
-  
+
-                                 AdminDistributedSystemImpl system) {
+      AdminDistributedSystemImpl system) {
-  
+
-  
-        public String getId() {
-                return this.id;
-        }
+
+  public String getId() {
+    return this.id;
+  }
-   * @since 4.0
+   * @since GemFire 4.0
-  
+
-  public boolean waitToStart(long timeout) 
-    throws InterruptedException {
+  public boolean waitToStart(long timeout)
+      throws InterruptedException {
-    if (Thread.interrupted()) throw new InterruptedException();
-    
+    if (Thread.interrupted())
+      throw new InterruptedException();
+
-      LocalizedStrings.DistributionLocatorImpl_DONE_WAITING_FOR_LOCATOR));
+        LocalizedStrings.DistributionLocatorImpl_DONE_WAITING_FOR_LOCATOR));
-  public boolean waitToStop(long timeout) 
-    throws InterruptedException {
+  public boolean waitToStop(long timeout)
+      throws InterruptedException {
-    if (Thread.interrupted()) throw new InterruptedException();
-    
+    if (Thread.interrupted())
+      throw new InterruptedException();
+
-    DM dm = ((AdminDistributedSystemImpl)getDistributedSystem()).getDistributionManager();
-    if(dm == null) {
+    DM dm = ((AdminDistributedSystemImpl) getDistributedSystem()).getDistributionManager();
+    if (dm == null) {
-      }
-      catch (IllegalStateException e) {
+      } catch (IllegalStateException e) {
-    
+
-    
+
-    for (Iterator<InternalDistributedMember> memberIter = hostedLocators.keySet().iterator(); memberIter.hasNext();) {
-      for (Iterator<String> locatorIter = hostedLocators.get(memberIter.next()).iterator(); locatorIter.hasNext();) {
+    for (Iterator<InternalDistributedMember> memberIter = hostedLocators.keySet().iterator(); memberIter.hasNext(); ) {
+      for (Iterator<String> locatorIter = hostedLocators.get(memberIter.next()).iterator(); locatorIter.hasNext(); ) {
-          }
-          catch (UnknownHostException e) {
+          } catch (UnknownHostException e) {
-  
+
-  
+
-  
+
-  
-	/**
-	 * Returns a string representation of the object.
-	 * 
-	 * @return a string representation of the object
-	 */
+
+  /**
+   * Returns a string representation of the object.
+   *
+   * @return a string representation of the object
+   */
-	public String toString() {
-		return "DistributionLocator " + getId();
-	}
+  public String toString() {
+    return "DistributionLocator " + getId();
+  }
-      String pn = (String)en.nextElement();
-      sb.append(" -Dgemfire." + pn + "=" + props.getProperty(pn));
+      String pn = (String) en.nextElement();
+      sb.append(" -D" + DistributionConfig.GEMFIRE_PREFIX + "" + pn + "=" + props.getProperty(pn));
-      this.controller.buildSSLArguments(this.system.getConfig());
+        this.controller.buildSSLArguments(this.system.getConfig());
-      this.controller.buildSSLArguments(this.system.getConfig());
+        this.controller.buildSSLArguments(this.system.getConfig());
