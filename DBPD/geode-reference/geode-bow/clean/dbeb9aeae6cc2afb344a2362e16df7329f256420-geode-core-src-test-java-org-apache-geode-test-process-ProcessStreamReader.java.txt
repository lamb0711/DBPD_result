Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Reads the output from a process stream and stores it for test validation. 
+ * Reads the output from a process stream and stores it for test validation.
- * 
+@SuppressWarnings("unused")
-  
+
-  
+  private volatile IOException streamClosedStack;
+
-  public int linecount = 0;
+  private int lineCount = 0;
-  public ProcessStreamReader(final String command, final InputStream stream, final Queue<String> lineBuffer, final List<String> allLines) {
+  public ProcessStreamReader(final String command, final InputStream stream,
+      final Queue<String> lineBuffer, final List<String> allLines) {
-  
+
-        this.linecount++;
+        this.lineCount++;
-      this.startStack.initCause(streamClosed);
-      throw this.startStack;
+      this.streamClosedStack = streamClosed;
+
+  // a test can use this to check if stream was closed cleanly or by tear-down
+  public IOException getStreamClosedStack() {
+    return this.streamClosedStack;
+  }
