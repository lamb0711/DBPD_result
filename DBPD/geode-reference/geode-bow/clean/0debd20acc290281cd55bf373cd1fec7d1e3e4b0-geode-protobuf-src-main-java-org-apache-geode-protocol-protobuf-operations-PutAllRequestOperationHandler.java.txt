GEODE-3192,GEODE-3229: Change API and implementation of protobuf PutAll. This closes #643

* We will now dispatch incoming protobuf PutAlls as a series of put operations
* The PutAllResponse will contain a set of failed keys and the error they failed with

Signed-off-by: Galen O'Sullivan <gosullivan@pivotal.io>
Signed-off-by: Brian Rowe <browe@pivotal.io>

-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.Objects;
+import java.util.stream.Collectors;
-      RegionAPI.PutAllRequest request, Cache cache) {
-    String regionName = request.getRegionName();
-    Region region = cache.getRegion(regionName);
+      RegionAPI.PutAllRequest putAllRequest, Cache cache) {
+    Region region = cache.getRegion(putAllRequest.getRegionName());
-          "Region passed by client did not exist: " + regionName, logger, null));
+          "Region passed by client did not exist: " + putAllRequest.getRegionName(), logger, null));
-    Map entries = extractPutAllEntries(serializationService, request);
-    try {
-      region.putAll(entries);
-    } catch (Exception ex) {
-      return Failure
-          .of(ProtobufResponseUtilities.createAndLogErrorResponse(ex.getMessage(), logger, ex));
-    }
-
-    return Success.of(RegionAPI.PutAllResponse.newBuilder().build());
+    RegionAPI.PutAllResponse.Builder builder = RegionAPI.PutAllResponse.newBuilder()
+        .addAllFailedKeys(putAllRequest.getEntryList().stream()
+            .map((entry) -> singlePut(serializationService, region, entry)).filter(Objects::nonNull)
+            .collect(Collectors.toList()));
+    return Success.of(builder.build());
-  // Read all of the entries out of the protobuf and return an error (without performing any puts)
-  // if any of the entries can't be decoded
-  private Map extractPutAllEntries(SerializationService serializationService,
-      RegionAPI.PutAllRequest putAllRequest) {
-    Map entries = new HashMap();
+  private BasicTypes.KeyedErrorResponse singlePut(SerializationService serializationService,
+      Region region, BasicTypes.Entry entry) {
-      for (BasicTypes.Entry entry : putAllRequest.getEntryList()) {
-        Object decodedValue = ProtobufUtilities.decodeValue(serializationService, entry.getValue());
-        Object decodedKey = ProtobufUtilities.decodeValue(serializationService, entry.getKey());
+      Object decodedValue = ProtobufUtilities.decodeValue(serializationService, entry.getValue());
+      Object decodedKey = ProtobufUtilities.decodeValue(serializationService, entry.getKey());
-        entries.put(decodedKey, decodedValue);
-      }
+      region.put(decodedKey, decodedValue);
-      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
+      return buildAndLogKeyedError(entry, "Encoding not supported", ex);
-      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
+      return buildAndLogKeyedError(entry, "Codec error in protobuf deserialization", ex);
+    } catch (ClassCastException ex) {
+      return buildAndLogKeyedError(entry, "Invalid key or value type for region", ex);
+    return null;
+  }
-    return entries;
+  private BasicTypes.KeyedErrorResponse buildAndLogKeyedError(BasicTypes.Entry entry,
+      String message, Exception ex) {
+    logger.error(message, ex);
+    BasicTypes.ErrorResponse errorResponse =
+        BasicTypes.ErrorResponse.newBuilder().setMessage(message).build();
+    return BasicTypes.KeyedErrorResponse.newBuilder().setKey(entry.getKey()).setError(errorResponse)
+        .build();
