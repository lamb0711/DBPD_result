Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

+import java.util.Map;
+
-        message.addStringPart(this._regionName);
+        message.addStringPart(this._regionName, true);
-        message.addStringPart(this._regionName);
+        message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-        message.addStringPart(this._regionName);
+        message.addStringPart(this._regionName, true);
-          message.addStringPart(this._regionName);
+          message.addStringPart(this._regionName, true);
-          message.addStringPart(this._regionName);
+          message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-        message.addStringPart(this._regionName);
+        message.addStringPart(this._regionName, true);
-          message.addStringPart(this._regionName);
+          message.addStringPart(this._regionName, true);
-          message.addStringPart(this._regionName);
+          message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
-
-          message = new Message(7 + cqMsgParts, clientVersion);
+          message = getMessage(7 + cqMsgParts, clientVersion);
-          message.addStringPart(this._regionName);
+          message.addStringPart(this._regionName, true);
-          message = new Message(9 + cqMsgParts, clientVersion);
+          message = getMessage(9 + cqMsgParts, clientVersion);
-            message.addStringPart(this._regionName);
+            message.addStringPart(this._regionName, true);
-            message.addStringPart(this._regionName);
+            message.addStringPart(this._regionName, true);
-          message = new Message(7 + cqMsgParts, clientVersion);
+          message = getMessage(7 + cqMsgParts, clientVersion);
-          message = new Message(7 + cqMsgParts, clientVersion);
+          message = getMessage(7 + cqMsgParts, clientVersion);
-        message.addStringPart(this._regionName);
+        message.addStringPart(this._regionName, true);
-        message = new Message(4 + cqMsgParts, clientVersion);
+        message = getMessage(4 + cqMsgParts, clientVersion);
-        message.addStringPart(this._regionName);
+        message.addStringPart(this._regionName, true);
-        message = new Message(4 + cqMsgParts, clientVersion);
+        message = getMessage(4 + cqMsgParts, clientVersion);
-        message.addStringPart(this._regionName);
+        message.addStringPart(this._regionName, true);
-      message = new Message(4 + cqMsgParts, clientVersion);
+      message = getMessage(4 + cqMsgParts, clientVersion);
-      message.addStringPart(this._regionName);
+      message.addStringPart(this._regionName, true);
+  private static final ThreadLocal<Map<Integer,Message>> CACHED_MESSAGES = new ThreadLocal<Map<Integer,Message>>() {
+    protected Map<Integer,Message> initialValue() {
+      return new HashMap<Integer,Message>();
+    };
+  };
+
+  private Message getMessage(int numParts, Version clientVersion) {
+    Message m = CACHED_MESSAGES.get().get(numParts);
+    if (m == null) {
+      m =  new Message(numParts, Version.CURRENT);
+      CACHED_MESSAGES.get().put(numParts, m);
+    }
+    m.clearParts();
+    m.setVersion(clientVersion);
+    return m;
+  }
+      
+  
+    private static final String[] EMPTY_NAMES_ARRAY = new String[0];
+    
+    private static Map<String,String[]> NAMES_ARRAY = new ConcurrentHashMap<String,String[]>();
-      this.name = name;
+      initializeName(name);
-
+    
+    private void initializeName(String name) {
+      this.name = name;
+      if (!NAMES_ARRAY.containsKey(name)) {
+        NAMES_ARRAY.put(name, new String[]{name});
+      }
+    }
+    
-        message.addStringPart(this.name);
+        message.addStringPart(this.name, true);
-      if (isEmpty()) {
-        return new String[0];
-      } else {
-        return new String[]{this.name};
-      }
+      return (isEmpty()) ? EMPTY_NAMES_ARRAY : NAMES_ARRAY.get(this.name);
-        message.addStringPart(cq);
+        message.addStringPart(cq, true);
