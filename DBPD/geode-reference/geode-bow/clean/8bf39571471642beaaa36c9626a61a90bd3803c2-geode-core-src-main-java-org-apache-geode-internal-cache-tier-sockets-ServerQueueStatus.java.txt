Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Status of HARegionQueue on server when the client is sonnecting/reconnecting.
- * This holds the information abt HARegionQueue and this gets populated as a
- * response of Handshake to server. This wrapper object is used to hold the
- * various info retrurned from Handshake. such as endpoint type and queue size.
+ * Status of HARegionQueue on server when the client is sonnecting/reconnecting. This holds the
+ * information abt HARegionQueue and this gets populated as a response of Handshake to server. This
+ * wrapper object is used to hold the various info retrurned from Handshake. such as endpoint type
+ * and queue size.
-public class ServerQueueStatus
-{
+public class ServerQueueStatus {
-  /** Endpoint type for this endpoint*/
-  private byte epType = (byte)0 ;
+  /** Endpoint type for this endpoint */
+  private byte epType = (byte) 0;
-  /** size of the PDX  registry on the server. Currently only set for gateways */
+  /** size of the PDX registry on the server. Currently only set for gateways */
-  
+
-   * Default constructor 
-   * Called when connectionsPerServer=0
-   */  
-  public ServerQueueStatus(DistributedMember memberId){
-    this((byte)0,0,memberId);
+   * Default constructor Called when connectionsPerServer=0
+   */
+  public ServerQueueStatus(DistributedMember memberId) {
+    this((byte) 0, 0, memberId);
+
-   * Constructor 
-   * Called when connectionsPerServer is nto equal to 0
+   * Constructor Called when connectionsPerServer is nto equal to 0
+   * 
-  public ServerQueueStatus(byte epType, int qSize,DistributedMember memberId){
+  public ServerQueueStatus(byte epType, int qSize, DistributedMember memberId) {
-    this.epType = epType ;
+    this.epType = epType;
- 
+
-  
+
+   * 
-  public boolean isPrimary(){
-    return this.epType == (byte)2 ;
+  public boolean isPrimary() {
+    return this.epType == (byte) 2;
+
+   * 
-  public boolean isRedundant(){
-    return this.epType == (byte)1 ;
+  public boolean isRedundant() {
+    return this.epType == (byte) 1;
+
+   * 
-  public boolean isNonRedundant(){
-    return this.epType == (byte)0 ;
+  public boolean isNonRedundant() {
+    return this.epType == (byte) 0;
+
-   * returns qSize of the HARegionQueue for this client 
+   * returns qSize of the HARegionQueue for this client
+   * 
-  public int getServerQueueSize(){
-    return this.qSize ;
+  public int getServerQueueSize() {
+    return this.qSize;
-  
+
-    buffer
-      .append("ServerQueueStatus [")
-      .append("qSize=")
-      .append(this.qSize)
-      .append("; epType=")
-      .append(getTypeAsString())
-      .append("]");
+    buffer.append("ServerQueueStatus [").append("qSize=").append(this.qSize).append("; epType=")
+        .append(getTypeAsString()).append("]");
-  
+
-    }
-    else if (isRedundant()) {
+    } else if (isRedundant()) {
-    }
-    else {
+    } else {
-  
-  
-  
+
+
+
+
+
