GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)

Changing all classes in Membership to be parameterized by an ID type,
which extends MemberIdentifier. This allows core to create a membership
system that manages InternalDistributedMember objects in a type safe
way.

Removing all uses of InternalDistributedMember, DistributedMember, and
friends from within the membership code.

-public class GMSJoinLeave implements JoinLeave {
+public class GMSJoinLeave<ID extends MemberIdentifier> implements JoinLeave<ID> {
-  private MemberIdentifier localAddress;
+  private ID localAddress;
-  private Services services;
+  private Services<ID> services;
-  private volatile GMSMembershipView currentView;
+  private volatile GMSMembershipView<ID> currentView;
-  private volatile GMSMembershipView previousView;
+  private volatile GMSMembershipView<ID> previousView;
-  private final Set<MemberIdentifier> removedMembers = new HashSet<>();
+  private final Set<ID> removedMembers = new HashSet<>();
-  private final Set<MemberIdentifier> leftMembers = new HashSet<>();
+  private final Set<ID> leftMembers = new HashSet<>();
-  private volatile GMSMembershipView preparedView;
+  private volatile GMSMembershipView<ID> preparedView;
-  private GMSMembershipView lastConflictingView;
+  private GMSMembershipView<ID> lastConflictingView;
-  private final List<AbstractGMSMessage> viewRequests = new LinkedList<>();
+  private final List<AbstractGMSMessage<ID>> viewRequests = new LinkedList<>();
-  private final JoinResponseMessage[] joinResponse = new JoinResponseMessage[1];
+  private final JoinResponseMessage<ID>[] joinResponse = new JoinResponseMessage[1];
-  final SearchState searchState = new SearchState();
+  final SearchState<ID> searchState = new SearchState<>();
-  GMSMembershipView quorumLostView;
+  GMSMembershipView<ID> quorumLostView;
-  static class SearchState {
+  static class SearchState<ID extends MemberIdentifier> {
-    Set<MemberIdentifier> alreadyTried = new HashSet<>();
-    Set<MemberIdentifier> registrants = new HashSet<>();
-    MemberIdentifier possibleCoordinator;
+    Set<ID> alreadyTried = new HashSet<>();
+    Set<ID> registrants = new HashSet<>();
+    ID possibleCoordinator;
-    GMSMembershipView view;
+    GMSMembershipView<ID> view;
-    final Set<FindCoordinatorResponse> responses = new HashSet<>();
+    final Set<FindCoordinatorResponse<ID>> responses = new HashSet<>();
-      SearchState state = searchState;
+      SearchState<ID> state = searchState;
-    SearchState state = searchState;
+    SearchState<ID> state = searchState;
-    MemberIdentifier coord = state.possibleCoordinator;
+    ID coord = state.possibleCoordinator;
-      JoinRequestMessage req = new JoinRequestMessage(coord, this.localAddress,
+      JoinRequestMessage<ID> req = new JoinRequestMessage<>(coord, this.localAddress,
-    JoinResponseMessage response;
+    JoinResponseMessage<ID> response;
-  private JoinResponseMessage waitForJoinResponse() throws InterruptedException {
-    JoinResponseMessage response;
+  private JoinResponseMessage<ID> waitForJoinResponse() throws InterruptedException {
+    JoinResponseMessage<ID> response;
-          GMSMembershipView v = response.getCurrentView();
-          MemberIdentifier coord = v.getCoordinator();
+          GMSMembershipView<ID> v = response.getCurrentView();
+          ID coord = v.getCoordinator();
-  public boolean isMemberLeaving(MemberIdentifier mbr) {
+  public boolean isMemberLeaving(ID mbr) {
-  void processMessage(JoinRequestMessage incomingRequest) {
+  void processMessage(JoinRequestMessage<ID> incomingRequest) {
-      JoinResponseMessage m =
-          new JoinResponseMessage("Rejecting the attempt of a member using an older version of the "
-              + "product to join the distributed system", incomingRequest.getRequestId());
+      JoinResponseMessage<ID> m =
+          new JoinResponseMessage<>(
+              "Rejecting the attempt of a member using an older version of the "
+                  + "product to join the distributed system",
+              incomingRequest.getRequestId());
-      JoinResponseMessage m = new JoinResponseMessage(rejection, 0);
+      JoinResponseMessage<ID> m = new JoinResponseMessage<>(rejection, 0);
-  void processMessage(LeaveRequestMessage incomingRequest) {
+  void processMessage(LeaveRequestMessage<ID> incomingRequest) {
-    GMSMembershipView v = currentView;
+    GMSMembershipView<ID> v = currentView;
-    MemberIdentifier mbr = incomingRequest.getMemberID();
+    ID mbr = incomingRequest.getMemberID();
-      GMSMembershipView check = new GMSMembershipView(v, v.getViewId() + 1);
+      GMSMembershipView<ID> check = new GMSMembershipView<>(v, v.getViewId() + 1);
-      MemberIdentifier coordinator = check.getCoordinator();
+      ID coordinator = check.getCoordinator();
-  void processMessage(RemoveMemberMessage incomingRequest) {
+  void processMessage(RemoveMemberMessage<ID> incomingRequest) {
-    GMSMembershipView v = currentView;
+    GMSMembershipView<ID> v = currentView;
-    MemberIdentifier mbr = incomingRequest.getMemberID();
+    ID mbr = incomingRequest.getMemberID();
-      GMSMembershipView check = new GMSMembershipView(v, v.getViewId() + 1);
+      GMSMembershipView<ID> check = new GMSMembershipView<>(v, v.getViewId() + 1);
-          RemoveMemberMessage removeMemberMessage = new RemoveMemberMessage(mbr, mbr,
+          RemoveMemberMessage<ID> removeMemberMessage = new RemoveMemberMessage<>(mbr, mbr,
-  void recordViewRequest(AbstractGMSMessage request) {
+  void recordViewRequest(AbstractGMSMessage<ID> request) {
-  List<AbstractGMSMessage> getViewRequests() {
+  List<AbstractGMSMessage<ID>> getViewRequests() {
-  private void becomeCoordinator(MemberIdentifier oldCoordinator) {
+  private void becomeCoordinator(ID oldCoordinator) {
-    org.apache.geode.distributed.internal.membership.gms.interfaces.Locator locator =
+    org.apache.geode.distributed.internal.membership.gms.interfaces.Locator<ID> locator =
-      GMSMembershipView newView = new GMSMembershipView(this.localAddress);
+      GMSMembershipView<ID> newView = new GMSMembershipView<>(this.localAddress);
-      GMSMembershipView newView = copyCurrentViewAndAddMyAddress(oldCoordinator);
+      GMSMembershipView<ID> newView = copyCurrentViewAndAddMyAddress(oldCoordinator);
-  private void createAndStartViewCreator(GMSMembershipView newView) {
+  private void createAndStartViewCreator(GMSMembershipView<ID> newView) {
-  private GMSMembershipView copyCurrentViewAndAddMyAddress(MemberIdentifier oldCoordinator) {
+  private GMSMembershipView<ID> copyCurrentViewAndAddMyAddress(ID oldCoordinator) {
-    GMSMembershipView newView;
-    Set<MemberIdentifier> leaving = new HashSet<>();
-    Set<MemberIdentifier> removals;
+    GMSMembershipView<ID> newView;
+    Set<ID> leaving = new HashSet<>();
+    Set<ID> removals;
-      List<MemberIdentifier> mbrs = new ArrayList<>(currentView.getMembers());
+      List<ID> mbrs = new ArrayList<>(currentView.getMembers());
-      newView = new GMSMembershipView(this.localAddress, viewNumber, mbrs, leaving, removals);
+      newView = new GMSMembershipView<>(this.localAddress, viewNumber, mbrs, leaving, removals);
-  private void sendRemoveMessages(List<MemberIdentifier> removals, List<String> reasons,
-      Set<MemberIdentifier> oldIds) {
+  private void sendRemoveMessages(List<ID> removals, List<String> reasons,
+      Set<ID> oldIds) {
-    for (MemberIdentifier mbr : removals) {
+    for (ID mbr : removals) {
-        RemoveMemberMessage response = new RemoveMemberMessage(mbr, mbr, reason.next());
+        RemoveMemberMessage<ID> response = new RemoveMemberMessage<>(mbr, mbr, reason.next());
-  boolean prepareView(GMSMembershipView view, List<MemberIdentifier> newMembers)
+  boolean prepareView(GMSMembershipView<ID> view, List<ID> newMembers)
-  void sendView(GMSMembershipView view, List<MemberIdentifier> newMembers)
+  void sendView(GMSMembershipView<ID> view, List<ID> newMembers)
-  private boolean sendView(GMSMembershipView view, boolean preparing,
+  private boolean sendView(GMSMembershipView<ID> view, boolean preparing,
-    InstallViewMessage msg = new InstallViewMessage(view,
+    InstallViewMessage<ID> msg = new InstallViewMessage<>(view,
-    List<MemberIdentifier> recips = new ArrayList<>(view.getMembers());
+    List<ID> recips = new ArrayList<>(view.getMembers());
-    List<MemberIdentifier> responders = recips;
+    List<ID> responders = recips;
-      installView(new GMSMembershipView(view, view.getViewId()));
+      installView(new GMSMembershipView<>(view, view.getViewId()));
-    Set<MemberIdentifier> pendingLeaves = getPendingRequestIDs(LEAVE_REQUEST_MESSAGE);
-    Set<MemberIdentifier> pendingRemovals = getPendingRequestIDs(REMOVE_MEMBER_REQUEST);
+    Set<ID> pendingLeaves = getPendingRequestIDs(LEAVE_REQUEST_MESSAGE);
+    Set<ID> pendingRemovals = getPendingRequestIDs(REMOVE_MEMBER_REQUEST);
-    viewReplyProcessor.initialize(id, new HashSet(responders));
+    viewReplyProcessor.initialize(id, new HashSet<>(responders));
-      Set<MemberIdentifier> failedToRespond = viewReplyProcessor.waitForResponses();
+      Set<ID> failedToRespond = viewReplyProcessor.waitForResponses();
-      MemberIdentifier conflictingViewSender =
+      ID conflictingViewSender =
-      GMSMembershipView conflictingView = viewReplyProcessor.getConflictingView();
+      GMSMembershipView<ID> conflictingView = viewReplyProcessor.getConflictingView();
-  private void addPublicKeysToView(GMSMembershipView view) {
+  private void addPublicKeysToView(GMSMembershipView<ID> view) {
-      for (MemberIdentifier mbr : view.getMembers()) {
+      List<ID> members = view.getMembers();
+      for (ID mbr : members) {
-  void processMessage(final InstallViewMessage m) {
+  void processMessage(final InstallViewMessage<ID> m) {
-    GMSMembershipView view = m.getView();
+    GMSMembershipView<ID> view = m.getView();
-      for (MemberIdentifier mbr : view.getMembers()) {
+      for (ID mbr : view.getMembers()) {
-              .send(new ViewAckMessage(view.getViewId(), m.getSender(), this.preparedView));
+              .send(new ViewAckMessage<>(view.getViewId(), m.getSender(), this.preparedView));
-        for (MemberIdentifier mbr : view.getMembers()) {
+        for (ID mbr : view.getMembers()) {
-            MemberIdentifier me = this.localAddress;
+            ID me = this.localAddress;
-          new JoinResponseMessage(
+          new JoinResponseMessage<>(
-  private void ackView(InstallViewMessage m) {
+  private void ackView(InstallViewMessage<ID> m) {
-          .send(new ViewAckMessage(m.getSender(), m.getView().getViewId(), m.isPreparing()));
+          .send(new ViewAckMessage<>(m.getSender(), m.getView().getViewId(), m.isPreparing()));
-  void processMessage(ViewAckMessage m) {
+  void processMessage(ViewAckMessage<ID> m) {
-    SearchState state = searchState;
+    SearchState<ID> state = searchState;
-    FindCoordinatorRequest request = new FindCoordinatorRequest(this.localAddress,
+    FindCoordinatorRequest<ID> request = new FindCoordinatorRequest<>(this.localAddress,
-    Set<MemberIdentifier> possibleCoordinators = new HashSet<MemberIdentifier>();
-    Set<MemberIdentifier> coordinatorsWithView = new HashSet<MemberIdentifier>();
+    Set<ID> possibleCoordinators = new HashSet<ID>();
+    Set<ID> coordinatorsWithView = new HashSet<ID>();
-          FindCoordinatorResponse response =
-              (o instanceof FindCoordinatorResponse) ? (FindCoordinatorResponse) o : null;
+          FindCoordinatorResponse<ID> response =
+              (o instanceof FindCoordinatorResponse) ? (FindCoordinatorResponse<ID>) o : null;
-            MemberIdentifier responseCoordinator = response.getCoordinator();
+            ID responseCoordinator = response.getCoordinator();
-              GMSMembershipView v = response.getView();
+              GMSMembershipView<ID> v = response.getView();
-    Iterator<MemberIdentifier> it = possibleCoordinators.iterator();
+    Iterator<ID> it = possibleCoordinators.iterator();
-      MemberIdentifier oldest = it.next();
+      ID oldest = it.next();
-        MemberIdentifier candidate = it.next();
+        ID candidate = it.next();
-    MemberIdentifier coord = null;
+    ID coord = null;
-      MemberIdentifier mbr = it.next();
+      ID mbr = it.next();
-    ArrayList<FindCoordinatorResponse> result;
-    SearchState state = searchState;
-    GMSMembershipView v = state.view;
-    List<MemberIdentifier> recipients = new ArrayList(v.getMembers());
+    ArrayList<FindCoordinatorResponse<ID>> result;
+    SearchState<ID> state = searchState;
+    GMSMembershipView<ID> v = state.view;
+    List<ID> recipients = new ArrayList<>(v.getMembers());
-        for (MemberIdentifier mbr : recipients) {
-          List<MemberIdentifier> r = new ArrayList<>();
+        for (ID mbr : recipients) {
+          List<ID> r = new ArrayList<>();
-          FindCoordinatorRequest req = new FindCoordinatorRequest(localAddress, state.alreadyTried,
-              state.viewId, services.getMessenger().getPublicKey(localAddress),
-              services.getMessenger().getRequestId(), dhalgo);
+          FindCoordinatorRequest<ID> req =
+              new FindCoordinatorRequest<>(localAddress, state.alreadyTried,
+                  state.viewId, services.getMessenger().getPublicKey(localAddress),
+                  services.getMessenger().getRequestId(), dhalgo);
-        FindCoordinatorRequest req = new FindCoordinatorRequest(localAddress, state.alreadyTried,
-            state.viewId, services.getMessenger().getPublicKey(localAddress),
-            services.getMessenger().getRequestId(), dhalgo);
+        FindCoordinatorRequest<ID> req =
+            new FindCoordinatorRequest<>(localAddress, state.alreadyTried,
+                state.viewId, services.getMessenger().getPublicKey(localAddress),
+                services.getMessenger().getRequestId(), dhalgo);
-    MemberIdentifier bestGuessCoordinator = null;
+    ID bestGuessCoordinator = null;
-    for (FindCoordinatorResponse resp : result) {
+    for (FindCoordinatorResponse<ID> resp : result) {
-      MemberIdentifier suggestedCoordinator = resp.getCoordinator();
+      ID suggestedCoordinator = resp.getCoordinator();
-  void processMessage(JoinResponseMessage rsp) {
+  void processMessage(JoinResponseMessage<ID> rsp) {
-  void setJoinResponseMessage(JoinResponseMessage jrm) {
+  void setJoinResponseMessage(JoinResponseMessage<ID> jrm) {
-  void processMessage(FindCoordinatorRequest req) {
+  void processMessage(FindCoordinatorRequest<ID> req) {
-    FindCoordinatorResponse resp;
+    FindCoordinatorResponse<ID> resp;
-      GMSMembershipView v = currentView;
-      resp = new FindCoordinatorResponse(v.getCoordinator(), localAddress,
+      GMSMembershipView<ID> v = currentView;
+      resp = new FindCoordinatorResponse<>(v.getCoordinator(), localAddress,
-      resp = new FindCoordinatorResponse(localAddress, localAddress,
+      resp = new FindCoordinatorResponse<>(localAddress, localAddress,
-  void processMessage(FindCoordinatorResponse resp) {
+  void processMessage(FindCoordinatorResponse<ID> resp) {
-  private void setCoordinatorPublicKey(FindCoordinatorResponse response) {
+  private void setCoordinatorPublicKey(FindCoordinatorResponse<ID> response) {
-  void processMessage(NetworkPartitionMessage msg) {
+  void processMessage(NetworkPartitionMessage<ID> msg) {
-  public GMSMembershipView getView() {
+  public GMSMembershipView<ID> getView() {
-  public GMSMembershipView getPreviousView() {
+  public GMSMembershipView<ID> getPreviousView() {
-  public MemberIdentifier getMemberID() {
+  public ID getMemberID() {
-  public void installView(GMSMembershipView newView) {
+  public void installView(GMSMembershipView<ID> newView) {
-        for (MemberIdentifier mbr : newView.getMembers()) {
+        List<ID> members = newView.getMembers();
+        for (ID mbr : members) {
-            MemberIdentifier me = this.localAddress;
+            ID me = this.localAddress;
-          Set<MemberIdentifier> crashes = newView.getActualCrashedMembers(currentView);
+          Set<ID> crashes = newView.getActualCrashedMembers(currentView);
-        GMSMembershipView check = new GMSMembershipView(newView, newView.getViewId() + 1);
+        GMSMembershipView<ID> check = new GMSMembershipView<>(newView, newView.getViewId() + 1);
-          for (Iterator<AbstractGMSMessage> it = viewRequests.iterator(); it.hasNext();) {
-            AbstractGMSMessage m = it.next();
+          for (Iterator<AbstractGMSMessage<ID>> it = viewRequests.iterator(); it.hasNext();) {
+            AbstractGMSMessage<ID> m = it.next();
-              if (currentView.contains(((JoinRequestMessage) m).getMemberID())) {
+              if (currentView.contains(((JoinRequestMessage<ID>) m).getMemberID())) {
-              if (!currentView.contains(((LeaveRequestMessage) m).getMemberID())) {
+              if (!currentView.contains(((LeaveRequestMessage<ID>) m).getMemberID())) {
-              if (!currentView.contains(((RemoveMemberMessage) m).getMemberID())) {
+              if (!currentView.contains(((RemoveMemberMessage<ID>) m).getMemberID())) {
-      removeMembersFromCollectionIfNotInView(removedMembers, currentView);
+      removeMembersFromCollectionIfNotInView(removedMembers,
+          currentView);
-      removeMembersFromCollectionIfNotInView(leftMembers, currentView);
+      removeMembersFromCollectionIfNotInView(leftMembers,
+          currentView);
-  private void removeMembersFromCollectionIfNotInView(Collection<MemberIdentifier> members,
-      GMSMembershipView currentView) {
-    Iterator<MemberIdentifier> iterator = members.iterator();
+  private void removeMembersFromCollectionIfNotInView(Collection<ID> members,
+      GMSMembershipView<ID> currentView) {
+    Iterator<ID> iterator = members.iterator();
-  void sendNetworkPartitionMessage(GMSMembershipView view) {
-    List<MemberIdentifier> recipients = new ArrayList<>(view.getMembers());
+  void sendNetworkPartitionMessage(GMSMembershipView<ID> view) {
+    List<ID> recipients = new ArrayList<>(view.getMembers());
-    NetworkPartitionMessage msg = new NetworkPartitionMessage(recipients);
+    NetworkPartitionMessage<ID> msg = new NetworkPartitionMessage<>(recipients);
-  public GMSMembershipView getPreparedView() {
+  public GMSMembershipView<ID> getPreparedView() {
-  private boolean isNetworkPartition(GMSMembershipView newView, boolean logWeights) {
+  private boolean isNetworkPartition(GMSMembershipView<ID> newView, boolean logWeights) {
-  public void setLocalAddress(MemberIdentifier address) {
+  public void setLocalAddress(ID address) {
-    MemberIdentifier mbr = (MemberIdentifier) this.localAddress;
+    ID mbr = this.localAddress;
-  public void memberSuspected(MemberIdentifier initiator,
-      MemberIdentifier suspect, String reason) {
+  public void memberSuspected(ID initiator,
+      ID suspect, String reason) {
-      GMSMembershipView view = currentView;
+      GMSMembershipView<ID> view = currentView;
-          List<MemberIdentifier> coords =
+          List<ID> coords =
-          LeaveRequestMessage m =
-              new LeaveRequestMessage(coords, this.localAddress, "this member is shutting down");
+          LeaveRequestMessage<ID> m =
+              new LeaveRequestMessage<>(coords, this.localAddress, "this member is shutting down");
-  public void remove(MemberIdentifier m, String reason) {
-    GMSMembershipView v = this.currentView;
+  public void remove(ID m, String reason) {
+    GMSMembershipView<ID> v = this.currentView;
-      Set<MemberIdentifier> filter = new HashSet<>();
+      Set<ID> filter = new HashSet<>();
-      RemoveMemberMessage msg =
-          new RemoveMemberMessage(v.getPreferredCoordinators(filter, getMemberID(), 5), m, reason);
+      RemoveMemberMessage<ID> msg =
+          new RemoveMemberMessage<>(v.getPreferredCoordinators(filter, getMemberID(), 5), m,
+              reason);
-      RemoveMemberMessage msg = new RemoveMemberMessage(m, m, reason);
+      RemoveMemberMessage<ID> msg = new RemoveMemberMessage<>(m, m, reason);
-  public void memberShutdown(MemberIdentifier mbr, String reason) {
-    LeaveRequestMessage msg = new LeaveRequestMessage(Collections.singletonList(this.localAddress),
-        mbr, reason);
+  public void memberShutdown(ID mbr, String reason) {
+    LeaveRequestMessage<ID> msg =
+        new LeaveRequestMessage<>(Collections.singletonList(this.localAddress),
+            mbr, reason);
-  boolean checkIfAvailable(MemberIdentifier fmbr) {
+  boolean checkIfAvailable(ID fmbr) {
-  private MemberIdentifier getMemId(MemberIdentifier jgId,
-      List<MemberIdentifier> members) {
-    for (MemberIdentifier m : members) {
+  private ID getMemId(ID jgId,
+      List<ID> members) {
+    for (ID m : members) {
-  public MemberIdentifier getMemberID(MemberIdentifier member) {
-    GMSMembershipView v = currentView;
-    MemberIdentifier ret = null;
+  public ID getMemberID(ID member) {
+    GMSMembershipView<ID> v = currentView;
+    ID ret = null;
-  public void init(Services s) {
+  public void init(Services<ID> s) {
-    services.getMessenger().addHandler(FindCoordinatorRequest.class,
-        this::processMessage);
-    services.getMessenger().addHandler(FindCoordinatorResponse.class,
-        this::processMessage);
-    services.getMessenger().addHandler(NetworkPartitionMessage.class,
-        this::processMessage);
+    services.getMessenger().addHandler(FindCoordinatorRequest.class, this::processMessage);
+    services.getMessenger().addHandler(FindCoordinatorResponse.class, this::processMessage);
+    services.getMessenger().addHandler(NetworkPartitionMessage.class, this::processMessage);
-  Set<MemberIdentifier> getPendingRequestIDs(int theDSFID) {
-    Set<MemberIdentifier> result = new HashSet<>();
+  Set<ID> getPendingRequestIDs(int theDSFID) {
+    Set<ID> result = new HashSet<>();
-      for (AbstractGMSMessage msg : viewRequests) {
+      for (AbstractGMSMessage<ID> msg : viewRequests) {
-          result.add(((HasMemberID) msg).getMemberID());
+          result.add(((HasMemberID<ID>) msg).getMemberID());
-    final Set<MemberIdentifier> notRepliedYet = new HashSet<>();
-    GMSMembershipView conflictingView;
-    MemberIdentifier conflictingViewSender;
+    final Set<ID> notRepliedYet = new HashSet<>();
+    GMSMembershipView<ID> conflictingView;
+    ID conflictingViewSender;
-    final Set<MemberIdentifier> pendingRemovals = new HashSet<>();
+    final Set<ID> pendingRemovals = new HashSet<>();
-    synchronized void initialize(int viewId, Set<MemberIdentifier> recips) {
+    synchronized void initialize(int viewId, Set<ID> recips) {
-    synchronized void processPendingRequests(Set<MemberIdentifier> pendingLeaves,
-        Set<MemberIdentifier> pendingRemovals) {
+    synchronized void processPendingRequests(Set<ID> pendingLeaves,
+        Set<ID> pendingRemovals) {
-      for (MemberIdentifier mbr : pendingLeaves) {
+      for (ID mbr : pendingLeaves) {
-      for (MemberIdentifier mbr : pendingRemovals) {
+      for (ID mbr : pendingRemovals) {
-    synchronized void memberSuspected(MemberIdentifier suspect) {
+    synchronized void memberSuspected(ID suspect) {
-    synchronized void processLeaveRequest(MemberIdentifier mbr) {
+    synchronized void processLeaveRequest(ID mbr) {
-    synchronized void processRemoveRequest(MemberIdentifier mbr) {
+    synchronized void processRemoveRequest(ID mbr) {
-    synchronized void processViewResponse(int viewId, MemberIdentifier sender,
-        GMSMembershipView conflictingView) {
+    synchronized void processViewResponse(int viewId, ID sender,
+        GMSMembershipView<ID> conflictingView) {
-    private void stopWaitingFor(MemberIdentifier mbr) {
+    private void stopWaitingFor(ID mbr) {
-    Set<MemberIdentifier> waitForResponses() throws InterruptedException {
-      Set<MemberIdentifier> result;
+    Set<ID> waitForResponses() throws InterruptedException {
+      Set<ID> result;
-    GMSMembershipView getConflictingView() {
+    GMSMembershipView<ID> getConflictingView() {
-    MemberIdentifier getConflictingViewSender() {
+    ID getConflictingViewSender() {
-    synchronized Set<MemberIdentifier> getUnresponsiveMembers() {
+    synchronized Set<ID> getUnresponsiveMembers() {
-      GMSMembershipView v = currentView;
+      GMSMembershipView<ID> v = currentView;
-        InstallViewMessage msg = new InstallViewMessage(v,
+        InstallViewMessage<ID> msg = new InstallViewMessage<>(v,
-        List<MemberIdentifier> recips =
+        List<ID> recips =
-    GMSMembershipView initialView;
+    GMSMembershipView<ID> initialView;
-    List<MemberIdentifier> initialJoins = Collections.emptyList();
+    List<ID> initialJoins = Collections.emptyList();
-    Set<MemberIdentifier> initialLeaving;
+    Set<ID> initialLeaving;
-    Set<MemberIdentifier> initialRemovals;
+    Set<ID> initialRemovals;
-    synchronized void setInitialView(GMSMembershipView newView, List<MemberIdentifier> newMembers,
-        Set<MemberIdentifier> leaving, Set<MemberIdentifier> removals) {
+    synchronized void setInitialView(GMSMembershipView<ID> newView, List<ID> newMembers,
+        Set<ID> leaving, Set<ID> removals) {
-          GMSMembershipView v = preparedView;
+          GMSMembershipView<ID> v = preparedView;
-            GMSMembershipView iView;
-            List<MemberIdentifier> iJoins;
-            Set<MemberIdentifier> iLeaves;
-            Set<MemberIdentifier> iRemoves;
+            GMSMembershipView<ID> iView;
+            List<ID> iJoins;
+            Set<ID> iLeaves;
+            Set<ID> iRemoves;
-    private void markViewCreatorForShutdown(MemberIdentifier viewCreator) {
+    private void markViewCreatorForShutdown(ID viewCreator) {
-    private void processPreparedView(GMSMembershipView v) {
+    private void processPreparedView(GMSMembershipView<ID> v) {
-        GMSMembershipView newView = new GMSMembershipView(initialView, viewId);
+        GMSMembershipView<ID> newView = new GMSMembershipView<>(initialView, viewId);
-        List<MemberIdentifier> newMembers;
+        List<ID> newMembers;
-        for (MemberIdentifier newMember : newMembers) {
+        for (ID newMember : newMembers) {
-      List<AbstractGMSMessage> requests = null;
+      List<AbstractGMSMessage<ID>> requests = null;
-                  requests = new ArrayList<AbstractGMSMessage>(viewRequests);
+                  requests = new ArrayList<AbstractGMSMessage<ID>>(viewRequests);
-        org.apache.geode.distributed.internal.membership.gms.interfaces.Locator locator =
+        org.apache.geode.distributed.internal.membership.gms.interfaces.Locator<ID> locator =
-      GMSMembershipView v = currentView;
+      GMSMembershipView<ID> v = currentView;
-      ArrayList<JoinRequestMessage> requests = new ArrayList<>();
+      ArrayList<JoinRequestMessage<ID>> requests = new ArrayList<>();
-        for (Iterator<AbstractGMSMessage> iterator = viewRequests.iterator(); iterator
+        for (Iterator<AbstractGMSMessage<ID>> iterator = viewRequests.iterator(); iterator
-          AbstractGMSMessage msg = iterator.next();
+          AbstractGMSMessage<ID> msg = iterator.next();
-              requests.add((JoinRequestMessage) msg);
+              requests.add((JoinRequestMessage<ID>) msg);
-      for (JoinRequestMessage msg : requests) {
+      for (JoinRequestMessage<ID> msg : requests) {
-        JoinResponseMessage jrm = new JoinResponseMessage(msg.getMemberID(), v, msg.getRequestId());
+        JoinResponseMessage<ID> jrm =
+            new JoinResponseMessage<>(msg.getMemberID(), v, msg.getRequestId());
-    void createAndSendView(List<AbstractGMSMessage> requests)
+    void createAndSendView(List<AbstractGMSMessage<ID>> requests)
-      List<MemberIdentifier> joinReqs = new ArrayList<>(10);
-      Map<MemberIdentifier, Integer> joinPorts = new HashMap<>(10);
-      Set<MemberIdentifier> leaveReqs = new HashSet<>(10);
-      List<MemberIdentifier> removalReqs = new ArrayList<>(10);
+      List<ID> joinReqs = new ArrayList<>(10);
+      Map<ID, Integer> joinPorts = new HashMap<>(10);
+      Set<ID> leaveReqs = new HashSet<>(10);
+      List<ID> removalReqs = new ArrayList<>(10);
-      GMSMembershipView oldView = currentView;
-      List<MemberIdentifier> oldMembers;
+      GMSMembershipView<ID> oldView = currentView;
+      List<ID> oldMembers;
-      Set<MemberIdentifier> oldIDs = new HashSet<>();
+      Set<ID> oldIDs = new HashSet<>();
-      for (AbstractGMSMessage msg : requests) {
+      for (AbstractGMSMessage<ID> msg : requests) {
-        MemberIdentifier mbr;
+        ID mbr;
-            JoinRequestMessage jmsg = (JoinRequestMessage) msg;
+            JoinRequestMessage<ID> jmsg = (JoinRequestMessage<ID>) msg;
-                  JoinResponseMessage response = new JoinResponseMessage(jmsg.getSender(),
+                  JoinResponseMessage<ID> response = new JoinResponseMessage<>(jmsg.getSender(),
-            mbr = ((LeaveRequestMessage) msg).getMemberID();
+            mbr = ((LeaveRequestMessage<ID>) msg).getMemberID();
-      for (AbstractGMSMessage msg : requests) {
+      for (AbstractGMSMessage<ID> msg : requests) {
-            MemberIdentifier mbr = ((RemoveMemberMessage) msg).getMemberID();
+            ID mbr = ((RemoveMemberMessage<ID>) msg).getMemberID();
-                removalReasons.add(((RemoveMemberMessage) msg).getReason());
+                removalReasons.add(((RemoveMemberMessage<ID>) msg).getReason());
-                    Collections.singletonList(((RemoveMemberMessage) msg).getReason()),
+                    Collections.singletonList(((RemoveMemberMessage<ID>) msg).getReason()),
-      for (MemberIdentifier mbr : oldIDs) {
+      for (ID mbr : oldIDs) {
-      GMSMembershipView newView;
+      GMSMembershipView<ID> newView;
-        List<MemberIdentifier> mbrs;
+        List<ID> mbrs;
-          mbrs = new ArrayList<MemberIdentifier>();
+          mbrs = new ArrayList<ID>();
-          mbrs = new ArrayList<MemberIdentifier>(oldMembers);
+          mbrs = new ArrayList<ID>(oldMembers);
-        newView = new GMSMembershipView(localAddress, viewNumber, mbrs, leaveReqs,
-            new HashSet<MemberIdentifier>(removalReqs));
-        for (MemberIdentifier mbr : joinReqs) {
+        newView = new GMSMembershipView<>(localAddress, viewNumber, mbrs, leaveReqs,
+            new HashSet<ID>(removalReqs));
+        for (ID mbr : joinReqs) {
-      for (MemberIdentifier mbr : joinReqs) {
+      for (ID mbr : joinReqs) {
-    void prepareAndSendView(GMSMembershipView newView, List<MemberIdentifier> joinReqs,
-        Set<MemberIdentifier> leaveReqs, Set<MemberIdentifier> removalReqs)
+    void prepareAndSendView(GMSMembershipView<ID> newView, List<ID> joinReqs,
+        Set<ID> leaveReqs, Set<ID> removalReqs)
-          Set<MemberIdentifier> crashes = newView.getActualCrashedMembers(currentView);
+          Set<ID> crashes = newView.getActualCrashedMembers(currentView);
-        GMSMembershipView conflictingView = prepareProcessor.getConflictingView();
+        GMSMembershipView<ID> conflictingView = prepareProcessor.getConflictingView();
-        Set<MemberIdentifier> unresponsive = prepareProcessor.getUnresponsiveMembers();
+        Set<ID> unresponsive = prepareProcessor.getUnresponsiveMembers();
-        List<MemberIdentifier> failures =
+        List<ID> failures =
-            failures.addAll((Set<MemberIdentifier>) (Set<?>) conflictingView.getCrashedMembers());
+            failures.addAll(conflictingView.getCrashedMembers());
-            List<MemberIdentifier> newMembers = conflictingView.getNewMembers();
+            List<ID> newMembers = conflictingView.getNewMembers();
-              for (MemberIdentifier mbr : newMembers) {
+              for (ID mbr : newMembers) {
-              newView = new GMSMembershipView(newView, conflictingView.getViewId() + 1);
+              newView = new GMSMembershipView<>(newView, conflictingView.getViewId() + 1);
-          List<MemberIdentifier> newMembers = new ArrayList<>(newView.getMembers());
+          List<ID> newMembers = new ArrayList<>(newView.getMembers());
-          GMSMembershipView tempView =
-              new GMSMembershipView(localAddress, newView.getViewId() + 1, newMembers,
+          GMSMembershipView<ID> tempView =
+              new GMSMembershipView<>(localAddress, newView.getViewId() + 1, newMembers,
-          for (MemberIdentifier mbr : newView.getMembers()) {
+          List<ID> members = newView.getMembers();
+          for (ID mbr : members) {
-    private void removeHealthyMembers(final Set<MemberIdentifier> suspects)
+    private void removeHealthyMembers(final Set<ID> suspects)
-      List<Callable<MemberIdentifier>> checkers =
+      List<Callable<ID>> checkers =
-      Set<MemberIdentifier> newRemovals = new HashSet<>();
-      Set<MemberIdentifier> newLeaves = new HashSet<>();
+      Set<ID> newRemovals = new HashSet<>();
+      Set<ID> newLeaves = new HashSet<>();
-      for (MemberIdentifier mbr : suspects) {
+      for (ID mbr : suspects) {
-        checkers.add(new Callable<MemberIdentifier>() {
+        checkers.add(new Callable<ID>() {
-          public MemberIdentifier call() throws Exception {
+          public ID call() throws Exception {
-    protected void filterMembers(Collection<MemberIdentifier> mbrs,
-        Set<MemberIdentifier> matchingMembers, short requestType) {
-      Set<MemberIdentifier> requests = getPendingRequestIDs(requestType);
+    protected void filterMembers(Collection<ID> mbrs,
+        Set<ID> matchingMembers, short requestType) {
+      Set<ID> requests = getPendingRequestIDs(requestType);
-        Iterator<MemberIdentifier> itr = requests.iterator();
+        Iterator<ID> itr = requests.iterator();
-          MemberIdentifier memberID = itr.next();
+          ID memberID = itr.next();
