Merge branch 'release/1.5.0'

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.function.UnaryOperator;
+import java.util.stream.Collectors;
+
+  public static String NULL = "NULL";
-    NULL, CLUSTER, DATA
-  }
-
-  public enum Operation {
-    NULL, MANAGE, WRITE, READ
-  }
-
-  // when ALL is specified, we need it to convert to string "*" instead of "ALL".
-  public enum Target {
-    ALL(ResourcePermission.ALL), DISK, GATEWAY, QUERY, DEPLOY;
-
-    private String name;
-
-    Target() {}
-
-    Target(String name) {
-      this.name = name;
-    }
+    ALL, NULL, CLUSTER, DATA;
-      if (name != null) {
-        return name;
+      if (this == ALL) {
+        return ResourcePermission.ALL;
-  // these default values are used when creating a lock around an operation
-  private Resource resource = Resource.NULL;
-  private Operation operation = Operation.NULL;
+  public enum Operation {
+    ALL, NULL, MANAGE, WRITE, READ;
+    public String getName() {
+      if (this == ALL) {
+        return ResourcePermission.ALL;
+      }
+      return name();
+    }
+  }
+
+  public enum Target {
+    ALL, DISK, GATEWAY, QUERY, DEPLOY;
+    public String getName() {
+      if (this == ALL) {
+        return ResourcePermission.ALL;
+      }
+      return name();
+    }
+  }
+
+  // these default values are used when creating an allow-all lock around an operation
+  private String resource = NULL;
+  private String operation = NULL;
-    this(Resource.NULL, Operation.NULL, ALL, ALL);
-  }
-
-  public ResourcePermission(String resource, String operation) {
-    this(resource, operation, ALL, ALL);
-  }
-
-  public ResourcePermission(String resource, String operation, String target) {
-    this(resource, operation, target, ALL);
-  }
-
-  public ResourcePermission(String resource, String operation, String target, String key) {
-    this((resource == null) ? Resource.NULL : Resource.valueOf(resource.toUpperCase()),
-        (operation == null) ? Operation.NULL : Operation.valueOf(operation.toUpperCase()), target,
-        key);
+    setParts(this.resource + ":" + this.operation + ":" + this.target + ":" + this.key, true);
-  public ResourcePermission(Resource resource, Operation operation, Target target,
-      String targetKey) {
-    this(resource, operation, target.getName(), targetKey);
+  public ResourcePermission(Resource resource, Operation operation, Target target, String key) {
+    this(resource == null ? null : resource.getName(),
+        operation == null ? null : operation.getName(), target == null ? null : target.getName(),
+        key);
-    if (resource != null) {
-      this.resource = resource;
-    }
-    if (operation != null) {
-      this.operation = operation;
-    }
+    this(resource == null ? null : resource.getName(),
+        operation == null ? null : operation.getName(), target, key);
+  }
+
+  public ResourcePermission(String resource, String operation) {
+    this(resource, operation, ALL, ALL);
+  }
+
+  public ResourcePermission(String resource, String operation, String target) {
+    this(resource, operation, target, ALL);
+  }
+
+  public ResourcePermission(String resource, String operation, String target, String key) {
+    // what's eventually stored are either "*", "NULL" or a valid enum except ALL.
+    // Fields are never null.
+    this.resource = parsePart(resource, r -> Resource.valueOf(r).getName());
+    this.operation = parsePart(operation, o -> Operation.valueOf(o).getName());
+
+  private String parsePart(String part, UnaryOperator<String> operator) {
+    if (part == null) {
+      return NULL;
+    }
+    if (part.equals(ALL)) {
+      return ALL;
+    }
+    return operator.apply(part.toUpperCase());
+  }
+
-   * Returns the resource, could be either DATA or CLUSTER
+   * Returns the resource, could be either ALL, NULL, DATA or CLUSTER
+    if (ALL.equals(resource)) {
+      return Resource.ALL;
+    }
+    return Resource.valueOf(resource);
+  }
+
+  /**
+   * Returns the operation, could be either ALL, NULL, MANAGE, WRITE or READ
+   */
+  public Operation getOperation() {
+    if (ALL.equals(operation)) {
+      return Operation.ALL;
+    }
+    return Operation.valueOf(operation);
+  }
+
+
+  /**
+   * could be either "*", "NULL", "DATA", "CLUSTER"
+   */
+  public String getResourceString() {
-   * Returns the operation, could be either MANAGE, WRITE or READ
+   * Returns the operation, could be either "*", "NULL", "MANAGE", "WRITE" or "READ"
-  public Operation getOperation() {
+  public String getOperationString() {
-    if (ALL.equals(target)) {
-      return getResource() + ":" + getOperation();
-    } else if (ALL.equals(key)) {
-      return resource + ":" + operation + ":" + target;
-    } else {
-      return resource + ":" + operation + ":" + target + ":" + key;
+    List<String> parts = new ArrayList<>(Arrays.asList(resource, operation, target, key));
+    if (ALL.equals(key)) {
+      parts.remove(3);
+      if (ALL.equals(target)) {
+        parts.remove(2);
+        if (ALL.equals(operation)) {
+          parts.remove(1);
+        }
+      }
+
+    return parts.stream().collect(Collectors.joining(":"));
