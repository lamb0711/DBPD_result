GEODE-3129 - Added error messages to protobuf protocol. This now closes #621

added a new ErrorResponse type to ClientProtocol
removed success field from several RegionAPI response objects and refactored operation handlers to instead return ErrorResponses
made all op handlers take ClientProtocol.Requests and return ClientProtocol.Responses instead of operation specific types
moved the protobuf specific response building code from operation handlers to ProtobufResponseUtilities
moved the request building functions from MessageUtil (under Test) to ProtobufRequestUtilities
moved all utility classes to ...protocol.protobuf.utilities and added javadoc comments throughout
changed GetRegions to GetRegionNames, returns strings instead of Regions
replaced logging through the cache's LogWriter with log4j logging
updated all imports to be in the correct order for the new geode style guide

Signed-off-by: Brian Rowe <browe@pivotal.io>
Signed-off-by: Hitesh Khamesra <hiteshk25@yahoo.com>
Signed-off-by: Brian Rowe <browe@pivotal.io>

-import org.apache.geode.protocol.protobuf.ProtobufUtilities;
-import org.apache.geode.protocol.protobuf.BasicTypes;
-import org.apache.geode.protocol.protobuf.RegionAPI;
+import org.apache.geode.protocol.protobuf.*;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufResponseUtilities;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufUtilities;
-import org.apache.geode.protocol.protobuf.EncodingTypeTranslator;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
-    implements OperationHandler<RegionAPI.GetRequest, RegionAPI.GetResponse> {
+    implements OperationHandler<ClientProtocol.Request, ClientProtocol.Response> {
+  private static Logger logger = LogManager.getLogger();
-  public RegionAPI.GetResponse process(SerializationService serializationService,
-      RegionAPI.GetRequest request, Cache cache) {
-    String regionName = request.getRegionName();
+  public ClientProtocol.Response process(SerializationService serializationService,
+      ClientProtocol.Request request, Cache cache) {
+    if (request.getRequestAPICase() != ClientProtocol.Request.RequestAPICase.GETREQUEST) {
+      return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+          "Improperly formatted get request message.", logger, null);
+    }
+    RegionAPI.GetRequest getRequest = request.getGetRequest();
+
+    String regionName = getRequest.getRegionName();
+    Region region = cache.getRegion(regionName);
+    if (region == null) {
+      return ProtobufResponseUtilities.createErrorResponse(false, false, "Region not found");
+    }
+
-      Object decodedKey = ProtobufUtilities.decodeValue(serializationService, request.getKey());
-
-
-      Region region = cache.getRegion(regionName);
-
-      if (region == null) {
-        return buildGetResponseFailure();
-      }
-
+      Object decodedKey = ProtobufUtilities.decodeValue(serializationService, getRequest.getKey());
-        return buildGetResponseKeyNotFound();
+        return ProtobufResponseUtilities.createNullGetResponse();
-      return buildGetResponseSuccess(serializationService, resultValue);
+      BasicTypes.EncodedValue encodedValue =
+          ProtobufUtilities.createEncodedValue(serializationService, resultValue);
+      return ProtobufResponseUtilities.createGetResponse(encodedValue);
-      cache.getLogger().error("encoding not supported ", ex);
+      return ProtobufResponseUtilities.createAndLogErrorResponse(false, false,
+          "Encoding not supported.", logger, ex);
-      cache.getLogger().error("codec error in protobuf deserialization ", ex);
+      return ProtobufResponseUtilities.createAndLogErrorResponse(true, false,
+          "Codec error in protobuf deserialization.", logger, ex);
-    return buildGetResponseFailure();
-  }
-
-  private RegionAPI.GetResponse buildGetResponseKeyNotFound() {
-    return RegionAPI.GetResponse.newBuilder().setSuccess(true).setKeyExists(false).build();
-  }
-
-  private RegionAPI.GetResponse buildGetResponseFailure() {
-    return RegionAPI.GetResponse.newBuilder().setSuccess(false).build();
-  }
-
-  // throws if the object in the cache is not of a class that be serialized via the protobuf
-  // protocol.
-  private RegionAPI.GetResponse buildGetResponseSuccess(SerializationService serializationService,
-      Object resultValue)
-      throws UnsupportedEncodingTypeException, CodecNotRegisteredForTypeException {
-    BasicTypes.EncodingType resultEncodingType =
-        EncodingTypeTranslator.getEncodingTypeForObject(resultValue);
-    byte[] resultEncodedValue = serializationService.encode(resultEncodingType, resultValue);
-
-    return RegionAPI.GetResponse.newBuilder().setSuccess(true).setKeyExists(true)
-        .setResult(ProtobufUtilities.getEncodedValue(resultEncodingType, resultEncodedValue))
-        .build();
