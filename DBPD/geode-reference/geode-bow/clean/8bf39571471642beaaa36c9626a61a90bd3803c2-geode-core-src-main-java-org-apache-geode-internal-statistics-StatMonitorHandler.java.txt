Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  static final String ENABLE_MONITOR_THREAD = DistributionConfig.GEMFIRE_PREFIX + "stats.enableMonitorThread";
+  static final String ENABLE_MONITOR_THREAD =
+      DistributionConfig.GEMFIRE_PREFIX + "stats.enableMonitorThread";
-  
+
-  private volatile List<StatisticsMonitor> monitors = 
-      Collections.<StatisticsMonitor>emptyList();
-  
+  private volatile List<StatisticsMonitor> monitors = Collections.<StatisticsMonitor>emptyList();
+
-  public StatMonitorHandler() {
-  }
-  
+  public StatMonitorHandler() {}
+
-  
+
-  
+
-  
+
-      }
-      catch (Error e) {
+      } catch (Error e) {
-        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
-      }
-      catch (RuntimeException e) {
-        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
+        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+            e.getClass().getSimpleName(), e);
+      } catch (RuntimeException e) {
+        logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+            e.getClass().getSimpleName(), e);
-  public void allocatedResourceType(ResourceType resourceType) {
-  }
+  public void allocatedResourceType(ResourceType resourceType) {}
-  public void allocatedResourceInstance(ResourceInstance resourceInstance) {
-  }
+  public void allocatedResourceInstance(ResourceInstance resourceInstance) {}
-  public void destroyedResourceInstance(ResourceInstance resourceInstance) {
-  }
+  public void destroyedResourceInstance(ResourceInstance resourceInstance) {}
-  
+
-  
+
-    
+
-    
+
-    
+
-    
+
-    StatMonitorNotifier() {
-    }
-    
+    StatMonitorNotifier() {}
+
-    
+
-                monitor.monitor(latestTask.getSampleTimeMillis(), 
-                                latestTask.getResourceInstances());
+                monitor.monitor(latestTask.getSampleTimeMillis(),
+                    latestTask.getResourceInstances());
-              }
-              catch (Error e) {
+              } catch (Error e) {
-                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
-              }
-              catch (RuntimeException e) {
-                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor, e.getClass().getSimpleName(), e);
+                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+                    e.getClass().getSimpleName(), e);
+              } catch (RuntimeException e) {
+                logger.warn(LogMarker.STATISTICS, "StatisticsMonitor {} threw {}", monitor,
+                    e.getClass().getSimpleName(), e);
-      
+
-    
+
-    
+
-  
+
-    private final long sampleTimeMillis; 
+    private final long sampleTimeMillis;
-    
+
-    
+
-    
+
