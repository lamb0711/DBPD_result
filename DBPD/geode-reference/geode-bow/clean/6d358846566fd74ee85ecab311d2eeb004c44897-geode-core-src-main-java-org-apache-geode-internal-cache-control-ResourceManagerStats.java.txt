GEODE-7953: Restore Redundancy Internal API (#5010)

- Add RestoreRedundancyOperation interface and Impl class
- Add RestoreRedundancyResults interface and Impl class
- Add RegionRedundancyStatus interface and Impl class
- Add accessor methods for RestoreRedundancyOperation to ResourceManager interface
- Replace manually-synchronized sets in InternalResourceManager with
ConcurrentHashMap
- Add stats for restore redundancy operations
- Add unit and DUnit tests for all the above

This commit restores the changes originally introduced in 0f9918510b24f2169189936a92951b9bb4f313f1 and reverted in 9fad2c0fba51f1a8beb24c311255dfa55a537c99

Authored-by: Donal Evans <doevans@pivotal.io>
+  private static final int restoreRedundanciesInProgressId;
+  private static final int restoreRedundanciesCompletedId;
+  private static final int restoreRedundancyTimeId;
+            f.createLongCounter("restoreRedundanciesInProgress",
+                "Current number of cache restore redundancy operations being directed by this process.",
+                "operations"),
+            f.createLongCounter("restoreRedundanciesCompleted",
+                "Total number of cache restore redundancy operations directed by this process.",
+                "operations"),
+            f.createLongCounter("restoreRedundancyTime",
+                "Total time spent directing cache restore redundancy operations.", "nanoseconds",
+                false),
+
+    restoreRedundanciesInProgressId = type.nameToId("restoreRedundanciesInProgress");
+    restoreRedundanciesCompletedId = type.nameToId("restoreRedundanciesCompleted");
+    restoreRedundancyTimeId = type.nameToId("restoreRedundancyTime");
+  public long startRestoreRedundancy() {
+    this.stats.incLong(restoreRedundanciesInProgressId, 1);
+    return System.nanoTime();
+  }
+
+  public void endRestoreRedundancy(long start) {
+    long elapsed = System.nanoTime() - start;
+    this.stats.incLong(restoreRedundanciesInProgressId, -1);
+    this.stats.incLong(restoreRedundanciesCompletedId, 1);
+    this.stats.incLong(restoreRedundancyTimeId, elapsed);
+  }
+
+  public long getRestoreRedundanciesInProgress() {
+    return this.stats.getLong(restoreRedundanciesInProgressId);
+  }
+
+  public long getRestoreRedundanciesCompleted() {
+    return this.stats.getLong(restoreRedundanciesCompletedId);
+  }
+
+  public long getRestoreRedundancyTime() {
+    return this.stats.getLong(restoreRedundancyTimeId);
+  }
+
