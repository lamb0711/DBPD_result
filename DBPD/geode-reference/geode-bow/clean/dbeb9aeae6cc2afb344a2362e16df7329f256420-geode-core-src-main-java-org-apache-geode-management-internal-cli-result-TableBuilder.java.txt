Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Helper class to build rows of columnized strings & build a table from those 
- * rows.
+ * Helper class to build rows of columnized strings & build a table from those rows.
- *     
- *     Displaying all fields for member: Member1
- *     
- *         FIELD1     |     FIELD2
- *     -------------- | ---------------
- *     My First Field | My Second Field
- *     Another Fld1   | Another Fld2  
- *     Last Fld1      | Last Fld2
- *     
+ * 
+ * Displaying all fields for member: Member1
+ * 
+ * FIELD1 | FIELD2 -------------- | --------------- My First Field | My Second Field Another Fld1 |
+ * Another Fld2 Last Fld1 | Last Fld2
+ * 
-        
+
-          
+
-        
+
-      return (int)(rowGroupMaxTotalLength * 1.1);
+      return (int) (rowGroupMaxTotalLength * 1.1);
-   * A group of rows. Widths for all columns within a group will be the same and
-   * when built will automatically be set to the length of the longest value in
-   * the column.
+   * A group of rows. Widths for all columns within a group will be the same and when built will
+   * automatically be set to the length of the longest value in the column.
-    
+
-      
+
-            TableBuilderHelper.getScreenWidth(), localColSizes,
-            getColumnSeparator());
+            TableBuilderHelper.getScreenWidth(), localColSizes, getColumnSeparator());
-    private Row(final RowGroup rowGroup, final Character rowSeparator, final boolean isTablewideSeparator) {
+    private Row(final RowGroup rowGroup, final Character rowSeparator,
+        final boolean isTablewideSeparator) {
-    
+
-    
+
-          //Trim only for tabular results
-          if(isTabularResult) {            
+          // Trim only for tabular results
+          if (isTabularResult) {
-          
+
-  
+
-            //int maxColLength = this.rowGroup.getMaxColLength(i);
+            // int maxColLength = this.rowGroup.getMaxColLength(i);
-// saj hook
+        // saj hook
-          stringBuffer.append(this.columns.get(i).buildColumn(
-              this.rowGroup.getColSize(i), lastColumn));
+          stringBuffer
+              .append(this.columns.get(i).buildColumn(this.rowGroup.getColSize(i), lastColumn));
-      
-      //If string value is greater than colWidth
-      //This can happen because colSizes are re-computed
-      //to fit the screen width
-      if(this.stringValue.length() > colWidth){
+
+      // If string value is greater than colWidth
+      // This can happen because colSizes are re-computed
+      // to fit the screen width
+      if (this.stringValue.length() > colWidth) {
-        int endIndex = colWidth-2;
-        if(endIndex<0)
+        int endIndex = colWidth - 2;
+        if (endIndex < 0)
-        return stringBuffer.append(stringValue.substring(0,endIndex)).append("..").toString();        
+        return stringBuffer.append(stringValue.substring(0, endIndex)).append("..").toString();
-      
+
-      if(trimIt) numSpaces=0;
-      
+      if (trimIt)
+        numSpaces = 0;
+
-      case LEFT:
-        stringBuffer.append(stringValue);
-        for (int i = 0; i < numSpaces; i++) {
-          stringBuffer.append(" ");
-        }
-        break;
-      case RIGHT:
-        for (int i = 0; i < numSpaces; i++) {
-          stringBuffer.append(" ");
-        }
-        stringBuffer.append(stringValue);
-        break;
-      case CENTER:
-        int i = 0;
-        for (; i < numSpaces / 2; i++) {
-          stringBuffer.append(" ");
-        }
-        stringBuffer.append(stringValue);
-        for (; i < numSpaces; i++) {
-          stringBuffer.append(" ");
-        }
-        break;
+        case LEFT:
+          stringBuffer.append(stringValue);
+          for (int i = 0; i < numSpaces; i++) {
+            stringBuffer.append(" ");
+          }
+          break;
+        case RIGHT:
+          for (int i = 0; i < numSpaces; i++) {
+            stringBuffer.append(" ");
+          }
+          stringBuffer.append(stringValue);
+          break;
+        case CENTER:
+          int i = 0;
+          for (; i < numSpaces / 2; i++) {
+            stringBuffer.append(" ");
+          }
+          stringBuffer.append(stringValue);
+          for (; i < numSpaces; i++) {
+            stringBuffer.append(" ");
+          }
+          break;
-      
+
-    
-    
-    
+
+
+
