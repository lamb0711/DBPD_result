Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-/** HeapDataOutputStream is an OutputStream that also implements DataOutput
- * and stores all data written to it in heap memory.
- * It is always better to use this class instead ByteArrayOutputStream.
- * <p>This class is not thread safe
+/**
+ * HeapDataOutputStream is an OutputStream that also implements DataOutput and stores all data
+ * written to it in heap memory. It is always better to use this class instead
+ * ByteArrayOutputStream.
+ * <p>
+ * This class is not thread safe
- *  @since GemFire 5.0.2
+ * @since GemFire 5.0.2
- * Added boolean flag that when turned on will throw an exception instead of allocating a new
- * buffer. The exception is a BufferOverflowException thrown from expand, and will restore
- * the position to the point at which the flag was set with the disallowExpansion method.
- * Usage Model:
- *              boolean succeeded = true;
- *              stream.disallowExpansion();
- *              try {
- *                DataSerializer.writeObject(obj, stream);
- *              } catch (BufferOverflowException e) {
- *                succeeded = false;
- *              }
+ *        Added boolean flag that when turned on will throw an exception instead of allocating a new
+ *        buffer. The exception is a BufferOverflowException thrown from expand, and will restore
+ *        the position to the point at which the flag was set with the disallowExpansion method.
+ *        Usage Model: boolean succeeded = true; stream.disallowExpansion(); try {
+ *        DataSerializer.writeObject(obj, stream); } catch (BufferOverflowException e) { succeeded =
+ *        false; }
-public class HeapDataOutputStream extends OutputStream implements
-    ObjToByteArraySerializer, VersionedDataStream, ByteBufferWriter {
+public class HeapDataOutputStream extends OutputStream
+    implements ObjToByteArraySerializer, VersionedDataStream, ByteBufferWriter {
-   * True if this stream is currently setup for writing.
-   * Once it switches to reading then it must be reset before
-   * it can be written again.
+   * True if this stream is currently setup for writing. Once it switches to reading then it must be
+   * reset before it can be written again.
-  private boolean ignoreWrites = false; // added for bug 39569 
+  private boolean ignoreWrites = false; // added for bug 39569
-  
+
-   * Create a HeapDataOutputStream optimized to contain just the specified string.
-   * The string will be written to this stream encoded as utf.
+   * Create a HeapDataOutputStream optimized to contain just the specified string. The string will
+   * be written to this stream encoded as utf.
-      maxStrBytes = s.length()*3;
+      maxStrBytes = s.length() * 3;
+
-   * @param doNotCopy if true then byte arrays/buffers/sources will not
-   * be copied to this hdos but instead referenced.
+   * @param doNotCopy if true then byte arrays/buffers/sources will not be copied to this hdos but
+   *        instead referenced.
-  
+
-   * @param doNotCopy if true then byte arrays/buffers/sources will not
-   * be copied to this hdos but instead referenced.
+   * @param doNotCopy if true then byte arrays/buffers/sources will not be copied to this hdos but
+   *        instead referenced.
-   * Construct a HeapDataOutputStream which uses the byte array provided as its
-   * underlying ByteBuffer
+   * Construct a HeapDataOutputStream which uses the byte array provided as its underlying
+   * ByteBuffer
-   * Returns true if this HDOS currently does not copy byte arrays/buffers written to it.
-   * Instead of copying a reference is kept to the original array/buffer.
+   * Returns true if this HDOS currently does not copy byte arrays/buffers written to it. Instead of
+   * copying a reference is kept to the original array/buffer.
-  
+
-  /*throw an exception instead of allocating a new
-    * buffer. The exception is a BufferOverflowException thrown from expand, and will restore
-    * the position to the point at which the flag was set with the disallowExpansion method.
-    * @param ee the exception to throw if expansion is needed
-    */
+  /*
+   * throw an exception instead of allocating a new buffer. The exception is a
+   * BufferOverflowException thrown from expand, and will restore the position to the point at which
+   * the flag was set with the disallowExpansion method.
+   * 
+   * @param ee the exception to throw if expansion is needed
+   */
-  
+
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-    buffer.put((byte)b);
+    buffer.put((byte) b);
-    
+
-    }    
-    oldBuffer.flip(); // now ready for reading    
+    }
+    oldBuffer.flip(); // now ready for reading
-      throw new IllegalStateException(LocalizedStrings.HeapDataOutputStream_NOT_IN_WRITE_MODE.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.HeapDataOutputStream_NOT_IN_WRITE_MODE.toLocalizedString());
- 
+
-    if (len == 0) return;
-    if (this.ignoreWrites) return;
+    if (len == 0)
+      return;
+    if (this.ignoreWrites)
+      return;
-  
+
-  
+
+
-  
+
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-      // if position is zero then nothing has been written (yet) to buffer so no need to move it to chunks
+      // if position is zero then nothing has been written (yet) to buffer so no need to move it to
+      // chunks
+
-      bb.flip();  // now ready for reading
+      bb.flip(); // now ready for reading
-    
+
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-  
+
+
-      this.buffer.flip();      
+      this.buffer.flip();
+
-  
+
-  /** gets the contents of this stream as s ByteBuffer, ready for reading.
-   * The stream should not be written to past this point until it has been reset.
+  /**
+   * gets the contents of this stream as s ByteBuffer, ready for reading. The stream should not be
+   * written to past this point until it has been reset.
-  /** gets the contents of this stream as a byte[].
-   * The stream should not be written to past this point until it has been reset.
+
+  /**
+   * gets the contents of this stream as a byte[]. The stream should not be written to past this
+   * point until it has been reset.
-    if (bb.hasArray() && bb.arrayOffset() == 0
-        && bb.limit() == bb.capacity()) {
+    if (bb.hasArray() && bb.arrayOffset() == 0 && bb.limit() == bb.capacity()) {
-  
-  
+
+
-   * Writes this stream to the wrapper object of BytesAndBitsForCompactor type. The
-   * byte array retrieved from the HeapDataOutputStream is set in the wrapper
-   * object. The byte array may be partially filled. The valid length of data in
-   * the byte array is set in the wrapper. It is assumed that the
-   * HeapDataOutputStream is appropriately seeded with a byte array from the
-   * wrapper. However the filled byte array may or may not be the same as that
-   * used for seeding , depending upon whether the data got accommodated in the
-   * original byte buffer or not.
+   * Writes this stream to the wrapper object of BytesAndBitsForCompactor type. The byte array
+   * retrieved from the HeapDataOutputStream is set in the wrapper object. The byte array may be
+   * partially filled. The valid length of data in the byte array is set in the wrapper. It is
+   * assumed that the HeapDataOutputStream is appropriately seeded with a byte array from the
+   * wrapper. However the filled byte array may or may not be the same as that used for seeding ,
+   * depending upon whether the data got accommodated in the original byte buffer or not.
-  //Asif
+  // Asif
-    }
-    else {
+    } else {
-  
+
-   * Write this stream to the specified channel. Call multiple times until size returns zero to make sure all bytes in the stream have been written.
+   * Write this stream to the specified channel. Call multiple times until size returns zero to make
+   * sure all bytes in the stream have been written.
+   * 
-      ByteBuffer[] bufs = new ByteBuffer[this.chunks.size()+1];
+      ByteBuffer[] bufs = new ByteBuffer[this.chunks.size() + 1];
-      result = (int)chan.write(bufs);
+      result = (int) chan.write(bufs);
-  public  final void sendTo(SocketChannel chan, ByteBuffer out) throws IOException {
+  public final void sendTo(SocketChannel chan, ByteBuffer out) throws IOException {
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-   * sends the data from "in" by writing it to "sc" through "out" (out is used
-   * to chunk to data and is probably a direct memory buffer).
+   * sends the data from "in" by writing it to "sc" through "out" (out is used to chunk to data and
+   * is probably a direct memory buffer).
-  private final void sendChunkTo(ByteBuffer in, SocketChannel sc, ByteBuffer out) throws IOException {
+  private final void sendChunkTo(ByteBuffer in, SocketChannel sc, ByteBuffer out)
+      throws IOException {
-  
+
-    if (out.position() == 0) return;
+    if (out.position() == 0)
+      return;
-   * @throws BufferOverflowException if out is not large enough to contain all of
-   * our data.
+   * 
+   * @throws BufferOverflowException if out is not large enough to contain all of our data.
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-   * Write the contents of this stream to the specified stream using
-   * outBuf if a buffer is needed.
+   * Write the contents of this stream to the specified stream using outBuf if a buffer is needed.
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-  
+
-  
+
-  public static int writeByteBufferToStream(OutputStream out, ByteBuffer outBuf, ByteBuffer inBuf) throws IOException {
+  public static int writeByteBufferToStream(OutputStream out, ByteBuffer outBuf, ByteBuffer inBuf)
+      throws IOException {
-        out.write(inBuf.array(), inBuf.arrayOffset()+inBuf.position(), bytesToWrite);
+        out.write(inBuf.array(), inBuf.arrayOffset() + inBuf.position(), bytesToWrite);
-          inBuf.limit(inBuf.position()+OUT_MAX);
+          inBuf.limit(inBuf.position() + OUT_MAX);
-    
+
-    if (outBuf.position() == 0) return;
+    if (outBuf.position() == 0)
+      return;
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-  
+
+
-   * Returns an input stream that can be used to read the contents that
-   * where written to this output stream.
+   * Returns an input stream that can be used to read the contents that where written to this output
+   * stream.
+
+
+
+
+
+
-        this.bb.position(this.bb.position()+(int)n);
-        consume((int)n);
+        this.bb.position(this.bb.position() + (int) n);
+        consume((int) n);
-      
+
+
-   * <p>Note this implementation is exactly the same as writeTo(OutputStream)
-   * but they do not both implement a common interface.
+   * <p>
+   * Note this implementation is exactly the same as writeTo(OutputStream) but they do not both
+   * implement a common interface.
-      for (ByteBuffer bb: this.chunks) {
+      for (ByteBuffer bb : this.chunks) {
-            out.write(bb.array(), bb.arrayOffset()+bb.position(), bytesToWrite);
+            out.write(bb.array(), bb.arrayOffset() + bb.position(), bytesToWrite);
-          out.write(bb.array(), bb.arrayOffset()+bb.position(), bytesToWrite);
+          out.write(bb.array(), bb.arrayOffset() + bb.position(), bytesToWrite);
-     * Writes a <code>boolean</code> value to this output stream.
-     * If the argument <code>v</code>
-     * is <code>true</code>, the value <code>(byte)1</code>
-     * is written; if <code>v</code> is <code>false</code>,
-     * the  value <code>(byte)0</code> is written.
-     * The byte written by this method may
-     * be read by the <code>readBoolean</code>
-     * method of interface <code>DataInput</code>,
-     * which will then return a <code>boolean</code>
-     * equal to <code>v</code>.
-     *
-     * @param      v   the boolean to be written.
-     */
+   * Writes a <code>boolean</code> value to this output stream. If the argument <code>v</code> is
+   * <code>true</code>, the value <code>(byte)1</code> is written; if <code>v</code> is
+   * <code>false</code>, the value <code>(byte)0</code> is written. The byte written by this method
+   * may be read by the <code>readBoolean</code> method of interface <code>DataInput</code>, which
+   * will then return a <code>boolean</code> equal to <code>v</code>.
+   *
+   * @param v the boolean to be written.
+   */
-     * Writes to the output stream the eight low-
-     * order bits of the argument <code>v</code>.
-     * The 24 high-order bits of <code>v</code>
-     * are ignored. (This means  that <code>writeByte</code>
-     * does exactly the same thing as <code>write</code>
-     * for an integer argument.) The byte written
-     * by this method may be read by the <code>readByte</code>
-     * method of interface <code>DataInput</code>,
-     * which will then return a <code>byte</code>
-     * equal to <code>(byte)v</code>.
-     *
-     * @param      v   the byte value to be written.
-     */
+   * Writes to the output stream the eight low- order bits of the argument <code>v</code>. The 24
+   * high-order bits of <code>v</code> are ignored. (This means that <code>writeByte</code> does
+   * exactly the same thing as <code>write</code> for an integer argument.) The byte written by this
+   * method may be read by the <code>readByte</code> method of interface <code>DataInput</code>,
+   * which will then return a <code>byte</code> equal to <code>(byte)v</code>.
+   *
+   * @param v the byte value to be written.
+   */
-     * Writes two bytes to the output
-     * stream to represent the value of the argument.
-     * The byte values to be written, in the  order
-     * shown, are: <p>
-     * <pre><code>
-     * (byte)(0xff &amp; (v &gt;&gt; 8))
-     * (byte)(0xff &amp; v)
-     * </code> </pre> <p>
-     * The bytes written by this method may be
-     * read by the <code>readShort</code> method
-     * of interface <code>DataInput</code> , which
-     * will then return a <code>short</code> equal
-     * to <code>(short)v</code>.
-     *
-     * @param      v   the <code>short</code> value to be written.
-     */
+   * Writes two bytes to the output stream to represent the value of the argument. The byte values
+   * to be written, in the order shown, are:
+   * <p>
+   * 
+   * <pre>
+   * <code>
+   * (byte)(0xff &amp; (v &gt;&gt; 8))
+   * (byte)(0xff &amp; v)
+   * </code>
+   * </pre>
+   * <p>
+   * The bytes written by this method may be read by the <code>readShort</code> method of interface
+   * <code>DataInput</code> , which will then return a <code>short</code> equal to
+   * <code>(short)v</code>.
+   *
+   * @param v the <code>short</code> value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-    buffer.putShort((short)v);
+    buffer.putShort((short) v);
-     * Writes a <code>char</code> value, wich
-     * is comprised of two bytes, to the
-     * output stream.
-     * The byte values to be written, in the  order
-     * shown, are:
-     * <p><pre><code>
-     * (byte)(0xff &amp; (v &gt;&gt; 8))
-     * (byte)(0xff &amp; v)
-     * </code></pre><p>
-     * The bytes written by this method may be
-     * read by the <code>readChar</code> method
-     * of interface <code>DataInput</code> , which
-     * will then return a <code>char</code> equal
-     * to <code>(char)v</code>.
-     *
-     * @param      v   the <code>char</code> value to be written.
-     */
+   * Writes a <code>char</code> value, wich is comprised of two bytes, to the output stream. The
+   * byte values to be written, in the order shown, are:
+   * <p>
+   * 
+   * <pre>
+   * <code>
+   * (byte)(0xff &amp; (v &gt;&gt; 8))
+   * (byte)(0xff &amp; v)
+   * </code>
+   * </pre>
+   * <p>
+   * The bytes written by this method may be read by the <code>readChar</code> method of interface
+   * <code>DataInput</code> , which will then return a <code>char</code> equal to
+   * <code>(char)v</code>.
+   *
+   * @param v the <code>char</code> value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-    buffer.putChar((char)v);
+    buffer.putChar((char) v);
-     * Writes an <code>int</code> value, which is
-     * comprised of four bytes, to the output stream.
-     * The byte values to be written, in the  order
-     * shown, are:
-     * <p><pre><code>
-     * (byte)(0xff &amp; (v &gt;&gt; 24))
-     * (byte)(0xff &amp; (v &gt;&gt; 16))
-     * (byte)(0xff &amp; (v &gt;&gt; &#32; &#32;8))
-     * (byte)(0xff &amp; v)
-     * </code></pre><p>
-     * The bytes written by this method may be read
-     * by the <code>readInt</code> method of interface
-     * <code>DataInput</code> , which will then
-     * return an <code>int</code> equal to <code>v</code>.
-     *
-     * @param      v   the <code>int</code> value to be written.
-     */
+   * Writes an <code>int</code> value, which is comprised of four bytes, to the output stream. The
+   * byte values to be written, in the order shown, are:
+   * <p>
+   * 
+   * <pre>
+   * <code>
+   * (byte)(0xff &amp; (v &gt;&gt; 24))
+   * (byte)(0xff &amp; (v &gt;&gt; 16))
+   * (byte)(0xff &amp; (v &gt;&gt; &#32; &#32;8))
+   * (byte)(0xff &amp; v)
+   * </code>
+   * </pre>
+   * <p>
+   * The bytes written by this method may be read by the <code>readInt</code> method of interface
+   * <code>DataInput</code> , which will then return an <code>int</code> equal to <code>v</code>.
+   *
+   * @param v the <code>int</code> value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-     * Writes a <code>long</code> value, which is
-     * comprised of eight bytes, to the output stream.
-     * The byte values to be written, in the  order
-     * shown, are:
-     * <p><pre><code>
-     * (byte)(0xff &amp; (v &gt;&gt; 56))
-     * (byte)(0xff &amp; (v &gt;&gt; 48))
-     * (byte)(0xff &amp; (v &gt;&gt; 40))
-     * (byte)(0xff &amp; (v &gt;&gt; 32))
-     * (byte)(0xff &amp; (v &gt;&gt; 24))
-     * (byte)(0xff &amp; (v &gt;&gt; 16))
-     * (byte)(0xff &amp; (v &gt;&gt;  8))
-     * (byte)(0xff &amp; v)
-     * </code></pre><p>
-     * The bytes written by this method may be
-     * read by the <code>readLong</code> method
-     * of interface <code>DataInput</code> , which
-     * will then return a <code>long</code> equal
-     * to <code>v</code>.
-     *
-     * @param      v   the <code>long</code> value to be written.
-     */
+   * Writes a <code>long</code> value, which is comprised of eight bytes, to the output stream. The
+   * byte values to be written, in the order shown, are:
+   * <p>
+   * 
+   * <pre>
+   * <code>
+   * (byte)(0xff &amp; (v &gt;&gt; 56))
+   * (byte)(0xff &amp; (v &gt;&gt; 48))
+   * (byte)(0xff &amp; (v &gt;&gt; 40))
+   * (byte)(0xff &amp; (v &gt;&gt; 32))
+   * (byte)(0xff &amp; (v &gt;&gt; 24))
+   * (byte)(0xff &amp; (v &gt;&gt; 16))
+   * (byte)(0xff &amp; (v &gt;&gt;  8))
+   * (byte)(0xff &amp; v)
+   * </code>
+   * </pre>
+   * <p>
+   * The bytes written by this method may be read by the <code>readLong</code> method of interface
+   * <code>DataInput</code> , which will then return a <code>long</code> equal to <code>v</code>.
+   *
+   * @param v the <code>long</code> value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-  
+
-   * Reserves space in the output for a long
-   * and returns a LongUpdater than can be used
-   * to update this particular long.
+   * Reserves space in the output for a long and returns a LongUpdater than can be used to update
+   * this particular long.
+   * 
-    if (this.ignoreWrites) return null;
+    if (this.ignoreWrites)
+      return null;
-  
+
+
+
-     * Writes a <code>float</code> value,
-     * which is comprised of four bytes, to the output stream.
-     * It does this as if it first converts this
-     * <code>float</code> value to an <code>int</code>
-     * in exactly the manner of the <code>Float.floatToIntBits</code>
-     * method  and then writes the <code>int</code>
-     * value in exactly the manner of the  <code>writeInt</code>
-     * method.  The bytes written by this method
-     * may be read by the <code>readFloat</code>
-     * method of interface <code>DataInput</code>,
-     * which will then return a <code>float</code>
-     * equal to <code>v</code>.
-     *
-     * @param      v   the <code>float</code> value to be written.
-     */
+   * Writes a <code>float</code> value, which is comprised of four bytes, to the output stream. It
+   * does this as if it first converts this <code>float</code> value to an <code>int</code> in
+   * exactly the manner of the <code>Float.floatToIntBits</code> method and then writes the
+   * <code>int</code> value in exactly the manner of the <code>writeInt</code> method. The bytes
+   * written by this method may be read by the <code>readFloat</code> method of interface
+   * <code>DataInput</code>, which will then return a <code>float</code> equal to <code>v</code>.
+   *
+   * @param v the <code>float</code> value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-     * Writes a <code>double</code> value,
-     * which is comprised of eight bytes, to the output stream.
-     * It does this as if it first converts this
-     * <code>double</code> value to a <code>long</code>
-     * in exactly the manner of the <code>Double.doubleToLongBits</code>
-     * method  and then writes the <code>long</code>
-     * value in exactly the manner of the  <code>writeLong</code>
-     * method. The bytes written by this method
-     * may be read by the <code>readDouble</code>
-     * method of interface <code>DataInput</code>,
-     * which will then return a <code>double</code>
-     * equal to <code>v</code>.
-     *
-     * @param      v   the <code>double</code> value to be written.
-     */
+   * Writes a <code>double</code> value, which is comprised of eight bytes, to the output stream. It
+   * does this as if it first converts this <code>double</code> value to a <code>long</code> in
+   * exactly the manner of the <code>Double.doubleToLongBits</code> method and then writes the
+   * <code>long</code> value in exactly the manner of the <code>writeLong</code> method. The bytes
+   * written by this method may be read by the <code>readDouble</code> method of interface
+   * <code>DataInput</code>, which will then return a <code>double</code> equal to <code>v</code>.
+   *
+   * @param v the <code>double</code> value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-     * Writes a string to the output stream.
-     * For every character in the string
-     * <code>s</code>,  taken in order, one byte
-     * is written to the output stream.  If
-     * <code>s</code> is <code>null</code>, a <code>NullPointerException</code>
-     * is thrown.<p>  If <code>s.length</code>
-     * is zero, then no bytes are written. Otherwise,
-     * the character <code>s[0]</code> is written
-     * first, then <code>s[1]</code>, and so on;
-     * the last character written is <code>s[s.length-1]</code>.
-     * For each character, one byte is written,
-     * the low-order byte, in exactly the manner
-     * of the <code>writeByte</code> method . The
-     * high-order eight bits of each character
-     * in the string are ignored.
-     *
-     * @param      str the string of bytes to be written.
-     */
+   * Writes a string to the output stream. For every character in the string <code>s</code>, taken
+   * in order, one byte is written to the output stream. If <code>s</code> is <code>null</code>, a
+   * <code>NullPointerException</code> is thrown.
+   * <p>
+   * If <code>s.length</code> is zero, then no bytes are written. Otherwise, the character
+   * <code>s[0]</code> is written first, then <code>s[1]</code>, and so on; the last character
+   * written is <code>s[s.length-1]</code>. For each character, one byte is written, the low-order
+   * byte, in exactly the manner of the <code>writeByte</code> method . The high-order eight bits of
+   * each character in the string are ignored.
+   *
+   * @param str the string of bytes to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-        this.buffer.position(pos+strlen);
+        this.buffer.position(pos + strlen);
-//       for (int i = 0 ; i < len ; i++) {
-//         this.buffer.put((byte)s.charAt(i));
-//       }
+      // for (int i = 0 ; i < len ; i++) {
+      // this.buffer.put((byte)s.charAt(i));
+      // }
-     * Writes every character in the string <code>s</code>,
-     * to the output stream, in order,
-     * two bytes per character. If <code>s</code>
-     * is <code>null</code>, a <code>NullPointerException</code>
-     * is thrown.  If <code>s.length</code>
-     * is zero, then no characters are written.
-     * Otherwise, the character <code>s[0]</code>
-     * is written first, then <code>s[1]</code>,
-     * and so on; the last character written is
-     * <code>s[s.length-1]</code>. For each character,
-     * two bytes are actually written, high-order
-     * byte first, in exactly the manner of the
-     * <code>writeChar</code> method.
-     *
-     * @param      s   the string value to be written.
-     */
+   * Writes every character in the string <code>s</code>, to the output stream, in order, two bytes
+   * per character. If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is
+   * thrown. If <code>s.length</code> is zero, then no characters are written. Otherwise, the
+   * character <code>s[0]</code> is written first, then <code>s[1]</code>, and so on; the last
+   * character written is <code>s[s.length-1]</code>. For each character, two bytes are actually
+   * written, high-order byte first, in exactly the manner of the <code>writeChar</code> method.
+   *
+   * @param s the string value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-      ensureCapacity(len*2);
-      for (int i=0; i < len; i++) {
+      ensureCapacity(len * 2);
+      for (int i = 0; i < len; i++) {
-   * Use -Dgemfire.ASCII_STRINGS=true if all String instances contain
-   * ASCII characters. Setting this to true gives a performance improvement.
+   * Use -Dgemfire.ASCII_STRINGS=true if all String instances contain ASCII characters. Setting this
+   * to true gives a performance improvement.
-  private static final boolean ASCII_STRINGS = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "ASCII_STRINGS");
-  
+  private static final boolean ASCII_STRINGS =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "ASCII_STRINGS");
+
-     * Writes two bytes of length information
-     * to the output stream, followed
-     * by the Java modified UTF representation
-     * of  every character in the string <code>s</code>.
-     * If <code>s</code> is <code>null</code>,
-     * a <code>NullPointerException</code> is thrown.
-     * Each character in the string <code>s</code>
-     * is converted to a group of one, two, or
-     * three bytes, depending on the value of the
-     * character.<p>
-     * If a character <code>c</code>
-     * is in the range <code>&#92;u0001</code> through
-     * <code>&#92;u007f</code>, it is represented
-     * by one byte:<p>
-     * <pre>(byte)c </pre>  <p>
-     * If a character <code>c</code> is <code>&#92;u0000</code>
-     * or is in the range <code>&#92;u0080</code>
-     * through <code>&#92;u07ff</code>, then it is
-     * represented by two bytes, to be written
-     * in the order shown:<p> <pre><code>
-     * (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6)))
-     * (byte)(0x80 | (0x3f &amp; c))
-     *  </code></pre>  <p> If a character
-     * <code>c</code> is in the range <code>&#92;u0800</code>
-     * through <code>uffff</code>, then it is
-     * represented by three bytes, to be written
-     * in the order shown:<p> <pre><code>
-     * (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12)))
-     * (byte)(0x80 | (0x3f &amp; (c &gt;&gt;  6)))
-     * (byte)(0x80 | (0x3f &amp; c))
-     *  </code></pre>  <p> First,
-     * the total number of bytes needed to represent
-     * all the characters of <code>s</code> is
-     * calculated. If this number is larger than
-     * <code>65535</code>, then a <code>UTFDataFormatException</code>
-     * is thrown. Otherwise, this length is written
-     * to the output stream in exactly the manner
-     * of the <code>writeShort</code> method;
-     * after this, the one-, two-, or three-byte
-     * representation of each character in the
-     * string <code>s</code> is written.<p>  The
-     * bytes written by this method may be read
-     * by the <code>readUTF</code> method of interface
-     * <code>DataInput</code> , which will then
-     * return a <code>String</code> equal to <code>s</code>.
-     *
-     * @param      str   the string value to be written.
-     */
+   * Writes two bytes of length information to the output stream, followed by the Java modified UTF
+   * representation of every character in the string <code>s</code>. If <code>s</code> is
+   * <code>null</code>, a <code>NullPointerException</code> is thrown. Each character in the string
+   * <code>s</code> is converted to a group of one, two, or three bytes, depending on the value of
+   * the character.
+   * <p>
+   * If a character <code>c</code> is in the range <code>&#92;u0001</code> through
+   * <code>&#92;u007f</code>, it is represented by one byte:
+   * <p>
+   * 
+   * <pre>
+   * (byte) c
+   * </pre>
+   * <p>
+   * If a character <code>c</code> is <code>&#92;u0000</code> or is in the range
+   * <code>&#92;u0080</code> through <code>&#92;u07ff</code>, then it is represented by two bytes,
+   * to be written in the order shown:
+   * <p>
+   * 
+   * <pre>
+   * <code>
+   * (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6)))
+   * (byte)(0x80 | (0x3f &amp; c))
+   *  </code>
+   * </pre>
+   * <p>
+   * If a character <code>c</code> is in the range <code>&#92;u0800</code> through
+   * <code>uffff</code>, then it is represented by three bytes, to be written in the order shown:
+   * <p>
+   * 
+   * <pre>
+   * <code>
+   * (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12)))
+   * (byte)(0x80 | (0x3f &amp; (c &gt;&gt;  6)))
+   * (byte)(0x80 | (0x3f &amp; c))
+   *  </code>
+   * </pre>
+   * <p>
+   * First, the total number of bytes needed to represent all the characters of <code>s</code> is
+   * calculated. If this number is larger than <code>65535</code>, then a
+   * <code>UTFDataFormatException</code> is thrown. Otherwise, this length is written to the output
+   * stream in exactly the manner of the <code>writeShort</code> method; after this, the one-, two-,
+   * or three-byte representation of each character in the string <code>s</code> is written.
+   * <p>
+   * The bytes written by this method may be read by the <code>readUTF</code> method of interface
+   * <code>DataInput</code> , which will then return a <code>String</code> equal to <code>s</code>.
+   *
+   * @param str the string value to be written.
+   */
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
+
-      int maxLen = strlen;
-      if (encodeLength) {
-        maxLen += 2;
-      }
-      ensureCapacity(maxLen);
+    int maxLen = strlen;
+    if (encodeLength) {
+      maxLen += 2;
+    }
+    ensureCapacity(maxLen);
-      this.buffer.putShort((short)strlen);
+      this.buffer.putShort((short) strlen);
-      this.buffer.position(pos+strlen);
+      this.buffer.position(pos + strlen);
-      for (int i = 0 ; i < strlen ; i++) {
-        this.buffer.put((byte)str.charAt(i));
+      for (int i = 0; i < strlen; i++) {
+        this.buffer.put((byte) str.charAt(i));
-//       byte[] bytes = new byte[strlen];
-//       str.getBytes(0, strlen, bytes, 0);
-//       this.buffer.put(bytes);
+      // byte[] bytes = new byte[strlen];
+      // str.getBytes(0, strlen, bytes, 0);
+      // this.buffer.put(bytes);
-  
+
-   * The logic used here is based on java's DataOutputStream.writeUTF() from 
-   * the version 1.6.0_10.
-   * The reader code should use the logic similar to DataOutputStream.readUTF() 
-   * from the version 1.6.0_10 to decode this properly.
+   * The logic used here is based on java's DataOutputStream.writeUTF() from the version 1.6.0_10.
+   * The reader code should use the logic similar to DataOutputStream.readUTF() from the version
+   * 1.6.0_10 to decode this properly.
-      int maxLen = (strlen*3);
+      int maxLen = (strlen * 3);
-      this.buffer.position(utfSizeIdx+2);
+      this.buffer.position(utfSizeIdx + 2);
-        this.buffer.put((byte)c);
+        this.buffer.put((byte) c);
-        this.buffer.put((byte) (0x80 | ((c >>  6) & 0x3F)));
-        this.buffer.put((byte) (0x80 | ((c >>  0) & 0x3F)));
+        this.buffer.put((byte) (0x80 | ((c >> 6) & 0x3F)));
+        this.buffer.put((byte) (0x80 | ((c >> 0) & 0x3F)));
-        this.buffer.put((byte) (0xC0 | ((c >>  6) & 0x1F)));
-        this.buffer.put((byte) (0x80 | ((c >>  0) & 0x3F)));
+        this.buffer.put((byte) (0xC0 | ((c >> 6) & 0x1F)));
+        this.buffer.put((byte) (0x80 | ((c >> 0) & 0x3F)));
-      this.buffer.putShort(utfSizeIdx, (short)utflen);
+      this.buffer.putShort(utfSizeIdx, (short) utflen);
-   * Same as {@link #writeUTF} but it does not encode the length in the
-   * first two bytes and allows strings longer than 65k to be encoded.
+   * Same as {@link #writeUTF} but it does not encode the length in the first two bytes and allows
+   * strings longer than 65k to be encoded.
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-      throw new IllegalStateException(LocalizedStrings.HeapDataOutputStream_UNEXPECTED_0.toLocalizedString(ex));
+      throw new IllegalStateException(
+          LocalizedStrings.HeapDataOutputStream_UNEXPECTED_0.toLocalizedString(ex));
-  
+
-   * Writes the given object to this stream as a byte array.
-   * The byte array is produced by serializing v. The serialization
-   * is done by calling DataSerializer.writeObject.
+   * Writes the given object to this stream as a byte array. The byte array is produced by
+   * serializing v. The serialization is done by calling DataSerializer.writeObject.
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-      HeapDataOutputStream other = (HeapDataOutputStream)v;
+      HeapDataOutputStream other = (HeapDataOutputStream) v;
-          for (ByteBuffer bb: other.chunks) {
+          for (ByteBuffer bb : other.chunks) {
-        other.sendTo((ByteBufferWriter)this);
+        other.sendTo((ByteBufferWriter) this);
-      sizeBuf.position(sizePos+5);
+      sizeBuf.position(sizePos + 5);
-      sizeBuf.putInt(sizePos+1, arraySize);
+      sizeBuf.putInt(sizePos + 1, arraySize);
-  
+
-   * We set "doNotCopy" to prevent wasting time
-   * by copying bytes. But to do this we create
-   * either a HeapByteBuffer to DirectByteBuffer
-   * to reference the byte array or off-heap memory.
-   * The ByteBuffer instance itself uses up memory
-   * that needs to be initialized and eventually
-   * gc'd so for smaller sizes it is better to just copy it.
-   * Public for unit test access.
+   * We set "doNotCopy" to prevent wasting time by copying bytes. But to do this we create either a
+   * HeapByteBuffer to DirectByteBuffer to reference the byte array or off-heap memory. The
+   * ByteBuffer instance itself uses up memory that needs to be initialized and eventually gc'd so
+   * for smaller sizes it is better to just copy it. Public for unit test access.
-  
+
-   * the contents of the buffer between the position and the limit
-   * are copied to the output stream.
+   * the contents of the buffer between the position and the limit are copied to the output stream.
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
-    if (remaining == 0) return;
+    if (remaining == 0)
+      return;
-   * the contents of the buffer between the position and the limit
-   * are copied to the output stream.
+   * the contents of the buffer between the position and the limit are copied to the output stream.
-    if (this.ignoreWrites) return;
+    if (this.ignoreWrites)
+      return;
