GEODE-6639: Adds unit test for processing message time logic.

+
+  private ProcessingMessageTimer processingMessageTimer = new ProcessingMessageTimer();
+
-  private long processingMessageStartTime = -1;
-  private final Object processingMessageLock = new Object();
-
+  @VisibleForTesting
+  void setProcessMessages(boolean processMessages) {
+    this.processMessages = processMessages;
+  }
+
-    synchronized (processingMessageLock) {
-      // go ahead and reset it if it is already set
-      processingMessageStartTime = System.currentTimeMillis();
-    }
+    processingMessageTimer.setProcessingMessage();
-    synchronized (processingMessageLock) {
-      // only update it if it was already set by setProcessingMessage
-      if (processingMessageStartTime != -1) {
-        processingMessageStartTime = System.currentTimeMillis();
-      }
-    }
+    processingMessageTimer.updateProcessingMessage();
-    synchronized (processingMessageLock) {
-      processingMessageStartTime = -1;
-    }
+    processingMessageTimer.setNotProcessingMessage();
-    long result;
-    synchronized (processingMessageLock) {
-      result = processingMessageStartTime;
-    }
-    if (result != -1) {
-      result = System.currentTimeMillis() - result;
-    }
-    return result;
+    return processingMessageTimer.getCurrentMessageProcessingTime();
-      synchronized (processingMessageLock) {
+      synchronized (processingMessageTimer.processingMessageLock) {
+
+  static class ProcessingMessageTimer {
+    public static final long NOT_PROCESSING = -1l;
+
+    private long processingMessageStartTime = NOT_PROCESSING;
+    private final Object processingMessageLock = new Object();
+
+    void setProcessingMessage() {
+      synchronized (processingMessageLock) {
+        // go ahead and reset it if it is already set
+        processingMessageStartTime = System.currentTimeMillis();
+      }
+    }
+
+    void updateProcessingMessage() {
+      synchronized (processingMessageLock) {
+        // only update it if it was already set by setProcessingMessage
+        if (processingMessageStartTime != NOT_PROCESSING) {
+          processingMessageStartTime = System.currentTimeMillis();
+        }
+      }
+    }
+
+    void setNotProcessingMessage() {
+      synchronized (processingMessageLock) {
+        processingMessageStartTime = NOT_PROCESSING;
+      }
+    }
+
+    long getCurrentMessageProcessingTime() {
+      long result;
+      synchronized (processingMessageLock) {
+        result = processingMessageStartTime;
+      }
+      if (result != NOT_PROCESSING) {
+        result = System.currentTimeMillis() - result;
+      }
+      return result;
+    }
+  }
