Merge branch 'release/1.0.0-incubating.M3'

-import joptsimple.MultipleArgumentsForOptionException;
+import com.gemstone.gemfire.management.internal.cli.util.HyphenFormatter;
+ *
+ * Newly constructed JoptOptionParser must be loaded with arguments and
+ * options before parsing command strings.
- * @since 7.0
- * 
+ * @since GemFire 7.0
+    parser.allowsUnrecognizedOptions();
-    if (option.isRequired()) {
-      argumentSpecs.required();
-    }
+    // TODO: temporarily commented out as workaround for GEODE-1598
+    // if (option.isRequired()) {
+    //   argumentSpecs.required();
+    // }
-      String[] preProcessedInput = preProcess(input.getString());
+      String[] preProcessedInput = preProcess(new HyphenFormatter().formatCommand(input.getString()));
-      } catch (Exception e) {
-        if (e instanceof OptionException) {
-          ce = processException(e);
-          joptOptionSet = ((OptionException) e).getDetected();
-        }
+      } catch (OptionException e) {
+        ce = processException(e);
+        // TODO: joptOptionSet = e.getDetected(); // removed when geode-joptsimple was removed
-          String unknownString = joptOptionSet.nonOptionArguments().get(arguments.size());
+          String unknownString = (String)joptOptionSet.nonOptionArguments().get(arguments.size()); // added cast when geode-joptsimple was removed
-          ce = processException(OptionException.createUnrecognizedOptionException(unknownString, joptOptionSet));
+          // TODO: ce = processException(OptionException.createUnrecognizedOptionException(unknownString, joptOptionSet)); // removed when geode-joptsimple was removed
-                    ce = processException(new MultipleArgumentsForOptionException(optionList, joptOptionSet));
+                    // TODO: ce = processException(new MultipleArgumentsForOptionException(optionList, joptOptionSet)); // removed when geode-joptsimple was removed
-  private CliCommandOptionException processException(Exception e) {
-    CliCommandOptionException ce = null;
-    if (e instanceof OptionException) {
-      ce = (CliCommandOptionException) ExceptionGenerator
-          .generate((OptionException) e);
-      if (ce != null) {
-        if (ce instanceof CliCommandOptionException) {
-          ((CliCommandOptionException) ce)
-              .setOption(getOption((OptionException) e));
-        }
-      }
-    }
-    return ce;
+  private CliCommandOptionException processException(final OptionException exception) {
+    return ExceptionGenerator.generate(getOption(exception), exception);
