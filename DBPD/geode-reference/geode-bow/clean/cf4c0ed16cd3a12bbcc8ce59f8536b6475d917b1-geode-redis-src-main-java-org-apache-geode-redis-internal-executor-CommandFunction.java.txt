GEODE-8089: change redis set ops to use functions (#5058)

* scard now uses function
* sismember now uses function
* srandmember now uses a function
* spop now uses a function
* sscan now uses a function
+import java.util.regex.Pattern;
-    ArrayList<ByteArrayWrapper> commandArgs = (ArrayList<ByteArrayWrapper>) args[1];
-      case SADD:
+      case SADD: {
+        ArrayList<ByteArrayWrapper> membersToAdd = (ArrayList<ByteArrayWrapper>) args[1];
-            () -> RedisSet.sadd(localRegion, key, commandArgs),
+            () -> RedisSet.sadd(localRegion, key, membersToAdd),
-      case SREM:
+      }
+      case SREM: {
+        ArrayList<ByteArrayWrapper> membersToRemove = (ArrayList<ByteArrayWrapper>) args[1];
-            () -> RedisSet.srem(localRegion, key, commandArgs, setWasDeleted),
+            () -> RedisSet.srem(localRegion, key, membersToRemove, setWasDeleted),
+      }
-            () -> RedisSet.members(localRegion, key),
+            () -> RedisSet.smembers(localRegion, key),
+      case SCARD:
+        stripedExecutor.execute(key,
+            () -> RedisSet.scard(localRegion, key),
+            (size) -> resultSender.lastResult(size));
+        break;
+      case SISMEMBER: {
+        ByteArrayWrapper member = (ByteArrayWrapper) args[1];
+        stripedExecutor.execute(key,
+            () -> RedisSet.sismember(localRegion, key, member),
+            (exists) -> resultSender.lastResult(exists));
+        break;
+      }
+      case SRANDMEMBER: {
+        int count = (int) args[1];
+        stripedExecutor.execute(key,
+            () -> RedisSet.srandmember(localRegion, key, count),
+            (members) -> resultSender.lastResult(members));
+        break;
+      }
+      case SPOP: {
+        int popCount = (int) args[1];
+        stripedExecutor.execute(key,
+            () -> RedisSet.spop(localRegion, key, popCount),
+            (members) -> resultSender.lastResult(members));
+        break;
+      }
+      case SSCAN: {
+        Pattern matchPattern = (Pattern) args[0];
+        int count = (int) args[1];
+        int cursor = (int) args[2];
+        stripedExecutor.execute(key,
+            () -> RedisSet.sscan(localRegion, key, matchPattern, count, cursor),
+            (members) -> resultSender.lastResult(members));
+        break;
+      }
