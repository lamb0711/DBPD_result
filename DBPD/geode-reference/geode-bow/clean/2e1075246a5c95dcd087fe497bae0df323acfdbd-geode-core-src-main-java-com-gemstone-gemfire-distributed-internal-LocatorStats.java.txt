Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.*;
+import com.gemstone.gemfire.internal.StatisticsTypeFactoryImpl;
+
-import com.gemstone.gemfire.StatisticDescriptor;
-import com.gemstone.gemfire.Statistics;
-import com.gemstone.gemfire.StatisticsFactory;
-import com.gemstone.gemfire.StatisticsType;
-import com.gemstone.gemfire.StatisticsTypeFactory;
-import com.gemstone.gemfire.internal.StatisticsTypeFactoryImpl;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.LOCATORS;
- * @since 5.7
+ * @since GemFire 5.7
-  
-  
-  private static final String KNOWN_LOCATORS = "locators"; // gauge
+
+  private static final String KNOWN_LOCATORS = LOCATORS; // gauge
-            f.createIntGauge(KNOWN_LOCATORS, "Number of locators known to this locator", "locators"),
+            f.createIntGauge(KNOWN_LOCATORS, "Number of locators known to this locator", LOCATORS),
-  /**
-   * Used by tests to create an instance given its already existings stats.
-   */
-  public LocatorStats(Statistics stats) {
-    this._stats = stats;
-  }
-
-  public final void incLocatorRequests() {
-    if(this._stats==null) {
-      this.requests_to_locator.incrementAndGet();
-    } else {
-      this._stats.incLong(_REQUESTS_TO_LOCATOR, 1);
-    }
-  }  
-  
-  public final void incLocatorResponses() {
-    if(this._stats==null) {
-      this.responses_from_locator.incrementAndGet();
-    } else {
-      this._stats.incLong(_RESPONSES_FROM_LOCATOR, 1);
-    }
-  }  
-  
-  }  
-  
-  public void setRequestInProgress(int threads) {
-    if(this._stats!=null) {
-      this._stats.setInt(_REQUESTS_IN_PROGRESS, threads);
-    } else {
-      requestsInProgress.set(threads);
-    }
