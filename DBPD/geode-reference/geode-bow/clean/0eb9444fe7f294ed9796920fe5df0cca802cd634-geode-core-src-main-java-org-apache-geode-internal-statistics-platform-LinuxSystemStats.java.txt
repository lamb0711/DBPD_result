GEODE-6035 Increase backlog for peer-to-peer connection formation

I've made a sweep through the code to make TCP/IP backlog defaults
consistent.  All of them now default to 1280 but all are limited
by the operating system limit.  On Linux this is usually 128 and
is configured with the somaxconn setting.

The figure 1280 was recommended by Pivotal field engineers.

This also adds the following LinuxSystemStats:

    tcpExtSynCookiesRecv    The number of TCP/IP SYN cookies received due to a full server socket backlog.
                            If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.
                            units: cookies received
    tcpExtSynCookiesSent    The number of TCP/IP SYN cookies sent due to a full server socket backlog.
                            If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.
                            units: cookies sent
    tcpExtListenDrops       The number of TCP/IP connection requests that have been dropped due to a full backlog.
                            If this is large increase the OS SOMAXCONN setting and increase socket backlog settings.
                            units: requests
    tcpExtListenOverflows   The number of TCP/IP connection requests that could not be queued due to a small backlog.
                            These are either dropped (tcpExtListenDrops) or handled via cookies (tcpSynCookiesSent).
                            In either case you should consider increasing SOMAXCONN and increasing backlog settings.
                            units: requests
    soMaxConn               Maximum TCP/IP server socket connection request backlog
                            units: connection requests

+  static final int tcpSOMaxConnINT = 20;
+  static final int tcpExtSynCookiesRecvLONG = 28;
+  static final int tcpExtSynCookiesSentLONG = 29;
+  static final int tcpExtListenDropsLONG = 30;
+  static final int tcpExtListenOverflowsLONG = 31;
+
+            f.createIntGauge("soMaxConn",
+                "Maximum TCP/IP server socket connection request backlog",
+                "connection requests"),
+            f.createLongCounter("tcpExtSynCookiesRecv",
+                "The number of TCP/IP SYN cookies received due to a full server socket backlog.  "
+                    + "If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.",
+                "cookies received"),
+            f.createLongCounter("tcpExtSynCookiesSent",
+                "The number of TCP/IP SYN cookies sent due to a full server socket backlog.  "
+                    + "If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.",
+                "cookies sent"),
+            f.createLongCounter("tcpExtListenDrops",
+                "The number of TCP/IP connection requests that have been dropped due to a full backlog.  "
+                    + "If this is large increase the OS SOMAXCONN setting and increase socket backlog settings",
+                "requests"),
+            f.createLongCounter("tcpExtListenOverflows",
+                "The number of TCP/IP connection requests that could not be queued due to a small backlog.  "
+                    + "These are either dropped (tcpExtListenDrops) or handled via cookies (tcpSynCookiesSent).  "
+                    + "In either case you should consider increasing SOMAXCONN and increasing backlog settings.",
+                "requests"),
+    checkOffset("soMaxConn", tcpSOMaxConnINT);
+    checkOffset("tcpExtSynCookiesRecv", tcpExtSynCookiesRecvLONG);
+    checkOffset("tcpExtSynCookiesSent", tcpExtSynCookiesSentLONG);
+    checkOffset("tcpExtListenDrops", tcpExtListenDropsLONG);
+    checkOffset("tcpExtListenOverflows", tcpExtListenOverflowsLONG);
