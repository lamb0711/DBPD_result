GEODE-11: Add a basic score based aggregator

* Aggregator merges results returned from shards and orders the result based on
  lucene hit score
* A configurable count of results is merged

Review link: https://reviews.apache.org/r/37720/

-import java.util.Collection;
-import java.util.Iterator;
+import java.util.ArrayList;
-public class LuceneQueryResultsImpl<E> implements LuceneQueryResults<E>, ResultCollector {
+public class LuceneQueryResultsImpl implements LuceneQueryResults,
+    ResultCollector<LuceneQueryResults, List<LuceneQueryResults>> {
+
+  // list of docs matching search query
+  private List<LuceneResultStruct> hits = new ArrayList<>();
+  private float maxScore = Float.MIN_VALUE;
-  public Object getResult() throws FunctionException {
+  public List<LuceneQueryResults> getResult() throws FunctionException {
-  public Object getResult(long timeout, TimeUnit unit)
-      throws FunctionException, InterruptedException {
+  public List<LuceneQueryResults> getResult(long timeout, TimeUnit unit) throws FunctionException, InterruptedException {
-  public void addResult(DistributedMember memberID,
-      Object resultOfSingleExecution) {
-    // TODO Auto-generated method stub
-    
+  public void addResult(DistributedMember memberID, LuceneQueryResults resultOfSingleExecution) {
+    // results.add(resultOfSingleExecution);
-    
+
-    
+
-  public List getNextPage() {
-    // TODO Auto-generated method stub
+  public List<LuceneResultStruct> getNextPage() {
-    // TODO Auto-generated method stub
-  public int size() {
+  public Object getID() {
-    return 0;
+    return null;
+  @Override
+  public int size() {
+    return hits.size();
+  }
+
+  @Override
+  public List<LuceneResultStruct> getHits() {
+    return hits;
+  }
+
+  @Override
+  public float getMaxScore() {
+    return maxScore;
+  }
+
+  /**
+   * Adds a result hit to the result set
+   * 
+   * @param hit
+   */
+  public void addHit(LuceneResultStruct hit) {
+    hits.add(hit);
+    if (hit.getScore() > maxScore) {
+      maxScore = hit.getScore();
+    }
+  }
