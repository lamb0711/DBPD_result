GEODE-7869: Cleanup warnings in geode-web-api

-@Api(value = "functions", description = "Rest api for gemfire function execution",
-    tags = "functions")
+@Api(value = "functions", tags = "functions")
-  @RequestMapping(method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
+  @RequestMapping(method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE})
-    final Map<String, Function> registeredFunctions = FunctionService.getRegisteredFunctions();
+    @SuppressWarnings("unchecked")
+    final Map<String, Function<?>> registeredFunctions =
+        (Map<String, Function<?>>) (Map<?, ?>) FunctionService.getRegisteredFunctions();
-    Function function = FunctionService.getFunction(functionId);
+    Function<?> function = FunctionService.getFunction(functionId);
-    Execution execution = null;
+    Execution<Object, ?, ?> execution;
-      logger.debug("Executing Function ({}) with arguments ({}) on Region ({})...", functionId,
-          ArrayUtils.toString(argsInBody), region);
-
-      region = decode(region);
-      try {
-        execution = FunctionService.onRegion(getRegion(region));
-      } catch (FunctionException fe) {
-        throw new GemfireRestException(
-            String.format("The Region identified by name (%1$s) could not found!", region), fe);
-      }
+      execution = executeOnRegion(functionId, region, argsInBody);
-      logger.debug("Executing Function ({}) with arguments ({}) on Member ({})...", functionId,
-          ArrayUtils.toString(argsInBody), ArrayUtils.toString(members));
-
-      try {
-        execution = FunctionService.onMembers(getMembers(members));
-      } catch (FunctionException fe) {
-        throw new GemfireRestException(
-            "Could not found the specified members in distributed system!", fe);
-      }
+      execution = executeOnMembers(functionId, members, argsInBody);
-      logger.debug("Executing Function ({}) with arguments ({}) on Groups ({})...", functionId,
-          ArrayUtils.toString(argsInBody), ArrayUtils.toString(groups));
-
-      try {
-        execution = FunctionService.onMembers(groups);
-      } catch (FunctionException fe) {
-        throw new GemfireRestException("no member(s) are found belonging to the provided group(s)!",
-            fe);
-      }
+      execution = executeOnGroups(functionId, groups, argsInBody);
-      // Default case is to execute function on all existing data node in DS, document this.
-      logger.debug("Executing Function ({}) with arguments ({}) on all Members...", functionId,
-          ArrayUtils.toString(argsInBody));
-
-      try {
-        execution = FunctionService.onMembers(getAllMembersInDS());
-      } catch (FunctionException fe) {
-        throw new GemfireRestException(
-            "Distributed system does not contain any valid data node to run the specified  function!",
-            fe);
-      }
+      execution = executeOnAllMembers(functionId, argsInBody);
-      Set filter1 = ArrayUtils.asSet(filter);
+      Set<String> filter1 = ArrayUtils.asSet(filter);
-      Object functionResult = null;
+      Object functionResult;
+
+  private Execution<Object, ?, ?> executeOnAllMembers(String functionId, String argsInBody) {
+    // Default case is to execute function on all existing data node in DS, document this.
+    logger.debug("Executing Function ({}) with arguments ({}) on all Members...", functionId,
+        ArrayUtils.toString(argsInBody));
+
+    try {
+      @SuppressWarnings("unchecked")
+      Execution<Object, ?, ?> execution = FunctionService.onMembers(getAllMembersInDS());
+      return execution;
+    } catch (FunctionException fe) {
+      throw new GemfireRestException(
+          "Distributed system does not contain any valid data node to run the specified  function!",
+          fe);
+    }
+  }
+
+  private Execution<Object, ?, ?> executeOnGroups(String functionId, String[] groups,
+      String argsInBody) {
+    logger.debug("Executing Function ({}) with arguments ({}) on Groups ({})...", functionId,
+        ArrayUtils.toString(argsInBody), ArrayUtils.toString(groups));
+
+    try {
+      @SuppressWarnings("unchecked")
+      Execution<Object, ?, ?> execution = FunctionService.onMembers(groups);
+      return execution;
+    } catch (FunctionException fe) {
+      throw new GemfireRestException("no member(s) are found belonging to the provided group(s)!",
+          fe);
+    }
+  }
+
+  private Execution<Object, ?, ?> executeOnMembers(String functionId, String[] members,
+      String argsInBody) {
+    logger.debug("Executing Function ({}) with arguments ({}) on Member ({})...", functionId,
+        ArrayUtils.toString(argsInBody), ArrayUtils.toString(members));
+
+    try {
+      @SuppressWarnings("unchecked")
+      Execution<Object, ?, ?> execution = FunctionService.onMembers(getMembers(members));
+      return execution;
+    } catch (FunctionException fe) {
+      throw new GemfireRestException(
+          "Could not found the specified members in distributed system!", fe);
+    }
+  }
+
+  private Execution<Object, ?, ?> executeOnRegion(String functionId, String region,
+      String argsInBody) {
+    logger.debug("Executing Function ({}) with arguments ({}) on Region ({})...", functionId,
+        ArrayUtils.toString(argsInBody), region);
+
+    region = decode(region);
+    try {
+      @SuppressWarnings("unchecked")
+      Execution<Object, ?, ?> execution = FunctionService.onRegion(getRegion(region));
+      return execution;
+    } catch (FunctionException fe) {
+      throw new GemfireRestException(
+          String.format("The Region identified by name (%1$s) could not found!", region), fe);
+    }
+  }
