GEODE-6291: change create mapping to define column and pdx field information  (#3155)

Create mapping now requires that the pdx class exists on the server.
It generates a FieldMapping definition for each column/field. It will load the pdx class and
generate a pdx type for it, failing if it can not do so.
If the pdx type field count does not match the table column count then it will fail.
The pdx field names can differ in case from the column names as long as only one field matches the column.

Authored-by: Benjamin Ross <bross@pivotal.io>
Authored-by: Darrel Schneider <dschneider@pivotal.io>

-import java.util.HashSet;
+import java.util.ArrayList;
-import java.util.Set;
-import java.util.stream.Collectors;
+import javax.xml.bind.annotation.XmlElement;
-import org.apache.geode.connectors.jdbc.JdbcConnectorException;
-import org.apache.geode.connectors.jdbc.internal.TableMetaDataView;
-import org.apache.geode.pdx.internal.PdxType;
-import org.apache.geode.pdx.internal.TypeRegistry;
+ *       &lt;sequence>
+ *         &lt;element name="field-mapping" maxOccurs="unbounded" minOccurs="0">
+ *           &lt;complexType>
+ *             &lt;simpleContent>
+ *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
+ *                 &lt;attribute name="pdx-name" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                 &lt;attribute name="pdx-type" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                 &lt;attribute name="jdbc-name" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                 &lt;attribute name="jdbc-type" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *               &lt;/extension>
+ *             &lt;/simpleContent>
+ *           &lt;/complexType>
+ *         &lt;/element>
+ *       &lt;/sequence>
-@XmlType(name = "")
+@XmlType(name = "", propOrder = {"fieldMappings"})
+  @XmlElement(name = "field-mapping", namespace = "http://geode.apache.org/schema/jdbc")
+  protected final List<FieldMapping> fieldMappings = new ArrayList<>();
-  public String getColumnNameForField(String fieldName, TableMetaDataView tableMetaDataView) {
-    Set<String> columnNames = tableMetaDataView.getColumnNames();
-    if (columnNames.contains(fieldName)) {
-      return fieldName;
-    }
-
-    List<String> ignoreCaseMatch = columnNames.stream().filter(c -> c.equalsIgnoreCase(fieldName))
-        .collect(Collectors.toList());
-    if (ignoreCaseMatch.size() > 1) {
-      throw new JdbcConnectorException(
-          "The SQL table has at least two columns that match the PDX field: " + fieldName);
-    }
-
-    if (ignoreCaseMatch.size() == 1) {
-      return ignoreCaseMatch.get(0);
-    }
-
-    // there is no match either in the configured mapping or the table columns
-    return fieldName;
+  public List<FieldMapping> getFieldMappings() {
+    return this.fieldMappings;
-  public String getFieldNameForColumn(String columnName, TypeRegistry typeRegistry) {
-    Set<PdxType> pdxTypes = getPdxTypesForClassName(typeRegistry);
-    String fieldName = findExactMatch(columnName, pdxTypes);
-    if (fieldName == null) {
-      fieldName = findCaseInsensitiveMatch(columnName, pdxTypes);
-    }
-    return fieldName;
-  }
-
-  private Set<PdxType> getPdxTypesForClassName(TypeRegistry typeRegistry) {
-    Set<PdxType> pdxTypes = typeRegistry.getPdxTypesForClassName(getPdxName());
-    if (pdxTypes.isEmpty()) {
-      throw new JdbcConnectorException(
-          "The class " + getPdxName() + " has not been pdx serialized.");
-    }
-    return pdxTypes;
-  }
-
-  /**
-   * Given a column name and a set of pdx types, find the field name in those types that match,
-   * ignoring case, the column name.
-   *
-   * @return the matching field name or null if no match
-   * @throws JdbcConnectorException if no fields match
-   * @throws JdbcConnectorException if more than one field matches
-   */
-  private String findCaseInsensitiveMatch(String columnName, Set<PdxType> pdxTypes) {
-    HashSet<String> matchingFieldNames = new HashSet<>();
-    for (PdxType pdxType : pdxTypes) {
-      for (String existingFieldName : pdxType.getFieldNames()) {
-        if (existingFieldName.equalsIgnoreCase(columnName)) {
-          matchingFieldNames.add(existingFieldName);
-        }
-      }
-    }
-    if (matchingFieldNames.isEmpty()) {
-      throw new JdbcConnectorException("The class " + getPdxName()
-          + " does not have a field that matches the column " + columnName);
-    } else if (matchingFieldNames.size() > 1) {
-      throw new JdbcConnectorException(
-          "Could not determine what pdx field to use for the column name " + columnName
-              + " because the pdx fields " + matchingFieldNames + " all match it.");
-    }
-    return matchingFieldNames.iterator().next();
-  }
-
-  /**
-   * Given a column name, search the given pdxTypes for a field whose name exactly matches the
-   * column name.
-   *
-   * @return the matching field name or null if no match
-   */
-  private String findExactMatch(String columnName, Set<PdxType> pdxTypes) {
-    for (PdxType pdxType : pdxTypes) {
-      if (pdxType.getPdxField(columnName) != null) {
-        return columnName;
-      }
-    }
-    return null;
+  public void addFieldMapping(FieldMapping value) {
+    this.fieldMappings.add(value);
-        && isEqual(schema, that.schema);
+        && isEqual(schema, that.schema)
+        && isEqual(fieldMappings, that.fieldMappings);
-  private static boolean isEqual(String s1, String s2) {
-    return s1 != null ? s1.equals(s2) : s2 == null;
+  private static boolean isEqual(Object o1, Object o2) {
+    return o1 != null ? o1.equals(o2) : o2 == null;
+        + ", fieldMapping='" + fieldMappings + '\''
