GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


-import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.PartitionedRegionException;
-import org.apache.geode.internal.cache.RemoteContainsKeyValueMessage;
-import org.apache.geode.internal.cache.RemoteContainsKeyValueMessage.RemoteContainsKeyValueResponse;
-import org.apache.geode.internal.cache.RemoteDestroyMessage;
-import org.apache.geode.internal.cache.RemoteFetchEntryMessage;
-import org.apache.geode.internal.cache.RemoteGetMessage;
-import org.apache.geode.internal.cache.RemoteInvalidateMessage;
-import org.apache.geode.internal.cache.RemoteOperationMessage.RemoteOperationResponse;
-import org.apache.geode.internal.cache.RemotePutAllMessage;
-import org.apache.geode.internal.cache.RemotePutMessage;
-import org.apache.geode.internal.cache.RemotePutMessage.PutResult;
-import org.apache.geode.internal.cache.RemotePutMessage.RemotePutResponse;
-import org.apache.geode.internal.cache.RemoteRemoveAllMessage;
+import org.apache.geode.internal.cache.tx.RemoteContainsKeyValueMessage.RemoteContainsKeyValueResponse;
+import org.apache.geode.internal.cache.tx.RemoteOperationMessage.RemoteOperationResponse;
+import org.apache.geode.internal.cache.tx.RemotePutMessage.PutResult;
+import org.apache.geode.internal.cache.tx.RemotePutMessage.RemotePutResponse;
-    // TODO Auto-generated method stub
-    // this.prStats.incPartitionMessagesSent();
-          event.getLocalRegion(), event, expectedOldValue,
-          ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR, true, false);
-      response.waitForCacheException();
-    } catch (EntryNotFoundException enfe) {
-      throw enfe;
-    } catch (TransactionDataNotColocatedException enfe) {
-      throw enfe;
-    } catch (CacheException ce) {
-      throw new PartitionedRegionException(
-          LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED
-              .toLocalizedString(state.getTarget()),
-          ce);
+          event.getLocalRegion(), event, expectedOldValue, true, false);
+      response.waitForRemoteResponse();
-      // this.prStats.incPartitionMessagesSent();
-      RuntimeException re = new TransactionDataNotColocatedException(
-          LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION
-              .toLocalizedString(keyInfo.getKey()));
-      re.initCause(e);
-      throw re;
-    } catch (RemoteOperationException e) {
+      throw e;
+    } catch (CacheException | RemoteOperationException e) {
-
-          RemoteInvalidateMessage.send(state.getTarget(), event.getRegion(), event,
-              ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR, true, false);
-      response.waitForCacheException();
+          RemoteInvalidateMessage.send(state.getTarget(), event.getRegion(), event, true, false);
+      response.waitForRemoteResponse();
-    } catch (CacheException ce) {
-      throw new PartitionedRegionException(
-          LocalizedStrings.PartitionedRegion_DESTROY_OF_ENTRY_ON_0_FAILED
-              .toLocalizedString(state.getTarget()),
-          ce);
-    } catch (RemoteOperationException roe) {
+    } catch (CacheException | RemoteOperationException roe) {
-
-  public int entryCount() {
-    return this.region.getRegionSize(this.state.getTarget());
-  }
-
-
-              putallOp.getPutAllEntryData(), putallOp.getPutAllEntryData().length, true,
-              ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR, false);
-      response.waitForCacheException();
+              putallOp.getPutAllEntryData(), putallOp.getPutAllEntryData().length, true, false);
+      response.waitForRemoteResponse();
-              op.getRemoveAllEntryData(), op.getRemoveAllEntryData().length, true,
-              ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR, false);
-      response.waitForCacheException();
+              op.getRemoveAllEntryData(), op.getRemoveAllEntryData().length, true, false);
+      response.waitForRemoteResponse();
+
+  @Override
+  protected InternalRegion getRegion() {
+    return this.region;
+  }
