GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

-import org.apache.geode.distributed.internal.DistributionConfig;
+import static org.apache.commons.lang.Validate.isTrue;
+import static org.apache.commons.lang.Validate.notEmpty;
+import static org.apache.commons.lang.Validate.notNull;
-import java.util.concurrent.TimeUnit;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
+  /**
+   * For testing only
+   */
-  public ProcessController createProcessController(final ProcessControllerParameters arguments,
+  public ProcessController createProcessController(final ProcessControllerParameters parameters,
-    if (arguments == null) {
-      throw new NullPointerException("ProcessControllerParameters must not be null");
-    }
-    if (pid < 1) {
-      throw new IllegalArgumentException("Invalid pid '" + pid + "' specified");
-    }
-    try {
-      if (isAttachAPIFound()) {
-        return new MBeanProcessController((MBeanControllerParameters) arguments, pid);
-      } else {
-        return new FileProcessController((FileControllerParameters) arguments, pid);
+    notNull(parameters, "Invalid parameters '" + parameters + "' specified");
+    isTrue(pid > 0, "Invalid pid '" + pid + "' specified");
+
+    if (isAttachAPIFound()) {
+      try {
+        return new MBeanProcessController(parameters, pid);
+      } catch (ExceptionInInitializerError ignore) {
-    } catch (final ExceptionInInitializerError e) {
-      // LOGGER.warn("Attach API class not found", e);
-    return null;
+    return new FileProcessController(parameters, pid);
-  public ProcessController createProcessController(final ProcessControllerParameters arguments,
-      final File pidFile, final long timeout, final TimeUnit unit)
+  public ProcessController createProcessController(final ProcessControllerParameters parameters,
+      final File directory, final String pidFileName)
-    if (arguments == null) {
-      throw new NullPointerException("ProcessControllerParameters must not be null");
-    }
-    if (pidFile == null) {
-      throw new NullPointerException("Pid file must not be null");
-    }
-    return createProcessController(arguments, new PidFile(pidFile).readPid(timeout, unit));
-  }
+    notNull(parameters, "Invalid parameters '" + parameters + "' specified");
+    notNull(directory, "Invalid directory '" + directory + "' specified");
+    notEmpty(pidFileName, "Invalid pidFileName '" + pidFileName + "' specified");
-  public ProcessController createProcessController(final ProcessControllerParameters arguments,
-      final File directory, final String pidFilename, final long timeout, final TimeUnit unit)
-      throws IOException, InterruptedException, TimeoutException {
-    if (arguments == null) {
-      throw new NullPointerException("ProcessControllerParameters must not be null");
-    }
-    if (directory == null) {
-      throw new NullPointerException("Directory must not be null");
-    }
-    if (pidFilename == null) {
-      throw new NullPointerException("Pid file name must not be null");
-    }
-    return createProcessController(arguments,
-        new PidFile(directory, pidFilename).readPid(timeout, unit));
+    return createProcessController(parameters, readPid(directory, pidFileName));
-    if (this.disableAttachApi) {
+    if (disableAttachApi) {
-    } catch (ClassNotFoundException e) {
+    } catch (ClassNotFoundException ignore) {
+
+  private int readPid(final File directory, final String pidFileName) throws IOException {
+    return new PidFile(directory, pidFileName).readPid();
+  }
