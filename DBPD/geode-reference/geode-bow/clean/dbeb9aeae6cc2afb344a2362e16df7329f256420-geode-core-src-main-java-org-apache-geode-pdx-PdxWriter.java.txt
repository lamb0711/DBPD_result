Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A PdxWriter will be passed to {@link PdxSerializable#toData(PdxWriter) toData} or 
- * {@link PdxSerializer#toData(Object, PdxWriter) PdxSerializer toData} by GemFire when it is serializing the 
- * domain class. The domain class needs to serialize instance 
- * fields using this interface. This interface is implemented 
- * by GemFire.
- * <p>The order in which the fields are written must match the order in which they are
- * read by {@link PdxReader}.
- * <p>Field names are case sensitive.
- * <p>All methods on this interface return itself to allow method calls to be
- * chained together.
+ * A PdxWriter will be passed to {@link PdxSerializable#toData(PdxWriter) toData} or
+ * {@link PdxSerializer#toData(Object, PdxWriter) PdxSerializer toData} by GemFire when it is
+ * serializing the domain class. The domain class needs to serialize instance fields using this
+ * interface. This interface is implemented by GemFire.
+ * <p>
+ * The order in which the fields are written must match the order in which they are read by
+ * {@link PdxReader}.
+ * <p>
+ * Field names are case sensitive.
+ * <p>
+ * All methods on this interface return itself to allow method calls to be chained together.
-  
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>char</code>.
-   * <p>Java char is mapped to .NET System.Char.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>char</code>.
+   * <p>
+   * Java char is mapped to .NET System.Char.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>boolean</code>.
-   * <p>Java boolean is mapped to .NET System.Boolean.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>boolean</code>.
+   * <p>
+   * Java boolean is mapped to .NET System.Boolean.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>byte</code>.
-   * <p>Java byte is mapped to .NET System.SByte.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>byte</code>.
+   * <p>
+   * Java byte is mapped to .NET System.SByte.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>short</code>.
-   * <p>Java short is mapped to .NET System.Int16.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>short</code>.
+   * <p>
+   * Java short is mapped to .NET System.Int16.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>int</code>.
-   * <p>Java int is mapped to .NET System.Int32.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>int</code>.
+   * <p>
+   * Java int is mapped to .NET System.Int32.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>long</code>.
-   * <p>Java long is mapped to .NET System.Int64.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>long</code>.
+   * <p>
+   * Java long is mapped to .NET System.Int64.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>float</code>.
-   * <p>Java float is mapped to .NET System.Float.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>float</code>.
+   * <p>
+   * Java float is mapped to .NET System.Float.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>double</code>.
-   * <p>Java double is mapped to .NET System.Double.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>double</code>.
+   * <p>
+   * Java double is mapped to .NET System.Double.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>Date</code>.
-   * <p>Java Date is mapped to .NET System.DateTime.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>Date</code>.
+   * <p>
+   * Java Date is mapped to .NET System.DateTime.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>String</code>.
-   * <p>Java String is mapped to .NET System.String.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>String</code>.
+   * <p>
+   * Java String is mapped to .NET System.String.
+   * 
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>Object</code>.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>Object</code>.
-   * It is best to use one of the other writeXXX methods if your field type
-   * will always be XXX. This method allows the field value to be anything
-   * that is an instance of Object. This gives you more flexibility but more
-   * space is used to store the serialized field.
+   * It is best to use one of the other writeXXX methods if your field type will always be XXX. This
+   * method allows the field value to be anything that is an instance of Object. This gives you more
+   * flexibility but more space is used to store the serialized field.
-   * Note that some Java objects serialized with this method may not be compatible with non-java languages.
-   * To ensure that only portable objects are serialized use {@link #writeObject(String, Object, boolean)}.
+   * Note that some Java objects serialized with this method may not be compatible with non-java
+   * languages. To ensure that only portable objects are serialized use
+   * {@link #writeObject(String, Object, boolean)}.
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>Object</code>.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>Object</code>.
-   * It is best to use one of the other writeXXX methods if your field type
-   * will always be XXX. This method allows the field value to be anything
-   * that is an instance of Object. This gives you more flexibility but more
-   * space is used to store the serialized field.
+   * It is best to use one of the other writeXXX methods if your field type will always be XXX. This
+   * method allows the field value to be anything that is an instance of Object. This gives you more
+   * flexibility but more space is used to store the serialized field.
-   * Note that some Java objects serialized with this method may not be compatible with non-java languages.
-   * To ensure that only portable objects are serialized set the <code>checkPortability</code> parameter to true.
-   * The following is a list of the Java classes that are portable and the .NET class they are mapped to:
+   * Note that some Java objects serialized with this method may not be compatible with non-java
+   * languages. To ensure that only portable objects are serialized set the
+   * <code>checkPortability</code> parameter to true. The following is a list of the Java classes
+   * that are portable and the .NET class they are mapped to:
-   * @param checkPortability if true then an exception is thrown if a non-portable object is serialized
+   * @param checkPortability if true then an exception is thrown if a non-portable object is
+   *        serialized
-   * @throws NonPortableClassException if checkPortability is true and a non-portable object is serialized
+   * @throws NonPortableClassException if checkPortability is true and a non-portable object is
+   *         serialized
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>boolean[]</code>.
-   * <p>Java boolean[] is mapped to .NET System.Boolean[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>boolean[]</code>.
+   * <p>
+   * Java boolean[] is mapped to .NET System.Boolean[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>char[]</code>.
-   * <p>Java char[] is mapped to .NET System.Char[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>char[]</code>.
+   * <p>
+   * Java char[] is mapped to .NET System.Char[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>byte[]</code>.
-   * <p>Java byte[] is mapped to .NET System.Byte[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>byte[]</code>.
+   * <p>
+   * Java byte[] is mapped to .NET System.Byte[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>short[]</code>.
-   * <p>Java short[] is mapped to .NET System.Int16[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>short[]</code>.
+   * <p>
+   * Java short[] is mapped to .NET System.Int16[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>int[]</code>.
-   * <p>Java int[] is mapped to .NET System.Int32[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>int[]</code>.
+   * <p>
+   * Java int[] is mapped to .NET System.Int32[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>long[]</code>.
-   * <p>Java long[] is mapped to .NET System.Int64[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>long[]</code>.
+   * <p>
+   * Java long[] is mapped to .NET System.Int64[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>float[]</code>.
-   * <p>Java float[] is mapped to .NET System.Float[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>float[]</code>.
+   * <p>
+   * Java float[] is mapped to .NET System.Float[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>double[]</code>.
-   * <p>Java double[] is mapped to .NET System.Double[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>double[]</code>.
+   * <p>
+   * Java double[] is mapped to .NET System.Double[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>String[]</code>.
-   * <p>Java String[] is mapped to .NET System.String[].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>String[]</code>.
+   * <p>
+   * Java String[] is mapped to .NET System.String[].
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>Object[]</code>.
-   * <p>Java Object[] is mapped to .NET System.Collections.Generic.List<Object>.
-   * For how each element of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean) writeObject}.
-   * Note that this call may serialize elements that are not compatible with non-java languages.
-   * To ensure that only portable objects are serialized use {@link #writeObjectArray(String, Object[], boolean)}.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>Object[]</code>.
+   * <p>
+   * Java Object[] is mapped to .NET System.Collections.Generic.List<Object>. For how each element
+   * of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean) writeObject}.
+   * Note that this call may serialize elements that are not compatible with non-java languages. To
+   * ensure that only portable objects are serialized use
+   * {@link #writeObjectArray(String, Object[], boolean)}.
+   * 
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>Object[]</code>.
-   * <p>Java Object[] is mapped to .NET System.Collections.Generic.List<Object>.
-   * For how each element of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean) writeObject}.
-   * Note that this call may serialize elements that are not compatible with non-java languages.
-   * To ensure that only portable objects are serialized use {@link #writeObjectArray(String, Object[], boolean)}.
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>Object[]</code>.
+   * <p>
+   * Java Object[] is mapped to .NET System.Collections.Generic.List<Object>. For how each element
+   * of the array is a mapped to .NET see {@link #writeObject(String, Object, boolean) writeObject}.
+   * Note that this call may serialize elements that are not compatible with non-java languages. To
+   * ensure that only portable objects are serialized use
+   * {@link #writeObjectArray(String, Object[], boolean)}.
+   * 
-   * @param checkPortability if true then an exception is thrown if a non-portable object is serialized
+   * @param checkPortability if true then an exception is thrown if a non-portable object is
+   *        serialized
-   * @throws NonPortableClassException if checkPortability is true and a non-portable element is serialized
+   * @throws NonPortableClassException if checkPortability is true and a non-portable element is
+   *         serialized
+
-   * Writes the named field with the given value to the serialized form.
-   * The fields type is <code>byte[][]</code>.
-   * <p>Java byte[][] is mapped to .NET System.Byte[][].
+   * Writes the named field with the given value to the serialized form. The fields type is
+   * <code>byte[][]</code>.
+   * <p>
+   * Java byte[][] is mapped to .NET System.Byte[][].
+   * 
-   * Writes the named field with the given value and type to the serialized form.
-   * This method uses the <code>fieldType</code> to determine which writeXXX method it should call.
-   * If it can not find a specific match to a writeXXX method it will call {@link #writeObject(String, Object) writeObject}.
-   * This method may serialize objects that are not portable to non-java languages.
-   * To ensure that only objects that are portable to non-java languages are serialized use {@link #writeField(String, Object, Class, boolean)} instead.
-   * <p>The fieldTypes that map to a specific method are:
+   * Writes the named field with the given value and type to the serialized form. This method uses
+   * the <code>fieldType</code> to determine which writeXXX method it should call. If it can not
+   * find a specific match to a writeXXX method it will call {@link #writeObject(String, Object)
+   * writeObject}. This method may serialize objects that are not portable to non-java languages. To
+   * ensure that only objects that are portable to non-java languages are serialized use
+   * {@link #writeField(String, Object, Class, boolean)} instead.
+   * <p>
+   * The fieldTypes that map to a specific method are:
-   * Note that the object form of primitives, for example Integer.class and Long.class, map to {@link #writeObject(String, Object) writeObject}.
+   * Note that the object form of primitives, for example Integer.class and Long.class, map to
+   * {@link #writeObject(String, Object) writeObject}.
+   * 
-   * @param fieldValue the value of the field to write; this parameter's class must extend the <code>fieldType</code>
+   * @param fieldValue the value of the field to write; this parameter's class must extend the
+   *        <code>fieldType</code>
-  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue, Class<CT> fieldType);
+  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue,
+      Class<CT> fieldType);
+
-   * Writes the named field with the given value and type to the serialized form.
-   * This method uses the <code>fieldType</code> to determine which writeXXX method it should call.
-   * If it can not find a specific match to a writeXXX method it will call {@link #writeObject(String, Object, boolean) writeObject}.
-   * To ensure that only objects that are portable to non-java languages are serialized set the <code>checkPortability</code> parameter to true.
-   * <p>The fieldTypes that map to a specific method are:
+   * Writes the named field with the given value and type to the serialized form. This method uses
+   * the <code>fieldType</code> to determine which writeXXX method it should call. If it can not
+   * find a specific match to a writeXXX method it will call
+   * {@link #writeObject(String, Object, boolean) writeObject}. To ensure that only objects that are
+   * portable to non-java languages are serialized set the <code>checkPortability</code> parameter
+   * to true.
+   * <p>
+   * The fieldTypes that map to a specific method are:
-   * Note that the object form of primitives, for example Integer.class and Long.class, map to {@link #writeObject(String, Object, boolean) writeObject}.
+   * Note that the object form of primitives, for example Integer.class and Long.class, map to
+   * {@link #writeObject(String, Object, boolean) writeObject}.
+   * 
-   * @param fieldValue the value of the field to write; this parameter's class must extend the <code>fieldType</code>
+   * @param fieldValue the value of the field to write; this parameter's class must extend the
+   *        <code>fieldType</code>
-   * @param checkPortability if true then an exception is thrown if a non-portable object is serialized
+   * @param checkPortability if true then an exception is thrown if a non-portable object is
+   *        serialized
-   * @throws NonPortableClassException if checkPortability is true and a non-portable object is serialized
+   * @throws NonPortableClassException if checkPortability is true and a non-portable object is
+   *         serialized
-  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue, Class<CT> fieldType, boolean checkPortability);
-  
+  public <CT, VT extends CT> PdxWriter writeField(String fieldName, VT fieldValue,
+      Class<CT> fieldType, boolean checkPortability);
+
-   * Writes the given unread fields to the serialized form.
-   * The unread fields are obtained by calling {@link PdxReader#readUnreadFields() readUnreadFields}.
-   * <p>This method must be called first before any of the writeXXX methods is called.
-   * @param unread the object that was returned from {@link PdxReader#readUnreadFields() readUnreadFields}.
+   * Writes the given unread fields to the serialized form. The unread fields are obtained by
+   * calling {@link PdxReader#readUnreadFields() readUnreadFields}.
+   * <p>
+   * This method must be called first before any of the writeXXX methods is called.
+   * 
+   * @param unread the object that was returned from {@link PdxReader#readUnreadFields()
+   *        readUnreadFields}.
-   * Indicate that the named field should be included in hashCode and equals checks
-   * of this object on a server that is accessing {@link PdxInstance}
-   * or when a client executes a query on a server.
+   * Indicate that the named field should be included in hashCode and equals checks of this object
+   * on a server that is accessing {@link PdxInstance} or when a client executes a query on a
+   * server.
-   * The fields that are marked as identity fields are used to generate the hashCode and
-   * equals methods of {@link PdxInstance}. Because of this, the identity fields should themselves
-   * either be primitives, or implement hashCode and equals.
+   * The fields that are marked as identity fields are used to generate the hashCode and equals
+   * methods of {@link PdxInstance}. Because of this, the identity fields should themselves either
+   * be primitives, or implement hashCode and equals.
