GEODE-2644: Cleanup logging classes

+import org.apache.geode.LogWriter;
+ *
+ * @deprecated Please use Log4J2 instead.
-  // Constants
-  protected static final int SECURITY_LOGGING_FLAG = 0x40000000;
+  private static final int SECURITY_LOGGING_FLAG = 0x40000000;
-  // Constructors
+  private final DateFormat timeFormatter;
+
-    this.timeFormatter = DateFormatter.createDateFormat();
+    timeFormatter = DateFormatter.createDateFormat();
+  @Override
+  @Override
-    StringBuffer b = new StringBuffer(64);
+    StringBuilder sb = new StringBuilder(64);
-        b.append('|');
+        sb.append('|');
-      b.append(levelNames[i]);
+      sb.append(levelNames[i]);
-    return b.toString();
+    return sb.toString();
-      return "level-" + String.valueOf(levelWithFlags);
+      return "level-" + levelWithFlags;
-  public static String join(Object[] a) {
-    return join(a, " ");
+  public static String join(Object[] array) {
+    return join(array, " ");
-  public static String join(Object[] a, String joinString) {
-    return join(Arrays.asList(a), joinString);
+  public static String join(Object[] array, String joinString) {
+    return join(Arrays.asList(array), joinString);
-  public static String join(List l) {
-    return join(l, " ");
+  public static String join(List<?> list) {
+    return join(list, " ");
-  public static String join(List l, String joinString) {
-    StringBuffer result = new StringBuffer(80);
+  public static String join(List<?> list, String joinString) {
+    StringBuilder result = new StringBuilder(80);
-    Iterator it = l.iterator();
+    Iterator it = list.iterator();
-   * @deprecated
-    } catch (NumberFormatException ignore) {
-    } catch (NullPointerException ignore) {
+    } catch (NullPointerException | NumberFormatException ignore) {
+      // ignored
-   * @param d a Date to format as a timestamp String.
+   * @param date a Date to format as a timestamp String.
-  protected String formatDate(Date d) {
+  protected String formatDate(Date date) {
-        return timeFormatter.format(d);
+        return timeFormatter.format(date);
-        return d.toString();
+        return date.toString();
-          return Long.toString(d.getTime());
+          return Long.toString(date.getTime());
-  // Implementation of LogWriterI18n interface
+  @Override
-  public void severe(String msg, Throwable ex) {
-    if (this.severeEnabled()) {
-      this.put(SEVERE_LEVEL, msg, ex);
+  @Override
+  public void severe(String message, Throwable throwable) {
+    if (severeEnabled()) {
+      put(SEVERE_LEVEL, message, throwable);
-  public void severe(String msg) {
-    this.severe(msg, null);
+  @Override
+  public void severe(String message) {
+    severe(message, null);
-  public void severe(Throwable ex) {
-    this.severe(LocalizedStrings.EMPTY, ex);
+  @Override
+  public void severe(Throwable throwable) {
+    severe(LocalizedStrings.EMPTY, throwable);
-  public void severe(StringId msgID, Object[] params, Throwable ex) {
-    if (this.severeEnabled()) {
-      this.put(SEVERE_LEVEL, msgID, params, ex);
+  @Override
+  public void severe(StringId messageId, Object[] parameters, Throwable throwable) {
+    if (severeEnabled()) {
+      put(SEVERE_LEVEL, messageId, parameters, throwable);
-  public void severe(StringId msgID, Object param, Throwable ex) {
-    if (this.severeEnabled()) {
-      this.put(SEVERE_LEVEL, msgID, new Object[] {param}, ex);
+  @Override
+  public void severe(StringId messageId, Object parameter, Throwable throwable) {
+    if (severeEnabled()) {
+      put(SEVERE_LEVEL, messageId, new Object[] {parameter}, throwable);
-  public void severe(StringId msgID, Throwable ex) {
-    severe(msgID, null, ex);
+  @Override
+  public void severe(StringId messageId, Throwable throwable) {
+    severe(messageId, null, throwable);
-  public void severe(StringId msgID, Object[] params) {
-    severe(msgID, params, null);
+  @Override
+  public void severe(StringId messageId, Object[] parameters) {
+    severe(messageId, parameters, null);
-  public void severe(StringId msgID, Object param) {
-    severe(msgID, param, null);
+  @Override
+  public void severe(StringId messageId, Object parameter) {
+    severe(messageId, parameter, null);
-  public void severe(StringId msgID) {
-    severe(msgID, null, null);
+  @Override
+  public void severe(StringId messageId) {
+    severe(messageId, null, null);
+  @Override
-  public void error(String msg, Throwable ex) {
-    if (this.errorEnabled()) {
-      this.put(ERROR_LEVEL, msg, ex);
+  @Override
+  public void error(String message, Throwable throwable) {
+    if (errorEnabled()) {
+      put(ERROR_LEVEL, message, throwable);
-  public void error(String msg) {
-    this.error(msg, null);
+  @Override
+  public void error(String message) {
+    error(message, null);
-  public void error(Throwable ex) {
-    this.error(LocalizedStrings.EMPTY, ex);
+  @Override
+  public void error(Throwable throwable) {
+    error(LocalizedStrings.EMPTY, throwable);
-  public void error(StringId msgID, Object[] params, Throwable ex) {
-    if (this.errorEnabled()) {
-      this.put(ERROR_LEVEL, msgID, params, ex);
+  @Override
+  public void error(StringId messageId, Object[] parameters, Throwable throwable) {
+    if (errorEnabled()) {
+      put(ERROR_LEVEL, messageId, parameters, throwable);
-  public void error(StringId msgID, Object param, Throwable ex) {
-    if (this.errorEnabled()) {
-      this.put(ERROR_LEVEL, msgID, new Object[] {param}, ex);
+  @Override
+  public void error(StringId messageId, Object parameter, Throwable throwable) {
+    if (errorEnabled()) {
+      put(ERROR_LEVEL, messageId, new Object[] {parameter}, throwable);
-  public void error(StringId msgID, Throwable ex) {
-    error(msgID, null, ex);
+  @Override
+  public void error(StringId messageId, Throwable throwable) {
+    error(messageId, null, throwable);
-  public void error(StringId msgID, Object[] params) {
-    error(msgID, params, null);
+  @Override
+  public void error(StringId messageId, Object[] parameters) {
+    error(messageId, parameters, null);
-  public void error(StringId msgID, Object param) {
-    error(msgID, param, null);
+  @Override
+  public void error(StringId messageId, Object parameter) {
+    error(messageId, parameter, null);
-  public void error(StringId msgID) {
-    error(msgID, null, null);
+  @Override
+  public void error(StringId messageId) {
+    error(messageId, null, null);
+  @Override
-  public void warning(String msg, Throwable ex) {
-    if (this.warningEnabled()) {
-      this.put(WARNING_LEVEL, msg, ex);
+  @Override
+  public void warning(String message, Throwable throwable) {
+    if (warningEnabled()) {
+      put(WARNING_LEVEL, message, throwable);
-  public void warning(String msg) {
-    this.warning(msg, null);
+  @Override
+  public void warning(String message) {
+    warning(message, null);
-  public void warning(Throwable ex) {
-    this.warning(LocalizedStrings.EMPTY, ex);
+  @Override
+  public void warning(Throwable throwable) {
+    warning(LocalizedStrings.EMPTY, throwable);
-  public void warning(StringId msgID, Object[] params, Throwable ex) {
-    if (this.warningEnabled()) {
-      this.put(WARNING_LEVEL, msgID, params, ex);
+  @Override
+  public void warning(StringId messageId, Object[] parameters, Throwable throwable) {
+    if (warningEnabled()) {
+      put(WARNING_LEVEL, messageId, parameters, throwable);
-  public void warning(StringId msgID, Object param, Throwable ex) {
-    if (this.warningEnabled()) {
-      this.put(WARNING_LEVEL, msgID, new Object[] {param}, ex);
+  @Override
+  public void warning(StringId messageId, Object parameter, Throwable throwable) {
+    if (warningEnabled()) {
+      put(WARNING_LEVEL, messageId, new Object[] {parameter}, throwable);
-  public void warning(StringId msgID, Throwable ex) {
-    warning(msgID, null, ex);
+  @Override
+  public void warning(StringId messageId, Throwable throwable) {
+    warning(messageId, null, throwable);
-  public void warning(StringId msgID, Object[] params) {
-    warning(msgID, params, null);
+  @Override
+  public void warning(StringId messageId, Object[] parameters) {
+    warning(messageId, parameters, null);
-  public void warning(StringId msgID, Object param) {
-    warning(msgID, param, null);
+  @Override
+  public void warning(StringId messageId, Object parameter) {
+    warning(messageId, parameter, null);
-  public void warning(StringId msgID) {
-    warning(msgID, null, null);
+  @Override
+  public void warning(StringId messageId) {
+    warning(messageId, null, null);
+  @Override
-    return getLogWriterLevel() <= INFO_LEVEL
-    /* (bug 29581) && !SmHelper._memorySpaceLow() */;
+    return getLogWriterLevel() <= INFO_LEVEL;
-  public void info(String msg, Throwable ex) {
-    if (this.infoEnabled()) {
-      this.put(INFO_LEVEL, msg, ex);
+  @Override
+  public void info(String message, Throwable throwable) {
+    if (infoEnabled()) {
+      put(INFO_LEVEL, message, throwable);
-  public void info(String msg) {
-    this.info(msg, null);
+  @Override
+  public void info(String message) {
+    info(message, null);
-  public void info(Throwable ex) {
-    this.info(LocalizedStrings.EMPTY, ex);
+  @Override
+  public void info(Throwable throwable) {
+    info(LocalizedStrings.EMPTY, throwable);
-  public void info(StringId msgID, Object[] params, Throwable ex) {
-    if (this.infoEnabled()) {
-      this.put(INFO_LEVEL, msgID, params, ex);
+  @Override
+  public void info(StringId messageId, Object[] parameters, Throwable throwable) {
+    if (infoEnabled()) {
+      put(INFO_LEVEL, messageId, parameters, throwable);
-  public void info(StringId msgID, Object param, Throwable ex) {
-    if (this.infoEnabled()) {
-      this.put(INFO_LEVEL, msgID, new Object[] {param}, ex);
+  @Override
+  public void info(StringId messageId, Object parameter, Throwable throwable) {
+    if (infoEnabled()) {
+      put(INFO_LEVEL, messageId, new Object[] {parameter}, throwable);
-  public void info(StringId msgID, Throwable ex) {
-    info(msgID, null, ex);
+  @Override
+  public void info(StringId messageId, Throwable throwable) {
+    info(messageId, null, throwable);
-  public void info(StringId msgID, Object[] params) {
-    info(msgID, params, null);
+  @Override
+  public void info(StringId messageId, Object[] parameters) {
+    info(messageId, parameters, null);
-  public void info(StringId msgID, Object param) {
-    info(msgID, param, null);
+  @Override
+  public void info(StringId messageId, Object parameter) {
+    info(messageId, parameter, null);
-  public void info(StringId msgID) {
-    info(msgID, null, null);
+  @Override
+  public void info(StringId messageId) {
+    info(messageId, null, null);
+  @Override
-  public void config(String msg, Throwable ex) {
-    if (this.configEnabled()) {
-      this.put(CONFIG_LEVEL, msg, ex);
+  @Override
+  public void config(String message, Throwable throwable) {
+    if (configEnabled()) {
+      put(CONFIG_LEVEL, message, throwable);
-  public void config(String msg) {
-    this.config(msg, null);
+  @Override
+  public void config(String message) {
+    config(message, null);
-  public void config(Throwable ex) {
-    this.config(LocalizedStrings.EMPTY, ex);
+  @Override
+  public void config(Throwable throwable) {
+    config(LocalizedStrings.EMPTY, throwable);
-  public void config(StringId msgID, Object[] params, Throwable ex) {
-    if (this.configEnabled()) {
-      this.put(CONFIG_LEVEL, msgID, params, ex);
+  @Override
+  public void config(StringId messageId, Object[] parameters, Throwable throwable) {
+    if (configEnabled()) {
+      put(CONFIG_LEVEL, messageId, parameters, throwable);
-  public void config(StringId msgID, Object param, Throwable ex) {
-    if (this.configEnabled()) {
-      this.put(CONFIG_LEVEL, msgID, new Object[] {param}, ex);
+  @Override
+  public void config(StringId messageId, Object parameter, Throwable throwable) {
+    if (configEnabled()) {
+      put(CONFIG_LEVEL, messageId, new Object[] {parameter}, throwable);
-  public void config(StringId msgID, Throwable ex) {
-    config(msgID, null, ex);
+  @Override
+  public void config(StringId messageId, Throwable throwable) {
+    config(messageId, null, throwable);
-  public void config(StringId msgID, Object[] params) {
-    config(msgID, params, null);
+  @Override
+  public void config(StringId messageId, Object[] parameters) {
+    config(messageId, parameters, null);
-  public void config(StringId msgID, Object param) {
-    config(msgID, param, null);
+  @Override
+  public void config(StringId messageId, Object parameter) {
+    config(messageId, parameter, null);
-  public void config(StringId msgID) {
-    config(msgID, null, null);
+  @Override
+  public void config(StringId messageId) {
+    config(messageId, null, null);
+  @Override
-    return getLogWriterLevel() <= FINE_LEVEL
-    /* (bug 29581) && !SmHelper._memorySpaceLow() */;
+    return getLogWriterLevel() <= FINE_LEVEL;
-  public void fine(String msg, Throwable ex) {
-    if (this.fineEnabled()) {
-      this.put(FINE_LEVEL, msg, ex);
+  @Override
+  public void fine(String message, Throwable throwable) {
+    if (fineEnabled()) {
+      put(FINE_LEVEL, message, throwable);
-  public void fine(String msg) {
-    this.fine(msg, null);
+  @Override
+  public void fine(String message) {
+    fine(message, null);
-  public void fine(Throwable ex) {
-    this.fine(null, ex);
+  @Override
+  public void fine(Throwable throwable) {
+    fine(null, throwable);
+  @Override
-    return getLogWriterLevel() <= FINER_LEVEL
-    /* (bug 29581) && !SmHelper._memorySpaceLow() */;
+    return getLogWriterLevel() <= FINER_LEVEL;
-  public void finer(String msg, Throwable ex) {
-    if (this.finerEnabled()) {
-      this.put(FINER_LEVEL, msg, ex);
+  @Override
+  public void finer(String message, Throwable throwable) {
+    if (finerEnabled()) {
+      put(FINER_LEVEL, message, throwable);
-  public void finer(String msg) {
-    this.finer(msg, null);
+  @Override
+  public void finer(String message) {
+    finer(message, null);
-  public void finer(Throwable ex) {
-    this.finer(null, ex);
+  @Override
+  public void finer(Throwable throwable) {
+    finer(null, throwable);
+  @Override
-    if (this.finerEnabled()) {
-      this.finer("ENTRY " + sourceClass + ":" + sourceMethod);
+    if (finerEnabled()) {
+      finer("ENTRY " + sourceClass + ":" + sourceMethod);
+  @Override
-    if (this.finerEnabled()) {
-      this.finer("RETURN " + sourceClass + ":" + sourceMethod);
+    if (finerEnabled()) {
+      finer("RETURN " + sourceClass + ":" + sourceMethod);
+  @Override
-    if (this.finerEnabled()) {
-      this.finer("THROW " + sourceClass + ":" + sourceMethod, thrown);
+    if (finerEnabled()) {
+      finer("THROW " + sourceClass + ":" + sourceMethod, thrown);
+  @Override
-    return getLogWriterLevel() <= FINEST_LEVEL
-    /* (bug 29581) && !SmHelper._memorySpaceLow() */;
+    return getLogWriterLevel() <= FINEST_LEVEL;
-  public void finest(String msg, Throwable ex) {
-    if (this.finestEnabled()) {
-      this.put(FINEST_LEVEL, msg, ex);
+  @Override
+  public void finest(String message, Throwable throwable) {
+    if (finestEnabled()) {
+      put(FINEST_LEVEL, message, throwable);
-  public void finest(String msg) {
-    this.finest(msg, null);
+  @Override
+  public void finest(String message) {
+    finest(message, null);
-  public void finest(Throwable ex) {
-    this.finest(null, ex);
+  @Override
+  public void finest(Throwable throwable) {
+    finest(null, throwable);
-    if (this.infoEnabled()) {
-      this.put(INFO_LEVEL, message, null);
+    if (infoEnabled()) {
+      put(INFO_LEVEL, message, null);
-  // internal implemenation methods
-   * @param msgLevel the level code for the message to log
-   * @param msg the actual message to log
-   * @param exception the actual Exception to log
+   * @param messageLevel the level code for the message to log
+   * @param message the actual message to log
+   * @param throwable the actual Exception to log
-  public abstract void put(int msgLevel, String msg, Throwable exception);
+  @Override
+  public abstract void put(int messageLevel, String message, Throwable throwable);
-   * @param msgLevel the level code for the message to log
-   * @param msgId A locale agnostic form of the message
-   * @param params the Object arguments to plug into the message
-   * @param exception the actual Exception to log
+   * @param messageLevel the level code for the message to log
+   * @param messageId A locale agnostic form of the message
+   * @param parameters the Object arguments to plug into the message
+   * @param throwable the actual Exception to log
-  public abstract void put(int msgLevel, StringId msgId, Object[] params, Throwable exception);
+  @Override
+  public abstract void put(int messageLevel, StringId messageId, Object[] parameters,
+      Throwable throwable);
-  public boolean isLoggable(int level) {
+  private boolean isLoggable(int level) {
-      this.put(level, message, thrown);
+      put(level, message, thrown);
-      this.put(level, message, null);
+      put(level, message, null);
+  @Override
-  public static String getStackTrace(Throwable aThrowable) {
+  public static String getStackTrace(Throwable throwable) {
-    aThrowable.printStackTrace(new PrintWriter(sw, true));
+    throwable.printStackTrace(new PrintWriter(sw, true));
-            StringBuffer sb = new StringBuffer(500);
+            StringBuilder sb = new StringBuilder(500);
-            sb.append("Stack trace for '").append(targetThread.toString()).append("'\n");
+            sb.append("Stack trace for '").append(targetThread).append("'\n");
-                sb.append("\tat ").append(els[i].toString()).append("\n");
+                sb.append("\tat ").append(els[i]).append("\n");
-              System.out.println(sb.toString());
+              System.out.println(sb);
-  public static StringBuffer getStackTrace(Thread targetThread) {
-    StringBuffer sb = new StringBuffer(500);
+  public static StringBuilder getStackTrace(Thread targetThread) {
+    StringBuilder sb = new StringBuilder(500);
-    sb.append("Stack trace for '").append(targetThread.toString()).append("'\n");
+    sb.append("Stack trace for '").append(targetThread).append("'\n");
-        sb.append("\tat ").append(els[i].toString()).append("\n");
+        sb.append("\tat ").append(els[i]).append("\n");
-
-  // instance variables
-  private final DateFormat timeFormatter;
-
-  /*
-   * @see org.apache.geode.LogWriter
-   *
-   * @since GemFire 6.0
-   */
-  public org.apache.geode.LogWriter convertToLogWriter() {
+  @Override
+  public LogWriter convertToLogWriter() {
-  /*
-   * @see org.apache.geode.LogWriterI18n
-   *
-   * @since GemFire 6.0
-   */
+  @Override
-    LogWriterImpl.startupListener = mainListener;
+    startupListener = mainListener;
-    return LogWriterImpl.startupListener;
+    return startupListener;
