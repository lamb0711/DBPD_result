GEODE-420: Added SSLEnabledComponents.java

+import org.apache.commons.lang.StringUtils;
+
+import com.gemstone.gemfire.distributed.SSLEnabledComponents;
-      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_CAN_NOT_BE_LESS_THAN_2.
-                                                                                                                                                    toLocalizedString(new Object[] {
-                                                                                                                                                      MEMBERSHIP_PORT_RANGE,
-                                                                                                                                                      value[0] + "-" + value[1],
-                                                                                                                                                      Integer.valueOf(3)
-                                                                                                                                                    }));
+      throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_COULD_NOT_SET_0_TO_1_BECAUSE_ITS_VALUE_CAN_NOT_BE_LESS_THAN_2.toLocalizedString(new Object[] {
+        MEMBERSHIP_PORT_RANGE, value[0] + "-" + value[1], Integer.valueOf(3)
+      }));
+  /**
+   * First check if sslComponents are in the list of valid components. If so, check that no other *-ssl-* properties other than cluster-ssl-* are set.
+   * This would mean one is mixing the "old" with the "new"
+   */
+  @ConfigAttributeChecker(name = SSL_ENABLED_COMPONENTS)
+  protected String checkLegacySSLWhenSSLEnabledComponentsSet(String value) {
+    if (value != null && value.length() > 0) {
+      String[] components = value.split(",");
+      for (String component : components) {
+        switch (component) {
+          case SSLEnabledComponents.ALL:
+          case SSLEnabledComponents.CLUSTER:
+          case SSLEnabledComponents.SERVER:
+          case SSLEnabledComponents.GATEWAY:
+          case SSLEnabledComponents.JMX:
+          case SSLEnabledComponents.HTTP_SERVICE:
+            continue;
+          default:
+            throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_SSL_ENABLED_COMPONENTS_0_INVALID_TRY_1.toLocalizedString(new Object[] {
+              value, StringUtils.join(new String[] {
+              SSLEnabledComponents.ALL,
+              SSLEnabledComponents.CLUSTER,
+              SSLEnabledComponents.SERVER,
+              SSLEnabledComponents.GATEWAY,
+              SSLEnabledComponents.JMX,
+              SSLEnabledComponents.HTTP_SERVICE
+            }, ",")
+            }));
+        }
+      }
+      if(getJmxManagerSSLEnabled() || getHttpServiceSSLEnabled() || getServerSSLEnabled() || getGatewaySSLEnabled())
+      {
+        throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_SSL_ENABLED_COMPONENTS_SET_INVALID_DEPRECATED_SSL_SET
+          .toLocalizedString());
+      }
+    }
+    return value;
+  }
+
+    m.put(SSL_ENABLED_COMPONENTS,"A comma delimited list of components that require SSL communications");
+
