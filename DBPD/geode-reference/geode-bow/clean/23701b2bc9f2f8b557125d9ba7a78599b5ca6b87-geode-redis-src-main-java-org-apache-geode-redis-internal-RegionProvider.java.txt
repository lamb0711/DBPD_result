GEODE-7869: Cleanup warnings in geode-redis

-  private final ConcurrentHashMap<ByteArrayWrapper, Region<?, ?>> regions;
+  private final ConcurrentHashMap<ByteArrayWrapper, Region<Object, Object>> regions;
+  @SuppressWarnings("deprecation")
-    this.regions = new ConcurrentHashMap<>();
+    regions = new ConcurrentHashMap<>();
-    this.keyRegistrar = redisMetaRegion;
+    keyRegistrar = redisMetaRegion;
-    this.queryService = cache.getQueryService();
+    queryService = cache.getQueryService();
-    this.defaultRegionType = defaultShortcut;
-    this.locks = new ConcurrentHashMap<>();
+    defaultRegionType = defaultShortcut;
+    locks = new ConcurrentHashMap<>();
-    return this.regions.get(key);
+    return regions.get(key);
-  public Region<ByteArrayWrapper, ? extends Object> getRegionForType(RedisDataType redisDataType) {
+  public Region<ByteArrayWrapper, ?> getRegionForType(RedisDataType redisDataType) {
-    Lock lock = this.locks.get(key.toString());
+    Lock lock = locks.get(key.toString());
-    RedisDataType type = this.keyRegistrar.getType(key);
+    RedisDataType type = keyRegistrar.getType(key);
-    Lock lock = this.locks.get(key.toString());
+    Lock lock = locks.get(key.toString());
-      this.keyRegistrar.unregister(key);
+      keyRegistrar.unregister(key);
-          return this.stringsRegion.remove(key) != null;
+          return stringsRegion.remove(key) != null;
-          return this.hLLRegion.remove(key) != null;
+          return hLLRegion.remove(key) != null;
-          return this.destroyRegion(key, type);
+          return destroyRegion(key, type);
-          this.setRegion.remove(key);
+          setRegion.remove(key);
-          this.hashRegion.remove(key);
+          hashRegion.remove(key);
-          this.locks.remove(key.toString());
+          locks.remove(key.toString());
-    Region<?, ?> r = this.regions.get(key);
+    Region<Object, Object> r = regions.get(key);
-    if (!this.regions.containsKey(key)) {
+    if (!regions.containsKey(key)) {
-      Lock lock = this.locks.get(stringKey);
+      Lock lock = locks.get(stringKey);
-        this.locks.putIfAbsent(stringKey, new ReentrantLock());
-        lock = this.locks.get(stringKey);
+        locks.putIfAbsent(stringKey, new ReentrantLock());
+        lock = locks.get(stringKey);
-          this.regions.put(key, r);
+          regions.put(key, r);
-    this.keyRegistrar.validate(key, type);
-    Region<?, ?> r = this.regions.get(key);
+    keyRegistrar.validate(key, type);
+    Region<Object, Object> r = regions.get(key);
-      Lock lock = this.locks.get(stringKey);
+      Lock lock = locks.get(stringKey);
-        this.locks.putIfAbsent(stringKey, new ReentrantLock());
-        lock = this.locks.get(stringKey);
+        locks.putIfAbsent(stringKey, new ReentrantLock());
+        lock = locks.get(stringKey);
-            Exception concurrentCreateDestroyException = null;
+            Exception concurrentCreateDestroyException;
-            this.regions.put(key, r);
+            regions.put(key, r);
-              this.keyRegistrar.register(key, type);
+              keyRegistrar.register(key, type);
-    Region<?, ?> r = this.regions.get(key);
+    Region<?, ?> r = regions.get(key);
-    this.preparedQueries.remove(key);
-    this.regions.remove(key);
+    preparedQueries.remove(key);
+    regions.remove(key);
-      Query query = this.queryService.newQuery(queryString);
+      Query query = queryService.newQuery(queryString);
-    this.preparedQueries.put(key, queryList);
+    preparedQueries.put(key, queryList);
-  @SuppressWarnings("rawtypes")
-  private void doInitializeList(ByteArrayWrapper key, Region r) {
+  private void doInitializeList(ByteArrayWrapper key, Region<Object, Object> r) {
-      Query query = this.queryService.newQuery(queryString);
+      Query query = queryService.newQuery(queryString);
-    this.preparedQueries.put(key, queryList);
+    preparedQueries.put(key, queryList);
-  private Region<?, ?> createRegionGlobally(String regionPath) {
-    Region<?, ?> r = null;
+  private Region<Object, Object> createRegionGlobally(String regionPath) {
+    Region<Object, Object> r;
-    return this.preparedQueries.get(key).get(query);
+    return preparedQueries.get(key).get(query);
-    return this.regions.containsKey(key);
+    return regions.containsKey(key);
-    return this.stringsRegion;
+    return stringsRegion;
-    return this.hLLRegion;
+    return hLLRegion;
-    RedisDataType type = this.keyRegistrar.getType(key);
+    RedisDataType type = keyRegistrar.getType(key);
-    ScheduledFuture<?> future = this.expirationExecutor
+    ScheduledFuture<?> future = expirationExecutor
-    this.expirationsMap.put(key, future);
+    expirationsMap.put(key, future);
-    RedisDataType type = this.keyRegistrar.getType(key);
+    RedisDataType type = keyRegistrar.getType(key);
-    ScheduledFuture<?> future = this.expirationExecutor
+    ScheduledFuture<?> future = expirationExecutor
-    this.expirationsMap.put(key, future);
+    expirationsMap.put(key, future);
-    return this.expirationsMap.containsKey(key);
+    return expirationsMap.containsKey(key);
-    ScheduledFuture<?> future = this.expirationsMap.get(key);
+    ScheduledFuture<?> future = expirationsMap.get(key);
-    this.preparedQueries.clear();
+    preparedQueries.clear();
-    for (Entry<ByteArrayWrapper, Region<?, ?>> e : this.regions.entrySet()) {
-      builder.append(e.getKey() + " --> {" + e.getValue() + "}\n");
+    for (Entry<ByteArrayWrapper, Region<Object, Object>> e : regions.entrySet()) {
+      builder.append(e.getKey()).append(" --> {").append(e.getValue()).append("}\n");
