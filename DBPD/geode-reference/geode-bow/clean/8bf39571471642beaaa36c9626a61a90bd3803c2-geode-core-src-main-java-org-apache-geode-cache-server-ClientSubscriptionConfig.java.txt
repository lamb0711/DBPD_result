Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <LI>
- * For eviction-policy <b>none</b> client queue entries are not evicted to disk <br></LI>
+ * <LI>For eviction-policy <b>none</b> client queue entries are not evicted to disk <br>
+ * </LI>
- * <LI>For eviction-policy <b>entry</b> HA entries are evicted to disk when limit is
- * reached, defined by <b>capacity</b></LI>
+ * <LI>For eviction-policy <b>entry</b> HA entries are evicted to disk when limit is reached,
+ * defined by <b>capacity</b></LI>
- * The capacity limits the total amount of memory or entries for all client queues
- * on held on this server. If this server hosts multiple client queues, they will
- * all share the same capacity.
+ * The capacity limits the total amount of memory or entries for all client queues on held on this
+ * server. If this server hosts multiple client queues, they will all share the same capacity.
- * The <code>client queue</code> is configurable declaratively or
- * programmatically. Declarative configuration is achieved through defining the
- * configuration parameters in a <code>cache.xml</code> file. Programmatic
- * configuration may be achieved by first instantiating a
- * <code>CacheServer</code> object and get {@link CacheServer#getClientSubscriptionConfig} 
+ * The <code>client queue</code> is configurable declaratively or programmatically. Declarative
+ * configuration is achieved through defining the configuration parameters in a
+ * <code>cache.xml</code> file. Programmatic configuration may be achieved by first instantiating a
+ * <code>CacheServer</code> object and get {@link CacheServer#getClientSubscriptionConfig}
- * If you are using a <code>cache.xml</code> file to create a
- * <code>CacheServer</code> declaratively, you can do the following to configure
- * <code>ClientSubscriptionConfig</code> and to have <b>none</b> eviction policy 
- * no need to specify client-subscription tag as it is a default one.
- *</p>
+ * If you are using a <code>cache.xml</code> file to create a <code>CacheServer</code>
+ * declaratively, you can do the following to configure <code>ClientSubscriptionConfig</code> and to
+ * have <b>none</b> eviction policy no need to specify client-subscription tag as it is a default
+ * one.
+ * </p>
- *<pre>
+ * <pre>
- *</pre>
+ * </pre>
+ * 
-  
+
-  
+
-  
+
-  
+
-   * Returns the capacity of the client queue.
-   * will be in MB for eviction-policy <b>mem</b> else
+   * Returns the capacity of the client queue. will be in MB for eviction-policy <b>mem</b> else
+   * 
-   * Sets the capacity of the client queue.
-   * will be in MB for eviction-policy <b>mem</b> else
-   * number of entries
+   * Sets the capacity of the client queue. will be in MB for eviction-policy <b>mem</b> else number
+   * of entries
+   * 
+   * 
+   * 
-   * Sets the overflow directory for a client queue 
+   * Sets the overflow directory for a client queue
+   * 
-   * Answers the overflow directory for a client queue's
-   * overflowed client queue entries.
-   * @return the overflow directory for a client queue's
-   * overflowed entries
+   * Answers the overflow directory for a client queue's overflowed client queue entries.
+   * 
+   * @return the overflow directory for a client queue's overflowed entries
+
-   * Sets the disk store name for overflow  
-   * @param diskStoreName 
+   * Sets the disk store name for overflow
+   * 
+   * @param diskStoreName
+   * 
