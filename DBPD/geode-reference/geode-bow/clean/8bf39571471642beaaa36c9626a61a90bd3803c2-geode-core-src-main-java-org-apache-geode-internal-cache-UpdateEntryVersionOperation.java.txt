Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This operation updates Version stamp of an entry if entry is available and
- * entry version stamp has same DSID as in event's version tag.
+ * This operation updates Version stamp of an entry if entry is available and entry version stamp
+ * has same DSID as in event's version tag.
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    UpdateEntryVersionMessage imsg = (UpdateEntryVersionMessage)msg;
+    UpdateEntryVersionMessage imsg = (UpdateEntryVersionMessage) msg;
-    protected EntryEventImpl event = null;    
+    protected EntryEventImpl event = null;
-    public UpdateEntryVersionMessage() {
-    }
+    public UpdateEntryVersionMessage() {}
-    protected InternalCacheEvent createEvent(DistributedRegion rgn)
-        throws EntryNotFoundException {
-      @Retained EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key,
-         null /* newValue */, this.callbackArg /*callbackArg*/, true /* originRemote*/ , getSender(), false /*generateCallbacks*/);
+    protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {
+      @Retained
+      EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key, null /* newValue */,
+          this.callbackArg /* callbackArg */, true /* originRemote */ , getSender(),
+          false /* generateCallbacks */);
-      
+
-      return Collections.singletonList(new QueuedOperation(getOperation(),
-          this.key, null, null, DistributedCacheOperation
-              .DESERIALIZATION_POLICY_NONE, this.callbackArg));
+      return Collections.singletonList(new QueuedOperation(getOperation(), this.key, null, null,
+          DistributedCacheOperation.DESERIALIZATION_POLICY_NONE, this.callbackArg));
-      EntryEventImpl ev = (EntryEventImpl)event;
-      DistributedRegion rgn = (DistributedRegion)ev.region;
+      EntryEventImpl ev = (EntryEventImpl) event;
+      DistributedRegion rgn = (DistributedRegion) ev.region;
-          logger.trace("UpdateEntryVersionMessage.operationOnRegion; ConcurrentCacheModificationException occured for key={}", ev.getKey());
+          logger.trace(
+              "UpdateEntryVersionMessage.operationOnRegion; ConcurrentCacheModificationException occured for key={}",
+              ev.getKey());
-        throw new Error(LocalizedStrings.UpdateVersionOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED.toLocalizedString(), e);
+        throw new Error(LocalizedStrings.UpdateVersionOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED
+            .toLocalizedString(), e);
-        throw new Error(LocalizedStrings.UpdateVersionOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED.toLocalizedString(), e);
+        throw new Error(
+            LocalizedStrings.UpdateVersionOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED
+                .toLocalizedString(),
+            e);
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.eventId = (EventID)DataSerializer.readObject(in);
+      this.eventId = (EventID) DataSerializer.readObject(in);
-      if(hasTailKey.booleanValue()){
+      if (hasTailKey.booleanValue()) {
-      
-      DistributedRegion region = (DistributedRegion)this.event.getRegion();
+
+      DistributedRegion region = (DistributedRegion) this.event.getRegion();
-        }else {
+        } else {
-      }
-      else if(((LocalRegion)region).isUsedForSerialGatewaySenderQueue()){
+      } else if (((LocalRegion) region).isUsedForSerialGatewaySenderQueue()) {
-      }
-      else{
+      } else {
