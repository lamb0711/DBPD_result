Merge branch 'release/1.0.0-incubating.M3'

+import org.apache.commons.lang.StringUtils;
+import org.json.JSONArray;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-import org.json.JSONArray;
-      }      
-      
-      Object returnValue = region.put(keyObject,valueObject);
+      }
+      Object returnValue;
+      if (putIfAbsent && region.containsKey(keyObject))
+        returnValue = region.get(keyObject);
+      else
+        returnValue = region.put(keyObject,valueObject);
+
+        // authorize data read on these regions
+        for(String region:regions){
+          GeodeSecurityUtil.authorizeRegionRead(region);
+        }
+
+
+            // post process, iterate through the result for post processing
+            if(GeodeSecurityUtil.needPostProcess()) {
+              List<SelectResultRow> rows = dataResult.getSelectResult();
+              for (Iterator<SelectResultRow> itr = rows.iterator(); itr.hasNext(); ) {
+                SelectResultRow row = itr.next();
+                Object newValue = GeodeSecurityUtil.postProcess(null, null, row.getValue());
+                // user is not supposed to see this row
+                if (newValue == null) {
+                  itr.remove();
+                } else {
+                  row.setValue(newValue);
+                }
+              }
+            }
+
-      boolean containsLimitOrAggregate = query.contains(" limit")
-          || query.contains(" LIMIT") || query.contains("count(*)");
-      if(!containsLimitOrAggregate){
-        String limitQuery = query + " limit " + getFetchSize();
-        return limitQuery;
-      }
-      else  return query;
+      if (StringUtils.containsIgnoreCase(query, " limit") || StringUtils.containsIgnoreCase(query, " count("))
+        return query;
+      return query + " limit " + getFetchSize();
