Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A log writer that logs all types of log messages as a warning.
- * Intended usage was for individual classes that had their
- * own logger reference and switched it for debugging purposes.
- * e.g.
- *  <pre>
- *  Foo() { // constructor for class Foo
- *    if (Boolean.getBoolean(getClass().getName() + "-logging")) {
- *      this.logger = new DebugLogWriter((LogWriterImpl) getCache().getLogger(), getClass());
- *    } else {
- *      this.logger = pr.getCache().getLogger();
- *    }
- *  }
- *  </pre>
+ * A log writer that logs all types of log messages as a warning. Intended usage was for individual
+ * classes that had their own logger reference and switched it for debugging purposes. e.g.
+ * 
+ * <pre>
+ * Foo() { // constructor for class Foo
+ *   if (Boolean.getBoolean(getClass().getName() + "-logging")) {
+ *     this.logger = new DebugLogWriter((LogWriterImpl) getCache().getLogger(), getClass());
+ *   } else {
+ *     this.logger = pr.getCache().getLogger();
+ *   }
+ * }
+ * </pre>
-final public class DebugLogWriter extends LogWriterImpl
-{
+final public class DebugLogWriter extends LogWriterImpl {
+
-//    this.realLogWriter.config(LocalizedStrings.DebugLogWriter_STARTED_USING_CLASS_LOGGER_FOR__0, getClass().getName());
+    // this.realLogWriter.config(LocalizedStrings.DebugLogWriter_STARTED_USING_CLASS_LOGGER_FOR__0,
+    // getClass().getName());
-  public int getLogWriterLevel()
-  {
+  public int getLogWriterLevel() {
-  
+
-    this.realLogWriter.put(WARNING_LEVEL, new StringBuilder(this.prefix).append(" level ").append(levelToString(level)).append(" ").append(msg).toString(), exception);
+    this.realLogWriter.put(WARNING_LEVEL, new StringBuilder(this.prefix).append(" level ")
+        .append(levelToString(level)).append(" ").append(msg).toString(), exception);
+   * 
-  public void put(int msgLevel, StringId msgId, Object[] params, Throwable exception)
-  {
-    String msg = new StringBuilder(this.prefix).append(" level ").append(levelToString(msgLevel)).append(" ").append(msgId.toLocalizedString(params)).toString();
+  public void put(int msgLevel, StringId msgId, Object[] params, Throwable exception) {
+    String msg = new StringBuilder(this.prefix).append(" level ").append(levelToString(msgLevel))
+        .append(" ").append(msgId.toLocalizedString(params)).toString();
-  public boolean configEnabled()
-  {
+  public boolean configEnabled() {
-  public boolean fineEnabled()
-  {
+  public boolean fineEnabled() {
-  public boolean finerEnabled()
-  {
+  public boolean finerEnabled() {
-  public boolean finestEnabled()
-  {
+  public boolean finestEnabled() {
-  public boolean infoEnabled()
-  {
+  public boolean infoEnabled() {
-  public boolean severeEnabled()
-  {
+  public boolean severeEnabled() {
-  public boolean warningEnabled()
-  {
+  public boolean warningEnabled() {
-  
+
-  
+
