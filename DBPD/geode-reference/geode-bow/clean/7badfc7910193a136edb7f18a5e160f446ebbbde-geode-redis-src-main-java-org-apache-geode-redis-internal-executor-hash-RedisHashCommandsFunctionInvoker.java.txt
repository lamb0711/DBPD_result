GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

-@SuppressWarnings("unchecked")
-public class RedisHashCommandsFunctionExecutor implements RedisHashCommands {
+/**
+ * This class is used by netty redis has command executors
+ * to invoke a geode function that will run on a
+ * particular server to do the redis command.
+ */
+public class RedisHashCommandsFunctionInvoker implements RedisHashCommands {
-  public RedisHashCommandsFunctionExecutor(Region<ByteArrayWrapper, RedisData> region) {
+  public RedisHashCommandsFunctionInvoker(Region<ByteArrayWrapper, RedisData> region) {
-    return CommandFunction.execute(HSET, key, new Object[] {fieldsToSet, NX}, region);
+    return CommandFunction.invoke(HSET, key, new Object[] {fieldsToSet, NX}, region);
-    return CommandFunction.execute(HDEL, key, fieldsToRemove, region);
+    return CommandFunction.invoke(HDEL, key, fieldsToRemove, region);
-    return CommandFunction.execute(HGETALL, key, null, region);
+    return CommandFunction.invoke(HGETALL, key, null, region);
-    return CommandFunction.execute(HEXISTS, key, field, region);
+    return CommandFunction.invoke(HEXISTS, key, field, region);
-    return CommandFunction.execute(HGET, key, field, region);
+    return CommandFunction.invoke(HGET, key, field, region);
-    return CommandFunction.execute(HLEN, key, null, region);
+    return CommandFunction.invoke(HLEN, key, null, region);
-    return CommandFunction.execute(HSTRLEN, key, field, region);
+    return CommandFunction.invoke(HSTRLEN, key, field, region);
-    return CommandFunction.execute(HMGET, key, fields, region);
+    return CommandFunction.invoke(HMGET, key, fields, region);
-    return CommandFunction.execute(HVALS, key, null, region);
+    return CommandFunction.invoke(HVALS, key, null, region);
-    return CommandFunction.execute(HKEYS, key, null, region);
+    return CommandFunction.invoke(HKEYS, key, null, region);
-    return CommandFunction.execute(HSCAN, key, new Object[] {matchPattern, count, cursor}, region);
+    return CommandFunction.invoke(HSCAN, key, new Object[] {matchPattern, count, cursor}, region);
-    return CommandFunction.execute(HINCRBY, key, new Object[] {field, increment}, region);
+    return CommandFunction.invoke(HINCRBY, key, new Object[] {field, increment}, region);
-    return CommandFunction.execute(HINCRBYFLOAT, key, new Object[] {field, increment}, region);
+    return CommandFunction.invoke(HINCRBYFLOAT, key, new Object[] {field, increment}, region);
