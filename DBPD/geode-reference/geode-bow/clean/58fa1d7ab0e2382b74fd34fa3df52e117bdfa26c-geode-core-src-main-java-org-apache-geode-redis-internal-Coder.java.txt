Merge remote-tracking branch 'upstream/develop' into develop

-import java.util.Iterator;
+
-  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, byte[] value) {
-    ByteBuf response = alloc.buffer(value.length + 20);
-    response.writeByte(BULK_STRING_ID);
-    response.writeBytes(intToBytes(value.length));
-    response.writeBytes(CRLFar);
-    response.writeBytes(value);
-    response.writeBytes(CRLFar);
-    return response;
-  }
+  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, Object v)
+      throws CoderException {
+    ByteBuf response;
+    byte[] toWrite;
-  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, double value) {
-    ByteBuf response = alloc.buffer();
-    byte[] doub = doubleToBytes(value);
-    response.writeByte(BULK_STRING_ID);
-    response.writeBytes(intToBytes(doub.length));
-    response.writeBytes(CRLFar);
-    response.writeBytes(doub);
-    response.writeBytes(CRLFar);
-    return response;
-  }
-
-  public static ByteBuf getBulkStringResponse(ByteBufAllocator alloc, String value) {
-    byte[] valueAr = stringToBytes(value);
-    int length = valueAr == null ? 0 : valueAr.length;
-    ByteBuf response = alloc.buffer(length + 20);
-    response.writeByte(BULK_STRING_ID);
-    response.writeBytes(intToBytes(length));
-    response.writeBytes(CRLFar);
-    response.writeBytes(valueAr);
-    response.writeBytes(CRLFar);
-    return response;
-  }
-
-  public static ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc, List<String> items) {
-    Iterator<String> it = items.iterator();
-    ByteBuf response = alloc.buffer();
-    response.writeByte(ARRAY_ID);
-    response.writeBytes(intToBytes(items.size()));
-    response.writeBytes(CRLFar);
-    while (it.hasNext()) {
-      String next = it.next();
-      response.writeByte(BULK_STRING_ID);
-      response.writeBytes(intToBytes(next.length()));
-      response.writeBytes(CRLFar);
-      response.writeBytes(stringToBytes(next));
-      response.writeBytes(CRLFar);
+    if (v == null) {
+      response = alloc.buffer();
+      response.writeBytes(bNIL);
+      return response;
+    } else if (v instanceof byte[]) {
+      byte[] value = (byte[]) v;
+      response = alloc.buffer(value.length + 20);
+      toWrite = value;
+    } else if (v instanceof ByteArrayWrapper) {
+      byte[] value = ((ByteArrayWrapper) v).toBytes();
+      response = alloc.buffer(value.length + 20);
+      toWrite = value;
+    } else if (v instanceof Double) {
+      response = alloc.buffer();
+      toWrite = doubleToBytes(((Double) v).doubleValue());
+    } else if (v instanceof String) {
+      String value = (String) v;
+      response = alloc.buffer(value.length() + 20);
+      toWrite = stringToBytes(value);
+    } else {
+      throw new CoderException();
+
+    response.writeByte(BULK_STRING_ID);
+    response.writeBytes(intToBytes(toWrite.length));
+    response.writeBytes(CRLFar);
+    response.writeBytes(toWrite);
+    response.writeBytes(CRLFar);
+
-  public static ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc,
-      Collection<ByteArrayWrapper> items) {
-    Iterator<ByteArrayWrapper> it = items.iterator();
+  public static ByteBuf getBulkStringArrayResponse(ByteBufAllocator alloc, Collection<?> items)
+      throws CoderException {
-    while (it.hasNext()) {
-      ByteArrayWrapper nextWrapper = it.next();
-      if (nextWrapper != null) {
-        response.writeByte(BULK_STRING_ID);
-        response.writeBytes(intToBytes(nextWrapper.length()));
-        response.writeBytes(CRLFar);
-        response.writeBytes(nextWrapper.toBytes());
-        response.writeBytes(CRLFar);
-      } else
-        response.writeBytes(getNilResponse(alloc));
+    for (Object next : items) {
+      ByteBuf tmp = null;
+      try {
+        if (next instanceof Collection) {
+          Collection<?> nextItems = (Collection<?>) next;
+          tmp = getBulkStringArrayResponse(alloc, nextItems);
+          response.writeBytes(tmp);
+        } else {
+          tmp = getBulkStringResponse(alloc, next);
+          response.writeBytes(tmp);
+        }
+      } finally {
+        if (tmp != null) {
+          tmp.release();
+        }
+      }
-    Iterator<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> it = items.iterator();
-    while (it.hasNext()) {
-      Map.Entry<ByteArrayWrapper, ByteArrayWrapper> next = it.next();
+    for (Map.Entry<ByteArrayWrapper, ByteArrayWrapper> next : items) {
+
-    Iterator<?> it = items.iterator();
-    while (it.hasNext()) {
-      Object nextObject = it.next();
+    for (Object nextObject : items) {
-    Iterator<?> it = items.iterator();
-    while (it.hasNext()) {
-      Object next = it.next();
-      ByteArrayWrapper nextWrapper = null;
-      if (next instanceof Entry) {
-        try {
-          nextWrapper = (ByteArrayWrapper) ((Entry<?, ?>) next).getValue();
-        } catch (EntryDestroyedException e) {
-          continue;
+    try {
+      for (Object next : items) {
+        ByteArrayWrapper nextWrapper = null;
+        if (next instanceof Entry) {
+          try {
+            nextWrapper = (ByteArrayWrapper) ((Entry<?, ?>) next).getValue();
+          } catch (EntryDestroyedException e) {
+            continue;
+          }
+        } else if (next instanceof Struct) {
+          nextWrapper = (ByteArrayWrapper) ((Struct) next).getFieldValues()[1];
-      } else if (next instanceof Struct) {
-        nextWrapper = (ByteArrayWrapper) ((Struct) next).getFieldValues()[1];
+        if (nextWrapper != null) {
+          tmp.writeByte(Coder.BULK_STRING_ID);
+          tmp.writeBytes(intToBytes(nextWrapper.length()));
+          tmp.writeBytes(Coder.CRLFar);
+          tmp.writeBytes(nextWrapper.toBytes());
+          tmp.writeBytes(Coder.CRLFar);
+        } else {
+          tmp.writeBytes(Coder.bNIL);
+        }
+        size++;
-      if (nextWrapper != null) {
-        tmp.writeByte(Coder.BULK_STRING_ID);
-        tmp.writeBytes(intToBytes(nextWrapper.length()));
-        tmp.writeBytes(Coder.CRLFar);
-        tmp.writeBytes(nextWrapper.toBytes());
-        tmp.writeBytes(Coder.CRLFar);
-      } else {
-        tmp.writeBytes(Coder.bNIL);
-      }
-      size++;
+
+      response.writeBytes(intToBytes(size));
+      response.writeBytes(Coder.CRLFar);
+      response.writeBytes(tmp);
+    } finally {
+      tmp.release();
-    response.writeBytes(intToBytes(size));
-    response.writeBytes(Coder.CRLFar);
-    response.writeBytes(tmp);
-
-    tmp.release();
-
-  public static Double bytesToDouble(byte[] bytes) {
+  public static double bytesToDouble(byte[] bytes) {
