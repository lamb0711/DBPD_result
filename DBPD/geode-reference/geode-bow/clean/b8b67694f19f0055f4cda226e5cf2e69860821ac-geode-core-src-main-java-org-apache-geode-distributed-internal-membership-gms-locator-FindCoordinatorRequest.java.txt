Merge branch 'develop' into feature/GEODE-7049

-import org.apache.geode.DataSerializer;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.InternalDataSerializer;
-import org.apache.geode.internal.Version;
+import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.GMSUtil;
+import org.apache.geode.distributed.internal.membership.gms.messages.AbstractGMSMessage;
+import org.apache.geode.internal.serialization.DeserializationContext;
+import org.apache.geode.internal.serialization.SerializationContext;
+import org.apache.geode.internal.serialization.StaticSerialization;
+import org.apache.geode.internal.serialization.Version;
-public class FindCoordinatorRequest extends HighPriorityDistributionMessage
+public class FindCoordinatorRequest extends AbstractGMSMessage
-  private InternalDistributedMember memberID;
-  private Collection<InternalDistributedMember> rejectedCoordinators;
+  private GMSMember memberID;
+  private Collection<GMSMember> rejectedCoordinators;
-  public FindCoordinatorRequest(InternalDistributedMember myId) {
+  public FindCoordinatorRequest(GMSMember myId) {
-  public FindCoordinatorRequest(InternalDistributedMember myId,
-      Collection<InternalDistributedMember> rejectedCoordinators, int lastViewId, byte[] pk,
+  public FindCoordinatorRequest(GMSMember myId,
+      Collection<GMSMember> rejectedCoordinators, int lastViewId, byte[] pk,
-  public InternalDistributedMember getMemberID() {
+  public GMSMember getMemberID() {
-  public Collection<InternalDistributedMember> getRejectedCoordinators() {
+  public Collection<GMSMember> getRejectedCoordinators() {
+  // TODO serialization not backward compatible with 1.9 - may need InternalDistributedMember, not
+  // GMSMember
-  public void toData(DataOutput out) throws IOException {
-    DataSerializer.writeObject(this.memberID, out);
+  public void toData(DataOutput out,
+      SerializationContext context) throws IOException {
+    GMSUtil.writeMemberID(memberID, out, context);
-      for (InternalDistributedMember mbr : this.rejectedCoordinators) {
-        DataSerializer.writeObject(mbr, out);
+      for (GMSMember mbr : this.rejectedCoordinators) {
+        GMSUtil.writeMemberID(mbr, out, context);
-    InternalDataSerializer.writeString(dhalgo, out);
-    InternalDataSerializer.writeByteArray(this.myPublicKey, out);
+    StaticSerialization.writeString(dhalgo, out);
+    StaticSerialization.writeByteArray(this.myPublicKey, out);
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.memberID = DataSerializer.readObject(in);
+  public void fromData(DataInput in,
+      DeserializationContext context) throws IOException, ClassNotFoundException {
+    this.memberID = GMSUtil.readMemberID(in, context);
-    this.rejectedCoordinators = new ArrayList<InternalDistributedMember>(size);
+    this.rejectedCoordinators = new ArrayList<GMSMember>(size);
-      this.rejectedCoordinators.add((InternalDistributedMember) DataSerializer.readObject(in));
+      this.rejectedCoordinators.add(GMSUtil.readMemberID(in, context));
-    this.dhalgo = InternalDataSerializer.readString(in);
-    this.myPublicKey = InternalDataSerializer.readByteArray(in);
-  }
-
-  @Override
-  protected void process(ClusterDistributionManager dm) {
-    throw new IllegalStateException("this message should not be executed");
+    this.dhalgo = StaticSerialization.readString(in);
+    this.myPublicKey = StaticSerialization.readByteArray(in);
