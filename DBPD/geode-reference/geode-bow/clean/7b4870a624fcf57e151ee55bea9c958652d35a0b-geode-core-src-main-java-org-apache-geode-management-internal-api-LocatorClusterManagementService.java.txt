GEODE-6811: be able to create GWR in management api. (#3687)

* add createGWR methods in the gateway controllers
* add GatewaReceiverConfigValidator
* add MemberValidator to validate same element can't exists in multiple groups which have common member
* add ConfigurationManager.get method to replace ConfigurationValidator.exists method for more conflict validation
-import java.util.HashSet;
-import java.util.stream.Stream;
+import org.apache.geode.management.internal.configuration.validators.GatewayReceiverConfigValidator;
+import org.apache.geode.management.internal.configuration.validators.MemberValidator;
-import org.apache.geode.management.internal.exceptions.EntityExistsException;
-  private InternalCache cache;
+  private MemberValidator memberValidator;
-    this(cache, persistenceService, new HashMap(), new HashMap());
+    this(persistenceService, new HashMap(), new HashMap(), null);
+    validators.put(GatewayReceiverConfig.class, new GatewayReceiverConfigValidator());
+    memberValidator = new MemberValidator(cache, persistenceService);
-  public LocatorClusterManagementService(InternalCache cache,
-      ConfigurationPersistenceService persistenceService, Map managers, Map validators) {
-    this.cache = cache;
+  public LocatorClusterManagementService(ConfigurationPersistenceService persistenceService,
+      Map managers, Map validators, MemberValidator memberValidator) {
+    this.memberValidator = memberValidator;
+
-      // exit early if config element already exists in cache config
-      CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(group, true);
-      if (validator.exists(config.getId(), currentPersistedConfig)) {
-        throw new EntityExistsException("Cache element '" + config.getId() + "' already exists");
-      }
+    // check if this config already exists on all/some members of this group
+    memberValidator.validateCreate(config, configurationManager);
+
-    Set<DistributedMember> targetedMembers = findMembers(group);
+    Set<DistributedMember> targetedMembers = memberValidator.findMembers(group);
-    validator.validate(CacheElementOperation.DELETE, config);
+    if (validator != null) {
+      validator.validate(CacheElementOperation.DELETE, config);
+    }
-    List<String> relevantGroups = persistenceService.getGroups().stream().filter(g -> {
-      CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(g);
-      if (currentPersistedConfig != null && validator != null) {
-        return validator.exists(config.getId(), currentPersistedConfig);
-      } else {
-        return false;
-      }
-    }).collect(Collectors.toList());
-
-    if (relevantGroups.isEmpty()) {
+    String[] groupsWithThisElement =
+        memberValidator.findGroupsWithThisElement(config, configurationManager);
+    if (groupsWithThisElement.length == 0) {
-    Set<DistributedMember> targetedMembers = new HashSet<>();
-    relevantGroups.forEach(g -> targetedMembers.addAll(findMembers(g)));
-
-        targetedMembers);
+        memberValidator.findMembers(groupsWithThisElement));
-    for (String finalGroup : relevantGroups) {
+    for (String finalGroup : groupsWithThisElement) {
-  Set<DistributedMember> findMembers(String group) {
-    Stream<DistributedMember> memberStream =
-        cache.getDistributionManager().getNormalDistributionManagerIds()
-            .stream().map(DistributedMember.class::cast);
-    if (!"cluster".equals(group)) {
-      memberStream = memberStream.filter(m -> m.getGroups().contains(group));
-    }
-    return memberStream.collect(Collectors.toSet());
-  }
-
-  @VisibleForTesting
