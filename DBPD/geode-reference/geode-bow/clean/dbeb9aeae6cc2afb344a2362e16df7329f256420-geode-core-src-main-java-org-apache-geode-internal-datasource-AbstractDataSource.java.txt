Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * AbstractDataSource implements the Datasource interface. This is base class
- * for the datasouce types. The class also implements the Serializable and
- * Referenceable behavior.
+ * AbstractDataSource implements the Datasource interface. This is base class for the datasouce
+ * types. The class also implements the Serializable and Referenceable behavior.
- *         This class now contains only those paramaters which are needed
- *         by the Gemfire DataSource configuration. This maps to those
- *         paramaters which are specified as attributes of <jndi-binding>tag.
- *         Those parameters which are specified as attributes of <property>tag
- *         are not stored.
+ * This class now contains only those paramaters which are needed by the Gemfire DataSource
+ * configuration. This maps to those paramaters which are specified as attributes of
+ * <jndi-binding>tag. Those parameters which are specified as attributes of <property>tag are not
+ * stored.
-  
+
-   * @param configs ConfiguredDataSourceProperties object containing all the
-   *          data required to construct the datasource object.
+   * @param configs ConfiguredDataSourceProperties object containing all the data required to
+   *        construct the datasource object.
-   *  
+   * 
-  public AbstractDataSource(ConfiguredDataSourceProperties configs)
-      throws SQLException {
+  public AbstractDataSource(ConfiguredDataSourceProperties configs) throws SQLException {
-   * Behavior from the dataSource interface. This is an abstract function which
-   * will implemented in the Datasource classes.
+   * Behavior from the dataSource interface. This is an abstract function which will implemented in
+   * the Datasource classes.
-   * Behavior from the dataSource interface. This is an abstract function which
-   * will be implemented in the Datasource classes.
+   * Behavior from the dataSource interface. This is an abstract function which will be implemented
+   * in the Datasource classes.
-  public abstract Connection getConnection(String username, String password)
-      throws SQLException;
+  public abstract Connection getConnection(String username, String password) throws SQLException;
-  //DataSource Interface functions
+  // DataSource Interface functions
-   * Returns the amount of time that login will wait for the connection to
-   * happen before it gets time out.
+   * Returns the amount of time that login will wait for the connection to happen before it gets
+   * time out.
-    }
-    catch (SQLException e) {
+    } catch (SQLException e) {
-          logger.debug("AbstractDataSource::validateConnection:exception in validating connection", e);
+        logger.debug("AbstractDataSource::validateConnection:exception in validating connection",
+            e);
-  //Get Methods for DataSource Properties
+  // Get Methods for DataSource Properties
-  public void checkCredentials(String clUser, String clPass)
-      throws SQLException {
-    if (clUser == null || !clUser.equals(user) || clPass == null
-        || !clPass.equals(password)) {
-      String error = LocalizedStrings.AbstractDataSource_CANNOT_CREATE_A_CONNECTION_WITH_THE_USER_0_AS_IT_DOESNT_MATCH_THE_EXISTING_USER_NAMED_1_OR_THE_PASSWORD_WAS_INCORRECT.toLocalizedString(new Object[] { clUser, clPass });
+  public void checkCredentials(String clUser, String clPass) throws SQLException {
+    if (clUser == null || !clUser.equals(user) || clPass == null || !clPass.equals(password)) {
+      String error =
+          LocalizedStrings.AbstractDataSource_CANNOT_CREATE_A_CONNECTION_WITH_THE_USER_0_AS_IT_DOESNT_MATCH_THE_EXISTING_USER_NAMED_1_OR_THE_PASSWORD_WAS_INCORRECT
+              .toLocalizedString(new Object[] {clUser, clPass});
