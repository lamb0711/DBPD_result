GEODE-4858: CreateAsyncEventQueue and tests refactor. (#1969)

* Unsupported ModelCommandResult methods failedToPersist, setCommandPersisted, and setFileToDownload now throw exceptions to avoid accidental use in testing.
* Extracted cluster configuration messages in CommandExecutor to public class fields, for test consumption.
* Extracted several message strings in ModelCommandResult to public class fields, for test consumption
* Serialized necessary AsyncEventQueue configuration classes and updated sanctioned-geode-core-serializables

+import java.util.List;
+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.ClassNameType;
+import org.apache.geode.cache.configuration.DeclarableType;
+import org.apache.geode.cache.configuration.ParameterType;
-import org.apache.geode.internal.cache.execute.InternalFunction;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+import org.apache.geode.management.cli.CliFunction;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult.StatusState;
-public class CreateAsyncEventQueueFunction implements InternalFunction {
+public class CreateAsyncEventQueueFunction extends CliFunction {
-  @SuppressWarnings("deprecation")
-  public void execute(FunctionContext context) {
+  public CliFunctionResult executeFunction(FunctionContext context) {
-      AsyncEventQueueFunctionArgs aeqArgs = (AsyncEventQueueFunctionArgs) context.getArguments();
+      CacheConfig.AsyncEventQueue config = (CacheConfig.AsyncEventQueue) context.getArguments();
-      AsyncEventQueueFactory asyncEventQueueFactory = cache.createAsyncEventQueueFactory()
-          .setParallel(aeqArgs.isParallel())
-          .setBatchConflationEnabled(aeqArgs.isEnableBatchConflation())
-          .setBatchSize(aeqArgs.getBatchSize()).setBatchTimeInterval(aeqArgs.getBatchTimeInterval())
-          .setPersistent(aeqArgs.isPersistent()).setDiskStoreName(aeqArgs.getDiskStoreName())
-          .setDiskSynchronous(aeqArgs.isDiskSynchronous())
-          .setForwardExpirationDestroy(aeqArgs.isForwardExpirationDestroy())
-          .setMaximumQueueMemory(aeqArgs.getMaxQueueMemory())
-          .setDispatcherThreads(aeqArgs.getDispatcherThreads())
-          .setOrderPolicy(OrderPolicy.valueOf(aeqArgs.getOrderPolicy()));
+      AsyncEventQueueFactory asyncEventQueueFactory =
+          cache.createAsyncEventQueueFactory().setParallel(config.isParallel())
+              .setBatchConflationEnabled(config.isEnableBatchConflation())
+              .setBatchSize(Integer.parseInt(config.getBatchSize()))
+              .setBatchTimeInterval(Integer.parseInt(config.getBatchTimeInterval()))
+              .setPersistent(config.isPersistent()).setDiskStoreName(config.getDiskStoreName())
+              .setDiskSynchronous(config.isDiskSynchronous())
+              .setForwardExpirationDestroy(config.isForwardExpirationDestroy())
+              .setMaximumQueueMemory(Integer.parseInt(config.getMaximumQueueMemory()))
+              .setDispatcherThreads(Integer.parseInt(config.getDispatcherThreads()))
+              .setOrderPolicy(OrderPolicy.valueOf(config.getOrderPolicy()));
-      String[] gatewayEventFilters = aeqArgs.getGatewayEventFilters();
+      String[] gatewayEventFilters = config.getGatewayEventFilter().stream()
+          .map(ClassNameType::getClassName).toArray(String[]::new);
+
-      String gatewaySubstitutionFilter = aeqArgs.getGatewaySubstitutionFilter();
-      if (gatewaySubstitutionFilter != null) {
+      DeclarableType gatewayEventSubstitutionFilter = config.getGatewayEventSubstitutionFilter();
+
+      if (gatewayEventSubstitutionFilter != null) {
+        String gatewaySubstitutionFilter = gatewayEventSubstitutionFilter.getClassName();
-      String listenerClassName = aeqArgs.getListenerClassName();
+      String listenerClassName = config.getAsyncEventListener().getClassName();
-      Properties listenerProperties = aeqArgs.getListenerProperties();
-      if (listenerProperties != null && !listenerProperties.isEmpty()) {
+      List<ParameterType> parameters = config.getAsyncEventListener().getParameter();
+      Properties listenerProperties = new Properties();
+      for (ParameterType p : parameters) {
+        listenerProperties.put(p.getName(), p.getString());
+      }
+
+      if (!listenerProperties.isEmpty()) {
-        Map<Declarable, Properties> declarablesMap = new HashMap<Declarable, Properties>();
+        Map<Declarable, Properties> declarablesMap = new HashMap<>();
-      asyncEventQueueFactory.create(aeqArgs.getAsyncEventQueueId(),
-          (AsyncEventListener) listenerInstance);
+      asyncEventQueueFactory.create(config.getId(), (AsyncEventListener) listenerInstance);
-      XmlEntity xmlEntity =
-          new XmlEntity(CacheXml.ASYNC_EVENT_QUEUE, "id", aeqArgs.getAsyncEventQueueId());
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, xmlEntity, "Success"));
-
+      return new CliFunctionResult(memberId, StatusState.OK, "Success");
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, false, null));
+      return new CliFunctionResult(memberId, StatusState.ERROR, null);
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, null));
+      return new CliFunctionResult(memberId, e, null);
