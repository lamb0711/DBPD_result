Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-            LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(propFile), e);
+            String.format("Failed reading %s", propFile), e);
-          LocalizedStrings.AgentConfigImpl_SPECIFIED_PROPERTIES_FILE_DOES_NOT_EXIST_0
-              .toLocalizedString(propFile));
+          String.format("Specified properties file does not exist: %s",
+              propFile));
-          LocalizedStrings.AgentConfigImpl_AN_AGENTCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_AGENT
-              .toLocalizedString());
+          "An AgentConfig object cannot be modified after it has been used to create an Agent.");
-      return LocalizedStrings.AgentConfigImpl_USING_DEFAULT_CONFIGURATION_BECAUSE_PROPERTY_FILE_WAS_FOUND
-          .toLocalizedString();
+      return "Using default configuration because property file was not found.";
-      return LocalizedStrings.AgentConfigImpl_CONFIGURATION_LOADED_FROM_0
-          .toLocalizedString(this.url);
+      return String.format("Configuration loaded from: %s.",
+          this.url);
-    pw.println(LocalizedStrings.AgentConfigImpl_AGENT_CONFIGURATION.toLocalizedString());
+    pw.println("Agent Configuration:");
-            LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(url.toString()), e);
+            String.format("Failed reading %s", url.toString()), e);
-      return LocalizedStrings.AgentConfigImpl_NAME_OF_THE_AGENTS_LOG_FILE.toLocalizedString();
+      return "Name of the agent's log file";
-      return LocalizedStrings.AgentConfigImpl_MINIMUM_LEVEL_OF_LOGGING_PERFORMED_BY_AGENT
-          .toLocalizedString();
+      return "Minimum level of logging performed by agent. Valid values are: all, finest, finer, fine, config, info, warning, error, severe and none.";
-      return LocalizedStrings.AgentConfigImpl_WHETHER_THE_AGENT_SHOULD_PRINT_DEBUGGING_INFORMATION
-          .toLocalizedString();
+      return "Whether the agent should print debugging information";
-      return LocalizedStrings.AgentConfigImpl_LIMIT_IN_MEGABYTES_OF_HOW_MUCH_DISK_SPACE_CAN_BE_CONSUMED_BY_OLD_INACTIVE_LOG_FILES
-          .toLocalizedString();
+      return "Limit, in megabytes, of how much disk space can be consumed by old inactive log files. This value (in megabytes) should be in the range: 0-1000000.";
-      return LocalizedStrings.AgentConfigImpl_LIMIT_IN_MEGABYTES_OF_HOW_LARGE_THE_CURRENT_STATISTIC_ARCHIVE_FILE_CAN_GROW_BEFORE_IT_IS_CLOSED_AND_ARCHIVAL_ROLLS_ON_TO_A_NEW_FILE
-          .toLocalizedString();
+      return "Limit, in megabytes, of how large the current log file can grow before it is closed and log rolls on to a new file. This value (in megabytes) should be in the range: 0-1000000.";
-      return LocalizedStrings.AgentConfigImpl_MULTICAST_PORT_USED_TO_CONNECT_TO_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "Multicast port used to connect to distributed system. To use IP multicast, you must also define mcast-address. The value must be in the range: 0-65535.";
-      return LocalizedStrings.AgentConfigImpl_MULTICAST_ADDRESS_USED_TO_CONNECT_TO_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "Multicast address used to connect to distributed system. To use multicast, you must also define mcast-port, the IP port.";
-      return LocalizedStrings.AgentConfigImpl_IP_ADDRESS_OF_THE_AGENTS_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "An IP address of the JMX Agent's distributed system on a multi-homed host. On a multi-homed host, you must explicitly specify the bind address.";
-      return LocalizedStrings.AgentConfigImpl_TCP_PORT.toLocalizedString();
+      return "TCP/IP port number to use in the agent's distributed system";
-      return LocalizedStrings.AgentConfigImpl_ADDRESSES_OF_THE_LOCATORS_OF_THE_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "A comma-separated list of address(es) of the locator(s) in the distributed system in host[port] form. E.g. locators=host1[port1],host2[port2],...,hostn[portn]";
-      return LocalizedStrings.AgentConfigImpl_ALLOWED_RANGE_OF_UDP_PORTS_TO_FORM_UNIQUE_MEMBERSHIP_ID
-          .toLocalizedString();
+      return "The allowed range of UDP ports for use in forming an unique membership identifier. This range is given as two numbers separated by a minus sign.";
-      return LocalizedStrings.AgentConfigImpl_XML_CONFIGURATION_FILE_FOR_MANAGED_ENTITIES
-          .toLocalizedString();
+      return "The name of an XML file that specifies the configuration for the managed entity administered by the Distributed System. The XML file must conform to the dtd - doc-files/ds5_0.dtd.";
-      return LocalizedStrings.AgentConfigImpl_REFRESH_INTERVAL_IN_SECONDS_FOR_AUTOREFRESH_OF_MEMBERS_AND_STATISTIC_RESOURCES
-          .toLocalizedString();
+      return "Refresh Interval, in seconds, to be used for auto-refresh of SystemMember, StatisticResource and CacheServer refreshes";
-      return LocalizedStrings.AgentConfigImpl_COMMAND_PREFIX_USED_FOR_LAUNCHING_MEMBERS_OF_THE_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "Command prefix used for launching members of the distributed system";
-      return LocalizedStrings.AgentConfigImpl_DOES_THE_DISTRIBUTED_SYSTEM_COMMUNICATE_USING_SSL
-          .toLocalizedString();
+      return "Whether to use the SSL protocol for communication between members of the admin distributed system. If set to true, locators should be used.";
-      return LocalizedStrings.AgentConfigImpl_SSL_PROTOCOLS_USED_TO_COMMUNICATE_WITH_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "A space-separated list of the SSL protocols used to communicate with distributed system.";
-      return LocalizedStrings.AgentConfigImpl_SSL_CIPHERS_USED_TO_COMMUNICATE_WITH_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "A space-separated list of the SSL ciphers to be used to communicate with distributed system.";
-      return LocalizedStrings.AgentConfigImpl_DOES_CONNECTING_TO_THE_DISTRIBUTED_SYSTEM_REQUIRE_SSL_AUTHENTICATION
-          .toLocalizedString();
+      return "Whether connection to the distributed system needs SSL authentication.";
-            LocalizedStrings.AgentConfigImpl_UNKNOWN_CONFIG_PROPERTY_0.toLocalizedString(prop));
+            String.format("Unknown config property: %s", prop));
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_AUTOMATICALLY_CONNECT_TO_THE_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "Whether the JMX agent will connect 'automatically' to the distributed system that it is configured to monitor.";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_HTTP_JMX_ADAPTER
-          .toLocalizedString();
+      return "Whether the HTTP adapter is enabled in the JMX agent.";
-      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_HTTP_ADAPTERS_SOCKETS
-          .toLocalizedString();
+      return "Bind address of HTTP adapter's sockets";
-      return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_THE_HTTP_ADAPTER_WILL_BE_STARTED
-          .toLocalizedString();
+      return "The port on which the HTTP adapter will be started. This value should be in the range: 0-65535.";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_RMI_JMX_ADAPTER
-          .toLocalizedString();
+      return "Whether the RMI JMX adapter is enabled.";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_HOST_AN_RMI_REGISTRY
-          .toLocalizedString();
+      return "Whether the JMX agent should start RMI registry. Alternatively, a registry outside of the JMX agent VM can be used.";
-      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_RMI_ADAPTERS_SOCKETS
-          .toLocalizedString();
+      return "Bind address of RMI adapter's sockets";
-      return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_TO_CONTACT_THE_RMI_REGISTER
-          .toLocalizedString();
+      return "The port on which to contact the RMI registry. The value must be in the range: 0-65535.";
-      return LocalizedStrings.AgentConfigImpl_THE_PORT_USED_TO_CONFIGURE_RMI_CONNECTOR_SERVER
-          .toLocalizedString();
+      return "The port on which the RMI Connector Server should start. The value must be in the range: 0-65535.";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_SNMP_JMX_ADAPTER
-          .toLocalizedString();
+      return "Whether the SNMP JMX adapter will be enabled.";
-      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_SNMP_ADAPTERS_SOCKETS
-          .toLocalizedString();
+      return "Bind address of SNMP adapter's sockets";
-      return LocalizedStrings.AgentConfigImpl_THE_DIRECTORY_IN_WHICH_SNMP_CONFIGURATION_RESIDES
-          .toLocalizedString();
+      return "The directory in which SNMP configuration resides";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_COMMUNICATE_USING_SSL
-          .toLocalizedString();
+      return "Whether the JMX Agent will use the SSL protocol for communication.";
-      return LocalizedStrings.AgentConfigImpl_THE_SSL_PROTOCOLS_USED_BY_THE_AGENT
-          .toLocalizedString();
+      return "The space-separated list of the SSL protocols to be used when connecting to the JMX agent.";
-      return LocalizedStrings.AgentConfigImpl_THE_SSL_CIPHERS_USED_BY_THE_AGENT.toLocalizedString();
+      return "The space-separated list of the SSL ciphers to be used when connecting to the JMX Agent.";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_REQUIRE_SSL_AUTHENTICATION
-          .toLocalizedString();
+      return "Whether or not SSL connections to the RMI adapter require authentication. If true, needs client authentication for RMI and other non-HTTP connectors/adaptors.";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_ADAPTER_REQUIRE_SSL_AUTHENTICATION
-          .toLocalizedString();
+      return "Whether SSL connections to the HTTP adapter will need authentication.";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_JMX_ADAPTER_USE_HTTP_AUTHENTICATION
-          .toLocalizedString();
+      return "Whether the HTTP adapter will use HTTP authentication.";
-      return LocalizedStrings.AgentConfigImpl_THE_USER_NAME_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER
-          .toLocalizedString();
+      return "The user name for authentication in the HTTP JMX adapter";
-      return LocalizedStrings.AgentConfigImpl_THE_PASSWORD_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER
-          .toLocalizedString();
+      return "The password for authentication in the HTTP JMX adapter";
-      return LocalizedStrings.AgentConfigImpl_PROPERTY_FILE_FROM_WHICH_AGENT_READS_CONFIGURATION
-          .toLocalizedString();
+      return "Name and path of the Agent's properties file from which agent reads configuration";
-      return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS
-          .toLocalizedString();
+      return "Host on which the distributed system's locator runs";
-      return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS
-          .toLocalizedString();
+      return "Host on which the distributed system's locator runs";
-      return LocalizedStrings.AgentConfigImpl_GEMFIRE_PRODUCT_DIRECTORY_USED_TO_LAUNCH_A_LOCATOR
-          .toLocalizedString();
+      return "GemFire product directory used to launch a locator";
-      return LocalizedStrings.AgentConfigImpl_DIRECTORY_IN_WHICH_A_LOCATOR_WILL_BE_LAUNCHED
-          .toLocalizedString();
+      return "Directory in which a locator will be launched";
-      return LocalizedStrings.AgentConfigImpl_COMMAND_PREFIX_USED_WHEN_LAUNCHING_A_LOCATOR
-          .toLocalizedString();
+      return "Command prefix used when launching a locator";
-      return LocalizedStrings.AgentConfigImpl_IP_ADDRESS_TO_USE_WHEN_CONTACTING_LOCATOR
-          .toLocalizedString();
+      return "IP address to use when contacting locator";
-      return LocalizedStrings.AgentConfigImpl_PROPERTIES_FOR_CONFIGURING_A_LOCATORS_DISTRIBUTED_SYSTEM
-          .toLocalizedString();
+      return "Properties for configuring a locator's distributed system";
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_IF_EMAIL_NOTIFICATIONS_ARE_ENABLED_OR_NOT
-          .toLocalizedString();
+      return "Whether the e-mail notifications are enabled.";
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_ADDRESS_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT
-          .toLocalizedString();
+      return "E-mail address to be used to send e-mail notifications.";
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_SERVER_HOST_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT
-          .toLocalizedString();
+      return "The host name of the e-mail server to be used for sending email notification.";
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_COMMA_SEPARATED_EMAIL_ADDRESSES_LIST_TO_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT
-          .toLocalizedString();
+      return "A comma-separated list of recipient e-mail addresses to send e-mail notifications to.";
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_NAME_OF_THE_FILE_TO_BE_USED_FOR_SAVING_AGENT_STATE
-          .toLocalizedString();
+      return "The name(not the path) of the file to be used for saving agent state. The file is stored in the same directory in which the agent.properties file is located.";
-          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-              .toLocalizedString(new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT),
+          String.format("%s must be zero or an integer between %s and %s.",
+              new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT),
-          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-              .toLocalizedString(new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+          String.format("%s must be zero or an integer between %s and %s.",
+              new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
-          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-              .toLocalizedString(new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+          String.format("%s must be zero or an integer between %s and %s.",
+              new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
-          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-              .toLocalizedString(new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT),
+          String.format("%s must be zero or an integer between %s and %s.",
+              new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT),
-          LocalizedStrings.AgentConfigImpl_HTTPBINDADDRESS_MUST_NOT_BE_NULL.toLocalizedString());
+          "HttpBindAddress must not be null");
-          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-              .toLocalizedString(new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+          String.format("%s must be zero or an integer between %s and %s.",
+              new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
-          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
-              .toLocalizedString(new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+          String.format("%s must be zero or an integer between %s and %s.",
+              new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
-          LocalizedStrings.AgentConfigImpl_LOCATOR_WORKINGDIRECTORY_MUST_NOT_BE_NULL
-              .toLocalizedString());
+          "Locator WorkingDirectory must not be null");
