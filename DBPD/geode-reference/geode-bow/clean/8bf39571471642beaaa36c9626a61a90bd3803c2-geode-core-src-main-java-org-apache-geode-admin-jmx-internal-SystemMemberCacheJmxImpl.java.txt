Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @since GemFire     3.5
+ * @since GemFire 3.5
-public class SystemMemberCacheJmxImpl 
-extends org.apache.geode.admin.internal.SystemMemberCacheImpl
-implements org.apache.geode.admin.jmx.internal.ManagedResource {
+public class SystemMemberCacheJmxImpl extends org.apache.geode.admin.internal.SystemMemberCacheImpl
+    implements org.apache.geode.admin.jmx.internal.ManagedResource {
-  
+
-  private Map<String, SystemMemberRegionJmxImpl> managedRegionResourcesMap = new HashMap<String, SystemMemberRegionJmxImpl>();
-  private Map<Number, SystemMemberBridgeServerJmxImpl> managedCacheServerResourcesMap = new HashMap<Number, SystemMemberBridgeServerJmxImpl>();
+  private Map<String, SystemMemberRegionJmxImpl> managedRegionResourcesMap =
+      new HashMap<String, SystemMemberRegionJmxImpl>();
+  private Map<Number, SystemMemberBridgeServerJmxImpl> managedCacheServerResourcesMap =
+      new HashMap<Number, SystemMemberBridgeServerJmxImpl>();
-  //   Constructor(s)
+  // Constructor(s)
-  
-  /** 
+
+  /**
-   * @param vm
-   *        The vm owning the cache this object will manage
+   * @param vm The vm owning the cache this object will manage
-  public SystemMemberCacheJmxImpl(GemFireVM vm)
-  throws org.apache.geode.admin.AdminException { 
+  public SystemMemberCacheJmxImpl(GemFireVM vm) throws org.apache.geode.admin.AdminException {
-  private void initializeMBean() 
-  throws org.apache.geode.admin.AdminException {
-    this.mbeanName = new StringBuffer("GemFire.Cache:")
-        .append("name=")
-        .append(MBeanUtil.makeCompliantMBeanNameProperty(getName()))
-        .append(",id=")
-        .append(getId())
-        .append(",owner=")
-        .append(MBeanUtil.makeCompliantMBeanNameProperty(vm.getId().toString()))
+  private void initializeMBean() throws org.apache.geode.admin.AdminException {
+    this.mbeanName = new StringBuffer("GemFire.Cache:").append("name=")
+        .append(MBeanUtil.makeCompliantMBeanNameProperty(getName())).append(",id=").append(getId())
+        .append(",owner=").append(MBeanUtil.makeCompliantMBeanNameProperty(vm.getId().toString()))
-      
-    this.objectName = 
-      MBeanUtil.createMBean(this, 
-                            addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));
+
+    this.objectName =
+        MBeanUtil.createMBean(this, addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));
-  
+
-  //   Template methods overriden from superclass...
+  // Template methods overriden from superclass...
-   * Override createSystemMemberRegion by instantiating
-   * SystemMemberRegionJmxImpl. This instance is also added to the
-   * managedResources collection.
+   * Override createSystemMemberRegion by instantiating SystemMemberRegionJmxImpl. This instance is
+   * also added to the managedResources collection.
-   * @param r
-   *          reference to Region instance for which this JMX resource is to be
-   *          created
-   * @return SystemMemberRegionJmxImpl - JMX Implementation of
-   *         SystemMemberRegion
-   * @throws AdminException
-   *           if constructing SystemMemberRegionJmxImpl instance fails
+   * @param r reference to Region instance for which this JMX resource is to be created
+   * @return SystemMemberRegionJmxImpl - JMX Implementation of SystemMemberRegion
+   * @throws AdminException if constructing SystemMemberRegionJmxImpl instance fails
-  @Override  
+  @Override
-    throws org.apache.geode.admin.AdminException {
+      throws org.apache.geode.admin.AdminException {
-      /* 
-       * Ensuring that a single instance of System Member Region is created 
-       * per Region.
+      /*
+       * Ensuring that a single instance of System Member Region is created per Region.
-   * Creates a SystemMemberBridgeServerJmxImpl instance. This instance is also
-   * added to the managedResources collection.
+   * Creates a SystemMemberBridgeServerJmxImpl instance. This instance is also added to the
+   * managedResources collection.
-   * @param bridge
-   *          reference to AdminBridgeServer for which this JMX resource is to
-   *          be created
-   * @return SystemMemberBridgeServerJmxImpl - JMX Implementation of
-   *         SystemMemberBridgeServerImpl
-   * @throws AdminException
-   *           if constructing SystemMemberBridgeServerJmxImpl instance fails
+   * @param bridge reference to AdminBridgeServer for which this JMX resource is to be created
+   * @return SystemMemberBridgeServerJmxImpl - JMX Implementation of SystemMemberBridgeServerImpl
+   * @throws AdminException if constructing SystemMemberBridgeServerJmxImpl instance fails
-  @Override  
-  protected SystemMemberBridgeServerImpl
-    createSystemMemberBridgeServer(AdminBridgeServer bridge) 
-    throws AdminException {
+  @Override
+  protected SystemMemberBridgeServerImpl createSystemMemberBridgeServer(AdminBridgeServer bridge)
+      throws AdminException {
-      /* 
-       * Ensuring that a single instance of SystemMember BridgeServer is 
-       * created per AdminBridgeServer.
+      /*
+       * Ensuring that a single instance of SystemMember BridgeServer is created per
+       * AdminBridgeServer.
-      SystemMemberBridgeServerJmxImpl managedCacheServerResource = managedCacheServerResourcesMap.get(bridge.getId());
+      SystemMemberBridgeServerJmxImpl managedCacheServerResource =
+          managedCacheServerResourcesMap.get(bridge.getId());
-  //   Create MBean attributes for each Statistic
+  // Create MBean attributes for each Statistic
-  
+
-   * @param managed   the mbean definition to add attributes to
-   * @return a new instance of ManagedBean copied from <code>managed</code> but 
-   *         with the new attributes added
+   * @param managed the mbean definition to add attributes to
+   * @return a new instance of ManagedBean copied from <code>managed</code> but with the new
+   *         attributes added
-  throws org.apache.geode.admin.AdminException {
+      throws org.apache.geode.admin.AdminException {
-      throw new IllegalArgumentException(LocalizedStrings.SystemMemberCacheJmxImpl_MANAGEDBEAN_IS_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.SystemMemberCacheJmxImpl_MANAGEDBEAN_IS_NULL.toLocalizedString());
-    
+
-    
+
-      
+
-  //   MBean Operations
+  // MBean Operations
-  /** 
+  /**
-   * @throws AdminException
-   *         If no region with path <code>path</code> exists
+   * @throws AdminException If no region with path <code>path</code> exists
-  public ObjectName manageRegion(String path)
-  throws AdminException, MalformedObjectNameException {
+  public ObjectName manageRegion(String path) throws AdminException, MalformedObjectNameException {
-        throw new AdminException(LocalizedStrings.SystemMemberCacheJmxImpl_THIS_CACHE_DOES_NOT_CONTAIN_REGION_0.toLocalizedString(path));
-          
+        throw new AdminException(
+            LocalizedStrings.SystemMemberCacheJmxImpl_THIS_CACHE_DOES_NOT_CONTAIN_REGION_0
+                .toLocalizedString(path));
+
-    } catch (RuntimeException e) { 
+    } catch (RuntimeException e) {
-      throw e; 
+      throw e;
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    } catch (Error e) { 
+    } catch (Error e) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-      throw e; 
-    }
-  }
-
-  /**
-   * Creates a new cache server MBean and returns its
-   * <code>ObjectName</code>.
-   *
-   * @since GemFire 5.7
-   */
-  public ObjectName manageCacheServer()
-    throws AdminException, MalformedObjectNameException {
-
-    try {
-      SystemMemberBridgeServerJmxImpl bridge =
-        (SystemMemberBridgeServerJmxImpl) addCacheServer();
-      return ObjectName.getInstance(bridge.getMBeanName());
-    } catch (AdminException e) { 
- 	  MBeanUtil.logStackTrace(Level.WARN, e);
- 	  throw e; 
-    } catch (RuntimeException e) { 
-	  MBeanUtil.logStackTrace(Level.WARN, e); 
-	  throw e;
-    } catch (VirtualMachineError err) {
-      SystemFailure.initiateFailure(err);
-      // If this ever returns, rethrow the error.  We're poisoned
-      // now, so don't let this thread continue.
-      throw err;
-    } catch (Error e) { 
-      // Whenever you catch Error or Throwable, you must also
-      // catch VirtualMachineError (see above).  However, there is
-      // _still_ a possibility that you are dealing with a cascading
-      // error condition, so you also need to check to see if the JVM
-      // is still usable:
-      SystemFailure.checkFailure();
-      MBeanUtil.logStackTrace(Level.ERROR, e); 
-      throw e; 
-    }
-  }
-
-  /**
-   * Returns the MBean <code>ObjectName</code>s for all cache servers
-   * that serve this cache to clients.
-   *
-   * @since GemFire 4.0
-   */
-  public ObjectName[] manageCacheServers()
-    throws AdminException, MalformedObjectNameException {
-
-    try {
-      SystemMemberCacheServer[] bridges = getCacheServers();
-      ObjectName[] names = new ObjectName[bridges.length];
-      for (int i = 0; i < bridges.length; i++) {
-        SystemMemberBridgeServerJmxImpl bridge =
-          (SystemMemberBridgeServerJmxImpl) bridges[i];
-        names[i] = ObjectName.getInstance(bridge.getMBeanName());
-      }
-
-      return names;
-    } catch (AdminException e) { 
-  	  MBeanUtil.logStackTrace(Level.WARN, e); 
-  	  throw e;
-    } catch (RuntimeException e) { 
-      MBeanUtil.logStackTrace(Level.WARN, e); 
-      throw e; 
-    } catch (VirtualMachineError err) {
-      SystemFailure.initiateFailure(err);
-      // If this ever returns, rethrow the error.  We're poisoned
-      // now, so don't let this thread continue.
-      throw err;
-    } catch (Error e) { 
-      // Whenever you catch Error or Throwable, you must also
-      // catch VirtualMachineError (see above).  However, there is
-      // _still_ a possibility that you are dealing with a cascading
-      // error condition, so you also need to check to see if the JVM
-      // is still usable:
-      SystemFailure.checkFailure();
-      MBeanUtil.logStackTrace(Level.ERROR, e); 
-   * Returns the MBean <code>ObjectName</code>s for all bridge servers
-   * that serve this cache.
+   * Creates a new cache server MBean and returns its <code>ObjectName</code>.
+   *
+   * @since GemFire 5.7
+   */
+  public ObjectName manageCacheServer() throws AdminException, MalformedObjectNameException {
+
+    try {
+      SystemMemberBridgeServerJmxImpl bridge = (SystemMemberBridgeServerJmxImpl) addCacheServer();
+      return ObjectName.getInstance(bridge.getMBeanName());
+    } catch (AdminException e) {
+      MBeanUtil.logStackTrace(Level.WARN, e);
+      throw e;
+    } catch (RuntimeException e) {
+      MBeanUtil.logStackTrace(Level.WARN, e);
+      throw e;
+    } catch (VirtualMachineError err) {
+      SystemFailure.initiateFailure(err);
+      // If this ever returns, rethrow the error. We're poisoned
+      // now, so don't let this thread continue.
+      throw err;
+    } catch (Error e) {
+      // Whenever you catch Error or Throwable, you must also
+      // catch VirtualMachineError (see above). However, there is
+      // _still_ a possibility that you are dealing with a cascading
+      // error condition, so you also need to check to see if the JVM
+      // is still usable:
+      SystemFailure.checkFailure();
+      MBeanUtil.logStackTrace(Level.ERROR, e);
+      throw e;
+    }
+  }
+
+  /**
+   * Returns the MBean <code>ObjectName</code>s for all cache servers that serve this cache to
+   * clients.
+   *
+   * @since GemFire 4.0
+   */
+  public ObjectName[] manageCacheServers() throws AdminException, MalformedObjectNameException {
+
+    try {
+      SystemMemberCacheServer[] bridges = getCacheServers();
+      ObjectName[] names = new ObjectName[bridges.length];
+      for (int i = 0; i < bridges.length; i++) {
+        SystemMemberBridgeServerJmxImpl bridge = (SystemMemberBridgeServerJmxImpl) bridges[i];
+        names[i] = ObjectName.getInstance(bridge.getMBeanName());
+      }
+
+      return names;
+    } catch (AdminException e) {
+      MBeanUtil.logStackTrace(Level.WARN, e);
+      throw e;
+    } catch (RuntimeException e) {
+      MBeanUtil.logStackTrace(Level.WARN, e);
+      throw e;
+    } catch (VirtualMachineError err) {
+      SystemFailure.initiateFailure(err);
+      // If this ever returns, rethrow the error. We're poisoned
+      // now, so don't let this thread continue.
+      throw err;
+    } catch (Error e) {
+      // Whenever you catch Error or Throwable, you must also
+      // catch VirtualMachineError (see above). However, there is
+      // _still_ a possibility that you are dealing with a cascading
+      // error condition, so you also need to check to see if the JVM
+      // is still usable:
+      SystemFailure.checkFailure();
+      MBeanUtil.logStackTrace(Level.ERROR, e);
+      throw e;
+    }
+  }
+
+  /**
+   * Returns the MBean <code>ObjectName</code>s for all bridge servers that serve this cache.
-  public ObjectName[] manageBridgeServers()
-    throws AdminException, MalformedObjectNameException {
+  public ObjectName[] manageBridgeServers() throws AdminException, MalformedObjectNameException {
-  //   ManagedResource implementation
+  // ManagedResource implementation
-  
+
-  
-	public String getMBeanName() {
-		return this.mbeanName;
-	}
-  
-	public ModelMBean getModelMBean() {
-		return this.modelMBean;
-	}
-	public void setModelMBean(ModelMBean modelMBean) {
-		this.modelMBean = modelMBean;
-	}
-  
+
+  public String getMBeanName() {
+    return this.mbeanName;
+  }
+
+  public ModelMBean getModelMBean() {
+    return this.modelMBean;
+  }
+
+  public void setModelMBean(ModelMBean modelMBean) {
+    this.modelMBean = modelMBean;
+  }
+
-  
+
-   * Un-registers all the statistics & cache managed resource created for this 
-   * member. After un-registering the resource MBean instances, clears 
-   * this.memberResources collection.
+   * Un-registers all the statistics & cache managed resource created for this member. After
+   * un-registering the resource MBean instances, clears this.memberResources collection.
-   * Creates ConfigurationParameterJmxImpl, StatisticResourceJmxImpl and 
-   * SystemMemberCacheJmxImpl. But cleans up only StatisticResourceJmxImpl and 
-   * SystemMemberCacheJmxImpl which are of type ManagedResource.  
+   * Creates ConfigurationParameterJmxImpl, StatisticResourceJmxImpl and SystemMemberCacheJmxImpl.
+   * But cleans up only StatisticResourceJmxImpl and SystemMemberCacheJmxImpl which are of type
+   * ManagedResource.
-      
+
-      
+
-    
+
-      
+
-      
+
-   * Cleans up managed resources created for the region that was (created and)
-   * destroyed in a cache represented by this Managed Resource.
+   * Cleans up managed resources created for the region that was (created and) destroyed in a cache
+   * represented by this Managed Resource.
-   * @param regionPath
-   *          path of the region that got destroyed
+   * @param regionPath path of the region that got destroyed
-    
+
-      for (Iterator<Entry<String, SystemMemberRegionJmxImpl>> it = entries.iterator(); it.hasNext();) {
+      for (Iterator<Entry<String, SystemMemberRegionJmxImpl>> it = entries.iterator(); it
+          .hasNext();) {
-        ObjectName                objName         = managedResource.getObjectName();
-        
+        ObjectName objName = managedResource.getObjectName();
+
-          
+
-  
+
-   * Checks equality of the given object with <code>this</code> based on the
-   * type (Class) and the MBean Name returned by <code>getMBeanName()</code>
-   * methods.
+   * Checks equality of the given object with <code>this</code> based on the type (Class) and the
+   * MBean Name returned by <code>getMBeanName()</code> methods.
-   * @param obj
-   *          object to check equality with
-   * @return true if the given object is if the same type and its MBean Name is
-   *         same as <code>this</code> object's MBean Name, false otherwise
+   * @param obj object to check equality with
+   * @return true if the given object is if the same type and its MBean Name is same as
+   *         <code>this</code> object's MBean Name, false otherwise
-    if ( !(obj instanceof SystemMemberCacheJmxImpl) ) {
+    if (!(obj instanceof SystemMemberCacheJmxImpl)) {
-    
+
-  
+
-   * Returns hash code for <code>this</code> object which is based on the MBean 
-   * Name generated. 
+   * Returns hash code for <code>this</code> object which is based on the MBean Name generated.
