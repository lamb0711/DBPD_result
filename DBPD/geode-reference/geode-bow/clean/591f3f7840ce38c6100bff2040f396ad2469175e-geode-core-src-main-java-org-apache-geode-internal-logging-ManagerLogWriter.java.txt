GEODE-2644: Make LogWriterAppender optional and support log4j2.xml

LogWriterAppender is now configured in log4j2.xml and it supports
sessions that correspond with Cache lifecycle. This allows Geode to
pause and resume LogWriterAppender and GeodeConsoleAppender without
resorting to dynamically adding and removing appenders.

When the Cache exists, log events stop going to the Console and instead
go to the Geode log file. Whenever the Cache does not exist, log events
go only to the Console.

These changes remove as much of the Log4j2 Core manipulation as
possible.

Also fixed:
* GEODE-5789: Geode now updates log level of all Geode loggers.

List of changes:
* Change LogWriterAppender to be pausable and session-oriented
* Add GeodeConsoleAppender which is pausable
* Log4j2 Core dependency is now optional
* Internal Logging interfaces allow Logging service to be pluggable
* Log4j2 xml integration testing now uses JUnit Rule from Log4j2
* Reduce coupling between Logging and the rest of Geode
* Greatly increase test coverage for Logging

+import org.apache.geode.LogWriter;
-import org.apache.geode.internal.logging.log4j.AlertAppender;
- * Implementation of {@link LogWriterI18n} for distributed system members. It's just like
+ * Implementation of {@link LogWriter} for distributed system members. It's just like
-public class ManagerLogWriter extends LocalLogWriter {
+public class ManagerLogWriter extends LocalLogWriter implements LogFileDetails {
+  private final boolean loner;
+
+   * @param loner if the distributed member is not part of a cluster
-  public ManagerLogWriter(int level, PrintStream printStream) {
-    this(level, printStream, null);
+  public ManagerLogWriter(final int level, final PrintStream printStream, final boolean loner) {
+    this(level, printStream, null, loner);
+   * @param loner if the distributed member is not part of a cluster
-  public ManagerLogWriter(int level, PrintStream printStream, String connectionName) {
+  public ManagerLogWriter(final int level, final PrintStream printStream,
+      final String connectionName, final boolean loner) {
+    this.loner = loner;
-  public void setConfig(LogConfig config) {
+  public void setConfig(final LogConfig config) {
+  public LogConfig getConfig() {
+    return config;
+  }
+
+  @Override
+  @Override
+  @Override
+  @Override
+  public boolean useChildLogging() {
+    return useChildLogging;
+  }
+
-  public boolean useChildLogging() {
-    return useChildLogging;
-  }
-
-  private String getMetaLogFileName(String baseLogFileName, int mainLogId) {
+  private String getMetaLogFileName(final String baseLogFileName, final int mainLogId) {
-  private synchronized void switchLogs(File newLog, boolean newIsMain) {
+  private synchronized void switchLogs(final File newLog, final boolean newIsMain) {
-              PrintStream tempPrintStream = OSProcess.redirectOutput(tempFile,
-                  AlertAppender.getInstance().isAlertingDisabled()/* See #49492 */);
+              // do not redirect if loner -- see #49492
+              PrintStream tempPrintStream = OSProcess.redirectOutput(tempFile, !loner);
-        PrintStream printStream = OSProcess.redirectOutput(activeLogFile,
-            AlertAppender.getInstance().isAlertingDisabled());
+        PrintStream printStream = OSProcess.redirectOutput(activeLogFile, !loner);
-  public static File getLogNameForOldMainLog(File log, boolean useOldFile) {
+  public static File getLogNameForOldMainLog(final File log, final boolean useOldFile) {
-  private void checkDiskSpace(File newLog) {
+  private void checkDiskSpace(final File newLog) {
-  private void rollLog(boolean ifFull) {
+  private void rollLog(final boolean ifFull) {
-  public void writeFormattedMessage(String message) {
+  public void writeFormattedMessage(final String message) {
