Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class RegionSubRegionsSizeResponse extends AdminResponse implements
-    Cancellable {
-  
+public class RegionSubRegionsSizeResponse extends AdminResponse implements Cancellable {
+
-  
-  public RegionSubRegionsSizeResponse() {
-  }
+
+  public RegionSubRegionsSizeResponse() {}
-   * Returns a <code>RegionSubRegionsSizeResponse</code> that will be returned to the
-   * specified recipient. The message will contains a copy of the region snapshot
+   * Returns a <code>RegionSubRegionsSizeResponse</code> that will be returned to the specified
+   * recipient. The message will contains a copy of the region snapshot
-    GemFireCacheImpl cache = (GemFireCacheImpl)CacheFactory.getInstance(sys);
+    GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getInstance(sys);
-    /* This root exists only on admin side as a root of all root-region just to 
-     * create a tree-like structure */
+    /*
+     * This root exists only on admin side as a root of all root-region just to create a tree-like
+     * structure
+     */
-   * Populates the collection of sub-region snapshots for the parentSnapShot
-   * with snapshots for the regions given.
+   * Populates the collection of sub-region snapshots for the parentSnapShot with snapshots for the
+   * regions given.
-   * @param parentSnapShot
-   *          RegionSubRegionSnapshot of a parent region
-   * @param regions
-   *          collection of sub-regions of the region represented by
-   *          parentSnapShot
-   * @param cache
-   *          cache instance is used for to get the LogWriter instance to log
-   *          exceptions if any
+   * @param parentSnapShot RegionSubRegionSnapshot of a parent region
+   * @param regions collection of sub-regions of the region represented by parentSnapShot
+   * @param cache cache instance is used for to get the LogWriter instance to log exceptions if any
-  //Re-factored to fix #41060
-  void populateRegionSubRegions(RegionSubRegionSnapshot parentSnapShot,
-                                Set regions, GemFireCacheImpl cache) {
+  // Re-factored to fix #41060
+  void populateRegionSubRegions(RegionSubRegionSnapshot parentSnapShot, Set regions,
+      GemFireCacheImpl cache) {
-    
-    Region                  subRegion         = null;
+
+    Region subRegion = null;
-      subRegion = (Region)iter.next();
-      
+      subRegion = (Region) iter.next();
+
-        logger.debug("Failed to create snapshot for region: {}. Continuing with next region.", subRegion.getFullPath(), e);
+        logger.debug("Failed to create snapshot for region: {}. Continuing with next region.",
+            subRegion.getFullPath(), e);
-  
+
-    this.snapshot = (RegionSubRegionSnapshot)DataSerializer.readObject(in);
+    this.snapshot = (RegionSubRegionSnapshot) DataSerializer.readObject(in);
