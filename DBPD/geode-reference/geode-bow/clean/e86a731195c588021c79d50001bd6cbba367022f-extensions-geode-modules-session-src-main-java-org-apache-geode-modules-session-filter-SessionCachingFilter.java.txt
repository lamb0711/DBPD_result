Merge branch 'release/1.3.0'

-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.modules.session.internal.filter.GemfireHttpSession;
-import org.apache.geode.modules.session.internal.filter.GemfireSessionManager;
-import org.apache.geode.modules.session.internal.filter.SessionManager;
-import org.apache.geode.modules.session.internal.filter.util.ThreadLocalSession;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.servlet.*;
-import javax.servlet.http.*;
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletContext;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletRequestWrapper;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpServletResponseWrapper;
+import javax.servlet.http.HttpSession;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.modules.session.internal.filter.GemfireHttpSession;
+import org.apache.geode.modules.session.internal.filter.GemfireSessionManager;
+import org.apache.geode.modules.session.internal.filter.SessionManager;
+import org.apache.geode.modules.session.internal.filter.attributes.DeltaQueuedSessionAttributes;
+import org.apache.geode.modules.session.internal.filter.attributes.DeltaSessionAttributes;
+
+    private final ServletContext context;
+
-        ResponseWrapper response) {
+        ResponseWrapper response, ServletContext context) {
+      this.context = context;
-      super.getSession(false);
-          if (session.getNativeSession() == null) {
-            try {
-              ThreadLocalSession.set(session);
-              HttpSession nativeSession = super.getSession();
-              session.failoverSession(nativeSession);
-              session.putInRegion();
-            } finally {
-              ThreadLocalSession.remove();
-            }
+          if (session.getServletContext() == null) {
+            session.setServletContext(context);
+          HttpSession nativeSession = super.getSession();
-            session = (GemfireHttpSession) manager.wrapSession(null);
-            ThreadLocalSession.set(session);
-            HttpSession nativeSession = super.getSession();
-            if (session.getNativeSession() == null) {
-              session.setNativeSession(nativeSession);
-            } else {
-              assert (session.getNativeSession() == nativeSession);
-            }
+            session = (GemfireHttpSession) manager.wrapSession(context,
+                nativeSession.getMaxInactiveInterval());
-            ThreadLocalSession.remove();
+            nativeSession.invalidate();
-      // Get the existing cookies
-      Cookie[] cookies = getCookies();
-
-    private String getCookieString(Cookie c) {
-      StringBuilder cookie = new StringBuilder();
-      cookie.append(c.getName()).append("=").append(c.getValue());
-
-      if (c.getPath() != null) {
-        cookie.append("; ").append("Path=").append(c.getPath());
-      }
-      if (c.getDomain() != null) {
-        cookie.append("; ").append("Domain=").append(c.getDomain());
-      }
-      if (c.getSecure()) {
-        cookie.append("; ").append("Secure");
-      }
-
-      cookie.append("; HttpOnly");
-
-      return cookie.toString();
-    }
-
-    final RequestWrapper wrappedRequest = new RequestWrapper(manager, httpReq, wrappedResponse);
+    final RequestWrapper wrappedRequest =
+        new RequestWrapper(manager, httpReq, wrappedResponse, filterConfig.getServletContext());
+    registerInstantiators();
+  private void registerInstantiators() {
+    GemfireHttpSession.registerInstantiator();
+    DeltaQueuedSessionAttributes.registerInstantiator();
+    DeltaSessionAttributes.registerInstantiator();
+  }
+
-
-  /**
-   * Return the GemFire session which wraps a native session
-   *
-   * @param nativeSession the native session for which the corresponding GemFire session should be
-   *        returned.
-   * @return the GemFire session or null if no session maps to the native session
-   */
-  public static HttpSession getWrappingSession(HttpSession nativeSession) {
-    /*
-     * This is a special case where the GemFire session has been set as a ThreadLocal during session
-     * creation.
-     */
-    GemfireHttpSession gemfireSession = (GemfireHttpSession) ThreadLocalSession.get();
-    if (gemfireSession != null) {
-      gemfireSession.setNativeSession(nativeSession);
-      return gemfireSession;
-    }
-    return getSessionManager().getWrappingSession(nativeSession.getId());
-  }
