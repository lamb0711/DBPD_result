GEODE-5013 Replace org.json with Jackson in GfJsonObject

This removes org.json as a dependency in geode-core and associated test
modules.  GfJsonObject and GfJsonArray are ported to use the same basic
Jackson ObjectMapper setup as QueryResultFormatter so that we now have a
uniform mechanism for managing JSON documents for querying/gfsh and
folks can use Jackson annotations like @JsonIgnore on their classes.

The geode-web-api and geode-pulse modules still use the geode-json
module in tests.  When/if they are ported to use GfJsonObject/Array we can delete
the geode-json module.

-import org.json.JSONObject;
+
+import org.apache.geode.management.internal.cli.json.GfJsonException;
+import org.apache.geode.management.internal.cli.json.GfJsonObject;
+
-  static void verifyJsonWithJavaObject(String json, TestObjectForJSONFormatter testObject) {
-    JSONObject jsonObject = new JSONObject(json);
+  static void verifyJsonWithJavaObject(String json, TestObjectForJSONFormatter testObject)
+      throws GfJsonException {
+    GfJsonObject jsonObject = new GfJsonObject(json);
-    // vlidation for array types
+    // validation for array types
-        jsonObject.getJSONArray(testObject.getW_byteArrayFN()).getInt(1));
+        jsonObject.getJSONArray(testObject.getW_byteArrayFN()).getInternalJsonArray().get(1)
+            .asInt());
-        jsonObject.getJSONArray(testObject.getW_doubleArrayFN()).getDouble(0), 0);
+        jsonObject.getJSONArray(testObject.getW_doubleArrayFN()).getInternalJsonArray().get(0)
+            .asDouble(0),
+        0);
-        jsonObject.getJSONArray(testObject.getW_strArrayFN()).getString(2));
+        jsonObject.getJSONArray(testObject.getW_strArrayFN()).getInternalJsonArray().get(2)
+            .textValue());
-        jsonObject.getJSONArray(testObject.getC_listFN()).getString(0));
+        jsonObject.getJSONArray(testObject.getC_listFN()).getInternalJsonArray().get(0)
+            .textValue());
-        jsonObject.getJSONArray(testObject.getC_stackFN()).getString(2));
+        jsonObject.getJSONArray(testObject.getC_stackFN()).getInternalJsonArray().get(2)
+            .textValue());
-            .getJSONObject(0).getString("fname"));
+            .getInternalJsonObject(0).getString("fname"));
