GEODE-3436: revert recent refactoring of GFSH commands

Revert "GEODE-3264: Refactoring MemberCommands"
This reverts commit d27f8b956de7d9c5d95ebdc68dfc67ee8b2d7b51.

Revert "GEODE-3259: Refactoring DurableClientCommands"
This reverts commit 440c87f81fab96f9ce38a2d53ded75e5fe8390d7.

Revert "GEODE-3254: Refactoring ConfigCommands"
This reverts commit 97c4e9a59f17c7bc914e39dd048b0a4cd96293c4.

Revert "GEODE-3262: Refactoring IndexCommands"
This reverts commit ed293e817e547fb5ecd399bf4ba10d694af51e0a.

Revert "GEODE-3260: Refactoring FunctionCommands"
This reverts commit 90f5440de8ec747f301a309a0a34101e8defcd29.

Revert "GEODE-3258: Refactoring DiskStoreCommands"
This reverts commit 5d6cad7755ec3c4fe931e3d0f8e89fb181038543.

Revert "GEODE-3337: Refactoring LauncherLifecycleCommandsDUnitTest"
This reverts commit 210ff9f15460c993f2bf7fd682d50ee65462cd23.

Revert "GEODE-3265: Refactoring MiscellaneousCommands"
This reverts commit 63169699e933f6e0fdd90b95ed039e4e3c92c32c.

Revert "GEODE-3261: Refactoring GfshHelpCommands"
This reverts commit cf91426692349d0c81ce77394935576d9cc336e8.

Revert "GEODE-3267: Refactoring QueueCommands"
This reverts commit fd47ed660168864a6f81b2a4cd7dbceebc99a282.

Revert "GEODE-3270: Refactoring (renaming) StatusCommands"
This reverts commit 359e3fff6482ecfb375939d387f4dad3a636246b.

Revert "GEODE-3267: Refactoring QueueCommands - updated based on feedback"
This reverts commit 957d583e54dc34c029885f32a54f0b25a3ac1094.

Revert "GEODE-3268: Refactoring RegionCommands"
This reverts commit 64de3b69c2aecb4930bcfd0a1161569b1d5fda89.

Revert "GEODE-3266: Refactoring PDXCommands"
This reverts commit 67185abcdd68b908dea6888cb94286b8aa9ea49f.

Revert "GEODE-3257: Refactoring DeployCommands"
This reverts commit 9d967446a44a78b612f605b6a8f8eedcfc625b3a.

Revert "GEODE-3255: Refactor CreateAlterDestroyRegionCommands and tests"
This reverts commit 756efe77c86bb03ac9984655e7bd040659e85890.

Revert "GEODE-3230: Cleaning up unused (Cli)Strings"
This reverts commit a7f29525df2981c1c99abac96ea83cb965295970.

This closes #711

- * Contains 'String' constants used as key to the Localized strings to be used in classes under
- * <code>org.apache.geode.management.internal.cli</code> for Command Line Interface (CLI).
- *
- * <pre>
- * NOTES:
- *
- * 1. CONVENTIONS: Defining constants for Command Name, option, argument, help:
- *
- * 1.1 Command Name: Command name in BOLD. Multiple words separated by single underscore ('_') E.g.
- * COMPACT_DISK_STORE
- *
+ * - * Contains 'String' constants used as key to the Localized strings to be used in classes under
+ * <code>org.apache.geode.management.internal.cli</code> for Command Line Interface (CLI). NOTES: 1.
+ * CONVENTIONS: Defining constants for Command Name, option, argument, help: 1.1 Command Name:
+ * Command name in BOLD. Multiple words separated by single underscore ('_') E.g. COMPACT_DISK_STORE
- * in BOLD. E.g.COMPACT_DISK_STORE__HELP
- *
- * 1.3 Command Option: Command name in BOLD followed by double underscore ('__') followed by option
- * name in BOLD - multiple words concatenated by removing space. E.g. for option "--disk-dirs" -
- * COMPACT_DISK_STORE__DISKDIRS
- *
- * 1.4 Command Option Help: As mentioned in 1.3, followed by double underscore ('__') followed by
- * HELP in BOLD. E.g. COMPACT_DISK_STORE__DISKDIRS__HELP
- *
- * 1.5 Info/Error Message used in a command: Command name in BOLD followed by double underscore
- * ('__') followed by MSG in BOLD followed by brief name for the message (similar to used in
- * LocalizedStrings). E.g. COMPACT_DISK_STORE__MSG__ERROR_WHILE_COMPACTING = "Error occurred while
- * compacting disk store."
- *
+ * in BOLD. E.g.COMPACT_DISK_STORE__HELP 1.3 Command Option: Command name in BOLD followed by double
+ * underscore ('__') followed by option name in BOLD - multiple words concatenated by removing
+ * space. E.g. for option "--disk-dirs" - COMPACT_DISK_STORE__DISKDIRS 1.4 Command Option Help: As
+ * mentioned in 1.3, followed by double underscore ('__') followed by HELP in BOLD. E.g.
+ * COMPACT_DISK_STORE__DISKDIRS__HELP 1.5 Info/Error Message used in a command: Command name in BOLD
+ * followed by double underscore ('__') followed by MSG in BOLD followed by brief name for the
+ * message (Similar to used in LocalizedStrings). E.g.
+ * COMPACT_DISK_STORE__MSG__ERROR_WHILE_COMPACTING = "Error occurred while compacting disk store."
- * 2. Defining Topic constants:
- *
- * 2.1 The constants' names should begin with "TOPIC_" E.g.
- * TOPIC_GEODE_REGION
- *
- * 2.2 Topic brief description should be defined with suffix "__DESC". E.g.
+ * 2. Defining Topic constants: 2.1 The constants' names should begin with "TOPIC_" E.g.
+ * TOPIC_GEODE_REGION 2.2 Topic brief description should be defined with suffix "__DESC". E.g.
- * </pre>
-  public static final String TOPIC_SHARED_CONFIGURATION_DESC =
+  public static final String TOPIC_SHARED_CONFIGURATION_HELP =
+  public static final String JAVA_HOME_NOT_FOUND_ERROR_MESSAGE =
+      "Unable to locate the Java executables and dependencies.  Please set the JAVA_HOME environment variable.";
+  public static final String NO_MEMBERS_IN_GROUP_ERROR_MESSAGE =
+      "No caching members for group {0} could be found.  Please verify the group and try again.";
+  public static final String GROUP_EMPTY_ERROR_MESSAGE = "No members found in group : {0}";
+  public static final String LOCATOR_HEADER = "Locator";
+  public static final String ERROR__MSG__HEADER = "Error";
+  // This should be thrown for FunctionInvocationTargetException
+  public static final String GFSH_MUST_BE_CONNECTED_VIA_JMX_FOR_LAUNCHING_0 =
+      "Gfsh must be connected via JMX for launching {0}";
+  public static final String ATTACH_API_IN_0_NOT_FOUND_ERROR_MESSAGE =
+      "The JDK {0} is required by 'start', 'status' and 'stop' commands for Locators and Servers. Please set JAVA_HOME to the JDK Directory or add the JDK {0} to the classpath, restart Gfsh and try again.";
+  public static final String NO_NON_LOCATOR_MEMBERS_FOUND = "No non-locator members found.";
+  public static final String SHARED_CONFIGURATION_NO_LOCATORS_WITH_SHARED_CONFIGURATION =
+      "No locators with cluster configuration enabled.";
-
+  public static final String GFSHPARSER__MSG__REQUIRED_ARGUMENT_0 = "Required Argument: \"{0}\"";
+  public static final String GFSHPARSER__MSG__VALUE_REQUIRED_FOR_OPTION_0 =
+      "Value is required for parameter \"{0}\"";
+  public static final String GFSHPARSER__MSG__AMBIGUOUS_COMMAND_0_FOR_ASSISTANCE_USE_1_OR_HINT_HELP =
+      "Ambiguous command \"{0}\" (for assistance press \"{1}\" or type \"hint\" or \"help <command name>\" & then hit ENTER)";
+  public static final String GFSHPARSER__MSG__COMMAND_ARGUMENT_0_IS_REQUIRED_USE_HELP =
+      "Command parameter \"{0}\" is required. Use \"help <command name>\" for assistance.";
+  public static final String GFSHPARSER__MSG__COMMAND_OPTION_0_IS_REQUIRED_USE_HELP =
+      "Parameter \"{0}\" is required. Use \"help <command name>\" for assistance.";
+  public static final String GFSHPARSER__MSG__VALUE_0_IS_NOT_APPLICABLE_FOR_1 =
+      "Value \"{0}\" is not applicable for \"{1}\".";
+  public static final String GFSHPARSER__MSG__INVALID_COMMAND_STRING_0 =
+      "Invalid command String: {0}";
+  public static final String GFSHPARSER__MSG__COMMAND_0_IS_NOT_VALID =
+      "Command \"{0}\" is not valid.";
+  public static final String GFSHPARSER__MSG__NO_MATCHING_COMMAND = "No matching command";
+  public static final String GFSHPARSER__MSG__USE_0_HELP_COMMAND_TODISPLAY_DETAILS =
+      "Use {0}help <command name> to display detailed usage information for a specific command.";
+  public static final String GFSHPARSER__MSG__HELP_CAN_ALSO_BE_OBTAINED_BY_0_KEY =
+      "Help with command and parameter completion can also be obtained by entering all or a portion of either followed by the \"{0}\" key.";
+  public static final String GFSHPARSER__MSG__0_IS_NOT_AVAILABLE_REASON_1 =
+      "\"{0}\" is not available. Reason: {1}";
+  public static final String GFSHPARSER__MSG__OTHER_COMMANDS_STARTING_WITH_0_ARE =
+      "Other commands starting with \"{0}\" are: ";
+  public static final String AVAILABILITYTARGET_MSG_DEFAULT_UNAVAILABILITY_DESCRIPTION =
+      "Requires connection.";
+
+  public static final String GFSH__PLEASE_CHECK_LOGS_AT_0 = "Please check logs {0}";
+
-      "IDs of the Async Event Queues that will be used for write-behind operations.";
+      "IDs of the Async Event Queues that will be used for write-behind operations."; // TODO -
+                                                                                      // Abhishek Is
+                                                                                      // this
+                                                                                      // correct?
+
+  public static final String ALTER_RUNTIME_CONFIG__MEMBER__NOT__FOUND = "Member : {0} not found";
+  public static final String COMPACT_OFFLINE_DISK_STORE__MSG__DISKSTORE_0_DOES_NOT_EXIST =
+      "Disk store \"{0}\" does not exist.";
+  public static final String COMPACT_OFFLINE_DISK_STORE__MSG__COMPACTION_ATTEMPTED_BUT_NOTHING_TO_COMPACT =
+      "Attempted to compact disk store, but there was nothing to do.";
-      "Disk store in \"{0}\" does not seem to exist. "
-          + "Verify whether the disk store exists in \"{0}\".";
+      "Verify whether the disk store exists in \"{0}\".";
+  public static final String CONNECT__MSG__CONNECTING_TO_MANAGER_HTTP_SERVICE_AT_0 =
+      "Connecting to Manager's HTTP service at {0} ..";
+  public static final String CONNECT__MSG__ALREADY_CONNECTED = "Already connected to: {0}";
+  public static final String CONNECT__MSG__SERVICE_UNAVAILABLE_ERROR =
+      "Could not find a Geode jmx-manager service at {0}.";
+  public static final String CONNECT__MSG__COULD_NOT_CONNECT_TO_LOCATOR_0 =
+      "Could not connect to Geode Locator service at {0}.";
+  public static final String CONNECT__MSG__COULD_NOT_CONNECT_TO_LOCATOR_0_POSSIBLY_SSL_CONFIG_ERROR =
+      "Could not connect to Locator at {0}." + Gfsh.LINE_SEPARATOR
+          + "Possible reason: Wrong or no SSL configuration provided.";
+  public static final String CONNECT__MSG__COULD_NOT_CONNECT_TO_MANAGER_0_POSSIBLY_SSL_CONFIG_ERROR =
+      "Could not connect to Manager at {0}." + Gfsh.LINE_SEPARATOR
+          + "Possible reason: Wrong or no SSL configuration provided.";
+  public static final String CREATE_INDEX__ERROR__MSG =
+      "Exception \"{0}\" occurred on following members";
-      "Index \"{0}\" already exists. Create failed due to duplicate name.";
+      "Index \"{0}\" already exists.  " + "Create failed due to duplicate name.";
-      "Index \"{0}\" already exists. Create failed due to duplicate definition.";
+      "Index \"{0}\" already exists.  " + "Create failed due to duplicate definition.";
+  public static final String CREATE_DEFINED_INDEXES__MEMBER__MSG = CREATE_INDEX__MEMBER__MSG;
+  public static final String CREATE_DEFINED_INDEXES__EXCEPTION__OCCURRED__ON =
+      CREATE_INDEX__EXCEPTION__OCCURRED__ON;
+
-      "IDs of the Async Event Queues that will be used for write-behind operations.";
+      "IDs of the Async Event Queues that will be used for write-behind operations."; // TODO -
+                                                                                      // Abhishek Is
+                                                                                      // this
+                                                                                      // correct?
+  public static final String CREATE_REGION__MSG__SPECIFY_VALID_REGION_PATH_FOR_USE_ATTR_FROM =
+      "Specify a valid region path for " + CliStrings.CREATE_REGION__USEATTRIBUTESFROM;
+  public static final String CREATE_REGION__MSG__ERROR_ON_MEMBER_0 = "Error on member: {0}. "; // leave
+                                                                                               // space
+                                                                                               // in
+                                                                                               // the
+                                                                                               // end
+                                                                                               // for
+                                                                                               // further
+                                                                                               // message
+  public static final String CREATE_REGION__MSG__PARTITION_RESOLVER_ONLY_FOR_REGION_TYPE_PARTITION =
+      "partition resolver property is only applicable to PARTITION region type";
+  public static final String DESCRIBE_REGION__MSG__NOT_FOUND = "Region not found";
+  public static final String DESCRIBE_REGION__MSG__ERROR = "Error";
+  public static final String DESTROY_INDEX__INVALID__NAME = "Invalid index name";
+  public static final String DESTROY_REGION__MSG__AND_ITS_SUBREGIONS = "and its subregions";
+  public static final String DESTROY_REGION__MSG__COULD_NOT_FIND_MEMBER_WITH_REGION_0 =
+      "Could not find a Geode member which hosts a region with Region path \"{0}\"";
+  public static final String EXECUTE_FUNCTION__MSG__MISSING_OPTIONS =
+      "Provide one of region/member/groups";
+  public static final String EXECUTE_FUNCTION__MSG__NO_FUNCTION_FOR_FUNCTIONID =
+      "For the functionId provided could not retrieve function. Function may not be registered";
+  public static final String EXECUTE_FUNCTION__MSG__NO_FUNCTION_EXECUTION =
+      "FunctionService could not create execution. Can not execute Function";
+  public static final String EXECUTE_FUNCTION__MSG__HAS_NO_MEMBER = "No member to execute on";
+  public static final String EXPORT_CONFIG__MSG__MEMBER_EXCEPTION =
+      "Exception while exporting config for {0}: {0}";
+  public static final String EXPORT_DATA__REGION__NOT__FOUND = "Region {0} not found";
+  public static final String EXPORT_LOGS__MSG__CANNOT_EXECUTE = "Cannot execute";
+  public static final String EXPORT_LOGS__MSG__CANNOT_MERGE =
+      "Could not merge the files in target directory";
+  public static final String EXPORT_LOGS__MSG__SPECIFY_ONE_OF_OPTION =
+      "Specify one of group or member ID";
+  public static final String EXPORT_LOGS__MSG__FUNCTION_EXCEPTION = "Error in executing function";
+  public static final String EXPORT_LOGS__MSG__TARGET_DIR_CANNOT_BE_CREATED =
+      "Target Directory {0} cannot be created";
+  public static final String EXPORT_LOGS__MSG__SPECIFY_ENDTIME = "Specify End Time.";
+  public static final String EXPORT_LOGS__MSG__SPECIFY_STARTTIME = "Specify Start Time.";
+  public static final String EXPORT_LOGS__MSG__INVALID_TIMERANGE = "Invalid Time Range.";
+  public static final String EXPORT_LOGS__MSG__INVALID_MEMBERID = "Member : {0} is not valid.";
+  public static final String EXPORT_LOGS__MSG__NO_GROUPMEMBER_FOUND =
+      "Groups specified have no members";
+  public static final String EXPORT_LOGS__MSG__FAILED_TO_EXPORT_LOG_FILES_FOR_MEMBER_0 =
+      "Could not export log files for member {0}";
+
+  public static final String EXPORT_STACKTRACE_ALL_STACKS = "all-stacks";
+  public static final String EXPORT_STACKTRACE_ALL_STACKS__HELP =
+      "When set to true exports all the stacktraces.";
-  public static final String EXPORT_STACKTRACE__SUCCESS = "Stack-trace(s) exported to file: {0}";
+  public static final String EXPORT_STACKTRACE__MEMBER__NOT__FOUND = "Member not found";
+  public static final String EXPORT_STACKTRACE__SUCCESS = "stack-trace(s) exported to file: {0}";
+  public static final String GC__MSG__CANNOT_EXECUTE = "Cannot execute";
+
+  public static final String GET__MSG__VALUE_EMPTY = "Value is either empty or Null";
+  public static final String HELP__COMMAND = "command";
+  public static final String HELP__COMMAND__HELP =
+      "Name of the command for which help will be displayed.";
+  public static final String PARAM_CONTEXT_HELP = "help:disable-string-converter";
+  public static final String HINT__MSG__SHELL_NOT_INITIALIZED =
+      "Shell is not initialized properly. Please restart the shell. Check gfsh-<timestamp>.log for errors.";
+  public static final String HISTORY__MSG__FILE_NULL = "File should not be null";
+  public static final String HISTORY__MSG__DID_NOT_CLEAR_HISTORY =
+      "Did not clear history of GFSH commands";
+  public static final String IMPORT_DATA__REGION__NOT__FOUND = "Region {0} not found.";
+  public static final String LOCATE_ENTRY__MSG__VALUE_EMPTY = "Value is either empty or Null";
+  public static final String LOCATE_ENTRY__MSG__REGION_NOT_FOUND = "Region <{0}> Not Found";
-  public static final String PUT__MSG__KEY_NOT_FOUND_REGION =
-      "Key {0} is not present in the region";
+  public static final String PUT__MSG__KEY_NOT_FOUND_REGION = "Key is not present in the region";
+  public static final String QUERY__MSG__NOT_SUPPORTED_ON_MEMBERS = CliStrings.QUERY
+      + " command should be used only from shell. Use QueryService API for running query inside Geode VMs";
+  public static final String REBALANCE__MSG__SIMULATED = "Simulated Successfully";
+  public static final String REBALANCE__MSG__TIMEOUT =
+      "Time out. Rebalance operation will continue on servers";
+  public static final String REBALANCE__MSG__REBALANCED = "Rebalanced Successfully";
+  public static final String REBALANCE__MSG__CANCELLED = "Rebalance Cancelled";
+  public static final String REBALANCE__MSG__WAIT_INTERRUPTED =
+      "Rebalance wait interrupted Cancelled";
+  public static final String REBALANCE__MSG__ERROR_IN_RETRIEVING_MBEAN =
+      "Could not retrieve MBean for region : {0}";
+  public static final String REBALANCE__MSG__NO_EXECUTION_FOR_REGION_0 =
+      "Could not execute rebalance for region: {0}";
+  public static final String REBALANCE__MSG__REGION_NOT_ASSOCIATED_WITH_MORE_THAN_ONE_MEMBER =
+      "No regions associated with more than 1 members";
+  public static final String REMOVE__MSG__VALUE_EMPTY = "Value is either empty or Null";
-
+  public static final String RUN__MSG_FILE_NOT_FOUND = "Could not find specified script file: ";
+
+  public static final String USEFUL_VARIABLES = "[A] System Variables\n"
+      + "1. SYS_USER          User name (read only)\n"
+      + "2. SYS_USER_HOME     User's home directory (read only)\n"
+      + "3. SYS_HOST_NAME     Host where GFSH is running (read only)\n"
+      + "4. SYS_CLASSPATH     CLASSPATH of the GFSH JVM (read only)\n"
+      + "5. SYS_JAVA_VERSION  Java version used by GFSH (read only)\n"
+      + "6. SYS_OS            OS name for the host where GFSH is running (read only)\n"
+      + "7. SYS_PWD           Current working directory (read only)\n\n"
+      + "[B] Application Variables\n"
+      + "1. APP_CONTEXT_PATH                Current context path (read only)\n"
+      + "2. APP_FETCH_SIZE                  Fetch size used when querying. Valid values are: 1-100\n"
+      + "3. APP_LAST_EXIT_STATUS            Numeric value for last command exit status. One of: 0 (success), 1 (error), 2 (crash) (read only)\n"
+      + "4. APP_COLLECTION_LIMIT            Number of items in the embedded collection of a result to be iterated. Valid values are: 1-100.\n"
+      + "5. APP_QUERY_RESULTS_DISPLAY_MODE  How command results should be shown. Valid values are: table and catalog.\n"
+      + "6. APP_QUIET_EXECUTION.            Whether commands should be executed in quiet mode. Valid values are: true and false.\n";
+
+  public static final String SHOW_LOG_MSG_INVALID_NUMBER = "Invalid number";
+  public static final String SHUTDOWN__MSG__CANNOT_EXECUTE = "Cannot execute";
+  public static final String SHUTDOWN__MSG__ERROR =
+      "Exception occurred while shutdown. Reason : {0}";
+  public static final String SHUTDOWN__MSG__CAN_NOT_SHUTDOWN_WITHIN_TIMEOUT =
+      "Could not shutdown within timeout. Shutdown will continue in background";
+
+  public static final String CHANGE_LOGLEVEL__MSG__INVALID_LOG_LEVEL =
+      "Specified log-level is invalid";
+  public static final String CHANGE_LOGLEVEL__MSG__SPECIFY_LOG_LEVEL = "Specify valid log-level";
-      "Cannot execute change log-level. The specified log-level may be invalid or missing.";
+      "Cannot execute change log-level.";
+  public static final String START_JVISUALVM__J = "J";
+  public static final String START_JVISUALVM__J__HELP =
+      "Arguments passed to the JVM on which Java VisualVM will run.";
+  /* 'start manager' command */
+  public static final String START_MANAGER = "start manager";
+  public static final String START_MANAGER__HELP =
+      "Start a Manager. Parameters --peer and --server will be removed for simplicity and Locator is always available for both.";
+  public static final String START_MANAGER__MEMBERNAME = "name";
+  public static final String START_MANAGER__MEMBERNAME__HELP =
+      "Member name for this Manager service.";
+  public static final String START_MANAGER__DIR = "dir";
+  public static final String START_MANAGER__DIR__HELP =
+      "Directory in which the Manager will be run. The default is the current directory.";
+  public static final String START_MANAGER__CLASSPATH = "classpath";
+  public static final String START_MANAGER__CLASSPATH__HELP =
+      "Location of user classes required by the Manager. This path is appended to the current classpath.";
+  public static final String START_MANAGER__PORT = "port";
+  public static final String START_MANAGER__PORT__HELP =
+      "Port the Manager will listen on for JMX-RMI client connections.";
+  public static final String START_MANAGER__BIND_ADDRESS = "bind-address";
+  public static final String START_MANAGER__BIND_ADDRESS__HELP =
+      "IP address the Manager listen on for JMX-RMI client connections. The default is to bind to all local addresses.";
+  public static final String START_MANAGER__GROUP__HELP =
+      "Group(s) this Manager will be a part of.";
+  public static final String START_MANAGER__MAXHEAP = "max-heap";
+  public static final String START_MANAGER__MAXHEAP__HELP =
+      "Maximum size of the heap in the same format as the JVM -Xmx parameter.";
+  public static final String START_MANAGER__INITIALHEAP = "initial-heap";
+  public static final String START_MANAGER__INITIALHEAP__HELP =
+      "Initial size of the heap in the same format as the JVM -Xms parameter.";
+  public static final String START_MANAGER__GEODEPROPS = "G";
+  public static final String START_MANAGER__GEODEPROPS__HELP =
+      "Geode property passed as a <name>=<value> pair.";
+  public static final String START_MANAGER__J = "J";
+  public static final String START_MANAGER__J__HELP =
+      "Argument passed to the JVM on which the Locator will run. For example, --J=-Dfoo.bar=true will set the property \"foo.bar\" to \"true\".";
+
+  // public static final String START_SERVER__START_LOCATOR = "start-locator";
+  // public static final String START_SERVER__START_LOCATOR__HELP =
+  // "To start embedded Locator with given endpoints in the format: host[port]. If no endpoints are
+  // given defaults (localhost[10334]) are assumed.";
+  // cacheServer.setLoadPollInterval(loadPollInterval)
+  // cacheServer.setLoadProbe(loadProbe);
+  // cacheServer.setMaxConnections(maxCons);
+  // cacheServer.setMaximumMessageCount(maxMessageCount);
+  // cacheServer.setMaximumTimeBetweenPings(maximumTimeBetweenPings);
+  // cacheServer.setMaxThreads(maxThreads);
+  // cacheServer.setMessageTimeToLive(messageTimeToLive);
+  // cacheServer.setSocketBufferSize(socketBufferSize)
+  // cacheServer.setTcpNoDelay(noDelay)
+
+  public static final String START_SERVER__LOAD__POLL__INTERVAL = "load-poll-interval";
+  public static final String START_SERVER__LOAD__POLL__INTERVAL__HELP =
+      "Set the frequency in milliseconds to poll the load probe on this cache server";
+
+
+  public static final String START_SERVER__TCP__NO__DELAY = "tcp-no-delay";
+  public static final String START_SERVER__TCP__NO__DELAY__HELP =
+      "Configures the tcpNoDelay setting of sockets used to send messages to clients. TcpNoDelay is enabled by default";
+
+
+  /* start databrowser command */
+  public static final String START_DATABROWSER = "start data-browser";
+  public static final String START_DATABROWSER__HELP = "Start Data Browser in a separate process.";
+  public static final String START_DATABROWSER__NOT_FOUND_ERROR_MESSAGE =
+      "The location of DataBrowser could not be found.  Please ensure DataBrowser was properly installed under Geode home (%1$s).";
+  public static final String START_DATABROWSER__RUN =
+      "Launched Geode DataBrowser (see Geode log files for issues on start)";
+  public static final String START_DATABROWSER__ERROR =
+      "An error occurred while launching DataBrowser - %1$s";
+
+  public static final String STOP_LOCATOR__SHUTDOWN_MEMBER_MESSAGE =
+      "Locator {0} has been requested to stop.";
+  public static final String STOP_SERVER__SHUTDOWN_MEMBER_MESSAGE =
+      "Cache Server {0} has been requested to stop.";
+  public static final String UPGRADE_OFFLINE_DISK_STORE__DISKSTORE_0_DOES_NOT_EXIST =
+      "Disk store \"{0}\" does not exist.";
+  public static final String UPGRADE_OFFLINE_DISK_STORE__UPGRADE_ATTEMPTED_BUT_NOTHING_TO_UPGRADE =
+      "Upgradation was attempted but nothing to upgrade.";
+  public static final String UPGRADE_OFFLINE_DISK_STORE__ERROR_WHILE_UPGRADATION_REASON_0 =
+      "Error occurred while performing disk store upgrade. Reason: \"{0}\"";
+  public static final String GATEWAY__MSG__OPTIONS = "Provide only one of member/group";
+  public static final String GATEWAY_MSG_MEMBER_0_NOT_FOUND = "Member : {0} not found";
+  public static final String GATEWAY_RECEIVER_IS_NOT_AVAILABLE_OR_STOPPED_ON_MEMBER =
+      "GatewayReceiver is not available or already stopped on member {0}";
-  /* Durable CQ Commands */
-  public static final String DURABLE_CQ_CLIENT_NOT_FOUND =
-      "No durable client found on server for durable client id {0}.";
+  /***
+   * CQ Commands
+   *
+   */
+
+  public static final String LIST_DURABLE_CQS__PER__MEMBER__MSG =
+      "Durable cqs on member : \"{0}\".";
+  public static final String LIST_DURABLE_CQS__FAILURE__MSG =
+      "Errors while retrieving cqs for durable client \"{0}\".";
+  public static final String LIST_DURABLE_CQS__EXCEPTION__OCCURRED__ON =
+      "Members with exceptions while retrieving durable cqs.";
-
+
-
+
-
+
+  public static final String COUNT_DURABLE_CQ_EVENTS__DURABLE_CLIENT_NOT_FOUND =
+      "No durable client found on server for durable client id {0}.";
+  public static final String COUNT_DURABLE_CQ_EVENTS__SUBSCRIPTION__QUEUE__SIZE__CQ =
+      "subscription-queue-size for durable-cq : \"{0}\".";
+  public static final String EXPORT_SHARED_CONFIG__MSG__NOT_A_DIRECTORY = "{0} is not a directory.";
+  public static final String EXPORT_SHARED_CONFIG__MSG__CANNOT_CREATE_DIR =
+      "Directory {0} could not be created.";
+  public static final String EXPORT_SHARED_CONFIG__MSG__NOT_WRITEABLE = "{0} is not writeable";
+  public static final String EXPORT_SHARED_CONFIG__FILE__NAME = "cluster-config-{0}.zip";
+  public static final String EXPORT_SHARED_CONFIG__LOCATOR_HEADER = "Locator";
+  public static final String EXPORT_SHARED_CONFIG__LOCATOR__ERROR__MSG__HEADER = "Error";
+  public static final String IMPORT_SHARED_CONFIG__DIR = "dir";
+  public static final String IMPORT_SHARED_CONFIG__DIR__HELP =
+      "The directory which contains the cluster configuration artifacts, which are to be imported.";
+  public static final String IMPORT_SHARED_CONFIG__PRE__IMPORT__MSG =
+      "Importing configuration into locator would overwrite the existing cluster configuration. Would you like to proceed ?";
+  public static final String IMPORT_SHARED_CONFIG__CANNOT__IMPORT__MSG =
+      "Cluster configuration cannot be imported when there are running data members present in the distributed system.\n"
+          + "Shutdown all the non locator members to import the cluster configuration, and restart them after the cluster configuration is successfully imported.";
+  public static final String IMPORT_SHARED_CONFIG__ARTIFACTS__COPIED =
+      "Cluster configuration artifacts successfully copied";
+  public static final String STATUS_SHARED_CONFIG_HOST_HEADER = "Hostname";
+  public static final String STATUS_SHARED_CONFIG_PORT_HEADER = "Port";
+  public static final String CONFIGURE_PDX__PERSISTENT__HELP =
+      "Control whether the type metadata for PDX objects is persisted to disk. The default for this setting is false. If you are using persistent regions with PDX then you must set this to true. If you are using a GatewaySender or AsyncEventQueue with PDX then you should set this to true";
+  public static final String CONFIGURE_PDX__CHECK__PORTABILITY = "check-portability";
+  public static final String CONFIGURE_PDX__CHECK__PORTABILITY__HELP =
+      "if true then an serialization done by this serializer will throw an exception if the object it not portable to non-java languages.";
+
+  public static final String PDX_DELETE_FIELD__HELP =
+      "Deletes a field from a PDX type in an offline disk store. \n Any pdx types with a field deleted by this command will be listed in the output. \n If no deletes are done or the disk-store is online then this command will fail.";
+  public static final String PDX_CLASS__HELP =
+      "The fully qualified class name of the pdx type to delete the field from.";
+  public static final String PDX_FIELD__HELP = "Field name to delete";
+  public static final String PDX_DELETE_FIELD__SUCCESS =
+      "Successfully deleted field in types:\n{0}";
+  public static final String PDX_DELETE_FIELD__ERROR = "Error deleting field : {0}";
+  public static final String PDX_DELETE__EMPTY = "Field to be deleted not found in the class.";
+
+
+
