GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import static org.apache.geode.internal.lang.SystemUtils.*;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.management.ManagementFactory;
+import java.lang.management.MemoryMXBean;
+import java.lang.management.MemoryUsage;
+import java.lang.management.OperatingSystemMXBean;
+import java.lang.management.RuntimeMXBean;
+import java.lang.management.ThreadInfo;
+import java.lang.management.ThreadMXBean;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
+
+import javax.management.JMRuntimeException;
+import javax.management.MBeanServer;
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.distributed.internal.*;
+import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.DistributionStats;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.internal.*;
-import org.apache.geode.internal.cache.*;
+import org.apache.geode.internal.Assert;
+import org.apache.geode.internal.GemFireVersion;
+import org.apache.geode.internal.PureJavaMode;
+import org.apache.geode.internal.cache.CachePerfStats;
+import org.apache.geode.internal.cache.DirectoryHolder;
+import org.apache.geode.internal.cache.DiskDirectoryStats;
+import org.apache.geode.internal.cache.DiskRegion;
+import org.apache.geode.internal.cache.DiskStoreImpl;
+import org.apache.geode.internal.cache.DiskStoreStats;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.PartitionedRegion;
+import org.apache.geode.internal.cache.PartitionedRegionStats;
+import org.apache.geode.internal.statistics.StatSamplerStats;
+import org.apache.geode.internal.statistics.VMStatsContract;
-import org.apache.geode.internal.statistics.StatSamplerStats;
-import org.apache.geode.internal.statistics.VMStatsContract;
-import org.apache.geode.management.*;
+import org.apache.geode.management.DependenciesNotFoundException;
+import org.apache.geode.management.DiskBackupResult;
+import org.apache.geode.management.GemFireProperties;
+import org.apache.geode.management.JVMMetrics;
+import org.apache.geode.management.ManagementException;
+import org.apache.geode.management.OSMetrics;
-import org.apache.geode.management.internal.beans.stats.*;
+import org.apache.geode.management.internal.beans.stats.AggregateRegionStatsMonitor;
+import org.apache.geode.management.internal.beans.stats.GCStatsMonitor;
+import org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor;
+import org.apache.geode.management.internal.beans.stats.MemberLevelDiskMonitor;
+import org.apache.geode.management.internal.beans.stats.StatType;
+import org.apache.geode.management.internal.beans.stats.StatsAverageLatency;
+import org.apache.geode.management.internal.beans.stats.StatsKey;
+import org.apache.geode.management.internal.beans.stats.StatsLatency;
+import org.apache.geode.management.internal.beans.stats.StatsRate;
+import org.apache.geode.management.internal.beans.stats.VMStatsMonitor;
-import org.apache.logging.log4j.Logger;
-
-import javax.management.JMRuntimeException;
-import javax.management.MBeanServer;
-import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
-import java.io.File;
-import java.io.IOException;
-import java.lang.management.*;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.*;
-import java.util.concurrent.TimeUnit;
- * 
- * 
-  private GemFireCacheImpl cache;
+  private InternalCache cache;
+
-
-
-
-
-
-  public MemberMBeanBridge(GemFireCacheImpl cache, SystemManagementService service) {
+  public MemberMBeanBridge(InternalCache cache, SystemManagementService service) {
-
-      if (CacheServerLauncher.isDedicatedCacheServer) {
-        // log as error for dedicated cache server - launched through script
-        // LOG:CONFIG:
-        logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}",
-            e.getMessage());
-      } else {
-        // LOG:CONFIG:
-        logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}",
-            e.getMessage());
-      }
+      // log as error for dedicated cache server - launched through script
+      // LOG:CONFIG:
+      logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage());
-    } catch (UnknownHostException ex) {
+    } catch (UnknownHostException ignore) {
-
-
-
-    CachePerfStats cachePerfStats = ((GemFireCacheImpl) cache).getCachePerfStats();
+    CachePerfStats cachePerfStats = this.cache.getCachePerfStats();
-    MemoryAllocator allocator = ((GemFireCacheImpl) cache).getOffHeapStore();
+    MemoryAllocator allocator = this.cache.getOffHeapStore();
-
-
-
-
-      // vmStatsMonitor.addStatisticsToMonitor(vm50.getVMNonHeapStats());
-
-
-
-
-
-
-
-
-      } catch (Exception e) {
+      } catch (Exception ignore) {
-      } catch (Exception e) {
+      } catch (Exception ignore) {
-
-        } catch (Exception e) {
+        } catch (Exception ignore) {
-        } catch (Exception e) {
+        } catch (Exception ignore) {
-        } catch (Exception e) {
+        } catch (Exception ignore) {
-        } catch (Exception e) {
+        } catch (Exception ignore) {
-
-
-   * 
-
-    GemFireCacheImpl cacheImpl = (GemFireCacheImpl) cache;
-      for (DiskStoreImpl store : cacheImpl.listDiskStoresIncludingRegionOwned()) {
+      for (DiskStore store : this.cache.listDiskStoresIncludingRegionOwned()) {
-          compactedStores.add(store.getPersistentID().getDirectory());
-
+          compactedStores.add(((DiskStoreImpl) store).getPersistentID().getDirectory());
-    GemFireCacheImpl cacheImpl = (GemFireCacheImpl) cache;
-    Collection<DiskStoreImpl> diskCollection = null;
+    Collection<DiskStore> diskCollection = null;
-      diskCollection = cacheImpl.listDiskStoresIncludingRegionOwned();
+      diskCollection = this.cache.listDiskStoresIncludingRegionOwned();
-      diskCollection = cacheImpl.listDiskStores();
+      diskCollection = this.cache.listDiskStores();
-      Iterator<DiskStoreImpl> it = diskCollection.iterator();
+      Iterator<DiskStore> it = diskCollection.iterator();
-
-
-   * 
-   * 
-
-      StringBuffer result = new StringBuffer();
+      StringBuilder result = new StringBuilder();
-        result.append(
-            "\n" + LocalizedStrings.SystemMemberImpl_TAIL_OF_CHILD_LOG.toLocalizedString() + "\n");
+        result.append(getLineSeparator())
+            .append(LocalizedStrings.SystemMemberImpl_TAIL_OF_CHILD_LOG.toLocalizedString())
+            .append(getLineSeparator());
-
-          } catch (InterruptedException e) {
+          } catch (InterruptedException ignore) {
-
-   * @return array of DiskBackup results which might get aggregated at Managing node
-   * 
-   *         Check the validity of this mbean call. When does it make sense to backup a single
-   *         member of a gemfire system in isolation of the other members?
+   * @return array of DiskBackup results which might get aggregated at Managing node Check the
+   *         validity of this mbean call. When does it make sense to backup a single member of a
+   *         gemfire system in isolation of the other members?
-
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-
-      Collection<DiskStoreImpl> diskStores = cache.listDiskStoresIncludingRegionOwned();
-      for (DiskStoreImpl store : diskStores) {
+      Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
+      for (DiskStore store : diskStores) {
-
-
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-   * 
-   * </p>
-   * 
+   *
-    // if (isLocator()) {
-    }
-    // else if (isServer()) {
-    else if (ServerLauncher.getInstance() != null) {
+    } else if (ServerLauncher.getInstance() != null) {
-   * 
-    long bytesUsed = memHeap.getUsed();
-    return bytesUsed;
+    return memHeap.getUsed();
-   * 
-   * 
-   * 
-   * 
-   * 
-
-   * 
-   * 
-   * 
-   * 
-    GemFireCacheImpl existingCache = GemFireCacheImpl.getInstance();
-    if (existingCache == null || existingCache.isClosed()) {
+    if (this.cache == null || this.cache.isClosed()) {
-      boolean isManager = service.isManager();
-      return isManager;
-    } catch (Exception e) {
+      return service.isManager();
+    } catch (Exception ignore) {
-    GemFireCacheImpl existingCache = GemFireCacheImpl.getInstance();
-    if (existingCache == null || existingCache.isClosed()) {
+    if (this.cache == null || this.cache.isClosed()) {
-    } catch (Exception e) {
+    } catch (Exception ignore) {
-   * 
-  /** Statistics Related Attributes **/
-  /*********************************************************************************************************/
-
-
-
-
-   * 
-    } catch (Exception e) {
+    } catch (Exception ignore) {
-   * 
+  /**
+   * @deprecated Please use {@link #getOffHeapFreeMemory()} instead.
+   */
+  /**
+   * @deprecated Please use {@link #getOffHeapUsedMemory()} instead.
+   */
-
-
-
-
-
-
-
