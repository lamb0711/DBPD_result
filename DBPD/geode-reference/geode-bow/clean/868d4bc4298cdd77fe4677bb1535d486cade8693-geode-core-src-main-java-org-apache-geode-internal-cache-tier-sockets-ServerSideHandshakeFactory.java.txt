GEODE-8330: Structural Improvements to Versioning

Follow-on to GEODE-8240, this commit eliminates redundancy in 
versioning code and provides a single way to convert a short
to a version and a single way to acquire a known version from
a (possibly unknown) version.
+import java.util.Map;
-import org.apache.geode.cache.IncompatibleVersionException;
+import org.apache.geode.internal.cache.tier.Command;
-import org.apache.geode.internal.serialization.UnsupportedSerializationVersionException;
+import org.apache.geode.internal.serialization.Versioning;
+import org.apache.geode.internal.serialization.VersioningIO;
-      short clientVersionOrdinal = Version.readOrdinalFromInputStream(is);
+      short clientVersionOrdinal = VersioningIO.readOrdinalFromInputStream(is);
-      Version clientVersion = null;
-      try {
-        clientVersion = Version.fromOrdinal(clientVersionOrdinal);
-        if (CommandInitializer.getCommands(clientVersion) == null) {
-          throw new UnsupportedVersionException("Client version {} is not supported");
-        }
-      } catch (UnsupportedSerializationVersionException uve) {
-        // Allows higher version of wan site to connect to server
-        if (isWan) {
-          return currentServerVersion;
+      final Version clientVersion = Versioning.getKnownVersionOrDefault(
+          Versioning.getVersionOrdinal(clientVersionOrdinal), null);
+      final String message;
+      if (clientVersion == null) {
+        message = Version.unsupportedVersionMessage(clientVersionOrdinal);
+      } else {
+        final Map<Integer, Command> commands = CommandInitializer.getCommands(clientVersion);
+        if (commands == null) {
+          message = "Client version {} is not supported";
-          SocketAddress sa = socket.getRemoteSocketAddress();
-          String sInfo = "";
-          if (sa != null) {
-            sInfo = " Client: " + sa.toString() + ".";
-          }
-          throw new UnsupportedVersionException(uve.getMessage() + sInfo);
+          return clientVersion;
-
-      if (!clientVersion.compatibleWith(currentServerVersion)) {
-        throw new IncompatibleVersionException(clientVersion, currentServerVersion);
+      // Allows higher version of wan site to connect to server
+      if (isWan) {
+        return currentServerVersion;
+      } else {
+        SocketAddress sa = socket.getRemoteSocketAddress();
+        String sInfo = "";
+        if (sa != null) {
+          sInfo = " Client: " + sa.toString() + ".";
+        }
+        throw new UnsupportedVersionException(message + sInfo);
-      return clientVersion;
