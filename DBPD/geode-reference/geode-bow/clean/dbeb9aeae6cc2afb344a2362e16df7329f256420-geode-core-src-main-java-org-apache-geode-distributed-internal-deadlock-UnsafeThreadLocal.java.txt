Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Most of this thread local is safe to use, except for the getValue(Thread)
- * method. That is not guaranteed to be correct. But for our deadlock detection
- * tool I think it's good enough, and this class provides a very low overhead
- * way for us to record what thread holds a particular resource.
+ * Most of this thread local is safe to use, except for the getValue(Thread) method. That is not
+ * guaranteed to be correct. But for our deadlock detection tool I think it's good enough, and this
+ * class provides a very low overhead way for us to record what thread holds a particular resource.
-   * Dangerous method. Uses reflection to extract the thread local for a given
-   * thread.
+   * Dangerous method. Uses reflection to extract the thread local for a given thread.
-      Object threadLocalMap = invokePrivate(threadLocal, "getMap",
-          new Class[] { Thread.class }, new Object[] { thread });
+      Object threadLocalMap =
+          invokePrivate(threadLocal, "getMap", new Class[] {Thread.class}, new Object[] {thread});
-        Object entry = invokePrivate(threadLocalMap, "getEntry",
-            new Class[] { ThreadLocal.class }, new Object[] { threadLocal });
+        Object entry = invokePrivate(threadLocalMap, "getEntry", new Class[] {ThreadLocal.class},
+            new Object[] {threadLocal});
-  private static Object getPrivate(Object object, String fieldName)
-      throws SecurityException, NoSuchFieldException, IllegalArgumentException,
-      IllegalAccessException {
+  private static Object getPrivate(Object object, String fieldName) throws SecurityException,
+      NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
-  private static Object invokePrivate(Object object, String methodName,
-      Class[] argTypes, Object[] args) throws SecurityException,
-      NoSuchMethodException, IllegalArgumentException, IllegalAccessException,
-      InvocationTargetException {
+  private static Object invokePrivate(Object object, String methodName, Class[] argTypes,
+      Object[] args) throws SecurityException, NoSuchMethodException, IllegalArgumentException,
+      IllegalAccessException, InvocationTargetException {
