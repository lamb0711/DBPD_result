Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This helper class provides access to membership manager information that
- * is not otherwise public
+ * This helper class provides access to membership manager information that is not otherwise public
+ * 
-public class MembershipManagerHelper
-{
+public class MembershipManagerHelper {
-    InternalDistributedSystem isys = (InternalDistributedSystem)sys;
-    DistributionManager dm = (DistributionManager)isys.getDM();
+    InternalDistributedSystem isys = (InternalDistributedSystem) sys;
+    DistributionManager dm = (DistributionManager) isys.getDM();
-  
-  /** act sick.  don't accept new connections and don't process ordered
-   * messages.  Use beHealthyMember() to reverse the effects.<p>
-   * Note that part of beSickMember's processing is to interrupt and
-   * stop any reader threads.  A slow listener in a reader thread should
-   * eat this interrupt.
+
+  /**
+   * act sick. don't accept new connections and don't process ordered messages. Use
+   * beHealthyMember() to reverse the effects.
+   * <p>
+   * Note that part of beSickMember's processing is to interrupt and stop any reader threads. A slow
+   * listener in a reader thread should eat this interrupt.
+   * 
-    ((Manager)getMembershipManager(sys)).beSick();
+    ((Manager) getMembershipManager(sys)).beSick();
-  
+
-   * inhibit failure detection responses.  This can be used in conjunction
-   * with beSickMember
+   * inhibit failure detection responses. This can be used in conjunction with beSickMember
-      ((Manager)getMembershipManager(sys)).playDead();
-    }
-    catch (CancelException e) {
+      ((Manager) getMembershipManager(sys)).playDead();
+    } catch (CancelException e) {
-  
+
-    ((Manager)getMembershipManager(sys)).beHealthy();
+    ((Manager) getMembershipManager(sys)).beHealthy();
-  
+
-    return ((Manager)getMembershipManager(sys)).getCoordinator();
+    return ((Manager) getMembershipManager(sys)).getCoordinator();
-    return ((Manager)getMembershipManager(sys)).getLeadMember();
+    return ((Manager) getMembershipManager(sys)).getLeadMember();
-  
+
-  
+
-  
-//  /**
-//   * returns the view lock.  Holding this lock will prevent the processing
-//   * of new views, and will prevent other threads from being able to access
-//   * the view
-//   */
-//  public static Object getViewLock(DistributedSystem sys) {
-//    return getMembershipManager(sys).latestViewLock;
-//  }
-  
+
+  // /**
+  // * returns the view lock. Holding this lock will prevent the processing
+  // * of new views, and will prevent other threads from being able to access
+  // * the view
+  // */
+  // public static Object getViewLock(DistributedSystem sys) {
+  // return getMembershipManager(sys).latestViewLock;
+  // }
+
-    return ((Manager)getMembershipManager(sys)).isShunned(mbr);
+    return ((Manager) getMembershipManager(sys)).isShunned(mbr);
-  
+
-  
+
-   * add a member id to the surprise members set, with the given millisecond
-   * clock birth time
+   * add a member id to the surprise members set, with the given millisecond clock birth time
-  public static void addSurpriseMember(DistributedSystem sys,
-      DistributedMember mbr, long birthTime) {
-    ((Manager)getMembershipManager(sys)).addSurpriseMemberForTesting(mbr, birthTime);
+  public static void addSurpriseMember(DistributedSystem sys, DistributedMember mbr,
+      long birthTime) {
+    ((Manager) getMembershipManager(sys)).addSurpriseMemberForTesting(mbr, birthTime);
-   * inhibits/enables logging of forced-disconnect messages.
-   * For quorum-lost messages this adds expected-exception annotations
-   * before and after the messages to make them invisible to greplogs
+   * inhibits/enables logging of forced-disconnect messages. For quorum-lost messages this adds
+   * expected-exception annotations before and after the messages to make them invisible to greplogs
-  
+
-   * wait for a member to leave the view.  Throws an assertionerror
-   * if the timeout period elapses before the member leaves
+   * wait for a member to leave the view. Throws an assertionerror if the timeout period elapses
+   * before the member leaves
-  public static void waitForMemberDeparture(final DistributedSystem sys, 
+  public static void waitForMemberDeparture(final DistributedSystem sys,
-        return !getMembershipManager(sys).getView().contains((InternalDistributedMember)member);
+        return !getMembershipManager(sys).getView().contains((InternalDistributedMember) member);
+
-        String assMsg = "Waited over " + timeout + " ms for " + member 
-            + " to depart, but it didn't";
+        String assMsg =
+            "Waited over " + timeout + " ms for " + member + " to depart, but it didn't";
-  
+
-    GMSMembershipManager mgr = ((GMSMembershipManager)getMembershipManager(msys));
+    GMSMembershipManager mgr = ((GMSMembershipManager) getMembershipManager(msys));
-      try { Thread.sleep(1000); } catch (InterruptedException e) {
+      try {
+        Thread.sleep(1000);
+      } catch (InterruptedException e) {
-  
+
