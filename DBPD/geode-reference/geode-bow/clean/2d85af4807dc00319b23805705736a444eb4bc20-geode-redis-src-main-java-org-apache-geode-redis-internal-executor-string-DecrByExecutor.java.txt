GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

+
-  private final String ERROR_VALUE_NOT_USABLE =
-      "The value at this key cannot be decremented numerically";
-
-  private final String ERROR_OVERFLOW = "This decrementation cannot be performed due to overflow";
-
-    /*
-     * Try increment
-     */
-
-    /*
-     * Value does not exist
-     */
-
-    ByteArrayWrapper valueWrapper = getRedisStringCommands(context).get(key);
-    if (valueWrapper == null) {
-      String negativeDecrString =
-          decrString.charAt(0) == Coder.HYPHEN_ID ? decrString.substring(1) : "-" + decrString;
-      ByteArrayWrapper newValue = new ByteArrayWrapper(Coder.stringToBytes(negativeDecrString));
-      getRedisStringCommands(context).set(key, newValue, null);
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), -decrement));
-      return;
-    }
-
-    /*
-     * Value exists
-     */
-
-    String stringValue = Coder.bytesToString(valueWrapper.toBytes());
-
-    long value;
-    try {
-      value = Long.parseLong(stringValue);
-    } catch (NumberFormatException e) {
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_VALUE_NOT_USABLE));
-      return;
-    }
-
-    /*
-     * Check for overflow Negative decrement is used because the decrement is stored as a positive
-     * long
-     */
-    if (value <= 0 && -decrement < (Long.MIN_VALUE - value)) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-      return;
-    }
-
-    value -= decrement;
-
-    stringValue = "" + value;
-    ByteArrayWrapper newValue = new ByteArrayWrapper(Coder.stringToBytes(stringValue));
-    getRedisStringCommands(context).set(key, newValue, null);
-
+    long value = getRedisStringCommands(context).decrby(key, decrement);
-
-
