Geode 7013 command line help broken (#3858)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Owen Nichols <onichols@pivotal.io>
+import static org.apache.geode.management.internal.cli.GfshParser.LINE_SEPARATOR;
+import static org.apache.geode.management.internal.cli.GfshParser.LONG_OPTION_SPECIFIER;
+import static org.apache.geode.management.internal.cli.GfshParser.OPTION_VALUE_SPECIFIER;
+
-import java.util.Collections;
-import org.apache.geode.management.internal.cli.GfshParser;
+  private static final String NO_HELP_EXISTS_FOR_THIS_COMMAND = "No help exists for this command.";
+  private static final String HELP_INSTRUCTIONS = LINE_SEPARATOR + "Use " + CliStrings.HELP
+      + " <command name> to display detailed usage information for a specific command."
+      + LINE_SEPARATOR
+      + "Help with command and parameter completion can also be obtained by entering all or a portion of either followed by the \"TAB\" key.";
-    if (related == null) {
-      return;
-    }
-      if (isNotNullOrBlank(cliOption.specifiedDefaultValue())) {
+      if (isNonEmptyAnnotation(cliOption.specifiedDefaultValue())) {
-      if (isNotNullOrBlank(cliOption.unspecifiedDefaultValue())) {
+      if (isNonEmptyAnnotation(cliOption.unspecifiedDefaultValue())) {
-              .append("  is required").append(GfshParser.LINE_SEPARATOR);
+              .append("  is required").append(LINE_SEPARATOR);
-          .append(GfshParser.LINE_SEPARATOR);
+          .append(LINE_SEPARATOR);
-    Method method = commands.get(buffer);
-    if (method == null) {
-      return "no help exists for this command.";
+    List<Method> methodList = commands.keySet()
+        .stream()
+        .filter(key -> key.startsWith(buffer))
+        .map(commands::get).collect(Collectors.toList());
+
+    boolean summarize = methodList.size() > 1;
+    String helpString = methodList.stream()
+        .map(m -> getHelp(m.getDeclaredAnnotation(CliCommand.class),
+            summarize ? null : m.getParameterAnnotations(),
+            summarize ? null : m.getParameterTypes()))
+        .map(helpBlock -> helpBlock.toString(terminalWidth))
+        .reduce((s, s2) -> s + s2)
+        .orElse(NO_HELP_EXISTS_FOR_THIS_COMMAND);
+
+    if (summarize) {
+      helpString += HELP_INSTRUCTIONS;
-    HelpBlock helpBlock = getHelp(method.getDeclaredAnnotation(CliCommand.class),
-        method.getParameterAnnotations(), method.getParameterTypes());
-    return helpBlock.toString(terminalWidth);
+    return helpString;
+    List<String> topicKeys = this.topics.keySet()
+        .stream()
+        .filter(t -> buffer == null || t.toLowerCase().startsWith(buffer.toLowerCase()))
+        .sorted()
+        .collect(Collectors.toList());
+
-    if (StringUtils.isBlank(buffer)) {
-      builder.append(CliStrings.HINT__MSG__TOPICS_AVAILABLE).append(GfshParser.LINE_SEPARATOR)
-          .append(GfshParser.LINE_SEPARATOR);
+    if (topicKeys.isEmpty()) {
+      builder.append(CliStrings.format(CliStrings.HINT__MSG__UNKNOWN_TOPIC, buffer))
+          .append(LINE_SEPARATOR).append(LINE_SEPARATOR);
+    } else if (topicKeys.size() == 1) {
+      Topic oneTopic = this.topics.get(topicKeys.get(0));
+      builder.append(oneTopic.desc).append(LINE_SEPARATOR)
+          .append(LINE_SEPARATOR);
+      oneTopic.relatedCommands.stream().sorted().forEach(command -> builder.append(command.command)
+          .append(": ").append(command.desc).append(LINE_SEPARATOR));
+    } else {
+      builder.append(CliStrings.HINT__MSG__TOPICS_AVAILABLE).append(LINE_SEPARATOR)
+          .append(LINE_SEPARATOR);
-      List<String> sortedTopics = new ArrayList<>(topics.keySet());
-      Collections.sort(sortedTopics);
-      sortedTopics.stream()
-          .forEachOrdered(topic -> builder.append(topic).append(GfshParser.LINE_SEPARATOR));
-      return builder.toString();
+      topicKeys.forEach(topic -> builder.append(topic).append(LINE_SEPARATOR));
-    Topic topic = topics.get(buffer);
-    if (topic == null) {
-      return CliStrings.format(CliStrings.HINT__MSG__UNKNOWN_TOPIC, buffer);
-    }
-
-    builder.append(topic.desc).append(GfshParser.LINE_SEPARATOR).append(GfshParser.LINE_SEPARATOR);
-    Collections.sort(topic.relatedCommands);
-    topic.relatedCommands.stream().forEachOrdered(command -> builder.append(command.command)
-        .append(": ").append(command.desc).append(GfshParser.LINE_SEPARATOR));
-  HelpBlock getHelp() {
+  private HelpBlock getHelp() {
-    if (isNotNullOrBlank(cliOption.specifiedDefaultValue())) {
+    if (isNonEmptyAnnotation(cliOption.specifiedDefaultValue())) {
-    if (isNotNullOrBlank(cliOption.unspecifiedDefaultValue())) {
+    if (isNonEmptyAnnotation(cliOption.unspecifiedDefaultValue())) {
-  private <T> T getAnnotation(Annotation[] annotations, Class<?> klass) {
+  @SuppressWarnings("unchecked")
+  private <T> T getAnnotation(Annotation[] annotations, Class<T> klass) {
-    buffer.append(GfshParser.LONG_OPTION_SPECIFIER).append(key0);
+    buffer.append(LONG_OPTION_SPECIFIER).append(key0);
-    boolean hasSpecifiedDefault = isNotNullOrBlank(cliOption.specifiedDefaultValue());
+    boolean hasSpecifiedDefault = isNonEmptyAnnotation(cliOption.specifiedDefaultValue());
-    buffer.append(GfshParser.OPTION_VALUE_SPECIFIER).append(VALUE_FIELD);
+    buffer.append(OPTION_VALUE_SPECIFIER).append(VALUE_FIELD);
-    for (int i = 1; i < keys.length; i++) {
-      synonyms.add(keys[i]);
-    }
+    synonyms.addAll(Arrays.asList(keys).subList(1, keys.length));
-  private static boolean isNotNullOrBlank(String value) {
+  private static boolean isNonEmptyAnnotation(String value) {
