revert "refactor test rules"

- *
- * you can use this as Rule
- * 
- * @Rule GfshShellConnectionRule rule = new GfshSheelConnectionRule(); then after you connect to a
- *       locator, you don't have to call disconnect() or close() at all, since the rule's after
- *       takes care of it for you.
- *
- *       Or as a ClassRule
- * @ClassRule GfshShellConnectionRule rule = new GfshSheelConnectionRule(); When using as a
- *            ClassRule, if you call connect in a test, you will need to call disconnect after the
- *            test as well. See NetstatDUnitTest for example.
- *
-  private int port = -1;
-  private PortType portType = PortType.jmxManger;
-  private HeadlessGfsh gfsh = null;
-  private boolean connected = false;
+  private int port = 0;
+  private PortType portType = null;
+  private HeadlessGfsh gfsh;
+  private boolean connected;
-  public GfshShellConnectionRule() {}
+  public GfshShellConnectionRule(Locator locator) {
+    this(locator.getPort(), PortType.locator);
+  }
+    try {
+      this.gfsh = new HeadlessGfsh(getClass().getName(), 30, "gfsh_files");
+    } catch (Exception e) {
+      e.printStackTrace();
+    }
+    this.connected = false;
-  @Override
-    this.gfsh = new HeadlessGfsh(getClass().getName(), 30, "gfsh_files");
-    // do not connect if no port initialized
-    if (port < 0) {
-      return;
-    }
-
-    if (config == null) {
-      connect(port, portType);
-      return;
+    if (config != null) {
+      connect(CliStrings.CONNECT__USERNAME, config.user(), CliStrings.CONNECT__PASSWORD,
+          config.password());
+    } else {
+      connect();
-
-    connect(port, portType, CliStrings.CONNECT__USERNAME, config.user(),
-        CliStrings.CONNECT__PASSWORD, config.password());
-
-  public void connect(Locator locator, String... options) throws Exception {
-    connect(locator.getPort(), PortType.locator, options);
-  }
-
-  public void connect(int port, PortType type, String... options) throws Exception {
+  public void connect(String... options) throws Exception {
-    if (type == PortType.locator) {
+    if (portType == PortType.locator) {
-    } else if (type == PortType.http) {
+    } else if (portType == PortType.http) {
-      CommandResult cResult = executeCommand(connectCommand.toString());
-      result.set(cResult);
+      gfsh.executeCommand(connectCommand.toString());
+      result.set((CommandResult) gfsh.getResult());
+      System.out.println("connect result: " + result.get().getContent().toString());
-  @Override
+
+  /**
+   * Override to tear down your specific external resource.
+   */
-    if (connected) {
-      disconnect();
-    }
-  public void disconnect() throws Exception {
-    gfsh.clear();
-    executeCommand("disconnect");
-    connected = false;
-  }
-
-    gfsh.executeCommand("exit");
-    gfsh.terminate();
-    gfsh = null;
+    if (gfsh != null) {
+      gfsh.clear();
+      gfsh.executeCommand("disconnect");
+      gfsh.executeCommand("exit");
+      gfsh.terminate();
+      gfsh = null;
+    }
-    System.out.println("Command Result: \n" + gfsh.outputString);
+    System.out.println("command result: " + result.getContent());
-
-  public String execute(String command) throws Exception {
-    executeCommand(command);
-    return gfsh.outputString;
-  }
-
