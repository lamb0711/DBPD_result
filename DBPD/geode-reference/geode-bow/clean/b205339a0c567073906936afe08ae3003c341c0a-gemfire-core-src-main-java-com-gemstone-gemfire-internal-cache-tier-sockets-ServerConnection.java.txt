Merge branch 'feature/GEODE-8' into develop

+import java.util.concurrent.LinkedBlockingQueue;
- 
-  public static ByteBuffer allocateCommBuffer(int size) {
-    return ByteBuffer.allocate(size);
+  // The key is the size of each ByteBuffer. The value is a queue of byte buffers all of that size.
+  private static final ConcurrentHashMap<Integer, LinkedBlockingQueue<ByteBuffer>> commBufferMap = new ConcurrentHashMap<>(4, 0.75f, 1);
+
+  public static ByteBuffer allocateCommBuffer(int size, Socket sock) {
+    // I expect that size will almost always be the same value
+    if (sock.getChannel() == null) {
+      // The socket this commBuffer will be used for is old IO (it has no channel).
+      // So the commBuffer should be heap based.
+      return ByteBuffer.allocate(size);
+    }
+    LinkedBlockingQueue<ByteBuffer> q = commBufferMap.get(size);
+    ByteBuffer result = null;
+    if (q != null) {
+      result = q.poll();
+    }
+    if (result == null) {
+      result = ByteBuffer.allocateDirect(size);
+    } else {
+      result.position(0);
+      result.limit(result.capacity());
+    }
+    return result;
+  }
+  
+  public static void releaseCommBuffer(ByteBuffer bb) {
+    if (bb != null && bb.isDirect()) {
+      LinkedBlockingQueue<ByteBuffer> q = commBufferMap.get(bb.capacity());
+      if (q == null) {
+        q = new LinkedBlockingQueue<>();
+        LinkedBlockingQueue<ByteBuffer> oldQ = commBufferMap.putIfAbsent(bb.capacity(), q);
+        if (oldQ != null) {
+          q = oldQ;
+        }
+      }
+      q.offer(bb);
+    }
+  }
+  
+  public static void emptyCommBufferPool() {
+    for (LinkedBlockingQueue<ByteBuffer> q: commBufferMap.values()) {
+      q.clear();
+    }
+    
+    
+    this.executeFunctionResponseMsg.setVersion(v);
-          commBuffer = allocateCommBuffer(socketBufferSize);
+          commBuffer = allocateCommBuffer(socketBufferSize, s);
-        requestMsg.setComms(theSocket, commBuffer, msgStats);
-        replyMsg.setComms(theSocket, commBuffer, msgStats);
-        responseMsg.setComms(theSocket, commBuffer, msgStats);
-        chunkedResponseMsg.setComms(theSocket, commBuffer, msgStats);
-        queryResponseMsg.setComms(theSocket, commBuffer, msgStats);
-        executeFunctionResponseMsg.setComms(theSocket, commBuffer, msgStats);
-        registerInterestResponseMsg.setComms(theSocket, commBuffer, msgStats);        
-        errorMsg.setComms(theSocket, commBuffer, msgStats);
+        requestMsg.setComms(this, theSocket, commBuffer, msgStats);
+        replyMsg.setComms(this, theSocket, commBuffer, msgStats);
+        responseMsg.setComms(this, theSocket, commBuffer, msgStats);
+        errorMsg.setComms(this, theSocket, commBuffer, msgStats);
+
+        chunkedResponseMsg.setComms(this, theSocket, commBuffer, msgStats);
+        queryResponseMsg.setComms(this, theSocket, commBuffer, msgStats);
+        executeFunctionResponseMsg.setComms(this, theSocket, commBuffer, msgStats);
+        registerInterestResponseMsg.setComms(this, theSocket, commBuffer, msgStats);
+        keySetResponseMsg.setComms(this, theSocket, commBuffer, msgStats);
+    releaseCommBuffer();
+  private void releaseCommBuffer() {
+    ByteBuffer bb = this.commBuffer;
+    if (bb != null) {
+      this.commBuffer = null;
+      ServerConnection.releaseCommBuffer(bb);
+    }
+  }
+  
