GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

+import static org.apache.commons.lang.Validate.isTrue;
+import static org.apache.commons.lang.Validate.notEmpty;
+import static org.apache.commons.lang.Validate.notNull;
+
-import org.apache.geode.internal.util.IOUtils;
-
-  private ProcessUtils() {}
+  private ProcessUtils() {
+    // nothing
+  }
+    notEmpty(name, "Invalid name '" + name + "' specified");
+
+
-      final int index = name.indexOf("@");
+      final int index = name.indexOf('@');
+    isTrue(pid > 0, "Invalid pid '" + pid + "' specified");
+
+    notNull(process, "Invalid process '" + process + "' specified");
+
+    isTrue(pid > 0, "Invalid pid '" + pid + "' specified");
+
-    BufferedReader reader = null;
-    try {
-      reader = new BufferedReader(new FileReader(pidFile));
+    notNull(pidFile, "Invalid pidFile '" + pidFile + "' specified");
+    isTrue(pidFile.exists(), "Nonexistent pidFile '" + pidFile + "' specified");
+
+    try (BufferedReader reader = new BufferedReader(new FileReader(pidFile))) {
-    } finally {
-      IOUtils.close(reader);
-    } catch (ClassNotFoundException e) {
-      // fall through
-    } catch (LinkageError e) {
+    } catch (ClassNotFoundException | LinkageError ignored) {
-      // TODO: get rid of Class.forName usage if NativeCalls always safely loads
+      // consider getting rid of Class.forName usage if NativeCalls always safely loads
-      NativeProcessUtils inst = new NativeProcessUtils();
-      boolean result = inst.isProcessAlive(identifyPid());
+      NativeProcessUtils nativeProcessUtils = new NativeProcessUtils();
+      boolean result = nativeProcessUtils.isProcessAlive(identifyPid());
-        return inst;
+        return nativeProcessUtils;
-    } catch (ClassNotFoundException e) {
-      // fall through
-    } catch (LinkageError e) {
-      // fall through
-    } catch (PidUnavailableException e) {
-      // fall through (log warning??)
-    } catch (UnsupportedOperationException e) {
+    } catch (ClassNotFoundException | LinkageError | PidUnavailableException
+        | UnsupportedOperationException ignored) {
-    // 3) TODO: log warning and then proceed with no-op
+    // 3) consider logging warning and then proceed with no-op
-      public boolean isProcessAlive(int pid) {
+      public boolean isProcessAlive(final int pid) {
-      public boolean killProcess(int pid) {
+      public boolean killProcess(final int pid) {
-    public boolean isProcessAlive(int pid);
-    public boolean killProcess(int pid);
+    boolean isProcessAlive(final int pid);
-    public boolean isAvailable();
+    boolean killProcess(final int pid);
-    public boolean isAttachApiAvailable();
+    boolean isAvailable();
+
+    boolean isAttachApiAvailable();
