Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- *  
+ * 
-public class DestroyOperation extends DistributedCacheOperation
-{
+public class DestroyOperation extends DistributedCacheOperation {
-  protected CacheOperationMessage createMessage()
-  {
+  protected CacheOperationMessage createMessage() {
-      msgwithContxt.context = ((EntryEventImpl)this.event).getContext();
+      msgwithContxt.context = ((EntryEventImpl) this.event).getContext();
-    }
-    else {
+    } else {
-  protected void initMessage(CacheOperationMessage msg,
-      DirectReplyProcessor processor)
-  {
+  protected void initMessage(CacheOperationMessage msg, DirectReplyProcessor processor) {
-    DestroyMessage m = (DestroyMessage)msg;
+    DestroyMessage m = (DestroyMessage) msg;
-  public static class DestroyMessage extends CacheOperationMessage
-  {
+  public static class DestroyMessage extends CacheOperationMessage {
-    
+
-    
+
-    
-    public DestroyMessage() {
-    }
-    
+
+    public DestroyMessage() {}
+
-      this.event = (EntryEventImpl) event; 
+      this.event = (EntryEventImpl) event;
-    
+
-        throws EntryNotFoundException
-    {
-      EntryEventImpl ev = (EntryEventImpl)event;
-      DistributedRegion rgn = (DistributedRegion)ev.region;
+        throws EntryNotFoundException {
+      EntryEventImpl ev = (EntryEventImpl) event;
+      DistributedRegion rgn = (DistributedRegion) ev.region;
-        if(!rgn.isCacheContentProxy()) {
-          rgn.basicDestroy(ev,
-                           false,
-                           null); // expectedOldValue not supported on
-                                  // non- partitioned regions
+        if (!rgn.isCacheContentProxy()) {
+          rgn.basicDestroy(ev, false, null); // expectedOldValue not supported on
+                                             // non- partitioned regions
-        
+
-        return true;  // concurrent modifications are not reported to the sender
-        
+        return true; // concurrent modifications are not reported to the sender
+
-      }
-      catch (CacheWriterException e) {
-        throw new Error(LocalizedStrings.DestroyOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED.toLocalizedString(), e);
-      }
-      catch (TimeoutException e) {
-        throw new Error(LocalizedStrings.DestroyOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED.toLocalizedString(), e);
+      } catch (CacheWriterException e) {
+        throw new Error(
+            LocalizedStrings.DestroyOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED.toLocalizedString(),
+            e);
+      } catch (TimeoutException e) {
+        throw new Error(LocalizedStrings.DestroyOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED
+            .toLocalizedString(), e);
-      ev.setEventId(this.eventId);
-      ev.setOldValueFromRegion();
-      ev.setVersionTag(this.versionTag);
-      if (this.filterRouting != null) {
-        ev.setLocalFilterInfo(this.filterRouting
-            .getFilterInfo(rgn.getMyId()));
-      }
-      ev.setTailKey(tailKey);
-      ev.setInhibitAllNotifications(this.inhibitAllNotifications);
-      evReturned = true;
-      return ev;
+        ev.setEventId(this.eventId);
+        ev.setOldValueFromRegion();
+        ev.setVersionTag(this.versionTag);
+        if (this.filterRouting != null) {
+          ev.setLocalFilterInfo(this.filterRouting.getFilterInfo(rgn.getMyId()));
+        }
+        ev.setTailKey(tailKey);
+        ev.setInhibitAllNotifications(this.inhibitAllNotifications);
+        evReturned = true;
+        return ev;
-    EntryEventImpl createEntryEvent(DistributedRegion rgn)
-    {
-      @Retained EntryEventImpl event = EntryEventImpl.create(rgn,
-          getOperation(), this.key, null, this.callbackArg, true, getSender());
-//      event.setNewEventId(); Don't set the event here...
+    EntryEventImpl createEntryEvent(DistributedRegion rgn) {
+      @Retained
+      EntryEventImpl event = EntryEventImpl.create(rgn, getOperation(), this.key, null,
+          this.callbackArg, true, getSender());
+      // event.setNewEventId(); Don't set the event here...
-    protected void appendFields(StringBuilder buff)
-    {
+    protected void appendFields(StringBuilder buff) {
-      buff.append(" key=")
-          .append(this.key)
-          .append(" id=")
-          .append(this.eventId);
+      buff.append(" key=").append(this.key).append(" id=").append(this.eventId);
-    
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.eventId = (EventID)DataSerializer.readObject(in);
+      this.eventId = (EventID) DataSerializer.readObject(in);
-      if(hasTailKey.booleanValue()){
+      if (hasTailKey.booleanValue()) {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-      
-      DistributedRegion region = (DistributedRegion)this.event.getRegion();
+
+      DistributedRegion region = (DistributedRegion) this.event.getRegion();
-        }else {
+        } else {
-      }
-      else if(((LocalRegion)region).isUsedForSerialGatewaySenderQueue()){
+      } else if (((LocalRegion) region).isUsedForSerialGatewaySenderQueue()) {
-      }
-      else{
+      } else {
-      return Collections.singletonList(new QueuedOperation(getOperation(),
-          this.key, null, null, DistributedCacheOperation
-              .DESERIALIZATION_POLICY_NONE, this.callbackArg));
+      return Collections.singletonList(new QueuedOperation(getOperation(), this.key, null, null,
+          DistributedCacheOperation.DESERIALIZATION_POLICY_NONE, this.callbackArg));
-    public ConflationKey getConflationKey()
-    {
+    public ConflationKey getConflationKey() {
-      }
-      else {
+      } else {
+
-  public static final class DestroyWithContextMessage extends DestroyMessage
-  {
+  public static final class DestroyWithContextMessage extends DestroyMessage {
-    public DestroyWithContextMessage() {
-    }
-    
+    public DestroyWithContextMessage() {}
+
-    
+
-    EntryEventImpl createEntryEvent(DistributedRegion rgn)
-    {
-      EntryEventImpl event = EntryEventImpl.create(rgn, getOperation(), 
-          this.key, null, /* newvalue */
-          this.callbackArg, true /* originRemote */, getSender(),
-          true/* generateCallbacks */
-      );
+    EntryEventImpl createEntryEvent(DistributedRegion rgn) {
+      EntryEventImpl event =
+          EntryEventImpl.create(rgn, getOperation(), this.key, null, /* newvalue */
+              this.callbackArg, true /* originRemote */, getSender(), true/* generateCallbacks */
+          );
-    protected void appendFields(StringBuilder buff)
-    {
+    protected void appendFields(StringBuilder buff) {
-    
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
