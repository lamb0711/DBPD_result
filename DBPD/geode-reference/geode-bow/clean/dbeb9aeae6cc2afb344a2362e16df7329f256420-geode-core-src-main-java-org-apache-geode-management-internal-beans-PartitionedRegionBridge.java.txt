Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class PartitionedRegionBridge<K, V>  extends RegionMBeanBridge<K, V> {  
+public class PartitionedRegionBridge<K, V> extends RegionMBeanBridge<K, V> {
-  
+
-  
-  private PartitionAttributesData partitionAttributesData;    
-  
+
+  private PartitionAttributesData partitionAttributesData;
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  
+
+
-    return new PartitionedRegionBridge<K, V> (region);
+    return new PartitionedRegionBridge<K, V>(region);
-  
-  
-  
-  protected PartitionedRegionBridge(Region<K, V> region) {    
+
+
+
+  protected PartitionedRegionBridge(Region<K, V> region) {
-    this.parRegion = (PartitionedRegion)region;
+    this.parRegion = (PartitionedRegion) region;
-    
-    PartitionAttributes<K, V>  partAttrs = parRegion.getPartitionAttributes();    
-    
+
+    PartitionAttributes<K, V> partAttrs = parRegion.getPartitionAttributes();
+
-    
+
-    this.partitionAttributesData = RegionMBeanCompositeDataFactory.getPartitionAttributesData(partAttrs);
+    this.partitionAttributesData =
+        RegionMBeanCompositeDataFactory.getPartitionAttributesData(partAttrs);
-      this.fixedPartitionAttributesTable = RegionMBeanCompositeDataFactory.getFixedPartitionAttributesData(partAttrs);
+      this.fixedPartitionAttributesTable =
+          RegionMBeanCompositeDataFactory.getFixedPartitionAttributesData(partAttrs);
-  
+
-    
+
-  
+
-  public void stopMonitor(){
+  public void stopMonitor() {
-    destroysRate = new StatsRate(StatsKey.DESTROYS_COMPLETED, StatType.INT_TYPE, parRegionMonitor);    
+    destroysRate = new StatsRate(StatsKey.DESTROYS_COMPLETED, StatType.INT_TYPE, parRegionMonitor);
-    
-    remotePutAvgLatency = new StatsAverageLatency(StatsKey.REMOTE_PUTS, StatType.INT_TYPE, StatsKey.REMOTE_PUT_TIME,
-        parRegionMonitor);
-    putRemoteLatency = new StatsLatency(StatsKey.REMOTE_PUTS, StatType.INT_TYPE, StatsKey.REMOTE_PUT_TIME,
-        parRegionMonitor);
-    
-    String[] writesRates = new String[] { StatsKey.PUTALL_COMPLETED, StatsKey.PUTS_COMPLETED, StatsKey.CREATES_COMPLETED };
+    remotePutAvgLatency = new StatsAverageLatency(StatsKey.REMOTE_PUTS, StatType.INT_TYPE,
+        StatsKey.REMOTE_PUT_TIME, parRegionMonitor);
+
+    putRemoteLatency = new StatsLatency(StatsKey.REMOTE_PUTS, StatType.INT_TYPE,
+        StatsKey.REMOTE_PUT_TIME, parRegionMonitor);
+
+    String[] writesRates = new String[] {StatsKey.PUTALL_COMPLETED, StatsKey.PUTS_COMPLETED,
+        StatsKey.CREATES_COMPLETED};
-  
+
-  
+
-  
+
-  
+
-  
+
-  public FixedPartitionAttributesData[] listFixedPartitionAttributes() {    
+  public FixedPartitionAttributesData[] listFixedPartitionAttributes() {
-      return  ManagementConstants.ZERO;
+      return ManagementConstants.ZERO;
-  
+
-  
-  
+
+
+
-  
+
-   * partition region entry count is taken from all primary bucket entry count.
-   * Ideally it should come from stats. 
-   * to be done in 8.0
+   * partition region entry count is taken from all primary bucket entry count. Ideally it should
+   * come from stats. to be done in 8.0
+   * 
-      Set<BucketRegion> localPrimaryBucketRegions = parRegion.getDataStore().getAllLocalPrimaryBucketRegions();
+      Set<BucketRegion> localPrimaryBucketRegions =
+          parRegion.getDataStore().getAllLocalPrimaryBucketRegions();
-      return  ManagementConstants.ZERO;
+      return ManagementConstants.ZERO;
-  
+
