GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-
- *
+ * <p>
- * <code>GemFireRuntimeException</code>; however, the current name is retained for compatibility's
- * sake.
- * 
- * @see org.apache.geode.GemFireCheckedException
+ * {@code GemFireRuntimeException}; however, the current name is retained for compatibility's sake.
+ * <p>
+ * This class is abstract to enforce throwing more specific exception types. Please avoid using
+ * GemFireException to describe an arbitrary error condition
+ *
+ * @see GemFireCheckedException
-// Implementation note: This class is abstract so that we are forced
-// to have more specific exception types. We want to avoid using
-// GemFireException to describe an arbitrary error condition (think
-// GsError).
-  public static final long serialVersionUID = -6972360779789402295L;
-
-  /** The cause of this <code>GemFireException</code> */
-  // private Throwable cause;
-
-  ////////////////////// Constructors //////////////////////
+  private static final long serialVersionUID = -6972360779789402295L;
-   * Creates a new <code>GemFireException</code> with no detailed message.
+   * Creates a new {@code GemFireException} with no detailed message.
-   * Creates a new <code>GemFireException</code> with the given detail message.
+   * Creates a new {@code GemFireException} with the given detail message.
-   * Creates a new <code>GemFireException</code> with the given detail message and cause.
+   * Creates a new {@code GemFireException} with the given detail message and cause.
-    // this.cause = cause;
-   * Creates a new <code>GemFireException</code> with the given cause and no detail message
+   * Creates a new {@code GemFireException} with the given cause and no detail message
-    // this.cause = cause;
-  //////////////////// Instance Methods ////////////////////
-
-   * Returns the cause of this <code>GemFireException</code> or <code>null</code> if the cause is
+   * Returns the root cause of this {@code GemFireException} or {@code null} if the cause is
-  // public Throwable getCause() {
-  // return this.cause;
-  // }
-
-  /**
-   * Returns the root cause of this <code>GemFireException</code> or <code>null</code> if the cause
-   * is nonexistent or unknown.
-   */
-  // public void printStackTrace() {
-  // super.printStackTrace();
-  // if (this.cause != null) {
-  // System.err.println("Caused by:");
-  // this.cause.printStackTrace();
-  // }
-  // }
-
-  // public void printStackTrace(java.io.PrintWriter pw) {
-  // super.printStackTrace(pw);
-  //
-  // if (this.cause != null) {
-  // pw.println("Caused by:");
-  // this.cause.printStackTrace(pw);
-  // }
-  // }
-  //
-  // public String getMessage() {
-  // if (this.cause != null) {
-  // String ourMsg = super.getMessage();
-  // if (ourMsg == null || ourMsg.length() == 0) {
-  // //ourMsg = super.toString(); //causes inifinite recursion
-  // ourMsg = "";
-  // }
-  // StringBuffer sb = new StringBuffer(ourMsg);
-  // sb.append(" Caused by: ");
-  // String causeMsg = this.cause.getMessage();
-  // if (causeMsg == null || causeMsg.length() == 0) {
-  // causeMsg = this.cause.toString();
-  // }
-  // sb.append(causeMsg);
-  // return sb.toString();
-  // } else {
-  // return super.getMessage();
-  // }
-  // }
-
-  /**
-   * Represent the receiver as well as the cause
-   */
-  // public String toString() {
-  // String result = super.toString();
-  // if (cause != null) {
-  // result = result + ", caused by " + cause.toString();
-  // }
-  // return result;
-  // }
-
