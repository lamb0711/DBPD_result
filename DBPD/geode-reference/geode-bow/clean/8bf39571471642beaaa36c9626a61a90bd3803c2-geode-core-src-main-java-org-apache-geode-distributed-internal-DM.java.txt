Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This interface defines the services provided  by any class that
- * is a distribution manager.
+ * This interface defines the services provided by any class that is a distribution manager.
-  
+
-  
+
-   * Returns the current "cache time" in milliseconds since the epoch.
-   * The "cache time" takes into account skew among the local clocks
-   * on the various machines involved in the cache.
+   * Returns the current "cache time" in milliseconds since the epoch. The "cache time" takes into
+   * account skew among the local clocks on the various machines involved in the cache.
+
+   * 
-   * Returns the ID in the membership view that is equal to the argument.
-   * If the ID is not in the view, the argument is returned.
+   * Returns the ID in the membership view that is equal to the argument. If the ID is not in the
+   * view, the argument is returned.
-  
-  /**
-   * removes members that have older versions from the given collection, typically
-   * a Set from a distribution advisor
-   * @since GemFire 8.0
-   */
-  public void retainMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members, Version version);
-   * removes members that have the given version or later from the given collection,
-   * typically a Set from a distribution advisor
+   * removes members that have older versions from the given collection, typically a Set from a
+   * distribution advisor
+   * 
-  public void removeMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members, Version version);
+  public void retainMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
+      Version version);
-   * Returns an unmodifiable set containing the identities of all of
-   * the known distribution managers. As of 7.0 this includes locators
-   * since they have a cache.
+   * removes members that have the given version or later from the given collection, typically a Set
+   * from a distribution advisor
+   * 
+   * @since GemFire 8.0
+   */
+  public void removeMembersWithSameOrNewerVersion(Collection<InternalDistributedMember> members,
+      Version version);
+
+  /**
+   * Returns an unmodifiable set containing the identities of all of the known distribution
+   * managers. As of 7.0 this includes locators since they have a cache.
+
-   * Returns an unmodifiable set containing the identities of all of
-   * the known "normal" distribution managers. 
-   * This does not include locators or admin members.
+   * Returns an unmodifiable set containing the identities of all of the known "normal" distribution
+   * managers. This does not include locators or admin members.
-   * Returns an unmodifiable set containing the identities of all of
-   * the known distribution managers including admin members.
+   * Returns an unmodifiable set containing the identities of all of the known distribution managers
+   * including admin members.
+   * 
-   * Returns a private-memory list containing getDistributionManagerIds()
-   * minus our id.
+   * Returns a private-memory list containing getDistributionManagerIds() minus our id.
+
-   * Returns a private-memory list containing getNormalDistributionManagerIds()
-   * minus our id.
+   * Returns a private-memory list containing getNormalDistributionManagerIds() minus our id.
-   * Add a membership listener and return other DistribtionManagerIds
-   * as an atomic operation
+   * Add a membership listener and return other DistribtionManagerIds as an atomic operation
-   * Add a membership listener for all members
-   * and return other DistribtionManagerIds as an atomic operation
+   * Add a membership listener for all members and return other DistribtionManagerIds as an atomic
+   * operation
+   * 
-   * Return true if no other distribution manager was in this group
-   * when he joined.
+   * Return true if no other distribution manager was in this group when he joined.
+
+
-  
+
-   * Return true if this DM is a loner that is not part of
-   * a real distributed system.
+   * Return true if this DM is a loner that is not part of a real distributed system.
-  
+
-   * If useTryLock is true, then it will attempt to get a try-lock and throw 
-   * IllegalStateException if another thread already holds the try-lock.
+   * If useTryLock is true, then it will attempt to get a try-lock and throw IllegalStateException
+   * if another thread already holds the try-lock.
+   * 
-  
+
-   * Returns the id of the underlying distribution channel used for
-   * communication.
+   * Returns the id of the underlying distribution channel used for communication.
-   * Adds a message to the outgoing queue.  Note that
-   * <code>message</code> should not be modified after it has been
-   * added to the queue.  After <code>message</code> is distributed,
-   * it will be recycled.
+   * Adds a message to the outgoing queue. Note that <code>message</code> should not be modified
+   * after it has been added to the queue. After <code>message</code> is distributed, it will be
+   * recycled.
-   * @throws NotSerializableException
-   *         If <code>message</code> cannot be serialized
+   * @throws NotSerializableException If <code>message</code> cannot be serialized
-  public Set putOutgoingUserData(DistributionMessage message) 
-      throws NotSerializableException;
+  public Set putOutgoingUserData(DistributionMessage message) throws NotSerializableException;
-  
+
-   * Returns the distributed system to which this distribution manager
-   * is connected.
+   * Returns the distributed system to which this distribution manager is connected.
-   * Adds a <code>MembershipListener</code> to this distribution
-   * manager.
+   * Adds a <code>MembershipListener</code> to this distribution manager.
-   * Removes a <code>MembershipListener</code> from this distribution
-   * manager.
+   * Removes a <code>MembershipListener</code> from this distribution manager.
-   * @throws IllegalArgumentException
-   *         <code>l</code> was not registered on this distribution
-   *         manager
+   * @throws IllegalArgumentException <code>l</code> was not registered on this distribution manager
-   * Removes a <code>MembershipListener</code> listening for all members
-   * from this distribution manager.
+   * Removes a <code>MembershipListener</code> listening for all members from this distribution
+   * manager.
-   * @throws IllegalArgumentException
-   *         <code>l</code> was not registered on this distribution
-   *         manager
+   * @throws IllegalArgumentException <code>l</code> was not registered on this distribution manager
-   * Used to get the DistributionConfig so that Connection can
-   * figure out if it is configured for async comms.
+   * Used to get the DistributionConfig so that Connection can figure out if it is configured for
+   * async comms.
+   * 
-  
+
-   * Makes note of a distribution manager that has shut down.  Invokes
-   * the appropriate listeners.
+   * Makes note of a distribution manager that has shut down. Invokes the appropriate listeners.
-   * @param theId
-   *        The id of the distribution manager starting up
+   * @param theId The id of the distribution manager starting up
-  public void handleManagerDeparture(InternalDistributedMember theId, 
-      boolean crashed, String reason);
+  public void handleManagerDeparture(InternalDistributedMember theId, boolean crashed,
+      String reason);
-   * getThreadPool gets this distribution manager's message-processing thread pool */
+   * getThreadPool gets this distribution manager's message-processing thread pool
+   */
-   * Return the high-priority message-processing executor */
+   * Return the high-priority message-processing executor
+   */
-  
+
-   * Return the waiting message-processing executor 
+   * Return the waiting message-processing executor
-  
+
-   * Return the special waiting message-processing executor 
+   * Return the special waiting message-processing executor
-   * gets this distribution manager's message-processing executor
-   * for ordered (i.e. serialized) message processing
+   * gets this distribution manager's message-processing executor for ordered (i.e. serialized)
+   * message processing
-   * Returns the ordered list of current DistributionManagers in
-   * oldest-to-youngest order.  Added for DLockGrantor
+   * Returns the ordered list of current DistributionManagers in oldest-to-youngest order. Added for
+   * DLockGrantor
+
-   * Returns the oldest member in the given set of distribution managers.  The
-   * current implementation may use n*n/2 comparisons, so use this judiciously
+   * Returns the oldest member in the given set of distribution managers. The current implementation
+   * may use n*n/2 comparisons, so use this judiciously
-   * @throws NoSuchElementException when none of the given members is actually
-   * a member of the distributed system.
+   * @throws NoSuchElementException when none of the given members is actually a member of the
+   *         distributed system.
-/**
- * @return Set of Admin VM nodes
- */
+
+  /**
+   * @return Set of Admin VM nodes
+   */
-  
+
-  
+
-  
+
-  
+
-  
-  /** Remove given member from list of members who are pending a
-   * startup reply
+
+  /**
+   * Remove given member from list of members who are pending a startup reply
+   * 
-  public void removeUnfinishedStartup(InternalDistributedMember m,
-      boolean departed);
-  
+  public void removeUnfinishedStartup(InternalDistributedMember m, boolean departed);
+
-  
+
-  
+
+   * 
-  
+
+   * 
-  
+
+   * 
-  
+
-   * Return all members that are on the the this host 
+   * Return all members that are on the the this host
+   * 
-  public Set <InternalDistributedMember> getMembersInThisZone();
-  
+  public Set<InternalDistributedMember> getMembersInThisZone();
+
-  
+
-  public Set<InternalDistributedMember> getMembersInSameZone(InternalDistributedMember acceptedMember);
+  public Set<InternalDistributedMember> getMembersInSameZone(
+      InternalDistributedMember acceptedMember);
-  
+
-   * Returns true is the two members are on the same equivalent host machine
-   * based on overlapping IP addresses collected for all NICs on each member's
-   * machine.
+   * Returns true is the two members are on the same equivalent host machine based on overlapping IP
+   * addresses collected for all NICs on each member's machine.
-   * Adds the entry in hostedLocators for a member with one or more
-   * hosted locators. The value is a collection of host[port] strings. If a 
-   * bind-address was used for a locator then the form is bind-addr[port].
+   * Adds the entry in hostedLocators for a member with one or more hosted locators. The value is a
+   * collection of host[port] strings. If a bind-address was used for a locator then the form is
+   * bind-addr[port].
-   * This currently only tracks stand-alone/dedicated locators, not embedded
-   * locators.
-   * @param isSharedConfigurationEnabled flag to determine if the locator has enabled shared configuration
+   * This currently only tracks stand-alone/dedicated locators, not embedded locators.
+   * 
+   * @param isSharedConfigurationEnabled flag to determine if the locator has enabled shared
+   *        configuration
-  public void addHostedLocators(InternalDistributedMember member, Collection<String> locators, boolean isSharedConfigurationEnabled);
-  
-  
+  public void addHostedLocators(InternalDistributedMember member, Collection<String> locators,
+      boolean isSharedConfigurationEnabled);
+
+
-   * Gets the value in hostedLocators for a member with one or more
-   * hosted locators. The value is a collection of host[port] strings. If a 
-   * bind-address was used for a locator then the form is bind-addr[port].
+   * Gets the value in hostedLocators for a member with one or more hosted locators. The value is a
+   * collection of host[port] strings. If a bind-address was used for a locator then the form is
+   * bind-addr[port].
-   * This currently only tracks stand-alone/dedicated locators, not embedded
-   * locators.
+   * This currently only tracks stand-alone/dedicated locators, not embedded locators.
-  
+
-   * Gets the map of all members hosting locators. The key is the member, and
-   * the value is a collection of host[port] strings. If a bind-address was 
-   * used for a locator then the form is bind-addr[port].
+   * Gets the map of all members hosting locators. The key is the member, and the value is a
+   * collection of host[port] strings. If a bind-address was used for a locator then the form is
+   * bind-addr[port].
-   * This currently only tracks stand-alone/dedicated locators, not embedded
-   * locators.
+   * This currently only tracks stand-alone/dedicated locators, not embedded locators.
-   * Gets the map of all members hosting locators with shared configuration. The key is the member, and
-   * the value is a collection of host[port] strings. If a bind-address was 
-   * used for a locator then the form is bind-addr[port].
+   * Gets the map of all members hosting locators with shared configuration. The key is the member,
+   * and the value is a collection of host[port] strings. If a bind-address was used for a locator
+   * then the form is bind-addr[port].
-   * This currently only tracks stand-alone/dedicated locators, not embedded
-   * locators.
+   * This currently only tracks stand-alone/dedicated locators, not embedded locators.
-  
+
-   * Determines if the distributed system has the shared configuration service enabled or not. 
+   * Determines if the distributed system has the shared configuration service enabled or not.
-   * @return true if the distributed system was started or had a locator with enable-cluster-configuration = true 
+   * @return true if the distributed system was started or had a locator with
+   *         enable-cluster-configuration = true
-    
+
-   * Forces use of UDP for communications in the current thread.  UDP is
-   * connectionless, so no tcp/ip connections will be created or used for
-   * messaging until this setting is released with releaseUDPMessagingForCurrentThread.
+   * Forces use of UDP for communications in the current thread. UDP is connectionless, so no tcp/ip
+   * connections will be created or used for messaging until this setting is released with
+   * releaseUDPMessagingForCurrentThread.
-  
+
-   * Releases use of UDP for all communications in the current thread,
-   * as established by forceUDPMessagingForCurrentThread.
+   * Releases use of UDP for all communications in the current thread, as established by
+   * forceUDPMessagingForCurrentThread.
