GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-  /**
-   * elderSyncWait
-   *
-   * @param newElder
-   * @param dls
-   */
-      logger.info(LogMarker.DLS, message);
+      logger.info(LogMarker.DLS_MARKER, message);
-              if (logger.isTraceEnabled(LogMarker.DLS)) {
-                logger.trace(LogMarker.DLS, "Unable to communicate with elder {}",
+              if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+                logger.trace(LogMarker.DLS_VERBOSE, "Unable to communicate with elder {}",
-     *
-     * @param serviceName
-     * @param elder
-     * @param dm
-     * @param proc
-     * @param oldTurk
-     * @param opCode
-      // bug36361: the following assertion doesn't work, since the client that sent us
-      // the request might have a different notion of the elder (no view synchrony on the
-      // current notion of the elder).
-      // InternalDistributedMember moi = dm.getDistributionManagerId();
-      // Assert.assertTrue(!(
-      // // Sending a message to ourself is REALLY WEIRD, so
-      // // we make that the first test...
-      // moi.equals(dm.getElderId())
-      // && !moi.equals(elder)
-      // && dm.getDistributionManagerIds().contains(elder)
-      // ));
-      if (logger.isTraceEnabled(LogMarker.DLS)) {
-        logger.trace(LogMarker.DLS, "GrantorRequestMessage sending {} to {}", msg, elder);
+      if (logger.isTraceEnabled(LogMarker.DLS_VERBOSE)) {
+        logger.trace(LogMarker.DLS_VERBOSE, "GrantorRequestMessage sending {} to {}", msg, elder);
-      // executeBasicProcess(dm); // TODO change to this after things are stable
-    // private void executeBasicProcess(final DM dm) {
-    // final GrantorRequestMessage msg = this;
-    // try {
-    // dm.getWaitingThreadPool().execute(new Runnable() {
-    // public void run() {
-    // basicProcess(dm);
-    // }
-    // });
-    // }
-    // catch (RejectedExecutionException e) { {
-    // logger.debug("Rejected processing of <{}>", this, e);
-    // }
-    // }
-
