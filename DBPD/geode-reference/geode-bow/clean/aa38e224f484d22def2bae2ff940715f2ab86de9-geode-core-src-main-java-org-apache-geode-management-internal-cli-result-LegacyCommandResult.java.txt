GEODE-5013 Replace org.json with Jackson in GfJsonObject

This removes org.json as a dependency in geode-core and associated test
modules.  GfJsonObject and GfJsonArray are ported to use the same basic
Jackson ObjectMapper setup as QueryResultFormatter so that we now have a
uniform mechanism for managing JSON documents for querying/gfsh and
folks can use Jackson annotations like @JsonIgnore on their classes.

The geode-web-api and geode-pulse modules still use the geode-json
module in tests.  When/if they are ported to use GfJsonObject/Array we can delete
the geode-json module.

+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.node.ArrayNode;
-import org.json.JSONArray;
-import org.json.JSONObject;
-    String valueString = String.valueOf(object);
+    String valueString = "" + object;
-      Object object = columnNames.get(i);
+      Object object = columnNames.getString(i);
-      Object object = columnNames.get(i);
+      Object object = columnNames.getString(i);
-      dataRows[j].newLeftCol(accumulatedData.get(j));
+      dataRows[j].newLeftCol(accumulatedData.getString(j));
-    return toList(getTableContent(sectionId, tableId).getInternalJsonObject().getJSONArray(column));
+    return toList((ArrayNode) getTableContent(sectionId, tableId).get(column));
-    JSONObject table = getTableContent(sectionId, tableId).getInternalJsonObject();
-    for (String column : table.keySet()) {
-      result.put(column, toList(table.getJSONArray(column)));
+    JsonNode table = getTableContent(sectionId, tableId).getInternalJsonObject();
+    Iterator<String> fieldNames = table.fieldNames();
+    while (fieldNames.hasNext()) {
+      String column = fieldNames.next();
+      result.put(column, toList((ArrayNode) table.get(column)));
-  private List<String> toList(JSONArray array) {
-    Object[] values = new Object[array.length()];
+  private List<String> toList(ArrayNode array) {
+    Object[] values = new Object[array.size()];
-    for (int i = 0; i < array.length(); i++) {
-      values[i] = array.get(i);
+    for (int i = 0; i < array.size(); i++) {
+      values[i] = array.get(i).textValue();
