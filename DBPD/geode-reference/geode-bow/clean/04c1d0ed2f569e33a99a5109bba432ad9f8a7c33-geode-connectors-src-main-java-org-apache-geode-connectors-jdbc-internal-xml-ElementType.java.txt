GEODE-5935: move jdbc xml mapping to be in a region  (#2739)

The jdbc region-mapping xml element is now jdbc:mapping.
It no longer has a "region" attribute since it is nested in a region.
Creating a jdbc-mapping requires that the region already exists.
The jdbc:mapping element is now nested in a region element instead of the cache element.
The old connector-service element has been completely removed.
Some of the jdbc-mapping gfsh commands now require at least one server to be running.

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Jianxia Chen <jchen21@apache.org>
Co-authored-by: Ben Ross @BenjaminPerryRoss 

-import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
-import org.apache.geode.internal.cache.xmlcache.CacheCreation;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
+import org.apache.geode.internal.cache.xmlcache.RegionCreation;
-  CONNECTION_SERVICE("connector-service") {
+  JDBC_MAPPING("mapping") {
-      if (!(stack.peek() instanceof CacheCreation)) {
+      if (!(stack.peek() instanceof RegionCreation)) {
-            "jdbc <connector-service> elements must occur within <cache> elements");
+            "<jdbc:mapping> elements must occur within <region> elements");
-      CacheCreation cacheCreation = (CacheCreation) stack.peek();
-      JdbcServiceConfiguration serviceConfig = new JdbcServiceConfiguration();
-      cacheCreation.getExtensionPoint().addExtension(serviceConfig);
-      stack.push(serviceConfig);
-    }
-
-    @Override
-    void endElement(Stack<Object> stack) {
-      stack.pop();
-    }
-  },
-  REGION_MAPPING("region-mapping") {
-    @Override
-    void startElement(Stack<Object> stack, Attributes attributes) {
-      if (!(stack.peek() instanceof JdbcServiceConfiguration)) {
-        throw new CacheXmlException(
-            "jdbc <region-mapping> elements must occur within <connector-service> elements");
-      }
-      ConnectorService.RegionMapping mapping = new ConnectorService.RegionMapping();
-      mapping.setRegionName(attributes.getValue(JdbcConnectorServiceXmlParser.REGION));
+      RegionCreation regionCreation = (RegionCreation) stack.peek();
+      RegionMapping mapping = new RegionMapping();
+      mapping.setRegionName(regionCreation.getFullPath().substring(1));
-      ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) stack.pop();
-      JdbcServiceConfiguration connectorService = (JdbcServiceConfiguration) stack.peek();
-      connectorService.addRegionMapping(mapping);
+      RegionMapping mapping = (RegionMapping) stack.pop();
+      RegionCreation regionCreation = (RegionCreation) stack.peek();
+      regionCreation.getExtensionPoint().addExtension(new RegionMappingConfiguration(mapping));
-      if (!(stack.peek() instanceof ConnectorService.RegionMapping)) {
+      if (!(stack.peek() instanceof RegionMapping)) {
-            "jdbc <field-mapping> elements must occur within <region-mapping> elements");
+            "<jdbc:field-mapping> elements must occur within <jdbc:mapping> elements");
-      ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) stack.peek();
+      RegionMapping mapping = (RegionMapping) stack.peek();
-          .add(new ConnectorService.RegionMapping.FieldMapping(
+          .add(new RegionMapping.FieldMapping(
