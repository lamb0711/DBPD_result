Authorization is now called only on unique context values

+import java.util.HashSet;
-    AttributeList results = new AttributeList();
-    for (String attribute : attributes) {
-      try {
-        Object value = getAttribute(name, attribute);
-        Attribute att = new Attribute(attribute, value);
-        results.add(att);
-      } catch (Exception e) {
-        throw new GemFireSecurityException("error getting value of " + attribute + " from " + name,
-            e);
-      }
+    AttributeList results;
+    checkAuthorization(name, attributes);
+    try {
+      results = mbs.getAttributes(name, attributes);
+    } catch (Exception e) {
+      throw new GemFireSecurityException(
+          "error getting values of attributes :" + attributes + " from " + name,
+          e);
+  void checkAuthorization(ObjectName name, String[] attributes)
+      throws InstanceNotFoundException, ReflectionException {
+    Set<ResourcePermission> contextSet = new HashSet<>();
+    for (String attribute : attributes) {
+      ResourcePermission ctx = getOperationContext(name, attribute, false);
+      if (ctx != null) {
+        if (contextSet.add(ctx)) {
+          this.securityService.authorize(ctx);
+        }
+      }
+    }
+  }
+
-    for (Attribute attribute : attributes.asList()) {
-      try {
-        setAttribute(name, attribute);
-      } catch (Exception e) {
-        throw new GemFireSecurityException("error setting attribute " + attribute + " of " + name,
-            e);
-      }
+    checkAuthorization(name,
+        (String[]) attributes.parallelStream().map(attribute -> ((Attribute) attribute).getName())
+            .toArray());
+    try {
+      mbs.setAttributes(name, attributes);
+    } catch (Exception e) {
+      throw new GemFireSecurityException("error setting attributes :" + attributes + " of " + name,
+          e);
