Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A PdxReader will be passed to {@link PdxSerializable#fromData(PdxReader) fromData} or 
- * {@link PdxSerializer#fromData(Class, PdxReader) PdxSerializer fromData} by GemFire during deserialization of 
- * a PDX. The domain class needs to deserialize field members 
- * using this interface. This interface is implemented by GemFire.
- * Each readXXX call will return the field's value. If the serialized 
- * PDX does not contain the named field then a default value will 
- * be returned. Standard Java defaults are used. For Objects this is 
- * <code>null</code> and for primitives it is <code>0</code> or <code>0.0</code>.
- * <P> You <em>must</em> read fields in the same order they were written by {@link PdxWriter}.
- * <P> The methods on this interface are not thread safe so do not
- * call them concurrently, on the same instance, from more than one thread.
+ * A PdxReader will be passed to {@link PdxSerializable#fromData(PdxReader) fromData} or
+ * {@link PdxSerializer#fromData(Class, PdxReader) PdxSerializer fromData} by GemFire during
+ * deserialization of a PDX. The domain class needs to deserialize field members using this
+ * interface. This interface is implemented by GemFire. Each readXXX call will return the field's
+ * value. If the serialized PDX does not contain the named field then a default value will be
+ * returned. Standard Java defaults are used. For Objects this is <code>null</code> and for
+ * primitives it is <code>0</code> or <code>0.0</code>.
+ * <P>
+ * You <em>must</em> read fields in the same order they were written by {@link PdxWriter}.
+ * <P>
+ * The methods on this interface are not thread safe so do not call them concurrently, on the same
+ * instance, from more than one thread.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>char</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>char</code>
+   *         field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>boolean</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>boolean</code> field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>byte</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>byte</code>
+   *         field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>short</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>short</code>
+   *         field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>int</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>int</code>
+   *         field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>long</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>long</code>
+   *         field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>float</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>float</code>
+   *         field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>double</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>double</code> field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>String</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>String</code> field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not an <code>Object</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not an
+   *         <code>Object</code> field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>char[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>char[]</code> field.
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>boolean[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>boolean[]</code> field.
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>byte[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>byte[]</code> field.
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>short[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>short[]</code> field.
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>int[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>int[]</code>
+   *         field.
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>long[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>long[]</code> field.
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>float[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>float[]</code> field.
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>double[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>double[]</code> field.
-  public double[] readDoubleArray(String fieldName) ;
+  public double[] readDoubleArray(String fieldName);
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>String[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>String[]</code> field.
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>Object[]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>Object[]</code> field.
-  
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>byte[][]</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a
+   *         <code>byte[][]</code> field.
-  
+
+   * 
-   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>Date</code> field.
+   * @throws PdxFieldTypeMismatchException if the named field exists and is not a <code>Date</code>
+   *         field.
-   * <p>This can be useful when writing code that handles more than one version of
-   * a PDX class.
+   * <p>
+   * This can be useful when writing code that handles more than one version of a PDX class.
+   * 
-  
+
-   * Checks if the named field was {@link PdxWriter#markIdentityField(String) marked} as an identity field.
-   * <p>Note that if no fields have been marked then all the fields are used as identity fields even though
-   * this method will return <code>false</code> since none of them have been <em>marked</em>.
+   * Checks if the named field was {@link PdxWriter#markIdentityField(String) marked} as an identity
+   * field.
+   * <p>
+   * Note that if no fields have been marked then all the fields are used as identity fields even
+   * though this method will return <code>false</code> since none of them have been <em>marked</em>.
+   * 
-   * @return <code>true</code> if the named field exists and was marked as an identify field; otherwise <code>false</code>
+   * @return <code>true</code> if the named field exists and was marked as an identify field;
+   *         otherwise <code>false</code>
+   * 
-  
+
-   * This method returns an object that represents all the unread fields which must be
-   * passed to {@link PdxWriter#writeUnreadFields(PdxUnreadFields) writeUnreadFields} in the toData code.
-   * <P>Note that if {@link org.apache.geode.cache.CacheFactory#setPdxIgnoreUnreadFields(boolean) setPdxIgnoreUnreadFields}
-   * or {@link org.apache.geode.cache.client.ClientCacheFactory#setPdxIgnoreUnreadFields(boolean) client setPdxIgnoreUnreadFields}
-   * are set to <code>true</code> then this method will always return an object that has no unread fields.
+   * This method returns an object that represents all the unread fields which must be passed to
+   * {@link PdxWriter#writeUnreadFields(PdxUnreadFields) writeUnreadFields} in the toData code.
+   * <P>
+   * Note that if {@link org.apache.geode.cache.CacheFactory#setPdxIgnoreUnreadFields(boolean)
+   * setPdxIgnoreUnreadFields} or
+   * {@link org.apache.geode.cache.client.ClientCacheFactory#setPdxIgnoreUnreadFields(boolean)
+   * client setPdxIgnoreUnreadFields} are set to <code>true</code> then this method will always
+   * return an object that has no unread fields.
