Merge branch 'release/1.3.0'

-  /**
-   * Enables parallel mode for snapshot operations. This will cause each member of a partitioned
-   * region to save its local data set (ignoring redundant copies) to a separate snapshot file.
-   * During a parallel import, each member may read from one or more snapshot files created during a
-   * parallel export.
-   * <p>
-   * Parallelizing snapshot operations may yield significant performance improvements for large data
-   * sets. This is particularly true when each member is reading from or writing to separate
-   * physical disks.
-   * <p>
-   * This flag is ignored for replicated regions.
-   * <p>
-   * If the mapper is not set explicitly, a default mapping implementation is used that assumes each
-   * member can access a non-shared disk volume. The default mapper provides the following behavior:
-   * <dl>
-   * <dt>export</dt>
-   * <dd>use the supplied path</dd>
-   * <dt>import</dt>
-   * <dd>if the supplied path is a file, use that file</dd>
-   * <dd>if the supplied path is a directory, use all files in the directory</dd>
-   * </dl>
-   * If processes are colocated on the same machine and relative pathnames are not used, a custom
-   * mapper <b>must</b> be supplied to disambiguate filenames. This rule applies when writing to a
-   * shared network volume as well.
-   * 
-   * @param parallel true if the snapshot operations will be performed in parallel
-   * @return the snapshot options
-   * 
-   * @see SnapshotFileMapper
-   */
+
+  @Override
-  /**
-   * Returns true if the snapshot operation will proceed in parallel.
-   * 
-   * @return true if the parallel mode has been enabled
-   */
+  @Override
-   * 
+   *
-   * 
+   *
-    return (mapper == null) ? RegionSnapshotServiceImpl.LOCAL_MAPPER : mapper;
+    if (mapper == null) {
+      mapper = isParallelMode() ? new ParallelSnapshotFileMapper()
+          : RegionSnapshotServiceImpl.LOCAL_MAPPER;
+    }
+    return mapper;
+  }
+
+  @Override
+  public String toString() {
+    StringBuffer buf = new StringBuffer();
+    buf.append("SnapshotOptionsImpl@").append(System.identityHashCode(this)).append(": ")
+        .append("parallel=").append(parallel).append("; invokeCallbacks=").append(invokeCallbacks)
+        .append("; filter=").append(filter).append("; mapper=").append(mapper);
+    return buf.toString();
