GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.execute.Execution;
-import org.apache.geode.cache.execute.Function;
-import org.apache.geode.cache.execute.FunctionService;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.internal.ClassPathLoader;
-import org.apache.geode.internal.cache.execute.AbstractExecution;
-import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;
-import org.apache.geode.internal.lang.StringUtils;
-import org.apache.geode.internal.util.IOUtils;
-import org.apache.geode.management.DistributedSystemMXBean;
-import org.apache.geode.management.ManagementService;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.functions.MembersForRegionFunction;
-import org.apache.geode.management.internal.cli.i18n.CliStrings;
-import org.apache.geode.management.internal.cli.result.CommandResultException;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.shell.Gfsh;
-
+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.execute.Execution;
+import org.apache.geode.cache.execute.Function;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.cache.execute.AbstractExecution;
+import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;
+import org.apache.geode.internal.lang.StringUtils;
+import org.apache.geode.internal.util.IOUtils;
+import org.apache.geode.management.DistributedSystemMXBean;
+import org.apache.geode.management.ManagementService;
+import org.apache.geode.management.cli.Result;
+import org.apache.geode.management.internal.cli.functions.MembersForRegionFunction;
+import org.apache.geode.management.internal.cli.i18n.CliStrings;
+import org.apache.geode.management.internal.cli.result.CommandResultException;
+import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.shell.Gfsh;
+
- *
+
+
-  public static Cache getCacheIfExists() {
-    Cache cache;
+  public static InternalCache getCacheIfExists() {
+    InternalCache cache;
-      cache = CacheFactory.getAnyInstance();
+      cache = getInternalCache();
-      if (file.isDirectory()) { // TODO - Abhishek: (1) No recursive search yet. (2) Do we need to
-                                // check/limit size of the files too?
+      if (file.isDirectory()) {
+        // TODO: (1) No recursive search yet. (2) Do we need to check/limit size of the files too?
-
-
+  private static InternalCache getInternalCache() {
+    return (InternalCache) CacheFactory.getAnyInstance();
+  }
+
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getInternalCache();
-
-
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getInternalCache();
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getInternalCache();
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getInternalCache();
-
-    /**
-     * @param dataLength
-     * @param data
-     */
+   * 
+   * @param cache
-  public static Set<DistributedMember> getAllNormalMembers(Cache cache) {
-    return new HashSet<DistributedMember>(((InternalDistributedSystem) cache.getDistributedSystem())
+  public static Set<DistributedMember> getAllNormalMembers(InternalCache cache) {
+    return new HashSet<DistributedMember>(cache.getInternalDistributedSystem()
+   * 
+   * @param cache
-  public static Set<DistributedMember> getAllMembers(Cache cache) {
-    return new HashSet<DistributedMember>(((InternalDistributedSystem) cache.getDistributedSystem())
-        .getDistributionManager().getDistributionManagerIds());
+  public static Set<DistributedMember> getAllMembers(InternalCache cache) {
+    return new HashSet<DistributedMember>(
+        cache.getInternalDistributedSystem().getDistributionManager().getDistributionManagerIds());
-  public static Set<DistributedMember> getDistributedMembersByGroup(Cache cache, String[] groups) {
+  public static Set<DistributedMember> getDistributedMembersByGroup(InternalCache cache,
+      String[] groups) {
-      groupMembers.addAll(((InternalDistributedSystem) cache.getDistributedSystem())
-          .getDistributionManager().getGroupMembers(group));
+      groupMembers.addAll(
+          cache.getInternalDistributedSystem().getDistributionManager().getGroupMembers(group));
-   * @param cache Cache instance to use to find members
+   * @param cache cache instance to use to find members
-      final Cache cache, boolean returnAll) {
+      final InternalCache cache, boolean returnAll) {
-   * <p/>
-  // Moved form LauncherLifeCycleCommands
-
-
-
-  public static Set<DistributedMember> getMembersForeRegionViaFunction(Cache cache,
+  public static Set<DistributedMember> getMembersForeRegionViaFunction(InternalCache cache,
