GEODE-5407: fix JMXMBeanReconnectDUnitTest timing (#2833)

* GEODE-5407: fix JMXMBeanReconnectDUnitTest timing

This test class had several timing isses for the remote MBean tests.
This PR fixes all known timing issues, which were MBean inconsistencies
in the before() and trouble reconnecting stopped members, as well as
insufficiently strict assertions (comparing lists with
.containsExactlyElementsOf() is not commutative). This commit also
changes MemberVM's forceDisconnect to use a blackboard mailbox instead
of a fixed amount of time to decid when to start reconnecting. It also
adds functionality to the ConcurrencyRule to act as an awaitility.

* In waitForLocatorsToAgreeOnMembership, called from the before, the
MBeans that each locator has were only compared by list size. Now they
are compared element by element, and the sizes are checked to be
correct.

* In waitForLocatorToAgreeOnMembership, the wait was returning
prematurely after the first pass due to Awaitlity.untilAsserted not
working correctly. For this method, a simple implementation using
assertions and Awaitility caused memory issues, so the current
implementation uses do/while loops, compares the lists element by
element, and starts a single thread that is allowed to run for 300
seconds.

* In the tests, the timing was not strictly enforced. The disconnect and
starting the reconnect now happen in different threads. The thread that
starts the reconnect checks that the disconnect has happened, gathers
relevant information, then signals that reconnect can start, which the
reconnect thread now checks for. This ensures that we don't gather
MBeans before the member has fully stopped, and that reconnect does not
start until we've gathered the MBeans.

* Assertions have been made more strict by checking that lists against
each other twice, since Assertions.containsExactlyElementsOf() is not
commutative.

* Use a blackboard entry to check if the stopped member should start
reconnecting in the reconnect listener attached from MemberVM when
forcing a member to disconnect.

* Add functionality to ConcurrencyRule to act as an awaitility,
expecting a value to eventually be true. This was added during the
process of trying to solve this bug but is not used in the final
implementation.

* fail the test when waits timeout

* create a single connection per locator and reuse it

* make suggested changes from PR comments

+import static java.util.concurrent.TimeUnit.SECONDS;
+    private Boolean eventualExpectedValueSet;
+      eventualExpectedValueSet = false;
+      eventualExpectedValueSet = false;
+     * Sets the expected result of running the thread to be a value eventually matching the given
+     * value
+     *
+     * @param expectedValue the value expected to be returned from the thread. The value must
+     *        implement equals
+     * @return this, the ConcurrentOperation (containing a callable) that has been set to repeat
+     */
+    public ConcurrentOperation repeatUntilValue(T expectedValue) {
+      if (this.expectedResultIsSet) {
+        throw new IllegalArgumentException("Specify only one expected outcome.");
+      }
+
+      this.eventualExpectedValueSet = true;
+      this.expectedValue = expectedValue;
+      this.expectedResultIsSet = true;
+      return this;
+    }
+
+    /**
-              && timeRun.elapsed(TimeUnit.SECONDS) <= duration.getSeconds()));
+              && timeRun.elapsed(SECONDS) <= duration.getSeconds()));
+      T retVal;
+      int numRuns = 0;
+      Stopwatch timeRun = Stopwatch.createStarted();
-        T retVal = this.callable.call();
+        do {
+          numRuns++;
+          retVal = this.callable.call();
+
+          if (eventualExpectedValueSet && retVal.equals(expectedValue)) {
+            return;
+          }
+        } while (eventualExpectedValueSet
+            && ((iterations != DEFAULT_ITERATIONS && numRuns < iterations)
+                || (timeRun.elapsed(SECONDS) <= duration.getSeconds())));
-
