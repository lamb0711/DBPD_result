Geode 4263 (#4691)

GEODE-4263: Cleaned up and phase 1 ready.

- Initial refactor to cleanup
- removing a bunch of thread sleeps
- adding awaits
- One key fix was to increase the latch wait time.
- Added a latch to fix an issue where we might not be waiting long enough
- Requested changes made.

-    AbstractOp op = null;
+    AbstractOp op;
-    public QueryOpImpl(String queryPredicate) {
+    QueryOpImpl(String queryPredicate) {
-    public QueryOpImpl(String queryPredicate, Object[] queryParams) {
+    QueryOpImpl(String queryPredicate, Object[] queryParams) {
-      ChunkHandler ch = new ChunkHandler() {
-        @Override
-        public void handle(ChunkedMessage cm) throws Exception {
-          Part collectionTypePart = cm.getPart(0);
-          Object o = collectionTypePart.getObject();
-          if (o instanceof Throwable) {
-            String s = "While performing a remote " + getOpName();
-            exceptionRef[0] = new ServerOperationException(s, (Throwable) o);
-            return;
+      ChunkHandler ch = cm -> {
+        Part collectionTypePart = cm.getPart(0);
+        Object o = collectionTypePart.getObject();
+        if (o instanceof Throwable) {
+          String s = "While performing a remote " + getOpName();
+          exceptionRef[0] = new ServerOperationException(s, (Throwable) o);
+          return;
+        }
+        CollectionType collectionType = (CollectionType) o;
+        Part resultPart = cm.getPart(1);
+        Object queryResult;
+        try {
+          queryResult = resultPart.getObject();
+        } catch (Exception e) {
+          String s = "While deserializing " + getOpName() + " result";
+          exceptionRef[0] = new SerializationException(s, e);
+          return;
+        }
+        if (queryResult instanceof Throwable) {
+          String s = "While performing a remote " + getOpName();
+          exceptionRef[0] = new ServerOperationException(s, (Throwable) queryResult);
+        } else if (queryResult instanceof Integer) {
+          // Create the appropriate SelectResults instance if necessary
+          if (resultRef[0] == null) {
+            resultRef[0] = QueryUtils.getEmptySelectResults(TypeUtils.OBJECT_TYPE, null);
-          CollectionType collectionType = (CollectionType) o;
-          Part resultPart = cm.getPart(1);
-          Object queryResult = null;
-          try {
-            queryResult = resultPart.getObject();
-          } catch (Exception e) {
-            String s = "While deserializing " + getOpName() + " result";
-            exceptionRef[0] = new SerializationException(s, e);
-            return;
+          resultRef[0].add(queryResult);
+        } else { // typical query result
+          // Create the appropriate SelectResults instance if necessary
+          if (resultRef[0] == null) {
+            resultRef[0] = QueryUtils.getEmptySelectResults(collectionType, null);
-          if (queryResult instanceof Throwable) {
-            String s = "While performing a remote " + getOpName();
-            exceptionRef[0] = new ServerOperationException(s, (Throwable) queryResult);
-            return;
-          } else if (queryResult instanceof Integer) {
-            // Create the appropriate SelectResults instance if necessary
-            if (resultRef[0] == null) {
-              resultRef[0] = QueryUtils.getEmptySelectResults(TypeUtils.OBJECT_TYPE, null);
-            }
-            resultRef[0].add(queryResult);
-          } else { // typical query result
-            // Create the appropriate SelectResults instance if necessary
-            if (resultRef[0] == null) {
-              resultRef[0] = QueryUtils.getEmptySelectResults(collectionType, null);
-            }
-            SelectResults selectResults = resultRef[0];
-            ObjectType objectType = collectionType.getElementType();
-            Object[] resultArray;
-            // for select * queries, the serialized object byte arrays are
-            // returned as part of ObjectPartList
-            boolean isObjectPartList = false;
-            if (queryResult instanceof ObjectPartList) {
-              isObjectPartList = true;
-              resultArray = ((ObjectPartList) queryResult).getObjects().toArray();
-            } else {
-              // Add the results to the SelectResults
-              resultArray = (Object[]) queryResult;
-            }
-            if (objectType.isStructType()) {
-              for (int i = 0; i < resultArray.length; i++) {
-                if (isObjectPartList) {
-                  selectResults.add(new StructImpl((StructTypeImpl) objectType,
-                      ((ObjectPartList) resultArray[i]).getObjects().toArray()));
-                } else {
-                  selectResults
-                      .add(new StructImpl((StructTypeImpl) objectType, (Object[]) resultArray[i]));
-                }
+          SelectResults selectResults = resultRef[0];
+          ObjectType objectType = collectionType.getElementType();
+          Object[] resultArray;
+          // for select * queries, the serialized object byte arrays are
+          // returned as part of ObjectPartList
+          boolean isObjectPartList = false;
+          if (queryResult instanceof ObjectPartList) {
+            isObjectPartList = true;
+            resultArray = ((ObjectPartList) queryResult).getObjects().toArray();
+          } else {
+            // Add the results to the SelectResults
+            resultArray = (Object[]) queryResult;
+          }
+          if (objectType.isStructType()) {
+            for (Object value : resultArray) {
+              if (isObjectPartList) {
+                selectResults.add(new StructImpl((StructTypeImpl) objectType,
+                    ((ObjectPartList) value).getObjects().toArray()));
+              } else {
+                selectResults
+                    .add(new StructImpl((StructTypeImpl) objectType, (Object[]) value));
-            } else {
-              selectResults.addAll(Arrays.asList(resultArray));
+          } else {
+            selectResults.addAll(Arrays.asList(resultArray));
