Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  RegisterInterest61() {
-  }
+  RegisterInterest61() {}
-      policy = (InterestResultPolicy)msg.getPart(2).getObject();
-    }
-    catch (Exception e) {
+      policy = (InterestResultPolicy) msg.getPart(2).getObject();
+    } catch (Exception e) {
-    boolean isDurable = false ;
+    boolean isDurable = false;
-      byte[] durablePartBytes = (byte[])durablePart.getObject();
+      byte[] durablePartBytes = (byte[]) durablePart.getObject();
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-//  region data policy
+    // region data policy
-      Part regionDataPolicyPart = msg.getPart(msg.getNumberOfParts()-1);
-      regionDataPolicyPartBytes = (byte[])regionDataPolicyPart.getObject();
+      Part regionDataPolicyPart = msg.getPart(msg.getNumberOfParts() - 1);
+      regionDataPolicyPartBytes = (byte[]) regionDataPolicyPart.getObject();
-        serializeValues = regionDataPolicyPartBytes[1] == (byte)0x01;
+        serializeValues = regionDataPolicyPartBytes[1] == (byte) 0x01;
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    
+
-    
+
-        byte[] notifyPartBytes = (byte[])notifyPart.getObject();
+        byte[] notifyPartBytes = (byte[]) notifyPart.getObject();
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    
+
-      logger.debug("{}: Received register interest 61 request ({} bytes) from {} for region {} key {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key);
+      logger.debug(
+          "{}: Received register interest 61 request ({} bytes) from {} for region {} key {}",
+          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key);
-    
+
-        message = LocalizedStrings.RegisterInterest_THE_INPUT_KEY_FOR_THE_REGISTER_INTEREST_REQUEST_IS_NULL;
+        message =
+            LocalizedStrings.RegisterInterest_THE_INPUT_KEY_FOR_THE_REGISTER_INTEREST_REQUEST_IS_NULL;
-        message = LocalizedStrings.RegisterInterest_THE_INPUT_REGION_NAME_FOR_THE_REGISTER_INTEREST_REQUEST_IS_NULL;
+        message =
+            LocalizedStrings.RegisterInterest_THE_INPUT_REGION_NAME_FOR_THE_REGISTER_INTEREST_REQUEST_IS_NULL;
-    LocalRegion region = (LocalRegion)servConn.getCache().getRegion(regionName);
+    LocalRegion region = (LocalRegion) servConn.getCache().getRegion(regionName);
-      logger.info(LocalizedMessage.create(LocalizedStrings.RegisterInterest_0_REGION_NAMED_1_WAS_NOT_FOUND_DURING_REGISTER_INTEREST_REQUEST, new Object[] {servConn.getName(), regionName}));
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.RegisterInterest_0_REGION_NAMED_1_WAS_NOT_FOUND_DURING_REGISTER_INTEREST_REQUEST,
+          new Object[] {servConn.getName(), regionName}));
-      if(interestType == InterestType.REGULAR_EXPRESSION) {
+      if (interestType == InterestType.REGULAR_EXPRESSION) {
-      }
-      else {
+      } else {
-          RegisterInterestOperationContext registerContext = authzRequest
-              .registerInterestAuthorize(regionName, key, interestType,
-                  policy);
+          RegisterInterestOperationContext registerContext =
+              authzRequest.registerInterestAuthorize(regionName, key, interestType, policy);
-      servConn.getAcceptor().getCacheClientNotifier()
-          .registerClientInterest(regionName, key, servConn.getProxyID(),
-              interestType, isDurable, sendUpdatesAsInvalidates, true,
-              regionDataPolicyPartBytes[0], true);
-    }
-    catch (Exception e) {
+      servConn.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName, key,
+          servConn.getProxyID(), interestType, isDurable, sendUpdatesAsInvalidates, true,
+          regionDataPolicyPartBytes[0], true);
+    } catch (Exception e) {
-    CacheClientProxy ccp = servConn.getAcceptor().getCacheClientNotifier()
-        .getClientProxy(servConn.getProxyID());
+    CacheClientProxy ccp =
+        servConn.getAcceptor().getCacheClientNotifier().getClientProxy(servConn.getProxyID());
-        logger.debug("{}: Sending register interest response chunk from secondary for region: {} for key: {} chunk=<{}>", servConn.getName(), regionName, key, chunkedResponseMsg);
+        logger.debug(
+            "{}: Sending register interest response chunk from secondary for region: {} for key: {} chunk=<{}>",
+            servConn.getName(), regionName, key, chunkedResponseMsg);
-        fillAndSendRegisterInterestResponseChunks(region, key, interestType,
-            serializeValues, policy, servConn);
+        fillAndSendRegisterInterestResponseChunks(region, key, interestType, serializeValues,
+            policy, servConn);
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-        logger.debug("{}: Sent register interest response for region {} key {}", servConn.getName(), regionName, key);
+        logger.debug("{}: Sent register interest response for region {} key {}", servConn.getName(),
+            regionName, key);
