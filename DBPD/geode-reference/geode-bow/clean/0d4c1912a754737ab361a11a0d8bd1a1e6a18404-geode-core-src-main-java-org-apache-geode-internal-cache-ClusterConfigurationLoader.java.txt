GEODE-7436: Deploy jar using semantic versioning scheme (#4343)

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Jinmei Liao <jiliao@pivotal.io>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Joris Melchior <jmelchior@pivotal.io>

* Deploy jar using semantic versioning scheme
* always add sequence number at the end of the filename no matter what version scheme the deployed file uses.

-import static java.util.stream.Collectors.toList;
-        response.getJarNames().values().stream().flatMap(Set::stream).collect(Collectors.toList());
+        response.getJarNames().values().stream()
+            .flatMap(Set::stream)
+            .collect(Collectors.toList());
-        List<String> extraJarsOnServer =
-            jarDeployer.findDeployedJars().stream().map(DeployedJar::getJarName)
-                .filter(jarName -> !jarFileNames.contains(jarName)).collect(toList());
-
-        for (String extraJar : extraJarsOnServer) {
-          logger.info("Removing jar not present in cluster configuration: {}", extraJar);
-          jarDeployer.deleteAllVersionsOfJar(extraJar);
-        }
-
-        Map<String, File> stagedJarFiles =
+        Set<File> stagedJarFiles =
+        for (File stagedJarFile : stagedJarFiles) {
+          logger.info("Removing old versions of {} in cluster configuration.",
+              stagedJarFile.getName());
+          jarDeployer.deleteAllVersionsOfJar(stagedJarFile.getName());
+        }
+
-  private Map<String, File> getJarsFromLocator(DistributedMember locator,
+  // download the jars from the locator for the specific groups this server is on (the server
+  // might be on multiple groups.
+  private Set<File> getJarsFromLocator(DistributedMember locator,
-    return results;
+    return new HashSet<>(results.values());
-  public static File downloadJar(DistributedMember locator, String groupName, String jarName)
+  // the returned File will use use jarName as the fileName
+  public File downloadJar(DistributedMember locator, String groupName, String jarName)
+      throws IOException {
+    Path tempDir = FileUploader.createSecuredTempDirectory("deploy-");
+    Path tempJar = Paths.get(tempDir.toString(), jarName);
+
+    downloadTo(locator, groupName, jarName, tempJar);
+
+    return tempJar.toFile();
+  }
+
+  void downloadTo(DistributedMember locator, String groupName, String jarName, Path jarPath)
-    Path tempDir = FileUploader.createSecuredTempDirectory("deploy-");
-    Path tempJar = Paths.get(tempDir.toString(), jarName);
-    FileOutputStream fos = new FileOutputStream(tempJar.toString());
+    FileOutputStream fos = new FileOutputStream(jarPath.toString());
-
-    return tempJar.toFile();
