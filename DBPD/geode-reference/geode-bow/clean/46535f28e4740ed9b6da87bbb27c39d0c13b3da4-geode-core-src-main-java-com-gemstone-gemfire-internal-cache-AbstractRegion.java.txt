GEODE-1072: Removing HDFS related code

Removing all HDFS and EvictionCriteria created code. This code will be
reinstated on a branch to be cleaned up and merged as a separate module.

-import java.util.concurrent.TimeUnit;
-import com.gemstone.gemfire.cache.CustomEvictionAttributes;
-import com.gemstone.gemfire.cache.EvictionCriteria;
-import com.google.common.util.concurrent.Service.State;
-  protected CustomEvictionAttributes customEvictionAttributes;
-
-  protected String hdfsStoreName;
-  
-  protected boolean hdfsWriteOnly;
-  
-  @Override
-  public final String getHDFSStoreName() {
-    return this.hdfsStoreName;
-  }
-  
-  @Override
-  public final boolean getHDFSWriteOnly() {
-    return this.hdfsWriteOnly;
-  }
-  
-    this.customEvictionAttributes = attrs.getCustomEvictionAttributes();
-    this.hdfsStoreName = attrs.getHDFSStoreName();
-    this.hdfsWriteOnly = attrs.getHDFSWriteOnly();
-  /**
-   * {@inheritDoc}
-   */
-  @Override
-  public CustomEvictionAttributes getCustomEvictionAttributes() {
-    return this.customEvictionAttributes;
-  }
-
-  /**
-   * {@inheritDoc}
-   */
-  @Override
-  public CustomEvictionAttributes setCustomEvictionAttributes(long newStart,
-      long newInterval) {
-    checkReadiness();
-    if (this.customEvictionAttributes == null) {
-      throw new IllegalArgumentException(
-          LocalizedStrings.AbstractRegion_NO_CUSTOM_EVICTION_SET
-              .toLocalizedString(getFullPath()));
-    }
-
-    if (newStart == 0) {
-      newStart = this.customEvictionAttributes.getEvictorStartTime();
-    }
-    this.customEvictionAttributes = new CustomEvictionAttributesImpl(
-        this.customEvictionAttributes.getCriteria(), newStart, newInterval,
-        newStart == 0 && newInterval == 0);
-
-//    if (this.evService == null) {
-//      initilializeCustomEvictor();
-//    } else {// we are changing the earlier one which is already started.
-//      EvictorService service = getEvictorTask();
-//      service.changeEvictionInterval(newInterval);
-//      if (newStart != 0)
-//        service.changeStartTime(newStart);
-//    }
-
-    return this.customEvictionAttributes;
-  }
-  
-  * property used to find region operations that reach out to HDFS multiple times
-  /**
-   * property used to find region operations that reach out to HDFS multiple times
-   */
-  private static final boolean DEBUG_HDFS_CALLS = Boolean.getBoolean("DebugHDFSCalls");
-
-  /**
-   * throws exception if region operation goes out to HDFS multiple times
-   */
-  private static final boolean THROW_ON_MULTIPLE_HDFS_CALLS = Boolean.getBoolean("throwOnMultipleHDFSCalls");
-
-  private ThreadLocal<CallLog> logHDFSCalls = DEBUG_HDFS_CALLS ? new ThreadLocal<CallLog>() : null;
-
-  public void hdfsCalled(Object key) {
-    if (!DEBUG_HDFS_CALLS) {
-      return;
-    }
-    logHDFSCalls.get().addStack(new Throwable());
-    logHDFSCalls.get().setKey(key);
-  }
-  public final void operationStart() {
-    if (!DEBUG_HDFS_CALLS) {
-      return;
-    }
-    if (logHDFSCalls.get() == null) {
-      logHDFSCalls.set(new CallLog());
-      //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:operationStart", new Throwable());
-    } else {
-      logHDFSCalls.get().incNestedCall();
-      //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:incNestedCall:", new Throwable());
-    }
-  }
-  public final void operationCompleted() {
-    if (!DEBUG_HDFS_CALLS) {
-      return;
-    }
-    //InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:operationCompleted", new Throwable());
-    if (logHDFSCalls.get() != null && logHDFSCalls.get().decNestedCall() < 0) {
-      logHDFSCalls.get().assertCalls();
-      logHDFSCalls.set(null);
-    }
-  }
-
-  public static class CallLog {
-    private List<Throwable> stackTraces = new ArrayList<Throwable>();
-    private Object key;
-    private int nestedCall = 0;
-    public void incNestedCall() {
-      nestedCall++;
-    }
-    public int decNestedCall() {
-      return --nestedCall;
-    }
-    public void addStack(Throwable stack) {
-      this.stackTraces.add(stack);
-    }
-    public void setKey(Object key) {
-      this.key = key;
-    }
-    public void assertCalls() {
-      if (stackTraces.size() > 1) {
-        Throwable firstTrace = new Throwable();
-        Throwable lastTrace = firstTrace;
-        for (Throwable t : this.stackTraces) {
-          lastTrace.initCause(t);
-          lastTrace = t;
-        }
-        if (THROW_ON_MULTIPLE_HDFS_CALLS) {
-          throw new RuntimeException("SWAP:For key:"+key+" HDFS get called more than once: ", firstTrace);
-        } else {
-          InternalDistributedSystem.getLoggerI18n().warning(LocalizedStrings.DEBUG, "SWAP:For key:"+key+" HDFS get called more than once: ", firstTrace);
-        }
-      }
-    }
-  }
-
-  public EvictionCriteria getEvictionCriteria() {
-    EvictionCriteria criteria = null;
-    if (this.customEvictionAttributes != null
-        && !this.customEvictionAttributes.isEvictIncoming()) {
-      criteria = this.customEvictionAttributes.getCriteria();
-    }
-    return criteria;
-  }
