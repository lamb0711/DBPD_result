GEODE-6857: Moves function timeout to function operations.

* Extracts out an abstract function operation that manages setting
  and restoring timeout.

* Move timeout property read to AbstractExecution constructor.

+import static org.apache.geode.internal.cache.execute.AbstractExecution.DEFAULT_CLIENT_FUNCTION_TIMEOUT;
+
-      boolean allBuckets) {
+      boolean allBuckets, final int timeoutMs) {
-        hasResult, resultCollector, cms, allBuckets);
+        hasResult, resultCollector, cms, allBuckets, timeoutMs);
-          serverRegionExecutor, resultCollector, hasResult, failedNodes, retryAttempts - 1);
+          serverRegionExecutor, resultCollector, hasResult, failedNodes, retryAttempts - 1,
+          timeoutMs);
-      boolean allBuckets, boolean isHA, boolean optimizeForWrite) {
+      boolean allBuckets, boolean isHA, boolean optimizeForWrite, final int timeoutMs) {
-        hasResult, resultCollector, cms, allBuckets, isHA, optimizeForWrite);
+        hasResult, resultCollector, cms, allBuckets, isHA, optimizeForWrite, timeoutMs);
-          isHA, optimizeForWrite);
+          isHA, optimizeForWrite, timeoutMs);
-      boolean allBucket) {
+      boolean allBucket, final int timeoutMs) {
-          hasResult, new HashSet<>(), allBucket);
+          hasResult, new HashSet<>(), allBucket, timeoutMs);
-      boolean allBucket, boolean isHA, boolean optimizeForWrite) {
+      boolean allBucket, boolean isHA, boolean optimizeForWrite, final int timeoutMs) {
-          hasResult, new HashSet<>(), allBucket, isHA, optimizeForWrite);
+          hasResult, new HashSet<>(), allBucket, isHA, optimizeForWrite, timeoutMs);
-  static class ExecuteRegionFunctionSingleHopOpImpl extends AbstractOp {
+  static class ExecuteRegionFunctionSingleHopOpImpl extends AbstractOpWithTimeout {
-        Set<String> removedNodes, boolean allBuckets) {
+        Set<String> removedNodes, boolean allBuckets, final int timeoutMs) {
-          8 + serverRegionExecutor.getFilter().size() + removedNodes.size());
+          8 + serverRegionExecutor.getFilter().size() + removedNodes.size(), timeoutMs);
-        Set<String> removedNodes, boolean allBuckets, boolean isHA, boolean optimizeForWrite) {
+        Set<String> removedNodes, boolean allBuckets, boolean isHA, boolean optimizeForWrite,
+        final int timeoutMs) {
-          8 + serverRegionExecutor.getFilter().size() + removedNodes.size());
+          8 + serverRegionExecutor.getFilter().size() + removedNodes.size(), timeoutMs);
-      if (ConnectionImpl
-          .getClientFunctionTimeout() == ConnectionImpl.DEFAULT_CLIENT_FUNCTION_TIMEOUT) {
+      if (getTimeoutMs() == DEFAULT_CLIENT_FUNCTION_TIMEOUT) {
-        Part.encodeInt(ConnectionImpl.getClientFunctionTimeout(), bytes, 1);
+        Part.encodeInt(getTimeoutMs(), bytes, 1);
