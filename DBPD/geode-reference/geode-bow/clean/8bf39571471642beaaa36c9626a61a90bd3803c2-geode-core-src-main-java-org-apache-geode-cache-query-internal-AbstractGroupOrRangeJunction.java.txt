Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Abstract Super class of the Group or Range Junction. The common functionality
- * of Group or Range Junction is present in this class.
+ * Abstract Super class of the Group or Range Junction. The common functionality of Group or Range
+ * Junction is present in this class.
-public abstract class AbstractGroupOrRangeJunction extends
-    AbstractCompiledValue implements Filter, OQLLexerTokenTypes {
+public abstract class AbstractGroupOrRangeJunction extends AbstractCompiledValue
+    implements Filter, OQLLexerTokenTypes {
-  private static  final int INDEX_RESULT_THRESHOLD_DEFAULT = 100;
-  public static final String INDX_THRESHOLD_PROP_STR = DistributionConfig.GEMFIRE_PREFIX + "Query.INDEX_THRESHOLD_SIZE";
-  private static final int indexThresholdSize = Integer.getInteger(INDX_THRESHOLD_PROP_STR, INDEX_RESULT_THRESHOLD_DEFAULT).intValue();
+  private static final int INDEX_RESULT_THRESHOLD_DEFAULT = 100;
+  public static final String INDX_THRESHOLD_PROP_STR =
+      DistributionConfig.GEMFIRE_PREFIX + "Query.INDEX_THRESHOLD_SIZE";
+  private static final int indexThresholdSize =
+      Integer.getInteger(INDX_THRESHOLD_PROP_STR, INDEX_RESULT_THRESHOLD_DEFAULT).intValue();
-  AbstractGroupOrRangeJunction(AbstractGroupOrRangeJunction oldGJ,
-      boolean completeExpansion, RuntimeIterator indpnds[], CompiledValue iterOp) {
+  AbstractGroupOrRangeJunction(AbstractGroupOrRangeJunction oldGJ, boolean completeExpansion,
+      RuntimeIterator indpnds[], CompiledValue iterOp) {
-      }
-      else {
+      } else {
-        CompiledJunction temp = (CompiledJunction)iterOp;
+        CompiledJunction temp = (CompiledJunction) iterOp;
-            this._operands[i++] = (CompiledValue)itr.next();
+            this._operands[i++] = (CompiledValue) itr.next();
-    }
-    else {
+    } else {
-  public Object evaluate(ExecutionContext context)
-  throws FunctionDomainException,
-         TypeMismatchException,
-         NameResolutionException,
-         QueryInvocationTargetException  {
+  public Object evaluate(ExecutionContext context) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-  
+
-  
-  CompiledValue getIterOperands(){
+
+  CompiledValue getIterOperands() {
-  
+
-  public SelectResults filterEvaluate(ExecutionContext context,
-      SelectResults iterationLimit, boolean completeExpansionNeeded,
-      CompiledValue iterOperands, RuntimeIterator[] indpndntItrs, boolean isIntersection,boolean conditioningNeeded, boolean evalProj)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException {
-    if(iterOperands !=null) {
+  public SelectResults filterEvaluate(ExecutionContext context, SelectResults iterationLimit,
+      boolean completeExpansionNeeded, CompiledValue iterOperands, RuntimeIterator[] indpndntItrs,
+      boolean isIntersection, boolean conditioningNeeded, boolean evalProj)
+      throws FunctionDomainException, TypeMismatchException, NameResolutionException,
+      QueryInvocationTargetException {
+    if (iterOperands != null) {
-  
+
-  public SelectResults filterEvaluate(ExecutionContext context,
-      SelectResults intermediateResults) throws FunctionDomainException,
-      TypeMismatchException, NameResolutionException,
-      QueryInvocationTargetException
-  {
+  public SelectResults filterEvaluate(ExecutionContext context, SelectResults intermediateResults)
+      throws FunctionDomainException, TypeMismatchException, NameResolutionException,
+      QueryInvocationTargetException {
-   
+
-      //The interpretation of isConditioning etc is not provided for RangeEvaluators
-      result = (newOperands.filterOperand).filterEvaluate(context, result,
-          this.completeExpansion, newOperands.iterateOperand, this.indpndntItr,
+      // The interpretation of isConditioning etc is not provided for RangeEvaluators
+      result = (newOperands.filterOperand).filterEvaluate(context, result, this.completeExpansion,
+          newOperands.iterateOperand, this.indpndntItr,
-          newOperands.filterOperand.isConditioningNeededForIndex(this.indpndntItr.length == 1 ? this.indpndntItr[0] : null, context, this.completeExpansion),
+          newOperands.filterOperand.isConditioningNeededForIndex(
+              this.indpndntItr.length == 1 ? this.indpndntItr[0] : null, context,
+              this.completeExpansion),
-    }
-    else {
+    } else {
-      List unevaluatedFilterOps = ((GroupJunction)newOperands.filterOperand)
-          .getUnevaluatedFilterOperands();
+      List unevaluatedFilterOps =
+          ((GroupJunction) newOperands.filterOperand).getUnevaluatedFilterOperands();
-            newOperands.iterateOperand = (CompiledValue)unevaluatedFilterOps
-                .get(0);
-          }
-          else {
+            newOperands.iterateOperand = (CompiledValue) unevaluatedFilterOps.get(0);
+          } else {
-              iterOps[i] = (CompiledValue)unevaluatedFilterOps.get(i);
+              iterOps[i] = (CompiledValue) unevaluatedFilterOps.get(i);
-            newOperands.iterateOperand = new CompiledJunction(iterOps,
-                getOperator());
+            newOperands.iterateOperand = new CompiledJunction(iterOps, getOperator());
-        }
-        else {
-          if (newOperands.iterateOperand instanceof CompiledJunction && ((CompiledJunction) newOperands.iterateOperand).getOperator() == getOperator()) {
-            CompiledJunction temp = (CompiledJunction)newOperands.iterateOperand;
+        } else {
+          if (newOperands.iterateOperand instanceof CompiledJunction
+              && ((CompiledJunction) newOperands.iterateOperand).getOperator() == getOperator()) {
+            CompiledJunction temp = (CompiledJunction) newOperands.iterateOperand;
-          }
-          else {
+          } else {
-            combinedOps[j++] = (CompiledValue)itr.next();
+            combinedOps[j++] = (CompiledValue) itr.next();
-          newOperands.iterateOperand = new CompiledJunction(combinedOps,
-              getOperator());
+          newOperands.iterateOperand = new CompiledJunction(combinedOps, getOperator());
-  
-  
- private List getCondtionsSortedOnIncreasingEstimatedIndexResultSize(
-      ExecutionContext context)
-     throws FunctionDomainException, TypeMismatchException,
-     NameResolutionException, QueryInvocationTargetException
- {
-   // The checks before this function is invoked
-   // have ensured that all the operands are of type ComparisonQueryInfo
-   // and of the form var = constant. Also need for sorting will not arise
-   // if there are only two operands
-   
-   List sortedList = new ArrayList(this._operands.length);
-   int len = this._operands.length;
-   for (int i = 0; i < len; ++i) {
-     Filter toSort = (Filter)this._operands[i];    
-     int indxRsltToSort = toSort.getSizeEstimate(context);
-     int sortedListLen = sortedList.size();
-     int j = 0;
-     for (; j < sortedListLen; ++j) {
-       Filter currSorted = (Filter)sortedList.get(j);
-       if (currSorted.getSizeEstimate(context) > indxRsltToSort) {
-         break;
-       }
-     }
-     sortedList.add(j, toSort);
-   }
-   return sortedList;
-
- }
-  
-  
+  private List getCondtionsSortedOnIncreasingEstimatedIndexResultSize(ExecutionContext context)
+      throws FunctionDomainException, TypeMismatchException, NameResolutionException,
+      QueryInvocationTargetException {
+    // The checks before this function is invoked
+    // have ensured that all the operands are of type ComparisonQueryInfo
+    // and of the form var = constant. Also need for sorting will not arise
+    // if there are only two operands
+
+    List sortedList = new ArrayList(this._operands.length);
+    int len = this._operands.length;
+    for (int i = 0; i < len; ++i) {
+      Filter toSort = (Filter) this._operands[i];
+      int indxRsltToSort = toSort.getSizeEstimate(context);
+      int sortedListLen = sortedList.size();
+      int j = 0;
+      for (; j < sortedListLen; ++j) {
+        Filter currSorted = (Filter) sortedList.get(j);
+        if (currSorted.getSizeEstimate(context) > indxRsltToSort) {
+          break;
+        }
+      }
+      sortedList.add(j, toSort);
+    }
+    return sortedList;
+
+  }
+
+
+
-   * Asif : This function is always invoked on a DummyGroupJunction object
-   * formed as a part of organization of operands of a GroupJunction . This also
-   * guranatees that the operands are all of type CompiledComparison or
-   * CompiledUndefined
+   * Asif : This function is always invoked on a DummyGroupJunction object formed as a part of
+   * organization of operands of a GroupJunction . This also guranatees that the operands are all of
+   * type CompiledComparison or CompiledUndefined
-      SelectResults intermediateResults) throws FunctionDomainException,
-      TypeMismatchException, NameResolutionException,
-      QueryInvocationTargetException {
+      SelectResults intermediateResults) throws FunctionDomainException, TypeMismatchException,
+      NameResolutionException, QueryInvocationTargetException {
-     List sortedConditionsList = this.getCondtionsSortedOnIncreasingEstimatedIndexResultSize(context);
-	
-	//Sort the operands in increasing order of resultset size
+    List sortedConditionsList =
+        this.getCondtionsSortedOnIncreasingEstimatedIndexResultSize(context);
+
+    // Sort the operands in increasing order of resultset size
-    //SortedSet intersectionSet = new TreeSet(new SelectResultsComparator());
+    // SortedSet intersectionSet = new TreeSet(new SelectResultsComparator());
-      Filter filter = (Filter)i.next();
-      boolean isConditioningNeeded = filter.isConditioningNeededForIndex(this.indpndntItr.length ==1?this.indpndntItr[0]:null, context,this.completeExpansion);
- 
+      Filter filter = (Filter) i.next();
+      boolean isConditioningNeeded = filter.isConditioningNeededForIndex(
+          this.indpndntItr.length == 1 ? this.indpndntItr[0] : null, context,
+          this.completeExpansion);
+
-          !isConditioningNeeded?intermediateResults:null, this.completeExpansion, null/*
-                                             * Asif * Asif :The iter operands
-                                             * passed are null, as a not null
-                                             * value can exists only if there
-                                             * exists a single Filter operand in
-                                             * original GroupJunction
-                                             */, this.indpndntItr,_operator == LITERAL_and,isConditioningNeeded, false /* do not evaluate projection */);
+          !isConditioningNeeded ? intermediateResults : null, this.completeExpansion,
+          null/*
+               * Asif * Asif :The iter operands passed are null, as a not null value can exists only
+               * if there exists a single Filter operand in original GroupJunction
+               */, this.indpndntItr, _operator == LITERAL_and, isConditioningNeeded,
+          false /* do not evaluate projection */);
+        } else if (filterResults != null) {
+          intermediateResults =
+              (intermediateResults == null || !isConditioningNeeded) ? filterResults
+                  : QueryUtils.intersection(intermediateResults, filterResults, context);
+          i.remove();
+          if (intermediateResults.size() <= indexThresholdSize) {
+            // Abort further intersection , the residual filter operands will be transferred for
+            // iter evaluation
+            break;
+          }
-        else if (filterResults != null) {                	
-            intermediateResults = (intermediateResults == null || !isConditioningNeeded) ? filterResults : QueryUtils
-                .intersection(intermediateResults, filterResults, context);
-            i.remove();
-            if(intermediateResults.size() <= indexThresholdSize) {
-            	//Abort further intersection , the residual filter operands will be transferred for 
-            	//iter evaluation
-            	break;
-            }
-        }
-      }
-      else {
+      } else {
-        boolean isDistinct = (DefaultQuery) context.getQuery() != null ? ((DefaultQuery) context
-            .getQuery()).getSelect().isDistinct() : false;
+        boolean isDistinct = (DefaultQuery) context.getQuery() != null
+            ? ((DefaultQuery) context.getQuery()).getSelect().isDistinct() : false;
-         * Shobhit: Only for distinct query union can be avoided. For non-distinct 
-         * queries filterResults and intermediateResults are different for OR conditions
-         * and final result can contain duplicate objects based on occurrences.
+         * Shobhit: Only for distinct query union can be avoided. For non-distinct queries
+         * filterResults and intermediateResults are different for OR conditions and final result
+         * can contain duplicate objects based on occurrences.
-        } 
+        }
-    if (_operator == LITERAL_and && !sortedConditionsList.isEmpty()) {          
+    if (_operator == LITERAL_and && !sortedConditionsList.isEmpty()) {
-  private SelectResults auxIterateEvaluate(CompiledValue operand,
-      ExecutionContext context, SelectResults intermediateResults)
-      throws FunctionDomainException, TypeMismatchException,
+  private SelectResults auxIterateEvaluate(CompiledValue operand, ExecutionContext context,
+      SelectResults intermediateResults) throws FunctionDomainException, TypeMismatchException,
-        LocalizedStrings.AbstractGroupOrRangeJunction_INTERMEDIATERESULTS_CAN_NOT_BE_NULL.toLocalizedString());
+          LocalizedStrings.AbstractGroupOrRangeJunction_INTERMEDIATERESULTS_CAN_NOT_BE_NULL
+              .toLocalizedString());
-    List currentIters = (this.completeExpansion) ? context
-        .getCurrentIterators() : QueryUtils
-        .getDependentItrChainForIndpndntItrs(this.indpndntItr, context);
+    List currentIters = (this.completeExpansion) ? context.getCurrentIterators()
+        : QueryUtils.getDependentItrChainForIndpndntItrs(this.indpndntItr, context);
-    ObjectType elementType = intermediateResults.getCollectionType()
-        .getElementType();
-    if(elementType.isStructType()) {
-      resultSet = QueryUtils.createStructCollection(context, (StructTypeImpl)elementType) ;
-    }else {
-      resultSet = QueryUtils.createResultCollection(context, elementType) ;
+    ObjectType elementType = intermediateResults.getCollectionType().getElementType();
+    if (elementType.isStructType()) {
+      resultSet = QueryUtils.createStructCollection(context, (StructTypeImpl) elementType);
+    } else {
+      resultSet = QueryUtils.createResultCollection(context, elementType);
-   
+
-          Object values[] = ((Struct)tuple).getFieldValues();
+          Object values[] = ((Struct) tuple).getFieldValues();
-        }
-        else {
+        } else {
-        }
-        finally {
+        } finally {
-          if (((Boolean)result).booleanValue()) {
+          if (((Boolean) result).booleanValue()) {
-        }
-        else if (result != null && result != QueryService.UNDEFINED)
-          throw new TypeMismatchException(
-              "AND/OR operands must be of type boolean, not type '"
-                  + result.getClass().getName() + "'");
+        } else if (result != null && result != QueryService.UNDEFINED)
+          throw new TypeMismatchException("AND/OR operands must be of type boolean, not type '"
+              + result.getClass().getName() + "'");
-    }
-    finally {
+    } finally {
-   * Segregates the Where clause operands of a Range or Group Junction into
-   * filter evaluatable & iter evaluatable operands by creating an Object of
-   * Organizedoperands. This method is invoked from organizeOperands of Group or
-   * Range Junction.
+   * Segregates the Where clause operands of a Range or Group Junction into filter evaluatable &
+   * iter evaluatable operands by creating an Object of Organizedoperands. This method is invoked
+   * from organizeOperands of Group or Range Junction.
-   * @param indexCount
-   *                Indicates the number of operands of the evalOperands List
-   *                which are filter evaluatable. The filter evaluatable
-   *                operands are present at the start of the List
-   * @param evalOperands
-   *                List containing the operands of the Group or Range Junction.
-   *                The operands may be filter or iter evaluatable
-   * @return Object of OrganziedOperands type having filter & iter operand
-   *         segregated
+   * @param indexCount Indicates the number of operands of the evalOperands List which are filter
+   *        evaluatable. The filter evaluatable operands are present at the start of the List
+   * @param evalOperands List containing the operands of the Group or Range Junction. The operands
+   *        may be filter or iter evaluatable
+   * @return Object of OrganziedOperands type having filter & iter operand segregated
-  OrganizedOperands createOrganizedOperandsObject(int indexCount,
-      List evalOperands) {
+  OrganizedOperands createOrganizedOperandsObject(int indexCount, List evalOperands) {
-      filterOperands = (Filter)evalOperands.get(0);
+      filterOperands = (Filter) evalOperands.get(0);
-    }
-    else {
+    } else {
-        newOperands[i] = (CompiledValue)evalOperands.get(i);
-      filterOperands = new GroupJunction(getOperator(),
-          getIndependentIteratorForGroup(), getExpansionFlag(), newOperands);
+        newOperands[i] = (CompiledValue) evalOperands.get(i);
+      filterOperands = new GroupJunction(getOperator(), getIndependentIteratorForGroup(),
+          getExpansionFlag(), newOperands);
-    // For example, query with WHERE clause as  
+    // For example, query with WHERE clause as
-        iterateOperands = (CompiledValue)evalOperands.get(indexCount);
+        iterateOperands = (CompiledValue) evalOperands.get(indexCount);
-          newOperands[i] = (CompiledValue)evalOperands.get(i + indexCount);
+          newOperands[i] = (CompiledValue) evalOperands.get(i + indexCount);
-   * Helper method which creates a new RangeJunction or Group Junction from the
-   * old junction. Thus if the invoking junction is a RangeJunction , the new
-   * object created will be a RangeJunction else if a GroupJunction then that
-   * will be created. This method retains the operands of the old junction while
-   * creating the new junction and adds the iter operands passed, to the
-   * existing operands.
+   * Helper method which creates a new RangeJunction or Group Junction from the old junction. Thus
+   * if the invoking junction is a RangeJunction , the new object created will be a RangeJunction
+   * else if a GroupJunction then that will be created. This method retains the operands of the old
+   * junction while creating the new junction and adds the iter operands passed, to the existing
+   * operands.
-   * @param completeExpansion
-   *                if true indicates that the junction on evaluation should be
-   *                expanded to the query from clause level.
-   * @param indpnds
-   *                The independent runtime iterators to which this group
-   *                belongs to. Normally it will always be a single iterator,
-   *                but if there exists a single GroupJunction in a
-   *                CompositeGroupJunction then this would be more than 1 ,as in
-   *                that case the GroupJunction will be evaluated to the
-   *                CompositeGroupJunction level
-   * @param iterOp
-   *                The Iter operands which along with the operands of the old
-   *                junction should be present in the new junction. These
-   *                operands are definitely not filter evaluatable
-   * @return RangeJunction or GroupJunction depending on the nature of the old
-   *         junction ( Range or Group)
+   * @param completeExpansion if true indicates that the junction on evaluation should be expanded
+   *        to the query from clause level.
+   * @param indpnds The independent runtime iterators to which this group belongs to. Normally it
+   *        will always be a single iterator, but if there exists a single GroupJunction in a
+   *        CompositeGroupJunction then this would be more than 1 ,as in that case the GroupJunction
+   *        will be evaluated to the CompositeGroupJunction level
+   * @param iterOp The Iter operands which along with the operands of the old junction should be
+   *        present in the new junction. These operands are definitely not filter evaluatable
+   * @return RangeJunction or GroupJunction depending on the nature of the old junction ( Range or
+   *         Group)
-  abstract AbstractGroupOrRangeJunction recreateFromOld(
-      boolean completeExpansion, RuntimeIterator indpnds[], CompiledValue iterOp);
+  abstract AbstractGroupOrRangeJunction recreateFromOld(boolean completeExpansion,
+      RuntimeIterator indpnds[], CompiledValue iterOp);
-   * Helper method which creates a new RangeJunction or Group Junction from the
-   * old junction. Thus if the invoking junction is a RangeJunction , the new
-   * object created will be a RangeJunction else if a GroupJunction then that
-   * will be created. This method discards the operands of the old junction
-   * while creating the new junction . The new junction will only have the
-   * operands passed to it.
+   * Helper method which creates a new RangeJunction or Group Junction from the old junction. Thus
+   * if the invoking junction is a RangeJunction , the new object created will be a RangeJunction
+   * else if a GroupJunction then that will be created. This method discards the operands of the old
+   * junction while creating the new junction . The new junction will only have the operands passed
+   * to it.
-   * @param operator
-   *                The junction type ( AND or OR ) of the old junction
-   * @param indpndntItr
-   *                Array of RuntimeIterator representing the Independent
-   *                Iterator for the Group or Range Junction
+   * @param operator The junction type ( AND or OR ) of the old junction
+   * @param indpndntItr Array of RuntimeIterator representing the Independent Iterator for the Group
+   *        or Range Junction
-   * @return Object of type GroupJunction or RangeJunction depending on the type
-   *         of the invoking Object
+   * @return Object of type GroupJunction or RangeJunction depending on the type of the invoking
+   *         Object
-      RuntimeIterator[] indpndntItr, boolean isCompleteExpansion,
-      CompiledValue[] operands);
+      RuntimeIterator[] indpndntItr, boolean isCompleteExpansion, CompiledValue[] operands);
-   * Segregates the conditions into those which are filter evaluatable and which
-   * are iter evaluatable. This method is appropriately overridden in the
-   * GroupJunction and RangeJunction class.
+   * Segregates the conditions into those which are filter evaluatable and which are iter
+   * evaluatable. This method is appropriately overridden in the GroupJunction and RangeJunction
+   * class.
-   * @param context
-   *                ExecutionContext object
+   * @param context ExecutionContext object
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException;
+      throws FunctionDomainException, TypeMismatchException, NameResolutionException,
+      QueryInvocationTargetException;
-  abstract void addUnevaluatedFilterOperands(List unevaluatedFilterOps); 
- 
+  abstract void addUnevaluatedFilterOperands(List unevaluatedFilterOps);
+
