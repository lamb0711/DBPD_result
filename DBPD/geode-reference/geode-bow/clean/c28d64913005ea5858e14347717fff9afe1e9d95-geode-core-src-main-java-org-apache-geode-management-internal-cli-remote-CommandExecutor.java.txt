Merge branch 'release/1.4.0'

-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.geode.SystemFailure;
+import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
+import org.apache.geode.management.internal.cli.exceptions.UserErrorException;
+  // used by the product
+    return execute(null, parseResult);
+  }
+
+  // used by the GfshParserRule to pass in a mock command
+  public Object execute(Object command, ParseResult parseResult) {
-      Object result = invokeCommand(parseResult);
+      Object result = invokeCommand(command, parseResult);
-    } catch (NotAuthorizedException e) {
+    }
+
+    // for Authorization Exception, we need to throw them for higher level code to catch
+    catch (NotAuthorizedException e) {
-    } catch (Exception e) {
+    }
+
+    // for these exceptions, needs to create a UserErrorResult (still reported as error by gfsh)
+    // no need to log since this is a user error
+    catch (UserErrorException | IllegalStateException | IllegalArgumentException e) {
+      return ResultBuilder.createUserErrorResult(e.getMessage());
+    }
+
+    // if entity not found, depending on the thrower's intention, report either as success or error
+    // no need to log since this is a user error
+    catch (EntityNotFoundException e) {
+      if (e.isStatusOK()) {
+        return ResultBuilder.createInfoResult("Skipping: " + e.getMessage());
+      } else {
+        return ResultBuilder.createUserErrorResult(e.getMessage());
+      }
+    }
+
+    // all other exceptions, log it and build an error result.
+    catch (Exception e) {
-      return ResultBuilder.createGemFireErrorResult("Error while processing command <" + parseResult
-          + "> Reason : " + ExceptionUtils.getStackTrace(e));
+      return ResultBuilder.createGemFireErrorResult(
+          "Error while processing command <" + parseResult + "> Reason : " + e.getMessage());
+    }
+
+    // for errors more lower-level than Exception, just throw them.
+    catch (VirtualMachineError e) {
+      SystemFailure.initiateFailure(e);
+      throw e;
+    } catch (Throwable t) {
+      SystemFailure.checkFailure();
+      throw t;
-  protected Object invokeCommand(ParseResult parseResult) {
-    return ReflectionUtils.invokeMethod(parseResult.getMethod(), parseResult.getInstance(),
+  protected Object invokeCommand(Object command, ParseResult parseResult) {
+    // if no command instance is passed in, use the one in the parseResult
+    if (command == null) {
+      command = parseResult.getInstance();
+    }
+    return ReflectionUtils.invokeMethod(parseResult.getMethod(), command,
-
