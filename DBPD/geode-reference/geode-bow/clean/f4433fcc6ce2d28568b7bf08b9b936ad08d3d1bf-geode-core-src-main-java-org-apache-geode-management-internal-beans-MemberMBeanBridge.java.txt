GEODE-4404: Move BackupWriter creation (#1521)

  * to facilitate future creation of backup plugins, the BackupWriter is created
    using generic information passed from gfsh

-import java.io.File;
-import java.util.Collections;
-import org.apache.geode.cache.persistence.PersistentID;
-import org.apache.geode.management.DiskBackupResult;
-import org.apache.geode.management.ManagementException;
-   * backs up all the disk to the targeted directory
-   *
-   * @param targetDirPath path of the directory where back up is to be taken
-   * @return array of DiskBackup results which might get aggregated at Managing node Check the
-   *         validity of this mbean call. When does it make sense to backup a single member of a
-   *         gemfire system in isolation of the other members?
-   */
-  public DiskBackupResult[] backupMember(String targetDirPath) {
-    if (cache != null) {
-      Collection<DiskStore> diskStores = cache.listDiskStoresIncludingRegionOwned();
-      for (DiskStore store : diskStores) {
-        store.flush();
-      }
-    }
-
-    DiskBackupResult[] diskBackUpResult = null;
-    File targetDir = new File(targetDirPath);
-
-    if (cache == null) {
-      return null;
-
-    } else {
-      try {
-        boolean abort = true;
-        Set<PersistentID> existingDataStores;
-        Set<PersistentID> successfulDataStores;
-        try {
-          existingDataStores = cache.getBackupService().prepareBackup(
-              cache.getInternalDistributedSystem().getDistributedMember(), targetDir, null);
-          abort = false;
-        } finally {
-          if (abort) {
-            cache.getBackupService().abortBackup();
-            successfulDataStores = Collections.emptySet();
-          } else {
-            successfulDataStores = cache.getBackupService().doBackup();
-          }
-        }
-        diskBackUpResult = new DiskBackupResult[existingDataStores.size()];
-        int j = 0;
-
-        for (PersistentID id : existingDataStores) {
-          if (successfulDataStores.contains(id)) {
-            diskBackUpResult[j] = new DiskBackupResult(id.getDirectory(), false);
-          } else {
-            diskBackUpResult[j] = new DiskBackupResult(id.getDirectory(), true);
-          }
-          j++;
-        }
-
-      } catch (IOException | InterruptedException e) {
-        throw new ManagementException(e);
-      }
-    }
-    return diskBackUpResult;
-  }
-
-  /**
