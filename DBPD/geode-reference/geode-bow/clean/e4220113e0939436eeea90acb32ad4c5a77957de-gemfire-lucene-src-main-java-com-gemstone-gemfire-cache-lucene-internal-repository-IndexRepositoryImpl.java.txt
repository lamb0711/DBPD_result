Adding a query method to IndexRepository

This method takes a result collector that receives a gemfire key and
score for each result.

+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
-import com.gemstone.gemfire.cache.lucene.internal.repository.serializer.SerializerUtil;
+import com.gemstone.gemfire.cache.lucene.internal.repository.serializer.SerializerUtil;
+  private static final boolean APPLY_ALL_DELETES = System
+      .getProperty("gemfire.IndexRepository.APPLY_ALL_DELETES", "true")
+      .equalsIgnoreCase("true");
+  
+  private volatile DirectoryReader reader;
+  private volatile IndexSearcher searcher;
-  public IndexRepositoryImpl(IndexWriter writer, LuceneSerializer serializer) {
+  public IndexRepositoryImpl(IndexWriter writer, LuceneSerializer serializer) throws IOException {
+    reader = DirectoryReader.open(writer, APPLY_ALL_DELETES);
-  public void commit() throws IOException {
-    writer.commit();
+  public void query(Query query, int limit, IndexResultCollector collector) throws IOException {
+    IndexSearcher searcherSnapshot = searcher;
+    TopDocs docs = searcherSnapshot.search(query, limit);
+    for(ScoreDoc scoreDoc : docs.scoreDocs) {
+      Document doc = searcher.doc(scoreDoc.doc);
+      Object key = SerializerUtil.getKey(doc);
+      collector.collect(key, scoreDoc.score);
+    }
+  @Override
+  public synchronized void commit() throws IOException {
+    writer.commit();
+    DirectoryReader newReader = DirectoryReader.openIfChanged(reader);
+    if(newReader != null) {
+      reader = newReader;
+      searcher = new IndexSearcher(reader);
+    }
+  }
