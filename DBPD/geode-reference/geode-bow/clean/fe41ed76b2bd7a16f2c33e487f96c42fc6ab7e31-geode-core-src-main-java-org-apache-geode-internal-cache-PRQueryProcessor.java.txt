GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import static java.lang.Integer.*;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.cache.query.internal.*;
+import org.apache.geode.cache.query.internal.CompiledSelect;
+import org.apache.geode.cache.query.internal.DefaultQuery;
+import org.apache.geode.cache.query.internal.ExecutionContext;
+import org.apache.geode.cache.query.internal.IndexTrackingQueryObserver;
+import org.apache.geode.cache.query.internal.NWayMergeResults;
+import org.apache.geode.cache.query.internal.QueryExecutionContext;
+import org.apache.geode.cache.query.internal.QueryMonitor;
+import org.apache.geode.cache.query.internal.QueryObserver;
+import org.apache.geode.cache.query.internal.QueryObserverHolder;
-import org.apache.logging.log4j.Logger;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.*;
-import java.util.concurrent.*;
-
- * specified in bucketList. It contains a <code>PRQueryExecutor</code> thread-pool executor that
- * takes a <code>Callable</code> task identified by <code>PartitionedRegion</code>, queryString and
- * bucketId.
+ * specified in bucketList. It contains a {@code PRQueryExecutor} thread-pool executor that takes a
+ * {@code Callable} task identified by {@code PartitionedRegion}, queryString and bucketId.
- *
-  public final static int NUM_THREADS = Integer
-      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "PRQueryProcessor.numThreads", 1).intValue();
+  public final static int NUM_THREADS =
+      getInteger(DistributionConfig.GEMFIRE_PREFIX + "PRQueryProcessor.numThreads", 1);
-  // private List _failedBuckets;
-    ((GemFireCacheImpl) prDS.partitionedRegion.getCache()).getLocalQueryService();
+    prDS.partitionedRegion.getCache().getLocalQueryService();
-   * @throws QueryException
-    if (NUM_THREADS > 1 || this.TEST_NUM_THREADS > 1) {
+    if (NUM_THREADS > 1 || TEST_NUM_THREADS > 1) {
-        // this._prds.partitionedRegion.checkReadiness();
-                    .toLocalizedString(Integer.valueOf(BUCKET_QUERY_TIMEOUT)),
+                    .toLocalizedString(BUCKET_QUERY_TIMEOUT),
-          throw new ForceReattemptException("Bucket id " + pr.bucketStringForLogs(bId.intValue())
-              + " not found on VM " + pr.getMyId());
+          throw new ForceReattemptException(
+              "Bucket id " + pr.bucketStringForLogs(bId) + " not found on VM " + pr.getMyId());
-                  if (((Integer) r).intValue() != 0) {
+                  if ((Integer) r != 0) {
-          rq.put(new EndOfBucket(bId.intValue()));
+          rq.put(new EndOfBucket(bId));
-      throw new ForceReattemptException("Bucket id " + pr.bucketStringForLogs(bId.intValue())
-          + " not found on VM " + pr.getMyId());
+      throw new ForceReattemptException(
+          "Bucket id " + pr.bucketStringForLogs(bId) + " not found on VM " + pr.getMyId());
-    NWayMergeResults mergedResults = new NWayMergeResults(sortedResults, cs.isDistinct(), limit,
-        cs.getOrderByAttrs(), context, cs.getElementTypeForOrderByQueries());
-    return mergedResults;
+    return new NWayMergeResults(sortedResults, cs.isDistinct(), limit, cs.getOrderByAttrs(),
+        context, cs.getElementTypeForOrderByQueries());
-        // TODO:Asif: In what situation would the results object itself be undefined?
+        // TODO: In what situation would the results object itself be undefined?
-        /*
-         * if (results == QueryService.UNDEFINED) {
-         * resultCollector.add(Collections.singleton(results)); } else {
-         */
-        resultCollector.add((SelectResults) results);
-        // }
+        resultCollector.add((Collection) results);
-     * {@link PartitionedRegion#afterRegionsClosedByCacheClose(GemFireCacheImpl)}
+     * {@link PartitionedRegion#afterRegionsClosedByCacheClose(InternalCache)}
-        final Integer bId = Integer.valueOf(this._bucketId);
-        List<Integer> bucketList = Collections.singletonList(bId);
+        List<Integer> bucketList = Collections.singletonList(this._bucketId);
-      /**
-       * Constructor
-       * 
-       * @param bukId
-       */
-        return Integer.valueOf(this._buk);
+        return valueOf(this._buk);
