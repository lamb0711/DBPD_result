Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.i18n.LogWriterI18n;
+import org.apache.geode.StatisticsType;
+import org.apache.geode.internal.logging.LogService;
- * 
- * 
+  private static final Logger logger = LogService.getLogger();
+
-  
-  private LogWriterI18n logger;
-  public MBeanStatsMonitor(String name) {
-    this.monitorName = name;
-    this.monitor = new ValueMonitor();
-    this.statsMap = new DefaultHashMap();
-    this.logger = InternalDistributedSystem.getLoggerI18n();
-
+  public MBeanStatsMonitor(final String name) {
+    this(name, new ValueMonitor());
-  public void addStatisticsToMonitor(Statistics stats) {
+  MBeanStatsMonitor(final String name, final ValueMonitor monitor) {
+    this.monitorName = name;
+    this.monitor = monitor;
+    this.statsMap = new DefaultHashMap();
+  }
+
+  public void addStatisticsToMonitor(final Statistics stats) {
+    // Initialize the stats with the current values.
+    StatisticsType type = stats.getType();
+    StatisticDescriptor[] descriptors = type.getStatistics();
+    for (StatisticDescriptor d : descriptors) {
+      statsMap.put(d.getName(), stats.get(d));
+    }
-  public void removeStatisticsFromMonitor(Statistics stats) {
+  public void removeStatisticsFromMonitor(final Statistics stats) {
-  public Number getStatistic(String statName) {
-    return statsMap.get(statName) != null ? statsMap.get(statName) : 0;
+  public Number getStatistic(final String statName) {
+    Number value = statsMap.get(statName);
+    return value != null ? value : 0;
-  public void handleNotification(StatisticsNotification notification) {
-
+  public void handleNotification(final StatisticsNotification notification) {
-      log(name,value);
+      log(name, value);
-
-    }
-  }
-  
-  protected void log(String name, Number value){
-
-    if (logger != null && logger.finestEnabled()) {
-      logger.finest("Monitor = " + monitorName + " descriptor = " + name + " And Value = " + value);
-  public static class DefaultHashMap {
-    private Map<String, Number> internalMap = new HashMap<String, Number>();
-
-    public DefaultHashMap() {
+  protected void log(final String name, final Number value) {
+    if (logger.isTraceEnabled()) {
+      logger.trace("Monitor = {} descriptor = {} And value = {}", monitorName, name, value);
+  }
-    public Number get(String key) {
+  public static class DefaultHashMap { // TODO: delete this class
+    private Map<String, Number> internalMap = new HashMap<>();
+
+    public DefaultHashMap() {}
+
+    public Number get(final String key) {
-    public void put(String key, Number value) {
+    public void put(final String key, final Number value) {
+
+    /**
+     * For testing only
+     */
+    Map<String, Number> getInternalMap() {
+      return this.internalMap;
+    }
