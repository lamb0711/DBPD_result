Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+  private Boolean offHeap;
+  private final boolean isSetOffHeap;
+  private String hdfsStoreName;
+  private Boolean isSetHdfsWriteOnly = false;
+  private Boolean hdfsWriteOnly;
+	      RegionShortcut regionShortcut, String useAttributesFrom,
+	      boolean skipIfExists, String keyConstraint, String valueConstraint,
+	      Boolean statisticsEnabled, 
+	      RegionFunctionArgs.ExpirationAttrs entryExpirationIdleTime, 
+	      RegionFunctionArgs.ExpirationAttrs entryExpirationTTL, 
+	      RegionFunctionArgs.ExpirationAttrs regionExpirationIdleTime, 
+	      RegionFunctionArgs.ExpirationAttrs regionExpirationTTL, String diskStore,
+	      Boolean diskSynchronous, Boolean enableAsyncConflation,
+	      Boolean enableSubscriptionConflation, String[] cacheListeners,
+	      String cacheLoader, String cacheWriter, String[] asyncEventQueueIds,
+	      String[] gatewaySenderIds, Boolean concurrencyChecksEnabled,
+	      Boolean cloningEnabled, Integer concurrencyLevel, String prColocatedWith,
+	      Integer prLocalMaxMemory, Long prRecoveryDelay,
+	      Integer prRedundantCopies, Long prStartupRecoveryDelay,
+	      Long prTotalMaxMemory, Integer prTotalNumBuckets, Integer evictionMax,
+	      String compressor, Boolean offHeap , String hdfsStoreName , Boolean hdfsWriteOnly) {	
+		this(regionPath, regionShortcut, useAttributesFrom, skipIfExists,
+				keyConstraint, valueConstraint, statisticsEnabled,
+				entryExpirationIdleTime, entryExpirationTTL,
+				regionExpirationIdleTime, regionExpirationTTL, diskStore,
+				diskSynchronous, enableAsyncConflation,
+				enableSubscriptionConflation, cacheListeners, cacheLoader,
+				cacheWriter, asyncEventQueueIds, gatewaySenderIds,
+				concurrencyChecksEnabled, cloningEnabled, concurrencyLevel,
+				prColocatedWith, prLocalMaxMemory, prRecoveryDelay,
+				prRedundantCopies, prStartupRecoveryDelay, prTotalMaxMemory,
+				prTotalNumBuckets, evictionMax, compressor, offHeap);	
+		this.isSetHdfsWriteOnly = hdfsWriteOnly != null;
+		if (isSetHdfsWriteOnly) {
+			this.hdfsWriteOnly = hdfsWriteOnly;
+		}
+		if (hdfsStoreName != null )
+		  this.hdfsStoreName = hdfsStoreName;
+  }
+  public RegionFunctionArgs(String regionPath,
-      String compressor) {
-
+      String compressor, Boolean offHeap) {
+    this.isSetOffHeap = (offHeap != null);
+    if (this.isSetOffHeap) {
+      this.offHeap = offHeap;
+    }
-      RegionAttributes<?, ?> regionAttributes) {
-
+      Boolean offHeap, String hdfsStoreName , Boolean hdfsWriteOnly , 
+      RegionAttributes<?, ?> regionAttributes) {   
-        prTotalMaxMemory, prTotalNumBuckets, null, null);
-
+        prTotalMaxMemory, prTotalNumBuckets, null, null, offHeap , hdfsStoreName , hdfsWriteOnly);
-  }
+  }  
+   * @return the hdfsStoreName
+   */
+  public String getHDFSStoreName() {
+    return this.hdfsStoreName;
+  }  
+
+  /**
+   * @return the hdfsWriteOnly
+   */
+  public Boolean getHDFSWriteOnly() {
+    return this.hdfsWriteOnly;
+  }
+  
+  /**
+   * @return the isSetHDFSWriteOnly
+   */
+  public Boolean isSetHDFSWriteOnly() {
+    return this.isSetHdfsWriteOnly;
+  }
+  
+  
+  /**
+  
+  public Boolean isOffHeap() {
+    return this.offHeap;
+  }
+
+  public Boolean isSetOffHeap() {
+    return this.isSetOffHeap;
+  }
