GEODE-6103 RegionCreateFunction takes RegionConfig in argument (#2998)

* reduce dependence on RegionFunctionArgs
* Also clean up CreateRegionCommand to achieve a clean separation between validations and calling RegionCreateFunction

Signed-off-by: Aditya Anchuri <aanchuri@pivotal.io>
Signed-off-by: Peter Tran <ptran@pivotal.io>
Signed-off-by: Ken Howe <khowe@pivotal.io>
+import java.util.Optional;
+import java.util.Set;
+import org.apache.geode.cache.CacheListener;
+import org.apache.geode.cache.CacheLoader;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.configuration.EnumActionDestroyOverflow;
-import org.apache.geode.management.internal.cli.functions.RegionFunctionArgs;
-  public RegionConfig generate(RegionFunctionArgs args) {
+  public RegionConfig generate(
+      String regionPath,
+      String keyConstraint,
+      String valueConstraint,
+      Boolean statisticsEnabled,
+      Integer entryExpirationIdleTime,
+      ExpirationAction entryExpirationIdleAction,
+      Integer entryExpirationTTL,
+      ExpirationAction entryExpirationTTLAction,
+      ClassName<CustomExpiry> entryIdleTimeCustomExpiry,
+      ClassName<CustomExpiry> entryTTLCustomExpiry,
+      Integer regionExpirationIdleTime,
+      ExpirationAction regionExpirationIdleAction,
+      Integer regionExpirationTTL,
+      ExpirationAction regionExpirationTTLAction,
+      String evictionAction,
+      Integer evictionMaxMemory,
+      Integer evictionEntryCount,
+      String evictionObjectSizer,
+      String diskStore,
+      Boolean diskSynchronous,
+      Boolean enableAsyncConflation,
+      Boolean enableSubscriptionConflation,
+      Set<ClassName<CacheListener>> cacheListeners,
+      ClassName<CacheLoader> cacheLoader,
+      ClassName<CacheWriter> cacheWriter,
+      Set<String> asyncEventQueueIds,
+      Set<String> gatewaySenderIds,
+      Boolean concurrencyChecksEnabled,
+      Boolean cloningEnabled,
+      Boolean mcastEnabled,
+      Integer concurrencyLevel,
+      PartitionArgs partitionArgs,
+      String compressor,
+      Boolean offHeap,
+      RegionAttributes<?, ?> regionAttributes) {
+
-    regionConfig.setName(getLeafRegion(args.getRegionPath()));
+    regionConfig.setName(getLeafRegion(regionPath));
-    RegionAttributes<?, ?> regionAttributes = args.getRegionAttributes();
-
-    if (args.getKeyConstraint() != null) {
-      regionAttributesType.setKeyConstraint(args.getKeyConstraint());
+    if (keyConstraint != null) {
+      regionAttributesType.setKeyConstraint(keyConstraint);
-    if (args.getValueConstraint() != null) {
-      regionAttributesType.setValueConstraint(args.getValueConstraint());
+    if (valueConstraint != null) {
+      regionAttributesType.setValueConstraint(valueConstraint);
-    if (args.getStatisticsEnabled() != null) {
-      regionAttributesType.setStatisticsEnabled(args.getStatisticsEnabled());
+    if (statisticsEnabled != null) {
+      regionAttributesType.setStatisticsEnabled(statisticsEnabled);
-    regionAttributesType.setEntryIdleTime(getExpirationAttributes(args.getEntryExpirationIdleTime(),
-        args.getEntryIdleTimeCustomExpiry()));
-    regionAttributesType.setEntryTimeToLive(
-        getExpirationAttributes(args.getEntryExpirationTTL(), args.getEntryTTLCustomExpiry()));
+    regionAttributesType.setEntryIdleTime(
+        getExpirationAttributes(entryExpirationIdleTime, entryExpirationIdleAction,
+            entryIdleTimeCustomExpiry));
-        .setRegionIdleTime(getExpirationAttributes(args.getRegionExpirationIdleTime(), null));
+        .setEntryTimeToLive(getExpirationAttributes(entryExpirationTTL, entryExpirationTTLAction,
+            entryTTLCustomExpiry));
+    regionAttributesType.setRegionIdleTime(
+        getExpirationAttributes(regionExpirationIdleTime, regionExpirationIdleAction,
+            null));
-        .setRegionTimeToLive(getExpirationAttributes(args.getRegionExpirationTTL(), null));
+        .setRegionTimeToLive(getExpirationAttributes(regionExpirationTTL, regionExpirationTTLAction,
+            null));
-    // if regionAttributes has these attributes, then use that
+    // if regionAttributes has these attributes, then use them instead
-      if (regionAttributesType.getEntryIdleTime() == null) {
+      ExpirationAttributes entryIdleTimeout = regionAttributes.getEntryIdleTimeout();
+      if (entryIdleTimeout != null && !entryIdleTimeout.isDefault()
+          && regionAttributesType.getEntryIdleTime() == null) {
-            regionAttributes.getEntryIdleTimeout(), regionAttributes.getCustomEntryIdleTimeout()));
+            entryIdleTimeout.getTimeout(), entryIdleTimeout.getAction(),
+            getClassName(regionAttributes.getCustomEntryIdleTimeout())));
-      if (regionAttributesType.getEntryTimeToLive() == null) {
+
+      ExpirationAttributes entryTimeToLive = regionAttributes.getEntryTimeToLive();
+      if (entryTimeToLive != null && !entryTimeToLive.isDefault()
+          && regionAttributesType.getEntryTimeToLive() == null) {
-            regionAttributes.getEntryTimeToLive(), regionAttributes.getCustomEntryTimeToLive()));
+            entryTimeToLive.getTimeout(), entryTimeToLive.getAction(),
+            getClassName(regionAttributes.getCustomEntryTimeToLive())));
-      if (regionAttributesType.getRegionIdleTime() == null) {
+      ExpirationAttributes regionIdleTimeout = regionAttributes.getRegionIdleTimeout();
+      if (regionIdleTimeout != null && !regionIdleTimeout.isDefault()
+          && regionAttributesType.getRegionIdleTime() == null) {
-            getExpirationAttributes(regionAttributes.getRegionIdleTimeout(), null));
+            getExpirationAttributes(regionIdleTimeout.getTimeout(),
+                regionIdleTimeout.getAction(), null));
-      if (regionAttributesType.getRegionTimeToLive() == null) {
+      ExpirationAttributes regionTimeToLive = regionAttributes.getRegionTimeToLive();
+      if (regionTimeToLive != null && !regionTimeToLive.isDefault()
+          && regionAttributesType.getRegionTimeToLive() == null) {
-            getExpirationAttributes(regionAttributes.getRegionTimeToLive(), null));
+            getExpirationAttributes(regionTimeToLive.getTimeout(),
+                regionTimeToLive.getAction(), null));
-
-    if (args.getDiskStore() != null) {
-      regionAttributesType.setDiskStoreName(args.getDiskStore());
+    if (diskStore != null) {
+      regionAttributesType.setDiskStoreName(diskStore);
-    if (args.getDiskSynchronous() != null) {
-      regionAttributesType.setDiskSynchronous(args.getDiskSynchronous());
+    if (diskSynchronous != null) {
+      regionAttributesType.setDiskSynchronous(diskSynchronous);
-    if (args.getEnableAsyncConflation() != null) {
-      regionAttributesType.setEnableAsyncConflation(args.getEnableAsyncConflation());
+    if (enableAsyncConflation != null) {
+      regionAttributesType.setEnableAsyncConflation(enableAsyncConflation);
-    if (args.getEnableSubscriptionConflation() != null) {
-      regionAttributesType.setEnableSubscriptionConflation(args.getEnableSubscriptionConflation());
+    if (enableSubscriptionConflation != null) {
+      regionAttributesType.setEnableSubscriptionConflation(enableSubscriptionConflation);
-    if (args.getConcurrencyChecksEnabled() != null) {
-      regionAttributesType.setConcurrencyChecksEnabled(args.getConcurrencyChecksEnabled());
+    if (concurrencyChecksEnabled != null) {
+      regionAttributesType.setConcurrencyChecksEnabled(concurrencyChecksEnabled);
-    if (args.getCloningEnabled() != null) {
-      regionAttributesType.setCloningEnabled(args.getCloningEnabled());
+    if (cloningEnabled != null) {
+      regionAttributesType.setCloningEnabled(cloningEnabled);
-    if (args.getOffHeap() != null) {
-      regionAttributesType.setOffHeap(args.getOffHeap());
+    if (offHeap != null) {
+      regionAttributesType.setOffHeap(offHeap);
-    if (args.getMcastEnabled() != null) {
-      regionAttributesType.setMulticastEnabled(args.getMcastEnabled());
+    if (mcastEnabled != null) {
+      regionAttributesType.setMulticastEnabled(mcastEnabled);
-    if (args.getPartitionArgs() != null) {
+    if (partitionArgs != null && !partitionArgs.isEmpty()) {
-      RegionFunctionArgs.PartitionArgs partitionArgs = args.getPartitionArgs();
-      partitionAttributes.setColocatedWith(partitionArgs.getPrColocatedWith());
-      partitionAttributes.setLocalMaxMemory(Objects.toString(partitionArgs.getPrLocalMaxMemory()));
-      partitionAttributes.setRecoveryDelay(Objects.toString(partitionArgs.getPrRecoveryDelay()));
-      partitionAttributes
-          .setRedundantCopies(Objects.toString(partitionArgs.getPrRedundantCopies()));
-      partitionAttributes
-          .setStartupRecoveryDelay(Objects.toString(partitionArgs.getPrStartupRecoveryDelay()));
-      partitionAttributes.setTotalMaxMemory(Objects.toString(partitionArgs.getPrTotalMaxMemory()));
-      partitionAttributes
-          .setTotalNumBuckets(Objects.toString(partitionArgs.getPrTotalNumBuckets()));
+      regionAttributesType.setPartitionAttributes(partitionAttributes);
-      if (partitionArgs.getPartitionResolver() != null) {
+      partitionAttributes.setColocatedWith(partitionArgs.prColocatedWith);
+      partitionAttributes.setLocalMaxMemory(int2string(partitionArgs.prLocalMaxMemory));
+      partitionAttributes.setRecoveryDelay(long2string(partitionArgs.prRecoveryDelay));
+      partitionAttributes.setRedundantCopies(int2string(partitionArgs.prRedundantCopies));
+      partitionAttributes
+          .setStartupRecoveryDelay(long2string(partitionArgs.prStartupRecoveryDelay));
+      partitionAttributes.setTotalMaxMemory(long2string(partitionArgs.prTotalMaxMemory));
+      partitionAttributes.setTotalNumBuckets(int2string(partitionArgs.prTotalNumBuckets));
+
+      if (partitionArgs.partitionResolver != null) {
-        partitionResolverType.setClassName(partitionArgs.getPartitionResolver());
+        partitionResolverType.setClassName(partitionArgs.partitionResolver);
+    }
+    if (regionAttributes != null && regionAttributes.getPartitionAttributes() != null) {
+      RegionAttributesType.PartitionAttributes partitionAttributes = Optional.ofNullable(
+          regionAttributesType.getPartitionAttributes())
+          .orElse(new RegionAttributesType.PartitionAttributes());
-    } else if (regionAttributes != null && regionAttributes.getPartitionAttributes() != null) {
-      regionAttributesType.setPartitionAttributes(
-          regionAttributes.getPartitionAttributes().convertToConfigPartitionAttributes());
+
+      RegionAttributesType.PartitionAttributes implicitPartitionAttributes =
+          regionAttributes.getPartitionAttributes().convertToConfigPartitionAttributes();
+
+      String implicitColocatedWith = implicitPartitionAttributes.getColocatedWith();
+      if (partitionAttributes.getColocatedWith() == null && implicitColocatedWith != null) {
+        partitionAttributes.setColocatedWith(implicitColocatedWith);
+      }
+
+      String implicitLocalMaxMemory = implicitPartitionAttributes.getLocalMaxMemory();
+      if (partitionAttributes.getLocalMaxMemory() == null && implicitLocalMaxMemory != null) {
+        partitionAttributes.setLocalMaxMemory(implicitLocalMaxMemory);
+      }
+
+      String implicitRecoveryDelay = implicitPartitionAttributes.getRecoveryDelay();
+      if (partitionAttributes.getRecoveryDelay() == null && implicitRecoveryDelay != null) {
+        partitionAttributes.setRecoveryDelay(implicitRecoveryDelay);
+      }
+
+      String implicitRedundantCopies = implicitPartitionAttributes.getRedundantCopies();
+      if (partitionAttributes.getRedundantCopies() == null && implicitRedundantCopies != null) {
+        partitionAttributes.setRedundantCopies(implicitRedundantCopies);
+      }
+
+      String implicitStartupRecoveryDelay = implicitPartitionAttributes.getStartupRecoveryDelay();
+      if (partitionAttributes.getStartupRecoveryDelay() == null
+          && implicitStartupRecoveryDelay != null) {
+        partitionAttributes.setStartupRecoveryDelay(implicitStartupRecoveryDelay);
+      }
+
+      String implicitTotalMaxMemory = implicitPartitionAttributes.getTotalMaxMemory();
+      if (partitionAttributes.getTotalMaxMemory() == null && implicitTotalMaxMemory != null) {
+        partitionAttributes.setTotalMaxMemory(implicitTotalMaxMemory);
+      }
+
+      String implicitTotalNumBuckets = implicitPartitionAttributes.getTotalNumBuckets();
+      if (partitionAttributes.getTotalNumBuckets() == null && implicitTotalNumBuckets != null) {
+        partitionAttributes.setTotalNumBuckets(implicitTotalNumBuckets);
+      }
+
+      DeclarableType implicitPartitionResolver = implicitPartitionAttributes.getPartitionResolver();
+      if (partitionAttributes.getPartitionResolver() == null && implicitPartitionResolver != null) {
+        partitionAttributes.setPartitionResolver(implicitPartitionResolver);
+      }
-    if (args.getGatewaySenderIds() != null && !args.getGatewaySenderIds().isEmpty()) {
-      regionAttributesType.setGatewaySenderIds(String.join(",", args.getGatewaySenderIds()));
+    if (gatewaySenderIds != null && !gatewaySenderIds.isEmpty()) {
+      regionAttributesType.setGatewaySenderIds(String.join(",", gatewaySenderIds));
-    if (args.getEvictionAttributes() != null) {
-      regionAttributesType
-          .setEvictionAttributes(args.getEvictionAttributes().convertToConfigEvictionAttributes());
-    } else if (regionAttributes != null &&
-        regionAttributes.getEvictionAttributes() != null &&
-        !regionAttributes.getEvictionAttributes().isEmpty()) {
-      regionAttributesType.setEvictionAttributes(
-          regionAttributes.getEvictionAttributes().convertToConfigEvictionAttributes());
+    if (evictionAction != null) {
+      RegionAttributesType.EvictionAttributes evictionAttributes =
+          generateEvictionAttributes(evictionAction, evictionMaxMemory, evictionEntryCount,
+              evictionObjectSizer);
+      regionAttributesType.setEvictionAttributes(evictionAttributes);
+    } else if (regionAttributes != null && regionAttributes.getEvictionAttributes() != null
+        && !regionAttributes.getEvictionAttributes().isNoEviction()) {
+      regionAttributesType.setEvictionAttributes(regionAttributes.getEvictionAttributes()
+          .convertToConfigEvictionAttributes());
-    if (args.getAsyncEventQueueIds() != null && !args.getAsyncEventQueueIds().isEmpty()) {
-      regionAttributesType.setAsyncEventQueueIds(String.join(",", args.getAsyncEventQueueIds()));
+    if (asyncEventQueueIds != null && !asyncEventQueueIds.isEmpty()) {
+      regionAttributesType.setAsyncEventQueueIds(String.join(",", asyncEventQueueIds));
-    if (args.getCacheListeners() != null && !args.getCacheListeners().isEmpty()) {
-      regionAttributesType.getCacheListeners().addAll(args.getCacheListeners().stream().map(l -> {
+    if (cacheListeners != null && !cacheListeners.isEmpty()) {
+      regionAttributesType.getCacheListeners().addAll(cacheListeners.stream().map(l -> {
-    if (args.getCacheLoader() != null) {
+    if (cacheLoader != null) {
-      declarableType.setClassName(args.getCacheLoader().getClassName());
+      declarableType.setClassName(cacheLoader.getClassName());
-    if (args.getCacheWriter() != null) {
+    if (cacheWriter != null) {
-      declarableType.setClassName(args.getCacheWriter().getClassName());
+      declarableType.setClassName(cacheWriter.getClassName());
-    if (args.getCompressor() != null) {
-      regionAttributesType.setCompressor(new ClassNameType(args.getCompressor()));
+    if (compressor != null) {
+      regionAttributesType.setCompressor(new ClassNameType(compressor));
-    if (args.getConcurrencyLevel() != null) {
-      regionAttributesType.setConcurrencyLevel(args.getConcurrencyLevel().toString());
+    if (concurrencyLevel != null) {
+      regionAttributesType.setConcurrencyLevel(concurrencyLevel.toString());
-  public static RegionAttributesType.ExpirationAttributesType getExpirationAttributes(
-      ExpirationAttributes entryIdleTimeout, CustomExpiry<?, ?> customEntryIdleTimeout) {
+  private RegionAttributesType.EvictionAttributes generateEvictionAttributes(String evictionAction,
+      Integer maxMemory, Integer maxEntryCount,
+      String objectSizer) {
+    RegionAttributesType.EvictionAttributes configAttributes =
+        new RegionAttributesType.EvictionAttributes();
+    EnumActionDestroyOverflow action = EnumActionDestroyOverflow.fromValue(evictionAction);
-    if ((entryIdleTimeout == null || entryIdleTimeout.isDefault())
-        && customEntryIdleTimeout == null) {
-      return null;
-    }
-
-    if (entryIdleTimeout == null || entryIdleTimeout.isDefault()) {
-      return getExpirationAttributes(null, null,
-          new ClassName<>(customEntryIdleTimeout.getClass().getName()));
-    } else if (customEntryIdleTimeout == null) {
-      return getExpirationAttributes(entryIdleTimeout.getTimeout(), entryIdleTimeout.getAction(),
-          null);
+    if (maxMemory == null && maxEntryCount == null) {
+      RegionAttributesType.EvictionAttributes.LruHeapPercentage heapPercentage =
+          new RegionAttributesType.EvictionAttributes.LruHeapPercentage();
+      heapPercentage.setAction(action);
+      heapPercentage.setClassName(objectSizer);
+      configAttributes.setLruHeapPercentage(heapPercentage);
+    } else if (maxMemory != null) {
+      RegionAttributesType.EvictionAttributes.LruMemorySize memorySize =
+          new RegionAttributesType.EvictionAttributes.LruMemorySize();
+      memorySize.setAction(action);
+      memorySize.setClassName(objectSizer);
+      memorySize.setMaximum(maxMemory.toString());
+      configAttributes.setLruMemorySize(memorySize);
-      return getExpirationAttributes(entryIdleTimeout.getTimeout(), entryIdleTimeout.getAction(),
-          new ClassName<>(customEntryIdleTimeout.getClass().getName()));
+      RegionAttributesType.EvictionAttributes.LruEntryCount entryCount =
+          new RegionAttributesType.EvictionAttributes.LruEntryCount();
+      entryCount.setAction(action);
+      entryCount.setMaximum(maxEntryCount.toString());
+      configAttributes.setLruEntryCount(entryCount);
-  }
-  public static RegionAttributesType.ExpirationAttributesType getExpirationAttributes(
-      RegionFunctionArgs.ExpirationAttrs expirationAttrs, ClassName<CustomExpiry> customExpiry) {
-    if (expirationAttrs == null) {
-      return getExpirationAttributes(null, null, customExpiry);
-    } else {
-      return getExpirationAttributes(expirationAttrs.getTime(), expirationAttrs.getAction(),
-          customExpiry);
-    }
+    return configAttributes;
+
+
-      attributesType
-          .setCustomExpiry(new DeclarableType(expiry.getClassName(), expiry.getInitProperties()));
+      attributesType.setCustomExpiry(new DeclarableType(expiry.getClassName()));
+  private static ClassName<CustomExpiry> getClassName(CustomExpiry expiry) {
+    if (expiry == null) {
+      return null;
+    }
+
+    return new ClassName<>(expiry.getClass().getName());
+  }
+
+  private static String int2string(Integer x) {
+    return Optional.ofNullable(x).map(v -> v.toString()).orElse(null);
+  }
+
+  private static String long2string(Long x) {
+    return Optional.ofNullable(x).map(v -> v.toString()).orElse(null);
+  }
