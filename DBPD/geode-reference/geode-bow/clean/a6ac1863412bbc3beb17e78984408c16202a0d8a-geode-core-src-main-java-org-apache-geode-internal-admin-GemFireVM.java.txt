GEODE-4431: Remove unnecessary modifiers from interfaces in geode-core:internal

* This excludes those interfaces in internal.cache, covered in GEODE-4430.

-import java.util.ArrayList;
-import java.util.List;
-import java.util.Properties;
-import java.util.Set;
-
-  public static final int LIGHTWEIGHT_CACHE_VALUE = 100;
+  int LIGHTWEIGHT_CACHE_VALUE = 100;
-  public static final int LOGICAL_CACHE_VALUE = 200;
+  int LOGICAL_CACHE_VALUE = 200;
-  public static final int PHYSICAL_CACHE_VALUE = 300;
+  int PHYSICAL_CACHE_VALUE = 300;
-  public java.net.InetAddress getHost();
+  java.net.InetAddress getHost();
-  public String getName();
+  String getName();
-  public java.io.File getWorkingDirectory();
+  java.io.File getWorkingDirectory();
-  public java.io.File getGeodeHomeDir();
+  java.io.File getGeodeHomeDir();
-  public java.util.Date getBirthDate();
+  java.util.Date getBirthDate();
-  public String getVersionInfo();
+  String getVersionInfo();
-  public StatResource[] getStats(String statisticsTypeName);
+  StatResource[] getStats(String statisticsTypeName);
-  public StatResource[] getAllStats();
+  StatResource[] getAllStats();
-  public DLockInfo[] getDistributedLockInfo();
+  DLockInfo[] getDistributedLockInfo();
-  public void addStatListener(StatListener observer, StatResource observedResource,
-      Stat observedStat);
+  void addStatListener(StatListener observer, StatResource observedResource, Stat observedStat);
-  public void removeStatListener(StatListener observer);
+  void removeStatListener(StatListener observer);
-  public void addHealthListener(HealthListener observer, GemFireHealthConfig cfg);
+  void addHealthListener(HealthListener observer, GemFireHealthConfig cfg);
-  public void removeHealthListener();
+  void removeHealthListener();
-  public void resetHealthStatus();
+  void resetHealthStatus();
-  public String[] getHealthDiagnosis(GemFireHealth.Health healthCode);
+  String[] getHealthDiagnosis(GemFireHealth.Health healthCode);
-  public Config getConfig();
+  Config getConfig();
-  public GemFireMemberStatus getSnapshot();
+  GemFireMemberStatus getSnapshot();
-  public RegionSubRegionSnapshot getRegionSnapshot();
+  RegionSubRegionSnapshot getRegionSnapshot();
-  public void setConfig(Config cfg);
+  void setConfig(Config cfg);
-  public GfManagerAgent getManagerAgent();
+  GfManagerAgent getManagerAgent();
-  public String[] getSystemLogs();
+  String[] getSystemLogs();
-  public void setInspectionClasspath(String classpath);
+  void setInspectionClasspath(String classpath);
-  public String getInspectionClasspath();
+  String getInspectionClasspath();
-  public Region[] getRootRegions();
+  Region[] getRootRegions();
-  public Region getRegion(CacheInfo c, String path);
+  Region getRegion(CacheInfo c, String path);
-  public Region createVMRootRegion(CacheInfo c, String name, RegionAttributes attrs)
-      throws AdminException;
+  Region createVMRootRegion(CacheInfo c, String name, RegionAttributes attrs) throws AdminException;
-  public Region createSubregion(CacheInfo c, String parentPath, String name, RegionAttributes attrs)
+  Region createSubregion(CacheInfo c, String parentPath, String name, RegionAttributes attrs)
-  public void setCacheInspectionMode(int mode);
+  void setCacheInspectionMode(int mode);
-  public int getCacheInspectionMode();
+  int getCacheInspectionMode();
-  public void takeRegionSnapshot(String regionName, int snapshotId);
+  void takeRegionSnapshot(String regionName, int snapshotId);
-  public InternalDistributedMember getId();
+  InternalDistributedMember getId();
-  public CacheInfo getCacheInfo();
+  CacheInfo getCacheInfo();
-  public CacheInfo setCacheLockTimeout(CacheInfo c, int v) throws AdminException;
+  CacheInfo setCacheLockTimeout(CacheInfo c, int v) throws AdminException;
-  public CacheInfo setCacheLockLease(CacheInfo c, int v) throws AdminException;
+  CacheInfo setCacheLockLease(CacheInfo c, int v) throws AdminException;
-  public CacheInfo setCacheSearchTimeout(CacheInfo c, int v) throws AdminException;
+  CacheInfo setCacheSearchTimeout(CacheInfo c, int v) throws AdminException;
-  public AdminBridgeServer addCacheServer(CacheInfo cache) throws AdminException;
+  AdminBridgeServer addCacheServer(CacheInfo cache) throws AdminException;
-  public AdminBridgeServer getBridgeInfo(CacheInfo cache, int id) throws AdminException;
+  AdminBridgeServer getBridgeInfo(CacheInfo cache, int id) throws AdminException;
-  public AdminBridgeServer startBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
+  AdminBridgeServer startBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
-  public AdminBridgeServer stopBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
+  AdminBridgeServer stopBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
-  public void setAlertsManager(StatAlertDefinition[] alertDefs, long refreshInterval,
-      boolean setRemotely);
+  void setAlertsManager(StatAlertDefinition[] alertDefs, long refreshInterval, boolean setRemotely);
-  public void setRefreshInterval(long refreshInterval);
+  void setRefreshInterval(long refreshInterval);
-  public void updateAlertDefinitions(StatAlertDefinition[] alertDefs, int actionCode);
+  void updateAlertDefinitions(StatAlertDefinition[] alertDefs, int actionCode);
