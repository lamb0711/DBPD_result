GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test

-import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.GMSMemberData;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberIdentifier;
-          .contactedBy(((GMSMemberAdapter) msg.getSender().getNetMember()).getGmsMember());
+          .contactedBy(msg.getSender());
-        // newborn set. Replace the netmember of the surpriseMember ID
+        // newborn set. Replace the member data of the surpriseMember ID
-              entry.getKey().setNetMember(m.getNetMember());
+              entry.getKey().setMemberData((GMSMemberData) m.getMemberData());
-  private MembershipView createGeodeView(GMSMember gmsCreator, int viewId,
-      List<GMSMember> gmsMembers,
-      Set<GMSMember> gmsShutdowns, Set<GMSMember> gmsCrashes) {
-    InternalDistributedMember geodeCreator =
-        new InternalDistributedMember(new GMSMemberAdapter(gmsCreator));
+  private MembershipView createGeodeView(MemberIdentifier gmsCreator, int viewId,
+      List<MemberIdentifier> gmsMembers,
+      Set<MemberIdentifier> gmsShutdowns, Set<MemberIdentifier> gmsCrashes) {
+    InternalDistributedMember geodeCreator = (InternalDistributedMember) gmsCreator;
-    for (GMSMember member : gmsMembers) {
-      geodeMembers.add(new InternalDistributedMember(new GMSMemberAdapter(member)));
+    for (MemberIdentifier member : gmsMembers) {
+      geodeMembers.add((InternalDistributedMember) member);
-      Collection<GMSMember> gmsMembers) {
+      Collection<MemberIdentifier> gmsMembers) {
-          new InternalDistributedMember(new GMSMemberAdapter(gmsMembers.iterator().next())));
+          (InternalDistributedMember) gmsMembers.iterator().next());
-      for (GMSMember member : gmsMembers) {
-        idmMembers.add(new InternalDistributedMember(new GMSMemberAdapter((member))));
+      for (MemberIdentifier member : gmsMembers) {
+        idmMembers.add((InternalDistributedMember) member);
-      List<GMSMember> gmsMembers) {
+      List<MemberIdentifier> gmsMembers) {
-          .singletonList(new InternalDistributedMember(new GMSMemberAdapter(gmsMembers.get(0))));
+          .singletonList((InternalDistributedMember) gmsMembers.get(0));
-      for (GMSMember member : gmsMembers) {
-        idmMembers.add(new InternalDistributedMember(new GMSMemberAdapter((member))));
+      for (MemberIdentifier member : gmsMembers) {
+        idmMembers.add((InternalDistributedMember) member);
-    GMSMember oldID = ((GMSMemberAdapter) sender.getNetMember()).getGmsMember();
-    GMSMember newID = this.services.getJoinLeave().getMemberID(oldID);
+    MemberIdentifier oldID = sender;
+    MemberIdentifier newID = this.services.getJoinLeave().getMemberID(oldID);
-      sender.setNetMember(new GMSMemberAdapter(newID));
+      sender.setMemberData(newID.getMemberData());
-  private InternalDistributedMember gmsMemberToDMember(GMSMember gmsMember) {
-    return new InternalDistributedMember(new GMSMemberAdapter(gmsMember));
+  private InternalDistributedMember gmsMemberToDMember(MemberIdentifier gmsMember) {
+    return (InternalDistributedMember) gmsMember;
-          .memberShutdown(
-              ((GMSMemberAdapter) ((InternalDistributedMember) id).getNetMember()).getGmsMember(),
-              reason);
-      services.getJoinLeave().memberShutdown(getGMSMember((InternalDistributedMember) id), reason);
+          .memberShutdown((MemberIdentifier) id, reason);
+      services.getJoinLeave().memberShutdown((MemberIdentifier) id, reason);
-      services.getJoinLeave().remove(getGMSMember((InternalDistributedMember) mbr), reason);
+      services.getJoinLeave().remove((MemberIdentifier) mbr, reason);
-            .checkIfAvailable(getGMSMember((InternalDistributedMember) mbr), reason, false);
+            .checkIfAvailable((MemberIdentifier) mbr, reason, false);
-        if (!view.contains(getGMSMember(member)) || (th instanceof ShunnedMemberException)) {
+        if (!view.contains(member) || (th instanceof ShunnedMemberException)) {
-  /**
-   * retrieve the GMS member ID held in a Geode InternalDistributedMember
-   */
-  private GMSMember getGMSMember(InternalDistributedMember member) {
-    return ((GMSMemberAdapter) member.getNetMember()).getGmsMember();
-  }
-
-      Set<GMSMember> failures = services.getMessenger().send(new GMSMessageAdapter(msg));
+      Set<MemberIdentifier> failures = services.getMessenger().send(new GMSMessageAdapter(msg));
-      InternalDistributedMember m = addresses[i];
-      if (m != null) {
-        GMSMemberAdapter adapter = (GMSMemberAdapter) m.getNetMember();
-        GMSMember id = adapter.getGmsMember();
-        if (!id.hasUUID()) {
-          adapter.setGmsMember(view.getCanonicalID(id));
+      InternalDistributedMember id = addresses[i];
+      if (id != null) {
+        if (!id.getMemberData().hasUUID()) {
+          id.setMemberData(view.getCanonicalID(id).getMemberData());
-    services.getMessenger().getMessageState(getGMSMember((InternalDistributedMember) member),
+    services.getMessenger().getMessageState((MemberIdentifier) member,
-    services.getMessenger().waitForMessageState(
-        getGMSMember((InternalDistributedMember) otherMember), state);
+    services.getMessenger().waitForMessageState((MemberIdentifier) otherMember, state);
-      services.getMessenger().getMemberID().setDirectPort(dcPort);
+      services.getMessenger().getMemberID().setDirectChannelPort(dcPort);
-          new InternalDistributedMember(
-              new GMSMemberAdapter(services.getMessenger().getMemberID()));
+          (InternalDistributedMember) services.getMessenger().getMemberID();
-    public void memberSuspected(GMSMember initiator,
-        GMSMember suspect, String reason) {
+    public void memberSuspected(MemberIdentifier initiator,
+        MemberIdentifier suspect, String reason) {
-    public void quorumLost(Collection<GMSMember> failures, GMSMembershipView view) {
+    public void quorumLost(Collection<MemberIdentifier> failures, GMSMembershipView view) {
