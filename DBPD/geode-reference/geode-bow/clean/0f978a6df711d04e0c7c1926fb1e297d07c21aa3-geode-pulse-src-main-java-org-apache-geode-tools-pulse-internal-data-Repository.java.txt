GEODE-2927: fix pulse logging and useLocator, SSL flags

* using local mbs server connection will bypass all the mbean security checks
* do not update the mbean attribute since pulse user has no cluster:write privilege at all
* Created EmbeddedPulseRule for tests
* simplify PulseAppListener
* use log4j2 logging configurations

-import java.net.ConnectException;
-import java.util.concurrent.TimeUnit;
-  private String jmxHost;
-  private String jmxPort;
-  private String jmxUserName;
-  private String jmxUserPassword;
-  private Boolean isEmbeddedMode;
+  private String host;
+  private String port;
-  private boolean useGemFireCredentials = false;
-
-
-  private String pulseWebAppUrl;
-  public String getJmxHost() {
-    return this.jmxHost;
+  public String getHost() {
+    return this.host;
-  public void setJmxHost(String jmxHost) {
-    this.jmxHost = jmxHost;
+  public void setHost(String jmxHost) {
+    this.host = jmxHost;
-  public String getJmxPort() {
-    return this.jmxPort;
+  public String getPort() {
+    return this.port;
-  public void setJmxPort(String jmxPort) {
-    this.jmxPort = jmxPort;
-  }
-
-  public String getJmxUserName() {
-    return this.jmxUserName;
-  }
-
-  public void setJmxUserName(String jmxUserName) {
-    this.jmxUserName = jmxUserName;
-  }
-
-  public String getJmxUserPassword() {
-    return this.jmxUserPassword;
-  }
-
-  public void setJmxUserPassword(String jmxUserPassword) {
-    this.jmxUserPassword = jmxUserPassword;
-  }
-
-  public Boolean getIsEmbeddedMode() {
-    return this.isEmbeddedMode;
-  }
-
-  public void setIsEmbeddedMode(Boolean isEmbeddedMode) {
-    this.isEmbeddedMode = isEmbeddedMode;
+  public void setPort(String jmxPort) {
+    this.port = jmxPort;
-  public String getPulseWebAppUrl() {
-    return this.pulseWebAppUrl;
-  }
-
-  public void setPulseWebAppUrl(String pulseWebAppUrl) {
-    this.pulseWebAppUrl = pulseWebAppUrl;
-  }
-
-  public void setPulseConfig(PulseConfig pulseConfig) {
-    this.pulseConfig = pulseConfig;
-  }
-   * we're maintaining a 1:1 mapping between webapp and cluster, there is no need for a map of
-   * clusters based on the host and port We are using this clusterMap to maintain cluster for
-   * different users now. For a single-user connection to gemfire JMX, we will use the default
-   * username/password in the pulse.properties (# JMX User Properties ) pulse.jmxUserName=admin
-   * pulse.jmxUserPassword=admin
+   * this will return a cluster already connected to the geode jmx manager for the user in the
+   * request
-    String username = null;
-    String password = null;
-    if (useGemFireCredentials) {
-      Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-      if (auth != null) {
-        username = auth.getName();
-        password = (String) auth.getCredentials();
-      }
-    } else {
-      username = this.jmxUserName;
-      password = this.jmxUserPassword;
-    }
-    return this.getCluster(username, password);
+    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+    if (auth == null)
+      return null;
+    return getCluster(auth.getName(), null);
-      String key = username;
-      Cluster data = this.clusterMap.get(key);
-
+      Cluster data = clusterMap.get(username);
-        try {
-          logger.info("{} : {}", resourceBundle.getString("LOG_MSG_CREATE_NEW_THREAD"), key);
-          data = new Cluster(this.jmxHost, this.jmxPort, username, password);
-          // Assign name to thread created
-          data.setName(
-              PulseConstants.APP_NAME + "-" + this.jmxHost + ":" + this.jmxPort + ":" + username);
-          // Start Thread
-          data.start();
-          data.waitForInitialization(15, TimeUnit.SECONDS);
-          this.clusterMap.put(key, data);
-        } catch (ConnectException | InterruptedException e) {
-          data = null;
-          logger.debug(e);
+        logger.info(resourceBundle.getString("LOG_MSG_CREATE_NEW_THREAD") + " : " + username);
+        data = new Cluster(this.host, this.port, username);
+        // Assign name to thread created
+        data.setName(PulseConstants.APP_NAME + "-" + this.host + ":" + this.port + ":" + username);
+        data.connectToGemFire(password);
+        if (data.isConnectedFlag()) {
+          this.clusterMap.put(username, data);
-      } else {
-        data.setJmxUserPassword(password);
-
-  private String getClusterKey(String host, String port) {
-    return host + ":" + port;
-  }
-  public boolean isUseGemFireCredentials() {
-    return useGemFireCredentials;
-  }
-
-  public void setUseGemFireCredentials(boolean useGemFireCredentials) {
-    this.useGemFireCredentials = useGemFireCredentials;
-  }
-
-
