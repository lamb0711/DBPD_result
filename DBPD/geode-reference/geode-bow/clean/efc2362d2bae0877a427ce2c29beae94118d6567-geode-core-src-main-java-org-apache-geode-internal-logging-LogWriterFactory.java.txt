GEODE-6964: Move geode log4j core classes to geode-log4j

Introduce new Logging and Alerting SPIs. Extract all log4j-core code to
geode-log4j module.

The geode-core module no longer contains log4j2.xml and no longer has a
dependency on log4j-core.

All code that uses log4j-core has moved to the new module geode-log4j.
The log4j2.xml for Geode now lives in geode-log4j as well. These
changes ensure that users have better control over logging including
which backend to use. This should improve user experience when using
Spring Boot.

Co-authored-by: Mark Hanson <mhanson@pivotal.io>

-import static org.apache.geode.internal.logging.Configuration.MAIN_LOGGER_NAME;
-import static org.apache.geode.internal.logging.Configuration.SECURITY_LOGGER_NAME;
+import static org.apache.geode.logging.internal.spi.LoggingProvider.MAIN_LOGGER_NAME;
+import static org.apache.geode.logging.internal.spi.LoggingProvider.SECURITY_LOGGER_NAME;
-import org.apache.geode.internal.logging.log4j.LogWriterLogger;
+import org.apache.geode.logging.internal.log4j.LogWriterLogger;
+import org.apache.geode.logging.internal.spi.LogConfig;
-    return LogService.createLogWriterLogger(name, logConfig.getName(), secure);
+    return createLogWriterLogger(name, logConfig.getName(), secure);
+
+  /**
+   * Returns a LogWriterLogger that is decorated with the LogWriter and LogWriterI18n methods.
+   *
+   * <p>
+   * This is the bridge to LogWriter and LogWriterI18n that we need to eventually stop using in
+   * phase 1. We will switch over from a shared LogWriterLogger instance to having every GemFire
+   * class own its own private static GemFireLogger
+   *
+   * @return The LogWriterLogger for the calling class.
+   */
+  public static LogWriterLogger createLogWriterLogger(final String name,
+      final String connectionName, final boolean isSecure) {
+    return LogWriterLogger.create(name, connectionName, isSecure);
+  }
