Adding a new framework for concurrency testing in geode (#787)

* Adding a new framework for concurrency testing in geode

Added a new junit runner, ConcurrentTestRunner, for running a test that
has parallel threads.

The runner currently runs the test using Java PathFinder, which will
run the test with all interleavings of the threads.

Added an example test to geode-core for the FilterProfile serialization
logic.

* Adding configuration options for TestRunners and removing warmup

Adding options to configure which concurrent test runner to use, and
adding configuration for the JPF runner to pass jpf properties.

Adding an alternative runner which just runs the test in a loop.

Removing the warmup from the FilterProfileTest. It turns out most of the
work was in calling static initializers, especially for logging classes.
Disabling choice generation in static final initialization, and
disabling the logger entirely.

-import org.apache.geode.internal.offheap.annotations.Released;
+    this(r, r.getMyId(), r.getGemFireCache().getCacheServers().size() > 0);
+  }
+
+  /**
+   * used for instantiation of a profile associated with a region and not describing region filters
+   * in a different process. Do not use this method when instantiating profiles to store in
+   * distribution advisor profiles.
+   */
+  public FilterProfile(LocalRegion r, DistributedMember member, boolean hasCacheServer) {
-    this.memberID = region.getMyId();
+    this.memberID = member;
-    this.localProfile.hasCacheServer = (r.getGemFireCache().getCacheServers().size() > 0);
+    this.localProfile.hasCacheServer = hasCacheServer;
-
-    InternalDataSerializer.invokeToData(((InternalDistributedMember) memberID), out);
+    InternalDataSerializer.invokeToData(memberID, out);
