Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class <code>CacheClientProxyStats</code> tracks GemFire statistics related
- * to a {@link CacheClientProxy}. These statistics are related to cache server
- * client notifications for each client.
+ * Class <code>CacheClientProxyStats</code> tracks GemFire statistics related to a
+ * {@link CacheClientProxy}. These statistics are related to cache server client notifications for
+ * each client.
-    _type = f.createType(statName, statName,
-       new StatisticDescriptor[] {
-            f.createIntCounter
-             (MESSAGES_RECEIVED,
-              "Number of client messages received.",
-              "operations"),
+    _type = f.createType(statName, statName, new StatisticDescriptor[] {
+        f.createIntCounter(MESSAGES_RECEIVED, "Number of client messages received.", "operations"),
-            f.createIntCounter
-             (MESSAGES_QUEUED,
-              "Number of client messages added to the message queue.",
-              "operations"),
+        f.createIntCounter(MESSAGES_QUEUED, "Number of client messages added to the message queue.",
+            "operations"),
-            f.createIntCounter
-             (MESSAGES_FAILED_QUEUED,
-              "Number of client messages attempted but failed to be added to the message queue.",
-              "operations"),
+        f.createIntCounter(MESSAGES_FAILED_QUEUED,
+            "Number of client messages attempted but failed to be added to the message queue.",
+            "operations"),
-            f.createIntCounter
-             (MESSAGES_NOT_QUEUED_ORIGINATOR,
-              "Number of client messages received but not added to the message queue because the receiving proxy represents the client originating the message.",
-              "operations"),
+        f.createIntCounter(MESSAGES_NOT_QUEUED_ORIGINATOR,
+            "Number of client messages received but not added to the message queue because the receiving proxy represents the client originating the message.",
+            "operations"),
-            f.createIntCounter
-             (MESSAGES_NOT_QUEUED_NOT_INTERESTED,
-              "Number of client messages received but not added to the message queue because the client represented by the receiving proxy was not interested in the message's key.",
-              "operations"),
+        f.createIntCounter(MESSAGES_NOT_QUEUED_NOT_INTERESTED,
+            "Number of client messages received but not added to the message queue because the client represented by the receiving proxy was not interested in the message's key.",
+            "operations"),
-            f.createIntGauge
-             (MESSAGE_QUEUE_SIZE,
-              "Size of the message queue.",
-              "operations"),
+        f.createIntGauge(MESSAGE_QUEUE_SIZE, "Size of the message queue.", "operations"),
-            f.createIntCounter
-             (MESSAGES_PROCESSED,
-              "Number of client messages removed from the message queue and sent.",
-              "operations"),
+        f.createIntCounter(MESSAGES_PROCESSED,
+            "Number of client messages removed from the message queue and sent.", "operations"),
-            f.createLongCounter
-             (MESSAGE_PROCESSING_TIME,
-              "Total time spent sending messages to clients.",
-              "nanoseconds"),
-              
-            f.createIntCounter
-             (DELTA_MESSAGES_SENT,
-              "Number of client messages containing only delta bytes dispatched to the client.",
-              "operations"),
+        f.createLongCounter(MESSAGE_PROCESSING_TIME,
+            "Total time spent sending messages to clients.", "nanoseconds"),
-              f.createIntCounter
-              (DELTA_FULL_MESSAGES_SENT,
-               "Number of client messages dispatched in reponse to failed delta at client.",
-               "operations"),
+        f.createIntCounter(DELTA_MESSAGES_SENT,
+            "Number of client messages containing only delta bytes dispatched to the client.",
+            "operations"),
-            f.createLongCounter
-              (CQ_COUNT,
-               "Number of CQs on the client.",
-               "operations"),
-            f.createLongCounter("sentBytes",
-                                "Total number of bytes sent to client.",
-                                "bytes"),
-       });
+        f.createIntCounter(DELTA_FULL_MESSAGES_SENT,
+            "Number of client messages dispatched in reponse to failed delta at client.",
+            "operations"),
+
+        f.createLongCounter(CQ_COUNT, "Number of CQs on the client.", "operations"),
+        f.createLongCounter("sentBytes", "Total number of bytes sent to client.", "bytes"),});
-  //////////////////////  Instance Fields  //////////////////////
+  ////////////////////// Instance Fields //////////////////////
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-   * @param factory The <code>StatisticsFactory</code> which creates the
-   * <code>Statistics</code> instance
+   * @param factory The <code>StatisticsFactory</code> which creates the <code>Statistics</code>
+   *        instance
-    this._stats = factory.createAtomicStatistics(_type, "cacheClientProxyStats-"+name);
+    this._stats = factory.createAtomicStatistics(_type, "cacheClientProxyStats-" + name);
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
+   * 
+   * 
+   * 
+   * 
+   * 
+   * 
+   * 
+   * 
+   * 
+   * 
+   * 
-  public void incMessagesReceived()
-  {
+  public void incMessagesReceived() {
-  public void incMessagesQueued()
-  {
+  public void incMessagesQueued() {
-  public void incMessagesNotQueuedOriginator()
-  {
+  public void incMessagesNotQueuedOriginator() {
-  public void incMessagesNotQueuedNotInterested()
-  {
+  public void incMessagesNotQueuedNotInterested() {
-  public void incMessagesFailedQueued()
-  {
+  public void incMessagesFailedQueued() {
-  
+
-  public void incCqCount()
-  {
+  public void incCqCount() {
-  
+
-  public void decCqCount()
-  {
+  public void decCqCount() {
+   * 
-  public void setQueueSize(int size)
-  {
+  public void setQueueSize(int size) {
+   * 
-  public long startTime()
-  {
+  public long startTime() {
-   * @param start The start of the message (which is decremented from the current
-   * time to determine the message processing time).
+   * 
+   * @param start The start of the message (which is decremented from the current time to determine
+   *        the message processing time).
-  public void endMessage(long start)
-  {
+  public void endMessage(long start) {
-    long elapsed = ts-start;
+    long elapsed = ts - start;
+
+
+
