GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-stores
+  private final StartupStatus startupStatus;
-   *
+    this(prhaRedundancyProvider, proxyBuckets, new StartupStatus());
+  }
+
+  private PersistentBucketRecoverer(PRHARedundancyProvider prhaRedundancyProvider, int proxyBuckets,
+      StartupStatus startupStatus) {
+
+    this.startupStatus = startupStatus;
+
-    List<RegionStatus> allRegions = new ArrayList<RegionStatus>(colocatedRegions.size() + 1);
+    List<RegionStatus> allRegions = new ArrayList<>(colocatedRegions.size() + 1);
-
-    this.membershipChanged = true;
+    membershipChanged = true;
-    this.membershipChanged = true;
+    membershipChanged = true;
-    this.membershipChanged = true;
+    membershipChanged = true;
-        if (this.membershipChanged) {
-          this.membershipChanged = false;
+        if (membershipChanged) {
+          membershipChanged = false;
-      this.thisMember = createPersistentMemberID(region);
+      thisMember = createPersistentMemberID(region);
-      this.bucketRegions = region.getRegionAdvisor().getProxyBucketArray();
+      bucketRegions = region.getRegionAdvisor().getProxyBucketArray();
-      for (ProxyBucketRegion proxyBucket : this.bucketRegions) {
+      for (ProxyBucketRegion proxyBucket : bucketRegions) {
-      for (ProxyBucketRegion proxyBucket : this.bucketRegions) {
+      for (ProxyBucketRegion proxyBucket : bucketRegions) {
-      for (ProxyBucketRegion proxyBucket : this.bucketRegions) {
+      for (ProxyBucketRegion proxyBucket : bucketRegions) {
-      this.loggedDoneMessage = true;
-      StartupStatus.startup(
+      loggedDoneMessage = true;
+      startupStatus.startup(
-              new Object[] {this.region,
-                  TransformUtils.persistentMemberIdToLogEntryTransformer
-                      .transform(this.thisMember)}));
+              region,
+              TransformUtils.persistentMemberIdToLogEntryTransformer.transform(thisMember)));
-        Set<String> membersToWaitForLogEntries = new HashSet<String>();
+        Set<String> membersToWaitForLogEntries = new HashSet<>();
-        StartupStatus.startup(
+        startupStatus.startup(
-                new Object[] {this.region, missingBuckets,
-                    TransformUtils.persistentMemberIdToLogEntryTransformer
-                        .transform(this.thisMember),
-                    membersToWaitForLogEntries}));
+                region, missingBuckets,
+                TransformUtils.persistentMemberIdToLogEntryTransformer.transform(thisMember),
+                membersToWaitForLogEntries));
-        this.loggedDoneMessage = false;
+        loggedDoneMessage = false;
-        Set<String> membersToWaitForLogEntries = new HashSet<String>();
+        Set<String> membersToWaitForLogEntries = new HashSet<>();
-        StartupStatus.startup(
+        startupStatus.startup(
-                new Object[] {this.region, missingBuckets,
-                    TransformUtils.persistentMemberIdToLogEntryTransformer
-                        .transform(this.thisMember),
-                    membersToWaitForLogEntries}));
+                region, missingBuckets,
+                TransformUtils.persistentMemberIdToLogEntryTransformer.transform(thisMember),
+                membersToWaitForLogEntries));
-        this.loggedDoneMessage = false;
+        loggedDoneMessage = false;
