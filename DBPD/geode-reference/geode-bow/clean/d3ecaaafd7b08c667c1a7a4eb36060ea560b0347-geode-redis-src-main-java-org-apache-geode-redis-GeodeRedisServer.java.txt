GEODE-7778: Add PUBLISH, SUBSCRIBE and UNSUBSCRIBE Redis commands (#4682)

Redis PUBLISH/SUBSCRIBE is described here: https://redis.io/topics/pubsub

This implementation introduces 3 new command classes to support this:
`SubscribeExecutor`, `PublishExecutor` and `UnsubscribeExecutor`. At a high
level, the flow is as follows:
- A Redis client issues a SUBSCRIBE command. The server maintains a list of
  subscribed clients and associate channel(s) in the `Subscribers` class. A
  subscribed `Client` uses Netty's notion of a `uniqueID` to identify itself
  uniquely.
- When a client PUBLISHes a message on a channel, the publish 'event' uses an
  `onMembers` function call to distribute the channel/message to all members.
  Each member then publishes the message to any `Client`s registered on the
  channel.

Points to note:
Redis pub/sub is not HA. i.e. A subscriber only receives those messages
published after it has successfully subscribed. If the client is disconnected
and reconnects, it will not receive messages published during the disconnect
window.

When clients subscribe, an open connection is established to the server and the
client blocks waiting for messages.

This implementation does not require messages to be published on the same
server to which the clients, executing subscribe, are connected since the
published message is distributed to all servers.


Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Prasath Durairaj <vdurairaj@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
+import org.apache.geode.redis.internal.PubSub;
+import org.apache.geode.redis.internal.PubSubImpl;
- * specifying the SystemProperty {@value #DEFAULT_REGION_SYS_PROP_NAME} to a type defined by
- * {@link RegionShortcut}. If the {@link GeodeRedisServer#NUM_THREADS_SYS_PROP_NAME} system property
- * is set to 0, one thread per client will be created. Otherwise a worker thread pool of specified
- * size is used or a default size of 4 * {@link Runtime#availableProcessors()} if the property is
- * not set.
+ * specifying the SystemProperty {@value #DEFAULT_REGION_SYS_PROP_NAME} to a type defined by {@link
+ * RegionShortcut}. If the {@link GeodeRedisServer#NUM_THREADS_SYS_PROP_NAME} system property is set
+ * to 0, one thread per client will be created. Otherwise a worker thread pool of specified size is
+ * used or a default size of 4 * {@link Runtime#availableProcessors()} if the property is not set.
- * <P>
+ * <p>
- *
-   * The actual {@link RegionShortcut} type specified by the system property
-   * {@value #DEFAULT_REGION_SYS_PROP_NAME}.
+   * The actual {@link RegionShortcut} type specified by the system property {@value
+   * #DEFAULT_REGION_SYS_PROP_NAME}.
+  private PubSub pubSub;
-    if (prop == null || prop.isEmpty())
+    if (prop == null || prop.isEmpty()) {
+    }
-   * @param port The port the server will bind to, will use {@value #DEFAULT_REDIS_SERVER_PORT} by
-   *        default if argument is less than or equal to 0
+   * @param port The port the server will bind to, will use {@value #DEFAULT_REDIS_SERVER_PORT}
+   *        by default if argument is less than or equal to 0
-   * address and port. Keep in mind that the log level configuration will only be set if a
-   * {@link Cache} does not already exist, if one already exists then setting that property will
-   * have no effect.
+   * address and port. Keep in mind that the log level configuration will only be set if a {@link
+   * Cache} does not already exist, if one already exists then setting that property will have no
+   * effect.
-   * @param port The port the server will bind to, will use {@value #DEFAULT_REDIS_SERVER_PORT} by
-   *        default if argument is less than or equal to 0
+   * @param port The port the server will bind to, will use {@value #DEFAULT_REDIS_SERVER_PORT}
+   *        by default if argument is less than or equal to 0
-          if (logLevel != null)
+          if (logLevel != null) {
+          }
+
+      this.pubSub = new PubSubImpl();
-          if (logger.errorEnabled())
+          if (logger.errorEnabled()) {
+          }
-   *
-            if (logger.fineEnabled())
+            if (logger.fineEnabled()) {
+            }
-                    keyRegistrar));
+                    keyRegistrar, pubSub));
-      if (this.singleThreadPerConnection)
+      if (this.singleThreadPerConnection) {
-      else
+      } else {
+      }
-   * Takes an entry event and processes it. If the entry denotes that a
-   * {@link RedisDataType#REDIS_LIST} or {@link RedisDataType#REDIS_SORTEDSET} was created then this
+   * Takes an entry event and processes it. If the entry denotes that a {@link
+   * RedisDataType#REDIS_LIST} or {@link RedisDataType#REDIS_SORTEDSET} was created then this
-      if (logger.infoEnabled())
+      if (logger.infoEnabled()) {
+      }
-      if (mainThread != null)
+      if (mainThread != null) {
-      for (ScheduledFuture<?> f : this.expirationFutures.values())
+      }
+      for (ScheduledFuture<?> f : this.expirationFutures.values()) {
+      }
-      if (arg.startsWith("-port"))
+      if (arg.startsWith("-port")) {
-      else if (arg.startsWith("-bind-address"))
+      } else if (arg.startsWith("-bind-address")) {
-      else if (arg.startsWith("-log-level"))
+      } else if (arg.startsWith("-log-level")) {
+      }
-   * @return The port number when the correct syntax was used, otherwise will return
-   *         {@link #DEFAULT_REDIS_SERVER_PORT}
+   * @return The port number when the correct syntax was used, otherwise will return {@link
+   *         #DEFAULT_REDIS_SERVER_PORT}
+
