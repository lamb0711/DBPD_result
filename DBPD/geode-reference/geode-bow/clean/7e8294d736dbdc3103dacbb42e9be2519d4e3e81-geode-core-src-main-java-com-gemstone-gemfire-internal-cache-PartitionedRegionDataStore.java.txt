Merge branch 'develop' into feature/GEODE-17-2

# Conflicts:
#	geode-core/src/test/resources/com/gemstone/gemfire/codeAnalysis/sanctionedSerializables.txt

-import com.gemstone.gemfire.cache.hdfs.HDFSIOException;
-			  clientEvent, returnTombstones, false, false);
+			  clientEvent, returnTombstones, false);
-   * @param preferCD 
+   * @param preferCD
-  public Object getLocally(int bucketId, final Object key,
-      final Object aCallbackArgument, boolean disableCopyOnRead, boolean preferCD, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, 
-      boolean returnTombstones, boolean opScopeIsLocal, boolean allowReadFromHDFS) throws PrimaryBucketException,
+  public Object getLocally(int bucketId,
+                           final Object key,
+                           final Object aCallbackArgument,
+                           boolean disableCopyOnRead,
+                           boolean preferCD,
+                           ClientProxyMembershipID requestingClient,
+                           EntryEventImpl clientEvent,
+                           boolean returnTombstones,
+                           boolean opScopeIsLocal) throws PrimaryBucketException,
-      logger.debug("getLocally:  key {}) bucketId={}{}{} region {} returnTombstones {} allowReadFromHDFS {}", key,
-          this.partitionedRegion.getPRId(), PartitionedRegion.BUCKET_ID_SEPARATOR, bucketId, bucketRegion.getName(), returnTombstones, allowReadFromHDFS);
+      logger.debug("getLocally:  key {}) bucketId={}{}{} region {} returnTombstones {} ", key,
+          this.partitionedRegion.getPRId(), PartitionedRegion.BUCKET_ID_SEPARATOR, bucketId, bucketRegion.getName(), returnTombstones);
-      ret = bucketRegion.get(key, aCallbackArgument, true, disableCopyOnRead , preferCD, requestingClient, clientEvent, returnTombstones, opScopeIsLocal, allowReadFromHDFS, false);
+      ret = bucketRegion.get(key, aCallbackArgument, true, disableCopyOnRead , preferCD, requestingClient, clientEvent, returnTombstones, opScopeIsLocal,
+        false);
-  public RawValue getSerializedLocally(KeyInfo keyInfo, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) throws PrimaryBucketException,
+  public RawValue getSerializedLocally(KeyInfo keyInfo,
+                                       boolean doNotLockEntry,
+                                       ClientProxyMembershipID requestingClient,
+                                       EntryEventImpl clientEvent,
+                                       boolean returnTombstones) throws PrimaryBucketException,
-      RawValue result = bucketRegion.getSerialized(keyInfo, true, doNotLockEntry, requestingClient, clientEvent, returnTombstones, allowReadFromHDFS);
+      RawValue result = bucketRegion.getSerialized(keyInfo, true, doNotLockEntry, requestingClient, clientEvent, returnTombstones);
-   * 
+   *
-      boolean access, boolean allowTombstones, boolean allowReadFromHDFS)
+                                       boolean access, boolean allowTombstones)
-      if (allowReadFromHDFS) {
-        ent = bucketRegion.entries.getEntry(key);
-      }
-      else {
-        ent = bucketRegion.entries.getOperationalEntryInVM(key);
-      }
+      ent = bucketRegion.entries.getEntry(key);
-        if (getPartitionedRegion().isHDFSReadWriteRegion()) {
-          // hdfs regions can't copy all keys into memory
-          ret = keys;
-
-        } else  { 
-		}
