Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Administrative interface for managing an entire GemFire distributed
- * system.  This interface should not be confused with {@link
- * org.apache.geode.distributed.DistributedSystem
- * DistributedSystem} that represents a connection to a GemFire
- * distributed system.
+ * Administrative interface for managing an entire GemFire distributed system. This interface should
+ * not be confused with {@link org.apache.geode.distributed.DistributedSystem DistributedSystem}
+ * that represents a connection to a GemFire distributed system.
- * @since GemFire     3.5
- * @deprecated as of 7.0 use the <code><a href="{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code> package instead
+ * @since GemFire 3.5
+ * @deprecated as of 7.0 use the <code><a href=
+ *             "{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code>
+ *             package instead
-	
+
-  
+
-   * Retrieves display friendly name for this system.  If this administrative
-   * VM defined an optional name for its connection to the distributed system,
-   * that name will be returned.  Otherwise the returned value will be {@link
-   * org.apache.geode.admin.AdminDistributedSystem#getId}.
+   * Retrieves display friendly name for this system. If this administrative VM defined an optional
+   * name for its connection to the distributed system, that name will be returned. Otherwise the
+   * returned value will be {@link org.apache.geode.admin.AdminDistributedSystem#getId}.
-  
+
-   * Retrieves the remote command and formatting this system should use to 
-   * access and/or manipulate resources on remote machines.
+   * Retrieves the remote command and formatting this system should use to access and/or manipulate
+   * resources on remote machines.
-   * Sets the remote command and formatting this system should use to access 
-   * and/or manipulate resources on remote machines.
+   * Sets the remote command and formatting this system should use to access and/or manipulate
+   * resources on remote machines.
-   * Sets the lowest level of alert that should be delivered to the
-   * {@link AlertListener}s registered on this
-   * <code>AdminDistributedSystem</code>.  The default level is {@link
-   * AlertLevel#WARNING}. 
+   * Sets the lowest level of alert that should be delivered to the {@link AlertListener}s
+   * registered on this <code>AdminDistributedSystem</code>. The default level is
+   * {@link AlertLevel#WARNING}.
-   * Returns the lowest level of alerts that should be delivered to
-   * the {@link AlertListener}s registered on this
-   * <code>AdminDistributedSystem</code>.
+   * Returns the lowest level of alerts that should be delivered to the {@link AlertListener}s
+   * registered on this <code>AdminDistributedSystem</code>.
-  
+
-   * Sets the lowest level of alert that should be delivered to the
-   * {@link AlertListener}s registered on this
-   * <code>AdminDistributedSystem</code>.  The default level is {@link
-   * AlertLevel#WARNING}. 
+   * Sets the lowest level of alert that should be delivered to the {@link AlertListener}s
+   * registered on this <code>AdminDistributedSystem</code>. The default level is
+   * {@link AlertLevel#WARNING}.
-   * Returns the lowest level of alerts that should be delivered to
-   * the {@link AlertListener}s registered on this
-   * <code>AdminDistributedSystem</code>.
+   * Returns the lowest level of alerts that should be delivered to the {@link AlertListener}s
+   * registered on this <code>AdminDistributedSystem</code>.
-   * Registers an <code>AlertListener</code> that will receive all
-   * alerts that are at or above the {@linkplain #setAlertLevel alert
-   * level}. 
+   * Registers an <code>AlertListener</code> that will receive all alerts that are at or above the
+   * {@linkplain #setAlertLevel alert level}.
-   * Unregisters an <code>AlertListener</code> 
+   * Unregisters an <code>AlertListener</code>
-   * Retrieves comma-delimited list locators to be used if multi-cast port is
-   * zero.  Format of each locators must be host[port].
+   * Retrieves comma-delimited list locators to be used if multi-cast port is zero. Format of each
+   * locators must be host[port].
-  /** 
+  /**
-  
+
-  /** 
-   * Returns <code>true</code> if this is currently connected to the
-   * system.
+  /**
+   * Returns <code>true</code> if this is currently connected to the system.
-    
+
-   * @throws AdminException
-   *         If a problem is encountered while starting the managed
-   *         entities.
+   * @throws AdminException If a problem is encountered while starting the managed entities.
-   * @throws AdminException
-   *         If a problem is encountered while starting the managed
-   *         entities.
+   * @throws AdminException If a problem is encountered while starting the managed entities.
-   * {@linkplain DistributionLocator#getConfig configure} and
-   * {@linkplain #start start}.
+   * {@linkplain DistributionLocator#getConfig configure} and {@linkplain #start start}.
-   * It is presumed that the newly-added locator is used to discover
-   * members of the distributed system.  That is, the host/port of the
-   * new locator is appended to the {@link #getLocators locators}
-   * attribute of this <code>AdminDistributedSystem</code>.
+   * It is presumed that the newly-added locator is used to discover members of the distributed
+   * system. That is, the host/port of the new locator is appended to the {@link #getLocators
+   * locators} attribute of this <code>AdminDistributedSystem</code>.
-  
-  /** 
-   * Returns array of <code>DistributionLocator</code>s administered
-   * by this <code>AdminDistributedSystem</code>.
-   */ 
-  public DistributionLocator[] getDistributionLocators();
-  
+
-   * Retrieves SystemMember instances for every
-   * application that is running and currently connection to this
-   * system.  Note that this list does not include dedicated
-   * {@linkplain #getCacheVms cache server vms}.
+   * Returns array of <code>DistributionLocator</code>s administered by this
+   * <code>AdminDistributedSystem</code>.
-  public SystemMember[] getSystemMemberApplications() 
-  throws org.apache.geode.admin.AdminException;
+  public DistributionLocator[] getDistributionLocators();
+
+  /**
+   * Retrieves SystemMember instances for every application that is running and currently connection
+   * to this system. Note that this list does not include dedicated {@linkplain #getCacheVms cache
+   * server vms}.
+   */
+  public SystemMember[] getSystemMemberApplications() throws org.apache.geode.admin.AdminException;
-  
+
-   * Connects to the distributed system.  This method will return
-   * immediately after spawning a background thread that connects to
-   * the distributed system.  As a result, a
-   * <code>AdminDistributedSystem</code> can be "connected" to before
-   * any members of the system have been started or have been seen.
-   * The {@link #waitToBeConnected} method will wait for the
+   * Connects to the distributed system. This method will return immediately after spawning a
+   * background thread that connects to the distributed system. As a result, a
+   * <code>AdminDistributedSystem</code> can be "connected" to before any members of the system have
+   * been started or have been seen. The {@link #waitToBeConnected} method will wait for the
-   * Wait for up to a given number of milliseconds for the connection
-   * to the distributed system to be made.
+   * Wait for up to a given number of milliseconds for the connection to the distributed system to
+   * be made.
-   * @param timeout
-   *        The number of milliseconds to wait for the connection to
-   *        to be made.
+   * @param timeout The number of milliseconds to wait for the connection to to be made.
-   * @return Whether or not the connection was made.
-   *         <code>false</code>, if the method times out
+   * @return Whether or not the connection was made. <code>false</code>, if the method times out
-   * @throws InterruptedException
-   *         If the thread invoking this method is interrupted while
-   *         waiting. 
-   * @throws IllegalStateException
-   *         If {@link #connect} has not yet been called.
+   * @throws InterruptedException If the thread invoking this method is interrupted while waiting.
+   * @throws IllegalStateException If {@link #connect} has not yet been called.
-  public boolean waitToBeConnected(long timeout)
-    throws InterruptedException;
+  public boolean waitToBeConnected(long timeout) throws InterruptedException;
-  /** Returns this system's configuration .*/  
+  /** Returns this system's configuration . */
-  
+
-   * Registers a listener that receives callbacks when a member joins
-   * or leaves the distributed system.
+   * Registers a listener that receives callbacks when a member joins or leaves the distributed
+   * system.
-   * Registers a cache event listener.
-   * Does nothing if the listener is already registered. The listeners are called
-   * in the order they are registered.
+   * Registers a cache event listener. Does nothing if the listener is already registered. The
+   * listeners are called in the order they are registered.
+   * 
-    * @since GemFire 5.0
+   * @since GemFire 5.0
-   public void addCacheListener(SystemMemberCacheListener listener);
-
-   /**
-    * Unregisters a cache listener. Does nothing if the listener is
-    * not registered.
-    * @param listener the listener to unregister.
-    * @since GemFire 5.0
-    */
-   public void removeCacheListener(SystemMemberCacheListener listener);
+  public void addCacheListener(SystemMemberCacheListener listener);
-   * Creates a new cache server that is ready to {@linkplain
-   * CacheServerConfig configure} and {@linkplain #start
-   * start}.
+   * Unregisters a cache listener. Does nothing if the listener is not registered.
+   * 
+   * @param listener the listener to unregister.
+   * @since GemFire 5.0
+   */
+  public void removeCacheListener(SystemMemberCacheListener listener);
+
+  /**
+   * Creates a new cache server that is ready to {@linkplain CacheServerConfig configure} and
+   * {@linkplain #start start}.
-   * Returns all of the dedicated cache server members of the
-   * distributed system.  Because they are not managed entities,
-   * application VMs that host a server cache are not included in the
-   * array.
+   * Returns all of the dedicated cache server members of the distributed system. Because they are
+   * not managed entities, application VMs that host a server cache are not included in the array.
-   * Returns all the cache server members of the distributed system which are
-   * hosting a client queue for the particular durable-client having the given
-   * durableClientId
+   * Returns all the cache server members of the distributed system which are hosting a client queue
+   * for the particular durable-client having the given durableClientId
-   * @param durableClientId -
-   *                durable-id of the client
+   * @param durableClientId - durable-id of the client
-  public CacheServer[] getCacheServers(String durableClientId)
-      throws AdminException;
+  public CacheServer[] getCacheServers(String durableClientId) throws AdminException;
-   * Creates a new cache vm that is ready to {@linkplain
-   * CacheVmConfig configure} and {@linkplain #start
-   * start}.
+   * Creates a new cache vm that is ready to {@linkplain CacheVmConfig configure} and
+   * {@linkplain #start start}.
-   * Returns all of the dedicated cache server vm members of the
-   * distributed system.  Because they are not managed entities,
-   * application VMs that host a server cache are not included in the
+   * Returns all of the dedicated cache server vm members of the distributed system. Because they
+   * are not managed entities, application VMs that host a server cache are not included in the
-   * Returns the administrative SystemMember specified by the {@link
-   * org.apache.geode.distributed.DistributedMember}.
+   * Returns the administrative SystemMember specified by the
+   * {@link org.apache.geode.distributed.DistributedMember}.
-  public SystemMember lookupSystemMember(DistributedMember distributedMember) 
-  throws AdminException;
+  public SystemMember lookupSystemMember(DistributedMember distributedMember) throws AdminException;
-   * Indicate to the distributed system that persistent files have been lost.
-   * When a member recovers from a set of persistent files, it will wait for
-   * other members that were also persisting the same region to start up. If the
-   * persistent files for those other members were lost, this method can be used
-   * to tell the remaining members to stop waiting for the lost data.
+   * Indicate to the distributed system that persistent files have been lost. When a member recovers
+   * from a set of persistent files, it will wait for other members that were also persisting the
+   * same region to start up. If the persistent files for those other members were lost, this method
+   * can be used to tell the remaining members to stop waiting for the lost data.
-   * @param host
-   *          The host of the member whose files were lost.
-   * @param directory
-   *          The directory where those files resided.
+   * @param host The host of the member whose files were lost.
+   * @param directory The directory where those files resided.
-  
+
-   * Indicate to the distributed system that persistent files have been lost.
-   * When a member recovers from a set of persistent files, it will wait for
-   * other members that were also persisting the same region to start up. If the
-   * persistent files for those other members were lost, this method can be used
-   * to tell the remaining members to stop waiting for the lost data.
+   * Indicate to the distributed system that persistent files have been lost. When a member recovers
+   * from a set of persistent files, it will wait for other members that were also persisting the
+   * same region to start up. If the persistent files for those other members were lost, this method
+   * can be used to tell the remaining members to stop waiting for the lost data.
-   * @param diskStoreID
-   *          The unique id of the disk store which you are revoking. The unique
-   *          id can be discovered from {@link #getMissingPersistentMembers()}
+   * @param diskStoreID The unique id of the disk store which you are revoking. The unique id can be
+   *        discovered from {@link #getMissingPersistentMembers()}
-  
+
-   * Retrieve the set of persistent files that the existing members are waiting
-   * for. See {@link AdminDistributedSystem#revokePersistentMember(InetAddress, String)}
-   * @return The persistent members that were known to the existing persistent members,
-   * when the existing members were last online.
+   * Retrieve the set of persistent files that the existing members are waiting for. See
+   * {@link AdminDistributedSystem#revokePersistentMember(InetAddress, String)}
+   * 
+   * @return The persistent members that were known to the existing persistent members, when the
+   *         existing members were last online.
-   * Shuts down all the members of the distributed system with a cache that the admin 
-   * member is connected to, excluding the stand-alone locators. Calling this method
-   * will ensure that regions with the {@link DataPolicy#PERSISTENT_PARTITION} to
-   * be shutdown in a way which allows for a faster recovery when the members are 
-   * restarted.
+   * Shuts down all the members of the distributed system with a cache that the admin member is
+   * connected to, excluding the stand-alone locators. Calling this method will ensure that regions
+   * with the {@link DataPolicy#PERSISTENT_PARTITION} to be shutdown in a way which allows for a
+   * faster recovery when the members are restarted.
-   * Killing individual members can lead to inconsistencies in the members persistent
-   * data, which gemfire repairs on startup. Calling shutDownAllMembers makes sure
-   * that the persistent files are consistent on shutdown, which makes recovery faster.
-   *  
+   * Killing individual members can lead to inconsistencies in the members persistent data, which
+   * gemfire repairs on startup. Calling shutDownAllMembers makes sure that the persistent files are
+   * consistent on shutdown, which makes recovery faster.
+   * 
+   * 
-  
+
-   * Shuts down all the members of the distributed system with a cache that the
-   * admin member is connected to, excluding the stand-alone locators. Calling
-   * this method will ensure that regions with the
-   * {@link DataPolicy#PERSISTENT_PARTITION} to be shutdown in a way which
-   * allows for a faster recovery when the members are restarted.
+   * Shuts down all the members of the distributed system with a cache that the admin member is
+   * connected to, excluding the stand-alone locators. Calling this method will ensure that regions
+   * with the {@link DataPolicy#PERSISTENT_PARTITION} to be shutdown in a way which allows for a
+   * faster recovery when the members are restarted.
-   * Killing individual members can lead to inconsistencies in the members
-   * persistent data, which gemfire repairs on startup. Calling
-   * shutDownAllMembers makes sure that the persistent files are consistent on
-   * shutdown, which makes recovery faster.
+   * Killing individual members can lead to inconsistencies in the members persistent data, which
+   * gemfire repairs on startup. Calling shutDownAllMembers makes sure that the persistent files are
+   * consistent on shutdown, which makes recovery faster.
-   * @param timeout The amount of time to wait (in milliseconds) for the shutdown all to
-   *          complete. 
+   * @param timeout The amount of time to wait (in milliseconds) for the shutdown all to complete.
-   * Backup the persistent files for all of the members of the distributed
-   * system that the admin member is connected to. 
+   * Backup the persistent files for all of the members of the distributed system that the admin
+   * member is connected to.
-   * @return The status of the backup, which includes the set of members
-   * that were backed up and the set of members that were known to be
-   * offline at the time of backup.
+   * @return The status of the backup, which includes the set of members that were backed up and the
+   *         set of members that were known to be offline at the time of backup.
-  
+
-   * Incrementally backup the persistent files for all of the members of the distributed
-   * system that the admin member is connected to. Only new operation log files since the previous backup will be copied during this backup.
-   * The generated restore script will reference and copy operation log files from the previous backup.
+   * Incrementally backup the persistent files for all of the members of the distributed system that
+   * the admin member is connected to. Only new operation log files since the previous backup will
+   * be copied during this backup. The generated restore script will reference and copy operation
+   * log files from the previous backup.
-   * @param baselineDir The directory of a previous backup.
-   * If this parameter is null or the directory does not exist (on a member by member basis)
-   * a full backup will be performed for the member. 
+   * @param baselineDir The directory of a previous backup. If this parameter is null or the
+   *        directory does not exist (on a member by member basis) a full backup will be performed
+   *        for the member.
-   * @return The status of the backup, which includes the set of members
-   * that were backed up and the set of members that were known to be
-   * offline at the time of backup.
+   * @return The status of the backup, which includes the set of members that were backed up and the
+   *         set of members that were known to be offline at the time of backup.
-  public BackupStatus backupAllMembers(File targetDir,File baselineDir) throws AdminException;
-  
+  public BackupStatus backupAllMembers(File targetDir, File baselineDir) throws AdminException;
+
-   * Compact the persistent files for all of the members of the distributed
-   * system that the admin member connected to. 
+   * Compact the persistent files for all of the members of the distributed system that the admin
+   * member connected to.
