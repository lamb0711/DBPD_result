GEODE-6293: Fix fire & forget functions in gfsh (#3138)

* GEODE-6293: Fix fire & forget functions in gfsh

- Fixed minor warnings.
- Refactored class `UserFunctionExecution`.
- Added unit tests for class `UserFunctionExecution`.
- Class `UserFunctionExecution` now supports the execution of functions
  that don't return any results.
+import static org.apache.geode.management.internal.cli.functions.CliFunctionResult.StatusState.OK;
+import org.apache.geode.cache.query.RegionNotFoundException;
+  private static final long serialVersionUID = 1L;
+  private static Logger logger = LogService.getLogger();
-  private static Logger logger = LogService.getLogger();
-  private static final long serialVersionUID = 1L;
+  @Override
+  public boolean isHA() {
+    return false;
+  }
+
+  @Override
+  public String getId() {
+    return UserFunctionExecution.ID;
+  }
+
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.emptySet();
+  }
+
+  boolean loginRequired(SecurityService securityService) {
+    try {
+      // if the function is executed on a server with jmx-manager that user is already logged into
+      // then we do not need to do login/logout here.
+      Subject subject = securityService.getSubject();
+      return subject == null || !subject.isAuthenticated();
+    } catch (AuthenticationRequiredException e) {
+      return true;
+    }
+  }
+
+  Function<?> loadFunction(String functionId) {
+    return FunctionService.getFunction(functionId);
+  }
+
+  String[] parseArguments(String argumentsString) {
+    if (argumentsString != null && argumentsString.length() > 0) {
+      return argumentsString.split(",");
+    } else {
+      return null;
+    }
+  }
+
+  Set<String> parseFilters(String filterString) {
+    if (filterString != null && filterString.length() > 0) {
+      return Arrays.stream(filterString.split(",")).collect(Collectors.toSet());
+    } else {
+      return new HashSet<>();
+    }
+  }
+
+  ResultCollector parseResultCollector(String resultCollectorName)
+      throws ClassNotFoundException, IllegalAccessException, InstantiationException {
+    if (resultCollectorName != null && resultCollectorName.length() > 0) {
+      return (ResultCollector) ClassPathLoader.getLatest().forName(resultCollectorName)
+          .newInstance();
+    } else {
+      return null;
+    }
+  }
+
+  Execution buildExecution(Cache cache, String onRegion) throws RegionNotFoundException {
+    Execution execution;
+    DistributedMember member = cache.getDistributedSystem().getDistributedMember();
+
+    if (onRegion != null && onRegion.length() > 0) {
+      Region region = cache.getRegion(onRegion);
+
+      if (region == null) {
+        throw new RegionNotFoundException(onRegion);
+      }
+
+      execution = FunctionService.onRegion(region);
+    } else {
+      execution = FunctionService.onMember(member);
+    }
+
+    return execution;
+  }
-    String[] functionArgs = null;
-
-    boolean loginNeeded = false;
-    try {
-      // if the function is executed on a server with jmx-manager that user is already logged into
-      // then we do not need to do login/logout here.
-      Subject subject = securityService.getSubject();
-      loginNeeded = subject == null || !subject.isAuthenticated();
-    } catch (AuthenticationRequiredException e) {
-      loginNeeded = true;
-    }
-      if (loginNeeded) {
+
+      // Authenticate If Needed
+      if (loginRequired(securityService)) {
-      if (argumentsString != null && argumentsString.length() > 0) {
-        functionArgs = argumentsString.split(",");
-      }
-      Set<String> filters = new HashSet<>();
-      ResultCollector resultCollectorInstance = null;
-      if (resultCollectorName != null && resultCollectorName.length() > 0) {
-        resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
-            .forName(resultCollectorName).newInstance();
-      }
-      if (filterString != null && filterString.length() > 0) {
-        filters = Arrays.stream(filterString.split(",")).collect(Collectors.toSet());
-      }
-
-      Function<?> function = FunctionService.getFunction(functionId);
+      // Load User Function
+      Function<?> function = loadFunction(functionId);
-      // security check
+      // Parse Arguments
+      Set<String> filters = parseFilters(filterString);
+      String[] functionArgs = parseArguments(argumentsString);
+      ResultCollector resultCollectorInstance = parseResultCollector(resultCollectorName);
+
+      // Security check
-      Execution execution = null;
-      if (onRegion != null && onRegion.length() > 0) {
-        Region region = cache.getRegion(onRegion);
-        if (region == null) {
-          context.getResultSender().lastResult(
-              new CliFunctionResult(context.getMemberName(), ERROR, onRegion + " does not exist"));
-          return;
-        }
-        execution = FunctionService.onRegion(region);
-      } else {
-        execution = FunctionService.onMember(member);
-      }
-
+      // Build & Configure Execution Context
+      Execution execution = buildExecution(cache, onRegion);
+
-      List<Object> results = (List<Object>) execution.execute(function.getId()).getResult();
-      List<String> resultMessage = new ArrayList<>();
+      // Execute Function and gather results
+      List results = null;
+      List<String> resultMessage = new ArrayList<>();
+
+      ResultCollector rc = execution.execute(function.getId());
+      if (function.hasResult()) {
+        results = (List) rc.getResult();
+      }
-      context.getResultSender().lastResult(new CliFunctionResult(context.getMemberName(),
-          functionSuccess, resultMessage.toString()));
+      context.getResultSender().lastResult(new CliFunctionResult(context.getMemberName(),
+          functionSuccess ? OK : ERROR, resultMessage.toString()));
+    } catch (RegionNotFoundException regionNotFoundException) {
+      context.getResultSender().lastResult(
+          new CliFunctionResult(context.getMemberName(), ERROR, onRegion + " does not exist"));
-          .lastResult(new CliFunctionResult(context.getMemberName(), false,
+          .lastResult(new CliFunctionResult(context.getMemberName(), ERROR,
-          new CliFunctionResult(context.getMemberName(), false, "Exception: " + e.getMessage()));
+          new CliFunctionResult(context.getMemberName(), ERROR, "Exception: " + e.getMessage()));
-
-  @Override
-  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
-    return Collections.emptySet();
-  }
-
-  @Override
-  public String getId() {
-    return UserFunctionExecution.ID;
-  }
-
-  @Override
-  public boolean isHA() {
-    return false;
-  }
-
