Merge branch 'release/1.4.0'

-import org.apache.geode.internal.cache.lru.HeapLRUCapacityController;
-import org.apache.geode.internal.cache.lru.LRUAlgorithm;
-import org.apache.geode.internal.cache.lru.LRUCapacityController;
-import org.apache.geode.internal.cache.lru.MemLRUCapacityController;
+import org.apache.geode.internal.cache.eviction.CountLRUEviction;
+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.eviction.HeapLRUController;
+import org.apache.geode.internal.cache.eviction.MemoryLRUController;
- * 
+ *
- * 
+ *
-  private EvictionAlgorithm algorithm = EvictionAlgorithm.NONE;
+  private org.apache.geode.cache.EvictionAlgorithm algorithm =
+      org.apache.geode.cache.EvictionAlgorithm.NONE;
-  private volatile LRUAlgorithm evictionController;
+  private volatile EvictionController evictionController;
-  public EvictionAttributesImpl setAlgorithm(EvictionAlgorithm algorithm) {
+  public EvictionAttributesImpl setAlgorithm(org.apache.geode.cache.EvictionAlgorithm algorithm) {
-   * 
+   *
-   * 
+   *
-  public EvictionAlgorithm getAlgorithm() {
+  public org.apache.geode.cache.EvictionAlgorithm getAlgorithm() {
+  @Override
-   * @param maximum parameter for the given {@link EvictionAlgorithm}
+   * @param maximum parameter for the given {@link org.apache.geode.cache.EvictionAlgorithm}
-   * 
+   *
-   * {@link EvictionAlgorithm} uses to perform the eviction.
-   * 
+   * {@link org.apache.geode.cache.EvictionAlgorithm} uses to perform the eviction.
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  public LRUAlgorithm createEvictionController(Region region, boolean isOffHeap) {
+  public EvictionController createEvictionController(Region region, boolean isOffHeap) {
-      this.evictionController = new LRUCapacityController(this.maximum, this.action, region);
+      this.evictionController = new CountLRUEviction(this.maximum, this.action, region);
-      this.evictionController = new HeapLRUCapacityController(this.sizer, this.action, region);
+      this.evictionController = new HeapLRUController(this.action, region, this.sizer);
-          new MemLRUCapacityController(this.maximum, this.sizer, this.action, region, isOffHeap);
+          new MemoryLRUController(this.maximum, this.sizer, this.action, region, isOffHeap);
-      this.evictionController = new LRUCapacityController(this.maximum, this.action, region);
+      this.evictionController = new CountLRUEviction(this.maximum, this.action, region);
-          new MemLRUCapacityController(this.maximum, this.sizer, this.action, region, isOffHeap);
+          new MemoryLRUController(this.maximum, this.sizer, this.action, region, isOffHeap);
+  @Override
+  @Override
-    this.action = (EvictionAction) DataSerializer.readObject(in);
-    this.algorithm = (EvictionAlgorithm) DataSerializer.readObject(in);
+    this.action = DataSerializer.readObject(in);
+    this.algorithm = DataSerializer.readObject(in);
-   * 
+   *
-    return this.algorithm == EvictionAlgorithm.LIFO_ENTRY;
+    return this.algorithm == org.apache.geode.cache.EvictionAlgorithm.LIFO_ENTRY;
-    return this.algorithm == EvictionAlgorithm.LIFO_MEMORY;
+    return this.algorithm == org.apache.geode.cache.EvictionAlgorithm.LIFO_MEMORY;
