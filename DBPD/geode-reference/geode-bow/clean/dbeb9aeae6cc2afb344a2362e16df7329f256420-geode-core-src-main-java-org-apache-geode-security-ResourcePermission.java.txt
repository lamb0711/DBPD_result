Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * ResourcePermission defines the resource, the operation, the region and the key involved in the action to be authorized.
+ * ResourcePermission defines the resource, the operation, the region and the key involved in the
+ * action to be authorized.
- * It is passed to the SecurityManager for the implementation to decide whether to grant a user this permission or not.
+ * It is passed to the SecurityManager for the implementation to decide whether to grant a user this
+ * permission or not.
-    NULL,
-    CLUSTER,
-    DATA
+    NULL, CLUSTER, DATA
-    NULL,
-    MANAGE,
-    WRITE,
-    READ
+    NULL, MANAGE, WRITE, READ
-    this((resource==null) ? Resource.NULL : Resource.valueOf(resource),
-      (operation == null) ? Operation.NULL : Operation.valueOf(operation),
-      regionName,
-      key);
+    this((resource == null) ? Resource.NULL : Resource.valueOf(resource.toUpperCase()),
+        (operation == null) ? Operation.NULL : Operation.valueOf(operation.toUpperCase()),
+        regionName, key);
-  public ResourcePermission(Resource resource, Operation operation){
+  public ResourcePermission(Resource resource, Operation operation) {
-  public ResourcePermission(Resource resource, Operation operation, String regionName){
+  public ResourcePermission(Resource resource, Operation operation, String regionName) {
-  public ResourcePermission(Resource resource, Operation operation, String regionName, String key){
-    if(resource != null) this.resource = resource;
-    if(operation != null) this.operation = operation;
-    if(regionName != null) this.regionName = regionName;
-    if(key != null) this.key = key;
+  public ResourcePermission(Resource resource, Operation operation, String regionName, String key) {
+    if (resource != null)
+      this.resource = resource;
+    if (operation != null)
+      this.operation = operation;
+    if (regionName != null)
+      this.regionName = regionName;
+    if (key != null)
+      this.key = key;
-    setParts(this.resource+":"+this.operation+":"+this.regionName+":"+this.key, true);
+    setParts(this.resource + ":" + this.operation + ":" + this.regionName + ":" + this.key, true);
-    } else if(ALL_KEYS.equals(key)) {
+    } else if (ALL_KEYS.equals(key)) {
-    }
-    else{
+    } else {
