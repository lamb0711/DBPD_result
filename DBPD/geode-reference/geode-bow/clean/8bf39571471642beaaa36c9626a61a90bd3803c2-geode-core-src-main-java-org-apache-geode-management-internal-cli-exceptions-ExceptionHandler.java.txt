Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  //FIXME define handling when no match is present
-  public static void handleException(CliException ce) {    
+
+  // FIXME define handling when no match is present
+  public static void handleException(CliException ce) {
-    switch(ce.getCode()){
-      case CliCommandMultiModeOptionException.MULTIPLE_LEAD_OPTIONS :
-        LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer("Input command contains multiple lead-options from modes : " + ce.getLeadOptionString()));
+    switch (ce.getCode()) {
+      case CliCommandMultiModeOptionException.MULTIPLE_LEAD_OPTIONS:
+        LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(
+            "Input command contains multiple lead-options from modes : "
+                + ce.getLeadOptionString()));
-      case CliCommandMultiModeOptionException.OPTIONS_FROM_MULTIPLE_MODES :
-        LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer("Input command contains options from multilpe modes : " + ce.getLeadOptionString()));
+      case CliCommandMultiModeOptionException.OPTIONS_FROM_MULTIPLE_MODES:
+        LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(
+            "Input command contains options from multilpe modes : " + ce.getLeadOptionString()));
-    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(ccie.getCommandTarget().getGfshMethodTarget().getKey() + " is not a valid Command"));
+    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(
+        ccie.getCommandTarget().getGfshMethodTarget().getKey() + " is not a valid Command"));
-    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(ccnae.getCommandTarget().getGfshMethodTarget().getKey() + " is not available at the moment"));
+    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(
+        ccnae.getCommandTarget().getGfshMethodTarget().getKey()
+            + " is not available at the moment"));
-    } else if (ccoe instanceof CliCommandMultiModeOptionException) {      
+    } else if (ccoe instanceof CliCommandMultiModeOptionException) {
-    } 
+    }
-    String messege = "Parameter " + cconae.getOption().getLongOption() + " is not applicable for " + cconae.getCommandTarget().getGfshMethodTarget().getKey();
-    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(messege));  
+    String messege = "Parameter " + cconae.getOption().getLongOption() + " is not applicable for "
+        + cconae.getCommandTarget().getGfshMethodTarget().getKey();
+    LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(messege));
-      // unfortunately by changing from geode-joptsimple to jopt-simple we will lose ALL such debugging info from exceptions
-      //String parameter = ccove != null && ccove.getOption() != null ? ccove.getOption().getLongOption() : "<null>";
+      // unfortunately by changing from geode-joptsimple to jopt-simple we will lose ALL such
+      // debugging info from exceptions
+      // String parameter = ccove != null && ccove.getOption() != null ?
+      // ccove.getOption().getLongOption() : "<null>";
-      LOGGER.warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(message));
+      LOGGER
+          .warning(CLIConsoleBufferUtil.processMessegeForExtraCharactersFromConsoleBuffer(message));
