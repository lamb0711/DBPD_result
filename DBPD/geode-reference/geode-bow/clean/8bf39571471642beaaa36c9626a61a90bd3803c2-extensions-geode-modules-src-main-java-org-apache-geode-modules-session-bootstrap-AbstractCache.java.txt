Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*      http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
-  protected static final String DEFAULT_LOG_FILE_NAME = RegionHelper.NAME + "." + FORMAT.format(new Date()) + ".log";
+  protected static final String DEFAULT_LOG_FILE_NAME =
+      RegionHelper.NAME + "." + FORMAT.format(new Date()) + ".log";
-  protected static final float DEFAULT_EVICTION_HEAP_PERCENTAGE = LocalRegion.DEFAULT_HEAPLRU_EVICTION_HEAP_PERCENTAGE;
+  protected static final float DEFAULT_EVICTION_HEAP_PERCENTAGE =
+      LocalRegion.DEFAULT_HEAPLRU_EVICTION_HEAP_PERCENTAGE;
-  protected static final float DEFAULT_CRITICAL_HEAP_PERCENTAGE = ResourceManager.DEFAULT_CRITICAL_PERCENTAGE;
+  protected static final float DEFAULT_CRITICAL_HEAP_PERCENTAGE =
+      ResourceManager.DEFAULT_CRITICAL_PERCENTAGE;
-    //TODO Look at fake attributes
+    // TODO Look at fake attributes
-      getLogger().warn("The input property named " + name + " is not a valid GemFire property. It is being ignored.");
+      getLogger().warn("The input property named " + name
+          + " is not a valid GemFire property. It is being ignored.");
-        logFile = new File("servers" + separator + weblogicName + separator +
-            "logs" + separator + logFileName);
+        logFile = new File(
+            "servers" + separator + weblogicName + separator + "logs" + separator + logFileName);
-        logFile = new File(System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "logdir"), logFileName);
+        logFile =
+            new File(System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "logdir"), logFileName);
-          statisticsArchiveFile = new File(System.getProperty("catalina.base") + "/logs/", statisticsArchiveFileName);
+          statisticsArchiveFile =
+              new File(System.getProperty("catalina.base") + "/logs/", statisticsArchiveFileName);
-          statisticsArchiveFile = new File("servers" + separator + weblogicName + separator +
-              "logs" + separator + statisticsArchiveFileName);
+          statisticsArchiveFile = new File("servers" + separator + weblogicName + separator + "logs"
+              + separator + statisticsArchiveFileName);
-          statisticsArchiveFile = new File(System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "statisticsdir"), statisticsArchiveFileName);
+          statisticsArchiveFile =
+              new File(System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "statisticsdir"),
+                  statisticsArchiveFileName);
-    if (getEvictionHeapPercentage() != currentEvictionHeapPercentage || getCriticalHeapPercentage() != currentCriticalHeapPercentage) {
+    if (getEvictionHeapPercentage() != currentEvictionHeapPercentage
+        || getCriticalHeapPercentage() != currentCriticalHeapPercentage) {
-        builder.append("Previous eviction heap percentage=")
-            .append(currentEvictionHeapPercentage)
-            .append("; critical heap percentage=")
-            .append(currentCriticalHeapPercentage);
+        builder.append("Previous eviction heap percentage=").append(currentEvictionHeapPercentage)
+            .append("; critical heap percentage=").append(currentCriticalHeapPercentage);
-        builder.append("Requested eviction heap percentage=")
-            .append(getEvictionHeapPercentage())
-            .append("; critical heap percentage=")
-            .append(getCriticalHeapPercentage());
+        builder.append("Requested eviction heap percentage=").append(getEvictionHeapPercentage())
+            .append("; critical heap percentage=").append(getCriticalHeapPercentage());
-          handleResourceManagerException(e, currentEvictionHeapPercentage, currentCriticalHeapPercentage);
+          handleResourceManagerException(e, currentEvictionHeapPercentage,
+              currentCriticalHeapPercentage);
-          handleResourceManagerException(e, currentEvictionHeapPercentage, currentCriticalHeapPercentage);
+          handleResourceManagerException(e, currentEvictionHeapPercentage,
+              currentCriticalHeapPercentage);
-          handleResourceManagerException(e, currentEvictionHeapPercentage, currentCriticalHeapPercentage);
+          handleResourceManagerException(e, currentEvictionHeapPercentage,
+              currentCriticalHeapPercentage);
-        builder.append("Actual eviction heap percentage=")
-            .append(rm.getEvictionHeapPercentage())
-            .append("; critical heap percentage=")
-            .append(rm.getCriticalHeapPercentage());
+        builder.append("Actual eviction heap percentage=").append(rm.getEvictionHeapPercentage())
+            .append("; critical heap percentage=").append(rm.getCriticalHeapPercentage());
-  private void handleResourceManagerException(IllegalArgumentException e, float currentEvictionHeapPercentage,
-      float currentCriticalHeapPercentage) {
+  private void handleResourceManagerException(IllegalArgumentException e,
+      float currentEvictionHeapPercentage, float currentCriticalHeapPercentage) {
-        .append(getEvictionHeapPercentage())
-        .append(" and critical heap percentage=")
+        .append(getEvictionHeapPercentage()).append(" and critical heap percentage=")
-        .append(". The percentages will be set back to their previous values (eviction heap percentage=")
-        .append(currentEvictionHeapPercentage)
-        .append(" and critical heap percentage=")
-        .append(currentCriticalHeapPercentage)
-        .append(").");
+        .append(
+            ". The percentages will be set back to their previous values (eviction heap percentage=")
+        .append(currentEvictionHeapPercentage).append(" and critical heap percentage=")
+        .append(currentCriticalHeapPercentage).append(").");
-    return new StringBuilder().append(getClass().getSimpleName())
-        .append("[")
-        .append("cache=")
-        .append(this.cache)
-        .append("]")
-        .toString();
+    return new StringBuilder().append(getClass().getSimpleName()).append("[").append("cache=")
+        .append(this.cache).append("]").toString();
