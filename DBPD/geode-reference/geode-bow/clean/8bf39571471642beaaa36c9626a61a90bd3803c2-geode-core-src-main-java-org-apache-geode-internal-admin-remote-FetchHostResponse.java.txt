Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
-   
+
+
-//import java.util.*;
+// import java.util.*;
- * A message that is sent to a particular distribution manager to
- * get its current {@link org.apache.geode.internal.Config}
+ * A message that is sent to a particular distribution manager to get its current
+ * {@link org.apache.geode.internal.Config}
-  
+
-  
+
-  
+
-  
+
-   * Returns a <code>FetchHostResponse</code> that will be returned to the
-   * specified recipient. The message will contains a copy of this vm's local host.
+   * Returns a <code>FetchHostResponse</code> that will be returned to the specified recipient. The
+   * message will contains a copy of this vm's local host.
-  public static FetchHostResponse create(DistributionManager dm, InternalDistributedMember recipient) {
+  public static FetchHostResponse create(DistributionManager dm,
+      InternalDistributedMember recipient) {
-        if (bindAddress != null && 
-            !bindAddress.equals(DistributionConfig.DEFAULT_BIND_ADDRESS)) {
+        if (bindAddress != null && !bindAddress.equals(DistributionConfig.DEFAULT_BIND_ADDRESS)) {
-        if ( host == null) {
+        if (host == null) {
-      
+
-        
+
-        throw new IllegalStateException(LocalizedStrings.FetchHostResponse_COULD_NOT_FIND_GEMFIREJAR.toLocalizedString());
+        throw new IllegalStateException(
+            LocalizedStrings.FetchHostResponse_COULD_NOT_FIND_GEMFIREJAR.toLocalizedString());
-      m.gemfireDir = product.getCanonicalFile();//may thro' IOException if url is not in a proper format
+      m.gemfireDir = product.getCanonicalFile();// may thro' IOException if url is not in a proper
+                                                // format
-      m.workingDir = m.workingDir != null ? m.workingDir : new File(System.getProperty("user.dir")).getAbsoluteFile();
+      m.workingDir = m.workingDir != null ? m.workingDir
+          : new File(System.getProperty("user.dir")).getAbsoluteFile();
-  
+
-  @Override  
+  @Override
-  @Override  
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.host = (InetAddress)DataSerializer.readObject(in);
-    this.gemfireDir = (File)DataSerializer.readObject(in);
-    this.workingDir = (File)DataSerializer.readObject(in);
+    this.host = (InetAddress) DataSerializer.readObject(in);
+    this.gemfireDir = (File) DataSerializer.readObject(in);
+    this.workingDir = (File) DataSerializer.readObject(in);
-  @Override  
+  @Override
-    return LocalizedStrings.FetchHostResponse_FETCHHOSTRESPONSE_FOR_0_HOST_1.toLocalizedString(new Object[] {this.getRecipient(), this.host});
+    return LocalizedStrings.FetchHostResponse_FETCHHOSTRESPONSE_FOR_0_HOST_1
+        .toLocalizedString(new Object[] {this.getRecipient(), this.host});
