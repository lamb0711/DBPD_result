Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class <code>ClientInterestMessageImpl</code> represents an update to the
- * a client's interest registrations made by the server on behalf of the
- * client.
+ * Class <code>ClientInterestMessageImpl</code> represents an update to the a client's interest
+ * registrations made by the server on behalf of the client.
-  
+
-  
+
-   * Whether the interest represented by this <code>ClientMessage</code>
-   * is durable
+   * Whether the interest represented by this <code>ClientMessage</code> is durable
-  
+
-   * Whether the create or update events for this <code>ClientMessage</code>
-   * is sent as an invalidate
+   * Whether the create or update events for this <code>ClientMessage</code> is sent as an
+   * invalidate
+   * 
-  
+
-  
+
-  
+
-  
+
-  
+
-  public ClientInterestMessageImpl(EventID eventId, String regionName,
-      Object keyOfInterest, int interestType, byte interestResultPolicy,
-      boolean isDurable, boolean sendUpdatesAsInvalidates,
-      byte action) {
+  public ClientInterestMessageImpl(EventID eventId, String regionName, Object keyOfInterest,
+      int interestType, byte interestResultPolicy, boolean isDurable,
+      boolean sendUpdatesAsInvalidates, byte action) {
-  
+
-  public ClientInterestMessageImpl() {
-  }
+  public ClientInterestMessageImpl() {}
-          "Unsupported client version for server-to-client message creation: "
-              + clientVersion);
+          "Unsupported client version for server-to-client message creation: " + clientVersion);
-      
+
-  
+
-    
+
-    case REGISTER:
-      message.setMessageType(MessageType.CLIENT_REGISTER_INTEREST);
-      break;
-    case UNREGISTER:
-      message.setMessageType(MessageType.CLIENT_UNREGISTER_INTEREST);
-      break;
-    default:
-      String s = "Unknown action: " + this.action;
-      throw new IOException(s);
+      case REGISTER:
+        message.setMessageType(MessageType.CLIENT_REGISTER_INTEREST);
+        break;
+      case UNREGISTER:
+        message.setMessageType(MessageType.CLIENT_UNREGISTER_INTEREST);
+        break;
+      default:
+        String s = "Unknown action: " + this.action;
+        throw new IOException(s);
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
-  
+
-  public void readExternal(ObjectInput in)
-    throws IOException, ClassNotFoundException {
+  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
-    DataSerializer.writePrimitiveBoolean(this.forUpdatesAsInvalidates , out);
+    DataSerializer.writePrimitiveBoolean(this.forUpdatesAsInvalidates, out);
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  public void setLatestValue(Object value){
-  }
-  
+  public void setLatestValue(Object value) {}
+
-    return new StringBuilder()
-      .append(getClass().getSimpleName())
-      .append("[")
-      .append("eventId=")
-      .append(this.eventId)
-      .append("; regionName=")
-      .append(this.regionName)
-      .append("; keyOfInterest=")
-      .append(this.keyOfInterest)
-      .append("; isDurable=")
-      .append(this.isDurable)
-      .append("; forUpdatesAsInvalidates=")
-      .append(this.forUpdatesAsInvalidates)
-      .append("; interestType=")
-      .append(this.interestType)
-      .append("; interestResultPolicy=")
-      .append(this.interestResultPolicy)
-      .append("; action=")
-      .append(this.action)
-      .append("]")
-      .toString();
+    return new StringBuilder().append(getClass().getSimpleName()).append("[").append("eventId=")
+        .append(this.eventId).append("; regionName=").append(this.regionName)
+        .append("; keyOfInterest=").append(this.keyOfInterest).append("; isDurable=")
+        .append(this.isDurable).append("; forUpdatesAsInvalidates=")
+        .append(this.forUpdatesAsInvalidates).append("; interestType=").append(this.interestType)
+        .append("; interestResultPolicy=").append(this.interestResultPolicy).append("; action=")
+        .append(this.action).append("]").toString();
