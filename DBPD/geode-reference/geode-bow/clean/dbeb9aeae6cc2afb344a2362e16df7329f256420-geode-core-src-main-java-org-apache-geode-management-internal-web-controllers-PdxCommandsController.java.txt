Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The PdxCommandsController class implements GemFire Management REST API web service endpoints for Gfsh PDX Commands.
+ * The PdxCommandsController class implements GemFire Management REST API web service endpoints for
+ * Gfsh PDX Commands.
-  public String configurePdx(@RequestParam(value = CliStrings.CONFIGURE_PDX__READ__SERIALIZED, required = false) final Boolean readSerialized,
-                             @RequestParam(value = CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS, required = false) final Boolean ignoreUnreadFields,
-                             @RequestParam(value = CliStrings.CONFIGURE_PDX__DISKSTORE, required = false) final String diskStore,
-                             @RequestParam(value = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES, required = false) final String[] autoSerializerClasses,
-                             @RequestParam(value = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES, required = false) final String[] portableAutoSerializerClasses)
-  {
+  public String configurePdx(
+      @RequestParam(value = CliStrings.CONFIGURE_PDX__READ__SERIALIZED,
+          required = false) final Boolean readSerialized,
+      @RequestParam(value = CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS,
+          required = false) final Boolean ignoreUnreadFields,
+      @RequestParam(value = CliStrings.CONFIGURE_PDX__DISKSTORE,
+          required = false) final String diskStore,
+      @RequestParam(value = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES,
+          required = false) final String[] autoSerializerClasses,
+      @RequestParam(value = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES,
+          required = false) final String[] portableAutoSerializerClasses) {
-      command.addOption(CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS, String.valueOf(ignoreUnreadFields));
+      command.addOption(CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS,
+          String.valueOf(ignoreUnreadFields));
-      command.addOption(CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES, StringUtils.concat(
-        autoSerializerClasses, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES,
+          StringUtils.concat(autoSerializerClasses, StringUtils.COMMA_DELIMITER));
-      command.addOption(CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES, StringUtils.concat(
-        portableAutoSerializerClasses, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES,
+          StringUtils.concat(portableAutoSerializerClasses, StringUtils.COMMA_DELIMITER));
-  //@RequestMapping(method = RequestMethod.DELETE, value = "/pdx/type/field")
-  //@ResponseBody
+  // @RequestMapping(method = RequestMethod.DELETE, value = "/pdx/type/field")
+  // @ResponseBody
-                               @RequestParam(value = CliStrings.PDX_FIELD) final String fieldName,
-                               @RequestParam(value = CliStrings.PDX_DISKSTORE) final String diskStore,
-                               @RequestParam(value = CliStrings.PDX_DISKDIR, required = false) final String[] diskDirs)
-  {
+      @RequestParam(value = CliStrings.PDX_FIELD) final String fieldName,
+      @RequestParam(value = CliStrings.PDX_DISKSTORE) final String diskStore,
+      @RequestParam(value = CliStrings.PDX_DISKDIR, required = false) final String[] diskDirs) {
-      command.addOption(CliStrings.PDX_DISKDIR, StringUtils.concat(diskDirs, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.PDX_DISKDIR,
+          StringUtils.concat(diskDirs, StringUtils.COMMA_DELIMITER));
-  public String pdxRename(@RequestParam(value = CliStrings.PDX_RENAME_OLD) final String oldClassName,
-                          @RequestParam(value = CliStrings.PDX_RENAME_NEW) final String newClassName,
-                          @RequestParam(value = CliStrings.PDX_DISKSTORE) final String diskStore,
-                          @RequestParam(value = CliStrings.PDX_DISKDIR, required = false) final String[] diskDirs)
-  {
+  public String pdxRename(
+      @RequestParam(value = CliStrings.PDX_RENAME_OLD) final String oldClassName,
+      @RequestParam(value = CliStrings.PDX_RENAME_NEW) final String newClassName,
+      @RequestParam(value = CliStrings.PDX_DISKSTORE) final String diskStore,
+      @RequestParam(value = CliStrings.PDX_DISKDIR, required = false) final String[] diskDirs) {
-      command.addOption(CliStrings.PDX_DISKDIR, StringUtils.concat(diskDirs, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.PDX_DISKDIR,
+          StringUtils.concat(diskDirs, StringUtils.COMMA_DELIMITER));
