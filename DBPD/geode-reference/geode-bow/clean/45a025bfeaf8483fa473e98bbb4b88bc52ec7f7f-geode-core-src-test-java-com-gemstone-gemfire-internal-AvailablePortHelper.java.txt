Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-    List<Keeper> list = getRandomAvailableTCPPortKeepers(count);
+    return getRandomAvailableTCPPorts(count, false);
+  }
+
+  /**
+   * Returns an array of unique randomly available tcp ports
+   * 
+   * @param count number of desired ports
+   * @param useMembershipPortRange whether to use the configured membership-port-range
+   * @return the ports
+   */
+  public static int[] getRandomAvailableTCPPorts(int count, boolean useMembershipPortRange) {
+    List<Keeper> list = getRandomAvailableTCPPortKeepers(count, useMembershipPortRange);
+
+    return getRandomAvailableTCPPortKeepers(count, false);
+  }
+  
+  public static List<Keeper> getRandomAvailableTCPPortKeepers(int count, boolean useMembershipPortRange) {
-      result.add(AvailablePort.getRandomAvailablePortKeeper(AvailablePort.SOCKET));
+      result.add(AvailablePort.getRandomAvailablePortKeeper(AvailablePort.SOCKET, 
+        AvailablePort.getAddress(AvailablePort.SOCKET), useMembershipPortRange));
