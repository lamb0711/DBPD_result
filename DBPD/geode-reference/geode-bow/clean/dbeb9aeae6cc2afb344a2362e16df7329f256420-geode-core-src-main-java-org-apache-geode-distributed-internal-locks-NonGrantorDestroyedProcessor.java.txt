Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import java.util.*;
+// import java.util.*;
-//import org.apache.geode.distributed.internal.DistributionAdvisor;
-//import org.apache.geode.distributed.internal.DistributionAdvisor.Profile;
+// import org.apache.geode.distributed.internal.DistributionAdvisor;
+// import org.apache.geode.distributed.internal.DistributionAdvisor.Profile;
- * A processor for telling the grantor that a lock service participant has
- * shutdown. The grantor should release all locks which are currently held
- * by the calling member.
+ * A processor for telling the grantor that a lock service participant has shutdown. The grantor
+ * should release all locks which are currently held by the calling member.
-  
+
-  
+
-   * Send a message to grantor telling him that we've shutdown the named lock 
-   * service for this member.
+   * Send a message to grantor telling him that we've shutdown the named lock service for this
+   * member.
-   * Caller should loop, getting the grantor, calling <code>send</code>, and 
-   * checking <code>informedGrantor()</code> until the grantor has acknowledged
-   * being informed.
+   * Caller should loop, getting the grantor, calling <code>send</code>, and checking
+   * <code>informedGrantor()</code> until the grantor has acknowledged being informed.
-    NonGrantorDestroyedProcessor processor = 
-        new NonGrantorDestroyedProcessor(dm, recipient);
+    NonGrantorDestroyedProcessor processor = new NonGrantorDestroyedProcessor(dm, recipient);
-    } 
-    catch (ReplyException e) {
+    } catch (ReplyException e) {
-  
-  ////////////  Instance methods //////////////
-  
+
+  //////////// Instance methods //////////////
+
-  
+
-      Assert.assertTrue(msg instanceof NonGrantorDestroyedReplyMessage, 
-          "NonGrantorDestroyedProcessor is unable to process message of type " +
-          msg.getClass());
+      Assert.assertTrue(msg instanceof NonGrantorDestroyedReplyMessage,
+          "NonGrantorDestroyedProcessor is unable to process message of type " + msg.getClass());
-    }
-    finally {
+    } finally {
-  
+
-  
+
-  
-  ///////////////   Inner message classes  //////////////////
-  
-  public static final class NonGrantorDestroyedMessage
-  extends PooledDistributionMessage implements MessageWithReply {
-    
+
+  /////////////// Inner message classes //////////////////
+
+  public static final class NonGrantorDestroyedMessage extends PooledDistributionMessage
+      implements MessageWithReply {
+
-    
+
-    
-    protected static void send(String serviceName,
-                             InternalDistributedMember grantor,
-                             DM dm, 
-                             ReplyProcessor21 proc) {
-      Assert.assertTrue(grantor != null, 
-          "Cannot send NonGrantorDestroyedMessage to null grantor");
-                               
+
+    protected static void send(String serviceName, InternalDistributedMember grantor, DM dm,
+        ReplyProcessor21 proc) {
+      Assert.assertTrue(grantor != null, "Cannot send NonGrantorDestroyedMessage to null grantor");
+
-      
+
-      
+
-      }
-      else {
+      } else {
-  
+
-    
+
-    
-    /** Process locally without using messaging  */
+
+    /** Process locally without using messaging */
-        DLockService svc = 
-            DLockService.getInternalServiceNamed(this.serviceName);
+        DLockService svc = DLockService.getInternalServiceNamed(this.serviceName);
-      }
-      catch (InterruptedException e) {
+      } catch (InterruptedException e) {
-          logger.trace(LogMarker.DLS, "Processing of NonGrantorDestroyedMessage resulted in InterruptedException", e);
+          logger.trace(LogMarker.DLS,
+              "Processing of NonGrantorDestroyedMessage resulted in InterruptedException", e);
-      }
-      catch (LockServiceDestroyedException e) {
+      } catch (LockServiceDestroyedException e) {
-          logger.trace(LogMarker.DLS, "Processing of NonGrantorDestroyedMessage resulted in LockServiceDestroyedException", e);
+          logger.trace(LogMarker.DLS,
+              "Processing of NonGrantorDestroyedMessage resulted in LockServiceDestroyedException",
+              e);
-      }
-      catch (LockGrantorDestroyedException e) {
+      } catch (LockGrantorDestroyedException e) {
-          logger.trace(LogMarker.DLS, "Processing of NonGrantorDestroyedMessage resulted in LockGrantorDestroyedException", e);
+          logger.trace(LogMarker.DLS,
+              "Processing of NonGrantorDestroyedMessage resulted in LockGrantorDestroyedException",
+              e);
-      }
-      finally {
+      } finally {
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-    
+
-      buff.append("NonGrantorDestroyedMessage (serviceName='")
-        .append(this.serviceName)
-        .append("' processorId=")
-        .append(this.processorId)
-        .append(")");
+      buff.append("NonGrantorDestroyedMessage (serviceName='").append(this.serviceName)
+          .append("' processorId=").append(this.processorId).append(")");
-  
+
-    
+
-    
+
-    public static void send(MessageWithReply destroyedMsg, byte replyCode, DM dm)
-    {
+    public static void send(MessageWithReply destroyedMsg, byte replyCode, DM dm) {
-      
+
-      }
-      else {
+      } else {
-    
+
-    
+
-        case OK:          s = "OK"; break;
-        case NOT_GRANTOR: s = "NOT_GRANTOR"; break;
-        default: s = "UNKNOWN:" + String.valueOf(replyCode); break;
+        case OK:
+          s = "OK";
+          break;
+        case NOT_GRANTOR:
+          s = "NOT_GRANTOR";
+          break;
+        default:
+          s = "UNKNOWN:" + String.valueOf(replyCode);
+          break;
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-      buff.append("NonGrantorDestroyedReplyMessage")
-        .append("; sender=")
-        .append(getSender())
-        .append("; processorId=")
-        .append(super.processorId)
-        .append("; replyCode=")
-        .append(replyCodeToString(this.replyCode))
-        .append(")");
+      buff.append("NonGrantorDestroyedReplyMessage").append("; sender=").append(getSender())
+          .append("; processorId=").append(super.processorId).append("; replyCode=")
+          .append(replyCodeToString(this.replyCode)).append(")");
