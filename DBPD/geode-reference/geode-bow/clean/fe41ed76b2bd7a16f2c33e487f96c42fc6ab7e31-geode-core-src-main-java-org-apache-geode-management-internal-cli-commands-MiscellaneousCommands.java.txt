GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import java.util.zip.DataFormatException;
+import java.util.zip.GZIPInputStream;
+
+import javax.management.ObjectName;
+
+import org.apache.logging.log4j.Logger;
+import org.springframework.shell.core.CommandMarker;
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
-import org.apache.geode.cache.Cache;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.internal.logging.log4j.LogLevel;
-import org.apache.geode.internal.logging.log4j.LogLevel;
-import org.apache.logging.log4j.Logger;
-import org.springframework.shell.core.CommandMarker;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import java.io.BufferedInputStream;
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.PrintWriter;
-import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-import java.util.zip.DataFormatException;
-import java.util.zip.GZIPInputStream;
-import javax.management.ObjectName;
+
+  private InternalCache getCache() {
+    return (InternalCache) CacheFactory.getAnyInstance();
+  }
-
-
-
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-      GemFireCacheImpl gemFireCache = (GemFireCacheImpl) cache;
-      String managerName =
-          gemFireCache.getJmxManagerAdvisor().getDistributionManager().getId().getId();
+      String managerName = cache.getJmxManagerAdvisor().getDistributionManager().getId().getId();
-
-    if (timeElapsed > timeout || Boolean.getBoolean("ThrowTimeoutException")) { // The second check
-      // for
-      // ThrowTimeoutException
-      // is a test hook
+    if (timeElapsed > timeout || Boolean.getBoolean("ThrowTimeoutException")) {
+      // The second check for ThrowTimeoutException is a test hook
-    Cache cache = CacheFactory.getAnyInstance();
+    InternalCache cache = getCache();
-      result = executeAndBuildResult(cache, resultTable, dsMembers);
+      result = executeAndBuildResult(resultTable, dsMembers);
-      result = executeAndBuildResult(cache, resultTable, dsMembers);
+      result = executeAndBuildResult(resultTable, dsMembers);
-      result = executeAndBuildResult(cache, resultTable, dsMembers);
+      result = executeAndBuildResult(resultTable, dsMembers);
-  Result executeAndBuildResult(Cache cache, TabularResultData resultTable,
-      Set<DistributedMember> dsMembers) {
+  Result executeAndBuildResult(TabularResultData resultTable, Set<DistributedMember> dsMembers) {
-
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-      Cache cache = CacheFactory.getAnyInstance();
+      InternalCache cache = getCache();
-
-
-  /****
+  /**
-   *
-   * @param memberNameOrId
-   * @return Stack Trace
-      Cache cache = CacheFactory.getAnyInstance();
-      GemFireCacheImpl gfeCacheImpl = (GemFireCacheImpl) cache;
-      InternalDistributedSystem ads = gfeCacheImpl.getSystem();
+      InternalCache cache = getCache();
+      InternalDistributedSystem ads = cache.getInternalDistributedSystem();
-
-  /****
+  /**
-   * @param export_to_report_to
-   * @throws Exception
-    final Cache cache = CacheFactory.getAnyInstance();
+    final InternalCache cache = getCache();
-
-  /***
+  /**
-   * @param distributedMember
-   * @param export_to_report_to
-    final Cache cache = CacheFactory.getAnyInstance();
+    final InternalCache cache = getCache();
-      /****
+      /*
-      /****
+      /*
-      /***
+      /*
-
-      /******
+      /*
-      /***
+      /*
-       *
-
-      /***
+      /*
-       *
-      /***
+      /*
-      /***
+      /*
-      /***
+      /*
-      /****
+      /*
-      /***
+      /*
-      /***
+      /*
-      /***
+      /*
-        /*****
+        /*
-        /***
+        /*
-
-  /****
+  /**
-   * @param regionName
-    final Cache cache = CacheFactory.getAnyInstance();
+    final InternalCache cache = getCache();
-      /***
+      /*
-
-      /*****
+      /*
-      /*****
+      /*
-      /****
+      /*
-  /***
+  /**
-   * @param regionName
-   * @param distributedMember
-   * @param export_to_report_to
-    final Cache cache = CacheFactory.getAnyInstance();
+    final InternalCache cache = getCache();
-      /****
+      /*
-        // writeToTableAndCsv(metricsTable, "", "averageBucketSize",
-        // regionMxBean.getAvgBucketSize(), csvBuilder);
-      /*****
+      /*
-      /*****
+      /*
-      /****
+      /*
-
-
-   *
-   * @param metricsTable
-   * @param type
-   * @param metricName
-   * @param metricValue
-   * @param csvBuilder
-  /***
-   *
-   * @param metricsTable
-   * @param type
-   * @param metricName
-   * @param metricValue
-   * @param csvBuilder
-   */
-  /****
+  /**
-  /****
+  /**
-  /****
+  /**
-  /*****
+  /**
-  /***
+  /**
-   * @param names
-   * @param startIndex
-  /***
+  /**
-   *
-   * @param metricsTable
-   * @param type
-   * @param metricName
-   * @param metricValue
-   * @param csvBuilder
-
-      Cache cache = GemFireCacheImpl.getInstance();
+      InternalCache cache = GemFireCacheImpl.getInstance();
-
