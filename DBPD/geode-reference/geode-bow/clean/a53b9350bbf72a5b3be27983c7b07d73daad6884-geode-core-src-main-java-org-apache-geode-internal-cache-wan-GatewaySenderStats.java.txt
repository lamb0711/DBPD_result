GEODE-4624: add a stats to trace total event removed by PQRM (#1850)


-  /** Name of the event secondary queue size statistic */
-  protected static final String EVENT_SECONDARY_QUEUE_SIZE = "eventSecondaryQueueSize";
+  /** Name of the secondary event queue size statistic */
+  protected static final String SECONDARY_EVENT_QUEUE_SIZE = "secondaryEventQueueSize";
+  /** Total number of events processed by queue removal message statistic */
+  protected static final String EVENTS_PROCESSED_BY_PQRM = "eventsProcessedByPQRM";
-  protected static int eventSecondaryQueueSizeId;
+  protected static int secondaryEventQueueSizeId;
+  /** Id of the events processed by Parallel Queue Removal Message(PQRM) statistic */
+  protected static int eventsProcessedByPQRMId;
-            f.createIntGauge(EVENT_SECONDARY_QUEUE_SIZE, "Size of secondary event queue.",
+            f.createIntGauge(SECONDARY_EVENT_QUEUE_SIZE, "Size of secondary event queue.",
+                "operations", false),
+            f.createIntGauge(EVENTS_PROCESSED_BY_PQRM,
+                "Total number of events processed by Parallel Queue Removal Message(PQRM).",
-    eventSecondaryQueueSizeId = type.nameToId(EVENT_SECONDARY_QUEUE_SIZE);
+    secondaryEventQueueSizeId = type.nameToId(SECONDARY_EVENT_QUEUE_SIZE);
+    eventsProcessedByPQRMId = type.nameToId(EVENTS_PROCESSED_BY_PQRM);
-   * Returns the current value of the "eventSecondaryQueueSize" stat.
+   * Returns the current value of the "secondaryEventQueueSize" stat.
-   * @return the current value of the "eventSecondaryQueueSize" stat
+   * @return the current value of the "secondaryEventQueueSize" stat
-  public int getEventSecondaryQueueSize() {
-    return this.stats.getInt(eventSecondaryQueueSizeId);
+  public int getSecondaryEventQueueSize() {
+    return this.stats.getInt(secondaryEventQueueSizeId);
+  }
+
+  /**
+   * Returns the current value of the "eventsProcessedByPQRM" stat.
+   *
+   * @return the current value of the "eventsProcessedByPQRM" stat
+   */
+  public int getEventsProcessedByPQRM() {
+    return this.stats.getInt(eventsProcessedByPQRMId);
-   * Sets the "eventSecondaryQueueSize" stat.
+   * Sets the "secondaryEventQueueSize" stat.
-    this.stats.setInt(eventSecondaryQueueSizeId, size);
+    this.stats.setInt(secondaryEventQueueSizeId, size);
+  }
+
+  /**
+   * Sets the "eventsProcessedByPQRM" stat.
+   *
+   * @param size The total number of the events processed by queue removal message
+   */
+  public void setEventsProcessedByPQRM(int size) {
+    this.stats.setInt(eventsProcessedByPQRMId, size);
-   * Increments the "eventSecondaryQueueSize" stat by 1.
+   * Increments the "secondaryEventQueueSize" stat by 1.
-    this.stats.incInt(eventSecondaryQueueSizeId, 1);
-    assert this.stats.getInt(eventSecondaryQueueSizeId) >= 0;
+    this.stats.incInt(secondaryEventQueueSizeId, 1);
-   * Increments the "eventSecondaryQueueSize" stat by given delta.
+   * Increments the "secondaryEventQueueSize" stat by given delta.
-   * @param delta an integer by which secondary queue size to be increased
+   * @param delta an integer by which secondary event queue size to be increased
-    this.stats.incInt(eventSecondaryQueueSizeId, delta);
-    assert this.stats.getInt(eventSecondaryQueueSizeId) >= 0;
+    this.stats.incInt(secondaryEventQueueSizeId, delta);
+  }
+
+  /**
+   * Increments the "eventsProcessedByPQRM" stat by given delta.
+   *
+   * @param delta an integer by which events are processed by queue removal message
+   */
+  public void incEventsProcessedByPQRM(int delta) {
+    this.stats.incInt(eventsProcessedByPQRMId, delta);
-   * Decrements the "eventSecondaryQueueSize" stat by 1.
+   * Decrements the "secondaryEventQueueSize" stat by 1.
-    this.stats.incInt(eventSecondaryQueueSizeId, -1);
-    assert this.stats.getInt(eventSecondaryQueueSizeId) >= 0;
+    this.stats.incInt(secondaryEventQueueSizeId, -1);
-   * Decrements the "eventSecondaryQueueSize" stat by given delta.
+   * Decrements the "secondaryEventQueueSize" stat by given delta.
-    this.stats.incInt(eventSecondaryQueueSizeId, -delta);
-    assert this.stats.getInt(eventSecondaryQueueSizeId) >= 0;
+    this.stats.incInt(secondaryEventQueueSizeId, -delta);
