GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)

Changing all classes in Membership to be parameterized by an ID type,
which extends MemberIdentifier. This allows core to create a membership
system that manages InternalDistributedMember objects in a type safe
way.

Removing all uses of InternalDistributedMember, DistributedMember, and
friends from within the membership code.

+import org.apache.geode.annotations.Immutable;
-import org.apache.geode.distributed.internal.membership.MembershipView;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipView;
+
+  @Immutable
+  public static final InternalDistributedMember[] EMPTY_MEMBER_ARRAY =
+      new InternalDistributedMember[0];
-  private final Membership membership;
+  private final Membership<InternalDistributedMember> membership;
-      final MembershipListener listener,
-      final MessageListener messageListener) {
+      final MembershipListener<InternalDistributedMember> listener,
+      final MessageListener<InternalDistributedMember> messageListener) {
-    membership = MembershipBuilder.newMembershipBuilder()
+    membership = MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()
-  public static void connectLocatorToServices(Membership membership) {
+  public static void connectLocatorToServices(Membership<InternalDistributedMember> membership) {
-  public Membership getMembership() {
+  public Membership<InternalDistributedMember> getMembership() {
-      Membership membership) {
+      Membership<InternalDistributedMember> membership) {
-      org.apache.geode.distributed.internal.membership.gms.api.MembershipListener listener,
-      MessageListener messageListener) {
+      MembershipListener<InternalDistributedMember> listener,
+      MessageListener<InternalDistributedMember> messageListener) {
-  public MembershipView getView() {
+  public MembershipView<InternalDistributedMember> getView() {
-      keys = membership.getAllMembers();
+      keys = membership.getAllMembers(EMPTY_MEMBER_ARRAY);
-      Iterator it_mem = members.iterator();
-      Iterator it_causes = ex.getCauses().iterator();
+      Iterator<InternalDistributedMember> it_mem = members.iterator();
+      Iterator<Throwable> it_causes = ex.getCauses().iterator();
-        InternalDistributedMember member = (InternalDistributedMember) it_mem.next();
-        Throwable th = (Throwable) it_causes.next();
+        InternalDistributedMember member = it_mem.next();
+        Throwable th = it_causes.next();
-    return membership.getMessageState(member, includeMulticast, result);
+    return membership.getMessageState((InternalDistributedMember) member, includeMulticast, result);
-  public void waitForMessageState(DistributedMember member,
+  public void waitForMessageState(InternalDistributedMember member,
-      waitForSerialMessageProcessing((InternalDistributedMember) member);
+      waitForSerialMessageProcessing(member);
-  public boolean requestMemberRemoval(DistributedMember member,
-      String reason) {
+  public boolean requestMemberRemoval(InternalDistributedMember member, String reason) {
-  public boolean verifyMember(DistributedMember mbr,
-      String reason) {
+  public boolean verifyMember(InternalDistributedMember mbr, String reason) {
-  public boolean isShunned(DistributedMember m) {
-    return membership.isShunned(m);
-  }
-
-  @Override
-  public boolean memberExists(DistributedMember m) {
+  public boolean memberExists(InternalDistributedMember m) {
-  public void shutdownMessageReceived(DistributedMember id,
+  public void shutdownMessageReceived(InternalDistributedMember id,
-  public void addSurpriseMemberForTesting(DistributedMember mbr,
+  public void addSurpriseMemberForTesting(InternalDistributedMember mbr,
-  public void suspectMembers(Set<DistributedMember> members,
+  public void suspectMembers(Set<InternalDistributedMember> members,
-  public void suspectMember(DistributedMember member,
+  public void suspectMember(InternalDistributedMember member,
-  public boolean addSurpriseMember(DistributedMember mbr) {
+  public boolean addSurpriseMember(InternalDistributedMember mbr) {
-  public void startupMessageFailed(DistributedMember mbr,
+  public void startupMessageFailed(InternalDistributedMember mbr,
-  public boolean isSurpriseMember(DistributedMember m) {
+  public boolean isSurpriseMember(InternalDistributedMember m) {
-  public boolean waitForDeparture(DistributedMember mbr)
+  public boolean waitForDeparture(InternalDistributedMember mbr)
-  public boolean waitForDeparture(DistributedMember mbr, long timeoutMs)
+  public boolean waitForDeparture(InternalDistributedMember mbr, long timeoutMs)
-    InternalDistributedMember idm = (InternalDistributedMember) mbr;
+    InternalDistributedMember idm = mbr;
-  class MyDCReceiver implements MessageListener {
+  class MyDCReceiver implements MessageListener<InternalDistributedMember> {
-    public void messageReceived(Message msg) {
+    public void messageReceived(Message<InternalDistributedMember> msg) {
-  public static class LifecycleListenerImpl implements LifecycleListener {
+  private static class LifecycleListenerImpl
+      implements LifecycleListener<InternalDistributedMember> {
-    public LifecycleListenerImpl(final DistributionImpl distribution) {
+    LifecycleListenerImpl(final DistributionImpl distribution) {
-    public void start(final MemberIdentifier memberID) {
+    public void start(final InternalDistributedMember memberID) {
