Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class PrepareNewPersistentMemberMessage extends
-    HighPriorityDistributionMessage implements MessageWithReply {
+public class PrepareNewPersistentMemberMessage extends HighPriorityDistributionMessage
+    implements MessageWithReply {
-  
+
-    
+
-  
-  public PrepareNewPersistentMemberMessage(String regionPath, PersistentMemberID oldId, PersistentMemberID newId, int processorId) {
+
+  public PrepareNewPersistentMemberMessage(String regionPath, PersistentMemberID oldId,
+      PersistentMemberID newId, int processorId) {
-  public static void send(
-      Set<InternalDistributedMember> members, DM dm, String regionPath,
+  public static void send(Set<InternalDistributedMember> members, DM dm, String regionPath,
-    PrepareNewPersistentMemberMessage msg = new PrepareNewPersistentMemberMessage(regionPath, oldId, newId, processor.getProcessorId());
+    PrepareNewPersistentMemberMessage msg =
+        new PrepareNewPersistentMemberMessage(regionPath, oldId, newId, processor.getProcessorId());
-    int oldLevel =         // Set thread local flag to allow entrance through initialization Latch
-      LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
+    int oldLevel = // Set thread local flag to allow entrance through initialization Latch
+        LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
-      if(region instanceof DistributedRegion) {
+      if (region instanceof DistributedRegion) {
-      } else if ( region == null) {
-        Bucket proxy = PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(), this.regionPath, false);
-        if(proxy != null) {
+      } else if (region == null) {
+        Bucket proxy = PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(),
+            this.regionPath, false);
+        if (proxy != null) {
-      
-      if(persistenceAdvisor != null) {
+
+      if (persistenceAdvisor != null) {
-      
+
-    }
-    catch (CancelException e) {
+    } catch (CancelException e) {
-    }
-    catch(VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch(Throwable t) {
+    } catch (Throwable t) {
-    }
-    finally {
+    } finally {
-      if(exception != null) {
+      if (exception != null) {
-  
+
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    if(hasOldId) {
+    if (hasOldId) {
-    if(oldId != null) {
+    if (oldId != null) {
