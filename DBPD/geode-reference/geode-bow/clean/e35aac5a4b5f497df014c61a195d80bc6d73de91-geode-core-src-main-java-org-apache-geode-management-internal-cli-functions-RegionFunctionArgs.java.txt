Merge branch 'release/1.5.0'

+import org.apache.geode.cache.CacheListener;
+import org.apache.geode.cache.CacheLoader;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.CustomExpiry;
+import org.apache.geode.management.internal.cli.domain.ClassName;
-  private static final long serialVersionUID = 2204943186081037301L;
+  private static final long serialVersionUID = 2204943186081037302L;
-  private boolean skipIfExists;
+  private boolean ifNotExists;
-  private RegionFunctionArgs.ExpirationAttrs entryExpirationIdleTime;
-  private RegionFunctionArgs.ExpirationAttrs entryExpirationTTL;
-  private RegionFunctionArgs.ExpirationAttrs regionExpirationIdleTime;
-  private RegionFunctionArgs.ExpirationAttrs regionExpirationTTL;
-  private RegionFunctionArgs.EvictionAttrs evictionAttributes;
+  private ExpirationAttrs entryExpirationIdleTime;
+  private ExpirationAttrs entryExpirationTTL;
+  private ClassName<CustomExpiry> entryIdleTimeCustomExpiry;
+  private ClassName<CustomExpiry> entryTTLCustomExpiry;
+  private ExpirationAttrs regionExpirationIdleTime;
+  private ExpirationAttrs regionExpirationTTL;
+  private EvictionAttrs evictionAttributes;
-  private Set<String> cacheListeners = Collections.emptySet();
-  private String cacheLoader;
-  private String cacheWriter;
+  private Set<ClassName<CacheListener>> cacheListeners = Collections.emptySet();
+  private ClassName<CacheLoader> cacheLoader;
+  private ClassName<CacheWriter> cacheWriter;
-  public void setSkipIfExists(boolean skipIfExists) {
-    this.skipIfExists = skipIfExists;
+  public void setIfNotExists(boolean ifNotExists) {
+    this.ifNotExists = ifNotExists;
-  public void setEntryExpirationIdleTime(Integer timeout, String action) {
-    if (timeout != null) {
-      this.entryExpirationIdleTime = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_IDLE, timeout, action);
-    }
+  public void setEntryExpirationIdleTime(Integer timeout, ExpirationAction action) {
+    this.entryExpirationIdleTime = new ExpirationAttrs(timeout, action);
-  public void setEntryExpirationTTL(Integer timeout, String action) {
-    if (timeout != null) {
-      this.entryExpirationTTL = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.ENTRY_TTL, timeout, action);
-    }
+  public void setEntryExpirationTTL(Integer timeout, ExpirationAction action) {
+    this.entryExpirationTTL = new ExpirationAttrs(timeout, action);
-  public void setRegionExpirationIdleTime(Integer timeout, String action) {
-    if (timeout != null) {
-      this.regionExpirationIdleTime = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_IDLE, timeout, action);
-    }
+  public void setRegionExpirationIdleTime(Integer timeout, ExpirationAction action) {
+    this.regionExpirationIdleTime = new ExpirationAttrs(timeout, action);
-  public void setRegionExpirationTTL(Integer timeout, String action) {
-    if (timeout != null) {
-      this.regionExpirationTTL = new ExpirationAttrs(
-          RegionFunctionArgs.ExpirationAttrs.ExpirationFor.REGION_TTL, timeout, action);
-    }
+  public void setRegionExpirationTTL(Integer timeout, ExpirationAction action) {
+    this.regionExpirationTTL = new ExpirationAttrs(timeout, action);
-  public void setCacheListeners(String[] cacheListeners) {
+  public void setCacheListeners(ClassName<CacheListener>[] cacheListeners) {
-  public void setCacheLoader(String cacheLoader) {
+  public void setCacheLoader(ClassName<CacheLoader> cacheLoader) {
-  public void setCacheWriter(String cacheWriter) {
+  public void setCacheWriter(ClassName<CacheWriter> cacheWriter) {
-   * @return the skipIfExists
+   * @return the ifNotExists
-  public Boolean isSkipIfExists() {
-    return this.skipIfExists;
+  public Boolean isIfNotExists() {
+    return this.ifNotExists;
-  public RegionFunctionArgs.ExpirationAttrs getEntryExpirationIdleTime() {
+  public ExpirationAttrs getEntryExpirationIdleTime() {
-  public RegionFunctionArgs.ExpirationAttrs getEntryExpirationTTL() {
+  public ExpirationAttrs getEntryExpirationTTL() {
-  public RegionFunctionArgs.ExpirationAttrs getRegionExpirationIdleTime() {
+  public ExpirationAttrs getRegionExpirationIdleTime() {
-  public RegionFunctionArgs.ExpirationAttrs getRegionExpirationTTL() {
+  public ExpirationAttrs getRegionExpirationTTL() {
-  public Set<String> getCacheListeners() {
+  public Set<ClassName<CacheListener>> getCacheListeners() {
-  public String getCacheLoader() {
+  public ClassName<CacheLoader> getCacheLoader() {
-  public String getCacheWriter() {
+  public ClassName<CacheWriter> getCacheWriter() {
+  public ClassName<CustomExpiry> getEntryIdleTimeCustomExpiry() {
+    return entryIdleTimeCustomExpiry;
+  }
+
+  public void setEntryIdleTimeCustomExpiry(ClassName<CustomExpiry> entryIdleTimeCustomExpiry) {
+    this.entryIdleTimeCustomExpiry = entryIdleTimeCustomExpiry;
+  }
+
+  public ClassName<CustomExpiry> getEntryTTLCustomExpiry() {
+    return entryTTLCustomExpiry;
+  }
+
+  public void setEntryTTLCustomExpiry(ClassName<CustomExpiry> entryTTLCustomExpiry) {
+    this.entryTTLCustomExpiry = entryTTLCustomExpiry;
+  }
+
+  /**
+   * the difference between this and ExpirationAttributes is that this allows time and action to be
+   * null
+   */
-    private static final long serialVersionUID = 1474255033398008062L;
+    private static final long serialVersionUID = 1474255033398008063L;
-    private final ExpirationFor type;
-    private final ExpirationAttributes timeAndAction;
+    private final Integer time;
+    private final ExpirationAction action;
-    public ExpirationAttrs(ExpirationFor type, Integer time, String action) {
-      this.type = type;
-      if (time != null) {
-        this.timeAndAction = new ExpirationAttributes(time, getExpirationAction(action));
-      } else {
-        this.timeAndAction = new ExpirationAttributes(0, getExpirationAction(action));
-      }
+    public ExpirationAttrs(Integer time, ExpirationAction action) {
+      this.time = time;
+      this.action = action;
-    public ExpirationAttributes convertToExpirationAttributes() {
-      return timeAndAction;
-    }
-
-    /**
-     * @return the type
-     */
-    public ExpirationFor getType() {
-      return type;
-    }
-
-    /**
-     * @return the time
-     */
-      return timeAndAction.getTimeout();
+      return time;
-    /**
-     * @return the action
-     */
-      return timeAndAction.getAction();
+      return action;
-    public String toString() {
-      StringBuilder builder = new StringBuilder();
-      builder.append(ExpirationAttrs.class.getSimpleName() + " [type=");
-      builder.append(type);
-      builder.append(", time=");
-      builder.append(timeAndAction.getTimeout());
-      builder.append(", action=");
-      builder.append(timeAndAction.getAction());
-      builder.append("]");
-      return builder.toString();
+    public boolean equals(Object object) {
+      if (object == null) {
+        return false;
+      }
+
+      if (!(object instanceof ExpirationAttrs)) {
+        return false;
+      }
+
+      ExpirationAttrs that = (ExpirationAttrs) object;
+      return time == that.time && action == that.action;
-    private static ExpirationAction getExpirationAction(String action) {
-      if (action == null) {
-        return ExpirationAttributes.DEFAULT.getAction();
-      }
-      action = action.replace('-', '_');
-      if (action.equalsIgnoreCase(ExpirationAction.DESTROY.toString())) {
-        return ExpirationAction.DESTROY;
-      } else if (action.equalsIgnoreCase(ExpirationAction.INVALIDATE.toString())) {
-        return ExpirationAction.INVALIDATE;
-      } else if (action.equalsIgnoreCase(ExpirationAction.LOCAL_DESTROY.toString())) {
-        return ExpirationAction.LOCAL_DESTROY;
-      } else if (action.equalsIgnoreCase(ExpirationAction.LOCAL_INVALIDATE.toString())) {
-        return ExpirationAction.LOCAL_INVALIDATE;
-      } else {
-        throw new IllegalArgumentException(
-            CliStrings.format(CliStrings.CREATE_REGION__MSG__EXPIRATION_ACTION_0_IS_NOT_VALID,
-                new Object[] {action}));
-      }
+    public boolean isTimeSet() {
+      return time != null;
-    public enum ExpirationFor {
-      REGION_IDLE, REGION_TTL, ENTRY_IDLE, ENTRY_TTL
+    public boolean isTimeOrActionSet() {
+      return time != null || action != null;
+    }
+
+    public ExpirationAttributes getExpirationAttributes() {
+      return getExpirationAttributes(null);
+    }
+
+    public ExpirationAttributes getExpirationAttributes(ExpirationAttributes existing) {
+      // default values
+      int timeToUse = 0;
+      ExpirationAction actionToUse = ExpirationAction.INVALIDATE;
+
+      if (existing != null) {
+        timeToUse = existing.getTimeout();
+        actionToUse = existing.getAction();
+      }
+      if (time != null) {
+        timeToUse = time;
+      }
+
+      if (action != null) {
+        actionToUse = action;
+      }
+      return new ExpirationAttributes(timeToUse, actionToUse);
