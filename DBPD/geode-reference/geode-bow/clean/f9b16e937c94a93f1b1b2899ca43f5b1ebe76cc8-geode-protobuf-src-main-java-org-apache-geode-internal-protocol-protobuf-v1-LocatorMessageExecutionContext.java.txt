GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

+import org.apache.geode.internal.protocol.protobuf.v1.authentication.Authorizer;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingCache;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingLocator;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingLocatorImpl;
+  private AuthorizingLocator authorizingLocator;
-      ProtobufConnectionStateProcessor initialProtobufConnectionStateProcessor) {
+      ProtobufConnectionStateProcessor initialProtobufConnectionStateProcessor,
+      Authorizer authorizer) {
+    this.authorizingLocator = new AuthorizingLocatorImpl(locator, authorizer);
-  /**
-   * Returns the cache associated with this execution
-   * <p>
-   *
-   * @throws InvalidExecutionContextException if there is no cache available
-   */
-  public InternalCache getCache() throws InvalidExecutionContextException {
+  public AuthorizingCache getAuthorizingCache() throws InvalidExecutionContextException {
-  /**
-   * Returns the locator associated with this execution
-   * <p>
-   *
-   * @throws InvalidExecutionContextException if there is no locator available
-   */
-  public Locator getLocator() throws InvalidExecutionContextException {
-    return locator;
+  public AuthorizingLocator getAuthorizingLocator() throws InvalidExecutionContextException {
+    return authorizingLocator;
+  }
+
+  @Override
+  public void setAuthorizer(Authorizer authorizer) {
+    this.authorizingLocator = new AuthorizingLocatorImpl(locator, authorizer);
