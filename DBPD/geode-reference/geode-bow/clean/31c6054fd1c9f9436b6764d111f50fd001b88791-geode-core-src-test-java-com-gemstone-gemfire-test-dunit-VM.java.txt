Merge branch 'develop' into feature/GEODE-17-2

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/LauncherLifecycleCommandsDUnitTest.java
#	geode-assembly/src/test/java/com/gemstone/gemfire/management/internal/configuration/SharedConfigurationEndToEndDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/CliCommandTestBase.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ConfigCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/CreateAlterDestroyRegionCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/DeployCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/DiskStoreCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/DiskStoreCommandsJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/FunctionCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/GemfireDataCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/GetCommandOnRegionWithCacheLoaderDuringCacheMissDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/IndexCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ListAndDescribeDiskStoreCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ListAndDescribeRegionDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ListIndexCommandDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsExportLogsPart1DUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsExportLogsPart2DUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsExportLogsPart3DUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/MiscellaneousCommandsExportLogsPart4DUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/QueueCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/SharedConfigurationCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ShellCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ShowMetricsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ShowStackTraceDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/UserCommandsDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/test/dunit/VM.java
#	geode-core/src/test/java/com/gemstone/gemfire/test/dunit/tests/BasicDUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/test/dunit/tests/JUnit4OverridingGetPropertiesDisconnectsAllDUnitTest.java
#	geode-cq/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/ClientCommandsDUnitTest.java
#	geode-cq/src/test/java/com/gemstone/gemfire/management/internal/cli/commands/DurableClientCommandsDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WANCommandTestBase.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandCreateGatewayReceiverDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandCreateGatewaySenderDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandGatewayReceiverStartDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandGatewayReceiverStopDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandGatewaySenderStartDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandGatewaySenderStopDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandListDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandPauseResumeDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/internal/cache/wan/wancommand/WanCommandStatusDUnitTest.java
#	geode-wan/src/test/java/com/gemstone/gemfire/management/internal/configuration/ClusterConfigurationDUnitTest.java

-   * Creates a new {@code VM} that runs on a given host with a given process 
+   * Creates a new {@code VM} that runs on a given host with a given process
-   * 
+   *
-   * Invokes a static zero-arg method  with an {@link Object} or {@code void} 
+   * Invokes a static zero-arg method  with an {@link Object} or {@code void}
-   *         
+   *
-   *         
-   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead        
+   *
+   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead
-   *         
-   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead       
+   *
+   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead
-   *         
+   *
-   *         
-   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead        
+   *
+   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead
-      throw new RMIException(this, targetClass.getName(), methodName, result.getException(), result.getStackTrace()); 
+      throw new RMIException(this, targetClass.getName(), methodName, result.getException(), result.getStackTrace());
-   * Asynchronously invokes an instance method with an {@link Object} or 
+   * Asynchronously invokes an instance method with an {@link Object} or
-   *         
+   *
-   *         
+   *
-   * Invokes the {@code run} method of a {@link Runnable} in this VM.  Recall 
-   * that {@code run} takes no arguments and has no return value.  The 
-   * {@code Runnable} is wrapped in a {@link NamedRunnable} having the given 
+   * Invokes the {@code run} method of a {@link Runnable} in this VM.  Recall
+   * that {@code run} takes no arguments and has no return value.  The
+   * {@code Runnable} is wrapped in a {@link NamedRunnable} having the given
-   * @param  name 
-   *         The name of the {@code Runnable}, which will be logged in DUnit 
+   * @param  name
+   *         The name of the {@code Runnable}, which will be logged in DUnit
-   * Invokes the {@code call} method of a {@link Callable} in this {@code VM}.  
+   * Invokes the {@code call} method of a {@link Callable} in this {@code VM}.
-   * @param  name 
-   *         The name of the {@code Callable}, which will be logged in dunit 
+   * @param  name
+   *         The name of the {@code Callable}, which will be logged in dunit
-   * @param  name 
-   *         The name of the {@code Runnable}, which will be logged in DUnit 
+   * @param  name
+   *         The name of the {@code Runnable}, which will be logged in DUnit
-   * @param  name 
-   *         The name of the {@code Callable}, which will be logged in DUnit 
+   * @param  name
+   *         The name of the {@code Callable}, which will be logged in DUnit
-   * Invokes the {@code call} method of a {@link Callable} in this {@code VM}. 
+   * Invokes the {@code call} method of a {@link Callable} in this {@code VM}.
-   * Invokes an instance method with no arguments on an object that is 
+   * Invokes an instance method with no arguments on an object that is
-   *         
-   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead.        
+   *
+   * @deprecated Please use {@link #invoke(SerializableCallableIF)} instead.
-      try {
-        return this.client.executeMethodOnClass(targetClass.getName(), methodName, args);
-      } catch (RemoteException e) {
-        throw new RMIException(this, targetClass.getName(), methodName, e );
-      }
+    try {
+      return this.client.executeMethodOnClass(targetClass.getName(), methodName, args);
+    } catch (RemoteException exception) {
+      throw new RMIException(this, targetClass.getName(), methodName, exception);
+    }
-      try {
-        if (args == null) {
-          return this.client.executeMethodOnObject(targetObject, methodName);
-        } else {
-          return this.client.executeMethodOnObject(targetObject, methodName, args);
-        }
-      } catch (RemoteException e) {
-        throw new RMIException(this, targetObject.getClass().getName(), methodName, e );
+    try {
+      if (args == null) {
+        return this.client.executeMethodOnObject(targetObject, methodName);
+      } else {
+        return this.client.executeMethodOnObject(targetObject, methodName, args);
+    } catch (RemoteException exception) {
+      throw new RMIException(this, targetObject.getClass().getName(), methodName, exception);
+    }
