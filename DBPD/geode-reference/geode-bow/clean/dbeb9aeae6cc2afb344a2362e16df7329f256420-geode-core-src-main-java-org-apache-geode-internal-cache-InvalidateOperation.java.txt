Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- *  
+ * 
-public class InvalidateOperation extends DistributedCacheOperation
-{
+public class InvalidateOperation extends DistributedCacheOperation {
-  protected CacheOperationMessage createMessage()
-  {
+  protected CacheOperationMessage createMessage() {
-      msgwithContxt.context = ((EntryEventImpl)this.event).getContext();
+      msgwithContxt.context = ((EntryEventImpl) this.event).getContext();
-    }
-    else {
+    } else {
-  protected void initMessage(CacheOperationMessage msg,
-      DirectReplyProcessor processor)
-  {
+  protected void initMessage(CacheOperationMessage msg, DirectReplyProcessor processor) {
-    InvalidateMessage imsg = (InvalidateMessage)msg;
-    EntryEventImpl eei = (EntryEventImpl)this.event;
+    InvalidateMessage imsg = (InvalidateMessage) msg;
+    EntryEventImpl eei = (EntryEventImpl) this.event;
-  public static class InvalidateMessage extends CacheOperationMessage
-  {
+  public static class InvalidateMessage extends CacheOperationMessage {
-        throws EntryNotFoundException
-    {
-      EntryEventImpl ev = (EntryEventImpl)event;
-      DistributedRegion rgn = (DistributedRegion)ev.region;
+        throws EntryNotFoundException {
+      EntryEventImpl ev = (EntryEventImpl) event;
+      DistributedRegion rgn = (DistributedRegion) ev.region;
-          && (!rgn.isInitialized() || rgn.getConcurrencyChecksEnabled());
+              && (!rgn.isInitialized() || rgn.getConcurrencyChecksEnabled());
-    protected InternalCacheEvent createEvent(DistributedRegion rgn)
-        throws EntryNotFoundException {
-      @Retained EntryEventImpl ev = EntryEventImpl.create(
-         rgn, getOperation(), this.key,
-         null, this.callbackArg, true, getSender());
+    protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {
+      @Retained
+      EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key, null,
+          this.callbackArg, true, getSender());
-        ev.setLocalFilterInfo(this.filterRouting
-            .getFilterInfo(rgn.getMyId()));
+        ev.setLocalFilterInfo(this.filterRouting.getFilterInfo(rgn.getMyId()));
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.eventId = (EventID)DataSerializer.readObject(in);
+      this.eventId = (EventID) DataSerializer.readObject(in);
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
-    public List getOperations()
-    {
+    public List getOperations() {
-      QueuedOperation qOp = new QueuedOperation(getOperation(),
-                                                this.key,
-                                                null,
-                                                null,
-                                                deserializationPolicy,
-                                                this.callbackArg);
+      QueuedOperation qOp = new QueuedOperation(getOperation(), this.key, null, null,
+          deserializationPolicy, this.callbackArg);
-    public ConflationKey getConflationKey()
-    {
+    public ConflationKey getConflationKey() {
-      }
-      else {
+      } else {
-  
-  public static final class InvalidateWithContextMessage extends InvalidateMessage
-  {
+
+  public static final class InvalidateWithContextMessage extends InvalidateMessage {
-    protected InternalCacheEvent createEvent(DistributedRegion rgn)
-      throws EntryNotFoundException  {
-      EntryEventImpl event = (EntryEventImpl)super.createEvent(rgn);
+    protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {
+      EntryEventImpl event = (EntryEventImpl) super.createEvent(rgn);
-    protected void appendFields(StringBuilder buff)
-    {
+    protected void appendFields(StringBuilder buff) {
-    
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException
-    {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public void toData(DataOutput out) throws IOException
-    {
+    public void toData(DataOutput out) throws IOException {
