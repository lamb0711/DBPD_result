GEODE-7363: Add member type common tag

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Mark Hanson <mhanson@pivotal.io>

+import java.util.function.BooleanSupplier;
+import org.apache.geode.distributed.Locator;
+import org.apache.geode.distributed.ServerLauncher;
-        InternalDistributedSystem system,
-        boolean isClient);
+        InternalDistributedSystem system, boolean isClient, boolean hasLocator,
+        boolean hasCacheServer);
-      InternalDistributedSystem system, boolean isClient) {
+      InternalDistributedSystem system, boolean isClient, boolean hasLocator,
+      boolean hasCacheServer) {
-    meterRegistry.config().commonTags(commonTags(system, isClient));
+    addCommonTags(system, isClient, hasLocator, hasCacheServer);
-  private static Set<Tag> commonTags(InternalDistributedSystem system, boolean isClient) {
-    Set<Tag> commonTags = new HashSet<>();
-
-    if (!isClient) {
-      String systemId = String.valueOf(system.getConfig().getDistributedSystemId());
-      commonTags.add(Tag.of("cluster", systemId));
-    }
+  private void addCommonTags(InternalDistributedSystem system, boolean isClient,
+      boolean hasLocators, boolean hasCacheServer) {
+    int clusterId = system.getConfig().getDistributedSystemId();
-    requireNonNull(memberName);
-    if (!memberName.isEmpty()) {
-      commonTags.add(Tag.of("member", memberName));
-    }
-
-    requireNonNull(hostName);
+
+    requireNonNull(memberName, "Member Name is null.");
+    requireNonNull(hostName, "Host Name is null.");
-    commonTags.add(Tag.of("host", hostName));
-    return commonTags;
+    Set<Tag> tags = new HashSet<>();
+
+    if (!isClient) {
+      tags.add(Tag.of("cluster", String.valueOf(clusterId)));
+
+    }
+
+    if (!memberName.isEmpty()) {
+      tags.add(Tag.of("member", memberName));
+    }
+
+    tags.add(Tag.of("host", hostName));
+    tags.add(Tag.of("member.type", memberTypeFor(hasLocators, hasCacheServer)));
+    meterRegistry.config().commonTags(tags);
+  }
+
+  private static String memberTypeFor(boolean hasLocator, boolean hasCacheServer) {
+    if (hasCacheServer && hasLocator) {
+      return "server-locator";
+    }
+
+    if (hasCacheServer) {
+      return "server";
+    }
+
+    if (hasLocator) {
+      return "locator";
+    }
+
+    return "embedded-cache";
+    private BooleanSupplier hasLocator = Locator::hasLocator;
+    private BooleanSupplier hasCacheServer = () -> ServerLauncher.getInstance() != null;
-          system, isClient);
+          system, isClient, hasLocator.getAsBoolean(), hasCacheServer.getAsBoolean());
+    Builder setCacheServerDetector(BooleanSupplier hasCacheServer) {
+      this.hasCacheServer = hasCacheServer;
+      return this;
+    }
+
+    @VisibleForTesting
+    Builder setLocatorDetector(BooleanSupplier hasLocator) {
+      this.hasLocator = hasLocator;
+      return this;
+    }
+
+    @VisibleForTesting
