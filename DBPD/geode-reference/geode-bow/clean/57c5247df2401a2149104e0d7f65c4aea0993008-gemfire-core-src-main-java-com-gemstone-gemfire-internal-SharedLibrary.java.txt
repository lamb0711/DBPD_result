GEODE-214: improve Azul support

- isTenured now looks for "GenPauseless Old Gen" for azul.
- Azul jvm version no longer logged as unsupported.
- Fatal log message about jvm version not being supported
  is now a warning since we continue to run.
- Fixed a bug in ReflectionSingleObjectSizer in how it calculated
  the size of a field. It was calling Field.getClass instead of Field.getType.
  Field.getClass always returns an instance of Field.class which the sizer
  always says is an objref size. getType will return a primitive class
  for primitive fields which is what we want.
- Improved ObjectSizerJUnitTest.
- The object header size and reference size are now correctly computed
  for azul.
- Added some java 8 support to the ObjectSizer.
- Fix tests that are unintentionally spawning processes that use the
  default mcast-port. This fixes intermittent failures caused by finding
  another member of the wrong GemFire version.

+import com.gemstone.gemfire.internal.lang.SystemUtils;
+      if (SystemUtils.isAzulJVM()) {
+        tmpObjectHeaderSize = 8;
+        tmpReferenceSize = 8;
+      } else {
+        // Note: as of java 8 compressed oops do not imply a compressed object header.
+        // The object header is determined by UseCompressedClassPointers.
+        // UseCompressedClassPointers requires UseCompressedOops
+        // but UseCompressedOops does not require UseCompressedClassPointers.
+        // But it seems unlikely that someone would compress their oops
+        // not their class pointers. 
-        // If our heap is > 32G then assume large oops. Otherwise assume compressed oops.
-        if (Runtime.getRuntime().maxMemory() > (32L*1024*1024*1024)) {
+        // If our heap is > 32G (64G on java 8) then assume large oops. Otherwise assume compressed oops.
+        long SMALL_OOP_BOUNDARY = 32L;
+        if (SystemUtils.isJavaVersionAtLeast("1.8")) {
+          SMALL_OOP_BOUNDARY = 64L;
+        }
+        if (Runtime.getRuntime().maxMemory() > (SMALL_OOP_BOUNDARY*1024*1024*1024)) {
+      }
