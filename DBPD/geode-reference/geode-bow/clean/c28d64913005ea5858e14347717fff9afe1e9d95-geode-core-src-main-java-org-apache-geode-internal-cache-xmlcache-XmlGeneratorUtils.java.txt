Merge branch 'release/1.4.0'

+import static org.apache.geode.internal.cache.xmlcache.CacheXml.CLASS_NAME;
+import static org.apache.geode.internal.cache.xmlcache.CacheXml.DECLARABLE;
+import static org.apache.geode.internal.cache.xmlcache.CacheXml.NAME;
+import static org.apache.geode.internal.cache.xmlcache.CacheXml.PARAMETER;
+import static org.apache.geode.internal.cache.xmlcache.CacheXml.STRING;
+
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+
+import org.apache.geode.cache.Declarable;
+
- * 
+ *
-   * 
+   *
-  static public void addAttribute(final AttributesImpl attributes, final String localName,
+  public static void addAttribute(final AttributesImpl attributes, final String localName,
-   * 
+   *
-  static public void addAttribute(final AttributesImpl attributes, final String prefix,
+  public static void addAttribute(final AttributesImpl attributes, final String prefix,
-   * 
+   *
-  static public void startElement(final ContentHandler contentHandler, final String prefix,
+  public static void startElement(final ContentHandler contentHandler, final String prefix,
-   * 
+   *
-  static public void endElement(final ContentHandler contentHandler, final String prefix,
+  public static void endElement(final ContentHandler contentHandler, final String prefix,
-   * 
+   *
-  static public void emptyElement(final ContentHandler contentHandler, final String prefix,
+  public static void emptyElement(final ContentHandler contentHandler, final String prefix,
+
+
+  public static void addDeclarable(final ContentHandler handler, Declarable declarable)
+      throws SAXException {
+    AttributesImpl EMPTY = new AttributesImpl();
+
+    String className = declarable.getClass().getName();
+    handler.startElement("", CLASS_NAME, CLASS_NAME, EMPTY);
+    handler.characters(className.toCharArray(), 0, className.length());
+    handler.endElement("", CLASS_NAME, CLASS_NAME);
+
+    if (!(declarable instanceof Declarable2)) {
+      return;
+    }
+
+    Properties props = ((Declarable2) declarable).getConfig();
+    if (props == null) {
+      return;
+    }
+
+    for (Iterator iter = props.entrySet().iterator(); iter.hasNext();) {
+      Map.Entry entry = (Map.Entry) iter.next();
+      String name = (String) entry.getKey();
+      Object value = entry.getValue();
+
+      AttributesImpl atts = new AttributesImpl();
+      atts.addAttribute("", "", NAME, "", name);
+
+      handler.startElement("", PARAMETER, PARAMETER, atts);
+
+      if (value instanceof String) {
+        String sValue = (String) value;
+        handler.startElement("", STRING, STRING, EMPTY);
+        handler.characters(sValue.toCharArray(), 0, sValue.length());
+        handler.endElement("", STRING, STRING);
+
+      } else if (value instanceof Declarable) {
+        handler.startElement("", DECLARABLE, DECLARABLE, EMPTY);
+        addDeclarable(handler, (Declarable) value);
+        handler.endElement("", DECLARABLE, DECLARABLE);
+
+      } else {
+        // Ignore it
+      }
+
+      handler.endElement("", PARAMETER, PARAMETER);
+    }
+  }
+
