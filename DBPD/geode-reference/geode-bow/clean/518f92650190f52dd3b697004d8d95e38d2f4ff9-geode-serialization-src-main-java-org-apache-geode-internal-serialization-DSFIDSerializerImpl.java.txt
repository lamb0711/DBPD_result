GEODE-7344: DSFID implements BasicSerializable (#4364)


+import java.io.NotSerializableException;
-        DSFIDSerializerImpl.this.writeDSFID((DataSerializableFixedID) obj, output);
+        if (obj == null || obj instanceof BasicSerializable) {
+          write((BasicSerializable) obj, output);
+        } else {
+          throw new NotSerializableException("object with class " + obj.getClass().getName() +
+              " is not serializable via DSFIDSerializerImpl");
+        }
-  public void writeDSFID(DataSerializableFixedID o, DataOutput out) throws IOException {
-    if (o == null) {
+  public void write(final BasicSerializable bs, final DataOutput out) throws IOException {
+    writeMetaData(bs, out);
+    if (bs != null) {
+      invokeToData(bs, out);
+    }
+  }
+
+  private void writeMetaData(final BasicSerializable bs, final DataOutput out)
+      throws IOException {
+    if (bs == null) {
-    int dsfid = o.getDSFID();
-    if (dsfid == NO_FIXED_ID) {
-      throw new IllegalArgumentException(
-          "NO_FIXED_ID is not supported by BasicDSFIDSerializer - use InternalDataSerializer instead: "
-              + o.getClass().getName());
+    if (bs instanceof DataSerializableFixedID) {
+      final DataSerializableFixedID dsfid = (DataSerializableFixedID) bs;
+      final int id = dsfid.getDSFID();
+      if (id == NO_FIXED_ID) {
+        throw new IllegalArgumentException(
+            "NO_FIXED_ID is not supported by BasicDSFIDSerializer - use InternalDataSerializer instead: "
+                + dsfid.getClass().getName());
+      }
+      writeDSFIDHeader(id, out);
+    } else {
+      out.writeByte(DSCODE.DATA_SERIALIZABLE.toByte());
+      final Class c = bs.getClass();
+      StaticSerialization.writeClass(c, out);
-    writeDSFIDHeader(dsfid, out);
-    invokeToData(o, out);
+
+    final SerializationContext context = new SerializationContextImpl(out, this);
+
+
+      if (ds instanceof BasicSerializable) {
+        ((BasicSerializable) ds).toData(out, context);
+        return;
+      }
-    SerializationContext context = new SerializationContextImpl(out, this);
+
+  private Object readDSFID(final DataInput in) throws IOException, ClassNotFoundException {
+    checkIn(in);
+    DSCODE dsHeaderType = DscodeHelper.toDSCODE(in.readByte());
+    if (dsHeaderType == DSCODE.NULL) {
+      return null;
+    }
+    return readDSFID(in, dsHeaderType);
+  }
-  public Object readDSFID(final DataInput in, DSCODE dscode)
+  private Object readDSFID(final DataInput in, DSCODE dscode)
+      case DATA_SERIALIZABLE:
+        return readDataSerializable(in);
-  public Object readDSFID(final DataInput in) throws IOException, ClassNotFoundException {
-    checkIn(in);
-    DSCODE dsHeaderType = DscodeHelper.toDSCODE(in.readByte());
-    if (dsHeaderType == DSCODE.NULL) {
-      return null;
-    }
-    return readDSFID(in, dsHeaderType);
-  }
-
-  public int readDSFIDHeader(final DataInput in, DSCODE dscode) throws IOException {
+  private int readDSFIDHeader(final DataInput in, DSCODE dscode) throws IOException {
-      if (!v.isCurrentVersion()) {
+      if (!v.isCurrentVersion() && ds instanceof SerializationVersions) {
-        ((DataSerializableFixedID) ds).fromData(in, context);
+        if (ds instanceof BasicSerializable) {
+          ((BasicSerializable) ds).fromData(in, context);
+        } else {
+          throw new IOException(
+              "problem invoking fromData method on object of class" + ds.getClass().getName());
+        }
+  private Object readDataSerializable(final DataInput in)
+      throws IOException, ClassNotFoundException {
+    Class<?> c = StaticSerialization.readClass(in);
+    try {
+      Constructor<?> init = c.getConstructor();
+      init.setAccessible(true);
+      Object o = init.newInstance();
+
+      invokeFromData(o, in);
+
+      return o;
+    } catch (EOFException | SocketException ex) {
+      // client went away - ignore
+      throw ex;
+    } catch (Exception ex) {
+      throw new IOException(
+          String.format("Could not create an instance of %s .",
+              c.getName()),
+          ex);
+    }
+  }
