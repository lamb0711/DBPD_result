Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfigImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/StartupMessage.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/SystemAdmin.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheServerStats.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatHelper.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatSampler.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/StatArchiveWriter.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/GemFireStatSamplerIntegrationTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/SimpleStatSamplerIntegrationTest.java

-    } else {
-      //TODO - this might be overkill, but type definition should be rare enough.
-      if(!oldType.equals(newType)) {
-        Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType + " new type=" + newType);
-      }
+    } else if ( !oldType.equals(newType) ) {
+      Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType + " new type=" + newType);
-    } else {
-    //TODO - this might be overkill, but type definition should be rare enough.
-      if(!oldType.equals(newType)) {
-        Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType + " new type=" + newType);
-      }
+    } else if ( !oldType.equals(newType) ) {
+      Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType + " new type=" + newType);
-    } else {
-    //TODO - this might be overkill, but enum definition should be rare enough.
-      if(!oldInfo.equals(newInfo)) {
-        Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo + " new enum=" + newInfo);
-      }
+    } else if ( !oldInfo.equals(newInfo) ) {
+      Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo + " new enum=" + newInfo);
-    } else {
-      //TODO - this might be overkill, but type definition should be rare enough.
-      if(!oldInfo.equals(newInfo)) {
-        Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo + " newEnum=" + newInfo);
-      }
+    } else if ( !oldInfo.equals(newInfo) ) {
+      Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo + " newEnum=" + newInfo);
