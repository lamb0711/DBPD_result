GEODE-5006: Remove unused ObjectResultData (#1756)

- Also remove associated and unused RegionAttributesInfo, RegionDetails,
  RegionMemberDetails and CliJsonSerializable*
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Map;
-      if (ResultData.TYPE_OBJECT.equals(resultData.getType())) {
-        buildObjectResultOutput();
-      } else if (ResultData.TYPE_COMPOSITE.equals(resultData.getType())) {
+      if (ResultData.TYPE_COMPOSITE.equals(resultData.getType())) {
-  private void buildObjectResultOutput() {
-    try {
-      Table resultTable = TableBuilder.newTable();
-      resultTable.setColumnSeparator(" : ");
-
-      addHeaderInTable(resultTable, getGfJsonObject());
-
-      GfJsonObject content = getContent();
-
-      GfJsonArray objectsArray = content.getJSONArray(ObjectResultData.OBJECTS_ACCESSOR);
-      if (objectsArray != null) {
-        int numOfObjects = objectsArray.size();
-
-        for (int i = 0; i < numOfObjects; i++) {
-          GfJsonObject object = objectsArray.getJSONObject(i);
-          buildObjectSection(resultTable, null, object, 0);
-        }
-      }
-      addFooterInTable(resultTable, getGfJsonObject());
-
-      resultLines.addAll(resultTable.buildTableList());
-
-    } catch (GfJsonException e) {
-      resultLines
-          .add("Error occurred while processing Command Result. Internal Error - Invalid Result.");
-    } finally {
-      isDataBuilt = true;
-    }
-  }
-
-  private void buildObjectSection(Table table, RowGroup parentRowGroup, GfJsonObject object,
-      int depth) throws GfJsonException {
-    Iterator<String> keys = object.keys();
-    RowGroup rowGroup;
-    if (parentRowGroup != null) {
-      rowGroup = parentRowGroup;
-    } else {
-      rowGroup = table.newRowGroup();
-    }
-    GfJsonArray nestedCollection = null;
-    GfJsonObject nestedObject = null;
-
-    GfJsonObject fieldDisplayNames =
-        object.getJSONObject(CliJsonSerializable.FIELDS_TO_DISPLAYNAME_MAPPING);
-
-    List<String> fieldsToSkipOnUI = null;
-    if (object.has(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI)) {
-      GfJsonArray jsonArray = object.getJSONArray(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI);
-      fieldsToSkipOnUI = new ArrayList<>();
-      for (int i = 0; i < jsonArray.size(); i++) {
-        fieldsToSkipOnUI.add(String.valueOf(jsonArray.get(i)));
-      }
-    }
-
-    while (keys.hasNext()) {
-      String key = keys.next();
-
-      if (CliJsonSerializable.FIELDS_TO_SKIP.contains(key)
-          || (fieldsToSkipOnUI != null && fieldsToSkipOnUI.contains(key))) {
-        continue;
-      }
-
-      try {
-        nestedCollection = object.getJSONArray(key);
-      } catch (GfJsonException ignored) {
-      }
-
-      Object field = null;
-      if (nestedCollection == null) {
-        field = object.get(key);
-        if (!isPrimitiveOrStringOrWrapper(field)) {
-          nestedObject = object.getJSONObject(key);
-        }
-      }
-      if (nestedCollection != null && isPrimitiveOrStringOrWrapperArray(nestedCollection)) {
-        String str = nestedCollection.toString();
-        field = str.substring(1, str.length() - 1);
-        nestedCollection = null;
-      }
-
-      Row newRow = rowGroup.newRow();
-      String prefix = "";
-      for (int i = 0; i < depth; i++) {
-        prefix += " . ";
-      }
-      String fieldNameToDisplay = fieldDisplayNames.getString(key);
-
-      if (nestedCollection == null) {
-        newRow.newLeftCol(prefix + fieldNameToDisplay);
-      }
-
-      if (nestedCollection != null) {
-        Map<String, Integer> columnsMap = new HashMap<>();
-
-        RowGroup newRowGroup = table.newRowGroup();
-        newRowGroup.setColumnSeparator(" | ");
-        newRowGroup.newBlankRow();
-        newRowGroup.newRow().newLeftCol(fieldNameToDisplay);
-        Row headerRow = newRowGroup.newRow();
-
-        int numOfRows = nestedCollection.size();
-        List<String> tableFieldsToSkipOnUI = null;
-        for (int j = 0; j < numOfRows; j++) {
-          GfJsonObject content = nestedCollection.getJSONObject(j);
-          if (content.has(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI)) {
-            GfJsonArray jsonArray = content.getJSONArray(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI);
-            tableFieldsToSkipOnUI = new ArrayList<>();
-            for (int i = 0; i < jsonArray.size(); i++) {
-              tableFieldsToSkipOnUI.add(String.valueOf(jsonArray.get(i)));
-            }
-          }
-          GfJsonArray columnNames = content.names();
-          int numOfColumns = columnNames.size();
-
-          if (headerRow.isEmpty()) {
-            GfJsonObject innerFieldDisplayNames =
-                content.getJSONObject(CliJsonSerializable.FIELDS_TO_DISPLAYNAME_MAPPING);
-            for (int i = 0; i < numOfColumns; i++) {
-
-              Object columnName = columnNames.get(i);
-              if (CliJsonSerializable.FIELDS_TO_SKIP.contains((String) columnName)
-                  || (tableFieldsToSkipOnUI != null
-                      && tableFieldsToSkipOnUI.contains(columnName))) {
-                // skip file data if any
-                continue;
-              }
-
-              headerRow.newCenterCol(innerFieldDisplayNames.getString((String) columnName));
-              columnsMap.put((String) columnName, i);
-            }
-            newRowGroup.newRowSeparator('-', false);
-          }
-          newRow = newRowGroup.newRow();
-          for (int i = 0; i < numOfColumns; i++) {
-
-            Object columnName = columnNames.get(i);
-            if (CliJsonSerializable.FIELDS_TO_SKIP.contains((String) columnName)
-                || (tableFieldsToSkipOnUI != null && tableFieldsToSkipOnUI.contains(columnName))) {
-              // skip file data if any
-              continue;
-            }
-            newRow.newLeftCol(String.valueOf(content.get((String) columnName)));
-          }
-        }
-      } else if (nestedObject != null) {
-        buildObjectSection(table, rowGroup, nestedObject, depth + 1);
-      } else {
-        newRow.newLeftCol(field);
-      }
-      nestedCollection = null;
-      nestedObject = null;
-    }
-  }
-
