GEODE-8182: change String commands to use one region (#5165)

* changed all String commands to use the function and to use a single region
* renabled tests ignored for GEODE-8182
* removed the RedisLockService since it is not used in the new data model
* removed the unused del methods on RedisSetCommands and RedisHashCommands
* removed the KeyRegistar since it was no longer needed with a single data region

Co-authored-by: Ray Ingles <ringles@pivotal.io>
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import org.apache.geode.cache.Region;
+import java.util.List;
+
-import org.apache.geode.redis.internal.RedisData;
-import org.apache.geode.redis.internal.RedisDataType;
-import org.apache.geode.redis.internal.RedisDataTypeMismatchException;
+import org.apache.geode.redis.internal.executor.RedisKeyCommands;
-    Region<ByteArrayWrapper, RedisData> region =
-        context.getRegionProvider().getStringsRegion();
-
-    boolean hasEntry = false;
+    RedisStringCommands stringCommands = getRedisStringCommands(context);
+    RedisKeyCommands keyCommands = getRedisKeyCommands(context);
+    boolean successful = false;
-    Map<ByteArrayWrapper, RedisData> map = new HashMap<>();
-
+    // TODO: make this atomic
-      try {
-        checkDataType(key, RedisDataType.REDIS_STRING, context);
-      } catch (RedisDataTypeMismatchException e) {
-        hasEntry = true;
-        break;
+      if (keyCommands.exists(key)) {
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_SET));
+        return;
-      byte[] value = commandElems.get(i + 1);
-      ByteArrayWrapper valueAsByteArray = new ByteArrayWrapper(value);
-      map.put(key, new RedisString(valueAsByteArray));
-      if (region.containsKey(key)) {
-        hasEntry = true;
-        break;
-      }
-    }
-    boolean successful = false;
-    if (!hasEntry) {
-      successful = true;
-      for (ByteArrayWrapper k : map.keySet()) {
-        try {
-          checkAndSetDataType(k, context);
-        } catch (RedisDataTypeMismatchException e) {
-          successful = false;
-          break;
-        }
-      }
-      region.putAll(map);
-    }
-    if (successful) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), SET));
-    } else {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_SET));
+    // none exist so now set them all
+    for (int i = 1; i < commandElems.size(); i += 2) {
+      byte[] keyArray = commandElems.get(i);
+      ByteArrayWrapper key = new ByteArrayWrapper(keyArray);
+      byte[] valueArray = commandElems.get(i + 1);
+      ByteArrayWrapper value = new ByteArrayWrapper(valueArray);
+      stringCommands.set(key, value, null);
+    }
+    command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), SET));
