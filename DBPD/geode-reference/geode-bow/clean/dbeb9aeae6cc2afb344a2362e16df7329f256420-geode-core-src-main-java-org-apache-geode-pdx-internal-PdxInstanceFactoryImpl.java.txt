Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * PdxInstances created with this factory can never be deserialized
- * but you can access their fields just like any other pdx.
- * <p>The current implementation of this interface is meant for internal use only.
- * The way it defines a PdxType is expensive since it can never figure out it is
- * already defined without doing an expensive check in the type registry.
- * We should optimize this before making this a public feature.
+ * PdxInstances created with this factory can never be deserialized but you can access their fields
+ * just like any other pdx.
+ * <p>
+ * The current implementation of this interface is meant for internal use only. The way it defines a
+ * PdxType is expensive since it can never figure out it is already defined without doing an
+ * expensive check in the type registry. We should optimize this before making this a public
+ * feature.
-public class PdxInstanceFactoryImpl implements
-    PdxInstanceFactory {
-  
+public class PdxInstanceFactoryImpl implements PdxInstanceFactory {
+
-    GemFireCacheImpl gfc = GemFireCacheImpl.getForPdx("PDX registry is unavailable because the Cache has been closed.");
+    GemFireCacheImpl gfc = GemFireCacheImpl
+        .getForPdx("PDX registry is unavailable because the Cache has been closed.");
-  
-  public PdxInstanceFactory writeArrayOfByteArrays(String fieldName,
-      byte[][] array) {
+
+  public PdxInstanceFactory writeArrayOfByteArrays(String fieldName, byte[][] array) {
-  public <CT, VT extends CT> PdxInstanceFactory writeField(String fieldName, VT fieldValue, Class<CT> fieldType) {
+  public <CT, VT extends CT> PdxInstanceFactory writeField(String fieldName, VT fieldValue,
+      Class<CT> fieldType) {
-  public PdxInstanceFactory writeObject(String fieldName, Object value,
-      boolean checkPortability) {
+  public PdxInstanceFactory writeObject(String fieldName, Object value, boolean checkPortability) {
-    
+
-  public <CT, VT extends CT> PdxInstanceFactory writeField(String fieldName,
-      VT fieldValue, Class<CT> fieldType, boolean checkPortability) {
+  public <CT, VT extends CT> PdxInstanceFactory writeField(String fieldName, VT fieldValue,
+      Class<CT> fieldType, boolean checkPortability) {
-  public static PdxInstance createPdxEnum(String className, String enumName, int enumOrdinal, GemFireCacheImpl gfc) {
+  public static PdxInstance createPdxEnum(String className, String enumName, int enumOrdinal,
+      GemFireCacheImpl gfc) {
