GEODE-2234: Query stats are now calculated per member in the LuceneFunction

+import org.apache.geode.cache.lucene.internal.LuceneIndexImpl;
+import org.apache.geode.cache.lucene.internal.LuceneIndexStats;
-import org.apache.geode.cache.lucene.internal.InternalLuceneIndex;
-import org.apache.geode.cache.query.QueryException;
-import org.apache.geode.internal.cache.execute.BucketMovedException;
-    InternalLuceneIndex index =
-        (InternalLuceneIndex) service.getIndex(searchContext.getIndexName(), region.getFullPath());
+    LuceneIndexImpl index =
+        (LuceneIndexImpl) service.getIndex(searchContext.getIndexName(), region.getFullPath());
+    LuceneIndexStats stats = index.getIndexStats();
+    TopEntriesCollector mergedResult = null;
-      Collection<IndexRepository> repositories = repoManager.getRepositories(ctx);
-      for (IndexRepository repo : repositories) {
-        IndexResultCollector collector = manager.newCollector(repo.toString());
-        logger.debug("Executing search on repo: " + repo.toString());
-        repo.query(query, resultLimit, collector);
-        results.add(collector);
+      long start = stats.startQuery();
+      try {
+        Collection<IndexRepository> repositories = repoManager.getRepositories(ctx);
+        for (IndexRepository repo : repositories) {
+          IndexResultCollector collector = manager.newCollector(repo.toString());
+          if (logger.isDebugEnabled()) {
+            logger.debug("Executing search on repo: " + repo.toString());
+          }
+          repo.query(query, resultLimit, collector);
+          results.add(collector);
+        }
+        mergedResult = (TopEntriesCollector) manager.reduce(results);
+      } finally {
+        stats.endQuery(start, mergedResult == null ? 0 : mergedResult.size());
-      TopEntriesCollector mergedResult = (TopEntriesCollector) manager.reduce(results);
