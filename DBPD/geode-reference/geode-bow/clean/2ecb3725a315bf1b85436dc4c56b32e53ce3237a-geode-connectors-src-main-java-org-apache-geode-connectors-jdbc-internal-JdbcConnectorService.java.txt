GEODE-4863: refactor jdbc commands to use this public cluster configuration api (#1776)

   * refactored jdbc connector commands to use public cc service
   * removed JdbcConnectorServiceXmlGenerator
   * removed RegionMappingBuilder & ConnectionConfigBuilder
   * if cc service is running then user can only alter whats available in CC
   * describe & List commands now list entries from cc service
   * converted some integration tests to junits
   * removed unwanted functions, tests

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>

-import org.apache.geode.cache.Cache;
+import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
-import org.apache.geode.internal.cache.extension.Extension;
-public interface JdbcConnectorService extends Extension<Cache>, CacheService {
+public interface JdbcConnectorService extends CacheService {
-  void createConnectionConfig(ConnectionConfiguration config)
+  void createConnectionConfig(ConnectorService.Connection config)
-  void replaceConnectionConfig(ConnectionConfiguration config)
+  void replaceConnectionConfig(ConnectorService.Connection config)
-  ConnectionConfiguration getConnectionConfig(String connectionName);
+  ConnectorService.Connection getConnectionConfig(String connectionName);
-  Set<ConnectionConfiguration> getConnectionConfigs();
+  Set<ConnectorService.Connection> getConnectionConfigs();
-  void createRegionMapping(RegionMapping mapping) throws RegionMappingExistsException;
+  void createRegionMapping(ConnectorService.RegionMapping mapping)
+      throws RegionMappingExistsException;
-  void replaceRegionMapping(RegionMapping mapping) throws RegionMappingNotFoundException;
+  void replaceRegionMapping(ConnectorService.RegionMapping mapping)
+      throws RegionMappingNotFoundException;
-  RegionMapping getMappingForRegion(String regionName);
+  ConnectorService.RegionMapping getMappingForRegion(String regionName);
-  Set<RegionMapping> getRegionMappings();
+  Set<ConnectorService.RegionMapping> getRegionMappings();
