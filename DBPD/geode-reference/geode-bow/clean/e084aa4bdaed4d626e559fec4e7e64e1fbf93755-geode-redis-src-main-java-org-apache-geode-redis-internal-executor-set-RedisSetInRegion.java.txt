GEODE-8130: use a single region for redis Sets and Hashes  (#5120)

* Replaced replicated metaRegion with a partitioned dataRegion.
Currently the dataRegion is used the same way as the metaRegion
except for sets and hashes which store their actual data in it.
* Exception handling now correctly deals with FunctionException
* Disabled a test until GEODE-8127 if fixed.
* Now uses the ByteArrayWrapper as the key on the meta region
and the locks map instead of using a String.
Since a ByteArrayWrapper is used as the key in the data region
this will end up saving memory.

* Found a problem with redis dynamic region management.
Some of the code was executing when we added a new set or hash to
the metaDataRegion. It was only ignoring STRING and HLL.
This caused some extra memory to be used for every redis set/hash.
Now the dynamic region code is only used for lists and sortedSet.

* This commit has some TODO comments of what looks like a bug in
the dynamic region code when a new server is started. It looks
like the new server will not create already existing dynamic regions.
We could test this by starting one server, create a LIST, then
start another server, and then shutdown the first server. Does
the LIST still exist? If we change them not to use dynamic regions
then this issue will go away.
+import static org.apache.geode.redis.internal.RedisDataType.REDIS_SET;
+
-import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.geode.redis.internal.RedisConstants;
+import org.apache.geode.redis.internal.RedisData;
+import org.apache.geode.redis.internal.RedisDataTypeMismatchException;
-  private final Region<ByteArrayWrapper, RedisSet> region;
+  private final Region<ByteArrayWrapper, RedisData> region;
-  public RedisSetInRegion(Region<ByteArrayWrapper, RedisSet> region) {
+  public RedisSetInRegion(Region<ByteArrayWrapper, RedisData> region) {
-    RedisSet redisSet = region.get(key);
+    RedisSet redisSet = checkType(region.get(key));
-      ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {
-    return getRedisSet(key).srem(membersToRemove, region, key, setWasDeleted);
+      ArrayList<ByteArrayWrapper> membersToRemove) {
+    return getRedisSet(key).srem(membersToRemove, region, key);
-    return region.getOrDefault(key, RedisSet.EMPTY);
+    return checkType(region.getOrDefault(key, RedisSet.EMPTY));
+
+  private RedisSet checkType(RedisData redisData) {
+    if (redisData == null) {
+      return null;
+    }
+    if (redisData.getType() != REDIS_SET) {
+      throw new RedisDataTypeMismatchException(RedisConstants.ERROR_WRONG_TYPE);
+    }
+    return (RedisSet) redisData;
+  }
+
