Merge branch 'release/1.0.0-incubating.M3'

-import static org.mockito.Mockito.*;
-
-import java.net.UnknownHostException;
-
-import org.junit.Assert;
-
+import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.Statistics;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.DataPolicy;
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.RegionAttributes;
+import com.gemstone.gemfire.internal.cache.AbstractRegion;
+import java.io.File;
+import java.net.UnknownHostException;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.mockito.Mockito.*;
+
+    LogWriter logger = mock(LogWriter.class);
+    Statistics stats = mock(Statistics.class);
+    when(config.getCacheXmlFile()).thenReturn(new File(""));
+    when(config.getDeployWorkingDir()).thenReturn(new File("."));
+    when(system.getLogWriter()).thenReturn(logger);
+    when(system.createAtomicStatistics(any(), any(), anyLong())).thenReturn(stats);
+    when(system.createAtomicStatistics(any(), any())).thenReturn(stats);
+  /**
+   * A fake region, which contains a fake cache and some other
+   * fake attributes
+   */
+  public static Region region(String name, Cache cache) {
+    Region region = mock(Region.class);
+    RegionAttributes attributes = mock(RegionAttributes.class);
+    DataPolicy policy = mock(DataPolicy.class);
+    when(region.getAttributes()).thenReturn(attributes);
+    when(attributes.getDataPolicy()).thenReturn(policy);
+    when(region.getCache()).thenReturn(cache);
+    when(region.getRegionService()).thenReturn(cache);
+    return region;
+  }
+
+  /**
+   * Add real map behavior to a mock region. Useful for tests
+   * where you want to mock region that just behaves like a map.
+   * @param mock the mockito mock to add behavior too.
+   */
+  public static void addMapBehavior(Region mock) {
+    //Allow the region to behave like a fake map
+    Map underlyingMap = new HashMap();
+    when(mock.get(any()))
+      .then(invocation -> underlyingMap.get(invocation.getArguments()[0]));
+    when(mock.put(any(), any()))
+      .then(invocation -> underlyingMap.put(invocation.getArguments()[0], invocation.getArguments()[1]));
+  }
+
