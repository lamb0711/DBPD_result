Merge branch 'release/1.8.0'

+import javax.sql.DataSource;
+
-import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
+import org.apache.geode.internal.jndi.JNDIInvoker;
-  private final DataSourceManager manager;
+  private final DataSourceFactory dataSourceFactory;
-  public SqlHandler(DataSourceManager manager, TableMetaDataManager tableMetaDataManager,
-      JdbcConnectorService configService) {
-    this.manager = manager;
+  public SqlHandler(TableMetaDataManager tableMetaDataManager, JdbcConnectorService configService,
+      DataSourceFactory dataSourceFactory) {
+    this.dataSourceFactory = dataSourceFactory;
-  public void close() {
-    manager.close();
+  public SqlHandler(TableMetaDataManager tableMetaDataManager, JdbcConnectorService configService) {
+    this(tableMetaDataManager, configService,
+        dataSourceName -> JNDIInvoker.getDataSource(dataSourceName));
-  Connection getConnection(ConnectorService.Connection config) throws SQLException {
-    return manager.getOrCreateDataSource(config).getConnection();
+  Connection getConnection(String connectionName) throws SQLException {
+    return getDataSource(connectionName).getConnection();
+  }
+
+  DataSource getDataSource(String connectionName) {
+    DataSource dataSource = this.dataSourceFactory.getDataSource(connectionName);
+    if (dataSource == null) {
+      throw new JdbcConnectorException("JDBC connection with name " + connectionName
+          + " not found. Create the connection with the gfsh command 'create jndi-binding'");
+    }
+    return dataSource;
-    ConnectorService.RegionMapping regionMapping = getMappingForRegion(region.getName());
-    ConnectorService.Connection connectionConfig =
-        getConnectionConfig(regionMapping.getConnectionConfigName());
+    RegionMapping regionMapping = getMappingForRegion(region.getName());
-    try (Connection connection = getConnection(connectionConfig)) {
+    try (Connection connection = getConnection(regionMapping.getConnectionConfigName())) {
-  private ConnectorService.RegionMapping getMappingForRegion(String regionName) {
-    ConnectorService.RegionMapping regionMapping =
+  private RegionMapping getMappingForRegion(String regionName) {
+    RegionMapping regionMapping =
-  private ConnectorService.Connection getConnectionConfig(String connectionConfigName) {
-    ConnectorService.Connection connectionConfig =
-        this.configService.getConnectionConfig(connectionConfigName);
-    if (connectionConfig == null) {
-      throw new JdbcConnectorException("JDBC connection with name " + connectionConfigName
-          + " not found. Create the connection with the gfsh command 'create jdbc-connection'");
-    }
-    return connectionConfig;
-  }
-
-      value = character == Character.valueOf((char) 0) ? null : character.toString();
+      value = character.equals(Character.valueOf((char) 0)) ? null : character.toString();
-    ConnectorService.RegionMapping regionMapping = getMappingForRegion(region.getName());
-    ConnectorService.Connection connectionConfig =
-        getConnectionConfig(regionMapping.getConnectionConfigName());
+    RegionMapping regionMapping = getMappingForRegion(region.getName());
-    try (Connection connection = getConnection(connectionConfig)) {
+    try (Connection connection = getConnection(regionMapping.getConnectionConfigName())) {
-      ConnectorService.RegionMapping regionMapping, K key, PdxInstance value, Operation operation) {
+      RegionMapping regionMapping, K key, PdxInstance value, Operation operation) {
-      ConnectorService.RegionMapping regionMapping, PdxInstance value) {
+      RegionMapping regionMapping, PdxInstance value) {
+  public interface DataSourceFactory {
+    public DataSource getDataSource(String dataSourceName);
+  }
