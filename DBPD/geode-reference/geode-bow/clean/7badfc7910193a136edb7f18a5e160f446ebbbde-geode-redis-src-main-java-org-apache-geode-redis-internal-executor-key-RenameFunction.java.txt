GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

-import org.apache.geode.internal.cache.LocalDataSet;
-import org.apache.geode.redis.internal.data.RedisKeyInRegion;
-import org.apache.geode.redis.internal.data.RedisSet;
+import org.apache.geode.redis.internal.data.CommandHelper;
+import org.apache.geode.redis.internal.data.RedisData;
+import org.apache.geode.redis.internal.data.RedisKeyCommandsFunctionExecutor;
-  private final transient StripedExecutor stripedExecutor;
-  private final RedisStats redisStats;
+  private final transient PartitionedRegion partitionedRegion;
+  private final transient CommandHelper commandHelper;
+  private final transient RedisKeyCommandsFunctionExecutor keyCommands;
-  public static void register(StripedExecutor stripedExecutor,
+  public static void register(Region<ByteArrayWrapper, RedisData> dataRegion,
+      StripedExecutor stripedExecutor,
-    FunctionService.registerFunction(new RenameFunction(stripedExecutor, redisStats));
+    FunctionService.registerFunction(new RenameFunction(dataRegion, stripedExecutor, redisStats));
-  public RenameFunction(StripedExecutor stripedExecutor,
+  public RenameFunction(
+      Region<ByteArrayWrapper, RedisData> dataRegion,
+      StripedExecutor stripedExecutor,
-    this.stripedExecutor = stripedExecutor;
-    this.redisStats = redisStats;
+    partitionedRegion = (PartitionedRegion) dataRegion;
+    commandHelper = new CommandHelper(dataRegion, redisStats, stripedExecutor);
+    keyCommands = new RedisKeyCommandsFunctionExecutor(commandHelper);
-    LocalDataSet localDataSet = (LocalDataSet) renameContext.getLocalDataSet();
-      computeWithPrimaryLocked(renameContext.getKeyToLock(),
-          localDataSet, computation);
+      partitionedRegion.computeWithPrimaryLocked(renameContext.getKeyToLock(), computation);
-  public static void computeWithPrimaryLocked(Object key, LocalDataSet localDataSet, Runnable r) {
-    PartitionedRegion partitionedRegion = localDataSet.getProxy();
-
-    partitionedRegion.computeWithPrimaryLocked(key, r);
-  }
-
+  private StripedExecutor getStripedExecutor() {
+    return commandHelper.getStripedExecutor();
+  }
+
-    int result = stripedExecutor.compareStripes(object1, object2);
+    int result = getStripedExecutor().compareStripes(object1, object2);
-      return stripedExecutor
+      return getStripedExecutor()
-    return new RedisKeyInRegion(context.getDataRegion(), redisStats)
-        .rename(context.getOldKey(), context.getNewKey());
+    return keyCommands.rename(context.getOldKey(), context.getNewKey());
-        stripedExecutor.compareStripes(lockedKey, context.getKeyToLock()) == 0;
+        getStripedExecutor().compareStripes(lockedKey, context.getKeyToLock()) == 0;
-
-    private Region<ByteArrayWrapper, RedisSet> getLocalDataSet() {
-      return context.getLocalDataSet(getDataRegion());
-    }
