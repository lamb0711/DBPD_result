Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Nested name scope for name resolution Currently allow only one iterator per
- * scope, and can be known by zero or one identifier
+ * Nested name scope for name resolution Currently allow only one iterator per scope, and can be
+ * known by zero or one identifier
- *  
+ * 
-class QScope  {
+class QScope {
-  //private RuntimeIterator _iterator;
+  // private RuntimeIterator _iterator;
-  
+
-    //_iterator = iterator;
+    // _iterator = iterator;
-    //System.out.println("in Scope.resolve "+(_iterator != null ?
+    // System.out.println("in Scope.resolve "+(_iterator != null ?
-          return _iterator;
+        return _iterator;
-  
-  
+
+
-   * @return unique int identifying the scope. It also indicates the relative visibility
-   * of scopes, with higher scope being able to see iterators of lower scope.
+   * @return unique int identifying the scope. It also indicates the relative visibility of scopes,
+   *         with higher scope being able to see iterators of lower scope.
-  
+
