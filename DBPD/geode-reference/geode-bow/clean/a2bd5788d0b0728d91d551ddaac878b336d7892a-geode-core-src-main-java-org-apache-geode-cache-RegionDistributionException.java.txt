GEODE-3923 Provide whitelist/blacklist capability for java serialization

This is a squashed and rebased commit of the work from the now-defunct
whitelist-wip branch.  The work allows you to whitelist and blacklist
use of Java deserialization for classes matching a pattern you provide.

All distributedTests are now run with this enabled and with the default
blacklist pattern of "!*", which blacklists everything not explicitely
allowed by Geode in the sanctionedSerializables.txt files or by your test.

Each layer needing one now has its own sanctionedSerializables.txt file
that is a resource in the product tree.  These are installed as whitelists
by a new DistributedSystemService in that layer.

There are numerous examples of whitelisting classes in the tests.

If you do not whitelist your class Geode will throw an IncompatibleClassException.
If you happen to run into this look in your logs for "rejecting" and you
can easily find the name of the offending class and add it to your
whitelist.

Two new cache properties have been added:

  validate-serializable-objects

If true checks incoming java serializable objects against a filter (allows
internal Geode classes and any others provided in the
serializable-object-filter property).

If you enable this property you must be using Java 8 build 121 or later.
If you are not Geode will throw an exception and refuse to start.

Default: "false"

  serializable-object-filter

A user provided whitelist of objects that the system will allow to serialize.
See java.io.ObjectInputFilter.Config for details on the syntax for creating filters.

https://docs.oracle.com/javase/9/docs/api/java/io/ObjectInputFilter.Config.html

Default: "!*"

In addition, this work includes these significant contributions:

commit 731ac2b4206615fb6bdaa54db371c7f8b7956fd4
Author: Galen O'Sullivan <gosullivan@pivotal.io>
Date:   Wed Nov 15 10:55:23 2017 -0800

    [edited message] Allow Geode to run with older versions of Java 8
    when serialization filtering is not enabled.

    and achieve this by moving references to ObjectInputFilter out of
    InternalDataSerializer.

    Signed-off-by: Dan Smith <dsmith@pivotal.io>

commit 3329467308bbfaaf0cc30db678474894132e5f62
Author: Dan Smith <upthewaterspout@apache.org>
Date:   Thu Nov 2 13:22:42 2017 -0700

    Adding an option to run tests with a different JVM

commit a480931fa3b7e973f9076a063238c75d0b51146b
Author: Bruce Schuchardt <bschuchardt@pivotal.io>
Date:   Fri Nov 10 15:46:11 2017 -0800

    whitelist WIP

    Turned on validation by default for dunit tests and fixed issues this caused.
    Several tests now set a custom whitelist.

commit 026ae92fe2055c09762978696d53d9cd2679bd60
Author: Galen O'Sullivan <gosullivan@pivotal.io>
Date:   Thu Nov 9 17:02:56 2017 -0800

    Adding configuration parameters to toggle whitelist behavior of serializable classes.

    Open question about removing DataCommandRequest.java toData and fromData

    Signed-off-by: Brian Rowe <browe@pivotal.io>

-    Set roleNames = new HashSet(this.failedRoles.size());
-    for (Iterator iter = this.failedRoles.iterator(); iter.hasNext();) {
+    Set fr = this.failedRoles;
+    if (fr == null) {
+      fr = Collections.EMPTY_SET;
+    }
+    Set roleNames = new HashSet(fr.size());
+    for (Iterator iter = fr.iterator(); iter.hasNext();) {
