GEODE-7071: Add CA to CertStores so that all certificates can be signed (#3905)

- CAs need to be explicitly created and added as trusted.
- Certificates need to be explicitly signed.
- Introduce CertificateMaterial which includes the generated
  X509Certificate, the certificate's KeyPair and the issuer if relevant.
- Future work should convert all other tests, which utilize key/trust
  stores to use the CertStores class.

-import static org.apache.geode.cache.ssl.TestSSLUtils.createKeyStore;
-import static org.apache.geode.cache.ssl.TestSSLUtils.createTrustStore;
-import static org.apache.geode.cache.ssl.TestSSLUtils.generateKeyPair;
+import java.io.EOFException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.file.Files;
+import java.nio.file.Paths;
-import java.security.KeyPair;
-import java.security.cert.X509Certificate;
+import java.security.KeyStore;
+import java.security.cert.Certificate;
+import java.util.ArrayList;
+import java.util.List;
+/**
+ * The {@code CertStores} class encapsulates the key and trust stores typically used by various
+ * components in a Geode cluster. It currently supports certificate collections for servers,
+ * locators and clients. All certificates are signed by a single Root Certificate Authority.
+ */
-  private final String alias;
-  private Map<String, X509Certificate> trustedCerts = new HashMap<>();
+  // Contents of keystore
+  private Map<String, CertificateMaterial> keyStoreEntries = new HashMap<>();
-  private File keyStoreFile;
+  // Contents of truststore
+  private Map<String, CertificateMaterial> trustedCerts = new HashMap<>();
-  private X509Certificate cert;
-
-    return new CertStores("locator", "locator");
+    return new CertStores("locator");
-    return new CertStores("server", "server");
+    return new CertStores("server");
-    return new CertStores("client", "client");
+    return new CertStores("client");
-  public CertStores(String alias, String storePrefix) {
-    this.alias = alias;
+  public CertStores(String storePrefix) {
-  public String alias() {
-    return alias;
-  }
-
-  public X509Certificate certificate() {
-    return cert;
-  }
-
-  public CertStores withCertificate(TestSSLUtils.CertificateBuilder certificateBuilder)
-      throws GeneralSecurityException, IOException {
-    keyStoreFile = File.createTempFile(storePrefix + "KS", ".jks");
-    withCertificate(certificateBuilder, keyStoreFile);
+  public CertStores withCertificate(String alias, CertificateMaterial material) {
+    keyStoreEntries.put(alias, material);
-  private void withCertificate(TestSSLUtils.CertificateBuilder certificateBuilder,
-      File keyStoreFile) throws GeneralSecurityException, IOException {
-    KeyPair keyPair = generateKeyPair("RSA");
-    cert = certificateBuilder.generate(keyPair);
-    createKeyStore(keyStoreFile.getPath(), keyStorePassword, alias, keyPair.getPrivate(), cert);
-  }
-
-  public CertStores trustSelf() {
-    this.trustedCerts.put(alias, cert);
-    return this;
-  }
-
-  public CertStores trust(String alias, X509Certificate certificate) {
-    this.trustedCerts.put(alias, certificate);
+  public CertStores trust(String alias, CertificateMaterial material) {
+    this.trustedCerts.put(alias, material);
-    File trustStoreFile = File.createTempFile(storePrefix + "TS", ".jks");
+    File trustStoreFile = File.createTempFile(storePrefix + "-TS-", ".jks");
+    createTrustStore(trustStoreFile.getPath(), trustStorePassword);
-    createTrustStore(trustStoreFile.getPath(), trustStorePassword, trustedCerts);
+    File keyStoreFile = File.createTempFile(storePrefix + "-KS-", ".jks");
+    keyStoreFile.deleteOnExit();
+    createKeyStore(keyStoreFile.getPath(), keyStorePassword);
+
+  private void createTrustStore(String filename, String password)
+      throws GeneralSecurityException, IOException {
+    KeyStore ks = KeyStore.getInstance("JKS");
+    try (InputStream in = Files.newInputStream(Paths.get(filename))) {
+      ks.load(in, password.toCharArray());
+    } catch (EOFException e) {
+      ks = createEmptyKeyStore();
+    }
+    for (Map.Entry<String, CertificateMaterial> cert : trustedCerts.entrySet()) {
+      ks.setCertificateEntry(cert.getKey(), cert.getValue().getCertificate());
+    }
+
+    try (OutputStream out = Files.newOutputStream(Paths.get(filename))) {
+      ks.store(out, password.toCharArray());
+    }
+  }
+
+  private void createKeyStore(String filename, String password)
+      throws GeneralSecurityException, IOException {
+    KeyStore ks = createEmptyKeyStore();
+
+    for (Map.Entry<String, CertificateMaterial> entry : keyStoreEntries.entrySet()) {
+      CertificateMaterial cert = entry.getValue();
+
+      List<Certificate> chain = new ArrayList<>();
+      chain.add(cert.getCertificate());
+
+      cert.getIssuer().ifPresent(chain::add);
+
+      ks.setKeyEntry(entry.getKey(), cert.getPrivateKey(), password.toCharArray(),
+          chain.toArray(new Certificate[] {}));
+    }
+    try (OutputStream out = Files.newOutputStream(Paths.get(filename))) {
+      ks.store(out, password.toCharArray());
+    }
+  }
+
+
+  private KeyStore createEmptyKeyStore() throws GeneralSecurityException, IOException {
+    KeyStore ks = KeyStore.getInstance("JKS");
+    ks.load(null, null); // initialize
+    return ks;
+  }
+
