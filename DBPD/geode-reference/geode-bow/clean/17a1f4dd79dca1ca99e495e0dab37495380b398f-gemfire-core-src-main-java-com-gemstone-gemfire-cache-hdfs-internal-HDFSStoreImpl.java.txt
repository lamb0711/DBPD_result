Merge remote-tracking branch 'origin/develop' into feature/GEODE-77

-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributes;
-    long cleanUpIntervalMillis = getHDFSCompactionConfig().getOldFilesCleanupIntervalMins() * 60 * 1000;
+    long cleanUpIntervalMillis = getPurgeInterval() * 60 * 1000;
-    newHolder.getHDFSCompactionConfig().validate();
+    newHolder.validate();
-  public int getMaxFileSize() {
-    return configHolder.getMaxFileSize();
+  public int getWriteOnlyFileRolloverSize() {
+    return configHolder.getWriteOnlyFileRolloverSize();
-  public int getFileRolloverInterval() {
-    return configHolder.getFileRolloverInterval();
+  public int getWriteOnlyFileRolloverInterval() {
+    return configHolder.getWriteOnlyFileRolloverInterval();
-  public HDFSEventQueueAttributes getHDFSEventQueueAttributes() {
-    return configHolder.getHDFSEventQueueAttributes();
+  public int getMinorCompactionThreads() {
+    return configHolder.getMinorCompactionThreads();
-  public HDFSCompactionConfig getHDFSCompactionConfig() {
-    return (HDFSCompactionConfig) configHolder.getHDFSCompactionConfig();
+  public boolean getMajorCompaction() {
+    return configHolder.getMajorCompaction();
+  public int getMajorCompactionInterval() {
+    return configHolder.getMajorCompactionInterval();
+  }
+
+  @Override
+  public int getMajorCompactionThreads() {
+    return configHolder.getMajorCompactionThreads();
+  }
+
+
+  @Override
+  public int getInputFileSizeMax() {
+    return configHolder.getInputFileSizeMax();
+  }
+
+  @Override
+  public int getInputFileCountMin() {
+    return configHolder.getInputFileCountMin();
+  }
+
+  @Override
+  public int getInputFileCountMax() {
+    return configHolder.getInputFileCountMax();
+  }
+
+  @Override
+  public int getPurgeInterval() {
+    return configHolder.getPurgeInterval();
+  }
+
+  @Override
+  public String getDiskStoreName() {
+    return configHolder.getDiskStoreName();
+  }
+
+  @Override
+  public int getMaxMemory() {
+    return configHolder.getMaxMemory();
+  }
+
+  @Override
+  public int getBatchSize() {
+    return configHolder.getBatchSize();
+  }
+
+  @Override
+  public int getBatchInterval() {
+    return configHolder.getBatchInterval();
+  }
+
+  @Override
+  public boolean getBufferPersistent() {
+    return configHolder.getBufferPersistent();
+  }
+
+  @Override
+  public boolean getSynchronousDiskWrite() {
+    return configHolder.getSynchronousDiskWrite();
+  }
+
+  @Override
+  public int getDispatcherThreads() {
+    return configHolder.getDispatcherThreads();
+  }
+  
+  @Override
