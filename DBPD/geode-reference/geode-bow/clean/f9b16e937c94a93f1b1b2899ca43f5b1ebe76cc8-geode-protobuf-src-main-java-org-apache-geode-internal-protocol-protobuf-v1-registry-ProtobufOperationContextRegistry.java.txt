GEODE-4819: Separating authorization out from protobuf handlers (#1674)

Separating out authentication from the logic of parsing protobuf
messages. All region operations should be done through the new
AuthenticatingCache API, which does authentication and the operation.

In a future change we should move AuthenticationCache to the core and
refactor gfsh, the REST API, and the old client to also go through this
layer.

+import java.util.Collections;
+import java.util.HashMap;
-import org.apache.geode.internal.protocol.protobuf.v1.ProtobufSerializationService;
-import org.apache.geode.management.internal.security.ResourcePermissions;
-import org.apache.geode.security.ResourcePermission;
-import org.apache.geode.security.ResourcePermission.Operation;
-import org.apache.geode.security.ResourcePermission.Resource;
-  private final Map<MessageTypeCase, ProtobufOperationContext> operationContexts =
-      new ConcurrentHashMap<>();
+  private final Map<MessageTypeCase, ProtobufOperationContext> operationContexts;
-    addContexts();
+    operationContexts = Collections.unmodifiableMap(generateContexts());
-  private final ResourcePermission noneRequired =
-      new ResourcePermission(ResourcePermission.NULL, ResourcePermission.NULL);
+  private Map<MessageTypeCase, ProtobufOperationContext> generateContexts() {
+    final Map<MessageTypeCase, ProtobufOperationContext> operationContexts = new HashMap<>();
-  private ResourcePermission skipAuthorizationCheck(Object unused,
-      ProtobufSerializationService unused2) {
-    return noneRequired;
-  }
-
-  private void addContexts() {
-            opsResp -> ClientProtocol.Message.newBuilder().setAuthenticationResponse(opsResp),
-            this::skipAuthorizationCheck));
+            opsResp -> ClientProtocol.Message.newBuilder().setAuthenticationResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setDisconnectClientResponse(opsResp),
-            this::skipAuthorizationCheck));
+            opsResp -> ClientProtocol.Message.newBuilder().setDisconnectClientResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setGetResponse(opsResp),
-            GetRequestOperationHandler::determineRequiredPermission));
+            opsResp -> ClientProtocol.Message.newBuilder().setGetResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setGetAllResponse(opsResp),
-            // May require per-key checks, will be handled by OperationHandler
-            this::skipAuthorizationCheck));
+            opsResp -> ClientProtocol.Message.newBuilder().setGetAllResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setPutResponse(opsResp),
-            PutRequestOperationHandler::determineRequiredPermission));
+            opsResp -> ClientProtocol.Message.newBuilder().setPutResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setPutAllResponse(opsResp),
-            // May require per-key checks, will be handled by OperationHandler
-            this::skipAuthorizationCheck));
+            opsResp -> ClientProtocol.Message.newBuilder().setPutAllResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setRemoveResponse(opsResp),
-            RemoveRequestOperationHandler::determineRequiredPermission));
+            opsResp -> ClientProtocol.Message.newBuilder().setRemoveResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setGetRegionNamesResponse(opsResp),
-            ResourcePermissions.DATA_READ));
+            opsResp -> ClientProtocol.Message.newBuilder().setGetRegionNamesResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setGetSizeResponse(opsResp),
-            ResourcePermissions.DATA_READ));
+            opsResp -> ClientProtocol.Message.newBuilder().setGetSizeResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setGetServerResponse(opsResp),
-            ResourcePermissions.CLUSTER_READ));
+            opsResp -> ClientProtocol.Message.newBuilder().setGetServerResponse(opsResp)));
-            new ExecuteFunctionOnRegionRequestOperationHandler(),
-            opsResp -> ClientProtocol.Message.newBuilder()
-                .setExecuteFunctionOnRegionResponse(opsResp),
-            // Resource permissions get handled per-function, since they have varying permission
-            // requirements.
-            this::skipAuthorizationCheck));
+            new ExecuteFunctionOnRegionRequestOperationHandler(), opsResp -> ClientProtocol.Message
+                .newBuilder().setExecuteFunctionOnRegionResponse(opsResp)));
-            new ExecuteFunctionOnMemberRequestOperationHandler(),
-            opsResp -> ClientProtocol.Message.newBuilder()
-                .setExecuteFunctionOnMemberResponse(opsResp),
-            // Resource permissions get handled per-function, since they have varying permission
-            // requirements.
-            this::skipAuthorizationCheck));
+            new ExecuteFunctionOnMemberRequestOperationHandler(), opsResp -> ClientProtocol.Message
+                .newBuilder().setExecuteFunctionOnMemberResponse(opsResp)));
-            new ExecuteFunctionOnGroupRequestOperationHandler(),
-            opsResp -> ClientProtocol.Message.newBuilder()
-                .setExecuteFunctionOnGroupResponse(opsResp),
-            // Resource permissions get handled per-function, since they have varying permission
-            // requirements.
-            this::skipAuthorizationCheck));
+            new ExecuteFunctionOnGroupRequestOperationHandler(), opsResp -> ClientProtocol.Message
+                .newBuilder().setExecuteFunctionOnGroupResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setOqlQueryResponse(opsResp),
-            // Perform authorization inside handler to avoid having to compile the OQL multiple
-            // times
-            this::skipAuthorizationCheck));
+            opsResp -> ClientProtocol.Message.newBuilder().setOqlQueryResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setKeySetResponse(opsResp),
-            KeySetOperationHandler::determineRequiredPermission));
+            opsResp -> ClientProtocol.Message.newBuilder().setKeySetResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setClearResponse(opsResp),
-            ClearRequestOperationHandler::determineRequiredPermission));
+            opsResp -> ClientProtocol.Message.newBuilder().setClearResponse(opsResp)));
-            opsResp -> ClientProtocol.Message.newBuilder().setPutIfAbsentResponse(opsResp),
-            PutIfAbsentRequestOperationHandler::determineRequiredPermission));
+            opsResp -> ClientProtocol.Message.newBuilder().setPutIfAbsentResponse(opsResp)));
+
+    return operationContexts;
