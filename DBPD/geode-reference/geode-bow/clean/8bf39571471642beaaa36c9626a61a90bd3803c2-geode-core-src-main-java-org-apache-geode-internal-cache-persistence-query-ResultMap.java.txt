Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The contract for a sorted set of temporary results for a query.
- * This set may be persisted on disk.
+ * The contract for a sorted set of temporary results for a query. This set may be persisted on
+ * disk.
- * This class is threadsafe. Iterators will reflect all entries added to
- * the set up until the time that the iterator was obtained. After that they
- * may or may not reflect modifications to the set while the iteration is in progress.
- * They will guarantee that entries will be returned in the correct order.
+ * This class is threadsafe. Iterators will reflect all entries added to the set up until the time
+ * that the iterator was obtained. After that they may or may not reflect modifications to the set
+ * while the iteration is in progress. They will guarantee that entries will be returned in the
+ * correct order.
-   * Add an entry to the map. If the same key exists in the 
-   * map it is replaced with the new value
+   * Add an entry to the map. If the same key exists in the map it is replaced with the new value
+   * 
+   * 
-   * This method has no effect if the key does not exist
-   * in the map.
+   *        This method has no effect if the key does not exist in the map.
-  
+
-  
+
-   * return true if this map contains the given key 
-   */ 
-  public boolean containsKey(Object e);
-  
-  /**
-   * Return all of the IndexEntries in the range between start and end. 
-   * If end < start, this will return a descending iterator going from end
-   * to start. 
+   * return true if this map contains the given key
-  CloseableIterator<Entry> iterator(Object start, boolean startInclusive, 
-      Object end, boolean endInclusive);
-  
+  public boolean containsKey(Object e);
+
+  /**
+   * Return all of the IndexEntries in the range between start and end. If end < start, this will
+   * return a descending iterator going from end to start.
+   */
+  CloseableIterator<Entry> iterator(Object start, boolean startInclusive, Object end,
+      boolean endInclusive);
+
-  
+
-  
+
-  CloseableIterator<CachedDeserializable> keyIterator(Object start, 
-      boolean startInclusive, Object end, boolean endInclusive);
-  
+  CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive,
+      Object end, boolean endInclusive);
+
-  CloseableIterator<CachedDeserializable> keyIterator(Object start, 
-      boolean startInclusive);
-  
+  CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive);
+
-  
+
+   * 
+
