Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class MembershipViewRequest extends
-  DistributionMessage implements MessageWithReply {
+public class MembershipViewRequest extends DistributionMessage implements MessageWithReply {
-  
+
-    
+
-  
+
-  public static PersistentMembershipView send(
-      InternalDistributedMember recipient, DM dm, String regionPath, boolean targetReinitializing) throws ReplyException {
-    MembershipViewRequestReplyProcessor processor = new MembershipViewRequestReplyProcessor(dm, recipient);
-    MembershipViewRequest msg = new MembershipViewRequest(regionPath, processor.getProcessorId(), targetReinitializing);
+  public static PersistentMembershipView send(InternalDistributedMember recipient, DM dm,
+      String regionPath, boolean targetReinitializing) throws ReplyException {
+    MembershipViewRequestReplyProcessor processor =
+        new MembershipViewRequestReplyProcessor(dm, recipient);
+    MembershipViewRequest msg =
+        new MembershipViewRequest(regionPath, processor.getProcessorId(), targetReinitializing);
-  
-  public static Set<PersistentMembershipView> send(
-      Set<InternalDistributedMember> recipients, DM dm, String regionPath) throws ReplyException {
-    MembershipViewRequestReplyProcessor processor = new MembershipViewRequestReplyProcessor(dm, recipients);
-    MembershipViewRequest msg = new MembershipViewRequest(regionPath, processor.getProcessorId(), false);
+
+  public static Set<PersistentMembershipView> send(Set<InternalDistributedMember> recipients, DM dm,
+      String regionPath) throws ReplyException {
+    MembershipViewRequestReplyProcessor processor =
+        new MembershipViewRequestReplyProcessor(dm, recipients);
+    MembershipViewRequest msg =
+        new MembershipViewRequest(regionPath, processor.getProcessorId(), false);
-  
-  @Override  
+
+  @Override
-    return this.targetReinitializing ? DistributionManager.WAITING_POOL_EXECUTOR :
-                              DistributionManager.HIGH_PRIORITY_EXECUTOR;
+    return this.targetReinitializing ? DistributionManager.WAITING_POOL_EXECUTOR
+        : DistributionManager.HIGH_PRIORITY_EXECUTOR;
-    int initLevel = this.targetReinitializing ? LocalRegion.AFTER_INITIAL_IMAGE
-        : LocalRegion.ANY_INIT;
+    int initLevel =
+        this.targetReinitializing ? LocalRegion.AFTER_INITIAL_IMAGE : LocalRegion.ANY_INIT;
-      if(region instanceof DistributedRegion) {
+      if (region instanceof DistributedRegion) {
-      } else if ( region == null) {
-        Bucket proxy = PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(), this.regionPath, false);
-        if(proxy != null) {
+      } else if (region == null) {
+        Bucket proxy = PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(),
+            this.regionPath, false);
+        if (proxy != null) {
-      if(persistenceAdvisor != null) {
-        view= persistenceAdvisor.getMembershipView();
+      if (persistenceAdvisor != null) {
+        view = persistenceAdvisor.getMembershipView();
-//      exception = new ReplyException(e);
+      // exception = new ReplyException(e);
-    }
-    catch (CancelException e) {
-//      exception = new ReplyException(e);
+    } catch (CancelException e) {
+      // exception = new ReplyException(e);
-    }
-    catch(VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch(Throwable t) {
+    } catch (Throwable t) {
-    }
-    finally {
+    } finally {
-      replyMsg.view= view;
+      replyMsg.view = view;
-        logger.debug("MembershipViewRequest returning view {} for region {}", view, this.regionPath);
+        logger.debug("MembershipViewRequest returning view {} for region {}", view,
+            this.regionPath);
-      if(exception != null) {
+      if (exception != null) {
-  
+
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  
+
-    
-    
-    public MembershipViewRequestReplyProcessor(DM dm,
-        InternalDistributedMember member) {
+
+
+    public MembershipViewRequestReplyProcessor(DM dm, InternalDistributedMember member) {
-    
-    public MembershipViewRequestReplyProcessor(DM dm,
-        Set<InternalDistributedMember> members) {
+
+    public MembershipViewRequestReplyProcessor(DM dm, Set<InternalDistributedMember> members) {
-      if(views.isEmpty()) {
-        //TODO prperist internationalize.
+      if (views.isEmpty()) {
+        // TODO prperist internationalize.
-    
+
-      if(msg instanceof MembershipViewReplyMessage) {
+      if (msg instanceof MembershipViewReplyMessage) {
-        if(view != null) {
-          synchronized(this) {
+        if (view != null) {
+          synchronized (this) {
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      if(hasView) {
+      if (hasView) {
-      if(view == null) {
+      if (view == null) {
