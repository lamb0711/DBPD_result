GEODE-6588: Cleanup static analyzer warnings. (#3570)


+
-import org.xml.sax.SAXNotRecognizedException;
-import org.xml.sax.SAXNotSupportedException;
-  private boolean useSchema = true;
+  private boolean useSchema;
-    (new CacheXmlGenerator(cache, useSchema, version, true)).generate(pw);
+    new CacheXmlGenerator(cache, useSchema, version, true).generate(pw);
-   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
-   *        this value is ignored and always true.
-   */
-  public static void generate(Cache cache, PrintWriter pw, boolean useSchema) {
-    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST, true))
-        .generate(pw);
-  }
-
-  /**
-   * Examines the given <code>Cache</code> and from it generates XML data that is written to the
-   * given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   *
-   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
-   *        this value is ignored and always true.
-  public static void generate(Cache cache, PrintWriter pw, boolean useSchema,
-      boolean includeKeysValues) {
-    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST,
-        includeKeysValues)).generate(pw);
+  public static void generate(Cache cache, PrintWriter pw, boolean includeKeysValues) {
+    new CacheXmlGenerator(cache, true, VERSION_LATEST, includeKeysValues).generate(pw);
+   * @deprecated Only used for rolling upgrades
+  @Deprecated
-    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST,
-        includeKeysValues, includeDefaults)).generate(pw);
+    new CacheXmlGenerator(cache, true, VERSION_LATEST, includeKeysValues, includeDefaults)
+        .generate(pw);
+  }
+
+  /**
+   * @param includeDefaults set to false to cause generated xml to not have defaults values.
+   */
+  public static void generate(Cache cache, PrintWriter pw, boolean includeKeysValues,
+      boolean includeDefaults) {
+    new CacheXmlGenerator(cache, true, VERSION_LATEST, includeKeysValues, includeDefaults)
+        .generate(pw);
-    generate(cache, pw, true /* useSchema */);
+    new CacheXmlGenerator(cache, true, VERSION_LATEST, true).generate(pw);
-    (new CacheXmlGenerator(cache, useSchema, version, true)).generate(pw);
+    new CacheXmlGenerator(cache, useSchema, version, true).generate(pw);
-   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
-   *        this value is ignored and always true.
-   */
-  public static void generate(ClientCache cache, PrintWriter pw, boolean useSchema) {
-    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST, true))
-        .generate(pw);
-  }
-
-  /**
-   * Examines the given <code>ClientCache</code> and from it generates XML data that is written to
-   * the given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   *
-   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
-   *        this value is ignored and always true.
-  public static void generate(ClientCache cache, PrintWriter pw, boolean useSchema,
-      boolean includeKeysValues) {
-    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST,
-        includeKeysValues)).generate(pw);
+  public static void generate(ClientCache cache, PrintWriter pw, boolean includeKeysValues) {
+    new CacheXmlGenerator(cache, true, VERSION_LATEST, includeKeysValues).generate(pw);
-    generate(cache, pw, true /* useSchema */);
+    new CacheXmlGenerator(cache, true, VERSION_LATEST, true).generate(pw);
-      this.creation = (CacheCreation) cache;
-      this.creation.startingGenerate();
+      creation = (CacheCreation) cache;
+      creation.startingGenerate();
-        this.creation = new ClientCacheCreation();
+        creation = new ClientCacheCreation();
-          this.creation.setCopyOnRead(cache.getCopyOnRead());
+          creation.setCopyOnRead(cache.getCopyOnRead());
-        this.creation = new CacheCreation(!generateDefaults);
+        creation = new CacheCreation(!generateDefaults);
-          this.creation.setLockLease(cache.getLockLease());
+          creation.setLockLease(cache.getLockLease());
-          this.creation.setLockTimeout(cache.getLockTimeout());
+          creation.setLockTimeout(cache.getLockTimeout());
-          this.creation.setSearchTimeout(cache.getSearchTimeout());
+          creation.setSearchTimeout(cache.getSearchTimeout());
-          this.creation.setIsServer(cache.isServer());
+          creation.setIsServer(cache.isServer());
-          this.creation.setCopyOnRead(cache.getCopyOnRead());
+          creation.setCopyOnRead(cache.getCopyOnRead());
-      this.creation = new CacheCreation(!generateDefaults);
+      creation = new CacheCreation(!generateDefaults);
-        this.creation.setLockLease(cache.getLockLease());
+        creation.setLockLease(cache.getLockLease());
-        this.creation.setLockTimeout(cache.getLockTimeout());
+        creation.setLockTimeout(cache.getLockTimeout());
-        this.creation.setSearchTimeout(cache.getSearchTimeout());
+        creation.setSearchTimeout(cache.getSearchTimeout());
-        this.creation.setIsServer(cache.isServer());
+        creation.setIsServer(cache.isServer());
-        this.creation.setCopyOnRead(cache.getCopyOnRead());
+        creation.setCopyOnRead(cache.getCopyOnRead());
-    this.generateDefaults = true;
+
+    generateDefaults = true;
-      this.creation = (ClientCacheCreation) cache;
-      this.creation.startingGenerate();
-
+      creation = (ClientCacheCreation) cache;
+      creation.startingGenerate();
-      this.creation = new ClientCacheCreation();
-      if (generateDefaults() || cache.getCopyOnRead()) {
-        this.creation.setCopyOnRead(cache.getCopyOnRead());
+      creation = new ClientCacheCreation();
+      if (cache.getCopyOnRead()) {
+        creation.setCopyOnRead(cache.getCopyOnRead());
-    return this.generateDefaults;
+    return generateDefaults;
-    this.cache = null;
-    this.useSchema = true;
-    this.version = CacheXmlVersion.valueForVersion(VERSION_LATEST);
-    this.generateDefaults = true;
+    cache = null;
+    useSchema = true;
+    version = CacheXmlVersion.valueForVersion(VERSION_LATEST);
+    generateDefaults = true;
-    this.creation = new CacheCreation();
+    creation = new CacheCreation();
-      RuntimeException ex2 = new RuntimeException(
-          "An Exception was thrown while generating XML.");
-      ex2.initCause(ex);
-      throw ex2;
+      throw new RuntimeException("An Exception was thrown while generating XML.", ex);
-    Assert.assertTrue(this.handler != null);
+    Assert.assertTrue(handler != null);
-    boolean isClientCache = this.creation instanceof ClientCacheCreation;
+    boolean isClientCache = creation instanceof ClientCacheCreation;
-    if (this.useSchema) {
+    if (useSchema) {
-        // TODO jbarrett - localize
-      addAttribute(atts, VERSION, this.version.getVersion());
+      addAttribute(atts, VERSION, version.getVersion());
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_5) >= 0) {
-      // TODO
-    }
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
-      // TODO
-    }
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {
-      // TODO
-    }
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {
-      // TODO
-    }
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
-      // TODO
-    }
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
-      // TODO
-    }
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
-      // TODO
-    }
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_4_0) >= 0) {
-    if (this.cache != null) {
+    if (cache != null) {
-        generate(this.cache.getCacheTransactionManager());
-      } else if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
-        generate(this.cache.getCacheTransactionManager());
+        generate(cache.getCacheTransactionManager());
+      } else if (version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
+        generate(cache.getCacheTransactionManager());
-      generateDynamicRegionFactory(this.cache);
+      generateDynamicRegionFactory(cache);
-        if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
+        if (version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
-          generateGatewayReceiver(this.cache);
-          generateAsyncEventQueue(this.cache);
+          generateGatewayReceiver(cache);
+          generateAsyncEventQueue(cache);
-      if (!isClientCache && this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
-        if (this.cache.getGatewayConflictResolver() != null) {
-          generate(GATEWAY_CONFLICT_RESOLVER, this.cache.getGatewayConflictResolver());
+      if (!isClientCache && version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
+        if (cache.getGatewayConflictResolver() != null) {
+          generate(GATEWAY_CONFLICT_RESOLVER, cache.getGatewayConflictResolver());
-        for (Iterator iter = this.cache.getCacheServers().iterator(); iter.hasNext();) {
-          CacheServer bridge = (CacheServer) iter.next();
+        for (CacheServer bridge : cache.getCacheServers()) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
-        if (this.cache instanceof GemFireCacheImpl) {
+        if (cache instanceof GemFireCacheImpl) {
-          pools = this.creation.getPools().values().iterator();
+          pools = creation.getPools().values().iterator();
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
-        if (this.cache instanceof GemFireCacheImpl) {
-          InternalCache gfc = (InternalCache) this.cache;
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
+        if (cache instanceof GemFireCacheImpl) {
+          InternalCache gfc = (InternalCache) cache;
-          for (DiskStore ds : this.creation.listDiskStores()) {
+          for (DiskStore ds : creation.listDiskStores()) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_1) >= 0) {
-        Map namedAttributes = this.cache.listRegionAttributes();
-        for (Iterator iter = namedAttributes.entrySet().iterator(); iter.hasNext();) {
-          Map.Entry entry = (Map.Entry) iter.next();
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_4_1) >= 0) {
+        Map namedAttributes = cache.listRegionAttributes();
+        for (Object o : namedAttributes.entrySet()) {
+          Map.Entry entry = (Map.Entry) o;
-            if (this.creation instanceof ClientCacheCreation) {
+            if (creation instanceof ClientCacheCreation) {
-        TreeSet rSet = new TreeSet(new RegionComparator());
-        rSet.addAll(this.cache.rootRegions());
-        Iterator it = rSet.iterator();
-        while (it.hasNext()) {
-          Region root = (Region) it.next();
-          generateRegion(root);
+        TreeSet<Region<?, ?>> rSet = new TreeSet<>(new RegionComparator());
+        rSet.addAll(cache.rootRegions());
+        for (Region<?, ?> region : rSet) {
+          generateRegion(region);
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {
-        if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
-          if (this.cache instanceof GemFireCacheImpl) {
-            InternalCache internalCache = (InternalCache) this.cache;
+        if (version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
+          if (cache instanceof GemFireCacheImpl) {
+            InternalCache internalCache = (InternalCache) cache;
-            for (File file : this.creation.getBackupFiles()) {
+            for (File file : creation.getBackupFiles()) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
-      if (generateDefaults() || this.cache.getPdxReadSerialized())
+      if (generateDefaults() || cache.getPdxReadSerialized())
-            Boolean.toString(this.cache.getPdxReadSerialized()));
+            Boolean.toString(cache.getPdxReadSerialized()));
-      if (generateDefaults() || this.cache.getPdxIgnoreUnreadFields())
+      if (generateDefaults() || cache.getPdxIgnoreUnreadFields())
-            Boolean.toString(this.cache.getPdxIgnoreUnreadFields()));
+            Boolean.toString(cache.getPdxIgnoreUnreadFields()));
-      if (generateDefaults() || this.cache.getPdxPersistent())
-        atts.addAttribute("", "", PERSISTENT, "", Boolean.toString(this.cache.getPdxPersistent()));
+      if (generateDefaults() || cache.getPdxPersistent())
+        atts.addAttribute("", "", PERSISTENT, "", Boolean.toString(cache.getPdxPersistent()));
-          || this.cache.getPdxDiskStore() != null && !this.cache.getPdxDiskStore().equals(""))
-        atts.addAttribute("", "", DISK_STORE_NAME, "", this.cache.getPdxDiskStore());
+          || cache.getPdxDiskStore() != null && !cache.getPdxDiskStore().equals(""))
+        atts.addAttribute("", "", DISK_STORE_NAME, "", cache.getPdxDiskStore());
-    if (!generateDefaults() && this.cache.getPdxSerializer() == null && atts.getLength() == 0) {
+    if (!generateDefaults() && cache.getPdxSerializer() == null && atts.getLength() == 0) {
-    if (this.cache.getPdxSerializer() != null) {
-      generate(PDX_SERIALIZER, this.cache.getPdxSerializer());
+    if (cache.getPdxSerializer() != null) {
+      generate(PDX_SERIALIZER, cache.getPdxSerializer());
-    if (this.cache.getInitializer() != null) {
-      generate(INITIALIZER, this.cache.getInitializer(), this.cache.getInitializerProps());
+    if (cache.getInitializer() != null) {
+      generate(cache.getInitializer(), cache.getInitializerProps());
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
-    Set<Region> colocatedChildRegions = new HashSet<Region>();
-    Set<Region> generatedRegions = new HashSet<Region>();
+    Set<Region<?, ?>> colocatedChildRegions = new HashSet<>();
+    Set<Region> generatedRegions = new HashSet<>();
-    TreeSet rSet = new TreeSet(new RegionComparator());
-    rSet.addAll(this.cache.rootRegions());
-    Iterator it = rSet.iterator();
-    while (it.hasNext()) {
-      Region root = (Region) it.next();
+    TreeSet<Region<?, ?>> rSet = new TreeSet<>(new RegionComparator());
+    rSet.addAll(cache.rootRegions());
+    for (Region<?, ?> root : rSet) {
-        for (Object object : root.subregions(false)) {
-          Region subregion = (Region) object;
+        for (Region<?, ?> subregion : root.subregions(false)) {
-    TreeSet rColSet = new TreeSet(new RegionComparator());
+    TreeSet<Region<?, ?>> rColSet = new TreeSet<>(new RegionComparator());
-    Iterator colIter = rColSet.iterator();
-    while (colIter.hasNext()) {
-      Region root = (Region) colIter.next();
+    for (Region<?, ?> root : rColSet) {
-    if (this.cache instanceof CacheCreation && this.creation.hasResourceManager()) {
+    if (cache instanceof CacheCreation && creation.hasResourceManager()) {
-      if (this.creation.getResourceManager().hasCriticalHeap()) {
-        float chp = this.creation.getResourceManager().getCriticalHeapPercentage();
+      if (creation.getResourceManager().hasCriticalHeap()) {
+        float chp = creation.getResourceManager().getCriticalHeapPercentage();
-      if (this.creation.getResourceManager().hasEvictionHeap()) {
-        float ehp = this.creation.getResourceManager().getEvictionHeapPercentage();
+      if (creation.getResourceManager().hasEvictionHeap()) {
+        float ehp = creation.getResourceManager().getEvictionHeapPercentage();
-      if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
-        if (this.creation.getResourceManager().hasCriticalOffHeap()) {
-          float chp = this.creation.getResourceManager().getCriticalOffHeapPercentage();
+      if (version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
+        if (creation.getResourceManager().hasCriticalOffHeap()) {
+          float chp = creation.getResourceManager().getCriticalOffHeapPercentage();
-        if (this.creation.getResourceManager().hasEvictionOffHeap()) {
-          float ehp = this.creation.getResourceManager().getEvictionOffHeapPercentage();
+        if (creation.getResourceManager().hasEvictionOffHeap()) {
+          float ehp = creation.getResourceManager().getEvictionOffHeapPercentage();
-    } else if (this.cache instanceof GemFireCacheImpl) {
+    } else if (cache instanceof GemFireCacheImpl) {
-        int chp = (int) this.cache.getResourceManager().getCriticalHeapPercentage();
+        int chp = (int) cache.getResourceManager().getCriticalHeapPercentage();
-        int ehp = (int) this.cache.getResourceManager().getEvictionHeapPercentage();
+        int ehp = (int) cache.getResourceManager().getEvictionHeapPercentage();
-      if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
-          int chp = (int) this.cache.getResourceManager().getCriticalOffHeapPercentage();
+          int chp = (int) cache.getResourceManager().getCriticalOffHeapPercentage();
-          int ehp = (int) this.cache.getResourceManager().getEvictionOffHeapPercentage();
+          int ehp = (int) cache.getResourceManager().getEvictionOffHeapPercentage();
-    final SerializerCreation sc = this.creation.getSerializerCreation();
+    final SerializerCreation sc = creation.getSerializerCreation();
-    if (this.cache instanceof CacheCreation) {
-      if (this.creation.hasFunctionService()) {
-        functions = this.creation.getFunctionServiceCreation().getFunctionList();
+    if (cache instanceof CacheCreation) {
+      if (creation.hasFunctionService()) {
+        functions = creation.getFunctionServiceCreation().getFunctionList();
-  private void generateClientHaQueue(CacheServer bridge) throws SAXException {
+  private void generateClientHaQueue(CacheServer bridge) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_0) < 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_4_0) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_1) < 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_4_1) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) < 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_0) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) < 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_1) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) < 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) < 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_8_0) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
-          for (int i = 0; i < groups.length; i++) {
-            String group = groups[i];
+          for (String group : groups) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
-  class RegionComparator implements Comparator {
+  static class RegionComparator implements Comparator<Region> {
-    public int compare(Object o1, Object o2) {
-      return (((Region) o1).getFullPath().compareTo(((Region) o2).getFullPath()));
-    }
-
-    @Override
-    public boolean equals(Object anObj) {
-      return ((Region) this).getFullPath().equals(((Region) anObj).getFullPath());
-    }
-
-    @Override
-    public int hashCode() {
-      return ((Region) this).getFullPath().hashCode();
+    public int compare(Region o1, Region o2) {
+      return o1.getFullPath().compareTo(o2.getFullPath());
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) < 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) < 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) > 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_1) > 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) > 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_1) > 0) {
-        Iterator/* <InetSocketAddress> */ locators = cp.getLocators().iterator();
-        while (locators.hasNext()) {
-          InetSocketAddress addr = (InetSocketAddress) locators.next();
+        for (InetSocketAddress addr : cp.getLocators()) {
-        Iterator/* <InetSocketAddress> */ servers = cp.getServers().iterator();
-        while (servers.hasNext()) {
-          InetSocketAddress addr = (InetSocketAddress) servers.next();
+        for (InetSocketAddress addr : cp.getServers()) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_0) < 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_4_0) < 0) {
-      for (int i = 0; i < listeners.length; i++) {
-        generate(TRANSACTION_LISTENER, listeners[i]);
+      for (TransactionListener listener : listeners) {
+        generate(TRANSACTION_LISTENER, listener);
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_1) < 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_4_1) < 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
-        if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) < 0) {
+        if (version.compareTo(CacheXmlVersion.GEMFIRE_8_0) < 0) {
-    Properties props = null;
+    Properties props;
-    Properties props = null;
+    Properties props;
-    Properties props = null;
+    Properties props;
-  private void generate(Region region, String elementName) throws SAXException {
+  private void generate(Region<?, ?> region, String elementName) throws SAXException {
-    Collection<Index> indexesForRegion = this.cache.getQueryService().getIndexes(region);
+    Collection<Index> indexesForRegion = cache.getQueryService().getIndexes(region);
-          for (Iterator iter = region.entrySet(false).iterator(); iter.hasNext();) {
-            Region.Entry entry = (Region.Entry) iter.next();
+          for (Object o : region.entrySet(false)) {
+            Region.Entry entry = (Region.Entry) o;
-        for (Iterator iter = region.entrySet(false).iterator(); iter.hasNext();) {
-          Region.Entry entry = (Region.Entry) iter.next();
+        for (Object o : region.entrySet(false)) {
+          Region.Entry entry = (Region.Entry) o;
-    TreeSet rSet = new TreeSet(new RegionComparator());
+    TreeSet<Region<?, ?>> rSet = new TreeSet<>(new RegionComparator());
-    for (Iterator iter = rSet.iterator(); iter.hasNext();) {
-      Region subregion = (Region) iter.next();
+    for (Region<?, ?> subregion : rSet) {
-  private void generate(String id, RegionAttributes attrs) throws SAXException {
+  private void generate(String id, RegionAttributes<?, ?> attrs) throws SAXException {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
-        if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
+        if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
-          if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {
+          if (version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
-        if (generateDefaults() || attrs.getConcurrencyChecksEnabled() != true/* fixes bug 46654 */)
+        if (generateDefaults() || !attrs.getConcurrencyChecksEnabled())
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_4_0) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0)
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0)
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
-        Set<String> senderIds = new HashSet<String>(attrs.getGatewaySenderIds());
+        Set<String> senderIds = new HashSet<>(attrs.getGatewaySenderIds());
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_7_0) >= 0) {
-        Set<String> asyncEventQueueIds = new HashSet<String>(attrs.getAsyncEventQueueIds());
+        Set<String> asyncEventQueueIds = new HashSet<>(attrs.getAsyncEventQueueIds());
-    if (this.version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEODE_1_0) >= 0) {
-        && (generateDefaults() || this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0)) {
+        && (generateDefaults() || version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0)) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_0) >= 0) {
-      for (int i = 0; i < listeners.length; i++) {
-        generate(CACHE_LISTENER, listeners[i]);
+      for (CacheListener listener : listeners) {
+        generate(CACHE_LISTENER, listener);
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
-  private void generate(String kind, Declarable d, Properties p) throws SAXException {
+  private void generate(Declarable d, Properties p) throws SAXException {
-    handler.startElement("", kind, kind, EMPTY);
+    handler.startElement("", CacheXml.INITIALIZER, CacheXml.INITIALIZER, EMPTY);
-    handler.endElement("", kind, kind);
+    handler.endElement("", CacheXml.INITIALIZER, CacheXml.INITIALIZER);
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {
+      if (version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {
-    } else {
-      // all other algos are ignored
-      generate((Declarable) custom, false);
+      generate(custom, false);
-    String interestString = null;
+    String interestString;
-  private void generate(PartitionAttributes pa) throws SAXException {
+  private void generate(PartitionAttributes<?, ?> pa) throws SAXException {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_1) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_6_0) >= 0) {
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_8) >= 0) {
-        generate(PARTITION_RESOLVER, rr);
+        generate(rr);
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0) {
-      for (int i = 0; i < listeners.length; i++) {
-        PartitionListener listener = listeners[i];
+      for (PartitionListener listener : listeners) {
-          generate(PARTITION_LISTENER, listener);
+          generate(listener);
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
-        generateFixedPartitionAttributes(FIXED_PARTITION_ATTRIBUTES, staticAttrs);
+        generateFixedPartitionAttributes(staticAttrs);
-    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) < 0) {
+    if (version.compareTo(CacheXmlVersion.GEMFIRE_5_1) < 0) {
-  private void generate(String kind, PartitionResolver rr) throws SAXException {
+  private void generate(PartitionResolver rr) throws SAXException {
-    handler.startElement("", kind, kind, EMPTY);
+    handler.startElement("", CacheXml.PARTITION_RESOLVER, CacheXml.PARTITION_RESOLVER, EMPTY);
-    Properties props = null;
+    Properties props;
-    handler.endElement("", kind, kind);
+    handler.endElement("", CacheXml.PARTITION_RESOLVER, CacheXml.PARTITION_RESOLVER);
-  private void generate(String kind, PartitionListener pl) throws SAXException {
+  private void generate(PartitionListener pl) throws SAXException {
-    handler.startElement("", kind, kind, EMPTY);
+    handler.startElement("", CacheXml.PARTITION_LISTENER, CacheXml.PARTITION_LISTENER, EMPTY);
-    Properties props = null;
+    Properties props;
-    handler.endElement("", kind, kind);
+    handler.endElement("", CacheXml.PARTITION_LISTENER, CacheXml.PARTITION_LISTENER);
-  private void generateFixedPartitionAttributes(String kind,
-      List<FixedPartitionAttributes> allStaticAttrs) throws SAXException {
+  private void generateFixedPartitionAttributes(List<FixedPartitionAttributes> allStaticAttrs)
+      throws SAXException {
-      handler.startElement("", kind, kind, sAtts);
-      handler.endElement("", kind, kind);
+      handler.startElement("", CacheXml.FIXED_PARTITION_ATTRIBUTES,
+          CacheXml.FIXED_PARTITION_ATTRIBUTES, sAtts);
+      handler.endElement("", CacheXml.FIXED_PARTITION_ATTRIBUTES,
+          CacheXml.FIXED_PARTITION_ATTRIBUTES);
-    for (Iterator iter = roles.iterator(); iter.hasNext();) {
-      Role role = (Role) iter.next();
+    for (Object o : roles) {
+      Role role = (Role) o;
-    for (Iterator iter = props.entrySet().iterator(); iter.hasNext();) {
-      Map.Entry entry = (Map.Entry) iter.next();
+    for (Map.Entry<Object, Object> entry : props.entrySet()) {
-
-      } else {
-        // Ignore it
-    return this.handler;
+    return handler;
-  public boolean getFeature(String name)
-      throws SAXNotRecognizedException, SAXNotSupportedException {
+  public boolean getFeature(String name) {
-  public void setFeature(String name, boolean value)
-      throws SAXNotRecognizedException, SAXNotSupportedException {
+  public void setFeature(String name, boolean value) {
-  public Object getProperty(String name)
-      throws SAXNotRecognizedException, SAXNotSupportedException {
+  public Object getProperty(String name) {
-  public void setProperty(String name, Object value)
-      throws SAXNotRecognizedException, SAXNotSupportedException {
+  public void setProperty(String name, Object value) {
-  public void parse(String systemId) throws IOException, SAXException {
+  public void parse(String systemId) {
-  public static void main(String args[]) throws IOException {
+  public static void main(String[] args) throws IOException {
