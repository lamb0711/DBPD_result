Merge branch 'release/1.4.0'

-import org.apache.commons.lang.StringUtils;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.InternalGemFireError;
-import org.apache.geode.internal.DataSerializableFixedID;
-import org.apache.geode.internal.Version;
-import org.apache.geode.management.internal.configuration.domain.Configuration;
-import org.apache.geode.management.internal.configuration.utils.XmlUtils;
-import org.xml.sax.SAXException;
-
+
-/***
- * Response containing the configuration requested by the {@link ConfigurationRequest}
- */
+import org.apache.commons.lang.StringUtils;
+import org.xml.sax.SAXException;
+
+import org.apache.geode.DataSerializer;
+import org.apache.geode.InternalGemFireError;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.internal.DataSerializableFixedID;
+import org.apache.geode.internal.Version;
+import org.apache.geode.management.internal.configuration.domain.Configuration;
+import org.apache.geode.management.internal.configuration.utils.XmlUtils;
+
-  private Map<String, Configuration> requestedConfiguration = new HashMap<String, Configuration>();
-  private byte[][] jarBytes;
-  private String[] jarNames;
+  private Map<String, Configuration> requestedConfiguration = new HashMap<>();
+  private Map<String, Set<String>> jarNames = new HashMap<>();
-  public ConfigurationResponse() {
-
-  }
-
-  public ConfigurationResponse(Map<String, Configuration> requestedConfiguration) {
-    this.requestedConfiguration.putAll(requestedConfiguration);
-  }
+  // This is set to the member from which this object was received
+  private transient DistributedMember member;
-    DataSerializer.writeHashMap((HashMap<?, ?>) requestedConfiguration, out);
-    DataSerializer.writeStringArray(jarNames, out);
-    DataSerializer.writeArrayOfByteArrays(jarBytes, out);
+    DataSerializer.writeHashMap(requestedConfiguration, out);
+    DataSerializer.writeHashMap(jarNames, out);
-    this.jarNames = DataSerializer.readStringArray(in);
-    this.jarBytes = DataSerializer.readArrayOfByteArrays(in);
+    this.jarNames = DataSerializer.readHashMap(in);
-  public void setRequestedConfiguration(Map<String, Configuration> requestedConfiguration) {
-    this.requestedConfiguration = requestedConfiguration;
-  }
-
-
-  public String[] getJarNames() {
-    return this.jarNames;
+  public void addJar(String group, Set<String> jarNames) {
+    this.jarNames.put(group, jarNames);
-  public byte[][] getJars() {
-    return this.jarBytes;
+  public Map<String, Set<String>> getJarNames() {
+    return jarNames;
-  public void addJarsToBeDeployed(String[] jarNames, byte[][] jarBytes) {
-    this.jarNames = jarNames;
-    this.jarBytes = jarBytes;
+  public DistributedMember getMember() {
+    return member;
-  // TODO Sourabh, please review for correctness
+  public void setMember(DistributedMember member) {
+    this.member = member;
+  }
+
-
-  public boolean failedToGetSharedConfig() {
-    return failedToGetSharedConfig;
-  }
-
-  public void setFailedToGetSharedConfig(boolean failedToGetSharedConfig) {
-    this.failedToGetSharedConfig = failedToGetSharedConfig;
-  }
-
-
