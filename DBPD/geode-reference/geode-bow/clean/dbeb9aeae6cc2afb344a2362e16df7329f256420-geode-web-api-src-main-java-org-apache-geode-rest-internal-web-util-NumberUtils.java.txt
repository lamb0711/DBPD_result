Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    return Byte.class.equals(klass)
-        || byte.class.equals(klass)
-        || Short.class.equals(klass)
-        || short.class.equals(klass)
-        || Integer.class.equals(klass)
-        || int.class.equals(klass)
-        || Long.class.equals(klass)
-        || long.class.equals(klass)
-        || Float.class.equals(klass)
-        || float.class.equals(klass)
-        || Double.class.equals(klass)
-        || double.class.equals(klass)
-        || Boolean.class.equals(klass)
-        || boolean.class.equals(klass)
-        || String.class.equals(klass);
-  }        
-  
-  public static boolean isPrimitiveOrObject(final String type) {
-    return "byte".equalsIgnoreCase(type)
-        || "short".equalsIgnoreCase(type)
-        || "int".equalsIgnoreCase(type)
-        || "long".equalsIgnoreCase(type)
-        || "float".equalsIgnoreCase(type)
-        || "double".equalsIgnoreCase(type)
-        || "boolean".equalsIgnoreCase(type)
-        || "string".equalsIgnoreCase(type);
+    return Byte.class.equals(klass) || byte.class.equals(klass) || Short.class.equals(klass)
+        || short.class.equals(klass) || Integer.class.equals(klass) || int.class.equals(klass)
+        || Long.class.equals(klass) || long.class.equals(klass) || Float.class.equals(klass)
+        || float.class.equals(klass) || Double.class.equals(klass) || double.class.equals(klass)
+        || Boolean.class.equals(klass) || boolean.class.equals(klass) || String.class.equals(klass);
-  
-  public static boolean isValuePrimitiveType(final Object value){
+
+  public static boolean isPrimitiveOrObject(final String type) {
+    return "byte".equalsIgnoreCase(type) || "short".equalsIgnoreCase(type)
+        || "int".equalsIgnoreCase(type) || "long".equalsIgnoreCase(type)
+        || "float".equalsIgnoreCase(type) || "double".equalsIgnoreCase(type)
+        || "boolean".equalsIgnoreCase(type) || "string".equalsIgnoreCase(type);
+  }
+
+  public static boolean isValuePrimitiveType(final Object value) {
-  
-  @SuppressWarnings({ "rawtypes", "unchecked" })
+
+  @SuppressWarnings({"rawtypes", "unchecked"})
-    }else {
+    } else {
-        throw new IllegalArgumentException("Failed to convert input key to "
-            + type + " Msg : " + e.getMessage());
+        throw new IllegalArgumentException(
+            "Failed to convert input key to " + type + " Msg : " + e.getMessage());
-      
+
