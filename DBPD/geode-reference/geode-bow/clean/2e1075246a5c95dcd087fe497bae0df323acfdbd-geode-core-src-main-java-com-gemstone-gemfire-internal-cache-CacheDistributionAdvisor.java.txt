Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreFactoryImpl;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreImpl;
-  private static final int MEMBER_UNINITIALIZED_MASK = 0x40000;
+  // unused 0x40000;
+  private static final int CACHE_SERVICE_PROFILES_MASK = 0x1000000;
+
-        if (!prof.regionInitialized          // fix for bug 41102
-            || prof.memberUnInitialized) {
+        if (!prof.regionInitialized) { // fix for bug 41102
-   * @since 5.0
+   * @since GemFire 5.0
-          // if member is not yet initialized, exclude
-          if (cp.memberUnInitialized) {
-            return false;
-          }
-        if (cp.dataPolicy.withReplication() && cp.regionInitialized
-            && !cp.memberUnInitialized) {
+        if (cp.dataPolicy.withReplication() && cp.regionInitialized) {
-        // if member is not yet initialized, exclude
-        if (cp.memberUnInitialized) {
-          return false;
-        }
-   * @since 5.5
+   * @since GemFire 5.5
-     * @since prpersist this field is now overloaded for partitioned regions with persistence.
+     * @since GemFire prpersist this field is now overloaded for partitioned regions with persistence.
-    /**
-     * True when member is still not ready to receive cache operations. Note
-     * that {@link #regionInitialized} may be still true so other members can
-     * proceed with GII etc. Currently used by SQLFabric to indicate that DDL
-     * replay is in progress and so cache operations/functions should not be
-     * routed to that node.
-     */
-    public boolean memberUnInitialized = false;
+    public List<CacheServiceProfile> cacheServiceProfiles = new ArrayList<>();
+
-      if (this.memberUnInitialized) s |= MEMBER_UNINITIALIZED_MASK;
+      if (!this.cacheServiceProfiles.isEmpty()) s |= CACHE_SERVICE_PROFILES_MASK;
-      this.memberUnInitialized = (s & MEMBER_UNINITIALIZED_MASK) != 0;
-     * @since 5.0
+     * @since GemFire 5.0
+    public void addCacheServiceProfile(CacheServiceProfile profile) {
+      this.cacheServiceProfiles.add(profile);
+    }
+
+    private boolean hasCacheServiceProfiles(int bits) {
+      return (bits & CACHE_SERVICE_PROFILES_MASK) != 0;
+    }
+
+      if (!cacheServiceProfiles.isEmpty()) {
+        DataSerializer.writeObject(cacheServiceProfiles, out);
+      }
-    private void writeSet(Set<String> set, DataOutput out) throws IOException {
+    private void writeSet(Set<?> set, DataOutput out) throws IOException {
+      if (hasCacheServiceProfiles(bits)) {
+        cacheServiceProfiles = DataSerializer.readObject(in);
+      }
-      sb.append("; memberUnInitialized=").append(
-          String.valueOf(this.memberUnInitialized));
+      sb.append("; cacheServiceProfiles=" + this.cacheServiceProfiles);
-   * @since 5.1
+   * @since GemFire 5.1
-   * @since 5.8
+   * @since GemFire 5.8
-   * @since prPersistSprint1
+   * @since GemFire prPersistSprint1
-   * @since 5.8
+   * @since GemFire 5.8
-   * @since 5.8
+   * @since GemFire 5.8
-          /*Since HDFS queues are created only when a region is created, this check is 
-           * unnecessary. Also this check is creating problem because hdfs queue is not 
-           * created on an accessor. Hence removing this check for hdfs queues. */
-          Set<String> allAsyncEventIdsNoHDFS = removeHDFSQueues(allAsyncEventIds);
-          Set<String> profileQueueIdsNoHDFS = removeHDFSQueues(cp.asyncEventQueueIds);
-          if (allAsyncEventIdsNoHDFS.equals(profileQueueIdsNoHDFS)) {
+          if (allAsyncEventIds.equals(cp.asyncEventQueueIds)) {
-            differAsycnQueueIds.add(allAsyncEventIdsNoHDFS);
-            differAsycnQueueIds.add(profileQueueIdsNoHDFS);
+            differAsycnQueueIds.add(allAsyncEventIds);
+            differAsycnQueueIds.add(cp.asyncEventQueueIds);
-      private Set<String> removeHDFSQueues(Set<String> queueIds){
-        Set<String> queueIdsWithoutHDFSQueues = new HashSet<String>();
-        for (String queueId: queueIds){
-          if (!queueId.startsWith(HDFSStoreFactoryImpl.DEFAULT_ASYNC_QUEUE_ID_FOR_HDFS)){
-            queueIdsWithoutHDFSQueues.add(queueId);
-          }
-        }
-        return queueIdsWithoutHDFSQueues;
-      }
