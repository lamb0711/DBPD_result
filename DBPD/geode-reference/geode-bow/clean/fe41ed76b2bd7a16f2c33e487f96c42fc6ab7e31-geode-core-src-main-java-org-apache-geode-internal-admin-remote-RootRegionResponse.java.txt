GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
-
-import org.apache.geode.CancelException;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.cache.Cache;
-import org.apache.geode.cache.CacheFactory;
-import org.apache.geode.cache.Region;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.admin.GemFireVM;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-
-import java.util.Iterator;
-// import org.apache.geode.internal.*;
+import org.apache.geode.CancelException;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.cache.Region;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.internal.admin.GemFireVM;
+import org.apache.geode.internal.cache.InternalCache;
-  // instance variables
-  // private boolean hasRoot = false;
+
-   * Returns a <code>RootRegionResponse</code> that will be returned to the specified recipient. The
+   * Returns a {@code RootRegionResponse} that will be returned to the specified recipient. The
-      Cache cache = CacheFactory.getInstance(dm.getSystem());
+      InternalCache cache = (InternalCache) CacheFactory.getInstance(dm.getSystem());
-        roots = ((GemFireCacheImpl) cache).rootRegions(true);
+        roots = cache.rootRegions(true);
-
-      for (Iterator iter = roots.iterator(); iter.hasNext();) {
-        Region r = (Region) iter.next();
+      for (Object root : roots) {
+        Region r = (Region) root;
-    } catch (CancelException cce) {
-      /* no cache yet */ }
+    } catch (CancelException ignore) {
+      /* no cache yet */
+    }
-  // instance methods
-
-    if (regions.length > 0) {
-      Region[] roots = new Region[regions.length];
-      for (int i = 0; i < regions.length; i++) {
-        roots[i] = new AdminRegion(regions[i], vm, userAttrs[i]);
+    if (this.regions.length > 0) {
+      Region[] roots = new Region[this.regions.length];
+      for (int i = 0; i < this.regions.length; i++) {
+        roots[i] = new AdminRegion(this.regions[i], vm, this.userAttrs[i]);
+  @Override
-    DataSerializer.writeObject(regions, out);
-    DataSerializer.writeObject(userAttrs, out);
+    DataSerializer.writeObject(this.regions, out);
+    DataSerializer.writeObject(this.userAttrs, out);
-    regions = (String[]) DataSerializer.readObject(in);
-    userAttrs = (String[]) DataSerializer.readObject(in);
+    this.regions = DataSerializer.readObject(in);
+    this.userAttrs = DataSerializer.readObject(in);
