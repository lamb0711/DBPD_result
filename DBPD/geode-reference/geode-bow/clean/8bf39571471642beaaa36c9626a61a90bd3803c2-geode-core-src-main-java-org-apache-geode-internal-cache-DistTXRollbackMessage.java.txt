Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public DistTXRollbackMessage() {
-  }
+  public DistTXRollbackMessage() {}
-  public DistTXRollbackMessage(TXId txUniqId,
-      InternalDistributedMember onBehalfOfClientMember,
+  public DistTXRollbackMessage(TXId txUniqId, InternalDistributedMember onBehalfOfClientMember,
-  protected boolean operateOnTx(TXId txId, DistributionManager dm)
-      throws RemoteOperationException {
+  protected boolean operateOnTx(TXId txId, DistributionManager dm) throws RemoteOperationException {
-          logger
-              .debug(
-                  "DistTXRollbackMessage.operateOnTx: found a previously committed transaction:{}",
-                  txId);
+          logger.debug(
+              "DistTXRollbackMessage.operateOnTx: found a previously committed transaction:{}",
+              txId);
-    DistTXRollbackReplyMessage.send(getSender(), getProcessorId(),
-        rollbackSuccessful, getReplySender(dm));
+    DistTXRollbackReplyMessage.send(getSender(), getProcessorId(), rollbackSuccessful,
+        getReplySender(dm));
-    public DistTXRollbackReplyMessage() {
-    }
+    public DistTXRollbackReplyMessage() {}
-    public DistTXRollbackReplyMessage(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public DistTXRollbackReplyMessage(DataInput in) throws IOException, ClassNotFoundException {
-     * Return the value from the get operation, serialize it bytes as late as
-     * possible to avoid making un-neccesary byte[] copies. De-serialize those
-     * same bytes as late as possible to avoid using precious threads (aka P2P
-     * readers).
+     * Return the value from the get operation, serialize it bytes as late as possible to avoid
+     * making un-neccesary byte[] copies. De-serialize those same bytes as late as possible to avoid
+     * using precious threads (aka P2P readers).
-     * @param recipient
-     *          the origin VM that performed the get
-     * @param processorId
-     *          the processor on which the origin thread is waiting
-     * @param val
-     *          the raw value that will eventually be serialized
-     * @param replySender
-     *          distribution manager used to send the reply
+     * @param recipient the origin VM that performed the get
+     * @param processorId the processor on which the origin thread is waiting
+     * @param val the raw value that will eventually be serialized
+     * @param replySender distribution manager used to send the reply
-    public static void send(InternalDistributedMember recipient,
-        int processorId, Boolean val, ReplySender replySender)
-        throws RemoteOperationException {
-      Assert.assertTrue(recipient != null,
-          "DistTXRollbackReplyMessage NULL reply message");
-      DistTXRollbackReplyMessage m = new DistTXRollbackReplyMessage(
-          processorId, val);
+    public static void send(InternalDistributedMember recipient, int processorId, Boolean val,
+        ReplySender replySender) throws RemoteOperationException {
+      Assert.assertTrue(recipient != null, "DistTXRollbackReplyMessage NULL reply message");
+      DistTXRollbackReplyMessage m = new DistTXRollbackReplyMessage(processorId, val);
-     * Processes this message. This method is invoked by the receiver of the
-     * message.
+     * Processes this message. This method is invoked by the receiver of the message.
-     * @param dm
-     *          the distribution manager that is processing the message.
+     * @param dm the distribution manager that is processing the message.
-        logger
-            .trace(
-                LogMarker.DM,
-                "DistTXRollbackReplyMessage process invoking reply processor with processorId:{}",
-                this.processorId);
+        logger.trace(LogMarker.DM,
+            "DistTXRollbackReplyMessage process invoking reply processor with processorId:{}",
+            this.processorId);
-          logger.trace(LogMarker.DM,
-              "DistTXRollbackReplyMessage processor not found");
+          logger.trace(LogMarker.DM, "DistTXRollbackReplyMessage processor not found");
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      sb.append("DistTXRollbackReplyMessage ").append("processorid=")
-          .append(this.processorId).append(" reply to sender ")
-          .append(this.getSender());
+      sb.append("DistTXRollbackReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender());
-   * A processor to capture the value returned by
-   * {@link DistTXRollbackReplyMessage}
+   * A processor to capture the value returned by {@link DistTXRollbackReplyMessage}
-  
+
-   * Reply processor which collects all CommitReplyExceptions for Dist Tx and emits
-   * a detailed failure exception if problems occur
+   * Reply processor which collects all CommitReplyExceptions for Dist Tx and emits a detailed
+   * failure exception if problems occur
-   * [DISTTX] TODO see if need ReliableReplyProcessor21? departed members?
+   *      [DISTTX] TODO see if need ReliableReplyProcessor21? departed members?
-    
+
-      this.rollbackResponseMap = Collections
-          .synchronizedMap(new HashMap<DistributedMember, Boolean>());
+      this.rollbackResponseMap =
+          Collections.synchronizedMap(new HashMap<DistributedMember, Boolean>());
-    
+
-  
+
-      }
-      catch (DistTxRollbackExceptionCollectingException e) {
+      } catch (DistTxRollbackExceptionCollectingException e) {
-    protected void processException(DistributionMessage msg,
-        ReplyException ex) {
+    protected void processException(DistributionMessage msg, ReplyException ex) {
-        synchronized(this) {
+        synchronized (this) {
-          DistTxRollbackExceptionCollectingException cce = (DistTxRollbackExceptionCollectingException) this.exception;
+          DistTxRollbackExceptionCollectingException cce =
+              (DistTxRollbackExceptionCollectingException) this.exception;
-    
+
-        DistTxRollbackExceptionCollectingException cce = (DistTxRollbackExceptionCollectingException) this.exception;
+        DistTxRollbackExceptionCollectingException cce =
+            (DistTxRollbackExceptionCollectingException) this.exception;
+
-        DistTxRollbackExceptionCollectingException cce = (DistTxRollbackExceptionCollectingException) this.exception;
+        DistTxRollbackExceptionCollectingException cce =
+            (DistTxRollbackExceptionCollectingException) this.exception;
-    
+
-  public static class DistTxRollbackExceptionCollectingException extends
-      ReplyException {
+  public static class DistTxRollbackExceptionCollectingException extends ReplyException {
-     * Determine if the commit processing was incomplete, if so throw a detailed
-     * exception indicating the source of the problem
+     * Determine if the commit processing was incomplete, if so throw a detailed exception
+     * indicating the source of the problem
-        StringBuffer errorMessage = new StringBuffer(
-            "Incomplete commit of transaction ").append(id).append(
-            ".  Caused by the following exceptions: ");
+        StringBuffer errorMessage = new StringBuffer("Incomplete commit of transaction ").append(id)
+            .append(".  Caused by the following exceptions: ");
-    public void addExceptionsFromMember(InternalDistributedMember member,
-        Set exceptions) {
+    public void addExceptionsFromMember(InternalDistributedMember member, Set exceptions) {
