GEODE-5971: Refactoring various commands (#3294)

* GEODE-5971: Refactoring various commands

- DeployCommand
- DestroyFunctionCommand
- ExecuteFunctionCommand
- ListDeployedCommand
- ListFunctionCommand
- UndeployCommand

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Jinmei Liao <jiliao@pivotal.io>

+import java.util.Map;
-import org.apache.geode.SystemFailure;
-import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.remote.CommandExecutor;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class UndeployCommand extends InternalGfshCommand {
+public class UndeployCommand extends GfshCommand {
-  public Result undeploy(
+  public ResultModel undeploy(
-    try {
-      TabularResultData tabularData = ResultBuilder.createTabularResultData();
-      boolean accumulatedData = false;
+    Set<DistributedMember> targetMembers = findMembers(groups, null);
-      Set<DistributedMember> targetMembers = findMembers(groups, null);
-
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      ResultCollector<?, ?> rc =
-          CliUtil.executeFunction(this.undeployFunction, new Object[] {jars}, targetMembers);
-      List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) rc.getResult());
-
-      for (CliFunctionResult result : results) {
-
-        if (result.getThrowable() != null) {
-          tabularData.accumulate("Member", result.getMemberIdOrName());
-          tabularData.accumulate("Un-Deployed JAR", "");
-          tabularData.accumulate("Un-Deployed JAR Location",
-              "ERROR: " + result.getThrowable().getClass().getName() + ": "
-                  + result.getThrowable().getMessage());
-          accumulatedData = true;
-          tabularData.setStatus(Result.Status.ERROR);
-        } else {
-          String[] strings = (String[]) result.getSerializables();
-          for (int i = 0; i < strings.length; i += 2) {
-            tabularData.accumulate("Member", result.getMemberIdOrName());
-            tabularData.accumulate("Un-Deployed JAR", strings[i]);
-            tabularData.accumulate("Un-Deployed From JAR Location", strings[i + 1]);
-            accumulatedData = true;
-          }
-        }
-      }
-
-      if (!accumulatedData) {
-        return ResultBuilder.createInfoResult(CliStrings.UNDEPLOY__NO_JARS_FOUND_MESSAGE);
-      }
-
-      Result result = ResultBuilder.buildResult(tabularData);
-      if (tabularData.getStatus().equals(Result.Status.OK)) {
-        persistClusterConfiguration(result,
-            () -> ((InternalConfigurationPersistenceService) getConfigurationPersistenceService())
-                .removeJars(jars, groups));
-      }
-      return result;
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable th) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createGemFireErrorResult("Exception while attempting to un-deploy: "
-          + th.getClass().getName() + ": " + th.getMessage());
+    if (targetMembers.isEmpty()) {
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+
+    List<CliFunctionResult> results =
+        executeAndGetFunctionResult(this.undeployFunction, new Object[] {jars}, targetMembers);
+
+    ResultModel result = new ResultModel();
+    TabularResultModel tabularData = result.addTable("jars");
+    for (CliFunctionResult cliResult : results) {
+      if (!cliResult.isSuccessful()) {
+        result.setStatus(Result.Status.ERROR);
+      }
+
+      Map<String, String> undeployedJars = (Map<String, String>) cliResult.getResultObject();
+      if (undeployedJars == null) {
+        continue;
+      }
+
+      for (String key : undeployedJars.keySet()) {
+        tabularData.accumulate("Member", cliResult.getMemberIdOrName());
+        tabularData.accumulate("Un-Deployed JAR", key);
+        tabularData.accumulate("Un-Deployed From JAR Location", undeployedJars.get(key));
+      }
+    }
+
+    if (tabularData.getRowSize() == 0) {
+      return ResultModel.createInfo(CliStrings.UNDEPLOY__NO_JARS_FOUND_MESSAGE);
+    }
+
+    if (result.getStatus() != Result.Status.OK) {
+      return result;
+    }
+    if (getConfigurationPersistenceService() == null) {
+      result.addInfo().addLine(CommandExecutor.SERVICE_NOT_RUNNING_CHANGE_NOT_PERSISTED);
+    } else {
+      ((InternalConfigurationPersistenceService) getConfigurationPersistenceService())
+          .removeJars(jars, groups);
+    }
+
+    return result;
