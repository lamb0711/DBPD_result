GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

-
-package org.apache.geode.internal.cache.lru;
+package org.apache.geode.internal.cache.eviction;
+import org.apache.geode.cache.CacheCallback;
+import org.apache.geode.internal.cache.InternalRegion;
- * Marker interface to eviction controller that determines if LRU list maintainance is required.
+ * Marker interface to eviction controller that determines if LRU list maintenance is required.
-public interface EnableLRU {
+public interface EvictionController extends CacheCallback {
-  public int entrySize(Object key, Object value) throws IllegalArgumentException;
+  int entrySize(Object key, Object value) throws IllegalArgumentException;
-  public long limit();
+  long limit();
-  public LRUStatistics initStats(Object region, StatisticsFactory sf);
+  EvictionStatistics initStats(Object region, StatisticsFactory statsFactory);
-  public EvictionAlgorithm getEvictionAlgorithm();
+  EvictionAlgorithm getEvictionAlgorithm();
-  public LRUStatistics getStats();
+  EvictionStatistics getStatistics();
-   * Returns the {@linkplain EvictionAction action} to take when the LRU entry is evicted.
+   * Returns the {@code EvictionAction} to take when the LRU entry is evicted.
-  public EvictionAction getEvictionAction();
+  EvictionAction getEvictionAction();
-  public StatisticsType getStatisticsType();
+  StatisticsType getStatisticsType();
-  public String getStatisticsName();
+  String getStatisticsName();
-  public int getLimitStatId();
+  int getLimitStatId();
-  public int getCountStatId();
+  int getCountStatId();
-  public int getEvictionsStatId();
+  int getEvictionsStatId();
-  public int getDestroysStatId();
+  int getDestroysStatId();
-  public int getDestroysLimitStatId();
+  int getDestroysLimitStatId();
-  public int getEvaluationsStatId();
+  int getEvaluationsStatId();
-   * Returns the id of the "greedyReturns" statistic for this LRU algorith'ms statistics
+   * Returns the id of the "greedyReturns" statistic for this LRU algorithm's statistics
-  public int getGreedyReturnsStatId();
+  int getGreedyReturnsStatId();
-   * given <code>LRUStatistics</code>.
+   * given {@code EvictionStatistics}.
-  public boolean mustEvict(LRUStatistics stats, Region region, int delta);
+  boolean mustEvict(EvictionStatistics stats, InternalRegion region, int delta);
+
+  boolean lruLimitExceeded(EvictionStatistics stats, DiskRegionView diskRegionView);
+
+  void setBucketRegion(Region region);
-   * Envoked after an entry has been evicted
+   * Returns the "limit" as defined by this LRU algorithm
-  public void afterEviction();
+  long getLimit();
-  public boolean lruLimitExceeded(LRUStatistics lruStatistics, DiskRegionView drv);
-
+  /**
+   * Set the limiting parameter used to determine when eviction is needed.
+   */
+  void setLimit(int maximum);
