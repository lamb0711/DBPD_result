GEODE-6122: Make log4j core optional (#2944)

* Add Logging ProviderAgent support for ServiceLoader
* Test for availability of Log4j Core before defaulting to Log4jAgent
* Change optional ProviderAgent methods to have default impls
* Extract LogLevelUpdateOccurs enum to top level class
* Extract LogLevelUpdateScope enum to top level class
* Move Banner to internal.logging package
* Break Banner's hard dependency on Log4J Core
* Improve javadocs
* Add field type to TestingOnly annotation
* Replace use of InternalLogWriter constants with LogWriterLevel enum

-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.status.StatusLogger;
-
-import org.apache.geode.internal.ClassPathLoader;
-
- * Fetches the configuration info from {@code Log4jAgent} without direct class dependency.
- *
- * <p>
- * This could potentially be modified to support any logging backend but currently the only caller
- * is the log Banner which is static.
+ * Fetches the configuration info from {@link ProviderAgent} for invocation from static context.
+ * Note: this may instantiate a new instance of {@link ProviderAgent}.
-  private static final Logger LOGGER = StatusLogger.getLogger();
-
-  /**
-   * Fetches the configuration info from Log4jAgent without direct class dependency.
-   *
-   * <p>
-   * If the Log4J2 Core classes are not in the classpath, the return value is simply
-   * "No configuration info found."
-   */
-    try {
-      Class<? extends ProviderAgent> agentClass =
-          ClassPathLoader.getLatest().forName(Configuration.DEFAULT_PROVIDER_AGENT_NAME)
-              .asSubclass(ProviderAgent.class);
-      Method method = agentClass.getMethod("getConfigurationInfo", null);
-      return (String) method.invoke(null, null);
-    } catch (ClassNotFoundException | ClassCastException | NoSuchMethodException
-        | IllegalAccessException | InvocationTargetException e) {
-      LOGGER.debug("Unable to invoke Log4jAgent.getConfigurationInfo()", e);
-      return "No configuration info found";
-    }
+    return new ProviderAgentLoader().findProviderAgent().getConfigurationInfo();
