Merge branch 'release/1.3.0'

+import java.util.Optional;
+import java.util.function.BiConsumer;
+    final String installLocations = "geodeOldVersionInstalls.txt";
+    instance.findInstalls(installLocations);
+    // System.out
+    // .println("VersionManager has loaded the following classpaths:\n" + instance.classPaths);
-  protected static VersionManager getInstance(String classpathsFileName) {
+  protected static VersionManager getInstance(String classpathsFileName, String installFileName) {
+  private Map<String, String> installs = new HashMap();
+
+
+  public String getInstall(String version) {
+    return installs.get(version);
+  }
+
+    readVersionsFile(fileName, (version, path) -> {
+      Optional<String> parsedVersion = parseVersion(version);
+      if (parsedVersion.isPresent()) {
+        classPaths.put(parsedVersion.get(), path);
+        testVersions.add(parsedVersion.get());
+      }
+    });
+  }
+
+  private void findInstalls(String fileName) {
+    readVersionsFile(fileName, (version, install) -> {
+      Optional<String> parsedVersion = parseVersion(version);
+      if (parsedVersion.isPresent()) {
+        installs.put(parsedVersion.get(), install);
+      }
+    });
+  }
+
+  private Optional<String> parseVersion(String version) {
+    String parsedVersion = null;
+    if (version.startsWith("test") && version.length() >= "test".length()) {
+      if (version.equals("test")) {
+        parsedVersion = CURRENT_VERSION;
+      } else {
+        parsedVersion = version.substring("test".length());
+      }
+    }
+    return Optional.ofNullable(parsedVersion);
+  }
+
+  private void readVersionsFile(String fileName, BiConsumer<String, String> consumer) {
+    Properties props = readPropertiesFile(fileName);
+    props.forEach((k, v) -> {
+      consumer.accept(k.toString(), v.toString());
+    });
+  }
+
+  public Properties readPropertiesFile(String fileName) {
+    // this file is created by the gradle task createClasspathsPropertiesFile
-      return;
+      return props;
-      return;
+      return props;
-
-    for (Map.Entry<Object, Object> entry : props.entrySet()) {
-      String version = (String) entry.getKey();
-      if (version.startsWith("test") && version.length() >= "test".length()) {
-        if (version.equals("test")) {
-          version = CURRENT_VERSION;
-        } else {
-          version = version.substring("test".length());
-        }
-        classPaths.put(version, (String) entry.getValue());
-        testVersions.add(version);
-      }
-    }
+    return props;
