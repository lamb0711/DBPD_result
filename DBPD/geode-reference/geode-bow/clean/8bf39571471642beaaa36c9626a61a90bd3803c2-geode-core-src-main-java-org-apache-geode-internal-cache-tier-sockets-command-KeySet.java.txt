Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start)
+      throws IOException, InterruptedException {
-      logger.debug("{}: Received key set request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn
-        .getSocketString(), regionName);
+      logger.debug("{}: Received key set request ({} bytes) from {} for region {}",
+          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
-      //      if (regionName == null) (can only be null)
+      // if (regionName == null) (can only be null)
-        message = LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL.toLocalizedString(servConn
-          .getName());
-        logger.warn(LocalizedMessage.create(LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL, servConn
-          .getName()));
+        message = LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL
+            .toLocalizedString(servConn.getName());
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.KeySet_0_THE_INPUT_REGION_NAME_FOR_THE_KEY_SET_REQUEST_IS_NULL,
+            servConn.getName()));
-      String reason = LocalizedStrings.KeySet__0_WAS_NOT_FOUND_DURING_KEY_SET_REQUEST.toLocalizedString(regionName);
+      String reason = LocalizedStrings.KeySet__0_WAS_NOT_FOUND_DURING_KEY_SET_REQUEST
+          .toLocalizedString(regionName);
-  private void fillAndSendKeySetResponseChunks(LocalRegion region,
-                                               String regionName,
-                                               KeySetOperationContext context,
-                                               ServerConnection servConn) throws IOException {
+  private void fillAndSendKeySetResponseChunks(LocalRegion region, String regionName,
+      KeySetOperationContext context, ServerConnection servConn) throws IOException {
-    for (Iterator it = keySet.iterator(); it.hasNext(); ) {
+    for (Iterator it = keySet.iterator(); it.hasNext();) {
-        logger.trace("{}: fillAndSendKeySetResponseKey <{}>; list size was {}; region: {}", servConn.getName(), entryKey, keyList
-          .size(), region.getFullPath());
+        logger.trace("{}: fillAndSendKeySetResponseKey <{}>; list size was {}; region: {}",
+            servConn.getName(), entryKey, keyList.size(), region.getFullPath());
-  private static void sendKeySetResponseChunk(Region region, List list, boolean lastChunk, ServerConnection servConn)
-    throws IOException {
+  private static void sendKeySetResponseChunk(Region region, List list, boolean lastChunk,
+      ServerConnection servConn) throws IOException {
-      logger.debug("{}: Sending {} key set response chunk for region={}{}", servConn.getName(), (lastChunk ? " last " : " "), region
-        .getFullPath(), (logger.isTraceEnabled() ? " keys=" + list + " chunk=<" + chunkedResponseMsg + ">" : ""));
+      logger.debug("{}: Sending {} key set response chunk for region={}{}", servConn.getName(),
+          (lastChunk ? " last " : " "), region.getFullPath(),
+          (logger.isTraceEnabled() ? " keys=" + list + " chunk=<" + chunkedResponseMsg + ">" : ""));
