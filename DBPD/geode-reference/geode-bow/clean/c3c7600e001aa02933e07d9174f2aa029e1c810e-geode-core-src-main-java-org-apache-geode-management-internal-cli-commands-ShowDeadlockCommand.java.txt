GEODE-5971: Refactor ShowDeadlockCommand to return ResultModel and exâ€¦ (#2943)

GEODE-5971: Refactor ShowDeadlockCommand to return ResultModel and extend GfshCommand

- Updated test that was run order dependant
- Added a wait to make the deadlock test pass in repeat mode

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Kenneth Howe <khowe@pivotal.io>
Co-authored-by: Peter Tran <ptran@pivotal.io>
Co-authored-by:Aditya Anchuri <aanchuri@pivotal.io>



+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.Map;
+import org.apache.geode.management.cli.GfshCommand;
+import org.apache.geode.management.internal.cli.CliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
-import org.apache.geode.management.internal.cli.result.InfoResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.FileResultModel;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class ShowDeadlockCommand extends InternalGfshCommand {
+public class ShowDeadlockCommand extends GfshCommand {
-  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DEBUG_UTIL},
+      interceptor = "org.apache.geode.management.internal.cli.commands.ShowDeadlockCommand$Interceptor")
-  public Result showDeadlock(@CliOption(key = CliStrings.SHOW_DEADLOCK__DEPENDENCIES__FILE,
+  public ResultModel showDeadlock(@CliOption(key = CliStrings.SHOW_DEADLOCK__DEPENDENCIES__FILE,
-    Result result;
+    ResultModel result = new ResultModel();
-        return ResultBuilder
-            .createUserErrorResult(CliStrings.format(CliStrings.INVALID_FILE_EXTENSION, ".txt"));
+        return ResultModel.createError(
+            CliStrings.format(CliStrings.INVALID_FILE_EXTENSION, ".txt"));
-      InfoResultData resultData = ResultBuilder.createInfoResultData();
+      InfoResultModel infoResult = result.addInfo();
-          resultData.addLine(CliStrings.SHOW_DEADLOCK__DEEPEST_FOUND);
+          infoResult.addLine(CliStrings.SHOW_DEADLOCK__DEEPEST_FOUND);
-          resultData.addLine(CliStrings.SHOW_DEADLOCK__DEADLOCK__DETECTED);
+          infoResult.addLine(CliStrings.SHOW_DEADLOCK__DEADLOCK__DETECTED);
-        resultData.addLine(DeadlockDetector.prettyFormat(deadlock));
+        infoResult.addLine(DeadlockDetector.prettyFormat(deadlock));
-        resultData.addLine(CliStrings.SHOW_DEADLOCK__NO__DEADLOCK);
+        infoResult.addLine(CliStrings.SHOW_DEADLOCK__NO__DEADLOCK);
-      resultData.addAsFile(filename, DeadlockDetector.prettyFormat(dependencies),
-          MessageFormat.format(CliStrings.SHOW_DEADLOCK__DEPENDENCIES__REVIEW, filename), false);
-      result = ResultBuilder.buildResult(resultData);
-
+      result.addFile(filename, DeadlockDetector.prettyFormat(dependencies));
-      result = ResultBuilder
-          .createGemFireErrorResult(CliStrings.SHOW_DEADLOCK__ERROR + " : " + e.getMessage());
+      result = ResultModel.createError(CliStrings.SHOW_DEADLOCK__ERROR + " : " + e.getMessage());
+
+
+  public static class Interceptor implements CliAroundInterceptor {
+    @Override
+    public ResultModel postExecution(GfshParseResult parseResult, ResultModel resultModel,
+        Path tempFile) {
+
+      if (resultModel.getFiles().size() != 1) {
+        resultModel.addInfo("No filename found to save");
+        resultModel.setStatus(Result.Status.ERROR);
+        return resultModel;
+      }
+
+      try {
+        for (Map.Entry<String, FileResultModel> entry : resultModel.getFiles().entrySet()) {
+          entry.getValue().saveFile();
+          resultModel.addInfo().addLine(
+              MessageFormat.format(CliStrings.SHOW_DEADLOCK__DEPENDENCIES__REVIEW, entry.getKey()));
+        }
+      } catch (IOException e) {
+        resultModel.addInfo().addLine("Unable to save file: " + e.getMessage());
+        resultModel.setStatus(Result.Status.ERROR);
+      }
+
+      return resultModel;
+    }
+  }
+
