Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-import java.security.Principal;
+import java.io.Serializable;
-import org.apache.geode.security.GeodePermission;
+import org.apache.geode.security.ResourcePermission;
-import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+import com.gemstone.gemfire.internal.security.SecurityService;
-public class CustomAuthRealm extends AuthorizingRealm{
+public class CustomAuthRealm extends AuthorizingRealm {
+  /**
+   * The caller must invoke {@link org.apache.geode.security.SecurityManager#init(Properties)}
+   * prior to instantiating CustomAuthRealm.
+   *
+   * @param securityManager instance of SecurityManager which has already been initialized
+   */
-  public CustomAuthRealm (String authenticatorFactory) {
-    this.securityManager = GeodeSecurityUtil.getObjectOfTypeFromClassName(authenticatorFactory, SecurityManager.class);
+  /**
+   * SecurityManager will be constructed and initialized with the provided security properties.
+   *
+   * @param authenticatorFactory name of the SecurityManager implementation to construct
+   * @param securityProperties the security properties to initialize SecurityManager with
+   */
+  public CustomAuthRealm(String authenticatorFactory, Properties securityProperties) {
+    this.securityManager = SecurityService.getObjectOfTypeFromClassName(authenticatorFactory, SecurityManager.class);
+    this.securityManager.init(securityProperties);
-    Principal principal  = securityManager.authenticate(credentialProps);
+    Serializable principal  = securityManager.authenticate(credentialProps);
-    return new SimpleAuthenticationInfo(principal, authToken.getPassword(), REALM_NAME);
+    try {
+      return new SimpleAuthenticationInfo(principal, authToken.getPassword(), REALM_NAME);
+    } catch (IllegalArgumentException e) {
+      throw new IllegalArgumentException("failed for " + username + " " + password, e);
+    }
-    GeodePermission context = (GeodePermission) permission;
-    Principal principal = (Principal) principals.getPrimaryPrincipal();
+    ResourcePermission context = (ResourcePermission) permission;
+    Serializable principal = (Serializable)principals.getPrimaryPrincipal();
