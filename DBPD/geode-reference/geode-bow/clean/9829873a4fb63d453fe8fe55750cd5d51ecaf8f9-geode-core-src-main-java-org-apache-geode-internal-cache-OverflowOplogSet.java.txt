GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-  private OverflowOplog lastOverflowWrite = null;
-  private final ConcurrentMap<Integer, OverflowOplog> overflowMap =
-      new ConcurrentHashMap<Integer, OverflowOplog>();
-  private final Map<Integer, OverflowOplog> compactableOverflowMap =
-      new LinkedHashMap<Integer, OverflowOplog>();
+  private OverflowOplog lastOverflowWrite;
+  private final ConcurrentMap<Integer, OverflowOplog> overflowMap = new ConcurrentHashMap<>();
+  private final Map<Integer, OverflowOplog> compactibleOverflowMap = new LinkedHashMap<>();
-
-  public void modify(LocalRegion lr, DiskEntry entry, ValueWrapper value, boolean async) {
-    DiskRegion dr = lr.getDiskRegion();
+  public void modify(InternalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
+    DiskRegion dr = region.getDiskRegion();
-
-      synchronized (this.compactableOverflowMap) {
-        this.compactableOverflowMap.remove(oo.getOplogId());
+      synchronized (this.compactibleOverflowMap) {
+        this.compactibleOverflowMap.remove(oo.getOplogId());
-
-
-    synchronized (this.compactableOverflowMap) {
-      for (OverflowOplog oo : this.compactableOverflowMap.values()) {
+    synchronized (this.compactibleOverflowMap) {
+      for (OverflowOplog oo : this.compactibleOverflowMap.values()) {
-
-
-      synchronized (this.compactableOverflowMap) {
-        result = this.compactableOverflowMap.get(oplogId);
+      synchronized (this.compactibleOverflowMap) {
+        result = this.compactibleOverflowMap.get(oplogId);
-
-  public void create(LocalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
+  public void create(InternalRegion region, DiskEntry entry, ValueWrapper value, boolean async) {
-
-  public void remove(LocalRegion region, DiskEntry entry, boolean async, boolean isClear) {
+  public void remove(InternalRegion region, DiskEntry entry, boolean async, boolean isClear) {
-    synchronized (this.compactableOverflowMap) {
-      this.compactableOverflowMap.put(oplog.getOplogId(), oplog);
+    synchronized (this.compactibleOverflowMap) {
+      this.compactibleOverflowMap.put(oplog.getOplogId(), oplog);
-
-    synchronized (this.compactableOverflowMap) {
-      Iterator<OverflowOplog> itr = this.compactableOverflowMap.values().iterator();
+    synchronized (this.compactibleOverflowMap) {
+      Iterator<OverflowOplog> itr = this.compactibleOverflowMap.values().iterator();
-    synchronized (this.compactableOverflowMap) {
-      for (OverflowOplog oo : this.compactableOverflowMap.values()) {
+    synchronized (this.compactibleOverflowMap) {
+      for (OverflowOplog oo : this.compactibleOverflowMap.values()) {
-    ArrayList<OverflowOplog> result = new ArrayList<OverflowOplog>();
+    ArrayList<OverflowOplog> result = new ArrayList<>();
-    synchronized (this.compactableOverflowMap) {
-      for (OverflowOplog oo : this.compactableOverflowMap.values()) {
+    synchronized (this.compactibleOverflowMap) {
+      for (OverflowOplog oo : this.compactibleOverflowMap.values()) {
-    synchronized (this.compactableOverflowMap) {
-      for (OverflowOplog oo : this.compactableOverflowMap.values()) {
+    synchronized (this.compactibleOverflowMap) {
+      for (OverflowOplog oo : this.compactibleOverflowMap.values()) {
-
