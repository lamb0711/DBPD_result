Merge branch 'feature/GEODE-8' into develop

-  private static final AtomicBoolean txDistributedClientWarningIssued = new AtomicBoolean();
+  protected static final AtomicBoolean txDistributedClientWarningIssued = new AtomicBoolean();
-  final private TXManagerImpl txMgr;
-  private DistributedMember target;
+  final protected TXManagerImpl txMgr;
+  protected DistributedMember target;
-  private volatile TXSynchronizationRunnable synchRunnable;
+  protected volatile TXSynchronizationRunnable synchRunnable;
-  private volatile TXStateInterface realDeal;
-  private boolean inProgress = true;
-  private InternalDistributedMember onBehalfOfClientMember = null;
+  protected volatile TXStateInterface realDeal;
+  protected boolean inProgress = true;
+  protected InternalDistributedMember onBehalfOfClientMember = null;
+  @Override
+  public void precommit() throws CommitConflictException,
+      UnsupportedOperationInTransactionException {
+    throw new UnsupportedOperationInTransactionException(
+        LocalizedStrings.Dist_TX_PRECOMMIT_NOT_SUPPORTED_IN_A_TRANSACTION
+            .toLocalizedString("precommit"));
+  }
+  
-      boolean updateStats, boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent, boolean returnTombstones) {
-    Object val = getRealDeal(keyInfo, localRegion).getDeserializedValue(keyInfo, localRegion, updateStats, disableCopyOnRead, preferCD, null, false);
+      boolean updateStats, boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS, boolean retainResult) {
+    Object val = getRealDeal(keyInfo, localRegion).getDeserializedValue(keyInfo, localRegion, updateStats, disableCopyOnRead, preferCD, null, false, allowReadFromHDFS, retainResult);
-      EntryEventImpl clientEvent, boolean returnTombstones) {
+      EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) {
-          value, disableCopyOnRead, preferCD, requestingClient, clientEvent, false);
+          value, disableCopyOnRead, preferCD, requestingClient, clientEvent, false, allowReadFromHDFS);
-  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones) throws DataLocationException {
+  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry, ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent, boolean returnTombstones, boolean allowReadFromHDFS) throws DataLocationException {
-    return getRealDeal(key, localRegion).getSerializedValue(localRegion, key, doNotLockEntry, requestingClient, clientEvent, returnTombstones);
+    return getRealDeal(key, localRegion).getSerializedValue(localRegion, key, doNotLockEntry, requestingClient, clientEvent, returnTombstones, allowReadFromHDFS);
-    assert (tx instanceof TXState);
+    assert (tx instanceof TXState) : tx.getClass().getSimpleName();
+
+  
+  public void close() {
+    if (this.realDeal != null) {
+      this.realDeal.close();
+    }
+  }
+  
+  @Override
+  public boolean isTxState() {
+    return false;
+  }
+  
+  @Override
+  public boolean isTxStateStub() {
+    return false;
+  }
+  
+  @Override
+  public boolean isTxStateProxy() {
+    return true;
+  }
+  
+  @Override
+  public boolean isDistTx() {
+    return false;
+  }
+  
+  @Override
+  public boolean isCreatedOnDistTxCoordinator() {
+    return false;
+  }
