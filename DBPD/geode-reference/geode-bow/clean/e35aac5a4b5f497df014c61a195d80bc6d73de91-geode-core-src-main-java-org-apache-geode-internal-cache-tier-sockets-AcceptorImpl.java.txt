Merge branch 'release/1.5.0'

+import java.io.DataOutputStream;
+import java.io.OutputStream;
+import org.apache.geode.DataSerializer;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.internal.HeapDataOutputStream;
+import org.apache.geode.internal.Version;
-  protected static final int handShakeTimeout =
+  protected static final int handshakeTimeout =
-  private static boolean isIntegratedSecurity;
-          DM dm = ds.getDistributionManager();
+          DistributionManager dm = ds.getDistributionManager();
-    isIntegratedSecurity = this.securityService.isIntegratedSecurity();
-
-            ServerHandShakeProcessor.refuse(socket.getOutputStream(),
+            refuseHandshake(socket.getOutputStream(),
-                    .toLocalizedString(Integer.valueOf(this.maxConnections)));
+                    .toLocalizedString(Integer.valueOf(this.maxConnections)),
+                REPLY_REFUSED);
-            AcceptorImpl.handShakeTimeout, this.socketBufferSize, communicationMode.toString(),
+            AcceptorImpl.handshakeTimeout, this.socketBufferSize, communicationMode.toString(),
-          ServerHandShakeProcessor.refuse(socket.getOutputStream(),
+          refuseHandshake(socket.getOutputStream(),
-                  .toLocalizedString(Integer.valueOf(this.maxConnections)));
+                  .toLocalizedString(Integer.valueOf(this.maxConnections)),
+              REPLY_REFUSED);
+  static final byte REPLY_REFUSED = (byte) 60;
+  static final byte REPLY_INVALID = (byte) 61;
+
+  void refuseHandshake(OutputStream out, String message, byte exception) throws IOException {
+
+    HeapDataOutputStream hdos = new HeapDataOutputStream(32, Version.CURRENT);
+    DataOutputStream dos = new DataOutputStream(hdos);
+    // Write refused reply
+    dos.writeByte(exception);
+
+    // write dummy endpointType
+    dos.writeByte(0);
+    // write dummy queueSize
+    dos.writeInt(0);
+
+    // Write the server's member
+    DistributedMember member = InternalDistributedSystem.getAnyInstance().getDistributedMember();
+    HeapDataOutputStream memberDos = new HeapDataOutputStream(Version.CURRENT);
+    DataSerializer.writeObject(member, memberDos);
+    DataSerializer.writeByteArray(memberDos.toByteArray(), dos);
+    memberDos.close();
+
+    // Write the refusal message
+    if (message == null) {
+      message = "";
+    }
+    dos.writeUTF(message);
+
+    // Write dummy delta-propagation property value. This will never be read at
+    // receiver because the exception byte above will cause the receiver code
+    // throw an exception before the below byte could be read.
+    dos.writeBoolean(Boolean.TRUE);
+
+    out.write(hdos.toByteArray());
+    out.flush();
+  }
+
-  public static boolean isIntegratedSecurity() {
-    return isIntegratedSecurity;
-  }
-
-  private class ClientQueueInitializerTask implements Runnable {
+  private static class ClientQueueInitializerTask implements Runnable {
-      logger.info(":Bridge server: Initializing {} server-to-client communication socket: {}",
+      logger.info(":Cache server: Initializing {} server-to-client communication socket: {}",
-        if (isRunning()) {
+        if (acceptor.isRunning()) {
