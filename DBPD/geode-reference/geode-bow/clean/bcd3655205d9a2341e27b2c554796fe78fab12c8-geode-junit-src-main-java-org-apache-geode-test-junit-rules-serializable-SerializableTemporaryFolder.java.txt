GEODE-7819: Add debugging support to SerializableTemporaryFolder (#4740)

Specifying delete(false) will prevent deletion of the temporary folder
tree during tear down.

Specifying copyTo(directory) with optional when(When) will result in
copying the contents of the temporary folder tree to the destination
directory during tear down.
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Predicate;
+import org.apache.commons.io.FileUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.junit.runner.Description;
+import org.junit.runners.model.MultipleFailureException;
+import org.junit.runners.model.Statement;
+@SuppressWarnings("WeakerAccess")
+  private static final Logger logger = LogManager.getLogger();
-  public SerializableTemporaryFolder() {
-    super();
+  private final AtomicBoolean passed = new AtomicBoolean(true);
+  private final AtomicBoolean delete = new AtomicBoolean(true);
+  private final AtomicReference<File> copyTo = new AtomicReference<>();
+  private final AtomicReference<When> when = new AtomicReference<>();
+  private final AtomicReference<String> methodName = new AtomicReference<>();
+
+  /**
+   * Specifies conditions under which copyTo is performed
+   */
+  public enum When {
+    /** Perform {@code copyTo} only if test fails */
+    FAILS(passed -> !passed),
+    /** Perform {@code copyTo} only if test passes */
+    PASSES(passed -> passed),
+    /** Perform {@code copyTo} regardless if test fails or passes */
+    ALWAYS(passed -> true);
+
+    private final Predicate<Boolean> performCopyTo;
+
+    When(Predicate<Boolean> performCopyTo) {
+      this.performCopyTo = performCopyTo;
+    }
+
+    boolean test(boolean passed) {
+      return performCopyTo.test(passed);
+    }
-  public SerializableTemporaryFolder(final File parentFolder) {
+  public SerializableTemporaryFolder() {
+    this(null);
+  }
+
+  public SerializableTemporaryFolder(File parentFolder) {
-  private void readObject(final ObjectInputStream stream) throws InvalidObjectException {
+  /**
+   * Specifying false will prevent deletion of the temporary folder and its contents. Default is
+   * true.
+   */
+  public SerializableTemporaryFolder delete(boolean value) {
+    delete.set(value);
+    return this;
+  }
+
+  /**
+   * Specifies directory to copy artifacts to before deleting temporary folder. Default is null.
+   */
+  public SerializableTemporaryFolder copyTo(File directory) {
+    copyTo.set(directory);
+    return this;
+  }
+
+  /**
+   * Specifies conditions under which {@code copyTo} is performed. Default is {@code FAIL}.
+   */
+  public SerializableTemporaryFolder when(When when) {
+    this.when.set(when);
+    return this;
+  }
+
+  @Override
+  public Statement apply(Statement base, Description description) {
+    return statement(base, description);
+  }
+
+  protected Statement statement(Statement base, Description description) {
+    return new Statement() {
+      @Override
+      public void evaluate() throws Throwable {
+        List<Throwable> errors = new ArrayList<>();
+
+        before(description);
+        try {
+          base.evaluate();
+        } catch (Throwable e) {
+          errors.add(e);
+          passed.set(false);
+        } finally {
+          after();
+        }
+
+        MultipleFailureException.assertEmpty(errors);
+      }
+    };
+  }
+
+  protected void before(Description description) throws Throwable {
+    methodName.set(description.getMethodName());
+    passed.set(true);
+    before();
+    logger.info("SerializableTemporaryFolder root: {}", getRoot().getAbsolutePath());
+  }
+
+  @Override
+  protected void after() {
+    File directory = copyTo.get();
+    if (directory != null && when.get().test(passed.get())) {
+      File timestamp = new File(directory, String.valueOf(System.currentTimeMillis()));
+      File destination = new File(timestamp, methodName.get());
+      destination.mkdirs();
+
+      copyTo(getRoot(), destination);
+    }
+    if (delete.get()) {
+      super.after();
+    }
+  }
+
+  private void copyTo(File source, File destination) {
+    if (destination == null) {
+      return;
+    }
+    try {
+      FileUtils.copyDirectory(source, destination, true);
+    } catch (IOException e) {
+      throw new UncheckedIOException(e);
+    }
+  }
+
+  private void readObject(ObjectInputStream stream) throws InvalidObjectException {
-  private Object writeReplace() {
+  protected Object writeReplace() {
+  @SuppressWarnings("serial")
-    SerializationProxy(final SerializableTemporaryFolder instance) {
-      this.parentFolder = (File) readField(TemporaryFolder.class, instance, FIELD_PARENT_FOLDER);
-      this.folder = (File) readField(TemporaryFolder.class, instance, FIELD_FOLDER);
+    private SerializationProxy(SerializableTemporaryFolder instance) {
+      parentFolder = (File) readField(TemporaryFolder.class, instance, FIELD_PARENT_FOLDER);
+      folder = (File) readField(TemporaryFolder.class, instance, FIELD_FOLDER);
-    private Object readResolve() {
-      SerializableTemporaryFolder instance = new SerializableTemporaryFolder(this.parentFolder);
-      writeField(TemporaryFolder.class, instance, FIELD_FOLDER, this.folder);
+    protected Object readResolve() {
+      SerializableTemporaryFolder instance = new SerializableTemporaryFolder(parentFolder);
+      writeField(TemporaryFolder.class, instance, FIELD_FOLDER, folder);
