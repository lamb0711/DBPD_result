Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.cache.TransactionDataNodeHasDepartedException;
-import com.gemstone.gemfire.cache.TransactionDataRebalancedException;
-import com.gemstone.gemfire.cache.operations.QueryOperationContext;
-import com.gemstone.gemfire.cache.query.Query;
-import com.gemstone.gemfire.cache.query.QueryException;
-import com.gemstone.gemfire.cache.query.QueryInvalidException;
-import com.gemstone.gemfire.cache.query.SelectResults;
-import com.gemstone.gemfire.cache.query.Struct;
-import com.gemstone.gemfire.cache.query.internal.CqEntry;
-import com.gemstone.gemfire.cache.query.internal.DefaultQuery;
-import com.gemstone.gemfire.cache.query.internal.types.CollectionTypeImpl;
-import com.gemstone.gemfire.cache.query.internal.types.StructTypeImpl;
-import com.gemstone.gemfire.i18n.LogWriterI18n;
-import com.gemstone.gemfire.internal.security.AuthorizeRequestPP;
+import com.gemstone.gemfire.internal.offheap.OffHeapHelper;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-
-    LocalRegion r = clientEvent.getRegion();    
-    VersionTag tag = r.findVersionTagForClientEvent(clientEvent.getEventId());
+    LocalRegion r = clientEvent.getRegion();
+    VersionTag tag =  null;
+    if ((clientEvent.getVersionTag() != null) && (clientEvent.getVersionTag().isGatewayTag())) {
+      tag = r.findVersionTagForGatewayEvent(clientEvent.getEventId());
+    }
+    else {
+      tag = r.findVersionTagForClientEvent(clientEvent.getEventId());
+    }
+          logger.debug("EOF exception", eof);
-    origMsg.flush();
+    origMsg.clearParts();
-    origMsg.flush();
+    origMsg.clearParts();
-    origMsg.flush();
+    origMsg.clearParts();
-  @SuppressFBWarnings(value="NP_NULL_PARAM_DEREF", justification="Null value handled in sendNewRegisterInterestResponseChunk()")
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="NP_NULL_PARAM_DEREF", justification="Null value handled in sendNewRegisterInterestResponseChunk()")
-        Object data = region.get(entryKey, null, true, true, true, id, versionHolder, true);
+        Object data = region.get(entryKey, null, true, true, true, id, versionHolder, true, false);
-        data = region.get(key, null, true, true, true, id, versionHolder, true);
+        data = region.get(key, null, true, true, true, id, versionHolder, true, false);
-      Object value = region.get(key, null, true, true, true, requestingClient, versionHolder, true);
+      Object value = region.get(key, null, true, true, true, requestingClient, versionHolder, true, false);
+          updateValues(values, key, value, vt);
-          value = ((NonTXEntry)entry).getRegionEntry()._getValue();
+          value = ((NonTXEntry)entry).getRegionEntry()._getValueRetain(region, true);
+          try {
+            updateValues(values, key, value, vt);
+          } finally {
+            // TODO OFFHEAP: in the future we might want to delay this release
+            // until the "values" VersionedObjectList is released.
+            // But for now "updateValues" copies the off-heap value to the heap.
+            OffHeapHelper.release(value);
+          }
-        updateValues(values, key, value, vt);
-              true);
+              true, false);
