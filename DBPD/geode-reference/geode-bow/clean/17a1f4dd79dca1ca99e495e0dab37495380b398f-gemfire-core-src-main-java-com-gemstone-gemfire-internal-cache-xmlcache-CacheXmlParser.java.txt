Merge remote-tracking branch 'origin/develop' into feature/GEODE-77

-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributes;
-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributesFactory;
-import com.gemstone.gemfire.cache.hdfs.HDFSStoreFactory.HDFSCompactionConfigFactory;
-    boolean eventQueueAttributesExist = false;
-    HDFSEventQueueAttributesFactory eventFactory = new HDFSEventQueueAttributesFactory();
-      eventQueueAttributesExist = true;
-      eventFactory.setMaximumQueueMemory(maxMemory);
+      attrs.setMaxMemory(maxMemory);
-      eventQueueAttributesExist = true;
-      eventFactory.setBatchSizeMB(batchSize);
+      attrs.setBatchSize(batchSize);
-      eventQueueAttributesExist = true;
-      eventFactory.setBatchTimeInterval(batchInterval);
+      attrs.setBatchInterval(batchInterval);
-      eventQueueAttributesExist = true;
-      eventFactory.setDispatcherThreads(dispatcherThreads);
+      attrs.setDispatcherThreads(dispatcherThreads);
-      eventQueueAttributesExist = true;
-      eventFactory.setPersistent(bufferPersistent);
+      attrs.setBufferPersistent(bufferPersistent);
-      eventQueueAttributesExist = true;
-      eventFactory.setDiskSynchronous(synchronousDiskWrite);
+      attrs.setSynchronousDiskWrite(synchronousDiskWrite);
-      eventQueueAttributesExist = true;
-      eventFactory.setDiskStoreName(diskstoreName);
+      attrs.setDiskStoreName(diskstoreName);
-    if (eventQueueAttributesExist) {
-      HDFSEventQueueAttributes eventQAttribs = eventFactory.create();
-      attrs.setHDFSEventQueueAttributes(eventQAttribs);
-    }
-   
-    HDFSCompactionConfigFactory config = attrs.createCompactionConfigFactory(null);
-      config.setOldFilesCleanupIntervalMins(purgeInterval);
+      attrs.setPurgeInterval(purgeInterval);
-      config.setAutoMajorCompaction(Boolean.valueOf(majorCompaction));
+      attrs.setMajorCompaction(Boolean.valueOf(majorCompaction));
-      config.setMajorCompactionIntervalMins(majorCompactionInterval);
+      attrs.setMajorCompactionInterval(majorCompactionInterval);
-      config.setMajorCompactionMaxThreads(value);
+      attrs.setMajorCompactionThreads(value);
-      config.setMaxThreads(value);
+      attrs.setMinorCompactionThreads(value);
-    attrs.setHDFSCompactionConfig(config.getConfigView());
-
-      attrs.setMaxFileSize(parseInt(maxFileSize));
+      attrs.setWriteOnlyFileRolloverSize(parseInt(maxFileSize));
-      attrs.setFileRolloverInterval(parseInt(fileRolloverInterval));
+      attrs.setWriteOnlyFileRolloverInterval(parseInt(fileRolloverInterval));
-  private void startHDFSEventQueue(Attributes atts) {
-    HDFSEventQueueAttributesFactory eventFactory = new HDFSEventQueueAttributesFactory();
-    
-    //batch-size
-    String batchSize = atts.getValue(HDFS_QUEUE_BATCH_SIZE);
-    if(batchSize != null){
-      eventFactory.setBatchSizeMB(Integer.parseInt(batchSize));
-    }
-    
-    //batch-size
-    String batchInterval = atts.getValue(BATCH_TIME_INTERVAL);
-    if(batchInterval != null){
-      eventFactory.setBatchTimeInterval(Integer.parseInt(batchInterval));
-    }
-    
-    //maximum-queue-memory
-    String maxQueueMemory = atts.getValue(MAXIMUM_QUEUE_MEMORY);
-    if(maxQueueMemory != null){
-      eventFactory.setMaximumQueueMemory(Integer.parseInt(maxQueueMemory));
-    }
-    
-    //persistent
-    String persistent = atts.getValue(PERSISTENT);
-    if(persistent != null){
-      eventFactory.setPersistent(Boolean.parseBoolean(persistent));
-    }
-    
-    String diskStoreName = atts.getValue(DISK_STORE_NAME);
-    if(diskStoreName != null){
-      eventFactory.setDiskStoreName(diskStoreName);
-    }
-    
-    String diskSynchronous = atts.getValue(DISK_SYNCHRONOUS);
-    if(diskSynchronous != null){
-      eventFactory.setDiskSynchronous(Boolean.parseBoolean(diskSynchronous));
-    }
-    
-    HDFSEventQueueAttributes eventAttribs = eventFactory.create();
-    stack.push(eventAttribs);
-  }
-  
-  private void endHDFSEventQueue() {
-    HDFSEventQueueAttributes eventAttribs = (HDFSEventQueueAttributes) stack.pop();
-    
-    Object storeCreation = stack.peek();
-    if (!(storeCreation instanceof HDFSStoreCreation))
-      //TODO:HDFS throw a proper error string
-        throw new CacheXmlException("Store attributes should be a child of store");
-    HDFSStoreCreation store = (HDFSStoreCreation)storeCreation;
-    // put back the popped element
-    
-    store.setHDFSEventQueueAttributes(eventAttribs);
-  }
-  
-    else if (qName.equals(HDFS_EVENT_QUEUE)) {
-      startHDFSEventQueue(atts);
-    }
-      else if (qName.equals(HDFS_EVENT_QUEUE)) {
-        endHDFSEventQueue();
-      }
