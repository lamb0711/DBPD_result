Merge branch 'feature/GEODE-83' into develop
close #10.

+  private final byte[] authPwd;
+  private boolean isAuthenticated;
-  public ExecutionHandlerContext(Channel ch, Cache cache, RegionCache regions, GemFireRedisServer server) {
+  public ExecutionHandlerContext(Channel ch, Cache cache, RegionCache regions, GemFireRedisServer server, byte[] pwd) {
+    this.authPwd = pwd;
+    this.isAuthenticated = pwd != null ? false : true;
-    if (type == RedisCommandType.SHUTDOWN) {
-      this.server.shutdown();
-      return;
-    }
-    if (hasTransaction() && !(exec instanceof TransactionExecutor))
-      executeWithTransaction(ctx, exec, command);
-    else
-      executeWithoutTransaction(exec, command, MAXIMUM_NUM_RETRIES); 
+    if (isAuthenticated) {
+      if (type == RedisCommandType.SHUTDOWN) {
+        this.server.shutdown();
+        return;
+      }
+      if (hasTransaction() && !(exec instanceof TransactionExecutor))
+        executeWithTransaction(ctx, exec, command);
+      else
+        executeWithoutTransaction(exec, command, MAXIMUM_NUM_RETRIES); 
-    if (hasTransaction() && command.getCommandType() != RedisCommandType.MULTI)
-      writeToChannel(Coder.getSimpleStringResponse(this.byteBufAllocator, RedisConstants.COMMAND_QUEUED));
-    else 
-      writeToChannel(command.getResponse());
-    if (type == RedisCommandType.QUIT) {
+      if (hasTransaction() && command.getCommandType() != RedisCommandType.MULTI) {
+        writeToChannel(Coder.getSimpleStringResponse(this.byteBufAllocator, RedisConstants.COMMAND_QUEUED));
+      } else {
+        ByteBuf response = command.getResponse();
+        writeToChannel(response);
+      }
+    } else if (type == RedisCommandType.QUIT) {
+      exec.executeCommand(command, this);
+      ByteBuf response = command.getResponse();
+      writeToChannel(response);
+    } else if (type == RedisCommandType.AUTH) {
+      exec.executeCommand(command, this);
+      ByteBuf response = command.getResponse();
+      writeToChannel(response);
+    } else {
+      ByteBuf r = Coder.getNoAuthResponse(this.byteBufAllocator, RedisConstants.ERROR_NOT_AUTH);
+      writeToChannel(r);
+  public LogWriter getLogger() {
+    return this.cache.getLogger();
+  }
+
+  public Channel getChannel() {
+    return this.channel;
+  }
+
+  public byte[] getAuthPwd() {
+    return this.authPwd;
+  }
+
+  public boolean isAuthenticated() {
+    return this.isAuthenticated;
+  }
+
+  public void setAuthenticationVerified() {
+    this.isAuthenticated = true;
+  }
