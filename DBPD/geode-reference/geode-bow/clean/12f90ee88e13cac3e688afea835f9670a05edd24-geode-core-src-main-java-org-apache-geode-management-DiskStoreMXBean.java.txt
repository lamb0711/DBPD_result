Merge branch 'develop' into feature/GEODE-3109

+import org.apache.geode.security.ResourcePermission.Target;
-  public String getName();
+  String getName();
-  public boolean isAutoCompact();
+  boolean isAutoCompact();
-  public int getCompactionThreshold();
+  int getCompactionThreshold();
-  public boolean isForceCompactionAllowed();
+  boolean isForceCompactionAllowed();
-  public long getMaxOpLogSize();
+  long getMaxOpLogSize();
-  public long getTimeInterval();
+  long getTimeInterval();
-  public int getWriteBufferSize();
+  int getWriteBufferSize();
-  public String[] getDiskDirectories();
+  String[] getDiskDirectories();
-  public int getQueueSize();
+  int getQueueSize();
-  public long getTotalBytesOnDisk();
+  long getTotalBytesOnDisk();
-  public float getDiskReadsRate();
+  float getDiskReadsRate();
-  public float getDiskWritesRate();
+  float getDiskWritesRate();
-  public long getDiskReadsAvgLatency();
+  long getDiskReadsAvgLatency();
-  public long getDiskWritesAvgLatency();
+  long getDiskWritesAvgLatency();
-  public long getFlushTimeAvgLatency();
+  long getFlushTimeAvgLatency();
-  public int getTotalQueueSize();
+  int getTotalQueueSize();
-  public int getTotalBackupInProgress();
+  int getTotalBackupInProgress();
-  public int getTotalBackupCompleted();
+  int getTotalBackupCompleted();
-  public int getTotalRecoveriesInProgress();
+  int getTotalRecoveriesInProgress();
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public void forceRoll();
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.DISK)
+  void forceRoll();
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public boolean forceCompaction();
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.DISK)
+  boolean forceCompaction();
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public void flush();
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.DISK)
+  void flush();
-  public float getDiskUsageWarningPercentage();
+  float getDiskUsageWarningPercentage();
-  public float getDiskUsageCriticalPercentage();
+  float getDiskUsageCriticalPercentage();
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public void setDiskUsageWarningPercentage(float warningPercent);
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.DISK)
+  void setDiskUsageWarningPercentage(float warningPercent);
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  public void setDiskUsageCriticalPercentage(float criticalPercent);
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.DISK)
+  void setDiskUsageCriticalPercentage(float criticalPercent);
