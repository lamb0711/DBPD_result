Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
+  private final ThreadLocal<Boolean> pauseJTA;
+
-  private final DM dm;
+  private final DistributionManager dm;
+    this.pauseJTA = new ThreadLocal<Boolean>();
-      proxy = new DistTXStateProxyImplOnCoordinator(this, id, null);
+      proxy = new DistTXStateProxyImplOnCoordinator(cache, this, id, null);
-      proxy = new TXStateProxyImpl(this, id, null);
+      proxy = new TXStateProxyImpl(cache, this, id, null);
-      newState = new DistTXStateProxyImplOnCoordinator(this, id, true);
+      newState = new DistTXStateProxyImplOnCoordinator(cache, this, id, true);
-      newState = new TXStateProxyImpl(this, id, true);
+      newState = new TXStateProxyImpl(cache, this, id, true);
+    } else {
+      if (needToResumeBySameThread) {
+        // pausedJTA is set to true when JTA is not yet bootstrapped.
+        pauseJTA.set(true);
+      }
+    } else {
+      if (needToResumeBySameThread) {
+        pauseJTA.set(false);
+      }
+  public boolean isJTAPaused() {
+    Boolean jtaPaused = pauseJTA.get();
+    if (jtaPaused == null) {
+      return false;
+    }
+    return jtaPaused;
+  }
+
-  DM getDM() {
+  DistributionManager getDM() {
-            val = new DistTXStateProxyImplOnDatanode(this, key, msg.getTXOriginatorClient());
+            val = new DistTXStateProxyImplOnDatanode(cache, this, key, msg.getTXOriginatorClient());
-            val = new TXStateProxyImpl(this, key, msg.getTXOriginatorClient());
+            val = new TXStateProxyImpl(cache, this, key, msg.getTXOriginatorClient());
-            val = new DistTXStateProxyImplOnDatanode(this, key, memberId);
+            val = new DistTXStateProxyImplOnDatanode(cache, this, key, memberId);
-            val = new TXStateProxyImpl(this, key, memberId);
+            val = new TXStateProxyImpl(cache, this, key, memberId);
-  public void memberDeparted(InternalDistributedMember id, boolean crashed) {
+  public void memberDeparted(DistributionManager distributionManager, InternalDistributedMember id,
+      boolean crashed) {
-  public void memberJoined(InternalDistributedMember id) {}
+  public void memberJoined(DistributionManager distributionManager, InternalDistributedMember id) {}
-  public void quorumLost(Set<InternalDistributedMember> failures,
-      List<InternalDistributedMember> remaining) {}
+  public void quorumLost(DistributionManager distributionManager,
+      Set<InternalDistributedMember> failures, List<InternalDistributedMember> remaining) {}
-  public void memberSuspect(InternalDistributedMember id, InternalDistributedMember whoSuspected,
-      String reason) {}
+  public void memberSuspect(DistributionManager distributionManager, InternalDistributedMember id,
+      InternalDistributedMember whoSuspected, String reason) {}
-  private void saveTXStateForClientFailover(TXStateProxy tx) {
+  void saveTXStateForClientFailover(TXStateProxy tx) {
-      failoverMap.put(tx.getTxId(), tx.getCommitMessage());
+      TXCommitMessage commitMessage =
+          tx.getCommitMessage() == null ? TXCommitMessage.ROLLBACK_MSG : tx.getCommitMessage();
+      failoverMap.put(tx.getTxId(), commitMessage);
-    static void send(DM dm, Set recipients, Set<TXId> txIds) {
+    static void send(DistributionManager dm, Set recipients, Set<TXId> txIds) {
-    protected void process(DistributionManager dm) {
+    protected void process(ClusterDistributionManager dm) {
