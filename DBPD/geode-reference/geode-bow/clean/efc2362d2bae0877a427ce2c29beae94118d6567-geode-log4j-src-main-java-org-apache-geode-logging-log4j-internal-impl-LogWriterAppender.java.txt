GEODE-6964: Move geode log4j core classes to geode-log4j

Introduce new Logging and Alerting SPIs. Extract all log4j-core code to
geode-log4j module.

The geode-core module no longer contains log4j2.xml and no longer has a
dependency on log4j-core.

All code that uses log4j-core has moved to the new module geode-log4j.
The log4j2.xml for Geode now lives in geode-log4j as well. These
changes ensure that users have better control over logging including
which backend to use. This should improve user experience when using
Spring Boot.

Co-authored-by: Mark Hanson <mhanson@pivotal.io>

-package org.apache.geode.internal.logging.log4j;
+package org.apache.geode.logging.log4j.internal.impl;
-import org.apache.geode.internal.logging.LogConfig;
-import org.apache.geode.internal.logging.LogConfigListener;
-import org.apache.geode.internal.logging.LogConfigSupplier;
-import org.apache.geode.internal.logging.LogFile;
-import org.apache.geode.internal.logging.LoggingSessionListener;
-import org.apache.geode.internal.logging.LoggingSessionListeners;
-import org.apache.geode.internal.logging.NullLogWriter;
-import org.apache.geode.internal.logging.SessionContext;
+import org.apache.geode.logging.internal.LoggingSessionRegistryProvider;
+import org.apache.geode.logging.internal.spi.LogConfig;
+import org.apache.geode.logging.internal.spi.LogConfigListener;
+import org.apache.geode.logging.internal.spi.LogConfigSupplier;
+import org.apache.geode.logging.internal.spi.LogFile;
+import org.apache.geode.logging.internal.spi.LoggingSessionListener;
+import org.apache.geode.logging.internal.spi.LoggingSessionRegistry;
+import org.apache.geode.logging.internal.spi.SessionContext;
-  private final LoggingSessionListeners loggingSessionListeners;
+  private final LoggingSessionRegistry loggingSessionRegistry;
-        true, false, START_PAUSED_BY_DEFAULT, false, LoggingSessionListeners.get());
+        true, false, START_PAUSED_BY_DEFAULT, false, LoggingSessionRegistryProvider.get());
-      final LoggingSessionListeners loggingSessionListeners) {
+      final LoggingSessionRegistry loggingSessionRegistry) {
-    this.loggingSessionListeners = loggingSessionListeners;
+    this.loggingSessionRegistry = loggingSessionRegistry;
-          security, startPaused, debug, LoggingSessionListeners.get());
+          security, startPaused, debug, LoggingSessionRegistryProvider.get());
-    LOGGER.debug("Adding {} to {}.", this, loggingSessionListeners);
-    loggingSessionListeners.addLoggingLifecycleListener(this);
+    LOGGER.debug("Adding {} to {}.", this, loggingSessionRegistry);
+    loggingSessionRegistry.addLoggingSessionListener(this);
-    loggingSessionListeners.removeLoggingLifecycleListener(this);
+    loggingSessionRegistry.removeLoggingSessionListener(this);
-        + ", loggingSessionListeners=" + loggingSessionListeners + ", logWriter=" + logWriter
+        + ", loggingSessionRegistry=" + loggingSessionRegistry + ", logWriter=" + logWriter
