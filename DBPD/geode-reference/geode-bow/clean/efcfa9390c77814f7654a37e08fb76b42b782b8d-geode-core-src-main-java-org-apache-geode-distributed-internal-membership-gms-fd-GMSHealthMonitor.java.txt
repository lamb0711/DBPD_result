Revert "GEODE-6244 Healthy member kicked out by sick member"

There are unit test failures caused by what I thought were innocuous changes

This reverts commit f4b8cf2f8dbcb98b541b24238b50b4066ff136a8.

-    sendSuspectRequest(Collections.singletonList(new SuspectRequest(mbr, reason)));
+    SuspectRequest sr = new SuspectRequest(mbr, reason);
+    List<SuspectRequest> sl = new ArrayList<>();
+    sl.add(sr);
+    sendSuspectRequest(sl);
-      logger.debug("Availability check TCP/IP connection timed out for suspect member {}",
-          suspectMember);
+      logger.debug("Final check TCP/IP connection timed out for suspect member {}", suspectMember);
-    logger.info("Received suspect message {} with current view {}", incomingRequest,
-        cv == null ? "<no view>" : cv.getViewId());
-
-    logger.debug(
-        "Processing suspect requests {}\nproposed view is currently {}\nwith coordinator {}",
-        suspectRequests, cv, cv.getCoordinator());
+    logger.debug("Processing suspect requests {}", suspectRequests);
-        logger.info("Current suspects are {}", suspectsInView);
+        logger.debug("Current suspects for view #{} are {}", cv.getViewId(), suspectsInView);
-      List membersLeaving = new ArrayList();
-      for (InternalDistributedMember member : cv.getMembers()) {
-        if (services.getJoinLeave().isMemberLeaving(member)) {
-          membersLeaving.add(member);
-        }
-      }
-      if (!membersLeaving.isEmpty()) {
-        logger.info("Current leave requests are {}", membersLeaving);
-        check.removeAll(membersLeaving);
-      }
-      logger.info(
-          "Proposed view with suspects & leaving members removed is {}\nwith coordinator {}\nmy address is {}",
-          check,
-          check.getCoordinator(), localAddress);
+      logger.trace("Trial view with suspects removed is {}\nmy address is {}", check, localAddress);
-      logger.debug("Scheduling availability check for member {}; reason={}", mbr, reason);
+      logger.debug("Scheduling final check for member {}; reason={}", mbr, reason);
-      final NetView cv, boolean forceRemovalIfCheckFails, final InternalDistributedMember mbr,
+      final NetView cv, boolean initiateRemoval, final InternalDistributedMember mbr,
-    logger.info("Performing availability check for suspect member {} reason={}", mbr, reason);
+    logger.info("Performing final check for suspect member {} reason={}", mbr, reason);
-          logger.info("Availability check failed for member {}", mbr);
-          // if the final check fails & this VM is the coordinator we don't need to do another final
-          // check
-          if (forceRemovalIfCheckFails) {
+          logger.info("Final check failed for member {}", mbr);
+          if (initiateRemoval) {
-            // make sure it is still suspected
-            memberSuspected(localAddress, mbr, reason);
-          } else {
-            // if this node can survive an availability check then initiate suspicion about
-            // the node that failed the availability check
-            if (doTCPCheckMember(localAddress, this.socketPort)) {
-              membersInFinalCheck.remove(mbr);
-              // tell peers about this member and then perform another availability check
-              memberSuspected(localAddress, mbr, reason);
-              initiateSuspicion(mbr, reason);
-              SuspectMembersMessage suspectMembersMessage =
-                  new SuspectMembersMessage(Collections.singletonList(localAddress),
-                      Collections
-                          .singletonList(new SuspectRequest(mbr, "failed availability check")));
-              suspectMembersMessage.setSender(localAddress);
-              logger.info("Performing local processing on suspect request");
-              processSuspectMembersRequest(suspectMembersMessage);
-            }
+          // make sure it is still suspected
+          memberSuspected(localAddress, mbr, reason);
-              "Availability check failed but detected recent message traffic for suspect member "
-                  + mbr);
+              "Final check failed but detected recent message traffic for suspect member " + mbr);
-        logger.info("Availability check passed for suspect member " + mbr);
+        logger.info("Final check passed for suspect member " + mbr);
-    logger.info("Sending suspect messages to {}", recipients);
-      logger.info("Unable to send suspect message to {}", failedRecipients);
+      logger.info("Unable to send suspect message to {}", recipients);
