GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.internal.InternalDataSerializer;
-import org.apache.geode.internal.Version;
+
-  public RemoteOperationMessage() {}
-
+  public RemoteOperationMessage() {
+    // do nothing
+  }
-    if (processor != null && this.isSevereAlertCompatible()) {
+    if (processor != null && isSevereAlertCompatible()) {
-    if (processor != null && this.isSevereAlertCompatible()) {
+    if (processor != null && isSevereAlertCompatible()) {
-   * 
-   * @param other
-  public final String getRegionPath() {
+  public String getRegionPath() {
-  public final int getProcessorId() {
+  public int getProcessorId() {
-   * @param processorId1 the {@link org.apache.geode.distributed.internal.ReplyProcessor21} id
-   *        associated with the message, null if no acknowlegement is required.
-   */
-  public final void registerProcessor(int processorId1) {
-    this.processorId = processorId1;
-  }
-
-  public void setCacheOpRecipients(Collection cacheOpRecipients) {
-    // TODO need to implement this for other remote ops
-    assert this instanceof RemotePutMessage;
-  }
-
-
-  /**
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-    // return (cache != null && cache.isClosed());
+    InternalCache cache = GemFireCacheImpl.getInstance();
-      GemFireCacheImpl gfc = getCache(dm);
-      r = getRegionByPath(gfc);
+      InternalCache cache = getCache(dm);
+      r = getRegionByPath(cache);
-            LocalizedStrings.RemoteOperationMessage_0_COULD_NOT_FIND_REGION_1.toLocalizedString(
-                new Object[] {dm.getDistributionManagerId(), regionPath}),
+            LocalizedStrings.RemoteOperationMessage_0_COULD_NOT_FIND_REGION_1
+                .toLocalizedString(dm.getDistributionManagerId(), regionPath),
-      TXManagerImpl txMgr = getTXManager(gfc);
+      TXManagerImpl txMgr = getTXManager(cache);
-  TXManagerImpl getTXManager(GemFireCacheImpl cache) {
+  TXManagerImpl getTXManager(InternalCache cache) {
-  LocalRegion getRegionByPath(GemFireCacheImpl gfc) {
-    return gfc.getRegionByPathForProcessing(this.regionPath);
+  LocalRegion getRegionByPath(InternalCache internalCache) {
+    return internalCache.getRegionByPathForProcessing(this.regionPath);
-  GemFireCacheImpl getCache(final DistributionManager dm) {
-    return (GemFireCacheImpl) CacheFactory.getInstance(dm.getSystem());
+  InternalCache getCache(final DistributionManager dm) {
+    return (InternalCache) CacheFactory.getInstance(dm.getSystem());
-  protected final InternalDistributedMember getTXMemberId() {
+  protected InternalDistributedMember getTXMemberId() {
-  public final int getTXUniqId() {
+  public int getTXUniqId() {
-
-  public final InternalDistributedMember getMemberToMasqueradeAs() {
+  public InternalDistributedMember getMemberToMasqueradeAs() {
-                  .toLocalizedString(new Object[] {id, Boolean.valueOf(crashed)}));
+                  .toLocalizedString(id, crashed));
-            LocalizedStrings.PartitionMessage_MEMBERDEPARTED_GOT_NULL_MEMBERID_CRASHED_0,
-            Boolean.valueOf(crashed)), e);
+            LocalizedStrings.PartitionMessage_MEMBERDEPARTED_GOT_NULL_MEMBERID_CRASHED_0, crashed),
+            e);
-     * @throws PrimaryBucketException
-    final public void waitForCacheException()
+    public void waitForCacheException()
-          RegionDestroyedException rde = (RegionDestroyedException) t;
-          throw rde;
+          throw (RegionDestroyedException) t;
-    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+    InternalCache cache = GemFireCacheImpl.getInstance();
