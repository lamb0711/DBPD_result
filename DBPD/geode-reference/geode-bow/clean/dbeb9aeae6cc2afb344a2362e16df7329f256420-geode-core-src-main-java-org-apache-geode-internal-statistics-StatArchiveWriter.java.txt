Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import org.apache.geode.internal.net.SocketCreator;
-
+import org.apache.geode.internal.net.SocketCreator;
-import java.io.*;
+import java.io.BufferedOutputStream;
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintStream;
-import java.util.*;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.TimeZone;
- * StatArchiveWriter provides APIs to write statistic snapshots to an archive
- * file.
+ * StatArchiveWriter provides APIs to write statistic snapshots to an archive file.
-  
+
-  private final boolean trace = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "stats.debug.traceStatArchiveWriter");
-  
-  private final Set<ResourceInstance> sampleWrittenForResources = 
-      new HashSet<ResourceInstance>();
-  private final Set<ResourceInstance> addedResources = 
-      new HashSet<ResourceInstance>();
+  private final boolean trace =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "stats.debug.traceStatArchiveWriter");
+
+  private final Set<ResourceInstance> sampleWrittenForResources = new HashSet<ResourceInstance>();
+  private final Set<ResourceInstance> addedResources = new HashSet<ResourceInstance>();
-  
+
+   * 
-    
+
-        this.outStream = new GZIPOutputStream(new FileOutputStream(archiveDescriptor.getArchiveName()), 32768);
+        this.outStream =
+            new GZIPOutputStream(new FileOutputStream(archiveDescriptor.getArchiveName()), 32768);
-        throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_OPEN_0.toLocalizedString(archiveDescriptor.getArchiveName()), ex);
+        throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_OPEN_0
+            .toLocalizedString(archiveDescriptor.getArchiveName()), ex);
-        this.outStream = new BufferedOutputStream(new FileOutputStream(archiveDescriptor.getArchiveName()), 32768);
+        this.outStream = new BufferedOutputStream(
+            new FileOutputStream(archiveDescriptor.getArchiveName()), 32768);
-        throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_OPEN_0.toLocalizedString(archiveDescriptor.getArchiveName()), ex);
+        throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_OPEN_0
+            .toLocalizedString(archiveDescriptor.getArchiveName()), ex);
-    
+
-  
+
-  
+
+   * 
-      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_COULD_NOT_CLOSE_STATARCHIVER_FILE.toLocalizedString(), ex);
+      throw new GemFireIOException(
+          LocalizedStrings.StatArchiveWriter_COULD_NOT_CLOSE_STATARCHIVER_FILE.toLocalizedString(),
+          ex);
-  
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", justification="Best effort attempt to delete a GFS file without any samples.") 
+
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE",
+      justification = "Best effort attempt to delete a GFS file without any samples.")
-   * Returns the number of bytes written so far to this archive.
-   * This does not take compression into account.
+   * Returns the number of bytes written so far to this archive. This does not take compression into
+   * account.
-  
+
-  
+
-  
+
-  
+
-  
+
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#writeHeader initialDate={} archiveDescriptor={}", initialDate, archiveDescriptor);
+      logger.trace(LogMarker.STATISTICS,
+          "StatArchiveWriter#writeHeader initialDate={} archiveDescriptor={}", initialDate,
+          archiveDescriptor);
-      
+
-        this.traceDataOut.println("writeHeader traceStatisticsTypeName: " + traceStatisticsTypeName);
+        this.traceDataOut
+            .println("writeHeader traceStatisticsTypeName: " + traceStatisticsTypeName);
-        this.traceDataOut.println("writeHeader#writeLong archiveDescriptor.getSystemId(): " + archiveDescriptor.getSystemId());
-        this.traceDataOut.println("writeHeader#writeLong archiveDescriptor.getSystemStartTime(): " + archiveDescriptor.getSystemStartTime());
-        this.traceDataOut.println("writeHeader#writeInt timeZone.getRawOffset(): " + timeZone.getRawOffset());
+        this.traceDataOut.println("writeHeader#writeLong archiveDescriptor.getSystemId(): "
+            + archiveDescriptor.getSystemId());
+        this.traceDataOut.println("writeHeader#writeLong archiveDescriptor.getSystemStartTime(): "
+            + archiveDescriptor.getSystemStartTime());
+        this.traceDataOut
+            .println("writeHeader#writeInt timeZone.getRawOffset(): " + timeZone.getRawOffset());
-        this.traceDataOut.println("writeHeader#writeUTF archiveDescriptor.getSystemDirectoryPath(): " + archiveDescriptor.getSystemDirectoryPath());
-        this.traceDataOut.println("writeHeader#writeUTF archiveDescriptor.getProductDescription(): " + archiveDescriptor.getProductDescription());
+        this.traceDataOut
+            .println("writeHeader#writeUTF archiveDescriptor.getSystemDirectoryPath(): "
+                + archiveDescriptor.getSystemDirectoryPath());
+        this.traceDataOut.println("writeHeader#writeUTF archiveDescriptor.getProductDescription(): "
+            + archiveDescriptor.getProductDescription());
-      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_FAILED_WRITING_HEADER_TO_STATISTIC_ARCHIVE.toLocalizedString(), ex);
+      throw new GemFireIOException(
+          LocalizedStrings.StatArchiveWriter_FAILED_WRITING_HEADER_TO_STATISTIC_ARCHIVE
+              .toLocalizedString(),
+          ex);
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#allocatedResourceType resourceType={}", resourceType);
+      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#allocatedResourceType resourceType={}",
+          resourceType);
-      throw new InternalGemFireException(LocalizedStrings.StatArchiveWriter_COULD_NOT_ARCHIVE_TYPE_0_BECAUSE_IT_HAD_MORE_THAN_1_STATISTICS.toLocalizedString(new Object[] {resourceType.getStatisticsType().getName(), Integer.valueOf(ILLEGAL_STAT_OFFSET-1)}));
+      throw new InternalGemFireException(
+          LocalizedStrings.StatArchiveWriter_COULD_NOT_ARCHIVE_TYPE_0_BECAUSE_IT_HAD_MORE_THAN_1_STATISTICS
+              .toLocalizedString(new Object[] {resourceType.getStatisticsType().getName(),
+                  Integer.valueOf(ILLEGAL_STAT_OFFSET - 1)}));
-      if (this.trace && (traceStatisticsTypeName == null || traceStatisticsTypeName.equals(resourceType.getStatisticsType().getName()))) {
-        this.traceDataOut.println("allocatedResourceType#writeByte RESOURCE_TYPE_TOKEN: " + RESOURCE_TYPE_TOKEN);
-        this.traceDataOut.println("allocatedResourceType#writeInt resourceType.getId(): " + resourceType.getId());
-        this.traceDataOut.println("allocatedResourceType#writeUTF resourceType.getStatisticsType().getName(): " + resourceType.getStatisticsType().getName());
-        this.traceDataOut.println("allocatedResourceType#writeUTF resourceType.getStatisticsType().getDescription(): " + resourceType.getStatisticsType().getDescription());
+      if (this.trace && (traceStatisticsTypeName == null
+          || traceStatisticsTypeName.equals(resourceType.getStatisticsType().getName()))) {
+        this.traceDataOut
+            .println("allocatedResourceType#writeByte RESOURCE_TYPE_TOKEN: " + RESOURCE_TYPE_TOKEN);
+        this.traceDataOut.println(
+            "allocatedResourceType#writeInt resourceType.getId(): " + resourceType.getId());
+        this.traceDataOut
+            .println("allocatedResourceType#writeUTF resourceType.getStatisticsType().getName(): "
+                + resourceType.getStatisticsType().getName());
+        this.traceDataOut.println(
+            "allocatedResourceType#writeUTF resourceType.getStatisticsType().getDescription(): "
+                + resourceType.getStatisticsType().getDescription());
-      for (int i=0; i < stats.length; i++) {
+      for (int i = 0; i < stats.length; i++) {
-        this.dataOut.writeByte(((StatisticDescriptorImpl)stats[i]).getTypeCode());
+        this.dataOut.writeByte(((StatisticDescriptorImpl) stats[i]).getTypeCode());
-        if (this.trace && (traceStatisticsTypeName == null || traceStatisticsTypeName.equals(resourceType.getStatisticsType().getName()))) {
-          this.traceDataOut.println("allocatedResourceType#writeUTF stats[i].getName(): " + stats[i].getName());
-          this.traceDataOut.println("allocatedResourceType#writeByte ((StatisticDescriptorImpl)stats[i]).getTypeCode(): " + ((StatisticDescriptorImpl)stats[i]).getTypeCode());
-          this.traceDataOut.println("allocatedResourceType#writeBoolean stats[i].isCounter(): " + stats[i].isCounter());
-          this.traceDataOut.println("allocatedResourceType#writeBoolean stats[i].isLargerBetter(): " + stats[i].isLargerBetter());
-          this.traceDataOut.println("allocatedResourceType#writeUTF stats[i].getUnit(): " + stats[i].getUnit());
-          this.traceDataOut.println("allocatedResourceType#writeUTF stats[i].getDescription(): " + stats[i].getDescription());
+        if (this.trace && (traceStatisticsTypeName == null
+            || traceStatisticsTypeName.equals(resourceType.getStatisticsType().getName()))) {
+          this.traceDataOut
+              .println("allocatedResourceType#writeUTF stats[i].getName(): " + stats[i].getName());
+          this.traceDataOut.println(
+              "allocatedResourceType#writeByte ((StatisticDescriptorImpl)stats[i]).getTypeCode(): "
+                  + ((StatisticDescriptorImpl) stats[i]).getTypeCode());
+          this.traceDataOut.println(
+              "allocatedResourceType#writeBoolean stats[i].isCounter(): " + stats[i].isCounter());
+          this.traceDataOut.println("allocatedResourceType#writeBoolean stats[i].isLargerBetter(): "
+              + stats[i].isLargerBetter());
+          this.traceDataOut
+              .println("allocatedResourceType#writeUTF stats[i].getUnit(): " + stats[i].getUnit());
+          this.traceDataOut.println("allocatedResourceType#writeUTF stats[i].getDescription(): "
+              + stats[i].getDescription());
-      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_FAILED_WRITING_NEW_RESOURCE_TYPE_TO_STATISTIC_ARCHIVE.toLocalizedString(), ex);
+      throw new GemFireIOException(
+          LocalizedStrings.StatArchiveWriter_FAILED_WRITING_NEW_RESOURCE_TYPE_TO_STATISTIC_ARCHIVE
+              .toLocalizedString(),
+          ex);
-  
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification="This is only for debugging and there is never more than one instance being traced because there is only one stat sampler.") 
+
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+      value = "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD",
+      justification = "This is only for debugging and there is never more than one instance being traced because there is only one stat sampler.")
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#allocatedResourceInstance statResource={}", statResource);
+      logger.trace(LogMarker.STATISTICS,
+          "StatArchiveWriter#allocatedResourceInstance statResource={}", statResource);
-      throw new InternalGemFireException(LocalizedStrings.StatArchiveWriter_COULD_NOT_ARCHIVE_TYPE_0_BECAUSE_IT_HAD_MORE_THAN_1_STATISTICS.toLocalizedString(new Object[] {statResource.getResourceType().getStatisticsType().getName(), Integer.valueOf(ILLEGAL_STAT_OFFSET-1)}));
+      throw new InternalGemFireException(
+          LocalizedStrings.StatArchiveWriter_COULD_NOT_ARCHIVE_TYPE_0_BECAUSE_IT_HAD_MORE_THAN_1_STATISTICS
+              .toLocalizedString(
+                  new Object[] {statResource.getResourceType().getStatisticsType().getName(),
+                      Integer.valueOf(ILLEGAL_STAT_OFFSET - 1)}));
-      if (this.trace && (traceStatisticsName == null || traceStatisticsName.equals(statResource.getStatistics().getTextId())) && (traceStatisticsTypeName == null || traceStatisticsTypeName.equals(statResource.getResourceType().getStatisticsType().getName()))) {
+      if (this.trace
+          && (traceStatisticsName == null
+              || traceStatisticsName.equals(statResource.getStatistics().getTextId()))
+          && (traceStatisticsTypeName == null || traceStatisticsTypeName
+              .equals(statResource.getResourceType().getStatisticsType().getName()))) {
-        this.traceDataOut.println("allocatedResourceInstance#writeByte RESOURCE_INSTANCE_CREATE_TOKEN: " + RESOURCE_INSTANCE_CREATE_TOKEN);
-        this.traceDataOut.println("allocatedResourceInstance#writeInt statResource.getId(): " + statResource.getId());
-        this.traceDataOut.println("allocatedResourceInstance#writeUTF statResource.getStatistics().getTextId(): " + statResource.getStatistics().getTextId());
-        this.traceDataOut.println("allocatedResourceInstance#writeLong statResource.getStatistics().getNumericId(): " + statResource.getStatistics().getNumericId());
-        this.traceDataOut.println("allocatedResourceInstance#writeInt statResource.getResourceType().getId(): " + statResource.getResourceType().getId());
+        this.traceDataOut
+            .println("allocatedResourceInstance#writeByte RESOURCE_INSTANCE_CREATE_TOKEN: "
+                + RESOURCE_INSTANCE_CREATE_TOKEN);
+        this.traceDataOut.println(
+            "allocatedResourceInstance#writeInt statResource.getId(): " + statResource.getId());
+        this.traceDataOut
+            .println("allocatedResourceInstance#writeUTF statResource.getStatistics().getTextId(): "
+                + statResource.getStatistics().getTextId());
+        this.traceDataOut.println(
+            "allocatedResourceInstance#writeLong statResource.getStatistics().getNumericId(): "
+                + statResource.getStatistics().getNumericId());
+        this.traceDataOut
+            .println("allocatedResourceInstance#writeInt statResource.getResourceType().getId(): "
+                + statResource.getResourceType().getId());
-      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_FAILED_WRITING_NEW_RESOURCE_INSTANCE_TO_STATISTIC_ARCHIVE.toLocalizedString(), ex);
+      throw new GemFireIOException(
+          LocalizedStrings.StatArchiveWriter_FAILED_WRITING_NEW_RESOURCE_INSTANCE_TO_STATISTIC_ARCHIVE
+              .toLocalizedString(),
+          ex);
-  
+
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#destroyedResourceInstance resourceInstance={}", resourceInstance);
+      logger.trace(LogMarker.STATISTICS,
+          "StatArchiveWriter#destroyedResourceInstance resourceInstance={}", resourceInstance);
-    if (!this.addedResources.contains(resourceInstance)) {    // Fix for bug #45377
+    if (!this.addedResources.contains(resourceInstance)) { // Fix for bug #45377
-      if (this.trace && (traceStatisticsName == null || traceStatisticsName.equals(resourceInstance.getStatistics().getTextId())) && (traceStatisticsTypeName == null || traceStatisticsTypeName.equals(resourceInstance.getResourceType().getStatisticsType().getName()))) {
-        this.traceDataOut.println("destroyedResourceInstance#writeByte RESOURCE_INSTANCE_DELETE_TOKEN: " + RESOURCE_INSTANCE_DELETE_TOKEN);
-        this.traceDataOut.println("destroyedResourceInstance#writeInt resourceInstance.getId(): " + resourceInstance.getId());
+      if (this.trace
+          && (traceStatisticsName == null
+              || traceStatisticsName.equals(resourceInstance.getStatistics().getTextId()))
+          && (traceStatisticsTypeName == null || traceStatisticsTypeName
+              .equals(resourceInstance.getResourceType().getStatisticsType().getName()))) {
+        this.traceDataOut
+            .println("destroyedResourceInstance#writeByte RESOURCE_INSTANCE_DELETE_TOKEN: "
+                + RESOURCE_INSTANCE_DELETE_TOKEN);
+        this.traceDataOut.println("destroyedResourceInstance#writeInt resourceInstance.getId(): "
+            + resourceInstance.getId());
-      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_FAILED_WRITING_DELETE_RESOURCE_INSTANCE_TO_STATISTIC_ARCHIVE.toLocalizedString(), ex);
+      throw new GemFireIOException(
+          LocalizedStrings.StatArchiveWriter_FAILED_WRITING_DELETE_RESOURCE_INSTANCE_TO_STATISTIC_ARCHIVE
+              .toLocalizedString(),
+          ex);
-  
+
-      throw new IllegalArgumentException("Sample timestamp must be greater than previous timestamp (millisTimeStamp is " + currentMillis + ", previousMillis is " + previousMillis + " and delta is " + delta + ").");
+      throw new IllegalArgumentException(
+          "Sample timestamp must be greater than previous timestamp (millisTimeStamp is "
+              + currentMillis + ", previousMillis is " + previousMillis + " and delta is " + delta
+              + ").");
-  
+
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#writeTimeStamp millisTimeStamp={}, delta={}", millisTimeStamp, (int)delta);
+      logger.trace(LogMarker.STATISTICS,
+          "StatArchiveWriter#writeTimeStamp millisTimeStamp={}, delta={}", millisTimeStamp,
+          (int) delta);
-        throw new InternalGemFireException(LocalizedStrings.StatArchiveWriter_TIMESTAMP_DELTA_0_WAS_GREATER_THAN_1.toLocalizedString(new Object[] {Long.valueOf(delta), Integer.valueOf(Integer.MAX_VALUE)}));
+        throw new InternalGemFireException(
+            LocalizedStrings.StatArchiveWriter_TIMESTAMP_DELTA_0_WAS_GREATER_THAN_1
+                .toLocalizedString(
+                    new Object[] {Long.valueOf(delta), Integer.valueOf(Integer.MAX_VALUE)}));
-      this.dataOut.writeInt((int)delta);
+      this.dataOut.writeInt((int) delta);
-        this.traceDataOut.println("writeTimeStamp#writeShort INT_TIMESTAMP_TOKEN: " + INT_TIMESTAMP_TOKEN);
-        this.traceDataOut.println("writeTimeStamp#writeInt (int)delta: " + (int)delta);
+        this.traceDataOut
+            .println("writeTimeStamp#writeShort INT_TIMESTAMP_TOKEN: " + INT_TIMESTAMP_TOKEN);
+        this.traceDataOut.println("writeTimeStamp#writeInt (int)delta: " + (int) delta);
-      this.dataOut.writeShort((int)delta);
+      this.dataOut.writeShort((int) delta);
-        this.traceDataOut.println("writeTimeStamp#writeShort (int)delta: " + (int)delta);
+        this.traceDataOut.println("writeTimeStamp#writeShort (int)delta: " + (int) delta);
-          this.traceDataOut.println("writeResourceInst#writeByte INT_RESOURCE_INST_ID_TOKEN: " + INT_RESOURCE_INST_ID_TOKEN);
+          this.traceDataOut.println("writeResourceInst#writeByte INT_RESOURCE_INST_ID_TOKEN: "
+              + INT_RESOURCE_INST_ID_TOKEN);
-            this.traceDataOut.println("writeResourceInst#writeInt ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);
+            this.traceDataOut.println(
+                "writeResourceInst#writeInt ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);
-          this.traceDataOut.println("writeResourceInst#writeByte SHORT_RESOURCE_INST_ID_TOKEN: " + SHORT_RESOURCE_INST_ID_TOKEN);
+          this.traceDataOut.println("writeResourceInst#writeByte SHORT_RESOURCE_INST_ID_TOKEN: "
+              + SHORT_RESOURCE_INST_ID_TOKEN);
-            this.traceDataOut.println("writeResourceInst#writeShort ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);
+            this.traceDataOut.println("writeResourceInst#writeShort ILLEGAL_RESOURCE_INST_ID: "
+                + ILLEGAL_RESOURCE_INST_ID);
-          this.traceDataOut.println("writeResourceInst#writeByte ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);
+          this.traceDataOut.println(
+              "writeResourceInst#writeByte ILLEGAL_RESOURCE_INST_ID: " + ILLEGAL_RESOURCE_INST_ID);
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#sampled nanosTimeStamp={}, resourceInstances={}", nanosTimeStamp, resourceInstances);
+      logger.trace(LogMarker.STATISTICS,
+          "StatArchiveWriter#sampled nanosTimeStamp={}, resourceInstances={}", nanosTimeStamp,
+          resourceInstances);
-      throw new GemFireIOException(LocalizedStrings.StatArchiveWriter_FAILED_WRITING_SAMPLE_TO_STATISTIC_ARCHIVE.toLocalizedString(), ex);
+      throw new GemFireIOException(
+          LocalizedStrings.StatArchiveWriter_FAILED_WRITING_SAMPLE_TO_STATISTIC_ARCHIVE
+              .toLocalizedString(),
+          ex);
-  
+
-  
+
-    if (this.trace && (traceStatisticsName == null || traceStatisticsName.equals(ri.getStatistics().getTextId())) && (traceStatisticsTypeName == null || traceStatisticsTypeName.equals(ri.getResourceType().getStatisticsType().getName()))) {
+    if (this.trace
+        && (traceStatisticsName == null
+            || traceStatisticsName.equals(ri.getStatistics().getTextId()))
+        && (traceStatisticsTypeName == null || traceStatisticsTypeName
+            .equals(ri.getResourceType().getStatisticsType().getName()))) {
-      throw new Error("StatisticsType " + ri.getResourceType().getStatisticsType().getName() + " has too many stats: " + stats.length);
+      throw new Error("StatisticsType " + ri.getResourceType().getStatisticsType().getName()
+          + " has too many stats: " + stats.length);
-    
+
-    
+
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#writeSample checkForChange={}, previousStatValues={}, stats.length={}",
+      logger.trace(LogMarker.STATISTICS,
+          "StatArchiveWriter#writeSample checkForChange={}, previousStatValues={}, stats.length={}",
-    
+
-      for (int i=0; i < stats.length; i++) {
+      for (int i = 0; i < stats.length; i++) {
-          if (this.trace && (traceStatisticsName == null || traceStatisticsName.equals(ri.getStatistics().getTextId())) && (traceStatisticsTypeName == null || traceStatisticsTypeName.equals(ri.getResourceType().getStatisticsType().getName()))) {
+          if (this.trace
+              && (traceStatisticsName == null
+                  || traceStatisticsName.equals(ri.getStatistics().getTextId()))
+              && (traceStatisticsTypeName == null || traceStatisticsTypeName
+                  .equals(ri.getResourceType().getStatisticsType().getName()))) {
-            logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#writeStatValue stats[{}]={}, delta={}", i, stats[i], delta);
+            logger.trace(LogMarker.STATISTICS,
+                "StatArchiveWriter#writeStatValue stats[{}]={}, delta={}", i, stats[i], delta);
-          if (this.trace && (traceStatisticsName == null || traceStatisticsName.equals(ri.getStatistics().getTextId())) && (traceStatisticsTypeName == null || traceStatisticsTypeName.equals(ri.getResourceType().getStatisticsType().getName()))) {
-            byte typeCode = ((StatisticDescriptorImpl)stats[i]).getTypeCode();
-            switch(typeCode) {
-            case BYTE_CODE:
-              this.traceDataOut.println("writeStatValue#writeByte " + typeCodeToString(typeCode) + " delta: " + delta);
-              break;
-            case SHORT_CODE:
-              this.traceDataOut.println("writeStatValue#writeShort" + typeCodeToString(typeCode) + " delta: " + delta);
-              break;
-            case INT_CODE:
-            case FLOAT_CODE:
-            case LONG_CODE:
-            case DOUBLE_CODE:
-              this.traceDataOut.println("writeStatValue#writeCompactValue " + typeCodeToString(typeCode) + " delta: " + delta);
-              break;
-            default:
+          if (this.trace
+              && (traceStatisticsName == null
+                  || traceStatisticsName.equals(ri.getStatistics().getTextId()))
+              && (traceStatisticsTypeName == null || traceStatisticsTypeName
+                  .equals(ri.getResourceType().getStatisticsType().getName()))) {
+            byte typeCode = ((StatisticDescriptorImpl) stats[i]).getTypeCode();
+            switch (typeCode) {
+              case BYTE_CODE:
+                this.traceDataOut.println(
+                    "writeStatValue#writeByte " + typeCodeToString(typeCode) + " delta: " + delta);
+                break;
+              case SHORT_CODE:
+                this.traceDataOut.println(
+                    "writeStatValue#writeShort" + typeCodeToString(typeCode) + " delta: " + delta);
+                break;
+              case INT_CODE:
+              case FLOAT_CODE:
+              case LONG_CODE:
+              case DOUBLE_CODE:
+                this.traceDataOut.println("writeStatValue#writeCompactValue "
+                    + typeCodeToString(typeCode) + " delta: " + delta);
+                break;
+              default:
-    
+
-      if (this.trace && (traceStatisticsName == null
-          || traceStatisticsName.equals(ri.getStatistics().getTextId()))
-          && (traceStatisticsTypeName == null
-          || traceStatisticsTypeName.equals(ri.getResourceType().getStatisticsType().getName()))) {
-        this.traceDataOut.println("writeSample#writeByte ILLEGAL_STAT_OFFSET: " + ILLEGAL_STAT_OFFSET);
+      if (this.trace
+          && (traceStatisticsName == null
+              || traceStatisticsName.equals(ri.getStatistics().getTextId()))
+          && (traceStatisticsTypeName == null || traceStatisticsTypeName
+              .equals(ri.getResourceType().getStatisticsType().getName()))) {
+        this.traceDataOut
+            .println("writeSample#writeByte ILLEGAL_STAT_OFFSET: " + ILLEGAL_STAT_OFFSET);
-      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#writeSample statsWritten={}", statsWritten);
+      logger.trace(LogMarker.STATISTICS, "StatArchiveWriter#writeSample statsWritten={}",
+          statsWritten);
-  
+
-      dataOut.writeByte((int)v);
+      dataOut.writeByte((int) v);
-      dataOut.writeShort((int)v);
+      dataOut.writeShort((int) v);
-          buffer[idx++] = (byte)(v & 0xFF);
+          buffer[idx++] = (byte) (v & 0xFF);
-          while (buffer[idx-1] == -1) {
+          while (buffer[idx - 1] == -1) {
-          //               System.out.print("DEBUG: originalValue=" + originalValue);
-          //               for (int dbx=0; dbx<idx; dbx++) {
-          //                   System.out.print(" " + buffer[dbx]);
-          //               }
-          //               System.out.println();
+          // System.out.print("DEBUG: originalValue=" + originalValue);
+          // for (int dbx=0; dbx<idx; dbx++) {
+          // System.out.print(" " + buffer[dbx]);
+          // }
+          // System.out.println();
-        if ((buffer[idx-1] & 0x80) == 0) {
-          /* If the most significant byte does not have its high order bit set
-           * then add a -1 byte so we know this is a negative number
+        if ((buffer[idx - 1] & 0x80) == 0) {
+          /*
+           * If the most significant byte does not have its high order bit set then add a -1 byte so
+           * we know this is a negative number
-          buffer[idx++] = (byte)(v & 0xFF);
+          buffer[idx++] = (byte) (v & 0xFF);
-        if ((buffer[idx-1] & 0x80) != 0) {
-          /* If the most significant byte has its high order bit set
-           * then add a zero byte so we know this is a positive number
+        if ((buffer[idx - 1] & 0x80) != 0) {
+          /*
+           * If the most significant byte has its high order bit set then add a zero byte so we know
+           * this is a positive number
-        throw new InternalGemFireException(LocalizedStrings.StatArchiveWriter_EXPECTED_IDX_TO_BE_GREATER_THAN_2_IT_WAS_0_FOR_THE_VALUE_1.toLocalizedString(new Object[] {Integer.valueOf(idx), Long.valueOf(originalValue)}));
+        throw new InternalGemFireException(
+            LocalizedStrings.StatArchiveWriter_EXPECTED_IDX_TO_BE_GREATER_THAN_2_IT_WAS_0_FOR_THE_VALUE_1
+                .toLocalizedString(
+                    new Object[] {Integer.valueOf(idx), Long.valueOf(originalValue)}));
-      for (int i=idx-1; i >= 0; i--) {
+      for (int i = idx - 1; i >= 0; i--) {
-        int bytesToRead = ((byte)v - COMPACT_VALUE_2_TOKEN) + 2;
+        int bytesToRead = ((byte) v - COMPACT_VALUE_2_TOKEN) + 2;
-  protected static void writeStatValue(StatisticDescriptor f, long v, DataOutput dataOut) throws IOException {
-    byte typeCode = ((StatisticDescriptorImpl)f).getTypeCode();
+  protected static void writeStatValue(StatisticDescriptor f, long v, DataOutput dataOut)
+      throws IOException {
+    byte typeCode = ((StatisticDescriptorImpl) f).getTypeCode();
-    switch(typeCode) {
-    case BYTE_CODE:
-      dataOut.writeByte((int)v);
-      break;
-    case SHORT_CODE:
-      dataOut.writeShort((int)v);
-      break;
-    case INT_CODE:
-    case FLOAT_CODE:
-    case LONG_CODE:
-    case DOUBLE_CODE:
-      writeCompactValue(v, dataOut);
-      break;
-    default:
-      throw new InternalGemFireException(LocalizedStrings.StatArchiveWriter_UNEXPECTED_TYPE_CODE_0.toLocalizedString(Byte.valueOf(typeCode)));
+    switch (typeCode) {
+      case BYTE_CODE:
+        dataOut.writeByte((int) v);
+        break;
+      case SHORT_CODE:
+        dataOut.writeShort((int) v);
+        break;
+      case INT_CODE:
+      case FLOAT_CODE:
+      case LONG_CODE:
+      case DOUBLE_CODE:
+        writeCompactValue(v, dataOut);
+        break;
+      default:
+        throw new InternalGemFireException(LocalizedStrings.StatArchiveWriter_UNEXPECTED_TYPE_CODE_0
+            .toLocalizedString(Byte.valueOf(typeCode)));
-    
+
-  
+
-  
+
-    switch(typeCode) {
-    case BYTE_CODE:
-      return "BYTE_CODE";
-    case SHORT_CODE:
-      return "SHORT_CODE";
-    case INT_CODE:
-      return "INT_CODE";
-    case FLOAT_CODE:
-      return "FLOAT_CODE";
-    case LONG_CODE:
-      return "LONG_CODE";
-    case DOUBLE_CODE:
-      return "DOUBLE_CODE";
-    default:
-      return "unknown typeCode " + typeCode;
+    switch (typeCode) {
+      case BYTE_CODE:
+        return "BYTE_CODE";
+      case SHORT_CODE:
+        return "SHORT_CODE";
+      case INT_CODE:
+        return "INT_CODE";
+      case FLOAT_CODE:
+        return "FLOAT_CODE";
+      case LONG_CODE:
+        return "LONG_CODE";
+      case DOUBLE_CODE:
+        return "DOUBLE_CODE";
+      default:
+        return "unknown typeCode " + typeCode;
-    
+
-    
+
+
+
-    
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
-      throw new RuntimeException(LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+      throw new RuntimeException(
+          LocalizedStrings.StatArchiveWriter_METHOD_UNIMPLEMENTED.toLocalizedString());
+
+
+
+
+
