Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  public PeerTXStateStub(TXStateProxy stateProxy, DistributedMember target,InternalDistributedMember onBehalfOfClient) {
+  public PeerTXStateStub(TXStateProxy stateProxy, DistributedMember target,
+      InternalDistributedMember onBehalfOfClient) {
-  
-  /* (non-Javadoc)
+
+  /*
+   * (non-Javadoc)
+   * 
-    ReliableReplyProcessor21 response = TXRemoteRollbackMessage.send(
-                                                          this.proxy.getCache(),
-                                                          this.proxy.getTxId().getUniqId(),
-                                                          getOriginatingMember(),
-                                                          this.target);
+    ReliableReplyProcessor21 response = TXRemoteRollbackMessage.send(this.proxy.getCache(),
+        this.proxy.getTxId().getUniqId(), getOriginatingMember(), this.target);
-    
+
-    } catch(PrimaryBucketException pbe) {
+    } catch (PrimaryBucketException pbe) {
-        throw new TransactionException(LocalizedStrings.
-            TXStateStub_ROLLBACK_ON_NODE_0_FAILED.toLocalizedString(target), e);
+        throw new TransactionException(
+            LocalizedStrings.TXStateStub_ROLLBACK_ON_NODE_0_FAILED.toLocalizedString(target), e);
-    } catch(Exception e) {
+    } catch (Exception e) {
-      throw new TransactionException(LocalizedStrings.
-          TXStateStub_ROLLBACK_ON_NODE_0_FAILED.toLocalizedString(target), e);
+      throw new TransactionException(
+          LocalizedStrings.TXStateStub_ROLLBACK_ON_NODE_0_FAILED.toLocalizedString(target), e);
-    RemoteCommitResponse message = 
-          TXRemoteCommitMessage.send(this.proxy.getCache(),
-                                      this.proxy.getTxId().getUniqId(),
-                                      this.getOriginatingMember(),
-                                      target);
-    
+    RemoteCommitResponse message = TXRemoteCommitMessage.send(this.proxy.getCache(),
+        this.proxy.getTxId().getUniqId(), this.getOriginatingMember(), target);
+
-    
+
-    }  catch (CommitConflictException e) {
+    } catch (CommitConflictException e) {
-    } catch(TransactionException te) {
+    } catch (TransactionException te) {
-      if(e.getCause()!=null) {
+      if (e.getCause() != null) {
-    } catch(ReplyException e) {
-      if(e.getCause() instanceof CommitConflictException) {
-        throw (CommitConflictException)e.getCause();
-      } else if(e.getCause() instanceof TransactionException) {
-        throw (TransactionException)e.getCause();
+    } catch (ReplyException e) {
+      if (e.getCause() instanceof CommitConflictException) {
+        throw (CommitConflictException) e.getCause();
+      } else if (e.getCause() instanceof TransactionException) {
+        throw (TransactionException) e.getCause();
-      if(e.getCause()!=null) {
-        throw new CommitConflictException(e.getCause());
-      } else {
-        throw new CommitConflictException(e);
-      } */
-      if(e.getCause()!=null) {
+       * if(e.getCause()!=null) { throw new CommitConflictException(e.getCause()); } else { throw
+       * new CommitConflictException(e); }
+       */
+      if (e.getCause() != null) {
-      if (e.getCause()!=null) {
-    	if (e.getCause() instanceof ForceReattemptException) {
-    	  Throwable e2 = e.getCause();
-    	  if (e2.getCause()!=null && e2.getCause() instanceof PrimaryBucketException) {
-    	      // data rebalanced
-    	      TransactionDataRebalancedException tdnce =  new TransactionDataRebalancedException(e2.getCause().getMessage());
-	      tdnce.initCause(e2.getCause());
-	      throw tdnce;
-    	  } else {
-    	    // We cannot be sure that the member departed starting to process commit request,
-    	    // so throw a TransactionInDoubtException rather than a TransactionDataNodeHasDeparted. fixes 44939
-   	    TransactionInDoubtException tdnce =  new TransactionInDoubtException(e.getCause().getMessage());
-	    tdnce.initCause(e.getCause());
-	    throw tdnce;
-    	  }
-    	}
+      if (e.getCause() != null) {
+        if (e.getCause() instanceof ForceReattemptException) {
+          Throwable e2 = e.getCause();
+          if (e2.getCause() != null && e2.getCause() instanceof PrimaryBucketException) {
+            // data rebalanced
+            TransactionDataRebalancedException tdnce =
+                new TransactionDataRebalancedException(e2.getCause().getMessage());
+            tdnce.initCause(e2.getCause());
+            throw tdnce;
+          } else {
+            // We cannot be sure that the member departed starting to process commit request,
+            // so throw a TransactionInDoubtException rather than a TransactionDataNodeHasDeparted.
+            // fixes 44939
+            TransactionInDoubtException tdnce =
+                new TransactionInDoubtException(e.getCause().getMessage());
+            tdnce.initCause(e.getCause());
+            throw tdnce;
+          }
+        }
-      TXRegionStub stub = null;
-      if(region.getPartitionAttributes()==null) {
-        // This is a dist region
-        stub = new DistributedTXRegionStub(this,region);
-      } else {
-        stub = new PartitionedTXRegionStub(this,region);
-      }
-      return stub;
+    TXRegionStub stub = null;
+    if (region.getPartitionAttributes() == null) {
+      // This is a dist region
+      stub = new DistributedTXRegionStub(this, region);
+    } else {
+      stub = new PartitionedTXRegionStub(this, region);
+    }
+    return stub;
-  protected void validateRegionCanJoinTransaction(LocalRegion region)
-      throws TransactionException {
+  protected void validateRegionCanJoinTransaction(LocalRegion region) throws TransactionException {
-    if(region.hasServerProxy()) {
+    if (region.hasServerProxy()) {
-    
+
-        this.proxy.getTxId().getUniqId(),getOriginatingMember(), status, this.target);
+        this.proxy.getTxId().getUniqId(), getOriginatingMember(), status, this.target);
-      
+
-      //TODO throw a better exception
+      // TODO throw a better exception
-    return getOriginatingMember()!=null;
+    return getOriginatingMember() != null;
-  public void recordTXOperation(ServerRegionDataAccess region, ServerRegionOperation op, Object key, Object arguments[]) {
+  public void recordTXOperation(ServerRegionDataAccess region, ServerRegionOperation op, Object key,
+      Object arguments[]) {
