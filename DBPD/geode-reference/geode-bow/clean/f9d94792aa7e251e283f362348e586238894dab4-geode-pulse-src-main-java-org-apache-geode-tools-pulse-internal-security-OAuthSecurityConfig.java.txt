GEODE-7851: Pulse logout requests end of OAuth session

When Pulse is configured to use OAuth, and a user logs out of Pulse,
Pulse redirects the browser to a page where the user can take action to
end their session. The available actions depend on the OAuth provider,
but may include revoking the token or logging out of the OAuth provider
entirely.

Main changes:

- Changed OAuthSecurityConfig to install two logout handlers: A
  RepositoryLogoutHandler (renamed from LogoutHandler) and an
  OidcClientInitiatedLogoutSuccessHandler.

- Added a pulse.security.oauth.endSessionEndpoint property to specify
  the URL to which the OidcClientInitiatedLogoutSuccessHandler should
  redirect the browser on logout.

- Configured the OAuthSecurityConfig to add the "end session endpoint"
  property value to the client configuration metadata.  On logout, the
  OidcClientInitiatedLogoutSuccessHandler redirects the browser to this
  endpoint, where the user can take action to end the session.

- In the OAuthClientConfig class (extracted from OAuthSecurityConfig),
  restored the code to explicitly list the scopes that Pulse is
  requesting, in particular to list "openid" in the scopes. Though
  authentication works just fine without that explicit list, the
  OidcClientInitiatedLogoutSuccessHandler does not. The
  OidcClientInitiatedLogoutSuccessHandler handles logout only if the the
  principal is an OidcUser. If "openid" is not explicitly listed in the
  client's scopes. Spring creates OAuth2User principals instead of
  OidcUser principals, and OidcClientInitiatedLogoutSuccessHandler
  return without redirecting the browser.

Also refactored to support the above changes:

- Moved the oauth client service configuration from OAuthSecurityConfig
  to a new OAuthClientConfig class. This breaks Respository's dependence
  on OAuthSecurityConfig, which in turn (through the LogoutHandler)
  depended on Repository. Repository now gets its
  OAuth2AuthorizedClientService from the OAuthClientConfig class, which
  does not in turn depend on Repository.

- Marked two Repository constructors as non-required. Spring will pick
  whichever one has the most dependencies it can satisfy. So if the
  profile specifies an OAuth2AuthorizedClientService, Spring will call
  the constructor that takes one of those. Otherwise Spring will call
  the no-args constructor.

- Renamed LogoutHandler to RepositoryLogoutHandler to better reflect its
  specific responsibilities.

- Changed RepositoryLogoutHandler to implement LogoutHandler instead of
  LogoutSuccessHandler. Now it does its work *during* logout instead of
  *after.*

- Changed DefaultSecurityConfig to specify the logout success URL
  directly instead of via a logout success handler. (OAuthSecurityConfig
  no longer needs a logout success URL, because the OIDC logout handler
  redirects to the OAuth provider instead.)

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Bean;
+import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.PropertySource;
-import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;
-import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
-import org.springframework.security.oauth2.client.registration.ClientRegistration;
-import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
-import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;
-import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;
-import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;
-import org.springframework.security.oauth2.core.AuthorizationGrantType;
+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;
+import org.springframework.security.web.authentication.logout.LogoutHandler;
-@PropertySource("classpath:pulse.properties")
-  @Value("${pulse.oauth.providerId}")
-  private String providerId;
-  @Value("${pulse.oauth.providerName}")
-  private String providerName;
-  @Value("${pulse.oauth.clientId}")
-  private String clientId;
-  @Value("${pulse.oauth.clientSecret}")
-  private String clientSecret;
-  @Value("${pulse.oauth.authorizationUri}")
-  private String authorizationUri;
-  @Value("${pulse.oauth.tokenUri}")
-  private String tokenUri;
-  @Value("${pulse.oauth.userInfoUri}")
-  private String userInfoUri;
-  @Value("${pulse.oauth.jwkSetUri}")
-  private String jwkSetUri;
-  @Value("${pulse.oauth.userNameAttributeName}")
-  private String userNameAttributeName;
+  private final LogoutHandler repositoryLogoutHandler;
+  private final LogoutSuccessHandler oidcLogoutHandler;
-  @Bean
-  public LogoutSuccessHandler logoutHandler() {
-    return new LogoutHandler("/login");
+  @Autowired
+  public OAuthSecurityConfig(RepositoryLogoutHandler repositoryLogoutHandler,
+      OidcClientInitiatedLogoutSuccessHandler oidcLogoutHandler) {
+    this.oidcLogoutHandler = oidcLogoutHandler;
+    this.repositoryLogoutHandler = repositoryLogoutHandler;
-            .logoutSuccessHandler(logoutHandler()))
+            .addLogoutHandler(repositoryLogoutHandler)
+            .logoutSuccessHandler(oidcLogoutHandler))
-
-  @Bean
-  public ClientRegistrationRepository clientRegistrationRepository() {
-    return new InMemoryClientRegistrationRepository(clientRegistration());
-  }
-
-  @Bean
-  public OAuth2AuthorizedClientService authorizedClientService(
-      ClientRegistrationRepository clientRegistrationRepository) {
-    return new InMemoryOAuth2AuthorizedClientService(clientRegistrationRepository);
-  }
-
-  @Bean
-  public OAuth2AuthorizedClientRepository authorizedClientRepository(
-      OAuth2AuthorizedClientService authorizedClientService) {
-    return new AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService);
-  }
-
-  private ClientRegistration clientRegistration() {
-    return ClientRegistration.withRegistrationId(providerId)
-        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
-        .redirectUriTemplate("{baseUrl}/login/oauth2/code/{registrationId}")
-        .clientId(clientId)
-        .clientSecret(clientSecret)
-        .authorizationUri(authorizationUri)
-        .tokenUri(tokenUri)
-        .userInfoUri(userInfoUri)
-        .jwkSetUri(jwkSetUri)
-        // When Spring shows the login page, it displays a link to the OAuth provider's
-        // authorization URI. Spring uses the value passed to clientName() as the text for that
-        // link. We pass the providerName property here, to let the user know which OAuth provider
-        // they will be redirected to.
-        .clientName(providerName)
-        .userNameAttributeName(userNameAttributeName)
-        .build();
-  }
