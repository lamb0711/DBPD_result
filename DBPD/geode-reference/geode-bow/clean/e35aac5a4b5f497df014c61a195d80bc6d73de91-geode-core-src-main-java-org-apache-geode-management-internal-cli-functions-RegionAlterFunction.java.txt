Merge branch 'release/1.5.0'

+import org.apache.commons.lang.exception.ExceptionUtils;
-import org.apache.geode.cache.ExpirationAction;
-import org.apache.geode.cache.ExpirationAttributes;
+import org.apache.geode.cache.CustomExpiry;
-import org.apache.geode.cache.execute.FunctionAdapter;
-import org.apache.geode.internal.InternalEntity;
+import org.apache.geode.internal.cache.execute.InternalFunction;
+import org.apache.geode.management.internal.cli.domain.ClassName;
-public class RegionAlterFunction extends FunctionAdapter implements InternalEntity {
+public class RegionAlterFunction implements InternalFunction {
-        exceptionMsg = CliUtil.stackTraceAsString(th);
+        exceptionMsg = ExceptionUtils.getStackTrace(th);
-    if (newEntryExpirationIdleTime != null) {
+    if (newEntryExpirationIdleTime.isTimeOrActionSet()) {
-          parseExpirationAttributes(newEntryExpirationIdleTime, region.getEntryIdleTimeout()));
+          newEntryExpirationIdleTime.getExpirationAttributes(region.getEntryIdleTimeout()));
-    if (newEntryExpirationTTL != null) {
+    if (newEntryExpirationTTL.isTimeOrActionSet()) {
-          parseExpirationAttributes(newEntryExpirationTTL, region.getEntryTimeToLive()));
+          newEntryExpirationTTL.getExpirationAttributes(region.getEntryTimeToLive()));
+    final ClassName<CustomExpiry> entryIdleCustomExpiry =
+        regionAlterArgs.getEntryIdleTimeCustomExpiry();
+    if (entryIdleCustomExpiry != null) {
+      if (entryIdleCustomExpiry.equals(ClassName.EMPTY)) {
+        mutator.setCustomEntryIdleTimeout(null);
+      } else {
+        mutator.setCustomEntryIdleTimeout(entryIdleCustomExpiry.newInstance(cache));
+      }
+    }
+
+    final ClassName<CustomExpiry> entryTTLCustomExpiry = regionAlterArgs.getEntryTTLCustomExpiry();
+    if (entryTTLCustomExpiry != null) {
+      if (entryTTLCustomExpiry.equals(ClassName.EMPTY)) {
+        mutator.setCustomEntryTimeToLive(null);
+      } else {
+        mutator.setCustomEntryTimeToLive(entryTTLCustomExpiry.newInstance(cache));
+      }
+    }
+
-    if (newRegionExpirationIdleTime != null) {
+    if (newRegionExpirationIdleTime.isTimeOrActionSet()) {
-          parseExpirationAttributes(newRegionExpirationIdleTime, region.getRegionIdleTimeout()));
+          newRegionExpirationIdleTime.getExpirationAttributes(region.getRegionIdleTimeout()));
-    if (newRegionExpirationTTL != null) {
+    if (newRegionExpirationTTL.isTimeOrActionSet()) {
-          parseExpirationAttributes(newRegionExpirationTTL, region.getRegionTimeToLive()));
+          newRegionExpirationTTL.getExpirationAttributes(region.getRegionTimeToLive()));
-    final Set<String> newCacheListenerNames = regionAlterArgs.getCacheListeners();
-    if (newCacheListenerNames != null) {
+    final Set<ClassName<CacheListener>> newCacheListeners = regionAlterArgs.getCacheListeners();
-      // Remove old cache listeners that aren't in the new list
+    // user specified a new set of cache listeners
+    if (newCacheListeners != null) {
+      // remove the old ones, even if the new set includes the same class name, the init properties
+      // might be different
-        if (!newCacheListenerNames.contains(oldCacheListener.getClass().getName())) {
-          mutator.removeCacheListener(oldCacheListener);
-        }
+        mutator.removeCacheListener(oldCacheListener);
-      // Add new cache listeners that don't already exist
-      for (String newCacheListenerName : newCacheListenerNames) {
-        if (newCacheListenerName.isEmpty()) {
-          continue;
-        }
-        boolean nameFound = false;
-        for (CacheListener oldCacheListener : oldCacheListeners) {
-          if (oldCacheListener.getClass().getName().equals(newCacheListenerName)) {
-            nameFound = true;
-            break;
-          }
-        }
-
-        if (!nameFound) {
-          Class<CacheListener<K, V>> cacheListenerKlass =
-              forName(newCacheListenerName, CliStrings.ALTER_REGION__CACHELISTENER);
-          mutator.addCacheListener(
-              newInstance(cacheListenerKlass, CliStrings.ALTER_REGION__CACHELISTENER));
+      // Add new cache listeners
+      for (ClassName<CacheListener> newCacheListener : newCacheListeners) {
+        if (!newCacheListener.equals(ClassName.EMPTY)) {
+          mutator.addCacheListener(newCacheListener.newInstance(cache));
-
-    final String cacheLoader = regionAlterArgs.getCacheLoader();
+    final ClassName<CacheLoader> cacheLoader = regionAlterArgs.getCacheLoader();
-      if (cacheLoader.isEmpty()) {
+      if (cacheLoader.equals(ClassName.EMPTY)) {
-        Class<CacheLoader<K, V>> cacheLoaderKlass =
-            forName(cacheLoader, CliStrings.ALTER_REGION__CACHELOADER);
-        mutator.setCacheLoader(newInstance(cacheLoaderKlass, CliStrings.ALTER_REGION__CACHELOADER));
+        mutator.setCacheLoader(cacheLoader.newInstance(cache));
-    final String cacheWriter = regionAlterArgs.getCacheWriter();
+    final ClassName<CacheWriter> cacheWriter = regionAlterArgs.getCacheWriter();
-      if (cacheWriter.isEmpty()) {
+      if (cacheWriter.equals(ClassName.EMPTY)) {
-        Class<CacheWriter<K, V>> cacheWriterKlass =
-            forName(cacheWriter, CliStrings.ALTER_REGION__CACHEWRITER);
-        mutator.setCacheWriter(newInstance(cacheWriterKlass, CliStrings.ALTER_REGION__CACHEWRITER));
+        mutator.setCacheWriter(cacheWriter.newInstance(cache));
-  /**
-   * Converts the expiration attributes passed as arguments from the command to the function into a
-   * type suitable for applying to a Region.
-   *
-   * @param newExpirationAttrs Attributes supplied by the command
-   * @param oldExpirationAttributes Attributes currently applied to the Region.
-   *
-   * @return A new pair of expiration attributes taken from the command if it was given or the
-   *         current value from the Region if it was not.
-   */
-  private ExpirationAttributes parseExpirationAttributes(
-      RegionFunctionArgs.ExpirationAttrs newExpirationAttrs,
-      ExpirationAttributes oldExpirationAttributes) {
-
-    ExpirationAction action = oldExpirationAttributes.getAction();
-    int timeout = oldExpirationAttributes.getTimeout();
-
-    if (newExpirationAttrs.getTime() != null) {
-      timeout = newExpirationAttrs.getTime();
-    }
-    if (newExpirationAttrs.getAction() != null) {
-      action = newExpirationAttrs.getAction();
-    }
-
-    return new ExpirationAttributes(timeout, action);
-  }
-
