Merge branch 'release/1.5.0'

+import org.apache.geode.StatisticsFactory;
+import org.apache.geode.annotations.TestingOnly;
-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.cache.eviction.EvictionController;
-    DataSerializableFixedID, Extensible<Region<?, ?>> {
+    DataSerializableFixedID, Extensible<Region<?, ?>>, EvictableRegion {
-  private EvictionController evictionController;
-
-  protected DataPolicy dataPolicy;
+  private DataPolicy dataPolicy;
-  protected volatile boolean concurrencyChecksEnabled;
+  private volatile boolean concurrencyChecksEnabled;
+  protected EvictionAttributesMutator evictionAttributesMutator =
+      new EvictionAttributesMutatorImpl(this, this.evictionAttributes);
+
-  /**
-   * Unit test constructor. DO NOT USE!
-   *
-   * @since GemFire 8.1
-   * @deprecated For unit testing only. Use
-   *             {@link #AbstractRegion(InternalCache, RegionAttributes, String, InternalRegionArguments)}
-   *             .
-   */
-  @Deprecated
-  AbstractRegion(InternalCache cache, int serialNumber, boolean isPdxTypeRegion,
-      long lastAccessedTime, long lastModifiedTime) {
-    this.cache = cache;
-    this.serialNumber = serialNumber;
-    this.isPdxTypesRegion = isPdxTypeRegion;
-    this.lastAccessedTime = new AtomicLong(lastAccessedTime);
-    this.lastModifiedTime = new AtomicLong(lastModifiedTime);
+  @TestingOnly
+  AbstractRegion() {
+    this.cache = null;
+    this.serialNumber = 0;
+    this.isPdxTypesRegion = false;
+    this.lastAccessedTime = new AtomicLong(0);
+    this.lastModifiedTime = new AtomicLong(0);
-        .append("';dataPolicy=").append(this.dataPolicy);
-    if (this.concurrencyChecksEnabled) {
+        .append("';dataPolicy=").append(this.getDataPolicy());
+    if (this.getConcurrencyChecksEnabled()) {
-    if (this.dataPolicy.isNormal() || this.dataPolicy.isPreloaded() || this.dataPolicy.isEmpty()
-        || this.dataPolicy.withPartitioning()) {
+    if (this.getDataPolicy().isNormal() || this.getDataPolicy().isPreloaded()
+        || this.getDataPolicy().isEmpty() || this.getDataPolicy().withPartitioning()) {
-    } else if (this.dataPolicy.withReplication()) {
+    } else if (this.getDataPolicy().withReplication()) {
-              .toLocalizedString(this.dataPolicy));
+              .toLocalizedString(this.getDataPolicy()));
+  @Override
+  public void setConcurrencyChecksEnabled(boolean concurrencyChecksEnabled) {
+    this.concurrencyChecksEnabled = concurrencyChecksEnabled;
+  }
+
-    if ((this.dataPolicy.withReplication() || this.dataPolicy.withPartitioning())
+    if ((this.getDataPolicy().withReplication() || this.getDataPolicy().withPartitioning())
-        && this.dataPolicy.withReplication()) {
+        && this.getDataPolicy().withReplication()) {
-        && this.dataPolicy.withReplication()) {
+        && this.getDataPolicy().withReplication()) {
-  /** Throws CacheClosedException or RegionDestroyedException */
-  abstract void checkReadiness();
-
+  @Override
-    return this.evictionController != null;
+    return this.evictionAttributes != null && !this.evictionAttributes.getAlgorithm().isNone();
-    this.evictionAttributes =
-        new EvictionAttributesImpl((EvictionAttributesImpl) attrs.getEvictionAttributes());
+    this.evictionAttributes = new EvictionAttributesImpl(attrs.getEvictionAttributes());
-    if (this.evictionAttributes != null && !this.evictionAttributes.getAlgorithm().isNone()) {
-      setEvictionController(
-          this.evictionAttributes.createEvictionController(this, attrs.getOffHeap()));
-    }
-    this.concurrencyChecksEnabled =
-        attrs.getConcurrencyChecksEnabled() && supportsConcurrencyChecks();
+    this.setConcurrencyChecksEnabled(
+        attrs.getConcurrencyChecksEnabled() && supportsConcurrencyChecks());
-      if (cp.getMultiuserAuthentication() && !this.dataPolicy.isEmpty()) {
+      if (cp.getMultiuserAuthentication() && !this.getDataPolicy().isEmpty()) {
-    return this.evictionAttributes;
-  }
-
-  private void setEvictionController(EvictionController evictionController) {
-    this.evictionController = evictionController;
-  }
-
-  public EvictionController getEvictionController() {
-    return this.evictionController;
+    return this.evictionAttributesMutator;
-  protected void checkForLimitedOrNoAccess() {
+  public void checkForLimitedOrNoAccess() {
-  public DM getDistributionManager() {
+  public DistributionManager getDistributionManager() {
+  @Override
+  public StatisticsFactory getStatisticsFactory() {
+    return getSystem();
+  }
+
+  @Override
-  static Object handleNotAvailable(Object object) {
+  public static Object handleNotAvailable(Object object) {
-  public RegionSnapshotService<?, ?> getSnapshotService() {
+  public RegionSnapshotService getSnapshotService() {
-  public boolean isConcurrencyChecksEnabled() {
-    return this.concurrencyChecksEnabled;
-  }
-
-  @Override
