GEODE-1569: post process for serialized domain objects

* for client/server retreival, post process the value before it was put into the message
* for gfsh commands, post process the value before it was put into the command result json

+import java.io.IOException;
+import org.apache.commons.lang.SerializationException;
+import com.gemstone.gemfire.GemFireIOException;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+import com.gemstone.gemfire.internal.util.BlobHelper;
-  public static Object postProcess(String regionPath, Object key, Object result){
-    if(postProcessor == null)
-      return result;
+  public static Object postProcess(String regionPath, Object key, Object value, boolean valueIsSerialized){
+    if(!needPostProcess())
+      return value;
-      return result;
+      return value;
-    return postProcessor.processRegionValue((Principal)subject.getPrincipal(), regionName, key,  result);
+    Object newValue = null;
+
+    // if the data is a byte array, but the data itself is supposed to be an object, we need to desearized it before we pass
+    // it to the callback.
+    if (valueIsSerialized && value instanceof byte[]) {
+      try {
+        Object oldObj = EntryEventImpl.deserialize((byte[]) value);
+        Object newObj = postProcessor.processRegionValue((Principal)subject.getPrincipal(), regionName, key,  oldObj);
+        newValue = BlobHelper.serializeToBlob(newObj);
+      } catch (IOException|SerializationException e) {
+        throw new GemFireIOException("Exception de/serializing entry value", e);
+      }
+    }
+    else {
+      newValue = postProcessor.processRegionValue((Principal) subject.getPrincipal(), regionName, key, value);
+    }
+
+    return newValue;
+  }
+
+  private static void checkSameClass(Object obj1, Object obj2){
+
+  public static PostProcessor getPostProcessor() {
+    return postProcessor;
+  }
+
