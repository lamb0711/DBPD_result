GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-  public void cmdExecute(Message msg, ServerConnection servConn, long startp)
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection, long startp)
-    CachedRegionHelper crHelper = servConn.getCachedRegionHelper();
-    CacheServerStats stats = servConn.getCacheServerStats();
+    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
+    CacheServerStats stats = serverConnection.getCacheServerStats();
-    servConn.setAsTrue(REQUIRES_RESPONSE);
-    servConn.setAsTrue(REQUIRES_CHUNKED_RESPONSE); // new in 8.0
+    serverConnection.setAsTrue(REQUIRES_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_CHUNKED_RESPONSE); // new in 8.0
-      regionNamePart = msg.getPart(0);
+      regionNamePart = clientMessage.getPart(0);
-        logger.warn("{}: {}", servConn.getName(), putAllMsg);
+        logger.warn("{}: {}", serverConnection.getName(), putAllMsg);
-        writeChunkedErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeChunkedErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR, errMessage.toString(),
+            serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeRegionDestroyedEx(clientMessage, regionName, reason, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-      eventPart = msg.getPart(1);
+      eventPart = clientMessage.getPart(1);
-      EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
+      EventID eventId =
+          new EventID(serverConnection.getEventMemberIDByteArray(), threadId, sequenceId);
-      Part callbacksPart = msg.getPart(2);
+      Part callbacksPart = clientMessage.getPart(2);
-      int flags = msg.getPart(3).getInt();
+      int flags = clientMessage.getPart(3).getInt();
-      numberOfKeysPart = msg.getPart(4);
+      numberOfKeysPart = clientMessage.getPart(4);
-      Object callbackArg = getOptionalCallbackArg(msg);
+      Object callbackArg = getOptionalCallbackArg(clientMessage);
-        buffer.append(servConn.getName()).append(": Received ").append(this.putAllClassName())
-            .append(" request from ").append(servConn.getSocketString()).append(" for region ")
-            .append(regionName).append(callbackArg != null ? (" callbackArg " + callbackArg) : "")
-            .append(" with ").append(numberOfKeys).append(" entries.");
+        buffer.append(serverConnection.getName()).append(": Received ")
+            .append(this.putAllClassName()).append(" request from ")
+            .append(serverConnection.getSocketString()).append(" for region ").append(regionName)
+            .append(callbackArg != null ? (" callbackArg " + callbackArg) : "").append(" with ")
+            .append(numberOfKeys).append(" entries.");
-        keyPart = msg.getPart(BASE_PART_COUNT + i * 2);
+        keyPart = clientMessage.getPart(BASE_PART_COUNT + i * 2);
-          logger.warn("{}: {}", servConn.getName(), putAllMsg);
+          logger.warn("{}: {}", serverConnection.getName(), putAllMsg);
-          writeChunkedErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(),
-              servConn);
-          servConn.setAsTrue(RESPONDED);
+          writeChunkedErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR,
+              errMessage.toString(), serverConnection);
+          serverConnection.setAsTrue(RESPONDED);
-        valuePart = msg.getPart(BASE_PART_COUNT + i * 2 + 1);
+        valuePart = clientMessage.getPart(BASE_PART_COUNT + i * 2 + 1);
-          logger.warn("{}: {}", servConn.getName(), putAllMsg);
+          logger.warn("{}: {}", serverConnection.getName(), putAllMsg);
-          writeChunkedErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(),
-              servConn);
-          servConn.setAsTrue(RESPONDED);
+          writeChunkedErrorResponse(clientMessage, MessageType.PUT_DATA_ERROR,
+              errMessage.toString(), serverConnection);
+          serverConnection.setAsTrue(RESPONDED);
-        if (msg.isRetry()) {
+        if (clientMessage.isRetry()) {
-      if (msg.getNumberOfParts() == (BASE_PART_COUNT + 2 * numberOfKeys + 1)) {// it means optional
-                                                                               // timeout has been
-                                                                               // added
-        int timeout = msg.getPart(BASE_PART_COUNT + 2 * numberOfKeys).getInt();
-        servConn.setRequestSpecificTimeout(timeout);
+      if (clientMessage.getNumberOfParts() == (BASE_PART_COUNT + 2 * numberOfKeys + 1)) {// it means
+                                                                                         // optional
+        // timeout has been
+        // added
+        int timeout = clientMessage.getPart(BASE_PART_COUNT + 2 * numberOfKeys).getInt();
+        serverConnection.setRequestSpecificTimeout(timeout);
-      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
-      response = region.basicBridgePutAll(map, retryVersions, servConn.getProxyID(), eventId,
-          skipCallbacks, callbackArg);
+      response = region.basicBridgePutAll(map, retryVersions, serverConnection.getProxyID(),
+          eventId, skipCallbacks, callbackArg);
-          writeReplyWithRefreshMetadata(msg, response, servConn, pr, pr.getNetworkHopType());
+          writeReplyWithRefreshMetadata(clientMessage, response, serverConnection, pr,
+              pr.getNetworkHopType());
-      writeChunkedException(msg, rde, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, rde, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      writeChunkedException(msg, re, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, re, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      writeChunkedException(msg, pre, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, pre, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      checkForInterrupt(servConn, ce);
+      checkForInterrupt(serverConnection, ce);
-      writeChunkedException(msg, ce, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, ce, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-          servConn.getName()), ce);
+          serverConnection.getName()), ce);
-      logger.debug("{}: Sending {} response back to {} for regin {} {}", servConn.getName(),
-          putAllClassName(), servConn.getSocketString(), regionName,
+      logger.debug("{}: Sending {} response back to {} for regin {} {}", serverConnection.getName(),
+          putAllClassName(), serverConnection.getSocketString(), regionName,
-      writeReply(msg, response, servConn);
+      writeReply(clientMessage, response, serverConnection);
-    servConn.setAsTrue(RESPONDED);
+    serverConnection.setAsTrue(RESPONDED);
-  protected void writeReply(Message origMsg, ServerConnection servConn) throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection serverConnection) throws IOException {
-      int chunkSize = 2 * maximumChunkSize;
+      int chunkSize = 2 * MAXIMUM_CHUNK_SIZE;
-  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection servConn,
+  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection serverConnection,
-      int chunkSize = 2 * maximumChunkSize; // maximumChunkSize
+      int chunkSize = 2 * MAXIMUM_CHUNK_SIZE; // MAXIMUM_CHUNK_SIZE
-      logger.trace("{}: rpl with REFRESH_METADAT tx: {}", servConn.getName(),
+      logger.trace("{}: rpl with REFRESH_METADATA tx: {}", servConn.getName(),
