Adds groups to REST API v2 list members (#3591)

Co-authored-by: Owen Nichols <onichols@pivotal.io>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

+import java.util.Arrays;
+import java.util.Collections;
-    String coordinatorId = null;
-    List<MemberConfig> results = new ArrayList<>();
-    Set<DistributedMember> members = cache.getDistributionManager().getDistributionManagerIds()
-        .stream().filter(m -> (filter.getId() == null || filter.getId().equals(m.getName())))
-        .map(DistributedMember.class::cast).collect(Collectors.toSet());
+    Set<DistributedMember> members =
+        cache.getDistributionManager().getDistributionManagerIds()
+            .stream().filter(internalDistributedMember -> (filter.getId() == null
+                || filter.getId().equals(internalDistributedMember.getName())))
+            .map(DistributedMember.class::cast).collect(Collectors.toSet());
-      return results;
+      return Collections.emptyList();
-    for (DistributedMember member : members) {
-      if (member == getCoordinator()) {
-        coordinatorId = member.getId();
-      }
-    }
+    ArrayList<MemberInformation> output = getMemberInformation(members);
+    return generateMemberConfigs(output);
+  }
+
+  private ArrayList<MemberInformation> getMemberInformation(Set<DistributedMember> members) {
-    ResultCollector<?, ?> rc = execution.execute(new GetMemberInformationFunction());
+    ResultCollector<?, ?> resultCollector = execution.execute(new GetMemberInformationFunction());
+    return (ArrayList<MemberInformation>) resultCollector.getResult();
+  }
-    ArrayList<MemberInformation> output = (ArrayList<MemberInformation>) rc.getResult();
+  private List<MemberConfig> generateMemberConfigs(ArrayList<MemberInformation> memberInformation) {
-    for (MemberInformation mInfo : output) {
+    final String coordinatorId = getCoordinatorId();
+    List<MemberConfig> memberConfigs = new ArrayList<>();
+    for (MemberInformation mInfo : memberInformation) {
+      member.setGroups(Arrays.asList(mInfo.getGroups().split(",")));
+      member.setCoordinator(mInfo.getId().equals(coordinatorId));
-      member.setCoordinator(mInfo.getId().equals(coordinatorId));
-      results.add(member);
+      memberConfigs.add(member);
-    return results;
+    return memberConfigs;
-  private DistributedMember getCoordinator() {
-    MembershipManager mmgr = cache.getDistributionManager().getMembershipManager();
+  private String getCoordinatorId() {
+    final MembershipManager mmgr =
+        cache.getDistributionManager().getMembershipManager();
-    return mmgr.getCoordinator();
+    final DistributedMember coordinator = mmgr.getCoordinator();
+    if (coordinator == null) {
+      return null;
+    }
+
+    return coordinator.getId();
