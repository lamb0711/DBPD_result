Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException, IOException {
+  public static void main(String[] args)
+      throws IllegalArgumentException, IllegalAccessException, IOException {
-    
-    for(int i =0; i < OBJECT_DEPTH; i++) {
+
+    for (int i = 0; i < OBJECT_DEPTH; i++) {
-    
-    //warm up
-    for(int i = 0; i < ITERATIONS; i++) {
+
+    // warm up
+    for (int i = 0; i < ITERATIONS; i++) {
-    
+
-    for(int i = 0; i < ITERATIONS; i++) {
+    for (int i = 0; i < ITERATIONS; i++) {
-    
-    System.out.println("Sized object of depth " + OBJECT_DEPTH + " for " + ITERATIONS + " iterations elapsed(ns) :" + (end - start));
+
+    System.out.println("Sized object of depth " + OBJECT_DEPTH + " for " + ITERATIONS
+        + " iterations elapsed(ns) :" + (end - start));
-  private static void calcSize(TestObject testObject)
-      throws IllegalAccessException, IOException {
-    if(USE_SERIALIZATION) {
-//      NullDataOutputStream out = new NullDataOutputStream();
-      HeapDataOutputStream out= new HeapDataOutputStream(Version.CURRENT);
+  private static void calcSize(TestObject testObject) throws IllegalAccessException, IOException {
+    if (USE_SERIALIZATION) {
+      // NullDataOutputStream out = new NullDataOutputStream();
+      HeapDataOutputStream out = new HeapDataOutputStream(Version.CURRENT);
-  
-  
+
+
-    
+
-    
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      
+
-      if(field4 != null) {
+      if (field4 != null) {
