GEODE-4080: Protobuf JSON objects are in a proto string (#1171)

* GEODE-4080: Protobuf JSON objects are in a proto string

In the process, remove a couple of serialization-related classes that
are no longer really applicable.

* Catch `JSONFormatterException` and return it as a `EncodingException`.
* Change some names and add ProtobufSerializationService, which is the big
reason for all this churn.
* Get rid of the codec package
* Inline the serialization type enum
* Make encoding methods throw EncodingException.
* Don't use exceptions for control flow.

This meant renaming ProtobufPrimitiveTypes to ProtobufEncodingTypes.

Signed-off-by: Brian Rowe <browe@pivotal.io>
-import com.google.protobuf.ByteString;
-
-import org.apache.geode.internal.protocol.protobuf.v1.EncodingTypeTranslator;
-import org.apache.geode.internal.protocol.protobuf.v1.utilities.exception.UnknownProtobufPrimitiveType;
-import org.apache.geode.internal.protocol.serialization.SerializationService;
-import org.apache.geode.internal.protocol.serialization.exception.UnsupportedEncodingTypeException;
-import org.apache.geode.internal.protocol.serialization.registry.exception.CodecNotRegisteredForTypeException;
+import org.apache.geode.internal.protocol.serialization.exception.EncodingException;
-   * Creates a object containing the type and value encoding of a piece of data
-   *
-   * @param serializationService - object which knows how to encode objects for the protobuf
-   *        protocol {@link ProtobufSerializationService}
-   * @param unencodedValue - the value object which is to be encoded
-   * @return a protobuf EncodedValue object
-   * @throws UnsupportedEncodingTypeException - The object passed doesn't have a corresponding
-   *         SerializationType
-   * @throws CodecNotRegisteredForTypeException - There isn't a protobuf codec for the
-   *         SerializationType of the passed object
-   */
-  public static BasicTypes.EncodedValue createEncodedValue(
-      SerializationService serializationService, Object unencodedValue)
-      throws UnsupportedEncodingTypeException, CodecNotRegisteredForTypeException {
-
-    try {
-      return createPrimitiveEncodedValue(unencodedValue);
-    } catch (UnknownProtobufPrimitiveType e) {
-      BasicTypes.EncodingType resultEncodingType =
-          EncodingTypeTranslator.getEncodingTypeForObject(unencodedValue);
-      byte[] encodedValue = serializationService.encode(resultEncodingType, unencodedValue);
-      BasicTypes.CustomEncodedValue.Builder customEncodedValueBuilder =
-          BasicTypes.CustomEncodedValue.newBuilder().setEncodingType(resultEncodingType)
-              .setValue(ByteString.copyFrom(encodedValue));
-      return BasicTypes.EncodedValue.newBuilder().setCustomEncodedValue(customEncodedValueBuilder)
-          .build();
-    }
-  }
-
-  /**
-   * @throws UnsupportedEncodingTypeException - The key or value passed doesn't have a corresponding
+   * @throws EncodingException - The key or value passed doesn't have a corresponding
-   * @throws CodecNotRegisteredForTypeException - There isn't a protobuf codec for the
-   *         SerializationType of the passed key or value
-  public static BasicTypes.Entry createEntry(SerializationService serializationService,
-      Object unencodedKey, Object unencodedValue)
-      throws UnsupportedEncodingTypeException, CodecNotRegisteredForTypeException {
+  public static BasicTypes.Entry createEntry(ProtobufSerializationService serializationService,
+      Object unencodedKey, Object unencodedValue) throws EncodingException {
-      return BasicTypes.Entry.newBuilder()
-          .setKey(createEncodedValue(serializationService, unencodedKey)).build();
+      return BasicTypes.Entry.newBuilder().setKey(serializationService.encode(unencodedKey))
+          .build();
-    return createEntry(createEncodedValue(serializationService, unencodedKey),
-        createEncodedValue(serializationService, unencodedValue));
+    return createEntry(serializationService.encode(unencodedKey),
+        serializationService.encode(unencodedValue));
-   * This will return the object encoded in a protobuf EncodedValue
-   *
-   * @param serializationService - object which knows how to encode objects for the protobuf
-   *        protocol {@link ProtobufSerializationService}
-   * @param encodedValue - The value to be decoded
-   * @return the object encoded in the passed encodedValue
-   * @throws UnsupportedEncodingTypeException - There isn't a SerializationType matching the
-   *         encodedValues type
-   * @throws CodecNotRegisteredForTypeException - There isn't a protobuf codec for the
-   *         SerializationType matching the encodedValues type
-   */
-  public static Object decodeValue(SerializationService serializationService,
-      BasicTypes.EncodedValue encodedValue)
-      throws UnsupportedEncodingTypeException, CodecNotRegisteredForTypeException {
-
-    if (encodedValue.getValueCase() == BasicTypes.EncodedValue.ValueCase.CUSTOMENCODEDVALUE) {
-      BasicTypes.CustomEncodedValue customEncodedValue = encodedValue.getCustomEncodedValue();
-      return serializationService.decode(customEncodedValue.getEncodingType(),
-          customEncodedValue.getValue().toByteArray());
-    } else {
-      try {
-        return getPrimitiveValueFromEncodedValue(encodedValue);
-      } catch (UnknownProtobufPrimitiveType unknownProtobufPrimitiveType) {
-        throw new UnsupportedEncodingTypeException("Unknown primitive type encoding",
-            unknownProtobufPrimitiveType);
-      }
-    }
-  }
-
-  /**
-
-  /**
-   * This will create an EncodedValue message for a primitive type.
-   *
-   * @param valueToEncode this represents the potential primitive value that needs to be encoded in
-   *        an EncodedValue
-   * @return EncodedValue message with the correct primitive value populated
-   * @throws UnknownProtobufPrimitiveType
-   */
-  static BasicTypes.EncodedValue createPrimitiveEncodedValue(Object valueToEncode)
-      throws UnknownProtobufPrimitiveType {
-    ProtobufPrimitiveTypes protobufPrimitiveTypes =
-        ProtobufPrimitiveTypes.valueOf(valueToEncode.getClass());
-    BasicTypes.EncodedValue.Builder builder = BasicTypes.EncodedValue.newBuilder();
-    switch (protobufPrimitiveTypes) {
-      case INT: {
-        builder.setIntResult((Integer) valueToEncode);
-        break;
-      }
-      case LONG: {
-        builder.setLongResult((Long) valueToEncode);
-        break;
-      }
-      case SHORT: {
-        builder.setShortResult((Short) valueToEncode);
-        break;
-      }
-      case BYTE: {
-        builder.setByteResult((Byte) valueToEncode);
-        break;
-      }
-      case DOUBLE: {
-        builder.setDoubleResult((Double) valueToEncode);
-        break;
-      }
-      case FLOAT: {
-        builder.setFloatResult((Float) valueToEncode);
-        break;
-      }
-      case BINARY: {
-        builder.setBinaryResult(ByteString.copyFrom((byte[]) valueToEncode));
-        break;
-      }
-      case BOOLEAN: {
-        builder.setBooleanResult((Boolean) valueToEncode);
-        break;
-      }
-      case STRING: {
-        builder.setStringResult((String) valueToEncode);
-        break;
-      }
-
-    }
-    return builder.build();
-  }
-
-  static Object getPrimitiveValueFromEncodedValue(BasicTypes.EncodedValue encodedValue)
-      throws UnknownProtobufPrimitiveType {
-    switch (encodedValue.getValueCase()) {
-      case BINARYRESULT:
-        return encodedValue.getBinaryResult().toByteArray();
-      case BOOLEANRESULT:
-        return encodedValue.getBooleanResult();
-      case BYTERESULT:
-        return (byte) encodedValue.getByteResult();
-      case DOUBLERESULT:
-        return encodedValue.getDoubleResult();
-      case FLOATRESULT:
-        return encodedValue.getFloatResult();
-      case INTRESULT:
-        return encodedValue.getIntResult();
-      case LONGRESULT:
-        return encodedValue.getLongResult();
-      case SHORTRESULT:
-        return (short) encodedValue.getShortResult();
-      case STRINGRESULT:
-        return encodedValue.getStringResult();
-      default:
-        throw new UnknownProtobufPrimitiveType(
-            "Unknown primitive type for: " + encodedValue.getValueCase());
-    }
-  }
