GEODE-7803: provide undeprecated internal region create (#4722)

You can now use InternalRegionFactory to create a region configured with InternalRegionArguments. No need to use the deprecated AttributesFactory.
InternalRegionFactory used to be named RegionFactoryImpl.

-import java.io.IOException;
-import org.apache.geode.cache.AttributesFactory;
-import org.apache.geode.cache.DataPolicy;
-import org.apache.geode.cache.Scope;
+import org.apache.geode.cache.RegionShortcut;
-import org.apache.geode.internal.cache.InternalRegionArguments;
+import org.apache.geode.internal.cache.InternalRegionFactory;
-import org.apache.geode.management.internal.configuration.domain.Configuration;
-      InternalCache cache) throws IOException, ClassNotFoundException {
+      InternalCache cache) {
-      AttributesFactory<String, Configuration> regionAttrsFactory = new AttributesFactory<>();
-      regionAttrsFactory.setDataPolicy(DataPolicy.EMPTY);
-      regionAttrsFactory.setScope(Scope.DISTRIBUTED_ACK);
-
+      InternalRegionFactory<Object, Object> regionFactory =
+          cacheForClientAccess.createInternalRegionFactory(RegionShortcut.REPLICATE_PROXY);
-        regionAttrsFactory.setCacheWriter(new ExportLogsCacheWriter());
+        regionFactory.setCacheWriter(new ExportLogsCacheWriter());
-      InternalRegionArguments internalArgs = new InternalRegionArguments();
-      internalArgs.setIsUsedForMetaRegion(true);
-      exportLogsRegion =
-          cacheForClientAccess.createInternalRegion(EXPORT_LOGS_REGION, regionAttrsFactory.create(),
-              internalArgs);
+      regionFactory.setIsUsedForMetaRegion(true);
+      exportLogsRegion = regionFactory.create(EXPORT_LOGS_REGION);
