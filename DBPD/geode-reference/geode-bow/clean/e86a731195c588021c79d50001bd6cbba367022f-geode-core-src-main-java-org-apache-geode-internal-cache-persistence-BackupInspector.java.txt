Merge branch 'release/1.3.0'

+import org.apache.geode.internal.lang.SystemUtils;
+
-  protected Map<String, String> oplogLineMap = new HashMap<String, String>();
+  final Map<String, String> oplogLineMap = new HashMap<>();
-  protected Set<String> oplogFileNames = new HashSet<String>();
+  final Set<String> oplogFileNames = new HashSet<>();
-  protected File backupDir = null;
+  private final File backupDir;
-  public static BackupInspector createInspector(File backupDir) throws IOException {
-    if (isWindows()) {
+  public static BackupInspector createInspector(final File backupDir) throws IOException {
+    if (SystemUtils.isWindows()) {
-  public BackupInspector(File backupDir) throws IOException {
-    this.backupDir = backupDir;
-
+  BackupInspector(final File backupDir) throws IOException {
-    File restoreFile = getRestoreFile(backupDir);
+    this.backupDir = backupDir;
+    File restoreFile = getRestoreFile(backupDir);
-    BufferedReader reader = null;
-
-    try {
-      reader = new BufferedReader(new FileReader(restoreFile));
+    try (BufferedReader reader = new BufferedReader(new FileReader(restoreFile))) {
-    } finally {
-      if (null != reader) {
-        reader.close();
-      }
-   * Searches for the incremental backup marker.
+   * Searches for the incremental backup marker and parses the incremental portion.
-   * @throws IOException
-  private void parseRestoreFile(BufferedReader reader) throws IOException {
+  private void parseRestoreFile(final BufferedReader reader) throws IOException {
-    String line = null;
-    String incrementalMarker = getIncrementalMarker();
+    String line = null;
-      markerFound = line.startsWith(incrementalMarker);
+      markerFound = line.contains(RestoreScript.INCREMENTAL_MARKER_COMMENT);
-   * @return true if the host operating system is windows.
-   */
-  public static boolean isWindows() {
-    return (System.getProperty("os.name").indexOf("Windows") != -1);
-  }
-
-  /**
-  public String getScriptLineForOplogFile(String oplogFileName) {
+  public String getScriptLineForOplogFile(final String oplogFileName) {
-   * @return the incremental marke contained in the backup restore script.
-   */
-  protected abstract String getIncrementalMarker();
-
-  /**
-  public abstract String getCopyToForOplogFile(String oplogFileName);
+  public abstract String getCopyToForOplogFile(final String oplogFileName);
-  public abstract String getCopyFromForOplogFile(String oplogFileName);
+  public abstract String getCopyFromForOplogFile(final String oplogFileName);
-   * @throws IOException
-  protected abstract void parseOplogLines(BufferedReader reader) throws IOException;
-}
-
-
-/**
- * A BackupInspector for the Windows platform(s).
- *
- */
-class WindowsBackupInspector extends BackupInspector {
-  /**
-   * When found indicates that the restore script was produced from an incremental backup.
-   */
-  private static final String INCREMENTAL_MARKER = "rem Incremental backup";
-
-  /**
-   * Restore file for windows platform.
-   */
-  static final String RESTORE_FILE = "restore.bat";
-
-  WindowsBackupInspector(File backupDir) throws IOException {
-    super(backupDir);
-  }
-
-  @Override
-  public String getCopyFromForOplogFile(String oplogFileName) {
-    String copyFrom = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyFrom = parts[1].substring(1, parts[1].length() - 1) + File.separator + parts[3];
-    }
-
-    return copyFrom;
-  }
-
-  @Override
-  public String getCopyToForOplogFile(String oplogFileName) {
-    String copyTo = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyTo = parts[2].substring(1, parts[2].length() - 1) + File.separator + parts[3];
-    }
-
-    return copyTo;
-  }
-
-  @Override
-  /**
-   * Parses out operation log data from the incremental backup portion of the restore script.
-   * 
-   * @param reader restore file reader.
-   * @throws IOException
-   */
-  protected void parseOplogLines(BufferedReader reader) throws IOException {
-    String line = null;
-
-    int beginIndex, endIndex;
-    String oplogName = "";
-    while (null != (line = reader.readLine())) {
-
-      if (line.startsWith("robocopy")) {
-        beginIndex = line.lastIndexOf("\"") + 2;
-        endIndex = line.indexOf("/njh", beginIndex) - 1;
-        oplogName = line.substring(beginIndex, endIndex);
-        this.oplogFileNames.add(oplogName);
-        this.oplogLineMap.put(oplogName, line);
-      } else if (line.startsWith("IF")) {
-        continue;
-      } else if (line.contains(RestoreScript.EXIT_MARKER)) {
-        break;
-      }
-    }
-  }
-
-  @Override
-  protected String getIncrementalMarker() {
-    return INCREMENTAL_MARKER;
-  }
-
-  @Override
-  protected File getRestoreFile(final File backupDir) {
-    return new File(backupDir, RESTORE_FILE);
-  }
-}
-
-
-/**
- * A BackupInspector for Unix platforms.
- */
-class UnixBackupInspector extends BackupInspector {
-  /**
-   * When found indicates that the restore script was produced from an incremental backup.
-   */
-  private static final String INCREMENTAL_MARKER = "#Incremental backup";
-
-  /**
-   * Restore file for windows platform.
-   */
-  static final String RESTORE_FILE = "restore.sh";
-
-  UnixBackupInspector(File backupDir) throws IOException {
-    super(backupDir);
-  }
-
-  @Override
-  public String getCopyFromForOplogFile(String oplogFileName) {
-    String copyFrom = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyFrom = parts[2].substring(1, parts[2].length() - 1);
-    }
-
-    return copyFrom;
-  }
-
-  @Override
-  public String getCopyToForOplogFile(String oplogFileName) {
-    String copyTo = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyTo = parts[3].substring(1, parts[3].length() - 1);
-    }
-
-    return copyTo;
-  }
-
-  @Override
-  /**
-   * Parses out operation log data from the incremental backup portion of the restore script.
-   * 
-   * @param reader restore file reader.
-   * @throws IOException
-   */
-  protected void parseOplogLines(BufferedReader reader) throws IOException {
-    String line = null;
-
-    while (null != (line = reader.readLine())) {
-      int beginIndex = line.lastIndexOf(File.separator) + 1;
-      int endIndex = line.length() - 1;
-      String oplogName = line.substring(beginIndex, endIndex);
-      this.oplogFileNames.add(oplogName);
-      this.oplogLineMap.put(oplogName, line);
-    }
-  }
-
-  @Override
-  protected String getIncrementalMarker() {
-    return INCREMENTAL_MARKER;
-  }
-
-  @Override
-  protected File getRestoreFile(final File backupDir) {
-    return new File(backupDir, RESTORE_FILE);
-  }
+  protected abstract void parseOplogLines(final BufferedReader reader) throws IOException;
