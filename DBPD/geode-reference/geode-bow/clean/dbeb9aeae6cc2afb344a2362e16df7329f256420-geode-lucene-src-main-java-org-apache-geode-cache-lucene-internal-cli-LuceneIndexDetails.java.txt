Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.CacheFactory;
+  private final String serverName;
-  private Map<String, String> fieldAnalyzers=null;
-  private final Map<String,Integer> indexStats;
+  private Map<String, String> fieldAnalyzers = null;
+  private final Map<String, Integer> indexStats;
-  public LuceneIndexDetails(final String indexName, final String regionPath, final String[] searchableFieldNames, final Map<String, Analyzer> fieldAnalyzers, LuceneIndexStats indexStats, boolean initialized) {
+  public LuceneIndexDetails(final String indexName, final String regionPath,
+      final String[] searchableFieldNames, final Map<String, Analyzer> fieldAnalyzers,
+      LuceneIndexStats indexStats, boolean initialized, final String serverName) {
+    this.serverName = serverName;
-    this.indexStats=getIndexStatsMap(indexStats);
+    this.indexStats = getIndexStatsMap(indexStats);
-  public LuceneIndexDetails(LuceneIndexImpl index) {
-    this(index.getName(), index.getRegionPath(), index.getFieldNames(),index.getFieldAnalyzers(),index.getIndexStats(), true);
+  public LuceneIndexDetails(LuceneIndexImpl index, final String serverName) {
+    this(index.getName(), index.getRegionPath(), index.getFieldNames(), index.getFieldAnalyzers(),
+        index.getIndexStats(), true, serverName);
-  public LuceneIndexDetails(LuceneIndexCreationProfile indexProfile) {
-    this(indexProfile.getIndexName(), indexProfile.getRegionPath(), indexProfile.getFieldNames(), null, null, false);
-    this.fieldAnalyzers=getFieldAnalyzerStringsFromProfile(indexProfile.getFieldAnalyzers());
+  public LuceneIndexDetails(LuceneIndexCreationProfile indexProfile, final String serverName) {
+    this(indexProfile.getIndexName(), indexProfile.getRegionPath(), indexProfile.getFieldNames(),
+        null, null, false, serverName);
+    this.fieldAnalyzers = getFieldAnalyzerStringsFromProfile(indexProfile.getFieldAnalyzers());
-  public Map<String,Integer> getIndexStats() {
+  public Map<String, Integer> getIndexStats() {
-  private  Map<String,Integer> getIndexStatsMap(LuceneIndexStats indexStats) {
-    Map<String,Integer> statsMap = new HashMap<>();
-    if (indexStats==null) return statsMap;
-    statsMap.put("queryExecutions",indexStats.getQueryExecutions());
-    statsMap.put("updates",indexStats.getUpdates());
-    statsMap.put("commits",indexStats.getCommits());
-    statsMap.put("documents",indexStats.getDocuments());
+
+  private Map<String, Integer> getIndexStatsMap(LuceneIndexStats indexStats) {
+    Map<String, Integer> statsMap = new HashMap<>();
+    if (indexStats == null)
+      return statsMap;
+    statsMap.put("queryExecutions", indexStats.getQueryExecutions());
+    statsMap.put("updates", indexStats.getUpdates());
+    statsMap.put("commits", indexStats.getCommits());
+    statsMap.put("documents", indexStats.getDocuments());
-    if(fieldAnalyzers == null) {
+    if (fieldAnalyzers == null) {
-      if(analyzer != null) {
+      if (analyzer != null) {
-  private Map<String, String> getFieldAnalyzerStringsFromProfile(Map<String, String> fieldAnalyzers) {
-    if(fieldAnalyzers == null) {
+  private Map<String, String> getFieldAnalyzerStringsFromProfile(
+      Map<String, String> fieldAnalyzers) {
+    if (fieldAnalyzers == null) {
-      if(analyzer != null) {
+      if (analyzer != null) {
-    buffer.append("{\n\tIndex Name = "+indexName);
-    buffer.append(",\tRegion Path = "+regionPath);
-    buffer.append(",\tIndexed Fields = "+getSearchableFieldNamesString());
-    buffer.append(",\tField Analyzer = "+getFieldAnalyzersString());
-    buffer.append(",\tStatus =\n\t"+ getInitialized());
-    buffer.append(",\tIndex Statistics =\n\t"+getIndexStatsString());
+    buffer.append("{\n\tIndex Name = " + indexName);
+    buffer.append(",\tRegion Path = " + regionPath);
+    buffer.append(",\tIndexed Fields = " + getSearchableFieldNamesString());
+    buffer.append(",\tField Analyzer = " + getFieldAnalyzersString());
+    buffer.append(",\tStatus =\n\t" + getInitialized());
+    buffer.append(",\tIndex Statistics =\n\t" + getIndexStatsString());
-    return (obj1 == null && obj2 == null ? 0 : (obj1 == null ? 1 : (obj2 == null ? -1 : obj1.compareTo(obj2))));
+    return (obj1 == null && obj2 == null ? 0
+        : (obj1 == null ? 1 : (obj2 == null ? -1 : obj1.compareTo(obj2))));
-    return (comparisonValue != 0 ? comparisonValue : compare(getRegionPath(), indexDetails.getRegionPath()));
+    return (comparisonValue != 0 ? comparisonValue
+        : compare(getRegionPath(), indexDetails.getRegionPath()));
+  public String getServerName() {
+    return serverName;
+  }
