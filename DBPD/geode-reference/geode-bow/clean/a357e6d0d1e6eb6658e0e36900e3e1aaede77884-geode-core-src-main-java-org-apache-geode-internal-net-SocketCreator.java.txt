GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

-      boolean sslConnection) throws IOException {
+      boolean sslConnection) {
-    // Get a random port from range.
-    int startingPort = tcpPortRange[0]
-        + ThreadLocalRandom.current().nextInt(tcpPortRange[1] - tcpPortRange[0] + 1);
-    int localPort = startingPort;
-    int portLimit = tcpPortRange[1];
+    try {
+      // Get a random port from range.
+      int startingPort = tcpPortRange[0]
+          + ThreadLocalRandom.current().nextInt(tcpPortRange[1] - tcpPortRange[0] + 1);
+      int localPort = startingPort;
+      int portLimit = tcpPortRange[1];
-    while (true) {
-      if (localPort > portLimit) {
-        if (startingPort != 0) {
-          localPort = tcpPortRange[0];
-          portLimit = startingPort - 1;
-          startingPort = 0;
-        } else {
-          throw new SystemConnectException(
-              "Unable to find a free port in the membership-port-range");
+      while (true) {
+        if (localPort > portLimit) {
+          if (startingPort != 0) {
+            localPort = tcpPortRange[0];
+            portLimit = startingPort - 1;
+            startingPort = 0;
+          } else {
+            throw new SystemConnectException(
+                "Unable to find a free port in the membership-port-range");
+          }
+        }
+        ServerSocket socket = null;
+        try {
+          if (useNIO) {
+            ServerSocketChannel channel = ServerSocketChannel.open();
+            socket = channel.socket();
+
+            InetSocketAddress address = new InetSocketAddress(isBindAddress ? ba : null, localPort);
+            socket.bind(address, backlog);
+          } else {
+            socket = this.createServerSocket(localPort, backlog, isBindAddress ? ba : null,
+                tcpBufferSize, sslConnection);
+          }
+          return socket;
+        } catch (java.net.SocketException ex) {
+          if (socket != null && !socket.isClosed()) {
+            socket.close();
+          }
+          localPort++;
-      ServerSocket socket = null;
-      try {
-        if (useNIO) {
-          ServerSocketChannel channel = ServerSocketChannel.open();
-          socket = channel.socket();
-
-          InetSocketAddress address = new InetSocketAddress(isBindAddress ? ba : null, localPort);
-          socket.bind(address, backlog);
-        } else {
-          socket = this.createServerSocket(localPort, backlog, isBindAddress ? ba : null,
-              tcpBufferSize, sslConnection);
-        }
-        return socket;
-      } catch (java.net.SocketException ex) {
-        if (socket != null && !socket.isClosed()) {
-          socket.close();
-        }
-        localPort++;
-      }
+    } catch (IOException e) {
+      throw new GemFireConfigException("unable to create a socket in the membership-port range", e);
