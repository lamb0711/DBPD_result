GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
-
-
+
+
+
-  /**
-   * A transient queue to maintain the eventSeqNum of the events that are to be sent to remote site.
-   * It is cleared when the queue is cleared.
-   */
-  // private final BlockingQueue<Long> eventSeqNumQueue;
-
-    // eventSeqNumQueue = new LinkedBlockingQueue<Long>();
-        // addShadowPartitionedRegionForUserRR((DistributedRegion)userRegion);
-        removalThread = new BatchRemovalThread((GemFireCacheImpl) this.sender.getCache(), this);
+        removalThread = new BatchRemovalThread(this.sender.getCache(), this);
-      GemFireCacheImpl cache = (GemFireCacheImpl) sender.getCache();
+      InternalCache cache = sender.getCache();
-          // Suranjan: TODO This should not be set on the PR but on the
-          // GatewaySender
+          // TODO This should not be set on the PR but on the GatewaySender
-          // if (sender.isPersistenceEnabled()) {
-          // //Kishor: I need to write a test for this code.
-          // Set<Integer> allBucketsClone = new HashSet<Integer>();
-          // // allBucketsClone.addAll(allBuckets);*/
-          // for (int i = 0; i < sender.getMaxParallelismForReplicatedRegion(); i++)
-          // allBucketsClone.add(i);
-          //
-          // while (!(allBucketsClone.size() == 0)) {
-          // Iterator<Integer> itr = allBucketsClone.iterator();
-          // while (itr.hasNext()) {
-          // InternalDistributedMember node = prQ.getNodeForBucketWrite(
-          // itr.next(), null);
-          // if (node != null) {
-          // itr.remove();
-          // }
-          // }
-          // // after the iteration is over, sleep for sometime before trying
-          // // again
-          // try {
-          // Thread.sleep(WAIT_CYCLE_SHADOW_BUCKET_LOAD);
-          // }
-          // catch (InterruptedException e) {
-          // logger.error(e);
-          // }
-          // }
-          // }
-    // return fullPath.replaceAll("/", "_");
-      GemFireCacheImpl cache = (GemFireCacheImpl) sender.getCache();
+      InternalCache cache = sender.getCache();
-          // Suranjan: TODO This should not be set on the PR but on the GatewaySender
+          // TODO This should not be set on the PR but on the GatewaySender
-
-
+    // nothing
-    // Suranjan : Can this region ever be null? Should we work with regionName and not with region
+    // Can this region ever be null? Should we work with regionName and not with region
-    // if (isDREvent(value)) {
-    // putInShadowPRForReplicatedRegion(object);
-    // value.freeOffHeapValue();
-    // return;
-    // }
-
-                  // tempQueue = this.bucketToTempQueueMap.get(bucketId);
-                  // if (tempQueue == null) {
-                  // tempQueue = new LinkedBlockingQueue();
-                  // this.bucketToTempQueueMap.put(bucketId, tempQueue);
-                  // }
-            // }
-        // TODO : Kishor : During merge, ParallelWANstats test failed. On
+        // TODO: During merge, ParallelWANstats test failed. On
-        // if (brq.getBucketAdvisor().isPrimary()) {
-        // this.stats.incQueueSize();
-        // }
-  // TODO: Suranjan Find optimal way to get Random shadow pr as this will be called in each put and
-  // peek.
+  // TODO: Find optimal way to get Random shadow pr as this will be called in each put and peek.
-    // if (this.userPRToshadowPRMap.values().size() > 0
-    // && (prQ == null)) {
-    // prQ = getRandomShadowPR();
-    // }
-      /*
-       * Collections.shuffle(thisProcessorBuckets); for (Integer bucketId : thisProcessorBuckets) {
-       * BucketRegionQueue br = (BucketRegionQueue)prQ.getDataStore()
-       * .getBucketRegionQueueByBucketId(bucketId);
-       *
-       * if (br != null && br.isReadyForPeek()) { return br.getId(); } }
-       */
-        // PartitionedRegion prQ = this.userPRToshadowPRMap.get(ColocationHelper
-        // .getLeaderRegion((PartitionedRegion)event.getRegion()).getFullPath());
-        //
-          GemFireCacheImpl cache = (GemFireCacheImpl) this.sender.getCache();
+          InternalCache cache = this.sender.getCache();
-            // TODO: Suranjan We have to get colocated parent region for this
-            // region
+            // TODO: We have to get colocated parent region for this region
-    // TODO : Kishor : Make sure we dont need to initalize a bucket
+    // TODO : Make sure we dont need to initalize a bucket
-      blockProcesorThreadIfRequired();
+      blockProcessorThreadIfRequired();
-      blockProcesorThreadIfRequired();
+      blockProcessorThreadIfRequired();
-  protected void blockProcesorThreadIfRequired() throws InterruptedException {
+  protected void blockProcessorThreadIfRequired() throws InterruptedException {
-      // while (isQueueEmpty) {
-        // isQueueEmpty = this.localSize() == 0;
-
-    // for (Region r: getRegions()) {
-    // if (r != null && !r.isDestroyed()) {
-    // try {
-    // r.close();
-    // } catch (RegionDestroyedException e) {
-    // }
-    // }
-    // }
-    private final GemFireCacheImpl cache;
+    private final InternalCache cache;
-    public BatchRemovalThread(GemFireCacheImpl c, ParallelGatewaySenderQueue queue) {
+    public BatchRemovalThread(InternalCache c, ParallelGatewaySenderQueue queue) {
-    private Set<InternalDistributedMember> getAllRecipients(GemFireCacheImpl cache, Map map) {
+    private Set<InternalDistributedMember> getAllRecipients(InternalCache cache, Map map) {
-        LocalRegion parentRegion, GemFireCacheImpl cache, AbstractGatewaySender pgSender) {
+        LocalRegion parentRegion, InternalCache cache, AbstractGatewaySender pgSender) {
-    ParallelGatewaySenderQueueMetaRegion newMetataRegion(GemFireCacheImpl cache,
-        final String prQName, final RegionAttributes ra, AbstractGatewaySender sender) {
+    ParallelGatewaySenderQueueMetaRegion newMetataRegion(InternalCache cache, final String prQName,
+        final RegionAttributes ra, AbstractGatewaySender sender) {
