GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

-import org.apache.geode.distributed.internal.DistributionConfig;
+import static org.apache.commons.lang.Validate.notNull;
+import static org.apache.geode.internal.process.ProcessUtils.identifyPid;
+import org.apache.geode.distributed.internal.DistributionConfig;
+
- * <p/>
+ *
+ * <p>
+ *
+ * </ul>
-public class LocalProcessLauncher {
+class LocalProcessLauncher {
-  public static final String PROPERTY_IGNORE_IS_PID_ALIVE =
+  static final String PROPERTY_IGNORE_IS_PID_ALIVE =
-  public LocalProcessLauncher(final File pidFile, final boolean force)
+  LocalProcessLauncher(final File pidFile, final boolean force)
-    this.pid = ProcessUtils.identifyPid();
+    notNull(pidFile, "Invalid pidFile '" + pidFile + "' specified");
+
+    this.pid = identifyPid();
-  public int getPid() {
-    return this.pid;
+  int getPid() {
+    return pid;
-  public File getPidFile() {
-    return this.pidFile;
+  File getPidFile() {
+    return pidFile;
+   *
-    this.pidFile.delete();
+    pidFile.delete();
+  }
+
+  /**
+   * Delete the pid file now. {@link java.io.File#deleteOnExit()} is set on the pid file.
+   *
+   * @param deletePidFileOnClose if true then the pid file will be deleted now instead of during JVM
+   *        exit
+   */
+  void close(final boolean deletePidFileOnClose) {
+    if (deletePidFileOnClose) {
+      pidFile.delete();
+    }
-    final boolean created = this.pidFile.createNewFile();
-    if (!created && !force) {
-      int otherPid = 0;
-      try {
-        otherPid = ProcessUtils.readPid(this.pidFile);
-      } catch (IOException e) {
-        // suppress
-      } catch (NumberFormatException e) {
-        // suppress
+    if (pidFile.exists()) {
+      if (!force) {
+        checkOtherPid(readOtherPid());
-      boolean ignorePidFile = false;
-      if (otherPid != 0 && !ignoreIsPidAlive()) {
-        ignorePidFile = !ProcessUtils.isProcessAlive(otherPid);
-      }
-      if (!ignorePidFile) {
-        throw new FileAlreadyExistsException("Pid file already exists: " + this.pidFile + " for "
-            + (otherPid > 0 ? "process " + otherPid : "unknown process"));
-      }
+      pidFile.delete();
-    this.pidFile.deleteOnExit();
-    final FileWriter writer = new FileWriter(this.pidFile);
-    writer.write(String.valueOf(this.pid));
-    writer.flush();
-    writer.close();
+
+    File tempPidFile = new File(pidFile.getParent(), pidFile.getName() + ".tmp");
+    tempPidFile.createNewFile();
+
+    try (FileWriter writer = new FileWriter(tempPidFile)) {
+      writer.write(String.valueOf(pid));
+      writer.flush();
+    }
+
+    tempPidFile.renameTo(pidFile);
+    pidFile.deleteOnExit();
+  }
+
+  private int readOtherPid() {
+    int otherPid = 0;
+    try {
+      otherPid = ProcessUtils.readPid(pidFile);
+    } catch (NumberFormatException | IOException ignore) {
+      // suppress
+    }
+    return otherPid;
+  }
+
+  private void checkOtherPid(final int otherPid) throws FileAlreadyExistsException {
+    if (ignoreIsPidAlive() || otherPid != 0 && isProcessAlive(otherPid)) {
+      throw new FileAlreadyExistsException("Pid file already exists: " + pidFile + " for "
+          + (otherPid > 0 ? "process " + otherPid : "unknown process"));
+    }
+  }
+
+  private boolean isProcessAlive(final int pid) {
+    return ignoreIsPidAlive() || ProcessUtils.isProcessAlive(pid);
