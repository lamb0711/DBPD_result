Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Represents a {@link ClientCache} that is created declaratively.  Notice
- * that it implements the {@link ClientCache} interface so that this class
- * must be updated when {@link ClientCache} is modified.  This class is
- * public for testing purposes.
+ * Represents a {@link ClientCache} that is created declaratively. Notice that it implements the
+ * {@link ClientCache} interface so that this class must be updated when {@link ClientCache} is
+ * modified. This class is public for testing purposes.
-  ////////////////////////  Constructors  ////////////////////////
+  //////////////////////// Constructors ////////////////////////
-   * @param forParsing if true then this creation is used for parsing xml;
-   *   if false then it is used for generating xml.
+   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
+   *        for generating xml.
-  
-  //////////////////////  Instance Methods  //////////////////////
+
+  ////////////////////// Instance Methods //////////////////////
-//    af.setIgnoreJTA(true);  In 6.6 and later releases client regions support JTA
+    // af.setIgnoreJTA(true); In 6.6 and later releases client regions support JTA
+
+
-  public <K,V> ClientRegionFactory<K,V> createClientRegionFactory(ClientRegionShortcut atts) {
+  public <K, V> ClientRegionFactory<K, V> createClientRegionFactory(ClientRegionShortcut atts) {
-  public <K,V> ClientRegionFactory<K,V> createClientRegionFactory(String regionAttributesId) {
-    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
-  }
-  
-  public RegionService createAuthenticatedView(Properties properties,
-      String poolName) {
+  public <K, V> ClientRegionFactory<K, V> createClientRegionFactory(String regionAttributesId) {
-  public RegionService createAuthenticatedView(
-      Properties userSecurityProperties) {
+  public RegionService createAuthenticatedView(Properties properties, String poolName) {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  public RegionService createAuthenticatedView(Properties userSecurityProperties) {
-  
+
+
+
-   * Fills in the contents of a {@link Cache} based on this creation
-   * object's state.
+   * Fills in the contents of a {@link Cache} based on this creation object's state.
-    throws TimeoutException, CacheWriterException,
-           GatewayException,
-           RegionExistsException {
+      throws TimeoutException, CacheWriterException, GatewayException, RegionExistsException {
-      throw new IllegalStateException("You must use ClientCacheFactory when the cache.xml uses client-cache.");
+      throw new IllegalStateException(
+          "You must use ClientCacheFactory when the cache.xml uses client-cache.");
-          Pool cp = (Pool)it.next();
+          Pool cp = (Pool) it.next();
-          f = (PoolFactoryImpl)PoolManager.createFactory();
+          f = (PoolFactoryImpl) PoolManager.createFactory();
-          PoolImpl p = (PoolImpl)f.create(cp.getName());
+          PoolImpl p = (PoolImpl) f.create(cp.getName());
-      GemFireCacheImpl gfc = (GemFireCacheImpl)cache;
+      GemFireCacheImpl gfc = (GemFireCacheImpl) cache;
-    
+
-    if (this.txMgrCreation != null &&
-        this.txMgrCreation.getListeners().length > 0 &&
-        cache.getCacheTransactionManager()!=null) {
+    if (this.txMgrCreation != null && this.txMgrCreation.getListeners().length > 0
+        && cache.getCacheTransactionManager() != null) {
-    
-    if (this.txMgrCreation != null &&
-        cache.getCacheTransactionManager()!=null && this.txMgrCreation.getWriter() != null) {
-      throw new IllegalStateException(LocalizedStrings.TXManager_NO_WRITER_ON_CLIENT.toLocalizedString());
+
+    if (this.txMgrCreation != null && cache.getCacheTransactionManager() != null
+        && this.txMgrCreation.getWriter() != null) {
+      throw new IllegalStateException(
+          LocalizedStrings.TXManager_NO_WRITER_ON_CLIENT.toLocalizedString());
-    
+
-    for (Iterator iter = this.regionAttributesNames.iterator();
-         iter.hasNext(); ) {
+    for (Iterator iter = this.regionAttributesNames.iterator(); iter.hasNext();) {
-      RegionAttributesCreation creation =
-        (RegionAttributesCreation) getRegionAttributes(id);
+      RegionAttributesCreation creation = (RegionAttributesCreation) getRegionAttributes(id);
-      RegionCreation r = (RegionCreation)it.next();
+      RegionCreation r = (RegionCreation) it.next();
-      Pool p = (Pool)m.values().iterator().next();
+      Pool p = (Pool) m.values().iterator().next();
-  
+
-  
-  /* (non-Javadoc)
+
+  /*
+   * (non-Javadoc)
+   * 
-      return false;
+    return false;
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
