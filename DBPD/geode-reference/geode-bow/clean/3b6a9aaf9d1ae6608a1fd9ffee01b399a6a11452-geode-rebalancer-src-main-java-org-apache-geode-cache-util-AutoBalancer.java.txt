GEODE-4559: pass the Cache to a Declarable (#1422)

* Declarable now has a default method named "initialize(Cache, Properties)".
This allows a Declarable to know the cache that created it.
Deprecated Declarable.init(Properties).
Note that for backwards compatibility, the product calls
both these methods. Also the two Declarables that the product
implements, AutoBalancer and ReflectionBasedAutoSerializer,
implement both these methods but after the first calls subsequent
calls of init or initialize will be noops.

* initialize on ReflectionBasedAutoSerializer now call setRegionService with the cache.
init and initialize can now be called multiple times and each time the properties will
be set again. This is for backwards compatibility.

* The AutoBalancer no longer looks up the static cache.
but instead of given one by the product calling setCache
during initialization.


+import org.apache.geode.cache.Cache;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+  private boolean initialized;
+
+  public void initialize(Cache cache, Properties props) {
+    this.cacheFacade.setCache(cache);
+    internalInitialize(props);
+  }
+
+  /**
+   * @deprecated as of Geode 1.5 use initialize instead.
+   */
+    internalInitialize(props);
+  }
+
+  private void internalInitialize(Properties props) {
+    if (this.initialized) {
+      // For backwards compatibility we need to keep the external
+      // init method. But the product will call both initialize and
+      // init. So if we are already initialized subsequent calls
+      // are a noop. Once the deprecated init method is removed, this
+      // boolean check can also be removed.
+      return;
+    }
+    this.initialized = true;
+
-      // TODO: delete this double-checking
-      if (cache == null) {
-        synchronized (this) {
-          if (cache == null) {
-            cache = GemFireCacheImpl.getInstance();
-            if (cache == null) {
-              throw new IllegalStateException("Missing cache instance.");
-            }
-          }
-        }
+      InternalCache result = cache;
+      if (result == null) {
+        throw new IllegalStateException("Missing cache instance.");
-      if (cache.isClosed()) {
+      if (result.isClosed()) {
-      return cache;
+      return result;
+
+    @Override
+    public void setCache(Cache cache) {
+      this.cache = (InternalCache) cache;
+    }
+    void setCache(Cache cache);
+
