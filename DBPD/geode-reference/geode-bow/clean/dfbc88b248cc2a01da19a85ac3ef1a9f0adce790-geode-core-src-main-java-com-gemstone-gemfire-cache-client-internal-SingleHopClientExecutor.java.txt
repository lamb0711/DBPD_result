Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfigImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/StartupMessage.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/SystemAdmin.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheServerStats.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatHelper.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatSampler.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/StatArchiveWriter.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/GemFireStatSamplerIntegrationTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/SimpleStatSamplerIntegrationTest.java

-
+import com.gemstone.gemfire.GemFireException;
+        GemFireException functionExecutionException = null;
-              rc.clearResults();
-              if (!isHA) {
+              // Clear the results only if isHA so that partial results can be returned.
+              if (isHA) {
+                rc.clearResults();
+              } else {
-                  throw new FunctionInvocationTargetException(ee.getCause()
-                      .getCause());
+                  functionExecutionException = new FunctionInvocationTargetException(
+                      ee.getCause().getCause());
-                  throw new FunctionInvocationTargetException(
+                  functionExecutionException = new FunctionInvocationTargetException(
-                
-              throw (FunctionException)ee.getCause();
+              FunctionException fe = (FunctionException)ee.getCause();
+              if (isHA) {
+                throw fe;
+              } else {
+                functionExecutionException = fe;
+              }
-              throw (ServerOperationException)ee.getCause();
+              ServerOperationException soe = (ServerOperationException)ee.getCause();
+              if (isHA) {
+                throw soe;
+              } else {
+                functionExecutionException = soe;
+              }
-              reexecute = true;
-              rc.clearResults();
-              if (!isHA) {
-                reexecute = false;
-                throw (ServerConnectivityException) ee.getCause();
+              // Clear the results only if isHA so that partial results can be returned.
+              if (isHA) {
+                reexecute = true;
+                rc.clearResults();
+              } else {
+                functionExecutionException = (ServerConnectivityException) ee.getCause();
+        if (functionExecutionException != null) {
+          throw functionExecutionException;
+        }
