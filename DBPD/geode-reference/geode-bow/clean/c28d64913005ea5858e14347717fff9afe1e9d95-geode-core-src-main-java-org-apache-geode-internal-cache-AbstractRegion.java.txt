Merge branch 'release/1.4.0'

+import org.apache.geode.internal.cache.eviction.EvictionController;
-import org.apache.geode.internal.cache.lru.LRUAlgorithm;
-public abstract class AbstractRegion implements Region, RegionAttributes, AttributesMutator,
-    CacheStatistics, DataSerializableFixedID, RegionEntryContext, Extensible<Region<?, ?>> {
+public abstract class AbstractRegion implements InternalRegion, AttributesMutator, CacheStatistics,
+    DataSerializableFixedID, Extensible<Region<?, ?>> {
-  private LRUAlgorithm evictionController;
+  private EvictionController evictionController;
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  public abstract RegionEntry basicGetEntry(Object key);
-
-   * 
+   *
-   * 
+   *
+  @Override
-   * 
+   *
-  boolean isIndexCreationThread() {
+  @Override
+  public boolean isIndexCreationThread() {
+    addAsyncEventQueueId(asyncEventQueueId, false);
+  }
+
+  public void addAsyncEventQueueId(String asyncEventQueueId, boolean isInternal) {
-    getVisibleAsyncEventQueueIds().add(asyncEventQueueId);
+    if (!isInternal) {
+      getVisibleAsyncEventQueueIds().add(asyncEventQueueId);
+    }
-   * 
+   *
-  protected boolean isProxy() {
+  @Override
+  public boolean isProxy() {
-  boolean isEntryExpiryPossible() {
+  @Override
+  public boolean isEntryExpiryPossible() {
-   * 
+   *
-  private void setEvictionController(LRUAlgorithm evictionController) {
+  private void setEvictionController(EvictionController evictionController) {
-  public LRUAlgorithm getEvictionController() {
+  public EvictionController getEvictionController() {
+  @Override
+  @Override
+
+  @Override
+  public boolean isConcurrencyChecksEnabled() {
+    return this.concurrencyChecksEnabled;
+  }
+
+  @Override
+  public void incRecentlyUsed() {
+    // nothing
+  }
