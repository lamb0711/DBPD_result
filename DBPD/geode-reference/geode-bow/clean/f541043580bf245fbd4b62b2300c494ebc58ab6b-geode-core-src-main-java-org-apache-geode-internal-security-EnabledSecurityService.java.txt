GEODE-2925: add target for resource operation for finer grained security

* add finer authorize* call in security service
* add target to the MXBean authorization check
* use enum type instead of raw strings for resource/operation

+import org.apache.geode.security.ResourcePermission.Target;
-  @Override
-  public void authorize(final ResourceOperation resourceOperation) {
-    if (resourceOperation == null) {
-      return;
-    }
-
-    authorize(resourceOperation.resource().name(), resourceOperation.operation().name(), null);
-  }
-
-  @Override
-    authorize("CLUSTER", "MANAGE");
+    authorize(Resource.CLUSTER, Operation.MANAGE, Target.ALL, ResourcePermission.ALL);
-    authorize("CLUSTER", "WRITE");
+    authorize(Resource.CLUSTER, Operation.WRITE, Target.ALL, ResourcePermission.ALL);
-    authorize("CLUSTER", "READ");
+    authorize(Resource.CLUSTER, Operation.READ, Target.ALL, ResourcePermission.ALL);
-    authorize("DATA", "MANAGE");
+    authorize(Resource.DATA, Operation.MANAGE, Target.ALL, ResourcePermission.ALL);
-    authorize("DATA", "WRITE");
+    authorize(Resource.DATA, Operation.WRITE, Target.ALL, ResourcePermission.ALL);
-    authorize("DATA", "READ");
+    authorize(Resource.DATA, Operation.READ, Target.ALL, ResourcePermission.ALL);
+  }
+
+  @Override
+  public void authorizeDiskManage() {
+    authorize(Resource.CLUSTER, Operation.MANAGE, Target.DISK, ResourcePermission.ALL);
+  }
+
+  @Override
+  public void authorizeGatewayManage() {
+    authorize(Resource.CLUSTER, Operation.MANAGE, Target.GATEWAY, ResourcePermission.ALL);
+  }
+
+  @Override
+  public void authorizeJarManage() {
+    authorize(Resource.CLUSTER, Operation.MANAGE, Target.JAR, ResourcePermission.ALL);
+  }
+
+  @Override
+  public void authorizeQueryManage() {
+    authorize(Resource.CLUSTER, Operation.MANAGE, Target.QUERY, ResourcePermission.ALL);
-    authorize("DATA", "MANAGE", regionName);
+    authorize(Resource.DATA, Operation.MANAGE, regionName, ResourcePermission.ALL);
-    authorize("DATA", "MANAGE", regionName, key);
+    authorize(Resource.DATA, Operation.MANAGE, regionName, key);
-    authorize("DATA", "WRITE", regionName);
+    authorize(Resource.DATA, Operation.WRITE, regionName, ResourcePermission.ALL);
-    authorize("DATA", "WRITE", regionName, key);
+    authorize(Resource.DATA, Operation.WRITE, regionName, key);
-    authorize("DATA", "READ", regionName);
+    authorize(Resource.DATA, Operation.READ, regionName, ResourcePermission.ALL);
-    authorize("DATA", "READ", regionName, key);
+    authorize(Resource.DATA, Operation.READ, regionName, key);
-  @Override
-  public void authorize(final String resource, final String operation) {
-    authorize(resource, operation, null);
+  public void authorize(Resource resource, Operation operation, Target target, String key) {
+    authorize(resource, operation, target.getName(), key);
-  @Override
-  public void authorize(final String resource, final String operation, final String regionName) {
-    authorize(resource, operation, regionName, null);
+  public void authorize(Resource resource, Operation operation, Target target) {
+    authorize(resource, operation, target, ResourcePermission.ALL);
-  @Override
-  public void authorize(final String resource, final String operation, String regionName,
-      final String key) {
-    regionName = StringUtils.stripStart(regionName, "/");
-    authorize(new ResourcePermission(resource, operation, regionName, key));
+  public void authorize(Resource resource, Operation operation, String target, String key) {
+    authorize(new ResourcePermission(resource, operation, target, key));
-    Subject currentUser = getSubject();
-    if (currentUser == null) {
-      return;
-    }
+    // if currentUser is null, let it throw NPE, since in a EnabledSecurityService,
+    // user can not be null
+    Subject currentUser = getSubject();
+
