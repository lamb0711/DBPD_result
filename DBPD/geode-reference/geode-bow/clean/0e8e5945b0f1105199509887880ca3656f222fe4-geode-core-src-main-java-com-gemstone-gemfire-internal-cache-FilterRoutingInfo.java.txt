GEODE-1723 Merge from 82 for performance improvement.

Other improvement:We take lock on key while doing op on BucketRegion.
In that case we notify to other thread only when there is a thread
waiting for it. Modified one condition to log message to reduce garbage.

-        HeapDataOutputStream hdos = new HeapDataOutputStream(1000, null);
-        if (this.cqs == null) {
-          hdos.writeBoolean(false);
-        } else {
-          hdos.writeBoolean(true);
-          InternalDataSerializer.writeArrayLength(cqs.size(), hdos);
-          for (Iterator it=this.cqs.entrySet().iterator(); it.hasNext(); ) {
-            Map.Entry e = (Map.Entry)it.next();
-            // most cq IDs and all event types are small ints, so we use an optimized
-            // write that serializes 7 bits at a time in a compact form
-            InternalDataSerializer.writeUnsignedVL(((Long)e.getKey()).longValue(), hdos);
-            InternalDataSerializer.writeUnsignedVL(((Integer)e.getValue()).intValue(), hdos);
-          }
+      HeapDataOutputStream hdos;
+      int size = 9;
+      size += interestedClients == null ? 4 : interestedClients.size() * 8 + 5;
+      size += interestedClientsInv == null ? 4 : interestedClientsInv.size() * 8 + 5;
+      size += cqs == null ? 0 : cqs.size() * 12;
+      hdos = new HeapDataOutputStream(size, null);
+      if (this.cqs == null) {
+        hdos.writeBoolean(false);
+      } else {
+        hdos.writeBoolean(true);
+        InternalDataSerializer.writeArrayLength(cqs.size(), hdos);
+        for (Iterator it = this.cqs.entrySet().iterator(); it.hasNext();) {
+          Map.Entry e = (Map.Entry) it.next();
+          // most cq IDs and all event types are small ints, so we use an optimized
+          // write that serializes 7 bits at a time in a compact form
+          InternalDataSerializer.writeUnsignedVL(((Long) e.getKey()).longValue(), hdos);
+          InternalDataSerializer.writeUnsignedVL(((Integer) e.getValue()).intValue(), hdos);
-        InternalDataSerializer.writeSetOfLongs(this.interestedClients, this.longIDs, hdos);
-        InternalDataSerializer.writeSetOfLongs(this.interestedClientsInv, this.longIDs, hdos);
-        byte[] myData = hdos.toByteArray();
-        DataSerializer.writeByteArray(myData, out);
+      }
+      InternalDataSerializer.writeSetOfLongs(this.interestedClients, this.longIDs, hdos);
+      InternalDataSerializer.writeSetOfLongs(this.interestedClientsInv, this.longIDs, hdos);
+      byte[] myData = hdos.toByteArray();
+      DataSerializer.writeByteArray(myData, out);
