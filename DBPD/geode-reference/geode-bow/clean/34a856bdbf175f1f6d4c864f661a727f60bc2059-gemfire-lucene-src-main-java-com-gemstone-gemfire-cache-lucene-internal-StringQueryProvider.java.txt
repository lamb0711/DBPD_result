GEODE-11: Make StringQueryProvider DataSerializable

StringQueryProvider will be sent over wire and should be serialized efficiently
using DataSerializableFixedId

https://reviews.apache.org/r/38581/

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
-import org.apache.lucene.queryparser.classic.QueryParser;
+import com.gemstone.gemfire.DataSerializer;
+import com.gemstone.gemfire.internal.DataSerializableFixedID;
+import com.gemstone.gemfire.internal.Version;
-public class StringQueryProvider implements LuceneQueryProvider {
+/**
+ * Constructs a Lucene Query object by parsing a search string. The class uses {@link MultiFieldQueryParser}. It sets
+ * searchable fields in a {@link LuceneIndex} as default fields.
+ */
+public class StringQueryProvider implements LuceneQueryProvider, DataSerializableFixedID {
-  private Query luceneQuery;
-  
-  final QueryParser parser;
-  final String query;
+
+  // the following members hold input data and needs to be sent on wire
+  private String query;
+  private String indexName;
+  private String regionPath;
+
+  // the following members hold derived objects and need not be serialized
+  private Query luceneQuery;
+  private LuceneIndex index;
+
+  public StringQueryProvider() {
+    this(null);
+  }
-    String[] fields = null;
-    
+    this.index = index;
-      fields = index.getFieldNames();
+      this.indexName = index.getName();
+      this.regionPath = index.getRegionPath();
-    parser = new MultiFieldQueryParser(fields, new SimpleAnalyzer());
-  
+
+      String[] fields = null;
+      if (index != null) {
+        fields = index.getFieldNames();
+      } else {
+        // TODO get index from lucene query service
+      }
+
+      MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new SimpleAnalyzer());
+
+  /**
+   * @return the query string used to construct this query provider
+   */
+  public String getQueryString() {
+    return query;
+  }
+
+  /**
+   * @return name of the index on which this query will be executed
+   */
+  public String getIndexName() {
+    return indexName;
+  }
+
+  /**
+   * @return path of the region on which this query will be executed
+   */
+  public String getRegionPath() {
+    return regionPath;
+  }
+
+  @Override
+  public Version[] getSerializationVersions() {
+    return null;
+  }
+
+  @Override
+  public int getDSFID() {
+    return LUCENE_STRING_QUERY_PROVIDER;
+  }
+
+  @Override
+  public void toData(DataOutput out) throws IOException {
+    DataSerializer.writeString(query, out);
+    DataSerializer.writeString(index.getName(), out);
+    DataSerializer.writeString(index.getRegionPath(), out);
+  }
+
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    query = DataSerializer.readString(in);
+    this.indexName = DataSerializer.readString(in);
+    this.regionPath = DataSerializer.readString(in);
+  }
