Merge branch 'release/1.3.0'

-import static org.apache.geode.internal.lang.SystemUtils.*;
+import static org.apache.geode.internal.lang.SystemUtils.getLineSeparator;
-import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.internal.cache.BackupManager;
-import org.apache.geode.internal.cache.persistence.BackupManager;
-import org.apache.geode.management.DependenciesNotFoundException;
-import org.apache.geode.management.cli.CommandService;
-import org.apache.geode.management.cli.CommandServiceException;
-import org.apache.geode.management.internal.cli.remote.CommandExecutionContext;
-import org.apache.geode.management.internal.cli.remote.MemberCommandService;
+import org.apache.geode.management.internal.cli.remote.OnlineCommandProcessor;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.shell.Gfsh;
-  private CommandService commandService;
+  private OnlineCommandProcessor commandProcessor;
-      this.commandService = CommandService.createLocalCommandService(cache);
-    } catch (CacheClosedException e) {
+      this.commandProcessor =
+          new OnlineCommandProcessor(system.getProperties(), cache.getSecurityService());
+    } catch (Exception e) {
-      // LOG:CONFIG:
-      logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage());
-    } catch (CommandServiceException e) {
-      commandServiceInitError = e.getMessage();
-      // LOG:CONFIG:
-      logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage());
-    } catch (DependenciesNotFoundException e) {
-      commandServiceInitError = e.getMessage();
-      // log as error for dedicated cache server - launched through script
-      // LOG:CONFIG:
-      logger.info(LogMarker.CONFIG, "Command Service could not be initialized. {}", e.getMessage());
+      logger.info(LogMarker.CONFIG, "Command processor could not be initialized. {}",
+          e.getMessage());
-          existingDataStores = manager.prepareBackup();
+          existingDataStores = manager.prepareForBackup();
-          successfulDataStores = manager.finishBackup(targetDir, null/* TODO rishi */, abort);
+          successfulDataStores = manager.doBackup(targetDir, null/* TODO rishi */, abort);
-  public int getInitialImagesInProgres() {
+  public int getInitialImagesInProgress() {
-  public String processCommand(String commandString, Map<String, String> env) {
-    if (commandService == null) {
+  public String processCommand(String commandString, Map<String, String> env, byte[][] binaryData) {
+    if (commandProcessor == null) {
-    boolean isGfshRequest = isGfshRequest(env);
-    if (isGfshRequest) {
-      CommandExecutionContext.setShellRequest();
-    }
-
-    Result result = ((MemberCommandService) commandService).processCommand(commandString, env);
-    if (!(result instanceof CommandResult)) {// TODO - Abhishek - Shouldn't be needed
-      while (result.hasNextLine()) {
-        result = ResultBuilder.createInfoResult(result.nextLine());
-      }
-    }
-
-    if (isGfshRequest) {
-      return CommandResponseBuilder.createCommandResponseJson(getMember(), (CommandResult) result);
-    } else {
-      return ResultBuilder.resultAsString(result);
-    }
-  }
-
-  private boolean isGfshRequest(Map<String, String> env) {
-    String appName = null;
-    if (env != null) {
-      appName = env.get(Gfsh.ENV_APP_NAME);
-    }
-
-    return Gfsh.GFSH_APP_NAME.equals(appName);
+    Result result = commandProcessor.executeCommand(commandString, env, binaryData);
+    return CommandResponseBuilder.createCommandResponseJson(getMember(), (CommandResult) result);
