Merge branch 'feature/GEODE-8' into develop

+import java.util.Arrays;
+
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ABSTRACT_REGION_ENTRY_FILL_IN_VALUE;
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE;
+import com.gemstone.gemfire.internal.cache.wan.GatewaySenderEventImpl;
+import com.gemstone.gemfire.internal.offheap.MemoryAllocator;
+import com.gemstone.gemfire.internal.offheap.OffHeapCachedDeserializable;
+import com.gemstone.gemfire.internal.offheap.OffHeapHelper;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.Chunk;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.ChunkType;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.GemFireChunk;
+import com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.GemFireChunkType;
+import com.gemstone.gemfire.internal.offheap.StoredObject;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
-
+import com.gemstone.gemfire.pdx.internal.ConvertableToBytes;
+import com.gemstone.gemfire.pdx.internal.PdxInstanceImpl;
+  protected static final long MARKED_FOR_EVICTION = 0x80L<<56;
-  protected AbstractRegionEntry(RegionEntryContext context, Object value) {
-    setValue(context,AbstractRegionMap.prepareValueForCache(context, value),false);
+  protected AbstractRegionEntry(RegionEntryContext context,
+      @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE) Object value) {
+    
+    setValue(context,this.prepareValueForCache(context, value, false),false);
-      if (isRemoved() && !isTombstone()) {
+      if (isRemoved() && !isTombstone() && !event.isEvicted()) {
-  public void setValueWithTombstoneCheck(Object v, EntryEvent e) throws RegionClearedException {
+  public void setValueWithTombstoneCheck(@Unretained Object v, EntryEvent e) throws RegionClearedException {
-  // RegionEntry.fillInValue(...)
-                             InitialImageOperation.Entry dst,
+                             @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) InitialImageOperation.Entry dst,
-    final Object v;
+    @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) final Object v;
-      {
-        Object tmp = ((CachedDeserializable)v).getValue();
-        if (tmp instanceof byte[]) {
-          byte[] bb = (byte[])tmp;
-          dst.value = bb;
-        }
-        else if (isEagerDeserialize && tmp instanceof byte[][]) {
-          // optimize for byte[][] since it will need to be eagerly deserialized
-          // for SQLFabric
-          dst.value = tmp;
-          dst.setEagerDeserialize();
-        }
-        else {
-          try {
-            HeapDataOutputStream hdos = new HeapDataOutputStream(Version.CURRENT);
-            BlobHelper.serializeTo(tmp, hdos);
-            hdos.trim();
-            dst.value = hdos;
-          } catch (IOException e) {
-            RuntimeException e2 = new IllegalArgumentException(LocalizedStrings.AbstractRegionEntry_AN_IOEXCEPTION_WAS_THROWN_WHILE_SERIALIZING.toLocalizedString());
-            e2.initCause(e);
-            throw e2;
+//      if(v instanceof ByteSource && CachedDeserializableFactory.preferObject()) {
+//        // For SQLFire we prefer eager deserialized
+//        dst.setEagerDeserialize();         
+//      }
+      
+      if (v instanceof StoredObject && !((StoredObject) v).isSerialized()) {
+        dst.value = ((StoredObject) v).getDeserializedForReading();
+      } else {
+        /*if (v instanceof ByteSource && CachedDeserializableFactory.preferObject()) {
+          dst.value = v;
+        } else */ {
+          Object tmp = ((CachedDeserializable) v).getValue();
+          if (tmp instanceof byte[]) {
+            byte[] bb = (byte[]) tmp;
+            dst.value = bb;
+          } else {
+            try {
+              HeapDataOutputStream hdos = new HeapDataOutputStream(
+                  Version.CURRENT);
+              BlobHelper.serializeTo(tmp, hdos);
+              hdos.trim();
+              dst.value = hdos;
+            } catch (IOException e) {
+              RuntimeException e2 = new IllegalArgumentException(
+                  LocalizedStrings.AbstractRegionEntry_AN_IOEXCEPTION_WAS_THROWN_WHILE_SERIALIZING
+                      .toLocalizedString());
+              e2.initCause(e);
+              throw e2;
+            }
+          dst.setSerialized(true);
-        dst.setSerialized(true);
-    else if (isEagerDeserialize && v instanceof byte[][]) {
-      // optimize for byte[][] since it will need to be eagerly deserialized
-      // for SQLFabric
-      dst.value = v;
+    else { 
+      Object preparedValue = v;
+      if (preparedValue != null) {
+        preparedValue = prepareValueForGII(preparedValue);
+        if (preparedValue == null) {
+          return false;
+        }
+      }
+    if (CachedDeserializableFactory.preferObject()) {
+      dst.value = preparedValue;
-        BlobHelper.serializeTo(v, hdos);
+        BlobHelper.serializeTo(preparedValue, hdos);
+    }
+  /**
+   * To fix bug 49901 if v is a GatewaySenderEventImpl then make
+   * a heap copy of it if it is offheap.
+   * @return the value to provide to the gii request; null if no value should be provided.
+   */
+  public static Object prepareValueForGII(Object v) {
+    assert v != null;
+    if (v instanceof GatewaySenderEventImpl) {
+      return ((GatewaySenderEventImpl) v).makeHeapCopyIfOffHeap();
+    } else {
+      return v;
+    }
+  }
+  
-    Object result = _getValueUse(context, true);
+    SimpleMemoryAllocatorImpl.createReferenceCountOwner();
+    @Retained Object result = _getValueRetain(context, true);
+      SimpleMemoryAllocatorImpl.setReferenceCountOwner(null);
+      return null;
+    } else {
+      result = OffHeapHelper.copyAndReleaseIfNeeded(result); // sqlf does not dec ref count in this call
+      SimpleMemoryAllocatorImpl.setReferenceCountOwner(null);
+      setRecentlyUsed();
+      return result;
+    }
+  }
+  
+  @Override
+  @Retained
+  public Object getValueRetain(RegionEntryContext context) {
+    @Retained Object result = _getValueRetain(context, true);
+    if (Token.isRemoved(result)) {
-  public void setValue(RegionEntryContext context, Object value) throws RegionClearedException {
+  @Released
+  public void setValue(RegionEntryContext context, @Unretained Object value) throws RegionClearedException {
-  protected void setValue(RegionEntryContext context, Object value, boolean recentlyUsed) {
-    // value = compress(context,value); // compress is now called in AbstractRegionMap.prepareValueForCache
-    
+  @Released
+  protected void setValue(RegionEntryContext context, @Unretained Object value, boolean recentlyUsed) {
+    if (value != null && context != null && (this instanceof OffHeapRegionEntry) 
+        && context instanceof LocalRegion && ((LocalRegion)context).isThisRegionBeingClosedOrDestroyed()) {
+      ((OffHeapRegionEntry)this).release();
+      ((LocalRegion)context).checkReadiness();
+    }
+  private static byte[] compressBytes(RegionEntryContext context, byte[] uncompressedBytes) {
+    byte[] result = uncompressedBytes;
+    if (isCompressible(context, uncompressedBytes)) {
+      long time = context.getCachePerfStats().startCompression();
+      result = context.getCompressor().compress(uncompressedBytes);
+      context.getCachePerfStats().endCompression(time, uncompressedBytes.length, result.length);
+    }
+    return result;
+  }
+  
+  
+  @Retained
-    Object v = _getValueUse(context, true);
+    SimpleMemoryAllocatorImpl.createReferenceCountOwner();
+    @Retained Object v = _getValueRetain(context, true);
-    return v;
+    @Retained Object result = OffHeapHelper.copyAndReleaseIfNeeded(v); // TODO OFFHEAP keep it offheap?
+    SimpleMemoryAllocatorImpl.setReferenceCountOwner(null);
+    return result;
+  @Retained
+  
+  @Retained
-    return _getValueUse(owner, true);
+    @Retained Object result = _getValueRetain(owner, true);
+//    if (result instanceof ByteSource) {
+//      // If the ByteSource contains a Delta or ListOfDelta then we want to deserialize it
+//      Object deserVal = ((CachedDeserializable)result).getDeserializedForReading();
+//      if (deserVal != result) {
+//        OffHeapHelper.release(result);
+//        result = deserVal;
+//      }
+//    }
+    return result;
-          final Object oldValue = getValueInVM(region); // Heap value should always be deserialized at this point // OFFHEAP will not be deserialized
+          @Retained @Released final Object oldValue = getValueInVM(region); // Heap value should always be deserialized at this point // OFFHEAP will not be deserialized
+          try {
+          } finally {
+            OffHeapHelper.release(oldValue);
+          }
-        setValue(region, AbstractRegionMap.prepareValueForCache(region, newValueToWrite));
+        setValue(region, this.prepareValueForCache(region, newValueToWrite, false));
+  @Released
-                            Object expectedOldValue,
+                            @Unretained Object expectedOldValue,
-    Object curValue = _getValueUse(region, true);
+    SimpleMemoryAllocatorImpl.skipRefCountTracking();
+    @Retained @Released Object curValue = _getValueRetain(region, true);
+    SimpleMemoryAllocatorImpl.unskipRefCountTracking();
+    try {
-      if (!checkExpectedOldValue(expectedOldValue, curValue)) {
+      if (!checkExpectedOldValue(expectedOldValue, curValue, region)) {
-      proceed = event.setOldValue(curValue) || removeRecoveredEntry
+      proceed = event.setOldValue(curValue, curValue instanceof GatewaySenderEventImpl) || removeRecoveredEntry
+    } finally {
+      OffHeapHelper.releaseWithNoTracking(curValue);
+    }
-              _setValue(AbstractRegionMap.prepareValueForCache(region, getValueInVMOrDiskWithoutFaultIn(region)));
+              @Released Object value = getValueOffHeapOrDiskWithoutFaultIn(region);
+              try {
+              _setValue(prepareValueForCache(region, value, false));
+              if (value != null && region != null && (this instanceof OffHeapRegionEntry) && region.isThisRegionBeingClosedOrDestroyed()) {
+                ((OffHeapRegionEntry)this).release();
+                region.checkReadiness();
+              }
+              } finally {
+                OffHeapHelper.release(value);
+              }
-      if (removeEntry) {
+      // See #47887, we do not insert a tombstone for evicted HDFS
+      // entries since the value is still present in HDFS
+      // Check if we have to evict or just do destroy.
+      boolean forceRemoveEntry = 
+          (event.isEviction() || event.isExpiration()) 
+          && event.getRegion().isUsedForPartitionedRegionBucket()
+          && event.getRegion().getPartitionedRegion().isHDFSRegion();
+
+      if (removeEntry || forceRemoveEntry) {
-        if(inTokenMode) {
+        if(inTokenMode && !event.getOperation().isEviction()) {
+  
+ 
-  static boolean checkExpectedOldValue(Object expectedOldValue, Object actualValue) {
+  static boolean checkExpectedOldValue(@Unretained Object expectedOldValue, @Unretained Object actualValue, LocalRegion lr) {
-      return checkEquals(expectedOldValue, actualValue);
+      boolean isCompressedOffHeap = lr.getAttributes().getOffHeap() && lr.getAttributes().getCompressor() != null;
+      return checkEquals(expectedOldValue, actualValue, isCompressedOffHeap);
-  static boolean checkEquals(Object v1, Object v2) {
+  private static boolean basicEquals(Object v1, Object v2) {
+    if (v2 != null) {
+      if (v2.getClass().isArray()) {
+        // fix for 52093
+        if (v2 instanceof byte[]) {
+          if (v1 instanceof byte[]) {
+            return Arrays.equals((byte[])v2, (byte[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof Object[]) {
+          if (v1 instanceof Object[]) {
+            return Arrays.deepEquals((Object[])v2, (Object[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof int[]) {
+          if (v1 instanceof int[]) {
+            return Arrays.equals((int[])v2, (int[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof long[]) {
+          if (v1 instanceof long[]) {
+            return Arrays.equals((long[])v2, (long[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof boolean[]) {
+          if (v1 instanceof boolean[]) {
+            return Arrays.equals((boolean[])v2, (boolean[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof short[]) {
+          if (v1 instanceof short[]) {
+            return Arrays.equals((short[])v2, (short[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof char[]) {
+          if (v1 instanceof char[]) {
+            return Arrays.equals((char[])v2, (char[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof float[]) {
+          if (v1 instanceof float[]) {
+            return Arrays.equals((float[])v2, (float[])v1);
+          } else {
+            return false;
+          }
+        } else if (v2 instanceof double[]) {
+          if (v1 instanceof double[]) {
+            return Arrays.equals((double[])v2, (double[])v1);
+          } else {
+            return false;
+          }
+        }
+        // fall through and call equals method
+      }
+      return v2.equals(v1);
+    } else {
+      return v1 == null;
+    }
+  }
+  
+  static boolean checkEquals(@Unretained Object v1, @Unretained Object v2, boolean isCompressedOffHeap) {
+    } else if (v1 instanceof OffHeapCachedDeserializable) {
+      return checkOffHeapEquals((OffHeapCachedDeserializable)v1, v2);
+    } else if (v2 instanceof OffHeapCachedDeserializable) {
+      return checkOffHeapEquals((OffHeapCachedDeserializable)v2, v1);
-      return checkCDEquals((CachedDeserializable)v1, v2);
+      return checkCDEquals((CachedDeserializable)v1, v2, isCompressedOffHeap);
-      return checkCDEquals((CachedDeserializable)v2, v1);
+      return checkCDEquals((CachedDeserializable)v2, v1, isCompressedOffHeap);
-      if (v2 != null) {
-        return v2.equals(v1);
+      return basicEquals(v1, v2);
+    }
+  }
+  private static boolean checkOffHeapEquals(@Unretained OffHeapCachedDeserializable cd, @Unretained Object obj) {
+    if (cd.isSerializedPdxInstance()) {
+      PdxInstance pi = InternalDataSerializer.readPdxInstance(cd.getSerializedValue(), GemFireCacheImpl.getForPdx("Could not check value equality"));
+      return checkPdxEquals(pi, obj);
+    }
+    if (obj instanceof OffHeapCachedDeserializable) {
+      return cd.checkDataEquals((OffHeapCachedDeserializable)obj);
+    } else {
+      byte[] serializedObj;
+      if (obj instanceof CachedDeserializable) {
+        if (!cd.isSerialized()) {
+          if (obj instanceof StoredObject && !((StoredObject) obj).isSerialized()) {
+            // both are byte[]
+            // obj must be DataAsAddress since it was not OffHeapCachedDeserializable
+            // so its byte[] will be small.
+            byte[] objBytes = (byte[]) ((StoredObject) obj).getDeserializedForReading();
+            return cd.checkDataEquals(objBytes);
+          } else {
+            return false;
+          }
+        }
+        serializedObj = ((CachedDeserializable) obj).getSerializedValue();
+      } else if (obj instanceof byte[]) {
+        if (cd.isSerialized()) {
+          return false;
+        }
+        serializedObj = (byte[]) obj;
-        return v1 == null;
+        if (!cd.isSerialized()) {
+          return false;
+        }
+        if (obj == null || obj == Token.NOT_AVAILABLE
+            || Token.isInvalidOrRemoved(obj)) {
+          return false;
+        }
+        serializedObj = EntryEventImpl.serialize(obj);
+      return cd.checkDataEquals(serializedObj);
-  private static boolean checkCDEquals(CachedDeserializable cd, Object obj) {
+  private static boolean checkCDEquals(CachedDeserializable cd, Object obj, boolean isCompressedOffHeap) {
+    if (cd instanceof StoredObject && !((StoredObject) cd).isSerialized()) {
+      // cd is an actual byte[].
+      byte[] ba2;
+      if (obj instanceof StoredObject) {
+        if (!((StoredObject) obj).isSerialized()) {
+          return false;
+        }
+        ba2 = (byte[]) ((StoredObject) obj).getDeserializedForReading();
+      } else if (obj instanceof byte[]) {
+        ba2 = (byte[]) obj;
+      } else {
+        return false;
+      }
+      byte[] ba1 = (byte[]) cd.getDeserializedForReading();
+      return Arrays.equals(ba1, ba2);
+    }
-      //byte[] serializedObj;
-      /**
-       * To be more compatible with previous releases do not compare the serialized forms here.
-       * Instead deserialize and call the equals method.
-       */
+      if (isCompressedOffHeap) { // fix for bug 52248
+        byte[] serializedObj;
+        if (obj instanceof CachedDeserializable) {
+          serializedObj = ((CachedDeserializable) obj).getSerializedValue();
+        } else {
+          serializedObj = EntryEventImpl.serialize(obj); 
+        }
+        return Arrays.equals(cdValBytes, serializedObj); 
+      } else {
+        /**
+         * To be more compatible with previous releases do not compare the serialized forms here.
+         * Instead deserialize and call the equals method.
+         */
-        //serializedObj = ((CachedDeserializable) obj).getSerializedValue();
-        //serializedObj = EntryEventImpl.serialize(obj);
-      return cd.getDeserializedForReading().equals(deserializedObj);
+      return basicEquals(deserializedObj, cd.getDeserializedForReading());
+      }
+//          SimpleMemoryAllocatorImpl.debugLog("checkCDEquals o1=<" + o1 + "> o2=<" + o2 + ">", false);
+//          if (o1.equals(o2)) {
+//            SimpleMemoryAllocatorImpl.debugLog("they are equal! a1=<" + Arrays.toString((byte[])cdVal) + "> a2=<" + Arrays.toString(serializedObj) + ">", false);
+//          }
-      return cdVal.equals(obj);
+      return basicEquals(cdVal, obj);
+        if (obj instanceof StoredObject && !((StoredObject) obj).isSerialized()) {
+          // obj is actually a byte[] which will never be equal to a PdxInstance
+          return false;
+        }
-    return obj.equals(pdx);
+    return basicEquals(obj, pdx);
+  protected static boolean okToStoreOffHeap(Object v, AbstractRegionEntry e) {
+    if (v == null) return false;
+    if (Token.isInvalidOrRemoved(v)) return false;
+    if (v == Token.NOT_AVAILABLE) return false;
+    if (v instanceof DiskEntry.RecoveredEntry) return false; // The disk layer has special logic that ends up storing the nested value in the RecoveredEntry off heap
+    if (!(e instanceof OffHeapRegionEntry)) return false;
+    // TODO should we check for deltas here or is that a user error?
+    return true;
+  }
+
+  @Override
+  @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE)
+  public  Object prepareValueForCache(RegionEntryContext r,
+      @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE) Object val,
+      boolean isEntryUpdate) {
+    return prepareValueForCache(r, val, null, isEntryUpdate);
+  }
+
+  @Override
+  @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE)
+  public  Object prepareValueForCache(RegionEntryContext r,
+      @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE) Object val,
+      EntryEventImpl event, boolean isEntryUpdate) {
+    if (r != null && r.getOffHeap() && okToStoreOffHeap(val, this)) {
+      if (val instanceof StoredObject) {
+        // Check to see if val has the same compression settings as this region.
+        // The recursive calls in this section are safe because
+        // we only do it after copy the off-heap value to the heap.
+        // This is needed to fix bug 52057.
+        StoredObject soVal = (StoredObject) val;
+        assert !soVal.isCompressed();
+        if (r.getCompressor() != null) {
+          // val is uncompressed and we need a compressed value.
+          // So copy the off-heap value to the heap in a form that can be compressed.
+          byte[] valAsBytes = soVal.getValueAsHeapByteArray();
+          Object heapValue;
+          if (soVal.isSerialized()) {
+            heapValue = CachedDeserializableFactory.create(valAsBytes);
+          } else {
+            heapValue = valAsBytes;
+          }
+          return prepareValueForCache(r, heapValue, event, isEntryUpdate);
+        }
+        if (val instanceof Chunk) {
+          // if the reused guy has a refcount then need to inc it
+          if (!((Chunk)val).retain()) {
+            throw new IllegalStateException("Could not use an off heap value because it was freed");
+          }
+        }
+        // else it is DataAsAddress. This code just returns it as prepared.
+        // TODO OFFHEAP: Review the callers to see if they will handle DataAsAddress correctly.
+      } else {
+        byte[] data;
+        boolean isSerialized = !(val instanceof byte[]);
+        if (isSerialized) {
+          if (event != null && event.getCachedSerializedNewValue() != null) {
+            data = event.getCachedSerializedNewValue();
+          } else if (val instanceof CachedDeserializable) {
+            data = ((CachedDeserializable)val).getSerializedValue();
+            // TODO OFFHEAP: cache data in event?
+          } else if (val instanceof PdxInstance) {
+            try {
+              data = ((ConvertableToBytes)val).toBytes();
+              // TODO OFFHEAP: cache data in event?
+            } catch (IOException e) {
+              throw new PdxSerializationException("Could not convert " + val + " to bytes", e);
+            }
+          } else {
+            data = EntryEventImpl.serialize(val);
+            // TODO OFFHEAP: cache data in event?
+          }
+        } else {
+          data = (byte[]) val;
+        }
+        byte[] compressedData = compressBytes(r, data);
+        boolean isCompressed = compressedData != data;
+        SimpleMemoryAllocatorImpl.setReferenceCountOwner(this);
+        MemoryAllocator ma = SimpleMemoryAllocatorImpl.getAllocator(); // fix for bug 47875
+        val = ma.allocateAndInitialize(compressedData, isSerialized, isCompressed, GemFireChunk.TYPE); // TODO:KIRK:48068 race happens right after this line
+        SimpleMemoryAllocatorImpl.setReferenceCountOwner(null);
+        if (val instanceof GemFireChunk) {
+          val = new com.gemstone.gemfire.internal.offheap.SimpleMemoryAllocatorImpl.ChunkWithHeapForm((GemFireChunk)val, data);
+        }
+//        if (val instanceof Chunk && r instanceof LocalRegion) {
+//          Chunk c = (Chunk) val;
+//          LocalRegion lr = (LocalRegion) r;
+//          SimpleMemoryAllocatorImpl.debugLog("allocated @" + Long.toHexString(c.getMemoryAddress()) + " reg=" + lr.getFullPath(), false);
+//        }
+      }
+      return val;
+    }
+    @Unretained Object nv = val;
+    if (nv instanceof StoredObject) {
+      // This off heap value is being put into a on heap region.
+      byte[] data = ((StoredObject) nv).getSerializedValue();
+      nv = CachedDeserializableFactory.create(data);
+    }
+    // don't bother checking for SQLFire
+    if (!GemFireCacheImpl.sqlfSystem() && nv instanceof PdxInstanceImpl) {
+      // We do not want to put PDXs in the cache as values.
+      // So get the serialized bytes and use a CachedDeserializable.
+      try {
+        byte[] data = ((ConvertableToBytes)nv).toBytes();
+        byte[] compressedData = compressBytes(r, data);
+        if (data == compressedData) {
+          nv = CachedDeserializableFactory.create(data);
+        } else {
+          nv = compressedData;
+        }
+      } catch (IOException e) {
+        throw new PdxSerializationException("Could not convert " + nv + " to bytes", e);
+      }
+    } else {
+      nv = compress(r, nv, event);
+    }
+    return nv;
+  }
+  
+  @Override
+  @Unretained
+  public final Object _getValue() {
+    return getValueField();
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public final boolean isMarkedForEviction() {
+    return areAnyBitsSet(MARKED_FOR_EVICTION);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public final void setMarkedForEviction() {
+    setBits(MARKED_FOR_EVICTION);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public final void clearMarkedForEviction() {
+    clearBits(~MARKED_FOR_EVICTION);
+  }
-    areSetValue(val);
+    setValueField(val);
-  public final Object _getValue() {
-    return areGetValue();
-  }
-  @Override
-    Object v = areGetValue();
+    Object v = getValueField();
-  protected abstract Object areGetValue();
-  protected abstract void areSetValue(Object v);
+  /**
+   * Reads the value of this region entry.
+   * Provides low level access to the value field.
+   * @return possible OFF_HEAP_OBJECT (caller uses region entry reference)
+   */
+  @Unretained
+  protected abstract Object getValueField();
+  /**
+   * Set the value of this region entry.
+   * Provides low level access to the value field.
+   * @param v the new value to set
+   */
+  protected abstract void setValueField(@Unretained Object v);
+  @Retained
-    return _getValueUse(null, false);
+    return _getValueRetain(null, false);
-        tag.setRegionVersion(region.getVersionVector().getNextVersion());
+        // Use region version if already provided, else generate
+        long nextRegionVersion = event.getNextRegionVersion();
+        if (nextRegionVersion != -1) {
+          // Set on the tag and record it locally
+          tag.setRegionVersion(nextRegionVersion);
+          RegionVersionVector rvv = region.getVersionVector();
+          rvv.recordVersion(rvv.getOwnerId(),nextRegionVersion);
+          if (logger.isDebugEnabled()) {
+            logger.debug("recorded region version {}; region={}", nextRegionVersion, region.getFullPath());
+          }
+        } else {
+          tag.setRegionVersion(region.getVersionVector().getNextVersion());  
+        }
-        logger.debug("generated tag {}; region={}; rvv={}", tag, region.getFullPath(), region.getVersionVector());
+        logger.debug("generated tag {}; key={}; oldvalue={} newvalue={} client={} region={}; rvv={}", tag,
+            event.getKey(), event.getOldValue(), event.getNewValue(),
+            (event.getContext() == null? "none" : event.getContext().getDistributedMember().getName()),
+            region.getFullPath(), region.getVersionVector());
+      } finally {
+        timestampedEvent.release();
+  /**
+   * This is only retained in off-heap subclasses.  However, it's marked as
+   * Retained here so that callers are aware that the value may be retained.
+   */
-  public Object _getValueUse(RegionEntryContext context, boolean decompress) {
+  @Retained 
+  public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
