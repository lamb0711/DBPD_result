GEODE-5420: Protect events in HAContainer from premature modification

- Updated putInProgress boolean in HAWrapper to a counter to prevent prematurely setting ClientUpdateMessage to null when events are temporarily queued during a GII or message dispatcher initialization
- decAndRemoveFromHAContainer only removes when putInProgress counter and ref count are 0
- Refactored putEventInHARegion/putConditionallyInHAContainer to prevent overwriting an existing entry in the HAContainer.  Also reduces simplifies the code and reduces duplicated logic.
- Wrote missing basic HARegionQueue unit/integration tests, and an integration test to capture setting the ClientUpdateMessage property on HAEventWrapper to null prematurely
- Added new event tracing messages at debug logging level to help track similar issues in the future

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Lynn Hughes-Godfrey <lhughesgodfrey@pivotal.io>

-   * If true, the entry containing this HAEventWrapper instance will not be removed from the
-   * haContainer, even if the referenceCount value is zero.
+   * If greater than zero, the entry containing this HAEventWrapper instance will not be removed
+   * from the haContainer, even if the referenceCount value is zero.
-  private transient boolean putInProgress = false;
-
-  /**
-   * A value true indicates that this instance is not used in the <code>haContainer</code>. So any
-   * changes in this instance will not be visible to the <code>haContainer</code>.
-   */
-  private transient boolean isRefFromHAContainer = false;
+  @SuppressWarnings("unused")
+  private transient volatile long putInProgressCount;
+  private static final AtomicLongFieldUpdater<HAEventWrapper> putInProgressCountUpdater =
+      AtomicLongFieldUpdater.newUpdater(HAEventWrapper.class, "putInProgressCount");
+    putInProgressCountUpdater.set(this, 0);
+    putInProgressCountUpdater.set(this, 0);
-  public void setPutInProgress(boolean inProgress) {
-    this.putInProgress = inProgress;
-  }
-
-  public boolean getPutInProgress() {
-    return this.putInProgress;
-  }
-
-  public void setIsRefFromHAContainer(boolean bool) {
-    this.isRefFromHAContainer = bool;
-  }
-
-  public boolean getIsRefFromHAContainer() {
-    return this.isRefFromHAContainer;
-  }
-
-      return "HAEventWrapper[refCount=" + getReferenceCount() + "; msg=" + this.clientUpdateMessage
-          + "]";
+      return "HAEventWrapper[refCount=" + getReferenceCount() + "; putInProgress="
+          + putInProgressCountUpdater.get(this) + "; msg=" + this.clientUpdateMessage + "]";
-          + "; refCount=" + getReferenceCount() + "; inContainer=" + this.isRefFromHAContainer
-          + "; putInProgress=" + this.putInProgress + "; event=" + this.eventIdentifier
+          + "; refCount=" + getReferenceCount()
+          + "; putInProgress=" + putInProgressCountUpdater.get(this) + "; event="
+          + this.eventIdentifier
+  public long incrementPutInProgressCounter() {
+    return putInProgressCountUpdater.incrementAndGet(this);
+  }
+
+  public long decrementPutInProgressCounter() {
+    synchronized (this) {
+      long putInProgressCounter = putInProgressCountUpdater.decrementAndGet(this);
+
+      if (logger.isDebugEnabled()) {
+        logger.debug("Decremented PutInProgressCounter on HAEventWrapper with Event ID hash code: "
+            + hashCode() + "; System ID hash code: "
+            + System.identityHashCode(this) + "; Wrapper details: " + toString());
+      }
+
+      if (putInProgressCounter == 0L) {
+        if (logger.isDebugEnabled()) {
+          logger.debug("Setting HAEventWrapper ClientUpdateMessage to null.  Event ID hash code: "
+              + hashCode()
+              + "; System ID hash code: " + System.identityHashCode(this) + "; Wrapper details: "
+              + toString());
+        }
+        setClientUpdateMessage(null);
+      }
+
+      return putInProgressCounter;
+    }
+  }
+
+  public boolean getPutInProgress() {
+    return putInProgressCountUpdater.get(this) > 0;
+  }
