Merge branch 'release/1.5.0'

+import static org.assertj.core.api.Assertions.assertThat;
-  private static InternalCache cache;
+  private static volatile InternalCache cache;
+  public CacheRule() {
+    this(new Builder());
+  }
+
-    this.createCacheInAll = builder.createCacheInAll;
-    this.createCache = builder.createCache;
-    this.disconnectAfter = builder.disconnectAfter;
-    this.createCacheInVMs = builder.createCacheInVMs;
-    this.config = builder.config;
-    this.systemProperties = builder.systemProperties;
+    createCacheInAll = builder.createCacheInAll;
+    createCache = builder.createCache;
+    disconnectAfter = builder.disconnectAfter;
+    createCacheInVMs = builder.createCacheInVMs;
+    config = builder.config;
+    systemProperties = builder.systemProperties;
-  private static void createCache(final Properties config, final Properties systemProperties) {
+  public void createCache() {
+    cache = (InternalCache) new CacheFactory(config).create();
+  }
+
+  public void createCache(final Properties config) {
+    cache = (InternalCache) new CacheFactory(config).create();
+  }
+
+  public void createCache(final Properties config, final Properties systemProperties) {
+  public InternalCache getOrCreateCache() {
+    if (cache == null) {
+      createCache();
+      assertThat(cache).isNotNull();
+    }
+    return cache;
+  }
+
-     * Create Cache in every VM including controller and all DUnit VMs
+     * Create Cache in every VM including controller and all DUnit VMs. Default is false.
-     * Create Cache in specified VM
+     * Create Cache in specified VM. Default is none.
-     * Create Cache in local JVM (controller)
+     * Create Cache in local JVM (controller). Default is false.
+     * Default is false.
-      this.config.put(key, value);
+      config.put(key, value);
-      this.systemProperties.put(key, value);
+      systemProperties.put(key, value);
-      this.systemProperties.putAll(config);
+      systemProperties.putAll(config);
