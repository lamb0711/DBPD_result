Merge branch 'release/1.4.0'

+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.X509TrustManager;
+
+import org.apache.http.client.protocol.HttpClientContext;
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
+import org.apache.http.impl.client.HttpClientBuilder;
+import org.apache.geode.internal.net.SocketCreatorFactory;
+import org.apache.geode.internal.security.SecurableCommunicationChannel;
+
+  private boolean useSSL;
+  public HttpClientRule withSSL() {
+    this.useSSL = true;
+    return this;
+  }
+
-    host = new HttpHost(hostName, portSupplier.get());
-    httpClient = HttpClients.createDefault();
+    host = new HttpHost(hostName, portSupplier.get(), useSSL ? "https" : "http");
+    if (useSSL) {
+      HttpClientBuilder clientBuilder = HttpClients.custom();
+      SSLContext ctx = SocketCreatorFactory
+          .getSocketCreatorForComponent(SecurableCommunicationChannel.WEB).getSslContext();
+      clientBuilder.setSSLContext(ctx);
+      clientBuilder.setSSLHostnameVerifier(new NoopHostnameVerifier());
+      httpClient = clientBuilder.build();
+    } else {
+      httpClient = HttpClients.createDefault();
+    }
+  }
+
+  private static class DefaultTrustManager implements X509TrustManager {
+
+    @Override
+    public void checkClientTrusted(X509Certificate[] arg0, String arg1)
+        throws CertificateException {}
+
+    @Override
+    public void checkServerTrusted(X509Certificate[] arg0, String arg1)
+        throws CertificateException {}
+
+    @Override
+    public X509Certificate[] getAcceptedIssuers() {
+      return null;
+    }
+  public HttpResponse logoutFromPulse() throws Exception {
+    return get("/pulse/clusterLogout");
+  }
+
-    return httpClient.execute(host, buildHttpGet(uri, params));
+    HttpClientContext clientContext = HttpClientContext.create();
+    return httpClient.execute(host, buildHttpGet(uri, params), clientContext);
-    return httpClient.execute(host, buildHttpPost(uri, params));
+    HttpClientContext clientContext = HttpClientContext.create();
+    return httpClient.execute(host, buildHttpPost(uri, params), clientContext);
