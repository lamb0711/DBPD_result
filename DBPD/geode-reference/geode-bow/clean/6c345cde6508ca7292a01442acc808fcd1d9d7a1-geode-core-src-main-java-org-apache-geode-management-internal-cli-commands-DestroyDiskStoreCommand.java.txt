GEODE-2567: Add --if-exists to destroy disk-store (#1080)


-import org.apache.geode.SystemFailure;
+import org.apache.geode.management.internal.cli.functions.DestroyDiskStoreFunctionArgs;
-          optionContext = ConverterHint.MEMBERGROUP) String[] groups) {
-    try {
-      TabularResultData tabularData = ResultBuilder.createTabularResultData();
-      boolean accumulatedData = false;
+          optionContext = ConverterHint.MEMBERGROUP) String[] groups,
+      @CliOption(key = CliStrings.IFEXISTS, help = CliStrings.IFEXISTS_HELP,
+          specifiedDefaultValue = "true", unspecifiedDefaultValue = "false") boolean ifExist) {
-      Set<DistributedMember> targetMembers = CliUtil.findMembers(groups, null);
+    TabularResultData tabularData = ResultBuilder.createTabularResultData();
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
+    Set<DistributedMember> targetMembers = CliUtil.findMembers(groups, null);
-      ResultCollector<?, ?> rc = CliUtil.executeFunction(new DestroyDiskStoreFunction(),
-          new Object[] {name}, targetMembers);
-      List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) rc.getResult());
-
-      AtomicReference<XmlEntity> xmlEntity = new AtomicReference<>();
-      for (CliFunctionResult result : results) {
-        if (result.isSuccessful()) {
-          if (xmlEntity.get() == null) {
-            xmlEntity.set(result.getXmlEntity());
-          }
-        } else {
-          tabularData.setStatus(Result.Status.ERROR);
-        }
-        tabularData.accumulate("Member", result.getMemberIdOrName());
-        tabularData.accumulate("Result", result.getMessage());
-      }
-
-      Result result = ResultBuilder.buildResult(tabularData);
-
-      if (xmlEntity.get() != null) {
-        persistClusterConfiguration(result,
-            () -> getSharedConfiguration().deleteXmlEntity(xmlEntity.get(), groups));
-      }
-
-      return result;
-    } catch (VirtualMachineError e) {
-      SystemFailure.initiateFailure(e);
-      throw e;
-    } catch (Throwable th) {
-      SystemFailure.checkFailure();
-      return ResultBuilder.createGemFireErrorResult(
-          CliStrings.format(CliStrings.DESTROY_DISK_STORE__ERROR_WHILE_DESTROYING_REASON_0,
-              new Object[] {th.getMessage()}));
+    if (targetMembers.isEmpty()) {
+      return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+
+    DestroyDiskStoreFunctionArgs functionArgs = new DestroyDiskStoreFunctionArgs(name, ifExist);
+
+    ResultCollector<?, ?> rc =
+        CliUtil.executeFunction(new DestroyDiskStoreFunction(), functionArgs, targetMembers);
+    List<CliFunctionResult> results = CliFunctionResult.cleanResults((List<?>) rc.getResult());
+
+    AtomicReference<XmlEntity> xmlEntity = new AtomicReference<>();
+    for (CliFunctionResult result : results) {
+      if (result.isSuccessful()) {
+        if (xmlEntity.get() == null) {
+          xmlEntity.set(result.getXmlEntity());
+        }
+      } else {
+        tabularData.setStatus(Result.Status.ERROR);
+      }
+      tabularData.accumulate("Member", result.getMemberIdOrName());
+      tabularData.accumulate("Result", result.getMessage());
+    }
+
+    Result result = ResultBuilder.buildResult(tabularData);
+
+    if (xmlEntity.get() != null) {
+      persistClusterConfiguration(result,
+          () -> getSharedConfiguration().deleteXmlEntity(xmlEntity.get(), groups));
+    }
+
+    return result;
