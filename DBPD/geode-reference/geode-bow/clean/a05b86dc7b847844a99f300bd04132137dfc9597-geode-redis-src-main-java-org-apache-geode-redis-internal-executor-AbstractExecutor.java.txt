GEODE-8175: remove unsupported redis commands (#5146)

Removed list and zset commands.
Removed redis HyperLog commands.
Removed redis transaction commands.
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.query.Query;
-   * Getter method for a {@link Region} in the case that a Region should be created if one with the
-   * given name does not exist. Before getting or creating a Region, a check is first done to make
-   * sure the desired key doesn't already exist with a different {@link RedisDataType}. If there is
-   * a data type mismatch this method will throw a {@link RuntimeException}.
-   * <p>
-   * ********************** IMPORTANT NOTE ********************************************** This
-   * method will not fail in returning a Region unless an internal error occurs, so if a Region is
-   * destroyed right after it is created, it will attempt to retry until a reference to that Region
-   * is obtained
-   * *************************************************************************************
-   *
-   * @param context Client client
-   * @param key String key of desired key
-   * @param type Type of data type desired
-   * @return Region with name key
-   */
-  protected Region<?, ?> getOrCreateRegion(ExecutionHandlerContext context, ByteArrayWrapper key,
-      RedisDataType type) {
-    return context.getRegionProvider().getOrCreateRegion(key, type, context);
-  }
-
-  /**
-  protected Query getQuery(ByteArrayWrapper key, Enum<?> type, ExecutionHandlerContext context) {
-    return context.getRegionProvider().getQuery(key, type);
-  }
-
-  protected int getBoundedStartIndex(int index, int size) {
-    if (size < 0) {
-      throw new IllegalArgumentException("Size < 0, really?");
-    }
-    if (index >= 0) {
-      return Math.min(index, size);
-    } else {
-      return Math.max(index + size, 0);
-    }
-  }
-
-  protected int getBoundedEndIndex(int index, int size) {
-    if (size < 0) {
-      throw new IllegalArgumentException("Size < 0, really?");
-    }
-    if (index >= 0) {
-      return Math.min(index, size);
-    } else {
-      return Math.max(index + size, -1);
-    }
-  }
-
