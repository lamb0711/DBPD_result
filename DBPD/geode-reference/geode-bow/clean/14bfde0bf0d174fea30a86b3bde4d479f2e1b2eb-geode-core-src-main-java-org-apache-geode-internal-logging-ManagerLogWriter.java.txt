Merge branch 'release/1.8.0'

-import java.util.Date;
-import org.apache.geode.i18n.LogWriterI18n;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-  public static final String TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY =
+  private static final String TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY =
-  private LogConfig cfg = null;
+  private LogConfig config;
-  private LocalLogWriter mainLogger = this;
+  private LocalLogWriter mainLogWriter = this;
-  private File logDir = null;
+  private File logDir;
-  private int childId = 0;
-  private boolean useChildLogging = false;
+  private int childId;
+  private boolean useChildLogging;
-  private boolean rolling = false;
+  private boolean rolling;
-  private File activeLogFile = null;
+  private File activeLogFile;
-  private boolean started = false;
+  private boolean started;
-   * Creates a writer that logs to <code>System.out</code>.
+   * Creates a writer that logs to <code>printStream</code>.
+   * @param printStream is the stream that message will be printed to.
+   *
-  public ManagerLogWriter(int level, PrintStream out) {
-    this(level, out, null);
+  public ManagerLogWriter(int level, PrintStream printStream) {
+    this(level, printStream, null);
-   * Creates a writer that logs to <code>System.out</code>.
+   * Creates a writer that logs to <code>printStream</code>.
+   * @param printStream is the stream that message will be printed to.
-  public ManagerLogWriter(int level, PrintStream out, String connectionName) {
-    super(level, out, connectionName);
-    this.fileSizeLimitInKB = Boolean.getBoolean(TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY);
-    this.rollingFileHandler = new MainWithChildrenRollingFileHandler();
+  public ManagerLogWriter(int level, PrintStream printStream, String connectionName) {
+    super(level, printStream, connectionName);
+    fileSizeLimitInKB = Boolean.getBoolean(TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY);
+    rollingFileHandler = new MainWithChildrenRollingFileHandler();
-  public void setConfig(LogConfig cfg) {
-    this.cfg = cfg;
+  public void setConfig(LogConfig config) {
+    this.config = config;
-    setLevel(cfg.getLogLevel());
-    useChildLogging = cfg.getLogFile() != null && !cfg.getLogFile().equals(new File(""))
-        && cfg.getLogFileSizeLimit() != 0;
+    setLevel(config.getLogLevel());
+    useChildLogging = config.getLogFile() != null && !config.getLogFile().equals(new File(""))
+        && config.getLogFileSizeLimit() != 0;
-      logDir = rollingFileHandler.getParentFile(this.cfg.getLogFile());
+      logDir = rollingFileHandler.getParentFile(config.getLogFile());
-        switchLogs(this.cfg.getLogFile(), true);
+        switchLogs(config.getLogFile(), true);
-    return this.activeLogFile;
+    return activeLogFile;
-    return this.logDir;
+    return logDir;
-    return this.mainLogId;
+    return mainLogId;
-    String path = this.cfg.getLogFile().getPath();
-    int extIdx = path.lastIndexOf('.');
+    String path = config.getLogFile().getPath();
+    int extIndex = path.lastIndexOf('.');
-    if (extIdx != -1) {
-      ext = path.substring(extIdx);
-      path = path.substring(0, extIdx);
+    if (extIndex != -1) {
+      ext = path.substring(extIndex);
+      path = path.substring(0, extIndex);
-    path = path + rollingFileHandler.formatId(mainLogId) + rollingFileHandler.formatId(this.childId)
+    path = path + rollingFileHandler.formatId(mainLogId) + rollingFileHandler.formatId(childId)
-    this.childId++;
+    childId++;
-    return this.useChildLogging;
+    return useChildLogging;
-      long result = cfg.getLogFileSizeLimit();
+      long result = config.getLogFileSizeLimit();
-      if (this.fileSizeLimitInKB) {
+      if (fileSizeLimitInKB) {
-        return result * (1024);
+        return result * 1024;
-    long result = cfg.getLogDiskSpaceLimit();
+    long result = config.getLogDiskSpaceLimit();
-    int extIdx = baseLogFileName.lastIndexOf('.');
+    int extIndex = baseLogFileName.lastIndexOf('.');
-    if (extIdx != -1) {
-      ext = baseLogFileName.substring(extIdx);
-      metaLogFile = baseLogFileName.substring(0, extIdx);
+    if (extIndex != -1) {
+      ext = baseLogFileName.substring(extIndex);
+      metaLogFile = baseLogFileName.substring(0, extIndex);
-          if (mainLog && mainLogger == this && this.cfg.getLogFile() != null) {
+          if (mainLog && mainLogWriter == this && config.getLogFile() != null) {
-                getMetaLogFileName(this.cfg.getLogFile().getPath(), this.mainLogId);
-            mainLogger = new LocalLogWriter(INFO_LEVEL,
+                getMetaLogFileName(config.getLogFile().getPath(), mainLogId);
+            mainLogWriter = new LocalLogWriter(INFO_LEVEL,
-              mainLogger.info(LocalizedStrings.ManagerLogWriter_SWITCHING_TO_LOG__0,
-                  this.cfg.getLogFile());
+              mainLogWriter.info(String.format("Switching to log %s",
+                  config.getLogFile()));
-            mainLogger.info(LocalizedStrings.ManagerLogWriter_ROLLING_CURRENT_LOG_TO_0, newLog);
+            mainLogWriter.info(String.format("Rolling current log to %s", newLog));
-        String oldName = this.cfg.getLogFile().getAbsolutePath();
-        File tmpFile = null;
-        if (this.activeLogFile != null) {
-          // @todo gregp: is a bug that we get here and try to rename the activeLogFile
+        String oldName = config.getLogFile().getAbsolutePath();
+        File tempFile = null;
+        if (activeLogFile != null) {
+          // is a bug that we get here and try to rename the activeLogFile
-          if (!this.activeLogFile.getAbsolutePath().equals(newLog.getAbsolutePath())) {
+          if (!activeLogFile.getAbsolutePath().equals(newLog.getAbsolutePath())) {
-              if (os.indexOf("Windows") != -1) {
+              if (os.contains("Windows")) {
-              File tmpLogDir = rollingFileHandler.getParentFile(this.cfg.getLogFile());
-              tmpFile = File.createTempFile("mlw", null, tmpLogDir);
-              // close the old guy down before we do the rename
-              PrintStream tmpps = OSProcess.redirectOutput(tmpFile,
+              File tempLogDir = rollingFileHandler.getParentFile(config.getLogFile());
+              tempFile = File.createTempFile("mlw", null, tempLogDir);
+              // close the old print writer down before we do the rename
+              PrintStream tempPrintStream = OSProcess.redirectOutput(tempFile,
-              PrintWriter oldPW = this.setTarget(new PrintWriter(tmpps, true));
-              if (oldPW != null) {
-                oldPW.close();
+              PrintWriter oldPrintWriter = setTarget(new PrintWriter(tempPrintStream, true));
+              if (oldPrintWriter != null) {
+                oldPrintWriter.close();
-            File oldFile = this.activeLogFile;
+            File oldFile = activeLogFile;
-              mainLogger
+              mainLogWriter
-        this.activeLogFile = new File(oldName);
+        activeLogFile = new File(oldName);
-        PrintStream ps = OSProcess.redirectOutput(activeLogFile,
+        PrintStream printStream = OSProcess.redirectOutput(activeLogFile,
-        PrintWriter oldPW = this.setTarget(new PrintWriter(ps, true), this.activeLogFile.length());
-        if (oldPW != null) {
-          oldPW.close();
+        PrintWriter oldPrintWriter =
+            setTarget(new PrintWriter(printStream, true), activeLogFile.length());
+        if (oldPrintWriter != null) {
+          oldPrintWriter.close();
-        if (tmpFile != null) {
-          tmpFile.delete();
+        if (tempFile != null) {
+          tempFile.delete();
-        if (mainLogger == null) {
-          mainLogger = this;
+        if (mainLogWriter == null) {
+          mainLogWriter = this;
-          mainLogger.warning("Could not rename \"" + this.activeLogFile + "\" to \"" + newLog
+          mainLogWriter.warning("Could not rename \"" + activeLogFile + "\" to \"" + newLog
-        mainLogger.warning("Could not open log \"" + newLog + "\" because " + ex);
+        mainLogWriter.warning("Could not open log \"" + newLog + "\" because " + ex);
-      checkDiskSpace(this.activeLogFile);
+      checkDiskSpace(activeLogFile);
-  /** notification from manager that the output file is being closed */
+  /**
+   * notification from manager that the output file is being closed
+   */
-    OutputStream out = new OutputStream() {
+    OutputStream nullOutputStream = new OutputStream() {
-    if (mainLogger != null) {
-      mainLogger.close();
+    if (mainLogWriter != null) {
+      mainLogWriter.close();
-    PrintWriter pw = this.setTarget(new PrintWriter(out, true));
-    if (pw != null) {
-      pw.close();
+    PrintWriter printWriter = setTarget(new PrintWriter(nullOutputStream, true));
+    if (printWriter != null) {
+      printWriter.close();
-    /*
-     * this is just searching for the existing logfile name we need to search for meta log file name
-     *
-     */
+    // this is just searching for the existing logfile name we need to search for meta log file name
-    File result = null;
-    StringBuffer buf = new StringBuffer(log.getPath());
-    int insertIdx = buf.lastIndexOf(".");
+    StringBuilder sb = new StringBuilder(log.getPath());
+    int insertIdx = sb.lastIndexOf(".");
-      buf.append(rollingFileHandler.formatId(previousMainId))
+      sb.append(rollingFileHandler.formatId(previousMainId))
-      buf.insert(insertIdx, rollingFileHandler.formatId(childId));
-      buf.insert(insertIdx, rollingFileHandler.formatId(previousMainId));
+      sb.insert(insertIdx, rollingFileHandler.formatId(childId));
+      sb.insert(insertIdx, rollingFileHandler.formatId(previousMainId));
-    result = new File(buf.toString());
-    return result;
+    return new File(sb.toString());
-    rollingFileHandler.checkDiskSpace("log", newLog, getLogDiskSpaceLimit(), logDir, mainLogger);
+    rollingFileHandler.checkDiskSpace("log", newLog, getLogDiskSpaceLimit(), logDir, mainLogWriter);
-  public void rollLog() {
+  private void rollLog() {
-      switchLogs(this.cfg.getLogFile(), true);
+      switchLogs(config.getLogFile(), true);
-  public String put(int msgLevel, Date msgDate, String connectionName, String threadName, long tid,
-      String msg, String exceptionText) {
-
-    String result = null; // This seems to workaround a javac bug
-    result = super.put(msgLevel, msgDate, connectionName, threadName, tid, msg, exceptionText);
-    return result;
-  }
-
-  @Override
-  public void writeFormattedMessage(String s) {
+  public void writeFormattedMessage(String message) {
-    super.writeFormattedMessage(s);
+    super.writeFormattedMessage(message);
