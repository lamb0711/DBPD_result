Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.internal.cache.backup.BackupManager;
+import org.apache.geode.internal.cache.backup.BackupService;
-  final ConcurrentMap<Integer, BucketRegion> localBucket2RegionMap;
+  private final ConcurrentMap<Integer, BucketRegion> localBucket2RegionMap;
-  // /**
-  // * Checks whether there is room in this Map to accommodate more data without
-  // * pushing the Map over its rebalance threshold.
-  // *
-  // * @param bytes
-  // * the size to check in bytes
-  // */
-  // boolean canAccommodateMoreBytesSafely(long bytes)
-  // {
-  //
-  // if (this.partitionedRegion.getLocalMaxMemory() == 0) {
-  // return false;
-  // }
-  // long allocatedMemory = currentAllocatedMemory();
-  // // precision coercion from int to long on bytes
-  // long newAllocatedSize = allocatedMemory + bytes;
-  // if (newAllocatedSize < (this.partitionedRegion.getLocalMaxMemory()
-  // * PartitionedRegionHelper.BYTES_PER_MB * this.partitionedRegion.rebalanceThreshold)) {
-  // return true;
-  // }
-  // else {
-  // return false;
-  // }
-  // }
+  ConcurrentMap<Integer, BucketRegion> getLocalBucket2RegionMap() {
+    return this.localBucket2RegionMap;
+  }
-    factory.setConcurrencyChecksEnabled(this.partitionedRegion.concurrencyChecksEnabled);
+    factory.setConcurrencyChecksEnabled(this.partitionedRegion.getConcurrencyChecksEnabled());
-        int executor = DistributionManager.WAITING_POOL_EXECUTOR;
+        int executor = ClusterDistributionManager.WAITING_POOL_EXECUTOR;
-    BackupManager backupManager = getPartitionedRegion().getGemFireCache().getBackupManager();
-    if (getPartitionedRegion().getDataPolicy().withPersistence() && backupManager != null) {
-      backupManager.waitForBackup();
+    BackupService backupService = getPartitionedRegion().getGemFireCache().getBackupService();
+    if (getPartitionedRegion().getDataPolicy().withPersistence()) {
+      backupService.waitForBackup();
-    AbstractLRURegionMap map = (AbstractLRURegionMap) br.getRegionMap();
-    return map.getEntryOverHead();
+    return br.getRegionMap().getEntryOverhead();
-    final DM dm = this.partitionedRegion.getDistributionManager();
+    final DistributionManager dm = this.partitionedRegion.getDistributionManager();
