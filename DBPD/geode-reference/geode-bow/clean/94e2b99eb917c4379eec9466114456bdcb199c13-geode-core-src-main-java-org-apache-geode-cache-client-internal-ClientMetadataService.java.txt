GEODE-7812: Cleanup for PutAllOp (#4836)

Cleanup some collection types and interfaces for PutAllOp and
PutAllClientServerDistributedTest.
+import static org.apache.geode.internal.cache.util.UncheckedUtils.cast;
+
-  public Map<ServerLocation, HashSet> getServerToFilterMap(final Collection routingKeys,
+  public Map<ServerLocation, Set> getServerToFilterMap(final Collection routingKeys,
-  public Map<ServerLocation, HashSet> getServerToFilterMap(final Collection routingKeys,
+  public Map<ServerLocation, Set> getServerToFilterMap(final Collection routingKeys,
-    HashMap<Integer, HashSet> bucketToKeysMap =
+    Map<Integer, Set> bucketToKeysMap =
-    HashMap<ServerLocation, HashSet> serverToKeysMap = new HashMap<ServerLocation, HashSet>();
-    HashMap<ServerLocation, HashSet<Integer>> serverToBuckets =
+    Map<ServerLocation, Set> serverToKeysMap = new HashMap<>();
+    Map<ServerLocation, Set<Integer>> serverToBuckets =
-      HashSet<Integer> buckets = (HashSet) entry.getValue();
+      Set<Integer> buckets = cast(entry.getValue());
-        LinkedHashSet keys = (LinkedHashSet) serverToKeysMap.get(server);
+        Set keys = serverToKeysMap.get(server);
-  public HashMap<ServerLocation, HashSet<Integer>> groupByServerToAllBuckets(Region region,
+  public Map<ServerLocation, Set<Integer>> groupByServerToAllBuckets(Region region,
-    HashSet<Integer> allBucketIds = new HashSet<Integer>();
+    Set<Integer> allBucketIds = new HashSet<Integer>();
-  private HashMap<ServerLocation, HashSet<Integer>> groupByServerToBuckets(
+  private Map<ServerLocation, Set<Integer>> groupByServerToBuckets(
-      HashMap<ServerLocation, HashSet<Integer>> serverToBucketsMap =
-          new HashMap<ServerLocation, HashSet<Integer>>();
+      Map<ServerLocation, Set<Integer>> serverToBucketsMap = new HashMap<>();
-        HashSet<Integer> buckets = serverToBucketsMap.get(server);
+        Set<Integer> buckets = serverToBucketsMap.get(server);
-          buckets = new HashSet<Integer>(); // faster if this was an ArrayList
+          buckets = new HashSet<>(); // faster if this was an ArrayList
-  private HashMap<ServerLocation, HashSet<Integer>> pruneNodes(ClientPartitionAdvisor prAdvisor,
+  private Map<ServerLocation, Set<Integer>> pruneNodes(ClientPartitionAdvisor prAdvisor,
-    HashMap<ServerLocation, HashSet<Integer>> serverToBucketsMap =
-        new HashMap<ServerLocation, HashSet<Integer>>();
-    HashMap<ServerLocation, HashSet<Integer>> prunedServerToBucketsMap =
-        new HashMap<ServerLocation, HashSet<Integer>>();
+    Map<ServerLocation, Set<Integer>> serverToBucketsMap = new HashMap<>();
+    Map<ServerLocation, Set<Integer>> prunedServerToBucketsMap = new HashMap<>();
-          HashSet<Integer> bucketSet = new HashSet<Integer>();
+          Set<Integer> bucketSet = new HashSet<>();
-          HashSet<Integer> bucketSet = serverToBucketsMap.get(server);
+          Set<Integer> bucketSet = serverToBucketsMap.get(server);
-    HashSet<Integer> bucketSet = serverToBucketsMap.get(randomFirstServer);
+    Set<Integer> bucketSet = serverToBucketsMap.get(randomFirstServer);
-    HashSet<Integer> currentBucketSet = new HashSet<Integer>(bucketSet);
+    Set<Integer> currentBucketSet = new HashSet<>(bucketSet);
-      HashSet<Integer> bucketSet2 = serverToBucketsMap.get(server);
+      Set<Integer> bucketSet2 = serverToBucketsMap.get(server);
-  private ServerLocation findNextServer(Set<Map.Entry<ServerLocation, HashSet<Integer>>> entrySet,
-      HashSet<Integer> currentBucketSet) {
+  private ServerLocation findNextServer(Set<Map.Entry<ServerLocation, Set<Integer>>> entrySet,
+      Set<Integer> currentBucketSet) {
-    ArrayList<ServerLocation> nodesOfEqualSize = new ArrayList<ServerLocation>();
-    for (Map.Entry<ServerLocation, HashSet<Integer>> entry : entrySet) {
-      HashSet<Integer> buckets = new HashSet<Integer>(entry.getValue());
+    List<ServerLocation> nodesOfEqualSize = new ArrayList<>();
+    for (Map.Entry<ServerLocation, Set<Integer>> entry : entrySet) {
+      Set<Integer> buckets = new HashSet<>(entry.getValue());
-  private HashMap<Integer, HashSet> groupByBucketOnClientSide(Region region,
+  private Map<Integer, Set> groupByBucketOnClientSide(Region region,
-    HashMap<Integer, HashSet> bucketToKeysMap = new HashMap();
+    Map<Integer, Set> bucketToKeysMap = new HashMap<>();
-      HashSet bucketKeys = bucketToKeysMap.get(bucketId);
+      Set bucketKeys = bucketToKeysMap.get(bucketId);
+  @VisibleForTesting
+  @VisibleForTesting
+  @VisibleForTesting
+  @VisibleForTesting
+  @VisibleForTesting
