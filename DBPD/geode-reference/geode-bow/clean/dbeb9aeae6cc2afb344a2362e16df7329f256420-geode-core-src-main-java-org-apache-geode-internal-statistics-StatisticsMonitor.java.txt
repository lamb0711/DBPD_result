Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.util.ArrayList;
-import java.util.Collections;
+import org.apache.geode.internal.concurrent.ConcurrentHashSet;
+
- * TODO: define another addStatistic for StatisticDescriptor which will enable 
- * static monitoring that will fire for all instances even ones that may not 
- * yet be created at the time this monitor is defined
+ * TODO: define another addStatistic for StatisticDescriptor which will enable static monitoring
+ * that will fire for all instances even ones that may not yet be created at the time this monitor
+ * is defined
-  
-  private volatile List<StatisticsListener> listeners = 
-        Collections.<StatisticsListener>emptyList();
-  private volatile List<StatisticId> statisticIds = 
-        Collections.<StatisticId>emptyList();
+  private final ConcurrentHashSet<StatisticsListener> listeners = new ConcurrentHashSet<>();
-  public StatisticsMonitor() {
-  }
+  private final ConcurrentHashSet<StatisticId> statisticIds = new ConcurrentHashSet<>();
-  public StatisticsMonitor addStatistic(StatisticId statId) {
+  public StatisticsMonitor() {}
+
+  public StatisticsMonitor addStatistic(final StatisticId statId) {
-    synchronized (this.mutex) {
-      List<StatisticId> oldStatisticIds = this.statisticIds;
-      if (!oldStatisticIds.contains(statId)) {
-        List<StatisticId> newStatisticIds = new ArrayList<StatisticId>(oldStatisticIds);
-        newStatisticIds.add(statId);
-        this.statisticIds = Collections.unmodifiableList(newStatisticIds);
-      }
-    }
-    return this;
-  }
-  
-  public StatisticsMonitor removeStatistic(StatisticId statId) {
-    if (statId == null) {
-      throw new NullPointerException("StatisticId is null");
-    }
-    synchronized (this.mutex) {
-      List<StatisticId> oldStatisticIds = this.statisticIds;
-      if (oldStatisticIds.contains(statId)) {
-        List<StatisticId> newStatisticIds = new ArrayList<StatisticId>(oldStatisticIds);
-        newStatisticIds.remove(statId);
-        this.statisticIds = Collections.unmodifiableList(newStatisticIds);
-      }
+    if (!this.statisticIds.contains(statId)) {
+      this.statisticIds.add(statId);
-  public final void addListener(StatisticsListener listener) {
+  public StatisticsMonitor removeStatistic(final StatisticId statId) {
+    if (statId == null) {
+      throw new NullPointerException("StatisticId is null");
+    }
+    if (this.statisticIds.contains(statId)) {
+      this.statisticIds.remove(statId);
+    }
+    return this;
+  }
+
+  public void addListener(final StatisticsListener listener) {
-      List<StatisticsListener> oldListeners = this.listeners;
-      if (!oldListeners.contains(listener)) {
-        List<StatisticsListener> newListeners = new ArrayList<StatisticsListener>(oldListeners);
-        newListeners.add(listener);
-        this.listeners = Collections.unmodifiableList(newListeners);
+      if (!this.listeners.contains(listener)) {
+        this.listeners.add(listener);
-  public final void removeListener(StatisticsListener listener) {
+  public void removeListener(final StatisticsListener listener) {
-      List<StatisticsListener> oldListeners = this.listeners;
-      if (oldListeners.contains(listener)) {
-        List<StatisticsListener> newListeners = new ArrayList<StatisticsListener>(oldListeners);
-        newListeners.remove(listener);
-        if (newListeners.isEmpty()) {
+      if (this.listeners.contains(listener)) {
+        this.listeners.remove(listener);
+        if (this.listeners.isEmpty()) {
-        this.listeners = Collections.unmodifiableList(newListeners);
-  
+
-   * This method may be overridden but please ensure that you invoke 
-   * super.monitor(long, List) from this method in the subclass.
+   * This method may be overridden but please ensure that you invoke super.monitor(long, List) from
+   * this method in the subclass.
-  protected void monitor(long millisTimeStamp, List<ResourceInstance> resourceInstances) {
+  protected void monitor(final long millisTimeStamp,
+      final List<ResourceInstance> resourceInstances) {
-  
-  private final void monitorStatisticIds(long millisTimeStamp, List<ResourceInstance> resourceInstances) {
-    List<StatisticId> statisticIdsToMonitor = statisticIds;
-    if (!statisticIdsToMonitor.isEmpty()) {
+
+  private void monitorStatisticIds(final long millisTimeStamp,
+      final List<ResourceInstance> resourceInstances) {
+    if (!this.statisticIds.isEmpty()) {
-  
-  protected final void notifyListeners(StatisticsNotification notification) {
-    List<StatisticsListener> listenersToNotify = this.listeners;    
-    for (StatisticsListener listener : listenersToNotify) {
+
+  protected void notifyListeners(final StatisticsNotification notification) {
+    for (StatisticsListener listener : this.listeners) {
-  
-  protected final Object mutex() {
+
+  protected Object mutex() {
-  
+
-  List<StatisticsListener> getStatisticsListenersSnapshot() {
+  ConcurrentHashSet<StatisticsListener> getStatisticsListenersSnapshot() {
-  
+
-  
-  /** Override to append to toString() */
+
+  /**
+   * Override to append to toString()
+   */
