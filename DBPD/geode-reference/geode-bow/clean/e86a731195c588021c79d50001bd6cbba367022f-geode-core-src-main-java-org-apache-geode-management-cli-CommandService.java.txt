Merge branch 'release/1.3.0'

+import org.apache.geode.internal.cache.InternalCache;
+ *
+ * @deprecated since 1.3 use OnlineCommandProcessor directly
+   * @deprecated since Geode 1.3, simply call processCommand to execute the command
+   * @deprecated since Geode 1.3, simply call processCommand to execute the command
-    /*
-     * if (!cache.isServer()) { throw new IllegalArgumentException("Server cache is required."); }
-     */
-
-                .toLocalizedString(new Object[] {nonExistingDependency}));
+                .toLocalizedString(nonExistingDependency));
-      localCommandService = new MemberCommandService(cache);
+      localCommandService = new MemberCommandService((InternalCache) cache);
-
-  // public static CommandService createCommandService(RegionService regionService) {
-  // if (regionService == null || regionService.isClosed()) {
-  // throw new CacheClosedException("Can not create command service as region service doesn't exist
-  // or cache is closed.");
-  // }
-  //
-  // CommandService commandService;
-  //
-  // if (Cache.class.isInstance(regionService) &&
-  // ((Cache) regionService).isServer() &&
-  // CacheFactory.getAnyInstance() == regionService) {
-  // commandService = createLocalCommandService((Cache) regionService);
-  // } else {
-  // Pool poolToUse = null;
-  // if (ProxyCache.class.isInstance(regionService)) {
-  // ProxyCache proxyCache = (ProxyCache) regionService;
-  // poolToUse = proxyCache.getUserAttributes().getPool();
-  // } else if (ClientCache.class.isInstance(regionService)) {
-  // ClientCache localCache = (ClientCache) regionService;
-  // poolToUse = localCache.getDefaultPool();
-  // } else {
-  // throw new IllegalArgumentException("Can not create Command Service for given Region Service: "
-  // + regionService);
-  // }
-  // commandService = new ProxyCommandService(poolToUse);
-  // }
-  //
-  // return commandService;
-  // }
-  //
-  // public static CommandService createRemoteCommandService(String poolName) {
-  // Pool poolToUse = PoolManager.find(poolName);
-  //
-  // if (poolToUse == null) {
-  // throw new IllegalArgumentException("Can not create Command Service as a Pool with name \"" +
-  // poolName+"\" was not found.");
-  // }
-  //
-  // return new ProxyCommandService(poolToUse);
-  // }
