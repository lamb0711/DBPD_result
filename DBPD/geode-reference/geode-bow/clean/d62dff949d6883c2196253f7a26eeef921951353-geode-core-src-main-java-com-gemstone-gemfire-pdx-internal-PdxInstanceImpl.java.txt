GEODE-225 excessive CPU utilization and garbage collection strain for JSON processing

Use of a singleton ObjectMapper can be enabled using a system property.

-DPdxInstance.use-static-mapper=true

+import static org.apache.logging.log4j.message.MapMessage.MapFormat.JSON;
+
+  private static final boolean USE_STATIC_MAPPER = Boolean.getBoolean("PdxInstance.use-static-mapper");
+
+  static final ObjectMapper mapper = USE_STATIC_MAPPER? createObjectMapper() : null;
+
+  private static ObjectMapper createObjectMapper() {
+    ObjectMapper mapper = new ObjectMapper();
+    mapper.setDateFormat(new SimpleDateFormat("MM/dd/yyyy"));
+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+    mapper.configure(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
+    return mapper;
+  }
+
-            ObjectMapper mapper = new ObjectMapper();
-            mapper.setDateFormat(new SimpleDateFormat("MM/dd/yyyy"));
-            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-            mapper.configure(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
-            Object classInstance = mapper.readValue(JSON, ClassPathLoader.getLatest().forName(className));
+            ObjectMapper objMapper = USE_STATIC_MAPPER? mapper : createObjectMapper();
+            Object classInstance = objMapper.readValue(JSON, ClassPathLoader.getLatest().forName(className));
-        //TODO - we might able to optimize these to not deserialize the object
