GEODE-3870: move region entry classes to new entries package (#972)

* Move Region Entries into entries package
* Move NonLocalRegionEntry back to internal.cache package
* Regenerate region entry classes from Linux

-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.entries;
+import org.apache.geode.internal.cache.AbstractDiskRegion;
+import org.apache.geode.internal.cache.AbstractLRURegionMap;
+import org.apache.geode.internal.cache.BucketRegion;
+import org.apache.geode.internal.cache.CachedDeserializable;
+import org.apache.geode.internal.cache.CachedDeserializableFactory;
+import org.apache.geode.internal.cache.DiskId;
+import org.apache.geode.internal.cache.DiskRegion;
+import org.apache.geode.internal.cache.DistributedRegion;
+import org.apache.geode.internal.cache.EntryBits;
+import org.apache.geode.internal.cache.EntryEventImpl;
+import org.apache.geode.internal.cache.InitialImageOperation;
+import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.PlaceHolderDiskRegion;
+import org.apache.geode.internal.cache.RegionClearedException;
+import org.apache.geode.internal.cache.RegionEntry;
+import org.apache.geode.internal.cache.RegionEntryContext;
+import org.apache.geode.internal.cache.RegionMap;
+import org.apache.geode.internal.cache.Token;
-    static Object getValueOnDisk(DiskEntry entry, DiskRegion dr) {
+    public static Object getValueOnDisk(DiskEntry entry, DiskRegion dr) {
-    static Object getValueOnDiskOrBuffer(DiskEntry entry, DiskRegion dr,
+    public static Object getValueOnDiskOrBuffer(DiskEntry entry, DiskRegion dr,
-                  entry.key, did);
+                  entry.getKey(), did);
-              entry.value = bb.getBytes();
+              entry.setValue(bb.getBytes());
-            entry.value = cd.getDeserializedForReading();
+            entry.setValue(cd.getDeserializedForReading());
-              entry.value = (byte[]) tmp;
+              entry.setValue((byte[]) tmp);
-                entry.value = hdos;
+                entry.setValue(hdos);
-          if (v != entry.value) {
+          if (v != entry.getValue()) {
-        entry.value = v;
+        entry.setValue(v);
-            entry.value = hdos;
+            entry.setValue(hdos);
-    static void initialize(DiskEntry entry, DiskRecoveryStore r, Object newValue) {
+    public static void initialize(DiskEntry entry, DiskRecoveryStore r, Object newValue) {
-            boolean maintainRVV = region.concurrencyChecksEnabled;
+            boolean maintainRVV = region.isConcurrencyChecksEnabled();
-    static Object readSerializedValue(byte[] valueBytes, Version version, ByteArrayDataInput in,
-        boolean forceDeserialize) {
+    public static Object readSerializedValue(byte[] valueBytes, Version version,
+        ByteArrayDataInput in, boolean forceDeserialize) {
-    static Object readRawValue(byte[] valueBytes, Version version, ByteArrayDataInput in) {
+    public static Object readRawValue(byte[] valueBytes, Version version, ByteArrayDataInput in) {
-        boolean maintainRVV = region.concurrencyChecksEnabled && dr.isBackup();
+        boolean maintainRVV = region.isConcurrencyChecksEnabled() && dr.isBackup();
