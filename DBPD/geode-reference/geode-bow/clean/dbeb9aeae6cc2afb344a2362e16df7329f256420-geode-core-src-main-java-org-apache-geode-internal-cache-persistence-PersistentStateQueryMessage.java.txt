Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class PersistentStateQueryMessage extends
-    HighPriorityDistributionMessage implements MessageWithReply {
+public class PersistentStateQueryMessage extends HighPriorityDistributionMessage
+    implements MessageWithReply {
-  
+
-    
+
-  
-  public PersistentStateQueryMessage(String regionPath, PersistentMemberID id, PersistentMemberID initializingId, int processorId) {
+
+  public PersistentStateQueryMessage(String regionPath, PersistentMemberID id,
+      PersistentMemberID initializingId, int processorId) {
-  public static PersistentStateQueryResults send(
-      Set<InternalDistributedMember> members, DM dm, String regionPath,
-      PersistentMemberID persistentId, PersistentMemberID initializingId) throws ReplyException {
-    PersistentStateQueryReplyProcessor processor = new PersistentStateQueryReplyProcessor(dm, members);
-    PersistentStateQueryMessage msg = new PersistentStateQueryMessage(regionPath, persistentId, initializingId, processor.getProcessorId());
+  public static PersistentStateQueryResults send(Set<InternalDistributedMember> members, DM dm,
+      String regionPath, PersistentMemberID persistentId, PersistentMemberID initializingId)
+      throws ReplyException {
+    PersistentStateQueryReplyProcessor processor =
+        new PersistentStateQueryReplyProcessor(dm, members);
+    PersistentStateQueryMessage msg = new PersistentStateQueryMessage(regionPath, persistentId,
+        initializingId, processor.getProcessorId());
-    
+
-    int oldLevel =         // Set thread local flag to allow entrance through initialization Latch
-      LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
+    int oldLevel = // Set thread local flag to allow entrance through initialization Latch
+        LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
-      if(region instanceof DistributedRegion) {
+      if (region instanceof DistributedRegion) {
-      } else if ( region == null) {
-        Bucket proxy = PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(), this.regionPath, false);
-        if(proxy != null) {
+      } else if (region == null) {
+        Bucket proxy = PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(),
+            this.regionPath, false);
+        if (proxy != null) {
-      if(persistenceAdvisor != null) {
-        if(id != null) {
+      if (persistenceAdvisor != null) {
+        if (id != null) {
-        if(initializingId != null && state == null) {
+        if (initializingId != null && state == null) {
-    }
-    catch (CancelException e) {
+    } catch (CancelException e) {
-    }
-    catch(VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch(Throwable t) {
+    } catch (Throwable t) {
-    }
-    finally {
+    } finally {
-      if(successfulReply) {
-        PersistentStateQueryReplyMessage persistentReplyMessage = new PersistentStateQueryReplyMessage();
+      if (successfulReply) {
+        PersistentStateQueryReplyMessage persistentReplyMessage =
+            new PersistentStateQueryReplyMessage();
-        persistentReplyMessage.persistedStateOfPeer= state;
+        persistentReplyMessage.persistedStateOfPeer = state;
-      if(exception != null) {
+      if (exception != null) {
-      if(logger.isDebugEnabled()) {
+      if (logger.isDebugEnabled()) {
-  
+
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    if(hasId) {
+    if (hasId) {
-    if(hasInitializingId) {
+    if (hasInitializingId) {
-    if(id != null) {
+    if (id != null) {
-    if(initializingId != null) {
+    if (initializingId != null) {
-  
+
-    return super.toString() + ",id=" + id + ",regionPath=" + regionPath + ",initializingId=" + initializingId; 
+    return super.toString() + ",id=" + id + ",regionPath=" + regionPath + ",initializingId="
+        + initializingId;
-  
+
-    
+
-      if(msg instanceof PersistentStateQueryReplyMessage) {
+      if (msg instanceof PersistentStateQueryReplyMessage) {
-        results.addResult(reply.persistedStateOfPeer, reply.getSender(), reply.myId, reply.myInitializingId, reply.diskStoreId, reply.onlineMembers);
-       }
+        results.addResult(reply.persistedStateOfPeer, reply.getSender(), reply.myId,
+            reply.myInitializingId, reply.diskStoreId, reply.onlineMembers);
+      }
-  
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      if(hasId) {
+      if (hasId) {
-      if(hasState) {
+      if (hasState) {
-      if(hasInitializingId) {
+      if (hasInitializingId) {
-      if(hasDiskStoreID) {
+      if (hasDiskStoreID) {
-      if(hasOnlineMembers) {
+      if (hasOnlineMembers) {
-      if(myId == null) {
+      if (myId == null) {
-      if(persistedStateOfPeer == null) {
+      if (persistedStateOfPeer == null) {
-      if(myInitializingId== null) {
+      if (myInitializingId == null) {
-      if(diskStoreId== null) {
+      if (diskStoreId == null) {
-      if(onlineMembers== null) {
+      if (onlineMembers == null) {
-    
+
-      return super.toString() + ",myId=" + myId + ",myInitializingId=" + myInitializingId + ",persistedStateOfPeer=" + persistedStateOfPeer; 
+      return super.toString() + ",myId=" + myId + ",myInitializingId=" + myInitializingId
+          + ",persistedStateOfPeer=" + persistedStateOfPeer;
