GEODE-7852: Adding a SocketFactory configuration for client Pools (#4830)

Adding the ability to provide a SocketFactory to a client pool for use in
creating sockets. Adding an implementation of this SocketFactory that
configures the pool to use an SNI proxy.

Adding an automated test of the SniSocketFactory that uses docker compose
to use a real SNI proxy and geode servers that are not reachable without
going through the proxy.

Co-authored-by: Bill Burcham <bburcham@pivotal.io>
-import java.net.InetAddress;
-import javax.net.SocketFactory;
+import javax.net.ssl.SSLSocketFactory;
+import org.apache.geode.distributed.internal.tcpserver.TcpSocketFactory;
-      boolean useSSL) throws IOException {
+      boolean useSSL, TcpSocketFactory socketFactory) throws IOException {
-          useSSL);
+          useSSL, socketFactory);
-    Socket socket;
-    if (sockaddr.getAddress() == null) {
-      InetAddress address = InetAddress.getByName(sockaddr.getHostString());
-      sockaddr = new InetSocketAddress(address, sockaddr.getPort());
-    }
-    SocketFactory sf = coreSocketCreator.getSslContext().getSocketFactory();
-    socket = sf.createSocket();
+    Socket socket = socketFactory.createSocket();
-      coreSocketCreator.configureClientSSLSocket(socket, timeout);
+      SSLSocketFactory sf = coreSocketCreator.getSslContext().getSocketFactory();
+      socket = sf.createSocket(socket, addr.getHostName(), addr.getPort(), true);
+      coreSocketCreator.configureClientSSLSocket(socket, addr, timeout);
