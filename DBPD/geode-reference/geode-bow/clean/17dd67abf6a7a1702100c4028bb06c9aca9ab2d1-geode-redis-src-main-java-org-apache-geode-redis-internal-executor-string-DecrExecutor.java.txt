GEODE-8182: change String commands to use one region (#5165)

* changed all String commands to use the function and to use a single region
* renabled tests ignored for GEODE-8182
* removed the RedisLockService since it is not used in the new data model
* removed the unused del methods on RedisSetCommands and RedisHashCommands
* removed the KeyRegistar since it was no longer needed with a single data region

Co-authored-by: Ray Ingles <ringles@pivotal.io>
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.RedisData;
-import org.apache.geode.redis.internal.RegionProvider;
-    RegionProvider regionProvider = context.getRegionProvider();
-    Region<ByteArrayWrapper, RedisData> region = regionProvider.getStringsRegion();
-
-    checkAndSetDataType(key, context);
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+    /*
+     * Value does not exist
+     */
+    ByteArrayWrapper valueWrapper = getRedisStringCommands(context).get(key);
-      /*
-       * Value does not exist
-       */
-      RedisString redisString = (RedisString) region.get(key);
-
-      if (redisString == null) {
-        byte[] newValue = INIT_VALUE_BYTES;
-        region.put(key, new RedisString(new ByteArrayWrapper(newValue)));
-        command
-            .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), INIT_VALUE_INT));
-        return;
-      }
-
-      ByteArrayWrapper valueWrapper = redisString.getValue();
-      /*
-       * Value exists
-       */
-
-      String stringValue = valueWrapper.toString();
-      try {
-        value = Long.parseLong(stringValue);
-      } catch (NumberFormatException e) {
-        command.setResponse(
-            Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_VALUE_NOT_USABLE));
-        return;
-      }
-
-      if (value == Long.MIN_VALUE) {
-        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-        return;
-      }
-
-      value--;
-
-      stringValue = "" + value;
-
-      region.put(key, new RedisString(
-          new ByteArrayWrapper(
-              Coder.stringToBytes(stringValue))));
-
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
+    if (valueWrapper == null) {
+      byte[] newValue = INIT_VALUE_BYTES;
+      getRedisStringCommands(context).set(key, new ByteArrayWrapper(newValue), null);
+      command
+          .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), INIT_VALUE_INT));
+
+    /*
+     * Value exists
+     */
+
+    String stringValue = valueWrapper.toString();
+    try {
+      value = Long.parseLong(stringValue);
+    } catch (NumberFormatException e) {
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_VALUE_NOT_USABLE));
+      return;
+    }
+
+    if (value == Long.MIN_VALUE) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
+      return;
+    }
+
+    value--;
+
+    stringValue = "" + value;
+    ByteArrayWrapper newValue = new ByteArrayWrapper(Coder.stringToBytes(stringValue));
+    getRedisStringCommands(context).set(key, newValue, null);
+
