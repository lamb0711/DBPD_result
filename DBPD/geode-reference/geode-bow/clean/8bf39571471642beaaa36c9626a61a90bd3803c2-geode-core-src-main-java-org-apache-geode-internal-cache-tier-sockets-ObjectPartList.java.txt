Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Encapsulates list containing objects, serialized objects, raw byte arrays, or
- * exceptions. It can optionally also hold the list of associated keys. Assumes
- * that keys are either provided for all entries or for none.
+ * Encapsulates list containing objects, serialized objects, raw byte arrays, or exceptions. It can
+ * optionally also hold the list of associated keys. Assumes that keys are either provided for all
+ * entries or for none.
-  
+
-  
+
-      throw new IndexOutOfBoundsException("Cannot add object part beyond "
-          + maxSize + " elements");
+      throw new IndexOutOfBoundsException("Cannot add object part beyond " + maxSize + " elements");
-      throw new IllegalArgumentException("Invalid size " + maxSize
-          + " to ObjectPartList constructor");
+      throw new IllegalArgumentException(
+          "Invalid size " + maxSize + " to ObjectPartList constructor");
-    }
-    else {
+    } else {
-  
+
-  
+
-    
+
-    }
-    else if (other.hasKeys) {
+    } else if (other.hasKeys) {
-  
+
-  
+
-  
+
-      throw new IllegalArgumentException("Invalid size " + maxSize
-          + " to ObjectPartList.reinit");
+      throw new IllegalArgumentException("Invalid size " + maxSize + " to ObjectPartList.reinit");
-          out.write((byte[])value);
-        }
-        else if (objectType == EXCEPTION) {
+          out.write((byte[]) value);
+        } else if (objectType == EXCEPTION) {
-          DataSerializer
-              .writeByteArray(CacheServerHelper.serialize(value), out);
+          DataSerializer.writeByteArray(CacheServerHelper.serialize(value), out);
-        }
-        else {
+        } else {
-    }
-    else {
+    } else {
-        }
-        else {
+        } else {
-    for (Object v: this.objects) {
+    for (Object v : this.objects) {
