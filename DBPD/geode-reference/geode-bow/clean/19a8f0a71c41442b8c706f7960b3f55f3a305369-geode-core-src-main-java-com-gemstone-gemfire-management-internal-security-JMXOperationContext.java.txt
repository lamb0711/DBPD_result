GEODE-17: WIP adding JMX security

+import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.management.AsyncEventQueueMXBean;
+import com.gemstone.gemfire.management.CacheServerMXBean;
+import com.gemstone.gemfire.management.DiskStoreMXBean;
+import com.gemstone.gemfire.management.DistributedLockServiceMXBean;
+import com.gemstone.gemfire.management.DistributedRegionMXBean;
+import com.gemstone.gemfire.management.GatewayReceiverMXBean;
+import com.gemstone.gemfire.management.GatewaySenderMXBean;
+import com.gemstone.gemfire.management.LocatorMXBean;
+import com.gemstone.gemfire.management.LockServiceMXBean;
+import com.gemstone.gemfire.management.ManagerMXBean;
+import com.gemstone.gemfire.management.MemberMXBean;
+import com.gemstone.gemfire.management.RegionMXBean;
+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.*;
-
+/**
+ * It describes current JMX MBean Method call and its parameters.
+ * OpCode returned by JMXOperationContext is retrieved from ResourceOperation annotation
+ * on the target methodName
+ *
+ * @author tushark
+ * @since 9.0
+ *
+ */
-	
-	private static Map<String,ResourceOperationCode> cacheDSResourceOps = null;
-	private static Map<String,ResourceOperationCode> cacheMemberResourceOps = null;
-	private static Map<String,ResourceOperationCode> cacheRegionResourceOps = null;
-	private static Map<String,ResourceOperationCode> cacheDiskStoreResourceOps = null;
+  private ObjectName name;
+  private String methodName;
+
+  private static Map<Class<?>,Map<String,ResourceOperationCode>> cachedResourceOpsMapping = new HashMap<Class<?>,Map<String,ResourceOperationCode>>();
+  private static Map<String,ResourceOperationCode> distributedSystemMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> diskStoreMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> cacheServerMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> gatewayReceiverMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> gatewaySenderMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> lockServiceMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> managerMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> memberMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> regionMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> locatorMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> distributedLockServiceMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> distributedRegionMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> asyncEventQueueMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> accessControlMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+
-		//cache all resource annotations
+
+    cachedResourceOpsMapping.put(DistributedSystemMXBean.class, distributedSystemMXBeanResourceOps);
+    cachedResourceOpsMapping.put(DiskStoreMXBean.class, diskStoreMXBeanResourceOps);
+    cachedResourceOpsMapping.put(CacheServerMXBean.class, cacheServerMXBeanResourceOps);
+    cachedResourceOpsMapping.put(GatewayReceiverMXBean.class, gatewayReceiverMXBeanResourceOps);
+    cachedResourceOpsMapping.put(GatewaySenderMXBean.class, gatewaySenderMXBeanResourceOps);
+    cachedResourceOpsMapping.put(LockServiceMXBean.class, lockServiceMXBeanResourceOps);
+    cachedResourceOpsMapping.put(ManagerMXBean.class, managerMXBeanResourceOps);
+    cachedResourceOpsMapping.put(MemberMXBean.class, memberMXBeanResourceOps);
+    cachedResourceOpsMapping.put(RegionMXBean.class, regionMXBeanResourceOps);
+    cachedResourceOpsMapping.put(LocatorMXBean.class, locatorMXBeanResourceOps);
+    cachedResourceOpsMapping.put(DistributedLockServiceMXBean.class, distributedLockServiceMXBeanResourceOps);
+    cachedResourceOpsMapping.put(DistributedRegionMXBean.class, distributedRegionMXBeanResourceOps);
+    cachedResourceOpsMapping.put(AsyncEventQueueMXBean.class, asyncEventQueueMXBeanResourceOps);
+    cachedResourceOpsMapping.put(AccessControlMXBean.class, accessControlMXBeanResourceOps);
+
-			Class[] klassList = ClasspathScanLoadHelper.getClasses("com.gemstone.gemfire.management");
-			for(Class klass : klassList) {
+      Class<?>[] klassList = ClasspathScanLoadHelper.getClasses(MANAGEMENT_PACKAGE);
+      for(Class<?> klass : klassList) {
-						//ResourceOperation op = method.getDeclaredAnnotations();(ResourceOperation.class);
-					//TODO : Log all cached operations
-	private static void cache(Class klass, String name, ResourceOperation op) {
+  private static void cache(Class<?> klass, String name, ResourceOperation op) {
-		if(code==null){
-			if(name.startsWith("list") || name.startsWith("fetch") || name.startsWith("view")
-					|| name.startsWith("show")){
+    if(code==null && isGetterSetter(name)){
-			} else if (name.startsWith("get")){
-				code = ResourceOperationCode.READ_DS;
-			} else if (name.startsWith("is")){
-				code = ResourceOperationCode.READ_DS;
-			} else if (name.startsWith("set")){
-				code = ResourceOperationCode.SET_DS;
-			}
+
-		/*
-		System.out.println("Klass " + klass + " mname : " + name);
-		if (code != null)
-			System.out.println("ResourceOperation code=" + code);
-		else
-			System.out.println("ResourceOperation is null");*/
-		
-		Resource targetedResource = null;
-		
-		if(op!=null){
-			targetedResource = op.resource();
-		} else {
-			if(klass.equals(DistributedSystemMXBean.class)) {
-				targetedResource = Resource.DISTRIBUTED_SYSTEM;
-			}
-			//TODO : Add other resource and mbeans
-		}
-		
-		/* Comment for timebeing to avoid falling for other methods
-		if(!isGetterSetter(name) && code==null){
-			throw new GemFireConfigException(
-					"Error while configuring authorization for jmx. No authorization defined for " 
+    if (code == null && cachedResourceOpsMapping.keySet().contains(klass) && !isGetterSetter(name)) {
+      throw new GemFireConfigException("Error while configuring authorization for jmx. No opCode defined for "
-		}*/
-		if(targetedResource!=null) {
-			switch (targetedResource) {
-			case DISTRIBUTED_SYSTEM:
-				if (code != null){
-					if(cacheDSResourceOps==null)
-						cacheDSResourceOps = new HashMap<String,ResourceOperationCode>();
-					cacheDSResourceOps.put(name, code);
-				break;
+
+    final Map<String,ResourceOperationCode> resourceOpsMap = cachedResourceOpsMapping.get(klass);
+    if(resourceOpsMap==null) {
+      if (cachedResourceOpsMapping.keySet().contains(klass))
+        throw new GemFireConfigException("Unknown MBean " + klass.getCanonicalName());
+      else {
+        LogService.getLogger().warn("Unsecured mbean " + klass);
+    else {
+      resourceOpsMap.put(name, code);
+    }
-	private static boolean isGetterSetter(String name) {
-		if(name.startsWith("is") || name.startsWith("get") ||  name.startsWith("set") ||  name.startsWith("fetch")
-			||  name.startsWith("list") ||  name.startsWith("view") ||  name.startsWith("show") ) 
+  public static boolean isGetterSetter(String name) {
+    if(name.startsWith(GETTER_IS) || name.startsWith(GETTER_GET) ||  name.startsWith(GETTER_FETCH)
+      ||  name.startsWith(GETTER_LIST) ||  name.startsWith(GETTER_VIEW) ||  name.startsWith(GETTER_SHOW) ||  name.startsWith(GETTER_HAS))
-		if(name.equals(MBeanJMXAdapter.getDistributedSystemName())){
-			resourceCode = cacheDSResourceOps.get(methodName);
+    Class<?> klass = getMbeanClass(name);
+    Map<String,ResourceOperationCode> resourceOpsMap = cachedResourceOpsMapping.get(klass);
+    resourceCode = resourceOpsMap.get(methodName);
+    this.methodName = methodName;
+    this.name = name;
+
+    //If getAttr is not found try for isAttr ie. boolean getter
+    if(resourceCode==null) {
+      if(this.methodName.startsWith(GET_PREFIX)) {
+        String methodNameBooleanGetter = GET_IS_PREFIX + this.methodName.substring(GET_PREFIX.length());
+        if(resourceOpsMap.containsKey(methodNameBooleanGetter)){
+          resourceCode = resourceOpsMap.get(methodNameBooleanGetter);
+          this.methodName = methodNameBooleanGetter;
+        }
+    //If resourceCode is still null most likely its wrong method name so just allow it pass
+    if(resourceCode==null) {
+      resourceCode = ResourceOperationCode.LIST_DS;
+    }
+  }
+
+
+
+
+  private Class<?> getMbeanClass(ObjectName name) {
+    if (name.equals(MBeanJMXAdapter.getDistributedSystemName()))
+      return DistributedSystemMXBean.class;
+    else {
+      String service = name.getKeyProperty(MBEAN_KEY_SERVICE);
+      String mbeanType = name.getKeyProperty(MBEAN_KEY_TYPE);
+
+      if (MBEAN_TYPE_DISTRIBUTED.equals(mbeanType)) {
+        if (MBEAN_SERVICE_SYSTEM.equals(service)) {
+          return DistributedSystemMXBean.class;
+        } else if (MBEAN_SERVICE_REGION.equals(service)) {
+          return DistributedRegionMXBean.class;
+        } else if (MBEAN_SERVICE_LOCKSERVICE.equals(service)) {
+          return DistributedLockServiceMXBean.class;
+        } else {
+          throw new RuntimeException("Unknown mbean type " + name);
+        }
+      } else if (MBEAN_TYPE_MEMBER.equals(mbeanType)) {
+        if (service == null) {
+          return MemberMXBean.class;
+        } else {
+          if (MBEAN_SERVICE_MANAGER.equals(service)) {
+            return ManagerMXBean.class;
+          } else if (MBEAN_SERVICE_CACHESERVER.equals(service)) {
+            return CacheServerMXBean.class;
+          } else if (MBEAN_SERVICE_REGION.equals(service)) {
+            return RegionMXBean.class;
+          } else if (MBEAN_SERVICE_LOCKSERVICE.equals(service)) {
+            return LockServiceMXBean.class;
+          } else if (MBEAN_SERVICE_DISKSTORE.equals(service)) {
+            return DiskStoreMXBean.class;
+          } else if (MBEAN_SERVICE_GATEWAY_RECEIVER.equals(service)) {
+            return GatewayReceiverMXBean.class;
+          } else if (MBEAN_SERVICE_GATEWAY_SENDER.equals(service)) {
+            return GatewaySenderMXBean.class;
+          } else if (MBEAN_SERVICE_ASYNCEVENTQUEUE.equals(service)) {
+            return AsyncEventQueueMXBean.class;
+          } else if (MBEAN_SERVICE_LOCATOR.equals(service)) {
+            return LocatorMXBean.class;
+          } else {
+            throw new RuntimeException("Unknown mbean type " + name);
+          }
+        }
+      } else {
+        throw new RuntimeException("Unknown mbean type " + name);
+      }
+    }
+  }
-	public static Map<String, ResourceOperationCode> getCacheDSResourceOps() {
-		return cacheDSResourceOps;
+  public String toString(){
+    return "JMXOpCtx(on="+name+",method="+methodName+")";
-	public static void setCacheDSResourceOps(
-			Map<String, ResourceOperationCode> cacheDSResourceOps) {
-		JMXOperationContext.cacheDSResourceOps = cacheDSResourceOps;
-	
-
-}
