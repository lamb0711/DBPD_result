GEODE-1571: use constructor instead of static method to create security-manager and post-processor

* use security-post-processor to specify the new PostProcessor
* use constructor instead of static method to create security-manager and post-processor
* fix tests
* This closes #198

-import java.lang.reflect.Method;
-import com.gemstone.gemfire.security.AuthenticationRequiredException;
-      securityManager = getObject(securityConfig, SecurityManager.class);
+      securityManager = getObjectOfType(securityConfig, SecurityManager.class);
-    String customPostProcessor = securityProps.getProperty(SECURITY_CLIENT_ACCESSOR_PP);
-    Object postProcessObject = getObject(customPostProcessor);
-    if(postProcessObject instanceof PostProcessor){
-      postProcessor = (PostProcessor) postProcessObject;
+    String customPostProcessor = securityProps.getProperty(SECURITY_POST_PROCESSOR);
+    if( !StringUtils.isBlank(customPostProcessor)) {
+      postProcessor = getObjectOfType(customPostProcessor, PostProcessor.class);
-
-  public static <T> T getObject(String factoryName, Class<T> clazz) {
-    Object object = null;
-
-    if (StringUtils.isBlank(factoryName)) {
-      return null;
-    }
+  public static <T> T getObjectOfType(String className, Class<T> expectedClazz) {
+    Class actualClass = null;
-      Method instanceGetter = ClassLoadUtil.methodFromName(factoryName);
-      object = instanceGetter.invoke(null, (Object[]) null);
+      actualClass = ClassLoadUtil.classFromName(className);
-      throw new AuthenticationRequiredException(ex.toString(), ex);
+      throw new GemFireSecurityException(ex.toString(), ex);
-    if(!clazz.isAssignableFrom(object.getClass())){
-      throw new GemFireSecurityException("Expecting a "+clazz.getName()+" interface.");
+    if(!expectedClazz.isAssignableFrom(actualClass)){
+      throw new GemFireSecurityException("Expecting a "+expectedClazz.getName()+" class.");
-    return (T)object;
-  }
-  public static Object getObject(String factoryName) {
-    if (StringUtils.isBlank(factoryName)) {
-      return null;
-    }
+    T actualObject = null;
-      Method instanceGetter = ClassLoadUtil.methodFromName(factoryName);
-      return instanceGetter.invoke(null, (Object[]) null);
+      actualObject =  (T)actualClass.newInstance();
+    } catch (Exception e) {
+      throw new GemFireSecurityException("Error instantiating "+actualClass.getName(), e);
-    catch (Exception ex) {
-      throw new AuthenticationRequiredException(ex.toString(), ex);
-    }
+    return actualObject;
+  public static SecurityManager getSecurityManager(){
+    return securityManager;
+  }
