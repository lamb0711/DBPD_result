Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/incubator-geode into develop

+  protected Runnable internalDuringApplyChanges;
-        // apply changes to the cache
-        applyChanges(entries);
-        // For internal testing
-        if (this.internalAfterApplyChanges != null) {
-          this.internalAfterApplyChanges.run();
+        lockTXRegions(regions);
+
+        try {
+          // apply changes to the cache
+          applyChanges(entries);
+          // For internal testing
+          if (this.internalAfterApplyChanges != null) {
+            this.internalAfterApplyChanges.run();
+          }
+
+          // build and send the message
+          msg = buildMessage();
+          this.commitMessage = msg;
+          if (this.internalBeforeSend != null) {
+            this.internalBeforeSend.run();
+          }
+
+          msg.send(this.locks.getDistributedLockId());
+          // For internal testing
+          if (this.internalAfterSend != null) {
+            this.internalAfterSend.run();
+          }
+
+          firePendingCallbacks();
+          /*
+           * This is to prepare the commit message for the caller, make sure all events are in
+           * there.
+           */
+          this.commitMessage = buildCompleteMessage();
+        } finally {
+          unlockTXRegions(regions);
-
-        // build and send the message
-        msg = buildMessage();
-        this.commitMessage = msg;
-        if (this.internalBeforeSend != null) {
-          this.internalBeforeSend.run();
-        }
-
-
-
-        msg.send(this.locks.getDistributedLockId());
-        // For internal testing
-        if (this.internalAfterSend != null) {
-          this.internalAfterSend.run();
-        }
-
-        firePendingCallbacks();
-        /*
-         * This is to prepare the commit message for the caller, make sure all events are in there.
-         */
-        this.commitMessage = buildCompleteMessage();
-
+  private void lockTXRegions(IdentityHashMap<LocalRegion, TXRegionState> regions) {
+    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = regions.entrySet().iterator();
+    while (it.hasNext()) {
+      Map.Entry<LocalRegion, TXRegionState> me = it.next();
+      LocalRegion r = me.getKey();
+      r.getRegionMap().lockRegionForAtomicTX(r);
+    }
+  }
+
+  private void unlockTXRegions(IdentityHashMap<LocalRegion, TXRegionState> regions) {
+    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = regions.entrySet().iterator();
+    while (it.hasNext()) {
+      Map.Entry<LocalRegion, TXRegionState> me = it.next();
+      LocalRegion r = me.getKey();
+      r.getRegionMap().unlockRegionForAtomicTX(r);
+    }
+  }
+
+        if (this.internalDuringApplyChanges != null) {
+          this.internalDuringApplyChanges.run();
+        }
+   * Add an internal callback which is run as each transaction change is applied.
+   */
+  public void setDuringApplyChanges(Runnable duringApplyChanges) {
+    this.internalDuringApplyChanges = duringApplyChanges;
+  }
+
+  /**
