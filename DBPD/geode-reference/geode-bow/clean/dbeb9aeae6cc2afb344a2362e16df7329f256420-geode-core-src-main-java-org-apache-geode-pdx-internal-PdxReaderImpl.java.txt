Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A new instance of this class is created each time we deserialize a pdx.
- * It is also used as the base class of our {@link PdxInstance} implementation.
- * It is serializable because PdxInstance is.
+ * A new instance of this class is created each time we deserialize a pdx. It is also used as the
+ * base class of our {@link PdxInstance} implementation. It is serializable because PdxInstance is.
-  
+
+
-  
+
+
-          "Expected boolean field but found field of type "
-              + ft.getTypeIdString());
+          "Expected boolean field but found field of type " + ft.getTypeIdString());
+
+
-          "Expected short field but found field of type "
-              + ft.getTypeIdString());
+          "Expected short field but found field of type " + ft.getTypeIdString());
+
+
+
-          "Expected float field but found field of type "
-              + ft.getTypeIdString());
+          "Expected float field but found field of type " + ft.getTypeIdString());
+
-          "Expected double field but found field of type "
-              + ft.getTypeIdString());
+          "Expected double field but found field of type " + ft.getTypeIdString());
+
+
-          "Expected String field but found field of type "
-              + ft.getTypeIdString());
+          "Expected String field but found field of type " + ft.getTypeIdString());
+
-          "Expected Object field but found field of type "
-              + ft.getTypeIdString());
+          "Expected Object field but found field of type " + ft.getTypeIdString());
+
-          "Expected char[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected char[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected boolean[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected boolean[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected byte[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected byte[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected short[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected short[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected int[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected int[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected long[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected long[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected float[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected float[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected double[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected double[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected String[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected String[] field but found field of type " + ft.getTypeIdString());
+
-          "Expected Object[] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected Object[] field but found field of type " + ft.getTypeIdString());
+
+
-          "Expected byte[][] field but found field of type "
-              + ft.getTypeIdString());
+          "Expected byte[][] field but found field of type " + ft.getTypeIdString());
+
-  
+
-   * @param idx
-   *          of the variable length field
+   * @param idx of the variable length field
-      return dis.readShort(size - idx * DataSize.SHORT_SIZE)
-          & MAX_UNSIGNED_SHORT;
+      return dis.readShort(size - idx * DataSize.SHORT_SIZE) & MAX_UNSIGNED_SHORT;
-    return this.dis.size()
-      - blobType.getVariableLengthFieldCount()
-      * getSizeOfOffset();
+    return this.dis.size() - blobType.getVariableLengthFieldCount() * getSizeOfOffset();
-  
+
-  
+
-    case CHAR:
-      return readChar(ft);
-    case BOOLEAN:
-      return readBoolean(ft);
-    case BYTE:
-      return readByte(ft);
-    case SHORT:
-      return readShort(ft);
-    case INT:
-      return readInt(ft);
-    case LONG:
-      return readLong(ft);
-    case FLOAT:
-      return readFloat(ft);
-    case DOUBLE:
-      return readDouble(ft);
-    case DATE:
-      return readDate(ft);
-    case STRING:
-      return readString(ft);
-    case OBJECT:
-      return readObject(ft);
-    case BOOLEAN_ARRAY:
-      return readBooleanArray(ft);
-    case CHAR_ARRAY:
-      return readCharArray(ft);
-    case BYTE_ARRAY:
-      return readByteArray(ft);
-    case SHORT_ARRAY:
-      return readShortArray(ft);
-    case INT_ARRAY:
-      return readIntArray(ft);
-    case LONG_ARRAY:
-      return readLongArray(ft);
-    case FLOAT_ARRAY:
-      return readFloatArray(ft);
-    case DOUBLE_ARRAY:
-      return readDoubleArray(ft);
-    case STRING_ARRAY:
-      return readStringArray(ft);
-    case OBJECT_ARRAY:
-      return readObjectArray(ft);
-    case ARRAY_OF_BYTE_ARRAYS:
-      return readArrayOfByteArrays(ft);
-    default:
-      throw new InternalGemFireException("Unhandled field type " + ft.getFieldType());
+      case CHAR:
+        return readChar(ft);
+      case BOOLEAN:
+        return readBoolean(ft);
+      case BYTE:
+        return readByte(ft);
+      case SHORT:
+        return readShort(ft);
+      case INT:
+        return readInt(ft);
+      case LONG:
+        return readLong(ft);
+      case FLOAT:
+        return readFloat(ft);
+      case DOUBLE:
+        return readDouble(ft);
+      case DATE:
+        return readDate(ft);
+      case STRING:
+        return readString(ft);
+      case OBJECT:
+        return readObject(ft);
+      case BOOLEAN_ARRAY:
+        return readBooleanArray(ft);
+      case CHAR_ARRAY:
+        return readCharArray(ft);
+      case BYTE_ARRAY:
+        return readByteArray(ft);
+      case SHORT_ARRAY:
+        return readShortArray(ft);
+      case INT_ARRAY:
+        return readIntArray(ft);
+      case LONG_ARRAY:
+        return readLongArray(ft);
+      case FLOAT_ARRAY:
+        return readFloatArray(ft);
+      case DOUBLE_ARRAY:
+        return readDoubleArray(ft);
+      case STRING_ARRAY:
+        return readStringArray(ft);
+      case OBJECT_ARRAY:
+        return readObjectArray(ft);
+      case ARRAY_OF_BYTE_ARRAYS:
+        return readArrayOfByteArrays(ft);
+      default:
+        throw new InternalGemFireException("Unhandled field type " + ft.getFieldType());
-  
+
+
-    GemFireCacheImpl gfc = GemFireCacheImpl.getForPdx("PDX registry is unavailable because the Cache has been closed.");
+    GemFireCacheImpl gfc = GemFireCacheImpl
+        .getForPdx("PDX registry is unavailable because the Cache has been closed.");
-    
+
-                .toLocalizedString(pdxClassName), e);
+                .toLocalizedString(pdxClassName),
+            e);
-      ((PdxSerializable)result).fromData(pdxReader);
+      ((PdxSerializable) result).fromData(pdxReader);
-          throw new PdxSerializationException("Could not deserialize pdx because the pdx serializer's fromData returned false for a pdx of class " + pdxClassName);
+          throw new PdxSerializationException(
+              "Could not deserialize pdx because the pdx serializer's fromData returned false for a pdx of class "
+                  + pdxClassName);
-        throw new PdxSerializationException("Could not deserialize pdx because a PdxSerializer does not exist.");
+        throw new PdxSerializationException(
+            "Could not deserialize pdx because a PdxSerializer does not exist.");
-      PdxUnreadData ud = getReadUnreadFieldsCalled();  
+      PdxUnreadData ud = getReadUnreadFieldsCalled();
-          ((TrackingPdxReaderImpl)pdxReader).internalReadUnreadFields(ud);
+          ((TrackingPdxReaderImpl) pdxReader).internalReadUnreadFields(ud);
-          ud = ((TrackingPdxReaderImpl)pdxReader).internalReadUnreadFields(new PdxUnreadData());
+          ud = ((TrackingPdxReaderImpl) pdxReader).internalReadUnreadFields(new PdxUnreadData());
+
-  
+
-      return ((DefaultPdxField)ft).getDefaultBytes();
+      return ((DefaultPdxField) ft).getDefaultBytes();
-    int nextFieldIdx = ft.getFieldIndex()+1;
+    int nextFieldIdx = ft.getFieldIndex() + 1;
-  
+
-  
+
-  
+
-   * Provides optimized deserialization when a blob exactly matches
-   * the fields of the target class when using {@link AutoSerializableManager}.
+   * Provides optimized deserialization when a blob exactly matches the fields of the target class
+   * when using {@link AutoSerializableManager}.
+   * 
-    for (PdxFieldWrapper f: ci.getFields()) {
-      //System.out.println("DEBUG reading field=" + f.getField().getName() + " offset=" + reader.dis.position());
+    for (PdxFieldWrapper f : ci.getFields()) {
+      // System.out.println("DEBUG reading field=" + f.getField().getName() + " offset=" +
+      // reader.dis.position());
-    if (this.dis instanceof PdxInstanceInputStream) {
+    if (this.dis instanceof PdxInputStream) {
-  
+
-  public Object readRawField(String field){
+  public Object readRawField(String field) {
+    } else {
+      PdxString pdxString = getPdxStringFromObjectField(ft);
+      if (pdxString != null)
+        return pdxString;
-    else{
-      return readField(field);
-    }
+    return readField(field);
-  
+
+  /**
+   * This method checks whether Object field is String type. If its String then it returns PdxString
+   * otherwise null.
+   * 
+   * @param ft
+   * @return
+   */
+  private PdxString getPdxStringFromObjectField(PdxField ft) {
+    if (ft.getFieldType() == FieldType.OBJECT) {
+      ByteSource buffer = dis.getBuffer();
+      byte[] bytes = null;
+      if (buffer.hasArray()) {
+        bytes = buffer.array();
+      } else {
+        throw new IllegalStateException();
+      }
+      int offset = getPositionForField(ft) + buffer.arrayOffset();
+      // Do not create PdxString if the field is NULL
+      if (bytes[offset] == DSCODE.STRING || bytes[offset] == DSCODE.STRING_BYTES
+          || bytes[offset] == DSCODE.HUGE_STRING || bytes[offset] == DSCODE.HUGE_STRING_BYTES) {
+        return new PdxString(bytes, offset);
+      }
+    }
+    return null;
+  }
+
-  public PdxString readPdxString(PdxField ft){
+  public PdxString readPdxString(PdxField ft) {
-    if(buffer.hasArray()){
+    if (buffer.hasArray()) {
-    }
-    else{
+    } else {
-    if(bytes[offset] == DSCODE.NULL || bytes[offset] == DSCODE.NULL_STRING){
+    if (bytes[offset] == DSCODE.NULL || bytes[offset] == DSCODE.NULL_STRING) {
-    return new PdxString(bytes, offset); 
+    return new PdxString(bytes, offset);
