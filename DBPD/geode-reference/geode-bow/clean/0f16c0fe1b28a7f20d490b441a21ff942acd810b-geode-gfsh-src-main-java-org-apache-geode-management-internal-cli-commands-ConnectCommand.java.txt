GEODE-8331: allow GFSH to connect to other versions of cluster (#5375)


-    String gfshVersion = gfsh.getVersion();
+    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10
+    String gfshVersion = gfsh.getVersion();
-      String gfshGeodeSerializationVersion = gfsh.getGeodeSerializationVersion();
-      String remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();
-      if (hasSameMajorMinor(gfshGeodeSerializationVersion, remoteGeodeSerializationVersion)) {
+      remoteVersion = invoker.getRemoteVersion();
+      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));
+      if (versionComponent(remoteVersion, VERSION_MAJOR).equals("1") && minorVersion >= 10 ||
+          versionComponent(remoteVersion, VERSION_MAJOR).equals("9") && minorVersion >= 9) {
+        InfoResultModel versionInfo = result.addInfo("versionInfo");
+        versionInfo.addLine("You are connected to a cluster of version: " + remoteVersion);
-    } catch (Exception e) {
-      // we failed to get the remote geode serialization version; get remote product version for
-      // error message
-      try {
-        remoteVersion = invoker.getRemoteVersion();
-      } catch (Exception ex) {
-        gfsh.logInfo("failed to get the the remote version.", ex);
-      }
+    } catch (Exception ex) {
+      // if unable to get the remote version, we are certainly talking to
+      // a pre-1.5 cluster
+      gfsh.logInfo("failed to get the the remote version.", ex);
-  private static boolean hasSameMajorMinor(String gfshVersion, String remoteVersion) {
-    return versionComponent(remoteVersion, VERSION_MAJOR)
-        .equalsIgnoreCase(versionComponent(gfshVersion, VERSION_MAJOR))
-        && versionComponent(remoteVersion, VERSION_MINOR)
-            .equalsIgnoreCase(versionComponent(gfshVersion, VERSION_MINOR));
-  }
-
