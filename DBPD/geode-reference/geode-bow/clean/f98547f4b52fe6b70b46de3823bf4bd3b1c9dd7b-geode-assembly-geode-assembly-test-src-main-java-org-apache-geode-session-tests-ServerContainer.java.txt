GEODE-3613: Allocate unique ports to containers

ServerContainer sometimes assigned the same port to multiple containers.

ServerContainer used AvailablePortHelper to allocate available ports.
Due to an inherent design flaw, AvailablePortHelper sometimes delivers
the same port number on multiple calls, which results in the same port
being used for multiple purposes.

ServerContainer now allocates ports using a single UniquePortSupplier
created by the test.

Additionally:

- Convert Cargo-based tests from DUnit base class to rule-based
- Start a new locator for each test
- Add cargo version to dependency-versions.properties
- Give each test class its own temp directory
- Fix bad check for container state validity
- Fix modify_war script to detect missing jar command and abort
- General test cleanup and de-duplication
- Announce start and end of each test to stdout

Co-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>
Co-Authored-By: Dale Emery <demery@pivotal.io>

+import java.util.UUID;
+import java.util.function.IntSupplier;
-import org.apache.geode.internal.AvailablePortHelper;
+  private final IntSupplier portSupplier;
+   * @param portSupplier allocates ports for use by the container
-      String containerDescriptors) throws IOException {
+      String containerDescriptors, IntSupplier portSupplier) throws IOException {
+    this.portSupplier = portSupplier;
-    logger.info("Creating new container " + description);
+    logger.info("Creating new container {}", description);
-    logger.info("Gemfire logs can be found in " + gemfireLogFile.getAbsolutePath());
+    logger.info("Gemfire logs can be found in {}", gemfireLogFile.getAbsolutePath());
-        Long.toString(System.nanoTime())));
+        UUID.randomUUID().toString()));
-    logger.info("Deployed WAR file at " + war.getFile());
+    logger.info("Deployed WAR file at {}", war.getFile());
-    int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(4);
-    config.setProperty(ServletPropertySet.PORT, Integer.toString(ports[0]));
-    config.setProperty(GeneralPropertySet.RMI_PORT, Integer.toString(ports[1]));
-    config.setProperty(TomcatPropertySet.AJP_PORT, Integer.toString(ports[2]));
+    int servletPort = portSupplier.getAsInt();
+    int containerRmiPort = portSupplier.getAsInt();
+    int tomcatAjpPort = portSupplier.getAsInt();
+    config.setProperty(ServletPropertySet.PORT, Integer.toString(servletPort));
+    config.setProperty(GeneralPropertySet.RMI_PORT, Integer.toString(containerRmiPort));
+    config.setProperty(TomcatPropertySet.AJP_PORT, Integer.toString(tomcatAjpPort));
-    String jvmArgs = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=" + ports[3];
+    int jvmJmxPort = portSupplier.getAsInt();
+    String jvmArgs = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=" + jvmJmxPort;
-      logger.info("Starting container " + description + "RMI Port: " + ports[3]);
+      logger.info("Starting container {} RMI Port: {}", description, jvmJmxPort);
+    System.out.println("Logs for container " + this);
+
+    dumpConfiguration();
+  }
+
+  private void dumpConfiguration() {
+    System.out.println("-------------------------------------------");
+    System.out.println("Configuration for container " + this);
+    System.out.println("-------------------------------------------");
+    LocalConfiguration configuration = getConfiguration();
+    System.out.format("Name: %s%n", configuration);
+    System.out.format("Class: %s%n", configuration.getClass());
+    System.out.println("Properties:");
+    configuration.getProperties().entrySet().forEach(System.out::println);
+    System.out.println("-------------------------------------------");
+    System.out.println("");
-      logger.info("Deleting configuration folder " + configDir.getAbsolutePath());
+      logger.info("Deleting configuration folder {}", configDir.getAbsolutePath());
