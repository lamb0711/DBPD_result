GEODE-17: WIP adding JMX security

-import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.GemFireConfigException;
+import com.gemstone.gemfire.management.internal.cli.i18n.CliStrings;
+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.*;
-
+/**
+ * It represents command being executed and all passed options and option-values.
+ * ResourceOpCode returned by CLIOperationContext is retrieved from ResourceOperation
+ * annotation on the target command
+ *
+ * @author tushark
+ * @since 9.0
+ */
-		code = OperationCode.RESOURCE;
-		this.resourceCode = findResourceCode(parseResult.getCommandName()); //need to add this to ParseResult 
+    this.resourceCode = findResourceCode(parseResult.getCommandName());
+    this.code = findOperationCode(parseResult.getCommandName());
+  }
+
+  /**
+   * This method returns OperationCode for command. Some commands perform data
+   * operations, for such commands OperationCode returned is not RESOURCE but
+   * corresponding data operation as defined in OperationCode
+   *
+   * @param commandName
+   * @return OperationCode
+   */
+  private OperationCode findOperationCode(String commandName) {
+
+    if(CliStrings.GET.equals(commandName) || CliStrings.LOCATE_ENTRY.equals(commandName))
+      return OperationCode.GET;
+
+    if(CliStrings.PUT.equals(commandName))
+      return OperationCode.PUT;
+
+    if(CliStrings.QUERY.equals(commandName))
+      return OperationCode.QUERY;
+
+    if (CliStrings.REMOVE.equals(commandName)) {
+      if (commandOptions.containsKey(CliStrings.REMOVE__ALL)
+          && "true".equals(commandOptions.get(CliStrings.REMOVE__ALL))) {
+        return OperationCode.REMOVEALL;
+      } else
+        return OperationCode.DESTROY;
+    }
+
+    if(CliStrings.CLOSE_DURABLE_CQS.equals(commandName)) {
+      return OperationCode.CLOSE_CQ;
+    }
+
+    if(CliStrings.CREATE_REGION.equals(commandName)) {
+      return OperationCode.REGION_CREATE;
+    }
+
+    if(CliStrings.DESTROY_REGION.equals(commandName)) {
+      return OperationCode.REGION_DESTROY;
+    }
+
+    if(CliStrings.EXECUTE_FUNCTION.equals(commandName)) {
+      return OperationCode.EXECUTE_FUNCTION;
+    }
+
+    //"stop cq"
+    //"removeall",
+    //"get durable cqs",
+    return OperationCode.RESOURCE;
-	public static void registerCommand(CommandManager cmdManager, Method method, CommandTarget commandTarget){	  
-	  //Save command manager instance and create a local parser for parsing the commands
+	public static void registerCommand(CommandManager cmdManager, Method method, CommandTarget commandTarget){
-		ResourceOperationCode code = null;
+    ResourceOperationCode resourceOpCode = null;
-				code = ResourceOperationCode.parse(opString);
+        resourceOpCode = ResourceOperationCode.parse(opString);
-		if(code==null){
-			if(commandName.startsWith("describe") || commandName.startsWith("list") || commandName.startsWith("status")
-					|| commandName.startsWith("show")){
-				code = ResourceOperationCode.LIST_DS;
+    if(resourceOpCode==null){
+      if (commandName.startsWith(GETTER_DESCRIBE) || commandName.startsWith(GETTER_LIST)
+          || commandName.startsWith(GETTER_STATUS)) {
+        resourceOpCode = ResourceOperationCode.LIST_DS;
+
-		//TODO : Have map according to each resources
-		//TODO : How to save information for retrieving command Option map or region and serverGroup
-		
-		Resource targetedResource = null;		
-		if(op!=null){
-			targetedResource = op.resource();
+    if(resourceOpCode!=null) {
+      commandToCodeMapping.put(commandName, resourceOpCode);
-			targetedResource = Resource.DISTRIBUTED_SYSTEM;
-			//TODO : Add other resource and mbeans
-		}
-		
-		
-		LogService.getLogger().trace("#RegisterCommandSecurity : " + commandName + " code " + code + " op="+op);
-		
-		if(code!=null) {
-			commandToCodeMapping.put(commandName, code);
+      throw new GemFireConfigException(
+          "Error while configuring authorization for gfsh commands. No opCode defined for command " + commandName);
+
