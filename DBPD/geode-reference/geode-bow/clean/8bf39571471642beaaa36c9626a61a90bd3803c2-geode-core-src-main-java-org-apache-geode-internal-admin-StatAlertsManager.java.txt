Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The alert manager maintains the list of alert definitions (added by client
- * e.g GFMon 2.0).
+ * The alert manager maintains the list of alert definitions (added by client e.g GFMon 2.0).
- * It retrieved the value of statistic( defined in alert definition) and notify
- * alert aggregator sitting on admin VM
+ * It retrieved the value of statistic( defined in alert definition) and notify alert aggregator
+ * sitting on admin VM
-  
+
-  
+
-    logger.info(LocalizedMessage.create(LocalizedStrings.StatAlertsManager_STATALERTSMANAGER_CREATED));
+    logger.info(
+        LocalizedMessage.create(LocalizedStrings.StatAlertsManager_STATALERTSMANAGER_CREATED));
-    
-    /* 
-     * Throw DistributedSystemDisconnectedException if cancel operation is in 
-     * progress 
+
+    /*
+     * Throw DistributedSystemDisconnectedException if cancel operation is in progress
-    
+
-  
+
-   * @param defns
-   *                Alert definitions
-   * @param actionCode
-   *                Action to be performed like add , remove or update alert's
-   *                definition
+   * @param defns Alert definitions
+   * @param actionCode Action to be performed like add , remove or update alert's definition
-      }
-      else {
-        StatAlertDefinition[] alertDefns = this
-            .createMemberStatAlertDefinition(dm, defns);
+      } else {
+        StatAlertDefinition[] alertDefns = this.createMemberStatAlertDefinition(dm, defns);
-    // Get the swarm.  Currently rather UGLY.
+    // Get the swarm. Currently rather UGLY.
-    timer = new SystemTimer(system /*swarm*/, true);
+    timer = new SystemTimer(system /* swarm */, true);
-    }
-    else {
+    } else {
-  
+
-   * Set refresh time interval also cancel the previous {@link TimerTask} and
-   * create new timer task based on ner refresh time interval
+   * Set refresh time interval also cancel the previous {@link TimerTask} and create new timer task
+   * based on ner refresh time interval
-   * @param interval
-   *                Refresh time interval
+   * @param interval Refresh time interval
-   * @return true if refresh for timer has to be fixed rate see
-   *         scheduleAtFixedRate method of {@link TimerTask}
+   * @return true if refresh for timer has to be fixed rate see scheduleAtFixedRate method of
+   *         {@link TimerTask}
-   * set true if refresh for timer has to be fixed rate see scheduleAtFixedRate
-   * method of {@link TimerTask}
+   * set true if refresh for timer has to be fixed rate see scheduleAtFixedRate method of
+   * {@link TimerTask}
-   * Query all the statistic defined by alert definition and notify alerts
-   * aggregator if at least one statistic value crosses the threshold defined in
-   * alert definition
+   * Query all the statistic defined by alert definition and notify alerts aggregator if at least
+   * one statistic value crosses the threshold defined in alert definition
-        Integer key = (Integer)iter.next();
-        StatAlertDefinition defn = (StatAlertDefinition)alertDefinitionsMap
-            .get(key);
+        Integer key = (Integer) iter.next();
+        StatAlertDefinition defn = (StatAlertDefinition) alertDefinitionsMap.get(key);
-    return (StatAlert[])alerts.toArray(new StatAlert[alerts.size()]);
+    return (StatAlert[]) alerts.toArray(new StatAlert[alerts.size()]);
-   * {@link DummyStatisticInfoImpl} to StatAlertDefinition with
-   * {@link StatisticInfoImpl}
+   * {@link DummyStatisticInfoImpl} to StatAlertDefinition with {@link StatisticInfoImpl}
-  private StatAlertDefinition[] createMemberStatAlertDefinition(
-      DistributionManager dm, StatAlertDefinition[] defns) {
+  private StatAlertDefinition[] createMemberStatAlertDefinition(DistributionManager dm,
+      StatAlertDefinition[] defns) {
-              LocalizedStrings.StatAlertsManager_STATALERTSMANAGER_CREATEMEMBERSTATALERTDEFINITION_STATISTICS_WITH_GIVEN_TEXTID_0_NOT_FOUND, textId));
+              LocalizedStrings.StatAlertsManager_STATALERTSMANAGER_CREATEMEMBERSTATALERTDEFINITION_STATISTICS_WITH_GIVEN_TEXTID_0_NOT_FOUND,
+              textId));
-//          break;
+          // break;
-          logger.debug("StatAlertsManager.createMemberStatAlertDefinition: created statInfo {}", statInfos[ii]);
+          logger.debug("StatAlertsManager.createMemberStatAlertDefinition: created statInfo {}",
+              statInfos[ii]);
-          logger.debug("StatAlertsManager.createMemberStatAlertDefinition :: {}", defns[i].getStringRepresentation());
+          logger.debug("StatAlertsManager.createMemberStatAlertDefinition :: {}",
+              defns[i].getStringRepresentation());
-      }
-      else {
+      } else {
-          logger.debug("StatAlertsManager.createMemberStatAlertDefinition :: StatAlertDefinition {} is excluded", defn.getName());
+          logger.debug(
+              "StatAlertsManager.createMemberStatAlertDefinition :: StatAlertDefinition {} is excluded",
+              defn.getName());
-    return (StatAlertDefinition[])
-        result.toArray(new StatAlertDefinition[result.size()]);
+    return (StatAlertDefinition[]) result.toArray(new StatAlertDefinition[result.size()]);
-  
+
-      
+
-        
-        //start alert notification are supposed to send to all the 
-        //admin agents exists in the system.
-        //For the DS without agent, alert manager should not create 
-        //any alert notifications
+
+        // start alert notification are supposed to send to all the
+        // admin agents exists in the system.
+        // For the DS without agent, alert manager should not create
+        // any alert notifications
-              logger.debug("EvaluateAlertDefnsTask: sending {} alerts to {}", alerts.length, iterator.next());
+              logger.debug("EvaluateAlertDefnsTask: sending {} alerts to {}", alerts.length,
+                  iterator.next());
-        }
-        catch (CancelException e) {
+        } catch (CancelException e) {
-        }
-        catch (Exception e) {
-          logger.error(LocalizedMessage.create(LocalizedStrings.StatAlertsManager_EVALUATEALERTDEFNSTASK_FAILED_WITH_AN_EXCEPTION),  e);
+        } catch (Exception e) {
+          logger.error(
+              LocalizedMessage.create(
+                  LocalizedStrings.StatAlertsManager_EVALUATEALERTDEFNSTASK_FAILED_WITH_AN_EXCEPTION),
+              e);
