GEODE-6897: implement CMS rebalance operation (#3820)


+import org.apache.geode.management.api.ClusterManagementListOperationsResult;
+import org.apache.geode.management.api.ClusterManagementRealizationResult;
+import org.apache.geode.management.api.ClusterManagementResult.StatusCode;
-import org.apache.geode.management.api.JsonSerializable;
+import org.apache.geode.management.internal.operation.TaggedWithOperator;
+import org.apache.geode.management.runtime.OperationResult;
-  private final OperationManager executorManager;
+  private final OperationManager operationManager;
-        new OperationManager(new OperationHistoryManager()));
+        new OperationManager(cache, new OperationHistoryManager()));
-      OperationManager executorManager) {
+      OperationManager operationManager) {
-    this.executorManager = executorManager;
+    this.operationManager = operationManager;
-  public <T extends CacheElement> ClusterManagementResult create(T config) {
+  public <T extends CacheElement> ClusterManagementRealizationResult create(T config) {
-      return new ClusterManagementResult(false,
+      return new ClusterManagementRealizationResult(false,
-    ClusterManagementResult result = new ClusterManagementResult();
+    ClusterManagementRealizationResult result = new ClusterManagementRealizationResult();
-    if (result.getStatusCode() != ClusterManagementResult.StatusCode.OK) {
+    if (result.getStatusCode() != StatusCode.OK) {
-        result.setStatus(ClusterManagementResult.StatusCode.FAIL_TO_PERSIST, message);
+        result.setStatus(StatusCode.FAIL_TO_PERSIST, message);
-  public <T extends CacheElement> ClusterManagementResult delete(
+  public <T extends CacheElement> ClusterManagementRealizationResult delete(
-      return new ClusterManagementResult(false,
+      return new ClusterManagementRealizationResult(false,
-    ClusterManagementResult result = new ClusterManagementResult();
+    ClusterManagementRealizationResult result = new ClusterManagementRealizationResult();
-    if (result.getStatusCode() != ClusterManagementResult.StatusCode.OK) {
+    if (result.getStatusCode() != StatusCode.OK) {
-      result.setStatus(ClusterManagementResult.StatusCode.FAIL_TO_PERSIST, message);
+      result.setStatus(StatusCode.FAIL_TO_PERSIST, message);
-  public <T extends CacheElement> ClusterManagementResult update(
+  public <T extends CacheElement> ClusterManagementRealizationResult update(
-  public <A extends ClusterManagementOperation<V>, V extends JsonSerializable> ClusterManagementOperationResult<V> startOperation(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> start(
-    CompletableFuture<V> future = executorManager.submit(op).getFuture();
+    OperationInstance<A, V> operationInstance = operationManager.submit(op);
+    CompletableFuture<V> future = operationInstance.getFutureResult();
+    if (op instanceof TaggedWithOperator) {
+      operationInstance.setOperator(((TaggedWithOperator) op).getOperator());
+    }
-        ClusterManagementResult.StatusCode.ACCEPTED, "async operation started");
-    return new ClusterManagementOperationResult<>(result, future);
+        StatusCode.ACCEPTED,
+        "async operation started (GET uri to check status)");
+
+    return toClusterManagementListOperationsResult(result, operationInstance);
+  }
+
+  @Override
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> list(
+      A opType) {
+    return new ClusterManagementListOperationsResult<>(
+        operationManager.listOperationInstances(opType).stream()
+            .map(this::toClusterManagementListOperationsResult).collect(Collectors.toList()));
+  }
+
+  /**
+   * builds a base status from the state of a future result
+   */
+  private static <V extends OperationResult> ClusterManagementResult getStatus(
+      CompletableFuture<V> future) {
+    if (future.isCompletedExceptionally()) {
+      return new ClusterManagementResult(StatusCode.ERROR, "failed");
+    } else if (future.isDone()) {
+      return new ClusterManagementResult(StatusCode.OK, "finished successfully");
+    } else {
+      return new ClusterManagementResult(StatusCode.IN_PROGRESS, "in progress");
+    }
+  }
+
+  /**
+   * builds a result object from a base status and an operation instance
+   */
+  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> toClusterManagementListOperationsResult(
+      ClusterManagementResult status, OperationInstance<A, V> operationInstance) {
+    ClusterManagementOperationResult<V> result = new ClusterManagementOperationResult<>(status,
+        operationInstance.getFutureResult(), operationInstance.getOperationStart(),
+        operationInstance.getFutureOperationEnded(), operationInstance.getOperator());
+    result.setUri(RestfulEndpoint.URI_CONTEXT + RestfulEndpoint.URI_VERSION
+        + operationInstance.getOperation().getEndpoint() + "/" + operationInstance.getId());
+    return result;
+  }
+
+  /**
+   * builds a result object from an operation instance
+   */
+  private <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementOperationResult<V> toClusterManagementListOperationsResult(
+      OperationInstance<A, V> operationInstance) {
+    return toClusterManagementListOperationsResult(getStatus(operationInstance.getFutureResult()),
+        operationInstance);
-   * {@link #startOperation(ClusterManagementOperation)}
+   * {@link ClusterManagementOperationResult#getFutureResult()}
-  public <A extends ClusterManagementOperation<V>, V extends JsonSerializable> ClusterManagementOperationResult<V> startOperation(
-      A op, String uri) {
-    OperationInstance<A, V> operationInstance = executorManager.submit(op);
-
-    ClusterManagementResult result = new ClusterManagementResult(
-        ClusterManagementResult.StatusCode.ACCEPTED, "async operation started");
-
-    String opId = operationInstance.getId();
-    String instUri = uri + "/" + opId;
-    result.setUri(instUri);
-
-    return new ClusterManagementOperationResult<>(result, operationInstance.getFuture());
-  }
-
-  /**
-   * this is intended for use by the REST controller. for Java usage, please use
-   * {@link ClusterManagementOperationResult#getResult()}
-   */
-  public <V extends JsonSerializable> ClusterManagementOperationStatusResult<V> checkStatus(
+  public <V extends OperationResult> ClusterManagementOperationStatusResult<V> checkStatus(
-    final CompletableFuture<V> status = executorManager.getStatus(opId);
-    if (status == null) {
+    final OperationInstance<?, V> operationInstance = operationManager.getOperationInstance(opId);
+    if (operationInstance == null) {
+    final CompletableFuture<V> status = operationInstance.getFutureResult();
+    result.setOperator(operationInstance.getOperator());
+    result.setOperationStart(operationInstance.getOperationStart());
-      result.setStatus(ClusterManagementResult.StatusCode.IN_PROGRESS, "in progress");
+      result.setStatus(StatusCode.IN_PROGRESS, "in progress");
+        result.setOperationEnded(operationInstance.getFutureOperationEnded().get());
-        result.setStatus(ClusterManagementResult.StatusCode.OK, "finished successfully");
+        result.setStatus(StatusCode.OK, "finished successfully");
-    executorManager.close();
+    operationManager.close();
