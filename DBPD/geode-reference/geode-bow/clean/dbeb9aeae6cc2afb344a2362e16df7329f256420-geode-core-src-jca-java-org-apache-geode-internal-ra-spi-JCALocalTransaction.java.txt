Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class JCALocalTransaction implements LocalTransaction
-{
+public class JCALocalTransaction implements LocalTransaction {
-  public void begin() throws ResourceException
-  {
+  public void begin() throws ResourceException {
-      }
-      catch (NullPointerException npe) {
+      } catch (NullPointerException npe) {
-        throw new LocalTransactionException(
-            " A transaction is already in progress");
+        throw new LocalTransactionException(" A transaction is already in progress");
+        } else {
+          throw new LocalTransactionException("GemFire is already associated with a transaction");
-        else {
-          throw new LocalTransactionException(
-              "GemFire is already associated with a transaction");
-        }
-      }
-      else {
+      } else {
-    }
-    catch (SystemException e) {
+    } catch (SystemException e) {
-  public void commit() throws ResourceException
-  {
+  public void commit() throws ResourceException {
-      }
-      catch (NullPointerException npe) {
+      } catch (NullPointerException npe) {
-      throw new IllegalStateException(
-          "Local Transaction associated with Tid = " + this.tid
-              + " attempting to commit a different transaction");
+      throw new IllegalStateException("Local Transaction associated with Tid = " + this.tid
+          + " attempting to commit a different transaction");
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-  public void rollback() throws ResourceException
-  {
+  public void rollback() throws ResourceException {
-      }
-      catch (NullPointerException npe) {
+      } catch (NullPointerException npe) {
-      throw new IllegalStateException(
-          "Local Transaction associated with Tid = " + this.tid
-              + " attempting to commit a different transaction");
+      throw new IllegalStateException("Local Transaction associated with Tid = " + this.tid
+          + " attempting to commit a different transaction");
-    }
-    catch (IllegalStateException ise) {
+    } catch (IllegalStateException ise) {
-      if (ise
-          .getMessage()
-          .equals(
-              LocalizedStrings.TXManagerImpl_THREAD_DOES_NOT_HAVE_AN_ACTIVE_TRANSACTION
-                  .toLocalizedString())) {
+      if (ise.getMessage()
+          .equals(LocalizedStrings.TXManagerImpl_THREAD_DOES_NOT_HAVE_AN_ACTIVE_TRANSACTION
+              .toLocalizedString())) {
-      }
-      else {
+      } else {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    }
-    finally {
+    } finally {
-  private void init() throws SystemException
-  {
-    this.cache = (GemFireCacheImpl)CacheFactory.getAnyInstance();
+  private void init() throws SystemException {
+    this.cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
-  boolean transactionInProgress()
-  {
+  boolean transactionInProgress() {
