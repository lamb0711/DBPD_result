Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public ClientCQ newCq(String cqName, String queryString,
-      CqAttributes cqAttributes, InternalPool serverProxy, boolean isDurable)
+  public ClientCQ newCq(String cqName, String queryString, CqAttributes cqAttributes,
+      InternalPool serverProxy, boolean isDurable)
-  public CqQuery getClientCqFromServer(ClientProxyMembershipID clientProxyId,
-      String clientCqName) {
+  public CqQuery getClientCqFromServer(ClientProxyMembershipID clientProxyId, String clientCqName) {
-  public void executeAllClientCqs() throws CqException {
-  }
+  public void executeAllClientCqs() throws CqException {}
-  public void executeAllRegionCqs(String regionName) throws CqException {
-  }
+  public void executeAllRegionCqs(String regionName) throws CqException {}
-  public void stopAllClientCqs() throws CqException {
-  }
+  public void stopAllClientCqs() throws CqException {}
-  public void stopAllRegionCqs(String regionName) throws CqException {
-  }
+  public void stopAllRegionCqs(String regionName) throws CqException {}
-  public void closeCqs(String regionName) throws CqException {
-  }
+  public void closeCqs(String regionName) throws CqException {}
-  public void closeCq(String cqName, ClientProxyMembershipID clientProxyId)
-      throws CqException {
+  public void closeCq(String cqName, ClientProxyMembershipID clientProxyId) throws CqException {
-    return new MissingCqServiceStatistics(); 
+    return new MissingCqServiceStatistics();
-  public void closeClientCqs(ClientProxyMembershipID clientProxyId)
+  public void closeClientCqs(ClientProxyMembershipID clientProxyId) throws CqException {}
+
+  @Override
+  public List<ServerCQ> getAllClientCqs(ClientProxyMembershipID clientProxyId) {
+    return Collections.EMPTY_LIST;
+  }
+
+  @Override
+  public List<String> getAllDurableClientCqs(ClientProxyMembershipID clientProxyId)
-  }
-
-  @Override
-  public List<ServerCQ> getAllClientCqs(
-      ClientProxyMembershipID clientProxyId) {
-  public List<String> getAllDurableClientCqs(
-      ClientProxyMembershipID clientProxyId) throws CqException {
-    return Collections.EMPTY_LIST;
-  }
-
-  @Override
-  public void dispatchCqListeners(HashMap cqs, int messageType, Object key,
-      Object value, byte[] delta, QueueManager qManager, EventID eventId) {
+  public void dispatchCqListeners(HashMap cqs, int messageType, Object key, Object value,
+      byte[] delta, QueueManager qManager, EventID eventId) {
-  public void processEvents(CacheEvent event, Profile localProfile,
-      Profile[] profiles, FilterRoutingInfo frInfo) throws CqException {
+  public void processEvents(CacheEvent event, Profile localProfile, Profile[] profiles,
+      FilterRoutingInfo frInfo) throws CqException {
-  public void close() {
-  }
+  public void close() {}
-  public String constructServerCqName(String cqName,
-      ClientProxyMembershipID clientProxyId) {
+  public String constructServerCqName(String cqName, ClientProxyMembershipID clientProxyId) {
-  public void stopCq(String cqName, ClientProxyMembershipID clientId)
-      throws CqException {
+  public void stopCq(String cqName, ClientProxyMembershipID clientId) throws CqException {
-  public void cqsDisconnected(Pool pool) {
-  }
+  public void cqsDisconnected(Pool pool) {}
-  public void cqsConnected(Pool pool) {
-  }
+  public void cqsConnected(Pool pool) {}
-      ClientProxyMembershipID clientProxyId, CacheClientNotifier ccn,
-      boolean isDurable, boolean manageEmptyRegions, int regionDataPolicy,
-      Map emptyRegionsMap) throws CqException, RegionNotFoundException,
-      CqClosedException {
+      ClientProxyMembershipID clientProxyId, CacheClientNotifier ccn, boolean isDurable,
+      boolean manageEmptyRegions, int regionDataPolicy, Map emptyRegionsMap)
+      throws CqException, RegionNotFoundException, CqClosedException {
-  public void closeNonDurableClientCqs(ClientProxyMembershipID clientProxyId)
-      throws CqException {
-  }
+  public void closeNonDurableClientCqs(ClientProxyMembershipID clientProxyId) throws CqException {}
