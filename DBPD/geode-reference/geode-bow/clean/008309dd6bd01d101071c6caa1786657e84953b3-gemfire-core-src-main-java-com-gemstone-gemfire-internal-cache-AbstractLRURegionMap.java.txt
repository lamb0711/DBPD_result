Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.cache.control.InternalResourceManager;
+import com.gemstone.gemfire.internal.offheap.StoredObject;
-      ea = ((PlaceHolderDiskRegion)owner).getActualLruAlgorithm();
-      ec = ((PlaceHolderDiskRegion)owner).getEvictionAttributes().createEvictionController(null);
+      PlaceHolderDiskRegion phdr = (PlaceHolderDiskRegion)owner;
+      ea = phdr.getActualLruAlgorithm();
+      ec = phdr.getEvictionAttributes().createEvictionController(null, phdr.getOffHeap());
-      Object curVal = le._getValue();
+      Object curVal = le._getValue(); // OFFHEAP: _getValue ok
+        if (cd instanceof StoredObject) {
+          if (!cd.equals(curVal)) {
+            return false;
+          }
+        } else {
+        }
+  private boolean mustEvict() {
+    LocalRegion owner = _getOwner();
+    InternalResourceManager resourceManager = owner.getCache().getResourceManager();
+    
+    final boolean monitorStateIsEviction;
+    if (!owner.getAttributes().getOffHeap()) {
+      monitorStateIsEviction = resourceManager.getHeapMonitor().getState().isEviction();
+    } else {
+      monitorStateIsEviction = resourceManager.getOffHeapMonitor().getState().isEviction();
+    }
+    
+    return monitorStateIsEviction && this.sizeInVM() > 0;
+  }
+  
-      while (_getOwner().getCache().getHeapEvictor().mustEvict()
-          && this.sizeInVM() > 0 && evictedBytes == 0) {
+      while (mustEvict() && evictedBytes == 0) {
