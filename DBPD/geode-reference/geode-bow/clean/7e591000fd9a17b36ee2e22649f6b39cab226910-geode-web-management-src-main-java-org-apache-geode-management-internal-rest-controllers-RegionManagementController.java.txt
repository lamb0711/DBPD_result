GEODE-6744: list index rest api (#3550)

Co-authored-by: Owen Nichols <onichols@pivotal.io>


+import java.util.List;
+
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.apache.geode.management.configuration.RuntimeIndex;
+import org.apache.geode.management.configuration.RuntimeRegionConfig;
+import org.apache.geode.management.internal.exceptions.EntityNotFoundException;
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
-  public ResponseEntity<ClusterManagementResult> listRegion(
+  @ResponseBody
+  public ClusterManagementResult listRegion(
-    ClusterManagementResult result = clusterManagementService.list(filter);
-    return new ResponseEntity<>(result,
-        result.isSuccessful() ? HttpStatus.OK : HttpStatus.INTERNAL_SERVER_ERROR);
+    return clusterManagementService.list(filter);
+  }
+
+  @RequestMapping(method = RequestMethod.GET, value = REGION_CONFIG_ENDPOINT + "/{id}")
+  @ResponseBody
+  public ClusterManagementResult getRegion(
+      @PathVariable(name = "id") String id) {
+    securityService.authorize(Resource.CLUSTER, Operation.READ, id);
+    RegionConfig config = new RegionConfig();
+    config.setName(id);
+    return clusterManagementService.get(config);
+  }
+
+  @RequestMapping(method = RequestMethod.GET,
+      value = REGION_CONFIG_ENDPOINT + "/{regionName}/indexes")
+  @ResponseBody
+  public ClusterManagementResult listIndex(
+      @PathVariable String regionName,
+      @RequestParam(required = false) String id) {
+
+    ClusterManagementResult result = getRegion(regionName);
+    RuntimeRegionConfig runtimeRegion = result.getResult(RuntimeRegionConfig.class).get(0);
+
+    // only send the index information back
+    List<RuntimeIndex> runtimeIndexes = runtimeRegion.getRuntimeIndexes(id);
+    result.setResult(runtimeIndexes);
+
+    return result;
+  }
+
+  @RequestMapping(method = RequestMethod.GET,
+      value = REGION_CONFIG_ENDPOINT + "/{regionName}/indexes/{id}")
+  @ResponseBody
+  public ClusterManagementResult getIndex(
+      @PathVariable String regionName,
+      @PathVariable String id) {
+    ClusterManagementResult result = listIndex(regionName, id);
+    List<RuntimeIndex> indexList = result.getResult(RuntimeIndex.class);
+
+    if (indexList.size() == 0) {
+      throw new EntityNotFoundException("Index " + id + " not found.");
+    }
+
+    if (indexList.size() > 1) {
+      throw new IllegalStateException("More than one entity found.");
+    }
+
+    result.setResult(indexList);
+    return result;
