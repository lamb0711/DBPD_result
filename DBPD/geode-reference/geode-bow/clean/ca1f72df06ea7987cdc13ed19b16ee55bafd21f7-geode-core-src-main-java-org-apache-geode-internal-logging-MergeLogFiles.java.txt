GEODE-5212: Ensure that MergeLogs closes its InputStreams (#2513)

- Other refactoring which converted a pair of linked structures (log filename
  and the associated InputStream) into a Map.
+import java.util.HashMap;
+import java.util.Map;
-   * @param logFileNames The names of the log files to be printed in the merged log
-  public static boolean mergeLogFiles(InputStream[] logFiles, String[] logFileNames,
-      PrintWriter mergedFile) {
-    return mergeLogFiles(logFiles, logFileNames, mergedFile, false, false, false, new LinkedList());
+  public static boolean mergeLogFiles(Map<String, InputStream> logFiles, PrintWriter mergedFile) {
+    return mergeLogFiles(logFiles, mergedFile, false, false, false, new LinkedList());
-   * @param logFileNames The names of the log files to be printed in the merged log
-  public static boolean mergeLogFiles(InputStream[] logFiles, String[] logFileNames,
+  public static boolean mergeLogFiles(Map<String, InputStream> logFiles,
-    return Sorter.mergeLogFiles(logFiles, logFileNames, mergedFile, tabOut, suppressBlanks,
+    return Sorter.mergeLogFiles(logFiles, mergedFile, tabOut, suppressBlanks,
-    InputStream[] logFiles = new InputStream[files.size()];
-    String[] logFileNames = new String[files.size()];
+    Map<String, InputStream> logFiles = new HashMap<>();
-      logFiles[i] = new FileInputStream(file);
+      String logFileName;
-          logFileNames[i] = (String) nickNames.get(i) + ".gz";
+          logFileName = nickNames.get(i) + ".gz";
-          logFileNames[i] = (String) nickNames.get(i);
+          logFileName = (String) nickNames.get(i);
-        logFileNames[i] = sb.toString();
+        logFileName = sb.toString();
+      logFiles.put(logFileName, new FileInputStream(file));
-    mergeLogFiles(logFiles, logFileNames, mergedFile, tabOut, suppressBlanks, multithreaded,
+    mergeLogFiles(logFiles, mergedFile, tabOut, suppressBlanks, multithreaded,
-     * Invoking this constructor will start this reader thread.
+     * Invoking this constructor will start this reader thread. The InputStream is closed at the
+     * end of processing.
+      } finally {
+        try {
+          logFile.close();
+        } catch (IOException e) {
+          e.printStackTrace(System.err);
+        }
-     * @param logFileNames The names of the log files to be printed in the merged log
-    public static boolean mergeLogFiles(InputStream[] logFiles, String[] logFileNames,
+    public static boolean mergeLogFiles(Map<String, InputStream> logFiles,
-      if (logFiles.length != logFileNames.length) {
-        throw new IllegalArgumentException(
-            LocalizedStrings.MergeLogFiles_NUMBER_OF_LOG_FILES_0_IS_NOT_THE_SAME_AS_THE_NUMBER_OF_LOG_FILE_NAMES_1
-                .toLocalizedString(new Object[] {Integer.valueOf(logFiles.length),
-                    Integer.valueOf(logFileNames.length)}));
-      }
-
-      Collection readers = new ArrayList(logFiles.length);
-      for (int i = 0; i < logFiles.length; i++) {
+      Collection readers = new ArrayList(logFiles.size());
+      for (Map.Entry<String, InputStream> e : logFiles.entrySet()) {
-          readers.add(new ThreadedReader(logFiles[i], logFileNames[i], group, tabOut,
+          readers.add(new ThreadedReader(e.getValue(), e.getKey(), group, tabOut,
-          readers.add(new NonThreadedReader(logFiles[i], logFileNames[i], group, tabOut,
+          readers.add(new NonThreadedReader(e.getValue(), e.getKey(), group, tabOut,
-
-
