GEODE-2929: remove superfluous uses of final from internal classes

+
+
+
+
+
+
+
+
+
+
-// disk: DISK
-// lru: LRU
+// disk: 1
+// lru: 1
-// offheap: OFFHEAP
+// offheap: 1
-// key uuid: KEY_UUID
+// key uuid: 1
+
-      @Retained Object value) {
-    super(context, (value instanceof RecoveredEntry ? null : value));
+
+      @Retained
+
+      Object value
+
+
+
+  ) {
+    super(context,
+
+        (value instanceof RecoveredEntry ? null : value)
+
+
+
+    );
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-  public final int getEntryHash() {
+  public int getEntryHash() {
-  public final HashEntry<Object, Object> getNextEntry() {
+  public HashEntry<Object, Object> getNextEntry() {
-  public final void setNextEntry(final HashEntry<Object, Object> n) {
+  public void setNextEntry(final HashEntry<Object, Object> n) {
+
+
+
-  public final synchronized int updateAsyncEntrySize(EnableLRU capacityController) {
+  public synchronized int updateAsyncEntrySize(EnableLRU capacityController) {
+
+
-
+
+
+
+
+
+
+
+
-  public final synchronized int updateEntrySize(EnableLRU capacityController) {
+  public synchronized int updateEntrySize(EnableLRU capacityController) {
-  public final synchronized int updateEntrySize(EnableLRU capacityController, Object value) {
+
+  public synchronized int updateEntrySize(EnableLRU capacityController, Object value) {
-    // if ( debug ) log( "updateEntrySize key=" + getKey()
-    // + (_getValue() == Token.INVALID ? " invalid" :
-    // (_getValue() == Token.LOCAL_INVALID ? "local_invalid" :
-    // (_getValue()==null ? " evicted" : " valid")))
-    // + " oldSize=" + oldSize
-    // + " newSize=" + this.size );
-  public final boolean testRecentlyUsed() {
+  public boolean testRecentlyUsed() {
-  public final void setRecentlyUsed() {
+  public void setRecentlyUsed() {
-  public final void unsetRecentlyUsed() {
+  public void unsetRecentlyUsed() {
-  public final boolean testEvicted() {
+  public boolean testEvicted() {
-  public final void setEvicted() {
+  public void setEvicted() {
-  public final void unsetEvicted() {
+  public void unsetEvicted() {
+
-  public final void setNextLRUNode(LRUClockNode next) {
+  public void setNextLRUNode(LRUClockNode next) {
-  public final LRUClockNode nextLRUNode() {
+  public LRUClockNode nextLRUNode() {
-  public final void setPrevLRUNode(LRUClockNode prev) {
+  public void setPrevLRUNode(LRUClockNode prev) {
-  public final LRUClockNode prevLRUNode() {
+  public LRUClockNode prevLRUNode() {
-  public final int getEntrySize() {
+  public int getEntrySize() {
-  protected final void setEntrySize(int size) {
+  protected void setEntrySize(int size) {
-  // @Override
-  // public StringBuilder appendFieldsToString(final StringBuilder sb) {
-  // StringBuilder result = super.appendFieldsToString(sb);
-  // result.append("; prev=").append(this.prevLRU==null?"null":"not null");
-  // result.append("; next=").append(this.nextLRU==null?"null":"not null");
-  // return result;
-  // }
+
+
+
+
+
+
+
+
+
-  public final Object getKey() {
+  public Object getKey() {
+
+
+
