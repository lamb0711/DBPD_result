GEODE-5971: refactor DescribeXXCommand to use ResultModel (#3265)


-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.ErrorResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-  public Result describeConnection() {
-    Result result;
-    try {
-      TabularResultData tabularResultData = ResultBuilder.createTabularResultData();
-      Gfsh gfshInstance = getGfsh();
-      if (gfshInstance.isConnectedAndReady()) {
-        OperationInvoker operationInvoker = gfshInstance.getOperationInvoker();
-        // tabularResultData.accumulate("Monitored GemFire DS", operationInvoker.toString());
-        tabularResultData.accumulate("Connection Endpoints", operationInvoker.toString());
-      } else {
-        tabularResultData.accumulate("Connection Endpoints", "Not connected");
-      }
-      result = ResultBuilder.buildResult(tabularResultData);
-    } catch (Exception e) {
-      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-      result = ResultBuilder.buildResult(errorResultData);
+  public ResultModel describeConnection() {
+    ResultModel result = new ResultModel();
+
+    TabularResultModel table = result.addTable("endPoints");
+    table.setColumnHeader("Connection Endpoints");
+    Gfsh gfshInstance = getGfsh();
+    if (gfshInstance.isConnectedAndReady()) {
+      OperationInvoker operationInvoker = gfshInstance.getOperationInvoker();
+      // tabularResultData.accumulate("Monitored GemFire DS", operationInvoker.toString());
+      table.addRow(operationInvoker.toString());
+    } else {
+      table.addRow("Not connected");
+
