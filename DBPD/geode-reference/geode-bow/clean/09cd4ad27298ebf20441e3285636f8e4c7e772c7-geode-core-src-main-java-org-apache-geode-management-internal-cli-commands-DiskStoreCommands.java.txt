GEODE-1128: Add missing regions to the missing-disk-stores command

Refactored “show missing-disk-stores command” and added a section to the
output to show missing colocated regions. Corrected messages in
LocalizedStrings, change “gemfire list-missing-disk-stores” to
“gfsh show missing-disk-stores”. Added new command function class to gather
both missing disk-store and missing colocated region information on a
distributed system member.

Parameterized show missing-disk-store error message.

Added new DataSerializable class for sending missing colocated region
results to gfsh command.

Refactored ColocationLogger. Class originally deferred updating the list
of missing colocated children (i.e. removing regions from the missing
list that are now present) for a region until the next logging
interval. This has been changed to update the list on-demand, whenever
getMissingChildRegions() is called.

Added DUnit test for new functionality in show missing-disk-store
command.

Added JUnit tests for new classes

This closes #244

+import org.apache.geode.internal.cache.partitioned.ColocatedRegionDetails;
+import org.apache.geode.internal.cache.persistence.PersistentMemberID;
+import org.apache.geode.internal.cache.persistence.PersistentMemberPattern;
+import org.apache.geode.management.internal.cli.functions.ShowMissingDiskStoresFunction;
-      TabularResultData tabularData = ResultBuilder.createTabularResultData();
-      boolean accumulatedData = false;
+      Set<DistributedMember> dataMembers = getNormalMembers(getCache());
-      DistributedSystemMXBean dsMXBean = ManagementService.getManagementService(CacheFactory.getAnyInstance())
-          .getDistributedSystemMXBean();
-      PersistentMemberDetails[] allPersistentMemberDetails = dsMXBean.listMissingDiskStores();
-      if (allPersistentMemberDetails != null) {
-        for (PersistentMemberDetails peristentMemberDetails : allPersistentMemberDetails) {
-          tabularData.accumulate("Disk Store ID", peristentMemberDetails.getDiskStoreId());
-          tabularData.accumulate("Host", peristentMemberDetails.getHost());
-          tabularData.accumulate("Directory", peristentMemberDetails.getDirectory());
-          accumulatedData = true;
-        }
+      if (dataMembers.isEmpty()) {
+        return ResultBuilder.createInfoResult(CliStrings.NO_CACHING_MEMBERS_FOUND_MESSAGE);
-
-      if (!accumulatedData) {
-        return ResultBuilder.createInfoResult("No missing disk store found");
-     }
-
-      return ResultBuilder.buildResult(tabularData);
+      List<Object> results = getMissingDiskStoresList(dataMembers);
+      return toMissingDiskStoresTabularResult(results);
+    } catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
+          CliStrings.SHOW_MISSING_DISK_STORE));
-    } catch (Throwable th) {
+    } catch (Throwable t) {
-      if (th.getMessage() == null) {
-        return ResultBuilder.createGemFireErrorResult("An error occurred while showing missing disk stores: " + th);
-      }
-      return ResultBuilder.createGemFireErrorResult("An error occurred while showing missing disk stores: " + th.getMessage());
+    if (t.getMessage() == null) {
+      return ResultBuilder.createGemFireErrorResult(String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t));
+    }
+    return ResultBuilder.createGemFireErrorResult(String.format(CliStrings.SHOW_MISSING_DISK_STORE__ERROR_MESSAGE, t.getMessage()));
-  
-  
+
+  protected List<Object> getMissingDiskStoresList(Set<DistributedMember> members) {
+    final Execution membersFunctionExecutor = getMembersFunctionExecutor(members);
+    if (membersFunctionExecutor instanceof AbstractExecution) {
+      ((AbstractExecution) membersFunctionExecutor).setIgnoreDepartedMembers(true);
+    }
+
+    final ResultCollector<?, ?> resultCollector = membersFunctionExecutor.execute(new ShowMissingDiskStoresFunction());
+
+    final List<?> results = (List<?>) resultCollector.getResult();
+    final List<Object> distributedPersistentRecoveryDetails = new ArrayList<Object>(results.size());
+    for (final Object result: results) {
+      if (result instanceof Set) { // ignore FunctionInvocationTargetExceptions and other Exceptions...
+        distributedPersistentRecoveryDetails.addAll((Set<Object>) result);
+      }
+    }
+    return distributedPersistentRecoveryDetails;
+  }
+
+  protected Result toMissingDiskStoresTabularResult(final List<Object> resultDetails) throws ResultDataException {
+    CompositeResultData crd = ResultBuilder.createCompositeResultData();
+    List<PersistentMemberPattern> missingDiskStores = new ArrayList<PersistentMemberPattern>();
+    List<ColocatedRegionDetails> missingColocatedRegions = new ArrayList<ColocatedRegionDetails>();
+
+    for (Object detail : resultDetails) {
+      if (detail instanceof PersistentMemberPattern) {
+        missingDiskStores.add((PersistentMemberPattern) detail);
+      } else if (detail instanceof ColocatedRegionDetails) {
+        missingColocatedRegions.add((ColocatedRegionDetails) detail);
+      } else {
+        throw new ResultDataException("Unknown type of PersistentRecoveryFailures result");
+      }
+    }
+
+    boolean hasMissingDiskStores = !missingDiskStores.isEmpty();
+    boolean hasMissingColocatedRegions = !missingColocatedRegions.isEmpty();
+    if (hasMissingDiskStores) {
+      SectionResultData missingDiskStoresSection = crd.addSection();
+      missingDiskStoresSection.setHeader("Missing Disk Stores");
+      TabularResultData missingDiskStoreData = missingDiskStoresSection.addTable();
+
+      for (PersistentMemberPattern peristentMemberDetails : missingDiskStores) {
+        missingDiskStoreData.accumulate("Disk Store ID", peristentMemberDetails.getUUID());
+        missingDiskStoreData.accumulate("Host", peristentMemberDetails.getHost());
+        missingDiskStoreData.accumulate("Directory", peristentMemberDetails.getDirectory());
+      }
+    } else {
+      SectionResultData noMissingDiskStores = crd.addSection();
+      noMissingDiskStores.setHeader("No missing disk store found");
+    }
+    if (hasMissingDiskStores || hasMissingColocatedRegions) {
+      // For clarity, separate disk store and colocated region information
+      crd.addSection().setHeader("\n");
+    }
+
+    if (hasMissingColocatedRegions) {
+      SectionResultData missingRegionsSection = crd.addSection();
+      missingRegionsSection.setHeader("Missing Colocated Regions");
+      TabularResultData missingRegionData = missingRegionsSection.addTable();
+
+      for (ColocatedRegionDetails colocatedRegionDetails:missingColocatedRegions) {
+        missingRegionData.accumulate("Host", colocatedRegionDetails.getHost());
+        missingRegionData.accumulate("Distributed Member", colocatedRegionDetails.getMember());
+        missingRegionData.accumulate("Parent Region", colocatedRegionDetails.getParent());
+        missingRegionData.accumulate("Missing Colocated Region", colocatedRegionDetails.getChild());
+      }
+    } else {
+      SectionResultData noMissingColocatedRegions = crd.addSection();
+      noMissingColocatedRegions.setHeader("No missing colocated region found");
+    }
+
+    return ResultBuilder.buildResult(crd);
+  }
+
