Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
- * Class <code>GatewayEventCallbackArgument</code> is a wrapper on a callback
- * arg plus the id of the <code>GatewaySender</code> making the request. It is
- * created during a batch update request so that the hub id is passed to the
- * <code>GatewayReceiver</code> so that events are not re-distributed back to
- * the originating <code>GatewayReceiver</code>, but are distributed to other
- * <code>GatewayReceiver</code>s. The original callback arg is wrapped by this
- * one and replaced in the event sent to CacheListener, CacheWriter and
- * CacheLoader.
+ * Class <code>GatewayEventCallbackArgument</code> is a wrapper on a callback arg plus the id of the
+ * <code>GatewaySender</code> making the request. It is created during a batch update request so
+ * that the hub id is passed to the <code>GatewayReceiver</code> so that events are not
+ * re-distributed back to the originating <code>GatewayReceiver</code>, but are distributed to other
+ * <code>GatewayReceiver</code>s. The original callback arg is wrapped by this one and replaced in
+ * the event sent to CacheListener, CacheWriter and CacheLoader.
-public final class GatewaySenderEventCallbackArgument extends
-WrappedCallbackArgument implements DataSerializableFixedID {
+public final class GatewaySenderEventCallbackArgument extends WrappedCallbackArgument
+    implements DataSerializableFixedID {
-   * The set of <code>GatewayReceiver</code> s to which the event has been sent. This
-   * set keeps track of the <code>GatewayReceiver</code> s to which the event has been
-   * sent so that downstream <code>GatewayReceiver</code> s don't resend the event to
-   * the same <code>GatewayReceiver</code>s.
+   * The set of <code>GatewayReceiver</code> s to which the event has been sent. This set keeps
+   * track of the <code>GatewayReceiver</code> s to which the event has been sent so that downstream
+   * <code>GatewayReceiver</code> s don't resend the event to the same
+   * <code>GatewayReceiver</code>s.
-  private Set<Integer> receipientDSIds;
+  private IntOpenHashSet receipientDSIds;
-  public GatewaySenderEventCallbackArgument() {
-  }
+  public GatewaySenderEventCallbackArgument() {}
-  
-  /**
-   * Constructor.
-   * @param geca
-   *          The original callback argument set by the caller or null if there
-   *          was not callback arg
-   */
-  public GatewaySenderEventCallbackArgument(GatewaySenderEventCallbackArgument geca) {
-    super(geca.getOriginalCallbackArg());
-    //  _originalEventId = geca._originalEventId;
-    originatingDSId = geca.originatingDSId;
-    if (geca.receipientDSIds != null) {
-      receipientDSIds = new HashSet<Integer>(geca.receipientDSIds);
-    }
-  }
-  
+
-   * @param originalCallbackArg
-   *          The original callback argument set by the caller or null if there
-   *          was not callback arg
-   * @param originatingDSId
-   *          The id of the originating <code>GatewayReceiver</code> making the
-   *          request
-   * @param originalReceivers
-   *          The list of <code>Gateway</code> s to which the event has been
-   *          originally sent
+   * @param geca The original callback argument set by the caller or null if there was not callback
+   *        arg
-  public GatewaySenderEventCallbackArgument(Object originalCallbackArg,
-      int originatingDSId, List<Integer> originalReceivers) {
+  public GatewaySenderEventCallbackArgument(GatewaySenderEventCallbackArgument geca) {
+    super(geca.getOriginalCallbackArg());
+    // _originalEventId = geca._originalEventId;
+    originatingDSId = geca.originatingDSId;
+    if (geca.receipientDSIds != null) {
+      receipientDSIds = new IntOpenHashSet(geca.receipientDSIds);
+    }
+  }
+
+  /**
+   * Constructor.
+   * 
+   * @param originalCallbackArg The original callback argument set by the caller or null if there
+   *        was not callback arg
+   * @param originatingDSId The id of the originating <code>GatewayReceiver</code> making the
+   *        request
+   * @param originalReceivers The list of <code>Gateway</code> s to which the event has been
+   *        originally sent
+   */
+  public GatewaySenderEventCallbackArgument(Object originalCallbackArg, int originatingDSId,
+      List<Integer> originalReceivers) {
-   * Returns the id of the originating <code>GatewayReceiver</code> making the
-   * request.
+   * Returns the id of the originating <code>GatewayReceiver</code> making the request.
-   * @return the id of the originating <code>GatewayReceiver</code> making the
-   *         request
+   * @return the id of the originating <code>GatewayReceiver</code> making the request
-   * @param originatingDSId
-   *          The originating <code>SenderId</code> id
+   * @param originatingDSId The originating <code>SenderId</code> id
-   * Returns the list of <code>Gateway</code> s to which the event has been
-   * sent.
+   * Returns the list of <code>Gateway</code> s to which the event has been sent.
-  public Set<Integer> getRecipientDSIds() {
+  public IntOpenHashSet getRecipientDSIds() {
-   * @param originalGatewaysReceivers
-   *          The original recipient <code>Gateway</code>s.
+   * @param originalGatewaysReceivers The original recipient <code>Gateway</code>s.
-    this.receipientDSIds = new HashSet<Integer>();
-    for (Integer id:originalGatewaysReceivers) {
+    this.receipientDSIds = new IntOpenHashSet(2);
+    for (Integer id : originalGatewaysReceivers) {
-    this.receipientDSIds = new HashSet<Integer>();
+    this.receipientDSIds = new IntOpenHashSet(2);
-    buffer.append("GatewaySenderEventCallbackArgument [")
-        .append("originalCallbackArg=").append(getOriginalCallbackArg())
-        .append(";originatingSenderId=").append(this.originatingDSId)
-        .append(";recipientGatewayReceivers=").append(this.receipientDSIds)
-        .append("]");
+    buffer.append("GatewaySenderEventCallbackArgument [").append("originalCallbackArg=")
+        .append(getOriginalCallbackArg()).append(";originatingSenderId=")
+        .append(this.originatingDSId).append(";recipientGatewayReceivers=")
+        .append(this.receipientDSIds).append("]");
