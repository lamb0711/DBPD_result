GEODE-4858: use FastPathScanner to register all the bind classes when câ€¦ (#1838)

* do not register bind class on demand. Register all custom element at service start time.

-import java.util.HashMap;
-import java.util.Map;
+import java.util.Arrays;
-import java.util.Set;
+import org.apache.commons.lang.StringUtils;
-import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.XSDRootElement;
-  public static String CACHE_SCHEMA =
-      "http://geode.apache.org/schema/cache http://geode.apache.org/schema/cache/cache-1.0.xsd";
-  Map<Class, String> classAndSchema = new HashMap<>();
-
-  // the default service will handle the cache.xsd validation and set's the cache schema location
-  public JAXBService() {
-    registerBindClassWithSchema(CacheConfig.class, CACHE_SCHEMA);
-    // find the local Cache-1.0.xsd
-    URL local_cache_xsd = ClassPathLoader.getLatest()
-        .getResource("META-INF/schemas/geode.apache.org/schema/cache/cache-1.0.xsd");
-    validateWith(local_cache_xsd);
+  public JAXBService(Class<?>... xsdRootClasses) {
+    try {
+      JAXBContext jaxbContext = JAXBContext.newInstance(xsdRootClasses);
+      marshaller = jaxbContext.createMarshaller();
+      unmarshaller = jaxbContext.createUnmarshaller();
+      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
+
+      String schemas = Arrays.stream(xsdRootClasses).map(c -> {
+        XSDRootElement element = c.getAnnotation(XSDRootElement.class);
+        if (element != null && StringUtils.isNotEmpty(element.namespace())
+            && StringUtils.isNotEmpty(element.schemaLocation())) {
+          return (element.namespace() + " " + element.schemaLocation());
+        }
+        return null;
+      }).filter(Objects::nonNull).collect(Collectors.joining(" "));
+
+      marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, schemas);
+    } catch (Exception e) {
+      throw new RuntimeException(e.getMessage(), e);
+    }
-  /**
-   * if you want the output xml have schemaLocation correctly set for your namespace, use this
-   * instead of registerBindClass(Class)
-   *
-   * @param c e.g CacheConfig.class
-   * @param nameSpaceAndSchemaLocation e.g "http://geode.apache.org/schema/cache
-   *        http://geode.apache.org/schema/cache/cache-1.0.xsd"
-   */
-  public void registerBindClassWithSchema(Class c, String nameSpaceAndSchemaLocation) {
-    // if this class is not in the map yet
-    if (!classAndSchema.keySet().contains(c)) {
-      classAndSchema.put(c, nameSpaceAndSchemaLocation);
-      try {
-        Set<Class> bindClasses = classAndSchema.keySet();
-        JAXBContext jaxbContext =
-            JAXBContext.newInstance(bindClasses.toArray(new Class[bindClasses.size()]));
-        marshaller = jaxbContext.createMarshaller();
-        unmarshaller = jaxbContext.createUnmarshaller();
-        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
-        updateSchema();
-      } catch (Exception e) {
-        throw new RuntimeException(e.getMessage(), e);
-      }
-      return;
-    }
-
-    // if this class is in the map already and we are simply adding/updating schema
-    String oldSchema = classAndSchema.get(c);
-    if (nameSpaceAndSchemaLocation == null) {
-      return;
-    }
-
-    if (!nameSpaceAndSchemaLocation.equals(oldSchema)) {
-      classAndSchema.put(c, nameSpaceAndSchemaLocation);
-      updateSchema();
-    }
-  }
-
-  void updateSchema() {
-    try {
-      String schemas = classAndSchema.values().stream().filter(Objects::nonNull)
-          .collect(Collectors.joining(" "));
-      marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, schemas);
-    } catch (Exception e) {
-      throw new RuntimeException(e.getMessage(), e);
-    }
+  public void validateWithLocalCacheXSD() {
+    // find the local Cache-1.0.xsd
+    URL local_cache_xsd = ClassPathLoader.getLatest()
+        .getResource("META-INF/schemas/geode.apache.org/schema/cache/cache-1.0.xsd");
+    validateWith(local_cache_xsd);
-
-  public void registerBindClasses(Class clazz) {
-    registerBindClassWithSchema(clazz, null);
-  }
