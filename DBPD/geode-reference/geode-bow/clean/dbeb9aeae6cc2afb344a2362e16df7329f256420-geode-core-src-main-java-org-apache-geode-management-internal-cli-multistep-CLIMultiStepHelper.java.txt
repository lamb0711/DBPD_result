Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Utility class to abstract CompositeResultData for Multi-step commands
- * Also contain execution strategy for multi-step commands
+ * Utility class to abstract CompositeResultData for Multi-step commands Also contain execution
+ * strategy for multi-step commands
-    CLIStep[] steps = (CLIStep[]) ReflectionUtils.invokeMethod(parseResult.getMethod(), parseResult.getInstance(),
-        parseResult.getArguments());
+    CLIStep[] steps = (CLIStep[]) ReflectionUtils.invokeMethod(parseResult.getMethod(),
+        parseResult.getInstance(), parseResult.getArguments());
-          nextStepArgs = extractArgumentsForNextStep(result);          
+          nextStepArgs = extractArgumentsForNextStep(result);
-              return ResultBuilder.buildResult(ResultBuilder.createErrorResultData().addLine(
-                  "Wrong step name returned by previous step : " + step));
+              return ResultBuilder.buildResult(ResultBuilder.createErrorResultData()
+                  .addLine("Wrong step name returned by previous step : " + step));
-      return ResultBuilder.buildResult(ResultBuilder.createErrorResultData().addLine(
-          "Multi-step command Return NULL STEP Array"));
+      return ResultBuilder.buildResult(ResultBuilder.createErrorResultData()
+          .addLine("Multi-step command Return NULL STEP Array"));
-  private static Result executeStep(final LogWrapper logWrapper,
-                                    final Gfsh shell,
-                                    final CLIStep nextStep,
-                                    final ParseResult parseResult,
-                                    final SectionResultData nextStepArgs)
-  {
+  private static Result executeStep(final LogWrapper logWrapper, final Gfsh shell,
+      final CLIStep nextStep, final ParseResult parseResult, final SectionResultData nextStepArgs) {
-      if (nextStep instanceof CLIRemoteStep) {        
+      if (nextStep instanceof CLIRemoteStep) {
-            // this makes sure that "quit" step will correctly update the environment with empty stepArgs
+            // this makes sure that "quit" step will correctly update the environment with empty
+            // stepArgs
-            commandRequest.setCustomInput(changeStepName(gfshParseResult.getUserInput(), nextStep.getName()));
-            commandRequest.getCustomParameters().put(CliStrings.QUERY__STEPNAME, nextStep.getName());
+            commandRequest
+                .setCustomInput(changeStepName(gfshParseResult.getUserInput(), nextStep.getName()));
+            commandRequest.getCustomParameters().put(CliStrings.QUERY__STEPNAME,
+                nextStep.getName());
-          try{throw new Exception();} catch (Exception ex) {ex.printStackTrace();}
-          throw new IllegalStateException("Can't execute a remote command without connection. Use 'connect' first to connect.");
+          try {
+            throw new Exception();
+          } catch (Exception ex) {
+            ex.printStackTrace();
+          }
+          throw new IllegalStateException(
+              "Can't execute a remote command without connection. Use 'connect' first to connect.");
-          Gfsh.getCurrentInstance().setEnvProperty(CLIMultiStepHelper.STEP_ARGS, argsJSon.toString());
+          Gfsh.getCurrentInstance().setEnvProperty(CLIMultiStepHelper.STEP_ARGS,
+              argsJSon.toString());
-    int i = userInput.indexOf("--step-name=");    
+    int i = userInput.indexOf("--step-name=");
-      // TODO this is a dangerous assumption... to assume the "--step-name" query command option is the last parameter
+      // TODO this is a dangerous assumption... to assume the "--step-name" query command option is
+      // the last parameter
-        throw new StepExecutionException("Step returned result of type other than " + ResultData.TYPE_COMPOSITE + " Type "
-            + cResult.getType());
+        throw new StepExecutionException("Step returned result of type other than "
+            + ResultData.TYPE_COMPOSITE + " Type " + cResult.getType());
-        throw new RuntimeException("Step returned result of type other than " + ResultData.TYPE_COMPOSITE + " Type "
-            + cResult.getType());
+        throw new RuntimeException("Step returned result of type other than "
+            + ResultData.TYPE_COMPOSITE + " Type " + cResult.getType());
-    if(CliUtil.isGfshVM){
+    if (CliUtil.isGfshVM) {
-    }else{
+    } else {
-  
+
-  
+
-  }   
+  }
-  public static Result createPageResult(String fields[], Object values[], String step, String[] header, Object[][] table) {
+  public static Result createPageResult(String fields[], Object values[], String step,
+      String[] header, Object[][] table) {
-  public static Result createPageResult(List<String> fields, @SuppressWarnings("rawtypes") List values, String step, String[] header, Object[][] table) {
+  public static Result createPageResult(List<String> fields,
+      @SuppressWarnings("rawtypes") List values, String step, String[] header, Object[][] table) {
-  private static void createPageTableAndBanner(SectionResultData page, String[] header, Object[][] table) {
+  private static void createPageTableAndBanner(SectionResultData page, String[] header,
+      Object[][] table) {
-  
-  public static Result createBannerResult(List<String> fields, @SuppressWarnings("rawtypes") List values, String step) {
+
+  public static Result createBannerResult(List<String> fields,
+      @SuppressWarnings("rawtypes") List values, String step) {
-  
-  public static abstract class LocalStep implements CLIStep{
-    private String name=null;
+
+  public static abstract class LocalStep implements CLIStep {
+    private String name = null;
-    
-    public LocalStep(String name, Object[] arguments){
+
+    public LocalStep(String name, Object[] arguments) {
-    
-    public String getName(){
+
+    public String getName() {
-    }    
+    }
-  
+
-  public static abstract class RemoteStep implements CLIRemoteStep{
-    private String name=null;
+  public static abstract class RemoteStep implements CLIRemoteStep {
+    private String name = null;
-    
-    public RemoteStep(String name, Object[] arguments){
+
+    public RemoteStep(String name, Object[] arguments) {
-    
-    public String getName(){
+
+    public String getName() {
-    }    
+    }
-  
-  public static class StepExecutionException extends RuntimeException{
+
+  public static class StepExecutionException extends RuntimeException {
-    
-    public StepExecutionException(String message){
+
+    public StepExecutionException(String message) {
-    
+
-    public String getMessage(){
+    public String getMessage() {
-    
-    public String getStepExecutionExceptionMessage(){
+
+    public String getStepExecutionExceptionMessage() {
-    
+
-  
+
