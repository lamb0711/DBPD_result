GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
-import org.apache.geode.internal.cache.GemFireCacheImpl;
- * Creates instances of {@link RegionAttributes}. An <code>AttributesFactory</code> instance
- * maintains state for creating <code>RegionAttributes</code> instances. The setter methods are used
- * to change the settings that will be used for creating the next attributes instance with the
- * {@link #create} method. If you create a factory with the default constructor, then the factory is
- * set up to create attributes with all default settings. You can also create a factory by providing
- * a <code>RegionAttributes</code>, which will set up the new factory with the settings provided in
- * that attributes instance.
+ * Creates instances of {@link RegionAttributes}. An {@code AttributesFactory} instance maintains
+ * state for creating {@code RegionAttributes} instances. The setter methods are used to change the
+ * settings that will be used for creating the next attributes instance with the {@link #create}
+ * method. If you create a factory with the default constructor, then the factory is set up to
+ * create attributes with all default settings. You can also create a factory by providing a
+ * {@code RegionAttributes}, which will set up the new factory with the settings provided in that
+ * attributes instance.
- * Once a <code>RegionAttributes</code> is created, it can only be modified after it has been used
- * to create a <code>Region</code>, and then only by using an {@link AttributesMutator} obtained
- * from the region.
+ * Once a {@code RegionAttributes} is created, it can only be modified after it has been used to
+ * create a {@code Region}, and then only by using an {@link AttributesMutator} obtained from the
+ * region.
- * <dt>{@link CacheLoader} [<em>default:</em> <code>null</code>, meaning no loader]</dt>
+ * <dt>{@link CacheLoader} [<em>default:</em> {@code null}, meaning no loader]</dt>
- * <dt>{@link CacheWriter} [<em>default:</em> <code>null</code>, meaning no writer]</dt>
+ * <dt>{@link CacheWriter} [<em>default:</em> {@code null}, meaning no writer]</dt>
- * <dt>{@link CacheListener} [<em>default:</em> <code>null</code>, meaning no listener ]</dt>
+ * <dt>{@link CacheListener} [<em>default:</em> {@code null}, meaning no listener ]</dt>
- * <dt>EarlyAck [<em>default:</em> <code>false</code>]</dt>
- * <dd>Whether or not acks required by <code>Scope.DISTRIBUTED_ACK</code> are sent after an
- * operation is processed. If <code>true</code> then remote caches will ACK before processing an
- * operation sent by the cache that has set earlyAck to <code>true</code>. Note that this attribute
- * is only meaningful on the cache that is initiating an operation; it does not matter what it is
- * set to on the cache that receives the operation.<br>
+ * <dt>EarlyAck [<em>default:</em> {@code false}]</dt>
+ * <dd>Whether or not acks required by {@code Scope.DISTRIBUTED_ACK} are sent after an operation is
+ * processed. If {@code true} then remote caches will ACK before processing an operation sent by the
+ * cache that has set earlyAck to {@code true}. Note that this attribute is only meaningful on the
+ * cache that is initiating an operation; it does not matter what it is set to on the cache that
+ * receives the operation.<br>
- * <dt>EnableAsyncConflation [<em>default:</em> <code>false</code>]</dt>
+ * <dt>EnableAsyncConflation [<em>default:</em> {@code false}]</dt>
- * those whose <code>async-distribution-timeout</code> gemfire.property is greater than zero.
- * AsyncConflation is ignored if the scope is <code>DISTRIBUTED_ACK</code> or <code>GLOBAL</code>.
- * Conflation is only done on entry update operations. It is done by dropping the earlier update
- * from the message queue. {@link #setEnableAsyncConflation}
+ * those whose {@code async-distribution-timeout} gemfire.property is greater than zero.
+ * AsyncConflation is ignored if the scope is {@code DISTRIBUTED_ACK} or {@code GLOBAL}. Conflation
+ * is only done on entry update operations. It is done by dropping the earlier update from the
+ * message queue. {@link #setEnableAsyncConflation}
- * <dt>poolName [<em>default:</em> <code>null</code>, meaning no pool]</dt>
+ * <dt>poolName [<em>default:</em> {@code null}, meaning no pool]</dt>
- * communicate with servers. If <code>null</code>, then it is not a client. If
- * <code>non-null</code>, then the named pool will be used. {@link #setPoolName}
- * {@link RegionAttributes#getPoolName}</dd>
+ * communicate with servers. If {@code null}, then it is not a client. If {@code non-null}, then the
+ * named pool will be used. {@link #setPoolName} {@link RegionAttributes#getPoolName}</dd>
- * <dt>EnableSubscriptionConflation [<em>default:</em> <code>false</code>]</dt>
+ * <dt>EnableSubscriptionConflation [<em>default:</em> {@code false}]</dt>
- * peer to peer communication. If <code>true</code>, messages will be conflated before they are sent
- * from a cache server to its clients. Only the latest value will be sent. Note that this attribute
- * is only meaningful in a client server topology. {@link #setEnableSubscriptionConflation}
+ * peer to peer communication. If {@code true}, messages will be conflated before they are sent from
+ * a cache server to its clients. Only the latest value will be sent. Note that this attribute is
+ * only meaningful in a client server topology. {@link #setEnableSubscriptionConflation}
- * <dt>Publisher [<em>default:</em> <code>false</code>]</dt>
+ * <dt>Publisher [<em>default:</em> {@code false}]</dt>
- * <dt>isCloningEnabled [<em>default:</em> <code>false</code>]</dt>
- * <dd>Whether or not value is cloned before appling <code>Delta</code>s If <code>false</code>,
- * value will not be cloned {@link #setCloningEnabled}
- * {@link RegionAttributes#getCloningEnabled()}</dd></dt>
+ * <dt>isCloningEnabled [<em>default:</em> {@code false}]</dt>
+ * <dd>Whether or not value is cloned before appling {@code Delta}s If {@code false}, value will not
+ * be cloned {@link #setCloningEnabled} {@link RegionAttributes#getCloningEnabled()}</dd></dt>
- * <dt>{@link DataPolicy} [<em>default:</em> <code>DataPolicy.NORMAL</code>]</dt>
+ * <dt>{@link DataPolicy} [<em>default:</em> {@code DataPolicy.NORMAL}]</dt>
- * <dt>{@link MirrorType} [<em>default:</em> <code>MirrorType.NONE</code>]</dt>
+ * <dt>{@link MirrorType} [<em>default:</em> {@code MirrorType.NONE}]</dt>
- * heap has been consumed. Setting <code>EvictionAttributes</code> installs an eviction controller
- * on the Region instantiated with the associated RegionAttributes</dd>
+ * heap has been consumed. Setting {@code EvictionAttributes} installs an eviction controller on the
+ * Region instantiated with the associated RegionAttributes</dd>
- * <dt>KeyConstraint [<em>default:</em> <code>null</code>, meaning no constraint]</dt>
+ * <dt>KeyConstraint [<em>default:</em> {@code null}, meaning no constraint]</dt>
- * <dt>ValueConstraint [<em>default:</em> <code>null</code>, meaning no constraint]</dt>
+ * <dt>ValueConstraint [<em>default:</em> {@code null}, meaning no constraint]</dt>
- * applications in general, a <code>valueConstraint</code> is helpful for compiling queries.<br>
+ * applications in general, a {@code valueConstraint} is helpful for compiling queries.<br>
- * <dt>InitialCapacity [<em>default:</em> <code>16</code>]</dt>
+ * <dt>InitialCapacity [<em>default:</em> {@code 16}]</dt>
- * <dt>LoadFactor [<em>default:</em> <code>0.75</code>]</dt>
+ * <dt>LoadFactor [<em>default:</em> {@code 0.75}]</dt>
- * <dt>ConcurrencyLevel [<em>default:</em> <code>16</code>]</dt>
+ * <dt>ConcurrencyLevel [<em>default:</em> {@code 16}]</dt>
- * <dt>ConcurrencyChecksEnabled [<em>default:</em> <code>false</code>]</dt>
+ * <dt>ConcurrencyChecksEnabled [<em>default:</em> {@code false}]</dt>
- * <dt>StatisticsEnabled [<em>default:</em> <code>false</code>]</dt>
+ * <dt>StatisticsEnabled [<em>default:</em> {@code false}]</dt>
- * <dt>IgnoreJTA [<em>default:</em> <code>false</code>]</dt>
+ * <dt>IgnoreJTA [<em>default:</em> {@code false}]</dt>
- * <dt>DiskStoreName [<em>default:</em> <code>null</code>, meaning no disk store]</dt>
- * <dd>If not <code>null</code> then this region will write its data to the named
- * {@link DiskStore}.<br>
+ * <dt>DiskStoreName [<em>default:</em> {@code null}, meaning no disk store]</dt>
+ * <dd>If not {@code null} then this region will write its data to the named {@link DiskStore}.<br>
- * <dt>DiskSynchronous [<em>default:</em> <code>true</code>]</dt>
- * <dd>If <code>true</code> then any writes to disk done for this region will be done synchronously.
- * This means that they will be in the file system buffer before the operation doing the write
+ * <dt>DiskSynchronous [<em>default:</em> {@code true}]</dt>
+ * <dd>If {@code true} then any writes to disk done for this region will be done synchronously. This
+ * means that they will be in the file system buffer before the operation doing the write
- * If <code>false</code> then any writes to disk done for this region will be done asynchronously.
- * This means that they are queued up to be written and when they are actually written to the file
- * system buffer is determined by the region's {@link DiskStore} configuration. Asynchronous writes
- * will be conflated if the same entry is written while a previous operation for the same entry is
- * still in the queue.<br>
+ * If {@code false} then any writes to disk done for this region will be done asynchronously. This
+ * means that they are queued up to be written and when they are actually written to the file system
+ * buffer is determined by the region's {@link DiskStore} configuration. Asynchronous writes will be
+ * conflated if the same entry is written while a previous operation for the same entry is still in
+ * the queue.<br>
- * <dt>PersistBackup [<em>default:</em> <code>false</code>]</dt>
+ * <dt>PersistBackup [<em>default:</em> {@code false}]</dt>
- * <code>timeInterval</code> of 1000 and a <code>byteThreshold</codE> of 0). <code>rollOplogs</code>
- * is set to true and <code>maxOplogSize</code> is set to 1024 MB]</dt>
+ * {@code timeInterval} of 1000 and a {@code byteThreshold} of 0). {@code rollOplogs} is set to true
+ * and {@code maxOplogSize} is set to 1024 MB]</dt>
- * <dt>DiskDirs [<em>default:</em> Current working directory (<code>user.dir</code>
+ * <dt>DiskDirs [<em>default:</em> Current working directory ({@code user.dir}
- * <dt>{@link PartitionAttributes} [<em>default:</em> <code>null</code>, meaning no region
+ * <dt>{@link PartitionAttributes} [<em>default:</em> {@code null}, meaning no region
- * <dt>LockGrantor [<em>default:</em> <code>false</code>]</dt>
+ * <dt>LockGrantor [<em>default:</em> {@code false}]</dt>
- * <dt>IndexMaintenanceSynchronous [<em>default:</em> <code>false</code>]</dt>
+ * <dt>IndexMaintenanceSynchronous [<em>default:</em> {@code false}]</dt>
- * violated when {@link #create}</code> is called then an {@link IllegalStateException} is thrown.
- * See {@link #validateAttributes}.
+ * violated when {@link #create}} is called then an {@link IllegalStateException} is thrown. See
+ * {@link #validateAttributes}.
- * {@link Cache#createRegion createRegion} are called, then an <code>IllegalStateException</code> is
+ * {@link Cache#createRegion createRegion} are called, then an {@code IllegalStateException} is
- * <li>A region with <code>Scope.LOCAL</code> can only have subregions with
- * <code>Scope.LOCAL</code>.</li>
- * <li><code>Scope.GLOBAL</code> is illegal if there is any other cache in the distributed system
- * that has the same region with <code>Scope.DISTRIBUTED_NO_ACK</code> or
- * <code>Scope.DISTRIBUTED_ACK</code>.</li>
- * <li><code>Scope.DISTRIBUTED_ACK</code> is illegal if there is any other cache in the distributed
- * system that has the same region with <code>Scope.DISTRIBUTED_NO_ACK</code> or
- * <code>Scope.GLOBAL</code>.</li>
- * <li><code>Scope.DISTRIBUTED_NO_ACK</code> is illegal if there is any other cache in the
- * distributed system that has the same region with <code>Scope.DISTRIBUTED_ACK</code> or
- * <code>Scope.GLOBAL</code>.</li>
+ * <li>A region with {@code Scope.LOCAL} can only have subregions with {@code Scope.LOCAL}.</li>
+ * <li>{@code Scope.GLOBAL} is illegal if there is any other cache in the distributed system that
+ * has the same region with {@code Scope.DISTRIBUTED_NO_ACK} or {@code Scope.DISTRIBUTED_ACK}.</li>
+ * <li>{@code Scope.DISTRIBUTED_ACK} is illegal if there is any other cache in the distributed
+ * system that has the same region with {@code Scope.DISTRIBUTED_NO_ACK} or
+ * {@code Scope.GLOBAL}.</li>
+ * <li>{@code Scope.DISTRIBUTED_NO_ACK} is illegal if there is any other cache in the distributed
+ * system that has the same region with {@code Scope.DISTRIBUTED_ACK} or {@code Scope.GLOBAL}.</li>
+@Deprecated
-   * Current value: <code>true</code> each.
+   * Current value: {@code true} each.
-   * Creates a new instance of AttributesFactory ready to create a <code>RegionAttributes</code>
-   * with default settings.
+   * Creates a new instance of AttributesFactory ready to create a {@code RegionAttributes} with
+   * default settings.
-   * Creates a new instance of AttributesFactory ready to create a <code>RegionAttributes</code>
-   * with the same settings as those in the specified <code>RegionAttributes</code>.
+   * Creates a new instance of AttributesFactory ready to create a {@code RegionAttributes} with the
+   * same settings as those in the specified {@code RegionAttributes}.
-   * @param regionAttributes the <code>RegionAttributes</code> used to initialize this
-   *        AttributesFactory
+   * @param regionAttributes the {@code RegionAttributes} used to initialize this AttributesFactory
-   * Sets the cache loader for the next <code>RegionAttributes</code> created.
+   * Sets the cache loader for the next {@code RegionAttributes} created.
-   * Sets the cache writer for the next <code>RegionAttributes</code> created.
+   * Sets the cache writer for the next {@code RegionAttributes} created.
-   * Sets the CacheListener for the next <code>RegionAttributes</code> created. Any existing cache
+   * Sets the CacheListener for the next {@code RegionAttributes} created. Any existing cache
-   * @throws IllegalArgumentException if <code>aListener</code> is null
+   * @throws IllegalArgumentException if {@code aListener} is null
-   * @throws IllegalArgumentException if the <code>newListeners</code> array has a null element
+   * @throws IllegalArgumentException if the {@code newListeners} array has a null element
-   * <code>RegionAttributes</code> created. Default is 0 which indicates no expiration of this type.
+   * {@code RegionAttributes} created. Default is 0 which indicates no expiration of this type.
-   * Sets the idleTimeout CustomExpiry for the next <code>RegionAttributes</code> created.
+   * Sets the idleTimeout CustomExpiry for the next {@code RegionAttributes} created.
-   * <code>RegionAttributes</code> created. Default is 0 which indicates no expiration of this type.
+   * {@code RegionAttributes} created. Default is 0 which indicates no expiration of this type.
-   * Sets the custom timeToLive for the next <code>RegionAttributes</code> created.
+   * Sets the custom timeToLive for the next {@code RegionAttributes} created.
-   * <code>RegionAttributes</code> created. Default is 0 which indicates no expiration of this type
-   * is set.
+   * {@code RegionAttributes} created. Default is 0 which indicates no expiration of this type is
+   * set.
-   * <code>RegionAttributes</code> created. Default is 0 i.e. no expiration of this type.
+   * {@code RegionAttributes} created. Default is 0 i.e. no expiration of this type.
-   * Sets the scope for the next <code>RegionAttributes</code> created. Default scope is
+   * Sets the scope for the next {@code RegionAttributes} created. Default scope is
-   * Sets the EvictionController for the next <code>RegionAttributes</code> created. Use one of the
+   * Sets the EvictionController for the next {@code RegionAttributes} created. Use one of the
-   * <code>AttributesFactory</code>
+   * {@code AttributesFactory}
-   * Sets the mirror type for the next <code>RegionAttributes</code> created.
+   * Sets the mirror type for the next {@code RegionAttributes} created.
-   * Sets the data policy for the next <code>RegionAttributes</code> created. Default data policy is
+   * Sets the data policy for the next {@code RegionAttributes} created. Default data policy is
-   * Sets the key constraint for the next <code>RegionAttributes</code> created. Keys in the region
-   * will be constrained to this class (or subclass). Any attempt to store a key of an incompatible
-   * type in the region will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the key constraint for the next {@code RegionAttributes} created. Keys in the region will
+   * be constrained to this class (or subclass). Any attempt to store a key of an incompatible type
+   * in the region will cause a {@code ClassCastException} to be thrown.
-   * @throws IllegalArgumentException if <code>keyConstraint</code> is a class denoting a primitive
-   *         type
+   * @throws IllegalArgumentException if {@code keyConstraint} is a class denoting a primitive type
-   * Sets the value constraint for the next <code>RegionAttributes</code> created. Values in the
-   * region will be constrained to this class (or subclass). Any attempt to store a value of an
-   * incompatible type in the region will cause a <code>ClassCastException</code> to be thrown.
+   * Sets the value constraint for the next {@code RegionAttributes} created. Values in the region
+   * will be constrained to this class (or subclass). Any attempt to store a value of an
+   * incompatible type in the region will cause a {@code ClassCastException} to be thrown.
-   * @throws IllegalArgumentException if <code>valueConstraint</code> is a class denoting a
-   *         primitive type
+   * @throws IllegalArgumentException if {@code valueConstraint} is a class denoting a primitive
+   *         type
-   * Sets the entry initial capacity for the next <code>RegionAttributes</code> created. This value
-   * is used in initializing the map that holds the entries. Default is 16.
+   * Sets the entry initial capacity for the next {@code RegionAttributes} created. This value is
+   * used in initializing the map that holds the entries. Default is 16.
-   * Sets the entry load factor for the next <code>RegionAttributes</code> created. This value is
-   * used in initializing the map that holds the entries. Default is 0.75.
+   * Sets the entry load factor for the next {@code RegionAttributes} created. This value is used in
+   * initializing the map that holds the entries. Default is 0.75.
-   * Sets the concurrency level of the next <code>RegionAttributes</code> created. This value is
-   * used in initializing the map that holds the entries. Default is 16.
+   * Sets the concurrency level of the next {@code RegionAttributes} created. This value is used in
+   * initializing the map that holds the entries. Default is 16.
-   * @throws IllegalArgumentException if <code>gatewaySender</code> is null
+   * @throws IllegalArgumentException if {@code gatewaySender} is null
-   * @throws IllegalArgumentException if <code>gatewaySender</code> is null
+   * @throws IllegalArgumentException if {@code gatewaySender} is null
-   * Sets the <code>PartitionAttributes</code> that describe how the region is partitioned among
-   * members of the distributed system. This also establishes a data policy of
-   * {@link DataPolicy#PARTITION PARTITION}, if the data policy has not already been set.
+   * Sets the {@code PartitionAttributes} that describe how the region is partitioned among members
+   * of the distributed system. This also establishes a data policy of {@link DataPolicy#PARTITION
+   * PARTITION}, if the data policy has not already been set.
-   * Sets the <code>MembershipAttributes</code> that describe the membership roles required for
-   * reliable access to the region.
+   * Sets the {@code MembershipAttributes} that describe the membership roles required for reliable
+   * access to the region.
+  @Deprecated
-   * Sets the <code>SubscriptionAttributes</code> that describe how the region will subscribe to
-   * other distributed cache instances of the region.
+   * Sets the {@code SubscriptionAttributes} that describe how the region will subscribe to other
+   * distributed cache instances of the region.
-   * @param cloningEnable
-   * If this attribute is set to <code>null</code> or <code>""</code> then the connection pool is
-   * disabled causing regions that use these attributes to be communicate with peers instead of
-   * servers.
+   * If this attribute is set to {@code null} or {@code ""} then the connection pool is disabled
+   * causing regions that use these attributes to be communicate with peers instead of servers.
-   * @param name the name of the connection pool to use; if <code>null</code> or <code>""</code>
-   *        then the connection pool is disabled for regions using these attributes.
+   * @param name the name of the connection pool to use; if {@code null} or {@code ""} then the
+   *        connection pool is disabled for regions using these attributes.
-   * Creates a <code>RegionAttributes</code> with the current settings.
+   * Creates a {@code RegionAttributes} with the current settings.
-   * @return the newly created <code>RegionAttributes</code>
+   * @return the newly created {@code RegionAttributes}
-   * Creates a <code>RegionAttributes</code> with the current settings.
+   * Creates a {@code RegionAttributes} with the current settings.
-   * @return the newly created <code>RegionAttributes</code>
+   * @return the newly created {@code RegionAttributes}
-     * Constructs an instance of <code>RegionAttributes</code> with default settings.
+     * Constructs an instance of {@code RegionAttributes} with default settings.
+    @Deprecated
