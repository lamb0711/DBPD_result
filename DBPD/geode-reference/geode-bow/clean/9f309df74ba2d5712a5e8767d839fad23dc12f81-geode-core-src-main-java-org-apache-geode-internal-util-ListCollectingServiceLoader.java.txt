GEODE-6609: Protect from MetricsPublishingService exceptions (#3429)

Catch and log Errors and RuntimeExceptions thrown from instantiation
of or calls to MetricsPublishingService implementations.

Co-authored-by: Michael Oleske <moleske@pivotal.io>

+import java.util.Iterator;
+import java.util.ServiceConfigurationError;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.internal.logging.LogService;
+
-public class ListCollectingServiceLoader implements CollectingServiceLoader {
+public class ListCollectingServiceLoader<S> implements CollectingServiceLoader<S> {
+  private static final Logger logger = LogService.getLogger();
+
+  private final ServiceLoaderWrapper<S> serviceLoaderWrapper;
+
+  public ListCollectingServiceLoader() {
+    this(new DefaultServiceLoader<>());
+  }
+
+  @VisibleForTesting
+  ListCollectingServiceLoader(ServiceLoaderWrapper<S> serviceLoaderWrapper) {
+    this.serviceLoaderWrapper = serviceLoaderWrapper;
+  }
-  public <S> Collection<S> loadServices(Class<S> service) {
-    List<S> services = new ArrayList<>();
-    ServiceLoader.load(service).iterator().forEachRemaining(services::add);
+  public Collection<S> loadServices(Class<S> service) {
+    serviceLoaderWrapper.load(service);
+
+    Collection<S> services = new ArrayList<>();
+    for (Iterator<S> iterator = serviceLoaderWrapper.iterator(); iterator.hasNext();) {
+      try {
+        S instance = iterator.next();
+        services.add(instance);
+      } catch (ServiceConfigurationError serviceConfigurationError) {
+        logger.error("Error while loading implementations of {}", service.getName(),
+            serviceConfigurationError);
+      }
+    }
+
+
+  interface ServiceLoaderWrapper<S> {
+    void load(Class<S> service);
+
+    Iterator<S> iterator() throws ServiceConfigurationError;
+  }
+
+  private static class DefaultServiceLoader<S> implements ServiceLoaderWrapper<S> {
+
+    private ServiceLoader<S> actualServiceLoader;
+
+    @Override
+    public void load(Class<S> service) {
+      actualServiceLoader = ServiceLoader.load(service);
+    }
+
+    @Override
+    public Iterator<S> iterator() throws ServiceConfigurationError {
+      return actualServiceLoader.iterator();
+    }
+  }
