Merge branch 'release/1.8.0'

-import static java.util.concurrent.TimeUnit.SECONDS;
-import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ExecutorService;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.geode.distributed.internal.OverflowQueueWithDMStats;
+import org.apache.geode.distributed.internal.QueueStatHelper;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
+import org.apache.geode.internal.logging.LoggingExecutors;
-  private static final String EVICTOR_THREAD_GROUP_NAME = "EvictorThreadGroup";
-
-  private final ThreadPoolExecutor evictorThreadPool;
+  private final ExecutorService evictorThreadPool;
-    this(cache, EVICTOR_THREAD_GROUP_NAME, EVICTOR_THREAD_NAME);
+    this(cache, EVICTOR_THREAD_NAME);
-  public HeapEvictor(final InternalCache cache, final String threadGroupName,
-      final String threadName) {
+  public HeapEvictor(final InternalCache cache, final String threadName) {
-    ThreadGroup evictorThreadGroup = LoggingThreadGroup.createThreadGroup(threadGroupName, logger);
-    ThreadFactory evictorThreadFactory = new ThreadFactory() {
-      private final AtomicInteger next = new AtomicInteger(0);
-
-      @Override
-      public Thread newThread(Runnable r) {
-        Thread thread = new Thread(evictorThreadGroup, r, threadName + next.incrementAndGet());
-        thread.setDaemon(true);
-        return thread;
-      }
-    };
-
-      BlockingQueue<Runnable> poolQueue =
-          new OverflowQueueWithDMStats(this.cache.getCachePerfStats().getEvictionQueueStatHelper());
-      this.evictorThreadPool = new ThreadPoolExecutor(MAX_EVICTOR_THREADS, MAX_EVICTOR_THREADS, 15,
-          SECONDS, poolQueue, evictorThreadFactory);
+      QueueStatHelper poolStats = this.cache.getCachePerfStats().getEvictionQueueStatHelper();
+      this.evictorThreadPool = LoggingExecutors.newFixedThreadPoolWithTimeout(threadName,
+          MAX_EVICTOR_THREADS, 15, poolStats);
-  public ThreadPoolExecutor getEvictorThreadPool() {
+  public ExecutorService getEvictorThreadPool() {
-    ThreadPoolExecutor pool = getEvictorThreadPool();
-    if (pool == null) {
+    if (getEvictorThreadPool() == null) {
-    int threadsAvailable = pool.getCorePoolSize();
+    int threadsAvailable = MAX_EVICTOR_THREADS;
