GEODE-6102: add gfsh destroy data-source (#2918)

* Adding DestroyDataSourceCommand

- Refactored DestroyJndiBindingFunction class to provide accurate output
  based on command invoking it
- Added unit test class for DestroyDataSourceCommand Class
- Completed Unit test and added DUnit test for DestroyDataSourceCommand

Co-authored-by: Ben Ross <bross@pivotal.io>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Scott Jewell <sjewell@pivotal.io>

-public class DestroyJndiBindingFunction extends CliFunction<String> {
-
-  static final String RESULT_MESSAGE = "Jndi binding \"{0}\" destroyed on \"{1}\"";
-  static final String EXCEPTION_RESULT_MESSAGE = "Jndi binding \"{0}\" not found on \"{1}\"";
+public class DestroyJndiBindingFunction extends CliFunction<Object[]> {
-  public CliFunctionResult executeFunction(FunctionContext context) {
-    String jndiName = (String) context.getArguments();
+  public CliFunctionResult executeFunction(FunctionContext<Object[]> context) {
+    String jndiName = (String) context.getArguments()[0];
+    boolean destroyingDataSource = (boolean) context.getArguments()[1];
+
+    String typeName = "Jndi binding";
+
+    if (destroyingDataSource) {
+      typeName = "Data source";
+      if (checkForInvalidDataSource(jndiName)) {
+        return new CliFunctionResult(context.getMemberName(), CliFunctionResult.StatusState.ERROR,
+            CliStrings.format(
+                "Data Source {0} has invalid type for destroy data-source, destroy jndi-binding command should be used.",
+                jndiName));
+      }
+    }
+
+    final String RESULT_MESSAGE = "{0} \"{1}\" destroyed on \"{2}\"";
+    final String EXCEPTION_RESULT_MESSAGE = "{0} \"{1}\" not found on \"{2}\"";
-      return new CliFunctionResult(context.getMemberName(), true,
-          CliStrings.format(RESULT_MESSAGE, jndiName, context.getMemberName()));
+      return new CliFunctionResult(context.getMemberName(), CliFunctionResult.StatusState.OK,
+          CliStrings.format(RESULT_MESSAGE, typeName, jndiName, context.getMemberName()));
-      return new CliFunctionResult(context.getMemberName(), true,
-          CliStrings.format(EXCEPTION_RESULT_MESSAGE, jndiName, context.getMemberName()));
+      return new CliFunctionResult(context.getMemberName(), CliFunctionResult.StatusState.OK,
+          CliStrings.format(EXCEPTION_RESULT_MESSAGE, typeName, jndiName, context.getMemberName()));
+
+  boolean checkForInvalidDataSource(String jndiName) {
+    return JNDIInvoker.checkForInvalidDataSource(jndiName);
+  }
