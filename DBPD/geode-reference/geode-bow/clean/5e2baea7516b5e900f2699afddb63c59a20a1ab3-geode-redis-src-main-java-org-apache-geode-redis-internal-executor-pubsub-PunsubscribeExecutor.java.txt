Feature/expand pubsub support (#5284)

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Sarah <sabbey@pivotal.io>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
+import java.util.Collection;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.apache.geode.redis.internal.data.ByteArrayWrapper;
-    byte[] pattern = command.getProcessedCommand().get(1);
-    long subscriptionCount =
-        context
-            .getPubSub()
-            .punsubscribe(new GlobPattern(new String(pattern)), context.getClient());
-    ArrayList<Object> items = new ArrayList<>();
-    items.add("punsubscribe");
-    items.add(pattern);
-    items.add(subscriptionCount);
+    List<String> channelNames = extractChannelNames(command);
+    if (channelNames.isEmpty()) {
+      channelNames = context.getPubSub().findSubscribedChannels(context.getClient());
+    }
-    return RedisResponse.array(items);
+    Collection<Collection<?>> response = punsubscribe(context, channelNames);
+
+    return RedisResponse.flattenedArray(response);
+  }
+
+  private List<String> extractChannelNames(Command command) {
+    return command.getProcessedCommandWrappers().stream()
+        .skip(1)
+        .map(ByteArrayWrapper::toString)
+        .collect(Collectors.toList());
+  }
+
+  private Collection<Collection<?>> punsubscribe(ExecutionHandlerContext context,
+      List<String> channelNames) {
+    Collection<Collection<?>> response = new ArrayList<>();
+
+    if (channelNames.isEmpty()) {
+      response.add(createItem(null, 0));
+    } else {
+      for (String channel : channelNames) {
+        long subscriptionCount =
+            context.getPubSub().punsubscribe(new GlobPattern(channel), context.getClient());
+        response.add(createItem(channel, subscriptionCount));
+      }
+    }
+    return response;
+  }
+
+  private ArrayList<Object> createItem(String channel, long subscriptionCount) {
+    ArrayList<Object> oneItem = new ArrayList<>();
+    oneItem.add("punsubscribe");
+    oneItem.add(channel);
+    oneItem.add(subscriptionCount);
+    return oneItem;
