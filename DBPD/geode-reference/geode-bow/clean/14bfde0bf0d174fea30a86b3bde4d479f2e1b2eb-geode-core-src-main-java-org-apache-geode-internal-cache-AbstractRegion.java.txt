Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-      logger.warn(LocalizedMessage.create(LocalizedStrings.Mem_LRU_Eviction_Attribute_Reset,
+      logger.warn(
+          "For region {} with data policy PARTITION, memory LRU eviction attribute maximum has been reset from {}MB to local-max-memory {}MB",
-              attrs.getPartitionAttributes().getLocalMaxMemory()}));
+              attrs.getPartitionAttributes().getLocalMaxMemory()});
-            LocalizedStrings.AbstractRegion_THE_CONNECTION_POOL_0_HAS_NOT_BEEN_CREATED
-                .toLocalizedString(this.poolName));
+            String.format("The connection pool %s has not been created",
+                this.poolName));
-          LocalizedStrings.AttributesFactory_CONCURRENCY_CHECKS_MUST_BE_ENABLED
-              .toLocalizedString());
+          "Concurrency checks cannot be disabled for regions that use persistence");
-          LocalizedStrings.AbstractRegion_NO_MIRROR_TYPE_CORRESPONDS_TO_DATA_POLICY_0
-              .toLocalizedString(this.getDataPolicy()));
+          String.format("No mirror type corresponds to data policy %s",
+              this.getDataPolicy()));
-          LocalizedStrings.AbstractRegion_MORE_THAN_ONE_CACHE_LISTENER_EXISTS.toLocalizedString());
+          "More than one cache listener exists.");
-          LocalizedStrings.AbstractRegion_ADDCACHELISTENER_PARAMETER_WAS_NULL.toLocalizedString());
+          "addCacheListener parameter was null");
-              LocalizedStrings.AbstractRegion_INITCACHELISTENERS_PARAMETER_HAD_A_NULL_ELEMENT
-                  .toLocalizedString());
+              "initCacheListeners parameter had a null element");
-          LocalizedStrings.AbstractRegion_REMOVECACHELISTENER_PARAMETER_WAS_NULL
-              .toLocalizedString());
+          "removeCacheListener parameter was null");
-          LocalizedStrings.AbstractRegion_0_ACTION_IS_INCOMPATIBLE_WITH_THIS_REGIONS_DATA_POLICY
-              .toLocalizedString(mode));
+          String.format("%s action is incompatible with this region's data policy.",
+              mode));
-          LocalizedStrings.AbstractRegion_IDLETIMEOUT_MUST_NOT_BE_NULL.toLocalizedString());
+          "idleTimeout must not be null");
-          LocalizedStrings.AbstractRegion_CANNOT_SET_IDLE_TIMEOUT_WHEN_STATISTICS_ARE_DISABLED
-              .toLocalizedString());
+          "Cannot set idle timeout when statistics are disabled.");
-          LocalizedStrings.AbstractRegion_CANNOT_SET_IDLE_TIMEOUT_WHEN_STATISTICS_ARE_DISABLED
-              .toLocalizedString());
+          "Cannot set idle timeout when statistics are disabled.");
-          LocalizedStrings.AbstractRegion_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString());
+          "timeToLive must not be null");
-          LocalizedStrings.AbstractRegion_CANNOT_SET_TIME_TO_LIVE_WHEN_STATISTICS_ARE_DISABLED
-              .toLocalizedString());
+          "Cannot set time to live when statistics are disabled");
-          LocalizedStrings.AbstractRegion_CANNOT_SET_CUSTOM_TIME_TO_LIVE_WHEN_STATISTICS_ARE_DISABLED
-              .toLocalizedString());
+          "Cannot set custom time to live when statistics are disabled");
-            LocalizedStrings.AttributesFactory_INVALIDATE_REGION_NOT_SUPPORTED_FOR_PR
-                .toLocalizedString());
+            "ExpirationAction INVALIDATE or LOCAL_INVALIDATE for region is not supported for Partitioned Region.");
-            LocalizedStrings.AttributesFactory_DESTROY_REGION_NOT_SUPPORTED_FOR_PR
-                .toLocalizedString());
+            "ExpirationAction DESTROY or LOCAL_DESTROY for region is not supported for Partitioned Region.");
-          LocalizedStrings.AbstractRegion_IDLETIMEOUT_MUST_NOT_BE_NULL.toLocalizedString());
+          "idleTimeout must not be null");
-          LocalizedStrings.AbstractRegion_0_ACTION_IS_INCOMPATIBLE_WITH_THIS_REGIONS_DATA_POLICY
-              .toLocalizedString("idleTimeout"));
+          String.format("%s action is incompatible with this region's data policy.",
+              "idleTimeout"));
-          LocalizedStrings.AbstractRegion_CANNOT_SET_IDLE_TIMEOUT_WHEN_STATISTICS_ARE_DISABLED
-              .toLocalizedString());
+          "Cannot set idle timeout when statistics are disabled.");
-          LocalizedStrings.AbstractRegion_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString());
+          "timeToLive must not be null");
-          LocalizedStrings.AbstractRegion_0_ACTION_IS_INCOMPATIBLE_WITH_THIS_REGIONS_DATA_POLICY
-              .toLocalizedString("timeToLive"));
+          String.format("%s action is incompatible with this region's data policy.",
+              "timeToLive"));
-          LocalizedStrings.AbstractRegion_CANNOT_SET_TIME_TO_LIVE_WHEN_STATISTICS_ARE_DISABLED
-              .toLocalizedString());
+          "Cannot set time to live when statistics are disabled");
-          LocalizedStrings.AbstractRegion_CANNOT_SET_LOCK_GRANTOR_WHEN_SCOPE_IS_NOT_GLOBAL
-              .toLocalizedString());
+          "Cannot set lock grantor when scope is not global");
-          LocalizedStrings.AbstractRegion_STATISTICS_DISABLED_FOR_REGION_0
-              .toLocalizedString(getFullPath()));
+          String.format("Statistics disabled for region ' %s '",
+              getFullPath()));
-        logger.warn(
-            LocalizedMessage.create(LocalizedStrings.AbstractRegion_CACHECALLBACK_CLOSE_EXCEPTION),
+        logger.warn("CacheCallback close exception",
-          LocalizedStrings.AbstractRegion_SELECTVALUE_EXPECTS_RESULTS_OF_SIZE_1_BUT_FOUND_RESULTS_OF_SIZE_0
-              .toLocalizedString(result.size()));
+          String.format("selectValue expects results of size 1, but found results of size %s",
+              result.size()));
+  public InternalCache getInternalCache() {
+    return cache;
+  }
+
+  @Override
