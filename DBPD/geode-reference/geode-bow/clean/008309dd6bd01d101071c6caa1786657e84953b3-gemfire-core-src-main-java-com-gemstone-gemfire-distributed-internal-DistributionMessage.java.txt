Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  /**
+   * True if the P2P reader that received this message is a SHARED reader.
+   */
+  private transient boolean sharedReceiver;
+  
-  public final boolean isDirectAck() {
+  public boolean isDirectAck() {
-   * Return true of this message should be sent through JGroups instead of the
+   * Return true of this message should be sent via UDP instead of the
-  public boolean sendViaJGroups() {
+  public boolean sendViaUDP() {
-      return "<recipients: ALL>";
+      return "recipients: ALL";
-      return "<recipients: multcast>";
+      return "recipients: multicast";
-      return "<recipients: ALL>";
+      return "recipients: ALL";
-      sb.append("<recipients: ");
+      sb.append("recipients: <");
-    inlineProcess |= this.getInlineProcess();
-    inlineProcess |= Connection.isDominoThread();
-    inlineProcess |= this.acker != null;
+    boolean forceInline = this.acker != null || getInlineProcess() || Connection.isDominoThread();
+    
+    if (inlineProcess && !forceInline && isSharedReceiver()) {
+      // If processing this message may need to add
+      // to more than one serial gateway then don't
+      // do it inline.
+      if (mayAddToMultipleSerialGateways(dm)) {
+        inlineProcess = false;
+      }
+    }
+    
+    inlineProcess |= forceInline;
+  protected boolean mayAddToMultipleSerialGateways(DistributionManager dm) {
+    // subclasses should override this method if processing
+    // them may add to multiple serial gateways.
+    return false;
+  }
+
-    return thrname.startsWith("UDP");
+    //return thrname.startsWith("Geode UDP");
+    return thrname.startsWith("unicast receiver") || thrname.startsWith("multicast receiver");
+  
+  public void setSharedReceiver(boolean v) {
+    this.sharedReceiver = v;
+  }
+  public boolean isSharedReceiver() {
+    return this.sharedReceiver;
+  }
