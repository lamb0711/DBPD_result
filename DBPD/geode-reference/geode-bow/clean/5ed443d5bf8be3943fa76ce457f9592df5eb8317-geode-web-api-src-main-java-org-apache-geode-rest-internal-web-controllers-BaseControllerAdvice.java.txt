GEODE-1570 - developer REST API should be secured

* Merged with develop after org.apache package rename
* Moved classes to internal.
* this closes #251

-import org.apache.logging.log4j.Logger;
-import org.springframework.http.HttpStatus;
-import org.springframework.web.HttpRequestMethodNotSupportedException;
-import org.springframework.web.bind.annotation.ControllerAdvice;
-import org.springframework.web.bind.annotation.ExceptionHandler;
-import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.bind.annotation.ResponseStatus;
-
+import org.apache.geode.security.AuthenticationFailedException;
+import org.apache.geode.security.NotAuthorizedException;
+import org.apache.logging.log4j.Logger;
+import org.apache.shiro.authc.AuthenticationException;
+import org.springframework.http.HttpStatus;
+import org.springframework.security.access.AccessDeniedException;
+import org.springframework.web.HttpRequestMethodNotSupportedException;
+import org.springframework.web.bind.annotation.ControllerAdvice;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
-public class BaseControllerAdvice extends AbstractBaseController{
+public class BaseControllerAdvice extends AbstractBaseController {
+   * Handles an AuthenticationFailedException thrown by a REST API web service endpoint, HTTP request handler method.
+   * <p/>
+   * @param cause the Exception causing the error.
+   * @return a ResponseEntity with an appropriate HTTP status code (403 - Forbidden)
+   */
+  @ExceptionHandler(AuthenticationFailedException.class)
+  @ResponseBody
+  @ResponseStatus(HttpStatus.UNAUTHORIZED)
+  public String handleException(final AuthenticationFailedException cause) {
+    return convertErrorAsJson(cause.getMessage());
+  }
+
+  /**
+   * Handles an AuthenticationException thrown by a REST API web service endpoint, HTTP request handler method.
+   * <p/>
+   * @param cause the Exception causing the error.
+   * @return a ResponseEntity with an appropriate HTTP status code (403 - Forbidden)
+   */
+  @ExceptionHandler(AuthenticationException.class)
+  @ResponseBody
+  @ResponseStatus(HttpStatus.UNAUTHORIZED)
+  public String handleException(final AuthenticationException cause) {
+    return convertErrorAsJson(cause.getMessage());
+  }
+
+  /**
+   * Handles an AccessDenied Exception thrown by a REST API web service endpoint, HTTP request handler method.
+   * <p/>
+   * @param cause the Exception causing the error.
+   * @return a ResponseEntity with an appropriate HTTP status code (403 - Forbidden)
+   */
+  @ExceptionHandler(AccessDeniedException.class)
+  @ResponseBody
+  @ResponseStatus(HttpStatus.FORBIDDEN)
+  public String handleException(final AccessDeniedException cause) {
+    return convertErrorAsJson(cause.getMessage());
+  }
+
+  /**
+   * Handles an NotAuthorized Exception thrown by a GeodeSecurityUtil.
+   * <p/>
+   * @param cause the Exception causing the error.
+   * @return a ResponseEntity with an appropriate HTTP status code (403 - Forbidden)
+   */
+  @ExceptionHandler(NotAuthorizedException.class)
+  @ResponseBody
+  @ResponseStatus(HttpStatus.FORBIDDEN)
+  public String handleException(final NotAuthorizedException cause) {
+    return convertErrorAsJson(cause.getMessage());
+  }
+
+  /**
-    
+
-      logger.debug(stackTrace);  
+      logger.debug(stackTrace);
-    
+
-  
+
