Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>CanonicalInstantiator</code> is much like its parent
- * <code>Instantiator</code> except that instead of
- * needing to implement <code>newInstance()</code>
- * you now must implement <code>newInstance(DataInput)</code>.
- * The addition of the <code>DataInput</code> parameter allows the instance
- * creator to optionally read data from the data input stream and use it to
- * decide the instance to create. This allows a value that represents a
- * canonical instance to be written by a class's {@link DataSerializer#toData}
- * and then be read by <code>newInstance(DataInput)</code>
- * and map it back to a canonical instance.
+ * <code>CanonicalInstantiator</code> is much like its parent <code>Instantiator</code> except that
+ * instead of needing to implement <code>newInstance()</code> you now must implement
+ * <code>newInstance(DataInput)</code>. The addition of the <code>DataInput</code> parameter allows
+ * the instance creator to optionally read data from the data input stream and use it to decide the
+ * instance to create. This allows a value that represents a canonical instance to be written by a
+ * class's {@link DataSerializer#toData} and then be read by <code>newInstance(DataInput)</code> and
+ * map it back to a canonical instance.
- * Note that {@link DataSerializer#fromData} is always called on the instance
- * returned from <code>newInstance(DataInput)</code>.
+ * Note that {@link DataSerializer#fromData} is always called on the instance returned from
+ * <code>newInstance(DataInput)</code>.
-   * Creates a new <code>CanonicalInstantiator</code> that instantiates a given
-   * class.
+   * Creates a new <code>CanonicalInstantiator</code> that instantiates a given class.
-   * @param c
-   *        The <code>DataSerializable</code> class to register.  This
-   *        class must have a static initializer that registers this
-   *        <code>Instantiator</code>. 
-   * @param classId
-   *        A unique id for class <code>c</code>.  The
-   *        <code>classId</code> must not be zero.
+   * @param c The <code>DataSerializable</code> class to register. This class must have a static
+   *        initializer that registers this <code>Instantiator</code>.
+   * @param classId A unique id for class <code>c</code>. The <code>classId</code> must not be zero.
-   * @throws IllegalArgumentException
-   *         If <code>c</code> does not implement
-   *         <code>DataSerializable</code>, <code>classId</code> is
-   *         less than or equal to zero.
-   * @throws NullPointerException
-   *         If <code>c</code> is <code>null</code>
+   * @throws IllegalArgumentException If <code>c</code> does not implement
+   *         <code>DataSerializable</code>, <code>classId</code> is less than or equal to zero.
+   * @throws NullPointerException If <code>c</code> is <code>null</code>
-  
+
-   * This method is not supported and if called will
-   * throw UnsupportedOperationException.
-   * Use {@link #newInstance(DataInput)} instead.
+   * This method is not supported and if called will throw UnsupportedOperationException. Use
+   * {@link #newInstance(DataInput)} instead.
+
-   * Creates a new "empty" instance of a <Code>DataSerializable</code>
-   * class whose state will be filled in by invoking its 
-   * {@link DataSerializable#fromData fromData} method.
+   * Creates a new "empty" instance of a <Code>DataSerializable</code> class whose state will be
+   * filled in by invoking its {@link DataSerializable#fromData fromData} method.
+   * 
-  public abstract DataSerializable newInstance(DataInput in)
-    throws IOException;
+  public abstract DataSerializable newInstance(DataInput in) throws IOException;
