GEODE-7626: Break dependency on LocalViewMessage in membership (#4538)

* GEODE-7626: Break dependency on LocalViewMessage in membership

LocalViewMessage was a DistributionMessage executed in an executor owned
by ClusterDistributionmanager.  This arrangement was very convoluted
because CDM only had upstream involvement in membership view
installation.

This PR moves view installation into GMSMembership using a
single-threaded executor similar to what CDM used but without
statistics.  Stats for the view installation thread have never been
useful so I have not retained that functionality.

There are already many tests for view installation, so while I've
modified a couple I haven't added any new tests.

* make constructor private

* simplifying the executor

+import java.util.Queue;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.RejectedExecutionHandler;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.adapter.LocalViewMessage;
+import org.apache.geode.logging.internal.executors.LoggingThreadFactory;
+  private ExecutorService viewExecutor;
+
+    LinkedBlockingQueue<Runnable> feed = new LinkedBlockingQueue<>();
+    ThreadFactory threadFactory = new LoggingThreadFactory("Geode View Processor");
+    this.viewExecutor = new ThreadPoolExecutor(1, 1, 30,
+        TimeUnit.SECONDS, feed, threadFactory, new ViewExecutorBlockHandler(feed));
-      // view processing can take a while, so we use a separate thread
-      // to avoid blocking a reader thread
-      long newId = viewArg.getViewId();
-      LocalViewMessage v = new LocalViewMessage((InternalDistributedMember) address, newId,
-          (MembershipView<InternalDistributedMember>) viewArg,
-          (GMSMembership<InternalDistributedMember>) GMSMembership.this);
-      try {
-        messageListener.messageReceived((Message<ID>) v);
-      } catch (MemberShunnedException e) {
-        logger.error("View installation was blocked by a MemberShunnedException", e);
-      }
+      viewExecutor.submit(() -> processView(viewArg.getViewId(), viewArg));
+
+    viewExecutor.shutdownNow();
+
+  private static class ViewExecutorBlockHandler implements RejectedExecutionHandler {
+
+    private final Queue queue;
+
+    private ViewExecutorBlockHandler(Queue feed) {
+      queue = feed;
+    }
+
+    @Override
+    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
+      if (executor.isShutdown()) {
+        throw new RejectedExecutionException(
+            "executor has been shutdown");
+      } else {
+        try {
+          executor.getQueue().put(r);
+        } catch (InterruptedException ie) {
+          Thread.currentThread().interrupt();
+          RejectedExecutionException e = new RejectedExecutionException(
+              "interrupted");
+          e.initCause(ie);
+        }
+      }
+    }
+  }
+
