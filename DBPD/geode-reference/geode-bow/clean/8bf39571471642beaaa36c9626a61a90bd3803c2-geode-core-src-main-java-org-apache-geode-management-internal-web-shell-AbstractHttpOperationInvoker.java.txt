Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The AbstractHttpOperationInvoker class is an abstract base class encapsulating common functionality for all
- * HTTP-based OperationInvoker implementations.
+ * The AbstractHttpOperationInvoker class is an abstract base class encapsulating common
+ * functionality for all HTTP-based OperationInvoker implementations.
+ * 
-  protected static final String REST_API_URL = REST_API_BASE_URL + REST_API_WEB_APP_CONTEXT + REST_API_VERSION;
-  protected static final String USER_AGENT_HTTP_REQUEST_HEADER_VALUE = "GemFire-Shell/v" + GemFireVersion.getGemFireVersion();
+  protected static final String REST_API_URL =
+      REST_API_BASE_URL + REST_API_WEB_APP_CONTEXT + REST_API_VERSION;
+  protected static final String USER_AGENT_HTTP_REQUEST_HEADER_VALUE =
+      "GemFire-Shell/v" + GemFireVersion.getGemFireVersion();
-  // Executor for scheduling periodic Runnable task to assess the state of the Manager's HTTP service or Web Service
+  // Executor for scheduling periodic Runnable task to assess the state of the Manager's HTTP
+  // service or Web Service
-  // a reference to the GemFire shell (Gfsh) instance using this HTTP-based OperationInvoker for command execution
+  // a reference to the GemFire shell (Gfsh) instance using this HTTP-based OperationInvoker for
+  // command execution
-  private final List<MediaType> acceptableMediaTypes = Arrays.asList(MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN);
+  private final List<MediaType> acceptableMediaTypes =
+      Arrays.asList(MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN);
-  // a Java Logger used to log severe, warning, informational and debug messages during the operation of this invoker
+  // a Java Logger used to log severe, warning, informational and debug messages during the
+  // operation of this invoker
-   * Default, public, no-arg constructor to create an instance of the AbstractHttpOperationInvoker class
-   * for testing purposes.
+   * Default, public, no-arg constructor to create an instance of the AbstractHttpOperationInvoker
+   * class for testing purposes.
-   * Constructs an instance of the AbstractHttpOperationInvoker class with a reference to the GemFire shell (Gfsh)
-   * instance using this HTTP-based OperationInvoker to send commands to the GemFire Manager via HTTP for processing.
-   * @param gfsh a reference to the instance of the GemFire shell (Gfsh) using this HTTP-based OperationInvoker for
-   * command processing.
+   * Constructs an instance of the AbstractHttpOperationInvoker class with a reference to the
+   * GemFire shell (Gfsh) instance using this HTTP-based OperationInvoker to send commands to the
+   * GemFire Manager via HTTP for processing.
+   * 
+   * @param gfsh a reference to the instance of the GemFire shell (Gfsh) using this HTTP-based
+   *        OperationInvoker for command processing.
-   * @see #AbstractHttpOperationInvoker(org.apache.geode.management.internal.cli.shell.Gfsh, String, Map)
+   * @see #AbstractHttpOperationInvoker(org.apache.geode.management.internal.cli.shell.Gfsh, String,
+   *      Map)
-   * Constructs an instance of the AbstractHttpOperationInvoker class with a reference to the GemFire shell (Gfsh)
-   * instance using this HTTP-based OperationInvoker to send commands to the GemFire Manager via HTTP for procsessing
-   * along with the base URL to the GemFire Manager's embedded HTTP service hosting the HTTP (REST) interface.
-   * @param gfsh a reference to the instance of the GemFire shell (Gfsh) using this HTTP-based OperationInvoker for
-   * command processing.
-   * @param baseUrl a String specifying the base URL to the GemFire Manager's embedded HTTP service hosting the REST
-   * interface.
+   * Constructs an instance of the AbstractHttpOperationInvoker class with a reference to the
+   * GemFire shell (Gfsh) instance using this HTTP-based OperationInvoker to send commands to the
+   * GemFire Manager via HTTP for procsessing along with the base URL to the GemFire Manager's
+   * embedded HTTP service hosting the HTTP (REST) interface.
+   * 
+   * @param gfsh a reference to the instance of the GemFire shell (Gfsh) using this HTTP-based
+   *        OperationInvoker for command processing.
+   * @param baseUrl a String specifying the base URL to the GemFire Manager's embedded HTTP service
+   *        hosting the REST interface.
-  public AbstractHttpOperationInvoker(final Gfsh gfsh, final String baseUrl, Map<String, String> securityProperties) {
+  public AbstractHttpOperationInvoker(final Gfsh gfsh, final String baseUrl,
+      Map<String, String> securityProperties) {
-    // constructs an instance of a single-threaded, scheduled Executor to send periodic HTTP requests to the Manager's
+    // constructs an instance of a single-threaded, scheduled Executor to send periodic HTTP
+    // requests to the Manager's
-    // add our custom HttpMessageConverter for serializing DTO Objects into the HTTP request message body
+    // add our custom HttpMessageConverter for serializing DTO Objects into the HTTP request message
+    // body
-        final String message = String.format("The HTTP request failed with: %1$d - %2$s.", response.getRawStatusCode(), body);
+        final String message = String.format("The HTTP request failed with: %1$d - %2$s.",
+            response.getRawStatusCode(), body);
-        }
-        else if (response.getRawStatusCode() == 403) {
+        } else if (response.getRawStatusCode() == 403) {
-        }
-        else {
+        } else {
-        }
-        finally {
+        } finally {
-   * Asserts the argument is valid, as determined by the caller passing the result of an evaluated expression to this
-   * assertion.
-   * @param validArg a boolean value indicating the evaluation of the expression validating the argument.
-   * @param message a String value used as the message when constructing an IllegalArgumentException.
+   * Asserts the argument is valid, as determined by the caller passing the result of an evaluated
+   * expression to this assertion.
+   * 
+   * @param validArg a boolean value indicating the evaluation of the expression validating the
+   *        argument.
+   * @param message a String value used as the message when constructing an
+   *        IllegalArgumentException.
-  protected static void assertArgument(final boolean validArg, final String message, final Object... args) {
+  protected static void assertArgument(final boolean validArg, final String message,
+      final Object... args) {
+   * 
-   * @param message the String value used as the message when constructing and throwing a NullPointerException.
+   * @param message the String value used as the message when constructing and throwing a
+   *        NullPointerException.
-  protected static void assertNotNull(final Object obj, final String message, final Object... args) {
+  protected static void assertNotNull(final Object obj, final String message,
+      final Object... args) {
-   * Asserts whether state, based on the evaluation of a conditional expression, passed to this assertion is valid.
-   * @param validState a boolean value indicating the evaluation of the expression from which the conditional state
-   * is based.  For example, a caller might use an expression of the form (initableObj.isInitialized()).
+   * Asserts whether state, based on the evaluation of a conditional expression, passed to this
+   * assertion is valid.
+   * 
+   * @param validState a boolean value indicating the evaluation of the expression from which the
+   *        conditional state is based. For example, a caller might use an expression of the form
+   *        (initableObj.isInitialized()).
-  protected static void assertState(final boolean validState, final String message, final Object... args) {
+  protected static void assertState(final boolean validState, final String message,
+      final Object... args) {
+   * 
-   * Returns the base URL to GemFire's REST interface hosted in the GemFire Manager's embedded HTTP service
-   * (Tomcat server).
+   * Returns the base URL to GemFire's REST interface hosted in the GemFire Manager's embedded HTTP
+   * service (Tomcat server).
+   * 
+   * 
-   * Gets the ExecutorService used by this HTTP OperationInvoker to scheduled periodic or delayed tasks.
+   * Gets the ExecutorService used by this HTTP OperationInvoker to scheduled periodic or delayed
+   * tasks.
+   * 
-      "The ExecutorService for this HTTP OperationInvoker (%1$s) was not properly initialized!",
-      getClass().getName());
+        "The ExecutorService for this HTTP OperationInvoker (%1$s) was not properly initialized!",
+        getClass().getName());
-   * Returns the reference to the GemFire shell (Gfsh) instance using this HTTP-based OperationInvoker to send commands
-   * to the GemFire Manager for remote execution and processing.
-   * @return a reference to the instance of the GemFire shell (Gfsh) using this HTTP-based OperationInvoker to process
-   * commands.
+   * Returns the reference to the GemFire shell (Gfsh) instance using this HTTP-based
+   * OperationInvoker to send commands to the GemFire Manager for remote execution and processing.
+   * 
+   * @return a reference to the instance of the GemFire shell (Gfsh) using this HTTP-based
+   *         OperationInvoker to process commands.
-   * Returns a reference to the Spring RestTemplate used by this HTTP-based OperationInvoker to send HTTP requests to
-   * GemFire's REST interface, making REST API calls.
+   * Returns a reference to the Spring RestTemplate used by this HTTP-based OperationInvoker to send
+   * HTTP requests to GemFire's REST interface, making REST API calls.
+   * 
-   * Creates an instance of a client HTTP request with the specified Link targeting the resource as well as the intended
-   * operation on the resource.
-   * @param link a Link with the URI targeting and identifying the resource as well as the method of operation on the
-   * resource.
+   * Creates an instance of a client HTTP request with the specified Link targeting the resource as
+   * well as the intended operation on the resource.
+   * 
+   * @param link a Link with the URI targeting and identifying the resource as well as the method of
+   *        operation on the resource.
+   * 
-   * Creates a Link with the specified relation and URI of the remote resource along with the method of the operation.
+   * Creates a Link with the specified relation and URI of the remote resource along with the method
+   * of the operation.
+   * 
-   * Decodes the encoded String value using the default encoding UTF-8.  It is assumed the String value was encoded
-   * with the URLEncoder using the UTF-8 encoding.  This method handles UnsupportedEncodingException by just returning
-   * the encodedValue.
+   * Decodes the encoded String value using the default encoding UTF-8. It is assumed the String
+   * value was encoded with the URLEncoder using the UTF-8 encoding. This method handles
+   * UnsupportedEncodingException by just returning the encodedValue.
+   * 
-   * Decodes the encoded String value using the specified encoding (such as UTF-8).  It is assumed the String value
-   * was encoded with the URLEncoder using the specified encoding.  This method handles UnsupportedEncodingException
-   * by just returning the encodedValue.
+   * Decodes the encoded String value using the specified encoding (such as UTF-8). It is assumed
+   * the String value was encoded with the URLEncoder using the specified encoding. This method
+   * handles UnsupportedEncodingException by just returning the encodedValue.
+   * 
-   * @return the decoded value of the String or encodedValue if the specified encoding is unsupported.
+   * @return the decoded value of the String or encodedValue if the specified encoding is
+   *         unsupported.
+   * 
-   * @return an encoded value of the String using the default encoding UTF-8 or value if the UTF-8 encoding
-   * is unsupported.
+   * @return an encoded value of the String using the default encoding UTF-8 or value if the UTF-8
+   *         encoding is unsupported.
+   * 
-   * @return an encoded value of the String using the specified encoding or value if the specified encoding
-   * is unsupported.
+   * @return an encoded value of the String using the specified encoding or value if the specified
+   *         encoding is unsupported.
-   * Finds a Link containing the HTTP request URI for the relational operation (state transition) on the resource.
-   * @param relation a String describing the relational operation, or state transition on the resource.
-   * @return an instance of Link containing the HTTP request URI used to perform the intended operation on the resource.
+   * Finds a Link containing the HTTP request URI for the relational operation (state transition) on
+   * the resource.
+   * 
+   * @param relation a String describing the relational operation, or state transition on the
+   *        resource.
+   * @return an instance of Link containing the HTTP request URI used to perform the intended
+   *         operation on the resource.
-   * Handles resource access errors such as ConnectExceptions when the server-side process/service is not listening
-   * for client connections, or the connection to the server/service fails.
+   * Handles resource access errors such as ConnectExceptions when the server-side process/service
+   * is not listening for client connections, or the connection to the server/service fails.
+   * 
-   * @return a user-friendly String message describing the problem and appropriate action/response by the user.
+   * @return a user-friendly String message describing the problem and appropriate action/response
+   *         by the user.
-    return String.format("The connection to the GemFire Manager's HTTP service @ %1$s failed with: %2$s. "
-        + "Please try reconnecting or see the GemFire Manager's log file for further details.",
-      getBaseUrl(), e.getMessage());
+    return String.format(
+        "The connection to the GemFire Manager's HTTP service @ %1$s failed with: %2$s. "
+            + "Please try reconnecting or see the GemFire Manager's log file for further details.",
+        getBaseUrl(), e.getMessage());
+   * 
+   * 
+   * 
+   * 
-   * Sends the HTTP request, using Spring's RestTemplate, to the GemFire REST API web service endpoint, expecting the
-   * specified response type from the server in return.
+   * Sends the HTTP request, using Spring's RestTemplate, to the GemFire REST API web service
+   * endpoint, expecting the specified response type from the server in return.
+   * 
-   * @return a ResponseEntity encapsulating the details of the server's response to the client's HTTP request.
-   * @see #send(org.apache.geode.management.internal.web.http.ClientHttpRequest, Class, java.util.Map)
+   * @return a ResponseEntity encapsulating the details of the server's response to the client's
+   *         HTTP request.
+   * @see #send(org.apache.geode.management.internal.web.http.ClientHttpRequest, Class,
+   *      java.util.Map)
-  protected <T> ResponseEntity<T> send(final ClientHttpRequest request, final Class<T> responseType) {
+  protected <T> ResponseEntity<T> send(final ClientHttpRequest request,
+      final Class<T> responseType) {
-   * Sends the HTTP request, using Spring's RestTemplate, to the GemFire REST API web service endpoint, expecting the
-   * specified response type from the server in return.
+   * Sends the HTTP request, using Spring's RestTemplate, to the GemFire REST API web service
+   * endpoint, expecting the specified response type from the server in return.
+   * 
-   * @return a ResponseEntity encapsulating the details of the server's response to the client's HTTP request.
+   * @return a ResponseEntity encapsulating the details of the server's response to the client's
+   *         HTTP request.
-   * @see org.springframework.web.client.RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, Class)
+   * @see org.springframework.web.client.RestTemplate#exchange(java.net.URI,
+   *      org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, Class)
-  protected <T> ResponseEntity<T> send(final ClientHttpRequest request, final Class<T> responseType, final Map<String, ?> uriVariables) {
+  protected <T> ResponseEntity<T> send(final ClientHttpRequest request, final Class<T> responseType,
+      final Map<String, ?> uriVariables) {
-      request.createRequestEntity(), responseType);
+        request.createRequestEntity(), responseType);
-        response.getStatusCode().getReasonPhrase());
+          response.getStatusCode().getReasonPhrase());
-   * Determines whether this HTTP-based OperationInvoker is successfully connected to the remote GemFire Manager's
-   * HTTP service in order to send commands for execution/processing.
+   * Determines whether this HTTP-based OperationInvoker is successfully connected to the remote
+   * GemFire Manager's HTTP service in order to send commands for execution/processing.
+   * 
-   * Determines whether this HTTP-based OperationInvoker is ready to send commands to the GemFire Manager for remote
-   * execution/processing.
-   * @return a boolean value indicating whether this HTTP-based OperationInvoker is ready for command invocations.
+   * Determines whether this HTTP-based OperationInvoker is ready to send commands to the GemFire
+   * Manager for remote execution/processing.
+   * 
+   * @return a boolean value indicating whether this HTTP-based OperationInvoker is ready for
+   *         command invocations.
-   * Read the attribute identified by name from a remote resource identified by name.  The intent of this method
-   * is to return the value of an attribute on an MBean located in the remote MBeanServer.
+   * Read the attribute identified by name from a remote resource identified by name. The intent of
+   * this method is to return the value of an attribute on an MBean located in the remote
+   * MBeanServer.
+   * 
-   * @throws RestApiCallForCommandNotFoundException if the REST API web service endpoint for accessing an attribute on
-   * an MBean does not exists!
+   * @throws RestApiCallForCommandNotFoundException if the REST API web service endpoint for
+   *         accessing an attribute on an MBean does not exists!
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
-          "De-serializing the result of accessing attribute (%1$s) on MBean (%2$s) failed!",
-          resourceName, attributeName), e);
-      }
-      catch (ClassNotFoundException e) {
+            "De-serializing the result of accessing attribute (%1$s) on MBean (%2$s) failed!",
+            resourceName, attributeName), e);
+      } catch (ClassNotFoundException e) {
-          "The Class type of the result when accessing attribute (%1$s) on MBean (%2$s) was not found!",
-          resourceName, attributeName), e);
+            "The Class type of the result when accessing attribute (%1$s) on MBean (%2$s) was not found!",
+            resourceName, attributeName), e);
-    }
-    else {
-      printSevere("Getting the value of attribute (%1$s) on MBean (%2$s) is currently an unsupported operation!",
-        attributeName, resourceName);
+    } else {
+      printSevere(
+          "Getting the value of attribute (%1$s) on MBean (%2$s) is currently an unsupported operation!",
+          attributeName, resourceName);
+   * 
-        clusterId = (Integer) getAttribute(ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN, "DistributedSystemId");
+        clusterId = (Integer) getAttribute(ManagementConstants.OBJECTNAME__DISTRIBUTEDSYSTEM_MXBEAN,
+            "DistributedSystemId");
-      }
-      catch (Exception ignore) {
+      } catch (Exception ignore) {
-   * Gets a proxy to the remote DistributedSystem MXBean to access attributes and invoke operations on the distributed
-   * system, or the GemFire cluster.
+   * Gets a proxy to the remote DistributedSystem MXBean to access attributes and invoke operations
+   * on the distributed system, or the GemFire cluster.
+   * 
+   * 
-   * @param mbeanInterface the interface of the remote MXBean to proxy for attribute/operation access.
+   * @param mbeanInterface the interface of the remote MXBean to proxy for attribute/operation
+   *        access.
-   * Invoke an operation identified by name on a remote resource identified by name with the given arguments.
-   * The intent of this method is to invoke an arbitrary operation on an MBean located in the remote MBeanServer.
-   * @param resourceName name/url (object name) of the remote resource (MBea) on which operation is to be invoked.
+   * Invoke an operation identified by name on a remote resource identified by name with the given
+   * arguments. The intent of this method is to invoke an arbitrary operation on an MBean located in
+   * the remote MBeanServer.
+   * 
+   * @param resourceName name/url (object name) of the remote resource (MBea) on which operation is
+   *        to be invoked.
-   * @throws RestApiCallForCommandNotFoundException if the REST API web service endpoint for invoking an operation on
-   * an MBean does not exists!
+   * @throws RestApiCallForCommandNotFoundException if the REST API web service endpoint for
+   *         invoking an operation on an MBean does not exists!
-  public Object invoke(final String resourceName, final String operationName, final Object[] params, final String[] signature) {
+  public Object invoke(final String resourceName, final String operationName, final Object[] params,
+      final String[] signature) {
-      request.addParameterValues("parameters", params); // TODO may need to convert method parameter arguments
+      request.addParameterValues("parameters", params); // TODO may need to convert method parameter
+                                                        // arguments
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
-          "De-serializing the result from invoking operation (%1$s) on MBean (%2$s) failed!",
-          resourceName, operationName), e);
-      }
-      catch (ClassNotFoundException e) {
+            "De-serializing the result from invoking operation (%1$s) on MBean (%2$s) failed!",
+            resourceName, operationName), e);
+      } catch (ClassNotFoundException e) {
-          "The Class type of the result from invoking operation (%1$s) on MBean (%2$s) was not found!",
-          resourceName, operationName), e);
+            "The Class type of the result from invoking operation (%1$s) on MBean (%2$s) was not found!",
+            resourceName, operationName), e);
-    }
-    else {
-      printSevere("Invoking operation (%1$s) on MBean (%2$s) is currently an unsupported operation!",
-        operationName, resourceName);
+    } else {
+      printSevere(
+          "Invoking operation (%1$s) on MBean (%2$s) is currently an unsupported operation!",
+          operationName, resourceName);
-   * This method searches the MBean server, based on the OperationsInvoker's JMX-based or remoting capable MBean server
-   * connection, for MBeans matching a specific ObjectName or matching an ObjectName pattern along with satisfying
-   * criteria from the Query expression.
-   * @param objectName the ObjectName or pattern for which matching MBeans in the target MBean server will be returned.
+   * This method searches the MBean server, based on the OperationsInvoker's JMX-based or remoting
+   * capable MBean server connection, for MBeans matching a specific ObjectName or matching an
+   * ObjectName pattern along with satisfying criteria from the Query expression.
+   * 
+   * @param objectName the ObjectName or pattern for which matching MBeans in the target MBean
+   *        server will be returned.
-   * @return a set of ObjectName's matching MBeans in the MBean server matching the ObjectName and Query expression
-   * criteria.
+   * @return a set of ObjectName's matching MBeans in the MBean server matching the ObjectName and
+   *         Query expression criteria.
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-          "An error occurred while querying for MBean names using ObjectName pattern (%1$s) and Query expression (%2$s)!",
-          objectName, queryExpression), e);
+            "An error occurred while querying for MBean names using ObjectName pattern (%1$s) and Query expression (%2$s)!",
+            objectName, queryExpression), e);
-    }
-    else {
+    } else {
-        "Running a query to get the ObjectNames of all MBeans matching the ObjectName pattern (%1$s) and Query expression (%2$s) is currently unsupported!",
-        objectName, queryExpression);
+          "Running a query to get the ObjectNames of all MBeans matching the ObjectName pattern (%1$s) and Query expression (%2$s) is currently unsupported!",
+          objectName, queryExpression);
