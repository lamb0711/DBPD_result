GEODE-5033: Improve TearDown of DistributedTestRule

Change Distributed rules to extend AbstractDistributedTestRule to ensure
that all DUnit VMs were launched prior to setUp of these rules.

Add DistributedTestRule.TearDown which includes everything that the
old DistributedTestCase handled during tearDown.

Using DistributedTestRule as a non-static Rule is probably the best way
to use it going forward. If you use it as a static ClassRule then you
should also register DistributedTestRule.TearDown as a non-static Rule
so that removal of IgnoredExceptions and grep for suspect strings are
both properly invoked after every test method.

-import static org.apache.geode.test.dunit.Host.getHost;
-import static org.assertj.core.api.Assertions.assertThat;
-
-import org.apache.geode.test.junit.rules.serializable.SerializableTestRule;
-public class DistributedRestoreSystemProperties extends AccessibleRestoreSystemProperties
-    implements SerializableTestRule {
+public class DistributedRestoreSystemProperties extends AbstractDistributedTestRule {
-  private final RemoteInvoker invoker;
-
-  private volatile int beforeVmCount;
-
-    this(new RemoteInvoker());
-  }
-
-  public DistributedRestoreSystemProperties(final RemoteInvoker invoker) {
-    super();
-    this.invoker = invoker;
+    // nothing
-  public void before() throws Throwable {
-    beforeVmCount = getVMCount();
-
-    invoker.invokeInEveryVMAndController(() -> invokeBefore());
+  public void before() throws Exception {
+    invoker().invokeInEveryVMAndController(() -> invokeBefore());
-    int afterVmCount = getVMCount();
-    assertThat(afterVmCount).isEqualTo(beforeVmCount);
-
-    invoker.invokeInEveryVMAndController(() -> invokeAfter());
+    invoker().invokeInEveryVMAndController(() -> invokeAfter());
-
-  private int getVMCount() {
-    try {
-      return getHost(0).getVMCount();
-    } catch (IllegalArgumentException e) {
-      throw new IllegalStateException("DUnit VMs have not been launched");
-    }
-  }
