Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Implementation of SelectResults that allows duplicates . The keys store the
- * elements of the collection and the the values store the number of occurrences
- * as an int.
+ * Implementation of SelectResults that allows duplicates . The keys store the elements of the
+ * collection and the the values store the number of occurrences as an int.
-public abstract class Bag<E> extends AbstractCollection<E> implements
-    CqResults<E> {
+public abstract class Bag<E> extends AbstractCollection<E> implements CqResults<E> {
-   * This constructor should only be used by the DataSerializer. Creates a
-   * ResultsBag with no fields.
+   * This constructor should only be used by the DataSerializer. Creates a ResultsBag with no
+   * fields.
-  public Bag(boolean ignored) {
-  }
+  public Bag(boolean ignored) {}
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * Return an unmodifiable Set view of this bag. Does not require an iteration
-   * by using a lightweight wrapper.
+   * Return an unmodifiable Set view of this bag. Does not require an iteration by using a
+   * lightweight wrapper.
-   * Return an iterator over the elements in this collection. Duplicates will
-   * show up the number of times it has occurrences.
+   * Return an iterator over the elements in this collection. Duplicates will show up the number of
+   * times it has occurrences.
-    return this.size == otherBag.size
-        && this.elementType.equals(otherBag.elementType)
+    return this.size == otherBag.size && this.elementType.equals(otherBag.elementType)
-        && this.getMap().equals(otherBag.getMap())
-        && this.numNulls == otherBag.numNulls;
+        && this.getMap().equals(otherBag.getMap()) && this.numNulls == otherBag.numNulls;
-       * duplicates are numbered from 1 to n; 0 = no current, otherwise goes
-       * from 1 to dupLimit, indicating the last dup that was emitted by next()
+       * duplicates are numbered from 1 to n; 0 = no current, otherwise goes from 1 to dupLimit,
+       * indicating the last dup that was emitted by next()
-       * duplicates are numbered from 1 to n; 0 = no current, otherwise goes
-       * from 1 to dupLimit, indicating the last dup that was emitted by next()
+       * duplicates are numbered from 1 to n; 0 = no current, otherwise goes from 1 to dupLimit,
+       * indicating the last dup that was emitted by next()
-       * dupLimit is the total number of occurrences; start by emitting the
-       * nulls
+       * dupLimit is the total number of occurrences; start by emitting the nulls
-          return (this.currentEntry == null) ? null : Bag.this
-              .keyFromEntry(currentEntry);
+          return (this.currentEntry == null) ? null : Bag.this.keyFromEntry(currentEntry);
-              LocalizedStrings.ResultsBag_NEXT_MUST_BE_CALLED_BEFORE_REMOVE
-                  .toLocalizedString());
+              LocalizedStrings.ResultsBag_NEXT_MUST_BE_CALLED_BEFORE_REMOVE.toLocalizedString());
-   * package visibility so ResultsCollectionWrapper can reference it. This
-   * SetView is serialized as a special case by a ResultsCollectionWrapper.
-   * Keith: Refactored to add consideration for LIMIT, April 1, 2009
+   * package visibility so ResultsCollectionWrapper can reference it. This SetView is serialized as
+   * a special case by a ResultsCollectionWrapper. Keith: Refactored to add consideration for LIMIT,
+   * April 1, 2009
-          throw new IllegalStateException(
-              "next() must be called before remove()");
+          throw new IllegalStateException("next() must be called before remove()");
