Revert "Removing TCPConduit's Stub ID class"

This reverts commit 5b35e43f93bfbf6d62eadf7979eb3a8b7f59b77e.

This commit was causing compilation failures.

-import com.gemstone.gemfire.distributed.DistributedMember;
+import com.gemstone.gemfire.internal.SocketCloser;
+  /** remoteId identifies the remote conduit's listener.  It does NOT
+     identify the "port" that this connection's socket is attached
+     to, which is a different thing altogether */
+  Stub remoteId;
+
-              needToClose = !owner.getConduit().getMembershipManager().addSurpriseMember(this.remoteAddr);
+              needToClose = !owner.getConduit().getMembershipManager().addSurpriseMember(this.remoteAddr, this.remoteId);
-    // note: remoteAddr may be null if this is a receiver that hasn't finished its handshake
+    // note: remoteId may be null if this is a receiver that hasn't finished its handshake
-                                           final DistributedMember remoteAddr,
+                                           final Stub key,
+                                           final InternalDistributedMember remoteAddr,
-          if (!mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress()) {
-            throw new IOException("Member " + remoteAddr + " left the system");
+          InternalDistributedMember m = mgr.getMemberForStub(key, true);
+          if (m == null) {
+            throw new IOException("Member for stub " + key + " left the group");
-            throw new IOException("Cannot form connection to alert listener " + remoteAddr);
+            throw new IOException("Cannot form connection to alert listener " + key);
-          if (giveUpOnMember(mgr, remoteAddr)) {
-            throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));
+          InternalDistributedMember m = mgr.getMemberForStub(key, true);
+          if (m == null) {
+            throw new IOException(LocalizedStrings.Connection_MEMBER_FOR_STUB_0_LEFT_THE_GROUP.toLocalizedString(key));
-            logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_ATTEMPTING_RECONNECT_TO_PEER__0, remoteAddr));
+            logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_ATTEMPTING_RECONNECT_TO_PEER__0, m));
-          conn = new Connection(mgr, t, preserveOrder, remoteAddr, sharedResource);
+          conn = new Connection(mgr, t, preserveOrder, key, remoteAddr, sharedResource);
-          if (giveUpOnMember(mgr, remoteAddr)) {
+          InternalDistributedMember m = mgr.getMemberForStub(key, true);
+          if (m == null) {
-                new Object[] {sharedResource, preserveOrder, remoteAddr, ioe}));
+                new Object[] {sharedResource, preserveOrder, m, ioe}));
-              if (giveUpOnMember(mgr, remoteAddr)) {
-                throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));
+              InternalDistributedMember m = mgr.getMemberForStub(key, true);
+              if (m == null) {
+                throw new IOException(LocalizedStrings.Connection_MEMBER_FOR_STUB_0_LEFT_THE_GROUP.toLocalizedString(key));
-            if (giveUpOnMember(mgr, remoteAddr)) {
+            InternalDistributedMember m = mgr.getMemberForStub(key, true);
+            if (m == null) {
-                new Object[] {sharedResource, preserveOrder, remoteAddr ,e}));
+                new Object[] {sharedResource, preserveOrder, m,e}));
-            if (giveUpOnMember(mgr, remoteAddr)) {
+            InternalDistributedMember m = mgr.getMemberForStub(key, true);
+            if (m == null) {
-                new Object[] {sharedResource, preserveOrder, remoteAddr ,e}));
+                new Object[] {sharedResource, preserveOrder, m,e}));
-          .toLocalizedString(remoteAddr));
+          .toLocalizedString(mgr.getMemberForStub(key, true)));
-  
-  private static boolean giveUpOnMember(MembershipManager mgr, DistributedMember remoteAddr) {
-    return !mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress();
-  }
-  private void setRemoteAddr(DistributedMember m) {
+  private void setRemoteAddr(InternalDistributedMember m, Stub stub) {
+    this.remoteId = stub;
-    mgr.addSurpriseMember(m);
+    mgr.addSurpriseMember(m, stub);
-                     DistributedMember remoteID,
+                     Stub key,
+                     InternalDistributedMember remoteAddr,
-    InternalDistributedMember remoteAddr = (InternalDistributedMember)remoteID;
-    setRemoteAddr(remoteAddr);
+    setRemoteAddr(remoteAddr, key);
-    InetSocketAddress addr = new InetSocketAddress(remoteAddr.getInetAddress(), remoteAddr.getDirectChannelPort());
+    InetSocketAddress addr = new InetSocketAddress(remoteId.getInetAddress(), remoteId.getPort());
-        //  .createSocket(remoteAddr.getInetAddress(), remoteAddr.getPort());
+        //  .createSocket(remoteId.getInetAddress(), remoteId.getPort());
-        this.socket = SocketCreator.getDefaultInstance().connectForServer( remoteAddr.getInetAddress(), remoteAddr.getDirectChannelPort(), socketBufferSize );
+        this.socket = SocketCreator.getDefaultInstance().connectForServer( remoteId.getInetAddress(), remoteId.getPort(), socketBufferSize );
-        //socket = new Socket(remoteAddr.getInetAddress(), remoteAddr.getPort());
+        //socket = new Socket(remoteId.getInetAddress(), remoteId.getPort());
-        this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE ||
-        this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.LOCATOR_DM_TYPE) {
+        this.owner.owner.getLocalId().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE ||
+        this.owner.owner.getLocalId().getVmKind() == DistributionManager.LOCATOR_DM_TYPE) {
-                this.owner.removeEndpoint(this.remoteAddr, reason);
+                this.owner.removeEndpoint(this.remoteId, reason);
-            this.owner.removeSharedConnection(reason, this.remoteAddr, this.preserveOrder, this);
+            this.owner.removeSharedConnection(reason, this.remoteId, this.preserveOrder, this);
-          this.owner.removeThreadConnection(this.remoteAddr, this);
+          this.owner.removeThreadConnection(this.remoteId, this);
-          this.owner.removeSharedConnection(reason, this.remoteAddr, this.preserveOrder, this);
+          this.owner.removeSharedConnection(reason, this.remoteId, this.preserveOrder, this);
-          this.owner.removeThreadConnection(this.remoteAddr, this);
+          this.owner.removeThreadConnection(this.remoteId, this);
-        logger.debug("Stopping {} for {}", p2pReaderName(), remoteAddr);
+        logger.debug("Stopping {} for {}", p2pReaderName(), remoteId);
-              setRemoteAddr(remote);
+              Stub stub = new Stub(remote.getInetAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
+              setRemoteAddr(remote, stub);
-                logger.debug("{} remoteAddr is {} {}", p2pReaderName(), this.remoteAddr,
+                logger.debug("{} remoteId is {} {}", p2pReaderName(), this.remoteId,
-      throw new ConnectionException(LocalizedStrings.Connection_NOT_CONNECTED_TO_0.toLocalizedString(this.remoteAddr));
+      throw new ConnectionException(LocalizedStrings.Connection_NOT_CONNECTED_TO_0.toLocalizedString(this.remoteId));
-          throw new ConnectionException(LocalizedStrings.Connection_FORCED_DISCONNECT_SENT_TO_0.toLocalizedString(this.remoteAddr));
+          throw new ConnectionException(LocalizedStrings.Connection_FORCED_DISCONNECT_SENT_TO_0.toLocalizedString(this.remoteId));
-      this.owner.removeEndpoint(this.remoteAddr, LocalizedStrings.Connection_NO_DISTRIBUTION_MANAGER.toLocalizedString());
+      this.owner.removeEndpoint(this.remoteId, LocalizedStrings.Connection_NO_DISTRIBUTION_MANAGER.toLocalizedString());
-    this.owner.removeEndpoint(this.remoteAddr, 
+    this.owner.removeEndpoint(this.remoteId, 
-        logger.debug("runNioPusher terminated id={} from {}/{}", conduitIdStr, remoteAddr, remoteAddr);
+        logger.debug("runNioPusher terminated id={} from {}/{}", conduitIdStr, remoteId, remoteAddr);
-                setRemoteAddr(remote);
+                Stub stub = new Stub(remote.getInetAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
+                setRemoteAddr(remote, stub);
-                logger.debug("P2P handshake remoteAddr is {}{}", this.remoteAddr,
+                logger.debug("P2P handshake remoteId is {}{}", this.remoteId,
+  /** returns the ConnectionKey stub representing the other side of
+      this connection (host:port) */
+  public final Stub getRemoteId() {
+    return remoteId;
+  }
+
