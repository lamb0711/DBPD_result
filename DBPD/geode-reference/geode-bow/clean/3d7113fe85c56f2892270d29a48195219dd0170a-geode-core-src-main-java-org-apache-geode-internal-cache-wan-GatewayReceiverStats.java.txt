GEODE-6763: Send GatewayReceiver events received to Micrometer (#3573)

Updated GatewayReceiverStats to add a
cache.gatewayreceiver.events.received meter to the registry.

The meter is a FunctionCounter that retrieves its value from the
"eventsReceived" stat.

Co-Authored-By: Aaron Lindsey <alindsey@pivotal.io>
Co-Authored-By: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
+import io.micrometer.core.instrument.FunctionCounter;
+import io.micrometer.core.instrument.MeterRegistry;
+
-  /** Name of the events not queued because conflated statistic */
+  /**
+   * Name of the events not queued because conflated statistic
+   */
-  /** Name of the event queue time statistic */
+  /**
+   * Name of the event queue time statistic
+   */
-  /** Name of the event queue size statistic */
+  /**
+   * Name of the event queue size statistic
+   */
-  /** Name of the events distributed statistic */
+  /**
+   * Name of the events distributed statistic
+   */
-  /** Name of the events exceeding alert threshold statistic */
+  /**
+   * Name of the events exceeding alert threshold statistic
+   */
-  /** Name of the batch distribution time statistic */
+  /**
+   * Name of the batch distribution time statistic
+   */
-  /** Name of the batches distributed statistic */
+  /**
+   * Name of the batches distributed statistic
+   */
-  /** Name of the batches redistributed statistic */
+  /**
+   * Name of the batches redistributed statistic
+   */
-  /** Name of the unprocessed events added by primary statistic */
+  /**
+   * Name of the unprocessed events added by primary statistic
+   */
-  /** Name of the events retried */
+  /**
+   * Name of the events retried
+   */
+  private final MeterRegistry meterRegistry;
-  /** Id of the events not queued because conflated statistic */
+  /**
+   * Id of the events not queued because conflated statistic
+   */
-  /** Id of the event queue time statistic */
+  /**
+   * Id of the event queue time statistic
+   */
-  /** Id of the event queue size statistic */
+  /**
+   * Id of the event queue size statistic
+   */
-  /** Id of the events distributed statistic */
+  /**
+   * Id of the events distributed statistic
+   */
+  private final FunctionCounter eventsReceivedCounter;
+  private static final String EVENTS_RECEIVED_COUNTER_NAME =
+      "cache.gatewayreceiver.events.received";
+  private static final String EVENTS_RECEIVED_COUNTER_DESCRIPTION =
+      "total number events across the batched received by this GatewayReceiver";
+  private static final String EVENTS_RECEIVED_COUNTER_UNITS = "operations";
-  /** Id of the events exceeding alert threshold statistic */
+  /**
+   * Id of the events exceeding alert threshold statistic
+   */
-  /** Id of the batch distribution time statistic */
+  /**
+   * Id of the batch distribution time statistic
+   */
-  /** Id of the batches distributed statistic */
+  /**
+   * Id of the batches distributed statistic
+   */
-  /** Id of the batches redistributed statistic */
+  /**
+   * Id of the batches redistributed statistic
+   */
-  /** Id of the unprocessed events added by primary statistic */
+  /**
+   * Id of the unprocessed events added by primary statistic
+   */
-  /** Id of the events retried statistic */
+  /**
+   * Id of the events retried statistic
+   */
-      String ownerName) {
+      String ownerName, MeterRegistry meterRegistry) {
-            "total number events across the batched received by this GatewayReceiver",
-            "operations"),
+            EVENTS_RECEIVED_COUNTER_DESCRIPTION,
+            EVENTS_RECEIVED_COUNTER_UNITS),
-    return new GatewayReceiverStats(f, ownerName, typeName, descriptors);
+    return new GatewayReceiverStats(f, ownerName, typeName, descriptors, meterRegistry);
-      StatisticDescriptor[] descriptiors) {
+      StatisticDescriptor[] descriptiors, MeterRegistry meterRegistry) {
+
+    this.meterRegistry = meterRegistry;
+    eventsReceivedCounter = FunctionCounter.builder(EVENTS_RECEIVED_COUNTER_NAME, stats,
+        s -> s.getInt(eventsReceivedId))
+        .description(EVENTS_RECEIVED_COUNTER_DESCRIPTION)
+        .baseUnit(EVENTS_RECEIVED_COUNTER_UNITS)
+        .register(meterRegistry);
+  @Override
+  public void close() {
+    meterRegistry.remove(eventsReceivedCounter);
+    super.close();
+  }
