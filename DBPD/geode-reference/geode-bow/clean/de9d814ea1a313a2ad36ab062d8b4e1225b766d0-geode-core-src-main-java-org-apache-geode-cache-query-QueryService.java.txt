GEODE-4429: Remove unnecessary modifiers from interfaces in geode-core:cache

* This excludes those interfaces in geode-core:internal.cache, as covered in GEODE-4430
-  public static final Object UNDEFINED = new Undefined();
+  Object UNDEFINED = new Undefined();
-  public Query newQuery(String queryString);
+  Query newQuery(String queryString);
-  public Index createHashIndex(String indexName, String indexedExpression, String regionPath)
+  Index createHashIndex(String indexName, String indexedExpression, String regionPath)
-  public void defineKeyIndex(String indexName, String indexedExpression, String regionPath)
+  void defineKeyIndex(String indexName, String indexedExpression, String regionPath)
-  public void defineHashIndex(String indexName, String indexedExpression, String regionPath)
+  void defineHashIndex(String indexName, String indexedExpression, String regionPath)
-  public void defineHashIndex(String indexName, String indexedExpression, String regionPath,
+  void defineHashIndex(String indexName, String indexedExpression, String regionPath,
-  public void defineIndex(String indexName, String indexedExpression, String regionPath)
+  void defineIndex(String indexName, String indexedExpression, String regionPath)
-  public void defineIndex(String indexName, String indexedExpression, String regionPath,
-      String imports) throws RegionNotFoundException;
+  void defineIndex(String indexName, String indexedExpression, String regionPath, String imports)
+      throws RegionNotFoundException;
-  public Index createHashIndex(String indexName, String indexedExpression, String regionPath,
+  Index createHashIndex(String indexName, String indexedExpression, String regionPath,
-  public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+  Index createIndex(String indexName, IndexType indexType, String indexedExpression,
-  public Index createIndex(String indexName, IndexType indexType, String indexedExpression,
+  Index createIndex(String indexName, IndexType indexType, String indexedExpression,
-  public Index createIndex(String indexName, String indexedExpression, String regionPath)
+  Index createIndex(String indexName, String indexedExpression, String regionPath)
-  public Index createIndex(String indexName, String indexedExpression, String regionPath,
-      String imports) throws IndexInvalidException, IndexNameConflictException,
-      IndexExistsException, RegionNotFoundException, UnsupportedOperationException;
+  Index createIndex(String indexName, String indexedExpression, String regionPath, String imports)
+      throws IndexInvalidException, IndexNameConflictException, IndexExistsException,
+      RegionNotFoundException, UnsupportedOperationException;
-  public Index createKeyIndex(String indexName, String indexedExpression, String regionPath)
+  Index createKeyIndex(String indexName, String indexedExpression, String regionPath)
-  public List<Index> createDefinedIndexes() throws MultiIndexCreationException;
+  List<Index> createDefinedIndexes() throws MultiIndexCreationException;
-  public boolean clearDefinedIndexes();
+  boolean clearDefinedIndexes();
-  public Index getIndex(Region<?, ?> region, String indexName);
+  Index getIndex(Region<?, ?> region, String indexName);
-  public Collection<Index> getIndexes();
+  Collection<Index> getIndexes();
-  public Collection<Index> getIndexes(Region<?, ?> region);
+  Collection<Index> getIndexes(Region<?, ?> region);
-  public Collection<Index> getIndexes(Region<?, ?> region, IndexType indexType);
+  Collection<Index> getIndexes(Region<?, ?> region, IndexType indexType);
-  public void removeIndex(Index index);
+  void removeIndex(Index index);
-  public void removeIndexes();
+  void removeIndexes();
-  public void removeIndexes(Region<?, ?> region);
+  void removeIndexes(Region<?, ?> region);
-  public CqQuery newCq(String queryString, CqAttributes cqAttr)
-      throws QueryInvalidException, CqException;
+  CqQuery newCq(String queryString, CqAttributes cqAttr) throws QueryInvalidException, CqException;
-  public CqQuery newCq(String queryString, CqAttributes cqAttr, boolean isDurable)
+  CqQuery newCq(String queryString, CqAttributes cqAttr, boolean isDurable)
-  public CqQuery newCq(String name, String queryString, CqAttributes cqAttr)
+  CqQuery newCq(String name, String queryString, CqAttributes cqAttr)
-  public CqQuery newCq(String name, String queryString, CqAttributes cqAttr, boolean isDurable)
+  CqQuery newCq(String name, String queryString, CqAttributes cqAttr, boolean isDurable)
-  public void closeCqs();
+  void closeCqs();
-  public CqQuery[] getCqs();
+  CqQuery[] getCqs();
-  public CqQuery[] getCqs(String regionName) throws CqException;
+  CqQuery[] getCqs(String regionName) throws CqException;
-  public CqQuery getCq(String cqName);
+  CqQuery getCq(String cqName);
-  public void executeCqs() throws CqException;
+  void executeCqs() throws CqException;
-  public void stopCqs() throws CqException;
+  void stopCqs() throws CqException;
-  public void executeCqs(String regionName) throws CqException;
+  void executeCqs(String regionName) throws CqException;
-  public void stopCqs(String regionName) throws CqException;
+  void stopCqs(String regionName) throws CqException;
-  public List<String> getAllDurableCqsFromServer() throws CqException;
+  List<String> getAllDurableCqsFromServer() throws CqException;
-  public CqServiceStatistics getCqStatistics();
+  CqServiceStatistics getCqStatistics();
