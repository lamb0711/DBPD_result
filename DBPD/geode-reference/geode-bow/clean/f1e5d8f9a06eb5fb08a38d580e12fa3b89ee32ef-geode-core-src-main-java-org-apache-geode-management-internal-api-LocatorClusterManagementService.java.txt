GEODE-7579: introduce RegionAware (#4546)

* GEODE-7579: Make Index configuration RegionAware

* Index configuration is ReqionAware, but not groupable
* index's group depends on what region it's defined with
* display member status in the exception
+import java.util.HashSet;
+import org.apache.geode.management.configuration.RegionScoped;
-    validators.put(Index.class, new IndexValidator(persistenceService));
+    validators.put(Index.class, new IndexValidator());
-    String group = config.getGroup();
-    final String groupName =
-        AbstractConfiguration.isCluster(group) ? AbstractConfiguration.CLUSTER : group;
-      // check if this config already exists on all/some members of this group
+      // check if this config already exists
-      // execute function on all members
-    Set<DistributedMember> targetedMembers = memberValidator.findServers(group);
+    // find the targeted members
+    Set<String> groups = new HashSet<>();
+    Set<DistributedMember> targetedMembers;
+    if (config instanceof RegionScoped) {
+      String regionName = ((RegionScoped) config).getRegionName();
+      groups = memberValidator.findGroups(regionName);
+      if (groups.isEmpty()) {
+        raise(StatusCode.ENTITY_NOT_FOUND, "Region provided does not exist: " + regionName);
+      }
+      targetedMembers = memberValidator.findServers(groups.toArray(new String[0]));
+    } else {
+      final String groupName =
+          AbstractConfiguration.isCluster(config.getGroup()) ? AbstractConfiguration.CLUSTER
+              : config.getGroup();
+      groups.add(groupName);
+      targetedMembers = memberValidator.findServers(groupName);
+    }
+
+
+    // execute function on all targeted members
-
-    configurationManager.add(config, groupName);
+    for (String groupName : groups) {
+      configurationManager.add(config, groupName);
+    }
-        "Successfully updated configuration for " + groupName + ".");
+        "Successfully updated configuration for " + String.join(", ", groups) + ".");
-        resultList.addAll(list);
+        list.stream().filter(t -> !resultList.contains(t))
+            .forEach(resultList::add);
-        members = memberValidator.findServers(element.getGroup());
+        members = memberValidator.findServers(element);
