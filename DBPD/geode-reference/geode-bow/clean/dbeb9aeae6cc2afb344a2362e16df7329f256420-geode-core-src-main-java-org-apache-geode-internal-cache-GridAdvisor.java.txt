Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  private volatile List/*<BridgeServerProfile>*/ cachedBridgeServerProfiles;
-  private volatile List/*<ControllerProfile>*/ cachedControllerProfiles;
-  private volatile Set/*<DistributedMember>*/ cachedBridgeServerAdvise;
-  private volatile Set/*<DistributedMember>*/ cachedControllerAdvise;
+  private volatile List/* <BridgeServerProfile> */ cachedBridgeServerProfiles;
+  private volatile List/* <ControllerProfile> */ cachedControllerProfiles;
+  private volatile Set/* <DistributedMember> */ cachedBridgeServerAdvise;
+  private volatile Set/* <DistributedMember> */ cachedControllerAdvise;
-      public boolean include(Profile profile) {
-        return profile instanceof ControllerAdvisor.ControllerProfile;
-      }
-    };
+    public boolean include(Profile profile) {
+      return profile instanceof ControllerAdvisor.ControllerProfile;
+    }
+  };
-      public boolean include(Profile profile) {
-        return profile instanceof CacheServerAdvisor.CacheServerProfile;
-      }
-    };
-  
+    public boolean include(Profile profile) {
+      return profile instanceof CacheServerAdvisor.CacheServerProfile;
+    }
+  };
+
-   * Return an unmodifiable Set<DistributedMember> of the cnx controllers
-   * in this system.
+   * Return an unmodifiable Set<DistributedMember> of the cnx controllers in this system.
-    Set/*<DistributedMember>*/ result = this.cachedControllerAdvise;
+    Set/* <DistributedMember> */ result = this.cachedControllerAdvise;
-   * Return an unmodifiable Set<DistributedMember> of the bridge servers
-   * in this system.
+   * Return an unmodifiable Set<DistributedMember> of the bridge servers in this system.
-    Set/*<DistributedMember>*/ result = this.cachedBridgeServerAdvise;
+    Set/* <DistributedMember> */ result = this.cachedBridgeServerAdvise;
-   * Returns an unmodifiable <code>List</code> of the
-   * <code>BridgeServerProfile</code>s for all known bridge servers.
+   * Returns an unmodifiable <code>List</code> of the <code>BridgeServerProfile</code>s for all
+   * known bridge servers.
-  public List/*<BridgeServerProfile>*/ fetchBridgeServers() {
-    List/*<BridgeServerProfile>*/ result = null; //this.cachedBridgeServerProfiles;
+  public List/* <BridgeServerProfile> */ fetchBridgeServers() {
+    List/* <BridgeServerProfile> */ result = null; // this.cachedBridgeServerProfiles;
-//        result = this.cachedBridgeServerProfiles;
+        // result = this.cachedBridgeServerProfiles;
+
-   * Returns an unmodifiable <code>List</code> of the
-   * <code>ControllerProfile</code>s for all known cnx controllers.
+   * Returns an unmodifiable <code>List</code> of the <code>ControllerProfile</code>s for all known
+   * cnx controllers.
-  public List/*<ControllerProfile>*/ fetchControllers() {
-    List/*<ControllerProfile>*/ result = this.cachedControllerProfiles;
+  public List/* <ControllerProfile> */ fetchControllers() {
+    List/* <ControllerProfile> */ result = this.cachedControllerProfiles;
-    List/*<BridgeServerProfile>*/ l = this.cachedBridgeServerProfiles;
+    List/* <BridgeServerProfile> */ l = this.cachedBridgeServerProfiles;
-    List/*<ControllerProfile>*/ l = this.cachedControllerProfiles;
+    List/* <ControllerProfile> */ l = this.cachedControllerProfiles;
-   * Just always return true.
-   * This method could use getAllOtherMembers but it would cause
-   * us to make lots of copies of the member set.
-   * The problem with our super.isCurrentMember is it ignores admin members.
+   * Just always return true. This method could use getAllOtherMembers but it would cause us to make
+   * lots of copies of the member set. The problem with our super.isCurrentMember is it ignores
+   * admin members.
+
+
+
-   * Used to drop any cached profile views we have since the master list
-   * of profiles changed. The next time someone asks for a view it will
-   * be recomputed.
+   * Used to drop any cached profile views we have since the master list of profiles changed. The
+   * next time someone asks for a view it will be recomputed.
-    if(initializationGate()) {
-      //Exchange with any local servers or controllers.
+    if (initializationGate()) {
+      // Exchange with any local servers or controllers.
-      for(Profile otherProfile : otherProfiles) {
-        if(!otherProfile.equals(profile)) {
+      for (Profile otherProfile : otherProfiles) {
+        if (!otherProfile.equals(profile)) {
-  
+
-      new UpdateAttributesProcessor(getAdvisee(),
-                                    true/*removeProfile*/).distribute();
-      
-      //Notify any local bridge servers or controllers
-      //that we are closing.
+      new UpdateAttributesProcessor(getAdvisee(), true/* removeProfile */).distribute();
+
+      // Notify any local bridge servers or controllers
+      // that we are closing.
-  
-  
-  
+
+
+
-    //Our set of profiles includes local members. However, the update
-    //attributes message doesn't seem to be able to handle being sent to local
-    //members
+    // Our set of profiles includes local members. However, the update
+    // attributes message doesn't seem to be able to handle being sent to local
+    // members
-     * a negative port value is used when creating a fake profile meant
-     * to only gather information about all available locators.
+     * a negative port value is used when creating a fake profile meant to only gather information
+     * about all available locators.
-    public GridProfile() {
-    }
+    public GridProfile() {}
-      if (this.id == null) throw new IllegalStateException("profile id not yet initialized");
+      if (this.id == null)
+        throw new IllegalStateException("profile id not yet initialized");
-     * Tell local controllers about the received profile. Also if exchange
-     * profiles then add each local controller to reply.
+     * Tell local controllers about the received profile. Also if exchange profiles then add each
+     * local controller to reply.
-    protected final void tellLocalControllers(boolean removeProfile,
-        boolean exchangeProfiles, final List<Profile> replyProfiles) {
+    protected final void tellLocalControllers(boolean removeProfile, boolean exchangeProfiles,
+        final List<Profile> replyProfiles) {
-        InternalLocator l = (InternalLocator)locators.get(i);
+        InternalLocator l = (InternalLocator) locators.get(i);
-        if(advisee != null && advisee.getProfile().equals(this)) {
+        if (advisee != null && advisee.getProfile().equals(this)) {
-          handleDistributionAdvisee(advisee, removeProfile, exchangeProfiles,
-              replyProfiles);
-        }
-        else if (exchangeProfiles && advisee != null) {
+          handleDistributionAdvisee(advisee, removeProfile, exchangeProfiles, replyProfiles);
+        } else if (exchangeProfiles && advisee != null) {
-     * Tell local bridge servers about the received profile. Also if exchange
-     * profiles then add each local bridge server to reply.
+     * Tell local bridge servers about the received profile. Also if exchange profiles then add each
+     * local bridge server to reply.
-    protected final void tellLocalBridgeServers(boolean removeProfile,
-        boolean exchangeProfiles, final List<Profile> replyProfiles) {
+    protected final void tellLocalBridgeServers(boolean removeProfile, boolean exchangeProfiles,
+        final List<Profile> replyProfiles) {
-          CacheServerImpl bsi = (CacheServerImpl)bridgeServers.get(i);
+          CacheServerImpl bsi = (CacheServerImpl) bridgeServers.get(i);
-            if(bsi.getProfile().equals(this)) {
+            if (bsi.getProfile().equals(this)) {
-              handleDistributionAdvisee(bsi, removeProfile, exchangeProfiles,
-                  replyProfiles);
-            }
-            else if (exchangeProfiles) {
+              handleDistributionAdvisee(bsi, removeProfile, exchangeProfiles, replyProfiles);
+            } else if (exchangeProfiles) {
-    
+
-      return "GridProfile[host=" + this.gp.getHost() + ",port=" + gp.getPort()
-          + ']';
+      return "GridProfile[host=" + this.gp.getHost() + ",port=" + gp.getPort() + ']';
-        final GridProfileId other = (GridProfileId)obj;
+        final GridProfileId other = (GridProfileId) obj;
-          }
-          else {
+          } else {
