Merge remote-tracking branch 'upstream/develop' into develop

+import java.util.HashSet;
+import java.util.Set;
-import org.apache.geode.internal.Banner;
+import org.apache.geode.internal.logging.LogConfigListener;
+import org.apache.geode.internal.logging.LogConfigSupplier;
+import org.apache.geode.internal.logging.LoggingSession;
-import org.apache.geode.internal.logging.log4j.AlertAppender;
-import org.apache.geode.internal.logging.log4j.LogWriterAppender;
-import org.apache.geode.internal.logging.log4j.LogWriterAppenders;
+import org.apache.geode.internal.statistics.StatisticsConfig;
-    org.apache.geode.admin.jmx.internal.ManagedResource {
+    org.apache.geode.admin.jmx.internal.ManagedResource, LogConfigSupplier {
-  private LogWriterAppender logWriterAppender;
+  private final LoggingSession loggingSession;
+  private final Set<LogConfigListener> logConfigListeners = new HashSet<>();
+
+    loggingSession = LoggingSession.create();
+
+  @Override
+  @Override
+  @Override
+  @Override
-      AlertAppender.getInstance().shuttingDown();
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
+      loggingSession.stopSession();
+      loggingSession.shutdown();
-      AlertAppender.getInstance().shuttingDown();
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
+      loggingSession.stopSession();
+      loggingSession.shutdown();
-      AlertAppender.getInstance().shuttingDown();
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
+      loggingSession.stopSession();
+      loggingSession.shutdown();
-    LogWriterAppenders.startupComplete(LogWriterAppenders.Identifier.MAIN);
+  @Override
-      AlertAppender.getInstance().shuttingDown();
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
+
+      loggingSession.stopSession();
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
+      loggingSession.shutdown();
+  @Override
+  @Override
+  @Override
-    String childTail = tailFile(this.logWriterAppender.getChildLogFile());
+    File childLogFile = loggingSession.getLogFile().isPresent()
+        ? loggingSession.getLogFile().get().getChildLogFile() : null;
+    String childTail = tailFile(childLogFile);
+  @Override
-    LogWriterAppenders.configChanged(LogWriterAppenders.Identifier.MAIN);
+    logConfigChanged();
-    LogWriterAppenders.configChanged(LogWriterAppenders.Identifier.MAIN);
+    logConfigChanged();
-    LogWriterAppenders.configChanged(LogWriterAppenders.Identifier.MAIN);
+    logConfigChanged();
-    LogWriterAppenders.configChanged(LogWriterAppenders.Identifier.MAIN);
+    logConfigChanged();
+  @Override
+  @Override
+    loggingSession.createSession(this);
+
-    this.logWriterAppender = LogWriterAppenders
-        .getOrCreateAppender(LogWriterAppenders.Identifier.MAIN, false, logConfig, false);
+    loggingSession.startSession();
-      this.logWriter = LogWriterFactory.createLogWriterLogger(false, false, logConfig, false);
-      // LOG: changed statement from config to info
-      this.logWriter.info(Banner.getString(null));
+      this.logWriter = LogWriterFactory.createLogWriterLogger(logConfig, false);
-    this.logWriter = LogWriterFactory.createLogWriterLogger(false, false, logConfig, false);
+    this.logWriter = LogWriterFactory.createLogWriterLogger(logConfig, false);
-    // Print Banner information
-    logger.info(Banner.getString(this.agentConfig.getOriginalArgs()));
-
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  public LogConfig getLogConfig() {
+    return agentConfig.createLogConfig();
+  }
+
+  @Override
+  public StatisticsConfig getStatisticsConfig() {
+    return agentConfig.createStatisticsConfig();
+  }
+
+  @Override
+  public void addLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.add(logConfigListener);
+  }
+
+  @Override
+  public void removeLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.remove(logConfigListener);
+  }
+
+  void logConfigChanged() {
+    for (LogConfigListener listener : logConfigListeners) {
+      listener.configChanged();
+    }
+  }
+
+  @Override
+  @Override
