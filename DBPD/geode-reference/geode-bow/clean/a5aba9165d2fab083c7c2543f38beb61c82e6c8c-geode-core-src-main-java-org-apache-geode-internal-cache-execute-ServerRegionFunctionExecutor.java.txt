Revert "GEODE-6588: Properly type Function execution related interfaces. (#3691)"

This reverts commit 6c62540edd5637d5e2bd3a51b11279a2ba825c33.

-import java.util.List;
-public class ServerRegionFunctionExecutor<ArgumentT, ReturnT, AggregatorT>
-    extends AbstractExecution<ArgumentT, ReturnT, AggregatorT> {
+public class ServerRegionFunctionExecutor extends AbstractExecution {
-  public Execution<ArgumentT, ReturnT, AggregatorT> withFilter(Set fltr) {
+  public Execution withFilter(Set fltr) {
-    return new ServerRegionFunctionExecutor<>(this, fltr);
+    return new ServerRegionFunctionExecutor(this, fltr);
-  public InternalExecution<ArgumentT, ReturnT, AggregatorT> withBucketFilter(
-      Set<Integer> bucketIDs) {
+  public InternalExecution withBucketFilter(Set<Integer> bucketIDs) {
-    return new ServerRegionFunctionExecutor<>(this, bucketIDs, true /* execute on bucketset */);
+    return new ServerRegionFunctionExecutor(this, bucketIDs, true /* execute on bucketset */);
-  protected ResultCollector<ReturnT, AggregatorT> executeFunction(final Function function) {
+  protected ResultCollector executeFunction(final Function function) {
-          ResultCollector<Object, List<Object>> defaultCollector = new DefaultResultCollector();
+          ResultCollector defaultCollector = new DefaultResultCollector();
-  protected ResultCollector<ReturnT, AggregatorT> executeFunction(final String functionId,
-      boolean resultReq,
+  protected ResultCollector executeFunction(final String functionId, boolean resultReq,
-          ResultCollector<Object, List<Object>> defaultCollector = new DefaultResultCollector();
+          ResultCollector defaultCollector = new DefaultResultCollector();
-  private ResultCollector<ReturnT, AggregatorT> executeOnServer(Function function,
-      ResultCollector collector,
+  private ResultCollector executeOnServer(Function function, ResultCollector collector,
-      String message = srp + ": "
-          + "No available connection was found. Server Region Proxy is not available for this region "
-          + region.getName();
-      throw new FunctionException(message);
+      StringBuilder message = new StringBuilder();
+      message.append(srp).append(": ");
+      message
+          .append(
+              "No available connection was found. Server Region Proxy is not available for this region ")
+          .append(region.getName());
+      throw new FunctionException(message.toString());
-    return "[ ServerRegionExecutor:" + "args=" + this.args
-        + " ;filter=" + this.filter + " ;region=" + this.region.getName()
-        + "]";
+    return new StringBuffer().append("[ ServerRegionExecutor:").append("args=").append(this.args)
+        .append(" ;filter=").append(this.filter).append(" ;region=").append(this.region.getName())
+        .append("]").toString();
-  public Execution<ArgumentT, ReturnT, AggregatorT> setArguments(Object args) {
+  public Execution setArguments(Object args) {
-    return new ServerRegionFunctionExecutor<>(this, args);
+    return new ServerRegionFunctionExecutor(this, args);
-  public Execution<ArgumentT, ReturnT, AggregatorT> withArgs(Object args) {
+  public Execution withArgs(Object args) {
-  public Execution<ArgumentT, ReturnT, AggregatorT> withCollector(ResultCollector rs) {
+  public Execution withCollector(ResultCollector rs) {
-    return new ServerRegionFunctionExecutor<>(this, rs);
+    return new ServerRegionFunctionExecutor(this, rs);
-  public InternalExecution<ArgumentT, ReturnT, AggregatorT> withMemberMappedArgument(
-      MemberMappedArgument argument) {
+  public InternalExecution withMemberMappedArgument(MemberMappedArgument argument) {
-    return new ServerRegionFunctionExecutor<>(this, argument);
+    return new ServerRegionFunctionExecutor(this, argument);
-  public ResultCollector<ReturnT, AggregatorT> execute(final String functionName) {
+  public ResultCollector execute(final String functionName) {
