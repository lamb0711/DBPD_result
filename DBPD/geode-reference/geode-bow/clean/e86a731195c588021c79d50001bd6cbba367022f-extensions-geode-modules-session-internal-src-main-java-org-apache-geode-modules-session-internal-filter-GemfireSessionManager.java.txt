Merge branch 'release/1.3.0'

-import org.apache.geode.modules.session.internal.filter.attributes.ImmediateSessionAttributes;
+import javax.servlet.ServletContext;
-   * Map of wrapping GemFire session id to native session id
-   */
-  private Map<String, String> nativeSessionMap = new HashMap<String, String>();
-
-  /**
-  public HttpSession wrapSession(HttpSession nativeSession) {
+  public HttpSession wrapSession(ServletContext context, int maxInactiveInterval) {
-    GemfireHttpSession session = new GemfireHttpSession(id, nativeSession);
+    GemfireHttpSession session = new GemfireHttpSession(id, context);
+    Object sessionPolicy = properties.get(CacheProperty.SESSION_DELTA_POLICY);
-    if ("delta_queued".equals(properties.get(CacheProperty.SESSION_DELTA_POLICY))) {
+    if ("delta_queued".equals(sessionPolicy) || "queued".equals(sessionPolicy)) {
-    } else if ("delta_immediate".equals(properties.get(CacheProperty.SESSION_DELTA_POLICY))) {
+    } else if ("delta_immediate".equals(sessionPolicy) || "immediate".equals(sessionPolicy)) {
-    } else if ("immediate".equals(properties.get(CacheProperty.SESSION_DELTA_POLICY))) {
-      attributes = new ImmediateSessionAttributes();
+    attributes.setMaxInactiveInterval(maxInactiveInterval);
+    attributes.setCreationTime(System.currentTimeMillis());
-  public HttpSession getWrappingSession(String nativeId) {
-    HttpSession session = null;
-    String gemfireId = getGemfireSessionIdFromNativeId(nativeId);
-
-    if (gemfireId != null) {
-      session = getSession(gemfireId);
-    }
-    return session;
-  }
-
-  /**
-   * {@inheritDoc}
-   */
-      } else {
-        GemfireHttpSession session = (GemfireHttpSession) sessionCache.getOperatingRegion().get(id);
-        if (session != null) {
-          session.setNativeSession(null);
-        }
-
-    synchronized (nativeSessionMap) {
-      String nativeId = nativeSessionMap.remove(id);
-      LOG.debug("destroySession called for {} wrapping {}", id, nativeId);
-    }
-    nativeSessionMap.put(session.getId(),
-        ((GemfireHttpSession) session).getNativeSession().getId());
-  }
-
-  @Override
-  public String destroyNativeSession(String nativeId) {
-    String gemfireSessionId = getGemfireSessionIdFromNativeId(nativeId);
-    if (gemfireSessionId != null) {
-      destroySession(gemfireSessionId);
-    }
-    return gemfireSessionId;
-  /**
-   * This method is called when a native session gets destroyed. It will check if the GemFire
-   * session is actually still valid/not expired and will then attach a new, native session.
-   *
-   * @param nativeId the id of the native session
-   * @return the id of the newly attached native session or null if the GemFire session was already
-   *         invalid
-   */
-  public String refreshSession(String nativeId) {
-    String gemfireId = getGemfireSessionIdFromNativeId(nativeId);
-    if (gemfireId == null) {
-      return null;
-    }
-
-    GemfireHttpSession session =
-        (GemfireHttpSession) sessionCache.getOperatingRegion().get(gemfireId);
-    if (session.isValid()) {
-
-    }
-
-    return null;
-  }
-
-  private String getGemfireSessionIdFromNativeId(String nativeId) {
-    if (nativeId == null) {
-      return null;
-    }
-
-    for (Map.Entry<String, String> e : nativeSessionMap.entrySet()) {
-      if (nativeId.equals(e.getValue())) {
-        return e.getKey();
-      }
-    }
-    return null;
-  }
-
