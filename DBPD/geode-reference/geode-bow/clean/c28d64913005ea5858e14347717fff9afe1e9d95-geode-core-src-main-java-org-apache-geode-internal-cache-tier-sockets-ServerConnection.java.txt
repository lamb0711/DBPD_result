Merge branch 'release/1.4.0'

-import static org.apache.geode.distributed.ConfigurationProperties.*;
+import static org.apache.geode.distributed.ConfigurationProperties.SECURITY_CLIENT_AUTHENTICATOR;
-  final protected CacheServerStats stats;
+  protected final CacheServerStats stats;
-  /** Tracks the id of the most recent batch to which a reply has been sent */
+  /**
+   * Tracks the id of the most recent batch to which a reply has been sent
+   */
-   * 
+   *
-   * 
-   * 
+   *
+   *
-  static private final ThreadLocal<Byte> executeFunctionOnLocalNodeOnly = new ThreadLocal<Byte>() {
+  private static final ThreadLocal<Byte> executeFunctionOnLocalNodeOnly = new ThreadLocal<Byte>() {
-  static public void executeFunctionOnLocalNodeOnly(Byte value) {
+  public static void executeFunctionOnLocalNodeOnly(Byte value) {
-  static public Byte isExecuteFunctionOnLocalNodeOnly() {
+  public static Byte isExecuteFunctionOnLocalNodeOnly() {
-      if (!getCommunicationMode().isWAN())
+      if (!getCommunicationMode().isWAN()) {
+      }
+          String messageType = MessageType.getString(this.requestMsg.getMessageType());
+            logger.debug("Bound {} with uniqueId {} for message {} with {}", subject.getPrincipal(),
+                uniqueId, messageType, this.getName());
+          } else if (uniqueId == 0) {
+            logger.debug("No unique ID yet. {}, {}", messageType, this.getName());
+          } else {
+            logger.error("Failed to bind the subject of uniqueId {} for message {} with {}",
+                uniqueId, messageType, this.getName());
+            throw new AuthenticationRequiredException("Failed to find the authenticated user.");
+      {
+      }
-    if (retCua == null)
+    if (retCua == null) {
+    }
-        if (!removed)
+        if (!removed) {
+        }
-         * 
+         *
-
-        logger.info(this.clientUserAuths);
+
-      } catch (java.nio.channels.ClosedChannelException ignore) {
-        // ok shutting down
-      } catch (CancelException e) {
+      } catch (java.nio.channels.ClosedChannelException | CancelException ignore) {
+
-    /* this.sKey = */getSelectableChannel().register(s, SelectionKey.OP_READ, this);
+    getSelectableChannel().register(s, SelectionKey.OP_READ, this);
-   *
+  /**
+   * Returns the client's read-timeout setting. This is used in the client health monitor to timeout
+   * connections that have taken too long & the client will have already given up waiting for a
+   * response. Certain messages also may include an override to the normal read-timeout, such as a
+   * query or a putAll.
+   */
-    if (this.requestSpecificTimeout == -1)
+    if (this.requestSpecificTimeout == -1) {
-    else
+    } else {
+    }
-  /** returns the name of this connection */
+  /**
+   * returns the name of this connection
+   */
-    if (!AcceptorImpl.isAuthenticationRequired())
+    if (!AcceptorImpl.isAuthenticationRequired()) {
+    }
-    if (AcceptorImpl.isIntegratedSecurity())
+    if (AcceptorImpl.isIntegratedSecurity()) {
+    }
-    if (!AcceptorImpl.isAuthenticationRequired())
+    if (!AcceptorImpl.isAuthenticationRequired()) {
+    }
-    if (AcceptorImpl.isIntegratedSecurity())
+    if (AcceptorImpl.isIntegratedSecurity()) {
+    }
-  /** returns the member ID byte array to be used for creating EventID objects */
+  /**
+   * returns the member ID byte array to be used for creating EventID objects
+   */
