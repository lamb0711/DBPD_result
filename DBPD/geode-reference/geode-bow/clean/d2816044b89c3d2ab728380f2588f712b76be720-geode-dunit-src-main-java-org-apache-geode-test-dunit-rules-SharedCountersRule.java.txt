GEODE-6033: Support dynamic VMs in SharedCountersRule

Make SharedCountersRule support create and bounce VM.

+import java.util.HashMap;
-@SuppressWarnings("serial,unused")
+@SuppressWarnings("serial")
+  private final Map<Integer, Map<Serializable, AtomicInteger>> beforeBounceCounters =
+      new HashMap<>();
-  SharedCountersRule(final Builder builder) {
+  private SharedCountersRule(final Builder builder) {
-    idsToInitInBefore.clear();
+  @Override
+  protected void afterCreateVM(VM vm) {
+    vm.invoke(() -> counters = new ConcurrentHashMap<>());
+
+    for (Serializable id : idsToInitInBefore) {
+      vm.invoke(() -> initialize(id));
+    }
+
+    for (Serializable id : counters.keySet()) {
+      vm.invoke(() -> counters.putIfAbsent(id, new AtomicInteger()));
+    }
+  }
+
+  @Override
+  protected void beforeBounceVM(VM vm) {
+    beforeBounceCounters.put(vm.getId(), vm.invoke(() -> counters));
+  }
+
+  @Override
+  protected void afterBounceVM(VM vm) {
+    vm.invoke(() -> counters = new ConcurrentHashMap<>());
+
+    Map<Serializable, AtomicInteger> beforeBounceCountersForVM =
+        beforeBounceCounters.remove(vm.getId());
+    for (Serializable id : beforeBounceCountersForVM.keySet()) {
+      vm.invoke(() -> counters.putIfAbsent(id, beforeBounceCountersForVM.get(id)));
+    }
+
+    for (Serializable id : idsToInitInBefore) {
+      vm.invoke(() -> counters.putIfAbsent(id, new AtomicInteger()));
+    }
+
+    for (Serializable id : counters.keySet()) {
+      vm.invoke(() -> counters.putIfAbsent(id, new AtomicInteger()));
+    }
+  }
+
-    AtomicInteger value = new AtomicInteger();
-    invoker().invokeInEveryVMAndController(() -> counters.putIfAbsent(id, value));
+    invoker().invokeInEveryVMAndController(() -> counters.putIfAbsent(id, new AtomicInteger()));
