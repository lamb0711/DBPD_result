Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Central component for federation It consists of an Object State as well as
- * some meta data for the Object being federated.
+ * Central component for federation It consists of an Object State as well as some meta data for the
+ * Object being federated.
-public class FederationComponent implements java.io.Serializable,  DataSerializable, DataSerializableFixedID {
+public class FederationComponent
+    implements java.io.Serializable, DataSerializable, DataSerializableFixedID {
-  private static final String THIS_COMPONENT = FederationComponent.class
-      .getName();
+  private static final String THIS_COMPONENT = FederationComponent.class.getName();
-   * Name if the interface class . It will determine the interface for MBean at
-   * Managing Node side
+   * Name if the interface class . It will determine the interface for MBean at Managing Node side
-   * This Map holds the object state as property-value Every component should be
-   * serializable
+   * This Map holds the object state as property-value Every component should be serializable
-  private transient  Map<String , Method> getterMethodMap;
-  
+  private transient Map<String, Method> getterMethodMap;
+
-  
+
-  
-  
+
+
-  
+
-  
+
-   * @param objectName
-   *          ObjectName of the MBean
-   * @param interfaceClass
-   *          interface class of the MBean
-   * @param notificationEmitter
-   *          specifies whether this MBean is going to emit notifications
-    */
-  public FederationComponent(Object object, ObjectName objectName,
-      Class interfaceClass, boolean notificationEmitter) {
+   * @param objectName ObjectName of the MBean
+   * @param interfaceClass interface class of the MBean
+   * @param notificationEmitter specifies whether this MBean is going to emit notifications
+   */
+  public FederationComponent(Object object, ObjectName objectName, Class interfaceClass,
+      boolean notificationEmitter) {
-  
-  public FederationComponent(){
-  }
-  
+
+  public FederationComponent() {}
+
-   * This method will get called from Management Thread. This will dynamically
-   * invoke the MBeans getter methods and set them in ObjectState Map.
+   * This method will get called from Management Thread. This will dynamically invoke the MBeans
+   * getter methods and set them in ObjectState Map.
-   * @return true if the refresh detects that the state changed. It will return
-   *         false if two consecutive refresh calls results in no state change.
-   *         This indicates to the LocalManager whether to send the MBean state
-   *         to Manager or not.
+   * @return true if the refresh detects that the state changed. It will return false if two
+   *         consecutive refresh calls results in no state change. This indicates to the
+   *         LocalManager whether to send the MBean state to Manager or not.
-    if(keepOldState){
+    if (keepOldState) {
-    for (Map.Entry<String, Method> gettorMethodEntry: getterMethodMap.entrySet()) {
+    for (Map.Entry<String, Method> gettorMethodEntry : getterMethodMap.entrySet()) {
-        
-        
-        //To Handle open types in getter values
+
+
+        // To Handle open types in getter values
-      
+
-      return " ObjectName = " + objectName + ",InterfaceClassName = "
-          + interfaceClassName + ", NotificationEmitter = "
-          + notificationEmitter + ", ObjectState = " + objectState.toString();
+      return " ObjectName = " + objectName + ",InterfaceClassName = " + interfaceClassName
+          + ", NotificationEmitter = " + notificationEmitter + ", ObjectState = "
+          + objectState.toString();
-  
-  public Map<String, Object> getObjectState(){
+
+  public Map<String, Object> getObjectState() {
-  
-  public Map<String, Object> getOldState(){
+
+  public Map<String, Object> getOldState() {
-   return DataSerializableFixedID.MGMT_FEDERATION_COMPONENT;
+    return DataSerializableFixedID.MGMT_FEDERATION_COMPONENT;
-  
-  public Object getMBeanObject(){
+
+  public Object getMBeanObject() {
-  public Class getInterfaceClass(){
+  public Class getInterfaceClass() {
-  
-  
+
+
-  
+
