GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

-package org.apache.geode.internal.cache.lru;
+package org.apache.geode.internal.cache.eviction;
+
-  public OffHeapEvictor(InternalCache gemFireCache) {
-    super(gemFireCache);
+  public OffHeapEvictor(final InternalCache cache) {
+    super(cache, EVICTOR_THREAD_GROUP_NAME, EVICTOR_THREAD_NAME);
-    float evictionBurstPercentage = Float.parseFloat(System.getProperty(
-        DistributionConfig.GEMFIRE_PREFIX + "HeapLRUCapacityController.evictionBurstPercentage",
-        "0.4"));
-
-    MemoryAllocator allocator = this.cache.getOffHeapStore();
+    MemoryAllocator allocator = cache().getOffHeapStore();
+    float evictionBurstPercentage = Float.parseFloat(System.getProperty(
+        DistributionConfig.GEMFIRE_PREFIX + "HeapLRUCapacityController.evictionBurstPercentage",
+        "0.4"));
+  @Override
-    if (numEvictionLoopsCompleted < Math.max(3, numFastLoops)) {
+    if (numEvictionLoopsCompleted() < Math.max(3, numFastLoops())) {
+  @Override
-    return (region.getEvictionAttributes().getAlgorithm().isLRUHeap()
-        && (region.getDataStore() != null) && region.getAttributes().getOffHeap());
+    return region.getEvictionAttributes().getAlgorithm().isLRUHeap()
+        && region.getDataStore() != null && region.getAttributes().getOffHeap();
+  @Override
-    return (region.getEvictionAttributes().getAlgorithm().isLRUHeap()
-        && region.getAttributes().getOffHeap());
+    return region.getEvictionAttributes().getAlgorithm().isLRUHeap()
+        && region.getAttributes().getOffHeap();
-  protected String getEvictorThreadGroupName() {
-    return OffHeapEvictor.EVICTOR_THREAD_GROUP_NAME;
-  }
-
-  protected String getEvictorThreadName() {
-    return OffHeapEvictor.EVICTOR_THREAD_NAME;
-  }
-
+  @Override
