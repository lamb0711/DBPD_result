Merge branch 'release/1.0.0-incubating.M3'

-import java.io.DataInput;
-import java.io.DataOutput;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.CancellationException;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.CancelCriterion;
-import com.gemstone.gemfire.CancelException;
-import com.gemstone.gemfire.InternalGemFireError;
-import com.gemstone.gemfire.StatisticsFactory;
-import com.gemstone.gemfire.SystemFailure;
-import com.gemstone.gemfire.distributed.DistributedLockService;
-import com.gemstone.gemfire.distributed.DistributedSystem;
-import com.gemstone.gemfire.distributed.DistributedSystemDisconnectedException;
-import com.gemstone.gemfire.distributed.LeaseExpiredException;
-import com.gemstone.gemfire.distributed.LockNotHeldException;
-import com.gemstone.gemfire.distributed.LockServiceDestroyedException;
+import com.gemstone.gemfire.*;
+import com.gemstone.gemfire.distributed.*;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import org.apache.logging.log4j.Logger;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.util.*;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.atomic.AtomicInteger;
-      "gemfire.DLockService.notGrantorSleep", 100).longValue();
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.notGrantorSleep", 100).longValue();
-      "gemfire.DLockService.debug.disallowNotHolder");
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.debug.disallowNotHolder");
-      "gemfire.DLockService.debug.disallowLockRequestLoop");
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.debug.disallowLockRequestLoop");
-      "gemfire.DLockService.debug.disallowLockRequestLoopCount", 20).intValue();
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.debug.disallowLockRequestLoopCount", 20).intValue();
-      "gemfire.DLockService.debug.nonGrantorDestroyLoop");
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.debug.nonGrantorDestroyLoop");
-      "gemfire.DLockService.debug.nonGrantorDestroyLoopCount", 20).intValue();
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.debug.nonGrantorDestroyLoopCount", 20).intValue();
-      "gemfire.DLockService.debug.enforceSafeExit");
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.debug.enforceSafeExit");
-      "gemfire.DLockService.automateFreeResources");
+      DistributionConfig.GEMFIRE_PREFIX + "DLockService.automateFreeResources");
-  private final DistributedLockStats dlockStats = getOrCreateStats();
+  private final DistributedLockStats dlockStats;
-            dm.getCancelCriterion().cancelInProgress() == null) {
+            !dm.getCancelCriterion().isCancelInProgress()) {
-            dm.getCancelCriterion().cancelInProgress() == null) {
+            !dm.getCancelCriterion().isCancelInProgress()) {
-            || this.dm.getCancelCriterion().cancelInProgress() != null
+            || this.dm.getCancelCriterion().isCancelInProgress()
+    this.dlockStats = getOrCreateStats(ds);
-   * @since 3.5
+   * @since GemFire 3.5
-        if (this.ds.getCancelCriterion().cancelInProgress() != null) {
+        if (this.ds.getCancelCriterion().isCancelInProgress()) {
-      "gemfire.DistributedLockService.startSerialNumber", 1).intValue();
+      DistributionConfig.GEMFIRE_PREFIX + "DistributedLockService.startSerialNumber", 1).intValue();
-   * @since 3.5
+   * @since GemFire 3.5
-  protected static synchronized DistributedLockStats getOrCreateStats() {
+  protected static synchronized DistributedLockStats getOrCreateStats(DistributedSystem ds) {
-      InternalDistributedSystem ds =
-          InternalDistributedSystem.getAnyInstance();
-          "Cannot find any instance of InternalDistributedSystem");
+          "Need an instance of InternalDistributedSystem");
