GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          LocalizedStrings.TCPConduit_UNABLE_TO_INITIALIZE_CONNECTION_TABLE.toLocalizedString(),
+          "Unable to initialize connection table",
-        logger.warn(
-            LocalizedMessage.create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_P2PTCPBUFFERSIZE),
+        logger.warn("exception parsing p2p.tcpBufferSize",
-        logger.warn(LocalizedMessage
-            .create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_P2PIDLECONNECTIONTIMEOUT), e);
+        logger.warn("exception parsing p2p.idleConnectionTimeout", e);
-        logger.warn(LocalizedMessage
-            .create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_TCPPORTRANGESTART), e);
+        logger.warn("Exception parsing membership-port-range start port.", e);
-        logger.warn(
-            LocalizedMessage.create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_TCPPORTRANGEEND),
+        logger.warn("Exception parsing membership-port-range end port.",
-            LocalizedStrings.TCPConduit_WHILE_CREATING_HANDSHAKE_POOL.toLocalizedString(),
+            "while creating handshake pool",
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.TCPConduit_UNABLE_TO_SET_LISTENER_PRIORITY__0, e.getMessage()));
+        logger.info("unable to set listener priority: {}", e.getMessage());
-        logger.fatal(LocalizedMessage.create(LocalizedStrings.TCPConduit_INHIBITACCEPTOR));
+        logger.fatal(
+            "p2p.test.inhibitAcceptor was found to be set, inhibiting incoming tcp/ip connections");
-              logger.info(LocalizedMessage.create(
-                  LocalizedStrings.TCPConduit_0_IS_1_INSTEAD_OF_THE_REQUESTED_2,
-                  new Object[] {"Listener receiverBufferSize", Integer.valueOf(newSize),
-                      Integer.valueOf(tcpBufferSize)}));
+              logger.info("{} is {} instead of the requested {}",
+                  "Listener receiverBufferSize", Integer.valueOf(newSize),
+                  Integer.valueOf(tcpBufferSize));
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.TCPConduit_FAILED_TO_SET_LISTENER_RECEIVERBUFFERSIZE_TO__0,
-                tcpBufferSize));
+            logger.warn("Failed to set listener receiverBufferSize to {}",
+                tcpBufferSize);
-            logger.info(LocalizedMessage.create(
-                LocalizedStrings.TCPConduit_0_IS_1_INSTEAD_OF_THE_REQUESTED_2,
-                new Object[] {"Listener receiverBufferSize", Integer.valueOf(newSize),
-                    Integer.valueOf(this.tcpBufferSize)}));
+            logger.info("Listener receiverBufferSize is {} instead of the requested {}",
+                Integer.valueOf(newSize),
+                Integer.valueOf(this.tcpBufferSize));
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.TCPConduit_FAILED_TO_SET_LISTENER_RECEIVERBUFFERSIZE_TO__0,
-              this.tcpBufferSize));
+          logger.warn("Failed to set listener receiverBufferSize to {}",
+              this.tcpBufferSize);
-      throw new ConnectionException(LocalizedStrings.TCPConduit_EXCEPTION_CREATING_SERVERSOCKET
-          .toLocalizedString(new Object[] {Integer.valueOf(p), bindAddress}), io);
+      throw new ConnectionException(
+          String.format("While creating ServerSocket on port %s with address %s",
+              new Object[] {Integer.valueOf(p), bindAddress}),
+          io);
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.TCPConduit_UNABLE_TO_SHUT_DOWN_LISTENER_WITHIN_0_MS_UNABLE_TO_INTERRUPT_SOCKET_ACCEPT_DUE_TO_JDK_BUG_GIVING_UP,
-              Integer.valueOf(LISTENER_CLOSE_TIMEOUT)));
+          logger.warn(
+              "Unable to shut down listener within {}ms.  Unable to interrupt socket.accept() due to JDK bug. Giving up.",
+              Integer.valueOf(LISTENER_CLOSE_TIMEOUT));
-          LocalizedStrings.TCPConduit_UNABLE_TO_INITIALIZE_CONNECTION_TABLE.toLocalizedString(),
+          "Unable to initialize connection table",
-            logger.warn(
-                LocalizedMessage.create(
-                    LocalizedStrings.TCPConduit_STOPPING_P2P_LISTENER_DUE_TO_SSL_CONFIGURATION_PROBLEM),
+            logger.warn("Stopping P2P listener due to SSL configuration problem.",
-              logger.warn(
-                  LocalizedMessage.create(
-                      LocalizedStrings.TCPConduit_SERVERSOCKET_THREW_SOCKET_CLOSED_EXCEPTION_BUT_SAYS_IT_IS_NOT_CLOSED),
+              logger.warn("ServerSocket threw 'socket closed' exception but says it is not closed",
-                logger.fatal(
-                    LocalizedMessage.create(
-                        LocalizedStrings.TCPConduit_UNABLE_TO_CLOSE_AND_RECREATE_SERVER_SOCKET),
+                logger.fatal("Unable to close and recreate server socket",
-                  logger.info(LocalizedMessage.create(
-                      LocalizedStrings.TCPConduit_INTERRUPTED_AND_EXITING_WHILE_TRYING_TO_RECREATE_LISTENER_SOCKETS));
+                  logger.info("Interrupted and exiting while trying to recreate listener sockets");
-        logger.warn(
-            LocalizedMessage.create(LocalizedStrings.TCPConduit_SERVERSOCKET_CLOSED_REOPENING));
+        logger.warn("ServerSocket closed - reopening");
-          LocalizedStrings.TCPConduit_TCP_LAYER_HAS_BEEN_SHUTDOWN.toLocalizedString());
+          "tcp layer has been shutdown");
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.TCPConduit_FAILED_TO_ACCEPT_CONNECTION_FROM_0_BECAUSE_1,
-            new Object[] {othersock.getInetAddress(), e}), e);
+        logger.warn("Failed to accept connection from {} because {}",
+            othersock.getInetAddress(), e);
-          LocalizedStrings.TCPConduit_THE_CONDUIT_IS_STOPPED.toLocalizedString());
+          "The conduit is stopped");
-                LocalizedStrings.TCPConduit_TCPIP_CONNECTION_LOST_AND_MEMBER_IS_NOT_IN_VIEW
-                    .toLocalizedString());
+                "TCP/IP connection lost and member is not in view");
-                LocalizedStrings.TCPConduit_TCPIP_CONNECTION_LOST_AND_MEMBER_IS_NOT_IN_VIEW
-                    .toLocalizedString());
+                "TCP/IP connection lost and member is not in view");
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.TCPConduit_ATTEMPTING_TCPIP_RECONNECT_TO__0, memberInTrouble));
+            logger.warn("Attempting TCP/IP reconnect to  {}", memberInTrouble);
-                  LocalizedStrings.TCPConduit_UNABLE_TO_RECONNECT_TO_SERVER_POSSIBLE_SHUTDOWN_0
-                      .toLocalizedString(memberAddress));
+                  String.format("Unable to reconnect to server; possible shutdown:  %s",
+                      memberAddress));
-              logger.info(LocalizedMessage.create(
-                  LocalizedStrings.TCPConduit_ENDING_RECONNECT_ATTEMPT_BECAUSE_0_HAS_DISAPPEARED,
-                  memberInTrouble));
+              logger.info("Ending reconnect attempt because {} has disappeared.",
+                  memberInTrouble);
-            throw new IOException(LocalizedStrings.TCPConduit_PEER_HAS_DISAPPEARED_FROM_VIEW
-                .toLocalizedString(memberAddress));
+            throw new IOException(String.format("Peer has disappeared from view: %s",
+                memberAddress));
-              logger.info(LocalizedMessage.create(
-                  LocalizedStrings.TCPConduit_ENDING_RECONNECT_ATTEMPT_TO_0_BECAUSE_SHUTDOWN_HAS_STARTED,
-                  memberInTrouble));
+              logger.info("Ending reconnect attempt to {} because shutdown has started.",
+                  memberInTrouble);
-                LocalizedStrings.TCPConduit_ABANDONED_BECAUSE_SHUTDOWN_IS_IN_PROGRESS
-                    .toLocalizedString());
+                "Abandoned because shutdown is in progress");
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.TCPConduit_ERROR_SENDING_MESSAGE_TO_0_WILL_REATTEMPT_1,
-                new Object[] {memberAddress, problem}));
+            logger.warn("Error sending message to {} (will reattempt): {}",
+                memberAddress, problem);
-              logger.warn(
-                  LocalizedMessage.create(
-                      LocalizedStrings.TCPConduit_THROWING_IOEXCEPTION_AFTER_FINDING_BREAKLOOP_TRUE),
+              logger.warn("Throwing IOException after finding breakLoop=true",
-              IOException ioe = new IOException(LocalizedStrings.TCPConduit_PROBLEM_CONNECTING_TO_0
-                  .toLocalizedString(memberAddress));
+              IOException ioe = new IOException(String.format("Problem connecting to %s",
+                  memberAddress));
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.TCPConduit_SUCCESSFULLY_RECONNECTED_TO_MEMBER_0, memberInTrouble));
+          logger.info("Successfully reconnected to member {}", memberInTrouble);
