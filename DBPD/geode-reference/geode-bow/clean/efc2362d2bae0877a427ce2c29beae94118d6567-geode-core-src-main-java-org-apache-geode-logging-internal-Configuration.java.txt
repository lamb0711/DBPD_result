GEODE-6964: Move geode log4j core classes to geode-log4j

Introduce new Logging and Alerting SPIs. Extract all log4j-core code to
geode-log4j module.

The geode-core module no longer contains log4j2.xml and no longer has a
dependency on log4j-core.

All code that uses log4j-core has moved to the new module geode-log4j.
The log4j2.xml for Geode now lives in geode-log4j as well. These
changes ensure that users have better control over logging including
which backend to use. This should improve user experience when using
Spring Boot.

Co-authored-by: Mark Hanson <mhanson@pivotal.io>

-package org.apache.geode.internal.logging;
+package org.apache.geode.logging.internal;
-import static org.apache.geode.internal.logging.LogLevelUpdateOccurs.ONLY_WHEN_USING_DEFAULT_CONFIG;
-import static org.apache.geode.internal.logging.LogLevelUpdateScope.GEODE_LOGGERS;
+import static org.apache.geode.logging.internal.spi.LogLevelUpdateOccurs.ONLY_WHEN_USING_DEFAULT_CONFIG;
+import static org.apache.geode.logging.internal.spi.LogLevelUpdateScope.GEODE_LOGGERS;
-import org.apache.geode.cache.Cache;
+import org.apache.geode.logging.internal.spi.LogConfig;
+import org.apache.geode.logging.internal.spi.LogConfigListener;
+import org.apache.geode.logging.internal.spi.LogConfigSupplier;
+import org.apache.geode.logging.internal.spi.LogLevelUpdateOccurs;
+import org.apache.geode.logging.internal.spi.LogLevelUpdateScope;
+import org.apache.geode.logging.internal.spi.LogWriterLevel;
+import org.apache.geode.logging.internal.spi.LoggingProvider;
- * Provides logging configuration by managing a {@link ProviderAgent} for the logging backend.
+ * Provides logging configuration by managing a {@link LoggingProvider} for the logging backend.
-   * The root name of all Geode loggers.
-   */
-  public static final String GEODE_LOGGER_PREFIX = "org.apache.geode";
-
-  /**
-   * The name of the main Geode logger returned by {@link Cache#getLogger()}.
-   */
-  public static final String MAIN_LOGGER_NAME = GEODE_LOGGER_PREFIX;
-
-  /**
-   * The name of the security Geode logger returned by {@link Cache#getSecurityLogger()}.
-   */
-  public static final String SECURITY_LOGGER_NAME = GEODE_LOGGER_PREFIX + ".security";
-
-  /**
-  private final ProviderAgent providerAgent;
+  private final LoggingProvider loggingProvider;
-    return create(getLogLevelUpdateOccurs(), getLogLevelUpdateScope(), new ProviderAgentLoader()
-        .findProviderAgent());
+    return create(getLogLevelUpdateOccurs(), getLogLevelUpdateScope(), new LoggingProviderLoader()
+        .load());
-  public static Configuration create(final ProviderAgent providerAgent) {
-    return create(getLogLevelUpdateOccurs(), getLogLevelUpdateScope(), providerAgent);
+  public static Configuration create(final LoggingProvider loggingProvider) {
+    return create(getLogLevelUpdateOccurs(), getLogLevelUpdateScope(), loggingProvider);
-        new ProviderAgentLoader().findProviderAgent());
+        new LoggingProviderLoader().load());
-      final LogLevelUpdateScope logLevelUpdateScope, final ProviderAgent providerAgent) {
-    return new Configuration(logLevelUpdateOccurs, logLevelUpdateScope, providerAgent);
+      final LogLevelUpdateScope logLevelUpdateScope, final LoggingProvider loggingProvider) {
+    return new Configuration(logLevelUpdateOccurs, logLevelUpdateScope, loggingProvider);
-      final LogLevelUpdateScope logLevelUpdateScope, final ProviderAgent providerAgent) {
+      final LogLevelUpdateScope logLevelUpdateScope, final LoggingProvider loggingProvider) {
-    this.providerAgent = providerAgent;
+    this.loggingProvider = loggingProvider;
-   * register as a {@code LogConfigListener} and configure the {@code ProviderAgent}.
+   * register as a {@code LogConfigListener} and configure the {@code LoggingProvider}.
-    providerAgent.configure(logConfig, logLevelUpdateOccurs, logLevelUpdateScope);
+    loggingProvider.configure(logConfig, logLevelUpdateOccurs, logLevelUpdateScope);
-   * cleans up the {@code ProviderAgent}.
+   * cleans up the {@code LoggingProvider}.
-    providerAgent.cleanup();
+    loggingProvider.cleanup();
-    return providerAgent.getConfigurationInfo();
+    return loggingProvider.getConfigurationInfo();
-      providerAgent.enableLoggingToStandardOutput();
+      loggingProvider.enableLoggingToStandardOutput();
-      providerAgent.disableLoggingToStandardOutput();
+      loggingProvider.disableLoggingToStandardOutput();
