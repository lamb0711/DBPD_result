GEODE-6986: Implement UnrestrictedMethodAuthorizer (#4105)

* GEODE-6986: Implement UnrestrictedMethodAuthorizer

- Made the class final, immutable and thread safe.
- Added comprehensive javadocs to the class and its methods.
- Added several unit tests for the class and all public methods.
- Improved javadocs for 'RestrictedMethodAuthorizer' and
  'MethodInvocationAuthorizer'.
- Fixed 'RestrictedMethodAuthorizer.isAllowedGeodeMethod()' to allow
  the execution of 'toString' and 'equals' on Geode objects.
- Removed 'getNanos' from the accepted methods for 'java.lang.Date' in
  'RestrictedMethodAuthorizer' (the method belong to
  'java.sql.Timestamp' instead).
- * The default, immutable and thread-safe method invocation authorizer used by Geode to determine
- * whether a {@link java.lang.reflect.Method} is allowed to be executed on a specific
+ * The default, immutable and thread-safe {@link MethodInvocationAuthorizer} used by Geode to
+ * determine whether a {@link java.lang.reflect.Method} is allowed to be executed on a specific
+ * This authorizer addresses the four known security risks: {@code Java Reflection},
+ * {@code Cache Modification}, {@code Region Modification} and {@code Region Entry Modification}.
+ * <p/>
+ *
+    Set<Class> objectCallers = new HashSet<>();
+    objectCallers.add(Object.class);
+    objectCallers = Collections.unmodifiableSet(objectCallers);
+    acceptanceListMap.put("equals", objectCallers);
+    acceptanceListMap.put("toString", objectCallers);
+
-    acceptanceListMap.put("getNanos", dateCallers);
