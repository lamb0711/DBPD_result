Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright Copyright (c) 2000-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * $Id: CompiledComparison.java,v 1.1 2005/01/27 06:26:33 vaibhav Exp $
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import com.gemstone.gemfire.cache.query.Struct;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-      CompiledValue iterOperands, RuntimeIterator[] indpndntItrs, boolean isIntersection, boolean conditioningNeeded, boolean evaluateProjection)
+      @Retained CompiledValue iterOperands, RuntimeIterator[] indpndntItrs, boolean isIntersection, boolean conditioningNeeded, boolean evaluateProjection)
-      final boolean completeExpansionNeeded, CompiledValue iterOperands,
+      final boolean completeExpansionNeeded, @Retained CompiledValue iterOperands,
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false;  
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1;
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-            if(useLinkedSet) {
-              set = new LinkedStructSet((StructTypeImpl)resultType);
+            if(useLinkedDataStructure) {
+              set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+              : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-            set = new StructBag((StructTypeImpl)resultType,
-                context.getCachePerfStats());
+              set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-            if (useLinkedSet) {
-              set = new LinkedResultSet(resultType);
+            if (useLinkedDataStructure) {
+              set = context.isDistinct() ? new LinkedResultSet(resultType) :
+                new SortedResultsBag(resultType, nullValuesAtStart) ;
-              set = new ResultsBag(resultType, context.getCachePerfStats());
+              set = QueryUtils.createResultCollection(context, resultType) ;
-              if(useLinkedSet) {
-                set = new LinkedStructSet((StructTypeImpl)resultType);
+              if(useLinkedDataStructure) {
+                set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+                : new  SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-                set = new StructBag((StructTypeImpl)resultType,
-                  context.getCachePerfStats());
+                set = QueryUtils.createStructCollection(context,(StructTypeImpl)resultType) ;
-              if (useLinkedSet) {
-                set = new LinkedResultSet(resultType); 
+              if (useLinkedDataStructure) {
+                set = context.isDistinct() ? new LinkedResultSet(resultType) : 
+                  new SortedResultsBag(resultType, nullValuesAtStart ); 
-                set = new ResultsBag(resultType, context.getCachePerfStats());
+                set = QueryUtils.createResultCollection(context, resultType) ;
-          if (useLinkedSet) {
-            set = new LinkedStructSet((StructTypeImpl)resultType);
+          if (useLinkedDataStructure) {
+            set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+            : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-            set = (SelectResults)new StructBag((StructTypeImpl)resultType,
-                context.getCachePerfStats());
+            set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-          if (useLinkedSet) {
-            set = new LinkedResultSet(resultType);
+          if (useLinkedDataStructure) {
+            set = context.isDistinct() ? new LinkedResultSet(resultType) :
+              new SortedResultsBag(resultType, nullValuesAtStart);
-            set = new ResultsBag(resultType, context.getCachePerfStats());
+            set = QueryUtils.createResultCollection(context, resultType) ;
