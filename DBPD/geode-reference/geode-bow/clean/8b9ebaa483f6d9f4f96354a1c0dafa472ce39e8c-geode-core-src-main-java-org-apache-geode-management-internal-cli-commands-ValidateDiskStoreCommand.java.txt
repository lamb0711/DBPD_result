GEODE-4858: Update *DiskStore commands to use ResultModel and SingleGfshCommand (#1996)


-import java.io.IOException;
+import java.util.concurrent.TimeUnit;
-import org.apache.geode.management.internal.cli.GfshParser;
+import org.apache.geode.management.internal.cli.LogWrapper;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-  public Result validateDiskStore(
+  public ResultModel validateDiskStore(
+
+    ResultModel result = new ResultModel();
+    InfoResultModel infoResult = result.addInfo();
+    LogWrapper logWrapper = LogWrapper.getInstance(getCache());
+    Process validateDiskStoreProcess = null;
+
-      StringBuilder output = new StringBuilder();
-      String errorString = "";
+      procBuilder.redirectErrorStream(true);
-      Process validateDiskStoreProcess = procBuilder.redirectErrorStream(true).start();
+      validateDiskStoreProcess = procBuilder.redirectErrorStream(true).start();
+
-
-        output.append(line).append(GfshParser.LINE_SEPARATOR);
+        infoResult.addLine(line);
-      validateDiskStoreProcess.destroy();
-      output.append(errorString).append(GfshParser.LINE_SEPARATOR);
-      String resultString =
-          "Validating " + diskStoreName + GfshParser.LINE_SEPARATOR + output.toString();
-      return ResultBuilder.createInfoResult(resultString);
-    } catch (IOException ex) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.VALIDATE_DISK_STORE__MSG__IO_ERROR, diskStoreName, ex.getMessage()));
-    } catch (Exception ex) {
-      // StringPrintWriter s = new StringPrintWriter();
-      // ex.printStackTrace(s);
-      return ResultBuilder.createGemFireErrorResult(CliStrings
-          .format(CliStrings.VALIDATE_DISK_STORE__MSG__ERROR, diskStoreName, ex.getMessage()));
+      validateDiskStoreProcess.waitFor(2, TimeUnit.SECONDS);
+      if (validateDiskStoreProcess.exitValue() != 0) {
+        result.setStatus(Result.Status.ERROR);
+      }
+    } catch (Exception e) {
+      infoResult.addLine(
+          String.format("Error compacting disk store %s: %s", diskStoreName, e.getMessage()));
+      result.setStatus(Result.Status.ERROR);
+      logWrapper.warning(e.getMessage(), e);
+    } finally {
+      if (validateDiskStoreProcess != null) {
+        try {
+          // just to check whether the process has exited
+          // Process.exitValue() throws IllegalThreadStateException if Process
+          // is alive
+          validateDiskStoreProcess.exitValue();
+        } catch (IllegalThreadStateException ise) {
+          // not yet terminated, destroy the process
+          validateDiskStoreProcess.destroy();
+        }
+      }
+
+    return result;
