Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Defines a mapping between the snapshot path and the file(s) to be imported or
- * exported on a specific member.
+ * Defines a mapping between the snapshot path and the file(s) to be imported or exported on a
+ * specific member.
-   * Invoked during a parallel export to map the supplied path to a new file name.
-   * This is necessary when the export file must be written to a member-specific
-   * location. The result of the mapping must resolve to a valid file path.
+   * Invoked during a parallel export to map the supplied path to a new file name. This is necessary
+   * when the export file must be written to a member-specific location. The result of the mapping
+   * must resolve to a valid file path.
-   * If members are writing to a shared location, the implementation <b>must</b>
-   * provide a unique file path to avoid an export error.
+   * If members are writing to a shared location, the implementation <b>must</b> provide a unique
+   * file path to avoid an export error.
-   * @param member
-   *          the member performing the export
-   * @param snapshot
-   *          the path specified in the invocation of
-   *          {@link RegionSnapshotService#save(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
-   *          RegionSnapshotService.load()} or
-   *          {@link CacheSnapshotService#save(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
-   *          CacheSnapshotService.load()}
+   * @param member the member performing the export
+   * @param snapshot the path specified in the invocation of
+   *        {@link RegionSnapshotService#save(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
+   *        RegionSnapshotService.load()} or
+   *        {@link CacheSnapshotService#save(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
+   *        CacheSnapshotService.load()}
-  
+
-   * Invoked during a parallel import to map the supplied path to one or more
-   * files. This is necessary when the import files must be read from a
-   * member-specific path or when the cache topology differs from the exporting
-   * system. The result of the mapping must resolve to one or more valid file
-   * paths.
+   * Invoked during a parallel import to map the supplied path to one or more files. This is
+   * necessary when the import files must be read from a member-specific path or when the cache
+   * topology differs from the exporting system. The result of the mapping must resolve to one or
+   * more valid file paths.
+   * 
-   * If members are reading from a shared location, the implementation should
-   * partition the files so that a snapshot file is only imported once.
-   * @param member
-   *          the member performing the import
-   * @param snapshot
-   *          the path specified in the invocation of
-   *          {@link RegionSnapshotService#load(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
-   *          RegionSnapshotService.load()} or
-   *          {@link CacheSnapshotService#load(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
-   *          CacheSnapshotService.load()}
+   * If members are reading from a shared location, the implementation should partition the files so
+   * that a snapshot file is only imported once.
+   * 
+   * @param member the member performing the import
+   * @param snapshot the path specified in the invocation of
+   *        {@link RegionSnapshotService#load(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
+   *        RegionSnapshotService.load()} or
+   *        {@link CacheSnapshotService#load(File, org.apache.geode.cache.snapshot.SnapshotOptions.SnapshotFormat)
+   *        CacheSnapshotService.load()}
