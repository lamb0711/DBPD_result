Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Instance of this object behaves as a cache wide repository in the context of
- * management and monitoring. Various management infrastructures are initialized
- * by this class
+ * Instance of this object behaves as a cache wide repository in the context of management and
+ * monitoring. Various management infrastructures are initialized by this class
- * Various repository related methods are declared here These methods provide a
- * consistent view to read and update the repository.
+ * Various repository related methods are declared here These methods provide a consistent view to
+ * read and update the repository.
-    notifRegionMap = new ConcurrentHashMap<DistributedMember, Region<NotificationKey, Notification>>();
+    notifRegionMap =
+        new ConcurrentHashMap<DistributedMember, Region<NotificationKey, Notification>>();
-  
-  public void destroyLocalMonitoringRegion(){
+
+  public void destroyLocalMonitoringRegion() {
-  
-  public void destroyLocalNotifRegion(){
+
+  public void destroyLocalNotifRegion() {
-   * @param localMonitoringRegion
-   *          local monitoring region
+   * @param localMonitoringRegion local monitoring region
-  public void setLocalMonitoringRegion(
-      Region<String, Object> localMonitoringRegion) {
+  public void setLocalMonitoringRegion(Region<String, Object> localMonitoringRegion) {
-   * @param name
-   *          MBean name
-   * @param data
-   *          The value part of the Map
+   * @param name MBean name
+   * @param data The value part of the Map
-   * @param objectMap
-   *          Object Map containing key-value operations
+   * @param objectMap Object Map containing key-value operations
-  public void putAllInLocalMonitoringRegion(
-      Map<String, FederationComponent> objectMap) {
+  public void putAllInLocalMonitoringRegion(Map<String, FederationComponent> objectMap) {
-  
+
-   * @param name
-   *          MBean name
+   * @param name MBean name
-   * @param localNotificationRegion
-   *          local notification region
+   * @param localNotificationRegion local notification region
-   * @param key
-   *          Notiofication key
-   * @param notif
-   *          Notification Object
+   * @param key Notiofication key
+   * @param notif Notification Object
-  public void putEntryInLocalNotificationRegion(NotificationKey key,
-      Notification notif) {
+  public void putEntryInLocalNotificationRegion(NotificationKey key, Notification notif) {
-   * @param member
-   *          Distributed member
-   * @param region
-   *          Corresponding region
+   * @param member Distributed member
+   * @param region Corresponding region
-   * @param member
-   *          Distributed Member
+   * @param member Distributed Member
-  public Region<String, Object> getEntryFromMonitoringRegionMap(
-      DistributedMember member) {
+  public Region<String, Object> getEntryFromMonitoringRegionMap(DistributedMember member) {
-   * @param member
-   *          Distributed Member
+   * @param member Distributed Member
-   * @param member
-   *          Distributed Member
-   * @param region
-   *          Corresponding notification region
+   * @param member Distributed Member
+   * @param region Corresponding notification region
-   * @param member
-   *          Distributed Member
+   * @param member Distributed Member
-   * @param member
-   *          Distributed Member
+   * @param member Distributed Member
