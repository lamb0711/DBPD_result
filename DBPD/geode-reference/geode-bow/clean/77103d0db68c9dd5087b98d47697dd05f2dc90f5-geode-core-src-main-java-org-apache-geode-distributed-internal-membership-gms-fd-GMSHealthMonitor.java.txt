GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test

-import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberIdentifier;
- * It has {@link #suspect(GMSMember, String)} api, which can be used to initiate
+ * It has {@link #suspect(MemberIdentifier, String)} api, which can be used to initiate
- * It has {@link HealthMonitor#checkIfAvailable(GMSMember, String, boolean)} api to
+ * It has {@link HealthMonitor#checkIfAvailable(MemberIdentifier, String, boolean)} api to
-  private volatile GMSMember nextNeighbor;
+  private volatile MemberIdentifier nextNeighbor;
-  private GMSMember localAddress;
+  private MemberIdentifier localAddress;
-  final ConcurrentMap<GMSMember, TimeStamp> memberTimeStamps =
+  final ConcurrentMap<MemberIdentifier, TimeStamp> memberTimeStamps =
-  private final ConcurrentHashMap<GMSMember, GMSMembershipView> suspectedMemberIds =
+  private final ConcurrentHashMap<MemberIdentifier, GMSMembershipView> suspectedMemberIds =
-  private final List<GMSMember> membersInFinalCheck =
+  private final List<MemberIdentifier> membersInFinalCheck =
-   * {@link GMSHealthMonitor#contactedBy(GMSMember)} to record the activity of
+   * {@link GMSHealthMonitor#contactedBy(MemberIdentifier)} to record the activity of
-      GMSMember neighbor = nextNeighbor;
+      MemberIdentifier neighbor = nextNeighbor;
-          for (GMSMember member : myView.getMembers()) {
+          for (MemberIdentifier member : myView.getMembers()) {
-        GMSMember gmbr = localAddress;
-        UUID myUUID = gmbr.getUUID();
+        MemberIdentifier gmbr = localAddress;
+        UUID myUUID = gmbr.getMemberData().getUUID();
-        int myVmViewId = gmbr.getVmViewId();
+        int myVmViewId = gmbr.getMemberData().getVmViewId();
-  public void contactedBy(GMSMember sender) {
+  public void contactedBy(MemberIdentifier sender) {
-  private void contactedBy(GMSMember sender, long timeStamp) {
+  private void contactedBy(MemberIdentifier sender, long timeStamp) {
-      final GMSMember mbr) {
+      final MemberIdentifier mbr) {
-  private void checkMember(final GMSMember mbr) {
+  private void checkMember(final MemberIdentifier mbr) {
-  private void initiateSuspicion(GMSMember mbr, String reason) {
+  private void initiateSuspicion(MemberIdentifier mbr, String reason) {
-  private boolean doCheckMember(GMSMember member, boolean waitForResponse) {
+  private boolean doCheckMember(MemberIdentifier member, boolean waitForResponse) {
-      Set<GMSMember> membersNotReceivedMsg = this.services.getMessenger().send(hrm);
+      Set<MemberIdentifier> membersNotReceivedMsg = this.services.getMessenger().send(hrm);
-  boolean doTCPCheckMember(GMSMember suspectMember, int port,
+  boolean doTCPCheckMember(MemberIdentifier suspectMember, int port,
-  boolean doTCPCheckMember(GMSMember suspectMember, Socket clientSocket) {
+  boolean doTCPCheckMember(MemberIdentifier suspectMember, Socket clientSocket) {
-        GMSMember gmbr = suspectMember;
+        MemberIdentifier gmbr = suspectMember;
-  void writeMemberToStream(GMSMember gmbr, DataOutputStream out) throws IOException {
+  void writeMemberToStream(MemberIdentifier gmbr, DataOutputStream out) throws IOException {
-    out.writeLong(gmbr.getUuidLSBs());
-    out.writeLong(gmbr.getUuidMSBs());
+    out.writeLong(gmbr.getMemberData().getUuidLeastSignificantBits());
+    out.writeLong(gmbr.getMemberData().getUuidMostSignificantBits());
-  public void suspect(GMSMember mbr, String reason) {
+  public void suspect(MemberIdentifier mbr, String reason) {
-  public boolean checkIfAvailable(GMSMember mbr, String reason,
+  public boolean checkIfAvailable(MemberIdentifier mbr, String reason,
-            List<GMSMember> mbrs = v.getMembers();
+            List<MemberIdentifier> mbrs = v.getMembers();
-      private void sendHeartbeats(List<GMSMember> mbrs, int startIndex) {
-        GMSMember coordinator = currentView.getCoordinator();
+      private void sendHeartbeats(List<MemberIdentifier> mbrs, int startIndex) {
+        MemberIdentifier coordinator = currentView.getCoordinator();
-          GMSMember mbr = mbrs.get(index);
+          MemberIdentifier mbr = mbrs.get(index);
-    for (Iterator<GMSMember> it = memberTimeStamps.keySet().iterator(); it
+    for (Iterator<MemberIdentifier> it = memberTimeStamps.keySet().iterator(); it
-    for (Iterator<GMSMember> it = suspectedMemberIds.keySet().iterator(); it
+    for (Iterator<MemberIdentifier> it = suspectedMemberIds.keySet().iterator(); it
-  protected synchronized void setNextNeighbor(GMSMembershipView newView, GMSMember nextTo) {
+  protected synchronized void setNextNeighbor(GMSMembershipView newView, MemberIdentifier nextTo) {
-    List<GMSMember> allMembers = newView.getMembers();
+    List<MemberIdentifier> allMembers = newView.getMembers();
-      for (GMSMember member : allMembers) {
+      for (MemberIdentifier member : allMembers) {
-      GMSMember newNeighbor = allMembers.get(nextNeighborIndex);
+      MemberIdentifier newNeighbor = allMembers.get(nextNeighborIndex);
-      GMSMember oldNeighbor = nextNeighbor;
+      MemberIdentifier oldNeighbor = nextNeighbor;
-  public GMSMember getNextNeighbor() {
+  public MemberIdentifier getNextNeighbor() {
-  public boolean isSuspectMember(GMSMember m) {
+  public boolean isSuspectMember(MemberIdentifier m) {
-  public void memberSuspected(GMSMember initiator,
-      GMSMember suspect, String reason) {
+  public void memberSuspected(MemberIdentifier initiator,
+      MemberIdentifier suspect, String reason) {
-  private void memberUnsuspected(GMSMember mbr) {
+  private void memberUnsuspected(MemberIdentifier mbr) {
-  public void setLocalAddress(GMSMember idm) {
+  public void setLocalAddress(MemberIdentifier idm) {
-    GMSMember me = localAddress;
+    MemberIdentifier me = localAddress;
-      Set<GMSMember> membersNotReceivedMsg = services.getMessenger().send(hm);
+      Set<MemberIdentifier> membersNotReceivedMsg = services.getMessenger().send(hm);
-    GMSMember sender = incomingRequest.getSender();
+    MemberIdentifier sender = incomingRequest.getSender();
-      for (GMSMember member : cv.getMembers()) {
+      for (MemberIdentifier member : cv.getMembers()) {
-      GMSMember coordinator = check.getCoordinator();
+      MemberIdentifier coordinator = check.getCoordinator();
-      GMSMember sender) {
+      MemberIdentifier sender) {
-  private void checkIfAvailable(final GMSMember initiator,
+  private void checkIfAvailable(final MemberIdentifier initiator,
-      final GMSMember mbr = sr.getSuspectMember();
+      final MemberIdentifier mbr = sr.getSuspectMember();
-  protected boolean inlineCheckIfAvailable(final GMSMember initiator,
-      final GMSMembershipView cv, boolean isFinalCheck, final GMSMember mbr,
+  protected boolean inlineCheckIfAvailable(final MemberIdentifier initiator,
+      final GMSMembershipView cv, boolean isFinalCheck, final MemberIdentifier mbr,
-          List<GMSMember> members = cv.getMembers();
-          List<GMSMember> recipients = new ArrayList<>(members.size());
-          for (GMSMember member : members) {
+          List<MemberIdentifier> members = cv.getMembers();
+          List<MemberIdentifier> recipients = new ArrayList<>(members.size());
+          for (MemberIdentifier member : members) {
-  public void memberShutdown(GMSMember mbr, String reason) {}
+  public void memberShutdown(MemberIdentifier mbr, String reason) {}
-    List<GMSMember> recipients;
+    List<MemberIdentifier> recipients;
-      HashSet<GMSMember> filter = new HashSet<>();
-      for (Enumeration<GMSMember> e = suspectedMemberIds.keys(); e
+      HashSet<MemberIdentifier> filter = new HashSet<>();
+      for (Enumeration<MemberIdentifier> e = suspectedMemberIds.keys(); e
-    Set<GMSMember> failedRecipients;
+    Set<MemberIdentifier> failedRecipients;
