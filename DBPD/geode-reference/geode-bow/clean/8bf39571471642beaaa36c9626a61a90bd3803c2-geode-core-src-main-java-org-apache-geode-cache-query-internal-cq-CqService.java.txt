Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Constructs a new named continuous query, represented by an instance of
-   * CqQuery. The CqQuery is not executed, however, until the execute method
-   * is invoked on the CqQuery. The name of the query will be used
-   * to identify this query in statistics archival.
+   * Constructs a new named continuous query, represented by an instance of CqQuery. The CqQuery is
+   * not executed, however, until the execute method is invoked on the CqQuery. The name of the
+   * query will be used to identify this query in statistics archival.
-   * @param isDurable true if the CQ is durable 
+   * @param isDurable true if the CQ is durable
-   * @throws CqExistsException if a CQ by this name already exists on this
-   * client
+   * @throws CqExistsException if a CQ by this name already exists on this client
-   * @throws IllegalStateException if this method is called from a cache
-   *         server
+   * @throws IllegalStateException if this method is called from a cache server
-   * @throws CqException if failed to create cq, failure during creating  
-   *         managing cq metadata info.
-   *   E.g.: Query string should refer only one region, join not supported.
-   *         The query must be a SELECT statement.
-   *         DISTINCT queries are not supported.
-   *         Projections are not supported.
-   *         Only one iterator in the FROM clause is supported, and it must be a region path. 
-   *         Bind parameters in the query are not supported for the initial release.
+   * @throws CqException if failed to create cq, failure during creating managing cq metadata info.
+   *         E.g.: Query string should refer only one region, join not supported. The query must be
+   *         a SELECT statement. DISTINCT queries are not supported. Projections are not supported.
+   *         Only one iterator in the FROM clause is supported, and it must be a region path. Bind
+   *         parameters in the query are not supported for the initial release.
-  public abstract ClientCQ newCq(String cqName, String queryString,
-      CqAttributes cqAttributes, InternalPool pool, boolean isDurable)
+  public abstract ClientCQ newCq(String cqName, String queryString, CqAttributes cqAttributes,
+      InternalPool pool, boolean isDurable)
+   * 
-  public abstract CqQuery getClientCqFromServer(
-      ClientProxyMembershipID clientProxyId, String clientCqName);
+  public abstract CqQuery getClientCqFromServer(ClientProxyMembershipID clientProxyId,
+      String clientCqName);
+   * 
-   * Retrieve  all registered CQs
+   * Retrieve all registered CQs
-  public abstract Collection<? extends InternalCqQuery> getAllCqs(String regionName) throws CqException;
+  public abstract Collection<? extends InternalCqQuery> getAllCqs(String regionName)
+      throws CqException;
-  public abstract void executeAllRegionCqs(String regionName)
-      throws CqException;
+  public abstract void executeAllRegionCqs(String regionName) throws CqException;
+   * 
-  public abstract void closeCq(String cqName,
-      ClientProxyMembershipID clientProxyId) throws CqException;
+  public abstract void closeCq(String cqName, ClientProxyMembershipID clientProxyId)
+      throws CqException;
-  public abstract void closeAllCqs(boolean clientInitiated, Collection<? extends InternalCqQuery> cqs,
-      boolean keepAlive);
+  public abstract void closeAllCqs(boolean clientInitiated,
+      Collection<? extends InternalCqQuery> cqs, boolean keepAlive);
+   * 
+   * 
-  public abstract void closeClientCqs(ClientProxyMembershipID clientProxyId)
-      throws CqException;
+  public abstract void closeClientCqs(ClientProxyMembershipID clientProxyId) throws CqException;
+   * 
-  public abstract List<ServerCQ> getAllClientCqs(
-      ClientProxyMembershipID clientProxyId);
+  public abstract List<ServerCQ> getAllClientCqs(ClientProxyMembershipID clientProxyId);
+   * 
-  public abstract List<String> getAllDurableClientCqs(
-      ClientProxyMembershipID clientProxyId) throws CqException;
+  public abstract List<String> getAllDurableClientCqs(ClientProxyMembershipID clientProxyId)
+      throws CqException;
+   * 
-   * @param key 
+   * @param key
-      Object key, Object value, byte[] delta, QueueManager qManager,
-      EventID eventId);
+      Object key, Object value, byte[] delta, QueueManager qManager, EventID eventId);
-  public abstract void processEvents(CacheEvent event, Profile localProfile,
-      Profile[] profiles, FilterRoutingInfo frInfo) throws CqException;
-  
+  public abstract void processEvents(CacheEvent event, Profile localProfile, Profile[] profiles,
+      FilterRoutingInfo frInfo) throws CqException;
+
-  
+
-  
+
-  
+
-  
+
+   * 
-  
+
+   * 
-  
+
-  
+
-   * Executes the given CqQuery, if the CqQuery for that name is not there
-   * it registers the one and executes. This is called on the Server. 
+   * Executes the given CqQuery, if the CqQuery for that name is not there it registers the one and
+   * executes. This is called on the Server.
+   * 
-   * @param regionDataPolicy the data policy of the region associated with the
-   *        query.  This is only needed if manageEmptyRegions is true.
-   * @param emptyRegionsMap map of empty regions.    
+   * @param regionDataPolicy the data policy of the region associated with the query. This is only
+   *        needed if manageEmptyRegions is true.
+   * @param emptyRegionsMap map of empty regions.
-  public ServerCQ executeCq(String cqName, String queryString,
-      int cqState, ClientProxyMembershipID clientProxyId, 
-      CacheClientNotifier ccn, boolean isDurable, boolean manageEmptyRegions,
-      int regionDataPolicy, Map emptyRegionsMap) 
-    throws CqException, RegionNotFoundException, CqClosedException;
+  public ServerCQ executeCq(String cqName, String queryString, int cqState,
+      ClientProxyMembershipID clientProxyId, CacheClientNotifier ccn, boolean isDurable,
+      boolean manageEmptyRegions, int regionDataPolicy, Map emptyRegionsMap)
+      throws CqException, RegionNotFoundException, CqClosedException;
-   * Server side method.
-   * Closes non-durable CQs for the given client proxy id.
+   * Server side method. Closes non-durable CQs for the given client proxy id.
+   * 
-  public void closeNonDurableClientCqs(ClientProxyMembershipID clientProxyId)
-      throws CqException;
+  public void closeNonDurableClientCqs(ClientProxyMembershipID clientProxyId) throws CqException;
