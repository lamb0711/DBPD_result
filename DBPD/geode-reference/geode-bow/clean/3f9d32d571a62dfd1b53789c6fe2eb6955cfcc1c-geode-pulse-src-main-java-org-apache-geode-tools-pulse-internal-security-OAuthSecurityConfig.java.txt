GEODE-7851: Pulse Oauth Support (#4936)

* GEODE-7851: Pulse Oauth Support

- create an OauthSecurityConfig to configure spring using oauth
- add PULSE as an oauth-enabled-component, and if pulse is set to use
  oauth, set the OauthSecurityConfig as the active security profile
- use pulse.properties in the locator's working dir to externalize pulse
  authentication provider configuration

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
-import static org.springframework.security.config.Customizer.withDefaults;
-
+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
-  @Value("${pulse.oauth.provider}")
+  @Value("${pulse.oauth.providerId}")
+  @Value("${pulse.oauth.providerName}")
+  private String providerName;
+  @Bean
+  public LogoutSuccessHandler logoutHandler() {
+    return new LogoutHandler("/login");
+  }
+
+        .mvcMatchers("/pulseVersion", "/scripts/**", "/images/**", "/css/**", "/properties/**")
+        .permitAll()
+        .mvcMatchers("/dataBrowser*", "/getQueryStatisticsGridModel*")
+        .access("hasAuthority('SCOPE_CLUSTER:READ') and hasAuthority('SCOPE_DATA:READ')")
+        .mvcMatchers("/*")
+        .hasAuthority("SCOPE_CLUSTER:READ")
-        .oauth2Login(withDefaults());
+        .oauth2Login(oauth -> oauth.defaultSuccessUrl("/clusterDetail.html", true))
+        .exceptionHandling(exception -> exception.accessDeniedPage("/accessDenied.html"))
+        .logout(logout -> logout
+            .logoutUrl("/clusterLogout")
+            .logoutSuccessHandler(logoutHandler()))
+        .headers(header -> header
+            .frameOptions().deny()
+            .xssProtection(xss -> xss
+                .xssProtectionEnabled(true)
+                .block(true))
+            .contentTypeOptions())
+        .csrf().disable();
-    return new InMemoryClientRegistrationRepository(this.clientRegistration());
+    return new InMemoryClientRegistrationRepository(clientRegistration());
-        .clientId(clientId)
-        .clientSecret(clientSecret)
-        .scope("openid", "CLUSTER:READ", "CLUSTER:WRITE", "DATA:READ", "DATA:WRITE")
+        .clientId(clientId)
+        .clientSecret(clientSecret)
-        .clientName("Pulse")
+        // When Spring shows the login page, it displays a link to the OAuth provider's
+        // authorization URI. Spring uses the value passed to clientName() as the text for that
+        // link. We pass the providerName property here, to let the user know which OAuth provider
+        // they will be redirected to.
+        .clientName(providerName)
