GEODE-11: Keep results in collector unmodified

Earlier TopEntriesCollectorManager.reduce method was modifying the hits
collected in TopEntriesCollector. As a result calling getResults twice will
fail. The collected entry set needs to be preserved without making a copy.

-    
+
-    Comparator<List<EntryScore>> entryListComparator = new Comparator<List<EntryScore>>() {
+    Comparator<ListScanner> entryListComparator = new Comparator<ListScanner>() {
-      public int compare(List<EntryScore> l1, List<EntryScore> l2) {
-        EntryScore o1 = l1.get(0);
-        EntryScore o2 = l2.get(0);
+      public int compare(ListScanner l1, ListScanner l2) {
+        EntryScore o1 = l1.peek();
+        EntryScore o2 = l2.peek();
-    PriorityQueue<List<EntryScore>> entryListsPriorityQueue;
-    entryListsPriorityQueue = new PriorityQueue<List<EntryScore>>(collectors.size(), Collections.reverseOrder(entryListComparator));
+    PriorityQueue<ListScanner> entryListsPriorityQueue;
+    entryListsPriorityQueue = new PriorityQueue<ListScanner>(collectors.size(),
+        Collections.reverseOrder(entryListComparator));
-        entryListsPriorityQueue.add(((TopEntriesCollector) collector).getEntries().getHits());
+        entryListsPriorityQueue.add(new ListScanner(((TopEntriesCollector) collector).getEntries().getHits()));
-      List<EntryScore> list = entryListsPriorityQueue.remove();
-      EntryScore entry = list.remove(0);
+      ListScanner scanner = entryListsPriorityQueue.remove();
+      EntryScore entry = scanner.next();
-      if (list.size() > 0) {
-        entryListsPriorityQueue.add(list);
+      if (scanner.hasNext()) {
+        entryListsPriorityQueue.add(scanner);
+  /*
+   * Utility class to iterate on hits without modifying it
+   */
+  static class ListScanner {
+    private List<EntryScore> hits;
+    private int index = 0;
+
+    ListScanner(List<EntryScore> hits) {
+      this.hits = hits;
+    }
+
+    boolean hasNext() {
+      return index < hits.size();
+    }
+
+    EntryScore peek() {
+      return hits.get(index);
+    }
+
+    EntryScore next() {
+      return hits.get(index++);
+    }
+  }
+
