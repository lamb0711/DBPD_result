GEODE-4863: refactor jdbc commands to use this public cluster configuration api (#1776)

   * refactored jdbc connector commands to use public cc service
   * removed JdbcConnectorServiceXmlGenerator
   * removed RegionMappingBuilder & ConnectionConfigBuilder
   * if cc service is running then user can only alter whats available in CC
   * describe & List commands now list entries from cc service
   * converted some integration tests to junits
   * removed unwanted functions, tests

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>

-import org.apache.geode.connectors.jdbc.internal.ConnectionConfigBuilder;
-import org.apache.geode.connectors.jdbc.internal.ConnectionConfiguration;
-import org.apache.geode.connectors.jdbc.internal.RegionMapping;
-import org.apache.geode.connectors.jdbc.internal.RegionMappingBuilder;
+import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
-      ConnectionConfigBuilder connectionConfigBuilder = new ConnectionConfigBuilder()
-          .withName(attributes.getValue(JdbcConnectorServiceXmlParser.NAME))
-          .withUrl(attributes.getValue(JdbcConnectorServiceXmlParser.URL))
-          .withUser(attributes.getValue(JdbcConnectorServiceXmlParser.USER))
-          .withPassword(attributes.getValue(JdbcConnectorServiceXmlParser.PASSWORD))
-          .withParameters(parseParameters(attributes));
-      stack.push(connectionConfigBuilder);
+      ConnectorService.Connection connection = new ConnectorService.Connection();
+      connection.setName(attributes.getValue(JdbcConnectorServiceXmlParser.NAME));
+      connection.setUrl(attributes.getValue(JdbcConnectorServiceXmlParser.URL));
+      connection.setUser(attributes.getValue(JdbcConnectorServiceXmlParser.USER));
+      connection.setPassword(attributes.getValue(JdbcConnectorServiceXmlParser.PASSWORD));
+      connection.setParameters(parseParameters(attributes));
+      stack.push(connection);
-      ConnectionConfiguration config = ((ConnectionConfigBuilder) stack.pop()).build();
+      ConnectorService.Connection config = (ConnectorService.Connection) stack.pop();
-      RegionMappingBuilder mapping = new RegionMappingBuilder()
-          .withRegionName(attributes.getValue(JdbcConnectorServiceXmlParser.REGION))
-          .withConnectionConfigName(
-              attributes.getValue(JdbcConnectorServiceXmlParser.CONNECTION_NAME))
-          .withTableName(attributes.getValue(JdbcConnectorServiceXmlParser.TABLE))
-          .withPdxClassName(attributes.getValue(JdbcConnectorServiceXmlParser.PDX_CLASS))
-          .withPrimaryKeyInValue(
-              attributes.getValue(JdbcConnectorServiceXmlParser.PRIMARY_KEY_IN_VALUE));
+      ConnectorService.RegionMapping mapping = new ConnectorService.RegionMapping();
+      mapping.setRegionName(attributes.getValue(JdbcConnectorServiceXmlParser.REGION));
+      mapping.setConnectionConfigName(
+          attributes.getValue(JdbcConnectorServiceXmlParser.CONNECTION_NAME));
+      mapping.setTableName(attributes.getValue(JdbcConnectorServiceXmlParser.TABLE));
+      mapping.setPdxClassName(attributes.getValue(JdbcConnectorServiceXmlParser.PDX_CLASS));
+      mapping.setPrimaryKeyInValue(
+          Boolean.valueOf(attributes.getValue(JdbcConnectorServiceXmlParser.PRIMARY_KEY_IN_VALUE)));
-      RegionMapping mapping = ((RegionMappingBuilder) stack.pop()).build();
+      ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) stack.pop();
-      if (!(stack.peek() instanceof RegionMappingBuilder)) {
+      if (!(stack.peek() instanceof ConnectorService.RegionMapping)) {
-      RegionMappingBuilder mapping = (RegionMappingBuilder) stack.peek();
-      String fieldName = attributes.getValue(JdbcConnectorServiceXmlParser.FIELD_NAME);
-      String columnName = attributes.getValue(JdbcConnectorServiceXmlParser.COLUMN_NAME);
-      mapping.withFieldToColumnMapping(fieldName, columnName);
+      ConnectorService.RegionMapping mapping = (ConnectorService.RegionMapping) stack.peek();
+      mapping.getFieldMapping()
+          .add(new ConnectorService.RegionMapping.FieldMapping(
+              attributes.getValue(JdbcConnectorServiceXmlParser.FIELD_NAME),
+              attributes.getValue(JdbcConnectorServiceXmlParser.COLUMN_NAME)));
