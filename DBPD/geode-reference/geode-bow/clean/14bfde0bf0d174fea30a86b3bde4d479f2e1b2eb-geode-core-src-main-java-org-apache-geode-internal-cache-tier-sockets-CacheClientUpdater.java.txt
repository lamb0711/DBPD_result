Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingThread;
-public class CacheClientUpdater extends Thread implements ClientUpdater, DisconnectListener {
+public class CacheClientUpdater extends LoggingThread implements ClientUpdater, DisconnectListener {
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater_0_ABANDONED_WAIT_DUE_TO_CANCELLATION, this));
+        logger.warn("{}: abandoned wait due to cancellation.", this);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater_0_ABANDONED_WAIT_BECAUSE_IT_IS_NO_LONGER_CONNECTED,
-            this));
+        logger.warn("{}: abandoned wait because it is no longer connected",
+            this);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater_0_WAIT_TIMED_OUT_MORE_THAN_1_SECONDS,
-            new Object[] {this, MAX_CACHE_WAIT}));
+        logger.warn("{}: wait timed out (more than {} seconds)",
+            new Object[] {this, MAX_CACHE_WAIT});
-
-    super(LoggingThreadGroup.createThreadGroup("Client update thread"), name);
-    this.setDaemon(true);
+    super(name);
-        logger.warn(LocalizedMessage
-            .create(LocalizedStrings.CacheClientUpdater_0_CONNECTION_WAS_REFUSED, this));
+        logger.warn("{} connection was refused", this);
-        getSecurityLogger().warning(LocalizedStrings.CacheClientUpdater_0_SSL_NEGOTIATION_FAILED_1,
-            new Object[] {this, ex});
+        getSecurityLogger().warning(String.format("%s SSL negotiation failed. %s",
+            new Object[] {this, ex}));
-            LocalizedStrings.CacheClientUpdater_SSL_NEGOTIATION_FAILED_WITH_ENDPOINT_0
-                .toLocalizedString(location),
+            String.format("SSL negotiation failed with endpoint: %s",
+                location),
-            LocalizedStrings.CacheClientUpdater_0_SECURITY_EXCEPTION_WHEN_CREATING_SERVERTOCLIENT_COMMUNICATION_SOCKET_1,
-            new Object[] {this, ex});
+            String.format(
+                "%s: Security exception when creating server-to-client communication socket. %s",
+                new Object[] {this, ex}));
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater_0_CAUGHT_FOLLOWING_EXECPTION_WHILE_ATTEMPTING_TO_CREATE_A_SERVER_TO_CLIENT_COMMUNICATION_SOCKET_AND_WILL_EXIT_1,
-            new Object[] {this, e}), logger.isDebugEnabled() ? e : null);
+        logger.warn(String.format(
+            "%s: Caught following exception while attempting to create a server-to-client communication socket and will exit: %s",
+            new Object[] {this, e}),
+            logger.isDebugEnabled() ? e : null);
-        logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_CLASS_NOT_FOUND,
-            e.getMessage()));
+        logger.warn("Unable to load the class: {}",
+            e.getMessage());
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater_0_CAUGHT_FOLLOWING_EXECPTION_WHILE_ATTEMPTING_TO_CREATE_A_SERVER_TO_CLIENT_COMMUNICATION_SOCKET_AND_WILL_EXIT_1,
-            new Object[] {this, e}), logger.isDebugEnabled() ? e : null);
+        logger.warn(String.format(
+            "%s: Caught following exception while attempting to create a server-to-client communication socket and will exit: %s",
+            new Object[] {this, e}),
+            logger.isDebugEnabled() ? e : null);
-            logger.warn(LocalizedMessage
-                .create(LocalizedStrings.CacheClientUpdater_CLOSING_SOCKET_IN_0_FAILED, this), ioe);
+            logger.warn("Closing socket in {} failed", this, ioe);
-        logger.warn(
-            LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_NO_CACHE_EXITING, this));
+        logger.warn("{}: no cache (exiting)", this);
-          LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_HANDLE_A_MARKER
-              .toLocalizedString();
+          "The following exception occurred while attempting to handle a marker.";
-          LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_PUT_ENTRY_REGION_0_KEY_1_VALUE_2
-              .toLocalizedString(regionName, key, deserialize(valuePart.getSerializedForm()));
+          String.format(
+              "The following exception occurred while attempting to put entry (region: %s key: %s value: %s)",
+              regionName, key, deserialize(valuePart.getSerializedForm()));
-          LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_INVALIDATE_ENTRY_REGION_0_KEY_1
-              .toLocalizedString(regionName, key);
+          String.format(
+              "The following exception occurred while attempting to invalidate entry (region: %s key: %s)",
+              regionName, key);
-          LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_DESTROY_ENTRY_REGION_0_KEY_1
-              .toLocalizedString(regionName, key);
+          String.format(
+              "The following exception occurred while attempting to destroy entry (region: %s key: %s)",
+              regionName, key);
-          LocalizedStrings.CacheClientUpdater_CAUGHT_AN_EXCEPTION_WHILE_ATTEMPTING_TO_DESTROY_REGION_0
-              .toLocalizedString(regionName);
+          String.format("Caught an exception while attempting to destroy region %s",
+              regionName);
-          LocalizedStrings.CacheClientUpdater_CAUGHT_THE_FOLLOWING_EXCEPTION_WHILE_ATTEMPTING_TO_CLEAR_REGION_0
-              .toLocalizedString(regionName);
+          String.format("Caught the following exception while attempting to clear region %s",
+              regionName);
-          LocalizedStrings.CacheClientUpdater_CAUGHT_THE_FOLLOWING_EXCEPTION_WHILE_ATTEMPTING_TO_INVALIDATE_REGION_0
-              .toLocalizedString(regionName);
+          String.format("Caught the following exception while attempting to invalidate region %s.",
+              regionName);
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater_ERROR_WHILE_PROCESSING_THE_CQ_MESSAGE_PROBLEM_WITH_READING_MESSAGE_FOR_CQ_0,
-            cqCnt));
+        logger.warn(
+            "Error while processing the CQ Message. Problem with reading message for CQ# : {}",
+            cqCnt);
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.CacheClientUpdater_FAILED_TO_INVOKE_CQ_DISPATCHER_ERROR___0,
-          ex.getMessage()));
+      logger.warn("Failed to invoke CQ Dispatcher. Error :  {}",
+          ex.getMessage());
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater__0_IS_WAITING_FOR_1_TO_COMPLETE,
-            new Object[] {this, this.failedUpdater}));
+        logger.info("{} is waiting for {} to complete.",
+            new Object[] {this, this.failedUpdater});
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.CacheClientUpdater_0_HAS_COMPLETED_WAITING_FOR_1,
-            new Object[] {this, this.failedUpdater}));
+        logger.info("{} has completed waiting for {}",
+            new Object[] {this, this.failedUpdater});
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.CacheClientUpdater_0_READY_TO_PROCESS_MESSAGES, this));
+      logger.info("{} : ready to process messages.", this);
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.CacheClientUpdater_0_RECEIVED_AN_UNSUPPORTED_MESSAGE_TYPE_1,
-                  new Object[] {this, MessageType.getString(clientMessage.getMessageType())}));
+              logger.warn("{}: Received an unsupported message (type={})",
+                  new Object[] {this, MessageType.getString(clientMessage.getMessageType())});
-      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0__1__2,
+      logger.warn(String.format("%s : %s : %s",
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.Connection_SOCKET_0_IS_1_INSTEAD_OF_THE_REQUESTED_2,
-          new Object[] {type + " buffer size", actualBufferSize, requestedBufferSize}));
+      logger.info("Socket {} is {} instead of the requested {}.",
+          new Object[] {type + " buffer size", actualBufferSize, requestedBufferSize});
