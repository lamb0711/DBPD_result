Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import org.apache.geode.distributed.internal.DistributionConfig;
+  static final String ALWAYS_CONVERT_CLASSES_NAME =
+      DistributionConfig.GEMFIRE_PREFIX + "old-client-support.convert-all";
+
+  /** whether to always convert new package names to old on outgoing serialization */
+  static final boolean ALWAYS_CONVERT_CLASSES = Boolean.getBoolean(ALWAYS_CONVERT_CLASSES_NAME);
+
+  private final Map<String, String> oldClassNamesToNew = new ConcurrentHashMap<>();
+  private final Map<String, String> newClassNamesToOld = new ConcurrentHashMap<>();
+
-    return (OldClientSupportService)((InternalCache)cache).getService(OldClientSupportService.class);
+    return (OldClientSupportService) ((InternalCache) cache)
+        .getService(OldClientSupportService.class);
-    if (name.startsWith(GEMFIRE)) {
-      return GEODE + name.substring(GEMFIRE.length());
+    // tcpserver was moved to a different package in Geode.
+    String oldPackage = "com.gemstone.org.jgroups.stack.tcpserver";
+    String newPackage = "org.apache.geode.distributed.internal.tcpserver";
+    if (name.startsWith(oldPackage)) {
+      String cached = oldClassNamesToNew.get(name);
+      if (cached == null) {
+        cached = newPackage + name.substring(oldPackage.length());
+        oldClassNamesToNew.put(name, cached);
+      }
+      return cached;
-    return name;
+    return processClassName(name, GEMFIRE, GEODE, oldClassNamesToNew);
-    // tcpserver was moved to a different package in Geode.  
-    String oldPackage = "com.gemstone.org.jgroups.stack.tcpserver";
-    String newPackage = "org.apache.geode.distributed.internal.tcpserver";
-    if (name.startsWith(oldPackage)) {
-      return newPackage + name.substring(oldPackage.length());
-    }
-    if (name.startsWith(GEMFIRE)) {
-      return GEODE + name.substring(GEMFIRE.length());
-    }
-    return name;
+    return processIncomingClassName(name);
-    // tcpserver was moved to a different package in Geode
+    // tcpserver was moved to a different package
+    if (ALWAYS_CONVERT_CLASSES) {
+      return processClassName(name, GEODE, GEMFIRE, newClassNamesToOld);
+    }
-      VersionedDataOutputStream vout = (VersionedDataOutputStream)out;
+      VersionedDataOutputStream vout = (VersionedDataOutputStream) out;
-        if (name.startsWith(GEODE)) {
-          name = GEMFIRE + name.substring(GEODE.length());
-        }
+        return processClassName(name, GEODE, GEMFIRE, newClassNamesToOld);
-
-  /**
-   * translates the given exception into one that can be sent to an old GemFire client
-   * @param theThrowable the exception to convert
-   * @param clientVersion the version of the client
-   * @return the exception to give the client
-   */
+  @Override
-    
+
-    
+
-    
+
-    
+
+
+  private String processClassName(String p_className, String oldPackage, String newPackage,
+      Map<String, String> cache) {
+    String cached = cache.get(p_className);
+    if (cached != null) {
+      return cached;
+    }
+
+    String className = p_className;
+
+    if (className.startsWith(oldPackage)) {
+      className = newPackage + className.substring(oldPackage.length());
+
+    } else if (className.startsWith("[") && className.contains("[L" + oldPackage)) {
+      int idx = className.indexOf("[L") + 2;
+      className =
+          className.substring(0, idx) + newPackage + className.substring(idx, oldPackage.length());
+    }
+
+    if (className != p_className) {
+      cache.put(p_className, className);
+    }
+
+    return className;
+  }
+
+
