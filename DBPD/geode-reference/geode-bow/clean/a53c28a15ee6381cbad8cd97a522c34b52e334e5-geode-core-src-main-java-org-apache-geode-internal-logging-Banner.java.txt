GEODE-6122: Make log4j core optional (#2944)

* Add Logging ProviderAgent support for ServiceLoader
* Test for availability of Log4j Core before defaulting to Log4jAgent
* Change optional ProviderAgent methods to have default impls
* Extract LogLevelUpdateOccurs enum to top level class
* Extract LogLevelUpdateScope enum to top level class
* Move Banner to internal.logging package
* Break Banner's hard dependency on Log4J Core
* Improve javadocs
* Add field type to TestingOnly annotation
* Replace use of InternalLogWriter constants with LogWriterLevel enum

-package org.apache.geode.internal;
+package org.apache.geode.internal.logging;
-import static org.apache.geode.internal.Banner.BannerHeader.CLASS_PATH;
-import static org.apache.geode.internal.Banner.BannerHeader.COMMAND_LINE_PARAMETERS;
-import static org.apache.geode.internal.Banner.BannerHeader.COMMUNICATIONS_VERSION;
-import static org.apache.geode.internal.Banner.BannerHeader.CURRENT_DIR;
-import static org.apache.geode.internal.Banner.BannerHeader.HOME_DIR;
-import static org.apache.geode.internal.Banner.BannerHeader.LIBRARY_PATH;
-import static org.apache.geode.internal.Banner.BannerHeader.LICENSE_START;
-import static org.apache.geode.internal.Banner.BannerHeader.LOG4J2_CONFIGURATION;
-import static org.apache.geode.internal.Banner.BannerHeader.PROCESS_ID;
-import static org.apache.geode.internal.Banner.BannerHeader.SYSTEM_PROPERTIES;
-import static org.apache.geode.internal.Banner.BannerHeader.USER;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.CLASS_PATH;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.COMMAND_LINE_PARAMETERS;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.COMMUNICATIONS_VERSION;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.CURRENT_DIR;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.HOME_DIR;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.LIBRARY_PATH;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.LICENSE_START;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.LOG4J2_CONFIGURATION;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.PROCESS_ID;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.SYSTEM_PROPERTIES;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.USER;
-import org.apache.geode.internal.logging.ConfigurationInfo;
+import org.apache.geode.internal.GemFireVersion;
+import org.apache.geode.internal.OSProcess;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.VersionDescription;
+ *
+ * <p>
+ * Banner should only be accessed from the Logging package or from Logging tests.
-  private Banner() {
-    // everything is static so don't allow instance creation
+  private final String configurationInfo;
+
+  /**
+   * @deprecated Please use {@link Banner(String)} instead. Banner should only be accessed from the
+   *             Logging package or from Logging tests.
+   */
+  @Deprecated
+  public Banner() {
+    this(ConfigurationInfo.getConfigurationInfo());
-  private static void prettyPrintPath(String path, PrintWriter out) {
+  public Banner(final String configurationInfo) {
+    this.configurationInfo = configurationInfo;
+  }
+
+  public String getString() {
+    return getString(null);
+  }
+
+  /**
+   * Return a string containing the banner information.
+   *
+   * @param args possibly null list of command line arguments
+   */
+  public String getString(String[] args) {
+    StringWriter sw = new StringWriter();
+    PrintWriter pw = new PrintWriter(sw);
+    print(pw, args);
+    pw.close();
+    return sw.toString();
+  }
+
+  private void prettyPrintPath(String path, PrintWriter out) {
-  static void print(PrintWriter out, String args[]) {
+  private void print(PrintWriter out, String args[]) {
-      out.println("    " + ConfigurationInfo.getConfigurationInfo());
+      out.println("    " + configurationInfo);
-  private static int attemptToReadProcessId() {
+  private int attemptToReadProcessId() {
-  private static void printASFLicense(PrintWriter out) {
+  private void printASFLicense(PrintWriter out) {
-   * Return a string containing the banner information.
-   *
-   * @param args possibly null list of command line arguments
-   */
-  public static String getString(String[] args) {
-    StringWriter sw = new StringWriter();
-    PrintWriter pw = new PrintWriter(sw);
-    print(pw, args);
-    pw.close();
-    return sw.toString();
-  }
-
-  /**
