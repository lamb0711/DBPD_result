Merge remote-tracking branch 'origin/develop' into geode-6400

-import java.io.BufferedWriter;
-import java.io.FileWriter;
-import java.io.Writer;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.result.ErrorResultData;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-public class HistoryCommand extends InternalGfshCommand {
+public class HistoryCommand extends OfflineGfshCommand {
-  public Result history(
+  public ResultModel history(
-          help = CliStrings.HISTORY__CLEAR__HELP) Boolean clearHistory) {
+          help = CliStrings.HISTORY__CLEAR__HELP) Boolean clearHistory)
+      throws IOException {
-      Gfsh gfsh = Gfsh.getCurrentInstance();
-      ErrorResultData errorResultData;
-      StringBuilder contents = new StringBuilder();
-      Writer output = null;
+      Gfsh gfsh = getGfsh();
-      int historySize = gfsh.getHistorySize();
-      String historySizeString = String.valueOf(historySize);
-      int historySizeWordLength = historySizeString.length();
+      boolean hasFile = StringUtils.isNotBlank(saveHistoryTo);
+
+      File saveHistoryToFile = null;
+      if (hasFile) {
+        saveHistoryToFile = new File(saveHistoryTo);
+        if (saveHistoryToFile.exists()) {
+          return ResultModel.createError("File exists already");
+        }
+        if (saveHistoryToFile.isDirectory()) {
+          return ResultModel.createError(CliStrings.HISTORY__MSG__FILE_SHOULD_NOT_BE_DIRECTORY);
+        }
+      }
-      boolean flagForLineNumbers = !(saveHistoryTo != null && saveHistoryTo.length() > 0);
-      long lineNumber = 0;
+      ResultModel result = new ResultModel();
+      InfoResultModel histories = result.addInfo("history");
-          if (flagForLineNumbers) {
-            lineNumber++;
-            contents.append(String.format("%" + historySizeWordLength + "s  ", lineNumber));
+          if (hasFile) {
+            FileUtils.writeStringToFile(saveHistoryToFile, line + GfshParser.LINE_SEPARATOR,
+                "UTF-8", true);
+          } else {
+            histories.addLine(line);
-          contents.append(line);
-          contents.append(GfshParser.LINE_SEPARATOR);
-      try {
-        // write to a user file
-        if (saveHistoryTo != null && saveHistoryTo.length() > 0) {
-          File saveHistoryToFile = new File(saveHistoryTo);
-          output = new BufferedWriter(new FileWriter(saveHistoryToFile));
-
-          if (!saveHistoryToFile.exists()) {
-            errorResultData =
-                ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-                    .addLine(CliStrings.HISTORY__MSG__FILE_DOES_NOT_EXISTS);
-            return ResultBuilder.buildResult(errorResultData);
-          }
-          if (!saveHistoryToFile.isFile()) {
-            errorResultData =
-                ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-                    .addLine(CliStrings.HISTORY__MSG__FILE_SHOULD_NOT_BE_DIRECTORY);
-            return ResultBuilder.buildResult(errorResultData);
-          }
-          if (!saveHistoryToFile.canWrite()) {
-            errorResultData =
-                ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-                    .addLine(CliStrings.HISTORY__MSG__FILE_CANNOT_BE_WRITTEN);
-            return ResultBuilder.buildResult(errorResultData);
-          }
-
-          output.write(contents.toString());
-        }
-
-      } catch (IOException ex) {
-        return ResultBuilder
-            .createInfoResult("File error " + ex.getMessage() + " for file " + saveHistoryTo);
-      } finally {
-        try {
-          if (output != null) {
-            output.close();
-          }
-        } catch (IOException e) {
-          errorResultData = ResultBuilder.createErrorResultData()
-              .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine("exception in closing file");
-          return ResultBuilder.buildResult(errorResultData);
-        }
-      }
-      if (saveHistoryTo != null && saveHistoryTo.length() > 0) {
+      if (hasFile) {
-        return ResultBuilder.createInfoResult("Wrote successfully to file " + saveHistoryTo);
+        return ResultModel.createInfo("Wrote successfully to file " + saveHistoryTo);
-        return ResultBuilder.createInfoResult(contents.toString());
+        return result;
-  private Result executeClearHistory() {
-    Gfsh gfsh = Gfsh.getCurrentInstance();
-    gfsh.clearHistory();
-    return ResultBuilder.createInfoResult(CliStrings.HISTORY__MSG__CLEARED_HISTORY);
+  private ResultModel executeClearHistory() {
+    getGfsh().clearHistory();
+    return ResultModel.createInfo(CliStrings.HISTORY__MSG__CLEARED_HISTORY);
