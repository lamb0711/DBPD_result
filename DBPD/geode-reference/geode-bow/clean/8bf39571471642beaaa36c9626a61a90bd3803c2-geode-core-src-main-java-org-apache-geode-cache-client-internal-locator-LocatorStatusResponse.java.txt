Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  
+
-    }
-    catch (PidUnavailableException ignore) {
+    } catch (PidUnavailableException ignore) {
-  public LocatorStatusResponse initialize(final int locatorPort,
-                                          final String locatorHost,
-                                          final String locatorLogFile,
-                                          final String locatorName) {
+  public LocatorStatusResponse initialize(final int locatorPort, final String locatorHost,
+      final String locatorLogFile, final String locatorName) {
-    return Collections.unmodifiableList(ObjectUtils.defaultIfNull(jvmArgs, Collections.<String>emptyList()));
+    return Collections
+        .unmodifiableList(ObjectUtils.defaultIfNull(jvmArgs, Collections.<String>emptyList()));
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  
-  protected void writeLogFile(final DataOutput out)throws IOException {
+
+  protected void writeLogFile(final DataOutput out) throws IOException {
-  
-  protected void writeHost(final DataOutput out)throws IOException {
+
+  protected void writeHost(final DataOutput out) throws IOException {
-  
+
-  
-  protected void writeName(final DataOutput out)throws IOException {
+
+  protected void writeName(final DataOutput out) throws IOException {
-      && ObjectUtils.equals(this.getUptime(), that.getUptime())
-      && ObjectUtils.equals(this.getWorkingDirectory(), that.getWorkingDirectory())
-      && ObjectUtils.equals(this.getJvmArgs(), that.getJvmArgs())
-      && ObjectUtils.equals(this.getClasspath(), that.getClasspath())
-      && ObjectUtils.equals(this.getGemFireVersion(), that.getGemFireVersion())
-      && ObjectUtils.equals(this.getJavaVersion(), that.getJavaVersion());
+        && ObjectUtils.equals(this.getUptime(), that.getUptime())
+        && ObjectUtils.equals(this.getWorkingDirectory(), that.getWorkingDirectory())
+        && ObjectUtils.equals(this.getJvmArgs(), that.getJvmArgs())
+        && ObjectUtils.equals(this.getClasspath(), that.getClasspath())
+        && ObjectUtils.equals(this.getGemFireVersion(), that.getGemFireVersion())
+        && ObjectUtils.equals(this.getJavaVersion(), that.getJavaVersion());
