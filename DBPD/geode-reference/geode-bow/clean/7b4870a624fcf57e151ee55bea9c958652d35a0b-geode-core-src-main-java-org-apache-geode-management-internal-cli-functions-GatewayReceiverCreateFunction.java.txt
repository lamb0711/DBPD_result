GEODE-6811: be able to create GWR in management api. (#3687)

* add createGWR methods in the gateway controllers
* add GatewaReceiverConfigValidator
* add MemberValidator to validate same element can't exists in multiple groups which have common member
* add ConfigurationManager.get method to replace ConfigurationValidator.exists method for more conflict validation
-import joptsimple.internal.Strings;
+import org.apache.geode.cache.configuration.GatewayReceiverConfig;
-import org.apache.geode.cache.wan.GatewayReceiverFactory;
-import org.apache.geode.cache.wan.GatewayTransportFilter;
-import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.management.internal.configuration.realizers.GatewayReceiverRealizer;
-    GatewayReceiverFunctionArgs gatewayReceiverCreateArgs =
-        (GatewayReceiverFunctionArgs) context.getArguments();
+    Object[] gatewayReceiverCreateArgs =
+        (Object[]) context.getArguments();
+    GatewayReceiverConfig gatewayReceiverConfig =
+        (GatewayReceiverConfig) gatewayReceiverCreateArgs[0];
+    Boolean ifNotExist = (Boolean) gatewayReceiverCreateArgs[1];
-      if (gatewayReceiverCreateArgs.getIfNotExists()) {
+      if (ifNotExist) {
-      GatewayReceiver createdGatewayReceiver =
-          createGatewayReceiver(cache, gatewayReceiverCreateArgs);
+      GatewayReceiver createdGatewayReceiver = createGatewayReceiver(cache, gatewayReceiverConfig);
-  /** GatewayReceiver creation happens here. */
-      GatewayReceiverFunctionArgs gatewayReceiverCreateArgs)
-      throws IllegalAccessException, InstantiationException, ClassNotFoundException {
+      GatewayReceiverConfig gatewayReceiverConfig) {
+    GatewayReceiverRealizer receiverRealizer = new GatewayReceiverRealizer();
+    receiverRealizer.create(gatewayReceiverConfig, cache);
-    GatewayReceiverFactory gatewayReceiverFactory = cache.createGatewayReceiverFactory();
-
-    Integer startPort = gatewayReceiverCreateArgs.getStartPort();
-    if (startPort != null) {
-      gatewayReceiverFactory.setStartPort(startPort);
-    }
-
-    Integer endPort = gatewayReceiverCreateArgs.getEndPort();
-    if (endPort != null) {
-      gatewayReceiverFactory.setEndPort(endPort);
-    }
-
-    String bindAddress = gatewayReceiverCreateArgs.getBindAddress();
-    if (bindAddress != null) {
-      gatewayReceiverFactory.setBindAddress(bindAddress);
-    }
-
-    Integer maxTimeBetweenPings = gatewayReceiverCreateArgs.getMaximumTimeBetweenPings();
-    if (maxTimeBetweenPings != null) {
-      gatewayReceiverFactory.setMaximumTimeBetweenPings(maxTimeBetweenPings);
-    }
-
-    Integer socketBufferSize = gatewayReceiverCreateArgs.getSocketBufferSize();
-    if (socketBufferSize != null) {
-      gatewayReceiverFactory.setSocketBufferSize(socketBufferSize);
-    }
-
-    Boolean manualStart = gatewayReceiverCreateArgs.isManualStart();
-    if (manualStart != null) {
-      gatewayReceiverFactory.setManualStart(manualStart);
-    }
-
-    String[] gatewayTransportFilters = gatewayReceiverCreateArgs.getGatewayTransportFilters();
-    if (gatewayTransportFilters != null) {
-      for (String gatewayTransportFilter : gatewayTransportFilters) {
-        gatewayReceiverFactory.addGatewayTransportFilter(
-            (GatewayTransportFilter) newInstance(gatewayTransportFilter));
-      }
-    }
-
-    String hostnameForSenders = gatewayReceiverCreateArgs.getHostnameForSenders();
-    if (hostnameForSenders != null) {
-      gatewayReceiverFactory.setHostnameForSenders(hostnameForSenders);
-    }
-    return gatewayReceiverFactory.create();
-  }
-
-
-  private Object newInstance(String className)
-      throws ClassNotFoundException, IllegalAccessException, InstantiationException {
-    if (Strings.isNullOrEmpty(className)) {
-      return null;
-    }
-
-    return ClassPathLoader.getLatest().forName(className).newInstance();
+    return cache.getGatewayReceivers().iterator().next();
