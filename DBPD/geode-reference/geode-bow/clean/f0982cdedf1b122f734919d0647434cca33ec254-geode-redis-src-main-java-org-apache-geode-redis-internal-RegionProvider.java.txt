Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
-import java.util.Set;
-   * all Regions created. The mapping is a {@link String} key which is the name of the {@link
-   * Region} created to hold the data to the RedisDataType it contains.
+   * all Regions created. The mapping is a {@link String} key which is the name of the
+   * {@link Region} created to hold the data to the RedisDataType it contains.
-  private final Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> hashRegion;
-  private final Region<ByteArrayWrapper, Set<ByteArrayWrapper>> setRegion;
-
-      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut,
-      Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> hashRegion,
-      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> setRegion) {
-
-    this(stringsRegion, hLLRegion, redisMetaRegion, expirationsMap, expirationExecutor,
-        defaultShortcut, hashRegion, setRegion, GemFireCacheImpl.getInstance());
-  }
-
-  public RegionProvider(Region<ByteArrayWrapper, ByteArrayWrapper> stringsRegion,
-      Region<ByteArrayWrapper, HyperLogLogPlus> hLLRegion,
-      KeyRegistrar redisMetaRegion,
-      ConcurrentMap<ByteArrayWrapper, ScheduledFuture<?>> expirationsMap,
-      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut,
-      Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> hashRegion,
-      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> setRegion, Cache cache) {
-    if (stringsRegion == null || hLLRegion == null || redisMetaRegion == null) {
+      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut) {
+    if (stringsRegion == null || hLLRegion == null || redisMetaRegion == null)
-    }
-    this.hashRegion = hashRegion;
-    this.setRegion = setRegion;
-    this.cache = cache;
+    this.cache = GemFireCacheImpl.getInstance();
-    if (key == null) {
-      return null;
-    }
-
-
-      if (lock != null) {
-        locked = lock.tryLock();
-      }
+      locked = lock.tryLock();
-    if (type == RedisDataType.REDIS_PROTECTED) {
+    if (type == null || type == RedisDataType.REDIS_PROTECTED)
-    }
-        } else if (type == RedisDataType.REDIS_LIST) {
-          return this.destroyRegion(key, type);
-        } else if (type == RedisDataType.REDIS_SET) {
-          // remove the set
-          this.setRegion.remove(key);
-          return true;
-        } else if (type == RedisDataType.REDIS_HASH) {
-          // Check hash
-          this.hashRegion.remove(key);
-          return true;
-          return false;
+          return destroyRegion(key, type);
-        if (cancelExpiration) {
+        if (cancelExpiration)
-        } else {
+        else
-        }
-        if (lock != null) {
+        if (lock != null)
-        }
-    if (type == null || type == RedisDataType.REDIS_STRING || type == RedisDataType.REDIS_HLL) {
+    if (type == null || type == RedisDataType.REDIS_STRING || type == RedisDataType.REDIS_HLL)
-    }
-    if (r != null) {
+    if (r != null)
-    }
-          if (r == null) {
+          if (r == null)
-          }
-
-    String regionName = key.toString();
-          // without context
+                                                                                // without context
-
-              r = createRegionGlobally(regionName);
-
+              r = createRegionGlobally(stringKey);
-            if (hasTransaction) {
+            if (hasTransaction)
-            }
-  @SuppressWarnings("rawtypes")
-    if (r != null) {
+    if (r != null)
-    }
-  /**
-   * @return the hashRegion
-   */
-  public Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> getHashRegion() {
-    return hashRegion;
-  }
-
-  /**
-   * @return the setRegion
-   */
-  public Region<ByteArrayWrapper, Set<ByteArrayWrapper>> getSetRegion() {
-    return setRegion;
-  }
-
-    if (type == null) {
+    if (type == null)
-    }
-    if (!canceled) {
+    if (!canceled)
-    }
-    if (type == null) {
+    if (type == null)
-    }
-    if (future == null) {
+    if (future == null)
-    }
