Rename and remove parameters for InternalResourceManager.runWhenStartupTasksComplete

- Refactor InternalResourceManager.runWhenStartupTasksComplete to return the allOf CompletableFuture
- Move the responsibility for chaining the completion and exception actions to ServerLauncher.awaitStartupTasks

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>

+import java.util.Objects;
-import java.util.function.Consumer;
+  /**
+   * Adds a task that represents an asynchronous action during startup
+   *
+   * @param startupTask the CompletableFuture startup task
+   */
+    Objects.requireNonNull(startupTask);
-  // TODO Aaron rename and remove parameters
-  public CompletableFuture<Void> runWhenStartupTasksComplete(Runnable runnable,
-      Consumer<Throwable> exceptionAction) {
-    CompletableFuture<Void> startupTasksCompleted =
-        CompletableFuture.allOf(startupTasks.toArray(new CompletableFuture[0]))
-            .thenRun(runnable)
-            .exceptionally((throwable) -> {
-              exceptionAction.accept(throwable);
-              return null;
-            });
-
+  /**
+   * Clears the startup tasks and returns a CompletableFuture that completes when all of the startup
+   * tasks complete.
+   *
+   * @return a CompletableFuture that completes when all of the startup tasks complete
+   */
+  public CompletableFuture<Void> allOfStartupTasks() {
+    CompletableFuture[] completableFutures = startupTasks.toArray(new CompletableFuture[0]);
-
-    return startupTasksCompleted;
+    return CompletableFuture.allOf(completableFutures);
