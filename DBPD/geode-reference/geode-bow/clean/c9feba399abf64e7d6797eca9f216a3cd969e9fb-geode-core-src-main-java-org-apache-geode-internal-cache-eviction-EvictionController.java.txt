GEODE-4299: refactor eviction (#1290)

GEODE-4299: refactor eviction

The EvictionController classes are no longer Serializable nor Cloneable. These internal classes used to be external and needed to be these things in the past because they were stored in the configuration. But they no longer are so these interfaces were removed for clarity.
The EvictionController classes are no longer responsible for creating InternalEvictionStatistics. Instead the other entities it depends on are passed in to its constructor.

The only class with an EvictionController instance is now VMLRURegionMap which makes the code easier to understand and reduces the number of inter-module dependencies.

renamed internalSetMaximum to setMaximum on EvictionAttributesImpl

AbstractBucketRegionQueue no longer uses EvictionStatistics to notify itself that it removed some objects from the queue. So it no longer needs to access all the EvictionStatistics.

AbstractLRURegionMap has been moved to VMLRURegionMap
Casts to AbstractLRURegionMap have been removed by added additional methods to RegionMap.

new EvictableRegion interface make clear the things a region implementation needs to do/provide for the eviction implementation

EvictionAttributesMutator is now implemented by the dedicated class EvictionAttributesMutatorImpl

close and clear on RegionMap now take a BucketRegion parameter so that the eviction classes do not need to keep track of the BucketRegion.

EvictionList no longer does some of the things it did before that should have been the responsibility of the EvictionController. Now the EvictionList is given the EvictionController it should defer to. The EvictionListBuilder has been simplified since EvictionList now only needs a controller.

The eviction classes that track statistics have been refactored to be clearer. Now the EvictionStats interface is implemented by classes that provide vsd type stats. The EvictionCounters interface is implemented by a class that wraps EvictionStats and provides atomics for some of them.* Removed old code that made the EvictionController classes
Serializable, Declarable, and Clonable.

-import org.apache.geode.StatisticsFactory;
-import org.apache.geode.StatisticsType;
-import org.apache.geode.cache.CacheCallback;
-import org.apache.geode.cache.Region;
+import org.apache.geode.internal.cache.BucketRegion;
-public interface EvictionController extends CacheCallback {
+public interface EvictionController {
-  int entrySize(Object key, Object value) throws IllegalArgumentException;
+  int entrySize(Object key, Object value);
-  /** setup stats for this LRU type, if reset is true, initialize counter on stats to zero. */
-  EvictionStatistics initStats(Object region, StatisticsFactory statsFactory);
-
-  EvictionStatistics getStatistics();
+  EvictionCounters getCounters();
-   * Returns the statistics for this LRU algorithm
-   */
-  StatisticsType getStatisticsType();
-
-  /**
-   * Returns the name of the statistics for this LRU algorithm
-   */
-  String getStatisticsName();
-
-  /**
-   * Returns the id of the "limit" statistic for this LRU algorithm's statistics
-   */
-  int getLimitStatId();
-
-  /**
-   * Returns the id of the "counter" statistic for this LRU algorithm's statistics.
-   */
-  int getCountStatId();
-
-  /**
-   * Returns the id of the "evictions" statistic for this LRU algorithm's statistics.
-   */
-  int getEvictionsStatId();
-
-  /**
-   * Returns the id of the "destroys" statistic for this LRU algorithm's statistics.
-   */
-  int getDestroysStatId();
-
-  /**
-   * Returns the id of the "destroysLimit" statistic for this LRU algorithm's statistics
-   */
-  int getDestroysLimitStatId();
-
-  /**
-   * Returns the id of the "evaluations" statistic for this LRU algorithm's statistics.
-   */
-  int getEvaluationsStatId();
-
-  /**
-   * Returns the id of the "greedyReturns" statistic for this LRU algorithm's statistics
-   *
-   * @return the id
-   */
-  int getGreedyReturnsStatId();
-
-  /**
-  boolean mustEvict(EvictionStatistics stats, InternalRegion region, int delta);
+  boolean mustEvict(EvictionCounters stats, InternalRegion region, int delta);
-  boolean lruLimitExceeded(EvictionStatistics stats, DiskRegionView diskRegionView);
-
-  void setBucketRegion(Region region);
+  boolean lruLimitExceeded(EvictionCounters stats, DiskRegionView diskRegionView);
+
+  void close();
+
+  void closeBucket(BucketRegion bucketRegion);
+
+  void setPerEntryOverhead(int entryOverhead);
+
