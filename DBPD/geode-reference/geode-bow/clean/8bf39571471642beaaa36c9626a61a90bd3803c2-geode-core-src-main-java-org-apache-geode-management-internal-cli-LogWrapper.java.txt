Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * NOTE: Should be used only in
- * 1. gfsh process
- * 2. on a Manager "if" log is required to be sent back to gfsh too. For
- *    logging only on manager use, cache.getLogger()
+ * NOTE: Should be used only in 1. gfsh process 2. on a Manager "if" log is required to be sent back
+ * to gfsh too. For logging only on manager use, cache.getLogger()
-      //TODO - Abhishek how to set different log levels for different handlers???
+      // TODO - Abhishek how to set different log levels for different handlers???
-                                                  config.getLogFileSizeLimit(),
-                                                  config.getLogFileCount(),
-                                                  true /*append*/);
+            config.getLogFileSizeLimit(), config.getLogFileCount(), true /* append */);
-  private static void addDefaultConsoleHandler(Logger logger, String errorMessage, String logFilePath) {
+  private static void addDefaultConsoleHandler(Logger logger, String errorMessage,
+      String logFilePath) {
-    System.err.println("ERROR: Could not log to file: " + logFilePath + ". Reason: " + errorMessage);
+    System.err
+        .println("ERROR: Could not log to file: " + logFilePath + ". Reason: " + errorMessage);
-      Thread.sleep(3000); //sleep for 3 secs for the message to appear
-    } catch (InterruptedException ignore) {}
+      Thread.sleep(3000); // sleep for 3 secs for the message to appear
+    } catch (InterruptedException ignore) {
+    }
-   * Make logger null when the singleton (which was referred by INSTANCE) gets
-   * garbage collected. Makes an attempt at removing associated {@link Handler}s
-   * of the {@link Logger}.
+   * Make logger null when the singleton (which was referred by INSTANCE) gets garbage collected.
+   * Makes an attempt at removing associated {@link Handler}s of the {@link Logger}.
+
-      return logger.getLevel();
+    return logger.getLevel();
-  //TODO - Abhishek - ideally shouldn't be exposed outside.
-  /*package*/ Logger getLogger() {
+  // TODO - Abhishek - ideally shouldn't be exposed outside.
+  /* package */ Logger getLogger() {
-  //TODO - Abhishek - Check whether we can use GemFireLevel.ERROR
-//  public boolean errorEnabled() {
-//    return severeEnabled();
-//  }
-//
-//  public void error(String message) {
-//    logger.severe(message);
-//  }
-//
-//  public void error(String message, Throwable t) {
-//    logger.log(Level.SEVERE, message, t);
-//  }
+  // TODO - Abhishek - Check whether we can use GemFireLevel.ERROR
+  // public boolean errorEnabled() {
+  // return severeEnabled();
+  // }
+  //
+  // public void error(String message) {
+  // logger.severe(message);
+  // }
+  //
+  // public void error(String message, Throwable t) {
+  // logger.log(Level.SEVERE, message, t);
+  // }
-          pw.println(LocalizedStrings.GemFireFormatter_IGNORING_THE_FOLLOWING_EXCEPTION.toLocalizedString());
+          pw.println(LocalizedStrings.GemFireFormatter_IGNORING_THE_FOLLOWING_EXCEPTION
+              .toLocalizedString());
-      } catch (java.io.IOException ignore) {}
+      } catch (java.io.IOException ignore) {
+      }
-        char endChar = target.charAt(end-1);
+        char endChar = target.charAt(end - 1);
-          endChar = target.charAt(end-1);
+          endChar = target.charAt(end - 1);
-          if (wordEnd > 0 && target.charAt(wordEnd-1) == '\r') {
+          if (wordEnd > 0 && target.charAt(wordEnd - 1) == '\r') {
-      CommandResponseWriter responseWriter = CommandExecutionContext.getAndCreateIfAbsentCommandResponseWriter();
+      CommandResponseWriter responseWriter =
+          CommandExecutionContext.getAndCreateIfAbsentCommandResponseWriter();
-    public void flush() {
-    }
+    public void flush() {}
-    public void close() throws SecurityException {
-    }
+    public void close() throws SecurityException {}
