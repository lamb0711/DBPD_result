Merge branch 'release/1.0.0-incubating.M3'

-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.RejectedExecutionException;
-import java.util.concurrent.atomic.AtomicLong;
-
-import org.apache.logging.log4j.Logger;
-
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import org.apache.logging.log4j.Logger;
+
+import java.util.*;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicLong;
-          "gemfire.DLockService.DLockGrantor.debugSuspendLock"); 
+          DistributionConfig.GEMFIRE_PREFIX + "DLockService.DLockGrantor.debugSuspendLock");
-   * @guarded.By grantTokens
+   * guarded.By grantTokens
-   * @guarded.By this
+   * guarded.By this
-   * @guarded.By batchLocks
+   * guarded.By batchLocks
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #acquireDestroyReadLock(long)}
+   * guarded.By {@link #acquireDestroyReadLock(long)}
-   * @guarded.By {@link #acquireDestroyReadLock(long)}
+   * guarded.By {@link #acquireDestroyReadLock(long)}
-   * @guarded.By {@link #acquireDestroyWriteLock(long)}
+   * guarded.By {@link #acquireDestroyWriteLock(long)}
-   * @guarded.By {@link #acquireDestroyWriteLock(long)}
+   * guarded.By {@link #acquireDestroyWriteLock(long)}
-   * @guarded.By {@link #grantTokens}
+   * guarded.By {@link #grantTokens}
-   * @guarded.By {@link #grantTokens}
+   * guarded.By {@link #grantTokens}
-   * @guarded.By {@link #grantTokens} and grantToken
+   * guarded.By {@link #grantTokens} and grantToken
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-   * @guarded.By {@link #suspendLock}
+   * guarded.By {@link #suspendLock}
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-     * @guarded.By this
+     * guarded.By this
-        if (stopper.cancelInProgress() != null) {
+        if (stopper.isCancelInProgress()) {
-      if (distMgr.getCancelCriterion().cancelInProgress() != null) {
+      if (distMgr.getCancelCriterion().isCancelInProgress()) {
