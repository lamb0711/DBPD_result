GEODE-2267: enable gfsh to download file from http connection (GEODE-2418)

-    DateTimeFormatter dateTimeFormatter =  DateTimeFormatter.ofPattern(ONLY_DATE_FORMAT);
+    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(ONLY_DATE_FORMAT);
-    DateTimeFormatter dateTimeFormatter =  DateTimeFormatter.ofPattern(ONLY_DATE_FORMAT);
+    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(ONLY_DATE_FORMAT);
-    String messageAfterCutoffTime = "[this message should not show up since it is after cutoffTime]";
-    LogLine logLineAfterCutoffTime = new LogLine(messageAfterCutoffTime, "info",  true);
+    String messageAfterCutoffTime =
+        "[this message should not show up since it is after cutoffTime]";
+    LogLine logLineAfterCutoffTime = new LogLine(messageAfterCutoffTime, "info", true);
-    DateTimeFormatter dateTimeFormatter =  DateTimeFormatter.ofPattern(FORMAT);
+    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(FORMAT);
-    commandStringBuilder.addOption("start-time", dateTimeFormatter.format(cutoffTime.minusHours(1)));
+    commandStringBuilder.addOption("start-time",
+        dateTimeFormatter.format(cutoffTime.minusHours(1)));
-    CommandResult result = gfshConnector.executeAndVerifyCommand(
-        "export logs --log-level=info --only-log-level=false --dir=" + lsRule.getTempFolder()
-            .getRoot().getCanonicalPath());
+    CommandResult result = gfshConnector
+        .executeAndVerifyCommand("export logs --log-level=info --only-log-level=false --dir="
+            + lsRule.getTempFolder().getRoot().getCanonicalPath());
-    CommandResult result = gfshConnector.executeAndVerifyCommand(
-        "export logs --log-level=info --only-log-level=true --dir=" + lsRule.getTempFolder()
-            .getRoot().getCanonicalPath());
+    CommandResult result = gfshConnector
+        .executeAndVerifyCommand("export logs --log-level=info --only-log-level=true --dir="
+            + lsRule.getTempFolder().getRoot().getCanonicalPath());
-    CommandResult result = gfshConnector.executeAndVerifyCommand(
-        "export logs  --dir=" + "someDir" /*  lsRule.getTempFolder().getRoot().getCanonicalPath() */);
+    CommandResult result = gfshConnector.executeAndVerifyCommand("export logs  --dir="
+        + "someDir" /* lsRule.getTempFolder().getRoot().getCanonicalPath() */);
-@Test
-public void exportLogsRegionIsCleanedUpProperly() throws IOException, ClassNotFoundException {
+  @Test
+  public void exportLogsRegionIsCleanedUpProperly() throws IOException, ClassNotFoundException {
-}
+  }
-  public void verifyZipFileContents(Set<String> acceptedLogLevels)
-      throws IOException {
+  public void verifyZipFileContents(Set<String> acceptedLogLevels) throws IOException {
-        .filter((Member aMember) -> aMember.getName().equals(memberName))
-        .findFirst()
-        .get();
+        .filter((Member aMember) -> aMember.getName().equals(memberName)).findFirst().get();
-    String logFileContents =
-        FileUtils.readLines(logFileForMember, Charset.defaultCharset()).stream()
-            .collect(joining("\n"));
+    String logFileContents = FileUtils.readLines(logFileForMember, Charset.defaultCharset())
+        .stream().collect(joining("\n"));
-      boolean shouldExpectLogLine = acceptedLogLevels.contains(logLine.level) && !logLine.shouldBeIgnoredDueToTimestamp;
+      boolean shouldExpectLogLine =
+          acceptedLogLevels.contains(logLine.level) && !logLine.shouldBeIgnoredDueToTimestamp;
-    assertThat(zipFilesInDir).describedAs(filesInDir.stream().map(File::getAbsolutePath).collect(joining(","))).hasSize(1);
+    assertThat(zipFilesInDir)
+        .describedAs(filesInDir.stream().map(File::getAbsolutePath).collect(joining(",")))
+        .hasSize(1);
