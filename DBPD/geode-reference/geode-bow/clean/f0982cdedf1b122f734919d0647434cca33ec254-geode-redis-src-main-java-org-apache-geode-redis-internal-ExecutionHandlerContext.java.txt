Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
+ *
+ *
-  private final RedisLockService hashLockService;
-  private final RedisLockService setLockService;
+                                                                                          // total
-   * @param server Instance of the server it is attached to, only used so that any execution
-   *        can initiate a shutdwon
+   * @param server Instance of the server it is attached to, only used so that any execution can
+   *        initiate a shutdwon
-      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar,
-      PubSub pubSub,
-      RedisLockService hashLockService,
-      RedisLockService setLockService) {
+      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar, PubSub pubSub) {
-    this.hashLockService = hashLockService;
-    this.setLockService = setLockService;
-    if (ch == null || cache == null || regionProvider == null || server == null) {
+    if (ch == null || cache == null || regionProvider == null || server == null)
-    }
-
-  }
-
-  public RedisLockService getHashLockService() {
-    return this.hashLockService;
-  }
-
-  public RedisLockService getSetLockService() {
-    return this.setLockService;
-    try {
-      Command command = (Command) msg;
-      logger.info("Executing Redis command: {}", command);
-      executeCommand(ctx, command);
-    } catch (Exception e) {
-      logger.error(e);
-      throw e;
-    }
-
+    Command command = (Command) msg;
+    logger.info("Executing Redis command: {}", command);
+    executeCommand(ctx, command);
-    if (cause instanceof RedisDataTypeMismatchException) {
+    if (cause instanceof RedisDataTypeMismatchException)
-    } else if (cause instanceof DecoderException
-        && cause.getCause() instanceof RedisCommandParserException) {
+    else if (cause instanceof DecoderException
+        && cause.getCause() instanceof RedisCommandParserException)
-    } else if (cause instanceof RegionCreationException) {
+    else if (cause instanceof RegionCreationException) {
-    } else if (cause instanceof InterruptedException || cause instanceof CacheClosedException) {
+    } else if (cause instanceof InterruptedException || cause instanceof CacheClosedException)
-    } else if (cause instanceof IllegalStateException) {
+    else if (cause instanceof IllegalStateException) {
-      if (hasTransaction() && !(exec instanceof TransactionExecutor)) {
+      if (hasTransaction() && !(exec instanceof TransactionExecutor))
-      } else {
+      else
-      }
-        logger.error(e);
-
-            || e.getCause() instanceof QueryInvocationTargetException) {
+            || e.getCause() instanceof QueryInvocationTargetException)
-        }
-        if (r != null) {
+        if (r != null)
-        }
-    if (this.transactionQueue == null) {
+    if (this.transactionQueue == null)
-    }
+   *
+   *
+   *
