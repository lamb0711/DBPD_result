GEODE-4362: view preparation throws uncaught RuntimeException

The problem was happening when a new member joined with a coordinator that
suddenly shuts down before other members have been told to install the
new membership view.  They've received a "prepare for view change" message
containing the new view but have not been told to commit that change.

Another member then becomes coordinator and sees that there was a new member
in the prepared view.  It picks this up and adds it to the new view it
sends out.

The problem was that the public encryption keys of the members weren't
being transferred from the old view to the new view and when looking for
public keys we were fishing them out of GMSEncrypt instead of getting
them from the membership view.  This caused an NPE to be thrown when trying
to fish out the public key of the new member - GMSEncrypt didn't know about
this new member because the view containing it was never installed - it
was only prepared.

The fix is to transfer the public keys from the old view to the new one and
to look for public keys in the view instead of GMSEncrypt.

This closes #1520

-    // checkHostName();
-  // private void checkHostName() {
-  // // bug #44858: debug method to find who is putting a host name instead of addr into an ID
-  // if (!SocketCreator.resolve_dns
-  // && this.hostName != null && this.hostName.length() > 0
-  // && !Character.isDigit(this.hostName.charAt(0))) {
-  // throw new RuntimeException("found hostname that doesn't start with a digit: " + this.hostName);
-  // }
-  // }
-
-   * Returns this member's unique tag (such as randomly generated bytes) or null if no unique tag
-   * was created.
-   */
-  public String getUniqueTag() {
-    return this.uniqueTag;
-  }
-
-  /**
-    // if (dcPort > 0 && vmKind != DistributionManager.LONER_DM_TYPE) {
-    // sb.append("/");
-    // sb.append(Integer.toString(dcPort));
-    // }
-
-  /** drop the cached toString rep of this ID */
-  public void dropCachedString() {
-    this.cachedToString = null;
-  }
-
-  /*
-   * if (this.ipAddr == null) { return "<null>"; } else { StringBuffer sb = new StringBuffer();
-   * InetAddress addr = this.ipAddr.getIpAddress(); if(addr.isMulticastAddress()) {
-   * sb.append(addr.getHostAddress()); } else { appendShortName(addr.getHostName(), sb); } if
-   * (this.vmPid != 0) { sb.append("("); sb.append(this.vmPid); sb.append(")"); } sb.append(":");
-   * sb.append(this.ipAddr.getPort()); return sb.toString(); } }
-   *
-   * // Helper method for getId()... copied from IpAddress. private void appendShortName(String
-   * hostname, StringBuffer sb) { if (hostname == null) return; int index = hostname.indexOf('.');
-   * if(index > 0 && !Character.isDigit(hostname.charAt(0))) { sb.append(hostname.substring(0,
-   * index)); } else { sb.append(hostname); } }
-   */
-      return "InternalDistrubtedMemberWrapper [mbr=" + mbr + "]";
+      return "InternalDistributedMemberWrapper [mbr=" + mbr + "]";
