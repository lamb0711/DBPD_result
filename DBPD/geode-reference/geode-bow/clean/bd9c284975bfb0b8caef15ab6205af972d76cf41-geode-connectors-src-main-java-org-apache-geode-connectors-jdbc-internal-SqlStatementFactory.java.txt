GEODE-6194: add composite keys to jdbc (#3015)

Multiple --id column names can now be specified on "create jdbc-mapping"
using a comma separated list. 
The key object itself must then be a JSON string whose names are
the corresponding pdx field name for each id column name. 
The extension team is looking into changing composite keys for both GGC and JDBC
to something other than JSON.

+import java.util.Iterator;
+import java.util.stream.Stream;
+
-    ColumnData keyCV = entryColumnData.getEntryKeyColumnData();
-    return "SELECT * FROM " + quoteIdentifier(tableName) + " WHERE "
-        + quoteIdentifier(keyCV.getColumnName()) + " = ?";
+    return addKeyColumnsToQuery(entryColumnData,
+        new StringBuilder("SELECT * FROM " + quoteIdentifier(tableName)));
-    ColumnData keyCV = entryColumnData.getEntryKeyColumnData();
-    return "DELETE FROM " + quoteIdentifier(tableName) + " WHERE "
-        + quoteIdentifier(keyCV.getColumnName()) + " = ?";
+    return addKeyColumnsToQuery(entryColumnData,
+        new StringBuilder("DELETE FROM " + quoteIdentifier(tableName)));
+  }
+
+  private String addKeyColumnsToQuery(EntryColumnData entryColumnData, StringBuilder queryBuilder) {
+    queryBuilder.append(" WHERE ");
+    Iterator<ColumnData> iterator = entryColumnData.getEntryKeyColumnData().iterator();
+    while (iterator.hasNext()) {
+      ColumnData keyColumn = iterator.next();
+      boolean onLastColumn = !iterator.hasNext();
+      queryBuilder.append(quoteIdentifier(keyColumn.getColumnName())).append(" = ?");
+      if (!onLastColumn) {
+        queryBuilder.append(" AND ");
+      }
+    }
+    return queryBuilder.toString();
-    StringBuilder query = new StringBuilder("UPDATE " + quoteIdentifier(tableName) + " SET ");
+    StringBuilder query =
+        new StringBuilder("UPDATE ").append(quoteIdentifier(tableName)).append(" SET ");
-
-    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
-    query.append(" WHERE ");
-    query.append(quoteIdentifier(keyColumnData.getColumnName()));
-    query.append(" = ?");
-
-    return query.toString();
+    return addKeyColumnsToQuery(entryColumnData, query);
-        new StringBuilder("INSERT INTO " + quoteIdentifier(tableName) + " (");
+        new StringBuilder("INSERT INTO ").append(quoteIdentifier(tableName)).append(" (");
-
-    for (ColumnData column : entryColumnData.getEntryValueColumnData()) {
-      columnNames.append(quoteIdentifier(column.getColumnName())).append(", ");
-      columnValues.append("?,");
-    }
-
-    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
-    columnNames.append(quoteIdentifier(keyColumnData.getColumnName())).append(")");
-    columnValues.append("?)");
+    addColumnDataToSqlString(entryColumnData, columnNames, columnValues);
+    columnNames.append(')');
+    columnValues.append(')');
+  private void addColumnDataToSqlString(EntryColumnData entryColumnData, StringBuilder columnNames,
+      StringBuilder columnValues) {
+    Stream<ColumnData> values = entryColumnData.getEntryValueColumnData().stream();
+    Stream<ColumnData> keys = entryColumnData.getEntryKeyColumnData().stream();
+    Stream<ColumnData> columnDataStream = Stream.concat(values, keys);
+    final boolean[] firstTime = new boolean[] {true};
+    columnDataStream.forEachOrdered(column -> {
+      if (!firstTime[0]) {
+        columnNames.append(',');
+        columnValues.append(',');
+      } else {
+        firstTime[0] = false;
+      }
+      columnNames.append(quoteIdentifier(column.getColumnName()));
+      columnValues.append('?');
+    });
+  }
+
