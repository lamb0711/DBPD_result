GEODE-1927: add support for old GemFire remote sites (WAN)

This adds a new JAR and associated cache service to Geode.  The service
and associated changes to Geode protect the server from receiving
com.gemstone.gemfire packaged objects, translating them to their org.apache.geode
counterparts.

The service is called OldClientSupportService and the new jar is
geode-old-client-support.jar.  Though it's called "OldClient" this will
also protect the WAN gateways.

Several Geode exception classes did not have serialVersionUIDs.  Apparently
folks thought that abstract superclasses did not need these but this is not
the case.  I've generated UIDs based on GemFire 8.2.1 classes and put
them in place in Geode's classes.

-import org.apache.geode.internal.Sendable;
+import org.apache.geode.internal.cache.tier.sockets.OldClientSupportService;
-      cname = swizzleClassNameForWrite(cname);
+      cname = swizzleClassNameForWrite(cname, out);
-    writeString(swizzleClassNameForWrite(className), out);
+    writeString(swizzleClassNameForWrite(className, out), out);
-      className = swizzleClassNameForRead(className);
+      className = swizzleClassNameForRead(className, in);
+   * @param in the source of the class name
-  private static String swizzleClassNameForRead(String name) {
+  private static String swizzleClassNameForRead(String name, DataInput in) {
+    // TCPServer classes are used before a cache exists and support for old clients has been initialized
-    String result = name;
-      result = newPackage + name.substring(oldPackage.length());
+      return newPackage + name.substring(oldPackage.length());
-    return result;
+    OldClientSupportService svc = InternalDataSerializer.getOldClientSupportService();
+    if (svc != null) {
+      return svc.processIncomingClassName(name, in);
+    }
+    return name;
+   * @param out the consumer of the serialized object
-  private static String swizzleClassNameForWrite(String name) {
+  private static String swizzleClassNameForWrite(String name, DataOutput out) {
+    // TCPServer classes are used before a cache exists and support for old clients has been initialized
-    String result = name;
-      result = oldPackage + name.substring(newPackage.length());
+      return oldPackage + name.substring(newPackage.length());
-    return result;
+    OldClientSupportService svc = InternalDataSerializer.getOldClientSupportService();
+    if (svc != null) {
+      return svc.processOutgoingClassName(name, out);
+    }
+    return name;
-    return swizzleClassNameForRead(readString(in));
+    return swizzleClassNameForRead(readString(in), in);
