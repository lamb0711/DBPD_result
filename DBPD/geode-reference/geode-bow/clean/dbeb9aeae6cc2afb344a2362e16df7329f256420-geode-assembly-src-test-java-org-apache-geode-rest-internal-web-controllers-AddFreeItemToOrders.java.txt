Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Gemfire function to add free items in the existing order
- * if the total price for that order is greater then the argument
+ * Gemfire function to add free items in the existing order if the total price for that order is
+ * greater then the argument
-public class AddFreeItemToOrders implements Function  {
-  
+public class AddFreeItemToOrders implements Function {
+
-    
+
-    
+
-    }else if(context.getArguments() instanceof Vector ) {
-      
-    }else if (context.getArguments() instanceof Object[]) {
+    } else if (context.getArguments() instanceof Vector) {
+
+    } else if (context.getArguments() instanceof Object[]) {
-    }else {
+    } else {
-    
+
-      ((GemFireCacheImpl)c).getCacheConfig().setPdxReadSerialized(true);
+      ((GemFireCacheImpl) c).getCacheConfig().setPdxReadSerialized(true);
-    String oql = "SELECT DISTINCT entry.key FROM /orders.entries entry WHERE entry.value.totalPrice > $1";
+    String oql =
+        "SELECT DISTINCT entry.key FROM /orders.entries entry WHERE entry.value.totalPrice > $1";
-    
+
-      
-      if (result instanceof Collection<?>)  
+
+      if (result instanceof Collection<?>)
-     if(c != null)
-      c.getLogger().info("Caught FunctionDomainException while executing function AddFreeItemToOrders: " + e.getMessage());
-      
+      if (c != null)
+        c.getLogger()
+            .info("Caught FunctionDomainException while executing function AddFreeItemToOrders: "
+                + e.getMessage());
+
-      if(c != null)
-        c.getLogger().info("Caught TypeMismatchException while executing function AddFreeItemToOrders: " + e.getMessage()); 
+      if (c != null)
+        c.getLogger()
+            .info("Caught TypeMismatchException while executing function AddFreeItemToOrders: "
+                + e.getMessage());
-      if(c != null)
-        c.getLogger().info("Caught NameResolutionException while executing function AddFreeItemToOrders: "  + e.getMessage());
+      if (c != null)
+        c.getLogger()
+            .info("Caught NameResolutionException while executing function AddFreeItemToOrders: "
+                + e.getMessage());
-      if(c != null)
-        c.getLogger().info("Caught QueryInvocationTargetException while executing function AddFreeItemToOrders" + e.getMessage());
+      if (c != null)
+        c.getLogger().info(
+            "Caught QueryInvocationTargetException while executing function AddFreeItemToOrders"
+                + e.getMessage());
-    
-    //class has to be in classpath.
+
+    // class has to be in classpath.
-      Item it = (Item)(argsList.get(1));
-      for(Object key : keys)
-      {
+      Item it = (Item) (argsList.get(1));
+      for (Object key : keys) {
-        if(obj instanceof PdxInstance) {
-          PdxInstance pi = (PdxInstance)obj;
-          Order receivedOrder = (Order)pi.getObject();
+        if (obj instanceof PdxInstance) {
+          PdxInstance pi = (PdxInstance) obj;
+          Order receivedOrder = (Order) pi.getObject();
-              
+
-      
+
-      
-    }catch (ClassCastException e) {
-      
+
+    } catch (ClassCastException e) {
+
-    }catch (Exception e) {
+    } catch (Exception e) {
-    
+
