Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This message is sent to a recipient to make it become the primary for a
- * partitioned region bucket. The recipient will get in line for the bucket's
- * primary lock and then send a {@link DeposePrimaryBucketMessage} to the
- * current primary.
+ * This message is sent to a recipient to make it become the primary for a partitioned region
+ * bucket. The recipient will get in line for the bucket's primary lock and then send a
+ * {@link DeposePrimaryBucketMessage} to the current primary.
- * Usage:
- * BecomePrimaryBucketResponse response = BecomePrimaryBucketMessage.send(
- *     InternalDistributedMember, PartitionedRegion, int bucketId);
- * if (response != null && response.waitForResponse()) {
- *   // recipient became primary for the bucket
- * }
+ * Usage: BecomePrimaryBucketResponse response = BecomePrimaryBucketMessage.send(
+ * InternalDistributedMember, PartitionedRegion, int bucketId); if (response != null &&
+ * response.waitForResponse()) { // recipient became primary for the bucket }
-  
+
-  
+
-  public BecomePrimaryBucketMessage() {
-  }
+  public BecomePrimaryBucketMessage() {}
-  private BecomePrimaryBucketMessage(InternalDistributedMember recipient, 
-                                     int regionId, 
-                                     ReplyProcessor21 processor,
-                                     int bucketId,
-                                     boolean isRebalance) {
+  private BecomePrimaryBucketMessage(InternalDistributedMember recipient, int regionId,
+      ReplyProcessor21 processor, int bucketId, boolean isRebalance) {
-  public static BecomePrimaryBucketResponse send(
-      InternalDistributedMember recipient, 
-      PartitionedRegion pr, 
-      int bid,
-      boolean isRebalance) {
-    
-    Assert.assertTrue(recipient != null, 
-        "BecomePrimaryBucketMessage NULL recipient");
-    
-    BecomePrimaryBucketResponse response = new BecomePrimaryBucketResponse(
-        pr.getSystem(), recipient, pr);
-    BecomePrimaryBucketMessage msg = new BecomePrimaryBucketMessage(
-        recipient, pr.getPRId(), response, bid, isRebalance);
+  public static BecomePrimaryBucketResponse send(InternalDistributedMember recipient,
+      PartitionedRegion pr, int bid, boolean isRebalance) {
-    Set<InternalDistributedMember> failures = 
-      pr.getDistributionManager().putOutgoing(msg);
+    Assert.assertTrue(recipient != null, "BecomePrimaryBucketMessage NULL recipient");
+
+    BecomePrimaryBucketResponse response =
+        new BecomePrimaryBucketResponse(pr.getSystem(), recipient, pr);
+    BecomePrimaryBucketMessage msg =
+        new BecomePrimaryBucketMessage(recipient, pr.getPRId(), response, bid, isRebalance);
+
+    Set<InternalDistributedMember> failures = pr.getDistributionManager().putOutgoing(msg);
-      //throw new ForceReattemptException("Failed sending <" + msg + ">");
+      // throw new ForceReattemptException("Failed sending <" + msg + ">");
-  public BecomePrimaryBucketMessage(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public BecomePrimaryBucketMessage(DataInput in) throws IOException, ClassNotFoundException {
-    // use the waiting pool because operateOnPartitionedRegion will 
+    // use the waiting pool because operateOnPartitionedRegion will
-  
+
-                                                     PartitionedRegion region, 
-                                                     long startTime) 
-                                              throws ForceReattemptException {
-    
+      PartitionedRegion region, long startTime) throws ForceReattemptException {
+
-    BucketAdvisor bucketAdvisor = 
-        region.getRegionAdvisor().getBucketAdvisor(this.bucketId);
-    
+    BucketAdvisor bucketAdvisor = region.getRegionAdvisor().getBucketAdvisor(this.bucketId);
+
-    
+
-    BecomePrimaryBucketReplyMessage.send(
-        getSender(), getProcessorId(), dm, null, responseCode);
-    
+    BecomePrimaryBucketReplyMessage.send(getSender(), getProcessorId(), dm, null, responseCode);
+
-    
+
-  public void fromData(DataInput in) 
-  throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public static final class BecomePrimaryBucketReplyMessage 
-  extends ReplyMessage {
-    
+  public static final class BecomePrimaryBucketReplyMessage extends ReplyMessage {
+
-    
+
-    
+
-    public BecomePrimaryBucketReplyMessage() {
-    }
+    public BecomePrimaryBucketReplyMessage() {}
-    private BecomePrimaryBucketReplyMessage(
-        int processorId, ReplyException re, byte responseCode) {
+    private BecomePrimaryBucketReplyMessage(int processorId, ReplyException re, byte responseCode) {
-    public static void send(InternalDistributedMember recipient,
-                            int processorId, 
-                            DM dm, 
-                            ReplyException re,
-                            byte responseCode) {
-      Assert.assertTrue(recipient != null,
-          "BecomePrimaryBucketReplyMessage NULL recipient");
-      BecomePrimaryBucketReplyMessage m = 
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm,
+        ReplyException re, byte responseCode) {
+      Assert.assertTrue(recipient != null, "BecomePrimaryBucketReplyMessage NULL recipient");
+      BecomePrimaryBucketReplyMessage m =
-    
+
-        logger.trace(LogMarker.DM, "BecomePrimaryBucketReplyMessage process invoking reply processor with processorId:{}",
+        logger.trace(LogMarker.DM,
+            "BecomePrimaryBucketReplyMessage process invoking reply processor with processorId:{}",
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      sb.append("BecomePrimaryBucketReplyMessage ")
-        .append("processorid=").append(this.processorId)
-        .append(" reply to sender ").append(this.getSender())
-        .append(" returning responseCode=").append(this.responseCode);
+      sb.append("BecomePrimaryBucketReplyMessage ").append("processorid=").append(this.processorId)
+          .append(" reply to sender ").append(this.getSender()).append(" returning responseCode=")
+          .append(this.responseCode);
-   * A processor to capture the value returned by 
-   * BecomePrimaryBucketReplyMessage.
+   * A processor to capture the value returned by BecomePrimaryBucketReplyMessage.
-    
-    private volatile boolean success; 
+
+    private volatile boolean success;
-                                       InternalDistributedMember recipient, 
-                                       PartitionedRegion theRegion) {
+        InternalDistributedMember recipient, PartitionedRegion theRegion) {
-          BecomePrimaryBucketReplyMessage reply = 
-              (BecomePrimaryBucketReplyMessage)msg;
+          BecomePrimaryBucketReplyMessage reply = (BecomePrimaryBucketReplyMessage) msg;
-          }
-          else if (logger.isTraceEnabled(LogMarker.DM)) {
+          } else if (logger.isTraceEnabled(LogMarker.DM)) {
-      }
-      finally {
+      } finally {
-     * Ignore any incoming exception from other VMs, we just want an
-     * acknowledgement that the message was processed.
+     * Ignore any incoming exception from other VMs, we just want an acknowledgement that the
+     * message was processed.
-    
+
