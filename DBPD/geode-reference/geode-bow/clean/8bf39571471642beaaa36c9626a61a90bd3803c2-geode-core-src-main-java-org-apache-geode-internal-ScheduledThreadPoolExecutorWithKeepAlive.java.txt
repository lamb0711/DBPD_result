Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A ScheduledThreadPoolExecutor which allows threads to time out after the keep
- * alive time. With the normal ScheduledThreadPoolExecutor, there is no way to
- * configure it such that it only add threads as needed.
+ * A ScheduledThreadPoolExecutor which allows threads to time out after the keep alive time. With
+ * the normal ScheduledThreadPoolExecutor, there is no way to configure it such that it only add
+ * threads as needed.
- * ScheduledThreadPoolExecutor in that case. This class with throw an exception
- * if you try to configure it with one thread.
+ * ScheduledThreadPoolExecutor in that case. This class with throw an exception if you try to
+ * configure it with one thread.
-public class ScheduledThreadPoolExecutorWithKeepAlive extends ThreadPoolExecutor implements ScheduledExecutorService {
-  
+public class ScheduledThreadPoolExecutorWithKeepAlive extends ThreadPoolExecutor
+    implements ScheduledExecutorService {
+
-  public ScheduledThreadPoolExecutorWithKeepAlive(int corePoolSize,
-      long keepAlive, TimeUnit timeUnit, ThreadFactory threadFactory) {
-    super(0, corePoolSize - 1, keepAlive,
-        timeUnit, new SynchronousQueue(), threadFactory, new BlockCallerPolicy());
+  public ScheduledThreadPoolExecutorWithKeepAlive(int corePoolSize, long keepAlive,
+      TimeUnit timeUnit, ThreadFactory threadFactory) {
+    super(0, corePoolSize - 1, keepAlive, timeUnit, new SynchronousQueue(), threadFactory,
+        new BlockCallerPolicy());
-      
+
-  
+
-  public ScheduledFuture scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {
+  public ScheduledFuture scheduleAtFixedRate(Runnable command, long initialDelay, long period,
+      TimeUnit unit) {
-    ScheduledFuture timerFuture = timer.scheduleAtFixedRate(new HandOffTask(future), initialDelay, period, unit);
+    ScheduledFuture timerFuture =
+        timer.scheduleAtFixedRate(new HandOffTask(future), initialDelay, period, unit);
-  public ScheduledFuture scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {
-    DelegatingScheduledFuture future =  new DelegatingScheduledFuture(command, null, true);
-    ScheduledFuture timerFuture = timer.scheduleWithFixedDelay(new HandOffTask(future), initialDelay, delay, unit);
+  public ScheduledFuture scheduleWithFixedDelay(Runnable command, long initialDelay, long delay,
+      TimeUnit unit) {
+    DelegatingScheduledFuture future = new DelegatingScheduledFuture(command, null, true);
+    ScheduledFuture timerFuture =
+        timer.scheduleWithFixedDelay(new HandOffTask(future), initialDelay, delay, unit);
-    //note - the timer has a "hook" which will shutdown our
-    //worker pool once the timer is shutdown.
+    // note - the timer has a "hook" which will shutdown our
+    // worker pool once the timer is shutdown.
-   * Shutdown the executor immediately, returning a list of tasks that haven't
-   * been run. Like ScheduledThreadPoolExecutor, this returns a list of
-   * RunnableScheduledFuture objects, instead of the actual tasks submitted.
-   * However, these Future objects are even less useful than the ones returned
-   * by ScheduledThreadPoolExecutor. In particular, they don't match the future
-   * returned by the {{@link #submit(Runnable)} method, and the run method won't
-   * do anything useful. This list should only be used as a count of the number
-   * of tasks that didn't execute.
+   * Shutdown the executor immediately, returning a list of tasks that haven't been run. Like
+   * ScheduledThreadPoolExecutor, this returns a list of RunnableScheduledFuture objects, instead of
+   * the actual tasks submitted. However, these Future objects are even less useful than the ones
+   * returned by ScheduledThreadPoolExecutor. In particular, they don't match the future returned by
+   * the {{@link #submit(Runnable)} method, and the run method won't do anything useful. This list
+   * should only be used as a count of the number of tasks that didn't execute.
-  public boolean awaitTermination(long timeout, TimeUnit unit)
-      throws InterruptedException {
+  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
-    if(!timer.awaitTermination(timeout, unit)) {
+    if (!timer.awaitTermination(timeout, unit)) {
-    if(remaining < 0) {
+    if (remaining < 0) {
-  
+
-  
-  //method that is in ScheduledThreadPoolExecutor that we should expose here
+
+  // method that is in ScheduledThreadPoolExecutor that we should expose here
-  
-  //method that is in ScheduledThreadPoolExecutor that we should expose here
+
+  // method that is in ScheduledThreadPoolExecutor that we should expose here
-  
+
-   * A Runnable which we put in the timer which
-   * simply hands off the contain task for execution
-   * in the thread pool when the timer fires.
+   * A Runnable which we put in the timer which simply hands off the contain task for execution in
+   * the thread pool when the timer fires.
-    
+
-    
+
-      } catch(RejectedExecutionException e) {
-        //do nothing, we'll only get this if we're shutting down.
+      } catch (RejectedExecutionException e) {
+        // do nothing, we'll only get this if we're shutting down.
-  
+
-   * The future returned by the schedule* methods on this class. This future
-   * will not return a value until the task has actually executed in the thread pool, 
-   * but it allows us to cancel associated timer task. 
+   * The future returned by the schedule* methods on this class. This future will not return a value
+   * until the task has actually executed in the thread pool, but it allows us to cancel associated
+   * timer task.
-  private static class DelegatingScheduledFuture<V> extends FutureTask<V> implements ScheduledFuture<V> {
-    
+  private static class DelegatingScheduledFuture<V> extends FutureTask<V>
+      implements ScheduledFuture<V> {
+
-    
+
+
-    
+
-    
+
-      if(periodic) {
+      if (periodic) {
+
-    
+
-    
+
-  /** A RejectedExecutionHandler which causes the caller to block until
-   * there is space in the queue for the task.
+  /**
+   * A RejectedExecutionHandler which causes the caller to block until there is space in the queue
+   * for the task.
