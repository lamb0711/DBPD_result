GEODE-2662: Gfsh displays field value on wrong line when receiving objects with missing fields

* DataCommandResult.buildTable refactored to scan for all necessary fields and build rows, padding with MISSING_VALUE as necessary.
* ServerStarterRule adjusted to build .withPDXPersistent() rather than take it as input to .startServer()
* Refactored a great deal for readability.
* this closes #500

-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
+import java.util.ArrayList;
+import java.util.List;
+
- * 
- * 
-   * 
-   * @param headerText
+   * @param headerText Text to set to header.
-   * 
-   * @param footerText
+   * @param footerText Text to set to footer.
-  public Map<String, String> retrieveDataByValueInColumn(String columnName, String valueToSearch) {
-    Map<String, String> foundValues = Collections.emptyMap();
-    try {
-      GfJsonArray jsonArray = contentObject.getJSONArray(columnName);
-      int size = jsonArray.size();
-      int foundIndex = -1;
-      for (int i = 0; i < size; i++) {
-        Object object = jsonArray.get(i);
-        if (object != null && object.equals(valueToSearch)) {
-          foundIndex = i;
-          break;
-        }
-      }
-
-      if (foundIndex != -1) {
-        foundValues = new LinkedHashMap<String, String>();
-        for (Iterator<String> iterator = contentObject.keys(); iterator.hasNext();) {
-          String storedColumnNames = (String) iterator.next();
-          GfJsonArray storedColumnValues = contentObject.getJSONArray(storedColumnNames);
-          foundValues.put(storedColumnNames, String.valueOf(storedColumnValues.get(foundIndex)));
-        }
-      }
-    } catch (GfJsonException e) {
-      throw new ResultDataException(e.getMessage());
-    }
-    return foundValues;
-  }
-
-  public List<Map<String, String>> retrieveAllDataByValueInColumn(String columnName,
-      String valueToSearch) {
-    List<Map<String, String>> foundValuesList = new ArrayList<Map<String, String>>();
-    try {
-      GfJsonArray jsonArray = contentObject.getJSONArray(columnName);
-      int size = jsonArray.size();
-      for (int i = 0; i < size; i++) {
-        Object object = jsonArray.get(i);
-        if (object != null && object.equals(valueToSearch)) {
-          Map<String, String> foundValues = new LinkedHashMap<String, String>();
-
-          for (Iterator<String> iterator = contentObject.keys(); iterator.hasNext();) {
-            String storedColumnNames = (String) iterator.next();
-            GfJsonArray storedColumnValues = contentObject.getJSONArray(storedColumnNames);
-            foundValues.put(storedColumnNames, String.valueOf(storedColumnValues.get(i)));
-          }
-
-          foundValuesList.add(foundValues);
-        }
-      }
-    } catch (GfJsonException e) {
-      throw new ResultDataException(e.getMessage());
-    }
-    return foundValuesList;
-  }
-
-    List<String> values = new ArrayList<String>();
+    List<String> values = new ArrayList<>();
