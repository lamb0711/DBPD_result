Merge branch 'develop' into feature/GEODE-7049

+import java.net.URI;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
-import org.apache.commons.lang3.tuple.ImmutablePair;
-import org.apache.commons.lang3.tuple.Pair;
-import org.apache.geode.distributed.internal.membership.MemberFactory;
+import org.apache.geode.distributed.internal.membership.NetLocator;
+import org.apache.geode.distributed.internal.membership.NetLocatorFactory;
-import org.apache.geode.distributed.internal.membership.gms.NetLocator;
+import org.apache.geode.distributed.internal.membership.adapter.GMSMembershipManager;
-import org.apache.geode.internal.cache.HttpService;
+import org.apache.geode.internal.cache.InternalHttpService;
+import org.apache.geode.security.AuthTokenEnabledComponents;
-    netLocator = MemberFactory.newLocatorHandler(bindAddress, locatorsConfigValue,
+    netLocator = NetLocatorFactory.newLocatorHandler(bindAddress, locatorsConfigValue,
-        netLocator.setMembershipManager(internalDistributedSystem.getDM().getMembershipManager());
+        netLocator.setServices(
+            ((GMSMembershipManager) internalDistributedSystem.getDM().getMembershipManager())
+                .getServices());
-    String gemfireManagementWar = agentUtil.findWarLocation("geode-web-management");
+    URI gemfireManagementWar = agentUtil.findWarLocation("geode-web-management");
-    Pair<String, Object> securityServiceAttribute =
-        new ImmutablePair<>(HttpService.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
-            internalCache.getSecurityService());
-    Pair<String, Object> clusterManagementServiceAttribute =
-        new ImmutablePair<>(HttpService.CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM,
-            clusterManagementService);
+    Map<String, Object> serviceAttributes = new HashMap<>();
+    serviceAttributes.put(InternalHttpService.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
+        internalCache.getSecurityService());
+    serviceAttributes.put(InternalHttpService.CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM,
+        clusterManagementService);
+
+    String[] authEnabledComponents = distributionConfig.getSecurityAuthTokenEnabledComponents();
+
+    boolean managementAuthTokenEnabled = Arrays.stream(authEnabledComponents)
+        .anyMatch(AuthTokenEnabledComponents::hasManagement);
+    serviceAttributes.put(InternalHttpService.AUTH_TOKEN_ENABLED_PARAM, managementAuthTokenEnabled);
-          x.addWebApplication("/management", gemfireManagementWar, securityServiceAttribute,
-              clusterManagementServiceAttribute);
+          x.addWebApplication("/management", Paths.get(gemfireManagementWar), serviceAttributes);
+        boolean noprevlocator = false;
+        if (!hasLocator()) {
+          setLocator(this);
+          noprevlocator = true;
+        }
+          if (noprevlocator) {
+            removeLocator(this);
+          }
-        setLocator(this);
