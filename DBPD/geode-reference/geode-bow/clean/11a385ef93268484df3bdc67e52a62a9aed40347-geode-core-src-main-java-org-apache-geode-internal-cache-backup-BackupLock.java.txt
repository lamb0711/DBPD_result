GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.

-package org.apache.geode.internal.cache;
+package org.apache.geode.internal.cache.backup;
+import java.util.concurrent.atomic.AtomicReference;
- * We need this because our backup process is two phase. In the first phase we aquire the lock and
+ * <p>
+ * We need this because our backup process is two phase. In the first phase we acquire the lock and
- *
-  private final ThreadLocal<Boolean> isBackupThread = new ThreadLocal<Boolean>();
-  boolean isBackingUp;
-  Condition backupDone = super.newCondition();
+  private final ThreadLocal<Boolean> isBackupThread = new ThreadLocal<>();
+  private boolean isBackingUp;
+  private Condition backupDone = super.newCondition();
-  private BackupLockTestHook hook = null;
+  private final AtomicReference<BackupLockTestHook> hook = new AtomicReference<>();
-    public void beforeWaitForBackupCompletion();
+    void beforeWaitForBackupCompletion();
-    hook = testHook;
+    hook.set(testHook);
-  public void setBackupThread() {
+  void setBackupThread() {
-    isBackupThread.set(false);
+    isBackupThread.remove();
-  public boolean isCurrentThreadDoingBackup() {
+  boolean isCurrentThreadDoingBackup() {
+  /**
+   * For testing only
+   */
+  boolean isBackingUp() {
+    return isBackingUp;
+  }
+
+  /**
+   * For testing only
+   */
+  boolean hasThreadLocal() {
+    return isBackupThread.get() != null;
+  }
+
-   *
-        if (hook != null) {
-          hook.beforeWaitForBackupCompletion();
+        BackupLockTestHook testHook = hook.get();
+        if (testHook != null) {
+          testHook.beforeWaitForBackupCompletion();
