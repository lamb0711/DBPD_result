Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>GatewayEvent</code>s to <code>AsyncEventListener</code>
- * callback implementers. This dispatcher is used in the write-behind case.
+ * <code>GatewayEvent</code>s to <code>AsyncEventListener</code> callback implementers. This
+ * dispatcher is used in the write-behind case.
-public class GatewaySenderEventCallbackDispatcher implements GatewaySenderEventDispatcher{
+public class GatewaySenderEventCallbackDispatcher implements GatewaySenderEventDispatcher {
-  
+
-   * The <code>SerialGatewayEventProcessor</code> used by this
-   * <code>CacheListener</code> to process events.
+   * The <code>SerialGatewayEventProcessor</code> used by this <code>CacheListener</code> to process
+   * events.
-  private volatile List<AsyncEventListener> eventListeners = Collections
-      .emptyList();
+  private volatile List<AsyncEventListener> eventListeners = Collections.emptyList();
-   * A lock to protect access to the registered
-   * <code>AsyncEventListener</code>s.
+   * A lock to protect access to the registered <code>AsyncEventListener</code>s.
-  public GatewaySenderEventCallbackDispatcher(
-      AbstractGatewaySenderEventProcessor eventProcessor) {
+  public GatewaySenderEventCallbackDispatcher(AbstractGatewaySenderEventProcessor eventProcessor) {
-   * Dispatches a batch of messages to all registered
-   * <code>AsyncEventListener</code>s.
+   * Dispatches a batch of messages to all registered <code>AsyncEventListener</code>s.
-   * @param events
-   *          The <code>List</code> of events to send
+   * @param events The <code>List</code> of events to send
-      logger.fatal(LocalizedMessage.create(
-          LocalizedStrings.SerialGatewayEventCallbackDispatcher_STOPPING_THE_PROCESSOR_BECAUSE_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_PROCESSING_A_BATCH),
+      logger.fatal(
+          LocalizedMessage.create(
+              LocalizedStrings.SerialGatewayEventCallbackDispatcher_STOPPING_THE_PROCESSOR_BECAUSE_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_PROCESSING_A_BATCH),
-   * @param listener
-   *          A AsyncEventListener to be registered
+   * @param listener A AsyncEventListener to be registered
-        List<AsyncEventListener> newListeners = new ArrayList<AsyncEventListener>(
-            oldListeners);
+        List<AsyncEventListener> newListeners = new ArrayList<AsyncEventListener>(oldListeners);
-   * Removes registration of a previously registered
-   * <code>AsyncEventListener</code>.
+   * Removes registration of a previously registered <code>AsyncEventListener</code>.
-   * @param listener
-   *          A AsyncEventListener to be unregistered
+   * @param listener A AsyncEventListener to be unregistered
-        List<AsyncEventListener> newListeners = new ArrayList<AsyncEventListener>(
-            oldListeners);
+        List<AsyncEventListener> newListeners = new ArrayList<AsyncEventListener>(oldListeners);
-    for (AsyncEventListener listener : this.eventProcessor.getSender()
-        .getAsyncEventListeners()) {
+    for (AsyncEventListener listener : this.eventProcessor.getSender().getAsyncEventListeners()) {
-   * Sends a batch of messages to the registered
-   * <code>AsyncEventListener</code>s.
+   * Sends a batch of messages to the registered <code>AsyncEventListener</code>s.
-   * @param events
-   *          The <code>List</code> of events to send
+   * @param events The <code>List</code> of events to send
-      final StringId alias = LocalizedStrings.SerialGatewayEventCallbackDispatcher__0___EXCEPTION_DURING_PROCESSING_BATCH__1_;
-      final Object[] aliasArgs = new Object[] { this, Integer.valueOf(batchId) };
+      final StringId alias =
+          LocalizedStrings.SerialGatewayEventCallbackDispatcher__0___EXCEPTION_DURING_PROCESSING_BATCH__1_;
+      final Object[] aliasArgs = new Object[] {this, Integer.valueOf(batchId)};
-  
+
-    
+
