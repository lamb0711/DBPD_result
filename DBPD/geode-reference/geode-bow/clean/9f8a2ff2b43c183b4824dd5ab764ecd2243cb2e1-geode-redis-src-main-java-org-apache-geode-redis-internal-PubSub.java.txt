GEODE-7800: Add Redis PSUBSCRIBE and PUNSUBSCRIBE commands (#4705)

* GEODE-7800: Add Redis PSUBSCRIBE and PUNSUBSCRIBE commands

Similar to `SUBSCRIBE` and `UNSUBSCRIBE`, `PSUBSCRIBE` allows a client
to subscribe to a pattern. For example: `PSUBSCRIBE sal*s`

The subscription pattern is in the form of a glob supporting `*`, `?`
and ranges. https://redis.io/commands/psubscribe

Pattern subscriptions must be unsubscribed verbatim. i.e., the above
subscription would not be unsubscribed using the pattern `s*`, but must
be unsubscribed using the complete subscribed pattern, namely `sal*s`.

When clients subscribe to overlapping patterns (or channels) they will
receive a message for every matched subscription. Matches for a single
client are not conflated.

    Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
    Co-authored-by: John Hutchison <jhutchison@pivotal.io>
    Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* Fixes class names in sanctioned-geode-redis-serializables.txt

* Fixes flaky test

* Adds license to PublishResult

* Clean code using spA and make test reliable

stop propagating exceptions that get thrown when disconnecting Jedis

* Cleans up subscribers and publishers after each test or after the whole class as needed

* re-add ignoreExceptions to waitfor test helper method

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Venkateswara Prasath Durairaj <xtreme-prasath@users.noreply.github.com>

+import org.apache.geode.redis.internal.org.apache.hadoop.fs.GlobPattern;
+
+   * Subscribe to a pattern
+   *
+   * @param pattern glob pattern to subscribe to
+   * @param context ExecutionHandlerContext which will handle the client response
+   * @param client a Client instance making the request
+   * @return the number of channels subscribed to
+   */
+  long psubscribe(GlobPattern pattern, ExecutionHandlerContext context, Client client);
+
+  /**
+
+  /**
+   * Unsubscribe from a previously subscribed pattern
+   *
+   * @param pattern the channel to unsubscribe from
+   * @param client the Client which is to be unsubscribed
+   * @return the number of channels still subscribed to by the client
+   */
+  long punsubscribe(GlobPattern pattern, Client client);
