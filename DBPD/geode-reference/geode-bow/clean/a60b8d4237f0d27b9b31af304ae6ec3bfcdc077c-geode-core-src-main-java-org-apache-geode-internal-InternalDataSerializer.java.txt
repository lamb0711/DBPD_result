GEODE-5198 NPE in DataSerializer registration when forming a client/server connection during handshake

If a holder can't be found do not record supported classes for it.
Absense of the holder, which had just been inserted into the
idsToHolders collection, means that another thread has resolved the
holder into an actual DataSerializer class and has removed the holder
and its supported classes.

This closes #1943

-  private static DataSerializer newInstance(Class c) {
+  static DataSerializer newInstance(Class c) {
-   * framework. Does not necessarily load the classes into this VM.
+   * framework if and when it is needed. Does not necessarily load the classes into this VM.
-  public static void updateSupportedClassesMap(HashMap<Integer, ArrayList<String>> map) {
-    for (Entry<Integer, ArrayList<String>> e : map.entrySet()) {
+  /**
+   * During client/server handshakes the server may send a collection of DataSerializers and
+   * the classes they support. The DataSerializers are registered as "holders" to avoid loading the
+   * actual classes until they're needed. This method registers the names of classes supported
+   * by the DataSerializers
+   *
+   * @param map The classes returned by DataSerializer.supportedClasses()
+   */
+  public static void updateSupportedClassesMap(Map<Integer, List<String>> map) {
+    for (Entry<Integer, List<String>> e : map.entrySet()) {
-        supportedClassesToHolders.putIfAbsent(supportedClassName, idsToHolders.get(e.getKey()));
+        SerializerAttributesHolder serializerAttributesHolder = idsToHolders.get(e.getKey());
+        if (serializerAttributesHolder != null) {
+          supportedClassesToHolders.putIfAbsent(supportedClassName, serializerAttributesHolder);
+        }
-    supportedClassesToHolders.putIfAbsent(supportedClassName, dsClassesToHolders.get(dsClassName));
+    SerializerAttributesHolder holder = dsClassesToHolders.get(dsClassName);
+    if (holder != null) {
+      supportedClassesToHolders.putIfAbsent(supportedClassName, holder);
+    }
+  /**
+   * A SerializerAttributesHolder holds information required to load a DataSerializer
+   * and exists to allow client/server connections to be created more quickly than
+   * they would if the DataSerializer information downloaded from the server were
+   * used to immediately load the corresponding classes.
+   */
