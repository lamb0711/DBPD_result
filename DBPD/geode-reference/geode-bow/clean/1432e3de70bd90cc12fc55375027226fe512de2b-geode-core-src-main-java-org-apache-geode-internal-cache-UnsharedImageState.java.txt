Revert " GEODE-6580: Cleanup static analyzer warnings. (#3415)"

This reverts commit 80a32b19c3cdbfe75c37d7b70104ea708739d2cd.

+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.cache.DiskAccessException;
+import org.apache.geode.internal.logging.LogService;
+  private static final Logger logger = LogService.getLogger();
-  private volatile ConcurrentMap<Object, Boolean> destroyedEntryKeys;
+  private volatile ConcurrentMap destroyedEntryKeys;
-  private volatile boolean mayDoRecovery;
+  private volatile boolean mayDoRecovery = false;
+  private volatile DiskAccessException dae = null;
+
+
-    riLock = isClient ? new StoppableReentrantReadWriteLock(stopper) : null;
-    giiLock = isReplicate ? new StoppableNonReentrantLock(stopper) : null;
-    destroyedEntryKeys = new ConcurrentHashMap<>();
+    this.riLock = isClient ? new StoppableReentrantReadWriteLock(stopper) : null;
+
+    this.giiLock = isReplicate ? new StoppableNonReentrantLock(stopper) : null;
+    this.destroyedEntryKeys = new ConcurrentHashMap();
-      inRecovery = true; // default to true to fix 41147
+      this.inRecovery = true; // default to true to fix 41147
-    return giiLock != null;
+    return this.giiLock != null;
-    return riLock != null;
+    return this.riLock != null;
-      wasRegionClearedDuringGII = false;
+      this.wasRegionClearedDuringGII = false;
-      return regionInvalidated;
+      return this.regionInvalidated;
-      regionInvalidated = b;
+      this.regionInvalidated = b;
-    if (mayDoRecovery) {
-      inRecovery = b;
+    if (this.mayDoRecovery) {
+      this.inRecovery = b;
-    if (mayDoRecovery) {
-      return inRecovery;
+    if (this.mayDoRecovery) {
+      return this.inRecovery;
-      destroyedEntryKeys.put(key, Boolean.TRUE);
+      this.destroyedEntryKeys.put(key, Boolean.TRUE);
-    destroyedEntryKeys.remove(key);
+    this.destroyedEntryKeys.remove(key);
-    return destroyedEntryKeys.containsKey(key);
+    return this.destroyedEntryKeys.containsKey(key);
-  public Iterator<Object> getDestroyedEntries() {
+  public Iterator getDestroyedEntries() {
-    Iterator<Object> result = destroyedEntryKeys.keySet().iterator();
-    destroyedEntryKeys = new ConcurrentHashMap<>();
+    Iterator result = this.destroyedEntryKeys.keySet().iterator();
+    this.destroyedEntryKeys = new ConcurrentHashMap();
-    versionTags = new ConcurrentHashSet<>(16);
+    this.versionTags = new ConcurrentHashSet<VersionTagEntry>(16);
-    versionTags.add(new VersionTagEntryImpl(key, tag.getMemberID(), tag.getRegionVersion()));
+    this.versionTags.add(new VersionTagEntryImpl(key, tag.getMemberID(), tag.getRegionVersion()));
-    Iterator<VersionTagEntry> result = versionTags.iterator();
+    Iterator<VersionTagEntry> result = this.versionTags.iterator();
-    leftMembers = new ConcurrentHashSet<>(16);
+    this.leftMembers = new ConcurrentHashSet<VersionSource>(16);
-    leftMembers.add(mbr);
+    this.leftMembers.add(mbr);
-    Set<VersionSource> result = leftMembers;
+    Set<VersionSource> result = this.leftMembers;
-    return leftMembers.size() > 0;
+    return this.leftMembers.size() > 0;
+  }
+
+  public void dumpDestroyedEntryKeys() {
+    if (this.destroyedEntryKeys == null) {
+      logger.info("region has no destroyedEntryKeys in its image state");
+    } else {
+      logger.info("dump of image state destroyed entry keys of size {}",
+          this.destroyedEntryKeys.size());
+      for (Iterator it = this.destroyedEntryKeys.keySet().iterator(); it.hasNext();) {
+        Object key = it.next();
+        logger.info("key={}", key);
+      }
+    }
-    return destroyedEntryKeys.size();
+    return this.destroyedEntryKeys.size();
-      clearRegionFlag = isClearOn;
+      this.clearRegionFlag = isClearOn;
-        clearRVV = rvv; // will be used to selectively clear content
-        wasRegionClearedDuringGII = true;
+        this.clearRVV = rvv; // will be used to selectively clear content
+        this.wasRegionClearedDuringGII = true;
-      return clearRegionFlag;
+      return this.clearRegionFlag;
-      return clearRVV;
+      return this.clearRVV;
-      boolean result = wasRegionClearedDuringGII;
+      boolean result = this.wasRegionClearedDuringGII;
-        wasRegionClearedDuringGII = false;
+        this.wasRegionClearedDuringGII = false;
-    giiLock.lock();
+    this.giiLock.lock();
-    giiLock.unlock();
+    this.giiLock.unlock();
-    riLock.readLock().lock();
+    this.riLock.readLock().lock();
-    riLock.readLock().unlock();
+    this.riLock.readLock().unlock();
-    riLock.writeLock().lock();
+    this.riLock.writeLock().lock();
-    riLock.writeLock().unlock();
+    this.riLock.writeLock().unlock();
