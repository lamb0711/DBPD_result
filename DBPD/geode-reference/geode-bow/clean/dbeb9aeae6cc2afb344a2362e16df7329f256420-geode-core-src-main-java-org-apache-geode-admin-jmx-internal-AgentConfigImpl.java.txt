Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Supports importing of persisted properties from an external configuration
- * file.
+ * Supports importing of persisted properties from an external configuration file.
- * Select values can also be overridden with command line arguments.  See
- * remarks on individual properties for further information.
+ * Select values can also be overridden with command line arguments. See remarks on individual
+ * properties for further information.
- * @since GemFire     3.5 (in which it was named AgentConfig)
+ * 
+ * @since GemFire 3.5 (in which it was named AgentConfig)
-  //   Static class variable(s)
+  // Static class variable(s)
-  //   DistributionLocator properties...
+  // DistributionLocator properties...
-  /*package scope*/
+  /* package scope */
-  /*package scope*/
+  /* package scope */
-  //////////////////////  Static Methods  //////////////////////
+  ////////////////////// Static Methods //////////////////////
-   * The <code>propertyFile</code> is the name of the property file that will
-   * be loaded on startup of the Agent.
+   * The <code>propertyFile</code> is the name of the property file that will be loaded on startup
+   * of the Agent.
-   * <li> the current directory
-   * <li> the home directory
-   * <li> the class path
+   * <li>the current directory
+   * <li>the home directory
+   * <li>the class path
-   * The default value of propertyFile is <code>"agent.properties"</code>. However
-   * if the "gfAgentPropertyFile" system property is set then its value is the
-   * value of propertyFile. If this value is a relative file system path then
-   * the above search is done. If its an absolute file system path then that
-   * file must exist; no search for it is done.
+   * The default value of propertyFile is <code>"agent.properties"</code>. However if the
+   * "gfAgentPropertyFile" system property is set then its value is the value of propertyFile. If
+   * this value is a relative file system path then the above search is done. If its an absolute
+   * file system path then that file must exist; no search for it is done.
-   * Creates a new <code>Properties</code> object that contains all of
-   * the default values.
+   * Creates a new <code>Properties</code> object that contains all of the default values.
-    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
-    props.setProperty(HTTP_AUTHENTICATION_USER_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
-    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
+    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME,
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
+    props.setProperty(HTTP_AUTHENTICATION_USER_NAME,
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
+    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME,
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
-    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME,
+        String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME,
+        String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
-   * Returns default values for all valid agent properties as a Properties
-   * object.
+   * Returns default values for all valid agent properties as a Properties object.
+   * 
-    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
+    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME,
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_ENABLED));
-    props.setProperty(HTTP_AUTHENTICATION_USER_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
+    props.setProperty(HTTP_AUTHENTICATION_USER_NAME,
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_USER));
-    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME, String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
+    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME,
+        String.valueOf(DEFAULT_HTTP_AUTHENTICATION_PASSWORD));
-    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME,
+        String.valueOf(DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME, String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME,
+        String.valueOf(DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION));
-    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME, String.valueOf(DEFAULT_EMAIL_NOTIFICATIONS_ENABLED));
+    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME,
+        String.valueOf(DEFAULT_EMAIL_NOTIFICATIONS_ENABLED));
-    props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION, String.valueOf(DEFAULT_SSL_REQUIRE_AUTHENTICATION));
+    props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION,
+        String.valueOf(DEFAULT_SSL_REQUIRE_AUTHENTICATION));
-  //   Member variable(s)
+  // Member variable(s)
-   * HttpAdaptor won't work with ssl authentication required, so this attribute
-   * allows this option to be turned on for RMI but off for HTTP in the event
-   * that both adaptors are being used with ssl.
+   * HttpAdaptor won't work with ssl authentication required, so this attribute allows this option
+   * to be turned on for RMI but off for HTTP in the event that both adaptors are being used with
+   * ssl.
-   * Describes the property file used to load configuration from.
-   * Null if no file was found.
+   * Describes the property file used to load configuration from. Null if no file was found.
-   * The <code>Agent</code> that is configured by this
-   * <code>AgentConfigImpl</code>
+   * The <code>Agent</code> that is configured by this <code>AgentConfigImpl</code>
-  //   Constructor(s)
+  // Constructor(s)
-   * Constructs new instance of <code>AgentConfigImpl</code> with the
-   * default configuration.
+   * Constructs new instance of <code>AgentConfigImpl</code> with the default configuration.
-   * Constructs new instance of AgentConfig. Supplied command-line arguments
-   * are used to create a set of non-default properties for initializing this
-   * AgentConfig.
+   * Constructs new instance of AgentConfig. Supplied command-line arguments are used to create a
+   * set of non-default properties for initializing this AgentConfig.
+   * 
-   * Creates a new <code>AgentConfig</code> with the given non-default
-   * configuration properties.
+   * Creates a new <code>AgentConfig</code> with the given non-default configuration properties.
+   * 
-    super(filterOutAgentProperties(appendOptionalPropertyFileProperties(props)), true/*ignore gemfire.properties*/);
+    super(filterOutAgentProperties(appendOptionalPropertyFileProperties(props)),
+        true/* ignore gemfire.properties */);
+   * 
-        throw new GemFireIOException(LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(propFile), e);
+        throw new GemFireIOException(
+            LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(propFile), e);
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_SPECIFIED_PROPERTIES_FILE_DOES_NOT_EXIST_0.toLocalizedString(propFile));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_SPECIFIED_PROPERTIES_FILE_DOES_NOT_EXIST_0
+              .toLocalizedString(propFile));
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * Sets the <code>Agent</code> associated with this
-   * <code>AgentConfigImpl</code>.
+   * Sets the <code>Agent</code> associated with this <code>AgentConfigImpl</code>.
-   * Checks to see if this config object is "read only".  If it is,
-   * then an {@link IllegalStateException} is thrown.
+   * Checks to see if this config object is "read only". If it is, then an
+   * {@link IllegalStateException} is thrown.
+   * 
-      throw new IllegalStateException(LocalizedStrings.AgentConfigImpl_AN_AGENTCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_AGENT.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.AgentConfigImpl_AN_AGENTCONFIG_OBJECT_CANNOT_BE_MODIFIED_AFTER_IT_HAS_BEEN_USED_TO_CREATE_AN_AGENT
+              .toLocalizedString());
-  //   Methods for handling Properties and the Properties file
+  // Methods for handling Properties and the Properties file
-   * Returns a description of the property file used to load this config.
-   * If no property file was used then the description will say so.
+   * Returns a description of the property file used to load this config. If no property file was
+   * used then the description will say so.
-     * Checking if the specified or the default properties file exists. If not,
-     * just log this as an information.
+     * Checking if the specified or the default properties file exists. If not, just log this as an
+     * information.
-      return LocalizedStrings.AgentConfigImpl_USING_DEFAULT_CONFIGURATION_BECAUSE_PROPERTY_FILE_WAS_FOUND.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_USING_DEFAULT_CONFIGURATION_BECAUSE_PROPERTY_FILE_WAS_FOUND
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_CONFIGURATION_LOADED_FROM_0.toLocalizedString(this.url);
+      return LocalizedStrings.AgentConfigImpl_CONFIGURATION_LOADED_FROM_0
+          .toLocalizedString(this.url);
-   * Returns the default property file that will be used when configuration
-   * is saved.
+   * Returns the default property file that will be used when configuration is saved.
-   * Converts the contents of this config to a property instance and Stringifies
-   * it
+   * Converts the contents of this config to a property instance and Stringifies it
+   * 
+   * 
+   * 
-   * <code>Properties</code> object?  See bug 32682.
+   *        <code>Properties</code> object? See bug 32682.
-    props.setProperty(HTTP_BIND_ADDRESS_NAME, toString(HTTP_BIND_ADDRESS_NAME, getHttpBindAddress()));
+    props.setProperty(HTTP_BIND_ADDRESS_NAME,
+        toString(HTTP_BIND_ADDRESS_NAME, getHttpBindAddress()));
-    props.setProperty(RMI_REGISTRY_ENABLED_NAME, toString(RMI_REGISTRY_ENABLED_NAME, isRmiRegistryEnabled()));
+    props.setProperty(RMI_REGISTRY_ENABLED_NAME,
+        toString(RMI_REGISTRY_ENABLED_NAME, isRmiRegistryEnabled()));
-    props.setProperty(SNMP_BIND_ADDRESS_NAME, toString(SNMP_BIND_ADDRESS_NAME, getSnmpBindAddress()));
+    props.setProperty(SNMP_BIND_ADDRESS_NAME,
+        toString(SNMP_BIND_ADDRESS_NAME, getSnmpBindAddress()));
-    props.setProperty(AGENT_SSL_ENABLED_NAME, toString(AGENT_SSL_ENABLED_NAME, isAgentSSLEnabled()));
-    props.setProperty(AGENT_SSL_PROTOCOLS_NAME, toString(AGENT_SSL_PROTOCOLS_NAME, getAgentSSLProtocols()));
-    props.setProperty(AGENT_SSL_CIPHERS_NAME, toString(AGENT_SSL_CIPHERS_NAME, getAgentSSLCiphers()));
-    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME, toString(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME, isAgentSSLRequireAuth()));
-    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME, toString(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME, isHttpSSLRequireAuth()));
+    props.setProperty(AGENT_SSL_ENABLED_NAME,
+        toString(AGENT_SSL_ENABLED_NAME, isAgentSSLEnabled()));
+    props.setProperty(AGENT_SSL_PROTOCOLS_NAME,
+        toString(AGENT_SSL_PROTOCOLS_NAME, getAgentSSLProtocols()));
+    props.setProperty(AGENT_SSL_CIPHERS_NAME,
+        toString(AGENT_SSL_CIPHERS_NAME, getAgentSSLCiphers()));
+    props.setProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME,
+        toString(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME, isAgentSSLRequireAuth()));
+    props.setProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME,
+        toString(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME, isHttpSSLRequireAuth()));
-    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME, toString(HTTP_AUTHENTICATION_ENABLED_NAME, isHttpAuthEnabled()));
-    props.setProperty(HTTP_AUTHENTICATION_USER_NAME, toString(HTTP_AUTHENTICATION_USER_NAME, getHttpAuthUser()));
-    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME, toString(HTTP_AUTHENTICATION_PASSWORD_NAME, getHttpAuthPassword()));
+    props.setProperty(HTTP_AUTHENTICATION_ENABLED_NAME,
+        toString(HTTP_AUTHENTICATION_ENABLED_NAME, isHttpAuthEnabled()));
+    props.setProperty(HTTP_AUTHENTICATION_USER_NAME,
+        toString(HTTP_AUTHENTICATION_USER_NAME, getHttpAuthUser()));
+    props.setProperty(HTTP_AUTHENTICATION_PASSWORD_NAME,
+        toString(HTTP_AUTHENTICATION_PASSWORD_NAME, getHttpAuthPassword()));
-    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME, toString(EMAIL_NOTIFICATIONS_ENABLED_NAME, isEmailNotificationEnabled()));
-    props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME, toString(EMAIL_NOTIFICATIONS_HOST_NAME, getEmailNotificationHost()));
-    props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME, toString(EMAIL_NOTIFICATIONS_FROM_NAME, getEmailNotificationFrom()));
-    props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME, toString(EMAIL_NOTIFICATIONS_TO_LIST_NAME, getEmailNotificationToList()));
+    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME,
+        toString(EMAIL_NOTIFICATIONS_ENABLED_NAME, isEmailNotificationEnabled()));
+    props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME,
+        toString(EMAIL_NOTIFICATIONS_HOST_NAME, getEmailNotificationHost()));
+    props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME,
+        toString(EMAIL_NOTIFICATIONS_FROM_NAME, getEmailNotificationFrom()));
+    props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME,
+        toString(EMAIL_NOTIFICATIONS_TO_LIST_NAME, getEmailNotificationToList()));
-    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME, toString(EMAIL_NOTIFICATIONS_ENABLED_NAME, isEmailNotificationEnabled()));
-    props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME, toString(EMAIL_NOTIFICATIONS_HOST_NAME, getEmailNotificationHost()));
-    props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME, toString(EMAIL_NOTIFICATIONS_FROM_NAME, getEmailNotificationFrom()));
-    props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME, toString(EMAIL_NOTIFICATIONS_TO_LIST_NAME, getEmailNotificationToList()));
+    props.setProperty(EMAIL_NOTIFICATIONS_ENABLED_NAME,
+        toString(EMAIL_NOTIFICATIONS_ENABLED_NAME, isEmailNotificationEnabled()));
+    props.setProperty(EMAIL_NOTIFICATIONS_HOST_NAME,
+        toString(EMAIL_NOTIFICATIONS_HOST_NAME, getEmailNotificationHost()));
+    props.setProperty(EMAIL_NOTIFICATIONS_FROM_NAME,
+        toString(EMAIL_NOTIFICATIONS_FROM_NAME, getEmailNotificationFrom()));
+    props.setProperty(EMAIL_NOTIFICATIONS_TO_LIST_NAME,
+        toString(EMAIL_NOTIFICATIONS_TO_LIST_NAME, getEmailNotificationToList()));
-    props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION, toString(CLUSTER_SSL_REQUIRE_AUTHENTICATION, isSSLAuthenticationRequired()));
+    props.setProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION,
+        toString(CLUSTER_SSL_REQUIRE_AUTHENTICATION, isSSLAuthenticationRequired()));
-      for (Iterator iter = sslProps.keySet().iterator(); iter.hasNext(); ) {
+      for (Iterator iter = sslProps.keySet().iterator(); iter.hasNext();) {
-        props.setProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i, toString(LOCATOR_PRODUCT_DIRECTORY_NAME, locator.getProductDirectory()));
-        props.setProperty(LOCATOR_WORKING_DIRECTORY_NAME + i, toString(LOCATOR_WORKING_DIRECTORY_NAME, locator.getWorkingDirectory()));
-        props.setProperty(LOCATOR_REMOTE_COMMAND + i, toString(LOCATOR_REMOTE_COMMAND, locator.getRemoteCommand()));
-        props.setProperty(LOCATOR_BIND_ADDRESS + i, toString(LOCATOR_BIND_ADDRESS, locator.getBindAddress()));
-        //        props.setProperty(LOCATOR_DS_PROPERTIES + i,
-        //                          getdsPropertiesString(locator));
+        props.setProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i,
+            toString(LOCATOR_PRODUCT_DIRECTORY_NAME, locator.getProductDirectory()));
+        props.setProperty(LOCATOR_WORKING_DIRECTORY_NAME + i,
+            toString(LOCATOR_WORKING_DIRECTORY_NAME, locator.getWorkingDirectory()));
+        props.setProperty(LOCATOR_REMOTE_COMMAND + i,
+            toString(LOCATOR_REMOTE_COMMAND, locator.getRemoteCommand()));
+        props.setProperty(LOCATOR_BIND_ADDRESS + i,
+            toString(LOCATOR_BIND_ADDRESS, locator.getBindAddress()));
+        // props.setProperty(LOCATOR_DS_PROPERTIES + i,
+        // getdsPropertiesString(locator));
-      props.setProperty(ENTITY_CONFIG_XML_FILE_NAME, toString(ENTITY_CONFIG_XML_FILE_NAME, getEntityConfigXMLFile()));
+      props.setProperty(ENTITY_CONFIG_XML_FILE_NAME,
+          toString(ENTITY_CONFIG_XML_FILE_NAME, getEntityConfigXMLFile()));
-      //       props.setProperty(SYSTEM_ID_NAME, toString(getSystemId()));
+      // props.setProperty(SYSTEM_ID_NAME, toString(getSystemId()));
-      props.setProperty(LOG_DISK_SPACE_LIMIT_NAME, toString(LOG_DISK_SPACE_LIMIT_NAME, getLogDiskSpaceLimit()));
-      props.setProperty(LOG_FILE_SIZE_LIMIT_NAME, toString(LOG_FILE_SIZE_LIMIT_NAME, getLogFileSizeLimit()));
-      props.setProperty(REFRESH_INTERVAL_NAME, toString(REFRESH_INTERVAL_NAME, getRefreshInterval()));
+      props.setProperty(LOG_DISK_SPACE_LIMIT_NAME,
+          toString(LOG_DISK_SPACE_LIMIT_NAME, getLogDiskSpaceLimit()));
+      props.setProperty(LOG_FILE_SIZE_LIMIT_NAME,
+          toString(LOG_FILE_SIZE_LIMIT_NAME, getLogFileSizeLimit()));
+      props.setProperty(REFRESH_INTERVAL_NAME,
+          toString(REFRESH_INTERVAL_NAME, getRefreshInterval()));
-  //   Agent specific properties
+  // Agent specific properties
+   * 
+   * 
-  //   Implementation methods
+  // Implementation methods
+   * 
-    this.rmiRegistryEnabled = validateBoolean(props.getProperty(RMI_REGISTRY_ENABLED_NAME), DEFAULT_RMI_REGISTRY_ENABLED);
+    this.rmiRegistryEnabled =
+        validateBoolean(props.getProperty(RMI_REGISTRY_ENABLED_NAME), DEFAULT_RMI_REGISTRY_ENABLED);
-    this.agentSSLEnabled = validateBoolean(props.getProperty(AGENT_SSL_ENABLED_NAME), DEFAULT_AGENT_SSL_ENABLED);
-    this.agentSSLProtocols = validateNonEmptyString(props.getProperty(AGENT_SSL_PROTOCOLS_NAME), DEFAULT_AGENT_SSL_PROTOCOLS);
-    this.agentSSLCiphers = validateNonEmptyString(props.getProperty(AGENT_SSL_CIPHERS_NAME), DEFAULT_AGENT_SSL_CIPHERS);
-    this.agentSSLRequireAuth = validateBoolean(props.getProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME), DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION);
-    this.httpSSLRequireAuth = validateBoolean(props.getProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME), DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION);
+    this.agentSSLEnabled =
+        validateBoolean(props.getProperty(AGENT_SSL_ENABLED_NAME), DEFAULT_AGENT_SSL_ENABLED);
+    this.agentSSLProtocols = validateNonEmptyString(props.getProperty(AGENT_SSL_PROTOCOLS_NAME),
+        DEFAULT_AGENT_SSL_PROTOCOLS);
+    this.agentSSLCiphers = validateNonEmptyString(props.getProperty(AGENT_SSL_CIPHERS_NAME),
+        DEFAULT_AGENT_SSL_CIPHERS);
+    this.agentSSLRequireAuth =
+        validateBoolean(props.getProperty(AGENT_SSL_REQUIRE_AUTHENTICATION_NAME),
+            DEFAULT_AGENT_SSL_REQUIRE_AUTHENTICATION);
+    this.httpSSLRequireAuth =
+        validateBoolean(props.getProperty(HTTP_SSL_REQUIRE_AUTHENTICATION_NAME),
+            DEFAULT_HTTP_SSL_REQUIRE_AUTHENTICATION);
-    this.httpAuthEnabled = validateBoolean(props.getProperty(HTTP_AUTHENTICATION_ENABLED_NAME), DEFAULT_HTTP_AUTHENTICATION_ENABLED);
-    this.httpAuthUser = validateNonEmptyString(props.getProperty(HTTP_AUTHENTICATION_USER_NAME), DEFAULT_HTTP_AUTHENTICATION_USER);
-    this.httpAuthPassword = validateNonEmptyString(props.getProperty(HTTP_AUTHENTICATION_PASSWORD_NAME), DEFAULT_HTTP_AUTHENTICATION_PASSWORD);
+    this.httpAuthEnabled = validateBoolean(props.getProperty(HTTP_AUTHENTICATION_ENABLED_NAME),
+        DEFAULT_HTTP_AUTHENTICATION_ENABLED);
+    this.httpAuthUser = validateNonEmptyString(props.getProperty(HTTP_AUTHENTICATION_USER_NAME),
+        DEFAULT_HTTP_AUTHENTICATION_USER);
+    this.httpAuthPassword = validateNonEmptyString(
+        props.getProperty(HTTP_AUTHENTICATION_PASSWORD_NAME), DEFAULT_HTTP_AUTHENTICATION_PASSWORD);
-    this.sslProtocols = validateNonEmptyString(props.getProperty(CLUSTER_SSL_PROTOCOLS), DEFAULT_SSL_PROTOCOLS);
-    this.sslCiphers = validateNonEmptyString(props.getProperty(CLUSTER_SSL_CIPHERS), DEFAULT_SSL_CIPHERS);
-    this.sslAuthenticationRequired = validateBoolean(props.getProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION), DEFAULT_SSL_REQUIRE_AUTHENTICATION);
+    this.sslProtocols =
+        validateNonEmptyString(props.getProperty(CLUSTER_SSL_PROTOCOLS), DEFAULT_SSL_PROTOCOLS);
+    this.sslCiphers =
+        validateNonEmptyString(props.getProperty(CLUSTER_SSL_CIPHERS), DEFAULT_SSL_CIPHERS);
+    this.sslAuthenticationRequired = validateBoolean(
+        props.getProperty(CLUSTER_SSL_REQUIRE_AUTHENTICATION), DEFAULT_SSL_REQUIRE_AUTHENTICATION);
-    this.isEmailNotificationEnabled = validateBoolean(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_ENABLED_NAME), DEFAULT_EMAIL_NOTIFICATIONS_ENABLED);
-    this.emailNotificationHostName = validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_HOST_NAME), DEFAULT_EMAIL_HOST);
-    this.emailNotificationFrom = validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_FROM_NAME), DEFAULT_EMAIL_FROM);
-    this.emailNotificationToList = validateNonEmptyString(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_TO_LIST_NAME), DEFAULT_EMAIL_TO_LIST);
+    this.isEmailNotificationEnabled =
+        validateBoolean(props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_ENABLED_NAME),
+            DEFAULT_EMAIL_NOTIFICATIONS_ENABLED);
+    this.emailNotificationHostName = validateNonEmptyString(
+        props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_HOST_NAME), DEFAULT_EMAIL_HOST);
+    this.emailNotificationFrom = validateNonEmptyString(
+        props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_FROM_NAME), DEFAULT_EMAIL_FROM);
+    this.emailNotificationToList = validateNonEmptyString(
+        props.getProperty(AgentConfig.EMAIL_NOTIFICATIONS_TO_LIST_NAME), DEFAULT_EMAIL_TO_LIST);
-    this.stateSaveFile = validateNonEmptyString(props.getProperty(AgentConfig.STATE_SAVE_FILE_NAME), DEFAULT_STATE_SAVE_FILE);
+    this.stateSaveFile = validateNonEmptyString(props.getProperty(AgentConfig.STATE_SAVE_FILE_NAME),
+        DEFAULT_STATE_SAVE_FILE);
-        File workDir = validateWorkingDirectory(props.getProperty(LOCATOR_WORKING_DIRECTORY_NAME + i));
-        File prodDir = new File(validateProductDirectory(props.getProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i)));
+        File workDir =
+            validateWorkingDirectory(props.getProperty(LOCATOR_WORKING_DIRECTORY_NAME + i));
+        File prodDir = new File(
+            validateProductDirectory(props.getProperty(LOCATOR_PRODUCT_DIRECTORY_NAME + i)));
-      // This is how we break out of the loop?  Yuck!
+      // This is how we break out of the loop? Yuck!
-       * LogWriter is initialized afterwards. Hence printing the stack trace.
-       * This is done to avoid creation of duplicate log writer.
+       * LogWriter is initialized afterwards. Hence printing the stack trace. This is done to avoid
+       * creation of duplicate log writer.
-   * @param props the <code>Properties</code> object of filter agent configuration attributes out of.
+   * 
+   * @param props the <code>Properties</code> object of filter agent configuration attributes out
+   *        of.
-   * Appends the log-file property to the Properties object if set of properties does not already define the
-   * log-file property or the gemfire.agent.log-file property.
+   * Appends the log-file property to the Properties object if set of properties does not already
+   * define the log-file property or the gemfire.agent.log-file property.
-   * @param props the <code>Properties</code> to append the log-file property to if the property does not exist.
+   * 
+   * @param props the <code>Properties</code> to append the log-file property to if the property
+   *        does not exist.
-    if (!(props.containsKey(DistributedSystemConfig.LOG_FILE_NAME) || props.containsKey(SYSTEM_PROPERTY_PREFIX + DistributedSystemConfig.LOG_FILE_NAME))) {
+    if (!(props.containsKey(DistributedSystemConfig.LOG_FILE_NAME)
+        || props.containsKey(SYSTEM_PROPERTY_PREFIX + DistributedSystemConfig.LOG_FILE_NAME))) {
-   * Appends any additional property-file specified properties to the supplied
-   * Properties. If the supplied property overrides the property in the
-   * property-file, then property-file value is ignored. System Properties always
-   * override the supplied properties
+   * Appends any additional property-file specified properties to the supplied Properties. If the
+   * supplied property overrides the property in the property-file, then property-file value is
+   * ignored. System Properties always override the supplied properties
+   * 
-            appendedProps.setProperty(key.toString(), agentPropertyFileProperties.getProperty(key.toString()));
+            appendedProps.setProperty(key.toString(),
+                agentPropertyFileProperties.getProperty(key.toString()));
-        throw new GemFireIOException(LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(url.toString()), e);
+        throw new GemFireIOException(
+            LocalizedStrings.AgentConfigImpl_FAILED_READING_0.toLocalizedString(url.toString()), e);
-   * @throws IllegalArgumentException If <code>prop</code> is not a recognized agent
-   * configuration property
+   * 
+   * @throws IllegalArgumentException If <code>prop</code> is not a recognized agent configuration
+   *         property
-      return LocalizedStrings.AgentConfigImpl_MINIMUM_LEVEL_OF_LOGGING_PERFORMED_BY_AGENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_MINIMUM_LEVEL_OF_LOGGING_PERFORMED_BY_AGENT
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WHETHER_THE_AGENT_SHOULD_PRINT_DEBUGGING_INFORMATION.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WHETHER_THE_AGENT_SHOULD_PRINT_DEBUGGING_INFORMATION
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_LIMIT_IN_MEGABYTES_OF_HOW_MUCH_DISK_SPACE_CAN_BE_CONSUMED_BY_OLD_INACTIVE_LOG_FILES.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_LIMIT_IN_MEGABYTES_OF_HOW_MUCH_DISK_SPACE_CAN_BE_CONSUMED_BY_OLD_INACTIVE_LOG_FILES
+          .toLocalizedString();
-        .toLocalizedString();
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_MULTICAST_PORT_USED_TO_CONNECT_TO_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_MULTICAST_PORT_USED_TO_CONNECT_TO_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_MULTICAST_ADDRESS_USED_TO_CONNECT_TO_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_MULTICAST_ADDRESS_USED_TO_CONNECT_TO_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_IP_ADDRESS_OF_THE_AGENTS_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IP_ADDRESS_OF_THE_AGENTS_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_ADDRESSES_OF_THE_LOCATORS_OF_THE_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_ADDRESSES_OF_THE_LOCATORS_OF_THE_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_ALLOWED_RANGE_OF_UDP_PORTS_TO_FORM_UNIQUE_MEMBERSHIP_ID.toLocalizedString();
-      //     } else if (prop.equals(SYSTEM_ID_NAME)) {
-      //       return "The id of the distributed system";
+      return LocalizedStrings.AgentConfigImpl_ALLOWED_RANGE_OF_UDP_PORTS_TO_FORM_UNIQUE_MEMBERSHIP_ID
+          .toLocalizedString();
+      // } else if (prop.equals(SYSTEM_ID_NAME)) {
+      // return "The id of the distributed system";
-      return LocalizedStrings.AgentConfigImpl_XML_CONFIGURATION_FILE_FOR_MANAGED_ENTITIES.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_XML_CONFIGURATION_FILE_FOR_MANAGED_ENTITIES
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_REFRESH_INTERVAL_IN_SECONDS_FOR_AUTOREFRESH_OF_MEMBERS_AND_STATISTIC_RESOURCES.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_REFRESH_INTERVAL_IN_SECONDS_FOR_AUTOREFRESH_OF_MEMBERS_AND_STATISTIC_RESOURCES
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_COMMAND_PREFIX_USED_FOR_LAUNCHING_MEMBERS_OF_THE_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_COMMAND_PREFIX_USED_FOR_LAUNCHING_MEMBERS_OF_THE_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_DOES_THE_DISTRIBUTED_SYSTEM_COMMUNICATE_USING_SSL.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_DOES_THE_DISTRIBUTED_SYSTEM_COMMUNICATE_USING_SSL
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_SSL_PROTOCOLS_USED_TO_COMMUNICATE_WITH_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_SSL_PROTOCOLS_USED_TO_COMMUNICATE_WITH_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_SSL_CIPHERS_USED_TO_COMMUNICATE_WITH_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_SSL_CIPHERS_USED_TO_COMMUNICATE_WITH_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_DOES_CONNECTING_TO_THE_DISTRIBUTED_SYSTEM_REQUIRE_SSL_AUTHENTICATION.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_DOES_CONNECTING_TO_THE_DISTRIBUTED_SYSTEM_REQUIRE_SSL_AUTHENTICATION
+          .toLocalizedString();
-        throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_UNKNOWN_CONFIG_PROPERTY_0.toLocalizedString(prop));
+        throw new IllegalArgumentException(
+            LocalizedStrings.AgentConfigImpl_UNKNOWN_CONFIG_PROPERTY_0.toLocalizedString(prop));
-   * Returns a description of the given agent config property or
-   * <code>null</code> if <code>prop</code> is not a recognized agent
-   * property.
+   * Returns a description of the given agent config property or <code>null</code> if
+   * <code>prop</code> is not a recognized agent property.
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_AUTOMATICALLY_CONNECT_TO_THE_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_AUTOMATICALLY_CONNECT_TO_THE_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      //     } else if (prop.equals(SYSTEM_NAME_NAME)) {
-      //       return "The logical name of the distributed system";
+      // } else if (prop.equals(SYSTEM_NAME_NAME)) {
+      // return "The logical name of the distributed system";
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_HTTP_JMX_ADAPTER.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_HTTP_JMX_ADAPTER
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_HTTP_ADAPTERS_SOCKETS.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_HTTP_ADAPTERS_SOCKETS
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_THE_HTTP_ADAPTER_WILL_BE_STARTED.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_THE_HTTP_ADAPTER_WILL_BE_STARTED
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_RMI_JMX_ADAPTER.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_RMI_JMX_ADAPTER
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_HOST_AN_RMI_REGISTRY.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_HOST_AN_RMI_REGISTRY
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_RMI_ADAPTERS_SOCKETS.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_RMI_ADAPTERS_SOCKETS
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_TO_CONTACT_THE_RMI_REGISTER.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_THE_PORT_ON_WHICH_TO_CONTACT_THE_RMI_REGISTER
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_THE_PORT_USED_TO_CONFIGURE_RMI_CONNECTOR_SERVER.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_THE_PORT_USED_TO_CONFIGURE_RMI_CONNECTOR_SERVER
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_SNMP_JMX_ADAPTER.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_START_THE_SNMP_JMX_ADAPTER
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_SNMP_ADAPTERS_SOCKETS.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_BIND_ADDRESS_OF_SNMP_ADAPTERS_SOCKETS
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_THE_DIRECTORY_IN_WHICH_SNMP_CONFIGURATION_RESIDES.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_THE_DIRECTORY_IN_WHICH_SNMP_CONFIGURATION_RESIDES
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_COMMUNICATE_USING_SSL.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_COMMUNICATE_USING_SSL
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_THE_SSL_PROTOCOLS_USED_BY_THE_AGENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_THE_SSL_PROTOCOLS_USED_BY_THE_AGENT
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_REQUIRE_SSL_AUTHENTICATION.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_AGENT_REQUIRE_SSL_AUTHENTICATION
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_ADAPTER_REQUIRE_SSL_AUTHENTICATION.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_ADAPTER_REQUIRE_SSL_AUTHENTICATION
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_JMX_ADAPTER_USE_HTTP_AUTHENTICATION.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_WILL_THE_HTTP_JMX_ADAPTER_USE_HTTP_AUTHENTICATION
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_THE_USER_NAME_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_THE_USER_NAME_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_THE_PASSWORD_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_THE_PASSWORD_FOR_AUTHENTICATION_IN_THE_HTTP_JMX_ADAPTER
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_PROPERTY_FILE_FROM_WHICH_AGENT_READS_CONFIGURATION.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_PROPERTY_FILE_FROM_WHICH_AGENT_READS_CONFIGURATION
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_HOST_ON_WHICH_THE_DISTRIBUTED_SYSTEMS_LOCATOR_RUNS
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_GEMFIRE_PRODUCT_DIRECTORY_USED_TO_LAUNCH_A_LOCATOR.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_GEMFIRE_PRODUCT_DIRECTORY_USED_TO_LAUNCH_A_LOCATOR
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_DIRECTORY_IN_WHICH_A_LOCATOR_WILL_BE_LAUNCHED.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_DIRECTORY_IN_WHICH_A_LOCATOR_WILL_BE_LAUNCHED
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_COMMAND_PREFIX_USED_WHEN_LAUNCHING_A_LOCATOR.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_COMMAND_PREFIX_USED_WHEN_LAUNCHING_A_LOCATOR
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_IP_ADDRESS_TO_USE_WHEN_CONTACTING_LOCATOR.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IP_ADDRESS_TO_USE_WHEN_CONTACTING_LOCATOR
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_PROPERTIES_FOR_CONFIGURING_A_LOCATORS_DISTRIBUTED_SYSTEM.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_PROPERTIES_FOR_CONFIGURING_A_LOCATORS_DISTRIBUTED_SYSTEM
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_IF_EMAIL_NOTIFICATIONS_ARE_ENABLED_OR_NOT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_IF_EMAIL_NOTIFICATIONS_ARE_ENABLED_OR_NOT
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_ADDRESS_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_ADDRESS_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_SERVER_HOST_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_EMAIL_SERVER_HOST_USING_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_COMMA_SEPARATED_EMAIL_ADDRESSES_LIST_TO_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_COMMA_SEPARATED_EMAIL_ADDRESSES_LIST_TO_WHICH_EMAIL_NOTIFICATIONS_ARE_SENT
+          .toLocalizedString();
-      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_NAME_OF_THE_FILE_TO_BE_USED_FOR_SAVING_AGENT_STATE.toLocalizedString();
+      return LocalizedStrings.AgentConfigImpl_IDENTIFY_THE_NAME_OF_THE_FILE_TO_BE_USED_FOR_SAVING_AGENT_STATE
+          .toLocalizedString();
-   * Parses the array of command-line arguments (format: key=value) into an
-   * instance of Properties.
+   * Parses the array of command-line arguments (format: key=value) into an instance of Properties.
+   * 
-  //   Validation methods for configuration options
+  // Validation methods for configuration options
-   * Makes sure that the mcast port and locators are correct and
-   * consistent.
+   * Makes sure that the mcast port and locators are correct and consistent.
+   * 
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
-        HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT)
-      }));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+              .toLocalizedString(new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT),
+                  Integer.valueOf(MAX_HTTP_PORT)}));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
-        RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
-      }));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+              .toLocalizedString(new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+                  Integer.valueOf(MAX_RMI_PORT)}));
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
-        RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
-      }));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+              .toLocalizedString(new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+                  Integer.valueOf(MAX_RMI_PORT)}));
-   * Returns {@link
-   * org.apache.geode.admin.jmx.AgentConfig#DEFAULT_HTTP_PORT}
-   * if httpPort is empty; else validates
-   * that it's an integer and returns the int form.
+   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_HTTP_PORT} if httpPort is empty;
+   * else validates that it's an integer and returns the int form.
-   * Validates that httpPort is either zero or within the {@link
-   * org.apache.geode.admin.jmx.AgentConfig#MIN_HTTP_PORT} and {@link
-   * org.apache.geode.admin.jmx.AgentConfig#MAX_HTTP_PORT} values.
+   * Validates that httpPort is either zero or within the
+   * {@link org.apache.geode.admin.jmx.AgentConfig#MIN_HTTP_PORT} and
+   * {@link org.apache.geode.admin.jmx.AgentConfig#MAX_HTTP_PORT} values.
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
-        HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT), Integer.valueOf(MAX_HTTP_PORT)
-      }));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+              .toLocalizedString(new Object[] {HTTP_PORT_NAME, Integer.valueOf(MIN_HTTP_PORT),
+                  Integer.valueOf(MAX_HTTP_PORT)}));
-   * Returns {@link
-   * org.apache.geode.admin.jmx.AgentConfig#DEFAULT_HTTP_BIND_ADDRESS}
-   * unless httpBindAddress can be used to
-   * create a valid InetAddress.
+   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_HTTP_BIND_ADDRESS} unless
+   * httpBindAddress can be used to create a valid InetAddress.
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_HTTPBINDADDRESS_MUST_NOT_BE_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_HTTPBINDADDRESS_MUST_NOT_BE_NULL.toLocalizedString());
-   * Returns {@link
-   * org.apache.geode.admin.jmx.AgentConfig#DEFAULT_SNMP_BIND_ADDRESS}
-   * unless snmpBindAddress can be used to
-   * create a valid InetAddress.
+   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_SNMP_BIND_ADDRESS} unless
+   * snmpBindAddress can be used to create a valid InetAddress.
-  //  /**
-  //   * Validates that snmpBindAddress is not null and then returns the string form of it.
-  //   */
-  //  private String validateSnmpBindAddress(InetAddress snmpBindAddress) {
-  //    if (snmpBindAddress == null) {
-  //      throw new IllegalArgumentException("SnmpBindAddress must not be null");
-  //    }
-  //    return toString(snmpBindAddress);
-  //  }
+  // /**
+  // * Validates that snmpBindAddress is not null and then returns the string form of it.
+  // */
+  // private String validateSnmpBindAddress(InetAddress snmpBindAddress) {
+  // if (snmpBindAddress == null) {
+  // throw new IllegalArgumentException("SnmpBindAddress must not be null");
+  // }
+  // return toString(snmpBindAddress);
+  // }
-   * SnmpDirectory must be specified if SNMP is enabled.  This directory must
-   * also exist.
+   * SnmpDirectory must be specified if SNMP is enabled. This directory must also exist.
-    /*if (isSnmpEnabled() && isEmpty(snmpDir)) {
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_SNMPDIRECTORY_MUST_BE_SPECIFIED_BECAUSE_SNMP_IS_ENABLED.toLocalizedString());
-    }
-    File root new File(snmpDir);
-    if (!root.exists())
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_SNMPDIRECTORY_DOES_NOT_EXIST.toLocalizedString());
-    */
+    /*
+     * if (isSnmpEnabled() && isEmpty(snmpDir)) { throw new
+     * IllegalArgumentException(LocalizedStrings.
+     * AgentConfigImpl_SNMPDIRECTORY_MUST_BE_SPECIFIED_BECAUSE_SNMP_IS_ENABLED.toLocalizedString());
+     * } File root new File(snmpDir); if (!root.exists()) throw new
+     * IllegalArgumentException(LocalizedStrings.AgentConfigImpl_SNMPDIRECTORY_DOES_NOT_EXIST.
+     * toLocalizedString());
+     */
-   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_RMI_PORT}
-   * if rmiPort is empty; else validates
-   * that it's an integer and returns the int form.
+   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_RMI_PORT} if rmiPort is empty;
+   * else validates that it's an integer and returns the int form.
-   * Validates that rmiPort is either zero or within the {@link
-   * org.apache.geode.admin.jmx.AgentConfig#MIN_RMI_PORT}
-   * and {@link org.apache.geode.admin.jmx.AgentConfig#MAX_RMI_PORT}
-   * values.
+   * Validates that rmiPort is either zero or within the
+   * {@link org.apache.geode.admin.jmx.AgentConfig#MIN_RMI_PORT} and
+   * {@link org.apache.geode.admin.jmx.AgentConfig#MAX_RMI_PORT} values.
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
-        RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
-      }));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+              .toLocalizedString(new Object[] {RMI_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+                  Integer.valueOf(MAX_RMI_PORT)}));
-   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_RMI_SERVER_PORT}
-   * if rmi-server-port is empty; else validates that it's an integer within the
-   * allowed range and returns the int form.
+   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_RMI_SERVER_PORT} if
+   * rmi-server-port is empty; else validates that it's an integer within the allowed range and
+   * returns the int form.
-   * Validates that rmiPort is either zero or within the {@link
-   * org.apache.geode.admin.jmx.AgentConfig#MIN_RMI_PORT}
-   * and {@link org.apache.geode.admin.jmx.AgentConfig#MAX_RMI_PORT}
-   * values.
+   * Validates that rmiPort is either zero or within the
+   * {@link org.apache.geode.admin.jmx.AgentConfig#MIN_RMI_PORT} and
+   * {@link org.apache.geode.admin.jmx.AgentConfig#MAX_RMI_PORT} values.
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2.toLocalizedString(new Object[] {
-        RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT), Integer.valueOf(MAX_RMI_PORT)
-      }));
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_0_MUST_BE_ZERO_OR_AN_INTEGER_BETWEEN_1_AND_2
+              .toLocalizedString(new Object[] {RMI_SERVER_PORT_NAME, Integer.valueOf(MIN_RMI_PORT),
+                  Integer.valueOf(MAX_RMI_PORT)}));
-   * Returns {@link
-   * org.apache.geode.admin.jmx.AgentConfig#DEFAULT_RMI_BIND_ADDRESS}
-   * unless rmiBindAddress can be used to create a
-   * valid InetAddress.
+   * Returns {@link org.apache.geode.admin.jmx.AgentConfig#DEFAULT_RMI_BIND_ADDRESS} unless
+   * rmiBindAddress can be used to create a valid InetAddress.
-  //  /**
-  //   * Validates that rmiBindAddress is not null and then returns the string form of it.
-  //   */
-  //  private String validateRmiBindAddress(InetAddress rmiBindAddress) {
-  //    if (rmiBindAddress == null) {
-  //      throw new IllegalArgumentException("RmiBindAddress must not be null");
-  //    }
-  //    return toString(rmiBindAddress);
-  //  }
+  // /**
+  // * Validates that rmiBindAddress is not null and then returns the string form of it.
+  // */
+  // private String validateRmiBindAddress(InetAddress rmiBindAddress) {
+  // if (rmiBindAddress == null) {
+  // throw new IllegalArgumentException("RmiBindAddress must not be null");
+  // }
+  // return toString(rmiBindAddress);
+  // }
-      throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_LOCATOR_WORKINGDIRECTORY_MUST_NOT_BE_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.AgentConfigImpl_LOCATOR_WORKINGDIRECTORY_MUST_NOT_BE_NULL
+              .toLocalizedString());
-  //   Static utility methods
+  // Static utility methods
-   * Gets an <code>URL</code> for the property file, if one can be found,
-   * that the create method would use to determine the systemName and
-   * product home.
+   * Gets an <code>URL</code> for the property file, if one can be found, that the create method
+   * would use to determine the systemName and product home.
-   * <li> the current directory
-   * <li> the home directory
-   * <li> the class path
+   * <li>the current directory
+   * <li>the home directory
+   * <li>the class path
-   * @return a <code>URL</code> that names the property file;
-   * otherwise Null if no property file was found.
+   * 
+   * @return a <code>URL</code> that names the property file; otherwise Null if no property file was
+   *         found.
-   * Returns string representation of the specified object with special
-   * handling for InetAddress.
+   * Returns string representation of the specified object with special handling for InetAddress.
+   * 
-  //   SSL support...
+  // SSL support...
