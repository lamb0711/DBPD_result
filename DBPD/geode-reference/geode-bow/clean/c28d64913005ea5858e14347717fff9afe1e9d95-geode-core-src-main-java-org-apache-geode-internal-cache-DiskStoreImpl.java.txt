Merge branch 'release/1.4.0'

-import static org.apache.geode.distributed.ConfigurationProperties.*;
+import static org.apache.geode.distributed.ConfigurationProperties.CACHE_XML_FILE;
+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;
+import static org.apache.geode.internal.cache.entries.DiskEntry.Helper.readRawValue;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.apache.commons.io.FileUtils;
-import org.apache.geode.internal.cache.DiskEntry.Helper.ValueWrapper;
-import org.apache.geode.internal.cache.DiskEntry.RecoveredEntry;
-import org.apache.geode.internal.cache.lru.LRUAlgorithm;
-import org.apache.geode.internal.cache.lru.LRUStatistics;
+import org.apache.geode.internal.cache.backup.BackupLock;
+import org.apache.geode.internal.cache.backup.BackupManager;
+import org.apache.geode.internal.cache.entries.DiskEntry;
+import org.apache.geode.internal.cache.entries.DiskEntry.Helper.ValueWrapper;
+import org.apache.geode.internal.cache.entries.DiskEntry.RecoveredEntry;
+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.eviction.EvictionStatistics;
-  private final static boolean ENABLE_NOTIFY_TO_ROLL =
+  private static final boolean ENABLE_NOTIFY_TO_ROLL =
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  void put(LocalRegion region, DiskEntry entry, ValueWrapper value, boolean async)
+  void put(InternalRegion region, DiskEntry entry, ValueWrapper value, boolean async)
-  void putVersionTagOnly(LocalRegion region, VersionTag tag, boolean async) {
+  public void putVersionTagOnly(InternalRegion region, VersionTag tag, boolean async) {
-   * 
+   *
-   * 
+   *
-   * 
+   *
-      value = DiskEntry.Helper.readRawValue(bytes, bb.getVersion(), null);
+      value = readRawValue(bytes, bb.getVersion(), null);
-   * 
+   *
-      value = DiskEntry.Helper.readRawValue(bytes, bb.getVersion(), null);
+      value = readRawValue(bytes, bb.getVersion(), null);
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  void remove(LocalRegion region, DiskEntry entry, boolean async, boolean isClear)
+  void remove(InternalRegion region, DiskEntry entry, boolean async, boolean isClear)
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    LocalRegion region = ade.region;
+    InternalRegion region = ade.region;
-        if (ade.region.isDestroyed) {
+        if (ade.region.isDestroyed()) {
-                    LocalRegion region = ade.region;
+                    InternalRegion region = ade.region;
+      cleanupOrphanedBackupDirectories();
+
+  private void cleanupOrphanedBackupDirectories() {
+    for (DirectoryHolder directoryHolder : getDirectoryHolders()) {
+      try {
+        List<Path> backupDirectories = Files.list(directoryHolder.getDir().toPath())
+            .filter((path) -> path.getFileName().toString()
+                .startsWith(BackupManager.DATA_STORES_TEMPORARY_DIRECTORY))
+            .filter(p -> Files.isDirectory(p)).collect(Collectors.toList());
+        for (Path backupDirectory : backupDirectories) {
+          try {
+            logger.info("Deleting orphaned backup temporary directory: " + backupDirectory);
+            FileUtils.deleteDirectory(backupDirectory.toFile());
+          } catch (IOException e) {
+            logger.warn("Failed to remove orphaned backup temporary directory: " + backupDirectory,
+                e);
+          }
+        }
+      } catch (IOException e) {
+        logger.warn(e);
+      }
+    }
+  }
+
-   * 
+   *
-  int getInforFileDirIndex() {
+  public int getInforFileDirIndex() {
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  Oplog[] getAllOplogsForBackup() {
+  public Oplog[] getAllOplogsForBackup() {
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  DiskInitFile getDiskInitFile() {
+  public DiskInitFile getDiskInitFile() {
-  // public String toString() {
-  // StringBuffer sb = new StringBuffer();
-  // sb.append("<");
-  // sb.append(getName());
-  // if (getOwnedByRegion()) {
-  // sb.append(" OWNED_BY_REGION");
-  // }
-  // sb.append(">");
-  // return sb.toString();
-  // }
-
-    public final LocalRegion region;
+    public final InternalRegion region;
-    public AsyncDiskEntry(LocalRegion region, DiskEntry de, VersionTag tag) {
+    public AsyncDiskEntry(InternalRegion region, DiskEntry de, VersionTag tag) {
-    public AsyncDiskEntry(LocalRegion region, VersionTag tag) {
+    public AsyncDiskEntry(InternalRegion region, VersionTag tag) {
-   * 
+   *
-      Object value = re._getValueRetain(foundPdx, true);
+      Object value = re.getValueRetain(foundPdx, true);
-      Object value = re._getValueRetain(foundPdx, true);
+      Object value = re.getValueRetain(foundPdx, true);
-      Object value = re._getValueRetain(foundPdx, true);
+      Object value = re.getValueRetain(foundPdx, true);
-      Object value = re._getValueRetain(foundPdx, true);
+      Object value = re.getValueRetain(foundPdx, true);
-  private final HashMap<String, LRUStatistics> prlruStatMap = new HashMap<String, LRUStatistics>();
+  private final HashMap<String, EvictionStatistics> prlruStatMap =
+      new HashMap<String, EvictionStatistics>();
-  LRUStatistics getOrCreatePRLRUStats(PlaceHolderDiskRegion dr) {
+  EvictionStatistics getOrCreatePRLRUStats(PlaceHolderDiskRegion dr) {
-    LRUStatistics result = null;
+    EvictionStatistics result = null;
-        LRUAlgorithm ec = ea.createEvictionController(null, dr.getOffHeap());
+        EvictionController ec = ea.createEvictionController(null, dr.getOffHeap());
-        result = ec.getLRUHelper().initStats(dr, sf);
+        result = ec.initStats(dr, sf);
-   * If we have recovered a bucket earlier for the given pr then we will have an LRUStatistics to
-   * return for it. Otherwise return null.
+   * If we have recovered a bucket earlier for the given pr then we will have an EvictionStatistics
+   * to return for it. Otherwise return null.
-  LRUStatistics getPRLRUStats(PartitionedRegion pr) {
+  EvictionStatistics getPRLRUStats(PartitionedRegion pr) {
-    LRUStatistics result = null;
+    EvictionStatistics result = null;
-   * 
+   *
-   * 
+   *
-  protected void waitForDelayedWrites() {
+  public void waitForDelayedWrites() {
-   * 
+   *
