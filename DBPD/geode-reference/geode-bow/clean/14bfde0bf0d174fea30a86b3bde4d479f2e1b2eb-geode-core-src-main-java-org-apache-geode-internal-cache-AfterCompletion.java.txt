Merge branch 'release/1.8.0'

-  private int status = -1;
-  private boolean cancelled;
+  private enum Action {
+    COMMIT, ROLLBACK, CANCEL
+  };
+
+  private Action action;
+
-    waitForExecuteOrCancel(cancelCriterion);
+    try {
+      waitForExecuteOrCancel(cancelCriterion);
+    } catch (RuntimeException | Error ignore) {
+      action = Action.CANCEL;
+    }
-
-      if (cancelled) {
-        txState.doCleanup();
-      } else {
-        txState.doAfterCompletion(status);
+      switch (action) {
+        case CANCEL:
+          txState.doCleanup();
+          break;
+        case COMMIT:
+          txState.doAfterCompletionCommit();
+          break;
+        case ROLLBACK:
+          txState.doAfterCompletionRollback();
+          break;
-    waitForCondition(cancelCriterion, () -> status != -1 || cancelled);
+    waitForCondition(cancelCriterion, () -> action != null);
-      cancelCriterion.checkCancelInProgress(null);
+      if (cancelCriterion != null) {
+        cancelCriterion.checkCancelInProgress(null);
+      }
-  public synchronized void execute(CancelCriterion cancelCriterion, int status) {
-    this.status = status;
-    signalAndWaitForDoOp(cancelCriterion);
+  public void executeCommit() {
+    executeAction(Action.COMMIT);
-  private void signalAndWaitForDoOp(CancelCriterion cancelCriterion) {
-    notifyAll();
-    waitUntilFinished(cancelCriterion);
+  public void executeRollback() {
+    executeAction(Action.ROLLBACK);
+  }
+
+  private synchronized void executeAction(Action action) {
+    this.action = action;
+    signalAndWaitForDoOp();
+
-  private void waitUntilFinished(CancelCriterion cancelCriterion) {
-    waitForCondition(cancelCriterion, () -> finished);
+  private void signalAndWaitForDoOp() {
+    notifyAll();
+    waitUntilFinished();
-  public synchronized void cancel(CancelCriterion cancelCriterion) {
-    cancelled = true;
-    signalAndWaitForDoOp(cancelCriterion);
+  private void waitUntilFinished() {
+    waitForCondition(null, () -> finished);
+  }
+
+  public synchronized void cancel() {
+    action = Action.CANCEL;
+    signalAndWaitForDoOp();
