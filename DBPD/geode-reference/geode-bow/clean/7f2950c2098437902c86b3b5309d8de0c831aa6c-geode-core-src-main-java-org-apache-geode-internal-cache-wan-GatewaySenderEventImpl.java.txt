GEODE-3967: fix the offheap memory leak in serial gateway sender's unprocessedEvents.

When ConcurrentCacheModificationException happened, GatewaySenderEventImpl
should save the status and notify gatewaysender if it hold primary queue,
because other member might have put the event into the secondary queue

Let event with CME only enqueue to primary, but not to dispatch. The old
logic does not allow CME event to  enqueue. This is wrong, because an event
without CME might have been added into the secondary queue.

We should not dispatch the CME event, otherwise it will cause remote site
data inconsistency since these CME events are misordered.

So we should enqueue it, but not to dispatch.

Also add rollingUpgradeTests

+import org.apache.geode.internal.VersionedDataSerializable;
+import org.apache.geode.internal.cache.tier.sockets.Message;
-    implements AsyncEvent, DataSerializableFixedID, Conflatable, Sizeable, Releasable {
+    implements AsyncEvent, DataSerializableFixedID, Conflatable, Sizeable, Releasable,
+    VersionedDataSerializable {
-  protected static final short VERSION = 0x11;
+  // It should use current version. But it was hard-coded to be 0x11, i.e. GEODE_120_ORDINAL,
+  // by mistake since 120 to pre-190
+  protected static final short VERSION = Version.GEODE_190.ordinal();
-   * @see org.apache.geode.internal.cache.tier.sockets.Message
+   * @see Message
+  private transient boolean isConcurrencyConflict = false;
+
+  private short version;
+
+    this.isConcurrencyConflict = event.isConcurrencyConflict();
+  @Override
+    toDataPre_GEODE_1_9_0_0(out);
+    DataSerializer.writeBoolean(this.isConcurrencyConflict, out);
+  }
+
+  public void toDataPre_GEODE_1_9_0_0(DataOutput out) throws IOException {
+  @Override
-    short version = in.readShort();
-    if (version != VERSION) {
-      // warning?`
+    fromDataPre_GEODE_1_9_0_0(in);
+    if (version >= Version.GEODE_190.ordinal()) {
+      this.isConcurrencyConflict = DataSerializer.readBoolean(in);
+  }
+
+  public void fromDataPre_GEODE_1_9_0_0(DataInput in) throws IOException, ClassNotFoundException {
+    version = in.readShort();
-        .append(";bucketId=").append(this.bucketId).append("]");
+        .append(";bucketId=").append(this.bucketId).append(";isConcurrencyConflict=")
+        .append(this.isConcurrencyConflict).append("]");
+  public boolean isConcurrencyConflict() {
+    return isConcurrencyConflict;
+  }
+
-    return null;
+    return new Version[] {Version.GEODE_190};
