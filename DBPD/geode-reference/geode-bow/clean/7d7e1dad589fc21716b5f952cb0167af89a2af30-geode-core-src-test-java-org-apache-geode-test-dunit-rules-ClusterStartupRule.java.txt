GEODE-4225: Extend ClusterStartupRule to specify member / client version.

* GEODE-4225: Extend ClusterStartupRule to specify member / client version.
* Correct typo: "Embeded" -> "Embedded"
* Reorder class to resemble call heirarchy
+import org.apache.geode.test.dunit.standalone.VersionManager;
-      occupiedVMs.values().stream().forEach(x -> x.stopVM(true));
+      occupiedVMs.values().forEach(x -> x.stopVM(true));
-  public MemberVM startLocatorVM(int index) throws Exception {
-    return startLocatorVM(index, new Properties());
-  }
-
-  public MemberVM startLocatorVM(int index, int... locatorPort) throws Exception {
-    Properties properties = new Properties();
-    String locators = Arrays.stream(locatorPort).mapToObj(i -> "localhost[" + i + "]")
-        .collect(Collectors.joining(","));
-    properties.setProperty(LOCATORS, locators);
-    return startLocatorVM(index, properties);
-  }
-
-  public MemberVM startLocatorVM(int index, Properties specifiedProperties) throws Exception {
+  public MemberVM startLocatorVM(int index, Properties specifiedProperties, String version)
+      throws Exception {
-    VM locatorVM = getVM(index);
+    VM locatorVM = getVM(index, version);
-  public MemberVM startServerVM(int index) throws IOException {
-    return startServerVM(index, new Properties(), -1);
+  public MemberVM startLocatorVM(int index, Properties specifiedProperties) throws Exception {
+    return startLocatorVM(index, specifiedProperties, VersionManager.CURRENT_VERSION);
-  public MemberVM startServerVM(int index, int locatorPort) throws IOException {
-    return startServerVM(index, new Properties(), locatorPort);
-  }
-
-  public MemberVM startServerVM(int index, String group, int locatorPort) throws IOException {
+  public MemberVM startLocatorVM(int index, int... locatorPort) throws Exception {
-    properties.put(GROUPS, group);
-    return startServerVM(index, properties, locatorPort);
+    String locators = Arrays.stream(locatorPort).mapToObj(i -> "localhost[" + i + "]")
+        .collect(Collectors.joining(","));
+    properties.setProperty(LOCATORS, locators);
+    return startLocatorVM(index, properties);
-  public MemberVM startServerVM(int index, Properties properties) throws IOException {
-    return startServerVM(index, properties, -1);
+  public MemberVM startLocatorVM(int index) throws Exception {
+    return startLocatorVM(index, new Properties());
-  public MemberVM startServerVM(int index, Properties specifiedProperties, int locatorPort)
-      throws IOException {
+  public MemberVM startServerVM(int index, Properties specifiedProperties, int locatorPort,
+      String version) throws IOException {
-    VM serverVM = getVM(index);
+    VM serverVM = getVM(index, version);
-  public MemberVM startServerAsJmxManager(int index) throws IOException {
-    return startServerAsJmxManager(index, new Properties());
+  public MemberVM startServerVM(int index, Properties specifiedProperties, int locatorPort)
+      throws IOException {
+    return startServerVM(index, specifiedProperties, locatorPort, VersionManager.CURRENT_VERSION);
+  public MemberVM startServerVM(int index, String group, int locatorPort) throws IOException {
+    Properties properties = new Properties();
+    properties.put(GROUPS, group);
+    return startServerVM(index, properties, locatorPort);
+  }
+
+  public MemberVM startServerVM(int index, int locatorPort) throws IOException {
+    return startServerVM(index, new Properties(), locatorPort);
+  }
+
+  public MemberVM startServerVM(int index, Properties properties) throws IOException {
+    return startServerVM(index, properties, -1);
+  }
+
+  public MemberVM startServerVM(int index) throws IOException {
+    return startServerVM(index, new Properties(), -1);
+  }
+
+  /**
+   * Starts a cache server with given properties, plus an available port for a JMX manager
+   */
-  public MemberVM startServerAsEmbededLocator(int index) throws IOException {
-    return startServerAsEmbededLocator(index, new Properties());
+  public MemberVM startServerAsJmxManager(int index) throws IOException {
+    return startServerAsJmxManager(index, new Properties());
-  public MemberVM startServerAsEmbededLocator(int index, Properties properties) throws IOException {
-    String name = "server-" + index;
+  /**
+   * Starts a cache server with given properties. Additionally, start the server with a JMX manager
+   * and embedded locator.
+   */
+  public MemberVM startServerAsEmbeddedLocator(int index, Properties specifiedProperties,
+      String version) throws IOException {
+    Properties properties = new Properties();
+    properties.putAll(specifiedProperties);
-    VM serverVM = getVM(index);
+    String defaultName = "server-" + index;
+    properties.putIfAbsent(NAME, defaultName);
+    String name = properties.getProperty(NAME);
+
+    VM serverVM = getVM(index, version);
-  public void stopVM(int index) {
-    stopVM(index, true);
+  public MemberVM startServerAsEmbeddedLocator(int index, Properties properties)
+      throws IOException {
+    return startServerAsEmbeddedLocator(index, properties, VersionManager.CURRENT_VERSION);
-  public void stopVM(int index, boolean cleanWorkingDir) {
-    VMProvider member = occupiedVMs.get(index);
+  public MemberVM startServerAsEmbeddedLocator(int index) throws IOException {
+    return startServerAsEmbeddedLocator(index, new Properties());
+  }
-    if (member == null)
-      return;
+  /**
+   * Starts a client with the given properties, configuring the cacheFactory with the provided
+   * Consumer
+   */
+  public ClientVM startClientVM(int index, Properties properties,
+      Consumer<ClientCacheFactory> cacheFactorySetup, String clientVersion) throws Exception {
+    VM client = getVM(index, clientVersion);
+    Exception error = client.invoke(() -> {
+      clientCacheRule =
+          new ClientCacheRule().withProperties(properties).withCacheSetup(cacheFactorySetup);
+      try {
+        clientCacheRule.before();
+        return null;
+      } catch (Exception e) {
+        return e;
+      }
+    });
+    if (error != null) {
+      throw error;
+    }
+    ClientVM clientVM = new ClientVM(client);
+    occupiedVMs.put(index, clientVM);
+    return clientVM;
+  }
-    member.stopVM(cleanWorkingDir);
+  public ClientVM startClientVM(int index, Properties properties,
+      Consumer<ClientCacheFactory> cacheFactorySetup) throws Exception {
+    return startClientVM(index, properties, cacheFactorySetup, VersionManager.CURRENT_VERSION);
-  public ClientVM startClientVM(int index, Properties properties,
-      Consumer<ClientCacheFactory> cacheFactorySetup) throws Exception {
-    VM client = getVM(index);
-    Exception error = client.invoke(() -> {
-      clientCacheRule =
-          new ClientCacheRule().withProperties(properties).withCacheSetup(cacheFactorySetup);
-      try {
-        clientCacheRule.before();
-        return null;
-      } catch (Exception e) {
-        return e;
-      }
-    });
-    if (error != null) {
-      throw error;
-    }
-    ClientVM clientVM = new ClientVM(client);
-    occupiedVMs.put(index, clientVM);
-    return clientVM;
-  }
+  public VM getVM(int index, String version) {
+    return getHost(0).getVM(version, index);
+  }
+
-    return getHost(0).getVM(index);
+    return getVM(index, VersionManager.CURRENT_VERSION);
+  }
+
+  public void stopVM(int index) {
+    stopVM(index, true);
+  }
+
+  public void stopVM(int index, boolean cleanWorkingDir) {
+    VMProvider member = occupiedVMs.get(index);
+
+    if (member == null)
+      return;
+
+    member.stopVM(cleanWorkingDir);
