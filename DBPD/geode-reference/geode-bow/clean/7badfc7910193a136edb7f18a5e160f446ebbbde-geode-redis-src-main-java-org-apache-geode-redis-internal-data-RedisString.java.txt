GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.

+import org.apache.geode.redis.internal.executor.string.SetOptions;
+  public static final NullRedisString NULL_REDIS_STRING = new NullRedisString();
+
-    value.append(appendValue.toBytes());
+    valueAppend(appendValue.toBytes());
-    this.value = value;
+    valueSet(value);
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-    value.setBytes(Coder.doubleToBytes(doubleValue));
+    valueSetBytes(Coder.doubleToBytes(doubleValue));
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-    value.setBytes(Coder.longToBytes(longValue));
+    valueSetBytes(Coder.longToBytes(longValue));
-      value.setBytes(newBytes);
+      valueSetBytes(newBytes);
-      value.setBytes(newBytes);
+      valueSetBytes(newBytes);
-      value.append(appendBytes);
+      valueAppend(appendBytes);
+  public ByteArrayWrapper getset(Region<ByteArrayWrapper, RedisData> region, ByteArrayWrapper key,
+      ByteArrayWrapper newValue) {
+    // No need to copy "value" since we are locked and will be calling set which replaces
+    // "value" with a new instance.
+    ByteArrayWrapper result = value;
+    set(newValue);
+    persistNoDelta();
+    region.put(key, this);
+    return result;
+  }
+
+
+  protected void handleSetExpiration(SetOptions options) {
+    long setExpiration = options == null ? 0L : options.getExpiration();
+    if (setExpiration != 0) {
+      long now = System.currentTimeMillis();
+      long timestamp = now + setExpiration;
+      setExpirationTimestampNoDelta(timestamp);
+    } else if (options == null || !options.isKeepTTL()) {
+      persistNoDelta();
+    }
+  }
+
+  ////// methods that modify the "value" field ////////////
+
+  protected void valueAppend(byte[] bytes) {
+    value.append(bytes);
+  }
+
+  protected void valueSet(ByteArrayWrapper newValue) {
+    value = newValue;
+  }
+
+  protected void valueSetBytes(byte[] bytes) {
+    value.setBytes(bytes);
+  }
