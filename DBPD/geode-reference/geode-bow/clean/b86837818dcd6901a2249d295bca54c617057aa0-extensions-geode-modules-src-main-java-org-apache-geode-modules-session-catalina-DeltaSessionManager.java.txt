GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-  protected int maxActiveSessions = -1;
+  private int maxActiveSessions = -1;
-  protected Valve jvmRouteBinderValve;
+  private Valve jvmRouteBinderValve;
-  protected Valve commitSessionValve;
+  private Valve commitSessionValve;
-  protected SessionCache sessionCache;
+  private SessionCache sessionCache;
-  protected static final String DEFAULT_REGION_NAME = RegionHelper.NAME + "_sessions";
+  private static final String DEFAULT_REGION_NAME = RegionHelper.NAME + "_sessions";
-  protected static final boolean DEFAULT_ENABLE_GATEWAY_DELTA_REPLICATION = false;
+  private static final boolean DEFAULT_ENABLE_GATEWAY_REPLICATION = false;
-  protected static final boolean DEFAULT_ENABLE_GATEWAY_REPLICATION = false;
+  private static final boolean DEFAULT_ENABLE_DEBUG_LISTENER = false;
-  protected static final boolean DEFAULT_ENABLE_DEBUG_LISTENER = false;
+  private static final boolean DEFAULT_ENABLE_COMMIT_VALVE = true;
-  protected static final boolean DEFAULT_ENABLE_COMMIT_VALVE = true;
+  private static final boolean DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST = false;
-  protected static final boolean DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST = false;
-
-  protected static final boolean DEFAULT_PREFER_DESERIALIZED_FORM = true;
+  private static final boolean DEFAULT_PREFER_DESERIALIZED_FORM = true;
-  protected Log LOGGER;
+  private Log LOGGER;
-  protected String regionAttributesId; // the default is different for client-server and
-                                       // peer-to-peer
+  private String regionAttributesId; // the default is different for client-server and
+                                     // peer-to-peer
-  protected Boolean enableLocalCache; // the default is different for client-server and peer-to-peer
+  private Boolean enableLocalCache; // the default is different for client-server and peer-to-peer
-  protected boolean enableCommitValve = DEFAULT_ENABLE_COMMIT_VALVE;
+  private boolean enableCommitValve = DEFAULT_ENABLE_COMMIT_VALVE;
-  protected boolean enableCommitValveFailfast = DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST;
+  private boolean enableCommitValveFailfast = DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST;
-  protected boolean enableGatewayDeltaReplication = DEFAULT_ENABLE_GATEWAY_DELTA_REPLICATION;
+  private boolean enableGatewayReplication = DEFAULT_ENABLE_GATEWAY_REPLICATION;
-  protected boolean enableGatewayReplication = DEFAULT_ENABLE_GATEWAY_REPLICATION;
+  private boolean enableDebugListener = DEFAULT_ENABLE_DEBUG_LISTENER;
-  protected boolean enableDebugListener = DEFAULT_ENABLE_DEBUG_LISTENER;
-
-  protected boolean preferDeserializedForm = DEFAULT_PREFER_DESERIALIZED_FORM;
+  private boolean preferDeserializedForm = DEFAULT_PREFER_DESERIALIZED_FORM;
+    this.rejectedSessions = new AtomicInteger(0);
-    this.sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
+    this.sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<>());
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
-    this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;
+    // this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;
+    // Disabled. Keeping the method for backward compatibility.
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
-  public boolean isPeerToPeer() {
+  boolean isPeerToPeer() {
+  @SuppressWarnings("unused")
-      ((Context) this.container).removePropertyChangeListener(this);
+      this.container.removePropertyChangeListener(this);
-      ((Context) this.container).addPropertyChangeListener(this);
+      this.container.addPropertyChangeListener(this);
-        DeltaSessionInterface ds = (DeltaSessionInterface) session;
-        ds.setOwner(this);
-        ds.activate();
+        session.setOwner(this);
+        session.activate();
+
-  public void remove(Session session, boolean update) {
+  public void remove(Session session, @SuppressWarnings("unused") boolean update) {
-  private void incrementRejectedSessions() {
-    this.rejectedSessions.incrementAndGet();
-  }
-
-  protected void addSessionToTouch(String sessionId) {
+  void addSessionToTouch(String sessionId) {
-  protected boolean removeTouchedSession(String sessionId) {
+  boolean removeTouchedSession(String sessionId) {
-        Set<String> sessionIds = null;
-        sessionIds = new HashSet<String>(getSessionsToTouch());
+        Set<String> sessionIds;
+        sessionIds = new HashSet<>(getSessionsToTouch());
+
-    Context context = (Context) event.getSource();
-        int interval = ((Integer) event.getNewValue()).intValue();
+        int interval = (Integer) event.getNewValue();
-          interval = ((Integer) event.getOldValue()).intValue();;
+          interval = (Integer) event.getOldValue();
-  protected void doUnload() throws IOException {
+  private void doUnload() throws IOException {
+
+
+
-    getLogger().debug("Query: " + query.getQueryString());
+
+    if (getLogger().isDebugEnabled()) {
+      getLogger().debug("Query: " + query.getQueryString());
+    }
-    ArrayList<DeltaSessionInterface> list = new ArrayList<DeltaSessionInterface>();
-    Iterator<String> elements = results.iterator();
+    ArrayList<DeltaSessionInterface> list = new ArrayList<>();
+    @SuppressWarnings("unchecked")
+    Iterator<String> elements = (Iterator<String>) results.iterator();
-      oos.writeObject(new Integer(list.size()));
+      oos.writeObject(list.size());
-    // // Expire all the sessions we just wrote
-    // if (getLogger().isDebugEnabled()) {
-    // getLogger().debug("Expiring " + list.size() + " persisted sessions");
-    // }
-    // Iterator<StandardSession> expires = list.iterator();
-    // while (expires.hasNext()) {
-    // StandardSession session = expires.next();
-    // try {
-    // session.expire(false);
-    // } catch (Throwable t) {
-    //// ExceptionUtils.handleThrowable(t);
-    // } finally {
-    // session.recycle();
-    // }
-    // }
-
-  protected void doLoad() throws ClassNotFoundException, IOException {
+  private void doLoad() throws ClassNotFoundException, IOException {
-    ObjectInputStream ois = null;
+    ObjectInputStream ois;
-      Integer count = (Integer) ois.readObject();
-      int n = count.intValue();
+      int n = (Integer) ois.readObject();
-    } catch (ClassNotFoundException e) {
-      getLogger().error(e);
-      try {
-        ois.close();
-      } catch (IOException f) {
-        // Ignore
-      }
-      throw e;
-    } catch (IOException e) {
+    } catch (ClassNotFoundException | IOException e) {
-        store.delete();
+        if (!store.delete()) {
+          getLogger().warn("Couldn't delete persistent storage file " + store.getAbsolutePath());
+        }
-    File file = new File(storeDir, ctxPath.replaceAll("/", "_") + ".sessions.ser");
-    return (file);
+    return (new File(storeDir, ctxPath.replaceAll("/", "_") + ".sessions.ser"));
-    return new StringBuilder().append(getClass().getSimpleName()).append("[").append("container=")
-        .append(getTheContext()).append("; regionName=").append(this.regionName)
-        .append("; regionAttributesId=").append(this.regionAttributesId).append("]").toString();
+    return getClass().getSimpleName() + "[" + "container="
+        + getTheContext() + "; regionName=" + this.regionName
+        + "; regionAttributesId=" + this.regionAttributesId + "]";
-  protected String getContextName() {
+  String getContextName() {
