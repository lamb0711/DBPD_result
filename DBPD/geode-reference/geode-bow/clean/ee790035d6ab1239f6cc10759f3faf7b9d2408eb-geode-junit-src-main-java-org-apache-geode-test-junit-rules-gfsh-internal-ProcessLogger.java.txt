GEODE-7237: Fix race condition in GfshRule (#4153)

GfshRule.execute() now blocks while the ProcessLogger is still
collecting output from the GFSH process. This fixes a race condition
that causes ConnectCommandAcceptanceTest.invalidHostname() to fail
intermittently.

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
+import static java.lang.System.lineSeparator;
-import static java.util.stream.Collectors.toList;
-import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
-public class ProcessLogger {
+public class ProcessLogger implements AutoCloseable {
-  private final Queue<OutputLine> outputLines = new ConcurrentLinkedQueue<>();
+  private final Queue<OutputLine> outputLines;
+  private final StreamGobbler stdoutGobbler;
+  private final StreamGobbler stderrGobbler;
+    outputLines = new ConcurrentLinkedQueue<>();
+    stdoutGobbler = new StreamGobbler(process.getInputStream(), this::consumeInfoMessage);
+    stderrGobbler = new StreamGobbler(process.getErrorStream(), this::consumeErrorMessage);
+  }
-    StreamGobbler stdOutGobbler =
-        new StreamGobbler(process.getInputStream(), this::consumeInfoMessage);
-    StreamGobbler stdErrGobbler =
-        new StreamGobbler(process.getErrorStream(), this::consumeErrorMessage);
+  public void start() {
+    stdoutGobbler.start();
+    stderrGobbler.start();
+  }
-    stdOutGobbler.startInNewThread();
-    stdErrGobbler.startInNewThread();
+  public String getOutputText() {
+    return outputLines.stream()
+        .map(OutputLine::getLine)
+        .collect(joining(lineSeparator()));
+  }
+
+  @Override
+  public void close() {
+    stdoutGobbler.close();
+    stderrGobbler.close();
+  }
+
+  /**
+   * Blocks until the ProcessLogger finishes collecting the process's output
+   *
+   * @throws InterruptedException if the ProcessLogger's threads are interrupted
+   * @throws ExecutionException if the ProcessLogger's threads throw
+   * @throws TimeoutException if the ProcessLogger does not finish collecting output before the
+   *         timeout
+   */
+  public void awaitTermination(long timeout, TimeUnit unit)
+      throws InterruptedException, ExecutionException, TimeoutException {
+    stdoutGobbler.awaitTermination(timeout, unit);
+    stderrGobbler.awaitTermination(timeout, unit);
-
-  public List<String> getStdOutLines() {
-    return getOutputLines(OutputLine.OutputSource.STD_OUT);
-  }
-
-  public List<String> getStdErrLines() {
-    return getOutputLines(OutputLine.OutputSource.STD_ERR);
-  }
-
-  public List<String> getOutputLines() {
-    return outputLines.stream().map(OutputLine::getLine).collect(toList());
-  }
-
-  public String getOutputText() {
-    return outputLines.stream().map(OutputLine::getLine)
-        .collect(joining(System.lineSeparator()));
-  }
-
-  private List<String> getOutputLines(OutputLine.OutputSource source) {
-    return outputLines.stream().filter(line -> line.getSource().equals(source))
-        .map(OutputLine::getLine).collect(toList());
-  }
