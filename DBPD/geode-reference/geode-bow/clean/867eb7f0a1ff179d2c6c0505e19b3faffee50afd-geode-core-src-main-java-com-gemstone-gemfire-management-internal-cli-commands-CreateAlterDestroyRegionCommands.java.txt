Merge branch 'develop' into feature/GEODE-17-2

-import java.lang.reflect.Array;
-import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.regex.Pattern;
-
-import javax.management.MBeanServer;
-import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
-
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import com.gemstone.gemfire.internal.cache.xmlcache.CacheXml;
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
+import javax.management.MBeanServer;
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.regex.Pattern;
- * 
- * @author Abhishek Chaudhari
+ *
+
+    if (regionPath == null) {
+      return ResultBuilder.createInfoResult(CliStrings.DESTROY_REGION__MSG__SPECIFY_REGIONPATH_TO_DESTROY);
+    }
+
+    if (regionPath.trim().isEmpty() || regionPath.equals(Region.SEPARATOR)) {
+      return ResultBuilder.createInfoResult(
+          CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGIONPATH_0_NOT_VALID, new Object[]{regionPath}));
+    }
+
-      if (regionPath != null) {
-        if (regionPath.trim().isEmpty()) { // unlikely through gfsh
-          result = ResultBuilder.createInfoResult(CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGIONPATH_0_NOT_VALID,
-              new Object[] { regionPath }));
-        } else if (regionPath.equals(Region.SEPARATOR)) {
-          result = ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGIONPATH_0_NOT_VALID,
-              new Object[] { regionPath }));
+      String message = "";
+      Cache cache = CacheFactory.getAnyInstance();
+      ManagementService managementService = ManagementService.getExistingManagementService(cache);
+      String regionPathToUse = regionPath;
+
+      if (!regionPathToUse.startsWith(Region.SEPARATOR)) {
+        regionPathToUse = Region.SEPARATOR + regionPathToUse;
+      }
+
+      Set<DistributedMember> regionMembersList = findMembersForRegion(cache, managementService, regionPathToUse);
+
+      if (regionMembersList.size() == 0) {
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.format(CliStrings.DESTROY_REGION__MSG__COULDNOT_FIND_REGIONPATH_0_IN_GEMFIRE,
+                new Object[]{regionPath, "jmx-manager-update-rate milliseconds"}));
+      }
+
+      CliFunctionResult destroyRegionResult = null;
+
+      ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(RegionDestroyFunction.INSTANCE, regionPath,
+          regionMembersList);
+      List<CliFunctionResult> resultsList = (List<CliFunctionResult>) resultCollector.getResult();
+      message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGION_0_1_DESTROYED,
+          new Object[]{regionPath, /*subRegionMessage*/""});
+
+      // Only if there is an error is this set to false
+      boolean isRegionDestroyed = true;
+      for (int i = 0; i < resultsList.size(); i++) {
+        destroyRegionResult = resultsList.get(i);
+        if (destroyRegionResult.isSuccessful()) {
+          xmlEntity = destroyRegionResult.getXmlEntity();
+        } else if (destroyRegionResult.getThrowable() != null) {
+          Throwable t = destroyRegionResult.getThrowable();
+          LogWrapper.getInstance().info(t.getMessage(), t);
+          message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__ERROR_OCCURRED_WHILE_DESTROYING_0_REASON_1,
+              new Object[]{regionPath, t.getMessage()});
+          isRegionDestroyed = false;
-          boolean isRegionDestroyed = false;
-          String message = "";
-          Cache cache = CacheFactory.getAnyInstance();
-          ManagementService managementService = ManagementService.getExistingManagementService(cache);
-          String regionPathToUse = regionPath;
-          String regionName = regionPath.startsWith(Region.SEPARATOR) ? regionPath.substring(1) : regionPath;
-          
-          if (!regionPathToUse.startsWith(Region.SEPARATOR)) {
-            regionPathToUse = Region.SEPARATOR + regionPathToUse;
-          }
-          Set<DistributedMember>[] regionMembersList = findMembersForRegion(cache, managementService, regionPathToUse);
-          if (regionMembersList != null) {
-            Set<DistributedMember> regionMembers      = regionMembersList[0];
-            Set<DistributedMember> localRegionMembers = regionMembersList[1];
-            
-            if (regionMembers != null && !regionMembers.isEmpty()) { // Distributed Region with this region path exists
-              Region<?, ?> regionInThisCache = cache.getRegion(regionPath);
-              if (regionInThisCache != null) {// exists in local cache?
-                regionInThisCache.destroyRegion(); // this is for a Distributed Region & destroy event will be propagated
-                message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGION_0_1_DESTROYED, new Object[] { regionPath, /*subRegionMessage*/"" });
-                xmlEntity = new XmlEntity(CacheXml.REGION, "name", regionName);
-                isRegionDestroyed = true;
-              } else {
-                CliFunctionResult destroyRegionResult = null;
-                Iterator<DistributedMember> it = regionMembers.iterator();
-                DistributedMember firstMember = it.next(); // regionMembers is not empty
-
-                ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(RegionDestroyFunction.INSTANCE, regionPath, firstMember);
-                List<CliFunctionResult> destroyRegionResults = (List<CliFunctionResult>) resultCollector.getResult();
-
-                destroyRegionResult = destroyRegionResults.get(0);
-
-                if (destroyRegionResult.isSuccessful()) {
-                  message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGION_0_1_DESTROYED, new Object[] { regionPath, /*subRegionMessage*/"" });
-                  xmlEntity = destroyRegionResult.getXmlEntity();
-                  isRegionDestroyed = true;
-                } else if (destroyRegionResult.getThrowable() != null) {
-                  Throwable t = destroyRegionResult.getThrowable();
-                  LogWrapper.getInstance().info(t.getMessage(), t);
-                  message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__ERROR_OCCURRED_WHILE_DESTROYING_0_REASON_1,
-                      new Object[] { regionPath, t.getMessage() });
-                  isRegionDestroyed = false;
-                } else {
-                  message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__UNKNOWN_RESULT_WHILE_DESTROYING_REGION_0_REASON_1,
-                      new Object[] { regionPath, destroyRegionResult.getMessage() });
-                  isRegionDestroyed = false;
-                }
-              }
-            }
-
-            if (localRegionMembers != null && !localRegionMembers.isEmpty()) { // Local Regions with this region path also exist
-              Region<?, ?> regionInThisCache = cache.getRegion(regionPath);
-              if (regionInThisCache != null) {// exists in local cache?
-                regionInThisCache.destroyRegion();
-                message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGION_0_1_DESTROYED, new Object[] { regionPath, /*subRegionMessage*/"" });
-                xmlEntity = new XmlEntity(CacheXml.REGION, "name", regionName);
-                isRegionDestroyed = true;
-              }
-              DistributedMember distributedMember = cache.getDistributedSystem().getDistributedMember();
-              localRegionMembers.remove(distributedMember); //remove this member from the found members
-              
-              CliFunctionResult destroyRegionResult = null;
-
-              ResultCollector<?, ?> resultCollector = CliUtil.executeFunction(RegionDestroyFunction.INSTANCE, regionPath, localRegionMembers);
-              List<CliFunctionResult> resultsList = (List<CliFunctionResult>) resultCollector.getResult();
-              for (int i = 0; i < resultsList.size(); i++) {
-                destroyRegionResult = resultsList.get(i) ;
-                if (destroyRegionResult.isSuccessful()) {
-                  message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__REGION_0_1_DESTROYED, new Object[] { regionPath, /*subRegionMessage*/"" });
-                  xmlEntity = destroyRegionResult.getXmlEntity();
-                  isRegionDestroyed = true;
-                } else if (destroyRegionResult.getThrowable() != null) {
-                  Throwable t = destroyRegionResult.getThrowable();
-                  LogWrapper.getInstance().info(t.getMessage(), t);
-                  message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__ERROR_OCCURRED_WHILE_DESTROYING_0_REASON_1,
-                      new Object[] { regionPath, t.getMessage() });
-                  isRegionDestroyed = false;
-                } else {
-                  message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__UNKNOWN_RESULT_WHILE_DESTROYING_REGION_0_REASON_1,
-                      new Object[] { regionPath, destroyRegionResult.getMessage() });
-                  isRegionDestroyed = false;
-                }
-              }
-            }
-          } else {
-            message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__COULDNOT_FIND_REGIONPATH_0_IN_GEMFIRE, new Object[] { regionPath, "jmx-manager-update-rate milliseconds" });
-            isRegionDestroyed = false;
-          }
-          if (isRegionDestroyed) {
-            result = ResultBuilder.createInfoResult(message);
-          } else {
-            result = ResultBuilder.createUserErrorResult(message);
-          }
+          message = CliStrings.format(CliStrings.DESTROY_REGION__MSG__UNKNOWN_RESULT_WHILE_DESTROYING_REGION_0_REASON_1,
+              new Object[]{regionPath, destroyRegionResult.getMessage()});
+          isRegionDestroyed = false;
+      }
+      if (isRegionDestroyed) {
+        result = ResultBuilder.createInfoResult(message);
-        result = ResultBuilder.createInfoResult(CliStrings.DESTROY_REGION__MSG__SPECIFY_REGIONPATH_TO_DESTROY);
+        result = ResultBuilder.createUserErrorResult(message);
-      result = ResultBuilder.createUserErrorResult(CliStrings.format(CliStrings.DESTROY_REGION__MSG__ERROR_WHILE_DESTROYING_REGION_0_REASON_1, new Object[] {regionPath, e.getMessage()}));
+      result = ResultBuilder.createUserErrorResult(
+          CliStrings.format(CliStrings.DESTROY_REGION__MSG__ERROR_WHILE_DESTROYING_REGION_0_REASON_1,
+              new Object[]{regionPath, e.getMessage()}));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.DESTROY_REGION__MSG__ERROR_WHILE_DESTROYING_REGION_0_REASON_1, new Object[] {regionPath, e.getMessage()}));
+      result = ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.DESTROY_REGION__MSG__ERROR_WHILE_DESTROYING_REGION_0_REASON_1,
+              new Object[]{regionPath, e.getMessage()}));
-  private Set<DistributedMember>[] findMembersForRegion(Cache cache, ManagementService managementService, String regionPath) {
-    Set<DistributedMember>[] membersList = null;
+  private Set<DistributedMember> findMembersForRegion(Cache cache, ManagementService managementService, String regionPath) {
+    Set<DistributedMember> membersList = new HashSet<>();
-    Set<String> localRegionMemberIds = Collections.emptySet();
-//    String queryExp = MessageFormat.format(MBeanJMXAdapter.OBJECTNAME__REGION_MXBEAN, new Object[] {MBeanJMXAdapter.makeCompliantRegionNameAppender(regionPath), "*"});
+
-        regionMemberIds      = new HashSet<String>();
-        localRegionMemberIds = new HashSet<String>();
-
-        membersList = (Set<DistributedMember>[])Array.newInstance(HashSet.class, 2);
+        regionMemberIds      = new HashSet<>();
+
+      boolean addedOneRemote = false;
+            // For Scope.LOCAL regions we need to identify each hosting member, but for
+            // other scopes we just need a single member as the region destroy will be
+            // propagated.
-              localRegionMemberIds.add(regionMXBean.getMember());
-            } else {
+            } else {
+              if (!addedOneRemote) {
+                regionMemberIds.add(regionMXBean.getMember());
+                addedOneRemote = true;
+              }
+
-        membersList[0] = getMembersByIds(cache, regionMemberIds);
+        membersList = getMembersByIds(cache, regionMemberIds);
-      if (!localRegionMemberIds.isEmpty()) {
-        membersList[1] = getMembersByIds(cache, localRegionMemberIds);
-      }
-      
