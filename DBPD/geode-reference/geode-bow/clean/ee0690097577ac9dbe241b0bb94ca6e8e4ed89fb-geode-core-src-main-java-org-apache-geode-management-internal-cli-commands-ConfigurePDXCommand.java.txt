GEODE-4794: ConfigurePDXCommand Fails When Using Defaults (#1852)


-import java.io.PrintWriter;
-import java.io.StringWriter;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.configuration.ParameterType;
+import org.apache.geode.cache.configuration.PdxType;
+import org.apache.geode.cache.configuration.StringType;
-import org.apache.geode.internal.cache.CacheConfig;
-import org.apache.geode.internal.cache.xmlcache.CacheCreation;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.internal.cache.xmlcache.CacheXmlGenerator;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-  /**
-   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
-   *        for generating xml.
-   * @since GemFire 5.7
-   */
-  protected CacheCreation getCacheCreation(boolean forParsing) {
-    return new CacheCreation(forParsing);
-  }
-
-  /**
-   * Creates the XmlEntity associated to the PDX configuration.
-   */
-  protected XmlEntity createXmlEntity(CacheCreation cache) {
-    final StringWriter stringWriter = new StringWriter();
-    final PrintWriter printWriter = new PrintWriter(stringWriter);
-    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
-    printWriter.close();
-    String xmlDefinition = stringWriter.toString();
-
-    return XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
-  }
-
+          unspecifiedDefaultValue = "false",
+          unspecifiedDefaultValue = "false",
-      @CliOption(key = CliStrings.CONFIGURE_PDX__DISKSTORE, specifiedDefaultValue = "",
+      @CliOption(key = CliStrings.CONFIGURE_PDX__DISKSTORE, specifiedDefaultValue = "DEFAULT",
-    ReflectionBasedAutoSerializer autoSerializer;
-    CacheCreation cache = getCacheCreation(true);
-    InfoResultData ird = ResultBuilder.createInfoResultData();
+    ReflectionBasedAutoSerializer autoSerializer = null;
+
+    if (getConfigurationService() == null) {
+      return ResultBuilder
+          .createUserErrorResult("Configure pdx failed because cluster configuration is disabled.");
+    }
+
+    InfoResultData infoResultData = ResultBuilder.createInfoResultData();
-      ird.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__NORMAL__MEMBERS__WARNING);
-      cache.setPdxPersistent(true);
-      ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
-
-      if (!diskStore.equals("")) {
-        cache.setPdxDiskStore(diskStore);
-        ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + cache.getPdxDiskStore());
-      } else {
-        ird.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + "DEFAULT");
-      }
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = true");
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__DISKSTORE + " = " + diskStore);
-      cache.setPdxPersistent(CacheConfig.DEFAULT_PDX_PERSISTENT);
-      ird.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = " + cache.getPdxPersistent());
+      infoResultData.addLine(CliStrings.CONFIGURE_PDX__PERSISTENT + " = false");
-    // Set read-serialized
-    if (readSerialized != null) {
-      cache.setPdxReadSerialized(readSerialized);
-    } else {
-      cache.setPdxReadSerialized(CacheConfig.DEFAULT_PDX_READ_SERIALIZED);
-    }
-
-    ird.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + cache.getPdxReadSerialized());
-
-    // Set ignoreUnreadFields
-    if (ignoreUnreadFields != null) {
-      cache.setPdxIgnoreUnreadFields(ignoreUnreadFields);
-    } else {
-      cache.setPdxIgnoreUnreadFields(CacheConfig.DEFAULT_PDX_IGNORE_UNREAD_FIELDS);
-    }
-
-    ird.addLine(
-        CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = " + cache.getPdxIgnoreUnreadFields());
+    infoResultData.addLine(CliStrings.CONFIGURE_PDX__READ__SERIALIZED + " = " + readSerialized);
+    infoResultData
+        .addLine(CliStrings.CONFIGURE_PDX__IGNORE__UNREAD_FIELDS + " = " + ignoreUnreadFields);
-      cache.setPdxSerializer(autoSerializer);
-      ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
-      ird.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
+      infoResultData.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
+      infoResultData.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
-      cache.setPdxSerializer(autoSerializer);
-      ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
-      ird.addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
+      infoResultData.addLine("PDX Serializer = " + autoSerializer.getClass().getName());
+      infoResultData
+          .addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
-    XmlEntity xmlEntity = createXmlEntity(cache);
-    result = ResultBuilder.buildResult(ird);
-    persistClusterConfiguration(result,
-        () -> ((InternalClusterConfigurationService) getConfigurationService())
-            .addXmlEntity(xmlEntity, null));
+    result = ResultBuilder.buildResult(infoResultData);
+    ReflectionBasedAutoSerializer finalAutoSerializer = autoSerializer;
+    getConfigurationService().updateCacheConfig(InternalClusterConfigurationService.CLUSTER_CONFIG,
+        config -> {
+          if (config.getPdx() == null) {
+            config.setPdx(new PdxType());
+          }
+          config.getPdx().setReadSerialized(readSerialized);
+          config.getPdx().setIgnoreUnreadFields(ignoreUnreadFields);
+          config.getPdx().setDiskStoreName(diskStore);
+          config.getPdx().setPersistent(diskStore != null);
+
+          if (portableClassesPatterns != null || nonPortableClassesPatterns != null) {
+            PdxType.PdxSerializer pdxSerializer = new PdxType.PdxSerializer();
+            pdxSerializer.setClassName(ReflectionBasedAutoSerializer.class.getName());
+
+            List<ParameterType> parameters =
+                finalAutoSerializer.getConfig().entrySet().stream().map(entry -> {
+                  ParameterType parameterType = new ParameterType();
+                  parameterType.setName((String) entry.getKey());
+                  parameterType.setString(new StringType((String) entry.getValue()));
+                  return parameterType;
+                }).collect(Collectors.toList());
+            pdxSerializer.getParameter().addAll(parameters);
+
+            config.getPdx().setPdxSerializer(pdxSerializer);
+          }
+          return config;
+        });
