Merge branch 'release/1.8.0'

-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.internal.logging.LoggingExecutors;
+import org.apache.geode.internal.logging.LoggingThread;
-        logger.debug("state after looking for membership coordinator is {}", state);
+        logger.info("state after looking for membership coordinator is {}", state);
-          logger.debug("found possible coordinator {}", state.possibleCoordinator);
+          logger.info("found possible coordinator {}", state.possibleCoordinator);
-    if (logger.isDebugEnabled()) {
-      logger.debug("JoinLeave.processLeaveRequest invoked.  isCoordinator=" + isCoordinator
-          + "; isStopping=" + isStopping + "; cancelInProgress="
-          + services.getCancelCriterion().isCancelInProgress());
-    }
+    logger.info(() -> "JoinLeave.processLeaveRequest invoked.  isCoordinator=" + isCoordinator
+        + "; isStopping=" + isStopping + "; cancelInProgress="
+        + services.getCancelCriterion().isCancelInProgress());
-      logger.debug("ignoring leave request from old member");
+      logger.info("ignoring leave request from old member");
-      logger.debug("Checking to see if I should become coordinator");
+      logger.info("Checking to see if I should become coordinator");
-      viewCreator = new ViewCreator("Geode Membership View Creator", Services.getThreadGroup());
+      viewCreator = new ViewCreator("Geode Membership View Creator");
-      viewCreator.setDaemon(true);
+            logger.info("received {}", response);
-              logger.debug("Locator's address indicates it is part of a distributed system "
+              logger.info("Locator's address indicates it is part of a distributed system "
-    logger.debug("searching for coordinator in findCoordinatorFromView");
+    logger.info("searching for coordinator in findCoordinatorFromView");
+      logger.info("findCoordinatorFromView processing {}", resp);
+      logger.info("findCoordinatorFromView is selecting {}", coord);
-          forceDisconnect(LocalizedStrings.Network_partition_detected
-              .toLocalizedString(crashes.size(), crashes));
+          forceDisconnect(String.format(
+              "Exiting due to possible network partition event due to loss of %s cache processes: %s",
+              crashes.size(), crashes));
-      if (((GMSMember) m.getNetMember()).equals(jgId)) {
+      if (m.getNetMember().equals(jgId)) {
-  class ViewCreator extends Thread {
+  class ViewCreator extends LoggingThread {
-    ViewCreator(String name, ThreadGroup tg) {
-      super(tg, name);
+    ViewCreator(String name) {
+      super(name);
-          forceDisconnect(LocalizedStrings.Network_partition_detected
-              .toLocalizedString(crashes.size(), crashes));
+          forceDisconnect(String.format(
+              "Exiting due to possible network partition event due to loss of %s cache processes: %s",
+              crashes.size(), crashes));
-      ExecutorService svc = Executors.newFixedThreadPool(suspects.size(), new ThreadFactory() {
-        AtomicInteger i = new AtomicInteger();
-
-        @Override
-        public Thread newThread(Runnable r) {
-          return new Thread(Services.getThreadGroup(), r,
-              "Geode View Creator verification thread " + i.incrementAndGet());
-        }
-      });
-
+      ExecutorService svc =
+          LoggingExecutors.newFixedThreadPool("Geode View Creator verification thread ",
+              false, suspects.size());
