GEODE-17: Shiro Integration

GEODE-17: associate async request with correct shiro user

GEODE-17

GEODE-17: fix shiro dependency

-import com.gemstone.gemfire.cache.Cache;
-import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
-import com.gemstone.gemfire.internal.logging.LogService;
-import com.gemstone.gemfire.management.ManagementService;
-import com.gemstone.gemfire.management.internal.SystemManagementService;
-import com.gemstone.gemfire.management.internal.security.ManagementInterceptor;
-import com.gemstone.gemfire.security.Authenticator;
-import org.apache.logging.log4j.Logger;
-import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import java.util.Iterator;
-import java.util.Map.Entry;
-import java.util.Properties;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
+import com.gemstone.gemfire.security.Authenticator;
+import com.gemstone.gemfire.security.ShiroUtil;
+import org.apache.logging.log4j.Logger;
+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
-
-  public static final ThreadLocal<Properties> CREDENTIALS = new ThreadLocal<Properties>();
-
-
-    securityCheck(requestParameterValues);
+    String username = requestParameterValues.get(ResourceConstants.USER_NAME);
+    String password = requestParameterValues.get(ResourceConstants.PASSWORD);
+    ShiroUtil.login(username, password);
-
-  protected void securityCheck(final Map<String, String> environment) {
-
-    Properties credentials = new Properties();
-
-    Iterator<Entry<String, String>> it = environment.entrySet().iterator();
-    while (it.hasNext()) {
-      Entry<String, String> entry = it.next();
-      if (entry.getKey().startsWith(SECURITY_VARIABLE_REQUEST_HEADER_PREFIX)) {
-        credentials.put(entry.getKey(), entry.getValue());
-      }
-
-    }
-
-    GemFireCacheImpl instance = GemFireCacheImpl.getInstance();
-    if(instance != null){
-      SystemManagementService service = (SystemManagementService) ManagementService
-          .getExistingManagementService(instance);
-
-      ManagementInterceptor interceptor = service.getManagementAgent().getManagementInterceptor();
-      if(interceptor!=null) {
-        interceptor.authenticate(credentials);
-      }
-      CREDENTIALS.set(credentials);
-    }
-
-
-  }
-
-
-
-    afterConcurrentHandlingStarted(request, response, handler);
+    ShiroUtil.logout();
-
-  @Override
-  public void afterConcurrentHandlingStarted(final HttpServletRequest request,
-                                             final HttpServletResponse response,
-                                             final Object handler)
-    throws Exception
-  {
-    ENV.remove();
-  }
-
