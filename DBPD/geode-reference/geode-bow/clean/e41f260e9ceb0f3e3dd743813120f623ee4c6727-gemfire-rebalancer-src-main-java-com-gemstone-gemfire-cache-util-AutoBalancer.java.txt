Merge remote-tracking branch 'origin/develop' into feature/GEODE-77

GEODE-77 will need to have copyright notices added to new files added on
that branch.

This moves GEODE-77 to Java 8

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import com.gemstone.gemfire.cache.CacheClosedException;
- * <LI> {@link AutoBalancer#SCHEDULE}
+ * <LI>{@link AutoBalancer#SCHEDULE}
-  private AuditScheduler scheduler = new CronScheduler();
-  private OOBAuditor auditor = new SizeBasedOOBAuditor();
-  private TimeProvider clock = new SystemClockTimeProvider();
-  private CacheOperationFacade cacheFacade = new GeodeCacheFacade();
-  private AtomicBoolean isLockAcquired = new AtomicBoolean(false);
+  private final AuditScheduler scheduler;
+  private final OOBAuditor auditor;
+  private final TimeProvider clock;
+  private final CacheOperationFacade cacheFacade;
+  public AutoBalancer() {
+    this(null, null, null, null);
+  }
+
+  public AutoBalancer(AuditScheduler scheduler, OOBAuditor auditor, TimeProvider clock,
+      CacheOperationFacade cacheFacade) {
+    this.cacheFacade = cacheFacade == null ? new GeodeCacheFacade() : cacheFacade;
+    this.scheduler = scheduler == null ? new CronScheduler() : scheduler;
+    this.auditor = auditor == null ? new SizeBasedOOBAuditor(this.cacheFacade) : auditor;
+    this.clock = clock == null ? new SystemClockTimeProvider() : clock;
+  }
+
+          } catch (CacheClosedException e) {
+            logger.warn("Cache closed while attempting to rebalance the cluster. Abort future jobs", e);
+            return;
+
+    @Override
+    public void destroy() {
+      trigger.shutdownNow();
+    }
-  class SizeBasedOOBAuditor implements OOBAuditor {
+  static class SizeBasedOOBAuditor implements OOBAuditor {
+    final CacheOperationFacade cache;
+
+    public SizeBasedOOBAuditor(CacheOperationFacade cache) {
+      this.cache = cache;
+    }
+
-      if (!isLockAcquired.get()) {
-        synchronized (isLockAcquired) {
-          if (!isLockAcquired.get()) {
-            boolean result = cacheFacade.acquireAutoBalanceLock();
-            if (result) {
-              isLockAcquired.set(true);
-            } else {
-              if (logger.isDebugEnabled()) {
-                logger.debug("Another member owns auto-balance lock. Skip this attempt to rebalance the cluster");
-              }
-              return;
-            }
-          }
+      boolean result = cache.acquireAutoBalanceLock();
+      if (!result) {
+        if (logger.isDebugEnabled()) {
+          logger.debug("Another member owns auto-balance lock. Skip this attempt to rebalance the cluster");
+        return;
-      cacheFacade.incrementAttemptCounter();
-      boolean result = needsRebalancing();
+      cache.incrementAttemptCounter();
+      result = needsRebalancing();
-      cacheFacade.rebalance();
+      cache.rebalance();
-      long transferSize = cacheFacade.getTotalTransferSize();
+      long transferSize = cache.getTotalTransferSize();
-      Map<PartitionedRegion, InternalPRInfo> details = cacheFacade.getRegionMemberDetails();
-      long totalSize = cacheFacade.getTotalDataSize(details);
+      Map<PartitionedRegion, InternalPRInfo> details = cache.getRegionMemberDetails();
+      long totalSize = cache.getTotalDataSize(details);
+    private final AtomicBoolean isLockAcquired = new AtomicBoolean(false);
+
+    private GemFireCacheImpl cache;
+
+    public GeodeCacheFacade() {
+      this(null);
+    }
+
+    public GeodeCacheFacade(GemFireCacheImpl cache) {
+      this.cache = cache;
+    }
+
-          logger.debug("Rebalance estimate: RebalanceResultsImpl [TotalBucketCreateBytes="
-              + result.getTotalBucketCreateBytes() + ", TotalBucketCreatesCompleted="
-              + result.getTotalBucketCreatesCompleted() + ", TotalBucketTransferBytes="
-              + result.getTotalBucketTransferBytes() + ", TotalBucketTransfersCompleted="
-              + result.getTotalBucketTransfersCompleted() + ", TotalPrimaryTransfersCompleted="
-              + result.getTotalPrimaryTransfersCompleted() + "]");
+          logger.debug(
+              "Rebalance estimate: RebalanceResultsImpl [TotalBucketCreateBytes=" + result.getTotalBucketCreateBytes()
+                  + ", TotalBucketCreatesCompleted=" + result.getTotalBucketCreatesCompleted()
+                  + ", TotalBucketTransferBytes=" + result.getTotalBucketTransferBytes()
+                  + ", TotalBucketTransfersCompleted=" + result.getTotalBucketTransfersCompleted()
+                  + ", TotalPrimaryTransfersCompleted=" + result.getTotalPrimaryTransfersCompleted() + "]");
-            + ", TotalPrimaryTransferTime=" + result.getTotalPrimaryTransferTime()
-            + ", TotalPrimaryTransfersCompleted=" + result.getTotalPrimaryTransfersCompleted() + ", TotalTime="
-            + result.getTotalTime() + "]");
+            + ", TotalPrimaryTransferTime=" + result.getTotalPrimaryTransferTime() + ", TotalPrimaryTransfersCompleted="
+            + result.getTotalPrimaryTransfersCompleted() + ", TotalTime=" + result.getTotalTime() + "]");
-      GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-        throw new IllegalStateException("Missing cache instance.");
+        synchronized (this) {
+          if (cache == null) {
+            cache = GemFireCacheImpl.getInstance();
+            if (cache == null) {
+              throw new IllegalStateException("Missing cache instance.");
+            }
+          }
+        }
+      }
+      if (cache.isClosed()) {
+        throw new CacheClosedException();
-      DistributedLockService dls = getDLS();
+      if (!isLockAcquired.get()) {
+        synchronized (isLockAcquired) {
+          if (!isLockAcquired.get()) {
+            DistributedLockService dls = getDLS();
-      boolean result = dls.lock(AUTO_BALANCER_LOCK, 0, -1);
-      if (logger.isDebugEnabled()) {
-        logger.debug("Grabbed AutoBalancer lock? " + result);
+            boolean result = dls.lock(AUTO_BALANCER_LOCK, 0, -1);
+            if (result) {
+              isLockAcquired.set(true);
+              if (logger.isDebugEnabled()) {
+                logger.debug("Grabbed AutoBalancer lock");
+              }
+            } else {
+              if (logger.isDebugEnabled()) {
+                logger.debug("Another member owns auto-balance lock. Skip this attempt to rebalance the cluster");
+              }
+            }
+          }
+        }
-      return result;
+      return isLockAcquired.get();
+
+    void destroy();
-  /**
-   * Test hook to inject custom triggers
-   */
-  void setScheduler(AuditScheduler trigger) {
-    logger.info("Setting custom AuditScheduler");
-    this.scheduler = trigger;
-  }
-
-  /**
-   * Test hook to inject custom auditors
-   */
-  void setOOBAuditor(OOBAuditor auditor) {
-    logger.info("Setting custom Auditor");
-    this.auditor = auditor;
-  }
-
-  /**
-   * Test hook to inject a clock
-   */
-  void setTimeProvider(TimeProvider clock) {
-    logger.info("Setting custom TimeProvider");
-    this.clock = clock;
-  }
-
-  /**
-   * Test hook to inject a Cache operation facade
-   */
-  public void setCacheOperationFacade(CacheOperationFacade facade) {
-    this.cacheFacade = facade;
-  }
-
-}
+
+  public void destroy() {
+    scheduler.destroy();
+  }
+}
