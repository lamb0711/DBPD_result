GEODE-6194: add composite keys to jdbc (#3015)

Multiple --id column names can now be specified on "create jdbc-mapping"
using a comma separated list. 
The key object itself must then be a JSON string whose names are
the corresponding pdx field name for each id column name. 
The extension team is looking into changing composite keys for both GGC and JDBC
to something other than JSON.

+import java.util.Set;
+import org.json.JSONException;
+import org.json.JSONObject;
+
-    setValuesInStatement(statement, entryColumnData);
+    setValuesInStatement(statement, entryColumnData, Operation.GET);
-  private void setValuesInStatement(PreparedStatement statement, EntryColumnData entryColumnData)
+  private void setValuesInStatement(PreparedStatement statement, EntryColumnData entryColumnData,
+      Operation operation)
-    for (ColumnData columnData : entryColumnData.getEntryValueColumnData()) {
+    if (operation.isCreate() || operation.isUpdate()) {
+      index = setValuesFromColumnData(statement, entryColumnData.getEntryValueColumnData(), index);
+    }
+    setValuesFromColumnData(statement, entryColumnData.getEntryKeyColumnData(), index);
+  }
+
+  private int setValuesFromColumnData(PreparedStatement statement, List<ColumnData> columnDataList,
+      int index) throws SQLException {
+    for (ColumnData columnData : columnDataList) {
-
-    ColumnData keyColumnData = entryColumnData.getEntryKeyColumnData();
-    index++;
-    setValueOnStatement(statement, index, keyColumnData);
+    return index;
-    if (value == null && operation != Operation.DESTROY) {
+    if (value == null && !operation.isDestroy()) {
-        updateCount = executeWriteStatement(statement, entryColumnData);
+        updateCount = executeWriteStatement(statement, entryColumnData, operation);
-          updateCount = executeWriteStatement(upsertStatement, entryColumnData);
+          updateCount = executeWriteStatement(upsertStatement, entryColumnData, operation);
-      assert updateCount == 1;
+      assert updateCount == 1 : "expected 1 but updateCount was: " + updateCount;
-  private int executeWriteStatement(PreparedStatement statement, EntryColumnData entryColumnData)
+  private int executeWriteStatement(PreparedStatement statement, EntryColumnData entryColumnData,
+      Operation operation)
-    setValuesInStatement(statement, entryColumnData);
+    setValuesInStatement(statement, entryColumnData, operation);
-    String keyColumnName = tableMetaData.getKeyColumnName();
-    ColumnData keyColumnData =
-        new ColumnData(keyColumnName, key, tableMetaData.getColumnDataType(keyColumnName));
+    List<ColumnData> keyColumnData = createKeyColumnDataList(tableMetaData, regionMapping, key);
-      valueColumnData = createColumnDataList(tableMetaData, regionMapping, value);
+      valueColumnData = createValueColumnDataList(tableMetaData, regionMapping, value);
-  private List<ColumnData> createColumnDataList(TableMetaDataView tableMetaData,
+  private <K> List<ColumnData> createKeyColumnDataList(TableMetaDataView tableMetaData,
+      RegionMapping regionMapping, K key) {
+    List<String> keyColumnNames = tableMetaData.getKeyColumnNames();
+    List<ColumnData> result = new ArrayList<>();
+    if (keyColumnNames.size() == 1) {
+      String keyColumnName = keyColumnNames.get(0);
+      ColumnData columnData =
+          new ColumnData(keyColumnName, key, tableMetaData.getColumnDataType(keyColumnName));
+      result.add(columnData);
+    } else {
+      if (!(key instanceof String)) {
+        throw new JdbcConnectorException(
+            "The key \"" + key + "\" of class \"" + key.getClass().getName()
+                + "\" must be a java.lang.String because multiple columns are configured as ids.");
+      }
+      JSONObject compositeKey = null;
+      try {
+        compositeKey = new JSONObject((String) key);
+      } catch (JSONException ex) {
+        throw new JdbcConnectorException("The key \"" + key
+            + "\" must be a valid JSON string because multiple columns are configured as ids. Details: "
+            + ex.getMessage());
+      }
+      Set<String> fieldNames = compositeKey.keySet();
+      if (fieldNames.size() != keyColumnNames.size()) {
+        throw new JdbcConnectorException("The key \"" + key + "\" should have "
+            + keyColumnNames.size() + " fields but has " + fieldNames.size() + " fields.");
+      }
+      for (String fieldName : fieldNames) {
+        String columnName = regionMapping.getColumnNameForField(fieldName, tableMetaData);
+        if (!keyColumnNames.contains(columnName)) {
+          throw new JdbcConnectorException("The key \"" + key + "\" has the field \"" + fieldName
+              + "\" which does not match any of the key columns: " + keyColumnNames);
+        }
+        ColumnData columnData = new ColumnData(columnName, compositeKey.get(fieldName),
+            tableMetaData.getColumnDataType(columnName));
+        result.add(columnData);
+      }
+    }
+    return result;
+  }
+
+  private List<ColumnData> createValueColumnDataList(TableMetaDataView tableMetaData,
-      if (tableMetaData.getKeyColumnName().equals(columnName)) {
+      if (tableMetaData.getKeyColumnNames().contains(columnName)) {
