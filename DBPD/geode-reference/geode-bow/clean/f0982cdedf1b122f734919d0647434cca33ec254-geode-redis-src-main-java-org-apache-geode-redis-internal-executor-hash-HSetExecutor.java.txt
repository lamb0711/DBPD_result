Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
-import java.util.Map;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
+import org.apache.geode.cache.Region;
+import org.apache.geode.redis.internal.RedisDataType;
-/**
- * <pre>
- * Implements the HSET command to sets field in the hash stored at key to value.
- * A new entry in the hash is created if key does not exist.
- * Any existing in the hash with the given key is overwritten.
- *
- * Examples:
- *
- * redis> HSET myhash field1 "Hello"
- * (integer) 1
- * redis> HGET myhash field1
- *
- *
- * </pre>
- */
+  private final int EXISTING_FIELD = 0;
+
+  private final int NEW_FIELD = 1;
+
+  private final int VALUE_INDEX = 3;
+
-    if (commandElems.size() < 4 || commandElems.size() % 2 == 1) {
+    if (commandElems.size() < 4) {
+    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion =
+        getOrCreateRegion(context, key, RedisDataType.REDIS_HASH);
+
+    byte[] byteField = commandElems.get(FIELD_INDEX);
+    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
+
+    byte[] value = commandElems.get(VALUE_INDEX);
+
-    int fieldsAdded = 0;
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      Map<ByteArrayWrapper, ByteArrayWrapper> map = getMap(context, key);
+    if (onlySetOnAbsent())
+      oldValue = keyRegion.putIfAbsent(field, new ByteArrayWrapper(value));
+    else
+      oldValue = keyRegion.put(field, new ByteArrayWrapper(value));
-      for (int i = 2; i < commandElems.size(); i += 2) {
-        byte[] fieldArray = commandElems.get(i);
-        ByteArrayWrapper field = new ByteArrayWrapper(fieldArray);
-        byte[] value = commandElems.get(i + 1);
-        ByteArrayWrapper putValue = new ByteArrayWrapper(value);
+    if (oldValue == null)
+      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NEW_FIELD));
+    else
+      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), EXISTING_FIELD));
-        if (onlySetOnAbsent()) {
-          oldValue = map.putIfAbsent(field, putValue);
-        } else {
-          oldValue = map.put(field, putValue);
-        }
-
-        if (oldValue == null) {
-          fieldsAdded++;
-        }
-      }
-
-      this.saveMap(map, context, key);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
-      return;
-    }
-
-    command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), fieldsAdded));
