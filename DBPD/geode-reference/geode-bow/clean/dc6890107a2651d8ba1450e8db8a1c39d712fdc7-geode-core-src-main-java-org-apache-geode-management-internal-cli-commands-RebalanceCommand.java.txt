GEODE-6897: implement CMS rebalance operation (#3820)


-      commandResult.add(commandExecutors.submit(new ExecuteRebalanceWithTimeout(includeRegions,
-          excludeRegions, simulate, (InternalCache) getCache())));
+      commandResult.add(
+          commandExecutors.submit(rebalanceCallable(includeRegions, excludeRegions, simulate)));
-    // if the result contains only error section, i.e. no rebalance operation is done, mark this
-    // command result to be error. This would happy if user hasn't specified any valid region. If
-    // only one region specified is valid and rebalance is done, the result would be marked as
-    // success.
-    if (result.getSection("error") != null && result.getSectionSize() == 1) {
-      result.setStatus(Result.Status.ERROR);
-    }
+  public Callable<ResultModel> rebalanceCallable(String[] includeRegions, String[] excludeRegions,
+      boolean simulate) {
+    return new ExecuteRebalanceWithTimeout(includeRegions, excludeRegions, simulate,
+        (InternalCache) getCache());
+  }
+
-    int resultItemCount = 9;
+    final int resultItemCount = 9;
-      headerText = "Simulated partition regions ";
+      headerText = "Simulated partition regions";
-      headerText = "Rebalanced partition regions ";
+      headerText = "Rebalanced partition regions";
-      return executeRebalanceWithTimeout(includeRegions, excludeRegions, simulate);
+      ResultModel result = executeRebalanceWithTimeout(includeRegions, excludeRegions, simulate);
+
+      // if the result contains only error section, i.e. no rebalance operation is done, mark this
+      // command result to be error. This would happy if user hasn't specified any valid region. If
+      // only one region specified is valid and rebalance is done, the result would be marked as
+      // success.
+      if (result.getSectionSize() == 1 && result.getInfoSection("error") != null) {
+        result.setStatus(Result.Status.ERROR);
+      }
+
+      return result;
-    ResultModel executeRebalanceWithTimeout(String[] includeRegions, String[] excludeRegions,
+    private ResultModel executeRebalanceWithTimeout(String[] includeRegions,
+        String[] excludeRegions,
-              if (simulate) {
-                List resultList;
-                try {
-                  resultList = (ArrayList) executeFunction(rebalanceFunction, functionArgs, member)
-                      .getResult();
-                } catch (Exception ex) {
-                  LogWrapper.getInstance(cache)
-                      .info(CliStrings.format(
-                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception_1,
-                          member.getId(), ex.getMessage()), ex);
-                  errors.addLine(CliStrings.format(
-                      CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
-                      member.getId()) + ": " + ex.getMessage());
-                  continue;
-                }
-
-                if (checkResultList(errors, resultList, member)) {
-                  continue;
-                }
-                List<String> rstList = Arrays.asList(((String) resultList.get(0)).split(","));
-
-                toCompositeResultData(result, rstList, index, true, cache);
-              } else {
-                List resultList;
-                try {
-                  resultList = (ArrayList) executeFunction(rebalanceFunction, functionArgs, member)
-                      .getResult();
-                } catch (Exception ex) {
-                  LogWrapper.getInstance(cache)
-                      .info(CliStrings.format(
-                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception_1,
-                          member.getId(), ex.getMessage()), ex);
-                  errors.addLine(CliStrings.format(
-                      CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
-                      member.getId()) + ": " + ex.getMessage());
-                  continue;
-                }
-
-                if (checkResultList(errors, resultList, member)) {
-                  continue;
-                }
-                List<String> rstList = Arrays.asList(((String) resultList.get(0)).split(","));
-
-                toCompositeResultData(result, rstList, index, false, cache);
+              List resultList;
+              try {
+                resultList = (ArrayList) executeFunction(rebalanceFunction, functionArgs, member)
+                    .getResult();
+              } catch (Exception ex) {
+                LogWrapper.getInstance(cache)
+                    .info(CliStrings.format(
+                        CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception_1,
+                        member.getId(), ex.getMessage()), ex);
+                errors.addLine(CliStrings.format(
+                    CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
+                    member.getId()) + ": " + ex.getMessage());
+                continue;
+              if (checkResultList(errors, resultList, member)) {
+                continue;
+              }
+              List<String> rstList = Arrays.asList(((String) resultList.get(0)).split(","));
+
+              toCompositeResultData(result, rstList, index, simulate, cache);
-                buildResultForRebalance(result, op.getResults(), index, true, cache);
-
-                // Wait until the rebalance is complete and then get the results
-                buildResultForRebalance(result, op.getResults(), index, false, cache);
+              // Wait until the rebalance is complete and then get the results
+              buildResultForRebalance(result, op.getResults(), index, simulate, cache);
-          result = executeRebalanceOnDS(cache, String.valueOf(simulate), excludeRegions);
-              .info("Starting Rebalance simulate false result >> " + result);
+              .info("Starting Rebalance simulate=" + simulate + " result >> " + result);
+          result = executeRebalanceOnDS(cache, String.valueOf(simulate), excludeRegions);
