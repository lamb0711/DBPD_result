Merge remote-tracking branch 'origin/develop' into feature/GEODE-11

- * =========================================================================
- * Copyright Copyright (c) 2000-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * $Id: AbstractIndex.java,v 1.2 2005/02/09 10:05:47 vaibhav Exp $
- * =========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.concurrent.atomic.AtomicInteger;
-    private volatile int numValues = 0;
+    private AtomicInteger numValues = new AtomicInteger(0);
-      this.numValues++;
+      numValues.incrementAndGet();
-        this.numValues = this.numValues + values.size();
+        numValues.addAndGet(values.size());
-      this.numValues = this.numValues + values.size();
+      numValues.addAndGet(values.size());
-          this.numValues--;
+          numValues.decrementAndGet();
-        this.numValues--;
+        this.numValues.decrementAndGet();
-            this.numValues = (retVal instanceof Collection) ? this.numValues
-                - ((Collection) retVal).size() : this.numValues - 1;
+            numValues.addAndGet((retVal instanceof Collection) ?
+              - ((Collection) retVal).size() : -1 );
-      return this.numValues;
+      return this.numValues.get();
-      this.numValues = 0;
+      this.numValues.set(0);
-      this.numValues += (((values instanceof Collection) ? ((Collection) values)
+      this.numValues.addAndGet(((values instanceof Collection) ? ((Collection) values)
