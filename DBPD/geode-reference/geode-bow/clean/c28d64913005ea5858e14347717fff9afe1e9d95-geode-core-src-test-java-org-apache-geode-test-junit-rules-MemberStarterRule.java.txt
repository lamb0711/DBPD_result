Merge branch 'release/1.4.0'

+import static org.awaitility.Awaitility.await;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.geode.internal.cache.InternalCache;
+import org.apache.geode.management.DistributedRegionMXBean;
+import org.apache.geode.management.DistributedSystemMXBean;
+import org.apache.geode.management.ManagementService;
+import org.apache.geode.management.internal.cli.CliUtil;
-        if (this instanceof ServerStarterRule)
+        if (this instanceof ServerStarterRule) {
-        else {
+        } else {
+  public DistributedRegionMXBean getRegionMBean(String regionName) {
+    return getManagementService().getDistributedRegionMXBean(regionName);
+  }
+
+  public ManagementService getManagementService() {
+    ManagementService managementService =
+        ManagementService.getExistingManagementService(getCache());
+    if (managementService == null) {
+      throw new IllegalStateException("Management service is not available on this member");
+    }
+    return managementService;
+  }
+
+  public abstract InternalCache getCache();
+
+  public void waitTillRegionIsReadyOnServers(String regionName, int serverCount) {
+    await().atMost(30, TimeUnit.SECONDS).until(() -> getRegionMBean(regionName) != null);
+    await().atMost(30, TimeUnit.SECONDS)
+        .until(() -> getRegionMBean(regionName).getMembers().length == serverCount);
+  }
+
+  private long getDiskStoreCount(String diskStoreName) {
+    DistributedSystemMXBean dsMXBean = getManagementService().getDistributedSystemMXBean();
+    Map<String, String[]> diskstores = dsMXBean.listMemberDiskstore();
+    long count =
+        diskstores.values().stream().filter(x -> ArrayUtils.contains(x, diskStoreName)).count();
+
+    return count;
+  }
+
+  public void waitTilGatewaySendersAreReady(int expectedGatewayObjectCount) throws Exception {
+    DistributedSystemMXBean dsMXBean = getManagementService().getDistributedSystemMXBean();
+    await().atMost(30, TimeUnit.SECONDS)
+        .until(() -> dsMXBean.listGatewaySenderObjectNames().length == expectedGatewayObjectCount);
+  }
+
+  public void waitTillDiskStoreIsReady(String diskstoreName, int serverCount) {
+    await().atMost(30, TimeUnit.SECONDS)
+        .until(() -> getDiskStoreCount(diskstoreName) == serverCount);
+  }
+
+  public void waitTillAsyncEventQueuesAreReadyOnServers(String queueId, int serverCount) {
+    await().atMost(2, TimeUnit.SECONDS).until(
+        () -> CliUtil.getMembersWithAsyncEventQueue(getCache(), queueId).size() == serverCount);
+  }
+
