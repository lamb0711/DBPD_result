Merge branch 'release/1.4.0'

-import org.apache.geode.cache.execute.FunctionAdapter;
+import org.apache.geode.cache.execute.Function;
-import org.apache.geode.internal.cache.wan.GatewaySenderException;
-import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.management.internal.cli.i18n.CliStrings;
-import org.apache.logging.log4j.Logger;
+import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-public class GatewaySenderDestroyFunction extends FunctionAdapter implements InternalEntity {
+public class GatewaySenderDestroyFunction implements Function, InternalEntity {
-
-  private static final Logger logger = LogService.getLogger();
-    try {
-      GatewaySender gatewaySender =
-          cache.getGatewaySender(gatewaySenderDestroyFunctionArgs.getId());
-      if (gatewaySender != null) {
-        gatewaySender.stop();
-        gatewaySender.destroy();
+    String senderId = gatewaySenderDestroyFunctionArgs.getId();
+    boolean ifExists = gatewaySenderDestroyFunctionArgs.isIfExists();
+    GatewaySender gatewaySender = cache.getGatewaySender(senderId);
+    if (gatewaySender == null) {
+      String message = "Gateway sender " + senderId + " not found.";
+      if (ifExists) {
+        resultSender
+            .lastResult(new CliFunctionResult(memberNameOrId, true, "Skipping: " + message));
-        throw new GatewaySenderException(
-            "GateWaySender with Id  " + gatewaySenderDestroyFunctionArgs.getId() + " not found");
+        resultSender.lastResult(new CliFunctionResult(memberNameOrId, false, message));
-      resultSender.lastResult(new CliFunctionResult(memberNameOrId, true,
-          CliStrings.format(CliStrings.DESTROY_GATEWAYSENDER__MSG__GATEWAYSENDER_0_DESTROYED_ON_1,
-              new Object[] {gatewaySenderDestroyFunctionArgs.getId(), memberNameOrId})));
+      return;
+    }
-    } catch (GatewaySenderException gse) {
-      resultSender.lastResult(handleException(memberNameOrId, gse.getMessage(), gse));
+    try {
+      gatewaySender.stop();
+      gatewaySender.destroy();
+      XmlEntity xmlEntity = new XmlEntity(CacheXml.GATEWAY_SENDER, "id", senderId);
+      resultSender.lastResult(new CliFunctionResult(memberNameOrId, xmlEntity,
+          String.format("GatewaySender \"%s\" destroyed on \"%s\"", senderId, memberNameOrId)));
-      String exceptionMsg = e.getMessage();
-      if (exceptionMsg == null) {
-        exceptionMsg = CliUtil.stackTraceAsString(e);
-      }
-      resultSender.lastResult(handleException(memberNameOrId, exceptionMsg, e));
+      resultSender.lastResult(new CliFunctionResult(memberNameOrId, e, ""));
-  private CliFunctionResult handleException(final String memberNameOrId, final String exceptionMsg,
-      final Exception e) {
-    if (e != null && logger.isDebugEnabled()) {
-      logger.debug(e.getMessage(), e);
-    }
-    if (exceptionMsg != null) {
-      return new CliFunctionResult(memberNameOrId, false, exceptionMsg);
-    }
-
-    return new CliFunctionResult(memberNameOrId);
-  }
-
