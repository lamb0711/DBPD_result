Revert "GEODE-7953: Restore Redundancy Internal API (#4909)" (#5006)

This reverts commit 0f9918510b24f2169189936a92951b9bb4f313f1.
+import java.util.HashSet;
-import java.util.concurrent.ConcurrentHashMap;
-import org.apache.geode.cache.control.RestoreRedundancyOperation;
-import org.apache.geode.cache.control.RestoreRedundancyResults;
-  private Map<ResourceType, Set<ResourceListener>> listeners = new HashMap<>();
+  private Map<ResourceType, Set<ResourceListener>> listeners =
+      new HashMap<ResourceType, Set<ResourceListener>>();
-  // A map of in progress rebalance operations. The value is Boolean because ConcurrentHashMap does
-  // not support null values.
-  private final Map<RebalanceOperation, Boolean> inProgressRebalanceOperations =
-      new ConcurrentHashMap<>();
-
-  // A map of in progress restore redundancy completable futures. The value is Boolean because
-  // ConcurrentHashMap does not support null values.
-  private final Map<CompletableFuture<RestoreRedundancyResults>, Boolean> inProgressRedundancyOperations =
-      new ConcurrentHashMap<>();
+  // The set of in progress rebalance operations.
+  private final Set<RebalanceOperation> inProgressOperations = new HashSet<RebalanceOperation>();
+  private final Object inProgressOperationsLock = new Object();
-    return Collections.unmodifiableSet(inProgressRebalanceOperations.keySet());
+    synchronized (this.inProgressOperationsLock) {
+      return new HashSet<RebalanceOperation>(this.inProgressOperations);
+    }
-    inProgressRebalanceOperations.put(op, Boolean.TRUE);
+    synchronized (this.inProgressOperationsLock) {
+      this.inProgressOperations.add(op);
+    }
-    inProgressRebalanceOperations.remove(op);
+    synchronized (this.inProgressOperationsLock) {
+      this.inProgressOperations.remove(op);
+    }
-  }
-  @Override
-  public RestoreRedundancyOperation createRestoreRedundancyOperation() {
-    return new RestoreRedundancyOperationImpl(cache);
-  }
-
-  @Override
-  public Set<CompletableFuture<RestoreRedundancyResults>> getRestoreRedundancyFutures() {
-    return Collections.unmodifiableSet(inProgressRedundancyOperations.keySet());
-  }
-
-  void addInProgressRestoreRedundancy(
-      CompletableFuture<RestoreRedundancyResults> completableFuture) {
-    inProgressRedundancyOperations.put(completableFuture, Boolean.TRUE);
-  }
-
-  void removeInProgressRestoreRedundancy(
-      CompletableFuture<RestoreRedundancyResults> completableFuture) {
-    inProgressRedundancyOperations.remove(completableFuture);
+   *
+     *
+     *
+     *
+     *
+     *
