GEODE-7186: Move HttpService implementation into its own module (#4040)

- For maven/gradle consumption, this component becomes an optional
  dependency.
- The CacheService.init() method now returns a boolean indicating
  whether the given service was initialized or not.
- Services are now created before cache creation resourcce events are
  emitted.
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.cache.Cache;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.internal.net.SSLConfigurationFactory;
+import org.apache.geode.internal.security.SecurableCommunicationChannel;
+import org.apache.geode.management.internal.beans.CacheServiceMBeanBase;
-  public static final String AUTH_TOKEN_ENABLED_PARAM = "org.apache.geode.auth.token.enabled";
-  public static final String SECURITY_SERVICE_SERVLET_CONTEXT_PARAM =
-      "org.apache.geode.securityService";
-
-  public static final String GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM = "org.apache.geode.sslConfig";
-  public static final String CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM =
-      "org.apache.geode.cluster.management.service";
-
-  public InternalHttpService(String bindAddress, int port, SSLConfig sslConfig) {
-    if (port == 0) {
-      return;
+  @Override
+  public boolean init(Cache cache) {
+    InternalDistributedSystem distributedSystem =
+        (InternalDistributedSystem) cache.getDistributedSystem();
+    DistributionConfig systemConfig = distributedSystem.getConfig();
+
+    if (((InternalCache) cache).isClient()) {
+      return false;
+    if (systemConfig.getHttpServicePort() == 0) {
+      logger.info("HttpService is disabled with http-service-port = 0");
+      return false;
+    }
+
+    try {
+      createJettyServer(systemConfig.getHttpServiceBindAddress(),
+          systemConfig.getHttpServicePort(),
+          SSLConfigurationFactory.getSSLConfigForComponent(systemConfig,
+              SecurableCommunicationChannel.WEB));
+    } catch (Throwable ex) {
+      logger.warn("Could not enable HttpService: {}", ex.getMessage());
+      return false;
+    }
+
+    return true;
+  }
+
+  @VisibleForTesting
+  public void createJettyServer(String bindAddress, int port, SSLConfig sslConfig) {
+  @Override
+  public Class<? extends CacheService> getInterface() {
+    return HttpService.class;
+  }
+
+  @Override
+  public CacheServiceMBeanBase getMBean() {
+    return null;
+  }
+
-  public void stop() {
+  public void close() {
