Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.cache.tier.sockets.HandShake;
+import org.apache.geode.internal.cache.tier.sockets.Handshake;
-  private final StoppableReentrantReadWriteLock rwLock;
+  private StoppableReentrantReadWriteLock rwLock;
-  private final StoppableReentrantReadWriteLock.StoppableReadLock readLock;
+  private StoppableReentrantReadWriteLock.StoppableReadLock readLock;
-  private final StoppableWriteLock writeLock;
+  private StoppableWriteLock writeLock;
-  private final String regionName;
+  private String regionName;
-  private final ClientProxyMembershipID clientProxyID;
+  private ClientProxyMembershipID clientProxyID;
-  public final HARegionQueueStats stats;
+  public HARegionQueueStats stats;
-  protected final MapWrapper threadIdToSeqId;
+  protected MapWrapper threadIdToSeqId;
-  private final StoppableReentrantReadWriteLock giiLock;
+  private StoppableReentrantReadWriteLock giiLock;
-  private final CancelCriterion stopper;
+  private CancelCriterion stopper;
-  protected byte clientConflation = HandShake.CONFLATION_DEFAULT;
+  protected byte clientConflation = Handshake.CONFLATION_DEFAULT;
-  /**
-   * @param isPrimary whether this is the primary queue for a client
-   */
-  protected HARegionQueue(String regionName, InternalCache cache,
-      HARegionQueueAttributes haAttributes, Map haContainer, ClientProxyMembershipID clientProxyId,
-      final byte clientConflation, boolean isPrimary)
+  HARegionQueue(String regionName, HARegion haRegion, InternalCache cache, Map haContainer,
+      ClientProxyMembershipID clientProxyId, final byte clientConflation, boolean isPrimary,
+      HARegionQueueStats stats, StoppableReentrantReadWriteLock giiLock,
+      StoppableReentrantReadWriteLock rwLock, CancelCriterion cancelCriterion,
+      boolean puttingGIIDataInQueue)
+    initializeHARegionQueue(regionName, haRegion, haContainer, clientProxyId, clientConflation,
+        isPrimary, stats, giiLock, rwLock, cancelCriterion, puttingGIIDataInQueue);
+  }
-    String processedRegionName = createRegionName(regionName);
+  private void initializeHARegionQueue(String regionName, HARegion haRegion, Map haContainer,
+      ClientProxyMembershipID clientProxyId, byte clientConflation, boolean isPrimary,
+      HARegionQueueStats stats, StoppableReentrantReadWriteLock giiLock,
+      StoppableReentrantReadWriteLock rwLock, CancelCriterion cancelCriterion,
+      boolean putGIIDataInQueue) throws InterruptedException {
+    this.regionName = regionName;
+    this.region = haRegion;
-    this.regionName = processedRegionName;
-    StatisticsFactory factory = cache.getDistributedSystem();
-    this.stats = new HARegionQueueStats(factory, processedRegionName);
+    this.stats = stats;
-    this.giiLock = new StoppableReentrantReadWriteLock(cache.getCancelCriterion());
+    this.giiLock = giiLock;
-    createHARegion(processedRegionName, cache);
-
-    this.stopper = this.region.getCancelCriterion();
-    this.rwLock = new StoppableReentrantReadWriteLock(this.stopper);
+    this.stopper = cancelCriterion;
+    this.rwLock = rwLock;
-    putGIIDataInRegion();
+    // false specifically set in tests only
+    if (putGIIDataInQueue) {
+      putGIIDataInRegion();
+    }
+  /**
+   * @param isPrimary whether this is the primary queue for a client
+   */
+  protected HARegionQueue(String regionName, InternalCache cache, Map haContainer,
+      ClientProxyMembershipID clientProxyId, final byte clientConflation, boolean isPrimary)
+      throws IOException, ClassNotFoundException, CacheException, InterruptedException {
+
+    String processedRegionName = createRegionName(regionName);
+
+    // Initialize the statistics
+    StatisticsFactory factory = cache.getDistributedSystem();
+    createHARegion(processedRegionName, cache);
+
+    initializeHARegionQueue(processedRegionName, this.region, haContainer, clientProxyId,
+        clientConflation, isPrimary, new HARegionQueueStats(factory, processedRegionName),
+        new StoppableReentrantReadWriteLock(cache.getCancelCriterion()),
+        new StoppableReentrantReadWriteLock(region.getCancelCriterion()),
+        this.region.getCancelCriterion(), true);
+  }
+
-      case HandShake.CONFLATION_OFF:
+      case Handshake.CONFLATION_OFF:
-      case HandShake.CONFLATION_ON:
+      case Handshake.CONFLATION_ON:
-      case HandShake.CONFLATION_DEFAULT:
+      case Handshake.CONFLATION_DEFAULT:
-        HandShake.CONFLATION_DEFAULT, false, Boolean.FALSE);
+        Handshake.CONFLATION_DEFAULT, false, Boolean.FALSE);
-        hrq = new HARegionQueue(regionName, cache, hrqa, haContainer, clientProxyId,
-            clientConflation, isPrimary);
+        hrq = new HARegionQueue(regionName, cache, haContainer, clientProxyId, clientConflation,
+            isPrimary);
-        HandShake.CONFLATION_DEFAULT, false, Boolean.FALSE);
+        Handshake.CONFLATION_DEFAULT, false, Boolean.FALSE);
-      super(regionName, cache, hrqa, haContainer, clientProxyId, clientConflation, isPrimary);
+      super(regionName, cache, haContainer, clientProxyId, clientConflation, isPrimary);
-          HandShake.CONFLATION_DEFAULT, false);
+          Handshake.CONFLATION_DEFAULT, false);
-          HandShake.CONFLATION_DEFAULT, false);
+          Handshake.CONFLATION_DEFAULT, false);
-      super(regionName, cache, hrqa, haContainer, null, clientConflation, isPrimary);
+      super(regionName, cache, haContainer, null, clientConflation, isPrimary);
-      this(regionName, cache, hrqa, new HashMap(), HandShake.CONFLATION_DEFAULT, false);
+      this(regionName, cache, hrqa, new HashMap(), Handshake.CONFLATION_DEFAULT, false);
-      DM dm = ids.getDistributionManager();
+      DistributionManager dm = ids.getDistributionManager();
-    if (value != HandShake.CONFLATION_OFF && value != HandShake.CONFLATION_ON
-        && value != HandShake.CONFLATION_DEFAULT) {
+    if (value != Handshake.CONFLATION_OFF && value != Handshake.CONFLATION_ON
+        && value != Handshake.CONFLATION_DEFAULT) {
