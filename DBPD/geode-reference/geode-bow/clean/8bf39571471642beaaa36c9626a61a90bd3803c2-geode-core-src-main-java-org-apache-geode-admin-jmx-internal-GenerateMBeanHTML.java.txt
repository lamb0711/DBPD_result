Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import java.util.*;
+// import java.util.*;
- * A tool that reads the XML description of MBeans used with the
- * Jakarta Commons Modeler and generates an HTML file that documents
- * each MBean.
+ * A tool that reads the XML description of MBeans used with the Jakarta Commons Modeler and
+ * generates an HTML file that documents each MBean.
-    "/org/apache/geode/admin/jmx/internal/doc-files/mbeans-descriptors.dtd";
+      "/org/apache/geode/admin/jmx/internal/doc-files/mbeans-descriptors.dtd";
-//  /** The system id of MBean description's DTD */
-//  private static final String SYSTEM_ID = 
-//    "http://jakarta.apache.org/commons/dtds/mbeans-descriptors.dtd";
+  // /** The system id of MBean description's DTD */
+  // private static final String SYSTEM_ID =
+  // "http://jakarta.apache.org/commons/dtds/mbeans-descriptors.dtd";
-//  /** The public id for the DTD */
-//  private static final String PUBLIC_ID =
-//    "-//Apache Software Foundation//DTD Model MBeans Configuration File";
+  // /** The public id for the DTD */
+  // private static final String PUBLIC_ID =
+  // "-//Apache Software Foundation//DTD Model MBeans Configuration File";
-//  /** The name of the "description" element */
-//  private static final String DESCRIPTOR = "descriptor";
+  // /** The name of the "description" element */
+  // private static final String DESCRIPTOR = "descriptor";
-  //////////////////////  Instance Fields  ///////////////////////
+  ////////////////////// Instance Fields ///////////////////////
-  ///////////////////////  Static Methods  ///////////////////////
+  /////////////////////// Static Methods ///////////////////////
-   * Converts data from the given <code>InputStream</code> into HTML
-   * that is written to the given <code>PrintWriter</code>
+   * Converts data from the given <code>InputStream</code> into HTML that is written to the given
+   * <code>PrintWriter</code>
-  private static void convert(InputStream in, PrintWriter out) 
-    throws Exception {
+  private static void convert(InputStream in, PrintWriter out) throws Exception {
-  ////////////////////////  Constructors  ////////////////////////
+  //////////////////////// Constructors ////////////////////////
-   * Creates a new <code>GenerateMBeanHTML</code> that writes to the
-   * given <code>PrintWriter</code>.
+   * Creates a new <code>GenerateMBeanHTML</code> that writes to the given <code>PrintWriter</code>.
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * Given a public id, attempt to resolve it to a DTD.  Returns an
-   * <code>InputSoure</code> for the DTD.
+   * Given a public id, attempt to resolve it to a DTD. Returns an <code>InputSoure</code> for the
+   * DTD.
-  public InputSource resolveEntity(String publicId, String systemId) 
-    throws SAXException {
+  public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
-      throw new SAXException(LocalizedStrings.GenerateMBeanHTML_PUBLIC_ID_0_SYSTEM_ID_1.toLocalizedString(new Object[] {publicId, systemId}));
+      throw new SAXException(LocalizedStrings.GenerateMBeanHTML_PUBLIC_ID_0_SYSTEM_ID_1
+          .toLocalizedString(new Object[] {publicId, systemId}));
-//    if (location != null) (cannot be null) 
+    // if (location != null) (cannot be null)
-        throw new SAXNotRecognizedException(LocalizedStrings.GenerateMBeanHTML_DTD_NOT_FOUND_0.toLocalizedString(location));
+        throw new SAXNotRecognizedException(
+            LocalizedStrings.GenerateMBeanHTML_DTD_NOT_FOUND_0.toLocalizedString(location));
-//    } else {
-//      throw new SAXNotRecognizedException(LocalizedStrings.GenerateMBeanHTML_COULD_NOT_FIND_DTD_FOR_0_1.toLocalizedString(new Object[] {publicId, systemId}));
+      // } else {
+      // throw new
+      // SAXNotRecognizedException(LocalizedStrings.GenerateMBeanHTML_COULD_NOT_FIND_DTD_FOR_0_1.toLocalizedString(new
+      // Object[] {publicId, systemId}));
-  public void warning(SAXParseException ex) throws SAXException { 
+  public void warning(SAXParseException ex) throws SAXException {
-  
+
-  
+
-    pw.println("<P>This document describes the attributes, operations,"); 
+    pw.println("<P>This document describes the attributes, operations,");
-    pw.println("Management Beans (MBeans).</P>"); 
+    pw.println("Management Beans (MBeans).</P>");
-    /*String description =*/ atts.getValue(DESCRIPTION);
+    /* String description = */ atts.getValue(DESCRIPTION);
-      String title = "Operations and Parameters";
+        String title = "Operations and Parameters";
-    
+
-    
+
-    
+
-    
+
-  public void startElement(String namespaceURI, String localName,
-                           String qName, Attributes atts)
-    throws SAXException {
+  public void startElement(String namespaceURI, String localName, String qName, Attributes atts)
+      throws SAXException {
-  public void endElement(String namespaceURI, String localName,
-                         String qName)
-    throws SAXException {
+  public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
-  //////////  Inherited methods that don't do anything  //////////
+  ////////// Inherited methods that don't do anything //////////
-  public void characters(char[] ch, int start, int length)
-    throws SAXException {
+  public void characters(char[] ch, int start, int length) throws SAXException {
-  public void setDocumentLocator(Locator locator) { }
+  public void setDocumentLocator(Locator locator) {}
-  public void startDocument() throws SAXException { }
+  public void startDocument() throws SAXException {}
-  public void endDocument() throws SAXException { }
+  public void endDocument() throws SAXException {}
-  public void startPrefixMapping(String prefix, String uri) 
-    throws SAXException { }
+  public void startPrefixMapping(String prefix, String uri) throws SAXException {}
-  public void endPrefixMapping(String prefix)
-    throws SAXException { }
+  public void endPrefixMapping(String prefix) throws SAXException {}
-  public void ignorableWhitespace(char[] ch, int start, int length)
-    throws SAXException { }
+  public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {}
-  public void processingInstruction(String target, String data)
-    throws SAXException { }
+  public void processingInstruction(String target, String data) throws SAXException {}
-  public void skippedEntity(String name) throws SAXException { }
+  public void skippedEntity(String name) throws SAXException {}
-  ////////////////////////  Main Program  ////////////////////////
+  //////////////////////// Main Program ////////////////////////
-//  private static final PrintStream out = System.out;
+  // private static final PrintStream out = System.out;
-    convert(new FileInputStream(xmlFile),
-            new PrintWriter(new FileWriter(htmlFile), true));
+    convert(new FileInputStream(xmlFile), new PrintWriter(new FileWriter(htmlFile), true));
