Merge branch 'develop' into feature/GEODE-7049

-import java.util.function.LongSupplier;
-
-import org.apache.geode.internal.NanoTimer;
+import org.apache.geode.internal.statistics.StatisticsClock;
-class RegionPerfStats extends CachePerfStats {
+class RegionPerfStats extends CachePerfStats implements RegionStats {
+  private final StatisticsClock clock;
-      InternalRegion region,
-      MeterRegistry meterRegistry) {
-    this(statisticsFactory, textId, createClock(), cachePerfStats, region,
+      InternalRegion region, MeterRegistry meterRegistry, StatisticsClock clock) {
+    this(statisticsFactory, textId, clock, cachePerfStats, region,
-  RegionPerfStats(StatisticsFactory statisticsFactory, String textId, LongSupplier clock,
-      CachePerfStats cachePerfStats,
-      InternalRegion region, MeterRegistry meterRegistry) {
+  RegionPerfStats(StatisticsFactory statisticsFactory, String textId, StatisticsClock clock,
+      CachePerfStats cachePerfStats, InternalRegion region,
+      MeterRegistry meterRegistry) {
+    this.clock = clock;
-    entriesGauge = Gauge.builder("member.region.entries", region::getLocalSize)
+    entriesGauge = Gauge.builder("geode.cache.entries", region::getLocalSize)
-        .tag("region.name", region.getName())
+        .tag("region", region.getName())
-  private static LongSupplier createClock() {
-    return enableClockStats ? NanoTimer::getTime : () -> 0;
-  }
-
-  /**
-   * @return the timestamp that marks the start of the operation
-   */
-  /**
-   * @param start the timestamp taken when the operation started
-   */
-    // should not be disabled by enableClockStats==false
+    // should not be disabled by clock.isEnabled()==false
-  /**
-   * @return the timestamp that marks the start of the operation
-   */
-  /**
-   * @param start the timestamp taken when the operation started
-   */
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-  /**
-   * @return the timestamp that marks the start of the operation
-   */
-  /**
-   * @param start the timestamp taken when the operation started
-   */
-    // not be disabled by enableClockStats==false
+    // not be disabled by clock.isEnabled()==false
-  /**
-   * @return the timestamp that marks the start of the operation
-   */
-  /**
-   * @param start the timestamp taken when the operation started
-   */
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-  /**
-   * @return the timestamp that marks the start of the operation
-   * @since GemFire 3.5
-   */
-  /**
-   * @param start the timestamp taken when the operation started
-   * @since GemFire 3.5
-   */
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-  /**
-   * @return the timestamp that marks the start of the operation
-   */
-  /**
-   * @param start the timestamp taken when the operation started
-   */
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-  /**
-   * @param start the timestamp taken when the operation started
-   */
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-  /**
-   * @param start the timestamp taken when the operation started
-   */
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-  /**
-   * @param start the timestamp taken when the operation started
-   * @param isUpdate true if the put was an update (origin remote)
-   */
-      if (enableClockStats) {
+      if (clock.isEnabled()) {
-      if (enableClockStats) {
+      if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-  protected void incEventQueueThrottleTime(long nanos) {
+  public void incEventQueueThrottleTime(long nanos) {
-  protected void incEventThreads(int items) {
+  public void incEventThreads(int items) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
-    if (enableClockStats) {
+    if (clock.isEnabled()) {
