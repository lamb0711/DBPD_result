Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import javax.management.MBeanException;
+// import javax.management.MBeanException;
- * A server component that provides administration-related information
- * about a GemFire distributed system via the Java Management
- * Extension JMX API.  When a JMX <code>Agent</code> is created, it
- * registers an MBean that represents {@link #getObjectName itself}. 
- * Click <A href="doc-files/mbeans-descriptions.html">here</A> for a
- * description of the attributes, operations, and notifications of
- * this and other GemFire JMX MBeans.
+ * A server component that provides administration-related information about a GemFire distributed
+ * system via the Java Management Extension JMX API. When a JMX <code>Agent</code> is created, it
+ * registers an MBean that represents {@link #getObjectName itself}. Click
+ * <A href="doc-files/mbeans-descriptions.html">here</A> for a description of the attributes,
+ * operations, and notifications of this and other GemFire JMX MBeans.
- * The GemFire JMX Agent currently supports three JMX "adapters"
- * through which clients can access the GemFire management beans: an
- * "HTTP adapter" that allows a web browser client to view and modify
- * management beans via HTTP or HTTPS, an "RMI adapter" that allows
- * Java programs to access management beans using Remote Method
- * Invocation, and an "SNMP adapter" that allows SNMP to access
- * management beans.  Information about configuring these adapters can
- * be found in {@link AgentConfig}.
+ * The GemFire JMX Agent currently supports three JMX "adapters" through which clients can access
+ * the GemFire management beans: an "HTTP adapter" that allows a web browser client to view and
+ * modify management beans via HTTP or HTTPS, an "RMI adapter" that allows Java programs to access
+ * management beans using Remote Method Invocation, and an "SNMP adapter" that allows SNMP to access
+ * management beans. Information about configuring these adapters can be found in
+ * {@link AgentConfig}.
- * In most distributed caching architectures, JMX administration
- * agents are run in their own processes.  A stand-alone JMX agent is
- * managed using the <code>agent</code> command line utility:
+ * In most distributed caching architectures, JMX administration agents are run in their own
+ * processes. A stand-alone JMX agent is managed using the <code>agent</code> command line utility:
- * This class allows a GemFire application VM to host a JMX management
- * agent.  Architectures with "co-located" JMX agents reduce the
- * number of overall proceses required.  However, hosting a JMX
- * management agent in the same VM as a GemFire application is not
- * generally recommended because it adds extra burden to an
- * application VM and in the event that the application VM exits the
+ * This class allows a GemFire application VM to host a JMX management agent. Architectures with
+ * "co-located" JMX agents reduce the number of overall proceses required. However, hosting a JMX
+ * management agent in the same VM as a GemFire application is not generally recommended because it
+ * adds extra burden to an application VM and in the event that the application VM exits the
- * @deprecated as of 7.0 use the <code><a href="{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code> package instead
+ * @deprecated as of 7.0 use the <code><a href=
+ *             "{@docRoot}/org/apache/geode/management/package-summary.html">management</a></code>
+ *             package instead
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * Starts this JMX Agent and its associated adapters.  This method
-   * does not {@linkplain #connectToSystem connect} to the distributed
-   * system.
+   * Starts this JMX Agent and its associated adapters. This method does not
+   * {@linkplain #connectToSystem connect} to the distributed system.
-   * Returns the JMX <code>MBeanServer</code> with which GemFire
-   * MBeans are registered or <code>null</code> if this
-   * <code>Agent</code> is not started.
+   * Returns the JMX <code>MBeanServer</code> with which GemFire MBeans are registered or
+   * <code>null</code> if this <code>Agent</code> is not started.
-   * {@linkplain #disconnectFromSystem Disconnects} from the
-   * distributed system and stops this JMX Agent and all of its
-   * associated adapters.
+   * {@linkplain #disconnectFromSystem Disconnects} from the distributed system and stops this JMX
+   * Agent and all of its associated adapters.
-   * Returns the <code>ObjectName</code> of the JMX management bean
-   * that represents this agent or <code>null</code> if this
-   * <code>Agent</code> has not been started.
+   * Returns the <code>ObjectName</code> of the JMX management bean that represents this agent or
+   * <code>null</code> if this <code>Agent</code> has not been started.
-   * Returns whether or not this JMX <code>Agent</code> is currently
-   * providing information about a distributed system.
+   * Returns whether or not this JMX <code>Agent</code> is currently providing information about a
+   * distributed system.
-   * Connects to the distributed system described by this <code>Agent</code>'s 
-   * configuration.
+   * Connects to the distributed system described by this <code>Agent</code>'s configuration.
-   * @return The object name of the system that the <code>Agent</code>
-   *         is now connected to.
+   * @return The object name of the system that the <code>Agent</code> is now connected to.
-  public ObjectName connectToSystem()
-    throws AdminException, MalformedObjectNameException;
+  public ObjectName connectToSystem() throws AdminException, MalformedObjectNameException;
-   * Returns the <code>AdminDistributedSystem</code> that underlies
-   * this JMX <code>Agent</code> or <code>null</code> is this agent is
-   * not {@linkplain #isConnected connected}.
+   * Returns the <code>AdminDistributedSystem</code> that underlies this JMX <code>Agent</code> or
+   * <code>null</code> is this agent is not {@linkplain #isConnected connected}.
-   * Returns the object name of the JMX MBean that represents the
-   * distributed system administered by this <code>Agent</code> or
-   * <code>null</code> if this <code>Agent</code> has not {@linkplain
-   * #connectToSystem connected} to the distributed system.
+   * Returns the object name of the JMX MBean that represents the distributed system administered by
+   * this <code>Agent</code> or <code>null</code> if this <code>Agent</code> has not
+   * {@linkplain #connectToSystem connected} to the distributed system.
-  public ObjectName manageDistributedSystem()
-    throws MalformedObjectNameException;
+  public ObjectName manageDistributedSystem() throws MalformedObjectNameException;
-   * Disconnects this agent from the distributed system and
-   * unregisters the management beans that provided information about
-   * it.  However, this agent's adapters are not stopped and it is
-   * possible to reconfigure this <code>Agent</code> to connect to
-   * another distributed system.
+   * Disconnects this agent from the distributed system and unregisters the management beans that
+   * provided information about it. However, this agent's adapters are not stopped and it is
+   * possible to reconfigure this <code>Agent</code> to connect to another distributed system.
-   * Saves the configuration for this <code>Agent</code> to the file
-   * specified by @link AgentConfig#getPropertyFile.
+   * Saves the configuration for this <code>Agent</code> to the file specified by @link
+   * AgentConfig#getPropertyFile.
