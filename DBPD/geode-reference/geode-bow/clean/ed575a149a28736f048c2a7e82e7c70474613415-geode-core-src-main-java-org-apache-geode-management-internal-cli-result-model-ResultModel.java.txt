GEODE-5011: Require all ResultModel sections to be explicitly named (#1944)


- Remove the auto-indexed naming inherited from the previous implementation.
- Remove section named "error"
- When using createError, the section will just be named "info", however the
  state will be set to ERROR.
- * The following different types of 'models' can be added to an instance of {@code ResultModel}.
- * <ol>
+ * The following different types of 'models' (or sections in the older terminology) can be added to
+ * an instance of {@code ResultModel}.
+ * <ul>
- * </ol>
+ * </ul>
- * appropriately to indicate an error.
+ * appropriately to indicate an error. Once a {@code ResultModel}s status has been set to ERROR, it
+ * cannot be reset to OK.
+ * <br/>
+ * Each added section should be given a descriptive name. This name will eventually become part of
+ * the API when the JSON results are displayable via gfsh. So pick carefully :).
+ * <br/>
+ * A few common and generic names are already defined:
+ * <ul>
+ * <li>{@code INFO_SECTION}</li>
+ * Used for sections created by the {@code addInfo()} and {@code createInfo} methods.
+ * <li>{@code ERROR_SECTION}</li>
+ * Used for sections created by the {@code createError()} method.
+ * <li>{@code MEMBER_STATUS_SECTION}</li>
+ * Used for sections created by the various {@code createMemberStatusResult()} methods.
+ * </ul>
+  public static final String INFO_SECTION = "info";
+  public static final String MEMBER_STATUS_SECTION = "member-status";
+
-  private int sectionCount = 0;
+  /**
+   * Set the status of this {@code ResultModel}. Effectively, the only option is to set it to
+   * ERROR. Once the state is set to ERROR it cannot be unset again.
+   */
+  /**
+   * Overloaded method to create an {@code InfoResultModel} section called "info".
+   */
-    return addInfo(Integer.toString(sectionCount++));
+    return addInfo(INFO_SECTION);
+    Object model = sections.get(namedSection);
+    if (model != null) {
+      if (model instanceof InfoResultModel) {
+        return (InfoResultModel) model;
+      } else {
+        throw new IllegalStateException(String.format(
+            "Section requested is %s, not InfoResultModel", model.getClass().getSimpleName()));
+      }
+    }
+
-  public TabularResultModel addTable() {
-    return addTable(Integer.toString(sectionCount++));
-  }
-
+    Object model = sections.get(namedSection);
+    if (model != null) {
+      if (model instanceof TabularResultModel) {
+        return (TabularResultModel) model;
+      } else {
+        throw new IllegalStateException(String.format(
+            "Section requested is %s, not TabularResultModel", model.getClass().getSimpleName()));
+      }
+    }
+
-  public DataResultModel addData() {
-    return addData(Integer.toString(sectionCount++));
-  }
-
+    Object model = sections.get(namedSection);
+    if (model != null) {
+      if (model instanceof DataResultModel) {
+        return (DataResultModel) model;
+      } else {
+        throw new IllegalStateException(String.format(
+            "Section requested is %s, not DataResultModel", model.getClass().getSimpleName()));
+      }
+    }
+
-
+  /**
+   * Helper method to create an {@code InfoResultModel} named "info". This method will also set
+   * the status to ERROR.
+   */
-    ResultModel result = new ResultModel();
-    result.addInfo().addLine(message);
+    ResultModel result = createInfo(message);
+  /**
+   * Helper method to create an {@code InfoResultModel} named "info".
+   */
-    result.addInfo().addLine(message);
+    result.addInfo(INFO_SECTION).addLine(message);
+  /**
+   * Helper method to create an {@code TabularResultModel} named "member-status". Typically used
+   * to tabulate the status from calls to a number of members.
+   */
-    TabularResultModel tabularResultModel = result.addTable();
+    TabularResultModel tabularResultModel = result.addTable(MEMBER_STATUS_SECTION);
