Refactoring lucene APIs into a separate module

The gemfire-core will now no longer depend on Lucene. These APIs still
have no real implementation, and there is currently also no support for
reading and writing the XML configuration as well.

As part of these changes, I modified the ExtensionPoint code slightly to
allow retrieving an extension point by key, for use in the APIs. This
lets the LuceneService APIs add the and get the LuceneService as a cache
extension.

I'm still not sure this is the best way to integrate independent modules
like this into gemfire. This needs some more discussion.

-import java.util.ArrayList;
+import java.util.Map;
-import com.gemstone.gemfire.internal.util.CollectionUtils;
+import com.gemstone.gemfire.internal.util.concurrent.CopyOnWriteHashMap;
-  protected final ArrayList<Extension<T>> extensions = new ArrayList<Extension<T>>();
-
-  protected final Iterable<Extension<T>> iterable = CollectionUtils.unmodifiableIterable(extensions);
+  protected final Map<Object, Extension<T>> extensions = new CopyOnWriteHashMap<Object, Extension<T>>();
-    return iterable;
+    return extensions.values();
-  public void addExtension(Extension<T> extension) {
-    extensions.add(extension);
+  public void addExtension(Object key, Extension<T> extension) {
+    extensions.put(key, extension);
-  public void removeExtension(Extension<T> extension) {
-    extensions.remove(extension);
+  public Extension<T> getExtension(Object key) {
+    return extensions.get(key);
+  }
+  
+  @Override
+  public void removeExtension(Object key) {
+    extensions.remove(key);
-    for (final Extension<T> extension : extensions) {
+    for (final Extension<T> extension : getExtensions()) {
