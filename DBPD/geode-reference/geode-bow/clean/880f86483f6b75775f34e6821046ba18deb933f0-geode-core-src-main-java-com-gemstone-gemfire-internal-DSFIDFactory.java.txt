GEODE-1464: remove sqlf code

-      case SQLF_TYPE:
-        return readSqlfMessage(in);
-      case SQLF_DVD_OBJECT:
-        return readDVD(in);
-      case SQLF_GLOBAL_ROWLOC:
-        return readGlobalRowLocation(in);
-      case SQLF_GEMFIRE_KEY:
-        return readGemFireKey(in);
-      case SQLF_FORMATIBLEBITSET:
-        return readSqlFormatibleBitSet(in);
-  /**
-   * Map for SQLFabric specific classIds to the {@link Class} of an
-   * implementation. We maintain this separate map for SQLFabric to allow
-   * separation of GemFire and SQLFabric trees. This is particularly required
-   * when implementing a new <code>DistributionMessage</code>. This requires the
-   * classes to have a zero argument constructor.
-   */
-  @SuppressWarnings("unchecked")
-  private static Class<? extends DataSerializableFixedID>[] sqlfDSFIDClassMap =
-    new Class[Byte.MAX_VALUE + 1 - Byte.MIN_VALUE];
-  
-  /**
-   * Map for SQLFabric specific classIds to the {@link DataSerializableFixedID} 
-   * singleton instance. We maintain this separate map for SQLFabric to allow
-   * separation of GemFire and SQLFabric trees. This approach is needed to 
-   * allow transparent serialization of singleton objects
-   */
-  private static DataSerializableFixedID[] sqlfDSFIDFixedInstanceMap =
-    new DataSerializableFixedID[Byte.MAX_VALUE + 1 - Byte.MIN_VALUE];
-
-  /**
-   * Exception to indicate SQLFabric specific serialization exceptions
-   */
-  public static class SqlfSerializationException extends
-      NotSerializableException {
-
-    private static final long serialVersionUID = 5076687296705595933L;
-
-    /**
-     * Constructs a SqlfSerializationException object with message string.
-     * 
-     * @param msg
-     *          exception message
-     */
-    public SqlfSerializationException(String msg) {
-      super(msg);
-    }
-  }
-
-  private static DataSerializableFixedID readSqlfMessage(DataInput in)
-      throws IOException, ClassNotFoundException {
-    // Use the first byte as the typeId of SQLFabric messages
-    final byte sqlfId = in.readByte();
-    final int sqlfIdIndex = sqlfId & 0xFF;
-    final Class<? extends DataSerializableFixedID> sqlfClass =
-      sqlfDSFIDClassMap[sqlfIdIndex];
-    if (sqlfClass != null) {
-      try {
-        final DataSerializableFixedID sqlfObj = sqlfClass.newInstance();
-        InternalDataSerializer.invokeFromData(sqlfObj, in);
-        return sqlfObj;
-      } catch (InstantiationException ex) {
-        throw new SqlfSerializationException(LocalizedStrings.
-            DSFIDFactory_COULD_NOT_INSTANTIATE_SQLFABRIC_MESSAGE_CLASSID_0_1
-              .toLocalizedString(new Object[] { sqlfId, ex }));
-      } catch (IllegalAccessException ex) {
-        throw new SqlfSerializationException(LocalizedStrings.
-            DSFIDFactory_ILLEGAL_ACCESS_FOR_SQLFABRIC_MESSAGE_CLASSID_0_1
-              .toLocalizedString(new Object[] { sqlfId, ex }));
-      }
-    }//check for fixed instance
-    DataSerializableFixedID fixedInstance = sqlfDSFIDFixedInstanceMap[sqlfIdIndex];
-    if (fixedInstance != null) {
-      InternalDataSerializer.invokeFromData(fixedInstance, in);
-      return fixedInstance;
-    }
-    // if possible set the processor ID before throwing exception so
-    // that failure exception is received by the sender
-    if (sqlfIdIndex < 60) {
-      try {
-        // both SqlfMessage and SqlfReplyMessage write a byte for status first
-        // followed by the processor ID, if any
-        final byte status = in.readByte();
-        int processorId = 0;
-        if ((status & ReplyMessage.PROCESSOR_ID_FLAG) != 0) {
-          processorId = in.readInt();
-        }
-        ReplyProcessor21.setMessageRPId(processorId);
-      } catch (IOException ex) {
-        // give up
-      }
-    }
-    throw new SqlfSerializationException(
-        LocalizedStrings.DSFIDFactory_UNKNOWN_CLASSID_0_FOR_SQLFABRIC_MESSAGE
-            .toLocalizedString(sqlfId));
-  }
-
-  public static synchronized void registerSQLFabricClass(byte classId,
-      Class<? extends DataSerializableFixedID> c) {
-    final int sqlfIdIndex = classId & 0xFF;
-    Class<?> oldClass = sqlfDSFIDClassMap[sqlfIdIndex];
-    if (oldClass != null) {
-      throw new AssertionError("DSFIDFactory#registerSQLFabricClass: cannot "
-          + "re-register classId " + classId + " for class " + c
-          + "; existing class: " + oldClass);
-    }
-    sqlfDSFIDClassMap[sqlfIdIndex] = c;
-  }
-  
-  public static synchronized void registerSQLFabricFixedInstance(byte classId,
-      DataSerializableFixedID fixedInstance)
-  {
-    final int sqlfIdIndex = classId & 0xFF;
-    DataSerializableFixedID oldInstance = sqlfDSFIDFixedInstanceMap[sqlfIdIndex];
-    if (oldInstance != null) {
-      throw new AssertionError("DSFIDFactory#registerSQLFabricClass: cannot "
-          + "re-register classId " + classId + " for instance " + fixedInstance
-          + "; existing instance: " + oldInstance);
-    }
-    sqlfDSFIDFixedInstanceMap[sqlfIdIndex] = fixedInstance;
-  }
-
-  public static synchronized void unregisterSQLFabricClass(byte classId,
-      Class<? extends DataSerializableFixedID> c) {
-    final int sqlfIdIndex = classId & 0xFF;
-    sqlfDSFIDClassMap[sqlfIdIndex] = null;
-  }
-  
-  public static synchronized void unregisterSQLFabricFixedInstance(
-      byte classId, Object dataSerializableFixedID)
-  {
-    final int sqlfIdIndex = classId & 0xFF;
-    sqlfDSFIDFixedInstanceMap[sqlfIdIndex] = null;
-  }
-
-  public static synchronized void clearSQLFabricClasses() {
-    for (int index = 0; index < sqlfDSFIDClassMap.length; ++index) {
-      sqlfDSFIDClassMap[index] = null;
-    }
-    for (int index = 0; index < sqlfDSFIDFixedInstanceMap.length; ++index) {
-      sqlfDSFIDFixedInstanceMap[index] = null;
-    }
-  }  
-
-  public interface DeserializeDVD {
-
-    public DataSerializableFixedID getDSFID(DataInput in) throws IOException,
-        ClassNotFoundException;
-
-    public DataSerializableFixedID getGlobalRowLocation(DataInput in)
-        throws IOException, ClassNotFoundException;
-
-    public DataSerializableFixedID getGemFireKey(DataInput in)
-        throws IOException, ClassNotFoundException;
-
-    public DataSerializableFixedID getSqlPSQArgs(DataInput in)
-        throws IOException, ClassNotFoundException;
-
-    public DataSerializableFixedID getSqlFormatibleBitSet(DataInput in)
-        throws IOException, ClassNotFoundException;
-  }
-
-  private static DeserializeDVD dvdDeserializer;
-
-  private static DataSerializableFixedID readDVD(DataInput in)
-      throws IOException, ClassNotFoundException {
-    return dvdDeserializer.getDSFID(in);
-  }
-
-  private static DataSerializableFixedID readGlobalRowLocation(DataInput in)
-      throws IOException, ClassNotFoundException {
-    return dvdDeserializer.getGlobalRowLocation(in);
-  }
-
-  private static DataSerializableFixedID readGemFireKey(DataInput in)
-      throws IOException, ClassNotFoundException {
-    return dvdDeserializer.getGemFireKey(in);
-  }
-
-  private static DataSerializableFixedID readSqlFormatibleBitSet(DataInput in)
-      throws IOException, ClassNotFoundException {
-    return dvdDeserializer.getSqlFormatibleBitSet(in);
-  }
-
-  public static void registerDVDDeserializer(DeserializeDVD d) {
-    dvdDeserializer = d;
-  }
