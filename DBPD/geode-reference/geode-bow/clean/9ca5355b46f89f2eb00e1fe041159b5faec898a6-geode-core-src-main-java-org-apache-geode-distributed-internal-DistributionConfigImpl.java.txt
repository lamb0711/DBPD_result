GEODE-2644: Cleanup config classes (#2518)

Add LogConfigSupplier and some additional changes to LogConfig for
logging changes.

-
-import org.apache.geode.distributed.ConfigurationProperties;
+import org.apache.geode.internal.logging.LogWriterImpl;
- * <p>
- * <p>
-  protected File deployWorkingDir = new File(System.getProperty("user.dir"));
+  private File deployWorkingDir = new File(System.getProperty("user.dir"));
-   * @see org.apache.geode.internal.logging.LogWriterImpl#levelNameToCode(String)
+   * @see LogWriterImpl#levelNameToCode(String)
-  protected File statisticArchiveFile = DEFAULT_STATISTIC_ARCHIVE_FILE;
+  File statisticArchiveFile = DEFAULT_STATISTIC_ARCHIVE_FILE;
-  protected int mcastSendBufferSize = DEFAULT_MCAST_SEND_BUFFER_SIZE;
+  private int mcastSendBufferSize = DEFAULT_MCAST_SEND_BUFFER_SIZE;
-  protected int mcastRecvBufferSize = DEFAULT_MCAST_RECV_BUFFER_SIZE;
+  private int mcastRecvBufferSize = DEFAULT_MCAST_RECV_BUFFER_SIZE;
-  protected FlowControlParams mcastFlowControl = DEFAULT_MCAST_FLOW_CONTROL;
+  private FlowControlParams mcastFlowControl = DEFAULT_MCAST_FLOW_CONTROL;
-  protected int udpSendBufferSize = DEFAULT_UDP_SEND_BUFFER_SIZE;
+  private int udpSendBufferSize = DEFAULT_UDP_SEND_BUFFER_SIZE;
-  protected int udpRecvBufferSize = DEFAULT_UDP_RECV_BUFFER_SIZE;
+  private int udpRecvBufferSize = DEFAULT_UDP_RECV_BUFFER_SIZE;
-  protected int udpFragmentSize = DEFAULT_UDP_FRAGMENT_SIZE;
+  private int udpFragmentSize = DEFAULT_UDP_FRAGMENT_SIZE;
-
-   * @see org.apache.geode.internal.logging.LogWriterImpl#levelNameToCode(String)
+   * @see LogWriterImpl#levelNameToCode(String)
-  protected int securityLogLevel = DEFAULT_LOG_LEVEL;
+  private int securityLogLevel = DEFAULT_LOG_LEVEL;
-  private Properties security = new Properties();
+  private final Properties security = new Properties();
-  private Properties userDefinedProps = new Properties();
+  private final Properties userDefinedProps = new Properties();
-  protected boolean enableSharedConfiguration =
+  private boolean enableSharedConfiguration =
-  protected boolean useSharedConfiguration = DistributionConfig.DEFAULT_USE_CLUSTER_CONFIGURATION;
-  protected boolean loadSharedConfigurationFromDir =
+  private boolean useSharedConfiguration = DistributionConfig.DEFAULT_USE_CLUSTER_CONFIGURATION;
+  private boolean loadSharedConfigurationFromDir =
-  protected String clusterConfigDir = "";
+  private String clusterConfigDir = "";
+
-
-      Boolean.getBoolean(InternalLocator.FORCE_LOCATOR_DM_TYPE) ? true : DEFAULT_JMX_MANAGER;
+      Boolean.getBoolean(InternalLocator.FORCE_LOCATOR_DM_TYPE) || DEFAULT_JMX_MANAGER;
-
-      Collections.synchronizedMap(new HashMap<String, ConfigSource>());
+      Collections.synchronizedMap(new HashMap<>());
-  protected String userCommandPackages = DEFAULT_USER_COMMAND_PACKAGES;
+  private String userCommandPackages = DEFAULT_USER_COMMAND_PACKAGES;
-
-  ////////////////////// thread monitoring///////////////////
-  protected boolean threadMonitorEnabled = DEFAULT_THREAD_MONITOR_ENABLED;
+  private boolean threadMonitorEnabled = DEFAULT_THREAD_MONITOR_ENABLED;
-  protected int threadMonitorInterval = DEFAULT_THREAD_MONITOR_INTERVAL;
+  private int threadMonitorInterval = DEFAULT_THREAD_MONITOR_INTERVAL;
-  protected int threadMonitorTimeLimit = DEFAULT_THREAD_MONITOR_TIME_LIMIT;
-
-  ////////////////////// Constructors //////////////////////
+  private int threadMonitorTimeLimit = DEFAULT_THREAD_MONITOR_TIME_LIMIT;
-    this.name = other.getName();
-    this.tcpPort = other.getTcpPort();
-    this.mcastPort = other.getMcastPort();
-    this.mcastTtl = other.getMcastTtl();
-    this.socketLeaseTime = other.getSocketLeaseTime();
-    this.socketBufferSize = other.getSocketBufferSize();
-    this.conserveSockets = other.getConserveSockets();
-    this.roles = other.getRoles();
-    this.mcastAddress = other.getMcastAddress();
-    this.bindAddress = other.getBindAddress();
-    this.serverBindAddress = other.getServerBindAddress();
-    this.locators = ((DistributionConfigImpl) other).locators;
-    this.locatorWaitTime = other.getLocatorWaitTime();
-    this.remoteLocators = other.getRemoteLocators();
-    this.startLocator = other.getStartLocator();
-    this.startLocatorPort = ((DistributionConfigImpl) other).startLocatorPort;
-    this.deployWorkingDir = other.getDeployWorkingDir();
-    this.logFile = other.getLogFile();
-    this.logLevel = other.getLogLevel();
-    this.statisticSamplingEnabled = other.getStatisticSamplingEnabled();
-    this.threadMonitorEnabled = other.getThreadMonitorEnabled();
-    this.threadMonitorInterval = other.getThreadMonitorInterval();
-    this.threadMonitorTimeLimit = other.getThreadMonitorTimeLimit();
-    this.statisticSampleRate = other.getStatisticSampleRate();
-    this.statisticArchiveFile = other.getStatisticArchiveFile();
-    this.ackWaitThreshold = other.getAckWaitThreshold();
-    this.ackForceDisconnectThreshold = other.getAckSevereAlertThreshold();
-    this.cacheXmlFile = other.getCacheXmlFile();
-    this.archiveDiskSpaceLimit = other.getArchiveDiskSpaceLimit();
-    this.archiveFileSizeLimit = other.getArchiveFileSizeLimit();
-    this.logDiskSpaceLimit = other.getLogDiskSpaceLimit();
-    this.logFileSizeLimit = other.getLogFileSizeLimit();
-    this.clusterSSLEnabled = other.getClusterSSLEnabled();
-    this.clusterSSLProtocols = other.getClusterSSLProtocols();
-    this.clusterSSLCiphers = other.getClusterSSLCiphers();
-    this.clusterSSLRequireAuthentication = other.getClusterSSLRequireAuthentication();
-    this.clusterSSLKeyStore = other.getClusterSSLKeyStore();
-    this.clusterSSLKeyStoreType = other.getClusterSSLKeyStoreType();
-    this.clusterSSLKeyStorePassword = other.getClusterSSLKeyStorePassword();
-    this.clusterSSLTrustStore = other.getClusterSSLTrustStore();
-    this.clusterSSLTrustStorePassword = other.getClusterSSLTrustStorePassword();
-    this.asyncDistributionTimeout = other.getAsyncDistributionTimeout();
-    this.asyncQueueTimeout = other.getAsyncQueueTimeout();
-    this.asyncMaxQueueSize = other.getAsyncMaxQueueSize();
-    this.modifiable = true;
+    name = other.getName();
+    tcpPort = other.getTcpPort();
+    mcastPort = other.getMcastPort();
+    mcastTtl = other.getMcastTtl();
+    socketLeaseTime = other.getSocketLeaseTime();
+    socketBufferSize = other.getSocketBufferSize();
+    conserveSockets = other.getConserveSockets();
+    roles = other.getRoles();
+    mcastAddress = other.getMcastAddress();
+    bindAddress = other.getBindAddress();
+    serverBindAddress = other.getServerBindAddress();
+    locators = ((DistributionConfigImpl) other).locators;
+    locatorWaitTime = other.getLocatorWaitTime();
+    remoteLocators = other.getRemoteLocators();
+    startLocator = other.getStartLocator();
+    startLocatorPort = ((DistributionConfigImpl) other).startLocatorPort;
+    deployWorkingDir = other.getDeployWorkingDir();
+    logFile = other.getLogFile();
+    logLevel = other.getLogLevel();
+    statisticSamplingEnabled = other.getStatisticSamplingEnabled();
+    threadMonitorEnabled = other.getThreadMonitorEnabled();
+    threadMonitorInterval = other.getThreadMonitorInterval();
+    threadMonitorTimeLimit = other.getThreadMonitorTimeLimit();
+    statisticSampleRate = other.getStatisticSampleRate();
+    statisticArchiveFile = other.getStatisticArchiveFile();
+    ackWaitThreshold = other.getAckWaitThreshold();
+    ackForceDisconnectThreshold = other.getAckSevereAlertThreshold();
+    cacheXmlFile = other.getCacheXmlFile();
+    archiveDiskSpaceLimit = other.getArchiveDiskSpaceLimit();
+    archiveFileSizeLimit = other.getArchiveFileSizeLimit();
+    logDiskSpaceLimit = other.getLogDiskSpaceLimit();
+    logFileSizeLimit = other.getLogFileSizeLimit();
+    clusterSSLEnabled = other.getClusterSSLEnabled();
+    clusterSSLProtocols = other.getClusterSSLProtocols();
+    clusterSSLCiphers = other.getClusterSSLCiphers();
+    clusterSSLRequireAuthentication = other.getClusterSSLRequireAuthentication();
+    clusterSSLKeyStore = other.getClusterSSLKeyStore();
+    clusterSSLKeyStoreType = other.getClusterSSLKeyStoreType();
+    clusterSSLKeyStorePassword = other.getClusterSSLKeyStorePassword();
+    clusterSSLTrustStore = other.getClusterSSLTrustStore();
+    clusterSSLTrustStorePassword = other.getClusterSSLTrustStorePassword();
+    asyncDistributionTimeout = other.getAsyncDistributionTimeout();
+    asyncQueueTimeout = other.getAsyncQueueTimeout();
+    asyncMaxQueueSize = other.getAsyncMaxQueueSize();
+    modifiable = true;
-    this.mcastSendBufferSize = other.getMcastSendBufferSize();
-    this.mcastRecvBufferSize = other.getMcastRecvBufferSize();
-    this.mcastFlowControl = other.getMcastFlowControl();
-    this.udpSendBufferSize = other.getUdpSendBufferSize();
-    this.udpRecvBufferSize = other.getUdpRecvBufferSize();
-    this.udpFragmentSize = other.getUdpFragmentSize();
-    this.disableTcp = other.getDisableTcp();
-    this.enableTimeStatistics = other.getEnableTimeStatistics();
-    this.memberTimeout = other.getMemberTimeout();
-    this.membershipPortRange = other.getMembershipPortRange();
-    this.maxWaitTimeForReconnect = other.getMaxWaitTimeForReconnect();
-    this.maxNumReconnectTries = other.getMaxNumReconnectTries();
-    this.clientConflation = other.getClientConflation();
-    this.durableClientId = other.getDurableClientId();
-    this.durableClientTimeout = other.getDurableClientTimeout();
+    mcastSendBufferSize = other.getMcastSendBufferSize();
+    mcastRecvBufferSize = other.getMcastRecvBufferSize();
+    mcastFlowControl = other.getMcastFlowControl();
+    udpSendBufferSize = other.getUdpSendBufferSize();
+    udpRecvBufferSize = other.getUdpRecvBufferSize();
+    udpFragmentSize = other.getUdpFragmentSize();
+    disableTcp = other.getDisableTcp();
+    enableTimeStatistics = other.getEnableTimeStatistics();
+    memberTimeout = other.getMemberTimeout();
+    membershipPortRange = other.getMembershipPortRange();
+    maxWaitTimeForReconnect = other.getMaxWaitTimeForReconnect();
+    maxNumReconnectTries = other.getMaxNumReconnectTries();
+    clientConflation = other.getClientConflation();
+    durableClientId = other.getDurableClientId();
+    durableClientTimeout = other.getDurableClientTimeout();
-    this.enableNetworkPartitionDetection = other.getEnableNetworkPartitionDetection();
-    this.disableAutoReconnect = other.getDisableAutoReconnect();
+    enableNetworkPartitionDetection = other.getEnableNetworkPartitionDetection();
+    disableAutoReconnect = other.getDisableAutoReconnect();
-    this.securityClientAuthInit = other.getSecurityClientAuthInit();
-    this.securityClientAuthenticator = other.getSecurityClientAuthenticator();
-    this.securityClientDHAlgo = other.getSecurityClientDHAlgo();
-    this.securityUDPDHAlgo = other.getSecurityUDPDHAlgo();
-    this.securityPeerAuthInit = other.getSecurityPeerAuthInit();
-    this.securityPeerAuthenticator = other.getSecurityPeerAuthenticator();
-    this.securityClientAccessor = other.getSecurityClientAccessor();
-    this.securityClientAccessorPP = other.getSecurityClientAccessorPP();
-    this.securityPeerMembershipTimeout = other.getSecurityPeerMembershipTimeout();
-    this.securityLogLevel = other.getSecurityLogLevel();
-    this.securityLogFile = other.getSecurityLogFile();
-    this.security.putAll(other.getSecurityProps());
-    this.removeUnresponsiveClient = other.getRemoveUnresponsiveClient();
-    this.deltaPropagation = other.getDeltaPropagation();
-    this.distributedSystemId = other.getDistributedSystemId();
-    this.redundancyZone = other.getRedundancyZone();
-    this.enforceUniqueHost = other.getEnforceUniqueHost();
-    this.sslProperties = other.getSSLProperties();
-    this.clusterSSLProperties = other.getClusterSSLProperties();
-    this.jmxManagerSslProperties = other.getJmxSSLProperties();
+    securityClientAuthInit = other.getSecurityClientAuthInit();
+    securityClientAuthenticator = other.getSecurityClientAuthenticator();
+    securityClientDHAlgo = other.getSecurityClientDHAlgo();
+    securityUDPDHAlgo = other.getSecurityUDPDHAlgo();
+    securityPeerAuthInit = other.getSecurityPeerAuthInit();
+    securityPeerAuthenticator = other.getSecurityPeerAuthenticator();
+    securityClientAccessor = other.getSecurityClientAccessor();
+    securityClientAccessorPP = other.getSecurityClientAccessorPP();
+    securityPeerMembershipTimeout = other.getSecurityPeerMembershipTimeout();
+    securityLogLevel = other.getSecurityLogLevel();
+    securityLogFile = other.getSecurityLogFile();
+    security.putAll(other.getSecurityProps());
+    removeUnresponsiveClient = other.getRemoveUnresponsiveClient();
+    deltaPropagation = other.getDeltaPropagation();
+    distributedSystemId = other.getDistributedSystemId();
+    redundancyZone = other.getRedundancyZone();
+    enforceUniqueHost = other.getEnforceUniqueHost();
+    sslProperties = other.getSSLProperties();
+    clusterSSLProperties = other.getClusterSSLProperties();
+    jmxManagerSslProperties = other.getJmxSSLProperties();
-    this.userDefinedProps.putAll(other.getUserDefinedProps());
+    userDefinedProps.putAll(other.getUserDefinedProps());
-    this.groups = other.getGroups();
-    this.jmxManager = other.getJmxManager();
-    this.jmxManagerStart = other.getJmxManagerStart();
-    this.jmxManagerSSLEnabled = other.getJmxManagerSSLEnabled();
-    this.jmxManagerSslRequireAuthentication = other.getJmxManagerSSLRequireAuthentication();
-    this.jmxManagerSslProtocols = other.getJmxManagerSSLProtocols();
-    this.jmxManagerSslCiphers = other.getJmxManagerSSLCiphers();
-    this.jmxManagerSSLKeyStore = other.getJmxManagerSSLKeyStore();
-    this.jmxManagerSSLKeyStoreType = other.getJmxManagerSSLKeyStoreType();
-    this.jmxManagerSSLKeyStorePassword = other.getJmxManagerSSLKeyStorePassword();
-    this.jmxManagerSSLTrustStore = other.getJmxManagerSSLTrustStore();
-    this.jmxManagerSSLTrustStorePassword = other.getJmxManagerSSLTrustStorePassword();
-    this.jmxManagerSslProperties = other.getJmxSSLProperties();
-    this.jmxManagerPort = other.getJmxManagerPort();
-    this.jmxManagerBindAddress = other.getJmxManagerBindAddress();
-    this.jmxManagerHostnameForClients = other.getJmxManagerHostnameForClients();
-    this.jmxManagerPasswordFile = other.getJmxManagerPasswordFile();
-    this.jmxManagerAccessFile = other.getJmxManagerAccessFile();
-    this.jmxManagerHttpPort = other.getJmxManagerHttpPort();
-    this.jmxManagerUpdateRate = other.getJmxManagerUpdateRate();
-    this.memcachedPort = other.getMemcachedPort();
-    this.memcachedProtocol = other.getMemcachedProtocol();
-    this.memcachedBindAddress = other.getMemcachedBindAddress();
-    this.redisPort = other.getRedisPort();
-    this.redisBindAddress = other.getRedisBindAddress();
-    this.redisPassword = other.getRedisPassword();
-    this.userCommandPackages = other.getUserCommandPackages();
+    groups = other.getGroups();
+    jmxManager = other.getJmxManager();
+    jmxManagerStart = other.getJmxManagerStart();
+    jmxManagerSSLEnabled = other.getJmxManagerSSLEnabled();
+    jmxManagerSslRequireAuthentication = other.getJmxManagerSSLRequireAuthentication();
+    jmxManagerSslProtocols = other.getJmxManagerSSLProtocols();
+    jmxManagerSslCiphers = other.getJmxManagerSSLCiphers();
+    jmxManagerSSLKeyStore = other.getJmxManagerSSLKeyStore();
+    jmxManagerSSLKeyStoreType = other.getJmxManagerSSLKeyStoreType();
+    jmxManagerSSLKeyStorePassword = other.getJmxManagerSSLKeyStorePassword();
+    jmxManagerSSLTrustStore = other.getJmxManagerSSLTrustStore();
+    jmxManagerSSLTrustStorePassword = other.getJmxManagerSSLTrustStorePassword();
+    jmxManagerSslProperties = other.getJmxSSLProperties();
+    jmxManagerPort = other.getJmxManagerPort();
+    jmxManagerBindAddress = other.getJmxManagerBindAddress();
+    jmxManagerHostnameForClients = other.getJmxManagerHostnameForClients();
+    jmxManagerPasswordFile = other.getJmxManagerPasswordFile();
+    jmxManagerAccessFile = other.getJmxManagerAccessFile();
+    jmxManagerHttpPort = other.getJmxManagerHttpPort();
+    jmxManagerUpdateRate = other.getJmxManagerUpdateRate();
+    memcachedPort = other.getMemcachedPort();
+    memcachedProtocol = other.getMemcachedProtocol();
+    memcachedBindAddress = other.getMemcachedBindAddress();
+    redisPort = other.getRedisPort();
+    redisBindAddress = other.getRedisBindAddress();
+    redisPassword = other.getRedisPassword();
+    userCommandPackages = other.getUserCommandPackages();
-    this.enableSharedConfiguration = other.getEnableClusterConfiguration();
-    this.loadSharedConfigurationFromDir = other.getLoadClusterConfigFromDir();
-    this.clusterConfigDir = other.getClusterConfigDir();
-    this.useSharedConfiguration = other.getUseSharedConfiguration();
-    this.serverSSLEnabled = other.getServerSSLEnabled();
-    this.serverSslRequireAuthentication = other.getServerSSLRequireAuthentication();
-    this.serverSslProtocols = other.getServerSSLProtocols();
-    this.serverSslCiphers = other.getServerSSLCiphers();
-    this.serverSSLKeyStore = other.getServerSSLKeyStore();
-    this.serverSSLKeyStoreType = other.getServerSSLKeyStoreType();
-    this.serverSSLKeyStorePassword = other.getServerSSLKeyStorePassword();
-    this.serverSSLTrustStore = other.getServerSSLTrustStore();
-    this.serverSSLTrustStorePassword = other.getServerSSLTrustStorePassword();
-    this.serverSslProperties = other.getServerSSLProperties();
+    enableSharedConfiguration = other.getEnableClusterConfiguration();
+    loadSharedConfigurationFromDir = other.getLoadClusterConfigFromDir();
+    clusterConfigDir = other.getClusterConfigDir();
+    useSharedConfiguration = other.getUseSharedConfiguration();
+    serverSSLEnabled = other.getServerSSLEnabled();
+    serverSslRequireAuthentication = other.getServerSSLRequireAuthentication();
+    serverSslProtocols = other.getServerSSLProtocols();
+    serverSslCiphers = other.getServerSSLCiphers();
+    serverSSLKeyStore = other.getServerSSLKeyStore();
+    serverSSLKeyStoreType = other.getServerSSLKeyStoreType();
+    serverSSLKeyStorePassword = other.getServerSSLKeyStorePassword();
+    serverSSLTrustStore = other.getServerSSLTrustStore();
+    serverSSLTrustStorePassword = other.getServerSSLTrustStorePassword();
+    serverSslProperties = other.getServerSSLProperties();
-    this.gatewaySSLEnabled = other.getGatewaySSLEnabled();
-    this.gatewaySslRequireAuthentication = other.getGatewaySSLRequireAuthentication();
-    this.gatewaySslProtocols = other.getGatewaySSLProtocols();
-    this.gatewaySslCiphers = other.getGatewaySSLCiphers();
-    this.gatewaySSLKeyStore = other.getGatewaySSLKeyStore();
-    this.gatewaySSLKeyStoreType = other.getGatewaySSLKeyStoreType();
-    this.gatewaySSLKeyStorePassword = other.getGatewaySSLKeyStorePassword();
-    this.gatewaySSLTrustStore = other.getGatewaySSLTrustStore();
-    this.gatewaySSLTrustStorePassword = other.getGatewaySSLTrustStorePassword();
-    this.gatewaySslProperties = other.getGatewaySSLProperties();
+    gatewaySSLEnabled = other.getGatewaySSLEnabled();
+    gatewaySslRequireAuthentication = other.getGatewaySSLRequireAuthentication();
+    gatewaySslProtocols = other.getGatewaySSLProtocols();
+    gatewaySslCiphers = other.getGatewaySSLCiphers();
+    gatewaySSLKeyStore = other.getGatewaySSLKeyStore();
+    gatewaySSLKeyStoreType = other.getGatewaySSLKeyStoreType();
+    gatewaySSLKeyStorePassword = other.getGatewaySSLKeyStorePassword();
+    gatewaySSLTrustStore = other.getGatewaySSLTrustStore();
+    gatewaySSLTrustStorePassword = other.getGatewaySSLTrustStorePassword();
+    gatewaySslProperties = other.getGatewaySSLProperties();
-    this.httpServicePort = other.getHttpServicePort();
-    this.httpServiceBindAddress = other.getHttpServiceBindAddress();
+    httpServicePort = other.getHttpServicePort();
+    httpServiceBindAddress = other.getHttpServiceBindAddress();
-    this.httpServiceSSLEnabled = other.getHttpServiceSSLEnabled();
-    this.httpServiceSSLCiphers = other.getHttpServiceSSLCiphers();
-    this.httpServiceSSLProtocols = other.getHttpServiceSSLProtocols();
-    this.httpServiceSSLRequireAuthentication = other.getHttpServiceSSLRequireAuthentication();
-    this.httpServiceSSLKeyStore = other.getHttpServiceSSLKeyStore();
-    this.httpServiceSSLKeyStorePassword = other.getHttpServiceSSLKeyStorePassword();
-    this.httpServiceSSLKeyStoreType = other.getHttpServiceSSLKeyStoreType();
-    this.httpServiceSSLTrustStore = other.getHttpServiceSSLTrustStore();
-    this.httpServiceSSLTrustStorePassword = other.getHttpServiceSSLTrustStorePassword();
-    this.httpServiceSSLProperties = other.getHttpServiceSSLProperties();
+    httpServiceSSLEnabled = other.getHttpServiceSSLEnabled();
+    httpServiceSSLCiphers = other.getHttpServiceSSLCiphers();
+    httpServiceSSLProtocols = other.getHttpServiceSSLProtocols();
+    httpServiceSSLRequireAuthentication = other.getHttpServiceSSLRequireAuthentication();
+    httpServiceSSLKeyStore = other.getHttpServiceSSLKeyStore();
+    httpServiceSSLKeyStorePassword = other.getHttpServiceSSLKeyStorePassword();
+    httpServiceSSLKeyStoreType = other.getHttpServiceSSLKeyStoreType();
+    httpServiceSSLTrustStore = other.getHttpServiceSSLTrustStore();
+    httpServiceSSLTrustStorePassword = other.getHttpServiceSSLTrustStorePassword();
+    httpServiceSSLProperties = other.getHttpServiceSSLProperties();
-    this.startDevRestApi = other.getStartDevRestApi();
+    startDevRestApi = other.getStartDevRestApi();
-    this.offHeapMemorySize = other.getOffHeapMemorySize();
+    offHeapMemorySize = other.getOffHeapMemorySize();
-      this.sourceMap = new HashMap<String, ConfigSource>(otherSources);
+      sourceMap = new HashMap<>(otherSources);
-    this.lockMemory = other.getLockMemory();
-    this.distributedTransactions = other.getDistributedTransactions();
-    this.shiroInit = other.getShiroInit();
-    this.securityManager = other.getSecurityManager();
-    this.postProcessor = other.getPostProcessor();
+    lockMemory = other.getLockMemory();
+    distributedTransactions = other.getDistributedTransactions();
+    shiroInit = other.getShiroInit();
+    securityManager = other.getSecurityManager();
+    postProcessor = other.getPostProcessor();
-    this.clusterSSLAlias = other.getClusterSSLAlias();
-    this.gatewaySSLAlias = other.getGatewaySSLAlias();
-    this.httpServiceSSLAlias = other.getHTTPServiceSSLAlias();
-    this.jmxManagerSSLAlias = other.getJMXSSLAlias();
-    this.serverSSLAlias = other.getServerSSLAlias();
-    this.locatorSSLAlias = other.getLocatorSSLAlias();
+    clusterSSLAlias = other.getClusterSSLAlias();
+    gatewaySSLAlias = other.getGatewaySSLAlias();
+    httpServiceSSLAlias = other.getHTTPServiceSSLAlias();
+    jmxManagerSSLAlias = other.getJMXSSLAlias();
+    serverSSLAlias = other.getServerSSLAlias();
+    locatorSSLAlias = other.getLocatorSSLAlias();
-    this.validateSerializableObjects = other.getValidateSerializableObjects();
-    this.serializableObjectFilter = other.getSerializableObjectFilter();
+    validateSerializableObjects = other.getValidateSerializableObjects();
+    serializableObjectFilter = other.getSerializableObjectFilter();
-  protected boolean modifiable = false;
+  protected boolean modifiable;
-   * properties. See {@link org.apache.geode.distributed.DistributedSystem#connect} for a list of
+   * properties. See {@link DistributedSystem#connect} for a list of
-   * properties. See {@link org.apache.geode.distributed.DistributedSystem#connect} for a list of
+   * properties. See {@link DistributedSystem#connect} for a list of
-   * properties. See {@link org.apache.geode.distributed.DistributedSystem#connect} for a list of
+   * properties. See {@link DistributedSystem#connect} for a list of
-    HashMap props = new HashMap();
+    Map<Object, Object> props = new HashMap<>();
-      if (((String) ent.getKey()).startsWith(USERDEFINED_PREFIX_NAME)) {
+      if (ent.getKey().startsWith(USERDEFINED_PREFIX_NAME)) {
-          this.sourceMap.put(attName, ConfigSource.sysprop());
+          sourceMap.put(attName, ConfigSource.sysprop());
-        if (!props.containsKey((property))) {
+        if (!props.containsKey(property)) {
-          this.sourceMap.put(property, ConfigSource.launcher());
+          sourceMap.put(property, ConfigSource.launcher());
-    this.modifiable = true;
+    modifiable = true;
-    this.modifiable = false;
-
+    modifiable = false;
-      Method method = getters.get(ConfigurationProperties.SSL_ENABLED_COMPONENTS);
+      Method method = getters.get(SSL_ENABLED_COMPONENTS);
-        value = method.invoke(this, new Object[] {});
+        value = method.invoke(this);
-            "error invoking getter for property" + ConfigurationProperties.SSL_ENABLED_COMPONENTS);
+            "error invoking getter for property" + SSL_ENABLED_COMPONENTS);
-
-        return StringUtils.isEmpty(getClusterSSLAlias()) ? true
-            : (getSecurableCommunicationChannels().length > 1
-                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getClusterSSLAlias())
+            || getSecurableCommunicationChannels().length <= 1 || !StringUtils
+                .isEmpty(getSSLDefaultAlias());
-        return StringUtils.isEmpty(getGatewaySSLAlias()) ? true
-            : (getSecurableCommunicationChannels().length > 1
-                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getGatewaySSLAlias())
+            || getSecurableCommunicationChannels().length <= 1 || !StringUtils
+                .isEmpty(getSSLDefaultAlias());
-        return StringUtils.isEmpty(getHTTPServiceSSLAlias()) ? true
-            : (getSecurableCommunicationChannels().length > 1
-                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getHTTPServiceSSLAlias())
+            || getSecurableCommunicationChannels().length <= 1 || !StringUtils
+                .isEmpty(getSSLDefaultAlias());
-        return StringUtils.isEmpty(getJMXSSLAlias()) ? true
-            : (getSecurableCommunicationChannels().length > 1
-                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getJMXSSLAlias())
+            || getSecurableCommunicationChannels().length <= 1 || !StringUtils
+                .isEmpty(getSSLDefaultAlias());
-        return StringUtils.isEmpty(getLocatorSSLAlias()) ? true
-            : (getSecurableCommunicationChannels().length > 1
-                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getLocatorSSLAlias())
+            || getSecurableCommunicationChannels().length <= 1 || !StringUtils
+                .isEmpty(getSSLDefaultAlias());
-        return StringUtils.isEmpty(getServerSSLAlias()) ? true
-            : (getSecurableCommunicationChannels().length > 1
-                ? !StringUtils.isEmpty(getSSLDefaultAlias()) : true);
+        return StringUtils.isEmpty(getServerSSLAlias())
+            || getSecurableCommunicationChannels().length <= 1 || !StringUtils
+                .isEmpty(getSSLDefaultAlias());
-   *
-  private void validateConfigurationProperties(final HashMap props) {
+  private void validateConfigurationProperties(final Map<Object, Object> props) {
-          value = method.invoke(this, new Object[] {});
+          value = method.invoke(this);
-  /*
+  /**
-    boolean jmxSSLEnabledOverriden = this.sourceMap.get(JMX_MANAGER_SSL_ENABLED) != null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
+    boolean jmxSSLEnabledOverriden = sourceMap.get(JMX_MANAGER_SSL_ENABLED) != null;
+    boolean clusterSSLOverRidden = sourceMap.get(CLUSTER_SSL_ENABLED) != null;
+    boolean hasSSLComponents = sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-      this.jmxManagerSSLEnabled = this.clusterSSLEnabled;
-      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
-        this.jmxManagerSslCiphers = this.clusterSSLCiphers;
-        this.sourceMap.put(JMX_MANAGER_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+      jmxManagerSSLEnabled = clusterSSLEnabled;
+      sourceMap.put(JMX_MANAGER_SSL_ENABLED, sourceMap.get(CLUSTER_SSL_ENABLED));
+      if (sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
+        jmxManagerSslCiphers = clusterSSLCiphers;
+        sourceMap.put(JMX_MANAGER_SSL_CIPHERS, sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
-        this.jmxManagerSslProtocols = this.clusterSSLProtocols;
-        this.sourceMap.put(JMX_MANAGER_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
+      if (sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
+        jmxManagerSslProtocols = clusterSSLProtocols;
+        sourceMap.put(JMX_MANAGER_SSL_PROTOCOLS, sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
-        this.jmxManagerSslRequireAuthentication = this.clusterSSLRequireAuthentication;
-        this.sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION,
-            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+      if (sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
+        jmxManagerSslRequireAuthentication = clusterSSLRequireAuthentication;
+        sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION,
+            sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.jmxManagerSSLKeyStore = this.clusterSSLKeyStore;
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        jmxManagerSSLKeyStore = clusterSSLKeyStore;
+        sourceMap.put(JMX_MANAGER_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.jmxManagerSSLKeyStoreType = this.clusterSSLKeyStoreType;
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        jmxManagerSSLKeyStoreType = clusterSSLKeyStoreType;
+        sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.jmxManagerSSLKeyStorePassword = this.clusterSSLKeyStorePassword;
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        jmxManagerSSLKeyStorePassword = clusterSSLKeyStorePassword;
+        sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.jmxManagerSSLTrustStore = this.clusterSSLTrustStore;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        jmxManagerSSLTrustStore = clusterSSLTrustStore;
+        sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.jmxManagerSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        jmxManagerSSLTrustStorePassword = clusterSSLTrustStorePassword;
+        sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      this.jmxManagerSslProperties.putAll(this.clusterSSLProperties);
+      jmxManagerSslProperties.putAll(clusterSSLProperties);
-      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.jmxManagerSSLKeyStore = this.clusterSSLKeyStore;
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(JMX_MANAGER_SSL_KEYSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        jmxManagerSSLKeyStore = clusterSSLKeyStore;
+        sourceMap.put(JMX_MANAGER_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.jmxManagerSSLKeyStoreType = this.clusterSSLKeyStoreType;
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        jmxManagerSSLKeyStoreType = clusterSSLKeyStoreType;
+        sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.jmxManagerSSLKeyStorePassword = this.clusterSSLKeyStorePassword;
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        jmxManagerSSLKeyStorePassword = clusterSSLKeyStorePassword;
+        sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.jmxManagerSSLTrustStore = this.clusterSSLTrustStore;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        jmxManagerSSLTrustStore = clusterSSLTrustStore;
+        sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.jmxManagerSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        jmxManagerSSLTrustStorePassword = clusterSSLTrustStorePassword;
+        sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-  /*
+  /**
-    boolean httpServiceSSLEnabledOverriden = this.sourceMap.get(HTTP_SERVICE_SSL_ENABLED) != null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
+    boolean httpServiceSSLEnabledOverriden = sourceMap.get(HTTP_SERVICE_SSL_ENABLED) != null;
+    boolean clusterSSLOverRidden = sourceMap.get(CLUSTER_SSL_ENABLED) != null;
+    boolean hasSSLComponents = sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-      this.httpServiceSSLEnabled = this.clusterSSLEnabled;
-      this.sourceMap.put(HTTP_SERVICE_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      httpServiceSSLEnabled = clusterSSLEnabled;
+      sourceMap.put(HTTP_SERVICE_SSL_ENABLED, sourceMap.get(CLUSTER_SSL_ENABLED));
-      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
-        this.httpServiceSSLCiphers = this.clusterSSLCiphers;
-        this.sourceMap.put(HTTP_SERVICE_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+      if (sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
+        httpServiceSSLCiphers = clusterSSLCiphers;
+        sourceMap.put(HTTP_SERVICE_SSL_CIPHERS, sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
-        this.httpServiceSSLProtocols = this.clusterSSLProtocols;
-        this.sourceMap.put(HTTP_SERVICE_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
+      if (sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
+        httpServiceSSLProtocols = clusterSSLProtocols;
+        sourceMap.put(HTTP_SERVICE_SSL_PROTOCOLS, sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
-        this.httpServiceSSLRequireAuthentication = this.clusterSSLRequireAuthentication;
-        this.sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION,
-            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+      if (sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
+        httpServiceSSLRequireAuthentication = clusterSSLRequireAuthentication;
+        sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION,
+            sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        setHttpServiceSSLKeyStore(this.clusterSSLKeyStore);
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        setHttpServiceSSLKeyStore(clusterSSLKeyStore);
+        sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        setHttpServiceSSLKeyStoreType(this.clusterSSLKeyStoreType);
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        setHttpServiceSSLKeyStoreType(clusterSSLKeyStoreType);
+        sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        setHttpServiceSSLKeyStorePassword(this.clusterSSLKeyStorePassword);
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        setHttpServiceSSLKeyStorePassword(clusterSSLKeyStorePassword);
+        sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        setHttpServiceSSLTrustStore(this.clusterSSLTrustStore);
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        setHttpServiceSSLTrustStore(clusterSSLTrustStore);
+        sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        setHttpServiceSSLTrustStorePassword(this.clusterSSLTrustStorePassword);
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        setHttpServiceSSLTrustStorePassword(clusterSSLTrustStorePassword);
+        sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      this.httpServiceSSLProperties.putAll(this.clusterSSLProperties);
+      httpServiceSSLProperties.putAll(clusterSSLProperties);
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.httpServiceSSLKeyStore = this.clusterSSLKeyStore;
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        httpServiceSSLKeyStore = clusterSSLKeyStore;
+        sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.httpServiceSSLKeyStoreType = this.clusterSSLKeyStoreType;
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        httpServiceSSLKeyStoreType = clusterSSLKeyStoreType;
+        sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.httpServiceSSLKeyStorePassword = this.clusterSSLKeyStorePassword;
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        httpServiceSSLKeyStorePassword = clusterSSLKeyStorePassword;
+        sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.httpServiceSSLTrustStore = this.clusterSSLTrustStore;
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        httpServiceSSLTrustStore = clusterSSLTrustStore;
+        sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.httpServiceSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        httpServiceSSLTrustStorePassword = clusterSSLTrustStorePassword;
+        sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    boolean cacheServerSSLOverriden = this.sourceMap.get(SERVER_SSL_ENABLED) != null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
+    boolean cacheServerSSLOverriden = sourceMap.get(SERVER_SSL_ENABLED) != null;
+    boolean clusterSSLOverRidden = sourceMap.get(CLUSTER_SSL_ENABLED) != null;
+    boolean hasSSLComponents = sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-      this.serverSSLEnabled = this.clusterSSLEnabled;
-      this.sourceMap.put(SERVER_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
-        this.serverSslCiphers = this.clusterSSLCiphers;
-        this.sourceMap.put(SERVER_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+      serverSSLEnabled = clusterSSLEnabled;
+      sourceMap.put(SERVER_SSL_ENABLED, sourceMap.get(CLUSTER_SSL_ENABLED));
+      if (sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
+        serverSslCiphers = clusterSSLCiphers;
+        sourceMap.put(SERVER_SSL_CIPHERS, sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
-        this.serverSslProtocols = this.clusterSSLProtocols;
-        this.sourceMap.put(SERVER_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
+      if (sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
+        serverSslProtocols = clusterSSLProtocols;
+        sourceMap.put(SERVER_SSL_PROTOCOLS, sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
-        this.serverSslRequireAuthentication = this.clusterSSLRequireAuthentication;
-        this.sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION,
-            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+      if (sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
+        serverSslRequireAuthentication = clusterSSLRequireAuthentication;
+        sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION,
+            sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.serverSSLKeyStore = this.clusterSSLKeyStore;
-        this.sourceMap.put(SERVER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        serverSSLKeyStore = clusterSSLKeyStore;
+        sourceMap.put(SERVER_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.serverSSLKeyStoreType = this.clusterSSLKeyStoreType;
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        serverSSLKeyStoreType = clusterSSLKeyStoreType;
+        sourceMap.put(SERVER_SSL_KEYSTORE_TYPE, sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.serverSSLKeyStorePassword = this.clusterSSLKeyStorePassword;
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        serverSSLKeyStorePassword = clusterSSLKeyStorePassword;
+        sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.serverSSLTrustStore = this.clusterSSLTrustStore;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        serverSSLTrustStore = clusterSSLTrustStore;
+        sourceMap.put(SERVER_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.serverSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        serverSSLTrustStorePassword = clusterSSLTrustStorePassword;
+        sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      this.serverSslProperties.putAll(this.clusterSSLProperties);
+      serverSslProperties.putAll(clusterSSLProperties);
-      if (this.sourceMap.get(SERVER_SSL_KEYSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.serverSSLKeyStore = this.clusterSSLKeyStore;
-        this.sourceMap.put(SERVER_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(SERVER_SSL_KEYSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        serverSSLKeyStore = clusterSSLKeyStore;
+        sourceMap.put(SERVER_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_TYPE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.serverSSLKeyStoreType = this.clusterSSLKeyStoreType;
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(SERVER_SSL_KEYSTORE_TYPE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        serverSSLKeyStoreType = clusterSSLKeyStoreType;
+        sourceMap.put(SERVER_SSL_KEYSTORE_TYPE, sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.serverSSLKeyStorePassword = this.clusterSSLKeyStorePassword;
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        serverSSLKeyStorePassword = clusterSSLKeyStorePassword;
+        sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.serverSSLTrustStore = this.clusterSSLTrustStore;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(SERVER_SSL_TRUSTSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        serverSSLTrustStore = clusterSSLTrustStore;
+        sourceMap.put(SERVER_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.serverSSLTrustStorePassword = this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        serverSSLTrustStorePassword = clusterSSLTrustStorePassword;
+        sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-  /*
+  /**
-    boolean gatewaySSLOverriden = this.sourceMap.get(GATEWAY_SSL_ENABLED) != null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-    boolean hasSSLComponents = this.sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
+    boolean gatewaySSLOverriden = sourceMap.get(GATEWAY_SSL_ENABLED) != null;
+    boolean clusterSSLOverRidden = sourceMap.get(CLUSTER_SSL_ENABLED) != null;
+    boolean hasSSLComponents = sourceMap.get(SSL_ENABLED_COMPONENTS) != null;
-      this.gatewaySSLEnabled = this.clusterSSLEnabled;
-      this.sourceMap.put(GATEWAY_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
-        this.gatewaySslCiphers = this.clusterSSLCiphers;
-        this.sourceMap.put(GATEWAY_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
+      gatewaySSLEnabled = clusterSSLEnabled;
+      sourceMap.put(GATEWAY_SSL_ENABLED, sourceMap.get(CLUSTER_SSL_ENABLED));
+      if (sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
+        gatewaySslCiphers = clusterSSLCiphers;
+        sourceMap.put(GATEWAY_SSL_CIPHERS, sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
-        this.gatewaySslProtocols = this.clusterSSLProtocols;
-        this.sourceMap.put(GATEWAY_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
+      if (sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
+        gatewaySslProtocols = clusterSSLProtocols;
+        sourceMap.put(GATEWAY_SSL_PROTOCOLS, sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
-        this.gatewaySslRequireAuthentication = this.clusterSSLRequireAuthentication;
-        this.sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION,
-            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
+      if (sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
+        gatewaySslRequireAuthentication = clusterSSLRequireAuthentication;
+        sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION,
+            sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.gatewaySSLKeyStore = this.clusterSSLKeyStore;
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        gatewaySSLKeyStore = clusterSSLKeyStore;
+        sourceMap.put(GATEWAY_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.gatewaySSLKeyStoreType = this.clusterSSLKeyStoreType;
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        gatewaySSLKeyStoreType = clusterSSLKeyStoreType;
+        sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.gatewaySSLKeyStorePassword = this.clusterSSLKeyStorePassword;
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        gatewaySSLKeyStorePassword = clusterSSLKeyStorePassword;
+        sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.gatewaySSLTrustStore = this.clusterSSLTrustStore;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        gatewaySSLTrustStore = clusterSSLTrustStore;
+        sourceMap.put(GATEWAY_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.gatewaySSLTrustStorePassword = this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        gatewaySSLTrustStorePassword = clusterSSLTrustStorePassword;
+        sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      this.gatewaySslProperties.putAll(this.clusterSSLProperties);
+      gatewaySslProperties.putAll(clusterSSLProperties);
-      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.gatewaySSLKeyStore = this.clusterSSLKeyStore;
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
+      if (sourceMap.get(GATEWAY_SSL_KEYSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
+        gatewaySSLKeyStore = clusterSSLKeyStore;
+        sourceMap.put(GATEWAY_SSL_KEYSTORE, sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.gatewaySSLKeyStoreType = this.clusterSSLKeyStoreType;
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
+      if (sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
+        gatewaySSLKeyStoreType = clusterSSLKeyStoreType;
+        sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.gatewaySSLKeyStorePassword = this.clusterSSLKeyStorePassword;
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
+      if (sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
+        gatewaySSLKeyStorePassword = clusterSSLKeyStorePassword;
+        sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.gatewaySSLTrustStore = this.clusterSSLTrustStore;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
+      if (sourceMap.get(GATEWAY_SSL_TRUSTSTORE) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
+        gatewaySSLTrustStore = clusterSSLTrustStore;
+        sourceMap.put(GATEWAY_SSL_TRUSTSTORE, sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.gatewaySSLTrustStorePassword = this.clusterSSLTrustStorePassword;
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
+      if (sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD) == null
+          && sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
+        gatewaySSLTrustStorePassword = clusterSSLTrustStorePassword;
+        sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,
+            sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-
-  public void setApiProps(Properties apiProps) {
+  void setApiProps(Properties apiProps) {
-      this.modifiable = true;
+      modifiable = true;
-        this.props.put(propName, me.getValue());
+        props.put(propName, me.getValue());
-          this.setAttribute(propName, propVal.trim(), this.sourceMap.get(propName));
+          setAttribute(propName, propVal.trim(), sourceMap.get(propName));
-      this.modifiable = false;
+      modifiable = false;
-  public static boolean specialPropName(String propName) {
+  private static boolean specialPropName(String propName) {
-    return this.sourceMap;
+    return sourceMap;
+  @Override
-   * @param p the Properties to fill in
+   * @param properties the Properties to fill in
-  public static void loadGemFireProperties(Properties p) throws GemFireIOException {
-    loadGemFireProperties(p, false);
+  public static void loadGemFireProperties(Properties properties) throws GemFireIOException {
+    loadGemFireProperties(properties, false);
-   * @param p the Properties to fill in
+   * @param properties the Properties to fill in
-  public static void loadGemFireProperties(Properties p, boolean ignoreGemFirePropsFile)
+  public static void loadGemFireProperties(Properties properties, boolean ignoreGemFirePropsFile)
-      loadPropertiesFromURL(p, DistributedSystem.getPropertyFileURL());
+      loadPropertiesFromURL(properties, DistributedSystem.getPropertyFileURL());
-    loadPropertiesFromURL(p, DistributedSystem.getSecurityPropertiesFileURL());
+    loadPropertiesFromURL(properties, DistributedSystem.getSecurityPropertiesFileURL());
-      this.sourceMap.put((String) k, source);
+      sourceMap.put((String) k, source);
-  private static void loadPropertiesFromURL(Properties p, URL url) {
+  private static void loadPropertiesFromURL(Properties properties, URL url) {
-        p.load(url.openStream());
+        properties.load(url.openStream());
-    this.modifiable = true;
+    modifiable = true;
-      if (propVal != null && (propVal instanceof String)) { // weed out extraneous non-string
-                                                            // properties
-        this.setAttribute(propName, ((String) propVal).trim(), this.sourceMap.get(propName));
+      // weed out extraneous non-string properties
+      if (propVal instanceof String) {
+        setAttribute(propName, ((String) propVal).trim(), sourceMap.get(propName));
-      this.setAttribute(CLUSTER_SSL_ENABLED, (String) props.get(CLUSTER_SSL_ENABLED),
-          this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      setAttribute(CLUSTER_SSL_ENABLED, (String) props.get(CLUSTER_SSL_ENABLED),
+          sourceMap.get(CLUSTER_SSL_ENABLED));
-      this.setAttribute(SECURITY_PEER_AUTH_INIT, (String) props.get(SECURITY_PEER_AUTH_INIT),
-          this.sourceMap.get(SECURITY_PEER_AUTH_INIT));
+      setAttribute(SECURITY_PEER_AUTH_INIT, (String) props.get(SECURITY_PEER_AUTH_INIT),
+          sourceMap.get(SECURITY_PEER_AUTH_INIT));
-      this.setAttribute(SECURITY_PEER_AUTHENTICATOR,
+      setAttribute(SECURITY_PEER_AUTHENTICATOR,
-          this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
+          sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
-    this.modifiable = false;
+    modifiable = false;
+  @Override
-    Properties props = System.getProperties();
-    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT);
-    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR);
+    Properties properties = System.getProperties();
+    properties.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT);
+    properties.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR);
-      props.remove(SECURITY_SYSTEM_PREFIX + (String) iter.next());
+      properties.remove(SECURITY_SYSTEM_PREFIX + iter.next());
-    System.setProperties(props);
+    System.setProperties(properties);
-  //////////////////// Configuration Methods ////////////////////
-
+  @Override
-    return this.name;
+    return name;
+  @Override
-    return this.tcpPort;
+    return tcpPort;
+  @Override
-    return this.mcastPort;
+    return mcastPort;
+  @Override
-    return this.mcastTtl;
+    return mcastTtl;
+  @Override
-    return this.socketLeaseTime;
+    return socketLeaseTime;
+  @Override
-    return this.socketBufferSize;
+    return socketBufferSize;
+  @Override
-    return this.conserveSockets;
+    return conserveSockets;
+  @Override
-    return this.roles;
+    return roles;
+  @Override
-    return this.maxWaitTimeForReconnect;
+    return maxWaitTimeForReconnect;
+  @Override
-    return this.maxNumReconnectTries;
+    return maxNumReconnectTries;
+  @Override
-      return this.mcastAddress;
+      return mcastAddress;
+  @Override
-    return this.bindAddress;
+    return bindAddress;
+  @Override
-    return this.serverBindAddress;
+    return serverBindAddress;
+  @Override
-    if (this.startLocator != null && this.startLocator.length() > 0) {
-      String locs = this.locators;
+    if (startLocator != null && startLocator.length() > 0) {
+      String locs = locators;
-    return this.locators;
+    return locators;
+  @Override
-    if (this.startLocatorPort > 0) {
-      if (this.bindAddress != null) {
-        return this.bindAddress + "[" + this.startLocatorPort + "]";
+    if (startLocatorPort > 0) {
+      if (bindAddress != null) {
+        return bindAddress + "[" + startLocatorPort + "]";
-        return SocketCreator.getHostName(SocketCreator.getLocalHost()) + "[" + this.startLocatorPort
+        return SocketCreator.getHostName(SocketCreator.getLocalHost()) + "[" + startLocatorPort
-      } catch (UnknownHostException e) {
+      } catch (UnknownHostException ignore) {
-    return this.startLocator;
+    return startLocator;
+  @Override
-    return this.deployWorkingDir;
+    return deployWorkingDir;
+  @Override
-    return this.logFile;
+    return logFile;
+  @Override
-    return this.logLevel;
+    return logLevel;
+  @Override
-    return this.statisticSamplingEnabled;
+    return statisticSamplingEnabled;
+  @Override
-    return this.statisticSampleRate;
+    return statisticSampleRate;
+  @Override
-    return this.statisticArchiveFile;
+    return statisticArchiveFile;
+  @Override
-    return this.ackWaitThreshold;
+    return ackWaitThreshold;
+  @Override
-    return this.ackForceDisconnectThreshold;
+    return ackForceDisconnectThreshold;
+  @Override
-    return this.cacheXmlFile;
+    return cacheXmlFile;
+  @Override
-    return this.clusterSSLEnabled;
+    return clusterSSLEnabled;
+  @Override
-    return this.clusterSSLProtocols;
+    return clusterSSLProtocols;
+  @Override
-    return this.clusterSSLCiphers;
+    return clusterSSLCiphers;
+  @Override
-    return this.clusterSSLRequireAuthentication;
+    return clusterSSLRequireAuthentication;
+  @Override
-    return this.clusterSSLKeyStore;
+    return clusterSSLKeyStore;
+  @Override
-    return this.clusterSSLKeyStoreType;
+    return clusterSSLKeyStoreType;
+  @Override
-    return this.clusterSSLKeyStorePassword;
+    return clusterSSLKeyStorePassword;
+  @Override
-    return this.clusterSSLTrustStore;
+    return clusterSSLTrustStore;
+  @Override
-    return this.clusterSSLTrustStorePassword;
+    return clusterSSLTrustStorePassword;
+  @Override
-    return this.asyncDistributionTimeout;
+    return asyncDistributionTimeout;
+  @Override
-    return this.asyncQueueTimeout;
+    return asyncQueueTimeout;
+  @Override
-    return this.asyncMaxQueueSize;
+    return asyncMaxQueueSize;
+  @Override
-    return this.userCommandPackages;
+    return userCommandPackages;
+  @Override
-    return this.httpServicePort;
+    return httpServicePort;
+  @Override
-    this.httpServicePort = value;
+    httpServicePort = value;
+  @Override
-    return this.httpServiceBindAddress;
+    return httpServiceBindAddress;
+  @Override
-    this.httpServiceBindAddress = value;
+    httpServiceBindAddress = value;
+  @Override
-    return this.startDevRestApi;
+    return startDevRestApi;
+  @Override
-    this.startDevRestApi = value;
+    startDevRestApi = value;
+  @Override
-    this.userCommandPackages = value;
+    userCommandPackages = value;
+  @Override
-    return this.deltaPropagation;
+    return deltaPropagation;
+  @Override
-    this.deltaPropagation = (Boolean) value;
+    deltaPropagation = value;
+  @Override
-    this.name = (String) value;
+    name = value;
+  @Override
-    this.tcpPort = (Integer) value;
+    tcpPort = value;
+  @Override
-    this.mcastPort = (Integer) value;
+    mcastPort = value;
+  @Override
-    this.mcastTtl = (Integer) value;
+    mcastTtl = value;
+  @Override
-    this.socketLeaseTime = (Integer) value;
+    socketLeaseTime = value;
+  @Override
-    this.socketBufferSize = (Integer) value;
+    socketBufferSize = value;
-  public void setConserveSockets(boolean value) {
-    this.conserveSockets = (Boolean) value;
+  @Override
+  public void setConserveSockets(boolean newValue) {
+    conserveSockets = newValue;
-  public void setRoles(String value) {
-    this.roles = (String) value;
+  @Override
+  public void setRoles(String roles) {
+    this.roles = roles;
-  public void setMaxWaitTimeForReconnect(int value) {
-    this.maxWaitTimeForReconnect = value;
+  @Override
+  public void setMaxWaitTimeForReconnect(int timeOut) {
+    maxWaitTimeForReconnect = timeOut;
-  public void setMaxNumReconnectTries(int value) {
-    this.maxNumReconnectTries = value;
+  @Override
+  public void setMaxNumReconnectTries(int tries) {
+    maxNumReconnectTries = tries;
+  @Override
-    this.mcastAddress = (InetAddress) value;
+    mcastAddress = value;
+  @Override
-    this.bindAddress = (String) value;
+    bindAddress = value;
+  @Override
-    this.serverBindAddress = (String) value;
+    serverBindAddress = value;
+  @Override
-    this.locators = (String) value;
+    locators = value;
-  public void setLocatorWaitTime(int value) {
-    this.locatorWaitTime = value;
+  @Override
+  public void setLocatorWaitTime(int seconds) {
+    locatorWaitTime = seconds;
+  @Override
-    return this.locatorWaitTime;
+    return locatorWaitTime;
+  @Override
-    this.deployWorkingDir = (File) value;
+    deployWorkingDir = value;
+  @Override
-    this.logFile = (File) value;
+    logFile = value;
+  @Override
-    this.logLevel = (Integer) value;
+    logLevel = value;
-  public void unsafeSetLogFile(File value) {
-    this.logFile = value;
+  void unsafeSetLogFile(File value) {
+    logFile = value;
+  @Override
-      } else {
-
-    this.startLocator = value;
+    startLocator = value;
-  public void setStatisticSamplingEnabled(boolean value) {
-    this.statisticSamplingEnabled = (Boolean) value;
+  @Override
+  public void setStatisticSamplingEnabled(boolean newValue) {
+    statisticSamplingEnabled = newValue;
+  @Override
-    value = (Integer) value;
-    this.statisticSampleRate = value;
+    statisticSampleRate = value;
+  @Override
-    this.statisticArchiveFile = (File) value;
+    statisticArchiveFile = value;
+  @Override
-    this.cacheXmlFile = (File) value;
+    cacheXmlFile = value;
-  public void setAckWaitThreshold(int value) {
-    this.ackWaitThreshold = (Integer) value;
+  @Override
+  public void setAckWaitThreshold(int newThreshold) {
+    ackWaitThreshold = newThreshold;
-  public void setAckSevereAlertThreshold(int value) {
-    this.ackForceDisconnectThreshold = (Integer) value;
+  @Override
+  public void setAckSevereAlertThreshold(int newThreshold) {
+    ackForceDisconnectThreshold = newThreshold;
+  @Override
-    return this.archiveDiskSpaceLimit;
+    return archiveDiskSpaceLimit;
+  @Override
-    this.archiveDiskSpaceLimit = (Integer) value;
+    archiveDiskSpaceLimit = value;
+  @Override
-    return this.archiveFileSizeLimit;
+    return archiveFileSizeLimit;
+  @Override
-    this.archiveFileSizeLimit = (Integer) value;
+    archiveFileSizeLimit = value;
+  @Override
-    return this.logDiskSpaceLimit;
+    return logDiskSpaceLimit;
+  @Override
-    this.logDiskSpaceLimit = (Integer) value;
+    logDiskSpaceLimit = value;
+  @Override
-    return this.logFileSizeLimit;
+    return logFileSizeLimit;
+  @Override
-    this.logFileSizeLimit = (Integer) value;
+    logFileSizeLimit = value;
-  public void setClusterSSLEnabled(boolean value) {
-    this.clusterSSLEnabled = (Boolean) value;
+  @Override
+  public void setClusterSSLEnabled(boolean enabled) {
+    clusterSSLEnabled = enabled;
-  public void setClusterSSLProtocols(String value) {
-    this.clusterSSLProtocols = (String) value;
+  @Override
+  public void setClusterSSLProtocols(String protocols) {
+    clusterSSLProtocols = protocols;
-  public void setClusterSSLCiphers(String value) {
-    this.clusterSSLCiphers = (String) value;
+  @Override
+  public void setClusterSSLCiphers(String ciphers) {
+    clusterSSLCiphers = ciphers;
-  public void setClusterSSLRequireAuthentication(boolean value) {
-    this.clusterSSLRequireAuthentication = (Boolean) value;
+  @Override
+  public void setClusterSSLRequireAuthentication(boolean enabled) {
+    clusterSSLRequireAuthentication = enabled;
-  public void setClusterSSLKeyStore(String value) {
-    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-    this.clusterSSLKeyStore = value;
+  @Override
+  public void setClusterSSLKeyStore(String keyStore) {
+    getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, keyStore);
+    clusterSSLKeyStore = keyStore;
-  public void setClusterSSLKeyStoreType(String value) {
-    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME, value);
-    this.clusterSSLKeyStoreType = value;
+  @Override
+  public void setClusterSSLKeyStoreType(String keyStoreType) {
+    getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME,
+        keyStoreType);
+    clusterSSLKeyStoreType = keyStoreType;
-  public void setClusterSSLKeyStorePassword(String value) {
-    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
-        value);
-    this.clusterSSLKeyStorePassword = value;
+  @Override
+  public void setClusterSSLKeyStorePassword(String keyStorePassword) {
+    getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        keyStorePassword);
+    clusterSSLKeyStorePassword = keyStorePassword;
-  public void setClusterSSLTrustStore(String value) {
-    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, value);
-    this.clusterSSLTrustStore = value;
+  @Override
+  public void setClusterSSLTrustStore(String trustStore) {
+    getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, trustStore);
+    clusterSSLTrustStore = trustStore;
-  public void setClusterSSLTrustStorePassword(String value) {
-    this.getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
-        value);
-    this.clusterSSLTrustStorePassword = value;
+  @Override
+  public void setClusterSSLTrustStorePassword(String trusStorePassword) {
+    getClusterSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        trusStorePassword);
+    clusterSSLTrustStorePassword = trusStorePassword;
+  @Override
+  @Override
-    mcastSendBufferSize = (Integer) value;
+    mcastSendBufferSize = value;
+  @Override
+  @Override
-    mcastRecvBufferSize = (Integer) value;
+    mcastRecvBufferSize = value;
-  public void setAsyncDistributionTimeout(int value) {
-    this.asyncDistributionTimeout = (Integer) value;
+  @Override
+  public void setAsyncDistributionTimeout(int newValue) {
+    asyncDistributionTimeout = newValue;
-  public void setAsyncQueueTimeout(int value) {
-    this.asyncQueueTimeout = (Integer) value;
+  @Override
+  public void setAsyncQueueTimeout(int newValue) {
+    asyncQueueTimeout = newValue;
-  public void setAsyncMaxQueueSize(int value) {
-    this.asyncMaxQueueSize = (Integer) value;
+  @Override
+  public void setAsyncMaxQueueSize(int newValue) {
+    asyncMaxQueueSize = newValue;
+  @Override
+  @Override
-    mcastFlowControl = (FlowControlParams) values;
+    mcastFlowControl = values;
+  @Override
+  @Override
-    udpFragmentSize = (Integer) value;
+    udpFragmentSize = value;
+  @Override
+  @Override
-    udpSendBufferSize = (Integer) value;
+    udpSendBufferSize = value;
+  @Override
+  @Override
-    udpRecvBufferSize = (Integer) value;
+    udpRecvBufferSize = value;
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    memberTimeout = (Integer) value;
+    memberTimeout = value;
+  @Override
-    return this.clientConflation;
+    return clientConflation;
-  public void setClientConflation(String value) {
-    this.clientConflation = (String) value;
+  @Override
+  public void setClientConflation(String clientConflation) {
+    this.clientConflation = clientConflation;
+  @Override
-  public void setDurableClientId(String value) {
-    durableClientId = (String) value;
+  @Override
+  public void setDurableClientId(String durableClientId) {
+    this.durableClientId = durableClientId;
+  @Override
-  public void setDurableClientTimeout(int value) {
-    durableClientTimeout = (Integer) value;
+  @Override
+  public void setDurableClientTimeout(int durableClientTimeout) {
+    this.durableClientTimeout = durableClientTimeout;
+  @Override
-  public void setSecurityClientAuthInit(String value) {
-    securityClientAuthInit = (String) value;
+  @Override
+  public void setSecurityClientAuthInit(String attValue) {
+    securityClientAuthInit = attValue;
+  @Override
+  @Override
+  @Override
+  @Override
-    return this.enableNetworkPartitionDetection;
+    return enableNetworkPartitionDetection;
-  public void setEnableNetworkPartitionDetection(boolean value) {
-    this.enableNetworkPartitionDetection = value;
+  @Override
+  public void setEnableNetworkPartitionDetection(boolean newValue) {
+    enableNetworkPartitionDetection = newValue;
+  @Override
-    return this.disableAutoReconnect;
+    return disableAutoReconnect;
+  @Override
-    this.disableAutoReconnect = value;
+    disableAutoReconnect = value;
-  public void setSecurityClientAuthenticator(String value) {
-    securityClientAuthenticator = value;
+  @Override
+  public void setSecurityClientAuthenticator(String attValue) {
+    securityClientAuthenticator = attValue;
-  public void setSecurityManager(String value) {
-    securityManager = value;
+  @Override
+  public void setSecurityManager(String attValue) {
+    securityManager = attValue;
-  public void setPostProcessor(String value) {
-    postProcessor = value;
+  @Override
+  public void setPostProcessor(String attValue) {
+    postProcessor = attValue;
+  @Override
-  public void setSecurityClientDHAlgo(String value) {
-    securityClientDHAlgo = (String) value;
+  @Override
+  public void setSecurityClientDHAlgo(String attValue) {
+    securityClientDHAlgo = attValue;
+  @Override
-  public void setSecurityUDPDHAlgo(String value) {
-    securityUDPDHAlgo = (String) checkAttribute(SECURITY_UDP_DHALGO, value);
+  @Override
+  public void setSecurityUDPDHAlgo(String attValue) {
+    securityUDPDHAlgo = (String) checkAttribute(SECURITY_UDP_DHALGO, attValue);
+  @Override
-  public void setSecurityPeerAuthInit(String value) {
-    securityPeerAuthInit = (String) value;
+  @Override
+  public void setSecurityPeerAuthInit(String attValue) {
+    securityPeerAuthInit = attValue;
+  @Override
-  public void setSecurityPeerAuthenticator(String value) {
-    securityPeerAuthenticator = (String) value;
+  @Override
+  public void setSecurityPeerAuthenticator(String attValue) {
+    securityPeerAuthenticator = attValue;
+  @Override
-  public void setSecurityClientAccessor(String value) {
-    securityClientAccessor = (String) value;
+  @Override
+  public void setSecurityClientAccessor(String attValue) {
+    securityClientAccessor = attValue;
+  @Override
-  public void setSecurityClientAccessorPP(String value) {
-    securityClientAccessorPP = (String) value;
+  @Override
+  public void setSecurityClientAccessorPP(String attValue) {
+    securityClientAccessorPP = attValue;
+  @Override
-  public void setSecurityLogLevel(int value) {
-    securityLogLevel = (Integer) value;
+  @Override
+  public void setSecurityLogLevel(int level) {
+    securityLogLevel = level;
+  @Override
+  @Override
-    securityLogFile = (File) value;
+    securityLogFile = value;
+  @Override
-  public void setSecurityPeerMembershipTimeout(int value) {
-    securityPeerMembershipTimeout = (Integer) value;
+  @Override
+  public void setSecurityPeerMembershipTimeout(int attValue) {
+    securityPeerMembershipTimeout = attValue;
+  @Override
-    return (attValue == null ? "" : attValue);
+    return attValue == null ? "" : attValue;
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    this.distributedSystemId = (Integer) distributedSystemId;
+    this.distributedSystemId = distributedSystemId;
+  @Override
+  @Override
+  @Override
-    this.enforceUniqueHost = (Boolean) enforceUniqueHost;
+    this.enforceUniqueHost = enforceUniqueHost;
+  @Override
-    this.redundancyZone = (String) redundancyZone;
+    this.redundancyZone = redundancyZone;
+  @Override
-      this.jmxManagerSslProperties.setProperty(
+      jmxManagerSslProperties.setProperty(
-      this.sslProperties.setProperty(attName, attValue);
+      sslProperties.setProperty(attName, attValue);
-      if (!this.jmxManagerSslProperties.containsKey(attName)) {
+      if (!jmxManagerSslProperties.containsKey(attName)) {
-        this.jmxManagerSslProperties.setProperty(attName, attValue);
+        jmxManagerSslProperties.setProperty(attName, attValue);
-      if (!this.serverSslProperties.containsKey(attName)) {
+      if (!serverSslProperties.containsKey(attName)) {
-        this.serverSslProperties.setProperty(attName, attValue);
+        serverSslProperties.setProperty(attName, attValue);
-      if (!this.gatewaySslProperties.containsKey(attName)) {
+      if (!gatewaySslProperties.containsKey(attName)) {
-        this.gatewaySslProperties.setProperty(attName, attValue);
+        gatewaySslProperties.setProperty(attName, attValue);
-      if (!this.httpServiceSSLProperties.containsKey(attName)) {
+      if (!httpServiceSSLProperties.containsKey(attName)) {
-        this.httpServiceSSLProperties.setProperty(attName, attValue);
+        httpServiceSSLProperties.setProperty(attName, attValue);
-      if (!this.clusterSSLProperties.containsKey(attName)) {
+      if (!clusterSSLProperties.containsKey(attName)) {
-        this.clusterSSLProperties.setProperty(attName, attValue);
+        clusterSSLProperties.setProperty(attName, attValue);
+  @Override
-    return this.sslProperties;
+    return sslProperties;
+  @Override
-    return this.clusterSSLProperties;
+    return clusterSSLProperties;
+  @Override
-    return this.jmxManagerSslProperties;
+    return jmxManagerSslProperties;
+  @Override
-    return this.groups;
+    return groups;
+  @Override
-    this.groups = (String) value;
+    groups = value;
-    return this.jmxManager;
+    return jmxManager;
-    this.jmxManager = value;
+    jmxManager = value;
-    return this.jmxManagerStart;
+    return jmxManagerStart;
-    this.jmxManagerStart = value;
+    jmxManagerStart = value;
-    return this.jmxManagerSSLEnabled;
+    return jmxManagerSSLEnabled;
-  public void setJmxManagerSSLEnabled(boolean value) {
-    this.jmxManagerSSLEnabled = value;
+  public void setJmxManagerSSLEnabled(boolean enabled) {
+    jmxManagerSSLEnabled = enabled;
-    return this.jmxManagerSslRequireAuthentication;
+    return jmxManagerSslRequireAuthentication;
-  public void setJmxManagerSSLRequireAuthentication(boolean jmxManagerSslRequireAuthentication) {
-    this.jmxManagerSslRequireAuthentication = jmxManagerSslRequireAuthentication;
+  public void setJmxManagerSSLRequireAuthentication(boolean enabled) {
+    jmxManagerSslRequireAuthentication = enabled;
-    return this.jmxManagerSslProtocols;
+    return jmxManagerSslProtocols;
-    this.jmxManagerSslProtocols = protocols;
+    jmxManagerSslProtocols = protocols;
-    return this.jmxManagerSslCiphers;
+    return jmxManagerSslCiphers;
-    this.jmxManagerSslCiphers = ciphers;
+    jmxManagerSslCiphers = ciphers;
-  public void setJmxManagerSSLKeyStore(String value) {
-
-    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-    this.jmxManagerSSLKeyStore = value;
+  @Override
+  public void setJmxManagerSSLKeyStore(String keyStore) {
+    getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, keyStore);
+    jmxManagerSSLKeyStore = keyStore;
-  public void setJmxManagerSSLKeyStoreType(String value) {
-
-    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME, value);
-    this.jmxManagerSSLKeyStoreType = value;
+  @Override
+  public void setJmxManagerSSLKeyStoreType(String keyStoreType) {
+    getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME, keyStoreType);
+    jmxManagerSSLKeyStoreType = keyStoreType;
-  public void setJmxManagerSSLKeyStorePassword(String value) {
-
-    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME, value);
-    this.jmxManagerSSLKeyStorePassword = value;
+  @Override
+  public void setJmxManagerSSLKeyStorePassword(String keyStorePassword) {
+    getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        keyStorePassword);
+    jmxManagerSSLKeyStorePassword = keyStorePassword;
-  public void setJmxManagerSSLTrustStore(String value) {
-
-    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, value);
-    this.jmxManagerSSLTrustStore = value;
+  @Override
+  public void setJmxManagerSSLTrustStore(String trustStore) {
+    getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, trustStore);
+    jmxManagerSSLTrustStore = trustStore;
-  public void setJmxManagerSSLTrustStorePassword(String value) {
-
-    this.getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
-        value);
-    this.jmxManagerSSLTrustStorePassword = value;
+  @Override
+  public void setJmxManagerSSLTrustStorePassword(String trusStorePassword) {
+    getJmxSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        trusStorePassword);
+    jmxManagerSSLTrustStorePassword = trusStorePassword;
+  @Override
-    return this.jmxManagerSSLKeyStore;
+    return jmxManagerSSLKeyStore;
+  @Override
-    return this.jmxManagerSSLKeyStoreType;
+    return jmxManagerSSLKeyStoreType;
+  @Override
-    return this.jmxManagerSSLKeyStorePassword;
+    return jmxManagerSSLKeyStorePassword;
+  @Override
-    return this.jmxManagerSSLTrustStore;
+    return jmxManagerSSLTrustStore;
+  @Override
-    return this.jmxManagerSSLTrustStorePassword;
+    return jmxManagerSSLTrustStorePassword;
-    return this.jmxManagerPort;
+    return jmxManagerPort;
-    this.jmxManagerPort = (Integer) value;
+    jmxManagerPort = value;
-    return this.jmxManagerBindAddress;
+    return jmxManagerBindAddress;
-    this.jmxManagerBindAddress = (String) value;
+    jmxManagerBindAddress = value;
-    return this.jmxManagerHostnameForClients;
+    return jmxManagerHostnameForClients;
-    this.jmxManagerHostnameForClients = (String) value;
+    jmxManagerHostnameForClients = value;
-    return this.jmxManagerPasswordFile;
+    return jmxManagerPasswordFile;
-    this.jmxManagerPasswordFile = (String) value;
+    jmxManagerPasswordFile = value;
-    return this.jmxManagerAccessFile;
+    return jmxManagerAccessFile;
-    this.jmxManagerAccessFile = (String) value;
+    jmxManagerAccessFile = value;
-    return this.jmxManagerUpdateRate;
+    return jmxManagerUpdateRate;
-    this.jmxManagerUpdateRate = (Integer) value;
+    jmxManagerUpdateRate = value;
-    return this.lockMemory;
+    return lockMemory;
-    this.lockMemory = value;
+    lockMemory = value;
-    this.shiroInit = value;
+    shiroInit = value;
-    return this.shiroInit;
+    return shiroInit;
-  public void setLocatorSSLAlias(final String locatorSSLAlias) {
-    this.locatorSSLAlias = locatorSSLAlias;
+  public void setLocatorSSLAlias(final String alias) {
+    locatorSSLAlias = alias;
-    this.securableCommunicationChannels = sslEnabledComponents;
+    securableCommunicationChannels = sslEnabledComponents;
-  public void setSSLProtocols(final String sslProtocols) {
+  public void setSSLProtocols(final String protocols) {
-    this.sslProtocols = convertCommaDelimitedToSpaceDelimitedString(sslProtocols);
+    sslProtocols = convertCommaDelimitedToSpaceDelimitedString(protocols);
-  public void setSSLCiphers(final String sslCiphers) {
+  public void setSSLCiphers(final String ciphers) {
-    this.sslCiphers = convertCommaDelimitedToSpaceDelimitedString(sslCiphers);
+    sslCiphers = convertCommaDelimitedToSpaceDelimitedString(ciphers);
-  public void setSSLRequireAuthentication(final boolean sslRequireAuthentication) {
-    this.sslRequireAuthentication = sslRequireAuthentication;
+  public void setSSLRequireAuthentication(final boolean enabled) {
+    sslRequireAuthentication = enabled;
-  public void setSSLKeyStore(final String sslKeyStore) {
-    this.sslKeyStore = sslKeyStore;
+  public void setSSLKeyStore(final String keyStore) {
+    sslKeyStore = keyStore;
-  public void setSSLKeyStoreType(final String sslKeyStoreType) {
-    this.sslKeyStoreType = sslKeyStoreType;
+  public void setSSLKeyStoreType(final String keyStoreType) {
+    sslKeyStoreType = keyStoreType;
-  public void setSSLKeyStorePassword(final String sslKeyStorePassword) {
-    this.sslKeyStorePassword = sslKeyStorePassword;
+  public void setSSLKeyStorePassword(final String keyStorePassword) {
+    sslKeyStorePassword = keyStorePassword;
-  public void setSSLTrustStore(final String sslTrustStore) {
-    this.sslTrustStore = sslTrustStore;
+  public void setSSLTrustStore(final String trustStore) {
+    sslTrustStore = trustStore;
-  public void setSSLTrustStorePassword(final String sslTrustStorePassword) {
-    this.sslTrustStorePassword = sslTrustStorePassword;
+  public void setSSLTrustStorePassword(final String trustStorePassword) {
+    sslTrustStorePassword = trustStorePassword;
-  public void setSSLTrustStoreType(final String sslTrustStoreType) {
-    this.sslTrustStoreType = sslTrustStoreType;
+  public void setSSLTrustStoreType(final String trustStoreType) {
+    sslTrustStoreType = trustStoreType;
-  public void setSSLWebRequireAuthentication(final boolean requiresAuthenatication) {
-    this.sslWebServiceRequireAuthentication = requiresAuthenatication;
+  public void setSSLWebRequireAuthentication(final boolean requiresAuthentication) {
+    sslWebServiceRequireAuthentication = requiresAuthentication;
-    this.validateSerializableObjects = value;
+    validateSerializableObjects = value;
-    this.serializableObjectFilter = value;
+    serializableObjectFilter = value;
-  /////////////////////// Utility Methods ///////////////////////
-
-
-  public boolean equals(final Object o) {
-    if (this == o) {
+  public boolean equals(final Object obj) {
+    if (this == obj) {
-    if (o == null || getClass() != o.getClass()) {
+    if (obj == null || getClass() != obj.getClass()) {
-    final DistributionConfigImpl that = (DistributionConfigImpl) o;
+    final DistributionConfigImpl that = (DistributionConfigImpl) obj;
-  public void checkForDisallowedDefaults() {
+  void checkForDisallowedDefaults() {
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.distributed.internal.DistributionConfig#getMembershipPortRange()
-   */
+  @Override
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.distributed.internal.DistributionConfig#setMembershipPortRange(int[])
-   */
+  @Override
-    membershipPortRange = (int[]) range;
+    membershipPortRange = range;
-  public void setRemoteLocators(String value) {
-    this.remoteLocators = (String) value;
+  @Override
+  public void setRemoteLocators(String locators) {
+    remoteLocators = locators;
+  @Override
-    return this.remoteLocators;
+    return remoteLocators;
-    return this.memcachedPort;
+    return memcachedPort;
-    this.memcachedPort = (Integer) value;
+    memcachedPort = value;
-    return this.memcachedProtocol;
+    return memcachedProtocol;
-    this.memcachedProtocol = (String) protocol;
+    memcachedProtocol = protocol;
-    return this.redisPort;
+    return redisPort;
-    this.redisPort = (Integer) value;
+    redisPort = value;
-    return this.redisBindAddress;
+    return redisBindAddress;
-    this.redisBindAddress = (String) bindAddress;
+    redisBindAddress = bindAddress;
-    return this.redisPassword;
+    return redisPassword;
-    this.redisPassword = password;
+    redisPassword = password;
-    return this.offHeapMemorySize;
+    return offHeapMemorySize;
-    this.offHeapMemorySize = (String) value;
+    offHeapMemorySize = value;
-    return this.memcachedBindAddress;
+    return memcachedBindAddress;
-    this.memcachedBindAddress = (String) bindAddress;
+    memcachedBindAddress = bindAddress;
-  public void setEnableClusterConfiguration(boolean value) {
-    this.enableSharedConfiguration = (Boolean) value;
+  public void setEnableClusterConfiguration(boolean newValue) {
+    enableSharedConfiguration = newValue;
-    return this.enableSharedConfiguration;
+    return enableSharedConfiguration;
-    this.useSharedConfiguration = (Boolean) newValue;
+    useSharedConfiguration = newValue;
-    return this.useSharedConfiguration;
+    return useSharedConfiguration;
-    this.loadSharedConfigurationFromDir = (Boolean) newValue;
+    loadSharedConfigurationFromDir = newValue;
-    return this.loadSharedConfigurationFromDir;
+    return loadSharedConfigurationFromDir;
-    this.clusterConfigDir = (String) clusterConfigDir;
+    this.clusterConfigDir = clusterConfigDir;
-    return this.clusterConfigDir;
+    return clusterConfigDir;
-  public void setServerSSLEnabled(boolean value) {
-    this.serverSSLEnabled = (Boolean) value;
+  public void setServerSSLEnabled(boolean enabled) {
+    serverSSLEnabled = enabled;
-  public void setServerSSLRequireAuthentication(boolean value) {
-    this.serverSslRequireAuthentication = (Boolean) value;
+  public void setServerSSLRequireAuthentication(boolean enabled) {
+    serverSslRequireAuthentication = enabled;
-    return this.serverSslProtocols;
+    return serverSslProtocols;
-    this.serverSslProtocols = (String) protocols;
+    serverSslProtocols = protocols;
-    return this.serverSslCiphers;
+    return serverSslCiphers;
-    this.serverSslCiphers = (String) ciphers;
+    serverSslCiphers = ciphers;
-  public void setServerSSLKeyStore(String value) {
-    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-    this.serverSSLKeyStore = value;
+  @Override
+  public void setServerSSLKeyStore(String keyStore) {
+    getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, keyStore);
+    serverSSLKeyStore = keyStore;
-  public void setServerSSLKeyStoreType(String value) {
-    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME, value);
-    this.serverSSLKeyStoreType = value;
+  @Override
+  public void setServerSSLKeyStoreType(String keyStoreType) {
+    getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME, keyStoreType);
+    serverSSLKeyStoreType = keyStoreType;
-  public void setServerSSLKeyStorePassword(String value) {
-    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
-        value);
-    this.serverSSLKeyStorePassword = value;
+  @Override
+  public void setServerSSLKeyStorePassword(String keyStorePassword) {
+    getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        keyStorePassword);
+    serverSSLKeyStorePassword = keyStorePassword;
-  public void setServerSSLTrustStore(String value) {
-    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, value);
-    this.serverSSLTrustStore = value;
+  @Override
+  public void setServerSSLTrustStore(String trustStore) {
+    getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, trustStore);
+    serverSSLTrustStore = trustStore;
-  public void setServerSSLTrustStorePassword(String value) {
-    this.getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
-        value);
-    this.serverSSLTrustStorePassword = value;
+  @Override
+  public void setServerSSLTrustStorePassword(String trusStorePassword) {
+    getServerSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        trusStorePassword);
+    serverSSLTrustStorePassword = trusStorePassword;
+  @Override
-    return this.serverSSLKeyStore;
+    return serverSSLKeyStore;
+  @Override
-    return this.serverSSLKeyStoreType;
+    return serverSSLKeyStoreType;
+  @Override
-    return this.serverSSLKeyStorePassword;
+    return serverSSLKeyStorePassword;
+  @Override
-    return this.serverSSLTrustStore;
+    return serverSSLTrustStore;
+  @Override
-    return this.serverSSLTrustStorePassword;
+    return serverSSLTrustStorePassword;
-    return this.serverSslProperties;
+    return serverSslProperties;
-  public void setGatewaySSLEnabled(boolean value) {
-    this.gatewaySSLEnabled = (Boolean) value;
+  public void setGatewaySSLEnabled(boolean enabled) {
+    gatewaySSLEnabled = enabled;
-  public void setGatewaySSLRequireAuthentication(boolean value) {
-    this.gatewaySslRequireAuthentication = (Boolean) value;
+  public void setGatewaySSLRequireAuthentication(boolean enabled) {
+    gatewaySslRequireAuthentication = enabled;
-    return this.gatewaySslProtocols;
+    return gatewaySslProtocols;
-    this.gatewaySslProtocols = (String) protocols;
+    gatewaySslProtocols = protocols;
-    return this.gatewaySslCiphers;
+    return gatewaySslCiphers;
-    this.gatewaySslCiphers = (String) ciphers;
+    gatewaySslCiphers = ciphers;
-  public void setGatewaySSLKeyStore(String value) {
-    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, value);
-    this.gatewaySSLKeyStore = value;
+  @Override
+  public void setGatewaySSLKeyStore(String keyStore) {
+    getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME, keyStore);
+    gatewaySSLKeyStore = keyStore;
-  public void setGatewaySSLKeyStoreType(String value) {
-    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME, value);
-    this.gatewaySSLKeyStoreType = value;
+  @Override
+  public void setGatewaySSLKeyStoreType(String keyStoreType) {
+    getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME,
+        keyStoreType);
+    gatewaySSLKeyStoreType = keyStoreType;
-  public void setGatewaySSLKeyStorePassword(String value) {
-    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
-        value);
-    this.gatewaySSLKeyStorePassword = value;
+  @Override
+  public void setGatewaySSLKeyStorePassword(String keyStorePassword) {
+    getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        keyStorePassword);
+    gatewaySSLKeyStorePassword = keyStorePassword;
-  public void setGatewaySSLTrustStore(String value) {
-    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, value);
-    this.gatewaySSLTrustStore = value;
+  @Override
+  public void setGatewaySSLTrustStore(String trustStore) {
+    getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME, trustStore);
+    gatewaySSLTrustStore = trustStore;
-  public void setGatewaySSLTrustStorePassword(String value) {
-    this.getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
-        value);
-    this.gatewaySSLTrustStorePassword = value;
+  @Override
+  public void setGatewaySSLTrustStorePassword(String trusStorePassword) {
+    getGatewaySSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME,
+        trusStorePassword);
+    gatewaySSLTrustStorePassword = trusStorePassword;
+  @Override
-    return this.gatewaySSLKeyStore;
+    return gatewaySSLKeyStore;
+  @Override
-    return this.gatewaySSLKeyStoreType;
+    return gatewaySSLKeyStoreType;
+  @Override
-    return this.gatewaySSLKeyStorePassword;
+    return gatewaySSLKeyStorePassword;
+  @Override
-    return this.gatewaySSLTrustStore;
+    return gatewaySSLTrustStore;
+  @Override
-    return this.gatewaySSLTrustStorePassword;
+    return gatewaySSLTrustStorePassword;
-    return this.gatewaySslProperties;
+    return gatewaySslProperties;
-  // Adding HTTP Service SSL properties
-  public void setHttpServiceSSLProtocols(String httpServiceSSLProtocols) {
-    this.httpServiceSSLProtocols = httpServiceSSLProtocols;
+  public void setHttpServiceSSLProtocols(String protocols) {
+    httpServiceSSLProtocols = protocols;
-  public void setHttpServiceSSLCiphers(String httpServiceSSLCiphers) {
-    this.httpServiceSSLCiphers = httpServiceSSLCiphers;
+  public void setHttpServiceSSLCiphers(String ciphers) {
+    httpServiceSSLCiphers = ciphers;
-
-  public void setHttpServiceSSLKeyStore(String httpServiceSSLKeyStore) {
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME,
-        httpServiceSSLKeyStore);
-    this.httpServiceSSLKeyStore = httpServiceSSLKeyStore;
+  public void setHttpServiceSSLKeyStore(String keyStore) {
+    getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_NAME,
+        keyStore);
+    httpServiceSSLKeyStore = keyStore;
-  public void setHttpServiceSSLKeyStoreType(String httpServiceSSLKeyStoreType) {
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME,
-        httpServiceSSLKeyStoreType);
-    this.httpServiceSSLKeyStoreType = httpServiceSSLKeyStoreType;
+  public void setHttpServiceSSLKeyStoreType(String keyStoreType) {
+    getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_TYPE_NAME,
+        keyStoreType);
+    httpServiceSSLKeyStoreType = keyStoreType;
-  public void setHttpServiceSSLKeyStorePassword(String httpServiceSSLKeyStorePassword) {
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
-        httpServiceSSLKeyStorePassword);
-    this.httpServiceSSLKeyStorePassword = httpServiceSSLKeyStorePassword;
+  public void setHttpServiceSSLKeyStorePassword(String keyStorePassword) {
+    getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + KEY_STORE_PASSWORD_NAME,
+        keyStorePassword);
+    httpServiceSSLKeyStorePassword = keyStorePassword;
-  public void setHttpServiceSSLTrustStore(String httpServiceSSLTrustStore) {
-    this.getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME,
-        httpServiceSSLTrustStore);
-    this.httpServiceSSLTrustStore = httpServiceSSLTrustStore;
+  public void setHttpServiceSSLTrustStore(String trustStore) {
+    getHttpServiceSSLProperties().setProperty(SSL_SYSTEM_PROPS_NAME + TRUST_STORE_NAME,
+        trustStore);
+    httpServiceSSLTrustStore = trustStore;
-  public void setHttpServiceSSLTrustStorePassword(String httpServiceSSLTrustStorePassword) {
-    this.getHttpServiceSSLProperties().setProperty(
-        SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, httpServiceSSLTrustStorePassword);
-    this.httpServiceSSLTrustStorePassword = httpServiceSSLTrustStorePassword;
+  public void setHttpServiceSSLTrustStorePassword(String trustStorePassword) {
+    getHttpServiceSSLProperties().setProperty(
+        SSL_SYSTEM_PROPS_NAME + TRUST_STORE_PASSWORD_NAME, trustStorePassword);
+    httpServiceSSLTrustStorePassword = trustStorePassword;
+  @Override
+  @Override
-    return this.sourceMap.get(attName);
+    return sourceMap.get(attName);
+  @Override
-    return this.distributedTransactions;
+    return distributedTransactions;
+  @Override
-    this.distributedTransactions = value;
+    distributedTransactions = value;
-    return this.threadMonitorEnabled;
+    return threadMonitorEnabled;
-  public void setThreadMonitorEnabled(boolean value) {
-    this.threadMonitorEnabled = (Boolean) value;
+  public void setThreadMonitorEnabled(boolean newValue) {
+    threadMonitorEnabled = newValue;
-    return this.threadMonitorInterval;
+    return threadMonitorInterval;
-  public void setThreadMonitorInterval(int value) {
-    this.threadMonitorInterval = value;
+  public void setThreadMonitorInterval(int newValue) {
+    threadMonitorInterval = newValue;
-    return this.threadMonitorTimeLimit;
+    return threadMonitorTimeLimit;
-  public void setThreadMonitorTimeLimit(int value) {
-    this.threadMonitorTimeLimit = value;
+  public void setThreadMonitorTimeLimit(int newValue) {
+    threadMonitorTimeLimit = newValue;
-
