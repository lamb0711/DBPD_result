Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Controls a {@link ControllableProcess} using files to communicate between
- * processes.
+ * Controls a {@link ControllableProcess} using files to communicate between processes.
-  public static final String STATUS_TIMEOUT_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "FileProcessController.STATUS_TIMEOUT";
-  
+  public static final String STATUS_TIMEOUT_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "FileProcessController.STATUS_TIMEOUT";
+
-    this(arguments, pid, Long.getLong(STATUS_TIMEOUT_PROPERTY, 60*1000), TimeUnit.MILLISECONDS);
+    this(arguments, pid, Long.getLong(STATUS_TIMEOUT_PROPERTY, 60 * 1000), TimeUnit.MILLISECONDS);
-  public FileProcessController(final FileControllerParameters arguments, final int pid, final long timeout, final TimeUnit units) {
+  public FileProcessController(final FileControllerParameters arguments, final int pid,
+      final long timeout, final TimeUnit units) {
-  
+
-  public String status() throws UnableToControlProcessException, IOException, InterruptedException, TimeoutException {
-    return status(this.arguments.getWorkingDirectory(), this.arguments.getProcessType().getStatusRequestFileName(), this.arguments.getProcessType().getStatusFileName());
+  public String status()
+      throws UnableToControlProcessException, IOException, InterruptedException, TimeoutException {
+    return status(this.arguments.getWorkingDirectory(),
+        this.arguments.getProcessType().getStatusRequestFileName(),
+        this.arguments.getProcessType().getStatusFileName());
-    stop(this.arguments.getWorkingDirectory(), this.arguments.getProcessType().getStopRequestFileName());
+    stop(this.arguments.getWorkingDirectory(),
+        this.arguments.getProcessType().getStopRequestFileName());
-  
+
-    throw new AttachAPINotFoundException(LocalizedStrings.Launcher_ATTACH_API_NOT_FOUND_ERROR_MESSAGE.toLocalizedString());
+    throw new AttachAPINotFoundException(
+        LocalizedStrings.Launcher_ATTACH_API_NOT_FOUND_ERROR_MESSAGE.toLocalizedString());
-  
-  private void stop(final File workingDir, final String stopRequestFileName) throws UnableToControlProcessException, IOException {
+
+  private void stop(final File workingDir, final String stopRequestFileName)
+      throws UnableToControlProcessException, IOException {
-  
-  private String status(final File workingDir, final String statusRequestFileName, final String statusFileName) throws UnableToControlProcessException, IOException, InterruptedException, TimeoutException {
+
+  private String status(final File workingDir, final String statusRequestFileName,
+      final String statusFileName)
+      throws UnableToControlProcessException, IOException, InterruptedException, TimeoutException {
-    
+
-    final ControlFileWatchdog statusFileWatchdog = new ControlFileWatchdog(workingDir, statusFileName, statusHandler, true);
+    final ControlFileWatchdog statusFileWatchdog =
+        new ControlFileWatchdog(workingDir, statusFileName, statusHandler, true);
-    
+
-        final TimeoutException te = new TimeoutException("Timed out waiting for process to create " + statusFile);
+        final TimeoutException te =
+            new TimeoutException("Timed out waiting for process to create " + statusFile);
-    
+
