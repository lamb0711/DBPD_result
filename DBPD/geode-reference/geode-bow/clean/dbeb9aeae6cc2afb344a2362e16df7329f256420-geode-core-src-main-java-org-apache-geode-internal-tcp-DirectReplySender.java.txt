Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A reply sender which replies back directly to a dedicated socket
- * socket.
+ * A reply sender which replies back directly to a dedicated socket socket.
-  
+
-  
+
-    //Using an ArrayList, rather than Collections.singletonList here, because the MsgStreamer
-    //mutates the list when it has exceptions.
-    
+    // Using an ArrayList, rather than Collections.singletonList here, because the MsgStreamer
+    // mutates the list when it has exceptions.
+
-    
-    if(logger.isTraceEnabled(LogMarker.DM)) {
+
+    if (logger.isTraceEnabled(LogMarker.DM)) {
-    MsgStreamer ms = (MsgStreamer)MsgStreamer.create(conns, msg, false,
-        DUMMY_STATS);
+    MsgStreamer ms = (MsgStreamer) MsgStreamer.create(conns, msg, false, DUMMY_STATS);
-      if(ce != null && !ce.getMembers().isEmpty()) {
+      if (ce != null && !ce.getMembers().isEmpty()) {
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.DirectChannel_FAILURE_SENDING_DIRECT_REPLY, ce.getMembers().iterator().next()));
+        logger.warn(
+            LocalizedMessage.create(LocalizedStrings.DirectChannel_FAILURE_SENDING_DIRECT_REPLY,
+                ce.getMembers().iterator().next()));
-    } 
-    catch (NotSerializableException e) {
+    } catch (NotSerializableException e) {
-    } 
-    catch (ToDataException e) {
+    } catch (ToDataException e) {
-    } 
-    catch (IOException ex) {
-      throw new InternalGemFireException(LocalizedStrings.DirectChannel_UNKNOWN_ERROR_SERIALIZING_MESSAGE.toLocalizedString(), ex);
-    }
-    finally {
+    } catch (IOException ex) {
+      throw new InternalGemFireException(
+          LocalizedStrings.DirectChannel_UNKNOWN_ERROR_SERIALIZING_MESSAGE.toLocalizedString(), ex);
+    } finally {
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
