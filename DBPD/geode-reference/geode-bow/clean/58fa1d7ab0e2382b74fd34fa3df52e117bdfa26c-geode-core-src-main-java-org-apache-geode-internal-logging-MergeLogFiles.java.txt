Merge remote-tracking branch 'upstream/develop' into develop

-import static org.apache.commons.lang.SystemUtils.LINE_SEPARATOR;
+import static org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR;
+import org.apache.geode.LogWriter;
- * {@link org.apache.geode.LogWriter} together, sorting them by their timestamp. Note that
- * this program assumes that the entries in the individual log files are themselves sorted by
- * timestamp.
+ * {@link LogWriter} together, sorting them by their timestamp. Note that this program assumes that
+ * the entries in the individual log files are themselves sorted by timestamp.
- *
- *
-  private static PrintStream out = System.out;
-  private static PrintStream err = System.err;
+
+  private static final PrintStream out = System.out;
+  private static final PrintStream err = System.err;
-   * <code>PrinWriter</code>.
+   * <code>PrintWriter</code>.
-  public static boolean mergeLogFiles(Map<String, InputStream> logFiles, PrintWriter mergedFile) {
+  public static boolean mergeLogFiles(final Map<String, InputStream> logFiles,
+      final PrintWriter mergedFile) {
-   * <code>PrinWriter</code>.
+   * <code>PrintWriter</code>.
-  public static boolean mergeLogFiles(Map<String, InputStream> logFiles,
-      PrintWriter mergedFile, boolean tabOut, boolean suppressBlanks, boolean multithreaded,
-      List<String> patterns) {
-    return Sorter.mergeLogFiles(logFiles, mergedFile, tabOut, suppressBlanks,
-        multithreaded, patterns);
+  public static boolean mergeLogFiles(final Map<String, InputStream> logFiles,
+      final PrintWriter mergedFile, final boolean tabOut, final boolean suppressBlanks,
+      final boolean multithreaded, final List<String> patterns) {
+    return Sorter.mergeLogFiles(logFiles, mergedFile, tabOut, suppressBlanks, multithreaded,
+        patterns);
-
-  // ////////////////// Main Program ////////////////////
-
-  private static void usage(String s) {
+  private static void usage(final String s) {
-    // err.println("-regex pattern Case-insensitive search for a regular expression.");
-    // err.println(" May be used multiple times. Use Java regular ");
-    // err.println(" expression syntax (see java.util.regex.Pattern).");
-    err.println("");
+    err.println();
-    err.println("");
+    err.println();
-    err.println("");
+    err.println();
-  static ArrayList<File> getLogFiles(String dirName) {
+  static ArrayList<File> getLogFiles(final String dirName) {
-  public static void main(String[] args) throws IOException {
+  public static void main(final String... args) throws IOException {
-    List<String> patterns = new LinkedList();
+    List<String> patterns = new LinkedList<>();
-      if (findPIDs && (nickNames.get(i) != null)) {
+      if (findPIDs && nickNames.get(i) != null) {
-  ////////////////////// Inner Classes //////////////////////
-
-  private static ArrayList findPIDs(ArrayList files, PrintWriter output) {
+  private static ArrayList findPIDs(final ArrayList files, final PrintWriter output) {
-    // System.out.println("findPids() invoked");
-
-      // System.out.println("considering " + name);
-          // System.out.println("no number found in directory name");
-          // see if this is a hydra-generated test directory name, like
-          // parReg-0504-161349
+          // see if this is a hydra-generated test directory name, like parReg-0504-161349
-          // System.out.println("using directory name: '" + name.substring(0, startIdx+1) + "'");
-          // System.out.println("using file name: '" + name.substring(0,startIdx+1) + "'");
-        // else {
-        // System.out.println("could not find a PID");
-        // }
-      // find the string of numbers at the end of the test area and use it
-      // as a PID
-      String PID = null;
+      // find the string of numbers at the end of the test area and use it as a PID
+      String PID;
-          if (i < (name.length() - 1)) { // have a number
+          if (i < name.length() - 1) { // have a number
-              int iPID = Integer.valueOf(PID).intValue();
+              int iPID = Integer.valueOf(PID);
+
-
-    /** The maximum size of the entry queue */
-    // private static int QUEUE_CAPACITY = 1000;
-
-    //////////////////// Instance Methods ////////////////////
-
-    private String logFileName;
+    private final String logFileName;
-    /** whether to suppress blank lines */
-    // private boolean suppressBlanks;
-
-    /** whether to align non-timestamped lines with timestamped lines */
-    // private boolean tabOut;
-
-    private LogFileParser parser;
+    private final LogFileParser parser;
-    private List<Pattern> patterns;
-
-    //////////////////// Constructors ////////////////////
+    private final List<Pattern> patterns;
-    public NonThreadedReader(InputStream logFile, String logFileName, ThreadGroup group,
-        boolean tabOut, boolean suppressBlanks, List<Pattern> patterns) {
-      // super(group, "Reader for " + ((logFileName != null) ? logFileName : logFile.toString()));
+    public NonThreadedReader(final InputStream logFile, final String logFileName,
+        final ThreadGroup group, final boolean tabOut, final boolean suppressBlanks,
+        final List<Pattern> patterns) {
-      // this.suppressBlanks = suppressBlanks;
-      // this.tabOut = tabOut;
-      this.parser = new LogFileParser(this.logFileName, this.logFile, tabOut, suppressBlanks);
+      parser = new LogFileParser(this.logFileName, this.logFile, tabOut, suppressBlanks);
+    @Override
-      return this.logFileName;
+      return logFileName;
-    public void setUniqueId(int id) {
+    @Override
+    public void setUniqueId(final int id) {
+    @Override
+    @Override
-      while (this.nextEntry == null) {
+      while (nextEntry == null) {
-    private boolean patternMatch(LogFileParser.LogEntry entry) {
-      if (this.patterns == null || this.patterns.isEmpty()) {
+    private boolean patternMatch(final LogFileParser.LogEntry entry) {
+      if (patterns == null || patterns.isEmpty()) {
+    @Override
-      if (this.nextEntry != null) {
-        returnValue = this.nextEntry;
+      if (nextEntry != null) {
+        returnValue = nextEntry;
-    private static int QUEUE_CAPACITY = 1000;
-
-    //////////////////// Instance Methods ////////////////////
+    private static final int QUEUE_CAPACITY = 1000;
-    private String logFileName;
+    private final String logFileName;
-    private BlockingQueue queue;
+    private final BlockingQueue queue;
-    private boolean suppressBlanks;
+    private final boolean suppressBlanks;
-    private boolean tabOut;
+    private final boolean tabOut;
-    private List<Pattern> patterns;
-
-    //////////////////// Constructors ////////////////////
+    private final List<Pattern> patterns;
-     *
-     * @param patterns TODO
-     *
-     * @see #run
-    public ThreadedReader(InputStream logFile, String logFileName, ThreadGroup group,
-        boolean tabOut, boolean suppressBlanks, List<Pattern> patterns) {
-      // super(group, "Reader for " + ((logFileName != null) ? logFileName : logFile.toString()));
+    public ThreadedReader(final InputStream logFile, final String logFileName,
+        final ThreadGroup group, final boolean tabOut, final boolean suppressBlanks,
+        final List<Pattern> patterns) {
-      this.queue = new LinkedBlockingQueue(QUEUE_CAPACITY);
-      // new UnsharedMessageQueue(QUEUE_CAPACITY,
-      // (75 * QUEUE_CAPACITY) / 100);
+      queue = new LinkedBlockingQueue(QUEUE_CAPACITY);
-      this.start();
+      start();
+    @Override
-      return this.logFileName;
+      return logFileName;
-    public void setUniqueId(int id) {
+    @Override
+    public void setUniqueId(final int id) {
+    @Override
-          new LogFileParser(this.logFileName, this.logFile, tabOut, suppressBlanks);
+          new LogFileParser(logFileName, logFile, tabOut, suppressBlanks);
-            this.queue.put(entry);
+            queue.put(entry);
-              this.notify();
+              notify();
-    private boolean patternMatch(LogFileParser.LogEntry entry) {
-      if (this.patterns == null || this.patterns.isEmpty()) {
+    private boolean patternMatch(final LogFileParser.LogEntry entry) {
+      if (patterns == null || patterns.isEmpty()) {
+    @Override
-      // out.println(this.getName() + " size " + this.queue.size());
-      LogFileParser.LogEntry entry = (LogFileParser.LogEntry) this.queue.peek();
+      LogFileParser.LogEntry entry = (LogFileParser.LogEntry) queue.peek();
-          entry = (LogFileParser.LogEntry) this.queue.peek();
+          entry = (LogFileParser.LogEntry) queue.peek();
-              this.wait();
-              entry = (LogFileParser.LogEntry) this.queue.peek();
+              wait();
+              entry = (LogFileParser.LogEntry) queue.peek();
+    @Override
-      return (LogFileParser.LogEntry) this.queue.poll();
+      return (LogFileParser.LogEntry) queue.poll();
+
-    ReaderGroup(String groupName) {
+    ReaderGroup(final String groupName) {
-      this.exceptionOccurred = false;
+      exceptionOccurred = false;
-    public void uncaughtException(Thread t, Throwable e) {
+    public void uncaughtException(final Thread t, final Throwable e) {
-      this.exceptionOccurred = true;
+      exceptionOccurred = true;
-      return this.exceptionOccurred;
+      return exceptionOccurred;
-     * @param patterns TODO
-    public static boolean mergeLogFiles(Map<String, InputStream> logFiles,
-        PrintWriter mergedFile, boolean tabOut, boolean suppressBlanks, boolean multithreaded,
-        List<String> patterns) {
-      List<Pattern> compiledPatterns = new LinkedList<Pattern>();
+    public static boolean mergeLogFiles(final Map<String, InputStream> logFiles,
+        final PrintWriter mergedFile, final boolean tabOut, final boolean suppressBlanks,
+        final boolean multithreaded, final List<String> patterns) {
+      List<Pattern> compiledPatterns = new LinkedList<>();
-        Reader oldest = null;
+        Reader oldest;
-        Reader nextInLine = null;
+        Reader nextInLine;
-        LogFileParser.LogEntry entry = null;
+        LogFileParser.LogEntry entry;
-    private static Set sortReaders(Collection readers) {
+    private static Set sortReaders(final Collection readers) {
-
-    public int compare(Object o1, Object o2) {
+    @Override
+    public int compare(final Object o1, final Object o2) {
-
