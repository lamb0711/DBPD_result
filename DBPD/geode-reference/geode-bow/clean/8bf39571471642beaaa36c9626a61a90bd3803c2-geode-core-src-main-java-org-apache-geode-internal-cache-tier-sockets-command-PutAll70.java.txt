Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
-  private PutAll70() {
-  }
-  
+
+  private PutAll70() {}
+
-  throws IOException, InterruptedException {
-    long start = startp;  // copy this since we need to modify it
+      throws IOException, InterruptedException {
+    long start = startp; // copy this since we need to modify it
-    
+
-    
+
-    
+
-      
+
-        String putAllMsg = LocalizedStrings.PutAll_THE_INPUT_REGION_NAME_FOR_THE_PUTALL_REQUEST_IS_NULL.toLocalizedString();
+        String putAllMsg =
+            LocalizedStrings.PutAll_THE_INPUT_REGION_NAME_FOR_THE_PUTALL_REQUEST_IS_NULL
+                .toLocalizedString();
-        writeErrorResponse(msg, MessageType.PUT_DATA_ERROR,
-            errMessage.toString(), servConn);
+        writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
+      LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
-      ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart
-          .getSerializedForm());
-      long threadId = EventID
-      .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-      long sequenceId = EventID
-      .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-      EventID eventId = new EventID(servConn.getEventMemberIDByteArray(),
-          threadId, sequenceId);
-      
+      ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
+      long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+      long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+      EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
+
-      
+
-      
+
-//    Map isObjectMap = new LinkedHashMap();
-      for (int i=0; i<numberOfKeys; i++) {
-        keyPart = msg.getPart(4+i*2);
+      // Map isObjectMap = new LinkedHashMap();
+      for (int i = 0; i < numberOfKeys; i++) {
+        keyPart = msg.getPart(4 + i * 2);
-          String putAllMsg = LocalizedStrings.PutAll_ONE_OF_THE_INPUT_KEYS_FOR_THE_PUTALL_REQUEST_IS_NULL.toLocalizedString();
+          String putAllMsg =
+              LocalizedStrings.PutAll_ONE_OF_THE_INPUT_KEYS_FOR_THE_PUTALL_REQUEST_IS_NULL
+                  .toLocalizedString();
-          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR,
-              errMessage.toString(), servConn);
+          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-        
-        valuePart = msg.getPart(4+i*2+1);
+
+        valuePart = msg.getPart(4 + i * 2 + 1);
-          String putAllMsg = LocalizedStrings.PutAll_ONE_OF_THE_INPUT_VALUES_FOR_THE_PUTALL_REQUEST_IS_NULL.toLocalizedString();
+          String putAllMsg =
+              LocalizedStrings.PutAll_ONE_OF_THE_INPUT_VALUES_FOR_THE_PUTALL_REQUEST_IS_NULL
+                  .toLocalizedString();
-          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage
-              .toString(), servConn);
+          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-        
-//      byte[] value = valuePart.getSerializedForm();
+
+        // byte[] value = valuePart.getSerializedForm();
-          // Also, this code is using skipCallbacks as an import flag. If we make 
+          // Also, this code is using skipCallbacks as an import flag. If we make
-//      put serializedform for auth. It will be modified with auth callback
+        // put serializedform for auth. It will be modified with auth callback
-          //Constuct the thread id/sequence id information for this element in the
-          //put all map
-          
-          //The sequence id is constructed from the base sequence id and the offset
-          EventID entryEventId= new EventID(eventId, i);
-          
-          //For PRs, the thread id assigned as a fake thread id.
-          if(region instanceof PartitionedRegion) {
+          // Constuct the thread id/sequence id information for this element in the
+          // put all map
+
+          // The sequence id is constructed from the base sequence id and the offset
+          EventID entryEventId = new EventID(eventId, i);
+
+          // For PRs, the thread id assigned as a fake thread id.
+          if (region instanceof PartitionedRegion) {
-            long entryThreadId = ThreadIdentifier.createFakeThreadIDForBulkOp(bucketId, entryEventId.getThreadID());
-            entryEventId = new EventID(entryEventId.getMembershipID(), entryThreadId, entryEventId.getSequenceID());
+            long entryThreadId =
+                ThreadIdentifier.createFakeThreadIDForBulkOp(bucketId, entryEventId.getThreadID());
+            entryEventId = new EventID(entryEventId.getMembershipID(), entryThreadId,
+                entryEventId.getSequenceID());
-            
+
-          if(tag != null) {
+          if (tag != null) {
-          //FIND THE VERSION TAG FOR THIS KEY - but how?  all we have is the
-          //    putAll eventId, not individual eventIds for entries, right?
+          // FIND THE VERSION TAG FOR THIS KEY - but how? all we have is the
+          // putAll eventId, not individual eventIds for entries, right?
-//      isObjectMap.put(key, new Boolean(isObject));
+        // isObjectMap.put(key, new Boolean(isObject));
-      
-      if ( msg.getNumberOfParts() == ( 4 + 2*numberOfKeys + 1) ) {//it means optional timeout has been added
-        int timeout = msg.getPart(4 + 2*numberOfKeys).getInt();
+
+      if (msg.getNumberOfParts() == (4 + 2 * numberOfKeys + 1)) {// it means optional timeout has
+                                                                 // been added
+        int timeout = msg.getPart(4 + 2 * numberOfKeys).getInt();
-        }
-        else {
-          PutAllOperationContext putAllContext = authzRequest.putAllAuthorize(
-              regionName, map, null);
+        } else {
+          PutAllOperationContext putAllContext =
+              authzRequest.putAllAuthorize(regionName, map, null);
-         Collection entries = map.entrySet();
-         Iterator iterator = entries.iterator();
-         Map.Entry mapEntry = null;
-         while (iterator.hasNext()) {
-         mapEntry = (Map.Entry)iterator.next();
-         Object currkey = mapEntry.getKey();
-         byte[] serializedValue = (byte[])mapEntry.getValue();
-         boolean isObject = ((Boolean)isObjectMap.get(currkey)).booleanValue();
-         if (isObject) {
-         map.put(currkey, CachedDeserializableFactory.create(serializedValue));
-         }
-         }
+         * Collection entries = map.entrySet(); Iterator iterator = entries.iterator(); Map.Entry
+         * mapEntry = null; while (iterator.hasNext()) { mapEntry = (Map.Entry)iterator.next();
+         * Object currkey = mapEntry.getKey(); byte[] serializedValue = (byte[])mapEntry.getValue();
+         * boolean isObject = ((Boolean)isObjectMap.get(currkey)).booleanValue(); if (isObject) {
+         * map.put(currkey, CachedDeserializableFactory.create(serializedValue)); } }
-      
+
-        logger.debug("{}: Received putAll request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
+        logger.debug("{}: Received putAll request ({} bytes) from {} for region {}",
+            servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
-      
-      response = region.basicBridgePutAll(map, retryVersions, servConn.getProxyID(), eventId, skipCallbacks, null);
+
+      response = region.basicBridgePutAll(map, retryVersions, servConn.getProxyID(), eventId,
+          skipCallbacks, null);
-      
+
-        PartitionedRegion pr = (PartitionedRegion)region;
+        PartitionedRegion pr = (PartitionedRegion) region;
-    } 
-    catch (RegionDestroyedException rde) {
+    } catch (RegionDestroyedException rde) {
-    }
-    catch (ResourceException re) {
+    } catch (ResourceException re) {
-    }
-    catch (PutAllPartialResultException pre) {
+    } catch (PutAllPartialResultException pre) {
-    }
-    catch (Exception ce) {
+    } catch (Exception ce) {
-      
+
-      logger.warn(LocalizedMessage.create(LocalizedStrings.Generic_0_UNEXPECTED_EXCEPTION, servConn.getName()), ce);
+      logger.warn(LocalizedMessage.create(LocalizedStrings.Generic_0_UNEXPECTED_EXCEPTION,
+          servConn.getName()), ce);
-    }
-    finally {
+    } finally {
-      logger.debug("{}: Sending putAll70 response back to {} for region {}: {}", servConn.getName(), servConn.getSocketString(), regionName, response);
+      logger.debug("{}: Sending putAll70 response back to {} for region {}: {}", servConn.getName(),
+          servConn.getSocketString(), regionName, response);
-    if (response != null
-        && Version.GFE_70.compareTo(servConn.getClientVersion()) < 0) {
+    if (response != null && Version.GFE_70.compareTo(servConn.getClientVersion()) < 0) {
-    
+
-  
+
-  protected void writeReply(Message origMsg, ServerConnection servConn)
-  throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection servConn) throws IOException {
-  
-  
+
+
-  protected void writeReplyWithRefreshMetadata(Message origMsg,
-      ServerConnection servConn, PartitionedRegion pr, byte nwHop) throws IOException {
+  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection servConn,
+      PartitionedRegion pr, byte nwHop) throws IOException {
-  
-  private void writeReplyWithRefreshMetadata(Message origMsg,
-      VersionedObjectList response, ServerConnection servConn,
-      PartitionedRegion pr, byte nwHop) throws IOException {
+
+  private void writeReplyWithRefreshMetadata(Message origMsg, VersionedObjectList response,
+      ServerConnection servConn, PartitionedRegion pr, byte nwHop) throws IOException {
-    replyMsg.addBytesPart(new byte[]{pr.getMetadataVersion(), nwHop});
+    replyMsg.addBytesPart(new byte[] {pr.getMetadataVersion(), nwHop});
-      logger.trace("{}: rpl with REFRESH_METADAT tx: {}", servConn.getName(), origMsg.getTransactionId());
+      logger.trace("{}: rpl with REFRESH_METADAT tx: {}", servConn.getName(),
+          origMsg.getTransactionId());
