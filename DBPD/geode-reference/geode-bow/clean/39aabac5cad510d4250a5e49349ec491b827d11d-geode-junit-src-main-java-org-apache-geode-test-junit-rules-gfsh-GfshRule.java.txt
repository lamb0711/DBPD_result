Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-package org.apache.geode.test.dunit.rules.gfsh;
+package org.apache.geode.test.junit.rules.gfsh;
+import java.io.UncheckedIOException;
-import org.apache.geode.management.internal.cli.commands.StatusLocatorRealGfshTest;
-import org.apache.geode.management.internal.cli.util.CommandStringBuilder;
-import org.apache.geode.test.dunit.rules.RequiresGeodeHome;
+import org.apache.geode.test.junit.rules.RequiresGeodeHome;
- * binaries. For a usage example, see {@link StatusLocatorRealGfshTest}. Each call to
- * {@link GfshRule#execute(GfshScript)} will invoke the given gfsh script in a forked JVM. The
- * {@link GfshRule#after()} method will attempt to clean up all forked JVMs.
+ * binaries. Each call to {@link GfshRule#execute(GfshScript)} will invoke the given gfsh script in
+ * a forked JVM. The {@link GfshRule#after()} method will attempt to clean up all forked JVMs.
-  public TemporaryFolder getTemporaryFolder() {
-    return temporaryFolder;
-  }
+
+  private static final String DOUBLE_QUOTE = "\"";
-  public GfshExecution execute(String... commands) {
-    return execute(GfshScript.of(commands));
-  }
-
-  public GfshExecution execute(GfshScript gfshScript) {
-    GfshExecution gfshExecution;
-    try {
-      File workingDir = temporaryFolder.newFolder(gfshScript.getName());
-      Process process = toProcessBuilder(gfshScript, gfsh, workingDir).start();
-      gfshExecution = new GfshExecution(process, workingDir);
-      gfshExecutions.add(gfshExecution);
-      gfshScript.awaitIfNecessary(process);
-    } catch (IOException e) {
-      throw new RuntimeException(e);
-    }
-
-    return gfshExecution;
-  }
-
+  public TemporaryFolder getTemporaryFolder() {
+    return temporaryFolder;
+  }
+
+  public GfshExecution execute(String... commands) {
+    return execute(GfshScript.of(commands));
+  }
+
+  public GfshExecution execute(GfshScript gfshScript) {
+    GfshExecution gfshExecution;
+    try {
+      File workingDir = new File(temporaryFolder.getRoot(), gfshScript.getName());
+      workingDir.mkdirs();
+      Process process = toProcessBuilder(gfshScript, gfsh, workingDir).start();
+      gfshExecution = new GfshExecution(process, workingDir);
+      gfshExecutions.add(gfshExecution);
+      gfshScript.awaitIfNecessary(process);
+    } catch (IOException e) {
+      throw new UncheckedIOException(e);
+    }
+
+    return gfshExecution;
+  }
+
-    String stopServerCommand =
-        new CommandStringBuilder("stop server").addOption("dir", dir).toString();
+    String stopServerCommand = "stop server --dir=" + quoteArgument(dir.toString());
-    String stopLocatorCommand =
-        new CommandStringBuilder("stop locator").addOption("dir", dir).toString();
+    String stopLocatorCommand = "stop locator --dir=" + quoteArgument(dir.toString());
+  private String quoteArgument(String argument) {
+    if (!argument.startsWith(DOUBLE_QUOTE)) {
+      argument = DOUBLE_QUOTE + argument;
+    }
+
+    if (!argument.endsWith(DOUBLE_QUOTE)) {
+      argument = argument + DOUBLE_QUOTE;
+    }
+
+    return argument;
+  }
