GEODE-4379: Move RemoteOutputStreamServer from gfsh to the manager (#1341)

* GEODE-4379: Move RemoteOutputStreamServer from gfsh to the manager

- This flips the deployment of jars from a pull (by server) to a push (from
  gfsh).

* GEODE-4379: Update sanctioned-geode-core-serializables.txt for FileUploader$RemoteFile

+import java.io.BufferedOutputStream;
-import java.io.InputStream;
+import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Map;
-import com.healthmarketscience.rmiio.RemoteInputStream;
-import com.healthmarketscience.rmiio.RemoteInputStreamClient;
+import com.healthmarketscience.rmiio.RemoteOutputStream;
+import com.healthmarketscience.rmiio.RemoteOutputStreamMonitor;
+import com.healthmarketscience.rmiio.RemoteOutputStreamServer;
+import com.healthmarketscience.rmiio.SimpleRemoteOutputStream;
+import com.healthmarketscience.rmiio.exporter.RemoteStreamExporter;
-import org.apache.commons.io.IOUtils;
+  private RemoteStreamExporter exporter;
+
+  public static class RemoteFile implements Serializable {
+    private String filename;
+    private RemoteOutputStream outputStream;
+
+    public RemoteFile(String filename, RemoteOutputStream outputStream) {
+      this.filename = filename;
+      this.outputStream = outputStream;
+    }
+
+    public String getFilename() {
+      return filename;
+    }
+
+    public RemoteOutputStream getOutputStream() {
+      return outputStream;
+    }
+  }
+
+  public FileUploader(RemoteStreamExporter exporter) {
+    this.exporter = exporter;
+  }
-  public List<String> uploadFile(Map<String, RemoteInputStream> remoteFiles) throws IOException {
-    List<String> stagedFiles = new ArrayList<>();
-
+  public RemoteFile uploadFile(String filename) throws IOException {
-    for (String filename : remoteFiles.keySet()) {
-      File stagedFile = new File(tempDir.toString(), filename);
-      FileOutputStream fos = new FileOutputStream(stagedFile);
+    File stagedFile = new File(tempDir.toString(), filename);
+    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(stagedFile));
-      InputStream input = RemoteInputStreamClient.wrap(remoteFiles.get(filename));
-      IOUtils.copyLarge(input, fos);
+    RemoteOutputStreamMonitor monitor = new RemoteOutputStreamMonitor() {
+      @Override
+      public void closed(RemoteOutputStreamServer stream, boolean clean) {
+        try {
+          stream.close(true);
+        } catch (IOException e) {
+          logger.error("error closing RemoteOutputStreamServer", e);
+        }
+      }
+    };
-      fos.close();
-      input.close();
+    RemoteOutputStreamServer server = new SimpleRemoteOutputStream(bos, monitor);
+    RemoteOutputStream remoteStream = exporter.export(server);
-      stagedFiles.add(stagedFile.getAbsolutePath());
-    }
+    RemoteFile remoteFile = new RemoteFile(stagedFile.getAbsolutePath(), remoteStream);
-    return stagedFiles;
+    return remoteFile;
-    Path parent = Paths.get(files.get(0)).getParent();
-    if (!parent.getFileName().toString().startsWith(STAGED_DIR_PREFIX)) {
-      throw new GemFireSecurityException(
-          String.format("Cannot delete %s, not in the uploaded directory.", files.get(0)));
-    }
-    try {
-      FileUtils.deleteDirectory(parent.toFile());
-    } catch (IOException e) {
-      logger.error(e.getMessage(), e);
+    for (String filename : files) {
+      File file = new File(filename);
+      File parent = file.getParentFile();
+
+      if (!parent.getName().startsWith(STAGED_DIR_PREFIX)) {
+        throw new GemFireSecurityException(
+            String.format("Cannot delete %s, not in the uploaded directory.", filename));
+      }
+
+      FileUtils.deleteQuietly(file);
+      FileUtils.deleteQuietly(parent);
