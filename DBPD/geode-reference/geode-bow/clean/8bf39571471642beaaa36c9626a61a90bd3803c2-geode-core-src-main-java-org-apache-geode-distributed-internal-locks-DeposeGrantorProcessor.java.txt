Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A processor for telling the old grantor that he is deposed by a new grantor. 
- * Processor waits for ack before completing.
+ * A processor for telling the old grantor that he is deposed by a new grantor. Processor waits for
+ * ack before completing.
- * @since GemFire 4.0
- * (renamed from ExpectTransferProcessor)
+ * @since GemFire 4.0 (renamed from ExpectTransferProcessor)
-  
+
-  
+
-   * Send a message to oldGrantor telling him that he is deposed by newGrantor. 
-   * Send does not complete until an ack is received or the oldGrantor leaves
-   *  the system.
+   * Send a message to oldGrantor telling him that he is deposed by newGrantor. Send does not
+   * complete until an ack is received or the oldGrantor leaves the system.
-  static void send(String serviceName, 
-                   InternalDistributedMember oldGrantor,
-                   InternalDistributedMember newGrantor, 
-                   long newGrantorVersion,
-                   int newGrantorSerialNumber,
-                   DM dm) {
+  static void send(String serviceName, InternalDistributedMember oldGrantor,
+      InternalDistributedMember newGrantor, long newGrantorVersion, int newGrantorSerialNumber,
+      DM dm) {
-      doOldGrantorWork(
-          serviceName, elder, newGrantor, newGrantorVersion, newGrantorSerialNumber, dm, null);
+      doOldGrantorWork(serviceName, elder, newGrantor, newGrantorVersion, newGrantorSerialNumber,
+          dm, null);
-      DeposeGrantorProcessor processor = 
-          new DeposeGrantorProcessor(dm, oldGrantor);
-      DeposeGrantorMessage.send(
-          serviceName, oldGrantor, newGrantor, newGrantorVersion, newGrantorSerialNumber, dm, processor);
+      DeposeGrantorProcessor processor = new DeposeGrantorProcessor(dm, oldGrantor);
+      DeposeGrantorMessage.send(serviceName, oldGrantor, newGrantor, newGrantorVersion,
+          newGrantorSerialNumber, dm, processor);
+
-                                         final InternalDistributedMember elder,
-                                         final InternalDistributedMember youngTurk,
-                                         final long newGrantorVersion,
-                                         final int newGrantorSerialNumber,
-                                         final DM dm,
-                                         final DeposeGrantorMessage msg) {
+      final InternalDistributedMember elder, final InternalDistributedMember youngTurk,
+      final long newGrantorVersion, final int newGrantorSerialNumber, final DM dm,
+      final DeposeGrantorMessage msg) {
-      DLockService svc = 
-        DLockService.getInternalServiceNamed(serviceName);
+      DLockService svc = DLockService.getInternalServiceNamed(serviceName);
-        LockGrantorId newLockGrantorId = 
+        LockGrantorId newLockGrantorId =
-    }
-    finally {
+    } finally {
-  
-  ////////////  Instance methods //////////////
-  
-  /** Creates a new instance of DeposeGrantorProcessor
+
+  //////////// Instance methods //////////////
+
+  /**
+   * Creates a new instance of DeposeGrantorProcessor
-  
-  ///////////////   Inner message classes  //////////////////
-  
-  public static final class DeposeGrantorMessage
-    extends PooledDistributionMessage implements MessageWithReply
-  {
+
+  /////////////// Inner message classes //////////////////
+
+  public static final class DeposeGrantorMessage extends PooledDistributionMessage
+      implements MessageWithReply {
-    
-    protected static void send(String serviceName,
-                             InternalDistributedMember oldGrantor,
-                             InternalDistributedMember newGrantor,
-                             long newGrantorVersion,
-                             int newGrantorSerialNumber,
-                             DM dm, 
-                             ReplyProcessor21 proc)
-    {
+
+    protected static void send(String serviceName, InternalDistributedMember oldGrantor,
+        InternalDistributedMember newGrantor, long newGrantorVersion, int newGrantorSerialNumber,
+        DM dm, ReplyProcessor21 proc) {
-  
+
-      ReplyMessage.send(this.getSender(), this.getProcessorId(),
-                        null, dm);
+      ReplyMessage.send(this.getSender(), this.getProcessorId(), null, dm);
-    
+
-      
+
-      doOldGrantorWork(
-          this.serviceName, elder, youngTurk, this.newGrantorVersion, this.newGrantorSerialNumber, dm, this);
+      doOldGrantorWork(this.serviceName, elder, youngTurk, this.newGrantorVersion,
+          this.newGrantorSerialNumber, dm, this);
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.newGrantor = (InternalDistributedMember)DataSerializer.readObject(in);
+      this.newGrantor = (InternalDistributedMember) DataSerializer.readObject(in);
-    
+
-    
+
-      buff.append("DeposeGrantorMessage (serviceName='")
-        .append(this.serviceName)
-        .append("' processorId=")
-        .append(this.processorId)
-        .append(" newGrantor=")
-        .append(this.newGrantor)
-        .append(" newGrantorVersion=")
-        .append(this.newGrantorVersion)
-        .append(" newGrantorSerialNumber=")
-        .append(this.newGrantorSerialNumber)
-        .append(")");
+      buff.append("DeposeGrantorMessage (serviceName='").append(this.serviceName)
+          .append("' processorId=").append(this.processorId).append(" newGrantor=")
+          .append(this.newGrantor).append(" newGrantorVersion=").append(this.newGrantorVersion)
+          .append(" newGrantorSerialNumber=").append(this.newGrantorSerialNumber).append(")");
