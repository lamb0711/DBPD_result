Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * GemFireCache represents the singleton cache that must be created
- * in order to use GemFire in a Java virtual machine.
- * Users must create either a {@link Cache} for a peer/server JVM
- * or a {@link ClientCache} for a client JVM.
- * Instances of this interface are created using one of the following methods:
+ * GemFireCache represents the singleton cache that must be created in order to use GemFire in a
+ * Java virtual machine. Users must create either a {@link Cache} for a peer/server JVM or a
+ * {@link ClientCache} for a client JVM. Instances of this interface are created using one of the
+ * following methods:
- * <li> {@link CacheFactory#create()} creates a peer/server instance of {@link Cache}.
- * <li> {@link ClientCacheFactory#create()} creates a client instance of {@link ClientCache}.
+ * <li>{@link CacheFactory#create()} creates a peer/server instance of {@link Cache}.
+ * <li>{@link ClientCacheFactory#create()} creates a client instance of {@link ClientCache}.
-  /** Returns the name of this cache.
-   * This method does not throw
-   * <code>CacheClosedException</code> if the cache is closed.
+  /**
+   * Returns the name of this cache. This method does not throw <code>CacheClosedException</code> if
+   * the cache is closed.
+   * 
+
-   * Returns the distributed system used by this cache.
-   * This method does not throw
+   * Returns the distributed system used by this cache. This method does not throw
+
-   * Returns the <code>ResourceManager</code> for managing this cache's 
-   * resources.
+   * Returns the <code>ResourceManager</code> for managing this cache's resources.
-   * Returns the <code>RegionAttributes</code> with the given
-   * <code>id</code> or <code>null</code> if no
-   * <code>RegionAttributes</code> with that id exists.
+   * Returns the <code>RegionAttributes</code> with the given <code>id</code> or <code>null</code>
+   * if no <code>RegionAttributes</code> with that id exists.
-  public <K,V> RegionAttributes<K,V> getRegionAttributes(String id);
+  public <K, V> RegionAttributes<K, V> getRegionAttributes(String id);
-   * Sets the <code>id</code> of the given
-   * <code>RegionAttributes</code>.  If a region attributes named
-   * <code>name</code> already exists, the mapping will be overwritten
-   * with <code>attrs</code>.  However, changing the mapping will not
-   * effect existing regions.
+   * Sets the <code>id</code> of the given <code>RegionAttributes</code>. If a region attributes
+   * named <code>name</code> already exists, the mapping will be overwritten with
+   * <code>attrs</code>. However, changing the mapping will not effect existing regions.
-   * @param id
-   *        The id of the region attributes
-   * @param attrs
-   *        The attributes to associate with <code>id</code>.  If
-   *        <code>attrs</code> is <code>null</code>, any existing
-   *        <code>RegionAttributes</code> associated with
+   * @param id The id of the region attributes
+   * @param attrs The attributes to associate with <code>id</code>. If <code>attrs</code> is
+   *        <code>null</code>, any existing <code>RegionAttributes</code> associated with
-  public <K,V> void setRegionAttributes(String id, RegionAttributes<K,V> attrs);
+  public <K, V> void setRegionAttributes(String id, RegionAttributes<K, V> attrs);
-   * Returns an unmodifiable mapping of ids to region attributes.  The
-   * keys of the map are {@link String}s and the values of the map are
-   * {@link RegionAttributes}.
+   * Returns an unmodifiable mapping of ids to region attributes. The keys of the map are
+   * {@link String}s and the values of the map are {@link RegionAttributes}.
-  public <K,V> Map<String, RegionAttributes<K,V>> listRegionAttributes();
+  public <K, V> Map<String, RegionAttributes<K, V>> listRegionAttributes();
-   * Loads the cache configuration described in a <a
-   * href="package-summary.html#declarative">declarative caching XML
-   * file</a> into this cache.  If the XML describes a region that
-   * already exists, any mutable region attributes, indexes, and
+   * Loads the cache configuration described in a
+   * <a href="package-summary.html#declarative">declarative caching XML file</a> into this cache. If
+   * the XML describes a region that already exists, any mutable region attributes, indexes, and
-   * <code>Region</code>, it declares that it throws a
-   * <code>TimeoutException</code>, <code>CacheWriterException</code>,
-   * <code>GatewayException</code>,
-   * or <code>RegionExistsException</code>.
+   * <code>Region</code>, it declares that it throws a <code>TimeoutException</code>,
+   * <code>CacheWriterException</code>, <code>GatewayException</code>, or
+   * <code>RegionExistsException</code>.
-   * @throws CacheXmlException
-   *         If the XML read from <code>is</code> does not conform to
-   *         the dtd or if an <code>IOException</code> occurs while
-   *         reading the XML.
+   * @throws CacheXmlException If the XML read from <code>is</code> does not conform to the dtd or
+   *         if an <code>IOException</code> occurs while reading the XML.
-  public void loadCacheXml(InputStream is) 
-    throws TimeoutException, CacheWriterException,
-           GatewayException,
-           RegionExistsException;
+  public void loadCacheXml(InputStream is)
+      throws TimeoutException, CacheWriterException, GatewayException, RegionExistsException;
-   * Gets the logging object for GemFire.
-   * This method does not throw
+   * Gets the logging object for GemFire. This method does not throw
+   * 
-   * Gets the security logging object for GemFire.
-   * This method does not throw
+   * Gets the security logging object for GemFire. This method does not throw
+   * 
-   * @param name the name of the disk store to find. If <code>null</code> then the
-   * default disk store, if it exists, is returned.
+   * 
+   * @param name the name of the disk store to find. If <code>null</code> then the default disk
+   *        store, if it exists, is returned.
-  
+
-   * create diskstore factory 
+   * create diskstore factory
-  
+
-  
+
+   * 
-  
+
-   * Returns the PdxSerializer used by this cache, or null
-   * if no PDX serializer is defined.
+   * Returns the PdxSerializer used by this cache, or null if no PDX serializer is defined.
-  
+
+   * 
-  
+
-   * Returns true if the PDX metadata for this
-   * cache is persistent
+   * Returns true if the PDX metadata for this cache is persistent
+   * 
+
-   * Returns true if fields that are not read during PDX deserialization
-   * should be ignored during the PDX serialization.
+   * Returns true if fields that are not read during PDX deserialization should be ignored during
+   * the PDX serialization.
+   * 
+
+
-   * @return javax.naming.Context
-   * Added as part of providing JTA implementation in Gemfire.
+   * 
+   * @return javax.naming.Context Added as part of providing JTA implementation in Gemfire.
-   * Returns the Declarable used to initialize this cache or <code>null</code>
-   * if it does not have an initializer.
+   * Returns the Declarable used to initialize this cache or <code>null</code> if it does not have
+   * an initializer.
+   * 
-   * Returns the Properties used to initialize the cache initializer or
-   * <code>null</code> if no initializer properties exist.
+   * Returns the Properties used to initialize the cache initializer or <code>null</code> if no
+   * initializer properties exist.
+   * 
