Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import java.net.DatagramSocket;
+import java.util.Map;
-import java.util.HashMap;
+import java.util.concurrent.locks.ReadWriteLock;
+import com.gemstone.gemfire.distributed.internal.DMStats;
-import com.gemstone.gemfire.distributed.internal.DistributionStats;
-import com.gemstone.gemfire.internal.tcp.Stub;
+import com.gemstone.gemfire.internal.logging.InternalLogWriter;
-  public Object getViewLock();
+  public ReadWriteLock getViewLock();
-  public boolean memberExists(InternalDistributedMember m);
+  public boolean memberExists(DistributedMember m);
-  /**
-   * Return the underlying proxy object, if any, associated with this
-   * local side of this connection.
-   * 
-   * @return the Stub
-   */
-  public Stub getDirectChannel();
-      DistributionStats stats)
+      DMStats stats)
-   * Force a reset of communication channels
-   *
-   */
-  public void reset();
-  
-  /**
-   * Return a {@link Stub} referring to the given member.  A <em>null</em> may
-   * be returned if the system is not employing stubs for communication.
-   * 
-   * @param m the member
-   * @return the stub
-   */
-  public Stub getStubForMember(InternalDistributedMember m);
-  
-  /**
-   * Return a {@link InternalDistributedMember} associated with the given Stub.  This
-   * method may return a null if Stubs are not being used.
-   * @param s Stub to look up
-   * @param validated true if member must be in the current view
-   * @return the member associated with the given stub, if any
-   */
-  public InternalDistributedMember getMemberForStub(Stub s, boolean validated);
-  
-  
-  /**
-   * Returns a serializable map of communication channel state for
+   * Returns a serializable map of communications state for
-   *    the member whose channel state is to be captured
+   *    the member whose message state is to be captured
-   *    whether the state of the mcast channel should be included
+   *    whether the state of the mcast messaging should be included
-  public HashMap getChannelStates(DistributedMember member, boolean includeMulticast);
+  public Map getMessageState(DistributedMember member, boolean includeMulticast);
-   * Waits for the given communication channels to reach the associated
+   * Waits for the given communications to reach the associated
-   *    The member whose channel state we're waiting for
-   * @param channelState
-   *    The channel states to wait for.  This should come from getChannelStates
+   *    The member whose messaging state we're waiting for
+   * @param state
+   *    The message states to wait for.  This should come from getMessageStates
-  public void waitForChannelState(DistributedMember member, HashMap channelState)
+  public void waitForMessageState(DistributedMember member, Map state)
-  public boolean addSurpriseMember(DistributedMember mbr, Stub stub);
+  public boolean addSurpriseMember(DistributedMember mbr);
+  
+  /**
+   * Returns true if the member is being shunned
+   */
+  public boolean isShunned(DistributedMember m);
-
+  
