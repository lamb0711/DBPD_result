GEODE-6387: Extract MemberLevelStatsTest

MemberLevelStatsIntegrationTest setUp creates a cache, but the majority
of the tests do not even use or require that cache. So, it's a good
idea to extract those to the new unit test MemberLevelStatsTest.

These changes further isolate the testing in MemberLevelStatsTest to
avoid any potential flakiness.

We also clean up MemberLevelStatsIntegrationTest to prevent potential
causes of flakiness, but ultimately GEODE-6387 is now fixed because
only one test remains so it should be impossible for another test to
leave around an incompatible distributed system.

+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.internal.statistics.StatisticsManager;
-  /** Cache Instance **/
-
-  /** Distribution Config **/
-  /** Composite type **/
-
-  /**
-   * Internal distributed system
-   */
-
-  /**
-   * Distribution manager
-   */
+  private StatisticsManager statisticsManager;
-
-  /**
-   * Command Service
-   */
-
-  /**
-   * Reference to JDK bean MemoryMXBean
-   */
-
-  /**
-   * Reference to JDK bean ThreadMXBean
-   */
-
-  /**
-   * Reference to JDK bean RuntimeMXBean
-   */
-
-  /**
-   * Reference to JDK bean OperatingSystemMXBean
-   */
-
-  /**
-   * Host name of the member
-   */
-
-  /**
-   * The member's process id (pid)
-   */
-
-  /**
-   * OS MBean Object name
-   */
-
-  /**
-   * Last CPU usage calculation time
-   */
-
-  /**
-   * Last ProcessCPU time
-   */
+    this.statisticsManager = system.getStatisticsManager();
-  public MemberMBeanBridge() {
+  @VisibleForTesting
+  public MemberMBeanBridge(InternalDistributedSystem system, StatisticsManager statisticsManager) {
-    this.system = InternalDistributedSystem.getConnectedInstance();
+    this.system = system;
+    this.statisticsManager = statisticsManager;
-    addSystemStats();
-    addVMStats();
+    addProcessStats(fetchProcessStats());
+    addStatSamplerStats(fetchStatSamplerStats());
+    addVMStats(fetchVMStats());
-  public void addSystemStats() {
-    GemFireStatSampler sampler = system.getStatSampler();
+  private ProcessStats fetchProcessStats() {
+    return system.getStatSampler().getProcessStats();
+  }
-    ProcessStats processStats = sampler.getProcessStats();
+  private StatSamplerStats fetchStatSamplerStats() {
+    return system.getStatSampler().getStatSamplerStats();
+  }
-    StatSamplerStats samplerStats = sampler.getStatSamplerStats();
+  @VisibleForTesting
+  public void addProcessStats(ProcessStats processStats) {
-    if (samplerStats != null) {
-      systemStatsMonitor.addStatisticsToMonitor(samplerStats.getStats());
+  }
+
+  @VisibleForTesting
+  public void addStatSamplerStats(StatSamplerStats statSamplerStats) {
+    if (statSamplerStats != null) {
+      systemStatsMonitor.addStatisticsToMonitor(statSamplerStats.getStats());
-  public void addVMStats() {
-    VMStatsContract vmStatsContract = system.getStatSampler().getVMStats();
+  private VMStatsContract fetchVMStats() {
+    return system.getStatSampler().getVMStats();
+  }
+  @VisibleForTesting
+  public void addVMStats(VMStatsContract vmStatsContract) {
-        Statistics[] gcStats = system.findStatisticsByType(gcType);
+        Statistics[] gcStats = statisticsManager.findStatisticsByType(gcType);
