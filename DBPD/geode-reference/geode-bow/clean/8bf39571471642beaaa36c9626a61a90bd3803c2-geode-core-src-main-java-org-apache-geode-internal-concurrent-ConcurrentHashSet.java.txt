Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-/**This class is similar to HashSet supporting all the feature
- * of ConcurrentHashMap
+/**
+ * This class is similar to HashSet supporting all the feature of ConcurrentHashMap
-public class ConcurrentHashSet<E> extends AbstractSet<E>  
-  implements Set<E>, Serializable {
+public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E>, Serializable {
-  
+
-  
+
-    map = new ConcurrentHashMap<E,Object>();
+    map = new ConcurrentHashMap<E, Object>();
-  
+
-    map = new ConcurrentHashMap<E,Object>(Math.max((int) (c.size()/.75f) + 1, 16));
+    map = new ConcurrentHashMap<E, Object>(Math.max((int) (c.size() / .75f) + 1, 16));
-  
+
-    map = new ConcurrentHashMap<E,Object>(initialCapacity, loadFactor, concurrencyLevel);
+    map = new ConcurrentHashMap<E, Object>(initialCapacity, loadFactor, concurrencyLevel);
-    map = new ConcurrentHashMap<E,Object>(initialCapacity);
+    map = new ConcurrentHashMap<E, Object>(initialCapacity);
-  
+
-    return map.put(o, PRESENT)==null;
+    return map.put(o, PRESENT) == null;
-  
+
-  
+
-  
+
-  
+
-  
+
-    return map.remove(o)==PRESENT;
+    return map.remove(o) == PRESENT;
-  
-  
+
+
-  
+
