Merge branch 'release/1.8.0'

-import static org.awaitility.Awaitility.await;
+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;
-import java.io.IOException;
+import java.util.ArrayList;
+import org.apache.commons.io.FileUtils;
-import org.junit.rules.TemporaryFolder;
+import org.apache.geode.test.awaitility.GeodeAwaitility;
+ *
+ * The rule will try to clean up the working dir as best as it can. Any first level children
+ * created in the test will be cleaned up after the test.
-
-  protected String oldUserDir;
-
-  protected transient TemporaryFolder temporaryFolder;
-  protected File workingDir;
+  private List<File> firstLevelChildrenFile = new ArrayList<>();
+  private boolean cleanWorkingDir = true;
+
-    oldUserDir = System.getProperty("user.dir");
+    firstLevelChildrenFile = Arrays.asList(getWorkingDir().listFiles());
+    disconnectDSIfAny();
-    disconnectDSIfAny();
-    if (temporaryFolder != null) {
-      temporaryFolder.delete();
-    }
-
-    if (oldUserDir == null) {
-      System.clearProperty("user.dir");
-    } else {
-      System.setProperty("user.dir", oldUserDir);
-    }
+    // delete the first-level children files that are created in the tests
+    if (cleanWorkingDir)
+      Arrays.stream(getWorkingDir().listFiles())
+          // do not delete the pre-existing files
+          .filter(f -> !firstLevelChildrenFile.contains(f))
+          // do not delete the dunit folder that might have been created by dunit launcher
+          .filter(f -> !(f.isDirectory() && f.getName().equals("dunit")))
+          .forEach(FileUtils::deleteQuietly);
-  public T withWorkingDir(File workingDir) {
-    this.workingDir = workingDir;
-    if (workingDir != null) {
-      System.setProperty("user.dir", workingDir.toString());
-    }
-    return (T) this;
-  }
-
-  /**
-   * create a working dir using temporaryFolder. Use with caution, this sets "user.dir" system
-   * property that not approved by JDK
-   */
-  public T withWorkingDir() {
-    temporaryFolder = new TemporaryFolder();
-    try {
-      temporaryFolder.create();
-    } catch (IOException e) {
-      throw new RuntimeException(e.getMessage(), e);
-    }
-    withWorkingDir(temporaryFolder.getRoot().getAbsoluteFile());
-    return (T) this;
-  }
-
+  public void setCleanWorkingDir(boolean cleanWorkingDir) {
+    this.cleanWorkingDir = cleanWorkingDir;
+  }
+
-    await().atMost(1, TimeUnit.MINUTES).until(() -> bean.getClientIds().length == clientCount);
+    await().until(() -> bean.getClientIds().length == clientCount);
-    await().atMost(1, TimeUnit.MINUTES)
+    await()
-   * This method wraps an {@link org.awaitility.Awaitility#await} call for more meaningful error
+   * This method wraps an {@link GeodeAwaitility#await()} call for more meaningful error
-          .atMost(timeout, unit)
-    return workingDir;
+    return new File(System.getProperty("user.dir"));
