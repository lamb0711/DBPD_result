GEODE-5405: Refactor backup to remove duplication and clean up

-public abstract class BackupInspector {
+abstract class BackupInspector {
+
-   * Root directory for a member's backup.
-   */
-  private final File backupDir;
-
-  /**
-  public static BackupInspector createInspector(final File backupDir) throws IOException {
+  static BackupInspector createInspector(final File backupDir) throws IOException {
-    this.backupDir = backupDir;
-
-    String line = null;
-    while (!markerFound && (null != (line = reader.readLine()))) {
+    String line;
+    while (!markerFound && null != (line = reader.readLine())) {
-    return !this.oplogFileNames.isEmpty();
-  }
-
-  /**
-   * @return the backup directory being inspected.
-   */
-  public File getBackupDir() {
-    return this.backupDir;
+    return !oplogFileNames.isEmpty();
-  public String getScriptLineForOplogFile(final String oplogFileName) {
-    return this.oplogLineMap.get(oplogFileName);
+  String getScriptLineForOplogFile(final String oplogFileName) {
+    return oplogLineMap.get(oplogFileName);
-  public Set<String> getIncrementalOplogFileNames() {
-    return Collections.unmodifiableSet(this.oplogFileNames);
+  Set<String> getIncrementalOplogFileNames() {
+    return Collections.unmodifiableSet(oplogFileNames);
-  protected abstract File getRestoreFile(final File backupDir);
+  abstract File getRestoreFile(final File backupDir);
-  public abstract String getCopyToForOplogFile(final String oplogFileName);
+  abstract String getCopyToForOplogFile(final String oplogFileName);
-  public abstract String getCopyFromForOplogFile(final String oplogFileName);
+  abstract String getCopyFromForOplogFile(final String oplogFileName);
-  protected abstract void parseOplogLines(final BufferedReader reader) throws IOException;
+  abstract void parseOplogLines(final BufferedReader reader) throws IOException;
