GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-    /**
-     * Need to save this in case we need the original {@code RequestDispatcher}
-     */
-    private HttpServletRequest originalRequest;
-
-    public RequestWrapper(SessionManager manager, HttpServletRequest request,
+    RequestWrapper(SessionManager manager, HttpServletRequest request,
-      this.originalRequest = request;
-    // Non-API methods
-
-    void setOuterWrapper(HttpServletRequest outer) {
-      this.outerRequest = outer;
-    }
-
-    //////////////////////////////////////////////////////////////
-    public ResponseWrapper(HttpServletResponse response) throws IOException {
+    ResponseWrapper(HttpServletResponse response) {
-    public HttpServletResponse getOriginalResponse() {
-      return originalResponse;
-    }
-
-    /**
-     * Early out if this isn't the right kind of request. We might see a RequestWrapper instance
-     * during a forward or include request.
-     */
+    // Early out if this isn't the right kind of request. We might see a RequestWrapper instance
+    // during a forward or include request.
-    /**
-     * Commit any updates. What actually happens at that point is dependent on the type of
-     * attributes defined for use by the sessions.
-     */
+    // Commit any updates. What actually happens at that point is dependent on the type of
+    // attributes defined for use by the sessions.
-   * Return the filter configuration object for this filter.
-   */
-  public FilterConfig getFilterConfig() {
-    return (this.filterConfig);
-  }
-
-  /**
-   * Set the filter configuration object for this filter.
-   *
-   * @param filterConfig The filter configuration object
-   */
-  public void setFilterConfig(FilterConfig filterConfig) {
-    this.filterConfig = filterConfig;
-  }
-
-  /**
-      /**
-       * Allow override for testing purposes
-       */
+      // Allow override for testing purposes
+        // Ignore.
-    StringBuilder sb = new StringBuilder("SessionCachingFilter(");
-    sb.append(filterConfig);
-    sb.append(")");
-    return (sb.toString());
+    return ("SessionCachingFilter(" + filterConfig + ")");
-
-      } catch (Exception ex) {
+      } catch (Exception ignored) {
-      } catch (Exception ex) {
+      } catch (Exception ignored) {
-  public static String getStackTrace(Throwable t) {
+  private static String getStackTrace(Throwable t) {
-    } catch (Exception ex) {
+    } catch (Exception ignored) {
+
