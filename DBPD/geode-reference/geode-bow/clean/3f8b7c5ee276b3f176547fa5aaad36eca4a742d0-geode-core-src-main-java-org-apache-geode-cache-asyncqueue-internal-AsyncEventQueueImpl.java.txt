GEODE-5485: Introduce InternalAsyncEventQueue interface

Cleanup AsyncEventQueueImpl and implement InternalAsyncEventQueue.

-import org.apache.geode.cache.asyncqueue.AsyncEventQueue;
+import org.apache.geode.internal.cache.wan.InternalGatewaySender;
-public class AsyncEventQueueImpl implements AsyncEventQueue {
-
-  private GatewaySender sender = null;
-
-  private AsyncEventListener asyncEventListener = null;
+public class AsyncEventQueueImpl implements InternalAsyncEventQueue {
-  public AsyncEventQueueImpl(GatewaySender sender, AsyncEventListener eventListener) {
+  private final GatewaySender sender;
+  private final AsyncEventListener asyncEventListener;
+
+  public AsyncEventQueueImpl(GatewaySender sender, AsyncEventListener asyncEventListener) {
-    this.asyncEventListener = eventListener;
+    this.asyncEventListener = asyncEventListener;
-    return getAsyncEventQueueIdFromSenderId(this.sender.getId());
+    return getAsyncEventQueueIdFromSenderId(sender.getId());
-  public GatewaySender getSender() {
-    return this.sender;
+  @Override
+  public InternalGatewaySender getSender() {
+    return (InternalGatewaySender) sender;
+  @Override
-    AbstractGatewaySender abstractSender = (AbstractGatewaySender) this.sender;
+    AbstractGatewaySender abstractSender = (AbstractGatewaySender) sender;
-    if (asyncEventQueue.getId().equals(this.getId())) {
+    if (asyncEventQueue.getId().equals(getId())) {
-    if (this.sender.isRunning()) {
-      this.sender.stop();
+    if (sender.isRunning()) {
+      sender.stop();
-    InternalCache cache = ((AbstractGatewaySender) this.sender).getCache();
-    ((AbstractGatewaySender) this.sender).destroy(initiator);
+    InternalCache cache = ((AbstractGatewaySender) sender).getCache();
+    ((AbstractGatewaySender) sender).destroy(initiator);
-    return ((AbstractGatewaySender) this.sender).isForwardExpirationDestroy();
+    return ((AbstractGatewaySender) sender).isForwardExpirationDestroy();
-    return ((AbstractGatewaySender) this.sender).waitUntilFlushed(timeout, unit);
+    return ((AbstractGatewaySender) sender).waitUntilFlushed(timeout, unit);
-        .append(",isRunning=" + this.sender.isRunning()).append("}").toString();
+        .append(",isRunning=" + sender.isRunning()).append("}").toString();
