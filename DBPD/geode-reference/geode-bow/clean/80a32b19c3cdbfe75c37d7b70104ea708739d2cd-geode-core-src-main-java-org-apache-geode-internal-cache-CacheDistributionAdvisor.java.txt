 GEODE-6580: Cleanup static analyzer warnings. (#3415)


-import org.apache.geode.distributed.Role;
-  public static CacheDistributionAdvisor createCacheDistributionAdvisor(
+  static CacheDistributionAdvisor createCacheDistributionAdvisor(
-  private Set adviseAllEventsOrCached(final boolean excludeInRecovery)
+  private Set<InternalDistributedMember> adviseAllEventsOrCached(final boolean excludeInRecovery)
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        if (excludeInRecovery && cp.inRecovery) {
-          return false;
-        }
-        return cp.cachedOrAllEventsWithListener();
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      if (excludeInRecovery && cp.inRecovery) {
+        return false;
+      return cp.cachedOrAllEventsWithListener();
-      return adviseFilter(new Filter() {
-        @Override
-        public boolean include(Profile profile) {
-          assert profile instanceof CacheProfile;
-          CacheProfile cp = (CacheProfile) profile;
-          DataPolicy dp = cp.dataPolicy;
-          return dp.withReplication()
-              || (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
-        }
+      return adviseFilter(profile -> {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        DataPolicy dp = cp.dataPolicy;
+        return dp.withReplication()
+            || (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
-  public Set<InternalDistributedMember> adviseTX() throws IllegalStateException {
+  Set<InternalDistributedMember> adviseTX() throws IllegalStateException {
-      badList = adviseFilter(new Filter() {
-        @Override
-        public boolean include(Profile profile) {
-          assert profile instanceof CacheProfile;
-          CacheProfile prof = (CacheProfile) profile;
-          return (prof.isPersistent());
-        }
+      badList = adviseFilter(profile -> {
+        assert profile instanceof CacheProfile;
+        CacheProfile prof = (CacheProfile) profile;
+        return (prof.isPersistent());
-      return adviseFilter(new Filter() {
-        @Override
-        public boolean include(Profile profile) {
-          assert profile instanceof CacheProfile;
-          CacheProfile cp = (CacheProfile) profile;
-          return cp.cachedOrAllEvents();
-        }
+      return adviseFilter(profile -> {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        return cp.cachedOrAllEvents();
-      StringBuffer badIds = new StringBuffer();
+      StringBuilder badIds = new StringBuilder();
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile prof = (CacheProfile) profile;
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile prof = (CacheProfile) profile;
-        // if region in cache is not yet initialized, exclude
-        if (!prof.regionInitialized) { // fix for bug 41102
-          return false;
-        }
-
-        return prof.hasCacheLoader;
+      // if region in cache is not yet initialized, exclude
+      if (!prof.regionInitialized) { // fix for bug 41102
+        return false;
+
+      return prof.hasCacheLoader;
-      return fp.getFilterRoutingInfoPart1(event, this.profiles, cacheOpRecipients);
+      return fp.getFilterRoutingInfoPart1(event, profiles, cacheOpRecipients);
-  public Set adviseCacheOp() {
+  public Set<InternalDistributedMember> adviseCacheOp() {
-  /**
-   * Same as adviseCacheOp but only includes members that are playing the specified role.
-   *
-   * @since GemFire 5.0
-   */
-  public Set adviseCacheOpRole(final Role role) {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        // if region in cache is not yet initialized, exclude
-        if (!cp.regionInitialized) {
-          return false;
-        }
-        if (!cp.cachedOrAllEventsWithListener()) {
-          return false;
-        }
-        return cp.getDistributedMember().getRoles().contains(role);
-      }
-    });
-  }
-
-
-  public Set adviseInvalidateRegion() {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        return !cp.inRecovery;
-      }
+  Set<InternalDistributedMember> adviseInvalidateRegion() {
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      return !cp.inRecovery;
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile prof = (CacheProfile) profile;
-        // if region in cache is in recovery, exclude
-        if (prof.inRecovery) {
-          return false;
-        }
-
-        return prof.hasCacheWriter;
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile prof = (CacheProfile) profile;
+      // if region in cache is in recovery, exclude
+      if (prof.inRecovery) {
+        return false;
+
+      return prof.hasCacheWriter;
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        if (cp.dataPolicy.withReplication() && cp.regionInitialized) {
-          return true;
-        }
-        return false;
-      }
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      return cp.dataPolicy.withReplication() && cp.regionInitialized;
-  public Set adviseNetSearch() {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        // if region in cache is not yet initialized, exclude
-        if (!cp.regionInitialized) {
-          return false;
-        }
-        DataPolicy dp = cp.dataPolicy;
-        return dp.withStorage();
+  Set adviseNetSearch() {
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      // if region in cache is not yet initialized, exclude
+      if (!cp.regionInitialized) {
+        return false;
+      DataPolicy dp = cp.dataPolicy;
+      return dp.withStorage();
-    Profile[] allProfiles = this.profiles; // volatile read
+    Profile[] allProfiles = profiles; // volatile read
-    Set<InternalDistributedMember> replicates = new HashSet<InternalDistributedMember>();
-    Set<InternalDistributedMember> others = new HashSet<InternalDistributedMember>();
-    Set<InternalDistributedMember> preloaded = new HashSet<InternalDistributedMember>();
-    Set<InternalDistributedMember> empties = new HashSet<InternalDistributedMember>();
-    Set<InternalDistributedMember> uninitialized = new HashSet<InternalDistributedMember>();
-    Set<InternalDistributedMember> nonPersistent = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> replicates = new HashSet<>();
+    Set<InternalDistributedMember> others = new HashSet<>();
+    Set<InternalDistributedMember> preloaded = new HashSet<>();
+    Set<InternalDistributedMember> empties = new HashSet<>();
+    Set<InternalDistributedMember> uninitialized = new HashSet<>();
+    Set<InternalDistributedMember> nonPersistent = new HashSet<>();
-        new HashMap<InternalDistributedMember, CacheProfile>();
+        new HashMap<>();
-    for (int i = 0; i < allProfiles.length; i++) {
-      CacheProfile profile = (CacheProfile) allProfiles[i];
+    for (Profile allProfile : allProfiles) {
+      CacheProfile profile = (CacheProfile) allProfile;
-  public Set adviseRequiresOldValueInCacheOp() {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        return cp.requiresOldValueInEvents && !cp.regionInitialized;
-      }
+  Set adviseRequiresOldValueInCacheOp() {
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      return cp.requiresOldValueInEvents && !cp.regionInitialized;
-    public boolean requiresOldValueInEvents;
+    boolean requiresOldValueInEvents;
-    public List<CacheServiceProfile> cacheServiceProfiles = new ArrayList<>();
+    List<CacheServiceProfile> cacheServiceProfiles = new ArrayList<>();
-      this.filterProfile = localProfile;
+      filterProfile = localProfile;
-      if (this.dataPolicy.withReplication()) {
+      if (dataPolicy.withReplication()) {
-        if (this.dataPolicy.isPersistentReplicate()) {
+        if (dataPolicy.isPersistentReplicate()) {
-        if (this.dataPolicy.isEmpty())
+        if (dataPolicy.isEmpty())
-        if (this.dataPolicy.isPreloaded())
+        if (dataPolicy.isPreloaded())
-      if (this.subscriptionAttributes != null
-          && this.subscriptionAttributes.getInterestPolicy().isAll()) {
+      if (subscriptionAttributes != null
+          && subscriptionAttributes.getInterestPolicy().isAll()) {
-      if (this.hasCacheLoader)
+      if (hasCacheLoader)
-      if (this.hasCacheWriter)
+      if (hasCacheWriter)
-      if (this.hasCacheListener)
+      if (hasCacheListener)
-      if (this.scope.isDistributedAck())
+      if (scope.isDistributedAck())
-      if (this.scope.isGlobal())
+      if (scope.isGlobal())
-      if (this.inRecovery)
+      if (inRecovery)
-      if (this.isPartitioned)
+      if (isPartitioned)
-      if (this.isGatewayEnabled)
+      if (isGatewayEnabled)
-      if (this.isPersistent)
+      if (isPersistent)
-      if (this.regionInitialized)
+      if (regionInitialized)
-      if (this.persistentID != null)
+      if (persistentID != null)
-      if (this.hasCacheServer)
+      if (hasCacheServer)
-      if (this.requiresOldValueInEvents)
+      if (requiresOldValueInEvents)
-      if (this.persistenceInitialized)
+      if (persistenceInitialized)
-      if (!this.gatewaySenderIds.isEmpty())
+      if (!gatewaySenderIds.isEmpty())
-      if (!this.asyncEventQueueIds.isEmpty())
+      if (!asyncEventQueueIds.isEmpty())
-      if (this.isOffHeap)
+      if (isOffHeap)
-      if (!this.cacheServiceProfiles.isEmpty())
+      if (!cacheServiceProfiles.isEmpty())
-      Assert.assertTrue(!this.scope.isLocal());
+      Assert.assertTrue(!scope.isLocal());
-      return this.dataPolicy.withPersistence();
+      return dataPolicy.withPersistence();
-          this.dataPolicy = DataPolicy.PERSISTENT_REPLICATE;
+          dataPolicy = DataPolicy.PERSISTENT_REPLICATE;
-          this.dataPolicy = DataPolicy.REPLICATE;
+          dataPolicy = DataPolicy.REPLICATE;
-        this.dataPolicy = DataPolicy.EMPTY;
+        dataPolicy = DataPolicy.EMPTY;
-        this.dataPolicy = DataPolicy.PRELOADED;
+        dataPolicy = DataPolicy.PRELOADED;
-        this.dataPolicy = DataPolicy.NORMAL;
+        dataPolicy = DataPolicy.NORMAL;
-          this.dataPolicy = DataPolicy.PERSISTENT_PARTITION;
+          dataPolicy = DataPolicy.PERSISTENT_PARTITION;
-          this.dataPolicy = DataPolicy.PARTITION;
+          dataPolicy = DataPolicy.PARTITION;
-        this.subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.ALL);
+        subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.ALL);
-        this.subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.CACHE_CONTENT);
+        subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.CACHE_CONTENT);
-      this.hasCacheLoader = (s & LOADER_MASK) != 0;
-      this.hasCacheWriter = (s & WRITER_MASK) != 0;
-      this.hasCacheListener = (s & LISTENER_MASK) != 0;
-      this.scope = (s & DIST_ACK_MASK) != 0 ? Scope.DISTRIBUTED_ACK
+      hasCacheLoader = (s & LOADER_MASK) != 0;
+      hasCacheWriter = (s & WRITER_MASK) != 0;
+      hasCacheListener = (s & LISTENER_MASK) != 0;
+      scope = (s & DIST_ACK_MASK) != 0 ? Scope.DISTRIBUTED_ACK
-      this.inRecovery = (s & IN_RECOVERY_MASK) != 0;
-      this.isPartitioned = (s & IS_PARTITIONED_MASK) != 0;
-      this.isGatewayEnabled = (s & IS_GATEWAY_ENABLED_MASK) != 0;
-      this.isPersistent = (s & PERSISTENT_MASK) != 0;
-      this.regionInitialized = ((s & REGION_INITIALIZED_MASK) != 0);
-      this.hasCacheServer = ((s & HAS_CACHE_SERVER_MASK) != 0);
-      this.requiresOldValueInEvents = ((s & REQUIRES_OLD_VALUE_MASK) != 0);
-      this.persistenceInitialized = (s & PERSISTENCE_INITIALIZED_MASK) != 0;
-      this.isOffHeap = (s & IS_OFF_HEAP_MASK) != 0;
+      inRecovery = (s & IN_RECOVERY_MASK) != 0;
+      isPartitioned = (s & IS_PARTITIONED_MASK) != 0;
+      isGatewayEnabled = (s & IS_GATEWAY_ENABLED_MASK) != 0;
+      isPersistent = (s & PERSISTENT_MASK) != 0;
+      regionInitialized = ((s & REGION_INITIALIZED_MASK) != 0);
+      hasCacheServer = ((s & HAS_CACHE_SERVER_MASK) != 0);
+      requiresOldValueInEvents = ((s & REQUIRES_OLD_VALUE_MASK) != 0);
+      persistenceInitialized = (s & PERSISTENCE_INITIALIZED_MASK) != 0;
+      isOffHeap = (s & IS_OFF_HEAP_MASK) != 0;
-      this.subscriptionAttributes = sa;
+      subscriptionAttributes = sa;
-    public boolean cachedOrAllEventsWithListener() {
+    boolean cachedOrAllEventsWithListener() {
-    public boolean cachedOrAllEvents() {
-      return this.dataPolicy.withStorage() || allEvents();
+    boolean cachedOrAllEvents() {
+      return dataPolicy.withStorage() || allEvents();
-    public boolean allEvents() {
-      return this.subscriptionAttributes.getInterestPolicy().isAll();
+    boolean allEvents() {
+      return subscriptionAttributes.getInterestPolicy().isAll();
-      this.cacheServiceProfiles.add(profile);
+      cacheServiceProfiles.add(profile);
-      if (this.filterProfile != null) {
-        this.filterProfile.cleanUp();
+      if (filterProfile != null) {
+        filterProfile.cleanUp();
-      DataSerializer.writeObject(this.filterProfile, out);
+      DataSerializer.writeObject(filterProfile, out);
-      this.filterProfile = DataSerializer.readObject(in);
+      filterProfile = DataSerializer.readObject(in);
-      sb.append("; dataPolicy=" + this.dataPolicy);
-      sb.append("; hasCacheLoader=" + this.hasCacheLoader);
-      sb.append("; hasCacheWriter=" + this.hasCacheWriter);
-      sb.append("; hasCacheListener=" + this.hasCacheListener);
-      sb.append("; hasCacheServer=").append(this.hasCacheServer);
-      sb.append("; scope=" + this.scope);
-      sb.append("; regionInitialized=").append(String.valueOf(this.regionInitialized));
-      sb.append("; inRecovery=" + this.inRecovery);
-      sb.append("; subcription=" + this.subscriptionAttributes);
-      sb.append("; isPartitioned=" + this.isPartitioned);
-      sb.append("; isGatewayEnabled=" + this.isGatewayEnabled);
-      sb.append("; isPersistent=" + this.isPersistent);
-      sb.append("; persistentID=" + this.persistentID);
-      if (this.filterProfile != null) {
-        sb.append("; ").append(this.filterProfile);
+      sb.append("; dataPolicy=").append(dataPolicy);
+      sb.append("; hasCacheLoader=").append(hasCacheLoader);
+      sb.append("; hasCacheWriter=").append(hasCacheWriter);
+      sb.append("; hasCacheListener=").append(hasCacheListener);
+      sb.append("; hasCacheServer=").append(hasCacheServer);
+      sb.append("; scope=").append(scope);
+      sb.append("; regionInitialized=").append(regionInitialized);
+      sb.append("; inRecovery=").append(inRecovery);
+      sb.append("; subcription=").append(subscriptionAttributes);
+      sb.append("; isPartitioned=").append(isPartitioned);
+      sb.append("; isGatewayEnabled=").append(isGatewayEnabled);
+      sb.append("; isPersistent=").append(isPersistent);
+      sb.append("; persistentID=").append(persistentID);
+      if (filterProfile != null) {
+        sb.append("; ").append(filterProfile);
-      sb.append("; gatewaySenderIds =" + this.gatewaySenderIds);
-      sb.append("; asyncEventQueueIds =" + this.asyncEventQueueIds);
-      sb.append("; IsOffHeap=" + this.isOffHeap);
-      sb.append("; cacheServiceProfiles=" + this.cacheServiceProfiles);
+      sb.append("; gatewaySenderIds =").append(gatewaySenderIds);
+      sb.append("; asyncEventQueueIds =").append(asyncEventQueueIds);
+      sb.append("; IsOffHeap=").append(isOffHeap);
+      sb.append("; cacheServiceProfiles=").append(cacheServiceProfiles);
-      return this.others;
+      return others;
-      return this.replicates;
+      return replicates;
-      return this.nonPersistent;
+      return nonPersistent;
-      return this.preloaded;
+      return preloaded;
-      return this.empties;
+      return empties;
-      return this.uninitialized;
+      return uninitialized;
-    protected final Set<InternalDistributedMember> nonPersistent;
+    final Set<InternalDistributedMember> nonPersistent;
-      this(Collections.EMPTY_SET, Collections.EMPTY_SET, Collections.EMPTY_SET,
-          Collections.EMPTY_SET, Collections.EMPTY_SET, Collections.EMPTY_SET,
-          Collections.<InternalDistributedMember, CacheProfile>emptyMap());
+      this(Collections.emptySet(), Collections.emptySet(), Collections.emptySet(),
+          Collections.emptySet(), Collections.emptySet(), Collections.emptySet(),
+          Collections.emptyMap());
-      return "InitialImageAdvice(" + "replicates=" + this.replicates + "; others=" + this.others
-          + "; preloaded=" + this.preloaded + "; empty=" + this.empties + "; initializing="
-          + this.uninitialized + ")";
+      return "InitialImageAdvice(" + "replicates=" + replicates + "; others=" + others
+          + "; preloaded=" + preloaded + "; empty=" + empties + "; initializing="
+          + uninitialized + ")";
-  // moved putProfile, doPutProfile, and putProfile to DistributionAdvisor
-
-  // moved isNewerProfile to DistributionAdvisor
-
-  // moved isNewerSerialNumber to DistributionAdvisor
-
-  // moved forceNewMembershipVersion to DistributionAdvisor
-
-  // moved startOperation to DistributionAdvisor
-
-  // moved endOperation to DistributionAdvisor
-
-  /**
-   * Provide only the new replicates given a set of existing memberIds
-   *
-   * @param oldRecipients the <code>Set</code> of memberIds that have received the message
-   * @return the set of new replicate's memberIds
-   * @since GemFire 5.1
-   */
-  public Set adviseNewReplicates(final Set oldRecipients) {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        if (cp.dataPolicy.withReplication() && !oldRecipients.contains(cp.getDistributedMember())) {
-          return true;
-        }
-        return false;
-      }
-    });
-  }
-
-  // moved waitForCurrentOperations to DistributionAdvisor
-
-  // moved removeId, doRemoveId, removeIdWithSerial, and updateRemovedProfiles to
-  // DistributionAdvisor
-
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        if (cp.dataPolicy.withReplication()) {
-          return true;
-        }
-        return false;
-      }
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      return cp.dataPolicy.withReplication();
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        if (cp.dataPolicy.withPreloaded()) {
-          return true;
-        }
-        return false;
-      }
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      return cp.dataPolicy.withPreloaded();
-  public Set adviseEmptys() {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        if (cp.dataPolicy.isEmpty()) {
-          return true;
-        }
-        return false;
-      }
-    });
-  }
-
-  /**
-   * Provide only the normals (having DataPolicy.NORMAL) given a set of existing memberIds
-   *
-   * @return the set of normal's memberIds
-   * @since GemFire 5.8
-   */
-  public Set adviseNormals() {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        if (cp.dataPolicy.isNormal()) {
-          return true;
-        }
-        return false;
-      }
+  Set adviseEmptys() {
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      return cp.dataPolicy.isEmpty();
-        new HashMap<InternalDistributedMember, PersistentMemberID>();
-    Profile[] snapshot = this.profiles;
+        new HashMap<>();
+    Profile[] snapshot = profiles;
-        new HashMap<InternalDistributedMember, PersistentMemberID>();
-    Profile[] snapshot = this.profiles;
+        new HashMap<>();
+    Profile[] snapshot = profiles;
-  public Set adviseCacheServers() {
+  Set adviseCacheServers() {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        return cp.hasCacheServer;
-      }
+    return adviseFilter(profile -> {
+      assert profile instanceof CacheProfile;
+      CacheProfile cp = (CacheProfile) profile;
+      return cp.hasCacheServer;
-    final List<Set<String>> differSenderIds = new ArrayList<Set<String>>();
-    fetchProfiles(new Filter() {
-      @Override
-      public boolean include(final Profile profile) {
-        if (profile instanceof CacheProfile) {
-          final CacheProfile cp = (CacheProfile) profile;
-          if (allGatewaySenderIds.equals(cp.gatewaySenderIds)) {
-            return true;
-          } else {
-            differSenderIds.add(allGatewaySenderIds);
-            differSenderIds.add(cp.gatewaySenderIds);
-            return false;
-          }
+    final List<Set<String>> differSenderIds = new ArrayList<>();
+    fetchProfiles(profile -> {
+      if (profile instanceof CacheProfile) {
+        final CacheProfile cp = (CacheProfile) profile;
+        if (allGatewaySenderIds.equals(cp.gatewaySenderIds)) {
+          return true;
+        } else {
+          differSenderIds.add(allGatewaySenderIds);
+          differSenderIds.add(cp.gatewaySenderIds);
+          return false;
-        return false;
+      return false;
-    final List<Set<String>> differAsycnQueueIds = new ArrayList<Set<String>>();
-    List l = fetchProfiles(new Filter() {
-      @Override
-      public boolean include(final Profile profile) {
-        if (profile instanceof CacheProfile) {
-          final CacheProfile cp = (CacheProfile) profile;
-          if (allAsyncEventIds.equals(cp.asyncEventQueueIds)) {
-            return true;
-          } else {
-            differAsycnQueueIds.add(allAsyncEventIds);
-            differAsycnQueueIds.add(cp.asyncEventQueueIds);
-            return false;
-          }
+    final List<Set<String>> differAsycnQueueIds = new ArrayList<>();
+    fetchProfiles(profile -> {
+      if (profile instanceof CacheProfile) {
+        final CacheProfile cp = (CacheProfile) profile;
+        if (allAsyncEventIds.equals(cp.asyncEventQueueIds)) {
+          return true;
+        } else {
+          differAsycnQueueIds.add(allAsyncEventIds);
+          differAsycnQueueIds.add(cp.asyncEventQueueIds);
+          return false;
-        return false;
+      return false;
