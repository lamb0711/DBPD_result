Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Interface for continuous query. This provides methods for managing a CQ 
- * once it is created through the QueryService. 
- * The methods allow you to retrieve CQ related information, operate on CQ
+ * Interface for continuous query. This provides methods for managing a CQ once it is created
+ * through the QueryService. The methods allow you to retrieve CQ related information, operate on CQ
+   * 
+   * 
+   * 
+   * 
-  public CqStatistics getStatistics();  
+  public CqStatistics getStatistics();
+   * 
-  public CqAttributes getCqAttributes(); 
+  public CqAttributes getCqAttributes();
+   * 
-  public CqAttributesMutator getCqAttributesMutator(); 
+  public CqAttributesMutator getCqAttributesMutator();
-   * Starts executing the CQ or, if the CQ is in a stopped state, resumes 
-   * execution. Gets the current resultset for the CQ query. The CQ is 
-   * executed on the primary server, and then redundant servers as needed. 
-   * If execution fails on all servers, a CqException is thrown. 
-   * If the query is complex and the data set is large, this execution may 
-   * take a long time, which may cause a socket read timeout in the client. 
-   * To allow adequate time, you may need to set a longer pool read-timeout 
-   * in the client.      
+   * Starts executing the CQ or, if the CQ is in a stopped state, resumes execution. Gets the
+   * current resultset for the CQ query. The CQ is executed on the primary server, and then
+   * redundant servers as needed. If execution fails on all servers, a CqException is thrown. If the
+   * query is complex and the data set is large, this execution may take a long time, which may
+   * cause a socket read timeout in the client. To allow adequate time, you may need to set a longer
+   * pool read-timeout in the client.
+   * 
-   * @throws RegionNotFoundException if the specified region in the 
-   *         query string is not found.
-   * @throws IllegalStateException if the CqQuery is in the RUNNING state
-   *         already.
+   * @throws RegionNotFoundException if the specified region in the query string is not found.
+   * @throws IllegalStateException if the CqQuery is in the RUNNING state already.
-  public <E> CqResults<E> executeWithInitialResults() throws CqClosedException, RegionNotFoundException, CqException;
+  public <E> CqResults<E> executeWithInitialResults()
+      throws CqClosedException, RegionNotFoundException, CqException;
-   * Start executing the CQ or if this CQ is stopped earlier, resumes execution of the CQ.
-   * The CQ is executed on primary and redundant servers, if CQ execution fails on all the 
-   * server then a CqException is thrown.
+   * Start executing the CQ or if this CQ is stopped earlier, resumes execution of the CQ. The CQ is
+   * executed on primary and redundant servers, if CQ execution fails on all the server then a
+   * CqException is thrown.
+   * 
-   * @throws RegionNotFoundException if the specified region in the
-   *         query string is not found.
-   * @throws IllegalStateException if the CqQuery is in the RUNNING state
-   *         already.
+   * @throws RegionNotFoundException if the specified region in the query string is not found.
+   * @throws IllegalStateException if the CqQuery is in the RUNNING state already.
-   *  Stops this CqQuery without releasing resources. Puts the CqQuery into
-   *  the STOPPED state. Can be resumed by calling execute or
-   *  executeWithInitialResults.
-   *  @throws IllegalStateException if the CqQuery is in the STOPPED state
-   *          already.
-   *  @throws CqClosedException if the CQ is CLOSED.
+   * Stops this CqQuery without releasing resources. Puts the CqQuery into the STOPPED state. Can be
+   * resumed by calling execute or executeWithInitialResults.
+   * 
+   * @throws IllegalStateException if the CqQuery is in the STOPPED state already.
+   * @throws CqClosedException if the CQ is CLOSED.
-   * Get the state of the CQ in CqState object form. 
-   * CqState supports methods like isClosed(), isRunning(), isStopped().
+   * Get the state of the CQ in CqState object form. CqState supports methods like isClosed(),
+   * isRunning(), isStopped().
+   * 
-   */ 
+   */
-   * Close the CQ and stop execution.  
-   * Releases the resources associated with this CqQuery.
-   * @throws CqClosedException Further calls on this CqQuery instance except 
-   *         for getState() or getName().
+   * Close the CQ and stop execution. Releases the resources associated with this CqQuery.
+   * 
+   * @throws CqClosedException Further calls on this CqQuery instance except for getState() or
+   *         getName().
-   */ 
+   */
+   * 
+   * 
-   */ 
+   */
+   * 
-  
+
+   * 
