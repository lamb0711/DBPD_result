Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.geode.cache.Region;
+import org.apache.geode.internal.cache.ColocationHelper;
+import java.util.Collection;
-   * TransactionDataNotColocated and TransactionDataRebalanced exceptions.
-   * Map rather than set, as a HashSet is backed by a HashMap. (avoids one "new" call).
+   * TransactionDataNotColocated and TransactionDataRebalanced exceptions. Map rather than set, as a
+   * HashSet is backed by a HashMap. (avoids one "new" call).
-  public PartitionedTXRegionStub(TXStateStub txstate,LocalRegion r) {
-    super(txstate,r);
+  public PartitionedTXRegionStub(TXStateStub txstate, LocalRegion r) {
+    super(txstate, r);
-  
+  public Map<Integer, Boolean> getBuckets() {
+    return buckets;
+  }
+
-      PartitionedRegion pr = (PartitionedRegion)event.getLocalRegion();
-      try {
-        pr.destroyRemotely(state.getTarget(), event.getKeyInfo().getBucketId(), event, expectedOldValue);
-      } catch (TransactionException e) {
-        RuntimeException re = getTransactionException(event.getKeyInfo(), e);
-        re.initCause(e.getCause());
-        throw re;
-      } catch (PrimaryBucketException e) {
-        RuntimeException re = getTransactionException(event.getKeyInfo(), e);
-        re.initCause(e);
-        throw re;
-      } catch (ForceReattemptException e) {
-        RuntimeException re;
-        if (isBucketNotFoundException(e)) {
-          re = new TransactionDataRebalancedException(LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING.toLocalizedString());
-        } else {
-          re = new TransactionDataNodeHasDepartedException(LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE.toLocalizedString(state.getTarget()));
-        }
-        re.initCause(e);
-        waitToRetry();
-        throw re;
+    PartitionedRegion pr = (PartitionedRegion) event.getLocalRegion();
+    try {
+      pr.destroyRemotely(state.getTarget(), event.getKeyInfo().getBucketId(), event,
+          expectedOldValue);
+    } catch (TransactionException e) {
+      RuntimeException re = getTransactionException(event.getKeyInfo(), e);
+      re.initCause(e.getCause());
+      throw re;
+    } catch (PrimaryBucketException e) {
+      RuntimeException re = getTransactionException(event.getKeyInfo(), e);
+      re.initCause(e);
+      throw re;
+    } catch (ForceReattemptException e) {
+      RuntimeException re;
+      if (isBucketNotFoundException(e)) {
+        re = new TransactionDataRebalancedException(
+            LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING
+                .toLocalizedString());
+      } else {
+        re = new TransactionDataNodeHasDepartedException(
+            LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE
+                .toLocalizedString(state.getTarget()));
-      trackBucketForTx(event.getKeyInfo());
+      re.initCause(e);
+      waitToRetry();
+      throw re;
+    }
+    trackBucketForTx(event.getKeyInfo());
-  
-  
-  private RuntimeException getTransactionException(KeyInfo keyInfo,
-      Throwable cause) {
+
+
+  private RuntimeException getTransactionException(KeyInfo keyInfo, Throwable cause) {
-    if (keyInfo != null && !buckets.isEmpty() && !buckets.containsKey(keyInfo.getBucketId())) {
-      // for parent region if previous ops were successful and for child colocated regions
-      // where the bucketId was not previously encountered
-      return new TransactionDataNotColocatedException(LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION
+
+    if (isKeyInNonColocatedBucket(keyInfo)) {
+      return new TransactionDataNotColocatedException(
+          LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION
-      if (ex instanceof PrimaryBucketException) {
-        return new TransactionDataRebalancedException(LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING
-            .toLocalizedString());
+      if (ex instanceof PrimaryBucketException || ex instanceof BucketNotFoundException) {
+        return new TransactionDataRebalancedException(
+            LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING
+                .toLocalizedString());
+  // is this key in a different bucket from all the existing buckets
+  // of the underlying PR or its colocated PRs touched by the transaction.
+  private boolean isKeyInNonColocatedBucket(KeyInfo keyInfo) {
+    Map<Region<?, ?>, TXRegionStub> regionStubs = this.state.getRegionStubs();
+    Collection<PartitionedRegion> colcatedRegions = (Collection<PartitionedRegion>) ColocationHelper
+        .getAllColocationRegions((PartitionedRegion) this.region).values();
+    // get all colocated region buckets touched in the transaction
+    for (PartitionedRegion colcatedRegion : colcatedRegions) {
+      PartitionedTXRegionStub regionStub =
+          (PartitionedTXRegionStub) regionStubs.get(colcatedRegion);
+      if (regionStub != null) {
+        buckets.putAll(regionStub.getBuckets());
+      }
+    }
+    return keyInfo != null && !buckets.isEmpty() && !buckets.containsKey(keyInfo.getBucketId());
+  }
+
-    // this is what PR operations do.  The 2000ms is not used
+    // this is what PR operations do. The 2000ms is not used
-  
-  
+
+
-      PartitionedRegion pr = (PartitionedRegion)region;
-      try {
-        Entry e = pr.getEntryRemotely((InternalDistributedMember)state.getTarget(),
-                                keyInfo.getBucketId(), keyInfo.getKey(), false,
-                                allowTombstones);
-        trackBucketForTx(keyInfo);
-        return e;
-      } catch (EntryNotFoundException enfe) {
-        return null;
-      } catch (TransactionException e) {
-        RuntimeException re = getTransactionException(keyInfo, e);
-        re.initCause(e.getCause());
-        throw re;
-      } catch (PrimaryBucketException e) {
-        RuntimeException re = getTransactionException(keyInfo, e);
-        re.initCause(e);
-        throw re;
-      } catch (ForceReattemptException e) {
-        RuntimeException re;
-        if (isBucketNotFoundException(e)) {
-          re = new TransactionDataRebalancedException(LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING.toLocalizedString());
-        } else {
-          re = new TransactionDataNodeHasDepartedException(LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE.toLocalizedString(state.getTarget()));
-        }
-        re.initCause(e);
-        waitToRetry();
-        throw re;
+    PartitionedRegion pr = (PartitionedRegion) region;
+    try {
+      Entry e = pr.getEntryRemotely((InternalDistributedMember) state.getTarget(),
+          keyInfo.getBucketId(), keyInfo.getKey(), false, allowTombstones);
+      trackBucketForTx(keyInfo);
+      return e;
+    } catch (EntryNotFoundException enfe) {
+      return null;
+    } catch (TransactionException e) {
+      RuntimeException re = getTransactionException(keyInfo, e);
+      re.initCause(e.getCause());
+      throw re;
+    } catch (PrimaryBucketException e) {
+      RuntimeException re = getTransactionException(keyInfo, e);
+      re.initCause(e);
+      throw re;
+    } catch (ForceReattemptException e) {
+      RuntimeException re;
+      if (isBucketNotFoundException(e)) {
+        re = new TransactionDataRebalancedException(
+            LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING
+                .toLocalizedString());
+      } else {
+        re = new TransactionDataNodeHasDepartedException(
+            LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE
+                .toLocalizedString(state.getTarget()));
+      re.initCause(e);
+      waitToRetry();
+      throw re;
+    }
-      region.getCache().getLoggerI18n().fine("adding bucket:"+keyInfo.getBucketId()+" for tx:"+state.getTransactionId());
+      region.getCache().getLoggerI18n()
+          .fine("adding bucket:" + keyInfo.getBucketId() + " for tx:" + state.getTransactionId());
-  
-  public void invalidateExistingEntry(EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry) {
-      PartitionedRegion pr = (PartitionedRegion)event.getLocalRegion();
-      try {
-        pr.invalidateRemotely(state.getTarget(), event.getKeyInfo().getBucketId(), event);
-      } catch (TransactionException e) {
-        RuntimeException re = getTransactionException(event.getKeyInfo(), e);
-        re.initCause(e.getCause());
-        throw re;
-      } catch (PrimaryBucketException e) {
-        RuntimeException re = getTransactionException(event.getKeyInfo(), e);
-        re.initCause(e);
-        throw re;
-      } catch (ForceReattemptException e) {
-        RuntimeException re;
-        if (isBucketNotFoundException(e)) {
-          re = new TransactionDataRebalancedException(LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING.toLocalizedString());
-        } else {
-          re = new TransactionDataNodeHasDepartedException(LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE.toLocalizedString(state.getTarget()));
-        }
-        re.initCause(e);
-        waitToRetry();
-        throw re;
-      }
-      trackBucketForTx(event.getKeyInfo());
-  }
-  
-  public boolean containsKey(KeyInfo keyInfo) {
-      PartitionedRegion pr = (PartitionedRegion)region;
-      try {
-        boolean retVal = pr.containsKeyRemotely((InternalDistributedMember)state.getTarget(), keyInfo.getBucketId(), keyInfo.getKey());
-        trackBucketForTx(keyInfo);
-        return retVal;
-      }
-      catch (TransactionException e) {
-        RuntimeException re = getTransactionException(keyInfo, e);
-        re.initCause(e.getCause());
-        throw re;
-      }
-      catch (PrimaryBucketException e) {
-        RuntimeException re = getTransactionException(keyInfo, e);
-        re.initCause(e);
-        throw re;
-      }
-      catch (ForceReattemptException e) {
-        if (isBucketNotFoundException(e)) {
-          return false;
-        }
-        waitToRetry();
-        RuntimeException re = new TransactionDataNodeHasDepartedException(LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE.toLocalizedString(state.getTarget()));
-        re.initCause(e);
-        throw re;
-      }
-  }
-
-  
-  /**
-   * @param e
-   * @return true if the cause of the FRE is a BucketNotFoundException
-   */
-  private boolean isBucketNotFoundException(ForceReattemptException e) {
-    ForceReattemptException fre = e;
-    while (fre.getCause() != null && fre.getCause() instanceof ForceReattemptException) {
-      fre = (ForceReattemptException)fre.getCause();
-    }
-    return fre instanceof BucketNotFoundException;
-  }
-
-  
-  public boolean containsValueForKey(KeyInfo keyInfo) {
-      PartitionedRegion pr = (PartitionedRegion)region;
-      try {
-        boolean retVal = pr.containsValueForKeyRemotely((InternalDistributedMember)state.getTarget(), keyInfo.getBucketId(), keyInfo.getKey());
-        trackBucketForTx(keyInfo);
-        return retVal;
-      }
-      catch (TransactionException e) {
-        RuntimeException re = getTransactionException(keyInfo, e);
-        re.initCause(e.getCause());
-        throw re;
-      }
-      catch (PrimaryBucketException e) {
-        RuntimeException re = getTransactionException(keyInfo, e);
-        re.initCause(e);
-        throw re;
-      }
-      catch (ForceReattemptException e) {
-        if (isBucketNotFoundException(e)) {
-          return false;
-        }
-        waitToRetry();
-        RuntimeException re = new TransactionDataNodeHasDepartedException(LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE.toLocalizedString(state.getTarget()));
-        re.initCause(e);
-        throw re;
-      }
-  }
-
-  
-  public Object findObject(KeyInfo keyInfo, boolean isCreate,
-                           boolean generateCallbacks, Object value, boolean peferCD,
-                           ClientProxyMembershipID requestingClient,
-                           EntryEventImpl clientEvent) {
-    Object retVal = null;
-    final Object key = keyInfo.getKey();
-    final Object callbackArgument = keyInfo.getCallbackArg();
-    PartitionedRegion pr = (PartitionedRegion)region;
+  public void invalidateExistingEntry(EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry) {
+    PartitionedRegion pr = (PartitionedRegion) event.getLocalRegion();
-      retVal = pr.getRemotely((InternalDistributedMember)state.getTarget(), keyInfo.getBucketId(), key, callbackArgument, peferCD, requestingClient, clientEvent, false);
+      pr.invalidateRemotely(state.getTarget(), event.getKeyInfo().getBucketId(), event);
+    } catch (TransactionException e) {
+      RuntimeException re = getTransactionException(event.getKeyInfo(), e);
+      re.initCause(e.getCause());
+      throw re;
+    } catch (PrimaryBucketException e) {
+      RuntimeException re = getTransactionException(event.getKeyInfo(), e);
+      re.initCause(e);
+      throw re;
+    } catch (ForceReattemptException e) {
+      RuntimeException re;
+      if (isBucketNotFoundException(e)) {
+        re = new TransactionDataRebalancedException(
+            LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING
+                .toLocalizedString());
+      } else {
+        re = new TransactionDataNodeHasDepartedException(
+            LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE
+                .toLocalizedString(state.getTarget()));
+      }
+      re.initCause(e);
+      waitToRetry();
+      throw re;
+    }
+    trackBucketForTx(event.getKeyInfo());
+  }
+
+
+  public boolean containsKey(KeyInfo keyInfo) {
+    PartitionedRegion pr = (PartitionedRegion) region;
+    try {
+      boolean retVal = pr.containsKeyRemotely((InternalDistributedMember) state.getTarget(),
+          keyInfo.getBucketId(), keyInfo.getKey());
+      trackBucketForTx(keyInfo);
+      return retVal;
-        return null;
+        RuntimeException re = getTransactionException(keyInfo, e);
+        re.initCause(e);
+        throw re;
+      }
+      waitToRetry();
+      RuntimeException re = new TransactionDataNodeHasDepartedException(
+          LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE
+              .toLocalizedString(state.getTarget()));
+      re.initCause(e);
+      throw re;
+    }
+  }
+
+
+  /**
+   * @param e
+   * @return true if the cause of the FRE is a BucketNotFoundException
+   */
+  private boolean isBucketNotFoundException(ForceReattemptException e) {
+    ForceReattemptException fre = e;
+    while (fre.getCause() != null && fre.getCause() instanceof ForceReattemptException) {
+      fre = (ForceReattemptException) fre.getCause();
+    }
+    return fre instanceof BucketNotFoundException;
+  }
+
+
+  public boolean containsValueForKey(KeyInfo keyInfo) {
+    PartitionedRegion pr = (PartitionedRegion) region;
+    try {
+      boolean retVal = pr.containsValueForKeyRemotely((InternalDistributedMember) state.getTarget(),
+          keyInfo.getBucketId(), keyInfo.getKey());
+      trackBucketForTx(keyInfo);
+      return retVal;
+    } catch (TransactionException e) {
+      RuntimeException re = getTransactionException(keyInfo, e);
+      re.initCause(e.getCause());
+      throw re;
+    } catch (PrimaryBucketException e) {
+      RuntimeException re = getTransactionException(keyInfo, e);
+      re.initCause(e);
+      throw re;
+    } catch (ForceReattemptException e) {
+      if (isBucketNotFoundException(e)) {
+        RuntimeException re = getTransactionException(keyInfo, e);
+        re.initCause(e);
+        throw re;
+      }
+      waitToRetry();
+      RuntimeException re = new TransactionDataNodeHasDepartedException(
+          LocalizedStrings.PartitionedRegion_TRANSACTION_DATA_NODE_0_HAS_DEPARTED_TO_PROCEED_ROLLBACK_THIS_TRANSACTION_AND_BEGIN_A_NEW_ONE
+              .toLocalizedString(state.getTarget()));
+      re.initCause(e);
+      throw re;
+    }
+  }
+
+
+  public Object findObject(KeyInfo keyInfo, boolean isCreate, boolean generateCallbacks,
+      Object value, boolean peferCD, ClientProxyMembershipID requestingClient,
+      EntryEventImpl clientEvent) {
+    Object retVal = null;
+    final Object key = keyInfo.getKey();
+    final Object callbackArgument = keyInfo.getCallbackArg();
+    PartitionedRegion pr = (PartitionedRegion) region;
+    try {
+      retVal = pr.getRemotely((InternalDistributedMember) state.getTarget(), keyInfo.getBucketId(),
+          key, callbackArgument, peferCD, requestingClient, clientEvent, false);
+    } catch (TransactionException e) {
+      RuntimeException re = getTransactionException(keyInfo, e);
+      re.initCause(e.getCause());
+      throw re;
+    } catch (PrimaryBucketException e) {
+      RuntimeException re = getTransactionException(keyInfo, e);
+      re.initCause(e);
+      throw re;
+    } catch (ForceReattemptException e) {
+      if (isBucketNotFoundException(e)) {
+        RuntimeException re = getTransactionException(keyInfo, e);
+        re.initCause(e);
+        throw re;
-  
+
-      PartitionedRegion pr = (PartitionedRegion)region;
-      InternalDistributedMember primary = pr.getBucketPrimary(keyInfo.getBucketId());
-      if (primary.equals(state.getTarget())) {
-        return getEntry(keyInfo, allowTombstones);
-      } else {
-        return pr.getSharedDataView().getEntry(keyInfo, pr, allowTombstones);
-      }
+    PartitionedRegion pr = (PartitionedRegion) region;
+    InternalDistributedMember primary = pr.getBucketPrimary(keyInfo.getBucketId());
+    if (primary.equals(state.getTarget())) {
+      return getEntry(keyInfo, allowTombstones);
+    } else {
+      return pr.getSharedDataView().getEntry(keyInfo, pr, allowTombstones);
+    }
-  
+
-      PartitionedRegion pr = (PartitionedRegion)r;
-      try {
-        retVal = pr.putRemotely(state.getTarget(), event, ifNew, ifOld, expectedOldValue, requireOldValue);
-      } catch (TransactionException e) {
-        RuntimeException re = getTransactionException(event.getKeyInfo(), e);
-        re.initCause(e.getCause());
-        throw re;
-      } catch (PrimaryBucketException e) {
-        RuntimeException re = getTransactionException(event.getKeyInfo(), e);
-        re.initCause(e);
-        throw re;
-      } catch (ForceReattemptException e) {
-        waitToRetry();
-        RuntimeException re = getTransactionException(event.getKeyInfo(), e);
-        re.initCause(e);
-        throw re;
-      }
+    PartitionedRegion pr = (PartitionedRegion) r;
+    try {
+      retVal =
+          pr.putRemotely(state.getTarget(), event, ifNew, ifOld, expectedOldValue, requireOldValue);
+    } catch (TransactionException e) {
+      RuntimeException re = getTransactionException(event.getKeyInfo(), e);
+      re.initCause(e.getCause());
+      throw re;
+    } catch (PrimaryBucketException e) {
+      RuntimeException re = getTransactionException(event.getKeyInfo(), e);
+      re.initCause(e);
+      throw re;
+    } catch (ForceReattemptException e) {
+      waitToRetry();
+      RuntimeException re = getTransactionException(event.getKeyInfo(), e);
+      re.initCause(e);
+      throw re;
+    }
-  
+
-      RemoteSizeMessage.SizeResponse response = RemoteSizeMessage.send(Collections.singleton(state.getTarget()), region);
+      RemoteSizeMessage.SizeResponse response =
+          RemoteSizeMessage.send(Collections.singleton(state.getTarget()), region);
-  
+
-   * Create PutAllPRMsgs for each bucket, and send them. 
+   * Create PutAllPRMsgs for each bucket, and send them.
-   * @param putallO
-   *                DistributedPutAllOperation object.  
+   * @param putallO DistributedPutAllOperation object.
-  public void postPutAll(DistributedPutAllOperation putallO, VersionedObjectList successfulPuts, LocalRegion r) throws TransactionException {
+  public void postPutAll(DistributedPutAllOperation putallO, VersionedObjectList successfulPuts,
+      LocalRegion r) throws TransactionException {
-    PartitionedRegion pr = (PartitionedRegion)r;
+    PartitionedRegion pr = (PartitionedRegion) r;
-    
-    successfulPuts.clear();  // this is rebuilt by this method
+
+    successfulPuts.clear(); // this is rebuilt by this method
-      Map.Entry mapEntry = (Map.Entry)itor.next();
-      Integer bucketId = (Integer)mapEntry.getKey();
-      PutAllPRMessage prMsg =(PutAllPRMessage)mapEntry.getValue();
+      Map.Entry mapEntry = (Map.Entry) itor.next();
+      Integer bucketId = (Integer) mapEntry.getKey();
+      PutAllPRMessage prMsg = (PutAllPRMessage) mapEntry.getValue();
-        VersionedObjectList versions = sendMsgByBucket(bucketId, prMsg,pr);
-        //prMsg.saveKeySet(partialKeys);
+        VersionedObjectList versions = sendMsgByBucket(bucketId, prMsg, pr);
+        // prMsg.saveKeySet(partialKeys);
-        // sendMsgByBucket applied partial keys 
+        // sendMsgByBucket applied partial keys
-        @Released EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
+        @Released
+        EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
-          throw (CancelException)partialKeys.getFailure(); 
+          throw (CancelException) partialKeys.getFailure();
-          throw (RuntimeException)partialKeys.getFailure();
+          throw (RuntimeException) partialKeys.getFailure();
-    } 
-  } 
-  
+    }
+  }
+
-  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps, LocalRegion r) {
+  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps,
+      LocalRegion r) {
-    PartitionedRegion pr = (PartitionedRegion)r;
+    PartitionedRegion pr = (PartitionedRegion) r;
-    
-    successfulOps.clear();  // this is rebuilt by this method
+
+    successfulOps.clear(); // this is rebuilt by this method
-        VersionedObjectList versions = sendMsgByBucket(bucketId, prMsg,pr);
-        //prMsg.saveKeySet(partialKeys);
+        VersionedObjectList versions = sendMsgByBucket(bucketId, prMsg, pr);
+        // prMsg.saveKeySet(partialKeys);
-        // sendMsgByBucket applied partial keys 
+        // sendMsgByBucket applied partial keys
-        @Released EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
+        @Released
+        EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
-          throw (CancelException)partialKeys.getFailure(); 
+          throw (CancelException) partialKeys.getFailure();
-          throw (RuntimeException)partialKeys.getFailure();
+          throw (RuntimeException) partialKeys.getFailure();
-    } 
-    
+    }
+
-  
-  
-  /* If failed after retries, it will throw PartitionedRegionStorageException, no need for return value */
-  private VersionedObjectList sendMsgByBucket(final Integer bucketId, PutAllPRMessage prMsg,PartitionedRegion pr)
-  {
+
+
+  /*
+   * If failed after retries, it will throw PartitionedRegionStorageException, no need for return
+   * value
+   */
+  private VersionedObjectList sendMsgByBucket(final Integer bucketId, PutAllPRMessage prMsg,
+      PartitionedRegion pr) {
-    InternalDistributedMember currentTarget = pr.getOrCreateNodeForBucketWrite(bucketId.intValue(), null);
-    if(!currentTarget.equals(this.state.getTarget())) {
-      @Released EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
+    InternalDistributedMember currentTarget =
+        pr.getOrCreateNodeForBucketWrite(bucketId.intValue(), null);
+    if (!currentTarget.equals(this.state.getTarget())) {
+      @Released
+      EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
-        throw new TransactionDataNotColocatedException(LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION.toLocalizedString(firstEvent.getKey()));
+        throw new TransactionDataNotColocatedException(
+            LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION
+                .toLocalizedString(firstEvent.getKey()));
-      return pr.tryToSendOnePutAllMessage(prMsg,currentTarget);
-    }
-    catch (ForceReattemptException prce) {
+      return pr.tryToSendOnePutAllMessage(prMsg, currentTarget);
+    } catch (ForceReattemptException prce) {
-    }
-    catch (PrimaryBucketException notPrimary) {
-      RuntimeException re = new TransactionDataRebalancedException(LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING.toLocalizedString());
+    } catch (PrimaryBucketException notPrimary) {
+      RuntimeException re = new TransactionDataRebalancedException(
+          LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING
+              .toLocalizedString());
-    }
-    catch (DataLocationException dle) {
+    } catch (DataLocationException dle) {
-  /* If failed after retries, it will throw PartitionedRegionStorageException, no need for return value */
-  private VersionedObjectList sendMsgByBucket(final Integer bucketId, RemoveAllPRMessage prMsg,PartitionedRegion pr)
-  {
+  /*
+   * If failed after retries, it will throw PartitionedRegionStorageException, no need for return
+   * value
+   */
+  private VersionedObjectList sendMsgByBucket(final Integer bucketId, RemoveAllPRMessage prMsg,
+      PartitionedRegion pr) {
-    InternalDistributedMember currentTarget = pr.getOrCreateNodeForBucketWrite(bucketId.intValue(), null);
-    if(!currentTarget.equals(this.state.getTarget())) {
-      @Released EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
+    InternalDistributedMember currentTarget =
+        pr.getOrCreateNodeForBucketWrite(bucketId.intValue(), null);
+    if (!currentTarget.equals(this.state.getTarget())) {
+      @Released
+      EntryEventImpl firstEvent = prMsg.getFirstEvent(pr);
-        throw new TransactionDataNotColocatedException(LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION.toLocalizedString(firstEvent.getKey()));
+        throw new TransactionDataNotColocatedException(
+            LocalizedStrings.PartitionedRegion_KEY_0_NOT_COLOCATED_WITH_TRANSACTION
+                .toLocalizedString(firstEvent.getKey()));
-      return pr.tryToSendOneRemoveAllMessage(prMsg,currentTarget);
-    }
-    catch (ForceReattemptException prce) {
+      return pr.tryToSendOneRemoveAllMessage(prMsg, currentTarget);
+    } catch (ForceReattemptException prce) {
-    }
-    catch (PrimaryBucketException notPrimary) {
-      RuntimeException re = new TransactionDataRebalancedException(LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING.toLocalizedString());
+    } catch (PrimaryBucketException notPrimary) {
+      RuntimeException re = new TransactionDataRebalancedException(
+          LocalizedStrings.PartitionedRegion_TRANSACTIONAL_DATA_MOVED_DUE_TO_REBALANCING
+              .toLocalizedString());
-    }
-    catch (DataLocationException dle) {
+    } catch (DataLocationException dle) {
-  public void cleanup() {
-  }
+  public void cleanup() {}
