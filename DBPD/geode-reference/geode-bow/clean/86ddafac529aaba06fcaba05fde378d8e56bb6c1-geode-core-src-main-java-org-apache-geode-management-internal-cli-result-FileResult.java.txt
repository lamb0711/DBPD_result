GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.
-import java.io.FileNotFoundException;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
-import org.apache.geode.management.internal.cli.CliUtil;
-  private String[] filePaths;
-  private int fileIndex;
-  private Status status = Status.ERROR;
-  private byte[][] localFileData = null;
-  private boolean failedToPersist = false;
+  private List<File> files = new ArrayList<>();
-  public FileResult(String[] filePathsToRead) throws FileNotFoundException, IOException {
-    this.filePaths = filePathsToRead;
-    this.localFileData = CliUtil.filesToBytes(filePathsToRead);
-    this.status = Status.OK;
+  public void addFile(File file) {
+    files.add(file);
-    return status;
+    return Status.OK;
-    return fileIndex < filePaths.length;
+    return false;
-    return filePaths[fileIndex++];
+    return "";
-  public byte[][] toBytes() {
-    return localFileData;
+  public List<File> getFiles() {
+    return files;
-    for (int i = 1; i < this.localFileData.length; i += 2) {
-      byteCount += localFileData[i].length;
+    for (File file : files) {
+      byteCount += file.length();
-    StringBuffer formattedFileList = new StringBuffer();
-    for (int i = 0; i < this.localFileData.length; i += 2) {
-      formattedFileList.append(new String(this.localFileData[i]));
-      if (i < this.localFileData.length - 2) {
-        formattedFileList.append(", ");
-      }
-    }
-    return formattedFileList.toString();
+    return files.stream().map(File::getName).collect(Collectors.joining(", "));
-    // dump file data if any
-    CliUtil.bytesToFiles(localFileData, directory, true);
+    throw new UnsupportedOperationException("not supported");
-    return this.failedToPersist;
+    return false;
-    this.failedToPersist = !commandPersisted;
+    throw new UnsupportedOperationException("not supported");
