Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-  
+
-  
-  final ThreadGroup loggerGroup = LoggingThreadGroup.createThreadGroup(
-      "Remote Site Discovery Logger Group", logger);
-  
-  public ParallelGatewaySenderImpl(){
+
+  final ThreadGroup loggerGroup =
+      LoggingThreadGroup.createThreadGroup("Remote Site Discovery Logger Group", logger);
+
+  public ParallelGatewaySenderImpl() {
-  
+
-  
+
-    this.getLifeCycleLock().writeLock().lock(); 
+    this.getLifeCycleLock().writeLock().lock();
-        logger.warn(LocalizedMessage.create(LocalizedStrings.GatewaySender_SENDER_0_IS_ALREADY_RUNNING, this.getId()));
+        logger.warn(LocalizedMessage
+            .create(LocalizedStrings.GatewaySender_SENDER_0_IS_ALREADY_RUNNING, this.getId()));
-        String locators = ((GemFireCacheImpl)this.cache).getDistributedSystem()
-            .getConfig().getLocators();
+        String locators =
+            ((GemFireCacheImpl) this.cache).getDistributedSystem().getConfig().getLocators();
-       * Now onwards all processing will happen through "ConcurrentParallelGatewaySenderEventProcessor"
-       * we have made "ParallelGatewaySenderEventProcessor" and "ParallelGatewaySenderQueue" as a
-       * utility classes of Concurrent version of processor and queue.
+       * Now onwards all processing will happen through
+       * "ConcurrentParallelGatewaySenderEventProcessor" we have made
+       * "ParallelGatewaySenderEventProcessor" and "ParallelGatewaySenderQueue" as a utility classes
+       * of Concurrent version of processor and queue.
-      /*if (getDispatcherThreads() > 1) {
-        eventProcessor = new ConcurrentParallelGatewaySenderEventProcessor(this);
-      } else {
-        eventProcessor = new ParallelGatewaySenderEventProcessor(this);
-      }*/
-      
+      /*
+       * if (getDispatcherThreads() > 1) { eventProcessor = new
+       * ConcurrentParallelGatewaySenderEventProcessor(this); } else { eventProcessor = new
+       * ParallelGatewaySenderEventProcessor(this); }
+       */
+
-      //Only notify the type registry if this is a WAN gateway queue
-      if(!isAsyncEventQueue()) {
+      // Only notify the type registry if this is a WAN gateway queue
+      if (!isAsyncEventQueue()) {
-     
-      InternalDistributedSystem system = (InternalDistributedSystem) this.cache
-          .getDistributedSystem();
+
+      InternalDistributedSystem system =
+          (InternalDistributedSystem) this.cache.getDistributedSystem();
-      
-      logger.info(LocalizedMessage.create(LocalizedStrings.ParallelGatewaySenderImpl_STARTED__0, this));
-      
+
+      logger.info(
+          LocalizedMessage.create(LocalizedStrings.ParallelGatewaySenderImpl_STARTED__0, this));
+
-    }
-    finally {
+    } finally {
-  
-//  /**
-//   * The sender is not started but only the message queue i.e. shadowPR is created on the node.
-//   * @param targetPr
-//   */
-//  private void createMessageQueueOnAccessorNode(PartitionedRegion targetPr) {
-//    eventProcessor = new ParallelGatewaySenderEventProcessor(this, targetPr);
-//  }
-  
+
+  // /**
+  // * The sender is not started but only the message queue i.e. shadowPR is created on the node.
+  // * @param targetPr
+  // */
+  // private void createMessageQueueOnAccessorNode(PartitionedRegion targetPr) {
+  // eventProcessor = new ParallelGatewaySenderEventProcessor(this, targetPr);
+  // }
+
-    this.getLifeCycleLock().writeLock().lock(); 
+    this.getLifeCycleLock().writeLock().lock();
-      //try {
+      // try {
-      //stop the running threads, open sockets if any
-      ((ConcurrentParallelGatewaySenderQueue)this.eventProcessor.getQueue()).cleanUp();
+      // stop the running threads, open sockets if any
+      ((ConcurrentParallelGatewaySenderQueue) this.eventProcessor.getQueue()).cleanUp();
-      
-      InternalDistributedSystem system = (InternalDistributedSystem) this.cache
-      .getDistributedSystem();
+
+      InternalDistributedSystem system =
+          (InternalDistributedSystem) this.cache.getDistributedSystem();
-      
+
-      // Tests expect to be able to do this. 
-//      } finally {
-//        this.eventProcessor = null;
-//      }
-    }
-    finally {
+      // Tests expect to be able to do this.
+      // } finally {
+      // this.eventProcessor = null;
+      // }
+    } finally {
-  
+
-    sb.append(",remoteDsId="+ getRemoteDSId());
-    sb.append(",isRunning ="+ isRunning());
+    sb.append(",remoteDsId=" + getRemoteDSId());
+    sb.append(",isRunning =" + isRunning());
-    GatewaySenderProfile pf = (GatewaySenderProfile)profile;
+    GatewaySenderProfile pf = (GatewaySenderProfile) profile;
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.wan.AbstractGatewaySender#setModifiedEventId(org.apache.geode.internal.cache.EntryEventImpl)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.wan.AbstractGatewaySender#setModifiedEventId(org.apache.geode.
+   * internal.cache.EntryEventImpl)
-    //merged from 42004
+    // merged from 42004
-//      if (getOrderPolicy() == OrderPolicy.THREAD) {
-//        bucketId = PartitionedRegionHelper.getHashKey(
-//            ((EntryEventImpl)clonedEvent).getEventId().getThreadID(),
-//            getMaxParallelismForReplicatedRegion());
-//      }
-//      else
-        bucketId = PartitionedRegionHelper.getHashKey(clonedEvent.getKey(),
-            getMaxParallelismForReplicatedRegion());
-    }
-    else {
-      bucketId = PartitionedRegionHelper
-          .getHashKey((EntryOperation)clonedEvent);
+      // if (getOrderPolicy() == OrderPolicy.THREAD) {
+      // bucketId = PartitionedRegionHelper.getHashKey(
+      // ((EntryEventImpl)clonedEvent).getEventId().getThreadID(),
+      // getMaxParallelismForReplicatedRegion());
+      // }
+      // else
+      bucketId = PartitionedRegionHelper.getHashKey(clonedEvent.getKey(),
+          getMaxParallelismForReplicatedRegion());
+    } else {
+      bucketId = PartitionedRegionHelper.getHashKey((EntryOperation) clonedEvent);
-    long newThreadId = ThreadIdentifier
-    .createFakeThreadIDForParallelGSPrimaryBucket(bucketId,
+    long newThreadId = ThreadIdentifier.createFakeThreadIDForParallelGSPrimaryBucket(bucketId,
-    
+
-    
-//    boolean isPrimary = ((PartitionedRegion)getQueue().getRegion())
-//    .getRegionAdvisor().getBucketAdvisor(bucketId).isPrimary();
-//    if (isPrimary) {
-//      newThreadId = ThreadIdentifier
-//          .createFakeThreadIDForParallelGSPrimaryBucket(bucketId,
-//              originatingThreadId);
-//    } else {
-//      newThreadId = ThreadIdentifier
-//          .createFakeThreadIDForParallelGSSecondaryBucket(bucketId,
-//              originatingThreadId);
-//    }
-    EventID newEventId = new EventID(originalEventId.getMembershipID(),
-        newThreadId, originalEventId.getSequenceID(), bucketId);
+    // boolean isPrimary = ((PartitionedRegion)getQueue().getRegion())
+    // .getRegionAdvisor().getBucketAdvisor(bucketId).isPrimary();
+    // if (isPrimary) {
+    // newThreadId = ThreadIdentifier
+    // .createFakeThreadIDForParallelGSPrimaryBucket(bucketId,
+    // originatingThreadId);
+    // } else {
+    // newThreadId = ThreadIdentifier
+    // .createFakeThreadIDForParallelGSSecondaryBucket(bucketId,
+    // originatingThreadId);
+    // }
+
+    EventID newEventId = new EventID(originalEventId.getMembershipID(), newThreadId,
+        originalEventId.getSequenceID(), bucketId);
-      logger.debug("{}: Generated event id for event with key={}, bucketId={}, original event id={}, threadId={}, new event id={}, newThreadId={}",
-          this, clonedEvent.getKey(), bucketId, originalEventId, originatingThreadId, newEventId, newThreadId);
+      logger.debug(
+          "{}: Generated event id for event with key={}, bucketId={}, original event id={}, threadId={}, new event id={}, newThreadId={}",
+          this, clonedEvent.getKey(), bucketId, originalEventId, originatingThreadId, newEventId,
+          newThreadId);
