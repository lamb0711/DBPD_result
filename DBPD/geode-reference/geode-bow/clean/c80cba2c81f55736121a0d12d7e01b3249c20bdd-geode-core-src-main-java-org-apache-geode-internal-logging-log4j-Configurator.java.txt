GEODE-1902 - Add GEMFIRE_VERBOSE LogMarker as alias of GEODE_VERBOSE for backwards compatibility

This closes #247

-import org.apache.logging.log4j.core.config.ConfigurationSource;
- * Utility methods to programmatically alter the configuration of Log4J2. Used 
+ * Utility methods to programmatically alter the configuration of Log4J2. Used
-  
+
-    final LoggerContext context = ((org.apache.logging.log4j.core.Logger)LogManager.getRootLogger()).getContext();
+    final LoggerContext context = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger()).getContext();
-  
+
-    LoggerContext context = (LoggerContext)LogManager.getContext(false);
+    LoggerContext context = (LoggerContext) LogManager.getContext(false);
-    
+
-  
+
-  
+
-    LoggerContext context = (LoggerContext)LogManager.getContext(false);
+    LoggerContext context = (LoggerContext) LogManager.getContext(false);
-      logConfig = LoggerConfig.createLogger(
-          String.valueOf(logConfig.isAdditive()), 
-          logConfig.getLevel(), 
-          name, 
-          String.valueOf(logConfig.isIncludeLocation()), 
-          appenderRefs == null ? null : appenderRefs.toArray(new AppenderRef[appenderRefs.size()]), 
-          props == null ? null : props.toArray(new Property[props.size()]), 
-          config, 
-          null);
+      logConfig = LoggerConfig.createLogger(String.valueOf(logConfig.isAdditive()), logConfig.getLevel(), name, String.valueOf(logConfig
+        .isIncludeLocation()), appenderRefs == null ? null : appenderRefs.toArray(new AppenderRef[appenderRefs.size()]), props == null ? null : props
+        .toArray(new Property[props.size()]), config, null);
-    LoggerContext context = (LoggerContext)LogManager.getContext(false);
+    LoggerContext context = (LoggerContext) LogManager.getContext(false);
-      logConfig = LoggerConfig.createLogger(
-          String.valueOf(additive), 
-          logConfig.getLevel(), 
-          name, 
-          String.valueOf(logConfig.isIncludeLocation()), 
-          appenderRefs == null ? null : appenderRefs.toArray(new AppenderRef[appenderRefs.size()]), 
-          props == null ? null : props.toArray(new Property[props.size()]), 
-          config, 
-          null);
+      logConfig = LoggerConfig.createLogger(String.valueOf(additive), logConfig.getLevel(), name, String.valueOf(logConfig
+        .isIncludeLocation()), appenderRefs == null ? null : appenderRefs.toArray(new AppenderRef[appenderRefs.size()]), props == null ? null : props
+        .toArray(new Property[props.size()]), config, null);
-  
+
-    LoggerContext context = (LoggerContext)LogManager.getContext(false);
+    LoggerContext context = (LoggerContext) LogManager.getContext(false);
-  
+
-  
+
-  
+
-  
+
-      boolean isGemFireVerboseFilter = hasFilter && LogService.GEMFIRE_VERBOSE_FILTER.equals(loggerConfig.getFilter().toString());
-      
+      boolean isGemFireVerboseFilter = hasFilter && (LogService.GEODE_VERBOSE_FILTER.equals(loggerConfig.getFilter()
+                                                                                                        .toString()) || LogService.GEMFIRE_VERBOSE_FILTER
+                                                       .equals(loggerConfig.getFilter().toString()));
+
-  
+
-      boolean hasFilter = loggerConfig.hasFilter();
-      boolean isGemFireVerboseFilter = hasFilter && LogService.GEMFIRE_VERBOSE_FILTER.equals(loggerConfig.getFilter().toString());
-      
+
