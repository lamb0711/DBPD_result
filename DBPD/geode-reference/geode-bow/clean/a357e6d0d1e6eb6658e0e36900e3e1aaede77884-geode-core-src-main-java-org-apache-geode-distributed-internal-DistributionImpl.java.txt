GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

+import org.apache.geode.ForcedDisconnectException;
+import org.apache.geode.GemFireConfigException;
+import org.apache.geode.SystemConnectException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberDisconnectedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberShunnedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberStartupException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipClosedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfigurationException;
-import org.apache.geode.distributed.internal.membership.gms.api.MembershipTestHook;
+import org.apache.geode.internal.tcp.ConnectionException;
+import org.apache.geode.security.AuthenticationRequiredException;
+import org.apache.geode.security.GemFireSecurityException;
-    membership = MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()
-        .setAuthenticator(
-            new GMSAuthenticator(system.getSecurityProperties(), system.getSecurityService(),
-                system.getSecurityLogWriter(), system.getInternalLogWriter()))
-        .setStatistics(clusterDistributionManager.stats)
-        .setMessageListener(messageListener)
-        .setMembershipListener(listener)
-        .setConfig(new ServiceConfig(transport, system.getConfig()))
-        .setSerializer(InternalDataSerializer.getDSFIDSerializer())
-        .setLifecycleListener(new LifecycleListenerImpl(this))
-        .setMemberIDFactory(new ClusterDistributionManager.ClusterDistributionManagerIDFactory())
-        .setLocatorClient(new TcpClient(
-            asTcpSocketCreator(
-                SocketCreatorFactory
-                    .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),
-            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),
-            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))
-        .create();
+    try {
+      membership = MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()
+          .setAuthenticator(
+              new GMSAuthenticator(system.getSecurityProperties(), system.getSecurityService(),
+                  system.getSecurityLogWriter(), system.getInternalLogWriter()))
+          .setStatistics(clusterDistributionManager.stats)
+          .setMessageListener(messageListener)
+          .setMembershipListener(listener)
+          .setConfig(new ServiceConfig(transport, system.getConfig()))
+          .setSerializer(InternalDataSerializer.getDSFIDSerializer())
+          .setLifecycleListener(new LifecycleListenerImpl(this))
+          .setMemberIDFactory(new ClusterDistributionManager.ClusterDistributionManagerIDFactory())
+          .setLocatorClient(new TcpClient(
+              asTcpSocketCreator(
+                  SocketCreatorFactory
+                      .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),
+              InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),
+              InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))
+          .create();
+    } catch (MembershipConfigurationException e) {
+      throw new GemFireConfigException(e.getMessage(), e.getCause());
+    } catch (GemFireSecurityException e) {
+      throw e;
+    } catch (RuntimeException e) {
+      Services.getLogger().error("Unexpected problem starting up membership services", e);
+      throw new SystemConnectException("Problem starting up membership services", e);
+    }
-    membership.start();
+    try {
+      membership.start();
+    } catch (ConnectionException e) {
+      throw new DistributionException(
+          "Unable to create membership manager",
+          e);
+    } catch (SecurityException e) {
+      String failReason = e.getMessage();
+      if (failReason.contains("Failed to find credentials")) {
+        throw new AuthenticationRequiredException(failReason);
+      }
+      throw new GemFireSecurityException(e.getMessage(),
+          e);
+    } catch (MembershipConfigurationException e) {
+      throw new GemFireConfigException(e.getMessage());
+    } catch (MemberStartupException e) {
+      throw new SystemConnectException(e.getMessage());
+    } catch (RuntimeException e) {
+      logger.error("Unexpected problem starting up membership services", e);
+      throw new SystemConnectException("Problem starting up membership services: " + e.getMessage()
+          + ".  Consult log file for more details");
+    }
-    membership.checkCancelled();
+    checkCancelled();
+   * This method catches membership exceptions that need to be translated into
+   * exceptions implementing CancelException in order to satisfy geode-core
+   * error handling.
+   */
+  private void checkCancelled() {
+    try {
+      membership.checkCancelled();
+    } catch (MembershipClosedException e) {
+      throw new DistributedSystemDisconnectedException(e.getMessage());
+    }
+  }
+
+  /**
-        membership.checkCancelled();
+        checkCancelled();
+    } catch (MembershipClosedException e) {
+      throw new DistributedSystemDisconnectedException(e.getMessage(), e.getCause());
-      membership.checkCancelled();
-      throw ex; // see bug 41416
+      throw ex;
-        membership.checkCancelled();
+        checkCancelled();
-      Map<String, Long> state) throws InterruptedException {
+      Map<String, Long> state) throws InterruptedException, TimeoutException {
-    return membership.requestMemberRemoval(member, reason);
+    try {
+      return membership.requestMemberRemoval(member, reason);
+    } catch (MemberDisconnectedException | MembershipClosedException e) {
+      throw new DistributedSystemDisconnectedException("Distribution is closed");
+    } catch (RuntimeException e) {
+      if (!membership.isConnected()) {
+        throw new DistributedSystemDisconnectedException("Distribution is closed", e);
+      }
+      throw e;
+    }
-  public void registerTestHook(
-      MembershipTestHook mth) {
-    membership.registerTestHook(mth);
-  }
-
-  @Override
-  public void unregisterTestHook(
-      MembershipTestHook mth) {
-    membership.unregisterTestHook(mth);
-  }
-
-  @Override
-    public void messageReceived(Message<InternalDistributedMember> msg) {
+    public void messageReceived(Message<InternalDistributedMember> msg)
+        throws MemberShunnedException {
-    public boolean disconnect(Exception exception) {
+    public boolean disconnect(Exception cause) {
+      Exception exception = cause;
+      // translate into a ForcedDisconnectException if necessary
+      if (cause instanceof MemberDisconnectedException) {
+        exception = new ForcedDisconnectException(cause.getMessage());
+        if (cause.getCause() != null) {
+          exception.initCause(cause.getCause());
+        }
+      }
