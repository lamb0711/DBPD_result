GEODE-3940: Revert "GEODE-3801: Use hardlinks for backup oplog files (#963)"

This reverts commit 6a4e50e7ef2b7a3114e0ec0ba4f1a738de881dfd.

The revision is causing a hang in Backup which is filed as
GEODE-3940.

-  private static Region<Object, Object> getRegion(Cache cache, DiskRegionProperties diskProps,
-      Scope regionScope) {
+  public static Region getRegion(Cache cache, DiskRegionProperties diskProps, Scope regionScope) {
+    Region region = null;
+    // Properties props = new Properties();
-    Region<Object, Object> region = null;
-  public static Region<Object, Object> getSyncPersistOnlyRegion(Cache cache,
+  public static Region getSyncPersistOnlyRegion(Cache cache,
-  public static Region<Object, Object> getAsyncPersistOnlyRegion(Cache cache,
+  public static Region getAsyncPersistOnlyRegion(Cache cache,
-  public static Region<Object, Object> getSyncOverFlowOnlyRegion(Cache cache,
+  public static Region getSyncOverFlowOnlyRegion(Cache cache,
-  public static Region<Object, Object> getAsyncOverFlowOnlyRegion(Cache cache,
+  public static Region getAsyncOverFlowOnlyRegion(Cache cache,
-  public static Region<Object, Object> getSyncOverFlowAndPersistRegion(Cache cache,
+  public static Region getSyncOverFlowAndPersistRegion(Cache cache,
-  public static Region<Object, Object> getAsyncOverFlowAndPersistRegion(Cache cache,
+  public static Region getAsyncOverFlowAndPersistRegion(Cache cache,
-  public static Region<Object, Object> getSyncHeapLruAndPersistRegion(Cache cache,
+  public static Region getSyncHeapLruAndPersistRegion(Cache cache,
+
+  public static Region getAsyncHeapLruAndPersistRegion(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
+    if (diskRegionProperties == null) {
+      diskRegionProperties = new DiskRegionProperties();
+    }
+    diskRegionProperties.setPersistBackup(true);
+    diskRegionProperties.setSynchronous(false);
+    diskRegionProperties.setHeapEviction(true);
+    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
+  }
+
+  public static Region getSyncPersistOnlyRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties, String regionName) {
+    if (diskRegionProperties == null) {
+      diskRegionProperties = new DiskRegionProperties();
+    }
+    diskRegionProperties.setMaxOplogSize(0);
+    diskRegionProperties.setRolling(false);
+    diskRegionProperties.setPersistBackup(true);
+    diskRegionProperties.setSynchronous(true);
+    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
+
+  }
+
+  public static Region getAsyncPersistOnlyRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
+    if (diskRegionProperties == null) {
+      diskRegionProperties = new DiskRegionProperties();
+    }
+    diskRegionProperties.setMaxOplogSize(0);
+    diskRegionProperties.setRolling(false);
+    diskRegionProperties.setPersistBackup(true);
+    diskRegionProperties.setSynchronous(false);
+    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
+  }
+
+  public static Region getSyncOverFlowOnlyRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
+    if (diskRegionProperties == null) {
+      diskRegionProperties = new DiskRegionProperties();
+    }
+    diskRegionProperties.setMaxOplogSize(0);
+    diskRegionProperties.setRolling(false);
+    diskRegionProperties.setPersistBackup(false);
+    diskRegionProperties.setSynchronous(true);
+    diskRegionProperties.setOverflow(true);
+    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
+  }
+
+  public static Region getAsyncOverFlowOnlyRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
+    if (diskRegionProperties == null) {
+      diskRegionProperties = new DiskRegionProperties();
+    }
+    diskRegionProperties.setMaxOplogSize(0);
+    diskRegionProperties.setRolling(false);
+    diskRegionProperties.setPersistBackup(false);
+    diskRegionProperties.setSynchronous(false);
+    diskRegionProperties.setOverflow(true);
+    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
+  }
+
+  public static Region getSyncOverFlowAndPersistRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
+    if (diskRegionProperties == null) {
+      diskRegionProperties = new DiskRegionProperties();
+    }
+    diskRegionProperties.setMaxOplogSize(0);
+    diskRegionProperties.setRolling(false);
+    diskRegionProperties.setPersistBackup(true);
+    diskRegionProperties.setSynchronous(true);
+    diskRegionProperties.setOverflow(true);
+    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
+  }
+
+  public static Region getAsyncOverFlowAndPersistRegionInfiniteOplog(Cache cache,
+      DiskRegionProperties diskRegionProperties) {
+    if (diskRegionProperties == null) {
+      diskRegionProperties = new DiskRegionProperties();
+    }
+    diskRegionProperties.setMaxOplogSize(0);
+    diskRegionProperties.setRolling(false);
+    diskRegionProperties.setPersistBackup(true);
+    diskRegionProperties.setSynchronous(false);
+    diskRegionProperties.setOverflow(true);
+    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
+  }
+
