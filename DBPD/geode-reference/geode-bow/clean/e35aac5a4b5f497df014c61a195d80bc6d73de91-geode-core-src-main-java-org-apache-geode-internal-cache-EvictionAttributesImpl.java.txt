Merge branch 'release/1.5.0'

-import org.apache.geode.cache.Region;
-import org.apache.geode.internal.cache.eviction.CountLRUEviction;
-import org.apache.geode.internal.cache.eviction.EvictionController;
-import org.apache.geode.internal.cache.eviction.HeapLRUController;
-import org.apache.geode.internal.cache.eviction.MemoryLRUController;
- * <code>Region</code>. EvictionAttributesImpl were born out of the previoulsy deprecated
- * CapacityController interface. Eviction, as defined here, is the process of removing an Entry from
- * the Region and potentially placing it elsewhere, as defined by the
- * {@link org.apache.geode.cache.EvictionAction}. The algorithms used to determine when to perform
- * the <code>EvictionAction</code> are enumerated in the
- * {@link org.apache.geode.cache.EvictionAlgorithm} class.
+ * <code>Region</code>. Eviction, as defined here, is the process of removing an Entry from the
+ * Region and potentially placing it elsewhere, as defined by the {@link EvictionAction}. The
+ * algorithms used to determine when to perform the <code>EvictionAction</code> are enumerated in
+ * the {@link EvictionAlgorithm} class.
-public class EvictionAttributesImpl extends EvictionAttributes
-    implements EvictionAttributesMutator {
+public class EvictionAttributesImpl extends EvictionAttributes {
-  private org.apache.geode.cache.EvictionAlgorithm algorithm =
-      org.apache.geode.cache.EvictionAlgorithm.NONE;
+  private EvictionAlgorithm algorithm = EvictionAlgorithm.NONE;
-  /**
-   * The Eviction Controller instance generated as a result of processing this instance Typically
-   * used for any mutation operations
-   */
-  private volatile EvictionController evictionController;
-
-   * construct a new EvictionAttributes with the same characteristics as the given attributes, but
-   * not sharing the same evictionController.
-   *
-   * <p>
-   * author bruce
+   * copy constructor
-  public EvictionAttributesImpl(EvictionAttributesImpl other) {
-    this.algorithm = other.algorithm;
-    this.sizer = other.sizer;
-    this.maximum = other.maximum;
-    this.action = other.action;
-    // this.evictionController = null;
+  public EvictionAttributesImpl(EvictionAttributes other) {
+    this.algorithm = other.getAlgorithm();
+    this.sizer = other.getObjectSizer();
+    this.maximum = other.getMaximum();
+    this.action = other.getAction();
-  public EvictionAttributesImpl setAlgorithm(org.apache.geode.cache.EvictionAlgorithm algorithm) {
+  public EvictionAttributesImpl setAlgorithm(EvictionAlgorithm algorithm) {
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.EvictionAttributes#getObjectSizer()
-   */
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.EvictionAttributes#getAlgorithm()
-   */
-  public org.apache.geode.cache.EvictionAlgorithm getAlgorithm() {
+  public EvictionAlgorithm getAlgorithm() {
-  @Override
-  public void setMaximum(int maximum) {
-    this.maximum = maximum;
-    if (this.evictionController != null) {
-      this.evictionController.setLimit(this.maximum);
-    }
-  }
-
-   * @param maximum parameter for the given {@link org.apache.geode.cache.EvictionAlgorithm}
+   * @param maximum parameter for the given {@link EvictionAlgorithm}
-  public EvictionAttributesImpl internalSetMaximum(int maximum) {
+  public EvictionAttributesImpl setMaximum(int maximum) {
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.EvictionAttributes#getMaximum()
-   */
-      throw new UnsupportedOperationException("LRUHeap does not support a maximum");
+      return 0;
-   * {@link org.apache.geode.cache.EvictionAlgorithm} uses to perform the eviction.
+   * {@link EvictionAlgorithm} uses to perform the eviction.
-  /*
-   * (non-Javadoc)
-   *
-   * @see org.apache.geode.cache.EvictionAttributes#getAction()
-   */
-  /**
-   * Build the appropriate eviction controller using the attributes provided.
-   *
-   * @return the super of the eviction controller or null if no {@link EvictionAction} is set.
-   *
-   * @see EvictionAttributes
-   */
-  public EvictionController createEvictionController(Region region, boolean isOffHeap) {
-    if (this.algorithm == EvictionAlgorithm.LRU_ENTRY) {
-      this.evictionController = new CountLRUEviction(this.maximum, this.action, region);
-    } else if (this.algorithm == EvictionAlgorithm.LRU_HEAP) {
-      this.evictionController = new HeapLRUController(this.action, region, this.sizer);
-    } else if (this.algorithm == EvictionAlgorithm.LRU_MEMORY) {
-      this.evictionController =
-          new MemoryLRUController(this.maximum, this.sizer, this.action, region, isOffHeap);
-    } else if (this.algorithm == EvictionAlgorithm.LIFO_ENTRY) {
-      this.evictionController = new CountLRUEviction(this.maximum, this.action, region);
-    } else if (this.algorithm == EvictionAlgorithm.LIFO_MEMORY) {
-      this.evictionController =
-          new MemoryLRUController(this.maximum, this.sizer, this.action, region, isOffHeap);
-    } else {
-      // for all other algorithms, return null
-      this.evictionController = null;
-    }
-    return this.evictionController;
-  }
-
-    return this.algorithm == org.apache.geode.cache.EvictionAlgorithm.LIFO_ENTRY;
+    return this.algorithm == EvictionAlgorithm.LIFO_ENTRY;
-    return this.algorithm == org.apache.geode.cache.EvictionAlgorithm.LIFO_MEMORY;
+    return this.algorithm == EvictionAlgorithm.LIFO_MEMORY;
