Merge branch 'release/1.0.0-incubating.M3'

-import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import org.apache.lucene.queryparser.classic.MultiFieldQueryParser;
-import org.apache.lucene.queryparser.classic.ParseException;
+import org.apache.lucene.queryparser.flexible.core.QueryNodeException;
+import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;
+import com.gemstone.gemfire.GemFireCheckedException;
+import com.gemstone.gemfire.GemFireException;
+import com.gemstone.gemfire.cache.lucene.LuceneQueryException;
- * Constructs a Lucene Query object by parsing a search string. The class uses {@link MultiFieldQueryParser}. It sets
+ * Constructs a Lucene Query object by parsing a search string. The class uses {@link StandardQueryParser}. It sets
+
+  private String defaultField;
+
-    this(null);
+    this(null, null);
-  public StringQueryProvider(String query) {
+  public StringQueryProvider(String query, String defaultField) {
+    this.defaultField = defaultField;
-  public synchronized Query getQuery(LuceneIndex index) throws QueryException {
+  public synchronized Query getQuery(LuceneIndex index) throws LuceneQueryException {
-
-      //TODO  get the analyzer from the index
-      MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new StandardAnalyzer());
+      LuceneIndexImpl indexImpl = (LuceneIndexImpl) index;
+      StandardQueryParser parser = new StandardQueryParser(indexImpl.getAnalyzer());
-        luceneQuery = parser.parse(query);
-      } catch (ParseException e) {
-        logger.debug("Malformed lucene query: " + query, e);
-        throw new QueryException(e);
+        luceneQuery = parser.parse(query, defaultField);
+        if (logger.isDebugEnabled()) {
+          logger.debug("User query " + query + " is parsed to be: " + luceneQuery);
+        }
+      } catch (QueryNodeException e) {
+        logger.debug("Query node exception:" + query, e);
+        throw new LuceneQueryException("Malformed lucene query: " + query, e);
+    DataSerializer.writeString(defaultField, out);
+    defaultField = DataSerializer.readString(in);
