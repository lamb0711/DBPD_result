GEODE-7851: Pulse Oauth Configuration (#4823)

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Joris Melchior <jmelchior@pivotal.io>

* create an OAuthSecurityConfig to configure spring using oauth
* add PULSE as one of the oauth-enabled-component, and if pulse is set to use oauth, set the OAuthSecurityConfig as the active security profile
* use pulse.properties in the locator's working dir to externalize pulse authentication provider configuration
+import java.util.Arrays;
+import org.apache.geode.security.AuthTokenEnabledComponents;
+  public static final String SPRING_PROFILES_ACTIVE = "spring.profiles.active";
-      if (securityService.isIntegratedSecurity() || StringUtils.isNotBlank(pwFile)) {
-        System.setProperty("spring.profiles.active", "pulse.authentication.gemfire");
+      if (securityService.isIntegratedSecurity()) {
+        String[] authTokenEnabledComponents = config.getSecurityAuthTokenEnabledComponents();
+        boolean pulseOauth = Arrays.stream(authTokenEnabledComponents)
+            .anyMatch(AuthTokenEnabledComponents::hasPulse);
+        if (pulseOauth) {
+          System.setProperty(SPRING_PROFILES_ACTIVE, "pulse.authentication.oauth");
+        } else {
+          System.setProperty(SPRING_PROFILES_ACTIVE, "pulse.authentication.gemfire");
+        }
+      } else if (StringUtils.isNotBlank(pwFile)) {
+        System.setProperty(SPRING_PROFILES_ACTIVE, "pulse.authentication.gemfire");
+      } else {
+        System.setProperty(SPRING_PROFILES_ACTIVE, "pulse.authentication.default");
