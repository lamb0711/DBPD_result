Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * value is the amount by which the client wants to increase/decrease
- * the item. It is a decimal representation of a 64-bit unsigned integer.
+ * value is the amount by which the client wants to increase/decrease the item. It is a decimal
+ * representation of a 64-bit unsigned integer.
- * The data for the item is
- * treated as decimal representation of a 64-bit unsigned integer.
- * Also, the item must already exist for incr/decr to work; these commands won't pretend
- * that a non-existent key exists with value 0; instead, they will fail.
+ * The data for the item is treated as decimal representation of a 64-bit unsigned integer. Also,
+ * the item must already exist for incr/decr to work; these commands won't pretend that a
+ * non-existent key exists with value 0; instead, they will fail.
-    
+
-    
+
-      ValueWrapper newValWrapper = ValueWrapper.getWrappedValue(newVal.array(), 0/*flags*/);
+      ValueWrapper newValWrapper = ValueWrapper.getWrappedValue(newVal.array(), 0/* flags */);
-  
+
-    
+
-    
+
-    
+
-            newValWrapper = ValueWrapper.getWrappedValue(newVal.array(), 0/*flags*/);
+            newValWrapper = ValueWrapper.getWrappedValue(newVal.array(), 0/* flags */);
-        newValWrapper = ValueWrapper.getWrappedValue(newVal.array(), 0/*flags*/);
+        newValWrapper = ValueWrapper.getWrappedValue(newVal.array(), 0/* flags */);
-    
+
-    
+
-      getLogger().fine("incr:key:"+key+" incrBy:"+incrBy+" initVal:"+initialVal+" exp:"+expiration+" notFound:"+notFound);
+      getLogger().fine("incr:key:" + key + " incrBy:" + incrBy + " initVal:" + initialVal + " exp:"
+          + expiration + " notFound:" + notFound);
-    
+
-  
+
