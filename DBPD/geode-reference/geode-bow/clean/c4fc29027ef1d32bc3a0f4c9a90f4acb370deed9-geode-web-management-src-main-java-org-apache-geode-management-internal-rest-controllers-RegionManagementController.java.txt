Geode 7424 create index (#4458)

co-authored-by: Jinmei Liao <jliao@pivotal.io>

+import static org.apache.geode.management.configuration.Index.INDEXES;
-import org.apache.geode.management.runtime.RuntimeInfo;
+import org.apache.geode.management.runtime.IndexInfo;
-  public static final String INDEXES = "/indexes";
-  public ClusterManagementListResult<Index, RuntimeInfo> listIndex(
+  public ClusterManagementListResult<Index, IndexInfo> listIndex(
-  public ClusterManagementListResult<Index, RuntimeInfo> listAllIndex(
+  public ClusterManagementListResult<Index, IndexInfo> listAllIndex(
-  public ClusterManagementGetResult<Index, RuntimeInfo> getIndex(
+  public ClusterManagementGetResult<Index, IndexInfo> getIndex(
+
+  @ApiOperation(value = "create index")
+  @ApiResponses({
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 409, message = "Index already exists."),
+      @ApiResponse(code = 500, message = "Internal error.")})
+  @PreAuthorize("@securityService.authorize('CLUSTER', 'MANAGE', 'QUERY')")
+  @PostMapping(INDEXES)
+  public ResponseEntity<ClusterManagementResult> createIndex(
+      @RequestBody Index indexConfig) {
+    ClusterManagementResult result =
+        clusterManagementService.create(indexConfig);
+    return new ResponseEntity<>(result,
+        HttpStatus.CREATED);
+  }
+
+  @ApiOperation(value = "create region index")
+  @ApiResponses({
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 409, message = "Index already exists."),
+      @ApiResponse(code = 500, message = "Internal error.")})
+  @PreAuthorize("@securityService.authorize('CLUSTER', 'MANAGE', 'QUERY')")
+  @PostMapping(REGION_CONFIG_ENDPOINT + "/{regionName}" + INDEXES)
+  public ResponseEntity<ClusterManagementResult> createIndexOnRegion(
+      @RequestBody Index indexConfig, @PathVariable String regionName) {
+    if (indexConfig.getRegionName() == null) {
+      indexConfig.setRegionPath(regionName);
+    } else if (!regionName.equals(indexConfig.getRegionName())) {
+      throw new IllegalArgumentException(
+          "Region name in path must match Region name in configuration");
+    }
+    ClusterManagementResult result =
+        clusterManagementService.create(indexConfig);
+    return new ResponseEntity<>(result,
+        HttpStatus.CREATED);
+  }
