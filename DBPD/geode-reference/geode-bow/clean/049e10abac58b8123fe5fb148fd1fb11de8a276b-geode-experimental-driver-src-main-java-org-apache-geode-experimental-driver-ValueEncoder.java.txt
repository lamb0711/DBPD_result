GEODE-4961: Allowing custom serialization formats with the protobuf protocol

Adding a new ValueSerializer interface that users can implement to
control the serialization format of data sent using the protobuf
protocol.

ValueSerializers are registered on the server side using the java
ServiceLoader mechanism. They are selected by the client using a new
valueFormat field in the handshake.

Renamed AuthenticationRequest to HandshakeRequest. Credentials
and valueFormat are all sent as part of a single HandshakeRequest.

Renamed the connection states to make them a little easier to
understand, and removed some duplicate states.

The new states are RequireVersion, RequireAuthentication,
AcceptMessages, InvalidSecurity, and TerminateConnection



+import java.io.IOException;
+
+  private final ValueSerializer valueSerializer;
+
+  public ValueEncoder(ValueSerializer valueSerializer) {
+    this.valueSerializer = valueSerializer;
+  }
+
-  static BasicTypes.EncodedValue encodeValue(Object unencodedValue) {
+  BasicTypes.EncodedValue encodeValue(Object unencodedValue) {
+
+    if (valueSerializer.supportsPrimitives()) {
+      ByteString customBytes = customSerialize(unencodedValue);
+      return builder.setCustomObjectResult(customBytes).build();
+    }
+
-      throw new IllegalStateException("We don't know how to handle an object of type "
-          + unencodedValue.getClass() + ": " + unencodedValue);
+      ByteString customBytes = customSerialize(unencodedValue);
+      if (customBytes != null) {
+        builder.setCustomObjectResult(customBytes);
+      } else {
+        throw new IllegalStateException("We don't know how to handle an object of type "
+            + unencodedValue.getClass() + ": " + unencodedValue);
+      }
+  private ByteString customSerialize(Object unencodedValue) {
+    try {
+      ByteString customBytes = valueSerializer.serialize(unencodedValue);
+      return customBytes;
+    } catch (IOException e) {
+      throw new IllegalStateException(e);
+    }
+  }
+
-  static Object decodeValue(BasicTypes.EncodedValue encodedValue) {
+  Object decodeValue(BasicTypes.EncodedValue encodedValue) {
+      case CUSTOMOBJECTRESULT:
+        try {
+          return valueSerializer.deserialize(encodedValue.getCustomObjectResult());
+        } catch (IOException | ClassNotFoundException e) {
+          throw new IllegalStateException(e);
+        }
-  static BasicTypes.Entry encodeEntry(Object unencodedKey, Object unencodedValue) {
+  BasicTypes.Entry encodeEntry(Object unencodedKey, Object unencodedValue) {
