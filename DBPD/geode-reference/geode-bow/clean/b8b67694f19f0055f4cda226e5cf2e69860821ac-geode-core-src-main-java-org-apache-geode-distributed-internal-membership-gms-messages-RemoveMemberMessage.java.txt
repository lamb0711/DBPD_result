Merge branch 'develop' into feature/GEODE-7049

-import org.apache.geode.DataSerializer;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.internal.Version;
+import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.GMSUtil;
+import org.apache.geode.internal.serialization.DeserializationContext;
+import org.apache.geode.internal.serialization.SerializationContext;
+import org.apache.geode.internal.serialization.StaticSerialization;
+import org.apache.geode.internal.serialization.Version;
-public class RemoveMemberMessage extends HighPriorityDistributionMessage implements HasMemberID {
-  private InternalDistributedMember memberID;
+public class RemoveMemberMessage extends AbstractGMSMessage implements HasMemberID {
+  private GMSMember memberID;
-  public RemoveMemberMessage(InternalDistributedMember recipient, InternalDistributedMember id,
+  public RemoveMemberMessage(GMSMember recipient, GMSMember id,
-  public RemoveMemberMessage(List<InternalDistributedMember> recipients,
-      InternalDistributedMember id, String reason) {
+  public RemoveMemberMessage(List<GMSMember> recipients,
+      GMSMember id, String reason) {
-  public void process(ClusterDistributionManager dm) {
-    throw new IllegalStateException("this message is not intended to execute in a thread pool");
-  }
-
-  @Override
-  public InternalDistributedMember getMemberID() {
+  public GMSMember getMemberID() {
-  public void toData(DataOutput out) throws IOException {
-    DataSerializer.writeObject(memberID, out);
-    DataSerializer.writeString(reason, out);
+  public void toData(DataOutput out,
+      SerializationContext context) throws IOException {
+    GMSUtil.writeMemberID(memberID, out, context);
+    StaticSerialization.writeString(reason, out);
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    memberID = DataSerializer.readObject(in);
-    reason = DataSerializer.readString(in);
+  public void fromData(DataInput in,
+      DeserializationContext context) throws IOException, ClassNotFoundException {
+    memberID = GMSUtil.readMemberID(in, context);
+    reason = StaticSerialization.readString(in);
