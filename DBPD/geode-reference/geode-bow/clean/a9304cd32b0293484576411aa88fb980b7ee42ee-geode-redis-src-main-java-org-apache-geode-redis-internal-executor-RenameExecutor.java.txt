GEODE-8147: change rename to use Function-Delta (#5152)

* Change Redis Rename Functions to Make use of Striped Executor

Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Sarah <sabbey@pivotal.io>
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Set;
-import org.apache.geode.redis.internal.RedisData;
-import org.apache.geode.redis.internal.RedisDataType;
-import org.apache.geode.redis.internal.executor.hash.RedisHashCommands;
-import org.apache.geode.redis.internal.executor.hash.RedisHashCommandsFunctionExecutor;
-import org.apache.geode.redis.internal.executor.set.RedisSetCommands;
-import org.apache.geode.redis.internal.executor.set.RedisSetCommandsFunctionExecutor;
-import org.apache.geode.redis.internal.executor.string.RedisStringCommands;
-import org.apache.geode.redis.internal.executor.string.RedisStringCommandsFunctionExecutor;
-import org.apache.geode.redis.internal.executor.string.StringExecutor;
-public class RenameExecutor extends StringExecutor {
+public class RenameExecutor extends AbstractExecutor {
-    List<byte[]> commandElems = command.getProcessedCommand();
-    if (commandElems.size() < 3) {
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), RedisConstants.ArityDef.KEYS));
+    List<ByteArrayWrapper> commandElems = command.getProcessedCommandWrappers();
+    ByteArrayWrapper key = command.getKey();
+    ByteArrayWrapper newKey = commandElems.get(2);
+    RedisKeyCommands redisKeyCommands = getRedisKeyCommands(context);
+
+    if (key.equals(newKey)) {
+      command.setResponse(Coder.getSimpleStringResponse(context.getByteBufAllocator(), "OK"));
-    ByteArrayWrapper key = command.getKey();
-    ByteArrayWrapper newKey = new ByteArrayWrapper(commandElems.get(2));
-
-    RedisData redisData = getDataRegion(context).get(key);
-    if (redisData == null) {
+    if (!redisKeyCommands.rename(key, newKey)) {
-    RedisDataType redisDataType = redisData.getType();
-    RedisKeyCommands redisKeyCommands = getRedisKeyCommands(context);
-    switch (redisDataType) {
-      case REDIS_STRING:
-        // TODO this all needs to be done atomically. Add RENAME support to RedisStringCommands
-        RedisStringCommands redisStringCommands =
-            new RedisStringCommandsFunctionExecutor(
-                context.getRegionProvider().getDataRegion());
-        ByteArrayWrapper value = redisStringCommands.get(key);
-        redisKeyCommands.del(key);
-        redisStringCommands.set(newKey, value, null);
-        break;
-      case REDIS_HASH:
-        // TODO this all needs to be done atomically. Add RENAME support to RedisHashCommands
-        RedisHashCommands redisHashCommands =
-            new RedisHashCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());
-        Collection<ByteArrayWrapper> fieldsAndValues = redisHashCommands.hgetall(key);
-        redisKeyCommands.del(key);
-        redisKeyCommands.del(newKey);
-        redisHashCommands.hset(newKey, new ArrayList<>(fieldsAndValues), false);
-        break;
-      case REDIS_SET:
-        // TODO this all needs to be done atomically. Add RENAME support to RedisSetCommands
-        RedisSetCommands redisSetCommands =
-            new RedisSetCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());
-        Set<ByteArrayWrapper> members = redisSetCommands.smembers(key);
-        redisKeyCommands.del(key);
-        redisKeyCommands.del(newKey);
-        redisSetCommands.sadd(newKey, new ArrayList<>(members));
-        break;
-      default:
-        break;
-    }
