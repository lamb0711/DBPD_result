Implementing LuceneQueryImpl.search

Implementing search by invoking the LuceneFunction from within
LuceneQueryImpl.search and building a result set. Adding unit tests for
the same.

-import org.apache.lucene.analysis.Analyzer;
-import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import org.apache.lucene.queryparser.classic.QueryParser;
-import org.apache.lucene.search.Query;
-import com.gemstone.gemfire.cache.lucene.LuceneIndex;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.Region;
-  private Set<String> projectionFields = new HashSet<String>();
+  private String[] projectionFields = null;
+  private Cache cache;
-  /* reference to the index. One index could have multiple Queries, but one Query must belong
-   * to one index
-   */
-  private LuceneIndex relatedIndex;
-
+  LuceneQueryFactoryImpl(Cache cache) {
+    this.cache = cache;
+  }
+  
-  public LuceneQuery create(String indexName, String regionName,
-      String queryString) throws ParseException {
+  public <K, V> LuceneQuery<K, V> create(String indexName, String regionName,
+      String queryString) {
-  public LuceneQuery create(String indexName, String regionName, LuceneQueryProvider provider) {
-    LuceneQueryImpl luceneQuery = new LuceneQueryImpl(indexName, regionName, provider, projectionFields, limit, pageSize);
+  public <K, V> LuceneQuery<K, V> create(String indexName, String regionName, LuceneQueryProvider provider) {
+    Region region = cache.getRegion(regionName);
+    LuceneQueryImpl<K, V> luceneQuery = new LuceneQueryImpl<K, V>(indexName, region, provider, projectionFields, limit, pageSize);
-
-  public LuceneIndex getRelatedIndex() {
-    return this.relatedIndex;
-  }
-
-    if (fieldNames != null) {
-      for (String fieldName:fieldNames) {
-        this.projectionFields.add(fieldName);
-      }
-    }
+    projectionFields = fieldNames.clone();
