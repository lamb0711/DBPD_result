Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.ValueWrapper;
+import com.gemstone.gemfire.internal.offheap.MemoryChunkWithRefCount;
+import com.gemstone.gemfire.internal.offheap.OffHeapHelper;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-   * @param isSerializedObject
-   *          Do the bytes in <code>value</code> contain a serialized object (or
-   *          an actually <code>byte</code> array)?
-  final void put(LocalRegion region, DiskEntry entry, byte[] value,
-      boolean isSerializedObject, boolean async) throws RegionClearedException {
+  final void put(LocalRegion region, DiskEntry entry, ValueWrapper value,
+      boolean async) throws RegionClearedException {
-            oplogSet.create(region, entry, value, isSerializedObject, async);
+            oplogSet.create(region, entry, value, async);
-            oplogSet.modify(region, entry, value, isSerializedObject, async);
+            oplogSet.modify(region, entry, value, async);
-              region.entries.clear(null);
+              region.clearEntries(null);
-      region.entries.clear(rvv);
+      region.clearEntries(rvv);
-  void close() {
+  public void close() {
+  final DiskAccessException getDiskAccessException() {
+    return diskException.get();
+  }
+
-    return this.oplogCompactor == null || this.oplogCompactor.keepCompactorRunning();
+    return diskException.get() == null && (this.oplogCompactor == null || this.oplogCompactor.keepCompactorRunning());
-        region.entries.clear(null);
+        region.closeEntries();
-        region.entries.clear(null);
+        region.closeEntries();
-        region.entries.clear(null);
+        region.closeEntries();
-        region.entries.clear(null);
+        region.closeEntries();
-      String statisticsEnabledOption, boolean printToConsole) {
+      String statisticsEnabledOption, String offHeapOption, boolean printToConsole) {
-            statisticsEnabledOption, printToConsole);
+            statisticsEnabledOption, offHeapOption, printToConsole);
-          statisticsEnabledOption, printToConsole);
+          statisticsEnabledOption, offHeapOption, printToConsole);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-      Object value = re._getValueUse(foundPdx, true);
+      Object value = re._getValueRetain(foundPdx, true);
-        LRUAlgorithm ec = ea.createEvictionController(null);
+        LRUAlgorithm ec = ea.createEvictionController(null, dr.getOffHeap());
-  private Collection<DiskRegionView> getKnown() {
+  public Collection<DiskRegionView> getKnown() {
+      String offHeapOption,
-          statisticsEnabledOption, printToConsole);
+          statisticsEnabledOption, offHeapOption, printToConsole);
