GEODE-953: Cleanup geode-junit

* cleanup geode-junit usage of JUnit Rules to ensure JUnit code is always extended rather than copied
* change CRLF to LF
* remove @author tags
* fix all javadocs
* fix formatting
* add new tests
* remove ExpectedTimeout and ExpectedTimeoutTest (they were dupes of ExpectedTimeoutRule and ExpectedTimeoutRuleTest)
* use serialization by reflection for serializable subclasses of JUnit rules that lack sufficient ability to subclass
* repackage rule tests to same package as rules
* repackage serializable rules into serializable sub-package

- * 
- * @author Kirk Lund
- * @since 8.2
-  public ExpectedTimeoutRule handleAssertionErrors() {
-    this.delegate.handleAssertionErrors();
-    return this;
-  }
-  
-  public ExpectedTimeoutRule handleAssumptionViolatedExceptions() {
-    this.delegate.handleAssumptionViolatedExceptions();
-    return this;
-  }
-  
-   * Adds {@code matcher} to the list of requirements for any thrown
-   * exception.
+   * Adds {@code matcher} to the list of requirements for any thrown exception.
-   * be an instance of {@code type}
+   * be an instance of {@code type}.
-  public boolean expectsTimeout() {
-    return minDuration > 0 || maxDuration > 0;
+  /**
+   * Returns true if a timeout is expected.
+   */
+  protected boolean expectsTimeout() {
+    return this.minDuration > 0 || this.maxDuration > 0;
-  
-  public boolean expectsThrowable() {
-    return expectsThrowable = true;
+
+  /**
+   * Returns true if a Throwable is expected.
+   */
+  protected boolean expectsThrowable() {
+    return this.expectsThrowable;
-    Statement next = delegate.apply(base, description);
+    Statement next = this.delegate.apply(base, description);
-      assertThat(timeUnit.convert(duration, TimeUnit.NANOSECONDS), new TimeMatcher(timeUnit, minDuration, maxDuration));
+      assertThat(this.timeUnit.convert(duration, TimeUnit.NANOSECONDS), new TimeMatcher(this.timeUnit, this.minDuration, this.maxDuration));
-      next = base;
+      this.next = base;
-      next.evaluate();
+      this.next.evaluate();
