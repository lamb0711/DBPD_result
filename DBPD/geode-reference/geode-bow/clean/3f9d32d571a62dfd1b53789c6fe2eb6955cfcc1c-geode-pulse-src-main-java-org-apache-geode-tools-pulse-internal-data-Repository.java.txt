GEODE-7851: Pulse Oauth Support (#4936)

* GEODE-7851: Pulse Oauth Support

- create an OauthSecurityConfig to configure spring using oauth
- add PULSE as an oauth-enabled-component, and if pulse is set to use
  oauth, set the OauthSecurityConfig as the active security profile
- use pulse.properties in the locator's working dir to externalize pulse
  authentication provider configuration

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
+import java.util.Objects;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
+import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
+import org.springframework.security.oauth2.core.OAuth2AccessToken;
+import org.springframework.security.oauth2.core.user.OAuth2User;
+import org.springframework.stereotype.Component;
+@Component
-  private static Repository instance = new Repository();
-  private HashMap<String, Cluster> clusterMap = new HashMap<>();
+  private final OAuth2AuthorizedClientService authorizedClientService;
+  private final ClusterFactory clusterFactory;
+  private final HashMap<String, Cluster> clusterMap = new HashMap<>();
-  private Repository() {
-
+  public Repository() {
+    this(null);
-  public static Repository get() {
-    return instance;
+  // The authorizedClientService is required only when using OAuth2 security.
+  @Autowired
+  public Repository(
+      @Autowired(required = false) OAuth2AuthorizedClientService authorizedClientService) {
+    this(authorizedClientService, Cluster::new);
+  }
+
+  public Repository(OAuth2AuthorizedClientService authorizedClientService,
+      ClusterFactory clusterFactory) {
+    this.authorizedClientService = authorizedClientService;
+    this.clusterFactory = clusterFactory;
+    Objects.requireNonNull(jmxUseLocator, "jmxUseLocat == null");
-   * we will need to get the username form the context
+   * we will need to get the username from the context
-    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-    if (auth == null)
+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
+    if (authentication == null) {
-    return getCluster(auth.getName(), null);
+    }
+
+    if (authentication instanceof OAuth2AuthenticationToken) {
+      OAuth2AuthenticationToken authenticationToken = (OAuth2AuthenticationToken) authentication;
+      OAuth2AuthorizedClient authorizedClient = authorizedClientService.loadAuthorizedClient(
+          authenticationToken.getAuthorizedClientRegistrationId(),
+          authenticationToken.getName());
+
+      OAuth2User authenticatedPrincipal = authenticationToken.getPrincipal();
+      String authenticatedPrincipalName = authenticatedPrincipal.getName();
+      OAuth2AccessToken accessToken = authorizedClient.getAccessToken();
+      String accessTokenValue = accessToken.getTokenValue();
+      return getClusterWithCredentials(authenticatedPrincipalName, accessTokenValue);
+    }
+
+    return getClusterWithUserNameAndPassword(authentication.getName(), null);
-  public Cluster getCluster(String username, String password) {
+  public Cluster getClusterWithUserNameAndPassword(String userName, String password) {
+    return getClusterWithCredentials(userName, new String[] {userName, password});
+  }
+
+  public Cluster getClusterWithCredentials(String username, Object credentials) {
-        data = new Cluster(this.host, this.port, username);
+        data = clusterFactory.create(host, port, username, resourceBundle, this);
-        data.setName(PulseConstants.APP_NAME + "-" + this.host + ":" + this.port + ":" + username);
-        data.connectToGemFire(password);
+        data.setName(PulseConstants.APP_NAME + "-" + host + ":" + port + ":" + username);
+        data.connectToGemFire(credentials);
