GEODE-7010: Replace static globals in CachePerfStats with StatisticsClock (#3859)

* Replace CachePerfStats.getStatTime with Cache owned StatisticsClock
* Inject StatisticsClock dependency via constructor

+import org.apache.geode.internal.statistics.StatisticsClock;
-  public TXState(TXStateProxy proxy, boolean onBehalfOfRemoteStub) {
-    this(proxy, onBehalfOfRemoteStub, new SingleThreadJTAExecutor());
+  private final StatisticsClock statisticsClock;
+
+  public TXState(TXStateProxy proxy, boolean onBehalfOfRemoteStub,
+      StatisticsClock statisticsClock) {
+    this(proxy, onBehalfOfRemoteStub, new SingleThreadJTAExecutor(), statisticsClock);
-      SingleThreadJTAExecutor singleThreadJTAExecutor) {
-    this.beginTime = CachePerfStats.getStatTime();
+      SingleThreadJTAExecutor singleThreadJTAExecutor, StatisticsClock statisticsClock) {
+    this.beginTime = statisticsClock.getTime();
+    this.statisticsClock = statisticsClock;
-    final long conflictStart = CachePerfStats.getStatTime();
+    final long conflictStart = statisticsClock.getTime();
-    if (CachePerfStats.enableClockStats)
+    if (statisticsClock.isEnabled())
-          .incTxConflictCheckTime(CachePerfStats.getStatTime() - conflictStart);
+          .incTxConflictCheckTime(statisticsClock.getTime() - conflictStart);
-        final long conflictStart = CachePerfStats.getStatTime();
+        final long conflictStart = statisticsClock.getTime();
-        if (CachePerfStats.enableClockStats)
+        if (statisticsClock.isEnabled())
-              .incTxConflictCheckTime(CachePerfStats.getStatTime() - conflictStart);
+              .incTxConflictCheckTime(statisticsClock.getTime() - conflictStart);
-    final long opStart = CachePerfStats.getStatTime();
+    final long opStart = statisticsClock.getTime();
-    final long opStart = CachePerfStats.getStatTime();
+    final long opStart = statisticsClock.getTime();
-    final long opStart = CachePerfStats.getStatTime();
+    final long opStart = statisticsClock.getTime();
