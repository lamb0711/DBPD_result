Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.cache.DistributedPutAllOperation.PutAllEntryData;
+  public void setRemoveAllEntryData(RemoveAllEntryData[] removeAllEntryData) {
+    for (int i = 0; i < removeAllEntryData.length; i++) {
+      removeAllData[i] = removeAllEntryData[i];
+    }
+    this.removeAllDataSize = removeAllEntryData.length;
+  }
+  
+  /**
+   * Add an entry that this removeAll operation should distribute.
+   */
+  public void addEntry(RemoveAllEntryData removeAllEntry)
+  {
+    this.removeAllData[this.removeAllDataSize] = removeAllEntry;
+    this.removeAllDataSize += 1;
+  }
+  
+  public void freeOffHeapResources() {
+    // I do not use eventIterator here because it forces the lazy creation of EntryEventImpl by calling getEventForPosition.
+    for (int i=0; i < this.removeAllDataSize; i++) {
+      RemoveAllEntryData entry = this.removeAllData[i];
+      if (entry != null && entry.event != null) {
+        entry.event.release();
+      }
+    }
+  }
+
-    EntryEventImpl ev = new EntryEventImpl(
+    EntryEventImpl ev = EntryEventImpl.create(
+    boolean returnedEv = false;
+    try {
+    returnedEv = true;
+    } finally {
+      if (!returnedEv) {
+        ev.release();
+      }
+    }
+        prMsg.setTransactionDistributed(event.getRegion().getCache().getTxManager().isDistributed());
-      EntryEventImpl event = new EntryEventImpl(
+      EntryEventImpl event = EntryEventImpl.create(
+        ev.release();
-      EntryEventImpl ev = new EntryEventImpl(rgn, entry.getOp(),
+      EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(),
+      boolean returnedEv = false;
+      try {
+      returnedEv = true;
+      } finally {
+        if (!returnedEv) {
+          ev.release();
+        }
+      }
