Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Reads the first line from the request and interprets the {@link Command}
- * from the memcached client
+ * Reads the first line from the request and interprets the {@link Command} from the memcached
+ * client
-  
-  private static final ThreadLocal<CharsetDecoder> asciiDecoder = new ThreadLocal<CharsetDecoder>() {
-    @Override
-    protected CharsetDecoder initialValue() {
-      return charsetASCII.newDecoder();
-    }
-  };
-  
+
+  private static final ThreadLocal<CharsetDecoder> asciiDecoder =
+      new ThreadLocal<CharsetDecoder>() {
+        @Override
+        protected CharsetDecoder initialValue() {
+          return charsetASCII.newDecoder();
+        }
+      };
+
-  
+
-  
+
-  private CharBuffer commandBuffer = CharBuffer.allocate(11);   // no command exceeds 9 chars
-  
+  private CharBuffer commandBuffer = CharBuffer.allocate(11); // no command exceeds 9 chars
+
-    // returns hasRemaining() false 
+    // returns hasRemaining() false
-  
+
-        ConnectionHandler.getLogger().finer("Request:"+buffer+str.toString());
+        ConnectionHandler.getLogger().finer("Request:" + buffer + str.toString());
-        buffer.position(buffer.position() - 2 /*since we read two bytes*/);
+        buffer.position(buffer.position() - 2 /* since we read two bytes */);
-      ConnectionHandler.getLogger().fine("read command "+cmd);
+      ConnectionHandler.getLogger().fine("read command " + cmd);
-  
+
-  
+
-  
+
+   * 
-  
+
-    for (int i=0; i<cleanByteArray.length; i++) {
+    for (int i = 0; i < cleanByteArray.length; i++) {
-        ConnectionHandler.getLogger().finer("sending reply:"+reply+" "+Command.buffertoString(reply));
+        ConnectionHandler.getLogger()
+            .finer("sending reply:" + reply + " " + Command.buffertoString(reply));
