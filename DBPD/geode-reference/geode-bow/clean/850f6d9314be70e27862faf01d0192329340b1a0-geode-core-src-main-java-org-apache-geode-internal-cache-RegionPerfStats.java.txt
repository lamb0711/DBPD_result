GEODE-7326: Add cache gets timers (#4223)

- Add timers to record get operations from a Java client
- Tag each timer with region name and result (hit/miss)
- Close existing entries gauge when closing RegionPerfStats
- Improve micrometer assertj assertions
- Make public fields immutable on Get70.Entry

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>
+import static java.util.concurrent.TimeUnit.NANOSECONDS;
+
+import io.micrometer.core.instrument.Timer;
+  private static final String HIT_TAG_VALUE = "hit";
+  private static final String MISS_TAG_VALUE = "miss";
+  private final Timer cacheGetsHitTimer;
+  private final Timer cacheGetsMissTimer;
-      CachePerfStats cachePerfStats, InternalRegion region,
-      MeterRegistry meterRegistry) {
+      CachePerfStats cachePerfStats, InternalRegion region, MeterRegistry meterRegistry) {
+    this(statisticsFactory, textId, clock, cachePerfStats, region, meterRegistry,
+        registerEntriesGauge(region, meterRegistry),
+        registerCacheGetsTimer(region, meterRegistry, HIT_TAG_VALUE),
+        registerCacheGetsTimer(region, meterRegistry, MISS_TAG_VALUE));
+  }
+
+  @VisibleForTesting
+  RegionPerfStats(StatisticsFactory statisticsFactory, String textId, StatisticsClock clock,
+      CachePerfStats cachePerfStats, InternalRegion region, MeterRegistry meterRegistry,
+      Gauge entriesGauge, Timer cacheGetsHitTimer, Timer cacheGetsMissTimer) {
+
-    entriesGauge = Gauge.builder("geode.cache.entries", region::getLocalSize)
-        .description("Current number of entries in the region.")
-        .tag("region", region.getName())
-        .tag("data.policy", region.getDataPolicy().toString())
-        .baseUnit("entries")
-        .register(meterRegistry);
+    this.entriesGauge = entriesGauge;
+    this.cacheGetsHitTimer = cacheGetsHitTimer;
+    this.cacheGetsMissTimer = cacheGetsMissTimer;
+
+    entriesGauge.close();
+
+    meterRegistry.remove(cacheGetsHitTimer);
+    cacheGetsHitTimer.close();
+
+    meterRegistry.remove(cacheGetsMissTimer);
+    cacheGetsMissTimer.close();
+
+  public void endGetForClient(long start, boolean miss) {
+    long totalNanos = clock.isEnabled() ? getTime() - start : 0;
+    if (miss) {
+      cacheGetsMissTimer.record(totalNanos, NANOSECONDS);
+    } else {
+      cacheGetsHitTimer.record(totalNanos, NANOSECONDS);
+    }
+  }
+
+  @Override
+
+  private static Gauge registerEntriesGauge(InternalRegion region, MeterRegistry meterRegistry) {
+    return Gauge.builder("geode.cache.entries", region::getLocalSize)
+        .description("Current number of entries in the region.")
+        .tag("region", region.getName())
+        .tag("data.policy", region.getDataPolicy().toString())
+        .baseUnit("entries")
+        .register(meterRegistry);
+  }
+
+  private static Timer registerCacheGetsTimer(InternalRegion region, MeterRegistry meterRegistry,
+      String resultTagValue) {
+    return Timer.builder("geode.cache.gets")
+        .description("Total time and count for GET requests from Java or native clients.")
+        .tag("region", region.getName())
+        .tag("result", resultTagValue)
+        .register(meterRegistry);
+  }
