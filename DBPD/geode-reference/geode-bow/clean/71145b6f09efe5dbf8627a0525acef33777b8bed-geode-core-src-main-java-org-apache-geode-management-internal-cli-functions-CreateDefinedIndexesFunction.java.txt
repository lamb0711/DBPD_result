GEODE-4858: Convert *DefinedIndex commands to use ResultModel and Sinâ€¦ (#1983)


-import java.util.Iterator;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.management.internal.cli.domain.IndexInfo;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-public class CreateDefinedIndexesFunction implements InternalFunction {
-  private static final long serialVersionUID = 1L;
+public class CreateDefinedIndexesFunction implements InternalFunction<Set<RegionConfig.Index>> {
+
+  private static final long serialVersionUID = 6756381106602823693L;
-  XmlEntity createXmlEntity(final String regionName) {
-    return new XmlEntity(CacheXml.REGION, "name", regionName);
-  }
-
-  public void execute(FunctionContext context) {
-    Cache cache;
-    String memberId = null;
-    boolean lastResultSent = Boolean.FALSE;
+  public void execute(FunctionContext<Set<RegionConfig.Index>> context) {
+    Cache cache = context.getCache();
+    QueryService queryService = cache.getQueryService();
+    ResultSender<CliFunctionResult> sender = context.getResultSender();
+    String memberId = cache.getDistributedSystem().getDistributedMember().getId();
+    Set<RegionConfig.Index> indexDefinitions = context.getArguments();
-      cache = context.getCache();
-      ResultSender sender = context.getResultSender();
-      QueryService queryService = cache.getQueryService();
-      memberId = cache.getDistributedSystem().getDistributedMember().getId();
-      Set<IndexInfo> indexDefinitions = (Set<IndexInfo>) context.getArguments();
+      for (RegionConfig.Index indexDefinition : indexDefinitions) {
+        String indexName = indexDefinition.getName();
+        String regionPath = indexDefinition.getFromClause();
+        String indexedExpression = indexDefinition.getExpression();
+        IndexType indexType = IndexType.valueOfSynonym(indexDefinition.getType());
-      for (IndexInfo indexDefinition : indexDefinitions) {
-        String indexName = indexDefinition.getIndexName();
-        String regionPath = indexDefinition.getRegionPath();
-        String indexedExpression = indexDefinition.getIndexedExpression();
-
-        if (indexDefinition.getIndexType() == IndexType.PRIMARY_KEY) {
+        if (indexType == IndexType.PRIMARY_KEY) {
-        } else if (indexDefinition.getIndexType() == IndexType.HASH) {
+        } else if (indexType == IndexType.HASH) {
-      // Build the results with one XmlEntity per region.
-      List<String> processedRegions = new ArrayList<>();
-      List<CliFunctionResult> functionResults = new ArrayList<>();
-      for (Index index : indexes) {
-        String regionName = index.getRegion().getName();
-
-        if (!processedRegions.contains(regionName)) {
-          XmlEntity xmlEntity = createXmlEntity(regionName);
-          functionResults.add(new CliFunctionResult(memberId, xmlEntity));
-          processedRegions.add(regionName);
+      if (!indexes.isEmpty()) {
+        for (Index index : indexes) {
+          sender.sendResult(
+              new CliFunctionResult(memberId, true, "Created index " + index.getName()));
-      }
-
-      for (Iterator<CliFunctionResult> iterator = functionResults.iterator(); iterator.hasNext();) {
-        CliFunctionResult cliFunctionResult = iterator.next();
-
-        if (iterator.hasNext()) {
-          sender.sendResult(cliFunctionResult);
-        } else {
-          sender.lastResult(cliFunctionResult);
-          lastResultSent = Boolean.TRUE;
-        }
-      }
-
-      if (!lastResultSent) {
-        // No indexes were created and no exceptions were thrown during the process.
-        // We still need to make sure the function returns to the caller.
-        sender.lastResult(
+      } else {
+        sender.sendResult(
+
-      StringBuffer sb = new StringBuffer();
-      sb.append("Index creation failed for indexes: ").append("\n");
-      for (Map.Entry<String, Exception> failedIndex : multiIndexCreationException.getExceptionsMap()
-          .entrySet()) {
-        sb.append(failedIndex.getKey()).append(" : ").append(failedIndex.getValue().getMessage())
-            .append("\n");
+      // Some indexes may have been created, so let's get those
+      List<String> failedIndexes =
+          new ArrayList<>(multiIndexCreationException.getFailedIndexNames());
+      List<String> createdIndexes =
+          indexDefinitions.stream().filter(i -> !failedIndexes.contains(i.getName()))
+              .map(RegionConfig.Index::getName).collect(Collectors.toList());
+
+      for (String index : createdIndexes) {
+        sender.sendResult(new CliFunctionResult(memberId, true, "Created index " + index));
-      context.getResultSender()
-          .lastResult(new CliFunctionResult(memberId, multiIndexCreationException, sb.toString()));
-    } catch (Exception exception) {
-      String exceptionMessage = CliStrings.format(CliStrings.EXCEPTION_CLASS_AND_MESSAGE,
-          exception.getClass().getName(), exception.getMessage());
-      context.getResultSender()
-          .lastResult(new CliFunctionResult(memberId, exception, exceptionMessage));
+
+      for (Map.Entry<String, Exception> ex : multiIndexCreationException.getExceptionsMap()
+          .entrySet()) {
+        sender.sendResult(new CliFunctionResult(memberId, false, String
+            .format("Failed to create index %s: %s", ex.getKey(), ex.getValue().getMessage())));
+      }
+    } catch (Exception ex) {
+      sender.sendResult(new CliFunctionResult(memberId, false, ex.getMessage()));
+    } finally {
+      queryService.clearDefinedIndexes();
+
+    sender.lastResult(null);
