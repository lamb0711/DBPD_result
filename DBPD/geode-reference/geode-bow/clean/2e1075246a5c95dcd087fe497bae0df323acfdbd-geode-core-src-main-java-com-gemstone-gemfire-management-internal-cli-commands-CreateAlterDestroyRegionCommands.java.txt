Merge branch 'release/1.0.0-incubating.M3'

+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.regex.Pattern;
+
+import javax.management.MBeanServer;
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import javax.management.MBeanServer;
-import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
-import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.regex.Pattern;
+import com.gemstone.gemfire.management.internal.security.ResourceOperation;
+import org.apache.geode.security.GeodePermission.Operation;
+import org.apache.geode.security.GeodePermission.Resource;
- * 
- * @since 7.0
+ *
+ * @since GemFire 7.0
-  @CliMetaData (relatedTopic = CliStrings.TOPIC_GEMFIRE_REGION, writesToSharedConfiguration = true)
+  @CliMetaData (relatedTopic = CliStrings.TOPIC_GEODE_REGION, writesToSharedConfiguration = true)
+  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
-  @CliMetaData (relatedTopic = CliStrings.TOPIC_GEMFIRE_REGION, writesToSharedConfiguration = true)
+  @CliMetaData (relatedTopic = CliStrings.TOPIC_GEODE_REGION, writesToSharedConfiguration = true)
-                  specifiedDefaultValue = CliMetaData.ANNOTATION_DEFAULT_VALUE,
+                  specifiedDefaultValue = "INVALIDATE",
-                  specifiedDefaultValue = CliMetaData.ANNOTATION_DEFAULT_VALUE,
+                  specifiedDefaultValue = "INVALIDATE",
-                  specifiedDefaultValue = CliMetaData.ANNOTATION_DEFAULT_VALUE,
+                  specifiedDefaultValue = "INVALIDATE",
-                  specifiedDefaultValue = CliMetaData.ANNOTATION_DEFAULT_VALUE,
+                  specifiedDefaultValue = "INVALIDATE",
-                  specifiedDefaultValue = CliMetaData.ANNOTATION_DEFAULT_VALUE,
+                  specifiedDefaultValue = "null",
-                  specifiedDefaultValue = CliMetaData.ANNOTATION_DEFAULT_VALUE,
+                  specifiedDefaultValue = "null",
+    GeodeSecurityUtil.authorizeRegionManage(regionPath);
+
-  @CliMetaData(shellOnly = false, relatedTopic = CliStrings.TOPIC_GEMFIRE_REGION, writesToSharedConfiguration = true)
+  @CliMetaData(shellOnly = false, relatedTopic = CliStrings.TOPIC_GEODE_REGION, writesToSharedConfiguration = true)
+  @ResourceOperation(resource=Resource.DATA, operation = Operation.MANAGE)
-            CliStrings.format(CliStrings.DESTROY_REGION__MSG__COULDNOT_FIND_REGIONPATH_0_IN_GEMFIRE,
+            CliStrings.format(CliStrings.DESTROY_REGION__MSG__COULDNOT_FIND_REGIONPATH_0_IN_GEODE,
-  private Set<DistributedMember> findMembersForRegion(Cache cache, ManagementService managementService, String regionPath) {
+  private Set<DistributedMember> findMembersForRegion(Cache cache,
+                                                      ManagementService managementService,
+                                                      String regionPath) {
-    Set<String> regionMemberIds = Collections.emptySet();
+    Set<String> regionMemberIds = new HashSet<>();
-    String queryExp = MessageFormat.format(MBeanJMXAdapter.OBJECTNAME__REGION_MXBEAN, new Object[] {regionPath, "*"});
+
+    // needs to be escaped with quotes if it contains a hyphen
+    if (regionPath.contains("-")) {
+      regionPath = "\"" + regionPath + "\"";
+    }
+
+    String queryExp = MessageFormat.format(MBeanJMXAdapter.OBJECTNAME__REGION_MXBEAN, regionPath, "*");
-      if (queryNames != null && queryNames.size() != 0) {
-        regionMemberIds      = new HashSet<>();
+      if (queryNames == null || queryNames.isEmpty()) {
+        return membersList; // protects against null pointer exception below
-            logger.finer(regionMBeanObjectName+" is not a "+RegionMXBean.class.getSimpleName(), e);
+            logger.finer(regionMBeanObjectName + " is not a " + RegionMXBean.class.getSimpleName(), e);
-    } catch (MalformedObjectNameException e) {
-      LogWrapper.getInstance().info(e.getMessage(), e);
-    } catch (NullPointerException e) {
+    } catch (MalformedObjectNameException | NullPointerException e) {
