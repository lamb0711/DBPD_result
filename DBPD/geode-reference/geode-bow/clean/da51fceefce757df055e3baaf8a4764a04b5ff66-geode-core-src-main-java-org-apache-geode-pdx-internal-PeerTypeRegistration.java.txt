GEODE-4894: Changes are made to support case sensitivity between region, table name and pdx field, column name (#1663)

* meta-data is now used to compute the column name
* reads will now consult the pdx registry for an existing pdx type to use its field name.
* Convert field name to lowercase only when column name is uppercase.
* Table name lookup is changes to look for exact match first, than case insensitive match.
* Field to column name lookup is changed to find exact column name or case insensitive match in the metadata.

-  private final Map<String, Set<PdxType>> classToType =
-      new CopyOnWriteHashMap<String, Set<PdxType>>();
+  private final Map<String, CopyOnWriteHashSet<PdxType>> classToType = new CopyOnWriteHashMap<>();
-        if (type.getClassName().equals(JSONFormatter.JSON_CLASSNAME))
-          return;// no need to include here
-        Set<PdxType> pdxTypeSet = this.classToType.get(type.getClassName());
+        if (type.getClassName().equals(JSONFormatter.JSON_CLASSNAME)) {
+          return; // no need to include here
+        }
+        CopyOnWriteHashSet<PdxType> pdxTypeSet = this.classToType.get(type.getClassName());
-    Set<PdxType> pdxTypes = classToType.get(className);
-    if (pdxTypes != null) {
-      for (PdxType pdxType : pdxTypes) {
-        if (pdxType.getPdxField(fieldName) != null) {
-          return pdxType;
-        }
+    Set<PdxType> pdxTypes = getPdxTypesForClassName(className);
+    for (PdxType pdxType : pdxTypes) {
+      if (pdxType.getPdxField(fieldName) != null) {
+        return pdxType;
+  @Override
+  public Set<PdxType> getPdxTypesForClassName(String className) {
+    CopyOnWriteHashSet<PdxType> pdxTypeSet = classToType.get(className);
+    if (pdxTypeSet == null) {
+      return Collections.emptySet();
+    } else {
+      return pdxTypeSet.getSnapshot();
+    }
+  }
+
-  public Map<String, Set<PdxType>> getClassToType() {
+  public Map<String, CopyOnWriteHashSet<PdxType>> getClassToType() {
