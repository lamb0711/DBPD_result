Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LoggingThreadGroup;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
+import org.apache.geode.internal.logging.LoggingThread;
-          LocalizedStrings.CqQueryImpl_REGION_ON_WHICH_QUERY_IS_SPECIFIED_NOT_FOUND_LOCALLY_REGIONNAME_0
-              .toLocalizedString(regionName));
+          String.format("Region on which query is specified not found locally, regionName: %s",
+              regionName));
-              LocalizedStrings.CqQueryImpl_FAILED_TO_CLOSE_THE_CQ_CQNAME_0_ERROR_FROM_LAST_ENDPOINT_1
-                  .toLocalizedString(this.cqName, exception.getLocalizedMessage()),
+              String.format("Failed to close the cq. CqName: %s. Error from last endpoint: %s",
+                  this.cqName, exception.getLocalizedMessage()),
-              LocalizedStrings.CqQueryImpl_FAILED_TO_CLOSE_THE_CQ_CQNAME_0_THE_SERVER_ENDPOINTS_ON_WHICH_THIS_CQ_WAS_REGISTERED_WERE_NOT_FOUND
-                  .toLocalizedString(this.cqName));
+              String.format(
+                  "Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.",
+                  this.cqName));
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.CqQueryImpl_EXCEPTION_OCCOURED_IN_THE_CQLISTENER_OF_THE_CQ_CQNAME_0_ERROR_1,
-                new Object[] {cqName, ex.getLocalizedMessage()}));
+            logger.warn("Exception occurred in the CqListener of the CQ, CqName : {} Error : {}",
+                new Object[] {cqName, ex.getLocalizedMessage()});
-            logger.warn(LocalizedMessage.create(
-                LocalizedStrings.CqQueryImpl_RUNTIMEEXCEPTION_OCCOURED_IN_THE_CQLISTENER_OF_THE_CQ_CQNAME_0_ERROR_1,
-                new Object[] {cqName, t.getLocalizedMessage()}));
+            logger.warn(
+                "RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}",
+                new Object[] {cqName, t.getLocalizedMessage()});
-            Runnable r = new Runnable() {
-              @Override
-              public void run() {
-                Object[] eventArray = null;
-                if (CqQueryImpl.testHook != null) {
-                  testHook.setEventCount(queuedEvents.size());
-                }
-                // Synchronization for the executer thread.
-                synchronized (queuedEventsSynchObject) {
-                  try {
-                    eventArray = queuedEvents.toArray();
+            Thread thread = new LoggingThread("CQEventHandler For " + cqName, () -> {
+              Object[] eventArray = null;
+              if (CqQueryImpl.testHook != null) {
+                testHook.setEventCount(queuedEvents.size());
+              }
+              // Synchronization for the executer thread.
+              synchronized (queuedEventsSynchObject) {
+                try {
+                  eventArray = queuedEvents.toArray();
-                    // Process through the events
-                    for (Object cqEvent : eventArray) {
-                      cqService.invokeListeners(cqName, ClientCQImpl.this, (CqEventImpl) cqEvent);
-                      stats.decQueuedCqListenerEvents();
-                    }
-                  } finally {
-                    // Make sure that we notify waiting threads or else possible dead lock
-                    queuedEvents.clear();
-                    queuedEvents = null;
-                    queuedEventsSynchObject.notify();
+                  // Process through the events
+                  for (Object cqEvent : eventArray) {
+                    cqService.invokeListeners(cqName, ClientCQImpl.this, (CqEventImpl) cqEvent);
+                    stats.decQueuedCqListenerEvents();
+                } finally {
+                  // Make sure that we notify waiting threads or else possible dead lock
+                  queuedEvents.clear();
+                  queuedEvents = null;
+                  queuedEventsSynchObject.notify();
-            };
-            final LoggingThreadGroup group =
-                LoggingThreadGroup.createThreadGroup("CQEventHandler", logger);
-            Thread thread = new Thread(group, r, "CQEventHandler For " + cqName);
-            thread.setDaemon(true);
+            });
-            LocalizedStrings.CqQueryImpl_CQ_IS_CLOSED_CQNAME_0.toLocalizedString(this.cqName));
+            String.format("CQ is closed, CqName : %s", this.cqName));
-        throw new IllegalStateException(LocalizedStrings.CqQueryImpl_CQ_IS_IN_RUNNING_STATE_CQNAME_0
-            .toLocalizedString(this.cqName));
+        throw new IllegalStateException(String.format("CQ is in running state, CqName : %s",
+            this.cqName));
-                  LocalizedStrings.CqQueryImpl_EXCEPTION_WHILE_EXECUTING_CQ_EXCEPTION_0, ex, null);
+                  String.format("Exception while executing cq Exception: %s", ex));
-                LocalizedStrings.CqQueryImpl_FAILED_TO_EXECUTE_THE_CQ_CQNAME_0_QUERY_STRING_IS_1_ERROR_FROM_LAST_SERVER_2
-                    .toLocalizedString(this.cqName, this.queryString, ex.getLocalizedMessage());
+                String.format(
+                    "Failed to execute the CQ. CqName: %s, Query String is: %s, Error from last server: %s",
+                    this.cqName, this.queryString, ex.getLocalizedMessage());
-            LocalizedStrings.CqQueryImpl_CQ_IS_CLOSED_CQNAME_0.toLocalizedString(this.cqName));
+            String.format("CQ is closed, CqName : %s", this.cqName));
-            LocalizedStrings.CqQueryImpl_CQ_IS_NOT_IN_RUNNING_STATE_STOP_CQ_DOES_NOT_APPLY_CQNAME_0
-                .toLocalizedString(this.cqName));
+            String.format("CQ is not in running state, stop CQ does not apply, CqName : %s",
+                this.cqName));
-              LocalizedStrings.CqQueryImpl_FAILED_TO_STOP_THE_CQ_CQNAME_0_ERROR_FROM_LAST_SERVER_1
-                  .toLocalizedString(this.cqName, exception.getLocalizedMessage()),
+              String.format("Failed to stop the cq. CqName :%s Error from last server: %s",
+                  this.cqName, exception.getLocalizedMessage()),
-              LocalizedStrings.CqQueryImpl_FAILED_TO_STOP_THE_CQ_CQNAME_0_THE_SERVER_ENDPOINTS_ON_WHICH_THIS_CQ_WAS_REGISTERED_WERE_NOT_FOUND
-                  .toLocalizedString(this.cqName));
+              String.format(
+                  "Failed to stop the cq. CqName: %s. The server endpoints on which this cq was registered were not found.",
+                  this.cqName));
