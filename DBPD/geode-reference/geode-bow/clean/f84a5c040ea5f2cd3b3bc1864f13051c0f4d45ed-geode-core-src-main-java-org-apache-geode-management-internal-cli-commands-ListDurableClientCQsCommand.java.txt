Merge branch 'develop' into GEODE-5407

-import java.util.HashMap;
-import java.util.Map;
-import java.util.TreeMap;
+import org.apache.geode.management.cli.GfshCommand;
-import org.apache.geode.management.internal.cli.CliUtil;
-import org.apache.geode.management.internal.cli.domain.DurableCqNamesResult;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
-import org.apache.geode.management.internal.cli.result.TabularResultData;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public class ListDurableClientCQsCommand extends InternalGfshCommand {
-  DurableClientCommandsResultBuilder builder = new DurableClientCommandsResultBuilder();
+public class ListDurableClientCQsCommand extends GfshCommand {
-  public Result listDurableClientCQs(
+  public ResultModel listDurableClientCQs(
-    Result result;
-    try {
-      boolean noResults = true;
-      Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
+    Set<DistributedMember> targetMembers = findMembers(group, memberNameOrId);
-      if (targetMembers.isEmpty()) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      final ResultCollector<?, ?> rc =
-          CliUtil.executeFunction(new ListDurableCqNamesFunction(), durableClientId, targetMembers);
-      final List<DurableCqNamesResult> results = (List<DurableCqNamesResult>) rc.getResult();
-      Map<String, List<String>> memberCqNamesMap = new TreeMap<>();
-      Map<String, List<String>> errorMessageNodes = new HashMap<>();
-      Map<String, List<String>> exceptionMessageNodes = new HashMap<>();
-
-      for (DurableCqNamesResult memberResult : results) {
-        if (memberResult != null) {
-          if (memberResult.isSuccessful()) {
-            memberCqNamesMap.put(memberResult.getMemberNameOrId(), memberResult.getCqNamesList());
-          } else {
-            if (memberResult.isOpPossible()) {
-              builder.groupByMessage(memberResult.getExceptionMessage(),
-                  memberResult.getMemberNameOrId(), exceptionMessageNodes);
-            } else {
-              builder.groupByMessage(memberResult.getErrorMessage(),
-                  memberResult.getMemberNameOrId(), errorMessageNodes);
-            }
-          }
-        }
-      }
-
-      if (!memberCqNamesMap.isEmpty()) {
-        TabularResultData table = ResultBuilder.createTabularResultData();
-        Set<String> members = memberCqNamesMap.keySet();
-
-        for (String member : members) {
-          boolean isFirst = true;
-          List<String> cqNames = memberCqNamesMap.get(member);
-          for (String cqName : cqNames) {
-            if (isFirst) {
-              isFirst = false;
-              table.accumulate(CliStrings.MEMBER, member);
-            } else {
-              table.accumulate(CliStrings.MEMBER, "");
-            }
-            table.accumulate(CliStrings.LIST_DURABLE_CQS__NAME, cqName);
-          }
-        }
-        result = ResultBuilder.buildResult(table);
-      } else {
-        String errorHeader =
-            CliStrings.format(CliStrings.LIST_DURABLE_CQS__FAILURE__HEADER, durableClientId);
-        result = ResultBuilder.buildResult(
-            builder.buildFailureData(null, exceptionMessageNodes, errorMessageNodes, errorHeader));
-      }
-    } catch (Exception e) {
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+    if (targetMembers.isEmpty()) {
+      return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+
+    final ResultCollector<?, ?> rc =
+        executeFunction(new ListDurableCqNamesFunction(), durableClientId, targetMembers);
+    final List<List<CliFunctionResult>> results = (List<List<CliFunctionResult>>) rc.getResult();
+
+    ResultModel result = new ResultModel();
+    TabularResultModel table = result.addTable("list-durable-client-cqs");
+
+    for (List<CliFunctionResult> perMemberList : results) {
+      for (CliFunctionResult oneResult : perMemberList) {
+        table.accumulate("Member", oneResult.getMemberIdOrName());
+        table.accumulate("Status", oneResult.getStatus());
+        table.accumulate("CQ Name", oneResult.getStatusMessage());
+
+        if (!oneResult.isSuccessful()) {
+          result.setStatus(Result.Status.ERROR);
+        }
+      }
+    }
+
