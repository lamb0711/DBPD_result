GEODE-7132: Cleanup static analyzer warnings.

-import java.util.Iterator;
-  protected InternalDistributedSystem ds;
+  protected InternalDistributedSystem distributedSystem;
-  protected Set members;
+  protected Set<InternalDistributedMember> members;
-  public MemberFunctionExecutor(DistributedSystem s) {
-    this.ds = (InternalDistributedSystem) s;
-    this.members = this.ds.getDistributionManager().getNormalDistributionManagerIds();
+  MemberFunctionExecutor(DistributedSystem distributedSystem) {
+    this(distributedSystem, ((InternalDistributedSystem) distributedSystem).getDistributionManager()
+        .getNormalDistributionManagerIds());
-  public MemberFunctionExecutor(DistributedSystem s, DistributedMember m) {
-    this.ds = (InternalDistributedSystem) s;
-    this.members = Collections.singleton(m);
+  MemberFunctionExecutor(DistributedSystem distributedSystem, DistributedMember distributedMember) {
+    this(distributedSystem, Collections.singleton((InternalDistributedMember) distributedMember));
-  public MemberFunctionExecutor(DistributedSystem s, Set m) {
-    this.ds = (InternalDistributedSystem) s;
-    this.members = m;
+  MemberFunctionExecutor(DistributedSystem distributedSystem,
+      Set<? extends DistributedMember> members) {
+    this.distributedSystem = (InternalDistributedSystem) distributedSystem;
+    this.members = (Set<InternalDistributedMember>) members;
-  public MemberFunctionExecutor(DistributedSystem s, Set m,
+  public MemberFunctionExecutor(DistributedSystem distributedSystem,
+      Set<? extends DistributedMember> members,
-    this(s, m);
+    this(distributedSystem, members);
-    this.ds = memFunctionExecutor.ds;
-    this.members = new HashSet();
-    this.members.addAll(memFunctionExecutor.members);
-    this.sender = memFunctionExecutor.sender;
+    distributedSystem = memFunctionExecutor.distributedSystem;
+    members = new HashSet<>(memFunctionExecutor.members);
+    sender = memFunctionExecutor.sender;
-    this.memberMappedArg = argument;
-    this.isMemberMappedArgument = true;
+    memberMappedArg = argument;
+    isMemberMappedArgument = true;
-    this.rc = rs;
+    rc = rs;
-    this.args = arguments;
+    args = arguments;
-  @SuppressWarnings("unchecked")
-    final DistributionManager dm = this.ds.getDistributionManager();
-    final Set dest = new HashSet(this.members);
+    final DistributionManager dm = distributedSystem.getDistributionManager();
+    final Set<InternalDistributedMember> dest = new HashSet<>(members);
-        this.ds.getDistributionManager().getDistributionManagerId();
+        distributedSystem.getDistributionManager().getDistributionManagerId();
-        isTx = cache.getTxManager().getTXState() == null ? false : true;
+        isTx = cache.getTxManager().getTXState() != null;
-      HashMap<InternalDistributedMember, Object> memberArgs =
-          new HashMap<InternalDistributedMember, Object>();
-      Iterator<DistributedMember> iter = dest.iterator();
-      while (iter.hasNext()) {
-        InternalDistributedMember recip = (InternalDistributedMember) iter.next();
-        memberArgs.put(recip, getArgumentsForMember(recip.getId()));
+      HashMap<InternalDistributedMember, Object> memberArgs = new HashMap<>();
+      for (InternalDistributedMember distributedMember : dest) {
+        memberArgs.put(distributedMember, getArgumentsForMember(distributedMember.getId()));
-      MemberFunctionResultWaiter resultReceiver = new MemberFunctionResultWaiter(this.ds, localRC,
-          function, memberArgs, dest, resultSender);
+      MemberFunctionResultWaiter resultReceiver =
+          new MemberFunctionResultWaiter(distributedSystem, localRC,
+              function, memberArgs, dest, resultSender);
-      ResultCollector reply = resultReceiver.getFunctionResultFrom(dest, function, this);
-      return reply;
+      return resultReceiver.getFunctionResultFrom(dest, function, this);
-  public void validateExecution(final Function function, final Set dest) {
+  public void validateExecution(final Function function,
+      final Set<? extends DistributedMember> dest) {
-        DistributedMember funcTarget = (DistributedMember) dest.iterator().next();
+        DistributedMember funcTarget = dest.iterator().next();
-  public boolean isMemberMappedArgument() {
-    return this.isMemberMappedArgument;
-  }
-
-  @Override
-      return this.args;
+      return args;
-      return this.memberMappedArg.getArgumentsForMember(memberId);
+      return memberMappedArg.getArgumentsForMember(memberId);
-    return this.memberMappedArg;
+    return memberMappedArg;
-    return this.sender;
+    return sender;
