GEODE-6803: be able to configure pdx using management rest api (#3638)

* Add PdxManagementController and PdxManager
* add RestEndPoint.getUri for single config object uri for HATOS, make it part of the json response
* rename RuntimeCacheElement to MultiGroupCacheElement since the only usage of it is to support multi group.
* make MultiGroupCacheElement a suplimental interface and list does not have to return MultiGroupCacheElement
* do not require servers to be present in order to create a cache element
* when realizer is not present, assuming the servers needs to be bounced in order for the config change to take effect
-import java.util.ArrayList;
-import java.util.List;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
+import org.apache.commons.lang3.StringUtils;
-public class MemberConfig extends CacheElement implements RuntimeCacheElement, RestfulEndpoint {
-
-  private static final long serialVersionUID = -6262538068604902018L;
+public class MemberConfig extends CacheElement implements RestfulEndpoint {
-  private boolean isLocator;
-  private boolean isCoordinator;
-  private String host;
-  private String status;
-  private int pid;
-  // Only relevant for locators - will be suppressed if null
-  private Integer port;
-  // Only relevant for servers - will be suppressed if empty
-  private List<CacheServerConfig> cacheServers = new ArrayList<>();
-  private long maxHeap;
-  private long initialHeap;
-  private long usedHeap;
-  private String logFile;
-  private String workingDirectory;
-  private int clientConnections;
-
-  public static class CacheServerConfig {
-    private int port;
-    private int maxConnections;
-    private int maxThreads;
-
-    public CacheServerConfig() {}
-
-    public int getPort() {
-      return port;
-    }
-
-    public void setPort(int port) {
-      this.port = port;
-    }
-
-    public int getMaxConnections() {
-      return maxConnections;
-    }
-
-    public void setMaxConnections(int maxConnections) {
-      this.maxConnections = maxConnections;
-    }
-
-    public int getMaxThreads() {
-      return maxThreads;
-    }
-
-    public void setMaxThreads(int maxThreads) {
-      this.maxThreads = maxThreads;
-    }
-  }
-
-  public MemberConfig() {}
-  public boolean isLocator() {
-    return isLocator;
-  }
-
-  public void setLocator(boolean locator) {
-    isLocator = locator;
-  }
-
-  public boolean isCoordinator() {
-    return isCoordinator;
-  }
-
-  public void setCoordinator(boolean coordinator) {
-    isCoordinator = coordinator;
-  }
-
-  public String getHost() {
-    return host;
-  }
-
-  public void setHost(String host) {
-    this.host = host;
-  }
-
-  public String getStatus() {
-    return status;
-  }
-
-  public void setStatus(String status) {
-    this.status = status;
-  }
-
-  public int getPid() {
-    return pid;
-  }
-
-  public void setPid(int pid) {
-    this.pid = pid;
-  }
-
-  @JsonInclude(value = JsonInclude.Include.NON_NULL)
-  public Integer getPort() {
-    return port;
-  }
-
-  public void setPort(Integer port) {
-    this.port = port;
-  }
-
-  @JsonInclude(value = JsonInclude.Include.NON_EMPTY)
-  public List<CacheServerConfig> getCacheServers() {
-    return cacheServers;
-  }
-
-  public void addCacheServer(CacheServerConfig cacheServer) {
-    cacheServers.add(cacheServer);
+  @Override
+  public String getId() {
+    return id;
-  public String getId() {
-    return id;
+  public String getUri() {
+    if (StringUtils.isBlank(getId())) {
+      throw new IllegalArgumentException("Member Id is requied.");
+    }
+    return MEMBER_CONFIG_ENDPOINT + "/" + getId();
-  public List<String> getGroups() {
-    return groups;
-  }
-  public void setGroups(List<String> groups) {
-    this.groups = groups;
-  }
-
-  public long getMaxHeap() {
-    return maxHeap;
-  }
-
-  public void setMaxHeap(long maxHeap) {
-    this.maxHeap = maxHeap;
-  }
-
-  public long getInitialHeap() {
-    return initialHeap;
-  }
-
-  public void setInitialHeap(long initialHeap) {
-    this.initialHeap = initialHeap;
-  }
-
-  public long getUsedHeap() {
-    return usedHeap;
-  }
-
-  public void setUsedHeap(long usedHeap) {
-    this.usedHeap = usedHeap;
-  }
-
-  public String getLogFile() {
-    return logFile;
-  }
-
-  public void setLogFile(String logFile) {
-    this.logFile = logFile;
-  }
-
-  public String getWorkingDirectory() {
-    return workingDirectory;
-  }
-
-  public void setWorkingDirectory(String workingDirectory) {
-    this.workingDirectory = workingDirectory;
-  }
-
-  public int getClientConnections() {
-    return clientConnections;
-  }
-
-  public void setClientConnections(int clientConnections) {
-    this.clientConnections = clientConnections;
-  }
