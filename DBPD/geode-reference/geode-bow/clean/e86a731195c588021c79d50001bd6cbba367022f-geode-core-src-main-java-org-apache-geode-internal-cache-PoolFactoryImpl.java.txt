Merge branch 'release/1.3.0'

+import org.apache.geode.distributed.internal.membership.gms.membership.HostAddress;
+  private List<HostAddress> locatorAddresses = new ArrayList<>();
+
+  public PoolFactory setSocketConnectTimeout(int socketConnectTimeout) {
+    if (socketConnectTimeout <= -1) {
+      throw new IllegalArgumentException("socketConnectTimeout must be greater than -1");
+    }
+    this.attributes.socketConnectTimeout = socketConnectTimeout;
+    return this;
+  }
+
-  private PoolFactory add(String host, int port, List l) {
+  private InetSocketAddress getInetSocketAddress(String host, int port) {
+    InetSocketAddress sockAddr = null;
-      InetSocketAddress sockAddr = new InetSocketAddress(hostAddr, port);
-      l.add(sockAddr);
+      sockAddr = new InetSocketAddress(hostAddr, port);
-      InetSocketAddress sockAddr = new InetSocketAddress(host, port);
-      l.add(sockAddr);
+      sockAddr = new InetSocketAddress(host, port);
-    return this;
+    return sockAddr;
-    return add(host, port, this.attributes.locators);
+    InetSocketAddress isa = getInetSocketAddress(host, port);
+    this.attributes.locators.add(isa);
+    locatorAddresses.add(new HostAddress(isa, host));
+    return this;
-    return add(host, port, this.attributes.servers);
+    this.attributes.servers.add(getInetSocketAddress(host, port));
+    return this;
+    setSocketConnectTimeout(cp.getSocketConnectTimeout());
-    this.attributes.locators.addAll(cp.getLocators());
+    for (InetSocketAddress inetSocketAddress : cp.getLocators()) {
+      addLocator(inetSocketAddress.getHostName(), inetSocketAddress.getPort());
+    }
-    return PoolImpl.create(this.pm, name, this.attributes);
+    return PoolImpl.create(this.pm, name, this.attributes, this.locatorAddresses);
+    public int socketConnectTimeout = DEFAULT_SOCKET_CONNECT_TIMEOUT;
+    public int getSocketConnectTimeout() {
+      return this.socketConnectTimeout;
+    }
+
+      DataSerializer.writePrimitiveInt(this.socketConnectTimeout, out);
+      this.socketConnectTimeout = DataSerializer.readPrimitiveInt(in);
