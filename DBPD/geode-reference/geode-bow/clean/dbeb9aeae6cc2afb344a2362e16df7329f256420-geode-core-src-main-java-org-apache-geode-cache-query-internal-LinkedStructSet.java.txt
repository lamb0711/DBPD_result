Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class LinkedStructSet extends LinkedHashSet<Struct> implements
-    SelectResults<Struct>, Ordered, DataSerializableFixedID {
+public class LinkedStructSet extends LinkedHashSet<Struct>
+    implements SelectResults<Struct>, Ordered, DataSerializableFixedID {
-  public LinkedStructSet() {
-  };
+  public LinkedStructSet() {};
-          LocalizedStrings.SortedStructSet_STRUCTTYPE_MUST_NOT_BE_NULL
-              .toLocalizedString());
+          LocalizedStrings.SortedStructSet_STRUCTTYPE_MUST_NOT_BE_NULL.toLocalizedString());
-    if (!this.structType.equals(((SortedStructSet)other).structType)) {
+    if (!this.structType.equals(((SortedStructSet) other).structType)) {
-          LocalizedStrings.SortedStructSet_THIS_SET_ONLY_ACCEPTS_STRUCTIMPL
-              .toLocalizedString());
+          LocalizedStrings.SortedStructSet_THIS_SET_ONLY_ACCEPTS_STRUCTIMPL.toLocalizedString());
-    StructImpl s = (StructImpl)obj;
+    StructImpl s = (StructImpl) obj;
-   * public boolean addFieldValues(Object[] fieldValues) { //return
-   * super.add(fieldValues); StructImpl s = new StructImpl(this.structType,
-   * fieldValues); return super.add(s); }
+   * public boolean addFieldValues(Object[] fieldValues) { //return super.add(fieldValues);
+   * StructImpl s = new StructImpl(this.structType, fieldValues); return super.add(s); }
-    Struct s = (Struct)obj;
+    Struct s = (Struct) obj;
-   * Does this set contain a Struct of the correct type with the specified
-   * values?
+   * Does this set contain a Struct of the correct type with the specified values?
-   * public boolean containsFieldValues(Object[] fieldValues) { return
-   * super.contains(fieldValues); }
+   * public boolean containsFieldValues(Object[] fieldValues) { return super.contains(fieldValues);
+   * }
-    Struct s = (Struct)o;
+    Struct s = (Struct) o;
-   * removeFieldValues(Object[] fieldValues) { return super.remove(fieldValues);
-   * }
+   * removeFieldValues(Object[] fieldValues) { return super.remove(fieldValues); }
-    //if (c instanceof StructSet) {
-    //  return addAll((StructSet)c);
-    //}
+    // if (c instanceof StructSet) {
+    // return addAll((StructSet)c);
+    // }
-    //if (c instanceof StructSet) {
-      //return removeAll((StructSet)c);
-    //}
+    // if (c instanceof StructSet) {
+    // return removeAll((StructSet)c);
+    // }
-    //if (c instanceof StructSet) {
-      //return retainAll((StructSet)c);
-    //}
+    // if (c instanceof StructSet) {
+    // return retainAll((StructSet)c);
+    // }
-          LocalizedStrings.SortedStructSet_ELEMENT_TYPE_MUST_BE_STRUCT
-              .toLocalizedString());
+          LocalizedStrings.SortedStructSet_ELEMENT_TYPE_MUST_BE_STRUCT.toLocalizedString());
-    this.structType = (StructTypeImpl)elementType;
+    this.structType = (StructTypeImpl) elementType;
-   * @param modifiable
-   *          New value of property modifiable.
+   * @param modifiable New value of property modifiable.
-    this.structType = (StructTypeImpl)DataSerializer.readObject(in);
+    this.structType = (StructTypeImpl) DataSerializer.readObject(in);
-  public boolean dataPreordered() {    
+  public boolean dataPreordered() {
