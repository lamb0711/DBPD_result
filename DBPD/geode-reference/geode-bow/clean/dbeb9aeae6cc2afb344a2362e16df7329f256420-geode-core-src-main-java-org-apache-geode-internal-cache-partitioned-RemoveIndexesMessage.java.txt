Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class represents a partition message for removing indexes. An instance of this
- * class is send over the wire to remove indexes on remote vms. This class
- * extends PartitionMessage
+ * This class represents a partition message for removing indexes. An instance of this class is send
+ * over the wire to remove indexes on remote vms. This class extends PartitionMessage
-public final class RemoveIndexesMessage extends PartitionMessage
-  {
+public final class RemoveIndexesMessage extends PartitionMessage {
-  
+
-//  private int bucketIndexesRemoved;
-  
+  // private int bucketIndexesRemoved;
+
-  
+
-  
+
-   * @param recipients
-   *          members to which this message has to be sent
-   * @param regionId
-   *          partitioned region id
-   * @param processor
-   *          the processor to reply to
+   * @param recipients members to which this message has to be sent
+   * @param regionId partitioned region id
+   * @param processor the processor to reply to
-  public RemoveIndexesMessage (Set recipients, int regionId, ReplyProcessor21 processor) {
+  public RemoveIndexesMessage(Set recipients, int regionId, ReplyProcessor21 processor) {
-  
+
-   * @param recipients
-   *          members to which this message has to be sent
-   * @param regionId
-   *          partitioned region id
-   * @param processor
-   *          the processor to reply to
+   * 
+   * @param recipients members to which this message has to be sent
+   * @param regionId partitioned region id
+   * @param processor the processor to reply to
-  public RemoveIndexesMessage (Set recipients, int regionId, ReplyProcessor21 processor, boolean removeSingleIndex, String indexName) {
+  public RemoveIndexesMessage(Set recipients, int regionId, ReplyProcessor21 processor,
+      boolean removeSingleIndex, String indexName) {
-   * This message may be sent to nodes before the PartitionedRegion is
-   * completely initialized due to the RegionAdvisor(s) knowing about the
-   * existance of a partitioned region at a very early part of the
-   * initialization
+   * This message may be sent to nodes before the PartitionedRegion is completely initialized due to
+   * the RegionAdvisor(s) knowing about the existance of a partitioned region at a very early part
+   * of the initialization
-   * @param dm
-   *          Distribution maanger for the system
-   * @param pr
-   *          Partitioned region to remove indexes on.
-   * @throws CacheException
-   *           indicates a cache level error
-   * @throws ForceReattemptException
-   *           if the peer is no longer available
-   * @throws InterruptedException if
-   *           the thread is interrupted in the operation for example during
-   *           shutdown.
+   * @param dm Distribution maanger for the system
+   * @param pr Partitioned region to remove indexes on.
+   * 
+   * @throws CacheException indicates a cache level error
+   * @throws ForceReattemptException if the peer is no longer available
+   * @throws InterruptedException if the thread is interrupted in the operation for example during
+   *         shutdown.
-  protected boolean operateOnPartitionedRegion(DistributionManager dm,
-      PartitionedRegion pr, long startTime) throws CacheException, QueryException,
-      ForceReattemptException, InterruptedException
-  {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr,
+      long startTime)
+      throws CacheException, QueryException, ForceReattemptException, InterruptedException {
-    
+
-    
-    logger.info(LocalizedMessage.create(LocalizedStrings.RemoveIndexesMessage_WILL_REMOVE_THE_INDEXES_ON_THIS_PR___0, pr));
+
+    logger.info(LocalizedMessage
+        .create(LocalizedStrings.RemoveIndexesMessage_WILL_REMOVE_THE_INDEXES_ON_THIS_PR___0, pr));
-        bucketIndexRemoved = pr.removeIndexes(true); //remotely orignated
+        bucketIndexRemoved = pr.removeIndexes(true); // remotely orignated
-      replyEx = new ReplyException (ex);
+      replyEx = new ReplyException(ex);
-    sendReply(getSender(), getProcessorId(), dm, replyEx, result, 
-        bucketIndexRemoved, numIndexesRemoved);
-    
+    sendReply(getSender(), getProcessorId(), dm, replyEx, result, bucketIndexRemoved,
+        numIndexesRemoved);
+
-  
+
-   * @param member
-   *          representing the actual index creatro in the system
-   * @param procId
-   *          waiting processor
-   * @param dm
-   *          distirbution manager to send the message
-   * @param ex
-   *          any exceptions
-   * @param result
-   *          represents remove index worked properly.
-   * @param bucketIndexesRemoved
-   *          number of bucket indexes removed properly.
+   * @param member representing the actual index creatro in the system
+   * @param procId waiting processor
+   * @param dm distirbution manager to send the message
+   * @param ex any exceptions
+   * @param result represents remove index worked properly.
+   * @param bucketIndexesRemoved number of bucket indexes removed properly.
-  void sendReply(InternalDistributedMember member, int procId, DM dm,
-      ReplyException ex, boolean result, int bucketIndexesRemoved,
-      int totalNumBuckets) {
-    RemoveIndexesReplyMessage.send(member, processorId, dm, ex, result, bucketIndexesRemoved, totalNumBuckets);
-    
+  void sendReply(InternalDistributedMember member, int procId, DM dm, ReplyException ex,
+      boolean result, int bucketIndexesRemoved, int totalNumBuckets) {
+    RemoveIndexesReplyMessage.send(member, processorId, dm, ex, result, bucketIndexesRemoved,
+        totalNumBuckets);
+
-  public static PartitionResponse send(PartitionedRegion pr, Index ind, boolean removeAllIndex)
-  {
+  public static PartitionResponse send(PartitionedRegion pr, Index ind, boolean removeAllIndex) {
-  //  PartitionResponse processor = null;
-    RegionAdvisor advisor = (RegionAdvisor)(pr.getDistributionAdvisor());
+    // PartitionResponse processor = null;
+    RegionAdvisor advisor = (RegionAdvisor) (pr.getDistributionAdvisor());
-    
-   // RemoveIndexesResponse processor = null;
-   // RemoveIndexesMessage removeIndexesMsg = new RemoveIndexesMessage();
-    if ( recipients.size() > 0) {
-      
-      processor = (RemoveIndexesResponse)(new RemoveIndexesMessage()).createReplyProcessor(pr, recipients);
-    
+
+    // RemoveIndexesResponse processor = null;
+    // RemoveIndexesMessage removeIndexesMsg = new RemoveIndexesMessage();
+    if (recipients.size() > 0) {
+
+      processor =
+          (RemoveIndexesResponse) (new RemoveIndexesMessage()).createReplyProcessor(pr, recipients);
+
-      /*Set failures =*/ pr.getDistributionManager().putOutgoing(rm);
+      /* Set failures = */ pr.getDistributionManager().putOutgoing(rm);
-      RemoveIndexesMessage rm = new RemoveIndexesMessage(recipients, pr.getPRId(), processor, true, ind.getName());
-      /*Set failures = */ pr.getDistributionManager().putOutgoing(rm);
+      RemoveIndexesMessage rm =
+          new RemoveIndexesMessage(recipients, pr.getPRId(), processor, true, ind.getName());
+      /* Set failures = */ pr.getDistributionManager().putOutgoing(rm);
-  
+
-  PartitionResponse createReplyProcessor(PartitionedRegion r, Set recipients)
-  {
+  PartitionResponse createReplyProcessor(PartitionedRegion r, Set recipients) {
-  
+
-    if (this.removeSingleIndex) 
+    if (this.removeSingleIndex)
-  
+
+
-    
+
-      logger.info(LocalizedMessage.create(LocalizedStrings.RemoveIndexesMessage_TRYING_TO_GET_PR_WITH_ID___0, this.regionId));
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.RemoveIndexesMessage_TRYING_TO_GET_PR_WITH_ID___0, this.regionId));
-      logger.info(LocalizedMessage.create(LocalizedStrings.RemoveIndexesMessage_REMOVE_INDEXES_MESSAGE_GOT_THE_PR__0, pr));
-      
+      logger.info(LocalizedMessage
+          .create(LocalizedStrings.RemoveIndexesMessage_REMOVE_INDEXES_MESSAGE_GOT_THE_PR__0, pr));
+
-        throw new PartitionedRegionException(LocalizedStrings.RemoveIndexesMessage_COULD_NOT_GET_PARTITIONED_REGION_FROM_ID_0_FOR_MESSAGE_1_RECEIVED_ON_MEMBER_2_MAP_3.toLocalizedString(
-              new Object[] {Integer.valueOf(this.regionId), this, dm.getId(), PartitionedRegion.dumpPRId()}));
+        throw new PartitionedRegionException(
+            LocalizedStrings.RemoveIndexesMessage_COULD_NOT_GET_PARTITIONED_REGION_FROM_ID_0_FOR_MESSAGE_1_RECEIVED_ON_MEMBER_2_MAP_3
+                .toLocalizedString(new Object[] {Integer.valueOf(this.regionId), this, dm.getId(),
+                    PartitionedRegion.dumpPRId()}));
-    
-    }
-    catch(PRLocallyDestroyedException pde){
-      if(logger.isDebugEnabled()){
+
+    } catch (PRLocallyDestroyedException pde) {
+      if (logger.isDebugEnabled()) {
-        }
+      }
-    }
-    catch (VirtualMachineError err) {
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-      }
-      else if (logger.isTraceEnabled(LogMarker.DM) && (t instanceof RuntimeException)) {
+      } else if (logger.isTraceEnabled(LogMarker.DM) && (t instanceof RuntimeException)) {
-              LocalizedStrings.RemoveIndexesMessage_REGION_IS_LOCALLY_DESTROYED_THROWING_REGIONDESTROYEDEXCEPTION_FOR__0, pr));
-          thr = new RegionDestroyedException(LocalizedStrings.RemoveIndexesMessage_REGION_IS_LOCALLY_DESTROYED_ON_0.toLocalizedString(dm.getId()), pr.getFullPath());
+              LocalizedStrings.RemoveIndexesMessage_REGION_IS_LOCALLY_DESTROYED_THROWING_REGIONDESTROYEDEXCEPTION_FOR__0,
+              pr));
+          thr = new RegionDestroyedException(
+              LocalizedStrings.RemoveIndexesMessage_REGION_IS_LOCALLY_DESTROYED_ON_0
+                  .toLocalizedString(dm.getId()),
+              pr.getFullPath());
-      }
-      else {
+      } else {
-    }
-    finally {
+    } finally {
-  
-    
+
+
-   * Class representing remove index response. This class has all the
-   * information for successful or unsucessful remove index on the member of
-   * the partitioned region.
+   * Class representing remove index response. This class has all the information for successful or
+   * unsucessful remove index on the member of the partitioned region.
-  public static class RemoveIndexesResponse extends PartitionResponse
-   {
+  public static class RemoveIndexesResponse extends PartitionResponse {
-    
+
-//     boolean result;
-     
-     
+    // boolean result;
+
+
-    
+
-     * @throws ForceReattemptException 
+     * 
+     * @throws ForceReattemptException
-    public RemoveIndexesResult waitForResults() throws CacheException,
-        ForceReattemptException
-    {
+    public RemoveIndexesResult waitForResults() throws CacheException, ForceReattemptException {
-    
+
-     * @param result
-     *          true if index removed properly
-     * @param numBucketsIndexesRemoved
-     *          number of buckets indexes removed remotely for a memeber.
-     * @param numTotalBuckets
-     *          number of total buckets in the member.
+     * @param result true if index removed properly
+     * @param numBucketsIndexesRemoved number of buckets indexes removed remotely for a memeber.
+     * @param numTotalBuckets number of total buckets in the member.
-    public void setResponse(boolean result, int numBucketsIndexesRemoved,
-        int numTotalBuckets)
-    {
-//      this.result = result;
+    public void setResponse(boolean result, int numBucketsIndexesRemoved, int numTotalBuckets) {
+      // this.result = result;
-    
+
-    
+
-  public static class RemoveIndexesResult
-   {
+  public static class RemoveIndexesResult {
-//    private int numBucketIndexRemoved;
+    // private int numBucketIndexRemoved;
+     * 
-//      this.numBucketIndexRemoved = numBucketIndexRemoved;
+      // this.numBucketIndexRemoved = numBucketIndexRemoved;
-  
-  
-  
+
+
+
-   * Class for index creation reply. This class has the information about sucessful
-   * or unsucessful index creation.
+   * Class for index creation reply. This class has the information about sucessful or unsucessful
+   * index creation.
-  public static final class RemoveIndexesReplyMessage extends ReplyMessage  {
-    
+  public static final class RemoveIndexesReplyMessage extends ReplyMessage {
+
-    /** 
+    /**
-    
+
-    public RemoveIndexesReplyMessage () {
-      
+    public RemoveIndexesReplyMessage() {
+
-    
-    
+
+
+     * 
-    
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-    
-    
+
+
+     * 
-    public static void send(InternalDistributedMember recipient,
-        int processorId, DM dm, ReplyException ex, boolean result,
-        int numBucketsIndexesRemoved, int numTotalBuckets)
-    {
-      RemoveIndexesReplyMessage rmIndMsg = new RemoveIndexesReplyMessage(processorId, ex,
-          result, numBucketsIndexesRemoved, numTotalBuckets);
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm,
+        ReplyException ex, boolean result, int numBucketsIndexesRemoved, int numTotalBuckets) {
+      RemoveIndexesReplyMessage rmIndMsg = new RemoveIndexesReplyMessage(processorId, ex, result,
+          numBucketsIndexesRemoved, numTotalBuckets);
-    
+
+     * 
-    public final void process(final DM dm, final ReplyProcessor21 p)
-    {
-      RemoveIndexesResponse processor = (RemoveIndexesResponse)p;
+    public final void process(final DM dm, final ReplyProcessor21 p) {
+      RemoveIndexesResponse processor = (RemoveIndexesResponse) p;
-        processor.setResponse(this.result, this.numBucketsIndexesRemoved,
-            this.numTotalBuckets);
+        processor.setResponse(this.result, this.numBucketsIndexesRemoved, this.numTotalBuckets);
-    
+
