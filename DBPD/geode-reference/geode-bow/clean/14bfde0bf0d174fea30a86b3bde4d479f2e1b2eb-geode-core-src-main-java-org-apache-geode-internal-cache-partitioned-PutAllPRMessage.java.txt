Merge branch 'release/1.8.0'

-      // Fix the updateMsg misorder issue
-      // Lock the keys when doing postPutAll
-      Object keys[] = new Object[putAllPRDataSize];
-      for (int i = 0; i < putAllPRDataSize; ++i) {
-        keys[i] = putAllPRData[i].getKey();
-      }
-
+      Object[] keys = getKeysToBeLocked();
+        boolean locked = false;
-          bucketRegion.waitUntilLocked(keys);
+          locked = bucketRegion.waitUntilLocked(keys);
-            try {
-              // Only PutAllPRMessage knows if the thread id is fake. Event has no idea.
-              // So we have to manually set useFakeEventId for this DPAO
-              dpao.setUseFakeEventId(true);
-              r.checkReadiness();
-              bucketRegion.getDataView().postPutAll(dpao, this.versions, bucketRegion);
-            } finally {
-              if (lockedForPrimary) {
-                bucketRegion.doUnlockForPrimary();
-              }
-            }
+            doPostPutAll(r, dpao, bucketRegion, lockedForPrimary);
-          bucketRegion.removeAndNotifyKeys(keys);
+          if (locked) {
+            bucketRegion.removeAndNotifyKeys(keys);
+          }
+  Object[] getKeysToBeLocked() {
+    // Fix the updateMsg misorder issue
+    // Lock the keys when doing postPutAll
+    Object keys[] = new Object[putAllPRDataSize];
+    for (int i = 0; i < putAllPRDataSize; ++i) {
+      keys[i] = putAllPRData[i].getKey();
+    }
+    return keys;
+  }
+
+  void doPostPutAll(PartitionedRegion r, DistributedPutAllOperation dpao,
+      BucketRegion bucketRegion, boolean lockedForPrimary) {
+    try {
+      // Only PutAllPRMessage knows if the thread id is fake. Event has no idea.
+      // So we have to manually set useFakeEventId for this DPAO
+      dpao.setUseFakeEventId(true);
+      r.checkReadiness();
+      bucketRegion.getDataView().postPutAll(dpao, this.versions, bucketRegion);
+      r.checkReadiness();
+    } finally {
+      if (lockedForPrimary) {
+        bucketRegion.doUnlockForPrimary();
+      }
+    }
+  }
+
