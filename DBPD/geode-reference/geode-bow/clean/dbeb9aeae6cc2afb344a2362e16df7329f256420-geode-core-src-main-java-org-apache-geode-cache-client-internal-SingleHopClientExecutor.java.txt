Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
+import org.apache.geode.internal.logging.LoggingThreadGroup;
-  
-  static final ExecutorService execService = Executors
-      .newCachedThreadPool(new ThreadFactory() {
-        AtomicInteger threadNum = new AtomicInteger();
-        public Thread newThread(final Runnable r) {
-          Thread result = new Thread(r, "Function Execution Thread-"
-              + threadNum.incrementAndGet());
-          result.setDaemon(true);
-          return result;
-        }
-      });
+  static final ExecutorService execService = Executors.newCachedThreadPool(new ThreadFactory() {
+    AtomicInteger threadNum = new AtomicInteger();
+
+    public Thread newThread(final Runnable r) {
+      Thread result =
+          new Thread(LoggingThreadGroup.createThreadGroup("FunctionExecutionThreadGroup", logger),
+              r, "Function Execution Thread-" + threadNum.incrementAndGet());
+      result.setDaemon(true);
+      return result;
+    }
+  });
-      }
-      catch (RejectedExecutionException rejectedExecutionEx) {
+      } catch (RejectedExecutionException rejectedExecutionEx) {
-      }
-      catch (InterruptedException e) {
+      } catch (InterruptedException e) {
-        while (itr.hasNext() && !execService.isShutdown()
-            && !execService.isTerminated()) {
-          Future fut = (Future)itr.next();
+        while (itr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+          Future fut = (Future) itr.next();
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-          }
-          catch (ExecutionException ee) {
+          } catch (ExecutionException ee) {
-              throw (FunctionException)ee.getCause();
-            }
-            else if (ee.getCause() instanceof ServerOperationException) {
-              throw (ServerOperationException)ee.getCause();
-            }
-            else if (ee.getCause() instanceof ServerConnectivityException) {
-              throw (ServerConnectivityException)ee.getCause();
-            }
-            else {
+              throw (FunctionException) ee.getCause();
+            } else if (ee.getCause() instanceof ServerOperationException) {
+              throw (ServerOperationException) ee.getCause();
+            } else if (ee.getCause() instanceof ServerConnectivityException) {
+              throw (ServerConnectivityException) ee.getCause();
+            } else {
-    ClientMetadataService cms = region.getCache()
-        .getClientMetadataService();
+    ClientMetadataService cms = region.getCache().getClientMetadataService();
-      }
-      catch (RejectedExecutionException rejectedExecutionEx) {
+      } catch (RejectedExecutionException rejectedExecutionEx) {
-      }
-      catch (InterruptedException e) {
+      } catch (InterruptedException e) {
-        while (futureItr.hasNext() && !execService.isShutdown()
-            && !execService.isTerminated()) {
-          Future fut = (Future)futureItr.next();
-          SingleHopOperationCallable task = (SingleHopOperationCallable)taskItr.next();
+        while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+          Future fut = (Future) futureItr.next();
+          SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-          }
-          catch (ExecutionException ee) {
+          } catch (ExecutionException ee) {
-                logger.debug("ExecuteRegionFunctionSingleHopOp#ExecutionException.InternalFunctionInvocationTargetException : Caused by :{}", ee.getCause());
+                logger.debug(
+                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.InternalFunctionInvocationTargetException : Caused by :{}",
+                    ee.getCause());
-              }
-              catch (CacheClosedException e) {
+              } catch (CacheClosedException e) {
-              failedNodes.addAll(((InternalFunctionInvocationTargetException)ee
-                  .getCause()).getFailedNodeSet());
+              failedNodes.addAll(
+                  ((InternalFunctionInvocationTargetException) ee.getCause()).getFailedNodeSet());
-                  functionExecutionException = new FunctionInvocationTargetException(
-                      ee.getCause().getCause());
+                  functionExecutionException =
+                      new FunctionInvocationTargetException(ee.getCause().getCause());
-                  functionExecutionException = new FunctionInvocationTargetException(
-                      new BucketMovedException(
+                  functionExecutionException =
+                      new FunctionInvocationTargetException(new BucketMovedException(
-            }
-            else if (ee.getCause() instanceof FunctionException) {
+            } else if (ee.getCause() instanceof FunctionException) {
-                logger.debug("ExecuteRegionFunctionSingleHopOp#ExecutionException.FunctionException : Caused by :{}", ee.getCause());
+                logger.debug(
+                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.FunctionException : Caused by :{}",
+                    ee.getCause());
-              FunctionException fe = (FunctionException)ee.getCause();
+              FunctionException fe = (FunctionException) ee.getCause();
-            }
-            else if (ee.getCause() instanceof ServerOperationException) {
+            } else if (ee.getCause() instanceof ServerOperationException) {
-                logger.debug("ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerOperationException : Caused by :{}", ee.getCause());
+                logger.debug(
+                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerOperationException : Caused by :{}",
+                    ee.getCause());
-              ServerOperationException soe = (ServerOperationException)ee.getCause();
+              ServerOperationException soe = (ServerOperationException) ee.getCause();
-            }
-            else if (ee.getCause() instanceof ServerConnectivityException) {
+            } else if (ee.getCause() instanceof ServerConnectivityException) {
-                logger.debug("ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}", ee.getCause(), server);
+                logger.debug(
+                    "ExecuteRegionFunctionSingleHopOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}",
+                    ee.getCause(), server);
-              }
-              catch (CacheClosedException e) {
+              } catch (CacheClosedException e) {
-            }
-            else {
+            } else {
-  
+
+   * 
-  static Map<ServerLocation, Object> submitBulkOp(List callableTasks, ClientMetadataService cms, 
-      LocalRegion region, Map<ServerLocation,RuntimeException> failedServers) {
+  static Map<ServerLocation, Object> submitBulkOp(List callableTasks, ClientMetadataService cms,
+      LocalRegion region, Map<ServerLocation, RuntimeException> failedServers) {
-      }
-      catch (RejectedExecutionException rejectedExecutionEx) {
+      } catch (RejectedExecutionException rejectedExecutionEx) {
-      }
-      catch (InterruptedException e) {
+      } catch (InterruptedException e) {
-        while (futureItr.hasNext() && !execService.isShutdown()
-            && !execService.isTerminated()) {
-          Future fut = (Future)futureItr.next();
-          SingleHopOperationCallable task = (SingleHopOperationCallable)taskItr
-              .next();
+        while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+          Future fut = (Future) futureItr.next();
+          SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
-            VersionedObjectList versions = (VersionedObjectList)fut.get();
+            VersionedObjectList versions = (VersionedObjectList) fut.get();
-              logger.debug("submitBulkOp#got result from {}:{}",
-                  server, versions);
+              logger.debug("submitBulkOp#got result from {}:{}", server, versions);
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-            failedServers.put(server,  ige);
+            failedServers.put(server, ige);
-          }
-          catch (ExecutionException ee) {
+          } catch (ExecutionException ee) {
-              ServerOperationException soe = (ServerOperationException)ee.getCause();
+              ServerOperationException soe = (ServerOperationException) ee.getCause();
-            }
-            else if (ee.getCause() instanceof ServerConnectivityException) {
+            } else if (ee.getCause() instanceof ServerConnectivityException) {
-              failedServers.put(server, (ServerConnectivityException)ee.getCause());
-            }
-            else {
+              failedServers.put(server, (ServerConnectivityException) ee.getCause());
+            } else {
-                failedServers.put(server, (PutAllPartialResultException)t);
+                failedServers.put(server, (PutAllPartialResultException) t);
-  
-  static Map<ServerLocation, Object> submitGetAll(
-      Map<ServerLocation, HashSet> serverToFilterMap, List callableTasks,
-      ClientMetadataService cms, LocalRegion region) {
+
+  static Map<ServerLocation, Object> submitGetAll(Map<ServerLocation, HashSet> serverToFilterMap,
+      List callableTasks, ClientMetadataService cms, LocalRegion region) {
-      }
-      catch (RejectedExecutionException rejectedExecutionEx) {
+      } catch (RejectedExecutionException rejectedExecutionEx) {
-      }
-      catch (InterruptedException e) {
+      } catch (InterruptedException e) {
-        while (futureItr.hasNext() && !execService.isShutdown()
-            && !execService.isTerminated()) {
-          Future fut = (Future)futureItr.next();
-          SingleHopOperationCallable task = (SingleHopOperationCallable)taskItr
-              .next();
-          List keys = ((GetAllOpImpl)task.getOperation()).getKeyList();
+        while (futureItr.hasNext() && !execService.isShutdown() && !execService.isTerminated()) {
+          Future fut = (Future) futureItr.next();
+          SingleHopOperationCallable task = (SingleHopOperationCallable) taskItr.next();
+          List keys = ((GetAllOpImpl) task.getOperation()).getKeyList();
-            VersionedObjectList valuesFromServer = (VersionedObjectList)fut.get();
+            VersionedObjectList valuesFromServer = (VersionedObjectList) fut.get();
-            for (VersionedObjectList.Iterator it=valuesFromServer.iterator(); it.hasNext(); ) {
+            for (VersionedObjectList.Iterator it = valuesFromServer.iterator(); it.hasNext();) {
-                    LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1,
-                    new Object[]{value, key}), (Throwable)value);
-                } 
+                      LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1,
+                      new Object[] {value, key}), (Throwable) value);
+                }
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-          }
-          catch (ExecutionException ee) {
+          } catch (ExecutionException ee) {
-                logger.debug("GetAllOp#ExecutionException.ServerOperationException : Caused by :{}", ee.getCause());
+                logger.debug("GetAllOp#ExecutionException.ServerOperationException : Caused by :{}",
+                    ee.getCause());
-              throw (ServerOperationException)ee.getCause();
-            }
-            else if (ee.getCause() instanceof ServerConnectivityException) {
+              throw (ServerOperationException) ee.getCause();
+            } else if (ee.getCause() instanceof ServerConnectivityException) {
-                logger.debug("GetAllOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}", ee.getCause(), server);
+                logger.debug(
+                    "GetAllOp#ExecutionException.ServerConnectivityException : Caused by :{} The failed server is: {}",
+                    ee.getCause(), server);
-                cms = region.getCache()
-                    .getClientMetadataService();
-              }
-              catch (CacheClosedException e) {
+                cms = region.getCache().getClientMetadataService();
+              } catch (CacheClosedException e) {
-              cms.scheduleGetPRMetaData((LocalRegion)region, false);
+              cms.scheduleGetPRMetaData((LocalRegion) region, false);
-            }
-            else {
+            } else {
-  
+
-    execService.submit(task);
+    execService.execute(task);
-      return (RuntimeException)t;
+      return (RuntimeException) t;
-      throw (Error)t;
+      throw (Error) t;
