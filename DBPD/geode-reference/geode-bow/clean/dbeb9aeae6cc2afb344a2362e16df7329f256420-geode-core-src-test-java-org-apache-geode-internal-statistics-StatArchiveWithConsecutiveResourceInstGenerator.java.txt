Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Generates the stat archive file that is committed under src/test/resources
- * for {@link StatArchiveWithConsecutiveResourceInstIntegrationTest} to load.
+ * Generates the stat archive file that is committed under src/test/resources for
+ * {@link StatArchiveWithConsecutiveResourceInstIntegrationTest} to load.
- * <p>The generated gfs file is used to confirm GEODE-1782 and its fix.
+ * <p>
+ * The generated gfs file is used to confirm GEODE-1782 and its fix.
-  protected static final String TEST_NAME = StatArchiveWithConsecutiveResourceInstIntegrationTest.class.getSimpleName();
+  protected static final String TEST_NAME =
+      StatArchiveWithConsecutiveResourceInstIntegrationTest.class.getSimpleName();
-  private Map<String,String> statisticTypes;
-  private Map<String,Map<String,Number>> allStatistics;
+  private Map<String, String> statisticTypes;
+  private Map<String, Map<String, Number>> allStatistics;
-    this.archiveFileName = new File(this.dir.getAbsolutePath(), ARCHIVE_FILE_NAME).getAbsolutePath();
+    this.archiveFileName =
+        new File(this.dir.getAbsolutePath(), ARCHIVE_FILE_NAME).getAbsolutePath();
-    StatArchiveDescriptor archiveDescriptor = new StatArchiveDescriptor.Builder()
-      .setArchiveName(this.archiveFileName)
-      .setSystemId(1)
-      .setSystemStartTime(WRITER_INITIAL_DATE_MILLIS - 2000)
-      .setSystemDirectoryPath(TEST_NAME)
-      .setProductDescription(TEST_NAME)
-      .build();
+    StatArchiveDescriptor archiveDescriptor =
+        new StatArchiveDescriptor.Builder().setArchiveName(this.archiveFileName).setSystemId(1)
+            .setSystemStartTime(WRITER_INITIAL_DATE_MILLIS - 2000).setSystemDirectoryPath(TEST_NAME)
+            .setProductDescription(TEST_NAME).build();
-    long sampleTimeNanos = WRITER_PREVIOUS_TIMESTAMP_NANOS + NANOS_PER_MILLI*1000;
+    long sampleTimeNanos = WRITER_PREVIOUS_TIMESTAMP_NANOS + NANOS_PER_MILLI * 1000;
-    StatisticsType type = createStatisticsType(STATS_TYPE_NAME, "description of " + STATS_TYPE_NAME);
+    StatisticsType type =
+        createStatisticsType(STATS_TYPE_NAME, "description of " + STATS_TYPE_NAME);
-    StatArchiveReader reader = new StatArchiveReader(new File[]{actual}, null, false);
+    StatArchiveReader reader = new StatArchiveReader(new File[] {actual}, null, false);
-      Map<String,Number> expectedStatValues = this.allStatistics.get(resourceName);
+      Map<String, Number> expectedStatValues = this.allStatistics.get(resourceName);
-          expectedStatValues.get(statName).doubleValue(),
-          statValues[i].getSnapshotsMostRecent(), 0.01);
+            expectedStatValues.get(statName).doubleValue(), statValues[i].getSnapshotsMostRecent(),
+            0.01);
-    for (ResourceInst resourceInst: findResourceInsts(archiveFile, STATS_SPEC_STRING)) {
+    for (ResourceInst resourceInst : findResourceInsts(archiveFile, STATS_SPEC_STRING)) {
-    return StatArchiveWithConsecutiveResourceInstGenerator.class + "_" + this.testName.getMethodName();
+    return StatArchiveWithConsecutiveResourceInstGenerator.class + "_"
+        + this.testName.getMethodName();
-      manager.createIntCounter("stat", "description of stat", "units"),
-    };
+        manager.createIntCounter("stat", "description of stat", "units"),};
-  private Statistics createStatistics(final StatisticsType type, final String textId, final long numericId) {
+  private Statistics createStatistics(final StatisticsType type, final String textId,
+      final long numericId) {
-    Map<String,Number> statValues = this.allStatistics.get(statistics.getTextId());
+    Map<String, Number> statValues = this.allStatistics.get(statistics.getTextId());
