Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.cache.AbstractRegion;
+import com.gemstone.gemfire.internal.cache.control.InternalResourceManager;
- * {@link Region} based on the percentage of Java VM heap memory that is
- * currently being used. If the percentage of Java VM heap memory in use exceeds
+ * {@link Region} based on the percentage of memory that is
+ * currently being used. If the percentage of memory in use exceeds
+ * For heap regions:
-    final String entryBytesDesc = "The amount of VM heap currently used by regions configured for eviction.";
+    final String entryBytesDesc = "The amount of memory currently used by regions configured for eviction.";
-                f
-                    .createLongCounter("lruEvictions", lruEvictionsDesc,
-                        "entries"),
+                f.createLongCounter("lruEvictions", lruEvictionsDesc, "entries"),
-                f.createLongGauge("lruDestroysLimit", lruDestroysLimitDesc,
-                    "entries"),
-                f.createLongCounter("lruEvaluations", lruEvaluationsDesc,
-                    "entries"),
-                f.createLongCounter("lruGreedyReturns", lruGreedyReturnsDesc,
-                    "entries"), });
+                f.createLongGauge("lruDestroysLimit", lruDestroysLimitDesc, "entries"),
+                f.createLongCounter("lruEvaluations", lruEvaluationsDesc, "entries"),
+                f.createLongCounter("lruGreedyReturns", lruGreedyReturnsDesc, "entries"), });
-        return statType.nameToId("heapPercentage");
+        throw new UnsupportedOperationException("Limit not used with this LRU type");
-
+      
-       * incorrectly estimated in the general case), we use the amount of VM
-       * heap currently in use. If the amount of VM heap current in use
+       * incorrectly estimated in the general case), we use the amount of
+       * memory currently in use. If the amount of memory current in use
-        if (region instanceof BucketRegion) {
-          BucketRegion br = (BucketRegion)region;
-          return ((GemFireCacheImpl)region.getCache()).getHeapEvictor().mustEvict()
-              && br.getSizeForEviction() > 0;
-        }
-        else if (region != null) {
-          return ((GemFireCacheImpl) region.getCache()).getHeapEvictor().mustEvict()
-              && ((LocalRegion) region).getRegionMap().sizeInVM() > 0;
+        final GemFireCacheImpl cache;
+        if (region != null) {
+          cache = (GemFireCacheImpl) region.getRegionService();
-          return GemFireCacheImpl.getInstance().getHeapEvictor().mustEvict();
+          cache = GemFireCacheImpl.getInstance();
+        InternalResourceManager resourceManager = cache.getResourceManager();
+        
+        if (region == null) {
+          return resourceManager.getHeapMonitor().getState().isEviction();
+        }
+        
+        final boolean monitorStateIsEviction;
+        if (!((AbstractRegion) region).getOffHeap()) {
+          monitorStateIsEviction = resourceManager.getHeapMonitor().getState().isEviction();
+        } else {
+          monitorStateIsEviction = resourceManager.getOffHeapMonitor().getState().isEviction();
+        }
+        
+        if (region instanceof BucketRegion) {
+          return monitorStateIsEviction && ((BucketRegion) region).getSizeForEviction() > 0;
+        }
+        
+        return monitorStateIsEviction && ((LocalRegion) region).getRegionMap().sizeInVM() > 0;
