GEODE-1927: add support for old GemFire remote sites (WAN)

This adds a new JAR and associated cache service to Geode.  The service
and associated changes to Geode protect the server from receiving
com.gemstone.gemfire packaged objects, translating them to their org.apache.geode
counterparts.

The service is called OldClientSupportService and the new jar is
geode-old-client-support.jar.  Though it's called "OldClient" this will
also protect the WAN gateways.

Several Geode exception classes did not have serialVersionUIDs.  Apparently
folks thought that abstract superclasses did not need these but this is not
the case.  I've generated UIDs based on GemFire 8.2.1 classes and put
them in place in Geode's classes.

-    System.out.println("Executing " + Arrays.asList(cmd));
+    System.out.println("Executing " + Arrays.toString(cmd));
+    classPath = removeJREJars(classPath);
-      cmds.add("-D" + InternalLocator.INHIBIT_DM_BANNER + "=true");
+//      cmds.add("-D" + InternalLocator.INHIBIT_DM_BANNER + "=true");
+    String jtests = System.getProperty("JTESTS");
+    if (jtests != null) {
+      cmds.add("-DJTESTS="+jtests);
+    }
+  
+  private String removeJREJars(String classpath) {
+    String[] jars = classpath.split(File.pathSeparator);
+    StringBuilder sb = new StringBuilder(classpath.length());
+    String jreLib = File.separator + "jre" + File.separator + "lib" + File.separator;
+    Boolean firstjar = true;
+    for (String jar: jars) {
+      if (!jar.contains(jreLib)) {
+        if (!firstjar) {
+          sb.append(File.pathSeparator);
+        }
+        sb.append(jar);
+        firstjar = false;
+      }
+    }
+    return sb.toString();
+  }
-  private static class ProcessHolder {
+  public static class ProcessHolder {
