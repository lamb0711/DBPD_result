GEODE-4771: Defaults in ConfigurePDXCommand

- Refactored `ConfigurePDXCommand` to allow unit testing.
- Added a custom `Interceptor` to validate command input.
- Added unit and integration tests for `ConfigurePDXCommand`.
- Fixed help strings for `auto-serializable-classes` and
  `portable-auto-serializable-classes`.
- Fixed `ConfigurePDXCommand` to set `check-portability=false` when
  `--auto-serializable-classes` is used.

+import org.apache.geode.management.internal.cli.AbstractCliAroundInterceptor;
+import org.apache.geode.management.internal.cli.GfshParseResult;
+
+  /**
+   *
+   * @param checkPortability
+   * @param patterns
+   */
+  protected ReflectionBasedAutoSerializer createReflectionBasedAutoSerializer(
+      boolean checkPortability, String[] patterns) {
+    return new ReflectionBasedAutoSerializer(checkPortability, patterns);
+  }
+
+  /**
+   * @param forParsing if true then this creation is used for parsing xml; if false then it is used
+   *        for generating xml.
+   * @since GemFire 5.7
+   */
+  protected CacheCreation getCacheCreation(boolean forParsing) {
+    return new CacheCreation(forParsing);
+  }
+
+  /**
+   * Creates the XmlEntity associated to the PDX configuration.
+   */
+  protected XmlEntity createXmlEntity(CacheCreation cache) {
+    final StringWriter stringWriter = new StringWriter();
+    final PrintWriter printWriter = new PrintWriter(stringWriter);
+    CacheXmlGenerator.generate(cache, printWriter, true, false, false);
+    printWriter.close();
+    String xmlDefinition = stringWriter.toString();
+
+    return XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
+  }
+
-  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION)
+  @CliMetaData(relatedTopic = CliStrings.TOPIC_GEODE_REGION,
+      interceptor = "org.apache.geode.management.internal.cli.commands.ConfigurePDXCommand$Interceptor")
-          help = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES__HELP) String[] patterns,
+          help = CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES__HELP) String[] nonPortableClassesPatterns,
-          help = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES__HELP) String[] portablePatterns) {
+          help = CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES__HELP) String[] portableClassesPatterns) {
+
+      ReflectionBasedAutoSerializer autoSerializer;
+      CacheCreation cache = getCacheCreation(true);
-      CacheCreation cache = new CacheCreation(true);
-      if ((portablePatterns != null && portablePatterns.length > 0)
-          && (patterns != null && patterns.length > 0)) {
-        return ResultBuilder.createUserErrorResult(CliStrings.CONFIGURE_PDX__ERROR__MESSAGE);
-      }
+
+
+
-
+
-
-      if (portablePatterns != null) {
-        ReflectionBasedAutoSerializer autoSerializer =
-            new ReflectionBasedAutoSerializer(portablePatterns);
+      // Auto Serializer Configuration
+      if (portableClassesPatterns != null) {
+        autoSerializer = createReflectionBasedAutoSerializer(true, portableClassesPatterns);
-        ird.addLine("PDX Serializer " + cache.getPdxSerializer().getClass().getName());
-        ird.addLine("Portable classes " + Arrays.toString(portablePatterns));
+        ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
+        ird.addLine("Portable Classes = " + Arrays.toString(portableClassesPatterns));
-      if (patterns != null) {
-        ReflectionBasedAutoSerializer nonPortableAutoSerializer =
-            new ReflectionBasedAutoSerializer(true, patterns);
-        cache.setPdxSerializer(nonPortableAutoSerializer);
-        ird.addLine("PDX Serializer : " + cache.getPdxSerializer().getClass().getName());
-        ird.addLine("Non portable classes :" + Arrays.toString(patterns));
+      if (nonPortableClassesPatterns != null) {
+        autoSerializer = createReflectionBasedAutoSerializer(false, nonPortableClassesPatterns);
+        cache.setPdxSerializer(autoSerializer);
+        ird.addLine("PDX Serializer = " + cache.getPdxSerializer().getClass().getName());
+        ird.addLine("Non Portable Classes = " + Arrays.toString(nonPortableClassesPatterns));
-      final StringWriter stringWriter = new StringWriter();
-      final PrintWriter printWriter = new PrintWriter(stringWriter);
-      CacheXmlGenerator.generate(cache, printWriter, true, false, false);
-      printWriter.close();
-      String xmlDefinition = stringWriter.toString();
-      // TODO jbarrett - shouldn't this use the same loadXmlDefinition that other constructors use?
-      XmlEntity xmlEntity =
-          XmlEntity.builder().withType(CacheXml.PDX).withConfig(xmlDefinition).build();
-
+      XmlEntity xmlEntity = createXmlEntity(cache);
-
+
+
+  /**
+   * Interceptor to validate command parameters.
+   */
+  public static class Interceptor extends AbstractCliAroundInterceptor {
+
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      Object portableClassesPatterns =
+          parseResult.getParamValue(CliStrings.CONFIGURE_PDX__PORTABLE__AUTO__SERIALIZER__CLASSES);
+      Object nonPortableClassesPatterns =
+          parseResult.getParamValue(CliStrings.CONFIGURE_PDX__AUTO__SERIALIZER__CLASSES);
+
+      if ((nonPortableClassesPatterns != null && ((String[]) nonPortableClassesPatterns).length > 0)
+          && (portableClassesPatterns != null && ((String[]) portableClassesPatterns).length > 0)) {
+
+        return ResultBuilder.createUserErrorResult(CliStrings.CONFIGURE_PDX__ERROR__MESSAGE);
+      }
+
+      return ResultBuilder.createInfoResult("");
+    }
+  }
