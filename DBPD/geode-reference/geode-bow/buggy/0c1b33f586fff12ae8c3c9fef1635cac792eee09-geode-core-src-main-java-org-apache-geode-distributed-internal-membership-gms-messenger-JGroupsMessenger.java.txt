GEODE-7507 remove GMSMembership's dependency on DistributionMessage (#4384)

* GEODE-7507 remove GMSMembership's dependency on DistributionMessage

Prior to this change-set the membership module wrapped all messages in a
GMSMessageAdapter.  This is no longer necessary and I've deleted that
class.  Instead, our messages now implement GMSMessage (now renamed
DistributionMessage) and the geode-core abstract DistributionMessage
class (now renamed ClusterMessage) implements the membership module's
API.

Most of the files in the diff are only affected by the renaming of
GMSMessage and DistributionMessage.  The primary changes are in GMSManager
and DistributionMessage (now named ClusterMessage).

* rebase on develop, rename DistributionMessageObserver

* making pmdMain happy

* revert renaming message class/interface

* fix serialization test

* rename GMSMessage to Message

* fixes for Dan's comments

* addressing pmdMain issue

* removing DistributionMessage from another arch unit test

-import org.jgroups.Message;
-import org.apache.geode.distributed.internal.membership.gms.interfaces.GMSMessage;
+import org.apache.geode.distributed.internal.membership.gms.api.Message;
-  private Queue<Message> queuedMessagesFromReconnect;
+  private Queue<org.jgroups.Message> queuedMessagesFromReconnect;
-      for (Message message : queuedMessagesFromReconnect) {
+      for (org.jgroups.Message message : queuedMessagesFromReconnect) {
-  public Set<MemberIdentifier> sendUnreliably(GMSMessage msg) {
+  public Set<MemberIdentifier> sendUnreliably(Message msg) {
-  public Set<MemberIdentifier> send(GMSMessage msg) {
+  public Set<MemberIdentifier> send(Message msg) {
-  private Set<MemberIdentifier> send(GMSMessage msg, boolean reliably) {
+  private Set<MemberIdentifier> send(Message msg, boolean reliably) {
-      Message jmsg =
+      org.jgroups.Message jmsg =
-          jmsg.setFlag(Message.Flag.NO_RELIABILITY);
+          jmsg.setFlag(org.jgroups.Message.Flag.NO_RELIABILITY);
-      Int2ObjectOpenHashMap<Message> messages = new Int2ObjectOpenHashMap<>();
+      Int2ObjectOpenHashMap<org.jgroups.Message> messages = new Int2ObjectOpenHashMap<>();
-          Message jmsg = createJGMessage(msg, local, mbr, version);
+          org.jgroups.Message jmsg = createJGMessage(msg, local, mbr, version);
-        Message jmsg = messages.get(version);
+        org.jgroups.Message jmsg = messages.get(version);
-          Message tmp = (i < (calculatedLen - 1)) ? jmsg.copy(true) : jmsg;
+          org.jgroups.Message tmp = (i < (calculatedLen - 1)) ? jmsg.copy(true) : jmsg;
-            jmsg.setFlag(Message.Flag.NO_RELIABILITY);
+            jmsg.setFlag(org.jgroups.Message.Flag.NO_RELIABILITY);
-  Message createJGMessage(GMSMessage gfmsg, JGAddress src, MemberIdentifier dst, short version) {
+  org.jgroups.Message createJGMessage(Message gfmsg, JGAddress src, MemberIdentifier dst,
+      short version) {
-    Message msg = new Message();
+    org.jgroups.Message msg = new org.jgroups.Message();
-  void writeEncryptedMessage(GMSMessage gfmsg, MemberIdentifier recipient, short version,
+  void writeEncryptedMessage(Message gfmsg, MemberIdentifier recipient, short version,
-  int getRequestId(GMSMessage gfmsg, MemberIdentifier destination, boolean add) {
+  int getRequestId(Message gfmsg, MemberIdentifier destination, boolean add) {
-  byte[] serializeMessage(GMSMessage gfmsg, BufferDataOutputStream out_stream)
+  byte[] serializeMessage(Message gfmsg, BufferDataOutputStream out_stream)
-        .writeObject(services.getManager().unwrapMessage(gfmsg), out_stream);
+        .writeObject(gfmsg, out_stream);
-  void setMessageFlags(GMSMessage gfmsg, Message msg) {
+  void setMessageFlags(Message gfmsg, org.jgroups.Message msg) {
-    msg.setTransientFlag(Message.TransientFlag.DONT_LOOPBACK);
+    msg.setTransientFlag(org.jgroups.Message.TransientFlag.DONT_LOOPBACK);
-  Object readJGMessage(Message jgmsg) {
+  Object readJGMessage(org.jgroups.Message jgmsg) {
-  void setSender(GMSMessage dm, MemberIdentifier m, short ordinal) {
+  void setSender(Message dm, MemberIdentifier m, short ordinal) {
-  GMSMessage readEncryptedMessage(DataInputStream dis, short ordinal,
+  Message readEncryptedMessage(DataInputStream dis, short ordinal,
-        GMSMessage result = deserializeMessage(in, ordinal);
+        Message result = deserializeMessage(in, ordinal);
-  GMSMessage deserializeMessage(DataInputStream in, short ordinal)
+  Message deserializeMessage(DataInputStream in, short ordinal)
-    GMSMessage result = services.getManager()
-        .wrapMessage(services.getSerializer().getObjectDeserializer().readObject(in));
+    Message result = services.getSerializer().getObjectDeserializer().readObject(in);
-  void filterOutgoingMessage(GMSMessage m) {
+  void filterOutgoingMessage(Message m) {
-  void filterIncomingMessage(GMSMessage m) {
+  void filterIncomingMessage(Message m) {
-    public void receive(Message jgmsg) {
+    public void receive(org.jgroups.Message jgmsg) {
-    private void receive(Message jgmsg, boolean fromQuorumChecker) {
+    private void receive(org.jgroups.Message jgmsg, boolean fromQuorumChecker) {
-        GMSMessage msg = services.getManager().wrapMessage(o);
+        Message msg = (Message) o;
-    private MessageHandler getMessageHandler(GMSMessage msg) {
+    private MessageHandler getMessageHandler(Message msg) {
-  public Set<MemberIdentifier> send(GMSMessage msg, GMSMembershipView alternateView) {
+  public Set<MemberIdentifier> send(Message msg, GMSMembershipView alternateView) {
