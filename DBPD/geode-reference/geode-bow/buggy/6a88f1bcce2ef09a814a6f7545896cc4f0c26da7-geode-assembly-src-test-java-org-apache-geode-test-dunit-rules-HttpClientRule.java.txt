GEODE-2730: refactor rules

* consolidate the two sets of server/locator starter rules
* do not allow member start up at test initialization time.
* validate properties in @Before
* use provider in the chained rules to get the appropriate ports in @Before

-import org.apache.http.protocol.BasicHttpContext;
-import org.apache.http.protocol.HttpContext;
-import org.junit.Before;
+import java.util.function.Supplier;
+/**
+ * this rules simplifies creating a httpClient for verification of pulse behaviors or any http
+ * client behaviors. Usually after you start up a server/locator with http service, you would want
+ * to connect to it through http client and verify some behavior, you would need to use this rule.
+ *
+ * See @PulseSecuriyTest for examples
+ *
+ */
-  private int port;
+  private Supplier<Integer> portSupplier;
-  private HttpContext context;
-  private LocalLocatorStarterRule locatorStarterRule;
-  public HttpClientRule(LocalLocatorStarterRule locatorStarterRule) {
-    this.locatorStarterRule = locatorStarterRule;
-  }
-  public HttpClientRule(int port) {
-    this("localhost", port);
-  }
-
-  public HttpClientRule(String hostName, int port) {
+  public HttpClientRule(String hostName, Supplier<Integer> portSupplier) {
-    this.port = port;
+    this.portSupplier = portSupplier;
-  @Before
+  public HttpClientRule(Supplier<Integer> portSupplier) {
+    this("localhost", portSupplier);
+  }
+
+
+  @Override
-    if (locatorStarterRule != null) {
-      this.hostName = "localhost";
-      this.port = locatorStarterRule.getHttpPort();
-    }
-    host = new HttpHost(hostName, port);
+    host = new HttpHost(hostName, portSupplier.get());
-    context = new BasicHttpContext();
-
