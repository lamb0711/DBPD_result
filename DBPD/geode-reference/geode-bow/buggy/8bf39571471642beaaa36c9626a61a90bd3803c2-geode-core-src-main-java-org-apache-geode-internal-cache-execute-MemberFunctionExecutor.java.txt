Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    this.ds = (InternalDistributedSystem)s;
+    this.ds = (InternalDistributedSystem) s;
-    this.ds = (InternalDistributedSystem)s;
+    this.ds = (InternalDistributedSystem) s;
-    this.ds = (InternalDistributedSystem)s;
+    this.ds = (InternalDistributedSystem) s;
-  public MemberFunctionExecutor(DistributedSystem s, Set m, ServerToClientFunctionResultSender sender) {
+  public MemberFunctionExecutor(DistributedSystem s, Set m,
+      ServerToClientFunctionResultSender sender) {
-    this(memberFunctionExecutor);    
-    
+    this(memberFunctionExecutor);
+
-    this(memberFunctionExecutor);    
+    this(memberFunctionExecutor);
-  private MemberFunctionExecutor(MemberFunctionExecutor memberFunctionExecutor,
-      Object arguments) {
+  private MemberFunctionExecutor(MemberFunctionExecutor memberFunctionExecutor, Object arguments) {
-    } 
+    }
-    final InternalDistributedMember localVM = this.ds.getDistributionManager()
-        .getDistributionManagerId();
-    final LocalResultCollector<?, ?> localRC = getLocalResultCollector(
-        function, resultCollector); 
+    final InternalDistributedMember localVM =
+        this.ds.getDistributionManager().getDistributionManagerId();
+    final LocalResultCollector<?, ?> localRC = getLocalResultCollector(function, resultCollector);
-    if(dest.size()==1 && dest.contains(localVM)){
-      localOnly = true ;	
+    if (dest.size() == 1 && dest.contains(localVM)) {
+      localOnly = true;
-    final MemberFunctionResultSender resultSender = new MemberFunctionResultSender(dm,
-        localRC, function,localOnly, remoteOnly, sender);
+    final MemberFunctionResultSender resultSender =
+        new MemberFunctionResultSender(dm, localRC, function, localOnly, remoteOnly, sender);
-    
+
-      HashMap<InternalDistributedMember, Object> memberArgs = new HashMap<InternalDistributedMember, Object>();
+      HashMap<InternalDistributedMember, Object> memberArgs =
+          new HashMap<InternalDistributedMember, Object>();
-        InternalDistributedMember recip = (InternalDistributedMember)iter
-            .next();
+        InternalDistributedMember recip = (InternalDistributedMember) iter.next();
-      MemberFunctionResultWaiter resultReciever = new MemberFunctionResultWaiter(
-          this.ds, localRC, function, memberArgs, dest,resultSender);
+      MemberFunctionResultWaiter resultReciever = new MemberFunctionResultWaiter(this.ds, localRC,
+          function, memberArgs, dest, resultSender);
-      ResultCollector reply = resultReciever.getFunctionResultFrom(dest,
-          function, this);
+      ResultCollector reply = resultReciever.getFunctionResultFrom(dest, function, this);
-        throw new TransactionException(LocalizedStrings.PartitionedRegion_TX_FUNCTION_ON_MORE_THAN_ONE_NODE.toLocalizedString());
+        throw new TransactionException(
+            LocalizedStrings.PartitionedRegion_TX_FUNCTION_ON_MORE_THAN_ONE_NODE
+                .toLocalizedString());
-        DistributedMember funcTarget = (DistributedMember)dest.iterator().next();
+        DistributedMember funcTarget = (DistributedMember) dest.iterator().next();
-          throw new TransactionDataNotColocatedException(LocalizedStrings.PartitionedRegion_TX_FUNCTION_EXECUTION_NOT_COLOCATED
-              .toLocalizedString());
+          throw new TransactionDataNotColocatedException(
+              LocalizedStrings.PartitionedRegion_TX_FUNCTION_EXECUTION_NOT_COLOCATED
+                  .toLocalizedString());
-    if (function.optimizeForWrite() && cache!= null && cache.
-        getResourceManager().getHeapMonitor().containsHeapCriticalMembers(dest) &&
-        !MemoryThresholds.isLowMemoryExceptionDisabled()) {
-      Set<InternalDistributedMember> hcm  = cache.getResourceAdvisor().adviseCritialMembers();
+    if (function.optimizeForWrite() && cache != null
+        && cache.getResourceManager().getHeapMonitor().containsHeapCriticalMembers(dest)
+        && !MemoryThresholds.isLowMemoryExceptionDisabled()) {
+      Set<InternalDistributedMember> hcm = cache.getResourceAdvisor().adviseCritialMembers();
-      throw new LowMemoryException(LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1.toLocalizedString(
-              new Object[] {function.getId(), sm}), sm);
+      throw new LowMemoryException(
+          LocalizedStrings.ResourceManager_LOW_MEMORY_FOR_0_FUNCEXEC_MEMBERS_1
+              .toLocalizedString(new Object[] {function.getId(), sm}),
+          sm);
-    }
-    else {
+    } else {
-    return new MemberFunctionExecutor(this,arguments);
+    return new MemberFunctionExecutor(this, arguments);
-  //Changing the object!!
+
+  // Changing the object!!
-    return new MemberFunctionExecutor(this,rs);
+    return new MemberFunctionExecutor(this, rs);
-  
+
-  public InternalExecution withMemberMappedArgument(
-      MemberMappedArgument argument) {
-    if(argument == null){
+  public InternalExecution withMemberMappedArgument(MemberMappedArgument argument) {
+    if (argument == null) {
-    }
-    else {
+    } else {
-  
+
