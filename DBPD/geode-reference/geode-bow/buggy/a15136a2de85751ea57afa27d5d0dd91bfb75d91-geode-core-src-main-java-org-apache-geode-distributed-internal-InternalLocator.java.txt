GEODE-6283: have the management rest controller call the internal management service

* GEODE-6283: have the management rest controller call the internal cluster management service to actually create the region

* inject cluster management service to the rest controller
* have the controller produce json string for response
* refactor the controller exception handler to always send back json string

+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.Pair;
+import org.eclipse.jetty.webapp.WebAppContext;
+import org.apache.geode.internal.GemFireVersion;
+import org.apache.geode.management.internal.AgentUtil;
+import org.apache.geode.management.internal.JettyHelper;
+import org.apache.geode.management.internal.ManagementAgent;
+import org.apache.geode.management.internal.SystemManagementService;
+  private WebAppContext managementWebapp;
-    startSharedConfigurationService();
-    clusterManagementService = new LocatorClusterManagementService(locator.myCache,
-        locator.configurationPersistenceService);
+    startClusterManagementService();
+  }
+
+  private void startClusterManagementService() {
+    startConfigurationPersistenceService();
+
+    if (myCache == null) {
+      return;
+    }
+
+    clusterManagementService =
+        new LocatorClusterManagementService(locator.myCache.getDistributionManager(),
+            locator.configurationPersistenceService);
+
+    // start management rest service
+    AgentUtil agentUtil = new AgentUtil(GemFireVersion.getGemFireVersion());
+    // Find the V2 Management rest WAR file
+    final String gemfireManagementWar = agentUtil.findWarLocation("geode-web-management");
+    if (gemfireManagementWar == null) {
+      logger.info(
+          "Unable to find GemFire V2 Management REST API WAR file; the Management REST Interface for Geode will not be accessible.");
+      return;
+    }
+
+    ManagementAgent managementAgent =
+        ((SystemManagementService) SystemManagementService.getExistingManagementService(myCache))
+            .getManagementAgent();
+
+    if (managementAgent == null) {
+      logger.info(
+          "management service needs to be started for ClusterManagementService to be running.");
+      return;
+    }
+
+    Pair<String, Object> securityServiceAttr =
+        new ImmutablePair<>(JettyHelper.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
+            myCache.getSecurityService());
+    Pair<String, Object> cmServiceAttr =
+        new ImmutablePair<>(JettyHelper.CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM,
+            clusterManagementService);
+    managementWebapp =
+        managementAgent
+            .addWebApplication("/geode-management", gemfireManagementWar, securityServiceAttr,
+                cmServiceAttr);
+    // stop the managementwebapp
+    if (managementWebapp != null) {
+      try {
+        managementWebapp.stop();
+      } catch (Exception e) {
+        logger.error("unable to stop the management webapp.", e);
+      }
+    }
+
+
-        startSharedConfigurationService();
+        startClusterManagementService();
-      this.clusterManagementService = new LocatorClusterManagementService(this.myCache,
-          this.configurationPersistenceService);
-  private void startSharedConfigurationService() {
+  private void startConfigurationPersistenceService() {
