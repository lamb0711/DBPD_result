Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.internal.InternalDataSerializer;
+import com.gemstone.gemfire.internal.Version;
+  /*TODO [DISTTX] Convert into flag*/
+  protected boolean isTransactionDistributed = false;
+    setIfTransactionDistributed();
+    setIfTransactionDistributed();
+    if (txState != null) {
+      // [DISTTX] Lets not throw this exception for Dist Tx
+      if (canStartRemoteTransaction() && txState.isRealDealLocal() && !txState.isDistTx()) {
+        //logger.error("sending rmt txId even though tx is local! txState=" + txState, new RuntimeException("STACK"));
+        throw new IllegalStateException("Sending remote txId even though transaction is local. This should never happen: txState=" + txState);
+      }
+    }
+    this.isTransactionDistributed = other.isTransactionDistributed;
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    // extra field post 9.0
+    if (InternalDataSerializer.getVersionForDataStream(in).compareTo(
+        Version.GFE_90) >= 0) {
+      this.isTransactionDistributed = in.readBoolean();
+    }
-
+ 
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
+    // extra field post 9.0
+    if (InternalDataSerializer.getVersionForDataStream(out).compareTo(
+        Version.GFE_90) >= 0) {
+      out.writeBoolean(this.isTransactionDistributed);
+    }
+  
+  protected final boolean _mayAddToMultipleSerialGateways(DistributionManager dm) {
+    try {
+      PartitionedRegion pr = PartitionedRegion.getPRFromId(this.regionId);
+      if (pr == null) {
+        return false;
+      }
+      return pr.notifiesMultipleSerialGateways();
+    } catch (PRLocallyDestroyedException e) {
+      return false;
+    } catch (CancelException ignore) {
+      return false;
+    }
+  }
+
+  
+  @Override
+  public boolean isTransactionDistributed() {
+    return this.isTransactionDistributed;
+  }
+  
+  /*
+   * For Distributed Tx
+   */
+  public void setTransactionDistributed(boolean isDistTx) {
+   this.isTransactionDistributed = isDistTx;
+  }
+  
+  /*
+   * For Distributed Tx
+   */
+  private void setIfTransactionDistributed() {
+    GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
+    if (cache != null) {
+      if (cache.getTxManager() != null) {
+        this.isTransactionDistributed = cache.getTxManager().isDistributed();
+      }
+    }
+  }
