GEODE-1372 Fixed review comments.

Added api docs. Removed statis in GMSEncrpt and made that functionality
in GMSLocator. Added system property for #of encryptors. Fixed test
issue

-import java.util.ArrayList;
+import com.gemstone.gemfire.distributed.internal.membership.InternalDistributedMember.InternalDistributedMemberWrapper;
-
-  public static Map<GMSEncrypt.InternalDistributedMemberWrapper, byte[]> registrants = new ConcurrentHashMap<>();
+  
-  private int numberOfPeerEncryptorCopies = 10;
+  public static final int numberOfPeerEncryptorCopies = Integer.getInteger("GMSEncrypt.MAX_ENCRYPTORS", Math.max(Runtime.getRuntime().availableProcessors()*4, 16)).intValue();
+  /**
+   * Keeps multiple copies for peer
+   */
-  private ClusterEncryptor[] clusterEncryptors;
+  /**
+   * Keeps multiple copies of cluster keys
+   */
+  private ClusterEncryptor[] copyOfClusterEncryptors;
-  private Map<GMSEncrypt.InternalDistributedMemberWrapper, byte[]> memberToPeerEncryptor = new ConcurrentHashMap<>();
+  /**
+   * it keeps PK for peers
+   */
+  private Map<InternalDistributedMemberWrapper, byte[]> memberToPeerEncryptor = new ConcurrentHashMap<>();
-    //TODO we are reseeting here, in case there is some race
-  public static void registerMember(byte[] pk, InternalDistributedMember mbr) {
-    if (pk != null) {
-      registrants.put(new GMSEncrypt.InternalDistributedMemberWrapper(mbr), pk);
-    }
-  }
-  
-  public static void clear() {
-    registrants.clear();
-  }
-  
-  public static byte[] getRegisteredPublicKey(InternalDistributedMember mbr) {
-    InternalDistributedMemberWrapper m = new InternalDistributedMemberWrapper(mbr);
-    return registrants.get(m);
+  private  byte[] getRegisteredPublicKey(InternalDistributedMember mbr) {
+    return services.getPublicKey(mbr);
-    clusterEncryptors = new ClusterEncryptor[numberOfPeerEncryptorCopies];
+    copyOfClusterEncryptors = new ClusterEncryptor[numberOfPeerEncryptorCopies];
+      gmsEncrypt.services = this.services;
-  }
-
-  static class InternalDistributedMemberWrapper {
-    InternalDistributedMember mbr;
-    
-    public InternalDistributedMemberWrapper(InternalDistributedMember m) {
-      this.mbr = m;
-    }
-
-    public InternalDistributedMember getMbr() {
-      return mbr;
-    }
-
-    @Override
-    public int hashCode() {
-      return mbr.hashCode();
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      InternalDistributedMember other = ((InternalDistributedMemberWrapper)obj).mbr;
-      return mbr.compareTo(other, false, false) == 0;
-    }
-
-    @Override
-    public String toString() {
-      return "InternalDistrubtedMemberWrapper [mbr=" + mbr + "]";
-    }        
-  }
+  }  
-    ClusterEncryptor c = clusterEncryptors[h];
+    ClusterEncryptor c = copyOfClusterEncryptors[h];
-      synchronized (copyOfPeerEncryptors) {
-        c = clusterEncryptors[h];
+      synchronized (copyOfClusterEncryptors) {
+        c = copyOfClusterEncryptors[h];
-          clusterEncryptors[h] = c;          
+          copyOfClusterEncryptors[h] = c;          
-    //TODO: need to look this is thread safe
