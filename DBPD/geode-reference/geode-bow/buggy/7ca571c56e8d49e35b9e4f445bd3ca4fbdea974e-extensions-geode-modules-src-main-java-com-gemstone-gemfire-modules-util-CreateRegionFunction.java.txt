GEODE-1617: Regions can be created with a variety of characters that are unsupported

* Test for valid characters when creating non-internal regions
* Updated unit tests and added a new isInternalRegion field to InternalRegionAttributes
* Fixed issue with HA region.
* Found a potential issue with Attributes for a region.
* This closes #201

+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.Properties;
+
+import com.gemstone.gemfire.InternalGemFireError;
+import com.gemstone.gemfire.cache.AttributesFactory;
+import com.gemstone.gemfire.cache.RegionAttributes;
+import com.gemstone.gemfire.cache.Scope;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.cache.InternalRegionArguments;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.Properties;
-
-      } catch (Exception e) {
+      } catch (Exception ignore) {
-    return factory.create(REGION_CONFIGURATION_METADATA_REGION);
+    GemFireCacheImpl gemFireCache = (GemFireCacheImpl) cache;
+    InternalRegionArguments ira = new InternalRegionArguments().setInternalRegion(true);
+    AttributesFactory af = new AttributesFactory();
+    af.setScope(Scope.LOCAL);
+    RegionAttributes ra = af.create();
+    try {
+      return gemFireCache.createVMRegion(REGION_CONFIGURATION_METADATA_REGION, ra, ira);
+    } catch (IOException | ClassNotFoundException e) {
+      InternalGemFireError assErr = new InternalGemFireError(LocalizedStrings.GemFireCache_UNEXPECTED_EXCEPTION.toLocalizedString());
+      assErr.initCause(e);
+      throw assErr;
+    }
