GEODE-3569: save the serializer class name into LuceneIndexCreationProfile
and compare between members when creating index
            addCacheServiceProfile should use serializer as paramter
            set default class name
            add junit and dunit tests for fromData/toData
            add backward compatibility for fromData/toData
            add backward compatibility for LuceneIndexCreationProfile

+import org.apache.geode.cache.lucene.LuceneSerializer;
+import org.apache.geode.cache.lucene.internal.repository.serializer.HeterogeneousLuceneSerializer;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.VersionedDataSerializable;
-public class LuceneIndexCreationProfile implements CacheServiceProfile, DataSerializable {
+public class LuceneIndexCreationProfile implements CacheServiceProfile, VersionedDataSerializable {
+  private String serializerClass = HeterogeneousLuceneSerializer.class.getSimpleName();
+
-      Analyzer analyzer, Map<String, Analyzer> fieldAnalyzers) {
+      Analyzer analyzer, Map<String, Analyzer> fieldAnalyzers, LuceneSerializer serializer) {
+    if (serializer != null) {
+      this.serializerClass = serializer.getClass().getSimpleName();
+    }
+  public String getSerializerClass() {
+    return this.serializerClass;
+  }
+
+
+    if (!getSerializerClass().equals(remoteProfile.getSerializerClass())) {
+      return LocalizedStrings.LuceneService_CANNOT_CREATE_INDEX_0_ON_REGION_1_WITH_SERIALIZER_2_BECAUSE_ANOTHER_MEMBER_DEFINES_THE_SAME_INDEX_WITH_DIFFERENT_SERIALIZER_3
+          .toString(getIndexName(), regionPath, getSerializerClass(),
+              remoteProfile.getSerializerClass());
+    }
+
+    toDataPre_GEODE_1_3_0_0(out);
+    DataSerializer.writeString(this.serializerClass, out);
+  }
+
+  public void toDataPre_GEODE_1_3_0_0(DataOutput out) throws IOException {
+    fromDataPre_GEODE_1_3_0_0(in);
+    this.serializerClass = DataSerializer.readString(in);
+  }
+
+  public void fromDataPre_GEODE_1_3_0_0(DataInput in) throws IOException, ClassNotFoundException {
-        .append("]").toString();
+        .append("; serializer=").append(this.serializerClass).append("]").toString();
+
+  @Override
+  public Version[] getSerializationVersions() {
+    return new Version[] {Version.GEODE_130};
+  }
