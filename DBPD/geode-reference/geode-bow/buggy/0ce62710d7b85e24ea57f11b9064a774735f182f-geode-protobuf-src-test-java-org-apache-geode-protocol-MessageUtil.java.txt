GEODE-3129 - Added error messages to protobuf protocol. This now closes #621

added a new ErrorResponse type to ClientProtocol
removed success field from several RegionAPI response objects and refactored operation handlers to instead return ErrorResponses
made all op handlers take ClientProtocol.Requests and return ClientProtocol.Responses instead of operation specific types
moved the protobuf specific response building code from operation handlers to ProtobufResponseUtilities
moved the request building functions from MessageUtil (under Test) to ProtobufRequestUtilities
moved all utility classes to ...protocol.protobuf.utilities and added javadoc comments throughout
changed GetRegions to GetRegionNames, returns strings instead of Regions
replaced logging through the cache's LogWriter with log4j logging
updated all imports to be in the correct order for the new geode style guide

Signed-off-by: Brian Rowe <browe@pivotal.io>
Signed-off-by: Hitesh Khamesra <hiteshk25@yahoo.com>
Signed-off-by: Brian Rowe <browe@pivotal.io>

-import com.google.protobuf.ByteString;
-
-import org.apache.geode.protocol.protobuf.BasicTypes;
-import org.apache.geode.protocol.protobuf.ClientProtocol;
-import org.apache.geode.protocol.protobuf.EncodingTypeTranslator;
-import org.apache.geode.protocol.protobuf.RegionAPI;
-import org.apache.geode.serialization.codec.StringCodec;
+import org.apache.geode.protocol.protobuf.*;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufRequestUtilities;
+import org.apache.geode.protocol.protobuf.utilities.ProtobufUtilities;
+import org.apache.geode.serialization.SerializationService;
-import org.apache.geode.serialization.registry.SerializationCodecRegistry;
-import java.nio.ByteBuffer;
-
-  public static RegionAPI.PutRequest makePutRequest(String requestKey, String requestValue,
-      String requestRegion) throws CodecNotRegisteredForTypeException,
-      UnsupportedEncodingTypeException, CodecAlreadyRegisteredForTypeException {
-    StringCodec stringCodec = getStringCodec();
-    BasicTypes.EncodedValue.Builder key =
-        BasicTypes.EncodedValue.newBuilder().setEncodingType(BasicTypes.EncodingType.STRING)
-            .setValue(ByteString.copyFrom(stringCodec.encode(requestKey)));
-    BasicTypes.EncodedValue.Builder value =
-        BasicTypes.EncodedValue.newBuilder().setEncodingType(BasicTypes.EncodingType.STRING)
-            .setValue(ByteString.copyFrom(stringCodec.encode(requestValue)));
-    BasicTypes.Entry.Builder entry = BasicTypes.Entry.newBuilder().setKey(key).setValue(value);
-    RegionAPI.PutRequest.Builder putRequestBuilder = RegionAPI.PutRequest.newBuilder();
-    putRequestBuilder.setRegionName(requestRegion).setEntry(entry);
-
-    return putRequestBuilder.build();
-  }
-
-  public static ClientProtocol.Message makePutRequestMessage(String requestKey, String requestValue,
+  public static ClientProtocol.Message makePutRequestMessage(
+      SerializationService serializationService, String requestKey, String requestValue,
-    ClientProtocol.Request request = ClientProtocol.Request.newBuilder()
-        .setPutRequest(makePutRequest(requestKey, requestValue, requestRegion)).build();
-    return ClientProtocol.Message.newBuilder().setMessageHeader(header).setRequest(request).build();
+    BasicTypes.Entry entry = ProtobufUtilities.createEntry(
+        ProtobufUtilities.createEncodedValue(serializationService, requestKey),
+        ProtobufUtilities.createEncodedValue(serializationService, requestValue));
+
+    ClientProtocol.Request request =
+        ProtobufRequestUtilities.createPutRequest(requestRegion, entry);
+    return ProtobufUtilities.createProtobufRequest(header, request);
-  public static RegionAPI.GetRequest makeGetRequest(String requestKey, String requestRegion)
-      throws CodecNotRegisteredForTypeException, UnsupportedEncodingTypeException,
-      CodecAlreadyRegisteredForTypeException {
-    StringCodec stringCodec = getStringCodec();
-    RegionAPI.GetRequest.Builder getRequestBuilder = RegionAPI.GetRequest.newBuilder();
-    getRequestBuilder.setRegionName(requestRegion)
-        .setKey(BasicTypes.EncodedValue.newBuilder().setEncodingType(BasicTypes.EncodingType.STRING)
-            .setValue(ByteString.copyFrom(stringCodec.encode(requestKey))));
-
-    return getRequestBuilder.build();
-  }
-
-  public static ClientProtocol.Message makeGetRequestMessage(String requestKey,
-      String requestRegion, ClientProtocol.MessageHeader header)
-      throws CodecAlreadyRegisteredForTypeException, UnsupportedEncodingTypeException,
-      CodecNotRegisteredForTypeException {
-    ClientProtocol.Request request = ClientProtocol.Request.newBuilder()
-        .setGetRequest(makeGetRequest(requestKey, requestRegion)).build();
-    return ClientProtocol.Message.newBuilder().setMessageHeader(header).setRequest(request).build();
-  }
-
-  public static StringCodec getStringCodec() throws CodecAlreadyRegisteredForTypeException,
-      CodecNotRegisteredForTypeException, UnsupportedEncodingTypeException {
-    SerializationCodecRegistry serializationCodecRegistry = new SerializationCodecRegistry();
-    return (StringCodec) serializationCodecRegistry.getCodecForType(
-        EncodingTypeTranslator.getSerializationTypeForEncodingType(BasicTypes.EncodingType.STRING));
+  public static ClientProtocol.Message makeGetRequestMessage(
+      SerializationService serializationService, String requestKey, String requestRegion,
+      ClientProtocol.MessageHeader header) throws CodecAlreadyRegisteredForTypeException,
+      UnsupportedEncodingTypeException, CodecNotRegisteredForTypeException {
+    ClientProtocol.Request request = ProtobufRequestUtilities.createGetRequest(requestRegion,
+        ProtobufUtilities.createEncodedValue(serializationService, requestKey));
+    return ProtobufUtilities.createProtobufRequest(header, request);
-
-  public static RegionAPI.GetRegionsRequest makeGetRegionsRequest() {
-    return RegionAPI.GetRegionsRequest.newBuilder().build();
-  }
-
-  public static ClientProtocol.Message makeGetRegionsRequestMessage(
-      ClientProtocol.MessageHeader header) {
-    ClientProtocol.Request request =
-        ClientProtocol.Request.newBuilder().setGetRegionsRequest(makeGetRegionsRequest()).build();
-    return ClientProtocol.Message.newBuilder().setMessageHeader(header).setRequest(request).build();
-  }
