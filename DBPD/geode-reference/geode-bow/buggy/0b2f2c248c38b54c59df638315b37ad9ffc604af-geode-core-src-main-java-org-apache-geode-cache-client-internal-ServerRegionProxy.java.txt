GEODE-6798: Refactor client function execution (#3745)

GEODE-6798: Refactoring of client function execution logic

+import java.util.Collections;
+import java.util.function.Supplier;
+    final ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl executeRegionFunctionOp =
+        new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(rgnName, function,
+            serverRegionExecutor, resultCollector, timeoutMs);
+
+
+        final Supplier<AbstractOp> executeRegionFunctionOpSupplier =
+            () -> new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(region.getFullPath(),
+                function,
+                serverRegionExecutor, resultCollector, timeoutMs);
+
+
-            ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts,
+                function.isHA(),
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, function,
-                serverRegionExecutor, resultCollector, hasResult, serverToBuckets, retryAttempts,
-                true, timeoutMs);
+
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), function,
+                    executor, resultCollector,
+                    hasResult, new HashSet<>(), true, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToBuckets, retryAttempts,
+                function.isHA(), regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
+
-            ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts,
+                function.isHA(),
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, function,
-                serverRegionExecutor, resultCollector, hasResult, serverToFilterMap, retryAttempts,
-                isBucketFilter, timeoutMs);
+
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), function,
+                    executor, resultCollector,
+                    hasResult, new HashSet<>(), isBucketFilter, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToFilterMap, retryAttempts,
+                function.isHA(),
+                regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
-        ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-            resultCollector, hasResult, retryAttempts, timeoutMs);
+        ExecuteRegionFunctionOp.execute(pool,
+            resultCollector, retryAttempts,
+            function.isHA(),
+            executeRegionFunctionOp, false, Collections.EMPTY_SET);
-      ExecuteRegionFunctionOp.execute(pool, rgnName, function, serverRegionExecutor,
-          resultCollector, hasResult, retryAttempts, timeoutMs);
+      ExecuteRegionFunctionOp.execute(pool,
+          resultCollector, retryAttempts,
+          function.isHA(),
+          executeRegionFunctionOp, false, Collections.EMPTY_SET);
-      ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector resultCollector,
-      byte hasResult, boolean isHA, boolean optimizeForWrite, boolean replaying,
+      ServerRegionFunctionExecutor serverRegionExecutor,
+      ResultCollector resultCollector,
+      byte hasResult, boolean isHA, boolean optimizeForWrite,
+      boolean replaying,
+
+    final ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl executeRegionFunctionOp =
+        new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(rgnName, functionId,
+            serverRegionExecutor, resultCollector, hasResult, isHA, optimizeForWrite,
+            true, timeoutMs);
+
+
+        final Supplier<AbstractOp> executeRegionFunctionOpSupplier =
+            () -> new ExecuteRegionFunctionOp.ExecuteRegionFunctionOpImpl(region.getFullPath(),
+                functionId,
+                serverRegionExecutor, resultCollector, hasResult, isHA,
+                optimizeForWrite, true, timeoutMs);
+
-            ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts, isHA,
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, functionId,
-                serverRegionExecutor, resultCollector, hasResult, serverToBuckets, retryAttempts,
-                true, isHA, optimizeForWrite, timeoutMs);
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor1 -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), functionId,
+                    executor1, resultCollector,
+                    hasResult, new HashSet<>(), true, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToBuckets, retryAttempts,
+                isHA,
+                regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
-            ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-                resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionOp.execute(pool,
+                resultCollector, retryAttempts, isHA,
+                executeRegionFunctionOp, false, Collections.EMPTY_SET);
+
-            ExecuteRegionFunctionSingleHopOp.execute(pool, region, functionId,
-                serverRegionExecutor, resultCollector, hasResult, serverToFilterMap, retryAttempts,
-                false, isHA, optimizeForWrite, timeoutMs);
+
+            final java.util.function.Function<ServerRegionFunctionExecutor, AbstractOp> regionFunctionSingleHopOpFunction =
+                executor -> new ExecuteRegionFunctionSingleHopOp.ExecuteRegionFunctionSingleHopOpImpl(
+                    region.getFullPath(), functionId,
+                    executor, resultCollector,
+                    hasResult, new HashSet<>(), false, isHA, optimizeForWrite, timeoutMs);
+
+            ExecuteRegionFunctionSingleHopOp.execute(pool, region,
+                serverRegionExecutor, resultCollector, serverToFilterMap, retryAttempts,
+                isHA,
+                regionFunctionSingleHopOpFunction,
+                executeRegionFunctionOpSupplier);
-        ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-            resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+        ExecuteRegionFunctionOp.execute(pool,
+            resultCollector, retryAttempts, isHA,
+            executeRegionFunctionOp, false, Collections.EMPTY_SET);
-      ExecuteRegionFunctionOp.execute(pool, rgnName, functionId, serverRegionExecutor,
-          resultCollector, hasResult, retryAttempts, isHA, optimizeForWrite, timeoutMs);
+      ExecuteRegionFunctionOp.execute(pool,
+          resultCollector, retryAttempts, isHA,
+          executeRegionFunctionOp, false, Collections.EMPTY_SET);
